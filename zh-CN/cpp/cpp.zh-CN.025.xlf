<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="1722e15c868333813efd4b104be814668519a817" translate="yes" xml:space="preserve">
          <source>a is dereferenceable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af85be30541cf3c1cc1786357554bba31960be49" translate="yes" xml:space="preserve">
          <source>a is the &lt;a href=&quot;https://en.wikipedia.org/wiki/shape_parameter&quot;&gt;shape parameter&lt;/a&gt; and b the &lt;a href=&quot;https://en.wikipedia.org/wiki/scale_parameter&quot;&gt;scale parameter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49bd9a9dd26bfb24d2da2f9f77f66b3d4c1c288" translate="yes" xml:space="preserve">
          <source>a key to identify the node to be extracted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a149b7b74e6a65a47273f584dd7c7ac232d1fa6" translate="yes" xml:space="preserve">
          <source>a list of C++ Standard Library header files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8782b3de9ae3f2417bd220b13bb2753cc1f4be" translate="yes" xml:space="preserve">
          <source>a locale object that provides additional facets that may be required to read messages from the catalog, such as &lt;code&gt;&lt;a href=&quot;../codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; to perform wide/multibyte conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e71868cb3f365476f368f47844d913217a9137" translate="yes" xml:space="preserve">
          <source>a member of a templated entity (such as a non-template member function of a class template)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e28839ea32750c08a2fcd8971020b14fc326e0f" translate="yes" xml:space="preserve">
          <source>a member of an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dafc3ce0f573b8e84a41347cce43e380ea63de6" translate="yes" xml:space="preserve">
          <source>a mixin type to capture and store current exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba80959166b65a2092d8b1d991eb3e7d2787b4dc" translate="yes" xml:space="preserve">
          <source>a monetary value, either &lt;code&gt;long double&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d85d8357d0050652ab03340eb1701af2b493c4" translate="yes" xml:space="preserve">
          <source>a name of a member in a class member access expression (the &lt;code&gt;y&lt;/code&gt; in &lt;code&gt;x.y&lt;/code&gt; or &lt;code&gt;xp-&amp;gt;y&lt;/code&gt;), if the type of the object expression (&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;*xp&lt;/code&gt;) is a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc2f025564c04637d56eb7e1c1db450237cc2bc" translate="yes" xml:space="preserve">
          <source>a name of a member in a class member access expression (the &lt;code&gt;y&lt;/code&gt; in &lt;code&gt;x.y&lt;/code&gt; or &lt;code&gt;xp-&amp;gt;y&lt;/code&gt;), if the type of the object expression (&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;*xp&lt;/code&gt;) is the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fec02bc24240c6336e648373dca10e3f1cd110" translate="yes" xml:space="preserve">
          <source>a name of a namespace. When looking up this name, &lt;a href=&quot;lookup&quot;&gt;lookup&lt;/a&gt; considers namespace declarations only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b60882ea5e865333ab32e7038bdef32efd7376" translate="yes" xml:space="preserve">
          <source>a name used in a class member access expression (&lt;code&gt;y&lt;/code&gt; in &lt;code&gt;x.y&lt;/code&gt; or &lt;code&gt;xp-&amp;gt;y&lt;/code&gt;), where the object expression (&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;*xp&lt;/code&gt;) is the current instantiation and lookup finds the name in the current instantiation or in its non-dependent base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c9a82dbc22eb48eb675b3701b9f16dc6fb33b5" translate="yes" xml:space="preserve">
          <source>a nested class has the same access as the enclosing class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe001c43317d1caf882ae52178a7f54675e62e41" translate="yes" xml:space="preserve">
          <source>a nested class, a member of class template, a member of a nested class, the injected-class-name of the template, the injected-class-name of a nested class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540d2493abe6a42b078ac5d86144b04f3f12a771" translate="yes" xml:space="preserve">
          <source>a nested class/enum that is a dependent member of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545d99d1454f0207b81b1bc7be52eccdd294e3cc" translate="yes" xml:space="preserve">
          <source>a new element can be added using &lt;code&gt;&lt;a href=&quot;push_heap&quot;&gt;std::push_heap&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749dfce19c5ac8954c5ede633a28f4a894cd9958" translate="yes" xml:space="preserve">
          <source>a new element can be added using &lt;code&gt;std::push_heap()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44eb17a21756c348fac70e75744952e031b2322" translate="yes" xml:space="preserve">
          <source>a new thread is launched to execute the task asynchronously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb1684f0137f8bce7cee9377801f48c517a480d" translate="yes" xml:space="preserve">
          <source>a new-expression or a delete-expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da42c1634834970bc80c6244a53b46732819f21" translate="yes" xml:space="preserve">
          <source>a non-&lt;a href=&quot;consteval&quot;&gt;immediate&lt;/a&gt;(since C++20) function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0504278be6e31ecdf6a05b32909135da1f2b6e21" translate="yes" xml:space="preserve">
          <source>a non-character value of type wint_t used to indicate errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c1a4e879cc2341bfa20f35f662761b43d28451" translate="yes" xml:space="preserve">
          <source>a non-empty comma-separated list of the &lt;a href=&quot;template_parameters&quot;&gt;template parameters&lt;/a&gt;, each of which is either &lt;a href=&quot;template_parameters#Non-type_template_parameter&quot;&gt;non-type parameter&lt;/a&gt;, a &lt;a href=&quot;template_parameters#Type_template_parameter&quot;&gt;type parameter&lt;/a&gt;, a &lt;a href=&quot;template_parameters#Template_template_parameter&quot;&gt;template parameter&lt;/a&gt;, or a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; of any of those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4ebfb99ed70e96c02304eef57e908d98001dcd" translate="yes" xml:space="preserve">
          <source>a non-empty comma-separated list of the &lt;a href=&quot;template_parameters&quot;&gt;template parameters&lt;/a&gt;, each of which is either &lt;a href=&quot;template_parameters#Non-type_template_parameter&quot;&gt;non-type parameter&lt;/a&gt;, a &lt;a href=&quot;template_parameters#Type_template_parameter&quot;&gt;type parameter&lt;/a&gt;, a &lt;a href=&quot;template_parameters#Template_template_parameter&quot;&gt;template parameter&lt;/a&gt;, or a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; of any of those. As with any template, parameters may be &lt;a href=&quot;template_parameters#Constrained_template_parameter&quot;&gt;constrained&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df00c8eca7cd2fbea4f0f8f3fd5145439625f83" translate="yes" xml:space="preserve">
          <source>a non-empty comma-separated list of the &lt;a href=&quot;template_parameters&quot;&gt;template parameters&lt;/a&gt;, each of which is either a &lt;a href=&quot;template_parameters#Non-type_template_parameter&quot;&gt;non-type parameter&lt;/a&gt;, a &lt;a href=&quot;template_parameters#Type_template_parameter&quot;&gt;type parameter&lt;/a&gt;, a &lt;a href=&quot;template_parameters#Template_template_parameter&quot;&gt;template parameter&lt;/a&gt;, or a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; of any of those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2b37fa81072e9b1ee1c89273bcc9953318390f" translate="yes" xml:space="preserve">
          <source>a non-owning view over a contiguous sequence of objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461721f9a0ca00bb17ac6e76a814f42d3e1749ad" translate="yes" xml:space="preserve">
          <source>a non-static data member cannot have the same name as the name of the class if at least one user-declared constructor is present;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37e501675842cf2ce7c09fa70ab5dedc837075c" translate="yes" xml:space="preserve">
          <source>a non-static data member declared with the &lt;code&gt;[[&lt;a href=&quot;attributes/no_unique_address&quot;&gt;no_unique_address&lt;/a&gt;]]&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8571e5948696fa3a0d7b2c6ae463dee17f772680" translate="yes" xml:space="preserve">
          <source>a non-type parameter pack representing the sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cc829918d8039aacb098625c56b83243566e33" translate="yes" xml:space="preserve">
          <source>a non-type template parameter;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474020ddb353b3a7c9d5609e0855d065e8423ab6" translate="yes" xml:space="preserve">
          <source>a null pointer value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbf373994e28a1e1683fece568f496734931823" translate="yes" xml:space="preserve">
          <source>a null-terminated string representing path to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f358100ff79892ae8c6aa39c12d943832cbb71" translate="yes" xml:space="preserve">
          <source>a numeric array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eebd4a62a63da3379b0f959cb5cac5a605f069" translate="yes" xml:space="preserve">
          <source>a numeric value to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc05679f204cefd3297a264e8271e75dbb0b32be" translate="yes" xml:space="preserve">
          <source>a pair consisting of an iterator to the smallest element as the first element and an iterator to the greatest element as the second. Returns &lt;code&gt;&lt;a href=&quot;../utility/pair/make_pair&quot;&gt;std::make_pair&lt;/a&gt;(first, first)&lt;/code&gt; if the range is empty. If several elements are equivalent to the smallest element, the iterator to the first such element is returned. If several elements are equivalent to the largest element, the iterator to the last such element is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401666526833d8d067bfb72fb17f04373230d70e" translate="yes" xml:space="preserve">
          <source>a pair of &lt;a href=&quot;../../named_req/forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt; which determines the sequence of characters to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7164733e330d8dc6927dccc306c53f65b665f498" translate="yes" xml:space="preserve">
          <source>a pair of iterators designating the string to be examined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6130cae2494d09eea176a9eaa187a9c3f7aedc" translate="yes" xml:space="preserve">
          <source>a pair of iterators designating the string to be searched for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa50634d9f567585abe6b3edfc6d15becbf88956" translate="yes" xml:space="preserve">
          <source>a pair of iterators which determines the sequence of characters that represents a collating element name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e40823682c802e981306e57a0531f74a7ff0d6" translate="yes" xml:space="preserve">
          <source>a pair of iterators which determines the sequence of characters that represents a name of a character class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba476fff70bcd3d883d784d6eec18f9d074be5cd" translate="yes" xml:space="preserve">
          <source>a pair of iterators which determines the sequence of characters to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e4bdbce3a24b56029c1aee2555efccb1289aca" translate="yes" xml:space="preserve">
          <source>a pair whose .first will be passed to the constructor of T's .first and .second will be passed to the constructor of T's .second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ccf77a4b5560eb0becb3d0bce7233f78e2be5e5" translate="yes" xml:space="preserve">
          <source>a path to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd2615f6015a70bc916b006aa8a8125c89e1932" translate="yes" xml:space="preserve">
          <source>a path to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4834456d3b856ca67b42a154fc1d42dd1e9aaf74" translate="yes" xml:space="preserve">
          <source>a path to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2294ad04d12f4c16c90d68fcca9b3e1b32e7aac8" translate="yes" xml:space="preserve">
          <source>a path which may be absolute or relative; for &lt;code&gt;canonical&lt;/code&gt; it must be an existing path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07aee4d7b70106efad51a98cc866d256c5eb24f7" translate="yes" xml:space="preserve">
          <source>a placeholder (&lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;decltype(auto)&lt;/code&gt;(since C++14)) is used in &lt;code&gt;type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a0fc97beb6cd4fb9c50affc4f6998de2941e06" translate="yes" xml:space="preserve">
          <source>a placeholder type indicating that an iterator or a &lt;code&gt;subrange&lt;/code&gt; should not be returned since it would be dangling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193bf0b0d9050bc404b3cdf44245e12794ae8d1c" translate="yes" xml:space="preserve">
          <source>a point in time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96eb8d1fe4496dccbe007afd457c85b8d8d0f374" translate="yes" xml:space="preserve">
          <source>a pointer of type &lt;code&gt;Container*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9e2ce233996a34e6002e70673dcd72c40e7824" translate="yes" xml:space="preserve">
          <source>a pointer to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff40e20ebe7a952e5f0e41d5dc0a0d24f856aae" translate="yes" xml:space="preserve">
          <source>a pointer to &lt;code&gt;const&lt;/code&gt; type can be converted to a pointer to &lt;code&gt;const volatile&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa94b3e75ee0b28536222ee7e71f66f004a35b00" translate="yes" xml:space="preserve">
          <source>a pointer to &lt;code&gt;volatile&lt;/code&gt; type can be converted to a pointer to &lt;code&gt;const volatile&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5806dbd5cc714f5d22449c10d270d04fa821079f" translate="yes" xml:space="preserve">
          <source>a pointer to a &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17da070450247f77f91bb43db58967387c15893" translate="yes" xml:space="preserve">
          <source>a pointer to a null-terminated character sequence of the underlying &lt;code&gt;value_type&lt;/code&gt; to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5868f86a6ff0331b3d62617e594ed6c42d614c96" translate="yes" xml:space="preserve">
          <source>a pointer to a null-terminated target character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26e74b89fa7b45bd653c4faa65a7d07cba9456c" translate="yes" xml:space="preserve">
          <source>a pointer to an object previously declared reachable and not destructed since then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe109d0f282a2cb4dac348461d4191b0d06c42" translate="yes" xml:space="preserve">
          <source>a pointer to an object to manage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47e7e0accf01a683e168ad7cabf5a3c2fe36188" translate="yes" xml:space="preserve">
          <source>a pointer to one past the last element in the initializer list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5766a829033a5221af62a829dfc7bfe307fedf" translate="yes" xml:space="preserve">
          <source>a pointer to the control block; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e59b74fcd897391168335d0c5af56c34fc3908" translate="yes" xml:space="preserve">
          <source>a pointer to the first element in the initializer list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0182a86b94415d71bd302996076ea3a6bdd7fee1" translate="yes" xml:space="preserve">
          <source>a pointer to the object to be destroyed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4aa5073712889a735a830905f358a121d64ac7" translate="yes" xml:space="preserve">
          <source>a pointer type &lt;code&gt;T*&lt;/code&gt; if either &lt;code&gt;Y*&lt;/code&gt; is convertible to &lt;code&gt;T*&lt;/code&gt; or &lt;code&gt;Y&lt;/code&gt; is the array type &lt;code&gt;U[N]&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;U cv []&lt;/code&gt; (where cv is some set of cv-qualifiers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18f0cda8e8f7ed1487c3f8e9b21b1efcd3886a0" translate="yes" xml:space="preserve">
          <source>a pointer-like type supporting a null value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642ef2320577c98feaf2f935169ad215e1202ed9" translate="yes" xml:space="preserve">
          <source>a positive integer value if the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6cc03f4988d728ce081139bdfc45bfb8bd3735" translate="yes" xml:space="preserve">
          <source>a possibly empty list of types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6ea4c3b9c17b6dc92aee8c5dd47071001c91c3" translate="yes" xml:space="preserve">
          <source>a prvalue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1d95163d3517c2604ea137c4ba1953d3f8ac75" translate="yes" xml:space="preserve">
          <source>a prvalue (&amp;ldquo;pure&amp;rdquo; rvalue) is an expression whose evaluation either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1f652d46041654d8a240c2bf30af99c268dbd1" translate="yes" xml:space="preserve">
          <source>a prvalue if new_type is a pointer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c30795b63cb566bca79b869124caee872837e7" translate="yes" xml:space="preserve">
          <source>a prvalue otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae16f22aa50f08d46bb5378890a1cb963ca51a0" translate="yes" xml:space="preserve">
          <source>a range identifying the target character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963453d16288073b804281c7702af3fe9e1801b2" translate="yes" xml:space="preserve">
          <source>a recursive_directory_iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5132c6b64613105873d229f027aa15ec9143314c" translate="yes" xml:space="preserve">
          <source>a redundant deduction guide from &lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; was provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d7405b3f39459f6d35e16ee3b9ded3a80c9e59" translate="yes" xml:space="preserve">
          <source>a reference to a string to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea668576cf594d47b3fcb6faaa85a0840df63c9" translate="yes" xml:space="preserve">
          <source>a reference to another sub_match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42daa13b557361b08a60cee4245497cf3bf4c9a4" translate="yes" xml:space="preserve">
          <source>a regular file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7264916bfbb477a822b4f5961b4c7e3c2d8b81" translate="yes" xml:space="preserve">
          <source>a safely-derived pointer or a null pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7014cfa9492edab94fbea8def737c5863f9ee75b" translate="yes" xml:space="preserve">
          <source>a sequence of aforementioned expressions joined with the operator &lt;code&gt;||&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1271d5dc7168a2db58191e9dc37812929e036665" translate="yes" xml:space="preserve">
          <source>a sequence of declarations, which may include nested linkage specifications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492a0055d77ea0e7979cf99d3b9100bf9e6853bf" translate="yes" xml:space="preserve">
          <source>a sequence of digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437ad04c499151144ca622e6de6ccb56ac4ed3f0" translate="yes" xml:space="preserve">
          <source>a sequence of names and scope resolution operators &lt;code&gt;::&lt;/code&gt;, ending with a scope resolution operator. A single &lt;code&gt;::&lt;/code&gt; refers to the global namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a969aeabc8b8b20a4d37355be80304529fc8aac9" translate="yes" xml:space="preserve">
          <source>a sequence of primary expressions joined with the operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41815073a182a0e93d9d1f5bb461a6dd95f33c48" translate="yes" xml:space="preserve">
          <source>a set of constructor options for pool resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657d57ff00cbd7f0b4c8c5fca1a4b16b8fe92fdf" translate="yes" xml:space="preserve">
          <source>a set of potential results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a80b6b789109b97b000dd6b67e08d846ccd344a" translate="yes" xml:space="preserve">
          <source>a shared pointer whose deleter needs to be accessed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38297cac1f2492ccb4361346a5b04f3c3ce5344" translate="yes" xml:space="preserve">
          <source>a single member of type &lt;code&gt;value_type _Complex&lt;/code&gt; (encapsulating the corresponding &lt;a href=&quot;http://en.cppreference.com/w/c/language/arithmetic_types.html#Complex_floating_types&quot;&gt;C language complex number type&lt;/a&gt;) (e.g. GNU libstdc++);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b7583b927d79bd0e6443cb077caa1e3a605abe" translate="yes" xml:space="preserve">
          <source>a socket file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1ee6d49146119c2667dd25d1b1f7677b194c6a" translate="yes" xml:space="preserve">
          <source>a span</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91796b64b657a4ea88113e721436cde4d24901e" translate="yes" xml:space="preserve">
          <source>a special-purpose &lt;code&gt;&lt;a href=&quot;../memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; that releases the allocated memory only when the resource is destroyed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb71949bec343c285e93494c68e69b194b467f35" translate="yes" xml:space="preserve">
          <source>a special-purpose &lt;code&gt;&lt;a href=&quot;memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; that releases the allocated memory only when the resource is destroyed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55315057b1e6ca22b588933379ab53dc4dbb5d28" translate="yes" xml:space="preserve">
          <source>a specialization of &lt;a href=&quot;node_handle&quot;&gt;node handle&lt;/a&gt; representing a container node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d6f69c5a1bfa9da7a9302a7d31031ed0d75fa7" translate="yes" xml:space="preserve">
          <source>a specialization of a &lt;a href=&quot;constraints&quot;&gt;concept&lt;/a&gt;, such as &lt;code&gt;&lt;a href=&quot;../concepts/equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt;&amp;lt;int&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71afb134e4d76a9c9d6e4a17d57f0fc5b78879e6" translate="yes" xml:space="preserve">
          <source>a standard &lt;a href=&quot;implicit_cast#Pointer_conversions&quot;&gt;pointer conversion&lt;/a&gt; other than one to a private, protected, or ambiguous base class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883f86f638bc30ab0d51069c57c2d488cd03bdf" translate="yes" xml:space="preserve">
          <source>a starting offset into &lt;code&gt;str&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482c44d3087fdfc1fe38429c3878d8c8d9282549" translate="yes" xml:space="preserve">
          <source>a statement with a &lt;a href=&quot;statements#Labels&quot;&gt;label&lt;/a&gt; other than &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092e5d5910cd24daae23118a07aa91b2b252f93d" translate="yes" xml:space="preserve">
          <source>a store in one thread becomes a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f9f715d088c71a225a10a34cdb210f72724438" translate="yes" xml:space="preserve">
          <source>a stream input function that does not skip leading whitespace and counts the processed characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86acac3440ff6574b7aafc85db3e9612510b1eaa" translate="yes" xml:space="preserve">
          <source>a stream input function that skips leading whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52577f0845ce0978ebbcc527dd47bbdcd7227491" translate="yes" xml:space="preserve">
          <source>a stream object that this function uses to obtain locale facets when needed, e.g. &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; to narrow characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984cb3566b9dee3ad097d1c34b021c5a7f4b4f28" translate="yes" xml:space="preserve">
          <source>a stream object that this function uses to obtain locale facets when needed, e.g. &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; to skip whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4997f497c3e302df90742a22dea3b52227c3c2e8" translate="yes" xml:space="preserve">
          <source>a stream object that this function uses to obtain locale facets when needed, e.g. &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; to skip whitespace or &lt;code&gt;&lt;a href=&quot;../collate&quot;&gt;std::collate&lt;/a&gt;&lt;/code&gt; to compare strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500a903f5f9e867d5804cc0dd5e4e3858f927056" translate="yes" xml:space="preserve">
          <source>a stream output function that sets failbit on errors and returns a reference to the stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93f2d3d77836f607fc40e7a8b0697722e29183b" translate="yes" xml:space="preserve">
          <source>a streambuf object to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdb9278e4568fa8950fb769970b38dd80b915eb" translate="yes" xml:space="preserve">
          <source>a string holding the converted value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1edcd1c115e0107359a93a302fc7301b585bf2e" translate="yes" xml:space="preserve">
          <source>a string identifying target character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a136b5c3b60eaae1495c69987303a26e06fabe0c" translate="yes" xml:space="preserve">
          <source>a string object holding the replacement character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998c1dfcdc6cff6fd352ac2ce6caf38a4c863f61" translate="yes" xml:space="preserve">
          <source>a string or string view representing path to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425bf9812e28d908720f162b8a9d1517a6cc2c8d" translate="yes" xml:space="preserve">
          <source>a string used to indicate negative monetary quantity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757d7a97b6240cce0f9fe837451991e14db0783e" translate="yes" xml:space="preserve">
          <source>a string used to indicate non-negative monetary quantity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9575d67efdbcb362fb37d3399a2d1499fafcd8" translate="yes" xml:space="preserve">
          <source>a string whose elements indicate the sizes of digit groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9508c6033989957b6f8e8de2d15f2ea90ecf6a21" translate="yes" xml:space="preserve">
          <source>a string_view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64f01d954d3375d8cfd201538c42f6b59d21019" translate="yes" xml:space="preserve">
          <source>a sub-match object to output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8908ec1b7cfd8b0032130dfdefccf5436e4d74d" translate="yes" xml:space="preserve">
          <source>a subexpression of such an initialization, such as a default argument expression, is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ac6992277d634908b4c31697fb961fa7868174" translate="yes" xml:space="preserve">
          <source>a subobject (including non-static class member, base subobject, or array element);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e0d3d09899be3eceef7f232ff3b29daf7bb557" translate="yes" xml:space="preserve">
          <source>a substring can be found only if &lt;code&gt;pos &amp;lt;= size() - str.size()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927effb766064e06036e26183214b36aef8d068a" translate="yes" xml:space="preserve">
          <source>a symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99e9e35c54d46b7221907dcb8419820577caa33" translate="yes" xml:space="preserve">
          <source>a template name followed by its argument list (&lt;code&gt;MyTemplate&amp;lt;int&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e703bd520d64c3124cead64d278558a15a5e90" translate="yes" xml:space="preserve">
          <source>a template parameter list (in angle brackets), used to provide names to the template parameters of a generic lambda (see &lt;code&gt;ClosureType::operator()&lt;/code&gt; below). Like in a &lt;a href=&quot;templates&quot;&gt;template declaration&lt;/a&gt;, the template parameter list may be followed by an optional requires-clause, which specifies the &lt;a href=&quot;constraints&quot;&gt;constraints&lt;/a&gt; on the template arguments. If provided, the template parameter list cannot be empty (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is not allowed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6001cde94a687b293e3f3c935010c267d550468f" translate="yes" xml:space="preserve">
          <source>a template template parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfbda2f69b96c358999cea754fa765931beaa31" translate="yes" xml:space="preserve">
          <source>a temporary bound to a reference in a reference element of an aggregate initialized using direct-initialization syntax (parentheses) as opposed to list-initialization syntax (braces) exists until the end of the full expression containing the initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef11c35b4169d244776ebb848ca8905903eb26d" translate="yes" xml:space="preserve">
          <source>a temporary bound to a reference in the initializer used in a new-expression exists until the end of the full expression containing that new-expression, not as long as the initialized object. If the initialized object outlives the full expression, its reference member becomes a dangling reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66afb7bc32c460b11c77d25a4eacd0e23bc435b" translate="yes" xml:space="preserve">
          <source>a temporary bound to a reference member in a constructor &lt;a href=&quot;constructor&quot;&gt;initializer list&lt;/a&gt; persists only until the constructor exits, not as long as the object exists. (note: such initialization is ill-formed as of DR 1696).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5f2240079a48372e54bcd314fc06560bc3e66d" translate="yes" xml:space="preserve">
          <source>a temporary bound to a reference parameter in a function call exists until the end of the full expression containing that function call: if the function returns a reference, which outlives the full expression, it becomes a dangling reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d22ac303e4e078978b441757085a536a55abdaf" translate="yes" xml:space="preserve">
          <source>a temporary bound to a return value of a function in a &lt;code&gt;return&lt;/code&gt; statement is not extended: it is destroyed immediately at the end of the return expression. Such function always returns a dangling reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f37e155ccfd31cd00dc799ade120dce794bc3ae" translate="yes" xml:space="preserve">
          <source>a temporary object (including one created during &lt;a href=&quot;reference_initialization&quot;&gt;reference initialization&lt;/a&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f7ff1c375a28052c78c1149363125994a622f4" translate="yes" xml:space="preserve">
          <source>a temporary object that is equivalent to &lt;code&gt;nullptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5028d0a52df56b3d6f291ed51bdfc55e00cc04" translate="yes" xml:space="preserve">
          <source>a thread-safe &lt;code&gt;&lt;a href=&quot;../memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; for managing allocations in pools of different block sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5df43300d9139f59894b3e49b4f65598c84a06" translate="yes" xml:space="preserve">
          <source>a thread-safe &lt;code&gt;&lt;a href=&quot;memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; for managing allocations in pools of different block sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d4c600af47017db2e04952f95e36fbda455a3d" translate="yes" xml:space="preserve">
          <source>a thread-safe &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; for managing allocations in pools of different block sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717aa65ba116416bb08189a081c45f1bbba0a4b6" translate="yes" xml:space="preserve">
          <source>a thread-unsafe &lt;code&gt;&lt;a href=&quot;../memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; for managing allocations in pools of different block sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97cbd52f42d851827351ef766c69d2eacb3ba951" translate="yes" xml:space="preserve">
          <source>a thread-unsafe &lt;code&gt;&lt;a href=&quot;memory/memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; for managing allocations in pools of different block sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bb30d639da8e4257b1b474bd258fa692566326" translate="yes" xml:space="preserve">
          <source>a thread-unsafe &lt;code&gt;&lt;a href=&quot;memory_resource&quot;&gt;std::pmr::memory_resource&lt;/a&gt;&lt;/code&gt; for managing allocations in pools of different block sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da795458e60bf769fa7d3bfeeabd3197aa03886" translate="yes" xml:space="preserve">
          <source>a throw expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9992c06f3dda6b98e3078a55bb93468c7365b674" translate="yes" xml:space="preserve">
          <source>a tick count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308d29b99480635b3b889f22de83b89b658667c2" translate="yes" xml:space="preserve">
          <source>a time interval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c52e9185a5e6c699afc88474a23c38be8c48a4" translate="yes" xml:space="preserve">
          <source>a time offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fff032de40100efc4423b61a137d82bdabe10a" translate="yes" xml:space="preserve">
          <source>a time offset to apply</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aafdc9c4f71f89896f69ba3a260977a5d749e8e" translate="yes" xml:space="preserve">
          <source>a time point to apply the offset to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e82d4fc99dd0bbd35ba2ed884ad40ffc38786a" translate="yes" xml:space="preserve">
          <source>a tuple of values used to initialize each element of the tuple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbe90e7947875ebf8641fc690eadf8fb038fb0f" translate="yes" xml:space="preserve">
          <source>a type for which initialization is effectively equal to assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9200a53975557197af2fdd76ddceb09b50c730be" translate="yes" xml:space="preserve">
          <source>a type for which the invoke operation is defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd32cf89a8666287fb1343694860c6ff3364e49" translate="yes" xml:space="preserve">
          <source>a type satisfying &lt;a href=&quot;binarypredicate&quot;&gt;BinaryPredicate&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045c0dbc6d3a870b4565b20ac200df178565dfd8" translate="yes" xml:space="preserve">
          <source>a type template parameter;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f678a6907e22e6165258f688483cf2d1036ec7d" translate="yes" xml:space="preserve">
          <source>a type that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4581704f4191c3fffe1ece3b9ca5d9dbc8ec09be" translate="yes" xml:space="preserve">
          <source>a type that can be used to identify distance between iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed832d1e24d469eb0046c0819408351b92476211" translate="yes" xml:space="preserve">
          <source>a type to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3bd0227506c8291d623702eb4fdf05aaaf0672" translate="yes" xml:space="preserve">
          <source>a type to retrieve numeric properties for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f444599f692a39876563cf208495abe3933ed3e2" translate="yes" xml:space="preserve">
          <source>a type used in a non-dependent name is &lt;a href=&quot;incomplete_type&quot;&gt;incomplete&lt;/a&gt; at the point of definition but complete at the point of instantiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71547d0347d5e9bd8b13ce274b82ab27c4198722" translate="yes" xml:space="preserve">
          <source>a type with at least one constexpr (possibly template) constructor that is not a copy or move constructor,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c0f69387e116eb317a69b8048ee7291703964a" translate="yes" xml:space="preserve">
          <source>a type with constexpr constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fc821a8ad0dc6f4ba2c6891c72a9cae774bc10" translate="yes" xml:space="preserve">
          <source>a type-safe discriminated union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4095426d3d1fd2ffe5f481c37155b695734cc34a" translate="yes" xml:space="preserve">
          <source>a user-defined conversion function name (&lt;code&gt;operator bool&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca679d4be25a81ca569a485fb6d7bf4a65d2d747" translate="yes" xml:space="preserve">
          <source>a user-defined literal operator name (&lt;code&gt;operator &quot;&quot; _km&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e4dbc39affde54dbf8f6a76063346fe130209d" translate="yes" xml:space="preserve">
          <source>a valid iterator into this container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fdbbe218208d0ca21418cb78e3c66d2d42418f" translate="yes" xml:space="preserve">
          <source>a valid open catalog identifier, on which &lt;code&gt;close()&lt;/code&gt; has not yet been called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87227a4dddeac1b41ae163c715d434b858cade7" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::partial_ordering&lt;/code&gt; indicating equivalence (neither ordered before nor ordered after)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba94eb1d71ba696823314c6cbc2ed8c248c0d120" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::partial_ordering&lt;/code&gt; indicating greater-than (ordered after) relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d394512a7a5e31441f4b4f116b0e5274e6c9e4" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::partial_ordering&lt;/code&gt; indicating less-than (ordered before) relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7717f9207eb8be37483adf1191c3a4d95108489" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::partial_ordering&lt;/code&gt; indicating relationship with an incomparable value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f22e8f322a297dff544d454acdb8cca3f36808" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::strong_equality&lt;/code&gt; indicating equality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d658ac8c6c7e11c334bb7cb5437f86e3f9648a4" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::strong_equality&lt;/code&gt; indicating non-equality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eac86f05902f06966d72a8ec74fa5d4ed506a77" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::strong_ordering&lt;/code&gt; indicating equivalence (neither ordered before nor ordered after)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36aa5a014c4c6fe990c3b8d75f775bffe494d32d" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::strong_ordering&lt;/code&gt; indicating greater-than (ordered after) relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31267ca3a1b2839497f833541aaac8188e150ad8" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::strong_ordering&lt;/code&gt; indicating less-than (ordered before) relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bb51bceb2f22c0db7c3da172a15239f85727a2" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::weak_equality&lt;/code&gt; indicating equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2d3d576ad39d0142abb43ea30a38d42f8cc965" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::weak_equality&lt;/code&gt; indicating non-equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810421beac9a0ec676c860cca7f53f3d47ac75c5" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::weak_ordering&lt;/code&gt; indicating equivalence (neither ordered before nor ordered after)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cc37a19f58d1d8929fd1f8068b05ef4273a56f" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::weak_ordering&lt;/code&gt; indicating greater-than (ordered after) relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d046f4e8dcf3051da87803127b0c3ea01e8721f2" translate="yes" xml:space="preserve">
          <source>a valid value of the type &lt;code&gt;std::weak_ordering&lt;/code&gt; indicating less-than (ordered before) relationship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4647f796987297ce25c638aa6797954b40b730" translate="yes" xml:space="preserve">
          <source>a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0080a9fe08a7b863dd9e687917ff52d787569044" translate="yes" xml:space="preserve">
          <source>a value computation (a read) B of M, then the evaluation B shall take its value from X or from a side effect Y that follows X in the modification order of M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed91d57f15e2c287ca2c6b1611f90ef848643f68" translate="yes" xml:space="preserve">
          <source>a value computation B on M, and if the value of A comes from a write X on M, then the value of B is either the value stored by X, or the value stored by a side effect Y on M that appears later than X in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a838c345c6c351622fb852312c931cf0edefcf2a" translate="yes" xml:space="preserve">
          <source>a value defining the base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b30833f253e4b436746ae3b71512c5fd52717e" translate="yes" xml:space="preserve">
          <source>a value defining the exponent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fce5a421893ea83b109ec3ef6c84048a8a4e5c1" translate="yes" xml:space="preserve">
          <source>a value of any type that can be transparently compared with a key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123a8d42bb84535e98ee2dd720b3dcf227832869" translate="yes" xml:space="preserve">
          <source>a value of type &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; is constructible from a value of type &lt;code&gt;std::streamoff&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524bc50a99aecd65256021ca2670cbce9d7b90e1" translate="yes" xml:space="preserve">
          <source>a value of type &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; is implicitly convertible to &lt;code&gt;std::streamoff&lt;/code&gt; (the conversion result is the offset from the beginning of the file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9906ec61d6eb5d18cab351a3da11f3d62c7fbdc2" translate="yes" xml:space="preserve">
          <source>a value of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1412ee9859fb3808f7e885a723fa58485f6ccb3" translate="yes" xml:space="preserve">
          <source>a value of type &lt;code&gt;std::streamoff&lt;/code&gt; may be added or subtracted from &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; yielding a different &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c678d289ccdf886ceeb43e22df82d9ec59a85b" translate="yes" xml:space="preserve">
          <source>a value to assign to all of the referred elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388c22b783a1c552e32f454816813bd8b6bed90f" translate="yes" xml:space="preserve">
          <source>a variant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef78772f4ff009c1de352b6b5fb86b2c09121d43" translate="yes" xml:space="preserve">
          <source>a variant object to swap with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fcd2ed3c9e77b89178462e113bac02023b8ce0" translate="yes" xml:space="preserve">
          <source>a whitespace character (as determined by the &lt;a href=&quot;../../locale/ctype&quot;&gt;&lt;code&gt;ctype&amp;lt;CharT&amp;gt;&lt;/code&gt;&lt;/a&gt; facet) is found. The whitespace character is not extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea335a82904fdc0ff7ed8d67686a2da59de347f" translate="yes" xml:space="preserve">
          <source>a wide string holding the converted value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fc49a513178412bd26585a1951e60e1512df6c" translate="yes" xml:space="preserve">
          <source>a wrapper that may or may not hold an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c1e12768af8227029571c7e937613f3d1dd4d4" translate="yes" xml:space="preserve">
          <source>a zero value of type &lt;code&gt;category&lt;/code&gt; indicating no facet category</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f273695a5a1599ad5b5ca77ec4a73b0683a9ab3b" translate="yes" xml:space="preserve">
          <source>a(b...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f70cb2bc562eb0488f01aebc9ebd032140296e" translate="yes" xml:space="preserve">
          <source>a) 5 whitespace characters (space, horizontal tab, vertical tab, form feed, new-line)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12c756fdbcbb92b84994d84f0a2a18f6e350df3" translate="yes" xml:space="preserve">
          <source>a) Additionally, if the set of overloads is named by a &lt;a href=&quot;templates#template-id&quot;&gt;template-id&lt;/a&gt;, all of its type template arguments and template template arguments (but not non-type template arguments) are examined and their associated set of classes and namespaces are added to the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437f1f887f108bd8e9d9c9a167ac433a1868259a" translate="yes" xml:space="preserve">
          <source>a) All characters have been read from the format string (&lt;code&gt;fmtbeg == fmtend&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a157ebe1520696e0d5fa9829ecbafdf2d7c298" translate="yes" xml:space="preserve">
          <source>a) Constructors specified to call &lt;code&gt;traits::default_zone()&lt;/code&gt;(1-2) do not participate in overload resolution if that expression is not well-formed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd0a95fe5df6c4409914437d488e07b4c97ee7a" translate="yes" xml:space="preserve">
          <source>a) First, checks if there is a putback position, and if there isn't, backs up the get area by re-reading the file starting one byte earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70339178f31d9c4b203af61ebfb3de6bac3e343d" translate="yes" xml:space="preserve">
          <source>a) First, checks if there is a putback position, and if there isn't, fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266f244142e555e17245e516616d2942410a672e" translate="yes" xml:space="preserve">
          <source>a) First, checks if there is a putback position, and if there really isn't, fails. (stringbuf has no external character source to re-read)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f06d25a28e83158d3b062e8fbd9c4c1906e02be" translate="yes" xml:space="preserve">
          <source>a) First, checks if there is a putback position, and if there really isn't, fails. (strstreambuf has no external character source to re-read)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd4d72a2e404d093102dbf4ffd691103314cc54" translate="yes" xml:space="preserve">
          <source>a) First, the character &lt;code&gt;delim&lt;/code&gt; is added to the sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bd11e1267cf1174bd8f32fbdbc7fedac11d5ab" translate="yes" xml:space="preserve">
          <source>a) If &lt;code&gt;D&lt;/code&gt; is non-reference type &lt;code&gt;A&lt;/code&gt;, then the signatures are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc003912afddad6053db83d5148e7cdc01edceb" translate="yes" xml:space="preserve">
          <source>a) If &lt;code&gt;str.size()&lt;/code&gt; is not less than &lt;code&gt;os.width()&lt;/code&gt;, uses the range &lt;code&gt;[str.begin(), str.end())&lt;/code&gt; as-is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a5f788593c8daf9e9ddffc020a930e268fbd9a" translate="yes" xml:space="preserve">
          <source>a) If &lt;code&gt;v.size()&lt;/code&gt; is not less than &lt;code&gt;os.width()&lt;/code&gt;, uses the range &lt;code&gt;[v.begin(), v.end())&lt;/code&gt; as-is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8c44237f1afed0004cf3c4a245cc4d1c4bbddd" translate="yes" xml:space="preserve">
          <source>a) If expression is a &lt;a href=&quot;value_category&quot;&gt;glvalue expression&lt;/a&gt; that identifies an &lt;a href=&quot;objects#Polymorphic_objects&quot;&gt;object of a polymorphic type&lt;/a&gt; (that is, a class that declares or inherits at least one &lt;a href=&quot;virtual&quot;&gt;virtual function&lt;/a&gt;), the &lt;code&gt;typeid&lt;/code&gt; expression evaluates the expression and then refers to the &lt;code&gt;&lt;a href=&quot;../types/type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object that represents the dynamic type of the expression. If the glvalue expression is obtained by applying the unary * operator to a pointer and the pointer is a null pointer value, an exception of type &lt;code&gt;&lt;a href=&quot;../types/bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt; or a type derived from &lt;code&gt;&lt;a href=&quot;../types/bad_typeid&quot;&gt;std::bad_typeid&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1682667f6f58387c4a3a5eb5d60565f9e8c0ee3" translate="yes" xml:space="preserve">
          <source>a) If the first character extracted does not equal &lt;code&gt;delim&lt;/code&gt; (as determined by the stream's &lt;code&gt;traits_type::eq&lt;/code&gt;), then simply performs &lt;code&gt;in &amp;gt;&amp;gt; s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf877b1bb6d84626c8b2480a35ab58ddc09aac4" translate="yes" xml:space="preserve">
          <source>a) If the overload set includes a literal operator with the parameter type &lt;code&gt;long double&lt;/code&gt;, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X(fL)&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; is the literal without ud-suffix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a10c79ee5b49281c2c3402d762bbc9e13c5f52e" translate="yes" xml:space="preserve">
          <source>a) If the overload set includes a string literal operator template with a non-type template parameter for which &lt;code&gt;str&lt;/code&gt; is a well-formed template argument, then the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X&amp;lt;str&amp;gt;()&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f946980c27e51eef79ec387ad641f4792c71801" translate="yes" xml:space="preserve">
          <source>a) Initializes the base class by calling the default constructor of &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::streambuf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107a2fb46199d233745f2a933254fe3517b475f3" translate="yes" xml:space="preserve">
          <source>a) Template arguments are substituted into the return-type-requirement;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea62973ffbaf6e4b7be3215f3e34664f8df82be" translate="yes" xml:space="preserve">
          <source>a) The class itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466fce6e76439d17f18e4aea7f97216937bf04cf" translate="yes" xml:space="preserve">
          <source>a) The most derived object pointed/identified by expression is examined. If, in that object, expression points/refers to a public base of &lt;code&gt;Derived&lt;/code&gt;, and if only one subobject of &lt;code&gt;Derived&lt;/code&gt; type is derived from the subobject pointed/identified by expression, then the result of the cast points/refers to that &lt;code&gt;Derived&lt;/code&gt; subobject. (This is known as a &quot;downcast&quot;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987633d7111212e5e8e7663207a7b93bc7019313" translate="yes" xml:space="preserve">
          <source>a) The types of all template arguments provided for type template parameters (skipping non-type template parameters and skipping template template parameters)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a518d047a5d3a8b77c37fbf7069dabf9cecb089" translate="yes" xml:space="preserve">
          <source>a) Then checks what character is in the putback position. If the character held there is already equal to &lt;code&gt;c&lt;/code&gt;, as determined by &lt;code&gt;Traits::eq(to_char_type(c), gptr()[-1])&lt;/code&gt;, then simply decrements &lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8ed2e6f2abdfefbc372215e5d0630692101cbb" translate="yes" xml:space="preserve">
          <source>a) all non-member functions (in which case the argument list for the purpose of overload resolution is exactly the argument list used in the function call expression)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3600f271d2e3151d703465b10d1c79c86ecf96f2" translate="yes" xml:space="preserve">
          <source>a) at every level other than top level, the union of the cv-qualifications of P1 and P2 at that level b) if the resulting cv-qualification at any level is different from P1's or P2's cv-qualification at the same level, then const is added to every level between the top level and this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd7f604404718216681289b701b2019db7cabf8" translate="yes" xml:space="preserve">
          <source>a) end-of-file condition on &lt;code&gt;input&lt;/code&gt;, in which case, &lt;code&gt;getline&lt;/code&gt; sets &lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;&lt;code&gt;eofbit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57ad183139e2466db24858c2f6b437736f099b1" translate="yes" xml:space="preserve">
          <source>a) expanding or contracting the existing area pointed to by &lt;code&gt;ptr&lt;/code&gt;, if possible. The contents of the area remain unchanged up to the lesser of the new and old sizes. If the area is expanded, the contents of the new part of the array are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4a80e9567643deb27123df938bbea4e9deeb55" translate="yes" xml:space="preserve">
          <source>a) header names such as &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; or &lt;code&gt;&quot;myfile.h&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7a443418dd879e2d3885e2eeffb2a19cb00ec5" translate="yes" xml:space="preserve">
          <source>a) if &lt;code&gt;A&lt;/code&gt; is a reference type, &lt;code&gt;A&lt;/code&gt; can be more cv-qualified than the deduced &lt;code&gt;A&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4629c4d4e36547d54a5ff31cb306103dd320521" translate="yes" xml:space="preserve">
          <source>a) if &lt;code&gt;A&lt;/code&gt; is an array type, &lt;code&gt;A&lt;/code&gt; is replaced by the pointer type obtained from array-to-pointer conversion;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bf0dd3de46a355e6f516c216a3d299b1d3c83c" translate="yes" xml:space="preserve">
          <source>a) if &lt;code&gt;E&lt;/code&gt; is a reference type, this deleter is copy constructed from &lt;code&gt;u&lt;/code&gt;'s deleter (requires that this construction does not throw)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75935c9c6507a48245ed01cc000eac33523c73f2" translate="yes" xml:space="preserve">
          <source>a) if &lt;code&gt;dir == ios_base::beg&lt;/code&gt;, then &lt;code&gt;newoff&lt;/code&gt; is zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36876e0da5a6352311db14fe41a6ef11b5558dc4" translate="yes" xml:space="preserve">
          <source>a) if &lt;code&gt;way == ios_base::beg&lt;/code&gt;, then &lt;code&gt;newoff&lt;/code&gt; is zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9415c3eca36aef401421e81341c99e5d0258e061" translate="yes" xml:space="preserve">
          <source>a) if B is a call to &lt;code&gt;&lt;a href=&quot;kill_dependency&quot;&gt;std::kill_dependency&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4325cff51c1a1b727a056e105a42662966383a79" translate="yes" xml:space="preserve">
          <source>a) if the &lt;a href=&quot;value_category&quot;&gt;value category&lt;/a&gt; of expression is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefeba7499751b0acaf52cae7444340f065e725f" translate="yes" xml:space="preserve">
          <source>a) if the &lt;code&gt;app&lt;/code&gt; bit is not set in &lt;code&gt;mode&lt;/code&gt;, constructs the buffer by calling &lt;code&gt;strstreambuf(s, n, s)&lt;/code&gt;. The behavior is undefined if there are less than &lt;code&gt;n&lt;/code&gt; elements in the array whose first element is pointed to by &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7894b98d334227df25984f2365ff6c6cc8b0636" translate="yes" xml:space="preserve">
          <source>a) if the next character in the format string is &lt;code&gt;'%'&lt;/code&gt;, followed by one or two characters that form a valid &lt;code&gt;&lt;a href=&quot;../../io/manip/get_time&quot;&gt;std::get_time&lt;/a&gt;&lt;/code&gt; conversion specifier (see below), these characters are used in the call &lt;code&gt;do_get(beg, end, str, err, t, format, modifier)&lt;/code&gt;, where &lt;code&gt;format&lt;/code&gt; is the primary conversion specifier character, and &lt;code&gt;modifier&lt;/code&gt; is the optional modifier (which appears between &lt;code&gt;%&lt;/code&gt; and the format character, if present). If there is no modifier, the value &lt;code&gt;'\0'&lt;/code&gt; is used. If the format string is ambiguous or ends too early to determine the conversion specifier after &lt;code&gt;'%'&lt;/code&gt;, &lt;code&gt;eofbit&lt;/code&gt; is set in &lt;code&gt;err&lt;/code&gt; and the loop is terminated. If, after the call to &lt;code&gt;do_get&lt;/code&gt;, no error bits are set in &lt;code&gt;err&lt;/code&gt;, the function increments &lt;code&gt;fmtbeg&lt;/code&gt; to point right after the conversion specifier and continues the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3f9733550f79127464bd1985d73fd844c27e51" translate="yes" xml:space="preserve">
          <source>a) if the overload set includes a literal operator with the parameter type &lt;code&gt;unsigned long long&lt;/code&gt;, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X(nULL)&lt;/code&gt;, where n is the literal without ud-suffix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff1d91e7bf01a52263d9ca6bf6d54deabdf55f1" translate="yes" xml:space="preserve">
          <source>a) if the return type is a reference type then &lt;code&gt;P&lt;/code&gt; is the referred type;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ca939dac63496ce1a7896929a05af6de16b4c0" translate="yes" xml:space="preserve">
          <source>a) in particular, it cannot be called recursively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f66b4fdfcb16fba7881642ecfaf01a274dbc58" translate="yes" xml:space="preserve">
          <source>a) lvalue expression that refers to a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d549a3d6e3e7a42f31186199a89ec8f7ea7f71" translate="yes" xml:space="preserve">
          <source>a) non-static data members, including &lt;a href=&quot;bit_field&quot;&gt;bit fields&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a68e221021efbc30c8b4f61ab50cd59c5c9506" translate="yes" xml:space="preserve">
          <source>a) the body of the class in which the name is used until the point of use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96aeb2c24c928e697969ee5996046eb5bad88f4a" translate="yes" xml:space="preserve">
          <source>a)&lt;a href=&quot;member_functions&quot;&gt;non-static member functions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc15a74be8b6296570c4d7251452f29a134e7ee5" translate="yes" xml:space="preserve">
          <source>a)&lt;a href=&quot;nested_classes&quot;&gt;nested classes&lt;/a&gt; and &lt;a href=&quot;enum&quot;&gt;enumerations&lt;/a&gt; defined within the class definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c051741c0c7f67c6c50951fdfe67640e795795e" translate="yes" xml:space="preserve">
          <source>a)&lt;code&gt;&lt;a href=&quot;const_cast&quot;&gt;const_cast&lt;/a&gt;&amp;lt;new_type&amp;gt;(expression)&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f84ea299f7b645cd8d86774845675ab03032e27" translate="yes" xml:space="preserve">
          <source>a)&lt;code&gt;Derived*&lt;/code&gt; to &lt;code&gt;Mid*&lt;/code&gt; is better than &lt;code&gt;Derived*&lt;/code&gt; to &lt;code&gt;Base*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31737b5a9eaba866293c4ef9008f5fae1736f1d8" translate="yes" xml:space="preserve">
          <source>a)&lt;code&gt;S1&lt;/code&gt; is a subsequence of &lt;code&gt;S2&lt;/code&gt;, excluding lvalue transformations. The identity conversion sequence is considered a subsequence of any other conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20561dfb4af837c2c1253d337b24b4377276e9c3" translate="yes" xml:space="preserve">
          <source>a)&lt;code&gt;unique_ptr&amp;lt;U, E&amp;gt;::pointer&lt;/code&gt; is implicitly convertible to &lt;code&gt;pointer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd666a395a45955a30af87360ff4202a5b546c3" translate="yes" xml:space="preserve">
          <source>a, b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f66a14585189df94fde24c6b596c110334603ba" translate="yes" xml:space="preserve">
          <source>a, b, t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbcd756eb8f17f7dc2acf4d5c4c960ce69213d5" translate="yes" xml:space="preserve">
          <source>a-&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5445080535365b5d9e518cf1e903081f400c3601" translate="yes" xml:space="preserve">
          <source>a-x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccff2fee4b15e0b46f79f86ce5d1de59163bb483" translate="yes" xml:space="preserve">
          <source>a=b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2e6999146b2e5d98e688ae468db68d0b172c4d" translate="yes" xml:space="preserve">
          <source>a@</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0338b23241f124f2c83fa6f5821920039bf85db" translate="yes" xml:space="preserve">
          <source>a@b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357888d6b962c5c8b3e8a734b8a8a0c6ee4f908d" translate="yes" xml:space="preserve">
          <source>a[b]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da23614e02469a0d7c7bd1bdab5c9c474b1904dc" translate="yes" xml:space="preserve">
          <source>ab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f930859e3099495023c7f4c15223e146e3fb6fdd" translate="yes" xml:space="preserve">
          <source>abandon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d884ac7276623dfd54d1861aa636cd9fdc3be252" translate="yes" xml:space="preserve">
          <source>abnormal termination condition, as is e.g. initiated by &lt;code&gt;&lt;a href=&quot;abort&quot;&gt;std::abort()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61646f016483b318b49a910668a966b6ce09ede" translate="yes" xml:space="preserve">
          <source>abort</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7923a997e5ef7f7635917efd7303a93b2c10c23a" translate="yes" xml:space="preserve">
          <source>aborts the program if the user-specified condition is not &lt;code&gt;true&lt;/code&gt;. May be disabled for release builds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad868aafb711de55855c42148bd81a55818c60c" translate="yes" xml:space="preserve">
          <source>above increases in order &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;signed char&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;. The rank of any unsigned type is equal to the rank of the corresponding signed type. The rank of &lt;code&gt;char&lt;/code&gt; is equal to the rank of &lt;code&gt;signed char&lt;/code&gt; and &lt;code&gt;unsigned char&lt;/code&gt;. The ranks of &lt;code&gt;char8_t&lt;/code&gt;, &lt;code&gt;char16_t&lt;/code&gt;, &lt;code&gt;char32_t&lt;/code&gt;, and &lt;code&gt;wchar_t&lt;/code&gt; are equal to the ranks of their underlying types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e65ff3ef356705efc535c261cce7e89f8cee0c9" translate="yes" xml:space="preserve">
          <source>abs(float)fabsfabsffabsl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29936715c0d2c3e4408351c24894294d22a4ba5" translate="yes" xml:space="preserve">
          <source>abs(int)labsllabs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2865c132ee8862e2b1023420a048b9e64f309b98" translate="yes" xml:space="preserve">
          <source>abs(std::chrono::duration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b54798bb142efabb4fbf3dd7388194d673d55b" translate="yes" xml:space="preserve">
          <source>abs(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6f84ee958d0dc342ab556a62bf9eb387f756c7" translate="yes" xml:space="preserve">
          <source>abs(std::intmax_t)imaxabs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629c21ff1782d677e2f74b1c590cfef416bae5f9" translate="yes" xml:space="preserve">
          <source>abs(std::valarray)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4dbfbc4fdc56237451cf5e9f9933b2b64f1ba6" translate="yes" xml:space="preserve">
          <source>absolute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3900ea911127bf782b2d7bb9ec9503ece3dbba7" translate="yes" xml:space="preserve">
          <source>absolute path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3c5f72a420848d90e6c04225f08b02aa9c2b77" translate="yes" xml:space="preserve">
          <source>absolute position to set the input position indicator to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c2c580bcfab0cf5a1a4df3f332159163772460" translate="yes" xml:space="preserve">
          <source>absolute position to set the output position indicator to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcfa36ce011dfe9750e6271779802f950b0a9b0" translate="yes" xml:space="preserve">
          <source>absolute position to set the position indicator to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9357a557ff847531cb060f45d0abddb82c2e47d" translate="yes" xml:space="preserve">
          <source>absolute value of a floating point value (|x|)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017e5cf729552cb794a307d6d89e749da467a128" translate="yes" xml:space="preserve">
          <source>abstract class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5038d042023e40d6ce8d0e80922c41525d5ae4cc" translate="yes" xml:space="preserve">
          <source>abstract classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f6c5f94ae2b366113b13448ac6d33dc55f5680" translate="yes" xml:space="preserve">
          <source>abstract declarator or any other valid type-id (which may introduce a new type, as noted in &lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id&lt;/a&gt;). The type-id cannot directly or indirectly refer to identifier. Note that the &lt;a href=&quot;scope#Point_of_declaration&quot;&gt;point of declaration&lt;/a&gt; of the identifier is at the semicolon following type-id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d95fa2bdf5419d67eecaf3bb0a95f06cbfc5c5" translate="yes" xml:space="preserve">
          <source>abstract-declarator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f84dc8735c33645c3c6ec2b28ddc61872ade6e8" translate="yes" xml:space="preserve">
          <source>abstracts a raw device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f12541afcce175fb34bb05a79c95b76e765488b" translate="yes" xml:space="preserve">
          <source>access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13446887417f0ee1ca70bfd31ec213b1aae9588" translate="yes" xml:space="preserve">
          <source>access or insert specified element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b973053d2fa8c95ecb2d733569768e1b0c037a" translate="yes" xml:space="preserve">
          <source>access specified element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540303d3ae3cc4182bfdfad65005d31f4c07d893" translate="yes" xml:space="preserve">
          <source>access specified element with bounds checking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00c2f98a2c96fa7830c21ad2f4a52eb01af5a35" translate="yes" xml:space="preserve">
          <source>access specifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ea0ce8f9724c6d4ab410d11a69b840ea5c34aa" translate="yes" xml:space="preserve">
          <source>access the first element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf967c793171648e632f4e2726650884752bf0d" translate="yes" xml:space="preserve">
          <source>access the last element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fde07b591a1754fefc77ce5787cb7a391bd992a" translate="yes" xml:space="preserve">
          <source>access the stored &lt;a href=&quot;weekday&quot;&gt;&lt;code&gt;weekday&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906a2b305ff3d81ef8cd00a47f6738b44a0703ea" translate="yes" xml:space="preserve">
          <source>access the stored index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ca35991bb3e79fd6877c160c25ae7faf5ede6c" translate="yes" xml:space="preserve">
          <source>access to an object with thread storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4e35cb551b39ac5df3d0f5c072966de7e0bc5c" translate="yes" xml:space="preserve">
          <source>access to the list of environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1308c40aaf0b391d87fbd3a01390b94a22792ed" translate="yes" xml:space="preserve">
          <source>access-specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915e34ef992cc2b0613cc3c40edfc6452401e5af" translate="yes" xml:space="preserve">
          <source>accesses a member of the current character, if &lt;code&gt;CharT&lt;/code&gt; has members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8859cf199e5045f6063afe2a1c74fb02d86310" translate="yes" xml:space="preserve">
          <source>accesses an element by index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f9e2f158d116ffcd2ec763b7eb6ae7093b6c93" translate="yes" xml:space="preserve">
          <source>accesses an element of a &lt;code&gt;pair&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307893ffb3af2e8fb68336d7ef2e7a1929e77102" translate="yes" xml:space="preserve">
          <source>accesses an element of a static-extent &lt;code&gt;span&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0182010f2c943b8a28936254d752a9929a1a678d" translate="yes" xml:space="preserve">
          <source>accesses an element of an &lt;code&gt;array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a1948643b02777abcafeaf44b6d60a9d38302f" translate="yes" xml:space="preserve">
          <source>accesses an element of the sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f588403ceac81d8595da43738008c3fc6e1445" translate="yes" xml:space="preserve">
          <source>accesses and controls the global time zone database information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5416cec259aea9dfa39a3f2ce38b554c84d8a5e" translate="yes" xml:space="preserve">
          <source>accesses components of the broken-down time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465fe1107a769f9ce97b786479c03fa486b03376" translate="yes" xml:space="preserve">
          <source>accesses current submatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca0b5aaf98d0590c7928ca275f5956143cdec63" translate="yes" xml:space="preserve">
          <source>accesses narrow string message catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c444b9366752a59b27a9b7ac65ca3c9498e20709" translate="yes" xml:space="preserve">
          <source>accesses specific bit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95954de39efedbbd11c945a66e5aa8c3f1d1887b" translate="yes" xml:space="preserve">
          <source>accesses the contained value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775eaef77e89b2353f245e0a7c595a3a78725127" translate="yes" xml:space="preserve">
          <source>accesses the current match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44ceda3ed70328cb739aa2ee008c5eb1278dfad" translate="yes" xml:space="preserve">
          <source>accesses the fields of this object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84b05b447149685099b9b6948031163a1e2d5e0" translate="yes" xml:space="preserve">
          <source>accesses the first character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62acc20490bfabe7d01394dca5e559d356299170" translate="yes" xml:space="preserve">
          <source>accesses the imaginary part of the complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ae76f4b08e3760a696737fcbacb908be66ad5b" translate="yes" xml:space="preserve">
          <source>accesses the last character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b940a59bb00a6f07c41d32193cc93f4d06c689f3" translate="yes" xml:space="preserve">
          <source>accesses the managed object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cecf7b31cbb5f621fc8950954889fe16ee84e34" translate="yes" xml:space="preserve">
          <source>accesses the name and target of this &lt;code&gt;link&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c24822cdeb7c5c6b787dbc0cfccf8c9b4d0844f" translate="yes" xml:space="preserve">
          <source>accesses the next variadic function argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a723286dc7c96e200ca879444de3ca39d101395a" translate="yes" xml:space="preserve">
          <source>accesses the output buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9c132adacee5a38570bd948d96708f25f22c70" translate="yes" xml:space="preserve">
          <source>accesses the pointed-to element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f659a4329cc71af1f8453875837d8bdeea128bc3" translate="yes" xml:space="preserve">
          <source>accesses the pointed-to entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06749fb65deecc2a5f99c07aeba3c78da06c5d99" translate="yes" xml:space="preserve">
          <source>accesses the real part of the complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d22c1f14bb5705d73a83db309c93df994c0ec3" translate="yes" xml:space="preserve">
          <source>accesses the specified character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e98c24cae4eb960b8d4836ab8f3ea920d5cd33" translate="yes" xml:space="preserve">
          <source>accesses the specified character with bounds checking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6cb980e3d73e943d3a98d43bbd0ddc2b636c900" translate="yes" xml:space="preserve">
          <source>accesses the stored &lt;a href=&quot;month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04dd43f3cd3807aca556b12a774affdf6d647640" translate="yes" xml:space="preserve">
          <source>accesses the stored &lt;a href=&quot;weekday&quot;&gt;&lt;code&gt;weekday&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492bb42c77a0e5c1f01c3f2f21b3a95dd660f213" translate="yes" xml:space="preserve">
          <source>accesses the stored &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b02198e8684eaef8960a2b5511c750f28ce6f3c" translate="yes" xml:space="preserve">
          <source>accesses the stored reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0949910f4e9ce70df4b5a6858d42a95bb5fe8a" translate="yes" xml:space="preserve">
          <source>accesses the stored year and month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3bee2d9fd1bebfbec951f94b4fbc358b038699" translate="yes" xml:space="preserve">
          <source>accesses the top element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1238af1dbae2bdff4827ecd767faaec52cd2f0c9" translate="yes" xml:space="preserve">
          <source>accesses the underlying iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79724327f1dd9bba356678fd364c9a023950fff5" translate="yes" xml:space="preserve">
          <source>accesses the year, month, and day stored in this object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9feb44130ba9645d99b9eecc75f447bc1d8761" translate="yes" xml:space="preserve">
          <source>accesses wide string message catalog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df78b3677e55c6ee07efc2d06b164bd63f9a9955" translate="yes" xml:space="preserve">
          <source>according to the &lt;a href=&quot;function_template#Function_template_overloading&quot;&gt;partial ordering rules for template specializations&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da612b00046cfa57f5be01bb44f03c97ee5fcb20" translate="yes" xml:space="preserve">
          <source>accumulate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969d0d833f2295227c83dba1aaddeb7931e8c815" translate="yes" xml:space="preserve">
          <source>acos(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e3fcc77d138cab4f6a774c9c292bfa85c21b49" translate="yes" xml:space="preserve">
          <source>acos(std::valarray)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147d0b37b30b50556b9e55d6a8ce932951fad569" translate="yes" xml:space="preserve">
          <source>acos(z), or simply i acos(z) in the upper half of the complex plane.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7065e6c51c4483cfded5cc061fbccd9a93bc104c" translate="yes" xml:space="preserve">
          <source>acosacosfacosl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bace49638bf06b1efa71fbfdf894ebe60780854" translate="yes" xml:space="preserve">
          <source>acosh(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1824220df1c196fec7eafe8955123ab045039cc2" translate="yes" xml:space="preserve">
          <source>acoshacoshfacoshl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d264d67e573f09fc23a4fe379a6118f55837fca5" translate="yes" xml:space="preserve">
          <source>acquire a &lt;code&gt;&lt;a href=&quot;unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&amp;lt;&lt;a href=&quot;mutex&quot;&gt;std::mutex&lt;/a&gt;&amp;gt;&lt;/code&gt;, on the same mutex as used to protect the shared variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bc8fed02b026b5da76bada25db9dd881ed6ed4" translate="yes" xml:space="preserve">
          <source>acquire a &lt;code&gt;std::mutex&lt;/code&gt; (typically via &lt;code&gt;&lt;a href=&quot;lock_guard&quot;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c52002b743e4db150df31d4c92e7f8849bd4395" translate="yes" xml:space="preserve">
          <source>acquire operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef76fa8e24cfa0361d135d67b2541d876650e36" translate="yes" xml:space="preserve">
          <source>acquiring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffffc286d453e652bfac9de12106da90371064f" translate="yes" xml:space="preserve">
          <source>acquiring ownership of uniquely-owned objects with dynamic lifetime from functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d00e89ff1449e7e4f2a840cddb77d23fd2b2f24" translate="yes" xml:space="preserve">
          <source>acquisition of the same mutex by another thread, which makes it possible to use mutex locks to guard against data races).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb6b986c5d6fb26dd9dd1054b545ce022371b0c" translate="yes" xml:space="preserve">
          <source>active</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753dd87e8ccc64b87d0bbcfaa4d22967e3fe4b37" translate="yes" xml:space="preserve">
          <source>adaptor-compatible binary function base class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72447ffa88b09df99068afb67c29d3a54cb5fadf" translate="yes" xml:space="preserve">
          <source>adaptor-compatible unary function base class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d271afa26b810f304986f7a3e42710dedd5b5b" translate="yes" xml:space="preserve">
          <source>adaptor-compatible wrapper for a pointer to binary function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef0bdc337d7db60af26ef685049203e69bffbeb" translate="yes" xml:space="preserve">
          <source>adaptor-compatible wrapper for a pointer to unary function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b45e3e66241b53da4d372bf38ebef61cf4fa88c" translate="yes" xml:space="preserve">
          <source>adapts a container to provide priority queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44b1f587e06014ffd1b396959d7e5924f35d62a" translate="yes" xml:space="preserve">
          <source>adapts a container to provide queue (FIFO data structure)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c2542b48319c34907ef62c76a9dba9a9d67eb8" translate="yes" xml:space="preserve">
          <source>adapts a container to provide stack (LIFO data structure)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769883e6d1100ebda5d28fd6042a37be3876b9d1" translate="yes" xml:space="preserve">
          <source>adapts an iterator type and its sentinel into a common iterator type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f210596b4591c28cf506b0bc0f3ee050ecaceda5" translate="yes" xml:space="preserve">
          <source>add_cvadd_constadd_volatile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fd8a962f37dd070cb8e7ef291455be3fbb7839" translate="yes" xml:space="preserve">
          <source>add_lvalue_referenceadd_rvalue_reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10db3e5e79ca19d9a95535feab621d6dc4439dc" translate="yes" xml:space="preserve">
          <source>add_pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5068a6027c02c7ea48d5a113f86725adb944ad0" translate="yes" xml:space="preserve">
          <source>added deduction guide to compensate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3b71db02e3e60dba8f024dd42576f9999bc4df" translate="yes" xml:space="preserve">
          <source>added specializations for the (optional)&lt;a href=&quot;../types/integer&quot;&gt;fixed width integer types&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfb5004dd2067d94f66ff490b9093a36cb5ddb1" translate="yes" xml:space="preserve">
          <source>added when outputting the value zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3805175370d19c334b59f45b87343b9f2b7f5e1" translate="yes" xml:space="preserve">
          <source>addition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea3777754d6be1f3458ef90dda1cf54a1ddb440" translate="yes" xml:space="preserve">
          <source>addition assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c662180230cad14787d4ab7e77aa08681ce783fa" translate="yes" xml:space="preserve">
          <source>address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b315dc02e14c809919f68f522b349b9c44f2925" translate="yes" xml:space="preserve">
          <source>address of a non-&lt;a href=&quot;consteval&quot;&gt;immediate&lt;/a&gt;(since C++20) function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb34dc0bc6ab99b271ca355327b72d566de03a71" translate="yes" xml:space="preserve">
          <source>address of a static data member of class template wasn't listed as value-dependent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747910511a469f592f853abcf9bbe779225bb93a" translate="yes" xml:space="preserve">
          <source>address of an integer to store the number of characters processed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1043904678dc10589deecfc3da04acb5a909ace" translate="yes" xml:space="preserve">
          <source>address of an object with static storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef9e5f21c4b2a452958acd3ccc12cf3b8916f74" translate="yes" xml:space="preserve">
          <source>address past the end of an object with static storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b809a213f1ad9d43201369bb2544ce80339a7b6e" translate="yes" xml:space="preserve">
          <source>address-of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f2dae54e0ddb0fc4b0c849314643b8388e724f" translate="yes" xml:space="preserve">
          <source>address-of expression where the argument is &lt;a href=&quot;name&quot;&gt;qualified-id&lt;/a&gt; that names a dependent member of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe672bfb7df9114e5a5d7a66255465d2c48ff65" translate="yes" xml:space="preserve">
          <source>address-of expression where the argument is any expression which, evaluated as a core &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt;, refers to a &lt;a href=&quot;templates#Templated_entity&quot;&gt;templated entity&lt;/a&gt; that is an object with static or thread storage duration or a member function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61f395dd6c8d7db141019a92a343c477926fdb6" translate="yes" xml:space="preserve">
          <source>addressof</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bc29a86b300c5d53c7c38e96bed8c9018766ee" translate="yes" xml:space="preserve">
          <source>adds &lt;code&gt;const&lt;/code&gt; or/and &lt;code&gt;volatile&lt;/code&gt; specifiers to the given type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b238ca924247f57ca82beb00323fe6d99be66d06" translate="yes" xml:space="preserve">
          <source>adds a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03818ca3df5100fffe7e66cc0c01eee5dcda218f" translate="yes" xml:space="preserve">
          <source>adds a &lt;a href=&quot;constraints&quot;&gt;constraint&lt;/a&gt; to operator() of the closure type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928dd687718dec5749821a6a94b19c15fead030b" translate="yes" xml:space="preserve">
          <source>adds a non-atomic value to an atomic object and obtains the previous value of the atomic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8b0284257b6a715c5318a6287d71aa39129b46" translate="yes" xml:space="preserve">
          <source>adds a pointer to the given type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80dd4d2cd0bcee4ee8526b1165ffa3c1c6a39d3" translate="yes" xml:space="preserve">
          <source>adds an element to a max heap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7096c9072e1ca6c63ca31328a3157cbeff6767" translate="yes" xml:space="preserve">
          <source>adds an element to the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff998f914138c2792fec23c9de0b27f0108cea2d" translate="yes" xml:space="preserve">
          <source>adds or removes const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8dd459f1819e2baac7e08339e8c7455a092a7f" translate="yes" xml:space="preserve">
          <source>adds or subtracts a &lt;code&gt;year_month_day&lt;/code&gt; and some number of years or months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f40085ed3b0d6a4d5dab5973feef24b014f6418" translate="yes" xml:space="preserve">
          <source>adds or subtracts a &lt;code&gt;year_month_day_last&lt;/code&gt; and some number of years or months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9e35fec334df66c0459ad64f74f0df4ccb8fad" translate="yes" xml:space="preserve">
          <source>adds or subtracts a &lt;code&gt;year_month_weekday&lt;/code&gt; and some number of years or months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b6bfdf71e28fce1e5820ba5944eb30487a9ae7" translate="yes" xml:space="preserve">
          <source>adds or subtracts a &lt;code&gt;year_month_weekday_last&lt;/code&gt; and some number of years or months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46744eba2f263ac50d0bb53146c85c29e5ef862e" translate="yes" xml:space="preserve">
          <source>adds or subtracts a number of days</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e94466f0d6c6b1d04bc7dcf164dd75dcc82fb94" translate="yes" xml:space="preserve">
          <source>adds or subtracts a number of days and a &lt;code&gt;day&lt;/code&gt;, or find the difference between two &lt;code&gt;day&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a8e881003bae15154cade1d3de8544ef289da5" translate="yes" xml:space="preserve">
          <source>adds or subtracts a number of months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8f8fdcc2133aaaedb971370c1037715af72054" translate="yes" xml:space="preserve">
          <source>adds or subtracts a number of years from a &lt;code&gt;year&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab8df456b68ba122fa332dc22e2d6dd371deebf" translate="yes" xml:space="preserve">
          <source>adds two &lt;code&gt;ratio&lt;/code&gt; objects at compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7c8b874f8476bf23fb5746e3ad7ddf342699a8" translate="yes" xml:space="preserve">
          <source>adds, subtracts, or performs bitwise AND, OR, XOR with the atomic value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b96d09fd002a16c88879f25e2a6d46b1776ec5e" translate="yes" xml:space="preserve">
          <source>adjacent_difference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc99e08c4036b497f248dd8c29d272802f1c8c2" translate="yes" xml:space="preserve">
          <source>adjacent_find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6901746c7f6191f9249123a2d36164bf27e0d8fa" translate="yes" xml:space="preserve">
          <source>admits all six relational operators (==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11be2e9fb9ae9dbef66cae3f5e0c99972a0e29ba" translate="yes" xml:space="preserve">
          <source>admits incomparable values: a &amp;lt; b, a == b, and a &amp;gt; b may all be false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b205294e7822e95a5076fbcfdb12ca2ecc357e" translate="yes" xml:space="preserve">
          <source>admits only equality and inequality comparisons (no less-than/greater-than)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef7c4c1946020fe892f9a105408da1f3c1932f2" translate="yes" xml:space="preserve">
          <source>advance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a9574b1b52d4bdf2f22c00b41676b3a37eb2ba" translate="yes" xml:space="preserve">
          <source>advances an iterator by given distance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32894453397b1ec438842aab66d61f0014f55735" translate="yes" xml:space="preserve">
          <source>advances an iterator by given distance or to a given bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b11aa1a0b7aed524d2d6b5953269d3487fe4006" translate="yes" xml:space="preserve">
          <source>advances or decrements the iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26991be4a6a6a7e3cdb3f24da3c127d7daf2c573" translate="yes" xml:space="preserve">
          <source>advances the adaptor's state by a specified amount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e38309f5798f45f0928e7adc091f016f56f5367" translate="yes" xml:space="preserve">
          <source>advances the engine's state and returns the generated value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087bd78f7232fdb4595a6ddb197dbef2480dccfe" translate="yes" xml:space="preserve">
          <source>advances the engine's state by a specified amount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512f99862e0b3cef5daf3f659857c58234696d03" translate="yes" xml:space="preserve">
          <source>advances the input sequence as if by calling &lt;code&gt;&lt;a href=&quot;basic_streambuf/sbumpc&quot;&gt;sbumpc()&lt;/a&gt;&lt;/code&gt; and discarding the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb689b3e4c92225b392a0c437f2426ea88d7073d" translate="yes" xml:space="preserve">
          <source>advances the input sequence, then reads one character without advancing again</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e13f0cdc4bff252b3fc12b0073b17cb1b26df62" translate="yes" xml:space="preserve">
          <source>advances the iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ac3976cc204081f7fc170c2c508a90375e9644" translate="yes" xml:space="preserve">
          <source>advances the iterator to the next match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e67a355e08e5b859135a061941cc3f77f483383" translate="yes" xml:space="preserve">
          <source>advances the iterator to the next submatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afa71bd5aae54366f0176f23fdcf9c35f840990" translate="yes" xml:space="preserve">
          <source>advances the next pointer in the input sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58a866e45db788dbb423a6437f920e7370928c3" translate="yes" xml:space="preserve">
          <source>advances the next pointer of the output sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d9641a1bbcdddee4fcac615f587a53006d2ba5" translate="yes" xml:space="preserve">
          <source>advances the state of the underlying engine and returns the generated value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3972074b9d38dd740738bd690ccb38704bb4545c" translate="yes" xml:space="preserve">
          <source>advances to the next entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427cdea0690695ffb9ba09fd84e9a45170427076" translate="yes" xml:space="preserve">
          <source>affect the input sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14e0f397eb39ecfdfefc2379c5edce32cb8b646" translate="yes" xml:space="preserve">
          <source>affect the output sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e48dd1f81b90b5ef9d19a8697cec332f063485c" translate="yes" xml:space="preserve">
          <source>after an equals sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ea1c7bbe06cd6f5183f0d4cfdc7686d9a02264" translate="yes" xml:space="preserve">
          <source>after the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator applied to an expression of the type of pointer to its class or pointers to a class derived from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b19efdbd915cbe7a7f2ecb49542a5a39a4f51e4" translate="yes" xml:space="preserve">
          <source>after the &lt;code&gt;.&lt;/code&gt; operator applied to an expression of the type of its class or a class derived from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5839243b5a43130a5ea4dc26ee8372c6ea9df901" translate="yes" xml:space="preserve">
          <source>after the &lt;code&gt;::&lt;/code&gt; operator applied to the name of its class or the name of a class derived from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7f0dbfa03eb36f4c89d8bab9714325281a5a5a" translate="yes" xml:space="preserve">
          <source>after the application of the &lt;a href=&quot;implicit_cast#Lvalue_to_rvalue_conversion&quot;&gt;lvalue-to-rvalue&lt;/a&gt;, &lt;a href=&quot;implicit_cast#Array_to_pointer_conversion&quot;&gt;array-to-pointer&lt;/a&gt; and &lt;a href=&quot;implicit_cast#Function_to_pointer&quot;&gt;function-to-pointer&lt;/a&gt; standard conversions. The comparison is deprecated if both operands have array type prior to the application of these conversions.(since C++20).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e646cfd5197867599b5bfdc248a50dc7f2c6029b" translate="yes" xml:space="preserve">
          <source>after the call on success, or &lt;code&gt;Traits::eof()&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b27f05c4ff0d5f0c6004e98dcf902967b09268" translate="yes" xml:space="preserve">
          <source>after the call too. For (4), &lt;code&gt;other&lt;/code&gt; is in a valid but unspecified state after the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d932429ad84f98779e593f1c81b4a4882e8446" translate="yes" xml:space="preserve">
          <source>after the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed31c5224bc4c94df956ddd1235d777c56ab800" translate="yes" xml:space="preserve">
          <source>after the call. This constructor does not participate in overload resolution unless f is &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable&lt;/a&gt; for argument types &lt;code&gt;Args...&lt;/code&gt; and return type &lt;code&gt;R&lt;/code&gt;.(since C++14)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fb7da36b3f7b1ae724970a76f93b7f00de0969" translate="yes" xml:space="preserve">
          <source>again if the allocation fails again. To end the loop,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97cc48483b2e9ab91fb4dfda48842061307336c" translate="yes" xml:space="preserve">
          <source>aggregate initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce8df7233e7763053efdfc8b30a51bb12732ac6" translate="yes" xml:space="preserve">
          <source>aggregate type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb81bb695dc05e2098698bb66a355f5399be395" translate="yes" xml:space="preserve">
          <source>aggregates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8efddf9234b5a08fb372a8c355e6d0da3f8237e" translate="yes" xml:space="preserve">
          <source>aggregates a duration, a time point, and a function to get the current time point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9ee2b336682012cb445da6f3a0a52c68caf471" translate="yes" xml:space="preserve">
          <source>al</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a53b0819e7b65cebdd2f94ad43011ac678d3fc3" translate="yes" xml:space="preserve">
          <source>algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a3e0aa372bf4b401d0e7a602d9babe0b0d2499" translate="yes" xml:space="preserve">
          <source>alias_name must be a name not previously used. alias_name is valid for the duration of the scope in which it is introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d315d167d647121565fbea4852b58f8b3dc6d6" translate="yes" xml:space="preserve">
          <source>aliasing constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae21c64a87f6bb0b8e16e55c48be4cc638d7bd3f" translate="yes" xml:space="preserve">
          <source>align</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fd65ac811685fa0c12ff97f47c846cb3b3719d" translate="yes" xml:space="preserve">
          <source>align_val_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062f903e7a5b5fa5dd018873a2aa70adfb2020bd" translate="yes" xml:space="preserve">
          <source>alignas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fd59c3ec9ad34bd953e5f11ac1c941456814c1" translate="yes" xml:space="preserve">
          <source>alignas specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdc609c186c4733a2acbfc607c3318867c326ab" translate="yes" xml:space="preserve">
          <source>alignas specifier (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d80ec85b39f8b9faf623f44b5b53e8f41051306" translate="yes" xml:space="preserve">
          <source>aligned_alloc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3a9b579cec2bdb9322f5605f74a3d98056ed51" translate="yes" xml:space="preserve">
          <source>aligned_storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f74c445d08f09040cb65c50b58af8f07aa8e20" translate="yes" xml:space="preserve">
          <source>aligned_union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dfeae5db3ff37e5e9f1f43350a95604f04689b" translate="yes" xml:space="preserve">
          <source>alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c97894bec5624fddec14d478e62cceb596b4ac" translate="yes" xml:space="preserve">
          <source>alignment of the object or array element that was allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5e5f751184b7bff89789dac0da42a54bbc4cb6" translate="yes" xml:space="preserve">
          <source>alignment requirement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e9f9e998ccc9a76d9e5fad02d091ad27213609" translate="yes" xml:space="preserve">
          <source>alignment requirement (can be determined with &lt;a href=&quot;alignof&quot;&gt;alignof&lt;/a&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f8cbc1cdcb2845ca1812c9627f4ec0336bd0e4" translate="yes" xml:space="preserve">
          <source>alignment to use. The behavior is undefined if this is not a valid alignment value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f946d5f03de6bcc544296f461581864284613ab" translate="yes" xml:space="preserve">
          <source>alignment_of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6618af8ce931111a95a28db4c0927c80f0031c05" translate="yes" xml:space="preserve">
          <source>alignment_value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1a5c1c7487cd993b4929316313ab9c483a04a2" translate="yes" xml:space="preserve">
          <source>alignments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867318e23a3e63655204aafd2975563685ee0462" translate="yes" xml:space="preserve">
          <source>alignof</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd364569569c4e5e9276d4d34bfb0fcdd849599b" translate="yes" xml:space="preserve">
          <source>alignof operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3cd5554ff7dcd354a29739b3112d6db786e43d" translate="yes" xml:space="preserve">
          <source>alignof operator (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c8254583df5906df07f2568c7f8d1b13a1e7b7" translate="yes" xml:space="preserve">
          <source>aligns a pointer in a buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e67993ae4c393a178997385da8d1e3b47df7f9" translate="yes" xml:space="preserve">
          <source>all &lt;a href=&quot;converting_constructor&quot;&gt;converting constructors&lt;/a&gt; of &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d863447d51813268aa2d5d7e4f422c9c24a3518" translate="yes" xml:space="preserve">
          <source>all characters from the temporary storage were successfully sent into the wrapped stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ca98d9138b7d54be7788dff1be4f90f113b969" translate="yes" xml:space="preserve">
          <source>all evaluations in B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24212f16ea9a29476d3a21d5305c8817444d5024" translate="yes" xml:space="preserve">
          <source>all expressions used in a template parameter declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e255b3b724efee3ff0d70b1bf9f8f3fb6223e8" translate="yes" xml:space="preserve">
          <source>all expressions used in the &lt;a href=&quot;explicit&quot;&gt;explicit specifier&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8b8b85aafe58095d2be5369429b85db0fcf2e0" translate="yes" xml:space="preserve">
          <source>all expressions used in the function type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea48c4767b3a597344b0121caa2b0cef82fdb4bc" translate="yes" xml:space="preserve">
          <source>all member declarations must be in the same class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d2de1fe7482f81dfe786a0ca809b50f409d946" translate="yes" xml:space="preserve">
          <source>all necessary characters were written. &lt;code&gt;state&lt;/code&gt; now represents initial shift state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3901bef67eedb38614a5e32484e45e30423b9d8b" translate="yes" xml:space="preserve">
          <source>all non-static data members and base classes are of non-volatile literal types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40aa30cb2d1798c0dac5498329a86ce6d8f0ebe4" translate="yes" xml:space="preserve">
          <source>all of &lt;code&gt;T&lt;/code&gt;'s base class subobjects and non-static data members have strong structural equality, recursively, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb708b79dfd7d3f13e68022e4110062dda87cf2" translate="yes" xml:space="preserve">
          <source>all operations and constants evaluate in the range and precision of &lt;code&gt;double&lt;/code&gt;. Additionally, both &lt;code&gt;float_t&lt;/code&gt; and &lt;code&gt;double_t&lt;/code&gt; are equivalent to &lt;code&gt;double&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3353ab95ebb14131e875c614b1df72dfe1c566c" translate="yes" xml:space="preserve">
          <source>all operations and constants evaluate in the range and precision of &lt;code&gt;long double&lt;/code&gt;. Additionally, both &lt;code&gt;float_t&lt;/code&gt; and &lt;code&gt;double_t&lt;/code&gt; are equivalent to &lt;code&gt;long double&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977083d5e09600da9c4eccd257809269b4c94c59" translate="yes" xml:space="preserve">
          <source>all operations and constants evaluate in the range and precision of the type used. Additionally, &lt;code&gt;float_t&lt;/code&gt; and &lt;code&gt;double_t&lt;/code&gt; are equivalent to &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c93f9c5c93d8529858e42db5a92eafeeb94b62a" translate="yes" xml:space="preserve">
          <source>all other random number distributions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc8fc06ebb459060cec43180cbc2fe0bb2682df" translate="yes" xml:space="preserve">
          <source>all specializations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc37a9798c99802d5e16c87bf1d51cb01e4c61d" translate="yes" xml:space="preserve">
          <source>all types used in the function type (which includes return type and the types of all parameters)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e3f1fa0142e35c3d68f5759209902c948890a7" translate="yes" xml:space="preserve">
          <source>all types used in the template parameter declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9965fec9771df1424c76170f0eaf55cab25ac5ba" translate="yes" xml:space="preserve">
          <source>all_ofany_ofnone_of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a5b40d3210faca14f0fc86c593bc951575bfda" translate="yes" xml:space="preserve">
          <source>all_viewview::all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad018dcd5f39366b56e8476ab5aa4827e1960fb" translate="yes" xml:space="preserve">
          <source>allanynone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acaab3b723a4d70b19f7b4e34895a97f703f7ab8" translate="yes" xml:space="preserve">
          <source>alloc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a81a830c9c574c6b04f98079cd737902e095291" translate="yes" xml:space="preserve">
          <source>allocate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f339ebc0a9ea5041c9eb2fcc9063237294d1c29" translate="yes" xml:space="preserve">
          <source>allocate_bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe0fbf2dac901753b121e9a7cae6d30e015431c" translate="yes" xml:space="preserve">
          <source>allocate_object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34947d278edd17446af44c865f2206c59ffd2250" translate="yes" xml:space="preserve">
          <source>allocate_sharedallocate_shared_default_init</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3e8f3c8913ee0556612ac56f1100bdc54d4b6b" translate="yes" xml:space="preserve">
          <source>allocates aligned memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8454d15e4c9c8e6f3a57a97cf499f9a12a5b9c45" translate="yes" xml:space="preserve">
          <source>allocates and zeroes memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a8fad17819140ae5245db5e27c1653353c978b" translate="yes" xml:space="preserve">
          <source>allocates memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b1c58ea599100474ff90e9e1e358661bc50a86" translate="yes" xml:space="preserve">
          <source>allocates storage suitable for &lt;code&gt;n&lt;/code&gt; objects of type &lt;code&gt;T&lt;/code&gt;, but does not construct them. May throw exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388ed931f6f8d8adc5a57ad8ac534799fac6b48d" translate="yes" xml:space="preserve">
          <source>allocates the coroutine state object using &lt;code&gt;&lt;a href=&quot;../memory/new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt; (see below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960f505351846cc4c241fb18008ec9aa02e244ca" translate="yes" xml:space="preserve">
          <source>allocates uninitialized storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62aefc4b7140426f689704833e340aa74fe40095" translate="yes" xml:space="preserve">
          <source>allocates uninitialized storage using the allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381072ecb040a7074dcc90563fc6ebbd79acf891" translate="yes" xml:space="preserve">
          <source>allocates uninitialized storage using the outer allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853e6cc39dbe15cd3b444a9fecc8fee07d0d1243" translate="yes" xml:space="preserve">
          <source>allocation function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5e3e903e667bc41e0495bd041f88d12c1940a9" translate="yes" xml:space="preserve">
          <source>allocation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a0f47da7c87075003063e44e1776f95fd95404" translate="yes" xml:space="preserve">
          <source>allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a412cacef0f375483408fe9340b6baffd12cbda" translate="yes" xml:space="preserve">
          <source>allocator completeness requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98200656f043b106b3bedd32014857ff7e17e076" translate="yes" xml:space="preserve">
          <source>allocator to construct the string with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07da36ee300180e70a4f2e8639cb3cf580c4331" translate="yes" xml:space="preserve">
          <source>allocator to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a533c446ee651ec42a7e679c32a38a1516a169" translate="yes" xml:space="preserve">
          <source>allocator to use for all memory allocations of the underlying container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1cd99d8efa85ec2449c1e148084e590a2041ef" translate="yes" xml:space="preserve">
          <source>allocator to use for all memory allocations of this container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2ff0c8c8429e1eb51a9b995b423903f2192d1c" translate="yes" xml:space="preserve">
          <source>allocator to use for all memory allocations of this string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e534626a78c7ede33b95313b93b75e308502a6a" translate="yes" xml:space="preserve">
          <source>allocator to use for construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95cf09265f86f3c992ecda655cda96b9819cb22" translate="yes" xml:space="preserve">
          <source>allocator to use for destruction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83ae542c4312db23a95814bb22fb08aa5e9ece0" translate="yes" xml:space="preserve">
          <source>allocator to use for internal allocations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579db56ecc261be6ec34fd6efb59767f43cefe63" translate="yes" xml:space="preserve">
          <source>allocator to use in uses-allocator construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c7d6068af2a5f828fafe3e74648b7eddfefdf4" translate="yes" xml:space="preserve">
          <source>allocator to use to allocate memory for the internal data structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c95bbd2601c16682e7c9e1bf353e0329c03d0d" translate="yes" xml:space="preserve">
          <source>allocator to use to allocate the shared state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a751615d31e244b9a6529e76765b0e6753e6c2" translate="yes" xml:space="preserve">
          <source>allocator used by a standard container passed as an argument to a container copy constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a000f7546c3a8c77f9aaa7e3289e55e46d48e7dd" translate="yes" xml:space="preserve">
          <source>allocator-aware constructors provided but &lt;code&gt;variant&lt;/code&gt; can't properly support allocators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea28d2b6b29df51de3d4c0b887d296d777df04ac" translate="yes" xml:space="preserve">
          <source>allocator_arg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160e20d66c80fa3dbd6e0d198e00591799eb2d5f" translate="yes" xml:space="preserve">
          <source>allocator_arg_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb73fcbd01eafbc8cfe0ef39ae4cbd832f438893" translate="yes" xml:space="preserve">
          <source>allocator_traits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3de44d531c00ca3e0383de27927f390a0f419ac" translate="yes" xml:space="preserve">
          <source>allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1930a955f5febc472e55c23c910374e742614c44" translate="yes" xml:space="preserve">
          <source>allowed comparison of everything convertible to &lt;code&gt;path&lt;/code&gt; in the presence of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf8c714749730ae413354eab9159c02ad8c19fb" translate="yes" xml:space="preserve">
          <source>allowed concatenating everything convertible to &lt;code&gt;path&lt;/code&gt; in the presence of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a57d56c76bc9bf01f06298a86b4331286882a11" translate="yes" xml:space="preserve">
          <source>allowed if the object was created within the constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a534594aca62a8753dc1d3e871b665eddf358a3d" translate="yes" xml:space="preserve">
          <source>allowed in constant initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80e72369a5cf1caba9791e592ec23ad71dfc523" translate="yes" xml:space="preserve">
          <source>allowed insertion of everything convertible to &lt;code&gt;path&lt;/code&gt; in the presence of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e5f036389ae2c44e5d9e01c3103a33d72e3c91" translate="yes" xml:space="preserve">
          <source>allows an object to create a &lt;code&gt;shared_ptr&lt;/code&gt; referring to itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a45473c00df4237856ba187a25e5a589d47975b" translate="yes" xml:space="preserve">
          <source>allows the use of &lt;a href=&quot;language/list_initialization&quot;&gt; initializer list syntax&lt;/a&gt; to initialize non-aggregate types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2681b9c80ecd5edeed8711a3a98148e0ff1a5d7a" translate="yes" xml:space="preserve">
          <source>alnum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be76331b95dfc399cd776d2fc68021e0db03cc4f" translate="yes" xml:space="preserve">
          <source>alpha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c645492c58ad3fe8338329bbd9ad42a0ae78456" translate="yes" xml:space="preserve">
          <source>alphabeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fc2642d89ce1e097c263a684eb5a024daeebb1" translate="yes" xml:space="preserve">
          <source>already exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb72320fe359ad5b2450500dcac9745c2ae684ac" translate="yes" xml:space="preserve">
          <source>alsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42156a4ea4707d2615ad3d22dce6d3b401f90365" translate="yes" xml:space="preserve">
          <source>alternate character for set bits in &lt;code&gt;str&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1db599f34a84a3e8289aed57a3e35a28bf35bb6" translate="yes" xml:space="preserve">
          <source>alternate character for unset bits in &lt;code&gt;str&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784997019ac9b66e468705ff5ea6b263957cb258" translate="yes" xml:space="preserve">
          <source>alternative directory separator which may be used in addition to the portable &lt;code&gt;/&lt;/code&gt;. On Windows, this is the backslash character &lt;code&gt;\&lt;/code&gt;. On POSIX, this is the same forward slash &lt;code&gt;/&lt;/code&gt; as the portable separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66468d63e91e596a97d876019fbaff6d95089c8" translate="yes" xml:space="preserve">
          <source>alternative form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8af47c361b758726325c4a5d8f6d520db8f84f6" translate="yes" xml:space="preserve">
          <source>alternative implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3889426121edfa53717bdb3ef97045d05ffc26" translate="yes" xml:space="preserve">
          <source>alternative representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b412bfb356ff7ad99dc970b4a1dd36dc81c9bd1" translate="yes" xml:space="preserve">
          <source>alternative value that can be compared to &lt;code&gt;Key&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc6d93df9e49ef79fee8dcc90a71979500caed4" translate="yes" xml:space="preserve">
          <source>alternative value to compare to the keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42c985d41c532bc31d8e8ab3753f9d795fdfd28" translate="yes" xml:space="preserve">
          <source>always linear for &lt;code&gt;&lt;a href=&quot;../container/forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1e28aa027a2ad7928d73713303f1ccb3925e73" translate="yes" xml:space="preserve">
          <source>always resulting in rvalue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca14898e5a72c55a06d9d9c0a8d1acf5f22e2ac" translate="yes" xml:space="preserve">
          <source>always use the resource via an instance of a RAII-class that either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a363165d9cc670f00d7b6a7ff956fa1bce638e" translate="yes" xml:space="preserve">
          <source>always_noconv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10573f1c3020ceba5e54a6f8de1d4330250b3e1b" translate="yes" xml:space="preserve">
          <source>ambiguous_local_time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de73eac0c305038f0437bc6a1f994a5a4379ed28" translate="yes" xml:space="preserve">
          <source>an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae3337def9d40cd9eea75193a8155899d5d8654" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;../../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt; used for internal memory allocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fd5cc6a61a6533d7e3e27403a6ff028e15af83" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;../language/aggregate_initialization&quot;&gt;aggregate type&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8189976f2c55717a796da34a2124394731b9212" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;../language/integer_literal&quot;&gt;integer literal&lt;/a&gt; with value zero, or a prvalue of type &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472bf9c9bac152a6297e8a8f7626b5eb6ce21bba" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;asm&quot;&gt;asm declaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387d8b6cadefbee6fda24c3db43ee1e8b5428d41" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;constant_expression&quot;&gt;integral constant expression&lt;/a&gt;(until C++14)a &lt;a href=&quot;constant_expression&quot;&gt;converted constant expression&lt;/a&gt; of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;(since C++14), which evaluates to a value greater than zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f1748d426ba425e26e27fefc4ffc9ddfdf8db8" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;constant_expression#Integral_constant_expression&quot;&gt;integral constant expression&lt;/a&gt; with a value greater or equal to zero. When greater than zero, this is the number of bits that this bit field will occupy. The value zero is only allowed for nameless bitfields and has special meaning: it specifies that the next bit field in the class definition will begin at an allocation unit's boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf38a2884ba37de5a4c964f6706ab4ec3a36b9e" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;enum&quot;&gt;&lt;i&gt;unscoped enumeration&lt;/i&gt;&lt;/a&gt; type whose underlying type is not fixed can be converted to the first type from the following list able to hold their entire value range: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;unsigned long&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;, or &lt;code&gt;unsigned long long&lt;/code&gt;, extended integer types (in size order, signed given preference over unsigned)(since C++11). If the value range is greater, no integral promotions apply;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ffce5b1047515e5e5ca1b2aa9c8ead0a367645" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;enum&quot;&gt;enumeration type&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0a7d8226a587f0c124179c0169a46f5b931e9a" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;enum&quot;&gt;enumerator&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6cea5831256e2757b62728328a0379c4196bba" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2844d97c9df8ada1db0a3a7efb73d4114ea3377" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; which is &lt;a href=&quot;implicit_cast&quot;&gt;contextually convertible&lt;/a&gt; to bool. This expression is evaluated before each iteration, and if it yields &lt;code&gt;false&lt;/code&gt;, the loop is exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3969f17af73f0951765f95b57f4ddd6c5ecd0f9" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;implicit_cast&quot;&gt;implicit&lt;/a&gt; or &lt;a href=&quot;explicit_cast&quot;&gt;explicit&lt;/a&gt; conversion to type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77dbfd4ae32b7e689311b1e1982ab244feb4889f" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;name&quot;&gt;id-expression&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3567190b8a18795a4d5e5dd5c43622daf4c7b1ae" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;name&quot;&gt;id-expression&lt;/a&gt; that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448649b1df5dacbbd62ef71ca067be479a0262c5" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;named_req/iterator&quot;&gt;LegacyIterator&lt;/a&gt; that dereferences to a &lt;a href=&quot;named_req/swappable&quot;&gt;Swappable&lt;/a&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a323d3ade2b9d3b66dadee85b38092c6f9493b" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;operators&quot;&gt;overloaded operator&lt;/a&gt; name in function notation, such as &lt;code&gt;operator+&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../memory/new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd7facc21ee3bc278b044f98883a9d3ba728f34" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;statements&quot;&gt;expression statement&lt;/a&gt; (which may be a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fb35e19da7966f93398cf8a56ce6e855628598" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;statements#Expression_statements&quot;&gt;expression statement&lt;/a&gt; (which may be a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5772f8a0339600be3b87515fbc016630d60402" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;type-id&quot;&gt;integral type&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd975df2da4915a72046d4619f5ed96c2eab99c" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;enable_shared_from_this&lt;/code&gt; to assign to &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c117c3d548063809a4b05929c2c93e007eb1a53" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;enable_shared_from_this&lt;/code&gt; to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796b3962146edf5b9f697d67083212cfbae5f935" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;initializer_list&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6eaa75d8b909313367fb6304e746ea8854fb8ea" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;optional&lt;/code&gt; object to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96cd64b2f9080a0352b72b34481601195c41c99" translate="yes" xml:space="preserve">
          <source>an abstract interface for classes that encapsulate memory resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55535fada1d4cfe5fdce86ea5edd482252c36fa" translate="yes" xml:space="preserve">
          <source>an additional implementation-defined constant for each additional file type supported by the implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6100d7d2cff24d086bc8507dea8853fe0914d208" translate="yes" xml:space="preserve">
          <source>an alias to &lt;code&gt;const_iterator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebff0e74f2fb04e575fcfe4352b41391f7eb199" translate="yes" xml:space="preserve">
          <source>an alias to a family of types (&lt;a href=&quot;type_alias&quot;&gt;alias template&lt;/a&gt;) (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6880d9749d85612a5bd0693561bdaa6c18ac4341" translate="yes" xml:space="preserve">
          <source>an allocator that supports run-time polymorphism based on the &lt;code&gt;std::memory_resource&lt;/code&gt; it is constructed with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ad518277c412687860d0d6e97e60d70b6524a1" translate="yes" xml:space="preserve">
          <source>an allocator to use for allocations of data for internal use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000004f7569980998afd7b29e1f1ddbe843e95d5" translate="yes" xml:space="preserve">
          <source>an allocator type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2f07f9944a688ea3ef0ffc58ca8de0a7c3328" translate="yes" xml:space="preserve">
          <source>an array of arbitrary type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90d2ddfbef6ade356002793175a517ba3c6ad16" translate="yes" xml:space="preserve">
          <source>an array of literal type;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2eb9f6eaaa71974cfbed65bb05164bd10dfe50" translate="yes" xml:space="preserve">
          <source>an array of such type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ca138c107d595ddd836abb90adec281f82d7b6" translate="yes" xml:space="preserve">
          <source>an array of type &lt;code&gt;value_type[2]&lt;/code&gt;, with the first element holding the real component and the second element holding the imaginary component (e.g. Microsoft Visual Studio)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8199f201fecef5db4fa3bad9567c9ab13e60c24" translate="yes" xml:space="preserve">
          <source>an array that defines the number of elements in each dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca7081eae4413c88cd25f50f30dc39364b94277" translate="yes" xml:space="preserve">
          <source>an array that defines the number of positions between successive elements in each dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16074be546a94d9a77426f0371b70fdffdb072fb" translate="yes" xml:space="preserve">
          <source>an array type whose element type is dependent or whose bound (if any) is value-dependent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea73f7c684b0ecce2864c001d26913c099109ff" translate="yes" xml:space="preserve">
          <source>an atomic constraint &lt;code&gt;A&lt;/code&gt; subsumes an atomic constraint &lt;code&gt;B&lt;/code&gt; if and only if they are identical using the rules described &lt;a href=&quot;constraints#Atomic_constraints&quot;&gt;above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a62929c7399057555508b395851b71177ec32e6" translate="yes" xml:space="preserve">
          <source>an empty &lt;a href=&quot;../ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; with no elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b2c225b54f39edd6792ca749f1785c961a71e3" translate="yes" xml:space="preserve">
          <source>an empty &lt;a href=&quot;ranges/view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; with no elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b280ff7488d7a435dee148093f68dd226727edcf" translate="yes" xml:space="preserve">
          <source>an empty substring is found at &lt;code&gt;pos&lt;/code&gt; if and only if &lt;code&gt;pos &amp;lt;= size()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c6ea596d73805cee8577bd8d04dbfea3276146" translate="yes" xml:space="preserve">
          <source>an enumerator of an enumeration that is a templated entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe7022531cf74560375b82ee4c10e68abed4546" translate="yes" xml:space="preserve">
          <source>an equality or relational operator when the result is unspecified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c93459f573b5d9ddf06e1e2236da81eee3a2696" translate="yes" xml:space="preserve">
          <source>an exception occurs (in which case the exception is caught and not rethrown)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b787b4568e113e6c94e9246fdf94403b3361f0b7" translate="yes" xml:space="preserve">
          <source>an exception occurs (in which case the exception is caught).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8109f27c3336040c6342bdea20af9ca118f30332" translate="yes" xml:space="preserve">
          <source>an exception occurs (in which case the exception is caught, and only rethrown if &lt;code&gt;failbit&lt;/code&gt; is enabled in &lt;code&gt;exceptions()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2602e8c2fe1b1ebbd8e04698d9aa2f678a4a8f96" translate="yes" xml:space="preserve">
          <source>an exception thrown on file system errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffba1904d0d21ed7c40707da3faadbc9f089398" translate="yes" xml:space="preserve">
          <source>an existing path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae9e81cc2676bd6629b46d7cbde064091e202aa" translate="yes" xml:space="preserve">
          <source>an explicit &lt;a href=&quot;../language/destructor&quot;&gt;destructor&lt;/a&gt; call (if &lt;code&gt;It&lt;/code&gt; is a class type); or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9dc0ae4ddd65129b714940c655826dce25b11bd" translate="yes" xml:space="preserve">
          <source>an expression that contains an unexpanded &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; and does not contain an operator with &lt;a href=&quot;operator_precedence&quot;&gt;precedence&lt;/a&gt; lower than cast at the top level (formally, a cast-expression)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0d63ffe2d87a5127a3370c64a97bb90d99dfdc" translate="yes" xml:space="preserve">
          <source>an expression that does not contain an unexpanded &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; and does not contain an operator with &lt;a href=&quot;operator_precedence&quot;&gt;precedence&lt;/a&gt; lower than cast at the top level (formally, a cast-expression)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c440e74edd81459fdbf196f0181cbfa7d71eb97" translate="yes" xml:space="preserve">
          <source>an expression that does not have the comma operator at the top level (grammatically, an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bc645855c00ecaf058a4b5e28768e8ce1dffd9" translate="yes" xml:space="preserve">
          <source>an expression that would exceed the implementation-defined limits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10fb13275bf89d36aa8218b3258fe438a9838d9" translate="yes" xml:space="preserve">
          <source>an expression used in context where &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt; is required, and whose any subexpression is value-dependent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2774fd1078ff72dabc9757302abd83ee4b9c2c0" translate="yes" xml:space="preserve">
          <source>an expression whose any subexpression is a type-dependent expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee236ad91c93c867f80d03449d18fe8887cce234" translate="yes" xml:space="preserve">
          <source>an expression whose evaluation leads to any form of core language undefined behavior (including signed integer overflow, division by zero, pointer arithmetic outside array bounds, etc). Whether standard library undefined behavior is detected is unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908eec67a30117f5ec4055b0cee79003e7503ec7" translate="yes" xml:space="preserve">
          <source>an expression, &lt;a href=&quot;../implicit_cast#Contextual_conversions&quot;&gt;contextually converted to &lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;, that specifies the predicate of the contract; its top-level operator may not be an assignment or comma operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f77181d673019860afe7c62667cbe84f18bf83e" translate="yes" xml:space="preserve">
          <source>an id-expression referring to a variable or a data member of reference type, unless it was initialized with a constant expression or its lifetime began within the evaluation of this expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe90faf435d439bf153faa4d45f0309674b742d" translate="yes" xml:space="preserve">
          <source>an identifier that is taken to denote the return value of the function; any ambiguity on whether something is a contract-level or an identifier is resolved in favor of it being a contract-level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf974809dc080d549f8a1da366fbf23cafbf2f3" translate="yes" xml:space="preserve">
          <source>an identifier, introduced by a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570c566b55f586748ff7abd3dade4daa31c49947" translate="yes" xml:space="preserve">
          <source>an identifier;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc78a1605c049efc786eae21eb9d5075658aed5f" translate="yes" xml:space="preserve">
          <source>an implementation-defined type that holds a reference to &lt;code&gt;auto_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b42717110b8d0a7776f30be846ac217347f5a2c" translate="yes" xml:space="preserve">
          <source>an initializer list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47132ebe9d876dbd5b1bc1e29b0796693923fba" translate="yes" xml:space="preserve">
          <source>an initializer-list constructor can pre-empt the copy deduction candidate, resulting in wrapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81cd14e2ac6a4cb408cb77730759ebb3882ce56" translate="yes" xml:space="preserve">
          <source>an instance of the &lt;code&gt;&lt;a href=&quot;va_list&quot;&gt;va_list&lt;/a&gt;&lt;/code&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc996f3afc8c2536b70ad0a4ae981f8e0c06a7e8" translate="yes" xml:space="preserve">
          <source>an instance of the &lt;code&gt;&lt;a href=&quot;va_list&quot;&gt;va_list&lt;/a&gt;&lt;/code&gt; type to clean up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a404d8fe01cf49c25ef813241bb657ad645ad3" translate="yes" xml:space="preserve">
          <source>an instance of the &lt;code&gt;&lt;a href=&quot;va_list&quot;&gt;va_list&lt;/a&gt;&lt;/code&gt; type to initialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367e70fed9ac85c68b63a10d660891b1ad3dcb8b" translate="yes" xml:space="preserve">
          <source>an integer type that can hold all values of &lt;code&gt;char_type&lt;/code&gt; plus &lt;code&gt;EOF&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6b2bc1cb5e8360e1e7c8b281167bab53a1fab7" translate="yes" xml:space="preserve">
          <source>an integer type to use for the elements of the sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141784106a77c950820e9f61fc6bb9129457db3f" translate="yes" xml:space="preserve">
          <source>an integral &lt;a href=&quot;../language/constant_expression&quot;&gt;constant expression&lt;/a&gt;&lt;a href=&quot;../language/value_category&quot;&gt;rvalue&lt;/a&gt; of integer type that evaluates to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcb0fad38e6f47567ba4df839c0f6494308d597" translate="yes" xml:space="preserve">
          <source>an invocation of an implicitly-defined copy/move constructor or copy/move assignment operator for a union whose active member (if any) is mutable, unless the lifetime of the union object began within the evaluation of this expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09984bdaa28ebf8fbfc48647e7e78af46a28e511" translate="yes" xml:space="preserve">
          <source>an iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5905a16d2947726f16b30e3ab2c462b1bff66ce1" translate="yes" xml:space="preserve">
          <source>an iterator of type &lt;code&gt;Container::iterator&lt;/code&gt;(until C++20)&lt;code&gt;ranges::iterator_t&amp;lt;Container&amp;gt;&lt;/code&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c9f36ac5027c6f7ca1d813b6d666fd34206d40" translate="yes" xml:space="preserve">
          <source>an iterator that allows standard algorithms to store results in uninitialized memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d2887123b738cfe76a5744755a901f0ef661f6" translate="yes" xml:space="preserve">
          <source>an iterator to an element in &lt;code&gt;[first, last)&lt;/code&gt; that should appear at the beginning of the new range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cb2f2f482a8b2a4a6f8b95006a67a9f2787e77" translate="yes" xml:space="preserve">
          <source>an iterator to the contents of a directory and its subdirectories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa231b45cede68579ae40634398baa8842faf70" translate="yes" xml:space="preserve">
          <source>an iterator to the contents of the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cecf3c2ab0232b5ba4c533b7c5f59f1a0a0681b" translate="yes" xml:space="preserve">
          <source>an iterator to the element defining the upper boundary of the sorted range, i.e. &lt;code&gt;d_first + min(last - first, d_last - d_first)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d06d8eca4a9adb0faf2495926e94357ce0385c" translate="yes" xml:space="preserve">
          <source>an iterator to the first of the first pair of identical elements, that is, the first iterator &lt;code&gt;it&lt;/code&gt; such that &lt;code&gt;*it == *(it+1)&lt;/code&gt; for the first version or &lt;code&gt;p(*it, *(it + 1)) != false&lt;/code&gt; for the second version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcda13e9500f1ec3bb3524e77029827ee332f0af" translate="yes" xml:space="preserve">
          <source>an lvalue (so-called, historically, because lvalues could appear on the left-hand side of an assignment expression) is a glvalue that is not an xvalue;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76325a31880b436fe986466bfc76df8e66916324" translate="yes" xml:space="preserve">
          <source>an lvalue if new_type is an lvalue reference type (expression must be an lvalue)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40bdfb1b2c3f43725a67bdbb1978d8dec9f9d82" translate="yes" xml:space="preserve">
          <source>an lvalue if new_type is an lvalue reference type or an rvalue reference to function type;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1203310c67a1512611c179e6acbd7a5d35da1f" translate="yes" xml:space="preserve">
          <source>an lvalue of type &lt;code&gt;A&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cf9ae76fc7b4cdaa5e4df2913d4bbdd10e3725" translate="yes" xml:space="preserve">
          <source>an lvalue-to-rvalue &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt; or modification applied to a non-active member of a &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; or its subobject (even if it shares a common initial sequence with the active member)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1bbea71fa2405ed37c2029a504c50ea5f78b191" translate="yes" xml:space="preserve">
          <source>an lvalue-to-rvalue &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt;, unless the lvalue...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efd4891cef04ddd0af7eee4aa62c30bae6918ac" translate="yes" xml:space="preserve">
          <source>an object &lt;code&gt;X&lt;/code&gt; is located at the address &lt;code&gt;A&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c3287d55668d8dd4500c4946a5035eb7528a76" translate="yes" xml:space="preserve">
          <source>an object of &lt;a href=&quot;type-id&quot;&gt;scalar type&lt;/a&gt; (arithmetic type, pointer type, enumeration type, or std::nullptr_t)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5ce392cbf715bfa9f125fc92fc49758f418cb8" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;&lt;a href=&quot;../../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; representing the maximum time to spend waiting. Note that rel_time must be small enough not to overflow when added to &lt;code&gt;&lt;a href=&quot;../../chrono/steady_clock/now&quot;&gt;std::chrono::steady_clock::now()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfa60e5b8b80b2730021ccff5c75aade7dfdbb5" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;&lt;a href=&quot;../../chrono/time_point&quot;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt; representing the time when to stop waiting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964460337b5e67af53887d11d3b61b84d1e547cc" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;&lt;a href=&quot;../memory/allocator_arg_t&quot;&gt;std::allocator_arg_t&lt;/a&gt;&lt;/code&gt; used to select allocator-aware constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf307d78b6488959eb5507c1b5f30c56efdabc8e" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&amp;lt;&lt;a href=&quot;../mutex&quot;&gt;std::mutex&lt;/a&gt;&amp;gt;&lt;/code&gt;, which must be locked by the current thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e892f955bdb51176fa89e459647a8faa76c12adb" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;&lt;a href=&quot;allocator_arg_t&quot;&gt;std::allocator_arg_t&lt;/a&gt;&lt;/code&gt; used to select allocator-aware constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db4e581597381c8233027b370e2e4429d00abf5" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;&lt;a href=&quot;memory/allocator_arg_t&quot;&gt;std::allocator_arg_t&lt;/a&gt;&lt;/code&gt; used to select allocator-aware constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f6d60e72e54fb287eaf3a812e6b85e4961d79c" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;Lock&lt;/code&gt; that meets the &lt;a href=&quot;../../named_req/basiclockable&quot;&gt;BasicLockable&lt;/a&gt; requirements, which must be locked by the current thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bff55b18230cf954ec3b86e2cf53e8e03e06ba3" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;Lock&lt;/code&gt; that meets the requirements of &lt;a href=&quot;../../named_req/basiclockable&quot;&gt;BasicLockable&lt;/a&gt;, which must be locked by the current thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5322b4b168a4b961845d8f99a1fe7965eff27733" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;nothrow_t&lt;/code&gt; used to select an non-throwing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be88b45bb7942d9f2345145b1d9cdc7cc6398cc" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;nullopt_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52168f68f1b84a6d1f30c9b4cc9283daec21e8b6" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;piecewise_construct_t&lt;/code&gt; used to disambiguate functions for piecewise construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fe6e639f00cb310af002b9950878569b200c0d" translate="yes" xml:space="preserve">
          <source>an object of type &lt;code&gt;std::allocator_arg_t&lt;/code&gt; used to select allocator-aware constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6083870f2cb8c5713916770259d90871d8c98b5" translate="yes" xml:space="preserve">
          <source>an object of type std::unique_lock&amp;lt;std::mutex&amp;gt;, which must be locked by the current thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6c58c4088de257a700b2becdfac5598560bb53" translate="yes" xml:space="preserve">
          <source>an object or array to delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099a7aed74315d0767e5ec9765e5a9f890eb4597" translate="yes" xml:space="preserve">
          <source>an object that can be called with the function call syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d664d95127823d51deb88418052fb6557dc15131" translate="yes" xml:space="preserve">
          <source>an object to wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca48530abbb318a89a30ea4bff460fe254a12d31" translate="yes" xml:space="preserve">
          <source>an object with static storage duration that is a temporary, but whose value satisfies the constraints for prvalues below, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb58f20ee5edd9f60d66f3a085b84514df6d93e" translate="yes" xml:space="preserve">
          <source>an object with static storage duration that is not a temporary, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199271b9e703e70510bc9a835922d6a6ae8db776" translate="yes" xml:space="preserve">
          <source>an object, for which exactly one function gets executed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb2cffb6d355a50203b2e61898c26892cce71ff" translate="yes" xml:space="preserve">
          <source>an operation B on M (a write), then the value of A comes from a side-effect (a write) X that appears earlier than B in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b983895e95fc643db9cd995fd978a360a67adfd0" translate="yes" xml:space="preserve">
          <source>an output stream to set as the tied stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfe47363f4c72caf6e527b88eb770675c7a38e5" translate="yes" xml:space="preserve">
          <source>an overloaded operator name in function notation (&lt;code&gt;operator+&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../memory/new/operator_new&quot;&gt;operator new&lt;/a&gt;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d62d8ca3983db3dccb11f75b1a8d1afe29c8f3" translate="yes" xml:space="preserve">
          <source>an rvalue (so-called, historically, because rvalues could appear on the right-hand side of an assignment expression) is a prvalue or an xvalue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41af2b10e05290a5610b2e5806f36efe8f088c02" translate="yes" xml:space="preserve">
          <source>an uniform random bit generator object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296dce13ffd169132a847f0c33fef2ae561dbbef" translate="yes" xml:space="preserve">
          <source>an unqualified name that is found by &lt;a href=&quot;unqualified_lookup&quot;&gt;unqualified lookup&lt;/a&gt; in the current instantiation or in its non-dependent base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab749df51e1c697b72e5126a1fbb223c47c37a9" translate="yes" xml:space="preserve">
          <source>an unused parameter of any type that accepts literal zero argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea04886d20110c7170b7946407b7ad1860e9d7d" translate="yes" xml:space="preserve">
          <source>an xvalue (an &amp;ldquo;eXpiring&amp;rdquo; value) is a glvalue that denotes an object or bit-field whose resources can be reused;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1024d4ee291bcae7632505e7bc25546d7007437" translate="yes" xml:space="preserve">
          <source>an xvalue if new_type is an rvalue reference to object type;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67f4a1529ce6a7c1ac54e7534b9bf2b21ab169d" translate="yes" xml:space="preserve">
          <source>an xvalue if new_type is an rvalue reference type (expressionmay be lvalue or rvalue(until C++17)must be a glvalue (prvalues are &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;materialized&lt;/a&gt;)(since C++17) of a complete class type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fe4661485041b393bacbb3cbe2fd7fe974479a" translate="yes" xml:space="preserve">
          <source>and 0x1.3333333333334*2-2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c5cf0dec9ea72f001b2191056b176b077af457" translate="yes" xml:space="preserve">
          <source>and 0x1.999999999999a*2-4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f752657f890ddb6aed04f28650bddbf998a970f1" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;T(x) = x ^ (x &amp;gt;&amp;gt; 27)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b903e9bb549aea5dca253acd848c75d48b6ffce" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;false&lt;/code&gt; if it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dab0b86558fadf9237d03860f554f474829e9f" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;m&lt;/code&gt; is not less than &lt;code&gt;alignment&lt;/code&gt;. It sets the new buffer as the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800cea74ae2f02798003febbb1c1e218da0f277c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;n=end-begin&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969b4410c3fbf4aa187367c2d80d9297a0ea6a7e" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;q=p+t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dffc033a9020c2edfab62773798908643d9808" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;r1=1664525 * T(begin[k]^begin[k+p]^begin[k&amp;minus;1])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde845ef2d6a9c2b69caae194238a0512007889c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;r2=r1+s&lt;/code&gt; if &lt;code&gt;k==0&lt;/code&gt;, &lt;code&gt;r2=r1 + k%n + v[k-1]&lt;/code&gt; if &lt;code&gt;0&amp;lt;k&amp;lt;=s&lt;/code&gt;, &lt;code&gt;r2=r1 + k%n&lt;/code&gt; if &lt;code&gt;k&amp;gt;s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d61110b053d0bfa13eade4c9d0272b968ceb09" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;r4=r3 - k%n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df490510e7721318eff8faa4bd4d0719780b31d5" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;s=v.size()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010cf6ba8e1ac8b8e794b801591e06f9360aa199" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;t=(n &amp;gt;= 623) ? 11 : (n &amp;gt;= 68) ? 7 : (n &amp;gt;= 39) ? 5 : (n &amp;gt;= 7) ? 3 : (n - 1) / 2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84ca74b7dcbe1c7def71d643dca485ecc9df2e4" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;v&lt;/code&gt; is the private container holding the values originally provided by the constructor of this &lt;code&gt;seed_seq&lt;/code&gt; object,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f3ea1263fe354b1a1abaea9c1143c043077794" translate="yes" xml:space="preserve">
          <source>and a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efccda8eda14b1353298f8ca95648b324e69dae" translate="yes" xml:space="preserve">
          <source>and a list of zero or more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1c4070ad54a25251af9b36a5eaa444418f96ca" translate="yes" xml:space="preserve">
          <source>and asserts properties of the named expression. Substitution and semantic constraint checking proceeds in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906f835871c36a0c6135b54fb7443d6dada3ace6" translate="yes" xml:space="preserve">
          <source>and conversions from base class to derived class prvalue were not considered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f2b3a902aff4f654fa23e732bbee33f92a5bf5" translate="yes" xml:space="preserve">
          <source>and i &amp;isin; {0, ..., count&amp;minus;1}. &lt;code&gt;xmin&lt;/code&gt; and &lt;code&gt;xmax&lt;/code&gt; must be such that &amp;delta; &amp;gt; 0. If &lt;code&gt;count == 0&lt;/code&gt; the effects are the same as of the default constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89527db227a4534f1e40d00d5f908e871bec52b" translate="yes" xml:space="preserve">
          <source>and if a particular source file only uses pointers and references to the class, this makes it possible to reduce #include dependencies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1164a9e969672ff7524f8943cc57781803e1211f" translate="yes" xml:space="preserve">
          <source>and is dependent on a template parameter is not considered to be a type unless the keyword &lt;code&gt;typename&lt;/code&gt; is used or unless it was already established as a type name, e.g. with a typedef declaration or by being used to name a base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950274bf28c90117dcf84b466407f68714f22325" translate="yes" xml:space="preserve">
          <source>and is not initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35026bd7f2e10f9485d0e4dc9327f4da752dd352" translate="yes" xml:space="preserve">
          <source>and is not the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcff4d611d74aaa6bd233bf6771d56841cac94b2" translate="yes" xml:space="preserve">
          <source>and its</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f4307d97f6466f265686740a1e5e49af6e54a1" translate="yes" xml:space="preserve">
          <source>and manages no objects (whether or not its stored pointer is null). In multithreaded environment, this does not imply that the destructor of the managed object has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9322412fae94c4cc8107c93b8280d12fd73444be" translate="yes" xml:space="preserve">
          <source>and non-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7ab723f37de5dc308eaf85cd7b68eb7a70a475" translate="yes" xml:space="preserve">
          <source>and postfix versions return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ce5cade27acbd9b4fedf5377b2ce949dd9fd9a" translate="yes" xml:space="preserve">
          <source>and provides high-level input interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d886914a37a7de825074fb622e73899f4bdcec0" translate="yes" xml:space="preserve">
          <source>and provides high-level input/output interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0261e8061ae7be8cae49d9b71cce30439097acd" translate="yes" xml:space="preserve">
          <source>and provides high-level output interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951761a069f4bf2829731140274f90f7409a1ee0" translate="yes" xml:space="preserve">
          <source>and requires another path as the starting location to resolve to a file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54faa719f73ab6da9b9f268194f9a0c19aa05c31" translate="yes" xml:space="preserve">
          <source>and supports dynamic dispatch. It may only appear in the decl-specifier-seq of the initial declaration of a non-static member function (i.e., when it is declared in the class definition).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d402cb5ba5ced669d83f33b900f232ec58d72a" translate="yes" xml:space="preserve">
          <source>and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0933c8a8ed2545d4c8fb125d9f5453c59e4261" translate="yes" xml:space="preserve">
          <source>and the following conditions are met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3be2fcf6ca74869ed5c2b7a0f817eb689d0bf6" translate="yes" xml:space="preserve">
          <source>and the name is neither a member of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9152cd78177e88dee91bbed108729caf714922a7" translate="yes" xml:space="preserve">
          <source>and the value of other members is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd29300b85768a1234d6f664159b64c48c91452" translate="yes" xml:space="preserve">
          <source>and their</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3551827a3a8d65e4492701294bc05e0b81d61c0" translate="yes" xml:space="preserve">
          <source>and where the indexing of the output range (&lt;code&gt;begin[x]&lt;/code&gt;) is taken modulo n.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0416aa14d74afde308590f0e07546abbf5c866" translate="yes" xml:space="preserve">
          <source>and.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8a6fa6a9b7effa353f93b9c470b3b24fd71b02" translate="yes" xml:space="preserve">
          <source>and_eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a011b32fef63606811d73e091cc0b24ee0357f" translate="yes" xml:space="preserve">
          <source>anonymous union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29cab2d9873ccdcf44e8a9cc21cdeabb2d547ae" translate="yes" xml:space="preserve">
          <source>anonymous unions only allowed non-static data members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135d0d8f640a14f97cab4a9305c9646ad3d5f177" translate="yes" xml:space="preserve">
          <source>another (see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00022edda2e36bcc827bdc09c8841203a7e60cd7" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;any&lt;/code&gt; object to copy or move from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fe4eb8b6c70eac6abab3dec74c275fa68fe63e" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;atomic_ref&lt;/code&gt; object to copy from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab5b7c33c684c60a96010d30f346fe68e510530" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;auto_ptr&lt;/code&gt; to transfer the ownership of the object from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61aea66c80f5dcb2fbcb422f8be3df52c09e8dda" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;bad_exception&lt;/code&gt; object to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2b857c5d93adfcc325c5119f880d0279299ad7" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;basic_filebuf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20cffda9718eae11594f32a9720b08dbe01d598" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;basic_filebuf&lt;/code&gt; that will be moved from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d957d7696c988069b00221bb6328e7a4602fef6" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;basic_stringbuf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcf45c17fe9b5bd395651b52f0a84936920d3ee" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;basic_stringbuf&lt;/code&gt; that will be moved from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa322b22fd72c13f24633c8657d5752421f881f" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;optional&lt;/code&gt; object whose contained value is copied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ffba491ce89b6f66dda5f5d20338f55534e7dc" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;optional&lt;/code&gt; object whose contained value to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b894d64983ecbb0d78decc55b934bf826b3eb3ef" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;polymorphic_allocator&lt;/code&gt; to copy from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a54d7d05617c63cb5bfc38adeeb3d0fd376a85" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;promise&lt;/code&gt; to acquire the state from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cce65cb351c2c82a289dbdc11b9058133db0535" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;shared_lock&lt;/code&gt; to initialize the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18da495f6882ee37775c303b09a885a45b89a707" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;shared_lock&lt;/code&gt; to replace the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79054b948bba7c443d4a369bf75bbd9faa8e4b9" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;std::function&lt;/code&gt; object to copy the target of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123cc4eb80a8d7d2c492278fdd51a564e485112b" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;std::future&lt;/code&gt; to acquire shared state from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdbe6cc57eb6f854ebce270325ae097db76a7ac" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;std::scoped_allocator_adaptor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bc7f37083f24d0162e500ffaf4e27882684a55" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;type_index&lt;/code&gt; object to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a634ee6725ff4a9aed350210e20a8ff91668da4" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;unique_lock&lt;/code&gt; to initialize the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcd61ea7b059a5412236de7dedfb20d3804d814" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;unique_lock&lt;/code&gt; to replace the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682ea5bcf9b39c141d109fd1de1e5d233c59c152" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;unique_ptr&lt;/code&gt; object to swap the managed object and the deleter with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011cd8987035657434b5098fe4fba4bb6b2ed566" translate="yes" xml:space="preserve">
          <source>another &lt;code&gt;variant&lt;/code&gt; object whose contained value to copy/move</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07d0e00b598d90529fd6e393bd6e85d54d3c05b" translate="yes" xml:space="preserve">
          <source>another allocator to construct with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c5e18e38e4640192412c5bd0729b775bd4d65d" translate="yes" xml:space="preserve">
          <source>another atomic operation B on M if any of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295beb699ffe72cdff214290612770eb874e48ef" translate="yes" xml:space="preserve">
          <source>another bitset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9d45d08ea852900154d75a1c3d270e72c0b7f5" translate="yes" xml:space="preserve">
          <source>another complex to use as source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011b0157f40a1049e9efddd2f99bce8b6f92ee44" translate="yes" xml:space="preserve">
          <source>another container adaptor to be used as source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5454a7cd862fd70c5eff90f6a792ed8de0d960" translate="yes" xml:space="preserve">
          <source>another container adaptor to be used as source to initialize the underlying container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c224e93b0f756960ac267ec33ef27094096892" translate="yes" xml:space="preserve">
          <source>another container to be used as source to initialize the elements of the container with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070cdd40a8d0b59181ac887aa5a96da6b7c18f22" translate="yes" xml:space="preserve">
          <source>another container to merge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbddc779d87809500ccec493a7fc545701d7757" translate="yes" xml:space="preserve">
          <source>another container to move the content from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13621cd5fafadbc09abd45892c2c2c74f9e1e00" translate="yes" xml:space="preserve">
          <source>another container to transfer the content from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008c3f5de6a82b3452b39acbd86a4b89b483b4e5" translate="yes" xml:space="preserve">
          <source>another container to use as data source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac312f5c2c4e28916ef836b28abb754ddcbb194" translate="yes" xml:space="preserve">
          <source>another directory iterator to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4a237da678e141f9ebbd3744bd4bd1ddec53a8" translate="yes" xml:space="preserve">
          <source>another error condition to initialize with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9319faf8c55f374fc6a55801f21dfcc4b4c19f3c" translate="yes" xml:space="preserve">
          <source>another exception object to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c39399a46863589ae5b93ff93e4673b7a0403c" translate="yes" xml:space="preserve">
          <source>another exception to assign the contents of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9697f6147b67a136825a02c0ba8fb518e802f98d" translate="yes" xml:space="preserve">
          <source>another file stream to use as source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfebfaa5acb2d9fea369a15c40ec185f54ac2cc0" translate="yes" xml:space="preserve">
          <source>another file_status object to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82484a99b3d8e9af3e5dc188c8209c8d0b88e8cd" translate="yes" xml:space="preserve">
          <source>another future object to initialize with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb94211f7b299e9eee83736cc7e9bd9bae5503a" translate="yes" xml:space="preserve">
          <source>another istream_iterator of the same type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1286ef3586464302913a563cf0529846dba438" translate="yes" xml:space="preserve">
          <source>another locale to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2f075ca1f1159310726a2ea26858a6be7582ab" translate="yes" xml:space="preserve">
          <source>another locale to take facets from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299d122b37b4556be79fcba0eafe7f58b134ed01" translate="yes" xml:space="preserve">
          <source>another match results object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e91901632b7fa7654f85d5fe354cf0bbf963b1" translate="yes" xml:space="preserve">
          <source>another match_result to use as source to initialize the match_result with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cef26571547644e1a2ab50cb3b57c82c83de68" translate="yes" xml:space="preserve">
          <source>another numeric array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d199aec079135435793908129f99df5b7dcea0" translate="yes" xml:space="preserve">
          <source>another numeric array (or a mask) to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9202e73c6b838b7e74f12fb1b3bb9016bfc0f65a" translate="yes" xml:space="preserve">
          <source>another numeric array to use as source to initialize the contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f4b2a38667ef44af316081ef7717396e08d21a" translate="yes" xml:space="preserve">
          <source>another osyncstream to move from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e886dbbbb760ffe370cd54cd2bd12a9033b45cfe" translate="yes" xml:space="preserve">
          <source>another path to exchange the contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ad6739c344a8ab7ca8b63544a5591345cfd0c7" translate="yes" xml:space="preserve">
          <source>another reference wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585f6648cbcbca92d008141bd3109d52f4e7a5fb" translate="yes" xml:space="preserve">
          <source>another regex object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fa0107a502103eeaed03f33a06d2ee2857285a" translate="yes" xml:space="preserve">
          <source>another regex to use as source to initialize the regex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3247286e31fe53b7f24e65de3ba98e0583a9207e" translate="yes" xml:space="preserve">
          <source>another regular expression to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b16caf61bb99f1c8857ca1cb7a2a4e21dac5026" translate="yes" xml:space="preserve">
          <source>another slice to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fbaff45a95db1b269061aaffd0fec6e67c3042" translate="yes" xml:space="preserve">
          <source>another smart pointer to acquire the ownership from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb14df8a69745aa9094f941af1dab50fa04dcaa" translate="yes" xml:space="preserve">
          <source>another smart pointer to share the ownership to or acquire the ownership from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc86cc5e36a55810011a187370b9f645ad89203" translate="yes" xml:space="preserve">
          <source>another span to convert from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fe9e2a37c3bd9d2fe3391bb168e3e6ecd3a0f2" translate="yes" xml:space="preserve">
          <source>another span to copy from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49642b2a7a75575bf5b3f4cba9740bf1e08670be" translate="yes" xml:space="preserve">
          <source>another std::basic_syncbuf to move from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3154068cac6cae3d907324ba750fd28c6d765879" translate="yes" xml:space="preserve">
          <source>another stream buffer iterator to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f50d895354b1691e55d2b0d771a6fe1938552a" translate="yes" xml:space="preserve">
          <source>another stream to assign state of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01fbe6142d0a0dfc3c771c41b98eabf246d50ca" translate="yes" xml:space="preserve">
          <source>another stream to exchange the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9dc52dd593ff3a90d2ce6139244210cdeb7737f" translate="yes" xml:space="preserve">
          <source>another stream to initialize with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106cdb3912c17bd580a2a45c5d3d7d5f1885e996" translate="yes" xml:space="preserve">
          <source>another stream to use as source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f752ff35970f51e96737e8399f80371505927f48" translate="yes" xml:space="preserve">
          <source>another string stream to use as source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b7aea8fa71707b230bcd2cf3fba2cb377725bc" translate="yes" xml:space="preserve">
          <source>another string to use as source to initialize the string with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dee2605190994cf7d29db49a6b2c9635a767d9" translate="yes" xml:space="preserve">
          <source>another thread object to assign to this thread object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11fa54ae925c9198453c8c91bd86737c94d32cb" translate="yes" xml:space="preserve">
          <source>another thread object to construct this thread object with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3b6cbe47ff45fcc332f6fb3317c3353759dddc" translate="yes" xml:space="preserve">
          <source>another type information object to compare to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da24d3befb6891705354d1d9019ef1ff224d78b9" translate="yes" xml:space="preserve">
          <source>another valarray to swap the contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c93f3b149a9d27f59d4b6d97ab570a90623e79b" translate="yes" xml:space="preserve">
          <source>another view to initialize the view with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5970456ab549a8f0e8111871213023bcd162e52" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; that specifies initialization of a variable and variable template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3df9cc81ecc4c3fa749c0e28c77c8014afe93d" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;declarations&quot;&gt;declarator&lt;/a&gt; except another reference declarator (there are no references to references)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73c0e5ebe0d0b7db8448fd2ab0c860d139b82c9" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;declarations&quot;&gt;declarator&lt;/a&gt; other than a reference declarator (there are no pointers to references). It can be another pointer declarator (pointer to pointers are allowed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51afdfd6915485c4ada63c562fa452e9ddebc10e" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; of integral or enumeration type, or of a class type &lt;a href=&quot;implicit_cast&quot;&gt;contextually implicitly convertible&lt;/a&gt; to an integral or enumeration type, or a &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; of a single non-array variable of such type with a brace-or-equals &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cd6152cb85a6373bb246013fba4636e1dc4a05" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; that represents a suitable sequence (either an array or an object for which &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; member functions or free functions are defined, see below) or a &lt;a href=&quot;list_initialization&quot;&gt;braced-init-list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03170d0f618ae1a51a5cbc39b3306db6f81c968a" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; which is &lt;a href=&quot;implicit_cast&quot;&gt;contextually convertible&lt;/a&gt; to bool or a &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; of a single variable with a brace-or-equals &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt;. This expression is evaluated before each iteration, and if it yields &lt;code&gt;false&lt;/code&gt;, the loop is exited. If this is a declaration, the initializer is evaluated before each iteration, and if the value of the declared variable converts to &lt;code&gt;false&lt;/code&gt;, the loop is exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f335514ab109799e7ab284a2632cd9a2b9f6bb" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; which is &lt;a href=&quot;implicit_cast&quot;&gt;contextually convertible&lt;/a&gt; to bool. This expression is evaluated after each iteration, and if it yields &lt;code&gt;false&lt;/code&gt;, the loop is exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b65f0bfbc6035756de17f1757b2d62e95eba2fc" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt;, which is executed after every iteration of the loop and before re-evaluating condition. Typically, this is the expression that increments the loop counter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa7b44c78203770d0494101f952ad0b312076d3" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;statements&quot;&gt;statement&lt;/a&gt; (often a compound statement), which is executed if condition evaluates to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4c04b5e00064e421d36053d837365853a7413e" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;statements&quot;&gt;statement&lt;/a&gt; (often a compound statement), which is executed if condition evaluates to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0836fd475864fad2ab078edd2e0248af268ac973" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;statements&quot;&gt;statement&lt;/a&gt; (typically a compound statement). &lt;code&gt;case:&lt;/code&gt; and &lt;code&gt;default:&lt;/code&gt; labels are permitted in statement and &lt;code&gt;break;&lt;/code&gt; statement has special meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8f57a6fc50c3b928eca64028a6f3e218dfa5cd" translate="yes" xml:space="preserve">
          <source>any &lt;a href=&quot;statements&quot;&gt;statement&lt;/a&gt;, typically a compound statement, which is the body of the loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11194795bfd6fd6432a2cc5f653234d4d4b4e479" translate="yes" xml:space="preserve">
          <source>any &lt;code&gt;T&lt;/code&gt; that is trivially copyable but not copyable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e7db25e0ac3067286f3304c45004cf8ffb2e36" translate="yes" xml:space="preserve">
          <source>any cast expression to a dependent type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ceb162e2bc076e2a2faeccd4e9bfd7a6c11e4f8" translate="yes" xml:space="preserve">
          <source>any cast expression to a dependent type or from a value-dependent expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d6f4bef936c2ea29f4ddd64808a15de3781230" translate="yes" xml:space="preserve">
          <source>any declarations of &lt;code&gt;swap&lt;/code&gt; found by &lt;a href=&quot;../../language/adl&quot;&gt;argument-dependent lookup&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a723e53759bf3d43747ded6da95b57cdaaffb2" translate="yes" xml:space="preserve">
          <source>any entity defined or created within a templated entity: a local class, a local variable, a friend function, etc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a747febab87ebe637686e0c05893426ae5e0185" translate="yes" xml:space="preserve">
          <source>any exception thrown by &lt;code&gt;Allocator::allocate()&lt;/code&gt; (typically &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44137e60af3bc90a716d7b0b3737ce4fc3dacdca" translate="yes" xml:space="preserve">
          <source>any exception thrown by &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd9d384b5059a7f44331b59cc2761cfa59600a5" translate="yes" xml:space="preserve">
          <source>any exception thrown by the &lt;a href=&quot;packaged_task&quot;&gt; move constructor&lt;/a&gt; of the new &lt;code&gt;packaged_task&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebccef32090d2c6052694cf4bd1d998d7c88ab8" translate="yes" xml:space="preserve">
          <source>any expression that designates a temporary object, after &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;temporary materialization&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c340d13cc9c10595d41f6618d70f0c1aa4d302fd" translate="yes" xml:space="preserve">
          <source>any identifier, class name, or &lt;code&gt;decltype&lt;/code&gt; expression that names a non-static data member, a direct or virtual base, or (for delegating constructors) the class itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf5a65c5c98dbeb42583fd9014de947d2b10067" translate="yes" xml:space="preserve">
          <source>any number of &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7c13fa3a2a34751caac9176eeabd6e27791742" translate="yes" xml:space="preserve">
          <source>any number of &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; that apply to this using-directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a788049d59a0abb76f0db465a64adb830af3085" translate="yes" xml:space="preserve">
          <source>any of template arguments is type-dependent, value-dependent, or is a pack expansion (even if the template-id is used without its argument list, as injected-class-name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7921d5ed795c6ff45f8024019ef400ddbbfb5c2a" translate="yes" xml:space="preserve">
          <source>any of the following 32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f071f1031c80f9014bf31124720633d611048d26" translate="yes" xml:space="preserve">
          <source>any of the following 38(until C++20)40(since C++20) operators:&lt;code&gt;+&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;*&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;&lt;code&gt;%&lt;/code&gt;&lt;code&gt;^&lt;/code&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;&lt;code&gt;!&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;+=&lt;/code&gt;&lt;code&gt;-=&lt;/code&gt;&lt;code&gt;*=&lt;/code&gt;&lt;code&gt;/=&lt;/code&gt;&lt;code&gt;%=&lt;/code&gt;&lt;code&gt;^=&lt;/code&gt;&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;code&gt;|=&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;code&gt;==&lt;/code&gt;&lt;code&gt;!=&lt;/code&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;(since C++20)&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;code&gt;||&lt;/code&gt;&lt;code&gt;++&lt;/code&gt;&lt;code&gt;--&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;-&amp;gt;*&lt;/code&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;code&gt;( )&lt;/code&gt;&lt;code&gt;[ ]&lt;/code&gt;co_await(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d662fe4feb90b46896e3dc4a9b19518ce02a39f" translate="yes" xml:space="preserve">
          <source>any other expression that may be accepted by the currently installed C &lt;code&gt;&lt;a href=&quot;../../locale/setlocale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19e90a8cecdfb694e6d06e2f66ae9e7c4ded441" translate="yes" xml:space="preserve">
          <source>any resources held by the argument. For example, a move constructor of a linked list might copy the pointer to the head of the list and store &lt;code&gt;nullptr&lt;/code&gt; in the argument instead of allocating and copying individual nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55cf07b1b634c2c58374a17e459ebe12d7cec57" translate="yes" xml:space="preserve">
          <source>any standard attribute token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720c33ec9b731b5c25ba46912abe2c60be5c84ce" translate="yes" xml:space="preserve">
          <source>any type such that the expression &lt;code&gt;bool(B::value)&lt;/code&gt; is a valid constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be30e38eb05ec00c29f0579f65cca600ce8665c7" translate="yes" xml:space="preserve">
          <source>any valid declarator, but if it begins with *, &amp;amp;, or &amp;amp;&amp;amp;, it has to be surrounded by parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1929c23f4eb3ba0ca6393380ebe32397f69058a" translate="yes" xml:space="preserve">
          <source>any valid declarator, but if it begins with &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, it has to be surrounded by parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf69d24a18b828410a324409435e558734816ec4" translate="yes" xml:space="preserve">
          <source>any_cast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac78b022715c5b8357b4dca8045e8463b4de2124" translate="yes" xml:space="preserve">
          <source>ap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfbd9f07437718b73115a6a0356598c7d27a84a" translate="yes" xml:space="preserve">
          <source>append extended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c032f27dd210ce161368c8500fbb4f266829d622" translate="yes" xml:space="preserve">
          <source>appendoperator/=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea4e18dac8b6b256584c24f08f1c66e6c79b375" translate="yes" xml:space="preserve">
          <source>appends a certain amount of wide characters from one wide string to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75c84d536a3d55644b99f1da7b1d69c0c8b7a29" translate="yes" xml:space="preserve">
          <source>appends a character to the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c546d375272cf0c80c66cbfccc64570877a84bf" translate="yes" xml:space="preserve">
          <source>appends a character to the output sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dbf792e9efe34706c151bbda79daf6e8690c2d" translate="yes" xml:space="preserve">
          <source>appends a character to the output sequence, may reallocate or initially allocate the buffer if dynamic and not frozen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1975c46fbfd68df17ca6344eed23e3a6512c750c" translate="yes" xml:space="preserve">
          <source>appends a copy of one wide string to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b009ad82b77bc277d05792d6f0183f6ac5dd553e" translate="yes" xml:space="preserve">
          <source>appends characters to the end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f4277e38aea8d2a6bfcc6bbaa7e955b636f674" translate="yes" xml:space="preserve">
          <source>appends elements to the path with a directory separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff157b6dedfe5264af985b3abd3ddbdadec5319" translate="yes" xml:space="preserve">
          <source>applies &lt;a href=&quot;../language/static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../language/dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../language/const_cast&quot;&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../language/reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt; to the stored pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454dd44b475d7a5b6cd5366111c66df19f01418f" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator!&lt;/code&gt; to its argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281573407aa5782ca1b08b62a52e83f4d540e5b2" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt; to lhs and rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c3f550bb4b0741b7895d6a2becc72b1fa8f759" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator&amp;amp;&lt;/code&gt; to lhs and rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33740c91c164c4d51ae096a6a35cb4ef67389699" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator^&lt;/code&gt; to lhs and rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e412a00bdec6a854fccbd7d6cb5911f7abecf04f" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator|&lt;/code&gt; to lhs and rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c24adbfc7574b7c514229bacf5d004f9f22251" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator||&lt;/code&gt; to lhs and rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f96399e768b44c3c93dfcbd9ed84e976d88d0ae" translate="yes" xml:space="preserve">
          <source>applies &lt;code&gt;operator~&lt;/code&gt; to its argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee56b7751b3e4d26a33f8e7c45b3d36984e0202" translate="yes" xml:space="preserve">
          <source>applies a function object to the first n elements of a sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0c9ef17a12518f06f1b4e88d37459232a04688" translate="yes" xml:space="preserve">
          <source>applies a function to a range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb102bab446745e0cac0ad87c1d6990d67bb8052" translate="yes" xml:space="preserve">
          <source>applies a function to every element of a valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe7a7b546f5b21ddbea5cb24456fd7b754fcd6e" translate="yes" xml:space="preserve">
          <source>applies a functor, then calculates exclusive scan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1ac75fa7f8321ec871eb7a4d3755f93be2905e" translate="yes" xml:space="preserve">
          <source>applies a functor, then calculates inclusive scan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e815a6b3c98ed90b82ee4f9cf650f7e6e9aa50cd" translate="yes" xml:space="preserve">
          <source>applies a functor, then reduces out of order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba91187721e29cce6583ff99fd3829967c861695" translate="yes" xml:space="preserve">
          <source>applies a unary arithmetic operator to each element of the valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be96d43066f4dcf3996e3649c95c0bf24ad160d" translate="yes" xml:space="preserve">
          <source>applies binary operators to each element of two valarrays, or a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5805c8ffc01d2c3212822511d783a5e6e55463e" translate="yes" xml:space="preserve">
          <source>applies compound assignment operator to each element of the valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e8404c4482f298299821e82b26b32a5125a4d5" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/acos&quot;&gt;std::acos&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650bb15ab86effcc9a4c703288d8597536f00adc" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/asin&quot;&gt;std::asin&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dfbdc6949ee290fb6897b2ffe8b475d8b169fa" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/atan&quot;&gt;std::atan&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e5c43bd25d13e11603e08e5a890bb70ac1d114" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/atan2&quot;&gt;std::atan2&lt;/a&gt;&lt;/code&gt; to a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e089574c3ee120b15f45c7d23c095cda530549" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/cos&quot;&gt;std::cos&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e955803c3e1a81261c1cc372908009b7eb0a8b7" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/cosh&quot;&gt;std::cosh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab870cefc9f6be984f135e3f2bbe927cfc7d2be" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/exp&quot;&gt;std::exp&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61d851f8d52007354406a5864aa285ae4967cda" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/log&quot;&gt;std::log&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0432606632ed4d6ed309d052a0027832f2ef8118" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/log10&quot;&gt;std::log10&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11688ddff7aa8b2c6b86c350e8ab708018302f73" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/pow&quot;&gt;std::pow&lt;/a&gt;&lt;/code&gt; to two valarrays or a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c230c7445a1f6bf0184d92fc8f4a408559cdda0c" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/sin&quot;&gt;std::sin&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0adb0c9e67b27d5b56b73aff936cad96885251" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/sinh&quot;&gt;std::sinh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1234b1b4a94ee4d90a1a306b4c14ebc0bceccd5" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304d7e95b5f36c673a5adc5e2462b54bba246e18" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/tan&quot;&gt;std::tan&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8debcd65edebb79c5011771c3624e5f154292d4" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../math/tanh&quot;&gt;std::tanh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5658a8afbb3b89e4b00acce3b7ffa885813543b2" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/acos&quot;&gt;std::acos&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4248dc2d3e970f268c15b20cd80bf6a6c0e225f" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/asin&quot;&gt;std::asin&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0809419257c584532aacc37911c1b6388281e8e5" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/atan&quot;&gt;std::atan&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b66dd87a6f2893d8596b7f67c61528e709f4aa" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/atan2&quot;&gt;std::atan2&lt;/a&gt;&lt;/code&gt; to a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70c7a6700c85952835aade8f4bd00920c5b07f1" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/cos&quot;&gt;std::cos&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ce8ee835d4ec8fbb1381f78953ff8c15cd3a6d" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/cosh&quot;&gt;std::cosh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4275c54c06c759fb586f8cc5082d5b9ff1d6f53" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/exp&quot;&gt;std::exp&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446704e907b852e4ff68063cc1b11cf4042f7ef4" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/log&quot;&gt;std::log&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fa2fededc05ae7a9eca57af7c1540dcbe8a311" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/log10&quot;&gt;std::log10&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfa977521480adabfaf058c759a89f82fc30874" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/pow&quot;&gt;std::pow&lt;/a&gt;&lt;/code&gt; to two valarrays or a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7364c973ef99f592be289468e6858ccb26e51260" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/sin&quot;&gt;std::sin&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fe86028818dece5971e5c0a0bca951cde6bef6" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/sinh&quot;&gt;std::sinh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a686dc5ccfe0b2c67fee7dfe4a0cad17084355" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863d20a371eeb93b52410501257621d9499549a2" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/tan&quot;&gt;std::tan&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e7633cd719423118955eef7a509c6e515a61c6" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;../numeric/math/tanh&quot;&gt;std::tanh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21c4916fba5628c17b37e6f64c773e753c44b2a" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/acos&quot;&gt;std::acos&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac2e65fc52f192afb83f6b1b343784ef07c34dd" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/asin&quot;&gt;std::asin&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd485f1ca928589f5316ef86d2c251fcf722b0d1" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/atan&quot;&gt;std::atan&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a34a7283502b6756798bd9a01dcdb71a92e335d" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/atan2&quot;&gt;std::atan2&lt;/a&gt;&lt;/code&gt; to a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6f409f80fbf588d40c46f9f5807acf0e2daf3b" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/cos&quot;&gt;std::cos&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84be89dcd944e9c08bfb81da4bdd97c8591d1af5" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/cosh&quot;&gt;std::cosh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380abe2cb7ab90d52a497145c1ef799a701aa6f6" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/exp&quot;&gt;std::exp&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfc4fb5792e3285b6a2042277dd542c2b8f2578" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/log&quot;&gt;std::log&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15356b2705efdda3497257e3522b032cad99947" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/log10&quot;&gt;std::log10&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5912e032809cd401d992b9a6a863f075ddacae5" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/pow&quot;&gt;std::pow&lt;/a&gt;&lt;/code&gt; to two valarrays or a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b56f35c6d411e6cc41e1aa1334f499cd179d783" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/sin&quot;&gt;std::sin&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957d039239714706ad4dc015a93759fc68e7f699" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/sinh&quot;&gt;std::sinh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee227baad0c8385db397e630c0c3213d7665b8f7" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/sqrt&quot;&gt;std::sqrt&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5220b69781a53fa3e74680213670ea3861c98191" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/tan&quot;&gt;std::tan&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759cebe711387a627f4498ce5b7c263017ffd3c2" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;&lt;a href=&quot;math/tanh&quot;&gt;std::tanh&lt;/a&gt;&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886631c593ac1db8550663227a848a4f11b4be8a" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::abs&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62e33e87beb01ff422248283bd46b4829bfd008" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::acos&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca4f504aa556aee8a9839db731b28d870be4469" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::asin&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc22834c355fe7ed5e3fbeb16eab9f852d32d6fd" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::atan2&lt;/code&gt; to a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece19c1b58be28565925a3b66cbce17392ab7f62" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::atan&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bc74fb4393dd15da98a57269caf96b63832aa7" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::cos&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cf6d3b686400b5780e6cd845016e40311e4b3e" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::cosh&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9e3c3c9339cea255c46cbc5075af0989870c97" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::exp&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243fa6f66e8bd1cca8ffb6ca149043408b399b8e" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::log10&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e02710efcdb56d9bd04ebdd43f2b7f0f6a8eb1" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::log&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7bdbb8dcaa69af454e41c84b3bb33ac8148140" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::pow&lt;/code&gt; to two valarrays or a valarray and a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1333708286454633ba62bf7ef9ccbf1e492ac116" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::sin&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a408f482c60fe51e03568c0e475fa17b1f8db6" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::sinh&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654abfdba0b7f3c4fec5c9f3fe4d31b793bf6e77" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::sqrt&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f28a722e25f823a4ae83cc3310e0a79aace7fd" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::tan&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fc01804e3a174462d86788f2c5d56f74f8303e" translate="yes" xml:space="preserve">
          <source>applies the function &lt;code&gt;std::tanh&lt;/code&gt; to each element of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd814a96bad6a87451639f92a0ea34609d61afa" translate="yes" xml:space="preserve">
          <source>applies type transformations as when passing a function argument by value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c050616b6a2c031bb62a515367b3b12a8ccfce54" translate="yes" xml:space="preserve">
          <source>applies unary operators to &lt;code&gt;year&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbc6f9c9c7649333cd82b50f316ecb5dac62f78" translate="yes" xml:space="preserve">
          <source>applies unary operators to complex numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a93c37f5f85aff871571d14f6f892d405329c6f" translate="yes" xml:space="preserve">
          <source>applying lvalue-to-rvalue conversion to &lt;code&gt;x&lt;/code&gt; yields a constant expression that doesn't invoke non-trivial functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df903074f885f1f15c3daa6ce45002105c249232" translate="yes" xml:space="preserve">
          <source>arbitrary hexadecimal value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4369a0f24ae39fbe536286ba71dd880472aa2770" translate="yes" xml:space="preserve">
          <source>arbitrary octal value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7b6e4b5b92c73a712aba78613ba443fc188a92" translate="yes" xml:space="preserve">
          <source>arbitrary parameters matching a placement allocation function (may include &lt;code&gt;&lt;a href=&quot;../../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;align_val_t&quot;&gt;std::align_val_t&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5960fa93dcfe2eb29c58ee8bc1b9d82b101658" translate="yes" xml:space="preserve">
          <source>arc tangent, using signs to determine quadrants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9e5802bbabc71f9275fccf122f5a52b8599f12" translate="yes" xml:space="preserve">
          <source>are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dc4d9cbeac54e381495135f4bb1c94db590888" translate="yes" xml:space="preserve">
          <source>are &lt;a href=&quot;declarations&quot;&gt;declarations&lt;/a&gt; that fully define the entity introduced by the declaration. Every declaration is a definition, except for the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b158f3c00432233af08383a39d4a2341048ee6e" translate="yes" xml:space="preserve">
          <source>are brace-enclosed sequences of statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c031427f5aa190cf678930f8d3114edae789dc5f" translate="yes" xml:space="preserve">
          <source>are commonly used: the entire header is wrapped in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b5fc7518d9a6a484405870f75772c3965657b5" translate="yes" xml:space="preserve">
          <source>are defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ec21db41b05d1a1fe26336ffd5172418084c69" translate="yes" xml:space="preserve">
          <source>are not hidden and are unambiguously available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc56cda20cb940f433d62ffa916d961d8f2ecfa" translate="yes" xml:space="preserve">
          <source>are performed on both operands following the rules for &lt;a href=&quot;operator_arithmetic&quot;&gt;arithmetic operators&lt;/a&gt;. The values are compared after conversions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c24ea6ef756d49ae3e887708a2b0b17b810b2e9" translate="yes" xml:space="preserve">
          <source>are pointer-interconvertible, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d921db3e8f5a1c8f73b53cb5b438da7f41848bae" translate="yes" xml:space="preserve">
          <source>are pointer-interconvertible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2932e7f65042542e367b6db6669291e1c85fff6b" translate="yes" xml:space="preserve">
          <source>are returned: these characters are the ones that were obtained from the string argument of the constructor, the string argument of the most recent call to the second overload of &lt;code&gt;str()&lt;/code&gt;, or from an write operation. A typical implementation that uses over-allocation maintains a high-watermark pointer to track the end of the initialized part of the buffer and this overload returns the characters from &lt;code&gt;pbase()&lt;/code&gt; to the high-watermark pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d6e2b300911995efa37b6707fdc02975a3021c" translate="yes" xml:space="preserve">
          <source>arg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e52a50224511e55b3cb5a078473fdd0e08a5b1e" translate="yes" xml:space="preserve">
          <source>arg-1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7228e374c9c5c17ac8a45e24698a76423635ad" translate="yes" xml:space="preserve">
          <source>argc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c021ee3eccdc88f466e229e5a1b44719a4222d" translate="yes" xml:space="preserve">
          <source>args...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb39b8d6f4cb13c8bc560d3a98700d3b2ad0661" translate="yes" xml:space="preserve">
          <source>argument array to retrieve the values from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45f9e690ca5a9cfcd1882e642917c3a5baf62b5" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;../io/c/fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; indicating seeking from beginning of the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03bce9b12d3aef9d8445890511a0be5052f05d6" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;../io/c/fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; indicating seeking from end of the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8e1089671aaa2ed68d58d15c4b1d123fcda2e9" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;../io/c/fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; indicating seeking from the current file position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614603b21ec9b6389acc45246ce24be36aad18fc" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;../io/c/setbuf&quot;&gt;std::setbuf&lt;/a&gt;&lt;/code&gt; indicating fully buffered I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79b3c69df8b8fdb3ba768ea1f2cef6c1ea1aff6" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;../io/c/setbuf&quot;&gt;std::setbuf&lt;/a&gt;&lt;/code&gt; indicating line buffered I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a223e7e4c04bfd47589a85264d5babcf27b100" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;../io/c/setbuf&quot;&gt;std::setbuf&lt;/a&gt;&lt;/code&gt; indicating unbuffered I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e12f983c1f111851d29c1cf8ead747adb0f532d" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;c/fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; indicating seeking from beginning of the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adeae41da5ac63e66582118dc9c66804863b94b" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;c/fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; indicating seeking from end of the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e68cd3ab7f9b9f833dc02bbd96f6343f9333bde" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;c/fseek&quot;&gt;std::fseek&lt;/a&gt;&lt;/code&gt; indicating seeking from the current file position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ce825afb2cdaf89ced8f78b06a1a56ca6a2122" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;c/setbuf&quot;&gt;std::setbuf&lt;/a&gt;&lt;/code&gt; indicating fully buffered I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23fcf442a2de68506889c107e76e071d8b94b662" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;c/setbuf&quot;&gt;std::setbuf&lt;/a&gt;&lt;/code&gt; indicating line buffered I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322db7f9464ecc8bb77eddf0d78349dd0beee54d" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;&lt;a href=&quot;c/setbuf&quot;&gt;std::setbuf&lt;/a&gt;&lt;/code&gt; indicating unbuffered I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c49861ed8e74fe0e189949ee405c5f39c25c2a" translate="yes" xml:space="preserve">
          <source>argument to bind to &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bf2fc7c6a9903e28aa15888ee090c44662e495" translate="yes" xml:space="preserve">
          <source>argument to pass through to predicate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8716aaf8f6527ddb092f5a0c7a3b4f6d8fb6e3" translate="yes" xml:space="preserve">
          <source>argument to pass to the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00059ec1fed32b9496a171d06bed1cdd218d7239" translate="yes" xml:space="preserve">
          <source>argument to return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0f14dd3cb378d1b2fb76510dc53f503afdcc59" translate="yes" xml:space="preserve">
          <source>arguments (depends on the instruction)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebcb1ceadb890f7d2bebcc5e1f0ba45a5ff6b27" translate="yes" xml:space="preserve">
          <source>arguments specifying data to print. If any argument after &lt;a href=&quot;../../language/variadic_arguments#Default_conversions&quot;&gt;default conversions&lt;/a&gt; is not the type expected by the corresponding conversion specifier, or if there are fewer arguments than required by &lt;code&gt;format&lt;/code&gt;, the behavior is undefined. If there are more arguments than required by &lt;code&gt;format&lt;/code&gt;, the extraneous arguments are evaluated and ignored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93768e1e5473e553585171864cef68017c9ab62f" translate="yes" xml:space="preserve">
          <source>arguments to be passed to the constructor of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c49da1855488b24847de1a645e972235e9cc0c3" translate="yes" xml:space="preserve">
          <source>arguments to be passed to the constructor of the contained object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368352ebee53e687345c922e55cfc93844454c91" translate="yes" xml:space="preserve">
          <source>arguments to forward to the constructor of the element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bed4ce1b0b3fcebba8034775d4f98c7cad3cb8a" translate="yes" xml:space="preserve">
          <source>arguments to initialize the contained value with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb8a12efe6f3621d8e00570e768414031e7d47a" translate="yes" xml:space="preserve">
          <source>arguments to pass to &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eabe0f5dd3bb26027b0545acf698361f877e3cd" translate="yes" xml:space="preserve">
          <source>arguments to pass to the called function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c784616ef9cae01743652ca773f5cd08ebe0f2" translate="yes" xml:space="preserve">
          <source>arguments to pass to the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286fa18633fd7f43244a6158711c21511eb93f6d" translate="yes" xml:space="preserve">
          <source>arguments to pass to the new function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da1f8d272a2621cb45f6f5d9be24ea807250b43" translate="yes" xml:space="preserve">
          <source>arguments with which to initialize the contained value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44fa84e333f3362a12273e855dca2caf2666100b" translate="yes" xml:space="preserve">
          <source>argv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ca194aa0f608d645500c4f2354facbbde0a13e" translate="yes" xml:space="preserve">
          <source>arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880edfe9b0405b9651bc2030f8f64ad8cfd8cf12" translate="yes" xml:space="preserve">
          <source>arithmetic or enumeration type (see arithmetic comparison operators below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de70c8db2b5ddc0943a664db9e4cf3fa9b7af931" translate="yes" xml:space="preserve">
          <source>arithmetic permitted on pointers to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5983179ff9ea4cd97d13bc3a6650edc0b24b36e" translate="yes" xml:space="preserve">
          <source>arithmetic type representing the number of ticks in the clock's duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14c0c7fce15bac406bd30699f02414eb003d742" translate="yes" xml:space="preserve">
          <source>arithmetic types (see also &lt;code&gt;&lt;a href=&quot;../types/is_arithmetic&quot;&gt;std::is_arithmetic&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b9fefa4084591ea41db40fa043defb9958411c" translate="yes" xml:space="preserve">
          <source>arr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a09f669ffa42af1a331eb06d31a4d703767648a" translate="yes" xml:space="preserve">
          <source>array as first member wasn't considered when comparing the first element type with type of a base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abafd90ce5f52474f18851483117fda1ffecfa1d" translate="yes" xml:space="preserve">
          <source>array bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f635608f5e029041a75a03927f99524670782d03" translate="yes" xml:space="preserve">
          <source>array elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01daa80dd0b962f2eb658f44cc4c1342497db475" translate="yes" xml:space="preserve">
          <source>array members are considered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c8e26d228019763564980008d7901168bc0cd8" translate="yes" xml:space="preserve">
          <source>array of elements of incomplete type;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e426f9651b9785e07d49216df4fd9973080df88" translate="yes" xml:space="preserve">
          <source>array size to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c1662fa1175adf245d28a26789c0120e6196cd" translate="yes" xml:space="preserve">
          <source>array subscript expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca476fbdfe45fb5bd00ed3e17e5fa0644e539c66" translate="yes" xml:space="preserve">
          <source>array to construct a view for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12145c7b38e49bf9343c7e0fa21a5d94a86aec6b" translate="yes" xml:space="preserve">
          <source>array type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc1eb789fafd015126f3c6e3e17c34b2829ad13" translate="yes" xml:space="preserve">
          <source>array whose contents to extract</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ae4b67d9d5815ad45314e5daa260060d48425a" translate="yes" xml:space="preserve">
          <source>array-to-pointer conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b86fae6f4f0d556c068041226446c02ab600b34" translate="yes" xml:space="preserve">
          <source>array-to-pointer, function-to-pointer, lvalue-to-rvalue conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c7adc27b93e19443810419fb72b06a2d256122" translate="yes" xml:space="preserve">
          <source>as D2. If D1 is at least as constrained as D2 and D2 is not at least as constrained as D1, then D1 is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d866176515de2adcf874cc465c56514d33f3323b" translate="yes" xml:space="preserve">
          <source>as arguments to &lt;a href=&quot;sizeof&quot;&gt;sizeof&lt;/a&gt;, &lt;a href=&quot;alignof&quot;&gt;alignof&lt;/a&gt;, &lt;a href=&quot;alignas&quot;&gt;alignas&lt;/a&gt;, &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt;, and &lt;a href=&quot;typeid&quot;&gt;typeid&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4080529815976c9a6aecf32f64b08d2a58c55745" translate="yes" xml:space="preserve">
          <source>as long as at least &lt;code&gt;max_digits10&lt;/code&gt; were used (&lt;code&gt;9&lt;/code&gt; for &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;17&lt;/code&gt; for &lt;code&gt;double&lt;/code&gt;): it is guaranteed to produce the same floating-point value, even though the intermediate text representation is not exact. It may take over a hundred decimal digits to represent the precise value of a &lt;code&gt;float&lt;/code&gt; in decimal notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40914e39619107df96c0c83b7717f268b322c0f9" translate="yes" xml:space="preserve">
          <source>as the argument, which then selects the appropriate assignment operator following the rules of &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;. Note that, if a non-template assignment operator from some non-class type is available, it is preferred over the copy/move assignment in &lt;code&gt;E1 = {} &lt;/code&gt; because &lt;code&gt;{} &lt;/code&gt; to non-class is an &lt;a href=&quot;overload_resolution#Implicit_conversion_sequence_in_list-initialization&quot;&gt;identity conversion&lt;/a&gt;, which outranks the user-defined conversion from &lt;code&gt;{} &lt;/code&gt; to a class type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8de1b802b264a58adf830fad6f6934a5f804835" translate="yes" xml:space="preserve">
          <source>as the default argument of a &lt;a href=&quot;template_parameters#Type_template_parameter&quot;&gt;template type parameter&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8061826142766697c1e30ed3e3216cb4349583" translate="yes" xml:space="preserve">
          <source>as the element type in move-aware containers, such as &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&lt;/code&gt;, which hold pointers to dynamically-allocated objects (e.g. if polymorphic behavior is desired)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a1169d0636716bc91e88295831762f5c0a4871" translate="yes" xml:space="preserve">
          <source>as the template argument for a &lt;a href=&quot;template_parameters#Template_type_arguments&quot;&gt;template type parameter&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30363f789e8d9d4ab5c06378e1603590b1792ca4" translate="yes" xml:space="preserve">
          <source>as the trailing return type of a &lt;a href=&quot;function&quot;&gt;function&lt;/a&gt; declaration;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01afeefc117684dedc54bc45cbc916879700e978" translate="yes" xml:space="preserve">
          <source>as used by the functions &lt;code&gt;&lt;a href=&quot;../../io/manip/get_time&quot;&gt;std::get_time()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;get&quot;&gt;get()&lt;/a&gt;&lt;/code&gt;, and the POSIX function &lt;code&gt;strptime()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f370653b09a7388085b11e01a0503f9017a6d0" translate="yes" xml:space="preserve">
          <source>as used by the functions &lt;code&gt;&lt;a href=&quot;../../io/manip/get_time&quot;&gt;std::get_time&lt;/a&gt;&lt;/code&gt;, &lt;a href=&quot;get&quot;&gt;&lt;code&gt;time_get::get&lt;/code&gt;&lt;/a&gt;, and the POSIX function &lt;code&gt;strptime()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48d89784f99553a098f3d31933a9703ba538906" translate="yes" xml:space="preserve">
          <source>as well as with a temporary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386d8b2d6a42dc67f336ebcff0fafc50106b8451" translate="yes" xml:space="preserve">
          <source>as_bytesas_writable_bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96144da105f55975a90cf47935a8ee8d4339904b" translate="yes" xml:space="preserve">
          <source>as_const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25fa281a64c10f8fc9b121f25ff1a1d91fd6d3b" translate="yes" xml:space="preserve">
          <source>asctime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ef31809f8e6b00b30d4d5688627671939aeffb" translate="yes" xml:space="preserve">
          <source>asin(iz)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e776127fc521b96490c99f737dcec578822934" translate="yes" xml:space="preserve">
          <source>asin(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ff7482144e1536a5dd27c437c579556b374e7e" translate="yes" xml:space="preserve">
          <source>asin(std::valarray)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc750b867f9dc58a4f03be277005b693adb6882e" translate="yes" xml:space="preserve">
          <source>asinasinfasinl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c581350d348b743f09268105bbd0a2f88bc12bd5" translate="yes" xml:space="preserve">
          <source>asinh(std::complex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c992c5efc8f80141b44689f0e07c943fb9a30aa8" translate="yes" xml:space="preserve">
          <source>asinhasinhfasinhl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2445be8241aabd34b47e21a9f3208c3878495b50" translate="yes" xml:space="preserve">
          <source>asm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd0fea3648d6d782295c727dde6f9474ad807e4" translate="yes" xml:space="preserve">
          <source>asm declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7340b03bb7b9aab82af131203e8802fb60d86420" translate="yes" xml:space="preserve">
          <source>asm definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171251a266a653d3d53f5329d6dc5632cd3adc4b" translate="yes" xml:space="preserve">
          <source>asm-declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b5daad5073849378993ba34e058d7008293097" translate="yes" xml:space="preserve">
          <source>assert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60544f107576aa75a3a16e2a4d455e8086f18203" translate="yes" xml:space="preserve">
          <source>assertion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3425dfdedf1185af70912e088111c6091a7fae1e" translate="yes" xml:space="preserve">
          <source>assertion_level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9009b730f26e909d049a4a0c3612e3c61160f37f" translate="yes" xml:space="preserve">
          <source>assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123c7f390ae3bb4cb372f85a86af3e52fec74152" translate="yes" xml:space="preserve">
          <source>assign characters to a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26b63d628c9b5679c54e6f8f5ee244932da2d7d" translate="yes" xml:space="preserve">
          <source>assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4b24f666beae0716d8231fd4a447a91d86cf34" translate="yes" xml:space="preserve">
          <source>assignment to an lvalue of type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5d295ba93c5041bec4bbb38c92e3abad57f803" translate="yes" xml:space="preserve">
          <source>assignment-expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d53ad90b91de645bf7c78f313ec203a5331164" translate="yes" xml:space="preserve">
          <source>assigns a &lt;code&gt;bool&lt;/code&gt; to the referenced bit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff8d446809128e891498c5f87b1dc306da81b66" translate="yes" xml:space="preserve">
          <source>assigns a &lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b0594644cfd1aeb70a9138fbb1145e76050815" translate="yes" xml:space="preserve">
          <source>assigns a &lt;code&gt;span&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6157112237fb577238757f4793cfbe93bf845eec" translate="yes" xml:space="preserve">
          <source>assigns a &lt;code&gt;type_index&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b949fd247a2697d7f79143cebb332e9276824c3d" translate="yes" xml:space="preserve">
          <source>assigns a basic_filebuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bb7629d596c7bdc240dac6f2e4e5db8df36cd4" translate="yes" xml:space="preserve">
          <source>assigns a basic_osyncstream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd469b5f42260935819316d68f9d85c76af02d2" translate="yes" xml:space="preserve">
          <source>assigns a basic_stringbuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649ea20066bfceb075ac897576681b0184ebb8fd" translate="yes" xml:space="preserve">
          <source>assigns a basic_syncbuf object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ae3e5f937640bb7e80b43d66b4bfacd0fc9e63" translate="yes" xml:space="preserve">
          <source>assigns a character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9487845d15e0f34199b159d45e1711c025b41f" translate="yes" xml:space="preserve">
          <source>assigns a new target</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4097cae226d06d2ef08f1ee7a4397ff0bc10334" translate="yes" xml:space="preserve">
          <source>assigns a range of elements a certain value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b17450cc09ba65151b2ccdf005db64494bf738e" translate="yes" xml:space="preserve">
          <source>assigns a value to a number of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca122a9fb4f8f2af1063613f56b85f488cbe563" translate="yes" xml:space="preserve">
          <source>assigns a variant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77626411ed8007e0a2a83f6a3772d74ff44f86c4" translate="yes" xml:space="preserve">
          <source>assigns a view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a41f31995d1d683db1ef55ff6eb61eb1aadb474" translate="yes" xml:space="preserve">
          <source>assigns an &lt;code&gt;any&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852a92dc7576000510060e79a178302c1a412864" translate="yes" xml:space="preserve">
          <source>assigns another error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a711623269c1f1d4ef0768c99066c4a1aa72f4" translate="yes" xml:space="preserve">
          <source>assigns another iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcd8c35e91d9654cde78a747fba2bfaea731ecb" translate="yes" xml:space="preserve">
          <source>assigns another path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb900ae246bfa2636c1e780fadd803319c7969f8" translate="yes" xml:space="preserve">
          <source>assigns contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9c17d42da0c520dfc4d344282206bfd362cad3" translate="yes" xml:space="preserve">
          <source>assigns the &lt;code&gt;shared_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92aa453aac1bd940289f2c12a4ad2f93ca194f95" translate="yes" xml:space="preserve">
          <source>assigns the &lt;code&gt;unique_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8f0dadaf9f82cd74b5fe26df08f34d1122ed1a" translate="yes" xml:space="preserve">
          <source>assigns the &lt;code&gt;weak_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5114591b461de594d834113159a03397110d4bb1" translate="yes" xml:space="preserve">
          <source>assigns the contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c11ee463930d3e2fc256c1c612a0438a9789159" translate="yes" xml:space="preserve">
          <source>assigns the contents of one &lt;code&gt;tuple&lt;/code&gt; to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba2e41ff7b29ee213c7c5fbf8f56a19f546b128" translate="yes" xml:space="preserve">
          <source>assigns the results of successive function calls to N elements in a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a500c4df9921b00eb433f0fb656723e6406183" translate="yes" xml:space="preserve">
          <source>assigns the results of successive function calls to every element in a range</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
