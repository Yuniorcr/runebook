<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="5101ac6bc70baa385757f4238ae808cb4b4e76d0" translate="yes" xml:space="preserve">
          <source>9.2 Class members [class.mem](p: 20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbc9408d0b88c9cc103459ae85f3284f486e089" translate="yes" xml:space="preserve">
          <source>9.4 Static members [class.static]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0166fb1be848d500338538518e66d1aba2d1ccf6" translate="yes" xml:space="preserve">
          <source>9.6 Bit-fields [class.bit]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06ef19bcf11daa6aac9ac0b9eb66707bb48f0f3" translate="yes" xml:space="preserve">
          <source>9.7 Nested class declarations [class.nest]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81e1c206530e69d37f47f1ba8f14d8ba5552308" translate="yes" xml:space="preserve">
          <source>91&amp;ndash;96</source>
          <target state="translated">91&amp;ndash;96</target>
        </trans-unit>
        <trans-unit id="9fcb59335a8911dd71f1b2c765ae38026fbc33d9" translate="yes" xml:space="preserve">
          <source>97&amp;ndash;102</source>
          <target state="translated">97&amp;ndash;102</target>
        </trans-unit>
        <trans-unit id="9be5928f326b921b3e517a380934c4ea234b5a24" translate="yes" xml:space="preserve">
          <source>: &lt;a href=&quot;move_constructor&quot;&gt;move constructor&lt;/a&gt;, &lt;a href=&quot;move_operator&quot;&gt;move assignment operator&lt;/a&gt;, or another function overload that implements move semantics can bind to the expression.</source>
          <target state="translated">: &lt;a href=&quot;move_constructor&quot;&gt;move constructor&lt;/a&gt;, &lt;a href=&quot;move_operator&quot;&gt;move assignment operator&lt;/a&gt;, or another function overload that implements move semantics can bind to the expression.</target>
        </trans-unit>
        <trans-unit id="85a6e5804ab6adf67e7a7815e039c34978089a16" translate="yes" xml:space="preserve">
          <source>: &lt;code&gt;&lt;a href=&quot;../memory/auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt;(until C++17)&lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;(since C++11). These pointers guarantee that the delete expression is executed in the situations shown above.</source>
          <target state="translated">: &lt;code&gt;&lt;a href=&quot;../memory/auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt;(until C++17)&lt;code&gt;&lt;a href=&quot;../memory/unique_ptr&quot;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;(since C++11). These pointers guarantee that the delete expression is executed in the situations shown above.</target>
        </trans-unit>
        <trans-unit id="8d0b1691b7162574b524dc8c29da926a93a53b34" translate="yes" xml:space="preserve">
          <source>: For &lt;code&gt;operator,&lt;/code&gt;, the unary &lt;code&gt;operator&amp;amp;&lt;/code&gt;, and the &lt;code&gt;operator-&amp;gt;&lt;/code&gt;, the set of built-in candidates is empty. For other operators built-in candidates are the ones listed in &lt;a href=&quot;expressions#Operators&quot;&gt;built-in operator pages&lt;/a&gt; as long as all operands can be implicitly converted to their parameters. If any built-in candidate has the same parameter list as a non-member candidate that isn't a function template specialization, it is not added to the list of built-in candidates. When the built-in assignment operators are considered, the conversions from their left-hand arguments are restricted: user-defined conversions are not considered.</source>
          <target state="translated">: For &lt;code&gt;operator,&lt;/code&gt;, the unary &lt;code&gt;operator&amp;amp;&lt;/code&gt;, and the &lt;code&gt;operator-&amp;gt;&lt;/code&gt;, the set of built-in candidates is empty. For other operators built-in candidates are the ones listed in &lt;a href=&quot;expressions#Operators&quot;&gt;built-in operator pages&lt;/a&gt; as long as all operands can be implicitly converted to their parameters. If any built-in candidate has the same parameter list as a non-member candidate that isn't a function template specialization, it is not added to the list of built-in candidates. When the built-in assignment operators are considered, the conversions from their left-hand arguments are restricted: user-defined conversions are not considered.</target>
        </trans-unit>
        <trans-unit id="dd9af67ee7d156e51bf03957e07f79b8a92ed2f5" translate="yes" xml:space="preserve">
          <source>: For the operators where &lt;a href=&quot;operators&quot;&gt;operator overloading&lt;/a&gt; permits non-member forms, all declarations found by &lt;a href=&quot;lookup&quot;&gt;unqualified name lookup&lt;/a&gt; of &lt;code&gt;operator@&lt;/code&gt; in the context of the expression (which may involve &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;), except that member function declarations are ignored and do not prevent the lookup from continuing into the next enclosing scope. If both operands of a binary operator or the only operand of a unary operator has enumeration type, the only functions from the lookup set that become non-member candidates are the ones whose parameter has that enumeration type (or reference to that enumeration type)</source>
          <target state="translated">: For the operators where &lt;a href=&quot;operators&quot;&gt;operator overloading&lt;/a&gt; permits non-member forms, all declarations found by &lt;a href=&quot;lookup&quot;&gt;unqualified name lookup&lt;/a&gt; of &lt;code&gt;operator@&lt;/code&gt; in the context of the expression (which may involve &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;), except that member function declarations are ignored and do not prevent the lookup from continuing into the next enclosing scope. If both operands of a binary operator or the only operand of a unary operator has enumeration type, the only functions from the lookup set that become non-member candidates are the ones whose parameter has that enumeration type (or reference to that enumeration type)</target>
        </trans-unit>
        <trans-unit id="9eba742d96da6ffd6bd7d50b9c7948a7f470c8c8" translate="yes" xml:space="preserve">
          <source>: For the six relational operator expressions &lt;code&gt;x==y&lt;/code&gt;, &lt;code&gt;x!=y&lt;/code&gt;, &lt;code&gt;x&amp;lt;y&lt;/code&gt;, &lt;code&gt;x&amp;lt;=y&lt;/code&gt;, &lt;code&gt;x&amp;gt;y&lt;/code&gt;, and &lt;code&gt;x&amp;gt;=y&lt;/code&gt;, all member, non-member, and built-in &lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;'s found are added to the set if &lt;code&gt;x&amp;lt;=&amp;gt;y @ 0&lt;/code&gt; is well-formed (meaning, &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; returns std::*_ordering and @ is one of &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, or &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; returns std::*_equality and @ is one of &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;). Additionally, for the six relational operator expressions &lt;code&gt;x==y&lt;/code&gt;, &lt;code&gt;x!=y&lt;/code&gt;, &lt;code&gt;x&amp;lt;y&lt;/code&gt;, &lt;code&gt;x&amp;lt;=y&lt;/code&gt;, &lt;code&gt;x&amp;gt;y&lt;/code&gt;, and &lt;code&gt;x&amp;gt;=y&lt;/code&gt; as well as the three-way comparison expression &lt;code&gt;x&amp;lt;=&amp;gt;y&lt;/code&gt;, a synthesized candidate with the order of the two parameters reversed is added for each member, non-member, and built-in &lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;'s found if &lt;code&gt;0 @ y &amp;lt;=&amp;gt; x&lt;/code&gt; is well-formed. In each case, rewritten candidates are not considered in the context of the rewritten expression. For all other operators, the rewritten candidate set is empty.</source>
          <target state="translated">: For the six relational operator expressions &lt;code&gt;x==y&lt;/code&gt;, &lt;code&gt;x!=y&lt;/code&gt;, &lt;code&gt;x&amp;lt;y&lt;/code&gt;, &lt;code&gt;x&amp;lt;=y&lt;/code&gt;, &lt;code&gt;x&amp;gt;y&lt;/code&gt;, and &lt;code&gt;x&amp;gt;=y&lt;/code&gt;, all member, non-member, and built-in &lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;'s found are added to the set if &lt;code&gt;x&amp;lt;=&amp;gt;y @ 0&lt;/code&gt; is well-formed (meaning, &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; returns std::*_ordering and @ is one of &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, or &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; returns std::*_equality and @ is one of &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;). Additionally, for the six relational operator expressions &lt;code&gt;x==y&lt;/code&gt;, &lt;code&gt;x!=y&lt;/code&gt;, &lt;code&gt;x&amp;lt;y&lt;/code&gt;, &lt;code&gt;x&amp;lt;=y&lt;/code&gt;, &lt;code&gt;x&amp;gt;y&lt;/code&gt;, and &lt;code&gt;x&amp;gt;=y&lt;/code&gt; as well as the three-way comparison expression &lt;code&gt;x&amp;lt;=&amp;gt;y&lt;/code&gt;, a synthesized candidate with the order of the two parameters reversed is added for each member, non-member, and built-in &lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;'s found if &lt;code&gt;0 @ y &amp;lt;=&amp;gt; x&lt;/code&gt; is well-formed. In each case, rewritten candidates are not considered in the context of the rewritten expression. For all other operators, the rewritten candidate set is empty.</target>
        </trans-unit>
        <trans-unit id="0101779df141a73e444f9935ec236278c9a99119" translate="yes" xml:space="preserve">
          <source>: a directory entry that associates a name with a path, which may or may not exist.</source>
          <target state="translated">: a directory entry that associates a name with a path, which may or may not exist.</target>
        </trans-unit>
        <trans-unit id="2b69b16ff5e372b1e489e7898efec6a1851e956c" translate="yes" xml:space="preserve">
          <source>: a directory entry that associates a name with an existing file. If multiple hard links are supported, the file is removed after the last hard link to it is removed.</source>
          <target state="translated">: a directory entry that associates a name with an existing file. If multiple hard links are supported, the file is removed after the last hard link to it is removed.</target>
        </trans-unit>
        <trans-unit id="a3ecb898fb1a95029df3f4854e2835860070daf9" translate="yes" xml:space="preserve">
          <source>: a file system object that holds data, can be written to, read from, or both. Files have names, attributes, one of which is file type:</source>
          <target state="translated">: a file system object that holds data, can be written to, read from, or both. Files have names, attributes, one of which is file type:</target>
        </trans-unit>
        <trans-unit id="3136885012268b4c4034b3552421d10845e178e5" translate="yes" xml:space="preserve">
          <source>: a file that acts as a container of directory entries, which identify other files (some of which may be other, nested directories). When discussing a particular file, the directory in which it appears as an entry is its</source>
          <target state="translated">: a file that acts as a container of directory entries, which identify other files (some of which may be other, nested directories). When discussing a particular file, the directory in which it appears as an entry is its</target>
        </trans-unit>
        <trans-unit id="f06a368045001e389ffa006d94f3ba9390a5049b" translate="yes" xml:space="preserve">
          <source>: a file that is not one of the other file types.</source>
          <target state="translated">: a file that is not one of the other file types.</target>
        </trans-unit>
        <trans-unit id="dba7255a79d7089d420fe385620052c85766be16" translate="yes" xml:space="preserve">
          <source>: a path that identifies the location of a file relative to some location on the file system. The special path names &lt;code&gt;&quot;.&quot;&lt;/code&gt; (dot, &quot;current directory&quot;) and &lt;code&gt;&quot;..&quot;&lt;/code&gt; (dot-dot, &quot;parent directory&quot;) are relative paths.</source>
          <target state="translated">: a path that identifies the location of a file relative to some location on the file system. The special path names &lt;code&gt;&quot;.&quot;&lt;/code&gt; (dot, &quot;current directory&quot;) and &lt;code&gt;&quot;..&quot;&lt;/code&gt; (dot-dot, &quot;parent directory&quot;) are relative paths.</target>
        </trans-unit>
        <trans-unit id="411880e0edb0761736136ab2a1d13ffdefba474d" translate="yes" xml:space="preserve">
          <source>: a path that unambiguously identifies the location of a file.</source>
          <target state="translated">: a path that unambiguously identifies the location of a file.</target>
        </trans-unit>
        <trans-unit id="ef53d8af93d506c10e18acc68b66c7f951e07b91" translate="yes" xml:space="preserve">
          <source>: a string of characters that names a file. Permissible characters, case sensitivity, maximum length, and the disallowed names are implementation-defined. Names &lt;code&gt;&quot;.&quot;&lt;/code&gt; (dot) and &lt;code&gt;&quot;..&quot;&lt;/code&gt; (dot-dot) have special meaning at library level.</source>
          <target state="translated">: a string of characters that names a file. Permissible characters, case sensitivity, maximum length, and the disallowed names are implementation-defined. Names &lt;code&gt;&quot;.&quot;&lt;/code&gt; (dot) and &lt;code&gt;&quot;..&quot;&lt;/code&gt; (dot-dot) have special meaning at library level.</target>
        </trans-unit>
        <trans-unit id="05e25c286442597f0dd0fb45c8f639ec8bdcc7b6" translate="yes" xml:space="preserve">
          <source>: a user-provided non-member function with the same signature defined anywhere in the program, in any source file, replaces the corresponding implicit version for the entire program. Its declaration does not need to be visible.</source>
          <target state="translated">: a user-provided non-member function with the same signature defined anywhere in the program, in any source file, replaces the corresponding implicit version for the entire program. Its declaration does not need to be visible.</target>
        </trans-unit>
        <trans-unit id="80eb7d37648113f7a279f370bc1d40aaa30bdae3" translate="yes" xml:space="preserve">
          <source>: a user-provided non-member function with the same signature defined anywhere in the program, in any source file, replaces the default version. Its declaration does not need to be visible.</source>
          <target state="translated">: a user-provided non-member function with the same signature defined anywhere in the program, in any source file, replaces the default version. Its declaration does not need to be visible.</target>
        </trans-unit>
        <trans-unit id="91bd707c28739bd1dd978c20f1ee8c4d1e6dfb45" translate="yes" xml:space="preserve">
          <source>: after the execution of the violation handler completes, execution continues normally.</source>
          <target state="translated">: after the execution of the violation handler completes, execution continues normally.</target>
        </trans-unit>
        <trans-unit id="062fc3b0a77f749c06564a2ab5162003e535ec86" translate="yes" xml:space="preserve">
          <source>: an absolute path that includes no symlinks, &lt;code&gt;&quot;.&quot;&lt;/code&gt; or &lt;code&gt;&quot;..&quot;&lt;/code&gt; elements.</source>
          <target state="translated">: an absolute path that includes no symlinks, &lt;code&gt;&quot;.&quot;&lt;/code&gt; or &lt;code&gt;&quot;..&quot;&lt;/code&gt; elements.</target>
        </trans-unit>
        <trans-unit id="e2333e0396d7cbe260ccf7e7daf876aad8c38361" translate="yes" xml:space="preserve">
          <source>: checking is performed for contracts whose contract-level is &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;audit&lt;/code&gt;.</source>
          <target state="translated">: checking is performed for contracts whose contract-level is &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;audit&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="856f16be8087c86dbb490e550d37ce7bca5bdb9e" translate="yes" xml:space="preserve">
          <source>: constructs a &lt;code&gt;shared_ptr&lt;/code&gt; which shares ownership information with the initial value of &lt;code&gt;r&lt;/code&gt;, but holds an unrelated and unmanaged pointer &lt;code&gt;ptr&lt;/code&gt;. If this &lt;code&gt;shared_ptr&lt;/code&gt; is the last of the group to go out of scope, it will call the stored deleter for the object originally managed by &lt;code&gt;r&lt;/code&gt;. However, calling &lt;code&gt;get()&lt;/code&gt; on this &lt;code&gt;shared_ptr&lt;/code&gt; will always return a copy of &lt;code&gt;ptr&lt;/code&gt;. It is the responsibility of the programmer to make sure that this &lt;code&gt;ptr&lt;/code&gt; remains valid as long as this shared_ptr exists, such as in the typical use cases where &lt;code&gt;ptr&lt;/code&gt; is a member of the object managed by &lt;code&gt;r&lt;/code&gt; or is an alias (e.g., downcast) of &lt;code&gt;r.get()&lt;/code&gt;For the second overload taking an rvalue, &lt;code&gt;r&lt;/code&gt; is empty and &lt;code&gt;r.get() == nullptr&lt;/code&gt; after the call.(since C++20)</source>
          <target state="translated">: constructs a &lt;code&gt;shared_ptr&lt;/code&gt; which shares ownership information with the initial value of &lt;code&gt;r&lt;/code&gt;, but holds an unrelated and unmanaged pointer &lt;code&gt;ptr&lt;/code&gt;. If this &lt;code&gt;shared_ptr&lt;/code&gt; is the last of the group to go out of scope, it will call the stored deleter for the object originally managed by &lt;code&gt;r&lt;/code&gt;. However, calling &lt;code&gt;get()&lt;/code&gt; on this &lt;code&gt;shared_ptr&lt;/code&gt; will always return a copy of &lt;code&gt;ptr&lt;/code&gt;. It is the responsibility of the programmer to make sure that this &lt;code&gt;ptr&lt;/code&gt; remains valid as long as this shared_ptr exists, such as in the typical use cases where &lt;code&gt;ptr&lt;/code&gt; is a member of the object managed by &lt;code&gt;r&lt;/code&gt; or is an alias (e.g., downcast) of &lt;code&gt;r.get()&lt;/code&gt;For the second overload taking an rvalue, &lt;code&gt;r&lt;/code&gt; is empty and &lt;code&gt;r.get() == nullptr&lt;/code&gt; after the call.(since C++20)</target>
        </trans-unit>
        <trans-unit id="3bac4007b215775d839b85d15e1a7d15995b82d1" translate="yes" xml:space="preserve">
          <source>: defines the enumeration type but not its enumerators: after this declaration, the type is a complete type and its size is known.  Note: an &lt;a href=&quot;template_specialization&quot;&gt;explicit specialization declaration&lt;/a&gt; of a scoped enumeration member of a class template is the only case where nested-name-specifier appears before identifier(since C++14)</source>
          <target state="translated">: defines the enumeration type but not its enumerators: after this declaration, the type is a complete type and its size is known.  Note: an &lt;a href=&quot;template_specialization&quot;&gt;explicit specialization declaration&lt;/a&gt; of a scoped enumeration member of a class template is the only case where nested-name-specifier appears before identifier(since C++14)</target>
        </trans-unit>
        <trans-unit id="2367965af0b25bed4e457a289555e1ccc535b0d0" translate="yes" xml:space="preserve">
          <source>: first as if expression were an rvalue expression (thus it may select the move constructor), and if no suitable conversion is available, or if the type of the first parameter of the selected constructor is not an rvalue reference to the object's type (possibly cv-qualified), overload resolution is performed a second time, with expression considered as an lvalue (so it may select the copy constructor taking a reference to non-const).</source>
          <target state="translated">: first as if expression were an rvalue expression (thus it may select the move constructor), and if no suitable conversion is available, or if the type of the first parameter of the selected constructor is not an rvalue reference to the object's type (possibly cv-qualified), overload resolution is performed a second time, with expression considered as an lvalue (so it may select the copy constructor taking a reference to non-const).</target>
        </trans-unit>
        <trans-unit id="4dbdd358169a00ed7be305ad974e39f6d1c55f8d" translate="yes" xml:space="preserve">
          <source>: if &lt;code&gt;T1&lt;/code&gt; is a complete class or a class currently being defined, the set of member candidates is the result of &lt;a href=&quot;lookup&quot;&gt;qualified name lookup&lt;/a&gt; of &lt;code&gt;T1::operator@&lt;/code&gt;. In all other cases, the set of member candidates is empty.</source>
          <target state="translated">: if &lt;code&gt;T1&lt;/code&gt; is a complete class or a class currently being defined, the set of member candidates is the result of &lt;a href=&quot;lookup&quot;&gt;qualified name lookup&lt;/a&gt; of &lt;code&gt;T1::operator@&lt;/code&gt;. In all other cases, the set of member candidates is empty.</target>
        </trans-unit>
        <trans-unit id="88d8bee3b0c68934f526c1492f65fb3859ea7186" translate="yes" xml:space="preserve">
          <source>: if an exception is thrown from a template parameter (e.g. from the &lt;code&gt;Compare&lt;/code&gt; function object of &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt; or from the constructor of &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr/make_shared&quot;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;), it is propagated, unchanged, to the caller.</source>
          <target state="translated">: if an exception is thrown from a template parameter (e.g. from the &lt;code&gt;Compare&lt;/code&gt; function object of &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt; or from the constructor of &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../memory/shared_ptr/make_shared&quot;&gt;std::make_shared&lt;/a&gt;&lt;/code&gt;), it is propagated, unchanged, to the caller.</target>
        </trans-unit>
        <trans-unit id="098bdc1d050c8c5f24b036c11c5d8eb42936420d" translate="yes" xml:space="preserve">
          <source>: if the result of a signed conversion does not start with a sign character, or is empty, space is prepended to the result. It is ignored if &lt;code&gt;+&lt;/code&gt; flag is present.</source>
          <target state="translated">: if the result of a signed conversion does not start with a sign character, or is empty, space is prepended to the result. It is ignored if &lt;code&gt;+&lt;/code&gt; flag is present.</target>
        </trans-unit>
        <trans-unit id="b5a1e78075a82e5982c2689b96954ff3886ee8d1" translate="yes" xml:space="preserve">
          <source>: it's possible to determine whether the expression refers to the same entity as another expression, such as by comparing addresses of the objects or the functions they identify (obtained directly or indirectly);</source>
          <target state="translated">: it's possible to determine whether the expression refers to the same entity as another expression, such as by comparing addresses of the objects or the functions they identify (obtained directly or indirectly);</target>
        </trans-unit>
        <trans-unit id="d552209d55fa8c5ef1fd2a3e38529b60384625b7" translate="yes" xml:space="preserve">
          <source>: no contract checking is performed.</source>
          <target state="translated">: no contract checking is performed.</target>
        </trans-unit>
        <trans-unit id="53af4593f9fc4b6937126110ff5ca1136e3206b7" translate="yes" xml:space="preserve">
          <source>: no reads or writes in the current thread can be reordered after this store. All writes in the current thread are visible in other threads that acquire the same atomic variable (see &lt;a href=&quot;memory_order#Release-Acquire_ordering&quot;&gt;Release-Acquire ordering&lt;/a&gt; below) and writes that carry a dependency into the atomic variable become visible in other threads that consume the same atomic (see &lt;a href=&quot;memory_order#Release-Consume_ordering&quot;&gt;Release-Consume ordering&lt;/a&gt; below).</source>
          <target state="translated">: no reads or writes in the current thread can be reordered after this store. All writes in the current thread are visible in other threads that acquire the same atomic variable (see &lt;a href=&quot;memory_order#Release-Acquire_ordering&quot;&gt;Release-Acquire ordering&lt;/a&gt; below) and writes that carry a dependency into the atomic variable become visible in other threads that consume the same atomic (see &lt;a href=&quot;memory_order#Release-Consume_ordering&quot;&gt;Release-Consume ordering&lt;/a&gt; below).</target>
        </trans-unit>
        <trans-unit id="e583dfe63fdf3df15f94bf3fba5d54b3236ee0b0" translate="yes" xml:space="preserve">
          <source>: sequence of elements that identifies a file. It begins with an optional root-name (e.g. &lt;code&gt;&quot;C:&quot;&lt;/code&gt; or &lt;code&gt;&quot;//server&quot;&lt;/code&gt; on Windows), followed by an optional root-directory (e.g. &lt;code&gt;&quot;/&quot;&lt;/code&gt; on Unix), followed by a sequence of zero or more file names (all but last of which have to be directories or links to directories). The native format (e.g. which characters are used as separators) and character encoding of the string representation of a path (the</source>
          <target state="translated">: sequence of elements that identifies a file. It begins with an optional root-name (e.g. &lt;code&gt;&quot;C:&quot;&lt;/code&gt; or &lt;code&gt;&quot;//server&quot;&lt;/code&gt; on Windows), followed by an optional root-directory (e.g. &lt;code&gt;&quot;/&quot;&lt;/code&gt; on Unix), followed by a sequence of zero or more file names (all but last of which have to be directories or links to directories). The native format (e.g. which characters are used as separators) and character encoding of the string representation of a path (the</target>
        </trans-unit>
        <trans-unit id="52dc19081344c588947a1a832a7553115f5f77cb" translate="yes" xml:space="preserve">
          <source>: the object or reference being initialized, the left-hand side of the assignment, function or operator parameter, the return type of a function, the target type of a cast, or the type of the template parameter, respectively.</source>
          <target state="translated">: the object or reference being initialized, the left-hand side of the assignment, function or operator parameter, the return type of a function, the target type of a cast, or the type of the template parameter, respectively.</target>
        </trans-unit>
        <trans-unit id="afe1b7a5faca0834a20e5fd47bd06da4611025b5" translate="yes" xml:space="preserve">
          <source>: the promise gives up its reference to the shared state. If this was the last such reference, the shared state is destroyed. Unless this was a shared state created by &lt;code&gt;&lt;a href=&quot;async&quot;&gt;std::async&lt;/a&gt;&lt;/code&gt; which is not yet ready, this operation does not block.</source>
          <target state="translated">: the promise gives up its reference to the shared state. If this was the last such reference, the shared state is destroyed. Unless this was a shared state created by &lt;code&gt;&lt;a href=&quot;async&quot;&gt;std::async&lt;/a&gt;&lt;/code&gt; which is not yet ready, this operation does not block.</target>
        </trans-unit>
        <trans-unit id="1e8b69b6cea6a349c9018ba94e1a2fb5260774d3" translate="yes" xml:space="preserve">
          <source>: the promise stores the exception of type &lt;code&gt;&lt;a href=&quot;future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; with error code &lt;code&gt;&lt;a href=&quot;future_errc&quot;&gt;std::future_errc::broken_promise&lt;/a&gt;&lt;/code&gt;, makes the shared state</source>
          <target state="translated">: the promise stores the exception of type &lt;code&gt;&lt;a href=&quot;future_error&quot;&gt;std::future_error&lt;/a&gt;&lt;/code&gt; with error code &lt;code&gt;&lt;a href=&quot;future_errc&quot;&gt;std::future_errc::broken_promise&lt;/a&gt;&lt;/code&gt;, makes the shared state</target>
        </trans-unit>
        <trans-unit id="2835b37579d9bcef82f0186bf593720f0f83f715" translate="yes" xml:space="preserve">
          <source>: the promise stores the result or the exception in the shared state. Marks the state ready and unblocks any thread waiting on a future associated with the shared state.</source>
          <target state="translated">: the promise stores the result or the exception in the shared state. Marks the state ready and unblocks any thread waiting on a future associated with the shared state.</target>
        </trans-unit>
        <trans-unit id="81d4d71c33f2d15edf098ef75409ff056b2f423c" translate="yes" xml:space="preserve">
          <source>: the values of all memory locations in the program that were modified by side effects of the operations of the atomic block are restored to the values they had at the time the start of the atomic block was executed, and the exception continues stack unwinding as usual.</source>
          <target state="translated">: the values of all memory locations in the program that were modified by side effects of the operations of the atomic block are restored to the values they had at the time the start of the atomic block was executed, and the exception continues stack unwinding as usual.</target>
        </trans-unit>
        <trans-unit id="7d8470258107f187c90f568487149601e63b55e9" translate="yes" xml:space="preserve">
          <source>: they may be stored in read-only storage (such as &lt;code&gt;.rodata&lt;/code&gt;) or combined with other string literals:</source>
          <target state="translated">: they may be stored in read-only storage (such as &lt;code&gt;.rodata&lt;/code&gt;) or combined with other string literals:</target>
        </trans-unit>
        <trans-unit id="d5ad36c2515965d2ced111eb19ec24bbc28a0ebc" translate="yes" xml:space="preserve">
          <source>: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.</source>
          <target state="translated">: two evaluations of such an expression with the same input objects must have equal outputs absent any explicit intervening modification of those input objects.</target>
        </trans-unit>
        <trans-unit id="f21e403dcab99643055888fe2a4ebbcf1d2fac87" translate="yes" xml:space="preserve">
          <source>: under certain circumstances they are defined by the compiler even if not defined by the user. They are:</source>
          <target state="translated">: under certain circumstances they are defined by the compiler even if not defined by the user. They are:</target>
        </trans-unit>
        <trans-unit id="852ea65e8a3468d6754d80ae01ca474fab5d22d6" translate="yes" xml:space="preserve">
          <source>::operator=</source>
          <target state="translated">::operator=</target>
        </trans-unit>
        <trans-unit id="2d14ab97cc3dc294c51c0d6814f4ea45f4b4e312" translate="yes" xml:space="preserve">
          <source>;</source>
          <target state="translated">;</target>
        </trans-unit>
        <trans-unit id="decab270ef9eca1a263a3df0e85091545b324b36" translate="yes" xml:space="preserve">
          <source>; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">; otherwise &lt;code&gt;false&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c25b1c2e2cad1a66c0818fc3b2b613da7566a934" translate="yes" xml:space="preserve">
          <source>; otherwise returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">; otherwise returns &lt;code&gt;false&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="949e702c4cbd182981cd59f4bd1c9188c4a48f7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../../language/noexcept_spec&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt; specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46c8b61d47d498c5d8cfa971a0614c8dfe03b86" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../language/direct_initialization&quot;&gt;Direct-initializes&lt;/a&gt; the contained value as if by direct non-list-initialization from &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t)&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;sizeof...(Types) &amp;gt; 0&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;U&amp;gt;&lt;/code&gt;(until C++20)&lt;code&gt;&lt;a href=&quot;../../types/remove_cvref&quot;&gt;std::remove_cvref_t&lt;/a&gt;&amp;lt;U&amp;gt;&lt;/code&gt;(since C++20) is neither the same type as &lt;code&gt;variant&lt;/code&gt;, nor a specialization of &lt;code&gt;&lt;a href=&quot;../in_place&quot;&gt;std::in_place_type_t&lt;/a&gt;&lt;/code&gt;, nor a specialization of &lt;code&gt;&lt;a href=&quot;../in_place&quot;&gt;std::in_place_index_t&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T_j, T&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, and the expression &lt;code&gt;F(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;T&amp;gt;(t))&lt;/code&gt; (with F being the above-mentioned set of imaginary functions) is well formed. This constructor is a constexpr constructor if T_j's selected constructor is a constexpr constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac485264da41030461c6ca92d8cd120cbe75d566" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../language/noexcept_spec&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt; specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f37efbfca5dd59fbebc2f2c46c691347876536" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../language/variadic_arguments&quot;&gt;variable argument list&lt;/a&gt; containing the data to print</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed92572429829f955cd406bdf6d37c8e1f014c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; to the beginning of the target character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a470e1ba4257e4373e377309358f6468367ba34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; to the end of the target character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470da5a0a461c53c92a70055551ae6e8e208b608" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt; object (function object, pointer to function, reference to function, pointer to member function, or pointer to data member) that will be bound to some arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e94ee52238999a14197a2d89ef5dd6ba43bab0b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt; object to be invoked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed981095b87bf4dd1be9af7e4f992728c6e5f3e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt; object to execute in the new thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd4f13ac4811b134442c8c0f525410342e6b2f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; and &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; reference wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf5177306e68c54176b25e5c41412b49c523573" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../numeric/complex/operator_ltltgtgt&quot;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;(std::complex&amp;lt;&amp;gt;)&lt;/code&gt;&lt;/a&gt; if the function fails to extract a valid complex number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2675b43eea935ef1d9dfa03790ca9a257e10409" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../string/basic_string/operator_ltltgtgt&quot;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;(std::basic_string&amp;lt;&amp;gt;)&lt;/code&gt;&lt;/a&gt; if the function extracts no characters from the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37923f08e67f6154f508eb717765ae5709872ae0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../utility/bitset/operator_ltltgtgt2&quot;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;(std::bitset&amp;lt;&amp;gt;)&lt;/code&gt;&lt;/a&gt; if the function extracts no characters from the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2d381bd37256e7d2ac003c724661620dbc6462" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_fstream/close&quot;&gt;&lt;code&gt;basic_fstream::close&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../basic_ifstream/close&quot;&gt;&lt;code&gt;basic_ifstream::close&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../basic_ofstream/close&quot;&gt;&lt;code&gt;basic_ofstream::close&lt;/code&gt;&lt;/a&gt; if the file cannot be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7dcc2b886f704df37e08556bf96227f2cb0e13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_fstream/open&quot;&gt;&lt;code&gt;basic_fstream::open&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../basic_ifstream/open&quot;&gt;&lt;code&gt;basic_ifstream::open&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../basic_ofstream/open&quot;&gt;&lt;code&gt;basic_ofstream::open&lt;/code&gt;&lt;/a&gt; if the file cannot be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a134c36e1ec2093f36fe9d90d87ac3976cc527f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_ios/init&quot;&gt;&lt;code&gt;basic_ios::init&lt;/code&gt;&lt;/a&gt; when called to initialize a stream with a null pointer for &lt;code&gt;rdbuf()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6563dec7a705d04e6a53e541b61fde9980c3b96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_istream/getline&quot;&gt;&lt;code&gt;basic_istream::getline&lt;/code&gt;&lt;/a&gt;, if it extracts no characters, if it fills in the provided buffer without encountering the delimiter, or if the provided buffer size is less than 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7ef28652df2702fe2972e5ff1871c1948affe7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_istream/putback&quot;&gt;&lt;code&gt;basic_istream::putback&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../basic_istream/unget&quot;&gt;&lt;code&gt;basic_istream::unget&lt;/code&gt;&lt;/a&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605c76c6bff6b89356534add0cb230f3188dcfb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_istream/putback&quot;&gt;&lt;code&gt;basic_istream::putback&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../basic_istream/unget&quot;&gt;&lt;code&gt;basic_istream::unget&lt;/code&gt;&lt;/a&gt; when called on a stream with a null &lt;code&gt;rdbuf()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9eedfdce49f9637c8d6b3e9d58efae44b2e6e34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_istream/read&quot;&gt;&lt;code&gt;basic_istream::read&lt;/code&gt;&lt;/a&gt;, if the end-of-file condition occurs on the input stream before all requested characters could be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a5170635e4ed4db7a91e6901093f76815d4d22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_istream/seekg&quot;&gt;&lt;code&gt;basic_istream::seekg&lt;/code&gt;&lt;/a&gt; on failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd3f6bce4318f50537da63db88d57fffb5284a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_istream/sync&quot;&gt;&lt;code&gt;basic_istream::sync&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../basic_ostream/flush&quot;&gt;&lt;code&gt;basic_ostream::flush&lt;/code&gt;&lt;/a&gt;, and every output function on a &lt;code&gt;unitbuf&lt;/code&gt; output stream, if &lt;code&gt;rdbuf()-&amp;gt;pubsync()&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ab69fc8f6e2946ef907c7e4a9a3fdd46a4a719" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_ostream/operator_ltlt&quot;&gt;&lt;code&gt;basic_ostream::operator&amp;lt;&amp;lt;(basic_streambuf*)&lt;/code&gt;&lt;/a&gt; when a null pointer is passed as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06378da2ceb65150955076c72f3ef18e615bdaf1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_ostream/operator_ltlt2&quot;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;(basic_ostream&amp;amp;, char)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../basic_ostream/operator_ltlt2&quot;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;(basic_ostream&amp;amp;, char*)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edce484c9d8da49fb6e389768841eac6a70216e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_ostream/put&quot;&gt;&lt;code&gt;basic_ostream::put&lt;/code&gt;&lt;/a&gt; if it fails to insert a character into the output stream, for any reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d716485b41f05f5140b7d3cd3c0233f865b87006" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_ostream/tellp&quot;&gt;&lt;code&gt;basic_ostream::tellp&lt;/code&gt;&lt;/a&gt; on failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d8692ba884a7b4abf4ffbcc948f79a375a9ea4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../basic_ostream/write&quot;&gt;&lt;code&gt;basic_ostream::write&lt;/code&gt;&lt;/a&gt; if it fails to insert a character into the output stream, for any reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d17684fddde554819da9e03d38e11b4fa7770b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../chrono/ambiguous_local_time&quot;&gt;&lt;code&gt;ambiguous_local_time&lt;/code&gt;&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;../chrono/ambiguous_local_time&quot;&gt;&lt;code&gt;ambiguous_local_time&lt;/code&gt;&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="e0acbcf81880c418bf6dc4bdb50f71afcb5f77ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../chrono/nonexistent_local_time&quot;&gt;&lt;code&gt;nonexistent_local_time&lt;/code&gt;&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;../chrono/nonexistent_local_time&quot;&gt;&lt;code&gt;nonexistent_local_time&lt;/code&gt;&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="92e5de602fe94a2db862d49c4a618f7f9825ce47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../classes&quot;&gt;class/struct/union&lt;/a&gt;: &lt;code&gt;struct [[deprecated]] S;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e3b81a30050f3e43a60d2ede21c07428dcc0e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../classes&quot;&gt;class/struct/union&lt;/a&gt;: &lt;code&gt;struct [[maybe_unused]] S;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868fceedaaf10cdb3ff1f4cc39c23d07ab544452" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../container/array&quot;&gt;&lt;code&gt;array::iterator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../container/array&quot;&gt;&lt;code&gt;array::const_iterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd4b7a416343b2619a3eb2d11a3d6f836943c7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../container/array&quot;&gt;&lt;code&gt;array::iterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../container/array&quot;&gt;&lt;code&gt;array::iterator&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1a82b7dff47d2d616bdf2faa08c4aec1571c1208" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../container/span&quot;&gt;&lt;code&gt;span::iterator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../container/span&quot;&gt;&lt;code&gt;span::const_iterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56a1313261c378e2644fb4d85206b90b00a4944" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../container/vector&quot;&gt;&lt;code&gt;vector::iterator&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;value_type&lt;/code&gt; other than &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f465cb14212f5ecf768fb13f35a03ed746cf2a74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../data_members&quot;&gt;non-static data member&lt;/a&gt;: &lt;code&gt;union U { [[deprecated]] int n; };&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e0a4b55522999a07519957c8b7e75febb36667" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../data_members&quot;&gt;non-static data member&lt;/a&gt;: &lt;code&gt;union U { [[maybe_unused]] int n; };&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278ea5e4bce0dfd01c4ce1ddfce4104d080065ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../enum&quot;&gt;enumeration&lt;/a&gt;: &lt;code&gt;enum [[deprecated]] E {};&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de5a796cc7289b4b90105338dc72541deccee99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../enum&quot;&gt;enumeration&lt;/a&gt;: &lt;code&gt;enum [[maybe_unused]] E {};&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68fb2339c01e5178436f55134e8f151a56abd2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../filesystem/filesystem_error&quot;&gt;&lt;code&gt;filesystem::filesystem_error&lt;/code&gt;&lt;/a&gt;(C++17)</source>
          <target state="translated">&lt;a href=&quot;../filesystem/filesystem_error&quot;&gt;&lt;code&gt;filesystem::filesystem_error&lt;/code&gt;&lt;/a&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="53f3124534bd1c6ce66fbd23d5e533979d10f327" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../function&quot;&gt;function&lt;/a&gt;: &lt;code&gt;[[deprecated]] void f();&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fbf17e1f3e5c4cafec76764a86cd8307d75dba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../function&quot;&gt;function&lt;/a&gt;: &lt;code&gt;[[maybe_unused]] void f();&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4204a29b53c7b03b6cfb23181ec970b2c1b4ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/ranges&quot;&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/ranges&quot;&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4e062853b56e62c73fd5a2156e9210d713e1b3f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc7911182a5310a2189c15acd0a12be170138068" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f623ab9142da78474cd7b5fefd185c5c033909db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/atomic&quot;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/filesystem&quot;&gt;&lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/istream&quot;&gt;&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/limits&quot;&gt;&lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/locale&quot;&gt;&lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/ostream&quot;&gt;&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/atomic&quot;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/filesystem&quot;&gt;&lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/istream&quot;&gt;&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/limits&quot;&gt;&lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/locale&quot;&gt;&lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/ostream&quot;&gt;&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2635be3d9a3e9bd89fc68020fc666707adf9e29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d2e30fb43ad7d71633e0ff461efd0609b7fd9942" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7a880f489423bb2c643e02883b62dea841dd399" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cd047f961afa09f31287f8be1795ddc006480e85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/type_traits&quot;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/type_traits&quot;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8d929a4c44668705602a5a57915dc209423eb8d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0991c0064791ccec5b2caf7ae94300ce9e94af1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/regex&quot;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/regex&quot;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff35fd49193281a96f450a0431cbedb75cf85916" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61a32bc69a32a1365381a1278aef268d71d00a4c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="812a5467be17fe572d240798337df80ba8140e13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4a2136d0d8864c601e3108fd9aa7f93a128d52fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/scoped_allocator&quot;&gt;&lt;code&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/scoped_allocator&quot;&gt;&lt;code&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="156b2925c0d5745785092f4796325531ad0148a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db710ad710d44fcee4987ae89f2b07bfc64ae09e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f74a258f9aa70fe8207bc54f91b449d85d3bbb3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8b5d5427b839e28530138989e2580a227ebd0c6e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2a3ff34d1a823dc0893b59bd28780c674cfc6bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_istream/putback&quot;&gt;&lt;code&gt;basic_istream::putback&lt;/code&gt;&lt;/a&gt;, except that it first clears &lt;code&gt;eofbit&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b2d9c9b5bb9ed569c12cd41b9f17699f8e862e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_istream/seekg&quot;&gt;&lt;code&gt;basic_istream::seekg&lt;/code&gt;&lt;/a&gt;, except that it first clears &lt;code&gt;eofbit&lt;/code&gt; and does not modify gcount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4a4278088fc137730484731044e1f7dec1e125" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_istream/sync&quot;&gt;&lt;code&gt;basic_istream::sync&lt;/code&gt;&lt;/a&gt;, except that it does not modify gcount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e93599e3486414efa0c4ffc6b965868e158902" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_istream/tellg&quot;&gt;&lt;code&gt;basic_istream::tellg&lt;/code&gt;&lt;/a&gt;, except that it does not modify gcount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719d4779444778c8c2af34e5609a1955d090a1c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_istream/unget&quot;&gt;&lt;code&gt;basic_istream::unget&lt;/code&gt;&lt;/a&gt;, except that it first clears &lt;code&gt;eofbit&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da4ae31b37ddc0aa6cfd86bd8f677af1dda73a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_ostream/seekp&quot;&gt;&lt;code&gt;basic_ostream::seekp&lt;/code&gt;&lt;/a&gt; (except calls pubseekoff or pubseekpos instead of output)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9548a715b30103717cb5f18d9172a8630d2d58f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/basic_ostream/tellp&quot;&gt;&lt;code&gt;basic_ostream::tellp&lt;/code&gt;&lt;/a&gt; (except calls pubseekoff instead of output)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5c4db26a05d088ada8c6d938bc7d811856fba1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/ios_base/failure&quot;&gt;&lt;code&gt;ios_base::failure&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;../io/ios_base/failure&quot;&gt;&lt;code&gt;ios_base::failure&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="a460ef45ecfa20ce74c831526c9fd9676eb75b0d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../io/ios_base/failure&quot;&gt;&lt;code&gt;ios_base::failure&lt;/code&gt;&lt;/a&gt;(until C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9071554b4cd092ee0becde4278462b2cc131f0bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ios_base/iostate&quot;&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/a&gt; flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ad931c63d6b5b443618fdf83530252ed6dc100" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/alignas&quot;&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/alignas&quot;&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="15353a58fe11a82f44c94d806917317a4a7d64fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/alignof&quot;&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/alignof&quot;&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cd303f6dd73e3dd29a9d075ffe04e58d28722753" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/and_eq&quot;&gt;&lt;code&gt;and_eq&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/bitand&quot;&gt;&lt;code&gt;bitand&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/bitor&quot;&gt;&lt;code&gt;bitor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/compl&quot;&gt;&lt;code&gt;compl&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/not&quot;&gt;&lt;code&gt;not&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/not_eq&quot;&gt;&lt;code&gt;not_eq&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/or_eq&quot;&gt;&lt;code&gt;or_eq&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/xor&quot;&gt;&lt;code&gt;xor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/xor_eq&quot;&gt;&lt;code&gt;xor_eq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3beab4d589528f5abaf01849325da24f845f0b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/register&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keywords/static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/thread_local&quot;&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/mutable&quot;&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9969de1fc51deb2bca7cfc2025374b45ca984601" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="645e2b3b4d678174e7c40dd173834af0211f3571" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/char&quot;&gt;char&lt;/a&gt;, &lt;a href=&quot;../keyword/char8_t&quot;&gt;char8_t&lt;/a&gt;(since C++20), &lt;a href=&quot;../keyword/char16_t&quot;&gt;char16_t&lt;/a&gt;, &lt;a href=&quot;../keyword/char32_t&quot;&gt;char32_t&lt;/a&gt;(since C++11), &lt;a href=&quot;../keyword/wchar_t&quot;&gt;wchar_t&lt;/a&gt;, &lt;a href=&quot;../keyword/bool&quot;&gt;bool&lt;/a&gt;, &lt;a href=&quot;../keyword/short&quot;&gt;short&lt;/a&gt;, &lt;a href=&quot;../keyword/int&quot;&gt;int&lt;/a&gt;, &lt;a href=&quot;../keyword/long&quot;&gt;long&lt;/a&gt;, &lt;a href=&quot;../keyword/signed&quot;&gt;signed&lt;/a&gt;, &lt;a href=&quot;../keyword/unsigned&quot;&gt;unsigned&lt;/a&gt;, &lt;a href=&quot;../keyword/float&quot;&gt;float&lt;/a&gt;, &lt;a href=&quot;../keyword/double&quot;&gt;double&lt;/a&gt;, &lt;a href=&quot;../keyword/void&quot;&gt;void&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8273500d3f757fabc96d33740037b798091201ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/concept&quot;&gt;&lt;code&gt;concept&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/requires&quot;&gt;&lt;code&gt;requires&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab38dfafc7d37db8adba31d56f608d8fc45df69" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/const&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/volatile&quot;&gt;&lt;code&gt;volatile&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/mutable&quot;&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e44b0b07e8ee3900959d33ad00c5c3a7d68462" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/const_cast&quot;&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/const_cast&quot;&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3ff1626c68476389b83858233c3fcc00e562c8f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/consteval&quot;&gt;&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/consteval&quot;&gt;&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b5b53f360a676e62e46f0d53febae092031945ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/constexpr&quot;&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/constexpr&quot;&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d1250e8660bdf765403100db94ac3081a8bb4465" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0be336ca8878e9c6439b5021432f637c940de427" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4a7cc845c84a03bacb0cab8c12d5113c42fd9516" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7bf84519f284a7b4934b9c8a6d9ad2c68fda6c33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/do&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799138d759561a8197d94d26b7c7a82a9a024608" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d8153ecbb1b3bd4157835e7c61a910d729b44565" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../keyword/register&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; storage class specifiers are not allowed;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa09a6efb1dac6532b669675229d886c37585c0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0b6ee73ab451927d1de5ff576e7d85e10a8695fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/goto&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/goto&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0d8093d873dd5c5bc5368ea62e1544914ab4f04d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a21ae5db0dbcdc2c0438157bc6611fee0c5e1cab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/noexcept&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/noexcept&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0ff13866b770999cc9aff822f73a17c70b1efeb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/nullptr&quot;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/nullptr&quot;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8c625d77271bfb701e9890910432749d035c6f0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6701641091af52c292de0f1d1a2df3aae83a6ee0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/co_return&quot;&gt;&lt;code&gt;co_return&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524770408b8abdcfa8d80fd0bef6aa702df8bd62" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b05d8d52cf772c7371355812e8359d5497169aeb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7595a18fdf4d35d2e0e53478b73d90df0ea71b8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/case&quot;&gt;&lt;code&gt;case&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c91c36c425f87ed3cc16b4906b67f13baa70fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/thread_local&quot;&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/a&gt; storage class specifier is not allowed (but it is allowed for &lt;a href=&quot;static&quot;&gt;static&lt;/a&gt; data members);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47019e23d50e09c69d9566b010e8d07bc77903ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="31f240d0539ddeccd1525bf40686c9b383f2d0a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/catch&quot;&gt;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8328b2487115eb2e8014b9f6bba0265dbbd499" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/typedef&quot;&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/typedef&quot;&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="677e14c4a96fd86215710aaaee0e4ab792cd0bf2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6f8d7803e9ec4ebc4fe66156b905d70c7d3e63ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/void&quot;&gt;&lt;code&gt;void&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/true&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/false&quot;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/wchar_t&quot;&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/char8_t&quot;&gt;&lt;code&gt;char8_t&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/char16_t&quot;&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/char32_t&quot;&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/short&quot;&gt;&lt;code&gt;short&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/long&quot;&gt;&lt;code&gt;long&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/signed&quot;&gt;&lt;code&gt;signed&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/unsigned&quot;&gt;&lt;code&gt;unsigned&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/double&quot;&gt;&lt;code&gt;double&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ef9676de1782c6ccaabb678fbe09c035408e12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keyword/while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../keyword/while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="61eb98015c0c6dcca32f42f69ce58ab6ffca4d99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../keywords/if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/else&quot;&gt;&lt;code&gt;else&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyword/constexpr&quot;&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b1231eed49332ab643eaf2ddfb0f243dbcecc6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/access&quot;&gt;Access checks&lt;/a&gt; are performed as if from a context unrelated to either type. Only the validity of the immediate context of the expression in the return statement (including conversions to the return type) is considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f751a38585412be3ecd452d04e41495a38dd11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/alignas&quot;&gt; &lt;code&gt;alignas&lt;/code&gt; specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b88496903038181b51914d0be1f13607a8ab45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/alignof&quot;&gt; &lt;code&gt;alignof&lt;/code&gt; operator&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8339fd1f571eba1b8c12a073c542734a3a9c32" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/break&quot;&gt; &lt;code&gt;break&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f1f6e12206f696a2e98daf69f4defe515c70fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/class_template&quot;&gt;explicit template instantiation declaration&lt;/a&gt; (or &quot;extern template&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e790bf1f058208ba04bb58a18a90493e937b343c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/const_cast&quot;&gt; &lt;code&gt;const_cast&lt;/code&gt; type conversion expression&lt;/a&gt;: as the declaration of the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e26bfc4daa931b06137c4c7d59bc114e3d94388" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/consteval&quot;&gt; &lt;code&gt;consteval&lt;/code&gt; declaration specifier&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec20a75b5121d578dc5fb66e661cf9dd4be911cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/constexpr&quot;&gt; &lt;code&gt;constexpr&lt;/code&gt; declaration specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325440901d65cd57f1326fd579a2581d04e5ca6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/continue&quot;&gt; &lt;code&gt;continue&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efd1606ac6493bcd27ee55114c64533977dfdf4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/coroutines&quot;&gt; &lt;code&gt;co_await&lt;/code&gt; expression&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e4551c1dce0520a5f83709e5a5731649c8700c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/coroutines&quot;&gt; yields a value from a coroutine &lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c47788df25de8e83edba4edbb64456a469d5b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/destructor#Trivial_destructor&quot;&gt;Trivial&lt;/a&gt; non-deleted destructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1a600bab0c7321f919763f091243c870bd28d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/do&quot;&gt; &lt;code&gt;do-while&lt;/code&gt; loop&lt;/a&gt;: as the declaration of the loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ce918ca5b286a71d38a6efffef89a790290cde" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/do&quot;&gt; &lt;code&gt;do-while&lt;/code&gt; loop&lt;/a&gt;: as the declaration of the terminating condition of the loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bca77bf518f24219be8ee80681ba867cc235bf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/dynamic_cast&quot;&gt; &lt;code&gt;dynamic_cast&lt;/code&gt; type conversion expression&lt;/a&gt;: as the declaration of the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761895993db11d49ed27e704de004997fd5abf8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/for&quot;&gt; &lt;code&gt;for&lt;/code&gt; loop&lt;/a&gt;: as the declaration of the loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3347c73c2dffbe1748f2fe3c8a0b9571f0e4afe0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/function&quot;&gt; function declaration&lt;/a&gt; with trailing return type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae0e06348eb9c113983d76c7d7a501f4a27979f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/function#Parameter_list&quot;&gt; parameter list&lt;/a&gt; of a function with no parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adec85eccd82cb762d7113862ff572402ea55b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/goto&quot;&gt; &lt;code&gt;goto&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20eaee52dbe47635259eeac9905c39bb22bd067a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/if&quot;&gt; &lt;code&gt;if&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the &lt;code&gt;if&lt;/code&gt; statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d7750ecfd5c9d1dd33b9cd58c55069b3e2bbbb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/if&quot;&gt; &lt;code&gt;if&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the alternative branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1f14009efb64021d88b2393c3ccb443b8daf68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/if&quot;&gt; constexpr if statement&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb8429d74b3b59fa07cb68925e15d0295ee7c9f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/implicit_cast&quot;&gt;implicitly convertible&lt;/a&gt; to &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5050814959e7d1f185d1d7138ab4675d31a04871" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/inline&quot;&gt; &lt;code&gt;inline&lt;/code&gt; specifier&lt;/a&gt; for functions and variables(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6903fb786c58ae50b4eb832fa2c95fe2e55e87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/lambda&quot;&gt; &lt;i&gt;lambda-declarator&lt;/i&gt; &lt;/a&gt; that removes &lt;code&gt;const&lt;/code&gt; qualification from parameters captured by copy (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985787c5576b70fb2da69404ed6a00c669b649e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/language_linkage&quot;&gt;language linkage&lt;/a&gt; specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0961df02a7e7ed5e4102b80cf9b8989a0dd5287" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/namespace&quot;&gt; &lt;code&gt;inline namespace&lt;/code&gt;&lt;/a&gt; definition (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74166bef8ed8e6b7bdf32607ea8bd778f72441fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/namespace&quot;&gt; using-directives &lt;/a&gt; for namespaces and &lt;a href=&quot;../language/namespace&quot;&gt; using-declarations&lt;/a&gt; for namespace members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f874205bade5543c2ffd0dff3ce3260d26b5c89" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/noexcept_spec&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt; specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0936d8ce6acfa158fc5d1d34da63785fae139a51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/nullptr&quot;&gt; &lt;code&gt;nullptr&lt;/code&gt; pointer literal&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b51065de56234361b7f64daed9c35d830888c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;!&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055718bfe88fb20ec14771860d096a243ba3f38c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;!=&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db16428b98bf93c2f712caab813ca893a62e8db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b0584c143e0c2091de10a6f44e3c8941ce22b1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c59568f4ac0870823682f297dcf3ffc6dd9e1c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;&amp;amp;=&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67cb1d5dab733bc336be8fa684301da53eefee6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;^&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe441902ad07a9f0f8d0b3fd1b6212c79cf0ad17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;^=&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a118fd7e617547d1d2d21b83a0cc6418e0d585db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;|&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bad3f77f6993b833eabda57c4679eb6c8ddeefc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;|=&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf92f3006d7a448a32ee5058711c7e89b28f1c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;||&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b36155917707afb9104ded7d4c458b99993a8e0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/operator_alternative&quot;&gt; alternative operators&lt;/a&gt;: as an alternative for &lt;code&gt;~&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5174d77fd99bcdb365ff62e44250ee73ef426399" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/pointer#Pointers_to_data_members&quot;&gt;Pointers to data members&lt;/a&gt; are Callable, even though no function calls take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb3f165300e943b94c8c74db0b46e31730a78a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/range-for&quot;&gt; range-based &lt;code&gt;for&lt;/code&gt; loop&lt;/a&gt;: as the declaration of the loop (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f2384661d3c0bfb2ae4ae6dc5ce8adc71d46e0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/reinterpret_cast&quot;&gt; &lt;code&gt;reinterpret_cast&lt;/code&gt; type conversion expression&lt;/a&gt;: as the declaration of the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad408f5595908e5ee2fa9325daec1df726d6aac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt; (or equivalent &lt;a href=&quot;../language/explicit_cast&quot;&gt;explicit cast&lt;/a&gt;) between pointer or reference types shall not be used to reinterpret object representation in most cases because of the &lt;a href=&quot;../language/reinterpret_cast#Type_aliasing&quot;&gt;type aliasing rule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15142be316e6b13c8d3c546806aebfcaa174b6e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/return&quot;&gt; &lt;code&gt;return&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f84b86adb6ba6632056c77a13061bf5ff65c9dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/return&quot;&gt; return statement&lt;/a&gt; in a &lt;a href=&quot;../language/coroutines&quot;&gt;coroutine&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75be2d0b155a60b7ade55a65baaf8fbe4249b2ef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/sizeof...&quot;&gt; &lt;code&gt;sizeof...&lt;/code&gt; operator&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3975ef615795509aa22ac5b707b8029c92916407" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/static_assert&quot;&gt; &lt;code&gt;static_assert&lt;/code&gt; declaration&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e4a023bcb6c08fd16b87be243cef6ee75ecaae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/static_cast&quot;&gt; &lt;code&gt;static_cast&lt;/code&gt; type conversion expression&lt;/a&gt;: as the declaration of the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c606156b9661c045384b7adb63958088cb19d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/storage_duration&quot;&gt; automatic storage duration specifier&lt;/a&gt;(deprecated).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff10a1aa5cb5007b428aa0a51f9645e171c791ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/storage_duration&quot;&gt; thread local storage duration specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6b4f35069b2547c80996f52e816e8d77797046" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the case labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4072151cff4bf66d8d0adedc6e4d7ada71b7d17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the default case label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbba56f85db86c885c0a97b173bd4c3fb3f2446" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; statement&lt;/a&gt;: as the declaration of the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1591ce8113579e91e5c97541ed4808c2151e9d51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/type_alias&quot;&gt; type alias and alias template declaration&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674412b8cdc39f7587aa847a1978cf3c0d9f03e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;bool&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556de6228799d94d15aa3c615f2117b159fd84b3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;char16_t&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76395613099499393c2a1d3b4d3d7077c8acbe6f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;char32_t&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4388f24c3e7c804fbd82702220bd61ad5a5a79c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;char8_t&lt;/code&gt; type&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7796d13516f8345908b7ab21eb80636902ccfd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;char&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ff51e00068d21c2008cd91faee5ceeb56515a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;double&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81459d4e6cf8dda17d5ab626654a0e6496def806" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;float&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ca1036c42ebc30d5187196fcfaded1b28b200b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;int&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195976122f30244dd07029bb849b1ce4dfbee09c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/types&quot;&gt; &lt;code&gt;wchar_t&lt;/code&gt; type&lt;/a&gt;: as the declaration of the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c215457e7048572cdbcac5d603214c83500090a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/using_declaration&quot;&gt; using-declarations &lt;/a&gt; for class members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d84ac20324a265a4d87f2e5db818a95700626b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/value_category&quot;&gt;lvalues&lt;/a&gt; of the types &lt;code&gt;TC::rep&lt;/code&gt;, &lt;code&gt;TC::duration&lt;/code&gt;, and &lt;code&gt;TC::time_point&lt;/code&gt; are &lt;a href=&quot;swappable&quot;&gt;Swappable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e009cb7cb52fdad418ec94c77c4319a59832ef4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/value_category&quot;&gt;lvalues&lt;/a&gt; of type &lt;code&gt;It&lt;/code&gt; satisfy &lt;a href=&quot;swappable&quot;&gt;Swappable&lt;/a&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bbf4208d3af05390ac14642762798bf3f0dee1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../language/while&quot;&gt; &lt;code&gt;while&lt;/code&gt; loop&lt;/a&gt;: as the declaration of the loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1219ef0ecdc6fe580a275e14df548323fa343a20" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../memory/bad_weak_ptr&quot;&gt;&lt;code&gt;bad_weak_ptr&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;../memory/bad_weak_ptr&quot;&gt;&lt;code&gt;bad_weak_ptr&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="de26054e5dccfe8c971fb0524efaf49b79934d9f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../memory/new/bad_array_new_length&quot;&gt;&lt;code&gt;bad_array_new_length&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;../memory/new/bad_array_new_length&quot;&gt;&lt;code&gt;bad_array_new_length&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="2877c2d7c87424b3bcd5aa6684dad247ed2b295d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../memory/new/operator_delete&quot;&gt; deallocation functions&lt;/a&gt; as the name of operator-like functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ebd171d175aa7e98422aa1e347000f1ace354f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../memory/new/operator_new&quot;&gt; allocation functions&lt;/a&gt; as the name of operator-like functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c301240aa152df095d90ee26135a0922ad6d1e37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt; type used to allocate internal storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82136adbdbfeddc541edfbd84ca349272121db96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/callable&quot;&gt;Callable&lt;/a&gt; object to be invoked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7356d7b9bc36198d80cac5e2ca63cd6ceb579e60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/callable&quot;&gt;Callable&lt;/a&gt; object to call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ea26bd7fa8a74e2ccfa94d9e5c878d498fb95c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/callable&quot;&gt;Callable&lt;/a&gt; object to invoke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0d35cfe32b33f01c4b7b3a779e30e08b0977a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/chartraits&quot;&gt;CharTraits&lt;/a&gt; class specifying the operations on the character type. Like for &lt;code&gt;basic_string&lt;/code&gt;, &lt;code&gt;Traits::char_type&lt;/code&gt; must name the same type as &lt;code&gt;CharT&lt;/code&gt; or the program is ill-formed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91526a35486554c98a091f137c9b4d71ef6392da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; and &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; reference wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea42f1f6052dfb286551c29c09ec78a53b26870" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt; and &lt;a href=&quot;../named_req/constexpriterator&quot;&gt;ConstexprIterator&lt;/a&gt;(since C++20)that is a &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b2a4bd623eb54d815b2923bb1fabf49f53a24d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt; objects can be copied by copying their object representations manually, e.g. with &lt;code&gt;&lt;a href=&quot;../string/byte/memmove&quot;&gt;std::memmove&lt;/a&gt;&lt;/code&gt;. All data types compatible with the C language (POD types) are trivially copyable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3b33d4ea8f8cfdc7ab6f46fbe911450d5124e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../namespace&quot;&gt;namespace&lt;/a&gt;: &lt;code&gt;namespace [[deprecated]] NS { int x; }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bddface0bc3c3bd470adfddc08b63b54f8a1f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../regex/regex_error&quot;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;../regex/regex_error&quot;&gt;&lt;code&gt;regex_error&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="4aa9697c357ca3cc69db064e8fdde6672db81e9a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../string/basic_string_view&quot;&gt;&lt;code&gt;basic_string_view::iterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../string/basic_string_view&quot;&gt;&lt;code&gt;basic_string_view::iterator&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7f1d5df45dfe21dc0129a42d716e608087e2c5a3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../string/multibyte/c16rtomb&quot;&gt;&lt;code&gt;c16rtomb&lt;/code&gt;&lt;/a&gt;(without C11's DR488)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2e1dd9892a47dd716f8c814078a72500fd9deb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../string/multibyte/mbrtoc16&quot;&gt;&lt;code&gt;mbrtoc16&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;../string/multibyte/c16rtomb&quot;&gt;&lt;code&gt;c16rtomb&lt;/code&gt;&lt;/a&gt;(with C11's DR488)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd6a0af2dc492c914e8cf910e3502f8bc14b9d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../string/multibyte/mbrtoc32&quot;&gt;&lt;code&gt;mbrtoc32&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;../string/multibyte/c32rtomb&quot;&gt;&lt;code&gt;c32rtomb&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1aaceb8dc5b02617790660a6715b68a5917a8e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../string/multibyte/mbsrtowcs&quot;&gt;&lt;code&gt;mbsrtowcs&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;../string/multibyte/wcsrtombs&quot;&gt;&lt;code&gt;wcsrtombs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d485d4df1b0a59dce01c1060cc3ee1781c9fbe3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../template_specialization&quot;&gt;template specialization&lt;/a&gt;: &lt;code&gt;template&amp;lt;&amp;gt; struct [[deprecated]] X&amp;lt;int&amp;gt; {};&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d437e358f52204afe37c39f48ffb9b771b00a29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../thread/future_error&quot;&gt;&lt;code&gt;future_error&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;../thread/future_error&quot;&gt;&lt;code&gt;future_error&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="442b166b4c27a39e0804ec22cd047e8c4bf0d730" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../typedef&quot;&gt;typedef-name&lt;/a&gt;, including those declared by &lt;a href=&quot;../type_alias&quot;&gt;alias declaration&lt;/a&gt;: &lt;code&gt;[[deprecated]] typedef S* PS;&lt;/code&gt;, &lt;code&gt;using PS [[deprecated]] = S*;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7bad515b412c299effc3e390c6290270f74016" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../typedef&quot;&gt;typedef&lt;/a&gt;, including those declared by &lt;a href=&quot;../type_alias&quot;&gt;alias declaration&lt;/a&gt;: &lt;code&gt;[[maybe_unused]] typedef S* PS;&lt;/code&gt;, &lt;code&gt;using PS [[maybe_unused]] = S*;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b406281413464d3786cd6cbd5ba765f2f2b72b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../utility/any/bad_any_cast&quot;&gt;&lt;code&gt;bad_any_cast&lt;/code&gt;&lt;/a&gt;(C++17)</source>
          <target state="translated">&lt;a href=&quot;../utility/any/bad_any_cast&quot;&gt;&lt;code&gt;bad_any_cast&lt;/code&gt;&lt;/a&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="cc0b47dbf3602f30c76422740d48ee884a37c28a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../utility/functional/bad_function_call&quot;&gt;&lt;code&gt;bad_function_call&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;../utility/functional/bad_function_call&quot;&gt;&lt;code&gt;bad_function_call&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="a4730063ce8505388a0d2635a69735f563238d38" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../utility/optional/bad_optional_access&quot;&gt;&lt;code&gt;bad_optional_access&lt;/code&gt;&lt;/a&gt;(C++17)</source>
          <target state="translated">&lt;a href=&quot;../utility/optional/bad_optional_access&quot;&gt;&lt;code&gt;bad_optional_access&lt;/code&gt;&lt;/a&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="13599afa3bbfd3e8f74acee9e151e5c6fba21019" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../utility/program/exit&quot;&gt;program termination&lt;/a&gt;, for objects with static &lt;a href=&quot;storage_duration&quot;&gt;storage duration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98337a3225cbfa59d636027e15031d6823a7d0e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../utility/variant/bad_variant_access&quot;&gt;&lt;code&gt;bad_variant_access&lt;/code&gt;&lt;/a&gt;(C++17)</source>
          <target state="translated">&lt;a href=&quot;../utility/variant/bad_variant_access&quot;&gt;&lt;code&gt;bad_variant_access&lt;/code&gt;&lt;/a&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="a4f14be9dad2c17c5728853059eec03cee252247" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswalnum&quot;&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswalnum&quot;&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7499acaeddf396b23e8712bb51c0079fa8ea132c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswalpha&quot;&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswalpha&quot;&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa05790b105a765abefe6e275e0a58bbcdaf5ec3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswblank&quot;&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswblank&quot;&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f5e375f2fe0c62aac0ed7c8ea6bff7be5f043cf5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswcntrl&quot;&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswcntrl&quot;&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ce2d1ee343410a23d801016b18621df3a92566b3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswdigit&quot;&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswdigit&quot;&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6e360d95a7bd3aaf111410257c357137b98eb5da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswgraph&quot;&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswgraph&quot;&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="727bf3ece67b6241480c6a93e2c486757988c318" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswlower&quot;&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswlower&quot;&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2da1daa1da3059dc260f7677e3047d66a9cbc8a5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswprint&quot;&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswprint&quot;&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f39a2be08d67d3a813f720809563bf8964e1def7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswpunct&quot;&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswpunct&quot;&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5303e6fc4dd64ba4078bb79417047e5d07b8508d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswspace&quot;&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswspace&quot;&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="14d265d90b374c49936958a90dca7d283ba9776b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswupper&quot;&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswupper&quot;&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="91af23558c860da02289f3714bfab8b30fa9a0ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../wide/iswxdigit&quot;&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../wide/iswxdigit&quot;&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c19bf57d49d49388d4bcba6a7cb341e8130bdf19" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;access&quot;&gt;Access specifiers&lt;/a&gt; have no effect on the meaning of friend declarations (they can appear in &lt;code&gt;private:&lt;/code&gt; or in &lt;code&gt;public:&lt;/code&gt; sections, with no difference).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fe6837548161fe8c6b513668caae045a3b7c27" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;access&quot;&gt;Member access&lt;/a&gt; for the names used in a default template parameter is checked at the declaration, not at the point of use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f61d397412a71acb76a16c8af696fd2ae79beb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt; examines function declarations with external linkage that are visible from both the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f797b42779b0884cee2d68139e3a69f327e480f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;aggregate_initialization&quot;&gt;Aggregate initialization&lt;/a&gt;, e.g. &lt;code&gt;char a[3] = {'a', 'b'};&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4189ef169d22699978f2e8de2d5ff06b5ab7bc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;alignas&quot;&gt;alignments&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;alignas&quot;&gt;alignments&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1355f180b49d2281a0457da63e6c45780e5e3de1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;alignof&quot;&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/a&gt; queries alignment requirements of a type (since C++11).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5540be10fdb7de310e4d488a847b2e178ddb7417" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array&quot;&gt;array types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_array&quot;&gt;std::is_array&lt;/a&gt;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bee38867350562827ee0afe86a6ede4de72c9cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array#Arrays_of_unknown_bound&quot;&gt;array of unknown bound&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049a2206536f6454eccccc5b885940dea6f03c38" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;array/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28dce7bd2d942ff4c4ca8ac765f1b97ee5e0f34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;as_operator&quot;&gt;copy assignment&lt;/a&gt; operators, &lt;a href=&quot;move_operator&quot;&gt;move assignment&lt;/a&gt; operators that are implicitly-declared or defaulted on their first declaration unless the invocation of any assignment operator in the implicit definition is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ebe6990f5a7d3a5c9288d9f41dc8525166603b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;attributes&quot;&gt;Attributes&lt;/a&gt; may appear in decl-specifier-seq, in which case they apply to the type determined by the preceding specifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0046554ccf40119f293a685af98d7c5bb512d6b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basic_regex/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79114c6a6f490fa14c4961a087814352687f6f2c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basic_string/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8605416d2bcc4f0fd34cd95a2886c6281c836d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;binarypredicate&quot;&gt;BinaryPredicate&lt;/a&gt; taking two arguments of type &lt;code&gt;Key&lt;/code&gt; and expressing an equivalence relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3172dc2a6fb791e15f28855657aba4d9fafb0f66" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;bool_literal&quot;&gt;boolean literals&lt;/a&gt; are values of type &lt;code&gt;bool&lt;/code&gt;, that is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dce4710a8f42f486106c97db3ebe2b9d031191" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion&lt;/a&gt; makes it possible to specify conversion from user-defined classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e499de1c47f7ef48ae912846f18d4013480f4a50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;character_literal&quot;&gt;character literals&lt;/a&gt; are individual characters of type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798f5e3631a35c1f303c2ccf8ec44ec72b898945" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class&quot;&gt;class types&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd37cf52c038aba284edf5ebd1aeee2ee7c7e1b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class&quot;&gt;class&lt;/a&gt; declaration;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b954ad85437f8cbfaab5722528324918840c23be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class#Local_classes&quot;&gt;Local classes&lt;/a&gt; and any templates used in their members are instantiated as part of the instantiation of the entity within which the local class or enumeration is declared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2362a16ddcf556e816f611b9d6eb74ff699105af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class#Local_classes&quot;&gt;local classes&lt;/a&gt; and their member functions;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e79422e519b5284cbe883252ab9853798e1f3d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;class_template&quot;&gt;Class templates&lt;/a&gt;, &lt;a href=&quot;function_template&quot;&gt;function templates&lt;/a&gt;, and non-template functions (typically members of class templates) may be associated with a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086d1fcc0cab04477ef01fe46dfb0d9493ed6e79" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt&quot;&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t, char, mbstate_t&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35485794c14f4a738cec5b870d643ed8949add3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt&quot;&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t, char, mbstate_t&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c326558d41e5ea7be990d0588eee4eeaca5c460" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="bc81d50a13a23771b9da1c9e2835614e975045a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1e47e664f18db74e5d814b32e5cc4009e6bdbe8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(Windows).</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(Windows).</target>
        </trans-unit>
        <trans-unit id="645a08b47ec248002c02071887990ac3eabf0882" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf16&quot;&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</target>
        </trans-unit>
        <trans-unit id="c1441fa2bbebc32725497f1c10c3161a882e664e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="51c6dbe460d0e49451d89f6d11785e570a1b641a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7fe377ae7226663520d37c4cea3591be39338747" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(Windows).</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(Windows).</target>
        </trans-unit>
        <trans-unit id="f31b1f0a27cfb62dea816edcf9f6b90f5dab8cff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8&quot;&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</target>
        </trans-unit>
        <trans-unit id="0f0e8a93d3779b1a2d388343c57487763556530c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b9ef0d30233060a4627bc02fd84cf6f93aef6b4f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2e6f702902d0e5547d6c5a0b5387ccf4cb1eed70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;</source>
          <target state="translated">&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/a&gt;&amp;lt;wchar_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="95dae9b20ad9f08ed6f3fe427516fb437bf4b3d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;const_cast&quot;&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/a&gt; adds or removes &lt;a href=&quot;cv&quot;&gt;cv&lt;/a&gt; qualifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495c9309c157ba5029c9a0792b35f2c6db445a72" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;const_cast&quot;&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sizeof...&quot;&gt;&lt;code&gt;sizeof...&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;noexcept&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;alignof&quot;&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/a&gt; are not included since they are never ambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e3e6aa89615e0ebd73e28c7176ab3e136d9b82" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constant_expression&quot;&gt; constant expressions &lt;/a&gt; can be evaluated at compile time and used in compile-time context (template arguments, array sizes, etc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ddd2a643317f1bcef8f9ce6b0e82edb45260b85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constant_expression#Integral_constant_expression&quot;&gt;integral constant expression&lt;/a&gt;, where a literal class is used (&lt;code&gt;T&lt;/code&gt; is any integral or unscoped enumeration type, the selected user-defined conversion function must be &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9a47100f7f677505eee87ba6effbc6041c023b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constexpr&quot;&gt;Constexpr functions&lt;/a&gt;, &lt;a href=&quot;constructor&quot;&gt;constructors&lt;/a&gt;, &lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt;, and the &lt;a href=&quot;main_function&quot;&gt;main function&lt;/a&gt; cannot be coroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59b63d0bbb7d7ae36b3b175b7ecd896e6ea71ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constraints#Requires_clauses&quot;&gt;a requires-clause&lt;/a&gt;, which adds a &lt;a href=&quot;constraints&quot;&gt;constraint&lt;/a&gt; to a &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428be9e939074924c8c6028f24fa753f6b57bded" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constructor&quot;&gt;During construction&lt;/a&gt; of an object, if the value of the object or any of its subobjects is accessed through a glvalue that is not obtained, directly or indirectly, from the constructor's &lt;code&gt;this&lt;/code&gt; pointer, the value of the object or subobject thus obtained is unspecified. In other words, the this pointer cannot be aliased in a constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b17c42fac72e5ee63c72fd928caa17aaad6544" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constructor&quot;&gt;constructors&lt;/a&gt; and &lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt; are non-static member functions that use a special syntax for their declarations (see their pages for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6df75414e415f5ea977d01e071a74009061bffb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constructor&quot;&gt;member initializer list&lt;/a&gt;, only allowed in constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cae0dfd67ad8fa74dc960645e2bb4710cd85c16" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;container/map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;container/map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="28664dd5ef1238b9e459aea4f435caf82993e490" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;container/multimap&quot;&gt;&lt;code&gt;multimap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;container/multimap&quot;&gt;&lt;code&gt;multimap&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4f16a023f3a8368aabcb96ce246bc858a5e12812" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;container/multiset&quot;&gt;&lt;code&gt;multiset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;container/multiset&quot;&gt;&lt;code&gt;multiset&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="da2666130d55fdcee308c60172d4455afba2548d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;container/unordered_map&quot;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;container/unordered_map&quot;&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5c79d271e21b6fa13b5d3d7ca7dde6611172d624" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;container/unordered_multimap&quot;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;container/unordered_multimap&quot;&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3efec2a457d7e1eaa1b7c194cb5aa5b73f106dd3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;container/unordered_multiset&quot;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;container/unordered_multiset&quot;&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="413688f2b27d7c0aa1c5497d856cb29eac4b8e3d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;copy_elision&quot;&gt;Copy elision&lt;/a&gt; is an exception from the as-if rule: the compiler may remove calls to move- and copy-constructors and the matching calls to the destructors of temporary objects even if those calls have observable side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dab24e3d6b72b86ae409cb9fe9120998a174238" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;copy_elision&quot;&gt;Named return value optimization&lt;/a&gt; (NRVO) is not permitted in constant expressions, while return value optimization (RVO) is mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85fc6a43a72dd688b8af71c106d2456746281c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;copy_initialization&quot;&gt;Copy initialization&lt;/a&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt; s = &quot;hello&quot;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317054300522e67cd66a99ba6ae1d45e2d2af07f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;copy_initialization&quot;&gt;copy-initialization&lt;/a&gt; that requires conversion of the initializer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2b9ce904d8f927f881af17b8b132140b26aec9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; (unless otherwise specified)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de240f39f69c5089df25f0c4b1123feaeef557f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cuchar&quot;&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++17)</source>
          <target state="translated">&lt;a href=&quot;cuchar&quot;&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++17)</target>
        </trans-unit>
        <trans-unit id="681205b01dba0dabc3e5ac8cc811314480de98a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cv&quot;&gt;The keyword &lt;code&gt;mutable&lt;/code&gt;&lt;/a&gt; is a storage class specifier in the C++ language grammar, although it doesn't affect storage duration or linkage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1891b9869fa4448ee937fc3a50247fb4c633f8f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;data_members#Member_initialization&quot;&gt;default member initializer&lt;/a&gt; to be used with this bit field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da682e3a3aeafc14bb3b36d007a000faf91431b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; of a single non-array variable with a brace-or-equals &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993b4c001aabd84b070f2eceec6b8676cffb8e68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;default_arguments&quot;&gt;Default arguments&lt;/a&gt; are not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368e14c163fcc9f167e7563e4cf628d6e0ba1ed8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;default_arguments&quot;&gt;Default arguments&lt;/a&gt; for virtual functions are substituted at the compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130ca313c7ecf0bf83f9ae04085623f5b07c46c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;default_arguments&quot;&gt;Default function arguments&lt;/a&gt; cannot be specified in explicit specializations of function templates, member function templates, and member functions of class templates when the class is implicitly instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429f6e6593eed7f70f48fad077853ff324cf60a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;default_comparisons&quot;&gt;comparison operators&lt;/a&gt; that are defaulted on their first declaration unless the invocation of any comparison operator in the implicit definition is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da08224b5446a96568e562a509b0842f02bcd588" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;default_constructor&quot;&gt;default constructors&lt;/a&gt;, &lt;a href=&quot;copy_constructor&quot;&gt;copy constructors&lt;/a&gt;, &lt;a href=&quot;move_constructor&quot;&gt;move constructors&lt;/a&gt; that are implicitly-declared or defaulted on their first declaration unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa970de57ea690f58b322529708260b4fe0c2137" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt; and &lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4a17de68af88d9a749204d3558c549ca838c7f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;definition&quot;&gt;definition&lt;/a&gt; of an object of type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8571faace12abde3040b6428e2cdf753cc7a7e43" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;delete&quot;&gt; delete expression&lt;/a&gt; deallocates memory dynamically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77258fffbfcbec2ce61ebf6761af28064e4e1e00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; destructs objects previously created by the new expression and releases obtained memory area</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c912334a8cc5718f4774e9c2a269195f1c4e4db0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;delete&quot;&gt;delete-expression&lt;/a&gt;, for objects with dynamic storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f01aa0bff5dfbee73bd38e4f900d200302c37f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;deque/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb3d390139bc74e7a7ae5295941dd3a7e304375" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;destructible&quot;&gt;Destructible&lt;/a&gt;, &lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;, &lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;, &lt;a href=&quot;defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3f455a5cc6ae16d9eaf74fd73d4385c7ad517c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt; unless the destructor of any potentially-constructed base or member is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ef0271d1e4e96c75b0bf6296f512be051f84d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;direct_initialization&quot;&gt;Direct initialization&lt;/a&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt; s(&quot;hello&quot;);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefcf710ee401ebaa8576965ef183885178b7151" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt; expression&lt;/a&gt; when the target type is a reference type, and conversion needs a run time check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e669f348091f9be76a93123a9b87ffd462437209" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt; converts within inheritance hierarchies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34313f433b336b4a0abc6886b70d114d4e458580" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enum&quot;&gt;Opaque enum declaration&lt;/a&gt; resembles form (3), but the enum type is a complete type after an opaque enum declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e65a28f00e46ebbf9674d714e8836870f13673c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enum&quot;&gt;enum&lt;/a&gt; declaration;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68ebe82e4fb9c151e5ec601d66d863584264e23" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enum&quot;&gt;enumeration type&lt;/a&gt; from the point of declaration until its underlying type is determined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3628e96227fcc01800a78f5a8e0a10e5355bbf73" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enum&quot;&gt;enumeration types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_enum&quot;&gt;std::is_enum&lt;/a&gt;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac243c86acdc4f205453e10b91630f032932225a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enum&quot;&gt;enumerator initializers&lt;/a&gt; when the underlying type is fixed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0fa147681b5d71172ba999815940d2ec1d45d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;enum&quot;&gt;opaque enum declaration&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6394f3e7e3ea126ac2100abbe0cb47c8e6e49b99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;eval_order&quot;&gt;order of evaluation&lt;/a&gt; of arguments and subexpressions specify the order in which intermediate results are obtained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e36073439855c250e2549ce7f911b13c86a0d8d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;explicit_cast&quot;&gt;C-style cast&lt;/a&gt; converts one type to another by a mix of &lt;code&gt;static_cast&lt;/code&gt;, &lt;code&gt;const_cast&lt;/code&gt;, and &lt;code&gt;reinterpret_cast&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b1dca1e343b258afce2002350fa86d60f2985e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;explicit_cast&quot;&gt;explicit cast&lt;/a&gt; conversion using C-style cast notation and functional notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9702136d596818efd0a9a3a692ae1dba968ca952" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;explicit_cast&quot;&gt;function-style cast&lt;/a&gt; expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694f6003fd723616c5ec323473957cfa64c8ddf8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt; which is &lt;a href=&quot;implicit_cast&quot;&gt;contextually convertible&lt;/a&gt; to bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0556898c51ab7753758f5514ecce8c6fda166773" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;expressions&quot;&gt;expression&lt;/a&gt;, convertible to the function return type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2475b6a0dd5db50c4c48f57f4065bb986f790b13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;expressions#Conversions&quot;&gt;conversion&lt;/a&gt; that creates a prvalue (&lt;a href=&quot;explicit_cast&quot;&gt;including&lt;/a&gt;&lt;code&gt;T(a,b,c)&lt;/code&gt; and &lt;code&gt;T{}&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b356f3107a0e6e0f29e84e3f1f72fd4ee784e53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;feature_test&quot;&gt;&lt;code&gt;__has_cpp_attribute&lt;/code&gt;&lt;/a&gt;(since C++20).</source>
          <target state="translated">&lt;a href=&quot;feature_test&quot;&gt;&lt;code&gt;__has_cpp_attribute&lt;/code&gt;&lt;/a&gt;(since C++20).</target>
        </trans-unit>
        <trans-unit id="4c5d06e74a4d3b31d790e2dd27cbb2a13d78636f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;feature_test&quot;&gt;&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;(since C++17)</source>
          <target state="translated">&lt;a href=&quot;feature_test&quot;&gt;&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;(since C++17)</target>
        </trans-unit>
        <trans-unit id="6982b5d8bed17147ccea4dc697f0c9e6ea55792f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;final&quot;&gt; final specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7845ea483a7374b9f921558941e1af3934f95f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;final&quot;&gt;final specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b8438bcb64d846d86ca52777e22853610ceb76" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;floating_literal&quot;&gt;floating-point literals&lt;/a&gt; are values of type &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, or &lt;code&gt;long double&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da944bc40ef5056158fc28dd89efaf7ad81852a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;forward_list/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4554b86a33483946815394a2564e8b67fcf5e7b1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;friend&quot;&gt;Friend&lt;/a&gt; functions defined within a nested class have no special access to the members of the enclosing class even if lookup from the body of a member function that is defined within a nested class can find the private members of the enclosing class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8858a9c530523e12f85a79cd9ecae50573e5cd50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function&quot;&gt;definition&lt;/a&gt; or function call to a function with return type &lt;code&gt;T&lt;/code&gt; or argument type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e694f4e9be03a8b715cd4b7573f81c672302b3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function&quot;&gt;function types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_function&quot;&gt;std::is_function&lt;/a&gt;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4081ce90c94e7e94eb13f3b59242611e4af6ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c72b27663df1b034d73640255061475d7ab82ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function_template&quot;&gt; function template declaration&lt;/a&gt; declares a function template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423d77e347bd925cc86e5a8f181650e74ef19e77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function_template&quot;&gt;Function templates&lt;/a&gt; other than &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion functions&lt;/a&gt; can use return type deduction. The deduction takes place at instantiation even if the expression in the return statement is not &lt;a href=&quot;dependent_name&quot;&gt;dependent&lt;/a&gt;. This instantiation is not in an immediate context for the purposes of &lt;a href=&quot;sfinae&quot;&gt;SFINAE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b647e35bc4f6d8acec9664197c054fe87a6ecd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function_template#Explicit_instantiation&quot;&gt;Explicit instantiation declarations&lt;/a&gt; do not themselves instantiate function templates that use return type deduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0217ff95425f826c47b58a9498bb2ba675172c42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function_template#Explicit_instantiation&quot;&gt;Explicit instantiations&lt;/a&gt; may use the noexcept specifier, but it is not required. If used, the exception specification must be the same as for all other declarations. A diagnostic is required only if the exception specifications are not the same within a single translation unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ed60119c3d3d6daa615a37c24f5f81e37d7f45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;function_template#Function_template_overloading&quot;&gt;partial ordering&lt;/a&gt; of function templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07321f0bcf14a116aab0633dc38694fbd1614a26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;get&quot;&gt;&lt;code&gt;std::get(std::variant)&lt;/code&gt;&lt;/a&gt; called with an index or type that does not match the currently active alternative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffe4b2fabf5e14d980a53cf487630ee6f3d0842" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/ranges&quot;&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/ranges&quot;&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="694cd4709cd34852e7dbb726b7c2d9aea78c2b57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/algorithm&quot;&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2dd04dcf61a3f066e478ee052023050de1d5446" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23aced53cd73aa85c9673291b1effddba15b0590" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/atomic&quot;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="translated">&lt;a href=&quot;header/atomic&quot;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</target>
        </trans-unit>
        <trans-unit id="94e9d0cbb908bcc7b95b4b4bea8a86213ca179b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/atomic&quot;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/filesystem&quot;&gt;&lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/istream&quot;&gt;&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/limits&quot;&gt;&lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/locale&quot;&gt;&lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/ostream&quot;&gt;&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/atomic&quot;&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/filesystem&quot;&gt;&lt;code&gt;&amp;lt;filesystem&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/istream&quot;&gt;&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/limits&quot;&gt;&lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/locale&quot;&gt;&lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/ostream&quot;&gt;&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="328a495226ce077caa9daa6f6f908daea7d81015" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/bit&quot;&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="translated">&lt;a href=&quot;header/bit&quot;&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++20)</target>
        </trans-unit>
        <trans-unit id="7fed402942690633790611c37a9742fb1bc5f2dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/cfloat&quot;&gt;&lt;code&gt;&amp;lt;cfloat&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/climits&quot;&gt;&lt;code&gt;&amp;lt;climits&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="translated">&lt;a href=&quot;header/cfloat&quot;&gt;&lt;code&gt;&amp;lt;cfloat&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/climits&quot;&gt;&lt;code&gt;&amp;lt;climits&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</target>
        </trans-unit>
        <trans-unit id="03c26109d6afd13dab2f19ab1b5831bedf152798" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/ciso646&quot;&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)(until C++20)</source>
          <target state="translated">&lt;a href=&quot;header/ciso646&quot;&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)(until C++20)</target>
        </trans-unit>
        <trans-unit id="7432429ba2365d7642f4d1f118a98ac93022fc9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/numeric&quot;&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b8d0521c398a6330f6da2f86fa41a36c9cb9f9d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/concepts&quot;&gt;&lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="translated">&lt;a href=&quot;header/concepts&quot;&gt;&lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++20)</target>
        </trans-unit>
        <trans-unit id="328eb7c0ee618602f6c05bfea655b19fb85eaff7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/cstdalign&quot;&gt;&lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/cstdbool&quot;&gt;&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)(until C++20)</source>
          <target state="translated">&lt;a href=&quot;header/cstdalign&quot;&gt;&lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/cstdbool&quot;&gt;&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)(until C++20)</target>
        </trans-unit>
        <trans-unit id="b012fe62d5788b765a9f303d7265643adf73b209" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/cstdint&quot;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="translated">&lt;a href=&quot;header/cstdint&quot;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</target>
        </trans-unit>
        <trans-unit id="20feea4d46b7a6f65ff323974abb51a132409fc1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/cstdlib&quot;&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;&lt;/a&gt;(partial)&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;freestanding#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;a href=&quot;header/cstdlib&quot;&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;&lt;/a&gt;(partial)&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;freestanding#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ab801266d8c3f59b843cdcd42cacf6167229a401" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e56cc2e74518938a4b08245074e58b2ecd73e871" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="95216887f462ee1800d9d10144184c5081ffe7f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/type_traits&quot;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/type_traits&quot;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68dca3d4d757e6392ac4cdfe09b952631cc4a667" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/initializer_list&quot;&gt;&lt;code&gt;&amp;lt;initializer_list&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="translated">&lt;a href=&quot;header/initializer_list&quot;&gt;&lt;code&gt;&amp;lt;initializer_list&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</target>
        </trans-unit>
        <trans-unit id="7f1a36425ff53507073a751c72d634a25732dbd5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f1d72242c495c3d115eece42aa6e6cd8cb747da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/regex&quot;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/iterator&quot;&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/array&quot;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/regex&quot;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="10dc1c4455413f3a1b837cd7881db3c44841090f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5867272c3c3b4cb6b153f70122be65596165d92b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93313f4f869e950802c7e11870ce93bf76cf00f6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/functional&quot;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8085b52a4039048b4808098745b13899583bcae3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/scoped_allocator&quot;&gt;&lt;code&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/memory&quot;&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/scoped_allocator&quot;&gt;&lt;code&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a3d4f83f4f9d87fd1b919c3ef1a690187bd1955" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/deque&quot;&gt;&lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/forward_list&quot;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/list&quot;&gt;&lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/vector&quot;&gt;&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/map&quot;&gt;&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/set&quot;&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52a27085ad9e087d20265a76dcdc7fcb84dd92ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/string_view&quot;&gt;&lt;code&gt;&amp;lt;string_view&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="05a5c2d634eb66d946936bf73ef86ba9302ef440" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/type_traits&quot;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="translated">&lt;a href=&quot;header/type_traits&quot;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++11)</target>
        </trans-unit>
        <trans-unit id="d13c2c0efcc46c6907390f6ddd29da901c4b3ccc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/unordered_map&quot;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/unordered_set&quot;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="acb2d5690776a7d0ab3df49442b4be8ba30fe7a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;header/utility&quot;&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;header/tuple&quot;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="66f66ec5e6a13d2d4e520506e5df6f3ccb85c9eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;header/version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="translated">&lt;a href=&quot;header/version&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt;(since C++20)</target>
        </trans-unit>
        <trans-unit id="97a74a84abc2ba49cb7dd5800b0fa0ee26c89077" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://clang.llvm.org/docs/LanguageExtensions.html#non-standard-c-11-attributes&quot;&gt;C++ attributes supported by Clang&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9323accc52e5e7ed6273bcd2efacfe3cedd424" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://download.oracle.com/docs/cd/E19422-01/819-3690/Pragmas_App.html#73499&quot;&gt;Appendix B. Pragmas&lt;/a&gt; in Sun Studio 11 C++ User's Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62dbc4fcac337020db6962e3727808f17f1232e5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/atomic_shared_ptr&quot;&gt;&lt;code&gt;atomic_shared_ptr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/atomic_weak_ptr&quot;&gt;&lt;code&gt;atomic_weak_ptr&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19031e45644f16cbcc229ee6e7ca52de77fa589" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/barrier&quot;&gt;&lt;code&gt;barrier&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/flex_barrier&quot;&gt;&lt;code&gt;flex_barrier&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21508ac3edb89125469aa5b6df1e255f67dbf5c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/basic_string/erase&quot;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/basic_string/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4974bdf89d63fd12e9345eaa63da489c6724b53e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/deque/erase&quot;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/deque/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e976c544b188d34d0b3c068363fa6dc4ff6c960a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/forward_list/erase&quot;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/forward_list/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23c8677654ddc7e49f3ff31a96424ed2da60e03" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/function&quot;&gt;&lt;code&gt;function&lt;/code&gt;&lt;/a&gt; using polymorphic allocators and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/memory#Sampling_and_searching_algorithms&quot;&gt;searchers&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c908c477bcdddc0e63439fbc970c2c22b3e576d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/gcd&quot;&gt;&lt;code&gt;gcd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/lcm&quot;&gt;&lt;code&gt;lcm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa0f49920e5982b1e7245f5406f593c81e444fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/lib_extensions/promise&quot;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/lib_extensions/packaged_task&quot;&gt;&lt;code&gt;packaged_task&lt;/code&gt;&lt;/a&gt; using polymorphic allocators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b915b042cf3ac1d980b470ec9b06c63d14acdf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/list/erase&quot;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/list/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f388b8fef550a8dcea78aa4cc0250c416e606500" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/make_array&quot;&gt;&lt;code&gt;make_array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/to_array&quot;&gt;&lt;code&gt;to_array&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e844cdb591d70ed7b98bc7e9620e913ea6e33eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/map/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/multimap/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3773bf77ccbaa1625563491fc06b0559fe36372c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/randint&quot;&gt;&lt;code&gt;randint&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/reseed&quot;&gt;&lt;code&gt;reseed&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681a145e57620aef4d2e338a5a352db43aa84908" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/ranges/concepts/UniformRandomNumberGenerator&quot;&gt;&lt;code&gt;UniformRandomNumberGenerator&lt;/code&gt;&lt;/a&gt; concept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7604106cdd9ae387a8597a8d811f0f5dcae4c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/sample&quot;&gt;&lt;code&gt;sample&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/search&quot;&gt;&lt;code&gt;search&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c381be6d52e82352ac6b5463ed239d882b84668" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/sample&quot;&gt;&lt;code&gt;sample&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/shuffle&quot;&gt;&lt;code&gt;shuffle&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848a2dfcb2af789ccbd766f6dd895ce0350d71e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/set/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/multiset/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5ba919ae3d047cfe871e8fac3d97d9089007f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/shared_ptr&quot;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/weak_ptr&quot;&gt;&lt;code&gt;weak_ptr&lt;/code&gt;&lt;/a&gt; with array support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efba80c145c672f3a4441fe249721d8efb774e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/type_trait_variable_templates&quot;&gt; Variable templates for type traits&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/apply&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c887d64333f7a15a9bfa7af3351f9964cca3ffe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/type_trait_variable_templates&quot;&gt; Variable templates for type traits&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/invocation_type&quot;&gt;&lt;code&gt;invocation_type&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e252e42630a4b8f13f5e3012e528526f3a579dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/unordered_map/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/unordered_multimap/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566a29396568cb4dddacf5ba5c8d9fcd2dba65d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/unordered_set/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/unordered_multiset/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1597633c30bffe4e16e66714348a10707d3c6d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/vector/erase&quot;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/vector/erase_if&quot;&gt;&lt;code&gt;erase_if&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bac5d8d8a3552b5777e4cd052d1366de02032f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Sub-expressions&quot;&gt;number of marked subexpressions&lt;/a&gt; plus 1, that is, &lt;code&gt;1+e.mark_count()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0aaaae85e6bf9afb40ed9ad8f651679ed9347f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://h20565.www2.hpe.com/hpsc/doc/public/display?sp4ts.oid=4268164&amp;amp;docLocale=en_US&amp;amp;docId=emr_na-c02653979&quot;&gt;Release nodes (includes pragmas)&lt;/a&gt; for HP aCC A.06.25</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7081b5340f4d5240d9bf7007ce88df5a8c1f40de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://herbsutter.com/gotw/_100/&quot;&gt;GotW #100&lt;/a&gt;: Compilation Firewalls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9b9fb7039e8464e83dc679dbcaea2ef09b8bd1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://lwn.net/Articles/342330/&quot;&gt;Fun with NULL pointers, part 1&lt;/a&gt; (local exploit in Linux 2.6.30 caused by UB due to null pointer dereference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a160b40b6e17037de810330f5cfe07603e3c9a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html&quot;&gt;Weisstein, Eric W. &quot;Associated Laguerre Polynomial.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5991ccab0ec7403e472452922ac4a222d16c7d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/AssociatedLegendrePolynomial.html&quot;&gt;Weisstein, Eric W. &quot;Associated Legendre Polynomial.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1d18fae61dda3f4f626ff48f61b90d64812faf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/BernoulliDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Bernoulli Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f478e1faf92ed5f5af8417c1fda29cae60174e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/BesselFunctionoftheFirstKind.html&quot;&gt;Weisstein, Eric W. &quot;Bessel Function of the First Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a48f358172db42f97047027d441fc0c2af8b6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/BesselFunctionoftheSecondKind.html&quot;&gt;Weisstein, Eric W. &quot;Bessel Function of the Second Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05998d3af3340ecb2c61e00797b135a16349e831" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/BetaFunction.html&quot;&gt;Weisstein, Eric W. &quot;Beta Function.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b45f7a3182e2ce8151ed0c5df01682150b2de67" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/BinomialDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Binomial Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a47914a216fc99d4fe47ef0ebc638dc579fdbb3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/CauchyDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Cauchy Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource. &lt;a href=&quot;https://en.wikipedia.org/wiki/Cauchy_distribution&quot;&gt;Cauchy Distribution.&lt;/a&gt; From Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec47e10f0fc3ec3d2d07c15200174b3afefb325" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/Chi-SquaredDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Chi-Squared Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600cc25da2b3a7739f87ed6318b5c831f5341592" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/CompleteEllipticIntegraloftheFirstKind.html&quot;&gt;Weisstein, Eric W. &quot;Complete Elliptic Integral of the First Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2eda7e8cd106ecd5c5a31c6f94587b0b6931db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/CompleteEllipticIntegraloftheSecondKind.html&quot;&gt;Weisstein, Eric W. &quot;Complete Elliptic Integral of the Second Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8c12680e7056a9b5c6267c5b304ba6842e15f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/EllipticIntegraloftheFirstKind.html&quot;&gt;Weisstein, Eric W. &quot;Elliptic Integral of the First Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db12ed430c1f8849ffe301099beb1fab9f751db4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/EllipticIntegraloftheSecondKind.html&quot;&gt;Weisstein, Eric W. &quot;Elliptic Integral of the Second Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de541c7172ddc9935901fb8dfda29f3b1f18a317" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/EllipticIntegraloftheThirdKind.html&quot;&gt;Weisstein, Eric W. &quot;Elliptic Integral of the Second Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559177537afba73c608a8f76c878f5f2c65019a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/EllipticIntegraloftheThirdKind.html&quot;&gt;Weisstein, Eric W. &quot;Elliptic Integral of the Third Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706e9603880f645f0c19e748e3e4665d875d8248" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/Erf.html&quot;&gt;Weisstein, Eric W. &quot;Erf.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d45f19525812131f00eea0626d77a33e0eccd9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/Erfc.html&quot;&gt;Weisstein, Eric W. &quot;Erfc.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d85759803986cfc12fd2e4579062ea694f65b87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/ExponentialDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Exponential Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c406c6aa64f9a8125c0be65e167d1b50ea97c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/ExponentialIntegral.html&quot;&gt;Weisstein, Eric W. &quot;Exponential Integral.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd90c195fa337753e25561b3c8ecd68f993d394b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/ExtremeValueDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Extreme Value Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8becb84b539a36a73cd43cb44e6c3848a3fe0387" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/F-Distribution.html&quot;&gt;Weisstein, Eric W. &quot;F-Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b5f6f5f0e8d1d04910a96ea04fc9ce4a4a398f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/GammaDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Gamma Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7163d4b2b3c3be13117934c41e5c0efdcfc0077e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/GammaFunction.html&quot;&gt;Weisstein, Eric W. &quot;Gamma Function.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc672079c5914b587d157b0c7f141abcec93c6fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/GeometricDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Geometric Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9236f4dc9fbb94ca3db376b8a21c4fe8a1f031a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/HermitePolynomial.html&quot;&gt;Weisstein, Eric W. &quot;&quot;Hermite Polynomial.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cc842e0b1b9058a82a47a061f36f9ce65998c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/InverseHyperbolicCosine.html&quot;&gt;Weisstein, Eric W. &quot;Inverse Hyperbolic Cosine.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfeda1f0930f7fcbc14102b1f0e0447c314d0cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/InverseHyperbolicSine.html&quot;&gt;Weisstein, Eric W. &quot;Inverse Hyperbolic Sine.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed120a407b1c1093e4307ec3adec1972081a6c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/InverseHyperbolicTangent.html&quot;&gt;Weisstein, Eric W. &quot;Inverse Hyperbolic Tangent.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aff189c8033c40483c29c9944bffc084b030862" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/LaguerrePolynomial.html&quot;&gt;Weisstein, Eric W. &quot;Laguerre Polynomial.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfee8608cbc68249d300a119392d8dcf5ee8585a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/LegendrePolynomial.html&quot;&gt;Weisstein, Eric W. &quot;Legendre Polynomial.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76145a0033656e4c8caf997fecdc3e057f1eab6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/LogGammaFunction.html&quot;&gt;Weisstein, Eric W. &quot;Log Gamma Function.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2747742b18719889aaa404431fc0ccf686ded75b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/LogNormalDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Log Normal Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cd1342bda7ee8e79d76f2a1d99820f62acf5e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/ModifiedBesselFunctionoftheFirstKind.html&quot;&gt;Weisstein, Eric W. &quot;Modified Bessel Function of the First Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5f71d0691719895c54f07533d640a3a85313db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/ModifiedBesselFunctionoftheSecondKind.html&quot;&gt;Weisstein, Eric W. &quot;Modified Bessel Function of the Second Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2f858ee64946c52b30d2d3c00a6f832307561f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Negative Binomial Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae04b3d235aee23dd4df446b21ad41824c973eb3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/NormalDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Normal Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72179e0bf06bbd4dccbbdd4d12551fb73609e935" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/PoissonDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Poisson Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae78645c6a841fb2d7d1ec6c940d7b423896208" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/RiemannZetaFunction.html&quot;&gt;Weisstein, Eric W. &quot;Riemann Zeta Function.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34005d212bacd0b4dec368cc6908a9fc7b18655f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/SphericalBesselFunctionoftheFirstKind.html&quot;&gt;Weisstein, Eric W. &quot;Spherical Bessel Function of the First Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a2326671aa66ce74e02a23c2dd489a7d79dee9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/SphericalBesselFunctionoftheSecondKind.html&quot;&gt;Weisstein, Eric W. &quot;Spherical Bessel Function of the Second Kind.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713aedd884af66f203982ae9228fcfd051a6cb84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/SphericalHarmonic.html&quot;&gt;Weisstein, Eric W. &quot;Spherical Harmonic.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ca46dcc89f43426da4bdbccf0a27e59ff4b7b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/Studentst-Distribution.html&quot;&gt;Weisstein, Eric W. &quot;Student's t-Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546c7621c6d5349490633cd1b1879d337c0b1c00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mathworld.wolfram.com/WeibullDistribution.html&quot;&gt;Weisstein, Eric W. &quot;Weibull Distribution.&quot;&lt;/a&gt; From MathWorld--A Wolfram Web Resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51097761a9a5fc7b31f963a2cf74cec9e873db4c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/atan.html&quot;&gt;POSIX specifies&lt;/a&gt; that in case of underflow, &lt;code&gt;arg&lt;/code&gt; is returned unmodified, and if that is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673b74978f370bef258a43e5ad86b17999b7f46a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/atan2.html&quot;&gt;POSIX specifies&lt;/a&gt; that in case of underflow, &lt;code&gt;y/x&lt;/code&gt; is the value returned, and if that is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c3bd561283089c616aadb6eff17dfc1409a85a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/atanh.html&quot;&gt;POSIX specifies&lt;/a&gt; that in case of underflow, &lt;code&gt;arg&lt;/code&gt; is returned unmodified, and if that is not supported, an implementation-defined value no greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08432ddfa8090110fa403496f10c0404de2bbd0b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/fma.html&quot;&gt;POSIX additionally specifies&lt;/a&gt; that the situations specified to return &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INVALID&lt;/a&gt;&lt;/code&gt; are domain errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3407a1fc72583ccd33d4fb8776c0fa8f2c290106" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/fmod.html&quot;&gt;POSIX requires&lt;/a&gt; that a domain error occurs if &lt;code&gt;x&lt;/code&gt; is infinite or &lt;code&gt;y&lt;/code&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e2f53fd8017ce8e1578dbf0d45cc5e733a4ba5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/fprintf.html&quot;&gt;POSIX specifies&lt;/a&gt; that &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; is set on error. It also specifies additional conversion specifications, most notably support for argument reordering (&lt;code&gt;n$&lt;/code&gt; immediately after &lt;code&gt;%&lt;/code&gt; indicates &lt;code&gt;n&lt;/code&gt;'th argument).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196c58b795cef78674c2d4f26fc9b80a846b01be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/hypot.html&quot;&gt;POSIX specifies&lt;/a&gt; that underflow may only occur when both arguments are subnormal and the correct result is also subnormal (this forbids naive implementations).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e132310a0eda6e5525b0c6b3662293d4359f0949" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/ilogb.html&quot;&gt;POSIX requires&lt;/a&gt; that a domain error occurs if &lt;code&gt;arg&lt;/code&gt; is zero, infinite, NaN, or if the correct result is outside of the range of &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a951d9d9deb0e8c404a9dc74d7cc67b59a4fe0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/localtime.html&quot;&gt;POSIX specifies&lt;/a&gt; that the timezone information is determined by this function as if by calling &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/tzset.html&quot;&gt;tzset&lt;/a&gt;, which reads the environment variable &lt;code&gt;TZ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba86eabfe34b2dce4c80cc19e3139425e85c01c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/logb.html&quot;&gt;POSIX requires&lt;/a&gt; that a pole error occurs if &lt;code&gt;arg&lt;/code&gt; is &amp;plusmn;0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffabac44d50f7f240f3a1fb7e5fa3fdf857d3eab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lrint.html&quot;&gt;POSIX specifies&lt;/a&gt; that all cases where &lt;code&gt;std::lrint&lt;/code&gt; or &lt;code&gt;std::llrint&lt;/code&gt; raise &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INEXACT&lt;/a&gt;&lt;/code&gt; are domain errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4968360f39da450c395d60578fced0f391753d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lround.html&quot;&gt;POSIX specifies&lt;/a&gt; that all cases where &lt;code&gt;std::lround&lt;/code&gt; or &lt;code&gt;std::llround&lt;/code&gt; raise &lt;code&gt;&lt;a href=&quot;../fenv/fe_exceptions&quot;&gt;FE_INEXACT&lt;/a&gt;&lt;/code&gt; are domain errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9804fa6204c7b4d8c1868c9ccc0fdedc6ee2a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/nextafter.html&quot;&gt;POSIX specifies&lt;/a&gt; that the overflow and the underflow conditions are range errors (errno may be set).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cc2d74ee815e9de756c2ff67374aee7daba639" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/remainder.html&quot;&gt;POSIX requires&lt;/a&gt; that a domain error occurs if &lt;code&gt;x&lt;/code&gt; is infinite or &lt;code&gt;y&lt;/code&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c2b137d2950e7b8de0f29329e75dac32a3bcc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/remove.html&quot;&gt;POSIX specifies&lt;/a&gt; many additional details for the behavior of this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcf45ea20d4fe2cd0415d808218952e3a85c84f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/remquo.html&quot;&gt;POSIX requires&lt;/a&gt; that a domain error occurs if &lt;code&gt;x&lt;/code&gt; is infinite or &lt;code&gt;y&lt;/code&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e523a6b003540f6e8ffea12c0443e9a4edf224e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html&quot;&gt;POSIX&lt;/a&gt; specifies many additional details on the semantics of this function, which are reproduced in C++ by &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/fs/rename&quot;&gt;std::experimental::filesystem::rename&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7cf621ca2c48d2d61cb1f51698c02d086b1bd0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/sinh.html&quot;&gt;POSIX specifies&lt;/a&gt; that in case of underflow, &lt;code&gt;arg&lt;/code&gt; is returned unmodified, and if that is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e9e3a13388a7256152a338c05328720a49993c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/strerror.html&quot;&gt;POSIX&lt;/a&gt; allows subsequent calls to &lt;code&gt;strerror&lt;/code&gt; to invalidate the pointer value returned by an earlier call. It also specifies that it is the &lt;a href=&quot;../../locale/lc_categories&quot;&gt;&lt;code&gt;LC_MESSAGES&lt;/code&gt;&lt;/a&gt; locale facet that controls the contents of these messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8966f3192d15e4eb290c6e4dfe4c06a26804b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/tanh.html&quot;&gt;POSIX specifies&lt;/a&gt; that in case of underflow, &lt;code&gt;arg&lt;/code&gt; is returned unmodified, and if that is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389376a3530f84dbb769897a236a48acab3a9a16" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/tgamma.html&quot;&gt;POSIX requires&lt;/a&gt; that a pole error occurs if the argument is zero, but a domain error occurs when the argument is a negative integer. It also specifies that in future, domain errors may be replaced by pole errors for negative integer arguments (in which case the return value in those cases would change from NaN to &amp;plusmn;&amp;infin;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee15e3bda562cc05543c88fb2d7699d93861c5d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_01&quot;&gt;Shell Introduction&lt;/a&gt; POSIX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a6cd839a0e168fcbe557002d48f222e0c5203c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://stackoverflow.com/questions/4421706/operator-overloading/4421708#4421708&quot;&gt;Operator Overloading&lt;/a&gt; on StackOverflow C++ FAQ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305c0e9500d15faff9b6d0cc0b6bd4e7993a6633" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www-01.ibm.com/support/knowledgecenter/SSGH2K_13.1.0/com.ibm.xlc131.aix.doc/compiler_ref/pragma_descriptions.html?lang=en-us&quot;&gt;Individual pragma descriptions&lt;/a&gt; and &lt;a href=&quot;http://www-01.ibm.com/support/knowledgecenter/SSGH2K_13.1.0/com.ibm.xlc131.aix.doc/language_ref/std_pragmas.html?lang=en-us&quot;&gt;Standard pragmas&lt;/a&gt; in IBM AIX XL C 13.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5235877944fc1e219550fbc57f87703dc8e45d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/thread/synchronization.html#thread.synchronization.lock_functions.lock_range&quot;&gt;Boost provides a version of this function&lt;/a&gt; that takes a sequence of &lt;a href=&quot;../named_req/lockable&quot;&gt;Lockable&lt;/a&gt; objects defined by a pair of iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2e40a38e28d65653bff1cce4448e0a670295a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/utility/operators.htm&quot;&gt;Boost.operators&lt;/a&gt; provides a more versatile alternative to &lt;code&gt;std::rel_ops&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d739c3f19c7db0e9fcd29451c9e6ebfabbfced0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.cl.cam.ac.uk/~pes20/ppc-supplemental/test7.pdf&quot;&gt;A Tutorial Introduction to the ARM and POWER Relaxed Memory Models&lt;/a&gt; P. Sewell et al, 2012</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f953ef5440a965f09d13f20aceb2831cdf1aa1f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.cl.cam.ac.uk/~pes20/weakmemory/cacm.pdf&quot;&gt;x86-TSO: A Rigorous and Usable Programmer&amp;rsquo;s Model for x86 Multiprocessors&lt;/a&gt; P. Sewell et. al., 2010</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba02dd78e1cab9237d1ce9dc30ced440b4cac994" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; defines POSIX blank characters as Unicode characters U+0009, U+0020, U+1680, U+180E, U+2000..U+2006, U+2008, U+200A, U+205F, and U+3000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dec72fb8e455b184c0fb4933dc5ac7cd84f7ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX alnum category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fb5693832e9c46632b9ffda8d8fccd6b704bdb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX alpha category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42d9af636764925adf955c3d3d55f4024f6ccb8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX graph category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ded7ad6e787a03490d77a54e21f36f85b211755" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX lower category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767fdc6e7de1bd5302df32016fb0193d552c79e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX print category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32f06b8453ec24a0432e68e404402bb77328dc9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX punct category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9b0c4a8fd325d8cfdd46a840128dede8b6a6b1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which Unicode characters are include in POSIX upper category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cad26643d9c82b0741d8b5162e7b69927e5e93" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.open-std.org/JTC1/SC35/WG5/docs/30112d10.pdf&quot;&gt;ISO 30112&lt;/a&gt; specifies which pairs of Unicode characters are included in this mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e4d02638fce0759672f98e025674020983652c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.stroustrup.com/terminology.pdf&quot;&gt;&quot;New&quot; Value Terminology&lt;/a&gt; by Bjarne Stroustrup, 2010.</source>
          <target state="translated">&lt;a href=&quot;http://www.stroustrup.com/terminology.pdf&quot;&gt;&quot;New&quot; Value Terminology&lt;/a&gt; by Bjarne Stroustrup, 2010.</target>
        </trans-unit>
        <trans-unit id="f9f20637ed17c82fbe780392dd57b3e337261ac7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/import&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/import&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="30c2fec8463d99d93c54a4f052402fe666231b24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/module&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/module&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="9cd76ac38e4809f8c1144c58d2286bd036c18078" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/reflexpr&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;reflexpr&lt;/code&gt;&lt;/a&gt;(reflection TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebe567c668441e9af8d03d33ae16066a73eba5a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/language/cpp/language/operators&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; Operator overloading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43179a63952f610a7aa08056d359d3350bda26af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/single_view&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ranges::single_view&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;filter_view&quot;&gt;&lt;code&gt;ranges::filter_view&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/transform_view&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ranges::transform_view&lt;/code&gt;&lt;/a&gt; are specified in terms of an exposition-only class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de17a20e5640f32fe4eb4b5da3b9cb3eb1f480b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Chi-squared_distribution&quot;&gt;Chi-squared distribution.&lt;/a&gt; From Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b544573f86fba5ac685db84aeed294e97d24bf03" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Location_parameter&quot;&gt;Location parameter.&lt;/a&gt; From Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c548743a502324b0eb7ca7081fbcb72ab5619e28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Normal Distribution.&lt;/a&gt; From Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62d87099edb71d1e127c734aa1c5028f83781f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Scale_parameter&quot;&gt;Scale parameter.&lt;/a&gt; From Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e2095c432c51e32c34d45c2b7a203253aab145" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Weibull_distribution&quot;&gt;Weibull distribution.&lt;/a&gt; From Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4dd7ac6717d6bd230c7c2a5de0c10f7daefb80" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-4.9.2/gcc/Pragmas.html#Pragmas&quot;&gt;Pragmas&lt;/a&gt; accepted by GCC 4.9.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d448913c49be0b721434ca2dcc4a1c932b1066" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;Parsing C++ Command-Line Arguments&lt;/a&gt; MSDN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd2d1855eb569b1d0942fb234b22242e171a271" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://researchspace.auckland.ac.nz/bitstream/handle/2292/11594/MESIF-2009.pdf?sequence=6&quot;&gt;MESIF: A Two-Hop Cache Coherency Protocol for Point-to-Point Interconnects&lt;/a&gt; J.R. Goodman, H.H.J. Hum, 2009</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5396b30612cdb0f03ea299f28e9efd8ec3a49c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://software.intel.com/en-us/node/684191&quot;&gt;Intel C++ compiler pragmas&lt;/a&gt; in version 17.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08924f8acfb44352bf99f02e68af6917fda340c3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;implicit_cast&quot;&gt; standard conversions&lt;/a&gt; implicit conversions from one type to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67c598e91d9f2a624670996562832518b99985b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;implicit_cast&quot;&gt;Implicit conversion&lt;/a&gt; is defined in terms of copy-initialization: if an object of type &lt;code&gt;T&lt;/code&gt; can be copy-initialized with expression &lt;code&gt;E&lt;/code&gt;, then &lt;code&gt;E&lt;/code&gt; is implicitly convertible to &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cace5ca66a90a4c476922d8164aa8837eec45f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;implicit_cast&quot;&gt;Implicit conversions&lt;/a&gt; are defined between real floating types and integer types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adad7b9b86f7b599dd52f75c565ff38fc4ae4b71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;implicit_cast#Lvalue_to_rvalue_conversion&quot;&gt;lvalue-to-rvalue conversion&lt;/a&gt; applied to a glvalue of type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e254f9ed79f0c2f6149a70d281bfa775a70a01" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete_type&quot;&gt;Incomplete types&lt;/a&gt;, pointers or references to incomplete types other than cv &lt;code&gt;void*&lt;/code&gt;, and rvalue reference types are not allowed in the exception specification. Array and function types, if used, are adjusted to corresponding pointer types. &lt;a href=&quot;parameter_pack&quot;&gt;parameter packs&lt;/a&gt; are allowed(since C++11).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5f777a9ca04d78f1e7a06efcf0f13499da9360" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete_type&quot;&gt;incomplete types&lt;/a&gt;, &lt;a href=&quot;abstract_class&quot;&gt;abstract class types&lt;/a&gt;, and arrays thereof are not allowed: in particular, a class &lt;code&gt;C&lt;/code&gt; cannot have a non-static data member of type &lt;code&gt;C&lt;/code&gt;, although it can have a non-static data member of type &lt;code&gt;C&amp;amp;&lt;/code&gt; (reference to C) or &lt;code&gt;C*&lt;/code&gt; (pointer to C);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690ae5657f0f9b5d1e87a6344a2d3bc2f4fe4158" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;initializer_list&quot;&gt;&lt;code&gt;&amp;lt;initializer_list&amp;gt;&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;initializer_list&quot;&gt;&lt;code&gt;&amp;lt;initializer_list&amp;gt;&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="35d2fc1ebade2bfe85e825718f4ab8a17e805c04" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;inputiterator&quot;&gt;LegacyInputIterators&lt;/a&gt; denoting a valid range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cf3c9250bd8cf9600c4d081ddac862c284c13e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;inputiterator&quot;&gt;LegacyInputIterators&lt;/a&gt; denoting a valid range and referring to elements implicitly convertible to &lt;code&gt;X::value_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc8e68581d00b2a841cba809411d3b50f4e9753" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;insert_or_assign&quot;&gt;&lt;code&gt;insert_or_assign()&lt;/code&gt;&lt;/a&gt; returns more information than &lt;code&gt;operator[]&lt;/code&gt; and does not require default-constructibility of the mapped type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf3c39352a5c697433c8005d422cd26045aab36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;integer_literal&quot;&gt;integer literals&lt;/a&gt; are decimal, octal, hexadecimal or binary numbers of integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbba27ffb91eb93b4bac0dad35a2ffb50e9d257" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswalnum&quot;&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswalnum&quot;&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="06fab6c995b417a8451ad0ba927a36e5ba18610f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswalpha&quot;&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswalpha&quot;&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c9d41678f8acd12e52e28f825fee908d2accc435" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswblank&quot;&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswblank&quot;&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a103b7632e557059af3e98247852e6316c8ccbfc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswcntrl&quot;&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswcntrl&quot;&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="98091f7b2ac4a210ffefaed8c56adcc212446a6d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswdigit&quot;&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswdigit&quot;&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="37ab874773dec4ea321c0a9e61a2ab30e56c7b01" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswgraph&quot;&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswgraph&quot;&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1562f918b071a35d931486f3ac4f9761958582c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswlower&quot;&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswlower&quot;&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7abf2ab7160dc112366cfdf221cdc3165af2a398" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswprint&quot;&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswprint&quot;&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6f9b8de022128831dde2e51d9193f6e79e2eb3b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswpunct&quot;&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswpunct&quot;&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="956f99096aabfc4c40f249ded3c7cb196ad0de78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswspace&quot;&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswspace&quot;&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="952b821295ec1950d86c24634ac87ebdb301c711" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswupper&quot;&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswupper&quot;&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1b68495cb2967ec576b1c12e47d0b09b5d6486c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iswxdigit&quot;&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;iswxdigit&quot;&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c2ecd88788316f884d5c7770659e1349d2a1f598" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iword&quot;&gt;&lt;code&gt;ios_base::iword&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pword&quot;&gt;&lt;code&gt;ios_base::pword&lt;/code&gt;&lt;/a&gt; on failure (e.g. failure to allocate memory)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b341d65e4f4b4ffb4bcb7ca3bf92cdeb07ef7986" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/alignas&quot;&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5160857f51a53de60dc5f557b10d2855f4b8c69e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/alignof&quot;&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102a8753cb560dfb299ce75ed042b02d6fe61eac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="4c4f569c4908d604ddd0d39b48dc5cccddaef3ef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/char16_t&quot;&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caaa4735cedd81b1db3a0000558fe1664ad96488" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/char32_t&quot;&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60974ca5eed0af2bc6f5f91f442aa6fd860269cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/char8_t&quot;&gt;&lt;code&gt;char8_t&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbad89ad010137bbc972980d7601ea52eea80f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/class&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/class&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="e6267a39703587d74f67ba42b3cfa28cb276c9df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/co_await&quot;&gt;&lt;code&gt;co_await&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf044679e9a86666d1a10f33d7a14dfebdc8821a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/co_return&quot;&gt;&lt;code&gt;co_return&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6068bd6dc82a4007d2f25b70fbaf8bacc49b99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/co_yield&quot;&gt;&lt;code&gt;co_yield&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc8ac6fee6b3580c93d360c6265211dafd04a10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/concept&quot;&gt;&lt;code&gt;concept&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310215f7cf95f50418129473f2dcda7159f66cce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/consteval&quot;&gt;&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cdca006bccc92be756f0b72683e3353caf7980" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/constexpr&quot;&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dd45ddb02ed17f4e5c6cbd66721fbc176b6cb9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a422e68d5bc5551dcfd23992542b7a29686d30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="6c76c77fa9c5f75595849ca7219d9a4104444cb4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="b15fda08094d593fd7bb4c81983e656f48f5e814" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;(1)(3)</source>
          <target state="translated">&lt;a href=&quot;keyword/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;(1)(3)</target>
        </trans-unit>
        <trans-unit id="1b416c296c45b75e466933de83e49db04737295b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/extern&quot;&gt;&lt;code&gt;extern&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="c9668f19af66e2a76ec934a61e6291cb6036a24f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/inline&quot;&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/inline&quot;&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="fbe2da503876d749cb885708728d4f5183e95a62" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/mutable&quot;&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/mutable&quot;&gt;&lt;code&gt;mutable&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="066b8926c9f79e849a86a37cda5be43670d58ff1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/noexcept&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c6e88e797d27b65bc404ffd8a9363c23b623dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/nullptr&quot;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb71c6f3b5b7150f407d71107dd7a3d941e4287" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/register&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt;(2)</source>
          <target state="translated">&lt;a href=&quot;keyword/register&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt;(2)</target>
        </trans-unit>
        <trans-unit id="07e3c5283bc85f5407b7c50a469a39fcfc9b3bcb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/requires&quot;&gt;&lt;code&gt;requires&lt;/code&gt;&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b339c86ca813418ff7575523102d7bd7c15fe9a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="7fa41b97bf9574ab1eb4eece1a65b4521fbc7ced" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/static_assert&quot;&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce176e1c330527b84bb7540b4f9990bc0f872216" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="f9ad4442d4b57cec047021ddf54ef9d640d86f50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/thread_local&quot;&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8360b7e9f3bb777ae3f282942788aa4c49e1de38" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/using&quot;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt;(1)</source>
          <target state="translated">&lt;a href=&quot;keyword/using&quot;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt;(1)</target>
        </trans-unit>
        <trans-unit id="f739f770c78a452a60142174d4268fecde4db12d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keyword/xor_eq&quot;&gt;&lt;code&gt;xor_eq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;keyword/xor_eq&quot;&gt;&lt;code&gt;xor_eq&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cbeccd20e35bdb9bbb084ce2673ec65a54c3cda1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;lambda&quot;&gt;lambda expression&lt;/a&gt;,(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd002d9dbbcd02be83a3e3dfe65cc7898ae05150" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/access&quot;&gt; Member access&lt;/a&gt; - &lt;a href=&quot;language/friend&quot;&gt;&lt;code&gt;friend&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee5fb0d15f0da8ee3e1b0cceaf0a8f5d9ab4c11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/acronyms&quot;&gt; Acronyms&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;language/acronyms&quot;&gt; Acronyms&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a01dc157bf038fa37ec02060224ba4458550156c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/aggregate_initialization&quot;&gt;Aggregate initialization&lt;/a&gt; in the form of &lt;a href=&quot;language/direct_initialization&quot;&gt;direct initialization&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96036f441201f66fa1d4ed0eeea24ffa9e38f4a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/alignas&quot;&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;language/alignas&quot;&gt;&lt;code&gt;alignas&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="13707b4cba6bd0855beb4c646a6ed41c2b562f10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/attributes&quot;&gt; Attributes&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;language/attributes&quot;&gt; Attributes&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="20d5c8fb4d779c0a185d977c404669ab706681ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/attributes/contract&quot;&gt;&lt;code&gt;audit&lt;/code&gt;&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;language/attributes/contract&quot;&gt;&lt;code&gt;audit&lt;/code&gt;&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="635e83c093e145dfe5752acd1490f710aaf9d354" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/attributes/contract&quot;&gt;&lt;code&gt;axiom&lt;/code&gt;&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;language/attributes/contract&quot;&gt;&lt;code&gt;axiom&lt;/code&gt;&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="3e596a9b0aa0d6cb12c3a234cecc053b24d94179" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/bit_field&quot;&gt; Bit fields&lt;/a&gt; - &lt;a href=&quot;language/this&quot;&gt; The &lt;code&gt;this&lt;/code&gt; pointer&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef51b3d3fc2389a2fc39dac4853d0fd6cb16c2a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/bool_literal&quot;&gt; boolean &lt;/a&gt; - &lt;a href=&quot;language/integer_literal&quot;&gt; integer &lt;/a&gt; - &lt;a href=&quot;language/floating_literal&quot;&gt; floating &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b46a4a73dfe15c3de1d58d903411d69f16713d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/character_literal&quot;&gt; character &lt;/a&gt; - &lt;a href=&quot;language/string_literal&quot;&gt; string &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead46210c3860f43f337a63946eedaf2d804f3d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/class&quot;&gt; Class types&lt;/a&gt; - &lt;a href=&quot;language/union&quot;&gt; Union types&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4df638fcc11d7d4dd1e64892a87c5ec372e58f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/class_template&quot;&gt; Class template&lt;/a&gt; - &lt;a href=&quot;language/function_template&quot;&gt; Function template&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaab37c1f2a7c10c395d3363b2194f7192b7a011" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/const_cast&quot;&gt;&lt;code&gt;const_cast&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1216e4dcc60064dd4569bd415dee66120018caf9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/constraints&quot;&gt; Constraints and concepts&lt;/a&gt;(C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5c0a10481f609011175ebbcbbf4fb52e290dfe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/goto&quot;&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc98c2c0bc144548aed3b4b4a0370771b6f8b26c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/converting_constructor&quot;&gt; Converting constructor&lt;/a&gt; - &lt;a href=&quot;language/explicit&quot;&gt; &lt;code&gt;explicit&lt;/code&gt; specifier&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6986541f617a848a21f677670b9b8eb50f7d469d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/copy_constructor&quot;&gt; Copy constructor&lt;/a&gt; - &lt;a href=&quot;language/as_operator&quot;&gt; Copy assignment&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b958e04b7a334c2d0962e3ce38885afe8432d463" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/copy_elision&quot;&gt; Copy elision&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbc6926e112b4461de29e9a077d5ca7e271a002" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/coroutines&quot;&gt; Coroutines &lt;/a&gt;(C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56c88a3a8163c3e11388d6384484bdddb88e888" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/cv&quot;&gt; &lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/constexpr&quot;&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6eedc0cdff229c31175df59167a584d0c95307" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/data_members&quot;&gt; Data members&lt;/a&gt; - &lt;a href=&quot;language/member_functions&quot;&gt; Member functions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acddac20cd3304dfe31d5577882021b9c34e91b1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/a&gt;(C++11) - &lt;a href=&quot;language/auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3debd38b0d371eb61349eaa157396cade0941abf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/deduction_guide&quot;&gt; Class template argument deduction&lt;/a&gt;(C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6c66e37191dd58f54619763d3337af8870bff3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/default_comparisons&quot;&gt; Default comparisons&lt;/a&gt;(C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719ef24880a70a9695270a2de224af9c1c3c0bda" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/default_constructor&quot;&gt; Default constructor&lt;/a&gt; - &lt;a href=&quot;language/destructor&quot;&gt; Destructor&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5aa9c61147f2130a31e9934f2299e8ccac5721" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/dependent_name&quot;&gt; Dependent names&lt;/a&gt; - &lt;a href=&quot;language/sfinae&quot;&gt; SFINAE&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd832f137c0875d060a6e151a727de6234aa366a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/derived_class&quot;&gt; Derived class&lt;/a&gt; - &lt;a href=&quot;language/using_declaration&quot;&gt; &lt;code&gt;using&lt;/code&gt;-declaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732d4007c7fedea8da32880a3c57e2c96c1b9b89" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/except_spec&quot;&gt; Dynamic exception specification&lt;/a&gt;(until C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f9f3117ad67a862ba94f81a0022b9fca8476ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/final&quot;&gt;&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;language/final&quot;&gt;&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="48402958d8546f913783fae50ef166f14dbe1327" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/fold&quot;&gt; Fold-expressions&lt;/a&gt;(C++17)</source>
          <target state="translated">&lt;a href=&quot;language/fold&quot;&gt; Fold-expressions&lt;/a&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="3dc48026160365ac9737852012bb40adea3c9201" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/range-for&quot;&gt; range-&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2890d77e0d79658c7ec633da6c0a72d997a940" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f8ad04bee08f36668ab75887c8fd3ecc86eab7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/implicit_cast&quot;&gt; implicit &lt;/a&gt; - &lt;a href=&quot;language/explicit_cast&quot;&gt; explicit &lt;/a&gt; - &lt;a href=&quot;language/cast_operator&quot;&gt; user-defined &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd1f2cfc96a4ef5672a6032d48bdcfa38f1b4fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/initialization#Non-local_variables&quot;&gt;ordered&lt;/a&gt; - &lt;a href=&quot;language/initialization#Non-local_variables&quot;&gt;unordered&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2d68a175ee0cd1d65a7bd44b409544c125029b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/lambda&quot;&gt; Lambda expression&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35979ac248e8f0c0a59efe6c2f8cf109c2653b06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/list_initialization&quot;&gt; List initialization&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ad25c28910e63c7c875f7c168438040021460d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/modules&quot;&gt; Modules&lt;/a&gt;(C++20)</source>
          <target state="translated">&lt;a href=&quot;language/modules&quot;&gt; Modules&lt;/a&gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="8fc86109e31714f905fba02aefdad3dab83df322" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/move_constructor&quot;&gt; Move constructor&lt;/a&gt;(C++11) - &lt;a href=&quot;language/move_operator&quot;&gt; Move assignment&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04edbf8c66a0cc8448ba8ab1fc8b396d89eed1d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c55d579f558597ef814953c54d5e35e6c452c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/noexcept&quot;&gt; &lt;code&gt;noexcept&lt;/code&gt; operator&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41a23e0e6535bc28f179198958fb62687b7a6a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/noexcept_spec&quot;&gt; &lt;code&gt;noexcept&lt;/code&gt; specifier&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce675d6766850e23743786c1d3df6adaaa56b57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/nullptr&quot;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;language/nullptr&quot;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="9d8a5a92f6885f69bc874a186bf8996d4d456ab7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/objects&quot;&gt; Object&lt;/a&gt; - &lt;a href=&quot;language/scope&quot;&gt; Scope&lt;/a&gt; - &lt;a href=&quot;language/lifetime&quot;&gt; Lifetime&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10f844d6afebe0a0399eafced2a180c2fba3b88" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/operator_assignment&quot;&gt; assignment &lt;/a&gt; - &lt;a href=&quot;language/operator_arithmetic&quot;&gt; arithmetic &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78fd4a83275daab22b0ae469b91fce3803a0c0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/operator_comparison#Three-way_comparison&quot;&gt;Three-way comparison operator&lt;/a&gt; support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5222acfbf780994436034c0b114610f9f61c9249" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/operator_comparison#Three-way_comparison&quot;&gt;Three-way comparison&lt;/a&gt; (compiler support)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35381300aeb616effa3a2ff6e2e44307b04101cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/operator_comparison#Three-way_comparison&quot;&gt;Three-way comparison&lt;/a&gt; (library support)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a44340b27c10a5c0214d471b63f244a271575d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/operator_logical&quot;&gt; logical &lt;/a&gt; - &lt;a href=&quot;language/operator_comparison&quot;&gt; comparison &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777c08fc9e46705fbca38e03fcf25ecc387779f8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/override&quot;&gt;&lt;code&gt;override&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;language/override&quot;&gt;&lt;code&gt;override&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="fd544965a7d8968550e22f8e90f7ce359c00315e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/override&quot;&gt;&lt;code&gt;override&lt;/code&gt;&lt;/a&gt;(C++11) - &lt;a href=&quot;language/final&quot;&gt;&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8192baa2628e64f520ff3c97c6c1ee6a37d02e6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/parameter_pack&quot;&gt; Parameter packs&lt;/a&gt;(C++11) - &lt;a href=&quot;language/sizeof...&quot;&gt;&lt;code&gt;sizeof...&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5751e702c29eed41dc44e67a83e377f344566326" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/pimpl&quot;&gt; Pointer to implementation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b8bae595086aad64e913cd53dc0accccef240d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/pointer&quot;&gt; Pointers&lt;/a&gt; - &lt;a href=&quot;language/array&quot;&gt; Arrays&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1826dbb2d37a8e926563dfce16c2bef02c382f7c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/qualified_lookup&quot;&gt; qualified &lt;/a&gt; - &lt;a href=&quot;language/unqualified_lookup&quot;&gt; unqualified&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1d0c8510f5a7571abffe043b8972cd83315713" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/alignof&quot;&gt;&lt;code&gt;alignof&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290d4cbdc2bb1d170c889c8f0c2a8aa7e791cedd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/static&quot;&gt; Static members&lt;/a&gt; - &lt;a href=&quot;language/nested_classes&quot;&gt; Nested classes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab465f82249c12b2551059e987d7aed357793e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/static_assert&quot;&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;language/static_assert&quot;&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="c4f5995586e983ced761e961767487f57eff6898" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d03327356cbac77154e813ca0281e0bfb692095" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/structured_binding&quot;&gt; Structured bindings&lt;/a&gt;(C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59290481e0da4f7ec8bdd11e485de2595531529" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt; &lt;code&gt;synchronized&lt;/code&gt; and &lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed5782cda19e935215eca35bf5e1bbb853bd17b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt;&lt;code&gt;atomic_cancel&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356f5cf90a522c3196291d5aa45a82f1fd1d695a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt;&lt;code&gt;atomic_commit&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e094b411105c4739cbb41e79f7f009196df130" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt;&lt;code&gt;atomic_noexcept&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12db5398346bfa69c5d9f05b16d671f70955091" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a022316f6fe12b65ee7e311e7bd5055bc7dbfe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt;&lt;code&gt;transaction_safe&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bdbdbfff7b3686e6cebd7a7b0b439e7e9cef51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/transactional_memory&quot;&gt;&lt;code&gt;transaction_safe_dynamic&lt;/code&gt;&lt;/a&gt;(TM TS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854888efd77814242a3c6b0cf47cfd4762fbbd39" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/type-id&quot;&gt; Types&lt;/a&gt; - &lt;a href=&quot;language/types&quot;&gt; Fundamental types&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2348c8789eecb8b9496e3d0f3bd90c2a14ce5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/typedef&quot;&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/type_alias&quot;&gt; Type alias&lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc7c053ef4a9852c905c2047900d47be432f98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/types&quot;&gt;New character types&lt;/a&gt; (&lt;code&gt;char16_t&lt;/code&gt; and &lt;code&gt;char32_t&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4eee68c2423915ce078dd6b154ddad440b9bc9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/user_literal&quot;&gt; user-defined &lt;/a&gt;(C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2abe01a2124db8062d3b5049f0c2eee4e64a127" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/value_initialization&quot;&gt; Value initialization&lt;/a&gt;(C++03)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd067c694417447a569b8981bc50b83e42a55185" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/variable_template&quot;&gt; Variable template&lt;/a&gt;(C++14)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f1691d74eb72bbc55ac589b68c52a7b031b38c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/virtual&quot;&gt; Virtual function&lt;/a&gt; - &lt;a href=&quot;language/abstract_class&quot;&gt; Abstract class&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad92dbb94a47a185ef7d8706f97a5c3db928e35" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; - &lt;a href=&quot;language/do&quot;&gt; &lt;code&gt;do&lt;/code&gt;-&lt;code&gt;while&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da785f93b247027dbbb328b94edd71a11d770aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;language/zero_initialization&quot;&gt;zero&lt;/a&gt; - &lt;a href=&quot;language/constant_initialization&quot;&gt;constant&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a885e0a94da394d3d8fc1e65218cefb2dcfab7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;lifetime&quot;&gt;lifetime&lt;/a&gt; (bounded by storage duration or temporary);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cac1b7ef0f75c33aa678269617d13bade06274e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b45cbebdcf0b882869c6ca44abfadddb385a75" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list_initialization&quot;&gt;List initialization&lt;/a&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt; s{'a', 'b', 'c'};&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f72cf3cf0fd1b560a9bdbed8c9a4984f8a177a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;list_initialization&quot;&gt;list-initialization&lt;/a&gt; that constructs an &lt;code&gt;&lt;a href=&quot;../utility/initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;,(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551969660651d27a321de5c6e178cff05595d771" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;manip&quot;&gt; Input/output manipulators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0edb2f366e777f5efb16ed44aae736b8c0ec8b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;map/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400652a12d77e3997f1fe147a1e7dbdabe9126c3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;member_functions&quot;&gt;member function&lt;/a&gt; of a class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff7db8fc6c8cfc3361a1c4c6e897aafc3b49dec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;member_template&quot;&gt;member class template&lt;/a&gt; of a class or class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b04a874c52bdbe41bb317dd7c04afba83a6ec01" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;member_template#Member_function_templates&quot;&gt;member function template&lt;/a&gt; of a class or class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f336895d0fcb295e95c20f84534a817c42269b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;memory/new/operator_delete&quot;&gt;Destroying operator delete&lt;/a&gt; (compiler support)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2944348ba5ee309d0aa33bd307e8702c4e8e5fe7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;memory/new/operator_delete&quot;&gt;Destroying operator delete&lt;/a&gt; (library support)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ec026105fdd20157192560cb257eee27f0bacd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;move_constructor&quot;&gt;Move constructor&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a48b5188571df445c298295aa6096161e53ab0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;move_operator&quot;&gt;Move assignment operator&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1fa8fa6d3d77b4a345b3ba5d894157011a8fc8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;multimap/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4a39b64b2a9f2602dd264a61c5ff0269bb076f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;multiset/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1dc128399feeec1dfc3b41074fdd8bc01f7bb32" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;named_req/clock&quot;&gt;Clock&lt;/a&gt; for Coordinated Universal Time (UTC)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443e894a68d526685e21be3d1ba7e91def5fe495" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;named_req/clock&quot;&gt;Clock&lt;/a&gt; for GPS time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09eca8b4ae7d05667ecf45e89b261f3bcb90c8e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;named_req/clock&quot;&gt;Clock&lt;/a&gt; for International Atomic Time (TAI)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bcdd0495c0ccec46162b47f87f2a395aaeccd0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;named_req/clock&quot;&gt;Clock&lt;/a&gt; used for &lt;a href=&quot;filesystem/file_time_type&quot;&gt;file time&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44bcce2fd7e6d43dc5f10faa461d4cece11d9cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;nested_classes&quot;&gt;member class&lt;/a&gt; of a class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dc7db867abfbd57e4f5f735eb215f24e7dcca8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;new&quot;&gt; new expression&lt;/a&gt; allocates memory dynamically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0a28919666942d091179b016ea5f8708297c4e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; creates objects with dynamic storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cfa706996c29c14397212f4e61b8cf90909427" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; for an object of type &lt;code&gt;T&lt;/code&gt; or an array whose element type is &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca8a2c0573a9d913afd41589e974628fe14f397" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; that creates an object of a dependent type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbefe925904ff983a1daf990467e0665329c7c29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;new#Allocation&quot;&gt;New-expression&lt;/a&gt; has another exception from the as-if rule: the compiler may remove calls to the &lt;a href=&quot;../memory/new/operator_new&quot;&gt;replaceable allocation functions&lt;/a&gt; even if a user-defined replacement is provided and has observable side-effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72403c48332bad03e1bd822bc3b7acdfa460a1c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;noexcept&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt; checks if an expression can throw an exception (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a80078ffcd31dc39281ce78971f5dafba978be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;nullptr&quot;&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/a&gt; is the pointer literal which specifies a null pointer value (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdea340806b1cf48b2a6cf79401f4596489b4f4b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric#Bit_manipulation_.28since_C.2B.2B20.29&quot;&gt; Bit manipulation&lt;/a&gt; functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6d1e302217f166bb0e5cfdd471e89396b826d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric/fenv&quot;&gt; Floating-point environment&lt;/a&gt; access functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb44a84bcd3099fe69aade537ed9d4b2fe8f85a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric/fenv&quot;&gt;Floating-point environment&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab283b8dbca1c65db6880986a83448bfc792fb3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric/lerp&quot;&gt;&lt;code&gt;std::lerp()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numeric/midpoint&quot;&gt;&lt;code&gt;std::midpoint()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d96b8d2becb9090f2c4f8031fc5c2df4dc9461" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric/ratio&quot;&gt;Compile time rational arithmetic&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4228732abc71258f626aa8935d3469e3403011bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;numeric/special_math&quot;&gt;Mathematical special functions&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d35dd681ccdcb2825280de81a8caecdc91f303" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;objects&quot;&gt;Objects&lt;/a&gt;, &lt;a href=&quot;reference&quot;&gt;references&lt;/a&gt;, &lt;a href=&quot;functions&quot;&gt;functions&lt;/a&gt; including &lt;a href=&quot;template_specialization&quot;&gt;function template specializations&lt;/a&gt;, and &lt;a href=&quot;expressions&quot;&gt;expressions&lt;/a&gt; have a property called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e389b4875d71337221e453dd72989fb405ef7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_alternative&quot;&gt; alternative representations&lt;/a&gt; are alternative spellings for some operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb5432ee3821eed7918a1ec85c9cb9640872ba2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_arithmetic&quot;&gt;arithmetic operator&lt;/a&gt; applied to a pointer to &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c256db31227c2304a26ac54be74e0a90202c327" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_arithmetic#Bitwise_logic_operators&quot;&gt;Bitwise OR&lt;/a&gt; (inclusive or)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9020dcadde72b686282c7e9a77ed79b4ac4813" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_arithmetic#Bitwise_logic_operators&quot;&gt;Bitwise XOR&lt;/a&gt; (exclusive or)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774ea01b498d61ca4b83bcb6aaf8d60e58af7541" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_assignment#Builtin_compound_assignment&quot;&gt;Compound assignment&lt;/a&gt; by bitwise AND, XOR, and OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2138c6b06b524f51ecdea47027789b560dec41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_assignment#Builtin_compound_assignment&quot;&gt;Compound assignment&lt;/a&gt; by bitwise left shift and right shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b00a5920fb78de4a8407e641fc76313e615b6b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_assignment#Builtin_compound_assignment&quot;&gt;Compound assignment&lt;/a&gt; by product, quotient, and remainder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efead80436e703caeca0ad806647aa139110190" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_assignment#Builtin_compound_assignment&quot;&gt;Compound assignment&lt;/a&gt; by sum and difference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c238cf6ee8b4464dbf561fab3b9c4888cdcba78d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_assignment#Builtin_direct_assignment&quot;&gt;Direct assignment&lt;/a&gt; (provided by default for C++ classes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefeddf1a7a0320d56bc5614827a70792d8734cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_comparison#Pointer_comparison_operators&quot;&gt;Comparison operators&lt;/a&gt; are defined for pointers to objects in some situations: two pointers that represent the same address compare equal, two null pointer values compare equal, pointers to elements of the same array compare the same as the array indexes of those elements, and pointers to non-static data members with the same &lt;a href=&quot;access&quot;&gt;member access&lt;/a&gt; compare in order of declaration of those members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b432c602f1a842b9ed60d2890b91a31c6f1481f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_comparison#Pointer_comparison_operators&quot;&gt;Equality comparison operators&lt;/a&gt; are defined for pointers to functions (they compare equal if pointing to the same function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019c4fbd3e214f45bb7f9aab28061e72e1d060ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_comparison#Three-way_comparison&quot;&gt;Three-way comparison operator&lt;/a&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7735c8e2edee990d1cabdf2bf39eee2da9606495" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_logical&quot;&gt;Logical NOT&lt;/a&gt; and &lt;a href=&quot;operator_arithmetic#Bitwise_logic_operators&quot;&gt;bitwise NOT&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01118e4d4c65811f890f171af3bb3714117f0463" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_member_access&quot;&gt;class member access operator&lt;/a&gt; applied to an expression of type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe11907040fd11c5f30657d8098854e4565cf252" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_member_access#Built-in_indirection_operator&quot;&gt;Indirection&lt;/a&gt; (dereference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dbf69d018f2d948634d285b5a774d54e8e7e8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_other#Conditional_operator&quot;&gt;Ternary conditional&lt;/a&gt;&lt;sup id=&quot;cite_ref-2&quot;&gt;&lt;a href=&quot;operator_precedence#cite_note-2&quot;&gt;[note 2]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c49ed427ffb7a20815fefe19485be8742c98f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_precedence&quot;&gt; Operator precedence&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bfc7209b821cdb434d3499788800d0f30a7924" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_precedence&quot;&gt;Operator precedence&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f835c80bb3023eeee09a6a053a964316b7271e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operator_precedence&quot;&gt;operator precedence&lt;/a&gt; defines the order in which operators are bound to their arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c754f8e112a34f20a96bca81ebeaf5e3408b6db2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operators&quot;&gt; Operator overloading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4862ca1914d901ddd4e832b39c63378f74836405" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operators&quot;&gt;Operator overloading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832056eded0983aee70da408c28b8450e80b68ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operators&quot;&gt;operator overloading&lt;/a&gt; makes it possible to specify the behavior of the operators with user-defined classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485051af2ff2f94694f35b8209d3dd27f52dc691" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;operators#Relational_operators&quot;&gt;Operator overloading&lt;/a&gt; for relational operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9c740525b7ce72446ec1eba7850581f93c9680" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;overload_resolution#Call_to_an_overloaded_operator&quot;&gt;overload resolution&lt;/a&gt; in a call to an overloaded operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c767ff019ffd19795e31699a21ace6d90250ecf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;overload_resolution#Copy-initialization_by_conversion&quot;&gt;copy-initialization of a class by user-defined conversion&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e574e46e92106bb4205f8c6bda8c7d174378f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;overload_resolution#Initialization_by_constructor&quot;&gt;initialization by constructor&lt;/a&gt; during the second (direct-initialization) step of class &lt;a href=&quot;copy_initialization&quot;&gt;copy-initialization&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de17c0b1e52fa36e09afe206d044db6bad868a61" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;overload_resolution#Non-class_initialization_by_conversion&quot;&gt;initialization of a non-class type by a conversion function&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129ab0c4bd32d15c7dff0e25efecff5336b07f4f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;overload_resolution#Reference_initialization_by_conversion&quot;&gt;initialization by conversion function for direct reference binding&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385b96e0114d2a3cc449e565f13ab8123cb1ef48" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;override&quot;&gt; override specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1538f891c38c77bcee5b0a11340d90a7c48a4acd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;override&quot;&gt;override specifier&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3430fa94f219b2badbd18d4102dbaf5e04b35e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;override&quot;&gt;override&lt;/a&gt;, &lt;a href=&quot;final&quot;&gt;final&lt;/a&gt;, or their combination in any order (only allowed for member functions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edb6077665dbfc235ce26e52723e1e0d3563214" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pair/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb32176a320d3d9d48b925c3857a18566ee7bc1b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;parameter_pack&quot;&gt; parameter packs&lt;/a&gt; allows the use of lists of types in templates (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1042e206100a83c7e70ff8107632b0af96801830" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;parameter_pack&quot;&gt;Pack expansions&lt;/a&gt; in using-declarations make it possible to form a class that exposes overloaded members of variadic bases without recursion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1cf0f5cec2942f46c128b916aefe70cb621877" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;parameter_pack&quot;&gt;Variadic templates&lt;/a&gt; can also be used to create functions that take variable number of arguments. They are often the better choice because they do not impose restrictions on the types of the arguments, do not perform integral and floating-point promotions, and are type safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f81d7e50d36d5b49339ca8fa55681ae06c979f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer#Pointers&quot;&gt;pointer types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_pointer&quot;&gt;std::is_pointer&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f09059a749ec427e4c7d18d5e3766f3afebe77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer#Pointers_to_data_members&quot;&gt;pointer-to-data-member&lt;/a&gt; types (see also &lt;code&gt;&lt;a href=&quot;../types/is_member_object_pointer&quot;&gt;std::is_member_object_pointer&lt;/a&gt;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ad4afe7d075cefd50dac60de3e1a13a8279f6f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer#Pointers_to_functions&quot;&gt;pointer-to-function types&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40189cdb1d901d94493c00ced20f4d37a38c5ac3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer#Pointers_to_member_functions&quot;&gt;pointer-to-member-function&lt;/a&gt; types (see also &lt;code&gt;&lt;a href=&quot;../types/is_member_function_pointer&quot;&gt;std::is_member_function_pointer&lt;/a&gt;&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6831f2a565af506019e975a9098d78f789dc5eb9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer#Pointers_to_members&quot;&gt;pointer-to-member types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_member_pointer&quot;&gt;std::is_member_pointer&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738892e61af9310d8e85fba709a4d7afef94e33d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pointer#Pointers_to_objects&quot;&gt;pointer-to-object types&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4978f1243d0f908b6f9ac35e215bf7dac988c72d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;preprocessor/error&quot;&gt; #error&lt;/a&gt; - &lt;a href=&quot;preprocessor/impl&quot;&gt; #pragma&lt;/a&gt; - &lt;a href=&quot;preprocessor/line&quot;&gt; #line&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;preprocessor/error&quot;&gt; #error&lt;/a&gt; - &lt;a href=&quot;preprocessor/impl&quot;&gt; #pragma&lt;/a&gt; - &lt;a href=&quot;preprocessor/line&quot;&gt; #line&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="11b8f5a409d9a366e869aca21065539c700eb8da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;preprocessor/impl&quot;&gt;&lt;code&gt;_Pragma&lt;/code&gt;&lt;/a&gt;(since C++11).</source>
          <target state="translated">&lt;a href=&quot;preprocessor/impl&quot;&gt;&lt;code&gt;_Pragma&lt;/code&gt;&lt;/a&gt;(since C++11).</target>
        </trans-unit>
        <trans-unit id="b90b35af2b164c0612aab4a898d49e2d04a10c31" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;preprocessor/replace&quot;&gt; #define - # - ##&lt;/a&gt; - &lt;a href=&quot;preprocessor/include&quot;&gt; #include&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;preprocessor/replace&quot;&gt; #define - # - ##&lt;/a&gt; - &lt;a href=&quot;preprocessor/include&quot;&gt; #include&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6005245c0484d98cbe105fbe8fa0ef3deca8b2ea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;priority_queue/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5879f20c0f0c05d5dabfffd3b57601decbc8159d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qualified_lookup&quot;&gt;qualified name&lt;/a&gt;, if the qualifier (the name to the left of &lt;code&gt;::&lt;/code&gt;) names the current instantiation and lookup finds the name in the current instantiation or in its non-dependent base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdf0b3b5cc0ac7aed481b64fbf173286fff4ccc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;queue/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4a40a31d976888d68e1b5b061619307bd761a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ranges&quot;&gt;Ranges library&lt;/a&gt; and &lt;a href=&quot;algorithm/ranges&quot;&gt;constrained algorithms&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a967e8411c481869b31d12cc577b697ac3484b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference&quot;&gt;reference types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_reference&quot;&gt;std::is_reference&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4513a3b7fabc99d487a3fa55fa8f1faf2a6a3edc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference#Lvalue_references&quot;&gt;lvalue reference types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_lvalue_reference&quot;&gt;std::is_lvalue_reference&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867b88c72576fbe272f24183c4dfc0a952cc4b26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference#Rvalue_references&quot;&gt;rvalue reference types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_rvalue_reference&quot;&gt;std::is_rvalue_reference&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042c80c1f0449847d902c334e87c13146b033931" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference#lvalue_references&quot;&gt;lvalue reference type&lt;/a&gt; (to object or to function);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845bebfc0df07fd4eac6c03164b5bb61872a66c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference_initialization&quot;&gt;Reference initialization&lt;/a&gt;, e.g. &lt;code&gt;char&amp;amp; c = a[0];&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fdd2377d9decafb8c226a594802c8b6720fa2b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference_initialization&quot;&gt;reference-initialization&lt;/a&gt; to a different but convertible type or to a bitfield.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae657d701f0a629b3657142e98afd687f8b94fa9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reference_wrapper/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d318bf7149a9ddeccec1b861ae8cda1fb430be57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reinterpret_cast&quot;&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt;&lt;/a&gt; converts type to unrelated type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb560b7f79a4f9bc95a3f02e10e86d53fc2c797" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;scope#Block_scope&quot;&gt;The scope&lt;/a&gt; and lifetime of the function parameters (but not any objects declared in the function itself), extend to the end of the handler-sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d3fd1c65b22cc19fb4908eb277334c8cbe0308" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;scoped_allocator_adaptor/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b52bc43de4620f33816d1ee8f2aee399ac1bd1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;scoped_lock&quot;&gt;&lt;code&gt;std::scoped_lock&lt;/code&gt;&lt;/a&gt; offers a &lt;a href=&quot;../language/raii&quot;&gt;RAII&lt;/a&gt; wrapper for this function, and is generally preferred to a naked call to &lt;code&gt;std::lock&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74f100055052216ba5ab0624f3ae11f9fc52781" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d11b766c5d2a4e5fac1bf92be7c5a4827a1afc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;shared_ptr/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bce78737a8500a5201d3074d390c9e498df3782" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sizeof&quot;&gt;&lt;code&gt;sizeof&lt;/code&gt;&lt;/a&gt; queries the size of a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64db1acc9260c6b2aaf51c9ad212596e8d53ca09" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sizeof&quot;&gt;Size-of&lt;/a&gt;&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;operator_precedence#cite_note-1&quot;&gt;[note 1]&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b4fbe46248b69775f82c7dca2d7965dd3c9d7a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sizeof&quot;&gt;sizeof&lt;/a&gt;, &lt;a href=&quot;alignof&quot;&gt;alignof&lt;/a&gt;, &lt;a href=&quot;typeid&quot;&gt;typeid&lt;/a&gt;, &lt;a href=&quot;noexcept&quot;&gt;noexcept&lt;/a&gt;-expressions where the argument is a type-dependent expression or a dependent type-id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e83682c92dd76857cdda16363cae56492fd524e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sizeof...&quot;&gt;&lt;code&gt;sizeof...&lt;/code&gt;&lt;/a&gt; queries the size of a &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4ed218f6cfb5eb7f4a89aaf046a08f05c58a12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;stack/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9543230f88af5c26244842667f98865ecd2ba2d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;statements#Expression_statements&quot;&gt;null statements&lt;/a&gt; (plain semicolons)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8481b9dd44fcc358fc8a159833e0951bc7db017e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;static&quot;&gt;static data member&lt;/a&gt; of a class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a60462a0f2cea2111be523bc8de5abbfa22080" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;static_assert&quot;&gt;static_assert&lt;/a&gt; declaration (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53157baf710ba03c23acb94f9bc277f1386dc98b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;static_assert&quot;&gt;static_assert&lt;/a&gt; declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944e7a3e29905df7fa990c7e1721be51f00e8b7a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt; converts one type to another related type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43e66b127abaf5445bad10631af1b7ca8d24272" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;static_cast&quot;&gt;&lt;code&gt;static_cast&lt;/code&gt;&lt;/a&gt; of a pointer to storage without an object is only allowed when casting to (possibly cv-qualified) &lt;code&gt;void*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb05616b10dd01f7554657217ac2668a8bb4e27f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;storage_duration&quot;&gt;storage class specifier&lt;/a&gt; (&lt;a href=&quot;../keyword/register&quot;&gt;register&lt;/a&gt;, &lt;a href=&quot;../keywords/static&quot;&gt;static&lt;/a&gt;, &lt;a href=&quot;../keyword/thread_local&quot;&gt;thread_local&lt;/a&gt;(since C++11), &lt;a href=&quot;../keyword/extern&quot;&gt;extern&lt;/a&gt;, &lt;a href=&quot;../keyword/mutable&quot;&gt;mutable&lt;/a&gt;). Only one storage class specifier is allowed, except that &lt;code&gt;thread_local&lt;/code&gt; may appear together with &lt;code&gt;extern&lt;/code&gt; or &lt;code&gt;static&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe4ad6449968aeaa4e718aa35d673e025366fdf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;storage_duration&quot;&gt;storage duration&lt;/a&gt; (automatic, static, dynamic, thread-local);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbacd5df873ecab952907ae320e86896ff85455f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string_literal&quot;&gt;String literals&lt;/a&gt; in all function definitions are shared (they are all the same string literal defined in just one translation unit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c97946720a4ea38de2adb9bd5d35297062b39b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;string_literal&quot;&gt;string literals&lt;/a&gt; are sequences of characters of type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe9bf5c215becee17dabd9da4f6e901855d61ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;system_error&quot;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;(C++11)</source>
          <target state="translated">&lt;a href=&quot;system_error&quot;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;(C++11)</target>
        </trans-unit>
        <trans-unit id="26f310a1f41cfba0cf3e64d358216c118572e36c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;template_argument_deduction&quot;&gt;Template argument deduction&lt;/a&gt; and &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt; is then performed for initialization of a fictional object of hypothetical class type, whose constructor signatures match the guides (except for return type) for the purpose of forming an overload set, and the initializer is provided by the context in which class template argument deduction was performed, except that the first phase of &lt;a href=&quot;overload_resolution#List-initialization&quot;&gt;list-initialization&lt;/a&gt; (considering initializer-list constructors) is omitted if the initializer list consists of a single expression of type (possibly cv-qualified) &lt;code&gt;U&lt;/code&gt;, where &lt;code&gt;U&lt;/code&gt; is a specialization of &lt;code&gt;C&lt;/code&gt; or a class derived from a specialization of &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a866a5969f3c73d95e355392197a431619bb7998" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;template_parameters&quot;&gt; template parameters and arguments&lt;/a&gt; allow templates to be parametrized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73febdabeda9775c9a699c858981de7fc2c9b158" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;template_parameters&quot;&gt;template parameter list&lt;/a&gt;, as in &lt;a href=&quot;templates&quot;&gt;template declaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44316b44b589e331e19cbb9f96fa4a0ca4069283" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;template_parameters#Default_template_arguments&quot;&gt;Default template arguments&lt;/a&gt; are only allowed on template friend declarations if the declaration is a definition and no other declarations of this function template appear in this translation unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4788ea6460c0eb6d7b7799a9409b1500fef8e50e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;template_specialization&quot;&gt; template specialization&lt;/a&gt; defines an existing template for a specific type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c6e5c2fa55463033ea206313881ab9c3272cc8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;templates&quot;&gt;Template declaration&lt;/a&gt; (including &lt;a href=&quot;partial_specialization&quot;&gt;Partial template specialization&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cd8b43a3f1175e3639fa8712d6b0b8911fa642" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt; expression&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f604ef9d035d395e0276214c15dc86c21ecec35a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;throw&quot;&gt;stack unwinding&lt;/a&gt;, for objects with automatic storage duration when an exception escapes their block, uncaught.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12dfbd203177f0a41fb280a25a27a46d7ba6c967" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tuple/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebec1dc621ca2379904059e329f04572dda76c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tx_exception&quot;&gt;&lt;code&gt;tx_exception&lt;/code&gt;&lt;/a&gt;(TM TS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4e7fb9948a77801276a524ca707bf754987254" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;type-id&quot;&gt;type&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;type-id&quot;&gt;type&lt;/a&gt;;</target>
        </trans-unit>
        <trans-unit id="df7062244d51543b2a88beed273a472dfe9d2718" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;type_alias&quot;&gt;Alias templates&lt;/a&gt; are never deduced:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842ddc895a573343e0f10da67f80cdba80fba64c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;type_alias&quot;&gt;type alias declaration&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6fd1b55f149e870e2923be708f3cd56d54e653" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;type_alias&quot;&gt;type alias&lt;/a&gt; declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a7495f0e4f489b726cc39b589753846e8f4365" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;type_alias&quot;&gt;type aliases&lt;/a&gt; provide the same functionality as typedefs using a different syntax, and are also applicable to template names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6ec9e364fc4fce27bd36a4d7968af7ca3c6a3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; declaration;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b84fa3b202c19dd4ea10d71849b996424f42fb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; declarations and &lt;a href=&quot;type_alias&quot;&gt;alias&lt;/a&gt; declarations that do not define classes or enumerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686bab093f35a30a620e5b991893d42c0e0c70bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt; expression&lt;/a&gt; when argument type is polymorphic class type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e67913f48db3b68d47583ad5eedb5389804758" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt; queries the type information of a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0106c1b34e41b0bda8c5903709b3b3231442e66c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;typeid&quot;&gt;typeid&lt;/a&gt;, &lt;a href=&quot;sizeof&quot;&gt;sizeof&lt;/a&gt;, or &lt;a href=&quot;alignof&quot;&gt;alignof&lt;/a&gt; operator applied to type &lt;code&gt;T&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fa92087bd6bb65bf9224e24f9af289c86381fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;types&quot;&gt;fundamental types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_fundamental&quot;&gt;std::is_fundamental&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec8f5ff452cb1745fa4c318fcb0dcab42a67c13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;types/integer&quot;&gt; Fixed width integer types&lt;/a&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c6e7c9ddb82714f697be37f2a43a8e78622a5b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;types/integer&quot;&gt; fixed-size types&lt;/a&gt; and &lt;a href=&quot;types/climits&quot;&gt; limits of other types&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e91f141779a6e4b2567b9e470cff7ec2537610" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;types/integer&quot;&gt; formatting macros &lt;/a&gt;, &lt;code&gt;intmax_t&lt;/code&gt; and &lt;code&gt;uintmax_t&lt;/code&gt; math and conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e58a97a389a970b0a791c212c81bd77464f657" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;types/is_bounded_array&quot;&gt;&lt;code&gt;std::is_bounded_array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;types/is_unbounded_array&quot;&gt;&lt;code&gt;std::is_unbounded_array&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993fdd96d0f7a4efa4ad915dc5d9c3f6d0e19bd2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;union&quot;&gt;union types&lt;/a&gt; (see also &lt;code&gt;&lt;a href=&quot;../types/is_union&quot;&gt;std::is_union&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e981c635a3c9b50fe0b3b827f5fbe9e1597c73fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unordered_map/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ac67c73205fb67633fea4a3b020f670f73283d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unordered_multimap/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320f0dfff97b528d9221a8b0fc3c6ca684c06ff7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unordered_multiset/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369e847d620817484490d8f2364f8139c6b9023b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;unordered_set/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5204d50dab60fa62d3ebc1de802185dfd9e901" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;use_facet&quot;&gt;&lt;code&gt;use_facet&lt;/code&gt;&lt;/a&gt;&amp;lt;&lt;a href=&quot;codecvt&quot;&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;use_facet&quot;&gt;&lt;code&gt;use_facet&lt;/code&gt;&lt;/a&gt;&amp;lt;&lt;a href=&quot;codecvt&quot;&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="18ad7a09dd8eda28d0002d9867816861d23191b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;use_facet&quot;&gt;&lt;code&gt;use_facet&lt;/code&gt;&lt;/a&gt;&amp;lt;&lt;strong&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;a href=&quot;use_facet&quot;&gt;&lt;code&gt;use_facet&lt;/code&gt;&lt;/a&gt;&amp;lt;&lt;strong&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24fa19b42f7f78e7371dcf4d8c3c20086a3e88c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;user_literal&quot;&gt;user-defined literals&lt;/a&gt; are constant values of user-specified type (since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db80295530273ff8c7301705b09776c511e0cb9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;valarray/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3cf04e90f943b2519c97335c98f0cb05cc0137" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;value_category&quot;&gt;value categories&lt;/a&gt; (lvalue, rvalue, glvalue, prvalue, xvalue) classify expressions by their values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57900712906cad6fb4702fb2374778bd5176eee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;value_category#lvalue&quot;&gt;lvalue&lt;/a&gt; transformation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0bdbfcbfc976f51cfde49895d2cc4049d8bf81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;value_category#prvalue&quot;&gt;prvalues&lt;/a&gt; of small integral types (such as &lt;code&gt;char&lt;/code&gt;) may be converted to prvalues of larger integral types (such as &lt;code&gt;int&lt;/code&gt;). In particular, &lt;a href=&quot;operator_arithmetic&quot;&gt;arithmetic operators&lt;/a&gt; do not accept types smaller than &lt;code&gt;int&lt;/code&gt; as arguments, and integral promotions are automatically applied after lvalue-to-rvalue conversion, if applicable. This conversion always preserves the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbd742809123d064f2a6f0c199ed281c1e2f1b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;value_initialization&quot;&gt;Value initialization&lt;/a&gt;, e.g. &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt; s{};&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffa6df530026e8961447995b986710bacf22321" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;vector/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b31346f7c8d6f0c407ede09aae50ee62b55786c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;virtual&quot;&gt;Virtual functions&lt;/a&gt; cannot use return type deduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87f711edc3cbeaf5dde7eaa3ac052ab3f8d0f35" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;virtual&quot;&gt;virtual member function&lt;/a&gt; is odr-used if it is not a pure virtual member function (addresses of virtual member functions are required to construct the vtable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe40d77d63b30aa232252e96fdbdb65bd1cf1d5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;visit&quot;&gt;&lt;code&gt;std::visit&lt;/code&gt;&lt;/a&gt; called to visit a variant that is &lt;a href=&quot;valueless_by_exception&quot;&gt;&lt;code&gt;valueless_by_exception&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a246e8d8bfe1c8060eadfbc46153b627f01b754f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;weak_ptr/deduction_guides&quot;&gt;Deduction guides&lt;/a&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8225da192d677c5363139a1951d4504f83281969" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswalnum&quot;&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswalnum&quot;&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b7a75a2cdbd1d09d5fd632a55a4bdb5140c66e9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswalpha&quot;&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswalpha&quot;&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3167cec9b3420c76f6346446b4dfc5263efd2506" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswblank&quot;&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswblank&quot;&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="849fc3a76810bba08f01e1d45816478cdaa3f614" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswcntrl&quot;&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswcntrl&quot;&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ea483becd6d6c74934bf1350bbdb1ab2cf6e1412" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswdigit&quot;&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswdigit&quot;&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="85ef0305c0c575cb238417320ce162f88b7bee7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswgraph&quot;&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswgraph&quot;&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c935945ccf3ed077a41c04f0ae9c6c98f8536e18" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswlower&quot;&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswlower&quot;&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2bec72f4f51f5526b3fa4de21630960794f3d49f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswprint&quot;&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswprint&quot;&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fc8a33434c063c7f6570a1c7f0ea7cf9b4e669ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswpunct&quot;&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswpunct&quot;&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="950eaac578492c2891ce83e03825a780b31612b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswspace&quot;&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswspace&quot;&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="460e42d4760fee8b0b1d75caaedc0b5a6f0576ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswupper&quot;&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswupper&quot;&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a9a2d4467e35d19ab6dcf69c37bf2bc6aa6a33e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;wide/iswxdigit&quot;&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;wide/iswxdigit&quot;&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6dad063455913ee8537a2bc60eb8f8ce843e293e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;zero_initialization&quot;&gt;Zero-&lt;/a&gt; and &lt;a href=&quot;value_initialization&quot;&gt;value-initialization&lt;/a&gt; also initialize pointers to their null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956a7b9a0d22db445568061767758c1713a2d5c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 1.175,494,3 &amp;middot; 10&lt;sup&gt;-38&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 1.175,494,3 &amp;middot; 10&lt;sup&gt;-38&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8b75a85112b8072029b1d2b619881e480487914b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 1.401,298,4 &amp;middot; 10&lt;sup&gt;-45&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 1.401,298,4 &amp;middot; 10&lt;sup&gt;-45&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="9b1e5c2cc964aacf3d6a1bb4de98023060b99e72" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 1.797,693,134,862,315,7 &amp;middot; 10&lt;sup&gt;308&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 1.797,693,134,862,315,7 &amp;middot; 10&lt;sup&gt;308&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="32f73c5f9932791e0e14197b8296c8ae81c4e89b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 2.14 &amp;middot; 10&lt;sup&gt;9&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 2.14 &amp;middot; 10&lt;sup&gt;9&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1f1693142e219fb8dd482946b5e3e5fd5eaa869f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 2.225,073,858,507,201,4 &amp;middot; 10&lt;sup&gt;-308&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 2.225,073,858,507,201,4 &amp;middot; 10&lt;sup&gt;-308&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a7792708e4ad35b16d54472d3d8107a457942fb6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 3.27 &amp;middot; 10&lt;sup&gt;4&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 3.27 &amp;middot; 10&lt;sup&gt;4&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="aa08fb70f9abf22bfeb2c31d656f93b08ba22509" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 3.402,823,4 &amp;middot; 10&lt;sup&gt;38&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 3.402,823,4 &amp;middot; 10&lt;sup&gt;38&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="55e9dc6c1be170baddc75c9e7216a4ac805c591d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 4.940,656,458,412 &amp;middot; 10&lt;sup&gt;-324&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 4.940,656,458,412 &amp;middot; 10&lt;sup&gt;-324&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="aae20dbdf7c0bf9ea5edc520cfdee09ad3b5de37" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn; 9.22 &amp;middot; 10&lt;sup&gt;18&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn; 9.22 &amp;middot; 10&lt;sup&gt;18&lt;/sup&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ea7249c43eed3283fe739838cdeb1b12b2518762" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn;0x1.fffffep+127&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn;0x1.fffffep+127&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="81899deeeb14c476be4a62cc0fed94860551940a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn;0x1.fffffffffffffp+1023&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn;0x1.fffffffffffffp+1023&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b379c41d0d0138de6fab5d0c0ca1d93b82ed5036" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn;0x1p-1022&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn;0x1p-1022&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7956c52f63358e95dae1af88a5d2d1ed92a684ab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn;0x1p-1074&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn;0x1p-1074&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="67622d62bfbe591110b10f0e0daa4b6b8a1105de" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn;0x1p-126&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn;0x1p-126&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3f17c4b93a803f083dcce5fc99385e1de1773435" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&amp;plusmn;0x1p-149&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&amp;plusmn;0x1p-149&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="28070ab2c42fb7011b78d0415bda9b66bb30b192" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;-128&lt;/b&gt; to &lt;b&gt;127&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;-128&lt;/b&gt; to &lt;b&gt;127&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0a350e5107befa0baf3ee47dddd4c041275387ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;-2,147,483,648&lt;/b&gt; to &lt;b&gt;2,147,483,647&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;-2,147,483,648&lt;/b&gt; to &lt;b&gt;2,147,483,647&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="08629e21e5dba492f745775949ffaedb2c5861e0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;-32768&lt;/b&gt; to &lt;b&gt;32767&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;-32768&lt;/b&gt; to &lt;b&gt;32767&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="30a5e1979ace26b873eed6360ef88cafa6fcc932" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;-9,223,372,036,854,775,808&lt;/b&gt; to &lt;b&gt;9,223,372,036,854,775,807&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;-9,223,372,036,854,775,808&lt;/b&gt; to &lt;b&gt;9,223,372,036,854,775,807&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="26e161546d3661136f1545010d8fa1b31fe52dda" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;1.84 &amp;middot; 10&lt;sup&gt;19&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0526ca3e2126b214b1e2bd6805f7dcf3094809b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;1114111&lt;/b&gt; (&lt;b&gt;0x10ffff&lt;/b&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97e0457d5ac523a0f6d53aa74cd569577fca848" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;18,446,744,073,709,551,615&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018457a7959664ac86ee85166881cc652b75ef49" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;255&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b16cbb2bef6f8730eda7212845fe00c4301a928" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;4,294,967,295&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8384846be20d99ae3fd3441ace521444a2a8f9c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;4.29 &amp;middot; 10&lt;sup&gt;9&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdf3fbb0e380dd3a2fe7032515419e5d73bc133" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;6.55 &amp;middot; 10&lt;sup&gt;4&lt;/sup&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0f17469105c1ca043b9407fc0f7b520158b1b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;0&lt;/b&gt; to &lt;b&gt;65535&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9628a9ff071699780f68ad0810670755444f57a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;16&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;16&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c9aab8add235f1c1b717db687e2f3401a452dab3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;32&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;32&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="2fa5ea0ecba455d06ebbc0a52d753f17be0367ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;64&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;64&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="81b735c3949e4f32b1d437d8814fb3c5b18f9925" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;keywords&quot;&gt; C++ Keywords&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4220da0e6b43ccfa5e672f522ef862a3c707cd31" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/basic_concepts&quot;&gt; Basic concepts&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cefbb9e29503f1268a236eafbd4de9c1d341ec7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/classes&quot;&gt; Classes&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/classes&quot;&gt; Classes&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="bd6ba99691e718e311a7ee1d0ba403fe82da78da" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/declarations&quot;&gt; Declaration&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/declarations&quot;&gt; Declaration&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="00570d184ea3d5e61fdaa73775243ddae28996af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/exceptions&quot;&gt; Exceptions&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/exceptions&quot;&gt; Exceptions&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="45a43e3c26526cc353e0198e81f3c25d92ea2cf6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/expressions&quot;&gt; Expressions&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/expressions&quot;&gt; Expressions&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="0772f1b93f80da190059a918addfbc763b1a7eba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/functions&quot;&gt; Functions&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/functions&quot;&gt; Functions&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="b34ac84a0fb1ded28436f8a682ae2c246b8d9c9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/initialization&quot;&gt; Initialization&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/initialization&quot;&gt; Initialization&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="4c9a362ef1c298f40ef6a4f6094d3bd63bc3e37c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/statements&quot;&gt; Statements&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/statements&quot;&gt; Statements&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="de0ae5e1c647ac6bb655fcb66e34832fd851ccb2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;language/templates&quot;&gt; Templates&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;language/templates&quot;&gt; Templates&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="008c3742cede3fb8c420332873e3e2a5dc19c372" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;preprocessor&quot;&gt; Preprocessor&lt;/a&gt;&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;preprocessor&quot;&gt; Preprocessor&lt;/a&gt;&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="9648689deb65e71dd86755e59bfa28118becb709" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;preprocessor/conditional&quot;&gt; conditionally&lt;/a&gt;&lt;/b&gt; compile of parts of source file (controlled by directive &lt;code&gt;#if&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt;, &lt;code&gt;#ifndef&lt;/code&gt;, &lt;code&gt;#else&lt;/code&gt;, &lt;code&gt;#elif&lt;/code&gt; and &lt;code&gt;#endif&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efec055d52bc5e91689116850e631775067b350" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;preprocessor/impl&quot;&gt; implementation defined&lt;/a&gt;&lt;/b&gt; behavior (controlled by directive &lt;code&gt;#pragma&lt;/code&gt; and operator &lt;code&gt;_Pragma&lt;/code&gt;(since C++11))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddcef7f25c86da0d28dcb8e23a6bdf581260d83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;preprocessor/include&quot;&gt;include&lt;/a&gt;&lt;/b&gt; other files (controlled by directive &lt;code&gt;#include&lt;/code&gt;and checked with &lt;code&gt;__has_include&lt;/code&gt;(since C++17))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac82afcb6eb4b0183be0bdb2925e5f99b6ed100" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;preprocessor/line&quot;&gt; file name and line information&lt;/a&gt;&lt;/b&gt; available to the preprocessor (controlled by directive &lt;code&gt;#line&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18df950d1d23f1901fb1dad1c339bdc8233a4879" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;preprocessor/replace&quot;&gt; replace&lt;/a&gt;&lt;/b&gt; text macros while possibly concatenating or quoting identifiers (controlled by directives &lt;code&gt;#define&lt;/code&gt; and &lt;code&gt;#undef&lt;/code&gt;, and operators &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;##&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6d9fcec5333f1f64b9a4c92bbe3dd835a8fa3e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;special_math&quot;&gt;Mathematical special functions&lt;/a&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26511fbe156dd539f825c9562f8b83e3c839701c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;&amp;ne;0&lt;/code&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&lt;code&gt;&amp;ne;0&lt;/code&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="edb5a1b6c4bfb63de74884fd00d5b6b94133b3f8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;code&gt;0&lt;/code&gt;&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;&lt;code&gt;0&lt;/code&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="52e80e077b5aa2bd2d2e5f782be63347ff83ece5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Declaration specifiers&lt;/b&gt; (decl-specifier-seq) is a sequence of the following whitespace-separated specifiers, in any order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f9778fa33bcb007c734d09ccc32513111dc15a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ILP32&lt;/b&gt; or &lt;b&gt;4/4/4&lt;/b&gt; (int, long, and pointer are 32-bit);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e284018e865426a613c100b834547f0cabd067" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Idioms&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;Idioms&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="bd384859f17f5014aab076340517292a094bcc9d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;LLP64&lt;/b&gt; or &lt;b&gt;4/4/8&lt;/b&gt; (int and long are 32-bit, pointer is 64-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb03e4664f8578081170cc29a1a1dfe708e13b13" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;LP32&lt;/b&gt; or &lt;b&gt;2/4/4&lt;/b&gt; (int is 16-bit, long and pointer are 32-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f226fc369b88c85fa1c6f5badda44294dda81f7f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;LP64&lt;/b&gt; or &lt;b&gt;4/8/8&lt;/b&gt; (int is 32-bit, long and pointer are 64-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc1e20b3b1eb81b389c13ee58a4029dca7ff22e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Matched array&lt;/b&gt;. The information about matches may be retrieved as an object of type &lt;code&gt;&lt;a href=&quot;regex/match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac0833c3daadc75e98b7fdce6ca61f0874a20ca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Miscellaneous&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;Miscellaneous&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="970742d4b7ee46eed54c26252a929de0d9070bb6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Notes&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;Notes&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="59fc9d2f793be24d07828d26d8b1ba7b7ca5ee90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Pattern&lt;/b&gt;. This is the regular expression itself. It determines what constitutes a match. It is an object of type &lt;code&gt;&lt;a href=&quot;regex/basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt;, constructed from a string with special syntax. See &lt;a href=&quot;regex/syntax_option_type&quot;&gt; syntax_option_type&lt;/a&gt; for the description of supported syntax variations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60c308266f628d695bb5f1654a834ca923fd7e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Postcondition&lt;/b&gt;: &lt;code&gt;i&lt;/code&gt; is dereferenceable or &lt;code&gt;i&lt;/code&gt; is past-the-end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2623a5f2730c0baadb7e88f53e12c047578eec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Postcondition&lt;/b&gt;: Any copies of the previous value of &lt;code&gt;i&lt;/code&gt; are no longer required to be either dereferenceable or to be in the domain of &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af7e09317b7d0cbab904eed8e1f5a24bca47d09" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Precondition&lt;/b&gt;: &lt;code&gt;(i, j)&lt;/code&gt; is in the domain of &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd17d7eb58089cc29795c0f734f49a10dbe0d45" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Precondition&lt;/b&gt;: &lt;code&gt;i&lt;/code&gt; is dereferenceable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb456ed1293dbfec11f850cf5b0639eafc52be90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Replacement string&lt;/b&gt;. This is a string that determines how to replace the matches, see &lt;a href=&quot;regex/match_flag_type&quot;&gt; match_flag_type&lt;/a&gt; for the description of supported syntax variations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083d2d6796b4f3a83003529262e6edb711eca279" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Signedness&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;Signedness&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="ecbcf678ac1f5386a306f20575a835c17b320569" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Size&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;Size&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="ee835e5ea89f51987e927013527ade7940312131" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Target sequence&lt;/b&gt;. The character sequence that is searched for a pattern. This may be a range specified by two iterators, a null-terminated character string or a &lt;code&gt;&lt;a href=&quot;string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae71b77b917ad2e074d21df0dae1801fbef59ac6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;Type specifiers&lt;/b&gt; (type-specifier-seq), a sequence of specifiers that names a type. The type of every entity introduced by the declaration is this type, optionally modified by the declarator (see below). This sequence of specifiers is also used by &lt;a href=&quot;type-id#Type_naming&quot;&gt;type-id&lt;/a&gt;. Only the following specifiers are part of type-specifier-seq, in any order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa2e91de38c66ae36b1db8a3131ee63174b893d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;automatic&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;automatic&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="79bae1f5d3eb186680d28f67f08e692dc33aaf83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;const object&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feca070ada7b42ae6bc89f49f1b0e4e9ba91ba92" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;const volatile object&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8772a5250739658e12ff00c5b237eb07869547" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;dynamic&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;dynamic&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ab63d7d887d25b4670ce25e2fae3613659079b1f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;external linkage&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38497df868b78aa2c9c2e629f77f1e77d055fd84" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;freestanding&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;freestanding&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0804023c8cc2d00c196a457dff74435d7fdaf3f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;hosted&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;hosted&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f0fa2690abd04978dc51dd780ee3bc301cb0793b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;internal linkage&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430b5a9b9f75cb756cb35b30c5719c56f5ea34b0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;iterators&lt;/b&gt; valid?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f0ff807cd537926190a6a825238bfac6e8a589" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;no linkage&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244b20554a2fbfcc2332dc034cb00ad0fbda5ff9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;references&lt;/b&gt; valid?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dcf5d11bdfa07f7a761f2720230b95e6c547aa" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;static&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;static&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="09e45a55c1ad45e7678e4c08394b09d83e95d766" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;thread&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;thread&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="78df8409936e8af665f47dc7d0e18c5c69c18c65" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;volatile object&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896fbdb810b0e96492eeb53b48455d80a9791ddd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;x&lt;/b&gt; = 8, 16, 32 or 64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f415a45765de9dd2b253c321d13cfa00e8a1cc42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt; = &lt;/code&gt; (implicitly capture the used automatic variables by copy).</source>
          <target state="translated">&lt;code&gt; = &lt;/code&gt; (implicitly capture the used automatic variables by copy).</target>
        </trans-unit>
        <trans-unit id="2e5cb46e602db55e56ab4cc4e590325925d9097d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt; bool pred();&lt;/code&gt;​</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befb46b74e7f2f635633181861446d9253d4a95f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce4f5dda6abc85aeb4cf1e6f20e9dfa9608aeeb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!&lt;/code&gt;rhs</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt;rhs</target>
        </trans-unit>
        <trans-unit id="ee23d35d57fe388b78458e99519dc1adc7819729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;.operator!()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;!&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;.operator!()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7523a3180c6143900811d960c2145e43552058fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!a a &amp;amp;&amp;amp; b a || b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;!a a &amp;amp;&amp;amp; b a || b&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d44edadccef5e7ac6cc18293f9c7e3b18885c33f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;!a&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c3b6c277057f0b6d386bbc02674e9375322ddac2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!is_symlink((*this)-&amp;gt;symlink_status())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;!is_symlink((*this)-&amp;gt;symlink_status())&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1dda7589a14c06452af6245a4e519dd64e01617a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;!lhs.empty()&lt;/code&gt; and &lt;code&gt;!rhs.empty()&lt;/code&gt; and the following conditions are met:</source>
          <target state="translated">&lt;code&gt;!lhs.empty()&lt;/code&gt; and &lt;code&gt;!rhs.empty()&lt;/code&gt; and the following conditions are met:</target>
        </trans-unit>
        <trans-unit id="6eb284df0445ec2bfb4ec99599556873f2182613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;%d/%m/%y&quot;&lt;/code&gt;, &lt;code&gt;&quot;%m/%d/%y&quot;&lt;/code&gt;, &lt;code&gt;&quot;%y/%m/%d&quot;&lt;/code&gt;, and &lt;code&gt;&quot;%y/%d/%m&quot;&lt;/code&gt;, depending on &lt;code&gt;&lt;a href=&quot;date_order&quot;&gt;date_order()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;%d/%m/%y&quot;&lt;/code&gt;, &lt;code&gt;&quot;%m/%d/%y&quot;&lt;/code&gt;, &lt;code&gt;&quot;%y/%m/%d&quot;&lt;/code&gt;, and &lt;code&gt;&quot;%y/%d/%m&quot;&lt;/code&gt;, depending on &lt;code&gt;&lt;a href=&quot;date_order&quot;&gt;date_order()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cd6f636d60de76a74a98fd3e58818bfe52bd7b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;&lt;/code&gt; (unescaped_character|escaped_character)* &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;&lt;/code&gt; (unescaped_character|escaped_character)* &lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58ae1099e5c8e1202806a09c5853e19d92761876" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="687d5d827d46b34649fb97d507a9ce473b6d9c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt; and &lt;code&gt;##&lt;/code&gt; operators</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; and &lt;code&gt;##&lt;/code&gt; operators</target>
        </trans-unit>
        <trans-unit id="7c11a91ce02f3d20039440b7171bcef7676e6f15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#&lt;/code&gt; character</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; character</target>
        </trans-unit>
        <trans-unit id="10835aa7bed0c66e7cc8c4bf0445ab94c9b26b8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#define&lt;/code&gt; directives</source>
          <target state="translated">&lt;code&gt;#define&lt;/code&gt; directives</target>
        </trans-unit>
        <trans-unit id="3b792555114d96d5adcc1ced6fad1cd2557d2e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#define&lt;/code&gt;identifier&lt;code&gt;( ... )&lt;/code&gt;replacement-list(optional)</source>
          <target state="translated">&lt;code&gt;#define&lt;/code&gt;identifier&lt;code&gt;( ... )&lt;/code&gt;replacement-list(optional)</target>
        </trans-unit>
        <trans-unit id="7f1c7c5002f2473e6d1c938521f9c2ff8bc7d38e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#define&lt;/code&gt;identifier&lt;code&gt;(&lt;/code&gt;parameters&lt;code&gt;)&lt;/code&gt;replacement-list(optional)</source>
          <target state="translated">&lt;code&gt;#define&lt;/code&gt;identifier&lt;code&gt;(&lt;/code&gt;parameters&lt;code&gt;)&lt;/code&gt;replacement-list(optional)</target>
        </trans-unit>
        <trans-unit id="d8b0ec985f3fe269df313c3231cc206e952628e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#define&lt;/code&gt;identifier&lt;code&gt;(&lt;/code&gt;parameters&lt;code&gt;, ... )&lt;/code&gt;replacement-list(optional)</source>
          <target state="translated">&lt;code&gt;#define&lt;/code&gt;identifier&lt;code&gt;(&lt;/code&gt;parameters&lt;code&gt;, ... )&lt;/code&gt;replacement-list(optional)</target>
        </trans-unit>
        <trans-unit id="234016eccb36c4e91a167b74fa89b95be2f6ab14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#define&lt;/code&gt;identifierreplacement-list(optional)</source>
          <target state="translated">&lt;code&gt;#define&lt;/code&gt;identifierreplacement-list(optional)</target>
        </trans-unit>
        <trans-unit id="90bfa8f934152956fbcdd7d250851a5f2437e87d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#elif&lt;/code&gt;expression</source>
          <target state="translated">&lt;code&gt;#elif&lt;/code&gt;expression</target>
        </trans-unit>
        <trans-unit id="53cc21c5f94d029cdb8453104f38351016d1a344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#error&lt;/code&gt;error_message</source>
          <target state="translated">&lt;code&gt;#error&lt;/code&gt;error_message</target>
        </trans-unit>
        <trans-unit id="b1bbe10b1dc775c18198626bd3a2d81574e8cdd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#if&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt; and &lt;code&gt;#ifndef&lt;/code&gt; directives test the specified condition (see below) and if it evaluates to true, compiles the controlled code block. In that case subsequent &lt;code&gt;#else&lt;/code&gt; and &lt;code&gt;#elif&lt;/code&gt; directives are ignored. Otherwise, if the specified condition evaluates false, the controlled code block is skipped and the subsequent &lt;code&gt;#else&lt;/code&gt; or &lt;code&gt;#elif&lt;/code&gt; directive (if any) is processed. In the former case, the code block controlled by the &lt;code&gt;#else&lt;/code&gt; directive is unconditionally compiled. In the latter case, the &lt;code&gt;#elif&lt;/code&gt; directive acts as if it was &lt;code&gt;#if&lt;/code&gt; directive: checks for condition, compiles or skips the controlled code block based on the result, and in the latter case processes subsequent &lt;code&gt;#elif&lt;/code&gt; and &lt;code&gt;#else&lt;/code&gt; directives. The conditional preprocessing block is terminated by &lt;code&gt;#endif&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;#if&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt; and &lt;code&gt;#ifndef&lt;/code&gt; directives test the specified condition (see below) and if it evaluates to true, compiles the controlled code block. In that case subsequent &lt;code&gt;#else&lt;/code&gt; and &lt;code&gt;#elif&lt;/code&gt; directives are ignored. Otherwise, if the specified condition evaluates false, the controlled code block is skipped and the subsequent &lt;code&gt;#else&lt;/code&gt; or &lt;code&gt;#elif&lt;/code&gt; directive (if any) is processed. In the former case, the code block controlled by the &lt;code&gt;#else&lt;/code&gt; directive is unconditionally compiled. In the latter case, the &lt;code&gt;#elif&lt;/code&gt; directive acts as if it was &lt;code&gt;#if&lt;/code&gt; directive: checks for condition, compiles or skips the controlled code block based on the result, and in the latter case processes subsequent &lt;code&gt;#elif&lt;/code&gt; and &lt;code&gt;#else&lt;/code&gt; directives. The conditional preprocessing block is terminated by &lt;code&gt;#endif&lt;/code&gt; directive.</target>
        </trans-unit>
        <trans-unit id="04f99dc9a05da7e45383de84570214556bae68d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#if&lt;/code&gt;expression</source>
          <target state="translated">&lt;code&gt;#if&lt;/code&gt;expression</target>
        </trans-unit>
        <trans-unit id="d23cf36b2c08c3ddf3c64c4af927e2938b4cb522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#ifdef&lt;/code&gt;identifier</source>
          <target state="translated">&lt;code&gt;#ifdef&lt;/code&gt;identifier</target>
        </trans-unit>
        <trans-unit id="72366ebf6a3a359fc7ef682ba089a0f635f64821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#ifdef&lt;/code&gt;identifier is essentially equivalent to &lt;code&gt;#if defined&lt;/code&gt;identifier.</source>
          <target state="translated">&lt;code&gt;#ifdef&lt;/code&gt;identifier is essentially equivalent to &lt;code&gt;#if defined&lt;/code&gt;identifier.</target>
        </trans-unit>
        <trans-unit id="dfe28c894cf08e8a1ebcafd0a269440fc8c20bc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#ifndef&lt;/code&gt;identifier</source>
          <target state="translated">&lt;code&gt;#ifndef&lt;/code&gt;identifier</target>
        </trans-unit>
        <trans-unit id="6712fcca42982807024a9c20eb176a81a8facee3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#ifndef&lt;/code&gt;identifier is essentially equivalent to &lt;code&gt;#if&amp;nbsp;!defined&lt;/code&gt;identifier.</source>
          <target state="translated">&lt;code&gt;#ifndef&lt;/code&gt;identifier is essentially equivalent to &lt;code&gt;#if&amp;nbsp;!defined&lt;/code&gt;identifier.</target>
        </trans-unit>
        <trans-unit id="38215f0ff2a53639e39d33eecb5153323feaf3bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#include &quot;&lt;/code&gt;filename&lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;#include &quot;&lt;/code&gt;filename&lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b3538c46ac4a6a985f8beeae2b9a91f24d81d25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#include &amp;lt;&lt;/code&gt;filename&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;#include &amp;lt;&lt;/code&gt;filename&lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd1d66ffdf7d351254a800550ec42e97c08f3faa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#line&lt;/code&gt;lineno</source>
          <target state="translated">&lt;code&gt;#line&lt;/code&gt;lineno</target>
        </trans-unit>
        <trans-unit id="4d40f65833cbe076b7ef1e85c47a98e688283262" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#line&lt;/code&gt;lineno&lt;code&gt;&quot;&lt;/code&gt;filename&lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;#line&lt;/code&gt;lineno&lt;code&gt;&quot;&lt;/code&gt;filename&lt;code&gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ebf822a8e31e65cdb16b94344639792b3619c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#pragma STDC CX_LIMITED_RANGE &lt;/code&gt;arg</source>
          <target state="translated">&lt;code&gt;#pragma STDC CX_LIMITED_RANGE &lt;/code&gt;arg</target>
        </trans-unit>
        <trans-unit id="c6df3044e9ce72571216c937e9b5e0ce048a83b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#pragma STDC FENV_ACCESS &lt;/code&gt;arg</source>
          <target state="translated">&lt;code&gt;#pragma STDC FENV_ACCESS &lt;/code&gt;arg</target>
        </trans-unit>
        <trans-unit id="a029557ac0903ec4bdca8c5bd2e07c71be58615f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#pragma STDC FP_CONTRACT &lt;/code&gt;arg</source>
          <target state="translated">&lt;code&gt;#pragma STDC FP_CONTRACT &lt;/code&gt;arg</target>
        </trans-unit>
        <trans-unit id="5a2a1be18e82f83acbfe5178b73b46651087c0c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#pragma once&lt;/code&gt; is a non-standard pragma that is supported by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pragma_once#Portability&quot;&gt;vast majority of modern compilers&lt;/a&gt;. If it appears in a header file, it indicates that it is only to be parsed once, even if it is (directly or indirectly) included multiple times in the same source file.</source>
          <target state="translated">&lt;code&gt;#pragma once&lt;/code&gt; is a non-standard pragma that is supported by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pragma_once#Portability&quot;&gt;vast majority of modern compilers&lt;/a&gt;. If it appears in a header file, it indicates that it is only to be parsed once, even if it is (directly or indirectly) included multiple times in the same source file.</target>
        </trans-unit>
        <trans-unit id="fb4f95715346958635827ac6c8698c212ba98bfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#pragma&lt;/code&gt;pragma_params</source>
          <target state="translated">&lt;code&gt;#pragma&lt;/code&gt;pragma_params</target>
        </trans-unit>
        <trans-unit id="66bebc9f90442f6cce1ae258a98fe92e0fdd8ff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#undef &lt;/code&gt;identifier</source>
          <target state="translated">&lt;code&gt;#undef &lt;/code&gt;identifier</target>
        </trans-unit>
        <trans-unit id="97411f3843a69aceef3f0eb4eefb9a070a6473be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;#undef&lt;/code&gt; directive</source>
          <target state="translated">&lt;code&gt;#undef&lt;/code&gt; directive</target>
        </trans-unit>
        <trans-unit id="b8f2ab9ab2749c04ff81e9f88071851bedbb95c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;,&lt;/code&gt; (comma) lose their special &lt;a href=&quot;eval_order&quot;&gt;sequencing properties&lt;/a&gt; when overloaded and behave like regular function calls even when they are used without function-call notation.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;,&lt;/code&gt; (comma) lose their special &lt;a href=&quot;eval_order&quot;&gt;sequencing properties&lt;/a&gt; when overloaded and behave like regular function calls even when they are used without function-call notation.</target>
        </trans-unit>
        <trans-unit id="fa90dbf38395115409a9dd162229e2760c99774c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;attr(optional)declarator</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;attr(optional)declarator</target>
        </trans-unit>
        <trans-unit id="b6ab9b663328b2eecec18e09381e9abc2bf3f351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt; (implicitly capture the used automatic variables by reference) and</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; (implicitly capture the used automatic variables by reference) and</target>
        </trans-unit>
        <trans-unit id="b49774a491ef22ba822e5b203b873fbc2c5eb6a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;attr(optional)declarator</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;attr(optional)declarator</target>
        </trans-unit>
        <trans-unit id="1031b675e2ca7587190fea5a458c57963d865eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;class&lt;code&gt;::&lt;/code&gt;member</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;class&lt;code&gt;::&lt;/code&gt;member</target>
        </trans-unit>
        <trans-unit id="7746ceb5af5d73f90ae1dc933e91ec84fda98eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;expr</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;expr</target>
        </trans-unit>
        <trans-unit id="93fa1d98f72210c15d77cf943d3105d6c2e01bda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;identifier</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;identifier</target>
        </trans-unit>
        <trans-unit id="a0cc09b42399fcd967060e8a7b66beb3e8ff0bab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;identifier&lt;code&gt;...&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;identifier&lt;code&gt;...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6a8706034fadc557e2d420f27ed63447f76e8dac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;identifierinitializer</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt;identifierinitializer</target>
        </trans-unit>
        <trans-unit id="7a99c71f655f60db841c5412141489cd63cd1aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;code&gt;^=&lt;/code&gt;&lt;code&gt;|=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;code&gt;^=&lt;/code&gt;&lt;code&gt;|=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="254d1d41a64f3c6529390fa929fdf0909f927266" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;a&lt;/code&gt;, the built-in &lt;a href=&quot;operator_member_access#Built-in_address-of_operator&quot;&gt;address-of&lt;/a&gt; expression;</source>
          <target state="translated">&lt;code&gt;&amp;amp;a&lt;/code&gt;, the built-in &lt;a href=&quot;operator_member_access#Built-in_address-of_operator&quot;&gt;address-of&lt;/a&gt; expression;</target>
        </trans-unit>
        <trans-unit id="fece3efd4fb42150f0912f729d5a6d8b34cced49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd5faa108cbd812ac70b3967ff046e8155c31e17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is a template argument list where no arguments contain T or I.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is a template argument list where no arguments contain T or I.</target>
        </trans-unit>
        <trans-unit id="f2b9944b1a3b4ab996e45769e6a7d492f69bd586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf66b7d957aa08ee86ce2f6922842aba72e9c35a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9ee987f40a1fc30e16e0de6d881b728b3e1ac49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt; for &lt;code&gt;unsigned char&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; for &lt;code&gt;unsigned char&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5194f16a1738215bac13b979eff516dfab2b9f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec0af96ee818d56935b8a13e4fd50d708ba1bf1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;I&amp;gt;&lt;/code&gt; is a template argument list where at least one argument contains I;</source>
          <target state="translated">&lt;code&gt;&amp;lt;I&amp;gt;&lt;/code&gt; is a template argument list where at least one argument contains I;</target>
        </trans-unit>
        <trans-unit id="7f3ddbfe8630f9e3cffc7020f0ee5e7c0a7d2542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is a template argument list where at least one argument contains T;</source>
          <target state="translated">&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is a template argument list where at least one argument contains T;</target>
        </trans-unit>
        <trans-unit id="a6b04d0460617c2bfb3f26f225463d1b9a115f1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="5a05f425d440b0fef5b1760ff1de8bd86c2dd980" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="33fd7f9f0ae19053b69738c7c11397e197a5e265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="2af59411dd14795e22d56e8fe01d400208e284b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="32484d8a3c1dc42aa9ffff269806b081217b98da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;fenv.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;fenv.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="79608c0b209a148d5e5a8b99426ee746066ae0bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;float.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="6f2316a57fdc4c56975ed0a5c3ec4e78be427853" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;inttypes.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;inttypes.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="73a055cb51ac5b4adca78116aef1904b44599cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;iso646.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="2c06819558c557150499760d278baa1d5649bca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;limits.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="20136b5b030d598ef73a8728ecc29f8a64e885ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;locale.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;locale.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="af58024a9c39863905c4c756d89b18834eb70615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="d73f25c881ef8620ba879aac76184bd10a6ffaaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;setjmp.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;setjmp.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="31a1a91aefb7c5a2e1efbaa9c1ea90db409f7fb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="b5876e348cb6a5e348b25435e58d7e8fc125a4c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stdalign.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="24c93a88fc2278c2942e38991ea9303f2660ff1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stdarg.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="da4ab82c0fe845ede3c5e0b52ee310daaa35eb8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stdbool.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="f8f2fea889da058fe2f7e0dcd3077050f6f2cd13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="3f2cc7a07f243ef5bec8159b94a1aa532ef30ed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="599278f26b9e72d0d3f331d0b61991164220fa67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="7ec982d1352e26f4ac0310de9c2322b0733265b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="a902dfa372e24c25f1c3cef260bf7f65e1dec1fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="e6c8f272a1e8256d2f2bfb5964c96db4ff3a736e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;tgmath.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="f597010a9d69951dad356a3f849566c39a76d6ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="c411355d203a4c69418dda4f3eff55dde923e189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;uchar.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;uchar.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="f7202fc8e95184c23f4e391bc7d6bec8f98b2565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;wchar.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;wchar.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="244174509e521d00355968d140db4b4e39a39b27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;wctype.h&amp;gt;&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;&amp;lt;wctype.h&amp;gt;&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="291ba2050618786b3afa0eea716186c79eb66d6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;micro;s&lt;/code&gt;(U+00B5)</source>
          <target state="translated">&lt;code&gt;&amp;micro;s&lt;/code&gt;(U+00B5)</target>
        </trans-unit>
        <trans-unit id="addeda7d2114bc664ca22948c2edbc2993b770b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'&lt;/code&gt;c-char-sequence&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt;c-char-sequence&lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5147d03e3321468345ada47de9baa59a7a601fc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b992fc2a8f0f52e9902fb9c1259c1f9aeec9872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;()&lt;/code&gt; is a function parameter type list where no parameters contain T;</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; is a function parameter type list where no parameters contain T;</target>
        </trans-unit>
        <trans-unit id="0fc67d3c03265d57df1574d137f16db455410db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;oppack&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;oppack&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab78e0156e2bb1bb736e284b9b58667993a50a55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="808080273088765cbcf78b6ad79e66e25101f9b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9f3fb0bad7644f89cc674a59da4df32d9fc7dbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char8_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char8_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d5e7a6e7a8f087703db08a865157127de392df6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;char&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="beaca391531ed10e06288ebbdc7f2bb160ef39ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char *&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char *&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08ed38b6fb2704aeefbdf0e26ac5d97133b29813" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef70afd7ef66ac477c11d832455daa5d5d564f49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char16_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char16_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9ee90770d6cc201ba888012ee0cf4c3c0ee1245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char32_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char32_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="81eda730669e4e25b842776dd152c2c67bb7bd6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char8_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const char8_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70d2db0c4f4359f3bd2b430062b7170115e570bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const wchar_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;const wchar_t *&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="08a4dab75b7bc9157886559980b03d9da89076ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;long double&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;long double&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15cc2292fa1cc7ac5a70687a3bd0b41afe44930d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;unsigned long long int&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;unsigned long long int&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cdf2812d670e75c61c123c26f0517201b0fd3f4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3df6c23ff0e26121d9cb635e199851ce57d6891" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;expression-list&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;expression-list&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8ed8f12dbaa8a7334aca8b8253b679c8a31ce95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;initop&lt;code&gt;...&lt;/code&gt;oppack&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;initop&lt;code&gt;...&lt;/code&gt;oppack&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3ce1e663dcb7e200af38dcf23b3348dc732a68e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(&lt;/code&gt;new_type&lt;code&gt;) &lt;/code&gt;expression</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt;new_type&lt;code&gt;) &lt;/code&gt;expression</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
