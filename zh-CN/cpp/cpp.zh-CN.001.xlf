<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="1d515289835c3026aa9e1416dd76bb3553e012e2" translate="yes" xml:space="preserve">
          <source>&quot;). The values of the constants are values of an integral type known as the</source>
          <target state="translated">&quot;). The values of the constants are values of an integral type known as the</target>
        </trans-unit>
        <trans-unit id="160ccd377fa3faa7381ab2b079c22df22379723e" translate="yes" xml:space="preserve">
          <source>&quot;0x&quot; or &quot;0X&quot; prefixes are not recognized for base 16</source>
          <target state="translated">&quot;0x&quot; or &quot;0X&quot; prefixes are not recognized for base 16</target>
        </trans-unit>
        <trans-unit id="6f9a2897540cbc15016c700b8b7e7eed22d96673" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;;&lt;/code&gt;&quot;)</source>
          <target state="translated">&quot;&lt;code&gt;;&lt;/code&gt;&quot;)</target>
        </trans-unit>
        <trans-unit id="a999da3424b75496ee0ce05b9246d7cfd5ba3903" translate="yes" xml:space="preserve">
          <source>&quot;A Concern about the Rule of Zero&quot;, Scott Meyers, 3/13/2014</source>
          <target state="translated">&quot;A Concern about the Rule of Zero&quot;, Scott Meyers, 3/13/2014</target>
        </trans-unit>
        <trans-unit id="27e0e5f9cd6d51756615691cc5dd3324d9d81c8c" translate="yes" xml:space="preserve">
          <source>&quot;A difference of opinion within the C community centered around the meaning of lvalue, one group considering an lvalue to be any kind of object locator, another group holding that an lvalue is meaningful on the left side of an assigning operator. The C89 Committee adopted the definition of lvalue as an object locator.&quot; -- ANSI C Rationale, 6.3.2.1/10.</source>
          <target state="translated">&quot;A difference of opinion within the C community centered around the meaning of lvalue, one group considering an lvalue to be any kind of object locator, another group holding that an lvalue is meaningful on the left side of an assigning operator. The C89 Committee adopted the definition of lvalue as an object locator.&quot; -- ANSI C Rationale, 6.3.2.1/10.</target>
        </trans-unit>
        <trans-unit id="ab982ce889b40060e3375818882d7c34637140e4" translate="yes" xml:space="preserve">
          <source>&quot;More&quot; cv-qualified means that.</source>
          <target state="translated">&quot;More&quot; cv-qualified means that.</target>
        </trans-unit>
        <trans-unit id="bd5e7e8e04a94b08643fddea707ca792570f3a8b" translate="yes" xml:space="preserve">
          <source>&quot;Pointer to implementation&quot; or &quot;pImpl&quot; is a C++ programming technique&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;pimpl#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; that removes implementation details of a class from its object representation by placing them in a separate class, accessed through an opaque pointer:</source>
          <target state="translated">&quot;Pointer to implementation&quot; or &quot;pImpl&quot; is a C++ programming technique&lt;sup id=&quot;cite_ref-1&quot;&gt;&lt;a href=&quot;pimpl#cite_note-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; that removes implementation details of a class from its object representation by placing them in a separate class, accessed through an opaque pointer:</target>
        </trans-unit>
        <trans-unit id="348c41818743924c0a0a60de0dce91e5871e13e7" translate="yes" xml:space="preserve">
          <source>&quot;Reserved&quot; here means that the standard library headers #define or declare such identifiers for their internal needs, the compiler may predefine non-standard identifiers of that kind, and that name mangling algorithm may assume that some of these identifiers are not in use. If the programmer uses such identifiers, the behavior is undefined.</source>
          <target state="translated">&quot;Reserved&quot; here means that the standard library headers #define or declare such identifiers for their internal needs, the compiler may predefine non-standard identifiers of that kind, and that name mangling algorithm may assume that some of these identifiers are not in use. If the programmer uses such identifiers, the behavior is undefined.</target>
        </trans-unit>
        <trans-unit id="66ef1fc39246fed3484053b1187db55c53f7b913" translate="yes" xml:space="preserve">
          <source>&quot;Rule of Zero&quot;, R. Martinho Fernandes 8/15/2012</source>
          <target state="translated">&quot;Rule of Zero&quot;, R. Martinho Fernandes 8/15/2012</target>
        </trans-unit>
        <trans-unit id="65ac4951c80119bb6b63e6ba1a5588e9cb276926" translate="yes" xml:space="preserve">
          <source>&quot;Substitution Failure Is Not An Error&quot;</source>
          <target state="translated">&quot;Substitution Failure Is Not An Error&quot;</target>
        </trans-unit>
        <trans-unit id="c94e05f669df8608453e13af914eb19f1be20153" translate="yes" xml:space="preserve">
          <source>&quot;[a-b]&quot;</source>
          <target state="translated">&quot;[a-b]&quot;</target>
        </trans-unit>
        <trans-unit id="994b7d64baf5d6bcb8becf8d9ab231b16749b500" translate="yes" xml:space="preserve">
          <source>&quot;\b&quot;</source>
          <target state="translated">&quot;\b&quot;</target>
        </trans-unit>
        <trans-unit id="7b3ce68b6c2f7d67dae4210eeb83be69f978e2a8" translate="yes" xml:space="preserve">
          <source>&quot;a&quot;</source>
          <target state="translated">&quot;a&quot;</target>
        </trans-unit>
        <trans-unit id="4542d1c67eab569f3fa2f81d96afe1a5396d09c1" translate="yes" xml:space="preserve">
          <source>&quot;a+&quot;</source>
          <target state="translated">&quot;a+&quot;</target>
        </trans-unit>
        <trans-unit id="89ce3b078ea32525ccec2dd8075ce98370afb46d" translate="yes" xml:space="preserve">
          <source>&quot;a+b&quot;</source>
          <target state="translated">&quot;a+b&quot;</target>
        </trans-unit>
        <trans-unit id="75db5fe7f0ac4407df36bef74641e349fe6f2fef" translate="yes" xml:space="preserve">
          <source>&quot;ab&quot;</source>
          <target state="translated">&quot;ab&quot;</target>
        </trans-unit>
        <trans-unit id="5428aa0fb78116fc22a1d5c930e4eda34939e497" translate="yes" xml:space="preserve">
          <source>&quot;achieving effects of &lt;code&gt;overflow()&lt;/code&gt; by unspecified means&quot; permits bulk I/O without intermediate buffering: that's how &lt;code&gt;&lt;a href=&quot;../basic_ostream/write&quot;&gt;std::ofstream::write&lt;/a&gt;&lt;/code&gt; simply passes the pointer to the POSIX &lt;code&gt;write()&lt;/code&gt; system call in some implementations of iostreams.</source>
          <target state="translated">&quot;achieving effects of &lt;code&gt;overflow()&lt;/code&gt; by unspecified means&quot; permits bulk I/O without intermediate buffering: that's how &lt;code&gt;&lt;a href=&quot;../basic_ostream/write&quot;&gt;std::ofstream::write&lt;/a&gt;&lt;/code&gt; simply passes the pointer to the POSIX &lt;code&gt;write()&lt;/code&gt; system call in some implementations of iostreams.</target>
        </trans-unit>
        <trans-unit id="282577ce5e1fa05a7a630c2334215d3215369f8f" translate="yes" xml:space="preserve">
          <source>&quot;in the domain of &lt;code&gt;==&lt;/code&gt;&quot; means equality comparison is defined between the two iterator values. For input iterators, equality comparison does not need to be defined for all values, and the set of the values in the domain of &lt;code&gt;==&lt;/code&gt; may change over time.</source>
          <target state="translated">&quot;in the domain of &lt;code&gt;==&lt;/code&gt;&quot; means equality comparison is defined between the two iterator values. For input iterators, equality comparison does not need to be defined for all values, and the set of the values in the domain of &lt;code&gt;==&lt;/code&gt; may change over time.</target>
        </trans-unit>
        <trans-unit id="928db95c2b46b11a9947e31f9504fdeb5520a7c7" translate="yes" xml:space="preserve">
          <source>&quot;r&quot;</source>
          <target state="translated">&quot;r&quot;</target>
        </trans-unit>
        <trans-unit id="e68073f97417529589165ef3c61542824445bfc9" translate="yes" xml:space="preserve">
          <source>&quot;r+&quot;</source>
          <target state="translated">&quot;r+&quot;</target>
        </trans-unit>
        <trans-unit id="7f5c3080a2b9f724e7d998d3b9510f1571a4c925" translate="yes" xml:space="preserve">
          <source>&quot;r+b&quot;</source>
          <target state="translated">&quot;r+b&quot;</target>
        </trans-unit>
        <trans-unit id="02c69d9c2a9dda574aaebb894640a49c2bba999e" translate="yes" xml:space="preserve">
          <source>&quot;rb&quot;</source>
          <target state="translated">&quot;rb&quot;</target>
        </trans-unit>
        <trans-unit id="bacaa46af59518656ee8bf3d122ca23ea67f21c5" translate="yes" xml:space="preserve">
          <source>&quot;w&quot;</source>
          <target state="translated">&quot;w&quot;</target>
        </trans-unit>
        <trans-unit id="b55548521702d1d55bef4b311134d7a5c29b6725" translate="yes" xml:space="preserve">
          <source>&quot;w+&quot;</source>
          <target state="translated">&quot;w+&quot;</target>
        </trans-unit>
        <trans-unit id="50001ebabea07b6a1234ca6c2c5c526ae20bc76a" translate="yes" xml:space="preserve">
          <source>&quot;w+b&quot;</source>
          <target state="translated">&quot;w+b&quot;</target>
        </trans-unit>
        <trans-unit id="712515ae6ae0805cf774b0e6ab07c9046ad523f8" translate="yes" xml:space="preserve">
          <source>&quot;wb&quot;</source>
          <target state="translated">&quot;wb&quot;</target>
        </trans-unit>
        <trans-unit id="c1c8996a2b733fc70c1d5de67c09757269caec0b" translate="yes" xml:space="preserve">
          <source>#define directive</source>
          <target state="translated">#define directive</target>
        </trans-unit>
        <trans-unit id="1a87006683364eca096261e080743c719ca969d4" translate="yes" xml:space="preserve">
          <source>#error</source>
          <target state="translated">#error</target>
        </trans-unit>
        <trans-unit id="955d9903c867672c445416826ac30c43abd1412d" translate="yes" xml:space="preserve">
          <source>#error directive</source>
          <target state="translated">#error directive</target>
        </trans-unit>
        <trans-unit id="f0aa6b33b2c8a76a45bab3b634e4d90002e482d3" translate="yes" xml:space="preserve">
          <source>#if - #ifdef - #else - #endif</source>
          <target state="translated">#if - #ifdef - #else - #endif</target>
        </trans-unit>
        <trans-unit id="8702bf7bcf4f2a6c5c8ce91801bb4556314c7b7f" translate="yes" xml:space="preserve">
          <source>#include directive</source>
          <target state="translated">#include directive</target>
        </trans-unit>
        <trans-unit id="ee70983af3214fb9cb1c6c8bb031767586301e34" translate="yes" xml:space="preserve">
          <source>#line directive</source>
          <target state="translated">#line directive</target>
        </trans-unit>
        <trans-unit id="eec7e589d67595cceff26870e6c0bcd0536d90b5" translate="yes" xml:space="preserve">
          <source>#pragma STDC</source>
          <target state="translated">#pragma STDC</target>
        </trans-unit>
        <trans-unit id="bd0df645673226466fc0eeda93f44ae1b4045f7f" translate="yes" xml:space="preserve">
          <source>#pragma directive</source>
          <target state="translated">#pragma directive</target>
        </trans-unit>
        <trans-unit id="51b62af02eb36fc9cf7725157e073948b56c90ed" translate="yes" xml:space="preserve">
          <source>#pragma once</source>
          <target state="translated">#pragma once</target>
        </trans-unit>
        <trans-unit id="94cec3bffa70f4ecc7e350695d60ca6f78a80312" translate="yes" xml:space="preserve">
          <source>#pragma pack</source>
          <target state="translated">#pragma pack</target>
        </trans-unit>
        <trans-unit id="bdfeb4e56e0e6a24bdb8e91a47aacb93599f1624" translate="yes" xml:space="preserve">
          <source>&amp;Gamma; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma_function&quot;&gt;Gamma function&lt;/a&gt; (See also &lt;code&gt;&lt;a href=&quot;../math/tgamma&quot;&gt;std::tgamma&lt;/a&gt;&lt;/code&gt;) and n are the &lt;a href=&quot;https://en.wikipedia.org/wiki/Degrees_of_freedom_(statistics)&quot;&gt;degrees of freedom&lt;/a&gt; (default 1).</source>
          <target state="translated">&amp;Gamma; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma_function&quot;&gt;Gamma function&lt;/a&gt; (See also &lt;code&gt;&lt;a href=&quot;../math/tgamma&quot;&gt;std::tgamma&lt;/a&gt;&lt;/code&gt;) and n are the &lt;a href=&quot;https://en.wikipedia.org/wiki/Degrees_of_freedom_(statistics)&quot;&gt;degrees of freedom&lt;/a&gt; (default 1).</target>
        </trans-unit>
        <trans-unit id="6bdad3757f6662b802ecb2894730f308d7f3c5bd" translate="yes" xml:space="preserve">
          <source>&amp;Gamma;(</source>
          <target state="translated">&amp;Gamma;(</target>
        </trans-unit>
        <trans-unit id="3037165d8f1fb15293e95b7571f52f6cfda2655a" translate="yes" xml:space="preserve">
          <source>&amp;Gamma;((m+n)/2)</source>
          <target state="translated">&amp;Gamma;((m+n)/2)</target>
        </trans-unit>
        <trans-unit id="be2107231a478bd64a970626e94057d086f2ecb6" translate="yes" xml:space="preserve">
          <source>&amp;Gamma;(m/2) &amp;Gamma;(n/2)</source>
          <target state="translated">&amp;Gamma;(m/2) &amp;Gamma;(n/2)</target>
        </trans-unit>
        <trans-unit id="4f23bd9c2a67979d19a19598ebe275742d0b4782" translate="yes" xml:space="preserve">
          <source>&amp;Gamma;(n/2) 2n/2</source>
          <target state="translated">&amp;Gamma;(n/2) 2n/2</target>
        </trans-unit>
        <trans-unit id="daf84e69433fb1efc9cf8691adcf57ffc3c2f122" translate="yes" xml:space="preserve">
          <source>&amp;Gamma;(x)&amp;Gamma;(y)</source>
          <target state="translated">&amp;Gamma;(x)&amp;Gamma;(y)</target>
        </trans-unit>
        <trans-unit id="90a4f52382c4b8ec38a4a9971a4865fd337ef43d" translate="yes" xml:space="preserve">
          <source>&amp;Gamma;(x+y)</source>
          <target state="translated">&amp;Gamma;(x+y)</target>
        </trans-unit>
        <trans-unit id="26f4a01e3e1e33c4dfeabedc5ae382be302fbbba" translate="yes" xml:space="preserve">
          <source>&amp;Sigma;&amp;infin;</source>
          <target state="translated">&amp;Sigma;&amp;infin;</target>
        </trans-unit>
        <trans-unit id="da54fe01c5909f789bd5e977c81b95e9c8242e33" translate="yes" xml:space="preserve">
          <source>&amp;Sigma;S&lt;sub&gt;i&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;</source>
          <target state="translated">&amp;Sigma;S&lt;sub&gt;i&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="8cf3d1eb310cbf108c66a3e2e3ef237ccc156110" translate="yes" xml:space="preserve">
          <source>&amp;alpha;</source>
          <target state="translated">&amp;alpha;</target>
        </trans-unit>
        <trans-unit id="54f697a1ff421e46f37022813a88d0937a82090c" translate="yes" xml:space="preserve">
          <source>&amp;amp;</source>
          <target state="translated">&amp;amp;</target>
        </trans-unit>
        <trans-unit id="32b106c769918a7c85724568ddedac5dd5da568c" translate="yes" xml:space="preserve">
          <source>&amp;beta;</source>
          <target state="translated">&amp;beta;</target>
        </trans-unit>
        <trans-unit id="aa689998f09bb396c16ea316c782daef39a585f7" translate="yes" xml:space="preserve">
          <source>&amp;beta;&amp;alpha;</source>
          <target state="translated">&amp;beta;&amp;alpha;</target>
        </trans-unit>
        <trans-unit id="fcbadf523c66f28967c5d79ec1bc2351140a8c38" translate="yes" xml:space="preserve">
          <source>&amp;copy; cppreference.com</source>
          <target state="translated">&amp;copy; cppreference.com</target>
        </trans-unit>
        <trans-unit id="f5687bed7280a56132e645e396836a7f85274f85" translate="yes" xml:space="preserve">
          <source>&amp;infin;) of the imaginary axis.</source>
          <target state="translated">&amp;infin;) of the imaginary axis.</target>
        </trans-unit>
        <trans-unit id="61d747903dc6174ea868880eaa9d5c82b887cdfe" translate="yes" xml:space="preserve">
          <source>&amp;infin;,-</source>
          <target state="translated">&amp;infin;,-</target>
        </trans-unit>
        <trans-unit id="c41d83b1879caf75d3ccecb6a5198a9dcb08e4a9" translate="yes" xml:space="preserve">
          <source>&amp;int;&amp;infin;</source>
          <target state="translated">&amp;int;&amp;infin;</target>
        </trans-unit>
        <trans-unit id="3b65e0883c49d9a21d18c5fd488a526423198cf9" translate="yes" xml:space="preserve">
          <source>&amp;int;arg</source>
          <target state="translated">&amp;int;arg</target>
        </trans-unit>
        <trans-unit id="0e22413ab505622f6d43c7c202400e28b1e29adc" translate="yes" xml:space="preserve">
          <source>&amp;lambda;</source>
          <target state="translated">&amp;lambda;</target>
        </trans-unit>
        <trans-unit id="8a19acbe4bda3d1fd45555c3fff4f6d3afd4508a" translate="yes" xml:space="preserve">
          <source>&amp;lt; &lt;code&gt;const volatile&lt;/code&gt;</source>
          <target state="translated">&amp;lt; &lt;code&gt;const volatile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b97e699842289aa0dd6db6a2cad88bb1fe861035" translate="yes" xml:space="preserve">
          <source>&amp;lt; &lt;code&gt;const&lt;/code&gt;</source>
          <target state="translated">&amp;lt; &lt;code&gt;const&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24819f48811118b05c10432913bb75cd39f55340" translate="yes" xml:space="preserve">
          <source>&amp;lt; &lt;code&gt;volatile&lt;/code&gt;</source>
          <target state="translated">&amp;lt; &lt;code&gt;volatile&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9e754f04da60d8828613e529c3e25ed6475ba44" translate="yes" xml:space="preserve">
          <source>&amp;lt;CJK Ideograph Extension B, First&amp;gt; - CJK COMPATIBILITY IDEOGRAPH-2FA1D (U+2FA1D)</source>
          <target state="translated">&amp;lt;CJK Ideograph Extension B, First&amp;gt; - CJK COMPATIBILITY IDEOGRAPH-2FA1D (U+2FA1D)</target>
        </trans-unit>
        <trans-unit id="86d78170b01bb17eeeb0c62b121b40bd5ee0b852" translate="yes" xml:space="preserve">
          <source>&amp;lt;tparams&amp;gt;(C++20)</source>
          <target state="translated">&amp;lt;tparams&amp;gt;(C++20)</target>
        </trans-unit>
        <trans-unit id="2c6fcefc5ce57df727003c0162232be4298451eb" translate="yes" xml:space="preserve">
          <source>&amp;lt;wchar_t, char, mbstate_t&amp;gt;&amp;gt;(&lt;a href=&quot;locale&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&amp;lt;wchar_t, char, mbstate_t&amp;gt;&amp;gt;(&lt;a href=&quot;locale&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="383f134e05f2a4eb1c9f02511f76241f497dabd8" translate="yes" xml:space="preserve">
          <source>&amp;middot;</source>
          <target state="translated">&amp;middot;</target>
        </trans-unit>
        <trans-unit id="dbbbd071cec4a63b80ee9b151e6c1a0d7744eee3" translate="yes" xml:space="preserve">
          <source>&amp;middot; &amp;Gamma;(&amp;alpha;)</source>
          <target state="translated">&amp;middot; &amp;Gamma;(&amp;alpha;)</target>
        </trans-unit>
        <trans-unit id="f1b05d8377bbf0133e4d43ad900d6689e4514fd7" translate="yes" xml:space="preserve">
          <source>&amp;middot; (1 &amp;minus; p)i</source>
          <target state="translated">&amp;middot; (1 &amp;minus; p)i</target>
        </trans-unit>
        <trans-unit id="97c625a3608e84e3396b5d6e7a587fc3ee7f7762" translate="yes" xml:space="preserve">
          <source>&amp;middot; (1 &amp;minus; p)t&amp;minus;i</source>
          <target state="translated">&amp;middot; (1 &amp;minus; p)t&amp;minus;i</target>
        </trans-unit>
        <trans-unit id="ecdc8cc13d83bc497f604b32d397de3f6e656473" translate="yes" xml:space="preserve">
          <source>&amp;middot; x&amp;alpha;-1</source>
          <target state="translated">&amp;middot; x&amp;alpha;-1</target>
        </trans-unit>
        <trans-unit id="31bd98c9f158ca08a4955c0a1f4309d332ea4d86" translate="yes" xml:space="preserve">
          <source>&amp;middot; ⎛</source>
          <target state="translated">&amp;middot; ⎛</target>
        </trans-unit>
        <trans-unit id="65a70f39eac59904c694e5e3509f2f2ac84cc17d" translate="yes" xml:space="preserve">
          <source>&amp;middot;&amp;mu;i</source>
          <target state="translated">&amp;middot;&amp;mu;i</target>
        </trans-unit>
        <trans-unit id="7da8230fd98fb7f743e8d0c77dd23bea99ad649c" translate="yes" xml:space="preserve">
          <source>&amp;mu;</source>
          <target state="translated">&amp;mu;</target>
        </trans-unit>
        <trans-unit id="7091b0e9e2e8d7c1d3e74df6350ee556820a6748" translate="yes" xml:space="preserve">
          <source>&amp;nu;</source>
          <target state="translated">&amp;nu;</target>
        </trans-unit>
        <trans-unit id="79b9c86bb0f291c0dcb1d47ace5d559345eaf22c" translate="yes" xml:space="preserve">
          <source>&amp;nu;(x)</source>
          <target state="translated">&amp;nu;(x)</target>
        </trans-unit>
        <trans-unit id="acb66ecfb0b0a47934a46d676b077d7fa12bb1d9" translate="yes" xml:space="preserve">
          <source>&amp;nu;(x) =</source>
          <target state="translated">&amp;nu;(x) =</target>
        </trans-unit>
        <trans-unit id="581481b10e071e3a7320803ae7e662be10c82917" translate="yes" xml:space="preserve">
          <source>&amp;nu;(x) = &amp;Sigma;&amp;infin;</source>
          <target state="translated">&amp;nu;(x) = &amp;Sigma;&amp;infin;</target>
        </trans-unit>
        <trans-unit id="51ef3b8bc963f29e147bb55fca042046f4e882c4" translate="yes" xml:space="preserve">
          <source>&amp;nu;(x) is &lt;code&gt;std::cyl_bessel_i(&amp;nu;,x))&lt;/code&gt; for x&amp;ge;0 and non-integer &amp;nu;; for integer &amp;nu; a limit is used.</source>
          <target state="translated">&amp;nu;(x) is &lt;code&gt;std::cyl_bessel_i(&amp;nu;,x))&lt;/code&gt; for x&amp;ge;0 and non-integer &amp;nu;; for integer &amp;nu; a limit is used.</target>
        </trans-unit>
        <trans-unit id="3caf6c3ec98ee7c6a7532da89fdcc2c334bd6d41" translate="yes" xml:space="preserve">
          <source>&amp;nu;(x) is &lt;code&gt;std::cyl_bessel_j(&amp;nu;,x)&lt;/code&gt;) for x&amp;ge;0 and non-integer &amp;nu;; for integer &amp;nu; a limit is used.</source>
          <target state="translated">&amp;nu;(x) is &lt;code&gt;std::cyl_bessel_j(&amp;nu;,x)&lt;/code&gt;) for x&amp;ge;0 and non-integer &amp;nu;; for integer &amp;nu; a limit is used.</target>
        </trans-unit>
        <trans-unit id="1d09238846a70e3838f45559af10bd2f7e7b4a45" translate="yes" xml:space="preserve">
          <source>&amp;nu;(x)cos(&amp;nu;&amp;pi;)-J</source>
          <target state="translated">&amp;nu;(x)cos(&amp;nu;&amp;pi;)-J</target>
        </trans-unit>
        <trans-unit id="a74e6e86d3734cb8f73f6d10ee6ae1b29b55d8b6" translate="yes" xml:space="preserve">
          <source>&amp;phi;</source>
          <target state="translated">&amp;phi;</target>
        </trans-unit>
        <trans-unit id="da651efdffe8bace867b517b9b6aaa9028245da5" translate="yes" xml:space="preserve">
          <source>&amp;pi;</source>
          <target state="translated">&amp;pi;</target>
        </trans-unit>
        <trans-unit id="877392257bef230331f596c89268b8d8744067a3" translate="yes" xml:space="preserve">
          <source>&amp;pi; +</source>
          <target state="translated">&amp;pi; +</target>
        </trans-unit>
        <trans-unit id="a6aeb70dc40fa4a742dfaea4246f957644103376" translate="yes" xml:space="preserve">
          <source>&amp;pi; ;</source>
          <target state="translated">&amp;pi; ;</target>
        </trans-unit>
        <trans-unit id="2473dcfb90d02e521917bf709207a5ae2bd16ca6" translate="yes" xml:space="preserve">
          <source>&amp;pi;] along the imaginary axis.</source>
          <target state="translated">&amp;pi;] along the imaginary axis.</target>
        </trans-unit>
        <trans-unit id="7343b0d32554e9f6dcb2fce7c78fd67864c42504" translate="yes" xml:space="preserve">
          <source>&amp;pi;arg</source>
          <target state="translated">&amp;pi;arg</target>
        </trans-unit>
        <trans-unit id="f21fa241e032ab2f5948601d91ee2a3a3405196f" translate="yes" xml:space="preserve">
          <source>&amp;pi;arg-1</source>
          <target state="translated">&amp;pi;arg-1</target>
        </trans-unit>
        <trans-unit id="dce88036edca5f362180f2a96ddfbc7f3bfc6366" translate="yes" xml:space="preserve">
          <source>&amp;plusmn;d</source>
          <target state="translated">&amp;plusmn;d</target>
        </trans-unit>
        <trans-unit id="e6e3d1af9ac765f337b0711b7cf30deb7ffcdc25" translate="yes" xml:space="preserve">
          <source>&amp;plusmn;dd</source>
          <target state="translated">&amp;plusmn;dd</target>
        </trans-unit>
        <trans-unit id="4b14e48b18475db702f82fa6db96cbada4b7ef65" translate="yes" xml:space="preserve">
          <source>&amp;radic;&amp;pi;</source>
          <target state="translated">&amp;radic;&amp;pi;</target>
        </trans-unit>
        <trans-unit id="7cb868baf34fbde405a18bfef9071fe69938c80c" translate="yes" xml:space="preserve">
          <source>&amp;radic;1-k2</source>
          <target state="translated">&amp;radic;1-k2</target>
        </trans-unit>
        <trans-unit id="d8ea96571a5c9178d29e08ca82df79ecb3cc4c85" translate="yes" xml:space="preserve">
          <source>&amp;radic;1-z</source>
          <target state="translated">&amp;radic;1-z</target>
        </trans-unit>
        <trans-unit id="56a36e0d89ebe9b396960d8bf9169c63914a7a40" translate="yes" xml:space="preserve">
          <source>&amp;radic;n&amp;pi;</source>
          <target state="translated">&amp;radic;n&amp;pi;</target>
        </trans-unit>
        <trans-unit id="978455560355b4a8cb833b28c9db958268a6a0c1" translate="yes" xml:space="preserve">
          <source>&amp;radic;z-1</source>
          <target state="translated">&amp;radic;z-1</target>
        </trans-unit>
        <trans-unit id="c32f3caaae52e0446c4dd0afbc3f4e074b70fc55" translate="yes" xml:space="preserve">
          <source>&amp;rho;0</source>
          <target state="translated">&amp;rho;0</target>
        </trans-unit>
        <trans-unit id="84337b97e514fa1d62cce99b73091be2568ea3eb" translate="yes" xml:space="preserve">
          <source>&amp;sigma;</source>
          <target state="translated">&amp;sigma;</target>
        </trans-unit>
        <trans-unit id="01eca34bb9b17d1b03d0e3387ce08e23f3093325" translate="yes" xml:space="preserve">
          <source>&amp;sigma;&amp;radic;2</source>
          <target state="translated">&amp;sigma;&amp;radic;2</target>
        </trans-unit>
        <trans-unit id="84a7b0e7affc8e0cc1dc946a0f9663aa6f4bcc20" translate="yes" xml:space="preserve">
          <source>&amp;sigma;&amp;radic;2&amp;pi;</source>
          <target state="translated">&amp;sigma;&amp;radic;2&amp;pi;</target>
        </trans-unit>
        <trans-unit id="03ba2f985ba8b928288c9e4f8f161394d2bea149" translate="yes" xml:space="preserve">
          <source>&amp;theta;</source>
          <target state="translated">&amp;theta;</target>
        </trans-unit>
        <trans-unit id="1dbf1b1d4a1f92b72a5e49b8b5806814d8159239" translate="yes" xml:space="preserve">
          <source>&amp;theta;)&amp;radic;1-k2</source>
          <target state="translated">&amp;theta;)&amp;radic;1-k2</target>
        </trans-unit>
        <trans-unit id="9f70ff942e2469484b89425ab7c9b361006f098b" translate="yes" xml:space="preserve">
          <source>&amp;theta;d&amp;theta;, is returned.</source>
          <target state="translated">&amp;theta;d&amp;theta;, is returned.</target>
        </trans-unit>
        <trans-unit id="cf6ea895f7686ebbf177ccde009d415117e11e48" translate="yes" xml:space="preserve">
          <source>(&quot;poisoned&quot;). For every type &lt;code&gt;Key&lt;/code&gt; for which neither the library nor the user provides an enabled specialization &lt;code&gt;std::hash&amp;lt;Key&amp;gt;&lt;/code&gt;, that specialization exists and is disabled. Disabled specializations do not satisfy &lt;a href=&quot;../named_req/hash&quot;&gt;Hash&lt;/a&gt;, do not satisfy &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt;, and &lt;code&gt;&lt;a href=&quot;../types/is_default_constructible&quot;&gt;std::is_default_constructible_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_copy_assignable&quot;&gt;std::is_copy_assignable_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_move_assignable&quot;&gt;std::is_move_assignable_v&lt;/a&gt;&lt;/code&gt; are all &lt;code&gt;false&lt;/code&gt;. In other words, they exist, but cannot be used.</source>
          <target state="translated">(&quot;poisoned&quot;). For every type &lt;code&gt;Key&lt;/code&gt; for which neither the library nor the user provides an enabled specialization &lt;code&gt;std::hash&amp;lt;Key&amp;gt;&lt;/code&gt;, that specialization exists and is disabled. Disabled specializations do not satisfy &lt;a href=&quot;../named_req/hash&quot;&gt;Hash&lt;/a&gt;, do not satisfy &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt;, and &lt;code&gt;&lt;a href=&quot;../types/is_default_constructible&quot;&gt;std::is_default_constructible_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_copy_assignable&quot;&gt;std::is_copy_assignable_v&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../types/is_move_assignable&quot;&gt;std::is_move_assignable_v&lt;/a&gt;&lt;/code&gt; are all &lt;code&gt;false&lt;/code&gt;. In other words, they exist, but cannot be used.</target>
        </trans-unit>
        <trans-unit id="ff71dd0f90797005be3589891424329ff3a3c8ec" translate="yes" xml:space="preserve">
          <source>(&quot;pure rvalue&quot;) expressions;</source>
          <target state="translated">(&quot;pure rvalue&quot;) expressions;</target>
        </trans-unit>
        <trans-unit id="16a1d108f9a90702678e5f2fac84e372b9d100b5" translate="yes" xml:space="preserve">
          <source>(&quot;untainted&quot;) or</source>
          <target state="translated">(&quot;untainted&quot;) or</target>
        </trans-unit>
        <trans-unit id="70f239eb7d5dc270fc9c7e842d26650a10288a40" translate="yes" xml:space="preserve">
          <source>(&amp;theta;/2)), where K is &lt;code&gt;std::comp_ellint_1&lt;/code&gt;.</source>
          <target state="translated">(&amp;theta;/2)), where K is &lt;code&gt;std::comp_ellint_1&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="7ffcc6f8678d4318a4dd1171cbee4ea7a9c16af3" translate="yes" xml:space="preserve">
          <source>(-1)k</source>
          <target state="translated">(-1)k</target>
        </trans-unit>
        <trans-unit id="ed6616dfd4625d08375f75e42d054cea464326b4" translate="yes" xml:space="preserve">
          <source>(1)</source>
          <target state="translated">(1)</target>
        </trans-unit>
        <trans-unit id="cdb897cface055a5cdc95d633c6b0a868b1c9f55" translate="yes" xml:space="preserve">
          <source>(1) - meaning changed or new meaning added in C++11.</source>
          <target state="translated">(1) - meaning changed or new meaning added in C++11.</target>
        </trans-unit>
        <trans-unit id="76dfb6d039757be8188d4fa48a4148974a0da94b" translate="yes" xml:space="preserve">
          <source>(1) is defined as deleted unless &lt;code&gt;&lt;a href=&quot;../../types/is_copy_assignable&quot;&gt;std::is_copy_assignable&lt;/a&gt;&amp;lt;T_i&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt;.</source>
          <target state="translated">(1) is defined as deleted unless &lt;code&gt;&lt;a href=&quot;../../types/is_copy_assignable&quot;&gt;std::is_copy_assignable&lt;/a&gt;&amp;lt;T_i&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="e325dac40c5db0bc6fd206e409a4badd5ffdb0b5" translate="yes" xml:space="preserve">
          <source>(1) is defined as deleted unless &lt;code&gt;&lt;a href=&quot;../../types/is_copy_assignable&quot;&gt;std::is_copy_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_copy_assignable&quot;&gt;std::is_copy_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">(1) is defined as deleted unless &lt;code&gt;&lt;a href=&quot;../../types/is_copy_assignable&quot;&gt;std::is_copy_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_copy_assignable&quot;&gt;std::is_copy_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="0d646e5dc024f3ac44520e402ba611e4726c6fb0" translate="yes" xml:space="preserve">
          <source>(1+</source>
          <target state="translated">(1+</target>
        </trans-unit>
        <trans-unit id="9cc47fafa8808413d6129150adbf61b7a7683d7a" translate="yes" xml:space="preserve">
          <source>(1-&amp;nu;sin2</source>
          <target state="translated">(1-&amp;nu;sin2</target>
        </trans-unit>
        <trans-unit id="5314db674251ad2ce0e48c0e0d515b8550d155ce" translate="yes" xml:space="preserve">
          <source>(1-3) allow the static extent to be deduced from built-in arrays and &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">(1-3) allow the static extent to be deduced from built-in arrays and &lt;code&gt;&lt;a href=&quot;../array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="8d46ea8c33cbee73759b1b9ffbe269c989e3b5ad" translate="yes" xml:space="preserve">
          <source>(1-t)(y-1)</source>
          <target state="translated">(1-t)(y-1)</target>
        </trans-unit>
        <trans-unit id="0916e9c38635a2a046dd2b3f1118cc17eec9d36d" translate="yes" xml:space="preserve">
          <source>(10)</source>
          <target state="translated">(10)</target>
        </trans-unit>
        <trans-unit id="e6d7bb8c1a4abf8e85622893d4e781d0d544d01b" translate="yes" xml:space="preserve">
          <source>(11)</source>
          <target state="translated">(11)</target>
        </trans-unit>
        <trans-unit id="41e278e691e64d2c1bbca7c929e681050ea2a211" translate="yes" xml:space="preserve">
          <source>(12)</source>
          <target state="translated">(12)</target>
        </trans-unit>
        <trans-unit id="59c8a1e08c3ef69f2048a6f056d39ba772f53408" translate="yes" xml:space="preserve">
          <source>(13)</source>
          <target state="translated">(13)</target>
        </trans-unit>
        <trans-unit id="47db3274399b37a9aea76c4d95b7519855633a9c" translate="yes" xml:space="preserve">
          <source>(14)</source>
          <target state="translated">(14)</target>
        </trans-unit>
        <trans-unit id="51e73a22fc1aa79649e780bf05ff339a673ddbbc" translate="yes" xml:space="preserve">
          <source>(15)</source>
          <target state="translated">(15)</target>
        </trans-unit>
        <trans-unit id="b1ccca558b0d8ce14088205fe141dc8e9eafd093" translate="yes" xml:space="preserve">
          <source>(16)</source>
          <target state="translated">(16)</target>
        </trans-unit>
        <trans-unit id="93f5ce7884a73932bda95c8d5a8639b68fb51129" translate="yes" xml:space="preserve">
          <source>(17)</source>
          <target state="translated">(17)</target>
        </trans-unit>
        <trans-unit id="c33403dbc1828160307e0c13c5d41dd7717e9109" translate="yes" xml:space="preserve">
          <source>(18)</source>
          <target state="translated">(18)</target>
        </trans-unit>
        <trans-unit id="45abb8e6db9c5656d0c178ec3a306489652b79a8" translate="yes" xml:space="preserve">
          <source>(19)</source>
          <target state="translated">(19)</target>
        </trans-unit>
        <trans-unit id="0902ac4af971870547e03b039a7e5fcecf60148a" translate="yes" xml:space="preserve">
          <source>(2)</source>
          <target state="translated">(2)</target>
        </trans-unit>
        <trans-unit id="d34b0e7073fab52b5a1b36fe6e59c6b43909310d" translate="yes" xml:space="preserve">
          <source>(2) - meaning changed in C++17.</source>
          <target state="translated">(2) - meaning changed in C++17.</target>
        </trans-unit>
        <trans-unit id="22742bf8f1ad8f3562044f854dc679a72e095391" translate="yes" xml:space="preserve">
          <source>(2) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;amp;, const U1&amp;amp;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;amp;, const U2&amp;amp;&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">(2) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;amp;, const U1&amp;amp;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;amp;, const U2&amp;amp;&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b44f462bce1dac6fd6b844423f96c9dbae1127f1" translate="yes" xml:space="preserve">
          <source>(2) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_move_assignable&quot;&gt;std::is_move_assignable&lt;/a&gt;&amp;lt;T_i&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt;.</source>
          <target state="translated">(2) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_move_assignable&quot;&gt;std::is_move_assignable&lt;/a&gt;&amp;lt;T_i&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c7ab4d87d7e74dcd7b0f309271544fb936c7d6cb" translate="yes" xml:space="preserve">
          <source>(20)</source>
          <target state="translated">(20)</target>
        </trans-unit>
        <trans-unit id="099bcc9eff3fb774fb5ff7057cc929abd2dc9e17" translate="yes" xml:space="preserve">
          <source>(21)</source>
          <target state="translated">(21)</target>
        </trans-unit>
        <trans-unit id="72e7e4fb56822aae1374b078ccaac0d9b23ecd07" translate="yes" xml:space="preserve">
          <source>(22)</source>
          <target state="translated">(22)</target>
        </trans-unit>
        <trans-unit id="ac36918ef748f208b4f979adf6d315bd4e89c22f" translate="yes" xml:space="preserve">
          <source>(23)</source>
          <target state="translated">(23)</target>
        </trans-unit>
        <trans-unit id="555cab4fb26526e07d817f9e3a2cd9b417de9140" translate="yes" xml:space="preserve">
          <source>(24)</source>
          <target state="translated">(24)</target>
        </trans-unit>
        <trans-unit id="ebf2e19e066fab20519f94555edc3df86c57d50d" translate="yes" xml:space="preserve">
          <source>(25)</source>
          <target state="translated">(25)</target>
        </trans-unit>
        <trans-unit id="5745dfb1ec5b605285545262b897cb4feae1d22a" translate="yes" xml:space="preserve">
          <source>(26)</source>
          <target state="translated">(26)</target>
        </trans-unit>
        <trans-unit id="771cebf892b738abd0320c1e1219dba854100ab0" translate="yes" xml:space="preserve">
          <source>(27)</source>
          <target state="translated">(27)</target>
        </trans-unit>
        <trans-unit id="c0efdddd567615615c27b65e82cf96d63a82865c" translate="yes" xml:space="preserve">
          <source>(28)</source>
          <target state="translated">(28)</target>
        </trans-unit>
        <trans-unit id="0319608c2b97e0329e546507fb660840b066c8a3" translate="yes" xml:space="preserve">
          <source>(29)</source>
          <target state="translated">(29)</target>
        </trans-unit>
        <trans-unit id="4af0b9b68064e2ee805a94d7642f7f1c8a0e81b9" translate="yes" xml:space="preserve">
          <source>(2l+1)(l-m)!</source>
          <target state="translated">(2l+1)(l-m)!</target>
        </trans-unit>
        <trans-unit id="d77df6f4a77bbd6aa02c6035a0267d136736336a" translate="yes" xml:space="preserve">
          <source>(3)</source>
          <target state="translated">(3)</target>
        </trans-unit>
        <trans-unit id="34e5cd5d47903861dfbac0113cbceb8f6d30e39d" translate="yes" xml:space="preserve">
          <source>(3) - meaning changed in C++20.</source>
          <target state="translated">(3) - meaning changed in C++20.</target>
        </trans-unit>
        <trans-unit id="c4db0b9fb900e79b793613c3a830e9be82730e1d" translate="yes" xml:space="preserve">
          <source>(3) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_move_assignable&quot;&gt;std::is_move_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_move_assignable&quot;&gt;std::is_move_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">(3) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_move_assignable&quot;&gt;std::is_move_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_move_assignable&quot;&gt;std::is_move_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b6abf68b7f0295b9635badd61de12eece43acc81" translate="yes" xml:space="preserve">
          <source>(3) does not participate in overload resolution unless &lt;code&gt;sizeof...(UTypes) == sizeof...(Types)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_i&amp;amp;, const U_i&amp;amp;&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all corresponding pairs of types &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt; and &lt;code&gt;U_i&lt;/code&gt; in &lt;code&gt;UTypes&lt;/code&gt;.</source>
          <target state="translated">(3) does not participate in overload resolution unless &lt;code&gt;sizeof...(UTypes) == sizeof...(Types)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_i&amp;amp;, const U_i&amp;amp;&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all corresponding pairs of types &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt; and &lt;code&gt;U_i&lt;/code&gt; in &lt;code&gt;UTypes&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d8372d6f09b35ae73be810c15de1459cf66866df" translate="yes" xml:space="preserve">
          <source>(3) has the following</source>
          <target state="translated">(3) has the following</target>
        </trans-unit>
        <trans-unit id="2bc448c5b86aa51166b2c8ac72439a6fe7f29f4e" translate="yes" xml:space="preserve">
          <source>(30)</source>
          <target state="translated">(30)</target>
        </trans-unit>
        <trans-unit id="b8b8bea92f266ff0a9acecf1bec7a8eedbb85724" translate="yes" xml:space="preserve">
          <source>(31)</source>
          <target state="translated">(31)</target>
        </trans-unit>
        <trans-unit id="fce5b00b46f400cc788012ee2ed6cff54030661f" translate="yes" xml:space="preserve">
          <source>(32)</source>
          <target state="translated">(32)</target>
        </trans-unit>
        <trans-unit id="27e3c8aeedffedc04f1f3f47d50ff8fac5a9d5c6" translate="yes" xml:space="preserve">
          <source>(33)</source>
          <target state="translated">(33)</target>
        </trans-unit>
        <trans-unit id="9df325b7673d76b67d471d678a4fdadea4981686" translate="yes" xml:space="preserve">
          <source>(34)</source>
          <target state="translated">(34)</target>
        </trans-unit>
        <trans-unit id="05dcdaf9acee26f281a03c6bfd7770ebb58872a1" translate="yes" xml:space="preserve">
          <source>(35)</source>
          <target state="translated">(35)</target>
        </trans-unit>
        <trans-unit id="11b53ac53cf13ff26fbf6d7f3870d4bb5856f59b" translate="yes" xml:space="preserve">
          <source>(35x4</source>
          <target state="translated">(35x4</target>
        </trans-unit>
        <trans-unit id="8fe710405da520ff9390bc1010a0d55d017c67ea" translate="yes" xml:space="preserve">
          <source>(36)</source>
          <target state="translated">(36)</target>
        </trans-unit>
        <trans-unit id="eaa820164ed32e7ce8dd016fd8713e03b57ba341" translate="yes" xml:space="preserve">
          <source>(37)</source>
          <target state="translated">(37)</target>
        </trans-unit>
        <trans-unit id="8c7e10b21616bde513bf97d83e3a944d510d48a1" translate="yes" xml:space="preserve">
          <source>(38)</source>
          <target state="translated">(38)</target>
        </trans-unit>
        <trans-unit id="bb5ff768db9c98a2189c2b787c34f18c8eba8524" translate="yes" xml:space="preserve">
          <source>(39)</source>
          <target state="translated">(39)</target>
        </trans-unit>
        <trans-unit id="221e53d8ae84ab03027c8ef5bde1995ef35bc961" translate="yes" xml:space="preserve">
          <source>(3x2</source>
          <target state="translated">(3x2</target>
        </trans-unit>
        <trans-unit id="10720c7cfed258d6a1fa627a781799fd12b2cc6a" translate="yes" xml:space="preserve">
          <source>(4)</source>
          <target state="translated">(4)</target>
        </trans-unit>
        <trans-unit id="2fd73db663f1d702aabdccd977e5c67c9872bdfb" translate="yes" xml:space="preserve">
          <source>(4) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;amp;, U1&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;amp;, U2&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">(4) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;first_type&amp;amp;, U1&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable_v&lt;/a&gt;&amp;lt;second_type&amp;amp;, U2&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="6b85f4a4fdc1c17482d01b011482f2e0593b5875" translate="yes" xml:space="preserve">
          <source>(4) does not participate in overload resolution unless &lt;code&gt;sizeof...(UTypes) == sizeof...(Types)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_i&amp;amp;, U_i&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all corresponding pairs of types &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt; and &lt;code&gt;U_i&lt;/code&gt; in &lt;code&gt;UTypes&lt;/code&gt;.</source>
          <target state="translated">(4) does not participate in overload resolution unless &lt;code&gt;sizeof...(UTypes) == sizeof...(Types)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_i&amp;amp;, U_i&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for all corresponding pairs of types &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types&lt;/code&gt; and &lt;code&gt;U_i&lt;/code&gt; in &lt;code&gt;UTypes&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a0e97bd1e9bce78350529177d0a94ce4fcdd7471" translate="yes" xml:space="preserve">
          <source>(4-5) allow the element type to be deduced from containers that supply a nested type &lt;code&gt;value_type&lt;/code&gt;.</source>
          <target state="translated">(4-5) allow the element type to be deduced from containers that supply a nested type &lt;code&gt;value_type&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="ae823cded21b3ad6b01b59c059129d117721adaa" translate="yes" xml:space="preserve">
          <source>(40)</source>
          <target state="translated">(40)</target>
        </trans-unit>
        <trans-unit id="f5a6bf627dca4eee2ff0928da6d408ff69b336fd" translate="yes" xml:space="preserve">
          <source>(41)</source>
          <target state="translated">(41)</target>
        </trans-unit>
        <trans-unit id="edcf62c123ba0b835549fe8798fd64f434c54a4f" translate="yes" xml:space="preserve">
          <source>(42)</source>
          <target state="translated">(42)</target>
        </trans-unit>
        <trans-unit id="28bd264a290377b8124b9b0b38bde400148a500d" translate="yes" xml:space="preserve">
          <source>(5)</source>
          <target state="translated">(5)</target>
        </trans-unit>
        <trans-unit id="b09f76f8f91682fad8431a3f6cd7234954b2a42b" translate="yes" xml:space="preserve">
          <source>(5) does not participate in overload resolution unless &lt;code&gt;sizeof...(Types) == 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_0&amp;amp;, const U1&amp;amp;&amp;gt;::value&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_1&amp;amp;, const U2&amp;amp;&amp;gt;::value&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;T_0&lt;/code&gt; and &lt;code&gt;T_1&lt;/code&gt; are the two types constituting &lt;code&gt;Types&lt;/code&gt;.</source>
          <target state="translated">(5) does not participate in overload resolution unless &lt;code&gt;sizeof...(Types) == 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_0&amp;amp;, const U1&amp;amp;&amp;gt;::value&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_1&amp;amp;, const U2&amp;amp;&amp;gt;::value&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;T_0&lt;/code&gt; and &lt;code&gt;T_1&lt;/code&gt; are the two types constituting &lt;code&gt;Types&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="53f920dcaabe474b099bdf69127a7b3a3844d325" translate="yes" xml:space="preserve">
          <source>(5x3</source>
          <target state="translated">(5x3</target>
        </trans-unit>
        <trans-unit id="d531ab20079dd9771b54bfab648528904866b8b4" translate="yes" xml:space="preserve">
          <source>(6)</source>
          <target state="translated">(6)</target>
        </trans-unit>
        <trans-unit id="c6be329e2e3e3f31c2bdbbd6b710de9b6140b7ce" translate="yes" xml:space="preserve">
          <source>(6) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_0&amp;amp;, U1&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_1&amp;amp;, U2&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;T_0&lt;/code&gt; and &lt;code&gt;T_1&lt;/code&gt; are the two types constituting &lt;code&gt;Types&lt;/code&gt;.</source>
          <target state="translated">(6) does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_0&amp;amp;, U1&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T_1&amp;amp;, U2&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;, where &lt;code&gt;T_0&lt;/code&gt; and &lt;code&gt;T_1&lt;/code&gt; are the two types constituting &lt;code&gt;Types&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="f0b422b67ebefe17c506ae529e6f54d8ccea5242" translate="yes" xml:space="preserve">
          <source>(7)</source>
          <target state="translated">(7)</target>
        </trans-unit>
        <trans-unit id="630d9ccc0aa5428d4f10037c8cbdf0d7bec5cfb3" translate="yes" xml:space="preserve">
          <source>(8)</source>
          <target state="translated">(8)</target>
        </trans-unit>
        <trans-unit id="f565b2b5f3419cfa729b792b5d948992be0d69f1" translate="yes" xml:space="preserve">
          <source>(9)</source>
          <target state="translated">(9)</target>
        </trans-unit>
        <trans-unit id="477af9e5df732b538282e086ab5d97891fa7d254" translate="yes" xml:space="preserve">
          <source>(&lt;a href=&quot;translation_phases&quot;&gt;the 96 characters&lt;/a&gt; that are required to be single-byte). Similar to C, C++ supports bytes of sizes 8 bits and greater.</source>
          <target state="translated">(&lt;a href=&quot;translation_phases&quot;&gt;the 96 characters&lt;/a&gt; that are required to be single-byte). Similar to C, C++ supports bytes of sizes 8 bits and greater.</target>
        </trans-unit>
        <trans-unit id="5b3719f8a4ddb53e28287ad8167565883dc325ea" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;&lt;a href=&quot;pptr&quot;&gt;pptr()&lt;/a&gt;&lt;/code&gt;) by &lt;code&gt;count&lt;/code&gt; characters, where &lt;code&gt;count&lt;/code&gt; may be positive or negative. No checks are done for moving the pointer outside the put area &lt;code&gt;[pbase(), epptr())&lt;/code&gt;.</source>
          <target state="translated">(&lt;code&gt;&lt;a href=&quot;pptr&quot;&gt;pptr()&lt;/a&gt;&lt;/code&gt;) by &lt;code&gt;count&lt;/code&gt; characters, where &lt;code&gt;count&lt;/code&gt; may be positive or negative. No checks are done for moving the pointer outside the put area &lt;code&gt;[pbase(), epptr())&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d7564184badc63af2ba808d2ef24214ad6453975" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;[[fallthrough]];&lt;/code&gt;). A fallthrough statement may only be used in a &lt;a href=&quot;../switch&quot;&gt;switch&lt;/a&gt; statement, where the next statement to be executed is a statement with a case or default label for that switch statement. Indicates that the fall through from the previous case label is intentional and should not be diagnosed by a compiler that warns on fallthrough.</source>
          <target state="translated">(&lt;code&gt;[[fallthrough]];&lt;/code&gt;). A fallthrough statement may only be used in a &lt;a href=&quot;../switch&quot;&gt;switch&lt;/a&gt; statement, where the next statement to be executed is a statement with a case or default label for that switch statement. Indicates that the fall through from the previous case label is intentional and should not be diagnosed by a compiler that warns on fallthrough.</target>
        </trans-unit>
        <trans-unit id="602d36835ca7102f4d7604945080ace8db15f24e" translate="yes" xml:space="preserve">
          <source>(A function body that is &lt;code&gt;=default;&lt;/code&gt; or &lt;code&gt;=delete;&lt;/code&gt; contains none of the above.)</source>
          <target state="translated">(A function body that is &lt;code&gt;=default;&lt;/code&gt; or &lt;code&gt;=delete;&lt;/code&gt; contains none of the above.)</target>
        </trans-unit>
        <trans-unit id="8f477a4bb5ef2e9594b15974881b31796bf9df3b" translate="yes" xml:space="preserve">
          <source>(C++11)</source>
          <target state="translated">(C++11)</target>
        </trans-unit>
        <trans-unit id="49e0b664813e369ae3b3c2e5df9f4f6acef0a6a4" translate="yes" xml:space="preserve">
          <source>(C++11)(C++11)</source>
          <target state="translated">(C++11)(C++11)</target>
        </trans-unit>
        <trans-unit id="700ce8cf6964e29557a5f1ae0d9b6c6e36ad8e74" translate="yes" xml:space="preserve">
          <source>(C++11)(C++11)(C++11)</source>
          <target state="translated">(C++11)(C++11)(C++11)</target>
        </trans-unit>
        <trans-unit id="358e8ab2d9f10bfecfaec16b5eed77b4b69db789" translate="yes" xml:space="preserve">
          <source>(C++11)(C++11)(C++11)(C++11)</source>
          <target state="translated">(C++11)(C++11)(C++11)(C++11)</target>
        </trans-unit>
        <trans-unit id="9a61257fea10e203cf5f126c252d59762f58f738" translate="yes" xml:space="preserve">
          <source>(C++11)(C++11)(C++11)(C++11)(C++11)</source>
          <target state="translated">(C++11)(C++11)(C++11)(C++11)(C++11)</target>
        </trans-unit>
        <trans-unit id="c9c0e380ecdd12e3ca90554ec0df9bd0e694a21d" translate="yes" xml:space="preserve">
          <source>(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)</source>
          <target state="translated">(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)</target>
        </trans-unit>
        <trans-unit id="db21172b3837c2e532b349ba9032539ad14b75b3" translate="yes" xml:space="preserve">
          <source>(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)</source>
          <target state="translated">(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)</target>
        </trans-unit>
        <trans-unit id="6a6cf1c7516e08106435d555969b9d87457773e4" translate="yes" xml:space="preserve">
          <source>(C++11)(C++14)</source>
          <target state="translated">(C++11)(C++14)</target>
        </trans-unit>
        <trans-unit id="49f5ef6df6bf6e3f6c3effcf395a3083ca3ede19" translate="yes" xml:space="preserve">
          <source>(C++11)(C++17)</source>
          <target state="translated">(C++11)(C++17)</target>
        </trans-unit>
        <trans-unit id="db2edce1a6506e2fa9b079f537400c859d15df4c" translate="yes" xml:space="preserve">
          <source>(C++11)(C++20)</source>
          <target state="translated">(C++11)(C++20)</target>
        </trans-unit>
        <trans-unit id="a9cf6f02633dbb704af50afecd816eee483516ae" translate="yes" xml:space="preserve">
          <source>(C++11)(C++20)(C++11)(C++11)(C++11)(C++20)(C++20)(C++20)(C++20)(C++20)</source>
          <target state="translated">(C++11)(C++20)(C++11)(C++11)(C++11)(C++20)(C++20)(C++20)(C++20)(C++20)</target>
        </trans-unit>
        <trans-unit id="8fce3e3b7772eaed24b5006a7a616dbe19775529" translate="yes" xml:space="preserve">
          <source>(C++11)(deprecated in C++17)</source>
          <target state="translated">(C++11)(deprecated in C++17)</target>
        </trans-unit>
        <trans-unit id="dfe30c067d5d0f397a4254f718e65ae8100cafcd" translate="yes" xml:space="preserve">
          <source>(C++11)(deprecated in C++17)(removed in C++20)</source>
          <target state="translated">(C++11)(deprecated in C++17)(removed in C++20)</target>
        </trans-unit>
        <trans-unit id="36e8667b59d75cc625ef183cc114fa617c6b00ef" translate="yes" xml:space="preserve">
          <source>(C++11)(deprecated in C++20)</source>
          <target state="translated">(C++11)(deprecated in C++20)</target>
        </trans-unit>
        <trans-unit id="1d677d826b119713d7ca07bc50489fc367e7166b" translate="yes" xml:space="preserve">
          <source>(C++11)(removed in C++17)</source>
          <target state="translated">(C++11)(removed in C++17)</target>
        </trans-unit>
        <trans-unit id="79cf767f7f8b8795202d9666dafdeb05439fd6cf" translate="yes" xml:space="preserve">
          <source>(C++11)(removed in C++20)(C++17)</source>
          <target state="translated">(C++11)(removed in C++20)(C++17)</target>
        </trans-unit>
        <trans-unit id="6aa517a2c30afa53b83406d41b55f20e464b7f21" translate="yes" xml:space="preserve">
          <source>(C++11)(until C++17)</source>
          <target state="translated">(C++11)(until C++17)</target>
        </trans-unit>
        <trans-unit id="7bdcb425f533781aaa4ec9cd705e4d735ceacbf2" translate="yes" xml:space="preserve">
          <source>(C++11).</source>
          <target state="translated">(C++11).</target>
        </trans-unit>
        <trans-unit id="ea554b99a2d30d46090a47925be514b97d30b6f9" translate="yes" xml:space="preserve">
          <source>(C++14)</source>
          <target state="translated">(C++14)</target>
        </trans-unit>
        <trans-unit id="8f4f005af856d89b2a7c806c9c5270fa0ab53d32" translate="yes" xml:space="preserve">
          <source>(C++14)(C++20)</source>
          <target state="translated">(C++14)(C++20)</target>
        </trans-unit>
        <trans-unit id="9853fa37bfdbe5f752f2afd7770e54cda9966e25" translate="yes" xml:space="preserve">
          <source>(C++17)</source>
          <target state="translated">(C++17)</target>
        </trans-unit>
        <trans-unit id="5c35ab5ab6d931c02825002bd3b78e29e3de7544" translate="yes" xml:space="preserve">
          <source>(C++17) a &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt; at the point of instantiation uses the value of a const object of integral or unscoped enum type, the value of a constexpr object, the value of a reference, or the definition of a constexpr function, and that object/reference/function was not defined at the point of definition</source>
          <target state="translated">(C++17) a &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt; at the point of instantiation uses the value of a const object of integral or unscoped enum type, the value of a constexpr object, the value of a reference, or the definition of a constexpr function, and that object/reference/function was not defined at the point of definition</target>
        </trans-unit>
        <trans-unit id="efe68be8c35d5db97df0e7bd61896b9eaac8dd33" translate="yes" xml:space="preserve">
          <source>(C++17) an instantiation uses a default argument or default template argument that had not been defined at the point of definition</source>
          <target state="translated">(C++17) an instantiation uses a default argument or default template argument that had not been defined at the point of definition</target>
        </trans-unit>
        <trans-unit id="3b399f589ae3d97adda81827096fea40c9056d1a" translate="yes" xml:space="preserve">
          <source>(C++17) the template uses a non-dependent class template specialization or variable template specialization at the point of instantiation, and this template it uses is either instantiated from a partial specialization that was not defined at the point of definition or names an explicit specialization that was not declared at the point of definition</source>
          <target state="translated">(C++17) the template uses a non-dependent class template specialization or variable template specialization at the point of instantiation, and this template it uses is either instantiated from a partial specialization that was not defined at the point of definition or names an explicit specialization that was not declared at the point of definition</target>
        </trans-unit>
        <trans-unit id="2acd7a315e60fea181bb40571bdf79b4de4f3d3f" translate="yes" xml:space="preserve">
          <source>(C++17)(C++17)</source>
          <target state="translated">(C++17)(C++17)</target>
        </trans-unit>
        <trans-unit id="7bd51db1517cbaec9536316789c9e85cdc186327" translate="yes" xml:space="preserve">
          <source>(C++17)(C++17)(C++17)</source>
          <target state="translated">(C++17)(C++17)(C++17)</target>
        </trans-unit>
        <trans-unit id="b97cf6249303a3bc75a6fcf77b898323808405a7" translate="yes" xml:space="preserve">
          <source>(C++17)(C++17)(C++17)(C++17)</source>
          <target state="translated">(C++17)(C++17)(C++17)(C++17)</target>
        </trans-unit>
        <trans-unit id="fc9389885a16b9ff8ed11e844f89b91d6483f3cb" translate="yes" xml:space="preserve">
          <source>(C++17)(C++17)(C++17)(C++20)</source>
          <target state="translated">(C++17)(C++17)(C++17)(C++20)</target>
        </trans-unit>
        <trans-unit id="bf322697c27a4bdac7fee11341de73aeeb5ecffb" translate="yes" xml:space="preserve">
          <source>(C++17)(C++17)(C++20)(C++17)(C++17)</source>
          <target state="translated">(C++17)(C++17)(C++20)(C++17)(C++17)</target>
        </trans-unit>
        <trans-unit id="ae3ccd9dec2ebe1b4e27680721a4bdfa5b1089a2" translate="yes" xml:space="preserve">
          <source>(C++17)(C++20)</source>
          <target state="translated">(C++17)(C++20)</target>
        </trans-unit>
        <trans-unit id="f4b66c6e75080add1672ef464b921a30dd057189" translate="yes" xml:space="preserve">
          <source>(C++17)(deprecated in C++20)</source>
          <target state="translated">(C++17)(deprecated in C++20)</target>
        </trans-unit>
        <trans-unit id="81e8495328842b7e5fb3d1cef520a526d52342b4" translate="yes" xml:space="preserve">
          <source>(C++20)</source>
          <target state="translated">(C++20)</target>
        </trans-unit>
        <trans-unit id="6910669e470328b617245510cc5e94f69646fa78" translate="yes" xml:space="preserve">
          <source>(C++20) if the template-id is non-dependent, the associated constraints are satisfied as specified below.</source>
          <target state="translated">(C++20) if the template-id is non-dependent, the associated constraints are satisfied as specified below.</target>
        </trans-unit>
        <trans-unit id="76ab7776f3cd4ea8e9df5272d7250f76fd3d5dfd" translate="yes" xml:space="preserve">
          <source>(C++20)(C++20)</source>
          <target state="translated">(C++20)(C++20)</target>
        </trans-unit>
        <trans-unit id="8ea217f9832f21d210765a80a3ee328e0152be2a" translate="yes" xml:space="preserve">
          <source>(Default) Skip directory symlinks, permission denied is error.</source>
          <target state="translated">(Default) Skip directory symlinks, permission denied is error.</target>
        </trans-unit>
        <trans-unit id="4e2bf9c61ee52f77e6628584a439fc25ce802121" translate="yes" xml:space="preserve">
          <source>(Euler's number, &lt;code&gt;2.7182818...&lt;/code&gt;) raised to the given power &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">(Euler's number, &lt;code&gt;2.7182818...&lt;/code&gt;) raised to the given power &lt;code&gt;arg&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="294611cd00998fabf336da913f5451d6099e14c3" translate="yes" xml:space="preserve">
          <source>(Euler's number, &lt;code&gt;2.7182818&lt;/code&gt;) raised to the &lt;code&gt;z&lt;/code&gt; power.</source>
          <target state="translated">(Euler's number, &lt;code&gt;2.7182818&lt;/code&gt;) raised to the &lt;code&gt;z&lt;/code&gt; power.</target>
        </trans-unit>
        <trans-unit id="cce8e21785e45c87db380b68b82072292052c2d1" translate="yes" xml:space="preserve">
          <source>(Euler's number, &lt;code&gt;2.7182818&lt;/code&gt;) raised to the given power &lt;code&gt;arg&lt;/code&gt;, minus &lt;code&gt;1.0&lt;/code&gt;. This function is more accurate than the expression &lt;code&gt;&lt;a href=&quot;exp&quot;&gt;std::exp&lt;/a&gt;(arg)-1.0&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is close to zero.</source>
          <target state="translated">(Euler's number, &lt;code&gt;2.7182818&lt;/code&gt;) raised to the given power &lt;code&gt;arg&lt;/code&gt;, minus &lt;code&gt;1.0&lt;/code&gt;. This function is more accurate than the expression &lt;code&gt;&lt;a href=&quot;exp&quot;&gt;std::exp&lt;/a&gt;(arg)-1.0&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is close to zero.</target>
        </trans-unit>
        <trans-unit id="6b5a35a2d73c0ab3fb2c09fc0529660eb46b61ab" translate="yes" xml:space="preserve">
          <source>(In general, when the size and layout of &lt;code&gt;T&lt;/code&gt; must be known.).</source>
          <target state="translated">(In general, when the size and layout of &lt;code&gt;T&lt;/code&gt; must be known.).</target>
        </trans-unit>
        <trans-unit id="62adf7a8d86333e58a9b4484dc30fa89b03dd575" translate="yes" xml:space="preserve">
          <source>(NaN), which does not compare equal with anything (including itself). Multiple bit patterns represent NaNs, see &lt;code&gt;&lt;a href=&quot;../numeric/math/nan.2&quot;&gt;std::nan&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../numeric/math/nan&quot;&gt;NAN&lt;/a&gt;&lt;/code&gt;. Note that C++ takes no special notice of signalling NaNs other than detecting their support by &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/has_signaling_nan&quot;&gt;std::numeric_limits::has_signaling_NaN&lt;/a&gt;&lt;/code&gt;, and treats all NaNs as quiet.</source>
          <target state="translated">(NaN), which does not compare equal with anything (including itself). Multiple bit patterns represent NaNs, see &lt;code&gt;&lt;a href=&quot;../numeric/math/nan.2&quot;&gt;std::nan&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../numeric/math/nan&quot;&gt;NAN&lt;/a&gt;&lt;/code&gt;. Note that C++ takes no special notice of signalling NaNs other than detecting their support by &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/has_signaling_nan&quot;&gt;std::numeric_limits::has_signaling_NaN&lt;/a&gt;&lt;/code&gt;, and treats all NaNs as quiet.</target>
        </trans-unit>
        <trans-unit id="d9cc1507a93347d05c8e4ca0e06b9b2dc89728d4" translate="yes" xml:space="preserve">
          <source>(Not used)</source>
          <target state="translated">(Not used)</target>
        </trans-unit>
        <trans-unit id="cd0b54fe47be0110f5661bcd2d900df313ca12cb" translate="yes" xml:space="preserve">
          <source>(Note: POSIX introduced &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/sigaction.html&quot;&gt;sigaction&lt;/a&gt; to standardize these implementation-defined behaviors).</source>
          <target state="translated">(Note: POSIX introduced &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/sigaction.html&quot;&gt;sigaction&lt;/a&gt; to standardize these implementation-defined behaviors).</target>
        </trans-unit>
        <trans-unit id="e0930f07ab9f4998008b5f791f6d2aaca467b8b8" translate="yes" xml:space="preserve">
          <source>(Note: if initialization order was controlled by the appearance in the member initializer lists of different constructors, then the &lt;a href=&quot;destructor&quot;&gt;destructor&lt;/a&gt; wouldn't be able to ensure that the order of destruction is the reverse of the order of construction).</source>
          <target state="translated">(Note: if initialization order was controlled by the appearance in the member initializer lists of different constructors, then the &lt;a href=&quot;destructor&quot;&gt;destructor&lt;/a&gt; wouldn't be able to ensure that the order of destruction is the reverse of the order of construction).</target>
        </trans-unit>
        <trans-unit id="e981d1f026ca051a9beb2af2dfcf51f8ae0438db" translate="yes" xml:space="preserve">
          <source>(Note: the same rules apply to all forms of transfer of control).</source>
          <target state="translated">(Note: the same rules apply to all forms of transfer of control).</target>
        </trans-unit>
        <trans-unit id="ffa8a3df6d9e4b48881223e9ddc0b077f435fbb1" translate="yes" xml:space="preserve">
          <source>(POR) in &lt;code&gt;g()&lt;/code&gt;.</source>
          <target state="translated">(POR) in &lt;code&gt;g()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="faa8f25240c4d4689a6d18f72142675e90a5b2db" translate="yes" xml:space="preserve">
          <source>(SBRM), after the basic use case where the lifetime of an RAII object ends due to scope exit.</source>
          <target state="translated">(SBRM), after the basic use case where the lifetime of an RAII object ends due to scope exit.</target>
        </trans-unit>
        <trans-unit id="26ff53520d30c6df665bed235f6c48b5d6ccee98" translate="yes" xml:space="preserve">
          <source>(T is U[N])</source>
          <target state="translated">(T is U[N])</target>
        </trans-unit>
        <trans-unit id="5f0b02f86055a04c20a1c9d0fd07c73ba07bdb41" translate="yes" xml:space="preserve">
          <source>(T is U[])</source>
          <target state="translated">(T is U[])</target>
        </trans-unit>
        <trans-unit id="fd9410a3a7e870d86813eab848923750cb08a338" translate="yes" xml:space="preserve">
          <source>(T is non-array)</source>
          <target state="translated">(T is non-array)</target>
        </trans-unit>
        <trans-unit id="9de5434c4d0ae8a1ff403333758767c18966bf65" translate="yes" xml:space="preserve">
          <source>(T is not U[])</source>
          <target state="translated">(T is not U[])</target>
        </trans-unit>
        <trans-unit id="e185ea9954dd1acb4f5416ed1d899f4063f38bc5" translate="yes" xml:space="preserve">
          <source>(T is not array)</source>
          <target state="translated">(T is not array)</target>
        </trans-unit>
        <trans-unit id="eb5d216e6e00d698d1d5e17d7743317a10f2d507" translate="yes" xml:space="preserve">
          <source>(TM TS)</source>
          <target state="translated">(TM TS)</target>
        </trans-unit>
        <trans-unit id="4788dcbebbeacffc0b1e4d053f88c31688caedf7" translate="yes" xml:space="preserve">
          <source>(This, along with special rules for &lt;a href=&quot;template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; when &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; is used in a function template, forms the rules that make &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&lt;/code&gt; possible.).</source>
          <target state="translated">(This, along with special rules for &lt;a href=&quot;template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; when &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; is used in a function template, forms the rules that make &lt;code&gt;&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&lt;/code&gt; possible.).</target>
        </trans-unit>
        <trans-unit id="78edf1be60d48d67edff918f615af38e4a316ffe" translate="yes" xml:space="preserve">
          <source>(UTF-8, GB18030)</source>
          <target state="translated">(UTF-8, GB18030)</target>
        </trans-unit>
        <trans-unit id="1ca0792d058b66b804e3d60434c21c58281713ee" translate="yes" xml:space="preserve">
          <source>(a)</source>
          <target state="translated">(a)</target>
        </trans-unit>
        <trans-unit id="acb3efa637ad9f1e52322f7754d1a4138fe32d8a" translate="yes" xml:space="preserve">
          <source>(a).operator()(b...)</source>
          <target state="translated">(a).operator()(b...)</target>
        </trans-unit>
        <trans-unit id="65efc65b487dee08cc57a1cfda47c824d920113e" translate="yes" xml:space="preserve">
          <source>(a).operator-&amp;gt; ( )</source>
          <target state="translated">(a).operator-&amp;gt; ( )</target>
        </trans-unit>
        <trans-unit id="eff9a9c6e8b384ef29374d4cfb6d86172501a4e0" translate="yes" xml:space="preserve">
          <source>(a).operator= (b)</source>
          <target state="translated">(a).operator= (b)</target>
        </trans-unit>
        <trans-unit id="32efb86ea6e0e781f42d5ede13480be4e59c12c6" translate="yes" xml:space="preserve">
          <source>(a).operator@ ( )</source>
          <target state="translated">(a).operator@ ( )</target>
        </trans-unit>
        <trans-unit id="ed7aaa720ec743fa426fa08dedd48a16b5f2cfc6" translate="yes" xml:space="preserve">
          <source>(a).operator@ (0)</source>
          <target state="translated">(a).operator@ (0)</target>
        </trans-unit>
        <trans-unit id="cb12230ac7237e84df1591b34f1e18968da3b02c" translate="yes" xml:space="preserve">
          <source>(a).operator@ (b)</source>
          <target state="translated">(a).operator@ (b)</target>
        </trans-unit>
        <trans-unit id="13233ae8317abcfe0c037b506892dacf0683dc29" translate="yes" xml:space="preserve">
          <source>(a).operator[](b)</source>
          <target state="translated">(a).operator[](b)</target>
        </trans-unit>
        <trans-unit id="0f1a9321dfc5842374eff0ac1226e0815718f6fa" translate="yes" xml:space="preserve">
          <source>(alias template)</source>
          <target state="translated">(alias template)</target>
        </trans-unit>
        <trans-unit id="c8f1b4405fb1b248fd378256792dddeb84faf27d" translate="yes" xml:space="preserve">
          <source>(alias template)(range adaptor object)</source>
          <target state="translated">(alias template)(range adaptor object)</target>
        </trans-unit>
        <trans-unit id="aaa5528602fe4b2299e21db137e2a42130e2cbf6" translate="yes" xml:space="preserve">
          <source>(all)</source>
          <target state="translated">(all)</target>
        </trans-unit>
        <trans-unit id="3d27e5c06eab8a0c272b6faf573707da16cba83c" translate="yes" xml:space="preserve">
          <source>(also accessible via the &lt;code&gt;&lt;a href=&quot;../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&lt;/code&gt; type trait). If, prior to any integral promotion, one operand is of enumeration type and the other operand is of a floating-point type or a different enumeration type, this behavior is deprecated.(since C++20).</source>
          <target state="translated">(also accessible via the &lt;code&gt;&lt;a href=&quot;../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&lt;/code&gt; type trait). If, prior to any integral promotion, one operand is of enumeration type and the other operand is of a floating-point type or a different enumeration type, this behavior is deprecated.(since C++20).</target>
        </trans-unit>
        <trans-unit id="c7d208598e9fb721d58acc5ba1f21096b483fc57" translate="yes" xml:space="preserve">
          <source>(also called</source>
          <target state="translated">(also called</target>
        </trans-unit>
        <trans-unit id="6d0b3fbf82e525d5329b706f0116c76bf0103def" translate="yes" xml:space="preserve">
          <source>(an empty shared_ptr may have a non-null stored pointer if the aliasing constructor was used to create it).</source>
          <target state="translated">(an empty shared_ptr may have a non-null stored pointer if the aliasing constructor was used to create it).</target>
        </trans-unit>
        <trans-unit id="a5067da021ad31689a1d763dcc2e2a08a7b0d4a6" translate="yes" xml:space="preserve">
          <source>(arbitrary &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt; Unicode&lt;/a&gt; value);</source>
          <target state="translated">(arbitrary &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt; Unicode&lt;/a&gt; value);</target>
        </trans-unit>
        <trans-unit id="c6bf7dc1758c2eb741fb9d8e032fef809be283bd" translate="yes" xml:space="preserve">
          <source>(arg), or arcosh(arg)) on the interval [0, +&amp;infin;], is returned.</source>
          <target state="translated">(arg), or arcosh(arg)) on the interval [0, +&amp;infin;], is returned.</target>
        </trans-unit>
        <trans-unit id="11a4fbe41a9d18dd973e5dd71e62cb1c18a60e2d" translate="yes" xml:space="preserve">
          <source>(arg), or arsinh(arg)), is returned.</source>
          <target state="translated">(arg), or arsinh(arg)), is returned.</target>
        </trans-unit>
        <trans-unit id="9fd36d7a2124812bda35cc828fa3192dcba7683b" translate="yes" xml:space="preserve">
          <source>(arg), or artanh(arg)), is returned.</source>
          <target state="translated">(arg), or artanh(arg)), is returned.</target>
        </trans-unit>
        <trans-unit id="e5eff35be92fda3372e332824fa2590365b0f1cd" translate="yes" xml:space="preserve">
          <source>(as computed by &lt;code&gt;&lt;a href=&quot;../types/common_type&quot;&gt;std::common_type_t&lt;/a&gt;&lt;/code&gt;) to which both can be converted.</source>
          <target state="translated">(as computed by &lt;code&gt;&lt;a href=&quot;../types/common_type&quot;&gt;std::common_type_t&lt;/a&gt;&lt;/code&gt;) to which both can be converted.</target>
        </trans-unit>
        <trans-unit id="906226686ec5b83f77342bee3fc4b72213b55270" translate="yes" xml:space="preserve">
          <source>(as computed by &lt;code&gt;std::common_reference_t&lt;/code&gt;) to which both can be converted.</source>
          <target state="translated">(as computed by &lt;code&gt;std::common_reference_t&lt;/code&gt;) to which both can be converted.</target>
        </trans-unit>
        <trans-unit id="a5a8c90aa04dd925dd8459e6bd41c28d0cdc1d8e" translate="yes" xml:space="preserve">
          <source>(as defined above) in finite amount of time, for as long as it has not terminated, regardless of whether other threads (if any) are making progress.</source>
          <target state="translated">(as defined above) in finite amount of time, for as long as it has not terminated, regardless of whether other threads (if any) are making progress.</target>
        </trans-unit>
        <trans-unit id="0c4ebd4a8b078a6929ef2ccfb5c06b2f34b668fe" translate="yes" xml:space="preserve">
          <source>(as defined below) with</source>
          <target state="translated">(as defined below) with</target>
        </trans-unit>
        <trans-unit id="d530ed8955da83bb064383de39ecfabf3ae76bea" translate="yes" xml:space="preserve">
          <source>(as defined below).</source>
          <target state="translated">(as defined below).</target>
        </trans-unit>
        <trans-unit id="08f7a7673cc5f1bb4405335c0ea1b7fc07295dab" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) any subsequent &lt;code&gt;&lt;a href=&quot;lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; operation that obtains ownership of the same mutex.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) any subsequent &lt;code&gt;&lt;a href=&quot;lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; operation that obtains ownership of the same mutex.</target>
        </trans-unit>
        <trans-unit id="a4b6daf5d3b21143c115ec3863b5aa3517d250a9" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) any subsequent lock operation that obtains ownership of the same mutex.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) any subsequent lock operation that obtains ownership of the same mutex.</target>
        </trans-unit>
        <trans-unit id="03445b4f4c87e3b03eae4b40fb3697697a9d74b2" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the beginning of the invocation of the copy of</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the beginning of the invocation of the copy of</target>
        </trans-unit>
        <trans-unit id="e6ba5ce7eea63f580b3943d8975f3926711859b8" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this operation if it returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this operation if it returns &lt;code&gt;true&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c3f11aa0765196fcf148bea98903174186f19220" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this operation if it returns &lt;code&gt;true&lt;/code&gt;. Note that prior &lt;code&gt;&lt;a href=&quot;lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; does not synchronize with this operation if it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this operation if it returns &lt;code&gt;true&lt;/code&gt;. Note that prior &lt;code&gt;&lt;a href=&quot;lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; does not synchronize with this operation if it returns &lt;code&gt;false&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="e8cb65e77d12366efd47adebb3df6359da3a8304" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this operation.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this operation.</target>
        </trans-unit>
        <trans-unit id="4143b72d7256aa4c97b56e4cad138e49396d3fcf" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the call to &lt;code&gt;f&lt;/code&gt;, and the completion of &lt;code&gt;f&lt;/code&gt; is</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the call to &lt;code&gt;f&lt;/code&gt;, and the completion of &lt;code&gt;f&lt;/code&gt; is</target>
        </trans-unit>
        <trans-unit id="bf6cce66bc684d39fad6284f770e82d8191a70e1" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the destruction of all objects with &lt;a href=&quot;../keyword/thread_local&quot;&gt;thread local storage duration&lt;/a&gt; associated with the current thread.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the destruction of all objects with &lt;a href=&quot;../keyword/thread_local&quot;&gt;thread local storage duration&lt;/a&gt; associated with the current thread.</target>
        </trans-unit>
        <trans-unit id="2412574e4073cdee90baaef13c57fb7426614447" translate="yes" xml:space="preserve">
          <source>(as defined in &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the successful return from any function that is waiting on the shared state (such as &lt;code&gt;&lt;a href=&quot;future/get&quot;&gt;std::future::get&lt;/a&gt;&lt;/code&gt;). Concurrent access to the same shared state may conflict otherwise: for example multiple callers of &lt;code&gt;&lt;a href=&quot;shared_future/get&quot;&gt;std::shared_future::get&lt;/a&gt;&lt;/code&gt; must either all be read-only or provide external synchronization.</source>
          <target state="translated">(as defined in &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the successful return from any function that is waiting on the shared state (such as &lt;code&gt;&lt;a href=&quot;future/get&quot;&gt;std::future::get&lt;/a&gt;&lt;/code&gt;). Concurrent access to the same shared state may conflict otherwise: for example multiple callers of &lt;code&gt;&lt;a href=&quot;shared_future/get&quot;&gt;std::shared_future::get&lt;/a&gt;&lt;/code&gt; must either all be read-only or provide external synchronization.</target>
        </trans-unit>
        <trans-unit id="2a39ede2508c48ba014e8c96564b9c4df7585d91" translate="yes" xml:space="preserve">
          <source>(as of C++17, no longer a member of the &lt;code&gt;default_delete&amp;lt;T[]&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(as of C++17, no longer a member of the &lt;code&gt;default_delete&amp;lt;T[]&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="fa7ecf0691eea7d0a0d34abc1477c8afd394175b" translate="yes" xml:space="preserve">
          <source>(b)</source>
          <target state="translated">(b)</target>
        </trans-unit>
        <trans-unit id="9432b2ede078bed5c29c03b4d55f1b9e4af6bc96" translate="yes" xml:space="preserve">
          <source>(brace-enclosed list of initializers and other</source>
          <target state="translated">(brace-enclosed list of initializers and other</target>
        </trans-unit>
        <trans-unit id="7f087506c1e51a8ec1d496227362271ffe889ea0" translate="yes" xml:space="preserve">
          <source>(c)</source>
          <target state="translated">(c)</target>
        </trans-unit>
        <trans-unit id="aa2a9f27b87bff2025274a464194c1c734d2eb0b" translate="yes" xml:space="preserve">
          <source>(c,d)</source>
          <target state="translated">(c,d)</target>
        </trans-unit>
        <trans-unit id="e9e31041d7560942ff17b9257e9f2c5fe9cbe5f0" translate="yes" xml:space="preserve">
          <source>(c,e)</source>
          <target state="translated">(c,e)</target>
        </trans-unit>
        <trans-unit id="0513c795ff2793efc4dd95dec3a7eaf37bdf4ece" translate="yes" xml:space="preserve">
          <source>(class template specialization)</source>
          <target state="translated">(class template specialization)</target>
        </trans-unit>
        <trans-unit id="699570d1b470c2b7fa9b7c4270e0838ea8adcda2" translate="yes" xml:space="preserve">
          <source>(class template)</source>
          <target state="translated">(class template)</target>
        </trans-unit>
        <trans-unit id="5a469559304e4f18316bc78ef22b872f052279eb" translate="yes" xml:space="preserve">
          <source>(class template)(alias template)</source>
          <target state="translated">(class template)(alias template)</target>
        </trans-unit>
        <trans-unit id="55b37419e08641a739c3ceedbc184d0501d98b97" translate="yes" xml:space="preserve">
          <source>(class template)(customization point object)</source>
          <target state="translated">(class template)(customization point object)</target>
        </trans-unit>
        <trans-unit id="08e1729612d83a682f7d437a7abd2fc5e9d606dc" translate="yes" xml:space="preserve">
          <source>(class template)(range adaptor object)</source>
          <target state="translated">(class template)(range adaptor object)</target>
        </trans-unit>
        <trans-unit id="228d7b4dc086f17010a4ac18477186be2a125cc9" translate="yes" xml:space="preserve">
          <source>(class template)(variable template)</source>
          <target state="translated">(class template)(variable template)</target>
        </trans-unit>
        <trans-unit id="4bdece1e9dc9d76a30e62baf68885afa25466405" translate="yes" xml:space="preserve">
          <source>(class)</source>
          <target state="translated">(class)</target>
        </trans-unit>
        <trans-unit id="9c78086134518e9288b0f11b394ec33eb3ae2405" translate="yes" xml:space="preserve">
          <source>(colloquially referred to as</source>
          <target state="translated">(colloquially referred to as</target>
        </trans-unit>
        <trans-unit id="a72bf742ca031a7caf50345d609c6f17a069a6d3" translate="yes" xml:space="preserve">
          <source>(compare equal with &lt;code&gt;&lt;a href=&quot;unordered_multimap/key_eq&quot;&gt;key_eq()&lt;/a&gt;&lt;/code&gt; as the comparator) forms a contiguous subrange in the iteration order, also accessible with &lt;code&gt;&lt;a href=&quot;unordered_multimap/equal_range&quot;&gt;equal_range()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">(compare equal with &lt;code&gt;&lt;a href=&quot;unordered_multimap/key_eq&quot;&gt;key_eq()&lt;/a&gt;&lt;/code&gt; as the comparator) forms a contiguous subrange in the iteration order, also accessible with &lt;code&gt;&lt;a href=&quot;unordered_multimap/equal_range&quot;&gt;equal_range()&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="07057e2b95547c74d447df167d099d3abaa2885a" translate="yes" xml:space="preserve">
          <source>(compare equal with &lt;code&gt;&lt;a href=&quot;unordered_multiset/key_eq&quot;&gt;key_eq()&lt;/a&gt;&lt;/code&gt; as the comparator) forms a contiguous subrange in the iteration order, also accessible with &lt;code&gt;&lt;a href=&quot;unordered_multiset/equal_range&quot;&gt;equal_range()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">(compare equal with &lt;code&gt;&lt;a href=&quot;unordered_multiset/key_eq&quot;&gt;key_eq()&lt;/a&gt;&lt;/code&gt; as the comparator) forms a contiguous subrange in the iteration order, also accessible with &lt;code&gt;&lt;a href=&quot;unordered_multiset/equal_range&quot;&gt;equal_range()&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="3b741c5220e86d7eb9c461afbbd0f5641e50ed4b" translate="yes" xml:space="preserve">
          <source>(complete) elliptic integral of the first kind</source>
          <target state="translated">(complete) elliptic integral of the first kind</target>
        </trans-unit>
        <trans-unit id="0452c8af416398199769030bb9f520451489e142" translate="yes" xml:space="preserve">
          <source>(complete) elliptic integral of the second kind</source>
          <target state="translated">(complete) elliptic integral of the second kind</target>
        </trans-unit>
        <trans-unit id="fcd300a619a22bb5333d791d8b270bf6080d3484" translate="yes" xml:space="preserve">
          <source>(complete) elliptic integral of the third kind</source>
          <target state="translated">(complete) elliptic integral of the third kind</target>
        </trans-unit>
        <trans-unit id="9f1c6c415682ac504b0399cc57870e52d5c3a701" translate="yes" xml:space="preserve">
          <source>(concept)</source>
          <target state="translated">(concept)</target>
        </trans-unit>
        <trans-unit id="362a0859f839c61b0813dbbc8acbcb1b75325bf9" translate="yes" xml:space="preserve">
          <source>(concepts TS)</source>
          <target state="translated">(concepts TS)</target>
        </trans-unit>
        <trans-unit id="00228da208a5ae2e6ec074e9d88517a041e10783" translate="yes" xml:space="preserve">
          <source>(conditionally explicit)</source>
          <target state="translated">(conditionally explicit)</target>
        </trans-unit>
        <trans-unit id="3cca9fc2ce3b8a411e6fef01cc621fb10837b76b" translate="yes" xml:space="preserve">
          <source>(const_)iterator</source>
          <target state="translated">(const_)iterator</target>
        </trans-unit>
        <trans-unit id="5065a725ae1556e223b1e0a38fc5cd8619ef05e2" translate="yes" xml:space="preserve">
          <source>(constant)</source>
          <target state="translated">(constant)</target>
        </trans-unit>
        <trans-unit id="903cf64ad08520b6ff39b56c190182505323ec67" translate="yes" xml:space="preserve">
          <source>(constexpr since C++14)</source>
          <target state="translated">(constexpr since C++14)</target>
        </trans-unit>
        <trans-unit id="1190d2dc37d94a03d932213af25adf62dec4aa37" translate="yes" xml:space="preserve">
          <source>(constexpr since C++20)</source>
          <target state="translated">(constexpr since C++20)</target>
        </trans-unit>
        <trans-unit id="2a1c52cf9553c2122818846ba9aeaa4fb2beb3d7" translate="yes" xml:space="preserve">
          <source>(constructor)</source>
          <target state="translated">(constructor)</target>
        </trans-unit>
        <trans-unit id="ac957d7960f9c4da26f8337848f7582cc0a87ae5" translate="yes" xml:space="preserve">
          <source>(cos(y) + i sin(y)).</source>
          <target state="translated">(cos(y) + i sin(y)).</target>
        </trans-unit>
        <trans-unit id="f1a79890c222ef10bfa45be51b5547169329151b" translate="yes" xml:space="preserve">
          <source>(customization point object)</source>
          <target state="translated">(customization point object)</target>
        </trans-unit>
        <trans-unit id="02234919a2c9ed29e5513a5385bfd7b0991a157d" translate="yes" xml:space="preserve">
          <source>(d)</source>
          <target state="translated">(d)</target>
        </trans-unit>
        <trans-unit id="5d53f80b4cef0df4de96d42018f3248b4c4b032d" translate="yes" xml:space="preserve">
          <source>(declared with the enum-key&lt;code&gt;enum class&lt;/code&gt; or &lt;code&gt;enum struct&lt;/code&gt;).</source>
          <target state="translated">(declared with the enum-key&lt;code&gt;enum class&lt;/code&gt; or &lt;code&gt;enum struct&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="793bf949d2ef1a4d95f9ba1ff35f4059d3cd57f3" translate="yes" xml:space="preserve">
          <source>(declared with the enum-key&lt;code&gt;enum&lt;/code&gt;) and</source>
          <target state="translated">(declared with the enum-key&lt;code&gt;enum&lt;/code&gt;) and</target>
        </trans-unit>
        <trans-unit id="a87c5a99a6d3bcd51d3ee82fa1246d43d4078947" translate="yes" xml:space="preserve">
          <source>(declares or inherits at least one virtual function), and its destructor is not virtual, deleting it is</source>
          <target state="translated">(declares or inherits at least one virtual function), and its destructor is not virtual, deleting it is</target>
        </trans-unit>
        <trans-unit id="ab630fb0a34db1fff4fb7ee8a9c2db46e9474484" translate="yes" xml:space="preserve">
          <source>(default if no build level is selected): checking is performed for contracts whose contract-level is &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">(default if no build level is selected): checking is performed for contracts whose contract-level is &lt;code&gt;default&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="2a3cac73ceebf8f0d6cf2c190f4058372bd17863" translate="yes" xml:space="preserve">
          <source>(default if no continuation mode is selected): after the execution of the violation handler completes, &lt;code&gt;&lt;a href=&quot;../../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; is called;</source>
          <target state="translated">(default if no continuation mode is selected): after the execution of the violation handler completes, &lt;code&gt;&lt;a href=&quot;../../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; is called;</target>
        </trans-unit>
        <trans-unit id="a434dab00557e7569c16403d1243b7c53ac1a4e9" translate="yes" xml:space="preserve">
          <source>(deleted)</source>
          <target state="translated">(deleted)</target>
        </trans-unit>
        <trans-unit id="b8b7e12e1556826edbaad65fa56ef642a4ec5908" translate="yes" xml:space="preserve">
          <source>(depends on the underlying container)</source>
          <target state="translated">(depends on the underlying container)</target>
        </trans-unit>
        <trans-unit id="99b167c047f747fb522f968b3523ea819ccadb44" translate="yes" xml:space="preserve">
          <source>(deprecated in C++11)</source>
          <target state="translated">(deprecated in C++11)</target>
        </trans-unit>
        <trans-unit id="96c876dbcf49afc419615cb298b3443b321191ce" translate="yes" xml:space="preserve">
          <source>(deprecated in C++11)(removed in C++14)</source>
          <target state="translated">(deprecated in C++11)(removed in C++14)</target>
        </trans-unit>
        <trans-unit id="f772a01a82d4b6fce1e7c4444db6e4d4c8e6a847" translate="yes" xml:space="preserve">
          <source>(deprecated in C++11)(removed in C++17)</source>
          <target state="translated">(deprecated in C++11)(removed in C++17)</target>
        </trans-unit>
        <trans-unit id="82d5a440bd1416149ac16f78013602ad0c27d58c" translate="yes" xml:space="preserve">
          <source>(deprecated in C++11)(removed in C++20)</source>
          <target state="translated">(deprecated in C++11)(removed in C++20)</target>
        </trans-unit>
        <trans-unit id="c16dad9685700895973816eafa4c164a4756c997" translate="yes" xml:space="preserve">
          <source>(deprecated in C++14)</source>
          <target state="translated">(deprecated in C++14)</target>
        </trans-unit>
        <trans-unit id="375264e08207f8fe8e76ff84be9dbdb9cdaec2ab" translate="yes" xml:space="preserve">
          <source>(deprecated in C++17)</source>
          <target state="translated">(deprecated in C++17)</target>
        </trans-unit>
        <trans-unit id="a94a86a66134f62df7fee6e63d2b511f83aea013" translate="yes" xml:space="preserve">
          <source>(deprecated in C++17)(removed in C++20)</source>
          <target state="translated">(deprecated in C++17)(removed in C++20)</target>
        </trans-unit>
        <trans-unit id="6fad3d9112ea574883fa589299ab926bae2584b9" translate="yes" xml:space="preserve">
          <source>(deprecated in C++20)</source>
          <target state="translated">(deprecated in C++20)</target>
        </trans-unit>
        <trans-unit id="e586a4cd86be78ad35b375ba6f827ccdc418b34c" translate="yes" xml:space="preserve">
          <source>(deprecated in C++98)</source>
          <target state="translated">(deprecated in C++98)</target>
        </trans-unit>
        <trans-unit id="dee8c577140cf46240134efafcf9c1930ae10f34" translate="yes" xml:space="preserve">
          <source>(deprecated in C++98)(removed in C++17)</source>
          <target state="translated">(deprecated in C++98)(removed in C++17)</target>
        </trans-unit>
        <trans-unit id="3f248d4fa1370943c5a2baec143700543f97bb15" translate="yes" xml:space="preserve">
          <source>(deprecated in c++17)(removed in C++20)(C++17)</source>
          <target state="translated">(deprecated in c++17)(removed in C++20)(C++17)</target>
        </trans-unit>
        <trans-unit id="74d3134b20a65268929431209027a7c8c56d78c3" translate="yes" xml:space="preserve">
          <source>(deprecated)</source>
          <target state="translated">(deprecated)</target>
        </trans-unit>
        <trans-unit id="62b67c31895c29b5591c3991678be85485cb3d74" translate="yes" xml:space="preserve">
          <source>(deprecated) Namespace scope declaration of a static data member that was defined within the class with the &lt;code&gt;&lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt;&lt;/code&gt; specifier</source>
          <target state="translated">(deprecated) Namespace scope declaration of a static data member that was defined within the class with the &lt;code&gt;&lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt;&lt;/code&gt; specifier</target>
        </trans-unit>
        <trans-unit id="94632048d7c2c3cc14163c0e1275541924441cad" translate="yes" xml:space="preserve">
          <source>(deprecated)(removed in C++20)</source>
          <target state="translated">(deprecated)(removed in C++20)</target>
        </trans-unit>
        <trans-unit id="6fd828162490bba06e9e79620144e0eb93a42348" translate="yes" xml:space="preserve">
          <source>(deprecated)(until C++17)</source>
          <target state="translated">(deprecated)(until C++17)</target>
        </trans-unit>
        <trans-unit id="1e925ffb2d1273c11586a62663143ae91b8e9506" translate="yes" xml:space="preserve">
          <source>(described in the specification of the structured binding declaration).</source>
          <target state="translated">(described in the specification of the structured binding declaration).</target>
        </trans-unit>
        <trans-unit id="ba14fbbbad42bdfa02fc5b066937feb0ea603ec7" translate="yes" xml:space="preserve">
          <source>(destructor)</source>
          <target state="translated">(destructor)</target>
        </trans-unit>
        <trans-unit id="8ce454fb63d9f0c8b387e702bf3416851b5627fe" translate="yes" xml:space="preserve">
          <source>(e)</source>
          <target state="translated">(e)</target>
        </trans-unit>
        <trans-unit id="b734727395291208dcbc52776d37a964263b9d27" translate="yes" xml:space="preserve">
          <source>(e.g. &lt;code&gt;&lt;a href=&quot;promise/set_value&quot;&gt;std::promise::set_value&lt;/a&gt;&lt;/code&gt;) that is linked to the creator's &lt;code&gt;std::future&lt;/code&gt;.</source>
          <target state="translated">(e.g. &lt;code&gt;&lt;a href=&quot;promise/set_value&quot;&gt;std::promise::set_value&lt;/a&gt;&lt;/code&gt;) that is linked to the creator's &lt;code&gt;std::future&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="974866a84c8847ff327f09161011b22d1c936c3e" translate="yes" xml:space="preserve">
          <source>(either &lt;code&gt;auto&lt;/code&gt; or a &lt;a href=&quot;../concepts&quot;&gt;Concept type&lt;/a&gt;), the function declaration is instead an &lt;a href=&quot;function_template#Abbreviated_function_template&quot;&gt;abbreviated function template&lt;/a&gt; declaration:</source>
          <target state="translated">(either &lt;code&gt;auto&lt;/code&gt; or a &lt;a href=&quot;../concepts&quot;&gt;Concept type&lt;/a&gt;), the function declaration is instead an &lt;a href=&quot;function_template#Abbreviated_function_template&quot;&gt;abbreviated function template&lt;/a&gt; declaration:</target>
        </trans-unit>
        <trans-unit id="263e4445ee6e8a9b5ffbc3ad4fdafc9fa40f62d7" translate="yes" xml:space="preserve">
          <source>(enum)</source>
          <target state="translated">(enum)</target>
        </trans-unit>
        <trans-unit id="4429588236acd68057668c4841976f611ab0797e" translate="yes" xml:space="preserve">
          <source>(exactly one of the expressions is true)</source>
          <target state="translated">(exactly one of the expressions is true)</target>
        </trans-unit>
        <trans-unit id="0b5960687fcc2c64d43b677f4102a35cd5000efc" translate="yes" xml:space="preserve">
          <source>(exception handler) blocks</source>
          <target state="translated">(exception handler) blocks</target>
        </trans-unit>
        <trans-unit id="c6a1eb50a2e2b896d9f0d1af1dc4a35c446c66ed" translate="yes" xml:space="preserve">
          <source>(exposition only)</source>
          <target state="translated">(exposition only)</target>
        </trans-unit>
        <trans-unit id="cdcfe4ea535829168aec01a8bb7e96fe367a58c4" translate="yes" xml:space="preserve">
          <source>(follows) &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">(follows) &lt;code&gt;rhs&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="549ff0e04db80604b3bd059bb3b54c7d074bfdb1" translate="yes" xml:space="preserve">
          <source>(for input) or</source>
          <target state="translated">(for input) or</target>
        </trans-unit>
        <trans-unit id="4b16e88c1e7b8274dd3b24c3b3e30e6fe69a7af1" translate="yes" xml:space="preserve">
          <source>(for non-private member functions) Failures to (re)establish a class invariant</source>
          <target state="translated">(for non-private member functions) Failures to (re)establish a class invariant</target>
        </trans-unit>
        <trans-unit id="86657ea02a73815ee9140aacc1ab71b0fa1c9c01" translate="yes" xml:space="preserve">
          <source>(for output). This may be an entity that is accessed through OS API (file, TCP socket, serial port, other character device), or it may be an object (std::vector, array, string literal), that can be interpreted as a character source or sink.</source>
          <target state="translated">(for output). This may be an entity that is accessed through OS API (file, TCP socket, serial port, other character device), or it may be an object (std::vector, array, string literal), that can be interpreted as a character source or sink.</target>
        </trans-unit>
        <trans-unit id="45ffd807aceb2595251d0bcb25979b1154fe23ab" translate="yes" xml:space="preserve">
          <source>(for std::vector and std::deque)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; or &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</source>
          <target state="translated">(for std::vector and std::deque)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; or &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="693d1a34c7acd0360a1c9b8b80b654f53ac4525e" translate="yes" xml:space="preserve">
          <source>(for std::vector and std::deque)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt; and &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt;.</source>
          <target state="translated">(for std::vector and std::deque)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt; and &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="dfa48b019af8d1c4a7e8d00dfcb8e113d9ef4e63" translate="yes" xml:space="preserve">
          <source>(for std::vector and std::deque)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</source>
          <target state="translated">(for std::vector and std::deque)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1c617ac0064df97a7ca4e3a419c1c279ff273540" translate="yes" xml:space="preserve">
          <source>(for x&amp;ge;0), is returned.</source>
          <target state="translated">(for x&amp;ge;0), is returned.</target>
        </trans-unit>
        <trans-unit id="bbe03abe60df3921bf1b1dabe87cd3538fa41617" translate="yes" xml:space="preserve">
          <source>(function macro)</source>
          <target state="translated">(function macro)</target>
        </trans-unit>
        <trans-unit id="ff06c7bb41c25f5795ab4991d3703dab6799b39c" translate="yes" xml:space="preserve">
          <source>(function template)</source>
          <target state="translated">(function template)</target>
        </trans-unit>
        <trans-unit id="d720d1479fef9c06c2fa4729f4fff424550c2ed8" translate="yes" xml:space="preserve">
          <source>(function)</source>
          <target state="translated">(function)</target>
        </trans-unit>
        <trans-unit id="a08d07b469c71f090a09bfd3e2b1737abcb833c5" translate="yes" xml:space="preserve">
          <source>(generic lambda)</source>
          <target state="translated">(generic lambda)</target>
        </trans-unit>
        <trans-unit id="20dbba829d1240708a456ae784ad5a815875573b" translate="yes" xml:space="preserve">
          <source>(generic lambda, the keyword mutable was used)</source>
          <target state="translated">(generic lambda, the keyword mutable was used)</target>
        </trans-unit>
        <trans-unit id="b3b5488379245cc94dd4c9828589793573cdb579" translate="yes" xml:space="preserve">
          <source>(global object)</source>
          <target state="translated">(global object)</target>
        </trans-unit>
        <trans-unit id="9f97d6769102149488620b422aa0aa3884cc0184" translate="yes" xml:space="preserve">
          <source>(guaranteed) an exception is thrown during the move initialization of the contained value during &lt;a href=&quot;operator=&quot;&gt;move assignment&lt;/a&gt;</source>
          <target state="translated">(guaranteed) an exception is thrown during the move initialization of the contained value during &lt;a href=&quot;operator=&quot;&gt;move assignment&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b67e48b02951a52199722fe5f9cecb8bded50a9d" translate="yes" xml:space="preserve">
          <source>(guaranteed) an exception is thrown during the move initialization of the contained value from the temporary in &lt;a href=&quot;operator=&quot;&gt;copy assignment&lt;/a&gt;</source>
          <target state="translated">(guaranteed) an exception is thrown during the move initialization of the contained value from the temporary in &lt;a href=&quot;operator=&quot;&gt;copy assignment&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37db3efbeb0aa1ef22ae1bfbe4a3fa00a9c5c02c" translate="yes" xml:space="preserve">
          <source>(have the same effect when evaluated, and both or neither are potentially-throwing, both or neither are constant subexpressions), and</source>
          <target state="translated">(have the same effect when evaluated, and both or neither are potentially-throwing, both or neither are constant subexpressions), and</target>
        </trans-unit>
        <trans-unit id="f421bbe3d1f44774ccab108a2785dedbe24a61a0" translate="yes" xml:space="preserve">
          <source>(implicit)</source>
          <target state="translated">(implicit)</target>
        </trans-unit>
        <trans-unit id="4831d9e25fc272d1eaf5f902c66e72f940967f5a" translate="yes" xml:space="preserve">
          <source>(implicitly declared)</source>
          <target state="translated">(implicitly declared)</target>
        </trans-unit>
        <trans-unit id="b0e1a1fc64737af27bf6450d379c182c4489782d" translate="yes" xml:space="preserve">
          <source>(in other words, adding a new function declaration after template definition does not make it visible, except via ADL).</source>
          <target state="translated">(in other words, adding a new function declaration after template definition does not make it visible, except via ADL).</target>
        </trans-unit>
        <trans-unit id="eb98e3d58ad994e57a18a79074be38d934c24a7a" translate="yes" xml:space="preserve">
          <source>(in particular, release of a &lt;code&gt;&lt;a href=&quot;../thread/mutex&quot;&gt;std::mutex&lt;/a&gt;&lt;/code&gt; is</source>
          <target state="translated">(in particular, release of a &lt;code&gt;&lt;a href=&quot;../thread/mutex&quot;&gt;std::mutex&lt;/a&gt;&lt;/code&gt; is</target>
        </trans-unit>
        <trans-unit id="a6c434c74296cb8add47daf03037584784fad952" translate="yes" xml:space="preserve">
          <source>(in particular, some storage class specifiers are allowed);</source>
          <target state="translated">(in particular, some storage class specifiers are allowed);</target>
        </trans-unit>
        <trans-unit id="4713ee2dae93dd549d44ff2dc41e7db5c116b90d" translate="yes" xml:space="preserve">
          <source>(in which case the pointer is said to</source>
          <target state="translated">(in which case the pointer is said to</target>
        </trans-unit>
        <trans-unit id="502daa9818f7f31862e7f5882d5417d7c9359d04" translate="yes" xml:space="preserve">
          <source>(incomplete) elliptic integral of the first kind</source>
          <target state="translated">(incomplete) elliptic integral of the first kind</target>
        </trans-unit>
        <trans-unit id="877a9822e042c5c2d06a3ce7478be445413b5a00" translate="yes" xml:space="preserve">
          <source>(incomplete) elliptic integral of the second kind</source>
          <target state="translated">(incomplete) elliptic integral of the second kind</target>
        </trans-unit>
        <trans-unit id="08c7254c97ffee1201bb124b2e9949bd92c83af9" translate="yes" xml:space="preserve">
          <source>(incomplete) elliptic integral of the third kind</source>
          <target state="translated">(incomplete) elliptic integral of the third kind</target>
        </trans-unit>
        <trans-unit id="d9779dac7aa2235502c00a74a1791f65dd711883" translate="yes" xml:space="preserve">
          <source>(is invocable as &lt;code&gt;T(&lt;a href=&quot;allocator_arg&quot;&gt;std::allocator_arg&lt;/a&gt;, alloc, args...)&lt;/code&gt;), then uses-allocator construction uses this form</source>
          <target state="translated">(is invocable as &lt;code&gt;T(&lt;a href=&quot;allocator_arg&quot;&gt;std::allocator_arg&lt;/a&gt;, alloc, args...)&lt;/code&gt;), then uses-allocator construction uses this form</target>
        </trans-unit>
        <trans-unit id="b968dbe9cd4fcd3efa3b62e20710848f64572c2b" translate="yes" xml:space="preserve">
          <source>(is invocable as &lt;code&gt;T(args..., alloc)&lt;/code&gt;), then uses-allocator construction uses this form</source>
          <target state="translated">(is invocable as &lt;code&gt;T(args..., alloc)&lt;/code&gt;), then uses-allocator construction uses this form</target>
        </trans-unit>
        <trans-unit id="121fb1b30870b9aeba24b49404186c938b80a4c3" translate="yes" xml:space="preserve">
          <source>(library fundamentals TS v2)</source>
          <target state="translated">(library fundamentals TS v2)</target>
        </trans-unit>
        <trans-unit id="9844b1f7ff5cb646ec0e0466c846228ef5140111" translate="yes" xml:space="preserve">
          <source>(ln x - m)2</source>
          <target state="translated">(ln x - m)2</target>
        </trans-unit>
        <trans-unit id="9900323e40b367a1f2c0aa09a2d1e3b35952681a" translate="yes" xml:space="preserve">
          <source>(m/n)m/2</source>
          <target state="translated">(m/n)m/2</target>
        </trans-unit>
        <trans-unit id="74c30a64a845fec0504be78d754393306a373980" translate="yes" xml:space="preserve">
          <source>(macro constant)</source>
          <target state="translated">(macro constant)</target>
        </trans-unit>
        <trans-unit id="cfcb76465321134e894b8c3083d0b2a7929cd09d" translate="yes" xml:space="preserve">
          <source>(macro variable)</source>
          <target state="translated">(macro variable)</target>
        </trans-unit>
        <trans-unit id="cf3059ce036ac4baa8801597b49b37205b3acac6" translate="yes" xml:space="preserve">
          <source>(member of &lt;code&gt;pointer_traits&amp;lt;Ptr&amp;gt;&lt;/code&gt; specialization)</source>
          <target state="translated">(member of &lt;code&gt;pointer_traits&amp;lt;Ptr&amp;gt;&lt;/code&gt; specialization)</target>
        </trans-unit>
        <trans-unit id="206771ec3f4b8a60ded8e295052762f72f1f85f6" translate="yes" xml:space="preserve">
          <source>(member of &lt;code&gt;pointer_traits&amp;lt;T*&amp;gt;&lt;/code&gt; specialization)</source>
          <target state="translated">(member of &lt;code&gt;pointer_traits&amp;lt;T*&amp;gt;&lt;/code&gt; specialization)</target>
        </trans-unit>
        <trans-unit id="b4a755db4a790f3f428e28c29bca6003979e08b2" translate="yes" xml:space="preserve">
          <source>(member of specialization (1))</source>
          <target state="translated">(member of specialization (1))</target>
        </trans-unit>
        <trans-unit id="7fe60e134c782b531ab5a820389ec3d541ba64ec" translate="yes" xml:space="preserve">
          <source>(member of specialization (2))</source>
          <target state="translated">(member of specialization (2))</target>
        </trans-unit>
        <trans-unit id="5b61fb0f822aa956e36a7c79f627a962ea10b896" translate="yes" xml:space="preserve">
          <source>(member of specialization (3))</source>
          <target state="translated">(member of specialization (3))</target>
        </trans-unit>
        <trans-unit id="28afd34ff087e8c7f0bad3f611ba7b66323940d9" translate="yes" xml:space="preserve">
          <source>(member of specialization (4))</source>
          <target state="translated">(member of specialization (4))</target>
        </trans-unit>
        <trans-unit id="ebc71771d98b316c1907ccbed8663cd1bb5c5882" translate="yes" xml:space="preserve">
          <source>(member of specialization (5))</source>
          <target state="translated">(member of specialization (5))</target>
        </trans-unit>
        <trans-unit id="9e15ea107ec52b84eb877ca7021db0a11b0e603c" translate="yes" xml:space="preserve">
          <source>(member of specialization (6))</source>
          <target state="translated">(member of specialization (6))</target>
        </trans-unit>
        <trans-unit id="5619e9fc329be0f34bb4de710c4e88427af128d6" translate="yes" xml:space="preserve">
          <source>(member of specialization (7))</source>
          <target state="translated">(member of specialization (7))</target>
        </trans-unit>
        <trans-unit id="ccc56fb88fb86cc4c591f196ee5aae797a4d052b" translate="yes" xml:space="preserve">
          <source>(member of specialization (8))</source>
          <target state="translated">(member of specialization (8))</target>
        </trans-unit>
        <trans-unit id="84b8f1849108dd876acd8de6807772235a345f98" translate="yes" xml:space="preserve">
          <source>(member of specialization (9))</source>
          <target state="translated">(member of specialization (9))</target>
        </trans-unit>
        <trans-unit id="1efeac3ec7c9dc9a1736aecf618e91997224578e" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;atomic&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;atomic&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="df2c02b4fc70061e9f926677fc778bc724f8604e" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;atomic&amp;lt;T*&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;atomic&amp;lt;T*&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="5d7c8ee711ce740e37830afd254b3050d9d9e52b" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="af1c75c86ad9331897f1c722917c53a75c33b06b" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;default_delete&amp;lt;T[]&amp;gt;&lt;/code&gt; template specialization, but defined as deleted prior to C++17)</source>
          <target state="translated">(member only of &lt;code&gt;default_delete&amp;lt;T[]&amp;gt;&lt;/code&gt; template specialization, but defined as deleted prior to C++17)</target>
        </trans-unit>
        <trans-unit id="060af88dd46653f055ce0f9fe7f746a03c2c8ab1" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;future&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;future&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="2d6fbe05b520c5a22c928ccc411ae59c838f8a0f" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;future&amp;lt;void&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;future&amp;lt;void&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="872c29cff6f79961fecd3ca908e588047c856217" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;owner_less&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;owner_less&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="f6221354f190bcfba5c7a9880220148982ecb45e" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;owner_less&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;owner_less&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="26b7688b4dad701333ad55cf19b8f211e7a16671" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;promise&amp;lt;R&amp;amp;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;promise&amp;lt;R&amp;amp;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="59562ad453289e3b58b75911b61e0404820127a0" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;promise&amp;lt;void&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;promise&amp;lt;void&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="23b7d06bd2b3dea8b5e79f03805873cfd4c20b26" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;shared_future&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;shared_future&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="fbf7d3ee7cf94c007039e3a56e08c57a32a3a484" translate="yes" xml:space="preserve">
          <source>(member only of &lt;code&gt;shared_future&amp;lt;void&amp;gt;&lt;/code&gt; template specialization)</source>
          <target state="translated">(member only of &lt;code&gt;shared_future&amp;lt;void&amp;gt;&lt;/code&gt; template specialization)</target>
        </trans-unit>
        <trans-unit id="83d167c0431f5992e98fb36d009e03f53b233984" translate="yes" xml:space="preserve">
          <source>(member only of generic &lt;code&gt;future&lt;/code&gt; template)</source>
          <target state="translated">(member only of generic &lt;code&gt;future&lt;/code&gt; template)</target>
        </trans-unit>
        <trans-unit id="bc27beb9dea4d99a28b2b8cdf7914a593e29424e" translate="yes" xml:space="preserve">
          <source>(member only of generic &lt;code&gt;promise&lt;/code&gt; template)</source>
          <target state="translated">(member only of generic &lt;code&gt;promise&lt;/code&gt; template)</target>
        </trans-unit>
        <trans-unit id="ad4bc3746365aceb51682dfab77db19116fc4cc8" translate="yes" xml:space="preserve">
          <source>(member only of generic &lt;code&gt;shared_future&lt;/code&gt; template)</source>
          <target state="translated">(member only of generic &lt;code&gt;shared_future&lt;/code&gt; template)</target>
        </trans-unit>
        <trans-unit id="ae8c07f4bb2365b252edde71141f955ff2260ec8" translate="yes" xml:space="preserve">
          <source>(member only of primary &lt;code&gt;default_delete&lt;/code&gt; template)</source>
          <target state="translated">(member only of primary &lt;code&gt;default_delete&lt;/code&gt; template)</target>
        </trans-unit>
        <trans-unit id="03bb478c5e94d93f822b9c3bc593a1026ea11210" translate="yes" xml:space="preserve">
          <source>(member only of the array &lt;code&gt;default_delete&lt;/code&gt; specialization)</source>
          <target state="translated">(member only of the array &lt;code&gt;default_delete&lt;/code&gt; specialization)</target>
        </trans-unit>
        <trans-unit id="a4b010f998dcfa9dbd19728f75d1b51a45b1df6a" translate="yes" xml:space="preserve">
          <source>(n+1)&amp;Beta;(n-k+1,k+1)</source>
          <target state="translated">(n+1)&amp;Beta;(n-k+1,k+1)</target>
        </trans-unit>
        <trans-unit id="bfda68bc98f57045eb2e086db2f15ca99095ca3b" translate="yes" xml:space="preserve">
          <source>(named requirement)</source>
          <target state="translated">(named requirement)</target>
        </trans-unit>
        <trans-unit id="c38c67ca920bcc5b4f1279588a9701c2a521f1a1" translate="yes" xml:space="preserve">
          <source>(niebloid)</source>
          <target state="translated">(niebloid)</target>
        </trans-unit>
        <trans-unit id="acd651d83d3e6a50fa035da50ade77b3101f2784" translate="yes" xml:space="preserve">
          <source>(no suffix) defines &lt;code&gt;double&lt;/code&gt;</source>
          <target state="translated">(no suffix) defines &lt;code&gt;double&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c6b183d348f955357b33a3fba45083e98ab8125" translate="yes" xml:space="preserve">
          <source>(none)</source>
          <target state="translated">(none)</target>
        </trans-unit>
        <trans-unit id="8ad5520ebd97d40c8e86735b481554753b1f56e3" translate="yes" xml:space="preserve">
          <source>(none).</source>
          <target state="translated">(none).</target>
        </trans-unit>
        <trans-unit id="e67e2bc3be0f35fb7fba2e878f248b284d9fd986" translate="yes" xml:space="preserve">
          <source>(not to be confused with &lt;a href=&quot;../language/constructor&quot;&gt;member initializer list&lt;/a&gt;).</source>
          <target state="translated">(not to be confused with &lt;a href=&quot;../language/constructor&quot;&gt;member initializer list&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="98e7c39e94349de99d7e2268ab85db022966798b" translate="yes" xml:space="preserve">
          <source>(not used)</source>
          <target state="translated">(not used)</target>
        </trans-unit>
        <trans-unit id="87ea95ee84fb80ea84f804b51da0936a17af7280" translate="yes" xml:space="preserve">
          <source>(note &lt;code&gt;__ForwardingRange&lt;/code&gt; is the exposition-only concept defined in &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">(note &lt;code&gt;__ForwardingRange&lt;/code&gt; is the exposition-only concept defined in &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="c3fa5277db78176028726aa8efe3cef83cc2340b" translate="yes" xml:space="preserve">
          <source>(note that the destructors of std::futures obtained by means other than a call to std::async never block).</source>
          <target state="translated">(note that the destructors of std::futures obtained by means other than a call to std::async never block).</target>
        </trans-unit>
        <trans-unit id="21af0693d87d0416faa1e993077eb18244924389" translate="yes" xml:space="preserve">
          <source>(note: &quot;&lt;code&gt;const decltype(auto)&amp;amp;&lt;/code&gt;&quot; is an error, &lt;code&gt;decltype(auto)&lt;/code&gt; must be used on its own).</source>
          <target state="translated">(note: &quot;&lt;code&gt;const decltype(auto)&amp;amp;&lt;/code&gt;&quot; is an error, &lt;code&gt;decltype(auto)&lt;/code&gt; must be used on its own).</target>
        </trans-unit>
        <trans-unit id="435d597faa57876f34d827119dbbedf903240d9e" translate="yes" xml:space="preserve">
          <source>(only for array types with known bound)</source>
          <target state="translated">(only for array types with known bound)</target>
        </trans-unit>
        <trans-unit id="9eee630852273a3d40bdd184f0e531c2bd6d0069" translate="yes" xml:space="preserve">
          <source>(only for array types with unknown bound)</source>
          <target state="translated">(only for array types with unknown bound)</target>
        </trans-unit>
        <trans-unit id="8a83d20cdc290c461ffe24d3b062ac9576634f5d" translate="yes" xml:space="preserve">
          <source>(only for non-array types)</source>
          <target state="translated">(only for non-array types)</target>
        </trans-unit>
        <trans-unit id="a1231633158149144709e5ab9b8cbdbe546a33ff" translate="yes" xml:space="preserve">
          <source>(only for std::vector) If the iterators are not &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt;, T must be &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt;.</source>
          <target state="translated">(only for std::vector) If the iterators are not &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt;, T must be &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="adc867f62c0098f2da1265fc9eac295cdb84a6d5" translate="yes" xml:space="preserve">
          <source>(only for std::vector) If the iterators are not &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt;, T must be &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt; and &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</source>
          <target state="translated">(only for std::vector) If the iterators are not &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterators&lt;/a&gt;, T must be &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt; and &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c43c9a30c317027b454645ce0db32010d30357cd" translate="yes" xml:space="preserve">
          <source>(only if no captures are specified)</source>
          <target state="translated">(only if no captures are specified)</target>
        </trans-unit>
        <trans-unit id="7ea8102505c98e0ff02db3fd8475ad8395272ba2" translate="yes" xml:space="preserve">
          <source>(optional member of user-defined specialization)</source>
          <target state="translated">(optional member of user-defined specialization)</target>
        </trans-unit>
        <trans-unit id="b16c7ac6faff07d7e255da685e52bd66d3bf1575" translate="yes" xml:space="preserve">
          <source>(optional)</source>
          <target state="translated">(optional)</target>
        </trans-unit>
        <trans-unit id="deb1825933fe3c9bf66d3dfb59330dd59f24957d" translate="yes" xml:space="preserve">
          <source>(optional) assignment-suppressing character &lt;code&gt;*&lt;/code&gt;. If this option is present, the function does not assign the result of the conversion to any receiving argument.</source>
          <target state="translated">(optional) assignment-suppressing character &lt;code&gt;*&lt;/code&gt;. If this option is present, the function does not assign the result of the conversion to any receiving argument.</target>
        </trans-unit>
        <trans-unit id="87c3fc6b1ace0350438c728ae7dad2fd114adeb1" translate="yes" xml:space="preserve">
          <source>(optional) integer number (greater than zero) that specifies</source>
          <target state="translated">(optional) integer number (greater than zero) that specifies</target>
        </trans-unit>
        <trans-unit id="e0f6d81c2c3b1516e07c96f573ffe432220feae7" translate="yes" xml:space="preserve">
          <source>(optional) integer value or &lt;code&gt;*&lt;/code&gt; that specifies minimum field width. The result is padded with</source>
          <target state="translated">(optional) integer value or &lt;code&gt;*&lt;/code&gt; that specifies minimum field width. The result is padded with</target>
        </trans-unit>
        <trans-unit id="1df32ec6c02c37e8aad95b2c28acdb57c3cbd370" translate="yes" xml:space="preserve">
          <source>(optional) one or more flags that modify the behavior of the conversion:</source>
          <target state="translated">(optional) one or more flags that modify the behavior of the conversion:</target>
        </trans-unit>
        <trans-unit id="1f62635b50cfad604832a862363b696dfc559781" translate="yes" xml:space="preserve">
          <source>(optional) plus or minus sign</source>
          <target state="translated">(optional) plus or minus sign</target>
        </trans-unit>
        <trans-unit id="6753603453b7e70457c252ee87431112718d0fe3" translate="yes" xml:space="preserve">
          <source>(optional) prefix (&lt;code&gt;0&lt;/code&gt;) indicating octal base (applies only when the base is &lt;code&gt;8&lt;/code&gt; or &lt;code&gt;​0​&lt;/code&gt;)</source>
          <target state="translated">(optional) prefix (&lt;code&gt;0&lt;/code&gt;) indicating octal base (applies only when the base is &lt;code&gt;8&lt;/code&gt; or &lt;code&gt;​0​&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="38a0344380df2361cbf6a9087734211fbab33629" translate="yes" xml:space="preserve">
          <source>(optional) prefix (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;) indicating hexadecimal base (applies only when the base is &lt;code&gt;16&lt;/code&gt; or &lt;code&gt;​0​&lt;/code&gt;)</source>
          <target state="translated">(optional) prefix (&lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;) indicating hexadecimal base (applies only when the base is &lt;code&gt;16&lt;/code&gt; or &lt;code&gt;​0​&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="329760e773c6af94aa67c37c019abf1407c04a37" translate="yes" xml:space="preserve">
          <source>(optional)&lt;code&gt;.&lt;/code&gt; followed by integer number or &lt;code&gt;*&lt;/code&gt;, or neither that specifies</source>
          <target state="translated">(optional)&lt;code&gt;.&lt;/code&gt; followed by integer number or &lt;code&gt;*&lt;/code&gt;, or neither that specifies</target>
        </trans-unit>
        <trans-unit id="e6dd0268ccf821e4b1344a05da773ab9781732f2" translate="yes" xml:space="preserve">
          <source>(optional)&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt; followed with optional minus or plus sign and nonempty sequence of decimal digits (defines exponent)</source>
          <target state="translated">(optional)&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt; followed with optional minus or plus sign and nonempty sequence of decimal digits (defines exponent)</target>
        </trans-unit>
        <trans-unit id="94025850ea5a02c849e26f51c369ad4ae1907a4f" translate="yes" xml:space="preserve">
          <source>(optional)&lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; followed with optional minus or plus sign and nonempty sequence of decimal digits (defines exponent)</source>
          <target state="translated">(optional)&lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; followed with optional minus or plus sign and nonempty sequence of decimal digits (defines exponent)</target>
        </trans-unit>
        <trans-unit id="a510c9ad13da6e915e71101b3523dfcf5403002e" translate="yes" xml:space="preserve">
          <source>(optionally) an exception is thrown when initializing the contained value during a type-changing &lt;a href=&quot;emplace&quot;&gt;emplace&lt;/a&gt;</source>
          <target state="translated">(optionally) an exception is thrown when initializing the contained value during a type-changing &lt;a href=&quot;emplace&quot;&gt;emplace&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="27810813e49dd5999089c64a747bcf256e8356f7" translate="yes" xml:space="preserve">
          <source>(optionally) an exception is thrown when initializing the contained value during a type-changing &lt;a href=&quot;operator=&quot;&gt;assignment&lt;/a&gt;</source>
          <target state="translated">(optionally) an exception is thrown when initializing the contained value during a type-changing &lt;a href=&quot;operator=&quot;&gt;assignment&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0388614f562d00fcbb8ba2bdc91330aaf695ff4c" translate="yes" xml:space="preserve">
          <source>(or, if it's a template,</source>
          <target state="translated">(or, if it's a template,</target>
        </trans-unit>
        <trans-unit id="2a365590765a70187553a8a255d5220d72cd8ad6" translate="yes" xml:space="preserve">
          <source>(otherwise)</source>
          <target state="translated">(otherwise)</target>
        </trans-unit>
        <trans-unit id="f054e4763a40ad0d6683b98ed941540510927597" translate="yes" xml:space="preserve">
          <source>(positive and negative), see &lt;code&gt;&lt;a href=&quot;../numeric/math/infinity&quot;&gt;INFINITY&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">(positive and negative), see &lt;code&gt;&lt;a href=&quot;../numeric/math/infinity&quot;&gt;INFINITY&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b1d3698459345ff4fa76e7e4d4193b72278d212" translate="yes" xml:space="preserve">
          <source>(precedes) &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">(precedes) &lt;code&gt;rhs&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="ea577fb8ab941fa4c8ee54d6d0304c04fd97e2f3" translate="yes" xml:space="preserve">
          <source>(private member function)</source>
          <target state="translated">(private member function)</target>
        </trans-unit>
        <trans-unit id="beb3f05113bd4cf8bdad8f993ecf44b7ff4f576c" translate="yes" xml:space="preserve">
          <source>(protected member function)</source>
          <target state="translated">(protected member function)</target>
        </trans-unit>
        <trans-unit id="4feabf4204d348f076c3e85dfa1083557d5e09a5" translate="yes" xml:space="preserve">
          <source>(protected member object)</source>
          <target state="translated">(protected member object)</target>
        </trans-unit>
        <trans-unit id="ce1989163fd6763eab0e98336de078e09be737ab" translate="yes" xml:space="preserve">
          <source>(provided by the decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration syntax&lt;/a&gt;) and the function declarator.</source>
          <target state="translated">(provided by the decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration syntax&lt;/a&gt;) and the function declarator.</target>
        </trans-unit>
        <trans-unit id="62d62242636e37f9222ae8775fd68ef0d989cdb3" translate="yes" xml:space="preserve">
          <source>(provided only if the implementation directly supports the type)</source>
          <target state="translated">(provided only if the implementation directly supports the type)</target>
        </trans-unit>
        <trans-unit id="fb46168fee6beb816a30e314f65dd966ff6bd147" translate="yes" xml:space="preserve">
          <source>(public member class of &lt;code&gt;std::basic_istream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member class of &lt;code&gt;std::basic_istream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="be75ee3875c793528454b412af733701673b3cef" translate="yes" xml:space="preserve">
          <source>(public member class of &lt;code&gt;std::basic_ostream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member class of &lt;code&gt;std::basic_ostream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="558c7002cfe33c54bb0cd800210133a475241f2c" translate="yes" xml:space="preserve">
          <source>(public member class of &lt;code&gt;std::ios_base&lt;/code&gt;)</source>
          <target state="translated">(public member class of &lt;code&gt;std::ios_base&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="737d7b8351a3153b706554e393d587fade15bb9d" translate="yes" xml:space="preserve">
          <source>(public member class)</source>
          <target state="translated">(public member class)</target>
        </trans-unit>
        <trans-unit id="4abe80b81a2dde21a649b6086d5f80d8b1f9b382" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;&lt;i&gt;node handle&lt;/i&gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;&lt;i&gt;node handle&lt;/i&gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="496fdaf6377f89853488c1c48e186c6e24bcaa61" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::allocator&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::allocator&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5097d62a4cd1c2ac70868ad9474e2cf5db594128" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::array&amp;lt;T,N&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::array&amp;lt;T,N&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="230936881cf513e88ab03a8fe9e5ad38c8a0fbc3" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::atomic&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::atomic&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b12c96d5922cf85748294eca18d111709ec7f586" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::auto_ptr&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::auto_ptr&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5ef3a8afa9f1de685bebf11a808dee0e33450b7a" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::back_insert_iterator&amp;lt;Container&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::back_insert_iterator&amp;lt;Container&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="96179c871d0695824033a63d02748e7ce69ed4e5" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_filebuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_filebuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b23588ac95a48d4d50461e9b9152a5dc796e3147" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_fstream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_fstream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="3bde223f03d117088d02d32d60a553ee8cf8d8b5" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_ios&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_ios&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="cc92c9c2586f46cd4a1e9fe767e2c20ae23e1010" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_iostream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_iostream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="25c5939f53346750d331a232ebd661dbf82d88ad" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_istream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_istream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="97148a430ccdea10e8001a3b45d277893bd66a2e" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_ostream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_ostream&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7bfa5f0d7f161ffb78ef30ac20c01d9967d7360e" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_osyncstream&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_osyncstream&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7a4e2d412c9d460ce70f4d711c977f7c47d2ba7c" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_streambuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_streambuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="f01406b730952fc2672b390d970deb90c3becb28" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_string&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_string&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="969fa58b935602a3c98aec8b0202536d5e4294f0" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_string_view&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_string_view&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="6026ac246d617637581e9799b1fcbd0d05fd9be7" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_stringbuf&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_stringbuf&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5e8542b3de717ec52f996943c77d9fd36d5e0278" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_stringstream&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_stringstream&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="c6058370349fc807e411852a0ae94dd2aaf2fcce" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::basic_syncbuf&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::basic_syncbuf&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="d111df480046eb2a8e05922c615ed9f87c90f7b1" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::binary_negate&amp;lt;Predicate&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::binary_negate&amp;lt;Predicate&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="56516197c340fa3b4673786caf4e17d339ef2295" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::bit_and&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::bit_and&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="41286283d8098b303da33418869722b652aab5f3" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::bit_or&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::bit_or&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="10eca1747ae4a7b3af1d697d1ebf21cac484379b" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::bit_xor&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::bit_xor&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b5264fe6f611bbb2d8b7e3157179cd9db34e9fe2" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::bitset&amp;lt;N&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::bitset&amp;lt;N&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7988d55ee9743ffb3c3052e1d00b75506ee740d6" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::day&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::day&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="1e752f2ef0e406f60c56cbe0b47d7aa8e6141d52" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::duration&amp;lt;Rep,Period&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::duration&amp;lt;Rep,Period&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="2b2fb4522c6e9d8291a58fced0782a0c6b7c55d6" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::month&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::month&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="6c8c4d71ac5084be8c574045886608c4d8c262bf" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::tzdb&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::tzdb&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="f4c871be659ffce1f837bcaf45b3dbc778f43728" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::weekday&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::weekday&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="782e473ae537ceea027d31df7cb169ce4008c9b1" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::year&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::year&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0ec2ab1b110ea2f9b9b0e755ef2c940207d5a163" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::chrono::year_month_day&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::chrono::year_month_day&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="3f87d743c9614fa0d42b5f4c72cc07bfc73339c4" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::codecvt&amp;lt;InternT,ExternT,State&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::codecvt&amp;lt;InternT,ExternT,State&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="68067eccd342fa3807a05e847c2bd94159db9df6" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::collate&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::collate&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="25e845dec208925d67496c6494b89387da5213b4" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::condition_variable&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::condition_variable&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="8d6bfbc0c0621e4832f38888e40e16ad7ca77401" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::condition_variable_any&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::condition_variable_any&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="20f9ed56edc72851e219c07df5624b0a20dcda43" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::ctype&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::ctype&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="a14f560bfdab7d2cb6d2ca1acd29a716ff5b246c" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::ctype&amp;lt;char&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::ctype&amp;lt;char&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5f06fb308b2880736eedb6e9b320e910e1cf6e3e" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::default_delete&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::default_delete&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5775805d5fc8b620011cc43f9a9e23f8173c96e6" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::deque&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::deque&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="59466bad019c5d7113198d887024aaaa60f8423b" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::divides&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::divides&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b1a805661ee12ca0b0c4a26f29bc5fa88d00e045" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::equal_to&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::equal_to&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9cdda9b9b3c8db5a2910da2e437ece729bad8ce9" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::filesystem::directory_entry&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::filesystem::directory_entry&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="22886b1e6a82a50ca65f49a9b2676892bc76f0fe" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::filesystem::directory_iterator&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::filesystem::directory_iterator&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="608c465a033138820f69709122ecc9906b6e1283" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::filesystem::path&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::filesystem::path&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="2c6da41dee715ac79931e03efabc5b02904fe75a" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::filesystem::recursive_directory_iterator&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::filesystem::recursive_directory_iterator&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="cf336d59c2980d3cddb611765db414ea700bcfc5" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::forward_list&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::forward_list&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="c578d48e0e4db8dc9a3f4dc6d74769781e3c763b" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::front_insert_iterator&amp;lt;Container&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::front_insert_iterator&amp;lt;Container&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="82d20d5261d7189b31b2ea738916f312c2039cb7" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::function&amp;lt;R(Args...)&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::function&amp;lt;R(Args...)&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9704c1fe51b2330404ab669ea77f3276e38b60d6" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::future&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::future&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="1ba225f582e4997e232c34c05fa632456d9518d4" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::greater&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::greater&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="ad3e39738d108e171bad29179c44020f5c7ff18f" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::greater_equal&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::greater_equal&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b86206f9643b8e371b7ca676e675c2d5a8b1278e" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::insert_iterator&amp;lt;Container&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::insert_iterator&amp;lt;Container&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="29c7ed9a82d9abe590f3f0c43bcbf02b9cd03975" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::ios_base&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::ios_base&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e2a5d80dc142d592946df3964b4bd5a15b0b5f56" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::istream_iterator&amp;lt;T,CharT,Traits,Distance&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::istream_iterator&amp;lt;T,CharT,Traits,Distance&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="cf8492f0bd367b288dccb66974381e112a0490a6" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::istreambuf_iterator&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::istreambuf_iterator&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5e0501b416bc7f39b8290b75cc4eb5f5481a4238" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::istrstream&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::istrstream&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="347d88825ffe8457d2bd65c3c572c2b487370a77" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::less&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::less&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b8ed2fda8467f56ee8a3c0a3fcc69d01eae4d3ed" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::less_equal&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::less_equal&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="bb6e5e46441424e4f9f77558569bc5978931e6bc" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::linear_congruential_engine&amp;lt;UIntType,a,c,m&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::linear_congruential_engine&amp;lt;UIntType,a,c,m&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="715751fed9b22f5f806880be28096ab20c889406" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::list&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::list&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0c97c05c62eb2a339ff80e0f3b1414e902ccf951" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::locale&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::locale&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="808213e3486011946dfe961691a6a608871051fc" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::lock_guard&amp;lt;Mutex&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::lock_guard&amp;lt;Mutex&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="40060ccd6af16853b1668b0a85ba7d7ad08eb928" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::logical_and&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::logical_and&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="5abb6a1caa6fa664b6b00b732db3ad84c33fc199" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::logical_not&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::logical_not&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="1336523d0d9316eff07cc839493d04e8f5f181a0" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::logical_or&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::logical_or&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0e6a089f55390162cfb53dff50779b585a3fecb1" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::map&amp;lt;Key,T,Compare,Allocator&amp;gt;::value_compare&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::map&amp;lt;Key,T,Compare,Allocator&amp;gt;::value_compare&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="624883cb1ef1c80835825fdd4c4b71469b24fa21" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::map&amp;lt;Key,T,Compare,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::map&amp;lt;Key,T,Compare,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="c8f10fb57b6af04faf425f7be1a4c1b70668c592" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::match_results&amp;lt;BidirIt,Alloc&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::match_results&amp;lt;BidirIt,Alloc&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="fd8c81ed031b6eb08e6d6c153942e3d5056f3672" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::messages&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::messages&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9113699b58b4f99e9358fd9063c0b180ae75c50b" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::minus&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::minus&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="bbe7727486c47663f594a77a442b291a712d7981" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::modulus&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::modulus&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="c28ee53820ae566ed8f43396f10786e5bc196fb3" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::moneypunct&amp;lt;CharT,International&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::moneypunct&amp;lt;CharT,International&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="8d19c011fc698031be78f7daa9def804e1ec7eb7" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::move_iterator&amp;lt;Iter&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::move_iterator&amp;lt;Iter&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="27bdbced1c0570b44f036bd1a602257562bbbf12" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;::value_compare&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;::value_compare&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="be4d0a662444daf02840d84ba0d22d0f20cee235" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="202dbc1b35f64e1571a6781f70e2dd12d46ced0f" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::multiplies&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::multiplies&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="46e8729634a4244d6ed9a0a6bd84b3dd5367f553" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::multiset&amp;lt;Key,Compare,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::multiset&amp;lt;Key,Compare,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="d011ef47070f49e69ef8576035377d8465e724f7" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::negate&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::negate&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="83ca84aa829656254fc8c3250bfc0f3784ba6e7c" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::nested_exception&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::nested_exception&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e11a2267bf51b76049111e1188d7932558e5c235" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::not_equal_to&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::not_equal_to&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9ea5790ef248262304c7a77a8310afe740ee3734" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::numpunct&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::numpunct&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="1375ab29b0423834d6fe505b9945ddab6b121e00" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="4ad70893a8d825a16cd4fb87f6a4cd51063bed32" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::ostream_iterator&amp;lt;T,CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::ostream_iterator&amp;lt;T,CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="bdc694300351f6f0fbd6725ed86e8a372ee91822" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::ostreambuf_iterator&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::ostreambuf_iterator&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b47f6607d1f9e1cebf74716f5d742033bac56d5f" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::ostrstream&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::ostrstream&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="2995db98b827b6bf6fb763763ef02d3a66f96142" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::packaged_task&amp;lt;R(Args...)&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::packaged_task&amp;lt;R(Args...)&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="8964755a3b3b85999435cf70445ac382596cc9cd" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::pair&amp;lt;T1,T2&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::pair&amp;lt;T1,T2&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e5ac5256fa22fbda0780e82a1a3d7e4e51bd2191" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::plus&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::plus&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="8b37ccb63084a2753d3724f2681e2ff79a98aaf9" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::pmr::memory_resource&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::pmr::memory_resource&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="6848047b49db5a36e1e8729293bb715003c927e3" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::pmr::polymorphic_allocator&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::pmr::polymorphic_allocator&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7d91afe334a71cea1f184b5f79045f09954e0395" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::priority_queue&amp;lt;T,Container,Compare&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::priority_queue&amp;lt;T,Container,Compare&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e015b427fd475087e3fe6df26ca185188d4eda03" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::promise&amp;lt;R&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::promise&amp;lt;R&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="67623736fcd2d220447006a7980c9856016fc1e8" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::queue&amp;lt;T,Container&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::queue&amp;lt;T,Container&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="97f4ac67ae1c5bca69dc3591fb90ca4ed0364559" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::raw_storage_iterator&amp;lt;OutputIt,T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::raw_storage_iterator&amp;lt;OutputIt,T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9f5d8bf18373c00b3d12067cc9c40c55da0c2b52" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="54473f38b24d53250620bc119a56d2e623e4202a" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::regex_iterator&amp;lt;BidirIt,CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::regex_iterator&amp;lt;BidirIt,CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="ce1e4c9d4ee71a333cbc1309bc5f5bc47a066600" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::regex_token_iterator&amp;lt;BidirIt,CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::regex_token_iterator&amp;lt;BidirIt,CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="148c0c5c843e9227845e1d817b110157112dbe29" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::reverse_iterator&amp;lt;Iter&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::reverse_iterator&amp;lt;Iter&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="18f3bd25edef8e0290a7459f2edbb3600fde23e5" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="db035f3a39a739aaad45a70fcee98a24e63995d9" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::set&amp;lt;Key,Compare,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::set&amp;lt;Key,Compare,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="faa53131cb26bfb1df98f28f75aa782fb1672bda" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::shared_future&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::shared_future&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="d8b5bc1fbc4fdea3bb52df1ca8e717417d501a3f" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="39d55885c6224998b3a4a5e40be8424028189421" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::span&amp;lt;T,Extent&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::span&amp;lt;T,Extent&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0a6e60ad9bea8755d7299275bcb79a8a49986106" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::stack&amp;lt;T,Container&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::stack&amp;lt;T,Container&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7860c948119d3d7a8caef86e9dab245c220a9c31" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::strstream&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::strstream&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="501983e6dd9184964edec9d5a2e989cc2f9874e2" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::strstreambuf&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::strstreambuf&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="33154014e0fd16786d6a0a91bb3f6ed1ba8d4e92" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::sub_match&amp;lt;BidirIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::sub_match&amp;lt;BidirIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9a0765fac441d6fa283da6b1eee830c8785fbe13" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::system_error&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::system_error&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="baa33ba71dc199d87ddef682a74275479d4b2060" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::thread&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::thread&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="6dab44f4cfdfc2b65c060cdc001c0ab2f5cffce5" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::time_get&amp;lt;CharT,InputIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::time_get&amp;lt;CharT,InputIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="238a87151d5587e4dbbf51a157ae4a66b3138351" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::time_put&amp;lt;CharT,OutputIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::time_put&amp;lt;CharT,OutputIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="ffa8aee69743edbc14cd1d293013ed8679d0a4b0" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::type_index&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::type_index&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b69e07e9afea2751fcdd905d53aba6ee07adccaa" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::type_info&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::type_info&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e73f78d10d3702ceedda7fa011a45a2f1597da57" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unary_negate&amp;lt;Predicate&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unary_negate&amp;lt;Predicate&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0f711948734acd5d6e50408aa7e04750f5c8ed58" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::uniform_int_distribution&amp;lt;IntType&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::uniform_int_distribution&amp;lt;IntType&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="ea3498c0490868ce0f39a329b93607d20e0c759c" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unique_lock&amp;lt;Mutex&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unique_lock&amp;lt;Mutex&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7ebe75499fd28fa23d2b4325ee6c00be2f746372" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unique_ptr&amp;lt;T,Deleter&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unique_ptr&amp;lt;T,Deleter&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="20f0069393ddcf4d7aebf3017788a1c0a788f482" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b7334adef1cf17653b6b2e213cbc6d50a0cddca3" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="8ebc21da664e91836f1847e83e3561b3706d8e8a" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="f5d585b745a2499376744d1bbaaa7a0f1d58a6d7" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="16690c3f8833aae081e837ca44d4b1b0f721d5ec" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::valarray&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::valarray&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="020da4ae6c3623b8e327b28a999e088a6e0e5393" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::vector&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::vector&amp;lt;T,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="00ab4fd0484e40a6ac6a49f548ac3779cc930981" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::weak_ptr&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::weak_ptr&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="953d6b90df7964effdf080c9e8e49b3c8cb5d252" translate="yes" xml:space="preserve">
          <source>(public member function of &lt;code&gt;std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public member function of &lt;code&gt;std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="2177a2fe712000ee67e17bbc224fe9e3e43fcb33" translate="yes" xml:space="preserve">
          <source>(public member function)</source>
          <target state="translated">(public member function)</target>
        </trans-unit>
        <trans-unit id="796614b6db3defa8f6626d01fccd06a3767b301e" translate="yes" xml:space="preserve">
          <source>(public member object)</source>
          <target state="translated">(public member object)</target>
        </trans-unit>
        <trans-unit id="4c68139dd6fa6d277be5d099236a30872c6e34c3" translate="yes" xml:space="preserve">
          <source>(public static member constant of &lt;code&gt;std::atomic&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member constant of &lt;code&gt;std::atomic&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e965fe3aca5fc79071b17a50afcbf8e008a4af88" translate="yes" xml:space="preserve">
          <source>(public static member constant of &lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member constant of &lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="742fe63b946ce06a92fe90d83959d7e0ca4206e7" translate="yes" xml:space="preserve">
          <source>(public static member constant)</source>
          <target state="translated">(public static member constant)</target>
        </trans-unit>
        <trans-unit id="6cc92ed6b4629fca0fc2ee5f3400ed588db6483e" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::allocator_traits&amp;lt;Alloc&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::allocator_traits&amp;lt;Alloc&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="68d23ab2d5f9efc7163ec6e2440bb788871587e7" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::chrono::duration&amp;lt;Rep,Period&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::chrono::duration&amp;lt;Rep,Period&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e96c57f0b492a29c69c54bdd0f36e5a5a8e9c101" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::ctype&amp;lt;char&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::ctype&amp;lt;char&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="26ed12ce9db0ed39553e6df899031cf488430e0e" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::ios_base&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::ios_base&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="7bd7ece27141064f5ecd3ceb73d6dd53f7f9142a" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="73561f150d2b684a4311ab2908226743fbd48cff" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::pointer_traits&amp;lt;Ptr&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::pointer_traits&amp;lt;Ptr&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="bce2841ae855d5302691e6b22ed63e647304c2df" translate="yes" xml:space="preserve">
          <source>(public static member function of &lt;code&gt;std::thread&lt;/code&gt;)</source>
          <target state="translated">(public static member function of &lt;code&gt;std::thread&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="dc01cf4ce8f5b04bf5b90e40881c837661b3afc4" translate="yes" xml:space="preserve">
          <source>(public static member function)</source>
          <target state="translated">(public static member function)</target>
        </trans-unit>
        <trans-unit id="0326dbf21c981b784e07e4130d6c72fe729dcbb8" translate="yes" xml:space="preserve">
          <source>(removed in C++14)</source>
          <target state="translated">(removed in C++14)</target>
        </trans-unit>
        <trans-unit id="560c7b483f8c5d91bc618794d97ebcd3e2ac487b" translate="yes" xml:space="preserve">
          <source>(removed in C++17)</source>
          <target state="translated">(removed in C++17)</target>
        </trans-unit>
        <trans-unit id="c34b3fcb6c24b6a14b9057f67e0373544970b018" translate="yes" xml:space="preserve">
          <source>(removed in C++20)</source>
          <target state="translated">(removed in C++20)</target>
        </trans-unit>
        <trans-unit id="1dfec31e4aeacc735ff9781be420b43ae006ee71" translate="yes" xml:space="preserve">
          <source>(requires that &lt;code&gt;Deleter&lt;/code&gt; is nothrow-&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;)</source>
          <target state="translated">(requires that &lt;code&gt;Deleter&lt;/code&gt; is nothrow-&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="8b8aecdb2fbddb267b2b97c7ca409b735da98248" translate="yes" xml:space="preserve">
          <source>(requires that &lt;code&gt;Deleter&lt;/code&gt; is nothrow-&lt;a href=&quot;../../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;)</source>
          <target state="translated">(requires that &lt;code&gt;Deleter&lt;/code&gt; is nothrow-&lt;a href=&quot;../../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="9f7470cf41961acc21be843a3681a7fbe9aa8a95" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; for the list of requirements).</source>
          <target state="translated">(see &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt; for the list of requirements).</target>
        </trans-unit>
        <trans-unit id="f75184f8b68a7effb3c2f351a93ca7d2d6e38352" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;declarations&quot;&gt;Declarations&lt;/a&gt; for the other forms of the declarator syntax).</source>
          <target state="translated">(see &lt;a href=&quot;declarations&quot;&gt;Declarations&lt;/a&gt; for the other forms of the declarator syntax).</target>
        </trans-unit>
        <trans-unit id="03ab73ea487776488651232a80ac4734d31bad14" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::set_new_handler&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_new_handler&quot;&gt;std::get_new_handler&lt;/a&gt;&lt;/code&gt; calls.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::set_new_handler&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_new_handler&quot;&gt;std::get_new_handler&lt;/a&gt;&lt;/code&gt; calls.</target>
        </trans-unit>
        <trans-unit id="55c2672cdb2d4a3ef177835fce2771a8b904744e" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent calls to &lt;code&gt;std::get_new_handler&lt;/code&gt;.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent calls to &lt;code&gt;std::get_new_handler&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="31b6f59e19dec21385c6b42cea54427bd42b436c" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent calls to &lt;code&gt;std::set_unexpected&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_unexpected&quot;&gt;std::get_unexpected&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent calls to &lt;code&gt;std::set_unexpected&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_unexpected&quot;&gt;std::get_unexpected&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c334d3b46737c10b4c3cf9f4c360bcc4af8912c4" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent calls to this function.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent calls to this function.</target>
        </trans-unit>
        <trans-unit id="c7d928ddb163c4e56e3c636a5e65eb5231a5df32" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::pmr::get_default_resource&lt;/code&gt; calls.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::pmr::get_default_resource&lt;/code&gt; calls.</target>
        </trans-unit>
        <trans-unit id="adcdc1fdd0ecf90161e4ea8d2b4a5d12098827a8" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::pmr::set_default_resource&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_default_resource&quot;&gt;std::pmr::get_default_resource&lt;/a&gt;&lt;/code&gt; calls.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::pmr::set_default_resource&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_default_resource&quot;&gt;std::pmr::get_default_resource&lt;/a&gt;&lt;/code&gt; calls.</target>
        </trans-unit>
        <trans-unit id="972244e3e58af67d2e57401e220b0eec008bfd78" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::set_terminate&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_terminate&quot;&gt;std::get_terminate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) the subsequent &lt;code&gt;std::set_terminate&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_terminate&quot;&gt;std::get_terminate&lt;/a&gt;&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c897ad877073bc6063d7244e418adcab770bdf96" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this function.</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;) this function.</target>
        </trans-unit>
        <trans-unit id="9b085807e184215178322eb302faa3e47a314086" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;) can be converted to any pointer-to-member type, and the result is the null member pointer value of that type. Such conversion (known as</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;) can be converted to any pointer-to-member type, and the result is the null member pointer value of that type. Such conversion (known as</target>
        </trans-unit>
        <trans-unit id="7f3973bf80f2cd07a8940c403951016e7f60f601" translate="yes" xml:space="preserve">
          <source>(see &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;), can be converted to any pointer type, and the result is the null pointer value of that type. Such conversion (known as</source>
          <target state="translated">(see &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;), can be converted to any pointer type, and the result is the null pointer value of that type. Such conversion (known as</target>
        </trans-unit>
        <trans-unit id="0d7bfa50acc04de2c67d58a28ad230abe7b62fe7" translate="yes" xml:space="preserve">
          <source>(see below and &lt;a href=&quot;value_initialization&quot;&gt;value initialization&lt;/a&gt;).</source>
          <target state="translated">(see below and &lt;a href=&quot;value_initialization&quot;&gt;value initialization&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="23647afe2bb9c7adcad49b87ea47bff7f82ddae9" translate="yes" xml:space="preserve">
          <source>(see below)</source>
          <target state="translated">(see below)</target>
        </trans-unit>
        <trans-unit id="4f70b81540477101bc31a81a369d62830dccbb27" translate="yes" xml:space="preserve">
          <source>(see below) is required to appear in the entire program (including any standard and user-defined libraries). The compiler is not required to diagnose this violation, but the behavior of the program that violates it is undefined.</source>
          <target state="translated">(see below) is required to appear in the entire program (including any standard and user-defined libraries). The compiler is not required to diagnose this violation, but the behavior of the program that violates it is undefined.</target>
        </trans-unit>
        <trans-unit id="d55bcbae0d9eedb8abddb17abab718a9163fc72b" translate="yes" xml:space="preserve">
          <source>(see below).</source>
          <target state="translated">(see below).</target>
        </trans-unit>
        <trans-unit id="91e81d42cfa088ebf01a091af06ab1a81d1c5586" translate="yes" xml:space="preserve">
          <source>(see discussion below). That default can hurt performance, but the library's atomic operations can be given an additional &lt;code&gt;std::memory_order&lt;/code&gt; argument to specify the exact constraints, beyond atomicity, that the compiler and processor must enforce for that operation.</source>
          <target state="translated">(see discussion below). That default can hurt performance, but the library's atomic operations can be given an additional &lt;code&gt;std::memory_order&lt;/code&gt; argument to specify the exact constraints, beyond atomicity, that the compiler and processor must enforce for that operation.</target>
        </trans-unit>
        <trans-unit id="ce57764089b46cd1ff016a43e449f082db9a62c4" translate="yes" xml:space="preserve">
          <source>(since C++03)</source>
          <target state="translated">(since C++03)</target>
        </trans-unit>
        <trans-unit id="2548c85ea6f08731c74732f1003d4a55a0e8c30e" translate="yes" xml:space="preserve">
          <source>(since C++11)</source>
          <target state="translated">(since C++11)</target>
        </trans-unit>
        <trans-unit id="3513edde70eec848f64ff59c4f06907f7102c166" translate="yes" xml:space="preserve">
          <source>(since C++11) Linear for &lt;code&gt;&lt;a href=&quot;../container/array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">(since C++11) Linear for &lt;code&gt;&lt;a href=&quot;../container/array&quot;&gt;std::array&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0866b74b86b469b1025c40d4608d90572067e28" translate="yes" xml:space="preserve">
          <source>(since C++11) as its right operand, and returns an lvalue identifying the left operand after modification.</source>
          <target state="translated">(since C++11) as its right operand, and returns an lvalue identifying the left operand after modification.</target>
        </trans-unit>
        <trans-unit id="0f7f7a6603f59c87c505a1a4accad5244d33b375" translate="yes" xml:space="preserve">
          <source>(since C++11) if any of the following is true:</source>
          <target state="translated">(since C++11) if any of the following is true:</target>
        </trans-unit>
        <trans-unit id="663843bc5dd790ea83d83748893fe36d21cb25bf" translate="yes" xml:space="preserve">
          <source>(since C++11)(until C++17)</source>
          <target state="translated">(since C++11)(until C++17)</target>
        </trans-unit>
        <trans-unit id="c36bb7393f77acb486dad6eaacc7b9ad0f1b7050" translate="yes" xml:space="preserve">
          <source>(since C++11)) is exactly the same as the behavior of the expression &lt;code&gt;E1 = E1 op E2&lt;/code&gt;, except that the expression &lt;code&gt;E1&lt;/code&gt; is evaluated only once and that it behaves as a single operation with respect to indeterminately-sequenced function calls (e.g. in &lt;code&gt;f(a += b, g())&lt;/code&gt;, the += is either not started at all or is completed as seen from inside &lt;code&gt;g()&lt;/code&gt;).</source>
          <target state="translated">(since C++11)) is exactly the same as the behavior of the expression &lt;code&gt;E1 = E1 op E2&lt;/code&gt;, except that the expression &lt;code&gt;E1&lt;/code&gt; is evaluated only once and that it behaves as a single operation with respect to indeterminately-sequenced function calls (e.g. in &lt;code&gt;f(a += b, g())&lt;/code&gt;, the += is either not started at all or is completed as seen from inside &lt;code&gt;g()&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="60bdb6c8acf11074e634b0a1b021fa3bc97fb22a" translate="yes" xml:space="preserve">
          <source>(since C++11)Additional overloads are provided for &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;, and all integer types, which are treated as complex numbers with zero imaginary component.</source>
          <target state="translated">(since C++11)Additional overloads are provided for &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;, and all integer types, which are treated as complex numbers with zero imaginary component.</target>
        </trans-unit>
        <trans-unit id="77e11e286cc4c65264ab7ebb61e488b7bd5e3955" translate="yes" xml:space="preserve">
          <source>(since C++14)</source>
          <target state="translated">(since C++14)</target>
        </trans-unit>
        <trans-unit id="af18fa81669ab6b294a938101047373a055dd686" translate="yes" xml:space="preserve">
          <source>(since C++14) in the return type of a &lt;a href=&quot;function&quot;&gt;function&lt;/a&gt; or lambda expression: &lt;code&gt;auto&amp;amp; f();&lt;/code&gt;. The return type is deduced from the operand of its non-&lt;a href=&quot;if#Constexpr_If&quot;&gt;discarded&lt;/a&gt;(since C++17)&lt;a href=&quot;return&quot;&gt;return statement&lt;/a&gt;.</source>
          <target state="translated">(since C++14) in the return type of a &lt;a href=&quot;function&quot;&gt;function&lt;/a&gt; or lambda expression: &lt;code&gt;auto&amp;amp; f();&lt;/code&gt;. The return type is deduced from the operand of its non-&lt;a href=&quot;if#Constexpr_If&quot;&gt;discarded&lt;/a&gt;(since C++17)&lt;a href=&quot;return&quot;&gt;return statement&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a0f6f89f2f28bfb51957e7da2841290ae7179deb" translate="yes" xml:space="preserve">
          <source>(since C++14) modification of an object, unless the object has non-volatile literal type and its lifetime began within the evaluation of the expression.</source>
          <target state="translated">(since C++14) modification of an object, unless the object has non-volatile literal type and its lifetime began within the evaluation of the expression.</target>
        </trans-unit>
        <trans-unit id="a581a923e0fb1fdde6cda3002da97e9c9f277866" translate="yes" xml:space="preserve">
          <source>(since C++14)&lt;a href=&quot;variable_template&quot;&gt;variable template&lt;/a&gt;</source>
          <target state="translated">(since C++14)&lt;a href=&quot;variable_template&quot;&gt;variable template&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="943bcc92bf8c2322451de1a2b246a7c650f55ecd" translate="yes" xml:space="preserve">
          <source>(since C++17)</source>
          <target state="translated">(since C++17)</target>
        </trans-unit>
        <trans-unit id="38bdc18cc6e0eaad8ab262d1b4d5b4bbba8d8ebf" translate="yes" xml:space="preserve">
          <source>(since C++17) has the following properties:</source>
          <target state="translated">(since C++17) has the following properties:</target>
        </trans-unit>
        <trans-unit id="97250601677be9093b8d39981ba4721d9e019ba5" translate="yes" xml:space="preserve">
          <source>(since C++17) in the parameter declaration of a &lt;a href=&quot;template_parameters#Non-type_template_parameter&quot;&gt;non-type template parameter&lt;/a&gt;: &lt;code&gt;template&amp;lt;auto I&amp;gt; struct A;&lt;/code&gt;. Its type is deduced from the corresponding argument.</source>
          <target state="translated">(since C++17) in the parameter declaration of a &lt;a href=&quot;template_parameters#Non-type_template_parameter&quot;&gt;non-type template parameter&lt;/a&gt;: &lt;code&gt;template&amp;lt;auto I&amp;gt; struct A;&lt;/code&gt;. Its type is deduced from the corresponding argument.</target>
        </trans-unit>
        <trans-unit id="c25725a3cc68d9eb0a46e58d1b0309256145aee1" translate="yes" xml:space="preserve">
          <source>(since C++17)(until C++20) an assignment expression or invocation of an overloaded assignment operator that would change the active member of a union</source>
          <target state="translated">(since C++17)(until C++20) an assignment expression or invocation of an overloaded assignment operator that would change the active member of a union</target>
        </trans-unit>
        <trans-unit id="b9b270d3d8636cfe4d5b8d3b281f78737f5d6a49" translate="yes" xml:space="preserve">
          <source>(since C++17)&lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">(since C++17)&lt;code&gt;T*&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1e13ad292818217edfb14e59f93a3a36ba96cce3" translate="yes" xml:space="preserve">
          <source>(since C++20)</source>
          <target state="translated">(since C++20)</target>
        </trans-unit>
        <trans-unit id="6cc4a5a6e5aaba9ef0fb9edb9145a922db9345e1" translate="yes" xml:space="preserve">
          <source>(since C++20) a &lt;a href=&quot;attributes/contract&quot;&gt;checked contract&lt;/a&gt; whose predicate evaluates to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">(since C++20) a &lt;a href=&quot;attributes/contract&quot;&gt;checked contract&lt;/a&gt; whose predicate evaluates to &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b3fec7b6d29fd9e04c44c23221e0207b87effe7" translate="yes" xml:space="preserve">
          <source>(since C++20) a &lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt; expression that would throw an exception</source>
          <target state="translated">(since C++20) a &lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt; expression that would throw an exception</target>
        </trans-unit>
        <trans-unit id="1e59038008455e0de2bd16cff6cf669d55feafc0" translate="yes" xml:space="preserve">
          <source>(since C++20) a &lt;a href=&quot;function#Parameter_list&quot;&gt;function parameter declaration&lt;/a&gt;: &lt;code&gt;void f(auto);&lt;/code&gt;. The function declaration introduces an &lt;a href=&quot;function_template#Abbreviated_function_template&quot;&gt;abbreviated function template&lt;/a&gt;.</source>
          <target state="translated">(since C++20) a &lt;a href=&quot;function#Parameter_list&quot;&gt;function parameter declaration&lt;/a&gt;: &lt;code&gt;void f(auto);&lt;/code&gt;. The function declaration introduces an &lt;a href=&quot;function_template#Abbreviated_function_template&quot;&gt;abbreviated function template&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="04a0bd4ce870ab1a06db6803aead16aebbb6c71e" translate="yes" xml:space="preserve">
          <source>(since C++20) a &lt;a href=&quot;operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; when the result is unspecified</source>
          <target state="translated">(since C++20) a &lt;a href=&quot;operator_comparison#Three-way_comparison&quot;&gt;three-way comparison&lt;/a&gt; when the result is unspecified</target>
        </trans-unit>
        <trans-unit id="4f6cddc1db2badce7e93adde1e2caed678734331" translate="yes" xml:space="preserve">
          <source>(since C++20)(only if no captures are specified)</source>
          <target state="translated">(since C++20)(only if no captures are specified)</target>
        </trans-unit>
        <trans-unit id="6891bed26da97134f76780399ac9476603236e7b" translate="yes" xml:space="preserve">
          <source>(space)</source>
          <target state="translated">(space)</target>
        </trans-unit>
        <trans-unit id="172dc1c96e38885ca57e5198008b03b4fe96b8de" translate="yes" xml:space="preserve">
          <source>(std::deque, std::vector)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;</source>
          <target state="translated">(std::deque, std::vector)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="173dd76835b15e22ff303a5c8f6e3be9ea371df1" translate="yes" xml:space="preserve">
          <source>(std::vector only)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt; into &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">(std::vector only)&lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt; into &lt;code&gt;X&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="ff0cb503cdd92da10e68d03e5ee24924b116fc66" translate="yes" xml:space="preserve">
          <source>(std::vector) If not &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt;.</source>
          <target state="translated">(std::vector) If not &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6f4d2a86f4c0ce3992eda24b7569c5cdfc27a172" translate="yes" xml:space="preserve">
          <source>(struct)</source>
          <target state="translated">(struct)</target>
        </trans-unit>
        <trans-unit id="160e30b584ccaf14c9ee2167b3a531b4f11d52ff" translate="yes" xml:space="preserve">
          <source>(that is, a duration with an integer tick count cannot be constructed from a floating-point value, but a duration with a floating-point tick count can be constructed from an integer value)</source>
          <target state="translated">(that is, a duration with an integer tick count cannot be constructed from a floating-point value, but a duration with a floating-point tick count can be constructed from an integer value)</target>
        </trans-unit>
        <trans-unit id="aa8ec50a603626675a4ca8ea7c07e8af4c6568cc" translate="yes" xml:space="preserve">
          <source>(that is, a possibly empty brace-enclosed list of expressions or nested braced-init-lists)</source>
          <target state="translated">(that is, a possibly empty brace-enclosed list of expressions or nested braced-init-lists)</target>
        </trans-unit>
        <trans-unit id="32285a4001c4d3f04bc519c3b1e0cc2aeebf4b69" translate="yes" xml:space="preserve">
          <source>(that is, either the duration uses floating-point ticks, or &lt;code&gt;Period2&lt;/code&gt; is exactly divisible by period)</source>
          <target state="translated">(that is, either the duration uses floating-point ticks, or &lt;code&gt;Period2&lt;/code&gt; is exactly divisible by period)</target>
        </trans-unit>
        <trans-unit id="90947db8e025c28e002b1c891c9e730af8735959" translate="yes" xml:space="preserve">
          <source>(that is, the lower 32 bits are copied)</source>
          <target state="translated">(that is, the lower 32 bits are copied)</target>
        </trans-unit>
        <trans-unit id="166135655634f0e806daabe47e9b5efe5ac378f1" translate="yes" xml:space="preserve">
          <source>(the &lt;code&gt;template&lt;/code&gt; disambiguator for &lt;a href=&quot;dependent_name&quot;&gt;dependent names&lt;/a&gt; is not permitted).</source>
          <target state="translated">(the &lt;code&gt;template&lt;/code&gt; disambiguator for &lt;a href=&quot;dependent_name&quot;&gt;dependent names&lt;/a&gt; is not permitted).</target>
        </trans-unit>
        <trans-unit id="d74a860cd2ae5a674248d10761c95037cfcb15e7" translate="yes" xml:space="preserve">
          <source>(the behavior of the expression &lt;code&gt;++r&lt;/code&gt; is defined)</source>
          <target state="translated">(the behavior of the expression &lt;code&gt;++r&lt;/code&gt; is defined)</target>
        </trans-unit>
        <trans-unit id="31d6c80edafcb20457b15bb5af46bfc600ac525a" translate="yes" xml:space="preserve">
          <source>(the code for it is actually compiled), unless the template was already explicitly specialized or explicitly instantiated. Instantiation of a class template doesn't instantiate any of its member functions unless they are also used. At link time, identical instantiations generated by different translation units are merged.</source>
          <target state="translated">(the code for it is actually compiled), unless the template was already explicitly specialized or explicitly instantiated. Instantiation of a class template doesn't instantiate any of its member functions unless they are also used. At link time, identical instantiations generated by different translation units are merged.</target>
        </trans-unit>
        <trans-unit id="2d14b87e17fd30219c97da4d7026fa2b84a1633d" translate="yes" xml:space="preserve">
          <source>(the exact criteria depend on the context in which overload resolution takes place, see below).</source>
          <target state="translated">(the exact criteria depend on the context in which overload resolution takes place, see below).</target>
        </trans-unit>
        <trans-unit id="b0afa96fd15e80c41a588f7b3c0a5efac9f748af" translate="yes" xml:space="preserve">
          <source>(the keyword mutable was not used)</source>
          <target state="translated">(the keyword mutable was not used)</target>
        </trans-unit>
        <trans-unit id="3ef8288ff97fd05823e2d7e189d31082e87dbb96" translate="yes" xml:space="preserve">
          <source>(the keyword mutable was used)</source>
          <target state="translated">(the keyword mutable was used)</target>
        </trans-unit>
        <trans-unit id="650bc017034f91f13744471be8fc4809e78781e0" translate="yes" xml:space="preserve">
          <source>(this includes two pointers to non-static members of the same union, pointers to standard-layout struct and to its first member, pointers related by reinterpret_cast, etc)</source>
          <target state="translated">(this includes two pointers to non-static members of the same union, pointers to standard-layout struct and to its first member, pointers related by reinterpret_cast, etc)</target>
        </trans-unit>
        <trans-unit id="49b59d3361d0614b6addf68c845e98559f10b2d3" translate="yes" xml:space="preserve">
          <source>(to satisfy shallow-copy semantics of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;) to an implementation object, which holds:</source>
          <target state="translated">(to satisfy shallow-copy semantics of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;) to an implementation object, which holds:</target>
        </trans-unit>
        <trans-unit id="79fc13844267884559168ec5969f69e8858db0f0" translate="yes" xml:space="preserve">
          <source>(typedef)</source>
          <target state="translated">(typedef)</target>
        </trans-unit>
        <trans-unit id="2efc6176ef283ca22916e7f8a457905144cdaa11" translate="yes" xml:space="preserve">
          <source>(unspecified)</source>
          <target state="translated">(unspecified)</target>
        </trans-unit>
        <trans-unit id="ab26008dfa8950806c6d950654c95255eb14594d" translate="yes" xml:space="preserve">
          <source>(until C++03)</source>
          <target state="translated">(until C++03)</target>
        </trans-unit>
        <trans-unit id="4abe2ade558dafde255b1ded803dfb56c35f482d" translate="yes" xml:space="preserve">
          <source>(until C++11)</source>
          <target state="translated">(until C++11)</target>
        </trans-unit>
        <trans-unit id="5d2c77b4fb1073641b3fb47af750870da1e43d0a" translate="yes" xml:space="preserve">
          <source>(until C++11) Not strictly constant</source>
          <target state="translated">(until C++11) Not strictly constant</target>
        </trans-unit>
        <trans-unit id="8bb728b17a102f08eb44b5d57c2ec7db61a74522" translate="yes" xml:space="preserve">
          <source>(until C++11)(since C++11)</source>
          <target state="translated">(until C++11)(since C++11)</target>
        </trans-unit>
        <trans-unit id="5154629800e93471a290f5dd0ec73bf6aefb4489" translate="yes" xml:space="preserve">
          <source>(until C++14)</source>
          <target state="translated">(until C++14)</target>
        </trans-unit>
        <trans-unit id="04681d20d3edbd173c9b4d01e0125690b05bd9f1" translate="yes" xml:space="preserve">
          <source>(until C++14) an assignment or a compound assignment operator</source>
          <target state="translated">(until C++14) an assignment or a compound assignment operator</target>
        </trans-unit>
        <trans-unit id="56335537765f2975cf85a4701cd678404d523f14" translate="yes" xml:space="preserve">
          <source>(until C++14) an increment or a decrement operator</source>
          <target state="translated">(until C++14) an increment or a decrement operator</target>
        </trans-unit>
        <trans-unit id="fbfe026746675bccebcea25507397d0d6768ceb2" translate="yes" xml:space="preserve">
          <source>(until C++17)</source>
          <target state="translated">(until C++17)</target>
        </trans-unit>
        <trans-unit id="0efdf014651b2757f474acfebfb420dd0890c28c" translate="yes" xml:space="preserve">
          <source>(until C++17) a &lt;a href=&quot;lambda&quot;&gt;lambda expression&lt;/a&gt;</source>
          <target state="translated">(until C++17) a &lt;a href=&quot;lambda&quot;&gt;lambda expression&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e168cb0f24337228226b5edca6804762afb37d4" translate="yes" xml:space="preserve">
          <source>(until C++17)(C++11)</source>
          <target state="translated">(until C++17)(C++11)</target>
        </trans-unit>
        <trans-unit id="e489e3d1f04b069abf630d8415a24a8551a243a4" translate="yes" xml:space="preserve">
          <source>(until C++20)</source>
          <target state="translated">(until C++20)</target>
        </trans-unit>
        <trans-unit id="65cab794640c24fcb2eaa05a2537495b5d0d38a5" translate="yes" xml:space="preserve">
          <source>(until C++20) a &lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt; expression applied to a glvalue of polymorphic type</source>
          <target state="translated">(until C++20) a &lt;a href=&quot;typeid&quot;&gt;&lt;code&gt;typeid&lt;/code&gt;&lt;/a&gt; expression applied to a glvalue of polymorphic type</target>
        </trans-unit>
        <trans-unit id="02557bdeadb4e5a3893f5f049a4c438fab081ccb" translate="yes" xml:space="preserve">
          <source>(until C++20)&lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">(until C++20)&lt;a href=&quot;dynamic_cast&quot;&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6187490eec04638804889268d99a77c27f79ab5c" translate="yes" xml:space="preserve">
          <source>(used to determine the default exception specification of destructors, constructors, and assignment operators as described above):</source>
          <target state="translated">(used to determine the default exception specification of destructors, constructors, and assignment operators as described above):</target>
        </trans-unit>
        <trans-unit id="bf1e573ba89ed616313041c47443af090c4b9307" translate="yes" xml:space="preserve">
          <source>(virtual private member function of &lt;code&gt;std::pmr::memory_resource&lt;/code&gt;)</source>
          <target state="translated">(virtual private member function of &lt;code&gt;std::pmr::memory_resource&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="dc408dfcc45bf0962d01901059edb30e2c61fe0e" translate="yes" xml:space="preserve">
          <source>(virtual private member function)</source>
          <target state="translated">(virtual private member function)</target>
        </trans-unit>
        <trans-unit id="3e13feebc7554456ad6227e02fc159f4b45746be" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::basic_filebuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::basic_filebuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="b5a049728101c909a6b5bd9ebe50127c3de96bc1" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::basic_streambuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::basic_streambuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0dbbb4db8fd99e1c72294f176bc1a8f766a61d23" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::basic_stringbuf&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::basic_stringbuf&amp;lt;CharT,Traits,Allocator&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="af3e5bfaddaec1a26a0a0764de5463ba097b5895" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::codecvt&amp;lt;InternT,ExternT,State&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::codecvt&amp;lt;InternT,ExternT,State&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="afd2ce0b454a149d02eaec90b8316d68b9d30c0c" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::collate&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::collate&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="6c4260306272cad45a8a3051a25effac91a062ce" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::ctype&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::ctype&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0d69ae8f2eea08ab1de4ad127ae2aeedf330c1af" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::messages&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::messages&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="399abf8dd644cc20a6ce5ade66eeb0feb325a944" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::money_get&amp;lt;CharT,InputIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::money_get&amp;lt;CharT,InputIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="80919e7117500e64326e61b6490e5a8b461fa86d" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::money_put&amp;lt;CharT,OutputIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::money_put&amp;lt;CharT,OutputIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="75fadc4f097c051ed19aa025e26207e3f98ac6fd" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::moneypunct&amp;lt;CharT,International&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::moneypunct&amp;lt;CharT,International&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="a249440d8174558044b8f192588aaddfe3bd14e9" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::numpunct&amp;lt;CharT&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::numpunct&amp;lt;CharT&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="c97e9165c073c62f07a86fe322b1166d00481b52" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::strstreambuf&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::strstreambuf&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="2d2768b81f1787cf033e0dd1ccd68389f0319b39" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::time_get&amp;lt;CharT,InputIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::time_get&amp;lt;CharT,InputIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="c25831fd5b5297233a509d67f9dace77568d660b" translate="yes" xml:space="preserve">
          <source>(virtual protected member function of &lt;code&gt;std::time_put&amp;lt;CharT,OutputIt&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual protected member function of &lt;code&gt;std::time_put&amp;lt;CharT,OutputIt&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="f1c5fbc3e79dcabc2020cdbd78871d4147b84fc1" translate="yes" xml:space="preserve">
          <source>(virtual protected member function)</source>
          <target state="translated">(virtual protected member function)</target>
        </trans-unit>
        <trans-unit id="6c703b0667ad01788cc1d23da27740a76eab2165" translate="yes" xml:space="preserve">
          <source>(virtual public member function of &lt;code&gt;std::basic_streambuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">(virtual public member function of &lt;code&gt;std::basic_streambuf&amp;lt;CharT,Traits&amp;gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="29598319900031d8ab0fc1f106b55187565b1742" translate="yes" xml:space="preserve">
          <source>(virtual public member function of &lt;code&gt;std::error_category&lt;/code&gt;)</source>
          <target state="translated">(virtual public member function of &lt;code&gt;std::error_category&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0602d9ed9e0482f2e2be40f988134e912a696455" translate="yes" xml:space="preserve">
          <source>(virtual public member function of &lt;code&gt;std::exception&lt;/code&gt;)</source>
          <target state="translated">(virtual public member function of &lt;code&gt;std::exception&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="0101bb5a66cccfdc1e92e00dab7307548dc1dac4" translate="yes" xml:space="preserve">
          <source>(virtual public member function of &lt;code&gt;std::system_error&lt;/code&gt;)</source>
          <target state="translated">(virtual public member function of &lt;code&gt;std::system_error&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="37bdd3a576fb4e31e0fae667e99deb0714eb3a0c" translate="yes" xml:space="preserve">
          <source>(virtual public member function)</source>
          <target state="translated">(virtual public member function)</target>
        </trans-unit>
        <trans-unit id="429219bcc59a65b5df5e22398c33db7f7299e622" translate="yes" xml:space="preserve">
          <source>(w</source>
          <target state="translated">(w</target>
        </trans-unit>
        <trans-unit id="2536eef1cd1246f4e733ddc925e539cf7674069d" translate="yes" xml:space="preserve">
          <source>(when &lt;code&gt;Types...&lt;/code&gt; expands to &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;UTypes...&lt;/code&gt; expands to &lt;code&gt;U&lt;/code&gt;) &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible_v&lt;/a&gt;&amp;lt;const tuple&amp;lt;U&amp;gt;&amp;amp;, T&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, const tuple&amp;lt;U&amp;gt;&amp;amp;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../../types/is_same&quot;&gt;std::is_same_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; are all &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">(when &lt;code&gt;Types...&lt;/code&gt; expands to &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;UTypes...&lt;/code&gt; expands to &lt;code&gt;U&lt;/code&gt;) &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible_v&lt;/a&gt;&amp;lt;const tuple&amp;lt;U&amp;gt;&amp;amp;, T&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, const tuple&amp;lt;U&amp;gt;&amp;amp;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../../types/is_same&quot;&gt;std::is_same_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; are all &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4813ecc52c42463ad21be8e7ccf7419c7f313a7d" translate="yes" xml:space="preserve">
          <source>(when &lt;code&gt;Types...&lt;/code&gt; expands to &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;UTypes...&lt;/code&gt; expands to &lt;code&gt;U&lt;/code&gt;) &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible_v&lt;/a&gt;&amp;lt;tuple&amp;lt;U&amp;gt;, T&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, tuple&amp;lt;U&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../../types/is_same&quot;&gt;std::is_same_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; are all &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">(when &lt;code&gt;Types...&lt;/code&gt; expands to &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;UTypes...&lt;/code&gt; expands to &lt;code&gt;U&lt;/code&gt;) &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible_v&lt;/a&gt;&amp;lt;tuple&amp;lt;U&amp;gt;, T&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, tuple&amp;lt;U&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../../types/is_same&quot;&gt;std::is_same_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; are all &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="14503860648deecc31d91212a99708bc8162fae0" translate="yes" xml:space="preserve">
          <source>(when initializing lvalue reference or rvalue reference to function) lvalue reference to cv2 &lt;code&gt;T2&lt;/code&gt;</source>
          <target state="translated">(when initializing lvalue reference or rvalue reference to function) lvalue reference to cv2 &lt;code&gt;T2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95da2c06fcc850a2b12845a542f64ece1c3be994" translate="yes" xml:space="preserve">
          <source>(when initializing rvalue reference or lvalue reference to function) cv2 &lt;code&gt;T2&lt;/code&gt; or rvalue reference to cv2 &lt;code&gt;T2&lt;/code&gt;</source>
          <target state="translated">(when initializing rvalue reference or lvalue reference to function) cv2 &lt;code&gt;T2&lt;/code&gt; or rvalue reference to cv2 &lt;code&gt;T2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1fff3a0a58b6dd7d6d40855512638ebf9892e18" translate="yes" xml:space="preserve">
          <source>(when used with a class template, it declared all of its members exported as well). Files that instantiated exported templates did not need to include their definitions: the declaration was sufficient. Implementations of &lt;code&gt;export&lt;/code&gt; were rare and disagreed with each other on details.</source>
          <target state="translated">(when used with a class template, it declared all of its members exported as well). Files that instantiated exported templates did not need to include their definitions: the declaration was sufficient. Implementations of &lt;code&gt;export&lt;/code&gt; were rare and disagreed with each other on details.</target>
        </trans-unit>
        <trans-unit id="089c850ebd03564e29b01b7f13f52be5d87835fa" translate="yes" xml:space="preserve">
          <source>(where &lt;code&gt;T&lt;/code&gt; is the type denoted by &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&amp;lt;It&amp;gt;::value_type&lt;/code&gt;)</source>
          <target state="translated">(where &lt;code&gt;T&lt;/code&gt; is the type denoted by &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&amp;lt;It&amp;gt;::value_type&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="da39f7ef7b6c20e74c20eb17f62f5c86ef20f2bd" translate="yes" xml:space="preserve">
          <source>(where &lt;code&gt;n&lt;/code&gt; is the number of characters extracted from the input and stored in &lt;code&gt;buf1&lt;/code&gt; and &lt;code&gt;buf2&lt;/code&gt; is another sufficiently large character buffer).</source>
          <target state="translated">(where &lt;code&gt;n&lt;/code&gt; is the number of characters extracted from the input and stored in &lt;code&gt;buf1&lt;/code&gt; and &lt;code&gt;buf2&lt;/code&gt; is another sufficiently large character buffer).</target>
        </trans-unit>
        <trans-unit id="c9b42fc8ed10f2a51692f9f0e16efd2a5394ac37" translate="yes" xml:space="preserve">
          <source>(where I</source>
          <target state="translated">(where I</target>
        </trans-unit>
        <trans-unit id="5179c93bb05a48dafc6662bdea44ba2603f90b1d" translate="yes" xml:space="preserve">
          <source>(where J</source>
          <target state="translated">(where J</target>
        </trans-unit>
        <trans-unit id="4347cb3cfcf5a9eedb250df397326daf35f72b15" translate="yes" xml:space="preserve">
          <source>(where N is the number of elements in the pack expansion).</source>
          <target state="translated">(where N is the number of elements in the pack expansion).</target>
        </trans-unit>
        <trans-unit id="bf90d29f81215404327eb9f0cc8b68ce99ddb106" translate="yes" xml:space="preserve">
          <source>(where n=base) integer number representation and converts them to an integer value. The valid integer value consists of the following parts:</source>
          <target state="translated">(where n=base) integer number representation and converts them to an integer value. The valid integer value consists of the following parts:</target>
        </trans-unit>
        <trans-unit id="7e37541dd44682c81f7171ff351e8c0af1da91a5" translate="yes" xml:space="preserve">
          <source>(where n=base) unsigned integer number representation and converts them to an integer value. The valid unsigned integer value consists of the following parts:</source>
          <target state="translated">(where n=base) unsigned integer number representation and converts them to an integer value. The valid unsigned integer value consists of the following parts:</target>
        </trans-unit>
        <trans-unit id="cfcae0c0a4cc074ae8dac97b1e8b11f376b66ba8" translate="yes" xml:space="preserve">
          <source>(whether or not the keyword &lt;code&gt;virtual&lt;/code&gt; is used in its declaration) and</source>
          <target state="translated">(whether or not the keyword &lt;code&gt;virtual&lt;/code&gt; is used in its declaration) and</target>
        </trans-unit>
        <trans-unit id="f635e6c928426e871cbbdfb84b0b80b9f5b4a830" translate="yes" xml:space="preserve">
          <source>(which may be a multibyte character set such as UTF-8, as long as the 96 characters of the</source>
          <target state="translated">(which may be a multibyte character set such as UTF-8, as long as the 96 characters of the</target>
        </trans-unit>
        <trans-unit id="4841d04600590c7f21048113a99a79a73d8e92ea" translate="yes" xml:space="preserve">
          <source>(which, for function names, includes &lt;a href=&quot;adl&quot;&gt;Argument-dependent lookup&lt;/a&gt;)</source>
          <target state="translated">(which, for function names, includes &lt;a href=&quot;adl&quot;&gt;Argument-dependent lookup&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="11b4d70820471e235d81b9b8e6cb00881449d1f6" translate="yes" xml:space="preserve">
          <source>(x+y-1)!</source>
          <target state="translated">(x+y-1)!</target>
        </trans-unit>
        <trans-unit id="29b949cd43684bcad411b79889de94ce4d5c7492" translate="yes" xml:space="preserve">
          <source>(x-1)!(y-1)!</source>
          <target state="translated">(x-1)!(y-1)!</target>
        </trans-unit>
        <trans-unit id="d6ca9663949f18b98262704535a3a8d514c1ed39" translate="yes" xml:space="preserve">
          <source>(x/2)&amp;nu;+2k</source>
          <target state="translated">(x/2)&amp;nu;+2k</target>
        </trans-unit>
        <trans-unit id="381a406cca88b6724b263820b34154a86dfa59af" translate="yes" xml:space="preserve">
          <source>(x2</source>
          <target state="translated">(x2</target>
        </trans-unit>
        <trans-unit id="045757352194fa1e5a7513cdc190d8970f5850e4" translate="yes" xml:space="preserve">
          <source>(xmax &amp;minus; xmin)</source>
          <target state="translated">(xmax &amp;minus; xmin)</target>
        </trans-unit>
        <trans-unit id="e825555299fd7ea5853c13bb71160e5f06578357" translate="yes" xml:space="preserve">
          <source>(xn</source>
          <target state="translated">(xn</target>
        </trans-unit>
        <trans-unit id="e7064f0b80f61dbc65915311032d27baa569ae2a" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>
        </trans-unit>
        <trans-unit id="9b43fc75ffa2875ad5c3474c826211b5ec1a072c" translate="yes" xml:space="preserve">
          <source>)  For any z, asin(z) = acos(-z) -</source>
          <target state="translated">)  For any z, asin(z) = acos(-z) -</target>
        </trans-unit>
        <trans-unit id="4276c449b12076a975a340699186df77099a32e6" translate="yes" xml:space="preserve">
          <source>)  For any z, asinh(z) =</source>
          <target state="translated">)  For any z, asinh(z) =</target>
        </trans-unit>
        <trans-unit id="2e16a8a8ba911a78e3c2011c810d8169be2b6ab4" translate="yes" xml:space="preserve">
          <source>) and (</source>
          <target state="translated">) and (</target>
        </trans-unit>
        <trans-unit id="1d1b10158ef246aed848ed01a04c03f3d41abc6e" translate="yes" xml:space="preserve">
          <source>) and which members are for internal use of the class (the</source>
          <target state="translated">) and which members are for internal use of the class (the</target>
        </trans-unit>
        <trans-unit id="e2ef5703445f5f8bab32aa18b3e086de9ee95283" translate="yes" xml:space="preserve">
          <source>) can be accessed only with &lt;code&gt;__VA_ARGS__&lt;/code&gt; identifier, which is then replaced with arguments, supplied with identifier to be replaced.</source>
          <target state="translated">) can be accessed only with &lt;code&gt;__VA_ARGS__&lt;/code&gt; identifier, which is then replaced with arguments, supplied with identifier to be replaced.</target>
        </trans-unit>
        <trans-unit id="d4838dd22e7993f55424c827539f256aafc92b36" translate="yes" xml:space="preserve">
          <source>) can be accessed using &lt;code&gt;__VA_ARGS__&lt;/code&gt; identifier, which is then replaced with arguments, supplied with the identifier to be replaced.</source>
          <target state="translated">) can be accessed using &lt;code&gt;__VA_ARGS__&lt;/code&gt; identifier, which is then replaced with arguments, supplied with the identifier to be replaced.</target>
        </trans-unit>
        <trans-unit id="cd23bc8c289cfb7c72a51a3952f358b9cde91537" translate="yes" xml:space="preserve">
          <source>) checks the boolean value of the first expression and, depending on the resulting value, evaluates and returns either the second or the third expression.</source>
          <target state="translated">) checks the boolean value of the first expression and, depending on the resulting value, evaluates and returns either the second or the third expression.</target>
        </trans-unit>
        <trans-unit id="38ba43077d785854a785132928b81ed040902d4c" translate="yes" xml:space="preserve">
          <source>) for buffering the input operations and/or</source>
          <target state="translated">) for buffering the input operations and/or</target>
        </trans-unit>
        <trans-unit id="6d82a41262c84216064971ab6f50586524a9aae2" translate="yes" xml:space="preserve">
          <source>) for buffering the output operations.</source>
          <target state="translated">) for buffering the output operations.</target>
        </trans-unit>
        <trans-unit id="381af632661038d250fa49a0a1fc80a618828820" translate="yes" xml:space="preserve">
          <source>) has higher priority than its case or variant. Within an equivalence class, lowercase characters collate before their uppercase equivalents and locale-specific order may apply to the characters with diacritics. In some locales, groups of characters compare as single</source>
          <target state="translated">) has higher priority than its case or variant. Within an equivalence class, lowercase characters collate before their uppercase equivalents and locale-specific order may apply to the characters with diacritics. In some locales, groups of characters compare as single</target>
        </trans-unit>
        <trans-unit id="f5d07414f7cbeca48fcde300fcdc81d46df46e86" translate="yes" xml:space="preserve">
          <source>) in the get area</source>
          <target state="translated">) in the get area</target>
        </trans-unit>
        <trans-unit id="37deb3741ca08dff50b39f0df2512ddbb4ec5c82" translate="yes" xml:space="preserve">
          <source>) in the get area.</source>
          <target state="translated">) in the get area.</target>
        </trans-unit>
        <trans-unit id="7ce71254474e9e6d4720cd7f4fdaff766e6f006b" translate="yes" xml:space="preserve">
          <source>) in the put area.</source>
          <target state="translated">) in the put area.</target>
        </trans-unit>
        <trans-unit id="fd4b7dfa7ce9a47b7d68d604f58f95f4a09adcce" translate="yes" xml:space="preserve">
          <source>) is allowed to convert to a cv-qualified type as a single conversion, that is, it's not considered a combination of numeric and qualifying conversions.</source>
          <target state="translated">) is allowed to convert to a cv-qualified type as a single conversion, that is, it's not considered a combination of numeric and qualifying conversions.</target>
        </trans-unit>
        <trans-unit id="7f24e7dcee79a9b23039cc28ede8f50f172f0aea" translate="yes" xml:space="preserve">
          <source>) is always evaluated, even in an unevaluated operand.</source>
          <target state="translated">) is always evaluated, even in an unevaluated operand.</target>
        </trans-unit>
        <trans-unit id="160394e055761d3579ed3f0f27fd71f7e2e70c07" translate="yes" xml:space="preserve">
          <source>) is implementation-defined, this library provides portable representation of paths.</source>
          <target state="translated">) is implementation-defined, this library provides portable representation of paths.</target>
        </trans-unit>
        <trans-unit id="e0b1cc4d603c473338dcd2684c1e9caff9c233db" translate="yes" xml:space="preserve">
          <source>) is returned.</source>
          <target state="translated">) is returned.</target>
        </trans-unit>
        <trans-unit id="4f9a8c9e517dc4f5af60a3efda74d8deb6d583a5" translate="yes" xml:space="preserve">
          <source>) is the probability that a measurement whose errors are subject to a normal distribution with standard deviation &amp;sigma; is less than x away from the mean value.</source>
          <target state="translated">) is the probability that a measurement whose errors are subject to a normal distribution with standard deviation &amp;sigma; is less than x away from the mean value.</target>
        </trans-unit>
        <trans-unit id="5b51135a2add737344ecb05586782727da2f8e19" translate="yes" xml:space="preserve">
          <source>) logarithm (ln(x))</source>
          <target state="translated">) logarithm (ln(x))</target>
        </trans-unit>
        <trans-unit id="af1aa3ea6cfef390696609a7ad53159e28f9a72a" translate="yes" xml:space="preserve">
          <source>) logarithm (log&lt;sub&gt;10&lt;/sub&gt;(x))</source>
          <target state="translated">) logarithm (log&lt;sub&gt;10&lt;/sub&gt;(x))</target>
        </trans-unit>
        <trans-unit id="561ca0daa1737d7479e576210d7d40aa84e07390" translate="yes" xml:space="preserve">
          <source>) logarithm of &lt;code&gt;arg&lt;/code&gt; (ln(arg) or log</source>
          <target state="translated">) logarithm of &lt;code&gt;arg&lt;/code&gt; (ln(arg) or log</target>
        </trans-unit>
        <trans-unit id="3caeb7b0b56525a5824137176a20888279cb6a65" translate="yes" xml:space="preserve">
          <source>) logarithm of &lt;code&gt;arg&lt;/code&gt; (log</source>
          <target state="translated">) logarithm of &lt;code&gt;arg&lt;/code&gt; (log</target>
        </trans-unit>
        <trans-unit id="f8ffe2623f614106cc901cdc10bdea82d232b402" translate="yes" xml:space="preserve">
          <source>) logarithm of &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">) logarithm of &lt;code&gt;arg&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a3c0e3ea4dcbb6186945405ccca6f1d284752fd3" translate="yes" xml:space="preserve">
          <source>) logarithm of a complex value &lt;code&gt;z&lt;/code&gt; with a branch cut along the negative real axis.</source>
          <target state="translated">) logarithm of a complex value &lt;code&gt;z&lt;/code&gt; with a branch cut along the negative real axis.</target>
        </trans-unit>
        <trans-unit id="7eab759909965f8f76162440bf8298ddfb229872" translate="yes" xml:space="preserve">
          <source>) mod 2w</source>
          <target state="translated">) mod 2w</target>
        </trans-unit>
        <trans-unit id="2c4000694354616311b7566c6f37378171ae6ee6" translate="yes" xml:space="preserve">
          <source>) of 1 plus the given number (ln(1+x))</source>
          <target state="translated">) of 1 plus the given number (ln(1+x))</target>
        </trans-unit>
        <trans-unit id="b6cf5e60cd0bde95931819c3e2506f35ccf54363" translate="yes" xml:space="preserve">
          <source>) the second.</source>
          <target state="translated">) the second.</target>
        </trans-unit>
        <trans-unit id="b7213032843aa96b63f0ffe36ec17fbded168f2f" translate="yes" xml:space="preserve">
          <source>) which represents the object for which they are called and appears before the first of the actual parameters.</source>
          <target state="translated">) which represents the object for which they are called and appears before the first of the actual parameters.</target>
        </trans-unit>
        <trans-unit id="7200c76f8c62e50b3da868cedb6a576723cb06a0" translate="yes" xml:space="preserve">
          <source>) with a</source>
          <target state="translated">) with a</target>
        </trans-unit>
        <trans-unit id="dcc5c1bbbc56b8bb53e5946174e94880574e4119" translate="yes" xml:space="preserve">
          <source>)&amp;Gamma;(1&amp;minus;arg)&amp;zeta;(1&amp;minus;arg)</source>
          <target state="translated">)&amp;Gamma;(1&amp;minus;arg)&amp;zeta;(1&amp;minus;arg)</target>
        </trans-unit>
        <trans-unit id="75092db7eaebcf38a0e145a02fb2e948e7e45927" translate="yes" xml:space="preserve">
          <source>)) in the range [-&amp;pi; , +&amp;pi;] radians, is returned.</source>
          <target state="translated">)) in the range [-&amp;pi; , +&amp;pi;] radians, is returned.</target>
        </trans-unit>
        <trans-unit id="ca8851caaf17274a48e7e1b4701007dea9abdd24" translate="yes" xml:space="preserve">
          <source>), and can only be made ready by one of the regex algorithms. The</source>
          <target state="translated">), and can only be made ready by one of the regex algorithms. The</target>
        </trans-unit>
        <trans-unit id="cef8b57bfe804015b610f712808f2c963f0ee7a9" translate="yes" xml:space="preserve">
          <source>), and has either array or non-union class type. If expression refers to any of the names from identifier-list, the declaration is ill-formed.</source>
          <target state="translated">), and has either array or non-union class type. If expression refers to any of the names from identifier-list, the declaration is ill-formed.</target>
        </trans-unit>
        <trans-unit id="04796de75755a7bcf9046dccc67c139f2901c1a3" translate="yes" xml:space="preserve">
          <source>), and notifies the &lt;code&gt;condition_variable&lt;/code&gt;.</source>
          <target state="translated">), and notifies the &lt;code&gt;condition_variable&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b2a62dc7cea8d4e84b5ddb6e1652611e8ab1dc44" translate="yes" xml:space="preserve">
          <source>), and |x+iy| = &amp;radic;x2</source>
          <target state="translated">), and |x+iy| = &amp;radic;x2</target>
        </trans-unit>
        <trans-unit id="ce08db172f8b5a771798a61cade1fcb555c08413" translate="yes" xml:space="preserve">
          <source>), is returned.</source>
          <target state="translated">), is returned.</target>
        </trans-unit>
        <trans-unit id="a08d1f37fdd01ee828e85c675c534b9eb820d73e" translate="yes" xml:space="preserve">
          <source>), or</source>
          <target state="translated">), or</target>
        </trans-unit>
        <trans-unit id="813e4d64526a85c733769d585fbd95b316bbb731" translate="yes" xml:space="preserve">
          <source>), or input and output simultaneously. In latter case, six pointers are tracked, which may all point to elements of the same character array or two individual arrays.</source>
          <target state="translated">), or input and output simultaneously. In latter case, six pointers are tracked, which may all point to elements of the same character array or two individual arrays.</target>
        </trans-unit>
        <trans-unit id="8253d6fd9e84f865b2757453fbc7d6fc652f520e" translate="yes" xml:space="preserve">
          <source>), output (</source>
          <target state="translated">), output (</target>
        </trans-unit>
        <trans-unit id="000bcdd5a62d01fb1379c59dc23af47a226201bb" translate="yes" xml:space="preserve">
          <source>), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt;.</source>
          <target state="translated">), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="49a2dcd0c5c26e96365c19aba5ef1246f87e5ac6" translate="yes" xml:space="preserve">
          <source>), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;::value&lt;/code&gt;.</source>
          <target state="translated">), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;::value&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="52785123a74ce9b8d4f9e1fb2e0e2cbe28ae45f4" translate="yes" xml:space="preserve">
          <source>), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt;.</source>
          <target state="translated">), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;::value&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="8b6c9815c927483629ba361b2a23e8cb57b6a187" translate="yes" xml:space="preserve">
          <source>), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value&lt;/code&gt;.</source>
          <target state="translated">), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d8274942b881ba0f2b671abf5d7a9dbc7f18f969" translate="yes" xml:space="preserve">
          <source>), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;std::is_swappable_with&amp;lt;T&amp;amp;, T&amp;amp;&amp;gt;::value&lt;/code&gt;</source>
          <target state="translated">), provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;. Otherwise, provides a member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;std::is_swappable_with&amp;lt;T&amp;amp;, T&amp;amp;&amp;gt;::value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7fe68e4347a7ebf324beb0391c42cce1896119a" translate="yes" xml:space="preserve">
          <source>), the flag is flipped, and all other calls to &lt;code&gt;call_once&lt;/code&gt; with the same flag are guaranteed to be</source>
          <target state="translated">), the flag is flipped, and all other calls to &lt;code&gt;call_once&lt;/code&gt; with the same flag are guaranteed to be</target>
        </trans-unit>
        <trans-unit id="227f76a68bc34b29cb2f58a52ec8dc1eb2d59a48" translate="yes" xml:space="preserve">
          <source>), the lookup for the identifier used in the namespace definition must resolve to a namespace name (not a namespace alias), that was declared as a member of the enclosing namespace or of an inline namespace within an enclosing namespace.</source>
          <target state="translated">), the lookup for the identifier used in the namespace definition must resolve to a namespace name (not a namespace alias), that was declared as a member of the enclosing namespace or of an inline namespace within an enclosing namespace.</target>
        </trans-unit>
        <trans-unit id="8a85156cf2e7aa061a8d4b8fa49561b07fb67bb3" translate="yes" xml:space="preserve">
          <source>), the pointers &lt;code&gt;argv[1] .. argv[argc-1]&lt;/code&gt; point at the first characters in each of these strings. &lt;code&gt;argv[0]&lt;/code&gt; is the pointer to the initial character of a null-terminated multibyte string that represents the name used to invoke the program itself (or an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; if this is not supported by the execution environment). The strings are modifiable, although these modifications do not propagate back to the execution environment: they can be used, for example, with &lt;code&gt;&lt;a href=&quot;../string/byte/strtok&quot;&gt;std::strtok&lt;/a&gt;&lt;/code&gt;. The size of the array pointed to by &lt;code&gt;argv&lt;/code&gt; is at least &lt;code&gt;argc+1&lt;/code&gt;, and the last element, &lt;code&gt;argv[argc]&lt;/code&gt;, is guaranteed to be a null pointer.</source>
          <target state="translated">), the pointers &lt;code&gt;argv[1] .. argv[argc-1]&lt;/code&gt; point at the first characters in each of these strings. &lt;code&gt;argv[0]&lt;/code&gt; is the pointer to the initial character of a null-terminated multibyte string that represents the name used to invoke the program itself (or an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; if this is not supported by the execution environment). The strings are modifiable, although these modifications do not propagate back to the execution environment: they can be used, for example, with &lt;code&gt;&lt;a href=&quot;../string/byte/strtok&quot;&gt;std::strtok&lt;/a&gt;&lt;/code&gt;. The size of the array pointed to by &lt;code&gt;argv&lt;/code&gt; is at least &lt;code&gt;argc+1&lt;/code&gt;, and the last element, &lt;code&gt;argv[argc]&lt;/code&gt;, is guaranteed to be a null pointer.</target>
        </trans-unit>
        <trans-unit id="84ad23d37d047d1427f50bb2d486992869046550" translate="yes" xml:space="preserve">
          <source>)-(m+n)/2</source>
          <target state="translated">)-(m+n)/2</target>
        </trans-unit>
        <trans-unit id="d41919407ce8f78b6cd89401353e39179fec9ab2" translate="yes" xml:space="preserve">
          <source>).</source>
          <target state="translated">).</target>
        </trans-unit>
        <trans-unit id="d219f3f7a1ab066245031c334516fc2dd57aadb9" translate="yes" xml:space="preserve">
          <source>). &quot;Left&quot; and &quot;Right&quot; here stood for &quot;left of assignment&quot; and &quot;right of assignment&quot;.</source>
          <target state="translated">). &quot;Left&quot; and &quot;Right&quot; here stood for &quot;left of assignment&quot; and &quot;right of assignment&quot;.</target>
        </trans-unit>
        <trans-unit id="b437549d9c74157444b2020c7934aec3575f6336" translate="yes" xml:space="preserve">
          <source>). Accessing such a reference is undefined behavior. A common example is a function returning a reference to an automatic variable:</source>
          <target state="translated">). Accessing such a reference is undefined behavior. A common example is a function returning a reference to an automatic variable:</target>
        </trans-unit>
        <trans-unit id="bc9765b54d2fdb823fea705655223c718868723c" translate="yes" xml:space="preserve">
          <source>). All class and array prvalues have a result object even if it is discarded. In certain contexts, &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;temporary materialization&lt;/a&gt; occurs to create a temporary as the result object;</source>
          <target state="translated">). All class and array prvalues have a result object even if it is discarded. In certain contexts, &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;temporary materialization&lt;/a&gt; occurs to create a temporary as the result object;</target>
        </trans-unit>
        <trans-unit id="29f0bbc5b006b451a6f323506eb52504ca534fa2" translate="yes" xml:space="preserve">
          <source>). It is declared just like any other &lt;a href=&quot;function&quot;&gt;function&lt;/a&gt; or &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt; at namespace scope (it may also be a friend function, an explicit instantiation or specialization of a function template, or introduced by a using-declaration), except for the following restrictions:</source>
          <target state="translated">). It is declared just like any other &lt;a href=&quot;function&quot;&gt;function&lt;/a&gt; or &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt; at namespace scope (it may also be a friend function, an explicit instantiation or specialization of a function template, or introduced by a using-declaration), except for the following restrictions:</target>
        </trans-unit>
        <trans-unit id="3f64ee669697c5b21fc7e2131563208b4df2015a" translate="yes" xml:space="preserve">
          <source>). When evaluated in left-hand mode an expression effectively gives an address (the left-hand value, or</source>
          <target state="translated">). When evaluated in left-hand mode an expression effectively gives an address (the left-hand value, or</target>
        </trans-unit>
        <trans-unit id="d10a9177cf8b4abc70b7877857afbf6a99c603f7" translate="yes" xml:space="preserve">
          <source>)1/2</source>
          <target state="translated">)1/2</target>
        </trans-unit>
        <trans-unit id="eb343c23b2c7a649141300e5f24e4a4e6f449371" translate="yes" xml:space="preserve">
          <source>)m/2</source>
          <target state="translated">)m/2</target>
        </trans-unit>
        <trans-unit id="0c791cec12bf5d54ce0c027b0f324ed9e7e7b1b0" translate="yes" xml:space="preserve">
          <source>* Either way, then appends the native format pathname of &lt;code&gt;p&lt;/code&gt;, omitting any root-name from its generic format, to the native format of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">* Either way, then appends the native format pathname of &lt;code&gt;p&lt;/code&gt;, omitting any root-name from its generic format, to the native format of &lt;code&gt;*this&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1d9f5e94de40ec5e32f8b4ba7d67d43403711527" translate="yes" xml:space="preserve">
          <source>* Otherwise, if &lt;code&gt;has_filename() || (!has_root_directory() &amp;amp;&amp;amp; is_absolute())&lt;/code&gt;, then appends &lt;code&gt;path::preferred_separator&lt;/code&gt; to the generic format of &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">* Otherwise, if &lt;code&gt;has_filename() || (!has_root_directory() &amp;amp;&amp;amp; is_absolute())&lt;/code&gt;, then appends &lt;code&gt;path::preferred_separator&lt;/code&gt; to the generic format of &lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c74ad53bb5d1a4102003b16a55bbe55633dba41" translate="yes" xml:space="preserve">
          <source>* Otherwise, if &lt;code&gt;p.has_root_directory()&lt;/code&gt;, then removes any root directory and the entire relative path from the generic format pathname of &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">* Otherwise, if &lt;code&gt;p.has_root_directory()&lt;/code&gt;, then removes any root directory and the entire relative path from the generic format pathname of &lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb83404277b3664c11f58fb23061ec13e3adfa91" translate="yes" xml:space="preserve">
          <source>+ p</source>
          <target state="translated">+ p</target>
        </trans-unit>
        <trans-unit id="e80bd221d2d33f1c06aee34ee081ebb0810323af" translate="yes" xml:space="preserve">
          <source>+(1-x)y,</source>
          <target state="translated">+(1-x)y,</target>
        </trans-unit>
        <trans-unit id="9dd55d1c7f44e3172cf8cdd1c6bdebab03703d7b" translate="yes" xml:space="preserve">
          <source>+(m+1-x)y,</source>
          <target state="translated">+(m+1-x)y,</target>
        </trans-unit>
        <trans-unit id="a3f0610b232acecfe2c642a1626664f1891233db" translate="yes" xml:space="preserve">
          <source>+12</source>
          <target state="translated">+12</target>
        </trans-unit>
        <trans-unit id="e57c2fd84c1a0c84e37f7e6ae23e0c2ce6750891" translate="yes" xml:space="preserve">
          <source>+3)</source>
          <target state="translated">+3)</target>
        </trans-unit>
        <trans-unit id="10237625c4038078366f0ba301062e26b0a292b7" translate="yes" xml:space="preserve">
          <source>+e-arg</source>
          <target state="translated">+e-arg</target>
        </trans-unit>
        <trans-unit id="646a59a5040c633be59638f0b9236c74b2d4b10e" translate="yes" xml:space="preserve">
          <source>+e-iz</source>
          <target state="translated">+e-iz</target>
        </trans-unit>
        <trans-unit id="34a1e35776739ce4dc04bce6c9ebf045e0e6d5cd" translate="yes" xml:space="preserve">
          <source>+e-z</source>
          <target state="translated">+e-z</target>
        </trans-unit>
        <trans-unit id="e658a5f32f2900a22bb92bff52a9aae37a38fc16" translate="yes" xml:space="preserve">
          <source>+eiz</source>
          <target state="translated">+eiz</target>
        </trans-unit>
        <trans-unit id="bddb8fae8c2f37ccd79f567771888dc44dc8cc9b" translate="yes" xml:space="preserve">
          <source>+ny = 0.</source>
          <target state="translated">+ny = 0.</target>
        </trans-unit>
        <trans-unit id="bd70b4e8a931f2e78f56e98d763ca24203c62e75" translate="yes" xml:space="preserve">
          <source>+v2</source>
          <target state="translated">+v2</target>
        </trans-unit>
        <trans-unit id="52ec0e2168e6e479e68b2919cf6142e08ffe7ec9" translate="yes" xml:space="preserve">
          <source>+y2</source>
          <target state="translated">+y2</target>
        </trans-unit>
        <trans-unit id="2b244771fa02666cc86f47053fdfc3df90f26c37" translate="yes" xml:space="preserve">
          <source>+z2</source>
          <target state="translated">+z2</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="5f6d08f427792faae2b0f82a8b41354c8d0eb83b" translate="yes" xml:space="preserve">
          <source>, +</source>
          <target state="translated">, +</target>
        </trans-unit>
        <trans-unit id="7548598ac5428c5e6d432f2a659a1448b2e17f0b" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;../language/implicit_cast&quot;&gt;implicitly converted&lt;/a&gt; to &lt;code&gt;R&lt;/code&gt;.</source>
          <target state="translated">, &lt;a href=&quot;../language/implicit_cast&quot;&gt;implicitly converted&lt;/a&gt; to &lt;code&gt;R&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="49ae45012794bd28042fdbf626870dd6de6f39d4" translate="yes" xml:space="preserve">
          <source>, &lt;a href=&quot;aggregate_initialization&quot;&gt;aggregate-initialization&lt;/a&gt; is performed instead of value-initialization.</source>
          <target state="translated">, &lt;a href=&quot;aggregate_initialization&quot;&gt;aggregate-initialization&lt;/a&gt; is performed instead of value-initialization.</target>
        </trans-unit>
        <trans-unit id="d1f5cd75a9daba8f2f7f22fedc4e64800510358b" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;*this&lt;/code&gt; will be</source>
          <target state="translated">, &lt;code&gt;*this&lt;/code&gt; will be</target>
        </trans-unit>
        <trans-unit id="cbc959a96b33a2cf304b671a3429cb2386f39607" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;-0.0&lt;/code&gt;. It compares equal to the positive zero, but is meaningful in some arithmetic operations, e.g. &lt;code&gt;1.0/0.0 == &lt;a href=&quot;../numeric/math/infinity&quot;&gt;INFINITY&lt;/a&gt;&lt;/code&gt;, but &lt;code&gt;1.0/-0.0 == -&lt;a href=&quot;../numeric/math/infinity&quot;&gt;INFINITY&lt;/a&gt;&lt;/code&gt;), and for some mathematical functions, e.g. &lt;a href=&quot;../numeric/complex/sqrt&quot;&gt;&lt;code&gt;sqrt(std::complex)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">, &lt;code&gt;-0.0&lt;/code&gt;. It compares equal to the positive zero, but is meaningful in some arithmetic operations, e.g. &lt;code&gt;1.0/0.0 == &lt;a href=&quot;../numeric/math/infinity&quot;&gt;INFINITY&lt;/a&gt;&lt;/code&gt;, but &lt;code&gt;1.0/-0.0 == -&lt;a href=&quot;../numeric/math/infinity&quot;&gt;INFINITY&lt;/a&gt;&lt;/code&gt;), and for some mathematical functions, e.g. &lt;a href=&quot;../numeric/complex/sqrt&quot;&gt;&lt;code&gt;sqrt(std::complex)&lt;/code&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="919651749e2587050758ccffbd7f31defb641101" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">, &lt;code&gt;false&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="e150b1788dd9f7e5e7ac789ea46e43edb1ebffbd" translate="yes" xml:space="preserve">
          <source>, a store performs a</source>
          <target state="translated">, a store performs a</target>
        </trans-unit>
        <trans-unit id="19b5996e405a6ed4c07abfed3dafab18a042792b" translate="yes" xml:space="preserve">
          <source>, also called</source>
          <target state="translated">, also called</target>
        </trans-unit>
        <trans-unit id="76efbe8f631393a4ecee38118476bba77772a7c8" translate="yes" xml:space="preserve">
          <source>, also called the</source>
          <target state="translated">, also called the</target>
        </trans-unit>
        <trans-unit id="aea6d7e73863f4e0940bbf752d4919ab96ab8487" translate="yes" xml:space="preserve">
          <source>, always points at the lowest element of the buffer</source>
          <target state="translated">, always points at the lowest element of the buffer</target>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">, and</target>
        </trans-unit>
        <trans-unit id="fa4b5ee1b8ef9db4cc89fb7a85afd2486106199b" translate="yes" xml:space="preserve">
          <source>, and A and B are not the same atomic read-modify-write operation 4) A is</source>
          <target state="translated">, and A and B are not the same atomic read-modify-write operation 4) A is</target>
        </trans-unit>
        <trans-unit id="3e78050a1411b651fc55bef36d17168def1bb474" translate="yes" xml:space="preserve">
          <source>, and declares typedef-names rather than functions or objects. It may declare one or many identifiers on the same line (e.g. int and a pointer to int), it may declare array and function types, pointers and references, class types, etc. Every identifier introduced in this declaration becomes a typedef-name, which is a synonym for the type of the object or function that it would become if the keyword &lt;code&gt;typedef&lt;/code&gt; were removed.</source>
          <target state="translated">, and declares typedef-names rather than functions or objects. It may declare one or many identifiers on the same line (e.g. int and a pointer to int), it may declare array and function types, pointers and references, class types, etc. Every identifier introduced in this declaration becomes a typedef-name, which is a synonym for the type of the object or function that it would become if the keyword &lt;code&gt;typedef&lt;/code&gt; were removed.</target>
        </trans-unit>
        <trans-unit id="bc681c1d15cbc84592cb9f72c9f04fdf775fd388" translate="yes" xml:space="preserve">
          <source>, and finally if the most significant w-r bits of X</source>
          <target state="translated">, and finally if the most significant w-r bits of X</target>
        </trans-unit>
        <trans-unit id="fe5c90235b636a3479741a3510eaceea07ddce9c" translate="yes" xml:space="preserve">
          <source>, and read-modify-write performs both an</source>
          <target state="translated">, and read-modify-write performs both an</target>
        </trans-unit>
        <trans-unit id="f271421a655819957768cd03a5c938ac5b0a4c6f" translate="yes" xml:space="preserve">
          <source>, and that new types may be defined only if the type-id appears on the right-hand side of a non-template type alias declaration.</source>
          <target state="translated">, and that new types may be defined only if the type-id appears on the right-hand side of a non-template type alias declaration.</target>
        </trans-unit>
        <trans-unit id="d471e524aa913f187bfb8c93eaa4806f3e058b23" translate="yes" xml:space="preserve">
          <source>, and that type is the result.</source>
          <target state="translated">, and that type is the result.</target>
        </trans-unit>
        <trans-unit id="ee3512838144c5e90ccc687a13c6d309a52fb71d" translate="yes" xml:space="preserve">
          <source>, and the constructor selected by the only member of the initializer list is the</source>
          <target state="translated">, and the constructor selected by the only member of the initializer list is the</target>
        </trans-unit>
        <trans-unit id="973944096f18758ce03ecad39e4127d435720ac9" translate="yes" xml:space="preserve">
          <source>, and the name is not found in the current instantiation or any of its non-dependent base classes, and there is a dependent base class</source>
          <target state="translated">, and the name is not found in the current instantiation or any of its non-dependent base classes, and there is a dependent base class</target>
        </trans-unit>
        <trans-unit id="2672d89540d02875c29f652796b959aecd4e64f8" translate="yes" xml:space="preserve">
          <source>, and the pattern is the</source>
          <target state="translated">, and the pattern is the</target>
        </trans-unit>
        <trans-unit id="b3af05611f4fcd5873ceaa8177fa9f7b1315849a" translate="yes" xml:space="preserve">
          <source>, and then</source>
          <target state="translated">, and then</target>
        </trans-unit>
        <trans-unit id="c7da766f43a49614101d4ba44f375638ff9bbf5e" translate="yes" xml:space="preserve">
          <source>, and there is an object</source>
          <target state="translated">, and there is an object</target>
        </trans-unit>
        <trans-unit id="6a2c01681df2cda12ce7497be0662428aa1cce6b" translate="yes" xml:space="preserve">
          <source>, and therefore,</source>
          <target state="translated">, and therefore,</target>
        </trans-unit>
        <trans-unit id="d25174a2176d97867e83800f972ef716942d2a28" translate="yes" xml:space="preserve">
          <source>, and typical &lt;a href=&quot;operators&quot;&gt;user-defined overloads&lt;/a&gt; follow the pattern so that the user-defined operators can be used in the same manner as the built-ins. However, in a user-defined operator overload, any type can be used as return type (including &lt;code&gt;void&lt;/code&gt;).</source>
          <target state="translated">, and typical &lt;a href=&quot;operators&quot;&gt;user-defined overloads&lt;/a&gt; follow the pattern so that the user-defined operators can be used in the same manner as the built-ins. However, in a user-defined operator overload, any type can be used as return type (including &lt;code&gt;void&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="61af6b062ebe799f00341f4d3839af039a06a354" translate="yes" xml:space="preserve">
          <source>, as follows.</source>
          <target state="translated">, as follows.</target>
        </trans-unit>
        <trans-unit id="ab1d10001f67e9fe12456802b088b3116b9b9127" translate="yes" xml:space="preserve">
          <source>, based on the consumed data. The produced values are distributed over the entire 32-bit range even if the consumed values are close.</source>
          <target state="translated">, based on the consumed data. The produced values are distributed over the entire 32-bit range even if the consumed values are close.</target>
        </trans-unit>
        <trans-unit id="3ba7a6efa13e7710fcd1d4453d88a1cbad980173" translate="yes" xml:space="preserve">
          <source>, based on the data originally provided in the constructor of this &lt;code&gt;seed_seq&lt;/code&gt;. The produced values are distributed over the entire 32-bit range even if the initial values were strongly biased.</source>
          <target state="translated">, based on the data originally provided in the constructor of this &lt;code&gt;seed_seq&lt;/code&gt;. The produced values are distributed over the entire 32-bit range even if the initial values were strongly biased.</target>
        </trans-unit>
        <trans-unit id="ed5f7762215d2272c3359eff57a957f524a3fb0a" translate="yes" xml:space="preserve">
          <source>, but for any given set of template arguments, the evaluation of the two expressions results in the same value.</source>
          <target state="translated">, but for any given set of template arguments, the evaluation of the two expressions results in the same value.</target>
        </trans-unit>
        <trans-unit id="839fb966641d74cc14e70c962eba98b46dfaa732" translate="yes" xml:space="preserve">
          <source>, but hasn't yet been instantiated, the dependent names are looked up and any templates used in the expression are instantiated as if for the declaration of the specialization.</source>
          <target state="translated">, but hasn't yet been instantiated, the dependent names are looked up and any templates used in the expression are instantiated as if for the declaration of the specialization.</target>
        </trans-unit>
        <trans-unit id="26b5522cb119e8293203f5df34fc8438f3a53bb8" translate="yes" xml:space="preserve">
          <source>, but the name is neither a member of</source>
          <target state="translated">, but the name is neither a member of</target>
        </trans-unit>
        <trans-unit id="4053608669f62c9cd915c2536531e8e425152ee6" translate="yes" xml:space="preserve">
          <source>, but the value itself is moved from. If &lt;code&gt;other&lt;/code&gt; does not contain a value, constructs an object that</source>
          <target state="translated">, but the value itself is moved from. If &lt;code&gt;other&lt;/code&gt; does not contain a value, constructs an object that</target>
        </trans-unit>
        <trans-unit id="6d9c68ce0c42aa44161ea7488708eec098a0980b" translate="yes" xml:space="preserve">
          <source>, by providing a label followed by a colon before the statement itself.</source>
          <target state="translated">, by providing a label followed by a colon before the statement itself.</target>
        </trans-unit>
        <trans-unit id="5d4f70dfafcb16a063c6caca45514bf3f6f403f7" translate="yes" xml:space="preserve">
          <source>, defined as follows:</source>
          <target state="translated">, defined as follows:</target>
        </trans-unit>
        <trans-unit id="59a3695105b9def80a9740da36e46c7b4f6acc4f" translate="yes" xml:space="preserve">
          <source>, defined in the description below. This type is the type returned by &lt;a href=&quot;decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/a&gt; when applied to an unparenthesized structured binding.</source>
          <target state="translated">, defined in the description below. This type is the type returned by &lt;a href=&quot;decltype&quot;&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/a&gt; when applied to an unparenthesized structured binding.</target>
        </trans-unit>
        <trans-unit id="f7349d015604fec94cacadc4a31cc2ef10cbf908" translate="yes" xml:space="preserve">
          <source>, described below (each requirement ends with a semicolon).</source>
          <target state="translated">, described below (each requirement ends with a semicolon).</target>
        </trans-unit>
        <trans-unit id="d0326c2af02477004d0e9cb81da31109edab9e6b" translate="yes" xml:space="preserve">
          <source>, despite the possibility of intermediate overflow. In other words, the programmer guarantees that the range of the values that will be passed to those function is limited. The default value is &lt;code&gt;OFF&lt;/code&gt;</source>
          <target state="translated">, despite the possibility of intermediate overflow. In other words, the programmer guarantees that the range of the values that will be passed to those function is limited. The default value is &lt;code&gt;OFF&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf227af58f20f11eb8254b574f9babb436fd9cef" translate="yes" xml:space="preserve">
          <source>, each of which has the following syntax.</source>
          <target state="translated">, each of which has the following syntax.</target>
        </trans-unit>
        <trans-unit id="416433c1df4de790898ab0c1a9f7753ec4ecbe92" translate="yes" xml:space="preserve">
          <source>, especially when compared to the behavior of &lt;code&gt;min&lt;/code&gt; for integral types. To find the value that has no values less than it, use &lt;a href=&quot;lowest&quot;&gt;&lt;code&gt;numeric_limits::lowest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">, especially when compared to the behavior of &lt;code&gt;min&lt;/code&gt; for integral types. To find the value that has no values less than it, use &lt;a href=&quot;lowest&quot;&gt;&lt;code&gt;numeric_limits::lowest&lt;/code&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f4637bdaa9c0f955da44cd93810196e480ac0d73" translate="yes" xml:space="preserve">
          <source>, even though they do not have a nested &lt;code&gt;allocator_type&lt;/code&gt;.</source>
          <target state="translated">, even though they do not have a nested &lt;code&gt;allocator_type&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c4324be339c1abca15681290ba6b50704d9539e9" translate="yes" xml:space="preserve">
          <source>, except that one or more expressions that involve template parameters in their return types and parameter lists are</source>
          <target state="translated">, except that one or more expressions that involve template parameters in their return types and parameter lists are</target>
        </trans-unit>
        <trans-unit id="b402a081f1fd2ed0d93364392f8a9e1971f2a0ba" translate="yes" xml:space="preserve">
          <source>, i.e. not an infinity, subnormal, not-a-number or zero</source>
          <target state="translated">, i.e. not an infinity, subnormal, not-a-number or zero</target>
        </trans-unit>
        <trans-unit id="6b4e1046888fa32cdfe1a49b162f17f7ea4b6be8" translate="yes" xml:space="preserve">
          <source>, i.e., a condition that a function should ensure for the return value and/or the state of objects upon exit from the function. This attribute may be applied to the function type in a function declaration. The identifier, if present, represents the glvalue result or the prvalue result object of the function, as applicable. A postcondition is checked by evaluating its predicate immediately before returning control to the caller of the function (after the lifetime of local variables and temporaries have ended). Multiple postconditions of the same function are checked in lexical order.</source>
          <target state="translated">, i.e., a condition that a function should ensure for the return value and/or the state of objects upon exit from the function. This attribute may be applied to the function type in a function declaration. The identifier, if present, represents the glvalue result or the prvalue result object of the function, as applicable. A postcondition is checked by evaluating its predicate immediately before returning control to the caller of the function (after the lifetime of local variables and temporaries have ended). Multiple postconditions of the same function are checked in lexical order.</target>
        </trans-unit>
        <trans-unit id="dc70076dd5f40ed7869edc51627f76b7b7f20651" translate="yes" xml:space="preserve">
          <source>, i.e., a condition that should be satisfied where it appears in a function body. This attribute may be applied to a &lt;a href=&quot;../statements#Expression_statements&quot;&gt;null statement&lt;/a&gt;. An assertion is checked by evaluating its predicate as part of the evaluation of the null statement it applies to.</source>
          <target state="translated">, i.e., a condition that should be satisfied where it appears in a function body. This attribute may be applied to a &lt;a href=&quot;../statements#Expression_statements&quot;&gt;null statement&lt;/a&gt;. An assertion is checked by evaluating its predicate as part of the evaluation of the null statement it applies to.</target>
        </trans-unit>
        <trans-unit id="c43d61e5b72f98e6dc867b84867db71f1513722e" translate="yes" xml:space="preserve">
          <source>, i.e., the function's expectation of its arguments and/or the state of other objects upon entry into the function. This attribute may be applied to the function type in a function declaration. A precondition is checked by evaluating its predicate immediately before starting evaluation of the function body (including the member initializer list of a constructor). Multiple preconditions of the same function are checked in lexical order.</source>
          <target state="translated">, i.e., the function's expectation of its arguments and/or the state of other objects upon entry into the function. This attribute may be applied to the function type in a function declaration. A precondition is checked by evaluating its predicate immediately before starting evaluation of the function body (including the member initializer list of a constructor). Multiple preconditions of the same function are checked in lexical order.</target>
        </trans-unit>
        <trans-unit id="05a2cdc9bfab30a78b62b924efc54e04496a5d36" translate="yes" xml:space="preserve">
          <source>, if that type exists and is a reference type;</source>
          <target state="translated">, if that type exists and is a reference type;</target>
        </trans-unit>
        <trans-unit id="b76f9c77a4bc19cfb11ed7bd71c1406f2ff55777" translate="yes" xml:space="preserve">
          <source>, if the index &lt;code&gt;-1&lt;/code&gt; (non-matched fragment) appears in the list of the requested submatch indexes. Such iterator, if dereferenced, returns a match_results corresponding to the sequence of characters between the last match and the end of sequence.</source>
          <target state="translated">, if the index &lt;code&gt;-1&lt;/code&gt; (non-matched fragment) appears in the list of the requested submatch indexes. Such iterator, if dereferenced, returns a match_results corresponding to the sequence of characters between the last match and the end of sequence.</target>
        </trans-unit>
        <trans-unit id="fe5d161555eeb1df670770a1e6789c51655f82a7" translate="yes" xml:space="preserve">
          <source>, in particular,</source>
          <target state="translated">, in particular,</target>
        </trans-unit>
        <trans-unit id="d56a5c01b87764b5d9a15aac27495def997a0914" translate="yes" xml:space="preserve">
          <source>, in which the asynchronous task may write its return value or store an exception, and which may be examined, waited for, and otherwise manipulated by other threads that hold instances of &lt;code&gt;&lt;a href=&quot;thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;thread/shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt; that reference that shared state.</source>
          <target state="translated">, in which the asynchronous task may write its return value or store an exception, and which may be examined, waited for, and otherwise manipulated by other threads that hold instances of &lt;code&gt;&lt;a href=&quot;thread/future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;thread/shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt; that reference that shared state.</target>
        </trans-unit>
        <trans-unit id="4e0ec5ecdd18fe8ee5c662703f553d5646b14b1d" translate="yes" xml:space="preserve">
          <source>, including:</source>
          <target state="translated">, including:</target>
        </trans-unit>
        <trans-unit id="49fe3a9e9e57cace879575cd8a2766d6053e52e5" translate="yes" xml:space="preserve">
          <source>, increases the</source>
          <target state="translated">, increases the</target>
        </trans-unit>
        <trans-unit id="9f743ddc77564dba3f23511927f01c21243b6949" translate="yes" xml:space="preserve">
          <source>, initialized as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; (where &lt;code&gt;T&lt;/code&gt; = &lt;code&gt;value_type&lt;/code&gt;) with the expression &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(value)&lt;/code&gt;. If the selected constructor of &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;constexpr&lt;/code&gt; constructor, this constructor is a &lt;code&gt;constexpr&lt;/code&gt; constructor. This constructor does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;U&amp;gt;&lt;/code&gt;(until C++20)&lt;code&gt;&lt;a href=&quot;../../types/remove_cvref&quot;&gt;std::remove_cvref_t&lt;/a&gt;&amp;lt;U&amp;gt;&lt;/code&gt;(since C++20) is neither &lt;code&gt;&lt;a href=&quot;../in_place&quot;&gt;std::in_place_t&lt;/a&gt;&lt;/code&gt; nor &lt;code&gt;&lt;a href=&quot;../optional&quot;&gt;std::optional&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. This constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible_v&lt;/a&gt;&amp;lt;U&amp;amp;&amp;amp;, T&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">, initialized as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; (where &lt;code&gt;T&lt;/code&gt; = &lt;code&gt;value_type&lt;/code&gt;) with the expression &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U&amp;gt;(value)&lt;/code&gt;. If the selected constructor of &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;constexpr&lt;/code&gt; constructor, this constructor is a &lt;code&gt;constexpr&lt;/code&gt; constructor. This constructor does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;U&amp;gt;&lt;/code&gt;(until C++20)&lt;code&gt;&lt;a href=&quot;../../types/remove_cvref&quot;&gt;std::remove_cvref_t&lt;/a&gt;&amp;lt;U&amp;gt;&lt;/code&gt;(since C++20) is neither &lt;code&gt;&lt;a href=&quot;../in_place&quot;&gt;std::in_place_t&lt;/a&gt;&lt;/code&gt; nor &lt;code&gt;&lt;a href=&quot;../optional&quot;&gt;std::optional&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. This constructor is &lt;code&gt;explicit&lt;/code&gt; if and only if &lt;code&gt;&lt;a href=&quot;../../types/is_convertible&quot;&gt;std::is_convertible_v&lt;/a&gt;&amp;lt;U&amp;amp;&amp;amp;, T&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="024f6fdfa60d2bbf5dfcba93305ea88ce14aeba4" translate="yes" xml:space="preserve">
          <source>, initialized as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; from the arguments &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;. If the selected constructor of &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;constexpr&lt;/code&gt; constructor, this constructor is a &lt;code&gt;constexpr&lt;/code&gt; constructor. The function does not participate in the overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, Args...&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">, initialized as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; from the arguments &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;. If the selected constructor of &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;constexpr&lt;/code&gt; constructor, this constructor is a &lt;code&gt;constexpr&lt;/code&gt; constructor. The function does not participate in the overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, Args...&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12ba55dea4a1a49316e62b7d901fd040d8ca0d40" translate="yes" xml:space="preserve">
          <source>, initialized as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; from the arguments &lt;code&gt;ilist, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;. If the selected constructor of &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;constexpr&lt;/code&gt; constructor, this constructor is a &lt;code&gt;constexpr&lt;/code&gt; constructor. The function does not participate in the overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, &lt;a href=&quot;../initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&amp;lt;U&amp;gt;&amp;amp;, Args&amp;amp;&amp;amp;...&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">, initialized as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; from the arguments &lt;code&gt;ilist, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;. If the selected constructor of &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;constexpr&lt;/code&gt; constructor, this constructor is a &lt;code&gt;constexpr&lt;/code&gt; constructor. The function does not participate in the overload resolution unless &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, &lt;a href=&quot;../initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&amp;lt;U&amp;gt;&amp;amp;, Args&amp;amp;&amp;amp;...&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d352140499bee91bd8fa0478761dbe5c330ea43" translate="yes" xml:space="preserve">
          <source>, is returned.</source>
          <target state="translated">, is returned.</target>
        </trans-unit>
        <trans-unit id="175c457d4f29961d641ca2a8798b85be2da3fa90" translate="yes" xml:space="preserve">
          <source>, it does not guarantee to eventually make progress, regardless of whether other threads make progress or not.</source>
          <target state="translated">, it does not guarantee to eventually make progress, regardless of whether other threads make progress or not.</target>
        </trans-unit>
        <trans-unit id="a4d5af2f003d4edd4a67d465c683a4cccd41520c" translate="yes" xml:space="preserve">
          <source>, it will</source>
          <target state="translated">, it will</target>
        </trans-unit>
        <trans-unit id="7d93d561c4a71bf11bc768ca58595b6941547d8e" translate="yes" xml:space="preserve">
          <source>, its</source>
          <target state="translated">, its</target>
        </trans-unit>
        <trans-unit id="6f91b09821ac46c264cc0ea10d0d1170f98d0d71" translate="yes" xml:space="preserve">
          <source>, manipulated from inside the coroutine. The coroutine submits its result or exception through this object.</source>
          <target state="translated">, manipulated from inside the coroutine. The coroutine submits its result or exception through this object.</target>
        </trans-unit>
        <trans-unit id="5479c1699aca73a0953c02dfaccd5c84555ab750" translate="yes" xml:space="preserve">
          <source>, manipulated from outside the coroutine. This is a non-owning handle used to resume execution of the coroutine or to destroy the coroutine frame.</source>
          <target state="translated">, manipulated from outside the coroutine. This is a non-owning handle used to resume execution of the coroutine or to destroy the coroutine frame.</target>
        </trans-unit>
        <trans-unit id="6c8edf6284d2acc23862e132388f3fff069cb191" translate="yes" xml:space="preserve">
          <source>, optionally beginning with the capture-default. The only capture defaults are.</source>
          <target state="translated">, optionally beginning with the capture-default. The only capture defaults are.</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">, or</target>
        </trans-unit>
        <trans-unit id="dc36ab9eccc718c1abc9f80a81e226d913336034" translate="yes" xml:space="preserve">
          <source>, or &lt;code&gt;Traits::eof()&lt;/code&gt; if the read position is not available.</source>
          <target state="translated">, or &lt;code&gt;Traits::eof()&lt;/code&gt; if the read position is not available.</target>
        </trans-unit>
        <trans-unit id="f5af6daf307cf57f6918c636b54a125268865e3f" translate="yes" xml:space="preserve">
          <source>, or, equivalently,</source>
          <target state="translated">, or, equivalently,</target>
        </trans-unit>
        <trans-unit id="ca2b3f2f28d5107c14b1c6e606f4cad76bdae7f8" translate="yes" xml:space="preserve">
          <source>, plus a single total order exists in which all threads observe all modifications in the same order (see &lt;a href=&quot;memory_order#Sequentially-consistent_ordering&quot;&gt;Sequentially-consistent ordering&lt;/a&gt; below)</source>
          <target state="translated">, plus a single total order exists in which all threads observe all modifications in the same order (see &lt;a href=&quot;memory_order#Sequentially-consistent_ordering&quot;&gt;Sequentially-consistent ordering&lt;/a&gt; below)</target>
        </trans-unit>
        <trans-unit id="dfd6ed6582f22eb3abcf2ffc004092c02ade56e2" translate="yes" xml:space="preserve">
          <source>, points at the element that is the next candidate for reading or writing</source>
          <target state="translated">, points at the element that is the next candidate for reading or writing</target>
        </trans-unit>
        <trans-unit id="5fa45edc840e2d5239d147ca5f0b0444934f37ad" translate="yes" xml:space="preserve">
          <source>, points one past the end of the buffer.</source>
          <target state="translated">, points one past the end of the buffer.</target>
        </trans-unit>
        <trans-unit id="56e1fd68edd37b0785f83a78b8bb609db7ae0ee3" translate="yes" xml:space="preserve">
          <source>, reduced modulo 2N</source>
          <target state="translated">, reduced modulo 2N</target>
        </trans-unit>
        <trans-unit id="d52a915db9820a6bcc518b5ad196d8c320c16850" translate="yes" xml:space="preserve">
          <source>, rounded down (in other words, right shift on signed &lt;code&gt;a&lt;/code&gt; is arithmetic right shift).</source>
          <target state="translated">, rounded down (in other words, right shift on signed &lt;code&gt;a&lt;/code&gt; is arithmetic right shift).</target>
        </trans-unit>
        <trans-unit id="12f9d68c8ac0662752f77069df21f228d60ed8e3" translate="yes" xml:space="preserve">
          <source>, that is, calculated as if all intermediate results have infinite range and precision (unless &lt;a href=&quot;../../preprocessor/impl&quot;&gt;#pragma&lt;/a&gt;&lt;code&gt;STDC FP_CONTRACT&lt;/code&gt; is off).</source>
          <target state="translated">, that is, calculated as if all intermediate results have infinite range and precision (unless &lt;a href=&quot;../../preprocessor/impl&quot;&gt;#pragma&lt;/a&gt;&lt;code&gt;STDC FP_CONTRACT&lt;/code&gt; is off).</target>
        </trans-unit>
        <trans-unit id="726d8930d34f8a4f6a099e85812385ce7599ef4e" translate="yes" xml:space="preserve">
          <source>, that is, calculated as if all intermediate values have infinite range and precision, see &lt;a href=&quot;../preprocessor/impl#.23pragma_STDC&quot;&gt;#pragma STDC FP_CONTRACT&lt;/a&gt;.</source>
          <target state="translated">, that is, calculated as if all intermediate values have infinite range and precision, see &lt;a href=&quot;../preprocessor/impl#.23pragma_STDC&quot;&gt;#pragma STDC FP_CONTRACT&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="280a5a514b2edce844f95d9107d2f468bfaa6090" translate="yes" xml:space="preserve">
          <source>, that is, defined using &lt;code&gt;= default&lt;/code&gt; instead of the function body (see their pages for details).</source>
          <target state="translated">, that is, defined using &lt;code&gt;= default&lt;/code&gt; instead of the function body (see their pages for details).</target>
        </trans-unit>
        <trans-unit id="927b0f65a556cfc218662402e55977f4875acdc3" translate="yes" xml:space="preserve">
          <source>, that is, every call to the function must (directly or indirectly) produce a compile time &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt;. It may not be applied to destructors, allocation functions, or deallocation functions. A &lt;code&gt;consteval&lt;/code&gt; specifier implies &lt;code&gt;inline&lt;/code&gt;. The &lt;code&gt;consteval&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt; specifiers cannot both appear within the same sequence of declaration specifiers. If any declaration of a function or function template contains a &lt;code&gt;consteval&lt;/code&gt; specifier, then all declarations of that function or function template must contain that specifier.</source>
          <target state="translated">, that is, every call to the function must (directly or indirectly) produce a compile time &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt;. It may not be applied to destructors, allocation functions, or deallocation functions. A &lt;code&gt;consteval&lt;/code&gt; specifier implies &lt;code&gt;inline&lt;/code&gt;. The &lt;code&gt;consteval&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt; specifiers cannot both appear within the same sequence of declaration specifiers. If any declaration of a function or function template contains a &lt;code&gt;consteval&lt;/code&gt; specifier, then all declarations of that function or function template must contain that specifier.</target>
        </trans-unit>
        <trans-unit id="13e6ac797810b2583e02e711fae5cc60d6675399" translate="yes" xml:space="preserve">
          <source>, that is, every call to the function must produce a compile-time constant</source>
          <target state="translated">, that is, every call to the function must produce a compile-time constant</target>
        </trans-unit>
        <trans-unit id="e6150853dd837a9d52f6e09127998e56e3add360" translate="yes" xml:space="preserve">
          <source>, that is, it is copyable, default constructible, and equality comparable. It is satisfied by types that behave similarly to built-in types like &lt;code&gt;int&lt;/code&gt;, and that are comparable with &lt;code&gt;==&lt;/code&gt;.</source>
          <target state="translated">, that is, it is copyable, default constructible, and equality comparable. It is satisfied by types that behave similarly to built-in types like &lt;code&gt;int&lt;/code&gt;, and that are comparable with &lt;code&gt;==&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b3371f39b4d25c3614398ae687dd3c157715ecb1" translate="yes" xml:space="preserve">
          <source>, that is, once the atomic load is completed, those operators and functions in thread B that use the value obtained from the load are guaranteed to see what thread A wrote to memory.</source>
          <target state="translated">, that is, once the atomic load is completed, those operators and functions in thread B that use the value obtained from the load are guaranteed to see what thread A wrote to memory.</target>
        </trans-unit>
        <trans-unit id="5600d38f6522d0aee934bd46349d724c084a653b" translate="yes" xml:space="preserve">
          <source>, that is, the maximum number of characters that the function is allowed to consume when doing the conversion specified by the current conversion specification. Note that %s and %[ may lead to buffer overflow if the width is not provided.</source>
          <target state="translated">, that is, the maximum number of characters that the function is allowed to consume when doing the conversion specified by the current conversion specification. Note that %s and %[ may lead to buffer overflow if the width is not provided.</target>
        </trans-unit>
        <trans-unit id="c794fd166ea55d02204fa40c8fdf3ad6fc495f28" translate="yes" xml:space="preserve">
          <source>, that is, when multiple threads, processes, or computers interleave access and modification to the same object in a file system.</source>
          <target state="translated">, that is, when multiple threads, processes, or computers interleave access and modification to the same object in a file system.</target>
        </trans-unit>
        <trans-unit id="680e8348ef6a06d7786470c019bc34e892c71d32" translate="yes" xml:space="preserve">
          <source>, that is:</source>
          <target state="translated">, that is:</target>
        </trans-unit>
        <trans-unit id="9b3a0b7a765f6f37929babea162b22721cf97b06" translate="yes" xml:space="preserve">
          <source>, that specifies a computation.</source>
          <target state="translated">, that specifies a computation.</target>
        </trans-unit>
        <trans-unit id="3bfb6dca948f74883bbf3286851c95ba57be31f4" translate="yes" xml:space="preserve">
          <source>, the conversion is with style &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; and precision</source>
          <target state="translated">, the conversion is with style &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; and precision</target>
        </trans-unit>
        <trans-unit id="74ec0be2c1c5e564d982e937344a29b221fc71e8" translate="yes" xml:space="preserve">
          <source>, the implementation is not required to ensure that the thread will eventually make progress if it has not yet executed any execution step (I/O, volatile, atomic, or synchronization), but once this thread has executed a step, it provides</source>
          <target state="translated">, the implementation is not required to ensure that the thread will eventually make progress if it has not yet executed any execution step (I/O, volatile, atomic, or synchronization), but once this thread has executed a step, it provides</target>
        </trans-unit>
        <trans-unit id="865b6832f4e0ca5e62e15ffe643631dd6fd55797" translate="yes" xml:space="preserve">
          <source>, the program is ill-formed (no diagnostic required) even if the template is never instantiated.</source>
          <target state="translated">, the program is ill-formed (no diagnostic required) even if the template is never instantiated.</target>
        </trans-unit>
        <trans-unit id="6252c175045fb0a057d792b4d683d5ae134de753" translate="yes" xml:space="preserve">
          <source>, the program is ill-formed even if the template is never instantiated.</source>
          <target state="translated">, the program is ill-formed even if the template is never instantiated.</target>
        </trans-unit>
        <trans-unit id="a617453ac4590b46170c1a7036266e9967bc6bc3" translate="yes" xml:space="preserve">
          <source>, the program is ill-formed; no diagnostic is required.</source>
          <target state="translated">, the program is ill-formed; no diagnostic is required.</target>
        </trans-unit>
        <trans-unit id="5f61e28988dab607e4192aaf1ca1686fdc767392" translate="yes" xml:space="preserve">
          <source>, the result is a pointer to</source>
          <target state="translated">, the result is a pointer to</target>
        </trans-unit>
        <trans-unit id="44a3bdf0df71922d83bab0be27d9b6a00c2bbf00" translate="yes" xml:space="preserve">
          <source>, the significand is interpreted as a hexadecimal rational number, and the digit-sequence of the exponent is interpreted as the integer power of 2 to which the significand has to be scaled.</source>
          <target state="translated">, the significand is interpreted as a hexadecimal rational number, and the digit-sequence of the exponent is interpreted as the integer power of 2 to which the significand has to be scaled.</target>
        </trans-unit>
        <trans-unit id="13009a9b14410feb5cd6c73c3bd1bfbd7a4904ae" translate="yes" xml:space="preserve">
          <source>, the transformed &lt;code&gt;A&lt;/code&gt; can be a pointer to a derived class pointed to by the deduced &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">, the transformed &lt;code&gt;A&lt;/code&gt; can be a pointer to a derived class pointed to by the deduced &lt;code&gt;A&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="e5887a21fd2fcaa6b2b8d86ec27ffa55217a33da" translate="yes" xml:space="preserve">
          <source>, the value is guaranteed to be allocated as part of the &lt;code&gt;optional&lt;/code&gt; object footprint, i.e. no dynamic memory allocation ever takes place. Thus, an &lt;code&gt;optional&lt;/code&gt; object models an object, not a pointer, even though &lt;code&gt;&lt;a href=&quot;optional/operator_star_&quot;&gt;operator*()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;optional/operator_star_&quot;&gt;operator-&amp;gt;()&lt;/a&gt;&lt;/code&gt; are defined.</source>
          <target state="translated">, the value is guaranteed to be allocated as part of the &lt;code&gt;optional&lt;/code&gt; object footprint, i.e. no dynamic memory allocation ever takes place. Thus, an &lt;code&gt;optional&lt;/code&gt; object models an object, not a pointer, even though &lt;code&gt;&lt;a href=&quot;optional/operator_star_&quot;&gt;operator*()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;optional/operator_star_&quot;&gt;operator-&amp;gt;()&lt;/a&gt;&lt;/code&gt; are defined.</target>
        </trans-unit>
        <trans-unit id="e189049326051591313d1c5688fafbf491aeaf0f" translate="yes" xml:space="preserve">
          <source>, then</source>
          <target state="translated">, then</target>
        </trans-unit>
        <trans-unit id="6b65d6a72e7f417c7eb10b0640d1634d421da116" translate="yes" xml:space="preserve">
          <source>, then decltype yields &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;;</source>
          <target state="translated">, then decltype yields &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="b2d0b880f034572a02f034481249316400f3da27" translate="yes" xml:space="preserve">
          <source>, then decltype yields &lt;code&gt;T&amp;amp;&lt;/code&gt;;</source>
          <target state="translated">, then decltype yields &lt;code&gt;T&amp;amp;&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="025a7e9720bdc1db57bb09a518ced31ec7960c58" translate="yes" xml:space="preserve">
          <source>, then decltype yields &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">, then decltype yields &lt;code&gt;T&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="38b286c54dd26de2cde292380232bb5ad9b2e803" translate="yes" xml:space="preserve">
          <source>, to combine storage for equal or overlapping string literals. That means that identical string literals may or may not compare equal when compared by pointer.</source>
          <target state="translated">, to combine storage for equal or overlapping string literals. That means that identical string literals may or may not compare equal when compared by pointer.</target>
        </trans-unit>
        <trans-unit id="39afe292ab33f1b38dbe1ac95abd9a8b232fe031" translate="yes" xml:space="preserve">
          <source>, to distinguish them from base class subobjects. The size of a</source>
          <target state="translated">, to distinguish them from base class subobjects. The size of a</target>
        </trans-unit>
        <trans-unit id="7261574800bbad1b3018e945ce1cf8bc1599f1e3" translate="yes" xml:space="preserve">
          <source>, used as fallbacks for integer and floating-point user-defined literals (see above)</source>
          <target state="translated">, used as fallbacks for integer and floating-point user-defined literals (see above)</target>
        </trans-unit>
        <trans-unit id="ad84acd6bea16b274a98c999933ae341abb5ba85" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;is...&lt;/code&gt; is &lt;code&gt;vars.index()...&lt;/code&gt;.</source>
          <target state="translated">, where &lt;code&gt;is...&lt;/code&gt; is &lt;code&gt;vars.index()...&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a2b421625ac3731ea3cb91367db8527daf06ebf3" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::radix&lt;/code&gt;, is a representable finite value of the floating-point type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">, where &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::radix&lt;/code&gt;, is a representable finite value of the floating-point type &lt;code&gt;T&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="55a8d5ba8da1129b422ed63e6d82464c1f8dcc35" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::radix&lt;/code&gt;, is a valid normalized value of the floating-point type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">, where &lt;code&gt;r&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::radix&lt;/code&gt;, is a valid normalized value of the floating-point type &lt;code&gt;T&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b47def2aa5d460304bbe763879a1d37f51d8623f" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;swap&lt;/code&gt; is found as described above.</source>
          <target state="translated">, where &lt;code&gt;swap&lt;/code&gt; is found as described above.</target>
        </trans-unit>
        <trans-unit id="39e0575c8871a91aaf49fc7ab5c97899f2d46545" translate="yes" xml:space="preserve">
          <source>, where B does not</source>
          <target state="translated">, where B does not</target>
        </trans-unit>
        <trans-unit id="a7b754c671a5e803803ca2efcfe2c782e320db05" translate="yes" xml:space="preserve">
          <source>, where probability densities at interval boundaries p</source>
          <target state="translated">, where probability densities at interval boundaries p</target>
        </trans-unit>
        <trans-unit id="13866a3f74d56df7d3cb51e522f1e1b57a3a74dd" translate="yes" xml:space="preserve">
          <source>, where the smallest enclosing</source>
          <target state="translated">, where the smallest enclosing</target>
        </trans-unit>
        <trans-unit id="5665120c8536628d9c7b84af6765a9b15d9fd245" translate="yes" xml:space="preserve">
          <source>, where.</source>
          <target state="translated">, where.</target>
        </trans-unit>
        <trans-unit id="f8b3b14e053a1768b1be962e88e90878de427ab4" translate="yes" xml:space="preserve">
          <source>, which allows &lt;a href=&quot;member_functions&quot;&gt;member functions&lt;/a&gt; to return the class in which they are defined (or its enclosing class), even if it's incomplete at the point of definition (it is complete in the function body).</source>
          <target state="translated">, which allows &lt;a href=&quot;member_functions&quot;&gt;member functions&lt;/a&gt; to return the class in which they are defined (or its enclosing class), even if it's incomplete at the point of definition (it is complete in the function body).</target>
        </trans-unit>
        <trans-unit id="f61886631b8bcece13e614d4ea55c5dbc08430b4" translate="yes" xml:space="preserve">
          <source>, which allows the same template to be declared, but not defined, in other translation units.</source>
          <target state="translated">, which allows the same template to be declared, but not defined, in other translation units.</target>
        </trans-unit>
        <trans-unit id="694080c0276c289cb548bb0b697e45d7aa4b2bea" translate="yes" xml:space="preserve">
          <source>, which appears in decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; syntax. The</source>
          <target state="translated">, which appears in decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; syntax. The</target>
        </trans-unit>
        <trans-unit id="35a4dbef87e510bc8f9ad76a01bc59754fb88db6" translate="yes" xml:space="preserve">
          <source>, which applies only to (static/thread-local) class template &lt;a href=&quot;static&quot;&gt;static data members&lt;/a&gt;and &lt;a href=&quot;variable_template&quot;&gt;variable templates&lt;/a&gt;(since C++14) that aren't &lt;a href=&quot;template_specialization&quot;&gt;explicitly specialized&lt;/a&gt;. Initialization of such static variables is indeterminately sequenced with respect to all other dynamic initialization except if the program starts a thread before a variable is initialized, in which case its initialization is unsequenced(since C++17). Initialization of such thread-local variables is unsequenced with respect to all other dynamic initialization.</source>
          <target state="translated">, which applies only to (static/thread-local) class template &lt;a href=&quot;static&quot;&gt;static data members&lt;/a&gt;and &lt;a href=&quot;variable_template&quot;&gt;variable templates&lt;/a&gt;(since C++14) that aren't &lt;a href=&quot;template_specialization&quot;&gt;explicitly specialized&lt;/a&gt;. Initialization of such static variables is indeterminately sequenced with respect to all other dynamic initialization except if the program starts a thread before a variable is initialized, in which case its initialization is unsequenced(since C++17). Initialization of such thread-local variables is unsequenced with respect to all other dynamic initialization.</target>
        </trans-unit>
        <trans-unit id="68e3b9332db182d20c17d39f69d02c1ae7201dbb" translate="yes" xml:space="preserve">
          <source>, which applies to all inline variables that are not an implicitly or explicitly instantiated specialization. If a partially-ordered V is defined before ordered or partially-ordered W in every translation unit, the initialization of V is sequenced before the initialization of W (or happens-before, if the program starts a thread).</source>
          <target state="translated">, which applies to all inline variables that are not an implicitly or explicitly instantiated specialization. If a partially-ordered V is defined before ordered or partially-ordered W in every translation unit, the initialization of V is sequenced before the initialization of W (or happens-before, if the program starts a thread).</target>
        </trans-unit>
        <trans-unit id="166aa48db1395e0c71d1e7728ce72279573ed869" translate="yes" xml:space="preserve">
          <source>, which applies to all other non-local variables: within a single translation unit, initialization of these variables is always &lt;a href=&quot;eval_order&quot;&gt;sequenced&lt;/a&gt; in exact order their definitions appear in the source code. Initialization of static variables in different translation units is indeterminately sequenced. Initialization of thread-local variables in different translation units is unsequenced.</source>
          <target state="translated">, which applies to all other non-local variables: within a single translation unit, initialization of these variables is always &lt;a href=&quot;eval_order&quot;&gt;sequenced&lt;/a&gt; in exact order their definitions appear in the source code. Initialization of static variables in different translation units is indeterminately sequenced. Initialization of thread-local variables in different translation units is unsequenced.</target>
        </trans-unit>
        <trans-unit id="4df46289d87c2342c2a521cdc2dc2b09cb4af519" translate="yes" xml:space="preserve">
          <source>, which are the following:</source>
          <target state="translated">, which are the following:</target>
        </trans-unit>
        <trans-unit id="1e0f7168e93e3454d01841e23ec43d5ea5934d53" translate="yes" xml:space="preserve">
          <source>, which both restricts the operations that are permitted for those entities and provides semantic meaning to the otherwise generic sequences of bits.</source>
          <target state="translated">, which both restricts the operations that are permitted for those entities and provides semantic meaning to the otherwise generic sequences of bits.</target>
        </trans-unit>
        <trans-unit id="d6b6cce2f07358dee5afac36afafbdc1d7e9118d" translate="yes" xml:space="preserve">
          <source>, which can be.</source>
          <target state="translated">, which can be.</target>
        </trans-unit>
        <trans-unit id="9f302bfb180797f7279e268a9dd2bff8391f71f1" translate="yes" xml:space="preserve">
          <source>, which consists of types that might be thrown. Set of all types indicates that any exception may be thrown. This set is defined as follows:</source>
          <target state="translated">, which consists of types that might be thrown. Set of all types indicates that any exception may be thrown. This set is defined as follows:</target>
        </trans-unit>
        <trans-unit id="413c151437dfaa7a67526f433b3f28b793208a85" translate="yes" xml:space="preserve">
          <source>, which contains some state information and a</source>
          <target state="translated">, which contains some state information and a</target>
        </trans-unit>
        <trans-unit id="daa81ad237eedb906c49bb2895a01848ce8adeea" translate="yes" xml:space="preserve">
          <source>, which depends on the implementation-supplied &lt;a href=&quot;../locale&quot;&gt;locale&lt;/a&gt;.</source>
          <target state="translated">, which depends on the implementation-supplied &lt;a href=&quot;../locale&quot;&gt;locale&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2b647ec97a22bfb2e958fb04924435da134ba2b9" translate="yes" xml:space="preserve">
          <source>, which is a &lt;a href=&quot;../../named_req/functionobject&quot;&gt;function object&lt;/a&gt; of a &lt;a href=&quot;../../named_req/literaltype&quot;&gt;literal&lt;/a&gt;&lt;a href=&quot;../../concepts/semiregular&quot;&gt;&lt;code&gt;Semiregular&lt;/code&gt;&lt;/a&gt; class type (denoted, for exposition purposes, as &lt;code&gt;SwapT&lt;/code&gt;). All instances of &lt;code&gt;SwapT&lt;/code&gt; are equal. Thus, &lt;code&gt;ranges::swap&lt;/code&gt; can be copied freely and its copies can be used interchangeably.</source>
          <target state="translated">, which is a &lt;a href=&quot;../../named_req/functionobject&quot;&gt;function object&lt;/a&gt; of a &lt;a href=&quot;../../named_req/literaltype&quot;&gt;literal&lt;/a&gt;&lt;a href=&quot;../../concepts/semiregular&quot;&gt;&lt;code&gt;Semiregular&lt;/code&gt;&lt;/a&gt; class type (denoted, for exposition purposes, as &lt;code&gt;SwapT&lt;/code&gt;). All instances of &lt;code&gt;SwapT&lt;/code&gt; are equal. Thus, &lt;code&gt;ranges::swap&lt;/code&gt; can be copied freely and its copies can be used interchangeably.</target>
        </trans-unit>
        <trans-unit id="0eef751192bc36093806612c290f98397b78a78b" translate="yes" xml:space="preserve">
          <source>, which is a prvalue expression of type &lt;code&gt;bool&lt;/code&gt; that describes the constraints on some template arguments. Such an expression is &lt;code&gt;true&lt;/code&gt; if the constraints are satisfied, and &lt;code&gt;false&lt;/code&gt; otherwise:</source>
          <target state="translated">, which is a prvalue expression of type &lt;code&gt;bool&lt;/code&gt; that describes the constraints on some template arguments. Such an expression is &lt;code&gt;true&lt;/code&gt; if the constraints are satisfied, and &lt;code&gt;false&lt;/code&gt; otherwise:</target>
        </trans-unit>
        <trans-unit id="da6c794c2a184cdd257f05ef95fc858a07f20e33" translate="yes" xml:space="preserve">
          <source>, which is a runtime property: for any object or reference, there is a point of execution of a program when its lifetime begins, and there is a moment when it ends.</source>
          <target state="translated">, which is a runtime property: for any object or reference, there is a point of execution of a program when its lifetime begins, and there is a moment when it ends.</target>
        </trans-unit>
        <trans-unit id="308664c5eebc1cdebee2486f10b57c13fd73780b" translate="yes" xml:space="preserve">
          <source>, which is an integer value (of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;, always a power of 2) representing the number of bytes between successive addresses at which objects of this type can be allocated. The alignment requirement of a type can be queried with &lt;a href=&quot;alignof&quot;&gt;alignof&lt;/a&gt; or &lt;code&gt;&lt;a href=&quot;../types/alignment_of&quot;&gt;std::alignment_of&lt;/a&gt;&lt;/code&gt;. The pointer alignment function &lt;code&gt;&lt;a href=&quot;../memory/align&quot;&gt;std::align&lt;/a&gt;&lt;/code&gt; can be used to obtain a suitably-aligned pointer within some buffer, and &lt;code&gt;&lt;a href=&quot;../types/aligned_storage&quot;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt; can be used to obtain suitably-aligned storage.</source>
          <target state="translated">, which is an integer value (of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;, always a power of 2) representing the number of bytes between successive addresses at which objects of this type can be allocated. The alignment requirement of a type can be queried with &lt;a href=&quot;alignof&quot;&gt;alignof&lt;/a&gt; or &lt;code&gt;&lt;a href=&quot;../types/alignment_of&quot;&gt;std::alignment_of&lt;/a&gt;&lt;/code&gt;. The pointer alignment function &lt;code&gt;&lt;a href=&quot;../memory/align&quot;&gt;std::align&lt;/a&gt;&lt;/code&gt; can be used to obtain a suitably-aligned pointer within some buffer, and &lt;code&gt;&lt;a href=&quot;../types/aligned_storage&quot;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt; can be used to obtain suitably-aligned storage.</target>
        </trans-unit>
        <trans-unit id="ac8fec1973c720d2cc2b79b6eaf7a83f285b8fdd" translate="yes" xml:space="preserve">
          <source>, which is an internal, heap-allocated (unless the allocation is optimized out), object that contains</source>
          <target state="translated">, which is an internal, heap-allocated (unless the allocation is optimized out), object that contains</target>
        </trans-unit>
        <trans-unit id="aa02dd816a18d912a1cd473cd611fe80d8e289cd" translate="yes" xml:space="preserve">
          <source>, which is declared (for the purposes of &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;) in the smallest block scope, class scope, or namespace scope that contains the lambda expression. The closure type has the following members:</source>
          <target state="translated">, which is declared (for the purposes of &lt;a href=&quot;adl&quot;&gt;ADL&lt;/a&gt;) in the smallest block scope, class scope, or namespace scope that contains the lambda expression. The closure type has the following members:</target>
        </trans-unit>
        <trans-unit id="b43701f57f24212b774ca7428aab1aa988dd8533" translate="yes" xml:space="preserve">
          <source>, which is either an</source>
          <target state="translated">, which is either an</target>
        </trans-unit>
        <trans-unit id="e328e40383c295adec961b6d2d45d4ed48f6a556" translate="yes" xml:space="preserve">
          <source>, which is executed when a virtual function call is made. A virtual member function &lt;code&gt;vf&lt;/code&gt; of a base class &lt;code&gt;Base&lt;/code&gt; is the final overrider unless the derived class declares or inherits (through multiple inheritance) another function that overrides &lt;code&gt;vf&lt;/code&gt;.</source>
          <target state="translated">, which is executed when a virtual function call is made. A virtual member function &lt;code&gt;vf&lt;/code&gt; of a base class &lt;code&gt;Base&lt;/code&gt; is the final overrider unless the derived class declares or inherits (through multiple inheritance) another function that overrides &lt;code&gt;vf&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="64373797e6bdccc2900fb6bd88b044e7c367308b" translate="yes" xml:space="preserve">
          <source>, which is located as follows:</source>
          <target state="translated">, which is located as follows:</target>
        </trans-unit>
        <trans-unit id="9e04127a5d290ddad8114157cd7f628d389cfa76" translate="yes" xml:space="preserve">
          <source>, which is simply a brace or equals &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt; included in the member declaration, which is used if the member is omitted in the member initializer list</source>
          <target state="translated">, which is simply a brace or equals &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt; included in the member declaration, which is used if the member is omitted in the member initializer list</target>
        </trans-unit>
        <trans-unit id="000322afa06df1bfa39daf22c11db68e6bbddf18" translate="yes" xml:space="preserve">
          <source>, which is the union of the sets of potential exceptions of all immediate subexpressions of &lt;code&gt;e&lt;/code&gt; (including &lt;a href=&quot;default_arguments&quot;&gt;default argument expressions&lt;/a&gt;), combined with another set that depends on the form of &lt;code&gt;e&lt;/code&gt;, as follows:</source>
          <target state="translated">, which is the union of the sets of potential exceptions of all immediate subexpressions of &lt;code&gt;e&lt;/code&gt; (including &lt;a href=&quot;default_arguments&quot;&gt;default argument expressions&lt;/a&gt;), combined with another set that depends on the form of &lt;code&gt;e&lt;/code&gt;, as follows:</target>
        </trans-unit>
        <trans-unit id="1e720be89287f346508a4e70a491cabfdb0b9428" translate="yes" xml:space="preserve">
          <source>, which is the value of the expression &lt;code&gt;!(a &amp;lt; b) &amp;amp;&amp;amp; !(b &amp;lt; a)&lt;/code&gt;.</source>
          <target state="translated">, which is the value of the expression &lt;code&gt;!(a &amp;lt; b) &amp;amp;&amp;amp; !(b &amp;lt; a)&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1fc6f8170cef52b12409dd1f47e3c46d8413c118" translate="yes" xml:space="preserve">
          <source>, which is the value of the expression &lt;code&gt;a == b&lt;/code&gt; and</source>
          <target state="translated">, which is the value of the expression &lt;code&gt;a == b&lt;/code&gt; and</target>
        </trans-unit>
        <trans-unit id="be7ff9851bb267ad157f8c900efbe00bcb865fca" translate="yes" xml:space="preserve">
          <source>, which may be a null pointer value.</source>
          <target state="translated">, which may be a null pointer value.</target>
        </trans-unit>
        <trans-unit id="287d85e32976ed627a5ab51534bc7a51213b7fb1" translate="yes" xml:space="preserve">
          <source>, which may be used as names of objects or functions, but have special meaning in certain contexts.</source>
          <target state="translated">, which may be used as names of objects or functions, but have special meaning in certain contexts.</target>
        </trans-unit>
        <trans-unit id="1cb4530403efdf8639f4173249e66e9a39d06ce3" translate="yes" xml:space="preserve">
          <source>, which may contain</source>
          <target state="translated">, which may contain</target>
        </trans-unit>
        <trans-unit id="bd8318ca98b2f4526d8ebe77879def66daadc2b8" translate="yes" xml:space="preserve">
          <source>, which may offer behavior different than the default one.</source>
          <target state="translated">, which may offer behavior different than the default one.</target>
        </trans-unit>
        <trans-unit id="029e28852cb2b3939895f789c65417940dc10bba" translate="yes" xml:space="preserve">
          <source>, which specifies constraints on template arguments or on a function declaration.</source>
          <target state="translated">, which specifies constraints on template arguments or on a function declaration.</target>
        </trans-unit>
        <trans-unit id="1f958e2cb17501a096eb3631f712c8d64fcdfafe" translate="yes" xml:space="preserve">
          <source>, which specifies the requirements on template arguments, which can be used to select the most appropriate function overloads and template specializations.</source>
          <target state="translated">, which specifies the requirements on template arguments, which can be used to select the most appropriate function overloads and template specializations.</target>
        </trans-unit>
        <trans-unit id="4f72583c20792c738031788f10d220b9d274e512" translate="yes" xml:space="preserve">
          <source>, whose syntax is the colon character &lt;code&gt;:&lt;/code&gt;, followed by the comma-separated list of one or more member-initializers, each of which has the following syntax.</source>
          <target state="translated">, whose syntax is the colon character &lt;code&gt;:&lt;/code&gt;, followed by the comma-separated list of one or more member-initializers, each of which has the following syntax.</target>
        </trans-unit>
        <trans-unit id="0f41cef48f45f33d60f00e967ee6f56f927a4bec" translate="yes" xml:space="preserve">
          <source>, whose value is that of the corresponding template argument after it has been converted to the type of the template parameter. All such template parameters in the program of the same type with the same value denote the same template parameter object.</source>
          <target state="translated">, whose value is that of the corresponding template argument after it has been converted to the type of the template parameter. All such template parameters in the program of the same type with the same value denote the same template parameter object.</target>
        </trans-unit>
        <trans-unit id="a623fe24b336d61227dfe56f3849da03f64d8fea" translate="yes" xml:space="preserve">
          <source>, with the precision of the split determined by the &lt;code&gt;Duration&lt;/code&gt; template parameter. It also tracks whether it should be output in a 12-hour time format or a 24-hour time format. It is primarily a formatting tool.</source>
          <target state="translated">, with the precision of the split determined by the &lt;code&gt;Duration&lt;/code&gt; template parameter. It also tracks whether it should be output in a 12-hour time format or a 24-hour time format. It is primarily a formatting tool.</target>
        </trans-unit>
        <trans-unit id="2d07bf563fe5399fa08a6fcda85bece98988c145" translate="yes" xml:space="preserve">
          <source>, within the object representation of the derived class at implementation-defined offset. Empty base classes usually do not increase the size of the derived object due to &lt;a href=&quot;ebo&quot;&gt;empty base optimization&lt;/a&gt;. The constructors of base class subobjects are called by the constructor of the derived class: arguments may be provided to those constructors in the &lt;a href=&quot;constructor&quot;&gt;member initializer list&lt;/a&gt;.</source>
          <target state="translated">, within the object representation of the derived class at implementation-defined offset. Empty base classes usually do not increase the size of the derived object due to &lt;a href=&quot;ebo&quot;&gt;empty base optimization&lt;/a&gt;. The constructors of base class subobjects are called by the constructor of the derived class: arguments may be provided to those constructors in the &lt;a href=&quot;constructor&quot;&gt;member initializer list&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3bc15c8aae3e4124dd409035f32ea2fd6835efc9" translate="yes" xml:space="preserve">
          <source>-</source>
          <target state="translated">-</target>
        </trans-unit>
        <trans-unit id="a4336ceed8d3efe2c578e6109888066edca0a319" translate="yes" xml:space="preserve">
          <source>- 1, where &lt;code&gt;w&lt;/code&gt; is the template parameter also accessible as static member &lt;code&gt;word_size&lt;/code&gt;.</source>
          <target state="translated">- 1, where &lt;code&gt;w&lt;/code&gt; is the template parameter also accessible as static member &lt;code&gt;word_size&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="7b9b32382a2d64f4adc23993f67a83a48b6fd17f" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;const&lt;/code&gt; can be combined with any type specifier except itself.</source>
          <target state="translated">- &lt;code&gt;const&lt;/code&gt; can be combined with any type specifier except itself.</target>
        </trans-unit>
        <trans-unit id="2847ec22f790848c0aca176a96102e3d6dc93d42" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;long&lt;/code&gt; can be combined with &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">- &lt;code&gt;long&lt;/code&gt; can be combined with &lt;code&gt;double&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="ddd1417276dcd1c511e9d5d1922d6289778b7bcb" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;long&lt;/code&gt; can be combined with &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">- &lt;code&gt;long&lt;/code&gt; can be combined with &lt;code&gt;long&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="eb99fe45cb717eac4bccfdbbdb634041b3effabc" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;short&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt; can be combined with &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">- &lt;code&gt;short&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt; can be combined with &lt;code&gt;int&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="6ffaea3a7ffc0329a5096c785b640ad2b7e8717a" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;signed&lt;/code&gt; or &lt;code&gt;unsigned&lt;/code&gt; can be combined with &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, or &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">- &lt;code&gt;signed&lt;/code&gt; or &lt;code&gt;unsigned&lt;/code&gt; can be combined with &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, or &lt;code&gt;int&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="576490ef4a48b57a32f8d7fdbe38c3198cc55eb1" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;volatile&lt;/code&gt; can be combined with any type specifier except itself.</source>
          <target state="translated">- &lt;code&gt;volatile&lt;/code&gt; can be combined with any type specifier except itself.</target>
        </trans-unit>
        <trans-unit id="eba7eb91f376e21cde68c0308770ad71a273187c" translate="yes" xml:space="preserve">
          <source>- an object whose type is const-qualified, or a non-mutable subobject of a const object. Such object cannot be modified: attempt to do so directly is a compile-time error, and attempt to do so indirectly (e.g., by modifying the const object through a reference or pointer to non-const type) results in undefined behavior.</source>
          <target state="translated">- an object whose type is const-qualified, or a non-mutable subobject of a const object. Such object cannot be modified: attempt to do so directly is a compile-time error, and attempt to do so indirectly (e.g., by modifying the const object through a reference or pointer to non-const type) results in undefined behavior.</target>
        </trans-unit>
        <trans-unit id="3232722a8da467eafefa8b5ee66058c1c5461adc" translate="yes" xml:space="preserve">
          <source>- an object whose type is const-volatile-qualified, a non-mutable subobject of a const volatile object, a const subobject of a volatile object, or a non-mutable volatile subobject of a const object. Behaves as both a const object and as a volatile object.</source>
          <target state="translated">- an object whose type is const-volatile-qualified, a non-mutable subobject of a const volatile object, a const subobject of a volatile object, or a non-mutable volatile subobject of a const object. Behaves as both a const object and as a volatile object.</target>
        </trans-unit>
        <trans-unit id="1f8564a20a2d743d92088677a3228bce35641bab" translate="yes" xml:space="preserve">
          <source>- an object whose type is volatile-qualified, or a subobject of a volatile object, or a mutable subobject of a const-volatile object. Every access (read or write operation, member function call, etc.) made through a glvalue expression of volatile-qualified type is treated as a visible side-effect for the &lt;a href=&quot;as_if&quot;&gt;purposes of optimization&lt;/a&gt; (that is, within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is &lt;a href=&quot;eval_order&quot;&gt;sequenced-before&lt;/a&gt; or sequenced-after the volatile access. This makes volatile objects suitable for communication with a &lt;a href=&quot;../utility/program/signal&quot;&gt;signal handler&lt;/a&gt;, but not with another thread of execution, see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;). Any attempt to refer to a volatile object through a non-volatile &lt;a href=&quot;value_category#glvalue&quot;&gt;glvalue&lt;/a&gt; (e.g. through a reference or pointer to non-volatile type) results in undefined behavior.</source>
          <target state="translated">- an object whose type is volatile-qualified, or a subobject of a volatile object, or a mutable subobject of a const-volatile object. Every access (read or write operation, member function call, etc.) made through a glvalue expression of volatile-qualified type is treated as a visible side-effect for the &lt;a href=&quot;as_if&quot;&gt;purposes of optimization&lt;/a&gt; (that is, within a single thread of execution, volatile accesses cannot be optimized out or reordered with another visible side effect that is &lt;a href=&quot;eval_order&quot;&gt;sequenced-before&lt;/a&gt; or sequenced-after the volatile access. This makes volatile objects suitable for communication with a &lt;a href=&quot;../utility/program/signal&quot;&gt;signal handler&lt;/a&gt;, but not with another thread of execution, see &lt;code&gt;&lt;a href=&quot;../atomic/memory_order&quot;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;). Any attempt to refer to a volatile object through a non-volatile &lt;a href=&quot;value_category#glvalue&quot;&gt;glvalue&lt;/a&gt; (e.g. through a reference or pointer to non-volatile type) results in undefined behavior.</target>
        </trans-unit>
        <trans-unit id="2919d35c8c0c8fd4f1f797b7334ccdb788907ee3" translate="yes" xml:space="preserve">
          <source>- exp⎛</source>
          <target state="translated">- exp⎛</target>
        </trans-unit>
        <trans-unit id="c940ce956118383e416a1601130e99756ed05b43" translate="yes" xml:space="preserve">
          <source>- functions present in C++03</source>
          <target state="translated">- functions present in C++03</target>
        </trans-unit>
        <trans-unit id="7906ce41573cab6543e3140370d5e98007891dda" translate="yes" xml:space="preserve">
          <source>- functions present since C++11</source>
          <target state="translated">- functions present since C++11</target>
        </trans-unit>
        <trans-unit id="6d3d55bd1e73d6e43677a1766ea509dac0af123b" translate="yes" xml:space="preserve">
          <source>- functions present since C++17</source>
          <target state="translated">- functions present since C++17</target>
        </trans-unit>
        <trans-unit id="0da86a85d2cdb819f6240473d23f2b7b9f494991" translate="yes" xml:space="preserve">
          <source>- functions present since C++20</source>
          <target state="translated">- functions present since C++20</target>
        </trans-unit>
        <trans-unit id="99791cecb7ea459e07b3330ef83e74d73f51d083" translate="yes" xml:space="preserve">
          <source>- only one thread can own the mutex.</source>
          <target state="translated">- only one thread can own the mutex.</target>
        </trans-unit>
        <trans-unit id="7a2754b1410249b4062b59f6859f4c66fe3d9255" translate="yes" xml:space="preserve">
          <source>- several threads can share ownership of the same mutex.</source>
          <target state="translated">- several threads can share ownership of the same mutex.</target>
        </trans-unit>
        <trans-unit id="6371f49886e2ecee82d80daec8d4ac9997d10f9d" translate="yes" xml:space="preserve">
          <source>- the behavior of the program varies between implementations and the conforming implementation is not required to document the effects of each behavior. For example, &lt;a href=&quot;eval_order&quot;&gt;order of evaluation&lt;/a&gt;, whether identical &lt;a href=&quot;string_literal&quot;&gt;string literals&lt;/a&gt; are distinct, the amount of array allocation overhead, etc. Each unspecified behavior results in one of a set of valid results.</source>
          <target state="translated">- the behavior of the program varies between implementations and the conforming implementation is not required to document the effects of each behavior. For example, &lt;a href=&quot;eval_order&quot;&gt;order of evaluation&lt;/a&gt;, whether identical &lt;a href=&quot;string_literal&quot;&gt;string literals&lt;/a&gt; are distinct, the amount of array allocation overhead, etc. Each unspecified behavior results in one of a set of valid results.</target>
        </trans-unit>
        <trans-unit id="9d4b87d94ff8e474e2ee707fafb35dfc0aa7cb96" translate="yes" xml:space="preserve">
          <source>- the behavior of the program varies between implementations, and the conforming implementation must document the effects of each behavior. For example, the type of &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; or the number of bits in a byte, or the text of &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc::what&lt;/a&gt;&lt;/code&gt;. A subset of implementation-defined behavior is</source>
          <target state="translated">- the behavior of the program varies between implementations, and the conforming implementation must document the effects of each behavior. For example, the type of &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; or the number of bits in a byte, or the text of &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc::what&lt;/a&gt;&lt;/code&gt;. A subset of implementation-defined behavior is</target>
        </trans-unit>
        <trans-unit id="54a9ff8e51eb516877a84661890402fe92797ca4" translate="yes" xml:space="preserve">
          <source>- the program has semantic errors which may not be diagnosable in general case (e.g. violations of the &lt;a href=&quot;definition&quot;&gt;ODR&lt;/a&gt; or other errors that are only detectable at link time). The behavior is undefined if such program is executed.</source>
          <target state="translated">- the program has semantic errors which may not be diagnosable in general case (e.g. violations of the &lt;a href=&quot;definition&quot;&gt;ODR&lt;/a&gt; or other errors that are only detectable at link time). The behavior is undefined if such program is executed.</target>
        </trans-unit>
        <trans-unit id="08e246b692e76d73ca7c023fcdfdd31e10906c47" translate="yes" xml:space="preserve">
          <source>- the program has syntax errors or diagnosable semantic errors. A conforming C++ compiler is required to issue a diagnostic, even if it defines a language extension that assigns meaning to such code (such as with variable-length arrays). The text of the standard uses</source>
          <target state="translated">- the program has syntax errors or diagnosable semantic errors. A conforming C++ compiler is required to issue a diagnostic, even if it defines a language extension that assigns meaning to such code (such as with variable-length arrays). The text of the standard uses</target>
        </trans-unit>
        <trans-unit id="96847337e2605434130bd96f5f2d7ca493a59146" translate="yes" xml:space="preserve">
          <source>- there are no restrictions on the behavior of the program. Examples of undefined behavior are memory accesses outside of array bounds, signed integer overflow, null pointer dereference, modification of the same scalar &lt;a href=&quot;eval_order&quot;&gt;more than once&lt;/a&gt; in an expression without sequence points, access to an object through a pointer of a different type, etc. Compilers are not required to diagnose undefined behavior (although many simple situations are diagnosed), and the compiled program is not required to do anything meaningful.</source>
          <target state="translated">- there are no restrictions on the behavior of the program. Examples of undefined behavior are memory accesses outside of array bounds, signed integer overflow, null pointer dereference, modification of the same scalar &lt;a href=&quot;eval_order&quot;&gt;more than once&lt;/a&gt; in an expression without sequence points, access to an object through a pointer of a different type, etc. Compilers are not required to diagnose undefined behavior (although many simple situations are diagnosed), and the compiled program is not required to do anything meaningful.</target>
        </trans-unit>
        <trans-unit id="8b26c9a79c28a8a911bea50389b94575ee0cd149" translate="yes" xml:space="preserve">
          <source>-&amp;lambda;x</source>
          <target state="translated">-&amp;lambda;x</target>
        </trans-unit>
        <trans-unit id="0e4772b4613b2aef5d0171a9802545e69344ce98" translate="yes" xml:space="preserve">
          <source>-&amp;nu;(x)</source>
          <target state="translated">-&amp;nu;(x)</target>
        </trans-unit>
        <trans-unit id="827d699f2fb8a8306b953f39401bfde060b0ee01" translate="yes" xml:space="preserve">
          <source>-&amp;nu;(x)-I</source>
          <target state="translated">-&amp;nu;(x)-I</target>
        </trans-unit>
        <trans-unit id="65ef7566b5f6f88816bf4dff4eca2aad0d4a27b9" translate="yes" xml:space="preserve">
          <source>-- If the function throws an exception, the program is in a valid state. It may require cleanup, but all invariants are intact.</source>
          <target state="translated">-- If the function throws an exception, the program is in a valid state. It may require cleanup, but all invariants are intact.</target>
        </trans-unit>
        <trans-unit id="a7ab763b441f1edb8d5b2f3b8f308d6c7693d7af" translate="yes" xml:space="preserve">
          <source>-- If the function throws an exception, the program may not be in a valid state: resource leaks, memory corruption, or other invariant-destroying errors may have occurred.</source>
          <target state="translated">-- If the function throws an exception, the program may not be in a valid state: resource leaks, memory corruption, or other invariant-destroying errors may have occurred.</target>
        </trans-unit>
        <trans-unit id="b04e4d1ca7665594e07914e6cef581b7a8fd2c42" translate="yes" xml:space="preserve">
          <source>-- If the function throws an exception, the state of the program is rolled back to the state just before the function call. (for example, &lt;code&gt;&lt;a href=&quot;../container/vector/push_back&quot;&gt;std::vector::push_back&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">-- If the function throws an exception, the state of the program is rolled back to the state just before the function call. (for example, &lt;code&gt;&lt;a href=&quot;../container/vector/push_back&quot;&gt;std::vector::push_back&lt;/a&gt;&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="06e2441d737001077de7beeb854373974e0c6ffc" translate="yes" xml:space="preserve">
          <source>-- functions, &lt;a href=&quot;../../language/lambda&quot;&gt;lambda expressions&lt;/a&gt;, &lt;a href=&quot;bind&quot;&gt;bind expressions&lt;/a&gt;, or other function objects, as well as pointers to member functions and pointers to data members.</source>
          <target state="translated">-- functions, &lt;a href=&quot;../../language/lambda&quot;&gt;lambda expressions&lt;/a&gt;, &lt;a href=&quot;bind&quot;&gt;bind expressions&lt;/a&gt;, or other function objects, as well as pointers to member functions and pointers to data members.</target>
        </trans-unit>
        <trans-unit id="4150b07cf796f5ca8b1e0f5a756454fdce0f7485" translate="yes" xml:space="preserve">
          <source>-- the function never throws exceptions. Nothrow (errors are reported by other means or concealed) is expected of &lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt; and other functions that may be called during stack unwinding. The &lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt; are &lt;a href=&quot;noexcept&quot;&gt;noexcept&lt;/a&gt; by default.(since C++11) Nofail (the function always succeeds) is expected of swaps, &lt;a href=&quot;move_constructor&quot;&gt;move constructors&lt;/a&gt;, and other functions used by those that provide strong exception guarantee.</source>
          <target state="translated">-- the function never throws exceptions. Nothrow (errors are reported by other means or concealed) is expected of &lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt; and other functions that may be called during stack unwinding. The &lt;a href=&quot;destructor&quot;&gt;destructors&lt;/a&gt; are &lt;a href=&quot;noexcept&quot;&gt;noexcept&lt;/a&gt; by default.(since C++11) Nofail (the function always succeeds) is expected of swaps, &lt;a href=&quot;move_constructor&quot;&gt;move constructors&lt;/a&gt;, and other functions used by those that provide strong exception guarantee.</target>
        </trans-unit>
        <trans-unit id="926319d393c4733323ef07d184a38740370f5f0a" translate="yes" xml:space="preserve">
          <source>--first</source>
          <target state="translated">--first</target>
        </trans-unit>
        <trans-unit id="964bf34acb73672e07be0eb52ad97ff71a52d020" translate="yes" xml:space="preserve">
          <source>-1 (e.g. &lt;b&gt;-127&lt;/b&gt; to &lt;b&gt;127&lt;/b&gt; for a signed 8-bit type), which corresponds to the limits of &lt;a href=&quot;https://en.wikipedia.org/wiki/One's_complement&quot;&gt;one's complement&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Signed_number_representations#Sign-and-magnitude_method&quot;&gt;sign-and-magnitude&lt;/a&gt;.</source>
          <target state="translated">-1 (e.g. &lt;b&gt;-127&lt;/b&gt; to &lt;b&gt;127&lt;/b&gt; for a signed 8-bit type), which corresponds to the limits of &lt;a href=&quot;https://en.wikipedia.org/wiki/One's_complement&quot;&gt;one's complement&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Signed_number_representations#Sign-and-magnitude_method&quot;&gt;sign-and-magnitude&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="55bf93f5c94cdaac97581707fc16101f3c6cbe01" translate="yes" xml:space="preserve">
          <source>-1 (e.g. &lt;b&gt;-128&lt;/b&gt; to &lt;b&gt;127&lt;/b&gt; for a signed 8-bit type).</source>
          <target state="translated">-1 (e.g. &lt;b&gt;-128&lt;/b&gt; to &lt;b&gt;127&lt;/b&gt; for a signed 8-bit type).</target>
        </trans-unit>
        <trans-unit id="eff318a0d70ba96ea8f1118755352fee3f6bee6a" translate="yes" xml:space="preserve">
          <source>-1 can be expressed as &lt;code&gt;&lt;a href=&quot;expm1&quot;&gt;std::expm1&lt;/a&gt;(n * std::log1p(x))&lt;/code&gt;. These functions also simplify writing accurate inverse hyperbolic functions.</source>
          <target state="translated">-1 can be expressed as &lt;code&gt;&lt;a href=&quot;expm1&quot;&gt;std::expm1&lt;/a&gt;(n * std::log1p(x))&lt;/code&gt;. These functions also simplify writing accurate inverse hyperbolic functions.</target>
        </trans-unit>
        <trans-unit id="4ca468678aeb09e4a26a9727802712a021b8a6c4" translate="yes" xml:space="preserve">
          <source>-1 can be expressed as &lt;code&gt;std::expm1(n * &lt;a href=&quot;log1p&quot;&gt;std::log1p&lt;/a&gt;(x))&lt;/code&gt;. These functions also simplify writing accurate inverse hyperbolic functions.</source>
          <target state="translated">-1 can be expressed as &lt;code&gt;std::expm1(n * &lt;a href=&quot;log1p&quot;&gt;std::log1p&lt;/a&gt;(x))&lt;/code&gt;. These functions also simplify writing accurate inverse hyperbolic functions.</target>
        </trans-unit>
        <trans-unit id="3305ff5f9e6888f00e265722318e8540b7b5945e" translate="yes" xml:space="preserve">
          <source>-1 is returned.</source>
          <target state="translated">-1 is returned.</target>
        </trans-unit>
        <trans-unit id="558c0c77a7afb004851ae0cccae6c341fa270324" translate="yes" xml:space="preserve">
          <source>-1)</source>
          <target state="translated">-1)</target>
        </trans-unit>
        <trans-unit id="c0f87beda0457c89dd846051b4591a559785acd2" translate="yes" xml:space="preserve">
          <source>-1) to +2N-1</source>
          <target state="translated">-1) to +2N-1</target>
        </trans-unit>
        <trans-unit id="4f55649c232bbd4064cb4ba5d1a946b7eaa807bb" translate="yes" xml:space="preserve">
          <source>-1).</source>
          <target state="translated">-1).</target>
        </trans-unit>
        <trans-unit id="5d41a61a529e2e53d51e1bb141b21f94bacc08b1" translate="yes" xml:space="preserve">
          <source>-1)n</source>
          <target state="translated">-1)n</target>
        </trans-unit>
        <trans-unit id="7648386ae95fb14d2c3ccb66aca4129d8a91f812" translate="yes" xml:space="preserve">
          <source>-12x</source>
          <target state="translated">-12x</target>
        </trans-unit>
        <trans-unit id="4c3a38ce6412a064b87c0e8d475d26311c32684a" translate="yes" xml:space="preserve">
          <source>-18x+6]</source>
          <target state="translated">-18x+6]</target>
        </trans-unit>
        <trans-unit id="3d81ef27eba95e8237b3f30072bc5c32bf8c0c35" translate="yes" xml:space="preserve">
          <source>-2</source>
          <target state="translated">-2</target>
        </trans-unit>
        <trans-unit id="7858667ff36b1667de7ebaabf43d4818bfcd6987" translate="yes" xml:space="preserve">
          <source>-2(m+2)x+(m+1)(m+2)]</source>
          <target state="translated">-2(m+2)x+(m+1)(m+2)]</target>
        </trans-unit>
        <trans-unit id="e8f4bd028e48e84aaa2c6cace54d91214b8889d9" translate="yes" xml:space="preserve">
          <source>-2xu,</source>
          <target state="translated">-2xu,</target>
        </trans-unit>
        <trans-unit id="e42c0f8f8117d694eea5dce236d7fbc2631d8f96" translate="yes" xml:space="preserve">
          <source>-3(m+2)(m+3)x+(m+1)(m+2)(m+3)]</source>
          <target state="translated">-3(m+2)(m+3)x+(m+1)(m+2)(m+3)]</target>
        </trans-unit>
        <trans-unit id="7eb685801ef362815e7fadd5e14fef4038e2da09" translate="yes" xml:space="preserve">
          <source>-3(m+3)x2</source>
          <target state="translated">-3(m+3)x2</target>
        </trans-unit>
        <trans-unit id="7a4261156cf5bea7d117a8a9dd1c81f94a9798df" translate="yes" xml:space="preserve">
          <source>-30x2</source>
          <target state="translated">-30x2</target>
        </trans-unit>
        <trans-unit id="2c4173d30f5e0de30f5dbad069af8e82c9e2bcfa" translate="yes" xml:space="preserve">
          <source>-3x)</source>
          <target state="translated">-3x)</target>
        </trans-unit>
        <trans-unit id="066b9f00c53f4916eebee1a988e22100ee532740" translate="yes" xml:space="preserve">
          <source>-48x2</source>
          <target state="translated">-48x2</target>
        </trans-unit>
        <trans-unit id="b42d75c997810207f54720504e32c347376623e3" translate="yes" xml:space="preserve">
          <source>-4x+2]</source>
          <target state="translated">-4x+2]</target>
        </trans-unit>
        <trans-unit id="4dc10545823b0c405ba13faabc70005a19de0e8e" translate="yes" xml:space="preserve">
          <source>-9x2</source>
          <target state="translated">-9x2</target>
        </trans-unit>
        <trans-unit id="5636eb36672d93a1ab3b7159329116f73f0ebf57" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;*a, *b&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;*a, *b&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="40498d3dd7712f5a6128f27271db2e29885cb7eb" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;F&amp;gt; and each type in &lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;Args&amp;gt;...&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;F&amp;gt; and each type in &lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;Args&amp;gt;...&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fecec645f7971101b53d8669866eccad99dc038a" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;F&amp;gt;&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt; and &lt;a href=&quot;../../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;F&amp;gt;&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/callable&quot;&gt;Callable&lt;/a&gt; and &lt;a href=&quot;../../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c7f6dcafc5be21934457201a396af005ade4d97a" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;&lt;a href=&quot;../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;URBG&amp;gt;&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt; and its return type must be convertible to &lt;code&gt;Distance&lt;/code&gt;</source>
          <target state="translated">-&lt;code&gt;&lt;a href=&quot;../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;URBG&amp;gt;&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt; and its return type must be convertible to &lt;code&gt;Distance&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ea171079f03162bb486f068277f029b5a789a17" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;&lt;a href=&quot;../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;URBG&amp;gt;&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;&lt;a href=&quot;../types/remove_reference&quot;&gt;std::remove_reference_t&lt;/a&gt;&amp;lt;URBG&amp;gt;&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0930bd8af8a83b23c26a066e11e38de8b53be31f" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Alloc&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Alloc&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2bccd9ca6dcbea401962e2330166d4cb203a7b3d" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Alloc&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Alloc&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="de5854bca1222ea7f5362676ffdaf77c1363e4f7" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Alloc&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Alloc&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="73061bd058f7ddaeb7bd69505900416d74ef5a33" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Allocator&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Allocator&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7f291d54a6e24036c29905a9a7f7f44216c8cc9b" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;BidirIt1, BidirIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;BidirIt1, BidirIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="aea34923b4c0fab6aee76f0935e240fd11235c3f" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;BidirIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;BidirIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="352b7d375a3a52cf097f92f86128ed7ceac1e7f4" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;BidirIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;BidirIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bcada75ee7dd813667a4f15f0db781fcb12b9764" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;BidirIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; and &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;BidirIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; and &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="807f7ff95df8cb59639c63dd6c525f74ae2f1c2c" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;BinaryPredicate&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/binarypredicate&quot;&gt;BinaryPredicate&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;BinaryPredicate&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/binarypredicate&quot;&gt;BinaryPredicate&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ac696fc5192bdedc2a30c9313187cd550e383504" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;CharT&lt;/code&gt; must be one of the encoded character types (&lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar_t&lt;/code&gt;, &lt;code&gt;char16_t&lt;/code&gt; and &lt;code&gt;char32_t&lt;/code&gt;)</source>
          <target state="translated">-&lt;code&gt;CharT&lt;/code&gt; must be one of the encoded character types (&lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar_t&lt;/code&gt;, &lt;code&gt;char16_t&lt;/code&gt; and &lt;code&gt;char32_t&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="94402a6563ecbf314b4e516b46bab82b48dd3a66" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Compare&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/compare&quot;&gt;Compare&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Compare&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/compare&quot;&gt;Compare&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d78627b89de900fdc856aaf30a8cd733770c90ca" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Compare&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/binarypredicate&quot;&gt;BinaryPredicate&lt;/a&gt;. it is not required to satisfy &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;</source>
          <target state="translated">-&lt;code&gt;Compare&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/binarypredicate&quot;&gt;BinaryPredicate&lt;/a&gt;. it is not required to satisfy &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="98a6dcecde6f245c2fd36036c0c1049b92cb43b2" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Compare&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Compare&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f18c96f054e59160f5dfa811024cb26ee3f0d160" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Container&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/container&quot;&gt;Container&lt;/a&gt;. The constructors (5-10) are only defined if &lt;code&gt;Container&lt;/code&gt; meets the requirements of &lt;a href=&quot;../../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;</source>
          <target state="translated">-&lt;code&gt;Container&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/container&quot;&gt;Container&lt;/a&gt;. The constructors (5-10) are only defined if &lt;code&gt;Container&lt;/code&gt; meets the requirements of &lt;a href=&quot;../../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a69db119d940bfce4f5f380b682751285a34487a" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Deleter&lt;/code&gt; must be &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; or lvalue reference to a &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; or lvalue reference to function, callable with an argument of type &lt;code&gt;unique_ptr&amp;lt;T, Deleter&amp;gt;::pointer&lt;/code&gt;</source>
          <target state="translated">-&lt;code&gt;Deleter&lt;/code&gt; must be &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; or lvalue reference to a &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; or lvalue reference to function, callable with an argument of type &lt;code&gt;unique_ptr&amp;lt;T, Deleter&amp;gt;::pointer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e70e82e6dda87d2155d8ab72bbb3d9247682368e" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Distance&lt;/code&gt; must be an integer type</source>
          <target state="translated">-&lt;code&gt;Distance&lt;/code&gt; must be an integer type</target>
        </trans-unit>
        <trans-unit id="77f88dca9c046083166574ccf73198cd7340488a" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Engine&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Engine&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c23246d8bf61989d76c0da12759b8a8e7d8574eb" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;F&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable&lt;/a&gt; and &lt;a href=&quot;../../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;F&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable&lt;/a&gt; and &lt;a href=&quot;../../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7dd2b58eb4e7045d8d99215de256d7aef81fc3fa" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;F&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;F&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/callable&quot;&gt;Callable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d994eb206a25c90231782418b245946f08fa85bd" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt, ForwardIt1, ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt, ForwardIt1, ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e1bd1ea7c0fda695c19e4db23840e945ce0bf7c9" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1, ForwardIt2, ForwardIt3&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt1, ForwardIt2, ForwardIt3&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="68dd35b532f509ffe01983d853c0c2eab05a4290" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1, ForwardIt2, ForwardIt3&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. ForwardIt1's value type must be CopyAssignable, writable to ForwardIt2 and ForwardIt3, and convertible to UnaryPredicate's argument type</source>
          <target state="translated">-&lt;code&gt;ForwardIt1, ForwardIt2, ForwardIt3&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. ForwardIt1's value type must be CopyAssignable, writable to ForwardIt2 and ForwardIt3, and convertible to UnaryPredicate's argument type</target>
        </trans-unit>
        <trans-unit id="ada87aa787b71cc2e02d1770142f5fc580f65b3e" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1, ForwardIt2&lt;/code&gt; must have the same value type.</source>
          <target state="translated">-&lt;code&gt;ForwardIt1, ForwardIt2&lt;/code&gt; must have the same value type.</target>
        </trans-unit>
        <trans-unit id="5854acf68af525a7709bab857cb422865ed3fb0c" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1, ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt1, ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="558558ea1b522a69e506feb6b38db3a6a0e8057b" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1, ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. The results of &lt;code&gt;*first&lt;/code&gt;, &lt;code&gt;*first - *first&lt;/code&gt; (for (2)) and &lt;code&gt;op(*first, *first)&lt;/code&gt; (for (4)) must be writable to &lt;code&gt;ForwardIt2&lt;/code&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt1, ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. The results of &lt;code&gt;*first&lt;/code&gt;, &lt;code&gt;*first - *first&lt;/code&gt; (for (2)) and &lt;code&gt;op(*first, *first)&lt;/code&gt; (for (4)) must be writable to &lt;code&gt;ForwardIt2&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="57f9a1072a4427286a5810a98d5a75bb50f2e72c" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4042174f67795966632c82096cdb836e260992ca" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. and, if &lt;code&gt;init&lt;/code&gt; is not provided, ForwardIt1's value_type must be &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;code&gt;binary_op(*first, *first)&lt;/code&gt; must be convertible to ForwardIt1's value type</source>
          <target state="translated">-&lt;code&gt;ForwardIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. and, if &lt;code&gt;init&lt;/code&gt; is not provided, ForwardIt1's value_type must be &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;code&gt;binary_op(*first, *first)&lt;/code&gt; must be convertible to ForwardIt1's value type</target>
        </trans-unit>
        <trans-unit id="3c2bfdd909d2b31b703744895dfced12503be221" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. and, if &lt;code&gt;init&lt;/code&gt; is not provided, ForwardIt1's value_type must be &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;code&gt;binary_op(unary_op(*first), unary_op(*first))&lt;/code&gt; must be convertible to ForwardIt1's value type</source>
          <target state="translated">-&lt;code&gt;ForwardIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. and, if &lt;code&gt;init&lt;/code&gt; is not provided, ForwardIt1's value_type must be &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt; and &lt;code&gt;binary_op(unary_op(*first), unary_op(*first))&lt;/code&gt; must be convertible to ForwardIt1's value type</target>
        </trans-unit>
        <trans-unit id="e16db2fba796f3c6bc495aa578916da6c5466e81" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d4514b9fd4daa3b96de1a07b21e2486d0796696a" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt&lt;/code&gt; must meet either the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; or the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; for overloads (3-4).</source>
          <target state="translated">-&lt;code&gt;ForwardIt&lt;/code&gt; must meet either the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; or the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; for overloads (3-4).</target>
        </trans-unit>
        <trans-unit id="8737b3038ab9000bd7a521fe125db69e7b683cb3" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a3c2252c5e0476bd4e3cd7eba9a30b71d0c515b6" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8edebf5383b45353d003c7a224bc1eb16ab3225b" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. and its value type must be convertible to UnaryPredicate's argument type</source>
          <target state="translated">-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. and its value type must be convertible to UnaryPredicate's argument type</target>
        </trans-unit>
        <trans-unit id="3f0ae4551c9a9f93e6cbc68d50c163e8f20bbe72" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; and &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; and &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ebc643765a3de250d92444d8ec1295da6e3c1215" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; and &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. However, the operation is more efficient if &lt;code&gt;ForwardIt&lt;/code&gt; also satisfies the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;</source>
          <target state="translated">-&lt;code&gt;ForwardIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/valueswappable&quot;&gt;ValueSwappable&lt;/a&gt; and &lt;a href=&quot;../named_req/forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt;. However, the operation is more efficient if &lt;code&gt;ForwardIt&lt;/code&gt; also satisfies the requirements of &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="589400aa91f9e35141dd6660db44efa69bf42b17" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Function, Args&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Function, Args&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cdf35f3b772d041a7206e063ee6a211ffa168311" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Generator&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;Generator&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/uniformrandombitgenerator&quot;&gt;UniformRandomBitGenerator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fbe7344324238d3f491a016cd9e1a378b357d5a5" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt, InputIt1, InputIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt, InputIt1, InputIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="30b78694d2eaa0d56218ca4ab8195c4066d4a2be" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt1, InputIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt1, InputIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="be4ccbb61cb5e19859e76fdbbe6ebb3fe4302192" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt1&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c011b79931e263c5d10acc6020e09153df34fc44" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt2&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7a8d16a0d768b6c3acdc418bb44afb0d43da29e3" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2b4342ddb2f1638af39d5b3c385b42ddbab63e3e" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9d240fbf34eb1d52ee5ded5c00a384af3a73f110" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</source>
          <target state="translated">-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8c8e65f6f01ab8c9daa57fb2e7db29bbcaef4360" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;. InputIt's value type must be &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt; and constructible from the type of &lt;code&gt;*first&lt;/code&gt;</source>
          <target state="translated">-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;. InputIt's value type must be &lt;a href=&quot;../named_req/moveassignable&quot;&gt;MoveAssignable&lt;/a&gt; and constructible from the type of &lt;code&gt;*first&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="baee038f04322c1a84b3a36067d538b1b0d5ef0c" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;. The operation is more efficient if &lt;code&gt;InputIt&lt;/code&gt; additionally meets the requirements of &lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;</source>
          <target state="translated">-&lt;code&gt;InputIt&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../named_req/inputiterator&quot;&gt;LegacyInputIterator&lt;/a&gt;. The operation is more efficient if &lt;code&gt;InputIt&lt;/code&gt; additionally meets the requirements of &lt;a href=&quot;../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="419ec8df85caf452084df24b9de678dedfbc50bf" translate="yes" xml:space="preserve">
          <source>-&lt;code&gt;Key&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt; in order to use overloads (1-2).</source>
          <target state="translated">-&lt;code&gt;Key&lt;/code&gt; must meet the requirements of &lt;a href=&quot;../../named_req/equalitycomparable&quot;&gt;EqualityComparable&lt;/a&gt; in order to use overloads (1-2).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
