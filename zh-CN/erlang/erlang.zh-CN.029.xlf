<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="887d14189b02ef3efe48b0dd7ea45040d5fdd376" translate="yes" xml:space="preserve">
          <source>Sequential tracing. The sequential trace token is propagated as usual, but no sequential trace messages are generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3a1d3f348f6e54ac99c355d7e8d7a99531227d" translate="yes" xml:space="preserve">
          <source>Server :: &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; | pid(),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947a6b42e35e6379a3a871ac25a5cc35eea47ac4" translate="yes" xml:space="preserve">
          <source>Server Directed Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe47b0a641720e6d3506a1b8c3fa57c4b588d5e" translate="yes" xml:space="preserve">
          <source>Server host key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7318b76018cff441c5791590e6c5344ff5bc39a" translate="yes" xml:space="preserve">
          <source>Server specification to use when addressing a &lt;code&gt;gen_statem&lt;/code&gt; server. See &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea8b115537d60c0612335af6a2297305218af54" translate="yes" xml:space="preserve">
          <source>Server start happens either when &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; returns or when &lt;code&gt;&lt;a href=&quot;#enter_loop-4&quot;&gt;enter_loop/4-6&lt;/a&gt;&lt;/code&gt; is called. Code change happens when &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;Module:code_change/4&lt;/a&gt;&lt;/code&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8e2636f54dfc7cabd3623ccbd882479778dea9" translate="yes" xml:space="preserve">
          <source>Server-Initiated Re-Auth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82fbe1fe2cd50ba3acc1673f098d550a5d21fc1" translate="yes" xml:space="preserve">
          <source>Server_or_Actions :: &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; | pid() | [&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;]) -&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5206f4124f60fdd9a2690b8553f9a39ef96857" translate="yes" xml:space="preserve">
          <source>Servers port number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc08bd865f52ee5ced6ffaf01854d93b1e04a57" translate="yes" xml:space="preserve">
          <source>Service Pack 4 or later must be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5397f6342a9bc113dc40386582fe49f64c070de6" translate="yes" xml:space="preserve">
          <source>Service options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157383d93308c0e9d76a43e40db97f98bfd6756d" translate="yes" xml:space="preserve">
          <source>Services started as &lt;code&gt;stand_alone&lt;/code&gt; are not listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac29b321611cba90b0d60f830609e67913f5c89" translate="yes" xml:space="preserve">
          <source>Services to be configured for startup at application startup are to be put into the Erlang node configuration file on the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b80725e2cdf98d03e3544d8e834835b10673511" translate="yes" xml:space="preserve">
          <source>Session Termination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2189dd0e9404a2caed342278528b49ca88aef0f4" translate="yes" xml:space="preserve">
          <source>Session data is by default kept by the SSL application in a memory storage, hence session data is lost at application restart or takeover. Users can define their own callback module to handle session data storage if persistent data storage is required. Session data is also invalidated after 24 hours from it was saved, for security reasons. The amount of time the session data is to be saved can be configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44c233f663706896d30f9765750b2547461a634" translate="yes" xml:space="preserve">
          <source>Session state is the responsibility of the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a09b63aa8aef12610e5097f5dcbecb6ec0b6397" translate="yes" xml:space="preserve">
          <source>Session-Binding AVP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5b951f326d46a73f615ecb89203802d45c7d34" translate="yes" xml:space="preserve">
          <source>Session-Binding AVP Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76db6dd6136e7be7b5da291aa7c562b11f178550" translate="yes" xml:space="preserve">
          <source>Session-Id AVP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ca0ce02888b561d968cd54e3873df3a762e039" translate="yes" xml:space="preserve">
          <source>Session-Server-Failover AVP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91c41d0abfc87527176ac558dba342c0c601933" translate="yes" xml:space="preserve">
          <source>Session-Server-Failover AVP Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b80be07c4be1b4c9104178d53867c1782237c3" translate="yes" xml:space="preserve">
          <source>Session-Termination-Answer</source>
          <target state="translated">Session-Termination-Answer</target>
        </trans-unit>
        <trans-unit id="74c5a3349930ea180e9bd3a286a7f55ec0def5f8" translate="yes" xml:space="preserve">
          <source>Session-Termination-Request</source>
          <target state="translated">Session-Termination-Request</target>
        </trans-unit>
        <trans-unit id="bea31b7972c1044f4e21c4ecd2c6baeb0c1dd29c" translate="yes" xml:space="preserve">
          <source>Session-Timeout AVP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65554231afb0cf98bd9fcd70eaca9a432abba10e" translate="yes" xml:space="preserve">
          <source>Session-related messages and AVPs are defined in provided dictionaries. Their proper use is the user's responsibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee903ecf91ea851dcf9b23255683d465f969e4b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;ERL_TOP&lt;/code&gt; to where you unpacked the source distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cdff9c23032ddcb6335b343ed2c5050c34846b" translate="yes" xml:space="preserve">
          <source>Set A is &lt;strong id=&quot;equal&quot;&gt;equal&lt;/strong&gt; to set B if they contain the same elements, which is denoted A = B. Two ordered sets are equal if they contain the same number of elements and have equal elements at each coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19215245cb9fd1a4e8ffc186a287650d6b65cbcd" translate="yes" xml:space="preserve">
          <source>Set B is a &lt;strong id=&quot;subset&quot;&gt;subset&lt;/strong&gt; of set A if A contains all elements that B contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c977a7d012429b4882cd8fd42de15ac59fe5b5b" translate="yes" xml:space="preserve">
          <source>Set a &lt;code&gt;Trace Pattern&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4583a6360c8b4779fda288e6b176634adebb983e" translate="yes" xml:space="preserve">
          <source>Set a process as heir. The heir inherits the table if the owner terminates. Message &lt;code&gt;{'ETS-TRANSFER',tid(),FromPid,HeirData}&lt;/code&gt; is sent to the heir when that occurs. The heir must be a local process. Default heir is &lt;code&gt;none&lt;/code&gt;, which destroys the table when the owner terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef928b043a7a5a938f7df2dbafc0cf65f7d6ac5" translate="yes" xml:space="preserve">
          <source>Set a user specified tag that will be present in the trace messages of both the &lt;code&gt;efile_drv&lt;/code&gt; and the user-probe mentioned above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5193d4f565dfa3ff18d9dc4a6925c9ce696b7d15" translate="yes" xml:space="preserve">
          <source>Set call count breakpoints on the matching functions that has no call count breakpoints. Call counters are set to zero and running for all matching functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c206e40d4815924e1a53503d6048d57f14c73244" translate="yes" xml:space="preserve">
          <source>Set configuration data for the specified handler. This overwrites the current handler configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd47d4fce652ab713e8b7a98d636d1b5c75dd28" translate="yes" xml:space="preserve">
          <source>Set default character set used (default UTF-8). This character set is used only if not explicitly given by the XML declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baebae1f9fc0f15dbe8dc93f5929e2d2010ab5c6" translate="yes" xml:space="preserve">
          <source>Set default character set used (default UTF-8). This character set is used only if not explicitly given by the XML document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3e6a4c11b886b8824a5e7b68d05fef80e861ce" translate="yes" xml:space="preserve">
          <source>Set domain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a03c3e67eba8831929ee4d03c547cef34f82cc3" translate="yes" xml:space="preserve">
          <source>Set group id on execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43ef2be073c4212dbed0aea6fd234494f19d7a6" translate="yes" xml:space="preserve">
          <source>Set how often (in milliseconds) the resolver cache for &lt;code&gt;inet_res(3)&lt;/code&gt; is refreshed (that is, expired DNS records are deleted). Defaults to 1 hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11208dde369a91b8db91c4eecdb2a252788928f" translate="yes" xml:space="preserve">
          <source>Set metadata which Logger shall automatically insert in all log events produced on the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c14eb8947d1e24438a3eac4d7df936565933ad4" translate="yes" xml:space="preserve">
          <source>Set namespace nodes in xmlContext.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d6929fb4197046544b86579372effd2f9fdb0d" translate="yes" xml:space="preserve">
          <source>Set namespace nodes, from XmlNamspace, in xmlContext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb924690fa3d68e56455acfeb0d6fd826110f164" translate="yes" xml:space="preserve">
          <source>Set next state and update the server data. If the &lt;code&gt;Actions&lt;/code&gt; field is used, execute state transition actions. An empty &lt;code&gt;Actions&lt;/code&gt; list is equivalent to not returning the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5717080ccba3110b1e93c082220f5cdc31e7b6" translate="yes" xml:space="preserve">
          <source>Set one or more options for distribution sockets. Argument &lt;code&gt;Node&lt;/code&gt; can be either one node name or the atom &lt;code&gt;new&lt;/code&gt; to affect the distribution sockets of all future connected nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc7b027f5a2252a98b992a5c8c7b2bb7c817f4a" translate="yes" xml:space="preserve">
          <source>Set options for the standard I/O device (&lt;code&gt;IoDevice&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72213ee26b861ef8b91cdf7c410ea5ee9c5dadc3" translate="yes" xml:space="preserve">
          <source>Set or update metadata to use when logging from current process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef64726061cb76ad432c186d4f382a9be21eb83d" translate="yes" xml:space="preserve">
          <source>Set primary configuration data for Logger. This overwrites the current configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3dcf47b54fea34ce93c2d32bf22b640191e01a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;fips_mode&lt;/code&gt; configuration setting of the crypto application to &lt;code&gt;true&lt;/code&gt;&lt;strong&gt;before loading the crypto module&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f63971e4cdc0fb0e823b787c37999e857dc6498" translate="yes" xml:space="preserve">
          <source>Set the appropriate flags value for the dirty NIF in its &lt;code&gt;&lt;a href=&quot;#ErlNifFunc&quot;&gt;ErlNifFunc&lt;/a&gt;&lt;/code&gt; entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094a9868d56dc50d00ad47de9adb55f55e047155" translate="yes" xml:space="preserve">
          <source>Set the environment &lt;code&gt;ERL_TOP&lt;/code&gt; to point to the root directory of the source distribution. Let's say I stood in &lt;code&gt;$HOME/src&lt;/code&gt; and unpacked &lt;code&gt;otp_src_21.tar.gz&lt;/code&gt;, I then add the following to &lt;code&gt;.profile&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1b46d28e8f7ffadae8dfc27bb9023505b34bd8" translate="yes" xml:space="preserve">
          <source>Set the log level for the specified modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7515e95df724fe9b5d68c6f4b74d9995d8b11c01" translate="yes" xml:space="preserve">
          <source>Set the number of DNS queries &lt;code&gt;inet_res(3)&lt;/code&gt; will try before giving up. Defaults to 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164faa04e1b0ae48ff64261f3a879cb2f355ae26" translate="yes" xml:space="preserve">
          <source>Set the protocol version in the megaco_receive_handle to &lt;code&gt;dynamic&lt;/code&gt; (this is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a11f749f7c15205dcb2c9760cceb7b8ef6d9da" translate="yes" xml:space="preserve">
          <source>Set the resolver cache size. Defaults to 100 DNS records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce09a83b1b5a283eb8968bc9ca42ab561a8776a" translate="yes" xml:space="preserve">
          <source>Set the seed for PRNG to the given binary. This calls the RAND_seed function from openssl. Only use this if the system you are running on does not have enough &quot;randomness&quot; built in. Normally this is when &lt;code&gt;&lt;a href=&quot;#strong_rand_bytes-1&quot;&gt;strong_rand_bytes/1&lt;/a&gt;&lt;/code&gt; throws &lt;code&gt;low_entropy&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f635f4f20e4c51855fdc78219636e760e994c7" translate="yes" xml:space="preserve">
          <source>Set the time to wait until retry (in milliseconds) for DNS queries made by &lt;code&gt;inet_res(3)&lt;/code&gt;. Defaults to 2 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d13b6a782c03e365d37eabd19ca664da2780cc" translate="yes" xml:space="preserve">
          <source>Set to 'false' if xmerl should skip comments otherwise they will be returned as xmlComment records (default 'true').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fbe7708004047bb2afb1c782b1da39380920d9" translate="yes" xml:space="preserve">
          <source>Set to 'true' if xmerl should add to elements missing attributes with a defined default value (default 'false').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a6100862ef8000dffdbfabef9b03fbe4efed5b" translate="yes" xml:space="preserve">
          <source>Set to 'true' if xmerl should behave quietly and not output any information to standard output (default 'false').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66eb7a7119e62d94590579d9ba538816580a8e4b" translate="yes" xml:space="preserve">
          <source>Set to 'true' if xmerl should return a complete XML document as an xmlDocument record (default 'false').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a03c1e0b0cd1d311bb054ba770b084cc6f021d" translate="yes" xml:space="preserve">
          <source>Set user id on execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03a3e4e8928d8477b7e1f484633e86f075cb412" translate="yes" xml:space="preserve">
          <source>Set verbosity levels (similar to &lt;code&gt;ct_run -verbosity&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca778adba8a1ef9615d0d2c7fde406715790347d" translate="yes" xml:space="preserve">
          <source>Set(T,Term) = Term, where T is an atom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e10feb9799e50623c9bf8a9567eaa50e9939fd6" translate="yes" xml:space="preserve">
          <source>Set([T], [X[1], ..., X[n]]) = {Set(T, X[1]), ..., Set(T, X[n])}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413498d027ca502d98470e9ce84766c4039cf1ea" translate="yes" xml:space="preserve">
          <source>Set([T], []) = {}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd0a36887cd69f40802ddb5e7e82ea6eeebcf34" translate="yes" xml:space="preserve">
          <source>Set({T[1], ..., T[n]}, {X[1], ..., X[n]}) = (Set(T[1], X[1]), ..., Set(T[n], X[n]))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c06dfb34f2f4bf919808259ba70305b1ddd9650" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*dp&lt;/code&gt; to the floating-point value of &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e051f7d5badeaed03b0b1d0a541992d21c1addf9" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*head&lt;/code&gt; and &lt;code&gt;*tail&lt;/code&gt; from list &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51b6603c560e21dcd95c8a681f5cba8d55372a9" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*ip&lt;/code&gt; to the integer value of &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571e173a08327b6e4b86b6ce45879f312f580ef8" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*ip&lt;/code&gt; to the long integer value of &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613dc3641992693e7800bbeb7cd30ae95e85d4a3" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*ip&lt;/code&gt; to the unsigned integer value of &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ba384052f60ac175063bcb3873f9c02f933f41" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*ip&lt;/code&gt; to the unsigned long integer value of &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915a720de8e28ec31c8841ac19081593d9b84062" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*len&lt;/code&gt; to the length (number of bytes excluding terminating &lt;code&gt;NULL&lt;/code&gt; character) of the atom &lt;code&gt;term&lt;/code&gt; with encoding &lt;code&gt;encode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45f5eb51a4fbfb531a0011893bc38aa06940406" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*len&lt;/code&gt; to the length of list &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4540298ab375e444ccad190a52e6e0477fd70600" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*list_out&lt;/code&gt; to the reverse list of the list &lt;code&gt;list_in&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;, or returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;list_in&lt;/code&gt; is not a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aacd3e0359772fef237556f152787f4d410bbfd" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*objp&lt;/code&gt; to point to the resource object referred to by &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fcb7ced968bcff373ec6a2edb89431fd8224dd" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*size&lt;/code&gt; to the number of key-value pairs in the map &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beaa2fee2e9a9f6a8abdbe5756d1796f1ba8d12e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;*value&lt;/code&gt; to the value associated with &lt;code&gt;key&lt;/code&gt; in the map &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d424f307db0ea4cc28ba2b241c77bfef339d143" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;#MMscs&quot;&gt;super carrier&lt;/a&gt;&lt;/code&gt; only flag. Defaults to &lt;code&gt;true&lt;/code&gt;. When a super carrier is used and this flag is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;mseg_alloc&lt;/code&gt; only creates carriers in the super carrier. Notice that the &lt;code&gt;alloc_util&lt;/code&gt; framework can create &lt;code&gt;sys_alloc&lt;/code&gt; carriers, so if you want all carriers to be created in the super carrier, you therefore want to disable use of &lt;code&gt;sys_alloc&lt;/code&gt; carriers by also passing &lt;code&gt;&lt;a href=&quot;#Musac&quot;&gt;+Musac false&lt;/a&gt;&lt;/code&gt;. When the flag is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;mseg_alloc&lt;/code&gt; tries to create carriers outside of the super carrier when the super carrier is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d4ec5452d888d17be9d1b1fff275616c522a40" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;#MMscs&quot;&gt;super carrier&lt;/a&gt;&lt;/code&gt; reserve physical memory flag. Defaults to &lt;code&gt;true&lt;/code&gt;. When this flag is &lt;code&gt;true&lt;/code&gt;, physical memory is reserved for the whole super carrier at once when it is created. The reservation is after that left unchanged. When this flag is set to &lt;code&gt;false&lt;/code&gt;, only virtual address space is reserved for the super carrier upon creation. The system attempts to reserve physical memory upon carrier creations in the super carrier, and attempt to unreserve physical memory upon carrier destructions in the super carrier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1612d1b41c97922be4489ee03c0939a8fd5d8b4d" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;#MMscs&quot;&gt;super carrier&lt;/a&gt;&lt;/code&gt; reserved free segment descriptors. Defaults to &lt;code&gt;65536&lt;/code&gt;. This parameter determines the amount of memory to reserve for free segment descriptors used by the super carrier. If the system runs out of reserved memory for free segment descriptors, other memory is used. This can however cause fragmentation issues, so you want to ensure that this never happens. The maximum amount of free segment descriptors used can be retrieved from the &lt;code&gt;erts_mmap&lt;/code&gt; tuple part of the result from calling &lt;code&gt;erlang:system_info({allocator, mseg_alloc})&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebb876a63208fcdcfb339ce9e69d82e63c7a04b" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt;time warp mode&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d25034a18042a5fdc2f4a71230a294a34c64875" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;verbosity levels for printouts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4852521a61b195efaf2f348ded9c7d061b93172d" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;IPV6_TCLASS IP&lt;/code&gt; level options on platforms where this is implemented. The behavior and allowed range varies between different systems. The option is ignored on platforms where it is not implemented. Use with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cf2c0f5bf4ff6c4b3ed386f7b45919378d8588" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;IP_TOS IP&lt;/code&gt; level options on platforms where this is implemented. The behavior and allowed range varies between different systems. The option is ignored on platforms where it is not implemented. Use with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3067dd797e2d91f5e74fcce739bf10d2c4d32e50" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;net_ticktime&lt;/code&gt; (see &lt;code&gt;kernel(6)&lt;/code&gt;) to &lt;code&gt;NetTicktime&lt;/code&gt; seconds. &lt;code&gt;TransitionPeriod&lt;/code&gt; defaults to &lt;code&gt;60&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15b21e5980ed919de9bd7b33856ffd75d752ac5" translate="yes" xml:space="preserve">
          <source>Sets a conditional breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e958994f825f779aaaf22b4d1627bd52da981b53" translate="yes" xml:space="preserve">
          <source>Sets a function breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13db4a451ebcde54e302290d8a49e1f659727139" translate="yes" xml:space="preserve">
          <source>Sets a line breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7529eae50d20b8a22057a81dd1f470a3676e6b5" translate="yes" xml:space="preserve">
          <source>Sets a link to the parent process (like &lt;code&gt;&lt;a href=&quot;#spawn_link-3&quot;&gt;spawn_link/3&lt;/a&gt;&lt;/code&gt; does).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378330ec692ad34d970693f8795104131edf1cb9" translate="yes" xml:space="preserve">
          <source>Sets a lock on &lt;code&gt;Id&lt;/code&gt; (using &lt;code&gt;&lt;a href=&quot;#set_lock-3&quot;&gt;set_lock/3&lt;/a&gt;&lt;/code&gt;). If this succeeds, &lt;code&gt;Fun()&lt;/code&gt; is evaluated and the result &lt;code&gt;Res&lt;/code&gt; is returned. Returns &lt;code&gt;aborted&lt;/code&gt; if the lock attempt fails. If &lt;code&gt;Retries&lt;/code&gt; is set to &lt;code&gt;infinity&lt;/code&gt;, the transaction does not abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1aebf3301cf94c465826ebf94b60880a279cbdf" translate="yes" xml:space="preserve">
          <source>Sets a lock on the specified nodes (or on all nodes if none are specified) on &lt;code&gt;ResourceId&lt;/code&gt; for &lt;code&gt;LockRequesterId&lt;/code&gt;. If a lock already exists on &lt;code&gt;ResourceId&lt;/code&gt; for another requester than &lt;code&gt;LockRequesterId&lt;/code&gt;, and &lt;code&gt;Retries&lt;/code&gt; is not equal to &lt;code&gt;0&lt;/code&gt;, the process sleeps for a while and tries to execute the action later. When &lt;code&gt;Retries&lt;/code&gt; attempts have been made, &lt;code&gt;false&lt;/code&gt; is returned, otherwise &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;Retries&lt;/code&gt; is &lt;code&gt;infinity&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; is eventually returned (unless the lock is never released).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fa85c61ffdffc636edd96b3c09aa20ad418e82" translate="yes" xml:space="preserve">
          <source>Sets a network namespace for the socket. Parameter &lt;code&gt;Namespace&lt;/code&gt; is a filename defining the namespace, for example, &lt;code&gt;&quot;/var/run/netns/example&quot;&lt;/code&gt;, typically created by command &lt;code&gt;ip netns add example&lt;/code&gt;. This option must be used in a function call that creates a socket, that is, &lt;code&gt;&lt;a href=&quot;gen_tcp#connect-3&quot;&gt;gen_tcp:connect/3,4&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;gen_tcp#listen-2&quot;&gt;gen_tcp:listen/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;gen_udp#open-1&quot;&gt;gen_udp:open/1,2&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;gen_sctp#open-0&quot;&gt;gen_sctp:open/0,1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9ccba50f71fcd13f784682ef8be0b3e882300c" translate="yes" xml:space="preserve">
          <source>Sets a new &lt;code&gt;Value&lt;/code&gt; for environment variable &lt;code&gt;VarName&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81d3bf72e4dc51ac97c9faa67c434a822a766af" translate="yes" xml:space="preserve">
          <source>Sets a new directory for the object code. The current directory is used for output, except when a directory has been specified with this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccc3c86ad893d9367459062c3e0cd6e9a7d7648" translate="yes" xml:space="preserve">
          <source>Sets a new timetrap for the running test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94974c0a1d5854fe21633dd5ad87299cb2fa3e5c" translate="yes" xml:space="preserve">
          <source>Sets a new value to a variable. The variable is created if it does not exist. No checks are made on the type of the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c8307c383c4b2a2c9cf2c4db6d748df38e0492" translate="yes" xml:space="preserve">
          <source>Sets a temporary reboot command. This command is used if a &lt;code&gt;HEART_COMMAND&lt;/code&gt; other than the one specified with the environment variable is to be used to reboot the system. The new Erlang runtime system uses (if it misbehaves) environment variable &lt;code&gt;HEART_COMMAND&lt;/code&gt; to reboot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcfc1f87c9268646e242d73a5086422e1c0e9ec" translate="yes" xml:space="preserve">
          <source>Sets a time limit for the complete &lt;code&gt;expect&lt;/code&gt; operation. After &lt;code&gt;TotalTimeout&lt;/code&gt; milliseconds, &lt;code&gt;{error,timeout}&lt;/code&gt; is returned. Default is &lt;code&gt;infinity&lt;/code&gt; (that is, no time limit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac530e4a2972399690caac535efe4009b77a789" translate="yes" xml:space="preserve">
          <source>Sets a time-out on a connection when no channels are active. Defaults to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e674062633a7af96f204ff5dc228376acf0a5d" translate="yes" xml:space="preserve">
          <source>Sets a timeout on the transport layer connect time. For &lt;code&gt;gen_tcp&lt;/code&gt; the time is in milli-seconds and the default value is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee425ba9c0ee48277c9503c7d0126036be193f1f" translate="yes" xml:space="preserve">
          <source>Sets a timer on the driver, which will count down and call the driver when it is timed out. Parameter &lt;code&gt;time&lt;/code&gt; is the time in milliseconds before the timer expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49ab86917c6d2a622df15cb53f1cc3db42e35a4" translate="yes" xml:space="preserve">
          <source>Sets a user-defined CPU topology. The user-defined CPU topology overrides any automatically detected CPU topology. The CPU topology is used when &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;binding schedulers to logical processors&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a46f50076710c9e5150e115a75150579da01d6" translate="yes" xml:space="preserve">
          <source>Sets all flags except &lt;code&gt;silent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c03475cf14316ae353a4e7da23272a974c3a451" translate="yes" xml:space="preserve">
          <source>Sets all trace flags except &lt;code&gt;tracer&lt;/code&gt; and &lt;code&gt;cpu_timestamp&lt;/code&gt;, which are in their nature different than the others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c846791ad68cf6dbd94eefcd66884aefebb31c" translate="yes" xml:space="preserve">
          <source>Sets an additional message appended to the trace message sent. One can only set one additional message in the body. Later calls replace the appended message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af1dd2df9ce15000cd6d34bd367aefd9761c132" translate="yes" xml:space="preserve">
          <source>Sets and gets limits that will be used for controlling the busy state of the port message queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5c29272406fc646646cf47942988ee10b91f01" translate="yes" xml:space="preserve">
          <source>Sets and unsets the busy state of the port. If &lt;code&gt;on&lt;/code&gt; is non-zero, the port is set to busy. If it is zero, the port is set to not busy. You typically want to combine this feature with the &lt;code&gt;&lt;a href=&quot;#erl_drv_busy_msgq_limits&quot;&gt;busy port message queue&lt;/a&gt;&lt;/code&gt; functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a85c3ea45147b9fedbadf6c395811358fe8a84f" translate="yes" xml:space="preserve">
          <source>Sets are collections of elements with no duplicate elements. An &lt;code&gt;ordset&lt;/code&gt; is a representation of a set, where an ordered list is used to store the elements of the set. An ordered list is more efficient than an unordered list. Elements are ordered according to the &lt;strong&gt;Erlang term order&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c19d390137232ae72a1d248cdc31d7776e598b6" translate="yes" xml:space="preserve">
          <source>Sets are collections of elements with no duplicate elements. The representation of a set is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365028eb14a26a137690d1db3a4043622bdbec75" translate="yes" xml:space="preserve">
          <source>Sets certain flags for the process &lt;code&gt;Pid&lt;/code&gt;, in the same manner as &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;. Returns the old value of the flag. The valid values for &lt;code&gt;Flag&lt;/code&gt; are only a subset of those allowed in &lt;code&gt;process_flag/2&lt;/code&gt;, namely &lt;code&gt;save_calls&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d944e5445db3a3e9e6c96dd7a0661e897b6fdc" translate="yes" xml:space="preserve">
          <source>Sets default scheduler hint for port parallelism. If set to &lt;code&gt;true&lt;/code&gt;, the virtual machine schedules port tasks when it improves parallelism in the system. If set to &lt;code&gt;false&lt;/code&gt;, the virtual machine tries to perform port tasks immediately, improving latency at the expense of parallelism. Default to &lt;code&gt;false&lt;/code&gt;. The default used can be inspected in runtime by calling &lt;code&gt;&lt;a href=&quot;erlang#system_info_port_parallelism&quot;&gt;erlang:system_info(port_parallelism)&lt;/a&gt;&lt;/code&gt;. The default can be overridden on port creation by passing option &lt;code&gt;&lt;a href=&quot;erlang#open_port_parallelism&quot;&gt;parallelism&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a29d89884c070d02b26f487494764ac64dbd6f" translate="yes" xml:space="preserve">
          <source>Sets entry &lt;code&gt;I&lt;/code&gt; of the array to &lt;code&gt;Value&lt;/code&gt;. If &lt;code&gt;I&lt;/code&gt; is not a non-negative integer, or if the array has fixed size and &lt;code&gt;I&lt;/code&gt; is larger than the maximum index, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9596847477de68fb61cd31ce6754f1d1d487b6" translate="yes" xml:space="preserve">
          <source>Sets flags for how the &lt;code&gt;&lt;a href=&quot;driver_entry#control&quot;&gt;control&lt;/a&gt;&lt;/code&gt; driver entry function will return data to the port owner process. (The &lt;code&gt;control&lt;/code&gt; function is called from &lt;code&gt;erlang:port_control/3&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557630be3374a84ea5bc1ff008a6dce65119c3ef" translate="yes" xml:space="preserve">
          <source>Sets how many call frames are to be fetched when inspecting the call stack. Does not affect other Attach Process windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a639918218c5c3e261631ffa16e882d8c1f703" translate="yes" xml:space="preserve">
          <source>Sets how many call frames to be fetched when inspecting the call stack from the Attach Process window. Does not affect existing Attach Process windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55fa43db9072680896babe3757d7a3bb1da846d" translate="yes" xml:space="preserve">
          <source>Sets how to save call frames in the stack, see &lt;code&gt;&lt;a href=&quot;int#stack_trace-0&quot;&gt;int:stack_trace/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee934fe8c08a4614f83600d30848c99d1315fa93" translate="yes" xml:space="preserve">
          <source>Sets module log level for the given modules. Equivalent to calling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b334159a61dd92e365ecad762f28fd3d37d4da3" translate="yes" xml:space="preserve">
          <source>Sets of Unicode characters are defined as belonging to certain scripts. A character from one of these sets can be matched using a script name, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0da6d96de7e6be80588b11eea7a1ce862b4c3e" translate="yes" xml:space="preserve">
          <source>Sets one or more options for a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0f9778ea14e46d4dc23c64c0a9cf53af4c6ca7" translate="yes" xml:space="preserve">
          <source>Sets options according to &lt;code&gt;Options&lt;/code&gt; for socket &lt;code&gt;Socket&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bcb72c72449c33f6503140032c6f455f96e4e9" translate="yes" xml:space="preserve">
          <source>Sets options to be used for subsequent requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4449503a9d9395375abbaa4d1c05c6bf1b2ef0" translate="yes" xml:space="preserve">
          <source>Sets or clears flag &lt;code&gt;sensitive&lt;/code&gt; for the current process. When a process has been marked as sensitive by calling &lt;code&gt;process_flag(sensitive, true)&lt;/code&gt;, features in the runtime system that can be used for examining the data or inner working of the process are silently disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f77b8a941c5bce3024a5454d16f36a5c3b6b03" translate="yes" xml:space="preserve">
          <source>Sets port in &lt;code&gt;command&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb048f96bac21957c754b644e5dfe6157346204" translate="yes" xml:space="preserve">
          <source>Sets port in &lt;code&gt;data&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae4ef4f56e53748ffd6d502fdfc94fe01735c0e" translate="yes" xml:space="preserve">
          <source>Sets port in &lt;code&gt;intermediate&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bd8703f20f2ab0ab7e1b460035c994a52db76f" translate="yes" xml:space="preserve">
          <source>Sets pretty printing of lists to &lt;code&gt;Strings&lt;/code&gt;. The previous value of the flag is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f63ff7fab40d5dbc3b262e9d79c1e43b4cf8ef7" translate="yes" xml:space="preserve">
          <source>Sets scheduler bind type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789ba565310b9718ceeaeb577ba32e08910a047d" translate="yes" xml:space="preserve">
          <source>Sets scheduler busy wait threshold. Defaults to &lt;code&gt;medium&lt;/code&gt;. The threshold determines how long schedulers are to busy wait when running out of work before going to sleep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a12e502ac7e03517055fac2216ca745fb21e314" translate="yes" xml:space="preserve">
          <source>Sets scheduler hint for port parallelism. If set to &lt;code&gt;true&lt;/code&gt;, the virtual machine schedules port tasks; when doing so, it improves parallelism in the system. If set to &lt;code&gt;false&lt;/code&gt;, the virtual machine tries to perform port tasks immediately, improving latency at the expense of parallelism. The default can be set at system startup by passing command-line argument &lt;code&gt;&lt;a href=&quot;erl#+spp&quot;&gt;+spp&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705443dd75f41eddccabe316679e591b90ecea21" translate="yes" xml:space="preserve">
          <source>Sets scheduler wake cleanup threshold. Defaults to &lt;code&gt;medium&lt;/code&gt;. Controls how eager schedulers are to be requesting wakeup because of certain cleanup operations. When a lazy setting is used, more outstanding cleanup operations can be left undone while a scheduler is idling. When an eager setting is used, schedulers are more frequently woken, potentially increasing CPU-utilization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d38290b47732b181fb3fc7e5c1c52cfada68e3f" translate="yes" xml:space="preserve">
          <source>Sets scheduler wakeup strategy. Default strategy changed in ERTS 5.10 (Erlang/OTP R16A). This strategy was known as &lt;code&gt;proposal&lt;/code&gt; in Erlang/OTP R15. The &lt;code&gt;legacy&lt;/code&gt; strategy was used as default from R13 up to and including R15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5e094555066696f08aabf4d60ea661e9639b6c" translate="yes" xml:space="preserve">
          <source>Sets scheduler wakeup threshold. Defaults to &lt;code&gt;medium&lt;/code&gt;. The threshold determines when to wake up sleeping schedulers when more work than can be handled by currently awake schedulers exists. A low threshold causes earlier wakeups, and a high threshold causes later wakeups. Early wakeups distribute work over multiple schedulers faster, but work does more easily bounce between schedulers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bccfdea98e85199778d64fc0291952e4ec723d" translate="yes" xml:space="preserve">
          <source>Sets scheduler-forced wakeup interval. All run queues are scanned each &lt;code&gt;Interval&lt;/code&gt; milliseconds. While there are sleeping schedulers in the system, one scheduler is woken for each non-empty run queue found. &lt;code&gt;Interval&lt;/code&gt; default to &lt;code&gt;0&lt;/code&gt;, meaning this feature is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110adc5f2f2d49b4b94105f09d26db5cb890c642" translate="yes" xml:space="preserve">
          <source>Sets super carrier size (in MB). Defaults to &lt;code&gt;0&lt;/code&gt;, that is, the super carrier is by default disabled. The super carrier is a large continuous area in the virtual address space. &lt;code&gt;mseg_alloc&lt;/code&gt; always tries to create new carriers in the super carrier if it exists. Notice that the &lt;code&gt;alloc_util&lt;/code&gt; framework can create &lt;code&gt;sys_alloc&lt;/code&gt; carriers. For more information, see &lt;code&gt;&lt;a href=&quot;#MMsco&quot;&gt;+MMsco&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af175291c0524942dcce2c373e3303753be98c5" translate="yes" xml:space="preserve">
          <source>Sets system flag &lt;code&gt;fullsweep_after&lt;/code&gt;. &lt;code&gt;Number&lt;/code&gt; is a non-negative integer indicating how many times generational garbage collections can be done without forcing a fullsweep collection. The value applies to new processes, while processes already running are not affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd8008392defeaba1e689998767b13e64127d74" translate="yes" xml:space="preserve">
          <source>Sets system flags for &lt;code&gt;erts_alloc(3)&lt;/code&gt;. &lt;code&gt;Alloc&lt;/code&gt; is the allocator to affect, for example &lt;code&gt;binary_alloc&lt;/code&gt;. &lt;code&gt;F&lt;/code&gt; is the flag to change and &lt;code&gt;V&lt;/code&gt; is the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe541c9550f647980c41d36a62c1b41fc3300c1a" translate="yes" xml:space="preserve">
          <source>Sets system profiler options. &lt;code&gt;ProfilerPid&lt;/code&gt; is a local process identifier (pid) or port receiving profiling messages. The receiver is excluded from all profiling. The second argument is a list of profiling options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72bd2e35bed397dab160cd3f2611e9fe2f44002" translate="yes" xml:space="preserve">
          <source>Sets table options. The only allowed option to be set after the table has been created is &lt;code&gt;&lt;a href=&quot;#heir&quot;&gt;heir&lt;/a&gt;&lt;/code&gt;. The calling process must be the table owner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1370d09ddeefa5429f567d1d2021ca12a30888" translate="yes" xml:space="preserve">
          <source>Sets the &quot;progress&quot; of the initialization program. The &lt;code&gt;init:get_status/0&lt;/code&gt; function returns the current value of the progress, which is &lt;code&gt;{InternalStatus,Term}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9deadafcb636ce2300764e73764281e9f79e92e7" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt;. If the given path is a list of directories, the set of &lt;code&gt;&lt;a href=&quot;#library_module&quot;&gt;library modules&lt;/a&gt;&lt;/code&gt; is determined by choosing the first module encountered while traversing the directories in the given order, for those modules that occur in more than one directory. By default, the library path is an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44067ee3e248c621eea2461d3dc06a7c49aedd2e" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;Time&lt;/code&gt; with &lt;code&gt;EventContent&lt;/code&gt; and time-out options &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a8c68391586d0ac6547d160d8a110c5dbc28b3" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-generic_timeout&quot;&gt;generic_timeout()&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;Time&lt;/code&gt; for &lt;code&gt;Name&lt;/code&gt; with &lt;code&gt;EventContent&lt;/code&gt; and time-out options &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30684f7d4981c9e1a62530e17bf883b5eb02a6ff" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-hibernate&quot;&gt;hibernate()&lt;/a&gt;&lt;/code&gt; for this state transition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a0223739bff17a151a7c16afd90099930bc8b5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; for this state transition. This action is ignored when returned from &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; or given to &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt;, as there is no event to postpone in those cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247d0b30de1256443cd386fe363d5272f57f80df" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;Time&lt;/code&gt; with &lt;code&gt;EventContent&lt;/code&gt; and time-out options &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d52ae60abfaf725011b6848f52ce6020c1f710" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;SO_PRIORITY&lt;/code&gt; socket level option on platforms where this is implemented. The behavior and allowed range varies between different systems. The option is ignored on platforms where it is not implemented. Use with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4305a29ea9e75c952650e9de33069fe615b6f1" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max_heap_size&lt;/code&gt; process flag. The default &lt;code&gt;max_heap_size&lt;/code&gt; is determined by command-line argument &lt;code&gt;&lt;a href=&quot;erl#+hmax&quot;&gt;+hmax&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;. For more information, see the documentation of &lt;code&gt;&lt;a href=&quot;#process_flag_max_heap_size&quot;&gt;process_flag(max_heap_size,Size)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c896f2b3f505d02fa9f498fa10868ea66308f5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;os_pid&lt;/code&gt; seen when doing &lt;code&gt;erlang:port_info/2&lt;/code&gt; on this port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c1677618763bf038d6e46228bd8e5ee838115f" translate="yes" xml:space="preserve">
          <source>Sets the EDNS version that &lt;code&gt;inet_res(3)&lt;/code&gt; will use. The only allowed version is zero. Defaults to &lt;code&gt;false&lt;/code&gt;, which means not to use EDNS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ef88e548dffe2695e83197ffb9b451eda0527a" translate="yes" xml:space="preserve">
          <source>Sets the SFTP root directory. Then the user cannot see any files above this root. If, for example, the root directory is set to &lt;code&gt;/tmp&lt;/code&gt;, then the user sees this directory as &lt;code&gt;/&lt;/code&gt;. If the user then writes &lt;code&gt;cd /etc&lt;/code&gt;, the user moves to &lt;code&gt;/tmp/etc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8877971d9d703f1e711372a08825403316d7e95f" translate="yes" xml:space="preserve">
          <source>Sets the SFTP version to use. Defaults to 5. Version 6 is under development and limited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccfb70351c6433354bbcf378bd99cdbed6dfce6" translate="yes" xml:space="preserve">
          <source>Sets the Type-Of-Service field on the IP datagrams that are sent, to the specified value. This effectively determines a prioritization policy for the outbound packets. The acceptable values are system-dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab85e947ba482e18e7bb4919535fd42a5266576" translate="yes" xml:space="preserve">
          <source>Sets the account for an operation, if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42e58ba97e4277ac0d4115ed6fbf8e9c986c9b0" translate="yes" xml:space="preserve">
          <source>Sets the allowed UDP payload size &lt;code&gt;inet_res(3)&lt;/code&gt; will advertise in EDNS queries. Also sets the limit when the DNS query will be deemed too large for UDP forcing a TCP query instead; this is not entirely correct, as the advertised UDP payload size of the individual nameserver is what is to be used, but this simple strategy will do until a more intelligent (probing, caching) algorithm needs to be implemented. Default to 1280, which stems from the standard Ethernet MTU size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6577d9bea2036a30156c3c5527dd06a4c86be02c" translate="yes" xml:space="preserve">
          <source>Sets the application configuration parameter &lt;code&gt;Par&lt;/code&gt; to the value &lt;code&gt;Val&lt;/code&gt; for the application &lt;code&gt;Application&lt;/code&gt;; see &lt;code&gt;app(4)&lt;/code&gt; and &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7196246ff7c882e793640c66749d164bdc6f82d" translate="yes" xml:space="preserve">
          <source>Sets the areas to be visible in an &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt;. Does not affect existing Attach Process windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb9c3fb8f1ce99f109e9887fbbdf78879940dca" translate="yes" xml:space="preserve">
          <source>Sets the attributes of &lt;code&gt;Node&lt;/code&gt; to &lt;code&gt;Attributes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84596578fd723b61daba1bf34b66cca849fbe4b2" translate="yes" xml:space="preserve">
          <source>Sets the code path to the list of directories &lt;code&gt;Path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5886c8b67f42b23e753322dc78b32aed10fd89" translate="yes" xml:space="preserve">
          <source>Sets the compatibility mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944d785aef67c4495fac86e50f30a32b1b411b9c" translate="yes" xml:space="preserve">
          <source>Sets the conditional test of the breakpoint at &lt;code&gt;Line&lt;/code&gt; in &lt;code&gt;Module&lt;/code&gt; to &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3903c607ad295badc26503d3ad81d9c44d7f68c2" translate="yes" xml:space="preserve">
          <source>Sets the conditional test of the breakpoint at &lt;code&gt;Line&lt;/code&gt; in &lt;code&gt;Module&lt;/code&gt; to &lt;code&gt;Function&lt;/code&gt;. The function must fulfill the requirements specified in section &lt;code&gt;&lt;a href=&quot;#int_breakpoints&quot;&gt;Breakpoints&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4061c32d14920b9566bcc250e2af955175c928c" translate="yes" xml:space="preserve">
          <source>Sets the current working directory of the file server to &lt;code&gt;Dir&lt;/code&gt;. Returns &lt;code&gt;ok&lt;/code&gt; if successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f682600156d1ac8d49837d1b919d3416024f3f6" translate="yes" xml:space="preserve">
          <source>Sets the default binary virtual heap size of processes to the size &lt;code&gt;Size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8788ba87541bacd719f0d84f7dac6ea0f39a7fb2" translate="yes" xml:space="preserve">
          <source>Sets the default heap size of processes to the size &lt;code&gt;Size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60007f967f2cc669c29b946459ed60410b3e6ca1" translate="yes" xml:space="preserve">
          <source>Sets the default maximum heap size of processes to the size &lt;code&gt;Size&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;, which means that no maximum heap size is used. For more information, see &lt;code&gt;&lt;a href=&quot;erlang#process_flag_max_heap_size&quot;&gt;process_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a389437f3f73af86efbff82f57301b8ab688e3" translate="yes" xml:space="preserve">
          <source>Sets the default maximum heap size settings for processes. The size is specified in words. The new &lt;code&gt;max_heap_size&lt;/code&gt; effects only processes spawned efter the change has been made. &lt;code&gt;max_heap_size&lt;/code&gt; can be set for individual processes using &lt;code&gt;&lt;a href=&quot;#spawn_opt-4&quot;&gt;spawn_opt/2,3,4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#process_flag_max_heap_size&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bc4e73c5ac7544d6780c8fd56c8b96b851f60a" translate="yes" xml:space="preserve">
          <source>Sets the default minimum binary virtual heap size for processes. The size is specified in words. The new &lt;code&gt;min_bin_vhheap_size&lt;/code&gt; effects only processes spawned after the change of &lt;code&gt;min_bin_vheap_size&lt;/code&gt; has been made. &lt;code&gt;min_bin_vheap_size&lt;/code&gt; can be set for individual processes by using &lt;code&gt;&lt;a href=&quot;#spawn_opt-4&quot;&gt;spawn_opt/2,3,4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98113d028a855f2fc4c1c43b662b1836412ae4a8" translate="yes" xml:space="preserve">
          <source>Sets the default minimum heap size for processes. The size is specified in words. The new &lt;code&gt;min_heap_size&lt;/code&gt; effects only processes spawned after the change of &lt;code&gt;min_heap_size&lt;/code&gt; has been made. &lt;code&gt;min_heap_size&lt;/code&gt; can be set for individual processes by using &lt;code&gt;&lt;a href=&quot;#spawn_opt-4&quot;&gt;spawn_opt/4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfe1f8e6db4840d30e58fb942c0c004b2301a72" translate="yes" xml:space="preserve">
          <source>Sets the default value for process flag &lt;code&gt;message_queue_data&lt;/code&gt;. Defaults to &lt;code&gt;on_heap&lt;/code&gt;. If &lt;code&gt;+hmqd&lt;/code&gt; is not passed, &lt;code&gt;on_heap&lt;/code&gt; will be the default. For more information, see &lt;code&gt;&lt;a href=&quot;erlang#process_flag_message_queue_data&quot;&gt;process_flag(message_queue_data, MQD)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c2ea2b7700109a84493d49d1dc00bb82175dc5" translate="yes" xml:space="preserve">
          <source>Sets the default value for the array to &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9601c01c1c1e3069c8eaf3af9dd5940c97b57c" translate="yes" xml:space="preserve">
          <source>Sets the default value of one or more options. The options that can be set this way are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f898d2913a3e851d5c7b70975dff3b539f8026a2" translate="yes" xml:space="preserve">
          <source>Sets the delayed node table garbage collection time (&lt;code&gt;&lt;a href=&quot;erlang#system_info_delayed_node_table_gc&quot;&gt;delayed_node_table_gc&lt;/a&gt;&lt;/code&gt;) in seconds. Valid values are either &lt;code&gt;infinity&lt;/code&gt; or an integer in the range 0-100000000. Defaults to 60.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d5edb58d125521e91d331fbf4ed477db24c7a9" translate="yes" xml:space="preserve">
          <source>Sets the distribution buffer busy limit (&lt;code&gt;&lt;a href=&quot;erlang#system_info_dist_buf_busy_limit&quot;&gt;dist_buf_busy_limit&lt;/a&gt;&lt;/code&gt;) in kilobytes. Valid range is 1-2097151. Defaults to 1024.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50bdc36b528791e8b69abb70b67013aa7f2bd35" translate="yes" xml:space="preserve">
          <source>Sets the elements in &lt;code&gt;Cols&lt;/code&gt; to the row specified by &lt;code&gt;RowIndex&lt;/code&gt;. No checks are performed on the new values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc21daaad542079b18ac1ea07963d8433ef93a4a" translate="yes" xml:space="preserve">
          <source>Sets the events a debugged process is to be attached to automatically. Affects existing debugged processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41611ee00a14ab42ec3a3e885687ce728dd300a9" translate="yes" xml:space="preserve">
          <source>Sets the exception handling of the evaluator process. The previous exception handling is returned. The default (&lt;code&gt;false&lt;/code&gt;) is to kill the evaluator process when an exception occurs, which causes the shell to create a new evaluator process. When the exception handling is set to &lt;code&gt;true&lt;/code&gt;, the evaluator process lives on, which means that, for example, ports and ETS tables as well as processes linked to the evaluator process survive the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77ac71b59fce1d6b574dd7f680d1f1e50a7a675" translate="yes" xml:space="preserve">
          <source>Sets the exception handling of the evaluator process. The previous exception handling is returned. The default (&lt;code&gt;false&lt;/code&gt;) is to kill the evaluator process when an exception occurs, which causes the shell to create a new evaluator process. When the exception handling is set to &lt;code&gt;true&lt;/code&gt;, the evaluator process lives on. This means, for example, that ports and ETS tables as well as processes linked to the evaluator process survive the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a159ac6daa93e107b9fbbb4fde280ebc4d39af2" translate="yes" xml:space="preserve">
          <source>Sets the file owner. &lt;code&gt;file:read_file_info/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6cc6dca65bd7e27afc8d823644da994375f329" translate="yes" xml:space="preserve">
          <source>Sets the file position of the file referenced by &lt;code&gt;Handle&lt;/code&gt;. Returns &lt;code&gt;{ok, NewPosition}&lt;/code&gt; (as an absolute offset) if successful, otherwise &lt;code&gt;{error, reason()}&lt;/code&gt;. &lt;code&gt;Location&lt;/code&gt; is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c972a59b0cc54dc813e15bf5068fe780f073733" translate="yes" xml:space="preserve">
          <source>Sets the file transfer type to &lt;code&gt;ascii&lt;/code&gt; or &lt;code&gt;binary&lt;/code&gt;. When an FTP session is opened, the default transfer type of the server is used, most often &lt;code&gt;ascii&lt;/code&gt;, which is default according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6851dcbf2474ca3ffe84ea041679691dd353f1ef" translate="yes" xml:space="preserve">
          <source>Sets the group leader of &lt;code&gt;Pid&lt;/code&gt; to &lt;code&gt;GroupLeader&lt;/code&gt;. Typically, this is used when a process started from a certain shell is to have another group leader than &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9128f712d622e0ceef8a5620cc3de049747c1e" translate="yes" xml:space="preserve">
          <source>Sets the group that the file owner belongs to. &lt;code&gt;file:read_file_info/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7797f328061524b1c58a840bede4655d0568b709" translate="yes" xml:space="preserve">
          <source>Sets the host OS environment variable &lt;code&gt;Variable&lt;/code&gt; to the value &lt;code&gt;Value&lt;/code&gt; for the Erlang runtime system. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e0b51fdfba6b1d0c27973279245d91010b5af2" translate="yes" xml:space="preserve">
          <source>Sets the individual &lt;code&gt;Component&lt;/code&gt; of the trace token to &lt;code&gt;Val&lt;/code&gt;. Returns the previous value of the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985fb0849fd22e6640e7965c4cd4ace35c359fee" translate="yes" xml:space="preserve">
          <source>Sets the initial current working directory for the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731f35736796e6932947e2cc126ce2edb1347f1b" translate="yes" xml:space="preserve">
          <source>Sets the initial process dictionary size of processes to the size &lt;code&gt;Size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17728489612d8f94f200dec3cb3aff87fafa3729" translate="yes" xml:space="preserve">
          <source>Sets the integer lists to be printed as strings. Does not affect existing debugged processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d0ef89722f71c5730216311cc5541ea6b55336" translate="yes" xml:space="preserve">
          <source>Sets the intermediate buffer size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac561d939d8c45fcbd87826f32339286e776ec0" translate="yes" xml:space="preserve">
          <source>Sets the last time, as &lt;code&gt;POSIX time&lt;/code&gt;, when the file was read. See also &lt;code&gt;file:read_file_info/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee23b430fa87183a18ee4d2393bc3b62d357d94" translate="yes" xml:space="preserve">
          <source>Sets the last time, as &lt;code&gt;POSIX time&lt;/code&gt;, when the file was written. See also &lt;code&gt;file:read_file_info/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63b2cf24d121a8191b7d039aad2c341b260a58d" translate="yes" xml:space="preserve">
          <source>Sets the limit when rekeying is to be initiated. Both the max time and max amount of data could be configured:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af48a2b2b92073cb57b2f692084af50bb03d291b" translate="yes" xml:space="preserve">
          <source>Sets the line delimiting character for line-oriented protocols (&lt;code&gt;line&lt;/code&gt;). Defaults to &lt;code&gt;$\n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6fe117c413145b19db762d11138f85ee039433" translate="yes" xml:space="preserve">
          <source>Sets the list of user annotations of &lt;code&gt;Node&lt;/code&gt; to &lt;code&gt;Annotations&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981845aba37ef35eab06f51a3ae2ac367bc155a2" translate="yes" xml:space="preserve">
          <source>Sets the local device for a multicast socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09daec059640c8b963395e48629f0c00818db5a" translate="yes" xml:space="preserve">
          <source>Sets the lock category mask to the given categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff79d91c0e32eed72387e275e6ee6fab9a61354" translate="yes" xml:space="preserve">
          <source>Sets the magic cookie of &lt;code&gt;Node&lt;/code&gt; to &lt;code&gt;Cookie&lt;/code&gt; and verifies the status of the authorization. Equivalent to calling &lt;code&gt;erlang:set_cookie(Node,Cookie)&lt;/code&gt;, followed by &lt;code&gt;&lt;a href=&quot;#is_auth-1&quot;&gt;auth:is_auth(Node)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df15ab4bf1f360b587c5373f56b589b729a7fec3" translate="yes" xml:space="preserve">
          <source>Sets the magic cookie of &lt;code&gt;Node&lt;/code&gt; to the atom &lt;code&gt;Cookie&lt;/code&gt;. If &lt;code&gt;Node&lt;/code&gt; is the local node, the function also sets the cookie of all other unknown nodes to &lt;code&gt;Cookie&lt;/code&gt; (see section &lt;code&gt;Distributed Erlang&lt;/code&gt; in the Erlang Reference Manual in System Documentation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447df44c0af27f51c4f67f1143d02e462b58f2a8" translate="yes" xml:space="preserve">
          <source>Sets the magic cookie of the node to &lt;code&gt;Cookie&lt;/code&gt;; see &lt;code&gt;&lt;a href=&quot;erlang#set_cookie-2&quot;&gt;erlang:set_cookie/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2606b578e82eed07e3cb4c6e8c744e9ea859f896" translate="yes" xml:space="preserve">
          <source>Sets the magic cookie used when connecting to &lt;code&gt;Node&lt;/code&gt;. If &lt;code&gt;Node&lt;/code&gt; is the current node, &lt;code&gt;Cookie&lt;/code&gt; is used when connecting to all new nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4bedd53e1740ad105d899475e39c0b492f1068" translate="yes" xml:space="preserve">
          <source>Sets the mapping of warning messages for &lt;code&gt;error_logger&lt;/code&gt;. Messages sent to the error logger using one of the warning routines can be mapped to errors (&lt;code&gt;+W e&lt;/code&gt;), warnings (&lt;code&gt;+W w&lt;/code&gt;), or information reports (&lt;code&gt;+W i&lt;/code&gt;). Defaults to warnings. The current mapping can be retrieved using &lt;code&gt;error_logger:warning_map/0&lt;/code&gt;. For more information, see &lt;code&gt;error_logger:warning_map/0&lt;/code&gt; in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29dc0d3c6bde8b91c5e600eef69cc9f6783479a" translate="yes" xml:space="preserve">
          <source>Sets the maximum allowed length of the packet body. If the packet header indicates that the length of the packet is longer than the maximum allowed length, the packet is considered invalid. The same occurs if the packet header is too large for the socket receive buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7a1ad8d2963723a8fd60b1b6cd900baef40048" translate="yes" xml:space="preserve">
          <source>Sets the maximum allowed size of the packet body. If the packet header indicates that the length of the packet is longer than the maximum allowed length, the packet is considered invalid. Defaults to 0, which means no size limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08d09a857db0a3afa786335f6d9718e647247a5" translate="yes" xml:space="preserve">
          <source>Sets the maximum depth of call stack back-traces in the exit reason element of &lt;code&gt;'EXIT'&lt;/code&gt; tuples. The flag also limits the stacktrace depth returned by &lt;code&gt;process_info&lt;/code&gt; item &lt;code&gt;current_stacktrace.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf0048b550dce2497152cc03e6293577c75b2b5" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of ETS tables. This limit is &lt;code&gt;partially obsolete&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf49b16a0fe474a4b12580aa850482cbcf54323" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of UDP packets to read without intervention from the socket when data is available. When this many packets have been read and delivered to the destination process, new packets are not read until a new notification of available data has arrived. Defaults to &lt;code&gt;5&lt;/code&gt;. If this parameter is set too high, the system can become unresponsive because of UDP packet flooding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4956af80d3ecccd4ebaa967b75b1efe8ce902411" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of atoms the virtual machine can handle. Defaults to 1,048,576.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc52a08a41b36c008741c220b19700a4b1f17d50" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of simultaneously existing ports for this system if a Number is passed as value. Valid range for &lt;code&gt;Number&lt;/code&gt; is &lt;code&gt;[1024-134217727]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1bfec3bb12cb13846bb9555a8f5f91e13baf7b" translate="yes" xml:space="preserve">
          <source>Sets the maximum number of simultaneously existing processes for this system if a &lt;code&gt;Number&lt;/code&gt; is passed as value. Valid range for &lt;code&gt;Number&lt;/code&gt; is &lt;code&gt;[1024-134217727]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3d0f4a3ec9c9fe2025e6b38f80c729998948a7" translate="yes" xml:space="preserve">
          <source>Sets the maximum time the test case is allowed to execute. If this time is exceeded, the test case fails with reason &lt;code&gt;timetrap_timeout&lt;/code&gt;. Notice that &lt;code&gt;init_per_testcase&lt;/code&gt; and &lt;code&gt;end_per_testcase&lt;/code&gt; are included in the timetrap time. For details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;Timetrap Time-Outs&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324d088b62be41b223f26760134fa6f5f4b4409d" translate="yes" xml:space="preserve">
          <source>Sets the name of a file containing the list of user groups for user authentication. The filename can be either absolute or relative to the &lt;code&gt;server_root&lt;/code&gt;. If the plain storage method is used, the group file is a plain text file, where each line contains a group name followed by a colon, followed by the members usernames separated by spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33014e717faffd760226fc3c32a7f5ea0967d547" translate="yes" xml:space="preserve">
          <source>Sets the name of a file containing the list of users and passwords for user authentication. The filename can be either absolute or relative to the &lt;code&gt;server_root&lt;/code&gt;. If using the plain storage method, this file is a plain text file where each line contains a username followed by a colon, followed by the non-encrypted password. If usernames are duplicated, the behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d558392153a0820116aa8acdc19a2134dbd3d561" translate="yes" xml:space="preserve">
          <source>Sets the name of the authorization realm (auth-domain) for a directory. This string informs the client about which username and password to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2b4a3a9524de729d631b79099b5ccf6d3a6cc7" translate="yes" xml:space="preserve">
          <source>Sets the named (or default) value to &lt;code&gt;value&lt;/code&gt;. Calls the Win32 API function &lt;code&gt;RegSetValueEx()&lt;/code&gt;. The value can be of three types, and the corresponding registry type is used. The supported types are the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa7a6b0b3d91aac076c25016cfd1bdb91b9ee48" translate="yes" xml:space="preserve">
          <source>Sets the number of IO poll threads to use when polling for I/O. The maximum number of poll threads allowed is 1024. The default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8252bf59f35afefeae49fd9f5ad304aa84e5c254" translate="yes" xml:space="preserve">
          <source>Sets the number of IO pollsets to use when polling for I/O. This option is only used on platforms that support concurrent updates of a pollset, otherwise the same number of pollsets are used as IO poll threads. The default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d431589418401b249620fb2560f77b2c8f2920d4" translate="yes" xml:space="preserve">
          <source>Sets the number of dirty CPU scheduler threads to create and dirty CPU scheduler threads to set online. The maximum for both values is 1024, and each value is further limited by the settings for normal schedulers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f059be725bc687428244a4ee6d3278e9410a9c2" translate="yes" xml:space="preserve">
          <source>Sets the number of dirty CPU schedulers online. Range is &lt;code&gt;1 &amp;lt;= DirtyCPUSchedulersOnline &amp;lt;= N&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the smallest of the return values of &lt;code&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/code&gt; and &lt;code&gt;erlang:system_info(schedulers_online)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153db4e3d34aceffa6303ce716fdc65e09e97afc" translate="yes" xml:space="preserve">
          <source>Sets the number of dirty I/O scheduler threads to create. Valid range is 0-1024. By default, the number of dirty I/O scheduler threads created is 10, same as the default number of threads in the &lt;code&gt;&lt;a href=&quot;#async_thread_pool_size&quot;&gt;async thread pool&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc382dc2668aae31b50c8b929069fa4ef7cf20e" translate="yes" xml:space="preserve">
          <source>Sets the number of previous commands to keep in the history list to &lt;code&gt;N&lt;/code&gt;. The previous number is returned. Defaults to 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f34246147a49d84739a8fbd1c44c94ef1dce635" translate="yes" xml:space="preserve">
          <source>Sets the number of results from previous commands to keep in the history list to &lt;code&gt;N&lt;/code&gt;. The previous number is returned. Defaults to 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a62121dcc55a541c16dbca03c971c4d0c707f75" translate="yes" xml:space="preserve">
          <source>Sets the number of scheduler threads to create and scheduler threads to set online. The maximum for both values is 1024. If the Erlang runtime system is able to determine the number of logical processors configured and logical processors available, &lt;code&gt;Schedulers&lt;/code&gt; defaults to logical processors configured, and &lt;code&gt;SchedulersOnline&lt;/code&gt; defaults to logical processors available; otherwise the default values are 1. &lt;code&gt;Schedulers&lt;/code&gt; can be omitted if &lt;code&gt;:SchedulerOnline&lt;/code&gt; is not and conversely. The number of schedulers online can be changed at runtime through &lt;code&gt;&lt;a href=&quot;erlang#system_flag_schedulers_online&quot;&gt;erlang:system_flag(schedulers_online, SchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01e97a0946f0daf9d05b34eb1ec6ece3db95a34" translate="yes" xml:space="preserve">
          <source>Sets the number of schedulers online. Range is &lt;code&gt;1 &amp;lt;= SchedulersOnline &amp;lt;= erlang:system_info(schedulers)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8ff1fa759cc8215f6ceba85374b21a711f6113" translate="yes" xml:space="preserve">
          <source>Sets the number of seconds a connection can be inactive before &lt;code&gt;epmd&lt;/code&gt; times out and closes the connection. Defaults to 60.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3973be7bf1aa683cfb6537f5b7e623d570128e" translate="yes" xml:space="preserve">
          <source>Sets the number of threads in async thread pool. Valid range is 0-1024. Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ff85aa29b5c4930ac56b8d83524b1825cd3161" translate="yes" xml:space="preserve">
          <source>Sets the path of the loader if &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; interprets a &lt;code&gt;path&lt;/code&gt; command in the start script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f14f892bed23c0a93046e148efc501f22efca7b" translate="yes" xml:space="preserve">
          <source>Sets the port owner (the connected port) to &lt;code&gt;Pid&lt;/code&gt;. Roughly the same as &lt;code&gt;Port ! {Owner, {connect, Pid}}&lt;/code&gt; except for the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1243f4206de9e59878fa5fcca92cd1e36dc0ab75" translate="yes" xml:space="preserve">
          <source>Sets the port owner of &lt;code&gt;Port&lt;/code&gt;to &lt;code&gt;NewPid&lt;/code&gt;. The old port owner &lt;code&gt;Pid&lt;/code&gt; stays linked to the port and must call &lt;code&gt;unlink(Port)&lt;/code&gt; if this is not desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10437219d9579a554d6d2d338f43778e137ea386" translate="yes" xml:space="preserve">
          <source>Sets the port owner of &lt;code&gt;Port&lt;/code&gt;to &lt;code&gt;NewPid&lt;/code&gt;. Unless the port is already closed, the port replies with&lt;code&gt;{Port,connected}&lt;/code&gt; to the old port owner. Note that the old port owner is still linked to the port, but the new port owner is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad029bbf844eebe81edd3e067ea50cd5b9a13b30" translate="yes" xml:space="preserve">
          <source>Sets the position information of &lt;code&gt;Node&lt;/code&gt; to &lt;code&gt;Pos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d250de16211908674b5dbe01fbc4373edca0777" translate="yes" xml:space="preserve">
          <source>Sets the position of &lt;code&gt;UserPrivate&lt;/code&gt; as defined for files in &lt;code&gt;file:position/2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b196fb299c2125cdfbde73581f4a4476a39fde" translate="yes" xml:space="preserve">
          <source>Sets the position of the file referenced by &lt;code&gt;IoDevice&lt;/code&gt; to &lt;code&gt;Location&lt;/code&gt;. Returns &lt;code&gt;{ok, NewPosition}&lt;/code&gt; (as absolute offset) if successful, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;. &lt;code&gt;Location&lt;/code&gt; is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6883a3ea18416f403ba8ad9a0d501e2eefa78b3d" translate="yes" xml:space="preserve">
          <source>Sets the post-comments of &lt;code&gt;Node&lt;/code&gt; to &lt;code&gt;Comments&lt;/code&gt;. &lt;code&gt;Comments&lt;/code&gt; should be a possibly empty list of abstract comments, in top-down textual order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b0fbcbff045cc34e57a32fd1f4e7df3709a04b" translate="yes" xml:space="preserve">
          <source>Sets the pre-comments of &lt;code&gt;Node&lt;/code&gt; to &lt;code&gt;Comments&lt;/code&gt;. &lt;code&gt;Comments&lt;/code&gt; should be a possibly empty list of abstract comments, in top-down textual order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d157d45bafcc2fac8b81e213b89a1d03c8b7a90d" translate="yes" xml:space="preserve">
          <source>Sets the priority of the new process. Equivalent to executing &lt;code&gt;&lt;a href=&quot;#process_flag_priority&quot;&gt;process_flag(priority,Level)&lt;/a&gt;&lt;/code&gt; in the start function of the new process, except that the priority is set before the process is selected for execution for the first time. For more information on priorities, see &lt;code&gt;&lt;a href=&quot;#process_flag_priority&quot;&gt;process_flag(priority,Level)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a61461689281b3d9e3ae53839861a878ef82f2" translate="yes" xml:space="preserve">
          <source>Sets the process priority. &lt;code&gt;Level&lt;/code&gt; is an atom. Four priority levels exist: &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt;, and &lt;code&gt;max&lt;/code&gt;. Default is &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b1f645e434cb258a1d300e632d91fdda4f05f7" translate="yes" xml:space="preserve">
          <source>Sets the range of characters that the system considers printable in heuristic detection of strings. This typically affects the shell, debugger, and &lt;code&gt;io:format&lt;/code&gt; functions (when &lt;code&gt;~tp&lt;/code&gt; is used in the format string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214aa9e0cde51c6f24ca5bb8fc39f132f748f85d" translate="yes" xml:space="preserve">
          <source>Sets the shell prompt function to &lt;code&gt;PromptFunc&lt;/code&gt;. The previous prompt function is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb087048709547fc663b275e9b6886b0adfc31d0" translate="yes" xml:space="preserve">
          <source>Sets the specified trace flags on the specified processes or ports. Flag &lt;code&gt;timestamp&lt;/code&gt; is always turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5620ce3649c4687e1cfb824230792252a14432a9" translate="yes" xml:space="preserve">
          <source>Sets the stack trace option, see section &lt;code&gt;&lt;a href=&quot;#stack_trace&quot;&gt;Stack Trace&lt;/a&gt;&lt;/code&gt;. Does not affect existing debugged processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e15eff48e53b53579fe684ef80bdea8be78ba40" translate="yes" xml:space="preserve">
          <source>Sets the state of the &lt;code&gt;message_queue_data&lt;/code&gt; process flag. &lt;code&gt;MQD&lt;/code&gt; is to be either &lt;code&gt;off_heap&lt;/code&gt; or &lt;code&gt;on_heap&lt;/code&gt;. The default &lt;code&gt;message_queue_data&lt;/code&gt; process flag is determined by command-line argument &lt;code&gt;&lt;a href=&quot;erl#+hmqd&quot;&gt;+hmqd&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;. For more information, see the documentation of &lt;code&gt;&lt;a href=&quot;#process_flag_message_queue_data&quot;&gt;process_flag(message_queue_data,MQD)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea853c8ced97def75717cf0264f6ffa79a284e1d" translate="yes" xml:space="preserve">
          <source>Sets the system directory, containing the host key files that identify the host keys for &lt;code&gt;ssh&lt;/code&gt;. Defaults to &lt;code&gt;/etc/ssh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadfc4f2c22a540bc9158c5cdf3feefc2deaaa9f" translate="yes" xml:space="preserve">
          <source>Sets the system performance monitoring options. &lt;code&gt;MonitorPid&lt;/code&gt; is a local process identifier (pid) receiving system monitor messages. The second argument is a list of monitoring options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a32ff972234c4763ee9efb0d8897edf310089c2" translate="yes" xml:space="preserve">
          <source>Sets the system tracer. The system tracer can be either a process, port or &lt;code&gt;tracer module&lt;/code&gt; denoted by &lt;code&gt;Tracer&lt;/code&gt;. Returns the previous value (which can be &lt;code&gt;false&lt;/code&gt; if no system tracer is active).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b584505d01661ee314ccddd68b712dd9da0002c2" translate="yes" xml:space="preserve">
          <source>Sets the text strings that the daemon sends to the client for presentation to the user when using &lt;code&gt;keyboard-interactive&lt;/code&gt; authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6a52e3fe331972e102400ad15024d26902ce1a" translate="yes" xml:space="preserve">
          <source>Sets the three diffie-hellman-group-exchange parameters that guides the connected server in choosing a group. See &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4419&quot;&gt;RFC 4419&lt;/a&gt;&lt;/code&gt; for the details. The default value is &lt;code&gt;{1024, 6144, 8192}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dea03eddbfbdc17b4856b2ed4739297317bf436" translate="yes" xml:space="preserve">
          <source>Sets the time, as &lt;code&gt;POSIX time&lt;/code&gt;, when the file was created. See also &lt;code&gt;file:read_file_info/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250d8fbdeb78ba08efed81e67dd78ccb714268c7" translate="yes" xml:space="preserve">
          <source>Sets the trace token for the calling process to &lt;code&gt;Token&lt;/code&gt;. If &lt;code&gt;Token == []&lt;/code&gt; then tracing is disabled, otherwise &lt;code&gt;Token&lt;/code&gt; should be an Erlang term returned from &lt;code&gt;get_token/0&lt;/code&gt; or &lt;code&gt;set_token/1&lt;/code&gt;. &lt;code&gt;set_token/1&lt;/code&gt; can be used to temporarily exclude message passing from the trace by setting the trace token to empty like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e177a1c4c107bb86d8df071af64538578333e871" translate="yes" xml:space="preserve">
          <source>Sets the trace token to empty for all processes on the local node. The process internal counters used to create the serial of the trace token is set to 0. The trace token is set to empty for all messages in message queues. Together this will effectively stop all ongoing sequential tracing in the local node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85bdc9737a006802bb3468719a30c56ed2b6420" translate="yes" xml:space="preserve">
          <source>Sets the trigger action of the breakpoint at &lt;code&gt;Line&lt;/code&gt; in &lt;code&gt;Module&lt;/code&gt; to &lt;code&gt;Action&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1019b895f47525edc0d1ccc4bb351ad518bd49" translate="yes" xml:space="preserve">
          <source>Sets the type of authentication database that is used for the directory. The key difference between the different methods is that dynamic data can be saved when Mnesia and Dets are used. This property is called &lt;code&gt;AuthDbType&lt;/code&gt; in the Apache-like configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55760789ebae0eb5eec69876adf78743b98b39e" translate="yes" xml:space="preserve">
          <source>Sets the user directory. That is, the directory containing &lt;code&gt;ssh&lt;/code&gt; configuration files for the user, such as &lt;code&gt;known_hosts&lt;/code&gt;, &lt;code&gt;id_rsa&lt;/code&gt;, &lt;code&gt;id_dsa&lt;/code&gt;&amp;gt;, &lt;code&gt;id_ecdsa&lt;/code&gt; and &lt;code&gt;authorized_key&lt;/code&gt;. Defaults to the directory normally referred to as &lt;code&gt;~/.ssh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d825fb37837385173f37fa7881f3347a79ab999" translate="yes" xml:space="preserve">
          <source>Sets the user-defined &lt;code&gt;CpuTopology&lt;/code&gt;. The user-defined CPU topology overrides any automatically detected CPU topology. By passing &lt;code&gt;undefined&lt;/code&gt; as &lt;code&gt;CpuTopology&lt;/code&gt;, the system reverts to the CPU topology automatically detected. The returned value equals the value returned from &lt;code&gt;erlang:system_info(cpu_topology)&lt;/code&gt; before the change was made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b72f27156031ba71a8d4202b37098640e69fc41" translate="yes" xml:space="preserve">
          <source>Sets the value of an environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e01758d601353244a736a3ca2896d9893ba37c" translate="yes" xml:space="preserve">
          <source>Sets the value of configuration parameter &lt;code&gt;Par&lt;/code&gt; for &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c27c673096bb19cfcdced65bcaa10b64df36dc" translate="yes" xml:space="preserve">
          <source>Sets the value of the node trace control word to &lt;code&gt;TCW&lt;/code&gt;, which is to be an unsigned integer. For more information, see function &lt;code&gt;set_tcw&lt;/code&gt; in section &quot;Match Specifications in Erlang&quot; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7182205efd9afd1346318005e01f5aa86d91f5ff" translate="yes" xml:space="preserve">
          <source>Sets the value of the source, as returned by &lt;code&gt;module_info(compile)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3ed06f1faae89c65cc4108c40990ddbc59d3b2" translate="yes" xml:space="preserve">
          <source>Sets the wanted time-out value for the server to set up a request connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2e325c916954b457f470ed8b9a2c99afd59b9f" translate="yes" xml:space="preserve">
          <source>Sets thread-specific data associated with &lt;code&gt;key&lt;/code&gt; for the calling thread. You are only allowed to set thread-specific data for threads while they are fully under your control. For example, if you set thread-specific data in a thread calling a driver callback function, it must be cleared, that is, set to &lt;code&gt;NULL&lt;/code&gt;, before returning from the driver callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13ebdcb8f9c816521928fa2ebf58ae63bc5aba3" translate="yes" xml:space="preserve">
          <source>Sets trace pattern for &lt;strong&gt;message receiving&lt;/strong&gt;. Must be combined with &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; to set the &lt;code&gt;'receive'&lt;/code&gt; trace flag for one or more processes. By default all messages received by &lt;code&gt;'receive'&lt;/code&gt; traced processes are traced. To limit traced receive events based on the message content, the sender and/or the receiver, use &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000acbf623dd0a04850e3eb66addbc07363da5f6" translate="yes" xml:space="preserve">
          <source>Sets trace pattern for &lt;strong&gt;message sending&lt;/strong&gt;. Must be combined with &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; to set the &lt;code&gt;send&lt;/code&gt; trace flag for one or more processes. By default all messages sent from &lt;code&gt;send&lt;/code&gt; traced processes are traced. To limit traced send events based on the message content, the sender and/or the receiver, use &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d302ee41855a16aeca79fd40608595aaab94477" translate="yes" xml:space="preserve">
          <source>Sets trace patterns on global function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42634745b031a96191e0de66538275f46ca3009d" translate="yes" xml:space="preserve">
          <source>Sets trace patterns on local and global function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0192a66af59bf23c109408fa8d652e9f7a095877" translate="yes" xml:space="preserve">
          <source>Sets trace patterns on messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20b5257c8e818508783afccee9848f1d15a7976" translate="yes" xml:space="preserve">
          <source>Sets up a Unix Domain Socket. See &lt;code&gt;&lt;a href=&quot;inet#type-local_address&quot;&gt;inet:local_address()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b753fabf9b556745a4eefcc949081ec333308d37" translate="yes" xml:space="preserve">
          <source>Sets up a connection to &lt;code&gt;Node&lt;/code&gt;. Returns &lt;code&gt;pong&lt;/code&gt; if it is successful, otherwise &lt;code&gt;pang&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe298c3aa8927bcebad0c320253b098aeef5b1e" translate="yes" xml:space="preserve">
          <source>Sets up a connection to an Erlang node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9088fae4ec74e8a34481645dcda97cdce0454731" translate="yes" xml:space="preserve">
          <source>Sets up a socket to listen on port &lt;code&gt;Port&lt;/code&gt; on the local host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22f13589dbf577fc1fc7b2e192f2896825076d0" translate="yes" xml:space="preserve">
          <source>Sets up a socket to listen on the IP address and port number it is bound to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f7db90674d7030b023f5511d952ba3ab50d90d" translate="yes" xml:space="preserve">
          <source>Sets up the socket for IPv4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268135a3a9b8586213ce649e0e938b5d7832f78c" translate="yes" xml:space="preserve">
          <source>Sets up the socket for IPv4. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155bd11114ba428e9118aeae911dce2f96284be3" translate="yes" xml:space="preserve">
          <source>Sets up the socket for IPv6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151f5bdfc57ff342c5c7407e70c7d5a7f7364306" translate="yes" xml:space="preserve">
          <source>Sets verbosity for the designated process. For the lowest verbosity &lt;code&gt;silence&lt;/code&gt;, nothing is printed. The higher the verbosity, the more is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc807f18af7e2ec34af31e8d501e6bbfd070a54" translate="yes" xml:space="preserve">
          <source>Sets warning level to &lt;code&gt;Number&lt;/code&gt;. Defaults to &lt;code&gt;1&lt;/code&gt;. To turn off warnings, use &lt;code&gt;-W0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e977113917830f9919d655c7161aaf4b253609" translate="yes" xml:space="preserve">
          <source>Sets when and how to attach to a debugged process automatically, see &lt;code&gt;&lt;a href=&quot;int#auto_attach-0&quot;&gt;int:auto_attach/2&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Function&lt;/code&gt; defaults to the standard function used by Debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6852b168dabd12c3dfbafe087c4d253711cdc5d6" translate="yes" xml:space="preserve">
          <source>Sets whether to kill processes reaching the maximum heap size or not. Default to &lt;code&gt;true&lt;/code&gt;. For more information, see &lt;code&gt;&lt;a href=&quot;erlang#process_flag_max_heap_size&quot;&gt;process_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5edbc9f34510070fcc2628f8a5499511c41d843" translate="yes" xml:space="preserve">
          <source>Sets whether to send an error logger message or not for processes reaching the maximum heap size. Defaults to &lt;code&gt;true&lt;/code&gt;. For more information, see &lt;code&gt;&lt;a href=&quot;erlang#process_flag_max_heap_size&quot;&gt;process_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4bf1689aa6558bcc36de9fa2511f7420ccd2f5" translate="yes" xml:space="preserve">
          <source>Sets which areas are to be visible. Does not affect other Attach Process windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87680df1e188aeb28980ce9ee7a1bce6e692209b" translate="yes" xml:space="preserve">
          <source>Setting TERM environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56be8fa38057df49a2d4669fd1732a946514c951" translate="yes" xml:space="preserve">
          <source>Setting a driver monitor for &lt;code&gt;loading&lt;/code&gt; eventually leads to one of the following messages being sent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5930b58898b1200ca714f8da35aca07bd97aa15" translate="yes" xml:space="preserve">
          <source>Setting a timer with the same &lt;code&gt;Name&lt;/code&gt; while it is running will restart it with the new time-out value. Therefore it is possible to cancel a specific time-out by setting it to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dbe73b75e3132da6c0f88cd457f518463da818" translate="yes" xml:space="preserve">
          <source>Setting the capture &lt;code&gt;Type&lt;/code&gt; to &lt;code&gt;binary&lt;/code&gt; gives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb6a2bf7d379a0ba8bba983befb348c71f7da48" translate="yes" xml:space="preserve">
          <source>Setting the environment variable to a negative value does not reboot the runtime system until the crash dump file is completly written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02b22d3c6077ae6046c20ba84fd141c4597a662" translate="yes" xml:space="preserve">
          <source>Setting these variables wrong may cause hard to detect runtime errors. If you need to change these values, &lt;strong&gt;really&lt;/strong&gt; make sure that the values are correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593e05cc199b5354a496052a90ad11424ea46336" translate="yes" xml:space="preserve">
          <source>Setting this flag to &lt;code&gt;false&lt;/code&gt; is not supported on all systems. The flag is then ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8927ca5a33183f7759ed85a781a6453e7449e504" translate="yes" xml:space="preserve">
          <source>Setting this flag to &lt;code&gt;false&lt;/code&gt; is possibly not supported on all systems. The flag is then ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bad2817493376033146aa725b2c62429dfb949" translate="yes" xml:space="preserve">
          <source>Setting this option on platforms where it does not exist is ignored. Getting this option with &lt;code&gt;&lt;a href=&quot;#getopts-2&quot;&gt;getopts/2&lt;/a&gt;&lt;/code&gt; returns no value, that is, the returned list does not contain an &lt;code&gt;{ipv6_v6only,_}&lt;/code&gt; tuple. On Windows, the option does not exist, but it is emulated as a read-only option with value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7882ea914fd57a6b70a77be9894b15da220ad16" translate="yes" xml:space="preserve">
          <source>Setting this option to &lt;code&gt;true&lt;/code&gt; allows you to distinguish between a connection that was closed normally, and one that was aborted (intentionally or unintentionally) by the TCP peer. A call to &lt;code&gt;&lt;a href=&quot;gen_tcp#recv-2&quot;&gt;gen_tcp:recv/2&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;{error, econnreset}&lt;/code&gt;. In active mode, the controlling process receives a &lt;code&gt;{tcp_error, Socket, econnreset}&lt;/code&gt; message before the usual &lt;code&gt;{tcp_closed, Socket}&lt;/code&gt;, as is the case for any other socket error. Calls to &lt;code&gt;&lt;a href=&quot;gen_tcp#send-2&quot;&gt;gen_tcp:send/2&lt;/a&gt;&lt;/code&gt; also returns &lt;code&gt;{error, econnreset}&lt;/code&gt; when it is detected that a TCP peer has sent an RST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637256b8a8ace5ebe12ef97908b3a787a8c7db8a" translate="yes" xml:space="preserve">
          <source>Setting this timer while it is running will restart it with the new time-out value. Therefore it is possible to cancel this time-out by setting it to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df43883f77d81a0444a883d2bd164d4cdfbf7dfe" translate="yes" xml:space="preserve">
          <source>Setting up an Erlang tracer on a set of nodes and connecting trace clients to the ports of these tracers is not intuitive. In order to make this it easier the &lt;code&gt;Event Tracer&lt;/code&gt; has a notion of global tracing. When used, the &lt;code&gt;et_collector&lt;/code&gt; process will monitor Erlang nodes and when one connects, an Erlang tracer will automatically be started on the newly connected node. A corresponding trace client will also be started on the &lt;code&gt;Collector&lt;/code&gt; node in order to automatically forward the trace &lt;code&gt;Events&lt;/code&gt; to the &lt;code&gt;Collector&lt;/code&gt;. Set the boolean parameter &lt;code&gt;trace_global&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for either the &lt;code&gt;et_collector&lt;/code&gt; or &lt;code&gt;et_viewer&lt;/code&gt; in order to activate the global tracing. There is no restriction on how many concurrent (anonymous) collectors you can have, but you can only have one &lt;strong&gt;global&lt;/strong&gt;&lt;code&gt;Collector&lt;/code&gt; as its name is registered in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92be12f51cfcae1379d05955e4edd3794a720f91" translate="yes" xml:space="preserve">
          <source>Setting up connections, sending and receiving data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bcae303564e4f2b0a81dbc82c1c2a6226bacd0" translate="yes" xml:space="preserve">
          <source>Setting up the trace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51e3da2458bdd26e8b067eb0fdeaf14a14ae006" translate="yes" xml:space="preserve">
          <source>Setup Telnet connection to a Unix host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663702dff631642a2cf35f5021ac8225355092ec" translate="yes" xml:space="preserve">
          <source>Setup a connection to an LDAP server, the &lt;code&gt;HOST&lt;/code&gt;'s are tried in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bdeaa169ac79e6d85855e41f472a17ba2a4109" translate="yes" xml:space="preserve">
          <source>Setup a connection to the MGC with megaco:connect/4 and provide it with a receive handle obtained from megaco:user_info/2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f49948dfbe508cb0e9b5a2e0b068b2ceac48204" translate="yes" xml:space="preserve">
          <source>Several binary terms can be managed by the same resource object. The destructor is not called until the last binary is garbage collected. This can be useful to return different parts of a larger binary buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f203ffdc28fd3a5e01f37c57a0b2ffb21a1404a5" translate="yes" xml:space="preserve">
          <source>Several configuration options for authentication handling are available in &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/[3,4]&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ssh#daemon-2&quot;&gt;ssh:daemon/[2,3]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a1068b0ec5899384907dd32033d6b291c50746" translate="yes" xml:space="preserve">
          <source>Several entities (&lt;code&gt;mib-server&lt;/code&gt; via the its data module and the &lt;code&gt;symbolic-store&lt;/code&gt;) of the snmp agent uses this for storage of miscelaneous mib related data dataretrieved while loading a mib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dc841907020a6c99a3862103e41b6f954068f8" translate="yes" xml:space="preserve">
          <source>Several module attributes have predefined meanings. Some of them have arity two, but user-defined module attributes must have arity one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b1f44e8ea5da422fccfc427560cce56bf4ec0b" translate="yes" xml:space="preserve">
          <source>Several of the procedures in this section require expert knowledge of the Solaris operating system. For most of them super user privilege is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4878bcf5e2a41e786bb27ba681ceac3573bfe05" translate="yes" xml:space="preserve">
          <source>Several things are wrong with the messenger example in &lt;code&gt;&lt;a href=&quot;conc_prog#ex&quot;&gt;A Larger Example&lt;/a&gt;&lt;/code&gt;. For example, if a node where a user is logged on goes down without doing a logoff, the user remains in the server's &lt;code&gt;User_List&lt;/code&gt;, but the client disappears. This makes it impossible for the user to log on again as the server thinks the user already is logged on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5312822a3678145f8534f5413245ef38ad1e54" translate="yes" xml:space="preserve">
          <source>Several transactions can run concurrently, and their execution is fully synchronized by the DBMS. Mnesia ensures that no two processes manipulate data simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92056ce55485ad43691924b2fa50c145b64665a0" translate="yes" xml:space="preserve">
          <source>Several users have created Erlang port drivers, linked-in drivers, or NIFs that allow Erlang code to try to activate a probe, e.g. &lt;code&gt;foo_module:dtrace_probe(&quot;message goes here!&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953228d3c8c820114f1fb9c582c86cdc57738b22" translate="yes" xml:space="preserve">
          <source>Shall ack's be accumulated or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd9163cd11e283c13779c403a7f468f2fe1f10f" translate="yes" xml:space="preserve">
          <source>Shall outgoing messages be segmented or not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84da0d111d1591fb8d93639edcffa7d1e68ef6c3" translate="yes" xml:space="preserve">
          <source>Shall requests be accumulated or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d41fa6accb18af237aee7055043bfe6e9ffefd" translate="yes" xml:space="preserve">
          <source>Shall the agent utilize the mib server lookup cache or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1999b28ce10eeddd9229bdd4cdb29f0107536815" translate="yes" xml:space="preserve">
          <source>Sharada</source>
          <target state="translated">Sharada</target>
        </trans-unit>
        <trans-unit id="4798770317cbbba3bd3456b905b876a908476919" translate="yes" xml:space="preserve">
          <source>Shared subterms are &lt;strong&gt;not&lt;/strong&gt; preserved in the following cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61106366759b055e0ad334722705582952604753" translate="yes" xml:space="preserve">
          <source>Shavian</source>
          <target state="translated">Shavian</target>
        </trans-unit>
        <trans-unit id="ef9616c857753c597c39d03dcea5d1d91ea29e1e" translate="yes" xml:space="preserve">
          <source>Shell break mode, which allows the user to kill the current shell, start multiple shells, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1a01079b5835555814261f1212f480e1691e25" translate="yes" xml:space="preserve">
          <source>Short for &lt;code&gt;[return_comments, return_white_spaces]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76db78875af6459d9f0696e37664eeca77bff7e0" translate="yes" xml:space="preserve">
          <source>Short for &lt;code&gt;{sync_transaction, infinity}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31adfe9300bdea8479ecdebe4d15167c20d2a058" translate="yes" xml:space="preserve">
          <source>Short for &lt;code&gt;{timeout,Time,Time}&lt;/code&gt;, that is, the time-out message is the time-out time. This form exists to make the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; return value &lt;code&gt;{next_state,NextState,NewData,Time}&lt;/code&gt; allowed like for &lt;code&gt;gen_fsm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5066037d01a80777a796bb823f34a8a4627bc4" translate="yes" xml:space="preserve">
          <source>Short for &lt;code&gt;{transaction, infinity}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5cc636f6e706f346639f25e6caf9640ec221fa" translate="yes" xml:space="preserve">
          <source>Short for iterate(Handle, Prev, Limit, undefined, Prev) -&amp;gt; NewAcc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eddb382ca301cea608270411284f3b7a5baecb7" translate="yes" xml:space="preserve">
          <source>Short-circuit expressions (&lt;code&gt;andalso&lt;/code&gt;/&lt;code&gt;orelse&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d03a5e2757528aa47d1292f70f2e09181472bf" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;{shell, true}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4430a48833772a9118c84cdf670050ab3520f691" translate="yes" xml:space="preserve">
          <source>Shortcuts are provided for the most common match specifications (to not force you to use &lt;code&gt;dbg:fun2ms&lt;/code&gt; continually).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a834720e0a7fbb62e1fa52d859544b13c9feac3" translate="yes" xml:space="preserve">
          <source>Shorthand for &lt;code&gt;&lt;a href=&quot;#allocations-1&quot;&gt;allocations(#{}).&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75477da2f51c368c966e096bed63b71628d41fa6" translate="yes" xml:space="preserve">
          <source>Shorthand for &lt;code&gt;&lt;a href=&quot;#carriers-1&quot;&gt;carriers(#{}).&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecedead60dacea1d8e283b2d1d72c8978ac59af" translate="yes" xml:space="preserve">
          <source>Should dynamic tracing be enabled in the current build, either by configuring with &lt;code&gt;./configure --with-dynamic-trace=dtrace&lt;/code&gt; or with &lt;code&gt;./configure --with-dynamic-trace=systemtap&lt;/code&gt;, the module can be used for two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0437abf42c4b352aef94f3921643a39aab05c60" translate="yes" xml:space="preserve">
          <source>Should indicate a row number in the result set. When used together with the option &lt;code&gt;relative&lt;/code&gt;it will be used as an offset from the current cursor position, when used together with the option &lt;code&gt;absolute&lt;/code&gt;it will be interpreted as a row number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87bbe6664ba23178fc2f08be7a16df28de849d32" translate="yes" xml:space="preserve">
          <source>Should this state enter call return any of the mentioned &lt;code&gt;repeat_*&lt;/code&gt; callback results it is repeated again, with the updated &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb1c009b2a3939af7acb19eae44ed0b4006d58f" translate="yes" xml:space="preserve">
          <source>Shows statistics about how many processes and ports of different priorities are scheduled on this scheduler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca56f8737e5ba39e8bb4fa3267f178eeefba8dd" translate="yes" xml:space="preserve">
          <source>Shows the Debugger documentation. This function requires a web browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a0366eca6c33c68a7ae8650693a9b72c0ed968" translate="yes" xml:space="preserve">
          <source>Shows the list of traced nodes on the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7317b061e054bbf75a81c9cf23a533ab246505" translate="yes" xml:space="preserve">
          <source>Shows the process current stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd62206b65136a95184a6d1bc0e6d27d271ad8a" translate="yes" xml:space="preserve">
          <source>Shows the process dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1e5e65f35d2ced1865bbb58bc31b796acd9dc9" translate="yes" xml:space="preserve">
          <source>Shows the process information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ea81fb58517940197f2aafaef0ab992149d1f7" translate="yes" xml:space="preserve">
          <source>Shows the process messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c539f252c25e14ac8c38ae7080c889438210e1db" translate="yes" xml:space="preserve">
          <source>Shows the process state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e04a038b0f4a60ba35ed85bd576feefa37527a" translate="yes" xml:space="preserve">
          <source>Shut down the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5929b8178813a482c23e31d212e2b87ab625aacb" translate="yes" xml:space="preserve">
          <source>Shut down the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771605b7e2faa19b853b2b22a601d4632a4de900" translate="yes" xml:space="preserve">
          <source>Shutdown messages. If the process traps exits, it must be able to handle a shutdown request from its parent, the supervisor. The message &lt;code&gt;{'EXIT', Parent, Reason}&lt;/code&gt; from the parent is an order to terminate. The process must terminate when this message is received, normally with the same &lt;code&gt;Reason&lt;/code&gt; as &lt;code&gt;Parent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd17f62764d26edd13c5721eca15f106d89d872" translate="yes" xml:space="preserve">
          <source>Shutdown the connection after sending an unbindRequest to the server. If the connection is tls the connection will be closed with &lt;code&gt;ssl:close/1&lt;/code&gt;, otherwise with &lt;code&gt;gen_tcp:close/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bbb0a6e5cac678bc175ea6d85ec4b15910fc2a" translate="yes" xml:space="preserve">
          <source>Siddham</source>
          <target state="translated">Siddham</target>
        </trans-unit>
        <trans-unit id="605784b6a41da8c216384af17fedaf4ea7949e51" translate="yes" xml:space="preserve">
          <source>Signals on a condition variable. That is, if other threads are waiting on the condition variable being signaled, &lt;strong&gt;one&lt;/strong&gt; of them is woken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42db5fa15b2aaf10f4ab3ca3339ac18a184f963" translate="yes" xml:space="preserve">
          <source>Signals that no more options will follow. The rest of the arguments is treated as filenames, even if they start with hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81626d91d87689423a127ef78b79b6280ae1d9" translate="yes" xml:space="preserve">
          <source>Signals to Erlang that the driver has encountered an EOF and is to be closed, unless the port was opened with option &lt;code&gt;eof&lt;/code&gt;, in which case &lt;code&gt;eof&lt;/code&gt; is sent to the port. Otherwise the port is closed and an &lt;code&gt;'EXIT'&lt;/code&gt; message is sent to the port owner process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b32371d9d1262296723dfb57c3bb8cc193e0d3" translate="yes" xml:space="preserve">
          <source>Signals to Erlang that the driver has encountered an error and is to be closed. The port is closed and the tuple &lt;code&gt;{'EXIT', error, Err}&lt;/code&gt; is sent to the port owner process, where error is an error atom (&lt;code&gt;driver_failure_atom&lt;/code&gt; and &lt;code&gt;driver_failure_posix&lt;/code&gt;) or an integer (&lt;code&gt;driver_failure&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8393a49bd477502a464f4e8c274610689e23884" translate="yes" xml:space="preserve">
          <source>Signature OID from a certificate or a certificate revocation list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4192711e69a169ef257a8ed11ef7b729ebe7f27" translate="yes" xml:space="preserve">
          <source>Signed 32-bit integer in big-endian format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f027fb105359b9adbe2c5e3e92eecc0d931640" translate="yes" xml:space="preserve">
          <source>Significant slowdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf29fdf7d3efb52ff1d067430cfd6fabe62a793" translate="yes" xml:space="preserve">
          <source>Signs an 'OTPTBSCertificate'. Returns the corresponding DER-encoded certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412a0c1f6813d40930f20e83a07080e463a488ae" translate="yes" xml:space="preserve">
          <source>Silent mode is inhibited by executing &lt;code&gt;erlang:trace(_, false, [silent|_])&lt;/code&gt;, or by a match specification executing the function &lt;code&gt;{silent, false}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5b38bafdb2cd68736d6e58f39158c6684c316b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#+IOp&quot;&gt;+IOp&lt;/a&gt;&lt;/code&gt; but uses percentages to set the number of IO pollsets to create, based on the number of poll threads configured. If both &lt;code&gt;+IOPp&lt;/code&gt; and &lt;code&gt;+IOp&lt;/code&gt; are used, &lt;code&gt;+IOPp&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beaae04fe80dac03472574f6a33a1acd3da285ba" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#+IOt&quot;&gt;+IOt&lt;/a&gt;&lt;/code&gt; but uses percentages to set the number of IO poll threads to create, based on the number of schedulers configured. If both &lt;code&gt;+IOPt&lt;/code&gt; and &lt;code&gt;+IOt&lt;/code&gt; are used, &lt;code&gt;+IOPt&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed1027dcf2ea46a9a4998d498242256f205af11" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#+S&quot;&gt;+S&lt;/a&gt;&lt;/code&gt; but uses percentages to set the number of scheduler threads to create, based on logical processors configured, and scheduler threads to set online, based on logical processors available. Specified values must be &amp;gt; 0. For example, &lt;code&gt;+SP 50:25&lt;/code&gt; sets the number of scheduler threads to 50% of the logical processors configured, and the number of scheduler threads online to 25% of the logical processors available. &lt;code&gt;SchedulersPercentage&lt;/code&gt; can be omitted if &lt;code&gt;:SchedulersOnlinePercentage&lt;/code&gt; is not and conversely. The number of schedulers online can be changed at runtime through &lt;code&gt;&lt;a href=&quot;erlang#system_flag_schedulers_online&quot;&gt;erlang:system_flag(schedulers_online, SchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7daafcf7ad6c93a7a6f9d32a59194055af91723" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt; but uses percentages to set the number of dirty CPU scheduler threads to create and the number of dirty CPU scheduler threads to set online. Specified values must be &amp;gt; 0. For example, &lt;code&gt;+SDPcpu 50:25&lt;/code&gt; sets the number of dirty CPU scheduler threads to 50% of the logical processors configured and the number of dirty CPU scheduler threads online to 25% of the logical processors available. &lt;code&gt;DirtyCPUSchedulersPercentage&lt;/code&gt; can be omitted if &lt;code&gt;:DirtyCPUSchedulersOnlinePercentage&lt;/code&gt; is not and conversely. The number of dirty CPU schedulers online can be changed at runtime through &lt;code&gt;&lt;a href=&quot;erlang#system_flag_dirty_cpu_schedulers_online&quot;&gt;erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23646d43525fa8727fd14d31f241c4e8c2382559" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#get_all_values-2&quot;&gt;get_all_values/2&lt;/a&gt;&lt;/code&gt;, but each value is wrapped in a list unless it is already itself a list. The resulting list of lists is concatenated. This is often useful for &quot;incremental&quot; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71338b1d526b480e927286135466622d44048af" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#get_value-2&quot;&gt;get_value/2&lt;/a&gt;&lt;/code&gt;, but returns the list of values for &lt;strong&gt;all&lt;/strong&gt; entries &lt;code&gt;{Key, Value}&lt;/code&gt; in &lt;code&gt;List&lt;/code&gt;. If no such entry exists, the result is the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e79016034236afb8e96918f496249aefb66daea" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#parse-3&quot;&gt;parse/3&lt;/a&gt;&lt;/code&gt;, but does a more quick-and-dirty processing of the code. See &lt;code&gt;&lt;a href=&quot;#quick_parse_file-2&quot;&gt;quick_parse_file/2&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591c6115ca4de4119e98f9d60e0ba5162fc97c7e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file/2&lt;/a&gt;&lt;/code&gt;, but does a more quick-and-dirty processing of the code. Macro definitions and other preprocessor directives are discarded, and all macro calls are replaced with atoms. This is useful when only the main structure of the code is of interest, and not the details. Furthermore, the quick-parse method can usually handle more strange cases than the normal, more exact parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66054f6b91c1d4dc893f7baed3f4fc4b0f39d068" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#parse_form-3&quot;&gt;parse_form/3&lt;/a&gt;&lt;/code&gt;, but does a more quick-and-dirty processing of the code. See &lt;code&gt;&lt;a href=&quot;#quick_parse_file-2&quot;&gt;quick_parse_file/2&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfc453ab3294622bc18b55823b9dca359bf7eaa" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;#text-1&quot;&gt;text/1&lt;/a&gt;&lt;/code&gt;, but the result is treated as having zero width. This is regardless of the actual length of the string. Null text is typically used for markup, which is supposed to have no effect on the actual layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a313253bd8ecf55665744df8607d46a41cb09a4e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Busy&lt;/code&gt;, but for processor states that have been identified as non-busy (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e027038a1d8d631fe5efff041f41ef409e7329" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;epmd -names&lt;/code&gt;, see &lt;code&gt;erts:epmd(1)&lt;/code&gt;. &lt;code&gt;Host&lt;/code&gt; defaults to the local host. Returns the names and associated port numbers of the Erlang nodes that &lt;code&gt;epmd&lt;/code&gt; registered at the specified host. Returns &lt;code&gt;{error, address}&lt;/code&gt; if &lt;code&gt;epmd&lt;/code&gt; is not operational.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fcb52db95f9a14e4104723017ba9e2eb50e140" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;erl_receive_msg&lt;/code&gt;. The difference is that &lt;code&gt;erl_xreceive_msg&lt;/code&gt; expects the buffer to have been allocated by &lt;code&gt;malloc&lt;/code&gt;, and reallocates it if the received message does not fit into the original buffer. Therefore both buffer and buffer length are given as pointers; their values can change by the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a3520b99d03fedfe093fa71f689f66180f99db" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;fprintf&lt;/code&gt; but this format string also accepts &lt;code&gt;&quot;%T&quot;&lt;/code&gt;, which formats Erlang terms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0763544797f9cc930c9c7101e8ab0d1d22e9c8a2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;restart&lt;/code&gt;, but does not try to detect cyclic restarts; it is expected that some other mechanism is present to avoid the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca14a71b883332df372dbc2ac708b02bc19611b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;s&lt;/code&gt;, but the resulting string is converted into an atom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b6788042ed4402f8196ce090ffe41800f243e1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;snprintf&lt;/code&gt; but this format string also accepts &lt;code&gt;&quot;%T&quot;&lt;/code&gt;, which formats Erlang terms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc61bb7ba306f6c5743c6b046f81f49228917865" translate="yes" xml:space="preserve">
          <source>Similar to option &lt;code&gt;basic_validation&lt;/code&gt;. No code is generated, but more compiler passes are run to ensure that warnings generated by the optimization passes are generated (such as clauses that will not match, or expressions that are guaranteed to fail with an exception at runtime).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09ef632a09513d38827bddcf23558af804221c6" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;debug_info_key&lt;/code&gt; option, but the key is read from an &lt;code&gt;.erlang.crypt&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbf22d2d36bde3d87c90b58638094bd2d62b855" translate="yes" xml:space="preserve">
          <source>Similarly, binaries that look like UTF-8 encoded strings are output with the binary string syntax if the &lt;code&gt;t&lt;/code&gt; modifier is specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5d414c80fb2628268791e5b7748129dcb29b5d" translate="yes" xml:space="preserve">
          <source>Similarly, for messages received from a port, a port controller has to retrieve trace-specific information, and set appropriate sequential trace flags through calls to &lt;code&gt;seq_trace:set_token/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25997ae5e98658acfbb221772e9d3e259057b949" translate="yes" xml:space="preserve">
          <source>Similarly, multiple values from the map can be matched:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d183ee2551cd4ea6e4d3eebe55485c514589d6f" translate="yes" xml:space="preserve">
          <source>Similarly, the application must be stopped by calling &lt;code&gt;application:stop(Application)&lt;/code&gt; at all involved nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b5e30866ed0fb5b8f5d08a3acd60a7754728a0" translate="yes" xml:space="preserve">
          <source>Similarly, trivial transformations on the source-code level such as converting a &lt;code&gt;case&lt;/code&gt; statement to clauses at the top-level of the function seldom makes any difference to the generated code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce56ddd62b380bd2c81731139cdc0c712149a87a" translate="yes" xml:space="preserve">
          <source>Simple code replacement of the module &lt;code&gt;Mod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87da945cd34ff8f8a141563c28f80c41d1476512" translate="yes" xml:space="preserve">
          <source>Simple event-based front-ends to xmerl_scan for processing of XML documents in streams and for parsing in SAX style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a07b115ecfcd5e8be531e976a2a96fb43a2ceb" translate="yes" xml:space="preserve">
          <source>Simple event-based front-ends to xmerl_scan for processing of XML documents in streams and for parsing in SAX style. Each contain more elaborate settings of xmerl_scan that makes usage of the customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6667a691d6c48980afebaca8b210f62982385042" translate="yes" xml:space="preserve">
          <source>Simple filters are translated into equivalent match specifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ac2dd4dd81d9ff20ef673d34ebb52a547c79d8" translate="yes" xml:space="preserve">
          <source>Simple skeletons: If, Case, Receive, Receive After, Receive Loop - Basic code constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d543a32fba30bc1f23d1bfefa506cc5184802e" translate="yes" xml:space="preserve">
          <source>Simple use; creates and seeds the default algorithm with a non-constant seed if not already done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d366ef7a00e61a9e60ce8b79309e5e1e09c594f" translate="yes" xml:space="preserve">
          <source>Simplified start of a sequence chart viewer with global tracing activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4877feccaf7be9c5cb78312e4ba3da5b4a7402da" translate="yes" xml:space="preserve">
          <source>Simply put, connection-oriented socket communication (TCP/IP) consists of an initiator socket (&quot;server&quot;) started at a certain host with a certain port number. A connector socket (&quot;client&quot;), which is aware of the initiator host name and port number, can connect to it and data can be sent between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506ee5095e84f9f475858f43278c69f52b0d1486" translate="yes" xml:space="preserve">
          <source>Simulates a time-out when executing a &lt;code&gt;receive...after&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e32cda5df77b168fc7318c22725d629257e0556" translate="yes" xml:space="preserve">
          <source>Simultaneous backup calls are &lt;strong&gt;not&lt;/strong&gt; allowed. That is, two different processes cannot simultaneously successfully call this function. One of them will be first, and succeed. The second will fail with the error reason &lt;code&gt;backup_in_progress&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2914983192b284a9d510877945c3ce2a59d441e" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;filter_default&lt;/code&gt; defaults to &lt;code&gt;log&lt;/code&gt;, this handler now receives all log events. If you want info events only in the file, you must add a filter to stop all non-info events. The built-in filter &lt;code&gt;&lt;a href=&quot;logger_filters#level-2&quot;&gt;logger_filters:level/2&lt;/a&gt;&lt;/code&gt; can do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6022342a60e9de6fa2494fe49163e991025cb95e" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;fprof&lt;/code&gt; uses trace to file, the runtime performance degradation is minimized, but still far from negligible, especially for programs that use the filesystem heavily by themselves. Where you place the trace file is also important, e.g on Solaris &lt;code&gt;/tmp&lt;/code&gt; is usually a good choice since it is essentially a RAM disk, while any NFS (network) mounted disk is a bad idea.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4aa5cbb251c7ad89f2aeeababed306f6d9026b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;fprof&lt;/code&gt; uses trace to file, the runtime performance degradation is minimized, but still far from negligible, especially not for programs that use the filesystem heavily by themselves. Where you place the trace file is also important, e.g on Solaris &lt;code&gt;/tmp&lt;/code&gt; is usually a good choice, while any NFS mounted disk is a lousy choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e523deb3133ff853e30d467f7a1e58416fbcc0" translate="yes" xml:space="preserve">
          <source>Since ERTS 5.5 (Erlang/OTP R11B), &lt;code&gt;orig_bytes&lt;/code&gt; is guaranteed to be properly aligned for storage of an array of doubles (usually 8-byte aligned).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cffeb51e0969b463e7862612a7a16a012bc42e" translate="yes" xml:space="preserve">
          <source>Since ERTS 9.0 (OTP-20.0), resource terms have a defined behavior when compared and serialized through &lt;code&gt;term_to_binary&lt;/code&gt; or passed between nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee9d4a83339c7cbf019dafa14b709fff182389" translate="yes" xml:space="preserve">
          <source>Since Logger is new in Erlang/OTP 21.0, we do reserve the right to introduce changes to the Logger API and functionality in patches following this release. These changes might or might not be backwards compatible with the initial version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1388c7f42c463e118733594ab56b9edf44014b2b" translate="yes" xml:space="preserve">
          <source>Since Mnesia detects deadlocks, a transaction can be restarted any number of times. This function attempts a restart as specified in &lt;code&gt;Retries&lt;/code&gt;. &lt;code&gt;Retries&lt;/code&gt; must be an integer greater than 0 or the atom &lt;code&gt;infinity&lt;/code&gt;. Default is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f2a7910e9660499194205c29b7be7835a30ce8" translate="yes" xml:space="preserve">
          <source>Since R14, the following can also be written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413d9b584917b55b7fedeb013c6059a26ce95726" translate="yes" xml:space="preserve">
          <source>Since XSLT is based on a functional programming approach with pattern matching and recursion it is possible to write similar style sheets in Erlang. At least for basic transforms. This document describes how to use the XPath implementation together with Erlangs pattern matching and a couple of functions to write XSLT like transforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada107b11ee6de2781cde05ad5e1f711f358a1b4" translate="yes" xml:space="preserve">
          <source>Since a distributed application can move between nodes, some addressing mechanism is required to ensure that it can be addressed by other applications, regardless on which node it currently executes. This issue is not addressed here, but the &lt;code&gt;global&lt;/code&gt; or &lt;code&gt;pg2&lt;/code&gt; modules in Kernel can be used for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f99e28651d1cfab72f2d2bfc5daa600567ec43" translate="yes" xml:space="preserve">
          <source>Since a postponed event is only retried after a state change, you have to think about where to keep a state data item. You can keep it in the server &lt;code&gt;Data&lt;/code&gt; or in the &lt;code&gt;State&lt;/code&gt; itself, for example by having two more or less identical states to keep a boolean value, or by using a complex state (see section &lt;code&gt;&lt;a href=&quot;#Complex%20State&quot;&gt;Complex State&lt;/a&gt;&lt;/code&gt;) with &lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt;Callback Mode&lt;/a&gt;&lt;/code&gt;&lt;code&gt;handle_event_function&lt;/code&gt;. If a change in the value changes the set of events that is handled, then the value should be kept in the State. Otherwise no postponed events will be retried since only the server Data changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6f8f634b0fc5e7ed2d9442c74c26d0c1d5e639" translate="yes" xml:space="preserve">
          <source>Since applications tend to be transient (they are dynamically loaded and unloaded), the management of these applications must be dynamic as well. For example, if we have an equipment MIB for a rack and different MIBs for boards, which can be installed in the rack, the MIB for a card should be loaded when the card is inserted, and unloaded when the card is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823de482e19675451f12ff79abbfd8b7be1c5f44" translate="yes" xml:space="preserve">
          <source>Since both operations involve the 1.1 index, this is transformed into one call to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b635880c7663b7344b64c7beff4c9c8ade44107b" translate="yes" xml:space="preserve">
          <source>Since breakpoints are used there is no need for special compilation of any module to be profiled. For now these breakpoints can only be set on BEAM code so BIFs cannot be call count traced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bfe1fd9891a26c0e22f589483714dc657e5292" translate="yes" xml:space="preserve">
          <source>Since it is desired to update the record using the function &lt;code&gt;&lt;a href=&quot;mnesia#write-1&quot;&gt;mnesia:write/1&lt;/a&gt;&lt;/code&gt; after the salary has been increased, a write lock (third argument to &lt;code&gt;read&lt;/code&gt;) is acquired when the record from the table is read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38407ec48edd8217e05a2557f650908c44d41ec9" translate="yes" xml:space="preserve">
          <source>Since record expressions are expanded to tuple expressions, creating records and accessing record fields are allowed in guards. However all subexpressions, for example, for field initiations, must be valid guard expressions as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25817276926c066362bed9d894325da88019f08" translate="yes" xml:space="preserve">
          <source>Since several features of Erlang mode is based on the standard layout they might not work correctly if a nonstandard layout is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e787ba4bb5c99b509695608c3b39b160986dc89" translate="yes" xml:space="preserve">
          <source>Since the Net if process is responsible for encoding and decoding of SNMP messages, it must also update the relevant counters in the SNMP group in MIB-II. It can use the functions in the module &lt;code&gt;snmpa_mpd&lt;/code&gt; for this purpose (refer to the Reference Manual, section &lt;code&gt;snmp&lt;/code&gt;, module &lt;code&gt;&lt;a href=&quot;snmp_pdus&quot;&gt;snmpa_mpd&lt;/a&gt;&lt;/code&gt; for more details.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e021b70c4309ea3c8bcb22dd51c073b89dc2f3" translate="yes" xml:space="preserve">
          <source>Since the Net if process is responsible for encoding and decoding of SNMP messages, it must also update the relevant counters in the SNMP group in MIB-II. It can use the functions in the module &lt;code&gt;snmpm_mpd&lt;/code&gt; for this purpose (refer to the Reference Manual, section &lt;code&gt;snmp&lt;/code&gt;, module &lt;code&gt;snmpm_mpd&lt;/code&gt; for more details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f0c872afde435f83990c58521c75bab3d861bd" translate="yes" xml:space="preserve">
          <source>Since the state enter call is not an event there are restrictions on the allowed return value and &lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Actions&lt;/a&gt;&lt;/code&gt;. You may not change the state, &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postpone&lt;/a&gt;&lt;/code&gt; this non-event, or &lt;code&gt;&lt;a href=&quot;#Inserted%20Events&quot;&gt;insert events&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bdd22800d998b3d6968c1bfc746532bc1009a1" translate="yes" xml:space="preserve">
          <source>Since the supervisor is part of a supervision tree, it is automatically terminated by its supervisor. When asked to shut down, it terminates all child processes in reversed start order according to the respective shutdown specifications, and then terminates itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c5ff113595492032ba59b4a55450c477046a91" translate="yes" xml:space="preserve">
          <source>Since the supervisor is to change its internal state, synchronized code replacement is required. However, a special &lt;code&gt;update&lt;/code&gt; instruction must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a7232a87d15fbe1b393f1aa3930d5001a666c2" translate="yes" xml:space="preserve">
          <source>Since the version 3 implemented, in this version of the Megaco application, is preliminary, it is necessary to have a way to handle different version 3 implementations. For this reason the encoding config option &lt;code&gt;{version3, version3()}&lt;/code&gt; has been introduced. This option, if present, has to be &lt;strong&gt;first&lt;/strong&gt; in the encoding config list. Version 1 and 2 codec's ignore this option, if found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6a4422d27f7fd5661017aa05e73f8c0b7788d1" translate="yes" xml:space="preserve">
          <source>Since we are only interested in a ratio, the unary operator &lt;code&gt;#&lt;/code&gt; that counts the elements of the operand is used. It cannot be applied to the &lt;code&gt;digraph&lt;/code&gt; representation of graphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9492919ad524efc08c529443e062c0e4df4399" translate="yes" xml:space="preserve">
          <source>Since we have the average real-time and the percentage spent in each state we can easily calculate the time spent in each state by multiplying &lt;code&gt;Average thread real-time&lt;/code&gt; with &lt;code&gt;Thread state %&lt;/code&gt;, i.e. to get the time Scheduler 1 spent in the emulator state we do &lt;code&gt;1000513us * 0.13% = 1300us&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e633562ce278aa8f63877ae1b686c99ed11160e" translate="yes" xml:space="preserve">
          <source>Single direction links (monitor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b103261a83b179716c89c6c92972b372068f6b15" translate="yes" xml:space="preserve">
          <source>Single quote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d14ba00f00906805970adcc45cc1c084f8e21a4" translate="yes" xml:space="preserve">
          <source>Single-command interface for running all available tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a48d59b7a29cd918002eed1d70074d35d9b4eba" translate="yes" xml:space="preserve">
          <source>Singleblock carrier threshold (in kilobytes). Blocks larger than this threshold are placed in singleblock carriers. Blocks smaller than this threshold are placed in multiblock carriers. On 32-bit Unix style OS this threshold cannot be set &amp;gt; 8 MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab7336e86a131253ff20a56630ee902f7f1baa9" translate="yes" xml:space="preserve">
          <source>Singleblock carriers are used for storage of one block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8bc28bd230eae9445fec6a48931c7bdeb53ee1" translate="yes" xml:space="preserve">
          <source>Sinhala</source>
          <target state="translated">Sinhala</target>
        </trans-unit>
        <trans-unit id="bcc519db180ce33c37a28038f9639369bd1d4e9e" translate="yes" xml:space="preserve">
          <source>Six-per-em space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30a22a0c2135ec0cec715a4a76c42dfb354a904" translate="yes" xml:space="preserve">
          <source>Size of binary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17247ca22728636fe023051e3ba32f701d781f3c" translate="yes" xml:space="preserve">
          <source>Size of file in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63716907875fcd1f66f968ad7e49958d3e42b56c" translate="yes" xml:space="preserve">
          <source>Size of fragmented heap data. This is data either created by messages sent to the process or by the Erlang BIFs. This amount depends on so many things that this field is utterly uninteresting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fb7549aa7480acb278edcf1e91f5f0f2152183" translate="yes" xml:space="preserve">
          <source>Size of the largest packet, in bytes, received by the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08df95fdf35c7eec41f0a9c9d9c4b47e002ddbc5" translate="yes" xml:space="preserve">
          <source>Size of the largest packet, in bytes, sent from the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c83c7295156dbb91f77bb4ba266a1a7c41f363a" translate="yes" xml:space="preserve">
          <source>Sizes of carriers allocated through &lt;code&gt;sys_alloc&lt;/code&gt; are decided based on the value of the &lt;code&gt;sys_alloc&lt;/code&gt; carrier size (&lt;code&gt;&lt;a href=&quot;#Muycs&quot;&gt;ycs&lt;/a&gt;&lt;/code&gt;) parameter. The size of a carrier is the least number of multiples of the value of parameter &lt;code&gt;ycs&lt;/code&gt; satisfying the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed10f9c165e6ee4cd302a0c0a580f3f550fe00b" translate="yes" xml:space="preserve">
          <source>Sizes of multiblock carriers allocated through &lt;code id=&quot;mseg_mbc_sizes&quot;&gt;mseg_alloc&lt;/code&gt; are decided based on the following parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e4cb5be30bed4914cbc885eac6aa27e1c067db" translate="yes" xml:space="preserve">
          <source>Skip the PLT check when running Dialyzer. This is useful when working with installed PLTs that never change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b52aa379772757b0fe4a78bce2ea1da242c9ad4" translate="yes" xml:space="preserve">
          <source>Skip this token completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f1ab290e5643bdd12eabc9033247b063146a2e" translate="yes" xml:space="preserve">
          <source>Skips a term in the specified buffer; recursively skips elements of lists and tuples, so that a full term is skipped. This is a way to get the size of an Erlang term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d1ad5d7d1fd7f9741f0b2668fe06f182b3e019" translate="yes" xml:space="preserve">
          <source>Skips the current code line and stop at the next line. If used on the last line in a function body, the function returns &lt;code&gt;skipped&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12872491886f1b08fbb3cf57173012f5dd4fec62" translate="yes" xml:space="preserve">
          <source>Skips the external DTD during parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92835d057c07b90a27533d164ca25536f2c3c68f" translate="yes" xml:space="preserve">
          <source>Slave nodes on other hosts than the current one are started with the &lt;code&gt;rsh&lt;/code&gt; program. The user must be allowed to &lt;code&gt;rsh&lt;/code&gt; to the remote hosts without being prompted for a password. This can be arranged in a number of ways (for details, see the &lt;code&gt;rsh&lt;/code&gt; documentation). A slave node started on the same host as the master inherits certain environment values from the master, such as the current directory and the environment variables. For what can be assumed about the environment when a slave is started on another host, see the documentation for the &lt;code&gt;rsh&lt;/code&gt; program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e7b5151387b666d53e50322e1d0a7f9e148f90" translate="yes" xml:space="preserve">
          <source>Slider and radio buttons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f400bc734467b454d0e076beebad58eecf4cb7e0" translate="yes" xml:space="preserve">
          <source>Slower than &lt;code&gt;ERL_NIF_INTERNAL_HASH.&lt;/code&gt; It corresponds to &lt;code&gt;&lt;a href=&quot;erlang#phash2-1&quot;&gt;erlang:phash2/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74fd9714e38b26dbf7f58d75f93cfc977a05ba6" translate="yes" xml:space="preserve">
          <source>Small</source>
          <target state="translated">Small</target>
        </trans-unit>
        <trans-unit id="56bb7666ead8069c1504c97c55a171c4da5cbb93" translate="yes" xml:space="preserve">
          <source>Small Map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e0f4492a9daee17682a7168a304983487d7286" translate="yes" xml:space="preserve">
          <source>Small Server - skeleton for a simple server not using OTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab47f140f6431c36c5c0962034598b25caaa4c80" translate="yes" xml:space="preserve">
          <source>Small integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615a21503b02e3adddcc1994014a16d4418ded1b" translate="yes" xml:space="preserve">
          <source>Small slowdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ee6052934e3e6dab1195f8369c85835857eede" translate="yes" xml:space="preserve">
          <source>Smallest (&lt;code&gt;mseg_alloc&lt;/code&gt;) multiblock carrier size (in kilobytes). See the description on how sizes for &lt;code&gt;mseg_alloc&lt;/code&gt; multiblock carriers are decided in section &lt;code&gt;&lt;a href=&quot;#mseg_mbc_sizes&quot;&gt;The alloc_util Framework&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85767e72613dbb1348877a02afcc58287018438" translate="yes" xml:space="preserve">
          <source>So far this I/O server is fairly generic (except for request &lt;code&gt;rewind&lt;/code&gt; handled in the main loop and the creation of an ETS table). Most I/O servers contain code similar to this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e4e0a5c86630b775fa459febe3da79f7ac4b59" translate="yes" xml:space="preserve">
          <source>So far, only functions that take funs as arguments have been described. More powerful functions, that themselves return funs, can also be written. The following examples illustrate these type of functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4510a9d36f72cd900065dc9e0203fb013dd0a81c" translate="yes" xml:space="preserve">
          <source>So instead of writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e1e890c27bcd42db8ee2ad74018397c4317c7e" translate="yes" xml:space="preserve">
          <source>So now when you run &lt;code&gt;$ERL_TOP/erl.exe&lt;/code&gt;, you should have a debug compiled emulator, which you will see if you do a:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf10922783071cba140f7011f79e6768bdc244c5" translate="yes" xml:space="preserve">
          <source>So this is a module, called &lt;code&gt;tut1&lt;/code&gt; that contains a function called &lt;code&gt;fac&amp;gt;&lt;/code&gt;, which takes one argument, &lt;code&gt;N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed68677aedf0efff05f0804b8f66e77084348e7" translate="yes" xml:space="preserve">
          <source>So what part of the mib is implemented? Basically the relevant statistic counters of the &lt;strong&gt;MedGwyGatewayStatsEntry&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71148c3a19e900debcb05c1f43dd71bf8e88606f" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;Fun(Item)&lt;/code&gt; returning &lt;code&gt;[Item]&lt;/code&gt; is thereby semantically equivalent to returning &lt;code&gt;true&lt;/code&gt;, just as returning &lt;code&gt;[]&lt;/code&gt; is semantically equivalent to returning &lt;code&gt;false&lt;/code&gt;. But returning a list builds more garbage than returning an atom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5e70766f91bd5c14eec201242bbc754b76a223" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;inet_dns:(inet_dns:record_type(X))(X)&lt;/code&gt; converts any of these data structures into a &lt;code&gt;{Field,Value}&lt;/code&gt; list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118864ac5d65e1e867b9e6fd4d4898c9132dc2c1" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;{inch,3}&lt;/code&gt; denotes 3 inches and &lt;code&gt;{centimeter,5}&lt;/code&gt; denotes 5 centimeters. Now let us write a new program that converts centimeters to inches and conversely. Enter the following code in a file called &lt;code&gt;tut3.erl&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8193dbf214daf0d3f2898c600c59ec5be738c228" translate="yes" xml:space="preserve">
          <source>So, a conversion function must know not only one character at a time, but possibly the whole sentence, the natural language to translate to, the differences in input and output string length, and so on. Erlang/OTP has currently no Unicode &lt;code&gt;uppercase&lt;/code&gt;/&lt;code&gt;lowercase&lt;/code&gt; functionality with language specific handling, but publicly available libraries address these issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c7da51740ebf4aac184b154f2d3319539425a2" translate="yes" xml:space="preserve">
          <source>So, if you have followed the instructions above, when you start a bash shell, you should have an INCLUDE environment with a Windows style path, a LIB environment variable also in Windows style, and finally a PATH that let's you reach cl, makensis, javac etc from the command prompt (use &lt;code&gt;which cl&lt;/code&gt; etc to verify from bash).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a8abd15f6cc0422a4656dd44d3f70185751320" translate="yes" xml:space="preserve">
          <source>So, the value &lt;code&gt;#'StartMessage'{msgId=&quot;home&quot;,content=&quot;Any Printable String&quot;}&lt;/code&gt; is legal to encode as a &lt;code&gt;StartMessage&lt;/code&gt; value. However, the value &lt;code&gt;#'StartMessage'{msgId=&quot;remote&quot;, content=&quot;Some String&quot;}&lt;/code&gt; is illegal as the constraint in &lt;code&gt;StartMessage&lt;/code&gt; tells that when you have chosen a value from a specific object in object set &lt;code&gt;GENERAL-PROCEDURES&lt;/code&gt; in field &lt;code&gt;msgId&lt;/code&gt;, you must choose a value from that same object in the content field too. In this second case, it is to be any &lt;code&gt;INTEGER&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbdfa84f4bbd4e6020efbcbf6535245cdb559d3" translate="yes" xml:space="preserve">
          <source>So, we see that &lt;code&gt;foo:create_file_slow/2&lt;/code&gt; used very little time for its own execution. It spent most of its time in &lt;code&gt;file:close/1&lt;/code&gt;. The function &lt;code&gt;foo:create_file_slow/3&lt;/code&gt; that writes 3/4 of the file contents is the second biggest time thief.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e186bfb95806558f8cb0695f1dbdea1ab9d233dc" translate="yes" xml:space="preserve">
          <source>So, you can always send Unicode data to the &lt;code&gt;standard_io&lt;/code&gt; device. Files, however, accept only Unicode code points beyond ISO Latin-1 if &lt;code&gt;encoding&lt;/code&gt; is set to something else than &lt;code&gt;latin1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13488b4d38269ec5b0d0aadbf625ed4a6743ad33" translate="yes" xml:space="preserve">
          <source>Socket identifier returned from &lt;code&gt;&lt;a href=&quot;#open-0&quot;&gt;open/*&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612f45129eba1638fe81aa4162ddaf53ddd263c4" translate="yes" xml:space="preserve">
          <source>Socket options to be used for this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86def5ab9579842d4d2ad82dcea44ecfef2f7f83" translate="yes" xml:space="preserve">
          <source>Soft upgrade according to the OTP release concept is not straight forward for the server side, as subsystem channel processes are spawned by the &lt;code&gt;ssh&lt;/code&gt; application and hence added to its supervisor tree. The subsystem channels can be upgraded when upgrading the user application, if the callback functions can handle two versions of the state, but this function cannot be used in the normal way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c647435dd36e71d5d166b4756d5d3011047b867" translate="yes" xml:space="preserve">
          <source>Solaris 10, 11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624c844f2078405a61bb6ca548e78668f1dda2e4" translate="yes" xml:space="preserve">
          <source>Solaris 10. I have done limited testing on Solaris 11 and OpenIndiana release 151a, and both appear to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fb3d807e57c89d0e80c7767fd4e811d0a2f43c" translate="yes" xml:space="preserve">
          <source>Solaris 9 is supported. The build requires a &lt;code&gt;gcc&lt;/code&gt; that has been configured to use Sun's assembler and linker. Using the GNU assembler but Sun's linker has been known to cause problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad98f7ac7fd5751dca0d8e7bc21baa0bc34cb03d" translate="yes" xml:space="preserve">
          <source>Solaris only. Defines if the service should be enabled (and disabled) inside (&lt;code&gt;true&lt;/code&gt;) or outside (&lt;code&gt;false&lt;/code&gt;) &lt;code&gt;os_sup&lt;/code&gt;. For backwards compatibility reasons, the default is &lt;code&gt;true&lt;/code&gt;. The recommended value is &lt;code&gt;false&lt;/code&gt;, as the Erlang emulator should normally not be run with &lt;code&gt;root&lt;/code&gt; privileges, as is required for enabling the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ac99369ea24f03a02ebf82bb384ea26a5ac2c1" translate="yes" xml:space="preserve">
          <source>Solaris only. Defines the directory which contains the backup copy and the Erlang specific configuration files for &lt;code&gt;syslogd&lt;/code&gt;, and a named pipe to receive the messages from &lt;code&gt;syslogd&lt;/code&gt;. Default is &lt;code&gt;&quot;/etc&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e77b966f6e049572ff21e8d379d0e22fd8916f9" translate="yes" xml:space="preserve">
          <source>Solaris only. Defines the full name of the configuration file for &lt;code&gt;syslogd&lt;/code&gt;. Default is &lt;code&gt;&quot;/etc/syslog.conf&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4df00f7a4ca6b0ced1b2110bf8eb636b19a4625" translate="yes" xml:space="preserve">
          <source>Solaris takes about 17 MB of RAM on a system with 64 MB of total RAM. This leaves about 47 MB for the applications. If the system uses swapping, these figures cannot be improved because unnecessary daemon processes are swapped out. However, if swapping is disabled, or if the swap space is of limited resource in the system, it becomes necessary to kill off unnecessary daemon processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd11de5ff1de725ae1b4e7108ef3240598ba71d" translate="yes" xml:space="preserve">
          <source>Solaris: Solaris 10 (32-bit and 64-bit) and 9 (32-bit) are supported. The build requires a version of the GNU C compiler (gcc) that has been configured to use the GNU assembler (gas). Sun's x86 assembler is emphatically &lt;strong&gt;not&lt;/strong&gt; supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb6e4a6032e5fc32bd3a65f34d4f5ea5aa85068" translate="yes" xml:space="preserve">
          <source>Some BIFs can be used in guard tests and are marked with &quot;Allowed in guard tests&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f012db159278267232139e217072696541f481" translate="yes" xml:space="preserve">
          <source>Some OS (Windows) do not differentiate between read and write events. The callback for a fired event then only depends on the value of &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d2998d34aa405bea2f6df724f8a6563ad615eb" translate="yes" xml:space="preserve">
          <source>Some additional BIFs that apply to port drivers: &lt;code&gt;port_control/3&lt;/code&gt; and &lt;code&gt;erlang:port_call/3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eb12c2180def045a657bcad996c0a0423ae416" translate="yes" xml:space="preserve">
          <source>Some applications are automatically skipped if the dependencies aren't met. Here is a list of utilities needed for those applications. You will also find the utilities needed for building the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e4a35d0c545ba54a56f4dd7085a38c13dd5a2a" translate="yes" xml:space="preserve">
          <source>Some applications need to wait for certain tables to be accessible to do useful work. &lt;code&gt;mnesia:wait_for_tables/2&lt;/code&gt; either hangs until all tables in &lt;code&gt;TabList&lt;/code&gt; are accessible, or until &lt;code&gt;timeout&lt;/code&gt; is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9aaa2e5d4bc3afe4ced1e01253d9da9c7949c5" translate="yes" xml:space="preserve">
          <source>Some applications that allow their users to supply patterns can wish to restrict them to non-UTF data for security reasons. If option &lt;code&gt;never_utf&lt;/code&gt; is set at compile time, (*UTF), and so on, are not allowed, and their appearance causes an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24f1f8d2061556727b8d32e994209de9af0eb7d" translate="yes" xml:space="preserve">
          <source>Some built-in filters exist. These are defined in &lt;code&gt;&lt;a href=&quot;logger_filters&quot;&gt;logger_filters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7d0d246c8a5c5d27d0b39b1f60bb773efa7225" translate="yes" xml:space="preserve">
          <source>Some communication is synchronous. If broken down into pieces, a synchronous communication operation consists of two asynchronous signals; one request signal and one reply signal. An example of such a synchronous communication is a call to &lt;code&gt;erlang:process_info/2&lt;/code&gt; when the first argument is not &lt;code&gt;self()&lt;/code&gt;. The caller sends an asynchronous signal requesting information, and then waits for the reply signal containing the requested information. When the request signal reaches its destination, the destination process replies with the requested information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3978ab6efced12cfbb61d20b2f971236e994634d" translate="yes" xml:space="preserve">
          <source>Some configuration parameters control the behavior of Reltool on system (&lt;code&gt;sys&lt;/code&gt;) level. Others provide control on application (&lt;code&gt;app&lt;/code&gt;) level and yet others are on module (&lt;code&gt;mod&lt;/code&gt;) level. Module level parameters override application level parameters and application level parameters override system level parameters. Escript &lt;code&gt;escript&lt;/code&gt; level parameters override system level parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618bfc8450660310d66e99090ee429bade92ad51" translate="yes" xml:space="preserve">
          <source>Some definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7a9488bf7c334ab0c6c89dafc10cc9d316b90d" translate="yes" xml:space="preserve">
          <source>Some dependencies can only be required in specific runtime scenarios. When such optional dependencies exist, these are specified and documented in the corresponding &quot;App&quot; documentation of the specific application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68757bf72df0b2bd8846b22de1a19877ad71f237" translate="yes" xml:space="preserve">
          <source>Some driver calls, such as &lt;code&gt;driver_enq_binary&lt;/code&gt;, increment the driver reference count, and others, such as &lt;code&gt;driver_deq&lt;/code&gt; decrement it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae4f4ff86e0a96f567e91dd26cc69718fc3e566" translate="yes" xml:space="preserve">
          <source>Some drivers may not have the information of the number of affected rows available and then the return value may be &lt;code&gt;{updated, undefined}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c340244d6c4f199052de9779543a19d1cc478aeb" translate="yes" xml:space="preserve">
          <source>Some drivers may not have the information of the number of rows in the result set, then &lt;code&gt;NrRows&lt;/code&gt; will have the value &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a29222509223f881305b482bc65c2ab88a5b4c" translate="yes" xml:space="preserve">
          <source>Some effort is made to keep the trace clean from unnecessary trace messages; tracing is started and stopped from a spawned process while the &lt;code&gt;erlang:apply/2&lt;/code&gt; call is made in the current process, only surrounded by &lt;code&gt;receive&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; statements towards the trace starting process. The trace starting process exits when not needed any more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496abb379f44739b88c8e58701ff98fc41a88ab7" translate="yes" xml:space="preserve">
          <source>Some equalities: &lt;code&gt;[node()] = nodes(this)&lt;/code&gt;, &lt;code&gt;nodes(connected) = nodes([visible, hidden])&lt;/code&gt;, and &lt;code&gt;nodes() = nodes(visible)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26855bd5f1d5d80dd65d606ab5f637e7c6c21e35" translate="yes" xml:space="preserve">
          <source>Some errors are opaque and can only be interpreted by passing them to function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;, but some can be interpreted directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0125a70ff3f4339d6599111237d60e6049101ad8" translate="yes" xml:space="preserve">
          <source>Some events, such as messages, are directed from some actor to another. Other events (termed actions) may be undirected and only have one actor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ad8817c1327c1b7086ac60c66dfe886f7bfd0a" translate="yes" xml:space="preserve">
          <source>Some examples are provided in the &lt;code&gt;&lt;a href=&quot;http_client&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513e710823d55696dc981caf342f105faed53e3e" translate="yes" xml:space="preserve">
          <source>Some file operation failed for &lt;code&gt;File&lt;/code&gt;. &lt;code&gt;Posix&lt;/code&gt; is an atom named from the Posix error codes, such as &lt;code&gt;enoent&lt;/code&gt;, &lt;code&gt;eacces&lt;/code&gt;, or &lt;code&gt;eisdir&lt;/code&gt;. See &lt;code&gt;file(3)&lt;/code&gt; in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0121d7a46586e8ed0bc5fae7d24a808f5944d15f" translate="yes" xml:space="preserve">
          <source>Some file operation failed, as for the previous item in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f22fa362b8d49f640a721aaa96c04f811728ae0" translate="yes" xml:space="preserve">
          <source>Some final advice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6762de9e6f3e6c78bcb67fccdec2635330cfb2" translate="yes" xml:space="preserve">
          <source>Some functions in Erlang are not meant to return; either because they define servers or because they are used to throw exceptions, as in the following function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354d82bac53c31a6353de08652df5f12865d65b4" translate="yes" xml:space="preserve">
          <source>Some functions, where noted, fail with reason &lt;code&gt;empty&lt;/code&gt; for an empty queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d038ce143e1cb1e24c1bac68d9127ee8fff8c16" translate="yes" xml:space="preserve">
          <source>Some hints that may get you started faster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f6d806a1af7b326c8d125dd4956ae7df93d399" translate="yes" xml:space="preserve">
          <source>Some implementation details:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cc423d2346aa5d89a61bae8f27cf450553a78c" translate="yes" xml:space="preserve">
          <source>Some locks in the system are static and protects global resources, for example &lt;code&gt;bif_timers&lt;/code&gt; and the &lt;code&gt;run_queue&lt;/code&gt; locks. Other locks are dynamic and not necessarily long lived, for example process locks and ets-table locks. The statistics data from short lived locks can be stored separately when the locks are deleted. This behavior is by default turned off to save memory but can be turned on via &lt;code&gt;lcnt:rt_opt({copy_save, true})&lt;/code&gt;. The &lt;code&gt;lcnt:apply/1,2,3&lt;/code&gt; functions enables this behavior during profiling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49bf30d21ce869c86a9e6e341b1213d413618d4" translate="yes" xml:space="preserve">
          <source>Some modules are, however, changed to be explicitly Unicode-aware. These modules include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f152dd4071f6ae051f303ae1eedc9c8f2bd8e4" translate="yes" xml:space="preserve">
          <source>Some of the available &lt;code&gt;configure&lt;/code&gt; options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da87bf2715c3c501af0cfb153f102fd46a742fdf" translate="yes" xml:space="preserve">
          <source>Some of the decode functions need a pre-allocated buffer. This buffer must be allocated large enough, and for non-compound types the &lt;code&gt;ei_get_type()&lt;/code&gt; function returns the size required (notice that for strings an extra byte is needed for the &lt;code&gt;NULL&lt;/code&gt;-terminator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a19878495c9175717bcac71b2941e4ab49b575" translate="yes" xml:space="preserve">
          <source>Some of the function has no defined return value (&lt;code&gt;void()&lt;/code&gt;), they can of course return anything. But the functions that do have specified return value(s) &lt;strong&gt;must&lt;/strong&gt; adhere to this. None of the functions can use exit of throw to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c4297bbd79b22aab207521ab54898a45f07587" translate="yes" xml:space="preserve">
          <source>Some of the functions take a parameter of type &lt;code&gt;ErlDrvBinary&lt;/code&gt;, a driver binary. It is to be both allocated and freed by the caller. Using a binary directly avoids one extra copying of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad34f68080f1adaf7546e5395d3ecdc52cbeebe" translate="yes" xml:space="preserve">
          <source>Some of the functions use a &lt;strong&gt;match specification&lt;/strong&gt;, &lt;code&gt;match_spec&lt;/code&gt;. For a brief explanation, see &lt;code&gt;&lt;a href=&quot;#select-2&quot;&gt;select/2&lt;/a&gt;&lt;/code&gt;. For a detailed description, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in ERTS User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5d8e22f3613061ec1244d11b0b7d37b626a6c9" translate="yes" xml:space="preserve">
          <source>Some of the functions use the process dictionary variable &lt;code&gt;random_seed&lt;/code&gt; to remember the current seed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6775990a8a6aa5573ab69d179177f07666ac31c3" translate="yes" xml:space="preserve">
          <source>Some of the general string functions can seem to overlap each other. The reason is that this string package is the combination of two earlier packages and all functions of both packages have been retained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eb347b3644f1948715a42c0af4d0cc7dba6261" translate="yes" xml:space="preserve">
          <source>Some of the most frequently used instructions are described in this section. The complete list of instructions is included in the &lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ec577256d81f891e7d0017206b7c2060aadb91" translate="yes" xml:space="preserve">
          <source>Some of the new BIFs on some systems, perhaps surprisingly, return negative integer values on a newly started runtime system. This is not a bug, but a memory use optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684eb1657854da03a2d8a0600a6a92dd5cd4fbc5" translate="yes" xml:space="preserve">
          <source>Some of the send options (&lt;code&gt;community&lt;/code&gt;, &lt;code&gt;sec_model&lt;/code&gt;, &lt;code&gt;sec_name&lt;/code&gt;, &lt;code&gt;sec_level&lt;/code&gt; and &lt;code&gt;max_message_size&lt;/code&gt;) are &lt;code&gt;override options&lt;/code&gt;. That is, for &lt;strong&gt;this&lt;/strong&gt; request, they override any configuration done when the agent was registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960c5649731f1c53a1352fb9839c4bd38b2e8266" translate="yes" xml:space="preserve">
          <source>Some of the tests that come with erlang use native code to test. This means that when cross compiling erlang you also have to cross compile test suites in order to run tests on the target host. To do this you first have to release the tests as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9c8cd590ef1853bc4a27f157c87d9f801d5e5f" translate="yes" xml:space="preserve">
          <source>Some of the warnings are optional, and can be turned on by specifying the appropriate option, described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce7c1dced54f61f871a3fa993365b98f52c0f88" translate="yes" xml:space="preserve">
          <source>Some of these messages are ripped from the call flow examples in an old version of the RFC and others are created to test a specific feature of megaco.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2e9cd0d4ac1ff0219bd38f99b5d6d5c7ac424a" translate="yes" xml:space="preserve">
          <source>Some of these values will override results of tests performed by &lt;code&gt;configure&lt;/code&gt;, and some will not be used until &lt;code&gt;configure&lt;/code&gt; is sure that it cannot figure the result out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587d577c94caa5ad9d7c91012ed0b0688cd33fcd" translate="yes" xml:space="preserve">
          <source>Some operation, indicated by the term &lt;code&gt;When&lt;/code&gt;, failed on the master node &lt;code&gt;Master&lt;/code&gt; with the specified error reason &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532a5fdf2519fa2810638913400161805aff1924" translate="yes" xml:space="preserve">
          <source>Some options can be specified to control the loading operation. The options are specified as a list of two-tuples. The tuples have the following values and meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6d5d5c93f1282380fc46283af217c17178ad5f" translate="yes" xml:space="preserve">
          <source>Some options that can be passed to &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt; can also be set by special items at the start of a pattern. These are not Perl-compatible, but are provided to make these options accessible to pattern writers who are not able to change the program that processes the pattern. Any number of these items can appear, but they must all be together right at the start of the pattern string, and the letters must be in upper case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9dfb977ffc1e82682a71d816c1ba159d76ec0a" translate="yes" xml:space="preserve">
          <source>Some parts of OTP were designed a very long time ago and did not necessarily take today's computing environments into account. In some cases the consequences of those design decisions are too severe. This may be performance wise, scalability wise, etc. If we deem the consequences too severe, we might introduce incompatible changes. This kind of incompatibility will not be introduced in a patch, but instead in the next release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893be26d407a35c51326a6edae88e5915e76231b" translate="yes" xml:space="preserve">
          <source>Some printouts during test case execution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f278538d6488a2d8d8ae3fb2e1b8042afb8fd32" translate="yes" xml:space="preserve">
          <source>Some registry values are stored as strings with references to environment variables, for example, &lt;code&gt;%SystemRoot%Windows&lt;/code&gt;. &lt;code&gt;SystemRoot&lt;/code&gt; is an environment variable, and is to be replaced with its value. Function &lt;code&gt;&lt;a href=&quot;#expand-1&quot;&gt;expand/1&lt;/a&gt;&lt;/code&gt; is provided so that environment variables surrounded by &lt;code&gt;%&lt;/code&gt; can be expanded to their values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0599ae407bc9c76a4fca1d19b027f18a4d9b930a" translate="yes" xml:space="preserve">
          <source>Some shell printouts in the following examples are abbreviated for increased readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692031fe2faf78976297b5de58de12f7ed174433" translate="yes" xml:space="preserve">
          <source>Some special cases of this functionality are presented in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ed2a58ab9e0bd8975719e95e31944d94f92b07" translate="yes" xml:space="preserve">
          <source>Some special information, such as error reports, progress reports, and printouts written with &lt;code&gt;erlang:display/1&lt;/code&gt;, or &lt;code&gt;io:format/3&lt;/code&gt; specifically addressed to a receiver other than &lt;code&gt;standard_io&lt;/code&gt; (for example, the default group leader process &lt;code&gt;user&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf417384297e3515a02ab56855cb40aa31fe1342" translate="yes" xml:space="preserve">
          <source>Some sub-directories are &lt;strong&gt;required&lt;/strong&gt;. Some sub-directories are &lt;strong&gt;optional&lt;/strong&gt;, meaning that it should only be used if the application itself requires it. Finally, some sub-directories are &lt;strong&gt;recommended&lt;/strong&gt;, meaning it is encouraged that it is used and used as described here. For example, both documentation and tests are encouraged to exist in an application for it to be deemed a proper OTP application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44b50783046445aa2fac90bdff5c889ef6680d4" translate="yes" xml:space="preserve">
          <source>Some tabs contain a left-hand menu where subitems of the information area can be selected. Click one of the rows, and the information is displayed in the right-hand information area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0076c2c8aefb7261b0fcf3532f34d775d0493fda" translate="yes" xml:space="preserve">
          <source>Some terminology is needed: the certificate presents hostname(s) on which it is valid. Those are called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b274f76c6915b5c4efc76b8f955fd7472ef3ca" translate="yes" xml:space="preserve">
          <source>Some things have changed from &lt;code&gt;pg_sync.c&lt;/code&gt;: we use the entry &lt;code&gt;ready_io&lt;/code&gt; for &lt;code&gt;ready_input&lt;/code&gt; and &lt;code&gt;ready_output&lt;/code&gt;, which is called from the emulator only when there is input to be read from the socket. (Actually, the socket is used in a &lt;code&gt;select&lt;/code&gt; function inside the emulator, and when the socket is signaled, indicating there is data to read, the &lt;code&gt;ready_input&lt;/code&gt; entry is called. More about this below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24f9271e656a8d0dd4d8378ae6c5abe42b2d5bf" translate="yes" xml:space="preserve">
          <source>Some time later the user takes another snapshot and calculates scheduler utilization per scheduler, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8abc0c839caa7196a71b3ea51b8663752766ec" translate="yes" xml:space="preserve">
          <source>Some tips on what to check when the emulator does not seem to receive the terms that you send:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a7a6036cf3e3a8f2567862912a17463e2aaf70" translate="yes" xml:space="preserve">
          <source>Some truths seem to live on well beyond their best-before date, perhaps because &quot;information&quot; spreads faster from person-to-person than a single release note that says, for example, that body-recursive calls have become faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7a4b4ac918ad5e06dc9ae720dadbac82d7190a" translate="yes" xml:space="preserve">
          <source>Some useful BIFs for distributed programming (for more information, see the &lt;code&gt;erlang(3)&lt;/code&gt; manual page in ERTS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a527f53a8e0e672ee0ca44e8b1c4a439f278ddd4" translate="yes" xml:space="preserve">
          <source>Some useful information is initialized when a process starts. The registered names, or the process identifiers, of the parent process, and the parent ancestors, are stored together with information about the function initially called in the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2028cb2443f8e9daf49220a78619a7c89b656283" translate="yes" xml:space="preserve">
          <source>Some useful operators in guards are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd789ff17ead2cfd47f8e836331495a9404fbba" translate="yes" xml:space="preserve">
          <source>Some useful shell commands for debugging the XPath parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d501c243bd37e478e360879f419074506e613f43" translate="yes" xml:space="preserve">
          <source>Some uses of &lt;code&gt;length/1&lt;/code&gt; can be replaced by matching. For example, the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d49521180b38936cf3e7e09cfe3ccc3672539a" translate="yes" xml:space="preserve">
          <source>Something is wrong with a fun &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a595a840021c4a9915671590852399dcdae9a6d0" translate="yes" xml:space="preserve">
          <source>Sometimes (see &lt;code&gt;&lt;a href=&quot;#table-2&quot;&gt;table/2&lt;/a&gt;&lt;/code&gt;) traversal of tables can be done by looking up key values, which is assumed to be fast. Under certain (rare) circumstances there can be too many key values to look up.  Option &lt;code id=&quot;max_lookup&quot;&gt;{max_lookup,&amp;nbsp;MaxLookup}&lt;/code&gt; can then be used to limit the number of lookups: if more than &lt;code&gt;MaxLookup&lt;/code&gt; lookups would be required, no lookups are done but the table is traversed instead. Defaults to &lt;code&gt;infinity&lt;/code&gt;, which means that there is no limit on the number of keys to look up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8cadc6cd039cae6c311adc00775bedcbb7aca7" translate="yes" xml:space="preserve">
          <source>Sometimes a function may unexpectedly waste a lot (some 10 ms or more depending on host machine OS) of OWN (and ACC) time, even functions that does practically nothing at all. The problem may be that the OS has chosen to schedule out the Erlang runtime system process for a while, and if the OS does not support high resolution cpu time measurements &lt;code&gt;fprof&lt;/code&gt; will use wallclock time for its calculations, and it will appear as functions randomly burn virtual machine time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11baeb3a6936f5ffe7074980bba11ba16d0a46d1" translate="yes" xml:space="preserve">
          <source>Sometimes communication between an Erlang program and another program using a standard protocol is desirable. Erlang/OTP currently supports TCP/IP and UDP &lt;strong&gt;sockets&lt;/strong&gt;: as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e4ac1b44cad1ebb6d70856e70e3ea359b59c1a" translate="yes" xml:space="preserve">
          <source>Sometimes database queries can take a long time to complete, in our &lt;code&gt;pg_sync&lt;/code&gt; driver, the emulator halts while the driver is doing its job. This is often not acceptable, as no other Erlang process gets a chance to do anything. To improve on our postgres driver, we re-implement it using the asynchronous calls in LibPQ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ce76b9d3fc6249cf9062a1c46f08d4f3c3cb3e" translate="yes" xml:space="preserve">
          <source>Sometimes events can arrive in any state of the &lt;code&gt;gen_statem&lt;/code&gt;. It is convenient to handle these in a common state handler function that all state functions call for events not specific to the state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4ab1fc14c191996bdc9b1d59c99ba2ce62ef2f" translate="yes" xml:space="preserve">
          <source>Sometimes in a system of &lt;code&gt;ASN.1&lt;/code&gt; modules, different default tag modes, for example, &lt;code&gt;AUTOMATIC&lt;/code&gt;, &lt;code&gt;IMPLICIT&lt;/code&gt;, or &lt;code&gt;EXPLICIT&lt;/code&gt;. The multi-file compilation resolves the default tagging as if the modules were compiled separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ac3307ee87c7874d6aad9c77e81050831a6a1c" translate="yes" xml:space="preserve">
          <source>Sometimes it is desirable to open a zip archive, and to unzip files from it file by file, without having to reopen the archive. This can be done by functions &lt;code&gt;&lt;a href=&quot;#zip_open-1&quot;&gt;zip_open/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#zip_get-1&quot;&gt;zip_get/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#zip_list_dir-1&quot;&gt;zip_list_dir/1&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#zip_close-1&quot;&gt;zip_close/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962be223b6e1106971ec47ead3e447a5c9197ea3" translate="yes" xml:space="preserve">
          <source>Sometimes it is impossible, or infeasible, to implement independent test cases. Maybe it is not possible to read the SUT state. Maybe resetting the SUT is impossible and it takes too long time to restart the system. In situations where test case dependency is necessary, CT offers a structured way to carry data from one test case to the next. The same mechanism can also be used to carry data from one test suite to the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3c4360ea605c722129889aad9e073dd0528647" translate="yes" xml:space="preserve">
          <source>Sometimes it is not possible to retrieve the values for some of the objects in the notification specification with a get-operation. However, they are known when the &lt;code&gt;send_notification&lt;/code&gt; function is called. This is the case if an object is an element in a table. It is possible to give the values of some objects to the &lt;code&gt;send_notification&lt;/code&gt; function &lt;code&gt;snmpa:send_notification(Agent, Notification, Receiver, Varbinds)&lt;/code&gt;. In this function, &lt;code&gt;Varbinds&lt;/code&gt; is a list of &lt;code&gt;Varbind&lt;/code&gt;, where each &lt;code&gt;Varbind&lt;/code&gt; is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f53eb4fc8c8a4320ec0fb342a69d7dd865fbb6" translate="yes" xml:space="preserve">
          <source>Sometimes test cases depend on each other so that if one case fails, the following tests are not to be executed. Typically, if the &lt;code&gt;save_config&lt;/code&gt; facility is used and a test case that is expected to save data crashes, the following case cannot run. &lt;code&gt;Common Test&lt;/code&gt; offers a way to declare such dependencies, called sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6799ff5620c272139e2872edd534d0a33e7d529c" translate="yes" xml:space="preserve">
          <source>Sometimes the escape sequence \K (see above) can be used instead of a lookbehind assertion to get round the fixed-length restriction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f742e389a3de6261a036ea786f6851d9053f699" translate="yes" xml:space="preserve">
          <source>Sometimes the system can enter a state where the reported memory from &lt;code&gt;erlang:memory(total)&lt;/code&gt; is very different from the memory reported by the OS. This can be because of internal fragmentation within the Erlang Run-Time System. Data about how memory is allocated can be retrieved using &lt;code&gt;erlang:system_info(allocator)&lt;/code&gt;. The data you get from that function is very raw and not very plesant to read. &lt;code&gt;&lt;a href=&quot;http://ferd.github.io/recon/recon_alloc.html&quot;&gt;recon_alloc&lt;/a&gt;&lt;/code&gt; can be used to extract useful information from system_info statistics counters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1a0dbc909bd1d69d7a427e71f3d97d4434bf44" translate="yes" xml:space="preserve">
          <source>Sometimes, an example says more than a thousand words. The following small Erlang module shows how EUnit can be used in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141171fb0d1fd830be08540cd391f0b82b2cb5a0" translate="yes" xml:space="preserve">
          <source>Sometimes, however, it can be useful to save all calls, even tail-recursive calls. This is done with option &lt;strong&gt;Stack On, Tail&lt;/strong&gt;. Notice that this option consumes more memory and slows down execution of interpreted functions when there are many tail-recursive calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7528f753ad83a3f31ee20a4a9df5023228949195" translate="yes" xml:space="preserve">
          <source>Sometimes, it can be convenient not to produce the whole set of test descriptions before the testing begins; for example, if you want to generate a huge amount of tests that would take up too much space to keep in memory all at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a15c3b3a3ffffe356dc1c64607437dff58e484" translate="yes" xml:space="preserve">
          <source>Sometimes, testing some unit &lt;code&gt;A&lt;/code&gt; (e.g., a function) requires that it collaborates somehow with some other unit &lt;code&gt;B&lt;/code&gt; (perhaps being passed as an argument, or by reference) - but &lt;code&gt;B&lt;/code&gt; has not been implemented yet. A &quot;mock object&quot; - an object which, for the purposes of testing &lt;code&gt;A&lt;/code&gt;, looks and behaves like a real &lt;code&gt;B&lt;/code&gt; - might then be used instead. (This is of course only useful if it would be significantly more work to implement a real &lt;code&gt;B&lt;/code&gt; than to create a mock object.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a45b5fa3cbcf07e819f1dbe6736a78703c55350" translate="yes" xml:space="preserve">
          <source>Sometimes, the tree structure of a code fragment isn't very obvious, and parts of the structure may be invisible when printed as source code. For instance, a simple function definition like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5a4e4270a7a6dacae32c73a607ab7be8a3fae4" translate="yes" xml:space="preserve">
          <source>Sometimes, when the range of a function is more important than the function itself, the function is called a &lt;strong&gt;family&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3d850f9c60834aad749bf8ac8a3f5f1f45da55" translate="yes" xml:space="preserve">
          <source>Sora_Sompeng</source>
          <target state="translated">Sora_Sompeng</target>
        </trans-unit>
        <trans-unit id="b1a6c8fcce88ee4bcf40d107a65ee3f65ecea47e" translate="yes" xml:space="preserve">
          <source>Sorts terms on files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1631590253eec5683c842d19992a2c57c732cacd" translate="yes" xml:space="preserve">
          <source>Sorts tuples on files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b28d47983f31cf72a4077cc7d9a41a857609c4a" translate="yes" xml:space="preserve">
          <source>Sorts tuples on files. The sort is performed on the element(s) mentioned in &lt;code&gt;KeyPos&lt;/code&gt;. If two tuples compare equal (&lt;code&gt;==&lt;/code&gt;) on one element, the next element according to &lt;code&gt;KeyPos&lt;/code&gt; is compared. The sort is stable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7484d321669c42caf2ee17f3c18c5acb876879" translate="yes" xml:space="preserve">
          <source>Source code can be reconstructed from the debug information. To prevent this, use encrypted debug information (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5203b12fc8bf99e156b8857e7b7938720028ac47" translate="yes" xml:space="preserve">
          <source>Source files from other languages that generate Erlang code, such as ASN.1 or Mibs, should be placed in directories, at the top level or in &lt;code&gt;src&lt;/code&gt;, with the same name as the source language, for example &lt;code&gt;asn1&lt;/code&gt; and &lt;code&gt;mibs&lt;/code&gt;. Build artifacts should be placed in their respective language directory, such as &lt;code&gt;src&lt;/code&gt; for Erlang code or &lt;code&gt;java_src&lt;/code&gt; for Java code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8c9b124d521027647b4f270cb2872798f9264e" translate="yes" xml:space="preserve">
          <source>Space</source>
          <target state="translated">Space</target>
        </trans-unit>
        <trans-unit id="df9975b8828480ef5a2bcbf7c8e1186fadb81e2f" translate="yes" xml:space="preserve">
          <source>Space characters between mark-up as &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;tab&lt;/code&gt; and &lt;code&gt;line feed&lt;/code&gt; are normalized and returned as xmlText records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c52a99f638b2f6880712039a2d8fba807d2f455" translate="yes" xml:space="preserve">
          <source>Space or tab only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd78242918f53a012c175a68aa9091a9a360f24a" translate="yes" xml:space="preserve">
          <source>Space separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9cc9c4b2d6d26d730a19f4f006d58e864ef162" translate="yes" xml:space="preserve">
          <source>Space.</source>
          <target state="translated">Space.</target>
        </trans-unit>
        <trans-unit id="8eef4763fa1fe16b6bb4a2baf8cab5427460e619" translate="yes" xml:space="preserve">
          <source>Spacing mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f341ce249d51c9b11286c1f984ee17348a44f5c" translate="yes" xml:space="preserve">
          <source>Spawns a new process and initializes it as described in the beginning of this manual page. The process is spawned using the &lt;code&gt;spawn&lt;/code&gt; BIFs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7ed2584cb35f5a4781d8640847abd5044f7acd" translate="yes" xml:space="preserve">
          <source>Spawns a new process and initializes it as described in the beginning of this manual page. The process is spawned using the &lt;code&gt;spawn_link&lt;/code&gt; BIFs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cbb2dc5868cb0ededa580453f13a294d8af72c" translate="yes" xml:space="preserve">
          <source>Spawns a new process and initializes it as described in the beginning of this manual page. The process is spawned using the &lt;code&gt;spawn_opt&lt;/code&gt; BIFs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4239d5cd20bcd2d24ac65a94922cccc6c8478c4" translate="yes" xml:space="preserve">
          <source>Spawns a process on the pool node that is expected to have the lowest future load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafad9130ea38369a11a7749c33f82f643bd8480" translate="yes" xml:space="preserve">
          <source>Spawns and links to a process on the pool node that is expected to have the lowest future load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f6f7c8b851bb1fa31a0691ac4fd651901620ac" translate="yes" xml:space="preserve">
          <source>Special Flag for literal_alloc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5e414c1b8309ce6e5fc0ef999dc90a86b1b36d" translate="yes" xml:space="preserve">
          <source>Specific for the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2077f98e0a89f01a856fb46e7a674ad07325697" translate="yes" xml:space="preserve">
          <source>Specific functions to support this are &lt;code&gt;&lt;a href=&quot;#create_subscription-1&quot;&gt;create_subscription/1-6&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_event_streams-1&quot;&gt;get_event_streams/1-3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec7247721de870e0f06696429a05e91553b7f67" translate="yes" xml:space="preserve">
          <source>Specific generic time-outs can just as &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt; be restarted or cancelled by setting it to a new time or &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043b62d9c56f096aa038b6c25572955691ac021e" translate="yes" xml:space="preserve">
          <source>Specifically, the application configuration parameters are automatically updated according to (in increasing priority order):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d465c7b0696d5d019af407873a8f228fb47f494" translate="yes" xml:space="preserve">
          <source>Specified &lt;code&gt;.rel&lt;/code&gt; file &lt;code&gt;File&lt;/code&gt; cannot be read or does not contain a single term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9d3ee319194053cb474f42b3ded7c409f99060" translate="yes" xml:space="preserve">
          <source>Specified &lt;code&gt;.rel&lt;/code&gt; file does not contain a recognized release specification, but another term &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658af0b4be0658972a1ed6d4ed084caefdf2e39f" translate="yes" xml:space="preserve">
          <source>Specified &lt;code&gt;relup&lt;/code&gt; file &lt;code&gt;Relup&lt;/code&gt; contains bad data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4f12d52aaae6c06a275fb9d469c739fedfaa98" translate="yes" xml:space="preserve">
          <source>Specified release version &lt;code&gt;Vsn&lt;/code&gt; is already in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a068d6cb0d76c0bfa9363688a200702b68200211" translate="yes" xml:space="preserve">
          <source>Specifies AVPs for which module Mod provides encode/decode functions. The section contents consists of AVP names. For each such name, &lt;code&gt;Mod:Name(encode|decode, Type, Data, Opts)&lt;/code&gt; is expected to provide encode/decode for values of the AVP, where Name is the name of the AVP, Type is it's type as declared in the &lt;code&gt;@avp_types&lt;/code&gt; section of the dictionary, Data is the value to encode/decode, and Opts is a term that is passed through encode/decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac38a050f1e9da7fe89de7d587aaf6d51bcf2ed" translate="yes" xml:space="preserve">
          <source>Specifies Logger's compatibility with &lt;code&gt;SASL Error Logging&lt;/code&gt;. See the &lt;code&gt;kernel(6)&lt;/code&gt; manual page for more information about this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7683235bcdb93e8b7ba424f0769c8c38888e4193" translate="yes" xml:space="preserve">
          <source>Specifies a channel process to handle an SFTP subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cd0aa6bbc4042b79b01a293cbdc0343a05c421" translate="yes" xml:space="preserve">
          <source>Specifies a formatter that the handler can use for converting the log event term to a printable string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963ff978b9122b7f2cc35cc12260364e995a51f6" translate="yes" xml:space="preserve">
          <source>Specifies a function for prettyprinting Erlang syntax trees. This is used for outputting the resulting module definition, as well as for creating stub files. The function is assumed to return formatted text for the given syntax tree, and should raise an exception if an error occurs. The default formatting function calls &lt;code&gt;erl_prettypr:format/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d938a0dbc6626a45daeb05fab2c852825569cc93" translate="yes" xml:space="preserve">
          <source>Specifies a function for prettyprinting Erlang syntax trees. This is used for outputting the resulting module definition. The function is assumed to return formatted text for the given syntax tree, and should raise an exception if an error occurs. The default formatting function calls &lt;code&gt;erl_prettypr:format/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad9656e8bb0143f9e40287fdb029ca4771602ab" translate="yes" xml:space="preserve">
          <source>Specifies a function to be called each time a new log file is opened. The call &lt;code&gt;M:F(A)&lt;/code&gt; is assumed to return &lt;code&gt;{ok, Head}&lt;/code&gt;. The item &lt;code&gt;Head&lt;/code&gt; is written first in each file. &lt;code&gt;Head&lt;/code&gt; is to be a term if the format is &lt;code&gt;internal&lt;/code&gt;, otherwise a sequence of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9a582c23e345c6f1af8d7c94f774ace3fc24ee" translate="yes" xml:space="preserve">
          <source>Specifies a header to be written first on the log file. If the log is a wrap log, the item &lt;code&gt;Head&lt;/code&gt; is written first in each new file. &lt;code&gt;Head&lt;/code&gt; is to be a term if the format is &lt;code&gt;internal&lt;/code&gt;, otherwise a sequence of bytes. Defaults to &lt;code&gt;none&lt;/code&gt;, which means that no header is written first on the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af13086d5a1e7a4068ce9ffac242c55cd65eb47" translate="yes" xml:space="preserve">
          <source>Specifies a list of &quot;pre-defined&quot; macro definitions for the Erlang preprocessor, if used (cf. the &lt;code&gt;preprocess&lt;/code&gt; option). The default value is the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce40a7275652419ded2308203c717e9bd294631" translate="yes" xml:space="preserve">
          <source>Specifies a list of MIBs (including path) and defines which MIBs are initially loaded into the SNMP manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe5714e9076819f77f683fa042f092f47cb3ce1" translate="yes" xml:space="preserve">
          <source>Specifies a list of MIBs (including path) that defines which MIBs are initially loaded into the SNMP master agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646d02a3d453f371128366bcbdaac3802f473664" translate="yes" xml:space="preserve">
          <source>Specifies a list of directory names for the Erlang preprocessor, if used, to search for include files (cf. the &lt;code&gt;preprocess&lt;/code&gt; option). The default value is the empty list. The directory of the source file and the current directory are automatically appended to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e618efb5e45e439fec74d31b0e4d5224079b3b" translate="yes" xml:space="preserve">
          <source>Specifies a list of environment variables that will extend the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0587c7f9327b49d3f0f08383c29baaa0dcc72c0e" translate="yes" xml:space="preserve">
          <source>Specifies a list of names of input modules such that calls to these &quot;safe&quot; modules may be turned into direct local calls, that do not test for code replacement. Typically, this can be done for e.g. standard library modules. If a module is &quot;safe&quot;, it is per definition also &quot;static&quot; (cf. below). The list may be empty. By default, all involved modules &lt;strong&gt;except the target module&lt;/strong&gt; are considered &quot;safe&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db911337b6925833457c9d743d617bb68c80e07" translate="yes" xml:space="preserve">
          <source>Specifies a list of names of input modules which will be assumed never to be replaced (reloaded) unless the target module is also first replaced. The list may be empty. The target module itself (which may also be one of the input modules) is always regarded as &quot;static&quot;, regardless of the value of this option. By default, all involved modules are assumed to be static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b000ffa4bdf3664abecd4e83f559cdc89da1c823" translate="yes" xml:space="preserve">
          <source>Specifies a list of names of input modules whose interfaces should be exported by the output module. A stub descriptor is generated for each specified module, unless its name is &lt;code&gt;Name&lt;/code&gt;. If no modules are specified, then if &lt;code&gt;Name&lt;/code&gt; is also the name of an input module, that module will be exported; otherwise the first listed module in &lt;code&gt;Sources&lt;/code&gt; will be exported. The default value is the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02f9858ed6c9d2732f8c874a4263901db1be213" translate="yes" xml:space="preserve">
          <source>Specifies a list of pairs of module names, representing a mapping from old names to new. &lt;strong&gt;The set of old names may not include any of the names of the input modules.&lt;/strong&gt; All calls to the listed old modules will be rewritten to refer to the corresponding new modules. &lt;strong&gt;The redirected calls will not be further processed, even if the new destination is in one of the input modules.&lt;/strong&gt; This option mainly exists to support module renaming; cf. &lt;code&gt;rename/3&lt;/code&gt;. The default value is the empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ecf352bd9307ae219dddc3a8afe793a6662482" translate="yes" xml:space="preserve">
          <source>Specifies a list of rules for associating object files with source files, to be passed to the function &lt;code&gt;filelib:find_source/2&lt;/code&gt;. This can be used to change the way Igor looks for source files. If this option is not specified, the default system rules are used. The first occurrence of this option completely overrides any later in the option list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd12245ab5a3976c6e07486b9cb0019038bc563" translate="yes" xml:space="preserve">
          <source>Specifies a longest time to wait for a send operation to be accepted by the underlying TCP stack. When the limit is exceeded, the send operation returns &lt;code&gt;{error,timeout}&lt;/code&gt;. How much of a packet that got sent is unknown; the socket is therefore to be closed whenever a time-out has occurred (see &lt;code&gt;send_timeout_close&lt;/code&gt; below). Defaults to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314f1878cccf35ceb86706079d5b9775e575e39c" translate="yes" xml:space="preserve">
          <source>Specifies a protocol for Erlang distribution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643b41e2bc85174b6811dc19db5ad4235f91e26f" translate="yes" xml:space="preserve">
          <source>Specifies a textual comment describing the service. This comment shows up as the service description in the Windows service manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67a5ea5fdcea5f89208fb21f5b1fc4f4019256f" translate="yes" xml:space="preserve">
          <source>Specifies an &lt;strong&gt;extra&lt;/strong&gt; environment for the emulator. The environment variables specified here are added to the system-wide environment block that is normally present when a service starts up. Variables present in both the system-wide environment and in the service environment specification will be set to the value specified in the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b946ab1dd1ffa32bcf74841cac44319e24350c" translate="yes" xml:space="preserve">
          <source>Specifies an alternative to &lt;code&gt;rsh&lt;/code&gt; for starting a slave node on a remote host; see &lt;code&gt;slave(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d35d144a129393da88306e0a6c4fcfc31be7e2" translate="yes" xml:space="preserve">
          <source>Specifies an output format. Whether the output is returned or written to file depends on whether or not option &lt;code&gt;return&lt;/code&gt; is specified. When written to file, the resulting file(s) will have extensions &lt;code&gt;.D&lt;/code&gt;, &lt;code&gt;.F&lt;/code&gt;, &lt;code&gt;.erl&lt;/code&gt;, and &lt;code&gt;.hrl&lt;/code&gt; respectively, basenames defaulting to &lt;code&gt;dictionary&lt;/code&gt; if the input dictionary is literal and does not specify &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#name&quot;&gt;@name&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;. When returned, results are in the order of the corresponding format options. Format options default to &lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;hrl&lt;/code&gt; (in this order) if unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8e542f3ab3386ab7c7c837a33999f0cb6c6ce5" translate="yes" xml:space="preserve">
          <source>Specifies another format string to be used in the &lt;code&gt;strftime&lt;/code&gt; C library call. That is, specifying this to &lt;code&gt;&quot;%e-%b-%Y, %T %Z&quot;&lt;/code&gt; gives log messages with time stamps like &lt;code&gt;15-May-2003, 10:23:04 MET&lt;/code&gt;. For more information, see the documentation for the C library function &lt;code&gt;strftime&lt;/code&gt;. Defaults to &lt;code&gt;&quot;%a %b %e %T %Z %Y&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed319463db02b0d588dac27abf8ff7da396e22ad" translate="yes" xml:space="preserve">
          <source>Specifies any data related to the test case. This data can be retrieved at any time using the &lt;code&gt;&lt;a href=&quot;ct#userdata-3&quot;&gt;ct:userdata/3&lt;/a&gt;&lt;/code&gt; utility function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdfea2103ae0ef022a18ee840851b481113ab20" translate="yes" xml:space="preserve">
          <source>Specifies configuration variables required by the test case. If the required configuration variables are not found in any of the test system configuration files, the test case is skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496b6b9f1a04ec6fa47e8880570cc1c9d273aa58" translate="yes" xml:space="preserve">
          <source>Specifies directory &lt;code&gt;Dir&lt;/code&gt; where all generated files are to be placed. If this option is omitted, the files are placed in the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756b0e315646422f58d559cd8b900ee5bb7d2208" translate="yes" xml:space="preserve">
          <source>Specifies how characters are input or output from or to the I/O device, implying that, for example, a terminal is set to handle Unicode input and output or a file is set to handle UTF-8 data encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1b6a1ebeeca4db9d3ed67224fd81d5599255b9" translate="yes" xml:space="preserve">
          <source>Specifies how long time (in milliseconds) the &lt;code&gt;init&lt;/code&gt; process is allowed to spend shutting down the system. If &lt;code&gt;Time&lt;/code&gt; milliseconds have elapsed, all processes still existing are killed. Defaults to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e550ff7d24fc305dd6d8d061ea2e492652765d42" translate="yes" xml:space="preserve">
          <source>Specifies how much memory is to be allocated for the internal compression state: &lt;code&gt;MemLevel&lt;/code&gt;=1 uses minimum memory but is slow and reduces compression ratio; &lt;code&gt;MemLevel&lt;/code&gt;=9 uses maximum memory for optimal speed. Defaults to 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c541278f8dbc9de3fbe87344bf887f36543447" translate="yes" xml:space="preserve">
          <source>Specifies how the parts of the original string are presented in the result list. Valid types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4c55d66a278e2a151d09c02b1175eb335a021d" translate="yes" xml:space="preserve">
          <source>Specifies if &lt;code&gt;os_sup&lt;/code&gt; is to be started or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe108b428db082101b7903eec41f3818ecf7325" translate="yes" xml:space="preserve">
          <source>Specifies if and how the audit trail log shall be repaired when opened. Unless this parameter has the value &lt;code&gt;snmp_repair&lt;/code&gt; it is sent to &lt;code&gt;disk_log&lt;/code&gt;. If, on the other hand, the value is &lt;code&gt;snmp_repair&lt;/code&gt;, snmp attempts to handle certain faults on its own. And even if it cannot repair the file, it does not truncate it directly, but instead &lt;strong&gt;moves it aside&lt;/strong&gt; for later off-line analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3658421417f6f7023d4c932a6bc3bee6c32fab9" translate="yes" xml:space="preserve">
          <source>Specifies if logging is to be ended if &lt;code&gt;rb&lt;/code&gt; encounters an unprintable report. (You can get a report with an incorrect form if function &lt;code&gt;error_logger&lt;/code&gt;, &lt;code&gt;error_msg&lt;/code&gt;, or &lt;code&gt;info_msg&lt;/code&gt; has been called with an invalid format string)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765304e2a33975f373a966a3122f13f17732444d" translate="yes" xml:space="preserve">
          <source>Specifies if messages will be sent to &lt;code&gt;error_logger&lt;/code&gt; on recoverable errors with the log files. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8395a04227320893b9d3333f53a3d612f76dffc4" translate="yes" xml:space="preserve">
          <source>Specifies if the analysis should be sorted according to the ACC column, which is the default, or the OWN column. See &lt;code&gt;&lt;a href=&quot;#analysis&quot;&gt;Analysis Format&lt;/a&gt;&lt;/code&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cb184ada96d2b9e14fcd7f20b8ab8cb290a1c1" translate="yes" xml:space="preserve">
          <source>Specifies if the audit trail log entries will be (sequence) numbered or not. The range of the sequence numbers are according to RFC 5424, i.e. 1 through 2147483647.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb0ad30ffe597be9ec1747276ec75d711dad8ed" translate="yes" xml:space="preserve">
          <source>Specifies if the client is to try to reuse sessions when possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1659dc4dae00743b1c42bc838d72145e161054" translate="yes" xml:space="preserve">
          <source>Specifies if the log is to be opened in read-only or read-write mode. Defaults to &lt;code&gt;read_write&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cbddf85ffbe382ec390161b6364754eef56872" translate="yes" xml:space="preserve">
          <source>Specifies if the server is to agree to reuse sessions when requested by the clients. See also option &lt;code&gt;reuse_session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ce6ecaf4bf285d5669a8d76ba655b048146b32" translate="yes" xml:space="preserve">
          <source>Specifies if the slave node is to be killed if a time-out occurs during initialization or startup. Defaults to &lt;code&gt;true&lt;/code&gt;. Notice that the node can also be still alive it the boot time-out occurred, but it is not killed in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e7c736cb0375dfd7e2e85ef1ae816625c278db" translate="yes" xml:space="preserve">
          <source>Specifies if the slave node is to be stopped if the master node stops. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6863f48147c29f941903c73fdc940937446b00a9" translate="yes" xml:space="preserve">
          <source>Specifies if to reject renegotiation attempt that does not live up to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5746.txt&quot;&gt;RFC 5746&lt;/a&gt;&lt;/code&gt;. By default &lt;code&gt;secure_renegotiate&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, that is, secure renegotiation is enforced. If set to &lt;code&gt;false&lt;/code&gt; secure renegotiation will still be used if possible, but it falls back to insecure renegotiation if the peer does not support &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5746.txt&quot;&gt;RFC 5746&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924a9c0514e91ad663f8ee671a9bd00c58581242" translate="yes" xml:space="preserve">
          <source>Specifies include directories (described earlier).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4832d43452327b219c706dc50084a728937cbd1" translate="yes" xml:space="preserve">
          <source>Specifies specifically that \R is to match all the Unicode newline characters (including CRLF, and so on, the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c79d8a677d7198ac041cefa87536c05e47b241" translate="yes" xml:space="preserve">
          <source>Specifies specifically that \R is to match all the Unicode newline characters (including CRLF, and so on, the default). (Overrides the compilation option.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497cbddcc844eb037f2eeb5c9e71b539696cfec7" translate="yes" xml:space="preserve">
          <source>Specifies specifically that \R is to match only the CR LF, or CRLF sequences, not the Unicode-specific newline characters. (Overrides the compilation option.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99bc9c0572d58f55185c99879f560312e3f0dcd" translate="yes" xml:space="preserve">
          <source>Specifies specifically that \R is to match only the CR, LF, or CRLF sequences, not the Unicode-specific newline characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a2505a1ec4fa886afebcc07b0d9a91d416f9b6" translate="yes" xml:space="preserve">
          <source>Specifies that Unicode character properties are to be used when resolving \B, \b, \D, \d, \S, \s, \W and \w. Without this flag, only ISO Latin-1 properties are used. Using Unicode properties hurts performance, but is semantically correct when working with Unicode characters beyond the ISO Latin-1 range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbf9d2b815d82e53e9695faeeb0b36d7ee91451" translate="yes" xml:space="preserve">
          <source>Specifies that a tracer module is to be called instead of sending a trace message. The tracer module can then ignore or change the trace message. For more details on how to write a tracer module, see &lt;code&gt;erl_tracer(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6710bb6e3aa6ebbf29da6da58e9263bde44061" translate="yes" xml:space="preserve">
          <source>Specifies that empty parts at the end of the result list are to be disregarded. The same as specifying &lt;code&gt;{parts,0}&lt;/code&gt;. This corresponds to the default behavior of the &lt;code&gt;split&lt;/code&gt; built-in function in Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824d1a2ca43b36b67d5479813a6dd9d8b68c0f0c" translate="yes" xml:space="preserve">
          <source>Specifies that output from the Erlang shell is to be sent to a &quot;debug log&quot;. The log file is named &amp;lt;servicename&amp;gt;&lt;code&gt;.debug&lt;/code&gt; or &amp;lt;servicename&amp;gt;&lt;code&gt;.debug.&lt;/code&gt;&amp;lt;N&amp;gt;, where &amp;lt;N&amp;gt; is an integer from 1 through 99. The log file is placed in the working directory of the service (as specified in &lt;code&gt;WorkDir&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b3a9b24285b73688af255d7015013063348a3b" translate="yes" xml:space="preserve">
          <source>Specifies that the (*UTF) and/or (*UTF8) &quot;start-of-pattern items&quot; are forbidden. This flag cannot be combined with option &lt;code&gt;unicode&lt;/code&gt;. Useful if ISO Latin-1 patterns from an external source are to be compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9700fc678df1f11d54375309f05dbcc5a3a5dc6e" translate="yes" xml:space="preserve">
          <source>Specifies that the end of the subject string is not the end of a line, so the dollar metacharacter is not to match it nor (except in multiline mode) a newline immediately before it. Setting this without &lt;code&gt;multiline&lt;/code&gt; (at compile time) causes dollar never to match. This option affects only the behavior of the dollar metacharacter. It does not affect \Z or \z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d943073641a7e0bab24f416a2974ddc8d8857d" translate="yes" xml:space="preserve">
          <source>Specifies that the first character of the subject string is not the beginning of a line, so the circumflex metacharacter is not to match before it. Setting this without &lt;code&gt;multiline&lt;/code&gt; (at compile time) causes circumflex never to match. This option only affects the behavior of the circumflex metacharacter. It does not affect \A.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301e7c4e17cd1fd9770abbc7a8ef562e86042517" translate="yes" xml:space="preserve">
          <source>Specifies that trace to process or port shall be done instead of trace to file. This option is only allowed with the &lt;code&gt;start&lt;/code&gt; option, but not with the &lt;code&gt;{file, Filename}&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b044d59af8123aeee08f75d87b47c142ec0b445" translate="yes" xml:space="preserve">
          <source>Specifies the IP addresses for the hosts on which Erlang boot servers are running, see &lt;code&gt;erl_boot_server(3)&lt;/code&gt;. This flag is mandatory if flag &lt;code&gt;-loader inet&lt;/code&gt; is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d655bd05e7e251cd06d594beb4f1f79b9f6de020" translate="yes" xml:space="preserve">
          <source>Specifies the Windows-internal service name (not the display name, which is the one &lt;code&gt;erlsrv&lt;/code&gt; uses to identify the service).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf01e6a0d4d05e55b0e780ecb5e8fa79971096e0" translate="yes" xml:space="preserve">
          <source>Specifies the application callback module and a start argument, see &lt;code&gt;&lt;a href=&quot;application&quot;&gt;application(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dfe5548a8c0579d075b6c6686487463f9cd8f4" translate="yes" xml:space="preserve">
          <source>Specifies the channel process to handle an SFTP subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c02cec66812ec7852ece4c0bc62b88b2e8921c" translate="yes" xml:space="preserve">
          <source>Specifies the configuration for &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger&lt;/a&gt;&lt;/code&gt;, except the primary log level, which is specified with &lt;code&gt;&lt;a href=&quot;#logger_level&quot;&gt;logger_level&lt;/a&gt;&lt;/code&gt;, and the compatibility with &lt;code&gt;SASL Error Logging&lt;/code&gt;, which is specified with &lt;code&gt;&lt;a href=&quot;#logger_sasl_compatible&quot;&gt;logger_sasl_compatible&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f4e920703dbc3bfa71ee2c1411346b4e2817a4" translate="yes" xml:space="preserve">
          <source>Specifies the cookie of the Erlang runtime system. This flag is mandatory if flag &lt;code&gt;-loader inet&lt;/code&gt; is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b46b787a31fffabed5eed01450820e532b6f37" translate="yes" xml:space="preserve">
          <source>Specifies the destination for the analysis. If this option is not given or it is &lt;code&gt;dest&lt;/code&gt;, the destination will be the caller's group leader, otherwise the destination &lt;code&gt;Dest&lt;/code&gt; is either the &lt;code&gt;pid()&lt;/code&gt; of an I/O device or a filename. And, finally, if the filename is &lt;code&gt;[]&lt;/code&gt; - &lt;code&gt;&quot;fprof.analysis&quot;&lt;/code&gt; is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952057c2e8687b3566ab54479525a8c7a6b88329" translate="yes" xml:space="preserve">
          <source>Specifies the destination for the trace text dump. If this option is not given, no dump is generated, if it is &lt;code&gt;dump&lt;/code&gt; the destination will be the caller's group leader, otherwise the destination &lt;code&gt;Dump&lt;/code&gt; is either the pid of an I/O device or a filename. And, finally, if the filename is &lt;code&gt;[]&lt;/code&gt; - &lt;code&gt;&quot;fprof.dump&quot;&lt;/code&gt; is used instead. This option is not allowed with the &lt;code&gt;stop&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e4e09132b10b25be07956cc6decb2963d7fa7b" translate="yes" xml:space="preserve">
          <source>Specifies the destination to write the formatted text. Default destination is &lt;code&gt;standard_io&lt;/code&gt;, but a filename can also be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a898b76288f135e14a68d460953620429563cc7" translate="yes" xml:space="preserve">
          <source>Specifies the directory in which the CRLs can be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2569413a393a3d307887a9afe3143d813c8f282e" translate="yes" xml:space="preserve">
          <source>Specifies the encoding of the generated file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d529e121b4b6cce7f1e463c84058fee2efbbcaa7" translate="yes" xml:space="preserve">
          <source>Specifies the end of an &lt;code&gt;ifdef&lt;/code&gt;, an &lt;code&gt;ifndef&lt;/code&gt; directive, or the end of an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ded5fdd324009ea93d0f4014740ca8247c88277" translate="yes" xml:space="preserve">
          <source>Specifies the file name suffix to be used when a backup file is created; the default value is &lt;code&gt;&quot;.bak&quot;&lt;/code&gt; (cf. the &lt;code&gt;backups&lt;/code&gt; option).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a69056256f3b36155d0001e5a724fc33c5b60" translate="yes" xml:space="preserve">
          <source>Specifies the file name suffix to be used when a backup file is created; the default value is &lt;code&gt;&quot;.bak&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8a95521317583e3190ac9fef113c569b2fb1c1" translate="yes" xml:space="preserve">
          <source>Specifies the filename of the trace. If the option &lt;code&gt;file&lt;/code&gt; is given, or none of these options are given, the file &lt;code&gt;&quot;fprof.trace&quot;&lt;/code&gt; is used. This option is only allowed with the &lt;code&gt;start&lt;/code&gt; option, but not with the &lt;code&gt;{tracer, Tracer}&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b1fccea2216ad3473b2d58aed2d9e2c5006d28" translate="yes" xml:space="preserve">
          <source>Specifies the filenames that are used for access files. When a request comes, every directory in the path to the requested asset are searched after files with the names specified by this parameter. If such a file is found, the file is parsed and the restrictions specified in it are applied to the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5455c6185a0a3b774fbb3441f9f86c47fd4a7e3e" translate="yes" xml:space="preserve">
          <source>Specifies the format handler to use. If this option is not specified, option &lt;code&gt;handler&lt;/code&gt; that is specified when starting the tracer is used. If option &lt;code&gt;handler&lt;/code&gt; is not specified when starting the tracer either, a default handler is used, which prints each trace message as a text line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a28c94a725c63da3fc84e3cd6f693ad640dd550" translate="yes" xml:space="preserve">
          <source>Specifies the handler filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c9f8084de6512b7f113466e2688bc2f4a04fe7" translate="yes" xml:space="preserve">
          <source>Specifies the identity of the Erlang runtime system. If it is run as a distributed node, &lt;code&gt;Id&lt;/code&gt; must be identical to the name supplied together with flag &lt;code&gt;-sname&lt;/code&gt; or &lt;code&gt;-name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c95ccbe0f0ea3a453fce44769b19d8b010f5a6" translate="yes" xml:space="preserve">
          <source>Specifies the identity the client presents to the server. The matching secret is found by calling &lt;code&gt;user_lookup_fun&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff680f64a65cc9615ac537805e1ac6fcea622aae" translate="yes" xml:space="preserve">
          <source>Specifies the initial array size; this also implies &lt;code&gt;{fixed, true}&lt;/code&gt;. If &lt;code&gt;N&lt;/code&gt; is not a non-negative integer, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dd5dab4832d8ebcf48692822520b370b91f6d5" translate="yes" xml:space="preserve">
          <source>Specifies the log level for the handler, that is, log events that are equally or more severe than this level, are forwarded to the handler filters for this handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c259b9830dc67a8b8fd35b98c5e2380f8f41a44" translate="yes" xml:space="preserve">
          <source>Specifies the log name. This name must be passed on as a parameter in all subsequent logging operations. A name must always be supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52d1a9bacb11746d7cb358ab914802339c46802" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of attempts to authenticate a user before the user is blocked out. If a user successfully authenticates while blocked, the user receives a 403 (Forbidden) response from the server. If the user makes a failed attempt while blocked, the server returns 401 (Unauthorized), for security reasons. Default is &lt;code&gt;3&lt;/code&gt;. Can be set to infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6149a14f9ab3d7f7a28bfb24f233f5b9dd59163c" translate="yes" xml:space="preserve">
          <source>Specifies the method used by &lt;code&gt;erl_prim_loader&lt;/code&gt; to load Erlang modules into the system; see &lt;code&gt;&lt;a href=&quot;erl_prim_loader&quot;&gt;erl_prim_loader(3)&lt;/a&gt;&lt;/code&gt;. Two &lt;code&gt;Loader&lt;/code&gt; methods are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6b14950ff828d2b84321b57a0ff5134951e1c8" translate="yes" xml:space="preserve">
          <source>Specifies the module to use for registration and lookup of node names. Defaults to &lt;code&gt;erl_epmd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4071e650de6631118bb07c784d07e5d47f922ee2" translate="yes" xml:space="preserve">
          <source>Specifies the name of a configuration file, &lt;code&gt;Config.config&lt;/code&gt;, which is used to configure applications; see &lt;code&gt;app(4)&lt;/code&gt; and &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f264fd69484af28ffae734472c59803b0ef0b2e" translate="yes" xml:space="preserve">
          <source>Specifies the name of the boot file, &lt;code&gt;File.boot&lt;/code&gt;, which is used to start the system; see &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;. Unless &lt;code&gt;File&lt;/code&gt; contains an absolute path, the system searches for &lt;code&gt;File.boot&lt;/code&gt; in the current and &lt;code&gt;$ROOT/bin&lt;/code&gt; directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec64a2173b07191e2d565ccd485aae746f480c5" translate="yes" xml:space="preserve">
          <source>Specifies the name of the directory in which the output file is to be written. An empty string is interpreted as the current directory. By default, the current directory is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716ee0450ad53d215821f32f0ee8d0adac820253" translate="yes" xml:space="preserve">
          <source>Specifies the name of the directory in which the output file is to be written. By default, the current directory is used. If the value is an empty string, the current directory is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee4f335d4191683ebb2904dbd95995dac769beb" translate="yes" xml:space="preserve">
          <source>Specifies the name of the directory to which any generated stub module files are written. The default value is &lt;code&gt;&quot;stubs&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc5726d987ee0f019dd98cad0981dc7d6253a8c" translate="yes" xml:space="preserve">
          <source>Specifies the name of the file (without suffix) to which the resulting source code is to be written. By default, this is the same as the &lt;code&gt;Name&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8540c944de095f6483b18ec6123d81a4f4c080e" translate="yes" xml:space="preserve">
          <source>Specifies the name of the file (without suffix) to which the resulting source code is to be written. If this option is not specified, the &lt;code&gt;Name&lt;/code&gt; argument is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37257543bb4235b7c81905784d4365c5b22e9d21" translate="yes" xml:space="preserve">
          <source>Specifies the name of the file from which the source code was taken. This is only used for generation of error reports. The default value is the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4237ef82d4494fb98b2da4e67391f4c6d4fa281" translate="yes" xml:space="preserve">
          <source>Specifies the name of the file to be used for logged terms. If this value is omitted and the log name is an atom or a string, the filename defaults to &lt;code&gt;lists:concat([Log, &quot;.LOG&quot;])&lt;/code&gt; for halt logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873ccffbaf98b33adc0461b78b73fe49ca222ee4" translate="yes" xml:space="preserve">
          <source>Specifies the name of the loader used by &lt;code&gt;erl_prim_loader&lt;/code&gt;. &lt;code&gt;Loader&lt;/code&gt; can be &lt;code&gt;efile&lt;/code&gt; (use the local file system) or &lt;code&gt;inet&lt;/code&gt; (load using the &lt;code&gt;boot_server&lt;/code&gt; on another Erlang node).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c4c893c52783bf1527d7276992d6ec887b51d4" translate="yes" xml:space="preserve">
          <source>Specifies the number of columns in the analysis text. If this option is not given the number of columns is set to 80.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f2553b90ba8e21a17c8412a775ae878d7a5f28" translate="yes" xml:space="preserve">
          <source>Specifies the number of minutes a failed user authentication is remembered. If a user authenticates after this time has passed, the previous failed authentications are forgotten. Default is &lt;code&gt;30&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e81de7d06e2b3f516ef0f3fcb291599f5346d7a" translate="yes" xml:space="preserve">
          <source>Specifies the number of minutes a user is blocked. After this timehas passed, the user automatically regains access. Default is &lt;code&gt;60&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3927329a37955b0329e90f73d6bd01c48d70eb" translate="yes" xml:space="preserve">
          <source>Specifies the number of parts the subject string is to be split into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207d98172a81fbc09c1ba4c28e7bde32ac7dadd" translate="yes" xml:space="preserve">
          <source>Specifies the number of seconds a successful user authentication is remembered. After this time has passed, the authentication is no longer reported. Default is &lt;code&gt;30&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a9699573c4a262b4fa5935c65712551d146d2d" translate="yes" xml:space="preserve">
          <source>Specifies the options for the SNMP note store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90560d87857a7ebc70c6aeffcc6b2e765e1a9d02" translate="yes" xml:space="preserve">
          <source>Specifies the options for the manager server process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2820010a48c19c5d199aa3acf1fc88ba1c9738f2" translate="yes" xml:space="preserve">
          <source>Specifies the preferred maximum number of characters on any line, including indentation. The default value is 80.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5267db33a1d988cde050567cc551cd47aadb69" translate="yes" xml:space="preserve">
          <source>Specifies the preferred maximum number of characters on any line, not counting indentation. The default value is 65.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875af41d367db07368951fed1887bb6bf57dfa8b" translate="yes" xml:space="preserve">
          <source>Specifies the primary filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f23d44854f2be07047a6283bcceeca405aa6a8" translate="yes" xml:space="preserve">
          <source>Specifies the primary log level, that is, log event that are equally or more severe than this level, are forwarded to the primary filters. Less severe log events are immediately discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe10d443b571f9009ea2bd0013789e9ea9ce912" translate="yes" xml:space="preserve">
          <source>Specifies the primary log level. See the &lt;code&gt;kernel(6)&lt;/code&gt; manual page for more information about this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151b1572a25df546c65b5193dbbe46b97f12f35f" translate="yes" xml:space="preserve">
          <source>Specifies the processes to be traced. Trace flags specified in this call specify what to trace on each process. This function can be called many times if you like different trace flags to be set on different processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2651e9cda43c2a3b2258924c47236ffab78d21c8" translate="yes" xml:space="preserve">
          <source>Specifies the server identity hint, which the server presents to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d334fe554edc3fb1d020c6bf3708ea49d7d731" translate="yes" xml:space="preserve">
          <source>Specifies the short or long node name of the Erlang emulator. The Erlang services are always distributed. Default is to use the service name as (short) nodename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d12a63782a3e24ddc5e514f3a55e564c6217fa" translate="yes" xml:space="preserve">
          <source>Specifies the size of the audit trail log. This parameter is sent to &lt;code&gt;disk_log&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a9ba11e27524f18872f5a681810d5e606cda71" translate="yes" xml:space="preserve">
          <source>Specifies the suffix to be used for the output file names; the default value is &lt;code&gt;&quot;.erl&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb79a41fe81a312aa3e97be11db5d4a8002931d" translate="yes" xml:space="preserve">
          <source>Specifies the timeout time for the request-keep-alive timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d52c1796914b8a1f5f214bbba67a504109d182" translate="yes" xml:space="preserve">
          <source>Specifies the type of output file. &lt;code&gt;Output_type&lt;/code&gt; is the same as the file extension of the output file, but without the period. This option is ignored by compilers that have a single output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eced978aa05aa22684ae33073877e513a8908239" translate="yes" xml:space="preserve">
          <source>Specifies the username and password to use to authenticate to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bcf2009be18d6d83aadd3c29a800b05ed7e545" translate="yes" xml:space="preserve">
          <source>Specifies what happens to a log event if all filters return &lt;code&gt;ignore&lt;/code&gt;, or if no filters exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfa114baf9f8d6f2b236d8d0ccb65ecd0f7d095" translate="yes" xml:space="preserve">
          <source>Specifies what type of an audit trail log should be used. The effect of the type is actually different for the the agent and the manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd18d7ad2981fad7ccb5d75bad1824c22ce4eae6" translate="yes" xml:space="preserve">
          <source>Specifies where shell output is to be sent. Default is that shell output is discarded. To be used only for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2effffeb6cea75b368a013821667ea4efacfcb2d" translate="yes" xml:space="preserve">
          <source>Specifies where the HTML log files are to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeca1d9ed381187a250a618ba95a1823e7727e72" translate="yes" xml:space="preserve">
          <source>Specifies where the application &lt;code&gt;Application = atom()&lt;/code&gt; can execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a96b1e410416b1763090d51946ce858f0aaa753" translate="yes" xml:space="preserve">
          <source>Specifies where the audit trail log should be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc14492fbf0bed719b58b6a14729ced65f4dffc2" translate="yes" xml:space="preserve">
          <source>Specifies where to send the trace messages. &lt;code&gt;Tracer&lt;/code&gt; must be the process identifier of a local process or the port identifier of a local port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0736a03e461873d2b6560c5e341722f3499d53ae" translate="yes" xml:space="preserve">
          <source>Specifies whether Erlang should start &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt; on startup. By default this is &lt;code&gt;true&lt;/code&gt;, but if you prefer to start epmd manually, set this to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a0817207cc536325027c5c3de6ecde5063837c" translate="yes" xml:space="preserve">
          <source>Specifies whether the &lt;code&gt;disksup&lt;/code&gt; helper process should only use POSIX conformant commands (&lt;code&gt;true&lt;/code&gt;) or not. The default is &lt;code&gt;false&lt;/code&gt;. Setting this parameter to &lt;code&gt;true&lt;/code&gt; can be necessary on embedded systems with stripped-down versions of Unix tools like &lt;code&gt;df&lt;/code&gt;. The returned disk data and alarms can be different when using this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37a2fb49e4dd84f2ebb07340bc32c5cea43f117" translate="yes" xml:space="preserve">
          <source>Specifies whether the &lt;code&gt;memsup&lt;/code&gt; process should only check system memory usage (&lt;code&gt;true&lt;/code&gt;) or not. The default is &lt;code&gt;false&lt;/code&gt;, meaning that information regarding both system memory usage and Erlang process memory usage is collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2182a89513f347731a10ff199fd168b6267f41" translate="yes" xml:space="preserve">
          <source>Specifies which captured (sub)patterns are to be returned. &lt;code&gt;ValueSpec&lt;/code&gt; can either be an atom describing a predefined set of return values, or a list containing the indexes or the names of specific subpatterns to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277d0642b5c94d1ca87165ddc5a437572041b2fc" translate="yes" xml:space="preserve">
          <source>Specifies which captured substrings are returned and in what format. By default, &lt;code&gt;run/3&lt;/code&gt; captures all of the matching part of the substring and all capturing subpatterns (all of the pattern is automatically captured). The default return type is (zero-based) indexes of the captured parts of the string, specified as &lt;code&gt;{Offset,Length}&lt;/code&gt; pairs (the &lt;code&gt;index&lt;/code&gt;&lt;code&gt;Type&lt;/code&gt; of capturing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfd505e5090d57866814c4b21d2e04b0287b2d1" translate="yes" xml:space="preserve">
          <source>Specifies which element in the stored tuples to use as key. By default, it is the first element, that is, &lt;code&gt;Pos=1&lt;/code&gt;. However, this is not always appropriate. In particular, we do not want the first element to be the key if we want to store Erlang records in a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcb53499b90545bdc746f25b23b043b8860b0b9" translate="yes" xml:space="preserve">
          <source>Specifies which flags are added to the parameters of the executable &lt;code&gt;erl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd591e33ef98c9a1d0f243438180b88cf38ad60e" translate="yes" xml:space="preserve">
          <source>Specifies which local port number to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1332f139f846bbd53ce081097f03155f361535d" translate="yes" xml:space="preserve">
          <source>Specifies which other Erlang nodes the &lt;code&gt;inet&lt;/code&gt; loader can use. This flag is mandatory if flag &lt;code&gt;-loader inet&lt;/code&gt; is present. On each host, there must be on Erlang node with the &lt;code&gt;erl_boot_server(3)&lt;/code&gt;, which handles the load requests. &lt;code&gt;Hosts&lt;/code&gt; is a list of IP addresses (hostnames are not acceptable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53558be962c35002e0bb56fe77e9b7ddc3141ff5" translate="yes" xml:space="preserve">
          <source>Specifies which processes that shall be traced. If this option is not given, the calling process is traced. All processes spawned by the traced processes are also traced. This option is only allowed with the &lt;code&gt;start&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441075734f5829cc5fb329d4f975f091bf99c295" translate="yes" xml:space="preserve">
          <source>Specify &lt;code&gt;etype&lt;/code&gt; as one of the following constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4998769b2f5a4eee7b2e8f3a102444590d215c" translate="yes" xml:space="preserve">
          <source>Specify a system file that Erlang is to read configuration data from. &lt;code&gt;Format&lt;/code&gt; tells the parser how the file is to be interpreted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5adb5a9a945608c7adb24d26976f20ac1fc146" translate="yes" xml:space="preserve">
          <source>Specify a system file that Erlang is to read resolver configuration from for the internal DNS client &lt;code&gt;inet_res(3)&lt;/code&gt;, and monitor for changes, even if it does not exist. The path must be absolute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e8cf1c87a200f852a1927aa8f089cf8d3ecc5f" translate="yes" xml:space="preserve">
          <source>Specify a system file that Erlang is to read resolver configuration from for the internal hosts file resolver, and monitor for changes, even if it does not exist. The path must be absolute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23627b00304a4d8b1bcae862d72b0ee4e2fbcce" translate="yes" xml:space="preserve">
          <source>Specify a system registry that Erlang is to read configuration data from. &lt;code&gt;win32&lt;/code&gt; is the only valid option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6718bd8fe7e1b17232d92e3bedaf177dc4950f5c" translate="yes" xml:space="preserve">
          <source>Specify breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05aefe09978c71eb533e67bc0a4a5abc92516f10" translate="yes" xml:space="preserve">
          <source>Specify how to perform lookup and caching of certificate revocation lists. &lt;code&gt;Module&lt;/code&gt; defaults to &lt;code&gt;ssl_crl_cache&lt;/code&gt; with &lt;code&gt;DbHandle&lt;/code&gt; being &lt;code&gt;internal&lt;/code&gt; and an empty argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753ca300cab73ef6f1046dee190ebc7e69330958" translate="yes" xml:space="preserve">
          <source>Specify include directories to be passed to the compiler for automatic compilation (similar to &lt;code&gt;ct_run -include&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86afce635e7f24039de98afd64bd791651c094bf" translate="yes" xml:space="preserve">
          <source>Specify lookup methods and in which order to try them. The valid methods are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e987e5615e4f2657bffcf3fb915277d969f20f2" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;Mnesia&lt;/code&gt; directory by providing an application parameter either when starting the Erlang shell or in the application script. Previously, the following example was used to create the directory for the &lt;code&gt;Company&lt;/code&gt; database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cb48a0bee2458b16541c2ec1dac43622330992" translate="yes" xml:space="preserve">
          <source>Specify the hostname to be used in TLS Server Name Indication extension. If not specified it will default to the &lt;code&gt;Host&lt;/code&gt; argument of &lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;connect/[3,4]&lt;/a&gt;&lt;/code&gt; unless it is of type inet:ipaddress().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b753efb9c74f7d99f9413cb4a9d22f6871c7956e" translate="yes" xml:space="preserve">
          <source>Specify the modules to be interpreted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ff8e788f0f029eac875c1827744b22530cc430" translate="yes" xml:space="preserve">
          <source>Specify the name of the libraries with &lt;code&gt;-lerl_interface -lei&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ed86a54a658842ff830edb8386136f3061d27d" translate="yes" xml:space="preserve">
          <source>Specify the path to &lt;code&gt;liberl_interface.a&lt;/code&gt; and &lt;code&gt;libei.a&lt;/code&gt; with &lt;code&gt;-L$OTPROOT/lib/erl_interface-3.2.3/lib&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7a3b41f49e858f11c0a5c92131e043c94eddc2" translate="yes" xml:space="preserve">
          <source>Specify the top-level HTML log directory (similar to &lt;code&gt;ct_run -logdir&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848fa5d5c77622c0914c10cd7da75a2854d6d4c2" translate="yes" xml:space="preserve">
          <source>Specify which ASN.1 specs to compile in a module with extension &lt;code&gt;.set.asn&lt;/code&gt;. Choose a module name and provide the names of the ASN.1 specs. For example, if you have the specs &lt;code&gt;File1.asn&lt;/code&gt;, &lt;code&gt;File2.asn&lt;/code&gt;, and &lt;code&gt;File3.asn&lt;/code&gt;, your module &lt;code&gt;MyModule.set.asn&lt;/code&gt; looks as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ede1ca168066274e82416d16462db165a08574e" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;0&lt;/code&gt; as the number of parts gives the same effect as option &lt;code&gt;trim&lt;/code&gt;. If subexpressions are captured, empty subexpressions matched at the end are also stripped from the result if &lt;code&gt;trim&lt;/code&gt; or &lt;code&gt;{parts,0}&lt;/code&gt; is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae6586dedf228b0386f11a5096f7781896e3713" translate="yes" xml:space="preserve">
          <source>Specifying a &lt;code&gt;#diameter_callback{}&lt;/code&gt; record allows individual functions to be configured in place of the usual &lt;code&gt;diameter_app(3)&lt;/code&gt; callbacks. See &lt;code&gt;diameter_callback.erl&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f28840a22e4c1a0178116b6217dead2ce2b0d0" translate="yes" xml:space="preserve">
          <source>Specifying a SetFun as an integer I is equivalent to specifying &lt;code&gt;{external, fun(X)&amp;nbsp;-&amp;gt; element(I,&amp;nbsp;X)&amp;nbsp;end}&lt;/code&gt;, but is to be preferred, as it makes it possible to handle this case even more efficiently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b200657ccccc323bc4b3a61970c9fb6663f8829a" translate="yes" xml:space="preserve">
          <source>Specifying a Vendor-Id in the definition of a grouped AVP is equivalent to specifying it with &lt;code&gt;@avp_vendor_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0939c70054b8b7d25dfe8894b65b0d6a2f6c5cb4" translate="yes" xml:space="preserve">
          <source>Specifying a capability as a transport option may be particularly appropriate for Inband-Security-Id, in case TLS is desired over TCP as implemented by &lt;code&gt;&lt;a href=&quot;diameter_tcp&quot;&gt;diameter_tcp(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7efdf3486ed6f6f03fa215fe68c9b19961adc4" translate="yes" xml:space="preserve">
          <source>Specifying a default value for a required variable can result in a test case always getting executed. This might not be a desired behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df93bcf6a37c6be11e1f38fe0c2c4974ff170827" translate="yes" xml:space="preserve">
          <source>Specifying a lower value can result in matches with deep recursion failing, when they should have matched:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fee67be666602823141fbcc3f4990dca2082eff" translate="yes" xml:space="preserve">
          <source>Specifying caseless matching does not affect these escape sequences. For example, \p{Lu} always matches only uppercase letters. This is different from the behavior of current versions of Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9328e55b836e81b496740c36ae4239082f4dfed" translate="yes" xml:space="preserve">
          <source>Specifying the &lt;code&gt;Mnesia&lt;/code&gt; directory where the database is to be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9523b57f2fe527eb52b35d6387fb2934f9c06f0" translate="yes" xml:space="preserve">
          <source>Specifying value &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;Schedulers&lt;/code&gt; or &lt;code&gt;SchedulersOnline&lt;/code&gt; resets the number of scheduler threads or scheduler threads online, respectively, to its default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6a9fde2011a67805370713435ac141e07d78b7" translate="yes" xml:space="preserve">
          <source>Splits &lt;code&gt;List1&lt;/code&gt; into &lt;code&gt;List2&lt;/code&gt; and &lt;code&gt;List3&lt;/code&gt;. &lt;code&gt;List2&lt;/code&gt; contains the first &lt;code&gt;N&lt;/code&gt; elements and &lt;code&gt;List3&lt;/code&gt; the remaining elements (the &lt;code&gt;N&lt;/code&gt;th tail).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21cd9e17d2310b92584df470b648894e95593ac" translate="yes" xml:space="preserve">
          <source>Splits &lt;code&gt;Q1&lt;/code&gt; in two. The &lt;code&gt;N&lt;/code&gt; front items are put in &lt;code&gt;Q2&lt;/code&gt; and the rest in &lt;code&gt;Q3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eec603124d258453b60da5c407f4065bdd3a82" translate="yes" xml:space="preserve">
          <source>Splits &lt;code&gt;String&lt;/code&gt; where &lt;code&gt;SearchPattern&lt;/code&gt; is encountered and return the remaining parts. &lt;code&gt;Where&lt;/code&gt;, default &lt;code&gt;leading&lt;/code&gt;, indicates whether the &lt;code&gt;leading&lt;/code&gt;, the &lt;code&gt;trailing&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt; encounters of &lt;code&gt;SearchPattern&lt;/code&gt; will split &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25567346f43137d74e25b1241822cf22abb5ddac" translate="yes" xml:space="preserve">
          <source>Splits &lt;code&gt;Subject&lt;/code&gt; into a list of binaries based on &lt;code&gt;Pattern&lt;/code&gt;. If option &lt;code&gt;global&lt;/code&gt; is not specified, only the first occurrence of &lt;code&gt;Pattern&lt;/code&gt; in &lt;code&gt;Subject&lt;/code&gt; gives rise to a split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da62e8a84d56891f5e9a2c98b379c231edd8869e" translate="yes" xml:space="preserve">
          <source>Splits the input into parts by finding tokens according to the regular expression supplied. The splitting is basically done by running a global regular expression match and dividing the initial string wherever a match occurs. The matching part of the string is removed from the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac38be70f239ed094aabcbd90c172f845622bd15" translate="yes" xml:space="preserve">
          <source>Splitting and appending strings is to be done on grapheme clusters borders. There is no verification that the results of appending strings are valid or normalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f44f54d6ee53905261369247f4630b34d0d1af" translate="yes" xml:space="preserve">
          <source>Ssl data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf3917fbbe05297a4f0e607b72584b93f012f67" translate="yes" xml:space="preserve">
          <source>Stack back-traces cannot be displayed for the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251ddefdba6ee3bf265241244e04f8a519aed58c" translate="yes" xml:space="preserve">
          <source>Stack backtrace for a process. Equivalent to &lt;code&gt;erlang:process_display(Pid, backtrace)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11178782316574672ef20b040b0f0b8a456d4d59" translate="yes" xml:space="preserve">
          <source>Staged install using &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt;. You can perform the install phase in a temporary directory and later move the installation into its correct location by use of the &lt;code&gt;DESTDIR&lt;/code&gt; variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700a43e0b226296e1e2343135d60500c33122d9f" translate="yes" xml:space="preserve">
          <source>Standard I/O server interface functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef02ce2d33e50fe72c884a4198cd194948a8508" translate="yes" xml:space="preserve">
          <source>Standard handler for Logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcc643845c989ee1c6b2b5c547d3c8055ba7baf" translate="yes" xml:space="preserve">
          <source>Standard logging using the &quot;Common Logfile Format&quot; and &lt;code&gt;disk_log(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ec4f034df68e76533f89deee41d466872edd1f" translate="yes" xml:space="preserve">
          <source>Standard logging using the &quot;Common Logfile Format&quot; and text files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bdf22647903c9b0c335419e1ec20d56fe2dea8" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;Inets&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8244363931878e0677e2dbef98807fd92b4a23" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;Mnesia&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad23844314919d2a62d1a3f6ac6d2ed6a4a9542" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;Mnesia&lt;/code&gt; by calling the following function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8b316378031476c31829139e69a6a50052bb0d" translate="yes" xml:space="preserve">
          <source>Start Erlang Top in either of the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb621d5047b1047e6aebe100165918c26eef2e9f" translate="yes" xml:space="preserve">
          <source>Start Erlang Top with the provided scripts &lt;code&gt;etop&lt;/code&gt;. This starts a hidden Erlang node that connects to the node to be measured. The measured node is specified with option &lt;code&gt;-node&lt;/code&gt;. If the measured node has a different cookie than the default cookie for the user who invokes the script, the cookie must be explicitly specified with option &lt;code&gt;-setcookie&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2ca43e26eda732ea32736c07d70864e4704d08" translate="yes" xml:space="preserve">
          <source>Start Erlang for embedded systems on Windows systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31defa34584f2d2fd63602c179bfe836119f2304" translate="yes" xml:space="preserve">
          <source>Start Erlang with the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520a079784472e3d1823a878ad281dc5a99c298b" translate="yes" xml:space="preserve">
          <source>Start Erlang/OTP by double-clicking on the Erlang shortcut icon on the desktop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16d08c910b2a4218780695f7593dfaf225663b7" translate="yes" xml:space="preserve">
          <source>Start LTTng tracing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a953b6f8f8ba39dbaef9ec11c3be24d80f6ed4" translate="yes" xml:space="preserve">
          <source>Start a collector process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f2492470a3a706e4a2a3a0e00346cf63a2b625" translate="yes" xml:space="preserve">
          <source>Start a diameter service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bb422457ebaed1a11bb8e57e6f599477a32311" translate="yes" xml:space="preserve">
          <source>Start a generic time-out, read more in section &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6f98e9aeaba198edabc27bec06fb2b6feb21df" translate="yes" xml:space="preserve">
          <source>Start a main window process with default options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655c4c11799a34b51835aa7e0f2a85fa0a2386e2" translate="yes" xml:space="preserve">
          <source>Start a main window process with options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8abe55c9b6c97b89e425de0450efb23b2cd399" translate="yes" xml:space="preserve">
          <source>Start a main window process with options. The process is linked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94719cd11a6d0d111bdcbfd01716e4ece9bcb009" translate="yes" xml:space="preserve">
          <source>Start a new event viewer and a corresponding collector and load them with trace events from a trace file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0614ec8508a1191ef011f92e456a3c6f781cfb4d" translate="yes" xml:space="preserve">
          <source>Start a new shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fc885fb8da5c3ed28e6ed436cbdbb6805dd6cf" translate="yes" xml:space="preserve">
          <source>Start a sequence chart viewer for trace events (messages/actions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637c363c01eed6b89c5dbe212445ef7ff5efab16" translate="yes" xml:space="preserve">
          <source>Start a server process with options. The server process identity can be given as an argument to several other functions in the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0179f2492a86b0f3803e163cf8bb27ee8758fd" translate="yes" xml:space="preserve">
          <source>Start a state time-out, read more in section &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef124e59a0fed40b060c55290aa0af49720d77f" translate="yes" xml:space="preserve">
          <source>Start a transport process. Called by diameter as a consequence of a call to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; in order to establish or accept a transport connection respectively. A transport process maintains a connection with a single remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2df8cf2e7f5d0dc12c3ea37fb1341179fb603e" translate="yes" xml:space="preserve">
          <source>Start an Erlang node with lttng enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d23d8be51a26688c8dab060c764e5dc326e1c0d" translate="yes" xml:space="preserve">
          <source>Start an HTTP client profile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c3c544f050cf5225972fb179fff0473f5ce69d" translate="yes" xml:space="preserve">
          <source>Start an HTTP server with minimal required configuration. If you specify port &lt;code&gt;0&lt;/code&gt;, an arbitrary available port is used, and you can use function &lt;code&gt;info&lt;/code&gt; to find which port number that was picked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6265e6ae25c6b7d2b0fb9b4ff5bf68c14a56b2ea" translate="yes" xml:space="preserve">
          <source>Start an emulator of a different type. For example, to start the lock-counter emualator, use &lt;code&gt;-emu_type lcnt&lt;/code&gt;. (The emulator must already be built. Use the &lt;code&gt;configure&lt;/code&gt; option &lt;code&gt;--enable-lock-counter&lt;/code&gt; to build the lock-counter emulator.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e41bf04dd7a1d00f41d93a957341e9b4a47d42" translate="yes" xml:space="preserve">
          <source>Start an event time-out, see more in section &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b36a7dc71e12bf0965a676888e24483751bad7" translate="yes" xml:space="preserve">
          <source>Start and control of slave nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aeb8c6576f8a25c3a88947d8872e30aec78aac0" translate="yes" xml:space="preserve">
          <source>Start and control of slave nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2774aa68236decebd3156f9f5c43e8be2396b0" translate="yes" xml:space="preserve">
          <source>Start and use the crypto application as usual. However take care to avoid the non-FIPS validated algorithms, they will all throw exception &lt;code&gt;not_supported&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f1297829f84aa7bac643add8db51f47184db91" translate="yes" xml:space="preserve">
          <source>Start any processes needed by the discovery module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b43e7001e6df06b683744b1abd8fc9d3a46c001" translate="yes" xml:space="preserve">
          <source>Start by unpacking the Erlang/OTP distribution file with your GNU compatible TAR program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3d5b196df0e1f59eb20fb6e05d4aa8c0bbb77f" translate="yes" xml:space="preserve">
          <source>Start call count tracing for all functions in all modules, and also for all functions in modules to be loaded. This is the same as &lt;code&gt;(start({'_','_','_'})+start({on_load}))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a13d2eb0592573c780c4ef7df18d009929f7f24" translate="yes" xml:space="preserve">
          <source>Start call count tracing for matching functions in matching modules. The &lt;code&gt;FS&lt;/code&gt; argument can be used to specify the first argument to &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;, for example &lt;code&gt;on_load&lt;/code&gt;. See erlang(3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be851826e9ed34b2814a83947b11d6ac73cd047" translate="yes" xml:space="preserve">
          <source>Start calltrace on all processes and trace the specified function(s). The format handler used is &lt;code&gt;multitrace:handle_debug/4&lt;/code&gt; that prints each call and returns. &lt;code&gt;What&lt;/code&gt; must be an item or a list of items to trace, specified on the format &lt;code&gt;{Module,Function,Arity}&lt;/code&gt;, &lt;code&gt;{Module,Function}&lt;/code&gt;, or only &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bf6bebd6e5c5f23103da948451144938c08098" translate="yes" xml:space="preserve">
          <source>Start character class definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a698528285ad96061310af0c863ee80b8d407923" translate="yes" xml:space="preserve">
          <source>Start flag/option &lt;code&gt;silent_connections&lt;/code&gt; and the test specification term override any settings made by the information functions inside the test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da25e9ed10a3cfc1518bbbf2b9997cc520ba8f8e" translate="yes" xml:space="preserve">
          <source>Start matching at the offset (position) specified in the subject string. The offset is zero-based, so that the default is &lt;code&gt;{offset,0}&lt;/code&gt; (all of the subject string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c5f1750afbdf6104fd12ea4a1be8c8eec9e53f" translate="yes" xml:space="preserve">
          <source>Start microstate accounting. Returns whether it was previously enabled or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b2f407a4c216d2511b77163fb1447cfebcdf5c" translate="yes" xml:space="preserve">
          <source>Start min/max quantifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443680ebd11c06301421c58e471fe7e962adebab" translate="yes" xml:space="preserve">
          <source>Start of a sequence chart viewer without linking to the parent process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209793eaf330a4f3a8b0340142553e1959f4d8d1" translate="yes" xml:space="preserve">
          <source>Start of alternative branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2206aaf62477f1b94d6a89b4207602aab909f514" translate="yes" xml:space="preserve">
          <source>Start phases are defined by the &lt;code&gt;start_phases&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file as a list of tuples &lt;code&gt;{Phase,PhaseArgs}&lt;/code&gt;, where &lt;code&gt;Phase&lt;/code&gt; is an atom and &lt;code&gt;PhaseArgs&lt;/code&gt; is a term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1aae1d67148988e4843cf538f6b7eef58f5e3f" translate="yes" xml:space="preserve">
          <source>Start phases can be used to synchronize startup of an application and its included applications. In this case, key &lt;code&gt;mod&lt;/code&gt; must be specified as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179fc5ea0f74609f68ce915055ba1369b0a78e85" translate="yes" xml:space="preserve">
          <source>Start specification for the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd161afb5351491f3335bd7e0376e7c5f3b0f75" translate="yes" xml:space="preserve">
          <source>Start specification for the successfully started child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997196a5ac567566b18439d8586eca877f276ae1" translate="yes" xml:space="preserve">
          <source>Start subpattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dd89330c52e69f75583db61bed0f7381f2e054" translate="yes" xml:space="preserve">
          <source>Start the &lt;code&gt;os_mon&lt;/code&gt; application in Erlang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a2126c26a8de422d027c6d071de39f42e46a61" translate="yes" xml:space="preserve">
          <source>Start the &lt;code&gt;rb_server&lt;/code&gt; with function &lt;code&gt;&lt;a href=&quot;rb#start-1&quot;&gt;rb:start([Options])&lt;/a&gt;&lt;/code&gt; as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d0bada7b23796f78292587d5bc6b53cc19ee1c" translate="yes" xml:space="preserve">
          <source>Start the C program &lt;code&gt;cserver&lt;/code&gt; and Erlang in different windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90b668ba2fe5103be699ea3b9e11564d3c63d58" translate="yes" xml:space="preserve">
          <source>Start the Erlang &lt;code&gt;ssh&lt;/code&gt; daemon with the SFTP subsystem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7266185b42e91021e6fb89f5dd66cfd3a44cca1b" translate="yes" xml:space="preserve">
          <source>Start the Erlang shell (in Linux or UNIX) by starting a shell or command interpreter in your operating system and typing &lt;code&gt;erl&lt;/code&gt;. You will see something like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9c3597291cdf21e6d808993841f636377d0f73" translate="yes" xml:space="preserve">
          <source>Start the MG user. This may either be done explicitly with megaco:start_user/2 or implicitly by providing the -megaco users configuration parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deba1586440053389f3b6a02a5e3d64c0d8e7189" translate="yes" xml:space="preserve">
          <source>Start the MGC user. This may either be done explicitly with megaco:start_user/2 or implicitly by providing the -megaco users configuration parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e24fc749f1c90814f08a1e1800e2eed1333bd3" translate="yes" xml:space="preserve">
          <source>Start the Megaco application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab74e170caad8778f19de050d73cf66ba71fca2" translate="yes" xml:space="preserve">
          <source>Start the application (agent).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1ddfd48c696c3a42be4d905b3f270c2ddc174b" translate="yes" xml:space="preserve">
          <source>Start the application (manager).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4893b0230c895fed532273767d912224df8b0092" translate="yes" xml:space="preserve">
          <source>Start the diameter application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbffe1635e2f806efb8bed4f06625808af59577c" translate="yes" xml:space="preserve">
          <source>Start the lock-counting VM like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c8855e2dbb5e94e0d46ecdeba9337f511f113a" translate="yes" xml:space="preserve">
          <source>Start tracing to file ports on many nodes with one function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384a2d05726e61a1cd79f1fc9be9d93843183709" translate="yes" xml:space="preserve">
          <source>Start tracing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b010fc5d4c4613f3c41b87a9a3f04434928a65" translate="yes" xml:space="preserve">
          <source>Start type of an application included in the release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eab2a2380f4fe4a3a525c45cde744d25b15591b" translate="yes" xml:space="preserve">
          <source>Start with version 1. When the initial service change has been performed and version 2 has been negotiated, upgrade the megaco_receive_handle of the transport process (control_pid) to version 2. See &lt;code&gt;&lt;a href=&quot;megaco_tcp#upgrade_receive_handle&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;megaco_udp#upgrade_receive_handle&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833344ce276b1ce6b197007d7adce4565308d4d0" translate="yes" xml:space="preserve">
          <source>Start, stop, supervision, configuration, and distribution of applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da75736d5937ed0a1b193099ce61b4ee9e11937" translate="yes" xml:space="preserve">
          <source>Start-link the network interface process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0001893d31063584d883c54a96d9b910c3e81156" translate="yes" xml:space="preserve">
          <source>StartTime,</source>
          <target state="translated">StartTime,</target>
        </trans-unit>
        <trans-unit id="bbdb8a72a151f3cecd1f521369c3902f46edc467" translate="yes" xml:space="preserve">
          <source>Starting &lt;code&gt;Mnesia&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71073f3ce9b0e94c5909cdd13d75187f081b0f9" translate="yes" xml:space="preserve">
          <source>Starting Erlang target nodes on local or remote hosts (application &lt;code&gt;SSH&lt;/code&gt; is used for communication).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402188e44e346d067478a132829ccae3fbf7624c" translate="yes" xml:space="preserve">
          <source>Starting a distributed node without also specifying &lt;code&gt;-proto_dist inet_tls&lt;/code&gt; will expose the node to attacks that may give the attacker complete access to the node and in extension the cluster. When using un-secure distributed nodes, make sure that the network is configured to keep potential attackers out. See the &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917fe9ff6b20485feb18687c134b0b909a7034b5" translate="yes" xml:space="preserve">
          <source>Starting a distributed node without also specifying &lt;code&gt;&lt;a href=&quot;#proto_dist&quot;&gt;-proto_dist inet_tls&lt;/a&gt;&lt;/code&gt; will expose the node to attacks that may give the attacker complete access to the node and in extension the cluster. When using un-secure distributed nodes, make sure that the network is configured to keep potential attackers out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c706e7a5f11841b498f42fb315f298445ece84" translate="yes" xml:space="preserve">
          <source>Starting a test case from another not only tests the same thing twice, but also makes it harder to follow what is being tested. Also, if the called test case fails for some reason, so do the caller. This way, one error gives cause to several error reports, which is to be avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0236d027a8777babb601d32afaaf0dd15c40fe3" translate="yes" xml:space="preserve">
          <source>Starting and stopping, boot scripts, code loading, &lt;code&gt;logging&lt;/code&gt;, &lt;code&gt;creating target systems&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b261842f5fe66250c4d263ad01724516046766" translate="yes" xml:space="preserve">
          <source>Starting sequential tracing requires that a tracer is started with function &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt;. Sequential tracing can then be started in either of the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd818d38446ff18d61467795b3e5eee580634ab" translate="yes" xml:space="preserve">
          <source>Starting sequential tracing with a trigger is more useful if the trigger function is not called directly from the shell, but rather implicitly within a larger system. When calling a function from the shell, it is simpler to start sequential tracing directly, for example, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb7aa0141d4707a7a28174e85ac5ee32250a9ae" translate="yes" xml:space="preserve">
          <source>Starting the Erlang session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317d49bb0215c341c0bb18c9da4c9a7908ce3acf" translate="yes" xml:space="preserve">
          <source>Starting the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf38754c7ce28ef111b73837f6ee1f056abc6942" translate="yes" xml:space="preserve">
          <source>Starting to receive incoming messages from the socket again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0125f6516d930f247b6d9de13cf378cd993bb40e" translate="yes" xml:space="preserve">
          <source>Starting with R9C, the module attribute tag &lt;code&gt;deprecated&lt;/code&gt; can be used to inform Xref about  &lt;strong id=&quot;deprecated_function&quot;&gt;deprecated functions&lt;/strong&gt; and optionally when functions are planned to be removed. A few examples show the idea:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e12123fa7b2cadded8d63086529faebd9df090f" translate="yes" xml:space="preserve">
          <source>Starts (&lt;code&gt;MatchSpec == true&lt;/code&gt;) or stops (&lt;code&gt;MatchSpec == false&lt;/code&gt;) call count tracing for all types of function calls. For every function, a counter is incremented when the function is called, in any process. No process trace flags need to be activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1aa2f73a5701bba346c50333e78b643887c3d2" translate="yes" xml:space="preserve">
          <source>Starts (&lt;code&gt;MatchSpec == true&lt;/code&gt;) or stops (&lt;code&gt;MatchSpec == false&lt;/code&gt;) call time tracing for all types of function calls. For every function, a counter is incremented when the function is called. Time spent in the function is accumulated in two other counters, seconds and microseconds. The counters are stored for each call traced process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfca718f943da347a10276243887396ab9a4415" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;Application&lt;/code&gt;. If it is not loaded, the application controller first loads it using &lt;code&gt;load/1&lt;/code&gt;. It ensures that any included applications are loaded, but does not start them. That is assumed to be taken care of in the code for &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41c1f0cd2741e2ec0d88676f1c8dab02ec5214c" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;Common Test&lt;/code&gt; in interactive mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb64bb39ae476ce0d4c4f4aa9ddab2ada30630c" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;epmd&lt;/code&gt; detached from the controlling terminal. Logging ends up in syslog when available and correctly configured. If the &lt;code&gt;epmd&lt;/code&gt; daemon is started at boot, this option is definitely to be used. It is also used when command &lt;code&gt;erl&lt;/code&gt; automatically starts &lt;code&gt;epmd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f3ce935732a5791ba453e1a3cf95161f88d028" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;etop&lt;/code&gt;. Notice that &lt;code&gt;etop&lt;/code&gt; is preferably started with the &lt;code&gt;etop&lt;/code&gt; script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6bccd2a657e447114cf6a5bdb61431868fa24e" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;etop&lt;/code&gt;. To view the possible options, use &lt;code&gt;&lt;a href=&quot;#help-0&quot;&gt;help/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2776ebfb2f31c3ad4531354111de4091106498e5" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;mnesia:dirty_index_match_object(Tab, Pattern, Pos)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Pattern)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99151b334eeb9f1bf8f1838b00c688a2a02c3a37" translate="yes" xml:space="preserve">
          <source>Starts &lt;code&gt;mnesia:index_match_object(Tab, Pattern, Pos, read)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Pattern)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512ae5405738ff0862cdf2ea3b9b95320eac632a" translate="yes" xml:space="preserve">
          <source>Starts Debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69856238949073ab5f89af0bc275ca3c509327b5" translate="yes" xml:space="preserve">
          <source>Starts Erlang with a remote shell connected to &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2641f0f8b4abbebe30f75da005bfceafc407881f" translate="yes" xml:space="preserve">
          <source>Starts a Cover server on the each of given nodes, and loads all cover compiled modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada3efa42e714462919dfd309f115a4ae415659a" translate="yes" xml:space="preserve">
          <source>Starts a daemon process listening for UDP packets on a port. When it receives a request for read or write, it spawns a temporary server process handling the actual transfer of the (virtual) file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8e52b7c2bc6c8f4f86e0c32ac1029bb5bad153" translate="yes" xml:space="preserve">
          <source>Starts a dbg tracer that prints trace events to stdout (using plain io:format after a minor formatting).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7c8a03e3d0fed106ef41dec89e7414b7449cb1" translate="yes" xml:space="preserve">
          <source>Starts a file trace port on all specified nodes and points the system tracer for sequential tracing to the same port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59da427ccafcd8c79ab647a06072a22ae74a0012" translate="yes" xml:space="preserve">
          <source>Starts a new graphical monitor. This is the Monitor window, the main window of Debugger. All the Debugger and interpreter functionality is accessed from the Monitor window. This window displays the status of all processes that have been or are executing interpreted modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b41e57adc06ecb4a9ee1036704a3e47931472d" translate="yes" xml:space="preserve">
          <source>Starts a new job. This is assigned the new index &lt;code&gt;[nn]&lt;/code&gt;, which can be used in references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89eda1d44e92bc7fb254ab2af9dad2b5339a832" translate="yes" xml:space="preserve">
          <source>Starts a new job. This is assigned the new index &lt;code&gt;[nn]&lt;/code&gt;, which can be used in references. If optional argument &lt;code&gt;shell&lt;/code&gt; is specified, it is assumed to be a module that implements an alternative shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaa57c54001ac761f99265a7cce8071a2e07048" translate="yes" xml:space="preserve">
          <source>Starts a new pool. The file &lt;code&gt;.hosts.erlang&lt;/code&gt; is read to find host names where the pool nodes can be started; see section &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;Files&lt;/a&gt;&lt;/code&gt;. The startup procedure fails if the file is not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00506014e39feeea0f51d2896c54ec93c350317" translate="yes" xml:space="preserve">
          <source>Starts a new process synchronously. Spawns the process and waits for it to start. When the process has started, it &lt;strong&gt;must&lt;/strong&gt; call &lt;code&gt;&lt;a href=&quot;#init_ack-2&quot;&gt;init_ack(Parent, Ret)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#init_ack-1&quot;&gt;init_ack(Ret)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Parent&lt;/code&gt; is the process that evaluates this function. At this time, &lt;code&gt;Ret&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b569bcb4113eeae02f451a486b80ee36e374b784" translate="yes" xml:space="preserve">
          <source>Starts a number of pseudo servers. A pseudo server is a server with a registered name that does nothing but pass on all message to the real server that executes at a master node. A pseudo server is an intermediary that only has the same registered name as the real server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daab94fe451c919cef2334273fd628fc416d954b" translate="yes" xml:space="preserve">
          <source>Starts a process that handles an SSH channel. It is called internally, by the &lt;code&gt;ssh&lt;/code&gt; daemon, or explicitly by the &lt;code&gt;ssh&lt;/code&gt; client implementations. The behavior sets the &lt;code&gt;trap_exit&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631b3d7c29c7f259a3757cbd5553ce641fb166df" translate="yes" xml:space="preserve">
          <source>Starts a remote job on &lt;code&gt;node&lt;/code&gt;. This is used in distributed Erlang to allow a shell running on one node to control a number of applications running on a network of nodes. If optional argument &lt;code&gt;shell&lt;/code&gt; is specified, it is assumed to be a module that implements an alternative shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dabed2e7c24418b36f72b598709d74463de0e3" translate="yes" xml:space="preserve">
          <source>Starts a server listening for SSH connections on the given port. If the &lt;code&gt;Port&lt;/code&gt; is 0, a random free port is selected. See &lt;code&gt;&lt;a href=&quot;#daemon_info-1&quot;&gt;daemon_info/1&lt;/a&gt;&lt;/code&gt; about how to find the selected port number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f72eca12e0faab8d39ef97537354c30603c27b1" translate="yes" xml:space="preserve">
          <source>Starts a slave node in the same way as &lt;code&gt;start/1,2,3&lt;/code&gt;, except that the slave node is linked to the currently executing process. If that process terminates, the slave node also terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763c91593ece99aa3bac01499ddd2a5c62a34e93" translate="yes" xml:space="preserve">
          <source>Starts a slave node on host &lt;code&gt;Host&lt;/code&gt;. Host names need not necessarily be specified as fully qualified names; short names can also be used. This is the same condition that applies to names of distributed Erlang nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed806b3647c7ac7c1bb6a97b5a09fc434394236" translate="yes" xml:space="preserve">
          <source>Starts a standalone FTP client process (without the &lt;code&gt;ftp&lt;/code&gt; service framework) and opens a session with the FTP server at &lt;code&gt;Host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e81f7fc69f8fd2c15b215cc24034ee870b974d7" translate="yes" xml:space="preserve">
          <source>Starts a sub-agent on the node where the function is called. The &lt;code&gt;snmpa_supervisor&lt;/code&gt; must be running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ad3b7242888dd584efd361f94a244fe75bfd5a" translate="yes" xml:space="preserve">
          <source>Starts a supervisor for the SNMP agent system without a master agent. The supervisor starts all involved SNMP processes, but no agent processes. Sub-agents should be started by calling &lt;code&gt;start_sub_agent/3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562a3d8c26c6f9da4fd602114de485e2bc6479ad" translate="yes" xml:space="preserve">
          <source>Starts a supervisor for the SNMP agent system. The supervisor starts all involved SNMP processes, including the master agent. Sub-agents should be started by calling &lt;code&gt;start_subagent/3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c5856ebde5c5ce4f3d5bf1703f82ff0386abc1" translate="yes" xml:space="preserve">
          <source>Starts a timer set by &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;state_timeout&lt;/code&gt;. When the timer expires an event of &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;state_timeout&lt;/code&gt; will be generated. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for how &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; are interpreted. Future &lt;code&gt;erlang:start_timer/4&lt;/code&gt;&lt;code&gt;Options&lt;/code&gt; will not necessarily be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108aa35f9dc94c4df1568152dc3d42687dc24580" translate="yes" xml:space="preserve">
          <source>Starts a timer set by &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;timeout&lt;/code&gt;. When the timer expires an event of &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;timeout&lt;/code&gt; will be generated. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for how &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; are interpreted. Future &lt;code&gt;erlang:start_timer/4&lt;/code&gt;&lt;code&gt;Options&lt;/code&gt; will not necessarily be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f416700a9e2b5e3828f5eb7875b5c955138db191" translate="yes" xml:space="preserve">
          <source>Starts a timer set by &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;enter_action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{timeout,Name}&lt;/code&gt;. When the timer expires an event of &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{timeout,Name}&lt;/code&gt; will be generated. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for how &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-timeout_option&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; are interpreted. Future &lt;code&gt;erlang:start_timer/4&lt;/code&gt;&lt;code&gt;Options&lt;/code&gt; will not necessarily be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719d6d0668a04cd76448cf3570d89a6bcd0c8280" translate="yes" xml:space="preserve">
          <source>Starts a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after(Time,Dest,Msg, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f795b67a1487dda314d37a3c6fe72707cfbd6d" translate="yes" xml:space="preserve">
          <source>Starts a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer(Time,Dest,Msg, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba653d76c9aa38651a774ebfe600b79e8c510f7a" translate="yes" xml:space="preserve">
          <source>Starts a timer. When the timer expires, the message &lt;code&gt;Msg&lt;/code&gt; is sent to the process identified by &lt;code&gt;Dest&lt;/code&gt;. Apart from the format of the time-out message, this function works exactly as &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64c4e6780c14c723aed66bc72558edb7a91b73c" translate="yes" xml:space="preserve">
          <source>Starts a timer. When the timer expires, the message &lt;code&gt;{timeout, TimerRef, Msg}&lt;/code&gt; is sent to the process identified by &lt;code&gt;Dest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5724274ddf67ec9356b93b02cf4343cf416770c" translate="yes" xml:space="preserve">
          <source>Starts a tracer process that profiles trace data in runtime. The call will return immediately with the return value &lt;code&gt;{ok, Tracer}&lt;/code&gt; if successful. This option is not allowed with the &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;{file, Filename}&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5206e769b1b06b770bdbcfa1c39c610fe529c5" translate="yes" xml:space="preserve">
          <source>Starts all stopped processes using a module &lt;code&gt;Mod&lt;/code&gt; by calling &lt;code&gt;supervisor:restart_child/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c82ec30723e9d96dfd07cca4407233aae0ac309" translate="yes" xml:space="preserve">
          <source>Starts an Erlang node with default options on a specified host, or on the local host with specified options. That is, the call is interpreted as &lt;code&gt;start(Host, Node)&lt;/code&gt; when the second argument is atom-valued and &lt;code&gt;start(Node, Opts)&lt;/code&gt; when it is list-valued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15b33895d20933a37075477aa3ece20f6b0a761" translate="yes" xml:space="preserve">
          <source>Starts an Erlang node with name &lt;code&gt;Node&lt;/code&gt; on host &lt;code&gt;Host&lt;/code&gt; as specified by the combination of options in &lt;code&gt;Opts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1de69fc5e803030d203925fb71214c2fd3f8276" translate="yes" xml:space="preserve">
          <source>Starts an Erlang node with name &lt;code&gt;Node&lt;/code&gt; on the local host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f927aee75024326c3417e3732e902dd3f78813fe" translate="yes" xml:space="preserve">
          <source>Starts an Erlang runtime system with no shell. This flag makes it possible to have the Erlang runtime system as a component in a series of Unix pipes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb202ef51a8129fa629b94084042224c3bc9b1cd" translate="yes" xml:space="preserve">
          <source>Starts an Erlang runtime system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1dffa0fd50ee05245e4715d03b85d73353586b" translate="yes" xml:space="preserve">
          <source>Starts an SFTP session on an already existing SSH connection. &lt;code&gt;Server&lt;/code&gt; identifies the new session and must be specified whenever SFTP requests are to be sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3466ce8aa2b44ba85767671cdf4874970665be22" translate="yes" xml:space="preserve">
          <source>Starts an SNMP manager and/or agent. In the manager case, registrations of users and agents, as specified by the configuration &lt;code&gt;MgrAgentConfName&lt;/code&gt;, are performed. When using SNMPv3, called USM users are also registered. Users, &lt;code&gt;usm_users&lt;/code&gt;, and managed agents can also be registered later using &lt;code&gt;&lt;a href=&quot;#register_users-2&quot;&gt;ct_snmp:register_users/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#register_agents-2&quot;&gt;ct_snmp:register_agents/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#register_usm_users-2&quot;&gt;ct_snmp:register_usm_users/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f64cab62f4fd9209162a8f3f266a24925dc95a0" translate="yes" xml:space="preserve">
          <source>Starts an application with included applications, when synchronization is needed between processes in the different applications during startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a060e6720749e5155082ae66e130d1ae13af3e7" translate="yes" xml:space="preserve">
          <source>Starts an external program. &lt;code&gt;Command&lt;/code&gt; is the name of the external program to be run. &lt;code&gt;Command&lt;/code&gt; runs outside the Erlang work space unless an Erlang driver with the name &lt;code&gt;Command&lt;/code&gt; is found. If found, that driver is started. A driver runs in the Erlang work space, which means that it is linked with the Erlang runtime system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94469b7faff35d4d7482bb06cee87f5e9db810a5" translate="yes" xml:space="preserve">
          <source>Starts capturing all text strings printed to &lt;code&gt;stdout&lt;/code&gt; during execution of the test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ec85a070f6ce7984961849f61e236a3518fbf3" translate="yes" xml:space="preserve">
          <source>Starts heartbeat monitoring of the Erlang runtime system; see &lt;code&gt;heart(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aa91736e7bddeabeb3758bada8fbe60819b6f6" translate="yes" xml:space="preserve">
          <source>Starts interactive shell mode (described later).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac47ffc62c753e37eae350aef1af837b8f4278c" translate="yes" xml:space="preserve">
          <source>Starts logging to file, registered name, or &lt;code&gt;io_device&lt;/code&gt;. All reports are printed to the specified destination. Default is &lt;code&gt;standard_io&lt;/code&gt;. Option &lt;code&gt;{start_log, standard_error}&lt;/code&gt; is not allowed and will be replaced by default &lt;code&gt;standard_io&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f909fca2608faffdb2b867766fcf669448d759f" translate="yes" xml:space="preserve">
          <source>Starts monitoring a process from a driver. When a process is monitored, a process exit results in a call to the provided &lt;code&gt;&lt;a href=&quot;driver_entry#process_exit&quot;&gt;process_exit&lt;/a&gt;&lt;/code&gt; callback in the &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;ErlDrvEntry&lt;/a&gt;&lt;/code&gt; structure. The &lt;code&gt;ErlDrvMonitor&lt;/code&gt; structure is filled in, for later removal or compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b109ec077023a50e452441512008e020791060" translate="yes" xml:space="preserve">
          <source>Starts monitoring a process from a resource. When a process is monitored, a process exit results in a call to the provided &lt;code&gt;&lt;a href=&quot;#ErlNifResourceDown&quot;&gt;down&lt;/a&gt;&lt;/code&gt; callback associated with the resource type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6367bafed62c8a9d85484e608eedfc2042b8a13" translate="yes" xml:space="preserve">
          <source>Starts or stops tracing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179da7e667df02632db879e9575c5cac843683f0" translate="yes" xml:space="preserve">
          <source>Starts profiling for the processes in &lt;code&gt;Rootset&lt;/code&gt; (and any new processes spawned from them). Information about activity in any profiled process is stored in the Eprof database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6000aaf61f07cd77216dee10f3ab8d614948e601" translate="yes" xml:space="preserve">
          <source>Starts profiling with zeroed call counters for specified functions by setting call count breakpoints on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f21d99cab8cea174f1b178ad06b80bb489d815" translate="yes" xml:space="preserve">
          <source>Starts the &quot;kernel process&quot; &lt;code&gt;Name&lt;/code&gt; by evaluating &lt;code&gt;apply(Mod, Func, Args)&lt;/code&gt;. The start function is to return &lt;code&gt;{ok, Pid}&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt;. The &lt;code&gt;init&lt;/code&gt; process monitors the behavior of &lt;code&gt;Pid&lt;/code&gt; and terminates the system if &lt;code&gt;Pid&lt;/code&gt; dies. Kernel processes are key components of the runtime system. Users do not normally add new kernel processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9d37968b218c196d847b558f37ea7f92c38537" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;Inets&lt;/code&gt; application. Default type is &lt;code&gt;temporary&lt;/code&gt;. See also &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea4ef9eee3a94c8a4b06896ecc78585826852d3" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;epmd&lt;/code&gt; program with relaxed command checking (mostly for backward compatibility). This affects the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1b07599eee95054ad675f62689deef55e3582e" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;fprof&lt;/code&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574da9c309370d144dd43761126d49c0926e9f41" translate="yes" xml:space="preserve">
          <source>Starts the &lt;code&gt;pg2&lt;/code&gt; server. Normally, the server does not need to be started explicitly, as it is started dynamically if it is needed. This is useful during development, but in a target system the server is to be started explicitly. Use the configuration parameters for &lt;code&gt;kernel(6)&lt;/code&gt; for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a2059dda34d538937f0c7112eb87b5ed3c95a0" translate="yes" xml:space="preserve">
          <source>Starts the Cover server which owns the Cover internal database. This function is called automatically by the other functions in the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2576e5a6148a69c85ee88f13279d993436fd68bf" translate="yes" xml:space="preserve">
          <source>Starts the Crashdump Viewer GUI and loads the specified crashdump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16622ea244cc7ec9d12ab584d977ad097b7d7420" translate="yes" xml:space="preserve">
          <source>Starts the EUnit server. Normally, you don't need to call this function; it is started automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899a01913ddca89bd15fad32669bbfa2fc781608" translate="yes" xml:space="preserve">
          <source>Starts the Eprof server which holds the internal state of the collected data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ae351aec565f845ef4a3d6c95096aa147fefd0" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system as a hidden node, if it is run as a distributed node. Hidden nodes always establish hidden connections to all other nodes except for nodes in the same global group. Hidden connections are not published on any of the connected nodes, that is, none of the connected nodes are part of the result from &lt;code&gt;nodes/0&lt;/code&gt; on the other node. See also hidden global groups; &lt;code&gt;global_group(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedcace744b807440e83d820164324ecf6f22502" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system detached from the system console. Useful for running daemons and backgrounds processes. Implies &lt;code&gt;-noinput&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def98c1320baa5942b533df544583e5b51b91f59" translate="yes" xml:space="preserve">
          <source>Starts the Erlang runtime system. This function is called when the emulator is started and coordinates system startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277448e8ce9df100b6cf6861f6f3031811a904de" translate="yes" xml:space="preserve">
          <source>Starts the Megaco application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ab183c0317dd2f1527800bcb8b0e1d7859292e" translate="yes" xml:space="preserve">
          <source>Starts the Observer GUI. To stop the tool, close the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8df47d1e79f68db19208af97b7dce6918a26c78" translate="yes" xml:space="preserve">
          <source>Starts the SNMP application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0819585b08c5884200ce71cb4b36cb156953d9" translate="yes" xml:space="preserve">
          <source>Starts the SSL application. Default type is &lt;code&gt;temporary&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd78912e9b365d22c64943d5188d3fb7ec726f0" translate="yes" xml:space="preserve">
          <source>Starts the boot server and links to the caller. This function is used to start the server if it is included in a supervision tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6e3991f7abe8df44d1412260f8d53222a13a68" translate="yes" xml:space="preserve">
          <source>Starts the boot server. &lt;code&gt;Slaves&lt;/code&gt; is a list of IP addresses for hosts, which are allowed to use this server as a boot server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d7dc56165e92731893ca53399e75b335c60782" translate="yes" xml:space="preserve">
          <source>Starts the lock profiler server. The server only act as a medium for the user and performs filtering and printing of data collected by &lt;code&gt;lcnt:collect/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9850d976b32c52f9394d252d49a43e4647e02e3a" translate="yes" xml:space="preserve">
          <source>Starts the odbc application. Default type is temporary. &lt;code&gt;See application(3)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481130886e0eae2352bf5b8e3bc36316c12f4c82" translate="yes" xml:space="preserve">
          <source>Starts the port mapper daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d0800f9d2a9f41544b48c8a8ea67788405a568" translate="yes" xml:space="preserve">
          <source>Starts the runtime system of the version found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1292cbe8e81fd70f37a219d8b800f7425c01221" translate="yes" xml:space="preserve">
          <source>Starts the timer server. Normally, the server does not need to be started explicitly. It is started dynamically if it is needed. This is useful during development, but in a target system the server is to be started explicitly. Use configuration parameters for &lt;code&gt;Kernel&lt;/code&gt; for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00ebd05c02ed0dae949b1ae8996114705f2fa35" translate="yes" xml:space="preserve">
          <source>Starts the transfer of chunks for appending to the file &lt;code&gt;File&lt;/code&gt; at the remote server. If the file does not exist, it is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef772787692b2f75a65b9e1edb4a0ef2c9a0820" translate="yes" xml:space="preserve">
          <source>Starts transfer of chunks into the file &lt;code&gt;File&lt;/code&gt; at the remote server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e48af9fb89f78a737aac22014faf9f6396b28a" translate="yes" xml:space="preserve">
          <source>Starts transfer of the file &lt;code&gt;RemoteFile&lt;/code&gt; from the remote server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a971662758e82a4387d6fa65437788a16c07668" translate="yes" xml:space="preserve">
          <source>Starts web-based GUI (described later).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2dec697be33b0f9b93406658511dccf9ef7d6e1" translate="yes" xml:space="preserve">
          <source>Starts when a fragmented table is created with the function &lt;code&gt;mnesia:create_table/2&lt;/code&gt; or when a normal (unfragmented) table is converted to be a fragmented table with &lt;code&gt;mnesia:change_table_frag/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0379a8eb0f9246ca239d958203cafdb71be35c0a" translate="yes" xml:space="preserve">
          <source>Starts whenever Mnesia needs to determine which fragment a certain record belongs to. It is typically started at &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bfd36e7306106369afe7d8f8e9b03ccbb960be" translate="yes" xml:space="preserve">
          <source>Startup files, log file, and data files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146b9df97eaaa27027d75882c64aee619ecac5b4" translate="yes" xml:space="preserve">
          <source>State :: &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aac669f035ad757512afde0021d1b9aa78fa563" translate="yes" xml:space="preserve">
          <source>State enter calls are also handled by the event handler and have slightly different arguments. See the section &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08a36d8080bb27d224de4b7c2d72f9ce6a1d1f8" translate="yes" xml:space="preserve">
          <source>State that is accessible in the continuation call back function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d836aba139f55775c8d137a6e52c6ba84e2be3b0" translate="yes" xml:space="preserve">
          <source>State that is accessible in the event call back function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8d5d677e445c86f63f3450e9ce265bb8247603" translate="yes" xml:space="preserve">
          <source>State time-out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e742a93b1c6d38365b3d1a2c91f9e76120c9503" translate="yes" xml:space="preserve">
          <source>State0 :: &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58dd1e0755a161b9e61dc35ad7bdc69aabcbbbe" translate="yes" xml:space="preserve">
          <source>Statement ::= Assignment | Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d147756fd7c86028ccf093e0054acc39287e03dc" translate="yes" xml:space="preserve">
          <source>Statically linked to the emulator, which can be an alternative when using the open source distribution of Erlang, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa1ecf928513d0f2c8f7497724e0e18baf96328" translate="yes" xml:space="preserve">
          <source>Status information retrieval from the &lt;code&gt;Port&lt;/code&gt; holding the connection failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5bdb3dab98d0fc2162f8a76d7f3384ccd30fe12" translate="yes" xml:space="preserve">
          <source>Step 3 is repeated by all subagents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d31bdfed65e6da4bf4e50959ed2f7aa3618e7af" translate="yes" xml:space="preserve">
          <source>Step-by-step execution of test cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d678ecb114c0beb11c6a84fcb619e0cb4f8d5e" translate="yes" xml:space="preserve">
          <source>Steps through a test case with the debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f94e1ac6e93066eff71c7d32b221e6b31536f0d" translate="yes" xml:space="preserve">
          <source>Steps through a test case with the debugger. If option &lt;code&gt;config&lt;/code&gt; has been specifed, breakpoints are also set on the configuration functions in &lt;code&gt;Suite&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a82323c8609261393308aca926f7b6c03de1f0" translate="yes" xml:space="preserve">
          <source>Steps through test cases using the Erlang Debugger (described later).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4758c56fedaa9235a4bfe02d878e39600c60d4f" translate="yes" xml:space="preserve">
          <source>Sticky write locks are a mechanism that can be used to optimize write lock acquisition. If your application uses replicated tables mainly for fault tolerance (as opposed to read access optimization purpose), sticky locks can be the best option available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3e72d768c74a7fceb812ad53d6b65ffc213e41" translate="yes" xml:space="preserve">
          <source>Stop LTTng tracing and view the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039f1015521371a5e4200cda3bac916d02c11a37" translate="yes" xml:space="preserve">
          <source>Stop a collector process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bab5af53967d1095e1acf806b39919114c37e1c" translate="yes" xml:space="preserve">
          <source>Stop a diameter service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff39d1c80ea9985b5295d37db3796216335b8dc8" translate="yes" xml:space="preserve">
          <source>Stop a server or window process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac42da431976f19707eb5bb512d7495a7138ec4" translate="yes" xml:space="preserve">
          <source>Stop call count tracing for all functions in all modules, and also for all functions in modules to be loaded. This is the same as &lt;code&gt;(stop({'_','_','_'})+stop({on_load}))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32f032a94ae5cfb2922553e34498250c219e07a" translate="yes" xml:space="preserve">
          <source>Stop call count tracing for matching functions in matching modules. The &lt;code&gt;FS&lt;/code&gt; argument can be used to specify the first argument to &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt;, for example &lt;code&gt;on_load&lt;/code&gt;. See erlang(3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a73c19a935a96f9801d4c4f1f86e6a1e50694f" translate="yes" xml:space="preserve">
          <source>Stop microstate accounting. Returns whether is was previously enabled or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a9ecda7412fa214b9029314d2337db4fd6b20a" translate="yes" xml:space="preserve">
          <source>Stop receiving incoming messages on the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c502883ae7a9e7204f50f522f31edf195b9c9fe9" translate="yes" xml:space="preserve">
          <source>Stop the HTTP client profile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1372b828b448e6c19ba41741713843d08035adc" translate="yes" xml:space="preserve">
          <source>Stop the diameter application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62367b6018cfdca2b2a5c53e9fca8a008e441ff2" translate="yes" xml:space="preserve">
          <source>Stop the network interface process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd81b68a1f353397e65a4b1eabc5dffc6fcf0fb8" translate="yes" xml:space="preserve">
          <source>Stop the server with reason &lt;code&gt;Reason&lt;/code&gt;. If the &lt;code&gt;NewData&lt;/code&gt; field is used, first update the server data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffef395da60146c96ad22df81a73e9f7b9191416" translate="yes" xml:space="preserve">
          <source>Stop the tracer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25393f11049a5dc551d1a80cade60559a0242923" translate="yes" xml:space="preserve">
          <source>StopTime,</source>
          <target state="translated">StopTime,</target>
        </trans-unit>
        <trans-unit id="7f7b974f412dfca8f58293bce94bfe12a1a4171e" translate="yes" xml:space="preserve">
          <source>Stopping a service causes all associated transport connections to be broken. A DPR message will be sent as in the case of &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87c2d242e2969cedc9e23a4644712bd0fc8b0b8" translate="yes" xml:space="preserve">
          <source>Stopping a service does not remove any associated transports: &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt; must be called to remove transport configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d94822203b3adba9a2b563e418ebd7203a01dfc" translate="yes" xml:space="preserve">
          <source>Stopping the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9abc2ec4b99db4f07f9f2f54eea0998763e328" translate="yes" xml:space="preserve">
          <source>Stops (kills) a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca95f7ad8a82d1f522b0079e0b4cd9589d3a62df" translate="yes" xml:space="preserve">
          <source>Stops &lt;code&gt;Application&lt;/code&gt;. The application master calls &lt;code&gt;Module:prep_stop/1&lt;/code&gt;, if such a function is defined, and then tells the top supervisor of the application to shut down (see &lt;code&gt;supervisor(3)&lt;/code&gt;). This means that the entire supervision tree, including included applications, is terminated in reversed start order. After the shutdown, the application master calls &lt;code&gt;Module:stop/1&lt;/code&gt;. &lt;code&gt;Module&lt;/code&gt; is the callback module as defined by the application specification key &lt;code&gt;mod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf83ce5626a595832beae38a1de7fd4f09f15da" translate="yes" xml:space="preserve">
          <source>Stops &lt;code&gt;nteventlog&lt;/code&gt;. Usually only used during development. The server does not have to be shut down gracefully to maintain its state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cc1153946669b7da49488b06502cbfc7ba48a2" translate="yes" xml:space="preserve">
          <source>Stops &lt;code&gt;rb_server&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad13039b52044558d08e339bea4b17573a95abe9" translate="yes" xml:space="preserve">
          <source>Stops Debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e555260711312cdc7c6d36b63b1e55734b8f6031" translate="yes" xml:space="preserve">
          <source>Stops Mnesia locally on the current node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d502b9ed8eaf05bd136e76804c52902f1139d827" translate="yes" xml:space="preserve">
          <source>Stops a running &lt;code&gt;fprof&lt;/code&gt; trace and clears all tracing from the node. Either option &lt;code&gt;stop&lt;/code&gt; or &lt;code&gt;start&lt;/code&gt; must be specified, but not both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c905613219ad37fbf34837132f20e8c02aa1887e" translate="yes" xml:space="preserve">
          <source>Stops a started FTP session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30317e01e94d06e917fd3a9f2bb6877b71c61e5" translate="yes" xml:space="preserve">
          <source>Stops a started service of the &lt;code&gt;Inets&lt;/code&gt; application or takes down a &lt;code&gt;stand_alone&lt;/code&gt;-service gracefully. When option &lt;code&gt;stand_alone&lt;/code&gt; is used in start, only the pid is a valid argument to stop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135abf973bb07bdc9fd8ff9e5bb3c30a847ced5e" translate="yes" xml:space="preserve">
          <source>Stops a viewer process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b9726e77dd3618c0754741aeb77cc9450e62ca" translate="yes" xml:space="preserve">
          <source>Stops all processes using a module &lt;code&gt;Mod&lt;/code&gt; by calling &lt;code&gt;supervisor:terminate_child/2&lt;/code&gt;. This instruction is useful when the simplest way to change code is to stop and restart the processes that run the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629e1bd57d735533259c5d5c4185f604004a72d4" translate="yes" xml:space="preserve">
          <source>Stops all running tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17fb4b38f65a8ddb69910e4323e97e9894aad5c0" translate="yes" xml:space="preserve">
          <source>Stops an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e537881808e8c38357bb1645973eafdf6b40457e" translate="yes" xml:space="preserve">
          <source>Stops an SFTP channel. Does not close the SSH connection. Use &lt;code&gt;&lt;a href=&quot;ssh#close-1&quot;&gt;ssh:close/1&lt;/a&gt;&lt;/code&gt; to close it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e319adb636cc20e18a55f4f9e28eead6c221e65d" translate="yes" xml:space="preserve">
          <source>Stops capturing text strings (a session started with &lt;code&gt;capture_start/0&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29739884929921c00e082190c0a73f7760912fbd" translate="yes" xml:space="preserve">
          <source>Stops interpreting all modules. Processes executing in interpreted modules terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66c1a6048504fa19c10e2accd1fb95a929db52b" translate="yes" xml:space="preserve">
          <source>Stops interpreting the selected module. Processes executing in this module terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8e4b8df8805c2dd707ba4342abfa844aedd925" translate="yes" xml:space="preserve">
          <source>Stops interpreting the specified module. &lt;code&gt;iq/1&lt;/code&gt; stops interpreting the module only at the current node. &lt;code&gt;inq/1&lt;/code&gt; stops interpreting the module at all known nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9284bea6c256701ed98c668faf3ffbfe5b3ade" translate="yes" xml:space="preserve">
          <source>Stops interpreting the specified module. &lt;code&gt;n/1&lt;/code&gt; stops interpreting the module only at the current node. &lt;code&gt;nn/1&lt;/code&gt; stops interpreting the module at all known nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6ca45447e17351392e0d7969c3980708c5b5a6" translate="yes" xml:space="preserve">
          <source>Stops or allows log events originating from a process that has its group leader on a remote node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52061a43a232554522fe3961408156e39ace90c" translate="yes" xml:space="preserve">
          <source>Stops or allows progress reports from &lt;code&gt;supervisor&lt;/code&gt; and &lt;code&gt;application_controller&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8779f95ff6ff864d85ede87b4e99e86c9be55442" translate="yes" xml:space="preserve">
          <source>Stops profiling by removing call count breakpoints from specified functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b7eaa3f6a0f791e2066f3cd14348cc255609bb" translate="yes" xml:space="preserve">
          <source>Stops profiling started with &lt;code&gt;start_profiling/1&lt;/code&gt; or &lt;code&gt;profile/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a50167510b0c2ad4e89550cbacfaceb1e415b26" translate="yes" xml:space="preserve">
          <source>Stops sending events of type &lt;code&gt;EventCategory&lt;/code&gt; to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460ec181f02efacaff3a88ffc17f71e719bbfea0" translate="yes" xml:space="preserve">
          <source>Stops tests on specified nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f752f119e42a272067b50974d8fa691e5596c3a6" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;Inets&lt;/code&gt; application. See also &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5894b7c2591cd7cf181b8ddc05bb7cab6d6583" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;dbg&lt;/code&gt; server and clears all trace flags for all processes and all local trace patterns for all functions. Also shuts down all trace clients and closes all trace ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901a533e9d9184048183f9b0cbe5a848c0dcae3d" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;fprof&lt;/code&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2979c227903c2114972c20f07a917b299413909c" translate="yes" xml:space="preserve">
          <source>Stops the &lt;code&gt;ssh&lt;/code&gt; application. For more information, see the &lt;code&gt;application(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d876e9bbe5d9a3e92636183d4a3fdcd76aed4ad" translate="yes" xml:space="preserve">
          <source>Stops the Cover server and unloads all Cover compiled code on the given nodes. Data stored in the Cover database on the remote nodes is fetched and stored on the main node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8108116065adad4523941ea63866efd10eadcf25" translate="yes" xml:space="preserve">
          <source>Stops the Cover server and unloads all Cover compiled code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f959f8b61d83f8d6fa60183a7f4ec1c2451316e7" translate="yes" xml:space="preserve">
          <source>Stops the EUnit server. Normally, you don't need to call this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f25b89489396ee9daeadc62aae0f3e875536f5" translate="yes" xml:space="preserve">
          <source>Stops the Eprof server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147093ee4f66890cea62bcb1cd5d9fa37fc8c4f5" translate="yes" xml:space="preserve">
          <source>Stops the Megaco application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e724d72a8ad3d091ce3c3cb0d9fee02def0611" translate="yes" xml:space="preserve">
          <source>Stops the SNMP manager and/or agent, and removes all files created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2f76a2538e4443f69384dde50cd823f6f51efd" translate="yes" xml:space="preserve">
          <source>Stops the SSL application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef82930ec72803adc918a8e6eac4cd72b705c7e" translate="yes" xml:space="preserve">
          <source>Stops the current evaluator process for job number &lt;code&gt;nn&lt;/code&gt; or the current job, but does not kill the shell process. So, any variable bindings and the process dictionary are preserved and the job can be connected again. This command can be used to interrupt an endless loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8d15aa311571c18703c7fb305401c4c6cad6f7" translate="yes" xml:space="preserve">
          <source>Stops the execution of a running process, that is, make the process stop at a breakpoint. The command takes effect (visibly) the next time the process receives a message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b982df45432b3734416fc057907a698eee9e06b" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with an exception of the specified class, reason, and call stack backtrace (&lt;strong&gt;stacktrace&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91422279079cb952fc53cb48b7cffa73686cf498" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with exit reason &lt;code&gt;Reason&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term. As evaluating this function causes the process to terminate, it has no return value. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd7d7d518346fd296b85e676a982b6a8f1c92aa" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the reason &lt;code&gt;Reason&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term. The exit reason is &lt;code&gt;{Reason, Where}&lt;/code&gt;, where &lt;code&gt;Where&lt;/code&gt; is a list of the functions most recently called (the current function first). &lt;code&gt;Args&lt;/code&gt; is expected to be the list of arguments for the current function; in Beam it is used to provide the arguments for the current function in the term &lt;code&gt;Where&lt;/code&gt;. As evaluating this function causes the process to terminate, it has no return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4007536e1c49f46e8cd160560d39457228cf042b" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the reason &lt;code&gt;Reason&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term. The exit reason is &lt;code&gt;{Reason, Where}&lt;/code&gt;, where &lt;code&gt;Where&lt;/code&gt; is a list of the functions most recently called (the current function first). As evaluating this function causes the process to terminate, it has no return value. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f90d0c6b0f3d8ca6a35f37efb0898a2905111cd" translate="yes" xml:space="preserve">
          <source>Stops the listener and all connections started by the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e1073472cc279b5ae2a855a49be0bf285255a2" translate="yes" xml:space="preserve">
          <source>Stops the listener, but leaves existing connections started by the listener operational.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0395c0b2fc3e08bbed0a4ffb37bea8dfd62d85e9" translate="yes" xml:space="preserve">
          <source>Stops the lock profiler server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4335c2a5c1ca42347443cd087ef6302c70af331" translate="yes" xml:space="preserve">
          <source>Stops the odbc application. &lt;code&gt;See application(3)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9bab507060333a44bed1ffcf78f34fdb53e89e" translate="yes" xml:space="preserve">
          <source>Stops the pool and kills all the slave nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c22956f832cff606f980b7320b9b436a5de83f" translate="yes" xml:space="preserve">
          <source>Stops the running Erlang node with name &lt;code&gt;Node&lt;/code&gt; on host &lt;code&gt;Host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a8165fd6721bdb6ad756d3d1cafea28752ab1e" translate="yes" xml:space="preserve">
          <source>Stops the running Erlang node with name &lt;code&gt;Node&lt;/code&gt; on the local host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83968c4fe88e6b53869a585d2130d4dd6a60bf69" translate="yes" xml:space="preserve">
          <source>Stops the server that saves runtime scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9368df75af0a5d44ef58c3a1405a72c68901910c" translate="yes" xml:space="preserve">
          <source>Stops the sub-agent on the node where the function is called. The &lt;code&gt;snmpa_supervisor&lt;/code&gt; must be running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1debcdfeaf7581e96bc43a89f2ae6ba6368066f6" translate="yes" xml:space="preserve">
          <source>Stops the tracer process that profiles trace data in runtime. The return value will be value &lt;code&gt;ok&lt;/code&gt; if successful. This option is not allowed with the &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;{file, Filename}&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386d4243e9ad9035f61e102ca44022677cf8a3b9" translate="yes" xml:space="preserve">
          <source>Stops tracing on all nodes, deletes all trace patterns, and flushes the trace port buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf184d92ac0d3d11f1052ee50e659431f52e003" translate="yes" xml:space="preserve">
          <source>Stops tracing on all nodes. Logs and trace information files are sent to the trace control node and stored in a directory named &lt;code&gt;ttb_upload_FileName-Timestamp&lt;/code&gt;, where &lt;code&gt;Filename&lt;/code&gt; is the one provided with &lt;code&gt;{file, File}&lt;/code&gt; during trace setup and &lt;code&gt;Timestamp&lt;/code&gt; is of the form &lt;code&gt;yyyymmdd-hhmmss&lt;/code&gt;. Even logs from nodes on the same machine as the trace control node are moved to this directory. The history list is saved to a file named &lt;code&gt;ttb_last_config&lt;/code&gt; for further reference (as it is no longer accessible through history and configuration management functions, like &lt;code&gt;ttb:list_history/0&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f5f9ba0647fb66d4142eb11e286a7e1c03fa4e" translate="yes" xml:space="preserve">
          <source>Stops transfer of chunks for appending to the remote server. The file at the remote server, specified in the call to &lt;code&gt;append_chunk_start/2&lt;/code&gt;, is closed by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f299bc5c8dbc72b45c7aa07045bf23a3477f37a" translate="yes" xml:space="preserve">
          <source>Stops transfer of chunks to the remote server. The file at the remote server, specified in the call to &lt;code&gt;send_chunk_start/2&lt;/code&gt; is closed by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd741f1b77e8eaea6949b983b6ec8b7f74d6e5b2" translate="yes" xml:space="preserve">
          <source>Store and back up key-value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55922e278c2a3834475600185c8e4a7f7d136daa" translate="yes" xml:space="preserve">
          <source>Store the PLT at the specified file after building it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4887831dbac423b8d0659ca08c5f7c1efa077c0c" translate="yes" xml:space="preserve">
          <source>Store the key in a text file named &lt;code&gt;.erlang.crypt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327f7e222ef735d18249da47cfbace7ad2d747af" translate="yes" xml:space="preserve">
          <source>Stored values are retrieved from the registry as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877c428d2db530a5a57f362da9ba05a197475ee8" translate="yes" xml:space="preserve">
          <source>Stores a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; pair in a dictionary. If the &lt;code&gt;Key&lt;/code&gt; already exists in &lt;code&gt;Orddict1&lt;/code&gt;, the associated value is replaced by &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5240b8af10b81e18a0a9ffb7e537d54cc8686ed4" translate="yes" xml:space="preserve">
          <source>Stores a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; pair in dictionary &lt;code&gt;Dict2&lt;/code&gt;. If &lt;code&gt;Key&lt;/code&gt; already exists in &lt;code&gt;Dict1&lt;/code&gt;, the associated value is replaced by &lt;code&gt;Value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f349ae2da0c0b55816e7771c375dfda4bc3b49" translate="yes" xml:space="preserve">
          <source>Stores the provided data for further retrieval. It is important to realize that the data storage used must not be affected by the node crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb5f27e3aec1699c729998a9ff996dd5c81ad27" translate="yes" xml:space="preserve">
          <source>Strategy: Do not search for a fit, inspect only one free block to see if it satisfies the request. This strategy is only intended to be used for temporary allocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c50c1fa5a5445533422460f66a67a0c5e7ad76d" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;carrier&lt;/strong&gt; with the lowest address that can satisfy the requested block size, then find a block within that carrier using the &quot;address order best fit&quot; strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0898af4b89cfc68c62ddd64be3608ef0887164d" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;carrier&lt;/strong&gt; with the lowest address that can satisfy the requested block size, then find a block within that carrier using the &quot;best fit&quot; strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953d782201c39277ca3699ca389e05e45af21107" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;oldest carrier&lt;/strong&gt; that can satisfy the requested block size, then find a block within that carrier using the &quot;address order best fit&quot; strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088cb0a38c455433ecf8104c274d76a2bc0ff6de" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;oldest carrier&lt;/strong&gt; that can satisfy the requested block size, then find a block within that carrier using the &quot;address order first fit&quot; strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a8979b9e4c554bce63a7e277dfc4977bcb5b81" translate="yes" xml:space="preserve">
          <source>Strategy: Find the &lt;strong&gt;oldest carrier&lt;/strong&gt; that can satisfy the requested block size, then find a block within that carrier using the &quot;best fit&quot; strategy.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
