<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="apache_http_server">
    <body>
      <group id="apache_http_server">
        <trans-unit id="63b16f44b080f1fcffcc89fbfd18731e8b99cbe0" translate="yes" xml:space="preserve">
          <source>This solution uses the captured value in the URL subsitution, discarding the rest of the original query by appending a '?':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9fadd447d1dc8ced07028d7d87a08c8b07df13" translate="yes" xml:space="preserve">
          <source>This specification defines the HyperText Markup Language (HTML), the publishing language of the World Wide Web. This specification defines HTML 4.01, which is a subversion of HTML 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eb7abe23bd86a2fcba846ff09e1127b36a4ced" translate="yes" xml:space="preserve">
          <source>This specification defines the Second Edition of XHTML 1.0, a reformulation of HTML 4 as an XML 1.0 application, and three DTDs corresponding to the ones defined by HTML 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b92a2c3a2f0ae4f3e2ff7a00b0ce1e47523ec8b" translate="yes" xml:space="preserve">
          <source>This specifies the address of the application, in the form &lt;em&gt;fcgi://hostname:port/&lt;/em&gt;. The application process(es) must be managed independently, such as with &lt;code&gt;&lt;a href=&quot;../programs/fcgistarter&quot;&gt;fcgistarter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bf097a1f317f8296716f3fe2f8be5b8f78f590" translate="yes" xml:space="preserve">
          <source>This specifies the number of entries &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; will use to cache LDAP compare operations. The default is 1024 entries. Setting it to 0 disables operation caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe3c4178d3a556532689e5b90df850d1f08fdb9" translate="yes" xml:space="preserve">
          <source>This step will typically require root privileges, since &lt;em&gt;PREFIX&lt;/em&gt; is usually a directory with restricted write permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcc7d25543c8b718af653d35da7a50957d469ce" translate="yes" xml:space="preserve">
          <source>This still will not guarantee that the server will restart correctly. To check the semantics of the configuration files as well as the syntax, you can try starting &lt;code&gt;&lt;a href=&quot;programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; as a non-root user. If there are no errors it will attempt to open its sockets and logs and fail because it's not root (or because the currently running &lt;code&gt;&lt;a href=&quot;programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; already has those ports bound). If it fails for any other reason then it's probably a config file error and the error should be fixed before issuing the graceful restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f88ab4580ac92149a7ff0a2cdb593cb583eb16c" translate="yes" xml:space="preserve">
          <source>This submodule of &lt;code&gt;&lt;a href=&quot;mod_session&quot;&gt;mod_session&lt;/a&gt;&lt;/code&gt; provides support for the encryption of user sessions before being written to a local database, or written to a remote browser via an HTTP cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c840b49449ef42006e3b9f07d67d9dea7b99cbce" translate="yes" xml:space="preserve">
          <source>This submodule of &lt;code&gt;&lt;a href=&quot;mod_session&quot;&gt;mod_session&lt;/a&gt;&lt;/code&gt; provides support for the storage of user sessions on the remote browser within HTTP cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02e1bd3dc093cdb30bf1a6ee73a932a8c31e5c6" translate="yes" xml:space="preserve">
          <source>This submodule of &lt;code&gt;&lt;a href=&quot;mod_session&quot;&gt;mod_session&lt;/a&gt;&lt;/code&gt; provides support for the storage of user sessions within a SQL database using the &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d985d4887710fe9cf8a8dcd05ad76a921174a2c6" translate="yes" xml:space="preserve">
          <source>This supplies a list of trusted OCSP responder certificates to be used during OCSP responder certificate validation. The supplied certificates are implicitly trusted without any further validation. This is typically used where the OCSP responder certificate is self signed or omitted from the OCSP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016895bdda3e59b46109dd404bc88bd2009e43a2" translate="yes" xml:space="preserve">
          <source>This syntax is available in Apache 2.4.19 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e15ceca254b40d1c1e4e6df96191aac414777d3" translate="yes" xml:space="preserve">
          <source>This syntax is available in version 2.4.21 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4041d2f7a6c820515ca5c52053ccd9856b7cd5e5" translate="yes" xml:space="preserve">
          <source>This technique can be used as an alternative to a web service running within an application server stack, where an output filter provides the transformation required on the request body. For example, the &lt;code&gt;&lt;a href=&quot;mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; module might be used to provide a general compression service, or an image transformation filter might be turned into an image transformation service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7c1105665987de3428e89d52f2a490c4857927" translate="yes" xml:space="preserve">
          <source>This technique can be used to take actions based on any request header, response header, or environment variable, replacing &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; in many common scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cc9f5c6b85bb105c9e1f700781298299451be9" translate="yes" xml:space="preserve">
          <source>This technique is useful because a &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritecond&quot;&gt;RewriteCond&lt;/a&gt;&lt;/code&gt; only applies to the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; immediately following it. Thus, if you want to make a &lt;code&gt;RewriteCond&lt;/code&gt; apply to several &lt;code&gt;RewriteRule&lt;/code&gt;s, one possible technique is to negate those conditions and add a &lt;code&gt;RewriteRule&lt;/code&gt; with a [Skip] flag. You can use this to make pseudo if-then-else constructs: The last rule of the then-clause becomes &lt;code&gt;skip=N&lt;/code&gt;, where N is the number of rules in the else-clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ce3fb8c9e1619a77502c6e104af96aa7941302" translate="yes" xml:space="preserve">
          <source>This technique relies on the value of the &lt;code&gt;HTTP_REFERER&lt;/code&gt; variable, which is optional. As such, it's possible for some people to circumvent this limitation. However, most users will experience the failed request, which should, over time, result in the image being removed from that other site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee2f4cfec7f8eaf84fa47101a02e1eb1f050d99" translate="yes" xml:space="preserve">
          <source>This technique will of course also work with other special characters that mod_rewrite, by default, URL-encodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34340966ef7431f32c2456729d25da254445f0f5" translate="yes" xml:space="preserve">
          <source>This tells Apache that you want to permit files to be parsed for SSI directives. Note that most configurations contain multiple &lt;code&gt;&lt;a href=&quot;../mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; directives that can override each other. You will probably need to apply the &lt;code&gt;Options&lt;/code&gt; to the specific directory where you want SSI enabled in order to assure that it gets evaluated last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4212bba4a0ab37c94ec6242cc90de1e22f8987" translate="yes" xml:space="preserve">
          <source>This tells the client to make a new request for the specified URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc113ef4bf08fe969374f02ecd76011e50f39c5e" translate="yes" xml:space="preserve">
          <source>This time httpd needs to use reverse DNS to find the &lt;code&gt;ServerName&lt;/code&gt; for this virtualhost. If that reverse lookup fails then it will partially disable the virtualhost. If the virtual host is name-based then it will effectively be totally disabled, but if it is IP-based then it will mostly work. However, if httpd should ever have to generate a full URL for the server which includes the server name (such as when a Redirect is issued), then it will fail to generate a valid URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6427b384c523bb5e48a5808393f243ecf703b8" translate="yes" xml:space="preserve">
          <source>This timeout defaults to units of seconds, but accepts suffixes for milliseconds (ms), minutes (min), and hours (h).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2dd66c55aa76695a2928f2114d09c6d0155344" translate="yes" xml:space="preserve">
          <source>This timeout defaults to units of seconds, but accepts suffixes for milliseconds (ms), seconds (s), minutes (min), and hours (h).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047e2104a9e57f3c25cb7cd57fc30df97c867b17" translate="yes" xml:space="preserve">
          <source>This turns on fancy indexing of directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23157a484d17a29de6190ea12e1045a6c6b3c123" translate="yes" xml:space="preserve">
          <source>This turns on or off pre-parsing of metadata in HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a9725a540c9be096cedf4f4807551b42fe8612" translate="yes" xml:space="preserve">
          <source>This variable contains the query string of the active SSI document, or the empty string if a query string is not included. For subrequests invoked through the &lt;code&gt;include&lt;/code&gt; SSI directive, &lt;code&gt;QUERY_STRING&lt;/code&gt; will represent the query string of the subrequest and &lt;code&gt;DOCUMENT_ARGS&lt;/code&gt; will represent the query string of the SSI document. (Available in Apache HTTP Server 2.4.19 and later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65220db3e2b77ac127defad9522a803cfbae62e" translate="yes" xml:space="preserve">
          <source>This variable takes values &lt;code&gt;RFC&lt;/code&gt; (the default) or &lt;code&gt;Suppress&lt;/code&gt;. Earlier httpd versions would suppress HTTP interim (1xx) responses sent from the backend. This is technically a violation of the HTTP protocol. In practice, if a backend sends an interim response, it may itself be extending the protocol in a manner we know nothing about, or just broken. So this is now configurable: set &lt;code&gt;proxy-interim-response RFC&lt;/code&gt; to be fully protocol compliant, or &lt;code&gt;proxy-interim-response Suppress&lt;/code&gt; to suppress interim responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e33c5463523fc67b7416774cb995243aa66c28a" translate="yes" xml:space="preserve">
          <source>This variant uses an external executable &lt;code&gt;/path/to/program&lt;/code&gt; as the source for seeding the PRNG. When &lt;em&gt;bytes&lt;/em&gt; is specified, only the first &lt;em&gt;bytes&lt;/em&gt; number of bytes of its &lt;code&gt;stdout&lt;/code&gt; contents form the entropy. When &lt;em&gt;bytes&lt;/em&gt; is not specified, the entirety of the data produced on &lt;code&gt;stdout&lt;/code&gt; form the entropy. Use this only at startup time when you need a very strong seeding with the help of an external program (for instance as in the example above with the &lt;code&gt;truerand&lt;/code&gt; utility you can find in the mod_ssl distribution which is based on the AT&amp;amp;T &lt;em&gt;truerand&lt;/em&gt; library). Using this in the connection context slows down the server too dramatically, of course. So usually you should avoid using external programs in that context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e30b5ff8b6543b6bd0a3b1a1ded5a33397ca9ca" translate="yes" xml:space="preserve">
          <source>This variant uses an external file &lt;code&gt;/path/to/source&lt;/code&gt; as the source for seeding the PRNG. When &lt;em&gt;bytes&lt;/em&gt; is specified, only the first &lt;em&gt;bytes&lt;/em&gt; number of bytes of the file form the entropy (and &lt;em&gt;bytes&lt;/em&gt; is given to &lt;code&gt;/path/to/source&lt;/code&gt; as the first argument). When &lt;em&gt;bytes&lt;/em&gt; is not specified the whole file forms the entropy (and &lt;code&gt;0&lt;/code&gt; is given to &lt;code&gt;/path/to/source&lt;/code&gt; as the first argument). Use this especially at startup time, for instance with an available &lt;code&gt;/dev/random&lt;/code&gt; and/or &lt;code&gt;/dev/urandom&lt;/code&gt; devices (which usually exist on modern Unix derivatives like FreeBSD and Linux).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2f88edcaef8b86e00534a9a20bf7649966a45c" translate="yes" xml:space="preserve">
          <source>This variant uses the Unix domain socket of the external Entropy Gathering Daemon (EGD) (see &lt;a href=&quot;http://www.lothar.com/tech/crypto/&quot;&gt;http://www.lothar.com/tech /crypto/&lt;/a&gt;) to seed the PRNG. Use this if no random device exists on your platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b19971f598e9789144d471c0adc54e42f0c84cb" translate="yes" xml:space="preserve">
          <source>This was done by making the httpd startup script aware of its own name. This name is then used to find the environment file for the server, and in turn, the server root of the server instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8af5f65607da86537c28dc5eb33bb0267720d2" translate="yes" xml:space="preserve">
          <source>This was the default behaviour for Apache 2.2. Depending on the shell specifics this might lead to an additional shell process for the lifetime of the logging pipe program and signal handling problems during restart. For compatibility reasons with Apache 2.2 the notation &quot;&lt;code&gt;||&lt;/code&gt;&quot; is also supported and equivalent to using &quot;&lt;code&gt;|&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82090aa05a5f8e3e59cf9b147055dccc0bbe03e5" translate="yes" xml:space="preserve">
          <source>This way a line named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4107e149328125104938acf1fb48cb377289d9fe" translate="yes" xml:space="preserve">
          <source>This way round, the &lt;code&gt;MirrorID&lt;/code&gt; header is not set. If reversed, the MirrorID header is set to &quot;mirror 12&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587b857cf0f9b86f2c067f940976739d82343c24" translate="yes" xml:space="preserve">
          <source>This we believe is a relatively portable solution to this problem. The identifiers generated have essentially an infinite life-time because future identifiers can be made longer as required. Essentially no communication is required between machines in the cluster (only NTP synchronization is required, which is low overhead), and no communication between httpd processes is required (the communication is implicit in the pid value assigned by the kernel). In very specific situations the identifier can be shortened, but more information needs to be assumed (for example the 32-bit IP address is overkill for any site, but there is no portable shorter replacement for it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5388e2bbef300ad013869f5867c86ade9aa56a3d" translate="yes" xml:space="preserve">
          <source>This will cause &lt;code&gt;foo.gz&lt;/code&gt; to be marked as being encoded with the gzip method, but &lt;code&gt;foo.gz.asc&lt;/code&gt; as an unencoded plaintext file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62569793ae1c428dc6a8ae6fd871eb6803fc2173" translate="yes" xml:space="preserve">
          <source>This will cause &lt;code&gt;mod_lua&lt;/code&gt; to handle requests for files ending in &lt;code&gt;.lua&lt;/code&gt; by invoking that file's &lt;code&gt;handle&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72394d68274bd23b8665e8d3167b8f961f3dd4c" translate="yes" xml:space="preserve">
          <source>This will cause filenames containing the &lt;code&gt;.gz&lt;/code&gt; extension to be marked as encoded using the &lt;code&gt;x-gzip&lt;/code&gt; encoding, and filenames containing the &lt;code&gt;.Z&lt;/code&gt; extension to be marked as encoded with &lt;code&gt;x-compress&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b73415dcc387870508690f36d12d38e2d9b01a" translate="yes" xml:space="preserve">
          <source>This will cause the &lt;code&gt;site&lt;/code&gt; environment variable to be set to &quot;&lt;code&gt;example&lt;/code&gt;&quot; if the HTTP request header field &lt;code&gt;Host:&lt;/code&gt; was included and contained &lt;code&gt;Example.Org&lt;/code&gt;, &lt;code&gt;example.org&lt;/code&gt;, or any other combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14da964da31e4bb5dc9ec0be027db87d6c81a4f0" translate="yes" xml:space="preserve">
          <source>This will create a log file in the common log format, but with the canonical virtual host (whatever appears in the &lt;code&gt;&lt;a href=&quot;../mod/core#servername&quot;&gt;ServerName&lt;/a&gt;&lt;/code&gt; directive) prepended to each line. (See &lt;code&gt;&lt;a href=&quot;../mod/mod_log_config&quot;&gt;mod_log_config&lt;/a&gt;&lt;/code&gt; for more about customizing your log files.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650ad0a9d2d87e3bd1a499177ab28f41932980f1" translate="yes" xml:space="preserve">
          <source>This will create a new directory under the current directory containing the source code for the distribution. You should &lt;code&gt;cd&lt;/code&gt; into that directory before proceeding with compiling the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e95e9595260c64c031ac96fde871491435c5658" translate="yes" xml:space="preserve">
          <source>This will create a worker associated with the origin server URL &lt;code&gt;http://backend.example.com&lt;/code&gt; that will use the given timeout values. When used in a forward proxy, workers are usually defined via the &lt;code&gt;&lt;a href=&quot;#proxyset&quot;&gt;ProxySet&lt;/a&gt;&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3d713af3a7ae4934ee043ee4618b5123877d0a" translate="yes" xml:space="preserve">
          <source>This will ensure that only the group httpd runs as can even execute the suEXEC wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49970674673157a6cda638d1d9f370c395586e13" translate="yes" xml:space="preserve">
          <source>This will expand to the standard environment variable &lt;em&gt;variablename&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309b7a13baedd1a4a4c2a70a965721c7cd78130e" translate="yes" xml:space="preserve">
          <source>This will expand to the value of the request header with name &lt;em&gt;headername&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4b983801091c4c2b9308d01696a4c50930322f" translate="yes" xml:space="preserve">
          <source>This will forbid default access to filesystem locations. Add appropriate &lt;code&gt;&lt;a href=&quot;../mod/core#directory&quot;&gt;Directory&lt;/a&gt;&lt;/code&gt; blocks to allow access only in those areas you wish. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c924096345308165adc90cdd41a4570cd127c0a0" translate="yes" xml:space="preserve">
          <source>This will indicate either that you've used a directive that is never permitted in &lt;code&gt;.htaccess&lt;/code&gt; files, or that you simply don't have &lt;code&gt;&lt;a href=&quot;../mod/core#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; set to a level sufficient for the directive you've used. Consult the documentation for that particular directive to determine which is the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76d77c01ad461d773c3beb44c888a46149db772" translate="yes" xml:space="preserve">
          <source>This will load Apache into an address space called apache2. Running multiple instances of Apache concurrently on NetWare is possible by loading each instance into its own protected address space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2309d3fd5996e0ff14808654c6e8056d0e4a45" translate="yes" xml:space="preserve">
          <source>This will not be available if the &lt;code&gt;&lt;a href=&quot;core#acceptpathinfo&quot;&gt;AcceptPathInfo&lt;/a&gt;&lt;/code&gt; directive is explicitly set to &lt;code&gt;off&lt;/code&gt;. The default behavior, if &lt;code&gt;AcceptPathInfo&lt;/code&gt; is not given, is that &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt; will accept path info (trailing &lt;code&gt;/more/path/info&lt;/code&gt; following the script filename in the URI), while the core server will return a 404 NOT FOUND error for requests with additional path info. Omitting the &lt;code&gt;AcceptPathInfo&lt;/code&gt; directive has the same effect as setting it &lt;code&gt;On&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64c0d04e4d11f9a618b9aa4d0463fb564267d92" translate="yes" xml:space="preserve">
          <source>This will often be limited to a smaller number by the operating system. This varies from OS to OS. Also note that many OSes do not use exactly what is specified as the backlog, but use a number based on (but normally larger than) what is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7505d9ea819eb51bc9354fabdc83330c8a5322" translate="yes" xml:space="preserve">
          <source>This will only be set if &lt;code&gt;&lt;a href=&quot;core#hostnamelookups&quot;&gt;HostnameLookups&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt; (it is off by default), and if a reverse DNS lookup of the accessing host's address indeed finds a host name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30aecd97b4c45244a2d9bedb67b1dcc760d400d3" translate="yes" xml:space="preserve">
          <source>This will only be set if &lt;code&gt;&lt;a href=&quot;mod_ident#identitycheck&quot;&gt;IdentityCheck&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt; and the accessing host supports the ident protocol. Note that the contents of this variable cannot be relied upon because it can easily be faked, and if there is a proxy between the client and the server, it is usually totally useless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5666880d00cfa9a13e623ed677f6470752bf70" translate="yes" xml:space="preserve">
          <source>This will only be set if the CGI script is subject to authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045acfe97394d09269963752bdcfcafa9c46bb91" translate="yes" xml:space="preserve">
          <source>This will redirect any URL-Path starting in &lt;code&gt;/foo/&lt;/code&gt; to the same URL path on the &lt;code&gt;www.example.com&lt;/code&gt; server with &lt;code&gt;/bar/&lt;/code&gt; substituted for &lt;code&gt;/foo/&lt;/code&gt;. You can redirect clients to any server, not only the origin server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c488e0fd87b64fc69a4f37c171cc7af24e3d42f2" translate="yes" xml:space="preserve">
          <source>This will remove any special handling of &lt;code&gt;.cgi&lt;/code&gt; files in the &lt;code&gt;/foo/&lt;/code&gt; directory and any beneath it, causing responses containing those files to omit the HTTP Content-Type header field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d1b2f6a17338ab9dbe1758362c5f2ef330beaf" translate="yes" xml:space="preserve">
          <source>This will result in the &lt;code&gt;Zed&lt;/code&gt; variable being set to &quot;&lt;code&gt;X_Y&lt;/code&gt;&quot; if &lt;code&gt;REMOTE_HOST&lt;/code&gt; is &quot;&lt;code&gt;X&lt;/code&gt;&quot; and &lt;code&gt;REQUEST_METHOD&lt;/code&gt; is &quot;&lt;code&gt;Y&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374f900b409d695b77dc014bbdee0d34645b5923" translate="yes" xml:space="preserve">
          <source>This will return a 403 Forbidden response for any request after 8pm or before 7am. This technique can be used for any criteria that you wish to check. You can also redirect, or otherwise rewrite these requests, if that approach is preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3815330e1e0967e02f69176f832c4d082a9b92" translate="yes" xml:space="preserve">
          <source>This will send out a &lt;code&gt;&quot;103 Early Hints&quot;&lt;/code&gt; response to a client as soon as the server &lt;em&gt;starts&lt;/em&gt; processing the request. This may be much early than the time the first response headers have been determined, depending on your web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7967cded267ebd239f1f4b5718922abc31ecdf9" translate="yes" xml:space="preserve">
          <source>This will suppress the display of the last modification date, in fancy indexing listings. &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaae85d95a6c4478b370633180a49da421fc111" translate="yes" xml:space="preserve">
          <source>This will suppress the file description in fancy indexing listings. By default, no file descriptions are defined, and so the use of this option will regain 23 characters of screen space to use for something else. See &lt;code&gt;&lt;a href=&quot;#adddescription&quot;&gt;AddDescription&lt;/a&gt;&lt;/code&gt; for information about setting the file description. See also the &lt;code&gt;&lt;a href=&quot;#indexoptions.descriptionwidth&quot;&gt;DescriptionWidth&lt;/a&gt;&lt;/code&gt; index option to limit the size of the description column. &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a82e9d4397d3b3512f14197498ab4801109469c" translate="yes" xml:space="preserve">
          <source>This will suppress the file size in fancy indexing listings. &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bded0e221089407f6efb7035b32794b87d1456" translate="yes" xml:space="preserve">
          <source>This will suppress the horizontal rule lines (&lt;code&gt;hr&lt;/code&gt; elements) in directory listings. Combining both &lt;code&gt;SuppressIcon&lt;/code&gt; and &lt;code&gt;SuppressRules&lt;/code&gt; yields proper HTML 3.2 output, which by the final specification prohibits &lt;code&gt;img&lt;/code&gt; and &lt;code&gt;hr&lt;/code&gt; elements from the &lt;code&gt;pre&lt;/code&gt; block (used to format FancyIndexed listings.) &lt;strong&gt;This option only has an effect if &lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;&lt;code&gt;FancyIndexing&lt;/code&gt;&lt;/a&gt; is also enabled.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a8452e4019c02febfa4646ee1273d09890bdff" translate="yes" xml:space="preserve">
          <source>This will suppress the icon in fancy indexing listings. Combining both &lt;code&gt;SuppressIcon&lt;/code&gt; and &lt;code&gt;SuppressRules&lt;/code&gt; yields proper HTML 3.2 output, which by the final specification prohibits &lt;code&gt;img&lt;/code&gt; and &lt;code&gt;hr&lt;/code&gt; elements from the &lt;code&gt;pre&lt;/code&gt; block (used to format FancyIndexed listings.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db8dd854838eb61bca4e02cee8e5d69a7f9380f" translate="yes" xml:space="preserve">
          <source>This works by defining two special &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; types: &lt;code&gt;Require dbd-login&lt;/code&gt; and &lt;code&gt;Require dbd-logout&lt;/code&gt;. For usage details, see the configuration example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd57e20f8f634074836ed64479bc6e3a8dcd096e" translate="yes" xml:space="preserve">
          <source>This works fine if the request is for &lt;code&gt;http://yoursite.example.com/dir/&lt;/code&gt;. But what if you are on a case-insensitive filesystem? Then your restriction could be easily circumvented by requesting &lt;code&gt;http://yoursite.example.com/DIR/&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; directive, in contrast, will apply to any content served from that location, regardless of how it is called. (An exception is filesystem links. The same directory can be placed in more than one part of the filesystem using symbolic links. The &lt;code&gt;&lt;a href=&quot;mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; directive will follow the symbolic link without resetting the pathname. Therefore, for the highest level of security, symbolic links should be disabled with the appropriate &lt;code&gt;&lt;a href=&quot;mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; directive.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a17019da66e4b29bb0f3c391759c91b44c03374" translate="yes" xml:space="preserve">
          <source>This works for all popular FTP servers which are configured for anonymous access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34a886ebff710d04d45d2d7e403690cfd3a02c6" translate="yes" xml:space="preserve">
          <source>This works on the assumption that no header names will have length greater than &lt;code&gt;0x9FFF (==0xA000 - 1)&lt;/code&gt;, which is perfectly reasonable, though somewhat arbitrary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898b90f45e7970a12f00011881cab1f13b9f45ee" translate="yes" xml:space="preserve">
          <source>This would allow clients to walk through the entire filesystem. To work around this, add the following block to your server's configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df130ea2c95233a4e4bb43aaab63ff7d3ab6338" translate="yes" xml:space="preserve">
          <source>This would allow the user to enter without password verification by using the userIDs &quot;anonymous&quot;, &quot;AnonyMous&quot;, &quot;Not Registered&quot; and &quot;I Don't Know&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35352cb6ff56f90156c939974b816a6e5faab8c9" translate="yes" xml:space="preserve">
          <source>This would invoke the &quot;handle&quot; function, which is the default if no specific function name is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e50f007138991799dae5e30f1602742ef3f0da9" translate="yes" xml:space="preserve">
          <source>This would match uri's such as /photos/show?id=9 to the file /scripts/photos.lua and invoke the handler function handle_show on the lua vm after loading that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ec4a4c4e1f5b0041626aa8e9012fcd2a801533" translate="yes" xml:space="preserve">
          <source>This would result in error messages such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b426ed86bf27ad83904ead28f5a04ce84ef8c91" translate="yes" xml:space="preserve">
          <source>This would set the environment variable &lt;code&gt;iso_delivered&lt;/code&gt; every time our application attempts to send it via &lt;code&gt;X-Sendfile&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b77c4fe8f38b3f1a1cdb08a738a852414affe2" translate="yes" xml:space="preserve">
          <source>Those familiar with earlier versions of &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; will no doubt be looking for the &lt;code&gt;RewriteLog&lt;/code&gt; and &lt;code&gt;RewriteLogLevel&lt;/code&gt; directives. This functionality has been completely replaced by the new per-module logging configuration mentioned above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c7624e3aab2e8118ae8737bf94d41e96fd4dce" translate="yes" xml:space="preserve">
          <source>Those that are special to &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; include those below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9391c6b559525c33eb4a9f711f3b2d7e611ac470" translate="yes" xml:space="preserve">
          <source>Thread ID of current thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e568a839eeff21555e01f3dc906803b661e5d25a" translate="yes" xml:space="preserve">
          <source>ThreadLimit Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124c40a713df8309f4463e8f3d1687677cebe6a7" translate="yes" xml:space="preserve">
          <source>ThreadStackSize Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9505d764a5ff0901743bd73190d320b4cf6697db" translate="yes" xml:space="preserve">
          <source>ThreadsPerChild Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f094e95d084e7a8234e73b99c6ee7702265690" translate="yes" xml:space="preserve">
          <source>Three directives are provided by this module: &lt;code&gt;&lt;a href=&quot;#transferlog&quot;&gt;TransferLog&lt;/a&gt;&lt;/code&gt; to create a log file, &lt;code&gt;&lt;a href=&quot;#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; to set a custom format, and &lt;code&gt;&lt;a href=&quot;#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; to define a log file and format in one step. The &lt;code&gt;TransferLog&lt;/code&gt; and &lt;code&gt;CustomLog&lt;/code&gt; directives can be used multiple times in each server to cause each request to be logged to multiple files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf04427b0a8d6381ba7dfd514c6e24776d56c58" translate="yes" xml:space="preserve">
          <source>Three-state RFC2616 HTTP caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfac5feedfb24e44b5cba00723ae5082e24984eb" translate="yes" xml:space="preserve">
          <source>Through the use of &lt;code&gt;AuthBasicUseDigestAlgorithm&lt;/code&gt; a site may switch from Digest to Basic Authentication without requiring users to be assigned new passwords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0be28b4c187a262cddc2eb2a88cb36cf5f73dca" translate="yes" xml:space="preserve">
          <source>Thus you may log it this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9988687667614176f981356f5a59a35090d069a2" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling &lt;code&gt;AJP13&lt;/code&gt; protocol, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_ajp&quot;&gt;mod_proxy_ajp&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f62bfb28efb2962a1c63b1990ced54ebbb925fe" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling &lt;code&gt;CONNECT&lt;/code&gt; requests, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_connect&quot;&gt;mod_proxy_connect&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bf67fb36d90754b3215037604be80e2ac11443" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling FTP proxy requests, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_ftp&quot;&gt;mod_proxy_ftp&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50677282ce55107b879e19fac73c5521378cf7c3" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling HTTP proxy requests, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_http&quot;&gt;mod_proxy_http&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd5d09c9a3ade9b54ac0403013b99873342bd85" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling the &lt;code&gt;FastCGI&lt;/code&gt; protocol, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ca6a9b8b5cd6b52d8f3ff3fc4f8486dbcd90d9" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling the SCGI protocol, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_scgi&quot;&gt;mod_proxy_scgi&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d933e95936bf6cb17b8f867c84af5c44a4c4f1" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of handling the UWSGI protocol, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_uwsgi&quot;&gt;mod_proxy_uwsgi&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84d800b5c6dd3f96c0169931352f37c386af9e2" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of load balancer management, &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt; have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e8a6c246f9862487aabbb7f930f9ea33a03124" translate="yes" xml:space="preserve">
          <source>Thus, in order to get the ability of load balancing, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt; and at least one of load balancing scheduler algorithm modules have to be present in the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e03aeab02653879a16310718394bdda8f200909" translate="yes" xml:space="preserve">
          <source>Thus, it is possible to have one or more hot spares and hot standbys for each load balancer set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d19c72c58f71c651a40fcfc85f40d5f57802ac" translate="yes" xml:space="preserve">
          <source>Thus, when &lt;code&gt;http://example.com/product/television&lt;/code&gt; is requested, the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; is applied, and the request is internally mapped to &lt;code&gt;/prods.php?id=993&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c05bedfbcb5f599c3ebf8ff088d91b75a20d15" translate="yes" xml:space="preserve">
          <source>Ticket keys should be rotated (replaced) on a frequent basis, as this is the only way to invalidate an existing session ticket - OpenSSL currently doesn't allow to specify a limit for ticket lifetimes. A new ticket key only gets used after restarting the web server. All existing session tickets become invalid after a restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c180c523be0db9130ee1cd744c3aa8dd96d56526" translate="yes" xml:space="preserve">
          <source>Tim Dierks, Christopher Allen, &lt;q&gt;The TLS Protocol Version 1.0&lt;/q&gt;, 1999. See &lt;a href=&quot;http://ietf.org/rfc/rfc2246.txt&quot;&gt;http://ietf.org/rfc/rfc2246.txt&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd536c0df5916ac6edfa4d1d70c07f2511da9b6" translate="yes" xml:space="preserve">
          <source>Time of the end of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570651f958b4c8cf3712263e8aec7ab5121023ee" translate="yes" xml:space="preserve">
          <source>Time of the start of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df8058299fc5270ffbcebc9444546a9383da3f5" translate="yes" xml:space="preserve">
          <source>Time per request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b09a642b5a35ea2f8eebd8c6b4ac599884cc29e" translate="yes" xml:space="preserve">
          <source>Time taken for tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d41909836fdd10d974b79aa5b53af3faae95f1" translate="yes" xml:space="preserve">
          <source>Time that cached items remain valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0d58bd64f04ea40d17ec1a788b359f64c6bcdd" translate="yes" xml:space="preserve">
          <source>Time that entries in the operation cache remain valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc58d7747e0d7b21f797f0f149f70c2de0756cf2" translate="yes" xml:space="preserve">
          <source>Time the request was received, in the format &lt;code&gt;[18/Sep/2011:19:18:28 -0400]&lt;/code&gt;. The last number indicates the timezone offset from GMT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835be40505725a2f8430e92e79a56f0ad8c39db7" translate="yes" xml:space="preserve">
          <source>Time to live for inactive connections and associated connection pool entries, in seconds. Once reaching this limit, a connection will not be used again; it will be closed at some later time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c5ccd84ac2ffc2763a5298b10b4f591731876e" translate="yes" xml:space="preserve">
          <source>Time-Dependent Rewriting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebf1fd41663efd3cbfd9f8b5ba0f98cb9ce135a" translate="yes" xml:space="preserve">
          <source>TimeOut Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f3b143fc5065510b02317e69af59def163f024" translate="yes" xml:space="preserve">
          <source>Timeout for OCSP queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf696c9feb3ce8a6f1e9df98d56b5dec9f9b853" translate="yes" xml:space="preserve">
          <source>Timeout for OCSP stapling queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b174d5d610e8f0b6ab0a17d86587d7f13a8db7a" translate="yes" xml:space="preserve">
          <source>Timeouts for ldap compare operations requires an SDK with LDAP_OPT_TIMEOUT, such as OpenLDAP &amp;gt;= 2.4.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5386ff32ff5f1d094d5fdaea4ce53623159ff18" translate="yes" xml:space="preserve">
          <source>Timestamp including milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf1b54b003a59c279d1ba0b615a8a5f3459ca8c" translate="yes" xml:space="preserve">
          <source>Tips</source>
          <target state="translated">Tips</target>
        </trans-unit>
        <trans-unit id="ee20bb0a759c311706e4062c60aa458a9f75ce12" translate="yes" xml:space="preserve">
          <source>Tips to Avoid These Problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9b9891d94f801888d42a568cd7c01af133e709" translate="yes" xml:space="preserve">
          <source>To achieve this, when the error redirect is sent, additional environment variables will be set, which will be generated from the headers provided to the original request by prepending 'REDIRECT_' onto the original header name. This provides the error document the context of the original request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c888eaaf108bd7127387059dc61077a16d695e" translate="yes" xml:space="preserve">
          <source>To activate the example_hooks module, include a block similar to the following in your &lt;code&gt;httpd.conf&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8f858f477432d6bd24f1b7366ddc529f96a79f" translate="yes" xml:space="preserve">
          <source>To add a user to your already existing password file, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ae332558c535b0faeb7e704426365c6e47b6e8" translate="yes" xml:space="preserve">
          <source>To add additional third-party modules use the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570daf2bcd62a72a1b072b04b370a60b8760b988" translate="yes" xml:space="preserve">
          <source>To add another module of your own:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc6c04227c50b24c85412656fbabdf01e201d21" translate="yes" xml:space="preserve">
          <source>To address files found in a particular part of the filesystem, the &lt;code&gt;&lt;a href=&quot;mod/core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; sections can be combined. For example, the following configuration will deny access to &lt;code&gt;/var/web/dir1/private.html&lt;/code&gt;, &lt;code&gt;/var/web/dir1/subdir2/private.html&lt;/code&gt;, &lt;code&gt;/var/web/dir1/subdir3/private.html&lt;/code&gt;, and any other instance of &lt;code&gt;private.html&lt;/code&gt; found under the &lt;code&gt;/var/web/dir1/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368cceee963bb540ba11411d1854ee9f8cd3de74" translate="yes" xml:space="preserve">
          <source>To allow CGI program execution for any file ending in &lt;code&gt;.cgi&lt;/code&gt; in users' directories, you can use the following configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f454870bff3cc94df4e594552a3ff23273ad8b9" translate="yes" xml:space="preserve">
          <source>To allow a few users to have &lt;code&gt;UserDir&lt;/code&gt; directories, but not anyone else, use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f523e7554144d5e4b05581ea895cc2be3038852" translate="yes" xml:space="preserve">
          <source>To allow a module to use &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; functionality, &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; itself must be statically linked to the server core or, if a dynamic module, be loaded before the calling module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d3a323a490a9b70907b77bf3a37f25140a4866" translate="yes" xml:space="preserve">
          <source>To allow most users to have &lt;code&gt;UserDir&lt;/code&gt; directories, but deny this to a few, use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ef33ce7e698f7a014cb241d5eacf0f05f5f1aa" translate="yes" xml:space="preserve">
          <source>To assign environment variables (e.g. &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;CFLAGS&lt;/code&gt; ...), specify them as &lt;code&gt;VAR=VALUE&lt;/code&gt;. See &lt;a href=&quot;#env&quot;&gt;below&lt;/a&gt; for descriptions of some of the useful variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3475fa12546e609524002327a98c1f037a198a" translate="yes" xml:space="preserve">
          <source>To build Apache using standard BSD style sockets rather than Winsock, set the environment variable &lt;code&gt;USE_STDSOCKETS&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1db6a843e336637e172d6208884df07da0d2ca" translate="yes" xml:space="preserve">
          <source>To build all of the experimental modules, set the environment variable &lt;code&gt;EXPERIMENTAL&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c0eb823441c85e9922659078aee6c1ca832d9a" translate="yes" xml:space="preserve">
          <source>To build and install all the files into the desired folder &lt;em&gt;dir&lt;/em&gt; automatically, use one of the following &lt;code&gt;nmake&lt;/code&gt; commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26b26cc459f1c2f5b09eb456e3d4d1894f9c003" translate="yes" xml:space="preserve">
          <source>To build using the makefiles, you will need GNU make version 3.78.1 (GMake) available at &lt;a href=&quot;http://developer.novell.com/ndk/apache.htm&quot;&gt;http://developer.novell.com/ndk/apache.htm&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9209cf50e0f80f4ead2561d967c36d7cab9891" translate="yes" xml:space="preserve">
          <source>To check if you are using suexec, run &lt;code&gt;apachectl -V&lt;/code&gt; and check for the location of &lt;code&gt;SUEXEC_BIN&lt;/code&gt;. If Apache finds an &lt;code&gt;&lt;a href=&quot;../programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; binary there on startup, suexec will be activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0b1ba9eb128ad41629ffead810a2f1e4a1d310" translate="yes" xml:space="preserve">
          <source>To check that the public key in your Certificate matches the public portion of your private key, you simply need to compare these numbers. To view the Certificate and the key run the commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943738d241eded3fd1daf078162833d9dbe7a375" translate="yes" xml:space="preserve">
          <source>To circumvent this limitation, there are some known configuration patterns that can help, like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbc82c5f2b8d5fe873e1906b670626ffb48a69d" translate="yes" xml:space="preserve">
          <source>To configure &lt;code&gt;&lt;a href=&quot;mod_info&quot;&gt;mod_info&lt;/a&gt;&lt;/code&gt;, add the following to your &lt;code&gt;httpd.conf&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07f6328bc34c39815ccdc58ff0db9e3fff6a113" translate="yes" xml:space="preserve">
          <source>To configure inline authentication, the administrator overrides the error document returned by the &lt;var&gt;HTTP_UNAUTHORIZED&lt;/var&gt; status code with a custom error document containing the login form, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6415a3103962fc92515b8c0a370f8cbcd730ca76" translate="yes" xml:space="preserve">
          <source>To configure the source tree using all the default options, simply type &lt;code&gt;./configure&lt;/code&gt;. To change the default options, &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; accepts a variety of variables and command line options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8e7c531d8f73b5d957c92d4ebf8d3aba3a67bd" translate="yes" xml:space="preserve">
          <source>To connect to your database, you'll need to specify a driver, and connection parameters. These vary from one database engine to another. For example, to connect to mysql, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a259914507f0f81055a1685dd2b26aad916f4436" translate="yes" xml:space="preserve">
          <source>To convey this further information, Apache optionally sends a &lt;code&gt;Content-Language&lt;/code&gt; header, to specify the language that the document is in, and can append additional information onto the &lt;code&gt;Content-Type&lt;/code&gt; header to indicate the particular character set that should be used to correctly render the information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7753822caf031c3782f667e0c01781f61691371" translate="yes" xml:space="preserve">
          <source>To create Apache SHA1-variant basic-authentication passwords in various languages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045680397a4569aa017ba74d93eab8ee145ab706" translate="yes" xml:space="preserve">
          <source>To create Apache digest-authentication passwords in various languages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8a3732ef3dab0d872ba5fa611416d97dd948d6" translate="yes" xml:space="preserve">
          <source>To create a dbm file, first create a text map file as described in the &lt;a href=&quot;#txt&quot;&gt;txt&lt;/a&gt; section. Then run &lt;code&gt;httxt2dbm&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d744bd2775bc8e637e85c64df51f5a0ea16c36" translate="yes" xml:space="preserve">
          <source>To create a module DLL, a small change is necessary to the module's source file: The module record must be exported from the DLL (which will be created later; see below). To do this, add the &lt;code&gt;AP_MODULE_DECLARE_DATA&lt;/code&gt; (defined in the Apache httpd header files) to your module's module record definition. For example, if your module has:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d72b7a8da17d64e8e43ef6a75e33d2e6459cbc" translate="yes" xml:space="preserve">
          <source>To create a simple anonymous session and store it in a postgres database table called &lt;var&gt;apachesession&lt;/var&gt;, and save the session ID in a cookie called &lt;var&gt;session&lt;/var&gt;, configure the session as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d868ac88dcf19ca06eb8b28167d806db5e5ee80" translate="yes" xml:space="preserve">
          <source>To create a simple encrypted session and store it in a cookie called &lt;var&gt;session&lt;/var&gt;, configure the session as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1beedc89158db97c5ffa8fed01ee928561a032c0" translate="yes" xml:space="preserve">
          <source>To create a simple per user session and store it in a postgres database table called &lt;var&gt;apachesession&lt;/var&gt;, and with the session keyed to the userid, configure the session as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c7cb7e734a9b2bd280e88fc5abdf6651c1aac6" translate="yes" xml:space="preserve">
          <source>To create a simple session and store it in a cookie called &lt;var&gt;session&lt;/var&gt;, configure the session as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796ea51a37e43256d7d037080f53a857862ba6ec" translate="yes" xml:space="preserve">
          <source>To create an additional instance called &lt;code&gt;httpd-additional&lt;/code&gt;, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3a3ce6eb76d2147c44e5759e7ba4d471846090" translate="yes" xml:space="preserve">
          <source>To create the file, type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e1fc6d8f0279adbc5ce022eda3d5db4ff7a06c" translate="yes" xml:space="preserve">
          <source>To create the file, use the &lt;code&gt;&lt;a href=&quot;../programs/htpasswd&quot;&gt;htpasswd&lt;/a&gt;&lt;/code&gt; utility that came with Apache. This will be located in the &lt;code&gt;bin&lt;/code&gt; directory of wherever you installed Apache. If you have installed Apache from a third-party package, it may be in your execution path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1dc37392d075ed68928f09f74df1e871b8e4431" translate="yes" xml:space="preserve">
          <source>To decide whether or not to use this rule: if you prefix URLs with CGI-scripts, to force them to be processed by the CGI-script, it's likely that you will run into problems (or significant overhead) on sub-requests. In these cases, use this flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39ffc7613745378d3a99a6019d8e9c4cb5cc48f" translate="yes" xml:space="preserve">
          <source>To determine the actual list of ciphers available, you should run the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db418cfab4dc7bfe1bd350181a755dc8107a12b" translate="yes" xml:space="preserve">
          <source>To determine the set of directives that your server configuration allows .htaccess users to use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48c0246986022a0ed5aa2f30cc585087fd5fbb3" translate="yes" xml:space="preserve">
          <source>To discover which engine names are supported, run the command &quot;&lt;code&gt;openssl engine&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb2f5423ec187adddaa9f604f8d9ba3f2f62fc7" translate="yes" xml:space="preserve">
          <source>To distinguish &lt;var&gt;Domain&lt;/var&gt;s from &lt;var&gt;&lt;a href=&quot;#hostname&quot;&gt;Hostname&lt;/a&gt;&lt;/var&gt;s (both syntactically and semantically; a DNS domain can have a DNS A record, too!), &lt;var&gt;Domain&lt;/var&gt;s are always written with a leading period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c1e2a6a3098ca9ffde326cc0dbda26fef86524" translate="yes" xml:space="preserve">
          <source>To distinguish time we will use a Unix timestamp (seconds since January 1, 1970 UTC), and a 16-bit counter. The timestamp has only one second granularity, so the counter is used to represent up to 65536 values during a single second. The quadruple &lt;em&gt;( ip_addr, pid, time_stamp, counter )&lt;/em&gt; is sufficient to enumerate 65536 requests per second per httpd process. There are issues however with pid reuse over time, and the counter is used to alleviate this issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fdba33d71c02a85c07c051f406c545755125e3" translate="yes" xml:space="preserve">
          <source>To enable &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;, add the following to a container in your &lt;code&gt;httpd.conf&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182cee3d11523219a669a8aef9e762006ca4745c" translate="yes" xml:space="preserve">
          <source>To enable a user to log out of a particular session, configure a page to be handled by the &lt;var&gt;form-logout-handler&lt;/var&gt;. Any attempt to access this URL will cause the username and password to be removed from the current session, effectively logging the user out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc80afd2ab872401efda11231a3b5efc71b49df9" translate="yes" xml:space="preserve">
          <source>To enable body preservation, add three additional fields to the login form as per the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437a6b43ecfa59a2ec586cf6e10893d928acfe32" translate="yes" xml:space="preserve">
          <source>To enable core-dumping of suid-executables on BSD-systems (such as FreeBSD), set &lt;code&gt;kern.sugid_coredump&lt;/code&gt; to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11b9eda13c8d3bee021b28fbaaed56a38523c6d" translate="yes" xml:space="preserve">
          <source>To enable load balancer management for browsers from the example.com domain add this code to your &lt;code&gt;httpd.conf&lt;/code&gt; configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1aacca3e3e4b973e77e3bb2b9ece17e445eeb91" translate="yes" xml:space="preserve">
          <source>To enable status reports only for browsers from the example.com domain add this code to your &lt;code&gt;httpd.conf&lt;/code&gt; configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2469cd8e9057d17dbb3f6a648f369ba2cf4a21" translate="yes" xml:space="preserve">
          <source>To enable the module, it should be compiled and loaded in to your running Apache configuration. Logging can then be enabled or disabled separately for input and output via the below directives. Additionally, &lt;code&gt;&lt;a href=&quot;mod_dumpio&quot;&gt;mod_dumpio&lt;/a&gt;&lt;/code&gt; needs to be configured to &lt;code&gt;&lt;a href=&quot;core#loglevel&quot;&gt;LogLevel&lt;/a&gt;&lt;/code&gt;&lt;code&gt;trace7&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c95ede111ef3a06bbfd9f4de718a7e8423ede1" translate="yes" xml:space="preserve">
          <source>To enable the rewrite engine in this context, you need to set &quot;&lt;code&gt;RewriteEngine On&lt;/code&gt;&quot; &lt;strong&gt;and&lt;/strong&gt; &quot;&lt;code&gt;Options FollowSymLinks&lt;/code&gt;&quot; must be enabled. If your administrator has disabled override of &lt;code&gt;FollowSymLinks&lt;/code&gt; for a user's directory, then you cannot use the rewrite engine. This restriction is required for security reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d573cbfeefe2aade62109fed25d647d672917d" translate="yes" xml:space="preserve">
          <source>To enable this module, LDAP support must be compiled into apr-util. This is achieved by adding the &lt;code&gt;--with-ldap&lt;/code&gt; flag to the &lt;code&gt;&lt;a href=&quot;../programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script when building Apache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5fcfd7fba39cba92afa9ee9cca89471b0031c9" translate="yes" xml:space="preserve">
          <source>To ensure some basic security, the container will only actually do the &lt;code&gt;Shutdown&lt;/code&gt; if the request comes from the same machine on which it's hosted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6e03e305cb93de1fb946c2246f50712d910835" translate="yes" xml:space="preserve">
          <source>To ensure that and &lt;code&gt;Location:&lt;/code&gt; headers generated from the backend are modified to point to the reverse proxy, instead of back to itself, the &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#proxypassreverse&quot;&gt;ProxyPassReverse&lt;/a&gt;&lt;/code&gt; directive is most often required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c074d61b046fd69edc3a13fd3897ea28c2a7e74f" translate="yes" xml:space="preserve">
          <source>To find out what directives are allowed in what types of configuration sections, check the Context of the directive. Everything that is allowed in &lt;code&gt;&lt;a href=&quot;mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; sections is also syntactically allowed in &lt;code&gt;&lt;a href=&quot;mod/core#directorymatch&quot;&gt;&amp;lt;DirectoryMatch&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/core#filesmatch&quot;&gt;&amp;lt;FilesMatch&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/mod_proxy#proxy&quot;&gt;&amp;lt;Proxy&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;mod/mod_proxy#proxymatch&quot;&gt;&amp;lt;ProxyMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; sections. There are some exceptions, however:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a0f38b29e3d285d850fe27fe67c6e07c392a5c" translate="yes" xml:space="preserve">
          <source>To find out which modules are compiled by default, run &lt;code&gt;./configure -h&lt;/code&gt; or &lt;code&gt;./configure --help&lt;/code&gt; and look under &lt;code&gt;Optional Features&lt;/code&gt;. Suppose you are interested in &lt;code&gt;mod_example1&lt;/code&gt; and &lt;code&gt;mod_example2&lt;/code&gt;, and you see this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea6bbdae62e9a105448b1f3ff5e3ed258499a74" translate="yes" xml:space="preserve">
          <source>To find which directives can be placed in &lt;code&gt;.htaccess&lt;/code&gt; files, check the Context of the directive. The server administrator further controls what directives may be placed in &lt;code&gt;.htaccess&lt;/code&gt; files by configuring the &lt;code&gt;&lt;a href=&quot;mod/core#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; directive in the main configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a49cbd0534da09ee945fdb5494038b42016a4ce" translate="yes" xml:space="preserve">
          <source>To force clients to authenticate using certificates for a particular URL, you can use the per-directory reconfiguration features of &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52790cdd9aebeffbbd71503170705cf5fe1d4eaf" translate="yes" xml:space="preserve">
          <source>To force clients to use non-certificate TLS-SRP cipher suites, use the following directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0071257f37c454108188b70b617c877ae742802" translate="yes" xml:space="preserve">
          <source>To generate custom DH parameters, use the &lt;code&gt;openssl dhparam 1024&lt;/code&gt; command. Alternatively, you can use the following standard 1024-bit DH parameters from &lt;a href=&quot;http://www.ietf.org/rfc/rfc2409.txt&quot;&gt;RFC 2409&lt;/a&gt;, section 6.2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b336ecbea6e4c598d870ad83fdf4eedcc03cea" translate="yes" xml:space="preserve">
          <source>To get here means no variant was selected (because none are acceptable to the browser). Return a 406 status (meaning &quot;No acceptable representation&quot;) with a response body consisting of an HTML document listing the available variants. Also set the HTTP &lt;code&gt;Vary&lt;/code&gt; header to indicate the dimensions of variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6e28fee84f7c9f29317c67fd091287a7928917" translate="yes" xml:space="preserve">
          <source>To get just the &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;-specific log messages, pipe the log file through grep:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3218dea781ae0951f1b4ac18b90767b4d309eec4" translate="yes" xml:space="preserve">
          <source>To get the most from this document, you should be familiar with the basics of HTTP, and have read the Users' Guides to &lt;a href=&quot;urlmapping&quot;&gt;Mapping URLs to the Filesystem&lt;/a&gt; and &lt;a href=&quot;content-negotiation&quot;&gt;Content negotiation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acb4ae56ff082edf87297ba6ab4e529d13a74e1" translate="yes" xml:space="preserve">
          <source>To give you an overview of the DSO features of Apache HTTP Server 2.x, here is a short and concise summary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd7912acc6f56a8635abc410e96bae4fb30d718" translate="yes" xml:space="preserve">
          <source>To guard against interception and reuse of the signature by an intruder at a later date, the signature contains a unique sequence number. This protects the bank from a fraudulent claim from Alice that she did not send the message -- only she could have signed it (non-repudiation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c2de7e53d544d80edabe53b8514c8818792d14" translate="yes" xml:space="preserve">
          <source>To have such configuration changes take effect, it is necessary to stop and then start the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7903a722014ee25818c678f5c1dfde4fe0ffdfe5" translate="yes" xml:space="preserve">
          <source>To have these changes persist restarts of the reverse proxy, ensure that &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#balancerpersist&quot;&gt;BalancerPersist&lt;/a&gt;&lt;/code&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2c40264a61b937cc87b76731a0b98391062faa" translate="yes" xml:space="preserve">
          <source>To illustrate this point we can think about the following two situations: serving a static asset (like a CSS file) versus serving content retrieved from FCGI/CGI or a proxied server. The former is predictable, namely the event MPM has full visibility on the end of the content and it can use events: the worker thread serving the response content can flush the first bytes until &lt;code&gt;EWOULDBLOCK&lt;/code&gt; or &lt;code&gt;EAGAIN&lt;/code&gt; is returned, delegating the rest to the listener. This one in turn waits for an event on the socket, and delegates the work to flush the rest of the content to the first idle worker thread. Meanwhile in the latter example (FCGI/CGI/proxied content) the MPM can't predict the end of the response and a worker thread has to finish its work before returning the control to the listener. The only alternative is to buffer the response in memory, but it wouldn't be the safest option for the sake of the server's stability and memory footprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb106dabf0302347475b2461d99e7e5a63d69d6" translate="yes" xml:space="preserve">
          <source>To illustrate: If rules are in /var/www/foo/.htaccess and a request for /foo/bar/baz is being processed, an expression like ^bar/baz$ would match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78dcdf1b1c3754a8fe8469fdb3fc37ab70dd4848" translate="yes" xml:space="preserve">
          <source>To implement authentication, you must also use the &lt;code&gt;&lt;a href=&quot;#authname&quot;&gt;AuthName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directives. In addition, the server must have an authentication-provider module such as &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; and an authorization module such as &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e448f80dd5f001a27e43f7e4fd984a2d3c344e" translate="yes" xml:space="preserve">
          <source>To include extensions associated with Handlers and/or Filters, set the &lt;code&gt;MultiviewsMatch&lt;/code&gt; directive to either &lt;code&gt;Handlers&lt;/code&gt;, &lt;code&gt;Filters&lt;/code&gt;, or both option keywords. If all other factors are equal, the smallest file will be served, &lt;em&gt;e.g.&lt;/em&gt; in deciding between &lt;code&gt;index.html.cgi&lt;/code&gt; of 500 bytes and &lt;code&gt;index.html.pl&lt;/code&gt; of 1000 bytes, the &lt;code&gt;.cgi&lt;/code&gt; file would win in this example. Users of &lt;code&gt;.asis&lt;/code&gt; files might prefer to use the Handler option, if &lt;code&gt;.asis&lt;/code&gt; files are associated with the &lt;code&gt;asis-handler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5ee247416354296edca1eccbb94a41cc7c6ea3" translate="yes" xml:space="preserve">
          <source>To include the example_hooks module in your server, follow the steps below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ff7256be7b2802543c31be166f36fede9db62a" translate="yes" xml:space="preserve">
          <source>To install Apache within the build system, several files are modified using the &lt;code&gt;awk.exe&lt;/code&gt; utility. awk was chosen since it is a very small download (compared with Perl or WSH/VB) and accomplishes the task of modifying configuration files upon installation. Brian Kernighan's &lt;a href=&quot;http://www.cs.princeton.edu/~bwk/btl.mirror/&quot;&gt;http://www.cs.princeton.edu/~bwk/btl.mirror/&lt;/a&gt; site has a compiled native Win32 binary, &lt;a href=&quot;http://www.cs.princeton.edu/~bwk/btl.mirror/awk95.exe&quot;&gt;http://www.cs.princeton.edu/~bwk/btl.mirror/awk95.exe&lt;/a&gt; which you must save with the name &lt;code&gt;awk.exe&lt;/code&gt; (rather than &lt;code&gt;awk95.exe&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9ecba37f809ee5b89772b759b597661ae33eda" translate="yes" xml:space="preserve">
          <source>To isolate the damage a wayward SSI file can cause, a server administrator can enable &lt;a href=&quot;../suexec&quot;&gt;suexec&lt;/a&gt; as described in the &lt;a href=&quot;#cgi&quot;&gt;CGI in General&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762f9ba58761fb86d477f8f118e72fc863495ee5" translate="yes" xml:space="preserve">
          <source>To keep the thundering herd at bay, the &lt;code&gt;CacheLock&lt;/code&gt; directive can be used to define a directory in which locks are created for URLs &lt;strong&gt;in flight&lt;/strong&gt;. The lock is used as a &lt;strong&gt;hint&lt;/strong&gt; by other requests to either suppress an attempt to cache (someone else has gone to fetch the entity), or to indicate that a stale entry is being refreshed (stale content will be returned in the mean time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7656f1aa9b97c31f048b70b023551d86f29da7b5" translate="yes" xml:space="preserve">
          <source>To keep up-to-date with what is actually going on against your server you have to check the &lt;a href=&quot;../logs&quot;&gt;Log Files&lt;/a&gt;. Even though the log files only reports what has already happened, they will give you some understanding of what attacks is thrown against the server and allow you to check if the necessary level of security is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380081a37b61006bcb2eb80e828b7d435fb22468" translate="yes" xml:space="preserve">
          <source>To log in to an FTP server by username and password, Apache uses different strategies. In absence of a user name and password in the URL altogether, Apache sends an anonymous login to the FTP server, &lt;em&gt;i.e.&lt;/em&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcc7c4c6458d7cc35d034239fd79caf299e2b8c" translate="yes" xml:space="preserve">
          <source>To make the server accept connections on port 80 for one interface, and port 8000 on another, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0644994ac5407f4a1993c8f198116b45b0e1c6fa" translate="yes" xml:space="preserve">
          <source>To make the server accept connections on two specified interfaces and port numbers, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d329fbd9ee949d381adbeb366fb07a3dd9cef1e" translate="yes" xml:space="preserve">
          <source>To make this practical, Active Directory supports the concept of a Global Catalog. This Global Catalog is a read only copy of selected attributes of all the Active Directory servers within the Active Directory forest. Querying the Global Catalog allows all the domains to be queried in a single query, without the query spanning servers over potentially slow links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b798e1ed517af1df1cc6f96e3ee1b4a7036db5" translate="yes" xml:space="preserve">
          <source>To mitigate this problem, the event MPM does two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157ca9928914dfe920691a84e2f951eda59cc8dc" translate="yes" xml:space="preserve">
          <source>To modify &lt;code&gt;Cache-Control&lt;/code&gt; directives other than &lt;code&gt;max-age&lt;/code&gt; (see &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot;&gt;RFC 2616 section 14.9&lt;/a&gt;), you can use the &lt;code&gt;&lt;a href=&quot;mod_headers#header&quot;&gt;Header&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833055c3d2ada90a879b0ee8cc8e9a0a009e146a" translate="yes" xml:space="preserve">
          <source>To override the default MPM choice, use the &lt;code&gt;--with-mpm=&lt;em&gt;NAME&lt;/em&gt;&lt;/code&gt; option of the &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script. &lt;em&gt;NAME&lt;/em&gt; is the name of the desired MPM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42292ef87e73ccf50a544056732eaf189cf530c6" translate="yes" xml:space="preserve">
          <source>To permit SSI on your server, you must have the following directive either in your &lt;code&gt;httpd.conf&lt;/code&gt; file, or in a &lt;code&gt;.htaccess&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50afa0be3febfa0df9150ce8ae7350ea94661603" translate="yes" xml:space="preserve">
          <source>To prevent confusion, ensure that all modules requiring NSS are configured with identical parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5002eaf49e591392243d74354ab74b55654c8d86" translate="yes" xml:space="preserve">
          <source>To prevent this error, &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; has to provide enough entropy to the PRNG to allow it to work correctly. This can be done via the &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl#sslrandomseed&quot;&gt;SSLRandomSeed&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a19c55a9d3596d8a8affa242cf47664f56ae9d7" translate="yes" xml:space="preserve">
          <source>To protect a particular URL with &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt;, you need to decide where you will store your &lt;var&gt;session&lt;/var&gt;, and you will need to decide what method you will use to authenticate. In this simple example, the login details will be stored in a session based on &lt;code&gt;&lt;a href=&quot;mod_session_cookie&quot;&gt;mod_session_cookie&lt;/a&gt;&lt;/code&gt;, and authentication will be attempted against a file using &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt;. If authentication is unsuccessful, the user will be redirected to the form login page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc3bec07d3e7768634f2aa02e9c9dd86d2fb4c8" translate="yes" xml:space="preserve">
          <source>To put a literal dollar sign into the value of your variable, you need to escape the dollar sign with a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2035b2ae6850f58febb8eb7b2758a63a7c54ef" translate="yes" xml:space="preserve">
          <source>To redirect &lt;code&gt;http&lt;/code&gt; URLs to &lt;code&gt;https&lt;/code&gt;, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f9539fd33e66de759e5792f6c29b599550686b" translate="yes" xml:space="preserve">
          <source>To redirect URLs under &lt;code&gt;/one&lt;/code&gt; to &lt;code&gt;http://one.example.com&lt;/code&gt;, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851a8592ff362b78a2962640d157735c1768d3fa" translate="yes" xml:space="preserve">
          <source>To redirect one hostname to another, for example &lt;code&gt;example.com&lt;/code&gt; to &lt;code&gt;www.example.com&lt;/code&gt;, see the &lt;a href=&quot;remapping#canonicalhost&quot;&gt;Canonical Hostnames&lt;/a&gt; recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9431f288991acc55125e462d53ae682c79e0f01b" translate="yes" xml:space="preserve">
          <source>To rewrite the Homepage of a site according to the ``&lt;code&gt;User-Agent:&lt;/code&gt;'' header of the request, you can use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1400c8adecc03c580561e64816c632709d8dcc3" translate="yes" xml:space="preserve">
          <source>To run Apache from the command line as a console application, use the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09df7bcd0dc662983a8bf628e3d06f68f05716f1" translate="yes" xml:space="preserve">
          <source>To run a really tight ship, you'll want to stop users from setting up &lt;code&gt;.htaccess&lt;/code&gt; files which can override security features you've configured. Here's one way to do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699144c468fd11494ee7f64644845fe7e6887000" translate="yes" xml:space="preserve">
          <source>To see which modules are currently compiled into the server, you can use the &lt;code&gt;-l&lt;/code&gt; command line option. You can also see what modules are loaded dynamically using the &lt;code&gt;-M&lt;/code&gt; command line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9f8bc4cba6c64c8f61632ca1e72f1c13319493" translate="yes" xml:space="preserve">
          <source>To select a dbm file rather than a text file, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77e88763e2912d42ef53efdc0ed488f58b9d297" translate="yes" xml:space="preserve">
          <source>To send a signal to the parent you should issue a command such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa1972d6987928d23dcd8a0e53fd7ed64679667" translate="yes" xml:space="preserve">
          <source>To simplify this creation of DSO files for Apache httpd modules (especially for third-party modules) a support program named &lt;code&gt;&lt;a href=&quot;programs/apxs&quot;&gt;apxs&lt;/a&gt;&lt;/code&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511983d852fe37015e3298db2c9450444df1a1d9" translate="yes" xml:space="preserve">
          <source>To simply map a URL to another server, we use the [P] flag, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c52e87c1510323ef72c04725156f66c3af6c23d" translate="yes" xml:space="preserve">
          <source>To solve this problem the &lt;code&gt;&lt;a href=&quot;#cachequickhandler&quot;&gt;CacheQuickHandler &lt;/a&gt;&lt;/code&gt; directive can be set to &lt;strong&gt;off&lt;/strong&gt;, and the server will process all phases normally handled by a non-cached request, including the &lt;strong&gt;authentication and authorisation&lt;/strong&gt; phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5473d5eef5c07786c8855a4cef0c088a9fdb0499" translate="yes" xml:space="preserve">
          <source>To specify a secure LDAP server, use &lt;em&gt;ldaps://&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;#authldapurl&quot;&gt;AuthLDAPURL&lt;/a&gt;&lt;/code&gt; directive, instead of &lt;em&gt;ldap://&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e57666f5c012b6d7bad1c272306d90ae4fc8a53" translate="yes" xml:space="preserve">
          <source>To start &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; with SSL support, you should edit your configuration file to include the relevant directives and then use the normal &lt;code&gt;apachectl start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab95d2342fed9c84740827db911feb4427e02c2b" translate="yes" xml:space="preserve">
          <source>To start Apache just type &lt;code&gt;apache&lt;/code&gt; at the console. This will load apache in the OS address space. If you prefer to load Apache in a protected address space you may specify the address space with the load statement as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afe4a03d3d28a805b9977127194b377c8746cb2" translate="yes" xml:space="preserve">
          <source>To stop an Apache service via the command line switches, use this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df710c46cd46d08d41a2d1278fd5b1929ed24dd8" translate="yes" xml:space="preserve">
          <source>To store items in the cache, &lt;code&gt;&lt;a href=&quot;mod/mod_cache_disk&quot;&gt;mod_cache_disk&lt;/a&gt;&lt;/code&gt; creates a 22 character hash of the URL being requested. This hash incorporates the hostname, protocol, port, path and any CGI arguments to the URL, as well as elements defined by the Vary header to ensure that multiple URLs do not collide with one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e4d4301c496c3de0bf2dc7248947a094b8bda" translate="yes" xml:space="preserve">
          <source>To summarize: there is no one good strategy on how to make best use of this feature of HTTP/2 and everyone is still experimenting. So, how do you experiment with it in Apache httpd?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d55c7f5a8d73597c5eb961e243f5e8118a1c50" translate="yes" xml:space="preserve">
          <source>To support such integration, &lt;code&gt;&lt;a href=&quot;mod_authz_dbd&quot;&gt;mod_authz_dbd&lt;/a&gt;&lt;/code&gt; exports an optional hook that will be run whenever a user's status is updated in the database. Other session management modules can then use the hook to implement functions that start and end client-side sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a9393b963e98e14c86c3919a99f0cb1c68d1a8" translate="yes" xml:space="preserve">
          <source>To take authorization a little further, authorization container directives such as &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt; allow logic to be applied so that the order in which authorization is handled can be completely controlled through the configuration. See &lt;a href=&quot;../mod/mod_authz_core#logic&quot;&gt;Authorization Containers&lt;/a&gt; for an example of how they may be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d589d2292e7fe720f4b7b77113e6564acabac351" translate="yes" xml:space="preserve">
          <source>To unconditionally set the &lt;code&gt;IndexOptions&lt;/code&gt; for a particular directory, clearing the inherited settings, specify keywords without any &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d61990bad2686a8b03df8833ef58da55dd05856" translate="yes" xml:space="preserve">
          <source>To unload Apache running in the OS address space just type the following at the console:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6577bb24f5019301626e06fb78c6c1882a7e0157" translate="yes" xml:space="preserve">
          <source>To upgrade across minor versions, start by finding the file &lt;code&gt;config.nice&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; directory of your installed server or at the root of the source tree for your old install. This will contain the exact &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; command line that you used to configure the source tree. Then to upgrade from one version to the next, you need only copy the &lt;code&gt;config.nice&lt;/code&gt; file to the source tree of the new version, edit it to make any desired changes, and then run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c71862e30cf7731f8f67a2d1991ffd508d3e94" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;mod_heartbeat&quot;&gt;mod_heartbeat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; must be either a static modules or, if a dynamic module, must be loaded before &lt;code&gt;&lt;a href=&quot;mod_heartbeat&quot;&gt;mod_heartbeat&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69054e97cf44134bfd981043149588f945cffda" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;mod_heartmonitor&quot;&gt;mod_heartmonitor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; must be either a static modules or, if a dynamic module, it must be loaded before &lt;code&gt;&lt;a href=&quot;mod_heartmonitor&quot;&gt;mod_heartmonitor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aeed9a030e20e6e2cfc2401094ef20527051ce7" translate="yes" xml:space="preserve">
          <source>To use MD5 Digest authentication, configure the location to be protected as shown in the below example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258a144d6cd7be0ecdf5ca997064538fc3096771" translate="yes" xml:space="preserve">
          <source>To use SSL, see the &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; directives &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedclientcert&quot;&gt;LDAPTrustedClientCert&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedglobalcert&quot;&gt;LDAPTrustedGlobalCert&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedmode&quot;&gt;LDAPTrustedMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60315d0a6bae435aacbbe5e68775fea19e13900" translate="yes" xml:space="preserve">
          <source>To use TLS, see the &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; directives &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedclientcert&quot;&gt;LDAPTrustedClientCert&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedglobalcert&quot;&gt;LDAPTrustedGlobalCert&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_ldap#ldaptrustedmode&quot;&gt;LDAPTrustedMode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7999b6592ecc8efe850b2db1e9bedff327e5b214" translate="yes" xml:space="preserve">
          <source>To use Visual C++ 6.0 or 7.0 (Studio 2000 .NET), the Platform SDK environment must be prepared using the &lt;code&gt;setenv.bat&lt;/code&gt; script (installed by the Platform SDK) before starting the command line build or launching the msdev/devenv GUI environment. Installing the Platform SDK for Visual Studio Express versions (2003 and later) should adjust the default environment appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5114853c0a33af0e1f36e620799dc56273508f" translate="yes" xml:space="preserve">
          <source>To use it with a libxml2-based module that isn't explicitly enabled for mod_xml2enc, you will have to configure the filter chain yourself. So to use it with a filter &lt;strong&gt;foo&lt;/strong&gt; provided by a module &lt;strong&gt;mod_foo&lt;/strong&gt; to improve the latter's i18n support with HTML and XML, you could use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f20d0be9d0f8ce9a0c1507d490e0cc006d2ffaa" translate="yes" xml:space="preserve">
          <source>To use one of these functions, create a &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; referencing the int function, and then use that in your &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050a6f474a5fdc6c7dfd2fbcc68597532ea9ff26" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt; MPM, add &lt;code&gt;--with-mpm=event&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script's arguments when building the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c81113e199927aa704f4f9c8d2ce564b597364" translate="yes" xml:space="preserve">
          <source>To use this MPM on FreeBSD, FreeBSD 5.3 or higher is recommended. However, it is possible to run this MPM on FreeBSD 5.2.1, if you use &lt;code&gt;libkse&lt;/code&gt; (see &lt;code&gt;man libmap.conf&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24736ae3b9422ad77cdb4357449ee81ed8ae0e9" translate="yes" xml:space="preserve">
          <source>To use this, the untainting regexps must be included in the prepared statements configured. The regexp follows immediately after the % in the prepared statement, and is enclosed in curly brackets {}. For example, if your application expects alphanumeric input, you can use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fa84af46bc9d835ddf906a29631f93fa380501" translate="yes" xml:space="preserve">
          <source>To utilize &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt;, specify &lt;code&gt;mod_dbd&lt;/code&gt; as the database type, or leave the field blank:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f2fbf54f9533373d73f3717638e0ede16bf739" translate="yes" xml:space="preserve">
          <source>To verify your configuration, first check, whether the stickyness is based on a cookie or on URL encoding. Next step would be logging the appropriate data in the access log by using an enhanced &lt;code&gt;&lt;a href=&quot;mod_log_config#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt;. The following fields are useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b49c9d742b1e014e3af8aeff5d8f5f1ac8e5c35" translate="yes" xml:space="preserve">
          <source>Today's date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ae9a69b52ee1d2d7ff3069401bb6b276d07830" translate="yes" xml:space="preserve">
          <source>Together with microsecond time stamps in the error log, &lt;code&gt;hook=all&lt;/code&gt; also lets you determine the times spent in the different parts of the request processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cd8a58c1edd9b705d833e869e749b1a1ed4386" translate="yes" xml:space="preserve">
          <source>Toggle how this module responds when another handler is configured</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562f741feaf7d5724c94bd871528311dd23f0f92" translate="yes" xml:space="preserve">
          <source>Toggle trailing slash redirects on or off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2205898b40d1e64bc7d4cb3f660785bc52cc5b9" translate="yes" xml:space="preserve">
          <source>Too Long, Didn't read: there are some new terms and gotchas that need to be kept in mind while reading this document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0550ef165018c701854ce35451ff03e4d05ed341" translate="yes" xml:space="preserve">
          <source>Total body sent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8aaa3b97807e085e8b2cf8271929f376a5a608" translate="yes" xml:space="preserve">
          <source>Total transferred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808f893e73cc981bc2c8b64ecc66ee450b38f6f8" translate="yes" xml:space="preserve">
          <source>Trace messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cc43b94efc06d02340423901b5e9e0a3cb68f9" translate="yes" xml:space="preserve">
          <source>Trace messages, dumping large amounts of data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e9a5452eaa72a6178ccbc740d56527c03e1f6f" translate="yes" xml:space="preserve">
          <source>TraceEnable Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076fae5ce92c7838f41e901cfce2782e4c2800c9" translate="yes" xml:space="preserve">
          <source>Tracing another filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e342ec72105b478f8ab15ca8109a00e1d2cbcc" translate="yes" xml:space="preserve">
          <source>TrackModified</source>
          <target state="translated">TrackModified</target>
        </trans-unit>
        <trans-unit id="fa804f9a3014420b29d46b417f19bba85ee5988e" translate="yes" xml:space="preserve">
          <source>Trade off processing speed and efficiency vs security against malicious privileges-aware code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4384a8b50ad5871427665a4bf0f449c32692b6eb" translate="yes" xml:space="preserve">
          <source>Traditionally on Unix systems, the home directory of a particular &lt;em&gt;user&lt;/em&gt; can be referred to as &lt;code&gt;~user/&lt;/code&gt;. The module &lt;code&gt;&lt;a href=&quot;mod/mod_userdir&quot;&gt;mod_userdir&lt;/a&gt;&lt;/code&gt; extends this idea to the web by allowing files under each user's home directory to be accessed using URLs such as the following.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e546a10c66eac0a0b6697bebdc418e8dbff2d71f" translate="yes" xml:space="preserve">
          <source>Trailing slashes should typically be removed from the URL of a &lt;code&gt;BalancerMember&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c01d3eccf80844f7e78cfe5f224fec7988b6e6" translate="yes" xml:space="preserve">
          <source>Transfer rate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2593c9997a65ff6676fc83cbe0f36eb62aed8480" translate="yes" xml:space="preserve">
          <source>TransferLog Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be78681cb8f6ab02e3f5e886135377df19211222" translate="yes" xml:space="preserve">
          <source>Translate name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070c55fb0e8c9df03ef10f227fb5d0ad18abb765" translate="yes" xml:space="preserve">
          <source>Translated path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d77c54a46e1f5e359072e16f3a7adf55b03628" translate="yes" xml:space="preserve">
          <source>Translates hex-encodings in the key back to special characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53e842744d0dcc800a03ec81e1d792f2f111acb" translate="yes" xml:space="preserve">
          <source>Translates special characters in the key to hex-encodings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8922aa56485915557c46b238eadaa911fe2c0592" translate="yes" xml:space="preserve">
          <source>Treat bad header lines as if they weren't sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7df62168598e2992f553cdb0698891521cfbe27" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;CondPattern&lt;/em&gt; as a plain string and compares it lexicographically to &lt;em&gt;TestString&lt;/em&gt;. True if &lt;em&gt;TestString&lt;/em&gt; is lexicographically equal to &lt;em&gt;CondPattern&lt;/em&gt; (the two strings are exactly equal, character for character). If &lt;em&gt;CondPattern&lt;/em&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt; (two quotation marks) this compares &lt;em&gt;TestString&lt;/em&gt; to the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52ff2cc031a2b32e6fc9c63e3a2a3aee51e391c" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;CondPattern&lt;/em&gt; as a plain string and compares it lexicographically to &lt;em&gt;TestString&lt;/em&gt;. True if &lt;em&gt;TestString&lt;/em&gt; lexicographically follows &lt;em&gt;CondPattern&lt;/em&gt;, or is equal to &lt;em&gt;CondPattern&lt;/em&gt; (the two strings are equal, character for character).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2894641dcc351b1f671c2acefbafcf1df275e2" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;CondPattern&lt;/em&gt; as a plain string and compares it lexicographically to &lt;em&gt;TestString&lt;/em&gt;. True if &lt;em&gt;TestString&lt;/em&gt; lexicographically follows &lt;em&gt;CondPattern&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f849061a576e92f5e56554b3c0c3178f6ef6b80" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;CondPattern&lt;/em&gt; as a plain string and compares it lexicographically to &lt;em&gt;TestString&lt;/em&gt;. True if &lt;em&gt;TestString&lt;/em&gt; lexicographically precedes &lt;em&gt;CondPattern&lt;/em&gt;, or is equal to &lt;em&gt;CondPattern&lt;/em&gt; (the two strings are equal, character for character).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8313350a917a324d514b0e2b4fea21fbcce5440" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;CondPattern&lt;/em&gt; as a plain string and compares it lexicographically to &lt;em&gt;TestString&lt;/em&gt;. True if &lt;em&gt;TestString&lt;/em&gt; lexicographically precedes &lt;em&gt;CondPattern&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30acd2557552568f711191985b51a54197ad2920" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;TestString&lt;/em&gt; as a pathname and tests whether or not it exists, and has executable permissions. These permissions are determined according to the underlying OS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d066d650da856e2c2862bf031a55c6da2107312" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;TestString&lt;/em&gt; as a pathname and tests whether or not it exists, and is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83f0672d6554869b085acd1eb74c19d5323f433" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;TestString&lt;/em&gt; as a pathname and tests whether or not it exists, and is a regular file with size greater than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c47b11c7502d14c8072c3f3e401a71e6e3c2f3" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;TestString&lt;/em&gt; as a pathname and tests whether or not it exists, and is a regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be133167d05621deb1637a9da002edeb97411fc0" translate="yes" xml:space="preserve">
          <source>Treats the &lt;em&gt;TestString&lt;/em&gt; as a pathname and tests whether or not it exists, and is a symbolic link. May also use the bash convention of &lt;strong&gt;-L&lt;/strong&gt; or &lt;strong&gt;-h&lt;/strong&gt; if there's a possibility of confusion such as when using the &lt;strong&gt;-lt&lt;/strong&gt; or &lt;strong&gt;-le&lt;/strong&gt; tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ca945cf18b95866ed10ccc7a74a1262ad706ea" translate="yes" xml:space="preserve">
          <source>Triple-DES encryption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d79ca7de6c78916866787338d051807ae13a3a3" translate="yes" xml:space="preserve">
          <source>Triple-DES with 168 bit key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a4c7f00283e3a20ad50644a2b7de2027e1ae2d" translate="yes" xml:space="preserve">
          <source>Triple-DES with SHA1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="e7671e24183a1bef4008213037f6a7ec10b44dee" translate="yes" xml:space="preserve">
          <source>Troubleshooting load balancer stickyness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9008135bc49400f326e9ca45a63a626bd4a4ae" translate="yes" xml:space="preserve">
          <source>True if string is a valid URL, accessible via all the server's currently-configured access controls for that path. This uses an internal subrequest to do the check, so use it with care - it can impact your server's performance!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39229ca01d32be512c0b372abaf3036235c9d942" translate="yes" xml:space="preserve">
          <source>True if string is a valid file, accessible via all the server's currently-configured access controls for that path. This uses an internal subrequest to do the check, so use it with care - it can impact your server's performance!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dad48b3aa7fd78217e248e12fabe06c03f9355f" translate="yes" xml:space="preserve">
          <source>True if string is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab48a95d87010b23ff91b2f8d3d3f5e56067199" translate="yes" xml:space="preserve">
          <source>True if string is not empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a77761ae94bac2a0104ac356c8ec11d5305bcba" translate="yes" xml:space="preserve">
          <source>Trusted (Load Balancer) Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d725c138651d1230e691502a875fbbe6b99038" translate="yes" xml:space="preserve">
          <source>Trying to start the server on a privileged port when not logged in as the root user; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b0cfd7bfe6127e6f846f339ea5739c54d52d8b" translate="yes" xml:space="preserve">
          <source>Trying to start the server when there is another instance of Apache or some other web server already bound to the same Port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ce75541918c8556fe2065df43b41e423b9d315" translate="yes" xml:space="preserve">
          <source>Tune the &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; directive to allow the server to handle the maximum number of simultaneous connections without running out of resources. See also the &lt;a href=&quot;perf-tuning&quot;&gt;performance tuning documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970b53a4b8a2efafdc75d8c56d35b38d6d1eb325" translate="yes" xml:space="preserve">
          <source>Tuning &lt;code&gt;AsyncRequestWorkerFactor&lt;/code&gt; requires knowledge about the traffic handled by httpd in each specific use case, so changing the default value requires extensive testing and data gathering from &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196c8fa95a0c5ba2a8bb6a16331c39559ad41c55" translate="yes" xml:space="preserve">
          <source>Tuning of this parameter should only be necessary on very busy sites. Setting this parameter to a large number is almost always a bad idea.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a7561c947564921287828de112d8e6da157318" translate="yes" xml:space="preserve">
          <source>Tuning of this parameter should only be necessary on very busy sites. Setting this parameter to a large number is almost always a bad idea. If you are trying to set the value equal to or lower than &lt;code&gt;&lt;a href=&quot;#minspareservers&quot;&gt;MinSpareServers&lt;/a&gt;&lt;/code&gt;, Apache HTTP Server will automatically adjust it to &lt;code&gt;MinSpareServers&lt;/code&gt;&lt;code&gt;+ 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cfb63fea67236481fa9087e010f08f21ad5e07" translate="yes" xml:space="preserve">
          <source>Turn on debugging and compile time warnings and load all compiled modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71d317718fcf5a9a61b3b9c263ea1125a04d4ba" translate="yes" xml:space="preserve">
          <source>Turn the echo server on or off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474b0585f4d81e20c4918ffc9c1c47c63541b070" translate="yes" xml:space="preserve">
          <source>Turning &lt;code&gt;AllowEncodedSlashes&lt;/code&gt;&lt;code&gt;On&lt;/code&gt; is mostly useful when used in conjunction with &lt;code&gt;PATH_INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3750b7873b224ec7b935b44d7693f8b95a5ef5eb" translate="yes" xml:space="preserve">
          <source>Turning off the trailing slash redirect may result in an information disclosure. Consider a situation where &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt; is active (&lt;code&gt;Options +Indexes&lt;/code&gt;) and &lt;code&gt;&lt;a href=&quot;#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; is set to a valid resource (say, &lt;code&gt;index.html&lt;/code&gt;) and there's no other special handler defined for that URL. In this case a request with a trailing slash would show the &lt;code&gt;index.html&lt;/code&gt; file. &lt;strong&gt;But a request without trailing slash would list the directory contents&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5427e53ad3282340f5fa474ad97edf34ef2370c" translate="yes" xml:space="preserve">
          <source>Turns on SDK-specific LDAP debug options that generally cause the LDAP SDK to log verbose trace information to the main Apache error log. The trace messages from the LDAP SDK provide gory details that can be useful during debugging of connectivity problems with backend LDAP servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544122fc543d4d27d0402cc20d3cdb9b359e6a4f" translate="yes" xml:space="preserve">
          <source>Turns on or off extra pre-parsing of metadata in HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85a660e05810d60d2fc2a2d0c12fd9dd8f8c757" translate="yes" xml:space="preserve">
          <source>Turns on/off Meta file processing on a per-directory basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572e41405dabcbcb4f5c7357020b31e24773b26d" translate="yes" xml:space="preserve">
          <source>Turns the proxy_html filter on or off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="c3ff1f5d78fce5242f3035d1f2cb75d0934646a7" translate="yes" xml:space="preserve">
          <source>Two directives set hard limits on the number of active child processes and the number of server threads in a child process, and can only be changed by fully stopping the server and then starting it again. &lt;code&gt;&lt;a href=&quot;mpm_common#serverlimit&quot;&gt;ServerLimit &lt;/a&gt;&lt;/code&gt; is a hard limit on the number of active child processes, and must be greater than or equal to the &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; directive divided by the &lt;code&gt;&lt;a href=&quot;mpm_common#threadsperchild&quot;&gt; ThreadsPerChild&lt;/a&gt;&lt;/code&gt; directive. &lt;code&gt;&lt;a href=&quot;mpm_common#threadlimit&quot;&gt;ThreadLimit&lt;/a&gt;&lt;/code&gt; is a hard limit of the number of server threads, and must be greater than or equal to the &lt;code&gt;&lt;a href=&quot;mpm_common#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffdcbf97222df160f036532acf2ad673889d44a" translate="yes" xml:space="preserve">
          <source>Two special values for this are &lt;var&gt;directory&lt;/var&gt;, which uses the directory context of the request as a string, and &lt;var&gt;server&lt;/var&gt; which uses the virtual host name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceef5832db9f1bf9c91e4bfe23d8196a9b64542" translate="yes" xml:space="preserve">
          <source>Two useful configuration schemes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea09d621768f6e418bcf166744b5a590a61ef14b" translate="yes" xml:space="preserve">
          <source>Two-state key/value shared object caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="130823c964329b744ae899cdfb174f3ff394c2f4" translate="yes" xml:space="preserve">
          <source>Type Of Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612d05b633162ff29d69b22d8c50596ca85d1dd6" translate="yes" xml:space="preserve">
          <source>Type map files should have the same name as the resource which they are describing, followed by the extension &lt;code&gt;.var&lt;/code&gt;. In the examples shown below, the resource is named &lt;code&gt;foo&lt;/code&gt;, so the type map file is named &lt;code&gt;foo.var&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fe15b42d04e7efdb397282c33468e43e7445e7" translate="yes" xml:space="preserve">
          <source>Type maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3106ffe2cde6c3150d342a301b18e5eb61ad3d0" translate="yes" xml:space="preserve">
          <source>Type of ACME challenge used to prove domain ownership.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c4ba266af64c3d4cd567591d6f590d5bd72cf1" translate="yes" xml:space="preserve">
          <source>Type of Client Certificate verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615b911caafe7f02b509fe25cffb342c17dff1d2" translate="yes" xml:space="preserve">
          <source>Type of DBM file (SDBM, GDBM, DB, or &quot;default&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287aba972f46baa0183867ce41722e5396278c29" translate="yes" xml:space="preserve">
          <source>Type of Packet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b4a746dbef337cdbf75a530920be94eb008f70" translate="yes" xml:space="preserve">
          <source>Type of pass phrase dialog for encrypted private keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1625a1cb2774384e1aea82ff92f26f59fd10f202" translate="yes" xml:space="preserve">
          <source>Type of remote server Certificate verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d878c88c6bcd6ca14b612ed5bb805a60a2e220f" translate="yes" xml:space="preserve">
          <source>Type of the global/inter-process SSL Session Cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465871df0034df0da57ba1a9445ee210be7aa78a" translate="yes" xml:space="preserve">
          <source>Type of user authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353adee0f539314a71b700ed2341dc7a45f679a8" translate="yes" xml:space="preserve">
          <source>Types of Configuration Section Containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f57f6e35bda65357e7a736d4afaf1ecfe029671" translate="yes" xml:space="preserve">
          <source>Types of directives that are allowed in &lt;code&gt;.htaccess&lt;/code&gt; files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824a7da375016dbb41ec05795d7c1c47deba752a" translate="yes" xml:space="preserve">
          <source>TypesConfig Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98102d2f4af9b93a203b000e12715e3ccd9ec5c" translate="yes" xml:space="preserve">
          <source>Typically if a user requests a resource without a trailing slash, which points to a directory, &lt;code&gt;&lt;a href=&quot;mod_dir&quot;&gt;mod_dir&lt;/a&gt;&lt;/code&gt; redirects him to the same resource, but &lt;em&gt;with&lt;/em&gt; trailing slash for some good reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf109dfb65fe4587c1cf283360fbf1341c70ef2" translate="yes" xml:space="preserve">
          <source>Typically the module will be configured as so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9b502446474b568c0d36fd078ae604992db123" translate="yes" xml:space="preserve">
          <source>Typically the module will be configured as so;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3568e74e1ad6bbdb8c37358940d6fc97e1b1ed31" translate="yes" xml:space="preserve">
          <source>Typically, a document called &lt;code&gt;index.html&lt;/code&gt; will be served when a directory is requested without a file name being specified. For example, if &lt;code&gt;DocumentRoot&lt;/code&gt; is set to &lt;code&gt;/var/www/html&lt;/code&gt; and a request is made for &lt;code&gt;http://www.example.com/work/&lt;/code&gt;, the file &lt;code&gt;/var/www/html/work/index.html&lt;/code&gt; will be served to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cf5e6327cf6e6538a10cd06005e5ecae9d0a38" translate="yes" xml:space="preserve">
          <source>T|type</source>
          <target state="translated">T|type</target>
        </trans-unit>
        <trans-unit id="32ef01396e42abc1f263a5b3398fdb19556b7431" translate="yes" xml:space="preserve">
          <source>UNC paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4262b4b336d0119f98aa02dd68750d73945cd675" translate="yes" xml:space="preserve">
          <source>UNCHECKOUT</source>
          <target state="translated">UNCHECKOUT</target>
        </trans-unit>
        <trans-unit id="908843169ee7bda362d6ef5286dc014ee824f846" translate="yes" xml:space="preserve">
          <source>UNLOCK</source>
          <target state="translated">UNLOCK</target>
        </trans-unit>
        <trans-unit id="52c6c1812015585dc1092393a1f244f60d68c60a" translate="yes" xml:space="preserve">
          <source>UPDATE</source>
          <target state="translated">UPDATE</target>
        </trans-unit>
        <trans-unit id="535642d55022835824a32fddeb814b6614eb90c6" translate="yes" xml:space="preserve">
          <source>URI Mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa3741ac5898eea823ba4ab3c035108a14cae3c" translate="yes" xml:space="preserve">
          <source>URIs from clients can't be mapped, such as with the &lt;code&gt;ProxyPass&lt;/code&gt; used with FastCGI responders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6774dfcefd05f2417727433a9029ab969c55ab" translate="yes" xml:space="preserve">
          <source>URIs in this file are relative to the location of the type map file. Usually, these files will be located in the same directory as the type map file, but this is not required. You may provide absolute or relative URIs for any file located on the same server as the map file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2423519dbb51265337f3714ca5660d2c024bd60b" translate="yes" xml:space="preserve">
          <source>URIs that are in the same protection space for digest authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2497da8c1e8f3017cb461e9ead3580ed94a9004a" translate="yes" xml:space="preserve">
          <source>URL Aliasing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca15fa2142760334a2798a11c8b78acf1229a45" translate="yes" xml:space="preserve">
          <source>URL Redirection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c919eda41ea0d09dc4373f05b23a1ec622e04f94" translate="yes" xml:space="preserve">
          <source>URL Rewriting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304856a39b09bddcc5eab947bdaf620019c824a6" translate="yes" xml:space="preserve">
          <source>URL Rewriting with mod_rewrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9328508222e4233ca14d21d6efb610ca868a3d2c" translate="yes" xml:space="preserve">
          <source>URL references relative to the Referer: information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252e22c1fe5164dfdf67a2d7533c44502234a9f7" translate="yes" xml:space="preserve">
          <source>URL specifying the LDAP search parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce579a8b086fb437f6192e3a98be2a9a900db2c3" translate="yes" xml:space="preserve">
          <source>URL-based sharding across multiple backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572acc826b5cc86146d30161d88c492d384c5120" translate="yes" xml:space="preserve">
          <source>URL-path</source>
          <target state="translated">URL-path</target>
        </trans-unit>
        <trans-unit id="1a8c2c8daaadc4fed6bd196801e53909710da195" translate="yes" xml:space="preserve">
          <source>URLs can begin with a slash (/) for local web-paths (relative to the &lt;code&gt;&lt;a href=&quot;#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt;), or be a full URL which the client can resolve. Alternatively, a message can be provided to be displayed by the browser. Note that deciding whether the parameter is an URL, a path or a message is performed before any expression is parsed. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a86809204b9eb87dfff3cb2c76f548e30f74894" translate="yes" xml:space="preserve">
          <source>UWSGI gateway module for &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acccefd8d11359e59ad4ed472d2d476e53d39965" translate="yes" xml:space="preserve">
          <source>Ultimately, every stream depends on the &lt;em&gt;root&lt;/em&gt; stream which gets all the bandwidth available, but never sends anything. So all its bandwidth is distributed by weight among its children. Which either have data to send or distribute the bandwidth to their own children. And so on. If none of the children have data to send, that bandwidth get distributed somewhere else according to the same rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae069022daa8cf2f9c10bfb675fca326b3af9d0e" translate="yes" xml:space="preserve">
          <source>Ultimately, the security of the TLS connection is determined by the server configuration directives for &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29c2d4a1e91040c9d4889c5b2c13fe0de94587c" translate="yes" xml:space="preserve">
          <source>UnDefine Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca09f5dbf89ea3eafb5ab27f217efe0b06a097c4" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cbf6795a0720a0a94088dbbf8156ccd08cff96" translate="yes" xml:space="preserve">
          <source>Unary operators take one argument and have the form &quot;&lt;code&gt;-[a-zA-Z]&lt;/code&gt;&quot;, i.e. a minus and one character. The name &lt;em&gt;is&lt;/em&gt; case sensitive. Modules may register additional unary operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dc99c135c728be6b2dd94320941652f9b7df53" translate="yes" xml:space="preserve">
          <source>Uncommenting this &lt;code&gt;Include&lt;/code&gt; line will enable this feature, and provide language-negotiated error messages, based on the language preference set in the client browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b865e1ccc7dc82e74ac1164b10f13eb942aab8c3" translate="yes" xml:space="preserve">
          <source>UndefMacro Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ed1373b1750bb1d2c334614f3df969f01c47af" translate="yes" xml:space="preserve">
          <source>Undefine a macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a13a0ebb99d34b7ea00b2c12fce85f5bfc4b78e" translate="yes" xml:space="preserve">
          <source>Undefine the existence of a variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10837cab362d86a5e54ff0b719dfe9db4142864" translate="yes" xml:space="preserve">
          <source>Under HTTP/1.1 load it will likely cause the creation of up to &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; connections to the FCGI backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a1157bd1d680b597c0bd7e1eef0ed43a3bd71f" translate="yes" xml:space="preserve">
          <source>Under HTTP/2 load, due to how &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; is implemented, there are additional h2 worker threads that may force the creation of other backend connections. The overall count of connections in the pools may raise to more than &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410bebc1497e5083ec2348210769e9d65d7793b0" translate="yes" xml:space="preserve">
          <source>Under certain circumstances, content generators might create content in small chunks. In order to promote memory reuse, in memory chunks are always 8k in size, regardless of the size of the chunk itself. When many small chunks are generated by a request, this can create a large memory footprint while the request is being processed, and an unnecessarily large amount of data on the wire. The addition of a buffer collapses the response into the fewest chunks possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b89a7126d9a36f75b767d46682b9ec4e1639e2" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, a file filtered by &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; may contain elements that are either dynamically generated, or that may have changed independently of the original file. As a result, by default the &lt;code&gt;Last-Modified&lt;/code&gt; header is stripped from the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85578f038078576ed54428d5d20efba93ff680ff" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, a file filtered by &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; may contain elements that are either dynamically generated, or that may have changed independently of the original file. As a result, by default the server is asked not to generate an &lt;code&gt;ETag&lt;/code&gt; header for the response by adding &lt;code&gt;no-etag&lt;/code&gt; to the request notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768aa8eddcebe19fd0cce5dd0ea5f9fc7cea955e" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, request handlers such as the default handler for static files will discard the request body when it is not needed by the request handler. As a result, filters such as mod_include are limited to making &lt;code&gt;GET&lt;/code&gt; requests only when including other URLs as subrequests, even if the original request was a &lt;code&gt;POST&lt;/code&gt; request, as the discarded request body is no longer available once filter processing is taking place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2120d3cb8999960c184f3989bd7bca7e52cd73c" translate="yes" xml:space="preserve">
          <source>Under normal conditions, the value should not be changed from the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3139dc3828cd21e146f9a6fa5159c769b4725c37" translate="yes" xml:space="preserve">
          <source>Under normal operation, &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will respond to and can be controlled by the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot;&gt;Cache-Control&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32&quot;&gt;Pragma&lt;/a&gt; headers sent from a client in a request, or from a server within a response. Under exceptional circumstances, &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; can be configured to override these headers and force site specific behaviour, however such behaviour will be limited to this cache only, and will not affect the operation of other caches that may exist between the client and server, and as a result is not recommended unless strictly necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0006d1e32b2b9242447a4926776968ff8a2f3bc" translate="yes" xml:space="preserve">
          <source>Under some circumstances, the server must spool request bodies to disk to satisfy the requested handling of request bodies. For example, this spooling will occur if the original body was sent with chunked encoding (and is large), but the administrator has asked for backend requests to be sent with Content-Length or as HTTP/1.0. This spooling can also occur if the request body already has a Content-Length header, but the server is configured to filter incoming request bodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f382b0df66049577fb119c5e1ad1f5dc385ad40e" translate="yes" xml:space="preserve">
          <source>Under the default mode of cache operation, the cache runs as a quick handler, short circuiting the majority of server processing and offering the highest cache performance available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb702a57626c1241070ba66e3cac145424c1d3eb" translate="yes" xml:space="preserve">
          <source>Underlying peer IP address and port of the connection (see the &lt;code&gt;&lt;a href=&quot;mod_remoteip&quot;&gt;mod_remoteip&lt;/a&gt;&lt;/code&gt; module)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c66e7f581b0cbb54c3cd8850d9abd2333847c51" translate="yes" xml:space="preserve">
          <source>Underlying peer IP address of the connection (see the &lt;code&gt;&lt;a href=&quot;mod_remoteip&quot;&gt;mod_remoteip&lt;/a&gt;&lt;/code&gt; module).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251aa3aac909060381f757df356a7a2adda33479" translate="yes" xml:space="preserve">
          <source>Understanding SSL requires an understanding of cryptographic algorithms, message digest functions (aka. one-way or hash functions), and digital signatures. These techniques are the subject of entire books (see for instance [&lt;a href=&quot;#AC96&quot;&gt;AC96&lt;/a&gt;]) and provide the basis for privacy, integrity, and authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774ce89a80bf3b68d6addd6d79403ff98662a3de" translate="yes" xml:space="preserve">
          <source>Understanding the Cache-Store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a65c22ae3e2fdb67baa5a8173a144cc8f3b046" translate="yes" xml:space="preserve">
          <source>Undoes the effect of a &lt;code&gt;&lt;a href=&quot;#define&quot;&gt;Define&lt;/a&gt;&lt;/code&gt; or of passing a &lt;code&gt;-D&lt;/code&gt; argument to &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9327dd8ecfe0bc1796a12cfcd800c9b5f8e983f" translate="yes" xml:space="preserve">
          <source>Unescape %hex encoded string, leaving encoded slashes alone; return empty string if %00 is found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2382afaad1cca3f3e56e2165c99c3a388acd3d48" translate="yes" xml:space="preserve">
          <source>Unique Identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="1d6f60ad6807aed229baed65f8088415c78e4bdb" translate="yes" xml:space="preserve">
          <source>Unix Domain Socket (UDS) support added in 2.4.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65acb1490ec3fdf8cd34c51c1cf32b51c6c70d2a" translate="yes" xml:space="preserve">
          <source>Unix Systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a61fe8d431a8420ae764b60390c4d7f2940da31" translate="yes" xml:space="preserve">
          <source>Unix example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e120c4aa47b4bf36ab9043fbdf1d26d4d53842cd" translate="yes" xml:space="preserve">
          <source>Unix only. Uses the traditional Unix &lt;code&gt;crypt(3)&lt;/code&gt; function with a randomly-generated 32-bit salt (only 12 bits used) and the first 8 characters of the password. Insecure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797f223f5cd30cf21120a5e052bfecb165c97cee" translate="yes" xml:space="preserve">
          <source>Unix threaded MPMs only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19450dbe0a6e0010921dda4d307a61720e8f1292" translate="yes" xml:space="preserve">
          <source>Unless you fully understand suexec, you should not be using it. To disable suexec, simply remove (or rename) the &lt;code&gt;&lt;a href=&quot;../programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; binary pointed to by &lt;code&gt;SUEXEC_BIN&lt;/code&gt; and then restart the server. If, after reading about &lt;a href=&quot;../suexec&quot;&gt;suexec&lt;/a&gt;, you still wish to use it, then run &lt;code&gt;suexec -V&lt;/code&gt; to find the location of the suexec log file, and use that log file to find what policy you are violating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a059c7529b3302fb250ffd4f736d119c39bc659e" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;http://httpd.apache.org/mod_fcgid/&quot;&gt;mod_fcgid&lt;/a&gt; and &lt;a href=&quot;http://www.fastcgi.com/&quot;&gt;mod_fastcgi&lt;/a&gt;, &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; has no provision for starting the application process; &lt;code&gt;&lt;a href=&quot;../programs/fcgistarter&quot;&gt;fcgistarter&lt;/a&gt;&lt;/code&gt; is provided (on some platforms) for that purpose. Alternatively, external launching or process management may be available in the FastCGI application framework in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840d183ca87f36c98ef0880d7482992d87f0e99f" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;mod_charset_lite&quot;&gt;mod_charset_lite&lt;/a&gt;&lt;/code&gt;, mod_xml2enc is designed to work with data whose encoding cannot be known in advance and thus configured. It therefore uses 'sniffing' techniques to detect the encoding of HTTP data as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52bed01a250ebca05166315a8fbcf39dfb32fcd" translate="yes" xml:space="preserve">
          <source>Unlike a simple two state key/value cache where the content disappears completely when no longer fresh, an HTTP cache includes a mechanism to retain stale content, and to ask the origin server whether this stale content has changed and if not, make it fresh again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f8d06118f29eef021ef07fb3f7db8340aee133" translate="yes" xml:space="preserve">
          <source>Unlike perchild, &lt;code&gt;&lt;a href=&quot;mod_privileges&quot;&gt;mod_privileges&lt;/a&gt;&lt;/code&gt; is not itself an MPM. It works &lt;em&gt;within&lt;/em&gt; a processing model to set privileges and User/Group &lt;em&gt;per request&lt;/em&gt; in a running process. It is therefore not compatible with a threaded MPM, and will refuse to run under one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef4684598e5eb818af4b54d338b5f2711972b22" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;SessionCryptoPassphrase&lt;/code&gt; directive, the keys are not exposed within the httpd configuration and can be hidden by protecting the file appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49518eaa02c67e310930e5d20b2c6a31ff7e8bee" translate="yes" xml:space="preserve">
          <source>UnsetEnv</source>
          <target state="translated">UnsetEnv</target>
        </trans-unit>
        <trans-unit id="17b896f27689d4707adc7b33e08a332f87002fd1" translate="yes" xml:space="preserve">
          <source>UnsetEnv Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa676fad2cfb519924eab9866a2c045b649237b" translate="yes" xml:space="preserve">
          <source>Unsupported Encodings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db76dcde34aff2fff78a505e543bb646a74e27e8" translate="yes" xml:space="preserve">
          <source>Unzip the binary download file to the root of the &lt;code&gt;SYS:&lt;/code&gt; volume (may be installed to any volume)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fa28794ae11a456e6617a678fe37f237c51260" translate="yes" xml:space="preserve">
          <source>Update of TLS 1.0 to add protection against Cipher block chaining (CBC) attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dac54084b7f5afac8075692590fad266bb958e9" translate="yes" xml:space="preserve">
          <source>Update of TLS 1.1 deprecating MD5 as hash, and adding incompatibility to SSL so it will never negotiate the use of SSLv2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9db167f3ce364af0b7e764794d0de625a93d8dd" translate="yes" xml:space="preserve">
          <source>Updated Microsoft Windows Platform SDK, February 2003 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dd3a1d8ed51cf30314c15a934d4cae0718aa5a" translate="yes" xml:space="preserve">
          <source>Upgrading</source>
          <target state="translated">Upgrading</target>
        </trans-unit>
        <trans-unit id="ddddb814d628f115c9ad740b29435e854d1ca264" translate="yes" xml:space="preserve">
          <source>Upgrading from Apache HTTP Server 2.2 Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd06e7c9297770b28d518bfbd8d60fca78794c7" translate="yes" xml:space="preserve">
          <source>Upgrading from one minor version to the next (for example, from 2.2.55 to 2.2.57) is easier. The &lt;code&gt;make install&lt;/code&gt; process will not overwrite any of your existing documents, log files, or configuration files. In addition, the developers make every effort to avoid incompatible changes in the &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; options, run-time configuration, or the module API between minor versions. In most cases you should be able to use an identical &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; command line, an identical configuration file, and all of your modules should continue to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77437a6a78eef28946b47fc879888798b29e18b1" translate="yes" xml:space="preserve">
          <source>Upgrading to 2.4 from 2.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762afa4dc77003d1898619977996501879337c3c" translate="yes" xml:space="preserve">
          <source>Upon accepting the connection, the listener thread wakes up a worker thread to do the request processing. In this trace, the worker thread that handles the request is mapped to LWP #65.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9926be4bb05ff566722830339189d952e91ede3c" translate="yes" xml:space="preserve">
          <source>Upon startup of httpd, it looks for the file &lt;code&gt;&lt;a href=&quot;programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; in the directory defined by the &lt;code&gt;--sbindir&lt;/code&gt; option (default is &quot;/usr/local/apache/sbin/suexec&quot;). If httpd finds a properly configured suEXEC wrapper, it will print the following message to the error log:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b419730af22771bd11cf1418dc8f351d2d123a" translate="yes" xml:space="preserve">
          <source>Upper limit on configurable number of processes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085e9ff72925c4b107e484e381a8ebbae47317c9" translate="yes" xml:space="preserve">
          <source>Usable in directory context in 2.3.3 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="de588646df16f9419dd97e9327b5a5f7d6cffcaa" translate="yes" xml:space="preserve">
          <source>Usage Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950d9c1aee5a0b8ac1664c8a9f40a8cddde14c8b" translate="yes" xml:space="preserve">
          <source>Usage examples</source>
          <target state="translated">使用实例</target>
        </trans-unit>
        <trans-unit id="f97b9157ae5ad3cdbee97d0240a41b3bb82d69d5" translate="yes" xml:space="preserve">
          <source>Usage is basically similar to &lt;code&gt;&lt;a href=&quot;#proxypassreverse&quot;&gt;ProxyPassReverse&lt;/a&gt;&lt;/code&gt;, but instead of rewriting headers that are a URL, this rewrites the &lt;code&gt;domain&lt;/code&gt; string in &lt;code&gt;Set-Cookie&lt;/code&gt; headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a639bcd17ebccc1985bbeb0e6ab64c278e4a072" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;Location&amp;gt;&lt;/code&gt; to apply directives to content that lives outside the filesystem. For content that lives in the filesystem, use &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;. An exception is &lt;code&gt;&amp;lt;Location &quot;/&quot;&amp;gt;&lt;/code&gt;, which is an easy way to apply a configuration to the entire server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5693a71b145b8b367d0b06b0dc6b4a169c9852" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;crypt()&lt;/code&gt; encryption for passwords. The default on all platforms but Windows and Netware. Though possibly supported by &lt;code&gt;htdbm&lt;/code&gt; on all platforms, it is not supported by the &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; server on Windows and Netware. This algorithm is &lt;strong&gt;insecure&lt;/strong&gt; by today's standards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3002d2c40cb3e3e421f99700683da82833c9ff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;crypt()&lt;/code&gt; encryption for passwords. This is not supported by the &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; server on Windows and Netware. This algorithm limits the password length to 8 characters. This algorithm is &lt;strong&gt;insecure&lt;/strong&gt; by today's standards. It used to be the default algorithm until version 2.2.17.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269c74cbf596690e82e2e606112127fa8c545a9d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;mode=output&lt;/code&gt; (the default) for filters which process the response. Use &lt;code&gt;mode=input&lt;/code&gt; for filters which process the request. &lt;code&gt;mode=input&lt;/code&gt; is available in Apache 2.1 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08780f7560031c6c20c5dde3e42e3cb2ea5f43bc" translate="yes" xml:space="preserve">
          <source>Use Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6f372677efe53441389a4293a26b974358f81c" translate="yes" xml:space="preserve">
          <source>Use MD5 encryption for passwords. On Windows and Netware, this is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfb69883215c0166283352fdd63de8c1ba96a2f" translate="yes" xml:space="preserve">
          <source>Use MD5 encryption for passwords. This is the default (since version 2.2.18).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89ff2d77bd3a9a58017ee9b6b882927abb0285e" translate="yes" xml:space="preserve">
          <source>Use POSIX extended Regular Expressions. Only applicable with R.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231441aa65331a3f8b524fc13eeb916e7b12b468" translate="yes" xml:space="preserve">
          <source>Use Regular Expression matching-and-replace. &lt;code&gt;from-pattern&lt;/code&gt; is a regexp, and &lt;code&gt;to-pattern&lt;/code&gt; a replacement string that may be based on the regexp. Regexp memory is supported: you can use brackets () in the &lt;code&gt;from-pattern&lt;/code&gt; and retrieve the matches with $1 to $9 in the &lt;code&gt;to-pattern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18abc5d5e335eb5d8bacf271545a25817b83c9a" translate="yes" xml:space="preserve">
          <source>Use SHA encryption for passwords. Facilitates migration from/to Netscape servers using the LDAP Directory Interchange Format (ldif). This algorithm is &lt;strong&gt;insecure&lt;/strong&gt; by today's standards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb70ab11c127b6f2c83cf4063b9a63fe0074c33" translate="yes" xml:space="preserve">
          <source>Use a case-insensitive match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd465c8702682a63c5176a7c867e83e1f2a3654f" translate="yes" xml:space="preserve">
          <source>Use a circular list of filenames without timestamps. With -n 3, the series of log files opened would be &quot;logfile&quot;, &quot;logfile.1&quot;, &quot;logfile.2&quot;, then overwriting &quot;logfile&quot;. Available in 2.4.5 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9169376cd9801e6bdcf0f0c79749db3c5480acc4" translate="yes" xml:space="preserve">
          <source>Use a complete list of options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c993019331704737a050c847e49ffe0d561787a7" translate="yes" xml:space="preserve">
          <source>Use a http proxy to connect to the MDCertificateAuthority. Define this if your webserver can only reach the internet with a forward proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56af3238c208cda925f5035ad83f97cbcaa36859" translate="yes" xml:space="preserve">
          <source>Use a macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4dabb916e9b4212125b9f068766a929dd63c98" translate="yes" xml:space="preserve">
          <source>Use a nonce within OCSP queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58960c9ca73f4be14c4f43ca66610ef256d9029" translate="yes" xml:space="preserve">
          <source>Use a proxy server for the requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef53908f01c69cbbbf3869289f90a27cd50a30c1" translate="yes" xml:space="preserve">
          <source>Use a single daemon when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deaa0a914b9e4274b8dd53123beaf3d17fc50a63" translate="yes" xml:space="preserve">
          <source>Use batch mode; &lt;em&gt;i.e.&lt;/em&gt;, get the password from the command line rather than prompting for it. This option should be used with extreme care, since &lt;strong&gt;the password is clearly visible&lt;/strong&gt; on the command line. For script use see the &lt;code&gt;-i&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1c62ce39a25aefaa793b62ff746356c67473e2" translate="yes" xml:space="preserve">
          <source>Use batch mode; &lt;em&gt;i.e.&lt;/em&gt;, get the password from the command line rather than prompting for it. This option should be used with extreme care, since &lt;strong&gt;the password is clearly visible&lt;/strong&gt; on the command line. For script use see the &lt;code&gt;-i&lt;/code&gt; option. Available in 2.4.4 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4371408e07cce77713ae208b4d82832bd1fb35bf" translate="yes" xml:space="preserve">
          <source>Use bcrypt encryption for passwords. This is currently considered to be very secure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f612e841077cc872a24e81c08e6bf5c63f2e7656" translate="yes" xml:space="preserve">
          <source>Use incoming Host HTTP request header for proxy request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d545374a02d6d86e0b9a077721f9a1b62274fa4f" translate="yes" xml:space="preserve">
          <source>Use memory-mapping to read files during delivery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b798f13a4e4e9d1b02a24f7b76f78d8748ecb4" translate="yes" xml:space="preserve">
          <source>Use multiple daemons when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aac443414afab5f8fa703c9dada66d31d765063" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;RequireAll&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireany&quot;&gt;RequireAny&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requirenone&quot;&gt;RequireNone&lt;/a&gt;&lt;/code&gt; directives may be used to enforce more complex sets of requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d646604e3242c046d9283505a2bb3893ecbed8" translate="yes" xml:space="preserve">
          <source>Use of the [NC] flag causes the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; to be matched in a case-insensitive manner. That is, it doesn't care whether letters appear as upper-case or lower-case in the matched URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a7223940d52584205c0299361415aee81d6a79" translate="yes" xml:space="preserve">
          <source>Use of the [NS] flag prevents the rule from being used on subrequests. For example, a page which is included using an SSI (Server Side Include) is a subrequest, and you may want to avoid rewrites happening on those subrequests. Also, when &lt;code&gt;&lt;a href=&quot;../mod/mod_dir&quot;&gt;mod_dir&lt;/a&gt;&lt;/code&gt; tries to find out information about possible directory default files (such as &lt;code&gt;index.html&lt;/code&gt; files), this is an internal subrequest, and you often want to avoid rewrites on such subrequests. On subrequests, it is not always useful, and can even cause errors, if the complete set of rules are applied. Use this flag to exclude problematic rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda4a2a7c08e457ff27d0a5af94b1fa7cf3cffd9" translate="yes" xml:space="preserve">
          <source>Use of the [P] flag causes the request to be handled by &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;, and handled via a proxy request. For example, if you wanted all image requests to be handled by a back-end image server, you might do something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a116e1d1df92c047a68a6744009c8559ab84f00a" translate="yes" xml:space="preserve">
          <source>Use of the [P] flag implies [L] - that is, the request is immediately pushed through the proxy, and any following rules will not be considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd6d2ecf9adff33f5edc33f58bb2f82fb476693" translate="yes" xml:space="preserve">
          <source>Use of the [R] flag causes a HTTP redirect to be issued to the browser. If a fully-qualified URL is specified (that is, including &lt;code&gt;http://servername/&lt;/code&gt;) then a redirect will be issued to that location. Otherwise, the current protocol, servername, and port number will be used to generate the URL sent with the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a930f188f5469ef5a9faf467284daa8ee7b5f6ef" translate="yes" xml:space="preserve">
          <source>Use per-module &lt;code&gt;&lt;a href=&quot;../mod/core#loglevel&quot;&gt;LogLevel&lt;/a&gt;&lt;/code&gt; setting instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1253063224bbccf958c6bdcaa0ee1c3aa7c989" translate="yes" xml:space="preserve">
          <source>Use plaintext passwords. Though &lt;code&gt;htdbm&lt;/code&gt; will support creation on all platforms, the &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; daemon will only accept plain text passwords on Windows and Netware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582cd98783559c98405ff9ffa7ac68fa310ad7f5" translate="yes" xml:space="preserve">
          <source>Use plaintext passwords. Though &lt;code&gt;htpasswd&lt;/code&gt; will support creation on all platforms, the &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; daemon will only accept plain text passwords on Windows and Netware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d92cb0c463e705206253222cc0b351e846c7a7e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Dav&lt;/code&gt; directive to enable the WebDAV HTTP methods for the given container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94edbb75528ea924d8a7b86d3d2f1f33b7fb0cf4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavDepthInfinity&lt;/code&gt; directive to allow the processing of &lt;code&gt;PROPFIND&lt;/code&gt; requests containing the header 'Depth: Infinity'. Because this type of request could constitute a denial-of-service attack, by default it is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd1893f62d1bfd5d57b6261f869a4d290f25e7b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavGenericLockDB&lt;/code&gt; directive to specify the full path to the lock database, excluding an extension. If the path is not absolute, it will be interpreted relative to &lt;code&gt;&lt;a href=&quot;core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. The implementation of &lt;code&gt;&lt;a href=&quot;mod_dav_lock&quot;&gt;mod_dav_lock&lt;/a&gt;&lt;/code&gt; uses a SDBM database to track user locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57a55634353ebfc259f85743f4a5eb312dcb1aa" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavLockDB&lt;/code&gt; directive to specify the full path to the lock database, excluding an extension. If the path is not absolute, it will be taken relative to &lt;code&gt;&lt;a href=&quot;core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. The implementation of &lt;code&gt;&lt;a href=&quot;mod_dav_fs&quot;&gt;mod_dav_fs&lt;/a&gt;&lt;/code&gt; uses a SDBM database to track user locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1232db4399910db27d77dc733dfd34f14af8e1ba" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DavMinTimeout&lt;/code&gt; directive to specify, in seconds, the minimum lock timeout to return to a client. Microsoft Web Folders defaults to a timeout of 120 seconds; the &lt;code&gt;DavMinTimeout&lt;/code&gt; can override this to a higher value (like 600 seconds) to reduce the chance of the client losing the lock due to network latency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8faf5d5f4b730792d266649a56fc51e5ccc1892" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;XBitHack Full&lt;/code&gt; configuration. This tells Apache to determine the last modified date by looking only at the date of the originally requested file, ignoring the modification date of any included files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc81227353e94b7edc756ae96f91d31e5d188aa2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;[NE]&lt;/code&gt; flag on the &lt;code&gt;RewriteRule&lt;/code&gt;. NE stands for No Escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1772a450546f3fbe0f9d796de15f812dd74e9b3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;disabled&lt;/code&gt; argument to disable that feature if inheritance from a parent directory is not desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fcbef7def39f312dcc2a4695be5b41961035a5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ttl&lt;/code&gt; parameter to set an optional time to live; connections which have been unused for at least &lt;code&gt;ttl&lt;/code&gt; seconds will be closed. &lt;code&gt;ttl&lt;/code&gt; can be used to avoid using a connection which is subject to closing because of the backend server's keep-alive timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02422afe5d38f53d8e87eb7713000781b68dcd2b" translate="yes" xml:space="preserve">
          <source>Use the DN of the client username to set the REMOTE_USER environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689a3c85ca66ebc841b4ca9341072e8bab711ed7" translate="yes" xml:space="preserve">
          <source>Use the DN of the client username when checking for group membership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02a9a862447df53ec0f6e2ef7f6f807e7075083" translate="yes" xml:space="preserve">
          <source>Use the LDAP server to compare the DNs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39d008d9a7882d528820cb7111daa72c64be169" translate="yes" xml:space="preserve">
          <source>Use the [E] flag to set an environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0f1717c078404b0a1f17f0a1590c06f36d764d" translate="yes" xml:space="preserve">
          <source>Use the authenticated user's credentials to perform authorization comparisons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cb33101e2587fd3bddf4466b256bec11aa2f6c" translate="yes" xml:space="preserve">
          <source>Use the authenticated user's credentials to perform authorization searches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed3c81c87794636c110cd7ba33831ab2a2c0435" translate="yes" xml:space="preserve">
          <source>Use the directives provided by &lt;code&gt;&lt;a href=&quot;../mod/mod_expires&quot;&gt;mod_expires&lt;/a&gt;&lt;/code&gt; to set an explicit expiration time on your files, thereby letting browsers and proxies know that it is acceptable to cache them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3717fd5a15189fce0f8217ffdcc2a6a1b585a85d" translate="yes" xml:space="preserve">
          <source>Use the interpreter for the lifetime of the thread handling the request (only available with threaded MPMs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270e51954c462ddaf978e7bf6385f68d090adeca" translate="yes" xml:space="preserve">
          <source>Use the kernel sendfile support to deliver files to the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c98fc0c7d593e60f7f62f780ae68429f600185c" translate="yes" xml:space="preserve">
          <source>Use the mime.types configuration file and the &lt;code&gt;&lt;a href=&quot;mod_mime#addtype&quot;&gt;AddType&lt;/a&gt;&lt;/code&gt; to configure media type assignments via file extensions, or the &lt;code&gt;&lt;a href=&quot;#forcetype&quot;&gt;ForceType&lt;/a&gt;&lt;/code&gt; directive to configure the media type for specific resources. Otherwise, the server will send the response without a Content-Type header field and the recipient may attempt to guess the media type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8b49dd5167985dfab7bf8d7897661e3df7c023" translate="yes" xml:space="preserve">
          <source>Use the package &lt;var&gt;PACKAGE&lt;/var&gt;. The default value for &lt;var&gt;ARG&lt;/var&gt; is &lt;code&gt;yes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3a2433caebc6298d38b43c724572ac29bd6cd2" translate="yes" xml:space="preserve">
          <source>Use the value of the attribute returned during the user query to set the REMOTE_USER environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9741038b043dbb8782a809e03db681a82a805211" translate="yes" xml:space="preserve">
          <source>Use this directive if you have a dedicated login URL, and you have not embedded the destination page in the login form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05200fd520c1ac0630e0170a861000243ad324bf" translate="yes" xml:space="preserve">
          <source>Use this directive if you have a dedicated login page to redirect users to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7604bc41ea176280eb31fe8a639e811ebf9f5da" translate="yes" xml:space="preserve">
          <source>Use this directive to disable rules in a particular context, rather than commenting out all the &lt;code&gt;&lt;a href=&quot;#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea49b11e9c0e290e8be01ec88ff990cad5d2d5d3" translate="yes" xml:space="preserve">
          <source>Use this flag on any substitution where the PATH_INFO that resulted from the previous mapping of this request to the filesystem is not of interest. This flag permanently forgets the PATH_INFO established before this round of mod_rewrite processing began. PATH_INFO will not be recalculated until the current round of mod_rewrite processing completes. Subsequent rules during this round of processing will see only the direct result of substitutions, without any PATH_INFO appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d58228b0767eabd123d9e91beae62abb13e9785" translate="yes" xml:space="preserve">
          <source>Use this option to enable &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt;, which allows you to set uid and gid for spawned processes. &lt;strong&gt;Do not use this option unless you understand all the security implications of running a suid binary on your server.&lt;/strong&gt; Further options to configure &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; are described &lt;a href=&quot;#suexec&quot;&gt;below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c48b2638d61747dd31908f0ab420b53eb06847" translate="yes" xml:space="preserve">
          <source>Use this to combine rule conditions with a local OR instead of the implicit AND. Typical example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68443c0a8ffec5905e5904a2de9b254cbc3d12c2" translate="yes" xml:space="preserve">
          <source>Use this to manually determine settings used to build the &lt;code&gt;httpd&lt;/code&gt; that will load your module. For instance use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b2af266679d8b6ea9c5cffb872059220abb1c6" translate="yes" xml:space="preserve">
          <source>Use this to set a handler for any URL that doesn't map to anything in your filesystem, and would otherwise return HTTP 404 (Not Found). For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b98c8662c0d6f3f7cae3aa44d261fa885d995b" translate="yes" xml:space="preserve">
          <source>UseCanonicalName Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbc6805b1fbfc6d5c9bd24da0cd6692dfdb6e44" translate="yes" xml:space="preserve">
          <source>UseCanonicalPhysicalPort Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed4ce3cef98bff03a4af4dda5786c7bf25f49fa" translate="yes" xml:space="preserve">
          <source>Used properly, this feature can reduce considerably the security risks involved with allowing users to develop and run private CGI or SSI programs. However, if suEXEC is improperly configured, it can cause any number of problems and possibly create new holes in your computer's security. If you aren't familiar with managing &lt;em&gt;setuid root&lt;/em&gt; programs and the security issues they present, we highly recommend that you not consider using suEXEC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74aa4339865543c842a3aeb29ee41102c8b4978" translate="yes" xml:space="preserve">
          <source>Useful in conjunction with &lt;code&gt;&lt;a href=&quot;#proxypassreverse&quot;&gt;ProxyPassReverse&lt;/a&gt;&lt;/code&gt; in situations where backend URL paths are mapped to public paths on the reverse proxy. This directive rewrites the &lt;code&gt;path&lt;/code&gt; string in &lt;code&gt;Set-Cookie&lt;/code&gt; headers. If the beginning of the cookie path matches &lt;var&gt;internal-path&lt;/var&gt;, the cookie path will be replaced with &lt;var&gt;public-path&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986a178daa2447e73c878d39636609112f5779bf" translate="yes" xml:space="preserve">
          <source>Useful tools to debug HTTP/2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aeb7b1e08c55fd31a3924a5e4bc32de4a207a39" translate="yes" xml:space="preserve">
          <source>User Authorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716dc9e040f82079517d7ebad3839efb025290d2" translate="yes" xml:space="preserve">
          <source>User Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabd7bc558626629a3eca4cadeb93fe192244b4c" translate="yes" xml:space="preserve">
          <source>User Directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eca879df1b946eb0f3d5b064c8069748f2cba94" translate="yes" xml:space="preserve">
          <source>User and group for CGI programs to run as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9324c1592e951bf7034ca30193bb9836a74354c6" translate="yes" xml:space="preserve">
          <source>User authentication using DBM files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfe486e25169356df2650334dc7bce773182e3a" translate="yes" xml:space="preserve">
          <source>User authentication using MD5 Digest Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b3bd0f67cc6943e9ea5569fc302de3999781f4" translate="yes" xml:space="preserve">
          <source>User authentication using an SQL database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29c287c84a04b29926e0f28042c03a9594ad608" translate="yes" xml:space="preserve">
          <source>User authentication using text files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3369515282aa2aac54b571a6c7cc6a998e4bf21a" translate="yes" xml:space="preserve">
          <source>User directory substitution is not active by default in versions 2.1.4 and later. In earlier versions, &lt;code&gt;UserDir public_html&lt;/code&gt; was assumed if no &lt;code&gt;UserDir&lt;/code&gt; directive was present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd83e9aef4a6292006cd1f95d365c5fcb9d8fcda" translate="yes" xml:space="preserve">
          <source>User-specific directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecc98334cb2ef272f9b1fd7bdd737a21c747a36" translate="yes" xml:space="preserve">
          <source>UserDir /home/*/www</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d219764ab282c9ff1bfc95aac983d249822a4a8" translate="yes" xml:space="preserve">
          <source>UserDir /usr/web</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3c21c60108967668f9830ac3c7e4af53eb537c" translate="yes" xml:space="preserve">
          <source>UserDir Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232821df2fc2c974f51c9c1b27dca6e3f247e64a" translate="yes" xml:space="preserve">
          <source>UserDir directive used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e0a27388d9b90db9f92304e66b910b84f2e204" translate="yes" xml:space="preserve">
          <source>UserDir http://www.example.com/*/usr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b7036d2505707b072b4b73a9324967287ff055" translate="yes" xml:space="preserve">
          <source>UserDir http://www.example.com/users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e64ec0e993dde017e6d24c35c16d8d933ac750" translate="yes" xml:space="preserve">
          <source>UserDir http://www.example.com/~*/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee301fe3eae6ef364849341cac1c3b08dc92586" translate="yes" xml:space="preserve">
          <source>UserDir public_html</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2b9c754c8b2569eb9aeefdc955367beb908240" translate="yes" xml:space="preserve">
          <source>UserExpr &lt;em&gt;expr&lt;/em&gt; (no default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8044b0f1d2d0886e9afa1544a649f6fa07673577" translate="yes" xml:space="preserve">
          <source>Usernames and Passwords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da0570e97dd2225b20659617df0fa16bd4556b8" translate="yes" xml:space="preserve">
          <source>Usernames are limited to &lt;code&gt;255&lt;/code&gt; bytes and may not include the character &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1deb8e9e70cba86ee05caf94304e1a125a4ad93" translate="yes" xml:space="preserve">
          <source>Users are strongly cautioned against toggling the &lt;code&gt;Unsafe&lt;/code&gt; mode of operation, particularly on outward-facing, publicly accessible server deployments. If an interface is required for faulty monitoring or other custom service consumers running on an intranet, users should toggle the Unsafe option only on a specific virtual host configured to service their internal private network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a8880deb8583ad3f9bf8a7ae583e94e8054ef4" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;&lt;a href=&quot;mod/mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; will notice that the server statistics are &lt;strong&gt;not&lt;/strong&gt; set to zero when a &lt;code&gt;USR1&lt;/code&gt; is sent. The code was written to both minimize the time in which the server is unable to serve new requests (they will be queued up by the operating system, so they're not lost in any event) and to respect your tuning parameters. In order to do this it has to keep the &lt;em&gt;scoreboard&lt;/em&gt; used to keep track of all children across generations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d290f325eeb34105db9f7d8bf929a4aa89640f20" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;&lt;a href=&quot;mod/mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; will notice that the server statistics are set to zero when a &lt;code&gt;HUP&lt;/code&gt; is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9a575de7d397efd0e880094d393eb13e33c9a4" translate="yes" xml:space="preserve">
          <source>Users will need to enter their User Principal Name as a login, in the form &lt;em&gt;somebody@nz.example.com&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56d6aecf09cbc25393a64b18e0a441abfa9a16b" translate="yes" xml:space="preserve">
          <source>Users within an intranet tend to omit the local domain name from their WWW requests, thus requesting &quot;http://somehost/&quot; instead of &lt;code&gt;http://somehost.example.com/&lt;/code&gt;. Some commercial proxy servers let them get away with this and simply serve the request, implying a configured local domain. When the &lt;code&gt;&lt;a href=&quot;#proxydomain&quot;&gt;ProxyDomain&lt;/a&gt;&lt;/code&gt; directive is used and the server is &lt;a href=&quot;#proxyrequests&quot;&gt;configured for proxy service&lt;/a&gt;, Apache httpd can return a redirect response and send the client to the correct, fully qualified, server address. This is the preferred method since the user's bookmark files will then contain fully qualified hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bf6364d4dd69690b02a9c6538a2ab54e05c07c" translate="yes" xml:space="preserve">
          <source>Users' Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a418bd02f0103f59f54aa362c8cd71efcbce86" translate="yes" xml:space="preserve">
          <source>Uses extensive caching of LDAP operations via &lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a29f185a08a80e8197544c63af4889abdc4f21" translate="yes" xml:space="preserve">
          <source>Uses the directives in the file &lt;var&gt;config&lt;/var&gt; on startup. If &lt;var&gt;config&lt;/var&gt; does not begin with a /, then it is taken to be a path relative to the &lt;code&gt;&lt;a href=&quot;../mod/core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. The default is &lt;code&gt;conf/httpd.conf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6567778761266a9b02390ca1a3b459665c83f9ff" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-IncludesNOEXEC&lt;/code&gt; or &lt;code&gt;-Includes&lt;/code&gt; disables server-side includes completely regardless of the previous setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef96d98987acf70f1f0bf705d3eb3d458806ba34" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; with multiple &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#require&quot;&gt;&amp;lt;Require&amp;gt;&lt;/a&gt;&lt;/code&gt; directives, each negated with &lt;code&gt;not&lt;/code&gt;, will only allow access, if all of negated conditions are true. In other words, access will be blocked, if any of the negated conditions fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf04268fa7b76e23a524fa78c10bfd80150081e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; for vitualhost creation may be appropriate if you are using a hosting service that does not provide you access to the server configuration files, and you are therefore restricted to configuration using &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cfe0fd815e17e8e27d51653226d88100952728" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; in its default state where &lt;code&gt;&lt;a href=&quot;mod/mod_cache#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt; is very much like having a caching reverse-proxy bolted to the front of the server. Requests will be served by the caching module unless it determines that the origin server should be queried just as an external cache would, and this drastically changes the security model of httpd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94c6a76efc66259fc6f851c0af29b5ac64f9aca" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Virtual_host&lt;/code&gt; and mod_proxy together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817fbd0ccc725ab433166bc0ec6e83ee229c7d63" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;_default_&lt;/code&gt; vhosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93be4ceec54019d2af6750f475d10b582dc522c8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;none&lt;/code&gt; for an argument will disable any accept filters for that protocol. This is useful for protocols that require a server send data first, such as &lt;code&gt;ftp:&lt;/code&gt; or &lt;code&gt;nntp&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92ddbe6f82c784dccef8e9ef4c16e629c4b0057" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;syslog&lt;/code&gt; instead of a filename enables logging via syslogd(8) if the system supports it. The default is to use syslog facility &lt;code&gt;local7&lt;/code&gt;, but you can override this by using the &lt;code&gt;syslog:facility&lt;/code&gt; syntax where &lt;var&gt;facility&lt;/var&gt; can be one of the names usually documented in syslog(1). The facility is effectively global, and if it is changed in individual virtual hosts, the final facility specified affects the entire server. Same rules apply for the syslog tag, which by default uses the Apache binary name, &lt;code&gt;httpd&lt;/code&gt; in most cases. You can also override this by using the &lt;code&gt;syslog::tag&lt;/code&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53089f052ebc0a58a29b582929a317ea3e16fe9" translate="yes" xml:space="preserve">
          <source>Using Active Directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f285eaefe3f08aa86a9eb13d144fe49243a1fde" translate="yes" xml:space="preserve">
          <source>Using Alias</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d98d9ab53311aee560e7cbb25bb906ccbe2801" translate="yes" xml:space="preserve">
          <source>Using Apache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66e8733053c04b642dcc922408ccfb6feef9b28" translate="yes" xml:space="preserve">
          <source>Using Apache HTTP Server on Microsoft Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af9e4e2c9d149d85509c48f9932553c46f724fc" translate="yes" xml:space="preserve">
          <source>Using Apache With Novell NetWare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b23e4364684786e546fbacb23b791529a6d4d08" translate="yes" xml:space="preserve">
          <source>Using Apache With RPM Based Systems (Redhat / CentOS / Fedora)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c875e44fd1ef0fdaa84f15d0801ef4a2feca59d" translate="yes" xml:space="preserve">
          <source>Using Digest Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7f893b5d295199ac44ad44dd9b3270246f3bd" translate="yes" xml:space="preserve">
          <source>Using Environment Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a0afebc28cc1af019bbcc8893f1fbc50902b77" translate="yes" xml:space="preserve">
          <source>Using Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb778da1032664b3ef979237c5b9a41636fde2eb" translate="yes" xml:space="preserve">
          <source>Using Microsoft FrontPage with &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d43fc23bf11c4d0e868d438ad84922c0a05888" translate="yes" xml:space="preserve">
          <source>Using Microsoft FrontPage with mod_authnz_ldap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db04044d1bde765a98aee8d346f823b7cd141604" translate="yes" xml:space="preserve">
          <source>Using Multiple Virtual Hosting Systems on the Same Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85aabc4e22ad8d36ff317277e15052829fc1ca0" translate="yes" xml:space="preserve">
          <source>Using Name-based Virtual Hosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e268b9140f8f6023063dba7e235817c07ef297b0" translate="yes" xml:space="preserve">
          <source>Using RewriteMap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87e09729dd6b5b5124e02ef516affe43c08f688" translate="yes" xml:space="preserve">
          <source>Using SSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8e852e31d4a8a04b372e96b8a08d01ef1f6f8e" translate="yes" xml:space="preserve">
          <source>Using SSL/TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686d16463ab8470f47e9807e2c221cf7aa81ac78" translate="yes" xml:space="preserve">
          <source>Using TLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cd21ab4e168e96b7ea07bd4e2894541230a65e" translate="yes" xml:space="preserve">
          <source>Using [QSD] and [QSA] together will result in [QSD] taking precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c0fdf446db1ccc92645009cc7edb3b1cad76f" translate="yes" xml:space="preserve">
          <source>Using a 'MultiViews' search, where the server does an implicit filename pattern match and chooses from among the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94709ccdd0fe18f88329516037e37f2646b79888" translate="yes" xml:space="preserve">
          <source>Using a Separate Virtual Host Configuration File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbd502d59717c20ca0189aacf29d6993d8f4730" translate="yes" xml:space="preserve">
          <source>Using a high trace log level for &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; will slow down your Apache HTTP Server dramatically! Use a log level higher than &lt;code&gt;trace2&lt;/code&gt; only for debugging!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0eb9565fd38d269f0b7ece6b15516beebe9270" translate="yes" xml:space="preserve">
          <source>Using a level of at least &lt;code&gt;crit&lt;/code&gt; is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5355cb9512be885860ba075229091884830619" translate="yes" xml:space="preserve">
          <source>Using a type map (&lt;em&gt;i.e.&lt;/em&gt;, a &lt;code&gt;*.var&lt;/code&gt; file) which names the files containing the variants explicitly, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cd65e8975db60326448ae18097a8c3847e6ce4" translate="yes" xml:space="preserve">
          <source>Using a type-map file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135a02e37038bba51483274dd0e5a2d6c0ef00d6" translate="yes" xml:space="preserve">
          <source>Using an include file for a header and/or a footer can reduce the burden of these updates. You just have to make one footer file, and then include it into each page with the &lt;code&gt;include&lt;/code&gt; SSI command. The &lt;code&gt;include&lt;/code&gt; function can determine what file to include with either the &lt;code&gt;file&lt;/code&gt; attribute, or the &lt;code&gt;virtual&lt;/code&gt; attribute. The &lt;code&gt;file&lt;/code&gt; attribute is a file path, &lt;em&gt;relative to the current directory&lt;/em&gt;. That means that it cannot be an absolute file path (starting with /), nor can it contain ../ as part of that path. The &lt;code&gt;virtual&lt;/code&gt; attribute is probably more useful, and should specify a URL relative to the document being served. It can start with a /, but must be on the same server as the file being served.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aadd43b809dd705e31b28ea715ae6b7db7bf34d" translate="yes" xml:space="preserve">
          <source>Using authorization providers for access control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19174858336eefca2292878323b965333da6c27e" translate="yes" xml:space="preserve">
          <source>Using buffer with mod_include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89f064f96cf4a28a53c9148c840fd6f53ca2f3d" translate="yes" xml:space="preserve">
          <source>Using cookies to store a session removes the need for the server or a group of servers to store the session locally, or collaborate to share a session, and can be useful for high traffic environments where a server based session might be too resource intensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23bb2e20c4cbfda7ea9eb1c918b9bfd176856b2" translate="yes" xml:space="preserve">
          <source>Using explicitly configured workers in the forward mode is not very common, because forward proxies usually communicate with many different origin servers. Creating explicit workers for some of the origin servers can still be useful if they are used very often. Explicitly configured workers have no concept of forward or reverse proxying by themselves. They encapsulate a common concept of communication with origin servers. A worker created by &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; for use in a reverse proxy will also be used for forward proxy requests whenever the URL to the origin server matches the worker URL, and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6626de78a5f09544c36df6715395ad52ad3da8e2" translate="yes" xml:space="preserve">
          <source>Using mod_file_cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76f11d004cff46eb7dbb42aae2cf18bf7d1e902" translate="yes" xml:space="preserve">
          <source>Using mod_rewrite for Proxying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0ab7589c684140b4ff659b0537aafd1683738e" translate="yes" xml:space="preserve">
          <source>Using mod_rewrite for redirection and remapping of URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4736a749cabe16c7d1fc06daf20548662e19bcc5" translate="yes" xml:space="preserve">
          <source>Using mod_rewrite to control access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65d78afb0dc3a5bf46dfe8192e6d4a2a0b14ca5" translate="yes" xml:space="preserve">
          <source>Using multiple providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531c5fef9b39a23f6a0a503248bf826e17163143" translate="yes" xml:space="preserve">
          <source>Using regex sections, we can deny access to many types of image files at once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce9444223322d8df43effdecb6929d3897679cc" translate="yes" xml:space="preserve">
          <source>Using sed to replace text in the response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e177d7d65446d095f96b0c9a8e63e33f54d790" translate="yes" xml:space="preserve">
          <source>Using separate IP addresses for different SSL hosts. Using different port numbers for different SSL hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469579387557b5d87f72f0997cc761d44fde1727" translate="yes" xml:space="preserve">
          <source>Using server-status to troubleshoot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7b6c5e966af0cf330a0d3a25e33c0e97b96ae6" translate="yes" xml:space="preserve">
          <source>Using suEXEC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11974ef021b046f1af70a8976085348b3e3626e" translate="yes" xml:space="preserve">
          <source>Using such a default vhost with a wildcard port effectively prevents any request going to the main server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c994c58d300811ae2c15fddf24b44e9de599bcb" translate="yes" xml:space="preserve">
          <source>Using that rather than the &lt;code&gt;Require user rbowen&lt;/code&gt; line will allow anyone in that is listed in the password file, and who correctly enters their password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de429d757632a63e9844e0318b5a126c330f171a" translate="yes" xml:space="preserve">
          <source>Using the &quot;show cookies&quot; feature of your browser, you would have seen a clear text representation of the session. This could potentially be a problem should the end user need to be kept unaware of the contents of the session, or where a third party could gain unauthorised access to the data within the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd1b5d22b890490c06ec1a7dd9e7362ee43ff2f" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../mod/core#if&quot;&gt;&amp;lt;If&amp;gt;&lt;/a&gt;&lt;/code&gt;, you can allow or deny access based on arbitrary environment variables or request header values. For example, to deny access based on user-agent (the browser type) you might do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d77295f512ddac0b6f9deb9a47c78a9f46938f3" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt;&lt;code&gt;expr&lt;/code&gt; syntax, this could also be written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b480e16ccd23a3a22f6adfa48fa06240f2ed41a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;mod/mod_cache_socache&quot;&gt;mod_cache_socache&lt;/a&gt;&lt;/code&gt; module, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; can cache data from a variety of implementations (aka: &quot;providers&quot;). Using the &lt;code&gt;&lt;a href=&quot;mod/mod_socache_memcache&quot;&gt;mod_socache_memcache&lt;/a&gt;&lt;/code&gt; module, for example, one can specify that &lt;a href=&quot;http://memcached.org&quot;&gt;memcached&lt;/a&gt; is to be used as the the backend storage mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654668a95d5c27e6468043f992405b4ff2727466" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;ServerPath&lt;/code&gt; directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5528305329eed8bbeebd875c81bba7b4d34ae8bb" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;mod_example_hooks&lt;/code&gt; Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcd2a8678bde82e958e481b362d07112565651a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;set&lt;/code&gt; directive, you can set variables for later use. We'll need this later in the discussion, so we'll talk about it here. The syntax of this is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f40f8f95af497409afea9bbc99a9ffda61cca6" translate="yes" xml:space="preserve">
          <source>Using the [END] flag terminates not only the current round of rewrite processing (like [L]) but also prevents any subsequent rewrite processing from occurring in per-directory (htaccess) context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac8eb4638cdda73920449695e3520a66d2ae72d" translate="yes" xml:space="preserve">
          <source>Using the [F] flag causes the server to return a 403 Forbidden status code to the client. While the same behavior can be accomplished using the &lt;code&gt;&lt;a href=&quot;../mod/mod_access_compat#deny&quot;&gt;Deny&lt;/a&gt;&lt;/code&gt; directive, this allows more flexibility in assigning a Forbidden status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6742a25544347554b3ca06ed677d5189bb9fb779" translate="yes" xml:space="preserve">
          <source>Using the short form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d255a0c89354eb89175c7944db695a5b5a3629" translate="yes" xml:space="preserve">
          <source>Using the syntax shown in the UserDir documentation, you can restrict what users are permitted to use this functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c327ea2396a35d698009f899819239cbe9d7e0" translate="yes" xml:space="preserve">
          <source>Using this directive in conjunction with &lt;code&gt;IndexOptions HTMLTable&lt;/code&gt; adds a number of CSS classes to the resulting HTML. The entire table is given a CSS id of &lt;code&gt;indexlist&lt;/code&gt; and the following classes are associated with the various parts of the listing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6c1a8dbceaf7a2744256e5e6fad1886bd547f4" translate="yes" xml:space="preserve">
          <source>Using this flag might break proper caching of the response if the representation of this response varies on the value of this header. So this flag should be only used if the meaning of the Vary header is well understood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa0c0a72212122ec81251b391b168ff1c6928b" translate="yes" xml:space="preserve">
          <source>Using this flag triggers the use of &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;, without handling of persistent connections. This means the performance of your proxy will be better if you set it up with &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#proxypassmatch&quot;&gt;ProxyPassMatch&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e981f13dedfef842d197f48af5e5c6e5a986ad" translate="yes" xml:space="preserve">
          <source>Usually the &lt;code&gt;&lt;a href=&quot;../mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; of the webserver directly relates to the URL &quot;&lt;code&gt;/&lt;/code&gt;&quot;. But often this data is not really of top-level priority. For example, you may wish for visitors, on first entering a site, to go to a particular subdirectory &lt;code&gt;/about/&lt;/code&gt;. This may be accomplished using the following ruleset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067584f01adea003da6744ef3ba2fb7c1bac17f9" translate="yes" xml:space="preserve">
          <source>Usually, a server should have both header and body timeouts configured. If a common configuration is used for http and https virtual hosts, the timeouts should not be set too low:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafe70dff214547a05a9414d4130a6bec8829406" translate="yes" xml:space="preserve">
          <source>Usually, any SSL ciphers supported by the version of OpenSSL in use, are also supported by &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;. Which ciphers are available can depend on the way you built OpenSSL. Typically, at least the following ciphers are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf69a85ea3ad53b52ca117cf05fa76440da97db" translate="yes" xml:space="preserve">
          <source>Usually, the functionality is used like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8be73873dc7a5b12cb914a014bd6de18871c94" translate="yes" xml:space="preserve">
          <source>Usually, to switch between HTTP and HTTPS, you have to use fully-qualified hyperlinks (because you have to change the URL scheme). Using &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; however, you can manipulate relative hyperlinks, to achieve the same effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec55b3ebac0523b6402edeed566288b0942588a4" translate="yes" xml:space="preserve">
          <source>Usually, when something goes wrong with your SSI directive, you get the message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="68699bd9f4b518716de9a5e6527957ada16b19a0" translate="yes" xml:space="preserve">
          <source>VERSION-CONTROL</source>
          <target state="translated">VERSION-CONTROL</target>
        </trans-unit>
        <trans-unit id="0759f0ce37ab79257fded69b92a3fcb66b1f0f05" translate="yes" xml:space="preserve">
          <source>VHostCGIMode Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcea4522c2809383b22cf9aa46f73fad2ea76da8" translate="yes" xml:space="preserve">
          <source>VHostCGIPrivs Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce226f2ba14337896bbc621de9533319a1d2123" translate="yes" xml:space="preserve">
          <source>VHostGroup Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2ccaf490f40ca7ec42b32b6eb732f88689327c" translate="yes" xml:space="preserve">
          <source>VHostPrivs Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed29265f389fe116308587d9514be4bedcbe2f1" translate="yes" xml:space="preserve">
          <source>VHostSecure Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2667f79db012b553cd189294bdd0e095002dc36" translate="yes" xml:space="preserve">
          <source>VHostUser Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ca7f972a1943935960a07a82a5d567b82687a1" translate="yes" xml:space="preserve">
          <source>Valid hyperlink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d318103c56139d8cee90657b9de3288a554a8d64" translate="yes" xml:space="preserve">
          <source>Valid protocols are &lt;code&gt;http/1.1&lt;/code&gt; for http and https connections, &lt;code&gt;h2&lt;/code&gt; on https connections and &lt;code&gt;h2c&lt;/code&gt; for http connections. Modules may enable more protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb5dcee2d6d9bad5be659f0ca0019d9de289cdc" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;code&gt;MemcacheConnTTL&lt;/code&gt; are times up to one hour. 0 means no timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb97cfb984add68c327523d6390f2de3f12fea12" translate="yes" xml:space="preserve">
          <source>Validating CRYPT or MD5 passwords with the OpenSSL command line program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3075b3d8a6642cb718757b752b60df586f5b35ac" translate="yes" xml:space="preserve">
          <source>Validity of client's certificate (end time)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0db030cd3335d76200faba5adddc9f5f6a7050a" translate="yes" xml:space="preserve">
          <source>Validity of client's certificate (start time)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e49bae0f11a943f82851853d2b2333b159f05d" translate="yes" xml:space="preserve">
          <source>Validity of server's certificate (end time)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b258d2f5f6638fba958a472be49ed0e9d65e68" translate="yes" xml:space="preserve">
          <source>Validity of server's certificate (start time)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="a9bc17b978888b7f8d38d59e97cafd1fa72118b4" translate="yes" xml:space="preserve">
          <source>Value Type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99954cf691cfb5b5294b8ac58f430cbb91f955ac" translate="yes" xml:space="preserve">
          <source>Value of secret used by &lt;code&gt;&lt;a href=&quot;mod_proxy_ajp&quot;&gt;mod_proxy_ajp&lt;/a&gt;&lt;/code&gt;. See the documentation of this module for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8e4a0d041ac0cb42d4610b742f88aaf8fcf001" translate="yes" xml:space="preserve">
          <source>Value of the &lt;code&gt;Expires&lt;/code&gt; header configured by MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="95a5f9af637cf5be9627a6081521faef0054e87f" translate="yes" xml:space="preserve">
          <source>Variable Name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5e080ccadff18613ccf65446b862a68b6d073c" translate="yes" xml:space="preserve">
          <source>Variable Substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1c676942b77d78da70f191748e2765f18bffde" translate="yes" xml:space="preserve">
          <source>Variable name to determine user name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcf02e069b085036bdc1db341639b8fa69de100" translate="yes" xml:space="preserve">
          <source>Variable names may not contain colon &quot;:&quot; characters, to avoid clashes with &lt;code&gt;&lt;a href=&quot;mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt;'s syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff543100742c9cc6f495c37dccf8aba22e36661a" translate="yes" xml:space="preserve">
          <source>Variable substitution is done within quoted strings in most cases where they may reasonably occur as an argument to an SSI directive. This includes the &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;flastmod&lt;/code&gt;, &lt;code&gt;fsize&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;echo&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt; directives. If &lt;code&gt;&lt;a href=&quot;#ssilegacyexprparser&quot;&gt;SSILegacyExprParser&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt;, substitution also occurs in the arguments to conditional operators. You can insert a literal dollar sign into the string using backslash quoting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d54142c18cddb50c31ddc67496357f5820ae1e2" translate="yes" xml:space="preserve">
          <source>Variable/Negotiated Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="a2ce63ac68f3fd5d66830a4653721365ad163fff" translate="yes" xml:space="preserve">
          <source>Various configuration settings for directory indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4309ac44d8fe85118263a1a57a22f58b6ec8c201" translate="yes" xml:space="preserve">
          <source>Various query string arguments are available to give the client some control over the ordering of the directory listing, as well as what files are listed. If you do not wish to give the client this control, the &lt;code&gt;&lt;a href=&quot;#indexoptions.ignoreclient&quot;&gt;IndexOptions IgnoreClient&lt;/a&gt;&lt;/code&gt; option disables that functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1d19cfe6e286e99c8d5de660c3ec7c6b4f3d3a" translate="yes" xml:space="preserve">
          <source>Various versions of Apache httpd have used other modules and directives to control access logging, including mod_log_referer, mod_log_agent, and the &lt;code&gt;TransferLog&lt;/code&gt; directive. The &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive now subsumes the functionality of all the older directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0a9c1129e65f7b985203b273db0692dd9edace" translate="yes" xml:space="preserve">
          <source>Vendor Standard (from Netscape Corp.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449d4e217d2244934bd82ea940763eacd24d122d" translate="yes" xml:space="preserve">
          <source>Verify password. Verify that the given password matches the password of the user stored in the specified htpasswd file. Available in 2.4.5 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e5e13cde922f90aa5e440c85b2cb8ac2921214" translate="yes" xml:space="preserve">
          <source>Verify the username and password. The program will print a message indicating whether the supplied password is valid. If the password is invalid, the program exits with error code 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff55c3d0470e3d8648639dc67e82ad6ab8fefe32" translate="yes" xml:space="preserve">
          <source>Verifying certificate requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="af426e5a7152039ad3b4b9c27b94f9595adf9012" translate="yes" xml:space="preserve">
          <source>Version 1.3 of the Apache HTTP Server is the first version which includes a port to a (non-ASCII) mainframe machine which uses the EBCDIC character set as its native codeset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317979b266a0190c5d65af8f9057293cf5ef30fb" translate="yes" xml:space="preserve">
          <source>Version 1.3 of the Apache HTTP Server was the first version which included a port to a (non-ASCII) mainframe machine which uses the EBCDIC character set as its native codeset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e34c2f135661e69ffdee32c32b07269bc6c2265" translate="yes" xml:space="preserve">
          <source>Version 2.1 and later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacc7d2bc35fc6da3222aefad831302141f5b79f" translate="yes" xml:space="preserve">
          <source>Version 2.3 and later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468483f92b256404976e2ab768fafd689e2fdda8" translate="yes" xml:space="preserve">
          <source>Version 2.4 and later. Available as a third-party module for 2.2.x versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17901863f01935d9f33b9ae81c754a48d30539ba" translate="yes" xml:space="preserve">
          <source>Version 2.4 and later. Available as a third-party module for earlier 2.x versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda94520f060398c8ab34788b2a5856eba5364da" translate="yes" xml:space="preserve">
          <source>Version 2.4 and later; available as a third-party for earlier 2.x versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d695c655b255e39e6293c397d7115a4f4672286c" translate="yes" xml:space="preserve">
          <source>Version 2.4 and later; available as a third-party module for earlier 2.x versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d8c9c21e17488af79a6c95c4a70901942b807e" translate="yes" xml:space="preserve">
          <source>Version 2.4 and later; available as a third-party module for earlier 2.x versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290539a3a1c8a1775000e59f7d4739560326639d" translate="yes" xml:space="preserve">
          <source>Version 2.4.0 and later; available as a third-party module for earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6974ab729b6242600700a81b1ec6d4d1a48c0a94" translate="yes" xml:space="preserve">
          <source>Version History</source>
          <target state="translated">版本历史</target>
        </trans-unit>
        <trans-unit id="6f80265529c7013bc8d77901940e0f1a28df4271" translate="yes" xml:space="preserve">
          <source>Version dependent configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7c280e94ca0aefe5adc6cc5edecb2172520a0c" translate="yes" xml:space="preserve">
          <source>Version, Serial Number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6192a9d22a2543af0e30c3c2cb0a07b2a458ac" translate="yes" xml:space="preserve">
          <source>Virtual Host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ffd07d38c9eecf8b9e7c924c1acc2ba2be5585" translate="yes" xml:space="preserve">
          <source>Virtual Host Definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3b43ecd7d24e55aeea05071903c9c0123b8b8a" translate="yes" xml:space="preserve">
          <source>Virtual Host Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79933e0d48bafe4118b5a36412f475c77a4555d7" translate="yes" xml:space="preserve">
          <source>Virtual Host Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0750fecff7079a96bda8e195b526c99fed8b166" translate="yes" xml:space="preserve">
          <source>Virtual Host examples for common setups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa82f7624541bc2fb792f92c3d2312f4aac63c0e" translate="yes" xml:space="preserve">
          <source>Virtual Hosting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e002ac7b12d3f2cdf65aa829a437c692675c0a" translate="yes" xml:space="preserve">
          <source>Virtual Hosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f23ea5f5043659d8207be3740ee674c50c7df49" translate="yes" xml:space="preserve">
          <source>Virtual Hosts For Arbitrary Hostnames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d6903bac62c5839a6798a10585dfa4d1a7f9dd" translate="yes" xml:space="preserve">
          <source>Virtual Hosts documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7770f56d6c9b4184ba9e8e0d858279f7e858af9f" translate="yes" xml:space="preserve">
          <source>VirtualDocumentRoot Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8d500d9b840ab46898d14ed5b8c802bb337bce" translate="yes" xml:space="preserve">
          <source>VirtualDocumentRootIP Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22916a19658fafdc4cff10ce9ab8025e2ccfa65" translate="yes" xml:space="preserve">
          <source>VirtualHost Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00c5b464530b95d7fbed7da539aeee5e886ed58" translate="yes" xml:space="preserve">
          <source>VirtualHost section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a552a3c6cedfa7f2db9d331e00d5c9f4b334ae97" translate="yes" xml:space="preserve">
          <source>VirtualScriptAlias Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db51b09aa362adc09ff8c06590c8e722d7652dc" translate="yes" xml:space="preserve">
          <source>VirtualScriptAliasIP Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7638d8452bcb57e9befd1bd519a3973f1637465a" translate="yes" xml:space="preserve">
          <source>Visitors coming from that address (&lt;code&gt;10.252.46.165&lt;/code&gt;) will not be able to see the content covered by this directive. If, instead, you have a machine name, rather than an IP address, you can use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa3408b9d4c79b34884969e3687c2a9ef79c344" translate="yes" xml:space="preserve">
          <source>Visitors coming from that address will not be able to see the content covered by this directive. If, instead, you have a machine name, rather than an IP address, you can use that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6357cc39925c452ba14a027ab6ebdd4241c1219e" translate="yes" xml:space="preserve">
          <source>Visual Studio 2002 (.NET) and later users should also use the Build menu, Configuration Manager dialog to uncheck both the &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; Solution modules &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; components, as well as every component starting with &lt;code&gt;apr_db*&lt;/code&gt;. These modules are built by invoking &lt;code&gt;nmake&lt;/code&gt;, or the IDE directly with the &lt;code&gt;BinBuild&lt;/code&gt; target, which builds those modules conditionally if the &lt;code&gt;srclib&lt;/code&gt; directories &lt;code&gt;openssl&lt;/code&gt; and/or &lt;code&gt;zlib&lt;/code&gt; exist, and based on the setting of &lt;code&gt;DBD_LIST&lt;/code&gt; and &lt;code&gt;DBM_LIST&lt;/code&gt; environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d7d5d377a3bdf0fe3dac4e385d0de399d4e3e0" translate="yes" xml:space="preserve">
          <source>WS and WSS (Web-sockets)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e15dfd33a8977326ec3048fffcf2851f9ab5d0" translate="yes" xml:space="preserve">
          <source>WWW-Authenticate</source>
          <target state="translated">WWW-Authenticate</target>
        </trans-unit>
        <trans-unit id="9bc60b24208dcdf9cd50fd05c1f9fdcd250f6bc4" translate="yes" xml:space="preserve">
          <source>WampServer</source>
          <target state="translated">WampServer</target>
        </trans-unit>
        <trans-unit id="8ca69679190f543d1b576ce911c73c7133ee1cd0" translate="yes" xml:space="preserve">
          <source>Warning about building Apache from the development tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de230d22e24d564ac336650263a0a894157d9fc3" translate="yes" xml:space="preserve">
          <source>Warning conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e048a65146b11b66a5dadffddd569bbdd6612b52" translate="yes" xml:space="preserve">
          <source>Warning: dont use the CodeWarrior Assembler - it produces broken code!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86ae2720edf3deeb542b046562266b67a287270" translate="yes" xml:space="preserve">
          <source>Watchdog interval in seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e184a585aa17f5042635f7a39177caaa112f41f2" translate="yes" xml:space="preserve">
          <source>WatchdogInterval Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5357a0025cfa374032ba8e0510b9d8066c61e7d7" translate="yes" xml:space="preserve">
          <source>Watching Your Logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2501306cbae492db46342fc3d0b881746ca164" translate="yes" xml:space="preserve">
          <source>We assume here that the &lt;code&gt;prods.php&lt;/code&gt; script knows what to do when it received an argument of &lt;code&gt;id=NOTFOUND&lt;/code&gt; when a product is not found in the lookup map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851ed3691e48dc65c11484652a2726a138ba65e5" translate="yes" xml:space="preserve">
          <source>We can calculate the absolute maximum numbers of concurrent connections in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab517e12a3d9314c68f947ae30fdd351a972987" translate="yes" xml:space="preserve">
          <source>We distribute each worker's work quota to the worker, and then look which of them needs to work most urgently (biggest lbstatus). This worker is then selected for work, and its lbstatus reduced by the total work quota we distributed to all workers. Thus the sum of all lbstatus does not change(*) and we distribute the requests as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5221a6d6afa2841e000d5d025edfc1f32ee08a06" translate="yes" xml:space="preserve">
          <source>We do an external HTTP redirect for all non-canonical URLs to fix them in the location view of the Browser and for all subsequent requests. In the example ruleset below we replace &lt;code&gt;/puppies&lt;/code&gt; and &lt;code&gt;/canines&lt;/code&gt; by the canonical &lt;code&gt;/dogs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5a214c33ed08937a8b370cbcea72b2316be703" translate="yes" xml:space="preserve">
          <source>We do not want to execute programs that will then change our UID/GID again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db54e75151e5a0453e826e8a4b129e06c07ecff" translate="yes" xml:space="preserve">
          <source>We don't want to give anyone other than the owner the ability to change the CGI/SSI program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8f9c6ecd6d0023afc344c18984752d2678b1d3" translate="yes" xml:space="preserve">
          <source>We don't want to open up the directory to others; only the owner user may be able to alter this directories contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c852fbf4d4b0126dfb9bc3749aca7fb73335ab4e" translate="yes" xml:space="preserve">
          <source>We force a HTTP redirect to the new URL which leads to a change of the browsers and thus the users view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b5953f853d497246846afecf86d24bd05ee5f9" translate="yes" xml:space="preserve">
          <source>We have a server with two name-based vhosts. In order to match the correct virtual host a client must send the correct &lt;code&gt;Host:&lt;/code&gt; header. Old HTTP/1.0 clients do not send such a header and Apache has no clue what vhost the client tried to reach (and serves the request from the primary vhost). To provide as much backward compatibility as possible we create a primary vhost which returns a single page containing links with an URL prefix to the name-based virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cc3a203594a2a28c305ee77a359631eb78efc7" translate="yes" xml:space="preserve">
          <source>We have numerous mirrors of our website, and want to redirect people to the one that is located in the country where they are located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745dab01747e248138a4c020e44dfbccd68300ea" translate="yes" xml:space="preserve">
          <source>We have to decide, based on the HTTP header &quot;User-Agent&quot;, which content to serve. The following config does the following: If the HTTP header &quot;User-Agent&quot; contains &quot;Mozilla/3&quot;, the page &lt;code&gt;foo.html&lt;/code&gt; is rewritten to &lt;code&gt;foo.NS.html&lt;/code&gt; and the rewriting stops. If the browser is &quot;Lynx&quot; or &quot;Mozilla&quot; of version 1 or 2, the URL becomes &lt;code&gt;foo.20.html&lt;/code&gt;. All other browsers receive page &lt;code&gt;foo.32.html&lt;/code&gt;. This is done with the following ruleset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c498264f722e29e1a526815f7bb9171916bde32a" translate="yes" xml:space="preserve">
          <source>We just rewrite the URL to the CGI-script and force the handler to be &lt;strong&gt;cgi-script&lt;/strong&gt; so that it is executed as a CGI program. This way a request to &lt;code&gt;/~quux/foo.html&lt;/code&gt; internally leads to the invocation of &lt;code&gt;/~quux/foo.cgi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8641eadac2c2c1ae4469dbc5912f1a4e95a0ab5" translate="yes" xml:space="preserve">
          <source>We put this into a &lt;code&gt;map.users-to-hosts&lt;/code&gt; file. The aim is to map;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3918d9ce27d902b23151d75f48baf36c404e45fc" translate="yes" xml:space="preserve">
          <source>We redirect the URL &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;/about/&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da3529982dd0f7bcf0ff62016479e5f4bc9b6f9" translate="yes" xml:space="preserve">
          <source>We rewrite the name to its basename and test for existence of the new extension. If it exists, we take that name, else we rewrite the URL to its original state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0928418fe1f38459715912e2038de746af562e4" translate="yes" xml:space="preserve">
          <source>We rewrite the old URL to the new one internally via the following rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafc565f2ad9986e61d1519dd2a52c543e15d9c1" translate="yes" xml:space="preserve">
          <source>We use a ruleset that specifies the directory to be protected, and the client &lt;code&gt;USER_AGENT&lt;/code&gt; that identifies the malicious or persistent robot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5be08abb9783f12672c94579ca7685e7094746" translate="yes" xml:space="preserve">
          <source>We use the following ruleset to expand the tilde URLs into the above layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc10a030916b73fdb7dbcc0ed6f4cd6f78bd100" translate="yes" xml:space="preserve">
          <source>We want to automatically create a virtual host for every hostname which resolves in our domain, without having to create new VirtualHost sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6994e635bffb9e2cff1483126765419880c0b38b" translate="yes" xml:space="preserve">
          <source>We want to have a default vhost for port 80, but no other default vhosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c01b39f34a9c8cb22da465c95c846208a647c6" translate="yes" xml:space="preserve">
          <source>We wish to dynamically generate content, but store it statically once it is generated. This rule will check for the existence of the static file, and if it's not there, generate it. The static files can be removed periodically, if desired (say, via cron) and will be regenerated on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d92dba72c51bc4403d92589621d74040734eca" translate="yes" xml:space="preserve">
          <source>We wish to maintain a blacklist of hosts, rather like &lt;code&gt;hosts.deny&lt;/code&gt;, and have those hosts blocked from accessing our server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36da918b9eb47843324ef12088e2562fdf0638f7" translate="yes" xml:space="preserve">
          <source>We wish to provide different content based on the browser, or user-agent, which is requesting the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77461580a836767833259105c6384330377f34e0" translate="yes" xml:space="preserve">
          <source>We wish to randomly distribute load across several servers using mod_rewrite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405bc9ecc0e9e1a41b3c4fd4823d45ea255e6161" translate="yes" xml:space="preserve">
          <source>We wish to replace these multiple &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; blocks with a mechanism that works them out dynamically. This has a number of advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4268ef54626852dd5ec0d9c6e10bc43eb425f7d" translate="yes" xml:space="preserve">
          <source>We wish to use mod_rewrite to serve different content based on the time of day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e910a891f9f15adb4117d1cd3e36a58eefc8d8e" translate="yes" xml:space="preserve">
          <source>We'll use &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; and a list of servers to accomplish this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf906bccfc1ecc1a3f3df21fefd19d94d4ccce3d" translate="yes" xml:space="preserve">
          <source>We'll use a &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; directive to build a list of servers that we wish to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5650998547c971333c974a71673ccedc058fd8bd" translate="yes" xml:space="preserve">
          <source>Web Site Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf9cfe81a38f8312fc1c76a31a9d325df42e1b8" translate="yes" xml:space="preserve">
          <source>Web password files such as those managed by &lt;code&gt;htdbm&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be within the Web server's URI space -- that is, they should not be fetchable with a browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4868244f8d922303d3058bef5e063dcab7514b2" translate="yes" xml:space="preserve">
          <source>Web password files such as those managed by &lt;code&gt;htpasswd&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be within the Web server's URI space -- that is, they should not be fetchable with a browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b8617c524d850c01824020a98215a5bba7431" translate="yes" xml:space="preserve">
          <source>Web site content can take many different forms, but may be broadly divided into static and dynamic content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2fe2179b44fad347e37ec201d26ab520f15318" translate="yes" xml:space="preserve">
          <source>WebSocket</source>
          <target state="translated">WebSocket</target>
        </trans-unit>
        <trans-unit id="24ceb14ebe42d2e4e79910255e78d57187910ac9" translate="yes" xml:space="preserve">
          <source>WebSocket, using &lt;code&gt;&lt;a href=&quot;mod_proxy_wstunnel&quot;&gt;mod_proxy_wstunnel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2833484d472a90545a2b4ce437b3b2e8bf6ecd" translate="yes" xml:space="preserve">
          <source>Websockets support module for &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f436009923088ec4587fd43e6074ade636ae8754" translate="yes" xml:space="preserve">
          <source>Webspace Containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71fd9d92e619cb6c289ce93dca30473cb349e68" translate="yes" xml:space="preserve">
          <source>Weighted Traffic Counting Algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d89f985b0e89df40faceb3a8e3a58ea3c71a964" translate="yes" xml:space="preserve">
          <source>Weighted Traffic Counting load balancer scheduler algorithm for &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd9fa14038e1e9f2d1a2fd3404ab7d9ed3662e7" translate="yes" xml:space="preserve">
          <source>Well formed content that is intended to be cached should declare an explicit freshness lifetime with the &lt;code&gt;Cache-Control&lt;/code&gt; header's &lt;code&gt;max-age&lt;/code&gt; or &lt;code&gt;s-maxage&lt;/code&gt; fields, or by including an &lt;code&gt;Expires&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4c3335054e1d495b85843673e9ffac93316b41" translate="yes" xml:space="preserve">
          <source>What Can be Cached?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557d68571b32acf2f5faa576f9cdf9cc1de465d7" translate="yes" xml:space="preserve">
          <source>What Directives are Allowed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53cb07e8ee67e2f950cccd703013e470b5ef972" translate="yes" xml:space="preserve">
          <source>What SSL Ciphers are supported by mod_ssl?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d50d473c71ef00b8d2ff2317cceb35e67ac9b29" translate="yes" xml:space="preserve">
          <source>What Should Not be Cached?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdea98ed6b70c4ec408c06896ad081b3a318ca3" translate="yes" xml:space="preserve">
          <source>What are RSA Private Keys, CSRs and Certificates?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c2dd8f1f6d6f1b54a7aeaa367217207ed1b150" translate="yes" xml:space="preserve">
          <source>What are SSI?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c451360e1d481ad0787a4cff6900f5bc66d6e2" translate="yes" xml:space="preserve">
          <source>What else can I config?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd343b45a5e01f941c9d4dd6684817785df60d20" translate="yes" xml:space="preserve">
          <source>What information resources are available in case of mod_ssl problems?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c757978176540bb0527abf0a83336b3aa0836f95" translate="yes" xml:space="preserve">
          <source>What information should I provide when writing a bug report?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b623e9359778cc623858ee531dd070dd19419866" translate="yes" xml:space="preserve">
          <source>What is IP-based virtual hosting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa48987a45721c3577023cf848292dc79bf617c" translate="yes" xml:space="preserve">
          <source>What is a Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504d3e30fd82d371f95aab3a34f2475979f3fa4f" translate="yes" xml:space="preserve">
          <source>What is a session?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b47c7d098d6508e56802c87b613f5c7e290166" translate="yes" xml:space="preserve">
          <source>What support contacts are available in case of mod_ssl problems?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e51f6561157e91550e99ed7b419b6c51d37604a" translate="yes" xml:space="preserve">
          <source>What the server will return to the client in case of an error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b633337049dba11d4154da9810031647dcf22be8" translate="yes" xml:space="preserve">
          <source>What they are/How to use them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba46f290995d8703da39b31a222bbd4b84dfcfd1" translate="yes" xml:space="preserve">
          <source>What to use When</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968e72259bfafe74221425760d23b0250d2f0745" translate="yes" xml:space="preserve">
          <source>What's going on behind the scenes?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4b36bc57457b9920995102b0eb6da42363fb68" translate="yes" xml:space="preserve">
          <source>What's next?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13d0e41545f9a560f193f28b8cca334e91d0153" translate="yes" xml:space="preserve">
          <source>When (not) to use .htaccess files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a04574d765e2a6e864d41763fc3a4c72b53bc3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; is used in &lt;code&gt;VirtualHost&lt;/code&gt; or server context with version 2.2.22 or later of httpd, &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; will only process the rewrite rules if the request URI is a URL-path. This avoids some security issues where particular rules could allow &quot;surprising&quot; pattern expansions (see &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3368&quot;&gt;CVE-2011-3368&lt;/a&gt; and &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-4317&quot;&gt;CVE-2011-4317&lt;/a&gt;). To lift the restriction on matching a URL-path, the &lt;code&gt;AllowAnyURI&lt;/code&gt; option can be enabled, and &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; will apply the rule set to any request URI string, regardless of whether that string matches the URL-path grammar required by the HTTP specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a132c3582afa943538ddda51268d47fc6a0d02c1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; is built into Apache or at least loaded (under DSO situation) additional functions exist for the &lt;a href=&quot;mod_log_config#formats&quot;&gt;Custom Log Format&lt;/a&gt; of &lt;code&gt;&lt;a href=&quot;mod_log_config&quot;&gt;mod_log_config&lt;/a&gt;&lt;/code&gt;. First there is an additional ``&lt;code&gt;%{&lt;/code&gt;&lt;em&gt;varname&lt;/em&gt;&lt;code&gt;}x&lt;/code&gt;'' eXtension format function which can be used to expand any variables provided by any module, especially those provided by mod_ssl which can you find in the above table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7de6e58ac602e01ec132702475be1563c35a15" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; is built into Apache or at least loaded (under DSO situation) any &lt;a name=&quot;envvars&quot;&gt;variables&lt;/a&gt; provided by &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; can be used in expressions for the &lt;a href=&quot;../expr&quot;&gt;ap_expr Expression Parser&lt;/a&gt;. The variables can be referenced using the syntax ``&lt;code&gt;%{&lt;/code&gt;&lt;em&gt;varname&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;''. Starting with version 2.4.18 one can also use the &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; style syntax ``&lt;code&gt;%{SSL:&lt;/code&gt;&lt;em&gt;varname&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;'' or the function style syntax ``&lt;code&gt;ssl(&lt;/code&gt;&lt;em&gt;varname&lt;/em&gt;&lt;code&gt;)&lt;/code&gt;''.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96ec3d368fbf121682131819cb18be77e00eda9" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;mod_usertrack&quot;&gt;mod_usertrack&lt;/a&gt;&lt;/code&gt; is loaded, and &lt;code&gt;CookieTracking on&lt;/code&gt; is set, Apache will send a user-tracking cookie for all new requests. This directive can be used to turn this behavior on or off on a per-server or per-directory basis. By default, enabling &lt;code&gt;&lt;a href=&quot;mod_usertrack&quot;&gt;mod_usertrack&lt;/a&gt;&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; activate cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629e2997d8013a04d1a54a8a328560ff1cf11b99" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; is run it will take several minutes to test for the availability of features on your system and build Makefiles which will later be used to compile the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ead7c963a0fb3d76a6b95eabb9a28369ca3248e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; is used to launch CGI scripts, the environment will be cleaned down to a set of &lt;em&gt;safe&lt;/em&gt; variables before CGI scripts are launched. The list of &lt;em&gt;safe&lt;/em&gt; variables is defined at compile-time in &lt;code&gt;suexec.c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5bcbf6e2713a8626c6ed412ab9fa0aa85bda6d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;AuthLDAPSubGroupAttribute&lt;/code&gt; overlaps with &lt;code&gt;AuthLDAPGroupAttribute&lt;/code&gt; (as it does by default and as required by common LDAP schemas), uncached searching for subgroups in large groups can be very slow. If you use large, non-nested groups, set &lt;code&gt;AuthLDAPMaxSubGroupDepth&lt;/code&gt; to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a286a5882af52d9b9df4b56fd9a04721a667c90" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;reqenv&lt;/code&gt; is used outside of &amp;lt;&lt;code&gt;&lt;a href=&quot;mod/core#if&quot;&gt;If&lt;/a&gt;&lt;/code&gt;&amp;gt;, the resolution will generally occur later, but the exact timing depends on the directive the expression has been used within.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b7f561986493d2500017922ec129eaa373bc6f" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;NOT&lt;/strong&gt; to use mod_rewrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b1ca118b14c3e1277b607b60469ca4d041241f" translate="yes" xml:space="preserve">
          <source>When Alice sends a message to the bank, the bank needs to ensure that the message is really from her, so an intruder cannot request a transaction involving her account. A &lt;em&gt;digital signature&lt;/em&gt;, created by Alice and included with the message, serves this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29db440ec4847aad1f6841d428ca245dd73120fa" translate="yes" xml:space="preserve">
          <source>When Apache issues a redirect in response to a client request, the response includes some actual text to be displayed in case the client can't (or doesn't) automatically follow the redirection. Apache ordinarily labels this text according to the character set which it uses, which is ISO-8859-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796b0a0f6e7ef10be8181819dfce5b487abf7e80" translate="yes" xml:space="preserve">
          <source>When Apache starts up it has to read the various Certificate (see &lt;code&gt;&lt;a href=&quot;#sslcertificatefile&quot;&gt;SSLCertificateFile&lt;/a&gt;&lt;/code&gt;) and Private Key (see &lt;code&gt;&lt;a href=&quot;#sslcertificatekeyfile&quot;&gt;SSLCertificateKeyFile&lt;/a&gt;&lt;/code&gt;) files of the SSL-enabled virtual servers. Because for security reasons the Private Key files are usually encrypted, mod_ssl needs to query the administrator for a Pass Phrase in order to decrypt those files. This query can be done in two ways which can be configured by &lt;em&gt;type&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ca9ca31b86ffe963a54cdea12d3d3a866b0736" translate="yes" xml:space="preserve">
          <source>When Basic authentication isn't provided by the client and the authorizer determines the user, this expression, evaluated after calling the authorizer, determines the user. The expression follows &lt;a href=&quot;../expr&quot;&gt; ap_expr syntax&lt;/a&gt; and must resolve to a string. A typical use is to reference a &lt;code&gt;Variable-&lt;em&gt;XXX&lt;/em&gt;&lt;/code&gt; setting returned by the authorizer using an option like &lt;code&gt;UserExpr &quot;%{reqenv:&lt;em&gt;XXX&lt;/em&gt;}&quot;&lt;/code&gt;. If this option is specified and the user id can't be retrieved using the expression after a successful authentication, the request will be rejected with a 500 error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292d5c6069381d98a55812b49933eea688099428" translate="yes" xml:space="preserve">
          <source>When I use Basic Authentication over HTTPS the lock icon in Netscape browsers stays unlocked when the dialog pops up. Does this mean the username/password is being sent unencrypted?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215baf8819dfe6106de7ec9388d0b2fd0de11021" translate="yes" xml:space="preserve">
          <source>When KeepAlive connections are used with SSL, the overhead of the SSL handshake is reflected in the byte count of the first request on the connection. When per-directory SSL renegotiation occurs, the bytes are associated with the request that triggered the renegotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24429735e99a5b8e6f2e9a89926ccfc3ceb6a8ed" translate="yes" xml:space="preserve">
          <source>When OCSP stapling is enabled, the &lt;code&gt;ssl-stapling&lt;/code&gt; mutex is used to control access to the OCSP stapling cache in order to prevent corruption, and the &lt;code&gt;sss-stapling-refresh&lt;/code&gt; mutex is used to control refreshes of OCSP responses. These mutexes can be configured using the &lt;code&gt;&lt;a href=&quot;core#mutex&quot;&gt;Mutex&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60de85273e0f8cf7172fa235edf29b139ca0c3a" translate="yes" xml:space="preserve">
          <source>When Off, suEXEC will be disabled even if the suexec binary exists and has a valid owner and file mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47aa8907a3d20fae395f03a0f7f9ac81bac05325" translate="yes" xml:space="preserve">
          <source>When On, startup will fail if the suexec binary doesn't exist or has an invalid owner or file mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9217de47c636d83429f3b61714179b4b18158c" translate="yes" xml:space="preserve">
          <source>When a Lua filter is used as the underlying provider via the &lt;code&gt;&lt;a href=&quot;mod_filter#filterprovider&quot;&gt;FilterProvider&lt;/a&gt;&lt;/code&gt; directive, filtering will only work when the &lt;var&gt;filter-name&lt;/var&gt; is identical to the &lt;var&gt;provider-name&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92d97c62870f546b2caef6946133fcee9778349" translate="yes" xml:space="preserve">
          <source>When a MapType of &lt;code&gt;dbd&lt;/code&gt; or &lt;code&gt;fastdbd&lt;/code&gt; is used, the MapSource is a SQL SELECT statement that takes a single argument and returns a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee786f1faa14ba272b6ae946644e85ed34bccc1f" translate="yes" xml:space="preserve">
          <source>When a MapType of &lt;code&gt;dbm&lt;/code&gt; is used, the MapSource is a filesystem path to a DBM database file containing key/value pairs to be used in the mapping. This works exactly the same way as the &lt;code&gt;txt&lt;/code&gt; map, but is much faster, because a DBM is indexed, whereas a text file is not. This allows more rapid access to the desired key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02b5eab4aa53dce80680ff482dd49e95bc77939" translate="yes" xml:space="preserve">
          <source>When a MapType of &lt;code&gt;int&lt;/code&gt; is used, the MapSource is one of the available internal &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; functions. Module authors can provide additional internal functions by registering them with the &lt;code&gt;ap_register_rewrite_mapfunc&lt;/code&gt; API. The functions that are provided by default are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551de9ebab2ef24b7e92aa2e1bf03561ba33c236" translate="yes" xml:space="preserve">
          <source>When a MapType of &lt;code&gt;prg&lt;/code&gt; is used, the MapSource is a filesystem path to an executable program which will providing the mapping behavior. This can be a compiled binary file, or a program in an interpreted language such as Perl or Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd4fb94063fb05777436136e820c1df6241de77" translate="yes" xml:space="preserve">
          <source>When a MapType of &lt;code&gt;rnd&lt;/code&gt; is used, the MapSource is a filesystem path to a plain-text mapping file, each line of which contains a key, and one or more values separated by &lt;code&gt;|&lt;/code&gt;. One of these values will be chosen at random if the key is matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a225e9df1d6eee91b64239a4f67a3ef76f27121b" translate="yes" xml:space="preserve">
          <source>When a MapType of &lt;code&gt;txt&lt;/code&gt; is used, the MapSource is a filesystem path to a plain-text mapping file, containing one space-separated key/value pair per line. Optionally, a line may contain a comment, starting with a '#' character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee095f83c4a43d3010c3f043df254c7ded120c6" translate="yes" xml:space="preserve">
          <source>When a URI is accessed that is served by the handler &lt;code&gt;form-logout-handler&lt;/code&gt;, the page specified by this directive will be shown to the end user. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be85721c0e70340fd22fb31b22d945d451b8ceff" translate="yes" xml:space="preserve">
          <source>When a cache stores a representation, it associates it with the request URL. The next time that URL is requested, the cache can use the stored representation. But, if the resource is negotiable at the server, this might result in only the first requested variant being cached and subsequent cache hits might return the wrong response. To prevent this, httpd normally marks all responses that are returned after content negotiation as non-cacheable by HTTP/1.0 clients. httpd also supports the HTTP/1.1 protocol features to allow caching of negotiated responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa014e09b6538296075007552a27d97993dcf17" translate="yes" xml:space="preserve">
          <source>When a cached entry becomes stale, &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will submit a conditional request to the backend, which is expected to confirm whether the cached entry is still fresh, and send an updated entity if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dd5864f7b24657b97dfe50d473bcff47ff3362" translate="yes" xml:space="preserve">
          <source>When a child process is exiting due to shutdown, restart, or &lt;code&gt;&lt;a href=&quot;mpm_common#maxconnectionsperchild&quot;&gt;MaxConnectionsPerChild&lt;/a&gt;&lt;/code&gt;, active requests in the exiting process have &lt;code&gt;&lt;a href=&quot;core#timeout&quot;&gt;TimeOut&lt;/a&gt;&lt;/code&gt; seconds to finish before processing is aborted. Alternate types of restart and shutdown are not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12f0251b6bae07f268577cce68006d688422711" translate="yes" xml:space="preserve">
          <source>When a client certificate is requested by mod_ssl, a list of &lt;em&gt;acceptable Certificate Authority names&lt;/em&gt; is sent to the client in the SSL handshake. These CA names can be used by the client to select an appropriate client certificate out of those it has available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f90d10a5e38b37962abc259e71f586432ffc1c" translate="yes" xml:space="preserve">
          <source>When a client requests a DAV resource lock, it can also specify a time when the lock will be automatically removed by the server. This value is only a request, and the server can ignore it or inform the client of an arbitrary value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3a42d6f9fec98bbee140752618dea3cad08a67" translate="yes" xml:space="preserve">
          <source>When a client requests a page on your server, but the server cannot find a single page that matches the &lt;code&gt;Accept-language&lt;/code&gt; sent by the browser, the server will return either a &quot;No Acceptable Variant&quot; or &quot;Multiple Choices&quot; response to the client. To avoid these error messages, it is possible to configure httpd to ignore the &lt;code&gt;Accept-language&lt;/code&gt; in these cases and provide a document that does not explicitly match the client's request. The &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation#forcelanguagepriority&quot;&gt;ForceLanguagePriority&lt;/a&gt;&lt;/code&gt; directive can be used to override one or both of these error messages and substitute the servers judgement in the form of the &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation#languagepriority&quot;&gt;LanguagePriority&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cd048d1c4fed99109ce95117f13fde6a256a74" translate="yes" xml:space="preserve">
          <source>When a client uses a Keep-Alive connection, it will be counted as a single &quot;request&quot; for the &lt;code&gt;&lt;a href=&quot;mpm_common#maxconnectionsperchild&quot;&gt;MaxConnectionsPerChild&lt;/a&gt;&lt;/code&gt; directive, regardless of how many requests are sent using the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7162621ff4afa80b8a10cee0333c623269a8f8f1" translate="yes" xml:space="preserve">
          <source>When a conditional request is received by an origin server, the origin server should check whether the ETag or the Last-Modified parameter has changed, as appropriate for the request. If not, the origin should respond with a terse &quot;304 Not Modified&quot; response. This signals to the cache that the stale content is still fresh should be used for subsequent requests until the content's new freshness lifetime is reached again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4999023d4803ff6bcf8239ae23f69556b9ab4baa" translate="yes" xml:space="preserve">
          <source>When a configuration section contains &lt;code&gt;AuthMerging And&lt;/code&gt; or &lt;code&gt;AuthMerging Or&lt;/code&gt;, its authorization logic is combined with that of the nearest predecessor (according to the overall order of configuration sections) which also contains authorization logic as if the two sections were jointly contained within a &lt;code&gt;&lt;a href=&quot;#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt; directive, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b7cc83c6b8202acc041055c9ddd2a6023e3f79" translate="yes" xml:space="preserve">
          <source>When a module does work, it can be added to the server in one of two ways. As with Unix, it can be compiled into the server. Because Apache httpd for Windows does not have the &lt;code&gt;Configure&lt;/code&gt; program of Apache httpd for Unix, the module's source file must be added to the ApacheCore project file, and its symbols must be added to the &lt;code&gt;os\win32\modules.c&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5147efe404d949542827af2887254ff60d77ec" translate="yes" xml:space="preserve">
          <source>When a particular level is specified, messages from all other levels of higher significance will be reported as well. &lt;em&gt;E.g.&lt;/em&gt;, when &lt;code&gt;LogLevel info&lt;/code&gt; is specified, then messages with log levels of &lt;code&gt;notice&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; will also be posted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0147aa99a95af58978408ce9d48c326ca68d0ec" translate="yes" xml:space="preserve">
          <source>When a program runs through the web server as a CGI program, it may not have the same &lt;code&gt;PATH&lt;/code&gt;. Any programs that you invoke in your CGI program (like &lt;code&gt;sendmail&lt;/code&gt;, for example) will need to be specified by a full path, so that the shell can find them when it attempts to execute your CGI program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec812401660af284fdfee140ed68e38262b23240" translate="yes" xml:space="preserve">
          <source>When a proxy is configured to forward requests to a remote SSL server, this directive can be used to configure certificate verification of the remote server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857c190c79c0462441b178feb915e2150d34f86c" translate="yes" xml:space="preserve">
          <source>When a relative substitution is made in directory (htaccess) context and &lt;code&gt;&lt;a href=&quot;#rewritebase&quot;&gt;RewriteBase&lt;/a&gt;&lt;/code&gt; has not been set, this module uses some extended URL and filesystem context information to change the relative substitution back into a URL. Modules such as &lt;code&gt;&lt;a href=&quot;mod_userdir&quot;&gt;mod_userdir&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; supply this extended context info. Available in 2.4.16 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7c9405d551bce98b8e101c5975614bf5009fc9" translate="yes" xml:space="preserve">
          <source>When a request arrives, the server will find the best (most specific) matching &lt;code&gt;&lt;a href=&quot;../mod/core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; argument based on the IP address and port used by the request. If there is more than one virtual host containing this best-match address and port combination, Apache will further compare the &lt;code&gt;&lt;a href=&quot;../mod/core#servername&quot;&gt;ServerName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/core#serveralias&quot;&gt;ServerAlias&lt;/a&gt;&lt;/code&gt; directives to the server name present in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163f587c42e0415f7d28a7fd3df02e0f5e820ec9" translate="yes" xml:space="preserve">
          <source>When a request is received, the server first maps it to the best matching &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; based on the local IP address and port combination only. Non-wildcards have a higher precedence. If no match based on IP and port occurs at all, the &quot;main&quot; server configuration is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c87cdc016dd1e91330c0582cd2429c42d0ae21" translate="yes" xml:space="preserve">
          <source>When a reverse proxied URL is to be deleted, the effective URL is constructed from the &lt;strong&gt;Host&lt;/strong&gt; header, the &lt;strong&gt;port&lt;/strong&gt;, the &lt;strong&gt;path&lt;/strong&gt; and the &lt;strong&gt;query&lt;/strong&gt;. Note the '?' in the URL must always be specified explicitly, whether a query string is present or not. For example, an attempt to delete the path &lt;strong&gt;/&lt;/strong&gt; from the server &lt;strong&gt;localhost&lt;/strong&gt;, the URL to delete would be &lt;strong&gt;http://localhost:80/?&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5519d8d538f0b87b20bb13e334452fdff4452904" translate="yes" xml:space="preserve">
          <source>When a server/vhost does not have h2 or h2c enabled via &lt;code&gt;&lt;a href=&quot;core#protocols&quot;&gt;Protocols&lt;/a&gt;&lt;/code&gt;, the connection is never inspected for a HTTP/2 preamble. &lt;code&gt;H2Direct&lt;/code&gt; does not matter then. This is important for connections that use protocols where an initial read might hang indefinitely, such as NNTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e729f29e117c4b97c22c0addf1cb32c7c3c30b1c" translate="yes" xml:space="preserve">
          <source>When a stream &lt;em&gt;depends&lt;/em&gt; on another, say X depends on Y, then Y gets all bandwidth before X gets any. Note that this does not mean that Y will block X. If Y has no data to send, all bandwidth allocated to Y can be used by X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a2a00e6f833976fcf995ee2b2f4088f555f500" translate="yes" xml:space="preserve">
          <source>When a stream has more than one dependant, say X1 and X2 both depend on Y, the &lt;em&gt;weight&lt;/em&gt; determines the bandwidth allocation. If X1 and X2 have the same weight, they both get half of the available bandwidth. If the weight of X1 is twice as large as that for X2, X1 gets twice the bandwidth of X2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976c7cd9424ffed8c10154abdbcec94f9b855b16" translate="yes" xml:space="preserve">
          <source>When a virtual host is known by one of many different server aliases, ensuring that &lt;code&gt;&lt;a href=&quot;mod/core#usecanonicalname&quot;&gt;UseCanonicalName&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt; can dramatically improve the ratio of cache hits. This is because the hostname of the virtual-host serving the content is used within the cache key. With the setting set to &lt;code&gt;On&lt;/code&gt; virtual-hosts with multiple server names or aliases will not produce differently cached entities, and instead content will be cached as per the canonical hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda71e715973c1da943b42f487702ad4b5366362" translate="yes" xml:space="preserve">
          <source>When acting as a forward proxy server, &lt;var&gt;url-string&lt;/var&gt; must minimally begin with a protocol for which caching should be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17528f2a2b60077e649914c9c5f47e8dfe382f3e" translate="yes" xml:space="preserve">
          <source>When acting in SysV init mode, &lt;code&gt;apachectl&lt;/code&gt; takes simple, one-word commands, defined below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe798b151617f689a0d2b5af38f64b51acf786e" translate="yes" xml:space="preserve">
          <source>When acting in a reverse-proxy mode (using the &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directive, for example), &lt;code&gt;&lt;a href=&quot;mod_proxy_http&quot;&gt;mod_proxy_http&lt;/a&gt;&lt;/code&gt; adds several request headers in order to pass information to the origin server. These headers are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94905f090986100fa7c6822f1150c19738a8b51" translate="yes" xml:space="preserve">
          <source>When acting in pass-through mode, &lt;code&gt;apachectl&lt;/code&gt; can take all the arguments available for the &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82188932584c75e195c92bd7ba98a33b1fad03f" translate="yes" xml:space="preserve">
          <source>When added to a directory/location HTTP/2 PUSHes will be attempted for all paths added via this directive. This directive can be used several times for the same location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a14397a21286ca674b4287454a32b59daf66f49" translate="yes" xml:space="preserve">
          <source>When adding users via FrontPage, FrontPage administrators should choose usernames that already exist in the LDAP directory (for obvious reasons). Also, the password that the administrator enters into the form is ignored, since Apache will actually be authenticating against the password in the LDAP database, and not against the password in the local user file. This could cause confusion for web administrators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11022806beb2f3f94e4cc4f6f48af01e7ac7612a" translate="yes" xml:space="preserve">
          <source>When all the worker threads are idle, then absolute maximum numbers of concurrent connections can be calculared in a simpler way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267ff0b4785b8d1c421755f1797a443bc1bf5cd1" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;&lt;a href=&quot;core#acceptfilter&quot;&gt;AcceptFilter&lt;/a&gt;&lt;/code&gt; is in use (usually the case on Linux and FreeBSD), the socket is not sent to the server process before at least one byte (or the whole request for &lt;code&gt;httpready&lt;/code&gt;) is received. The header timeout configured with &lt;code&gt;RequestReadTimeout&lt;/code&gt; is only effective after the server process has received the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a22e3bd75a198384380f043581b689df81eda0" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;ETag&lt;/code&gt; header exists in the original cached response, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will add an &lt;code&gt;If-None-Match&lt;/code&gt; header to the request to the origin server. When a &lt;code&gt;Last-Modified&lt;/code&gt; header exists in the original cached response, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will add an &lt;code&gt;If-Modified-Since&lt;/code&gt; header to the request to the origin server. Performing either of these actions makes the request &lt;strong&gt;conditional&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667b2ee8880f87a800b2fc278de24efbd758416a" translate="yes" xml:space="preserve">
          <source>When an entity is cached for the first time, a lock will be created for the entity until the response has been fully cached. During the lifetime of the lock, the cache will suppress the second and subsequent attempt to cache the same entity. While this doesn't hold back the thundering herd, it does stop the cache attempting to cache the same entity multiple times simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b345dddad168779c83a44cfc362415294b3c82b0" translate="yes" xml:space="preserve">
          <source>When an entity reaches its freshness lifetime and becomes stale, a lock will be created for the entity until the response has either been confirmed as still fresh, or replaced by the backend. During the lifetime of the lock, the second and subsequent incoming request will cause stale data to be returned, and the thundering herd is kept at bay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85289c936be579913742b8820a86c154d98478f" translate="yes" xml:space="preserve">
          <source>When an httpd child is created, the counter is initialized with ( current microseconds divided by 10 ) modulo 65536 (this formula was chosen to eliminate some variance problems with the low order bits of the microsecond timers on some systems). When a unique identifier is generated, the time stamp used is the time the request arrived at the web server. The counter is incremented every time an identifier is generated (and allowed to roll over).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec32eff29a0d895b1b9d4c5cc4e37397923725d3" translate="yes" xml:space="preserve">
          <source>When any directive provided by this module is used in a new configuration section, no directives provided by this module are inherited from previous configuration sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8d78630ceedef24a3fed989d6ea9690082b4fa" translate="yes" xml:space="preserve">
          <source>When authorization is enabled, it is normally inherited by each subsequent &lt;a href=&quot;../sections#merging&quot;&gt;configuration section&lt;/a&gt;, unless a different set of authorization directives is specified. This is the default action, which corresponds to an explicit setting of &lt;code&gt;AuthMerging Off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9451f9aa2994c99df42d1284528bc901784549f" translate="yes" xml:space="preserve">
          <source>When choosing a cipher during an SSLv3 or TLSv1 handshake, normally the client's preference is used. If this directive is enabled, the server's preference will be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1977e78c0d2c84104659ea37bd26e7e7a1936d" translate="yes" xml:space="preserve">
          <source>When choosing the LDAP URL, the attribute to use for authentication should be something that will also be valid for putting into a &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; user file. The user ID is ideal for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fea6327c5f8ca9fc8e9fffdf101ac0d4bbad1c" translate="yes" xml:space="preserve">
          <source>When configured via &lt;code&gt;&lt;a href=&quot;mod_proxy#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_proxy#proxypassmatch&quot;&gt;ProxyPassMatch&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; will not set the &lt;var&gt;PATH_INFO&lt;/var&gt; environment variable. This allows the backend FCGI server to correctly determine &lt;var&gt;SCRIPT_NAME&lt;/var&gt; and &lt;var&gt;Script-URI&lt;/var&gt; and be compliant with RFC 3875 section 3.3. If instead you need &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; to generate a &quot;best guess&quot; for &lt;var&gt;PATH_INFO&lt;/var&gt;, set this env-var. This is a workaround for a bug in some FCGI implementations. This variable can be set to multiple values to tweak at how the best guess is chosen (In 2.4.11 and later only):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248dbb762c114b12f20d41a6c689f50d47c9328b" translate="yes" xml:space="preserve">
          <source>When configured, the CGI error log logs any CGI which does not execute properly. Each CGI script which fails to operate causes several lines of information to be logged. The first two lines are always of the format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd941fd9b27e5b13f81b555503c2650872f44a1" translate="yes" xml:space="preserve">
          <source>When configuring the login as a standalone page, unsuccessful authentication attempts should be redirected to a login form created by the website for this purpose, using the &lt;code&gt;&lt;a href=&quot;#authformloginrequiredlocation&quot;&gt;AuthFormLoginRequiredLocation&lt;/a&gt;&lt;/code&gt; directive. Typically this login page will contain an HTML form, asking the user to provide their usename and password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ef2b9a38a1ae4a929f20e44f7cfc6344d818e2" translate="yes" xml:space="preserve">
          <source>When connecting to an SSL website, use the provided client certificate in PEM format to authenticate with the server. The file is expected to contain the client certificate, followed by intermediate certificates, followed by the private key. Available in 2.4.36 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb024a4a0c2381c425b574770dec3959bc35395" translate="yes" xml:space="preserve">
          <source>When content expires from the cache and becomes stale, rather than pass on the original request, httpd will modify the request to make it conditional instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faae74d89db6e6c2e508290509a3178e6ec7e1d9" translate="yes" xml:space="preserve">
          <source>When disabled, the cache operates as a normal handler, and is subject to the full set of phases when handling a server request. While this mode is slower than the default, it allows the cache to be used in cases where full processing is required, such as when content is subject to authorisation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ea5070419ee5104bc4e4a7a05835d6e44b486b" translate="yes" xml:space="preserve">
          <source>When disabling authentication, note that clients which have already authenticated against another portion of the server's document tree will typically continue to send authentication HTTP headers or cookies with each request, regardless of whether the server actually requires authentication for every resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cac2864dd9f229f94610bad5ff04db7234154d" translate="yes" xml:space="preserve">
          <source>When doing searches, the attribute, filter and username passed by the HTTP client are combined to create a search filter that looks like &lt;code&gt;(&amp;amp;(&lt;em&gt;filter&lt;/em&gt;)(&lt;em&gt;attribute&lt;/em&gt;=&lt;em&gt;username&lt;/em&gt;))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218558494c54dbb782d7da3c73c462c1113b63dd" translate="yes" xml:space="preserve">
          <source>When editing CGI scripts on Windows, end-of-line characters may be appended to the interpreter path. Ensure that files are then transferred to the server in ASCII mode. Failure to do so may result in &quot;Command not found&quot; warnings from the OS, due to the unrecognized end-of-line character being interpreted as a part of the interpreter filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa790bd316f30b1d7b8de09d19f16bd4feeab2d6" translate="yes" xml:space="preserve">
          <source>When enabled and a query to an OCSP responder for stapling purposes fails, mod_ssl will synthesize a &quot;tryLater&quot; response for the client. Only effective if &lt;code&gt;&lt;a href=&quot;#sslstaplingreturnrespondererrors&quot;&gt;SSLStaplingReturnResponderErrors&lt;/a&gt;&lt;/code&gt; is also enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30fa438196b70885c611746f968ef81d7b44e10" translate="yes" xml:space="preserve">
          <source>When enabled, mod_ssl will pass responses from unsuccessful stapling related OCSP queries (such as responses with an overall status other than &quot;successful&quot;, responses with a certificate status other than &quot;good&quot;, expired responses etc.) on to the client. If set to &lt;code&gt;off&lt;/code&gt;, only responses indicating a certificate status of &quot;good&quot; will be included in the TLS handshake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51adfde711b6f451be0a979c2f5f0eeeba50ca0e" translate="yes" xml:space="preserve">
          <source>When enabled, this option will pass the Host: line from the incoming request to the proxied host, instead of the hostname specified in the &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a667a967d93fe44971122854bfcc2d78462af33" translate="yes" xml:space="preserve">
          <source>When entering a file path on non-Unix platforms, care should be taken to make sure that only forward slashed are used even though the platform may allow the use of back slashes. In general it is a good idea to always use forward slashes throughout the configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d15344a6cca02605d39aa585d94e3ac54614674" translate="yes" xml:space="preserve">
          <source>When entering a file path on non-Unix platforms, care should be taken to make sure that only forward slashes are used even though the platform may allow the use of back slashes. In general it is a good idea to always use forward slashes throughout the configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353ca2c38fa31c4d6abf8949571ecfc1307e36d1" translate="yes" xml:space="preserve">
          <source>When environment variables are looked up within an &amp;lt;&lt;code&gt;&lt;a href=&quot;mod/core#if&quot;&gt;If&lt;/a&gt;&lt;/code&gt;&amp;gt; condition, it's important to consider how extremely early in request processing that this resolution occurs. As a guideline, any directive defined outside of virtual host context (directory, location, htaccess) is not likely to have yet had a chance to execute. &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; in virtual host scope is one directive that runs prior to this resolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e27dc501111a9a83bf2376335c0f8d1d1698de3" translate="yes" xml:space="preserve">
          <source>When even more powerful substitution is required, the rewriting engine provided by &lt;code&gt;&lt;a href=&quot;mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; can be useful. The directives provided by this module can use characteristics of the request such as browser type or source IP address in deciding from where to serve content. In addition, mod_rewrite can use external database files or programs to determine how to handle a request. The rewriting engine is capable of performing all three types of mappings discussed above: internal redirects (aliases), external redirects, and proxying. Many practical examples employing mod_rewrite are discussed in the &lt;a href=&quot;rewrite/index&quot;&gt;detailed mod_rewrite documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faf4c7557d2041a6fbc9586076992cf22294024" translate="yes" xml:space="preserve">
          <source>When exchanging binary files between the mainframe host and a Unix machine or Windows PC, be sure to use the ftp &quot;binary&quot; (&lt;code&gt;TYPE I&lt;/code&gt;) command, or use the &lt;code&gt;rcp -b&lt;/code&gt; command from the mainframe host (the &lt;code&gt;-b&lt;/code&gt; switch is not supported in unix &lt;code&gt;rcp&lt;/code&gt;'s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77d0bac11c3ffb179899595c2ff2686e3a867d7" translate="yes" xml:space="preserve">
          <source>When explicit directives such as &lt;code&gt;&lt;a href=&quot;#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; do not apply to the current request, the internal handler name normally set by those directives is set to match the content type specified by this directive. This is a historical behavior that some third-party modules (such as mod_php) may use &quot;magic&quot; content types used only to signal the module to take responsibility for the matching request. Configurations that rely on such &quot;magic&quot; types should be avoided by the use of &lt;code&gt;&lt;a href=&quot;#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee6c801a58b67c2ec4e89888d878392b2efdcbb" translate="yes" xml:space="preserve">
          <source>When explicit directives such as &lt;code&gt;&lt;a href=&quot;core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; do not apply to the current request, the internal handler name normally set by those directives is instead set to the content type specified by this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53de5c958b3748ce5faf184fdf43c4c9369608d6" translate="yes" xml:space="preserve">
          <source>When httpd is restarted, special consideration must be made for changes to &lt;code&gt;&lt;a href=&quot;mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directives. During a restart, httpd keeps ports bound (as in the original configuration) to avoid generating &quot;Connection refused&quot; errors for any new attempts to connect to the server. If changes are made to the set of &lt;code&gt;&lt;a href=&quot;mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directives used which conflict with the old configuration, configuration will fail and the server will terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40ef64e9a99056e876910610e7cf3a2380584f0" translate="yes" xml:space="preserve">
          <source>When httpd is used in front of an expensive content generator, buffering the response may allow the backend to complete processing and release resources sooner, depending on how the backend is designed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1866d88ddfeed4059114015476162b852c7ba462" translate="yes" xml:space="preserve">
          <source>When httpd starts, it binds to some port and address on the local machine and waits for incoming requests. By default, it listens to all addresses on the machine. However, it may need to be told to listen on specific ports, or only on selected addresses, or a combination of both. This is often combined with the &lt;a href=&quot;vhosts/index&quot;&gt;Virtual Host&lt;/a&gt; feature, which determines how &lt;code&gt;httpd&lt;/code&gt; responds to different IP addresses, hostnames and ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78198e7ec462036c1b5a96c37c656720011ee9df" translate="yes" xml:space="preserve">
          <source>When in auto drive mode, the module will check every 12 hours at least what the status of the managed domains is and if it needs to do something. On errors, for example when the CA is unreachable, it will initially retry after some seconds. Should that continue to fail, it will back off to a maximum interval of hourly checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597eada55cc095848d7b1ff61eb4897b76877371" translate="yes" xml:space="preserve">
          <source>When keep-alives are in use, children will be kept busy doing nothing waiting for more requests on the already open connection. The default &lt;code&gt;&lt;a href=&quot;../mod/core#keepalivetimeout&quot;&gt;KeepAliveTimeout&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;5&lt;/code&gt; seconds attempts to minimize this effect. The tradeoff here is between network bandwidth and server resources. In no event should you raise this above about &lt;code&gt;60&lt;/code&gt; seconds, as &lt;a href=&quot;http://www.hpl.hp.com/techreports/Compaq-DEC/WRL-95-4.html&quot;&gt; most of the benefits are lost&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a56e29e909312c03a58a68c62c97b9a4c00ff4" translate="yes" xml:space="preserve">
          <source>When logging to a regular file, messages of the level &lt;code&gt;notice&lt;/code&gt; cannot be suppressed and thus are always logged. However, this doesn't apply when logging is done using &lt;code&gt;syslog&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661de7aa8b529292785e67013c83d65fc6aba5a1" translate="yes" xml:space="preserve">
          <source>When mod_ssl is enabled, additional functions exist for the &lt;a href=&quot;../mod/mod_log_config#formats&quot;&gt;Custom Log Format&lt;/a&gt; of &lt;code&gt;&lt;a href=&quot;../mod/mod_log_config&quot;&gt;mod_log_config&lt;/a&gt;&lt;/code&gt; as documented in the Reference Chapter. Beside the ``&lt;code&gt;%{&lt;/code&gt;&lt;em&gt;varname&lt;/em&gt;&lt;code&gt;}x&lt;/code&gt;'' eXtension format function which can be used to expand any variables provided by any module, an additional Cryptography ``&lt;code&gt;%{&lt;/code&gt;&lt;em&gt;name&lt;/em&gt;&lt;code&gt;}c&lt;/code&gt;'' cryptography format function exists for backward compatibility. The currently implemented function calls are listed in &lt;a href=&quot;#table3&quot;&gt;Table 3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a72601196ec7d8540a5e92edea364e95416f3b" translate="yes" xml:space="preserve">
          <source>When more than one &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritecond&quot;&gt;RewriteCond&lt;/a&gt;&lt;/code&gt; is specified, they must all match for the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; to be applied. For example, to deny requests that contain the word &quot;hack&quot; in their query string, unless they also contain a cookie containing the word &quot;go&quot;, you could use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d3ed5ed05a63e004506de7150c4ea5cf17ddc9" translate="yes" xml:space="preserve">
          <source>When multiple &lt;code&gt;Require&lt;/code&gt; directives are used in a single &lt;a href=&quot;../sections#merging&quot;&gt;configuration section&lt;/a&gt; and are not contained in another authorization directive like &lt;code&gt;&lt;a href=&quot;#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt;, they are implicitly contained within a &lt;code&gt;&lt;a href=&quot;#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt; directive. Thus the first one to authorize a user authorizes the entire request, and subsequent &lt;code&gt;Require&lt;/code&gt; directives are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5553dbf637dbcc9fa1806095e424f752dd99373" translate="yes" xml:space="preserve">
          <source>When multiple mutexes based on this mechanism are used within multi-threaded, multi-process environments, deadlock errors (EDEADLK) can be reported for valid mutex operations if &lt;code&gt;fcntl()&lt;/code&gt; is not thread-aware, such as on Solaris.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f3bbebb6dbe56a42f078dd53331fed90fa6431" translate="yes" xml:space="preserve">
          <source>When multiple, comma delimited useragent IP addresses are listed in the header value, they are processed in Right-to-Left order. Processing halts when a given useragent IP address is not trusted to present the preceding IP address. The header field is updated to this remaining list of unconfirmed IP addresses, or if all IP addresses were trusted, this header is removed from the request altogether.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb99253b19baf20c451107e46273c69d1edb31d6" translate="yes" xml:space="preserve">
          <source>When name-based virtual hosting is used, the value for this directive is taken from the default (first-listed) virtual host best matching the current IP address and port combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12e17a2c7ccf555be125237f417b02981e8d999" translate="yes" xml:space="preserve">
          <source>When name-based virtual hosting is used, the value for this directive is taken from the default (first-listed) virtual host for the local IP and port combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11887d12e5fb58cc78b43ce17b4288b5c19b97d3" translate="yes" xml:space="preserve">
          <source>When not to use mod_rewrite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db682ef55d9d973c4c0591a7b22654d6b9688fc" translate="yes" xml:space="preserve">
          <source>When placed into an &lt;code&gt;.htaccess&lt;/code&gt; file or a &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; section, this directive forces all matching files to be parsed through the &lt;a href=&quot;../handler&quot;&gt;handler&lt;/a&gt; given by &lt;var&gt;handler-name&lt;/var&gt;. For example, if you had a directory you wanted to be parsed entirely as imagemap rule files, regardless of extension, you might put the following into an &lt;code&gt;.htaccess&lt;/code&gt; file in that directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6600ee605ebc857dd2cf42da8bc6738d8ff95cba" translate="yes" xml:space="preserve">
          <source>When placed into an &lt;code&gt;.htaccess&lt;/code&gt; file or a &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt; section, this directive forces all matching files to be served with the content type identification given by &lt;var&gt;media-type&lt;/var&gt;. For example, if you had a directory full of GIF files, but did not want to label them all with &lt;code&gt;.gif&lt;/code&gt;, you might want to use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c1272c6d40502b0447e36d0580b5f24ff49103" translate="yes" xml:space="preserve">
          <source>When processing more than 150 requests, &lt;code&gt;ab&lt;/code&gt; outputs a progress count on &lt;code&gt;stderr&lt;/code&gt; every 10% or 100 requests or so. The &lt;code&gt;-q&lt;/code&gt; flag will suppress these messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e9fc334cd6f5c57d584a872be6df221ad44fcd" translate="yes" xml:space="preserve">
          <source>When reading data from the client, the length of time to wait for a TCP packet to arrive if the read buffer is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09b2bc3dfd1c7919a2fdcd3469bc870bcf41fcb" translate="yes" xml:space="preserve">
          <source>When receiving the first bad header line, finish reading the headers and treat the remainder as body. This helps to work around buggy backend servers which forget to insert an empty line between the headers and the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc0ac5a4b6213210191d168967516c6accbb3ad" translate="yes" xml:space="preserve">
          <source>When redirecting to a local URL, additional environment variables are set so that the response can be further customized. They are not sent to external URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ee640b97d0503555fec5f6343aa33ba5c319f5" translate="yes" xml:space="preserve">
          <source>When running Apache httpd as a service, you must create a separate account in order to access network resources, as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f766529dc17b5a039dbc31245aba6560978f3a2" translate="yes" xml:space="preserve">
          <source>When running CGI scripts, the method Apache uses to find the interpreter for the script is configurable using the &lt;code&gt;&lt;a href=&quot;../mod/core#scriptinterpretersource&quot;&gt;ScriptInterpreterSource&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7626192a07317ccd594363f7d3813b261af761" translate="yes" xml:space="preserve">
          <source>When running a server with many &lt;a href=&quot;vhosts/index&quot;&gt;virtual hosts&lt;/a&gt;, there are several options for dealing with log files. First, it is possible to use logs exactly as in a single-host server. Simply by placing the logging directives outside the &lt;code&gt;&lt;a href=&quot;mod/core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; sections in the main server context, it is possible to log all requests in the same access log and error log. This technique does not allow for easy collection of statistics on individual virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b8f9444a262a8f66a3143eb97224c14afa7eb8" translate="yes" xml:space="preserve">
          <source>When running httpd as a caching proxy server, there is also the potential for so-called cache poisoning. Cache Poisoning is a broad term for attacks in which an attacker causes the proxy server to retrieve incorrect (and usually undesirable) content from the origin server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213ca46f05c5397d7817aae285985decbbe4c1b5" translate="yes" xml:space="preserve">
          <source>When running, Apache needs write access only to the logs directory and any configured cache directory tree. Due to the issue of case insensitive and short 8.3 format names, Apache must validate all path names given. This means that each directory which Apache evaluates, from the drive root up to the directory leaf, must have read, list and traverse directory permissions. If Apache2.4 is installed at C:\Program Files, then the root directory, Program Files and Apache2.4 must all be visible to Apache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500b9e3d6a36bad9466fdd6ef795cb147165b002" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;On&lt;/code&gt; the 'password' entered is checked for at least one '@' and a '.' to encourage users to enter valid email addresses (see the above &lt;code&gt;&lt;a href=&quot;#anonymous_logemail&quot;&gt;Anonymous_LogEmail&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ef68dcfaf1d70802194a48115fe91f6c25f04c" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;On&lt;/code&gt;, the default, the 'password' entered (which hopefully contains a sensible email address) is logged in the error log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4658ce37b11f80d620fd9cbcd7a9a1d76eccc76" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;On&lt;/code&gt;, users can leave the userID (and perhaps the password field) empty. This can be very convenient for MS-Explorer users who can just hit return or click directly on the OK button; which seems a natural reaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa330499de5706e7a4f57efc701c5d503791fef" translate="yes" xml:space="preserve">
          <source>When set &lt;code&gt;on&lt;/code&gt;, this directive says to use the distinguished name of the client username when checking for group membership. Otherwise, the username will be used. For example, assume that the client sent the username &lt;code&gt;bjenson&lt;/code&gt;, which corresponds to the LDAP DN &lt;code&gt;cn=Babs Jenson, o=Example&lt;/code&gt;. If this directive is set, &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will check if the group has &lt;code&gt;cn=Babs Jenson, o=Example&lt;/code&gt; as a member. If this directive is not set, then &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will check if the group has &lt;code&gt;bjenson&lt;/code&gt; as a member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f46072c513a4b2cd49034f730c371b0388effc8" translate="yes" xml:space="preserve">
          <source>When set to &quot;default&quot;, the underlying SDK's referral chasing state is not changed, &lt;code&gt;LDAPReferralHopLimit&lt;/code&gt; is not used to overide the SDK's hop limit, and no LDAP rebind callback is registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ca2efbed5e6be29de8946ff3c94f94d89a23c6" translate="yes" xml:space="preserve">
          <source>When set to &quot;off&quot;, the underlying SDK's referral chasing state is disabled completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1e82b8ad6394c1a83fed9262c1521da562cfb0" translate="yes" xml:space="preserve">
          <source>When set to &quot;on&quot;, the underlying SDK's referral chasing state is enabled, &lt;code&gt;LDAPReferralHopLimit&lt;/code&gt; is used to override the SDK's hop limit, and an LDAP rebind callback is registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dae0d5038ac2b3de23dba7637ac70c5615e78b" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;on&lt;/code&gt;, PUSH resources announced with &lt;code&gt;H2PushResource&lt;/code&gt; will trigger an interim 103 response before the final response. The 103 response will carry &lt;code&gt;Link&lt;/code&gt; headers that advise the &lt;code&gt;preload&lt;/code&gt; of such resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990397e3fa8e4b61f13558a62a97fb1153638b6b" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;on&lt;/code&gt;, file content is copied while the request is still being processed and the buffered data is passed on to the main connection. This is better if a third party module is injecting files with different lifetimes into the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b142e9fc260b05a2508c164bf81c24cc1fc57927" translate="yes" xml:space="preserve">
          <source>When set to a value of &quot;1&quot;, this variable disables the &lt;code&gt;DEFLATE&lt;/code&gt; output filter provided by &lt;code&gt;&lt;a href=&quot;mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; for content-types other than &lt;code&gt;text/html&lt;/code&gt;. If you'd rather use statically compressed files, &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; evaluates the variable as well (not only for gzip, but for all encodings that differ from &quot;identity&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af969925bf38a7efc916353e59a8fab07a689b14" translate="yes" xml:space="preserve">
          <source>When set, &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; will not save an otherwise cacheable response. This environment variable does not influence whether a response already in the cache will be served for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966e716fa3df4846b1120efbd4b58ed83531149e" translate="yes" xml:space="preserve">
          <source>When set, &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will use the LDAP server to compare the DNs. This is the only foolproof way to compare DNs. &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will search the directory for the DN specified with the &lt;a href=&quot;#reqdn&quot;&gt;&lt;code&gt;Require dn&lt;/code&gt;&lt;/a&gt; directive, then, retrieve the DN and compare it with the DN retrieved from the user entry. If this directive is not set, &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; simply does a string comparison. It is possible to get false negatives with this approach, but it is much faster. Note the &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; cache can speed up DN comparison in most situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154b9a7ca9d9cc54b62d88ee2b1eea96c3b6ffb8" translate="yes" xml:space="preserve">
          <source>When set, and &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; has authenticated the user, LDAP comparisons for authorization use the queried distinguished name (DN) and HTTP basic authentication password of the authenticated user instead of the servers configured credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0c60d0363b112a14ca9de0b5626b707ff8e266" translate="yes" xml:space="preserve">
          <source>When set, and &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; has authenticated the user, LDAP searches for authorization use the queried distinguished name (DN) and HTTP basic authentication password of the authenticated user instead of the servers configured credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442132fa0e38471e4a96b05927bfa1da0f015a65" translate="yes" xml:space="preserve">
          <source>When set, the &lt;code&gt;DEFLATE&lt;/code&gt; filter of &lt;code&gt;&lt;a href=&quot;mod/mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; will be turned off and &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; will refuse to deliver encoded resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3161dc0662c0aa534ab0887a0b09b1f1f81c46" translate="yes" xml:space="preserve">
          <source>When set, this directive limits the action of the spelling correction to lower/upper case changes. Other potential corrections are not performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b18378e6769c3440c4fb1953efb7427de6252f" translate="yes" xml:space="preserve">
          <source>When setting up dynamic content, such as &lt;code&gt;mod_php&lt;/code&gt;, &lt;code&gt;mod_perl&lt;/code&gt; or &lt;code&gt;mod_python&lt;/code&gt;, many security considerations get out of the scope of &lt;code&gt;httpd&lt;/code&gt; itself, and you need to consult documentation from those modules. For example, PHP lets you setup &lt;a href=&quot;http://www.php.net/manual/en/ini.sect.safe-mode.php&quot;&gt;Safe Mode&lt;/a&gt;, which is most usually disabled by default. Another example is &lt;a href=&quot;http://www.hardened-php.net/suhosin/&quot;&gt;Suhosin&lt;/a&gt;, a PHP addon for more security. For more information about those, consult each project documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2429cf206c3ed72bce0f9e65129ae812e4aa537e" translate="yes" xml:space="preserve">
          <source>When starting Apache as a service you may encounter an error message from the Windows Service Control Manager. For example, if you try to start Apache by using the Services applet in the Windows Control Panel, you may get the following message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74d37f28066494d996c4a9080bd9ddeace66dd6" translate="yes" xml:space="preserve">
          <source>When such a construct occurs, the map &lt;em&gt;MapName&lt;/em&gt; is consulted and the key &lt;em&gt;LookupKey&lt;/em&gt; is looked-up. If the key is found, the map-function construct is substituted by &lt;em&gt;SubstValue&lt;/em&gt;. If the key is not found then it is substituted by &lt;em&gt;DefaultValue&lt;/em&gt; or by the empty string if no &lt;em&gt;DefaultValue&lt;/em&gt; was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b9bac023e6e7c61e87252e991edaee6048e26f" translate="yes" xml:space="preserve">
          <source>When such a construct occurs, the map &lt;em&gt;MapName&lt;/em&gt; is consulted and the key &lt;em&gt;LookupKey&lt;/em&gt; is looked-up. If the key is found, the map-function construct is substituted by &lt;em&gt;SubstValue&lt;/em&gt;. If the key is not found then it is substituted by &lt;em&gt;DefaultValue&lt;/em&gt; or by the empty string if no &lt;em&gt;DefaultValue&lt;/em&gt; was specified. Empty values behave as if the key was absent, therefore it is not possible to distinguish between empty-valued keys and absent keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7313dcbd561cff9c771be513cce38dcae02234" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directives are used within a &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section, &lt;a href=&quot;../expr&quot;&gt;expression syntax&lt;/a&gt; can be used to manipulate the destination path or URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3827865c38a1580feae9bcff43d8cd79480a223" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directives are used within a &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section, these directives will take precedence over any globally defined &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fee1859095ff1ab34b27d36f71f09b0eeaaa15" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cachedetailheader&quot;&gt;CacheDetailHeader&lt;/a&gt;&lt;/code&gt; directive is switched on, an &lt;strong&gt;X-Cache-Detail&lt;/strong&gt; header will be added to the response containing the detailed reason for a particular caching decision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d2bfaa69328568744c30f5db8359e46f1aa25e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cacheheader&quot;&gt;CacheHeader&lt;/a&gt;&lt;/code&gt; directive is switched on, an &lt;strong&gt;X-Cache&lt;/strong&gt; header will be added to the response with the cache status of this response. If the normal handler is used, this directive may appear within a &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; directive. If the quick handler is used, this directive must appear within a server or virtual host context, otherwise the setting will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9a53b89197ed92dc2f6d6d69120edc913a072e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cachekeybaseurl&quot;&gt;CacheKeyBaseURL&lt;/a&gt;&lt;/code&gt; directive is specified, the URL provided will be used as the base URL to calculate the URL of the cache keys in the reverse proxy configuration. When not specified, the scheme, hostname and port of the current virtual host is used to construct the cache key. When a cluster of machines is present, and all cached entries should be cached beneath the same cache key, a new base URL can be specified with this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e3918d53a9ae72f4be9c6b4c2feec24509442d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;#cachestaleonerror&quot;&gt;CacheStaleOnError&lt;/a&gt;&lt;/code&gt; directive is switched on, and when stale data is available in the cache, the cache will respond to 5xx responses from the backend by returning the stale data instead of the 5xx response. While the Cache-Control headers sent by clients will be respected, and the raw 5xx responses returned to the client on request, the 5xx response so returned to the client will not invalidate the content in the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d5db51edca87c4e449e86b9cc39eb6ae596953" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; is invoked the argument is looked for in the first argument of a line, and, if found, the substitution value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd9ce73a3944f40fac613612a399cc50fc7b579" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;mod/mod_cache#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; directive is set to &lt;code&gt;Off&lt;/code&gt;, the full set of request processing phases are executed and the security model remains unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b3b338c93a9ba3caacfba157e02b861653ff46" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;mod_dir#directoryslash&quot;&gt;DirectorySlash&lt;/a&gt;&lt;/code&gt; directive is set to off, the &lt;code&gt;AllowNoSlash&lt;/code&gt; option can be enabled to ensure that rewrite rules are no longer ignored. This option makes it possible to apply rewrite rules within .htaccess files that match the directory without a trailing slash, if so desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84e63e13edbc3e9488daa1a0cef8e024822eaba" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Expires&lt;/code&gt; header is already part of the response generated by the server, for example when generated by a CGI script or proxied from an origin server, this module does not change or add an &lt;code&gt;Expires&lt;/code&gt; or &lt;code&gt;Cache-Control&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594a0311e717287df5d66539d7e9f05fd6026224" translate="yes" xml:space="preserve">
          <source>When the URL parameter doesn't use any backreferences into the regular expression, the original URL will be appended to the URL parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f151ead31c7981e39cee332a2a1eeb2649d6f7f" translate="yes" xml:space="preserve">
          <source>When the authorizer returns success and &lt;code&gt;UserExpr&lt;/code&gt; is configured and evaluates to an empty string (e.g., authorizer didn't return a variable), this value will be used as the user id. This is typically used when the authorizer has a concept of guest, or unauthenticated, users and guest users are mapped to some specific user id for logging and other purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da5f33c4eee39d07a9621aac4118c3851a786bf" translate="yes" xml:space="preserve">
          <source>When the connection is first received on some address and port, the server looks for all the &lt;code&gt;VirtualHost&lt;/code&gt; definitions that have the same IP address and port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e758205b94dbc4cace76de35730c569f6652ff" translate="yes" xml:space="preserve">
          <source>When the end user has filled in their login details, the form will make an HTTP POST request to the original password protected URL. &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt; will intercept this POST request, and if HTML fields are found present for the username and password, the user will be logged in, and the original password protected URL will be returned to the user as a GET request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d748e6fa3ad3fdd2b7d8324fcf3149e5185e8737" translate="yes" xml:space="preserve">
          <source>When the functions &lt;code&gt;req&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt; are used, the header name will automatically be added to the Vary header of the HTTP response, except where otherwise noted for the directive accepting the expression. The &lt;code&gt;req_novary&lt;/code&gt; function can be used to prevent names from being added to the Vary header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f938ec7861fd0ea5d3dac95335206e54dd56db8f" translate="yes" xml:space="preserve">
          <source>When the origin server is designed to respond with different content based on the value of headers in the request, for example to serve multiple languages at the same URL, HTTP's caching mechanism makes it possible to cache multiple variants of the same page at the same URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ebcb429f7e5ef33684e13cda98ffbf31c3f08b" translate="yes" xml:space="preserve">
          <source>When the quick handler is switched off using the &lt;code&gt;&lt;a href=&quot;#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; directive, it becomes possible to insert the &lt;strong&gt;CACHE&lt;/strong&gt; filter at a point in the filter stack chosen by the administrator. This provides the opportunity to cache content before that content is personalised by the &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; filter, or optionally compressed by the &lt;code&gt;&lt;a href=&quot;mod_deflate&quot;&gt;mod_deflate&lt;/a&gt;&lt;/code&gt; filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300fb67985f04aa66c13b5d87c92ccca44b3c430" translate="yes" xml:space="preserve">
          <source>When the replacement URI contains a query string, the default behavior of &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; is to discard the existing query string, and replace it with the newly generated one. Using the [QSA] flag causes the query strings to be combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e76a28eb61bf608bdd33d68a51ac6845db540bf" translate="yes" xml:space="preserve">
          <source>When the request is served by &lt;code&gt;&lt;a href=&quot;mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;mod/mod_proxy#proxy&quot;&gt;&amp;lt;Proxy&amp;gt;&lt;/a&gt;&lt;/code&gt; container takes the place of the &lt;code&gt;&lt;a href=&quot;mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; container in the processing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a49425831e69fba1ee345b5bcb282b6228440c" translate="yes" xml:space="preserve">
          <source>When the requested URI contains a query string, and the target URI does not, the default behavior of &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; is to copy that query string to the target URI. Using the [QSD] flag causes the query string to be discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9105e1266f2943b951ddd5da39e2c604591ca64" translate="yes" xml:space="preserve">
          <source>When the reverse proxy server is accessed at that url (eg: &lt;code&gt;http://rproxy.example.com/balancer-manager/&lt;/code&gt;, you will see a page similar to the below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4013df12d6a8f66a15b63f3fdfc1d89ad75d626" translate="yes" xml:space="preserve">
          <source>When the server finds an &lt;code&gt;.htaccess&lt;/code&gt; file (as specified by &lt;code&gt;&lt;a href=&quot;#accessfilename&quot;&gt;AccessFileName&lt;/a&gt;&lt;/code&gt;), it needs to know which directives declared in that file can override earlier configuration directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5f804a0ee4354ef7d31109f7f398a47f8a2cef" translate="yes" xml:space="preserve">
          <source>When the server has been compiled with gprof profiling support, &lt;code&gt;GprofDir&lt;/code&gt; causes &lt;code&gt;gmon.out&lt;/code&gt; files to be written to the specified directory when the process exits. If the argument ends with a percent symbol ('%'), subdirectories are created for each process id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f0313cb9cbba1ef4e0ac0c13d81986b7d4e6a1" translate="yes" xml:space="preserve">
          <source>When the server load goes down in a way that causes httpd to stop some processes (for example due to &lt;code&gt;&lt;a href=&quot;mpm_common#maxsparethreads&quot;&gt;MaxSpareThreads&lt;/a&gt;&lt;/code&gt;). This is particularly problematic because when the load increases again, httpd will try to start new processes. If the pattern repeats, the number of processes can rise quite a bit, ending up in a mixture of old processes trying to stop and new ones trying to do some work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd09288509fef1a4fb6844ecab2675098105022" translate="yes" xml:space="preserve">
          <source>When the server looks up a path via an internal &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#subrequest&quot;&gt;subrequest&lt;/a&gt; such as looking for a &lt;code&gt;&lt;a href=&quot;mod/mod_dir#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; or generating a directory listing with &lt;code&gt;&lt;a href=&quot;mod/mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt;, per-request environment variables are &lt;em&gt;not&lt;/em&gt; inherited in the subrequest. Additionally, &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; directives are not separately evaluated in the subrequest due to the API phases &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif&quot;&gt;mod_setenvif&lt;/a&gt;&lt;/code&gt; takes action in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4085ddbc9836ea9af287f1e0c72e4eba2cc266" translate="yes" xml:space="preserve">
          <source>When the server looks up a path via an internal &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#subrequest&quot;&gt;subrequest&lt;/a&gt; such as looking for a &lt;code&gt;&lt;a href=&quot;mod_dir#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; or generating a directory listing with &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt;, per-request environment variables are &lt;em&gt;not&lt;/em&gt; inherited in the subrequest. Additionally, &lt;code&gt;&lt;a href=&quot;#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; directives are not separately evaluated in the subrequest due to the API phases &lt;code&gt;&lt;a href=&quot;mod_setenvif&quot;&gt;mod_setenvif&lt;/a&gt;&lt;/code&gt; takes action in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57884f43b4cdb5fd15603e148394c576d11f8e5" translate="yes" xml:space="preserve">
          <source>When the server looks up a path via an internal &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#subrequest&quot;&gt;subrequest&lt;/a&gt; such as looking for a &lt;code&gt;&lt;a href=&quot;mod_dir#directoryindex&quot;&gt;DirectoryIndex&lt;/a&gt;&lt;/code&gt; or generating a directory listing with &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt;, per-request environment variables are &lt;em&gt;not&lt;/em&gt; inherited in the subrequest. Additionally, &lt;code&gt;&lt;a href=&quot;mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt; directives are not separately evaluated in the subrequest due to the API phases &lt;code&gt;&lt;a href=&quot;mod_setenvif&quot;&gt;mod_setenvif&lt;/a&gt;&lt;/code&gt; takes action in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7a02e334024d758db91c8bb4f78b80b92af135" translate="yes" xml:space="preserve">
          <source>When the substitution string begins with a string resembling &quot;/~user&quot; (via explicit text or backreferences), &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; performs home directory expansion independent of the presence or configuration of &lt;code&gt;&lt;a href=&quot;mod_userdir&quot;&gt;mod_userdir&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce494b86bfbcef49ba757ad161c13e18ed0bb38" translate="yes" xml:space="preserve">
          <source>When the value parameter uses the &lt;a href=&quot;../expr&quot;&gt;ap_expr&lt;/a&gt; parser, some expression syntax will differ from examples that evaluate &lt;em&gt;boolean&lt;/em&gt; expressions such as &amp;lt;If&amp;gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aec1a7be58bf69eac0b4fcad20cd7ef7b95011" translate="yes" xml:space="preserve">
          <source>When this directive has a value greater than zero, request handlers that would otherwise discard request bodies will instead set the request body aside for use by filters up to the maximum size specified. In the case of the mod_include filter, an attempt to &lt;code&gt;POST&lt;/code&gt; a request to the static shtml file will cause any subrequests to be &lt;code&gt;POST&lt;/code&gt; requests, instead of &lt;code&gt;GET&lt;/code&gt; requests as before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed5bb5b763129ed92a95e02ab3925bd152f8d22" translate="yes" xml:space="preserve">
          <source>When this directive is set to &lt;code&gt;All&lt;/code&gt;, then any directive which has the .htaccess Context is allowed in &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d54e8a5c683ebb9bebc6b7ca5c81934dc401584" translate="yes" xml:space="preserve">
          <source>When this directive is set to &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;, then &lt;a href=&quot;#accessfilename&quot;&gt;.htaccess&lt;/a&gt; files are completely ignored. In this case, the server will not even attempt to read &lt;code&gt;.htaccess&lt;/code&gt; files in the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd9770c8d200c42522d208f6f0d51084fb0d984" translate="yes" xml:space="preserve">
          <source>When this directive is set to &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#allowoverridelist&quot;&gt;AllowOverrideList&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#accessfilename&quot;&gt;.htaccess&lt;/a&gt; files are completely ignored. In this case, the server will not even attempt to read &lt;code&gt;.htaccess&lt;/code&gt; files in the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9dbcc29c8a17f8de0f7be0d2170f90a8d75105" translate="yes" xml:space="preserve">
          <source>When this directive is set to a non-zero value &lt;code&gt;X&lt;/code&gt; combined with use of the &lt;code&gt;Require ldap-group someGroupDN&lt;/code&gt; directive, the provided user credentials will be searched for as a member of the &lt;code&gt;someGroupDN&lt;/code&gt; directory object or of any group member of the current group up to the maximum nesting level &lt;code&gt;X&lt;/code&gt; specified by this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7894faeec2fe7877b9155485d10b2f280a2bedd9" translate="yes" xml:space="preserve">
          <source>When this directive is specified, any successfully authenticated user will be allowed to gain access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad70b4758a0fbe135b86bc10569999ed8ee8e86" translate="yes" xml:space="preserve">
          <source>When this directive is specified, the filesystem permissions on the file being accessed are consulted. The user must be a member of a group with the same name as the group that owns the file. See &lt;code&gt;&lt;a href=&quot;mod_authz_owner&quot;&gt;mod_authz_owner&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a469c4cfe89f39721c6cdfba88d592caf5024c0b" translate="yes" xml:space="preserve">
          <source>When this directive is specified, the user must be a member of the group assigned to the file being accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86096f583d0c041ccd9a423d288a7d4fdd15687d" translate="yes" xml:space="preserve">
          <source>When this feature was added to Apache, it caused a flurry of problems on various versions of Unix because of shortsightedness. The TCP specification does not state that the &lt;code&gt;FIN_WAIT_2&lt;/code&gt; state has a timeout, but it doesn't prohibit it. On systems without the timeout, Apache 1.2 induces many sockets stuck forever in the &lt;code&gt;FIN_WAIT_2&lt;/code&gt; state. In many cases this can be avoided by simply upgrading to the latest TCP/IP patches supplied by the vendor. In cases where the vendor has never released patches (&lt;em&gt;i.e.&lt;/em&gt;, SunOS4 -- although folks with a source license can patch it themselves), we have decided to disable this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a994d072d8479f4af71a4bd5a3be259defd6b9cb" translate="yes" xml:space="preserve">
          <source>When this freshness lifetime is missing from the request or the response, a default freshness lifetime is applied. The default freshness lifetime for cached entities is one hour, however this can be easily over-ridden by using the &lt;code&gt;&lt;a href=&quot;mod/mod_cache#cachedefaultexpire&quot;&gt;CacheDefaultExpire&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98a7f0d05342f3d2dc40d12acaec24b518d1505" translate="yes" xml:space="preserve">
          <source>When this option is enabled, additional CGI/SSI environment variables are created: &lt;code&gt;SSL_SERVER_CERT&lt;/code&gt;, &lt;code&gt;SSL_CLIENT_CERT&lt;/code&gt; and &lt;code&gt;SSL_CLIENT_CERT_CHAIN_&lt;/code&gt;&lt;em&gt;n&lt;/em&gt; (with &lt;em&gt;n&lt;/em&gt; = 0,1,2,..). These contain the PEM-encoded X.509 Certificates of server and client for the current HTTPS connection and can be used by CGI scripts for deeper Certificate checking. Additionally all other certificates of the client certificate chain are provided, too. This bloats up the environment a little bit which is why you have to use this option to enable it on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a604820d74b3dc46b02e6043810dfd4ef02c6254" translate="yes" xml:space="preserve">
          <source>When this option is enabled, the Subject Distinguished Name (DN) of the Client X509 Certificate is translated into a HTTP Basic Authorization username. This means that the standard Apache authentication methods can be used for access control. The user name is just the Subject of the Client's X509 Certificate (can be determined by running OpenSSL's &lt;code&gt;openssl x509&lt;/code&gt; command: &lt;code&gt;openssl x509 -noout -subject -in&lt;/code&gt;&lt;em&gt;certificate&lt;/em&gt;&lt;code&gt;.crt&lt;/code&gt;). Note that no password is obtained from the user. Every entry in the user file needs this password: ``&lt;code&gt;xxj31ZMTZzkVA&lt;/code&gt;'', which is the DES-encrypted version of the word `&lt;code&gt;password&lt;/code&gt;''. Those who live under MD5-based encryption (for instance under FreeBSD or BSD/OS, etc.) should use the following MD5 hash of the same word: ``&lt;code&gt;$1$OXLyS...$Owx8s2/m9/gfkcRVXzgoE/&lt;/code&gt;''.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94319b7071f977ede407fcf76308b4f15ab97cd7" translate="yes" xml:space="preserve">
          <source>When this option is enabled, the standard set of SSL related CGI/SSI environment variables are created. This per default is disabled for performance reasons, because the information extraction step is a rather expensive operation. So one usually enables this option for CGI and SSI requests only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f796cc849c629e22a878cc5e107079559169494" translate="yes" xml:space="preserve">
          <source>When time and size are specified, the size must be given after the time. Rotation will occur whenever either time or size limits are reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c38e4a43a1189f85201559e376e6f4120d28f47" translate="yes" xml:space="preserve">
          <source>When used inside a &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; section, the first argument is omitted and the local directory is obtained from the &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt;. The same occurs inside a &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section, but will probably not work as intended, as ProxyPassReverse will interpret the regexp literally as a path; if needed in this situation, specify the ProxyPassReverse outside the section or in a separate &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e4184e89479408bc7c28b53ce9e0b115de02c6" translate="yes" xml:space="preserve">
          <source>When used inside a &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; section, the first argument is omitted and the local directory is obtained from the &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt;. The same will occur inside a &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section; however, ProxyPass does not interpret the regexp as such, so it is necessary to use &lt;code&gt;ProxyPassMatch&lt;/code&gt; in this situation instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdfad682888bcaeb371b0e3366fea1ffa369a9b" translate="yes" xml:space="preserve">
          <source>When used inside a &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; section, the first argument is omitted and the regexp is obtained from the &lt;code&gt;&lt;a href=&quot;core#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b905df3731705f71d4d867167f87c390b91761c" translate="yes" xml:space="preserve">
          <source>When used with a &lt;code&gt;Require dbd-group&lt;/code&gt; directive, it specifies a query to look up groups for the current user. This is the standard functionality of other authorization modules such as &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile&quot;&gt;mod_authz_groupfile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_dbm&quot;&gt;mod_authz_dbm&lt;/a&gt;&lt;/code&gt;. The first column value of each row returned by the query statement should be a string containing a group name. Zero, one, or more rows may be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df60ae45e5775c67392567ffa75d9f1985094a3c" translate="yes" xml:space="preserve">
          <source>When used with a &lt;code&gt;Require dbd-login&lt;/code&gt; or &lt;code&gt;Require dbd-logout&lt;/code&gt; directive, it will never deny access, but will instead execute a SQL statement designed to log the user in or out. The user must already be authenticated with &lt;code&gt;&lt;a href=&quot;mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3f877854b31d3ab14f4a51db07d1971aa362aa" translate="yes" xml:space="preserve">
          <source>When used, this directive sets an expiry time on the cookie generated by the usertrack module. The &lt;em&gt;expiry-period&lt;/em&gt; can be given either as a number of seconds, or in the format such as &quot;2 weeks 3 days 7 hours&quot;. Valid denominations are: years, months, weeks, days, hours, minutes and seconds. If the expiry time is in any format other than one number indicating the number of seconds, it must be enclosed by double quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895fc40ab5eda6a0ba52d631625f18c8529b58c3" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&amp;lt;Limit&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;LimitExcept&amp;gt;&lt;/code&gt; directives with the &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directive, note that the first &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; to succeed authorizes the request, regardless of the presence of other &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d196233d84b9cd76fee51c59a8201ed1a65ff7" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;.htaccess&lt;/code&gt; files, be aware that the per-directory context changes things a bit. In particular, rules are taken to be relative to the current directory, rather than being the original requested URI. Consider the following examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b24906c57b72767539c0a779a3022a479e8d94e" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;dbd&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b50eb4747e3e46c6509d4ced1cb6109195a256b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;dbm&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd5ef4d0ac50318a6a6c6d8abbf157fb9844e8b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;file&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0427cd3a255d317c676bf2c80c700c4b7d016da" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; directive with the &lt;code&gt;anon&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa42a2502a154b84f38d7182fe808d71d38b9794" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt;, this module is invoked via the &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; directive with the &lt;code&gt;ldap&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398f65d507699afee646f55bc7f105c0e65ed1dd" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;mod_auth_digest#authdigestprovider&quot;&gt;AuthDigestProvider&lt;/a&gt;&lt;/code&gt; and Digest Authentication, providers perform a similar check to find a matching username in their data stores. However, unlike in the Basic Authentication case, the value associated with each stored username must be an encrypted string composed from the username, realm name, and password. (See &lt;a href=&quot;http://tools.ietf.org/html/rfc2617#section-3.2.2.2&quot;&gt; RFC 2617, Section 3.2.2.2&lt;/a&gt; for more details on the format used for this encrypted string.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0277adf1e9834f49f2ea9dadfeb220ff45e5e81c" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;strftime(3)&lt;/code&gt; filename formatting, be sure the log file format has enough granularity to produce a different file name each time the logs are rotated. Otherwise rotation will overwrite the same file instead of starting a new one. For example, if &lt;var&gt;logfile&lt;/var&gt; was &lt;code&gt;/var/log/errorlog.%Y-%m-%d&lt;/code&gt; with log rotation at 5 megabytes, but 5 megabytes was reached twice in the same day, the same log file name would be produced and log rotation would keep writing to the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d6905f27cf3b8a1ea3f3059d28eab4a2de03fc" translate="yes" xml:space="preserve">
          <source>When using [F], an [L] is implied - that is, the response is returned immediately, and no further rules are evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41422d2dc6afcfad5aaa3bdac8c4243eccf2707" translate="yes" xml:space="preserve">
          <source>When using [G], an [L] is implied - that is, the response is returned immediately, and no further rules are evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c1302525df38d42921e6c8fac022752846349c" translate="yes" xml:space="preserve">
          <source>When using a large number of Virtual Hosts, Apache may run out of available file descriptors (sometimes called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755516fae693004dfbde452575de3f05ae6ac6c5" translate="yes" xml:space="preserve">
          <source>When using a multi-threaded MPM under unix, the module &lt;code&gt;&lt;a href=&quot;mod_cgid&quot;&gt;mod_cgid&lt;/a&gt;&lt;/code&gt; should be used in place of this module. At the user level, the two modules are essentially identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc355f040f5acdb29e33d595db031ccd12a4b1c" translate="yes" xml:space="preserve">
          <source>When using cookie based stickyness, you need to configure the name of the cookie that contains the information about which back-end to use. This is done via the &lt;var&gt;stickysession&lt;/var&gt; attribute added to either &lt;code&gt;&lt;a href=&quot;mod_proxy#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_proxy#proxyset&quot;&gt;ProxySet&lt;/a&gt;&lt;/code&gt;. The name of the cookie is case-sensitive. The balancer extracts the value of the cookie and looks for a member worker with &lt;var&gt;route&lt;/var&gt; equal to that value. The &lt;var&gt;route&lt;/var&gt; must also be set in either &lt;code&gt;&lt;a href=&quot;mod_proxy#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_proxy#proxyset&quot;&gt;ProxySet&lt;/a&gt;&lt;/code&gt;. The cookie can either be set by the back-end, or as shown in the above &lt;a href=&quot;#example&quot;&gt;example&lt;/a&gt; by the Apache web server itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745b6d1760c19897d15867e20bbf05f7b6d55490" translate="yes" xml:space="preserve">
          <source>When using multiple certificates to support different authentication algorithms (like RSA, DSA, but mainly ECC) and OpenSSL prior to 1.0.2, it is recommended to either use custom DH parameters (preferably) by adding them to the first certificate file (as described above), or to order the &lt;code&gt;SSLCertificateFile&lt;/code&gt; directives such that RSA/DSA certificates are placed &lt;strong&gt;after&lt;/strong&gt; the ECC one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0d739f4cf53be7af212de7e77b051c454cfbe4" translate="yes" xml:space="preserve">
          <source>When using prepared statements with a MySQL database, it is preferred to set &lt;code&gt;reconnect&lt;/code&gt; to 0 in the connection string as to avoid errors that arise from the MySQL client reconnecting without properly resetting the prepared statements. If set to 1, any broken connections will be attempted fixed, but as mod_dbd is not informed, the prepared statements will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7f9605e1bf7269e3e21b8c1942b6b51715240c" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;crypt()&lt;/code&gt; algorithm, note that only the first 8 characters of the password are used to form the password. If the supplied password is longer, the extra characters will be silently discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a7042264f5e9c8910f632977ac97737cf7689d" translate="yes" xml:space="preserve">
          <source>When using the NOT character to negate a pattern, you cannot include grouped wildcard parts in that pattern. This is because, when the pattern does NOT match (ie, the negation matches), there are no contents for the groups. Thus, if negated patterns are used, you cannot use &lt;code&gt;$N&lt;/code&gt; in the substitution string!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6024de9169998e5be7b9d8523056bc0081bc6b18" translate="yes" xml:space="preserve">
          <source>When was this document modified?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8936dfb1681f55464feefff9a9e4cc1bb197d9" translate="yes" xml:space="preserve">
          <source>When will the module de-reference aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab601f44b4f40ec01c64aa3907e39bf7d93da472" translate="yes" xml:space="preserve">
          <source>When working with Apache it is important to know how it will find the configuration file. You can specify a configuration file on the command line in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ed4281e4758d1e937d9fe1082a9ba2fc715d58" translate="yes" xml:space="preserve">
          <source>When working with Apache it is important to know how it will find the configuration files. You can specify a configuration file on the command line in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d1c19dd5143a8c7fe658e537848f213d5b8650" translate="yes" xml:space="preserve">
          <source>When writing data to the client, the length of time to wait for an acknowledgement of a packet if the send buffer is full.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcd50bdf729699f4137ef23a8da44748469f988" translate="yes" xml:space="preserve">
          <source>When you &lt;code&gt;./configure&lt;/code&gt; you Apache httpd source tree, you need to give it '&lt;code&gt;--enable-http2&lt;/code&gt;' as additional argument to trigger the build of the module. Should your &lt;code&gt;libnghttp2&lt;/code&gt; reside in an unusual place (whatever that is on your operating system), you may announce its location with '&lt;code&gt;--with-nghttp2=&amp;lt;path&amp;gt;&lt;/code&gt;' to &lt;code&gt;configure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66510b6381df6b3db3006259fbb6f29b234a6ca1" translate="yes" xml:space="preserve">
          <source>When you &lt;code&gt;POST&lt;/code&gt; a web form to a CGI program, the data in that form is bundled up into a special format and gets delivered to your CGI program over &lt;code&gt;STDIN&lt;/code&gt;. The program then can process that data as though it was coming in from the keyboard, or from a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7171220fc14e5665fff74b78bfe9a21de333b8d6" translate="yes" xml:space="preserve">
          <source>When you add a name-based virtual host to an existing server, and the virtual host arguments match preexisting IP and port combinations, requests will now be handled by an explicit virtual host. In this case, it's usually wise to create a &lt;a href=&quot;#defaultvhost&quot;&gt;default virtual host&lt;/a&gt; with a &lt;code&gt;&lt;a href=&quot;../mod/core#servername&quot;&gt;ServerName&lt;/a&gt;&lt;/code&gt; matching that of the base server. New domains on the same interface and port, but requiring separate configurations, can then be added as subsequent (non-default) virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0b354d4fa933212336afa0dfa505131643f078" translate="yes" xml:space="preserve">
          <source>When you have a &lt;code&gt;httpd&lt;/code&gt; built with &lt;code&gt;&lt;a href=&quot;../mod/mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; you need some basic configuration for it becoming active. The first thing, as with every Apache module, is that you need to load it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2a38d3943b58f2c02d5a9b7f72e2d76d4948aa" translate="yes" xml:space="preserve">
          <source>When you issue a restart, a syntax check is first run, to ensure that there are no errors in the configuration files. If your configuration file has errors in it, you will get an error message about that syntax error, and the server will refuse to restart. This avoids the situation where the server halts and then cannot restart, leaving you with a non-functioning server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b461dfda596bfc387acdb6e61abb02afb894e1b" translate="yes" xml:space="preserve">
          <source>When you know all of your users (eg, as is often the case on a corporate Intranet), you can require plain certificate authentication. All you need to do is to create client certificates signed by your own CA certificate (&lt;code&gt;ca.crt&lt;/code&gt;) and then verify the clients against this certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61dec149d493beb49f091ebea0cd588c6392ca06" translate="yes" xml:space="preserve">
          <source>When you miss HTTP headers from the environment, make sure they are formatted according to &lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;, section 4.2: Header names must start with a letter, followed only by letters, numbers or hyphen. Any header violating this rule will be dropped silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81276ec8624b501e21dd438c19622cb7fe1fe3ed" translate="yes" xml:space="preserve">
          <source>When you post a question about a CGI problem that you're having, whether to a mailing list, or to a newsgroup, make sure you provide enough information about what happened, what you expected to happen, and how what actually happened was different, what server you're running, what language your CGI program was in, and, if possible, the offending code. This will make finding your problem much simpler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e8a2eeb517b63f8ac99a0021a4ec8138afc45c" translate="yes" xml:space="preserve">
          <source>When you put configuration directives in a &lt;code&gt;.htaccess&lt;/code&gt; file, and you don't get the desired effect, there are a number of things that may be going wrong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e4a8b661a9ed821cd1a9582532c84649d16b62" translate="yes" xml:space="preserve">
          <source>When you run a program from your command line, you have certain information that is passed to the shell without you thinking about it. For example, you have a &lt;code&gt;PATH&lt;/code&gt;, which tells the shell where it can look for files that you reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9683dca9625b43593a77f5b5e8d6b0027c265c" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;&lt;a href=&quot;mod_md&quot;&gt;mod_md&lt;/a&gt;&lt;/code&gt; to obtain a certificate, you become a customer of the CA (e.g. Let's Encrypt). That means you need to read and agree to their Terms of Service, so that you understand what they offer and what they might exclude or require from you. &lt;code&gt;&lt;a href=&quot;mod_md&quot;&gt;mod_md&lt;/a&gt;&lt;/code&gt; cannot, by itself, agree to such a thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c93e4dac27c723286060befaf237716a3d4b93" translate="yes" xml:space="preserve">
          <source>When you wish to split your log file into its component parts (one file per virtual host) you can use the program &lt;code&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/programs/other.html&quot;&gt;split-logfile&lt;/a&gt;&lt;/code&gt; to accomplish this. You'll find this program in the &lt;code&gt;support&lt;/code&gt; directory of the Apache distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc40f889454489f66e7f434d67052406b20713c" translate="yes" xml:space="preserve">
          <source>When you write CGI programs, you should consider using a code library, or module, to do most of the grunt work for you. This leads to fewer errors, and faster development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662927219b47d4deaaf604ec004ffbfdb74e4506" translate="yes" xml:space="preserve">
          <source>When your clients are all part of a common hierarchy, which is encoded into the DN, you can match them more easily using &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl#sslrequire&quot;&gt;SSLRequire&lt;/a&gt;&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e10535141d81f18bf122a5362f9905beec9c1c4" translate="yes" xml:space="preserve">
          <source>Whenever a '+' or '-' prefixed keyword is encountered, it is applied to the current &lt;code&gt;IndexOptions&lt;/code&gt; settings (which may have been inherited from an upper-level directory). However, whenever an unprefixed keyword is processed, it clears all inherited options and any incremental settings encountered so far. Consider the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84a2aa19a2ec317085f07aa8d68e53d07006f3c" translate="yes" xml:space="preserve">
          <source>Where SELECTIVE mode is selected for a virtual host, the activation of privileges must be deferred until &lt;em&gt;after&lt;/em&gt; the mapping phase of request processing has determined what &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; context applies to the request. This might give an attacker opportunities to introduce code through a &lt;code&gt;&lt;a href=&quot;mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; running at top-level or &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; context &lt;em&gt;before&lt;/em&gt; privileges have been dropped and userid/gid set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14aec73b8e038b504cfca7b654a6d5db807a14a" translate="yes" xml:space="preserve">
          <source>Where a key is set to the empty string, that key will be removed from the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25310bea92e118c2b83ad4179505ca6385b8409" translate="yes" xml:space="preserve">
          <source>Whereas clicking on a worker, displays this page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3609766759a08a8a86ddffd5403d7389d21d6a" translate="yes" xml:space="preserve">
          <source>Whereas the following will erase any existing &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;VARIABLE&lt;/code&gt; (by setting it to the empty string), but the empty &lt;code&gt;VARIABLE&lt;/code&gt; will still be sent to the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7b702b98d1bc8c765966d7527ed5c2ece82dc4" translate="yes" xml:space="preserve">
          <source>Wherever in your URL-space you allow overrides (typically &lt;code&gt;.htaccess&lt;/code&gt; files), Apache will attempt to open &lt;code&gt;.htaccess&lt;/code&gt; for each filename component. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5728c5e5e274fa2ff484aca34cf1fc4a996e2c88" translate="yes" xml:space="preserve">
          <source>Wherever in your URL-space you do not have an &lt;code&gt;Options FollowSymLinks&lt;/code&gt;, or you do have an &lt;code&gt;Options SymLinksIfOwnerMatch&lt;/code&gt;, Apache will need to issue extra system calls to check up on symlinks. (One extra call per filename component.) For example, if you had:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae86e356e5c9bc8696abeba30d0f74af804aacf" translate="yes" xml:space="preserve">
          <source>Whether or not this request is done via HTTPS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27b044f841c4be61d357cc3698bd77f9578e4a9" translate="yes" xml:space="preserve">
          <source>Whether or not you have preloaded an ISAPI extension, all ISAPI extensions are governed by the same permissions and restrictions as CGI scripts. That is, &lt;code&gt;&lt;a href=&quot;core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ExecCGI&lt;/code&gt; must be set for the directory that contains the ISAPI .dll file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31384eee3c29aa1bd76692c48ef349aac1a78a9" translate="yes" xml:space="preserve">
          <source>Whether some authorization is/was required for this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34b9c5bef58c3e09fb1f1e544a0d52f966df389" translate="yes" xml:space="preserve">
          <source>Whether this request is the initial request or a sub-request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd57ab60fe3b0a7b3e2ce3f2a6c8c9600f473cb" translate="yes" xml:space="preserve">
          <source>Whether to allow non-SNI clients to access a name-based virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b30b1a92229cd593b4fa6a1724e9bdffd702ab" translate="yes" xml:space="preserve">
          <source>Whether to apply the inherited &lt;code&gt;&lt;a href=&quot;#substitute&quot;&gt;Substitute&lt;/a&gt;&lt;/code&gt; patterns first (&lt;code&gt;on&lt;/code&gt;), or after the ones of the current context (&lt;code&gt;off&lt;/code&gt;). &lt;code&gt;SubstituteInheritBefore&lt;/code&gt; is itself inherited, hence contexts that inherit it (those that don't specify their own &lt;code&gt;SubstituteInheritBefore&lt;/code&gt; value) will apply the closest defined merge order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b82a856bea7d81f526bab0a4818eceebd6ef702" translate="yes" xml:space="preserve">
          <source>Whether to check if remote server certificate is expired</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa971e795e0d5ca4fa107650354eff41cd27096" translate="yes" xml:space="preserve">
          <source>Whether to check the remote server certificate's CN field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251f105ba7c8b48dde77c6ea2a76ab15ee0e810a" translate="yes" xml:space="preserve">
          <source>Whether to use persistent connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9aa583ef0c709e8f9ea7e389b808d0efeab25f5" translate="yes" xml:space="preserve">
          <source>Whether wildcards in requested filenames are escaped when sent to the FTP server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5792c1809acc857d18a2853be94f89c77575cf6d" translate="yes" xml:space="preserve">
          <source>Whether wildcards in requested filenames trigger a file listing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060acea2839803bc6b84a93140cd00393b101a98" translate="yes" xml:space="preserve">
          <source>Which port does HTTPS use?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a92ee51178f9cb4cb051d1b7ee2928017d12f75" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt; associates metadata with filename extensions, the &lt;code&gt;&lt;a href=&quot;core&quot;&gt;core&lt;/a&gt;&lt;/code&gt; server provides directives that are used to associate all the files in a given container (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;) with particular metadata. These directives include &lt;code&gt;&lt;a href=&quot;core#forcetype&quot;&gt;ForceType&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#setinputfilter&quot;&gt;SetInputFilter&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;core#setoutputfilter&quot;&gt;SetOutputFilter&lt;/a&gt;&lt;/code&gt;. The core directives override any filename extension mappings defined in &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abe9ac797d6cb42ca58bef1fa0b5fe32db84731" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;mod_so&lt;/code&gt; still loads modules with &lt;code&gt;ApacheModuleFoo.dll&lt;/code&gt; names, the new naming convention is preferred; if you are converting your loadable module for 2.0, please fix the name to this 2.0 convention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea145b8e65b2f7bbdcddeb03f4dec48bd759bd8f" translate="yes" xml:space="preserve">
          <source>While TCP adjust its flow-control and window sizes, longer TLS records can get stuck in queues or get lost and need retransmission. This is of course true for all packets. TLS however needs the whole record in order to decrypt it. Any missing bytes at the end will stall usage of the received ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3a418462ee70c8ddd8e5b759a4bccbb35a1ba8" translate="yes" xml:space="preserve">
          <source>While filenames are generally case-insensitive on Windows, URLs are still treated internally as case-sensitive before they are mapped to the filesystem. For example, the &lt;code&gt;&lt;a href=&quot;../mod/core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../mod/mod_proxy#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directives all use case-sensitive arguments. For this reason, it is particularly important to use the &lt;code&gt;&lt;a href=&quot;../mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; directive when attempting to limit access to content in the filesystem, since this directive applies to any content in a directory, regardless of how it is accessed. If you wish to assure that only lowercase is used in URLs, you can use something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad4e54867726798686cd485c291d10d6bad68f4" translate="yes" xml:space="preserve">
          <source>While many distributions make Apache httpd available as operating system supported packages, it can sometimes be desirable to install and use the canonical version of Apache httpd on these systems, replacing the natively provided versions of the packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced38db8267b63e892cb4b9da5c0a347c82b0fc0" translate="yes" xml:space="preserve">
          <source>While processing a request, the server looks for the first existing configuration file from this list of names in every directory of the path to the document, if distributed configuration files are &lt;a href=&quot;#allowoverride&quot;&gt;enabled for that directory&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3df26c59f1ab2ca3f807389d3ef3789f627822" translate="yes" xml:space="preserve">
          <source>While sending the response to the client, it might happen that the TCP write buffer fills up because the connection is too slow. Usually in this case a &lt;code&gt;write()&lt;/code&gt; to the socket returns &lt;code&gt;EWOULDBLOCK&lt;/code&gt; or &lt;code&gt;EAGAIN&lt;/code&gt;, to become writable again after an idle time. The worker holding the socket might be able to offload the waiting task to the listener thread, that in turn will re-assign it to the first idle worker thread available once an event will be raised for the socket (for example, &quot;the socket is now writable&quot;). Please check the Limitations section for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50692d63ff5714938dba1ca56057488661ccdcd4" translate="yes" xml:space="preserve">
          <source>While set to on, asynchronous support for ISAPI callbacks is simulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e777f27cb9c1fc8692bf9145dcb03e871513d031" translate="yes" xml:space="preserve">
          <source>While that should do the trick for most, they are people who might prefer a statically linked &lt;code&gt;nghttp2&lt;/code&gt; in this module. For those, the option &lt;code&gt;--enable-nghttp2-staticlib-deps&lt;/code&gt; exists. It works quite similar to how one statically links openssl to &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c375bdc4a4092b87e9d217c3e71dcdb235070a4d" translate="yes" xml:space="preserve">
          <source>While the Apache httpd project does not currently create binary RPMs for the various distributions out there, it is easy to build your own binary RPMs from the canonical Apache httpd tarball.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a183a45d867e305a89556a81aba07651e45e96" translate="yes" xml:space="preserve">
          <source>While the parent process is usually started as &lt;code&gt;root&lt;/code&gt; under Unix in order to bind to port 80, the child processes and threads are launched by the server as a less-privileged user. The &lt;code&gt;&lt;a href=&quot;mod_unixd#user&quot;&gt;User&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_unixd#group&quot;&gt;Group&lt;/a&gt;&lt;/code&gt; directives are used to set the privileges of the Apache HTTP Server child processes. The child processes must be able to read all the content that will be served, but should have as few privileges beyond that as possible. In addition, unless &lt;code&gt;&lt;a href=&quot;../programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; is used, these directives also set the privileges which will be inherited by CGI scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314160ae1f6e12b51e5ec1e2748acd4616cf6e31" translate="yes" xml:space="preserve">
          <source>While the parent process is usually started as &lt;code&gt;root&lt;/code&gt; under Unix in order to bind to port 80, the child processes are launched by Apache httpd as a less-privileged user. The &lt;code&gt;&lt;a href=&quot;mod_unixd#user&quot;&gt;User&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_unixd#group&quot;&gt;Group&lt;/a&gt;&lt;/code&gt; directives are used to set the privileges of the Apache httpd child processes. The child processes must be able to read all the content that will be served, but should have as few privileges beyond that as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42762e89aeb4ed902f53981c5977a6cbdc9c8cc" translate="yes" xml:space="preserve">
          <source>While this directive is supported in virtual host context, the changes it makes are visible to any later configuration directives, beyond any enclosing virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc7d8dee87c5aa46b8dcef366544e1cd8a4a7f0" translate="yes" xml:space="preserve">
          <source>While this directive may be specified in any virtual host, it is important to understand that because the PROXY protocol is connection based and protocol agnostic, the enabling and disabling is actually based on IP address and port. This means that if you have multiple name-based virtual hosts for the same host and port, and you enable it for any one of them, then it is enabled for all of them (with that host and port). It also means that if you attempt to enable the PROXY protocol in one and disable in the other, that won't work; in such a case, the last one wins and a notice will be logged indicating which setting was being overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8481c1d9838698c2c9a8ab9e37fcc89ffae6996" translate="yes" xml:space="preserve">
          <source>While this is great for performance, it comes at a price: such vhosts need more care in their configuration. The problem is that you will have multiple requests for multiple hosts on the same TLS connection. And that makes renegotiation impossible, in face the HTTP/2 standard forbids it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c170f3de3c0a3065efd6aa2abf4ee231a3734468" translate="yes" xml:space="preserve">
          <source>While this mode offers the best performance, the administrator may find that under certain circumstances they may want to perform further processing on the request after the request is cached, such as to inject personalisation into the cached page, or to apply authorisation restrictions to the content. Under these circumstances, an administrator is often forced to place independent reverse proxy servers either behind or in front of the caching server to achieve this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ccc45fc82d5880c8492df9ef51b6c29d54c69a" translate="yes" xml:space="preserve">
          <source>While with the following configuration you specify a preference for specific speed-optimized ciphers (which will be selected by mod_ssl, provided that they are supported by the client):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb345990e05e1c1a0d54a4fc9157ca5c3a23611" translate="yes" xml:space="preserve">
          <source>While you cannot &lt;strong&gt;declare&lt;/strong&gt; a map in per-directory context (&lt;code&gt;.htaccess&lt;/code&gt; files or &lt;code&gt;&lt;a href=&quot;../mod/core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; blocks) it is possible to &lt;strong&gt;use&lt;/strong&gt; this map in per-directory context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539811dd10c933fa437778100ead82291daa6230" translate="yes" xml:space="preserve">
          <source>While you usually just use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11245481b229916fc13de30c3345d70d9521c64" translate="yes" xml:space="preserve">
          <source>Who can use a session?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8693d4e504d83df2ea6eb2492a93279c69ba1b" translate="yes" xml:space="preserve">
          <source>Why are the &lt;code&gt;SSL_XXX&lt;/code&gt; variables not available to my CGI &amp;amp; SSI scripts?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0c4ba01542c4acd405e19cff7cdcb9dd1c7b28" translate="yes" xml:space="preserve">
          <source>Why can't I use SSL with name-based/non-IP-based virtual hosts?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9389e83771efd13f0c49a60b8fe6074eadbdcd4" translate="yes" xml:space="preserve">
          <source>Why do HTTPS connections to my server sometimes take up to 30 seconds to establish a connection?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09555713a78bda93de5e3c3f5603004d2f1e528c" translate="yes" xml:space="preserve">
          <source>Why do I get I/O errors when connecting via HTTPS to an Apache+mod_ssl server with Microsoft Internet Explorer (MSIE)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0708debbcc48451562de378b8aa68fc895e9f13e" translate="yes" xml:space="preserve">
          <source>Why do I get I/O errors when connecting via HTTPS to an Apache+mod_ssl server with older versions of Microsoft Internet Explorer (MSIE)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4c9cc4db04924f6ecb40b1b885ab74d6b7358a" translate="yes" xml:space="preserve">
          <source>Why do I get ``Connection Refused'' errors, when trying to access my newly installed Apache+mod_ssl server via HTTPS?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dfd5883edf2ecd0ee1b963c09d6aa1817f0acd" translate="yes" xml:space="preserve">
          <source>Why do I get ``Connection Refused'' messages, when trying to access my newly installed Apache+mod_ssl server via HTTPS?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3880f463b5122c2d1c456b8f7922f42dde3de8fa" translate="yes" xml:space="preserve">
          <source>Why do I get ``no shared cipher'' errors, when trying to use Anonymous Diffie-Hellman (ADH) ciphers?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c04b147a30025e15710fb89b001c8c49fb20079" translate="yes" xml:space="preserve">
          <source>Why do I get a 'no shared ciphers' error when connecting to my newly installed server?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f7c5819b0647b670f331ffad9f5a1696e38b49" translate="yes" xml:space="preserve">
          <source>Why do I get a file listing when I expected a file to be downloaded?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048af3106ee12942f67dcc4e86178aa7dd777296" translate="yes" xml:space="preserve">
          <source>Why do I get handshake failures with Java-based clients when using a certificate with more than 1024 bits?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56680c36a619c8641386187297b3e45353206cc9" translate="yes" xml:space="preserve">
          <source>Why do I get lots of random SSL protocol errors under heavy server load?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a510b7b0bed8c96b4f69034a8f92d81fbe1010" translate="yes" xml:space="preserve">
          <source>Why do I get permission errors related to SSLMutex when I start Apache?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2cc366cc6bdedb66446c50f92667565ff3ae9d" translate="yes" xml:space="preserve">
          <source>Why do browsers complain that they cannot verify my server certificate?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979b870c43aeaf5f95f77e762d95391bda8890d4" translate="yes" xml:space="preserve">
          <source>Why does mod_ssl stop with the error &quot;Failed to generate temporary 512 bit RSA private key&quot; when I start Apache?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8152088414cd49179f2690f9f4df53fd853a70f7" translate="yes" xml:space="preserve">
          <source>Why does my webserver have a higher load, now that it serves SSL encrypted traffic?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9c1ea450f44dbbb21a0668d0d4aa235ab8ce01" translate="yes" xml:space="preserve">
          <source>Why does the connection hang when I connect to my SSL-aware Apache server?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6587220878ad2e4194bdd54ea83d7b1a56fcaaf7" translate="yes" xml:space="preserve">
          <source>Why doesn't file type &lt;var&gt;xxx&lt;/var&gt; download via FTP?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f983a660ea1223340ae32159c1ab35d5e29bd2f" translate="yes" xml:space="preserve">
          <source>Wiki</source>
          <target state="translated">Wiki</target>
        </trans-unit>
        <trans-unit id="d284be679d64412f44d99aed90c800936372a760" translate="yes" xml:space="preserve">
          <source>Wildcard matching is supported for specific cases: an subjectAltName entry of type dNSName, or CN attributes starting with &lt;code&gt;*.&lt;/code&gt; will match with any host name of the same number of name elements and the same suffix. E.g. &lt;code&gt;*.example.org&lt;/code&gt; will match &lt;code&gt;foo.example.org&lt;/code&gt;, but will not match &lt;code&gt;foo.bar.example.org&lt;/code&gt;, because the number of elements in the respective host names differs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2518fc3306775ddfe3ccf86bc9b707fa079e3a2e" translate="yes" xml:space="preserve">
          <source>Wildcards and Regular Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cf73f9c8567ee6a8dc0e951be3fa2b6a768a7b" translate="yes" xml:space="preserve">
          <source>Wildcards may be included in the directory or file portion of the path. This example will fail if there is no subdirectory in conf/vhosts that contains at least one *.conf file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff8bd4880d2a0b2a7056cb41112ae8436b88568" translate="yes" xml:space="preserve">
          <source>Will behave as documented, although the &lt;code&gt;fKeepConn&lt;/code&gt; flag is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc6c4129060089dea2b97cf0f5b1060d0176a73" translate="yes" xml:space="preserve">
          <source>Will contain the scheme of the request (usually &quot;http&quot; or &quot;https&quot;). This value can be influenced with &lt;code&gt;&lt;a href=&quot;core#servername&quot;&gt;ServerName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446cf1dc7f31f985ac75660f5effdf08b5791475" translate="yes" xml:space="preserve">
          <source>Will contain the text &quot;on&quot; if the connection is using SSL/TLS, or &quot;off&quot; otherwise. (This variable can be safely used regardless of whether or not &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; is loaded).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80b076343d4ef6670cb3cc08db625e25c39ce60" translate="yes" xml:space="preserve">
          <source>Will contain the text &quot;true&quot; if the request currently being processed is a sub-request, &quot;false&quot; otherwise. Sub-requests may be generated by modules that need to resolve additional files or URIs in order to complete their tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf7240160fede9fa899a2b257e7a4680b0f68cd" translate="yes" xml:space="preserve">
          <source>Will dump the full data passing through to a tempfile before the provider. &lt;strong&gt;For single-user debug only&lt;/strong&gt;; this will not support concurrent hits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9955fd321ae297f842108b36f9d73df1f957213" translate="yes" xml:space="preserve">
          <source>Will report false if the request has been aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b794143cad797733be6c171bd691a726f1041a" translate="yes" xml:space="preserve">
          <source>Will return the negotiated Keep-Alive status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1bdbb4ee72852efc06500b5ae4db20886c9dd52" translate="yes" xml:space="preserve">
          <source>Win32 only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615d4f9a3ffb7918071ad5358409e6221042f1d3" translate="yes" xml:space="preserve">
          <source>Win32 only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743ff20c45a530bb204ac34082aeb4e4cf3729d6" translate="yes" xml:space="preserve">
          <source>Window's mpm_winnt interprets the AcceptFilter to toggle the AcceptEx() API, and does not support http protocol buffering. &lt;code&gt;connect&lt;/code&gt; will use the AcceptEx() API, also retrieve the network endpoint addresses, but like &lt;code&gt;none&lt;/code&gt; the &lt;code&gt;connect&lt;/code&gt; option does not wait for the initial data transmission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="f21045e419bdc8624e310145461055e079ac2872" translate="yes" xml:space="preserve">
          <source>Windows &amp;amp; Netware only. Insecure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68008ae36d032544609e6b7cd6c29fcc47baf430" translate="yes" xml:space="preserve">
          <source>Windows Tuning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc3ce5634d043b6f4c96053cb262069e95606a5" translate="yes" xml:space="preserve">
          <source>Windows example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fc30ec3d81ab476e2abcd0d1847b64536a8123" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt;, increase this directive if the process number defined by your &lt;code&gt;&lt;a href=&quot;#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt; settings, plus the number of gracefully shutting down processes, is more than 16 server processes (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad58631e3edcf2fe8115efce3b4b231a39afd2a1" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;&lt;a href=&quot;worker&quot;&gt;worker&lt;/a&gt;&lt;/code&gt;, use this directive only if your &lt;code&gt;&lt;a href=&quot;#maxrequestworkers&quot;&gt;MaxRequestWorkers &lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt; settings require more than 16 server processes (default). Do not set the value of this directive any higher than the number of server processes required by what you may want for &lt;code&gt;&lt;a href=&quot;#maxrequestworkers&quot;&gt;MaxRequestWorkers &lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f78e502e2aad7494f44ebeca565b4bee8660f4" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;MDPortMap&lt;/code&gt; you can tell it which 'Internet port' corresponds to which local port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8929bb3d768d0815a22462e23474b9cf5a3234b9" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;ProtocolsHonorOrder&lt;/code&gt; set to &lt;code&gt;on&lt;/code&gt; (default), the client ordering does not matter and only the ordering in the server settings influences the outcome of the protocol negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c83c6ae90d6a45e1744834e2aea3e7d90b816d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;UseCanonicalName Off&lt;/code&gt; Apache httpd will form self-referential URLs using the hostname and port supplied by the client if any are supplied (otherwise it will use the canonical name, as defined above). These values are the same that are used to implement &lt;a href=&quot;../vhosts/name-based&quot;&gt;name-based virtual hosts&lt;/a&gt; and are available with the same clients. The CGI variables &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;SERVER_PORT&lt;/code&gt; will be constructed from the client supplied values as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf72e1592236a1f716a9fd68544b484272b5a90" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;UseCanonicalPhysicalPort Off&lt;/code&gt;, the physical ports are removed from the ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445d693d85330e488b2199d33de9dc33108767b7" translate="yes" xml:space="preserve">
          <source>With Apache's ability to set environment variables with the &lt;code&gt;SetEnvIf&lt;/code&gt; directives, and other related directives, this functionality can let you do a wide variety of dynamic content on the server side without resorting a full web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eeb951e8b8fdd1adfac6bc5450e92d9465868d" translate="yes" xml:space="preserve">
          <source>With Pw specified as 512, a pushed, interleaved stream would get double the weight of X. With 128 only half as much. Note that effective weights are always capped at 256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac174e352894424922bce94c20f385c8c434846" translate="yes" xml:space="preserve">
          <source>With a network-mounted &lt;code&gt;&lt;a href=&quot;#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; (e.g., NFS, SMB, CIFS, FUSE), the kernel may be unable to serve the network file through its own cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075478c6ab71384dcc3578e7f67036118dcee2cf" translate="yes" xml:space="preserve">
          <source>With a request for &lt;code&gt;http://www.example.com/~bob/one/two.html&lt;/code&gt;, will try to find the page at &lt;code&gt;~bob/public_html/one/two.html&lt;/code&gt; first, then &lt;code&gt;/usr/web/bob/one/two.html&lt;/code&gt;, and finally it will send a redirect to &lt;code&gt;http://www.example.com/bob/one/two.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af665d71a8c5a4736626f2484e12b7dc545fc03" translate="yes" xml:space="preserve">
          <source>With an NFS-mounted filesystem, the kernel may be unable to reliably serve the network file through its own cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa82d03227ef269e7005cb4194d9c90ce9990d62" translate="yes" xml:space="preserve">
          <source>With more complicated setups, you can use httpd's normal &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; directives to control the scope of the various virtual hosting configurations. For example, you could have one IP address for general customers' homepages, and another for commercial customers, with the following setup. This can be combined with conventional &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; configuration sections, as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d3c75d98e2f94adc90aa54d4ab5046a193365e" translate="yes" xml:space="preserve">
          <source>With name-based virtual hosting, the server relies on the client to report the hostname as part of the HTTP headers. Using this technique, many different hosts can share the same IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7de73f86bce9ffdc92f526f47002a9aa9091df5" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;&lt;a href=&quot;prefork&quot;&gt;prefork&lt;/a&gt;&lt;/code&gt; MPM, use this directive only if you need to set &lt;code&gt;&lt;a href=&quot;#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; higher than 256 (default). Do not set the value of this directive any higher than what you might want to set &lt;code&gt;&lt;a href=&quot;#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde4ffb1afae6648fe0ba331cf056da78c919bbf" translate="yes" xml:space="preserve">
          <source>With the B flag set on this same rule, the parameters are re-encoded before being passed on to the output URL, resulting in a correct mapping to &lt;code&gt;/search.php?term=x%20%26%20y%2Fz&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ce4f8e6b0d783a475c7d372620a90ac0b8fe82" translate="yes" xml:space="preserve">
          <source>With the [E], or [env] flag, you can set the value of an environment variable. Note that some environment variables may be set after the rule is run, thus unsetting what you have set. See &lt;a href=&quot;../env&quot;&gt;the Environment Variables document&lt;/a&gt; for more details on how Environment variables work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64562a83a4b3946db53c7ebd4243c1c8fe111889" translate="yes" xml:space="preserve">
          <source>With the [QSA] flag, a request for &lt;code&gt;/pages/123?one=two&lt;/code&gt; will be mapped to &lt;code&gt;/page.php?page=123&amp;amp;one=two&lt;/code&gt;. Without the [QSA] flag, that same request will be mapped to &lt;code&gt;/page.php?page=123&lt;/code&gt; - that is, the existing query string will be discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3294b20a90dc29c145dfd4329546f6ce7f57a501" translate="yes" xml:space="preserve">
          <source>With the default value, &lt;code&gt;Off&lt;/code&gt;, such URLs are refused with a 404 (Not found) error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a5f42b3915b9c429f0240d084b0e5d1e1e60d4" translate="yes" xml:space="preserve">
          <source>With the exception of some built-in comparison operators, binary operators have the form &quot;&lt;code&gt;-[a-zA-Z][a-zA-Z0-9_]+&lt;/code&gt;&quot;, i.e. a minus and at least two characters. The name is not case sensitive. Modules may register additional binary operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c8633cd17b8286dce9ad9c5d637092e68da4f9" translate="yes" xml:space="preserve">
          <source>With the file-based mechanisms &lt;em&gt;fcntl&lt;/em&gt; and &lt;em&gt;flock&lt;/em&gt;, the path, if provided, is a directory where the lock file will be created. The default directory is httpd's run-time file directory relative to &lt;code&gt;&lt;a href=&quot;#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. Always use a local disk filesystem for &lt;code&gt;/path/to/mutex&lt;/code&gt; and never a directory residing on a NFS- or AFS-filesystem. The basename of the file will be the mutex type, an optional instance string provided by the module, and unless the &lt;code&gt;OmitPID&lt;/code&gt; keyword is specified, the process id of the httpd parent process will be appended to make the file name unique, avoiding conflicts when multiple httpd instances share a lock file directory. For example, if the mutex name is &lt;code&gt;mpm-accept&lt;/code&gt; and the lock file directory is &lt;code&gt;/var/httpd/locks&lt;/code&gt;, the lock file name for the httpd instance with parent process id 12345 would be &lt;code&gt;/var/httpd/locks/mpm-accept.12345&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6140c4700f172dd37c314a70acc2826c0e1f9f" translate="yes" xml:space="preserve">
          <source>With the introduction of &lt;code&gt;SSLCARevocationFile&lt;/code&gt;, the behavior has been changed: by default with &lt;code&gt;chain&lt;/code&gt; or &lt;code&gt;leaf&lt;/code&gt;, CRLs &lt;strong&gt;must&lt;/strong&gt; be present for the validation to succeed - otherwise it will fail with an &lt;code&gt;&quot;unable to get certificate CRL&quot;&lt;/code&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93fd6aeef55e640e2da0d1c538a721367c01fd4" translate="yes" xml:space="preserve">
          <source>With the introduction of authorization container directives such as &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireall&quot;&gt;&amp;lt;RequireAll&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#requireany&quot;&gt;&amp;lt;RequireAny&amp;gt;&lt;/a&gt;&lt;/code&gt;, the configuration also has control over when the authorization methods are called and what criteria determines when access is granted. See &lt;a href=&quot;../mod/mod_authz_core#logic&quot;&gt;Authorization Containers&lt;/a&gt; for an example of how they may be used to express complex authorization logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bec833ff6bd28b853be3841dd87f70848c777e" translate="yes" xml:space="preserve">
          <source>With the introduction of the new provider based authentication and authorization architecture, you are no longer locked into a single authentication or authorization method. In fact any number of the providers can be mixed and matched to provide you with exactly the scheme that meets your needs. In the following example, both the file and LDAP based authentication providers are being used.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
