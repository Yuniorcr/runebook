<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="dfed652b299fe7de04b4b3878c0cb5ae6194c2f3" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression can be referenced in &lt;a href=&quot;querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;QuerySet.filter()&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00464f24457b083ea8b971654d3f458f7a7d5b88" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression can be used as the source expression in &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e8bd508a7310ab1a3f7a19b29110d2d829c51f" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression contains a &lt;a href=&quot;#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expression. It&amp;rsquo;s used, for example, to disallow window function expressions in queries that modify data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6cdd0ac9468de4f270919d5d81bce20e896652" translate="yes" xml:space="preserve">
          <source>Tells Django that this expression contains an aggregate and that a &lt;code&gt;GROUP BY&lt;/code&gt; clause needs to be added to the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f1c8a78b50829c28f568e876e1fe89a15bb0f2" translate="yes" xml:space="preserve">
          <source>Template customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46a15fcb23f0c85101ef7ca0d97f009d73b42f5" translate="yes" xml:space="preserve">
          <source>Template engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503b40392c29384af177b8f9f130a2b903114424" translate="yes" xml:space="preserve">
          <source>Template engines are available in &lt;code&gt;django.template.engines&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0392e1a0044d6e8dcf79e5002812eecc51f97c34" translate="yes" xml:space="preserve">
          <source>Template filter code falls into one of two situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870c1047b3b1c95e6bc52bdd54b9c3d2448447f8" translate="yes" xml:space="preserve">
          <source>Template filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e8babef15a0e42a0ac73aa90f02e159dbfc308" translate="yes" xml:space="preserve">
          <source>Template filters that expect strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff256beb841687416f1ad08d1bafc4a0d9153d7" translate="yes" xml:space="preserve">
          <source>Template fragment caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfb14bc4c658ec14316f1306282663640732cce" translate="yes" xml:space="preserve">
          <source>Template inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e25064c8de5ef7f805d6501e8c52fcf85fa8d69" translate="yes" xml:space="preserve">
          <source>Template loaders are responsible for locating templates, loading them, and returning &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275493e1e3c651550a0e312841edc8286090591e" translate="yes" xml:space="preserve">
          <source>Template namespacing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f9f1f6f770c8fc7ec2b0095dd3a883ac1bc7d8" translate="yes" xml:space="preserve">
          <source>Template origin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffe744c9da607d4e089d6d95e399795d91def00" translate="yes" xml:space="preserve">
          <source>Template performance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2d75f14614834905c25e03493f93168c937ee7" translate="yes" xml:space="preserve">
          <source>Template postmortem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63c1da80c73b121a86202e8f2560b0cfeb4561c" translate="yes" xml:space="preserve">
          <source>Template reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbe2eec65ab0457fbc5a438c5eebda868ca8bac" translate="yes" xml:space="preserve">
          <source>Template tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ecd681b7d7c3385c0d156a844441f0ab708044" translate="yes" xml:space="preserve">
          <source>Template tags and filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d7a6a3b3fb3ebfb6f68bdf31818ff1d1a697fb" translate="yes" xml:space="preserve">
          <source>Template tags and filters reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de39a2f979afac3a22fb6e2b91978381849ffb4" translate="yes" xml:space="preserve">
          <source>Template tags can work in tandem. For instance, the standard &lt;a href=&quot;../ref/templates/builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;{% comment %}&lt;/code&gt;&lt;/a&gt; tag hides everything until &lt;code&gt;{% endcomment %}&lt;/code&gt;. To create a template tag such as this, use &lt;code&gt;parser.parse()&lt;/code&gt; in your compilation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0db7be1461de15be97b4fcf849f0ce026908fa" translate="yes" xml:space="preserve">
          <source>Template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2df858e707eddad231b69c21944cd664c3965b" translate="yes" xml:space="preserve">
          <source>TemplateResponse and SimpleTemplateResponse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bda0abce0d98bf01bf42aa1cbc75f8a33fb7b4" translate="yes" xml:space="preserve">
          <source>TemplateResponse provides a way to do just that. Unlike basic &lt;a href=&quot;request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, TemplateResponse objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5de2a0afdca73e751c62979aed7a83e28fc3b9" translate="yes" xml:space="preserve">
          <source>Templates can override or extend base admin templates as described in &lt;a href=&quot;#admin-overriding-templates&quot;&gt;Overriding admin templates&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837a4a4336cf75d30df4024f4f3ad20a083163f7" translate="yes" xml:space="preserve">
          <source>Templates engines are configured with the &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting. It&amp;rsquo;s a list of configurations, one for each engine. The default value is empty. The &lt;code&gt;settings.py&lt;/code&gt; generated by the &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; command defines a more useful value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57677a5a4bc0d7b93c6b0e7344167b9efc12f914" translate="yes" xml:space="preserve">
          <source>Templates have an &lt;code&gt;origin&lt;/code&gt; containing attributes depending on the source they are loaded from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b12ed220f1f137ab20bc8189bf5d2b4027b98db" translate="yes" xml:space="preserve">
          <source>Templates which may be overridden per app or model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d9878f5100d0480b508daffd45aca154046fde" translate="yes" xml:space="preserve">
          <source>Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, &amp;amp; Hugh H. Howard, &lt;em&gt;Thematic Cartography and Geographic Visualization&lt;/em&gt; (Prentice Hall, 2nd edition), at Ch. 7.1.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54928633e8f7d5711d9314a8072c27ac84de32b" translate="yes" xml:space="preserve">
          <source>Test &lt;a href=&quot;#skipping-tests&quot;&gt;skipping based on database backend features&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6da5565855f37d08c530e95452e7e72020da6ec" translate="yes" xml:space="preserve">
          <source>Test a view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18739c3aec8fb9af2219621b209b83b2e73543bd" translate="yes" xml:space="preserve">
          <source>Test and tweak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b06394156d352ffb8c4177aec079b081a5b940" translate="yes" xml:space="preserve">
          <source>Test cases features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef625477f09969d2f6ca5084c4d11d06ee7e5668" translate="yes" xml:space="preserve">
          <source>Test database templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08934ffbb3b1105d0b3b67d00c046e179772cd8f" translate="yes" xml:space="preserve">
          <source>Test discovery is based on the unittest module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest-test-discovery&quot;&gt;built-in test discovery&lt;/a&gt;. By default, this will discover tests in any file named &amp;ldquo;test*.py&amp;rdquo; under the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d53505398a3c5ad8a027d0a8074a1ca538a563c" translate="yes" xml:space="preserve">
          <source>Test runner options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7afb236ad48d9f7cb2d795fcd1de1b79a5e779e" translate="yes" xml:space="preserve">
          <source>Test signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dc477d5b5165b3c359fa1c3cd92391ab84b1fe" translate="yes" xml:space="preserve">
          <source>Test that a given request is rendered by a given Django template, with a template context that contains certain values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f199f6e63adef5356b4300a7349bbb4f565039c2" translate="yes" xml:space="preserve">
          <source>Test with warnings enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b03058aa647d29d24e264f61eeb7755159268e9" translate="yes" xml:space="preserve">
          <source>Test your installation by importing it in the Python interactive interpreter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30da1610721c5a77e11b77c05aac051d5571f9a6" translate="yes" xml:space="preserve">
          <source>Testing &lt;a href=&quot;#django.test.SimpleTestCase.assertContains&quot;&gt;&lt;code&gt;HTML responses for the presence/lack of a given fragment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a40bce67dddb6fb767cfb952b87305913c9ca16" translate="yes" xml:space="preserve">
          <source>Testing Framework Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10df3a3bb8dbd3c97fe17e0a5df7ee88fbcb58aa" translate="yes" xml:space="preserve">
          <source>Testing GeoDjango apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbeb84e0b5bbc826263bbb80a5a0826ced7cab6" translate="yes" xml:space="preserve">
          <source>Testing a Web application is a complex task, because a Web application is made of several layers of logic &amp;ndash; from HTTP-level request handling, to form validation and processing, to template rendering. With Django&amp;rsquo;s test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application&amp;rsquo;s output and generally verify your code is doing what it should be doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c487303ebe08511551142a3176c39d553469d8" translate="yes" xml:space="preserve">
          <source>Testing class-based views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ebd52789fcbddb1bf223135422d1fa99ffa6a2" translate="yes" xml:space="preserve">
          <source>Testing custom error views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46789c25f9937fae8e84995b643f9f3d3b619419" translate="yes" xml:space="preserve">
          <source>Testing for multipart forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9cd3554eda0d0c14cbdab4f3bfe98e0aded844" translate="yes" xml:space="preserve">
          <source>Testing form field &lt;a href=&quot;#django.test.SimpleTestCase.assertFieldOutput&quot;&gt;&lt;code&gt;rendering and error treatment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e51a30cc66d4bfcb4289dbe9807bb19ba80ebc" translate="yes" xml:space="preserve">
          <source>Testing in Django</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f871e679b11d199935fbbef02730cc6b7b25a92" translate="yes" xml:space="preserve">
          <source>Testing operates at different levels. Some tests might apply to a tiny detail (&lt;em&gt;does a particular model method return values as expected?&lt;/em&gt;) while others examine the overall operation of the software (&lt;em&gt;does a sequence of user inputs on the site produce the desired result?&lt;/em&gt;). That&amp;rsquo;s no different from the kind of testing you did earlier in &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;, using the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; to examine the behavior of a method, or running the application and entering data to check how it behaves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4419ce5b690d20e39e613abbba7da1488f9816bb" translate="yes" xml:space="preserve">
          <source>Testing our new view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e72b5e121198f50570492a55809dbef6ebc08a0" translate="yes" xml:space="preserve">
          <source>Testing primary/replica configurations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802b52725b6569631bb94335fbd56065e721f791" translate="yes" xml:space="preserve">
          <source>Testing responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c93522fa833711d269c91b7f26d492d378b5b5" translate="yes" xml:space="preserve">
          <source>Testing the &lt;code&gt;DetailView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3998625037d01c3f0c18b46c8e2f6a0db08edf" translate="yes" xml:space="preserve">
          <source>Testing tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a45f98b9d3f2e344cf639e0d00f51996bca921" translate="yes" xml:space="preserve">
          <source>Testing utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fea12ddfcb669dc82c604d27efcb7b00c360587" translate="yes" xml:space="preserve">
          <source>Testing your patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e765931ce076de9d50bb9363cdb3fef81c853c1b" translate="yes" xml:space="preserve">
          <source>Tests and multiple databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d142901c5c92e69912ce0487e74a18801198fd82" translate="yes" xml:space="preserve">
          <source>Tests and multiple host names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529cc1e0384bfb82fc3b78a96d4ceba233e4dfd6" translate="yes" xml:space="preserve">
          <source>Tests are routines that check the operation of your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f13b48a42e5a6876e4ded23dcb1354f85763309" translate="yes" xml:space="preserve">
          <source>Tests change that; they light up your code from the inside, and when something goes wrong, they focus light on the part that has gone wrong - &lt;em&gt;even if you hadn&amp;rsquo;t even realized it had gone wrong&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4217747096e24b37b05b1b58a8db268a7a3cd26" translate="yes" xml:space="preserve">
          <source>Tests don&amp;rsquo;t just identify problems, they prevent them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2e646919fc0d3be94d4e8a0b5f1b868385e7c6" translate="yes" xml:space="preserve">
          <source>Tests help teams work together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5586c33813dfd5cd6a910124a2bb8f00a2f92184" translate="yes" xml:space="preserve">
          <source>Tests if no point in the geometry field is outside the lookup geometry. &lt;a href=&quot;#fncovers&quot; id=&quot;id2&quot;&gt;[3]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef5fa36e2dc07740896aff38e4448ed7cb76091" translate="yes" xml:space="preserve">
          <source>Tests if no point in the lookup geometry is outside the geometry field. &lt;a href=&quot;#fncovers&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33044edb75457057684cf0c14862e24d3efa84c8" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is &amp;ldquo;equal&amp;rdquo; to the lookup geometry. On Oracle, MySQL, and SpatiaLite, it tests spatial equality, while on PostGIS it tests equality of bounding boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc59d48d68f87422ad9e9e987261672a675ee44" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially disjoint from the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef616e014573f56f07d09650f80cf7143b12d73b" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially equal to the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ef0e979ecf53f78388994e4eee8bbb4e0869e0" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially related to the lookup geometry by the values given in the given pattern. This lookup requires a tuple parameter, &lt;code&gt;(geom, pattern)&lt;/code&gt;; the form of &lt;code&gt;pattern&lt;/code&gt; will depend on the spatial backend:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08684b75128f222389bd1ef9ea857766dbb18be7" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field is spatially within the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c17e97d2e7b46642cbcac5b28db6d4f7409338" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially contains the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bfee25407fa380777aa39b211b28473e014885" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially crosses the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ff40cdb8b37d72d110b8df9b31eaa4d711bf2b" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially intersects the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041f30ff101e07970819f76c88c29091a8e92442" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially overlaps the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b32839d0968186ac615e9a90f7b28ffe9ebc8e" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field spatially touches the lookup geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1079f0bdf2d5a0f6a77c8cb65ffc6df4adf53512" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is completely contained by the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226b256e835dc81984974ebb79c7fd39d11fc252" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly above the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b2cefd2d9e99895a032d0cd6cfaccd3bf21d19" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly below the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b018f50ff926ea0d82843dfdb8618ef439330bd4" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly to the left of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de460f890aa9ea192b9ee4a1f48adb9f1297d188" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box is strictly to the right of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2616aa38fac34dc4d19b5f484a83275678b61014" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is above the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7590ef62b0a758878fe2a4b5816b64a25fc5a8" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is below the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09be52c0a55b6715e5b5ee30b3d56ddcafdffa7a" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is to the left of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb9de8e529f38bdbaf2204233736f82b9c587e4" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps or is to the right of the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9920c6c2e21c644b40b32a85072450b1e6a5fd7" translate="yes" xml:space="preserve">
          <source>Tests if the geometry field&amp;rsquo;s bounding box overlaps the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae91c2489c982532e3e968218fb4e5c40b52bd7" translate="yes" xml:space="preserve">
          <source>Tests if the geometry is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a509828a43af80b33c5ac468b85e5168d7b241" translate="yes" xml:space="preserve">
          <source>Tests if the geometry or raster field&amp;rsquo;s bounding box completely contains the lookup geometry&amp;rsquo;s bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604606740adeb57a13777ca1ee0b14d7487c2248" translate="yes" xml:space="preserve">
          <source>Tests make your code more attractive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce94a04b7009315562b1dc4852c7d4e6dc62aa4c" translate="yes" xml:space="preserve">
          <source>Tests that require a database (namely, model tests) will not use your &amp;ldquo;real&amp;rdquo; (production) database. Separate, blank databases are created for the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a59794ddaaf43fd62c0e6cb68b77b8974a4205" translate="yes" xml:space="preserve">
          <source>Tests will save you time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cfe6dce5e3be3c973c8f3f7449cb1af82c9073" translate="yes" xml:space="preserve">
          <source>Text functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4a089572d0dd369d8d37436891839b17c03c3a" translate="yes" xml:space="preserve">
          <source>Text, character references, and entity references that refer to the same character are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7a3ffc2c50e82898b58929bfd77acc7f78d6e" translate="yes" xml:space="preserve">
          <source>Text-based fields have a selection of matching operations. For example, you may wish to allow lookup up an author like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0b8351f71fed3e6cc6c710e971182aa5e68dfb" translate="yes" xml:space="preserve">
          <source>That adds a &amp;ldquo;Filter&amp;rdquo; sidebar that lets people filter the change list by the &lt;code&gt;pub_date&lt;/code&gt; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa1f191e17363324ace8750451c12ed4afbd586" translate="yes" xml:space="preserve">
          <source>That adds a search box at the top of the change list. When somebody enters search terms, Django will search the &lt;code&gt;question_text&lt;/code&gt; field. You can use as many fields as you&amp;rsquo;d like &amp;ndash; although because it uses a &lt;code&gt;LIKE&lt;/code&gt; query behind the scenes, limiting the number of search fields to a reasonable number will make it easier for your database to do the search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b1bd1611ab04066e302e63e9681e124ce34bee" translate="yes" xml:space="preserve">
          <source>That code loads the template called &lt;code&gt;polls/index.html&lt;/code&gt; and passes it a context. The context is a dictionary mapping template variable names to Python objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48da30043b968a63979b4407e5ce8ec5983be9c4" translate="yes" xml:space="preserve">
          <source>That code will give us an admin change list that looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c544ddf945e341dc2ec8e9fa59cf81c9ae7e6b05" translate="yes" xml:space="preserve">
          <source>That in-memory structure is also used to work out what the differences are between your models and the current state of your migrations; Django runs through all the changes, in order, on an in-memory set of models to come up with the state of your models last time you ran &lt;code&gt;makemigrations&lt;/code&gt;. It then uses these models to compare against the ones in your &lt;code&gt;models.py&lt;/code&gt; files to work out what you have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071a4f0e999eb82664a30c3a9612714d7cbb38eb" translate="yes" xml:space="preserve">
          <source>That included the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags. To get more granular, you can use each radio button&amp;rsquo;s &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;choice_label&lt;/code&gt; and &lt;code&gt;id_for_label&lt;/code&gt; attributes. For example, this template&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289dc239d96a218a0a9144dbea0ff8bfadbac7a3" translate="yes" xml:space="preserve">
          <source>That is, all the relevant toppings will have been fetched in a single query, and used to make &lt;code&gt;QuerySets&lt;/code&gt; that have a pre-filled cache of the relevant results; these &lt;code&gt;QuerySets&lt;/code&gt; are then used in the &lt;code&gt;self.toppings.all()&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa23348e5696dee385c18dc4e8dccbe7cd90d4e" translate="yes" xml:space="preserve">
          <source>That is, the database can typically do things faster than Python can, which can do them faster than the template language can:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcf07749fa0e5b0650c8d97b67c9b33e4c09165" translate="yes" xml:space="preserve">
          <source>That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe034055f31a009c043a950555deab45463315f" translate="yes" xml:space="preserve">
          <source>That means the same database query will be executed twice, effectively doubling your database load. Also, there&amp;rsquo;s a possibility the two lists may not include the same database records, because an &lt;code&gt;Entry&lt;/code&gt; may have been added or deleted in the split second between the two requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0735a4426dd841891a46317d94e2793cbd4563" translate="yes" xml:space="preserve">
          <source>That method should always return a natural key tuple &amp;ndash; in this example, &lt;code&gt;(first name, last name)&lt;/code&gt;. Then, when you call &lt;code&gt;serializers.serialize()&lt;/code&gt;, you provide &lt;code&gt;use_natural_foreign_keys=True&lt;/code&gt; or &lt;code&gt;use_natural_primary_keys=True&lt;/code&gt; arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dd16f1ec104548ec7701aae2503e9f4b454448" translate="yes" xml:space="preserve">
          <source>That other developers want to see tests in your software before they take it seriously is yet another reason for you to start writing tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb1db80b8ce0c45dae224e951fae821d27e99d5" translate="yes" xml:space="preserve">
          <source>That said, generic views will have a limit. If you find you&amp;rsquo;re struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbbec81f2e874f8570f268c854b02ab7b667a94" translate="yes" xml:space="preserve">
          <source>That small bit of model code gives Django a lot of information. With it, Django is able to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffd048ee5d42a28e6af58ccee988aee06a54311" translate="yes" xml:space="preserve">
          <source>That will cause &lt;code&gt;RockNRollConfig&lt;/code&gt; to be used when &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains &lt;code&gt;'rock_n_roll'&lt;/code&gt;. This allows you to make use of &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; features without requiring your users to update their &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. Besides this use case, it&amp;rsquo;s best to avoid using &lt;code&gt;default_app_config&lt;/code&gt; and instead specify the app config class in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; as described next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82358bc304b59adb1ce477f15ec4d947957f7e4c" translate="yes" xml:space="preserve">
          <source>That would result in a rendered template like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800ac4c0b21ad6254608419b69aaf1e330a8c347" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;ll create a directory &lt;code&gt;polls&lt;/code&gt;, which is laid out like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c390e4d250f269cd7cc6cc5a6cf7b4cce799a767" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s a pretty minimal example, but it illustrates the idea nicely. Of course, you&amp;rsquo;ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64da3894500efeef67df0244845ff37f66a37a6d" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s actually all there is to writing an action! However, we&amp;rsquo;ll take one more optional-but-useful step and give the action a &amp;ldquo;nice&amp;rdquo; title in the admin. By default, this action would appear in the action list as &amp;ldquo;Make published&amp;rdquo; &amp;ndash; the function name, with underscores replaced by spaces. That&amp;rsquo;s fine, but we can provide a better, more human-friendly name by giving the &lt;code&gt;make_published&lt;/code&gt; function a &lt;code&gt;short_description&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcb4669308c0fc548b8d6cf52271da06f3d632e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a &lt;code&gt;template_name&lt;/code&gt; attribute to the view, but in the absence of an explicit template Django will infer one from the object&amp;rsquo;s name. In this case, the inferred template will be &lt;code&gt;&quot;books/publisher_list.html&quot;&lt;/code&gt; &amp;ndash; the &amp;ldquo;books&amp;rdquo; part comes from the name of the app that defines the model, while the &amp;ldquo;publisher&amp;rdquo; bit is the lowercased version of the model&amp;rsquo;s name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdd2c9d53596117569f6f3457397de9dba7594c" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to do for development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b475ad9547603552f728fc11fc51feba721041c7" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to get started, but the forms framework puts a lot more at your fingertips. Once you understand the basics of the process described above, you should be prepared to understand other features of the forms system and ready to learn a bit more about the underlying machinery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c689359d3ba5ee9b9ac46428d1e42a374db404f1" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because this view is &lt;strong&gt;grossly inefficient&lt;/strong&gt; and probably &lt;strong&gt;insecure&lt;/strong&gt;. This is only intended for local development, and should &lt;strong&gt;never be used in production&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ab28316c8c0e4463f7f1e0bdad9265bb11fa25" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s especially true when automated tests could do this for you in seconds. If something&amp;rsquo;s gone wrong, tests will also assist in identifying the code that&amp;rsquo;s causing the unexpected behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c507dacfa36a6fb4a0685368ff0d2a258d13a5a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it &amp;ndash; now your Django install will use Bcrypt as the default storage algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e38b5ea86c7d70cc2fbbb5b84e6d748b15b992" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it &amp;ndash; now your Django install will use more iterations when it stores passwords using PBKDF2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea2d6826dd656c26e6a86836a3d9c6a79b1bb14" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it &amp;ndash; you can now &lt;a href=&quot;tutorial01&quot;&gt;move onto the tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6185938d5bae5d8cc7ee477134ef950f601066fb" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce81fa2071e09c61a45e1968c92b799e7f415413" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it. Your translations are ready for use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454d41e6971fa418b635ea4096beaae7dafdd130" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s really all there is to it! If you&amp;rsquo;re itching to write your own actions, you now know enough to get started. The rest of this document covers more advanced techniques.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42920953b658a28d4415f72cd4d0a697f68d9c2d" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;generic views reference&lt;/a&gt; documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed003d8ad16a4f03c4ed2b1baba5db5367744573" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most Web servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c6875fd2da14e4e48039740c2e68b864eca0b3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s what &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is for: it collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a5c41ad0a3b7b943000f801f0941f8b67bb0ca" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s where caching comes in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9816316502bb06e8337dbdb06d1fe4edf689f03e" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;From:&amp;rdquo; header of the email will be the value of the &lt;a href=&quot;../ref/settings#std:setting-SERVER_EMAIL&quot;&gt;&lt;code&gt;SERVER_EMAIL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde6550e7be8abcd02e5140d58371f7e8cb6332b" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;delete selected objects&amp;rdquo; action uses &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;QuerySet.delete()&lt;/code&gt;&lt;/a&gt; for efficiency reasons, which has an important caveat: your model&amp;rsquo;s &lt;code&gt;delete()&lt;/code&gt; method will not be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5058b9e1433099269d84054706fcaefa73ff701c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;initial migrations&amp;rdquo; for an app are the migrations that create the first version of that app&amp;rsquo;s tables. Usually an app will have one initial migration, but in some cases of complex model interdependencies it may have two or more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663a6a8180e11211d8df5754d07dec4cee8071d2" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;no data&amp;rdquo; value for a band is generally a special marker value used to mark pixels that are not valid data. Such pixels should generally not be displayed, nor contribute to analysis operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070336a12c43e48880c5f6128ef8b5f50b9d218d" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;object_id&amp;rdquo; field doesn&amp;rsquo;t have to be the same type as the primary key fields on the related models, but their primary key values must be coercible to the same type as the &amp;ldquo;object_id&amp;rdquo; field by its &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa4ebf307e26a41dd3054650df3b70a6946d53e" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;other side&amp;rdquo; of a &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; relation. That is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f1d4d80d9d416c35bc77d26f605a694a944d39" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;sites&amp;rdquo; framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd01796ededee1d43c8a7a56fa1b333797d54ef" translate="yes" xml:space="preserve">
          <source>The 1-based page number for this page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceaa234e93148fdb419fcf63809ee112c32e852" translate="yes" xml:space="preserve">
          <source>The 400 (bad request) view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5a2ee1ce8018db9a7ab39626a920ede7dc260f" translate="yes" xml:space="preserve">
          <source>The 403 (HTTP Forbidden) view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fc38ea70a8d7612bb7c8f76e591f75cfbc5ea0" translate="yes" xml:space="preserve">
          <source>The 404 (page not found) view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225218fd277cf55ba683aa0252a36ee431de2158" translate="yes" xml:space="preserve">
          <source>The 404 view is also called if Django doesn&amp;rsquo;t find a match after checking every regular expression in the URLconf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f004c5f0621cf5d2c07ccc7c5a7960b66241433" translate="yes" xml:space="preserve">
          <source>The 404 view is passed a &lt;a href=&quot;templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; and will have access to variables supplied by your template context processors (e.g. &lt;code&gt;MEDIA_URL&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233a9dc1ed1bfdad61414d358748edd894d6580c" translate="yes" xml:space="preserve">
          <source>The 500 (server error) view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5d68a6b5f194b8ab8610b8281f0d1e8bc9628c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#admin-overriding-templates&quot;&gt;Overriding admin templates&lt;/a&gt; section describes how to override or extend the default admin templates. Use the following options to override the default templates used by the &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; views:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bcbf10c633d318f5275b1616c827fcd901be2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command calls the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; after each run and passes a list of paths that have been found by the management command. It also receives all command line options of &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;. This is used by the &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c18aac331e3d27e374da3e6934267353557b292" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; command can be used to generate input for &lt;code&gt;loaddata&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fb9e8fa77f6bd9569778a70c5f0d9126b3860d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django-server-logger&quot;&gt;django.server&lt;/a&gt; logger sends messages at the &lt;code&gt;INFO&lt;/code&gt; level or higher to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205fe6f0886e01afcabc444b9dfbce747b6e7755" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class used to configure the application has a &lt;a href=&quot;#django.apps.AppConfig.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; class attribute, which is the absolute directory path Django will use as the single base path for the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75e85febd79e1123be7fcefdb5b29a58ca50a7a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; provides the following named URL patterns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ff1f105c4ea53b3a40674800427a57a5c461e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; class requires jQuery by default, so there is no need to add jQuery to your &lt;code&gt;ModelAdmin&lt;/code&gt;&amp;rsquo;s list of media resources unless you have a specific need. For example, if you require the jQuery library to be in the global namespace (for example when using third-party jQuery plugins) or if you need a newer version of jQuery, you will have to include your own copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fcb0270a7eef62d1435ce84e6b4090b60feb5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model has a custom manager that has the following helper methods (in addition to the methods provided by &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.BaseUserManager&quot;&gt;&lt;code&gt;BaseUserManager&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d66b6896e1917b11974971bf2ef497d078305b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.auth.models.User.username&quot;&gt;&lt;code&gt;username&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.models.User.password&quot;&gt;&lt;code&gt;password&lt;/code&gt;&lt;/a&gt; are set as given. The domain portion of &lt;a href=&quot;#django.contrib.auth.models.User.email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; is automatically converted to lowercase, and the returned &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object will have &lt;a href=&quot;#django.contrib.auth.models.User.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1569586e8a6dd5e32f78dc8440682f6b0d6efcac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt; class inherits all properties from an &lt;a href=&quot;admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; class. However, it adds a couple of its own for working with the generic relation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930d94452068a4e7093d8b29b29db44c3180bfc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.contenttypes.models.ContentTypeManager.get_for_model&quot;&gt;&lt;code&gt;get_for_model()&lt;/code&gt;&lt;/a&gt; method is especially useful when you know you need to work with a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; but don&amp;rsquo;t want to go to the trouble of obtaining the model&amp;rsquo;s metadata to perform a manual lookup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbf50cafd75c6ab7df5bd52bc8658fadc09a916" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; can do all of the work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a58f7e3a08213f1099f37460cb022f19ed3b6a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.flatpages.sitemaps.FlatPageSitemap&quot;&gt;&lt;code&gt;sitemaps.FlatPageSitemap&lt;/code&gt;&lt;/a&gt; class looks at all publicly visible &lt;a href=&quot;#module-django.contrib.flatpages&quot;&gt;&lt;code&gt;flatpages&lt;/code&gt;&lt;/a&gt; defined for the current &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; (see the &lt;a href=&quot;sites#module-django.contrib.sites&quot;&gt;&lt;code&gt;sites documentation&lt;/code&gt;&lt;/a&gt;) and creates an entry in the sitemap. These entries include only the &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; attribute &amp;ndash; not &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt;&lt;code&gt;changefreq&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sitemaps#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976d6231fac29a2fdd43b178fbafb53b71ee57cb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.forms.widgets.OpenLayersWidget&quot;&gt;&lt;code&gt;OpenLayersWidget&lt;/code&gt;&lt;/a&gt; note about JavaScript file hosting above also applies here. See also this &lt;a href=&quot;https://help.openstreetmap.org/questions/10920/how-to-embed-a-map-in-my-https-site&quot;&gt;FAQ answer&lt;/a&gt; about &lt;code&gt;https&lt;/code&gt; access to map tiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b03baba97f3c3395a00e87a3bc24195c0cf7d4c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.geoip2.GeoIP2&quot;&gt;&lt;code&gt;GeoIP2&lt;/code&gt;&lt;/a&gt; object is a wrapper for the &lt;a href=&quot;https://geoip2.readthedocs.io/&quot;&gt;MaxMind geoip2 Python library&lt;/a&gt;. &lt;a href=&quot;#id6&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad08113baee47b140a517c91fe0b90cde3ca8fd5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; equality operator uses &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.equals_exact&quot;&gt;&lt;code&gt;equals_exact()&lt;/code&gt;&lt;/a&gt;, not &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.equals&quot;&gt;&lt;code&gt;equals()&lt;/code&gt;&lt;/a&gt;, i.e. it requires the compared geometries to have the same coordinates in the same positions with the same SRIDs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8ec629be5671a5dde8dcc4820b65f0294d3080" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; class provides a way to map the contents of vector spatial data files (e.g. shapefiles) into GeoDjango models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf1944b981263db019523c1922b581d0c5ce335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; does all of the work. Each time any Django application raises a 404 error, this middleware checks the redirects database for the requested URL as a last resort. Specifically, it checks for a redirect with the given &lt;code&gt;old_path&lt;/code&gt; with a site ID that corresponds to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d25fe9e16904d30a9d1e8ade5a35554db949683" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.GenericSitemap&quot;&gt;&lt;code&gt;django.contrib.sitemaps.GenericSitemap&lt;/code&gt;&lt;/a&gt; class allows you to create a sitemap by passing it a dictionary which has to contain at least a &lt;code&gt;queryset&lt;/code&gt; entry. This queryset will be used to generate the items of the sitemap. It may also have a &lt;code&gt;date_field&lt;/code&gt; entry that specifies a date field for objects retrieved from the &lt;code&gt;queryset&lt;/code&gt;. This will be used for the &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.lastmod&quot;&gt;&lt;code&gt;lastmod&lt;/code&gt;&lt;/a&gt; attribute in the generated sitemap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6855c901496386e03eb1c169232e64b97e3e0bf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt;&lt;code&gt;changefreq&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.protocol&quot;&gt;&lt;code&gt;protocol&lt;/code&gt;&lt;/a&gt; keyword arguments allow specifying these attributes for all URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9d2e5c8919fbc45132133f27dfd99f249e7506" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt;&lt;code&gt;ping_google()&lt;/code&gt;&lt;/a&gt; command only works if you have registered your site with &lt;a href=&quot;https://www.google.com/webmasters/tools/&quot;&gt;Google Webmaster Tools&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec9c02de90f46acb26d3cf0c5fe5eacf431a9ba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt;&lt;code&gt;django.contrib.sitemaps.views.sitemap()&lt;/code&gt;&lt;/a&gt; view should take a &lt;code&gt;section&lt;/code&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00461ba935e4732ff4f725c4a3fb38788dd254be" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt; uses this behind the scenes to replace the paths with their hashed counterparts and update the cache appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5807ef893b888da390ced00f3be8ad423d972066" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.FieldError&quot;&gt;&lt;code&gt;FieldError&lt;/code&gt;&lt;/a&gt; exception is raised when there is a problem with a model field. This can happen for several reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08eb59e15ba839910537a780ef53d936d8656497" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception is raised when Django is somehow improperly configured &amp;ndash; for example, if a value in &lt;code&gt;settings.py&lt;/code&gt; is incorrect or unparseable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d856f27fc274b9c94fa28e6c5f4e32834f477c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.MiddlewareNotUsed&quot;&gt;&lt;code&gt;MiddlewareNotUsed&lt;/code&gt;&lt;/a&gt; exception is raised when a middleware is not used in the server configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aea3bcd201c6c300edfdae4bce2881f6f70110a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception is raised by a query if only one object is expected, but multiple objects are returned. A base version of this exception is provided in &lt;a href=&quot;#module-django.core.exceptions&quot;&gt;&lt;code&gt;django.core.exceptions&lt;/code&gt;&lt;/a&gt;; each model class contains a subclassed version that can be used to identify the specific object type that has returned multiple objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df4f0dea240ffa2556f1307d0618d99f64ee9f9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt; exception is raised when a user does not have permission to perform the action requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5236e890510771e6c65be5d890bb2fc46dc88206" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.RequestAborted&quot;&gt;&lt;code&gt;RequestAborted&lt;/code&gt;&lt;/a&gt; exception is raised when a HTTP body being read in by the handler is cut off midstream and the client connection closes, or when the client does not send data and hits a timeout where the server closes the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bdd0cc14b0cbaacbe1147257c65cc55302c144" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie. Subclasses of &lt;code&gt;SuspiciousOperation&lt;/code&gt; include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63869f0c1b3cd05cde2274e43d9fa6ad163310a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.SynchronousOnlyOperation&quot;&gt;&lt;code&gt;SynchronousOnlyOperation&lt;/code&gt;&lt;/a&gt; exception is raised when code that is only allowed in synchronous Python code is called from an asynchronous context (a thread with a running asynchronous event loop). These parts of Django are generally heavily reliant on thread-safety to function and don&amp;rsquo;t work correctly under coroutines sharing the same thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0df17795b1a187f135b818ffb0610f92d8e948f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception is raised when data fails form or model field validation. For more information about validation, see &lt;a href=&quot;forms/validation&quot;&gt;Form and Field Validation&lt;/a&gt;, &lt;a href=&quot;models/instances#validating-objects&quot;&gt;Model Field Validation&lt;/a&gt; and the &lt;a href=&quot;validators&quot;&gt;Validator Reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac200645906bbdbf891599c7e44ef5c649d1cc3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.exceptions.ViewDoesNotExist&quot;&gt;&lt;code&gt;ViewDoesNotExist&lt;/code&gt;&lt;/a&gt; exception is raised by &lt;a href=&quot;urlresolvers#module-django.urls&quot;&gt;&lt;code&gt;django.urls&lt;/code&gt;&lt;/a&gt; when a requested view does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0d82f2103c79bef15a3b0eadc8ff87e72b63c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class is a thin wrapper around a Python &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; with some Django-specific additions. Internally, Django uses this class when it needs to represent a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92713ac6d542470f46874a5de111377028709f07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;FileSystemStorage&lt;/code&gt;&lt;/a&gt; class implements basic file storage on a local filesystem. It inherits from &lt;a href=&quot;#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; and provides implementations for all the public methods thereof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c01be0471569c57192a09a290d29e6abceb94cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226678acd63129786ca8c149aba197b2e61e9fda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the &lt;code&gt;send()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20da1e692ed9acff011d3343808b92ab6c7d63f8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.mail.get_connection&quot;&gt;&lt;code&gt;get_connection()&lt;/code&gt;&lt;/a&gt; function in &lt;code&gt;django.core.mail&lt;/code&gt; returns an instance of the email backend that you can use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9564fa1d77014b7f9adc23d66cb5bd3f6cfaaf4f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.core.paginator.Paginator.page&quot;&gt;&lt;code&gt;Paginator.page()&lt;/code&gt;&lt;/a&gt; method raises an exception if the requested page is invalid (i.e. not an integer) or contains no objects. Generally, it&amp;rsquo;s enough to catch the &lt;code&gt;InvalidPage&lt;/code&gt; exception, but if you&amp;rsquo;d like more granularity, you can catch either of the following exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fc92a7a2c6b68344defb9b4e4f2f12916e79a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; class is sometimes mixed up with the &lt;a href=&quot;#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; class. Although they both represent real numbers, they represent those numbers differently. &lt;code&gt;FloatField&lt;/code&gt; uses Python&amp;rsquo;s &lt;code&gt;float&lt;/code&gt; type internally, while &lt;code&gt;DecimalField&lt;/code&gt; uses Python&amp;rsquo;s &lt;code&gt;Decimal&lt;/code&gt; type. For information on the difference between the two, see Python&amp;rsquo;s documentation for the &lt;a href=&quot;https://docs.python.org/3/library/decimal.html#module-decimal&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5df204d3a3efe15a2c4337ecaf3fd465128cf0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class has a couple of hooks you can use to add &lt;code&gt;class&lt;/code&gt; attributes to required rows or to rows with errors: set the &lt;a href=&quot;#django.forms.Form.error_css_class&quot;&gt;&lt;code&gt;Form.error_css_class&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;#django.forms.Form.required_css_class&quot;&gt;&lt;code&gt;Form.required_css_class&lt;/code&gt;&lt;/a&gt; attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477219541e8b5ef1bad9d48455cc48b523adff1f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; is bound to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29898159e2999eec714ab514a40da926c951a35e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt; method fails when the host is behind multiple proxies. One solution is to use middleware to rewrite the proxy headers, as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cd4c851fa510d8a50b1b76eccb28d5a7a77244" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; class lives in the &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698d841d696044287e9d236392beed58387a7363" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; class is used to stream a response from Django to the browser. You might want to do this if generating the response takes too long or uses too much memory. For instance, it&amp;rsquo;s useful for &lt;a href=&quot;../howto/outputting-csv#streaming-csv-files&quot;&gt;generating large CSV files&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad7ebee4630a8893a5335c04b34c9cba99fa0e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; is not a subclass of &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;, because it features a slightly different API. However, it is almost identical, with the following notable differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9254138a38ccc6ad98b4948423cdbeb0d7296f3b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.test.RequestFactory&quot;&gt;&lt;code&gt;RequestFactory&lt;/code&gt;&lt;/a&gt; shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function &amp;ndash; as a black box, with exactly known inputs, testing for specific outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a659cb228f9d18f981afdc5f1e65fa5d151a3b7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception is raised by &lt;a href=&quot;urlresolvers#module-django.urls&quot;&gt;&lt;code&gt;django.urls&lt;/code&gt;&lt;/a&gt; when a matching URL in your URLconf cannot be identified based on the parameters supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5445342482c6c1f9fc2c82bfe445151fa315cc57" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#django.urls.Resolver404&quot;&gt;&lt;code&gt;Resolver404&lt;/code&gt;&lt;/a&gt; exception is raised by &lt;a href=&quot;urlresolvers#django.urls.resolve&quot;&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/a&gt; if the path passed to &lt;code&gt;resolve()&lt;/code&gt; doesn&amp;rsquo;t map to a view. It&amp;rsquo;s a subclass of &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;django.http.Http404&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26c4d47db539cf9d763bb5eaa6448b6312b90a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.auth.hashers&quot;&gt;&lt;code&gt;django.contrib.auth.hashers&lt;/code&gt;&lt;/a&gt; module provides a set of functions to create and validate hashed passwords. You can use them independently from the &lt;code&gt;User&lt;/code&gt; model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0c7d0ba816142512178d8f6cf8efe20d549850" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.contenttypes.admin&quot;&gt;&lt;code&gt;django.contrib.contenttypes.admin&lt;/code&gt;&lt;/a&gt; module provides &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericTabularInline&quot;&gt;&lt;code&gt;GenericTabularInline&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericStackedInline&quot;&gt;&lt;code&gt;GenericStackedInline&lt;/code&gt;&lt;/a&gt; (subclasses of &lt;a href=&quot;#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e270634783f248270b85ce4243fb8fd0ac5d68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.contenttypes.forms&quot;&gt;&lt;code&gt;django.contrib.contenttypes.forms&lt;/code&gt;&lt;/a&gt; module provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163f921ddd0c94af5494b1fd9a9c0750c1cdacf1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.gis.measure&quot;&gt;&lt;code&gt;django.contrib.gis.measure&lt;/code&gt;&lt;/a&gt; module contains objects that allow for convenient representation of distance and area units of measure. &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; Specifically, it implements two objects, &lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt;&lt;code&gt;Area&lt;/code&gt;&lt;/a&gt; &amp;ndash; both of which may be accessed via the &lt;a href=&quot;#django.contrib.gis.measure.D&quot;&gt;&lt;code&gt;D&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.measure.A&quot;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/a&gt; convenience aliases, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accd6534121979e444368f34eaf06eeb42040b64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.contrib.gis.utils&quot;&gt;&lt;code&gt;django.contrib.gis.utils&lt;/code&gt;&lt;/a&gt; module contains various utilities that are useful in creating geospatial Web applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11e362e49d313325b8f40f7525fc910c0da9eb8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.core.validators&quot;&gt;&lt;code&gt;django.core.validators&lt;/code&gt;&lt;/a&gt; module contains a collection of callable validators for use with model and form fields. They&amp;rsquo;re used internally but are available for use with your own fields, too. They can be used in addition to, or in lieu of custom &lt;code&gt;field.clean()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7a94d330b8c67e954234c657e1b5f9a3342f0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#module-django.db.models.signals&quot;&gt;&lt;code&gt;django.db.models.signals&lt;/code&gt;&lt;/a&gt; module defines a set of signals sent by the model system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4d4d3f98b6d6dc09d3a52d2a103bc94f86ed79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; setting is only used if &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt;&lt;code&gt;CommonMiddleware&lt;/code&gt;&lt;/a&gt; is installed (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;). See also &lt;a href=&quot;#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b94d2b6a3e6f5c491d9a1456fbdfb38fddb2c5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting must configure a &lt;code&gt;default&lt;/code&gt; cache; any number of additional caches may also be specified. If you are using a cache backend other than the local memory cache, or you need to define multiple caches, other options will be required. The following cache options are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f7a54f49535d3f7869bf36f357e45a4a54a52e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting must configure a &lt;code&gt;default&lt;/code&gt; database; any number of additional databases may also be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1831f4a987916b7d91d7c65556738230fb06b3ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filters are not acceptable arguments. Instead, use the &lt;a href=&quot;#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; tag to manage autoescaping for blocks of template code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b86a7b6db34865b79af83efc1f5afa8412a7a1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag should be considered as an implementation of &amp;ldquo;render this subtemplate and include the HTML&amp;rdquo;, not as &amp;ldquo;parse this subtemplate and include its contents as if it were part of the parent&amp;rdquo;. This means that there is no shared state between included templates &amp;ndash; each include is a completely independent rendering process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66a321361237415a417770a0f5a7eff2b67019e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#std:templatetag-language&quot;&gt;&lt;code&gt;language&lt;/code&gt;&lt;/a&gt; tag expects the language code as the only argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95b2551722ca1b18b1ea4badb2a3188470ecb73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#topic-email-file-backend&quot;&gt;file&lt;/a&gt; email backend can also be useful during development &amp;ndash; this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea7eabfa1b8ff15ca93bd8743138d1cfc5d2549" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; command creates a file &lt;code&gt;&amp;lt;project_name&amp;gt;/asgi.py&lt;/code&gt; that contains such an &lt;code&gt;application&lt;/code&gt; callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a9c11f2202c87e000fea2f9526698e61754d07" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; command creates a file &lt;code&gt;&amp;lt;project_name&amp;gt;/wsgi.py&lt;/code&gt; that contains such an &lt;code&gt;application&lt;/code&gt; callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3cf3ba680c541d9bc47c4db402537ad89c3bf6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; function respects &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412643b59ff0c4fcc6cde0d8b870920dc5e60631" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../topics/serialization#subset-of-fields&quot;&gt;fields&lt;/a&gt; option can be used to limit fields that will be present in the &lt;code&gt;properties&lt;/code&gt; key, as it works with all other serializers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973a4aa75429c48168d6a9eff902a9ac14e0a4a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../intro/tutorial05&quot;&gt;testing tutorial&lt;/a&gt;, the &lt;a href=&quot;tools&quot;&gt;testing tools reference&lt;/a&gt;, and the &lt;a href=&quot;advanced&quot;&gt;advanced testing topics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14d5f8a9d02d40aa954beac5b67b90aeb5e6256" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup is overridden on &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt;. The returned objects will be those where the values passed are a subset of the data. It uses the SQL operator &lt;code&gt;@&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f542d9d2a2f32b30653d2f7c6f1224726333e87" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup is overridden on &lt;a href=&quot;#django.contrib.postgres.fields.HStoreField&quot;&gt;&lt;code&gt;HStoreField&lt;/code&gt;&lt;/a&gt;. The returned objects are those where the given &lt;code&gt;dict&lt;/code&gt; of key-value pairs are all contained in the field. It uses the SQL operator &lt;code&gt;@&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe10717ccf59b7da696b2f194748021154fc8ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; caches permissions on the user object after the first time they need to be fetched for a permissions check. This is typically fine for the request-response cycle since permissions aren&amp;rsquo;t typically checked immediately after they are added (in the admin, for example). If you are adding permissions and checking them immediately afterward, in a test or view for example, the easiest solution is to re-fetch the user from the database. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31147efcb3b8049c47461d791d153c67c75059e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; model is rarely accessed directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5460a1148be3180db2c5f7a2c596455a33f2980" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.password&quot;&gt;&lt;code&gt;password&lt;/code&gt;&lt;/a&gt; attribute of a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object is a string in this format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e513e50d7844b561cd562f906f6ad47b8a9a32ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; module provides some helpers to make these queries. For example, a query might select all the blog entries which mention &amp;ldquo;cheese&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039deb52bc18bda120ab4e45fc166f991870e5fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/django-admin#cmdoption-test-keepdb&quot;&gt;&lt;code&gt;test --keepdb&lt;/code&gt;&lt;/a&gt; option preserves the test database between test runs. It skips the create and destroy actions which can greatly decrease the time to run tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94a4ccc924cfb05b8980ab5ec604a69587489d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; management command operates on one database at a time. By default, it operates on the &lt;code&gt;default&lt;/code&gt; database, but by providing the &lt;a href=&quot;../../ref/django-admin#cmdoption-migrate-database&quot;&gt;&lt;code&gt;--database&lt;/code&gt;&lt;/a&gt; option, you can tell it to synchronize a different database. So, to synchronize all models onto all databases in the first example above, you would need to call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2bf38d72e0b95325c24b68103d4024e98d6680" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;manage.py startapp&lt;/code&gt;&lt;/a&gt; command creates an application structure that includes a &lt;code&gt;models.py&lt;/code&gt; file. If you have many models, organizing them in separate files may be useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429ce54838efb7a78e791741b233de1be516da38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6673f801657e0eff74ea02d7291c905f165b73c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/forms/fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance from the form class that this &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; wraps. You can use it to access &lt;a href=&quot;../../ref/forms/fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; attributes, e.g. &lt;code&gt;{{ char_field.field.max_length }}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f3bfe5d38f8c3444cb42d8f969c1fd86600649" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt; provides two optional parameters &lt;code&gt;can_order&lt;/code&gt; and &lt;code&gt;can_delete&lt;/code&gt; to help with ordering of forms in formsets and deletion of forms from a formset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3501b6aafd3595f1e23b024b160a77b71c622af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt;&lt;code&gt;CsrfViewMiddleware&lt;/code&gt;&lt;/a&gt; class can be considered an exception, as it provides the &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; decorators which allow views to explicitly control at what point the CSRF validation should occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264716e89ae71fc8db5a254a431eb759ebdf4008" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/instances&quot;&gt;model instance reference&lt;/a&gt; has a complete list of &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;methods automatically given to each model&lt;/a&gt;. You can override most of these &amp;ndash; see &lt;a href=&quot;#overriding-predefined-model-methods&quot;&gt;overriding predefined model methods&lt;/a&gt;, below &amp;ndash; but there are a couple that you&amp;rsquo;ll almost always want to define:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dfb49d7cfdb95fca428138c73af436a2b91f12" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method has no return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149c4af8cc6df767ce93fdc28beb0c697723a7b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets&quot;&gt;QuerySet API&lt;/a&gt; is extensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119264d7b4280d74674bc4674e5637ee1d922ef7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; returned by &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; describes all objects in the database table. Usually, though, you&amp;rsquo;ll need to select only a subset of the complete set of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef723cdd077f2c5fedc7841b524437ce4dac5442" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of all the objects in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fee952ffde9035fa49be88069f8173f8badc83e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method can be used to remove all many-to-many relationships for an instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91404cb0b5843baa63376ec872449151955016d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting is validated when running tests. This allows the test client to differentiate between internal and external URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7261be04f1a034aa5bbc7c513896edd9fbc39c10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; also accepts view function names and &lt;a href=&quot;../http/urls#naming-url-patterns&quot;&gt;named URL patterns&lt;/a&gt;. This allows you to freely remap your login view within your URLconf without having to update the setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57398f2da88b58ffa2355a9d31fc60c7d4b5c95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; of a template engine to use for loading the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcacb20c061053b55607ccf9cf2fe150962dcda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop iterates over the already filled cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964b44f7ab91f2bf9eca34ab511e391a4bdfe639" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag uses the namespace of the currently resolved view as the current application in a &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt;. You can override this default by setting the current application on the &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.current_app&quot;&gt;&lt;code&gt;request.current_app&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59441964ea94a5651b1d7b010a50f9741376107e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; function can take an optional third argument which should be a dictionary of extra keyword arguments to pass to the view function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896a6214ca4e3563bb385668e52c374ce8e50d69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.bad_request&quot;&gt;&lt;code&gt;bad_request()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler400&quot;&gt;&lt;code&gt;handler400&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b16166cf47fc23f21870f39234de51f84f45d7d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.page_not_found&quot;&gt;&lt;code&gt;page_not_found()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler404&quot;&gt;&lt;code&gt;handler404&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff93100bc995ea4b2d03d6efecc3c1663298361" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.permission_denied&quot;&gt;&lt;code&gt;permission_denied()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler403&quot;&gt;&lt;code&gt;handler403&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d20b4ce9453bc509e5c9828d331cd367fead70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../ref/views#django.views.defaults.server_error&quot;&gt;&lt;code&gt;server_error()&lt;/code&gt;&lt;/a&gt; view is overridden by &lt;a href=&quot;../../ref/urls#django.conf.urls.handler500&quot;&gt;&lt;code&gt;handler500&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de80b843a61bcccf5f58879e73d872e2652b04af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../topics/templates#module-django.template.loader&quot;&gt;&lt;code&gt;django.template.loader&lt;/code&gt;&lt;/a&gt; module provides functions such as &lt;a href=&quot;../../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; for loading templates. They return a &lt;code&gt;django.template.backends.django.Template&lt;/code&gt; which wraps the actual &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73c9915386a86141171ec8a8ae6920b42110ee7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../contenttypes#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; of the modified object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb253b5cb570dee84c8559b60a0d0b87ee4c96a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../contrib/messages&quot;&gt;messages framework&lt;/a&gt; contains &lt;a href=&quot;../contrib/messages#django.contrib.messages.views.SuccessMessageMixin&quot;&gt;&lt;code&gt;SuccessMessageMixin&lt;/code&gt;&lt;/a&gt;, which facilitates presenting messages about successful form submissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba20f69e5c02b749ec34853d1acdd12aa0c965a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../forms/api#django.forms.Form.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; for the generated form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7627bcf56e6546e4c503ee1e68e42f31da8f0ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method may be executed more than once during testing, so you may want to &lt;a href=&quot;#preventing-duplicate-signals&quot;&gt;guard your signals from duplication&lt;/a&gt;, especially if you&amp;rsquo;re planning to send them within tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da5b5badc253456cd3bcc72b4d4198fdf96c2dc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; generic view expects the primary key value captured from the URL to be called &lt;code&gt;&quot;pk&quot;&lt;/code&gt;, so we&amp;rsquo;ve changed &lt;code&gt;question_id&lt;/code&gt; to &lt;code&gt;pk&lt;/code&gt; for the generic views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47610ef1ed3075b2b476ab99241cb6c07862dd0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command looks at all your available models and creates migrations for whichever tables don&amp;rsquo;t already exist. &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; runs the migrations and creates tables in your database, as well as optionally providing &lt;a href=&quot;../topics/migrations&quot;&gt;much richer schema control&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67de547583c031def9d5e5dcd2d85917b4ea9eaf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command looks at the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and creates any necessary database tables according to the database settings in your &lt;code&gt;mysite/settings.py&lt;/code&gt; file and the database migrations shipped with the app (we&amp;rsquo;ll cover those later). You&amp;rsquo;ll see a message for each migration it applies. If you&amp;rsquo;re interested, run the command-line client for your database and type &lt;code&gt;\dt&lt;/code&gt; (PostgreSQL), &lt;code&gt;SHOW TABLES;&lt;/code&gt; (MariaDB, MySQL), &lt;code&gt;.schema&lt;/code&gt; (SQLite), or &lt;code&gt;SELECT TABLE_NAME FROM USER_TABLES;&lt;/code&gt; (Oracle) to display the tables Django created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea5e6d719d8a3d342c1e2e6ce5174aac069a1d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command takes all the migrations that haven&amp;rsquo;t been applied (Django tracks which ones are applied using a special table in your database called &lt;code&gt;django_migrations&lt;/code&gt;) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216b8f279c466507f5045a9856c458e2491c8412" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; command doesn&amp;rsquo;t actually run the migration on your database - instead, it prints it to the screen so that you can see what SQL Django thinks is required. It&amp;rsquo;s useful for checking what Django is going to do or if you have database administrators who require SQL scripts for changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d6aac513f345c03739d3a700e537c1e24d395c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/models/fields#django.db.models.Field.rel_db_type&quot;&gt;&lt;code&gt;rel_db_type()&lt;/code&gt;&lt;/a&gt; methods are called by Django when the framework constructs the &lt;code&gt;CREATE TABLE&lt;/code&gt; statements for your application &amp;ndash; that is, when you first create your tables. The methods are also called when constructing a &lt;code&gt;WHERE&lt;/code&gt; clause that includes the model field &amp;ndash; that is, when you retrieve data using QuerySet methods like &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, and &lt;code&gt;exclude()&lt;/code&gt; and have the model field as an argument. They are not called at any other time, so it can afford to execute slightly complex code, such as the &lt;code&gt;connection.settings_dict&lt;/code&gt; check in the above example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e01694611a7b883f6fd755b932fb16470e4447c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/models/fields#django.db.models.Field.rel_db_type&quot;&gt;&lt;code&gt;rel_db_type()&lt;/code&gt;&lt;/a&gt; method is called by fields such as &lt;code&gt;ForeignKey&lt;/code&gt; and &lt;code&gt;OneToOneField&lt;/code&gt; that point to another field to determine their database column data types. For example, if you have an &lt;code&gt;UnsignedAutoField&lt;/code&gt;, you also need the foreign keys that point to that field to use the same data type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7999d99f4be7ddf4dd4b33a3f5ba97fff1d24c72" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_FUNCTION&quot;&gt;&lt;code&gt;KEY_FUNCTION&lt;/code&gt;&lt;/a&gt; cache setting specifies a dotted-path to a function matching the prototype of &lt;code&gt;make_key()&lt;/code&gt; above. If provided, this custom key function will be used instead of the default key combining function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd84b25c033d62563180e15d253028070779de0f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/settings#std:setting-LOGGING_CONFIG&quot;&gt;&lt;code&gt;LOGGING_CONFIG&lt;/code&gt;&lt;/a&gt; setting defines the callable that will be used to configure Django&amp;rsquo;s loggers. By default, it points at Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig&quot;&gt;&lt;code&gt;logging.config.dictConfig()&lt;/code&gt;&lt;/a&gt; function. However, if you want to use a different configuration process, you can use any other callable that takes a single argument. The contents of &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; will be provided as the value of that argument when logging is configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7771d7ac53bb74b4c68fa0c1b76197c32ebf2673" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting and &lt;code&gt;BASE_DIR&lt;/code&gt; will already exist if you created your project using the default project template. The setting that needs to be modified is &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd528a5d653627e3ac3503e380a3b3879db401a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/templates/language&quot;&gt;Django template language&lt;/a&gt; is Django&amp;rsquo;s own template system. Until Django 1.8 it was the only built-in option available. It&amp;rsquo;s a good template library even though it&amp;rsquo;s fairly opinionated and sports a few idiosyncrasies. If you don&amp;rsquo;t have a pressing reason to choose another backend, you should use the DTL, especially if you&amp;rsquo;re writing a pluggable application and you intend to distribute templates. Django&amp;rsquo;s contrib apps that include templates, like &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;django.contrib.admin&lt;/a&gt;, use the DTL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c88188053755d16e739992dfe1eacfe679a595" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; function allows referencing other URLconfs. Whenever Django encounters &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;, it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee191c04667f4d39a4549723e2bf960d27b4a64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; function is passed four arguments, two required: &lt;code&gt;route&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt;, and two optional: &lt;code&gt;kwargs&lt;/code&gt;, and &lt;code&gt;name&lt;/code&gt;. At this point, it&amp;rsquo;s worth reviewing what these arguments are for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe8d9a37e6e878cdfde94b3487a096a61803769" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object, if one was provided to &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0091db1fa11aaecfad9ca6d8a7522261198cec5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; class that handles the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcf485a2ebdbc3c042fdd727d5d08f81c66e958" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; class used when a &lt;a href=&quot;#django.contrib.redirects.models.Redirect&quot;&gt;&lt;code&gt;Redirect&lt;/code&gt;&lt;/a&gt; is not found for the requested path or has a blank &lt;code&gt;new_path&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8010271cf7bdf5f4d7cfff4a18302b043a2a41b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-MESSAGE_LEVEL&quot;&gt;&lt;code&gt;MESSAGE_LEVEL&lt;/code&gt;&lt;/a&gt; setting can be used to change the minimum recorded level (or it can be &lt;a href=&quot;#changing-the-minimum-recorded-level-per-request&quot;&gt;changed per request&lt;/a&gt;). Attempts to add messages of a level less than this will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b599e1214b0aed211c5d57026cb4582375496c64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting specifies the database ID of the &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object associated with that particular settings file. If the setting is omitted, the &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;get_current_site()&lt;/code&gt;&lt;/a&gt; function will try to get the current site by comparing the &lt;a href=&quot;#django.contrib.sites.models.Site.domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; with the host name from the &lt;a href=&quot;../request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;request.get_host()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cae1946283bce012ebb4a1b409cf39af5896452" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6595ffe0ec0351b3d22571b44e35b0ca2d0ebbc3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; of a template engine to use for loading the template. &lt;code&gt;template_engine&lt;/code&gt; is passed as the &lt;code&gt;using&lt;/code&gt; keyword argument to &lt;code&gt;response_class&lt;/code&gt;. Default is &lt;code&gt;None&lt;/code&gt;, which tells Django to search for the template in all configured engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cfd30a79e871c2a72fdcee436ec46bc717a476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../staticfiles&quot;&gt;staticfiles app&lt;/a&gt; prepends &lt;a href=&quot;../../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;../../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;../../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;None&lt;/code&gt;) to any asset paths. The same rules apply as &lt;a href=&quot;../../../topics/forms/media#form-asset-paths&quot;&gt;regular asset definitions on forms&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e031d58f4c9538d1e3468234e80f92f62a0d6f5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../templates/api#django.template.context_processors.static&quot;&gt;&lt;code&gt;django.template.context_processors.static()&lt;/code&gt;&lt;/a&gt; context processor which adds &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; to every template context rendered with &lt;a href=&quot;../templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e610bf78eb2858f2dd80f44e1279b16091bbb1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/auth/index&quot;&gt;authentication framework&lt;/a&gt; sends &lt;a href=&quot;contrib/auth#topics-auth-signals&quot;&gt;signals when a user is logged in / out&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7796a62e6051e2b684637e0ce067f7b0bc2bff" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/db/models&quot;&gt;data-model syntax&lt;/a&gt; offers many rich ways of representing your models &amp;ndash; so far, it&amp;rsquo;s been solving many years&amp;rsquo; worth of database-schema problems. Here&amp;rsquo;s a quick example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4214008fa49c3a992ffd9dfeaab4ae9d18dd27" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/db/models&quot;&gt;model reference&lt;/a&gt; documentation explains how to use Django&amp;rsquo;s standard field classes &amp;ndash; &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, etc. For many purposes, those classes are all you&amp;rsquo;ll need. Sometimes, though, the Django version won&amp;rsquo;t meet your precise requirements, or you&amp;rsquo;ll want to use a field that is entirely different from those shipped with Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408e2a28c9451544ef0d6152f6d8e045a3cf02a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt;&lt;code&gt;get_object_or_404()&lt;/code&gt;&lt;/a&gt; function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; function of the model&amp;rsquo;s manager. It raises &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the object doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a1d7eeda36afc9100a19b4d6fefeb12bacb996" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; function takes the request object as its first argument, a template name as its second argument and a dictionary as its optional third argument. It returns an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object of the given template rendered with the given context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580ce6b10ac2a0c92b57d7c73a3e2f70fd1f8ca3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../utils#module-django.utils.feedgenerator&quot;&gt;&lt;code&gt;feedgenerator&lt;/code&gt;&lt;/a&gt; module contains a base class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6621f4a24c707a16569057b5b6777c1e4a249b3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;advanced#topics-testing-advanced-multidb&quot;&gt;advanced multi-db testing topics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2659e394bde50d340599288781dbfd555de7cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#django.forms.Form.errors.as_data&quot;&gt;&lt;code&gt;Form.errors.as_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#django.forms.Form.errors.as_json&quot;&gt;&lt;code&gt;Form.errors.as_json()&lt;/code&gt;&lt;/a&gt; methods greatly benefit from fully featured &lt;code&gt;ValidationError&lt;/code&gt;s (with a &lt;code&gt;code&lt;/code&gt; name and a &lt;code&gt;params&lt;/code&gt; dictionary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869070c99f089b4d6d96517a57bfd02376d17feb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; tag takes either &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;off&lt;/code&gt; as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccd44c9dbb0c76173a89c135e63b0eff8abda7b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;builtins#std:templatetag-extends&quot;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt; tag is the key here. It tells the template engine that this template &amp;ldquo;extends&amp;rdquo; another template. When the template system evaluates this template, first it locates the parent &amp;ndash; in this case, &amp;ldquo;base.html&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2266b60b20aacf6e8ae67cefd2ae581ebe66da4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;builtins#std:templatetag-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; tag can take multiple library names, separated by spaces. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffe8a890d11774d8daf462a01e6192a170bc951" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fields#django.forms.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt; of the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc72a496212ae6625d553b8e35aa0bbd0d9dfa6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fields#django.forms.Field.label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; of the field. This is used in &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt;&lt;code&gt;label_tag()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa595e917321e569f99ce72f122bd8c95237b43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; may also have a spatial reference system associated with it. If it does, the &lt;code&gt;srs&lt;/code&gt; attribute will return a &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d2c1f411e331df06665a051c9f8267f1b57d1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.ljworld.com/&quot;&gt;LJWorld.com&lt;/a&gt; and &lt;a href=&quot;http://www.lawrence.com/&quot;&gt;Lawrence.com&lt;/a&gt; sites are operated by the same news organization &amp;ndash; the Lawrence Journal-World newspaper in Lawrence, Kansas. LJWorld.com focused on news, while Lawrence.com focused on local entertainment. But sometimes editors wanted to publish an article on &lt;em&gt;both&lt;/em&gt; sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e47b3150ffa6125fec66e427fe8e5e7c3e54ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection&quot;&gt;X-XSS-Protection header&lt;/a&gt; is used to control the operation of the XSS filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04160b6835735d30b56441dfbdd05b5fa3110fbd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#cache-design-philosophy&quot;&gt;Cache Framework design philosophy&lt;/a&gt; explains a few of the design decisions of the framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38962c826c92739a2b1db0513bddd357840ffce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the day. By default, this is &lt;code&gt;'%d'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245a021f4f9e1210abdd5027892c53b7b8914911" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the month. By default, this is &lt;code&gt;'%b'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781abafe6628164da9bdfbd00dd812c7fa785313" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the week. By default, this is &lt;code&gt;'%U'&lt;/code&gt;, which means the week starts on Sunday. Set it to &lt;code&gt;'%W'&lt;/code&gt; if your week starts on Monday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed18dc4cf7bbde7b22759fff408e4b8786d8fdcf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format to use when parsing the year. By default, this is &lt;code&gt;'%Y'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf393b28089ff4bb876b10c8319f80ff81350f59" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt;&lt;code&gt;urllib.parse.quote()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus&quot;&gt;&lt;code&gt;urllib.parse.quote_plus()&lt;/code&gt;&lt;/a&gt; functions from Python&amp;rsquo;s standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183db66ced876a91cc1b3f41de387e0cf2822977" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/django/django/blob/master/tests/or_lookups/tests.py&quot;&gt;OR lookups examples&lt;/a&gt; in Django&amp;rsquo;s unit tests show some possible uses of &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5525c40deae8c16ec4372e54fae598bc7f28d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://modwsgi.readthedocs.io/&quot;&gt;official mod_wsgi documentation&lt;/a&gt; is your source for all the details about how to use mod_wsgi. You&amp;rsquo;ll probably want to start with the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/installation.html&quot;&gt;installation and configuration documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab9307902cfe11f507182ed10454b42f250a63f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;HTTP status code&lt;/strong&gt;&lt;/a&gt; for the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0e74805de6be0cc269b40b896300da0fb6e0cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;HTTP status code&lt;/strong&gt;&lt;/a&gt; for the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d35d394e7d80eabb80fb912d4d26b4c8dd7acd6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt; helps to install the PROJ.4, GDAL, and GEOS libraries required by GeoDjango. First, download the &lt;a href=&quot;https://trac.osgeo.org/osgeo4w/&quot;&gt;OSGeo4W installer&lt;/a&gt;, and run it. Select Express Web-GIS Install and click next. In the &amp;lsquo;Select Packages&amp;rsquo; list, ensure that GDAL is selected; MapServer and Apache are also enabled by default, but are not required by GeoDjango and may be unchecked safely. After clicking next, the packages will be automatically downloaded and installed, after which you may exit the installer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6454ae09c72c5571f12c70580e2a467d729a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;Django community aggregator&lt;/a&gt;, where we aggregate content from the global Django community. Many writers in the aggregator write this sort of how-to material.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42527043454a88e2fea76e1585e04e60f58fe585" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.postgresql.org/docs/current/pgcrypto.html&quot;&gt;pgcrypto extension&lt;/a&gt; must be installed. You can use the &lt;a href=&quot;../contrib/postgres/operations#django.contrib.postgres.operations.CryptoExtension&quot;&gt;&lt;code&gt;CryptoExtension&lt;/code&gt;&lt;/a&gt; migration operation to install it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30dafa4d380e3023ca1b8e0fa639579fc6705be8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.postgresql.org/docs/current/pgcrypto.html&quot;&gt;pgcrypto extension&lt;/a&gt; must be installed. You can use the &lt;a href=&quot;operations#django.contrib.postgres.operations.CryptoExtension&quot;&gt;&lt;code&gt;CryptoExtension&lt;/code&gt;&lt;/a&gt; migration operation to install it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1314fcd7ac8a446606eeadd06a0748b931fbce44" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; module is required for use as the database adapter when using GeoDjango with PostGIS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45e78d917a2af1cf1250a2b27008b3aecdd31cd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index#module-django.core.files&quot;&gt;&lt;code&gt;django.core.files&lt;/code&gt;&lt;/a&gt; module and its submodules contain built-in classes for basic file handling in Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1d15b10b1e4758bc73488819aab37aeea690b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exception inherits from &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;, so you can target multiple &lt;a href=&quot;instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a879ec7dd34500940e7f64bbbb72b67b5bd5a1b3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;instances#ref-models-force-insert&quot;&gt;force_insert&lt;/a&gt; parameter is documented elsewhere, but all it means is that a new object will always be created. Normally you won&amp;rsquo;t need to worry about this. However, if your model contains a manual primary key value that you set and if that value already exists in the database, a call to &lt;code&gt;create()&lt;/code&gt; will fail with an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; since primary keys must be unique. Be prepared to handle the exception if you are using manual primary keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d361e741a458827fc5d7d8e45bdb9fc155597d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; is the main source of &lt;code&gt;QuerySets&lt;/code&gt; for a model. For example, &lt;code&gt;Blog.objects.all()&lt;/code&gt; returns a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that contains all &lt;code&gt;Blog&lt;/code&gt; objects in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17471bb8906283313c701f95217938d9ad7b2693" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8e6114bfa24b3ebf21e60985199085122a2a96" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting controls the encoding of rendered templates. This is set to UTF-8 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c2a358420d12d0c839aead7004e6480eac6e99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; of a template engine to use for loading the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acac94db3bfcd977465244fca2d8b24621c0a10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; with which the template was rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8911594f98e9e9318b10f6b8b27fa489d912ff4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Context&quot;&gt;&lt;code&gt;template context&lt;/code&gt;&lt;/a&gt; used for all matching files is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40052579dc8aced12bc01a23ab84e082c2199346" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Context&quot;&gt;&lt;code&gt;template context&lt;/code&gt;&lt;/a&gt; used is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8c10edabba9c836ae9d4c6dd214d207e595a77" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/api#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object which was rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5d37dd2d2228083dd9cfef008cd9360d4ce037" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag will use its value as the &lt;code&gt;current_app&lt;/code&gt; argument to &lt;a href=&quot;urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feeca2b7eaace009ee76a4a318d0d13f06258f2b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;utils#django.utils.encoding.iri_to_uri&quot;&gt;&lt;code&gt;django.utils.encoding.iri_to_uri()&lt;/code&gt;&lt;/a&gt; function, which implements the conversion from IRI to URI as required by &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 3987#section-3.1&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06131b94965565a8e840b931a8a14a6743ccff6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; piece ensures that Apache can access your &lt;code&gt;wsgi.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11eb614c532487c7a17d85c1fbf9f993ea1b521a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'context_processors'&lt;/code&gt; option of the &lt;code&gt;DjangoTemplates&lt;/code&gt; backend defined in your &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting contains &lt;code&gt;'django.contrib.messages.context_processors.messages'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c39e261d9c42bc3f77656ffb46f566f9763f459" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'locmem'&lt;/code&gt; backend stores messages in a special attribute of the &lt;code&gt;django.core.mail&lt;/code&gt; module. The &lt;code&gt;outbox&lt;/code&gt; attribute is created when the first message is sent. It&amp;rsquo;s a list with an &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instance for each message that would be sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a27656fab1b3d74a97e1726bf25b1fd5860871" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**extra&lt;/code&gt; kwargs are &lt;code&gt;key=value&lt;/code&gt; pairs that can be interpolated into the &lt;code&gt;template&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60401363afbfb3108087b66ea5d2db365e69a98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**extra&lt;/code&gt; kwargs are &lt;code&gt;key=value&lt;/code&gt; pairs that can be interpolated into the &lt;code&gt;template&lt;/code&gt; attribute. To avoid a SQL injection vulnerability, &lt;code&gt;extra&lt;/code&gt;&lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;must not contain untrusted user input&lt;/a&gt; as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba36680589c2ddf4996d9e48ef3a15afdc4d26d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*expressions&lt;/code&gt; argument is a list of positional expressions that the function will be applied to. The expressions will be converted to strings, joined together with &lt;code&gt;arg_joiner&lt;/code&gt;, and then interpolated into the &lt;code&gt;template&lt;/code&gt; as the &lt;code&gt;expressions&lt;/code&gt; placeholder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d6f96dd81bd59a17f8766b4a8dba490781c37a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--mapping&lt;/code&gt; option tells &lt;code&gt;ogrinspect&lt;/code&gt; to also generate a mapping dictionary for use with &lt;a href=&quot;layermapping#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514c0fe665aa66e5f1c403b0d1b56739a7059f08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--multi&lt;/code&gt; option is specified so that the geographic field is a &lt;a href=&quot;model-api#django.contrib.gis.db.models.MultiPolygonField&quot;&gt;&lt;code&gt;MultiPolygonField&lt;/code&gt;&lt;/a&gt; instead of just a &lt;a href=&quot;model-api#django.contrib.gis.db.models.PolygonField&quot;&gt;&lt;code&gt;PolygonField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1ce123e100519ac5e4cdcd775c2f9a89fd8de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--srid=4326&lt;/code&gt; option sets the SRID for the geographic field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3253223306341836902087f75711571de391af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-R -S&lt;/code&gt; flags indicate that we do not want the user to have the ability to create additional users (roles) or to be a superuser, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0170b330ee4a778153047fd5048d4226967130ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@cached_property&lt;/code&gt; decorator caches the result of a method with a single &lt;code&gt;self&lt;/code&gt; argument as a property. The cached result will persist as long as the instance does, so if the instance is passed around and the function subsequently invoked, the cached result will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b8aba7c0c4ae80f67ebea10a50bcbc3da701ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AbsoluteValue&lt;/code&gt; example we discussed previously is a transformation which applies to the left-hand side of the lookup. There may be some cases where you want the transformation to be applied to both the left-hand side and the right-hand side. For instance, if you want to filter a queryset based on the equality of the left and right-hand side insensitively to some SQL function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e779acb105048a1d52426d33fd514405c33678f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Aggregate&lt;/code&gt; API is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d911c34602cafaa77331e7100053f56b2b0f40ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AuthorDisplay&lt;/code&gt; view is almost the same as &lt;a href=&quot;generic-display#generic-views-extra-work&quot;&gt;when we first introduced AuthorDetail&lt;/a&gt;; we have to write our own &lt;code&gt;get_context_data()&lt;/code&gt; to make the &lt;code&gt;AuthorInterestForm&lt;/code&gt; available to the template. We&amp;rsquo;ll skip the &lt;code&gt;get_object()&lt;/code&gt; override from before for clarity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc05ce23ac02ec8f3c0899170d3c7fecf9359fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Blog&lt;/code&gt; model doesn&amp;rsquo;t define an &lt;code&gt;entry__count&lt;/code&gt; attribute by itself, but by using a keyword argument to specify the aggregate function, you can control the name of the annotation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cdbe994242b60eaae55c0cf7589105a9566e96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COALESCE&lt;/code&gt; SQL function is defined as taking a list of columns or values. It will return the first column or value that isn&amp;rsquo;t &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bd41040b7b8090e6c5cbf88439032ba50fc072" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CONCURRENTLY&lt;/code&gt; option is not supported inside a transaction (see &lt;a href=&quot;../../../howto/writing-migrations#non-atomic-migrations&quot;&gt;non-atomic migration&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d947b75daa40e1f9cce25fc27bd884f56b885c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CREATE TABLE&lt;/code&gt; SQL in this example is formatted using PostgreSQL syntax, but it&amp;rsquo;s worth noting Django uses SQL tailored to the database backend specified in your &lt;a href=&quot;../settings&quot;&gt;settings file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861cc2e48a67150675101c0d023d92a6ee1e0b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Content-Type&lt;/code&gt; headers are automatically set when they can be guessed from contents of &lt;code&gt;open_file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d810df6b481c2cea1143a353ea2db01c08e1e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentFile&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c605f7fa7df751cf52b25056e2b1d3fecdedb68b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentFile&lt;/code&gt; class inherits from &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, but unlike &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; it operates on string content (bytes also supported), rather than an actual file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7b55a159b59ffae51b1e8f1dd478676fce1e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentType&lt;/code&gt; model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e120c8eb3e5ccb24a47d1db9c9a1301145f2d3ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContentTypeManager&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dedfcde8c7c617b506f4acc7f270df0a4e11ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CreateView&lt;/code&gt; page displayed to a &lt;code&gt;GET&lt;/code&gt; request uses a &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;'_form'&lt;/code&gt;. For example, changing this attribute to &lt;code&gt;'_create_form'&lt;/code&gt; for a view creating objects for the example &lt;code&gt;Author&lt;/code&gt; model would cause the default &lt;code&gt;template_name&lt;/code&gt; to be &lt;code&gt;'myapp/author_create_form.html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9e94399203abb8d783b8055f3ff2a76d207c26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request. For this reason, Django&amp;rsquo;s HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the &lt;code&gt;csrf_protect&lt;/code&gt; decorator so that they no longer rejects requests. In every other respect (e.g. sending cookies etc.), they behave the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de292607cde3e357863df90bae0b1d00bd6d0bc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CurrentSiteManager&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e7b97f38c853c73f8dd7053607f722d4701044" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CurrentSiteManager&lt;/code&gt; is only usable when the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting is defined in your settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ecc5eff51d3c54a5e2b6935d90883f50a83bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DeleteView&lt;/code&gt; page displayed to a &lt;code&gt;GET&lt;/code&gt; request uses a &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;'_confirm_delete'&lt;/code&gt;. For example, changing this attribute to &lt;code&gt;'_check_delete'&lt;/code&gt; for a view deleting objects for the example &lt;code&gt;Author&lt;/code&gt; model would cause the default &lt;code&gt;template_name&lt;/code&gt; to be &lt;code&gt;'myapp/author_check_delete.html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c446a58624d2b38d24557e890960fc8e1d3d10d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Driver&lt;/code&gt; class is used internally to wrap an OGR &lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b352a6799cbd31f3e63e42e59a34937e0cbcb2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EmailMessage&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1912cfdde1948121ebf770001aac858886f8d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExampleFeed&lt;/code&gt; class below gives full documentation on methods and attributes of &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbb0df8c1cb8dae833c52ae9de6175fd5608511" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;F()&lt;/code&gt; objects support bitwise operations by &lt;code&gt;.bitand()&lt;/code&gt;, &lt;code&gt;.bitor()&lt;/code&gt;, &lt;code&gt;.bitrightshift()&lt;/code&gt;, and &lt;code&gt;.bitleftshift()&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9e0181c0b4d602da85d68ac432240acc634f07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Field.__init__()&lt;/code&gt; method takes the following parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7b848927c946c603d946f7ec55765689bb5bc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FieldDoesNotExist&lt;/code&gt; exception is raised by a model&amp;rsquo;s &lt;code&gt;_meta.get_field()&lt;/code&gt; method when the requested field does not exist on the model or on the model&amp;rsquo;s parents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2fbadf9de9d57c93cc293ac1beb4bbffc74b82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FieldListFilter&lt;/code&gt; API is considered internal and might be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054f12c17df82834714f675523ab2fe6d2f0132a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7bbd9905bc17f67ecb85d1dc8abed1854ed881" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79ca764f8009438bf1c05de4e3852e1cd5ae1c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileSystemStorage.delete()&lt;/code&gt; method will not raise an exception if the given file name does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbff64a0f0cda949e739761b67fc69f46291292" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileSystemStorage&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306a89bf0e13c9d572b8bfc8cf17a92447c33f1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatPage&lt;/code&gt; model has an &lt;code&gt;enable_comments&lt;/code&gt; field that isn&amp;rsquo;t used by &lt;code&gt;contrib.flatpages&lt;/code&gt;, but that could be useful for your project or third-party apps. It doesn&amp;rsquo;t appear in the admin interface, but you can add it by registering a custom &lt;code&gt;ModelAdmin&lt;/code&gt; for &lt;code&gt;FlatPage&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febe870245ad5511a3f4858b0540d28944d20b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Func&lt;/code&gt; API is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a72ed1bf58193aff3180a260d78cc621fc0e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeoIP&lt;/code&gt; object does not require any parameters to use the default settings. However, at the very least the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting should be set with the path of the location of your GeoIP datasets. The following initialization keywords may be used to customize any of the defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6414ffb3ba6fded4cbd0a1899d767fcea55d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http404&lt;/code&gt; exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cda89552d958897dfe6d132bb500672085e573" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageFile&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f8b04f8e2ec015495e351d3569efe2ee601c55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InlineModelAdmin&lt;/code&gt; class adds or customizes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea7feb931720f672eb4c497f95a2887f664db56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSONCatalog&lt;/code&gt; view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e27874a268965948a0edf09905add1420dd83d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f04585d56697a5d0e0b9995400c63e76b05f667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LANG&lt;/code&gt; environment variable is responsible for setting the expected encoding on Unix platforms. Consult the documentation for your operating system and application server for the appropriate syntax and location to set this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285cf5f207a7ef3fbcc78086d3571c83dbb83f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Library.filter()&lt;/code&gt; method takes two arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabe8d4c021337d761f9d3b91be35537f6938137" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LogEntry&lt;/code&gt; class tracks additions, changes, and deletions of objects done through the admin interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcfcc7809e21efd896fa27c469328cf7acd7806" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginRequired&lt;/code&gt; mixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c178f34bc0712ff7919ec4e4381fc5d4e1351174" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Manager&lt;/code&gt; instance created by &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.as_manager&quot;&gt;&lt;code&gt;QuerySet.as_manager()&lt;/code&gt;&lt;/a&gt; will be virtually identical to the &lt;code&gt;PersonManager&lt;/code&gt; from the previous example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a061a7cbda401e1c2998d04aa4da33cd95b74423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Message&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeafa73f42a5c6cffacbc1c1eced4dde098973fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelAdmin&lt;/code&gt; class is the representation of a model in the admin interface. Usually, these are stored in a file named &lt;code&gt;admin.py&lt;/code&gt; in your application. Let&amp;rsquo;s take a look at an example of the &lt;code&gt;ModelAdmin&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c9ded338b366b981096905686705ca916c572c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelAdmin&lt;/code&gt; is very flexible. It has several options for dealing with customizing the interface. All options are defined on the &lt;code&gt;ModelAdmin&lt;/code&gt; subclass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5dd73c8ec6250cee9eca5fba0b2e0e9caba77a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelForm.clean()&lt;/code&gt; method sets a flag that makes the &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;model validation&lt;/a&gt; step validate the uniqueness of model fields that are marked as &lt;code&gt;unique&lt;/code&gt;, &lt;code&gt;unique_together&lt;/code&gt; or &lt;code&gt;unique_for_date|month|year&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4b7158ac1530a7d04e4fa10fa06ce0fdc5afb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyPerson&lt;/code&gt; class operates on the same database table as its parent &lt;code&gt;Person&lt;/code&gt; class. In particular, any new instances of &lt;code&gt;Person&lt;/code&gt; will also be accessible through &lt;code&gt;MyPerson&lt;/code&gt;, and vice-versa:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67a192312e68e9e91286de6c8d0e4786a94f427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PUT&lt;/code&gt; action is also handled and passes all parameters through to &lt;a href=&quot;#django.views.generic.edit.ProcessFormView.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666a8ee59e8634562737cf79e7bc6a0a23331d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Paginator&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8018100cec4f6c644b38502894290c3c27b8ff98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PermissionRequiredMixin&lt;/code&gt; mixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b799d6249c516fdabc4073a9921582597917fd4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Person&lt;/code&gt; objects returned by this query will be deferred model instances (see &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt;). This means that the fields that are omitted from the query will be loaded on demand. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafa6e51de54db1e1e0585166954505694b562e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Prefetch()&lt;/code&gt; object can be used to control the operation of &lt;a href=&quot;#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edefc338306ee3efcd160fd136a3325a4913ead6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QueryDict&lt;/code&gt;s at &lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.GET&lt;/code&gt; will be immutable when accessed in a normal request/response cycle. To get a mutable version you need to use &lt;a href=&quot;#django.http.QueryDict.copy&quot;&gt;&lt;code&gt;QueryDict.copy()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8a70643cc158234954d43aa26a9590d3ebaed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QuerySet&lt;/code&gt; class has two public attributes you can use for introspection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b575665a47ba0362c547db861ead9c76ba3ff3d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; authentication middleware assumes that the HTTP request header &lt;code&gt;REMOTE_USER&lt;/code&gt; is present with all authenticated requests. That might be expected and practical when Basic HTTP Auth with &lt;code&gt;htpasswd&lt;/code&gt; or similar mechanisms are used, but with Negotiate (GSSAPI/Kerberos) or other resource intensive authentication methods, the authentication in the front-end HTTP server is usually only set up for one or a few login URLs, and after successful authentication, the application is supposed to maintain the authenticated session itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b542265b1983b33fadc5e6f04eb4951d3d7e7b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SessionStore&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cf066edc359a135c3a713b1dfdba853aa404f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Storage&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed56488a4cb844d37f694c6eea5fbdd95577da59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Student&lt;/code&gt; model will have three fields: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;home_group&lt;/code&gt;. The &lt;code&gt;CommonInfo&lt;/code&gt; model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da96ff8aa6e3551b382f94119bd8fa3340fd2aeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Template&lt;/code&gt; obtained in the previous step has a &lt;a href=&quot;../../topics/templates#django.template.backends.base.Template.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; method which marshals a context and possibly a request into a &lt;a href=&quot;#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; and delegates the rendering to the underlying &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e27128238af2d5f6a740580b07db00d262b4fba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TemplateSyntaxError&lt;/code&gt; exceptions use the &lt;code&gt;tag_name&lt;/code&gt; variable. Don&amp;rsquo;t hard-code the tag&amp;rsquo;s name in your error messages, because that couples the tag&amp;rsquo;s name to your function. &lt;code&gt;token.contents.split()[0]&lt;/code&gt; will &amp;lsquo;&amp;rsquo;always&amp;rsquo;&amp;rsquo; be the name of your tag &amp;ndash; even when the tag has no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c091954b717320c11090e2070265b925d1a2a9ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextChoices&lt;/code&gt;, &lt;code&gt;IntegerChoices&lt;/code&gt;, and &lt;code&gt;Choices&lt;/code&gt; classes were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14288aba89c33872a740c10d4a391f80f0bf802d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UNION&lt;/code&gt; operator selects only distinct values by default. To allow duplicate values, use the &lt;code&gt;all=True&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155d1808963ceed66609cb3c1b8fd61fed485e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UpdateView&lt;/code&gt; page displayed to a &lt;code&gt;GET&lt;/code&gt; request uses a &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;'_form'&lt;/code&gt;. For example, changing this attribute to &lt;code&gt;'_update_form'&lt;/code&gt; for a view updating objects for the example &lt;code&gt;Author&lt;/code&gt; model would cause the default &lt;code&gt;template_name&lt;/code&gt; to be &lt;code&gt;'myapp/author_update_form.html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d308fa62178257f91629efa203f542cd07374b65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserAdmin&lt;/code&gt; provides a named URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53062c3a9371e633ac3ae69a192a4f0a96f3f759" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValidationError&lt;/code&gt; raised during model validation when the constraint is violated has the &lt;code&gt;unique_together&lt;/code&gt; error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f0c00d4ddb47408f98b0f5375559ae517828ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vary&lt;/code&gt; header defines which request headers a cache mechanism should take into account when building its cache key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a296183e71b88db6f8d0f224705c084727691887" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vary&lt;/code&gt; header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a Web page depend on a user&amp;rsquo;s language preference, the page is said to &amp;ldquo;vary on language.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4717077b7fad61b698d3696fa998b3983f06c8ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WSGIAuthUserScript&lt;/code&gt; directive tells mod_wsgi to execute the &lt;code&gt;check_password&lt;/code&gt; function in specified wsgi script, passing the user name and password that it receives from the prompt. In this example, the &lt;code&gt;WSGIAuthUserScript&lt;/code&gt; is the same as the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; that defines your application &lt;a href=&quot;index&quot;&gt;that is created by django-admin startproject&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d83ceb03961e0133df4bfeaa95be6f6ba88db6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WSGIPythonPath&lt;/code&gt; line ensures that your project package is available for import on the Python path; in other words, that &lt;code&gt;import mysite&lt;/code&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25533319195395dc78eabeafda0877205e33873c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WSGIRequest&lt;/code&gt; instance generated by the test handler that generated the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66afd505ff8a2b88d4d404382dba8366c94adbdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; class is the main expression for an &lt;code&gt;OVER&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8979a358900953093d2326b9824ba1de2de53ea2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;X-Frame-Options&lt;/code&gt; HTTP header will only be set by the middleware or view decorators if it is not already present in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d09a0d425815f28ca10ad6b5cbfd35f8a48aadd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;X-Frame-Options&lt;/code&gt; header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need &lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking#Prevention&quot;&gt;other clickjacking prevention techniques&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36695a4a662815bce0c58313089f7aaa0f48d50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__call__()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d43e36285954e8018df358dc63c1c96dce6c55d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__hash__()&lt;/code&gt; method is based on the instance&amp;rsquo;s primary key value. It is effectively &lt;code&gt;hash(obj.pk)&lt;/code&gt;. If the instance doesn&amp;rsquo;t have a primary key value then a &lt;code&gt;TypeError&lt;/code&gt; will be raised (otherwise the &lt;code&gt;__hash__()&lt;/code&gt; method would return different values before and after the instance is saved, but changing the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; value of an instance is forbidden in Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b245c13863acef3cf98e9755c517e60cd4238be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__html__()&lt;/code&gt; method on a class helps non-Django templates detect classes whose output doesn&amp;rsquo;t require HTML escaping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242cd5c6915a028a44de86d1423bf8dbd0db36f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method is called whenever you call &lt;code&gt;str()&lt;/code&gt; on an object. Django uses &lt;code&gt;str(obj)&lt;/code&gt; in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the &lt;code&gt;__str__()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94b365dd5e4fdc21c38390fcbd56923e0217c62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method is just as valid in &lt;code&gt;list_display&lt;/code&gt; as any other model method, so it&amp;rsquo;s perfectly OK to do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1166692699eb0d9c437ab4c9c89c728a9df40b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method of the model will be called to generate string representations of the objects for use in the field&amp;rsquo;s choices. To provide customized representations, subclass &lt;code&gt;ModelChoiceField&lt;/code&gt; and override &lt;code&gt;label_from_instance&lt;/code&gt;. This method will receive a model object and should return a string suitable for representing it. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8e00c0f07ddecf5b0083b8a3e48275147ace7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__str__()&lt;/code&gt; method of this object displays the HTML for this field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02b06decdff25a6b34edac539ebe7fdca953884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_private.py&lt;/code&gt; module will not be available as a management command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3129f56bffecbb12af92556c1e2b3dd0d2e6e694" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alias&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59494d9c4e049331ff85ce6c2568b743a72e88c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aliases&lt;/code&gt; argument determines which &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; aliases test databases should be setup for. If it&amp;rsquo;s not provided, it defaults to all of &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; aliases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8750e97ecb463c425823eb7cc1352eae9ebfe833" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aliases&lt;/code&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040e41485d8ef0ae272ef7bd601f4a429ca88bf3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;all()&lt;/code&gt; is redundant in this example, so this could be simplified to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6dc9679098f04080112228476983b6a1976393" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow_distinct&lt;/code&gt; attribute and &lt;code&gt;distinct&lt;/code&gt; argument were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bb54cee1b3911dbfb881e060211c780f0ea073" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app_label&lt;/code&gt; positional argument is the label of the application being migrated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bdb389563417a3b0a519152176d6ed8447860f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;application&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2c21610a893a69f159ee7fade61111640f2947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as_p()&lt;/code&gt;, &lt;code&gt;as_ul()&lt;/code&gt;, and &lt;code&gt;as_table()&lt;/code&gt; methods are shortcuts &amp;ndash; they&amp;rsquo;re not the only way a form object can be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a62e596278fcb3fdb7a0e6cbf94bfa691b95db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as_vendor()&lt;/code&gt; methods should use the &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, &lt;code&gt;arg_joiner&lt;/code&gt;, and any other &lt;code&gt;**extra_context&lt;/code&gt; parameters to customize the SQL as needed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0b060b2a387bc6f0547172f29bfda89f363e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atomic&lt;/code&gt; attribute doesn&amp;rsquo;t have an effect on databases that don&amp;rsquo;t support DDL transactions (e.g. MySQL, Oracle). (MySQL&amp;rsquo;s &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/atomic-ddl.html&quot;&gt;atomic DDL statement support&lt;/a&gt; refers to individual statements rather than multiple statements wrapped in a transaction that can be rolled back.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5071623fbdd5e7cd63c8530a1a34501032f3d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authenticate&lt;/code&gt; method takes a &lt;code&gt;request&lt;/code&gt; argument and credentials as keyword arguments. Most of the time, it&amp;rsquo;ll look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bd50999a8a07b661852e5912695c810796717b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto_now&lt;/code&gt; and &lt;code&gt;auto_now_add&lt;/code&gt; options will always use the date in the &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;default timezone&lt;/a&gt; at the moment of creation or update. If you need something different, you may want to consider using your own callable default or overriding &lt;code&gt;save()&lt;/code&gt; instead of using &lt;code&gt;auto_now&lt;/code&gt; or &lt;code&gt;auto_now_add&lt;/code&gt;; or using a &lt;code&gt;DateTimeField&lt;/code&gt; instead of a &lt;code&gt;DateField&lt;/code&gt; and deciding how to handle the conversion from datetime to date at display time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f42d2abe12a2c52440a2178e6b239cd5f4d2cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autosummarize&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba83b90756f2ace91825b6864267bdb1d2dd334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;band_input&lt;/code&gt; dictionary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e650b6d21fc6995e2e4c4bddb5833894f2cc980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bands&lt;/code&gt; key in the &lt;code&gt;ds_input&lt;/code&gt; dictionary is a list of &lt;code&gt;band_input&lt;/code&gt; dictionaries. Each &lt;code&gt;band_input&lt;/code&gt; dictionary can contain pixel values and the &amp;ldquo;no data&amp;rdquo; value to be set on the bands of the new raster. The data array can have the full size of the new raster or be smaller. For arrays that are smaller than the full raster, the &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt;, and &lt;code&gt;offset&lt;/code&gt; keys control the pixel values. The corresponding keys are passed to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/a&gt; method. Their functionality is the same as setting the band data with that method. The following table describes the keys that can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127a774352ae775d1a734f12eb032c19f5941490" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base.py&lt;/code&gt; module must contain a class named &lt;code&gt;DatabaseWrapper&lt;/code&gt; that subclasses an existing engine from the &lt;code&gt;django.db.backends&lt;/code&gt; module. Here&amp;rsquo;s an example of subclassing the PostgreSQL engine to change a feature class &lt;code&gt;allows_group_by_selected_pks_on_model&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350daf9adcbd3902411ac2fd50a35ba2aff803a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batch_size&lt;/code&gt; parameter controls how many objects are created in a single query. The default is to create all objects in one batch, except for SQLite where the default is such that at most 999 variables per query are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148a50ded27967b9b5e995fa4ee2dfefe0180318" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batch_size&lt;/code&gt; parameter controls how many objects are saved in a single query. The default is to update all objects in one batch, except for SQLite and Oracle which have restrictions on the number of variables used in a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839ea21b855d7bebf3c528d20a38d7f0c39d1918" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binutils&lt;/code&gt; package may be installed on Debian and Ubuntu systems using the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242af23e9647f0e506b37c5b30b71ec386636d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blog_articles&lt;/code&gt; view needs the outermost captured argument to be reversed, &lt;code&gt;page-2/&lt;/code&gt; or no arguments in this case, while &lt;code&gt;comments&lt;/code&gt; can be reversed with either no arguments or a value for &lt;code&gt;page_number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cc1a05ada301e38f2a5deb777002a4cb21a84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changed_data&lt;/code&gt; attribute returns a list of the names of the fields whose values in the form&amp;rsquo;s bound data (usually &lt;code&gt;request.POST&lt;/code&gt;) differ from what was provided in &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt;. It returns an empty list if no data differs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b158cebf7ca06f6bb44d798cabf4ff75fe620b68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunk_size&lt;/code&gt; parameter controls the size of batches Django retrieves from the database driver. Larger batches decrease the overhead of communicating with the database driver at the expense of a slight increase in memory consumption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0e6efeac5dbe6abb2828a00ea8c0e8ed0f93ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clean()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; subclass is responsible for running &lt;code&gt;to_python()&lt;/code&gt;, &lt;code&gt;validate()&lt;/code&gt;, and &lt;code&gt;run_validators()&lt;/code&gt; in the correct order and propagating their errors. If, at any time, any of the methods raise &lt;code&gt;ValidationError&lt;/code&gt;, the validation stops and that error is raised. This method returns the clean data, which is then inserted into the &lt;code&gt;cleaned_data&lt;/code&gt; dictionary of the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c52417139bac92e876f396b203f816a08c893de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt; method is called on a form subclass &amp;ndash; where &lt;code&gt;&amp;lt;fieldname&amp;gt;&lt;/code&gt; is replaced with the name of the form field attribute. This method does any cleaning that is specific to that particular attribute, unrelated to the type of field that it is. This method is not passed any parameters. You will need to look up the value of the field in &lt;code&gt;self.cleaned_data&lt;/code&gt; and remember that it will be a Python object at this point, not the original string submitted in the form (it will be in &lt;code&gt;cleaned_data&lt;/code&gt; because the general field &lt;code&gt;clean()&lt;/code&gt; method, above, has already cleaned the data once).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bdefbb47e8a8cd64bd76c6906f4ab1a9280839" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closepoll.py&lt;/code&gt; module has only one requirement &amp;ndash; it must define a class &lt;code&gt;Command&lt;/code&gt; that extends &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt; or one of its &lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;subclasses&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d147cb6a81ba4e1f9f1cfdd857bfa6d5debf2964" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; argument is ignored with MySQL and MariaDB as neither supports conditional indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07df2f86e6de88400ec849e2aa274e8a6dec96e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676451c2a4a971d9135da0ad4e5193ea055be77c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator is useful for more than only &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; requests (&lt;code&gt;HEAD&lt;/code&gt; requests are the same as &lt;code&gt;GET&lt;/code&gt; in this situation). It can also be used to provide checking for &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; requests. In these situations, the idea isn&amp;rsquo;t to return a &amp;ldquo;not modified&amp;rdquo; response, but to tell the client that the resource they are trying to change has been altered in the meantime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da5e5f87c99e48862267658f8355a10d6f1ffea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator only sets validator headers (&lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt;) for safe HTTP methods, i.e. &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;. If you wish to return them in other cases, set them in your view. See &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231#section-4.3.4&lt;/strong&gt;&lt;/a&gt; to learn about the distinction between setting a validator header in response to requests made with &lt;code&gt;PUT&lt;/code&gt; versus &lt;code&gt;POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5358b33428e764a771faf195a50a4b6effe41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;condition&lt;/code&gt; decorator&amp;rsquo;s signature looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c2a511c9148521ac6efd590bade037fbd21edc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contained_by&lt;/code&gt; lookup is also available on the non-range field types: &lt;a href=&quot;../../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.BigIntegerField&quot;&gt;&lt;code&gt;BigIntegerField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cc9e8b50e8cd04d1c33d74ab44ee31f338d72b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;intersects&lt;/code&gt; lookups are just a subset of the available queries &amp;ndash; the &lt;a href=&quot;db-api&quot;&gt;GeoDjango Database API&lt;/a&gt; documentation has more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c21a9a282bc1271bd8dadc73df3306e76dd19f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content&lt;/code&gt; argument must be an instance of &lt;a href=&quot;file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt; or a file-like object that can be wrapped in &lt;code&gt;File&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005cc4262486e03357f8a1cf9c1427d3554d3464" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context_processors&lt;/code&gt; option is a list of callables &amp;ndash; called &lt;strong&gt;context processors&lt;/strong&gt; &amp;ndash; that take a request object as their argument and return a dictionary of items to be merged into the context. In the default generated settings file, the default template engine contains the following context processors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af77d9107d35b8e2882dbc247226a417f3f94d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;converter&lt;/code&gt; argument is a converter class, and &lt;code&gt;type_name&lt;/code&gt; is the converter name to use in path patterns. See &lt;a href=&quot;../topics/http/urls#registering-custom-path-converters&quot;&gt;Registering custom path converters&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600d94b23358b9e64a45d7079ab642cd07e9bfe8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;covers&lt;/code&gt; predicate has the following equivalent definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aed277329d52559aed9e42ae909ea0493b089e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;current_app&lt;/code&gt; argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This &lt;code&gt;current_app&lt;/code&gt; argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the &lt;a href=&quot;../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;namespaced URL resolution strategy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29ae58720a36ebd27ff270ec3a4a67136670d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;databases&lt;/code&gt; flag also controls which databases the &lt;a href=&quot;#django.test.TransactionTestCase.fixtures&quot;&gt;&lt;code&gt;TransactionTestCase.fixtures&lt;/code&gt;&lt;/a&gt; are loaded into. By default, fixtures are only loaded into the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc435999c74ad21471b72975a1b3703b615d2231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;db&lt;/code&gt; argument contains the database alias for the database the model is loaded from, &lt;code&gt;field_names&lt;/code&gt; contains the names of all loaded fields, and &lt;code&gt;values&lt;/code&gt; contains the loaded values for each field in &lt;code&gt;field_names&lt;/code&gt;. The &lt;code&gt;field_names&lt;/code&gt; are in the same order as the &lt;code&gt;values&lt;/code&gt;. If all of the model&amp;rsquo;s fields are present, then &lt;code&gt;values&lt;/code&gt; are guaranteed to be in the order &lt;code&gt;__init__()&lt;/code&gt; expects them. That is, the instance can be created by &lt;code&gt;cls(*values)&lt;/code&gt;. If any fields are deferred, they won&amp;rsquo;t appear in &lt;code&gt;field_names&lt;/code&gt;. In that case, assign a value of &lt;code&gt;django.db.models.DEFERRED&lt;/code&gt; to each of the missing fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8a573ac216d9a5b7bad577de73fb00d9b8a4f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defer()&lt;/code&gt; method (and its cousin, &lt;a href=&quot;#django.db.models.query.QuerySet.only&quot;&gt;&lt;code&gt;only()&lt;/code&gt;&lt;/a&gt;, below) are only for advanced use-cases. They provide an optimization for when you have analyzed your queries closely and understand &lt;em&gt;exactly&lt;/em&gt; what information you need and have measured that the difference between returning the fields you need and the full set of fields for the model will be significant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2b9b5e2c58ba6aa45bb769c054c156476e6dc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete()&lt;/code&gt; is applied instantly. You cannot call &lt;code&gt;delete()&lt;/code&gt; on a &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that has had a slice taken or can otherwise no longer be filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5ee7495aeed1ad4fa9a2df385383ac53997509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete()&lt;/code&gt; method does a bulk delete and does not call any &lt;code&gt;delete()&lt;/code&gt; methods on your models. It does, however, emit the &lt;a href=&quot;../signals#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_delete&quot;&gt;&lt;code&gt;post_delete&lt;/code&gt;&lt;/a&gt; signals for all deleted objects (including cascaded deletions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0061be28bab77cda22844b74eb4a9f297fcbbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete_model&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and a model instance. Overriding this method allows doing pre- or post-delete operations. Call &lt;code&gt;super().delete_model()&lt;/code&gt; to delete the object using &lt;a href=&quot;../../models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;Model.delete()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334c2703a76253aba2e4c34a08bfba6b4664d5eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete_queryset()&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and a &lt;code&gt;QuerySet&lt;/code&gt; of objects to be deleted. Override this method to customize the deletion process for the &amp;ldquo;delete selected objects&amp;rdquo; &lt;a href=&quot;actions&quot;&gt;action&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105675c32417c794f56e90baf6f0548c41d90b7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dependencies&lt;/code&gt; property is declared like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab64b1dcc0ea87c192718ade70afa20e9c9f314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;detail()&lt;/code&gt; (from &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;) and &lt;code&gt;results()&lt;/code&gt; views are very short &amp;ndash; and, as mentioned above, redundant. The &lt;code&gt;index()&lt;/code&gt; view, which displays a list of polls, is similar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ac64ae4db395ba92f375f1894e081e8eedc65f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; boolean argument, when set to &lt;code&gt;True&lt;/code&gt;, disables a form field using the &lt;code&gt;disabled&lt;/code&gt; HTML attribute so that it won&amp;rsquo;t be editable by users. Even if a user tampers with the field&amp;rsquo;s value submitted to the server, it will be ignored in favor of the value from the form&amp;rsquo;s initial data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4bb422f6b07cdcfa59a89628fda5ae5f1770a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;distinct&lt;/code&gt; argument determines whether or not the aggregate function should be invoked for each distinct value of &lt;code&gt;expressions&lt;/code&gt; (or set of values, for multiple &lt;code&gt;expressions&lt;/code&gt;). The argument is only supported on aggregates that have &lt;a href=&quot;#django.db.models.Aggregate.allow_distinct&quot;&gt;&lt;code&gt;allow_distinct&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554557058166afd6d58febc2557ac2927634999d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; / &lt;code&gt;manage.py&lt;/code&gt; commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won&amp;rsquo;t use the color codes if you&amp;rsquo;re piping the command&amp;rsquo;s output to another program unless the &lt;a href=&quot;#cmdoption-force-color&quot;&gt;&lt;code&gt;--force-color&lt;/code&gt;&lt;/a&gt; option is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee94f96f99978afde505223c4d2d3c486ea61b19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; script should be on your system path if you installed Django via &lt;code&gt;pip&lt;/code&gt;. If it&amp;rsquo;s not on your path, you can find it in &lt;code&gt;site-packages/django/bin&lt;/code&gt; within your Python installation. Consider symlinking it from some place on your path, such as &lt;code&gt;/usr/local/bin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715f022d061bbda6ba2084bf2e86c4564dfd9e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django-admin&lt;/code&gt; utility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efdda5a91b60c90410571e56e94f021572e91f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.middleware.gzip.GZipMiddleware&lt;/code&gt; compresses content for browsers that understand GZip compression (all modern browsers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b272884f04c42a4c7bce64e53ab9d7654cba2e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.middleware.security.SecurityMiddleware&lt;/code&gt; provides several security enhancements to the request/response cycle. Each one can be independently enabled or disabled with a setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b490748982f6e86c39781b79caffc39dafaa554b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.template.loader&lt;/code&gt; module defines two functions to load templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754d81f25843e3630b44190f127e7ab88dca50ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.utils.encoding&lt;/code&gt; module contains a few functions that are handy for converting back and forth between strings and bytestrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c802771bce8ac3d3e8bfdc6da5d8a583dbef074a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django.views.decorators.http.etag&lt;/code&gt; and &lt;code&gt;django.views.decorators.http.last_modified&lt;/code&gt; decorators are passed the same type of functions as the &lt;code&gt;condition&lt;/code&gt; decorator. Their signatures are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4c982787a5d9e1fcf99c43a7857b7c7a301d8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django&lt;/code&gt; logger sends messages in the &lt;code&gt;django&lt;/code&gt; hierarchy (except &lt;code&gt;django.server&lt;/code&gt;) at the &lt;code&gt;INFO&lt;/code&gt; level or higher to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e9d08c01f536decd3318f78da920b131d4d144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;django&lt;/code&gt; logger sends messages in the &lt;code&gt;django&lt;/code&gt; hierarchy (except &lt;code&gt;django.server&lt;/code&gt;) with &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;CRITICAL&lt;/code&gt; level to &lt;a href=&quot;#django.utils.log.AdminEmailHandler&quot;&gt;&lt;code&gt;AdminEmailHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b409aa09cbe33e796179e11ffc5cdf9cc21b26c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ds_input&lt;/code&gt; dictionary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9070debf7227bd168fc7e1983cb351125bcb6837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; parameters were made optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe92c5fd85ab431e21579896b995263bf4f6366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoder&lt;/code&gt;, which defaults to &lt;a href=&quot;../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;django.core.serializers.json.DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt;, will be used to serialize the data. See &lt;a href=&quot;../topics/serialization#serialization-formats-json&quot;&gt;JSON serialization&lt;/a&gt; for more details about this serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce87d8775873b615bca016e8e0bf32cf991c005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enforce_csrf_checks&lt;/code&gt; argument can be used to test CSRF protection (see above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37cd3506d938c6459bca470103356dacd07f429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;environ&lt;/code&gt; dictionary provided to the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff28e6fc9e2e8861fb89838e679469506d760422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; argument can be a string, or preferably an instance of &lt;code&gt;ValidationError&lt;/code&gt;. See &lt;a href=&quot;validation#raising-validation-error&quot;&gt;Raising ValidationError&lt;/a&gt; for best practices when defining form errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59a906a0f8ad980a261062dfdd7376f15de2056" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_messages&lt;/code&gt; argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529d7b0b3b8abc125f670d8d709d2108117fd718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_messages&lt;/code&gt; argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f63145fb6ff6fc3de368350fbbb7eeb95a679e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape_html&lt;/code&gt; parameter behaves as described in &lt;a href=&quot;#django.forms.Form.errors.as_json&quot;&gt;&lt;code&gt;Form.errors.as_json()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddd9327a8323ea356bfd11d4a83957c2b92f7bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expression&lt;/code&gt; argument is either a &lt;a href=&quot;database-functions#window-functions&quot;&gt;window function&lt;/a&gt;, an &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate function&lt;/a&gt;, or an expression that&amp;rsquo;s compatible in a window clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd21e868a58cb8aded4d3a24a87406e82e300d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expressions&lt;/code&gt; positional arguments can include expressions or the names of model fields. They will be converted to a string and used as the &lt;code&gt;expressions&lt;/code&gt; placeholder within the &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55be1543700537de67850b99d6a1b3674199e10d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra&lt;/code&gt; argument acts the same as for &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e5ce7d47bd10516322155266ef668a65d05dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra&lt;/code&gt; keyword arguments parameter can be used to specify headers to be sent in the request. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8fecf5c3d69c3dad5a5f4f5174789911878085" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra_fields&lt;/code&gt; keyword arguments are passed through to the &lt;a href=&quot;#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;__init__&lt;/code&gt; method to allow setting arbitrary fields on a &lt;a href=&quot;../../topics/auth/customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cf16d9061426baa9f5929184a4c9e65561102d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fail_silently&lt;/code&gt; argument controls how the backend should handle errors. If &lt;code&gt;fail_silently&lt;/code&gt; is True, exceptions during the email sending process will be silently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227a1fc8697b21feca5fb3725d66b805b2610bd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field&lt;/code&gt; argument is the name of the field to which the errors should be added. If its value is &lt;code&gt;None&lt;/code&gt; the error will be treated as a non-field error as returned by &lt;a href=&quot;#django.forms.Form.non_field_errors&quot;&gt;&lt;code&gt;Form.non_field_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3130b09cc5888f4344b4fb96a856974a85cd9d6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;field_options&lt;/code&gt; dictionary can have the following keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef24f76914696345a84cdc8c99b23562b9f5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; attribute works the same way as the &lt;code&gt;fields&lt;/code&gt; attribute on the inner &lt;code&gt;Meta&lt;/code&gt; class on &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;. Unless you define the form class in another way, the attribute is required and the view will raise an &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception if it&amp;rsquo;s not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d3f4226bdb078eeb9c2c2f412780c2f6769345" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; option accepts the same types of values as &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt;, except that callables aren&amp;rsquo;t accepted. Names of model and model admin methods will only be used if they&amp;rsquo;re listed in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea4da011d346501d0e2995dfa66cd403498de86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; argument may include a path as returned by &lt;a href=&quot;../models/fields#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;FileField.upload_to&lt;/code&gt;&lt;/a&gt;. In that case, the path won&amp;rsquo;t be passed to &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_valid_name&quot;&gt;&lt;code&gt;get_valid_name()&lt;/code&gt;&lt;/a&gt; but will be prepended back to the resulting name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5bc8df51bb2770da0a361084bd71b5da2e6c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; argument takes a &lt;a href=&quot;querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt; that&amp;rsquo;s used to filter the rows that are aggregated. See &lt;a href=&quot;conditional-expressions#conditional-aggregation&quot;&gt;Conditional aggregation&lt;/a&gt; and &lt;a href=&quot;../../topics/db/aggregation#filtering-on-annotations&quot;&gt;Filtering on annotations&lt;/a&gt; for example usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e695baa760ebfa7a7a3af6b0c77d3eebe9ec9770" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; arguments act the same as for &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c69e9db7109cd1093b97a5f1e8d115d3decb1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;follow&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt;, and &lt;code&gt;extra&lt;/code&gt; arguments act the same as for &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;Client.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a2b17496e4da60c33885e9950835e19b0694a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; tag can take an optional &lt;code&gt;{% empty %}&lt;/code&gt; clause whose text is displayed if the given array is empty or could not be found:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b43ede79c55c7b49dd8a9f31b2c61ad839c7c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for_concrete_model&lt;/code&gt; argument corresponds to the &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model&quot;&gt;&lt;code&gt;for_concrete_model&lt;/code&gt;&lt;/a&gt; argument on &lt;code&gt;GenericForeignKey&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03936ee48140a19fe86e917e4c8c5ca1da003130" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;form_kwargs&lt;/code&gt; may also depend on the specific form instance. The formset base class provides a &lt;code&gt;get_form_kwargs&lt;/code&gt; method. The method takes a single argument - the index of the form in the formset. The index is &lt;code&gt;None&lt;/code&gt; for the &lt;a href=&quot;#empty-form&quot;&gt;empty_form&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e81df20d77b84a800ef455ddf70b8a56f1656b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; parameter changes the output format from the databases&amp;rsquo;s default, usually text-based. PostgreSQL supports &lt;code&gt;'TEXT'&lt;/code&gt;, &lt;code&gt;'JSON'&lt;/code&gt;, &lt;code&gt;'YAML'&lt;/code&gt;, and &lt;code&gt;'XML'&lt;/code&gt;. MySQL supports &lt;code&gt;'TEXT'&lt;/code&gt; (also called &lt;code&gt;'TRADITIONAL'&lt;/code&gt;) and &lt;code&gt;'JSON'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ea6e91c6855a52f5e223daf2a9f1560e5bc2b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; string is a normal Python formatting string describing the details that are to be output on each logging line. The full list of detail that can be output can be found in &lt;a href=&quot;https://docs.python.org/3/library/logging.html#formatter-objects&quot;&gt;Formatter Objects&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b1bf604206212572a560228da76cd4978976e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;formfield_for_foreignkey&lt;/code&gt; method on a &lt;code&gt;ModelAdmin&lt;/code&gt; allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af953dad1272529a6ebe31a577aca6d0a58e0a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;frame&lt;/code&gt; parameter specifies which other rows that should be used in the computation. See &lt;a href=&quot;#window-frames&quot;&gt;Frames&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee79af5100a74898bf0e1d325662fad3184f08fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from_db()&lt;/code&gt; method can be used to customize model instance creation when loading from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fefbbb7a32c81388579de62a4f48c1322432786" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;template&lt;/code&gt;, and &lt;code&gt;arg_joiner&lt;/code&gt; keywords can be used to replace the attributes of the same name without having to define your own class. &lt;code&gt;output_field&lt;/code&gt; can be used to define the expected return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af005ecc55096de924e70b463ab323db6f99517" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;geodjango&lt;/code&gt; project settings are stored in the &lt;code&gt;geodjango/settings.py&lt;/code&gt; file. Edit the database connection settings to match your setup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6261e5e19b0103508a4f772f93affa6b3ea47bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;geojson&lt;/code&gt; serializer is not meant for round-tripping data, as it has no deserializer equivalent. For example, you cannot use &lt;a href=&quot;../../django-admin#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; to reload the output produced by this serializer. If you plan to reload the outputted data, use the plain &lt;a href=&quot;../../../topics/serialization#serialization-formats-json&quot;&gt;json serializer&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bc251219a3c6361014e07b174b00adc0f70011" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; methods both return a &lt;code&gt;Response&lt;/code&gt; object. This &lt;code&gt;Response&lt;/code&gt; object is &lt;em&gt;not&lt;/em&gt; the same as the &lt;code&gt;HttpResponse&lt;/code&gt; object returned by Django views; the test response object has some additional data useful for test code to verify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4644e38a5b4ed90e43cb4a95b5b04a9ad2295bd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_autocomplete_fields()&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names that will be displayed with an autocomplete widget as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.autocomplete_fields&quot;&gt;&lt;code&gt;ModelAdmin.autocomplete_fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5176b83061fe07acd35cb8583738ca8101f44b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_exclude&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a list of fields, as described in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.exclude&quot;&gt;&lt;code&gt;ModelAdmin.exclude&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755e82fff8b7899063270b4eb42e60c723f98e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a list of fields, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;ModelAdmin.fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198991e31c914bc986ef1174446070721aea8002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_fieldsets&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a list of two-tuples, in which each two-tuple represents a &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; on the admin form page, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00df08ce04cf3666f946909512833c065f35fa46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_format&lt;/code&gt; function has access to the configured i18n formatting settings and can retrieve the format string for a given setting name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b40622097cc8f4cbe32e1fa473f94495c878dfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_inline_instances&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of &lt;a href=&quot;#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; objects, as described below in the &lt;a href=&quot;#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; section. For example, the following would return inlines without the default filtering based on add, change, delete, and view permissions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e692bee930fd4e9e3bfb396dc06eef242c2b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_inlines&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return an iterable of inlines. You can override this method to dynamically add inlines based on the request or model instance instead of specifying them in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.inlines&quot;&gt;&lt;code&gt;ModelAdmin.inlines&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3040761ce63b148627de401548cd68bb71755f08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_language_info()&lt;/code&gt; function provides detailed information about languages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852a4619c006a3651094ececb52b7e69441578d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_display&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names that will be displayed on the changelist view as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;ModelAdmin.list_display&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b755ef879e69ace6824c12c62b70e3e1c468d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_display_links&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; returned by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_display&quot;&gt;&lt;code&gt;ModelAdmin.get_list_display()&lt;/code&gt;&lt;/a&gt;. It is expected to return either &lt;code&gt;None&lt;/code&gt; or a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names on the changelist that will be linked to the change view, as described in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display_links&quot;&gt;&lt;code&gt;ModelAdmin.list_display_links&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbcea4b076e289d3280ca8b246b0d775f7dc6f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_filter&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return the same kind of sequence type as for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d3756bff1c41f38b16948ade80e5e01b268f81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_list_select_related&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and should return a boolean or list as &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_select_related&quot;&gt;&lt;code&gt;ModelAdmin.list_select_related&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fad6a9317395add4e08220a598d083ef68feb4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_or_create()&lt;/code&gt; method has similar error behavior to &lt;a href=&quot;#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; when you&amp;rsquo;re using manually specified primary keys. If an object needs to be created and the key already exists in the database, an &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edb8c859b219486db4db13b0c0ff3a589490539" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_ordering&lt;/code&gt; method takes a &lt;code&gt;request&lt;/code&gt; as parameter and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; for ordering similar to the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; attribute. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d1d66947d4db50472f5745c27c90cafbf119f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_prepopulated_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a &lt;code&gt;dictionary&lt;/code&gt;, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.prepopulated_fields&quot;&gt;&lt;code&gt;ModelAdmin.prepopulated_fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c7d836a850e61a7cc9eac0531c6c15a726119c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_queryset&lt;/code&gt; method on a &lt;code&gt;ModelAdmin&lt;/code&gt; returns a &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2808c552bcbc92b5c6cd5c6e8a9529417baedbc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_readonly_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and the &lt;code&gt;obj&lt;/code&gt; being edited (or &lt;code&gt;None&lt;/code&gt; on an add form) and is expected to return a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; of field names that will be displayed as read-only, as described above in the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;ModelAdmin.readonly_fields&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e4c35370b765d264ee5046e3e9c0fa2eba899f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_response&lt;/code&gt; callable provided by Django might be the actual view (if this is the last listed middleware) or it might be the next middleware in the chain. The current middleware doesn&amp;rsquo;t need to know or care what exactly it is, just that it represents whatever comes next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42cf7b6677ddc723603ee6f8bf35ebe461c378d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_search_fields&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return the same kind of sequence type as for the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;search_fields&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c3233a6fe16b13e93695d98da3ffc24c66a93c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_search_results&lt;/code&gt; method modifies the list of objects displayed into those that match the provided search term. It accepts the request, a queryset that applies the current filters, and the user-provided search term. It returns a tuple containing a queryset modified to implement the search, and a boolean indicating if the results may contain duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d5c1b01fa74758fe1927836211bbe738b7378" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_sortable_by()&lt;/code&gt; method is passed the &lt;code&gt;HttpRequest&lt;/code&gt; and is expected to return a collection (e.g. &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, or &lt;code&gt;set&lt;/code&gt;) of field names that will be sortable in the change list page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e4efd30eb710f485b68af67a07b75591f48ecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_urls&lt;/code&gt; method on a &lt;code&gt;ModelAdmin&lt;/code&gt; returns the URLs to be used for that ModelAdmin in the same way as a URLconf. Therefore you can extend them as documented in &lt;a href=&quot;../../../topics/http/urls&quot;&gt;URL dispatcher&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa93c96fae27002f96fa896e99d9a22fc33c61c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get_user&lt;/code&gt; method takes a &lt;code&gt;user_id&lt;/code&gt; &amp;ndash; which could be a username, database ID or whatever, but has to be the primary key of your user object &amp;ndash; and returns a user object or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720b9b664b79d7bd448e6d9bcd4e8d3b07c4409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gettext&lt;/code&gt; function behaves similarly to the standard &lt;code&gt;gettext&lt;/code&gt; interface within your Python code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e83556dbbfdc2a626230db91da607d3375cab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle()&lt;/code&gt; method takes one or more &lt;code&gt;poll_ids&lt;/code&gt; and sets &lt;code&gt;poll.opened&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; for each one. If the user referenced any nonexistent polls, a &lt;a href=&quot;#django.core.management.CommandError&quot;&gt;&lt;code&gt;CommandError&lt;/code&gt;&lt;/a&gt; is raised. The &lt;code&gt;poll.opened&lt;/code&gt; attribute does not exist in the &lt;a href=&quot;../intro/tutorial02&quot;&gt;tutorial&lt;/a&gt; and was added to &lt;code&gt;polls.models.Question&lt;/code&gt; for this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2434f6311509e15e5576856722fd48f850d27218" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has_changed()&lt;/code&gt; method is used to determine if the field value has changed from the initial value. Returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7c784949b69451cfcd551cb296d2c319e3e23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help_text&lt;/code&gt; argument lets you specify descriptive text for this &lt;code&gt;Field&lt;/code&gt;. If you provide &lt;code&gt;help_text&lt;/code&gt;, it will be displayed next to the &lt;code&gt;Field&lt;/code&gt; when the &lt;code&gt;Field&lt;/code&gt; is rendered by one of the convenience &lt;code&gt;Form&lt;/code&gt; methods (e.g., &lt;code&gt;as_ul()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d45ee526d37e1c68494af99bcacbf305bfeffdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; attribute values are generated by prepending &lt;code&gt;id_&lt;/code&gt; to the form field names. This behavior is configurable, though, if you want to change the &lt;code&gt;id&lt;/code&gt; convention or remove HTML &lt;code&gt;id&lt;/code&gt; attributes and &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b5a121541650ec2354edc465ac362f2156cb4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifchanged&lt;/code&gt; tag can also take an optional &lt;code&gt;{% else %}&lt;/code&gt; clause that will be displayed if the value has not changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6215d24775f532c0acec6f163b0f848784c5b3bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignore_conflicts&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491d5f94e827a70f27f68b440bda880d3361ef95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include_html&lt;/code&gt; argument of &lt;code&gt;AdminEmailHandler&lt;/code&gt; is used to control whether the traceback email includes an HTML attachment containing the full content of the debug Web page that would have been produced if &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; were &lt;code&gt;True&lt;/code&gt;. To set this value in your configuration, include it in the handler definition for &lt;code&gt;django.utils.log.AdminEmailHandler&lt;/code&gt;, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045417884876ee26cd9ed54479966623f176dfba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initial&lt;/code&gt; argument is set to &lt;a href=&quot;#django.views.generic.edit.FormMixin.get_initial&quot;&gt;&lt;code&gt;get_initial()&lt;/code&gt;&lt;/a&gt;. If the request is a &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt;, the request data (&lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.FILES&lt;/code&gt;) will also be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b421260063c0a7da8d712fe749b9c0c4bbdd3b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initial&lt;/code&gt; argument lets you specify the initial value to use when rendering this &lt;code&gt;Field&lt;/code&gt; in an unbound &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587dffd1ab2f5b3de25664661b90ed9ecc58c177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interpolate&lt;/code&gt; function supports dynamically populating a format string. The interpolation syntax is borrowed from Python, so the &lt;code&gt;interpolate&lt;/code&gt; function supports both positional and named interpolation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf4709dabffeb2019d07cb0c69daafa4432f75f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invalid_choice&lt;/code&gt; error message may contain &lt;code&gt;%(value)s&lt;/code&gt;, which will be replaced with the selected choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c7084a67dbad9e052011c25164acf97dc027ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invalid_choice&lt;/code&gt; message may contain &lt;code&gt;%(value)s&lt;/code&gt; and the &lt;code&gt;invalid_pk_value&lt;/code&gt; message may contain &lt;code&gt;%(pk)s&lt;/code&gt;, which will be substituted by the appropriate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a49d7a7899560ebdd1c858882275e30b825c080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iri_to_uri()&lt;/code&gt; function will not change ASCII characters that are otherwise permitted in a URL. So, for example, the character &amp;lsquo;%&amp;rsquo; is not further encoded when passed to &lt;code&gt;iri_to_uri()&lt;/code&gt;. This means you can pass a full URL to this function and it will not mess up the query string or anything like that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3f432585755de56f959725bb5534e37beeec25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is_dst&lt;/code&gt; parameter indicates whether or not &lt;code&gt;pytz&lt;/code&gt; should interpret nonexistent and ambiguous datetimes in daylight saving time. By default (when &lt;code&gt;is_dst=None&lt;/code&gt;), &lt;code&gt;pytz&lt;/code&gt; raises an exception for such datetimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a01196b9b7e6f3aeb0e6702cf8ee27bedf29d4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is_dst&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27dd9e7df2b2bfc3889345674663ba735e58376" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;item&lt;/code&gt; attribute has been added for each URL to allow more flexible customization of the templates, such as &lt;a href=&quot;https://support.google.com/news/publisher/answer/74288?hl=en&quot;&gt;Google news sitemaps&lt;/a&gt;. Assuming Sitemap&amp;rsquo;s &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.items&quot;&gt;&lt;code&gt;items()&lt;/code&gt;&lt;/a&gt; would return a list of items with &lt;code&gt;publication_data&lt;/code&gt; and a &lt;code&gt;tags&lt;/code&gt; field something like this would generate a Google News compatible sitemap:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0a788a7406145689351a5a3e04f81e423b8411" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json_dumps_params&lt;/code&gt; parameter is a dictionary of keyword arguments to pass to the &lt;code&gt;json.dumps()&lt;/code&gt; call used to generate the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39ef318f4024f5c27e94d33225a4acc8c2ec8ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json_encoder&lt;/code&gt; argument allows setting a custom JSON encoder for the JSON serialization that&amp;rsquo;s described in &lt;a href=&quot;#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddd0240f2daceba3ef04ed169e2e06287f05eeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keep_lazy()&lt;/code&gt; decorator takes a number of extra arguments (&lt;code&gt;*args&lt;/code&gt;) specifying the type(s) that the original function can return. A common use case is to have functions that return text. For these, you can pass the &lt;code&gt;str&lt;/code&gt; type to &lt;code&gt;keep_lazy&lt;/code&gt; (or use the &lt;a href=&quot;#django.utils.functional.keep_lazy_text&quot;&gt;&lt;code&gt;keep_lazy_text()&lt;/code&gt;&lt;/a&gt; decorator described in the next section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252e8d5a57a36564be0d0827fa704d817fa5b64f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key_prefix&lt;/code&gt; and &lt;code&gt;cache&lt;/code&gt; arguments may be specified together. The &lt;code&gt;key_prefix&lt;/code&gt; argument and the &lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_PREFIX&quot;&gt;&lt;code&gt;KEY_PREFIX&lt;/code&gt;&lt;/a&gt; specified under &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; will be concatenated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225fa21eb9d1495e7c23f035f2d34079ef9f8a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kwargs&lt;/code&gt; argument allows you to pass additional arguments to the view function or method. See &lt;a href=&quot;../topics/http/urls#views-extra-options&quot;&gt;Passing extra options to view functions&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c6fe01854e626fcf6c1a2bda2635e4aef6a398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label&lt;/code&gt; argument lets you specify the &amp;ldquo;human-friendly&amp;rdquo; label for this field. This is used when the &lt;code&gt;Field&lt;/code&gt; is displayed in a &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4785fd2c6ffd98affefcf3ec0c072b753d2b0916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label_suffix&lt;/code&gt; argument lets you override the form&amp;rsquo;s &lt;a href=&quot;api#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt; on a per-field basis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b27e8fd89bfa03224a587de5043bc8f1e1530" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;language&lt;/code&gt; class attribute was added. In older versions, the behavior is the same as &lt;code&gt;language = settings.LANGUAGE_CODE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34db368451dd7fad21778b0520e51dd205615b53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; method/attribute can return either an absolute path (e.g. &lt;code&gt;&quot;/blog/&quot;&lt;/code&gt;) or a URL with the fully-qualified domain and protocol (e.g. &lt;code&gt;&quot;https://www.example.com/blog/&quot;&lt;/code&gt;). If &lt;code&gt;link&lt;/code&gt; doesn&amp;rsquo;t return the domain, the syndication framework will insert the domain of the current site, according to your &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID setting&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9d3c9e138b80d4d6861793c26daf9a17b6b6df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;localize&lt;/code&gt; argument enables the localization of form data input, as well as the rendered output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1aed5fb83c2813f14231b1281a9975bd26ed001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;login_required&lt;/code&gt; decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e95bd40db47cfc68c883889f009458f5d587a00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;login_required&lt;/code&gt; decorator does NOT check the &lt;code&gt;is_active&lt;/code&gt; flag on a user, but the default &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; reject inactive users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85a785b111c688a0ca8db999db513587854b453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; argument describes the relations to follow and works the same as the string based lookups passed to &lt;a href=&quot;#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d362b35f063a2bad884f9c3ac0d597e6e1b44d0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup_allowed()&lt;/code&gt; method is given a lookup path from the query string (e.g. &lt;code&gt;'user__email'&lt;/code&gt;) and the corresponding value (e.g. &lt;code&gt;'user@example.com'&lt;/code&gt;), and returns a boolean indicating whether filtering the changelist&amp;rsquo;s &lt;code&gt;QuerySet&lt;/code&gt; using the parameters is permitted. If &lt;code&gt;lookup_allowed()&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;DisallowedModelAdminLookup&lt;/code&gt; (subclass of &lt;a href=&quot;../../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;) is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c703f88a499c4f1a0d94ab8d30177d84112fd26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make_published()&lt;/code&gt; action will only be available to users that pass the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt;&lt;code&gt;ModelAdmin.has_change_permission()&lt;/code&gt;&lt;/a&gt; check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81a3d0a72e4a8994231c23a41c2af7be8cccd04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;makemessages&lt;/code&gt; command (and &lt;code&gt;compilemessages&lt;/code&gt; discussed later) use commands from the GNU gettext toolset: &lt;code&gt;xgettext&lt;/code&gt;, &lt;code&gt;msgfmt&lt;/code&gt;, &lt;code&gt;msgmerge&lt;/code&gt; and &lt;code&gt;msguniq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd5742b0c7f6b4a069a7b99288b0486c403076e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;manage_articles.html&lt;/code&gt; template might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3357fbeed820dc154dc010ad25a9fc2a2439b44f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_error&lt;/code&gt; argument can be used to specify the maximum error measured in input pixels that is allowed in approximating the transformation. The default is 0.0 for exact calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b860e95a6cba19059191b4316529dddbd101ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; argument is passed along to &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_available_name&quot;&gt;&lt;code&gt;get_available_name()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db244e5e1737559d41aa104eaa2d53accc34a6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; error refers to the length of the filename. In the error message for that key, &lt;code&gt;%(max)d&lt;/code&gt; will be replaced with the maximum filename length and &lt;code&gt;%(length)d&lt;/code&gt; will be replaced with the current filename length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566d4e9464a6b9b8b3204978ca8957ed12f95a13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; increased from 80 to 150 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000930ed0c3d86899ddba4d3cc3d0d336d0066b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_length&lt;/code&gt; should be sufficient for many use cases. If you need a longer length, please use a &lt;a href=&quot;../../topics/auth/customizing#specifying-custom-user-model&quot;&gt;custom user model&lt;/a&gt;. If you use MySQL with the &lt;code&gt;utf8mb4&lt;/code&gt; encoding (recommended for proper Unicode support), specify at most &lt;code&gt;max_length=191&lt;/code&gt; because MySQL can only create unique indexes with 191 characters in that case by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f19d8bb5bc9553686c3b103738e5b7e4d31b29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_num&lt;/code&gt; parameter to &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt; gives you the ability to limit the number of forms the formset will display:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234094d3679ad6cfd4561b81d535c06f706c6336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; error messages may contain &lt;code&gt;%(limit_value)s&lt;/code&gt;, which will be substituted by the appropriate limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c8ae98f390477b1ceb6cf5bb642916cc37b74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; error messages may contain &lt;code&gt;%(limit_value)s&lt;/code&gt;, which will be substituted by the appropriate limit. Similarly, the &lt;code&gt;max_digits&lt;/code&gt;, &lt;code&gt;max_decimal_places&lt;/code&gt; and &lt;code&gt;max_whole_digits&lt;/code&gt; error messages may contain &lt;code&gt;%(max)s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878aa7191ff5f8f501bb1386bb56c2f4d33544c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;messages&lt;/code&gt; passed should be a dict containing the keys &lt;code&gt;missing_keys&lt;/code&gt; and/or &lt;code&gt;extra_keys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ab0b073182bf0fe2d634292ea1516016036c3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;my_handler&lt;/code&gt; function will only be called when an instance of &lt;code&gt;MyModel&lt;/code&gt; is saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc78c7b9ffa5d218bc0fefb36a5d9715f1d807f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;name_local&lt;/code&gt;, and &lt;code&gt;name_translated&lt;/code&gt; attributes of the dictionary contain the name of the language in English, in the language itself, and in your current active language respectively. The &lt;code&gt;bidi&lt;/code&gt; attribute is True only for bi-directional languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39c83ed85984b6642543f740cdb410d3ca8d109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name_snippet.html&lt;/code&gt; template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30f8a69eb295d4756927f614d2e23268324ff70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;needs_autoescape&lt;/code&gt; flag and the &lt;code&gt;autoescape&lt;/code&gt; keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use &lt;code&gt;autoescape&lt;/code&gt; to decide whether the input data needs to be passed through &lt;code&gt;django.utils.html.conditional_escape&lt;/code&gt; or not. (In the latter case, we use the identity function as the &amp;ldquo;escape&amp;rdquo; function.) The &lt;code&gt;conditional_escape()&lt;/code&gt; function is like &lt;code&gt;escape()&lt;/code&gt; except it only escapes input that is &lt;strong&gt;not&lt;/strong&gt; a &lt;code&gt;SafeData&lt;/code&gt; instance. If a &lt;code&gt;SafeData&lt;/code&gt; instance is passed to &lt;code&gt;conditional_escape()&lt;/code&gt;, the data is returned unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23762e1f473bb2f077c04a353c0d4c9e77960d15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngettext&lt;/code&gt; function provides an interface to pluralize words and phrases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa751bcb056f41b353edca8b0355b0fe2ed86c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npgettext&lt;/code&gt; function also behaves like the Python variant (&lt;a href=&quot;../../ref/utils#django.utils.translation.npgettext&quot;&gt;&lt;code&gt;npgettext()&lt;/code&gt;&lt;/a&gt;), providing a &lt;strong&gt;pluralized&lt;/strong&gt; contextually translated word:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22a490f2b2fd5278cb63bbbab5857207c62256f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;num_seg&lt;/code&gt; parameter is used only on PostGIS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50dcf68eca8b70bab1d883b11415f436f951c004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; argument passed to &lt;code&gt;InlineModelAdmin&lt;/code&gt; methods is the parent object being edited or &lt;code&gt;None&lt;/code&gt; when adding a new parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb5adb12d8f32f8446533c6a10bc5301f02c5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;objs&lt;/code&gt; argument is a homogeneous iterable of objects (a &lt;code&gt;QuerySet&lt;/code&gt; or a list of model instances) to be deleted, and &lt;code&gt;request&lt;/code&gt; is the &lt;a href=&quot;../../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4756c7afef702a4b2b00842cf02717b53d9d99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ogrinspect&lt;/code&gt; management command will inspect the given OGR-compatible &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; (e.g., a shapefile) and will output a GeoDjango model with the given model name. There&amp;rsquo;s a detailed example of using &lt;code&gt;ogrinspect&lt;/code&gt;&lt;a href=&quot;tutorial#ogrinspect-intro&quot;&gt;in the tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bd259c30243667bafe786caf1a01669ddaa750" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;only()&lt;/code&gt; method is more or less the opposite of &lt;a href=&quot;#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt;. You call it with the fields that should &lt;em&gt;not&lt;/em&gt; be deferred when retrieving a model. If you have a model where almost all the fields need to be deferred, using &lt;code&gt;only()&lt;/code&gt; to specify the complementary set of fields can result in simpler code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e6ddd396be002a5c5f76973498518725d44e1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;order_by&lt;/code&gt; argument accepts a sequence of expressions on which you can call &lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt;&lt;code&gt;asc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt;&lt;code&gt;desc()&lt;/code&gt;&lt;/a&gt;. The ordering controls the order in which the expression is applied. For example, if you sum over the rows in a partition, the first result is the value of the first row, the second is the sum of first and second row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7720641bc935c5b5682ec5d26004fb5cc63958c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output_field&lt;/code&gt; argument requires a model field instance, like &lt;code&gt;IntegerField()&lt;/code&gt; or &lt;code&gt;BooleanField()&lt;/code&gt;, into which Django will load the value after it&amp;rsquo;s retrieved from the database. Usually no arguments are needed when instantiating the model field as any arguments relating to data validation (&lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, etc.) will not be enforced on the expression&amp;rsquo;s output value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b232e0558b7259d8092426da3013202cc8011dd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output_field&lt;/code&gt; argument should be a model field instance, like &lt;code&gt;IntegerField()&lt;/code&gt; or &lt;code&gt;BooleanField()&lt;/code&gt;, into which Django will load the value after it&amp;rsquo;s retrieved from the database. Usually no arguments are needed when instantiating the model field as any arguments relating to data validation (&lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, etc.) will not be enforced on the expression&amp;rsquo;s output value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a820584462ac3c5a9f86233924de726affde930" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output_field&lt;/code&gt; is specified either as an argument or by the expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0def76be73374c0cd8e50f1e57b16a21b1d75371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pages_per_range&lt;/code&gt; argument takes a positive integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c79e0fc28f032c53c4ac9bdd58bb7b5faf90de2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paginate_by&lt;/code&gt; is deliberately small in the example so you don&amp;rsquo;t have to create lots of books to see the pagination working! Here&amp;rsquo;s the template you&amp;rsquo;d want to use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908ac429deefd097084c4e466f252fdc397c2dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;partition_by&lt;/code&gt; argument is a list of expressions (column names should be wrapped in an &lt;code&gt;F&lt;/code&gt;-object) that control the partitioning of the rows. Partitioning narrows which rows are used to compute the result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f964493bc5e4037b14edc15f6a49e7e3971493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password_list_path&lt;/code&gt; can be set to the path of a custom file of common passwords. This file should contain one lowercase password per line and may be plain text or gzipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92786737258fb408a52461d62987979ed03113f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;permission_required&lt;/code&gt; decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662367f8885b5fb44c88c9ff364921b11bc24db7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pgettext&lt;/code&gt; function behaves like the Python variant (&lt;a href=&quot;../../ref/utils#django.utils.translation.pgettext&quot;&gt;&lt;code&gt;pgettext()&lt;/code&gt;&lt;/a&gt;), providing a contextually translated word:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0199f1bc48ca5d452aaafa6d4f2e533a895a42a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pk&lt;/code&gt; lookup shortcut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a45ade1d3a763560883ef58e91836414aa09e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pk&lt;/code&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c417e01b62b2bbcf06892051d44feceabd6b1664" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pluralidx&lt;/code&gt; function works in a similar way to the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-pluralize&quot;&gt;&lt;code&gt;pluralize&lt;/code&gt;&lt;/a&gt; template filter, determining if a given &lt;code&gt;count&lt;/code&gt; should use a plural form of a word or not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db12d3dd2d41422b03fed5d5a4a7ef1323708e49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pnt_wkt&lt;/code&gt; string represents the point at -95.3385 degrees longitude, 29.7245 degrees latitude. The geometry is in a format known as Well Known Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). &lt;a href=&quot;#id14&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt; Import the &lt;code&gt;WorldBorder&lt;/code&gt; model, and perform a &lt;code&gt;contains&lt;/code&gt; lookup using the &lt;code&gt;pnt_wkt&lt;/code&gt; as the parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba11aa480bc4f431b6690ba2244d48b3f4490969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;polls&lt;/code&gt; directory could now be copied into a new Django project and immediately reused. It&amp;rsquo;s not quite ready to be published though. For that, we need to package the app to make it easy for others to install.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d99da7c9780a0906c91344bb941135267b5544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;precision&lt;/code&gt; keyword argument controls the number of characters in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ea804db691af945112079154b5764e60f20efb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preserve_default&lt;/code&gt; argument indicates whether the field&amp;rsquo;s default value is permanent and should be baked into the project state (&lt;code&gt;True&lt;/code&gt;), or if it is temporary and just for this migration (&lt;code&gt;False&lt;/code&gt;) - usually because the migration is adding a non-nullable field to a table and needs a default value to put into existing rows. It does not affect the behavior of setting defaults in the database directly - Django never sets database defaults and always applies them in the Django ORM code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50140583853b168e3af2e589a1ac8cfaabbdd88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preserve_default&lt;/code&gt; argument indicates whether the field&amp;rsquo;s default value is permanent and should be baked into the project state (&lt;code&gt;True&lt;/code&gt;), or if it is temporary and just for this migration (&lt;code&gt;False&lt;/code&gt;) - usually because the migration is altering a nullable field to a non-nullable one and needs a default value to put into existing rows. It does not affect the behavior of setting defaults in the database directly - Django never sets database defaults and always applies them in the Django ORM code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86bbc728df900d48f3b8806a68bdf90061f7dd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;primary_key&lt;/code&gt; argument isn&amp;rsquo;t supported and will raise an error if used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324afab94236c878328b0cdcc39e3464b750c74f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;psycopg2&lt;/code&gt; Python module provides the interface between Python and the PostgreSQL database. Download the latest &lt;a href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;Windows installer&lt;/a&gt; for your version of Python and PostgreSQL and run using the default settings. &lt;a href=&quot;#id28&quot; id=&quot;id24&quot;&gt;[2]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c3cf9b5782d05ce232b218d9c871239796da77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;psycopg2&lt;/code&gt; Windows installers are packaged and maintained by &lt;a href=&quot;http://www.stickpeople.com/projects/python/win-psycopg/&quot;&gt;Jason Erickson&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419ade80a1087cdb1b0f4eaeff16662aa73ba922" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pytz.AmbiguousTimeError&lt;/code&gt; exception is raised if you try to make &lt;code&gt;value&lt;/code&gt; aware during a DST transition where the same time occurs twice (when reverting from DST). Setting &lt;code&gt;is_dst&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; will avoid the exception by choosing if the time is pre-transition or post-transition respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f294115945f3f61648587916dfb0117ae68e9038" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pytz.NonExistentTimeError&lt;/code&gt; exception is raised if you try to make &lt;code&gt;value&lt;/code&gt; aware during a DST transition such that the time never occurred. For example, if the 2:00 hour is skipped during a DST transition, trying to make 2:30 aware in that time zone will raise an exception. To avoid that you can use &lt;code&gt;is_dst&lt;/code&gt; to specify how &lt;code&gt;make_aware()&lt;/code&gt; should interpret such a nonexistent time. If &lt;code&gt;is_dst=True&lt;/code&gt; then the above time would be interpreted as 2:30 DST time (equivalent to 1:30 local time). Conversely, if &lt;code&gt;is_dst=False&lt;/code&gt; the time would be interpreted as 2:30 standard time (equivalent to 3:30 local time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376b3d869a4e6bad90a52375d74b366313f9300f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; attribute is an opaque object. It represents the internals of the query construction and is not part of the public API. However, it is safe (and fully supported) to pickle and unpickle the attribute&amp;rsquo;s contents as described here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e0942173f21d9137489fb68a0cfa2c7a57c993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; parameter to &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; exists so that specialized query subclasses can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API. To put it another way: if you need to ask, you don&amp;rsquo;t need to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4187b29ad8e96eee30e6834052097b6ccccc21f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryset&lt;/code&gt; argument supplies a base &lt;code&gt;QuerySet&lt;/code&gt; for the given lookup. This is useful to further filter down the prefetch operation, or to call &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; from the prefetched relation, hence reducing the number of queries even further:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3a8438cf58cbfb64b1b3f08ca2b71cb13bfdb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;question_id=34&lt;/code&gt; part comes from &lt;code&gt;&amp;lt;int:question_id&amp;gt;&lt;/code&gt;. Using angle brackets &amp;ldquo;captures&amp;rdquo; part of the URL and sends it as a keyword argument to the view function. The &lt;code&gt;:question_id&amp;gt;&lt;/code&gt; part of the string defines the name that will be used to identify the matched pattern, and the &lt;code&gt;&amp;lt;int:&lt;/code&gt; part is a converter that determines what patterns should match this part of the URL path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d8c0512abe38d2e5523ff529ee12e64ec3684b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raise_request_exception&lt;/code&gt; argument allows controlling whether or not exceptions raised during the request should also be raised in the test. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df75973272b881c9b14f0bc94612349a95b897d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raise_request_exception&lt;/code&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a176926aa601db19f5e02852a6bba299fb7ed14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw()&lt;/code&gt; manager method can be used to perform raw SQL queries that return model instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed06211a3b65df116099255fec22c89f9de1361a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw_id_fields&lt;/code&gt;&lt;code&gt;Input&lt;/code&gt; widget should contain a primary key if the field is a &lt;code&gt;ForeignKey&lt;/code&gt; or a comma separated list of values if the field is a &lt;code&gt;ManyToManyField&lt;/code&gt;. The &lt;code&gt;raw_id_fields&lt;/code&gt; widget shows a magnifying glass button next to the field which allows users to search for and select a value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27407741a7f27e2ad1d8516c050756bde3569ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receiver&lt;/code&gt; argument indicates the registered receiver to disconnect. It may be &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;dispatch_uid&lt;/code&gt; is used to identify the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c1e031005fd54af0c3ffd9391afb7f0f625916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;register&lt;/code&gt; decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61a58bd7de2b4b09d14b10310e7a98d489eb0d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; method is where the work actually happens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5481e089a3dd7f85ac82aa08e12f3199e2773014" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reporter_class&lt;/code&gt; argument of &lt;code&gt;AdminEmailHandler&lt;/code&gt; allows providing an &lt;code&gt;django.views.debug.ExceptionReporter&lt;/code&gt; subclass to customize the traceback text sent in the email body. You provide a string import path to the class you wish to use, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98204d217de5dec53fe323049139b1dff3e045b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reporter_class&lt;/code&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc172fc4506c4abd2701a5af76769c198b47ca27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request&lt;/code&gt; argument was added. Support for method overrides that don&amp;rsquo;t accept it will be removed in Django 3.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05ea9ea6363852c86e7305c9669d9457e930da1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset_url_token&lt;/code&gt; class attribute was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8025c9e9b225729b7efa746ce7f8f47fa344d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resolve()&lt;/code&gt; function can be used for resolving URL paths to the corresponding view functions. It has the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe878d4c5f08c7c10265e3c6922b51dabc1d76ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse()&lt;/code&gt; function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (&lt;code&gt;&quot;|&quot;&lt;/code&gt;) character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ea67993087a3395504efc2bf3bfd3f2f1b65e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse_code&lt;/code&gt; argument is called when unapplying migrations. This callable should undo what is done in the &lt;code&gt;code&lt;/code&gt; callable so that the migration is reversible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a02ec1c567284f3b25d07a9b99ee645ce7e1c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse_sql&lt;/code&gt; queries are executed when the migration is unapplied, so you can reverse the changes done in the forwards queries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621ff1bf72399f5cb8bd6c607564d23dd0b4081b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route&lt;/code&gt; argument should be a string or &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;../topics/i18n/translation#translating-urlpatterns&quot;&gt;Translating URL patterns&lt;/a&gt;) that contains a URL pattern. The string may contain angle brackets (like &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; above) to capture part of the URL and send it as a keyword argument to the view. The angle brackets may include a converter specification (like the &lt;code&gt;int&lt;/code&gt; part of &lt;code&gt;&amp;lt;int:section&amp;gt;&lt;/code&gt;) which limits the characters matched and may also change the type of the variable passed to the view. For example, &lt;code&gt;&amp;lt;int:section&amp;gt;&lt;/code&gt; matches a string of decimal digits and converts the value to an &lt;code&gt;int&lt;/code&gt;. See &lt;a href=&quot;../topics/http/urls#how-django-processes-a-request&quot;&gt;How Django processes a request&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39de2c3a2dac29941c9a6f3b5adf09158830d5b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route&lt;/code&gt; argument should be a string or &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;../topics/i18n/translation#translating-urlpatterns&quot;&gt;Translating URL patterns&lt;/a&gt;) that contains a regular expression compatible with Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/re.html#module-re&quot;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt; module. Strings typically use raw string syntax (&lt;code&gt;r''&lt;/code&gt;) so that they can contain sequences like &lt;code&gt;\d&lt;/code&gt; without the need to escape the backslash with another backslash. When a match is made, captured groups from the regular expression are passed to the view &amp;ndash; as named arguments if the groups are named, and as positional arguments otherwise. The values are passed as strings, without any type conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415cbcbc7016047d57e4dd8d5d1ab73a913461b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_validators()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; runs all of the field&amp;rsquo;s validators and aggregates all the errors into a single &lt;code&gt;ValidationError&lt;/code&gt;. You shouldn&amp;rsquo;t need to override this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94478f419deb74b5fb4f1cb92b9134d638854b0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;safe&lt;/code&gt; boolean parameter defaults to &lt;code&gt;True&lt;/code&gt;. If it&amp;rsquo;s set to &lt;code&gt;False&lt;/code&gt;, any object can be passed for serialization (otherwise only &lt;code&gt;dict&lt;/code&gt; instances are allowed). If &lt;code&gt;safe&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; and a non-&lt;code&gt;dict&lt;/code&gt; object is passed as the first argument, a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965dd8e7763d7ea30c51906f2da34471ed7b5b1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913d5f44c96cf1f923a3008dc54df15da1f97ef5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; method also accepts keywords. These keywords are used for controlling output logging, error handling, and for importing specific feature ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ba531a6df068d63d688cb47225565b39165c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save()&lt;/code&gt; method returns the instances that have been saved to the database. If a given instance&amp;rsquo;s data didn&amp;rsquo;t change in the bound data, the instance won&amp;rsquo;t be saved to the database and won&amp;rsquo;t be included in the return value (&lt;code&gt;instances&lt;/code&gt;, in the above example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af288aedf1fd9f98506a9909e2edb45aaee29a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save_formset&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt;, the parent &lt;code&gt;ModelForm&lt;/code&gt; instance and a boolean value based on whether it is adding or changing the parent object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f2994fcd28bfd7c4b9c18861cd2ce18aad3024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save_model&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt;, a model instance, a &lt;code&gt;ModelForm&lt;/code&gt; instance, and a boolean value based on whether it is adding or changing the object. Overriding this method allows doing pre- or post-save operations. Call &lt;code&gt;super().save_model()&lt;/code&gt; to save the object using &lt;a href=&quot;../../models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d79db200c135a2a20361afa03a2c65861d65716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save_related&lt;/code&gt; method is given the &lt;code&gt;HttpRequest&lt;/code&gt;, the parent &lt;code&gt;ModelForm&lt;/code&gt; instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e74f5a6a1922365791161696761bdaca4a5c9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb6ebab67efd43b3f12cb8dcbc02e7c3f6ec132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search_type&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404a8c043575a29dcf7baf306e34ce67bd428c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; argument lets you put extra fields in the &lt;code&gt;SELECT&lt;/code&gt; clause. It should be a dictionary mapping attribute names to SQL clauses to use to calculate that attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb92252495d383fc0626382bb860490595d04619" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;serialize()&lt;/code&gt; method of your serializer must return a string of how the value should appear in migrations and a set of any imports that are needed in the migration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df0d7d33c0414d3ef635cfa89f06f5f5ec825b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_language&lt;/code&gt; redirect view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f827b34365ea53eba9f940727208c801b3b266" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sitemap_uses_https&lt;/code&gt; argument was added. Older versions of Django always use &lt;code&gt;http&lt;/code&gt; for a sitemap&amp;rsquo;s URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f757f5ebdc63c3691349570ce7971b236189c48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;srid&lt;/code&gt; parameter, if given, is set as the SRID of the created geometry if &lt;code&gt;geo_input&lt;/code&gt; doesn&amp;rsquo;t have an SRID. If different SRIDs are provided through the &lt;code&gt;geo_input&lt;/code&gt; and &lt;code&gt;srid&lt;/code&gt; parameters, &lt;code&gt;ValueError&lt;/code&gt; is raised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f060c2ae11c723a0c14be1c2c1b9e3665590287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;staff_member_required&lt;/code&gt; decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbd5ff1beb6bf44190986db52a20f74110488de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;state_operations&lt;/code&gt; argument is so you can supply operations that are equivalent to the SQL in terms of project state; for example, if you are manually creating a column, you should pass in a list containing an &lt;code&gt;AddField&lt;/code&gt; operation here so that the autodetector still has an up-to-date state of the model (otherwise, when you next run &lt;code&gt;makemigrations&lt;/code&gt;, it won&amp;rsquo;t see any operation that adds that field and so will try to run it again). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d82cf093dcf2d7991f5657501a4de6eae147ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;staticfiles&lt;/code&gt; app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df41329b2da832ef5b55238903165b040d9ae6db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;from_email&lt;/code&gt; and &lt;code&gt;recipient_list&lt;/code&gt; parameters are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de65cf4550eae05714a01ffb7d3a79a1c2fdbbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tag()&lt;/code&gt; method takes two arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88e280b78b30b7e2da0586a60b2c4d184a56e27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;takes_context&lt;/code&gt; parameter defaults to &lt;code&gt;False&lt;/code&gt;. When it&amp;rsquo;s set to &lt;code&gt;True&lt;/code&gt;, the tag is passed the context object, as in this example. That&amp;rsquo;s the only difference between this case and the previous &lt;code&gt;inclusion_tag&lt;/code&gt; example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6b87c249856c9d5c29c0105512e8a9f240a1ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; command receives options on behalf of the specified &lt;a href=&quot;#cmdoption-test-testrunner&quot;&gt;&lt;code&gt;--testrunner&lt;/code&gt;&lt;/a&gt;. These are the options of the default test runner: &lt;a href=&quot;../topics/testing/advanced#django.test.runner.DiscoverRunner&quot;&gt;&lt;code&gt;DiscoverRunner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20898ff0b73800182c5228889c8234799ab8418b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;through_defaults&lt;/code&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63025ae279029f4f8b4353e5a0c5154871a0ea93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time&lt;/code&gt; filter will only accept parameters in the format string that relate to the time of day, not the date. If you need to format a &lt;code&gt;date&lt;/code&gt; value, use the &lt;a href=&quot;#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; filter instead (or along with &lt;a href=&quot;#std:templatefilter-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; if you need to render a full &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882e616cd1303003145edbed5f5661c0e5e5b6e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; argument is optional and defaults to the &lt;code&gt;timeout&lt;/code&gt; argument of the appropriate backend in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting (explained above). It&amp;rsquo;s the number of seconds the value should be stored in the cache. Passing in &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;timeout&lt;/code&gt; will cache the value forever. A &lt;code&gt;timeout&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; won&amp;rsquo;t cache the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d71fc1792d3867d9eded5708ab14a99703930e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;to_attr&lt;/code&gt; argument sets the result of the prefetch operation to a custom attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82da793fa2c5044f6747c978360d31772836001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;to_python()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; is the first step in every validation. It coerces the value to a correct datatype and raises &lt;code&gt;ValidationError&lt;/code&gt; if that is not possible. This method accepts the raw value from the widget and returns the converted value. For example, a &lt;code&gt;FloatField&lt;/code&gt; will turn the data into a Python &lt;code&gt;float&lt;/code&gt; or raise a &lt;code&gt;ValidationError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33825641191b3cc051e12f73b630c755e176e2f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;token.split_contents()&lt;/code&gt; method separates the arguments on spaces while keeping quoted strings together. The more straightforward &lt;code&gt;token.contents.split()&lt;/code&gt; wouldn&amp;rsquo;t be as robust, as it would naively split on &lt;em&gt;all&lt;/em&gt; spaces, including those within quoted strings. It&amp;rsquo;s a good idea to always use &lt;code&gt;token.split_contents()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026f9a3069321939512024e7bed1da045841f4b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform&lt;/code&gt; keyword is set to &lt;code&gt;False&lt;/code&gt; because the data in the shapefile does not need to be converted &amp;ndash; it&amp;rsquo;s already in WGS84 (SRID=4326).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3606c6c2f6282a2a7c67e0de7dc1b81d981a097a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trigram_similar&lt;/code&gt; lookup allows you to perform trigram lookups, measuring the number of trigrams (three consecutive characters) shared, using a dedicated PostgreSQL extension. A trigram lookup is given an expression and returns results that have a similarity measurement greater than the current similarity threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f93dd77b833412f853ef949e4baa7f46397c94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trigram_similar&lt;/code&gt; lookup can be used on &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfd69aed5ca22d022889cf78a3c8807cdca5a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; prefix on the functions below comes from a difference in Python 2 between unicode and bytestrings. If your code doesn&amp;rsquo;t support Python 2, use the functions without the &lt;code&gt;u&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0c85a9b38c962d6276590aaff3955606541e05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; prefixing of &lt;code&gt;gettext&lt;/code&gt; functions was originally to distinguish usage between unicode strings and bytestrings on Python 2. For code that supports only Python 3, they can be used interchangeably. A deprecation for the prefixed functions may happen in a future Django release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84e56120af8f8c421f6b5bf43405ce68b61d10e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unaccent&lt;/code&gt; lookup allows you to perform accent-insensitive lookups using a dedicated PostgreSQL extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1cdbdcdcc6cfa69838a0e0c8587f0684d5b99f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unaccent&lt;/code&gt; lookup can be used on &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb5cc579c8a83b7d7f74e6050fe7b4d6168cd1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update()&lt;/code&gt; method is applied instantly and returns the number of rows matched by the query (which may not be equal to the number of rows updated if some rows already have the new value). The only restriction on the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; being updated is that it can only access one database table: the model&amp;rsquo;s main table. You can filter based on related fields, but you can only update columns in the model&amp;rsquo;s main table. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ed9eed4ccb2cf5456dbc06679e8868342bcc2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update()&lt;/code&gt; method is applied instantly, and the only restriction on the &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that is updated is that it can only update columns in the model&amp;rsquo;s main table, not on related models. You can&amp;rsquo;t do this, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35456264c2671f1a8e960970538ad92e85e8d33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update()&lt;/code&gt; method returns the number of affected rows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817f4899cafb0bcd8c97c7670093f125e7dd5acb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_fields&lt;/code&gt; argument can be any iterable containing strings. An empty &lt;code&gt;update_fields&lt;/code&gt; iterable will skip the save. A value of None will perform an update on all fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471280f5eb20340fbd09a86183e931f5cd03a1c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_or_create&lt;/code&gt; method tries to fetch an object from database based on the given &lt;code&gt;kwargs&lt;/code&gt;. If a match is found, it updates the fields passed in the &lt;code&gt;defaults&lt;/code&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadbaa9aff12551ecf0e8f3bf1a67555bf85ce33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urlconf&lt;/code&gt; argument is the URLconf module containing the URL patterns to use for reversing. By default, the root URLconf for the current thread is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ec3c5e3a91cc9cc4501341473e7acd8b2bcdde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urlize&lt;/code&gt; filter also takes an optional parameter &lt;code&gt;autoescape&lt;/code&gt;. If &lt;code&gt;autoescape&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the link text and URLs will be escaped using Django&amp;rsquo;s built-in &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter. The default value for &lt;code&gt;autoescape&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f68a313f36d24cdef578264db7b4b249a7b0538" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user&lt;/code&gt; object is optional: if it&amp;rsquo;s not provided, some validators may not be able to perform any validation and will accept any password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff7e1a92a4562d58867515dcdd0f9667de954e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user_attributes&lt;/code&gt; parameter should be an iterable of names of user attributes to compare to. If this argument is not provided, the default is used: &lt;code&gt;'username', 'first_name', 'last_name', 'email'&lt;/code&gt;. Attributes that don&amp;rsquo;t exist are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de7f64975904f0ec1392a864e1d7317f71d4adc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validate()&lt;/code&gt; method on a &lt;code&gt;Field&lt;/code&gt; handles field-specific validation that is not suitable for a validator. It takes a value that has been coerced to a correct datatype and raises &lt;code&gt;ValidationError&lt;/code&gt; on any error. This method does not return anything and shouldn&amp;rsquo;t alter the value. You should override it to handle validation logic that you can&amp;rsquo;t or don&amp;rsquo;t want to put in a validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f87704d635fe590059b6b15f126720e097b228f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validators&lt;/code&gt; argument lets you provide a list of validation functions for this field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af696240bba52026bf15b6322a6a83024e0e898" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; argument describes the value to be included in the expression, such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, or &lt;code&gt;None&lt;/code&gt;. Django knows how to convert these Python values into their corresponding database type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7d229cdf94e590a136fe7aaf6f17dbf06a89c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method also takes optional keyword arguments, &lt;code&gt;**expressions&lt;/code&gt;, which are passed through to &lt;a href=&quot;#django.db.models.query.QuerySet.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c13b2f9c51e4baf68281653e0b158ec2efa1d5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method takes optional positional arguments, &lt;code&gt;*fields&lt;/code&gt;, which specify field names to which the &lt;code&gt;SELECT&lt;/code&gt; should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don&amp;rsquo;t specify the fields, each dictionary will contain a key and value for every field in the database table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088daae2a399c92df1dade02fc570b7324d80838" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbosity&lt;/code&gt; argument has the same behavior as for &lt;a href=&quot;#django.test.runner.DiscoverRunner&quot;&gt;&lt;code&gt;DiscoverRunner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2432a66df5a032d86ba6983c5190f40423564326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; argument is a view function or the result of &lt;a href=&quot;class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; for class-based views. It can also be an &lt;a href=&quot;#django.urls.include&quot;&gt;&lt;code&gt;django.urls.include()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6577e25bb6f82d70c2752592f11f31ca5042cae8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; part of the view &amp;ndash; the method that accepts a &lt;code&gt;request&lt;/code&gt; argument plus arguments, and returns a HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9078710ffa196d9ede5d8d2a6b469ae61ecba885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt;, &lt;code&gt;kwargs&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments are the same as for &lt;a href=&quot;#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0109b3e1d427741805eb07f5694cec5fcd8024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;week&lt;/code&gt;&lt;code&gt;lookup_type&lt;/code&gt; is calculated based on &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;, i.e., a week starts on a Monday. The first week of a year is the one that contains the year&amp;rsquo;s first Thursday, i.e. the first week has the majority (four or more) of its days in the year. The value returned is in the range 1 to 52 or 53.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0217c6df9d195442693669a990f4df4dfb0eccc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;week_day&lt;/code&gt;&lt;code&gt;lookup_type&lt;/code&gt; is calculated differently from most databases and from Python&amp;rsquo;s standard functions. This function will return &lt;code&gt;1&lt;/code&gt; for Sunday, &lt;code&gt;2&lt;/code&gt; for Monday, through &lt;code&gt;7&lt;/code&gt; for Saturday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204fda260f8a5d7347d1356a741248798ebeccae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;week_format&lt;/code&gt; attribute is a &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; format string used to parse the week number. The following values are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148f289535ce903bc222c3f9276240a02680a97d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;where&lt;/code&gt; parameter described above may use standard Python database string placeholders &amp;mdash; &lt;code&gt;'%s'&lt;/code&gt; to indicate parameters the database engine should automatically quote. The &lt;code&gt;params&lt;/code&gt; argument is a list of any extra parameters to be substituted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928458ff4dd4c8ddac631f69d44268e9e6a13682" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;widget&lt;/code&gt; argument lets you specify a &lt;code&gt;Widget&lt;/code&gt; class to use when rendering this &lt;code&gt;Field&lt;/code&gt;. See &lt;a href=&quot;widgets&quot;&gt;Widgets&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771ca1d9164be58541ba427a2ab56788fbb1ef27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;widgets&lt;/code&gt; dictionary accepts either widget instances (e.g., &lt;code&gt;Textarea(...)&lt;/code&gt;) or classes (e.g., &lt;code&gt;Textarea&lt;/code&gt;). Note that the &lt;code&gt;widgets&lt;/code&gt; dictionary is ignored for a model field with a non-empty &lt;code&gt;choices&lt;/code&gt; attribute. In this case, you must override the form field to use a different widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55cb3f54ccb705f97100e71a7cb698e09c180cc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% cache %}&lt;/code&gt; template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. The fragment is cached forever if timeout is &lt;code&gt;None&lt;/code&gt;. The name will be taken as is, do not use a variable. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73156f3d9b7d03ef0b54eab397489460eaa8942e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% if %}&lt;/code&gt; tag evaluates a variable, and if that variable is &amp;ldquo;true&amp;rdquo; (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56bff40007a782c94320fcc09d900063f01065f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% ifchanged %}&lt;/code&gt; block tag is used within a loop. It has two possible uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad27d192e19a8573805d62620858d25ff46a643d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% lorem %}&lt;/code&gt; tag can be used with zero, one, two or three arguments. The arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d03c427e8e45fa77cafb2812a34bdad5eb2228" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% static %}&lt;/code&gt; template tag generates the absolute URL of static files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66445e8931363b5909bd25c58e5b6c95e72cb565" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{% trans %}&lt;/code&gt; template tag translates either a constant string (enclosed in single or double quotes) or variable content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d23e85709de25b7d8e3b4316520c950588d340" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;context&lt;/strong&gt;, or a list of variables available in the view&amp;rsquo;s template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f640691d4a716673e693782f0e3084aaa1804956" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;current time zone&lt;/strong&gt; is the time zone that&amp;rsquo;s used for rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601a05ecb118260dadad0da5a2a99d15be6c5743" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default time zone&lt;/strong&gt; is the time zone defined by the &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64522a98a7a31b95777b207e3d74e1ea58327893" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;models&lt;/strong&gt; section of the &lt;code&gt;admindocs&lt;/code&gt; page describes each model in the system along with all the fields, properties, and methods available on it. Relationships to other models appear as hyperlinks. Descriptions are pulled from &lt;code&gt;help_text&lt;/code&gt; attributes on fields or from docstrings on model methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e2a383bbb5fb7148ab99433698386580abf273" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;tags&lt;/strong&gt; and &lt;strong&gt;filters&lt;/strong&gt;&lt;code&gt;admindocs&lt;/code&gt; sections describe all the tags and filters that come with Django (in fact, the &lt;a href=&quot;../../templates/builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt; and &lt;a href=&quot;../../templates/builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt; documentation come directly from those pages). Any tags or filters that you create or are added by a third-party app will show up in these sections as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aca341310bfb222766142661d3711f8dbf6d7eb" translate="yes" xml:space="preserve">
          <source>The API for the &lt;a href=&quot;#django.test.RequestFactory&quot;&gt;&lt;code&gt;RequestFactory&lt;/code&gt;&lt;/a&gt; is a slightly restricted subset of the test client API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d217aa283b3b614901a4512ea4ff4ed87ce55438" translate="yes" xml:space="preserve">
          <source>The API of &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt; mirrors that of &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, with one key difference: &lt;em&gt;The object wrapped by the class is not necessarily a wrapper around Python&amp;rsquo;s built-in file object.&lt;/em&gt; Instead, it is a wrapper around the result of the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.open&quot;&gt;&lt;code&gt;Storage.open()&lt;/code&gt;&lt;/a&gt; method, which may be a &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object, or it may be a custom storage&amp;rsquo;s implementation of the &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553445eba83fe025ab0f5f215a28c4e550e90827" translate="yes" xml:space="preserve">
          <source>The CSRF middleware and template tag provides easy-to-use protection against &lt;a href=&quot;https://www.squarefree.com/securitytips/web-developers.html#CSRF&quot;&gt;Cross Site Request Forgeries&lt;/a&gt;. This type of attack occurs when a malicious website contains a link, a form button or some JavaScript that is intended to perform some action on your website, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, &amp;lsquo;login CSRF&amp;rsquo;, where an attacking site tricks a user&amp;rsquo;s browser into logging into a site with someone else&amp;rsquo;s credentials, is also covered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01982ec73cd1ce624769540ec551de0741729f5" translate="yes" xml:space="preserve">
          <source>The CSRF middleware is activated by default in the &lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting. If you override that setting, remember that &lt;code&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/code&gt; should come before any view middleware that assume that CSRF attacks have been dealt with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebff9174a91979318e76f9dbafaad5ad443c6f2" translate="yes" xml:space="preserve">
          <source>The CSRF protection cannot protect against man-in-the-middle attacks, so use &lt;a href=&quot;../topics/security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt; with &lt;a href=&quot;middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt;. It also assumes &lt;a href=&quot;../topics/security#host-headers-virtual-hosting&quot;&gt;validation of the HOST header&lt;/a&gt; and that there aren&amp;rsquo;t any &lt;a href=&quot;../topics/security#cross-site-scripting&quot;&gt;cross-site scripting vulnerabilities&lt;/a&gt; on your site (because XSS vulnerabilities already let an attacker do anything a CSRF vulnerability allows and much worse).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3f1d2acac7daf82355cd91db9e2626e6a81e23" translate="yes" xml:space="preserve">
          <source>The CSRF protection is based on the following things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050726ff76ed191299c1c220b54120661f26d55a" translate="yes" xml:space="preserve">
          <source>The CSRF token cookie is named &lt;code&gt;csrftoken&lt;/code&gt; by default, but you can control the cookie name via the &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_NAME&quot;&gt;&lt;code&gt;CSRF_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a318ecda4c019f8e8a6d943d130890511b7db569" translate="yes" xml:space="preserve">
          <source>The CSRF token is also present in the DOM, but only if explicitly included using &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; in a template. The cookie contains the canonical token; the &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will prefer the cookie to the token in the DOM. Regardless, you&amp;rsquo;re guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65defd261b7048557ca65ad2eff6d8eafa78e0f" translate="yes" xml:space="preserve">
          <source>The CSV module takes care of quoting for you, so you don&amp;rsquo;t have to worry about escaping strings with quotes or commas in them. Pass &lt;code&gt;writerow()&lt;/code&gt; your raw strings, and it&amp;rsquo;ll do the right thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7272524d432fef1b923b58e53abb70eebeb94d5" translate="yes" xml:space="preserve">
          <source>The Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03837e0d23f794c5eab65bc2d4e531c15e647402" translate="yes" xml:space="preserve">
          <source>The CycleNode is iterating, but it&amp;rsquo;s iterating globally. As far as Thread 1 and Thread 2 are concerned, it&amp;rsquo;s always returning the same value. This is not what we want!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c55d5a8daf5807fdeacbd0081a2a02efa19355c" translate="yes" xml:space="preserve">
          <source>The DE-9IM Intersection Matrix for the two geometries is &lt;code&gt;T*****FF*&lt;/code&gt;, &lt;code&gt;*T****FF*&lt;/code&gt;, &lt;code&gt;***T**FF*&lt;/code&gt;, or &lt;code&gt;****T*FF*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0dea3d12d3d820b329187086fcb9957fe94e93" translate="yes" xml:space="preserve">
          <source>The Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a593fde84fef92404caae7f9d61de6696560cc4" translate="yes" xml:space="preserve">
          <source>The Django Admin application defines a number of customized widgets for calendars, filtered selections, and so on. These widgets define asset requirements, and the Django Admin uses the custom widgets in place of the Django defaults. The Admin templates will only include those files that are required to render the widgets on any given page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf39b6ac378d06f4ba7e4a0d85d5d768c57ee7d" translate="yes" xml:space="preserve">
          <source>The Django ORM provides many tools to express queries without writing raw SQL. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bd59b8d237a40c09a224e4de9d77f34e7297e9" translate="yes" xml:space="preserve">
          <source>The Django admin documentation generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409dd9b2237f8f97628f0d4b1a1cc36aa574d438" translate="yes" xml:space="preserve">
          <source>The Django admin is tightly coupled to the Django &lt;a href=&quot;default#user-objects&quot;&gt;User object&lt;/a&gt;. The best way to deal with this is to create a Django &lt;code&gt;User&lt;/code&gt; object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your &lt;code&gt;authenticate&lt;/code&gt; method can do it the first time a user logs in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20824807ef99910351f52c7b6bbeb0a308bbbb09" translate="yes" xml:space="preserve">
          <source>The Django admin site</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa458e5d08eb689cc116f4b3198410f8a2b19a05" translate="yes" xml:space="preserve">
          <source>The Django admin site is activated by default. Let&amp;rsquo;s start the development server and explore it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0a0309eb44e91a7fd1bba2a4f8950281166960" translate="yes" xml:space="preserve">
          <source>The Django admin site uses permissions as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d305a014b50a87d55dfdccf87b463a4f1cbaff" translate="yes" xml:space="preserve">
          <source>The Django authentication system handles both authentication and authorization. Briefly, authentication verifies a user is who they claim to be, and authorization determines what an authenticated user is allowed to do. Here the term authentication is used to refer to both tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a6747382a4de87d75f21c83e502ee4684a3dbc" translate="yes" xml:space="preserve">
          <source>The Django debug page has hooks to provide detailed information when a template error arises. Custom template engines can use these hooks to enhance the traceback information that appears to users. The following hooks are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d640ab5ef138657aa229fc79bd67937b07ecdd" translate="yes" xml:space="preserve">
          <source>The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;from_email&lt;/code&gt; or &lt;code&gt;recipient_list&lt;/code&gt; contains a newline (in either Unix, Windows or Mac style), the email function (e.g. &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt;) will raise &lt;code&gt;django.core.mail.BadHeaderError&lt;/code&gt; (a subclass of &lt;code&gt;ValueError&lt;/code&gt;) and, hence, will not send the email. It&amp;rsquo;s your responsibility to validate all data before passing it to the email functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c5d7be1ed59e42d6169c3a101ade0b6ec5e50b" translate="yes" xml:space="preserve">
          <source>The Django object itself can be inspected as &lt;code&gt;deserialized_object.object&lt;/code&gt;. If fields in the serialized data do not exist on a model, a &lt;code&gt;DeserializationError&lt;/code&gt; will be raised unless the &lt;code&gt;ignorenonexistent&lt;/code&gt; argument is passed in as &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddba08a24aa2f5973a61e3acf52bc596ed9b96e" translate="yes" xml:space="preserve">
          <source>The Django open-source project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f06f3602b95676d65c1225ffde50b7fc548918" translate="yes" xml:space="preserve">
          <source>The Django sessions framework is entirely, and solely, cookie-based. It does not fall back to putting session IDs in URLs as a last resort, as PHP does. This is an intentional design decision. Not only does that behavior make URLs ugly, it makes your site vulnerable to session-ID theft via the &amp;ldquo;Referer&amp;rdquo; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442dc4a037bb4777abe615e2fecc5a925351592f" translate="yes" xml:space="preserve">
          <source>The Django sitemap framework automates the creation of this XML file by letting you express this information in Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c245aadb75286ee5650a024c66dd02773eb411" translate="yes" xml:space="preserve">
          <source>The Django template language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cd5f75a37d2003a65396cbe3bc8f280118e32d" translate="yes" xml:space="preserve">
          <source>The Django template language: for Python programmers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430a962fc891a6e50fa291aadada019108cdb86a" translate="yes" xml:space="preserve">
          <source>The Django template system provides tags which function similarly to some programming constructs &amp;ndash; an &lt;a href=&quot;builtins#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tag for boolean tests, a &lt;a href=&quot;builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; tag for looping, etc. &amp;ndash; but these are not simply executed as the corresponding Python code, and the template system will not execute arbitrary Python expressions. Only the tags, filters and syntax listed below are supported by default (although you can add &lt;a href=&quot;../../howto/custom-template-tags&quot;&gt;your own extensions&lt;/a&gt; to the template language as needed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07a58e32fcbf1b0cfdd968e8ac26c77cfd8b93b" translate="yes" xml:space="preserve">
          <source>The Django test client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55707dba4575f6781496f0ff9bccdc9fd21c02de" translate="yes" xml:space="preserve">
          <source>The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfd954f133e7b795d984004982f2fd38ffc52c0" translate="yes" xml:space="preserve">
          <source>The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;, the Python Database API Specification v2.0, for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0211f518ca14e305e7130133825ce18b2b0fe4c7" translate="yes" xml:space="preserve">
          <source>The Django-specific options here are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cf02ab487b8e90cb7b19b8c02f8fdcf46ab6cf" translate="yes" xml:space="preserve">
          <source>The FancyCalendar widget inherits all the assets from its parent widget. If you don&amp;rsquo;t want &lt;code&gt;Media&lt;/code&gt; to be inherited in this way, add an &lt;code&gt;extend=False&lt;/code&gt; declaration to the &lt;code&gt;Media&lt;/code&gt; declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254ea297427edcc72db5f8dffff8ee2830b5b000" translate="yes" xml:space="preserve">
          <source>The Feed class subclasses &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba386fa524a13c0f5fd863c141a32700a5e3e17" translate="yes" xml:space="preserve">
          <source>The File object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da058efd6d5e84dc353574cdf9c0a19f4204c050" translate="yes" xml:space="preserve">
          <source>The Forms API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efe726dd19666441f9b77daa8e10e1336d1ed20" translate="yes" xml:space="preserve">
          <source>The Forms Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58db152bf60d60a1862f7886c4e17e4d0bcf10c6" translate="yes" xml:space="preserve">
          <source>The GDAL &lt;code&gt;ogrinfo&lt;/code&gt; utility allows examining the metadata of shapefiles or other vector data sources:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b87b24a59a68339206c7d4b286a365887f94474" translate="yes" xml:space="preserve">
          <source>The GDAL/OGR tools described here are designed to help you read in your geospatial data, in order for most of them to be useful you have to have some data to work with. If you&amp;rsquo;re starting out and don&amp;rsquo;t yet have any data of your own to use, GeoDjango tests contain a number of data sets that you can use for testing. You can download them here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1fb78505858c9442ec79503edd40e5b822f3d0" translate="yes" xml:space="preserve">
          <source>The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently of Django. In other words, no database or settings file required &amp;ndash; import them as normal from &lt;a href=&quot;../index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319a275847dff315ccb00a30d1085d6d58278c0f" translate="yes" xml:space="preserve">
          <source>The HSTS policy applies to your entire domain, not just the URL of the response that you set the header on. Therefore, you should only use it if your entire domain is served via HTTPS only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654be3a937abe8074a2116805919e9dba12d3d02" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;name&lt;/code&gt; for each tag is taken directly from its attribute name in the &lt;code&gt;ContactForm&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe025e32f34db0a4bb063ba113f3d44ba9090ad0" translate="yes" xml:space="preserve">
          <source>The HTML ID attribute for this &lt;code&gt;BoundField&lt;/code&gt;. Returns an empty string if &lt;a href=&quot;#django.forms.Form.auto_id&quot;&gt;&lt;code&gt;Form.auto_id&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd81eee9f78e30edc634b6a54a5d2b71184cd29" translate="yes" xml:space="preserve">
          <source>The HTML generated by the built-in widgets uses HTML5 syntax, targeting &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;. For example, it uses boolean attributes such as &lt;code&gt;checked&lt;/code&gt; rather than the XHTML style of &lt;code&gt;checked='checked'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a457d5b4722073d9c9a8adda046e484928ad53" translate="yes" xml:space="preserve">
          <source>The HTML that&amp;rsquo;s generated includes the form&amp;rsquo;s &lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt; (a colon, by default) or, if set, the current field&amp;rsquo;s &lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. The optional &lt;code&gt;label_suffix&lt;/code&gt; parameter allows you to override any previously set suffix. For example, you can use an empty string to hide the label on selected fields. If you need to do this in a template, you could write a custom filter to allow passing parameters to &lt;code&gt;label_tag&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffc589e7ea7852ca2c42efb9b947ddb147e46f4" translate="yes" xml:space="preserve">
          <source>The HTTP reason phrase for the response. It uses the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;HTTP standard&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; default reason phrases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f12433821f474021e968e955a8d9ba88759f0b9" translate="yes" xml:space="preserve">
          <source>The HTTP reason phrase for the response. It uses the &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.1&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;HTTP standard&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; default reason phrases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58681491633da97d1ec43392e67eb049b6dd1e8f" translate="yes" xml:space="preserve">
          <source>The HTTP status code for the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bf89f252380e3d8370d496ec7054d80d41b52d" translate="yes" xml:space="preserve">
          <source>The HTTP status of the response, as an integer. For a full list of defined codes, see the &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;IANA status code registry&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f40e8eb0e3ae82d3123a0ed18a55957c3e1c072" translate="yes" xml:space="preserve">
          <source>The ID that will be used for this field (&lt;code&gt;id_email&lt;/code&gt; in the example above). If you are constructing the label manually, you may want to use this in lieu of &lt;code&gt;label_tag&lt;/code&gt;. It&amp;rsquo;s also useful, for example, if you have some inline JavaScript and want to avoid hardcoding the field&amp;rsquo;s ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ee3cd9b52362975a52e7c48c4889fea9a6a489" translate="yes" xml:space="preserve">
          <source>The ID, as an integer, of the current site in the &lt;code&gt;django_site&lt;/code&gt; database table. This is used so that application data can hook into specific sites and a single database can manage content for multiple sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b6f8a13f5db675c5310d215eeb3f759dd5dfe4" translate="yes" xml:space="preserve">
          <source>The IPv6 address normalization follows &lt;a href=&quot;https://tools.ietf.org/html/rfc4291.html#section-2.2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 4291#section-2.2&lt;/strong&gt;&lt;/a&gt; section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like &lt;code&gt;::ffff:192.0.2.0&lt;/code&gt;. For example, &lt;code&gt;2001:0::0:01&lt;/code&gt; would be normalized to &lt;code&gt;2001::1&lt;/code&gt;, and &lt;code&gt;::ffff:0a0a:0a0a&lt;/code&gt; to &lt;code&gt;::ffff:10.10.10.10&lt;/code&gt;. All characters are converted to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f842e2f8f13268e8041976dd5ae6bdead195b5" translate="yes" xml:space="preserve">
          <source>The Internet is a hostile environment. Before deploying your Django project, you should take some time to review your settings, with security, performance, and operations in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cf68c4fca09bfd64ba6135c567fd7e6932b487" translate="yes" xml:space="preserve">
          <source>The JSON serialization was extended to support lists and tuples. In older versions, only dicts are serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4de94cabe65bfaadd1321f9dbd70872db2a175" translate="yes" xml:space="preserve">
          <source>The JSON serializer uses &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; for encoding. A subclass of &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt;, it handles these additional types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bac1e1d6c443548d3b9da63f81f5d53b0ead0f" translate="yes" xml:space="preserve">
          <source>The JavaScript code must go in a template block if you are inheriting &lt;code&gt;admin/change_form.html&lt;/code&gt; or it won&amp;rsquo;t be rendered in the final HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a137fc8531ca3502953a295f56ef115bdc915426" translate="yes" xml:space="preserve">
          <source>The MIME type to use for the resulting document. Defaults to &lt;code&gt;'text/html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87245b335c01ad93f2ee70eb807977f63bdc6496" translate="yes" xml:space="preserve">
          <source>The Migrations Operations Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa96bf880beafe165e7aed58a2118d744195cbe" translate="yes" xml:space="preserve">
          <source>The Models Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8917614e4f59f260fb160fe3b16922d97fe444" translate="yes" xml:space="preserve">
          <source>The MyISAM storage engine of MySQL doesn&amp;rsquo;t support transactions or constraints, so if you use MyISAM, you won&amp;rsquo;t get validation of fixture data, or a rollback if multiple transaction files are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c3fb9f1ffce99e87f789d936ee8c8cb250f52f" translate="yes" xml:space="preserve">
          <source>The OpenGIS geometry type, generally set by the form field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dde92feca78d3e5ffe6788481f71ac39dad7fcd" translate="yes" xml:space="preserve">
          <source>The Oracle backend stores &lt;code&gt;TextFields&lt;/code&gt; as &lt;code&gt;NCLOB&lt;/code&gt; columns. Oracle imposes some limitations on the usage of such LOB columns in general:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fca3458c00da580f39f69297e381d16a3a853a" translate="yes" xml:space="preserve">
          <source>The Oracle database backend uses the &lt;code&gt;SYS.DBMS_LOB&lt;/code&gt; and &lt;code&gt;SYS.DBMS_RANDOM&lt;/code&gt; packages, so your user will require execute permissions on it. It&amp;rsquo;s normally accessible to all users by default, but in case it is not, you&amp;rsquo;ll need to grant permissions like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7189b34863bafc65b863357f79d9e53f94777ba" translate="yes" xml:space="preserve">
          <source>The Oracle database driver always uses server-side cursors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb1640142d67db49f1a018378d8515617a17571" translate="yes" xml:space="preserve">
          <source>The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of hashing. This deliberately slows down attackers, making attacks against hashed passwords harder. However, as computing power increases, the number of iterations needs to be increased. We&amp;rsquo;ve chosen a reasonable default (and will increase it with each release of Django), but you may wish to tune it up or down, depending on your security needs and available processing power. To do so, you&amp;rsquo;ll subclass the appropriate algorithm and override the &lt;code&gt;iterations&lt;/code&gt; parameters. For example, to increase the number of iterations used by the default PBKDF2 algorithm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf1867236c7aa33948bed32fcb851d74cc5b59c" translate="yes" xml:space="preserve">
          <source>The PROJ.4 datum shifting files must be installed (see the &lt;a href=&quot;install/geolibs#proj4&quot;&gt;PROJ.4 installation instructions&lt;/a&gt; for more details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329dd1d62b7828f4c3dd85f5edaa7557c3cddcd2" translate="yes" xml:space="preserve">
          <source>The PostgreSQL backend stores datetimes as &lt;code&gt;timestamp with time zone&lt;/code&gt;. In practice, this means it converts datetimes from the connection&amp;rsquo;s time zone to UTC on storage, and from UTC to the connection&amp;rsquo;s time zone on retrieval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6776f7c24fb7bea0795628b159948d294dfc944b" translate="yes" xml:space="preserve">
          <source>The PostgreSQL behavior can be emulated using &lt;code&gt;Coalesce&lt;/code&gt; if you know a sensible maximum value to provide as a default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b99b1d8b53d1d56ee60aeb08d81046626e32b79" translate="yes" xml:space="preserve">
          <source>The PostgreSQL behavior can be emulated using &lt;code&gt;Coalesce&lt;/code&gt; if you know a sensible minimum value to provide as a default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbb4982f7bc145844170a2795989a60e2fd3504" translate="yes" xml:space="preserve">
          <source>The PostgreSQL installer creates both a new Windows user to be the &amp;lsquo;postgres service account&amp;rsquo; and a &lt;code&gt;postgres&lt;/code&gt; database superuser You will be prompted once to set the password for both accounts &amp;ndash; make sure to remember it!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f0980841b457206f0161614a0b15b56ce8c523" translate="yes" xml:space="preserve">
          <source>The Query Expression API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68257dca35e49a9799f4cf150dcc2c853156870" translate="yes" xml:space="preserve">
          <source>The ReportLab library is &lt;a href=&quot;https://pypi.org/project/reportlab/&quot;&gt;available on PyPI&lt;/a&gt;. A &lt;a href=&quot;https://www.reportlab.com/docs/reportlab-userguide.pdf&quot;&gt;user guide&lt;/a&gt; (not coincidentally, a PDF file) is also available for download. You can install ReportLab with &lt;code&gt;pip&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13127c6e90352b724af2c83b1dd527177d5069cd" translate="yes" xml:space="preserve">
          <source>The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4b1704121603f93bc661dd4b024ff841989c1b" translate="yes" xml:space="preserve">
          <source>The SRID to use for the geometry field. If not set, &lt;code&gt;ogrinspect&lt;/code&gt; attempts to automatically determine of the SRID of the data source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00356ecb7c5f30ccaea4b4be4eb6f80130ffe404" translate="yes" xml:space="preserve">
          <source>The Select2 input looks similar to the default input but comes with a search feature that loads the options asynchronously. This is faster and more user-friendly if the related model has many instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bfef56c145a8ccd0c6c097cb5ae841f2306916" translate="yes" xml:space="preserve">
          <source>The Settings Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c627f82005f0f63b160ebee249864019f33c865" translate="yes" xml:space="preserve">
          <source>The Spatial Reference System Identifier (SRID) of the raster. This property is a shortcut to getting or setting the SRID through the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.srs&quot;&gt;&lt;code&gt;srs&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09a26915a27a15318465682e6bc60e74297258e" translate="yes" xml:space="preserve">
          <source>The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b3b0c9916ede0153fe53922dc3f2d362bf74fb" translate="yes" xml:space="preserve">
          <source>The Templates Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb63981e5ea302f9bd57a822b95b4d65284ca07" translate="yes" xml:space="preserve">
          <source>The URL for the &amp;ldquo;View site&amp;rdquo; link at the top of each admin page. By default, &lt;code&gt;site_url&lt;/code&gt; is &lt;code&gt;/&lt;/code&gt;. Set it to &lt;code&gt;None&lt;/code&gt; to remove the link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afe6e962fdf9973c9362232bf4d33350bd5673a" translate="yes" xml:space="preserve">
          <source>The URL or &lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;named URL pattern&lt;/a&gt; where requests are redirected after login when the &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t get a &lt;code&gt;next&lt;/code&gt; GET parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448cc28a96720f1cb9ef51abcae4ea5231f53aec" translate="yes" xml:space="preserve">
          <source>The URL or &lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;named URL pattern&lt;/a&gt; where requests are redirected after logout if &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.LogoutView&quot;&gt;&lt;code&gt;LogoutView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have a &lt;code&gt;next_page&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9aef30ae0e745f772c22f6b50220d811bc8a96" translate="yes" xml:space="preserve">
          <source>The URL or &lt;a href=&quot;../topics/http/urls#naming-url-patterns&quot;&gt;named URL pattern&lt;/a&gt; where requests are redirected for login when using the &lt;a href=&quot;../topics/auth/default#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator, &lt;a href=&quot;../topics/auth/default#django.contrib.auth.mixins.LoginRequiredMixin&quot;&gt;&lt;code&gt;LoginRequiredMixin&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../topics/auth/default#django.contrib.auth.mixins.AccessMixin&quot;&gt;&lt;code&gt;AccessMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47720363e1e3af87132c2b68aa2d30176437cda3" translate="yes" xml:space="preserve">
          <source>The URL to redirect to when the form is successfully processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb52f1168af7f6925c0349f5273e7599b585a47" translate="yes" xml:space="preserve">
          <source>The URL to redirect to, as a string. Or &lt;code&gt;None&lt;/code&gt; to raise a 410 (Gone) HTTP error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b73cbfda3cf995a507d5ce4ffc81cbb8334cfe" translate="yes" xml:space="preserve">
          <source>The URLconf doesn&amp;rsquo;t look at the request method. In other words, all request methods &amp;ndash; &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, etc. &amp;ndash; will be routed to the same function for the same URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ccb726900a8f0097c86dd1dce50d8509b830da" translate="yes" xml:space="preserve">
          <source>The URLconf here uses the named group &lt;code&gt;pk&lt;/code&gt; - this name is the default name that &lt;code&gt;DetailView&lt;/code&gt; uses to find the value of the primary key used to filter the queryset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548a01a1b80fb7120753de52a692180c774b10d8" translate="yes" xml:space="preserve">
          <source>The URLconf searches against the requested URL, as a normal Python string. This does not include GET or POST parameters, or the domain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d4c73b498dfbbb4926938d46dfb74f2c43981e" translate="yes" xml:space="preserve">
          <source>The URLs defined in &lt;code&gt;polls.urls&lt;/code&gt; will have an application namespace &lt;code&gt;polls&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51a0e57d7a2704060bc92f629dd9a2cc306b706" translate="yes" xml:space="preserve">
          <source>The Writing Migrations &amp;ldquo;how-to&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96320cb1bb7e355b708bc58f52c4b06b03d4d849" translate="yes" xml:space="preserve">
          <source>The ability to run tests with &lt;a href=&quot;#overriding-settings&quot;&gt;modified settings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4e0ab9d1214bebe4df4b87379b65426aaa07f6" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;Person&lt;/code&gt; model would create a database table like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3ffd9a97227b24e95069aa08843b8e620904af" translate="yes" xml:space="preserve">
          <source>The above code could be simplified by using the &lt;a href=&quot;https://github.com/js-cookie/js-cookie/&quot;&gt;JavaScript Cookie library&lt;/a&gt; to replace &lt;code&gt;getCookie&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7fa6d84f2b71ecfdaa4ce31265ab0da7cc7aea" translate="yes" xml:space="preserve">
          <source>The above ends up calling the &lt;code&gt;as_table&lt;/code&gt; method on the formset class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557fde4255ef088eaef88066c675bce56a942655" translate="yes" xml:space="preserve">
          <source>The above example is a bit contrived since it&amp;rsquo;s equivalent to doing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85585e575d4d7963c67e68f4b53fad058669241c" translate="yes" xml:space="preserve">
          <source>The above examples output a value. Generally, it&amp;rsquo;s more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d111647a3e61db68ecc833a2192ab67fc3f7f3dd" translate="yes" xml:space="preserve">
          <source>The above is a slight simplification &amp;ndash; the &lt;code&gt;get_response&lt;/code&gt; callable for the last middleware in the chain won&amp;rsquo;t be the actual view but rather a wrapper method from the handler which takes care of applying &lt;a href=&quot;#view-middleware&quot;&gt;view middleware&lt;/a&gt;, calling the view with appropriate URL arguments, and applying &lt;a href=&quot;#template-response-middleware&quot;&gt;template-response&lt;/a&gt; and &lt;a href=&quot;#exception-middleware&quot;&gt;exception&lt;/a&gt; middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55aaac19d68791dbd391b3913730a9aaed21f082" translate="yes" xml:space="preserve">
          <source>The above is equivalent to &amp;ndash; but shorter, cleaner, and possibly faster than &amp;ndash; the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc24d1df297ec73ced0dfccfc7c69b75979e3348" translate="yes" xml:space="preserve">
          <source>The above template displays a radio button for each question choice. The &lt;code&gt;value&lt;/code&gt; of each radio button is the associated question choice&amp;rsquo;s ID. The &lt;code&gt;name&lt;/code&gt; of each radio button is &lt;code&gt;&quot;choice&quot;&lt;/code&gt;. That means, when somebody selects one of the radio buttons and submits the form, it&amp;rsquo;ll send the POST data &lt;code&gt;choice=#&lt;/code&gt; where # is the ID of the selected choice. This is the basic concept of HTML forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716991c7abeff036777543f27df7fccd5176dc1f" translate="yes" xml:space="preserve">
          <source>The above will tell Django to order by the &lt;code&gt;first_name&lt;/code&gt; field when trying to sort by &lt;code&gt;colored_first_name&lt;/code&gt; in the admin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0972181000ef7696648390c6992716cc4dc262a8" translate="yes" xml:space="preserve">
          <source>The absolute path to the directory where &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; will collect static files for deployment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317a77807beca4c01220a931465494671461ffd6" translate="yes" xml:space="preserve">
          <source>The absolute path to the directory whose contents you want listed. This directory must exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3164ad6855d7d72155644f1912d0a5cbd0d2f705" translate="yes" xml:space="preserve">
          <source>The abstract base session model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ebb28485851a1ffcd13f95827f56abd6a6d25e" translate="yes" xml:space="preserve">
          <source>The accepted values for the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; arguments are &lt;code&gt;None&lt;/code&gt;, an integer, or zero. A negative integer for &lt;code&gt;start&lt;/code&gt; results in &lt;code&gt;N preceding&lt;/code&gt;, while &lt;code&gt;None&lt;/code&gt; yields &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt;. For both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, zero will return &lt;code&gt;CURRENT ROW&lt;/code&gt;. Positive integers are accepted for &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea514c02d191ab1b66dad018866c2e8a24f5390e" translate="yes" xml:space="preserve">
          <source>The accessor to the pixel values of the &lt;code&gt;GDALBand&lt;/code&gt;. Returns the complete data array if no parameters are provided. A subset of the pixel array can be requested by specifying an offset and block size as tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9377ffc39d254418ebca4c6c15922a83f8783858" translate="yes" xml:space="preserve">
          <source>The action in the examples above match the last part of the URL names for &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; instances described above. The &lt;code&gt;opts&lt;/code&gt; variable can be any object which has an &lt;code&gt;app_label&lt;/code&gt; and &lt;code&gt;model_name&lt;/code&gt; attributes and is usually supplied by the admin views for the current model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98796218d1fed487ad6fb4bd4e5b5aa6d91ca19f" translate="yes" xml:space="preserve">
          <source>The actual implementation of &lt;a href=&quot;../ref/templates/builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;{% comment %}&lt;/code&gt;&lt;/a&gt; is slightly different in that it allows broken template tags to appear between &lt;code&gt;{% comment %}&lt;/code&gt; and &lt;code&gt;{% endcomment %}&lt;/code&gt;. It does so by calling &lt;code&gt;parser.skip_past('endcomment')&lt;/code&gt; instead of &lt;code&gt;parser.parse(('endcomment',))&lt;/code&gt; followed by &lt;code&gt;parser.delete_first_token()&lt;/code&gt;, thus avoiding the generation of a node list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc8e68e96fa0090b4c5811c8ac059b6ef42b703" translate="yes" xml:space="preserve">
          <source>The actual instance being deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1032ab139cf93563d82f21f1335a990f32f1c3df" translate="yes" xml:space="preserve">
          <source>The actual instance being saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9623219a7c1ce080ccc2feae9d852ca5837425" translate="yes" xml:space="preserve">
          <source>The actual instance of the model that&amp;rsquo;s just been created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da01ee37e16de5371384aa5ac9abb879e3b05e53" translate="yes" xml:space="preserve">
          <source>The actual logic of the command. Subclasses must implement this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e24f7961308ececd5e037e89fcf83bd0dbe4e2" translate="yes" xml:space="preserve">
          <source>The actual sending of an email is handled by the email backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce12f81e06ec304928aada38d066d9c08c3cbb1" translate="yes" xml:space="preserve">
          <source>The additional queries in &lt;code&gt;prefetch_related()&lt;/code&gt; are executed after the &lt;code&gt;QuerySet&lt;/code&gt; has begun to be evaluated and the primary query has been executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5179fe240428ba4b7e061b5f58d3104ef0bd94eb" translate="yes" xml:space="preserve">
          <source>The admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1123d8f228e5f55443368f63edfa7793ca29507" translate="yes" xml:space="preserve">
          <source>The admin application uses it to log the history of each object added or changed through the admin interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc4c79ddce6cefc1ffdd748a5c93c2e446ce6e8" translate="yes" xml:space="preserve">
          <source>The admin files live in (&lt;code&gt;django/contrib/admin/static/admin&lt;/code&gt;) of the Django distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c752166ff227f79fdebf363848237645a8e8f6" translate="yes" xml:space="preserve">
          <source>The admin has many hooks for customization, but beware of trying to use those hooks exclusively. If you need to provide a more process-centric interface that abstracts away the implementation details of database tables and fields, then it&amp;rsquo;s probably time to write your own views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b0cd903384fd1fd5cb3f68c5a3f30f5b2505d8" translate="yes" xml:space="preserve">
          <source>The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc02a266d0220ef79d59d56fadf436f2a12a21f7" translate="yes" xml:space="preserve">
          <source>The admin is enabled in the default project template used by &lt;a href=&quot;../../django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc2b92b881a425293fef1210f548ff243ac5de3" translate="yes" xml:space="preserve">
          <source>The admin isn&amp;rsquo;t intended to be used by site visitors. It&amp;rsquo;s for site managers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a763de7510db871dbb866962cba71a3b4562f68" translate="yes" xml:space="preserve">
          <source>The admin now preserves filters on the list view after creating, editing or deleting an object. You can restore the previous behavior of clearing filters by setting this attribute to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89e874d2d4af6eb42f1a28899e15fe844bfcd49" translate="yes" xml:space="preserve">
          <source>The admin template files are located in the &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98c254ee449f811a31b3182cc950026479d0b29" translate="yes" xml:space="preserve">
          <source>The advantage of generating PDF files dynamically is that you can create customized PDFs for different purposes &amp;ndash; say, for different users or different pieces of content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82fad5ba44714112e257cab4164f0dee3f3846c" translate="yes" xml:space="preserve">
          <source>The advantage to using the &lt;code&gt;vary_on_headers&lt;/code&gt; decorator rather than manually setting the &lt;code&gt;Vary&lt;/code&gt; header (using something like &lt;code&gt;response['Vary'] = 'user-agent'&lt;/code&gt;) is that the decorator &lt;em&gt;adds&lt;/em&gt; to the &lt;code&gt;Vary&lt;/code&gt; header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b3f45901544edc694cb0f71468aeb80ab6ed30" translate="yes" xml:space="preserve">
          <source>The affine transformation matrix used to georeference the source, as a tuple of six coefficients which map pixel/line coordinates into georeferenced space using the following relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089afeb26b2e08139d434b87601042a7dd454ac5" translate="yes" xml:space="preserve">
          <source>The age of CSRF cookies, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42f2d777b7b92e49dd946c55dcc61ca86a1306e" translate="yes" xml:space="preserve">
          <source>The age of session cookies, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba9c79ab9e998fa799d86191a5961623b862fee" translate="yes" xml:space="preserve">
          <source>The age of the language cookie, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdeca32a5f892dadd83d5dc9290143a49e17aa5" translate="yes" xml:space="preserve">
          <source>The aggregation functions that are provided by Django are described in &lt;a href=&quot;#id5&quot;&gt;Aggregation Functions&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a394c241a73dcf16ef28dd6d99546b20d0c9b49c" translate="yes" xml:space="preserve">
          <source>The aggregation functions that are provided by Django are described in &lt;a href=&quot;#id5&quot;&gt;Aggregation Functions&lt;/a&gt; below. Since aggregates are also &lt;a href=&quot;expressions&quot;&gt;query expressions&lt;/a&gt;, you may combine aggregates with other aggregates or values to create complex aggregates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab0b9b9f41018dfcb0f5fd43e3b8685da3a3afb" translate="yes" xml:space="preserve">
          <source>The alias for this particular template engine. It&amp;rsquo;s an identifier that allows selecting an engine for rendering. Aliases must be unique across all configured template engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc7c6749a570961d900ab7b2a503c9968c35840" translate="yes" xml:space="preserve">
          <source>The alias of database on which a command will operate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0df1ef91b1e8c044ad74b3cbcb392434f976638" translate="yes" xml:space="preserve">
          <source>The alias of the database that this database should mirror during testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6469f2d5a72b50e7fad9377cca3e0d567da3990f" translate="yes" xml:space="preserve">
          <source>The alternative approach would be to include all fields automatically, or blacklist only some. This fundamental approach is known to be much less secure and has led to serious exploits on major websites (e.g. &lt;a href=&quot;https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation&quot;&gt;GitHub&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3a45d99d41b1eefef697c541685a517d46cd79" translate="yes" xml:space="preserve">
          <source>The amount by which the DATAFILE is extended when more space is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94947285a4cb666cb8e5b4793dfdc1e0db59d188" translate="yes" xml:space="preserve">
          <source>The amount by which the DATAFILE_TMP is extended when more space is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7871f8a1a2ff8050113b5cc680f1c73a7369757" translate="yes" xml:space="preserve">
          <source>The amount of request data is correlated to the amount of memory needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don&amp;rsquo;t typically perform deep request inspection, it&amp;rsquo;s not possible to perform a similar check at that level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9d86f8479a4d5f6dc4d326941d351fbe5b2143" translate="yes" xml:space="preserve">
          <source>The answer is to add namespaces to your URLconf. In the &lt;code&gt;polls/urls.py&lt;/code&gt; file, go ahead and add an &lt;code&gt;app_name&lt;/code&gt; to set the application namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd88c208304cffe835e71369ce09e1ee8db81aa" translate="yes" xml:space="preserve">
          <source>The answer is to subclass &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; and provide your own implementation of the &lt;code&gt;get_context_data&lt;/code&gt; method. The default implementation adds the object being displayed to the template, but you can override it to send more:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d8601c6f7a86dce107936f3e3b6d18983aa71e" translate="yes" xml:space="preserve">
          <source>The answer lies in the &lt;a href=&quot;../../ref/applications#django.apps.apps&quot;&gt;&lt;code&gt;app registry&lt;/code&gt;&lt;/a&gt;. When Django starts, it imports each application listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, and then the &lt;code&gt;models&lt;/code&gt; module inside each application. Whenever a new model class is created, Django adds backward-relationships to any related models. If the related models haven&amp;rsquo;t been imported yet, Django keeps tracks of the relationships and adds them when the related models eventually are imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ea665f80076e26a069279047d0310ffb1b56bd" translate="yes" xml:space="preserve">
          <source>The app should contain a &lt;code&gt;templatetags&lt;/code&gt; directory, at the same level as &lt;code&gt;models.py&lt;/code&gt;, &lt;code&gt;views.py&lt;/code&gt;, etc. If this doesn&amp;rsquo;t already exist, create it - don&amp;rsquo;t forget the &lt;code&gt;__init__.py&lt;/code&gt; file to ensure the directory is treated as a Python package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43acbdb9bc94165dd56f07a45d30a3d385157141" translate="yes" xml:space="preserve">
          <source>The app that contains the custom tags must be in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in order for the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbee76a6a7247021b51dd33628ae427b81689e96" translate="yes" xml:space="preserve">
          <source>The application namespace for the URL pattern that matches the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062ae2346459e1a84f3f948fa5772936e7b98202" translate="yes" xml:space="preserve">
          <source>The application registry is initialized in three stages. At each stage, Django processes all applications in the order of &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd7315c4ec671207e710c4864fd93cebc6a48bc" translate="yes" xml:space="preserve">
          <source>The application registry provides the following public API. Methods that aren&amp;rsquo;t listed below are considered private and may change without notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb87a75825e3c769fb7fe0058c3898c1df301530" translate="yes" xml:space="preserve">
          <source>The argon2 command-line utility and some other libraries interpret the &lt;code&gt;memory_cost&lt;/code&gt; parameter differently from the value that Django uses. The conversion is given by &lt;code&gt;memory_cost == 2 ** memory_cost_commandline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd5a4bec1e02d81814d911ca707218dc6b0e566" translate="yes" xml:space="preserve">
          <source>The argument must be an instance of a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass or a time zone name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce0840fa770096bfd85ff5f0cda1e346a3ea756" translate="yes" xml:space="preserve">
          <source>The argument tells which template bit to output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1679bd917f36b88ee02a5c144f28888ecc8129d6" translate="yes" xml:space="preserve">
          <source>The argument to the &lt;code&gt;aggregate()&lt;/code&gt; clause describes the aggregate value that we want to compute - in this case, the average of the &lt;code&gt;price&lt;/code&gt; field on the &lt;code&gt;Book&lt;/code&gt; model. A list of the aggregate functions that are available can be found in the &lt;a href=&quot;../../ref/models/querysets#aggregation-functions&quot;&gt;QuerySet reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b9fbc0c3f8999f4800792e7de465e03c8ff2df" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; for all these functions can be the name of a field or an expression returning a numeric data. Both are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234842b53cd3fb64ec6b1d34807b3146242f2bc5" translate="yes" xml:space="preserve">
          <source>The arguments could be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2e4d745e49dbe1d8f4700c23dbff5895949226" translate="yes" xml:space="preserve">
          <source>The arguments sent to a &lt;a href=&quot;#django.db.models.signals.pre_init&quot;&gt;&lt;code&gt;pre_init&lt;/code&gt;&lt;/a&gt; handler would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40a0dba514c3fca4aaf0a16475d475821c9133b" translate="yes" xml:space="preserve">
          <source>The arguments that would be passed to the view function, as parsed from the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a07353e9e4ebaa205ffd31498b077e009895998" translate="yes" xml:space="preserve">
          <source>The arguments to &lt;code&gt;SearchVector&lt;/code&gt; can be any &lt;a href=&quot;../../models/expressions#django.db.models.Expression&quot;&gt;&lt;code&gt;Expression&lt;/code&gt;&lt;/a&gt; or the name of a field. Multiple arguments will be concatenated together using a space so that the search document includes them all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d15cce58b664ebb221fa359cc4cd286c540775b" translate="yes" xml:space="preserve">
          <source>The arguments to the &lt;code&gt;serialize&lt;/code&gt; function are the format to serialize the data to (see &lt;a href=&quot;#id2&quot;&gt;Serialization formats&lt;/a&gt;) and a &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; to serialize. (Actually, the second argument can be any iterator that yields Django model instances, but it&amp;rsquo;ll almost always be a QuerySet).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4452cde3f328edd93934e5104148d9f957b809" translate="yes" xml:space="preserve">
          <source>The associated &lt;a href=&quot;#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914b747a079005b1889a3d7bacf74b3b2748bc6a" translate="yes" xml:space="preserve">
          <source>The attribute name of the manager, for example, &lt;code&gt;'objects'&lt;/code&gt;, to use for the model&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#django.db.models.Model._base_manager&quot;&gt;&lt;code&gt;_base_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008b3dad8d22ca87ea5caad2736b3f94ac59b0d8" translate="yes" xml:space="preserve">
          <source>The attribute value for the given target node (e.g. &lt;code&gt;'PROJCS'&lt;/code&gt;). The index keyword specifies an index of the child node to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3942b96a9448810f41feb915fe51e8f59804da30" translate="yes" xml:space="preserve">
          <source>The auth framework uses the following &lt;a href=&quot;../../topics/signals&quot;&gt;signals&lt;/a&gt; that can be used for notification when a user logs in or out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd508ff20efd3eb588e62639fcb2471a66c3d8a" translate="yes" xml:space="preserve">
          <source>The auth system consists of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a104070b2969d0c5f813a479d886d9764fecab" translate="yes" xml:space="preserve">
          <source>The authentication system in Django aims to be very generic and doesn&amp;rsquo;t provide some features commonly found in web authentication systems. Solutions for some of these common problems have been implemented in third-party packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec77eb11767b1885c805cb1b653e43962a44298c" translate="yes" xml:space="preserve">
          <source>The authentication that comes with Django is good enough for most common cases, but you may have needs not met by the out-of-the-box defaults. Customizing authentication in your projects requires understanding what points of the provided system are extensible or replaceable. This document provides details about how the auth system can be customized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1f5f7935160d4a0b3a0685c00899189bb8f19b" translate="yes" xml:space="preserve">
          <source>The auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the &lt;a href=&quot;builtins#std:templatetag-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt; tag, just like all block tags. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5196492f954094c3d65f1964effd40af3faad1a8" translate="yes" xml:space="preserve">
          <source>The automatic Django administrative interface. For more information, see &lt;a href=&quot;../../intro/tutorial02&quot;&gt;Tutorial 2&lt;/a&gt; and the &lt;a href=&quot;admin/index&quot;&gt;admin documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8463abda226aba2d4b03207a9828738ce89ce27" translate="yes" xml:space="preserve">
          <source>The automatically-created &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Restaurant&lt;/code&gt; that links it to &lt;code&gt;Place&lt;/code&gt; looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100dc0780f76c39f4f394eb5e29ec95f31614c47" translate="yes" xml:space="preserve">
          <source>The available options are driver-specific and are described in the documentation of each driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcc676ce725143c073349a90333914bbdd1f51e" translate="yes" xml:space="preserve">
          <source>The backend to use for sending emails. For the list of available backends see &lt;a href=&quot;../topics/email&quot;&gt;Sending email&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576799d745db3f1197d2fda500069280a6d9134f" translate="yes" xml:space="preserve">
          <source>The backend used for signing cookies and other data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a1264ca89d12e79ce195b56da626da227971ae" translate="yes" xml:space="preserve">
          <source>The backends that use cookies &amp;ndash; &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.cookie.CookieStorage&quot;&gt;&lt;code&gt;CookieStorage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.fallback.FallbackStorage&quot;&gt;&lt;code&gt;FallbackStorage&lt;/code&gt;&lt;/a&gt; &amp;ndash; use the value of &lt;a href=&quot;#std:setting-SESSION_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#std:setting-SESSION_COOKIE_SECURE&quot;&gt;&lt;code&gt;SESSION_COOKIE_SECURE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-SESSION_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;SESSION_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; when setting their cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964535ae016832b967055319bcc6c7fb352a308a" translate="yes" xml:space="preserve">
          <source>The base GDAL exception, indicating a GDAL-related error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda2f3d3bce60c32a775aeccb73cbe6de4e34b7c" translate="yes" xml:space="preserve">
          <source>The base GEOS exception, indicates a GEOS-related error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906638656f4dbe6467a42477b52e04d7b0ece166" translate="yes" xml:space="preserve">
          <source>The base class for &lt;a href=&quot;models/instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions; a &lt;code&gt;try/except&lt;/code&gt; for &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; will catch &lt;a href=&quot;models/instances#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exceptions for all models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36fab02d6b59f2de4dd10a1261a1293cf20742c" translate="yes" xml:space="preserve">
          <source>The base class for geometry fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122abe985212517b35de16354fc8007e773f67a4" translate="yes" xml:space="preserve">
          <source>The base class from which all management commands ultimately derive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff98f09e4515cf46904df38f62dc4a6bda0598f3" translate="yes" xml:space="preserve">
          <source>The base implementation of this method requires that the &lt;code&gt;self.object&lt;/code&gt; attribute be set by the view (even if &lt;code&gt;None&lt;/code&gt;). Be sure to do this if you are using this mixin without one of the built-in views that does so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62452647669ab0cad5d37dc37a48325331af7a79" translate="yes" xml:space="preserve">
          <source>The base implementation uses &lt;a href=&quot;../../forms/models#django.forms.models.modelform_factory&quot;&gt;&lt;code&gt;modelform_factory()&lt;/code&gt;&lt;/a&gt; to subclass &lt;a href=&quot;#django.contrib.admin.ModelAdmin.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt;, modified by attributes such as &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.exclude&quot;&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/a&gt;. So, for example, if you wanted to offer additional fields to superusers, you could swap in a different base form like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd857193078c9ecf614877cf19f32fb71dcd22ff" translate="yes" xml:space="preserve">
          <source>The basename to use for the GeoIP city data file. Defaults to &lt;code&gt;'GeoLite2-City.mmdb'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2ca8058de41f46f3080948ecd7b174b87ede18" translate="yes" xml:space="preserve">
          <source>The basename to use for the GeoIP country data file. Defaults to &lt;code&gt;'GeoLite2-Country.mmdb'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1452396f8cd7cb28a94c915c5443b1afbfbb3e91" translate="yes" xml:space="preserve">
          <source>The basic XML serialization format looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9ebed1ce04c5f94076311a0a3f830cace13fce" translate="yes" xml:space="preserve">
          <source>The basic interface is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebec57daa507b27696e753d25c527f7368179051" translate="yes" xml:space="preserve">
          <source>The basic outline of putting static files into production consists of two steps: run the &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; command when static files change, then arrange for the collected static files directory (&lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;) to be moved to the static file server and served. Depending on &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt;, files may need to be moved to a new location manually or the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Storage&lt;/code&gt; class might take care of that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1248c42957e9052c54ba9f94f75f3179ad9777de" translate="yes" xml:space="preserve">
          <source>The basic workflow of Django&amp;rsquo;s admin is, in a nutshell, &amp;ldquo;select an object, then change it.&amp;rdquo; This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7a1e79deca9ce13b590c6b3440a4ec69eb8a2d" translate="yes" xml:space="preserve">
          <source>The basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed93bbf6bfa5dca06573f5f5c3e836a23fcac4cb" translate="yes" xml:space="preserve">
          <source>The basics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19819b533035887c9696af9f0a0e1aca66195bd4" translate="yes" xml:space="preserve">
          <source>The beginner tutorial ends here. In the meantime, you might want to check out some pointers on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/intro/whatsnext/&quot;&gt;where to go from here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bab636f3eb8e10885855023760c7501a9934c3" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; for queries that span multi-value relationships, as described above, is not implemented equivalently for &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt;. Instead, the conditions in a single &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; call will not necessarily refer to the same item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e766c83dff95a6d83827725e91012dbcc59b2f" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;Greatest&lt;/code&gt; when one or more expression may be &lt;code&gt;null&lt;/code&gt; varies between databases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a351643e5f00ff474c7779a021e02617a4da171f" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;Least&lt;/code&gt; when one or more expression may be &lt;code&gt;null&lt;/code&gt; varies between databases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057b993325ccc80fcf95bd92fbdb2a382a9b442b" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;get_context_data()&lt;/code&gt; mimics that of &lt;a href=&quot;../../topics/class-based-views/generic-display#adding-extra-context&quot;&gt;generic views&lt;/a&gt; - you&amp;rsquo;re supposed to call &lt;code&gt;super()&lt;/code&gt; to retrieve context data from parent class, add your data and return the modified dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa169d725191490a1aea662b8802083bc3e86592" translate="yes" xml:space="preserve">
          <source>The behavior of this command changes depending on the arguments provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90325f4fcebc4171004e318ae97a21a3e65143dc" translate="yes" xml:space="preserve">
          <source>The better way of doing this would be to make the parameter specifiable at run time &amp;ndash; i.e., when the class is instantiated. To do that, implement &lt;code&gt;Field.__init__()&lt;/code&gt;, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75382c8cbcc3dbba796094ccab37c0db21da61b" translate="yes" xml:space="preserve">
          <source>The body of the response, as a bytestring. This is the final page content as rendered by the view, or any error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0635085b4b53dff09b77c3576d7e12b2e8304f" translate="yes" xml:space="preserve">
          <source>The body of the response, parsed as JSON. Extra keyword arguments are passed to &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.loads&quot;&gt;&lt;code&gt;json.loads()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d878d39730eba5ab369120caf235c7191a89071e" translate="yes" xml:space="preserve">
          <source>The bottom part of the page gives you a couple of options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53147ed081ba2076d0ad7d8eaa79bd9a6ceb4d2" translate="yes" xml:space="preserve">
          <source>The boundary of this geometry, as a new &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt;&lt;code&gt;OGRGeometry&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db71c7ecdde31216cce0a338b9b4ebddfeb78321" translate="yes" xml:space="preserve">
          <source>The browser XSS filter is a useful defense measure, but must not be relied upon exclusively. It cannot detect all XSS attacks and not all browsers support the header. Ensure you are still &lt;a href=&quot;../topics/security#cross-site-scripting&quot;&gt;validating and sanitizing&lt;/a&gt; all input to prevent XSS attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db9f0d686102d4ea9feac07a108844a5a917444" translate="yes" xml:space="preserve">
          <source>The built-in authentication forms make certain assumptions about the user model that they are working with. If you&amp;rsquo;re using a &lt;a href=&quot;customizing#auth-custom-user&quot;&gt;custom user model&lt;/a&gt;, it may be necessary to define your own forms for the authentication system. For more information, refer to the documentation about &lt;a href=&quot;customizing#custom-users-and-the-built-in-auth-forms&quot;&gt;using the built-in authentication forms with custom user models&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3931e44aa7f9b6bbd3694ca1edd00559719fb3d" translate="yes" xml:space="preserve">
          <source>The built-in filesystem storage class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4fb3d576cb23d1e45270bd0cd300dd05954125" translate="yes" xml:space="preserve">
          <source>The built-in levels, which can be imported from &lt;code&gt;django.contrib.messages&lt;/code&gt; directly, are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c82f12b4874262b0dda2f2ddbd52c0a7d34ac6" translate="yes" xml:space="preserve">
          <source>The builtin template tag &lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt;&lt;code&gt;get_static_prefix&lt;/code&gt;&lt;/a&gt; which populates a template variable with the static prefix &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; to be used as a variable or directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297fcb645fc48aff8a0298d4a2ce8e1f82194e37" translate="yes" xml:space="preserve">
          <source>The builtin template tag &lt;a href=&quot;../templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; which takes a path and urljoins it with the static prefix &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is installed, the tag uses the &lt;code&gt;url()&lt;/code&gt; method of the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e947c073ddafa7efa9d10c0ab2187ebe8664d17e" translate="yes" xml:space="preserve">
          <source>The cache &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt; is used to identify individual memory stores. If you only have one &lt;code&gt;locmem&lt;/code&gt; cache, you can omit the &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt;; however, if you have more than one local memory cache, you will need to assign a name to at least one of them in order to keep them separate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cd46adbf068b78511927170d0cd07d86f0fd4d" translate="yes" xml:space="preserve">
          <source>The cache backend to use. The built-in cache backends are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1154f774126ce5ad699da0f651f6187725e5fa" translate="yes" xml:space="preserve">
          <source>The cache connection to use for the &lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;cache middleware&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d8ccb98c19fec4a4ed9ca090e17f49252587bc" translate="yes" xml:space="preserve">
          <source>The cache settings when opening up the GeoIP datasets. May be an integer in (0, 1, 2, 4, 8) corresponding to the &lt;code&gt;MODE_AUTO&lt;/code&gt;, &lt;code&gt;MODE_MMAP_EXT&lt;/code&gt;, &lt;code&gt;MODE_MMAP&lt;/code&gt;, and &lt;code&gt;GEOIP_INDEX_CACHE&lt;/code&gt;&lt;code&gt;MODE_MEMORY&lt;/code&gt; C API settings, respectively. Defaults to 0 (&lt;code&gt;MODE_AUTO&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acdd70132d51d22420eb1175657196364abf659" translate="yes" xml:space="preserve">
          <source>The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live &amp;ndash; whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache&amp;rsquo;s performance; yes, some cache types are faster than others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412d65e9c538bfe4a372f72f3322c99a2e6d8093" translate="yes" xml:space="preserve">
          <source>The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable &lt;code&gt;my_timeout&lt;/code&gt; is set to the value &lt;code&gt;600&lt;/code&gt;, then the following two examples are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc353ddabf47aac846044e4948d99fc39ed66470" translate="yes" xml:space="preserve">
          <source>The cache uses a least-recently-used (LRU) culling strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548bf6cd86306f6731ede47d7c608a40b6439642" translate="yes" xml:space="preserve">
          <source>The cached template loader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aaac7ed3362a3f4617c65798299ec343e8dba17" translate="yes" xml:space="preserve">
          <source>The cached value can be treated like an ordinary attribute of the instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32eaef240c894f7537a2b2879dce4928a62820a9" translate="yes" xml:space="preserve">
          <source>The caching framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbec7decbf87a1b937f4e084412fbd8e0b16bc0" translate="yes" xml:space="preserve">
          <source>The call to &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logging.getLogger&quot;&gt;&lt;code&gt;logging.getLogger()&lt;/code&gt;&lt;/a&gt; obtains (creating, if necessary) an instance of a logger. The logger instance is identified by a name. This name is used to identify the logger for configuration purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28be4b432a3ed767d3483f9f071adcfdabb0344b" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;super().clean()&lt;/code&gt; in the example code ensures that any validation logic in parent classes is maintained. If your form inherits another that doesn&amp;rsquo;t return a &lt;code&gt;cleaned_data&lt;/code&gt; dictionary in its &lt;code&gt;clean()&lt;/code&gt; method (doing so is optional), then don&amp;rsquo;t assign &lt;code&gt;cleaned_data&lt;/code&gt; to the result of the &lt;code&gt;super()&lt;/code&gt; call and use &lt;code&gt;self.cleaned_data&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a01ba7ce9d6f81e9f47125f43d5581b8b99b441" translate="yes" xml:space="preserve">
          <source>The callable form can be helpful, for instance, when used in conjunction with the Python &lt;code&gt;datetime&lt;/code&gt; module to limit selections by date range. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110d3d8214f7f2350e2549600976802c9af215c7" translate="yes" xml:space="preserve">
          <source>The callable will be evaluated only when the unbound form is displayed, not when it is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31beda7ce9ec0cb008195715fe9842980da0eb9" translate="yes" xml:space="preserve">
          <source>The cast of players</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452676dbe881ca0f8bb5366dc0a27f7542061a2a" translate="yes" xml:space="preserve">
          <source>The catch-all logger for messages in the &lt;code&gt;django&lt;/code&gt; hierarchy. No messages are posted using this name but instead using one of the loggers below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b651c172f62901bc6714dc1973eef30ed2d264bc" translate="yes" xml:space="preserve">
          <source>The character encoding used to decode any files read from disk. This includes template files, static files, and translation catalogs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f3a550e11ae36f28b06315e750dc9f2f45a0df" translate="yes" xml:space="preserve">
          <source>The character set encoding used to create the test database. The value of this string is passed directly through to the database, so its format is backend-specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f7b3134e5af3df9646d6c2bb0d84090f20eafe" translate="yes" xml:space="preserve">
          <source>The character set of email sent with &lt;code&gt;django.core.mail&lt;/code&gt; will be set to the value of your &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6af75081aab59ce90d68a800760cfeda0e9987c" translate="yes" xml:space="preserve">
          <source>The charset in which the response will be encoded. If not given it will be extracted from &lt;code&gt;content_type&lt;/code&gt;, and if that is unsuccessful, the &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743b8267a0834d32d9c2ea8e6ceedb8a5bce9f25" translate="yes" xml:space="preserve">
          <source>The check function &lt;em&gt;must&lt;/em&gt; accept an &lt;code&gt;app_configs&lt;/code&gt; argument; this argument is the list of applications that should be inspected. If None, the check must be run on &lt;em&gt;all&lt;/em&gt; installed apps in the project. The &lt;code&gt;**kwargs&lt;/code&gt; argument is required for future expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5824011522bd9eb13377730c19f148d90d6540f" translate="yes" xml:space="preserve">
          <source>The class has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf8846e541ccfe96d8f9b3763d0c53900c892ec" translate="yes" xml:space="preserve">
          <source>The class of the objects that are added to, removed from or cleared from the relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f291af4bd08e7621ceed5517aef1b3e3a73166cd" translate="yes" xml:space="preserve">
          <source>The class of the user that just logged in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75007b032e36e422a861e56bec617e750279b503" translate="yes" xml:space="preserve">
          <source>The class that renders form widgets. It must implement &lt;a href=&quot;forms/renderers#low-level-widget-render-api&quot;&gt;the low-level render API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755f095068c56e6a90831130ba6e82e55fde9c7b" translate="yes" xml:space="preserve">
          <source>The class used to build the test suite. By default it is set to &lt;code&gt;unittest.TestSuite&lt;/code&gt;. This can be overridden if you wish to implement different logic for collecting tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169d4cc1ae64db2818559a2fd3aa3df3f82a804f" translate="yes" xml:space="preserve">
          <source>The class-level &lt;code&gt;atomic&lt;/code&gt; block described above allows the creation of initial data at the class level, once for the whole &lt;code&gt;TestCase&lt;/code&gt;. This technique allows for faster tests as compared to using &lt;code&gt;setUp()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccbde73445a4688dc1fe731a4568c247f557bd5" translate="yes" xml:space="preserve">
          <source>The class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30d58a3ceff31ff24b10b5795c224f23288d2d3" translate="yes" xml:space="preserve">
          <source>The classes defined in this module create database constraints. They are added in the model &lt;a href=&quot;options#django.db.models.Options.constraints&quot;&gt;&lt;code&gt;Meta.constraints&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9477ab351e298dcff6bdca6b2539ae345998a6" translate="yes" xml:space="preserve">
          <source>The classes documented below provide a way for users to use functions provided by the underlying database as annotations, aggregations, or filters in Django. Functions are also &lt;a href=&quot;expressions&quot;&gt;expressions&lt;/a&gt;, so they can be used and combined with other expressions like &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d8d4a21cbeb2373689907d93ed89429b6e744d" translate="yes" xml:space="preserve">
          <source>The cleaned data from the &lt;code&gt;form&lt;/code&gt; is available for string interpolation using the &lt;code&gt;%(field_name)s&lt;/code&gt; syntax. For ModelForms, if you need access to fields from the saved &lt;code&gt;object&lt;/code&gt; override the &lt;a href=&quot;#django.contrib.messages.views.SuccessMessageMixin.get_success_message&quot;&gt;&lt;code&gt;get_success_message()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05168c9f9c8bac7466da082345be65c10d1eb53a" translate="yes" xml:space="preserve">
          <source>The cleaning process modifies the model instance passed to the &lt;code&gt;ModelForm&lt;/code&gt; constructor in various ways. For instance, any date fields on the model are converted into actual date objects. Failed validation may leave the underlying model instance in an inconsistent state and therefore it&amp;rsquo;s not recommended to reuse it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84de12d7e0bb1ef32e52fc74373ef725f8c8c7ff" translate="yes" xml:space="preserve">
          <source>The clickjacking middleware and decorators provide easy-to-use protection against &lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking&quot;&gt;clickjacking&lt;/a&gt;. This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0884e94bca60201ac08c4e39d15908fc5430d7" translate="yes" xml:space="preserve">
          <source>The code above loads the &lt;code&gt;news/year_archive.html&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24bc0a812b0ec647c48d4e1b3d00ab9937b67cf" translate="yes" xml:space="preserve">
          <source>The code above maps URL paths to Python callback functions (&amp;ldquo;views&amp;rdquo;). The path strings use parameter tags to &amp;ldquo;capture&amp;rdquo; values from the URLs. When a user requests a page, Django runs through each path, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the paths are compiled into regular expressions at load time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c1c12b0e18dce0441e64b6b3d2ad9f9259493f" translate="yes" xml:space="preserve">
          <source>The code and comments should be self-explanatory, but a few things deserve a mention:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91452dd3f89261240824192dc632bf4474db175" translate="yes" xml:space="preserve">
          <source>The code below is equivalent to the code above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc942bc7da1dff6c09b53018389efffa7a208a0f" translate="yes" xml:space="preserve">
          <source>The code for our &lt;code&gt;vote()&lt;/code&gt; view does have a small problem. It first gets the &lt;code&gt;selected_choice&lt;/code&gt; object from the database, then computes the new value of &lt;code&gt;votes&lt;/code&gt;, and then saves it back to the database. If two users of your website try to vote at &lt;em&gt;exactly the same time&lt;/em&gt;, this might go wrong: The same value, let&amp;rsquo;s say 42, will be retrieved for &lt;code&gt;votes&lt;/code&gt;. Then, for both users the new value of 43 is computed and saved, but 44 would be the expected value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3644b015cb23e9bc6437c53f1691c4635daa000" translate="yes" xml:space="preserve">
          <source>The code for this test may look as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f8751633105fc0bc54b57a07b88b096758e297" translate="yes" xml:space="preserve">
          <source>The code lives in the &lt;code&gt;django.core.mail&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e141e436bbeb21b445a338d88a7888bc10bed390" translate="yes" xml:space="preserve">
          <source>The code provided on &lt;code&gt;Storage&lt;/code&gt; retains only alpha-numeric characters, periods and underscores from the original filename, removing everything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98dd10203f7b601a1d65c073a69d7058e9042a01" translate="yes" xml:space="preserve">
          <source>The collation order to use when creating the test database. This value is passed directly to the backend, so its format is backend-specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90bb6212b1abdc5ca2c67075c5291b0c51c857b" translate="yes" xml:space="preserve">
          <source>The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. It can be set on a database-wide level and also per-table and per-column. This is &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset.html&quot;&gt;documented thoroughly&lt;/a&gt; in the MySQL documentation. In all cases, you set the collation by directly manipulating the database tables; Django doesn&amp;rsquo;t provide a way to set this on the model definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eeda2585aac2dc08a21c32d4248e9129f9e0bb3" translate="yes" xml:space="preserve">
          <source>The color interpretation for the band, as an integer between 0and 16. If &lt;code&gt;as_string&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the data type is returned as a string with the following possible values: &lt;code&gt;GCI_Undefined&lt;/code&gt;, &lt;code&gt;GCI_GrayIndex&lt;/code&gt;, &lt;code&gt;GCI_PaletteIndex&lt;/code&gt;, &lt;code&gt;GCI_RedBand&lt;/code&gt;, &lt;code&gt;GCI_GreenBand&lt;/code&gt;, &lt;code&gt;GCI_BlueBand&lt;/code&gt;, &lt;code&gt;GCI_AlphaBand&lt;/code&gt;, &lt;code&gt;GCI_HueBand&lt;/code&gt;, &lt;code&gt;GCI_SaturationBand&lt;/code&gt;, &lt;code&gt;GCI_LightnessBand&lt;/code&gt;, &lt;code&gt;GCI_CyanBand&lt;/code&gt;, &lt;code&gt;GCI_MagentaBand&lt;/code&gt;, &lt;code&gt;GCI_YellowBand&lt;/code&gt;, &lt;code&gt;GCI_BlackBand&lt;/code&gt;, &lt;code&gt;GCI_YCbCr_YBand&lt;/code&gt;, &lt;code&gt;GCI_YCbCr_CbBand&lt;/code&gt;, and &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt;. &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; also represents &lt;code&gt;GCI_Max&lt;/code&gt; because both correspond to the integer 16, but only &lt;code&gt;GCI_YCbCr_CrBand&lt;/code&gt; is returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad09a70dacbadcdfce005c2c0b886f87ef1a6e92" translate="yes" xml:space="preserve">
          <source>The colors used for syntax highlighting can be customized. Django ships with three color palettes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a922802028535811239279e39be84ceab6b7530" translate="yes" xml:space="preserve">
          <source>The column type, which tells the database what kind of data to store (e.g. &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;TEXT&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e51ff0488cd65962f4119380c63a3ec8a0b8be4" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;python manage.py diffsettings&lt;/code&gt; displays differences between the current settings file and Django&amp;rsquo;s default settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80dfb4d69f2901b7da6bebabcfbace6e9333454" translate="yes" xml:space="preserve">
          <source>The command adds these options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdfcb96927ee87fc75a054180cf816f17324db5" translate="yes" xml:space="preserve">
          <source>The command produces the following output, which may be copied directly into the &lt;code&gt;models.py&lt;/code&gt; of a GeoDjango application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb002894c488e2e7a65e11ca5cc9d4bfa9078340" translate="yes" xml:space="preserve">
          <source>The command that backs all this is &lt;a href=&quot;../ref/django-admin#django-admin-squashmigrations&quot;&gt;&lt;code&gt;squashmigrations&lt;/code&gt;&lt;/a&gt; - pass it the app label and migration name you want to squash up to, and it&amp;rsquo;ll get to work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c020a948db5a02e51e5c1ba0d47dae01ba33dd3" translate="yes" xml:space="preserve">
          <source>The command-line examples throughout this document use &lt;code&gt;django-admin&lt;/code&gt; to be consistent, but any example can use &lt;code&gt;manage.py&lt;/code&gt; or &lt;code&gt;python -m django&lt;/code&gt; just as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2feb2c94af08b408eaec6dbef069506756f05b" translate="yes" xml:space="preserve">
          <source>The comment will then appear in the resulting &lt;code&gt;.po&lt;/code&gt; file associated with the translatable construct located below it and should also be displayed by most translation tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfad5ebbd59f63638f9c18579b4ed5fb04ccdb6" translate="yes" xml:space="preserve">
          <source>The common API doesn&amp;rsquo;t have an equivalent concept. Context data is passed in a plain &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; and the current &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; is passed separately if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c1b918eb4886e1878f6b407c27700844bba2a8" translate="yes" xml:space="preserve">
          <source>The comparison of the contents of &lt;code&gt;qs&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; is performed using the function &lt;code&gt;transform&lt;/code&gt;; by default, this means that the &lt;code&gt;repr()&lt;/code&gt; of each value is compared. Any other callable can be used if &lt;code&gt;repr()&lt;/code&gt; doesn&amp;rsquo;t provide a unique or helpful comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a91a5510b22b7501233e7fa3573651a27e2c669" translate="yes" xml:space="preserve">
          <source>The comparison operators cannot be &amp;lsquo;chained&amp;rsquo; like in Python or in mathematical notation. For example, instead of using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed46b6d6e53306b5501edbe2ad2c37a021c6b97" translate="yes" xml:space="preserve">
          <source>The compilation function &amp;ndash; a Python function (not the name of the function as a string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c432829c2360e91a30da4cee98de39816672c670" translate="yes" xml:space="preserve">
          <source>The concept is very similar to messages from the &lt;a href=&quot;../ref/contrib/messages&quot;&gt;message framework&lt;/a&gt; or the &lt;a href=&quot;logging&quot;&gt;logging framework&lt;/a&gt;. Messages are tagged with a &lt;code&gt;level&lt;/code&gt; indicating the severity of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549ccf14ad7d65404de2e82804d6dcffdfd6e2a2" translate="yes" xml:space="preserve">
          <source>The concepts of tags and filters exist both in the Django template language and in Jinja2 but they&amp;rsquo;re used differently. Since Jinja2 supports passing arguments to callables in templates, many features that require a template tag or filter in Django templates can be achieved by calling a function in Jinja2 templates, as shown in the example above. Jinja2&amp;rsquo;s global namespace removes the need for template context processors. The Django template language doesn&amp;rsquo;t have an equivalent of Jinja2 tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b2cf1bb0de5081862f14c0f39c8abe579eb3c6" translate="yes" xml:space="preserve">
          <source>The conditional expression classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88433b473f828a40bacb10c9b4d1a00de9d89d65" translate="yes" xml:space="preserve">
          <source>The constructor creates several &lt;a href=&quot;#django.forms.Select&quot;&gt;&lt;code&gt;Select&lt;/code&gt;&lt;/a&gt; widgets in a list. The &lt;code&gt;super()&lt;/code&gt; method uses this list to setup the widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c354e7724254d0140cc11fd6b89752b23740e1fc" translate="yes" xml:space="preserve">
          <source>The constructor doesn&amp;rsquo;t take any arguments and no content should be added to this response. Use this to designate that a page hasn&amp;rsquo;t been modified since the user&amp;rsquo;s last request (status code 304).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7b4750536ced9eb610dec817e1cd0c20262168" translate="yes" xml:space="preserve">
          <source>The constructor for &lt;code&gt;DataSource&lt;/code&gt; only requires one parameter: the path of the file you want to read. However, OGR also supports a variety of more complex data sources, including databases, that may be accessed by passing a special name string instead of a path. For more information, see the &lt;a href=&quot;https://gdal.org/drivers/vector/&quot;&gt;OGR Vector Formats&lt;/a&gt; documentation. The &lt;a href=&quot;#django.contrib.gis.gdal.DataSource.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property of a &lt;code&gt;DataSource&lt;/code&gt; instance gives the OGR name of the underlying data source that it is using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eae3807f099dc609089e2fa4d06ea8db870ffe8" translate="yes" xml:space="preserve">
          <source>The constructor for &lt;code&gt;GDALRaster&lt;/code&gt; accepts two parameters. The first parameter defines the raster source, and the second parameter defines if a raster should be opened in write mode. For newly-created rasters, the second parameter is ignored and the new raster is always created in write mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc598c12d02dedfb319c16bce2278d396df2b2eb" translate="yes" xml:space="preserve">
          <source>The constructor of &lt;code&gt;django.template.Context&lt;/code&gt; takes an optional argument &amp;mdash; a dictionary mapping variable names to variable values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2164eab6d4811fad250d2bb1ccbaa3d9c8003615" translate="yes" xml:space="preserve">
          <source>The content body is less than 200 bytes long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470e37da69adfa1e28fc63a006dbca1bae1fa479" translate="yes" xml:space="preserve">
          <source>The content field may optionally be left blank if you prefer to put your content in a custom template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db675219db37343c2bae99df7a80d9928af81076" translate="yes" xml:space="preserve">
          <source>The content type to use for the response. &lt;code&gt;content_type&lt;/code&gt; is passed as a keyword argument to &lt;code&gt;response_class&lt;/code&gt;. Default is &lt;code&gt;None&lt;/code&gt; &amp;ndash; meaning that Django uses &lt;code&gt;'text/html'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5835dca25f13fc5581c883182116aea3ab44a011" translate="yes" xml:space="preserve">
          <source>The content-type header uploaded with the file (e.g. &lt;em&gt;text/plain&lt;/em&gt; or &lt;em&gt;application/pdf&lt;/em&gt;). Like any data supplied by the user, you shouldn&amp;rsquo;t trust that the uploaded file is actually this type. You&amp;rsquo;ll still need to validate that the file contains the content that the content-type header claims &amp;ndash; &amp;ldquo;trust but verify.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7de1a43c36e821a66909e1c15a46f2cee3281c" translate="yes" xml:space="preserve">
          <source>The contenttypes framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e4d324241f65f889809ed3d94bf0710f1f7942" translate="yes" xml:space="preserve">
          <source>The contenttypes framework is included in the default &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; list created by &lt;code&gt;django-admin startproject&lt;/code&gt;, but if you&amp;rsquo;ve removed it or if you manually set up your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; list, you can enable it by adding &lt;code&gt;'django.contrib.contenttypes'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac06751752a9579736538d702b5eed196af15a9" translate="yes" xml:space="preserve">
          <source>The context data to be used when rendering the template. It must be a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c13fd4afc732549f974b3c9349753bf740123e7" translate="yes" xml:space="preserve">
          <source>The context processor also provides a &lt;code&gt;DEFAULT_MESSAGE_LEVELS&lt;/code&gt; variable which is a mapping of the message level names to their numeric value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234fb0df99df952c3684db102132db150237ee9e" translate="yes" xml:space="preserve">
          <source>The convention is not to capitalize the first letter of the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt;. Django will automatically capitalize the first letter where it needs to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf14e19437b9aeb95afe1f4da20fc4ae721c81ea" translate="yes" xml:space="preserve">
          <source>The correct choice of comparison functions here depends on your particular data set, for example the language(s) used and the type of text being searched. All of the examples we&amp;rsquo;ve seen are on short strings where the user is likely to enter something close (by varying definitions) to the source data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76284e00e8cf9b7966d97c110eeb914acef53fc7" translate="yes" xml:space="preserve">
          <source>The correct way to catch database errors is around an &lt;code&gt;atomic&lt;/code&gt; block as shown above. If necessary, add an extra &lt;code&gt;atomic&lt;/code&gt; block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9086cc318bc5e173a9ec495b70bdcb43af97ee" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags around the labels. An HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag designates which label text is associated with which form element. This small enhancement makes forms more usable and more accessible to assistive devices. It&amp;rsquo;s always a good idea to use &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e868f50cf9b955c6a3a257a35cb8867c9d3988f1" translate="yes" xml:space="preserve">
          <source>The corresponding algorithm names are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be57e0498aa6711170f0e9b968277292780a5351" translate="yes" xml:space="preserve">
          <source>The count argument is an integer indicating the number of times the template should be rendered. Default is &lt;code&gt;None&lt;/code&gt;, meaning that the template should be rendered one or more times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676683ffd241442533cedc1fa084bb636ddfc4ce" translate="yes" xml:space="preserve">
          <source>The counterpoint to writing your &lt;code&gt;__init__()&lt;/code&gt; method is writing the &lt;a href=&quot;../ref/models/fields#django.db.models.Field.deconstruct&quot;&gt;&lt;code&gt;deconstruct()&lt;/code&gt;&lt;/a&gt; method. It&amp;rsquo;s used during &lt;a href=&quot;../topics/migrations&quot;&gt;model migrations&lt;/a&gt; to tell Django how to take an instance of your new field and reduce it to a serialized form - in particular, what arguments to pass to &lt;code&gt;__init__()&lt;/code&gt; to re-create it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee8c481b2898ae8434d6313d56d583f06930d81" translate="yes" xml:space="preserve">
          <source>The creation module of the database backend also provides some utilities that can be useful during testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c67f5320bc6224cfdb7c1c07cc5374c7ae77a4" translate="yes" xml:space="preserve">
          <source>The creation-order dependencies of the database. See the documentation on &lt;a href=&quot;../topics/testing/advanced#topics-testing-creation-dependencies&quot;&gt;controlling the creation order of test databases&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d7917d9faae66855cbfd322829e7c779f54066" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18defbb524b282098621bf1a29b83d998e3e40f" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1160e7be43a801bc82a4b53afea1ec9d68c8863b" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop (0-indexed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdad6fa0a0125769d10c429d4127b6e9b086a00" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop (1-indexed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f3d67f0992528479762165e112bb2677c700db" translate="yes" xml:space="preserve">
          <source>The current rendered value of the response content, using the current template and context data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5816e6b51fc7f53459dd7a68806e3abc020987" translate="yes" xml:space="preserve">
          <source>The current state of Python packaging is a bit muddled with various tools. For this tutorial, we&amp;rsquo;re going to use &lt;a href=&quot;https://pypi.org/project/setuptools/&quot;&gt;setuptools&lt;/a&gt; to build our package. It&amp;rsquo;s the recommended packaging tool (merged with the &lt;code&gt;distribute&lt;/code&gt; fork). We&amp;rsquo;ll also be using &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt; to install and uninstall it. You should install these two packages now. If you need help, you can refer to &lt;a href=&quot;../topics/install#installing-official-release&quot;&gt;how to install Django with pip&lt;/a&gt;. You can install &lt;code&gt;setuptools&lt;/code&gt; the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a08c53207620f40ef4087879bd2f7158937901" translate="yes" xml:space="preserve">
          <source>The current time zone is the equivalent of the current &lt;a href=&quot;index#term-locale-name&quot;&gt;locale&lt;/a&gt; for translations. However, there&amp;rsquo;s no equivalent of the &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header that Django could use to determine the user&amp;rsquo;s time zone automatically. Instead, Django provides &lt;a href=&quot;../../ref/utils#time-zone-selection-functions&quot;&gt;time zone selection functions&lt;/a&gt;. Use them to build the time zone selection logic that makes sense for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23ff7c7f68a407084d00f01afe6c15283d21f45" translate="yes" xml:space="preserve">
          <source>The current version of Django doesn&amp;rsquo;t support Python 2.7. Get Python 3 at &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&amp;rsquo;s download page&lt;/a&gt; or with your operating system&amp;rsquo;s package manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3476d04eaf5286941daa6863680a2594d54f758a" translate="yes" xml:space="preserve">
          <source>The currently logged-in user and their permissions are made available in the &lt;a href=&quot;../../ref/templates/api&quot;&gt;template context&lt;/a&gt; when you use &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f82cde19a9fcc9d37d62f904d3caefd5111f1d8" translate="yes" xml:space="preserve">
          <source>The currently logged-in user&amp;rsquo;s permissions are stored in the template variable &lt;code&gt;{{ perms }}&lt;/code&gt;. This is an instance of &lt;code&gt;django.contrib.auth.context_processors.PermWrapper&lt;/code&gt;, which is a template-friendly proxy of permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed04acb21d2826ea5acc66c65bae1007aab057c0" translate="yes" xml:space="preserve">
          <source>The custom lookup above is great, but in some cases you may want to be able to chain lookups together. For example, let&amp;rsquo;s suppose we are building an application where we want to make use of the &lt;code&gt;abs()&lt;/code&gt; operator. We have an &lt;code&gt;Experiment&lt;/code&gt; model which records a start value, end value, and the change (start - end). We would like to find all experiments where the change was equal to a certain amount (&lt;code&gt;Experiment.objects.filter(change__abs=27)&lt;/code&gt;), or where it did not exceed a certain amount (&lt;code&gt;Experiment.objects.filter(change__abs__lt=27)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e462bbe1e5e31788f421390d5772492a2c38c7" translate="yes" xml:space="preserve">
          <source>The data migration might look something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2fce352218fcf551224af5c25f7a9ca59ddd03" translate="yes" xml:space="preserve">
          <source>The data type contained in the band, as an integer constant between 0 (Unknown) and 11. If &lt;code&gt;as_string&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, the data type is returned as a string with the following possible values: &lt;code&gt;GDT_Unknown&lt;/code&gt;, &lt;code&gt;GDT_Byte&lt;/code&gt;, &lt;code&gt;GDT_UInt16&lt;/code&gt;, &lt;code&gt;GDT_Int16&lt;/code&gt;, &lt;code&gt;GDT_UInt32&lt;/code&gt;, &lt;code&gt;GDT_Int32&lt;/code&gt;, &lt;code&gt;GDT_Float32&lt;/code&gt;, &lt;code&gt;GDT_Float64&lt;/code&gt;, &lt;code&gt;GDT_CInt16&lt;/code&gt;, &lt;code&gt;GDT_CInt32&lt;/code&gt;, &lt;code&gt;GDT_CFloat32&lt;/code&gt;, and &lt;code&gt;GDT_CFloat64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d95eeae5ab8d781cf0f996fad262568ffa0c8a8" translate="yes" xml:space="preserve">
          <source>The data you return will get fed into the subsequent upload handlers&amp;rsquo; &lt;code&gt;receive_data_chunk&lt;/code&gt; methods. In this way, one handler can be a &amp;ldquo;filter&amp;rdquo; for other handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06dcd3a54eadeabfa5fc71f941fe35d32da63cf" translate="yes" xml:space="preserve">
          <source>The database API supports about two dozen lookup types; a complete reference can be found in the &lt;a href=&quot;../../ref/models/querysets#field-lookups&quot;&gt;field lookup reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here&amp;rsquo;s some of the more common lookups you&amp;rsquo;ll probably use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd51927fe60291aa96713c14a10084b2030a7122" translate="yes" xml:space="preserve">
          <source>The database alias being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7a0f6a4ffa467c95510c550e77ff84c2880ada" translate="yes" xml:space="preserve">
          <source>The database alias used for synchronization. Defaults to the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952dd11e9541ef5d3727b9dfa84e64f7fbe99249" translate="yes" xml:space="preserve">
          <source>The database backend to use. The built-in database backends are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b4bec81caaec606a7e790e7b80e1dfe5ab0542" translate="yes" xml:space="preserve">
          <source>The database connection that was opened. This can be used in a multiple-database configuration to differentiate connection signals from different databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2370421f5bdbfc63ed2299c4b75082331e9312" translate="yes" xml:space="preserve">
          <source>The database functions in the &lt;code&gt;django.contrib.postgres.search&lt;/code&gt; module ease the use of PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch.html&quot;&gt;full text search engine&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71695c6f4fa1dffd03cf126602c3ca0d7b6035e" translate="yes" xml:space="preserve">
          <source>The database operators used by the lookups can be divided into three categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a5416a993dcb3bd1dc2279d4dade633db7282c" translate="yes" xml:space="preserve">
          <source>The database that will be used if this query is executed now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9115c3491c26155c0d8b73a549668d12a0c78bb2" translate="yes" xml:space="preserve">
          <source>The database user must be a superuser in order to run &lt;code&gt;CREATE EXTENSION postgis;&lt;/code&gt;. The command is run during the &lt;a href=&quot;../../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; process. An alternative is to use a migration operation in your project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61a99a7872ebf66de6187b65d49ab814180deb5" translate="yes" xml:space="preserve">
          <source>The database wrapper class &amp;ndash; i.e. &lt;code&gt;django.db.backends.postgresql.DatabaseWrapper&lt;/code&gt; or &lt;code&gt;django.db.backends.mysql.DatabaseWrapper&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b23e6996a7bf9115220fd283aace6352331691e" translate="yes" xml:space="preserve">
          <source>The date and time of the action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b139848485c3bd11a960042cbaa48f80aba5b2a1" translate="yes" xml:space="preserve">
          <source>The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ.4 string for the &lt;a href=&quot;https://spatialreference.org/ref/sr-org/6864/prj/&quot;&gt;Google projection (900913 or 3857)&lt;/a&gt; requires the &lt;code&gt;null&lt;/code&gt; grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc04cb57a0cb86ad163b712420777e844241e208" translate="yes" xml:space="preserve">
          <source>The decorator adds logic to capture and preserve the arguments on their way into your constructor, and then returns those arguments exactly when deconstruct() is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd68e9318aaf868b6009093b024904f632bf5df" translate="yes" xml:space="preserve">
          <source>The decorator can also be applied to &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; classes:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
