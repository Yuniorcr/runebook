<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="numpy">
    <body>
      <group id="numpy">
        <trans-unit id="c7a7d5fdc3538cf929aee4c511ed8f06972767b8" translate="yes" xml:space="preserve">
          <source>NumPy provides an N-dimensional array type, the &lt;a href=&quot;arrays.ndarray#arrays-ndarray&quot;&gt;ndarray&lt;/a&gt;, which describes a collection of &amp;ldquo;items&amp;rdquo; of the same type. The items can be &lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;indexed&lt;/a&gt; using for example N integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a75765bb40779d587b945d346fd4f25656a32a8" translate="yes" xml:space="preserve">
          <source>NumPy provides enhanced distutils functionality to make it easier to build and install sub-packages, auto-generate code, and extension modules that use Fortran-compiled libraries. To use features of NumPy distutils, use the &lt;code&gt;setup&lt;/code&gt; command from &lt;code&gt;numpy.distutils.core&lt;/code&gt;. A useful &lt;a href=&quot;#numpy.distutils.misc_util.Configuration&quot;&gt;&lt;code&gt;Configuration&lt;/code&gt;&lt;/a&gt; class is also provided in &lt;a href=&quot;#module-numpy.distutils.misc_util&quot;&gt;&lt;code&gt;numpy.distutils.misc_util&lt;/code&gt;&lt;/a&gt; that can make it easier to construct keyword arguments to pass to the setup function (by passing the dictionary obtained from the todict() method of the class). More information is available in the &lt;a href=&quot;distutils_guide#distutils-user-guide&quot;&gt;NumPy Distutils - Users Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cd70d7e4f84112d992fc760c41c139b7d9150b" translate="yes" xml:space="preserve">
          <source>NumPy provides several hooks that classes can customize:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db997f8d5529d90e4e824067ebfe5d83669d3578" translate="yes" xml:space="preserve">
          <source>NumPy provides the &lt;a href=&quot;generated/numpy.recarray#numpy.recarray&quot;&gt;&lt;code&gt;recarray&lt;/code&gt;&lt;/a&gt; class which allows accessing the fields of a structured array as attributes, and a corresponding scalar data type object &lt;a href=&quot;generated/numpy.record#numpy.record&quot;&gt;&lt;code&gt;record&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50bd9e44504ee882f7d36e3a1a29183cd10ae09" translate="yes" xml:space="preserve">
          <source>NumPy slicing creates a &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-view&quot;&gt;view&lt;/a&gt; instead of a copy as in the case of builtin Python sequences such as string, tuple and list. Care must be taken when extracting a small portion from a large array which becomes useless after the extraction, because the small portion extracted contains a reference to the large original array whose memory will not be released until all arrays derived from it are garbage-collected. In such cases an explicit &lt;code&gt;copy()&lt;/code&gt; is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9315eaa766c603c7ff5592ed435945f3c4e579c8" translate="yes" xml:space="preserve">
          <source>NumPy stores an internal table of Python callable objects that are used to implement arithmetic operations for arrays as well as certain array calculation methods. This function allows the user to replace any or all of these Python objects with their own versions. The keys of the dictionary, &lt;em&gt;dict&lt;/em&gt;, are the named functions to replace and the paired value is the Python callable object to use. Care should be taken that the function used to replace an internal array operation does not itself call back to that internal array operation (unless you have designed the function to handle that), or an unchecked infinite recursion can result (possibly causing program crash). The key names that represent operations that can be replaced are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ffae4d5e74817321bd554d6e22d7ad10db9e4c" translate="yes" xml:space="preserve">
          <source>NumPy supports PEP 3141 numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddaf9c91d8d4012f023752f68ed0149bce87d6e" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8667558f0f51c03b2587a599efedda1f9f4468ac" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754). Negative zero is considered to be a finite number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23202e89199272fb59380a61ef4cc7654a36b65" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754). Positive zero is considered to be a finite number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42533d92c39de593371e6aa3dde32696064d2b8" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754). This means that Not a Number is not equivalent to infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1c83a08aa63e00fff2b45b2f860192ca21bcf1" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754). This means that Not a Number is not equivalent to infinity. Also that positive infinity is not equivalent to negative infinity. But infinity is equivalent to positive infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389fed054ec853b5b8bb20d440426bf9262e8e46" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754). This means that Not a Number is not equivalent to infinity. Also that positive infinity is not equivalent to negative infinity. But infinity is equivalent to positive infinity. Errors result if the second argument is also supplied when &lt;code&gt;x&lt;/code&gt; is a scalar input, or if first and second arguments have different shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a6249b4224925e0bdcfa0f8624c08fcc4790ef" translate="yes" xml:space="preserve">
          <source>NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE 754). This means that Not a Number is not equivalent to infinity. Positive infinity is treated as a very large number and negative infinity is treated as a very small (i.e. negative) number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea0a36ef00ca34de0c91ee7b58a561c1bb0550a" translate="yes" xml:space="preserve">
          <source>NumPy version comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba9f463515e23b0f299b2ffc9d54837e3d43200" translate="yes" xml:space="preserve">
          <source>NumPy version string (&lt;code&gt;np.__version__&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3a90b67fc6e7751631f73fbd200fedcaf6517b" translate="yes" xml:space="preserve">
          <source>NumPy will gather implementations of &lt;code&gt;__array_function__&lt;/code&gt; from all specified inputs and call them in order: subclasses before superclasses, and otherwise left to right. Note that in some edge cases involving subclasses, this differs slightly from the &lt;a href=&quot;https://bugs.python.org/issue30140&quot;&gt;current behavior&lt;/a&gt; of Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b99044d84c351a4ed63efec49bbe1ae3bf320ae" translate="yes" xml:space="preserve">
          <source>NumPy-specific help functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f40cf39f0e25d8cf6f052959da2085155ae248" translate="yes" xml:space="preserve">
          <source>Numba</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad094bf2eb6f204e2abae88bcc155073c5a7b5d" translate="yes" xml:space="preserve">
          <source>Numba can be used with either CTypes or CFFI. The current iteration of the BitGenerators all export a small set of functions through both interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858e21b5a976ec86aff538495ea9c4f65e263a29" translate="yes" xml:space="preserve">
          <source>Number of &amp;lsquo;guard digits&amp;rsquo; used when truncating the product of two mantissas to fit the representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be768826cc42fcf995f3aef93d52ff0cd53e9ae" translate="yes" xml:space="preserve">
          <source>Number of array dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97fad0d0844aff9a71f23c56eb56e01fb752db2" translate="yes" xml:space="preserve">
          <source>Number of array items in summary at beginning and end of each dimension (default 3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9201c088075dba2ae62f215d4d2fdd9a8a777253" translate="yes" xml:space="preserve">
          <source>Number of array items in summary at beginning and end of each dimension. Defaults to &lt;code&gt;numpy.get_printoptions()['edgeitems']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4574e45463a4337cd6208d1b13e93be562f45874" translate="yes" xml:space="preserve">
          <source>Number of base-&lt;code&gt;ibeta&lt;/code&gt; digits in the floating point mantissa M.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ada3f66dbd1b40b353be9a0f81e475922b90cd9" translate="yes" xml:space="preserve">
          <source>Number of bits in data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e91946bba240191d8f8b60627edef4c8d6081d" translate="yes" xml:space="preserve">
          <source>Number of bits in the exponent (including its sign and bias).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a305056bc0be0ed46faf9a5c4020bd05011c494" translate="yes" xml:space="preserve">
          <source>Number of bits to remove at the right of &lt;code&gt;x1&lt;/code&gt;. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd1696318c5332018bcf91295a29c11afe64192" translate="yes" xml:space="preserve">
          <source>Number of bytes to skip before beginning the element view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd38d497915bde99690ede2a81fd5739730552b" translate="yes" xml:space="preserve">
          <source>Number of columns in the array. By default, &lt;code&gt;M&lt;/code&gt; is taken equal to &lt;code&gt;N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e78e98de656ac1f174b228b3b3cfaba70b125d" translate="yes" xml:space="preserve">
          <source>Number of columns in the output, defaults to &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00044a0ba0541a7997dd2599a4f9b91182edde55" translate="yes" xml:space="preserve">
          <source>Number of columns in the output. If &lt;code&gt;N&lt;/code&gt; is not specified, a square array is returned (&lt;code&gt;N = len(x)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06d5e776ba9dffd0e77cd97b2c7b86bb26acb1a" translate="yes" xml:space="preserve">
          <source>Number of columns in the output. If None, defaults to &lt;code&gt;N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0217140ca3d5b8f088751040a1594d26b45a1b44" translate="yes" xml:space="preserve">
          <source>Number of compounding periods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97af9143d62e7223493889f6bc88440f1ed78209" translate="yes" xml:space="preserve">
          <source>Number of core dimensions of each argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33246fa87d0b3d8cf0cd33d590270d0d5b8977dd" translate="yes" xml:space="preserve">
          <source>Number of decimal places to round to (default: 0). If decimals is negative, it specifies the number of positions to the left of the decimal point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7f7a5c3f27de2bb3c70596c0f42aef8c17be9e" translate="yes" xml:space="preserve">
          <source>Number of decimals to round to. May be negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f39eca925aa79a0a6c1e41a38d8c60caef28f9" translate="yes" xml:space="preserve">
          <source>Number of degrees of freedom, must be &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947cb948510d628b02b33a2e4f5d937c49f48f16" translate="yes" xml:space="preserve">
          <source>Number of derivatives taken, must be non-negative. (Default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97245ef113e26038c737c690b9b01b48fa8ebd7e" translate="yes" xml:space="preserve">
          <source>Number of digits of precision for floating point output (default 8). May be &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;floatmode&lt;/code&gt; is not &lt;code&gt;fixed&lt;/code&gt;, to print as many digits as necessary to uniquely specify the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d97ec2f2e677c40d4431d2275107bedf5755ab8" translate="yes" xml:space="preserve">
          <source>Number of dimensions of broadcasted result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3508cd09f84a8328fcc45ebfc715b277ccf9575" translate="yes" xml:space="preserve">
          <source>Number of dimensions of broadcasted result. Alias for &lt;a href=&quot;numpy.broadcast.nd#numpy.broadcast.nd&quot;&gt;&lt;code&gt;nd&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d295ce1b14b658fe281bd20aab41d9aab0b616" translate="yes" xml:space="preserve">
          <source>Number of dimensions of broadcasted result. For code intended for NumPy 1.12.0 and later the more consistent &lt;a href=&quot;numpy.broadcast.ndim#numpy.broadcast.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt; is preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b135521e22bf0efd0692b304dc2944b4be1550dd" translate="yes" xml:space="preserve">
          <source>Number of dimensions of the sub-array if this data type describes a sub-array, and &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ea598f5fd4c1ee639980fee9928d5377e30cf8" translate="yes" xml:space="preserve">
          <source>Number of distinct core dimension names in the signature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b78d11ec827a9cb1ca1519eabc00a62b47ac43" translate="yes" xml:space="preserve">
          <source>Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e37b72989cb2f41b3fc9d963c59f76fe6543ba" translate="yes" xml:space="preserve">
          <source>Number of elements along the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807011d441713287a8ad8dac9e44680a221be633" translate="yes" xml:space="preserve">
          <source>Number of elements in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd78b22d2ed99e0d773b0892f1882002390793b" translate="yes" xml:space="preserve">
          <source>Number of experiments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f483027559825fca9bfa4da6e5eb78910571331a" translate="yes" xml:space="preserve">
          <source>Number of first indices that are involved in the inverse sum. Must be a positive integer, default is 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1779d0462b8633175ab393ef9880942bb660fa7" translate="yes" xml:space="preserve">
          <source>Number of items sampled. Must be at least 1 and at most &lt;code&gt;ngood + nbad&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafdf0d454dc2aa43f8a71aaefeb0feceae0766e" translate="yes" xml:space="preserve">
          <source>Number of items sampled. Must be nonnegative and less than &lt;code&gt;ngood + nbad&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897014b016e872c41c97ea0a9d1726a5e3c782d9" translate="yes" xml:space="preserve">
          <source>Number of items to read. &lt;code&gt;-1&lt;/code&gt; means all data in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39ddea78956da2963bde4fd3e57272e8d0acb35" translate="yes" xml:space="preserve">
          <source>Number of items to read. &lt;code&gt;-1&lt;/code&gt; means all items (i.e., the complete file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166e4814f7850463b72419995efff990410c931d" translate="yes" xml:space="preserve">
          <source>Number of iterators possessed by the broadcasted result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4211a9fc555cfccd24b355f573ae3f8ff77483ef" translate="yes" xml:space="preserve">
          <source>Number of non-zero values in the array along a given axis. Otherwise, the total number of non-zero values in the array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10474dca8982c65317e69ff33c6161fee40334b7" translate="yes" xml:space="preserve">
          <source>Number of point pairs to return. The default value is 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551051df538e93f92abd0e4d70bab9ebd0a9979c" translate="yes" xml:space="preserve">
          <source>Number of points along transformation axis in the input to use. If &lt;code&gt;n&lt;/code&gt; is smaller than the length of the input, the input is cropped. If it is larger, the input is padded with zeros. If &lt;code&gt;n&lt;/code&gt; is not given, the length of the input along the axis specified by &lt;code&gt;axis&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1a0e92249dd7ea05411a06963194533d7918c7" translate="yes" xml:space="preserve">
          <source>Number of points in the output window. If zero or less, an empty array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e81bd3a9cf8f13e4e087ed6b9ef489d7061b0e" translate="yes" xml:space="preserve">
          <source>Number of random bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53975b0c071abdcd5131d1862834f5b08e87e264" translate="yes" xml:space="preserve">
          <source>Number of rows (and columns) in &lt;code&gt;n&lt;/code&gt; x &lt;code&gt;n&lt;/code&gt; output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba04adb79f4c3bf3f6caa8c01f8f929a74cbf8dc" translate="yes" xml:space="preserve">
          <source>Number of rows in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9371726ac94e49726635264017eacaef06541bb1" translate="yes" xml:space="preserve">
          <source>Number of rows in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c00ebdcc34147d25718afd7dbd46f5e2d21937" translate="yes" xml:space="preserve">
          <source>Number of sample points and weights. It must be &amp;gt;= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f13e51c56d80088f553a736484516fc0a17451a" translate="yes" xml:space="preserve">
          <source>Number of samples to generate. Default is 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b944ba1a6a786da2de285aee44ef64df7a0334c1" translate="yes" xml:space="preserve">
          <source>Number of samples to generate. Default is 50. Must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8477012cd08123303aba533415512dffd6caae6" translate="yes" xml:space="preserve">
          <source>Number of times the array is rotated by 90 degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c5f5739f871a7eba2351b02c5057ed709b7574" translate="yes" xml:space="preserve">
          <source>Number of times to jump the state of the bit generator returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612ea9a9fedd365d5dfed6db5fa33a0bb992e5bc" translate="yes" xml:space="preserve">
          <source>Number of values padded to the edges of each axis. ((before_1, after_1), &amp;hellip; (before_N, after_N)) unique pad widths for each axis. ((before, after),) yields same before and after pad for each axis. (pad,) or int is a shortcut for before = after = pad width for all axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f1fbd39c40968c76006276fee34189d50015b9" translate="yes" xml:space="preserve">
          <source>Number of ways to make a bad selection. Must be nonnegative and less than 10**9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbe2e90660c2e70b194a26e014711298205f94b" translate="yes" xml:space="preserve">
          <source>Number of ways to make a bad selection. Must be nonnegative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0216b57e4ddf8587c6f571d9e2b9562f1ca140" translate="yes" xml:space="preserve">
          <source>Number of ways to make a good selection. Must be nonnegative and less than 10**9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a90f9a528b46c6111a9dd205b3c9485855546b" translate="yes" xml:space="preserve">
          <source>Number of ways to make a good selection. Must be nonnegative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ef4addb29288d67ee3b4225212bd0c25d2c82e" translate="yes" xml:space="preserve">
          <source>Number of zeros padded on the left. Default is 0 (no padding).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42ce792573d252e0e5bfedf479c34b63dd69907" translate="yes" xml:space="preserve">
          <source>Number of zeros to append to &lt;code&gt;x1&lt;/code&gt;. Has to be non-negative. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48744031d20b47daf05a16a7cf85445cecfa69bb" translate="yes" xml:space="preserve">
          <source>Number(s) to append at the end of the returned differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b058e82a0ebd1af4fdfdc76f108d0c56ee2817ee" translate="yes" xml:space="preserve">
          <source>Number(s) to prepend at the beginning of the returned differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef085dad0112ed12e20c9ac768d68c02abb5c39" translate="yes" xml:space="preserve">
          <source>Numerator degrees of freedom, must be &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915427ef41bad72baf07ece61495d7f8349cc6ce" translate="yes" xml:space="preserve">
          <source>Numerator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725a001aa87d95c548766f8d2dce89bbb2b6023f" translate="yes" xml:space="preserve">
          <source>Numeric Compatibility: If you used old typecode characters in your Numeric code (which was never recommended), you will need to change some of them to the new characters. In particular, the needed changes are &lt;code&gt;c -&amp;gt; S1&lt;/code&gt;, &lt;code&gt;b -&amp;gt; B&lt;/code&gt;, &lt;code&gt;1 -&amp;gt; b&lt;/code&gt;, &lt;code&gt;s -&amp;gt; h&lt;/code&gt;, &lt;code&gt;w -&amp;gt;
H&lt;/code&gt;, and &lt;code&gt;u -&amp;gt; I&lt;/code&gt;. These changes make the type character convention more consistent with other Python modules such as the &lt;a href=&quot;https://docs.python.org/dev/library/struct.html#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb439f202c0c83a4476c0493068474885a0d04ea" translate="yes" xml:space="preserve">
          <source>Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. &lt;code&gt;U+2155,
VULGAR FRACTION ONE FIFTH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5636617d28e515f0b65e76f0f4004b94b623c0" translate="yes" xml:space="preserve">
          <source>Numerical negative, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4370eb3bfbe7ac1a30c0f9e9ca59a934adb66660" translate="yes" xml:space="preserve">
          <source>Numerical operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42eddc11b63fd08bdfea69adf3f079710df9af97" translate="yes" xml:space="preserve">
          <source>Numerical operations can be easily performed without worrying about missing values, dividing by zero, square roots of negative numbers, etc.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4259f28206bfbca56d0e23c019e2fc661e9b9dc6" translate="yes" xml:space="preserve">
          <source>Numerical positive, element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d7754f5a98c840b507e69ac61f5c2741e65c9f" translate="yes" xml:space="preserve">
          <source>Numerical ranges</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6466751f790e1e415eaeb56dd6736b61b1be5ff5" translate="yes" xml:space="preserve">
          <source>Numpy Alignment Goals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfbe596058b381b5d62de809d86afe7e25ae53f" translate="yes" xml:space="preserve">
          <source>Numpy uses two different forms of alignment to achieve these goals: &amp;ldquo;True alignment&amp;rdquo; and &amp;ldquo;Uint alignment&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964f31d6716dc00a266686a77065b8428590080d" translate="yes" xml:space="preserve">
          <source>Numpy&amp;rsquo;s random number routines produce pseudo random numbers using combinations of a &lt;code&gt;BitGenerator&lt;/code&gt; to create sequences and a &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; to use those sequences to sample from different statistical distributions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc75cd71fe8ecc45d16e8fbe4ca608d05d1efe0" translate="yes" xml:space="preserve">
          <source>O(n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd32e6ddbd41be3c5a4eb16b6f1ed3f8efca53a5" translate="yes" xml:space="preserve">
          <source>O(n*log(n))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ac5f452cfa676b59863240cc6b58ed94146182" translate="yes" xml:space="preserve">
          <source>O(n^2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fce725b9aa55e80045f38a3d07a2d5daf8ad25e" translate="yes" xml:space="preserve">
          <source>OWNDATA / O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cbefcb956b9d9d63f0f7b3f93654f940febe59" translate="yes" xml:space="preserve">
          <source>Object (i.e. the memory contains a pointer to &lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3760fc40824fa6cae9e794ba9f7b99a3316407ab" translate="yes" xml:space="preserve">
          <source>Object that defines the index or indices before which &lt;code&gt;values&lt;/code&gt; is inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05ef3a802418a7aebbd13573f51be0ead5f4193" translate="yes" xml:space="preserve">
          <source>Object to be converted to a data type object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8900e78cbf680bcf40ca195f2953f79bcfe04f2" translate="yes" xml:space="preserve">
          <source>Observe that we are using the dataptr array inside the iterator, not copying the values to a local temporary. This is possible because when &lt;code&gt;iternext()&lt;/code&gt; is called, these pointers will be overwritten with fresh values, not incrementally updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b6a1c7c2ab92717708ab52dfb304953f89b662" translate="yes" xml:space="preserve">
          <source>Observe that with the default of keeping native memory order, the iterator is able to provide a single one-dimensional chunk, whereas when forcing Fortran order, it has to provide three chunks of two elements each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8a40208cbec6893957fea3d09da8c32d4bb67b" translate="yes" xml:space="preserve">
          <source>Of Chebyshev series coefficients representing the quotient and remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a193973a1a38f794d62d2292b358ed61a158d4" translate="yes" xml:space="preserve">
          <source>Of Chebyshev series coefficients representing their difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f11800879153b66dc0982f5c4e19a52fd99bfd" translate="yes" xml:space="preserve">
          <source>Of Chebyshev series coefficients representing their product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e744292f68f81ff06c4af2891c2284d51276990" translate="yes" xml:space="preserve">
          <source>Of Hermite series coefficients representing the quotient and remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e73a174e70afa8021e3a5b69b172f5340b60a0" translate="yes" xml:space="preserve">
          <source>Of Hermite series coefficients representing their difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584dca0bbf2ee8dea79e52251025d455fc466309" translate="yes" xml:space="preserve">
          <source>Of Hermite series coefficients representing their product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f835afbe8ca3fee3a7aaf7264b53bfe89607c7f1" translate="yes" xml:space="preserve">
          <source>Of Laguerre series coefficients representing the quotient and remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b47b338ded7c0b1d451aae2b6b202ac054bd26" translate="yes" xml:space="preserve">
          <source>Of Laguerre series coefficients representing their difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b96161c3659cfd1e35cc2549dc17860026b7cdc" translate="yes" xml:space="preserve">
          <source>Of Laguerre series coefficients representing their product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7f06a962c25e759bd9ef64c710ec6053768d88" translate="yes" xml:space="preserve">
          <source>Of Legendre series coefficients representing the quotient and remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3059e37623b23a53a523c2b1352662c0102ac1da" translate="yes" xml:space="preserve">
          <source>Of Legendre series coefficients representing their difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50248795d9f87718e76bae1fc0c734509f84b250" translate="yes" xml:space="preserve">
          <source>Of Legendre series coefficients representing their product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8427b6e14c2b373d5a6dab581028bfc5f363679" translate="yes" xml:space="preserve">
          <source>Of coefficient series representing the quotient and remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d290318bfec96b6b8a0b5657cb6aa25c8656f248" translate="yes" xml:space="preserve">
          <source>Of coefficients representing their difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3f315ee6b4ab53b8b92ba8326227f97899e80b" translate="yes" xml:space="preserve">
          <source>Of course, a test can be unconditionally skipped or marked as a known failure by using &lt;code&gt;skip&lt;/code&gt; or &lt;code&gt;xfail&lt;/code&gt; without argument, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8a45899d21a287f8cee5fcbf7d53b28d2a2524" translate="yes" xml:space="preserve">
          <source>Of the coefficients of their product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609c29eaa3c81a7bde19a799569654e9420a8d39" translate="yes" xml:space="preserve">
          <source>Offset into a memmap:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc2c6922816779fd173b29551f1ab7c3175a4b8" translate="yes" xml:space="preserve">
          <source>Offset is limited to C int, which is signed and usually 32 bits. If present, the optional title can be any object (if it is a string or unicode then it will also be a key in the fields dictionary, otherwise it&amp;rsquo;s meta-data). Notice also that the first two elements of the tuple can be passed directly as arguments to the &lt;code&gt;ndarray.getfield&lt;/code&gt; and &lt;code&gt;ndarray.setfield&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ce02382c3cd06f8561677ae11ec555fdb1fe4e" translate="yes" xml:space="preserve">
          <source>Offset of array data in buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680177996996fd2c23e4d0d5181bef8478a843b3" translate="yes" xml:space="preserve">
          <source>Offset of the diagonal from the main diagonal. Can be both positive and negative. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6b5a41310e8f5b4f7075c43a048e4d2e50484a" translate="yes" xml:space="preserve">
          <source>Offset of the diagonal from the main diagonal. Can be positive or negative. Defaults to main diagonal (0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcd2ae12c66734a66a7aa79ae569a447152e17b" translate="yes" xml:space="preserve">
          <source>Offset position in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5143224a659eeda117fd7431883f438f099ac14" translate="yes" xml:space="preserve">
          <source>Offsets in bytes, here 0 and 25:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967a38eb8129ad7778f2c9f5678f5fdf3c82cadb" translate="yes" xml:space="preserve">
          <source>Often it is preferable to use a boolean mask. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f9c3f125b2ae3755f9cc2e88d97945e0b2e6b1" translate="yes" xml:space="preserve">
          <source>Old, no conjugate, version of correlate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b35a56584d02836f725dd51b4643aaa3081190" translate="yes" xml:space="preserve">
          <source>Older Equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950780760d17e16ea15a84017774640eae55ce02" translate="yes" xml:space="preserve">
          <source>On Unix-like machines, reads from &lt;code&gt;/dev/urandom&lt;/code&gt;. On Windows machines reads from the RSA algorithm provided by the cryptographic service provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3188b9edd47b7b8e155f7d62759b49e4bbd63c" translate="yes" xml:space="preserve">
          <source>On array access use the &lt;code&gt;f-&amp;gt;getitem&lt;/code&gt; function pointer instead of the standard conversion to an array scalar. Must use if you don&amp;rsquo;t define an array scalar to go along with the data-type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcefd1cec20f7966d92a38bf6e10deb907560ec" translate="yes" xml:space="preserve">
          <source>On compilers which support a #warning mechanism, NumPy issues a compiler warning if you do not define the symbol NPY_NO_DEPRECATED_API. This way, the fact that there are deprecations will be flagged for third-party developers who may not have read the release notes closely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b6987bb053c195d4d4a88861df5cc0bec8c735" translate="yes" xml:space="preserve">
          <source>On the other hand, coolhelper.c would contain at the top:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8085f065b43ca0612f8f5a0dd702c78428f8a7" translate="yes" xml:space="preserve">
          <source>On this machine, building the .pyx file into a module looked like the following, but you may have to find some Cython tutorials to tell you the specifics for your system configuration.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a506ebe097fd976b21e552ba29fd40b62947df8" translate="yes" xml:space="preserve">
          <source>Once a busdaycalendar object is created, the weekmask and holidays cannot be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d8ca7f94183ec448b711283a3a7fa64f6c8872" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;scipy/xxx/tests/test_yyy.py&lt;/code&gt; is written, its possible to run the tests by going to the &lt;code&gt;tests/&lt;/code&gt; directory and typing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac70209362afce77775660280fe98f52f86f930f" translate="yes" xml:space="preserve">
          <source>Once the SeedSequence is instantiated, you can call the &lt;a href=&quot;numpy.random.seedsequence.generate_state#numpy.random.SeedSequence.generate_state&quot;&gt;&lt;code&gt;generate_state&lt;/code&gt;&lt;/a&gt; method to get an appropriately sized seed. Calling &lt;a href=&quot;numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt;&lt;code&gt;spawn(n)&lt;/code&gt;&lt;/a&gt; will create &lt;code&gt;n&lt;/code&gt; SeedSequences that can be used to seed independent BitGenerators, i.e. for different threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231d4308334f05ae25082dce13bc3cf1e18cdbf8" translate="yes" xml:space="preserve">
          <source>Once the iterator is prepared for iteration (after a reset if &lt;code&gt;NPY_DELAY_BUFALLOC&lt;/code&gt; was used), call this to get the strides which may be used to select a fast inner loop function. For example, if the stride is 0, that means the inner loop can always load its value into a variable once, then use the variable throughout the loop, or if the stride equals the itemsize, a contiguous version for that operand may be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77517b16ad949bec662df3d2780dff01b3a28d3c" translate="yes" xml:space="preserve">
          <source>One Loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8524b74ddf89508f43aa1069be40f8c206f86f89" translate="yes" xml:space="preserve">
          <source>One can also instantiate &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; directly with a &lt;code&gt;BitGenerator&lt;/code&gt; instance. To use the older &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt; algorithm, one can instantiate it directly and pass it to &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3340151bf466504ea342e74247a72d1486385a" translate="yes" xml:space="preserve">
          <source>One can use &lt;code&gt;PyUFunc_FromFuncAndDataAndSignature&lt;/code&gt; to declare a more general ufunc. The argument list is the same as &lt;code&gt;PyUFunc_FromFuncAndData&lt;/code&gt;, with an additional argument specifying the signature as C string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d4e9404ec123b91b7f0181eb9f23e04fe59bd2" translate="yes" xml:space="preserve">
          <source>One deviation from the current behavior of &lt;code&gt;__array_ufunc__&lt;/code&gt; is that NumPy will only call &lt;code&gt;__array_function__&lt;/code&gt; on the &lt;em&gt;first&lt;/em&gt; argument of each unique type. This matches Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__ror__&quot;&gt;rule for calling reflected methods&lt;/a&gt;, and this ensures that checking overloads has acceptable performance even when there are a large number of overloaded arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47e08224aaf497fafd8b89783b8a17e95a05214" translate="yes" xml:space="preserve">
          <source>One dimensional array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfcf4855e8547b3c2c018358506a526943e1c9a" translate="yes" xml:space="preserve">
          <source>One fundamental aspect of the ndarray is that an array is seen as a &amp;ldquo;chunk&amp;rdquo; of memory starting at some location. The interpretation of this memory depends on the stride information. For each dimension in an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16275c9ae04e235f8070983e66409df72503b036" translate="yes" xml:space="preserve">
          <source>One is returned for slices that are all-NaN or empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2800fbab71db8fc98d5d383e0fd87d0d933e41f" translate="yes" xml:space="preserve">
          <source>One of &amp;ldquo;always&amp;rdquo;, &amp;ldquo;once&amp;rdquo;, &amp;ldquo;module&amp;rdquo;, or &amp;ldquo;location&amp;rdquo;. Analogous to the usual warnings module filter mode, it is useful to reduce noise mostly on the outmost level. Unsuppressed and unrecorded warnings will be forwarded based on this rule. Defaults to &amp;ldquo;always&amp;rdquo;. &amp;ldquo;location&amp;rdquo; is equivalent to the warnings &amp;ldquo;default&amp;rdquo;, match by exact location the warning warning originated from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a089b8e63dd4e8eb30432f942f75f4b932e1fd5a" translate="yes" xml:space="preserve">
          <source>One of None, &amp;lsquo;auto&amp;rsquo;, or a &lt;a href=&quot;../arrays.datetime#arrays-dtypes-dateunits&quot;&gt;datetime unit&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39ed1de2c370ff6c78c1184ddb58d4c6a6a7345" translate="yes" xml:space="preserve">
          <source>One of the built-in data-types, the void data-type allows for arbitrary structured types containing 1 or more fields as elements of the array. A field is simply another data-type object along with an offset into the current structured type. In order to support arbitrarily nested fields, several recursive implementations of data-type access are implemented for the void type. A common idiom is to cycle through the elements of the dictionary and perform a specific operation based on the data-type object stored at the given offset. These offsets can be arbitrary numbers. Therefore, the possibility of encountering mis- aligned data must be recognized and taken into account if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8bb917d30f8e918beefbd1feb7c9a171676de0" translate="yes" xml:space="preserve">
          <source>One of the following string values or a user supplied function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3967d3ba22f4ac7f4c1ab09bac9634bd847ca9c" translate="yes" xml:space="preserve">
          <source>One of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb28eadbd381d78c0578e9d33fcdb60f914be747" translate="yes" xml:space="preserve">
          <source>One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have three or more dimensions are preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e8ba24447e6b42366fd8b8bb4f9518361510cc" translate="yes" xml:space="preserve">
          <source>One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have two or more dimensions are preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ac146eea9a6c289d467e482f8a257b9519c8d8" translate="yes" xml:space="preserve">
          <source>One or more input arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bd59e7480ae8ee0b30eea6aab25ec69688345a" translate="yes" xml:space="preserve">
          <source>One thing to watch out for is conversions back to the original data type when using a read-write or write-only operand. A common case is to implement the inner loop in terms of 64-bit floats, and use &amp;lsquo;same_kind&amp;rsquo; casting to allow the other floating-point types to be processed as well. While in read-only mode, an integer array could be provided, read-write mode will raise an exception because conversion back to the array would violate the casting rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc36f9c20276e56c093db5e52fdeb366528fc58" translate="yes" xml:space="preserve">
          <source>One vector with dimension 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99918e2f05caf6cd6ec60dc844a473737b719247" translate="yes" xml:space="preserve">
          <source>One very nice feature of testing is allowing easy testing across a range of parameters - a nasty problem for standard unit tests. Use the &lt;code&gt;dec.paramaterize&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd980620fd6bb0d38c87e52f67df303553acf634" translate="yes" xml:space="preserve">
          <source>One-character strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5131dc464a794c785bc59aee87c51ca82227aaed" translate="yes" xml:space="preserve">
          <source>One-dimensional linear interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd572fc9dc51ce4fd31312f0bb79afc0c6e4432a" translate="yes" xml:space="preserve">
          <source>One-dimensional, two-dimensional, three-dimensional and four-dimensional arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7777f0a5babbc2cd6ca70c30ebaa80abc0442d" translate="yes" xml:space="preserve">
          <source>One-input, one-output, and two-input, one-output core 1-d functions for the &lt;a href=&quot;c-api.dtype#c.NPY_OBJECT&quot;&gt;&lt;code&gt;NPY_OBJECT&lt;/code&gt;&lt;/a&gt; data type. These functions handle reference count issues and return early on error. The actual function to call is &lt;em&gt;func&lt;/em&gt; and it must accept calls with the signature &lt;code&gt;(PyObject*)
(PyObject*)&lt;/code&gt; for &lt;a href=&quot;#c.PyUFunc_O_O&quot;&gt;&lt;code&gt;PyUFunc_O_O&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;(PyObject*)(PyObject *,
PyObject *)&lt;/code&gt; for &lt;a href=&quot;#c.PyUFunc_OO_O&quot;&gt;&lt;code&gt;PyUFunc_OO_O&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd47ce11e1fa9754d28954cfcd5881bbc1273cc" translate="yes" xml:space="preserve">
          <source>Ones and zeros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb940bbbd02e7c31b4ae50aac2139276e3822e9f" translate="yes" xml:space="preserve">
          <source>Ones are returned for slices that are all-NaN or empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1addd7b3649a3c34fc344240c254d5a275033117" translate="yes" xml:space="preserve">
          <source>Only accepts 1-D arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde044c10adb7133cf0f3ad6c4862788f16172f1" translate="yes" xml:space="preserve">
          <source>Only accepts 2-D arrays at most.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afe5b0a4d7cbceb0c653cfc81e1d454858d38ee" translate="yes" xml:space="preserve">
          <source>Only allow casts which will not cause values to be rounded, truncated, or otherwise changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3582e0ecb066430ad3be065ab374165ffa609f3" translate="yes" xml:space="preserve">
          <source>Only allow identical types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603519900a2e75cc37ace5a2f71e7c45cdb8b832" translate="yes" xml:space="preserve">
          <source>Only an integer decimal number can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae35f53e6308f43d551d7ad3a2026ad04e15e23" translate="yes" xml:space="preserve">
          <source>Only contiguous arrays (data elements consecutive in memory) can be resized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e992238c6b6cf34041def067b036cda1362cc0ed" translate="yes" xml:space="preserve">
          <source>Only integer and boolean types are handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce974e565e6e54262541b566a10f88e312bc9462" translate="yes" xml:space="preserve">
          <source>Only integer and boolean types are handled. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e46a9dd5cfa9d4541737997e2a69c528376429" translate="yes" xml:space="preserve">
          <source>Only return the middle values of the convolution. Contains boundary effects, where zeros are taken into account:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c646c2238b413bc43301092aedff89ef1f867724" translate="yes" xml:space="preserve">
          <source>Only returned if &lt;code&gt;retstep&lt;/code&gt; is True</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e429b326ee86d54ede5217418c8826c4e767d391" translate="yes" xml:space="preserve">
          <source>Only the WRITEBACKIFCOPY, UPDATEIFCOPY, WRITEABLE, and ALIGNED flags can be changed by the user, via direct assignment to the attribute or dictionary entry, or by calling &lt;a href=&quot;numpy.ndarray.setflags#numpy.ndarray.setflags&quot;&gt;&lt;code&gt;ndarray.setflags&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8823766a1477c99c5d6107c4aad19cb79aa3fe" translate="yes" xml:space="preserve">
          <source>Only the WRITEBACKIFCOPY, UPDATEIFCOPY, WRITEABLE, and ALIGNED flags can be changed by the user, via direct assignment to the attribute or dictionary entry, or by calling &lt;code&gt;ndarray.setflags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14128c80bfe87033c27d2c8a406f61e4d63d6d90" translate="yes" xml:space="preserve">
          <source>Only the memory bounds of a and b are checked by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a133ec60f230a1d745372bd29522c9608116df62" translate="yes" xml:space="preserve">
          <source>Only the memory bounds of a and b are checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2828ce3af0ec6cf22589ee67ae2d61139d97726f" translate="yes" xml:space="preserve">
          <source>Only used in &lt;a href=&quot;#c.PyArray_CheckFromAny&quot;&gt;&lt;code&gt;PyArray_CheckFromAny&lt;/code&gt;&lt;/a&gt; to over-ride the byteorder of the data-type object passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c499db64f45476fb60b7a934c6b0e9eae67b09aa" translate="yes" xml:space="preserve">
          <source>Only useful in forcing objects in object arrays on Python 3 to be pickled in a Python 2 compatible way. If &lt;code&gt;fix_imports&lt;/code&gt; is True, pickle will try to map the new Python 3 names to the old module names used in Python 2, so that the pickle data stream is readable with Python 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be2bb2a7cf937c49df50863791a7e2b8e618032" translate="yes" xml:space="preserve">
          <source>Only useful when loading Python 2 generated pickled files on Python 3, which includes npy/npz files containing object arrays. If &lt;code&gt;fix_imports&lt;/code&gt; is True, pickle will try to map the old Python 2 names to the new names used in Python 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ffc3b0833d539654e5ad58b641d1cef1d2a7bc" translate="yes" xml:space="preserve">
          <source>Open and return file-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7abb02e2506f465eda9d56007ed5a7e2b0bd98" translate="yes" xml:space="preserve">
          <source>Open existing file for reading and writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd185b75f1b59e945b739489c944a7512ff51fd8" translate="yes" xml:space="preserve">
          <source>Open existing file for reading only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96179d121ec9cf7124c6c2755cce0f345158530b" translate="yes" xml:space="preserve">
          <source>Open file object or filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f0b5cd06c0857fa1094ec1c01c44ffc62a3722" translate="yes" xml:space="preserve">
          <source>Open text file with given encoding. The default encoding will be what &lt;a href=&quot;https://docs.python.org/dev/library/io.html#io.open&quot;&gt;&lt;code&gt;io.open&lt;/code&gt;&lt;/a&gt; uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9413e771602d364356d827e1ba5484c54b2980c" translate="yes" xml:space="preserve">
          <source>OpenGL Half Float Pixel Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba63388b76fb2354877e0a00827567f3e7dd9beb" translate="yes" xml:space="preserve">
          <source>Operations on masked arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f32163af2ed7163e716ed54ad45e1abac6d362" translate="yes" xml:space="preserve">
          <source>Operations on masks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0563fccbe64a1dfd8037f51262c4fd0530cd94" translate="yes" xml:space="preserve">
          <source>Oppenheim, A.V., and R.W. Schafer. Discrete-Time Signal Processing. Upper Saddle River, NJ: Prentice-Hall, 1999, pp. 468-471.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6761ca91dcee4424a2851cbb50045197345e3f" translate="yes" xml:space="preserve">
          <source>Optimal &lt;a href=&quot;#numpy.einsum&quot;&gt;&lt;code&gt;einsum&lt;/code&gt;&lt;/a&gt; (best usage pattern in some use cases): ~110ms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8be51f4f30d13faa44a6de0502a01108e24089" translate="yes" xml:space="preserve">
          <source>Optional &lt;code&gt;dtype&lt;/code&gt; argument that accepts &lt;code&gt;np.float32&lt;/code&gt; or &lt;code&gt;np.float64&lt;/code&gt; to produce either single or double prevision uniform random variables for select distributions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12126826f76c7f0467a4ffb91534c1d1ec680e4d" translate="yes" xml:space="preserve">
          <source>Optional &lt;code&gt;out&lt;/code&gt; argument that allows existing arrays to be filled for select distributions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01273e336bfe0a367b1748fe162d52aafeac5e31" translate="yes" xml:space="preserve">
          <source>Optional arguments &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are interpreted as in slice notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0126e97a8970efb03fe063de9451fa05d68f3f" translate="yes" xml:space="preserve">
          <source>Optional arguments &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are interpreted as slice notation to specify the range in which to count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd32917dfd5f66fb159ebdd50889a1b4bed7749" translate="yes" xml:space="preserve">
          <source>Optional array of integer indices that sort array a into ascending order. They are typically the result of argsort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6024e1a91279063fb7e7889daf1b6251045d44cb" translate="yes" xml:space="preserve">
          <source>Optional character strings placed as the first element of the index expression can be used to change the output. The strings &amp;lsquo;r&amp;rsquo; or &amp;lsquo;c&amp;rsquo; result in matrix output. If the result is 1-D and &amp;lsquo;r&amp;rsquo; is specified a 1 x N (row) matrix is produced. If the result is 1-D and &amp;lsquo;c&amp;rsquo; is specified, then a N x 1 (column) matrix is produced. If the result is 2-D then both provide the same matrix result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7999c926f6055eca464cd4cd0189771a96574e" translate="yes" xml:space="preserve">
          <source>Optional keyword arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb0ace95d7206d55e77238265b3a66f3d4c761a" translate="yes" xml:space="preserve">
          <source>Optionally Scipy-accelerated routines (&lt;code&gt;numpy.dual&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a841da812f87c91971335f8748cac5433932b134" translate="yes" xml:space="preserve">
          <source>Optionally Scipy-accelerated routines (numpy.dual)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19671beddc2d78364aeb52dc43b5315cb3a7f11" translate="yes" xml:space="preserve">
          <source>Or a non uniform one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7ef857cc1fde38181b075860bab6fb0bd52da8" translate="yes" xml:space="preserve">
          <source>Or as a decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9b2d57a173de94af257f54a0e80ee07c9cf0f4" translate="yes" xml:space="preserve">
          <source>Or for a vectorized convolution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d67dbe290ba345acdc7d9f67357d1c9ca90c84" translate="yes" xml:space="preserve">
          <source>Or if you add &lt;code&gt;scipy/xxx/tests/&lt;/code&gt; to the Python path, you could run the tests interactively in the interpreter like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002d2f07f89a6dd55f4dbdba5b6f9608201e1d77" translate="yes" xml:space="preserve">
          <source>Or select specific elements to include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c3ddf3aab6700d937d53be3d5b45771f361386" translate="yes" xml:space="preserve">
          <source>Or wish to add a constant to all negative elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed306dae12d1d39fff858942862ae59bbc4399d" translate="yes" xml:space="preserve">
          <source>Or without &lt;code&gt;np.ix_&lt;/code&gt; (compare the integer array examples):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f93044bc0a408687e6b01e33395f89ff4d70a4" translate="yes" xml:space="preserve">
          <source>Order of differentiation (default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788c2fe754b6f79f4fc9b0b665993b8ce7234c19" translate="yes" xml:space="preserve">
          <source>Order of integration, must be positive. (Default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ad4bbf3f62befe7c196979bd8380406f97a913" translate="yes" xml:space="preserve">
          <source>Order of the antiderivative. (Default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ecce42b9cac400a1b6d5085507c247c9b755ae" translate="yes" xml:space="preserve">
          <source>Order of the data for multidimensional arrays: C, Fortran, or the same as for the original array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c001b919a2f52d0fbb20d49a83e3f37a24b3cfa" translate="yes" xml:space="preserve">
          <source>Order of the data item in the copy. Default is &amp;lsquo;C&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f142fafd57c235130d4ec687878d429370c853" translate="yes" xml:space="preserve">
          <source>Order of the norm (see table under &lt;code&gt;Notes&lt;/code&gt;). inf means numpy&amp;rsquo;s &lt;code&gt;inf&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accc210a4b093569ae3685cc2f2612720dea8f1e" translate="yes" xml:space="preserve">
          <source>Order of the norm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a7abb1120bc925fdb57310f93f2fa464fdc7ae" translate="yes" xml:space="preserve">
          <source>Order of the powers of the columns. If True, the powers increase from left to right, if False (the default) they are reversed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad696b93bae4cfca8937f28f2148899d7322e0a" translate="yes" xml:space="preserve">
          <source>Order statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422e3f686c9f8818631b86e59adef2a48327ba9b" translate="yes" xml:space="preserve">
          <source>Ordered list of field names, or &lt;code&gt;None&lt;/code&gt; if there are no fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d44d98096c18e71b1176f355d8b6f0c7c16e1d1" translate="yes" xml:space="preserve">
          <source>Ordinary inner product for vectors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191b600520d98586a88c24fcdd4e2889be08fced" translate="yes" xml:space="preserve">
          <source>Ordinary inner product of vectors for 1-D arrays (without complex conjugation), in higher dimensions a sum product over the last axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7dc7265e25691a9373e1ca80276306cb88c7ca" translate="yes" xml:space="preserve">
          <source>Ordinate or &amp;ldquo;dependent variable&amp;rdquo; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7ff7749bfea5af2d2c09b7c86b2dbdfee56f2a" translate="yes" xml:space="preserve">
          <source>Ordinate or &amp;ldquo;dependent variable&amp;rdquo; values. If &lt;code&gt;b&lt;/code&gt; is two-dimensional, the least-squares solution is calculated for each of the &lt;code&gt;K&lt;/code&gt; columns of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedfebf0ecf8e3c63711ee41881ab8ce7f77971c" translate="yes" xml:space="preserve">
          <source>Original Source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d77937700b7f6304cd9cc6f6f114b310986845" translate="yes" xml:space="preserve">
          <source>Original positions of the axes to move. These must be unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d7150cfcec917eee04da671286a02a27c1a6b8" translate="yes" xml:space="preserve">
          <source>Other (void * &amp;ndash; each item is a fixed-size chunk of memory)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16863278e548d66fae935c08b81b275cea6f9914" translate="yes" xml:space="preserve">
          <source>Other C-Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5164a0d79a937ac6a201b20d3ffe5ea4af04bc1" translate="yes" xml:space="preserve">
          <source>Other Common Types: bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a529214aef07d296fc3d4d086152694a3e98921" translate="yes" xml:space="preserve">
          <source>Other Common Types: complex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faa321ae463cf423d057b0fb19c09b0142f3c2a" translate="yes" xml:space="preserve">
          <source>Other Parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a704886f69c3b776903fa1eae3b74661fb05227" translate="yes" xml:space="preserve">
          <source>Other Polynomial Constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407cab4f45e3f1e45a4d3d8364006412c6cfc5cd" translate="yes" xml:space="preserve">
          <source>Other Situations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d042bb243a9d93f7d217c6e5a0c1a49c971c43e7" translate="yes" xml:space="preserve">
          <source>Other attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84477e1de2ec14b541d8664b31b8881de493393" translate="yes" xml:space="preserve">
          <source>Other axes remain in their original order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767a6c3afafd0ae34a74385fb566d6175cb96b17" translate="yes" xml:space="preserve">
          <source>Other constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4b1121b10e2ed9c2b0a79e79f85e8ad19d33ae" translate="yes" xml:space="preserve">
          <source>Other conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c0a3787c5b36b4fe5b178d91a655c6a5cbdf6b" translate="yes" xml:space="preserve">
          <source>Other files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12e322f5b694198963cd183428de579cc666876" translate="yes" xml:space="preserve">
          <source>Other functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b002f2786124a662470fe9d1d4b2061560ed34" translate="yes" xml:space="preserve">
          <source>Other keys that can be used to set a group of types at once are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6b0460067623519cc565a472bd480c100039cf" translate="yes" xml:space="preserve">
          <source>Other modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56243f47f05b7964d5f4fc1a7a1d5dc330f1664" translate="yes" xml:space="preserve">
          <source>Other special functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80ae13d27005970d36a64205ad27c701906310c" translate="yes" xml:space="preserve">
          <source>Other useful related constants are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01dc3acd71c35a47919d5dc18e67e38bbe2ca711" translate="yes" xml:space="preserve">
          <source>Otherwise we recommend simply learning to reverse the usual order of indices when accessing elements of an array. Granted, it goes against the grain, but it is more in line with Python semantics and the natural order of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b9f8169fedb0ad1c9be824eca55314fa16d94e" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;a href=&quot;numpy.min_scalar_type#numpy.min_scalar_type&quot;&gt;&lt;code&gt;min_scalar_type&lt;/code&gt;&lt;/a&gt; is called on each array, and the resulting data types are all combined with &lt;a href=&quot;numpy.promote_types#numpy.promote_types&quot;&gt;&lt;code&gt;promote_types&lt;/code&gt;&lt;/a&gt; to produce the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae9e7a3585b77fe783d86ad593d20c5ecc3f354" translate="yes" xml:space="preserve">
          <source>Otherwise, PyArray_MinScalarType is called on each array, and the resulting data types are all combined with &lt;a href=&quot;#c.PyArray_PromoteTypes&quot;&gt;&lt;code&gt;PyArray_PromoteTypes&lt;/code&gt;&lt;/a&gt; to produce the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4eb13334b28d2a094a12f8ab9ba2e910911e99a" translate="yes" xml:space="preserve">
          <source>Our goal is that every module and package in SciPy and NumPy should have a thorough set of unit tests. These tests should exercise the full functionality of a given routine as well as its robustness to erroneous or unexpected input arguments. Long experience has shown that by far the best time to write the tests is before you write or change the code - this is &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;test-driven development&lt;/a&gt;. The arguments for this can sound rather abstract, but we can assure you that you will find that writing the tests first leads to more robust and better designed code. Well-designed tests with good coverage make an enormous difference to the ease of refactoring. Whenever a new bug is found in a routine, you should write a new test for that specific case and add it to the test suite to prevent that bug from creeping back in unnoticed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154d74419b6aca893341269b8ba48a9e26a16006" translate="yes" xml:space="preserve">
          <source>Out has the same shape as &lt;code&gt;x&lt;/code&gt;. Its real part is in &lt;code&gt;[-pi/2, pi/2]&lt;/code&gt; (&lt;code&gt;arctan(+/-inf)&lt;/code&gt; returns &lt;code&gt;+/-pi/2&lt;/code&gt;). This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851f8da769fc08fe920a7a332149d07bd3e21638" translate="yes" xml:space="preserve">
          <source>Out of the box, &lt;code&gt;numpy.i&lt;/code&gt; provides typemaps that support conversion between NumPy arrays and C arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99f04d1fc495fb457ec6ab4bb045f1b70e94783" translate="yes" xml:space="preserve">
          <source>Outer Product Iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ee0caa49ecd5d48b8b76e247cdb1d691fc307b" translate="yes" xml:space="preserve">
          <source>Outer product, same as &lt;code&gt;outer(x, y)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31dd41cdb77529134dabee0a5149b6913233527" translate="yes" xml:space="preserve">
          <source>Outer product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8eb7f250550fb11f31a150896a2c233c22e5afb" translate="yes" xml:space="preserve">
          <source>Output Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69721e85622681a00d5e83b618b8602f51f2805c" translate="yes" xml:space="preserve">
          <source>Output a 3x8000 array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e70b270c18c83f26e6230a7a984b1fb40cee94" translate="yes" xml:space="preserve">
          <source>Output argument. This must have the exact kind that would be returned if it was not used. In particular, it must have the right type, must be C-contiguous, and its dtype must be the dtype that would be returned for &lt;code&gt;dot(a,b)&lt;/code&gt;. This is a performance feature. Therefore, if these conditions are not met, an exception is raised, instead of attempting to be flexible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f12acadc64d21e2feac22d1a1b4692fb105ee3" translate="yes" xml:space="preserve">
          <source>Output array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89327ce1837e2c79277b79c5f26d1462b21d4b0" translate="yes" xml:space="preserve">
          <source>Output array for the exponent. Must have the same shape as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4222d68677642db5d8cd581c2069a152c5cd0e" translate="yes" xml:space="preserve">
          <source>Output array for the mantissa. Must have the same shape as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1138d70b1d22742de8a7eec1ca180e5192ab003" translate="yes" xml:space="preserve">
          <source>Output array is same shape and type as &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef051a2e330bee8268ab4c049205eb02d245cc1" translate="yes" xml:space="preserve">
          <source>Output array of &lt;code&gt;string_&lt;/code&gt; or &lt;code&gt;unicode_&lt;/code&gt;, depending on input types of the same shape as &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd088a12712ab8d4c2c426261156c01f4ed1606" translate="yes" xml:space="preserve">
          <source>Output array of bools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b7b13439f3e6221fd4780b32449d5d4d7f2b86" translate="yes" xml:space="preserve">
          <source>Output array of bools, or a single bool if x1 and x2 are scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59628506899dd565c36cb8637802ca8d03d5a7e8" translate="yes" xml:space="preserve">
          <source>Output array of indices, of same shape as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee5c2cea50e4665a7ae56f4b3614a03fe2437d2" translate="yes" xml:space="preserve">
          <source>Output array of integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2593695a5d88e14bbbac4809c3409ae05309b7" translate="yes" xml:space="preserve">
          <source>Output array of ints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a772b58c524d2ad00244b1064922aec6a445c6" translate="yes" xml:space="preserve">
          <source>Output array of ints. Return -1 on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30063ccd5b6202d238ce61d0b6db2952ded8310" translate="yes" xml:space="preserve">
          <source>Output array of ints. Returns -1 if &lt;code&gt;sub&lt;/code&gt; is not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9735bcc93d569bce2b6e7befd7418f0ba4b716c9" translate="yes" xml:space="preserve">
          <source>Output array of same shape as &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38bebcd0d7b96b1c608bbee88ef6bc304e314b0" translate="yes" xml:space="preserve">
          <source>Output array of str or unicode, depending on input type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c2378e8c8946ae97f1ea7dac73a13c10abcd50" translate="yes" xml:space="preserve">
          <source>Output array of str or unicode, depending on input type. The output array will have an extra dimension with 3 elements per input element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d5dcb1c0c304c381fa58f443d7ded824e0bc47" translate="yes" xml:space="preserve">
          <source>Output array of str or unicode, depending on input types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd13d84379a70df2e078233919d2189882423201" translate="yes" xml:space="preserve">
          <source>Output array of string or unicode, depending on input type. The output array will have an extra dimension with 3 elements per input element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c9fa3972ed6e6a39e0733beb489d1ce3ad7791" translate="yes" xml:space="preserve">
          <source>Output array which has the same shape as &lt;code&gt;a&lt;/code&gt;, except along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c1a1cbd46397d96a8e1319b9f70d2c4e83a943" translate="yes" xml:space="preserve">
          <source>Output array, containing the indices of the elements of &lt;code&gt;a.ravel()&lt;/code&gt; that are non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307c943561bf0b8b5ee1a6f51fb083d57904faed" translate="yes" xml:space="preserve">
          <source>Output array, element-wise comparison of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;. Typically of type bool, unless &lt;code&gt;dtype=object&lt;/code&gt; is passed. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e21fc9917d319d6359f007add3068ca89130f62" translate="yes" xml:space="preserve">
          <source>Output array, element-wise exponential of &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e86016f9dd58438b33f8fa3832e0a84ce8bad6" translate="yes" xml:space="preserve">
          <source>Output array, or reference to &lt;code&gt;out&lt;/code&gt; if that was supplied. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4ffa82eda162fa8929d170e0a0f647fbc47d46" translate="yes" xml:space="preserve">
          <source>Output array, with the same shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7fe807ab5dc7a002fea6ec306d2d20dd6cd310" translate="yes" xml:space="preserve">
          <source>Output array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcf0a026c1c1c3df16d07e5c463c5d22ef8d769" translate="yes" xml:space="preserve">
          <source>Output array. Its type is preserved and it must be of the right shape to hold the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21470ea6838153d93bb789847f1e781e9233d56c" translate="yes" xml:space="preserve">
          <source>Output formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a267ec8ecd4cabb56c1672c1c1515df13c271b4b" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn from the 1-d &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; has more than one dimension, the &lt;code&gt;size&lt;/code&gt; shape will be inserted into the &lt;code&gt;axis&lt;/code&gt; dimension, so the output &lt;code&gt;ndim&lt;/code&gt; will be &lt;code&gt;a.ndim - 1 +
len(size)&lt;/code&gt;. Default is None, in which case a single value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2424a491af135ae36f950b7ab0516bd18ace8df" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. Default is None, in which case a single value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e56aa13faf2ac19ffb0b3e5e716f7bfddc1ab9" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(a, b).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b478ddcb62162e8ce07219dee1d9d6ca7a8be6" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;a&lt;/code&gt; is a scalar. Otherwise, &lt;code&gt;np.array(a).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad13c9c05fba2155bd76b001de567b59798e200" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;df&lt;/code&gt; and &lt;code&gt;nonc&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(df, nonc).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738b6886d61591bdc17ae069de249790d6b71087" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;df&lt;/code&gt; is a scalar. Otherwise, &lt;code&gt;np.array(df).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae475a1d95fefab6fd2f2bedb6223f991fcc41b6" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;dfnum&lt;/code&gt; and &lt;code&gt;dfden&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(dfnum, dfden).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a9903f305b04fd0f7d5079b4658c01625926e1" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;dfnum&lt;/code&gt;, &lt;code&gt;dfden&lt;/code&gt;, and &lt;code&gt;nonc&lt;/code&gt; are all scalars. Otherwise, &lt;code&gt;np.broadcast(dfnum, dfden, nonc).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9a357ee338f25bf2bcb1c6a39d7e36ff751b6d" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;lam&lt;/code&gt; is a scalar. Otherwise, &lt;code&gt;np.array(lam).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfc36fdff77cbd952a127d76db752bf9585b331" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; are all scalars. Otherwise, &lt;code&gt;np.broadcast(left, mode, right).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221f43b3f6b78ea4ffc570a2b4686a11e53b9689" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;loc&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(loc, scale).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4282c4067b87ca3f0f86b5fc7e0e58c780e280c3" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(low, high).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0683da40c0442ae9f7198c7d720ea85a5de1b4d" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;mean&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(mean, scale).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de49618d9158d1b17813c0b098c763f862b1d88" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;mean&lt;/code&gt; and &lt;code&gt;sigma&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(mean, sigma).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e92a7af3b2b74719c734b754039059712af838b" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;mu&lt;/code&gt; and &lt;code&gt;kappa&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(mu, kappa).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508329c1fbd22ad6be84a6836708268204490867" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(n, p).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b122820c89df713b07cfbc58626294123f0af0a3" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;ngood&lt;/code&gt;, &lt;code&gt;nbad&lt;/code&gt;, and &lt;code&gt;nsample&lt;/code&gt; are all scalars. Otherwise, &lt;code&gt;np.broadcast(ngood, nbad, nsample).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d2ec43f10ca379398aac021ba6a41147bbbdc4" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;p&lt;/code&gt; is a scalar. Otherwise, &lt;code&gt;np.array(p).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df56295e78bed4d72315ff68acac7d0f9dadfb30" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;scale&lt;/code&gt; is a scalar. Otherwise, &lt;code&gt;np.array(scale).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948b72efe91fbed7c1a9b81472148fc726a10ddb" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; are both scalars. Otherwise, &lt;code&gt;np.broadcast(shape, scale).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5df5a3ebce059571acee730f004ee96866a67f" translate="yes" xml:space="preserve">
          <source>Output shape. If the given shape is, e.g., &lt;code&gt;(m, n, k)&lt;/code&gt;, then &lt;code&gt;m * n * k&lt;/code&gt; samples are drawn. If size is &lt;code&gt;None&lt;/code&gt; (default), a single value is returned if &lt;code&gt;shape&lt;/code&gt; is a scalar. Otherwise, &lt;code&gt;np.array(shape).size&lt;/code&gt; samples are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93434be0fa874141cd4c8b5151bed934649c82c6" translate="yes" xml:space="preserve">
          <source>Output to existing array instead of creating new one, must have same shape as expected output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84eedc132f8f3afc97e2735311f70af181b638d1" translate="yes" xml:space="preserve">
          <source>Output type determination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c6817215cc63aae8850c0698a2094523318f20" translate="yes" xml:space="preserve">
          <source>Output values. Used for performance testing since the generated values are not returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645e7318aeb0e81470723bb7fa3e333eeb197cd2" translate="yes" xml:space="preserve">
          <source>Output view is of shape &lt;code&gt;(self.size,)&lt;/code&gt; (or &lt;code&gt;(np.ma.product(self.shape),)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75eaf4cf3feb6b5ab1173e2bce737a946dc189fe" translate="yes" xml:space="preserve">
          <source>Outputs an array of bools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba159acbd720278d8203620bd6051e07665bfbd" translate="yes" xml:space="preserve">
          <source>Outside the context the error handling behavior has not changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a528519bdaba69c0bdc57fdcdf7b370f2e098f2" translate="yes" xml:space="preserve">
          <source>Overall</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4b69a29c016e758ecb737d47f6f3d84f5ea925" translate="yes" xml:space="preserve">
          <source>Overall view of discrete Fourier transforms, with definitions and conventions used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e247da042a068cd8a71502e0fd76c6b94f4ca5d" translate="yes" xml:space="preserve">
          <source>Overflow: result too large to be expressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efc34a90711b7a3d99847c32b113347fb82c866" translate="yes" xml:space="preserve">
          <source>Override the default nditer flags for the ufunc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e6a3ee5dadc59620ad485d88ddab650173edc7" translate="yes" xml:space="preserve">
          <source>Override the default operand flags for each ufunc operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e2dc0135e076adb3e9a12f5a92b84ec65a0542" translate="yes" xml:space="preserve">
          <source>Overrides the &lt;code&gt;normed&lt;/code&gt; keyword if given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7540b1b3a0dda7242487679ca9b11862d3a4ba" translate="yes" xml:space="preserve">
          <source>Overrides the data type of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb013ea80decaa67cad8a4fef77945440ec27842" translate="yes" xml:space="preserve">
          <source>Overrides the dtype of the calculation and output arrays. Similar to &lt;em&gt;signature&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7006d2b6fc1325bb6529d58eb36199d98e2b6962" translate="yes" xml:space="preserve">
          <source>Overrides the memory layout of the result. &amp;lsquo;C&amp;rsquo; means C-order, &amp;lsquo;F&amp;rsquo; means F-order, &amp;lsquo;A&amp;rsquo; means &amp;lsquo;F&amp;rsquo; if &lt;code&gt;a&lt;/code&gt; is Fortran contiguous, &amp;lsquo;C&amp;rsquo; otherwise. &amp;lsquo;K&amp;rsquo; means match the layout of &lt;code&gt;a&lt;/code&gt; as closely as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddaf5efe8542a3a691f6af72e37e55e4e33af102" translate="yes" xml:space="preserve">
          <source>Overrides the memory layout of the result. &amp;lsquo;C&amp;rsquo; means C-order, &amp;lsquo;F&amp;rsquo; means F-order, &amp;lsquo;A&amp;rsquo; means &amp;lsquo;F&amp;rsquo; if &lt;code&gt;prototype&lt;/code&gt; is Fortran contiguous, &amp;lsquo;C&amp;rsquo; otherwise. &amp;lsquo;K&amp;rsquo; means match the layout of &lt;code&gt;prototype&lt;/code&gt; as closely as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd31b5015136a3790d4ea1e4b56f5e23f60c98d" translate="yes" xml:space="preserve">
          <source>Overrides the shape of the result. If order=&amp;rsquo;K&amp;rsquo; and the number of dimensions is unchanged, will try to keep order, otherwise, order=&amp;rsquo;C&amp;rsquo; is implied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab7f8eaa264cb0094ba3f9ca231b49fca803e1c" translate="yes" xml:space="preserve">
          <source>Overriding Ufunc behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0a4170e8329f03d8b135ba293e3ad03fce2389" translate="yes" xml:space="preserve">
          <source>Overview of numpy type hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852c68657fb7b98de4c0c80a1fc558db4eb1cb65" translate="yes" xml:space="preserve">
          <source>PCG-64 - The default. A fast generator that supports many parallel streams and can be advanced by an arbitrary amount. See the documentation for &lt;a href=&quot;generated/numpy.random.pcg64.pcg64.advance#numpy.random.pcg64.PCG64.advance&quot;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;. PCG-64 has a period of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1cc812d4eb7fa422b89cbdb7060063b9828124" translate="yes" xml:space="preserve">
          <source>PCG-64 is a 128-bit implementation of O&amp;rsquo;Neill&amp;rsquo;s permutation congruential generator (&lt;a href=&quot;#r7c40bac0730f-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, &lt;a href=&quot;#r7c40bac0730f-2&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;). PCG-64 has a period of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af2a60ae4795c459c6aaf972e39b31efa85a47c" translate="yes" xml:space="preserve">
          <source>PCG64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3f1df54c65ec3141b5ad7708d8f310bb35110f" translate="yes" xml:space="preserve">
          <source>PCG64.advance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8024fbbc3a3aef5b6b9fb19f286aa8ddd8b1f19" translate="yes" xml:space="preserve">
          <source>PCG64.cffi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27789fa8622c7f5407c0a21c98dc4e2c03c99f5" translate="yes" xml:space="preserve">
          <source>PCG64.ctypes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010490775ec92003581521aea797462d39c6844f" translate="yes" xml:space="preserve">
          <source>PCG64.jumped()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d334c49d4a4c7a9578ef9b5cd8b69493afac43" translate="yes" xml:space="preserve">
          <source>PCG64.state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ff946c27bb613726f09f76ac9051fb9b0f1727" translate="yes" xml:space="preserve">
          <source>PEP 3141 numeric objects (including builtins)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728c523d01503026dd65bbe13e4eb1af6cdeb12e" translate="yes" xml:space="preserve">
          <source>PY_ARRAY_UNIQUE_SYMBOL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6424a476b9cde6f4b3f1412e542dd2b247eca9" translate="yes" xml:space="preserve">
          <source>PZERO : Defines positive zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a39b68c35be609fae3db651a70893a29f102145" translate="yes" xml:space="preserve">
          <source>Packaging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187a0323079ad9d1ef0a509dbcf41c04c294cb65" translate="yes" xml:space="preserve">
          <source>Packaging (&lt;code&gt;numpy.distutils&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08e1747044acab6d3f1cde93a671bbd941456b2" translate="yes" xml:space="preserve">
          <source>Packaging (numpy.distutils)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed87cf15ee01e886c94b1a38b3e93dd2cc6fc493" translate="yes" xml:space="preserve">
          <source>Packs the elements of a binary-valued array into bits in a uint8 array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1a1b48e12df64d08abc99d20b4177d10bc8831" translate="yes" xml:space="preserve">
          <source>Pad an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623338c7d8c79f8103d39448c8e5b48ec92bd71f" translate="yes" xml:space="preserve">
          <source>Pad the exponent with zeros until it contains at least this many digits. If omitted, the exponent will be at least 2 digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75a7faadf1505590310ce2efd9e725c23bd6630" translate="yes" xml:space="preserve">
          <source>Pad the left side of the string with whitespace until at least that many characters are to the left of the decimal point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afbc760d761bf736b4d58352656b475cf0c23ca" translate="yes" xml:space="preserve">
          <source>Pad the right side of the string with whitespace until at least that many characters are to the right of the decimal point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76599ff9339cbc70b09ca989f2b38f16c5bb949" translate="yes" xml:space="preserve">
          <source>Padded array of rank equal to &lt;a href=&quot;numpy.array#numpy.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; with shape increased according to &lt;code&gt;pad_width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9a393873e0b61a69dbdfe6eb9af32cf2ca2765" translate="yes" xml:space="preserve">
          <source>Padding Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e79fa15dcf3528049b2a29ae0606a9732799d3f" translate="yes" xml:space="preserve">
          <source>Padding arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d526b53b9f3056522af85f26a2d434f580eafad" translate="yes" xml:space="preserve">
          <source>Padding function, see Notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed38b70d664fac1df990b27835f8a3a31c0260f4" translate="yes" xml:space="preserve">
          <source>Pads with a constant value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f2ac48720b42a9d74674f19c7f64e1c0499c32" translate="yes" xml:space="preserve">
          <source>Pads with the edge values of array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca51805348b473c846607d0a2857abe02017fd5" translate="yes" xml:space="preserve">
          <source>Pads with the linear ramp between end_value and the array edge value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630cd57bb220770a2f515175c115bde03142bb98" translate="yes" xml:space="preserve">
          <source>Pads with the maximum value of all or part of the vector along each axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b2120b9c4caeb3f445da36215883fca44003eb" translate="yes" xml:space="preserve">
          <source>Pads with the mean value of all or part of the vector along each axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b8c9f7297b280c0b0ee0ea3cb9a6f56b7bac40" translate="yes" xml:space="preserve">
          <source>Pads with the median value of all or part of the vector along each axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1953311c26ffb67e42015bdd267c1393f31365" translate="yes" xml:space="preserve">
          <source>Pads with the minimum value of all or part of the vector along each axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84bf3b9c4e883de4227d55b10846e004bac799fd" translate="yes" xml:space="preserve">
          <source>Pads with the reflection of the vector mirrored along the edge of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b83447ca8923bd3b3b6c9f855b78e24ddedd519" translate="yes" xml:space="preserve">
          <source>Pads with the reflection of the vector mirrored on the first and last values of the vector along each axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5d2e46c3cd8911ff34acad9b1fd07efaafaa7f" translate="yes" xml:space="preserve">
          <source>Pads with the wrap of the vector along the axis. The first values are used to pad the end and the end values are used to pad the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9b9b2531a80866d4446740404b61350cb894e2" translate="yes" xml:space="preserve">
          <source>Pads with undefined values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bf8ab0f9434e52331cad6b06732b0029f39c77" translate="yes" xml:space="preserve">
          <source>Paired indices, comma separated (not colon), specifying slices to reduce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a438d0b43daa8f2d136f89cacc82c90b7152dea4" translate="yes" xml:space="preserve">
          <source>Papoulis, A., &amp;ldquo;Probability, Random Variables, and Stochastic Processes,&amp;rdquo; 3rd ed., New York: McGraw-Hill, 1991.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d6037f133c5f0d5c4523ae33087584f0a1405b" translate="yes" xml:space="preserve">
          <source>Parallel Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac167a2f3e07666230480dee8733fd1d08660a0" translate="yes" xml:space="preserve">
          <source>Parallel Congruent Generator (64-bit, PCG64)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11bc78976f584d51e758640f9947c4868085ffb" translate="yes" xml:space="preserve">
          <source>Parallel Generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c385ef0bb17bc2f9b3f8a95422e1692d0ab57f" translate="yes" xml:space="preserve">
          <source>Parallel Random Number Generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9941199a0536bd27f4ba9e0cd3912352ab02906b" translate="yes" xml:space="preserve">
          <source>Parallel generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68f24d053a783af78bf2916ad834b59d3272612" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution (k dimension for sample of dimension k).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f52333135962fba02933f939303deb96a3ad5b" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution, &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea913350c134ad81bd1f5863f2b7b64acafebc1a" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution, &amp;gt;= 0 and &amp;lt;=1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617d0343737dbfbd0f0f6ec71b30f6e0961d6b3c" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution, &amp;gt;= 0. Floats are also accepted, but they will be truncated to integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e8c4e61c4d4560f4c6864639517a272c9f4976" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution. Default is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699574a6b4b57fab6065ea4b5f6ef3f03b3ea735" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution. Must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9843d14161f83cfaa303eb7a8d9c859f6d9f77" translate="yes" xml:space="preserve">
          <source>Parameter of the distribution. Must be non-negative. Default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c357c2b875b90cada80608cc164df535a0ecfc" translate="yes" xml:space="preserve">
          <source>Parameter, must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0892c276c48dd008b5fe6e010bfd8cfb08da04" translate="yes" xml:space="preserve">
          <source>Parametric tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768ae1b1301865b35eda7aa4c4ef56497e1e3a2c" translate="yes" xml:space="preserve">
          <source>Parent name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afd4ac6a1f194c4487e49e8f1f570664d022158" translate="yes" xml:space="preserve">
          <source>Pareto, V. (1896). Course of Political Economy. Lausanne.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa3e0d5937fa68006f8ed4ea820c3f856e05107" translate="yes" xml:space="preserve">
          <source>Parse and compare numpy version strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89743befa343f135565af63acf81651d7fa56a28" translate="yes" xml:space="preserve">
          <source>Partial sort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1f476600e3b441461161e5761f11632e411e50" translate="yes" xml:space="preserve">
          <source>Partition (split) each element around the right-most separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7a1711564903156f9d326524293916fcf5f95c" translate="yes" xml:space="preserve">
          <source>Partition each element in &lt;code&gt;a&lt;/code&gt; around &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cd8d136978e78fbd97dbe5ed74c150dbf70d53" translate="yes" xml:space="preserve">
          <source>Pass in &lt;a href=&quot;#c.NPY_MAXDIMS&quot;&gt;&lt;code&gt;NPY_MAXDIMS&lt;/code&gt;&lt;/a&gt; for axis in order to achieve the same effect that is obtained by passing in &lt;em&gt;axis&lt;/em&gt; = &lt;code&gt;None&lt;/code&gt; in Python (treating the array as a 1-d array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89022c4aa33577203e66e96c9430c9099309a83" translate="yes" xml:space="preserve">
          <source>Passing a single array in the &amp;lsquo;out&amp;rsquo; keyword argument to a ufunc with multiple outputs is deprecated, and will raise a warning in numpy 1.10, and an error in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5f2cbfa94aa687203b7f58cf1ebb3635d8adf8" translate="yes" xml:space="preserve">
          <source>Passing in a unit will change the precision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7da55a06e16eb446ed0921edff81714e6fd8fa" translate="yes" xml:space="preserve">
          <source>Path to data files can be a function taking no arguments and returning path(s) to data files &amp;ndash; this is a useful when data files are generated while building the package. (XXX: explain the step when this function are called exactly)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b09e5c11956eb9c1498f52bbb0e9c021d2dd1d7" translate="yes" xml:space="preserve">
          <source>Path to install the library, relative to the current sub-package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcea45c9bd2476c9e4cd30676023f4aeef1d6024" translate="yes" xml:space="preserve">
          <source>Path to test module, or None. By default, run the module from which this function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaad5ad47911a6ee3698400062dbd905a7c854b" translate="yes" xml:space="preserve">
          <source>Path to the directory where the source file gets downloaded to for use. If &lt;code&gt;destpath&lt;/code&gt; is None, a temporary directory will be created. The default path is the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f9dd4b0f8cff037993dd2cabb077c76f25ccdf" translate="yes" xml:space="preserve">
          <source>Path to the mapped file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41a92bed03261664717a6afdad4edf3d5d6ef6e" translate="yes" xml:space="preserve">
          <source>Payment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3a3cc21418fc90fe6ecc74f59b0c52c7573497" translate="yes" xml:space="preserve">
          <source>Payment against loan plus interest. If all input is scalar, returns a scalar float. If any input is array_like, returns payment for each input element. If multiple inputs are array_like, they all must have the same shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271672e73ea39752eac8cd415579fb64e6dce733" translate="yes" xml:space="preserve">
          <source>Peak to peak (maximum - minimum) value along a given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6440f5bac3611c7691e3f3b6096a90aded3cd7c7" translate="yes" xml:space="preserve">
          <source>Peak-to-peak (maximum - minimum) value along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e770ebd82c1aff8fd49c8c27f132133320abb8f" translate="yes" xml:space="preserve">
          <source>Percentile or sequence of percentiles to compute, which must be between 0 and 100 inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e5a5c70ff7afff4f74e23e5b6f9bc7ce3c427f" translate="yes" xml:space="preserve">
          <source>Perform an indirect partition along the given axis using the algorithm specified by the &lt;code&gt;kind&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6a3a9823da0a46526f859015ecc6fb3fbea02b" translate="yes" xml:space="preserve">
          <source>Perform an indirect partition along the given axis using the algorithm specified by the &lt;code&gt;kind&lt;/code&gt; keyword. It returns an array of indices of the same shape as &lt;code&gt;a&lt;/code&gt; that index data along the given axis in partitioned order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64032456cbe8319e7d98bde786ae8344738e1455" translate="yes" xml:space="preserve">
          <source>Perform an indirect sort along the given axis using the algorithm specified by the &lt;code&gt;kind&lt;/code&gt; keyword. It returns an array of indices of the same shape as &lt;code&gt;a&lt;/code&gt; that index data along the given axis in sorted order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51a52f04a9140623599aa3b0b98ea5b1cc97dfc" translate="yes" xml:space="preserve">
          <source>Perform an indirect stable sort using a sequence of keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6637203688f192cd4c7831fd72958ca38674eef7" translate="yes" xml:space="preserve">
          <source>Performance differs across platforms due to compiler and hardware availability (e.g., register width) differences. The default bit generator has been chosen to perform well on 64-bit platforms. Performance on 32-bit operating systems is very different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4d87af8409567870f0a8884054dba62da5530d" translate="yes" xml:space="preserve">
          <source>Performance on different Operating Systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5459d1c079af547b963e3b424e98d9eb9d73b000" translate="yes" xml:space="preserve">
          <source>Performance tuning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8da6105b8a6d69384985610612578b000a977b" translate="yes" xml:space="preserve">
          <source>Performs a (local) reduce with specified slices over a single axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5da77705e71b95e951ed4d7ec45e06388841c4" translate="yes" xml:space="preserve">
          <source>Performs unbuffered in place operation on operand &amp;lsquo;a&amp;rsquo; for elements specified by &amp;lsquo;indices&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fcbb980b448111a78376527afea140c32d0b99" translate="yes" xml:space="preserve">
          <source>Performs unbuffered in place operation on operand &amp;lsquo;a&amp;rsquo; for elements specified by &amp;lsquo;indices&amp;rsquo;. For addition ufunc, this method is equivalent to &lt;code&gt;a[indices] += b&lt;/code&gt;, except that results are accumulated for elements that are indexed more than once. For example, &lt;code&gt;a[[0,0]] += 1&lt;/code&gt; will only increment the first element once because of buffering, whereas &lt;code&gt;add.at(a, [0,0], 1)&lt;/code&gt; will increment the first element twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170a28a9db6d27d7212fc6dc249434a57517e7bc" translate="yes" xml:space="preserve">
          <source>Period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf2a96e88a765dac6631621e994ad2fdf133fd7" translate="yes" xml:space="preserve">
          <source>Permits writeable operands with a dimension with zero stride and size greater than one. Note that such operands must be read/write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62828b0602b0fde09d7e90dc6d64c7bf0a91969e" translate="yes" xml:space="preserve">
          <source>Permutations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4e42b312e850f7eb1e69b15270c948faf533cb" translate="yes" xml:space="preserve">
          <source>Permute the dimensions of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587f9d164e62e857538b541e51623be46520dcfd" translate="yes" xml:space="preserve">
          <source>Permuted sequence or array range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4795b89d9302d00efccbab3f3fac692cea87f4" translate="yes" xml:space="preserve">
          <source>Peyton Z. Peebles Jr., &amp;ldquo;Probability, Random Variables and Random Signal Principles&amp;rdquo;, 4th ed, 2001, p. 57.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a40c1745f4284e39191a0396c8870152495a7b5" translate="yes" xml:space="preserve">
          <source>Philox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5959777deee9c91f6b1c6b55e8fb36d35386bc51" translate="yes" xml:space="preserve">
          <source>Philox - A counter-based generator capable of being advanced an arbitrary number of steps or generating independent streams. See the &lt;a href=&quot;https://www.deshawresearch.com/resources_random123.html&quot;&gt;Random123&lt;/a&gt; page for more details about this class of bit generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe2d0991ff1208b73dd9f898b02fc7ddf6a4e87" translate="yes" xml:space="preserve">
          <source>Philox Counter-based RNG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524e45d1099e9cdfab55bbe05bcce07aae1118ca" translate="yes" xml:space="preserve">
          <source>Philox is a 64-bit PRNG that uses a counter-based design based on weaker (and faster) versions of cryptographic functions &lt;a href=&quot;#r93ff7825f9d9-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. Instances using different values of the key produce independent sequences. Philox has a period of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be327ff9307f92dccbfa92d124ed9c1f2da461ca" translate="yes" xml:space="preserve">
          <source>Philox.advance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280fa4adc784d314a0bee573c104f17613126ba9" translate="yes" xml:space="preserve">
          <source>Philox.cffi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d11a6f4ff26a2021e119771a2e4a54698aa4e02" translate="yes" xml:space="preserve">
          <source>Philox.ctypes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e3972de66a369ef126240f30e55d73a749830b" translate="yes" xml:space="preserve">
          <source>Philox.jumped()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d17538a157c40589b1665a1e9de8abcc3ad60f" translate="yes" xml:space="preserve">
          <source>Philox.state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ac0132f1e0d4f97be89f4cd31124d366b0c558" translate="yes" xml:space="preserve">
          <source>Pi (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f226ef5cfbf39d1a31663d4d8b163a0a2fc4f966" translate="yes" xml:space="preserve">
          <source>Pi divided by 2 (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2304b8c760ac194d56b057ad01b5a3ad0a1adc72" translate="yes" xml:space="preserve">
          <source>Pi divided by 4 (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4905af8205a989772a334c6f3e734f476142804" translate="yes" xml:space="preserve">
          <source>Pickle a masked array to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e45810023e646cad52f281fa552c145fab24d5" translate="yes" xml:space="preserve">
          <source>Pickle an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a540d4d575f18baf6536297137ab5ac92aca34" translate="yes" xml:space="preserve">
          <source>Pickle the object in &lt;em&gt;self&lt;/em&gt; to a Python string and return it. Use the Pickle &lt;em&gt;protocol&lt;/em&gt; provided (or the highest available if &lt;em&gt;protocol&lt;/em&gt; is negative).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e810596481c10e060a6de9ad06fdfc927060a6db" translate="yes" xml:space="preserve">
          <source>Pickle the object in &lt;em&gt;self&lt;/em&gt; to the given &lt;em&gt;file&lt;/em&gt; (either a string or a Python file object). If &lt;em&gt;file&lt;/em&gt; is a Python string it is considered to be the name of a file which is then opened in binary mode. The given &lt;em&gt;protocol&lt;/em&gt; is used (if &lt;em&gt;protocol&lt;/em&gt; is negative, or the highest available is used). This is a simple wrapper around cPickle.dump(&lt;em&gt;self&lt;/em&gt;, &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;protocol&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9c674817f4c16ec0db7fe0f728831590c66631" translate="yes" xml:space="preserve">
          <source>Pickling and copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9666137cb08263e4d19c50ec8409c20dd946edf0" translate="yes" xml:space="preserve">
          <source>Pickling and unpickling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14c6472bf050fcbd65e2427019b3a763a466905" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;val&lt;/code&gt; into &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s field defined by &lt;a href=&quot;numpy.char.chararray.dtype#numpy.char.chararray.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; and beginning &lt;code&gt;offset&lt;/code&gt; bytes into the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185412a5aa77f7262be12d23f02802ef737081b1" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;val&lt;/code&gt; into &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s field defined by &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; and beginning &lt;code&gt;offset&lt;/code&gt; bytes into the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c229161dfc304a9ae64355dd396c5390b2a971b" translate="yes" xml:space="preserve">
          <source>Place after code that needs to call the Python C-API (to re-release the GIL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d286c0aee26e70071db8663d7f6309c3d9db3b" translate="yes" xml:space="preserve">
          <source>Place before code that needs to call the Python C-API (when it is known that the GIL has already been released).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6d5349b343a261178fd78b1e1610ba7cf21168" translate="yes" xml:space="preserve">
          <source>Place in the variable declaration area to set up the necessary variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ccdc6349b9dc31f93562828300c86346a98168" translate="yes" xml:space="preserve">
          <source>Place in the variable declaration area. This macro sets up the variable needed for storing the Python state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a0e4a7e92bf220144af1d31bac5eaeac3fbc72" translate="yes" xml:space="preserve">
          <source>Place right after code that does not need the Python interpreter. This macro acquires the GIL and restores the Python state from the saved variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcfecb3a4c4b891ed630a22bee4e4591689bf6d" translate="yes" xml:space="preserve">
          <source>Place right before code that does not need the Python interpreter (no Python C-API calls). This macro saves the Python state and releases the GIL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b302d5250baa39b2200e0f8dfc33819956d110d" translate="yes" xml:space="preserve">
          <source>Place the &lt;em&gt;values&lt;/em&gt; in &lt;em&gt;self&lt;/em&gt; wherever corresponding positions (using a flattened context) in &lt;em&gt;mask&lt;/em&gt; are true. The &lt;em&gt;mask&lt;/em&gt; and &lt;em&gt;self&lt;/em&gt; arrays must have the same total number of elements. If &lt;em&gt;values&lt;/em&gt; is too small, it will be repeated as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c51172d922f9ffd80a6c49ac44e948f1695d5ee" translate="yes" xml:space="preserve">
          <source>Platform information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f023acdd417bfccdea2c57a682c379e919616e1a" translate="yes" xml:space="preserve">
          <source>Please note that the histogram does not follow the Cartesian convention where &lt;code&gt;x&lt;/code&gt; values are on the abscissa and &lt;code&gt;y&lt;/code&gt; values on the ordinate axis. Rather, &lt;code&gt;x&lt;/code&gt; is histogrammed along the first dimension of the array (vertical), and &lt;code&gt;y&lt;/code&gt; along the second dimension of the array (horizontal). This ensures compatibility with &lt;a href=&quot;numpy.histogramdd#numpy.histogramdd&quot;&gt;&lt;code&gt;histogramdd&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1892b901427306dc78a35832214fc1bf2da3ccc8" translate="yes" xml:space="preserve">
          <source>Please note the difference with &lt;a href=&quot;numpy.ma.compressed#numpy.ma.compressed&quot;&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt; ! The output of &lt;a href=&quot;#numpy.ma.MaskedArray.compress&quot;&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/a&gt; has a mask, the output of &lt;a href=&quot;numpy.ma.compressed#numpy.ma.compressed&quot;&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt; does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87dd1f10556d755a98770a05d050f866ba86479" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;numpy.split#numpy.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; documentation. &lt;a href=&quot;#numpy.dsplit&quot;&gt;&lt;code&gt;dsplit&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;a href=&quot;numpy.split#numpy.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;axis=2&lt;/code&gt;, the array is always split along the third axis provided the array dimension is greater than or equal to 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d916c1c4998afb4d50c3fcf93dc360f2920fa4f5" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;numpy.split#numpy.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; documentation. &lt;a href=&quot;#numpy.hsplit&quot;&gt;&lt;code&gt;hsplit&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;a href=&quot;numpy.split#numpy.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;axis=1&lt;/code&gt;, the array is always split along the second axis regardless of the array dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc387cb43e7401a4ca014419a89bb173d458ba49" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;code&gt;split&lt;/code&gt; documentation. &lt;a href=&quot;#numpy.ma.hsplit&quot;&gt;&lt;code&gt;hsplit&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;split&lt;/code&gt; with &lt;code&gt;axis=1&lt;/code&gt;, the array is always split along the second axis regardless of the array dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e7d8c7fed7f41c40d8d8915f9ff0351357e919" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;code&gt;split&lt;/code&gt; documentation. &lt;code&gt;vsplit&lt;/code&gt; is equivalent to &lt;code&gt;split&lt;/code&gt; with &lt;code&gt;axis=0&lt;/code&gt; (default), the array is always split along the first axis regardless of the array dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038c3367a3a839f2eeae9dfc6942ea3b1fdc013a" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;code&gt;split&lt;/code&gt; documentation. The only difference between these functions is that &lt;code&gt;array_split&lt;/code&gt; allows &lt;code&gt;indices_or_sections&lt;/code&gt; to be an integer that does &lt;em&gt;not&lt;/em&gt; equally divide the axis. For an array of length l that should be split into n sections, it returns l % n sub-arrays of size l//n + 1 and the rest of size l//n.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd8a47afad7ad89569a0678149aec8a4a14bb1f" translate="yes" xml:space="preserve">
          <source>Please refer to the documentation for &lt;a href=&quot;numpy.cov#numpy.cov&quot;&gt;&lt;code&gt;cov&lt;/code&gt;&lt;/a&gt; for more detail. The relationship between the correlation coefficient matrix, &lt;code&gt;R&lt;/code&gt;, and the covariance matrix, &lt;code&gt;C&lt;/code&gt;, is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b836386e2b31cf1b8ad596b871324d3722eeee" translate="yes" xml:space="preserve">
          <source>Please refer to the documentation for &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6312096c2fb02904a11158ef53a242439f3fe5" translate="yes" xml:space="preserve">
          <source>Plot Gaussian for comparison:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0c241878eba91a3cdbfc43f02c1a8abc8fb497" translate="yes" xml:space="preserve">
          <source>Plot an interpolant to the sine function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c425846178b300a94fc1dcd40f69c286d0f6f3c" translate="yes" xml:space="preserve">
          <source>Plot arccos:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0bd2b12a06bfba6d965c22445fb7283d61f5c5" translate="yes" xml:space="preserve">
          <source>Plot arctan:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8973ff5bb1bd5018f3de872b06bf2c6d80eecef4" translate="yes" xml:space="preserve">
          <source>Plot the data along with the fitted line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c03ff60e15b5e80bb4165fc81afccd1437ec5c" translate="yes" xml:space="preserve">
          <source>Plot the function over &lt;code&gt;[-10, 10]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3290030a5cef01fa49cdf510ed4d6f91c4b7055" translate="yes" xml:space="preserve">
          <source>Plot the function over the complex plane:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ef0c6e6f71b2326188734fab38d958878b8f69" translate="yes" xml:space="preserve">
          <source>Plot the magnitude and phase of &lt;code&gt;exp(x)&lt;/code&gt; in the complex plane:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6c890ef0e48db3d629dd995503087d8201f243" translate="yes" xml:space="preserve">
          <source>Plot the sine function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fde3ecdaf4a132efbf593ac818c277bc66ecd0" translate="yes" xml:space="preserve">
          <source>Plot the window and its frequency response (requires SciPy and matplotlib):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821112a676d8851edf60baf979e989009355ff5b" translate="yes" xml:space="preserve">
          <source>Plot the window and its frequency response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f968a3a1b25c8d0c63a07fd6d9e49329be972f1" translate="yes" xml:space="preserve">
          <source>Plot the window and the frequency response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e3f042460261d16670233f0691bef061e615fd" translate="yes" xml:space="preserve">
          <source>Point 1. means that &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;self.squeeze()&lt;/code&gt; always have the same contiguity and &lt;code&gt;aligned&lt;/code&gt; flags value. This also means that even a high dimensional array could be C-style and Fortran-style contiguous at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e430ac5462226a11ba5429f787ad850cc1c7aa73" translate="yes" xml:space="preserve">
          <source>Pointer to a typeobject that is the corresponding Python type for the elements of this array. For the builtin types, this points to the corresponding array scalar. For user-defined types, this should point to a user-defined typeobject. This typeobject can either inherit from array scalars or not. If it does not inherit from array scalars, then the &lt;a href=&quot;#c.NPY_USE_GETITEM&quot;&gt;&lt;code&gt;NPY_USE_GETITEM&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#c.NPY_USE_SETITEM&quot;&gt;&lt;code&gt;NPY_USE_SETITEM&lt;/code&gt;&lt;/a&gt; flags should be set in the &lt;code&gt;flags&lt;/code&gt; member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5dc854234e9afc2a9058468b62e700eedc794e" translate="yes" xml:space="preserve">
          <source>Points (1) and (2) are not yet applied by default. Beginning with NumPy 1.8.0, they are applied consistently only if the environment variable &lt;code&gt;NPY_RELAXED_STRIDES_CHECKING=1&lt;/code&gt; was defined when NumPy was built. Eventually this will become the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961a411c1a10c1ccb1b3e7f54b1a920dfacfe8d0" translate="yes" xml:space="preserve">
          <source>Points to be mapped. If &lt;code&gt;x&lt;/code&gt; is a subtype of ndarray the subtype will be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab61f2ba08dc7d06cfc8bda352c575a4fecd4042" translate="yes" xml:space="preserve">
          <source>Poissons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f3539dcb67f2dacf876ef933d7b1a48dc64eca" translate="yes" xml:space="preserve">
          <source>Poly1d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b50dc48288e90eea4ba13dfea31a8b02fe8195" translate="yes" xml:space="preserve">
          <source>Polynomial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6f8a022bcd3c706d13d3acefa1eb403cbfcc7d" translate="yes" xml:space="preserve">
          <source>Polynomial Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa3ffac290a94c9c2a2f01d7d532bdce4703ce0" translate="yes" xml:space="preserve">
          <source>Polynomial Module (&lt;code&gt;numpy.polynomial.polynomial&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8414bb0f7a688860982627d5efe18eac9f6cb92" translate="yes" xml:space="preserve">
          <source>Polynomial Module (numpy.polynomial.polynomial)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96ab934d393dfe883bb6a220e09be3877115e90" translate="yes" xml:space="preserve">
          <source>Polynomial Package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083ae301866aace12edcddf8f4955699fc3f30ba" translate="yes" xml:space="preserve">
          <source>Polynomial coefficients in order of increasing degree, i.e., &lt;code&gt;(1, 2, 3)&lt;/code&gt; give &lt;code&gt;1 + 2*x + 3*x**2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c20ee58762898e37875dc56b24922a9b976a976" translate="yes" xml:space="preserve">
          <source>Polynomial coefficients of the derivative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03835d7e1493f454e3a33c4b688f4030138d25f9" translate="yes" xml:space="preserve">
          <source>Polynomial coefficients ordered from low to high. If &lt;code&gt;y&lt;/code&gt; was 2-D, the coefficients in column &lt;code&gt;k&lt;/code&gt; of &lt;code&gt;coef&lt;/code&gt; represent the polynomial fit to the data in &lt;code&gt;y&lt;/code&gt;&amp;rsquo;s &lt;code&gt;k&lt;/code&gt;-th column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef993d304874f712d219c0a730cc2e7eab161717" translate="yes" xml:space="preserve">
          <source>Polynomial coefficients, highest power first. If &lt;code&gt;y&lt;/code&gt; was 2-D, the coefficients for &lt;code&gt;k&lt;/code&gt;-th data set are in &lt;code&gt;p[:,k]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f56e46911c586edeb01a7a7b2d3172a214b318" translate="yes" xml:space="preserve">
          <source>Polynomial fit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25879d6596bd7b4445414712e8bb78c995091cbc" translate="yes" xml:space="preserve">
          <source>Polynomial fits using double precision tend to &amp;ldquo;fail&amp;rdquo; at about (polynomial) degree 20. Fits using Chebyshev or Legendre series are generally better conditioned, but much can still depend on the distribution of the sample points and the smoothness of the data. If the quality of the fit is inadequate, splines may be a good alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9a06fff9cd23dc8d003defa4ba62b22c43aa3d" translate="yes" xml:space="preserve">
          <source>Polynomial instances can be integrated and differentiated.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee315ddb8d0b2ce4ebacbb16ef86ccf5d8d15c3f" translate="yes" xml:space="preserve">
          <source>Polynomial multiplication. Same output as convolve, but also accepts poly1d objects as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e464d536010553bf44d4fcbda23e892f7b3e7fe0" translate="yes" xml:space="preserve">
          <source>Polynomial to differentiate. A sequence is interpreted as polynomial coefficients, see &lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;poly1d&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f5d2e83d0be67e139a45c9201b050a879f5a18" translate="yes" xml:space="preserve">
          <source>Polynomial to integrate. A sequence is interpreted as polynomial coefficients, see &lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;poly1d&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ed2b1050eb70fb157dd5660eb7c55d883ac1eb" translate="yes" xml:space="preserve">
          <source>Polynomial.__call__()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35478127d10bb3cb3775032e3c897e1ecc1a15f2" translate="yes" xml:space="preserve">
          <source>Polynomial.basis()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d80f0035c7ef0ffa64b98f1724a0b0c4afef2d0" translate="yes" xml:space="preserve">
          <source>Polynomial.cast()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cb1f5fc0cb6c9a418a7aeb875a13aa07fddee5" translate="yes" xml:space="preserve">
          <source>Polynomial.convert()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5010652818ad992caed19b6f29d72571c8fb1e69" translate="yes" xml:space="preserve">
          <source>Polynomial.copy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf83f32f1cd72f807b5e634a140f04590d489b62" translate="yes" xml:space="preserve">
          <source>Polynomial.cutdeg()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7749826e479bd691a77ffd7c8c571414091ba6" translate="yes" xml:space="preserve">
          <source>Polynomial.degree()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040fd34e15efeaecdb1d1d54ab4da3a5179c0efc" translate="yes" xml:space="preserve">
          <source>Polynomial.deriv()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf8c9a39890b2c87bc74fa0a122cdfb4533d7ca" translate="yes" xml:space="preserve">
          <source>Polynomial.domain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81015511f65370fcbb06668c47c1cbf9c26d9003" translate="yes" xml:space="preserve">
          <source>Polynomial.fit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6f3108e73c3e17d234d1403ac27eaeea734c76" translate="yes" xml:space="preserve">
          <source>Polynomial.fromroots()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797b7055bcddeaed004f1f3e1c0cb8a5f3975a0a" translate="yes" xml:space="preserve">
          <source>Polynomial.has_samecoef()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f8c87d6992a51b999e87aa62b68fd7d33d76a7" translate="yes" xml:space="preserve">
          <source>Polynomial.has_samedomain()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b61ea8dbe675c062350df8a77fad72d879a4c8f" translate="yes" xml:space="preserve">
          <source>Polynomial.has_sametype()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299552341294cd3c43e34f2d460ccf4d97842f14" translate="yes" xml:space="preserve">
          <source>Polynomial.has_samewindow()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6d9d31ddbe33dc2d97bf053d098fa89f818243" translate="yes" xml:space="preserve">
          <source>Polynomial.identity()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9f0909eff21dd4e0dd57a0dc6b2dbe9890bcc5" translate="yes" xml:space="preserve">
          <source>Polynomial.integ()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857ea2a5e3b2c01bb5f7958248954263d8f1ed18" translate="yes" xml:space="preserve">
          <source>Polynomial.linspace()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ee3450e8e6805413de02d6dce6535f4c750a6c" translate="yes" xml:space="preserve">
          <source>Polynomial.mapparms()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c73f588ca3cfbc809d5a64112c990abd3ce8d0" translate="yes" xml:space="preserve">
          <source>Polynomial.roots()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edbb7b573d4e932247b7a5fe0c7d74daf533039" translate="yes" xml:space="preserve">
          <source>Polynomial.trim()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c7516f257b67ad5f340dc6d9f37bbcc7cb3f95" translate="yes" xml:space="preserve">
          <source>Polynomial.truncate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c926349e876dca4d1324036fe67a6eb1fe7afb3c" translate="yes" xml:space="preserve">
          <source>Polynomials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdf82047fba88a2bc8225a04ac027e427493acc" translate="yes" xml:space="preserve">
          <source>Polynomials can be added, subtracted, multiplied, and divided (returns quotient and remainder):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d092a44e6fb68d4ef17fff11577090c2580200c9" translate="yes" xml:space="preserve">
          <source>Polynomials in NumPy can be &lt;em&gt;created&lt;/em&gt;, &lt;em&gt;manipulated&lt;/em&gt;, and even &lt;em&gt;fitted&lt;/em&gt; using the &lt;a href=&quot;routines.polynomials.classes&quot;&gt;Using the Convenience Classes&lt;/a&gt; of the &lt;a href=&quot;routines.polynomials.package#module-numpy.polynomial&quot;&gt;&lt;code&gt;numpy.polynomial&lt;/code&gt;&lt;/a&gt; package, introduced in NumPy 1.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cf01cbc34f08a95f10e8958dbd07c50988bf5a" translate="yes" xml:space="preserve">
          <source>Polynomials that differ in domain, window, or class can&amp;rsquo;t be mixed in arithmetic:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62a0e238fe55e77a9f6b60671eb95cbed116578" translate="yes" xml:space="preserve">
          <source>Polyutils</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440fa66790b966695736da10041ad4d81449206b" translate="yes" xml:space="preserve">
          <source>Portable alternatives to the &lt;code&gt;endian.h&lt;/code&gt; macros of GNU Libc. If big endian, &lt;a href=&quot;#c.NPY_BYTE_ORDER&quot;&gt;&lt;code&gt;NPY_BYTE_ORDER&lt;/code&gt;&lt;/a&gt; == &lt;a href=&quot;#c.NPY_BIG_ENDIAN&quot;&gt;&lt;code&gt;NPY_BIG_ENDIAN&lt;/code&gt;&lt;/a&gt;, and similarly for little endian architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda88d10a709c02075edce100d5eabe660a19edf" translate="yes" xml:space="preserve">
          <source>Position in the expanded axes where the new axis is placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bac565110a49138a32471c17e8dbfa232c79708" translate="yes" xml:space="preserve">
          <source>Position of 1st core dimension of each argument in &lt;code&gt;core_dim_ixs&lt;/code&gt;, equivalent to cumsum(&lt;code&gt;core_num_dims&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6121f3268b9f16c6d61ced9b9034e8ac0c6b72" translate="yes" xml:space="preserve">
          <source>Positional arguments may also be excluded by specifying their position:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cbfa407d2171de3bbfb2f35376dd80b783a1a3" translate="yes" xml:space="preserve">
          <source>Possessing attributes data, shape, strides, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebf3c34163bd8df2f93f3d373364724bcf52c71" translate="yes" xml:space="preserve">
          <source>Potential mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e87b173c530cdf53b733f81a4b670b254e427a" translate="yes" xml:space="preserve">
          <source>Power series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8149c17445bdcfdb247a480f64be6a5f7bb8a1fa" translate="yes" xml:space="preserve">
          <source>Power series of power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad050a72d9ccecde4a2ec0627ab51bd9238c32e" translate="yes" xml:space="preserve">
          <source>Power to which the series will be raised</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3087369ec8332801e372d0f946cf5ed30cf85f05" translate="yes" xml:space="preserve">
          <source>Powers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27f06fadee01343a923220a418f59fbd3d80d89" translate="yes" xml:space="preserve">
          <source>Pre-defined names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15455fab7c1c088c4bf93534577f25e6344fe78e" translate="yes" xml:space="preserve">
          <source>Precondition: &lt;code&gt;arr&lt;/code&gt; is a copy of &lt;code&gt;base&lt;/code&gt; (though possibly with different strides, ordering, etc.) Set the UPDATEIFCOPY flag and &lt;code&gt;arr-&amp;gt;base&lt;/code&gt; so that when &lt;code&gt;arr&lt;/code&gt; is destructed, it will copy any changes back to &lt;code&gt;base&lt;/code&gt;. DEPRECATED, use &lt;code&gt;PyArray_SetWritebackIfCopyBase`&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69071978c4e5732d72cad93321b473839bec355f" translate="yes" xml:space="preserve">
          <source>Precondition: &lt;code&gt;arr&lt;/code&gt; is a copy of &lt;code&gt;base&lt;/code&gt; (though possibly with different strides, ordering, etc.) Sets the &lt;a href=&quot;#c.NPY_ARRAY_WRITEBACKIFCOPY&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEBACKIFCOPY&lt;/code&gt;&lt;/a&gt; flag and &lt;code&gt;arr-&amp;gt;base&lt;/code&gt;, and set &lt;code&gt;base&lt;/code&gt; to READONLY. Call &lt;a href=&quot;#c.PyArray_ResolveWritebackIfCopy&quot;&gt;&lt;code&gt;PyArray_ResolveWritebackIfCopy&lt;/code&gt;&lt;/a&gt; before calling &lt;code&gt;Py_DECREF`&lt;/code&gt; in order copy any changes back to &lt;code&gt;base&lt;/code&gt; and reset the READONLY flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4c972c0cafba1c1f82e96c283ad918ec184514" translate="yes" xml:space="preserve">
          <source>Predefined instance that always returns a tuple: &lt;code&gt;index_exp = IndexExpression(maketuple=True)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6129f74a1faca4fde2a659da62c3867f39930c" translate="yes" xml:space="preserve">
          <source>Predefined instance without tuple conversion: &lt;code&gt;s_ = IndexExpression(maketuple=False)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdd761543964398a072dadd90194b870242e7b9" translate="yes" xml:space="preserve">
          <source>Present only if &lt;a href=&quot;numpy.full#numpy.full&quot;&gt;&lt;code&gt;full&lt;/code&gt;&lt;/a&gt; = False and &lt;code&gt;cov`=True. The covariance matrix of the polynomial coefficient estimates. The diagonal of this matrix are the variance estimates for each coefficient. If y is a 2-D array, then the covariance matrix for the `k&lt;/code&gt;-th data set are in &lt;code&gt;V[:,:,k]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fc2e4921fdf576f59697b03e93cb327c345e5c" translate="yes" xml:space="preserve">
          <source>Present only if &lt;a href=&quot;numpy.full#numpy.full&quot;&gt;&lt;code&gt;full&lt;/code&gt;&lt;/a&gt; = True. Residuals of the least-squares fit, the effective rank of the scaled Vandermonde coefficient matrix, its singular values, and the specified value of &lt;code&gt;rcond&lt;/code&gt;. For more details, see &lt;a href=&quot;numpy.linalg.lstsq#numpy.linalg.lstsq&quot;&gt;&lt;code&gt;linalg.lstsq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f6ac5a29708a97228fc198d2779eea286c5024" translate="yes" xml:space="preserve">
          <source>Present only if &lt;code&gt;full&lt;/code&gt; = False and &lt;code&gt;cov`=True. The covariance matrix of the polynomial coefficient estimates. The diagonal of this matrix are the variance estimates for each coefficient. If y is a 2-D array, then the covariance matrix for the `k&lt;/code&gt;-th data set are in &lt;code&gt;V[:,:,k]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae8e2eb999f2d5c46b22a10cf45f0e9cb8c4d6c" translate="yes" xml:space="preserve">
          <source>Present only if &lt;code&gt;full&lt;/code&gt; = True. Residuals of the least-squares fit, the effective rank of the scaled Vandermonde coefficient matrix, its singular values, and the specified value of &lt;code&gt;rcond&lt;/code&gt;. For more details, see &lt;code&gt;linalg.lstsq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4993376ceec39f58545d9a479e4fa908c068d67f" translate="yes" xml:space="preserve">
          <source>Present value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41226f9ed655fe3256485f01bb29a3b43a50965" translate="yes" xml:space="preserve">
          <source>Present value of a series of payments or investments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c9505bb92f39f535e60f8429e73f6fc3bc4441" translate="yes" xml:space="preserve">
          <source>Press, Teukolsky, Vetterling and Flannery, &amp;ldquo;Numerical Recipes in C++,&amp;rdquo; 2nd ed, Cambridge University Press, 2002, p. 31.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8029eb4d8a99fcc2aa516975925a78aa9bb37f" translate="yes" xml:space="preserve">
          <source>Press, W., Teukolsky, S., Vetterline, W.T., and Flannery, B.P., 2007, &lt;em&gt;Numerical Recipes: The Art of Scientific Computing&lt;/em&gt;, ch. 12-13. Cambridge Univ. Press, Cambridge, UK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711d89e6ab77207441d54e8b36c5a08ade73d9d2" translate="yes" xml:space="preserve">
          <source>Pretty-print all fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac492ceef22995469c8ad1f0c13b5080f88e2d4" translate="yes" xml:space="preserve">
          <source>Previous to NumPy 1.13.0, neither &lt;code&gt;axis &amp;lt; -a.ndim - 1&lt;/code&gt; nor &lt;code&gt;axis &amp;gt; a.ndim&lt;/code&gt; raised errors or put the new axis where documented. Those axis values are now deprecated and will raise an AxisError in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98104a12a1fc06ab5f06575d97cb7ee3ccacafc3" translate="yes" xml:space="preserve">
          <source>Previous to numpy 1.4.0 sorting real and complex arrays containing nan values led to undefined behaviour. In numpy versions &amp;gt;= 1.4.0 nan values are sorted to the end. The extended sort order is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f24c4239393c1a94482955b804915345ba501fb" translate="yes" xml:space="preserve">
          <source>Primarily used to hold struct dtypes, but can contain arbitrary binary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb8cb93567bb1b390d2eefe9743690ccec81691" translate="yes" xml:space="preserve">
          <source>Print or write to a file the source code for a NumPy object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea92eb09155d1edff97c827c992c1b5b275f5abe" translate="yes" xml:space="preserve">
          <source>Print sine of one angle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e58871c2d35cf4356c84d443e6dcb54863a07f" translate="yes" xml:space="preserve">
          <source>Print sines of an array of angles given in degrees:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8579f922858fd798d57b30575ddaed85595a0e" translate="yes" xml:space="preserve">
          <source>Print the current state of the &lt;a href=&quot;#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; instance and debug info to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea69948f5baf7a2f8df3251ffc9cd0c1ec49098" translate="yes" xml:space="preserve">
          <source>Print the current state of the &lt;a href=&quot;numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; instance and debug info to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b887b09d6f029258a9f8065b5263c9c2cc2492" translate="yes" xml:space="preserve">
          <source>Printf Formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55347c4d41d67f62338a9745710f6fe4a430e38b" translate="yes" xml:space="preserve">
          <source>Printing a polynomial yields a shorter form without the domain and window:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcc2090fd1f41f4c1e8ddb8ed2d4b82ec711c68" translate="yes" xml:space="preserve">
          <source>Printing width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcf2427068b9ab131fe6f8aea7927107ab84ec9" translate="yes" xml:space="preserve">
          <source>Prior to NumPy 1.4, &lt;a href=&quot;generated/numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;numpy.poly1d&lt;/code&gt;&lt;/a&gt; was the class of choice and it is still available in order to maintain backward compatibility. However, the newer Polynomial package is more complete than &lt;a href=&quot;generated/numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;numpy.poly1d&lt;/code&gt;&lt;/a&gt; and its convenience classes are better behaved in the numpy environment. Therefore Polynomial is recommended for new coding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886cbff9d9df761ec642945e519631a23ed173a2" translate="yes" xml:space="preserve">
          <source>Priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29080196ef0c89b247255af4ae8eddf5aba27916" translate="yes" xml:space="preserve">
          <source>Probabilities of each of the &lt;code&gt;p&lt;/code&gt; different outcomes. These must sum to 1 (however, the last element is always assumed to account for the remaining probability, as long as &lt;code&gt;sum(pvals[:-1]) &amp;lt;= 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39162c81d26a2b5daa18e4a8413bdee9871133b8" translate="yes" xml:space="preserve">
          <source>Produce an object that mimics broadcasting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e46e6ce65487120b2493b14299af58b368c870a" translate="yes" xml:space="preserve">
          <source>Produce histogram from 1-D data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a12e101787fa7e7873a7616fcff5e5dd61c8a68" translate="yes" xml:space="preserve">
          <source>Product across array propagating NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d4ebfdd03b691f619d61cbe366c6ce68fc905a" translate="yes" xml:space="preserve">
          <source>Provides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2f1dcd5eefbef0c5f14394bffae7ff736e1005" translate="yes" xml:space="preserve">
          <source>Provides a convenient view on arrays of string and unicode values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7580b0cd672c9a50c388c5614c0b1e87cc703d" translate="yes" xml:space="preserve">
          <source>Provides a policy for what kind of casting is permitted. For compatibility with previous versions of NumPy, this defaults to &amp;lsquo;unsafe&amp;rsquo; for numpy &amp;lt; 1.7. In numpy 1.7 a transition to &amp;lsquo;same_kind&amp;rsquo; was begun where ufuncs produce a DeprecationWarning for calls which are allowed under the &amp;lsquo;unsafe&amp;rsquo; rules, but not under the &amp;lsquo;same_kind&amp;rsquo; rules. From numpy 1.10 and onwards, the default is &amp;lsquo;same_kind&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1bddae90aae088e71b86cd52d69813183f67b2" translate="yes" xml:space="preserve">
          <source>Provides control over rounding, trimming and padding. Uses and assumes IEEE unbiased rounding. Uses the &amp;ldquo;Dragon4&amp;rdquo; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a381d705c9b6ba2fba0d2bcb1a819b32c6709fed" translate="yes" xml:space="preserve">
          <source>Provides functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b9a73eb11a260b4f6e705bda26aa77b784a0f2" translate="yes" xml:space="preserve">
          <source>Pseudo-Vandermonde matrix of given degree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce025ea48bfddab196c8f61c8d3d2ee0d29782fc" translate="yes" xml:space="preserve">
          <source>Pseudo-Vandermonde matrix of given degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865fe7c7caba7d3041edf261203cb85de994b54e" translate="yes" xml:space="preserve">
          <source>Purely integer array indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7583ceb6f47e1f67b841224655d36b7ae60397c" translate="yes" xml:space="preserve">
          <source>Put a value into a specified place in a field defined by a data-type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887b85963f495e881ada9402907835c9a95eb522" translate="yes" xml:space="preserve">
          <source>Put elements by matching the array and the index arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c9246aaeb527348c9911e0b8d58377e63948db" translate="yes" xml:space="preserve">
          <source>Put values into the destination array by matching 1d index and data slices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac31094f10dc2f39063b5739836bc55c8e5528b" translate="yes" xml:space="preserve">
          <source>Put values into the destination array by matching 1d index and data slices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f49b25680cb49b9aaad493fe5556251c93ba55a" translate="yes" xml:space="preserve">
          <source>Putting the Inner Loop in Cython</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ecb258bdd9e8ceebb8f24df65e120598f11a27" translate="yes" xml:space="preserve">
          <source>PyArrayDescr_Type and PyArray_Descr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be109cf2e5b25ad1f3afd9a923e6aa92e488e2ec" translate="yes" xml:space="preserve">
          <source>PyArrayFlagsObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869f09ff2373258dfd0c3b053b1198c41c4ec20a" translate="yes" xml:space="preserve">
          <source>PyArrayFlags_Type and PyArrayFlagsObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cf56625a4501ce4f24bd296378c02a5305818c" translate="yes" xml:space="preserve">
          <source>PyArrayInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ac665b20dfd2f23f44a08d0cf06132d267f6dc" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d531380fb59cf88ec3d4217fbf274385e2a7d28" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.descr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e4b5506b00c18b46b82dfa3ab3e1ef21f9a950" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458193bec93ceff82d7e96e2460718db4eec7616" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.itemsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e0e80ca4461e63c948168c647137f31ccc1a71" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.nd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aca89b81fd9a91aee54e89b27f82d057860e876" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.shape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686f6100164fec11afa4e40ac128e6df9bb29e16" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.strides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731c9273b5d6bbe9c99941d52cc29e9b81afd726" translate="yes" xml:space="preserve">
          <source>PyArrayInterface.typekind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274bf19d0585f02f962e148896cfa2775260f927" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91ab547fbb37bac5712ef26c02852bb6aa99c3d" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.ao</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0c848ffd9ec12e0be1d8c295903c526f34ec55" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.backstrides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572d06ed9f150c41ab19ed538b6ba76e87e05d9c" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.contiguous</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65cc42df11330844ac6e499aa758d1ccea11a9c" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.coordinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b157b58dde6fe3f8a843e3b827216778c6ed2e5b" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.dataptr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea2c713d4a4b35c50c7c655715b7bb730eddb4b" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.dims_m1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cc4c064d76942408f93cad145c5f391f2f6a12" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.factors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe2b1ce8a7cd36614602d4746161854e6440af3" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839278b26269c913962e1ded6ccee0a5e2b71486" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1dbd7fc3d422b3b85d15b9d4a6ef8497b28c7d" translate="yes" xml:space="preserve">
          <source>PyArrayIterObject.strides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bb5954e5c4b389826b24e7f30d186f33951526" translate="yes" xml:space="preserve">
          <source>PyArrayIter_Check()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779ddb99f929ea7aad8209ded34af602cc72fc27" translate="yes" xml:space="preserve">
          <source>PyArrayIter_Type and PyArrayIterObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2761818c485ac45c8e3694410ac2ffbb2db73436" translate="yes" xml:space="preserve">
          <source>PyArrayMapIter_Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168bccb9533c6594bb228ab89e59671911da5be6" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIterObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e60f1fc499a483c5ee8200eecf4c9f8372549e4" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIterObject.dimensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbcf722e72b4ede060722c87e1cb25f6f3691b4" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIterObject.index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cfe37bf6bb36df7a3e11a40b4dbdd9bf61700c" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIterObject.iters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a07c753c4d3b707839cbe80b096986d0fb9348" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIterObject.nd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297296caeb3be1aba543855205a453182c5ff6f6" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIterObject.size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e07cb8b363b7fb6166f77774de316fb407a4e5d" translate="yes" xml:space="preserve">
          <source>PyArrayMultiIter_Type and PyArrayMultiIterObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fe36af59bf6bbf70ba811848a83ab47096245d" translate="yes" xml:space="preserve">
          <source>PyArrayNeighborhoodIterObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046e1ce6d0a0232e5d96473787fd6a4ed29d6be7" translate="yes" xml:space="preserve">
          <source>PyArrayNeighborhoodIter_Next()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d917320d8aa4dc5e72c025622eaf83548f8a6801" translate="yes" xml:space="preserve">
          <source>PyArrayNeighborhoodIter_Reset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca90b12ba802a51803b1da0c95b8c3c66b2afc79" translate="yes" xml:space="preserve">
          <source>PyArrayNeighborhoodIter_Type and PyArrayNeighborhoodIterObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d673d5162e00cfb0740d3a75b14b9cde3cf22b87" translate="yes" xml:space="preserve">
          <source>PyArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c70dc99ca030335aa65e6fd0a06ad9f61b8b0d" translate="yes" xml:space="preserve">
          <source>PyArrayObject.PyObject_HEAD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2121856c0f7f46f0ce7308c4bbeace6d1dfbba0f" translate="yes" xml:space="preserve">
          <source>PyArrayObject.base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00897fd94141b62b232aed51eeace771a8863fa" translate="yes" xml:space="preserve">
          <source>PyArrayObject.data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b998936e5b253f8855ec51ab1cb429087879604d" translate="yes" xml:space="preserve">
          <source>PyArrayObject.descr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde989f181049a40b1884fbfd9ce1b452d156166" translate="yes" xml:space="preserve">
          <source>PyArrayObject.dimensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf88768b11dbe75dfe9b912a93592829ce0dda6" translate="yes" xml:space="preserve">
          <source>PyArrayObject.flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60f45d3d921e545c173f5b99d6ef7edd6d2a3b7" translate="yes" xml:space="preserve">
          <source>PyArrayObject.nd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2e9dce61194b72bb316b78dc31bc956ce701e3" translate="yes" xml:space="preserve">
          <source>PyArrayObject.strides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05ea46a24c5893048049a35fc8e959e7ab61dfd" translate="yes" xml:space="preserve">
          <source>PyArrayObject.weakreflist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61595ee4272af341f4a9904e75ae92955480ce25" translate="yes" xml:space="preserve">
          <source>PyArray_All()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e06c14113cc5838822d8dbf246e8a52d6c4d80c" translate="yes" xml:space="preserve">
          <source>PyArray_Any()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5d992d542b76238f51e95d412b4730b585aca5" translate="yes" xml:space="preserve">
          <source>PyArray_Arange()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de06af260770a5c7a8af2e17b5fb9b84c1ab9b46" translate="yes" xml:space="preserve">
          <source>PyArray_ArangeObj()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356d8512ae5a68dc43e8575d33229ac5a707b236" translate="yes" xml:space="preserve">
          <source>PyArray_ArgMin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0802914af07ab4136efe258127cd7186eaba8957" translate="yes" xml:space="preserve">
          <source>PyArray_ArgPartition()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c498fa8ee47012225fac8b991e4491fe1a92d66" translate="yes" xml:space="preserve">
          <source>PyArray_ArgSort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf80be281d47b5ffdd772997be8f45e31f5ed61" translate="yes" xml:space="preserve">
          <source>PyArray_ArrFuncs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548113eff35a4ddd4db8bfed31e1059f24aae68d" translate="yes" xml:space="preserve">
          <source>PyArray_ArrayDescr.shape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2d280adf9490be63cc82f5a54a35367e16ae3b" translate="yes" xml:space="preserve">
          <source>PyArray_ArrayType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8d75438d32b11fdaa438180d7d2b3ae444d410" translate="yes" xml:space="preserve">
          <source>PyArray_AxisConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a989fe40e8f0f48ddcf568d68dd4c8b6dcec93b2" translate="yes" xml:space="preserve">
          <source>PyArray_BASE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85d658e0655f3a8c50c7c019b3ac7a04dcfeccc" translate="yes" xml:space="preserve">
          <source>PyArray_BYTES()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eea64bfd04734139b0977ef36d8cf0e931ae5c3" translate="yes" xml:space="preserve">
          <source>PyArray_BoolConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d28a28b062d701d12a6fbbe2f2100cf818a13b6" translate="yes" xml:space="preserve">
          <source>PyArray_Broadcast()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d239c60c97a12d485774fb7ee12e4b5a56ee5f" translate="yes" xml:space="preserve">
          <source>PyArray_BroadcastToShape()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494074d0448e94aba8170da7a5d13fcba5bba37f" translate="yes" xml:space="preserve">
          <source>PyArray_BufferConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b8771c23541b7e0b80e3a9155f617d84879a02" translate="yes" xml:space="preserve">
          <source>PyArray_ByteorderConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3263dbfa1db01ee7f2711523e246128bd46cc676" translate="yes" xml:space="preserve">
          <source>PyArray_Byteswap()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5ef13a9df5ea1713c4bcc7ad0aee7da25835a3" translate="yes" xml:space="preserve">
          <source>PyArray_CEQ()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151bf2f636d86fd8915ed6bc1f15e33ef60450b4" translate="yes" xml:space="preserve">
          <source>PyArray_CGE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6353502d50e10a4af041554dd3f8af624eff5e94" translate="yes" xml:space="preserve">
          <source>PyArray_CGT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2352542bc1aa0e2798d4f53b219767e4a19dea7" translate="yes" xml:space="preserve">
          <source>PyArray_CLE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446e3f7a0a7dbea58b1fcece79d88bdb97a6d7e5" translate="yes" xml:space="preserve">
          <source>PyArray_CLEARFLAGS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90141adf152ba1b6cf4ed8d3f3c6eaf330f13bd" translate="yes" xml:space="preserve">
          <source>PyArray_CLT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a1d2e8d5d77229b9d67ebf2546326b7abceb27" translate="yes" xml:space="preserve">
          <source>PyArray_CNE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f655e914580a9371f743f089a36bfc5f78e4976" translate="yes" xml:space="preserve">
          <source>PyArray_CanCastArrayTo()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b7286670aa096fe235c42944eda14066c7106e" translate="yes" xml:space="preserve">
          <source>PyArray_CanCastSafely()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8c41bbc2112f8b747316d0ec09bd6860520640" translate="yes" xml:space="preserve">
          <source>PyArray_CanCastTo()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e7d0552a1f0e983ad154f287fd6eed740809af" translate="yes" xml:space="preserve">
          <source>PyArray_CanCastTypeTo()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36c75ad82700bbe89d33c0eae936313f7c3c9b3" translate="yes" xml:space="preserve">
          <source>PyArray_CanCoerceScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91f27acbac2d9b035d2b905cf2e0789d34d4485" translate="yes" xml:space="preserve">
          <source>PyArray_CastScalarToCtype()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f369a41a80adc694032416d725e5d3f143a3de" translate="yes" xml:space="preserve">
          <source>PyArray_CastTo()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1511ec8d15a750f03290d85e5f2e508135295d" translate="yes" xml:space="preserve">
          <source>PyArray_CastToType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f599e1e7b4ea1e9585d5cf2ef933b080d402c8" translate="yes" xml:space="preserve">
          <source>PyArray_CastingConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8270b1e5430330a1e3883f02267b61367ac947" translate="yes" xml:space="preserve">
          <source>PyArray_CheckAnyScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3aa6d7260a9460faccf245affd1b8ea88bceb3" translate="yes" xml:space="preserve">
          <source>PyArray_CheckAxis()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1deeb631131dc5453399e0a2c9500ced67516bf1" translate="yes" xml:space="preserve">
          <source>PyArray_CheckExact()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3a0a6d40fd1fd2c50ed6351f4e2a1ab4556911" translate="yes" xml:space="preserve">
          <source>PyArray_CheckFromAny()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582eac936f9fcd0e5486aaf0109d50fd5a374fb2" translate="yes" xml:space="preserve">
          <source>PyArray_CheckScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3a14ffd6b9d128c2237fc9ccf8225234d19523" translate="yes" xml:space="preserve">
          <source>PyArray_Choose()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c8c0860e90d4605f849c41512f8fc2778addfa" translate="yes" xml:space="preserve">
          <source>PyArray_Chunk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98fff31e092c61166c34b54082dd38436c70342" translate="yes" xml:space="preserve">
          <source>PyArray_Chunk.flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723314c7094f2350e296226f15b177c2252dbc75" translate="yes" xml:space="preserve">
          <source>PyArray_Chunk.len</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461a2d449b0b44345ae8f6d8c9105488ba9b8ec4" translate="yes" xml:space="preserve">
          <source>PyArray_Chunk.ptr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58ac26a3f4c3c6516a6972636e41bd7f4cd3e06" translate="yes" xml:space="preserve">
          <source>PyArray_Clip()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce86e9f8b685e2228eb0b2f376cefd81990c8fff" translate="yes" xml:space="preserve">
          <source>PyArray_ClipmodeConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ff6317be3795b46e8bcb9d902de6d802c5dc3d" translate="yes" xml:space="preserve">
          <source>PyArray_CompareLists()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4837fa5fb0e1651adada9af8a55c9db3f2c062" translate="yes" xml:space="preserve">
          <source>PyArray_Compress()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5bf04871759295315b73b630696422059246d7" translate="yes" xml:space="preserve">
          <source>PyArray_Concatenate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bda11642449415d11baedee081eb0cbe17d8973" translate="yes" xml:space="preserve">
          <source>PyArray_Conjugate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f75ad4b48b2f6730627fa3f8ccd3ac6a5f3345" translate="yes" xml:space="preserve">
          <source>PyArray_ContiguousFromAny()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca14dca08db5c0ac02353fd617e60cea53a4038" translate="yes" xml:space="preserve">
          <source>PyArray_ConvertClipmodeSequence()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f426adc6ebc451bd00425aecdcc330180ab850" translate="yes" xml:space="preserve">
          <source>PyArray_ConvertToCommonType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501be7da73239d254ce86f5a69b4e451bfd114a1" translate="yes" xml:space="preserve">
          <source>PyArray_CopyAndTranspose()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5731cdd677e2e47cebac33f44f80c379ecf4ef4b" translate="yes" xml:space="preserve">
          <source>PyArray_CopyInto()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296ba0437982005fec46ed1f358fc54a250cf8ce" translate="yes" xml:space="preserve">
          <source>PyArray_Correlate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfecbd28ffdaf81b115fba9b100ba247914ec325" translate="yes" xml:space="preserve">
          <source>PyArray_Correlate2()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fda989fcccb46ee409b666b6d519f6948086ccb" translate="yes" xml:space="preserve">
          <source>PyArray_CountNonzero()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022161a2ccba4fde85893d62edb0012c910d08de" translate="yes" xml:space="preserve">
          <source>PyArray_CumProd()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d78d74a26fac672dbb06d209e3168360a883b0" translate="yes" xml:space="preserve">
          <source>PyArray_CumSum()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd41c32619a0a9d019b1f1130db1defb4011048" translate="yes" xml:space="preserve">
          <source>PyArray_DATA()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a4452aeffaceb5bf21c0c1364764ada56f6924" translate="yes" xml:space="preserve">
          <source>PyArray_DESCR()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f684651698025fdb046d1a644561ff2a49f647" translate="yes" xml:space="preserve">
          <source>PyArray_DIM()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30b506aa253ede4493c43ceebeac8ebf956958f" translate="yes" xml:space="preserve">
          <source>PyArray_DIMS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57eec43aabe4cb80877e864d80c54c8b51f952c" translate="yes" xml:space="preserve">
          <source>PyArray_DTYPE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b29da4adb3a7cd22abbb95495622e3c0f8207c7" translate="yes" xml:space="preserve">
          <source>PyArray_Descr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b5de38d0d51af226c386293a7f3b0f8d9ea953" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6387419faebb1e6ff152423f49536985fd8f270" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.byteorder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7122008eaa3d59c35e9a51bd7273878c12f07b3c" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.c_metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c7a18eb58cb94675b412d86b11d87bc13973a0" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.elsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610e2257228c7710829d9c1b51f261f628c98220" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.f</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6baaa4f94095918a3abba70e60f3da1df3daf4a1" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64936403b8312a4ae009d307e1c9a49721491655" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73559a9497ec7b9d4e238ae2f43a5b07702668fc" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ca582a2f71daae5997b6ff68fd2c55b81954e6" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.kind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9036713a976b62ea1d1de07a489828fb5380013d" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0601fe2c3c6a2a9717c198d4315de924f2301c" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619a9a90dd95acdc3aa356c8c0c19b2dc2d0f7d1" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.subarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70fd8a2fd36f4f0f60c01c83ee0e713b5277fab" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9ec1f2a5b43b5e0883dcf3b1edb962bb7ff004" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.type_num</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7694e49398f08848ad5fd09fdf83c75cbb5612c1" translate="yes" xml:space="preserve">
          <source>PyArray_Descr.typeobj</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0287776d00cda7b7e893005ac714e4a59f3cc26" translate="yes" xml:space="preserve">
          <source>PyArray_DescrConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef51e8cd6ceda970fef9b52a909f397175e2598" translate="yes" xml:space="preserve">
          <source>PyArray_DescrConverter2()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0075c6023e558862fcd665172c5b88c2254323e" translate="yes" xml:space="preserve">
          <source>PyArray_DescrFromObject()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abef71bbc15a57f916810a43a70228ea1a0a77e" translate="yes" xml:space="preserve">
          <source>PyArray_DescrFromScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee255f1667c477fd7c3633b171d59667f0e8d3e7" translate="yes" xml:space="preserve">
          <source>PyArray_DescrFromType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7f6bfe88388888dd317ec8e5a7ffeb0508e403" translate="yes" xml:space="preserve">
          <source>PyArray_DescrNew()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29225f4251c13344c9333e42dbc9a08bcf169c1" translate="yes" xml:space="preserve">
          <source>PyArray_DescrNewByteorder()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b30e10be795868e82e5d97011f1d733540b06f9" translate="yes" xml:space="preserve">
          <source>PyArray_DescrNewFromType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27be2b721425ee2ef42663c7944727ca7d688eac" translate="yes" xml:space="preserve">
          <source>PyArray_Diagonal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5cbad05983ca9156dfe5a9c2595eb61a6db4f7" translate="yes" xml:space="preserve">
          <source>PyArray_Dims</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab958e87313e044920d2f791d644c5aeff157d00" translate="yes" xml:space="preserve">
          <source>PyArray_Dims.len</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fcd795099846f4503d0628af03ee1a17e8e6a0" translate="yes" xml:space="preserve">
          <source>PyArray_DiscardWritebackIfCopy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f64d1285aa2e5526f3f81fff07b5332833f5dfd" translate="yes" xml:space="preserve">
          <source>PyArray_Dump()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0475ce6fa48f093a0b32d5dbda0c234ec2259974" translate="yes" xml:space="preserve">
          <source>PyArray_Dumps()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5caebfb1df2de47d6038aab9edba63ae1589053c" translate="yes" xml:space="preserve">
          <source>PyArray_EMPTY()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3311a73887008e3ecbc3a21d80317e359be930d0" translate="yes" xml:space="preserve">
          <source>PyArray_ENABLEFLAGS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba72814e51b5a3c1018c2c1aa56a915d43f6050" translate="yes" xml:space="preserve">
          <source>PyArray_EinsteinSum()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a8643bbd4b796daaa4df62252af7bc0a384431" translate="yes" xml:space="preserve">
          <source>PyArray_Empty()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa67b1df212cbc13818afc84c24e7f48aacd2ad" translate="yes" xml:space="preserve">
          <source>PyArray_EnsureArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d81c146d0d69bdcc26c8812f4e52518ffbcb902" translate="yes" xml:space="preserve">
          <source>PyArray_EquivArrTypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e4763a0ba8fa398e53dd95b75f1c71111ee632" translate="yes" xml:space="preserve">
          <source>PyArray_EquivByteorders()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de91f993936c7c80a04378297b5f51d28e849b8b" translate="yes" xml:space="preserve">
          <source>PyArray_EquivTypenums()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de65eb6a1b0313a3461d4389f921fb8cdd2f9e97" translate="yes" xml:space="preserve">
          <source>PyArray_EquivTypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e86ab8997e7de705445c30f9c90cae3efe8a1b" translate="yes" xml:space="preserve">
          <source>PyArray_FILLWBYTE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5989750d148e66854096271c3cf15873b4b2486" translate="yes" xml:space="preserve">
          <source>PyArray_FLAGS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e20a84afe9f31846afe7af8e53aa5f8472eb22" translate="yes" xml:space="preserve">
          <source>PyArray_FROMANY()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd40e17473d31f78f14f57590a608ed2320fe4f" translate="yes" xml:space="preserve">
          <source>PyArray_FROM_O()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a844f62bc7c5efb79544f42c9700ed6483391" translate="yes" xml:space="preserve">
          <source>PyArray_FROM_OF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e9ea56ea32cfebe9d845055ee363d05e271d6b" translate="yes" xml:space="preserve">
          <source>PyArray_FROM_OT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5455d8d65af47b8910bd82244b7c78970cea91a" translate="yes" xml:space="preserve">
          <source>PyArray_FROM_OTF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4408b93a40877e88555bdeabe793a7f1f7e4153" translate="yes" xml:space="preserve">
          <source>PyArray_FieldNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a441d37899b87b0995ec5faaa017d9478387377d" translate="yes" xml:space="preserve">
          <source>PyArray_FillObjectArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7073c62742c78f0b564d209556115476785cd52b" translate="yes" xml:space="preserve">
          <source>PyArray_FillWithScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929c0bb0adff06b1b113cdb7b636aa153e655f47" translate="yes" xml:space="preserve">
          <source>PyArray_Flatten()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2fec156095c07bd5704abf36f1fa28a15fe5c7" translate="yes" xml:space="preserve">
          <source>PyArray_Free()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b17763fd6c5fb81acbd502774a8b637b5019c9" translate="yes" xml:space="preserve">
          <source>PyArray_FromArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e73b606ea521a207d60ca93a8bb71cf6ecb300d" translate="yes" xml:space="preserve">
          <source>PyArray_FromArrayAttr()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b451a5fd056775b783fcf5a7aaf752d8767fa0db" translate="yes" xml:space="preserve">
          <source>PyArray_FromBuffer()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b506b22bed26dedd4060032f4b619463ebd76057" translate="yes" xml:space="preserve">
          <source>PyArray_FromFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32927ed25682928c1975d331dda037c62801a617" translate="yes" xml:space="preserve">
          <source>PyArray_FromInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41303ff68b58a7e3ad284f9b7ab551939b1aeb2" translate="yes" xml:space="preserve">
          <source>PyArray_FromObject()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e47531a9efb0035e2555d78d1f7e97f0f1da740" translate="yes" xml:space="preserve">
          <source>PyArray_FromScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fb7d427538f7a34239c979b66fc278885b8e7c" translate="yes" xml:space="preserve">
          <source>PyArray_FromString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05c46a1611304ec3c6cebacf1f74fba2f7d976f" translate="yes" xml:space="preserve">
          <source>PyArray_FromStructInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a052916cd66edcb514e82e11ed1c786fb688d011" translate="yes" xml:space="preserve">
          <source>PyArray_GETCONTIGUOUS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8889416077c7cb42ceaca95611e1b1f3038e91" translate="yes" xml:space="preserve">
          <source>PyArray_GETITEM()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64df93f7f4ee76320eae3578bbe951877ea8c16e" translate="yes" xml:space="preserve">
          <source>PyArray_GETPTR1()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dffd3c2ec9703475ecba889c30c03a02e8a9e8" translate="yes" xml:space="preserve">
          <source>PyArray_GETPTR2()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1587f0a89ed3c858893cfcb453b0c9a1ca9ae9d2" translate="yes" xml:space="preserve">
          <source>PyArray_GETPTR3()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f36ae0181a1b44533552763f6065156ee972bb5" translate="yes" xml:space="preserve">
          <source>PyArray_GETPTR4()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c04dcbe3c7d096ec986734b40fa734ad2ad04d" translate="yes" xml:space="preserve">
          <source>PyArray_GetArrayParamsFromObject()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b0d6f5e68616332b5f2344182bbbd0ee2900ff" translate="yes" xml:space="preserve">
          <source>PyArray_GetCastFunc()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08475ecc4bd4891a278717c36f146af9bc0873d" translate="yes" xml:space="preserve">
          <source>PyArray_GetEndianness()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c87e90388435ca11bbe9e73f6a32d0502b652c" translate="yes" xml:space="preserve">
          <source>PyArray_GetNDArrayCFeatureVersion()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611ac458d6287d181a338505cecaa1839025405f" translate="yes" xml:space="preserve">
          <source>PyArray_GetNumericOps()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bfc3c4bafed634d8b72d4b47c5fe89f905129b8" translate="yes" xml:space="preserve">
          <source>PyArray_GetPriority()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484f87ce19c1944905193cbdf171c665c0c2ff24" translate="yes" xml:space="preserve">
          <source>PyArray_HASFIELDS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f9e44f21369b7bcaff3bbe1899bb57fa8ae96b" translate="yes" xml:space="preserve">
          <source>PyArray_HasArrayInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f69d0d3d2165496f1277c7cb9f15fbe13ca7877" translate="yes" xml:space="preserve">
          <source>PyArray_HasArrayInterfaceType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfde34931bb672fde30029d2bf6a89b4b325970" translate="yes" xml:space="preserve">
          <source>PyArray_ISALIGNED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23842c9bdb50fe8da3f6c5e69f44c78406b6de43" translate="yes" xml:space="preserve">
          <source>PyArray_ISBEHAVED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb61da575bce73f9201c4e0b45d6b6f2ab19215" translate="yes" xml:space="preserve">
          <source>PyArray_ISBEHAVED_RO()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dea203b66dc066137b128e85555d2db14638904" translate="yes" xml:space="preserve">
          <source>PyArray_ISBOOL()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc233bdd8f5dd14f2de2247b57b04f1b2406876" translate="yes" xml:space="preserve">
          <source>PyArray_ISBYTESWAPPED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402d53487afc3f42aca3172786c78dd55b26e262" translate="yes" xml:space="preserve">
          <source>PyArray_ISCARRAY()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb8154b34838dae192c2cac9bb439796cf8573b" translate="yes" xml:space="preserve">
          <source>PyArray_ISCARRAY_RO()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe00b9ac1ddbd3af09141f3e74b299dd9120520" translate="yes" xml:space="preserve">
          <source>PyArray_ISCOMPLEX()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a599a02ba6ac2ba99a55cdf40b7e87496b204f0d" translate="yes" xml:space="preserve">
          <source>PyArray_ISEXTENDED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9f47d86511c52eda9ffcbca16dbc611c8842d2" translate="yes" xml:space="preserve">
          <source>PyArray_ISFARRAY()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174ef739f270f852fa1779b42eef8d76a1a5e64f" translate="yes" xml:space="preserve">
          <source>PyArray_ISFARRAY_RO()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad9941d6b57089aea1c9cd5c0bd0418f871058f" translate="yes" xml:space="preserve">
          <source>PyArray_ISFLEXIBLE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d475c315b8650fa118d2283585bc3ff7444724f" translate="yes" xml:space="preserve">
          <source>PyArray_ISFLOAT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9590fbde6bf99fc2096bd307a8f1e5e6638463d0" translate="yes" xml:space="preserve">
          <source>PyArray_ISFORTRAN()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c9dab92cbd5ba4ca7a209b04e4c924e424dec3" translate="yes" xml:space="preserve">
          <source>PyArray_ISINTEGER()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f27ea1d5240c9276bef0c1c36c2290e5ffef570" translate="yes" xml:space="preserve">
          <source>PyArray_ISNOTSWAPPED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b2dc290ef4a29995831a07fabdb15fa13512f2" translate="yes" xml:space="preserve">
          <source>PyArray_ISNUMBER()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d588c82dd2d33577de9581bc7bc64527b211cfe7" translate="yes" xml:space="preserve">
          <source>PyArray_ISOBJECT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f428080190a2bad4c478b49dd39b9e148ed2f1d8" translate="yes" xml:space="preserve">
          <source>PyArray_ISONESEGMENT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b830b8a1899d645226edae4ed881c314c167694d" translate="yes" xml:space="preserve">
          <source>PyArray_ISPYTHON()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8060b4413da3a0dc5f237c792aa262729fb1d393" translate="yes" xml:space="preserve">
          <source>PyArray_ISSIGNED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384d3686c220afb09a9e3e1953f4732ec2d87770" translate="yes" xml:space="preserve">
          <source>PyArray_ISSTRING()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da36f911664fc092219f1545cad39d4dd1d915df" translate="yes" xml:space="preserve">
          <source>PyArray_ISUNSIGNED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd5f48d89b68df10423a0c4c444be49f11d3d8c" translate="yes" xml:space="preserve">
          <source>PyArray_ISUSERDEF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb1f06a67f442b66614f6db744972a071f19f0a" translate="yes" xml:space="preserve">
          <source>PyArray_ISWRITEABLE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d3c4fdb3ec25441e5501e444147295e9d524e1" translate="yes" xml:space="preserve">
          <source>PyArray_IS_C_CONTIGUOUS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fe40ba01f0c60abaa385bfd6ef6711e1ac1a1d" translate="yes" xml:space="preserve">
          <source>PyArray_IS_F_CONTIGUOUS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f0d3aea8b4f772d991bb7c5f27a95edc73ca26" translate="yes" xml:space="preserve">
          <source>PyArray_ITEMSIZE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6f5bdeb5f5ae30fd27e23e5f5bc4741df8fd9d" translate="yes" xml:space="preserve">
          <source>PyArray_ITER_DATA()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ef780f73620e8e69ba7d7178b8a548d716f48c" translate="yes" xml:space="preserve">
          <source>PyArray_ITER_GOTO()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb1746c983a2791e41029054d0396d6da0b4edb" translate="yes" xml:space="preserve">
          <source>PyArray_ITER_GOTO1D()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba4b7f88aca1c841aa7ea00c49130fa52caa46f" translate="yes" xml:space="preserve">
          <source>PyArray_ITER_NEXT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebc3c536df49bfe6e5913fd74677ae5b0dcee66" translate="yes" xml:space="preserve">
          <source>PyArray_ITER_NOTDONE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f6a194693beebbf428f100fb81613b7fc58edc" translate="yes" xml:space="preserve">
          <source>PyArray_ITER_RESET()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e66400a0ffa53ff8cd345eeecf975f2e8f8a46" translate="yes" xml:space="preserve">
          <source>PyArray_InnerProduct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338705cda57c1abf5c32b87b28c5848c5a5d3a6a" translate="yes" xml:space="preserve">
          <source>PyArray_IntpConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f204ee8507633c13e59ed67d9991a39d31d148" translate="yes" xml:space="preserve">
          <source>PyArray_IntpFromSequence()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bd727a9c44fcd1210fefb3e2d7f06d78b574b9" translate="yes" xml:space="preserve">
          <source>PyArray_IsAnyScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6814f015e80f1b08744e51855b17fc531d026152" translate="yes" xml:space="preserve">
          <source>PyArray_IsPythonNumber()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827c2551044c01a9029530a5ed1b2c6822cd9ed5" translate="yes" xml:space="preserve">
          <source>PyArray_IsPythonScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47502b21c422da7c56fb2a99a29d7b0cd0988ab7" translate="yes" xml:space="preserve">
          <source>PyArray_IsScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e50b5031b9a32a4c06f575acf3b3af30934729a" translate="yes" xml:space="preserve">
          <source>PyArray_IsZeroDim()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a89dd5eada29a697440bbcdb6b9e01a0f2a1181" translate="yes" xml:space="preserve">
          <source>PyArray_Item_INCREF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104cd36cc3164bbcde0298d6de21699e32a3f1da" translate="yes" xml:space="preserve">
          <source>PyArray_Item_XDECREF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59918c6d12597857be0e2d308b2a3555f69de3c" translate="yes" xml:space="preserve">
          <source>PyArray_IterAllButAxis()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762ed6803d3e136b9795aac092328c97770fe092" translate="yes" xml:space="preserve">
          <source>PyArray_LexSort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5722e618250919d4d5ecb0c7fe7544e6f8bcc69" translate="yes" xml:space="preserve">
          <source>PyArray_MAX()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaaa5f65d695c830e9939e4339b9e1aa7b91874" translate="yes" xml:space="preserve">
          <source>PyArray_MIN()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604674bc5556b91d302f61e035ce8a482ce4ccce" translate="yes" xml:space="preserve">
          <source>PyArray_MatrixProduct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c58f25ecae906afe8eb7cc7de02b5db7ced817b" translate="yes" xml:space="preserve">
          <source>PyArray_MatrixProduct2()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59fa58b0190014947c934760e6da99bba788f97" translate="yes" xml:space="preserve">
          <source>PyArray_Max()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944a42b3fa5021dcdb56c3742980b77b88fc100f" translate="yes" xml:space="preserve">
          <source>PyArray_Mean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07422332eead792e8cfa261dc3ed365fd7a04c11" translate="yes" xml:space="preserve">
          <source>PyArray_Min()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82c89c038ac404c2c8a579d044d7f29f944e5ab" translate="yes" xml:space="preserve">
          <source>PyArray_MinScalarType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bca4ace091e7f522ebff1f3d755aef93f15d7f" translate="yes" xml:space="preserve">
          <source>PyArray_MoveInto()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deeb843166f8f31ccb63959c437995641749c4f5" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_DATA()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af173e3f6bd9df638e49c21e417475ab8fd86824" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_GOTO()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ded4230cc141d89e62a436cd19451fbcb7a0077" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_GOTO1D()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5190983ca46d15bb1be9a33edc6026684f635d91" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_NEXT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa7537ac43f3cb4def3f40a50cb218c1cea95ea" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_NEXTi()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f694ce99e48d6fb21fe1b3115505cc566a5c662" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_NOTDONE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5c84e6c13f6bd252c23b1c63c544b846b8e8c3" translate="yes" xml:space="preserve">
          <source>PyArray_MultiIter_RESET()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0d09d5e5d6ae26809936216682ab1fca0a7ec2" translate="yes" xml:space="preserve">
          <source>PyArray_MultiplyIntList()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bce4f553a4b4c6f360082fa1ec4589a9b1b3cc8" translate="yes" xml:space="preserve">
          <source>PyArray_MultiplyList()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3f66218656eafc59c4dcc8606d18fa24139d0e" translate="yes" xml:space="preserve">
          <source>PyArray_NBYTES()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32dfce3db15b67202beb248c9df641ab994a868" translate="yes" xml:space="preserve">
          <source>PyArray_New()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6bd461970625bfdd1094916b3d6a9d8972793e" translate="yes" xml:space="preserve">
          <source>PyArray_NewCopy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ebb499bbdd19694ab06c652fff3ba3d5582fb1" translate="yes" xml:space="preserve">
          <source>PyArray_NewLikeArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667f86d27c5d2d8a2bf78c70bcea9687267ad823" translate="yes" xml:space="preserve">
          <source>PyArray_Nonzero()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada22e5d1f77e2673878e8019e915b8207fe8d6a" translate="yes" xml:space="preserve">
          <source>PyArray_ObjectType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d9cf06c94bc089b3324078fc017084b9a283ee" translate="yes" xml:space="preserve">
          <source>PyArray_One()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d602627a598608b65546cfd220ce1d4eff37ff3f" translate="yes" xml:space="preserve">
          <source>PyArray_OrderConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e248db64b5ea276d9e5a6f5032a789d12cce7495" translate="yes" xml:space="preserve">
          <source>PyArray_OutputConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02905730e1f5527ffa6374b348375c48dde7fc4" translate="yes" xml:space="preserve">
          <source>PyArray_Partition()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310ca378950ce72ede3d88b6bf292f4411cd2369" translate="yes" xml:space="preserve">
          <source>PyArray_Prod()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbaa022f639a79f73e373f98196b6af7c8d77df" translate="yes" xml:space="preserve">
          <source>PyArray_PromoteTypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb34a34362cd24a7c8c8bafe1ac3beac2d0524ec" translate="yes" xml:space="preserve">
          <source>PyArray_Ptp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8d88141ccc996a05a5225abcc33de3fc175ca4" translate="yes" xml:space="preserve">
          <source>PyArray_PutMask()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02357dc21b11a9e53f5fd463e94f3d0e7212a09d" translate="yes" xml:space="preserve">
          <source>PyArray_PutTo()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f66f70c0070da850cd04bd121e0a287189c7b0" translate="yes" xml:space="preserve">
          <source>PyArray_PyIntAsIntp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c3032399fa265f62569bbae6200477d1f38b30" translate="yes" xml:space="preserve">
          <source>PyArray_REFCOUNT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf5c1c1e4965a10ccaa0e8a3777b65f8e5c529c" translate="yes" xml:space="preserve">
          <source>PyArray_Ravel()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247433c7dfc590242acf6dd4694daf0e5fe7f669" translate="yes" xml:space="preserve">
          <source>PyArray_RegisterCanCast()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356c8ad085161845552abcc77ecd1a016695675e" translate="yes" xml:space="preserve">
          <source>PyArray_RegisterCastFunc()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e515906e70e60651c5086ca39a2546c651c9237" translate="yes" xml:space="preserve">
          <source>PyArray_RegisterDataType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a6743988d6b61fbd674ccead05a2eb08e7a57b" translate="yes" xml:space="preserve">
          <source>PyArray_RemoveSmallest()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f783c9a8fde425a93eae13c7ce68041017625d6" translate="yes" xml:space="preserve">
          <source>PyArray_Repeat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552fbc26ac2bbc77b441b7c05cc857bf66b9473a" translate="yes" xml:space="preserve">
          <source>PyArray_Reshape()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf8a0a10f7d389a466e468de06efa25d404e1cd" translate="yes" xml:space="preserve">
          <source>PyArray_Resize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f21b52df98a8b37ff13d36695599d30270396c8" translate="yes" xml:space="preserve">
          <source>PyArray_ResolveWritebackIfCopy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1bf78a91431bf3896bfdf5e12e4d6162f04ada" translate="yes" xml:space="preserve">
          <source>PyArray_ResultType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92191b573fee21c3f8c2a51d6a1ef59b6273961f" translate="yes" xml:space="preserve">
          <source>PyArray_Round()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b61293cd13267e39e49573c34d252a7830b18d" translate="yes" xml:space="preserve">
          <source>PyArray_SETITEM()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbb5ed41a8d226ec5783408efe0e0e85b9ee9b4" translate="yes" xml:space="preserve">
          <source>PyArray_SHAPE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6d06c5b1c3ab467c87962123721cca259a0398" translate="yes" xml:space="preserve">
          <source>PyArray_SIZE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fe8d3ef7ff87ab00a5d09c3e892ed1a7f8c132" translate="yes" xml:space="preserve">
          <source>PyArray_STRIDE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767ae8f3f1ded195b4050279ae2e893ff180a765" translate="yes" xml:space="preserve">
          <source>PyArray_STRIDES()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987321383bbf7a0c64deae8512c9f1aafd9601bf" translate="yes" xml:space="preserve">
          <source>PyArray_Scalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9b5aadbbabc98fa1e9dcf10ae706cd5b364d4c" translate="yes" xml:space="preserve">
          <source>PyArray_ScalarAsCtype()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60608738f0a155b01940497c68ff48e10981ffb" translate="yes" xml:space="preserve">
          <source>PyArray_ScalarKind()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8087fa716fa9879b97f9524925f9f891d1fa4d4" translate="yes" xml:space="preserve">
          <source>PyArray_SearchSorted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f876c117020356e6027f28b37bb700d5675a3d2a" translate="yes" xml:space="preserve">
          <source>PyArray_SearchsideConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef8dca4cc4305b0f327f3adbd208f2ff510ec6e" translate="yes" xml:space="preserve">
          <source>PyArray_SetBaseObject()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f144af2b424d54b77e0a4eaece4ecafca1d7da" translate="yes" xml:space="preserve">
          <source>PyArray_SetField()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b0e52bf07f4302d085678a8f45a84202d16484" translate="yes" xml:space="preserve">
          <source>PyArray_SetStringFunction()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1919471560f7b619e88757d2aed597f9fde437" translate="yes" xml:space="preserve">
          <source>PyArray_SetUpdateIfCopyBase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabd88c8d9c1bb1cdc97a155b6cfdd4f55c4da1a" translate="yes" xml:space="preserve">
          <source>PyArray_SetWritebackIfCopyBase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e462bee198276266e9897860173afd78d0d82ea" translate="yes" xml:space="preserve">
          <source>PyArray_SimpleNew()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e522a919e8baec80245175eac14b04d066f8883e" translate="yes" xml:space="preserve">
          <source>PyArray_SimpleNewFromData()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261246eb93bf4bc9b6a037155f0f9703e14ae560" translate="yes" xml:space="preserve">
          <source>PyArray_SimpleNewFromDescr()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737325485feb9ea1e92ed115ae3905433cef9678" translate="yes" xml:space="preserve">
          <source>PyArray_Size()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1827338dfb539485c50b2956457d2b4074f921db" translate="yes" xml:space="preserve">
          <source>PyArray_Sort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f825aa98e4ef242b5811917aa90a22d141882b6" translate="yes" xml:space="preserve">
          <source>PyArray_SortkindConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011c3e6fa896b47180af2a051410b79ce2ea1e5e" translate="yes" xml:space="preserve">
          <source>PyArray_Squeeze()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0279581e05b063dac45e80ac997f9fd77d1fafef" translate="yes" xml:space="preserve">
          <source>PyArray_Std()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b0d51ffd5a2e01c2959aad98d3e1f7c4142995" translate="yes" xml:space="preserve">
          <source>PyArray_Sum()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660d7b348db641761219288a4ffc4d1ebee92b4c" translate="yes" xml:space="preserve">
          <source>PyArray_SwapAxes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72977c0aa08280f9ffae390542f7310c8b449acc" translate="yes" xml:space="preserve">
          <source>PyArray_TYPE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39ddac900a8199994195fa9565e6f31777693a5" translate="yes" xml:space="preserve">
          <source>PyArray_ToFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9c6b7d8e1c0b3cc0a39ba734622132fad435f2" translate="yes" xml:space="preserve">
          <source>PyArray_ToList()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a97ac7991ff9d120f5becd6382041b8c14521c" translate="yes" xml:space="preserve">
          <source>PyArray_ToScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf22fcee460dc80d6ccffca7be3572adf3dfd62" translate="yes" xml:space="preserve">
          <source>PyArray_ToString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c42c70df60b974bb107dca75d80c92c5b8b6428" translate="yes" xml:space="preserve">
          <source>PyArray_Trace()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37744542a96fba3baf14d56570dec84abd845b00" translate="yes" xml:space="preserve">
          <source>PyArray_Transpose()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc9b7833db2fff12f0d2f47e8720b93df20e56f" translate="yes" xml:space="preserve">
          <source>PyArray_Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594c28f3b974ef5d10b68c8736fbf45fb7ff3dff" translate="yes" xml:space="preserve">
          <source>PyArray_Type and PyArrayObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7800f6ba21ad97e2ff704f3dcf89c96e3b541a00" translate="yes" xml:space="preserve">
          <source>PyArray_TypeObjectFromType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d48df8dbf7854fe7636d194389eb0fcb3ef952" translate="yes" xml:space="preserve">
          <source>PyArray_TypestrConvert()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d3339c8597727c89987e1552ede6ccdc091995" translate="yes" xml:space="preserve">
          <source>PyArray_UpdateFlags()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f44e4ab98a8dfc9a292719ee7b3ddbff84a0795" translate="yes" xml:space="preserve">
          <source>PyArray_ValidType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b697ca234be900f04a6559fff4a796fc601502" translate="yes" xml:space="preserve">
          <source>PyArray_View()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65605d097d419368e49dc7706d253259edb2db42" translate="yes" xml:space="preserve">
          <source>PyArray_Where()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c5e63294bc626ec01da4ee338082826003abc2" translate="yes" xml:space="preserve">
          <source>PyArray_XDECREF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b856d11f32ba1b072678cfd1ff91b44d780a2b73" translate="yes" xml:space="preserve">
          <source>PyArray_XDECREF_ERR()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2894f8fadfb805f65543188a32ab03014f8b5b60" translate="yes" xml:space="preserve">
          <source>PyArray_ZEROS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4a016f9d5ca6c1cef2838c51e2c1ea3c518e99" translate="yes" xml:space="preserve">
          <source>PyArray_Zero()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dd347312b36dd08113a061584cfa2fde8ac1ac" translate="yes" xml:space="preserve">
          <source>PyArray_Zeros()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec2ce3543b3248a23c79307482634c0645a0beb" translate="yes" xml:space="preserve">
          <source>PyArray_free()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1912edcf41db630d12bc1246d6f18b5c2fb5cc29" translate="yes" xml:space="preserve">
          <source>PyArray_malloc()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e04119f59c87caaf06b6ae76da66454e27aafab" translate="yes" xml:space="preserve">
          <source>PyArray_realloc()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a34e3eba7e2fb202fcfdb99f66148b4eb1daf4e" translate="yes" xml:space="preserve">
          <source>PyDataMem_FREE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa015ca9d1b36f64b21ab5c9051270db4ab7f99" translate="yes" xml:space="preserve">
          <source>PyDataMem_RENEW()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f589a7cd640c3cb2df2c7d0a6b3b7a986c7a91ea" translate="yes" xml:space="preserve">
          <source>PyDataType_FLAGCHK()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd44018931e1571bc3a10a760cca375b5e4823e7" translate="yes" xml:space="preserve">
          <source>PyDataType_HASFIELDS()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc17f04f14ccdd0cf539dee4821d44a7d6425cb3" translate="yes" xml:space="preserve">
          <source>PyDataType_ISBOOL()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558d9679d47969de6b6fa1104f6947543d390a6a" translate="yes" xml:space="preserve">
          <source>PyDataType_ISCOMPLEX()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4b235e7cd8c97ae06ff7e0c9f6f1f3c69ffae2" translate="yes" xml:space="preserve">
          <source>PyDataType_ISEXTENDED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db22dd0e0ca0cb8a51f979d196fc1628f63fc44" translate="yes" xml:space="preserve">
          <source>PyDataType_ISFLEXIBLE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301396572c9c0d414f7959359346cdf1e15a9d88" translate="yes" xml:space="preserve">
          <source>PyDataType_ISFLOAT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84d2ccec31c19dc1085dae09bb150c6e4a8eeba" translate="yes" xml:space="preserve">
          <source>PyDataType_ISINTEGER()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d0b4b38e14df1a99fd960eae0ce1a1942089e5" translate="yes" xml:space="preserve">
          <source>PyDataType_ISNUMBER()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb376c9d4739b9ea2eb6a505918bfadb62c7b2ab" translate="yes" xml:space="preserve">
          <source>PyDataType_ISOBJECT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4d1b2d8e758513bb70ad18eb530ec372c45b5b" translate="yes" xml:space="preserve">
          <source>PyDataType_ISPYTHON()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321602d1c72f986de72f5a6d935a30fdc6719d34" translate="yes" xml:space="preserve">
          <source>PyDataType_ISSIGNED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a92f831c69a6ebffa7102c47f357586fd5e627" translate="yes" xml:space="preserve">
          <source>PyDataType_ISSTRING()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef50f9a25bb6d6c09d83efda06e7999595bbe116" translate="yes" xml:space="preserve">
          <source>PyDataType_ISUNSIGNED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493c826fdd279377c0d125b0a423d6cdea567b06" translate="yes" xml:space="preserve">
          <source>PyDataType_ISUSERDEF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29011562997e4c9e893d29aec1c01dd9ec18c06d" translate="yes" xml:space="preserve">
          <source>PyDataType_REFCHK()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600039974e2a07f5b2016f633ee6b4e486b0562c" translate="yes" xml:space="preserve">
          <source>PyDimMem_FREE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051fecc6152e5f03015a9de4e01d5c5c86c4d81d" translate="yes" xml:space="preserve">
          <source>PyDimMem_NEW()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc217aee7def4bd463a2f3b4633e44d7c73b15b3" translate="yes" xml:space="preserve">
          <source>PyDimMem_RENEW()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0779dcb12025850b3949722fe75eb211e4369779" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISBOOL()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cea6e58aa672043afe4c01e0d427f7339bb4e6" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISCOMPLEX()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e262e36afde185251d3f58bf8d8cd060a5f973fd" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISEXTENDED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b389a31508f56c3da145bd4ffe4bfc690e3012ac" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISFLEXIBLE()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabf2f2ecdbcabc01c367b1b59828d2881615e75" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISFLOAT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b97d9fdf436f8518504cca27ad89895cd5a93c0" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISINTEGER()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cd946706b38d0cdd591c958573166d9e4142c2" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISNUMBER()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee2047622a365a58de7a7153da0dc48ed54656a" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISOBJECT()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f630374c4eb98477fc753f2b90d3d1a609554782" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISPYTHON()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa9ca6301525c6800794751b18c078aef17454e" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISSIGNED()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7b2d688f9e076f918a8e424a54d6c2e439134d" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISSTRING()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10abc0e22cb74a4c01cf1d39df907747a05fd0b0" translate="yes" xml:space="preserve">
          <source>PyTypeNum_ISUSERDEF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf51d78973152cdc0125743aa1585dd1a6ac680d" translate="yes" xml:space="preserve">
          <source>PyUFuncObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2e0399cafda58881cacd67f4456c04943a4daa" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_dim_flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75702a991a6166c813af252efa22f3e3cd78b274" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_dim_ixs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa68bb0c0e659e0f8e519009749ffdbd8d0260d" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_dim_sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c77bb85f3e2ff363a89f13fa6df42a957bda7a0" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b77524c1545038334d4331518f77e9144e740c" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_num_dim_ix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b89911b585a13cc3ff0673e1a63eb8e56d191fd" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_num_dims</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef445e128415788a6ea33a53616333b41a1e856" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_offsets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f0b937cc7596200bf918f95b189b57c0de1a45" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.core_signature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfb14036f13179222e6da9a5bca8360d4ab5a65" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08ea39560b853c9555b1a3a223397b9703e528f" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.doc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9333eb6592dfbb46b9198a41ff7e959ba1da5503" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.functions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909721e731f7e30cc7d204f46c87fd010de56342" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.identity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4a7e5f8f0e564fc41da74ad7b10d239d7dbd9c" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.iter_flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a04c6b87dea4250127a971de7f2a12594f3bf64" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.legacy_inner_loop_selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336966fc92a00d2e1f4ea6d3d98e0126008c55bb" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.masked_inner_loop_selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65196fe815f403b3ae38206cb703a362253a5b09" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee10f6a5b2475569ddaf774dc04653a4f4de66c" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.nargs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cec83aa27d6eff49d4c82b6553eda975670f353" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.nout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f5912f528a5d7c0e0972c0e88dec798fe5a52d" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.ntypes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90594b85fd4614482d14799c6d118752a5975aa" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.obj</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fce17f51d07f9d90031acf5c37ed0cd0a3257a8" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.op_flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d0fe4864266d8ed71406556b896e35b32f4003" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.ptr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906b2acab8bb8bbde8a874a81a0ab29ca75b3489" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.reserved1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d200a67b548b1c100cbd6b82f05fa1f9655be355" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.reserved2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ea01718b92eb287afe8014606e0b2cc2a1421b" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.type_resolver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b1cc2185fc49b8cc62d45dde4f003014dab425" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1923ac0740c25a4b8b4aac9ee5b3a580af8e58eb" translate="yes" xml:space="preserve">
          <source>PyUFuncObject.userloops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e211ebbeb9836d70bdc863eb10b5e2ddfd228c" translate="yes" xml:space="preserve">
          <source>PyUFuncReduceObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b09e68f944ff820f420ae2f7c44e2575dfd2a5" translate="yes" xml:space="preserve">
          <source>PyUFunc_DD_D()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736aa48d4fd7cbe96067d6fc2a01f4a2871fad1a" translate="yes" xml:space="preserve">
          <source>PyUFunc_D_D()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ef9a956d1ff48c5c44694037d82e977028bcc2" translate="yes" xml:space="preserve">
          <source>PyUFunc_FF_F()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6718fb9b057edaa55e4dcda41fcbfd7589a583" translate="yes" xml:space="preserve">
          <source>PyUFunc_FF_F_As_DD_D()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695527397930a6f95493f22ca3bc6d494eab6d3e" translate="yes" xml:space="preserve">
          <source>PyUFunc_F_F()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e281b4a00f57ad418631b202586491ad3f5a88" translate="yes" xml:space="preserve">
          <source>PyUFunc_F_F_As_D_D()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c1087503b4134fc5c7d2c10bd9ec9b3fc8df72" translate="yes" xml:space="preserve">
          <source>PyUFunc_FromFuncAndDataAndSignature()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085f1a1451aade3d9e6cbbc99953d08d9e4e4231" translate="yes" xml:space="preserve">
          <source>PyUFunc_GG_G()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0f6909e84d471e302dc1c6f272e447ae13bbd2" translate="yes" xml:space="preserve">
          <source>PyUFunc_G_G()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d41d188f6fd772d21b81dd16990452a86187ba7" translate="yes" xml:space="preserve">
          <source>PyUFunc_GenericFunction()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d396509cce573da2307c4b36ca48b8a4e7466b" translate="yes" xml:space="preserve">
          <source>PyUFunc_GetPyValues()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec2f42fca7067d6b9bca719c31cc21cfb9bf538" translate="yes" xml:space="preserve">
          <source>PyUFunc_Loop1d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93bc0f94717cfd5865e9ab3cab03b2e8e280cabf" translate="yes" xml:space="preserve">
          <source>PyUFunc_OO_O()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cebe29c224de361501f2435f3ecf8f37227532d" translate="yes" xml:space="preserve">
          <source>PyUFunc_OO_O_method()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4cf3784b3d41e180e4ea8e8bc4bbe307a4a1ca" translate="yes" xml:space="preserve">
          <source>PyUFunc_O_O()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023a56c1282e32cd104f6083932d2d67eeb5bf61" translate="yes" xml:space="preserve">
          <source>PyUFunc_O_O_method()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd58bb1d2149609dbe931fccaee6f6c48ecd504" translate="yes" xml:space="preserve">
          <source>PyUFunc_On_Om()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bbb127a23ddd5167053334ceb8d9deab020d00" translate="yes" xml:space="preserve">
          <source>PyUFunc_RegisterLoopForDescr()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea41213e5cc62cac2c444601ba3cc173b72cab0" translate="yes" xml:space="preserve">
          <source>PyUFunc_RegisterLoopForType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d7f72d33dbe3c53175177bf8b33d99d101301f" translate="yes" xml:space="preserve">
          <source>PyUFunc_ReplaceLoopBySignature()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467c7010bd37d3badc9fd9dfa73b5b254ea8f7fb" translate="yes" xml:space="preserve">
          <source>PyUFunc_Type and PyUFuncObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8005a3cf6c4aa7b550e14683331a9ed6d2a18c" translate="yes" xml:space="preserve">
          <source>PyUFunc_checkfperr()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb6b1e460926f0a09f9f9a72a493c5977d95454" translate="yes" xml:space="preserve">
          <source>PyUFunc_clearfperr()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b4d2ce83b2383403a1cc4bdedf012fb356e641" translate="yes" xml:space="preserve">
          <source>PyUFunc_d_d()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c540695f855ecba9d86960742ec2b8a0b8bde54" translate="yes" xml:space="preserve">
          <source>PyUFunc_dd_d()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2b2cc628995a0b6493c742ad8973ab292fedc5" translate="yes" xml:space="preserve">
          <source>PyUFunc_e_e()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d107246aca7d6928a73824a3681c10ecf1b77f" translate="yes" xml:space="preserve">
          <source>PyUFunc_e_e_As_d_d()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea21298d9d8e808ea678e6cfb44e7af40663977" translate="yes" xml:space="preserve">
          <source>PyUFunc_e_e_As_f_f()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a117654700bd2fb142b30a8f1060b2e670bb1ac5" translate="yes" xml:space="preserve">
          <source>PyUFunc_ee_e()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a1651e1d466a5f3e3fe4481956b9ad57a2e735" translate="yes" xml:space="preserve">
          <source>PyUFunc_ee_e_As_dd_d()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb64aa76a11a354cf112c80d048dcb5120cbc2f0" translate="yes" xml:space="preserve">
          <source>PyUFunc_ee_e_As_ff_f()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4482724a41218a67fa0f71a607ce6db013937bb5" translate="yes" xml:space="preserve">
          <source>PyUFunc_f_f()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f210a705cbe34a9d0502f3395d30bd59fe1fc513" translate="yes" xml:space="preserve">
          <source>PyUFunc_ff_f()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4e0d787918fef79c7768d4800d40edc0b74da3" translate="yes" xml:space="preserve">
          <source>PyUFunc_ff_f_As_dd_d()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800dc5fe9d98d85b22b304a0f2940c43add76196" translate="yes" xml:space="preserve">
          <source>PyUFunc_g_g()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5e6a2e697f933504b5ddbe7d7cfbaf9d496910" translate="yes" xml:space="preserve">
          <source>PyUFunc_gg_g()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871db2cab08565c149c950b7631d99d3e958c6cd" translate="yes" xml:space="preserve">
          <source>Py_intptr_t (an integer that is the size of a pointer on the platform).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674f7dd25f85b83faee4a4958f56ecac79ddb09e" translate="yes" xml:space="preserve">
          <source>Pyarray_DescrAlignConverter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e543e61be9c0f8b44dffb11c98955a8355bf44d" translate="yes" xml:space="preserve">
          <source>Pyarray_DescrAlignConverter2()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5721a187083db6928ac88ec2070a34ed1619ddf7" translate="yes" xml:space="preserve">
          <source>Python 3.7&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/dev/library/math.html#math.remainder&quot;&gt;&lt;code&gt;math.remainder&lt;/code&gt;&lt;/a&gt; and C&amp;rsquo;s &lt;code&gt;remainder&lt;/code&gt;, which computes the IEEE remainder, which are the complement to &lt;code&gt;round(x1 / x2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4a533e8727bd1460e4fab154ecfc44e80f3dad" translate="yes" xml:space="preserve">
          <source>Python Types and C-Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9918e60c7561b1d242d43444f0f2c694aab739d" translate="yes" xml:space="preserve">
          <source>Python buffer object pointing to the start of the array&amp;rsquo;s data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107d9fec3291fe3925ccde87b1bad232cebecd1d" translate="yes" xml:space="preserve">
          <source>Python bytes exhibiting a copy of &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s raw data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c1712b30a57351dbb2644643e9a18f158dd80a" translate="yes" xml:space="preserve">
          <source>Python defines only one type of a particular data class (there is only one integer type, one floating-point type, etc.). This can be convenient in applications that don&amp;rsquo;t need to be concerned with all the ways data can be represented in a computer. For scientific computing, however, more control is often needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5210661a1d172ff288fde48cef27d0dc81ddc5" translate="yes" xml:space="preserve">
          <source>Python extensions are especially straightforward to understand because they all have a very similar structure. Admittedly, NumPy is not a trivial extension to Python, and may take a little more snooping to grasp. This is especially true because of the code-generation techniques, which simplify maintenance of very similar code, but can make the code a little less readable to beginners. Still, with a little persistence, the code can be opened to your understanding. It is my hope, that this guide to the C-API can assist in the process of becoming familiar with the compiled-level work that can be done with NumPy in order to squeeze that last bit of necessary speed out of your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8510c21a51607b9b82e11a933bd95004753d4078" translate="yes" xml:space="preserve">
          <source>Python side</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1dc5f1ae8c29d72145e3040337d1c666fd7fb1" translate="yes" xml:space="preserve">
          <source>Python types are the functional equivalent in C of classes in Python. By constructing a new Python type you make available a new object for Python. The ndarray object is an example of a new type defined in C. New types are defined in C by two basic steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715cae7fd226560086dae94ad144273420976abb" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s built-in binary representation generator of an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f45cff7b86d765154bd14092545b47b7c3dd96" translate="yes" xml:space="preserve">
          <source>Python-side of the array interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f07dadd16bca01495aa54ac0a3947dc7700c6e6" translate="yes" xml:space="preserve">
          <source>Quadrature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be19305c9a1d0f25c04fa229c87c646353945ad4" translate="yes" xml:space="preserve">
          <source>Quantile or sequence of quantiles to compute, which must be between 0 and 1 inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c93e99f707ede79832686e563a953712781337" translate="yes" xml:space="preserve">
          <source>Quarteroni A., Sacco R., Saleri F. (2007) Numerical Mathematics (Texts in Applied Mathematics). New York: Springer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455083cac2ae96eabe3895762b6080aa09e6afa4" translate="yes" xml:space="preserve">
          <source>Quick Start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f2fbad266ea6fa84903378852c12081041ede4" translate="yes" xml:space="preserve">
          <source>Quick comparison of legacy &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/reference/random/legacy&quot;&gt;mtrand&lt;/a&gt; to the new &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9dc47a605c19f74107aba0ff721a07067a35347" translate="yes" xml:space="preserve">
          <source>Quick, inline access to the element at the given coordinates in the ndarray, &lt;em&gt;obj&lt;/em&gt;, which must have respectively 1, 2, 3, or 4 dimensions (this is not checked). The corresponding &lt;em&gt;i&lt;/em&gt;, &lt;em&gt;j&lt;/em&gt;, &lt;em&gt;k&lt;/em&gt;, and &lt;em&gt;l&lt;/em&gt; coordinates can be any integer but will be interpreted as &lt;code&gt;npy_intp&lt;/code&gt;. You may want to typecast the returned pointer to the data type of the ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b4790aa17c559e7d49a02300f66e5acc09c7cc" translate="yes" xml:space="preserve">
          <source>R&amp;rsquo;s default method, only accounts for data size. Only optimal for gaussian data and underestimates number of bins for large non-gaussian datasets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e466c180b85dc9031af2b5a4c5651b82eb9bc974" translate="yes" xml:space="preserve">
          <source>R. A. Horn &amp;amp; C. R. Johnson, &lt;em&gt;Matrix Analysis&lt;/em&gt;. Cambridge, UK: Cambridge University Press, 1999, pp. 146-7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0b90e934e6d467ca649dfa3f62c4e10ef88561" translate="yes" xml:space="preserve">
          <source>RNG advanced delta steps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6545a50315a74fecf9e90f28c368f4752be2bd37" translate="yes" xml:space="preserve">
          <source>Radix in which numbers are represented.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
