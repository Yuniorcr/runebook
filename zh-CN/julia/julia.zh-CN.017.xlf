<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="julia">
    <body>
      <group id="julia">
        <trans-unit id="5ceceb2486ccd5ed28c46e3a7fb7253907cdad00" translate="yes" xml:space="preserve">
          <source>U+1F42A</source>
          <target state="translated">U+1F42A</target>
        </trans-unit>
        <trans-unit id="c4e1a86f6e244ec6c9c71ce10db136e8178076d3" translate="yes" xml:space="preserve">
          <source>U+1F42B</source>
          <target state="translated">U+1F42B</target>
        </trans-unit>
        <trans-unit id="a217269a8219b6c59e7ff45c9a17b41b86eb9503" translate="yes" xml:space="preserve">
          <source>U+1F42C</source>
          <target state="translated">U+1F42C</target>
        </trans-unit>
        <trans-unit id="03d40d1c6b31234519daa56863c17ce3ec19590e" translate="yes" xml:space="preserve">
          <source>U+1F42D</source>
          <target state="translated">U+1F42D</target>
        </trans-unit>
        <trans-unit id="d09a1b6bd3b218a3c9c10ed120a35d430f3d5e59" translate="yes" xml:space="preserve">
          <source>U+1F42E</source>
          <target state="translated">U+1F42E</target>
        </trans-unit>
        <trans-unit id="41096a001ac9900c08b0a6f03e4c4880fa798a40" translate="yes" xml:space="preserve">
          <source>U+1F42F</source>
          <target state="translated">U+1F42F</target>
        </trans-unit>
        <trans-unit id="ce0c65ba95cc74a938cdd7db2c0fc9e09e200b98" translate="yes" xml:space="preserve">
          <source>U+1F430</source>
          <target state="translated">U+1F430</target>
        </trans-unit>
        <trans-unit id="570cc322d4592ac37ef88f7354f781fbd3f7dd82" translate="yes" xml:space="preserve">
          <source>U+1F431</source>
          <target state="translated">U+1F431</target>
        </trans-unit>
        <trans-unit id="9c864d0ee2df8a1a633d1994f7601766e580ebb7" translate="yes" xml:space="preserve">
          <source>U+1F432</source>
          <target state="translated">U+1F432</target>
        </trans-unit>
        <trans-unit id="d4b1640751c5c26567a7b6b128e679fe64f3e775" translate="yes" xml:space="preserve">
          <source>U+1F433</source>
          <target state="translated">U+1F433</target>
        </trans-unit>
        <trans-unit id="2bc7df3feb10fad4104c39c8bb20378c79859a1e" translate="yes" xml:space="preserve">
          <source>U+1F434</source>
          <target state="translated">U+1F434</target>
        </trans-unit>
        <trans-unit id="cae056a996beda2f0d93653fae9970f72f9311c6" translate="yes" xml:space="preserve">
          <source>U+1F435</source>
          <target state="translated">U+1F435</target>
        </trans-unit>
        <trans-unit id="b78987de3ef14e350a1661aebc3db39095f1b861" translate="yes" xml:space="preserve">
          <source>U+1F436</source>
          <target state="translated">U+1F436</target>
        </trans-unit>
        <trans-unit id="b216d0d60d7bdde073e228b68c556be5c4dbb94f" translate="yes" xml:space="preserve">
          <source>U+1F437</source>
          <target state="translated">U+1F437</target>
        </trans-unit>
        <trans-unit id="d86b596c0533e6bcaa98aa2c23e31f02f5d9cb74" translate="yes" xml:space="preserve">
          <source>U+1F438</source>
          <target state="translated">U+1F438</target>
        </trans-unit>
        <trans-unit id="38709e4c4e77aeb32a8fa0f137ed970c146580b4" translate="yes" xml:space="preserve">
          <source>U+1F439</source>
          <target state="translated">U+1F439</target>
        </trans-unit>
        <trans-unit id="840211e2fe5d7c347c1021a9d5ae449741774902" translate="yes" xml:space="preserve">
          <source>U+1F43A</source>
          <target state="translated">U+1F43A</target>
        </trans-unit>
        <trans-unit id="e31eebda62576e3c36c3d949665a96304be548b4" translate="yes" xml:space="preserve">
          <source>U+1F43B</source>
          <target state="translated">U+1F43B</target>
        </trans-unit>
        <trans-unit id="7b0f92231b2b0b9ac3319c9cd41b8778a8e23b7f" translate="yes" xml:space="preserve">
          <source>U+1F43C</source>
          <target state="translated">U+1F43C</target>
        </trans-unit>
        <trans-unit id="dfb9a070160a15a2becea9db570d8ba4b8b7d939" translate="yes" xml:space="preserve">
          <source>U+1F43D</source>
          <target state="translated">U+1F43D</target>
        </trans-unit>
        <trans-unit id="a3668a8b44562c33e9ac968e74d8a17017a5e78d" translate="yes" xml:space="preserve">
          <source>U+1F43E</source>
          <target state="translated">U+1F43E</target>
        </trans-unit>
        <trans-unit id="a71aaf605f34573a90ab9e72a74c84c616a73ee5" translate="yes" xml:space="preserve">
          <source>U+1F440</source>
          <target state="translated">U+1F440</target>
        </trans-unit>
        <trans-unit id="e43fbf9ec0314ea44ffca766a3d0c413589c2efc" translate="yes" xml:space="preserve">
          <source>U+1F442</source>
          <target state="translated">U+1F442</target>
        </trans-unit>
        <trans-unit id="c1ff752b400b93513666f81ba20572dd1df07df3" translate="yes" xml:space="preserve">
          <source>U+1F443</source>
          <target state="translated">U+1F443</target>
        </trans-unit>
        <trans-unit id="947136ba644ef23124519e5e0866fa97d0b459a6" translate="yes" xml:space="preserve">
          <source>U+1F444</source>
          <target state="translated">U+1F444</target>
        </trans-unit>
        <trans-unit id="0b5972b898a9fa96ede2db6a0a18373eb1460452" translate="yes" xml:space="preserve">
          <source>U+1F445</source>
          <target state="translated">U+1F445</target>
        </trans-unit>
        <trans-unit id="6ba2e910720405506c2fd768a6de7f80921e0763" translate="yes" xml:space="preserve">
          <source>U+1F446</source>
          <target state="translated">U+1F446</target>
        </trans-unit>
        <trans-unit id="eb6752c57bc8759506d4cfd4354382326f4dbe1a" translate="yes" xml:space="preserve">
          <source>U+1F447</source>
          <target state="translated">U+1F447</target>
        </trans-unit>
        <trans-unit id="a5937550d123eee099672247de4bf5c93d849049" translate="yes" xml:space="preserve">
          <source>U+1F448</source>
          <target state="translated">U+1F448</target>
        </trans-unit>
        <trans-unit id="036e0405f99eac1c87dc10a7a0c6379f21b518a8" translate="yes" xml:space="preserve">
          <source>U+1F449</source>
          <target state="translated">U+1F449</target>
        </trans-unit>
        <trans-unit id="a7a8c8d4f10c2de2839b16a11f63717fee3b64ee" translate="yes" xml:space="preserve">
          <source>U+1F44A</source>
          <target state="translated">U+1F44A</target>
        </trans-unit>
        <trans-unit id="1eb77f25c22fd140b115adc387f64cdc619b9714" translate="yes" xml:space="preserve">
          <source>U+1F44B</source>
          <target state="translated">U+1F44B</target>
        </trans-unit>
        <trans-unit id="8710cfd2e34877062cbe35ef286ef0d8d2392fb1" translate="yes" xml:space="preserve">
          <source>U+1F44C</source>
          <target state="translated">U+1F44C</target>
        </trans-unit>
        <trans-unit id="31e948f1ba819fd397d80b92843997f6b48a5fce" translate="yes" xml:space="preserve">
          <source>U+1F44D</source>
          <target state="translated">U+1F44D</target>
        </trans-unit>
        <trans-unit id="d5fdc7d483893931a38ded4b211ce08ff1448709" translate="yes" xml:space="preserve">
          <source>U+1F44E</source>
          <target state="translated">U+1F44E</target>
        </trans-unit>
        <trans-unit id="868fe94d98bd96c1f974807f38eee2b7ce957491" translate="yes" xml:space="preserve">
          <source>U+1F44F</source>
          <target state="translated">U+1F44F</target>
        </trans-unit>
        <trans-unit id="cab80630fd6cb64238023903e34d294afa177578" translate="yes" xml:space="preserve">
          <source>U+1F450</source>
          <target state="translated">U+1F450</target>
        </trans-unit>
        <trans-unit id="3b9c4a18696107d11329530dc175e9b5f4ea2686" translate="yes" xml:space="preserve">
          <source>U+1F451</source>
          <target state="translated">U+1F451</target>
        </trans-unit>
        <trans-unit id="2d5f7f866bc0f893b4c94f974c47da8c8b22c0a8" translate="yes" xml:space="preserve">
          <source>U+1F452</source>
          <target state="translated">U+1F452</target>
        </trans-unit>
        <trans-unit id="9157565d7fdccb225cc2d1531adba52c952bf9ce" translate="yes" xml:space="preserve">
          <source>U+1F453</source>
          <target state="translated">U+1F453</target>
        </trans-unit>
        <trans-unit id="19b7d59c60e689621b5d0cd829576fe40bac858b" translate="yes" xml:space="preserve">
          <source>U+1F454</source>
          <target state="translated">U+1F454</target>
        </trans-unit>
        <trans-unit id="25405d5c10fd4d83ccf7f3fce6cc9d2b4c4b9948" translate="yes" xml:space="preserve">
          <source>U+1F455</source>
          <target state="translated">U+1F455</target>
        </trans-unit>
        <trans-unit id="478567f7e0192bfdf8c3c7d7416077f3e75f4119" translate="yes" xml:space="preserve">
          <source>U+1F456</source>
          <target state="translated">U+1F456</target>
        </trans-unit>
        <trans-unit id="90764ed2d75ab3936538067d6650064752d396e7" translate="yes" xml:space="preserve">
          <source>U+1F457</source>
          <target state="translated">U+1F457</target>
        </trans-unit>
        <trans-unit id="877a6b127a7d141b21fda88772676f86010fee03" translate="yes" xml:space="preserve">
          <source>U+1F458</source>
          <target state="translated">U+1F458</target>
        </trans-unit>
        <trans-unit id="b5133f6820c112b4df922031c508f2ccf925e5b0" translate="yes" xml:space="preserve">
          <source>U+1F459</source>
          <target state="translated">U+1F459</target>
        </trans-unit>
        <trans-unit id="a5135c66c5d4244ece35f930018549305fea9f76" translate="yes" xml:space="preserve">
          <source>U+1F45A</source>
          <target state="translated">U+1F45A</target>
        </trans-unit>
        <trans-unit id="411a93a062085cbd253e00b00d05832c7e7ba129" translate="yes" xml:space="preserve">
          <source>U+1F45B</source>
          <target state="translated">U+1F45B</target>
        </trans-unit>
        <trans-unit id="f02506963a3d6942befa64bc8f79c149413110a9" translate="yes" xml:space="preserve">
          <source>U+1F45C</source>
          <target state="translated">U+1F45C</target>
        </trans-unit>
        <trans-unit id="9dd4bd25f7382259e6bce5ce0c6d1f5378dd30e5" translate="yes" xml:space="preserve">
          <source>U+1F45D</source>
          <target state="translated">U+1F45D</target>
        </trans-unit>
        <trans-unit id="bfd551d88b1e2b01269c2265d9c4decbfb9a8ca2" translate="yes" xml:space="preserve">
          <source>U+1F45E</source>
          <target state="translated">U+1F45E</target>
        </trans-unit>
        <trans-unit id="ebe62b5bb2d47ca6fa1916231d2b71083a6e4ddf" translate="yes" xml:space="preserve">
          <source>U+1F45F</source>
          <target state="translated">U+1F45F</target>
        </trans-unit>
        <trans-unit id="4051826b5f5df3c1a694d0ab86720933de652fc0" translate="yes" xml:space="preserve">
          <source>U+1F460</source>
          <target state="translated">U+1F460</target>
        </trans-unit>
        <trans-unit id="4c242396dc3d8cdd5b98d5dc4894c7898fa7deb4" translate="yes" xml:space="preserve">
          <source>U+1F461</source>
          <target state="translated">U+1F461</target>
        </trans-unit>
        <trans-unit id="e19a70b78ad0bfe9b759cff9c5a213f50242bb40" translate="yes" xml:space="preserve">
          <source>U+1F462</source>
          <target state="translated">U+1F462</target>
        </trans-unit>
        <trans-unit id="137e9c1c97a86296fc52ef1cd345cb6ea3b43356" translate="yes" xml:space="preserve">
          <source>U+1F463</source>
          <target state="translated">U+1F463</target>
        </trans-unit>
        <trans-unit id="e507971c549fdd68fa7b9c2c1a2f674d24aa0541" translate="yes" xml:space="preserve">
          <source>U+1F464</source>
          <target state="translated">U+1F464</target>
        </trans-unit>
        <trans-unit id="9d8ada2d816e63f8e44ffe638b156f248ca1d352" translate="yes" xml:space="preserve">
          <source>U+1F465</source>
          <target state="translated">U+1F465</target>
        </trans-unit>
        <trans-unit id="86302521d0077776216066b3a7cb83d8017fd79a" translate="yes" xml:space="preserve">
          <source>U+1F466</source>
          <target state="translated">U+1F466</target>
        </trans-unit>
        <trans-unit id="3919bfc5f259158233cbacd023a36b78181f1087" translate="yes" xml:space="preserve">
          <source>U+1F467</source>
          <target state="translated">U+1F467</target>
        </trans-unit>
        <trans-unit id="2344342c81db092abd2d8807de2364400bb5912b" translate="yes" xml:space="preserve">
          <source>U+1F468</source>
          <target state="translated">U+1F468</target>
        </trans-unit>
        <trans-unit id="8478af2f54b78cc810ba678a9a529cc38162ca71" translate="yes" xml:space="preserve">
          <source>U+1F469</source>
          <target state="translated">U+1F469</target>
        </trans-unit>
        <trans-unit id="a498abf8989ffad242fc87079ad517b708c4340a" translate="yes" xml:space="preserve">
          <source>U+1F46A</source>
          <target state="translated">U+1F46A</target>
        </trans-unit>
        <trans-unit id="4c5a2c07fc5a39a86d88508b9e402889f4a24973" translate="yes" xml:space="preserve">
          <source>U+1F46B</source>
          <target state="translated">U+1F46B</target>
        </trans-unit>
        <trans-unit id="c03f3c61f692858fb93480183c1d1f32670c5dd5" translate="yes" xml:space="preserve">
          <source>U+1F46C</source>
          <target state="translated">U+1F46C</target>
        </trans-unit>
        <trans-unit id="ee025b0bdf18badd3733296d2b17094dfa103848" translate="yes" xml:space="preserve">
          <source>U+1F46D</source>
          <target state="translated">U+1F46D</target>
        </trans-unit>
        <trans-unit id="b588eacd83b405545b806adb430b527bdf998e56" translate="yes" xml:space="preserve">
          <source>U+1F46E</source>
          <target state="translated">U+1F46E</target>
        </trans-unit>
        <trans-unit id="e2fa4c8a05346bb2f3b482576931545b1eef64d3" translate="yes" xml:space="preserve">
          <source>U+1F46F</source>
          <target state="translated">U+1F46F</target>
        </trans-unit>
        <trans-unit id="ece292805adae9aacbbd5c7bdf744fd4725483c1" translate="yes" xml:space="preserve">
          <source>U+1F470</source>
          <target state="translated">U+1F470</target>
        </trans-unit>
        <trans-unit id="e82047e8fcc2dbfa4b41ec7d06cd8b45176ad252" translate="yes" xml:space="preserve">
          <source>U+1F471</source>
          <target state="translated">U+1F471</target>
        </trans-unit>
        <trans-unit id="31511824ddf20302397351682656d018dec42c29" translate="yes" xml:space="preserve">
          <source>U+1F472</source>
          <target state="translated">U+1F472</target>
        </trans-unit>
        <trans-unit id="da9630fe2df1ea8cbe95941bbb0d5c1b59f74cc1" translate="yes" xml:space="preserve">
          <source>U+1F473</source>
          <target state="translated">U+1F473</target>
        </trans-unit>
        <trans-unit id="d74c902c741718eb2ac453c21fa55c86724a7d43" translate="yes" xml:space="preserve">
          <source>U+1F474</source>
          <target state="translated">U+1F474</target>
        </trans-unit>
        <trans-unit id="35b3327c72d7dbcc8ff811e2ce56f9c119f0009c" translate="yes" xml:space="preserve">
          <source>U+1F475</source>
          <target state="translated">U+1F475</target>
        </trans-unit>
        <trans-unit id="5544b0391fadf3232df5866f376e159291fe8159" translate="yes" xml:space="preserve">
          <source>U+1F476</source>
          <target state="translated">U+1F476</target>
        </trans-unit>
        <trans-unit id="cdca1dd8fad07bad28c98dd031f5a456a5d25be7" translate="yes" xml:space="preserve">
          <source>U+1F477</source>
          <target state="translated">U+1F477</target>
        </trans-unit>
        <trans-unit id="409843940cd886f8d0018e3380414cce949c62c1" translate="yes" xml:space="preserve">
          <source>U+1F478</source>
          <target state="translated">U+1F478</target>
        </trans-unit>
        <trans-unit id="9171d1cdb1f897274ce4921af5b64db5a292ad0d" translate="yes" xml:space="preserve">
          <source>U+1F479</source>
          <target state="translated">U+1F479</target>
        </trans-unit>
        <trans-unit id="25edc9d4f48b96a4f4f73a28d4379be21598c62f" translate="yes" xml:space="preserve">
          <source>U+1F47A</source>
          <target state="translated">U+1F47A</target>
        </trans-unit>
        <trans-unit id="a18efed796665eced5e532f13d38991168add4b5" translate="yes" xml:space="preserve">
          <source>U+1F47B</source>
          <target state="translated">U+1F47B</target>
        </trans-unit>
        <trans-unit id="f8152afbc49d34ec5b119a1c62e433b4110aa092" translate="yes" xml:space="preserve">
          <source>U+1F47C</source>
          <target state="translated">U+1F47C</target>
        </trans-unit>
        <trans-unit id="a9b56fe3352c7674ed5f9db6c61fa567b25be234" translate="yes" xml:space="preserve">
          <source>U+1F47D</source>
          <target state="translated">U+1F47D</target>
        </trans-unit>
        <trans-unit id="dd53b36883db06e97ab89ead87f19ef46fc45cea" translate="yes" xml:space="preserve">
          <source>U+1F47E</source>
          <target state="translated">U+1F47E</target>
        </trans-unit>
        <trans-unit id="4f55fca6a0b6a44777ef26214f2f50704b25b86b" translate="yes" xml:space="preserve">
          <source>U+1F47F</source>
          <target state="translated">U+1F47F</target>
        </trans-unit>
        <trans-unit id="3b80ae78184b61cbbecd73a9348dc9668768b709" translate="yes" xml:space="preserve">
          <source>U+1F480</source>
          <target state="translated">U+1F480</target>
        </trans-unit>
        <trans-unit id="9f6a68d35c66788012c66bfcb10021dba3f07e65" translate="yes" xml:space="preserve">
          <source>U+1F481</source>
          <target state="translated">U+1F481</target>
        </trans-unit>
        <trans-unit id="d03be1505c31d2c501681d18bf6fdb1143f95cf0" translate="yes" xml:space="preserve">
          <source>U+1F482</source>
          <target state="translated">U+1F482</target>
        </trans-unit>
        <trans-unit id="cbde2fa66b2432b636b699334367aeb8eac6cee8" translate="yes" xml:space="preserve">
          <source>U+1F483</source>
          <target state="translated">U+1F483</target>
        </trans-unit>
        <trans-unit id="dd37ad03a051df3033b7ba413a093e0653e30215" translate="yes" xml:space="preserve">
          <source>U+1F484</source>
          <target state="translated">U+1F484</target>
        </trans-unit>
        <trans-unit id="f729103d71185d4ed41fe440cf1ce6b9e75bf389" translate="yes" xml:space="preserve">
          <source>U+1F485</source>
          <target state="translated">U+1F485</target>
        </trans-unit>
        <trans-unit id="992ef51b7a5c2320ea159b48b9c41bbf49047fa3" translate="yes" xml:space="preserve">
          <source>U+1F486</source>
          <target state="translated">U+1F486</target>
        </trans-unit>
        <trans-unit id="b9409c9aa6b9d9c6254668701057317bee31023d" translate="yes" xml:space="preserve">
          <source>U+1F487</source>
          <target state="translated">U+1F487</target>
        </trans-unit>
        <trans-unit id="fe97a7aa1ebbdf61fc1f4dc8cc1d83898f4a27ea" translate="yes" xml:space="preserve">
          <source>U+1F488</source>
          <target state="translated">U+1F488</target>
        </trans-unit>
        <trans-unit id="02923479d3d94b18b1dfdb5e225c86e123528ba3" translate="yes" xml:space="preserve">
          <source>U+1F489</source>
          <target state="translated">U+1F489</target>
        </trans-unit>
        <trans-unit id="91dc74530338afb629eb8a40b1007857ab412fc7" translate="yes" xml:space="preserve">
          <source>U+1F48A</source>
          <target state="translated">U+1F48A</target>
        </trans-unit>
        <trans-unit id="d80830af62624388ba771f8fbe292249cc0e036e" translate="yes" xml:space="preserve">
          <source>U+1F48B</source>
          <target state="translated">U+1F48B</target>
        </trans-unit>
        <trans-unit id="7b3c871125ee85efae7285d135f84351c915bd01" translate="yes" xml:space="preserve">
          <source>U+1F48C</source>
          <target state="translated">U+1F48C</target>
        </trans-unit>
        <trans-unit id="e768b075ea8be33319afea2065b64899b013f656" translate="yes" xml:space="preserve">
          <source>U+1F48D</source>
          <target state="translated">U+1F48D</target>
        </trans-unit>
        <trans-unit id="c20e6817a8260f0f39cfdddd2d9cf1d924a5b053" translate="yes" xml:space="preserve">
          <source>U+1F48E</source>
          <target state="translated">U+1F48E</target>
        </trans-unit>
        <trans-unit id="20e7eaaa6707ef146509a557d38abf0f257dc4f3" translate="yes" xml:space="preserve">
          <source>U+1F48F</source>
          <target state="translated">U+1F48F</target>
        </trans-unit>
        <trans-unit id="f5732eea72cf99502208ad73957f51774bb485a0" translate="yes" xml:space="preserve">
          <source>U+1F490</source>
          <target state="translated">U+1F490</target>
        </trans-unit>
        <trans-unit id="27c62b45beb72d9d251070e6e1214f49a41a9e1b" translate="yes" xml:space="preserve">
          <source>U+1F491</source>
          <target state="translated">U+1F491</target>
        </trans-unit>
        <trans-unit id="1c189a8b3546a26ea969e1f13a080255b2194ce0" translate="yes" xml:space="preserve">
          <source>U+1F492</source>
          <target state="translated">U+1F492</target>
        </trans-unit>
        <trans-unit id="20cf3a1838666c5e7e22d44e52968efb743321c7" translate="yes" xml:space="preserve">
          <source>U+1F493</source>
          <target state="translated">U+1F493</target>
        </trans-unit>
        <trans-unit id="1801756148d78bada31ad218d68d06dcd8881487" translate="yes" xml:space="preserve">
          <source>U+1F494</source>
          <target state="translated">U+1F494</target>
        </trans-unit>
        <trans-unit id="8c019d62f0bef4d0edcdcc033d4d6257e5a3c84e" translate="yes" xml:space="preserve">
          <source>U+1F495</source>
          <target state="translated">U+1F495</target>
        </trans-unit>
        <trans-unit id="c899104f2585bb30c98356086206a488719ceaae" translate="yes" xml:space="preserve">
          <source>U+1F496</source>
          <target state="translated">U+1F496</target>
        </trans-unit>
        <trans-unit id="59b4934e2eb16c1de181edbe19aaa3ca1a811628" translate="yes" xml:space="preserve">
          <source>U+1F497</source>
          <target state="translated">U+1F497</target>
        </trans-unit>
        <trans-unit id="705f2e6c9ae13d3b7fae20ba2b712377155460a8" translate="yes" xml:space="preserve">
          <source>U+1F498</source>
          <target state="translated">U+1F498</target>
        </trans-unit>
        <trans-unit id="f40c6a480769f7b629cfa94461c69ced1e8aa158" translate="yes" xml:space="preserve">
          <source>U+1F499</source>
          <target state="translated">U+1F499</target>
        </trans-unit>
        <trans-unit id="ab19c24f676e51580861f52ac7d08c7507652718" translate="yes" xml:space="preserve">
          <source>U+1F49A</source>
          <target state="translated">U+1F49A</target>
        </trans-unit>
        <trans-unit id="58703d2071832d3c0f6db30fce58da20ba9c6b29" translate="yes" xml:space="preserve">
          <source>U+1F49B</source>
          <target state="translated">U+1F49B</target>
        </trans-unit>
        <trans-unit id="1a6b2d8ba05f940b870b0b91c8940587df262fdc" translate="yes" xml:space="preserve">
          <source>U+1F49C</source>
          <target state="translated">U+1F49C</target>
        </trans-unit>
        <trans-unit id="e258df5e238d900769becc267a6da9c352e4dc98" translate="yes" xml:space="preserve">
          <source>U+1F49D</source>
          <target state="translated">U+1F49D</target>
        </trans-unit>
        <trans-unit id="abcad50cfb7e79898fd76da2abcc81961b6d86b4" translate="yes" xml:space="preserve">
          <source>U+1F49E</source>
          <target state="translated">U+1F49E</target>
        </trans-unit>
        <trans-unit id="1fc72adacad28f0cb689d40acd9bfaf9e1f17012" translate="yes" xml:space="preserve">
          <source>U+1F49F</source>
          <target state="translated">U+1F49F</target>
        </trans-unit>
        <trans-unit id="f069671bd40fd74d4dd99690285b741e4dbf2899" translate="yes" xml:space="preserve">
          <source>U+1F4A0</source>
          <target state="translated">U+1F4A0</target>
        </trans-unit>
        <trans-unit id="ac764f4752e35af16b41c67665ceac2ef038abdd" translate="yes" xml:space="preserve">
          <source>U+1F4A1</source>
          <target state="translated">U+1F4A1</target>
        </trans-unit>
        <trans-unit id="41ea4ad9d3673a29ee5482b212718e54a6b439ed" translate="yes" xml:space="preserve">
          <source>U+1F4A2</source>
          <target state="translated">U+1F4A2</target>
        </trans-unit>
        <trans-unit id="7de5abb35ea7d446aa995ea72ad2bf3b80e83d94" translate="yes" xml:space="preserve">
          <source>U+1F4A3</source>
          <target state="translated">U+1F4A3</target>
        </trans-unit>
        <trans-unit id="fbe623f56b80851f4e8ec34b8c4338d644fee8fb" translate="yes" xml:space="preserve">
          <source>U+1F4A4</source>
          <target state="translated">U+1F4A4</target>
        </trans-unit>
        <trans-unit id="3c7253b8075993943ef0cbb235ab2d57db33f7ea" translate="yes" xml:space="preserve">
          <source>U+1F4A5</source>
          <target state="translated">U+1F4A5</target>
        </trans-unit>
        <trans-unit id="6ec2d9c8f3a3f7e39c560485bb595867a12d122f" translate="yes" xml:space="preserve">
          <source>U+1F4A6</source>
          <target state="translated">U+1F4A6</target>
        </trans-unit>
        <trans-unit id="c13dc3fec0653a87ed8b433c4f9d17c2e32b6677" translate="yes" xml:space="preserve">
          <source>U+1F4A7</source>
          <target state="translated">U+1F4A7</target>
        </trans-unit>
        <trans-unit id="7a784a6ef1c7747e523a4198a33701de6d341fb3" translate="yes" xml:space="preserve">
          <source>U+1F4A8</source>
          <target state="translated">U+1F4A8</target>
        </trans-unit>
        <trans-unit id="a2ef5fb365afd9069ca47e56c4a072be87e90cbd" translate="yes" xml:space="preserve">
          <source>U+1F4A9</source>
          <target state="translated">U+1F4A9</target>
        </trans-unit>
        <trans-unit id="acd6ab73ca7e24d1027a3f97aefbcedc633d17b9" translate="yes" xml:space="preserve">
          <source>U+1F4AA</source>
          <target state="translated">U+1F4AA</target>
        </trans-unit>
        <trans-unit id="980db79a9dc99cf370562a44b1f96ace5ee20c78" translate="yes" xml:space="preserve">
          <source>U+1F4AB</source>
          <target state="translated">U+1F4AB</target>
        </trans-unit>
        <trans-unit id="bc10abd33fecd0eae07a35de179584b00f26ea96" translate="yes" xml:space="preserve">
          <source>U+1F4AC</source>
          <target state="translated">U+1F4AC</target>
        </trans-unit>
        <trans-unit id="47e88dfcd32822ed7a09da9ff5b76ec1182b7e66" translate="yes" xml:space="preserve">
          <source>U+1F4AD</source>
          <target state="translated">U+1F4AD</target>
        </trans-unit>
        <trans-unit id="ef889261ad6f70f960495c11a62d36a1769dda89" translate="yes" xml:space="preserve">
          <source>U+1F4AE</source>
          <target state="translated">U+1F4AE</target>
        </trans-unit>
        <trans-unit id="c5cc4a244128e8fcb19738615a5f1b9034e690b1" translate="yes" xml:space="preserve">
          <source>U+1F4AF</source>
          <target state="translated">U+1F4AF</target>
        </trans-unit>
        <trans-unit id="b83e6fdb7b218fab9904b00e963f970e85296938" translate="yes" xml:space="preserve">
          <source>U+1F4B0</source>
          <target state="translated">U+1F4B0</target>
        </trans-unit>
        <trans-unit id="94e1d0150791beca26deabfaa57f6866fdff93fa" translate="yes" xml:space="preserve">
          <source>U+1F4B1</source>
          <target state="translated">U+1F4B1</target>
        </trans-unit>
        <trans-unit id="5bd981db2df48bd0cbb9d3f35f558a522f3e0d8f" translate="yes" xml:space="preserve">
          <source>U+1F4B2</source>
          <target state="translated">U+1F4B2</target>
        </trans-unit>
        <trans-unit id="073470067e05f0b7d425b3d5b7d9d65adfed7586" translate="yes" xml:space="preserve">
          <source>U+1F4B3</source>
          <target state="translated">U+1F4B3</target>
        </trans-unit>
        <trans-unit id="b2ab639ce28314862095f8747097ee0973efa354" translate="yes" xml:space="preserve">
          <source>U+1F4B4</source>
          <target state="translated">U+1F4B4</target>
        </trans-unit>
        <trans-unit id="9a4c1e2694de6b2d85b9b54bb8880a9e75054612" translate="yes" xml:space="preserve">
          <source>U+1F4B5</source>
          <target state="translated">U+1F4B5</target>
        </trans-unit>
        <trans-unit id="f09b9f19c092737637ed2785071156a50f816ec1" translate="yes" xml:space="preserve">
          <source>U+1F4B6</source>
          <target state="translated">U+1F4B6</target>
        </trans-unit>
        <trans-unit id="8c1016cf2980aa09c2b5b17f276f39aac41d2426" translate="yes" xml:space="preserve">
          <source>U+1F4B7</source>
          <target state="translated">U+1F4B7</target>
        </trans-unit>
        <trans-unit id="cbd48e2f2e79ca9f7658a6d741550162b17fc383" translate="yes" xml:space="preserve">
          <source>U+1F4B8</source>
          <target state="translated">U+1F4B8</target>
        </trans-unit>
        <trans-unit id="29f7c3d9632b6e7aae491128d515e893615a81a8" translate="yes" xml:space="preserve">
          <source>U+1F4B9</source>
          <target state="translated">U+1F4B9</target>
        </trans-unit>
        <trans-unit id="713247795bc3312fee3d7af28a2b192c55d3379c" translate="yes" xml:space="preserve">
          <source>U+1F4BA</source>
          <target state="translated">U+1F4BA</target>
        </trans-unit>
        <trans-unit id="dfb36a41167ed52e5f4f47e42a1141907a278c74" translate="yes" xml:space="preserve">
          <source>U+1F4BB</source>
          <target state="translated">U+1F4BB</target>
        </trans-unit>
        <trans-unit id="7f0ff98ad23f74bb082f006916717745032d2880" translate="yes" xml:space="preserve">
          <source>U+1F4BC</source>
          <target state="translated">U+1F4BC</target>
        </trans-unit>
        <trans-unit id="94c7dd63ec1beb63af37db7f33adc09c12127082" translate="yes" xml:space="preserve">
          <source>U+1F4BD</source>
          <target state="translated">U+1F4BD</target>
        </trans-unit>
        <trans-unit id="ee67fac468e82bcd9f094684e4b260c4a7efd715" translate="yes" xml:space="preserve">
          <source>U+1F4BE</source>
          <target state="translated">U+1F4BE</target>
        </trans-unit>
        <trans-unit id="1ce81137928dfb70c674b92bba1470d0fcf042a5" translate="yes" xml:space="preserve">
          <source>U+1F4BF</source>
          <target state="translated">U+1F4BF</target>
        </trans-unit>
        <trans-unit id="2da90d882eee0cd92e8383f6a7205b97470dc8de" translate="yes" xml:space="preserve">
          <source>U+1F4C0</source>
          <target state="translated">U+1F4C0</target>
        </trans-unit>
        <trans-unit id="a243769e482db30ad6115d9c73a782ba8c17662f" translate="yes" xml:space="preserve">
          <source>U+1F4C1</source>
          <target state="translated">U+1F4C1</target>
        </trans-unit>
        <trans-unit id="8b6b335d45d91e9450321fc9e1d966e37ff61ef0" translate="yes" xml:space="preserve">
          <source>U+1F4C2</source>
          <target state="translated">U+1F4C2</target>
        </trans-unit>
        <trans-unit id="67adc56fe460e344f3e99e02123bb80e8c6d45a1" translate="yes" xml:space="preserve">
          <source>U+1F4C3</source>
          <target state="translated">U+1F4C3</target>
        </trans-unit>
        <trans-unit id="d039fc6eb0c17290ae1dcde450cae426c495dff0" translate="yes" xml:space="preserve">
          <source>U+1F4C4</source>
          <target state="translated">U+1F4C4</target>
        </trans-unit>
        <trans-unit id="af2c4d4eb500742f5f7a22c60c9e834328e8c354" translate="yes" xml:space="preserve">
          <source>U+1F4C5</source>
          <target state="translated">U+1F4C5</target>
        </trans-unit>
        <trans-unit id="c6bca3c32d48bd2283a0a7a54b20c678008a5b92" translate="yes" xml:space="preserve">
          <source>U+1F4C6</source>
          <target state="translated">U+1F4C6</target>
        </trans-unit>
        <trans-unit id="c78fa2f7ab18fad9294ec50e6dd64dbcca2c324d" translate="yes" xml:space="preserve">
          <source>U+1F4C7</source>
          <target state="translated">U+1F4C7</target>
        </trans-unit>
        <trans-unit id="2a9517d130583dde647d668dffc1e374c8275946" translate="yes" xml:space="preserve">
          <source>U+1F4C8</source>
          <target state="translated">U+1F4C8</target>
        </trans-unit>
        <trans-unit id="eea4936a454f345a2cfc6819d6bc53f3e1be0446" translate="yes" xml:space="preserve">
          <source>U+1F4C9</source>
          <target state="translated">U+1F4C9</target>
        </trans-unit>
        <trans-unit id="c80545d087b96d97b4b203e71fd76ee130cc1932" translate="yes" xml:space="preserve">
          <source>U+1F4CA</source>
          <target state="translated">U+1F4CA</target>
        </trans-unit>
        <trans-unit id="49ba7be89188ecaa3675cb66085da65ddc35ab73" translate="yes" xml:space="preserve">
          <source>U+1F4CB</source>
          <target state="translated">U+1F4CB</target>
        </trans-unit>
        <trans-unit id="993d754c6960b7e29d5f6fb5463da2eb5186120e" translate="yes" xml:space="preserve">
          <source>U+1F4CC</source>
          <target state="translated">U+1F4CC</target>
        </trans-unit>
        <trans-unit id="8cd7fc01e5b095ec16167b43392342203e97485c" translate="yes" xml:space="preserve">
          <source>U+1F4CD</source>
          <target state="translated">U+1F4CD</target>
        </trans-unit>
        <trans-unit id="7d26fc15d92bb9ea4899835b685b0f51a548f462" translate="yes" xml:space="preserve">
          <source>U+1F4CE</source>
          <target state="translated">U+1F4CE</target>
        </trans-unit>
        <trans-unit id="9a1149892ebac30831e1d9e7cc17dca891bac79b" translate="yes" xml:space="preserve">
          <source>U+1F4CF</source>
          <target state="translated">U+1F4CF</target>
        </trans-unit>
        <trans-unit id="28469e003e7074dde4a9934032443b63ee22cf3c" translate="yes" xml:space="preserve">
          <source>U+1F4D0</source>
          <target state="translated">U+1F4D0</target>
        </trans-unit>
        <trans-unit id="55fb3a18f97a74286cc8201c789e3d3a87c31a09" translate="yes" xml:space="preserve">
          <source>U+1F4D1</source>
          <target state="translated">U+1F4D1</target>
        </trans-unit>
        <trans-unit id="6cdc2848123f2d67f66bc383dd27572f92373531" translate="yes" xml:space="preserve">
          <source>U+1F4D2</source>
          <target state="translated">U+1F4D2</target>
        </trans-unit>
        <trans-unit id="30e731a95ccce87a32e7ed7aafa9942e87c7e1e1" translate="yes" xml:space="preserve">
          <source>U+1F4D3</source>
          <target state="translated">U+1F4D3</target>
        </trans-unit>
        <trans-unit id="e05bcb16076827e0dcc9101a6ab64b9e1552c0e8" translate="yes" xml:space="preserve">
          <source>U+1F4D4</source>
          <target state="translated">U+1F4D4</target>
        </trans-unit>
        <trans-unit id="99d22cd7daf05eca8a50708ac7a4fcb278609e94" translate="yes" xml:space="preserve">
          <source>U+1F4D5</source>
          <target state="translated">U+1F4D5</target>
        </trans-unit>
        <trans-unit id="c946f779583a4f95b4988135fcac4f3038270e90" translate="yes" xml:space="preserve">
          <source>U+1F4D6</source>
          <target state="translated">U+1F4D6</target>
        </trans-unit>
        <trans-unit id="f18384c4c5d6675459c3b0c3dbc6519eaad8e058" translate="yes" xml:space="preserve">
          <source>U+1F4D7</source>
          <target state="translated">U+1F4D7</target>
        </trans-unit>
        <trans-unit id="87756af73df38b1edb28ebb5fff18f6e53b1dad3" translate="yes" xml:space="preserve">
          <source>U+1F4D8</source>
          <target state="translated">U+1F4D8</target>
        </trans-unit>
        <trans-unit id="dc6f3a4f40e7307a3a11cc7b7ff9d499f790ed6d" translate="yes" xml:space="preserve">
          <source>U+1F4D9</source>
          <target state="translated">U+1F4D9</target>
        </trans-unit>
        <trans-unit id="f50ff8ea2d0f9701a04431303e4887110fdcc4b5" translate="yes" xml:space="preserve">
          <source>U+1F4DA</source>
          <target state="translated">U+1F4DA</target>
        </trans-unit>
        <trans-unit id="db47d5844f0748156c45de4dcb7e085f00640d0c" translate="yes" xml:space="preserve">
          <source>U+1F4DB</source>
          <target state="translated">U+1F4DB</target>
        </trans-unit>
        <trans-unit id="f5766647ce704c96fa72a0dbc2c54a69233911f1" translate="yes" xml:space="preserve">
          <source>U+1F4DC</source>
          <target state="translated">U+1F4DC</target>
        </trans-unit>
        <trans-unit id="1bddc2b2666a4455d06778bfb1da868dd2c6f1b6" translate="yes" xml:space="preserve">
          <source>U+1F4DD</source>
          <target state="translated">U+1F4DD</target>
        </trans-unit>
        <trans-unit id="f046392014116d6dd83487501fef1c1faaceb966" translate="yes" xml:space="preserve">
          <source>U+1F4DE</source>
          <target state="translated">U+1F4DE</target>
        </trans-unit>
        <trans-unit id="c490b954763ba62eb4feead71b94d3009a5c11b7" translate="yes" xml:space="preserve">
          <source>U+1F4DF</source>
          <target state="translated">U+1F4DF</target>
        </trans-unit>
        <trans-unit id="f347bfc93b53ec57c5a29b0aef02ebb128a02445" translate="yes" xml:space="preserve">
          <source>U+1F4E0</source>
          <target state="translated">U+1F4E0</target>
        </trans-unit>
        <trans-unit id="cb0d5b6a7369fa425a5d4c905991dd6183eaf552" translate="yes" xml:space="preserve">
          <source>U+1F4E1</source>
          <target state="translated">U+1F4E1</target>
        </trans-unit>
        <trans-unit id="a84b9a8c9da87b6001d649b11312a8c9d3c082f0" translate="yes" xml:space="preserve">
          <source>U+1F4E2</source>
          <target state="translated">U+1F4E2</target>
        </trans-unit>
        <trans-unit id="261ff4f4780b3036bbb37017e4dfa1524e4bed7b" translate="yes" xml:space="preserve">
          <source>U+1F4E3</source>
          <target state="translated">U+1F4E3</target>
        </trans-unit>
        <trans-unit id="e0d8c8087985fcf4e5ac590d3e4cf97fc4e30a27" translate="yes" xml:space="preserve">
          <source>U+1F4E4</source>
          <target state="translated">U+1F4E4</target>
        </trans-unit>
        <trans-unit id="fc75f48d98f6503c0ad07b077cd261ebfe862f87" translate="yes" xml:space="preserve">
          <source>U+1F4E5</source>
          <target state="translated">U+1F4E5</target>
        </trans-unit>
        <trans-unit id="e256ee3e052dcb817a26423d5eabed9629d421d4" translate="yes" xml:space="preserve">
          <source>U+1F4E6</source>
          <target state="translated">U+1F4E6</target>
        </trans-unit>
        <trans-unit id="04b5fa7b0b3cf20db15ff7f57b7f7664120cb0ba" translate="yes" xml:space="preserve">
          <source>U+1F4E7</source>
          <target state="translated">U+1F4E7</target>
        </trans-unit>
        <trans-unit id="d156914b911753cf065677212d9ec53df4332f67" translate="yes" xml:space="preserve">
          <source>U+1F4E8</source>
          <target state="translated">U+1F4E8</target>
        </trans-unit>
        <trans-unit id="a6270dbd7f16ad29e98b10d7497946f4e4a9c006" translate="yes" xml:space="preserve">
          <source>U+1F4E9</source>
          <target state="translated">U+1F4E9</target>
        </trans-unit>
        <trans-unit id="e022b8571140b3625b53e806a026837e59241c9c" translate="yes" xml:space="preserve">
          <source>U+1F4EA</source>
          <target state="translated">U+1F4EA</target>
        </trans-unit>
        <trans-unit id="7d0a400707aec2c0ed85f41d69d042bbec4b2476" translate="yes" xml:space="preserve">
          <source>U+1F4EB</source>
          <target state="translated">U+1F4EB</target>
        </trans-unit>
        <trans-unit id="91f82843b36d5d5b412692ab652eadbf15195671" translate="yes" xml:space="preserve">
          <source>U+1F4EC</source>
          <target state="translated">U+1F4EC</target>
        </trans-unit>
        <trans-unit id="e9a3c25e061cacdb36daab8d211489ab718ac339" translate="yes" xml:space="preserve">
          <source>U+1F4ED</source>
          <target state="translated">U+1F4ED</target>
        </trans-unit>
        <trans-unit id="48fa6ccd36ba1d8992c1133ad1f8dcddffbabac1" translate="yes" xml:space="preserve">
          <source>U+1F4EE</source>
          <target state="translated">U+1F4EE</target>
        </trans-unit>
        <trans-unit id="97a97f118849bf14728168d79efe65b24b3fd658" translate="yes" xml:space="preserve">
          <source>U+1F4EF</source>
          <target state="translated">U+1F4EF</target>
        </trans-unit>
        <trans-unit id="6f8e25568e902f5a1a9885c530151658d4566110" translate="yes" xml:space="preserve">
          <source>U+1F4F0</source>
          <target state="translated">U+1F4F0</target>
        </trans-unit>
        <trans-unit id="a1fc459977391a7a9be36fb2cd0bd4f1402503f7" translate="yes" xml:space="preserve">
          <source>U+1F4F1</source>
          <target state="translated">U+1F4F1</target>
        </trans-unit>
        <trans-unit id="309e665646383cc1a27aa493e4256586b81ccf1a" translate="yes" xml:space="preserve">
          <source>U+1F4F2</source>
          <target state="translated">U+1F4F2</target>
        </trans-unit>
        <trans-unit id="dd7169c1c5667bd0c6db9b0ac9a8bce23cfb406c" translate="yes" xml:space="preserve">
          <source>U+1F4F3</source>
          <target state="translated">U+1F4F3</target>
        </trans-unit>
        <trans-unit id="97e56a4821f7e153777422115ead87c112ed5559" translate="yes" xml:space="preserve">
          <source>U+1F4F4</source>
          <target state="translated">U+1F4F4</target>
        </trans-unit>
        <trans-unit id="a503c45603e40d5a74f388f5dd7cd97059f39840" translate="yes" xml:space="preserve">
          <source>U+1F4F5</source>
          <target state="translated">U+1F4F5</target>
        </trans-unit>
        <trans-unit id="92d199dca6b040f0e9bcf00f41e4b2c397002d62" translate="yes" xml:space="preserve">
          <source>U+1F4F6</source>
          <target state="translated">U+1F4F6</target>
        </trans-unit>
        <trans-unit id="4e68ca064024243a37ccbc0b8025c62f8e9cf192" translate="yes" xml:space="preserve">
          <source>U+1F4F7</source>
          <target state="translated">U+1F4F7</target>
        </trans-unit>
        <trans-unit id="24219227c9779333617e6e28c13c58afa107bc61" translate="yes" xml:space="preserve">
          <source>U+1F4F9</source>
          <target state="translated">U+1F4F9</target>
        </trans-unit>
        <trans-unit id="1d57c9af793fb341ad1b918faeaa130b31cc249d" translate="yes" xml:space="preserve">
          <source>U+1F4FA</source>
          <target state="translated">U+1F4FA</target>
        </trans-unit>
        <trans-unit id="f4b3d3ecb917a7904a886a2c67bf448a9e4888bb" translate="yes" xml:space="preserve">
          <source>U+1F4FB</source>
          <target state="translated">U+1F4FB</target>
        </trans-unit>
        <trans-unit id="e7612f49fa5587e4b91c4e076f092c089da8be3e" translate="yes" xml:space="preserve">
          <source>U+1F4FC</source>
          <target state="translated">U+1F4FC</target>
        </trans-unit>
        <trans-unit id="2840a7f3cc29125c6e7d65d98b655a32e52f76ba" translate="yes" xml:space="preserve">
          <source>U+1F500</source>
          <target state="translated">U+1F500</target>
        </trans-unit>
        <trans-unit id="7efd4f2f183ac85d49446c6408d8cb46351b5cbe" translate="yes" xml:space="preserve">
          <source>U+1F501</source>
          <target state="translated">U+1F501</target>
        </trans-unit>
        <trans-unit id="f8a59b7022b9d619ae8a6485103273360e2e8f8b" translate="yes" xml:space="preserve">
          <source>U+1F502</source>
          <target state="translated">U+1F502</target>
        </trans-unit>
        <trans-unit id="49c42db4ad533a618fa488da3bb0f06f541a0b8b" translate="yes" xml:space="preserve">
          <source>U+1F503</source>
          <target state="translated">U+1F503</target>
        </trans-unit>
        <trans-unit id="87d6862173fd20c2a21982ee7424036c4d999816" translate="yes" xml:space="preserve">
          <source>U+1F504</source>
          <target state="translated">U+1F504</target>
        </trans-unit>
        <trans-unit id="8c8575295d30d7fb3bcc1c0514108a59c573af70" translate="yes" xml:space="preserve">
          <source>U+1F505</source>
          <target state="translated">U+1F505</target>
        </trans-unit>
        <trans-unit id="bb077340f09d816d0a6a995036f1e071d4882bb4" translate="yes" xml:space="preserve">
          <source>U+1F506</source>
          <target state="translated">U+1F506</target>
        </trans-unit>
        <trans-unit id="e35d4416bd7fbf7dda8c06301f7735d26474a384" translate="yes" xml:space="preserve">
          <source>U+1F507</source>
          <target state="translated">U+1F507</target>
        </trans-unit>
        <trans-unit id="bfd2d982a9d25ff84968f06c14b3d2fab4426801" translate="yes" xml:space="preserve">
          <source>U+1F508</source>
          <target state="translated">U+1F508</target>
        </trans-unit>
        <trans-unit id="9c083860dc7632f1c172e44c1cd94386a507cfa7" translate="yes" xml:space="preserve">
          <source>U+1F509</source>
          <target state="translated">U+1F509</target>
        </trans-unit>
        <trans-unit id="83d21093fb232c56013212b74c1189534dd7a3a5" translate="yes" xml:space="preserve">
          <source>U+1F50A</source>
          <target state="translated">U+1F50A</target>
        </trans-unit>
        <trans-unit id="9a81365b4f34f9d469d07d5c85f6f2b13b0279f2" translate="yes" xml:space="preserve">
          <source>U+1F50B</source>
          <target state="translated">U+1F50B</target>
        </trans-unit>
        <trans-unit id="de985e861a405e04817643eded125a25c1da552c" translate="yes" xml:space="preserve">
          <source>U+1F50C</source>
          <target state="translated">U+1F50C</target>
        </trans-unit>
        <trans-unit id="ccfbd87e857777d3395fd80ed3685e0bffaa1553" translate="yes" xml:space="preserve">
          <source>U+1F50D</source>
          <target state="translated">U+1F50D</target>
        </trans-unit>
        <trans-unit id="d4a4c4cb1c58480096d0d518b4b1a633b024da08" translate="yes" xml:space="preserve">
          <source>U+1F50E</source>
          <target state="translated">U+1F50E</target>
        </trans-unit>
        <trans-unit id="b8885b46663cf5a843c2db73f8c5320c1a9c3870" translate="yes" xml:space="preserve">
          <source>U+1F50F</source>
          <target state="translated">U+1F50F</target>
        </trans-unit>
        <trans-unit id="7aa010821d466f6f6b10cd5f16022e6119687315" translate="yes" xml:space="preserve">
          <source>U+1F510</source>
          <target state="translated">U+1F510</target>
        </trans-unit>
        <trans-unit id="053a58b102e203ffd6cb0aa26d5eba90fdc36bca" translate="yes" xml:space="preserve">
          <source>U+1F511</source>
          <target state="translated">U+1F511</target>
        </trans-unit>
        <trans-unit id="82024a3b3bbfe538ecfd87205ed5f1f62ccd5097" translate="yes" xml:space="preserve">
          <source>U+1F512</source>
          <target state="translated">U+1F512</target>
        </trans-unit>
        <trans-unit id="a4d55230a295b7b36b3f8144af3c67fc7bf6672b" translate="yes" xml:space="preserve">
          <source>U+1F513</source>
          <target state="translated">U+1F513</target>
        </trans-unit>
        <trans-unit id="3797732907cb70895b495aa13af4634ee24fbfe5" translate="yes" xml:space="preserve">
          <source>U+1F514</source>
          <target state="translated">U+1F514</target>
        </trans-unit>
        <trans-unit id="bef84c5e0ed7d5c5c898d8617275b6a8fddc1043" translate="yes" xml:space="preserve">
          <source>U+1F515</source>
          <target state="translated">U+1F515</target>
        </trans-unit>
        <trans-unit id="536f4fffedbc8441001f7e4761b7c44f851cca9d" translate="yes" xml:space="preserve">
          <source>U+1F516</source>
          <target state="translated">U+1F516</target>
        </trans-unit>
        <trans-unit id="c335c27a6c88651341aa4efdbf38acf51fd77574" translate="yes" xml:space="preserve">
          <source>U+1F517</source>
          <target state="translated">U+1F517</target>
        </trans-unit>
        <trans-unit id="c50a43f354dc99fcb9050af320d0b5f73e7f67bd" translate="yes" xml:space="preserve">
          <source>U+1F518</source>
          <target state="translated">U+1F518</target>
        </trans-unit>
        <trans-unit id="078f08a706c7b2259b08b44b79f65e6a899118a4" translate="yes" xml:space="preserve">
          <source>U+1F519</source>
          <target state="translated">U+1F519</target>
        </trans-unit>
        <trans-unit id="7ef5fcbbbb0036a35643dfb411b9f3eb9210c001" translate="yes" xml:space="preserve">
          <source>U+1F51A</source>
          <target state="translated">U+1F51A</target>
        </trans-unit>
        <trans-unit id="931d7df8aaf9b38014314b1c2367a22a00bda73e" translate="yes" xml:space="preserve">
          <source>U+1F51B</source>
          <target state="translated">U+1F51B</target>
        </trans-unit>
        <trans-unit id="075b7e1d96718f5f22df0ada15ea76a36d213f9f" translate="yes" xml:space="preserve">
          <source>U+1F51C</source>
          <target state="translated">U+1F51C</target>
        </trans-unit>
        <trans-unit id="eeeabb971b9770041b5d1f2a8e1b729204e8b567" translate="yes" xml:space="preserve">
          <source>U+1F51D</source>
          <target state="translated">U+1F51D</target>
        </trans-unit>
        <trans-unit id="61996634a6613b22e1be7febe517dddae0364b3b" translate="yes" xml:space="preserve">
          <source>U+1F51E</source>
          <target state="translated">U+1F51E</target>
        </trans-unit>
        <trans-unit id="c5866a3b7a2d1e3c9316848cf05a5d0a1f727e79" translate="yes" xml:space="preserve">
          <source>U+1F51F</source>
          <target state="translated">U+1F51F</target>
        </trans-unit>
        <trans-unit id="a4f1b8798fbdd31aa8cdc4aa2e0d41f99d0c16c2" translate="yes" xml:space="preserve">
          <source>U+1F520</source>
          <target state="translated">U+1F520</target>
        </trans-unit>
        <trans-unit id="278b8c9e79cd55f143056bea0ab235f23b4d882f" translate="yes" xml:space="preserve">
          <source>U+1F521</source>
          <target state="translated">U+1F521</target>
        </trans-unit>
        <trans-unit id="3058c70f27c3b548c9e106d6ff1ffbccbc317063" translate="yes" xml:space="preserve">
          <source>U+1F522</source>
          <target state="translated">U+1F522</target>
        </trans-unit>
        <trans-unit id="5bbd9f89f097524967c87e38ab74dae36baee11b" translate="yes" xml:space="preserve">
          <source>U+1F523</source>
          <target state="translated">U+1F523</target>
        </trans-unit>
        <trans-unit id="44992a44944ff988337885d79e0d777542a71289" translate="yes" xml:space="preserve">
          <source>U+1F524</source>
          <target state="translated">U+1F524</target>
        </trans-unit>
        <trans-unit id="4601e2d9de4f353fef7bc14821e84bceaca66903" translate="yes" xml:space="preserve">
          <source>U+1F525</source>
          <target state="translated">U+1F525</target>
        </trans-unit>
        <trans-unit id="caba5eadcb5864fc595d841c5ba7470add300a88" translate="yes" xml:space="preserve">
          <source>U+1F526</source>
          <target state="translated">U+1F526</target>
        </trans-unit>
        <trans-unit id="e06bcc3cea3386f0302417ad0b3137b5f88a23c8" translate="yes" xml:space="preserve">
          <source>U+1F527</source>
          <target state="translated">U+1F527</target>
        </trans-unit>
        <trans-unit id="8906037800b3353bee8103229addc305893f8bb5" translate="yes" xml:space="preserve">
          <source>U+1F528</source>
          <target state="translated">U+1F528</target>
        </trans-unit>
        <trans-unit id="4f0c07a450033b9651d1bbac1457162254c92bd9" translate="yes" xml:space="preserve">
          <source>U+1F529</source>
          <target state="translated">U+1F529</target>
        </trans-unit>
        <trans-unit id="6a7ee5d8aaa224e3e2192948969ac7219602c557" translate="yes" xml:space="preserve">
          <source>U+1F52A</source>
          <target state="translated">U+1F52A</target>
        </trans-unit>
        <trans-unit id="9e3c235a731d592c6cd1d4e7bf929ccc3310988b" translate="yes" xml:space="preserve">
          <source>U+1F52B</source>
          <target state="translated">U+1F52B</target>
        </trans-unit>
        <trans-unit id="22ec942a846d7ae0dff94e7f278e84073f808120" translate="yes" xml:space="preserve">
          <source>U+1F52C</source>
          <target state="translated">U+1F52C</target>
        </trans-unit>
        <trans-unit id="0e3ded5126590c59db429d2a85492e9e9f8adb0f" translate="yes" xml:space="preserve">
          <source>U+1F52D</source>
          <target state="translated">U+1F52D</target>
        </trans-unit>
        <trans-unit id="be71831fee17f040f9da956ecdaae8ecd316c2ff" translate="yes" xml:space="preserve">
          <source>U+1F52E</source>
          <target state="translated">U+1F52E</target>
        </trans-unit>
        <trans-unit id="fbb3d3a19d3534a96702097a49b7cf57d0f01fb8" translate="yes" xml:space="preserve">
          <source>U+1F52F</source>
          <target state="translated">U+1F52F</target>
        </trans-unit>
        <trans-unit id="e63ab9ec3e2610a49e222a2b89da20cec976f3a9" translate="yes" xml:space="preserve">
          <source>U+1F530</source>
          <target state="translated">U+1F530</target>
        </trans-unit>
        <trans-unit id="294c4d48eccd04740cd5eb6b6142d06aeb2c38d9" translate="yes" xml:space="preserve">
          <source>U+1F531</source>
          <target state="translated">U+1F531</target>
        </trans-unit>
        <trans-unit id="03c803069e89d479bb1376323cb217a6924930ad" translate="yes" xml:space="preserve">
          <source>U+1F532</source>
          <target state="translated">U+1F532</target>
        </trans-unit>
        <trans-unit id="96865de6697507e1259a4fd5bbfc365914fa008d" translate="yes" xml:space="preserve">
          <source>U+1F533</source>
          <target state="translated">U+1F533</target>
        </trans-unit>
        <trans-unit id="ab4d39af64fd6984f25543a21b2303fa21b01d29" translate="yes" xml:space="preserve">
          <source>U+1F534</source>
          <target state="translated">U+1F534</target>
        </trans-unit>
        <trans-unit id="f2b263fa77fb01c90e5a2b89ad6b66c2aed9a6bf" translate="yes" xml:space="preserve">
          <source>U+1F535</source>
          <target state="translated">U+1F535</target>
        </trans-unit>
        <trans-unit id="39858a66bc76639b7cd69c2ca15ff3905f837740" translate="yes" xml:space="preserve">
          <source>U+1F536</source>
          <target state="translated">U+1F536</target>
        </trans-unit>
        <trans-unit id="91c3ed1e2b253a71039009b7d0bb2635e06c8816" translate="yes" xml:space="preserve">
          <source>U+1F537</source>
          <target state="translated">U+1F537</target>
        </trans-unit>
        <trans-unit id="cb132bea452a2b1f4f762199f4f40069fc65d721" translate="yes" xml:space="preserve">
          <source>U+1F538</source>
          <target state="translated">U+1F538</target>
        </trans-unit>
        <trans-unit id="99bb6b94988d10a28a24ad1c429dc045459594a5" translate="yes" xml:space="preserve">
          <source>U+1F539</source>
          <target state="translated">U+1F539</target>
        </trans-unit>
        <trans-unit id="134b021bc5a92497b65fa099efe138d6c5395850" translate="yes" xml:space="preserve">
          <source>U+1F53A</source>
          <target state="translated">U+1F53A</target>
        </trans-unit>
        <trans-unit id="c08a635bff39b5f551e2b293f10e4f8c204ac98d" translate="yes" xml:space="preserve">
          <source>U+1F53B</source>
          <target state="translated">U+1F53B</target>
        </trans-unit>
        <trans-unit id="c9ae80a3a9c025d74a511cf3e7bcbcca0f697151" translate="yes" xml:space="preserve">
          <source>U+1F53C</source>
          <target state="translated">U+1F53C</target>
        </trans-unit>
        <trans-unit id="ec26941905378218c3d9c63b9a1d8680d2d579bf" translate="yes" xml:space="preserve">
          <source>U+1F53D</source>
          <target state="translated">U+1F53D</target>
        </trans-unit>
        <trans-unit id="60354acea78662a0a220085b4a756b482b4da430" translate="yes" xml:space="preserve">
          <source>U+1F550</source>
          <target state="translated">U+1F550</target>
        </trans-unit>
        <trans-unit id="d57cef88a63b44d7946b3cf86e87c686707a1c8a" translate="yes" xml:space="preserve">
          <source>U+1F551</source>
          <target state="translated">U+1F551</target>
        </trans-unit>
        <trans-unit id="f1007697bcbb01ef7e7957c5ba3c772c77c7d696" translate="yes" xml:space="preserve">
          <source>U+1F552</source>
          <target state="translated">U+1F552</target>
        </trans-unit>
        <trans-unit id="9cd6aa1aa8062282223e5f9e79a84c1f88b5850f" translate="yes" xml:space="preserve">
          <source>U+1F553</source>
          <target state="translated">U+1F553</target>
        </trans-unit>
        <trans-unit id="60242e67bf6fd0e7d4d555fe3e13db0f822f8893" translate="yes" xml:space="preserve">
          <source>U+1F554</source>
          <target state="translated">U+1F554</target>
        </trans-unit>
        <trans-unit id="0a5cc7e2dad320982563e07dfa401d6ec486ce67" translate="yes" xml:space="preserve">
          <source>U+1F555</source>
          <target state="translated">U+1F555</target>
        </trans-unit>
        <trans-unit id="a672b999cda04989150415e3f4dbe81b9388b394" translate="yes" xml:space="preserve">
          <source>U+1F556</source>
          <target state="translated">U+1F556</target>
        </trans-unit>
        <trans-unit id="82ad0a54fb863de6baeb2c7091a04a652430a54f" translate="yes" xml:space="preserve">
          <source>U+1F557</source>
          <target state="translated">U+1F557</target>
        </trans-unit>
        <trans-unit id="4fce47c1d89aee064dd8afc78e306b404e14d06b" translate="yes" xml:space="preserve">
          <source>U+1F558</source>
          <target state="translated">U+1F558</target>
        </trans-unit>
        <trans-unit id="9c4450b4fcf05fa7c81d2696ce5dd161d2e1fd7a" translate="yes" xml:space="preserve">
          <source>U+1F559</source>
          <target state="translated">U+1F559</target>
        </trans-unit>
        <trans-unit id="1f512632165f642afea0e551400c7f86333a7b72" translate="yes" xml:space="preserve">
          <source>U+1F55A</source>
          <target state="translated">U+1F55A</target>
        </trans-unit>
        <trans-unit id="5e22ad5d49a8a0a6b803e448057a30c38294ad4f" translate="yes" xml:space="preserve">
          <source>U+1F55B</source>
          <target state="translated">U+1F55B</target>
        </trans-unit>
        <trans-unit id="419e1c308cfff614f195c09a0dc4820f8a656bc0" translate="yes" xml:space="preserve">
          <source>U+1F55C</source>
          <target state="translated">U+1F55C</target>
        </trans-unit>
        <trans-unit id="1e2b8a83157601a3c2b39adf0b7735774f59eb2e" translate="yes" xml:space="preserve">
          <source>U+1F55D</source>
          <target state="translated">U+1F55D</target>
        </trans-unit>
        <trans-unit id="cd87317d3b100325c842e088419173f3890b0dd3" translate="yes" xml:space="preserve">
          <source>U+1F55E</source>
          <target state="translated">U+1F55E</target>
        </trans-unit>
        <trans-unit id="a463ba319d867ff29677aab6bd3cedad857a25e6" translate="yes" xml:space="preserve">
          <source>U+1F55F</source>
          <target state="translated">U+1F55F</target>
        </trans-unit>
        <trans-unit id="6b04f2b1858a6e51b423ed12150a913784426e84" translate="yes" xml:space="preserve">
          <source>U+1F560</source>
          <target state="translated">U+1F560</target>
        </trans-unit>
        <trans-unit id="d86be82a142f32f25efe42d56501581a5edb1f73" translate="yes" xml:space="preserve">
          <source>U+1F561</source>
          <target state="translated">U+1F561</target>
        </trans-unit>
        <trans-unit id="e0e2532d10cac8e29209208be2038e8d98653b4b" translate="yes" xml:space="preserve">
          <source>U+1F562</source>
          <target state="translated">U+1F562</target>
        </trans-unit>
        <trans-unit id="6ed29cea6ffa99e5c9b1c3bde7a31343df88add7" translate="yes" xml:space="preserve">
          <source>U+1F563</source>
          <target state="translated">U+1F563</target>
        </trans-unit>
        <trans-unit id="9622e97b6170d792f5ff47049300f0900da7797b" translate="yes" xml:space="preserve">
          <source>U+1F564</source>
          <target state="translated">U+1F564</target>
        </trans-unit>
        <trans-unit id="abaf42c02ecb13770d2089f4095c32d76924bdd5" translate="yes" xml:space="preserve">
          <source>U+1F565</source>
          <target state="translated">U+1F565</target>
        </trans-unit>
        <trans-unit id="80c0fcab65eb59d9a4a6014e6774eab729cc5867" translate="yes" xml:space="preserve">
          <source>U+1F566</source>
          <target state="translated">U+1F566</target>
        </trans-unit>
        <trans-unit id="0a2dda55b1a399b20b870c005706dcc37b067aa4" translate="yes" xml:space="preserve">
          <source>U+1F567</source>
          <target state="translated">U+1F567</target>
        </trans-unit>
        <trans-unit id="0de22b2eb9b6a98274b5d6eff3c71bb3fe731462" translate="yes" xml:space="preserve">
          <source>U+1F5FB</source>
          <target state="translated">U+1F5FB</target>
        </trans-unit>
        <trans-unit id="84d2f7504830271bf9ccafc6fa8403cd40ee187a" translate="yes" xml:space="preserve">
          <source>U+1F5FC</source>
          <target state="translated">U+1F5FC</target>
        </trans-unit>
        <trans-unit id="4838b2729bcfeeb233785246b79c4600953d8533" translate="yes" xml:space="preserve">
          <source>U+1F5FD</source>
          <target state="translated">U+1F5FD</target>
        </trans-unit>
        <trans-unit id="53879f947471c32ebb23249fdaa61b1cdf420723" translate="yes" xml:space="preserve">
          <source>U+1F5FE</source>
          <target state="translated">U+1F5FE</target>
        </trans-unit>
        <trans-unit id="67a8c37798181716a844158e844a98572f8b218a" translate="yes" xml:space="preserve">
          <source>U+1F5FF</source>
          <target state="translated">U+1F5FF</target>
        </trans-unit>
        <trans-unit id="b04c00d4062ade85e1b4f493e047dc76751d8501" translate="yes" xml:space="preserve">
          <source>U+1F600</source>
          <target state="translated">U+1F600</target>
        </trans-unit>
        <trans-unit id="74b47bee72091430e167699cd0fac8914bfc39d5" translate="yes" xml:space="preserve">
          <source>U+1F601</source>
          <target state="translated">U+1F601</target>
        </trans-unit>
        <trans-unit id="f6af075d0cef043fce4123e36b8bf01e3934292c" translate="yes" xml:space="preserve">
          <source>U+1F602</source>
          <target state="translated">U+1F602</target>
        </trans-unit>
        <trans-unit id="ba578cc97d0559f9c6dd4d43364ad124020a7382" translate="yes" xml:space="preserve">
          <source>U+1F603</source>
          <target state="translated">U+1F603</target>
        </trans-unit>
        <trans-unit id="aa16d98ecee23e694ebf31cab6baebc7735a495e" translate="yes" xml:space="preserve">
          <source>U+1F604</source>
          <target state="translated">U+1F604</target>
        </trans-unit>
        <trans-unit id="a25dcfa47376e91d2ca39ddbd38432137b0f8576" translate="yes" xml:space="preserve">
          <source>U+1F605</source>
          <target state="translated">U+1F605</target>
        </trans-unit>
        <trans-unit id="11f0cb3b882f19c6216601994dc8f1ea6083b557" translate="yes" xml:space="preserve">
          <source>U+1F606</source>
          <target state="translated">U+1F606</target>
        </trans-unit>
        <trans-unit id="807e60987843a32a5998a76a8c5dc4791f2ad5df" translate="yes" xml:space="preserve">
          <source>U+1F607</source>
          <target state="translated">U+1F607</target>
        </trans-unit>
        <trans-unit id="704a7eef87670aa15dadb9856ab95757d5ac26ec" translate="yes" xml:space="preserve">
          <source>U+1F608</source>
          <target state="translated">U+1F608</target>
        </trans-unit>
        <trans-unit id="0bff520ddb03b8b848f105565f281f0e0a345bb7" translate="yes" xml:space="preserve">
          <source>U+1F609</source>
          <target state="translated">U+1F609</target>
        </trans-unit>
        <trans-unit id="f1e02c5d660338daee316a10569935906271244b" translate="yes" xml:space="preserve">
          <source>U+1F60A</source>
          <target state="translated">U+1F60A</target>
        </trans-unit>
        <trans-unit id="98dc65b606517bd5beed63142cf5d5a7b680d892" translate="yes" xml:space="preserve">
          <source>U+1F60B</source>
          <target state="translated">U+1F60B</target>
        </trans-unit>
        <trans-unit id="a3a1bb5ca19a0b7dd120b4eab7f3b6e14d48f8f7" translate="yes" xml:space="preserve">
          <source>U+1F60C</source>
          <target state="translated">U+1F60C</target>
        </trans-unit>
        <trans-unit id="74ff81f548b987fef3a92da5d2cba8b625352ee1" translate="yes" xml:space="preserve">
          <source>U+1F60D</source>
          <target state="translated">U+1F60D</target>
        </trans-unit>
        <trans-unit id="c4e13a68b25220fd2f9214c9599d96b10dce116f" translate="yes" xml:space="preserve">
          <source>U+1F60E</source>
          <target state="translated">U+1F60E</target>
        </trans-unit>
        <trans-unit id="b6d7a2f91c2eb4cb1eef2202da7f00dd07074c8b" translate="yes" xml:space="preserve">
          <source>U+1F60F</source>
          <target state="translated">U+1F60F</target>
        </trans-unit>
        <trans-unit id="61a43818d3fd79de23b875dc30af1bd1aa24ec32" translate="yes" xml:space="preserve">
          <source>U+1F610</source>
          <target state="translated">U+1F610</target>
        </trans-unit>
        <trans-unit id="4cd7accdc097b80868ab4eafc5db08eaf2d3be26" translate="yes" xml:space="preserve">
          <source>U+1F611</source>
          <target state="translated">U+1F611</target>
        </trans-unit>
        <trans-unit id="70b0bff0d0b34bfd22c1f717a55cca85c9e6459d" translate="yes" xml:space="preserve">
          <source>U+1F612</source>
          <target state="translated">U+1F612</target>
        </trans-unit>
        <trans-unit id="c2ad7654eda19c15e835a1675a652d54922e4363" translate="yes" xml:space="preserve">
          <source>U+1F613</source>
          <target state="translated">U+1F613</target>
        </trans-unit>
        <trans-unit id="d651bb4c89aec1bcf318316f6b3c98e568e377b5" translate="yes" xml:space="preserve">
          <source>U+1F614</source>
          <target state="translated">U+1F614</target>
        </trans-unit>
        <trans-unit id="3c5ba1e6c4dfaa7fe133ddf9167d2c8b6ad39725" translate="yes" xml:space="preserve">
          <source>U+1F615</source>
          <target state="translated">U+1F615</target>
        </trans-unit>
        <trans-unit id="15382b95632752823a54ef25dbd6387b34528dbb" translate="yes" xml:space="preserve">
          <source>U+1F616</source>
          <target state="translated">U+1F616</target>
        </trans-unit>
        <trans-unit id="1d4b5ff52924dd91e4c4b97be073d4102811358f" translate="yes" xml:space="preserve">
          <source>U+1F617</source>
          <target state="translated">U+1F617</target>
        </trans-unit>
        <trans-unit id="f6ac3da0409fdb5f942021ce76aca09070d6c633" translate="yes" xml:space="preserve">
          <source>U+1F618</source>
          <target state="translated">U+1F618</target>
        </trans-unit>
        <trans-unit id="2e8749e33efd2cfe0a06a3598f0a341c4ec30d68" translate="yes" xml:space="preserve">
          <source>U+1F619</source>
          <target state="translated">U+1F619</target>
        </trans-unit>
        <trans-unit id="502656d4412e10cc2330c501e1d2207deb401cff" translate="yes" xml:space="preserve">
          <source>U+1F61A</source>
          <target state="translated">U+1F61A</target>
        </trans-unit>
        <trans-unit id="e02e465d0dd51885e565606a3aecf5d873bf5839" translate="yes" xml:space="preserve">
          <source>U+1F61B</source>
          <target state="translated">U+1F61B</target>
        </trans-unit>
        <trans-unit id="ad8096a8bd48751f38a91f7087e45d9d4afecb09" translate="yes" xml:space="preserve">
          <source>U+1F61C</source>
          <target state="translated">U+1F61C</target>
        </trans-unit>
        <trans-unit id="6e5701167a14864cbf09a9e01670b04b59cd7b27" translate="yes" xml:space="preserve">
          <source>U+1F61D</source>
          <target state="translated">U+1F61D</target>
        </trans-unit>
        <trans-unit id="5c1e87f0cfbf609216c40e34aeccd7a006471efb" translate="yes" xml:space="preserve">
          <source>U+1F61E</source>
          <target state="translated">U+1F61E</target>
        </trans-unit>
        <trans-unit id="d72a7439f9afc3b57697635a4d5b744e57a85053" translate="yes" xml:space="preserve">
          <source>U+1F61F</source>
          <target state="translated">U+1F61F</target>
        </trans-unit>
        <trans-unit id="0efc25f0fc7742fa118b83483e9662fe89002669" translate="yes" xml:space="preserve">
          <source>U+1F620</source>
          <target state="translated">U+1F620</target>
        </trans-unit>
        <trans-unit id="51473085a43c62a92fb7b9d0349cc40ee8ee8760" translate="yes" xml:space="preserve">
          <source>U+1F621</source>
          <target state="translated">U+1F621</target>
        </trans-unit>
        <trans-unit id="4e4014eef79c78bd155b93d0852d8342b1bc9cc4" translate="yes" xml:space="preserve">
          <source>U+1F622</source>
          <target state="translated">U+1F622</target>
        </trans-unit>
        <trans-unit id="71eb60d40116325c682aff62a5367d3916b57ba5" translate="yes" xml:space="preserve">
          <source>U+1F623</source>
          <target state="translated">U+1F623</target>
        </trans-unit>
        <trans-unit id="cf08558e261039b9ee6091ce571cec07249373df" translate="yes" xml:space="preserve">
          <source>U+1F624</source>
          <target state="translated">U+1F624</target>
        </trans-unit>
        <trans-unit id="17c6212fd93e5d1ef373757aec77657296808340" translate="yes" xml:space="preserve">
          <source>U+1F625</source>
          <target state="translated">U+1F625</target>
        </trans-unit>
        <trans-unit id="96dc7ad8e6f40a2e99681368efc8596d2a9ce3ae" translate="yes" xml:space="preserve">
          <source>U+1F626</source>
          <target state="translated">U+1F626</target>
        </trans-unit>
        <trans-unit id="c089097bb3aa00513551bf544cb3416657d80e7f" translate="yes" xml:space="preserve">
          <source>U+1F627</source>
          <target state="translated">U+1F627</target>
        </trans-unit>
        <trans-unit id="8dbfb23483e56640c6b4d80590219d449f80b18e" translate="yes" xml:space="preserve">
          <source>U+1F628</source>
          <target state="translated">U+1F628</target>
        </trans-unit>
        <trans-unit id="1e5780ba79f2aa6b41d022771c16a600d357f70f" translate="yes" xml:space="preserve">
          <source>U+1F629</source>
          <target state="translated">U+1F629</target>
        </trans-unit>
        <trans-unit id="357ba58d44faf5d5b6b0ec28fa682cd1a339d232" translate="yes" xml:space="preserve">
          <source>U+1F62A</source>
          <target state="translated">U+1F62A</target>
        </trans-unit>
        <trans-unit id="2fd730c558b235f43ce658b00782891582ce2dd5" translate="yes" xml:space="preserve">
          <source>U+1F62B</source>
          <target state="translated">U+1F62B</target>
        </trans-unit>
        <trans-unit id="82f10169a0c31e97783e72eb3ce6b48fbc9c503f" translate="yes" xml:space="preserve">
          <source>U+1F62C</source>
          <target state="translated">U+1F62C</target>
        </trans-unit>
        <trans-unit id="12f85e453d8858334067f2a1abf907b65feb89ae" translate="yes" xml:space="preserve">
          <source>U+1F62D</source>
          <target state="translated">U+1F62D</target>
        </trans-unit>
        <trans-unit id="a47e8bff741f4777e221469722be8470ef7f33ea" translate="yes" xml:space="preserve">
          <source>U+1F62E</source>
          <target state="translated">U+1F62E</target>
        </trans-unit>
        <trans-unit id="75109820f5ebc71165d693acf56b4da53e61a7eb" translate="yes" xml:space="preserve">
          <source>U+1F62F</source>
          <target state="translated">U+1F62F</target>
        </trans-unit>
        <trans-unit id="2068a80e044dd7d872acc0e64cf81fb70c50438b" translate="yes" xml:space="preserve">
          <source>U+1F630</source>
          <target state="translated">U+1F630</target>
        </trans-unit>
        <trans-unit id="8df024647fdb3b9d820bf4488dd33452a0dca75f" translate="yes" xml:space="preserve">
          <source>U+1F631</source>
          <target state="translated">U+1F631</target>
        </trans-unit>
        <trans-unit id="2b3f2ab4b9b84cd5a43db070a6f69d2b0de0bc7d" translate="yes" xml:space="preserve">
          <source>U+1F632</source>
          <target state="translated">U+1F632</target>
        </trans-unit>
        <trans-unit id="b612a2d9813db9acbd195676be0b8bd0903bbddc" translate="yes" xml:space="preserve">
          <source>U+1F633</source>
          <target state="translated">U+1F633</target>
        </trans-unit>
        <trans-unit id="4b5e8dd65e4aa20f72a2978dbb7c0f00d4ca1188" translate="yes" xml:space="preserve">
          <source>U+1F634</source>
          <target state="translated">U+1F634</target>
        </trans-unit>
        <trans-unit id="9a06acfad1de44bc326460ff540de541763ab394" translate="yes" xml:space="preserve">
          <source>U+1F635</source>
          <target state="translated">U+1F635</target>
        </trans-unit>
        <trans-unit id="ee87c722208f4b4af8c2583691960320da0f8965" translate="yes" xml:space="preserve">
          <source>U+1F636</source>
          <target state="translated">U+1F636</target>
        </trans-unit>
        <trans-unit id="6d49522da846b32d2e092aeca98c8c4369865da8" translate="yes" xml:space="preserve">
          <source>U+1F637</source>
          <target state="translated">U+1F637</target>
        </trans-unit>
        <trans-unit id="bbcba9cc84b6d5983b0ce0f8391dd47c1768624e" translate="yes" xml:space="preserve">
          <source>U+1F638</source>
          <target state="translated">U+1F638</target>
        </trans-unit>
        <trans-unit id="c8ef8241dde488f01e4e21296a25f490fa3afa05" translate="yes" xml:space="preserve">
          <source>U+1F639</source>
          <target state="translated">U+1F639</target>
        </trans-unit>
        <trans-unit id="cf9dc8b16a0f646c3979daab01ea661996c1b6ad" translate="yes" xml:space="preserve">
          <source>U+1F63A</source>
          <target state="translated">U+1F63A</target>
        </trans-unit>
        <trans-unit id="34c3cc1907d432fd01651f89ba21e4c9faf5edbe" translate="yes" xml:space="preserve">
          <source>U+1F63B</source>
          <target state="translated">U+1F63B</target>
        </trans-unit>
        <trans-unit id="0ddde54604892d41efcff2e926ae45a8d47219bd" translate="yes" xml:space="preserve">
          <source>U+1F63C</source>
          <target state="translated">U+1F63C</target>
        </trans-unit>
        <trans-unit id="539675fe10447dd8f883147529fceef3cd2d96b3" translate="yes" xml:space="preserve">
          <source>U+1F63D</source>
          <target state="translated">U+1F63D</target>
        </trans-unit>
        <trans-unit id="e5f1f7fad0ac3486ed80151866be3499ed14d737" translate="yes" xml:space="preserve">
          <source>U+1F63E</source>
          <target state="translated">U+1F63E</target>
        </trans-unit>
        <trans-unit id="94a195b5443debe01ed0c90b5463f8b600edda92" translate="yes" xml:space="preserve">
          <source>U+1F63F</source>
          <target state="translated">U+1F63F</target>
        </trans-unit>
        <trans-unit id="d400128d518b4f8daabc23bbe327f5e8e6aec9a5" translate="yes" xml:space="preserve">
          <source>U+1F640</source>
          <target state="translated">U+1F640</target>
        </trans-unit>
        <trans-unit id="a7d2a43b3be5992b4024410c281d8304e4708c43" translate="yes" xml:space="preserve">
          <source>U+1F645</source>
          <target state="translated">U+1F645</target>
        </trans-unit>
        <trans-unit id="c615577b17816dd1ad8ade5abba38296015619ac" translate="yes" xml:space="preserve">
          <source>U+1F646</source>
          <target state="translated">U+1F646</target>
        </trans-unit>
        <trans-unit id="8613dfa5974c28327da5e9e14d2961afe222763a" translate="yes" xml:space="preserve">
          <source>U+1F647</source>
          <target state="translated">U+1F647</target>
        </trans-unit>
        <trans-unit id="31f0ab841b49d15acb85e29555ce1c23d8916009" translate="yes" xml:space="preserve">
          <source>U+1F648</source>
          <target state="translated">U+1F648</target>
        </trans-unit>
        <trans-unit id="3dce153edadae54331375f82320c7e8bc6fa3a31" translate="yes" xml:space="preserve">
          <source>U+1F649</source>
          <target state="translated">U+1F649</target>
        </trans-unit>
        <trans-unit id="31ca5b4d69f490416209131272dadf8b5350a07c" translate="yes" xml:space="preserve">
          <source>U+1F64A</source>
          <target state="translated">U+1F64A</target>
        </trans-unit>
        <trans-unit id="280f1d5cfa84da0765c1d262769b83d63275c189" translate="yes" xml:space="preserve">
          <source>U+1F64B</source>
          <target state="translated">U+1F64B</target>
        </trans-unit>
        <trans-unit id="942220b205e1c3889422f73cea9e11308765a546" translate="yes" xml:space="preserve">
          <source>U+1F64C</source>
          <target state="translated">U+1F64C</target>
        </trans-unit>
        <trans-unit id="95ec7d30b8d8eabcb342e590321b38530a3a740c" translate="yes" xml:space="preserve">
          <source>U+1F64D</source>
          <target state="translated">U+1F64D</target>
        </trans-unit>
        <trans-unit id="5f0ab43851d8878372eef21fa8afa4aae89200af" translate="yes" xml:space="preserve">
          <source>U+1F64E</source>
          <target state="translated">U+1F64E</target>
        </trans-unit>
        <trans-unit id="0963ecf4e82c0404c030b0176c485457fdbd86a5" translate="yes" xml:space="preserve">
          <source>U+1F64F</source>
          <target state="translated">U+1F64F</target>
        </trans-unit>
        <trans-unit id="2b650596da9a9972ffda3094631897189728cbdf" translate="yes" xml:space="preserve">
          <source>U+1F680</source>
          <target state="translated">U+1F680</target>
        </trans-unit>
        <trans-unit id="ab62ddcc318ee724bee486c97845a7996981b538" translate="yes" xml:space="preserve">
          <source>U+1F681</source>
          <target state="translated">U+1F681</target>
        </trans-unit>
        <trans-unit id="a12c6dcb342246be717ca5c8b2d8e483cb1fbbbf" translate="yes" xml:space="preserve">
          <source>U+1F682</source>
          <target state="translated">U+1F682</target>
        </trans-unit>
        <trans-unit id="e5dcae6c3f0ec36bbde8d223f89bc32d0be42e71" translate="yes" xml:space="preserve">
          <source>U+1F683</source>
          <target state="translated">U+1F683</target>
        </trans-unit>
        <trans-unit id="61020f6f0b4239d0ca41d376772a6dd09bddc179" translate="yes" xml:space="preserve">
          <source>U+1F684</source>
          <target state="translated">U+1F684</target>
        </trans-unit>
        <trans-unit id="5193b66d1391823cd385c17cf18dd477e45301ba" translate="yes" xml:space="preserve">
          <source>U+1F685</source>
          <target state="translated">U+1F685</target>
        </trans-unit>
        <trans-unit id="8b2c8094d6a3decf218db28d82f47023f81d0fba" translate="yes" xml:space="preserve">
          <source>U+1F686</source>
          <target state="translated">U+1F686</target>
        </trans-unit>
        <trans-unit id="1428b6c74e3222ea052ee4544ebaa3dc1ca448d4" translate="yes" xml:space="preserve">
          <source>U+1F687</source>
          <target state="translated">U+1F687</target>
        </trans-unit>
        <trans-unit id="9e17f86302477bf3a32ab8fb1c4fe82573ffee8f" translate="yes" xml:space="preserve">
          <source>U+1F688</source>
          <target state="translated">U+1F688</target>
        </trans-unit>
        <trans-unit id="24a99c6ab1944df320625863be1f8fe0a0af280d" translate="yes" xml:space="preserve">
          <source>U+1F689</source>
          <target state="translated">U+1F689</target>
        </trans-unit>
        <trans-unit id="f11c7cbfb45f61d6d2ec64bce83ca3a8c076a058" translate="yes" xml:space="preserve">
          <source>U+1F68A</source>
          <target state="translated">U+1F68A</target>
        </trans-unit>
        <trans-unit id="77c573092c5798907e627313de7f1fe8baf3479f" translate="yes" xml:space="preserve">
          <source>U+1F68B</source>
          <target state="translated">U+1F68B</target>
        </trans-unit>
        <trans-unit id="9d1c5590f787c4a36c744d8a8ff8e1937284bbdf" translate="yes" xml:space="preserve">
          <source>U+1F68C</source>
          <target state="translated">U+1F68C</target>
        </trans-unit>
        <trans-unit id="276ff06d754fcc24601859b1e72dfdd1e321c129" translate="yes" xml:space="preserve">
          <source>U+1F68D</source>
          <target state="translated">U+1F68D</target>
        </trans-unit>
        <trans-unit id="d4d9f331e594ce3fe89dd95f5bc5aaaa4ef1ff3c" translate="yes" xml:space="preserve">
          <source>U+1F68E</source>
          <target state="translated">U+1F68E</target>
        </trans-unit>
        <trans-unit id="01c3c5edf5587f8e23ccb5cc931dba5a06299a77" translate="yes" xml:space="preserve">
          <source>U+1F68F</source>
          <target state="translated">U+1F68F</target>
        </trans-unit>
        <trans-unit id="b5dc27a311ea0967fda5927e8263717c1436ea9e" translate="yes" xml:space="preserve">
          <source>U+1F690</source>
          <target state="translated">U+1F690</target>
        </trans-unit>
        <trans-unit id="0e17eae7d17604025f08cf934329024fa26bab75" translate="yes" xml:space="preserve">
          <source>U+1F691</source>
          <target state="translated">U+1F691</target>
        </trans-unit>
        <trans-unit id="93aef10c4ef140b7e36b9efda215d90f2f3949f7" translate="yes" xml:space="preserve">
          <source>U+1F692</source>
          <target state="translated">U+1F692</target>
        </trans-unit>
        <trans-unit id="1ffddad8bba49c8b09cdcbdfdd258d562fde7b15" translate="yes" xml:space="preserve">
          <source>U+1F693</source>
          <target state="translated">U+1F693</target>
        </trans-unit>
        <trans-unit id="cf02d110cc080ae81ec1c36ed33fe0a0a48dcd40" translate="yes" xml:space="preserve">
          <source>U+1F694</source>
          <target state="translated">U+1F694</target>
        </trans-unit>
        <trans-unit id="90b8cd0afadb12c38a54c00a2963487f1c716f24" translate="yes" xml:space="preserve">
          <source>U+1F695</source>
          <target state="translated">U+1F695</target>
        </trans-unit>
        <trans-unit id="128e61cc0aa0bf7a534ebdc63e3efcaff02b0120" translate="yes" xml:space="preserve">
          <source>U+1F696</source>
          <target state="translated">U+1F696</target>
        </trans-unit>
        <trans-unit id="9124e014dda9408b1a7053b8cf0d7fa33ba28275" translate="yes" xml:space="preserve">
          <source>U+1F697</source>
          <target state="translated">U+1F697</target>
        </trans-unit>
        <trans-unit id="4206ed88c4513a28b7bb392d794e268a7c20dcf9" translate="yes" xml:space="preserve">
          <source>U+1F698</source>
          <target state="translated">U+1F698</target>
        </trans-unit>
        <trans-unit id="8182d23e1647506286d334cea5dfb18d1955a0e1" translate="yes" xml:space="preserve">
          <source>U+1F699</source>
          <target state="translated">U+1F699</target>
        </trans-unit>
        <trans-unit id="d3b362e0b579fab268edbec6fc6bcffadc639ca1" translate="yes" xml:space="preserve">
          <source>U+1F69A</source>
          <target state="translated">U+1F69A</target>
        </trans-unit>
        <trans-unit id="217952db9b2b75f03262c1f6d4259a01c6f78ef6" translate="yes" xml:space="preserve">
          <source>U+1F69B</source>
          <target state="translated">U+1F69B</target>
        </trans-unit>
        <trans-unit id="c31ff64f26fcfe705aa080b861e57ae7719800a7" translate="yes" xml:space="preserve">
          <source>U+1F69C</source>
          <target state="translated">U+1F69C</target>
        </trans-unit>
        <trans-unit id="14c721c0afa8fc1fb1b143ee968eec4ec629b00e" translate="yes" xml:space="preserve">
          <source>U+1F69D</source>
          <target state="translated">U+1F69D</target>
        </trans-unit>
        <trans-unit id="d9d6920399099d8b91fd3d8260e9c1110acab0cf" translate="yes" xml:space="preserve">
          <source>U+1F69E</source>
          <target state="translated">U+1F69E</target>
        </trans-unit>
        <trans-unit id="343813c8dac3413d9d21264ea791c15b1c364a14" translate="yes" xml:space="preserve">
          <source>U+1F69F</source>
          <target state="translated">U+1F69F</target>
        </trans-unit>
        <trans-unit id="4dc516aad4a8f2eb078e0cdabe728dd5a60100e9" translate="yes" xml:space="preserve">
          <source>U+1F6A0</source>
          <target state="translated">U+1F6A0</target>
        </trans-unit>
        <trans-unit id="8ca5929aa4c2de5641fe9131793bcd962bf36fd1" translate="yes" xml:space="preserve">
          <source>U+1F6A1</source>
          <target state="translated">U+1F6A1</target>
        </trans-unit>
        <trans-unit id="96fbee26d8254c3715ff27bce1037ab7d8db5abf" translate="yes" xml:space="preserve">
          <source>U+1F6A2</source>
          <target state="translated">U+1F6A2</target>
        </trans-unit>
        <trans-unit id="b600e9f059ce1ff445de5d0cf8309bccade2af64" translate="yes" xml:space="preserve">
          <source>U+1F6A3</source>
          <target state="translated">U+1F6A3</target>
        </trans-unit>
        <trans-unit id="5d96359ecbe08d27ee799d21667932d1462661b2" translate="yes" xml:space="preserve">
          <source>U+1F6A4</source>
          <target state="translated">U+1F6A4</target>
        </trans-unit>
        <trans-unit id="1984f0e32bd6be297a85b1c89d9ee37bb283744a" translate="yes" xml:space="preserve">
          <source>U+1F6A5</source>
          <target state="translated">U+1F6A5</target>
        </trans-unit>
        <trans-unit id="c3b61e5bc5c64e9a4bb65ec01a361ba2aeedab0a" translate="yes" xml:space="preserve">
          <source>U+1F6A6</source>
          <target state="translated">U+1F6A6</target>
        </trans-unit>
        <trans-unit id="5884a094202055002ce17b2e11c25c5911acc5b9" translate="yes" xml:space="preserve">
          <source>U+1F6A7</source>
          <target state="translated">U+1F6A7</target>
        </trans-unit>
        <trans-unit id="1802bf73f543d976d0b0720d759464fdc860a14e" translate="yes" xml:space="preserve">
          <source>U+1F6A8</source>
          <target state="translated">U+1F6A8</target>
        </trans-unit>
        <trans-unit id="988fdd4dc3c518023e7d05ce85dd89629217d7de" translate="yes" xml:space="preserve">
          <source>U+1F6A9</source>
          <target state="translated">U+1F6A9</target>
        </trans-unit>
        <trans-unit id="e6e7d195634db3cde54b72b9e9ad06d782220563" translate="yes" xml:space="preserve">
          <source>U+1F6AA</source>
          <target state="translated">U+1F6AA</target>
        </trans-unit>
        <trans-unit id="b654d780f4de21af9b8699540ce63c6ad13d2b3e" translate="yes" xml:space="preserve">
          <source>U+1F6AB</source>
          <target state="translated">U+1F6AB</target>
        </trans-unit>
        <trans-unit id="2451e41c8277da8f30004b453f0fd5b961b41e23" translate="yes" xml:space="preserve">
          <source>U+1F6AC</source>
          <target state="translated">U+1F6AC</target>
        </trans-unit>
        <trans-unit id="6357c5bbd20fe6f9e7f0c63e1ad05cc712ca656d" translate="yes" xml:space="preserve">
          <source>U+1F6AD</source>
          <target state="translated">U+1F6AD</target>
        </trans-unit>
        <trans-unit id="37e52d61ed21e6127700317b4a40eb2f238a6ecc" translate="yes" xml:space="preserve">
          <source>U+1F6AE</source>
          <target state="translated">U+1F6AE</target>
        </trans-unit>
        <trans-unit id="4097a725217b747f8b9d68d5d675b5f65351f222" translate="yes" xml:space="preserve">
          <source>U+1F6AF</source>
          <target state="translated">U+1F6AF</target>
        </trans-unit>
        <trans-unit id="a42da95d2e0843a8fd41c883f9fb7733190c5bbe" translate="yes" xml:space="preserve">
          <source>U+1F6B0</source>
          <target state="translated">U+1F6B0</target>
        </trans-unit>
        <trans-unit id="7ae963ed778f75f0a7ddb8e5f72c847f112ffd82" translate="yes" xml:space="preserve">
          <source>U+1F6B1</source>
          <target state="translated">U+1F6B1</target>
        </trans-unit>
        <trans-unit id="b686beadcb9847d2073e7fc62862109e17f57279" translate="yes" xml:space="preserve">
          <source>U+1F6B2</source>
          <target state="translated">U+1F6B2</target>
        </trans-unit>
        <trans-unit id="ea1effcb1c80ad40f723f25628ce1655c8f7acd2" translate="yes" xml:space="preserve">
          <source>U+1F6B3</source>
          <target state="translated">U+1F6B3</target>
        </trans-unit>
        <trans-unit id="af584bf1479303981ba6551e1aa60fec92a47287" translate="yes" xml:space="preserve">
          <source>U+1F6B4</source>
          <target state="translated">U+1F6B4</target>
        </trans-unit>
        <trans-unit id="4ba48890f4eeae12435e49d0d31ac0c762c19047" translate="yes" xml:space="preserve">
          <source>U+1F6B5</source>
          <target state="translated">U+1F6B5</target>
        </trans-unit>
        <trans-unit id="62d460080720bdbbca730f4afaed0754244b3b24" translate="yes" xml:space="preserve">
          <source>U+1F6B6</source>
          <target state="translated">U+1F6B6</target>
        </trans-unit>
        <trans-unit id="e1ea5d3ae94f73c51a9a9c24bcb1b127820328f7" translate="yes" xml:space="preserve">
          <source>U+1F6B7</source>
          <target state="translated">U+1F6B7</target>
        </trans-unit>
        <trans-unit id="0417b2fcefb28802951373528290db37e4c58761" translate="yes" xml:space="preserve">
          <source>U+1F6B8</source>
          <target state="translated">U+1F6B8</target>
        </trans-unit>
        <trans-unit id="60b7e0789ccae21153e9f666116bc68551260af3" translate="yes" xml:space="preserve">
          <source>U+1F6B9</source>
          <target state="translated">U+1F6B9</target>
        </trans-unit>
        <trans-unit id="52312ce4a85d293d62675319553b5006ae57a867" translate="yes" xml:space="preserve">
          <source>U+1F6BA</source>
          <target state="translated">U+1F6BA</target>
        </trans-unit>
        <trans-unit id="f9a0c8fbc7875761a4091b616c94057ddd533971" translate="yes" xml:space="preserve">
          <source>U+1F6BB</source>
          <target state="translated">U+1F6BB</target>
        </trans-unit>
        <trans-unit id="7f65874570314a8c6099d895d6bf0054865580a1" translate="yes" xml:space="preserve">
          <source>U+1F6BC</source>
          <target state="translated">U+1F6BC</target>
        </trans-unit>
        <trans-unit id="fd9008a17f799926d3bc13e6729786feeec90f06" translate="yes" xml:space="preserve">
          <source>U+1F6BD</source>
          <target state="translated">U+1F6BD</target>
        </trans-unit>
        <trans-unit id="7c23e90cc658ad5a7549f6db6e4cbf7f5a209cfa" translate="yes" xml:space="preserve">
          <source>U+1F6BE</source>
          <target state="translated">U+1F6BE</target>
        </trans-unit>
        <trans-unit id="414c34251bea202c4dcc50bab7c1f510a45db788" translate="yes" xml:space="preserve">
          <source>U+1F6BF</source>
          <target state="translated">U+1F6BF</target>
        </trans-unit>
        <trans-unit id="1a7ae3672bba6e2970bbe62f669d395af79efa35" translate="yes" xml:space="preserve">
          <source>U+1F6C0</source>
          <target state="translated">U+1F6C0</target>
        </trans-unit>
        <trans-unit id="d046a7e674a865c6e9550467b8390e56998e128d" translate="yes" xml:space="preserve">
          <source>U+1F6C1</source>
          <target state="translated">U+1F6C1</target>
        </trans-unit>
        <trans-unit id="eb23f55627b54d53adba30571ba1a25dd8551266" translate="yes" xml:space="preserve">
          <source>U+1F6C2</source>
          <target state="translated">U+1F6C2</target>
        </trans-unit>
        <trans-unit id="56fc0e1ac227c70921b0b4e5f61c9842a6cad5fe" translate="yes" xml:space="preserve">
          <source>U+1F6C3</source>
          <target state="translated">U+1F6C3</target>
        </trans-unit>
        <trans-unit id="df559e4c8b4c286a54cbf10ea0b730f514794e7d" translate="yes" xml:space="preserve">
          <source>U+1F6C4</source>
          <target state="translated">U+1F6C4</target>
        </trans-unit>
        <trans-unit id="3ae2fbe9835b471b1c46f5d0f585d318fdfb64fc" translate="yes" xml:space="preserve">
          <source>U+1F6C5</source>
          <target state="translated">U+1F6C5</target>
        </trans-unit>
        <trans-unit id="d49513ad46116d9c43b4e1bdee7f589e92c24e31" translate="yes" xml:space="preserve">
          <source>UUIDs</source>
          <target state="translated">UUIDs</target>
        </trans-unit>
        <trans-unit id="c3c9435c684a579a7520f6d0f63bc6c2bbd962cf" translate="yes" xml:space="preserve">
          <source>Umbrella With Rain Drops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f702487315fa8eda1a3fa497ff6b30fea9b0de66" translate="yes" xml:space="preserve">
          <source>Unamused Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6b777bb78f858357184c0cf5af750b3f2ffa24" translate="yes" xml:space="preserve">
          <source>Unary</source>
          <target state="translated">Unary</target>
        </trans-unit>
        <trans-unit id="33615a070a8213f9f9a024a20e6f84b4303afd58" translate="yes" xml:space="preserve">
          <source>Unary arithmetic &amp;ndash; &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3754763c1706e0db232a7912f9c3edaffa2a85f3" translate="yes" xml:space="preserve">
          <source>Unary minus operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fdf00d5578ca1203ce0c265917fcf46028b1ca" translate="yes" xml:space="preserve">
          <source>Under the name &lt;code&gt;f&lt;/code&gt;, the function does not support infix notation, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b23174b84a34478775a8c32a5f61f8fcad557d5" translate="yes" xml:space="preserve">
          <source>Undo previous editing action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4951eb0404a206866e25e90da524cbe3ad59ea20" translate="yes" xml:space="preserve">
          <source>Unexpected memory allocation is almost always a sign of some problem with your code, usually a problem with type-stability or creating many small temporary arrays. Consequently, in addition to the allocation itself, it's very likely that the code generated for your function is far from optimal. Take such indications seriously and follow the advice below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c2cb9bdee8b568251b0d349a14315ed0b95471" translate="yes" xml:space="preserve">
          <source>Unexpectedly-large memory allocations&amp;ndash;as reported by &lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/base/index#Base.@allocated&quot;&gt;&lt;code&gt;@allocated&lt;/code&gt;&lt;/a&gt;, or the profiler (through calls to the garbage-collection routines)&amp;ndash;hint that there might be issues with your code. If you don't see another reason for the allocations, suspect a type problem. You can also start Julia with the &lt;code&gt;--track-allocation=user&lt;/code&gt; option and examine the resulting &lt;code&gt;*.mem&lt;/code&gt; files to see information about where those allocations occur. See &lt;a href=&quot;../profile/index#Memory-allocation-analysis-1&quot;&gt;Memory allocation analysis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="6f28b836b837608f0c0154d675bd3599917be155" translate="yes" xml:space="preserve">
          <source>Unicode Input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9632880dc5b73eee711bbb8acae51558160af7" translate="yes" xml:space="preserve">
          <source>Unicode and UTF-8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698719b962ec03f95cde2c867dc02777c6e0536d" translate="yes" xml:space="preserve">
          <source>Unicode code points (&lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; prefixes with 1-4 trailing hex digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bc80f2e45d1d151f78538e29b870405ddf7845" translate="yes" xml:space="preserve">
          <source>Unicode escape sequences produce a sequence of bytes encoding that code point in UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7b0cd63534425e31fcdcc62ed13b1e516d5f2c" translate="yes" xml:space="preserve">
          <source>Unicode name(s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa70e006bf1597d1d46ecf25af994dbcbf91f089" translate="yes" xml:space="preserve">
          <source>Unicode names (in UTF-8 encoding) are allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60bf0315c82c212eb8a0c9cd4304539e23798e5" translate="yes" xml:space="preserve">
          <source>Unicode.iscntrl()</source>
          <target state="translated">Unicode.iscntrl()</target>
        </trans-unit>
        <trans-unit id="ed6ff68a35ff0ecb36326300a7a325bd4349b875" translate="yes" xml:space="preserve">
          <source>Unicode.isdigit()</source>
          <target state="translated">Unicode.isdigit()</target>
        </trans-unit>
        <trans-unit id="5fda10c66ef8768d1750fa1fd102593bad0eb7c1" translate="yes" xml:space="preserve">
          <source>Unicode.isletter()</source>
          <target state="translated">Unicode.isletter()</target>
        </trans-unit>
        <trans-unit id="d8ba0b46f7e3e5d20b3ce7605827658ad330bb4b" translate="yes" xml:space="preserve">
          <source>Unicode.islowercase()</source>
          <target state="translated">Unicode.islowercase()</target>
        </trans-unit>
        <trans-unit id="a794cbb2595ef86eb008e681cf5e12cc29c3e213" translate="yes" xml:space="preserve">
          <source>Unicode.isnumeric()</source>
          <target state="translated">Unicode.isnumeric()</target>
        </trans-unit>
        <trans-unit id="3efffbef242057ccbf7a0009463d59d92945e6ec" translate="yes" xml:space="preserve">
          <source>Unicode.isprint()</source>
          <target state="translated">Unicode.isprint()</target>
        </trans-unit>
        <trans-unit id="e1131657a0763170d098b51c44629077ebab5b8d" translate="yes" xml:space="preserve">
          <source>Unicode.ispunct()</source>
          <target state="translated">Unicode.ispunct()</target>
        </trans-unit>
        <trans-unit id="011cbc7b9edd9055658a721e0e58cee273dfcc64" translate="yes" xml:space="preserve">
          <source>Unicode.isspace()</source>
          <target state="translated">Unicode.isspace()</target>
        </trans-unit>
        <trans-unit id="e57c7ac451e2a1a94bd3a49b3be1396543e2e859" translate="yes" xml:space="preserve">
          <source>Unicode.isuppercase()</source>
          <target state="translated">Unicode.isuppercase()</target>
        </trans-unit>
        <trans-unit id="0ac5af7ba7ad2d9038ba21b89b3e62a8211561f7" translate="yes" xml:space="preserve">
          <source>Unicode.isxdigit()</source>
          <target state="translated">Unicode.isxdigit()</target>
        </trans-unit>
        <trans-unit id="15e3344163793232a7b80a7d9ff100db094178eb" translate="yes" xml:space="preserve">
          <source>Unicode.lowercase()</source>
          <target state="translated">Unicode.lowercase()</target>
        </trans-unit>
        <trans-unit id="c264babb4fa1d215c48d089a4b6261e6559e5478" translate="yes" xml:space="preserve">
          <source>Unicode.lowercasefirst()</source>
          <target state="translated">Unicode.lowercasefirst()</target>
        </trans-unit>
        <trans-unit id="52cd9706b5756c8fc7ea25eddb434048afeaba47" translate="yes" xml:space="preserve">
          <source>Unicode.textwidth()</source>
          <target state="translated">Unicode.textwidth()</target>
        </trans-unit>
        <trans-unit id="8eeb10c2e89449dfce8910d660b718ccda32b9ea" translate="yes" xml:space="preserve">
          <source>Unicode.titlecase()</source>
          <target state="translated">Unicode.titlecase()</target>
        </trans-unit>
        <trans-unit id="92ab4a0755d73919b51d0685d020b2423e976d82" translate="yes" xml:space="preserve">
          <source>Unicode.uppercase()</source>
          <target state="translated">Unicode.uppercase()</target>
        </trans-unit>
        <trans-unit id="184d1f09105f23906430a1146c91a3f8647b08da" translate="yes" xml:space="preserve">
          <source>Unicode.uppercasefirst()</source>
          <target state="translated">Unicode.uppercasefirst()</target>
        </trans-unit>
        <trans-unit id="c1203351bb9345af3c2d12734d30ec784d763f9e" translate="yes" xml:space="preserve">
          <source>Uniform scaling operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d1bc1786787b9f5cf6f8701a1fb442f4f59285" translate="yes" xml:space="preserve">
          <source>Union</source>
          <target state="translated">Union</target>
        </trans-unit>
        <trans-unit id="58bec534560f8d2d7b09047589d18f5400db665d" translate="yes" xml:space="preserve">
          <source>Union Beside And Joined With Union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15a53d1f4c0f483b2c70d02693cc4c04931e751" translate="yes" xml:space="preserve">
          <source>Union With Logical Or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16d2e6cf5a64fd72d274ae03056c598a58af8d4" translate="yes" xml:space="preserve">
          <source>Union With Minus Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0beaa22a534b5f0ac583d7469d80634f71e9f73d" translate="yes" xml:space="preserve">
          <source>Union With Overbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7930d85483884ac083bdd8dbbdd4651816a73e25" translate="yes" xml:space="preserve">
          <source>Union type of &lt;a href=&quot;#Base.AbstractVector&quot;&gt;&lt;code&gt;AbstractVector{T}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.AbstractMatrix&quot;&gt;&lt;code&gt;AbstractMatrix{T}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4831aa0ad501684ea1b8909b5fc0a95c7a84c412" translate="yes" xml:space="preserve">
          <source>Union type of &lt;a href=&quot;#Base.DenseVector&quot;&gt;&lt;code&gt;DenseVector{T}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.DenseMatrix&quot;&gt;&lt;code&gt;DenseMatrix{T}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42626cd8963dff0b3b11dc16d7eac233f9a8c1fe" translate="yes" xml:space="preserve">
          <source>Union type of &lt;a href=&quot;#Base.StridedVector&quot;&gt;&lt;code&gt;StridedVector&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.StridedMatrix&quot;&gt;&lt;code&gt;StridedMatrix&lt;/code&gt;&lt;/a&gt; with elements of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab8bdaf061e333c70be28c284b5239c18482e61" translate="yes" xml:space="preserve">
          <source>Union type of &lt;a href=&quot;#Base.Vector&quot;&gt;&lt;code&gt;Vector{T}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Base.Matrix&quot;&gt;&lt;code&gt;Matrix{T}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded68b361a2271323c013e7de9ed14151a3e9ae8" translate="yes" xml:space="preserve">
          <source>UnionAll Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cfd89fb0d1b9c6b620c09bd5367b4faa06880e" translate="yes" xml:space="preserve">
          <source>Union{}</source>
          <target state="translated">Union{}</target>
        </trans-unit>
        <trans-unit id="f57f3517463f9ae6920f1bea30216e44c0c7cc86" translate="yes" xml:space="preserve">
          <source>Unit Diagonal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="translated">单元测试</target>
        </trans-unit>
        <trans-unit id="dc3dd58b58087afa64f68ad32f6635e7d606a677" translate="yes" xml:space="preserve">
          <source>UnitRange</source>
          <target state="translated">UnitRange</target>
        </trans-unit>
        <trans-unit id="90b46d95ea19321157a1af212c3cfd23b255c7d1" translate="yes" xml:space="preserve">
          <source>Unix timestamp of when the file was created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eff68bd2752a782c89b237996a3fb91a2de4b64" translate="yes" xml:space="preserve">
          <source>Unix timestamp of when the file was last modified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570859435cc1105bad50874c8659ff4f53bc2bdc" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#Distributed.@spawn&quot;&gt;&lt;code&gt;@spawn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Distributed.@spawnat&quot;&gt;&lt;code&gt;@spawnat&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;@everywhere&lt;/code&gt; does not capture any local variables. Instead, local variables can be broadcast using interpolation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8be5c11f04152a4c797565b0fad8d06b757d39d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;E&lt;/code&gt;, which is equivalent to &lt;code&gt;e&lt;/code&gt; in numeric literals for historical reasons, &lt;code&gt;F&lt;/code&gt; is just another letter and does not behave like &lt;code&gt;f&lt;/code&gt; in numeric literals. Hence, expressions starting with a numeric literal followed by &lt;code&gt;F&lt;/code&gt; are interpreted as the numerical literal multiplied by a variable, which means that, for example, &lt;code&gt;1.5F22&lt;/code&gt; is equal to &lt;code&gt;1.5 * F22&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84b417b4dc8fa9979d2397e64a2fdaf3b26a7a8" translate="yes" xml:space="preserve">
          <source>Unlike C, MATLAB, Perl, Python, and Ruby &amp;ndash; but like Java, and a few other stricter, typed languages &amp;ndash; it is an error if the value of a conditional expression is anything but &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fcc80be1814763b01cd7b2034dd555bd4bc67c" translate="yes" xml:space="preserve">
          <source>Unlike assignments to local variables, &lt;code&gt;let&lt;/code&gt; statements allocate new variable bindings each time they run. An assignment modifies an existing value location, and &lt;code&gt;let&lt;/code&gt; creates new locations. This difference is usually not important, and is only detectable in the case of variables that outlive their scope via closures. The &lt;code&gt;let&lt;/code&gt; syntax accepts a comma-separated series of assignments and variable names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444c5d2cd80706d613785a666fdb58b7a340e839" translate="yes" xml:space="preserve">
          <source>Unlike many languages (for example, C and Java), Julia objects cannot be &quot;null&quot; by default. When a reference (variable, object field, or array element) is uninitialized, accessing it will immediately throw an error. This situation can be detected using the &lt;a href=&quot;../../base/base/index#Core.isdefined&quot;&gt;&lt;code&gt;isdefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../base/arrays/index#Base.isassigned&quot;&gt;&lt;code&gt;isassigned&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3053056a5c02365fe70a7d8f4183a097e677ed6e" translate="yes" xml:space="preserve">
          <source>Unlike most languages, with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Comparison_operators&quot;&gt;notable exception of Python&lt;/a&gt;, comparisons can be arbitrarily chained:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1cf4180a89a7075fb50d3d2a95f6e0dcb5c75b" translate="yes" xml:space="preserve">
          <source>Unlike strings, &lt;code&gt;Symbol&lt;/code&gt;s are &quot;atomic&quot; or &quot;scalar&quot; entities that do not support iteration over characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb33a5763f63e8a947542cd5669bbecb9982026" translate="yes" xml:space="preserve">
          <source>Unlike the numeric &lt;a href=&quot;#Base.round-Tuple%7BTimeType,Period,RoundingMode%7B:NearestTiesUp%7D%7D&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt; method, which breaks ties toward the even number by default, the &lt;a href=&quot;#Dates.TimeType&quot;&gt;&lt;code&gt;TimeType&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#Base.round-Tuple%7BTimeType,Period,RoundingMode%7B:NearestTiesUp%7D%7D&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt; method uses the &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; rounding mode. (It's difficult to guess what breaking ties to nearest &quot;even&quot; &lt;a href=&quot;#Dates.TimeType&quot;&gt;&lt;code&gt;TimeType&lt;/code&gt;&lt;/a&gt; would entail.) Further details on the available &lt;code&gt;RoundingMode&lt;/code&gt; s can be found in the &lt;a href=&quot;#stdlib-dates-api-1&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1294925b329d015eb05d66f0f240062ece39d4f6" translate="yes" xml:space="preserve">
          <source>Unlike the other means of quoting, &lt;code&gt;:( ... )&lt;/code&gt;, this form introduces &lt;code&gt;QuoteNode&lt;/code&gt; elements to the expression tree, which must be considered when directly manipulating the tree. For other purposes, &lt;code&gt;:( ... )&lt;/code&gt; and &lt;code&gt;quote .. end&lt;/code&gt; blocks are treated identically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87cdfad6a605391ad42203f7103f6ccc46ebacd" translate="yes" xml:space="preserve">
          <source>Unlike the shell &lt;code&gt;PATH&lt;/code&gt; variable but similar to &lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt;, empty entries in &lt;code&gt;JULIA_DEPOT_PATH&lt;/code&gt; are expanded to the default value of &lt;code&gt;DEPOT_PATH&lt;/code&gt;. This allows easy appending, prepending, etc. of the depot path value in shell scripts regardless of whether &lt;code&gt;JULIA_DEPOT_PATH&lt;/code&gt; is already set or not. For example, to prepend the directory &lt;code&gt;/foo/bar&lt;/code&gt; to &lt;code&gt;DEPOT_PATH&lt;/code&gt; just do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f997bfad4811e642422f704175d347f3a341c4d" translate="yes" xml:space="preserve">
          <source>Unlike the shell &lt;code&gt;PATH&lt;/code&gt; variable, empty entries in &lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt; are expanded to the default value of &lt;code&gt;LOAD_PATH&lt;/code&gt;, &lt;code&gt;[&quot;@&quot;, &quot;@v#.#&quot;, &quot;@stdlib&quot;]&lt;/code&gt; when populating &lt;code&gt;LOAD_PATH&lt;/code&gt;. This allows easy appending, prepending, etc. of the load path value in shell scripts regardless of whether &lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt; is already set or not. For example, to prepend the directory &lt;code&gt;/foo/bar&lt;/code&gt; to &lt;code&gt;LOAD_PATH&lt;/code&gt; just do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793177fb8c031d3039cb77ecf0703a12ccb47db2" translate="yes" xml:space="preserve">
          <source>Unobtrusive yet powerful type system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741772cb78518cc780c4817c20c850d8c29c5485" translate="yes" xml:space="preserve">
          <source>Unordered lists can be written by prepending each item in a list with either &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, or &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da93648223105cc5d2d8167312cbfd82eac353e" translate="yes" xml:space="preserve">
          <source>Unset the bits of &lt;code&gt;val&lt;/code&gt; indexed by &lt;code&gt;flag&lt;/code&gt;, returning them to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d75f142d6cc17e101127cc594ee69799cd5cd0" translate="yes" xml:space="preserve">
          <source>Unsigned integers are input and output using the &lt;code&gt;0x&lt;/code&gt; prefix and hexadecimal (base 16) digits &lt;code&gt;0-9a-f&lt;/code&gt; (the capitalized digits &lt;code&gt;A-F&lt;/code&gt; also work for input). The size of the unsigned value is determined by the number of hex digits used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2de7169696d55bacc7ad874ddd9cb8c3b59a15" translate="yes" xml:space="preserve">
          <source>Unsigned right bit shift operator, &lt;code&gt;x &amp;gt;&amp;gt;&amp;gt; n&lt;/code&gt;. For &lt;code&gt;n &amp;gt;= 0&lt;/code&gt;, the result is &lt;code&gt;x&lt;/code&gt; shifted right by &lt;code&gt;n&lt;/code&gt; bits, where &lt;code&gt;n &amp;gt;= 0&lt;/code&gt;, filling with &lt;code&gt;0&lt;/code&gt;s. For &lt;code&gt;n &amp;lt; 0&lt;/code&gt;, this is equivalent to &lt;code&gt;x &amp;lt;&amp;lt; -n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af3cf4605413d5de836b8b8a19b8e0d8146d35f" translate="yes" xml:space="preserve">
          <source>Unsigned right bitshift operator, &lt;code&gt;B &amp;gt;&amp;gt;&amp;gt; n&lt;/code&gt;. Equivalent to &lt;code&gt;B &amp;gt;&amp;gt; n&lt;/code&gt;. See &lt;a href=&quot;#Base.:&amp;gt;&amp;gt;&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt; for details and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c1bebc0dcb0881b1a6e82aa0aa17b0f959ba73" translate="yes" xml:space="preserve">
          <source>Until now, we have, in our examples, defined only functions with a single method having unconstrained argument types. Such functions behave just like they would in traditional dynamically typed languages. Nevertheless, we have used multiple dispatch and methods almost continually without being aware of it: all of Julia's standard functions and operators, like the aforementioned &lt;code&gt;+&lt;/code&gt; function, have many methods defining their behavior over various possible combinations of argument type and count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2180cfa4e0e150d3a70956f8b84e068b28cf55" translate="yes" xml:space="preserve">
          <source>Until we discuss &lt;a href=&quot;../methods/index#Parametric-Methods-1&quot;&gt;Parametric Methods&lt;/a&gt; and &lt;a href=&quot;../conversion-and-promotion/index#conversion-and-promotion-1&quot;&gt;conversions&lt;/a&gt;, it is difficult to explain the utility of the singleton type construct, but in short, it allows one to specialize function behavior on specific type &lt;em&gt;values&lt;/em&gt;. This is useful for writing methods (especially parametric ones) whose behavior depends on a type that is given as an explicit argument rather than implied by the type of one of its arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b30cecdd8de92cf3048be06ee69be1bb8a35ea" translate="yes" xml:space="preserve">
          <source>Up Barb Left Down Barb Left Harpoon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04725bb7863a68f5808e87df32b2a7f1780f6572" translate="yes" xml:space="preserve">
          <source>Up Barb Left Down Barb Right Harpoon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db9ff061f992adf702d9e5c7667a97a345ae58b" translate="yes" xml:space="preserve">
          <source>Up Barb Right Down Barb Left Harpoon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e2f827940005e35cdf9ed625115087043676ba" translate="yes" xml:space="preserve">
          <source>Up Barb Right Down Barb Right Harpoon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052e0baa4d85e3384f038b4f040f5d79985476f9" translate="yes" xml:space="preserve">
          <source>Up Down Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba49a07116dc002d7cdec6b629e18592492c5e1" translate="yes" xml:space="preserve">
          <source>Up Down Arrow With Base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74aaa934e61e0274403e6907bbce84514cbc9d58" translate="yes" xml:space="preserve">
          <source>Up Down Double Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8648b4b63d9d15d15168ca6f641768d655f36b" translate="yes" xml:space="preserve">
          <source>Up Right Diagonal Ellipsis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e9f05391c08ceed520a3fa5d403f495bebd72f" translate="yes" xml:space="preserve">
          <source>Up Tack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2af5f2ddb407105affdae636ad62e7561491231" translate="yes" xml:space="preserve">
          <source>Up arrow, &lt;code&gt;^P&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd5c41d9fca298bea6f24a411951061654bb52f" translate="yes" xml:space="preserve">
          <source>Up to this point, we have covered basic package management: adding, updating and removing packages. This will be familiar if you have used other package managers. Pkg offers significant advantages over traditional package managers by organizing dependencies into &lt;strong&gt;environments&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6afb9e3666c7b85570c64cd425adc541613cc3fa" translate="yes" xml:space="preserve">
          <source>Up-Pointing Red Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3080c18d33d8868f7d179d85939468a5fb6f7a8e" translate="yes" xml:space="preserve">
          <source>Up-Pointing Small Red Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4102a3258b67ca16fb16d7d1aa0634c97f3c95ee" translate="yes" xml:space="preserve">
          <source>Up-Pointing Triangle With Left Half Black / Up Pointing Triangle With Left Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89527044fb542f0ac6f83581fc6dae05de3d60f7" translate="yes" xml:space="preserve">
          <source>Up-Pointing Triangle With Right Half Black / Up Pointing Triangle With Right Half Black</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ee697ab88021f26adc65f99581a8c924f4497e" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;B&lt;/code&gt; as &lt;code&gt;alpha*A*B&lt;/code&gt; or one of the other three variants determined by &lt;a href=&quot;#stdlib-blas-side-1&quot;&gt;&lt;code&gt;side&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stdlib-blas-trans-1&quot;&gt;&lt;code&gt;tA&lt;/code&gt;&lt;/a&gt;. Only the &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/a&gt; triangle of &lt;code&gt;A&lt;/code&gt; is used. &lt;a href=&quot;#stdlib-blas-diag-1&quot;&gt;&lt;code&gt;dA&lt;/code&gt;&lt;/a&gt; determines if the diagonal values are read or are assumed to be all ones. Returns the updated &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b67566cd4761eec5e6b33396ebf57baa44b20cc" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;C&lt;/code&gt; as &lt;code&gt;alpha*A*B + beta*C&lt;/code&gt; or &lt;code&gt;alpha*B*A + beta*C&lt;/code&gt; according to &lt;a href=&quot;#stdlib-blas-side-1&quot;&gt;&lt;code&gt;side&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;A&lt;/code&gt; is assumed to be symmetric. Only the &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/a&gt; triangle of &lt;code&gt;A&lt;/code&gt; is used. Return the updated &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe8107828ea98a5c16360968f2081d3a2398119" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;C&lt;/code&gt; as &lt;code&gt;alpha*A*B + beta*C&lt;/code&gt; or the other three variants according to &lt;a href=&quot;#stdlib-blas-trans-1&quot;&gt;&lt;code&gt;tA&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;tB&lt;/code&gt;. Return the updated &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb59e0196492303eeb0559dad53ac35c01156f86" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;a&lt;/code&gt;, removing elements for which &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The function &lt;code&gt;f&lt;/code&gt; is passed one argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1cbafc3039b4e9dd05980d0f0de0cab1ccdf2c5" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;d&lt;/code&gt;, removing elements for which &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The function &lt;code&gt;f&lt;/code&gt; is passed &lt;code&gt;key=&amp;gt;value&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5116008cb9e43d59c146383efa65d2dddeeb61" translate="yes" xml:space="preserve">
          <source>Update a Cholesky factorization &lt;code&gt;C&lt;/code&gt; with the vector &lt;code&gt;v&lt;/code&gt;. If &lt;code&gt;A = C.U'C.U&lt;/code&gt; then &lt;code&gt;CC = cholesky(C.U'C.U + v*v')&lt;/code&gt; but the computation of &lt;code&gt;CC&lt;/code&gt; only uses &lt;code&gt;O(n^2)&lt;/code&gt; operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a73561eee9848abaddeda344c0f208c6557348" translate="yes" xml:space="preserve">
          <source>Update a Cholesky factorization &lt;code&gt;C&lt;/code&gt; with the vector &lt;code&gt;v&lt;/code&gt;. If &lt;code&gt;A = C.U'C.U&lt;/code&gt; then &lt;code&gt;CC = cholesky(C.U'C.U + v*v')&lt;/code&gt; but the computation of &lt;code&gt;CC&lt;/code&gt; only uses &lt;code&gt;O(n^2)&lt;/code&gt; operations. The input factorization &lt;code&gt;C&lt;/code&gt; is updated in place such that on exit &lt;code&gt;C == CC&lt;/code&gt;. The vector &lt;code&gt;v&lt;/code&gt; is destroyed during the computation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be148b7669f3ccaad165944180acc3352d0c0852" translate="yes" xml:space="preserve">
          <source>Update all the files with paths specified by &lt;code&gt;files&lt;/code&gt; in the index &lt;code&gt;idx&lt;/code&gt; (or the index of the &lt;code&gt;repo&lt;/code&gt;). Match the state of each file in the index with the current state on disk, removing it if it has been removed on disk, or updating its entry in the object database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f147e3ee0adf9762dcf0eafaf5f12656bb396923" translate="yes" xml:space="preserve">
          <source>Update collection with pairs from the other collections. See also &lt;a href=&quot;#Base.merge&quot;&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27576b823a22e9f7fc91075555f4a0a499028fb" translate="yes" xml:space="preserve">
          <source>Update collection with pairs from the other collections. Values with the same key will be combined using the combiner function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dbc54f262461607163d076fa526342797cf142" translate="yes" xml:space="preserve">
          <source>Update the last-modified timestamp on a file to the current time. Return &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb69c76e0564a5bc16b62a95f06051a5dc1aec2" translate="yes" xml:space="preserve">
          <source>Update the vector &lt;code&gt;y&lt;/code&gt; as &lt;code&gt;alpha*A*x + beta*y&lt;/code&gt; or &lt;code&gt;alpha*A'x + beta*y&lt;/code&gt; according to &lt;a href=&quot;#stdlib-blas-trans-1&quot;&gt;&lt;code&gt;tA&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;beta&lt;/code&gt; are scalars. Return the updated &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fcaa81ce8090ed68e6b71b447ac64aa03b4adf" translate="yes" xml:space="preserve">
          <source>Update the vector &lt;code&gt;y&lt;/code&gt; as &lt;code&gt;alpha*A*x + beta*y&lt;/code&gt;. &lt;code&gt;A&lt;/code&gt; is assumed to be symmetric. Only the &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/a&gt; triangle of &lt;code&gt;A&lt;/code&gt; is used. &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;beta&lt;/code&gt; are scalars. Return the updated &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1af59950d401cfc20779d3aa3fa9a6e0f500c6" translate="yes" xml:space="preserve">
          <source>Update vector &lt;code&gt;y&lt;/code&gt; as &lt;code&gt;alpha*A*x + beta*y&lt;/code&gt; or &lt;code&gt;alpha*A'*x + beta*y&lt;/code&gt; according to &lt;a href=&quot;#stdlib-blas-trans-1&quot;&gt;&lt;code&gt;trans&lt;/code&gt;&lt;/a&gt;. The matrix &lt;code&gt;A&lt;/code&gt; is a general band matrix of dimension &lt;code&gt;m&lt;/code&gt; by &lt;code&gt;size(A,2)&lt;/code&gt; with &lt;code&gt;kl&lt;/code&gt; sub-diagonals and &lt;code&gt;ku&lt;/code&gt; super-diagonals. &lt;code&gt;alpha&lt;/code&gt; and &lt;code&gt;beta&lt;/code&gt; are scalars. Return the updated &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6924e22db0db8d1ff689de49ae0f8708706cce5f" translate="yes" xml:space="preserve">
          <source>Update vector &lt;code&gt;y&lt;/code&gt; as &lt;code&gt;alpha*A*x + beta*y&lt;/code&gt; where &lt;code&gt;A&lt;/code&gt; is a a symmetric band matrix of order &lt;code&gt;size(A,2)&lt;/code&gt; with &lt;code&gt;k&lt;/code&gt; super-diagonals stored in the argument &lt;code&gt;A&lt;/code&gt;. The storage layout for &lt;code&gt;A&lt;/code&gt; is described the reference BLAS module, level-2 BLAS at &lt;a href=&quot;http://www.netlib.org/lapack/explore-html/&quot;&gt;http://www.netlib.org/lapack/explore-html/&lt;/a&gt;. Only the &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;uplo&lt;/code&gt;&lt;/a&gt; triangle of &lt;code&gt;A&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b745e6b133ee9c655e31450f92201f684b44e7da" translate="yes" xml:space="preserve">
          <source>Updates some entries, determined by the &lt;code&gt;pathspecs&lt;/code&gt;, in the index from the target commit tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b28b82ff165fad88ebc95a112524e735cc8860" translate="yes" xml:space="preserve">
          <source>Updating fields of GC-managed objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99926a9be5e161079ffd239dea562596fa0f51ec" translate="yes" xml:space="preserve">
          <source>Updating operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5dc119d48564d0e28239795d6653c22801c098" translate="yes" xml:space="preserve">
          <source>Upon entering the Pkg REPL, you should see a similar prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45786539cdd72491d25b181f9266895ea1e214a0" translate="yes" xml:space="preserve">
          <source>Upon return, the contents of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; can be retrieved (if they were changed by &lt;code&gt;foo&lt;/code&gt;) by &lt;code&gt;width[]&lt;/code&gt; and &lt;code&gt;range[]&lt;/code&gt;; that is, they act like zero-dimensional arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caca304d42427b8d482b5764877f26662fa05241" translate="yes" xml:space="preserve">
          <source>Upper &lt;a href=&quot;https://en.wikipedia.org/wiki/Triangular_matrix&quot;&gt;triangular matrix&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec2e6a6206f5f88534d20c4523356bc387cdc68" translate="yes" xml:space="preserve">
          <source>Upper &lt;a href=&quot;https://en.wikipedia.org/wiki/Triangular_matrix&quot;&gt;triangular matrix&lt;/a&gt; with unit diagonal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20059018cf97b078950e026917919b214256bc7a" translate="yes" xml:space="preserve">
          <source>Upper Half Block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2552ab0360eb11259c8e3cce46fd2f82d93d283f" translate="yes" xml:space="preserve">
          <source>Upper Half Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e200643b462e9cf8004c0d92af39dbf7c3c7db" translate="yes" xml:space="preserve">
          <source>Upper Half Inverse White Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b6f1095d9f0c4b5eae5bfe034e407a7ba13c13" translate="yes" xml:space="preserve">
          <source>Upper Left Or Lower Right Curly Bracket Section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3969e25dcf1b4765b25415cad62ddb3a51c349dc" translate="yes" xml:space="preserve">
          <source>Upper Left Quadrant Circular Arc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83eaf015d14641cd1f1745f043923c101f269ba8" translate="yes" xml:space="preserve">
          <source>Upper Left Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddc067190e178913ff130a5d8a9805e438d730f" translate="yes" xml:space="preserve">
          <source>Upper Right Or Lower Left Curly Bracket Section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16202a5095fd1696c4e097cd142d1b59be16c31f" translate="yes" xml:space="preserve">
          <source>Upper Right Quadrant Circular Arc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e858945c7a6ae7dea8310f32857d2ae42f4b42" translate="yes" xml:space="preserve">
          <source>Upper Right Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec416adbbcbd58d52d24c89bb7512fb6b7c22c5" translate="yes" xml:space="preserve">
          <source>Upper triangle of a matrix, overwriting &lt;code&gt;M&lt;/code&gt; in the process. See also &lt;a href=&quot;#LinearAlgebra.triu&quot;&gt;&lt;code&gt;triu&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f173b7e64a71890e97f3067295f809979fd4f04" translate="yes" xml:space="preserve">
          <source>Upper triangle of a matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78325434a702f531fb0233782fda0522e242ae8d" translate="yes" xml:space="preserve">
          <source>Upper/lower &lt;a href=&quot;https://en.wikipedia.org/wiki/Bidiagonal_matrix&quot;&gt;bidiagonal matrix&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db360d106548eb8724347b97b607191d18fd22fd" translate="yes" xml:space="preserve">
          <source>Upwards Arrow / Up Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf9af155d48a52341659285bdf30a8a8bc124c9" translate="yes" xml:space="preserve">
          <source>Upwards Arrow From Bar / Up Arrow From Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd39c5903785bedf3e6bc11b647742dbcb03575" translate="yes" xml:space="preserve">
          <source>Upwards Arrow Leftwards Of Downwards Arrow / Up Arrow Left Of Down Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edd17f322ee49c404da89078a2382b861dd9abd" translate="yes" xml:space="preserve">
          <source>Upwards Arrow To Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb1d1806cf35b63361292ade08b7f76d3487488" translate="yes" xml:space="preserve">
          <source>Upwards Arrow With Double Stroke / Up Arrow With Double Stroke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617bb48673e92144ce5df1fdd21c1197b03b6941" translate="yes" xml:space="preserve">
          <source>Upwards Arrow With Horizontal Stroke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49085917f823dbbd290d6ec9d6b59225d2d2586e" translate="yes" xml:space="preserve">
          <source>Upwards Arrow With Tip Leftwards / Up Arrow With Tip Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58c9ca0ea635ffd477fe10b92467d6fad672628" translate="yes" xml:space="preserve">
          <source>Upwards Arrow With Tip Rightwards / Up Arrow With Tip Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ce29b6d2447bb92f91c879660176d8fb4cc122" translate="yes" xml:space="preserve">
          <source>Upwards Black Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604da5657d00b761bb19cac93801378a3bd0f78a" translate="yes" xml:space="preserve">
          <source>Upwards Dashed Arrow / Up Dashed Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebec4412f970972bae4c03bf49efe1d61a1518db" translate="yes" xml:space="preserve">
          <source>Upwards Double Arrow / Up Double Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451da9751f65845a47efc254a97d6c9d93c01a6f" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left Beside Downwards Harpoon With Barb Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885a72e32db57383a338d645a6ec5f4b3a84c37e" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left Beside Upwards Harpoon With Barb Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbcdbf7a91d6691a730607574ade3b070517f85" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left From Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48f274014a84ac28be3ae008f6fee5b2dabf7a8" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left To Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab7cd30084b7065a4f1908b303068ca0164b119" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Leftwards / Up Harpoon With Barb Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1823143ac88fac95c7a172abf39eacf583342225" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Right From Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0eedea90d05abe73536dcddde59648851f49f2" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Right To Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054a68e049c32af85ec106146f1c9d49703a5a32" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Rightwards / Up Harpoon With Barb Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52570d5f31c410f5871d41a198881ad11859b2f8" translate="yes" xml:space="preserve">
          <source>Upwards Paired Arrows / Up Paired Arrows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bb6ca806f317b31034fe74bd58c64cfd1d2de9" translate="yes" xml:space="preserve">
          <source>Upwards Quadruple Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0293c09ade0452364d29d560cce13e5bd4d334f" translate="yes" xml:space="preserve">
          <source>Upwards Triple Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1494f8ee6c5ee3a3b8efc6ee623b9ab34472ba" translate="yes" xml:space="preserve">
          <source>Upwards Two Headed Arrow / Up Two Headed Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813eb4d285528b78ca67b70c64ef6320ea54f9f0" translate="yes" xml:space="preserve">
          <source>Upwards Two-Headed Arrow From Small Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2469885ff05b9cc90e880e142fd5896188598ee" translate="yes" xml:space="preserve">
          <source>Upwards White Arrow / White Up Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906d90e89656334b7437d43c9b30e29f00d00f8d" translate="yes" xml:space="preserve">
          <source>Upwards White Arrow From Bar / White Up Arrow From Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4458dd128aa6efaff132fdd10fa70177926007b" translate="yes" xml:space="preserve">
          <source>Uranus</source>
          <target state="translated">Uranus</target>
        </trans-unit>
        <trans-unit id="cdb412e2ca5e6ba493c591c8c2043869bf396180" translate="yes" xml:space="preserve">
          <source>Usage is very straightforward:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf928890fa0bf2818758d8852ab302ab63640ba" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.append!&quot;&gt;&lt;code&gt;append!&lt;/code&gt;&lt;/a&gt; to add all the elements of another collection to &lt;code&gt;collection&lt;/code&gt;. The result of the preceding example is equivalent to &lt;code&gt;append!([1, 2, 3], [4, 5, 6])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dba88b41b71a6676d0481b8696709dd68423768" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.include&quot;&gt;&lt;code&gt;Base.include&lt;/code&gt;&lt;/a&gt; to evaluate a file into another module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8760c00a8697e5b8aeb582fe1473eb0e29463e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.lastindex&quot;&gt;&lt;code&gt;lastindex&lt;/code&gt;&lt;/a&gt; to get the last valid index of an indexable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b112cddecaeaffc3c8cf54e44abf77315a9f8acf" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.push!&quot;&gt;&lt;code&gt;push!&lt;/code&gt;&lt;/a&gt; to add individual items to &lt;code&gt;collection&lt;/code&gt; which are not already themselves in another collection. The result of the preceding example is equivalent to &lt;code&gt;push!([1, 2, 3], 4, 5, 6)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c9ba2a7f72e5d0f8b6c5f71aa620d5e3c742f3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.something&quot;&gt;&lt;code&gt;something&lt;/code&gt;&lt;/a&gt; to access the value wrapped by a &lt;code&gt;Some&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253fb0c8daa4e7ce4c9d69eb091a0cb44d5f50cf" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#LinearAlgebra.opnorm&quot;&gt;&lt;code&gt;opnorm&lt;/code&gt;&lt;/a&gt; to compute the operator norm of a matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b236b0bc0e26f22cae584435e191add5139d35df" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/base/index#Base.@inbounds&quot;&gt;&lt;code&gt;@inbounds&lt;/code&gt;&lt;/a&gt; to eliminate array bounds checking within expressions. Be certain before doing this. If the subscripts are ever out of bounds, you may suffer crashes or silent corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d306f68003307110fc26b73cfcc7afc0fc9abd9c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.FastMath.@fastmath&quot;&gt;&lt;code&gt;@fastmath&lt;/code&gt;&lt;/a&gt; to allow floating point optimizations that are correct for real numbers, but lead to differences for IEEE numbers. Be careful when doing this, as this may change numerical results. This corresponds to the &lt;code&gt;-ffast-math&lt;/code&gt; option of clang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cac4bd068dbdaa848d7cc91268aece2ec2791ed" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.abs2&quot;&gt;&lt;code&gt;abs2(z)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;abs(z)^2&lt;/code&gt; for complex &lt;code&gt;z&lt;/code&gt;. In general, try to rewrite code to use &lt;a href=&quot;../../base/math/index#Base.abs2&quot;&gt;&lt;code&gt;abs2&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../base/math/index#Base.abs&quot;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt; for complex arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed20df03617ffa631ba3c736bd4f57a7ec7da56b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.div&quot;&gt;&lt;code&gt;div(x,y)&lt;/code&gt;&lt;/a&gt; for truncating division of integers instead of &lt;code&gt;trunc(x/y)&lt;/code&gt;, &lt;a href=&quot;../../base/math/index#Base.fld&quot;&gt;&lt;code&gt;fld(x,y)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;floor(x/y)&lt;/code&gt;, and &lt;a href=&quot;../../base/math/index#Base.cld&quot;&gt;&lt;code&gt;cld(x,y)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;ceil(x/y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd9f39fcb30d6c8593e579f82799578e0b0fa66" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../file/index#Base.Filesystem.dirname&quot;&gt;&lt;code&gt;dirname&lt;/code&gt;&lt;/a&gt; to get the directory part and &lt;a href=&quot;../file/index#Base.Filesystem.basename&quot;&gt;&lt;code&gt;basename&lt;/code&gt;&lt;/a&gt; to get the file name part of the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e799feae8fa513489e0daa4c3f185d8cf11c0d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Debug&lt;/code&gt; for verbose information that could be useful when debugging an application or module. These events are disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0928e79ba9fd55c12a3eefaa790b4b08148347" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Error&lt;/code&gt; to report errors where the code has enough context to recover and continue. (When the code doesn't have enough context, an exception or early return is more appropriate.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86b08aafca134e6fd8d7a93c33dea4d8b4e5e85" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Info&lt;/code&gt; to inform the user about the normal operation of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4187945e9e4e8ad7fe21490eeae3ab5745e787" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Warn&lt;/code&gt; when a potential problem is detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f7e6f35c48f80e5317615158f0db45821da3da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;collect&lt;/code&gt; to extract non-&lt;code&gt;missing&lt;/code&gt; values and store them in an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15be8234ef12b9a7a7d5794b1d59b19e6393dc6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;collect&lt;/code&gt; to obtain an &lt;code&gt;Array&lt;/code&gt; containing the non-&lt;code&gt;missing&lt;/code&gt; values in &lt;code&gt;itr&lt;/code&gt;. Note that even if &lt;code&gt;itr&lt;/code&gt; is a multidimensional array, the result will always be a &lt;code&gt;Vector&lt;/code&gt; since it is not possible to remove missings while preserving dimensions of the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3faffd725f2f09e5f4e7fbbe19f38edbe638510" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;import&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6047af5c0d2bfb4e695d572e7b2e68d170fdb8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rm&lt;/code&gt; to remove this package by name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a8f5cf6c63986cbddfbeb683baa495ffb2458a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;update&lt;/code&gt; to update an installed package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa02645b797b97f27299fe67bce9b0039a88864" translate="yes" xml:space="preserve">
          <source>Use a heuristic to guess if a file is binary: searching for NULL bytes and looking for a reasonable ratio of printable to non-printable characters among the first 8000 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88358f29dfd758f460e28a67196b545279d41f43" translate="yes" xml:space="preserve">
          <source>Use an explicit conversion: &lt;code&gt;x = oneunit(Float64)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6770a727a84b74b281a528ef665b748645523911" translate="yes" xml:space="preserve">
          <source>Use backticks to identify code and equations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ddc8cd15e7e7d64472323fbb2ce74dc97af2ec" translate="yes" xml:space="preserve">
          <source>Use in Makefiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e8cc7da923f6fd03e4d859e3d2010bdbf5a589" translate="yes" xml:space="preserve">
          <source>Use multiple arguments like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac721de84c14d925fb2b4f9baf4d8bd1f070ead3" translate="yes" xml:space="preserve">
          <source>Use naming conventions consistent with Julia &lt;code&gt;base/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2edbe387f9c0f39642268d3da72bf656df7ef46b" translate="yes" xml:space="preserve">
          <source>Use native code from system image if available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2d79932b3fbbb05016d0144fe877e6d22b3ea3" translate="yes" xml:space="preserve">
          <source>Used in a stream redirect to discard all data written to it. Essentially equivalent to &lt;code&gt;/dev/null&lt;/code&gt; on Unix or &lt;code&gt;NUL&lt;/code&gt; on Windows. Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cde8b01939e704886f95991687885c1bfbd5672" translate="yes" xml:space="preserve">
          <source>User-defined plain-data types without &lt;code&gt;write&lt;/code&gt; methods can be written when wrapped in a &lt;code&gt;Ref&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bc0b4fef463a1a11ba0c7feb894e0c57617f8b" translate="yes" xml:space="preserve">
          <source>User-defined types are as fast and compact as built-ins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c729f1cba74cb6c5ffde754c64511e3fe9d9c3f" translate="yes" xml:space="preserve">
          <source>Username/password plain text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c17149033d4c3d14412d998ae2de25ee7497296" translate="yes" xml:space="preserve">
          <source>Users should refer to &lt;code&gt;LineEdit.jl&lt;/code&gt; to discover the available actions on key input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ffbb24bf63c0d26fa820ccaad97db5b5d7c4c0" translate="yes" xml:space="preserve">
          <source>Uses multiple concurrent tasks to map &lt;code&gt;f&lt;/code&gt; over a collection (or multiple equal length collections). For multiple collection arguments, &lt;code&gt;f&lt;/code&gt; is applied elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaf90400780ceb1859683501af570570487d3f2" translate="yes" xml:space="preserve">
          <source>Uses of non-constant globals can be optimized by annotating their types at the point of use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688afb99bff61a9584ff045ba5eb7014ef89e708" translate="yes" xml:space="preserve">
          <source>Using &quot;outside&quot; variables in parallel loops is perfectly reasonable if the variables are read-only:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e688a58936b31583f452f63485c5d5aac4efae6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@inbounds&lt;/code&gt; may return incorrect results/crashes/corruption for out-of-bounds indices. The user is responsible for checking it manually. Only use &lt;code&gt;@inbounds&lt;/code&gt; when it is certain from the information locally available that all accesses are in bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e537d4f221185177f4eaa3de9c5f176d574cec48" translate="yes" xml:space="preserve">
          <source>Using Loggers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4594347fb664dcf4c2e1f34027a9288d5babb1f4" translate="yes" xml:space="preserve">
          <source>Using an index less than 1 or greater than &lt;code&gt;end&lt;/code&gt; raises an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6956b3efd735f97450c62b06daef893328f716ca" translate="yes" xml:space="preserve">
          <source>Using distinct algorithms for scalar or array generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c7e17c286ccbac76a5a27970a8f4dc4a2438ec" translate="yes" xml:space="preserve">
          <source>Using julia-config to automatically determine build parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf9f6136824ad4f2ee2bbca487125e42112f823" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt;&lt;code&gt;GitRevWalker&lt;/code&gt;&lt;/a&gt;&lt;code&gt;walker&lt;/code&gt; to &quot;walk&quot; over every commit in the repository's history, apply &lt;code&gt;f&lt;/code&gt; to each commit in the walk. The keyword arguments are: * &lt;code&gt;oid&lt;/code&gt;: The &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the commit to begin the walk from. The default is to use &lt;a href=&quot;#LibGit2.push_head!&quot;&gt;&lt;code&gt;push_head!&lt;/code&gt;&lt;/a&gt; and therefore the HEAD commit and all its ancestors. * &lt;code&gt;range&lt;/code&gt;: A range of &lt;code&gt;GitHash&lt;/code&gt;s in the format &lt;code&gt;oid1..oid2&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; will be applied to all commits between the two. * &lt;code&gt;by&lt;/code&gt;: The sorting method. The default is not to sort. Other options are to sort by topology (&lt;code&gt;LibGit2.Consts.SORT_TOPOLOGICAL&lt;/code&gt;), to sort forwards in time (&lt;code&gt;LibGit2.Consts.SORT_TIME&lt;/code&gt;, most ancient first) or to sort backwards in time (&lt;code&gt;LibGit2.Consts.SORT_REVERSE&lt;/code&gt;, most recent first). * &lt;code&gt;rev&lt;/code&gt;: Whether to reverse the sorted order (for instance, if topological sorting is used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec4842754e5953917652390962c1ff76956e408" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt;&lt;code&gt;GitRevWalker&lt;/code&gt;&lt;/a&gt;&lt;code&gt;walker&lt;/code&gt; to &quot;walk&quot; over every commit in the repository's history, find the number of commits which return &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;f&lt;/code&gt; is applied to them. The keyword arguments are: * &lt;code&gt;oid&lt;/code&gt;: The &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the commit to begin the walk from. The default is to use &lt;a href=&quot;#LibGit2.push_head!&quot;&gt;&lt;code&gt;push_head!&lt;/code&gt;&lt;/a&gt; and therefore the HEAD commit and all its ancestors. * &lt;code&gt;by&lt;/code&gt;: The sorting method. The default is not to sort. Other options are to sort by topology (&lt;code&gt;LibGit2.Consts.SORT_TOPOLOGICAL&lt;/code&gt;), to sort forwards in time (&lt;code&gt;LibGit2.Consts.SORT_TIME&lt;/code&gt;, most ancient first) or to sort backwards in time (&lt;code&gt;LibGit2.Consts.SORT_REVERSE&lt;/code&gt;, most recent first). * &lt;code&gt;rev&lt;/code&gt;: Whether to reverse the sorted order (for instance, if topological sorting is used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c413028736212fe9357e9b5b1dc5c398cc081dcd" translate="yes" xml:space="preserve">
          <source>Using the project Properties dialog, go to &lt;code&gt;C/C++&lt;/code&gt; | &lt;code&gt;General&lt;/code&gt; and add &lt;code&gt;$(JULIA_DIR)\include\julia\&lt;/code&gt; to the Additional Include Directories property. Then, go to the &lt;code&gt;Linker&lt;/code&gt; | &lt;code&gt;General&lt;/code&gt; section and add &lt;code&gt;$(JULIA_DIR)\lib&lt;/code&gt; to the Additional Library Directories property. Finally, under &lt;code&gt;Linker&lt;/code&gt; | &lt;code&gt;Input&lt;/code&gt;, add &lt;code&gt;libjulia.dll.a;libopenlibm.dll.a;&lt;/code&gt; to the list of libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8486afb99169a641f479a3a3c9bb4fcde8005d8e" translate="yes" xml:space="preserve">
          <source>Usually &lt;code&gt;begin&lt;/code&gt; will not be necessary, since keywords such as &lt;a href=&quot;#function&quot;&gt;&lt;code&gt;function&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; implicitly begin blocks of code. See also &lt;a href=&quot;#;&quot;&gt;&lt;code&gt;;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32aeab02a74532020ea8342a8515157c825ef703" translate="yes" xml:space="preserve">
          <source>Usually a function has 4 methods defined, one each for &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;ComplexF64&lt;/code&gt; and &lt;code&gt;ComplexF32&lt;/code&gt; arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67e26c63c1724df60d067a3aaa25a98d5abbf4a" translate="yes" xml:space="preserve">
          <source>Utilities for capturing, filtering and presenting streams of log events. Normally you don't need to import &lt;code&gt;Logging&lt;/code&gt; to create log events; for this the standard logging macros such as &lt;code&gt;@info&lt;/code&gt; are already exported by &lt;code&gt;Base&lt;/code&gt; and available by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a681da6b0fa29ce81a94277f5bd3f0a9276fbf0" translate="yes" xml:space="preserve">
          <source>Utility Collections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8041011401dc800a6ef88f382bc39cf1b615aba" translate="yes" xml:space="preserve">
          <source>V (vector)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ba99a2e2b417b08555df0928741485f7c523bd" translate="yes" xml:space="preserve">
          <source>V (vectors)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="66771bf9a86898929e11d8280264a532271f941a" translate="yes" xml:space="preserve">
          <source>Val</source>
          <target state="translated">Val</target>
        </trans-unit>
        <trans-unit id="08dd90402b12e9c88291ba119e611cc5ba9ab615" translate="yes" xml:space="preserve">
          <source>Valid rounding modes for &lt;code&gt;round(::Period, ::T, ::RoundingMode)&lt;/code&gt; are &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; (default), &lt;code&gt;RoundDown&lt;/code&gt; (&lt;code&gt;floor&lt;/code&gt;), and &lt;code&gt;RoundUp&lt;/code&gt; (&lt;code&gt;ceil&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e229542993641075d277cab335befb1ae3dc141e" translate="yes" xml:space="preserve">
          <source>Valid rounding modes for &lt;code&gt;round(::TimeType, ::Period, ::RoundingMode)&lt;/code&gt; are &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; (default), &lt;code&gt;RoundDown&lt;/code&gt; (&lt;code&gt;floor&lt;/code&gt;), and &lt;code&gt;RoundUp&lt;/code&gt; (&lt;code&gt;ceil&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="1177a18f70b2bb097f1359141743708a01d953b5" translate="yes" xml:space="preserve">
          <source>Value (Int)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a746d4614f2c8d263b81621b92d48c15618301c7" translate="yes" xml:space="preserve">
          <source>Value returned by &lt;code&gt;IteratorEltype(IterType)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696aa1f3090aa306169dbbcd87d65ab566c6fb8e" translate="yes" xml:space="preserve">
          <source>Value returned by &lt;code&gt;IteratorSize(IterType)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbeffeaf7d26e3574474d9149c27ff30a4b3dcd" translate="yes" xml:space="preserve">
          <source>Values can also be specified inside a &lt;code&gt;begin&lt;/code&gt; block, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b8d8e0cc20bd561990f4bb053e439ba7b1a7a6" translate="yes" xml:space="preserve">
          <source>Values can be converted to &lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt; easily:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf483076f265858393b29ed989b1873d2e7a8e3" translate="yes" xml:space="preserve">
          <source>Values that are normally unordered, such as &lt;code&gt;NaN&lt;/code&gt;, are ordered in an arbitrary but consistent fashion. &lt;a href=&quot;#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; values are ordered last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03572b0c8598fe7cd07df82b0e9920bb7de722a3" translate="yes" xml:space="preserve">
          <source>Vararg Tuple Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382fbc37c5cfb465437b195cd4bad0fff65a9b68" translate="yes" xml:space="preserve">
          <source>Varargs Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="df9191935912f85d859043667e9941151178e6c8" translate="yes" xml:space="preserve">
          <source>Variable names must begin with a letter (A-Z or a-z), underscore, or a subset of Unicode code points greater than 00A0; in particular, &lt;a href=&quot;http://www.fileformat.info/info/unicode/category/index.htm&quot;&gt;Unicode character categories&lt;/a&gt; Lu/Ll/Lt/Lm/Lo/Nl (letters), Sc/So (currency and other symbols), and a few other letter-like characters (e.g. a subset of the Sm math symbols) are allowed. Subsequent characters may also include ! and digits (0-9 and other characters in categories Nd/No), as well as other Unicode code points: diacritics and other modifying marks (categories Mn/Mc/Me/Sk), some punctuation connectors (category Pc), primes, and a few other characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="973c98f8ec2704255a1037ca6cefd4104098ec96" translate="yes" xml:space="preserve">
          <source>Variables can also have lower bounds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6312673cd4e08ae646a5dc5b0fa180b46d3ef898" translate="yes" xml:space="preserve">
          <source>Variant of &lt;a href=&quot;#Base.Sort.partialsort!&quot;&gt;&lt;code&gt;partialsort!&lt;/code&gt;&lt;/a&gt; which copies &lt;code&gt;v&lt;/code&gt; before partially sorting it, thereby returning the same thing as &lt;code&gt;partialsort!&lt;/code&gt; but leaving &lt;code&gt;v&lt;/code&gt; unmodified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0d65af26fddc33c72a84dbe68995163f1d5904" translate="yes" xml:space="preserve">
          <source>Variant of &lt;a href=&quot;#Base.sort!&quot;&gt;&lt;code&gt;sort!&lt;/code&gt;&lt;/a&gt; that returns a sorted copy of &lt;code&gt;v&lt;/code&gt; leaving &lt;code&gt;v&lt;/code&gt; itself unmodified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6ba2473e2753b36bcc2d690f41319c47e7d4f9" translate="yes" xml:space="preserve">
          <source>Various types of iterable containers will be introduced and discussed in later sections of the manual (see, e.g., &lt;a href=&quot;../arrays/index#man-multi-dim-arrays-1&quot;&gt;Multi-dimensional Arrays&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f625899326d51a58569ee688860f4767ebf2e302" translate="yes" xml:space="preserve">
          <source>VecOrMat</source>
          <target state="translated">VecOrMat</target>
        </trans-unit>
        <trans-unit id="a57e06f45491067f031284fb03d3a20a0abf04fd" translate="yes" xml:space="preserve">
          <source>Vector</source>
          <target state="translated">Vector</target>
        </trans-unit>
        <trans-unit id="e681c39f4e2c29eed8261e191272b7fca77a9c4b" translate="yes" xml:space="preserve">
          <source>Vector Or Cross Product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce239837ecd44e25f6f247a56fa730d6a4823074" translate="yes" xml:space="preserve">
          <source>Vector type for storing sparse vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbbd2eeb202ade49225a4f2e7942a3447ab3322" translate="yes" xml:space="preserve">
          <source>Vector()</source>
          <target state="translated">Vector()</target>
        </trans-unit>
        <trans-unit id="13b136054b35a3cebfee1d05d794ba71cbd26cf1" translate="yes" xml:space="preserve">
          <source>Vectorized &quot;dot&quot; operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9291e5dce9436485c2013f50e2ce1162733428" translate="yes" xml:space="preserve">
          <source>Vectors and multidimensional arrays of integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7af30a2daf7acc8dfa153d97b4943cb1e0d136" translate="yes" xml:space="preserve">
          <source>Verifies that a credential is ready for use in authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0c6486c895f3039458f341e76e91cb7780448a" translate="yes" xml:space="preserve">
          <source>Version Number Literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840940d2b34c4d5b1ded250105162a1f63ce0844" translate="yes" xml:space="preserve">
          <source>Version number type which follow the specifications of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;, composed of major, minor and patch numeric values, followed by pre-release and build alpha-numeric annotations. See also &lt;a href=&quot;#Base.@v_str&quot;&gt;&lt;code&gt;@v_str&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a725950201de2fb1ac976f520070a65a2e88a90c" translate="yes" xml:space="preserve">
          <source>Version numbers can easily be expressed with non-standard string literals of the form &lt;a href=&quot;../../base/base/index#Base.@v_str&quot;&gt;&lt;code&gt;v&quot;...&quot;&lt;/code&gt;&lt;/a&gt;. Version number literals create &lt;a href=&quot;../../base/base/index#Base.VersionNumber&quot;&gt;&lt;code&gt;VersionNumber&lt;/code&gt;&lt;/a&gt; objects which follow the specifications of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;, and therefore are composed of major, minor and patch numeric values, followed by pre-release and build alpha-numeric annotations. For example, &lt;code&gt;v&quot;0.2.1-rc1+win64&quot;&lt;/code&gt; is broken into major version &lt;code&gt;0&lt;/code&gt;, minor version &lt;code&gt;2&lt;/code&gt;, patch version &lt;code&gt;1&lt;/code&gt;, pre-release &lt;code&gt;rc1&lt;/code&gt; and build &lt;code&gt;win64&lt;/code&gt;. When entering a version literal, everything except the major version number is optional, therefore e.g. &lt;code&gt;v&quot;0.2&quot;&lt;/code&gt; is equivalent to &lt;code&gt;v&quot;0.2.0&quot;&lt;/code&gt; (with empty pre-release/build annotations), &lt;code&gt;v&quot;2&quot;&lt;/code&gt; is equivalent to &lt;code&gt;v&quot;2.0.0&quot;&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ca9be91c967075fcdd2bbc6d1263539be41f2a" translate="yes" xml:space="preserve">
          <source>VersionNumber</source>
          <target state="translated">VersionNumber</target>
        </trans-unit>
        <trans-unit id="2750d3223582565870adf32b96da562927d7229f" translate="yes" xml:space="preserve">
          <source>Versioning</source>
          <target state="translated">Versioning</target>
        </trans-unit>
        <trans-unit id="6c837db00b975f19f0ba6c749c7f02fb45a75996" translate="yes" xml:space="preserve">
          <source>Vertical Bar Beside Right Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a468f19138c967f465d18bb3d4e19b98f3336def" translate="yes" xml:space="preserve">
          <source>Vertical Bar Beside Right Triangle + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c79970994459f8933a235bb69e83cc040e00e6" translate="yes" xml:space="preserve">
          <source>Vertical Bar Double Left Turnstile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4b1492c64df3b0ebe959084058d3c7e44acaf3" translate="yes" xml:space="preserve">
          <source>Vertical Ellipsis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85654619bc65a9e5e4aa04358cadb455bde3f5f4" translate="yes" xml:space="preserve">
          <source>Vertical Traffic Light</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd57d0e0d51781315415bae3e4dcd95ee338231" translate="yes" xml:space="preserve">
          <source>Very Much Greater-Than / Very Much Greater Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb7da13aed9121a1d37058fdbf6964b34d24029" translate="yes" xml:space="preserve">
          <source>Very Much Less-Than / Very Much Less Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b22dde6a21b3a00457b198409a5900843726950" translate="yes" xml:space="preserve">
          <source>Very few operations are defined on Colons directly; instead they are converted by &lt;a href=&quot;#Base.to_indices&quot;&gt;&lt;code&gt;to_indices&lt;/code&gt;&lt;/a&gt; to an internal vector type (&lt;code&gt;Base.Slice&lt;/code&gt;) to represent the collection of indices they span before being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dfb3491d119e5519addb4c3e23e281cad05fa2" translate="yes" xml:space="preserve">
          <source>Vibration Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00416ac0206eeb19bcbdaefda8ab643c20b70d6c" translate="yes" xml:space="preserve">
          <source>Victory Hand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc4b58b439f3228d73765f0de7bf812cc9b4238" translate="yes" xml:space="preserve">
          <source>Video Camera</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f01866ab45271f0dfa12184523966d4a3b5815e" translate="yes" xml:space="preserve">
          <source>Video Game</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c80f0cab4afba2fa27c199aefcd29cf64ce8dbf" translate="yes" xml:space="preserve">
          <source>Videocassette</source>
          <target state="translated">Videocassette</target>
        </trans-unit>
        <trans-unit id="9568ab6197c20797ef7250c030ffac3b0cf028d7" translate="yes" xml:space="preserve">
          <source>Viewdata Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1e68321de928793ee07ea5fe03956e64af46bb" translate="yes" xml:space="preserve">
          <source>Viewing a stack trace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0bd50fdb165ff5eea765ea67ef0112f77cca8d" translate="yes" xml:space="preserve">
          <source>Views (SubArrays and other view types)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64d3409dcdd8152fa3df75455bfc567c1050921" translate="yes" xml:space="preserve">
          <source>Violin</source>
          <target state="translated">Violin</target>
        </trans-unit>
        <trans-unit id="0f6f6df133ed6ac243cb306e16b3c97677996488" translate="yes" xml:space="preserve">
          <source>Virgo</source>
          <target state="translated">Virgo</target>
        </trans-unit>
        <trans-unit id="8ea2c5b5f236297f327f1c4b74f3faa6e41a0626" translate="yes" xml:space="preserve">
          <source>Volcano</source>
          <target state="translated">Volcano</target>
        </trans-unit>
        <trans-unit id="3435bdb02b0cd637470f09185300f98914ecbabf" translate="yes" xml:space="preserve">
          <source>Volume Integral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a22d4b48472fa25ad58e33b26aad65175777536" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Five Eighths / Fraction Five Eighths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffaa1b3f0a7068587451e32ec2d77c7b9fca7af" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Five Sixths / Fraction Five Sixths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f79cd34a21bf7565ffa9564108d106398b89f9" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Four Fifths / Fraction Four Fifths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de91e6ed7b9551ac836b4b7620665dd412d396bc" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Eighth / Fraction One Eighth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a5459d60b79f176337ca7f2581a21e48217ad1" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Fifth / Fraction One Fifth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03faa6cb45424752e687589d775c2e7ca16d904" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Half / Fraction One Half</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a49020d16507f59e732507c20917b4f04877588" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Ninth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2cd9a24a1b8820b1de3f240e0c733e1b2cb00f" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Quarter / Fraction One Quarter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dc27da6531a07b9639c96eeb57f3c6166b854d" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Seventh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b497ee93232519615401c8f274683da6ac9e31" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Sixth / Fraction One Sixth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada7f7ea5dfbd4c19ba9c3e580d06159c80a1e52" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Tenth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe9918b0f58d14d507e3c3ac80d2abe0b2b2c00" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Third / Fraction One Third</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533f02ec1b18beabada67383f82de17ba9397a9f" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Seven Eighths / Fraction Seven Eighths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772183d1aa4241b593aae736d3517cb349b6502d" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Three Eighths / Fraction Three Eighths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f41956a7c6db371ccf04a21004f0afd7c3fdfbb0" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Three Fifths / Fraction Three Fifths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96bbd2d7245dd133a3f9a78e5320abff3ef4e207" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Three Quarters / Fraction Three Quarters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ae2856dd94274c80a8e6426b4994dc2779632b" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Two Fifths / Fraction Two Fifths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa906e09060606fdcb3fd3c63c507358187596c" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Two Thirds / Fraction Two Thirds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924c01e5f46e201273bd64cb92dc787e33fcf371" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Zero Thirds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700756d9987ff8eb1bf98e15bdd0cb4f7b0b4c43" translate="yes" xml:space="preserve">
          <source>Wait for a Task to finish, then return its result value. If the task fails with an exception, the exception is propagated (re-thrown in the task that called fetch).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673aefa6be6107ab62aedf7c032815d166f52464" translate="yes" xml:space="preserve">
          <source>Wait for a value to become available for the specified &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ead67a72786e6cde16e53095e4c792246b473f0" translate="yes" xml:space="preserve">
          <source>Wait for a value to become available on the specified &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26af15450a38e48475b5ea5e4cb3ccfc6b0ebec8" translate="yes" xml:space="preserve">
          <source>Wait for and get a value from a &lt;a href=&quot;#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;. Exceptions raised are the same as for a &lt;code&gt;Future&lt;/code&gt;. Does not remove the item fetched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9cad1615350aa88fc30de4eb3475c1aec850b6" translate="yes" xml:space="preserve">
          <source>Wait for and get the first available item from the channel. Does not remove the item. &lt;code&gt;fetch&lt;/code&gt; is unsupported on an unbuffered (0-size) channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352dbfcf93af85a3591da1d5ec38648c6abb53e1" translate="yes" xml:space="preserve">
          <source>Wait for and get the value of a &lt;a href=&quot;#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The fetched value is cached locally. Further calls to &lt;code&gt;fetch&lt;/code&gt; on the same reference return the cached value. If the remote value is an exception, throws a &lt;a href=&quot;#Distributed.RemoteException&quot;&gt;&lt;code&gt;RemoteException&lt;/code&gt;&lt;/a&gt; which captures the remote exception and backtrace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7b622d11b105cf23e49505960529494a392b04" translate="yes" xml:space="preserve">
          <source>Wait for one of the &lt;code&gt;sem_size&lt;/code&gt; permits to be available, blocking until one can be acquired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a017114c4d0dd517c996d0a2c594edadea16c041" translate="yes" xml:space="preserve">
          <source>Wait until all lexically-enclosed uses of &lt;code&gt;@async&lt;/code&gt;, &lt;code&gt;@spawn&lt;/code&gt;, &lt;code&gt;@spawnat&lt;/code&gt; and &lt;code&gt;@distributed&lt;/code&gt; are complete. All exceptions thrown by enclosed async operations are collected and thrown as a &lt;code&gt;CompositeException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fc4cb0feac4737de18649536c986d639721b93" translate="yes" xml:space="preserve">
          <source>Waiting tasks are woken after an initial delay of &lt;code&gt;delay&lt;/code&gt; seconds, and then repeating with the given &lt;code&gt;interval&lt;/code&gt; in seconds. If &lt;code&gt;interval&lt;/code&gt; is equal to &lt;code&gt;0&lt;/code&gt;, the timer is only triggered once. When the timer is closed (by &lt;a href=&quot;../io-network/index#Base.close&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; waiting tasks are woken with an error. Use &lt;a href=&quot;../io-network/index#Base.isopen&quot;&gt;&lt;code&gt;isopen&lt;/code&gt;&lt;/a&gt; to check whether a timer is still active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1071d3e2d3b79d4d8bb7daf85adf19588062a6b7" translate="yes" xml:space="preserve">
          <source>Waiting tasks are woken and the function &lt;code&gt;callback&lt;/code&gt; is called after an initial delay of &lt;code&gt;delay&lt;/code&gt; seconds, and then repeating with the given &lt;code&gt;interval&lt;/code&gt; in seconds. If &lt;code&gt;interval&lt;/code&gt; is equal to &lt;code&gt;0&lt;/code&gt;, the timer is only triggered once. The function &lt;code&gt;callback&lt;/code&gt; is called with a single argument, the timer itself. When the timer is closed (by &lt;a href=&quot;../io-network/index#Base.close&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; waiting tasks are woken with an error. Use &lt;a href=&quot;../io-network/index#Base.isopen&quot;&gt;&lt;code&gt;isopen&lt;/code&gt;&lt;/a&gt; to check whether a timer is still active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384445ca71f292b1676c085911adc7efa7f44a24" translate="yes" xml:space="preserve">
          <source>Waits until &lt;code&gt;testcb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; or for &lt;code&gt;secs&lt;/code&gt; seconds, whichever is earlier. &lt;code&gt;testcb&lt;/code&gt; is polled every &lt;code&gt;pollint&lt;/code&gt; seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fe2746e814a18dfed92008014ef09975c04f23" translate="yes" xml:space="preserve">
          <source>Wake up tasks waiting for a condition, passing them &lt;code&gt;val&lt;/code&gt;. If &lt;code&gt;all&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (the default), all waiting tasks are woken, otherwise only one is. If &lt;code&gt;error&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the passed value is raised as an exception in the woken tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab901b7e5b8bd4f885d9c6a8cbc8ae091c1b076" translate="yes" xml:space="preserve">
          <source>Waning Crescent Moon Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca89a5dd3637ddb705adb67e86886b8842de63a" translate="yes" xml:space="preserve">
          <source>Waning Gibbous Moon Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3009d557c90c919cd9d0ea8a12b75430344b5929" translate="yes" xml:space="preserve">
          <source>Warn</source>
          <target state="translated">Warn</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="b32fd871aad45a3830f5319cd5329b94c1730bca" translate="yes" xml:space="preserve">
          <source>Warning Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e960da975b92f1fcb07b7378eb672fc07701597" translate="yes" xml:space="preserve">
          <source>Warning: do not implement these methods if the underlying storage is not actually strided, as it may lead to incorrect results or segmentation faults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91ebf5887cf9ee3c9f843d1887a6d922dc78c46" translate="yes" xml:space="preserve">
          <source>Watch</source>
          <target state="translated">Watch</target>
        </trans-unit>
        <trans-unit id="95dfef8d44a4bee27fe25561a3c9c0487432f65b" translate="yes" xml:space="preserve">
          <source>Watch file or directory &lt;code&gt;path&lt;/code&gt; for changes until a change occurs or &lt;code&gt;timeout_s&lt;/code&gt; seconds have elapsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59134ad32d2b5206214dcf33380079d24664842d" translate="yes" xml:space="preserve">
          <source>Watches a file or directory &lt;code&gt;path&lt;/code&gt; for changes until a change has occurred or &lt;code&gt;timeout_s&lt;/code&gt; seconds have elapsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca35816415b36528899a025f235ead5b493c4c6" translate="yes" xml:space="preserve">
          <source>Water Buffalo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06db6b2e3d7113b354825a671bcfd66f3f37636" translate="yes" xml:space="preserve">
          <source>Water Closet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d7518c22143e2c303ad5d3b3b76e99881c89f4" translate="yes" xml:space="preserve">
          <source>Water Wave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654a5083667369ba4ea98c6fad0fba9b362d84f9" translate="yes" xml:space="preserve">
          <source>Watermelon</source>
          <target state="translated">Watermelon</target>
        </trans-unit>
        <trans-unit id="efcfd2863140aff2c4eb2bdd6fa9656ad7057054" translate="yes" xml:space="preserve">
          <source>Wave Arrow Pointing Directly Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1fa735e928bfc4e19cadbd3eae648f435c998b" translate="yes" xml:space="preserve">
          <source>Waving Hand Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0c28665bc4f163773e677f770df64f28f10a09" translate="yes" xml:space="preserve">
          <source>Wavy Dash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a2e376b64ecbcd255eac49c815de57f72c8cc7" translate="yes" xml:space="preserve">
          <source>Waxing Crescent Moon Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369994eb3b0ebd5d85b9b8c5c1054fdb4a4e6a45" translate="yes" xml:space="preserve">
          <source>Waxing Gibbous Moon Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3761de263d1138df106d8089687e0582792188a8" translate="yes" xml:space="preserve">
          <source>We also define a convenience wrapper for a &lt;code&gt;SharedArray&lt;/code&gt; implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd7937c29f83be5fa8d995ae61932aae9d922a0" translate="yes" xml:space="preserve">
          <source>We can also specify multiple packages at once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf25eada1cacba577a55ee72c0083a1f8723a92" translate="yes" xml:space="preserve">
          <source>We can ask for information about the active environment by using &lt;code&gt;status&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e272c4ad190b0938bc9c69088b0d3965bfa5c474" translate="yes" xml:space="preserve">
          <source>We can now execute &lt;code&gt;sub2ind_gen_impl&lt;/code&gt; and examine the expression it returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faffdfd84b81290f711f7dea5e21f96d49747fe" translate="yes" xml:space="preserve">
          <source>We can put our tests for the &lt;code&gt;foo(x)&lt;/code&gt; function in a test set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908493f843edf7ee66a6309d8ae472662e884e33" translate="yes" xml:space="preserve">
          <source>We can see &lt;code&gt;tutorial&lt;/code&gt; now contains &lt;code&gt;Example&lt;/code&gt; as a dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965750ca8edc73d5edaf9b850ece4c5b04a1af65" translate="yes" xml:space="preserve">
          <source>We can see that the &lt;code&gt;&quot;human&quot;&lt;/code&gt; literal has been interpolated into the expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d616faac9f0af3ed6de89012b5a9c6f5afd1ce" translate="yes" xml:space="preserve">
          <source>We can see that the first two code units in the string &lt;code&gt;s&lt;/code&gt; form an overlong encoding of space character. It is invalid, but is accepted in a string as a single character. The next two code units form a valid start of a three-byte UTF-8 sequence. However, the fifth code unit &lt;code&gt;\xe2&lt;/code&gt; is not its valid continuation. Therefore code units 3 and 4 are also interpreted as malformed characters in this string. Similarly code unit 5 forms a malformed character because &lt;code&gt;|&lt;/code&gt; is not a valid continuation to it. Finally the string &lt;code&gt;s2&lt;/code&gt; contains one too high code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec722680d02359489f3e45fa2c4562e09c9cd1c" translate="yes" xml:space="preserve">
          <source>We can see the &lt;a href=&quot;#Base.Filesystem.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt; has been modified by &lt;code&gt;touch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b69d4e7a91a49ec3c428dbce42702598bb1b02" translate="yes" xml:space="preserve">
          <source>We can test the info message using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2480cee187d2cc1cc597f470eaeb54baa754265" translate="yes" xml:space="preserve">
          <source>We can use many of the builtin methods that work with iterables, like &lt;a href=&quot;../../base/collections/index#Base.in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../stdlib/statistics/index#Statistics.mean&quot;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../stdlib/statistics/index#Statistics.std&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;Statistics&lt;/code&gt; standard library module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863e927f5402597cd052d4595ad76ea62614af53" translate="yes" xml:space="preserve">
          <source>We can verify that this constructor works and constructs objects that are, in fact, self-referential:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8792a0f0d8b29fc2a8023ec8a7dd90ce3d0d4dbf" translate="yes" xml:space="preserve">
          <source>We can view the quoted return expression using the function &lt;a href=&quot;../../base/base/index#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; (&lt;strong&gt;important note:&lt;/strong&gt; this is an extremely useful tool for debugging macros):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c6277bb37a454f2d70270bbbbe4dad7ec0b9f7" translate="yes" xml:space="preserve">
          <source>We define &lt;code&gt;prod(())&lt;/code&gt; to be 1, and the total number of elements in an array is the product of the size. The size of a zero-dimensional array is &lt;code&gt;()&lt;/code&gt;, and therefore its length is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52fa955d41415a30b99848d48db3fb9c65e8a90" translate="yes" xml:space="preserve">
          <source>We define a &lt;code&gt;dlclose()&lt;/code&gt; method that accepts a parameter of type &lt;code&gt;Nothing&lt;/code&gt;, so that user code does not have to change its behavior for the case that &lt;code&gt;library_name&lt;/code&gt; was not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc149b91af6eb560f65443e1ee253cae2c610859" translate="yes" xml:space="preserve">
          <source>We find that global names are frequently constants, and declaring them as such greatly improves performance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483b04db385b0851198da03cd29da645e4ce9af2" translate="yes" xml:space="preserve">
          <source>We have already seen a function &lt;code&gt;f(::Expr...) -&amp;gt; Expr&lt;/code&gt; in a previous section. In fact, &lt;a href=&quot;../../base/base/index#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; is also such a function. So, why do macros exist?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6795658430c35f4c900b3f1e2f337a0f0021d3be" translate="yes" xml:space="preserve">
          <source>We have said that a parametric type like &lt;code&gt;Ptr&lt;/code&gt; acts as a supertype of all its instances (&lt;code&gt;Ptr{Int64}&lt;/code&gt; etc.). How does this work? &lt;code&gt;Ptr&lt;/code&gt; itself cannot be a normal data type, since without knowing the type of the referenced data the type clearly cannot be used for memory operations. The answer is that &lt;code&gt;Ptr&lt;/code&gt; (or other parametric types like &lt;code&gt;Array&lt;/code&gt;) is a different kind of type called a &lt;a href=&quot;../../base/base/index#Core.UnionAll&quot;&gt;&lt;code&gt;UnionAll&lt;/code&gt;&lt;/a&gt; type. Such a type expresses the &lt;em&gt;iterated union&lt;/em&gt; of types for all values of some parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636e3e40c3c73838a97fed4217e3ac9db49c3e9d" translate="yes" xml:space="preserve">
          <source>We now add some new definitions for &lt;code&gt;f(x)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfea8865c7e95aca15b99514b9e0cd50e09aceff" translate="yes" xml:space="preserve">
          <source>We now use &lt;code&gt;Regex(&quot;1&quot;)&lt;/code&gt; instead of &lt;code&gt;r&quot;1&quot;&lt;/code&gt; to make sure that Julia creates separate instances of &lt;code&gt;Regex&lt;/code&gt; object for each entry of &lt;code&gt;rx&lt;/code&gt; vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec35a5b84bcc09ce12511e4f9859c93b1a12cef2" translate="yes" xml:space="preserve">
          <source>We pass the &lt;code&gt;r&lt;/code&gt; vector to &lt;code&gt;g_fix&lt;/code&gt; as generating several RGNs is an expensive operation so we do not want to repeat it every time we run the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7268f16539c91dcce2fef5a6e0c3e4f4529fa7f0" translate="yes" xml:space="preserve">
          <source>We should mention here that this is far from a complete picture of defining functions. Julia has a sophisticated type system and allows multiple dispatch on argument types. None of the examples given here provide any type annotations on their arguments, meaning that they are applicable to all types of arguments. The type system is described in &lt;a href=&quot;../types/index#man-types-1&quot;&gt;Types&lt;/a&gt; and defining a function in terms of methods chosen by multiple dispatch on run-time argument types is described in &lt;a href=&quot;../methods/index#Methods-1&quot;&gt;Methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a67f0f52d7f08e2b4d80e7a86d1e32e2246dae" translate="yes" xml:space="preserve">
          <source>We start 4 workers to process a single &lt;code&gt;jobs&lt;/code&gt; remote channel. Jobs, identified by an id (&lt;code&gt;job_id&lt;/code&gt;), are written to the channel. Each remotely executing task in this simulation reads a &lt;code&gt;job_id&lt;/code&gt;, waits for a random amount of time and writes back a tuple of &lt;code&gt;job_id&lt;/code&gt;, time taken and its own &lt;code&gt;pid&lt;/code&gt; to the results channel. Finally all the &lt;code&gt;results&lt;/code&gt; are printed out on the master process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7602ad29472f270cdd747ca5767f7b21541f864" translate="yes" xml:space="preserve">
          <source>We start by opening Visual Studio and creating a new Console Application project. To the 'stdafx.h' header file, add the following lines at the end:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7e52dbeb18f4aab9e295bb6c3fe3b794d7460e" translate="yes" xml:space="preserve">
          <source>We start with a simple C program that initializes Julia and calls some Julia code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec966563751785e709c57a1206d5b2323de7847" translate="yes" xml:space="preserve">
          <source>We strongly encourage you to try all these examples to see how they work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c178bdaf4eca20bba89f0485a67fed8fb6985604" translate="yes" xml:space="preserve">
          <source>We will first consider Julia &lt;a href=&quot;../control-flow/index#man-tasks-1&quot;&gt;Tasks (aka Coroutines)&lt;/a&gt; and other modules that rely on the Julia runtime library, that allow us to suspend and resume computations with full control of inter-&lt;code&gt;Tasks&lt;/code&gt; communication without having to manually interface with the operating system's scheduler. Julia also supports communication between &lt;code&gt;Tasks&lt;/code&gt; through operations like &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;fetch&lt;/code&gt;. Communication and data synchronization is managed through &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s, which are the conduits that provide inter-&lt;code&gt;Tasks&lt;/code&gt; communication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bf173ec6449dfc053db0f852d649e379980987" translate="yes" xml:space="preserve">
          <source>WeakKeyDict</source>
          <target state="translated">WeakKeyDict</target>
        </trans-unit>
        <trans-unit id="f0314de0c1d3e072ee0c5f34821e6e9260b516aa" translate="yes" xml:space="preserve">
          <source>Weary Cat Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc7d3ff4cf1bd52c5872adea707797a48176eb4" translate="yes" xml:space="preserve">
          <source>Weary Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2bf9bdc622233451493a19e0f78f4514fdb969" translate="yes" xml:space="preserve">
          <source>Wedding</source>
          <target state="translated">Wedding</target>
        </trans-unit>
        <trans-unit id="8bd12f2094b5f4ba0bbdd465685c8e4690ed946b" translate="yes" xml:space="preserve">
          <source>Welcome to the documentation for Julia 1.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be913c6a4cf9189e9c190ec0adc68e90e4c97e4" translate="yes" xml:space="preserve">
          <source>Whale</source>
          <target state="translated">Whale</target>
        </trans-unit>
        <trans-unit id="375144b7f845dc51bb4e72f8e608e2b7199156c4" translate="yes" xml:space="preserve">
          <source>What are the differences between zero-dimensional arrays and scalars?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7076b54a9ebe6ee2099ef19db17f5603e67dda2" translate="yes" xml:space="preserve">
          <source>What are the possible causes of an &lt;code&gt;UndefVarError&lt;/code&gt; during remote execution?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e8482c889872b755ea864c2a6346e9a0dc7c13" translate="yes" xml:space="preserve">
          <source>What does &quot;type-stable&quot; mean?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18e5df2eb583dbf63c895d771307dc5beb0550b" translate="yes" xml:space="preserve">
          <source>What does the &lt;code&gt;...&lt;/code&gt; operator do?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e403edfbacc5a9300178b028475d72c9ac7f144e" translate="yes" xml:space="preserve">
          <source>What follows is a quick overview of Pkg, Julia's package manager. It should help new users become familiar with basic Pkg features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b5a9178463a6f64c403bbf3579ad70f39858c3" translate="yes" xml:space="preserve">
          <source>What follows is a very brief introduction to Pkg. It is highly recommended to read the full manual, which is available here: &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/&quot;&gt;https://julialang.github.io/Pkg.jl/v1/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1b405051e8aa0f8bb9f6f6cf42b1ad141a9ba2" translate="yes" xml:space="preserve">
          <source>What happens if &lt;code&gt;import Zebra&lt;/code&gt; is evaluated in the main &lt;code&gt;App&lt;/code&gt; code base? Since &lt;code&gt;Zebra&lt;/code&gt; does not appear in the project file, the import will fail even though &lt;code&gt;Zebra&lt;/code&gt;&lt;em&gt;does&lt;/em&gt; appear in the manifest file. Moreover, if &lt;code&gt;import Zebra&lt;/code&gt; occurs in the public &lt;code&gt;Priv&lt;/code&gt; package&amp;mdash;the one with UUID &lt;code&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;/code&gt;&amp;mdash;then that would also fail since that &lt;code&gt;Priv&lt;/code&gt; package has no declared dependencies in the manifest file and therefore cannot load any packages. The &lt;code&gt;Zebra&lt;/code&gt; package can only be loaded by packages for which it appear as an explicit dependency in the manifest file: the &lt;code&gt;Pub&lt;/code&gt; package and one of the &lt;code&gt;Priv&lt;/code&gt; packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df4ea25877d9225bf9beecd2604c556ef2f3aa4" translate="yes" xml:space="preserve">
          <source>What happens if we evaluate &lt;code&gt;foo&lt;/code&gt; again with a type that we have already used?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b168674d9032058d87b14f2643e8b740569003" translate="yes" xml:space="preserve">
          <source>What if we repeat the process? What is the type of a type of a type? As it happens, types are all composite values and thus all have a type of &lt;code&gt;DataType&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c8231840d8c0a2ee8876da74fa758be586c4d5" translate="yes" xml:space="preserve">
          <source>What is brought into scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0c102525b96cde6901e5f5ceb8c7569053a70f" translate="yes" xml:space="preserve">
          <source>What is the difference between &quot;using&quot; and &quot;import&quot;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc322e3544ca572c436cc629f272e8f9083662e" translate="yes" xml:space="preserve">
          <source>What is the return value of an assignment?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2269bad70018db37aa152079ee07e395e293de2e" translate="yes" xml:space="preserve">
          <source>What purpose do parametric abstract types like &lt;code&gt;Pointy&lt;/code&gt; serve? Consider if we create a point-like implementation that only requires a single coordinate because the point is on the diagonal line &lt;em&gt;x = y&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4e0eba4d9311f35f7a602da1112be78b3670c2" translate="yes" xml:space="preserve">
          <source>What's going on there? In the first line, we're adding 1 day to January 29th, which results in 2014-01-30; then we add 1 month, so we get 2014-02-30, which then adjusts down to 2014-02-28. In the second example, we add 1 month &lt;em&gt;first&lt;/em&gt;, where we get 2014-02-29, which adjusts down to 2014-02-28, and &lt;em&gt;then&lt;/em&gt; add 1 day, which results in 2014-03-01. One design principle that helps in this case is that, in the presence of multiple Periods, the operations will be ordered by the Periods' &lt;em&gt;types&lt;/em&gt;, not their value or positional order; this means &lt;code&gt;Year&lt;/code&gt; will always be added first, then &lt;code&gt;Month&lt;/code&gt;, then &lt;code&gt;Week&lt;/code&gt;, etc. Hence the following &lt;em&gt;does&lt;/em&gt; result in associativity and Just Works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfb635074e8ec4cadb7236583c2872a090d4783" translate="yes" xml:space="preserve">
          <source>What's really going on here is that &lt;code&gt;Point&lt;/code&gt;, &lt;code&gt;Point{Float64}&lt;/code&gt; and &lt;code&gt;Point{Int64}&lt;/code&gt; are all different constructor functions. In fact, &lt;code&gt;Point{T}&lt;/code&gt; is a distinct constructor function for each type &lt;code&gt;T&lt;/code&gt;. Without any explicitly provided inner constructors, the declaration of the composite type &lt;code&gt;Point{T&amp;lt;:Real}&lt;/code&gt; automatically provides an inner constructor, &lt;code&gt;Point{T}&lt;/code&gt;, for each possible type &lt;code&gt;T&amp;lt;:Real&lt;/code&gt;, that behaves just like non-parametric default inner constructors do. It also provides a single general outer &lt;code&gt;Point&lt;/code&gt; constructor that takes pairs of real arguments, which must be of the same type. This automatic provision of constructors is equivalent to the following explicit declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac94c61f72cef8a05dc1f143540e80e082b95ca" translate="yes" xml:space="preserve">
          <source>Wheelchair Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e372ad539a5b6f69cfecd518ffee27baf201194a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--depwarn=no&lt;/code&gt;, simply return the result of executing &lt;code&gt;expression&lt;/code&gt;. When &lt;code&gt;--depwarn=error&lt;/code&gt;, check that an ErrorException is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a200d2bf2141bef32e094222abeb6ea685aeb4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--depwarn=yes&lt;/code&gt;, test that &lt;code&gt;expression&lt;/code&gt; emits a deprecation warning and return the value of &lt;code&gt;expression&lt;/code&gt;. The log message string will be matched against &lt;code&gt;pattern&lt;/code&gt; which defaults to &lt;code&gt;r&quot;deprecated&quot;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1a8dc42946acafa81c5740aa21d2dee07993bf" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@sayhello&lt;/code&gt; is entered in the REPL, the expression executes immediately, thus we only see the evaluation result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e793eb591e046c76c38f6001e51ca3fa2243395" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;A&lt;/code&gt; is sparse, a similar polyalgorithm is used. For indefinite matrices, the &lt;code&gt;LDLt&lt;/code&gt; factorization does not use pivoting during the numerical factorization and therefore the procedure can fail even for invertible matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8d30453be3346ceadf6f86b18d6a1b7d2c5482" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;abs&lt;/code&gt; is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when &lt;code&gt;abs&lt;/code&gt; is applied to the minimum representable value of a signed integer. That is, when &lt;code&gt;x == typemin(typeof(x))&lt;/code&gt;, &lt;code&gt;abs(x) == x &amp;lt; 0&lt;/code&gt;, not &lt;code&gt;-x&lt;/code&gt; as might be expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef7f5c5a085d7dd04543fecd677114d5fd72981" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;check = true&lt;/code&gt;, an error is thrown if the decomposition fails. When &lt;code&gt;check = false&lt;/code&gt;, responsibility for checking the decomposition's validity (via &lt;a href=&quot;#LinearAlgebra.issuccess&quot;&gt;&lt;code&gt;issuccess&lt;/code&gt;&lt;/a&gt;) lies with the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2637af6fced184f7f479f36a4ece7d55ae2e730" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;data&lt;/code&gt; is not given, the buffer will be both readable and writable by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1635e94802425023fba8788c61c2d8926fff7d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p=1&lt;/code&gt;, the operator norm is the maximum absolute column sum of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178ec586817b3a48abe80b928aa2dde1b98626f7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p=2&lt;/code&gt;, the operator norm is the spectral norm, equal to the largest singular value of &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c9763c674d94ae81ec6e72c5aee69686bbab29" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p=Inf&lt;/code&gt;, the operator norm is the maximum absolute row sum of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f72b2f90cae1c6e82409384ce1f3ceb6b9eefd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;wait&lt;/code&gt; is false, the process' I/O streams are directed to &lt;code&gt;devnull&lt;/code&gt;. When &lt;code&gt;wait&lt;/code&gt; is true, I/O streams are shared with the parent process. Use &lt;a href=&quot;#Base.pipeline-Tuple%7BAny,Any,Any,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt;&lt;code&gt;pipeline&lt;/code&gt;&lt;/a&gt; to control I/O redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387339aa06f5aeaa40b73befd69307921f5c8373" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;const&lt;/code&gt; definition is only used to define an alias of another definition, such as is the case with the function &lt;code&gt;div&lt;/code&gt; and its alias &lt;code&gt;&amp;divide;&lt;/code&gt; in &lt;code&gt;Base&lt;/code&gt;, do not document the alias and instead document the actual function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43f7beafb82d84f0b0ca093d70636ab00d5bb6c" translate="yes" xml:space="preserve">
          <source>When a channel is bound to multiple tasks, the first task to terminate will close the channel. When multiple channels are bound to the same task, termination of the task will close all of the bound channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c8aa513c5811a7c3a8d7b2460bea25a7005e55" translate="yes" xml:space="preserve">
          <source>When a file is run as the main script using &lt;code&gt;julia file.jl&lt;/code&gt; one might want to activate extra functionality like command line argument handling. A way to determine that a file is run in this fashion is to check if &lt;code&gt;abspath(PROGRAM_FILE) == @__FILE__&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7501453daabe62281039e1cf6e34fa2839c62e" translate="yes" xml:space="preserve">
          <source>When a piece of computing work (in practice, executing a particular function) is designated as a &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;, it becomes possible to interrupt it by switching to another &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;. The original &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; can later be resumed, at which point it will pick up right where it left off. At first, this may seem similar to a function call. However there are two key differences. First, switching tasks does not use any space, so any number of task switches can occur without consuming the call stack. Second, switching among tasks can occur in any order, unlike function calls, where the called function must finish executing before control returns to the calling function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9979982b20b6ded943786342ff40e25b341c71" translate="yes" xml:space="preserve">
          <source>When a scalar value is passed with &lt;code&gt;&amp;amp;&lt;/code&gt; as an argument of type &lt;code&gt;Ptr{T}&lt;/code&gt;, the value will first be converted to type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe81791971f41be5d7864ff7745e79391be55d47" translate="yes" xml:space="preserve">
          <source>When a significant amount of repetitive boilerplate code is required, it is common to generate it programmatically to avoid redundancy. In most languages, this requires an extra build step, and a separate program to generate the repetitive code. In Julia, expression interpolation and &lt;a href=&quot;../../base/base/index#Base.MainInclude.eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; allow such code generation to take place in the normal course of program execution. For example, consider the following custom type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1094197338bf27238baecc37ce0fa2dfa2098d" translate="yes" xml:space="preserve">
          <source>When a type is applied like a function it is called a &lt;em&gt;constructor&lt;/em&gt;. Two constructors are generated automatically (these are called &lt;em&gt;default constructors&lt;/em&gt;). One accepts any arguments and calls &lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt; to convert them to the types of the fields, and the other accepts arguments that match the field types exactly. The reason both of these are generated is that this makes it easier to add new definitions without inadvertently replacing a default constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d1d001e4fb72f4a3da5b80ba6df14e5f1fa86f" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;Integer&lt;/code&gt;-type value is needed, use &lt;code&gt;Integer(maxintfloat(T))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec02c864c4b4a52ed32380f6bbcf97149ade981" translate="yes" xml:space="preserve">
          <source>When an array is passed to C as a &lt;code&gt;Ptr{T}&lt;/code&gt; argument, it is not reinterpret-cast: Julia requires that the element type of the array matches &lt;code&gt;T&lt;/code&gt;, and the address of the first element is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8566fd6fe66598ffc21c0e41c119f24c167f7a3e" translate="yes" xml:space="preserve">
          <source>When an event is triggered, the appropriate logger is found by looking for a task-local logger with the global logger as fallback. The idea here is that the application code knows how log events should be processed and exists somewhere at the top of the call stack. So we should look up through the call stack to discover the logger &amp;mdash; that is, the logger should be &lt;em&gt;dynamically scoped&lt;/em&gt;. (This is a point of contrast with logging frameworks where the logger is &lt;em&gt;lexically scoped&lt;/em&gt;; provided explicitly by the module author or as a simple global variable. In such a system it's awkward to control logging while composing functionality from multiple modules.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981c7afc180e088292ad80d1981131b0506db6e1" translate="yes" xml:space="preserve">
          <source>When an event occurs, a few steps of early filtering occur to avoid generating messages that will be discarded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe255a18b8e1451834d407df7913b2e3977086f0" translate="yes" xml:space="preserve">
          <source>When an unexpected condition occurs, a function may be unable to return a reasonable value to its caller. In such cases, it may be best for the exceptional condition to either terminate the program while printing a diagnostic error message, or if the programmer has provided code to handle such exceptional circumstances then allow that code to take the appropriate action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d51c32014a3d44fbfbe45092f164ea5ddadbfc7" translate="yes" xml:space="preserve">
          <source>When appended to a variable on the left-hand side of an assignment, or as part of a &lt;code&gt;local&lt;/code&gt; declaration, the &lt;code&gt;::&lt;/code&gt; operator means something a bit different: it declares the variable to always have the specified type, like a type declaration in a statically-typed language such as C. Every value assigned to the variable will be converted to the declared type using &lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef999f924ed2b51c873965e3d0169626b4f532c7" translate="yes" xml:space="preserve">
          <source>When appended to an expression computing a value, the &lt;code&gt;::&lt;/code&gt; operator is read as &quot;is an instance of&quot;. It can be used anywhere to assert that the value of the expression on the left is an instance of the type on the right. When the type on the right is concrete, the value on the left must have that type as its implementation &amp;ndash; recall that all concrete types are final, so no implementation is a subtype of any other. When the type is abstract, it suffices for the value to be implemented by a concrete type that is a subtype of the abstract type. If the type assertion is not true, an exception is thrown, otherwise, the left-hand value is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c43c8db23e17e00320a3451d1f8da6af7074e8" translate="yes" xml:space="preserve">
          <source>When are deprecated functions removed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2e75685386e4e2827a83db4cca905b6c592eba" translate="yes" xml:space="preserve">
          <source>When building generic code, there is often a need for constructing a similar object with some change made to the layout of the type, also necessitating a change of the type parameters. For instance, you might have some sort of abstract array with an arbitrary element type and want to write your computation on it with a specific element type. We must implement a method for each &lt;code&gt;AbstractArray{T}&lt;/code&gt; subtype that describes how to compute this type transform. There is no general transform of one subtype into another subtype with a different parameter. (Quick review: do you see why this is?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacb27a3db8ad4d6fa07c864549f990e1b1f9b09" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#Libdl.dlopen&quot;&gt;&lt;code&gt;dlopen&lt;/code&gt;&lt;/a&gt;, the paths in this list will be searched first, in order, before searching the system locations for a valid library handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7e9d8c42190544bd3e1564f8b8ba2bd51f8bbc" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;../../base/strings/index#Base.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, you have the option to specify an index at which to start the search. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92c3b1df4a4ce3ed62a3bfa6e7cf7fe1b90182a" translate="yes" xml:space="preserve">
          <source>When calling Fortran, all inputs must be passed by pointers to heap- or stack-allocated values, so all type correspondences above should contain an additional &lt;code&gt;Ptr{..}&lt;/code&gt; or &lt;code&gt;Ref{..}&lt;/code&gt; wrapper around their type specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e331cf313a89110c14bb50e3eee2e7301f9cb8b" translate="yes" xml:space="preserve">
          <source>When chaining conditionals (including &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;), the &lt;code&gt;@static&lt;/code&gt; must be repeated for each level (parentheses optional, but recommended for readability):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174b27ef1832006fe6218d3c983f95e289715bc3" translate="yes" xml:space="preserve">
          <source>When control leaves the &lt;a href=&quot;#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; block (for example, due to a &lt;a href=&quot;#return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt;, or just finishing normally), &lt;code&gt;close(f)&lt;/code&gt; will be executed. If the &lt;code&gt;try&lt;/code&gt; block exits due to an exception, the exception will continue propagating. A &lt;code&gt;catch&lt;/code&gt; block may be combined with &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; as well. In this case the &lt;code&gt;finally&lt;/code&gt; block will run after &lt;code&gt;catch&lt;/code&gt; has handled the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac01620653b38b07c8e2f2811a030ec92b4e1ad9" translate="yes" xml:space="preserve">
          <source>When control leaves the &lt;code&gt;try&lt;/code&gt; block (for example due to a &lt;code&gt;return&lt;/code&gt;, or just finishing normally), &lt;code&gt;close(f)&lt;/code&gt; will be executed. If the &lt;code&gt;try&lt;/code&gt; block exits due to an exception, the exception will continue propagating. A &lt;code&gt;catch&lt;/code&gt; block may be combined with &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; as well. In this case the &lt;code&gt;finally&lt;/code&gt; block will run after &lt;code&gt;catch&lt;/code&gt; has handled the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de1f7de90353d88ef9000e4f79f92b8c808bdb2" translate="yes" xml:space="preserve">
          <source>When defining a function, one can optionally constrain the types of parameters it is applicable to, using the &lt;code&gt;::&lt;/code&gt; type-assertion operator, introduced in the section on &lt;a href=&quot;../types/index#Composite-Types-1&quot;&gt;Composite Types&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152d609433f05c2afbaef9a063010fb7cf671728" translate="yes" xml:space="preserve">
          <source>When defining a new type, initially all ways of creating it should be defined as constructors. If it becomes clear that implicit conversion would be useful, and that some constructors meet the above &quot;safety&quot; criteria, then &lt;code&gt;convert&lt;/code&gt; methods can be added. These methods are typically quite simple, as they only need to call the appropriate constructor. Such a definition might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c61f17e48da1bcacb16f9549d16af7280e11ed" translate="yes" xml:space="preserve">
          <source>When defining generated functions, there are four main differences to ordinary functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49efec53aeb1ae624503fb2c22137ba91bb625ee" translate="yes" xml:space="preserve">
          <source>When designing APIs, adhering to this general order as much as possible is likely to give users of your functions a more consistent experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a941f10446d75f8958c1348bd2a746eb967d2e21" translate="yes" xml:space="preserve">
          <source>When exactly one index &lt;code&gt;i&lt;/code&gt; is provided, that index no longer represents a location in a particular dimension of the array. Instead, it selects the &lt;code&gt;i&lt;/code&gt;th element using the column-major iteration order that linearly spans the entire array. This is known as &lt;em&gt;linear indexing&lt;/em&gt;. It essentially treats the array as though it had been reshaped into a one-dimensional vector with &lt;a href=&quot;../../base/arrays/index#Base.vec&quot;&gt;&lt;code&gt;vec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d4ab6d8c0ec75d6d289814f9629ec5250796ab" translate="yes" xml:space="preserve">
          <source>When executing a remote function in parallel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bf875610ed5f18bb5771424d18a32cfa69cc45" translate="yes" xml:space="preserve">
          <source>When fetching data from LibGit2, a typical usage would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5749e51bc8ddb6474c3a822e03c976f400cb95" translate="yes" xml:space="preserve">
          <source>When is &lt;code&gt;convert&lt;/code&gt; called?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bdbef12210d17b4e3031ada949009b49167f95" translate="yes" xml:space="preserve">
          <source>When no supertype is given, the default supertype is &lt;code&gt;Any&lt;/code&gt; &amp;ndash; a predefined abstract type that all objects are instances of and all types are subtypes of. In type theory, &lt;code&gt;Any&lt;/code&gt; is commonly called &quot;top&quot; because it is at the apex of the type graph. Julia also has a predefined abstract &quot;bottom&quot; type, at the nadir of the type graph, which is written as &lt;code&gt;Union{}&lt;/code&gt;. It is the exact opposite of &lt;code&gt;Any&lt;/code&gt;: no object is an instance of &lt;code&gt;Union{}&lt;/code&gt; and all types are supertypes of &lt;code&gt;Union{}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcc651112bb76903e5ae0a3bf204e82def56437" translate="yes" xml:space="preserve">
          <source>When omitting &lt;em&gt;all&lt;/em&gt; indices with &lt;code&gt;A[]&lt;/code&gt;, this semantic provides a simple idiom to retrieve the only element in an array and simultaneously ensure that there was only one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a0968a84486d9bb369e312765b66f12f135bdd" translate="yes" xml:space="preserve">
          <source>When only the type of supplied arguments needs to be constrained &lt;code&gt;Vararg{T}&lt;/code&gt; can be equivalently written as &lt;code&gt;T...&lt;/code&gt;. For instance &lt;code&gt;f(x::Int...) = x&lt;/code&gt; is a shorthand for &lt;code&gt;f(x::Vararg{Int}) = x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc2691546974788c6f5f633b5af60f15dc7f704" translate="yes" xml:space="preserve">
          <source>When optional and keyword argument default expressions are evaluated, only &lt;em&gt;previous&lt;/em&gt; arguments are in scope. For example, given this definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328ccbd822376eb34037743aedfc016fe4fbbce4" translate="yes" xml:space="preserve">
          <source>When passed as a &lt;code&gt;ccall&lt;/code&gt; argument (either as a &lt;code&gt;Ptr&lt;/code&gt; or &lt;code&gt;Ref&lt;/code&gt; type), a &lt;code&gt;Ref&lt;/code&gt; object will be converted to a native pointer to the data it references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff24cc69534fdb104d1c11f0a561a2d6006bd40" translate="yes" xml:space="preserve">
          <source>When passing data to a &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;, it is best to avoid using the &lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/a&gt; function. Instead define a convert method and pass the variables directly to the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; returns, you must arrange that the object remains visible to the garbage collector. The suggested way to handle this is to make a global variable of type &lt;code&gt;Array{Ref,1}&lt;/code&gt; to hold these values, until the C library notifies you that it is finished with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4161f851acf4dfa4cc8665b77ecf5c1170bcb8" translate="yes" xml:space="preserve">
          <source>When possible, it helps to ensure that a function always returns a value of the same type. Consider the following definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f980dac273e411c73db2f2997e398dee2af97484" translate="yes" xml:space="preserve">
          <source>When reading and writing to both ends of a pipeline from a single process, it is important to avoid forcing the kernel to buffer all of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432031c93a248af1a362c62ac61d4d3da70d6a24" translate="yes" xml:space="preserve">
          <source>When redefining a method or adding new methods, it is important to realize that these changes don't take effect immediately. This is key to Julia's ability to statically infer and compile code to run fast, without the usual JIT tricks and overhead. Indeed, any new method definition won't be visible to the current runtime environment, including Tasks and Threads (and any previously defined &lt;code&gt;@generated&lt;/code&gt; functions). Let's start with an example to see what this means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67015b5342fb583f71d2f0a8849f5c8f2575736" translate="yes" xml:space="preserve">
          <source>When repeatedly generating random values (with the same &lt;code&gt;rand&lt;/code&gt; parameters), it happens for some types that the result of a computation is used for each call. In this case, the computation can be decoupled from actually generating the values. This is the case for example with the default implementation for &lt;code&gt;AbstractArray&lt;/code&gt;. Assume that &lt;code&gt;rand(rng, 1:20)&lt;/code&gt; has to be called repeatedly in a loop: the way to take advantage of this decoupling is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5775c96a25e19b8d91a7723e7ea52f8fd816253c" translate="yes" xml:space="preserve">
          <source>When retrieving documentation for a generic function, the metadata for each method is concatenated with the &lt;code&gt;catdoc&lt;/code&gt; function, which can of course be overridden for custom types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdae2c11195f3a2ff681be9a1639c0d95a5dceb" translate="yes" xml:space="preserve">
          <source>When searching for files, &lt;code&gt;require&lt;/code&gt; first looks for package code in the global array &lt;a href=&quot;../constants/index#Base.LOAD_PATH&quot;&gt;&lt;code&gt;LOAD_PATH&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;require&lt;/code&gt; is case-sensitive on all platforms, including those with case-insensitive filesystems like macOS and Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5caa784bb63149c778b19d4371f4d304c538230" translate="yes" xml:space="preserve">
          <source>When strings are created using triple-quotes (&lt;code&gt;&quot;&quot;&quot;...&quot;&quot;&quot;&lt;/code&gt;) they have some special behavior that can be useful for creating longer blocks of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c021e0b023c23a7d814288842365e170962500" translate="yes" xml:space="preserve">
          <source>When the command is run, Julia does not capture its output unless you specifically arrange for it to. Instead, the output of the command by default goes to &lt;a href=&quot;../../base/io-network/index#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; as it would using &lt;code&gt;libc&lt;/code&gt;'s &lt;code&gt;system&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa07c6647099037fc4a9f69e1680570128c974a" translate="yes" xml:space="preserve">
          <source>When the cursor is at the beginning of the line, the prompt can be changed to a help mode by typing &lt;code&gt;?&lt;/code&gt;. Julia will attempt to print help or documentation for anything entered in help mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507cfdac68541961a8caed400c02e4110284216d" translate="yes" xml:space="preserve">
          <source>When the function is called, the semicolon is optional: one can either call &lt;code&gt;plot(x, y, width=2)&lt;/code&gt; or &lt;code&gt;plot(x, y; width=2)&lt;/code&gt;, but the former style is more common. An explicit semicolon is required only for passing varargs or computed keywords as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639ad8fb2203031e1f5890076ab452c005551734" translate="yes" xml:space="preserve">
          <source>When the latter holds, a function processing such a homogenous array can be productively specialized: Julia knows the type of each element in advance (all objects in the container have the same concrete type), so Julia can &quot;look up&quot; the correct method calls when the function is being compiled (obviating the need to check at run-time) and thereby emit efficient code for processing the whole list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b657ed862f19af0ea0f696008e9ac44d556c4b65" translate="yes" xml:space="preserve">
          <source>When these do not hold, then it's likely that you'll get no benefit; worse, the resulting &quot;combinatorial explosion of types&quot; will be counterproductive. If &lt;code&gt;items[i+1]&lt;/code&gt; has a different type than &lt;code&gt;item[i]&lt;/code&gt;, Julia has to look up the type at run-time, search for the appropriate method in method tables, decide (via type intersection) which one matches, determine whether it has been JIT-compiled yet (and do so if not), and then make the call. In essence, you're asking the full type- system and JIT-compilation machinery to basically execute the equivalent of a switch statement or dictionary lookup in your own code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daba9492446bca5f7a6499bbb7ab37d695e92939" translate="yes" xml:space="preserve">
          <source>When this approach is not possible, it may be worth starting a discussion with other developers about resolving the ambiguity; just because one method was defined first does not necessarily mean that it can't be modified or eliminated. As a last resort, one developer can define the &quot;band-aid&quot; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcec4d967a0515eaea7ceb3fcaeb59b279f583b" translate="yes" xml:space="preserve">
          <source>When to use T, Ptr{T} and Ref{T}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192e3e787a1f9ea7f9bd564c044daecfe8f0cc3a" translate="yes" xml:space="preserve">
          <source>When used for retrieving documentation, the &lt;code&gt;@doc&lt;/code&gt; macro (or equally, the &lt;code&gt;doc&lt;/code&gt; function) will search all &lt;code&gt;META&lt;/code&gt; dictionaries for metadata relevant to the given object and return it. The returned object (some Markdown content, for example) will by default display itself intelligently. This design also makes it easy to use the doc system in a programmatic way; for example, to re-use documentation between different versions of a function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da1440377ce905990ebb1084be997ed9f823f6e" translate="yes" xml:space="preserve">
          <source>When used in a top-level expression (i.e. outside any function), &lt;code&gt;return&lt;/code&gt; causes the entire current top-level expression to terminate early.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c2368f15add98073b370ac7b8ec7c167ef17f5" translate="yes" xml:space="preserve">
          <source>When used recursively, &lt;code&gt;isbits&lt;/code&gt; types are stored inline. All other types are stored as a pointer to the data. When mirroring a struct used by-value inside another struct in C, it is imperative that you do not attempt to manually copy the fields over, as this will not preserve the correct field alignment. Instead, declare an &lt;code&gt;isbits&lt;/code&gt; struct type and use that instead. Unnamed structs are not possible in the translation to Julia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8037800c51683cda76306c47fbd67814674e8ca7" translate="yes" xml:space="preserve">
          <source>When used with floating point values, the exact result may not be representable by the type, and so rounding error may occur. In particular, if the exact result is very close to &lt;code&gt;y&lt;/code&gt;, then it may be rounded to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd8680746460f581c6030ccf8473f00fb5891fe" translate="yes" xml:space="preserve">
          <source>When used without arguments, it applies to all arguments of the parent scope. In local scope, this means all arguments of the containing function. In global (top-level) scope, this means all methods subsequently defined in the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2497c9ba2b3daea7dfb0574cb00ff1e7a9c7db7" translate="yes" xml:space="preserve">
          <source>When using custom transports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37c0d6d64c53d6358f8588b527452529dd78e26" translate="yes" xml:space="preserve">
          <source>When using multi-threading we have to be careful when using functions that are not &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure&lt;/a&gt; as we might get a wrong answer. For instance functions that have their &lt;a href=&quot;https://docs.julialang.org/en/latest/manual/style-guide/#Append-!-to-names-of-functions-that-modify-their-arguments-1&quot;&gt;name ending with &lt;code&gt;!&lt;/code&gt;&lt;/a&gt; by convention modify their arguments and thus are not pure. However, there are functions that have side effects and their name does not end with &lt;code&gt;!&lt;/code&gt;. For instance &lt;code&gt;findfirst(regex, str)&lt;/code&gt; mutates its &lt;code&gt;regex&lt;/code&gt; argument or &lt;a href=&quot;../../stdlib/random/index#Base.rand&quot;&gt;&lt;code&gt;rand()&lt;/code&gt;&lt;/a&gt; changes &lt;code&gt;Base.GLOBAL_RNG&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b447ea6c22b7217cd1a32ca44046e314803b64e" translate="yes" xml:space="preserve">
          <source>When using precompilation, it is important to keep a clear sense of the distinction between the compilation phase and the execution phase. In this mode, it will often be much more clearly apparent that Julia is a compiler which allows execution of arbitrary Julia code, not a standalone interpreter that also generates compiled code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5558e1451a680e9ddfe72dac1bc38bd5461d8f" translate="yes" xml:space="preserve">
          <source>When working with parameterized types, including arrays, it is best to avoid parameterizing with abstract types where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf66d0515d50ea07459b30e9a61d6da0706813b" translate="yes" xml:space="preserve">
          <source>When writing Julia callable functions, it might be necessary to validate arguments and throw exceptions to indicate errors. A typical type check looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad650f8bc2dfe7cd7aa17fa3b6b4fd4a9838167" translate="yes" xml:space="preserve">
          <source>When writing a generator expression with multiple dimensions inside an argument list, parentheses are needed to separate the generator from subsequent arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9df752ca25cefae3e41acb8144a7fbee28150d" translate="yes" xml:space="preserve">
          <source>When writing an error message, it is preferred to make the first word lowercase. For example, &lt;code&gt;size(A) == size(B) || throw(DimensionMismatch(&quot;size of A not equal to size of B&quot;))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746943943c8bd0cb8ffebcb9533c46af3e156c32" translate="yes" xml:space="preserve">
          <source>When writing cross-platform applications or libraries, it is often necessary to allow for differences between operating systems. The variable &lt;code&gt;Sys.KERNEL&lt;/code&gt; can be used to handle such cases. There are several functions in the &lt;code&gt;Sys&lt;/code&gt; module intended to make this easier, such as &lt;code&gt;isunix&lt;/code&gt;, &lt;code&gt;islinux&lt;/code&gt;, &lt;code&gt;isapple&lt;/code&gt;, &lt;code&gt;isbsd&lt;/code&gt;, &lt;code&gt;isfreebsd&lt;/code&gt;, and &lt;code&gt;iswindows&lt;/code&gt;. These may be used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140bfa28c1af35b51bf1fbbfbb494996a50b8788" translate="yes" xml:space="preserve">
          <source>When writing data to a file (or other I/O device), forming extra intermediate strings is a source of overhead. Instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea56a87bb36feaf518131b01ee237cf7ed3e22b2" translate="yes" xml:space="preserve">
          <source>When you are done experimenting with &lt;code&gt;tutorial&lt;/code&gt;, you can return to the &lt;strong&gt;default environment&lt;/strong&gt; by running &lt;code&gt;activate&lt;/code&gt; with no arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af850b03f79f23506bb562acc1e616e437cdd077" translate="yes" xml:space="preserve">
          <source>When you might be tempted to dispatch on two or more arguments, consider whether a &quot;wrapper&quot; function might make for a simpler design. For example, instead of writing multiple variants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048e5475f471182cd2ededcf0684d7e52f236fb2" translate="yes" xml:space="preserve">
          <source>When your broadcast operation involves several arguments, individual argument styles get combined to determine a single &lt;code&gt;DestStyle&lt;/code&gt; that controls the type of the output container. For more details, see &lt;a href=&quot;#writing-binary-broadcasting-rules-1&quot;&gt;below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4fb3c9ea296d79d861a0f19e5fe00c5f37399d" translate="yes" xml:space="preserve">
          <source>Whenever you have created a pointer to Julia data, you must ensure the original data exists until you are done with using the pointer. Many methods in Julia such as &lt;a href=&quot;../../base/c/index#Base.unsafe_load&quot;&gt;&lt;code&gt;unsafe_load&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;String&lt;/code&gt; make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is &lt;code&gt;unsafe_wrap&lt;/code&gt; which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc3e56583b16a50bfba8e692c6fe776fd1cb4f1" translate="yes" xml:space="preserve">
          <source>Whenever you subtype &lt;code&gt;AbstractArrayStyle&lt;/code&gt;, you also need to define rules for combining dimensionalities, by creating a constructor for your style that takes a &lt;code&gt;Val(N)&lt;/code&gt; argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3066b7d4e247d114bdc0ef476727d2a6ba818e4d" translate="yes" xml:space="preserve">
          <source>Where possible, try to avoid defining methods that dispatch on specific element types of abstract containers. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b922c6b5958e9ab31dff7d65b2a0ee19971cda" translate="yes" xml:space="preserve">
          <source>Where required, mutable composite objects can be declared with the keyword &lt;a href=&quot;../../base/base/index#mutable%20struct&quot;&gt;&lt;code&gt;mutable struct&lt;/code&gt;&lt;/a&gt;, to be discussed in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c9c509d6368e040525363a2e496308085482cd" translate="yes" xml:space="preserve">
          <source>Wherever possible examples should be &lt;strong&gt;self-contained&lt;/strong&gt; and &lt;strong&gt;runnable&lt;/strong&gt; so that readers are able to try them out without having to include any dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef567ac5cd5d2b217cb8d699a0ed8bd87ebc66fa" translate="yes" xml:space="preserve">
          <source>Whether these Unicode characters are displayed as escapes or shown as special characters depends on your terminal's locale settings and its support for Unicode. String literals are encoded using the UTF-8 encoding. UTF-8 is a variable-width encoding, meaning that not all characters are encoded in the same number of bytes (&quot;code units&quot;). In UTF-8, ASCII characters &amp;mdash; i.e. those with code points less than 0x80 (128) &amp;ndash; are encoded as they are in ASCII, using a single byte, while code points 0x80 and above are encoded using multiple bytes &amp;mdash; up to four per character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fc267bb32bef8de2de3ffe243f0a016d661b84" translate="yes" xml:space="preserve">
          <source>Whether you're at the REPL or in IJulia, you can typically improve your development experience with &lt;a href=&quot;https://github.com/timholy/Revise.jl&quot;&gt;Revise&lt;/a&gt;. It is common to configure Revise to start whenever julia is started, as per the instructions in the &lt;a href=&quot;https://timholy.github.io/Revise.jl/stable/&quot;&gt;Revise documentation&lt;/a&gt;. Once configured, Revise will track changes to files in any loaded modules, and to any files loaded in to the REPL with &lt;code&gt;includet&lt;/code&gt; (but not with plain &lt;code&gt;include&lt;/code&gt;); you can then edit the files and the changes take effect without restarting your julia session. A standard workflow is similar to the REPL-based workflow above, with the following modifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4dc663436f3244e6df7b1b5d61395f232fa789" translate="yes" xml:space="preserve">
          <source>Which dependencies a package in a package directory can import depends on whether the package contains a project file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756eba64f92afee04dba30cffc4bf61294ef8525" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; has an explicit &lt;code&gt;module&lt;/code&gt; argument, &lt;code&gt;@macroexpand&lt;/code&gt; always</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc49efbeeb77badc02c9b1bad7194e67a387a92" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; takes a keyword argument &lt;code&gt;recursive&lt;/code&gt;, &lt;code&gt;@macroexpand&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c2f9203af0f3ce23ef8c2d94a94796ece99629" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;*&lt;/code&gt; may seem like a surprising choice to users of languages that provide &lt;code&gt;+&lt;/code&gt; for string concatenation, this use of &lt;code&gt;*&lt;/code&gt; has precedent in mathematics, particularly in abstract algebra.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcff3d6feff5ad14e53fb09db15ddf33d0354ee" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;@simd&lt;/code&gt; needs to be placed directly in front of an innermost &lt;code&gt;for&lt;/code&gt; loop, both &lt;code&gt;@inbounds&lt;/code&gt; and &lt;code&gt;@fastmath&lt;/code&gt; can be applied to either single expressions or all the expressions that appear within nested blocks of code, e.g., using &lt;code&gt;@inbounds begin&lt;/code&gt; or &lt;code&gt;@inbounds for ...&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0fd7a7891ebce6279ddd6c714b5386fc801ad6" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;jl_eval_string&lt;/code&gt; allows C to obtain the result of a Julia expression, it does not allow passing arguments computed in C to Julia. For this you will need to invoke Julia functions directly, using &lt;code&gt;jl_call&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07b0b9c023a9dca4df041f23eee5d568f348dc9" translate="yes" xml:space="preserve">
          <source>While Julia imposes few restrictions on valid names, it has become useful to adopt the following conventions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9611531e19b0b6f41cb83ee6678a76716493dd1f" translate="yes" xml:space="preserve">
          <source>While complex dispatch logic is not required for performance or usability, sometimes it can be the best way to express some algorithm. Here are a few common design patterns that come up sometimes when using dispatch in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a613d3a63e35707ed9f74c525fa3af91032ab48" translate="yes" xml:space="preserve">
          <source>While consecutive &lt;code&gt;remotecall&lt;/code&gt;s to the same worker are serialized in the order they are invoked, the order of executions on the remote worker is undetermined. For example, &lt;code&gt;remote_do(f1, 2); remotecall(f2, 2); remote_do(f3, 2)&lt;/code&gt; will serialize the call to &lt;code&gt;f1&lt;/code&gt;, followed by &lt;code&gt;f2&lt;/code&gt; and &lt;code&gt;f3&lt;/code&gt; in that order. However, it is not guaranteed that &lt;code&gt;f1&lt;/code&gt; is executed before &lt;code&gt;f3&lt;/code&gt; on worker 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e62aaaf2b53ae1f62514f54b2a553fcf0cfeab" translate="yes" xml:space="preserve">
          <source>While handling an exception further exceptions may be thrown. It can be useful to inspect all these exceptions to identify the root cause of a problem. The julia runtime supports this by pushing each exception onto an internal &lt;em&gt;exception stack&lt;/em&gt; as it occurs. When the code exits a &lt;code&gt;catch&lt;/code&gt; normally, any exceptions which were pushed onto the stack in the associated &lt;code&gt;try&lt;/code&gt; are considered to be successfully handled and are removed from the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca37d3403041f9ab3487c0564b96870987e2b6c" translate="yes" xml:space="preserve">
          <source>While having easy access to information about the current state of the callstack can be helpful in many places, the most obvious application is in error handling and debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4de512495b592481ddaae589dfa8a7c51cf0bd" translate="yes" xml:space="preserve">
          <source>While it isn't normally necessary, user-defined types can override the default &lt;code&gt;deepcopy&lt;/code&gt; behavior by defining a specialized version of the function &lt;code&gt;deepcopy_internal(x::T, dict::IdDict)&lt;/code&gt; (which shouldn't otherwise be used), where &lt;code&gt;T&lt;/code&gt; is the type to be specialized for, and &lt;code&gt;dict&lt;/code&gt; keeps track of objects copied so far within the recursion. Within the definition, &lt;code&gt;deepcopy_internal&lt;/code&gt; should be used in place of &lt;code&gt;deepcopy&lt;/code&gt;, and the &lt;code&gt;dict&lt;/code&gt; variable should be updated as appropriate before returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3d13eb12580ee4231b089eaa3cb6f0dbbb0c0a" translate="yes" xml:space="preserve">
          <source>While outer constructor methods succeed in addressing the problem of providing additional convenience methods for constructing objects, they fail to address the other two use cases mentioned in the introduction of this chapter: enforcing invariants, and allowing construction of self-referential objects. For these problems, one needs &lt;em&gt;inner&lt;/em&gt; constructor methods. An inner constructor method is like an outer constructor method, except for two differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7d60dfb2e235e3358134a6468c679f21f0ad14" translate="yes" xml:space="preserve">
          <source>While propercase return the same value in the corresponding &lt;a href=&quot;#Dates.Period&quot;&gt;&lt;code&gt;Period&lt;/code&gt;&lt;/a&gt; type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0103ec498dfe3018e856d3ce11ad20db1b0525e9" translate="yes" xml:space="preserve">
          <source>While the &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; constructor expects a 0-argument function, the &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; method which creates a channel bound task expects a function that accepts a single argument of type &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. A common pattern is for the producer to be parameterized, in which case a partial function application is needed to create a 0 or 1 argument &lt;a href=&quot;../functions/index#man-anonymous-functions-1&quot;&gt;anonymous function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218a44d9559edb27cfb4f29479eb4a5c8c1ee312" translate="yes" xml:space="preserve">
          <source>While the casual programmer need not explicitly use types or multiple dispatch, they are the core unifying features of Julia: functions are defined on different combinations of argument types, and applied by dispatching to the most specific matching definition. This model is a good fit for mathematical programming, where it is unnatural for the first argument to &quot;own&quot; an operation as in traditional object-oriented dispatch. Operators are just functions with special notation &amp;ndash; to extend addition to new user-defined data types, you define new methods for the &lt;code&gt;+&lt;/code&gt; function. Existing code then seamlessly applies to the new data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb2d55855117a6a29dcfe66a2d059180dbf3aa5" translate="yes" xml:space="preserve">
          <source>While the compiler can now do its job perfectly well, there are cases where &lt;em&gt;you&lt;/em&gt; might wish that your code could do different things depending on the &lt;em&gt;element type&lt;/em&gt; of &lt;code&gt;a&lt;/code&gt;. Usually the best way to achieve this is to wrap your specific operation (here, &lt;code&gt;foo&lt;/code&gt;) in a separate function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a623753d4cea0b9be23eebbdfff0f9b8d6e62a17" translate="yes" xml:space="preserve">
          <source>While the default transport layer uses plain &lt;a href=&quot;../../stdlib/sockets/index#Sockets.TCPSocket&quot;&gt;&lt;code&gt;TCPSocket&lt;/code&gt;&lt;/a&gt;, it is possible for a Julia cluster to provide its own transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30845fa92bdd35d537ad635b6b31f53d4bb049ee" translate="yes" xml:space="preserve">
          <source>While the streaming I/O API is synchronous, the underlying implementation is fully asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5cf9df078dc718967f536a7ab7760f447547c9" translate="yes" xml:space="preserve">
          <source>While this behavior might surprise some, the choice is deliberate. The main reason is the presence of immutable objects within Julia, which cannot change their value once created. Indeed, a number is an immutable object; the statements &lt;code&gt;x = 5; x += 1&lt;/code&gt; do not modify the meaning of &lt;code&gt;5&lt;/code&gt;, they modify the value bound to &lt;code&gt;x&lt;/code&gt;. For an immutable, the only way to change the value is to reassign it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96e95242dd16f7c7d2c64c54621f6378735368c" translate="yes" xml:space="preserve">
          <source>While this can be inconvenient when you are developing new code, there's an excellent workaround. Modules can be replaced by redefining them, and so if you wrap all your new code inside a module you can redefine types and constants. You can't import the type names into &lt;code&gt;Main&lt;/code&gt; and then expect to be able to redefine them there, but you can use the module name to resolve the scope. In other words, while developing you might use a workflow something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649d185e29a40990efde41ef5a4ec1d691dac077" translate="yes" xml:space="preserve">
          <source>While this is starting to support more of the &lt;a href=&quot;../arrays/index#man-array-indexing-1&quot;&gt;indexing operations supported by some of the builtin types&lt;/a&gt;, there's still quite a number of behaviors missing. This &lt;code&gt;Squares&lt;/code&gt; sequence is starting to look more and more like a vector as we've added behaviors to it. Instead of defining all these behaviors ourselves, we can officially define it as a subtype of an &lt;a href=&quot;../../base/arrays/index#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425afa4408859b9cd15376be9e2c708f0297351c" translate="yes" xml:space="preserve">
          <source>While we can rely upon generic implementations, we can also extend specific methods where we know there is a simpler algorithm. For example, there's a formula to compute the sum of squares, so we can override the generic iterative version with a more performant solution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85aee206728001710e24ad54c1cc3e292a7042b" translate="yes" xml:space="preserve">
          <source>While you are allowed to create objects with uninitialized fields, any access to an uninitialized reference is an immediate error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf81a2eac5fd3376ed443fa4628dd130f7562794" translate="yes" xml:space="preserve">
          <source>White Bullet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e494bf31f9dcb1983954232ccfd79f61ec932828" translate="yes" xml:space="preserve">
          <source>White Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bc8512f73b7bb391a5c2ccf19c842fbda78279" translate="yes" xml:space="preserve">
          <source>White Circle With Dot Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b837af6377ef96cf6a166b867c0c8c92c78103a" translate="yes" xml:space="preserve">
          <source>White Circle With Lower Left Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a596dbaa9fb2296442e407fd5b015383dac7bbf" translate="yes" xml:space="preserve">
          <source>White Circle With Lower Right Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672dc6b358ee6b861860cd20aec5494e0af288b8" translate="yes" xml:space="preserve">
          <source>White Circle With Two Dots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4da13b448e4c14ba5b609f9bb4745e9e5ca6e9" translate="yes" xml:space="preserve">
          <source>White Circle With Upper Left Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461fb2b1ea25d153f7a6aa34a5fd39118d45bba4" translate="yes" xml:space="preserve">
          <source>White Circle With Upper Right Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6115fcd670ee20901c40ff2b1b9797df7dfa006" translate="yes" xml:space="preserve">
          <source>White Club Suit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f952ed3ad8fab1cb62467e61cab89d2d1bc7c141" translate="yes" xml:space="preserve">
          <source>White Diamond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ff3a5814a60ca22f7334da0fe0a03866b29690" translate="yes" xml:space="preserve">
          <source>White Diamond Containing Black Small Diamond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ede27e8a98dcab5fa658af9ff95c8f2de052979" translate="yes" xml:space="preserve">
          <source>White Diamond Suit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25645a80840249c1631ced95a1131fd5693d26a2" translate="yes" xml:space="preserve">
          <source>White Down Pointing Backhand Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da143c67945743d6fa21635f9f5531063fb585f" translate="yes" xml:space="preserve">
          <source>White Down-Pointing Small Triangle / White Down Pointing Small Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85b319d306b744560c684c8558c3150f25c759e" translate="yes" xml:space="preserve">
          <source>White Down-Pointing Triangle / White Down Pointing Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b368a5d40031b023d531fc80971be08451a032" translate="yes" xml:space="preserve">
          <source>White Exclamation Mark Ornament</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d649860b97fdd765058196d5af9ef4b8dbb88c" translate="yes" xml:space="preserve">
          <source>White Flower</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94d39c1cd22b27b47b2f3f915dce302928d66ca" translate="yes" xml:space="preserve">
          <source>White Heart Suit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26de1b9a5e6c3681524ba9195b2307746d320518" translate="yes" xml:space="preserve">
          <source>White Heavy Check Mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613af43285ba7a0ae894f4cfb736239ef65a6154" translate="yes" xml:space="preserve">
          <source>White Hexagon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5e7d13cd121c85b4bb13208c84034861c7cb6e" translate="yes" xml:space="preserve">
          <source>White Horizontal Ellipse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d79e99747238a6e41f2d61025ecfbc894087c0" translate="yes" xml:space="preserve">
          <source>White Large Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51ee8c21e96d837babac571a1cd183c3ac42093" translate="yes" xml:space="preserve">
          <source>White Left Pointing Backhand Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680cc5a2c271605dbb7cd76466eaa1ee28fd3e83" translate="yes" xml:space="preserve">
          <source>White Left-Pointing Pointer / White Left Pointing Pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d97b16b2bf05311d60c6154fd15c292463d76a4" translate="yes" xml:space="preserve">
          <source>White Left-Pointing Small Triangle / White Left Pointing Small Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bd60620f1288519f88e1cee597586190d78f96" translate="yes" xml:space="preserve">
          <source>White Left-Pointing Triangle / White Left Pointing Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d0b3f0af3e38060d7de792c6bdcbb1eb5e3f10" translate="yes" xml:space="preserve">
          <source>White Medium Diamond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c3621af62bb9ea6bd08a5b8ee3da3a2fd40e3f" translate="yes" xml:space="preserve">
          <source>White Medium Lozenge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7abd8f6fe495417dc6ec52a0a1c7afa3e6f9dc" translate="yes" xml:space="preserve">
          <source>White Medium Small Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a893fa5318683cd059cb5ee66a5b426a43ead599" translate="yes" xml:space="preserve">
          <source>White Medium Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8fdba894c29225da318fd533696d2f839ae78e" translate="yes" xml:space="preserve">
          <source>White Medium Star</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f0f6d1e4fad29f296a0cc4fee17a4f4b0a35d5" translate="yes" xml:space="preserve">
          <source>White Parallelogram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac95a34ae3b4846ba7cad308897ae65184ceb6f9" translate="yes" xml:space="preserve">
          <source>White Pentagon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9907ea5b1099f4ea56141347654e577f39e45ef2" translate="yes" xml:space="preserve">
          <source>White Question Mark Ornament</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8532ae60e7384f04353f222ba8f658123bc5cb" translate="yes" xml:space="preserve">
          <source>White Rectangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc520b6f425ec21f629f8629e02c0432fdbb8d02" translate="yes" xml:space="preserve">
          <source>White Right Pointing Backhand Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727ea857bd3c329445166547fdb91d69eb72e260" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Pentagon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4a6513f3dbf938488f4c84a4ec11d06b65d445" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Pointer / White Right Pointing Pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef06644e488135d446e5fbd8a4b2af2b92f1fca" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Small Triangle / White Right Pointing Small Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5953087f00f8c08a0eba9649a19ee7ed4ccc61" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Triangle / White Right Pointing Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4652a549f479384e502bd957e68bce478919740b" translate="yes" xml:space="preserve">
          <source>White Small Lozenge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819c8924b69ae048832f9f245654a0f3675e7d7f" translate="yes" xml:space="preserve">
          <source>White Small Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edb5e7c110d675d95bbe00187a763284fceeb66" translate="yes" xml:space="preserve">
          <source>White Small Star</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e827fa8115af6a8ff7e8694006fdc84821193ae1" translate="yes" xml:space="preserve">
          <source>White Smiling Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7292a4d2f1ad67f38f858a5ba2aa2f931216208d" translate="yes" xml:space="preserve">
          <source>White Spade Suit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e6d72ac7d40e888c68f97f937db0275136d4bc" translate="yes" xml:space="preserve">
          <source>White Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0420eb950e967ab932dd0092a9e69b9e847452" translate="yes" xml:space="preserve">
          <source>White Square Button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c3968fd08318e52ffe077d152705799435b243" translate="yes" xml:space="preserve">
          <source>White Square Containing Black Small Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5619b6d53d6541754f6d6468f142e7fa76ad7d27" translate="yes" xml:space="preserve">
          <source>White Square With Lower Left Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808c9e191bf161e38926f5c5f29bd3081aeff48c" translate="yes" xml:space="preserve">
          <source>White Square With Lower Right Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4268bdeee136d632856d4e162626b19d1248aac4" translate="yes" xml:space="preserve">
          <source>White Square With Rounded Corners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fbf1e699577a2d0f954dab09953632de3c1094" translate="yes" xml:space="preserve">
          <source>White Square With Upper Left Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd849fbc18756c006103ba9e64207f6b3bdef64c" translate="yes" xml:space="preserve">
          <source>White Square With Upper Right Quadrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9cf58f29a3fe6d4f0832346429f7ff203c4dbe" translate="yes" xml:space="preserve">
          <source>White Square With Vertical Bisecting Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634d0a78d841ec0b40e03be702c56baf75674da8" translate="yes" xml:space="preserve">
          <source>White Star</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059206764751f0f85f8e29888baea1aba1f8ee13" translate="yes" xml:space="preserve">
          <source>White Sun With Rays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1224c9826c7ff52b9fa1a2c1f96b20f15f4f5a00" translate="yes" xml:space="preserve">
          <source>White Trapezium</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db4ec41a4066aee4d15a98eb10d2e169c42101a" translate="yes" xml:space="preserve">
          <source>White Triangle Containing Small White Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c000d04b8d0ed25a0985fd7cb107f60bb49aab" translate="yes" xml:space="preserve">
          <source>White Up Pointing Backhand Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0825f3e41b65ad4e04d89a05f1a919af7180270" translate="yes" xml:space="preserve">
          <source>White Up Pointing Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c739eac64ca9f680aa4858b15393910c507a241b" translate="yes" xml:space="preserve">
          <source>White Up-Pointing Small Triangle / White Up Pointing Small Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2fafe73198844e99d5803401863be888da05ec" translate="yes" xml:space="preserve">
          <source>White Up-Pointing Triangle / White Up Pointing Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b322ae097e5df051502f9578e5e4927b9661297e" translate="yes" xml:space="preserve">
          <source>White Up-Pointing Triangle With Dot / White Up Pointing Triangle With Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d24f6c4921190b94a3c24ff9acc8802c79083a" translate="yes" xml:space="preserve">
          <source>White Vertical Ellipse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e53c0193060ce68c08e8717dafe1ff48bba21f" translate="yes" xml:space="preserve">
          <source>White Vertical Rectangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a3ad9816239183ef5bd3d0d3228e167207e61a" translate="yes" xml:space="preserve">
          <source>White Very Small Square</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e1fe3853c28a0fe97ed3cd954b7712a00f380f" translate="yes" xml:space="preserve">
          <source>Why are my Julia benchmarks for linear algebra operations different from other languages?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbb029eb21510032c8af609c080a79c369b7dce" translate="yes" xml:space="preserve">
          <source>Why do concurrent writes to the same stream result in inter-mixed output?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4aae83fbf8014ab13afea081bebec6ec7f0b9d" translate="yes" xml:space="preserve">
          <source>Why does &lt;code&gt;x += y&lt;/code&gt; allocate memory when &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are arrays?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00096e7a6fdbbe783ffa3d87f87fff2daaa46322" translate="yes" xml:space="preserve">
          <source>Why does Julia give a &lt;code&gt;DomainError&lt;/code&gt; for certain seemingly-sensible operations?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e029a53e5754836ebc5f2accd6987b7ec664e47" translate="yes" xml:space="preserve">
          <source>Why does Julia use &lt;code&gt;*&lt;/code&gt; for string concatenation? Why not &lt;code&gt;+&lt;/code&gt; or something else?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e93bc1af1398ad92317ee65e0617d4980dd38e8" translate="yes" xml:space="preserve">
          <source>Why does Julia use native machine integer arithmetic?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e5203fdb2516ab2f5c1deafbcf63cb32540c19" translate="yes" xml:space="preserve">
          <source>Why round to the first day in July, even though it is month 7 (an odd number)? The key is that months are 1-indexed (the first month is assigned 1), unlike hours, minutes, seconds, and milliseconds (the first of which are assigned 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ea3ab16df0e58995a85e5e959893106086f0d6" translate="yes" xml:space="preserve">
          <source>Wind Chime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983f638e64348ade35b4611d310d66c9145e3880" translate="yes" xml:space="preserve">
          <source>Wine Glass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc7fe153bc9746ac855f60d74d0d8123c77b393" translate="yes" xml:space="preserve">
          <source>Winking Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581843091f10902932335f64cd6f3a2c9f96a3d3" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;s, serializing an already fetched &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; to a different node also sends the value since the original remote store may have collected the value by this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75533720d520fbee81b81c1ba5dc661047b34eea" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@macroexpand&lt;/code&gt; the expression expands where &lt;code&gt;@macroexpand&lt;/code&gt; appears in the code (module &lt;code&gt;M&lt;/code&gt; in the example). With &lt;code&gt;macroexpand&lt;/code&gt; the expression expands in the module given as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc21453b1fccd61e9c2a2caa2cd4c8a04c421020" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;batch_size&lt;/code&gt; defined, the mapping function needs to be changed to accept an array of argument tuples and return an array of results. &lt;code&gt;map&lt;/code&gt; is used in the modified mapping function to achieve this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6d6c8d7c2f6e5e8324e5783051c41a94f0d494" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;ntasks=2&lt;/code&gt; all elements are processed in 2 tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a8e1e2f0076f36b7212590a0b6a34603804f4e" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;waitfor&lt;/code&gt; value of 0, the call returns immediately with the workers scheduled for removal in a different task. The scheduled &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; object is returned. The user should call &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on the task before invoking any other parallel calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bded26b5569676e9053ab54c2f9e25c3c3e79857" translate="yes" xml:space="preserve">
          <source>With only &lt;a href=&quot;../../base/collections/index#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt; definition, the &lt;code&gt;Squares&lt;/code&gt; type is already pretty powerful. We can iterate over all the elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f7b875de446935bd4cc6f1a7d35fb26e7293e3" translate="yes" xml:space="preserve">
          <source>With such a declaration, it is acceptable to use any type that is a subtype of &lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;T&lt;/code&gt;, but not types that are not subtypes of &lt;code&gt;Real&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefc09d1374ace4b2cc6f62853ea9d51faf15a8a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;do&lt;/code&gt; block syntax, it helps to check the documentation or implementation to know how the arguments of the user function are initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503bb222a1bcd305845bfa8706594c057e11f9bc" translate="yes" xml:space="preserve">
          <source>With this declaration, &lt;code&gt;Pointy{T}&lt;/code&gt; is a distinct abstract type for each type or integer value of &lt;code&gt;T&lt;/code&gt;. As with parametric composite types, each such instance is a subtype of &lt;code&gt;Pointy&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a216c8e2bca2ef6b82975092df1fd3a30bc77dd" translate="yes" xml:space="preserve">
          <source>With this definition, the function can be called with either one, two or three arguments, and &lt;code&gt;1&lt;/code&gt; is automatically passed when any of the arguments is not specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f10b122d0ba4c967956b4a13f71e5b19ab4662e" translate="yes" xml:space="preserve">
          <source>With this syntax, iterables may still refer to outer loop variables; e.g. &lt;code&gt;for i = 1:n, j = 1:i&lt;/code&gt; is valid. However a &lt;code&gt;break&lt;/code&gt; statement inside such a loop exits the entire nest of loops, not just the inner one. Both variables (&lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;) are set to their current iteration values each time the inner loop runs. Therefore, assignments to &lt;code&gt;i&lt;/code&gt; will not be visible to subsequent iterations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974560762d7f9d8809deddf944b7bb6130508cf8" translate="yes" xml:space="preserve">
          <source>Without keyword arguments, &lt;code&gt;x&lt;/code&gt; is rounded to an integer value, returning a value of type &lt;code&gt;T&lt;/code&gt;, or of the same type of &lt;code&gt;x&lt;/code&gt; if no &lt;code&gt;T&lt;/code&gt; is provided. An &lt;a href=&quot;../base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; will be thrown if the value is not representable by &lt;code&gt;T&lt;/code&gt;, similar to &lt;a href=&quot;../base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa3290590d6a6eeac6efebb9b9654e8c0a3a248" translate="yes" xml:space="preserve">
          <source>Without parentheses, the expression &lt;code&gt;f&lt;/code&gt; refers to the function object, and can be passed around like any value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057c67438e0b378de20c837094077aeb4442b98f" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;break&lt;/code&gt; keyword, the above &lt;code&gt;while&lt;/code&gt; loop would never terminate on its own, and the &lt;code&gt;for&lt;/code&gt; loop would iterate up to 1000. These loops are both exited early by using &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a346da9a68b13b25a9f7cb2fd78eb7978ee0a04a" translate="yes" xml:space="preserve">
          <source>Wolf Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb72b9108626d8ac566eba64409dacf9a40b11e" translate="yes" xml:space="preserve">
          <source>Woman</source>
          <target state="translated">Woman</target>
        </trans-unit>
        <trans-unit id="6dfb7f3a8d49e9c60ed61f82d18ca8ac2838458c" translate="yes" xml:space="preserve">
          <source>Woman With Bunny Ears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6394d24a5279ce017885520fdb48ffc70f08d4" translate="yes" xml:space="preserve">
          <source>Womans Boots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4124fc5a81619b81859db6f91943ca5bb45e8e" translate="yes" xml:space="preserve">
          <source>Womans Clothes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5f716b57b265b131a17fffd163abf4c36c842b" translate="yes" xml:space="preserve">
          <source>Womans Hat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85aca00c09071a52aba584e53b36018f9b894c55" translate="yes" xml:space="preserve">
          <source>Womans Sandal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78031fbb7d05c9d0ff329bbff3f7a6447a90388" translate="yes" xml:space="preserve">
          <source>Womens Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ecdc70b504efbceec0cd8d34cea25e9063a812" translate="yes" xml:space="preserve">
          <source>Word Joiner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3edbbb14bf867b6bece4274440ffdbbeba538be" translate="yes" xml:space="preserve">
          <source>Word separation can be indicated by underscores (&lt;code&gt;'_'&lt;/code&gt;), but use of underscores is discouraged unless the name would be hard to read otherwise.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
