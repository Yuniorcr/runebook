<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="8571a832dfdafb3d90b012da01ec2eb030713161" translate="yes" xml:space="preserve">
          <source>For example, imagine we want to preload some data into the store when the application boots for the first time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c575bb413560b9c910aafe13e4ed30cf41d3bcbd" translate="yes" xml:space="preserve">
          <source>For example, imagine you have a &lt;code&gt;blog-post&lt;/code&gt; component that is used to display a blog post:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c3d6d6f6cd20fac18eb943b85e6bbabb8772c7" translate="yes" xml:space="preserve">
          <source>For example, imagine you have a comment form component that invokes a &lt;code&gt;submitComment&lt;/code&gt; action when the form is submitted, passing along the form's data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5fb5cb301dfd09a76e6b3ab24b6fdca6fc5ad9" translate="yes" xml:space="preserve">
          <source>For example, imagine your controller has a property that contains a URL to an image:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc289fd9ac809499aac8a2ac954840ac4dc5e73c" translate="yes" xml:space="preserve">
          <source>For example, in the attribute context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c47507dd4f2c091a9b598432a6dce2f5318193" translate="yes" xml:space="preserve">
          <source>For example, let's say you would like the ability to add a few numbers together, without needing to define a computed property everywhere you would like to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5404e506f85f30a0212f298d5150286a116a5c55" translate="yes" xml:space="preserve">
          <source>For example, perhaps you have some custom CSS animations trigger when the component is rendered and you want to handle some cleanup when it ends:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055eb926cb59cd107962bfdf2f176909570b3021" translate="yes" xml:space="preserve">
          <source>For example, say we want to move account deletion from the &lt;code&gt;user-profile&lt;/code&gt; component to its parent &lt;code&gt;system-preferences-editor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3aa5fb3b9e2e47d7403cf706a058c910c7facad" translate="yes" xml:space="preserve">
          <source>For example, take this router:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd2552612d116371909ab658c83d3703fce53b3" translate="yes" xml:space="preserve">
          <source>For example, the first time your application asks the store for a &lt;code&gt;person&lt;/code&gt; record with an ID of &lt;code&gt;1&lt;/code&gt;, it will fetch that information from your server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4787348e430964fae6265ba02c5cf7488e71cc" translate="yes" xml:space="preserve">
          <source>For example, the following template mounts the &lt;code&gt;ember-chat&lt;/code&gt; engine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d03a91e81318969094daca7d34b6bd64d9a2ee" translate="yes" xml:space="preserve">
          <source>For example, these two usages are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55d96c8de865779927bc570b7a3c5b4fae0dae0" translate="yes" xml:space="preserve">
          <source>For example, this &lt;code&gt;application.hbs&lt;/code&gt; template will render a first and last name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20aa59d0e915ae5dd07c0d9955c52ed849e682e9" translate="yes" xml:space="preserve">
          <source>For example, this allows you to render a miniture demo of your application into a specific area on your marketing website:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d83bd82561c502ee0f4b3542e5c5cbaf9687e61" translate="yes" xml:space="preserve">
          <source>For example, this component dynamically looks up a service based on the &lt;code&gt;audioType&lt;/code&gt; passed as an attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605eb7e4a825bdf1d4cbe53bb187bb6b230bfa42" translate="yes" xml:space="preserve">
          <source>For example, this component plays songs with different audio services based on a song's &lt;code&gt;audioType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eaafb79932d377872257d19be825835e78a804c" translate="yes" xml:space="preserve">
          <source>For example, this component will rerender when the &lt;code&gt;currentUser&lt;/code&gt; on a session service changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a7142ebded867aecac1c6cd5d3b74f09343bf1" translate="yes" xml:space="preserve">
          <source>For example, this template conditionally shows properties on &lt;code&gt;person&lt;/code&gt; only if that it is present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f018cc53fcc23c3d307fcab82307e69edf7b58e9" translate="yes" xml:space="preserve">
          <source>For example, this template iterates an array named &lt;code&gt;people&lt;/code&gt; that contains objects. Each item in the array is provided as the block param &lt;code&gt;person&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d105de0c23fe5232392e5213bdaf95b84dff874f" translate="yes" xml:space="preserve">
          <source>For example, to notify google analytics when the route changes, you could use this hook. (Note: requires also including GA scripts, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53fdd1e5fa921a7decdf09ca3b2c5d4bc78f174" translate="yes" xml:space="preserve">
          <source>For example, transitioning to the &lt;code&gt;photo&lt;/code&gt; route this way won't cause the &lt;code&gt;model&lt;/code&gt; hook to be executed (because &lt;code&gt;link-to&lt;/code&gt; was passed a model):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990c07eb16ce9b36a491b2e854ecc3b9aa105d86" translate="yes" xml:space="preserve">
          <source>For example, we could search for all &lt;code&gt;person&lt;/code&gt; models who have the name of &lt;code&gt;Peter&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47f3090b8178aff0771982fc7f5d315290733fb" translate="yes" xml:space="preserve">
          <source>For example, when a Handlebars template uses the &lt;code&gt;{{action}}&lt;/code&gt; helper, it will attempt to send the action to the view's controller's &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5843613115c1e4d767226c816dddc69a6f938075" translate="yes" xml:space="preserve">
          <source>For example, you could implement the action &lt;code&gt;hello&lt;/code&gt; for the &lt;code&gt;person-profile&lt;/code&gt; component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6888cfa6f75bf808b447c4e5833322abda82e8b" translate="yes" xml:space="preserve">
          <source>For example, your server may expect dasherized root objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9e84a2093cc32805d40970c4d9572340f1ea90" translate="yes" xml:space="preserve">
          <source>For example, your server may expect underscored root objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee1c2eb6b481f0f8bab8a68aca74861776344fc" translate="yes" xml:space="preserve">
          <source>For example, your server may send a model name that does not correspond with the name of the model in your app. Let's take a look at an example model, and an example payload:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bd6e289a5531e2d71f9f33d1cd06ac5dc9f6fd" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;{{#with foo.bar as |foo|}}&lt;/code&gt; is not supported because it attempts to alias using the first part of the property path, &lt;code&gt;foo&lt;/code&gt;. Instead, use &lt;code&gt;{{#with foo.bar as |baz|}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dd39d5bdf936f5049223bd83077f74e9d365d0" translate="yes" xml:space="preserve">
          <source>For more about adding computed properties to your classes, see &lt;a href=&quot;https://guides.emberjs.com/object-model/computed-properties&quot;&gt;Computed Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4637ca2142dd49c0ab6c1eb1068c89db2a1a67" translate="yes" xml:space="preserve">
          <source>For more detailed documentation and examples please see &lt;a href=&quot;https://emberjs.com/guides/routing/defining-your-routes/&quot;&gt;the guides&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29338faef17451bff40b98b69efc15788fd2eb88" translate="yes" xml:space="preserve">
          <source>For more hooks to customize the serializer with, see the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#index&quot;&gt;Ember Data serializer API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7282de866e5f853cd3e8ffbabd363e03c2f925f8" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://emberjs.com/api/classes/Ember.PromiseProxyMixin.html&quot;&gt;Ember.PromiseProxyMixin documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40732fcb4234a5619ce081b7798a0214549a58ea" translate="yes" xml:space="preserve">
          <source>For nested routes, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44bf8db76b49951c7eaac5a3fc9525e1133bec4" translate="yes" xml:space="preserve">
          <source>For our second test, we'll check that typing text in the filter will actually appropriately call the filter action and update the listings shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f2c08737c2821eeea5248eeeedc5d7eacaa951" translate="yes" xml:space="preserve">
          <source>For our service unit test, we'll want to verify that locations that have been previously loaded are fetched from cache, while new locations are created using the utility. We will isolate our tests from actually calling Google Maps by stubbing our map utility. On line 6 of &lt;code&gt;maps-test.js&lt;/code&gt; below we create an Ember object to simulate the behavior of the utility, but instead of creating a google map, we return an empty JavaScript object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf714fdce67954b18fdd874853ff99248025a2a" translate="yes" xml:space="preserve">
          <source>For primitive values (which are immutable in JavaScript), the passed object is simply returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238bd7c4be84902608f021126f24b30d5f4547e2" translate="yes" xml:space="preserve">
          <source>For relationships you probably only want to test that the relationship declarations are setup properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d84fd958637aa021fe65126c1c34b36d7f4d0f2" translate="yes" xml:space="preserve">
          <source>For requests that are only expected to return 0 or more records (e.g. &lt;code&gt;store.findAll('post')&lt;/code&gt; or &lt;code&gt;store.query('post', { filter: { status: 'draft' } })&lt;/code&gt;) the &lt;code&gt;JSONSerializer&lt;/code&gt; expects the response to be a JSON array that looks similar to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41c7713b198e325a57d5d23ef3c948b33c7b8c9" translate="yes" xml:space="preserve">
          <source>For requests that are only expected to return 1 record (e.g. &lt;code&gt;store.findRecord('post', 1)&lt;/code&gt;) the &lt;code&gt;JSONSerializer&lt;/code&gt; expects the response to be a JSON object that looks similar to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f44c4c78e3ccae3e3feba77d0d41b2ad2d7ffb4" translate="yes" xml:space="preserve">
          <source>For symmetry, a record can be deleted via the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbdae64a2126571b205dad151b3be5b622ef748" translate="yes" xml:space="preserve">
          <source>For symmetry, a record can be unloaded via the store. This will cause the record to be destroyed and freed up for garbage collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8698c13171823902968377bdef2ca89e548f138" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;post&lt;/code&gt; route, a controller named &lt;code&gt;App.PostController&lt;/code&gt; would be used if it is defined. If it is not defined, a basic &lt;code&gt;Ember.Controller&lt;/code&gt; instance would be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab03ec3bece1d637423015b51ead16b564c68acd" translate="yes" xml:space="preserve">
          <source>For the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b1317ee0dff26c47faa19e99ec8ae432650704" translate="yes" xml:space="preserve">
          <source>For the remainder of this page, we'll give you an introduction to testing in Ember and get you set up to add tests as we implement pieces of our app. On subsequent tutorial pages, the final sections of each page will be devoted to adding a test for the feature you just implemented. These sections aren't required for a working application and you may move on with the tutorial without writing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d86d60539134a54d0f678225fc9d2a578113d6" translate="yes" xml:space="preserve">
          <source>For the test we'll pass the component a fake object that has all the properties that our rental model has. We'll give the variable the name &lt;code&gt;rental&lt;/code&gt;, and in each test we'll set &lt;code&gt;rental&lt;/code&gt; to our local scope, represented by the &lt;code&gt;this&lt;/code&gt; object. The render template can access values in local scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11208c35bf587ec4a12ccbc8ab430fb048e0e38b" translate="yes" xml:space="preserve">
          <source>For the truly ambitious developer, setting &lt;code&gt;ENV.EmberENV.ENABLE_ALL_FEATURES&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will enable all experimental features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d414cc56d356af2b222b476ee0fb256f69c5e10" translate="yes" xml:space="preserve">
          <source>For this action to work, we need to replace our Mirage &lt;code&gt;config.js&lt;/code&gt; file with the following, so that it can respond to our queries. Instead of simply returning the list of rentals, our Mirage HTTP GET handler for &lt;code&gt;rentals&lt;/code&gt; will return rentals matching the string provided in the URL query parameter called &lt;code&gt;city&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805d2264ad28af999150c7ca8f54eca24ffa5d31" translate="yes" xml:space="preserve">
          <source>For this model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e121592f2766d340c24b47ea2f5774c152f53cca" translate="yes" xml:space="preserve">
          <source>Form events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdc3deed2a7f6cc9c38d5a1cab4a58fed801b5f" translate="yes" xml:space="preserve">
          <source>Formats the passed string, but first looks up the string in the localized strings hash. This is a convenient way to localize text. See &lt;code&gt;Ember.String.fmt()&lt;/code&gt; for more information on formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29aee65fd752807a4efafa236faf97668e75caee" translate="yes" xml:space="preserve">
          <source>Formatting Component Attributes with &lt;code&gt;didReceiveAttrs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d747cf39d36a21f5bf79d91fa7a95f35c01a1a50" translate="yes" xml:space="preserve">
          <source>Fortunately, Ember provides a way for projects to deal with deprecations in an organized and efficient manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445366cfc965ea1eefc0253eafebbc45d43ad9bd" translate="yes" xml:space="preserve">
          <source>Found item or `undefined`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1845de0d37b6bb99f3f645167ac00024bf5cd983" translate="yes" xml:space="preserve">
          <source>Framework objects in an Ember application (components, services, routes, etc.) are created via a factory and dependency injection system. Each of these objects is the responsibility of an &quot;owner&quot;, which handled its instantiation and manages its lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e49ef141f281830f6ce959ad0f2b4d73e1cade" translate="yes" xml:space="preserve">
          <source>Frameworks (or apps built on those frameworks) don't need to write lots of custom code to add support for a new database; as long as that database supports SQL, adding support for it is relatively easy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93277273c2d468b90135b3055cba26e77e16d75" translate="yes" xml:space="preserve">
          <source>From here you can move on to the &lt;a href=&quot;../model-hook&quot;&gt;next page&lt;/a&gt; or dive into testing the new functionality we just added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="c171828ba33200e5da444a3585c4abe04f275224" translate="yes" xml:space="preserve">
          <source>Function.on()</source>
          <target state="translated">Function.on()</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="7f327caeccd97a403dd1611a7c63975063bda543" translate="yes" xml:space="preserve">
          <source>Function|String</source>
          <target state="translated">Function|String</target>
        </trans-unit>
        <trans-unit id="baa570f3e6ae8f1812a881f7231e27d8c648f32a" translate="yes" xml:space="preserve">
          <source>Furthermore, these sticky query param values are remembered/restored according to the model loaded into the route. So, given a &lt;code&gt;team&lt;/code&gt; route with dynamic segment &lt;code&gt;/:team_name&lt;/code&gt; and controller query param &quot;filter&quot;, if you navigate to &lt;code&gt;/badgers&lt;/code&gt; and filter by &lt;code&gt;&quot;rookies&quot;&lt;/code&gt;, then navigate to &lt;code&gt;/bears&lt;/code&gt; and filter by &lt;code&gt;&quot;best&quot;&lt;/code&gt;, and then navigate to &lt;code&gt;/potatoes&lt;/code&gt; and filter by &lt;code&gt;&quot;worst&quot;&lt;/code&gt;, then given the following nav bar links:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f030bbbd32966cde41037b98a8849c46b76e4bc1" translate="yes" xml:space="preserve">
          <source>GET</source>
          <target state="translated">GET</target>
        </trans-unit>
        <trans-unit id="33da7677e2d56059c92e30d9b6be9e4b6b73f6c0" translate="yes" xml:space="preserve">
          <source>Generate a URL based on the supplied route name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09345bf2216d01aba14af93487fbeccd2903c9b" translate="yes" xml:space="preserve">
          <source>Generate a controller for the &lt;code&gt;rentals&lt;/code&gt; route by running the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8dce6fb6cede76539314f90bc59a5c80135a499" translate="yes" xml:space="preserve">
          <source>Generate the map component using Ember CLI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aea205a47266be8c495348ad0f9c73741f98201" translate="yes" xml:space="preserve">
          <source>Generating a Nested Detail Route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d43d2f2ee9b4bb4f9bcf0d5b2a41df9def6363a" translate="yes" xml:space="preserve">
          <source>Generating a Nested Index Route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9760cc894e686d61f7fec03c4e44d1b80af4b48c" translate="yes" xml:space="preserve">
          <source>Generators to help create components, routes, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70aec302e339fa13f3554c23e3ef7e1931b84ea4" translate="yes" xml:space="preserve">
          <source>Geolocation.</source>
          <target state="translated">Geolocation.</target>
        </trans-unit>
        <trans-unit id="26405aeae26ce9287363b843e9d7c68ace255d6e" translate="yes" xml:space="preserve">
          <source>Get a record by a given type and ID without triggering a fetch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b44ba5398b64d9f08dc1913faba7571d1550c6" translate="yes" xml:space="preserve">
          <source>Get the HTTP method for a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5003481ec84564c8683a4ad02a9203d02e4eac74" translate="yes" xml:space="preserve">
          <source>Get the URL for a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830f1ea06d329a4ac6a3756016f9898516fc9ca9" translate="yes" xml:space="preserve">
          <source>Get the data (body or query params) for a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e901f6ea92c6f40580f56bfddd989c4ea2a838" translate="yes" xml:space="preserve">
          <source>Get the headers for a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3f518cc219dc8f15775cecb4e1626d19a66ad7" translate="yes" xml:space="preserve">
          <source>Get the reference for the specified belongsTo relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb73064448953de9ae0204965dea3b9d6a169dbe" translate="yes" xml:space="preserve">
          <source>Get the reference for the specified hasMany relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98502f7f02fe62e117df0ed62a5e923a6bb3c37" translate="yes" xml:space="preserve">
          <source>Get the reference for the specified record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dbe0f3342deafc2ab56de8db0b18a3d3aa8466" translate="yes" xml:space="preserve">
          <source>Gets the value of a property on an object. If the property is computed, the function will be invoked. If the property is not defined but the object implements the &lt;code&gt;unknownProperty&lt;/code&gt; method then that will be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0e079040a74584fda30a64b2e0355a622a9581" translate="yes" xml:space="preserve">
          <source>Getting an Application Instance from a Factory Instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539a29762302f74206cdfdac8a74b914ea48b56e" translate="yes" xml:space="preserve">
          <source>Getting started with Ember is easy. Ember projects are created and managed through our command line build tool Ember CLI. This tool provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5819778898df55e3a762f0c5728b457970d72cae" translate="yes" xml:space="preserve">
          <source>Git</source>
          <target state="translated">Git</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="4e5f6a0536d05d128a6d128d52648145b148c9ad" translate="yes" xml:space="preserve">
          <source>Given a &lt;code&gt;TacoParty&lt;/code&gt; model, calling &lt;code&gt;save&lt;/code&gt; on it would produce an outgoing request like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b798b22a36a8fb7d259e78c87e14188011223c0" translate="yes" xml:space="preserve">
          <source>Given a callback, iterates over each of the relationships in the model, invoking the callback with the name of each relationship and its relationship descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0568745c680da8312437a23e1c44462bee329e1" translate="yes" xml:space="preserve">
          <source>Given a callback, iterates over each of the types related to a model, invoking the callback with the related type's class. Each type will be returned just once, regardless of how many different relationships it has with a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e5f9e1f8152169694773a02abf35185d808804" translate="yes" xml:space="preserve">
          <source>Given a fullName return a corresponding instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f13fbc6cdf339f2d25e87142ea0a90a53658a0b" translate="yes" xml:space="preserve">
          <source>Given a fullName return a factory manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d74c6bdfabf001cba8ff91688da5fa40622684" translate="yes" xml:space="preserve">
          <source>Given a fullName return the corresponding factory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be37d698977b216fa3468816c77b29a601a1557" translate="yes" xml:space="preserve">
          <source>Given an input array like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ddb97291956d6a93caa6fd9afa6398920b6cce" translate="yes" xml:space="preserve">
          <source>Given that the server returns the following JSON payload when fetching a hasMany relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5327a59c0f2fd5c93a18b32cdc17ca3fe95c50bb" translate="yes" xml:space="preserve">
          <source>Given the above template, you can now use the &lt;code&gt;{{blog-post}}&lt;/code&gt; component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25dc77ecf9ac2c548f7fdca3ea0008c74ec5b8e" translate="yes" xml:space="preserve">
          <source>Given the following router, entering &lt;code&gt;/posts/new&lt;/code&gt; will take you to the &lt;code&gt;posts.new&lt;/code&gt; route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb4407f4e9773be51e3832417af1b5ed6ee6fba" translate="yes" xml:space="preserve">
          <source>Given the following template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92f1eef48b7f6e018af6fa6c86f0f289cf85ab1" translate="yes" xml:space="preserve">
          <source>Global helper method to create a new binding. Just pass the root object along with a &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; path to create and connect the binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9475c240051332f46be27d81c5999df956eee70c" translate="yes" xml:space="preserve">
          <source>Globals provided by JavaScript assets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e3e6de22c62882fc935f5fd0ca300105fa5b62" translate="yes" xml:space="preserve">
          <source>Go back to your browser and you should see that the UI looks identical. The only difference is that now we've componentized our list into a version that's more reusable and more maintainable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16ced98283c68cb88a0172784f9bb24fc274245" translate="yes" xml:space="preserve">
          <source>Good Ember apps take a different approach. Ember Data gives you a single &lt;strong&gt;store&lt;/strong&gt; that is the central repository of models in your application. Components and routes can ask the store for models, and the store is responsible for knowing how to fetch them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e30d6aac813417d581bd798bb4422107881ac34" translate="yes" xml:space="preserve">
          <source>Good luck!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bf9c3593354b28043e84f76fcab48400ba8060" translate="yes" xml:space="preserve">
          <source>Google Chrome</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e742dfcf2f4ce5f328b8cb4f2912e33ce6046b2e" translate="yes" xml:space="preserve">
          <source>Google Maps requires an API key for deployment. You can &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/get-api-key&quot;&gt;Generate an API key&lt;/a&gt; from Google. Add your new API key to the application by stopping the server and restarting it with the environment variable, &lt;code&gt;GOOGLE_MAPS_API_KEY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd25f4b6fdcd6e03dc556534e357e8e671589f8" translate="yes" xml:space="preserve">
          <source>Guide: Addons and Dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f75403a8d2f86bf1a47d458f6f3817c59f2864" translate="yes" xml:space="preserve">
          <source>Guide: Application Concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0feedc00015452b1f83e2f3873bd2b3a5af991a" translate="yes" xml:space="preserve">
          <source>Guide: Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96ef24505a7db97162ac7b561593565080a3626" translate="yes" xml:space="preserve">
          <source>Guide: Configuring Ember.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f62ffc557f46990ee7fcd9b7e51f2a23ee27a8" translate="yes" xml:space="preserve">
          <source>Guide: Controllers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddef1ff843bc54027e2243e9513e6e816fb3321" translate="yes" xml:space="preserve">
          <source>Guide: Ember Inspector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da421341aba116761a4e1a0403a540126e7cb1e1" translate="yes" xml:space="preserve">
          <source>Guide: Getting Started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bfb948c23fb0630e099092d078b3655e25dded" translate="yes" xml:space="preserve">
          <source>Guide: Glossary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4caef054558dea4828946f280fd702f043ba94e6" translate="yes" xml:space="preserve">
          <source>Guide: Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28eed94d41629db6069db8363174c2239ae1d7" translate="yes" xml:space="preserve">
          <source>Guide: Routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58349b97443d511f52d2bca7dd9698096bb28e42" translate="yes" xml:space="preserve">
          <source>Guide: Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368e90216820cf9a93720780467aab950c2190ca" translate="yes" xml:space="preserve">
          <source>Guide: Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d278bbd5928261f752ed2d1221bf15d4d0d64a" translate="yes" xml:space="preserve">
          <source>Guide: The Object Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2c2ebdd60572423288c669f8e6a4bab450c3df" translate="yes" xml:space="preserve">
          <source>Guide: Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3a02ba5cc11b1ef4f57a4806126987b263c34a" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;class&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83fb96d107f191cb169da811d2b409263026eb9" translate="yes" xml:space="preserve">
          <source>HTML Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad7e678705b81df6846d0e3a88587ec82599320" translate="yes" xml:space="preserve">
          <source>HTML Tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7445b81a7a0fb74e83a81664fe6a469c3b93aff4" translate="yes" xml:space="preserve">
          <source>HTML string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e956ef129c977940c566953aec6bb729dc3305f0" translate="yes" xml:space="preserve">
          <source>HTML5 drag and drop events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b878b29c2ffa01cb115881261f1f471b6419fa0" translate="yes" xml:space="preserve">
          <source>HTMLBars</source>
          <target state="translated">HTMLBars</target>
        </trans-unit>
        <trans-unit id="9e7e8330c132a4390643d48e5b3602a028852f31" translate="yes" xml:space="preserve">
          <source>HTTP Verb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337ba610aa0d207b04a3d0c4fbe59b410042c4cf" translate="yes" xml:space="preserve">
          <source>HTTP method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788e5d8b02313cc4b57601465d18921374311fda" translate="yes" xml:space="preserve">
          <source>Handlebars Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb473803f02ab69ee9053ae70c5dcbb1448a770c" translate="yes" xml:space="preserve">
          <source>Handlebars and Ember come with a few helpers that can make developing your templates a bit easier. These helpers make it simple to output variables into your browser's console, or activate the debugger from your templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7153b5006d4c97a18ab1d0caa6bfd914338849f" translate="yes" xml:space="preserve">
          <source>Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51381d9d7d2e1d4b1028d495dd3200304f3c0250" translate="yes" xml:space="preserve">
          <source>Handlebars templates will automatically be updated to reflect a resolved promise. We can display a list of comments in a blogPost like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de07df966c34bdd8ca33d1de21c8a776d6dbcd5a" translate="yes" xml:space="preserve">
          <source>Handlebars.SafeString</source>
          <target state="translated">Handlebars.SafeString</target>
        </trans-unit>
        <trans-unit id="6fd0acd61cec737cb2c75447423e9a7f24a6781b" translate="yes" xml:space="preserve">
          <source>Handles notifying any listeners of an impending URL change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed55e0e23b34deed5eb2b523c7da39ea70b0f4e0" translate="yes" xml:space="preserve">
          <source>Handles updating the paths and notifying any listeners of the URL change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e126f0a342fbcd3b3afcdffb356987d85bb9f2d3" translate="yes" xml:space="preserve">
          <source>Handling &lt;code&gt;href&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35428fcfaeb2541bb767a71a58c264899e7d2d9a" translate="yes" xml:space="preserve">
          <source>Handling Action Completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fe0bdbe4011b8624ccd6fa38bb3b6eff381dd5" translate="yes" xml:space="preserve">
          <source>Handling Deprecations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d425f7e27fe0f057871c46f4c72c4a3bd2b0f136" translate="yes" xml:space="preserve">
          <source>Handling Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e918401587af3e65eda8234d3e59f421428130d3" translate="yes" xml:space="preserve">
          <source>Handling Metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db937a958b87280f3d6fc18c715cb6254451f8d1" translate="yes" xml:space="preserve">
          <source>Handling Results Coming Back at Different Times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffd58d57d6bbb28a92f1c026aa165182c6fb42b" translate="yes" xml:space="preserve">
          <source>Handling Validation Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aced29647a5cf1540ee7e3807350fee6fd052495" translate="yes" xml:space="preserve">
          <source>Handling current route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e35481745a45cde55c44963a7e362bab3f1b408" translate="yes" xml:space="preserve">
          <source>HasManyReference</source>
          <target state="translated">HasManyReference</target>
        </trans-unit>
        <trans-unit id="873507a022b58de26a88deae87268cbd8d6af5b1" translate="yes" xml:space="preserve">
          <source>Hash</source>
          <target state="translated">Hash</target>
        </trans-unit>
        <trans-unit id="807079595ea5a799de6277c046782afa4e0e5102" translate="yes" xml:space="preserve">
          <source>HashLocation</source>
          <target state="translated">HashLocation</target>
        </trans-unit>
        <trans-unit id="add4322e33633cc4c3ee7eb1c8f2f41576ddbb91" translate="yes" xml:space="preserve">
          <source>Hashes are useful for configuring the behavior of a helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a899d251b5416098f876e50cf427a0d4a1837a0b" translate="yes" xml:space="preserve">
          <source>Having a parent route means that any content on our parent route template will be present as we browse down through our child routes, allowing us to add things like common instructions, navigation, footers or sidebars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c42302b3ce38d5dac262a7158e03cdf2072de98" translate="yes" xml:space="preserve">
          <source>Headers customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7eebdb08c9dbf27c7668e2badd51e667707d3c" translate="yes" xml:space="preserve">
          <source>Helper</source>
          <target state="translated">Helper</target>
        </trans-unit>
        <trans-unit id="71bfa60b06c751b549dfa608bed89dce9177c4af" translate="yes" xml:space="preserve">
          <source>Helper Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681268974b5ee9db6f5333c725d86800c64141d2" translate="yes" xml:space="preserve">
          <source>Helper Names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e6ec9b9d847d9ac55a685deddc479fa9005991" translate="yes" xml:space="preserve">
          <source>Helper method returns the first object from a collection. This is usually used by bindings and other parts of the framework to extract a single object if the enumerable contains only one item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb868523634137d3ac0cbf44265217f711b041b1" translate="yes" xml:space="preserve">
          <source>Helper method returns the last object from a collection. If your enumerable contains only one object, this method should always return that object. If your enumerable is empty, this method should return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="78e00ba58068b9405dc568b23c42190de2bc9e3b" translate="yes" xml:space="preserve">
          <source>Helpers allow you to add additional functionality to your templates beyond what is included out-of-the-box in Ember. Helpers are most useful for transforming raw values from models and components into a format more appropriate for your users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a801d726cc532008f284d2cd1f598ed7311f982" translate="yes" xml:space="preserve">
          <source>Helpers allow you to pass named arguments as a JavaScript object that contains the name of the argument along with an associated value. The order in which named arguments are supplied does not affect functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f9e2aad73a812a6000b56670fb0385cd164262" translate="yes" xml:space="preserve">
          <source>Helpers are best tested with integration tests, but can also be tested with unit tests. Integration tests will provide better coverage for helpers, as it more closely simulates the lifecycle of a helper than in isolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2546987b068c41d7af6e28e45ccd184017ca756d" translate="yes" xml:space="preserve">
          <source>Helpers defined using a class must provide a &lt;code&gt;compute&lt;/code&gt; function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd57ecb503d3b97e09bb660378d70958f39e6eb" translate="yes" xml:space="preserve">
          <source>Helpers have the ability to be nested within other helper invocations and also component invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d64553bfc8432fab751a4437cf2e382597f6b0" translate="yes" xml:space="preserve">
          <source>Here again, we add a new &lt;code&gt;contact&lt;/code&gt; route in &lt;code&gt;app/router.js&lt;/code&gt; and generate a route handler in &lt;code&gt;app/routes/contact.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80c37e1626d9dfdf25d6d961fc9b1d903b1a303" translate="yes" xml:space="preserve">
          <source>Here an entire blog post model is being passed to the component as a single component property. In turn the component is returning values using &lt;code&gt;yield&lt;/code&gt;. In this case the yielded values are pulled from the post being passed in but anything that the component has access to can be yielded, such as an internal property or something from a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008f036db3fb0cae3e9c11478058cd0a7d0d43be" translate="yes" xml:space="preserve">
          <source>Here are the events that we currently support along with the name of the attribute you would need to use on your field. To reiterate, you would use the attribute name like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6702b2f9fb8ccafe588f2c9571b453ded3ed4228" translate="yes" xml:space="preserve">
          <source>Here is a list of standard JavaScript array methods and their observable enumerable equivalents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bb273def215460ace633d7315e6d9597d254f5" translate="yes" xml:space="preserve">
          <source>Here is a simple transform that converts values between cents and US dollars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c39ffadbd1a469d166a296b81aeb5eada867cd" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;findRecord&lt;/code&gt; implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a53bea5f121f389ec9dba89881d0bc84a3a5fa" translate="yes" xml:space="preserve">
          <source>Here is an example &lt;code&gt;queryRecord&lt;/code&gt; implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be91e0dc88a4bda0f73b7f173d35790d6c237d7d" translate="yes" xml:space="preserve">
          <source>Here is an example action handler on a component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d420fadedcd0d67addde722215d59163c4e4f6" translate="yes" xml:space="preserve">
          <source>Here is an example of a non-async helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686f6fbbf2125c61344e0f99406ce1d0e5f15a34" translate="yes" xml:space="preserve">
          <source>Here is an example of an async helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8686a53fa2e824c426efc545f221972fb2b38018" translate="yes" xml:space="preserve">
          <source>Here is an example of an error handler that will be invoked for rejected promises from the various hooks on the route, as well as any unhandled errors from child routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13beb07fe62835dc25ff3d895ade35ee7595dcff" translate="yes" xml:space="preserve">
          <source>Here is an example of how to unit test this route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5879971a17632c4e9f37c545833d4a067091f958" translate="yes" xml:space="preserve">
          <source>Here is some pseudocode to describe what happens using the example above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed3d154fad32f4d423b0c0d3164c195269919b1" translate="yes" xml:space="preserve">
          <source>Here is some sample code showing the difference between a concatenated property and a normal one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3620fe1abe778a42dfcc17b3f36dff9bfca5419e" translate="yes" xml:space="preserve">
          <source>Here is some sample code showing the difference between a merged property and a normal one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45023c930fcd24340408ccf1517bca11439c457" translate="yes" xml:space="preserve">
          <source>Here is what the component's JavaScript looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad3fb8e396627deaa121cc5057168aff890dc20" translate="yes" xml:space="preserve">
          <source>Here we have a controller &lt;code&gt;PostsController&lt;/code&gt; with two properties, a method that sets one of those properties, and an action named &lt;code&gt;setProps&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e597c0cced43ed0a6b16a465f107efbf22c3f75" translate="yes" xml:space="preserve">
          <source>Here we invoke the &lt;code&gt;rental-listing&lt;/code&gt; component by name, and assign each &lt;code&gt;rentalUnit&lt;/code&gt; as the &lt;code&gt;rental&lt;/code&gt; attribute of the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9caae2e536d1046a13cf1b8d768d567a6c234d2f" translate="yes" xml:space="preserve">
          <source>Here's a brief video showcasing some of the features of the Inspector:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef2f0eed2f1b6edb8828e11c89de4e0f5c2426a" translate="yes" xml:space="preserve">
          <source>Here's a look at what we want to build before we get started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfdc0e5e4fe034cdd75ba1c747add61cac51e56" translate="yes" xml:space="preserve">
          <source>Here's an example implementation of a state with a &lt;code&gt;myEvent&lt;/code&gt; event handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cda9d7f3e4792a7596d3c5f4460451291e07c0" translate="yes" xml:space="preserve">
          <source>Here's an example of a deprecation-workflow file after generated from the console:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c3ae73e6d479a2f3faadf75e44b4d5664f0b07" translate="yes" xml:space="preserve">
          <source>Here's an example of a one-to-many reflexive relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18541d730bc8ba428e8836f2ea7fff7a47a480ac" translate="yes" xml:space="preserve">
          <source>Here's an example of a one-to-one reflexive relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe022dd3c8c09a191db4256dd032f9e60a052aa" translate="yes" xml:space="preserve">
          <source>Here's an example of using &lt;code&gt;normalizeResponse&lt;/code&gt; manually:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa6d2e7f30e926a749727b799f37d96e4c8f45c" translate="yes" xml:space="preserve">
          <source>Here's an example test that asserts that the specified &lt;code&gt;externalAction&lt;/code&gt; function is invoked when the component's internal &lt;code&gt;submitComment&lt;/code&gt; action is triggered by making use of a test double (dummy function):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3c92750905535a8ced5339645aeccc22beef47" translate="yes" xml:space="preserve">
          <source>Here's how we could do it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9615c02fedaa57b6187cbb2b8f2144552cba8d3" translate="yes" xml:space="preserve">
          <source>Here's how you can change the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b00dbf8b666cbb27fe6befc5e345eb2e873b89c" translate="yes" xml:space="preserve">
          <source>Here's one way this situation could be handled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794332affe3f2c69b3cdf8b6c3a9d8846f9963d6" translate="yes" xml:space="preserve">
          <source>Here's what our homepage will look like when we're done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27d989f8488534b53f59313b389527af62def71" translate="yes" xml:space="preserve">
          <source>Here's what you see when you click on an object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8174a66dd06a7a63d269b775afb5d9235bb327c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;indexOfSelectedTodo&lt;/code&gt; depends on &lt;code&gt;todos.[]&lt;/code&gt;, so it will update if we add an item to &lt;code&gt;todos&lt;/code&gt;, but won't update if the value of &lt;code&gt;isDone&lt;/code&gt; on a &lt;code&gt;todo&lt;/code&gt; changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49deac1d23b55006a636313fe25b23b637aa3f8" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;{{name}}&lt;/code&gt; is a property provided by the template's context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8964d266349afede44d73cd11b38a64be8aba59" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;posts&lt;/code&gt; route will render the &lt;code&gt;posts.hbs&lt;/code&gt; template, and the &lt;code&gt;posts.new&lt;/code&gt; route will render &lt;code&gt;posts/new.hbs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806448e95a581d9c19ab7981874c395b2aaff922" translate="yes" xml:space="preserve">
          <source>Here, the dependent key &lt;code&gt;todos.@each.isDone&lt;/code&gt; instructs Ember.js to update bindings and fire observers when any of the following events occurs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada909ad48df856a56133217fc9f26b5bf45283e" translate="yes" xml:space="preserve">
          <source>Here, we use the &lt;code&gt;each&lt;/code&gt; helper to loop over each item in the array we provided from the &lt;code&gt;model()&lt;/code&gt; hook and print it inside an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89969f1434459d674a60b551b74c2594a3242b7" translate="yes" xml:space="preserve">
          <source>Hiding and Showing an Image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45f34dc307db2bdccec0e73ce3a002073c87c35" translate="yes" xml:space="preserve">
          <source>Highlighting Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2890ed8a01ab8a5f7eaabed4e6f1f28297e928b9" translate="yes" xml:space="preserve">
          <source>HistoryLocation</source>
          <target state="translated">HistoryLocation</target>
        </trans-unit>
        <trans-unit id="60d94912208f7c9156f132fcb4e8058655d1449a" translate="yes" xml:space="preserve">
          <source>Holds validation errors for a given record, organized by attribute names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1f6d929f0c543c40d9dc35ab82269d6a509c75" translate="yes" xml:space="preserve">
          <source>Host Customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c27d67c8e38ea6553bbf5e707038fae7466f06b" translate="yes" xml:space="preserve">
          <source>Host customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094df3847851b3b714fd95e0966758c4866dd24a" translate="yes" xml:space="preserve">
          <source>Hovering over the View Tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a23a6216420fd629b1ded01ab720e204d2d034" translate="yes" xml:space="preserve">
          <source>Hovering over the app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf8dbbbcf1364bfa6370f1e5d31aa72c1cc0a73" translate="yes" xml:space="preserve">
          <source>How Resolving Works</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0003a88755810c077e587316c813346910b07f28" translate="yes" xml:space="preserve">
          <source>How do I tell Ember to start a run loop?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10777937caad60c563d415c46eec180adf40348" translate="yes" xml:space="preserve">
          <source>How does the Run Loop work in Ember?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5279944a62d1f1a4d8f7176082e4fb0246e1db2" translate="yes" xml:space="preserve">
          <source>How is run loop behaviour different when testing?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9e67d1769ba9adb0a83151913ed216fae028b3" translate="yes" xml:space="preserve">
          <source>How the reference will be looked up when it is loaded: Currently this always return &lt;code&gt;identity&lt;/code&gt; to signifying that a record will be loaded by the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca575ef86a83eee06aa1334c084ffde8ee812279" translate="yes" xml:space="preserve">
          <source>How to Run Your Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98299d20f2adf4f26f21bc7e4b72cd98804f116c" translate="yes" xml:space="preserve">
          <source>However the expression &lt;code&gt;(action &quot;sendMessage&quot; &quot;info&quot;)&lt;/code&gt; used in passing the action to the component creates a closure, i.e. an object that binds the parameter we've provided to the function specified. So now when the action is invoked, that parameter will automatically be passed as its argument, effectively calling &lt;code&gt;sendMessage(&quot;info&quot;)&lt;/code&gt;, despite the argument not appearing in the calling code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b51cbd69be6d59ffbee8304349c13356944a6f" translate="yes" xml:space="preserve">
          <source>However, if the setup requires a loading UI, it might be better to use the router for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb706f0017ef6a6ee10e8c807ecc0d5e6e035aa" translate="yes" xml:space="preserve">
          <source>However, if we display dollar values to our users as &quot;100&amp;cent;&quot; instead of &quot;$1.00&quot;, they may be very confused. We can write a helper to format these values into the appropriate human-readable form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d044aa856a235cd31e89c6e4b2c163b621c247" translate="yes" xml:space="preserve">
          <source>However, if we have the run loop in the above code, the browser will only rerender the template once the attributes have all been set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7686ce93d07304398a3e888f9439ed0f71345e1" translate="yes" xml:space="preserve">
          <source>However, if you need all success parameters, setting &lt;code&gt;denodeify&lt;/code&gt;'s second parameter to &lt;code&gt;true&lt;/code&gt; causes it to return all success parameters as an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d67cac16aca783c25ab7800a8d2e3f4d5d01c3" translate="yes" xml:space="preserve">
          <source>However, note that in the above code we may have inadvertently introduced an XSS vulnerability into our application! By blindly marking the string as safe, a malicious user could get their own HTML into our app, allowing them to do things like access sensitive customer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c1e2bb08174ae586c47814ff43d53ce4c73537" translate="yes" xml:space="preserve">
          <source>However, sometimes you may have multiple &lt;code&gt;belongsTo&lt;/code&gt;/&lt;code&gt;hasMany&lt;/code&gt; for the same type. You can specify which property on the related model is the inverse using &lt;code&gt;DS.hasMany&lt;/code&gt;'s &lt;code&gt;inverse&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b4256fdaad84d9298f4a98df3d357015a24bcb" translate="yes" xml:space="preserve">
          <source>However, sometimes you may have multiple &lt;code&gt;belongsTo&lt;/code&gt;/&lt;code&gt;hasMany&lt;/code&gt;s for the same type. You can specify which property on the related model is the inverse using &lt;code&gt;DS.belongsTo&lt;/code&gt; or &lt;code&gt;DS.hasMany&lt;/code&gt;'s &lt;code&gt;inverse&lt;/code&gt; option. Relationships without an inverse can be indicated as such by including &lt;code&gt;{ inverse: null }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfbeaf9c675ae38bf9e1a3d66352c14e80f4905" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;JSONAPISerializer&lt;/code&gt; expects attributes to be dasherized in the document payload returned by your server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9bcaadfbea05d9b00de2f97e0b15a2c27f5e66" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;button-with-confirmation&lt;/code&gt; component invoking the action doesn't know or care what type of message it's collecting. In cases like this, the parent template can provide the required parameter when the action is passed to the child. For example, if we want to use the button to send a message of type &lt;code&gt;&quot;info&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ef0142aa8edc1e0761b6c37f3f364c3ef18a21" translate="yes" xml:space="preserve">
          <source>However, the next time your app asks for a &lt;code&gt;person&lt;/code&gt; with ID &lt;code&gt;1&lt;/code&gt;, the store will notice that it had already retrieved and cached that information from the server. Instead of sending another request for the same information, it will give your application the same record it had provided it the first time. This feature&amp;mdash;always returning the same record object, no matter how many times you look it up&amp;mdash;is sometimes called an &lt;em&gt;identity map&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c29f1dc98f1a84326f0dd850e99d414243e7f00" translate="yes" xml:space="preserve">
          <source>However, we understand that there are cases where your Ember.js application may be embedded in an environment beyond your control. The most common scenarios are when authoring third-party JavaScript that is embedded directly in other pages, or when transitioning an application piecemeal to a more modern Ember.js architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ff92b187239abfead5331c4c2852747f077c08" translate="yes" xml:space="preserve">
          <source>However, you can easily set the relationship after the promise has fulfilled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1e4399833e7a0e492957e1ba2bcad82ab689b9" translate="yes" xml:space="preserve">
          <source>However, you will often have a route whose model will change depending on user interaction. For example, imagine a photo viewer app. The &lt;code&gt;/photos&lt;/code&gt; route will render the &lt;code&gt;photos&lt;/code&gt; template with the list of photos as the model, which never changes. But when the user clicks on a particular photo, we want to display that model with the &lt;code&gt;photo&lt;/code&gt; template. If the user goes back and clicks on a different photo, we want to display the &lt;code&gt;photo&lt;/code&gt; template again, this time with a different model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99667b90d567662155aab00455bc8316096a2c82" translate="yes" xml:space="preserve">
          <source>IDs</source>
          <target state="translated">IDs</target>
        </trans-unit>
        <trans-unit id="a9efc374c86edc2fecee6eff52b628234192f610" translate="yes" xml:space="preserve">
          <source>Ideally we'll see &quot;Type: Standalone - Estate&quot; for our first rental property. Instead, our default template helper is returning back our &lt;code&gt;rental.propertyType&lt;/code&gt; values. Let's update our helper to look if a property exists in an array of &lt;code&gt;communityPropertyTypes&lt;/code&gt;, if so, we'll return either &lt;code&gt;'Community'&lt;/code&gt; or &lt;code&gt;'Standalone'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb647c972b9636aacfa5b652eb545da2080be4bd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, the view will appear hidden in DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c22c1ae71f3d538269f61581a0e81e0153f2f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isAdministrator&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, Handlebars will produce the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4a799288ed6a384c8a0b7d5926ddc862236933" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isAdministrator&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, Handlebars will produce the following HTML element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386947e9a0ea30e43f8ba5e2fc284fbe653ad06d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isUrgent&lt;/code&gt; is changed to &lt;code&gt;false&lt;/code&gt;, then the &lt;code&gt;is-urgent&lt;/code&gt; class name will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfe1c1705d3b6327e05f56a1bb9454d9878c0db" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;position&lt;/code&gt; is modified and saved, it will pass through the &lt;code&gt;serialize&lt;/code&gt; function in the transform and again be presented as an array in JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f899b1f5e6fae1002dd83e9fb5e527fab45924" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; the adapter reported that it was unable to save local changes to the backend for any reason other than a server-side validation error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97709a0f3a9bb9bebb5df0b12cb642a9fc0aebb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; the store is attempting to reload the record from the adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a2a654ae9bfaf07b54904f9af3a5314ace399c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ reload: true }&lt;/code&gt; is passed or &lt;code&gt;adapter.shouldReloadAll&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, then the returned promise resolves once the adapter returns data, regardless if there are already records in the store:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b1fc24da4fa5c28bffdea5d98d452c7c21a1aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ reload: true }&lt;/code&gt; is passed or &lt;code&gt;adapter.shouldReloadRecord&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, then the returned promise resolves once the adapter returns data, regardless if the requested record is already in the store:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3dbe66e5e6b5b708bc4b95ba1121acdd8defd3" translate="yes" xml:space="preserve">
          <source>If a &quot;-nav&quot; template isn't found, the &lt;code&gt;partial&lt;/code&gt; helper will fall back to a template named &quot;nav&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1070e0b9e18b5dac2493cafd0b569e32dafec96c" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;mousedown&lt;/code&gt; event occurs, Ember will look at the target of the event and start walking up the DOM node tree, finding corresponding views and invoking their &lt;code&gt;mouseDown&lt;/code&gt; method as it goes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99aa2a53926d89c8edf39bcf51322e498497874" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;value&lt;/code&gt; option for the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;&lt;code&gt;{{action}}&lt;/code&gt;&lt;/a&gt; helper is specified, its value will be considered a property path that will be read off of the first parameter of the action. This comes very handy with event listeners and enables to work with one-way bindings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0bdedf61225129877a120f8b46fd3b246b3830" translate="yes" xml:space="preserve">
          <source>If a literal is passed (such as a number or a string), it will be treated as an identifier instead. In this case, the &lt;code&gt;model&lt;/code&gt; hook of the route will be triggered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d148132e7c5e3be9866ecc89b474e7ec9f90cbd9" translate="yes" xml:space="preserve">
          <source>If a property name is preceded by a calculator icon, that means it is a &lt;a href=&quot;https://guides.emberjs.com/object-model/computed-properties&quot;&gt;computed property&lt;/a&gt;. If the value of a computed property hasn't yet been computed, you can click on the calculator to compute it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a008b6e6e4c965eb844c350ca96fd2fde8005b" translate="yes" xml:space="preserve">
          <source>If a response is considered a failure, the JSON payload is expected to include a top-level key &lt;code&gt;errors&lt;/code&gt;, detailing any specific issues. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98d92b1b4260fddd26076c0785d2615c517ca9" translate="yes" xml:space="preserve">
          <source>If a serializer cannot be found on the adapter, it will fall back to an instance of &lt;code&gt;DS.JSONSerializer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad939b5415fefa419b5d3d8f2267a831976cc9b" translate="yes" xml:space="preserve">
          <source>If a value passed to &lt;code&gt;{{#if}}&lt;/code&gt; evaluates to falsy, the &lt;code&gt;{{else}}&lt;/code&gt; block of that invocation is rendered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6cac50285e951d3f99088cf661e8791b58c20f" translate="yes" xml:space="preserve">
          <source>If a version number is shown, you're ready to go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fb32851b8732feb9f0af5bc888537010a9ce0b" translate="yes" xml:space="preserve">
          <source>If an ID is specified, it adds the ID to the path generated for the type, separated by a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da1db12d48186676c3c260c4c76cbac447729dc" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.filter&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e188b37924c5dcf8575ed85908333d8a94954bd6" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.hash&lt;/code&gt; are rejected, the first promise that is rejected will be given as the reason to the rejection handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407809c289ea8c382613cdbd3a397a9c01b737d3" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.hash&lt;/code&gt; are rejected, the state will be set to 'rejected' and the reason for rejection provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0e67fd6d131651ced14358111075c4c5fd3c60" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;promises&lt;/code&gt; given to &lt;code&gt;RSVP.map&lt;/code&gt; are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f46cfe7efa55298b737df2125ea625479d2317" translate="yes" xml:space="preserve">
          <source>If children were added during the rendering process using &lt;code&gt;appendChild&lt;/code&gt;, &lt;code&gt;rerender&lt;/code&gt; will remove them, because they will be added again if needed by the next &lt;code&gt;render&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781f13b7184304ab362b1bb8a0d3946e5f6bb75d" translate="yes" xml:space="preserve">
          <source>If invoked when not within a run loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51d97cf7dbdd6aee9389de6fe8d9224d28bac28" translate="yes" xml:space="preserve">
          <source>If needed these naming conventions can be overwritten by implementing the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_keyForRelationship&quot;&gt;&lt;code&gt;keyForRelationship()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924be6e4deeb2ba4dff6c32f52c1415073eda89d" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; is found, it will return the value of the &lt;code&gt;defaultAdapter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdb6804cd0ae265a2a329ac1ccba377bca7a4f2" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;App.PersonAdapter&lt;/code&gt; is found, this method will look for an &lt;code&gt;App.ApplicationAdapter&lt;/code&gt; (the default adapter for your entire application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d822a1951ff3c05ebe110cd1ee5c788590a34103" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;App.PersonSerializer&lt;/code&gt; is found, this method will look for an &lt;code&gt;App.ApplicationSerializer&lt;/code&gt; (the default serializer for your entire application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cf920864305c04d1877d466e05a2201ca3cf64" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;type&lt;/code&gt; option is specified, a default of type 'text' is used. Many of the standard HTML attributes may be passed to this helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c64e1c51fd84c0b0ba2114a085f289eed7e10a9" translate="yes" xml:space="preserve">
          <source>If no action is passed to &lt;code&gt;sendAction&lt;/code&gt; a default name of &quot;action&quot; is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88f9275e7a1a177ee08c395e3338103657495ab" translate="yes" xml:space="preserve">
          <source>If no arguments are passed to &lt;code&gt;create&lt;/code&gt;, it will not set values to the new instance during initialization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af662b6dbfe67a59bf4fde858ceab67ed36955ac" translate="yes" xml:space="preserve">
          <source>If no explicit controller is defined, Ember will automatically create one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cd6415acaefb1ff46dd122c8132a0369ced4fe" translate="yes" xml:space="preserve">
          <source>If no reload is indicated via the abovementioned ways, then the promise immediately resolves with all the records currently loaded in the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a65cf944c886493cd794ea39bbbb2b618c4896" translate="yes" xml:space="preserve">
          <source>If no reload is indicated via the abovementioned ways, then the promise immediately resolves with the cached version in the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa0da2ce48ad3591baf25de0028f84aecdc9582" translate="yes" xml:space="preserve">
          <source>If no run-loop is present, it creates a new one. If a run loop is present it will queue itself to run on the existing run-loops action queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd3479f82325bb4b4799241d66b61b2d7c40fc3" translate="yes" xml:space="preserve">
          <source>If no viable error substates can be found, an error message will be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319574056b68eb9f79e192960e35e4b24fd3a625" translate="yes" xml:space="preserve">
          <source>If none of the built-in Ember Data Adapters work for your backend, be sure to check out some of the community maintained Ember Data Adapters. Some good places to look for Ember Data Adapters include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ead0e39f3de65e7f03d14bc1db4bfafb834d58" translate="yes" xml:space="preserve">
          <source>If none of the built-in Ember Data Serializers work for your backend, be sure to check out some of the community maintained Ember Data Adapters and Serializers. A good place to search for them is &lt;a href=&quot;http://emberobserver.com/categories/data&quot;&gt;Ember Observer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385c8e8dd880920fcdc1ae7385ac7d1b51d9fd69" translate="yes" xml:space="preserve">
          <source>If not manually set a default value will be provided by the framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10af7888776e382b6d940ea2456a5aa0b13dfd98" translate="yes" xml:space="preserve">
          <source>If not manually set a default value will be provided by the framework. Once rendered an element's &lt;code&gt;elementId&lt;/code&gt; is considered immutable and you should never change it. If you need to compute a dynamic value for the &lt;code&gt;elementId&lt;/code&gt;, you should do this when the component or element is being instantiated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4dfe57cd55eceea09fa41283febccc080fc1b27" translate="yes" xml:space="preserve">
          <source>If one of the above is found, the router will immediately transition into that substate (without updating the URL). The &quot;reason&quot; for the error (i.e. the exception thrown or the promise reject value) will be passed to that error state as its &lt;code&gt;model&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c50aaa48c239e57ccc9645db5f0f57bf065cf4" translate="yes" xml:space="preserve">
          <source>If present, overrides the application's &lt;code&gt;rootElement&lt;/code&gt; property on the instance. This is useful for testing environment, where you might want to append the root view to a fixture area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7f3d6406c8a88c0635c79b1f2f384e707f0588" translate="yes" xml:space="preserve">
          <source>If present, overrides the router's &lt;code&gt;location&lt;/code&gt; property with this value. This is useful for environments where trying to modify the URL would be inappropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ba623874d5780a1c7aa2f1902d27026170e1f9" translate="yes" xml:space="preserve">
          <source>If present, render into the given &lt;code&gt;Document&lt;/code&gt; object instead of the global &lt;code&gt;window.document&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a5231e55fa0848b40bfcabe5e63e6b334a8dee" translate="yes" xml:space="preserve">
          <source>If singletons are not wanted an optional flag can be provided at lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d589e46725553e1f5ab96cc1bb5be3a933ac7e4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ActionHandler&lt;/code&gt; has its &lt;code&gt;target&lt;/code&gt; property set, actions may bubble to the &lt;code&gt;target&lt;/code&gt;. Bubbling happens when an &lt;code&gt;actionName&lt;/code&gt; can not be found in the &lt;code&gt;ActionHandler&lt;/code&gt;'s &lt;code&gt;actions&lt;/code&gt; hash or if the action target function returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772840dee3cf8d0910eb07a26d98e70dcf3faa75" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;articles.overview&lt;/code&gt; route's &lt;code&gt;model&lt;/code&gt; hook returns a promise that rejects (for instance the server returned an error, the user isn't logged in, etc.), an &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#event_error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; event will fire from that route and bubble upward. This &lt;code&gt;error&lt;/code&gt; event can be handled and used to display an error message, redirect to a login page, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9130af308c0198b4b665ac1a3496ca0cbc9e0f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;isEnabled&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, no class name is added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab314ef6ed6ac8901d4df1d10fba4bf0a8964b42" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;loading&lt;/code&gt; handler is not defined at the specific route, the event will continue to bubble above a transition's parent route, providing the &lt;code&gt;application&lt;/code&gt; route the opportunity to manage it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6537a81cb8aa571a7b6f86a8e1d8ee28c339c7" translate="yes" xml:space="preserve">
          <source>If the Inspector cannot detect an Ember application, you will see the following message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ddcdf494c0799cfdfe52920abaeb3bbcf2a536" translate="yes" xml:space="preserve">
          <source>If the JSON for &lt;code&gt;person&lt;/code&gt; has a key of &lt;code&gt;lastNameOfPerson&lt;/code&gt;, and the desired attribute name is simply &lt;code&gt;lastName&lt;/code&gt;, then create a custom Serializer for the model and override the &lt;code&gt;attrs&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a799037ae5dbbf342f27f5111bfd1194142893" translate="yes" xml:space="preserve">
          <source>If the Promises tab is working, but there are Promises you can't find, it's probably because these Promises were created before the Inspector was activated. To detect Promises the moment the app boots, click on the &lt;code&gt;Reload&lt;/code&gt; button below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f3f500a3b8991f78eb460dc21a188be6d35d0d" translate="yes" xml:space="preserve">
          <source>If the adapter returns no data for the primary data of the payload, then &lt;code&gt;queryRecord&lt;/code&gt; resolves with &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7638d1179bf0962cf4d4338f47795f6fc62b8321" translate="yes" xml:space="preserve">
          <source>If the aliased property is &quot;falsey&quot;, for example: &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; or an empty array, the block will not be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41945c6b7d63a4ae10870e50bcd86a398b52e66a" translate="yes" xml:space="preserve">
          <source>If the assimliated promise rejects, then the downstream promise will also reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152ea127565802f064b38cbb1059bddd02b1d5be" translate="yes" xml:space="preserve">
          <source>If the attribute is null, it won't be rendered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b443b259d5099327a0563619861d8040ac92d909" translate="yes" xml:space="preserve">
          <source>If the attributes returned by your server use a different convention you can use the serializer's &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#method_keyForAttribute&quot;&gt;&lt;code&gt;keyForAttribute()&lt;/code&gt;&lt;/a&gt; method to convert an attribute name in your model to a key in your JSON payload. For example, if your backend returned attributes that are &lt;code&gt;under_scored&lt;/code&gt; instead of &lt;code&gt;dash-cased&lt;/code&gt; you could override the &lt;code&gt;keyForAttribute&lt;/code&gt; method like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3cbf20c649b02a710475ea390c3c5224873ffa" translate="yes" xml:space="preserve">
          <source>If the backend server returns validation errors after trying to save, they will be available on the &lt;code&gt;errors&lt;/code&gt; property of your model. Here's how you might display the errors from saving a blog post in your template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184d20c148a6d327935c020acb2ec7964cadbfc4" translate="yes" xml:space="preserve">
          <source>If the bound property's value is a string, that value will be added as a class name without modification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b1da3c92afa4debb6a8f255a279272102f2932" translate="yes" xml:space="preserve">
          <source>If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a55c943ac2e27c54adb00ff70a7d4161ee5ec6b" translate="yes" xml:space="preserve">
          <source>If the entity referred to by the reference is already loaded, it is present as &lt;code&gt;reference.value&lt;/code&gt;. Otherwise the value returned by this function is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a417452b0f8a59cb5c9ec10cff0c1a7101af4025" translate="yes" xml:space="preserve">
          <source>If the fulfillment value of a Promise is an Ember object or an array, you can click on that object to open it in the Object Inspector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c694b108172330a074e555aa2e9bd5c8918d004c" translate="yes" xml:space="preserve">
          <source>If the globally unique IDs for your records should be generated on the client, implement the &lt;code&gt;generateIdForRecord()&lt;/code&gt; method. This method will be invoked each time you create a new record, and the value returned from it will be assigned to the record's &lt;code&gt;primaryKey&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383779be8c706d1e3cb5661b12cdefe94dc7660e" translate="yes" xml:space="preserve">
          <source>If the manyArray holds the result of a &lt;code&gt;store.query()&lt;/code&gt; reload will re-run the original query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00ea8d6f5536c4e1ff522e12217f7fb72a05f5f" translate="yes" xml:space="preserve">
          <source>If the method &lt;code&gt;toStringExtension&lt;/code&gt; is defined, its return value will be included in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e6be66dbb320443a753cdc848ffa43778e78f7" translate="yes" xml:space="preserve">
          <source>If the model &lt;code&gt;hasDirtyAttributes&lt;/code&gt; this function will discard any unsaved changes. If the model &lt;code&gt;isNew&lt;/code&gt; it will be removed from the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5bcbc01172106906b2423deb80779f8b363b9a" translate="yes" xml:space="preserve">
          <source>If the model for the &lt;code&gt;photos&lt;/code&gt; template is a list of three photos, the rendered HTML would look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd366913abd1903a499f1ba35d5fc1ff62f79f8" translate="yes" xml:space="preserve">
          <source>If the new route has dynamic segments, you need to pass either a &lt;em&gt;model&lt;/em&gt; or an &lt;em&gt;identifier&lt;/em&gt; for each segment. Passing a model will skip the route's &lt;code&gt;model()&lt;/code&gt; hook since the model is already loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd105583cff6aa2625e44b568d4b7fb52d7d415" translate="yes" xml:space="preserve">
          <source>If the node function has multiple success parameters, then &lt;code&gt;denodeify&lt;/code&gt; just returns the first one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b73428030a615dd13f1445e2cf5ccf80c1babe" translate="yes" xml:space="preserve">
          <source>If the object's class is not defined on an Ember namespace, it will indicate it is a subclass of the registered superclass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e007da1cf968ea0c777f82e45711da7c7b73cc28" translate="yes" xml:space="preserve">
          <source>If the passed object implements the &lt;code&gt;Ember.Copyable&lt;/code&gt; interface, then this function will delegate to the object's &lt;code&gt;copy()&lt;/code&gt; method and return the result. See &lt;code&gt;Ember.Copyable&lt;/code&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9563527c88e87e4b25e2a83f4d0a00e3e9423b57" translate="yes" xml:space="preserve">
          <source>If the passed object is of a type not supported by the receiver, then this method should raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09efeec4d550f6fc26db2216056c72de8e864277" translate="yes" xml:space="preserve">
          <source>If the promise fulfills, the transition will pick up where it left off and begin resolving the next (child) route's model, pausing if it too is a promise, and so on, until all destination route models have been resolved. The values passed to the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_setupController&quot;&gt;&lt;code&gt;setupController()&lt;/code&gt;&lt;/a&gt; hook for each route will be the fulfilled values from the promises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308655b43223f8a7bd0d8bc77a723ca39a8bc7b1" translate="yes" xml:space="preserve">
          <source>If the proxied promise is rejected this will contain the reason provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f880ce55d49d34f056f851b1bbdf0e075988eb0c" translate="yes" xml:space="preserve">
          <source>If the record is in the dirty state this property will report what kind of change has caused it to move into the dirty state. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a2600553c7efb30b03c1f03320f2de918b3cea" translate="yes" xml:space="preserve">
          <source>If the record is not yet available, the store will ask the adapter's &lt;code&gt;find&lt;/code&gt; method to find the necessary data. If the record is already present in the store, it depends on the reload behavior &lt;em&gt;when&lt;/em&gt; the returned promise resolves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcad3100c572bcae24a7d17d3068806c3bb758b" translate="yes" xml:space="preserve">
          <source>If the records in the relationship are not known when the response is serialized its also possible to represent the relationship as a url using the &lt;code&gt;links&lt;/code&gt; key in the response. Ember Data will fetch this url to resolve the relationship when it is accessed for the first time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f78f6c26f50d6080783bc5902d985983266d5c" translate="yes" xml:space="preserve">
          <source>If the rejection value is an &lt;code&gt;Error&lt;/code&gt; object, you can send its stack trace to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa3d1bc6f1ed30d04ddee5b19a6b30c1fdc2d27" translate="yes" xml:space="preserve">
          <source>If the return value of an &lt;code&gt;attributeBindings&lt;/code&gt; monitored property is a boolean the attribute will be present or absent depending on the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972fbc628020d016ab99c5230775b405dc6ee5d9" translate="yes" xml:space="preserve">
          <source>If the route is nested, you can supply a model or an identifier for each dynamic segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe4d96d9b887de98732f91a39ae331699076f78" translate="yes" xml:space="preserve">
          <source>If the types of the arguments are not numbers, they will be converted to numbers and the type of the return value will always be &lt;code&gt;Number&lt;/code&gt;. For example, the max of a list of Date objects will be the highest timestamp as a &lt;code&gt;Number&lt;/code&gt;. This behavior is consistent with &lt;code&gt;Math.max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555814d9be41aaf2ec2a83e221fcf638f4305f3e" translate="yes" xml:space="preserve">
          <source>If the types of the arguments are not numbers, they will be converted to numbers and the type of the return value will always be &lt;code&gt;Number&lt;/code&gt;. For example, the min of a list of Date objects will be the lowest timestamp as a &lt;code&gt;Number&lt;/code&gt;. This behavior is consistent with &lt;code&gt;Math.min&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2694df4de2809d30bd370625a56d890f277f6427" translate="yes" xml:space="preserve">
          <source>If the types of the two objects are different precedence occurs in the following order, with types earlier in the list considered &lt;code&gt;&amp;lt;&lt;/code&gt; types later in the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2405640919d1373253f51ee337515a33b2c957" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/articles&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;, so the articles won't be filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279d9a5b2ba8cd08cea3db56a68648236e5cca17" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/articles?category=recent&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt; will be set to &lt;code&gt;&quot;recent&quot;&lt;/code&gt;, so articles will be filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e95e4157d57cfac7a244dda112f646686cb9ba" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/post/5&lt;/code&gt;, the route will then have the &lt;code&gt;post_id&lt;/code&gt; of &lt;code&gt;5&lt;/code&gt; to use to load the correct post. Ember follows the convention of &lt;code&gt;:model-name_id&lt;/code&gt; for two reasons. The first reason is that Routes know how to fetch the right model by default, if you follow the convention. The second is that &lt;code&gt;params&lt;/code&gt; is an object, and can only have one value associated with a key. To put it in code, the following will &lt;em&gt;not&lt;/em&gt; work properly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a31aae1d637c261ba9fe34ad046f6866aecc72" translate="yes" xml:space="preserve">
          <source>If the user navigates to &lt;code&gt;/posts&lt;/code&gt;, the current route will be &lt;code&gt;posts.index&lt;/code&gt;, and the &lt;code&gt;posts/index&lt;/code&gt; template will be rendered into the &lt;code&gt;{{outlet}}&lt;/code&gt; in the &lt;code&gt;posts&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf8d6746bfe9fd95040fa57bf9e3bec00f81028" translate="yes" xml:space="preserve">
          <source>If the user then navigates to &lt;code&gt;/posts/favorites&lt;/code&gt;, Ember will replace the &lt;code&gt;{{outlet}}&lt;/code&gt; in the &lt;code&gt;posts&lt;/code&gt; template with the &lt;code&gt;posts/favorites&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893b25d26ac630e735aa5ea13aaa149fa275cc33" translate="yes" xml:space="preserve">
          <source>If the value of a class name binding returns a boolean the property name itself will be used as the class name if the property is true. The class name will not be added if the value is &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87decebdf525330b6ee877826a40a40335518aa3" translate="yes" xml:space="preserve">
          <source>If the value of the property is a Boolean, the attribute is treated as an HTML Boolean attribute. It will be present if the property is &lt;code&gt;true&lt;/code&gt; and omitted if the property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241dca8b9f537c0fa376af717f72e3c257766c10" translate="yes" xml:space="preserve">
          <source>If the value of the property is a Boolean, the name of that property is added as a dasherized class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd8566ac8c1565ccde6d28b8a4e1e6d3395a910" translate="yes" xml:space="preserve">
          <source>If the various &lt;code&gt;beforeModel&lt;/code&gt;/&lt;code&gt;model&lt;/code&gt;/&lt;code&gt;afterModel&lt;/code&gt; hooks don't immediately resolve, a &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#event_error&quot;&gt;&lt;code&gt;loading&lt;/code&gt;&lt;/a&gt; event will be fired on that route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2dc83a6113275844a6385404e0dff7a0770819" translate="yes" xml:space="preserve">
          <source>If there is a bubbling browser event that Ember does not listen for by default, you can specify custom events and their corresponding view method names by setting the application's &lt;code&gt;customEvents&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fa00b3c379843b741d583f75db12e57e485f0b" translate="yes" xml:space="preserve">
          <source>If there is any setup required before routing begins, you can implement a &lt;code&gt;ready()&lt;/code&gt; method on your app that will be invoked immediately before routing begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39919c65a7e351de94b6d2929934792f839aabb4" translate="yes" xml:space="preserve">
          <source>If there were several facts about a person, the &lt;code&gt;{{get}}&lt;/code&gt; helper can dynamically pick one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040b9c243be042545732fd6f0fed8b432ffc6c11" translate="yes" xml:space="preserve">
          <source>If these attributes are set to a quoted string, their values will be set directly on the element, as in the previous example. However, when left unquoted, these values will be bound to a property on the template's current rendering context. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851c0c99f7d099405eb7957af81bb2f64339fdae" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; the store will re-fetch a record from the adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d324e3672ef44f6d93fce83bbca4610707dcd5bf" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; the store will re-fetch all records from the adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cc3ace761559e8854e4c7f25c8b37d7a0d1e85" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt;, the store will re-fetch a record from the adapter. If this method returns &lt;code&gt;false&lt;/code&gt;, the store will resolve immediately using the cached record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a94ecc56dd16cd7370ebc544f5bba8000b8d23a" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt;, the store will re-fetch all records from the adapter. If this method returns &lt;code&gt;false&lt;/code&gt;, the store will resolve immediately using the cached records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe1de714f566113f9e1095029cd1a55fa8e743b" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;deleted&lt;/code&gt; state and has been marked for deletion. When &lt;code&gt;isDeleted&lt;/code&gt; is true and &lt;code&gt;hasDirtyAttributes&lt;/code&gt; is true, the record is deleted locally but the deletion was not yet persisted. When &lt;code&gt;isSaving&lt;/code&gt; is true, the change is in-flight. When both &lt;code&gt;hasDirtyAttributes&lt;/code&gt; and &lt;code&gt;isSaving&lt;/code&gt; are false, the change has persisted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83291299de1e11fbab47209155b14ee2ab32cca9" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;dirty&lt;/code&gt; state. The record has local changes that have not yet been saved by the adapter. This includes records that have been created (but not yet saved) or deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c836c4d37d292fa086a390166fb0151de2ecd304" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;empty&lt;/code&gt; state. Empty is the first state all records enter after they have been created. Most records created by the store will quickly transition to the &lt;code&gt;loading&lt;/code&gt; state if data needs to be fetched from the server or the &lt;code&gt;created&lt;/code&gt; state if the record is created on the client. A record can also enter the empty state if the adapter is unable to locate the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdebdb26297a3d7c706023578d53a29fbab68e1" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;loaded&lt;/code&gt; state. A record enters this state when its data is populated. Most of a record's lifecycle is spent inside substates of the &lt;code&gt;loaded&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7851a0f9c463d6001a39d2718b4aa90dc349f25f" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;loading&lt;/code&gt; state. A record enters this state when the store asks the adapter for its data. It remains in this state until the adapter provides the requested data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7699a766f7c89c2f92ac81ed83cc84f4e13d238" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;new&lt;/code&gt; state. A record will be in the &lt;code&gt;new&lt;/code&gt; state when it has been created on the client and the adapter has not yet report that it was successfully saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4ba5baeab6a21d7653a1dfed3d9b1e76a22ca9" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;saving&lt;/code&gt; state. A record enters the saving state when &lt;code&gt;save&lt;/code&gt; is called, but the adapter has not yet acknowledged that the changes have been persisted to the backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fb590446fa7f5b09e0e68845c464750d5c8c3e" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt; the record is in the &lt;code&gt;valid&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8730cc7fae55b6eae94385c182c0a926a1323610" translate="yes" xml:space="preserve">
          <source>If true, a deep copy of the object is made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da29f09761179fad74ec04924a0228f1feedec60" translate="yes" xml:space="preserve">
          <source>If we are currently in the &lt;code&gt;uncommitted&lt;/code&gt; state, calling &lt;code&gt;transitionTo('inFlight')&lt;/code&gt; would transition to the &lt;code&gt;created.inFlight&lt;/code&gt; state, while calling &lt;code&gt;transitionTo('updated.inFlight')&lt;/code&gt; would transition to the &lt;code&gt;updated.inFlight&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e2cb1133571d11997b4f71e1fd981031eac0f8" translate="yes" xml:space="preserve">
          <source>If we change the todo's &lt;code&gt;isDone&lt;/code&gt; property, the &lt;code&gt;incomplete&lt;/code&gt; property is updated automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a796f4f5221fe61c643f55be75589fd32481e4" translate="yes" xml:space="preserve">
          <source>If we execute the following code without the run loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc313233c2f64df01525eee3945f09f7a71fff7f" translate="yes" xml:space="preserve">
          <source>If we navigate to &lt;a href=&quot;http://localhost:4200&quot;&gt;&lt;code&gt;http://localhost:4200&lt;/code&gt;&lt;/a&gt;, we'll see the default welcome screen. When we edit the &lt;code&gt;app/templates/application.hbs&lt;/code&gt; file, we'll replace that content with our own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3567eee617ca22beb4de32fb0433223de4f9a43" translate="yes" xml:space="preserve">
          <source>If we open &lt;code&gt;/app/router.js&lt;/code&gt;, we'll see a new line of code for the &lt;strong&gt;about&lt;/strong&gt; route, calling &lt;code&gt;this.route('about')&lt;/code&gt; in the &lt;code&gt;Router.map&lt;/code&gt; function. That new line of code tells the Ember router to run our &lt;code&gt;/app/routes/about.js&lt;/code&gt; file when a visitor navigates to &lt;code&gt;/about&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6511b4768aefaf504aaf927b33d7a13c2ab8507" translate="yes" xml:space="preserve">
          <source>If we redirect to &lt;code&gt;posts.post&lt;/code&gt; in the &lt;code&gt;afterModel&lt;/code&gt; hook, &lt;code&gt;afterModel&lt;/code&gt; essentially invalidates the current attempt to enter this route. So the &lt;code&gt;posts&lt;/code&gt; route's &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt; hooks will fire again within the new, redirected transition. This is inefficient, since they just fired before the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38726979701cf2e7eb64ee3eacbce4a4f16ae05" translate="yes" xml:space="preserve">
          <source>If we tried to use the component like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616062ec77e5fa290a52c7d817433b031fea6ac5" translate="yes" xml:space="preserve">
          <source>If we visit &lt;code&gt;/turing/maths?memberQp=member&amp;amp;interestQp=interest&lt;/code&gt; the model for the &lt;code&gt;member.interest&lt;/code&gt; route is hash with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c354573f1b6355c1ffef8cf030e75c388b88e508" translate="yes" xml:space="preserve">
          <source>If you add the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_action&quot;&gt;&lt;code&gt;{{action}}&lt;/code&gt;&lt;/a&gt; helper to any HTML DOM element, when a user clicks the element, the named event will be sent to the template's corresponding component or controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb6960c260ff4759523f8e75a8ce68a4dc45f3d" translate="yes" xml:space="preserve">
          <source>If you always have to reload your application after you open the Inspector, that may mean the application's booted state is corrupt. This happens if you call &lt;code&gt;advanceReadiness&lt;/code&gt; or &lt;code&gt;deferReadiness&lt;/code&gt; after the application has already booted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fc04a51830315edd3d40cb31b0b172a3a6bc28" translate="yes" xml:space="preserve">
          <source>If you are implementing an object and want to support this API, just include this mixin in your class and implement the required methods. In your unit tests, be sure to apply the Ember.MutableEnumerableTests to your object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aec0e791f2e470122fb95fd2d7f58a9fd83671d" translate="yes" xml:space="preserve">
          <source>If you are implementing an object that supports &lt;code&gt;Ember.Array&lt;/code&gt;, call this method just after the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a65fa4c61541a69d6463b78fcb7b7827736c7f" translate="yes" xml:space="preserve">
          <source>If you are implementing an object that supports &lt;code&gt;Ember.Array&lt;/code&gt;, call this method just before the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bb949fd3198381a144f6cde6e4157c5d85ff18" translate="yes" xml:space="preserve">
          <source>If you are subclassing a framework class, like &lt;code&gt;Ember.Component&lt;/code&gt;, and you override the &lt;code&gt;init()&lt;/code&gt; method, make sure you call &lt;code&gt;this._super(...arguments)&lt;/code&gt;! If you don't, a parent class may not have an opportunity to do important setup work, and you'll see strange behavior in your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b3c08a9e261ed7e51cb9cfbaf14505b3b08c92" translate="yes" xml:space="preserve">
          <source>If you are using Ember CLI and have source maps enabled, you can see a list of sources for each deprecation. If you are using Chrome or Firefox, clicking on the source opens the sources panel and takes you to the code that caused the deprecation message to be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc00002ff5ace41bd5218064ecb9b255c697d38" translate="yes" xml:space="preserve">
          <source>If you are using a browser other than Chrome or Firefox, you can use the bookmarklet option to use the Inspector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02db993349ec94d69d26823994ef170bdefc244" translate="yes" xml:space="preserve">
          <source>If you are using an adapter that supports JSON API, such as Ember's default &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt;, you can easily add the &lt;code&gt;include&lt;/code&gt; parameter to the server requests created by the &lt;code&gt;findRecord()&lt;/code&gt;, &lt;code&gt;findAll()&lt;/code&gt;, &lt;code&gt;query()&lt;/code&gt; and &lt;code&gt;queryRecord()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d764acef7c7bbc5e829c6f95616d78f3284c261" translate="yes" xml:space="preserve">
          <source>If you are using an adapter that supports server requests capable of returning a single model object, Ember Data provides a convenience method &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_queryRecord&quot;&gt;&lt;code&gt;store.queryRecord()&lt;/code&gt;&lt;/a&gt;that will return a promise that resolves with that single record. The request is made via a method &lt;code&gt;queryRecord()&lt;/code&gt; defined by the adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d8be3159389716b3148f93a62087d43361baca" translate="yes" xml:space="preserve">
          <source>If you are using imports with Ember, be sure to import the console:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf03c612d1bb7e2876a9d910b681010340f9625" translate="yes" xml:space="preserve">
          <source>If you are using the deprecation workflow process above, you will likely prefer to gather these warnings during runtime execution instead. The way to hide these warnings during compile is to install the &lt;a href=&quot;http://emberobserver.com/addons/ember-cli-template-lint&quot;&gt;ember-cli-template-lint&lt;/a&gt; addon. It suppresses template deprecation warnings during compile in favor of showing them in the browser console during test suite execution or application usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c30fda38e2e251df472575b65702d2eaf2cf3f4" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;this.transitionTo&lt;/code&gt; from inside of this hook, this route will not be entered in favor of the other hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bae739363801d5e6cc6d0d8792dd88ca5691ec0" translate="yes" xml:space="preserve">
          <source>If you click on a highlighted template or component, the Inspector will select it. You can then click on the backing objects to send them to the object inspector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2287c28f4f5653412b32afbd17129cdb53634b7" translate="yes" xml:space="preserve">
          <source>If you created a new instance of &lt;code&gt;App.Post&lt;/code&gt; and added a &lt;code&gt;App.Comment&lt;/code&gt; record to its &lt;code&gt;comments&lt;/code&gt; has-many relationship, you would expect the comment's &lt;code&gt;post&lt;/code&gt; property to be set to the post that contained the has-many.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04958099d387cfcf78491b976ac9baf08916790f" translate="yes" xml:space="preserve">
          <source>If you deploy your application to an Apache web server, first create a new virtual host for the application. To make sure all routes are handled by index.html, add the following directive to the application's virtual host configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dadd676b7a862d1fe2e987317aacdc37e88d7d" translate="yes" xml:space="preserve">
          <source>If you do not overwrite &lt;code&gt;attrs&lt;/code&gt; for a specific relationship, the &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; will behave in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15be62c0da19e937d77b4fb85f8c12202896f973" translate="yes" xml:space="preserve">
          <source>If you do not set it, ember-testing will default to &lt;code&gt;Ember.Test.QUnitAdapter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed01276bf29ac4e04e7f20c72e9de1b540acd0f4" translate="yes" xml:space="preserve">
          <source>If you do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf46c736b0f9766976ce68db0371d4fa3c55b36" translate="yes" xml:space="preserve">
          <source>If you don't have a model object available to pass to &lt;code&gt;{{link-to}}&lt;/code&gt;, an optional string or integer argument can be passed for routes whose paths contain dynamic segments. This argument will become the value of the dynamic segment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee2ed65923b9483ca2bf93bbf891a4edf0375b9" translate="yes" xml:space="preserve">
          <source>If you find yourself needing to both serialize and deserialize the embedded relationship you can use the shorthand option of &lt;code&gt;{ embedded:
'always' }&lt;/code&gt;. The example above could therefore be expressed as such:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff7f9cbe7e02c19c460eaef7d9eee134d3a876c" translate="yes" xml:space="preserve">
          <source>If you get a &lt;em&gt;&quot;command not found&quot;&lt;/em&gt; error or an outdated version for Node:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050770f697b47af665b7cb7ed21973bc0f3c781b" translate="yes" xml:space="preserve">
          <source>If you get an outdated version of npm, run &lt;code&gt;npm install -g npm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3941efad566fd9215dca432754b6a4dd21547e3d" translate="yes" xml:space="preserve">
          <source>If you have Ember Inflector (such as if Ember Data is present), pluralize a word. For example, turn &quot;ox&quot; into &quot;oxen&quot;. Example: {{pluralize count myProperty}} {{pluralize 1 &quot;oxen&quot;}} {{pluralize myProperty}} {{pluralize &quot;ox&quot;}}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4524be3b93c61b0a42e1f99b4c2b8733d7b6111" translate="yes" xml:space="preserve">
          <source>If you have Ember Inflector (such as if Ember Data is present), singularize a word. For example, turn &quot;oxen&quot; into &quot;ox&quot;. Example: {{singularize myProperty}} {{singularize &quot;oxen&quot;}}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28c3a1d07079b2e49ec02c67c669cde2afcb3ed" translate="yes" xml:space="preserve">
          <source>If you have access to the post model you can also pass the model itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a672287c8f9f624ce67a11af94f091cecfea799" translate="yes" xml:space="preserve">
          <source>If you have any questions about styling or the contributing process, you can check out our &lt;a href=&quot;https://github.com/emberjs/guides/blob/master/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;. If your question persists, reach us at &lt;code&gt;#-team-learning&lt;/code&gt; on the &lt;a href=&quot;https://ember-community-slackin.herokuapp.com/&quot;&gt;Slack group&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418975615623aacf317cf1ad6029649232e3868a" translate="yes" xml:space="preserve">
          <source>If you have one model that has exceptional rules for communicating with its backend than the others you can create a Model specific Adapter by running the command &lt;code&gt;ember generate adapter adapter-name&lt;/code&gt;. For example, running &lt;code&gt;ember generate adapter post&lt;/code&gt; will create the following file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89169a936118dbe820b69e202d432c766cd630f6" translate="yes" xml:space="preserve">
          <source>If you implement the &lt;code&gt;setupController&lt;/code&gt; hook in your Route, it will prevent this default behavior. If you want to preserve that behavior when implementing your &lt;code&gt;setupController&lt;/code&gt; function, make sure to call &lt;code&gt;_super&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0fd3924de52e4e7b7bf74c3ab5f298e42d47f8" translate="yes" xml:space="preserve">
          <source>If you just want to do some small tweaks on the default JSON, you can call super first and make the tweaks on the returned JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b3fdea41c8c3a9b5dd7c4c1c6a43381b43fcd4" translate="yes" xml:space="preserve">
          <source>If you left &lt;code&gt;ember test&lt;/code&gt; running, it should have automatically updated to show the three tests related to navigating have now passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd85c21df78070fa9d86a829ab4d497184a7624" translate="yes" xml:space="preserve">
          <source>If you merely want to watch for the array being changed, like an object being replaced, added or removed, use &lt;code&gt;[]&lt;/code&gt; instead of &lt;code&gt;@each&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30af49987c2096f5472a3a802250139e17570b68" translate="yes" xml:space="preserve">
          <source>If you navigate to &lt;code&gt;slow-model&lt;/code&gt;, in the &lt;code&gt;model&lt;/code&gt; hook, the query may take a long time to complete. During this time, your UI isn't really giving you any feedback as to what's happening. If you're entering this route after a full page refresh, your UI will be entirely blank, as you have not actually finished fully entering any route and haven't yet displayed any templates. If you're navigating to &lt;code&gt;slow-model&lt;/code&gt; from another route, you'll continue to see the templates from the previous route until the model finish loading, and then, boom, suddenly all the templates for &lt;code&gt;slow-model&lt;/code&gt; load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497c297297a42971d33f52d637d27a21bee31444" translate="yes" xml:space="preserve">
          <source>If you need a link to be 'active' even when it doesn't match the current route, you can use the &lt;code&gt;current-when&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0d71e422da23306886993e75838bdfc79cd340" translate="yes" xml:space="preserve">
          <source>If you need a query param change to trigger a full transition, and thus the method hooks, you can use the optional &lt;code&gt;queryParams&lt;/code&gt; configuration hash on the &lt;code&gt;Route&lt;/code&gt;. If you have a &lt;code&gt;category&lt;/code&gt; query param and you want it to trigger a model refresh, you can set it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d724bbe4ae41c1f103065e3b933b2d51b2875afe" translate="yes" xml:space="preserve">
          <source>If you need an observer to fire as part of the initialization process, you cannot rely on the side effect of &lt;code&gt;set&lt;/code&gt;. Instead, specify that the observer should also run after &lt;code&gt;init&lt;/code&gt; by using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.html#method_on&quot;&gt;&lt;code&gt;Ember.on()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88834c589ade40c2c8a09cd64ac7b6294d15d58a" translate="yes" xml:space="preserve">
          <source>If you need information about the current model in order to decide about redirection, you can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_afterModel&quot;&gt;&lt;code&gt;afterModel()&lt;/code&gt;&lt;/a&gt; hook. It receives the resolved model as the first parameter and the transition as the second one. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2efb535289b5ceb3b97d9e008c5567cafd3e85" translate="yes" xml:space="preserve">
          <source>If you need the default handler to trigger you should either register your own event handler, or use event methods on your view class. See &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component#responding-to-browser-events&quot;&gt;&quot;Responding to Browser Events&quot;&lt;/a&gt; in the documentation for Ember.Component for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bac10c515e6ab82de956621c8f946ca14bbd822" translate="yes" xml:space="preserve">
          <source>If you need to customize the behavior of the component you'll need to define a subclass of &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html&quot;&gt;&lt;code&gt;Ember.Component&lt;/code&gt;&lt;/a&gt;. For example, you would need a custom subclass if you wanted to change a component's element, respond to actions from the component's template, or manually make changes to the component's element using JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df4cba3c6b0ffa62125321a7efb00530f8287dc" translate="yes" xml:space="preserve">
          <source>If you need to display all of the keys or values of a JavaScript object in your template, you can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt;&lt;code&gt;{{#each-in}}&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a96970d77e6ec9eaf2d7a5b387d36f437c4840" translate="yes" xml:space="preserve">
          <source>If you need to examine some application state to figure out where to redirect, you might use a &lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;service&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6681b4e459475331a528ae5b4e770bf12759151" translate="yes" xml:space="preserve">
          <source>If you need to import an asset in only one environment you can wrap &lt;code&gt;app.import&lt;/code&gt; in an &lt;code&gt;if&lt;/code&gt; statement. For assets needed during testing, you should also use the &lt;code&gt;{type: 'test'}&lt;/code&gt; option to make sure they are available in test mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c29d1284c4853732d7d5f192b8747da6f20adc" translate="yes" xml:space="preserve">
          <source>If you need to integrate your Ember.js app with a server that does not have an adapter available (for example, you hand-rolled an API server that does not adhere to any JSON specification), Ember Data is designed to be configurable to work with whatever data your server returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7d7122515bf7d06bddb4e38b73ae8ca2a365ba" translate="yes" xml:space="preserve">
          <source>If you need to load certain dependencies before others, you can set the &lt;code&gt;prepend&lt;/code&gt; property equal to &lt;code&gt;true&lt;/code&gt; on the second argument of &lt;code&gt;import()&lt;/code&gt;. This will prepend the dependency to the vendor file instead of appending it, which is the default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f303fe291b7d523c9c33dee9ed5b8dbc10df4926" translate="yes" xml:space="preserve">
          <source>If you need to observe a computed property but aren't currently retrieving it, get it in your &lt;code&gt;init()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdaf5661fc45e1d9858c16ccde11cb3e1e57f2c" translate="yes" xml:space="preserve">
          <source>If you need to override this behavior specify &lt;code&gt;preventDefault=false&lt;/code&gt; in your template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e761d4b8c636b397c5f7b9d1253c1775b42ff269" translate="yes" xml:space="preserve">
          <source>If you need to use different assets in different environments, specify an object as the first parameter. That object's key should be the environment name, and the value should be the asset to use in that environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2748d03900395392b183adad53d0f84874404d9" translate="yes" xml:space="preserve">
          <source>If you never &lt;code&gt;get()&lt;/code&gt; a computed property, its observers will not fire even if its dependent keys change. You can think of the value changing from one unknown value to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290a7c070a7a155947aea4a787111c087279ce1e" translate="yes" xml:space="preserve">
          <source>If you only want to return the first matched value, rather than an Array containing all of the matched values, you can use &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_find&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_findBy&quot;&gt;&lt;code&gt;findBy()&lt;/code&gt;&lt;/a&gt;, which work like &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;filterBy()&lt;/code&gt;, but return only one item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5934dedd9d94074b98416c3f66716aa0a818fcf2" translate="yes" xml:space="preserve">
          <source>If you open &lt;code&gt;config/targets.js&lt;/code&gt;, you will find the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7caff3e3aadb7055ccc3d3a2a7f83f3ed69bee63" translate="yes" xml:space="preserve">
          <source>If you open the acceptance test we created (&lt;code&gt;/tests/acceptance/list-rentals-test.js&lt;/code&gt;), you'll see our goals, which include the ability to navigate to an &lt;code&gt;about&lt;/code&gt; page and a &lt;code&gt;contact&lt;/code&gt; page. Let's start there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b59bb67b3aaea866b51f345ebc86977c5eaa3eb" translate="yes" xml:space="preserve">
          <source>If you open up your Router (&lt;code&gt;app/router.js&lt;/code&gt;) you may notice that the rentals line has changed. This extra &lt;code&gt;function() {}&lt;/code&gt; is required because it needs a child route, the &lt;code&gt;this.route('index', { path: '/'});&lt;/code&gt; is implied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203ef543a812b95ad545379c5a602a48962c876c" translate="yes" xml:space="preserve">
          <source>If you override this method, you should implement it so that it will always return the same value each time it is called. If your enumerable contains only one object, this method should always return that object. If your enumerable is empty, this method should return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26a4133a45f8a4bcb25a8423fcf62070a44fd2e" translate="yes" xml:space="preserve">
          <source>If you pass a function as an argument, it will be used as a getter. A computed property defined in this way might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db351d693a17fad1ccc179037e0ee3a7a168395" translate="yes" xml:space="preserve">
          <source>If you pass a promise to &lt;code&gt;push&lt;/code&gt;, Ember Data will not ask the adapter for the data if another attempt to fetch it is made in the interim. When the promise resolves, the underlying object is updated with the new data, and the promise returned by &lt;em&gt;this function&lt;/em&gt; is resolved with that object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32e28cc7e1a747028f8fe3644203a58979ea8ae" translate="yes" xml:space="preserve">
          <source>If you pass a start and length that is beyond the length this method will throw an &lt;code&gt;OUT_OF_RANGE_EXCEPTION&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d25adfaed8206771f792034fa41b88029aae0de" translate="yes" xml:space="preserve">
          <source>If you pass an object on the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to you adapter via the &lt;code&gt;snapshotRecordArray&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c84364f02074f10e08b345a560c55a004ecc054" translate="yes" xml:space="preserve">
          <source>If you pass an object on the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to you adapter via the snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc47a23b1e48703a5bf76b84f8654a8e0198e87f" translate="yes" xml:space="preserve">
          <source>If you pass an object on the &lt;code&gt;adapterOptions&lt;/code&gt; property of the options argument it will be passed to your adapter via the snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c756f562b2c0db203890e91afbee2cb6f95d02" translate="yes" xml:space="preserve">
          <source>If you plan to run on IE8 and older browsers then you should use this method anytime you want to retrieve a property on an object that you don't know for sure is private. (Properties beginning with an underscore '_' are considered private.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3a5683dbdca620d5608fd8ce10038d9f93b257" translate="yes" xml:space="preserve">
          <source>If you return a &lt;code&gt;SafeString&lt;/code&gt; (a string that has been wrapped in a call to &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html#method_htmlSafe&quot;&gt;&lt;code&gt;htmlSafe&lt;/code&gt;&lt;/a&gt;), Ember knows that you have vouched on its behalf that it contains no malicious HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f382ae0c61dd6994a9d388d1dd482462635deea" translate="yes" xml:space="preserve">
          <source>If you return a promise from a QUnit test, the test will wait to finish until that promise is resolved. In this case our test completes when the &lt;code&gt;wait&lt;/code&gt; helper decides that processing is finished, and the function we provide that asserts the resulting state is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e9fc68b7b53523376705da482b30ef38019d31" translate="yes" xml:space="preserve">
          <source>If you return a value from the &lt;code&gt;before&lt;/code&gt; callback, that same value will be passed as a fourth parameter to the &lt;code&gt;after&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87732ef1ec5fe1e0b3a917f6a4e23be02afa2336" translate="yes" xml:space="preserve">
          <source>If you set coalesceFindRequests to &lt;code&gt;true&lt;/code&gt; it will instead trigger the following request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441f3c3fd008f367cffb5c9b576b099fe6660096" translate="yes" xml:space="preserve">
          <source>If you specify only one model, it will represent the innermost dynamic segment &lt;code&gt;:comment_id&lt;/code&gt;. The &lt;code&gt;:photo_id&lt;/code&gt; segment will use the current photo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292c150c28f547582fbd92a1d2c999f982f9aef9" translate="yes" xml:space="preserve">
          <source>If you take a look at &lt;code&gt;app/router.js&lt;/code&gt;, you'll notice some syntax that may be unfamiliar to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa9b8c368629c5d84425190de4514b42126e05e" translate="yes" xml:space="preserve">
          <source>If you try to set a property on a destroyed object, an exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78741f071d4144013b84b4f1ab959dd2d82ae912" translate="yes" xml:space="preserve">
          <source>If you try to set a value on a key that has a computed property handler defined (see the &lt;code&gt;get()&lt;/code&gt; method for an example), then &lt;code&gt;set()&lt;/code&gt; will call that method, passing both the value and key instead of simply changing the value itself. This is useful for those times when you need to implement a property that is composed of one or more member properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b04613f58b1300e32df4339c4129d38099cef75" translate="yes" xml:space="preserve">
          <source>If you try to set a value on a key that is undefined in the target object, then the &lt;code&gt;setUnknownProperty()&lt;/code&gt; handler will be called instead. This gives you an opportunity to implement complex &quot;virtual&quot; properties that are not predefined on the object. If &lt;code&gt;setUnknownProperty()&lt;/code&gt; returns undefined, then &lt;code&gt;set()&lt;/code&gt; will simply set the value on the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9bc3e98978d01fe5df8b62780e4e7ff103e866" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Ember Data&lt;/a&gt; and you are building an &lt;code&gt;RSVP.hash&lt;/code&gt; with the model's relationship, consider instead properly setting up your &lt;a href=&quot;https://guides.emberjs.com/models/relationships&quot;&gt;relationships&lt;/a&gt; and letting Ember Data take care of loading them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba91b0a339b059f7b74dbd2d91ed7bbd146a97a" translate="yes" xml:space="preserve">
          <source>If you use an adapter such as Ember's default &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt; that supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API specification&lt;/a&gt; and if your server endpoint supports the use of an &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include' query parameter&lt;/a&gt;, you can use &lt;code&gt;findAll()&lt;/code&gt; to automatically retrieve additional records related to those requested by supplying an &lt;code&gt;include&lt;/code&gt; parameter in the &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a4de68894db13da2602a19d403640e1580c3d0" translate="yes" xml:space="preserve">
          <source>If you use an adapter such as Ember's default &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;&lt;code&gt;JSONAPIAdapter&lt;/code&gt;&lt;/a&gt; that supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API specification&lt;/a&gt; and if your server endpoint supports the use of an &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;'include' query parameter&lt;/a&gt;, you can use &lt;code&gt;findRecord()&lt;/code&gt; to automatically retrieve additional records related to the one you request by supplying an &lt;code&gt;include&lt;/code&gt; parameter in the &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac0be76ef456159036c40f8a7deafbb0cbba438" translate="yes" xml:space="preserve">
          <source>If you use data binding with a Boolean value, it will add or remove the specified attribute. For example, given this template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764d44ced6a8c8f7a3a4472ba754ecdffb742d7b" translate="yes" xml:space="preserve">
          <source>If you want class names to be determined by properties of the component, you can use class name bindings. If you bind to a Boolean property, the class name will be added or removed depending on the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d3524587024ffaa961ce2a5e490e6aef052ab5" translate="yes" xml:space="preserve">
          <source>If you want to add a class name for a property which evaluates to true and and a different class name if it evaluates to false, you can pass a binding like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815dc87f2b269206fbb541af0ba1536a667f6282" translate="yes" xml:space="preserve">
          <source>If you want to customize the component, in order to handle events or actions, you implement a subclass of &lt;code&gt;Ember.Component&lt;/code&gt; named after the name of the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7fafe0591bb959263727978b0d85daa465c508" translate="yes" xml:space="preserve">
          <source>If you want to define a serializer for your entire application, you'll probably want to use &lt;code&gt;eachAttribute&lt;/code&gt; and &lt;code&gt;eachRelationship&lt;/code&gt; on the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fb4669b916934c08aeb1d33abe9996ffd9d541" translate="yes" xml:space="preserve">
          <source>If you want to highlight a template or component directly within your app, click on the magnifying glass in the Inspector, then hover over the app. As your our mouse passes over it, the related template or component will be highlighted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2aa7b23e214b2783f580943b378db24cc0bc2b" translate="yes" xml:space="preserve">
          <source>If you want to render a template other than the default one, set the route's &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#property_templateName&quot;&gt;&lt;code&gt;templateName&lt;/code&gt;&lt;/a&gt; property to the name of the template you want to render instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69adc82b46306c62f18fccd22416a8cd5463052" translate="yes" xml:space="preserve">
          <source>If you want to run the Inspector on a mobile device, you can use the &lt;a href=&quot;https://github.com/joostdevries/ember-cli-remote-inspector&quot;&gt;Ember CLI Remote Inspector&lt;/a&gt; addon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f9afbe5ccf1f209c2f5100c6802a492d2bbe11" translate="yes" xml:space="preserve">
          <source>If you want to specify &lt;code&gt;app/adapters/custom.js&lt;/code&gt; as a string, do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33652ca88915ad202df8faa26998e3464ed01218" translate="yes" xml:space="preserve">
          <source>If you want to target all browsers with more than a 4% market share in Canada, you'd have the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffc3bdb915f72e2d5ffaaab7591d71b0410c393" translate="yes" xml:space="preserve">
          <source>If you want to update the array and get the latest records from the adapter, you can invoke &lt;a href=&quot;#method_update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e632c2db87c09429428b7f54e2ddff1c168e4fb" translate="yes" xml:space="preserve">
          <source>If you wanted a one way binding between the text area and a div tag somewhere else on your screen, you could use &lt;code&gt;Ember.computed.oneWay&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351cf91131e3ba5c854ba7bdc3096b404847b9d8" translate="yes" xml:space="preserve">
          <source>If you were running &lt;code&gt;ember serve&lt;/code&gt; in another shell, restart the server to include Mirage in your build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a80711f6e3cb47ccfcae6fa3f203065434d5265" translate="yes" xml:space="preserve">
          <source>If you wish to make a more significant contribution be sure to check our &lt;a href=&quot;https://github.com/emberjs/guides/issues&quot;&gt;issue tracker&lt;/a&gt; to see if your issue is already being addressed. If you don't find an active issue, open a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec6f6263694fb50aab8d1fa081e5e63d2b387e3" translate="yes" xml:space="preserve">
          <source>If you wish to reset a query param, you have two options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636ccb0c70995c8ec78b711b2fbaa68458816952" translate="yes" xml:space="preserve">
          <source>If you would like additional bubbling events to be delegated to your views, set your &lt;code&gt;Ember.Application&lt;/code&gt;'s &lt;code&gt;customEvents&lt;/code&gt; property to a hash containing the DOM event name as the key and the corresponding view method name as the value. Setting an event to a value of &lt;code&gt;null&lt;/code&gt; will prevent a default event listener from being added for that event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c28842b476850cdf188d4a68abd094df008a87" translate="yes" xml:space="preserve">
          <source>If you would like the data to be normalized by the model's default serializer before pushing it into the store, you can use the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_pushPayload&quot;&gt;&lt;code&gt;store.pushPayload()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865d9a65eb043f609aa030c7dda383387455f93f" translate="yes" xml:space="preserve">
          <source>If you would like to add your own application or library to the list, you can register it using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacb51fea79f6e5c53ca0ec84c0fe3b4eb1da71b" translate="yes" xml:space="preserve">
          <source>If you would like to create a custom serializer its recommend that you start with the &lt;code&gt;JSONAPISerializer&lt;/code&gt; or &lt;code&gt;JSONSerializer&lt;/code&gt; and extend one of those to match your needs. However, if your payload is extremely different from one of these serializers you can create your own by extending the &lt;code&gt;DS.Serializer&lt;/code&gt; base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3b3e498a148469f0c1085d482741a2910276cc" translate="yes" xml:space="preserve">
          <source>If you would like to force or prevent background reloading, you can set a boolean value for &lt;code&gt;backgroundReload&lt;/code&gt; in the options object for &lt;code&gt;findAll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2391e8de828841b835a93d0133d36c57247f2c61" translate="yes" xml:space="preserve">
          <source>If you would like to force or prevent background reloading, you can set a boolean value for &lt;code&gt;backgroundReload&lt;/code&gt; in the options object for &lt;code&gt;findRecord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5d82f068d754ff6110549f9b0945be0153f6e2" translate="yes" xml:space="preserve">
          <source>If you would like your adapter to use a custom serializer you can set the &lt;code&gt;defaultSerializer&lt;/code&gt; property to be the name of the custom serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3695e95a37faaa025ccc41bbfe2e3e98c24934eb" translate="yes" xml:space="preserve">
          <source>If you would prefer to use a custom value instead of the dasherized property name, you can pass a binding like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7383e3aba09b180a7822830aba0d585c9562e58a" translate="yes" xml:space="preserve">
          <source>If you would prefer to use a custom value instead of the property name, you can create the same markup as the last example with a binding like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef951fcf9baa83009dd56e3643da116682c54bc7" translate="yes" xml:space="preserve">
          <source>If you'd like to control the order in which initializers run, you can use the &lt;code&gt;before&lt;/code&gt; and/or &lt;code&gt;after&lt;/code&gt; options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b89a3010d6df4cb0e7dba26234407d7a5f7c7c" translate="yes" xml:space="preserve">
          <source>If you'd like to inject a service with the same name as the property, simply leave off the service name (the dasherized version of the name will be used):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37b9d02aefb6b34dfafabb6d8dd83ebfcc3ec25" translate="yes" xml:space="preserve">
          <source>If you're not sure whether you have Node.js or the right version, run this on your command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095ad1f97dce1fe97dc5ce65f718dbb870d80c50" translate="yes" xml:space="preserve">
          <source>If you're streaming data or implementing an adapter, make sure that you have converted the incoming data into this form. The store's &lt;a href=&quot;#method_normalize&quot;&gt;normalize&lt;/a&gt; method is a convenience helper for converting a json payload into the form Ember Data expects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cb66b4e4103786779634f2b5a26ced432e9239" translate="yes" xml:space="preserve">
          <source>If you're using the &lt;a href=&quot;https://github.com/embersherpa/ember-cli-app-version&quot;&gt;ember-cli-app-version&lt;/a&gt; addon, your application's name and version will be added to the list automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251344c7bd4f41e910f469092d20ca8445eb6c13" translate="yes" xml:space="preserve">
          <source>If your Ember application is one of multiple web applications served from the same domain, it may be necessary to indicate to the router what the root URL for your Ember application is. By default, Ember will assume it is served from the root of your domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25186c61f15c11ab806be5a9286f8dae6f3fe16" translate="yes" xml:space="preserve">
          <source>If your backend has some consistent rules you can define an &lt;code&gt;adapter:application&lt;/code&gt;. The &lt;code&gt;adapter:application&lt;/code&gt; will get priority over the default Adapter, however it will still be superseded by model specific Adapters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846ea89f048b79b140e43b6fe9e234481fd9915d" translate="yes" xml:space="preserve">
          <source>If your enumerable is composed of objects, there is a &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_mapBy&quot;&gt;&lt;code&gt;mapBy()&lt;/code&gt;&lt;/a&gt; method that will extract the named property from each of those objects in turn and return a new array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0f2b0bb38cb9adaff193b9dd72e74317a4abb8" translate="yes" xml:space="preserve">
          <source>If your server API or your adapter only provides array responses but you wish to retrieve just a single record, you can alternatively use the &lt;code&gt;query()&lt;/code&gt; method as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4058c0ce711315ee0b4423e4f1c3a010f93ec5" translate="yes" xml:space="preserve">
          <source>If your state does not set a value for a given flag, the value will be inherited from its parent (or the first place in the state hierarchy where it is defined).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db4b38bb9f3c04d00f26e64fe62f8e77fdce964" translate="yes" xml:space="preserve">
          <source>Imagine we are writing a web app for a site that lets users list their properties to rent. At any given time, we should be able to answer questions about the current state like &lt;em&gt;What rental are they looking at?&lt;/em&gt; and &lt;em&gt;Are they editing it?&lt;/em&gt; In Ember, the answer to these questions is determined by the URL. The URL can be set in a few ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8439d9c935e45049eff75e911e1ac674191f03" translate="yes" xml:space="preserve">
          <source>Imagine we are writing a web app for managing a blog. At any given time, we should be able to answer questions like &lt;em&gt;What post are they looking at?&lt;/em&gt; and &lt;em&gt;Are they editing it?&lt;/em&gt; In Ember.js, the answer to these questions is determined by the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd8215fd5579fcac349f1f3d66eb2b974247b86" translate="yes" xml:space="preserve">
          <source>Imagine we're building an application where users can have accounts. We need to build the UI for users to delete their account. Because we don't want users to accidentally delete their accounts, we'll build a button that requires the user to confirm in order to trigger some action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5500a79f8100b20c15ba44761eb5ee566dd17036" translate="yes" xml:space="preserve">
          <source>Imagine you have a typeahead component that uses &lt;a href=&quot;http://emberjs.com/api/classes/Ember.run.html#method_debounce&quot;&gt;&lt;code&gt;Ember.run.debounce&lt;/code&gt;&lt;/a&gt; to limit requests to the server, and you want to verify that results are displayed after typing a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d307e4de142d3aecdd704f2f1113fa3bd42984" translate="yes" xml:space="preserve">
          <source>Imagine you have the following component that changes its title when a button is clicked on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6176b6ffa892fddc99b619072a50ff9436c44f6a" translate="yes" xml:space="preserve">
          <source>Imagine you have the following component that uses a location service to display the city and country of your current location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f5c060ec68d1e4cd89cdcfa7e6e383991271b1" translate="yes" xml:space="preserve">
          <source>Imagine your app is in a route that's displaying a complex form for the user to fill out and the user accidentally navigates backwards. Unless the transition is prevented, the user might lose all of the progress they made on the form, which can make for a pretty frustrating user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d9f7f0f7530948a86e88ddfedd6530f0caaf23" translate="yes" xml:space="preserve">
          <source>Immediate allows you to run the function immediately, but debounce other calls for this function until the wait time has elapsed. If &lt;code&gt;debounce&lt;/code&gt; is called again before the specified time has elapsed, the timer is reset and the entire period must pass again before the method can be called again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1eee007d228e27ce11b63da7796f4277398eb6f" translate="yes" xml:space="preserve">
          <source>Implement an Ember.onerror hook to log all errors in production</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ded73113c17939544427e051fc4e1b10bdd9e2" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass to handle the creation of new records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848b4a0426db8242209c99b16a964aa82ef6c7b2" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass to handle the deletion of a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c2c7d66ed7442f6c9d8636a2615c54a24453e2" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass to handle the updating of a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59900d07c9905339bce32756f7c459df8b522597" translate="yes" xml:space="preserve">
          <source>Implementations</source>
          <target state="translated">Implementations</target>
        </trans-unit>
        <trans-unit id="5749b6c17deb5f67f01bdaeb1e175622d2081b94" translate="yes" xml:space="preserve">
          <source>Implementing Acceptance Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc6530e3b3f8ddfeab09f763833df3f225faa7e" translate="yes" xml:space="preserve">
          <source>Implementing In Your Own Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085b4f177ad0073a59d881f34199b37baba61a3b" translate="yes" xml:space="preserve">
          <source>Implementing the Action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af9db788eeb484422c8e1485dd28bfe2aa85747" translate="yes" xml:space="preserve">
          <source>Implements some standard methods for copying an object. Add this mixin to any object you create that can create a copy of itself. This mixin is added automatically to the built-in array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686d97d62922d0e28ae5f215f382872f4fc0ace1" translate="yes" xml:space="preserve">
          <source>Import the console</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f669d835da282209b875552f36c9c65a13c0d8e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Ember.Component&lt;/code&gt; the &lt;code&gt;classNames&lt;/code&gt;, &lt;code&gt;classNameBindings&lt;/code&gt; and &lt;code&gt;attributeBindings&lt;/code&gt; properties are concatenated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af45ead0e06672506b4213354f87e72e4fa00cc4" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Ember.Route&lt;/code&gt; the &lt;code&gt;queryParams&lt;/code&gt; property is merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363556950c4e3e42367fb50a0ce29bf1c0ca49ef" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app/components/list-filter.js&lt;/code&gt;, we have as the top-level element rendered by the component a class called &lt;code&gt;list-filter&lt;/code&gt;. We locate the search input within the component using the selector &lt;code&gt;.list-filter input&lt;/code&gt;, since we know that there is only one input element located in the list-filter component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8e5dcf45b31e402466165d21236e5680154868" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;app/templates/rentals.hbs&lt;/code&gt;, we wrapped each rental display in an &lt;code&gt;article&lt;/code&gt; element, and gave it a class called &lt;code&gt;listing&lt;/code&gt;. We will use the listing class to find out how many rentals are shown on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b5455ab5e863cb45f23c6155964d959ba4d78e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;tests/helpers/start-app.js&lt;/code&gt; you need to import the helper file: it will be registered then.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f4488bf4216cd4bc33d2fd1f75097a5b82ebe6" translate="yes" xml:space="preserve">
          <source>In Ember Data a Serializer is used to serialize and deserialize records when they are transferred in and out of an external source. This process involves normalizing property names, transforming attribute values and serializing relationships.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8922e3d50ca93e7c84b802b56fd99728ccbe9b7" translate="yes" xml:space="preserve">
          <source>In Ember Data the convention is to camelize attribute names on a model. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3423404267da66f099eae4647eaa045a734aa6" translate="yes" xml:space="preserve">
          <source>In Ember Data, each model is represented by a subclass of &lt;code&gt;Model&lt;/code&gt; that defines the attributes, relationships, and behavior of the data that you present to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020e90ae09785d28cf10b4def255217593210b22" translate="yes" xml:space="preserve">
          <source>In Ember Data, serializers format the data sent to and received from the backend store. By default, Ember Data serializes data using the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;JSON API&lt;/a&gt; format. If your backend uses a different format, Ember Data allows you to customize the serializer or use a different serializer entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecd6eaaa78b6b77faca6acf56bc4d2b25bc6da4" translate="yes" xml:space="preserve">
          <source>In Ember Data, the Adapter determines how data is persisted to a backend data store, such as the URL format and headers for a REST API. (The format of the data itself is determined by the &lt;a href=&quot;../customizing-serializers&quot;&gt;serializer&lt;/a&gt;.) Ember Data's default Adapter has some built-in assumptions of how a &lt;a href=&quot;http://jsonapi.org/&quot;&gt;REST API should look&lt;/a&gt;. If your backend conventions differ from these assumptions Ember Data makes it easy to change its functionality by swapping out or extending the default Adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db44b947e78ed42835c3e89cbb1845b2188747cb" translate="yes" xml:space="preserve">
          <source>In Ember, each component can have a property called &lt;code&gt;actions&lt;/code&gt;, where you put functions that can be &lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;invoked by the user interacting with the component itself&lt;/a&gt;, or by child components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ebdf263834b3a8deec07fdd38c511e4b452491" translate="yes" xml:space="preserve">
          <source>In Ember, route handlers are responsible for loading the model with data for the page. It loads the data in a function called &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;model&lt;/code&gt; function acts as a &lt;strong&gt;hook&lt;/strong&gt;, meaning that Ember will call it for us during different times in our app. The model function we've added to our &lt;code&gt;rentals&lt;/code&gt; route handler will be called when a user navigates to the rentals route via root URL &lt;code&gt;http://localhost:4200&lt;/code&gt;, or via &lt;code&gt;http://localhost:4200/rentals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66f0e171cccc0300caf2d08e6c8d06bc62b260f" translate="yes" xml:space="preserve">
          <source>In Ember, this is accomplished by defining routes with &lt;a href=&quot;../defining-your-routes#toc_dynamic-segments&quot;&gt;dynamic segments&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d52c5d2be424b7a7b55ef72d7cd326d708e343" translate="yes" xml:space="preserve">
          <source>In Ember, when we want to make a new page that can be visited using a URL, we need to generate a &quot;route&quot; using Ember CLI. For a quick overview of how Ember structures things, see &lt;a href=&quot;https://guides.emberjs.com/getting-started/core-concepts/&quot;&gt;our diagram on the Core Concepts page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca956c24b0f6ba6fa8075e34fb2089e115484a51" translate="yes" xml:space="preserve">
          <source>In Ember.js, an enumerable is any object that contains a number of child objects, and which allows you to work with those children using the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable&lt;/a&gt; API. The most common enumerable in the majority of apps is the native JavaScript array, which Ember.js extends to conform to the enumerable interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ce4856798aa530d952b1ebe2ecec3f3b250ee7" translate="yes" xml:space="preserve">
          <source>In a nutshell, computed properties let you declare functions as properties. You create one by defining a computed property as a function, which Ember will automatically call when you ask for the property. You can then use it the same way you would any normal, static property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d191d8024044c3d2bb0916e344bb9d2781826852" translate="yes" xml:space="preserve">
          <source>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9281e00ac840444526df6694bf8372391ca752a0" translate="yes" xml:space="preserve">
          <source>In a route's &lt;code&gt;model()&lt;/code&gt; method, you return whatever data you want to make available to the template. If you need to fetch data asynchronously, the &lt;code&gt;model()&lt;/code&gt; method supports any library that uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;JavaScript Promises&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8450844a292c3442cc4e0a46efcffc690c49dda0" translate="yes" xml:space="preserve">
          <source>In addition to adding individual links to each route of our app, we'd like to add a common header across the top of our page to display our app's title and its navigation bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7248d7673840d370bb2a00652d49b93067601785" translate="yes" xml:space="preserve">
          <source>In addition to being used as a block expression, the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt;&lt;code&gt;link-to&lt;/code&gt;&lt;/a&gt; component can also be used in inline form by specifying the link text as the first argument to the component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5953bb9c3faa1e5036e7ae03005755f4e8bd4841" translate="yes" xml:space="preserve">
          <source>In addition to changing the property, &lt;code&gt;set()&lt;/code&gt; will also register a property change with the object. Unless you have placed this call inside of a &lt;code&gt;beginPropertyChanges()&lt;/code&gt; and &lt;code&gt;endPropertyChanges(),&lt;/code&gt; any &quot;local&quot; observers (i.e. observer methods declared on the same object), will be called immediately. Any &quot;remote&quot; observers (i.e. observer methods declared on another object) will be placed in a queue and called at a later time in a coalesced manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b19db7074a456639b43a683fd4acf06c9ec937" translate="yes" xml:space="preserve">
          <source>In addition to configuring your app itself, you can also configure Ember CLI. These configurations can be made by adding them to the &lt;code&gt;.ember-cli&lt;/code&gt; file in your application's root. Many can also be made by passing them as arguments to the command line program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04120f2584ff44f86df756f40d954b030cf830f7" translate="yes" xml:space="preserve">
          <source>In addition to creating your application's router, &lt;code&gt;Ember.Application&lt;/code&gt; is also responsible for telling the router when to start routing. Transitions between routes can be logged with the &lt;code&gt;LOG_TRANSITIONS&lt;/code&gt; flag, and more detailed intra-transition logging can be logged with the &lt;code&gt;LOG_TRANSITIONS_INTERNAL&lt;/code&gt; flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b810ca88c49148bf8529cc730957d08ba23a00" translate="yes" xml:space="preserve">
          <source>In addition to inspecting the properties above, you can inspect properties that hold Ember objects or arrays. Click on the property's value to inspect it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0d0a4a5b5ef9e676466f88a09f5d5e815adf21" translate="yes" xml:space="preserve">
          <source>In addition to normal text, you may also want to have your templates contain HTML elements whose attributes are bound to the controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb71985b0bd4715b94d142d94c6c0f1cc1875107" translate="yes" xml:space="preserve">
          <source>In addition to our &lt;code&gt;about&lt;/code&gt; and &lt;code&gt;contact&lt;/code&gt; pages, we want to show a list of rentals that our visitors can look through. So let's add a third route and call it &lt;code&gt;rentals&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221b9fa6557159911efe423de7834a91511421a1" translate="yes" xml:space="preserve">
          <source>In addition to passing a target, you can also include an options hash which you can use to override the method names that will be invoked on the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf82e6f4f7f4bfd42ef97a57af6350e73eea3b24" translate="yes" xml:space="preserve">
          <source>In addition to passing parameters in by name, you can pass them in by position. In other words, you can invoke the above component example like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5fbbcc31f1d06e473058b4269ca9384c6c9271" translate="yes" xml:space="preserve">
          <source>In addition to the callback you can also pass an &lt;code&gt;initialValue&lt;/code&gt;. An error will be raised if you do not pass an initial value and the enumerator is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07f561ab6435c37fbe776d0dd4427c73cfa82d8" translate="yes" xml:space="preserve">
          <source>In addition to the simple form you've learned so far, components also support being used in &lt;strong&gt;block form&lt;/strong&gt;. In block form, components can be passed a Handlebars template that is rendered inside the component's template wherever the &lt;code&gt;{{yield}}&lt;/code&gt; expression appears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a2dff726af17914875d675aa37e2809297fe95" translate="yes" xml:space="preserve">
          <source>In an application, it is often easier to specify an &lt;code&gt;serializer:application&lt;/code&gt;. However, if you are the author of a community adapter it is important to remember to set this property to ensure Ember does the right thing in the case a user of your adapter does not specify an &lt;code&gt;serializer:application&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c77afa69f947e520b0cbca942a8919e2127e88f" translate="yes" xml:space="preserve">
          <source>In both of the examples above, &lt;code&gt;incomplete&lt;/code&gt; is an array containing the single incomplete todo:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb81a4985c1f1949a783d5976c86e8a62cd78f8" translate="yes" xml:space="preserve">
          <source>In case you want to sort the query parameters with a different criteria, set &lt;code&gt;sortQueryParams&lt;/code&gt; to your custom sort function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007ab8f7c6edaf0f49f780117c3562ef72548a77" translate="yes" xml:space="preserve">
          <source>In cases like this, it's important that we include some information in the URL about not only which template to display, but also which model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140bf4c66987841001d1b34fe2e3605f89d02589" translate="yes" xml:space="preserve">
          <source>In cases where components have dependencies on Ember services, it is possible to stub these dependencies for integration tests. You stub Ember services by using the built-in &lt;code&gt;register()&lt;/code&gt; function to register your stub service in place of the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea60124c7e95e893e7721d8b9cbc140fc37b6eb" translate="yes" xml:space="preserve">
          <source>In cases where you have components nested inside other components, the child component will always receive the &lt;code&gt;didInsertElement()&lt;/code&gt; call before its parent does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efac470050e0447cd220bd2bbe07a00a4499c07f" translate="yes" xml:space="preserve">
          <source>In certain cases, you will want to pass arguments to &lt;code&gt;_super()&lt;/code&gt; before or after overriding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bf8f22c794258b2e001fea31db958ba6c95820" translate="yes" xml:space="preserve">
          <source>In general, if the display of your view changes, you should modify the DOM element directly instead of manually calling &lt;code&gt;rerender&lt;/code&gt;, which can be slow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eadba08dcf842bcd6e05a3d8a08469fe1157820" translate="yes" xml:space="preserve">
          <source>In general, you should prefer using components if you are wrapping content in HTML. However, if you really want to include a mix of HTML and values from models in what you return from the helper, make sure you escape anything that may have come from an untrusted user with the &lt;code&gt;escapeExpression&lt;/code&gt; utility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83972353d37463127261822a6f4e792cba94fc19" translate="yes" xml:space="preserve">
          <source>In many cases, the ceremony of a full &lt;code&gt;Ember.Helper&lt;/code&gt; class is not required. The &lt;code&gt;helper&lt;/code&gt; method create pure-function helpers without instances. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d7fe6b2728af61cd6e8f8f05879e65deb09332" translate="yes" xml:space="preserve">
          <source>In most cases, your application's entire UI will be created by templates that are managed by the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9979806abc09c97bad619e26ee37720832229b8b" translate="yes" xml:space="preserve">
          <source>In non-browser mode, because Ember does not have access to jQuery, this options must be specified as a DOM &lt;code&gt;Element&lt;/code&gt; object instead of a selector string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08ca441bd16cdb06d31bfc505ab1952ccb60839" translate="yes" xml:space="preserve">
          <source>In non-browser mode, this could be a &quot;&lt;code&gt;Document&lt;/code&gt;-like&quot; object as Ember only interact with a small subset of the DOM API in non- interactive mode. While the exact requirements have not yet been formalized, the &lt;code&gt;SimpleDOM&lt;/code&gt; library's implementation is known to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32f151731ef842cca2362270b4a8bb09fc22890" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;confirmValue&lt;/code&gt; to take on the value of the message text, we'll bind the property to the value of a user input field that will appear when the button is clicked. To accomplish this, we'll first modify the component so that it can be used in block form and we will &lt;a href=&quot;../wrapping-content-in-a-component&quot;&gt;yield&lt;/a&gt;&lt;code&gt;confirmValue&lt;/code&gt; to the block within the &lt;code&gt;&quot;confirmDialog&quot;&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fbb24fad6ae7ae60b72e40ef4ddb75d5c21e0e" translate="yes" xml:space="preserve">
          <source>In order for Ember to observe when you make a change to an enumerable, you need to use special methods that &lt;code&gt;Ember.Enumerable&lt;/code&gt; provides. For example, if you add an element to an array using the standard JavaScript method &lt;code&gt;push()&lt;/code&gt;, Ember will not be able to observe the change, but if you use the enumerable method &lt;code&gt;pushObject()&lt;/code&gt;, the change will propagate throughout your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936cfa8baf9fcf4794eab9ec69dff360d88aa7fc" translate="yes" xml:space="preserve">
          <source>In order for this to work, we need our application to default to making requests to the namespace of &lt;code&gt;/api&lt;/code&gt;. To do this, we want to generate an application adapter. An &lt;a href=&quot;https://guides.emberjs.com/models/customizing-adapters&quot;&gt;Adapter&lt;/a&gt; is an object that &lt;a href=&quot;https://guides.emberjs.com/models&quot;&gt;Ember Data&lt;/a&gt; uses to determine how we communicate with our backend. We will cover Ember Data in more detail later in this tutorial. For now, let's generate an adapter for our application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee6874cf19c007eb98370f9ddd7c8bc33406709" translate="yes" xml:space="preserve">
          <source>In order for your application to behave correctly, you will need to manually extend or create the objects that the native objects were creating before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1342c5f6a6769bf64e4015aa6508ea15a1d91f76" translate="yes" xml:space="preserve">
          <source>In order to do this, we will need to modify the Mirage &lt;code&gt;config.js&lt;/code&gt; file that we added back in the &lt;a href=&quot;../installing-addons&quot;&gt;Installing Addons section&lt;/a&gt;. We will add a new route handler to return a specific rental:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32aafffe8049443d7fbfd609d0de1ed4fdc3d72c" translate="yes" xml:space="preserve">
          <source>In order to keep track of unique records in the store Ember Data expects every record to have an &lt;code&gt;id&lt;/code&gt; property in the payload. Ids should be unique for every unique record of a specific type. If your backend uses a key other than &lt;code&gt;id&lt;/code&gt; you can use the serializer's &lt;code&gt;primaryKey&lt;/code&gt; property to correctly transform the id property to &lt;code&gt;id&lt;/code&gt; when serializing and deserializing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc5b2c4cb20571c816f7c9ebed2212e3ddf27a6" translate="yes" xml:space="preserve">
          <source>In order to make a property available to a component, you must pass it in like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a9efb1c8792f0b1fcf5fd7c6f4efd0669bf530" translate="yes" xml:space="preserve">
          <source>In order to test the &lt;code&gt;doSomething&lt;/code&gt; method we create an instance of &lt;code&gt;SomeThing&lt;/code&gt;, update the observed property (&lt;code&gt;foo&lt;/code&gt;), and assert that the expected effects are present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8dd7f817efbf58fba8261fd92fb0f81d2f4e58" translate="yes" xml:space="preserve">
          <source>In other words, this creates static properties and functions for the class. These are only available on the class and not on any instance of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5445313fa7bfb3488d6f91f5f8f2b43e93ba0f1" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;app/templates/rentals.hbs&lt;/code&gt; template file, we'll add a reference to our new &lt;code&gt;list-filter&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2116b9426c29914e268f39162e786a2c0adfa0a2" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;user-profile.hbs&lt;/code&gt; template we change our action to call &lt;code&gt;deleteCurrentUser&lt;/code&gt; as passed above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9497620e82225ac6f9b3af239194c032f2e45bd" translate="yes" xml:space="preserve">
          <source>In our case, the explicit argument that we pass to &lt;code&gt;onConfirm&lt;/code&gt; will be the required &lt;code&gt;messageText&lt;/code&gt;. However, remember that internally our &lt;code&gt;button-with-confirmation&lt;/code&gt; component does not know or care that it is being used in a messaging application. Therefore within the component's javascript file, we will use a property &lt;code&gt;confirmValue&lt;/code&gt; to represent that argument and pass it to &lt;code&gt;onConfirm&lt;/code&gt; as shown here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f19c995ec2ef48bcad1cd089c058b458a09565" translate="yes" xml:space="preserve">
          <source>In our case, the parent route had already loaded its songs, so we would be writing unnecessary fetching logic. Let's rewrite the same route, but use &lt;code&gt;modelFor&lt;/code&gt;, which works the same way, but returns the model from the parent route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab00f79b5b48c8f1f0ea5a0331c23e5730af5d63" translate="yes" xml:space="preserve">
          <source>In our example, you might notice that if you type quickly that the results might get out of sync with the current filter text entered. This is because our data filtering function is &lt;em&gt;asynchronous&lt;/em&gt;, meaning that the code in the function gets scheduled for later, while the code that calls the function continues to execute. Often code that may make network requests is set up to be asynchronous because the server may return its responses at varying times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9d6c5514380d3807c115c8027e9e896e5141b5" translate="yes" xml:space="preserve">
          <source>In our index route handler, we add the &lt;code&gt;replaceWith&lt;/code&gt; invocation to &lt;code&gt;beforeModel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425e757fb86358d75ef49ed41315cc99298b82f5" translate="yes" xml:space="preserve">
          <source>In our index route handler, we'll call the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_replaceWith&quot;&gt;&lt;code&gt;replaceWith&lt;/code&gt;&lt;/a&gt; function. The &lt;code&gt;replaceWith&lt;/code&gt; function is similar to the route's &lt;code&gt;transitionTo&lt;/code&gt; function, the difference being that &lt;code&gt;replaceWith&lt;/code&gt; will replace the current URL in the browser's history, while &lt;code&gt;transitionTo&lt;/code&gt; will add to the history. Since we want our &lt;code&gt;rentals&lt;/code&gt; route to serve as our home page, we will use the &lt;code&gt;replaceWith&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab231d10ac181b0f4640cd55eb14e158fe262e49" translate="yes" xml:space="preserve">
          <source>In our list filter component JavaScript, we use the &lt;code&gt;query&lt;/code&gt; property to compare to the &lt;code&gt;value&lt;/code&gt; property of the component. The &lt;code&gt;value&lt;/code&gt; property represents the latest state of the input field. Therefore we now check that results match the input field, ensuring that results will stay in sync with the last thing the user has typed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d535ca7e3e2be527f15c355940eb17c846d552" translate="yes" xml:space="preserve">
          <source>In our tests, we also call two helpers (&lt;code&gt;visit&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt;) one after another. Although Ember does a number of things when we make those calls, Ember hides those complexities by giving us these &lt;a href=&quot;https://guides.emberjs.com/testing/acceptance/#toc_asynchronous-helpers&quot;&gt;asynchronous test helpers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b560515f778de07c2ca3c994165438d4d3304fb6" translate="yes" xml:space="preserve">
          <source>In our user &lt;code&gt;button-with-confirmation&lt;/code&gt; component we want to leave the confirmation modal open until we know that the operation has completed successfully. This is accomplished by expecting a promise to be returned from &lt;code&gt;onConfirm&lt;/code&gt;. Upon resolution of the promise, we set a property used to indicate the visibility of the confirmation modal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50690af88ab50f9c9d8d696d223983efb84b8bd" translate="yes" xml:space="preserve">
          <source>In particular, what this means is that if you get an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element's &lt;code&gt;value&lt;/code&gt; attribute and then re-render the template with the same value, it will avoid clobbering the cursor and selection position. Since most attribute sets are idempotent in the browser, you typically can get away with reading attributes using jQuery, but the most reliable way to do so is through this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173d782e0322b7aa8b817bd02bfb67f582bec848" translate="yes" xml:space="preserve">
          <source>In practice, this is only useful in non-browser environment or in non-interactive mode, because Ember's &lt;code&gt;jQuery&lt;/code&gt; dependency is implicitly bound to the current document, causing event delegation to not work properly when the app is rendered into a foreign document object (such as an iframe's &lt;code&gt;contentDocument&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6cf706bc188aa758d6da4e272aa9c65097c3d6" translate="yes" xml:space="preserve">
          <source>In response to &lt;code&gt;queryRecord()&lt;/code&gt; being called, you should always fetch fresh data. Once found, you can asynchronously call the store's &lt;code&gt;push()&lt;/code&gt; method to push the record into the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa32d137f104b735ab84633f3591ddf26cbba0ca" translate="yes" xml:space="preserve">
          <source>In short:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebec2c949c263672a42bb7da4a5fd65b6941558b" translate="yes" xml:space="preserve">
          <source>In some cases your component needs to define event handlers, perhaps to support various draggable behaviors. For example, a component may need to send an &lt;code&gt;id&lt;/code&gt; when it receives a drop event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d0c4d651665d1d4131d9379028d4d27e9ba051" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to annotate computed properties with additional metadata about how they function or what values they operate on. For example, computed property functions may close over variables that are then no longer available for introspection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cb9cb7e37a955d210b2dbde6d78cbf98ffd788" translate="yes" xml:space="preserve">
          <source>In some cases, you might not want the sticky query param value to be scoped to the route's model but would rather reuse a query param's value even as a route's model changes. This can be accomplished by setting the &lt;code&gt;scope&lt;/code&gt; option to &lt;code&gt;&quot;controller&quot;&lt;/code&gt; within the controller's &lt;code&gt;queryParams&lt;/code&gt; config hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366789bd28766b0562cd1391007f9b613a32f0bf" translate="yes" xml:space="preserve">
          <source>In some cases, your dynamic headers may require data from some object outside of Ember's observer system (for example &lt;code&gt;document.cookie&lt;/code&gt;). You can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ComputedProperty.html#method_volatile&quot;&gt;volatile&lt;/a&gt; function to set the property into a non-cached mode causing the headers to be recomputed with every request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ee070ea25690e7b5aa79d3084e61cad4a33518" translate="yes" xml:space="preserve">
          <source>In some cases, your dynamic headers may require data from some object outside of Ember's observer system (for example &lt;code&gt;document.cookie&lt;/code&gt;). You can use the &lt;a href=&quot;https://emberjs.com/api/classes/Ember.ComputedProperty.html#method_volatile&quot;&gt;volatile&lt;/a&gt; function to set the property into a non-cached mode causing the headers to be recomputed with every request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41f8e0e035c7439f25ee436f1342763b84a965c" translate="yes" xml:space="preserve">
          <source>In some circumstances, the built-in attribute types of &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, and &lt;code&gt;date&lt;/code&gt; may be inadequate. For example, a server may return a non-standard date format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04384891970233c3962d09d6865cbe4e29b0d010" translate="yes" xml:space="preserve">
          <source>In some situations, however, you may need to write a helper that interacts with the rest of your application. You can create class-based helpers that have access to services in your application, and can optionally save state as well, although this is usually unnecessary and error-prone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972f9bf507fe0694b8e683b6248ff4d2ef87d91c" translate="yes" xml:space="preserve">
          <source>In sum, arguments are good for passing values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca500ed8598046d69760ae65911fa122f3d0d3d1" translate="yes" xml:space="preserve">
          <source>In that case, we can use the &lt;code&gt;{{blog-post}}&lt;/code&gt; component in &lt;strong&gt;block form&lt;/strong&gt; and tell Ember where the block content should be rendered using the &lt;code&gt;{{yield}}&lt;/code&gt; helper. To update the example above, we'll first change the component's template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6054162f1d5a374a22c8f9796936dae869115d" translate="yes" xml:space="preserve">
          <source>In that case, you can implement &lt;code&gt;serialize&lt;/code&gt; yourself and return a JSON hash of your choosing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7da431b2fc85635b63c6fd2ff4f9b950a376545" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;andThen&lt;/code&gt; helper, we finally make our call to &lt;code&gt;assert.equal&lt;/code&gt; which makes an assertion that the text found in the first li of the ul whose class is &quot;posts&quot; is equal to &quot;My new post&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e1a7001b9c9a1d09b20d044dff01afcd7c8c05" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;beforeEach&lt;/code&gt; function that runs before each test, we use the built-in function &lt;code&gt;this.register&lt;/code&gt; to &lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection/#toc_factory-registrations&quot;&gt;register&lt;/a&gt; our stub service in place of the maps service. Registration makes an object available to your Ember application for things like loading components from templates and injecting services in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252fa88395304e7562b89517d29f494bcfff26dc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;filterByCity&lt;/code&gt; function in the rental controller above, we've added a new property called &lt;code&gt;query&lt;/code&gt; to the filter results instead of just returning an array of rentals as before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ec2eed51bacc33dfcdd4448a42bd11fa37e803" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;model&lt;/code&gt; hook for routes with dynamic segments, it's your job to turn the ID (something like &lt;code&gt;47&lt;/code&gt; or &lt;code&gt;post-slug&lt;/code&gt;) into a model that can be rendered by the route's template. In the above example, we use the photo's ID (&lt;code&gt;params.photo_id&lt;/code&gt;) as an argument to Ember Data's &lt;code&gt;findRecord&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cf6fcfb9003d844f16d5ca0bdf69f4406f850b" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;songs&lt;/code&gt; template, we can specify both models and use the &lt;code&gt;{{#each}}&lt;/code&gt; helper to display each record in the song model and album model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca18914c710cd5a7ce445c84f20480dcd1681b2b" translate="yes" xml:space="preserve">
          <source>In the above component, &lt;code&gt;didDrop&lt;/code&gt; is the &lt;code&gt;action&lt;/code&gt; passed in. This action is called from the &lt;code&gt;drop&lt;/code&gt; event handler and passes one argument to the action - the &lt;code&gt;id&lt;/code&gt; value found through the &lt;code&gt;drop&lt;/code&gt; event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84011bb6979400cdc64045430ee5a1471aeae3d8" translate="yes" xml:space="preserve">
          <source>In the above example we have successfully used a wildcard route to handle all routes not managed by our application so that when a user navigates to &lt;code&gt;/a/non-existent/path&lt;/code&gt; they will be shown a message that says the page they're looking for wasn't found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee8746e7bdb361c3d2fffd5349c5c7faaf40e0a" translate="yes" xml:space="preserve">
          <source>In the above example we use the &lt;code&gt;init&lt;/code&gt; hook to seed our initial listings by calling the &lt;code&gt;filter&lt;/code&gt; action with an empty value. Our &lt;code&gt;handleFilterEntry&lt;/code&gt; action calls a function called &lt;code&gt;filter&lt;/code&gt; based on the &lt;code&gt;value&lt;/code&gt; attribute set by the input helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7c6bc0ecaa7c7b4083577fdf97a5a93932117c" translate="yes" xml:space="preserve">
          <source>In the above example with the run loop, since the user's attributes end up at the same values as before execution, the template will not even rerender!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b3bb5c80cc64b8ee7712f5f993105b22dd6d26" translate="yes" xml:space="preserve">
          <source>In the above example, if any of the methods &lt;code&gt;fetchPhotosOfUsers&lt;/code&gt;, &lt;code&gt;applyInstagramFilters&lt;/code&gt;, or &lt;code&gt;uploadTrendyPhotoAlbum&lt;/code&gt; returns a promise that rejects, &lt;code&gt;handleErrors&lt;/code&gt; will be called with the reason for the failure. In this manner, promises approximate an asynchronous form of try-catch statements that prevent the rightward flow of nested callback after nested callback and facilitate a saner approach to managing complex asynchronous logic in your applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daabf4d9b94a3c6d9eebfe03f15ebf2d13606ae" translate="yes" xml:space="preserve">
          <source>In the above example, the error event would stop right at &lt;code&gt;route:good-for-nothing&lt;/code&gt;'s error handler and not continue to bubble. To make the event continue bubbling up to &lt;code&gt;route:application&lt;/code&gt;, you can return true from the error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c13863c238fa0a5e51c22efcf7d517515f9a296" translate="yes" xml:space="preserve">
          <source>In the above example, the event is &lt;code&gt;render.handlebars&lt;/code&gt;, and the subscriber listened for all events beginning with &lt;code&gt;render&lt;/code&gt;. It would receive callbacks for events named &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;render.handlebars&lt;/code&gt;, &lt;code&gt;render.container&lt;/code&gt;, or even &lt;code&gt;render.handlebars.layout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887acf9d1f48c5f8eb93da27b8bc375ccdfac816" translate="yes" xml:space="preserve">
          <source>In the above example, the model hook for &lt;code&gt;PhotoRoute&lt;/code&gt; will run with &lt;code&gt;params.photo_id = 5&lt;/code&gt;. The &lt;code&gt;model&lt;/code&gt; hook for &lt;code&gt;CommentRoute&lt;/code&gt;&lt;em&gt;won't&lt;/em&gt; run since you supplied a model object for the &lt;code&gt;comment&lt;/code&gt; segment. The comment's id will populate the url according to &lt;code&gt;CommentRoute&lt;/code&gt;'s &lt;code&gt;serialize&lt;/code&gt; hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5249e3e3ca6ca64b1b4e40e527e5e6d7c81ad18c" translate="yes" xml:space="preserve">
          <source>In the above examples, &lt;code&gt;direction&lt;/code&gt; is presumably a query param property on the &lt;code&gt;posts&lt;/code&gt; controller, but it could also refer to a &lt;code&gt;direction&lt;/code&gt; property on any of the controllers associated with the &lt;code&gt;posts&lt;/code&gt; route hierarchy, matching the leaf-most controller with the supplied property name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e506d89863cd166b3912ada6024e3e490fb98a9" translate="yes" xml:space="preserve">
          <source>In the case above, the parent route looked something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478d1d20aa2b757e8e0a695fb76aab0ddf784f90" translate="yes" xml:space="preserve">
          <source>In the case where embedded JSON is expected while extracting a payload (reading) the setting is &lt;code&gt;deserialize: 'records'&lt;/code&gt;, there is no need to use &lt;code&gt;ids&lt;/code&gt; when extracting as that is the default behavior without this mixin if you are using the vanilla &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt;. Likewise, to embed JSON in the payload while serializing &lt;code&gt;serialize: 'records'&lt;/code&gt; is the setting to use. There is an option of not embedding JSON in the serialized payload by using &lt;code&gt;serialize: 'ids'&lt;/code&gt;. If you do not want the relationship sent at all, you can use &lt;code&gt;serialize: false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b835eb8d79c04d2b211e3e97f6f2d9f5103261" translate="yes" xml:space="preserve">
          <source>In the component or controller, you can then define what the action does within the &lt;code&gt;actions&lt;/code&gt; hook:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed672cd4df18afd90bc50fad77a8980c0d9e3d6" translate="yes" xml:space="preserve">
          <source>In the component, determine when something has happened, and when to tell the outside world. Here, we want to trigger the outside action (deleting the account or sending the message) after the user clicks the button and then confirms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29bf44532a0de6efe83c3ffd2229a5dd807f40a" translate="yes" xml:space="preserve">
          <source>In the end, your deprecations can be fully turned on as &quot;throw&quot; and you should be able to use your application without error. At this point, you can go ahead and update your Ember version! When you upgrade, be sure you remove the deprecations you've fixed from the deprecation workflow file, so that you can start the process over for the next release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f0010bc55ec6034535665427b5f700b4578cc6" translate="yes" xml:space="preserve">
          <source>In the event the object's method returns a value, you can simply assert that the return value is calculated correctly. Suppose our object has a &lt;code&gt;calc&lt;/code&gt; method that returns a value based on some internal state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7b29afdf482f494a733b6b2218b0273a4d761a" translate="yes" xml:space="preserve">
          <source>In the example scenario above, some acceptance tests one might write are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c0e4d39cfc8941cdfd8e26962fcac38112a81f" translate="yes" xml:space="preserve">
          <source>In the first test, we just want to verify the output of the component, so we just assert that the title and owner text match what we provided in the fake &lt;code&gt;rental&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5e52098bca64fd822170daa993d5a78f45fbec" translate="yes" xml:space="preserve">
          <source>In the following example we declare a computed property - &lt;code&gt;fullName&lt;/code&gt; - by calling &lt;code&gt;.Ember.computed()&lt;/code&gt; with property dependencies (&lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;) as leading arguments and getter accessor function. The &lt;code&gt;fullName&lt;/code&gt; getter function will be called once (regardless of how many times it is accessed) as long as its dependencies have not changed. Once &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; are updated any future calls (or anything bound) to &lt;code&gt;fullName&lt;/code&gt; will incorporate the new values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b743c900c97efc8ad3db27fd77a428a82e1aa30c" translate="yes" xml:space="preserve">
          <source>In the following example we define that &lt;code&gt;verified&lt;/code&gt; has a default value of &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;createdAt&lt;/code&gt; defaults to the current date at the time of the model's creation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df8790cb651cbefeff26f77eaa7ca0c47f047c9" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;Message&lt;/code&gt; class is registered as a non-singleton:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233bbe607bc2c2d21456c625e11d59925fc79517" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;logger&lt;/code&gt; is a plain JavaScript object that should be returned &quot;as is&quot; when it's looked up:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6ece95eecdd3d1a5c898572f49b2da1f797953" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;writtenWords&lt;/code&gt; property on &lt;code&gt;App.ApplicationController&lt;/code&gt; will be updated live as the user types 'Lots of text that IS bound' into the text area of their browser's window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90e53fc7f038f4cb394d0bcfaae08b23273b5e2" translate="yes" xml:space="preserve">
          <source>In the following example, the controller query param property &lt;code&gt;page&lt;/code&gt; is considered to have a default value of &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cd9294f08764c05cedc4a72f4e0e203087329e" translate="yes" xml:space="preserve">
          <source>In the following example, the controller's &lt;code&gt;page&lt;/code&gt; query param is reset to 1, &lt;em&gt;while still scoped to the pre-transition &lt;code&gt;ArticlesRoute&lt;/code&gt; model&lt;/em&gt;. The result of this is that all links pointing back into the exited route will use the newly reset value &lt;code&gt;1&lt;/code&gt; as the value for the &lt;code&gt;page&lt;/code&gt; query param.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9493f7f6dbac27a6bbf6f81be4cc1bd615d7b22" translate="yes" xml:space="preserve">
          <source>In the future this method may become asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7763016ae3874e734aaff49da1caf0af62b9ec2c" translate="yes" xml:space="preserve">
          <source>In the last section it was discussed that helpers can be nested. This can be combined with these sorts of dynamic helpers. For example, the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_concat&quot;&gt;&lt;code&gt;{{concat}}&lt;/code&gt;&lt;/a&gt; helper makes it easy to dynamically send a number of parameters to a component or helper as a single parameter in the format of a concatenated string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b214df3a911e95c5faa8abdfc7455c4bb7bc392" translate="yes" xml:space="preserve">
          <source>In the last section you learned how to write a helper. A helper is usually a simple function that can be used in any template. Ember comes with a few helpers that can make developing your templates a bit easier. These helpers can allow you to be more dynamic in passing data to another helper or component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa44080e0fbc6502e95ff1793ce1365dcc77c43a" translate="yes" xml:space="preserve">
          <source>In the next example, we'll add another test that validates that the display changes when we modify the values on the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6940786aa8b86cdd87c15a75e09b023f37cd0e" translate="yes" xml:space="preserve">
          <source>In the next section, &lt;a href=&quot;../specifying-a-routes-model&quot;&gt;Specifying a Route's Model&lt;/a&gt;, you will learn more about how to load a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f227fda6517c338c8f0755e380dce74ab30bcf" translate="yes" xml:space="preserve">
          <source>In the parent component, decide how you want to react to the action. Here, we want to have the action delete the user's account when it's used in one place, and send a message when used in another place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3313b9f50f45c5962f8742cc4398d29a196f8cf9" translate="yes" xml:space="preserve">
          <source>In the parent component, let's first define what we want to happen when the user clicks the button and then confirms. In the first case, we'll find the user's account and delete it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37bbd2dbe24f753a19698ec2897d367ba4e42f8" translate="yes" xml:space="preserve">
          <source>In the previous example, the &lt;code&gt;fullName&lt;/code&gt; computed property depends on two other properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf66bc363e2d2d179030f65e4b2fd6a15e764ca" translate="yes" xml:space="preserve">
          <source>In the rest of this guide, we'll explore some of the most common enumerable conveniences. For the full list, please see the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;Ember.Enumerable API reference documentation.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3626ecb2f5cd34b98ca0d7192ad49e872f224b58" translate="yes" xml:space="preserve">
          <source>In the route template &lt;code&gt;/app/templates/contact.hbs&lt;/code&gt;, let's add our contact details:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668783723e5ac5676bc988cb4ae5331af970bd5c" translate="yes" xml:space="preserve">
          <source>In the router example above, entering &lt;code&gt;/#/posts/new&lt;/code&gt; will take you to the &lt;code&gt;posts.new&lt;/code&gt; route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c50826bece7aef7c56c72cb820458df889a2f3c" translate="yes" xml:space="preserve">
          <source>In the screen recording below, we run the tests, deselect &quot;Hide passed tests&quot;, and set the module to our acceptance test, revealing the 3 tests we got passing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d8101c2f83153723232cf86f5364cb7b9dd72c" translate="yes" xml:space="preserve">
          <source>In the second test, only one assert is expected (line 26), since the map element is fetched from cache and does not use the utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d510ca47cdbc1037a37b0a8df8550c2f230b705" translate="yes" xml:space="preserve">
          <source>In the second test, we verify that clicking on the image toggles the size. We will assert that the component is initially rendered without the &lt;code&gt;wide&lt;/code&gt; class name. Clicking the image will add the class &lt;code&gt;wide&lt;/code&gt; to our element, and clicking it a second time will take the &lt;code&gt;wide&lt;/code&gt; class away. Note that we find the image element using the CSS selector &lt;code&gt;.image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8a8c0979d60d242dc91aa3938dee728238dc02" translate="yes" xml:space="preserve">
          <source>In the section on &lt;a href=&quot;../ember-data#toc_updating-the-model-hook&quot;&gt;using Ember Data&lt;/a&gt;, we added a call to fetch all rentals. Let's implement our newly generated &lt;code&gt;rentals/index&lt;/code&gt; route by moving this &lt;code&gt;findAll&lt;/code&gt; call from the parent &lt;code&gt;rentals&lt;/code&gt; route to our new sub-route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c75e9e9ff5ae595c7677f979b46395e2cc4263b" translate="yes" xml:space="preserve">
          <source>In the tests above, we're using &lt;a href=&quot;https://api.qunitjs.com/assert/equal&quot;&gt;&lt;code&gt;assert.equal()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;assert.equal()&lt;/code&gt; checks to see if two items (our first and second arguments) equal each other. If they don't, our test will fail. The third optional argument allows us to provide a nicer message which we'll be shown if this test fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6e40cf44bcbf93efe5143664ba428bdef9ed0e" translate="yes" xml:space="preserve">
          <source>In these cases, you can use nested routes to display one template inside of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277d1ed1f9dffb2d6cb7f7d8d7e8e3b1c14c3fa5" translate="yes" xml:space="preserve">
          <source>In these contexts, the helper is called a &quot;closure action&quot; helper. Its behavior is simple: If passed a function name, read that function off the &lt;code&gt;actions&lt;/code&gt; property of the current context. Once that function is read (or if a function was passed), create a closure over that function and any arguments. The resulting value of an action helper used this way is simply a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed254713d8a384178635a4f0159717fca4422f8" translate="yes" xml:space="preserve">
          <source>In this case the new comment's &lt;code&gt;belongsTo&lt;/code&gt; relationship will be set to the parent blogPost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199ccadf938b7b77e98d7c392830ac4292b84798" translate="yes" xml:space="preserve">
          <source>In this case we are passing, or &quot;yielding&quot;, our filter data to the inner markup as a variable called &lt;code&gt;rentals&lt;/code&gt; (line 14).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a71c7a780b2d1d5cfac2270df871c02621afe3" translate="yes" xml:space="preserve">
          <source>In this case, because the store already knew about the record, it returns a promise that it resolves with the record immediately. It does not need to ask the adapter (and, therefore, the server) for a copy since it already has it saved locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1d87a15a3c605526aa32dda158f7d4b73ddaab" translate="yes" xml:space="preserve">
          <source>In this case, the content we wanted to display came from the model. But what if we want the developer using our component to be able to provide custom HTML content?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2046680a815290cb64f7bc7924424fc5389744c4" translate="yes" xml:space="preserve">
          <source>In this case, the logger will only be injected on the index route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c5869730a01e8966a0da64c64cbd5600227613" translate="yes" xml:space="preserve">
          <source>In this case, the post's comments would then be available in your template as &lt;code&gt;model.comments&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dc04af7405d68be38e9a11700632d49b9ac8e0" translate="yes" xml:space="preserve">
          <source>In this case, we told Ember to build for the production environment via the &lt;code&gt;--env&lt;/code&gt; flag. This creates an optimized bundle that's ready to upload to your web host. Once the build finishes, you'll find all of the concatenated and minified assets in your application's &lt;code&gt;dist/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eede79d6dafa887aef94f30b1ece8ed419ec25c" translate="yes" xml:space="preserve">
          <source>In this case, we use it to be notified when an Ember Data user defines a belongs-to relationship. In that case, we need to set up observers for each one, allowing us to track relationship changes and automatically reflect changes in the inverse has-many array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461fa1325f68686ad7a43aef88f48e81b585fe1d" translate="yes" xml:space="preserve">
          <source>In this case, we're telling the &lt;code&gt;{{link-to}}&lt;/code&gt; helper the name of the route we want to link to: &lt;code&gt;contact&lt;/code&gt;. When we look at our about page at &lt;a href=&quot;http://localhost:4200/about&quot;&gt;&lt;code&gt;http://localhost:4200/about&lt;/code&gt;&lt;/a&gt;, we now have a working link to our contact page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5880253b9626a727ceaac0543aeb8364c3b6af22" translate="yes" xml:space="preserve">
          <source>In this example, the function receives a dollar amount in cents as the first parameter (&lt;code&gt;value&lt;/code&gt;). We then use regular JavaScript to turn the count of cents into a formatted string, like &lt;code&gt;&quot;$5.00&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6158ae94c3896cf85b79adc98237afb3cf841842" translate="yes" xml:space="preserve">
          <source>In this example, the initial value in the &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; will be set to the value of &lt;code&gt;searchWord&lt;/code&gt;. If the user changes the text, the value of &lt;code&gt;searchWord&lt;/code&gt; will also be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aede71aa871782486d3a5891c86a7ef3fcfd95a" translate="yes" xml:space="preserve">
          <source>In this example, the sequence of code forced the browser to recalculate style, and relayout after each step. However, if we were able to batch similar jobs together, the browser would have only needed to recalculate the style and layout once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20237293cf816390a6366bd495a7d8e7744d22d2" translate="yes" xml:space="preserve">
          <source>In this example, the two computed properties are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff878382b6e37c236c3de0808d9b1bd675159463" translate="yes" xml:space="preserve">
          <source>In this example, there is a list component that needs to scroll to a selected item when rendered. Since scrolling to a specific spot is based on positions within the DOM, we need to ensure that the list has been rendered before scrolling. We can first render this list, and then set the scroll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35e1bea28a8c67a3355806b7603a59e103b7b51" translate="yes" xml:space="preserve">
          <source>In this example, we are using a helper to multiply &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; passing the value into &lt;code&gt;{{sum}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1492c259605af50da4db4a47d8e5e22b694e5081" translate="yes" xml:space="preserve">
          <source>In this example, we can pass a &lt;code&gt;sign&lt;/code&gt; argument to our &lt;code&gt;format-currency&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8ca5686ff09717fb49801687a768d5feaf0fa7" translate="yes" xml:space="preserve">
          <source>In this example, we use Ember.run.bind to bind the setupEditor method to the context of the App.RichTextEditorComponent and to have the invocation of that method be safely handled and executed by the Ember run loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f871c6dadd71fe1de4d3a786cddada8b88f621f" translate="yes" xml:space="preserve">
          <source>In this form, the &lt;code&gt;if&lt;/code&gt; helper receives three arguments, the conditional value, the value to render when truthy, and the value to render when falsey.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85676c9a2156ae5ac01732fcc6113fa9b9311590" translate="yes" xml:space="preserve">
          <source>In this route we've &lt;a href=&quot;http://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;separated our concerns&lt;/a&gt;: The action &lt;code&gt;displayAlert&lt;/code&gt; contains the code that is called when the action is received, and the private function &lt;code&gt;_displayAlert&lt;/code&gt; performs the work. While not necessarily obvious here because of the small size of the functions, separating code into smaller chunks (or &quot;concerns&quot;), allows it to be more readily isolated for testing, which in turn allows you to catch bugs more easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b022151b9652026cd7c8427da425bc7366703cd1" translate="yes" xml:space="preserve">
          <source>In this scenario, because Ember does not have access to a global &lt;code&gt;document&lt;/code&gt; object in the Node.js environment, you must provide one explicitly. In practice, in the non-browser environment, the stand-in &lt;code&gt;document&lt;/code&gt; object only need to implement a limited subset of the full DOM API. The &lt;code&gt;SimpleDOM&lt;/code&gt; library is known to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ee4cafac9946869503f8cbc68e6f462324d26" translate="yes" xml:space="preserve">
          <source>In this scenario, you can use the &lt;code&gt;paramsFor&lt;/code&gt; method to get the parameters of a parent route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81560c534e4433982f4c3df51a4462ac667ae44d" translate="yes" xml:space="preserve">
          <source>In this simple example, we don't have any display-specific properties or actions just yet. For now, our controller's &lt;code&gt;model&lt;/code&gt; property acts as a pass-through (or &quot;proxy&quot;) for the model properties. (Remember that a controller gets the model it represents from its route handler.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0756f46ca544553b008afacdbcc6b9b4cef1187" translate="yes" xml:space="preserve">
          <source>In this template, we loop through each object. On each iteration, the current object gets stored in a variable called &lt;code&gt;rental&lt;/code&gt;. From the rental variable in each step, we create a listing with information about the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1245f29d80607633d75644d47932fff9d63a52" translate="yes" xml:space="preserve">
          <source>In those cases, where you can't or don't want to modify native prototypes, Ember.js allows you to completely disable the extensions described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd46774c381c00d09e29f00fa227bec7c7d940cc" translate="yes" xml:space="preserve">
          <source>In what order are jobs executed on the queues?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f2b38d81eeabfd2bc7ef6b0fd39d869c6e5d1b" translate="yes" xml:space="preserve">
          <source>In your browser, open &lt;a href=&quot;http://localhost:4200/scientists&quot;&gt;&lt;code&gt;http://localhost:4200/scientists&lt;/code&gt;&lt;/a&gt;. You should see the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; you put in the &lt;code&gt;scientists.hbs&lt;/code&gt; template, right below the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; from our &lt;code&gt;application.hbs&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14e7e7921e753c5ab85465a14bce8af05d18537" translate="yes" xml:space="preserve">
          <source>In your integration test, use the &lt;code&gt;wait&lt;/code&gt; function to wait until your debounce timer is up and then assert that the page is rendered appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f39e75ae8721f349f4f7a1d287a6800970f1027" translate="yes" xml:space="preserve">
          <source>Index Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6bdab0c6db458e90545a059bae821391f2bc1c" translate="yes" xml:space="preserve">
          <source>Inflector</source>
          <target state="translated">Inflector</target>
        </trans-unit>
        <trans-unit id="4f1335a34172db79b3bbf3af91a45dba45bda360" translate="yes" xml:space="preserve">
          <source>Inflector.Ember provides a mechanism for supplying inflection rules for your application. Ember includes a default set of inflection rules, and provides an API for providing additional rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917f6528d25b634c59b7214df4542ce21c466dcf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L110&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:110 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af38017a0e4b4a67cbca318a828a847945fae7e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L137&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:137 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275e9366146489daa2ae55ad27e435a7b48c6668" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L161&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:161 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04449e818c6a9276d4c445011df9e6919966cd24" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L191&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:191 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15487780dc85d4846cae12b282078401bfeac3d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L216&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:216 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa690db7efe3617dad4adaf1817f8691090aeb70" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L244&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:244 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9993875454e213980296f893b0ec7a48ecf6904b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L271&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:271 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9383ec47eab4378dbd7ae5330fcd80607917fc" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L298&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:298 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ca27743f38a06ce9d0c7b136db63e78cd7aa52" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L323&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:323 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169f2df807678932156445038d7552c48a8248f7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L33&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:33 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad300a565ca32992d0287cacd1a596863896094" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L348&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:348 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10725a12c6d5ede44b34d68abea25b184d3ffc91" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/adapters/build-url-mixin.js#L410&quot;&gt; DS.BuildURLMixin addon/-private/adapters/build-url-mixin.js:410 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de67514525517a90c3e04b0ab9fa8d3fa65d119" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L112&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:112 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7e7a55b41883ec0076fcb2affa419dcf6e5996" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L180&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:180 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f853db6114f0ea5984f7bae2b6757b0cf1cd7ca" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L40&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:40 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34b906633a1f734cc5778bd33b6997baad28984" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L54&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:54 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48be307f17a4fd3c8afac7232c8acaa693feac88" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/-private/system/record-arrays/record-array.js#L86&quot;&gt; DS.RecordArray addon/-private/system/record-arrays/record-array.js:86 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b9813b71a1a30355f0a8f15e79deee6d7c6c4b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L223&quot;&gt; DS.Adapter addon/adapter.js:223 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719207b473e2a6e9d32d7423d4bb057f8b60ff8d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L257&quot;&gt; DS.Adapter addon/adapter.js:257 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec839b1cb1ddad3b9dffe4c0d982c6d69cd1bf16" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L417&quot;&gt; DS.Adapter addon/adapter.js:417 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ee7137b0084532e7a7b79bbc7e0a3a05321ab1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L485&quot;&gt; DS.Adapter addon/adapter.js:485 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7ca6251b9a91cddc15739a0f57bfa3e208ca4d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L535&quot;&gt; DS.Adapter addon/adapter.js:535 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdfd3bf26d9c18e7005fcd4c61290c301d26ab7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L590&quot;&gt; DS.Adapter addon/adapter.js:590 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af262bc7cae5def7694aecd77a1b9ad33259a06b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L630&quot;&gt; DS.Adapter addon/adapter.js:630 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfdac2c425f716850e207364b9744042fc88c957" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapter.js#L65&quot;&gt; DS.Adapter addon/adapter.js:65 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ff2f1b4c28926f8d7a8ea0bffbebcce237b251" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1007&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1007 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a5de1b7eed4883f02cf4f23da9302f08fbe98f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1243&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1243 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d97869873f6d54c3c60da5743df12bec42402b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1301&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1301 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44121039bcb7900811192e43b5c06279774a5c92" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1321&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1321 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbcefe1ca9c089e18f378d97dde846a51c19f57" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L1358&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:1358 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8556b90bb6b31e8386159cee01252f8f6889f7d4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L289&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:289 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a67e9c1db45c3bf8f363c33d78e4f6ac0f716a1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L395&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:395 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2357c1b1d1d2cac5a37c391ed79f7d82a004982c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L413&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:413 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd04b16f1a38322b973a4673f8ad7d2ae3578f4e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L430&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:430 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a41eaa1e24a2e484101ca0160b5c88459ab7bda" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L452&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:452 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f336cc122fae293e3aaaa55af3dd3cdec0d060f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L485&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:485 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c8e92083a384eed18d2da63db34979b2c1bc72" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L521&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:521 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc176d8991bff939d7e44e3b94c358e89278459" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L557&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:557 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24724d184c7ebfcb2014503ed3dcdfff40a1850f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L594&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:594 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a945ee640fe756dd1205c0bf6a779f039f02012a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L641&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:641 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22921a58342f30c31e09bc57b853f91ff073a14" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L695&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:695 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c0d2cc03174e1f1cf5b21026fac823bbf76da2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L747&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:747 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8523283ef449bd6f9165f76f188369ed0698962" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L782&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:782 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c21fa905a0cde4e22d95be7910eb2ea45fb4a1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L819&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:819 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f6c823e8a21e471bbf58d212b5db1a436b571d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L869&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:869 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a678e0e08061c6a8842ad2fba7b9aafc3e1bcebf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L933&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:933 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567641d73878b8e3185539ba68d218d19814ed3a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/adapters/rest.js#L992&quot;&gt; DS.RESTAdapter addon/adapters/rest.js:992 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8a7d52de2ae7100e3ee906b9e9cc54349be2a1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L129&quot;&gt; DS.Serializer addon/serializer.js:129 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f24d0861763921df7a604a19c922db4e2055b76" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L29&quot;&gt; DS.Serializer addon/serializer.js:29 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2b2961b775d7a9873085a1a46e9ae20acb6d44" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializer.js#L87&quot;&gt; DS.Serializer addon/serializer.js:87 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a97c7407bcd5972ff5aa5497035f65e4109fcf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1059&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1059 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e294d569041d7846b2343ea8b98c0a3db063ef3" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L109&quot;&gt; DS.JSONSerializer addon/serializers/json.js:109 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c308cb3dd8618862f397b175f6700b070ceca2d8" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1090&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1090 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d106775aebc802dcf3f6529d0ea35e19e20b0a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1137&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1137 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671c7920dcf2b6a8a8f5a8a40f5f7764df4a8482" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1189&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1189 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9128336454243724d412f2aa85c2bf341d938a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1238&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1238 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dda906cc8b5218b35970e394a749fdcdd16a0d4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1272&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1272 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30f95b17810d21731966ade92cf742564e4e1e6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1306&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1306 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994a8f911ac1650e158fa4325f66f053e2bbf31f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1417&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1417 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f65ba8ac7231be9fde46c0fea17cadfad33775c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1442&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1442 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fc8d932a64b77a154c2a26ec7cf29a3e5d5d51" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1469&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1469 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67dd9a07916dad70e6c054c22d7f2a99c8fa916" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L1526&quot;&gt; DS.JSONSerializer addon/serializers/json.js:1526 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1363c2175a352732672ab04d6d784a9711765582" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L200&quot;&gt; DS.JSONSerializer addon/serializers/json.js:200 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b79ffd6186366f6029650dedc16e747a20be195" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L260&quot;&gt; DS.JSONSerializer addon/serializers/json.js:260 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb5629b8ad9699317bf95b5454fa6fee8ec8c45" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L274&quot;&gt; DS.JSONSerializer addon/serializers/json.js:274 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854a42700ba3f950adcdf80c239498e6afea70c7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L288&quot;&gt; DS.JSONSerializer addon/serializers/json.js:288 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e277be7f21f4adc99f8b37379575bacd53edd1b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L302&quot;&gt; DS.JSONSerializer addon/serializers/json.js:302 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bca61e2974353b8aeee2ec63ed635478bb5ff31" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L316&quot;&gt; DS.JSONSerializer addon/serializers/json.js:316 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d24a45fd2b2ccf2fbc331f69957c1386ba38806" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L330&quot;&gt; DS.JSONSerializer addon/serializers/json.js:330 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67a80706efe019bba498f181b3d08725dddd205" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L344&quot;&gt; DS.JSONSerializer addon/serializers/json.js:344 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bd930c372be35c32638663d32662fdb5abf4b1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L358&quot;&gt; DS.JSONSerializer addon/serializers/json.js:358 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7c8bc671c52ee46062d769938729ce48901003" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L372&quot;&gt; DS.JSONSerializer addon/serializers/json.js:372 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fcc7cb798757fbaa3b3436fc4dea31521fa732" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L386&quot;&gt; DS.JSONSerializer addon/serializers/json.js:386 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bb87432f3add4d0c1dd5ecee7830879e873441" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L400&quot;&gt; DS.JSONSerializer addon/serializers/json.js:400 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a9eb8111cbd96b4d6b60ddab9a2fe90142bfc1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L414&quot;&gt; DS.JSONSerializer addon/serializers/json.js:414 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fabe01ef0ecfd7f571faf8dffe2afb39f51ad0d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L428&quot;&gt; DS.JSONSerializer addon/serializers/json.js:428 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c881a0e367933bbb0f37284b7a53fae612bb65" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L489&quot;&gt; DS.JSONSerializer addon/serializers/json.js:489 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3c9438bb26adbb134d9122799f213e3b85f0c6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L550&quot;&gt; DS.JSONSerializer addon/serializers/json.js:550 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7b8c739f447ebcc53994d8bac495c82640fd94" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L564&quot;&gt; DS.JSONSerializer addon/serializers/json.js:564 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91ddf0a41f7ff51a8173f2ec002d43c9cbda3e6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L588&quot;&gt; DS.JSONSerializer addon/serializers/json.js:588 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b914cfcf2857ee1b98c23f8089b9096f7b84327b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L637&quot;&gt; DS.JSONSerializer addon/serializers/json.js:637 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99789ff3c49a3cbfb398977aeea4827794e1d77b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L660&quot;&gt; DS.JSONSerializer addon/serializers/json.js:660 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a381f67f429e62a0fe7875e1149da5be1dde145" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L838&quot;&gt; DS.JSONSerializer addon/serializers/json.js:838 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a8be874b6f2e2389ca575fd139e70767bb9b10" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L85&quot;&gt; DS.JSONSerializer addon/serializers/json.js:85 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8468b7f9d631ecd5eca870b9d9234c37a7f5c50" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/serializers/json.js#L879&quot;&gt; DS.JSONSerializer addon/serializers/json.js:879 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecf8dce048c5e5e235dd500e4d0a884b9a1254f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/transforms/transform.js#L71&quot;&gt; DS.Transform addon/transforms/transform.js:71 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8d8eda80ddc83b2d1eb4e5ed5c54addf79ae94" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/data/tree/v2.14.10/addon/transforms/transform.js#L90&quot;&gt; DS.Transform addon/transforms/transform.js:90 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984a9218d8a8023bb8953b155ee3de7ae159bfd6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-application/lib/system/engine-instance.js#L117&quot;&gt; Ember.EngineInstance packages/ember-application/lib/system/engine-instance.js:117 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c8ffc64f32fc8e55d9572badacec97d6a8dd94" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-application/lib/system/engine.js#L175&quot;&gt; Ember.Engine packages/ember-application/lib/system/engine.js:175 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4595334072e517e78e1c429b5f1403c29ee2d2d7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-application/lib/system/engine.js#L295&quot;&gt; Ember.Engine packages/ember-application/lib/system/engine.js:295 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2342fcfe4e2dbf67b18217cd7d6d01c2bd9165d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-application/lib/system/engine.js#L410&quot;&gt; Ember.Engine packages/ember-application/lib/system/engine.js:410 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d968413039baeb2f4322c8725e1ae587ef1f85db" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L634&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:634 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8b7361641723dcd924ef44a302b5bf57666b08" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L670&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:670 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de21e8471ac3324db006445e37ab11abb03cf00" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L685&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:685 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4431349564c49b4c548fe2fbdec0c6724a8c7846" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L739&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:739 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1f973671d58e2795553ab2f1cf965e24dc6ff5" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L749&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:749 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f150175b7799c52d8ef8737a5d11cbc0a5a4fcca" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L759&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:759 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded44d36198a8c65e17de4716866c8e82dd8444e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L767&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:767 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2841213ae3787982e4b54872afa80a1fdcfe9875" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L775&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:775 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f9410a2e72ab1c0ff2f187e4f084d5f8ba1c82" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L783&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:783 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a02eca5371fbabe8a5769db13e36f4dfe86719" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L791&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:791 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472ac2fc5710f1e5f039b1203d188d59d87aacc7" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L799&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:799 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6605a6154be73fa2d011699e44c9efef508f412" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L807&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:807 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607543393c27eeabfd1d312303bf149a02d2e4c4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L815&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:815 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcaf2f85e9abcc8704d4f66b1e4ad62238c0139" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L823&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:823 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b522f34aed495653b129dba86ac19a72ff0141c2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L831&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:831 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288e48e25ad9b8306a53864e23e188290a07926c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L839&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:839 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b2e324e4c2642b96252e4ddb1ee88432fc1e7d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L856&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:856 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15d08b01163c7e5142bbbac368d2ef907b552bf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L868&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:868 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f644c167f3f4cd4ba597753dbfd1359df237c0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-glimmer/lib/component.js#L897&quot;&gt; Ember.Component packages/ember-glimmer/lib/component.js:897 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18c55084df6456285bb947e5224a30d4d6c434f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-metal/lib/mixin.js#L501&quot;&gt; Ember.Mixin packages/ember-metal/lib/mixin.js:501 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8830e383d1d6e50e6706ecd4a0d02955996d0559" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-routing/lib/ext/controller.js#L13&quot;&gt; Ember.ControllerMixin packages/ember-routing/lib/ext/controller.js:13 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7f7ed24b3270cbf4232797a7b8ee36c7bad091" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-routing/lib/ext/controller.js#L154&quot;&gt; Ember.ControllerMixin packages/ember-routing/lib/ext/controller.js:154 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879cac7cfd8ee7ab46c403dd87286c695288b1ea" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-routing/lib/ext/controller.js#L75&quot;&gt; Ember.ControllerMixin packages/ember-routing/lib/ext/controller.js:75 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a6b9ab70320ed8f783f71cfb7cdfea35f5423f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/action_handler.js#L144&quot;&gt; Ember.ActionHandler packages/ember-runtime/lib/mixins/action_handler.js:144 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049d1f7961c9ab8b391deb0d3408de498afaf6c3" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/action_handler.js#L23&quot;&gt; Ember.ActionHandler packages/ember-runtime/lib/mixins/action_handler.js:23 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8592b4baff1bb75b36922d024f0dae792a089144" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L220&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:220 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8e37fc61b11382b5ab7b86871c0d8d3432bdfa" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L231&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:231 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895bee5b483e3adc63b1416ed8271d7926e95a3a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L263&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:263 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ff339e3dbf42c6529a0ff110c42f4285346aad" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L287&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:287 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9afdfc656be282d8abd2c58be38f2ad0ec5471" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L328&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:328 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f76096c305859b55baa9ca73e9235403e87391" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L374&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:374 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bed05be364b77d20ed7308d4ec8b26ffd102e56" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L417&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:417 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab13e4217985d0544570f63f226e0a1c848246ab" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L464&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:464 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be59939b042fe4dcb21df904d2b2ff8fbc656de9" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L494&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:494 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bbfd46bc2b710496af19dac2c0642e2d334d3a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L510&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:510 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9647493a37980400c4a284e6783f24f3c04c0b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L521&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:521 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca09e310ffe7e4e5dbe9296d30ff6fc54c63541" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L540&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:540 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c378b828f6c5be5c11b64830023e579524492440" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/array.js#L606&quot;&gt; Ember.Array packages/ember-runtime/lib/mixins/array.js:606 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec85df52fc4ffef266f02d2afefb92225802595" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/container_proxy.js#L26&quot;&gt; ContainerProxyMixin packages/ember-runtime/lib/mixins/container_proxy.js:26 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25531fc14d550f483f1bb71175a5b4b22bfc2a88" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/container_proxy.js#L50&quot;&gt; ContainerProxyMixin packages/ember-runtime/lib/mixins/container_proxy.js:50 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7d9d832f973b3454ef3c9f8fda59cf79f0a782" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/controller.js#L15&quot;&gt; Ember.ControllerMixin packages/ember-runtime/lib/mixins/controller.js:15 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbde25f4502afc555d72f43f4978c69eaef4384a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/controller.js#L35&quot;&gt; Ember.ControllerMixin packages/ember-runtime/lib/mixins/controller.js:35 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46044bd34168bf121f7703b0190c2668c8ce5262" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L1044&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:1044 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec30c80cc6dce721ee096036445ed114adbe6ac0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L1075&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:1075 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fd31adcbe6cc230561dd91baf23bff94c2cab5" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L1104&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:1104 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311a3edf3f40afc2fc2bdc3995d86098b2b322f1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L134&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:134 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205dbbf18e52993120e782b0f3b60b218b9cfa28" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L171&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:171 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1a678180425abc9acc0b3224730033354a00e0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L241&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:241 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ada408cf6a420c9f2dfeffaa337bb8d98135b49" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L292&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:292 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741be64f64a358c032672ebc2e7e95da60814fbc" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L302&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:302 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50167cfb2fca5041540d08732bff52644f2fda1b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L318&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:318 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3f7f305594ad496a44ed0219f24a944eb1fa81" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L353&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:353 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08391e710e8a7bb58d92b35ed2eb04c7311924a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L366&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:366 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156debf9f5e7b00066a8ea2fae3ce8fe7dcea99e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L407&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:407 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d4df339e3155440643df6bef2ca8ba3b2daaf1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L440&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:440 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198bb38b86afabccbb7db8f743079fa19738c008" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L455&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:455 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156bc72c64821be5791471cc78d24f0c02331f67" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L474&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:474 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8a16f1f4ccfb1f2b307f6b91cdec369b2644d0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L532&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:532 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb54b7ee3dae0bc08e3e61a450ad6b2e6e096b25" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L549&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:549 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd33face5d9136ecb3947aefd4775fbb00a4169" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L588&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:588 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf258cac775c1577e7b3111ef4d1b035813df88" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L607&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:607 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6476dd6e1fa6fbc9536b5fe8c535342aeb96a918" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L665&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:665 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f0937df84dbde003c828563f5228005ddb0996" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L681&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:681 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99055c3e5021e250001eaa78c27460adc01fd4f2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L729&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:729 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e18ce9ebc38d7649e5852fda69330dce197e44" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L754&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:754 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3929b7af6d71ed3060800f8dd7d8e14c61558f74" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L770&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:770 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8342209143c1b0ce99abfd72e2ea6918086c02e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L786&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:786 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9495ec3a95c02abf8ce6c11125666af737a083a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/enumerable.js#L818&quot;&gt; Ember.Enumerable packages/ember-runtime/lib/mixins/enumerable.js:818 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb47ffc56470cdf612026463bedabf8539b4c8f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/evented.js#L104&quot;&gt; Ember.Evented packages/ember-runtime/lib/mixins/evented.js:104 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd8e2a1218667bb5e8df0cf01761aaa41421375" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/evented.js#L127&quot;&gt; Ember.Evented packages/ember-runtime/lib/mixins/evented.js:127 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4aeb616be822b0f46f786ca6483df8676063070" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/evented.js#L142&quot;&gt; Ember.Evented packages/ember-runtime/lib/mixins/evented.js:142 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a928c404a68121119bf5c96d578e53eb8b163788" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/evented.js#L52&quot;&gt; Ember.Evented packages/ember-runtime/lib/mixins/evented.js:52 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039f8f2961742b61c50aded6ff34cec480a753f1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/evented.js#L78&quot;&gt; Ember.Evented packages/ember-runtime/lib/mixins/evented.js:78 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce2a8076e61679a854557cdf92b5100e93bfcd2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L107&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:107 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b98ffda4cd509da29f142e49c117c44bbf0a756" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L133&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:133 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be5b33ed40e46a23eb39f48a3cd771ac3305048" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L158&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:158 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c205a58a561d577c5b7bec0893e3587eefc5b89" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L179&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:179 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf8857a2c9c19cc069b355aa9d1a18cbdc1be35" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L202&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:202 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68521b261b75285b7ecfbd20a6f6be7ecddc3ea6" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L228&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:228 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1830a3e3b259814e73df794254fa0629f6d68730" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L253&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:253 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96ec6a2647f6a507bde543e17fd900a1178809f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L274&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:274 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b3d4631bb4386d9a53fb446ef9e052aa917e9b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L295&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:295 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e441cafc4fbc26f35dded405f6acd59ed96ba8fe" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L314&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:314 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa8f83e7bf36c0ade03a2b78cb4cb2758a325f8" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L63&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:63 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0745a85d888300a6ccd532fa95172f533fcce5" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_array.js#L81&quot;&gt; Ember.MutableArray packages/ember-runtime/lib/mixins/mutable_array.js:81 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a3105f486fd8e13b8ff7d34981b4e3eba83ef4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L105&quot;&gt; Ember.MutableEnumerable packages/ember-runtime/lib/mixins/mutable_enumerable.js:105 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a683ed3172be5e5a87364dcaa4952cf6362f5b42" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L55&quot;&gt; Ember.MutableEnumerable packages/ember-runtime/lib/mixins/mutable_enumerable.js:55 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b330329a8190da484838421439bee8a76d57a23" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L72&quot;&gt; Ember.MutableEnumerable packages/ember-runtime/lib/mixins/mutable_enumerable.js:72 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f23dcf9ce1086865c82f9d3998f9a90fd27e54" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L87&quot;&gt; Ember.MutableEnumerable packages/ember-runtime/lib/mixins/mutable_enumerable.js:87 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b4559a3b949d2ddf466fd3cdf8dcab792b75fd" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L139&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:139 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22e5b7e892d27b289308f9e0a0d9d1e1f96e55b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L164&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:164 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56492d49ed92c72f05fe7bf9a772089588e5a996" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L213&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:213 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8104d2ddfd6170e915845ce3d69c1a39f49bf43" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L318&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:318 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a623ab418b86c50ba9ce32763aa82f67502c9230" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L333&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:333 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d665c7d47d5e34a2daa0f14ab571b9b72d76bca5" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L380&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:380 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f5e9d442d98268b90d764771fb4ed214e09aae" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L410&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:410 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941a37440bf9265b378ffaa7be898c51d9b50573" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L428&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:428 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5801c7ab9ad75adfeaeecb83ef7cf976b7a918" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L448&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:448 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022579c484ee2c1975a5ebd612c4d892c9524014" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L468&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:468 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fa3687c0a29b35d80a39de7afd42c9206ab6a0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L485&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:485 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e19f3453a4e9a1de9fdc42241ff741708ac915" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/observable.js#L96&quot;&gt; Ember.Observable packages/ember-runtime/lib/mixins/observable.js:96 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454f0a5cf9c5d6a51de0d97f7885b4c94f48c154" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L112&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:112 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0fdf3ab8dcaea4c78686a79965fe7dfd3f792d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L122&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:122 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6dc076b27f46a930311ff26bca3d574331ce46b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L133&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:133 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5a34002e27e6536b8f633eae5d539b8fe78cbd" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L143&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:143 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3792ef22b0f9b102c82d9ace12885dc44602c470" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L153&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:153 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2306401c75892e85922e2d467e56c8bdf701d87" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L184&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:184 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3d6ea6d35a2d8255f62b5f16a35c4c4d55990a" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L194&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:194 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5606255735a197fc1b1beca7e8fb2ba58fcd0eb9" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L21&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:21 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ccb79f36a205b473a55fb6f1344da45a76fb5d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L31&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:31 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc590454437c5996579fa91443e5af4e7a8ca115" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L92&quot;&gt; RegistryProxyMixin packages/ember-runtime/lib/mixins/registry_proxy.js:92 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f42cf4d64ae91e81756978985d7bfbeee7927bc" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L211&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:211 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d3c1285b46fd6de8f6017506ab8197a085ee2c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L249&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:249 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacf94edc0b7d703de9750e04c478fbc79500968" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L322&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:322 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63de9fe398e9d4ef926324d9967b5f1a731f76e8" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L396&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:396 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d94aa42861fbee7e99504dc96b8cc43b464d3d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L421&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:421 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967e505efe316bdc40a84fa405b8889a82e18761" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L446&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:446 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec809cdf3c1cac426299062fd3b0ac43c4a349b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L472&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:472 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2f9e5e48878399a29cd3bbd3fe08a364eb6ecf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L499&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:499 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc62d76d0b79a189da86782b23cd333b214b456f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L561&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:561 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d4e221e557fa84d7035f8d5990a1483f6020ef" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L669&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:669 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ff0a15e289d8e21b08503e8e78218f41e5bbfe" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L715&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:715 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67da20eb3478a172eb3d4fb8b031129b3cda81ca" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-runtime/lib/system/core_object.js#L751&quot;&gt; Ember.CoreObject packages/ember-runtime/lib/system/core_object.js:751 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a24b5f0ce541ca38d59d3b7c1b7c3623e73ce2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-testing/lib/adapters/adapter.js#L19&quot;&gt; Ember.Test.Adapter packages/ember-testing/lib/adapters/adapter.js:19 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a5708101c5e79f327df66bf5b14913032732df" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-testing/lib/adapters/adapter.js#L30&quot;&gt; Ember.Test.Adapter packages/ember-testing/lib/adapters/adapter.js:30 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907a1bd5622e14f4d9cc097f20817eb6d916dae4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-testing/lib/adapters/adapter.js#L38&quot;&gt; Ember.Test.Adapter packages/ember-testing/lib/adapters/adapter.js:38 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ebe081ba78648f2ac523107a4cc2262b32853b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/action_support.js#L28&quot;&gt; Ember.ActionSupport packages/ember-views/lib/mixins/action_support.js:28 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6809661aded3897a2bc061a65f505480609f6e49" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/class_names_support.js#L26&quot;&gt; Ember.ClassNamesSupport packages/ember-views/lib/mixins/class_names_support.js:26 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c432080d25d144caec29d366289ddde1df8bb1bf" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/class_names_support.js#L38&quot;&gt; Ember.ClassNamesSupport packages/ember-views/lib/mixins/class_names_support.js:38 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3f4bb50a9a574a4ce07e8ba00f8c9b86887bbb" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L116&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:116 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d51981eab4e93218607557af2b660db9a5e18c0" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L141&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:141 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3ff5153c0e8ad879eeff66d5f2b9ed5eee7c93" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L18&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:18 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4adae4c4ac3a60d3b927d88eee84ded6f6931d38" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L295&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:295 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca7773408d230ad9b974d73c313521a9e2cdfe4" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L303&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:303 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b096caba283ee04926c2e8a0c9f99a42e5340144" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L316&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:316 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a800dbe83701149156b879f4c97ff4d14eb22d3" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L340&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:340 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe247527e4bbcc3fa61f39ed108c7ec5a43641d" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/v2.15.0/packages/ember-views/lib/mixins/view_support.js#L365&quot;&gt; Ember.ViewMixin packages/ember-views/lib/mixins/view_support.js:365 &lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68f827c48ecb62cfd062d7bba24657b63c09509" translate="yes" xml:space="preserve">
          <source>Initial value for the reduce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1968af826592f08e4a7794b6d1cf104a0ad15e" translate="yes" xml:space="preserve">
          <source>Initializer receives an object which has the following attributes: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;initialize&lt;/code&gt;. The only required attribute is &lt;code&gt;initialize&lt;/code&gt;, all others are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5e65d8fc7dddd98f6860c2416bcbcc90ec0fba" translate="yes" xml:space="preserve">
          <source>Initializers</source>
          <target state="translated">Initializers</target>
        </trans-unit>
        <trans-unit id="848e48bf4618ddc9ce74ad76146f98a5f01e7bb7" translate="yes" xml:space="preserve">
          <source>Initializers provide an opportunity to access the internal registry, which organizes the different components of an Ember application. Additionally they provide a chance to access the instantiated application. Beyond being used for libraries, initializers are also a great way to organize dependency injection or setup in your own application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d090c2efffd76209ba4e581188d030c23c6a376c" translate="yes" xml:space="preserve">
          <source>Initializers provide an opportunity to configure your application as it boots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9440074e533c28750337362b62c33438a77bb05" translate="yes" xml:space="preserve">
          <source>Initializing Instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d316f98643868f8354b5396cfe5fed76d7886a" translate="yes" xml:space="preserve">
          <source>Injected properties are lazy loaded; meaning the service will not be instantiated until the property is explicitly called. Therefore you need to access services in your component using the &lt;code&gt;get&lt;/code&gt; function otherwise you might get an undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a3952129f4ca23237b9608c1aa6cd3e1277fad" translate="yes" xml:space="preserve">
          <source>Injections can also be made on a specific factory by using its full key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f60f9b5f9037e2a6f5cd3a2548292899123193" translate="yes" xml:space="preserve">
          <source>Injections can also be performed on specific factories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf35378ef3ffe89f741950aa7eb194c7c4993798" translate="yes" xml:space="preserve">
          <source>Injections can be made into any class that requires instantiation. This includes all of Ember's major framework classes, such as components, helpers, routes, and the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee0d2a8ba8f85b71f10a1c9ce41a0716a074297" translate="yes" xml:space="preserve">
          <source>Inline Form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3fd2e66c9a9c3b529c8aa543548bd9103dc8b8" translate="yes" xml:space="preserve">
          <source>Inline form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425ee4a954daeb63b6f609d7ecbdd4ab76681158" translate="yes" xml:space="preserve">
          <source>Inline helpers don't need to be used inside HTML tags. They can also be used inside attribute values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c1a5659661ca84b039e1a85d0338109f44cff8" translate="yes" xml:space="preserve">
          <source>Input Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4383db107d940cdc8ce7b7aa8845979116f09c6" translate="yes" xml:space="preserve">
          <source>Inside FastBoot: The Road to Server-Side Rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a5c03b134c46c8387f9dbae563a16e10eaaeef" translate="yes" xml:space="preserve">
          <source>Inside your templates, you can use &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt;&lt;code&gt;{{link-to}}&lt;/code&gt;&lt;/a&gt; to navigate between routes, using the name that you provided to the &lt;code&gt;route&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc632eda95ff355bb22eaf269ff1d1c1db02b263" translate="yes" xml:space="preserve">
          <source>Inspecting Instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed9c61e76c7ac9a58af8eac372aada55ca1cac5" translate="yes" xml:space="preserve">
          <source>Inspecting Objects via the Container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ec72096b6de8f901844f8a78088a74346c725a" translate="yes" xml:space="preserve">
          <source>Inspecting Records</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a426cdb7fbadec688ded01335c3de6bbc1676a9" translate="yes" xml:space="preserve">
          <source>Inspecting Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eded73b9100d0e5e50201ec7bb8235c9ab8bf6c" translate="yes" xml:space="preserve">
          <source>Inspecting Settled Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8d423ed9d1a7a66480ee10abfccf244aea6579" translate="yes" xml:space="preserve">
          <source>Inspecting Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef24fb15bd1e4edcec19f9f1a3e27cf51582c73d" translate="yes" xml:space="preserve">
          <source>Inspector Version Old on Firefox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e46370feb76bf6202a78824eecd6f60e247271" translate="yes" xml:space="preserve">
          <source>Install Ember</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee47e26e88b22d56f5fd44c4d4bc0a61f78ea15d" translate="yes" xml:space="preserve">
          <source>Install Ember using npm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6d297c94067912d31459246036cc567c0b064b" translate="yes" xml:space="preserve">
          <source>Install the Mirage addon as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="7afeb9451e49a7326f03c7dd8db970c09edc4206" translate="yes" xml:space="preserve">
          <source>Installing Addons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ed2a425b005ef741d58d8bfec6edbe33ba9670" translate="yes" xml:space="preserve">
          <source>Installing Ember</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5909e7ae601bb0d0fa89a0f2c4b253a35b6a483" translate="yes" xml:space="preserve">
          <source>Installing Ember.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e873bdff6969b29cfe389d2536494899d0eb51" translate="yes" xml:space="preserve">
          <source>Installing the Inspector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675d60e8f5f449f4d4ffb1d1d99193b41b71b502" translate="yes" xml:space="preserve">
          <source>Instance initializer receives an object which has the following attributes: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;initialize&lt;/code&gt;. The only required attribute is &lt;code&gt;initialize&lt;/code&gt;, all others are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1749286245704543beedf7fb5fe566bcc90410e" translate="yes" xml:space="preserve">
          <source>Instance initializers receive an application instance as an argument, providing an opportunity to look up an instance of a registered factory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3070eddde27f4427bd13e223872160000e3c9cc" translate="yes" xml:space="preserve">
          <source>Instance initializers run after all initializers have run. Because instance initializers run after the app is fully set up. We have access to the store, container, and other items. However, these initializers run after code has loaded and are not allowed to defer readiness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44692d48940d00d0a96b238137fe9729062b0df" translate="yes" xml:space="preserve">
          <source>Instead of 7 failures there should now be 6 (5 acceptance failures and 1 ESLint). You can also run our specific test by selecting the entry called &quot;Acceptance | list rentals&quot; in the drop down input labeled &quot;Module&quot; on the test UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74de5c4b294d2b54e40fb7a408b75d670e7dcb87" translate="yes" xml:space="preserve">
          <source>Instead of copying the whole controller file over to &lt;code&gt;app/controllers/rentals/index.js&lt;/code&gt; from &lt;code&gt;app/controllers/rentals.js&lt;/code&gt;, we'll just take advantage of JavaScript's import/export feature to re-export the rentals controller as the rentals/index controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7923bc76e9fd4e08f714fe6e137a2858710b1ef1" translate="yes" xml:space="preserve">
          <source>Instead of having you copy/paste in CSS to style Super Rentals, we've created an addon called &lt;a href=&quot;https://github.com/ember-learn/ember-cli-tutorial-style&quot;&gt;ember-cli-tutorial-style&lt;/a&gt; that instantly adds CSS to the tutorial. The addon works by generating a file called &lt;code&gt;ember-tutorial.css&lt;/code&gt; and putting that file in the super-rentals &lt;code&gt;vendor&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f024ee01f5e19fd875e530403e036fab6448a9d" translate="yes" xml:space="preserve">
          <source>Instead of waiting for the app to request a record, however, you can push records into the store's cache ahead of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841f4a5748521289e1a65dce54c9ce37ca8e11e9" translate="yes" xml:space="preserve">
          <source>Instead, we can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_redirect&quot;&gt;&lt;code&gt;redirect()&lt;/code&gt;&lt;/a&gt; method, which will leave the original transition validated, and not cause the parent route's hooks to fire again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4714b8693a81dc11b8d5e6e528c1308c83e273af" translate="yes" xml:space="preserve">
          <source>Instrument a block of code by using &lt;code&gt;Ember.instrument&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb49b30bf89c4f1a8a29b63caa0a66ed1c9abce4" translate="yes" xml:space="preserve">
          <source>Instrumentation</source>
          <target state="translated">Instrumentation</target>
        </trans-unit>
        <trans-unit id="735c2ed2106031df10a8d9d543c22144c0f6ecaa" translate="yes" xml:space="preserve">
          <source>Integrating with Third-Party Libraries with &lt;code&gt;didInsertElement&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9887dfe23d1815b30f1036f12ee20e84d0a4f29" translate="yes" xml:space="preserve">
          <source>Integration Test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90e0e210d1ca63ab3c367bdca02355b93d95528" translate="yes" xml:space="preserve">
          <source>Integration Testing the Map Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036a5d47efaf84af91b96bca27d0e3394108b032" translate="yes" xml:space="preserve">
          <source>Integration Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720208c4601023e230a0995d3273bf68f35dc35b" translate="yes" xml:space="preserve">
          <source>Integration tests serve as a middle ground between acceptance tests, which only interact with the full system through user endpoints, and unit tests, which interact with specific code algorithms on a micro level. Integration tests verify interactions between various parts of the application, such as behavior between UI controls. They are valuable in ensuring data and actions are properly passed between different parts of the system, and provide confidence that parts of the system will work within the application under multiple scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa64517a07e5e795024ba185ce3ecfc2143955b" translate="yes" xml:space="preserve">
          <source>Interestingly, this pattern holds true for many other types of work. Essentially, batching similar work allows for better pipelining, and further optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0decc37b81a23cbc1c351c9b1c1d0bd3a693aa" translate="yes" xml:space="preserve">
          <source>Internal, experimental or otherwise unstable flags are marked as private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd6e9e8b473b32fabb47d5caef8201513a5c12d" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;Ember.onerror&lt;/code&gt; is used as Backburner's error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2875d5349682fb04958144652bb90208dd916052" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;{{input type=&quot;checkbox&quot;}}&lt;/code&gt; creates an instance of &lt;code&gt;Ember.Checkbox&lt;/code&gt;, passing arguments from the helper to &lt;code&gt;Ember.Checkbox&lt;/code&gt;'s &lt;code&gt;create&lt;/code&gt; method. You can extend the capablilties of checkbox inputs in your applications by reopening this class. For example, if you wanted to add a css class to all checkboxes in your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad21de853465a1a9cf38538aa6353986f590036" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;{{input type=&quot;text&quot;}}&lt;/code&gt; creates an instance of &lt;code&gt;Ember.TextField&lt;/code&gt;, passing arguments from the helper to &lt;code&gt;Ember.TextField&lt;/code&gt;'s &lt;code&gt;create&lt;/code&gt; method. You can extend the capabilities of text inputs in your applications by reopening this class. For example, if you are building a Bootstrap project where &lt;code&gt;data-*&lt;/code&gt; attributes are used, you can add one to the &lt;code&gt;TextField&lt;/code&gt;'s &lt;code&gt;attributeBindings&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252ebd8c6a5ce65309f33e8167d4ec420a837458" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;{{textarea}}&lt;/code&gt; creates an instance of &lt;code&gt;Ember.TextArea&lt;/code&gt;, passing arguments from the helper to &lt;code&gt;Ember.TextArea&lt;/code&gt;'s &lt;code&gt;create&lt;/code&gt; method. You can extend the capabilities of text areas in your application by reopening this class. For example, if you are building a Bootstrap project where &lt;code&gt;data-*&lt;/code&gt; attributes are used, you can globally add support for a &lt;code&gt;data-*&lt;/code&gt; attribute on all &lt;code&gt;{{textarea}}&lt;/code&gt;s' in your app by reopening &lt;code&gt;Ember.TextArea&lt;/code&gt; or &lt;code&gt;Ember.TextSupport&lt;/code&gt; and adding it to the &lt;code&gt;attributeBindings&lt;/code&gt; concatenated property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="05ae5511949411e495f57fd2ae9a6dc3462c6bb6" translate="yes" xml:space="preserve">
          <source>Inverses</source>
          <target state="translated">Inverses</target>
        </trans-unit>
        <trans-unit id="ba075fb75b6fa88ef0bb5214de3b12a7f0b3bc40" translate="yes" xml:space="preserve">
          <source>Invokes the named method on every object in the receiver that implements it. This method corresponds to the implementation in Prototype 1.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79a59c0c980397492109089436f3488de167441" translate="yes" xml:space="preserve">
          <source>Invokes the passed target/method and optional arguments after a specified period of time. The last parameter of this method must always be a number of milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f52bc73a8c778dcde308668b703e0ce34d1892b" translate="yes" xml:space="preserve">
          <source>Invoking Actions Directly on Component Collaborators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d85e6d10d7789fd6bc5bb65d7687f54bc507fe" translate="yes" xml:space="preserve">
          <source>Invoking a Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f69b36785ce00890212ea5dddbd36e26f1e8b3" translate="yes" xml:space="preserve">
          <source>Invoking an action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f2bff11f39777d3a27d7c76a5fc48b0bd040c4" translate="yes" xml:space="preserve">
          <source>Irregular keys can be mapped with a custom serializer. The &lt;code&gt;attrs&lt;/code&gt; object can be used to declare a simple mapping between property names on DS.Model records and payload keys in the serialized JSON object representing the record. An object with the property key can also be used to designate the attribute's key on the response payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d5ea4a891f7bca54fa3aac157a9411da91367a" translate="yes" xml:space="preserve">
          <source>Is the equivalent of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cde975491c4027773fd4fc8696c0b019485084" translate="yes" xml:space="preserve">
          <source>It also does not automatically fire any change events. You must manually notify any changes if you want to observe this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106d72e4675f0b5aaf1513a92c66f00c58daf06f" translate="yes" xml:space="preserve">
          <source>It also means that the store can detect that two different components are asking for the same model, allowing your app to only fetch the data from the server once. You can think of the store as a read-through cache for your app's models. Both your components and routes have access to this shared store; when they need to display or modify a model, they first ask the store for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13be1efe73dd3747b47d95a475ffe45607e47b1" translate="yes" xml:space="preserve">
          <source>It also supports urls where ids are passed as a query param, such as &lt;code&gt;/comments?id=1&lt;/code&gt; but not those where there is more than 1 query param such as &lt;code&gt;/comments?id=2&amp;amp;name=David&lt;/code&gt; Currently only the query param of &lt;code&gt;id&lt;/code&gt; is supported. If you need to support others, please override this or the &lt;code&gt;_stripIDFromURL&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecde96cd7188fa9b9f93f4eef2e0ff2041e0523b" translate="yes" xml:space="preserve">
          <source>It can handle actions that involve changing a model or transitioning to a new route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d943bc2d625203c129c82c3749810334d7cb9836" translate="yes" xml:space="preserve">
          <source>It can load a model that is then available to the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66428354fba7e5eaa0f2419172c9e2bc28b70f11" translate="yes" xml:space="preserve">
          <source>It can redirect to a new route, such as if the user isn't allowed to visit that part of the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848759147648109ad5505c5e8f5f535d3baded85" translate="yes" xml:space="preserve">
          <source>It can render a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfefa7d1fea9b7e181bad30efcdb8c1c3e2abbad" translate="yes" xml:space="preserve">
          <source>It can then be invoked like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ad8d3e366b6115749122bb4f353de089786914" translate="yes" xml:space="preserve">
          <source>It does not group records that have differing base urls, such as for example: &lt;code&gt;/posts/1/comments/2&lt;/code&gt; and &lt;code&gt;/posts/2/comments/3&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d9f6f871d4b80d957a1fd495668f8d84329353" translate="yes" xml:space="preserve">
          <source>It does not run any &lt;code&gt;Component&lt;/code&gt; lifecycle hooks (such as &lt;code&gt;didInsertElement&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5420dc54e296dc0d400f043319cfcbe1f72dc4e" translate="yes" xml:space="preserve">
          <source>It does not set up an &lt;code&gt;EventDispatcher&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e16a501a236c5f520c0e8fd4ff4e8daffbff90f" translate="yes" xml:space="preserve">
          <source>It does not use &lt;code&gt;jQuery&lt;/code&gt; to append the root view; the &lt;code&gt;rootElement&lt;/code&gt; (either specified as a subsequent option or on the application itself) must already be an &lt;code&gt;Element&lt;/code&gt; in the given &lt;code&gt;document&lt;/code&gt; (as opposed to a string selector).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de59ad4b2f3c50c4df6422969db899bc32ff4fb9" translate="yes" xml:space="preserve">
          <source>It does so by scheduling work on specific queues. These queues have a priority, and are processed to completion in priority order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14f0a2033c952099422d5b52885ae11d459bf4a" translate="yes" xml:space="preserve">
          <source>It first parses the fullName into an object using &lt;code&gt;parseName&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4183250b925d6faad9810cb511527d9e2c23143" translate="yes" xml:space="preserve">
          <source>It is a singleton, which means there is only one instance of the service object in browser. This will allow us to keep map data while the user navigates around the app, so that returning to a page doesn't require it to reload its maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0244a78888548b984f551beea3ed5101ef9ac006" translate="yes" xml:space="preserve">
          <source>It is also possible to call &lt;code&gt;this._super(...arguments)&lt;/code&gt; from within an action handler if it overrides a handler defined on a parent class or mixin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816423f038396b703f76c88d694b47c9e9e26f7b" translate="yes" xml:space="preserve">
          <source>It is also possible to override the default event in this manner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a204cfd2ad02dbf830f7ff8de9632a5ee09b122" translate="yes" xml:space="preserve">
          <source>It is also possible to pass a URL (a string that starts with a &lt;code&gt;/&lt;/code&gt;). This is intended for testing and debugging purposes and should rarely be used in production code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1bcfb95917b9097db6aec4b90e7ea7e3662c45" translate="yes" xml:space="preserve">
          <source>It is also possible to remove a record from a &lt;code&gt;hasMany&lt;/code&gt; relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736f62e01814063db4e5d228bb031393f8ddbf04" translate="yes" xml:space="preserve">
          <source>It is important to note that injections can only be performed on classes that are instantiated by Ember itself. Instantiating a class directly (via &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;) bypasses the dependency injection system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2c5aff9afdabb69d58e5f105a7876ee5e13ed4" translate="yes" xml:space="preserve">
          <source>It is important to note that these properties stay in sync (technically known as being &quot;bound&quot;). That is, if the value of &lt;code&gt;componentProperty&lt;/code&gt; changes in the component, &lt;code&gt;outerProperty&lt;/code&gt; will be updated to reflect that change. The reverse is true as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa25cbd6830c3c85b8a5d10f25b301eee999023" translate="yes" xml:space="preserve">
          <source>It is important to use the methods in this class to modify arrays so that changes are observable. This allows the binding system in Ember to function correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd441bb8da34edd6941dd14316d0d5a024ef3a7" translate="yes" xml:space="preserve">
          <source>It is injected with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locator&lt;/a&gt;, meaning it will abstract the maps API from the code that uses it, allowing for easier refactoring and maintenance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dc3385ed904252111f2287793f21cdbec5af62" translate="yes" xml:space="preserve">
          <source>It is lazy-loaded, meaning it won't be initialized until it is called the first time. In some cases this can reduce your app's processor load and memory consumption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96706b580f77ac228dd5c095add7581e6df8d45c" translate="yes" xml:space="preserve">
          <source>It is not possible to nest curly braces &lt;code&gt;{{}}&lt;/code&gt;, so the correct way to nest a helper is by using parentheses &lt;code&gt;()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d382c795ad0dafce1751a155dc0752b4e06f7f8" translate="yes" xml:space="preserve">
          <source>It is of course possible to optimize these scenarios on a case-by-case basis, but getting them for free is much nicer. Using the run loop, we can apply these classes of optimizations not only for each scenario, but holistically app-wide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca09294a9dedbdf48fcb1c2175abb9ddafbd89a" translate="yes" xml:space="preserve">
          <source>It is only triggered once when the component element is first rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f2ce78fb9e8944c5c645013bf945275c32999d" translate="yes" xml:space="preserve">
          <source>It is possible to support both block and non-block usage of a component from a single component template using the &lt;code&gt;hasBlock&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd96e0c79318a8ac344e8a1bd4d0ae672525498" translate="yes" xml:space="preserve">
          <source>It is recommended that components and helpers be tested with integration tests because the component interacts with the system in the same way that it will within the context of the application, including being rendered from a template and receiving Ember's lifecycle hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9b419616f28434dfe0570866f4f0345296f63b" translate="yes" xml:space="preserve">
          <source>It is the equivalent of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7902d81b612955574d7c92466fdc2176fc766295" translate="yes" xml:space="preserve">
          <source>It is very important that you properly configure the targets of your app so you get the smallest and fastest code possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb371b0485855487bdd6ae4ba98f3f3947de49cb" translate="yes" xml:space="preserve">
          <source>It loads a model that is then available to the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e7ec69f95a8495681a2796c9ec95fa542249b0" translate="yes" xml:space="preserve">
          <source>It means that the data persistence library you're using does not support the Inspector. If you are the library's author, &lt;a href=&quot;../data#toc_building-a-data-custom-adapter&quot;&gt;see this section&lt;/a&gt; on how to add Inspector support to your library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc54342eec20b44f775101ece554b7eb16c40ce" translate="yes" xml:space="preserve">
          <source>It renders a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9df7c2beb261554bb53cb2f30738bcd6b22bc3" translate="yes" xml:space="preserve">
          <source>It sets the &lt;code&gt;location&lt;/code&gt; option to &lt;code&gt;&quot;none&quot;&lt;/code&gt;. (If you would like to use the location adapter specified in the app's router instead, you can also specify &lt;code&gt;{ location: null }&lt;/code&gt; to specifically opt-out.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ece96138a6c131d2253e7ce3f7b3a58be65e37" translate="yes" xml:space="preserve">
          <source>It should return &lt;code&gt;true&lt;/code&gt; to include the item in the results, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595581b2eb635c9b0ab9e226f495f5eb4b547bc5" translate="yes" xml:space="preserve">
          <source>It should return a falsey value to include the item in the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793898dc6bb50a998edac2a2e17f267366e83ae2" translate="yes" xml:space="preserve">
          <source>It should return the &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f95dca6a5d335744ff610041ae183457b2d36f3" translate="yes" xml:space="preserve">
          <source>It should return the &lt;code&gt;true&lt;/code&gt; to include the item in the results, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e90973a74b06c6c1a6929e10239465a0f60ca1e" translate="yes" xml:space="preserve">
          <source>It should return the mapped value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44eb34bca5320473a67cdf0cb0c001acfb76350" translate="yes" xml:space="preserve">
          <source>It takes the type of the record that is being normalized (as a DS.Model class), the property where the hash was originally found, and the hash to normalize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bb9a776e2d407d936255e766e8e97d7158a8b0" translate="yes" xml:space="preserve">
          <source>It will ensure that you can use the newest features in the language and know that they will be transformed to JavaScript that can run in every browser you support. That usually means generating ES5-compatible code that can work on any modern browser, back to Internet Explorer 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d761d460e584c27e23735f31c673f5c959e9a7" translate="yes" xml:space="preserve">
          <source>It will first normalize the payload, so you can use this to push in data streaming in from your server structured the same way that fetches and saves are structured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a611f14dad448ad17131dcfc3fb79af81bd95d" translate="yes" xml:space="preserve">
          <source>It's important to note that &lt;code&gt;DS.RecordArray&lt;/code&gt; is not a JavaScript array, it's an object that implements &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html&quot;&gt;&lt;code&gt;Ember.Enumerable&lt;/code&gt;&lt;/a&gt;. This is important because, for example, if you want to retrieve records by index, the &lt;code&gt;[]&lt;/code&gt; notation will not work--you'll have to use &lt;code&gt;objectAt(index)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38ba3c8467ede559e7542b5ab8c68d824b1c94c" translate="yes" xml:space="preserve">
          <source>It's important to note that &lt;code&gt;foo.bar.loading&lt;/code&gt; is not considered now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0e7de7105a3ea07d5b5d136a78f916de297e00" translate="yes" xml:space="preserve">
          <source>It's important to note that for &lt;code&gt;slow-model&lt;/code&gt; itself, Ember will not try to find a &lt;code&gt;slow-model.loading&lt;/code&gt; template but for the rest of the hierarchy either syntax is acceptable. This can be useful for creating a custom loading screen for a leaf route like &lt;code&gt;slow-model&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370e4b0af00d33cc321c19dc91113aadbb57f8ee" translate="yes" xml:space="preserve">
          <source>It's important to note that the &lt;code&gt;@each&lt;/code&gt; key can be dependant on more than one key. For example, if you are using &lt;code&gt;Ember.computed&lt;/code&gt; to sort an array by multiple keys, you would declare the dependency with braces: &lt;code&gt;todos.@each.{priority,title}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d426e41640853504b1db2a4fed101d2c3fe06f5b" translate="yes" xml:space="preserve">
          <source>It's important to note that the template scope inside the component block is the same as outside. If a property is available in the template outside the component, it is also available inside the component block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395b3a206f9b250f44d84d85b98a2a03df3efad3" translate="yes" xml:space="preserve">
          <source>It's super handy for taking one or more normal properties and transforming or manipulating their data to create a new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f29a2d9bb79c35f088bfe039e16e43e08922a23" translate="yes" xml:space="preserve">
          <source>It's useful for understanding which objects Ember is finding when it does a lookup and which it is generating automatically for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebd69f8d8a2deafa0cb9f08bda37d7e8ab38373" translate="yes" xml:space="preserve">
          <source>Iterates through each registered test waiter, and invokes its callback. If any waiter returns false, this method will return true indicating that the waiters have not settled yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0b362193be4d79ad1b314e9b216fc30078294f" translate="yes" xml:space="preserve">
          <source>Iterates through the attributes of the model, calling the passed function on each attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02336a46ebc1bca07ea406f90510ac981035c628" translate="yes" xml:space="preserve">
          <source>Iterates through the enumerable, calling the passed function on each item. This method corresponds to the &lt;code&gt;forEach()&lt;/code&gt; method defined in JavaScript 1.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cdc2c8b517654ee42b37dee40386d39e0f4b01" translate="yes" xml:space="preserve">
          <source>Iterates through the transformedAttributes of the model, calling the passed function on each attribute. Note the callback will not be called for any attributes that do not have an transformation type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d176dccd5163f2c90eee777705b70070425e8c4d" translate="yes" xml:space="preserve">
          <source>Iterating Over an Enumerable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df139be9c14c1067ad0da74d1c4c7a309ada24f2" translate="yes" xml:space="preserve">
          <source>Its last resort is to call the &lt;code&gt;resolveOther&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e66b14e68858ce6de2169b0a237067273a4737" translate="yes" xml:space="preserve">
          <source>Its model is populated in &lt;code&gt;model&lt;/code&gt; hook in the route handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e3bf5b70bd372ce961cf41127413867f62e9b9" translate="yes" xml:space="preserve">
          <source>JQuery</source>
          <target state="translated">JQuery</target>
        </trans-unit>
        <trans-unit id="077089c2035a3e00b87273f6830c677b2d0a713f" translate="yes" xml:space="preserve">
          <source>JSON API Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633617224eec34c2d4a796f3056e084b5192688e" translate="yes" xml:space="preserve">
          <source>JSON API Document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57bfa12f2cb935a1e4a6d8d3018b6a6749889a8c" translate="yes" xml:space="preserve">
          <source>JSON API standardizes how JavaScript applications talk to servers, so you decrease the coupling between your frontend and backend, and have more freedom to change pieces of your stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccf6dcf8ac99baaa0245733b4e93fa0a2f8ba47" translate="yes" xml:space="preserve">
          <source>JSON Structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe03fcb6ff13d4e75c6760719ffd2bc3cb28625" translate="yes" xml:space="preserve">
          <source>JSON-API Document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a601b2ffbfc7e4e1375dc58ef6825d116c344d" translate="yes" xml:space="preserve">
          <source>JSONAPISerializer Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576405ec091ef1a970bf620914fd330f1047adf9" translate="yes" xml:space="preserve">
          <source>JSONSerializer</source>
          <target state="translated">JSONSerializer</target>
        </trans-unit>
        <trans-unit id="6adddd4c84ae4f5171b9af05d22a995042b17e7d" translate="yes" xml:space="preserve">
          <source>JavaScript and CSS minification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb31f55434f30393282eff0cda81997729a1325" translate="yes" xml:space="preserve">
          <source>JavaScript objects don't support the observation of property value changes. Consequently, if an object is going to participate in Ember's binding system you may see an &lt;code&gt;Ember.Object&lt;/code&gt; instead of a plain object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f481302959ed6a8f6e0f638042c6b15394e2b973" translate="yes" xml:space="preserve">
          <source>Joining a web development community can be a challenge within itself, especially when all the resources you visit assume you're familiar with other technologies that you're not familiar with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f984bdda394c247db6fbd4b490a4d1a3e607b884" translate="yes" xml:space="preserve">
          <source>Keep in mind that even with this workaround in place, the &lt;code&gt;click&lt;/code&gt; event will not automatically trigger via keyboard driven &lt;code&gt;click&lt;/code&gt; equivalents (such as the &lt;code&gt;enter&lt;/code&gt; key when focused). Browsers will trigger this on clickable elements only by default. This also doesn't make an element accessible to users of assistive technology. You will need to add additional things like &lt;code&gt;role&lt;/code&gt; and/or &lt;code&gt;tabindex&lt;/code&gt; to make this accessible for your users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d8494717318bc86b2ce7e6a8d698bf9de0e9d4" translate="yes" xml:space="preserve">
          <source>Keep in mind that since some of your users will use &lt;code&gt;HistoryLocation&lt;/code&gt;, your server must serve the Ember app at all the routes you define.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d25bf59e2f03d765c10b20e4801f1973311339" translate="yes" xml:space="preserve">
          <source>Keep in mind that your server must serve the Ember app at all the routes you define.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2abb9048fa40c3b2ae670605bab409d00f6c84" translate="yes" xml:space="preserve">
          <source>Keep in mind that your server must serve the Ember app from all the URLs defined in your &lt;code&gt;Router.map&lt;/code&gt; function. In other words, if your user directly navigates to &lt;code&gt;/posts/new&lt;/code&gt;, your server must be configured to serve your Ember app in response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdf14c14378d078bcf72022fa7e634650270b22" translate="yes" xml:space="preserve">
          <source>Keep in mind when writing &lt;code&gt;Ember.TextArea&lt;/code&gt; subclasses that &lt;code&gt;Ember.TextArea&lt;/code&gt; itself extends &lt;code&gt;Ember.Component&lt;/code&gt;. Expect isolated component semantics, not legacy 1.x view semantics (like &lt;code&gt;controller&lt;/code&gt; being present).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efedd4227261a610c7768d9207bd164e031f4115" translate="yes" xml:space="preserve">
          <source>Keep in mind when writing &lt;code&gt;Ember.TextField&lt;/code&gt; subclasses that &lt;code&gt;Ember.TextField&lt;/code&gt; itself extends &lt;code&gt;Ember.Component&lt;/code&gt;. Expect isolated component semantics, not legacy 1.x view semantics (like &lt;code&gt;controller&lt;/code&gt; being present). See more about &lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html&quot;&gt;Ember components&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6daca38d419216af8efe7750a95552eaefba2ea1" translate="yes" xml:space="preserve">
          <source>Keeping a link active for other routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894975dfa9444a28770860022ec24c860b956397" translate="yes" xml:space="preserve">
          <source>Keyboard events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90c2387188374b9f22ba03a5b76d10a1a4cee1e" translate="yes" xml:space="preserve">
          <source>Keyboard events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b09f1b82a4d2e3342121375fb563cb8dcbd3b4" translate="yes" xml:space="preserve">
          <source>LESS, Sass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b4b86f5d7854f28cb4479fe6d4fed54075cc2c" translate="yes" xml:space="preserve">
          <source>Labeling Promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c060147f4faf5b78f316c846595f34b4a54b34a" translate="yes" xml:space="preserve">
          <source>Layout and LayoutName properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5e2ae8145a2451181a785b6ea6d99803c9dca8" translate="yes" xml:space="preserve">
          <source>Layout can be used to wrap content in a component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1003edc114d43d9f8f6630f3ba4a529f2b9371c3" translate="yes" xml:space="preserve">
          <source>Layout can be used to wrap content in a component. In addition to wrapping content in a Component's template, you can also use the public layout API in your Component JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e6f54e33a1151bfd4c7cc4affd14df3525f2db" translate="yes" xml:space="preserve">
          <source>Layouts</source>
          <target state="translated">Layouts</target>
        </trans-unit>
        <trans-unit id="74be0f9aa7cb559e4bbb54815a49c6a3b996de5d" translate="yes" xml:space="preserve">
          <source>Let a new temporary queue be defined as &lt;code&gt;WORK_QUEUE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8552f9d8fca3dd29363621f4c4e169eaa9ad62" translate="yes" xml:space="preserve">
          <source>Let the highest priority queue with pending jobs be: &lt;code&gt;CURRENT_QUEUE&lt;/code&gt;, if there are no queues with pending jobs the run loop is complete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b710127e3df993606b053122b25fb3109ff0d7" translate="yes" xml:space="preserve">
          <source>Let's add some simple logging to indicate that the instance has booted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085b495290b959d48c569442f2a0b79950c379ea" translate="yes" xml:space="preserve">
          <source>Let's assume our API provides an endpoint for the currently logged in user via:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bebbdc6b15456a228f0870d9d2490b5dfa0fe61" translate="yes" xml:space="preserve">
          <source>Let's assume that we have a &lt;code&gt;blog-post&lt;/code&gt; and a &lt;code&gt;comment&lt;/code&gt; model, which are related to each other as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924f1c95e5c704ddeabbf3c29984cba2d50a6a24" translate="yes" xml:space="preserve">
          <source>Let's assume we have a &lt;code&gt;Player&lt;/code&gt; model that has &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;levelName&lt;/code&gt; attributes. We want to call &lt;code&gt;levelUp()&lt;/code&gt; to increment the &lt;code&gt;level&lt;/code&gt; and assign a new &lt;code&gt;levelName&lt;/code&gt; when the player reaches level 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43244a198a37c1444f327e4bd02ea3d94c86c224" translate="yes" xml:space="preserve">
          <source>Let's assume we have a component with a &lt;code&gt;style&lt;/code&gt; property that is updated whenever the value of the &lt;code&gt;name&lt;/code&gt; property changes. The &lt;code&gt;style&lt;/code&gt; attribute of the component is bound to its &lt;code&gt;style&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601060df8e8fc0751485087da8c72147299e915a" translate="yes" xml:space="preserve">
          <source>Let's assume we have an action handler that prints its first parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15c3c86e992c66b14277717a43ee0a510601de2" translate="yes" xml:space="preserve">
          <source>Let's assume you are writing an Ember application which will serve as a blog. This application would likely include models such as &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt;. It would also include interactions such as &lt;em&gt;login&lt;/em&gt; and &lt;em&gt;create post&lt;/em&gt;. Let's finally assume that you would like to have &lt;a href=&quot;http://en.wikipedia.org/wiki/Test_automation&quot;&gt;automated tests&lt;/a&gt; in place for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5b477036c303ba8a7ab0d8fc43d9c53feee14d" translate="yes" xml:space="preserve">
          <source>Let's build an application that shows a list of scientists. To do that, the first step is to create a route. For now, you can think of routes as being the different pages that make up your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594280476955d1cfebb902a878634ef27be35c46" translate="yes" xml:space="preserve">
          <source>Let's call our component &lt;code&gt;button-with-confirmation&lt;/code&gt;. We can create it by typing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d65003f98c3863e72c3e151b316653c3e8d1a9c" translate="yes" xml:space="preserve">
          <source>Let's change the router above to use a nested route, like this:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
