<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="tensorflow">
    <body>
      <group id="tensorflow">
        <trans-unit id="9f9f2cd5eb32fbcbd4934e3db418478ae1abb879" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply&lt;/code&gt; enables chaining of custom &lt;code&gt;Dataset&lt;/code&gt; transformations, which are represented as functions that take one &lt;code&gt;Dataset&lt;/code&gt; argument and return a transformed &lt;code&gt;Dataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e412ef75edb45f28ea3353fc5708bcda1c1f2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_numpy_iterator()&lt;/code&gt; will preserve the nested structure of dataset elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4744806e00530086b732c319fcfc9ab099fe7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assert_consumed()&lt;/code&gt;: Raises an exception if any variables are unmatched: either checkpointed values which don't have a matching Python object or Python objects in the dependency graph with no values in the checkpoint. This method returns the status object, and so may be chained with &lt;code&gt;initialize_or_restore&lt;/code&gt; or &lt;code&gt;run_restore_ops&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b926dc4049e561d35221afbcf76cbe2e54fe013d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assert_consumed()&lt;/code&gt;: Raises an exception if any variables are unmatched: either checkpointed values which don't have a matching Python object or Python objects in the dependency graph with no values in the checkpoint. This method returns the status object, and so may be chained with other assertions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057f36b12286667605eb48eb6080e1456bd3a847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assert_existing_objects_matched()&lt;/code&gt;: Raises an exception if any existing Python objects in the dependency graph are unmatched. Unlike &lt;code&gt;assert_consumed&lt;/code&gt;, this assertion will pass if values in the checkpoint have no corresponding Python objects. For example a &lt;code&gt;tf.keras.Layer&lt;/code&gt; object which has not yet been built, and so has not created any variables, will pass this assertion but fail &lt;code&gt;assert_consumed&lt;/code&gt;. Useful when loading part of a larger checkpoint into a new Python program, e.g. a training checkpoint with a &lt;a href=&quot;../compat/v1/train/optimizer&quot;&gt;&lt;code&gt;tf.compat.v1.train.Optimizer&lt;/code&gt;&lt;/a&gt; was saved but only the state required for inference is being loaded. This method returns the status object, and so may be chained with other assertions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef679434922032966220ada47b602f876e32a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assert_existing_objects_matched()&lt;/code&gt;: Raises an exception if any existing Python objects in the dependency graph are unmatched. Unlike &lt;code&gt;assert_consumed&lt;/code&gt;, this assertion will pass if values in the checkpoint have no corresponding Python objects. For example a &lt;code&gt;tf.keras.Layer&lt;/code&gt; object which has not yet been built, and so has not created any variables, will pass this assertion but fail &lt;code&gt;assert_consumed&lt;/code&gt;. Useful when loading part of a larger checkpoint into a new Python program, e.g. a training checkpoint with a &lt;a href=&quot;optimizer&quot;&gt;&lt;code&gt;tf.compat.v1.train.Optimizer&lt;/code&gt;&lt;/a&gt; was saved but only the state required for inference is being loaded. This method returns the status object, and so may be chained with &lt;code&gt;initialize_or_restore&lt;/code&gt; or &lt;code&gt;run_restore_ops&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157d4baa86af7f08988f45fb20a12c9a1e986fdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assert_nontrivial_match()&lt;/code&gt;: Asserts that something aside from the root object was matched. This is a very weak assertion, but is useful for sanity checking in library code where objects may exist in the checkpoint which haven't been created in Python and some Python objects may not have a checkpointed value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562b3865784c9b301a4e02c049787f14da8bf3d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;audio&lt;/code&gt; is a 2-D float Tensor of shape &lt;code&gt;[length, channels]&lt;/code&gt;. &lt;code&gt;sample_rate&lt;/code&gt; is a scalar Tensor holding the rate to use (e.g. 44100).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd11c8272cb40e7d5752f2bc88d126e1d4d7611" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;average_name()&lt;/code&gt; can be called whether or not &lt;code&gt;apply()&lt;/code&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a9e0204f5afab479ce23eb6e11a82a40d2e58c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;average_precision_at_k&lt;/code&gt; creates two local variables, &lt;code&gt;average_precision_at_&amp;lt;k&amp;gt;/total&lt;/code&gt; and &lt;code&gt;average_precision_at_&amp;lt;k&amp;gt;/max&lt;/code&gt;, that are used to compute the frequency. This frequency is ultimately returned as &lt;code&gt;average_precision_at_&amp;lt;k&amp;gt;&lt;/code&gt;: an idempotent operation that simply divides &lt;code&gt;average_precision_at_&amp;lt;k&amp;gt;/total&lt;/code&gt; by &lt;code&gt;average_precision_at_&amp;lt;k&amp;gt;/max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b0b98649ec47d59a2c3fa59200448fb4b995f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; will always be colocated with &lt;code&gt;a&lt;/code&gt;, no matter where &lt;code&gt;a&lt;/code&gt; is eventually placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3299ed16c1df44e5a12d6d2d222d4a924dec59d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b37a828f48733b806d40e7b6a354d1a4ae4964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;batch_dot&lt;/code&gt; is used to compute dot product of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are data in batch, i.e. in a shape of &lt;code&gt;(batch_size, :)&lt;/code&gt;. &lt;code&gt;batch_dot&lt;/code&gt; results in a tensor or variable with less dimensions than the input. If the number of dimensions is reduced to 1, we use &lt;code&gt;expand_dims&lt;/code&gt; to make sure that ndim is at least 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae6bd1aaf403c5ab0d9b9a27970322655d4e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt; is zero-based; &lt;code&gt;size&lt;/code&gt; is one-based. If &lt;code&gt;size[i]&lt;/code&gt; is -1, all remaining elements in dimension i are included in the slice. In other words, this is equivalent to setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a12431ad36a4bccd00ce96424eb2df4925840a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, and &lt;code&gt;strides&lt;/code&gt; will be vectors of length n. n in general is not equal to the rank of the &lt;code&gt;input_&lt;/code&gt; tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccbbe36b2e5a50d7957021c98351bad484f6982" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;best_eval_result&lt;/code&gt;: This is the evaluation result of the best model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea34186270ed1238932e7aa9d60cdf5b0caf156e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bias_regularizer&lt;/code&gt;: Regularizer to apply a penalty on the layer's bias</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180d0aa8e121a9faa8287453bc39da4f4f0760e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block_depth = 1&lt;/code&gt; means &lt;code&gt;A&lt;/code&gt; is symmetric circulant. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d71f241781c7e6efa2ae958b71e39d643cd118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block_depth = 2&lt;/code&gt; means &lt;code&gt;A&lt;/code&gt; is block symmetric circulant with symemtric circulant blocks. For example, with &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt; symmetric circulant,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec816a92272521fb028b11d354ec2f2c85c5182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block_depth = 3&lt;/code&gt; means &lt;code&gt;A&lt;/code&gt; is block symmetric circulant with block symmetric circulant blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c5ed64ea96a608824d18cb7b3d8c454cdd5d6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;build()&lt;/code&gt;: Called once from &lt;code&gt;__call__&lt;/code&gt;, when we know the shapes of inputs and &lt;code&gt;dtype&lt;/code&gt;. Should have the calls to &lt;code&gt;add_weight()&lt;/code&gt;, and then call the super's &lt;code&gt;build()&lt;/code&gt; (which sets &lt;code&gt;self.built = True&lt;/code&gt;, which is nice in case the user wants to call &lt;code&gt;build()&lt;/code&gt; manually before the first &lt;code&gt;__call__&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bc4af210bf0f0b69306708e06d73600d87eb85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call()&lt;/code&gt;: Called in &lt;code&gt;__call__&lt;/code&gt; after making sure &lt;code&gt;build()&lt;/code&gt; has been called once. Should actually perform the logic of applying the layer to the input tensors (which should be passed in as the first argument).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933f1508659af8f1f2f235e9d90e37e6f10a8984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call()&lt;/code&gt;: Contains the logic for loss calculation using &lt;code&gt;y_true&lt;/code&gt;, &lt;code&gt;y_pred&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f0a3a33e72e2e8480bfe3b8afca4dbeb1f3354" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chars[i1...iN, j]&lt;/code&gt; is the substring of &lt;code&gt;input[i1...iN]&lt;/code&gt; that encodes its &lt;code&gt;j&lt;/code&gt;th character, when decoded using &lt;code&gt;input_encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd03587499db1c1a31eec2b73e39b820247daa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check_numerics&lt;/code&gt; operations themselves are added for each &lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;double&lt;/code&gt; tensor in the current default graph. For all ops in the graph, the &lt;code&gt;check_numerics&lt;/code&gt; op for all of its (&lt;code&gt;half&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;double&lt;/code&gt;) inputs is guaranteed to run before the &lt;code&gt;check_numerics&lt;/code&gt; op on any of its outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd26c077e2a39d9bf07923c0500a17513b352c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check_types&lt;/code&gt;: If set to &lt;code&gt;True&lt;/code&gt; (default) the types of iterables within the structures have to be same (e.g. &lt;code&gt;map_structure(func, [1], (1,))&lt;/code&gt; raises a &lt;code&gt;TypeError&lt;/code&gt; exception). To allow this set this argument to &lt;code&gt;False&lt;/code&gt;. Note that namedtuples with identical name and fields are always considered to have the same shallow structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecd5a3dd3029f5962e5e3b608e871afa9c51375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cluster&lt;/code&gt; is a JSON serialized version of &lt;code&gt;ClusterSpec&lt;/code&gt;'s Python dict from &lt;code&gt;server_lib.py&lt;/code&gt;, mapping task types (usually one of the &lt;code&gt;TaskType&lt;/code&gt; enums) to a list of task addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d940543742004eebf770d8dd4e2787404080ce08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cluster_spec&lt;/code&gt; is parsed from &lt;code&gt;TF_CONFIG['cluster']&lt;/code&gt;. Defaults to {}. If present, must have one and only one node in the &lt;code&gt;chief&lt;/code&gt; attribute of &lt;code&gt;cluster_spec&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d510a3a9ad4425a1db0a6e8bac5add419319d5f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;codepoints&lt;/code&gt; is an &lt;code&gt;int32&lt;/code&gt; tensor with shape &lt;code&gt;[D1...DN, (num_chars)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18717fc992b4b92173073cff18e47313a39c7cd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;codepoints[i1...iN, j]&lt;/code&gt; is the Unicode codepoint for the &lt;code&gt;j&lt;/code&gt;th character in &lt;code&gt;input[i1...iN]&lt;/code&gt;, when decoded using &lt;code&gt;input_encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e5617e69d7050da7dd97f3c71193b7aa75efff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;computation&lt;/code&gt; may return a list of operations and tensors. Tensors must come before operations in the returned list. The return value of &lt;code&gt;compile&lt;/code&gt; is a list of tensors corresponding to the tensors from the output of &lt;code&gt;computation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b938e2146d3b4a576871b972ffdef6c2c3e2e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;computation&lt;/code&gt; may return a list of operations and tensors. Tensors must come before operations in the returned list. The return value of &lt;code&gt;rewrite&lt;/code&gt; is a list of tensors corresponding to the tensors from the output of &lt;code&gt;computation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca6dad9e9accd81aacfaec23c2a8a2222143033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concentration = alpha = [alpha_0, ..., alpha_{K-1}]&lt;/code&gt;, &lt;code&gt;alpha_j &amp;gt; 0&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957afca5d5e2e44033b442c6bcf6aaed586e4fc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concentration = alpha = [alpha_0, ..., alpha_{k-1}]&lt;/code&gt;, &lt;code&gt;alpha_j &amp;gt; 0&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78b15470556004681d1c5f2fe8811535e65b1a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concentration = alpha&lt;/code&gt;, &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17835e8371b92a578852196a8eca83d9a262aa3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concentration0 = beta&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914cef65698325b80d67f5d89a9c09fdbbdcab4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;concentration1 = alpha&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff8bd84b4691a0ebd0d651094f6287dca2d9d39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cond&lt;/code&gt; is a callable returning a boolean scalar tensor. &lt;code&gt;body&lt;/code&gt; is a callable returning a (possibly nested) tuple, namedtuple or list of tensors of the same arity (length and structure) and types as &lt;code&gt;loop_vars&lt;/code&gt;. &lt;code&gt;loop_vars&lt;/code&gt; is a (possibly nested) tuple, namedtuple or list of tensors that is passed to both &lt;code&gt;cond&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;. &lt;code&gt;cond&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; both take as many arguments as there are &lt;code&gt;loop_vars&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f767ab5720d3f567020524d4489c71c96fda70b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config&lt;/code&gt;: Optional &lt;a href=&quot;../../../estimator/runconfig&quot;&gt;&lt;code&gt;estimator.RunConfig&lt;/code&gt;&lt;/a&gt; object. Will receive what is passed to Estimator as its &lt;code&gt;config&lt;/code&gt; parameter, or a default value. Allows setting up things in your &lt;code&gt;model_fn&lt;/code&gt; based on configuration such as &lt;code&gt;num_ps_replicas&lt;/code&gt;, or &lt;code&gt;model_dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c88e3c6ecf451723a94085934627bc2a909a577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config&lt;/code&gt;: Optional &lt;a href=&quot;runconfig&quot;&gt;&lt;code&gt;estimator.RunConfig&lt;/code&gt;&lt;/a&gt; object. Will receive what is passed to Estimator as its &lt;code&gt;config&lt;/code&gt; parameter, or a default value. Allows setting up things in your &lt;code&gt;model_fn&lt;/code&gt; based on configuration such as &lt;code&gt;num_ps_replicas&lt;/code&gt;, or &lt;code&gt;model_dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1249bac35c605e37e41bc1990444fad8bdf615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context_features&lt;/code&gt; contains &lt;code&gt;VarLenFeature&lt;/code&gt;, &lt;code&gt;RaggedFeature&lt;/code&gt;, and &lt;code&gt;FixedLenFeature&lt;/code&gt; objects. Each &lt;code&gt;VarLenFeature&lt;/code&gt; is mapped to a &lt;code&gt;SparseTensor&lt;/code&gt;; each &lt;code&gt;RaggedFeature&lt;/code&gt; is mapped to a &lt;code&gt;RaggedTensor&lt;/code&gt;; and each &lt;code&gt;FixedLenFeature&lt;/code&gt; is mapped to a &lt;code&gt;Tensor&lt;/code&gt;, of the specified type, shape, and default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c78148b4c2cf678e877fdf6dc3b267d54d4b4d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;control_inputs&lt;/code&gt; contains additional ops that have to finish before this op finishes, but whose outputs are not returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc963b9b609c63373d985c2a86fb1d5f892b2d94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current_eval_result&lt;/code&gt;: This is the evaluation result of current candidate model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8912017de18386abde3a7c474b41a62fd76ceb24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;custom_objects&lt;/code&gt; should be a dictionary mapping the names of custom losses / layers / etc to the corresponding functions / classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378917e950828733edf5d0ea0d5c08ec5a5bb585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data.shape&lt;/code&gt; must start with &lt;code&gt;partitions.shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf53b5719c1b48a254e94b54fad9235d69d87545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataset_fn&lt;/code&gt; will be called once for each worker in the strategy. Each replica on that worker will dequeue one batch of inputs from the local &lt;code&gt;Dataset&lt;/code&gt; (i.e. if a worker has two replicas, two batches will be dequeued from the &lt;code&gt;Dataset&lt;/code&gt; every step).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3bb474309d75730d8be40dcd22efe7b2283add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataset_fn&lt;/code&gt; will be called once for each worker in the strategy. In this case, we only have one worker and one device so &lt;code&gt;dataset_fn&lt;/code&gt; is called once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c1e81b285c8470468d60710d9def4a783f5bb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataset_fn&lt;/code&gt; will be called once for each worker in the strategy. In this case, we only have one worker so &lt;code&gt;dataset_fn&lt;/code&gt; is called once. Each replica on this worker will then dequeue a batch of elements from this local dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4165a08a954b08da9481322309268aa45cbfa753" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded.dense_shape&lt;/code&gt;: Shape vector, size &lt;code&gt;(2)&lt;/code&gt;. The shape values are: &lt;code&gt;[batch_size, max_decoded_length]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0408becf7dfc2d3939cbd212f268df6a5e19e3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded.indices&lt;/code&gt;: Indices matrix &lt;code&gt;(total_decoded_outputs, 2)&lt;/code&gt;. The rows store: &lt;code&gt;[batch, time]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394393e2d88a6c8fee3085fd362ebc2261e57186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded.values&lt;/code&gt;: Values vector, size &lt;code&gt;(total_decoded_outputs)&lt;/code&gt;. The vector stores the decoded classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00d9be83adb52d63a90b2a04bddceb68e43aef6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded[j].dense_shape&lt;/code&gt;: Shape vector, size &lt;code&gt;(2)&lt;/code&gt;. The shape values are: &lt;code&gt;[batch_size, max_decoded_length[j]]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26047d74fa0b2ff7ed962674f424462c923c045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded[j].indices&lt;/code&gt;: Indices matrix &lt;code&gt;(total_decoded_outputs[j] x 2)&lt;/code&gt; The rows store: [batch, time].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bad266c48257293de68d6d366c5673803645ff3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded[j].indices&lt;/code&gt;: Indices matrix &lt;code&gt;[total_decoded_outputs[j], 2]&lt;/code&gt;; The rows store: &lt;code&gt;[batch, time]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891309b929735319eb247ee08a18a2d5495bd692" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded[j].values&lt;/code&gt;: Values vector, size &lt;code&gt;(total_decoded_outputs[j])&lt;/code&gt;. The vector stores the decoded classes for beam j.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c5acf546d2bd75ed219a6f967eb1d011b8fb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decoded[j].values&lt;/code&gt;: Values vector, size &lt;code&gt;[total_decoded_outputs[j]]&lt;/code&gt;. The vector stores the decoded classes for beam &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679a9b96d1fde2dda6f469d4c1a106e9010a756f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delta&lt;/code&gt; must be in the interval &lt;code&gt;[-1, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d238dc706af1ed43348fb6e10737580721a41829" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dense_shape&lt;/code&gt;: A 1-D int64 tensor of shape &lt;code&gt;[ndims]&lt;/code&gt;, which specifies the dense_shape of the sparse tensor. Takes a list indicating the number of elements in each dimension. For example, &lt;code&gt;dense_shape=[3,6]&lt;/code&gt; specifies a two-dimensional 3x6 tensor, &lt;code&gt;dense_shape=[2,3,4]&lt;/code&gt; specifies a three-dimensional 2x3x4 tensor, and &lt;code&gt;dense_shape=[9]&lt;/code&gt; specifies a one-dimensional tensor with 9 elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59ce10f3a5562aa74b7677ffb2f6af37c5e3a0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device_fn&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;device_fn&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="bf9f6c996077297a88e3ad6bb6f35c12ece719eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;device_name&lt;/code&gt; can be fully specified, as in &quot;/job:worker/task:1/device:cpu:0&quot;, or partially specified, containing only a subset of the &quot;/&quot;-separated fields. Any fields which are specified override device annotations from outer scopes. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde4e5e8edb87c2aae9998bf7f26528852c2d62f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;diagonal[i1,..., ik] = input[i1, ..., ik, i1,..., ik]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc77f488acb42bb26f38faf092a91589f510ac6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;diagonals&lt;/code&gt; is representation of 3-diagonal NxN matrix, which depends on &lt;code&gt;diagonals_format&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c4bfa87da8d4396517b8cf4ad0bcd7b553206e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dict&lt;/code&gt; of parameter name to &lt;code&gt;Tensor&lt;/code&gt; shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333ff26267b4a13b027f82fc811f064e84231d7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dict&lt;/code&gt; of parameter name to &lt;code&gt;TensorShape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43f2a867563017b2f0a3af8fc1b2a15bb7d0875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;embedding_column&lt;/code&gt; that wraps a &lt;code&gt;sequence_categorical_column_with_*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c22824e2d0f4dbdca683c72748579bbb2204a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit_ta&lt;/code&gt;: The RNN output &lt;code&gt;TensorArray&lt;/code&gt;. If &lt;code&gt;loop_fn&lt;/code&gt; returns a (possibly nested) set of Tensors for &lt;code&gt;emit_output&lt;/code&gt; during initialization, (inputs &lt;code&gt;time = 0&lt;/code&gt;, &lt;code&gt;cell_output = None&lt;/code&gt;, and &lt;code&gt;loop_state = None&lt;/code&gt;), then &lt;code&gt;emit_ta&lt;/code&gt; will have the same structure, dtypes, and shapes as &lt;code&gt;emit_output&lt;/code&gt; instead. If &lt;code&gt;loop_fn&lt;/code&gt; returns &lt;code&gt;emit_output = None&lt;/code&gt; during this call, the structure of &lt;code&gt;cell.output_size&lt;/code&gt; is used: If &lt;code&gt;cell.output_size&lt;/code&gt; is a (possibly nested) tuple of integers or &lt;code&gt;TensorShape&lt;/code&gt; objects, then &lt;code&gt;emit_ta&lt;/code&gt; will be a tuple having the same structure as &lt;code&gt;cell.output_size&lt;/code&gt;, containing TensorArrays whose elements' shapes correspond to the shape data in &lt;code&gt;cell.output_size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bfc57ac71ba2f83671fed8c4eeebbd053d27e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval_distribute&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;eval_distribute&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="f03209698be3ed41a04600d4b71b020738007790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;example_name&lt;/code&gt; may contain a descriptive name for the corresponding serialized proto. This may be useful for debugging purposes, but it has no effect on the output. If not &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;example_name&lt;/code&gt; must be a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7386fd1b50fb8dfdb8684a09d480c783a93fd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;example_names&lt;/code&gt; may contain descriptive names for the corresponding serialized protos. These may be useful for debugging purposes, but they have no effect on the output. If not &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;example_names&lt;/code&gt; must be the same length as &lt;code&gt;serialized&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e127dcda639c6095ce09fe18f0eefd3441cd34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand_composites&lt;/code&gt;: If set to &lt;code&gt;True&lt;/code&gt;, then composite tensors such as &lt;a href=&quot;../sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../raggedtensor&quot;&gt;&lt;code&gt;tf.RaggedTensor&lt;/code&gt;&lt;/a&gt; are expanded into their component tensors. If &lt;code&gt;False&lt;/code&gt; (the default), then composite tensors are not expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526a4a9fe4b97d2fa5fe50ee4dd5db10a5470821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expect_partial()&lt;/code&gt;: Silence warnings about incomplete checkpoint restores. Warnings are otherwise printed for unused parts of the checkpoint file or object when the &lt;code&gt;Checkpoint&lt;/code&gt; object is deleted (often at program shutdown).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0596d13958efa75ca22069f6572bba967160e1c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;experimental_distribute&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;experimental_distribute&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="4ecb6546c0ef1485c6a7803fd94ad3906969c5bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;experimental_max_worker_delay_secs&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;experimental_max_worker_delay_secs&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="e2cf985622feb6240b5a6266b0ec9e8cf11288bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export_saved_model&lt;/code&gt; exports 2 metagraphs, one with &lt;a href=&quot;../../../../saved_model#SERVING&quot;&gt;&lt;code&gt;saved_model.SERVING&lt;/code&gt;&lt;/a&gt;, and another with &lt;a href=&quot;../../../../saved_model#SERVING&quot;&gt;&lt;code&gt;saved_model.SERVING&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../../saved_model#TPU&quot;&gt;&lt;code&gt;saved_model.TPU&lt;/code&gt;&lt;/a&gt; tags. At serving time, these tags are used to select the appropriate metagraph to load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26eaf62f8fa9afabba193d079f1934ac38af4fb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f(x) = alpha * (exp(x) - 1.) for x &amp;lt; 0&lt;/code&gt;, &lt;code&gt;f(x) = x for x &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692bf3ed3a768fce3087566da3f577d5c67b8173" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f(x) = alpha * x for x &amp;lt; 0&lt;/code&gt;, &lt;code&gt;f(x) = x for x &amp;gt;= 0&lt;/code&gt;, where &lt;code&gt;alpha&lt;/code&gt; is a learned array with the same shape as x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbe1e1495a21389dbd3fa305f92889c61b1dfba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f(x) = x for x &amp;gt; theta&lt;/code&gt;, &lt;code&gt;f(x) = 0 otherwise&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43ee32f134f266bbe87f7c699fc749b58cbc64c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;features&lt;/code&gt;: This is the first item returned from the &lt;code&gt;input_fn&lt;/code&gt; passed to &lt;code&gt;train&lt;/code&gt;, &lt;code&gt;evaluate&lt;/code&gt;, and &lt;code&gt;predict&lt;/code&gt;. This should be a single &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;dict&lt;/code&gt; of same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0352ff65aca015093f397da73118d972d18328" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;features&lt;/code&gt;: This is the first item returned from the &lt;code&gt;input_fn&lt;/code&gt; passed to &lt;code&gt;train&lt;/code&gt;, &lt;code&gt;evaluate&lt;/code&gt;, and &lt;code&gt;predict&lt;/code&gt;. This should be a single &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;dict&lt;/code&gt; of same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ced3c5d20c231662a3d0f5f5cfe7d92cbae9a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filepath&lt;/code&gt; can contain named formatting options, which will be filled the value of &lt;code&gt;epoch&lt;/code&gt; and keys in &lt;code&gt;logs&lt;/code&gt; (passed in &lt;code&gt;on_epoch_end&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b7a086755e11c4514ea697a3f282ec76ed462d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;final_loop_state&lt;/code&gt;: The final loop state as returned by &lt;code&gt;loop_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d571a4fdd090c79cba940fa16edf7aca608b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;final_state&lt;/code&gt;: The final cell state. If &lt;code&gt;cell.state_size&lt;/code&gt; is an int, this will be shaped &lt;code&gt;[batch_size, cell.state_size]&lt;/code&gt;. If it is a &lt;code&gt;TensorShape&lt;/code&gt;, this will be shaped &lt;code&gt;[batch_size] + cell.state_size&lt;/code&gt;. If it is a (possibly nested) tuple of ints or &lt;code&gt;TensorShape&lt;/code&gt;, this will be a tuple having the corresponding shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331782a362ec3dc9e7d57d0801c9ab6188b413fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fixed_length&lt;/code&gt; must be a multiple of the size of &lt;code&gt;out_type&lt;/code&gt;. &lt;code&gt;fixed_length&lt;/code&gt; must be specified if the elements of &lt;code&gt;input_bytes&lt;/code&gt; are of variable length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3902bf5b760c67e0b792dbcd35f8f333bfb1ba3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;a href=&quot;../../../../distribute/get_replica_context&quot;&gt;&lt;code&gt;tf.distribute.get_replica_context()&lt;/code&gt;&lt;/a&gt; to access members such as &lt;code&gt;all_reduce&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa923d4d055a5350b28b65cc87b6a1dd7a2e7ecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;a href=&quot;../../../../distribute/get_replica_context&quot;&gt;&lt;code&gt;tf.distribute.get_replica_context()&lt;/code&gt;&lt;/a&gt; to access members such as &lt;code&gt;replica_id_in_sync_group&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bfa26d5fa7a279fced471f2227a6c74ebbc2e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;a href=&quot;../../../distribute/get_replica_context&quot;&gt;&lt;code&gt;tf.distribute.get_replica_context()&lt;/code&gt;&lt;/a&gt; to access members such as &lt;code&gt;all_reduce&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e63b6b38f1842bf11ba4c67b14e1d71b6c46e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;a href=&quot;../../../distribute/get_replica_context&quot;&gt;&lt;code&gt;tf.distribute.get_replica_context()&lt;/code&gt;&lt;/a&gt; to access members such as &lt;code&gt;replica_id_in_sync_group&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1de7fe3afd0a3cfedb57b91004397496cbf1d91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;a href=&quot;../get_replica_context&quot;&gt;&lt;code&gt;tf.distribute.get_replica_context()&lt;/code&gt;&lt;/a&gt; to access members such as &lt;code&gt;all_reduce&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35294051a9f5a06c9fc73788afbce710815cd61e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;a href=&quot;get_replica_context&quot;&gt;&lt;code&gt;tf.distribute.get_replica_context()&lt;/code&gt;&lt;/a&gt; to access members such as &lt;code&gt;all_reduce&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a50b05ad340577768a891f9a5ace5f8ed4dc38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; may call &lt;code&gt;tf.get_replica_context()&lt;/code&gt; to access methods such as &lt;code&gt;replica_id_in_sync_group&lt;/code&gt; and &lt;code&gt;merge_call()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1114c26e81dd054da7e7e0dda3021442076c2ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; should not accept any arguments. To add extra arguments to when calling &lt;code&gt;fn&lt;/code&gt; in the critical section, create a lambda:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de43c94ce26f0772e5280abe8b31956d41ca4700" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo[5:,:,:3]&lt;/code&gt; on a 7x8x9 tensor is equivalent to &lt;code&gt;foo[5:7,0:8,0:3]&lt;/code&gt;. &lt;code&gt;foo[::-1]&lt;/code&gt; reverses a tensor with shape 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43244c62386e13ee7b9c91a6e079d5ea05be13dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;frequency(rank) ~ 1/(rank * (log(rank) + gamma) + 1/2 - 1/(12*rank))&lt;/code&gt; where &lt;code&gt;gamma&lt;/code&gt; is the Euler-Mascheroni constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cec70f6cbb7be45f47f6267983753c73e232a40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;func&lt;/code&gt; may also use ops with side effects, such as &lt;a href=&quot;print&quot;&gt;&lt;code&gt;tf.print&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; and others:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6901177b30e56936e5666ce2e3f39d2c5fa22a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;func&lt;/code&gt; may use data-dependent control flow, including &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4777eae632e57ac2f6e6206ede1b4415809a7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;func&lt;/code&gt;'s closure may include &lt;a href=&quot;tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5036f741f7e75805d2ad71e356bdf8058fbf960d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_replica_context()&lt;/code&gt; returns non-&lt;code&gt;None&lt;/code&gt;, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f600656096176d3c4100f0443a94f3efcbb5264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;grad_fn&lt;/code&gt; is a function with the signature &lt;code&gt;g(*grad_ys)&lt;/code&gt; which returns a list of &lt;code&gt;Tensor&lt;/code&gt;s - the derivatives of &lt;code&gt;Tensor&lt;/code&gt;s in &lt;code&gt;y&lt;/code&gt; with respect to the &lt;code&gt;Tensor&lt;/code&gt;s in &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;grad_ys&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; or sequence of &lt;code&gt;Tensor&lt;/code&gt;s the same size as &lt;code&gt;y&lt;/code&gt; holding the initial value gradients for each &lt;code&gt;Tensor&lt;/code&gt; in &lt;code&gt;y&lt;/code&gt;. In a pure mathematical sense, a vector-argument vector-valued function &lt;code&gt;f&lt;/code&gt;'s derivatives should be its Jacobian matrix &lt;code&gt;J&lt;/code&gt;. Here we are expressing the Jacobian &lt;code&gt;J&lt;/code&gt; as a function &lt;code&gt;grad_fn&lt;/code&gt; which defines how &lt;code&gt;J&lt;/code&gt; will transform a vector &lt;code&gt;grad_ys&lt;/code&gt; when left-multiplied with it (&lt;code&gt;grad_ys * J&lt;/code&gt;). This functional representation of a matrix is convenient to use for chain-rule calculation (in e.g. the back-propagation algorithm).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bef729cae46a4baf36e66463dc213eae652e20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;grad_ys&lt;/code&gt; is a list of tensors of the same length as &lt;code&gt;ys&lt;/code&gt; that holds the initial gradients for each y in &lt;code&gt;ys&lt;/code&gt;. When &lt;code&gt;grad_ys&lt;/code&gt; is None, we fill in a tensor of '1's of the shape of y for each y in &lt;code&gt;ys&lt;/code&gt;. A user can provide their own initial &lt;code&gt;grad_ys&lt;/code&gt; to compute the derivatives using a different initial gradient for each y (e.g., if one wanted to weight the gradient differently for each value in each y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ea8cfd3e2a282b23c87611d9013a6d60fdb8b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gradients()&lt;/code&gt; adds ops to the graph to output the derivatives of &lt;code&gt;ys&lt;/code&gt; with respect to &lt;code&gt;xs&lt;/code&gt;. It returns a list of &lt;code&gt;Tensor&lt;/code&gt; of length &lt;code&gt;len(xs)&lt;/code&gt; where each tensor is the &lt;code&gt;sum(dy/dx)&lt;/code&gt; for y in &lt;code&gt;ys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e47b02ab7d44761c76d6ecdd539953a950b5cd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;grayscale&lt;/code&gt;: Output a grayscale JPEG image. The &lt;code&gt;channels&lt;/code&gt; dimension of &lt;code&gt;image&lt;/code&gt; must be 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcd82bee9d7423f2c7dbce83f3aaf303744192a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h5py.File&lt;/code&gt; object from which to load the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbec3ac7e8fdf4ca93d62c7cc162728379c8c386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h5py.File&lt;/code&gt; object where to save the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e51860270102cff29e720e615815dc9f44adff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hessians()&lt;/code&gt; adds ops to the graph to output the Hessian matrix of &lt;code&gt;ys&lt;/code&gt; with respect to &lt;code&gt;xs&lt;/code&gt;. It returns a list of &lt;code&gt;Tensor&lt;/code&gt; of length &lt;code&gt;len(xs)&lt;/code&gt; where each tensor is the Hessian of &lt;code&gt;sum(ys)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca7f8b263db3f07bd66aba7bd46eabbb1443d41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;high - low&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0608919cb14ff3a53b2de13a0d0c9bf0bfae5c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;high = b&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334a6d5603e1763b4ef892a903dd8c8963cecbb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_call&lt;/code&gt; is a tuple of a &lt;code&gt;function&lt;/code&gt; and a list or dictionary of &lt;code&gt;tensors&lt;/code&gt; to pass to that function and returns a list of Tensors. &lt;code&gt;host_call&lt;/code&gt; currently works for train() and evaluate(). The Tensors returned by the function is executed on the CPU on every step, so there is communication overhead when sending tensors from TPU to CPU. To reduce the overhead, try reducing the size of the tensors. The &lt;code&gt;tensors&lt;/code&gt; are concatenated along their major (batch) dimension, and so must be &amp;gt;= rank 1. The &lt;code&gt;host_call&lt;/code&gt; is useful for writing summaries with &lt;code&gt;tf.contrib.summary.create_file_writer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53059e620228ec3f412f911cb62d181ec8d24478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is a 3-D uint8 Tensor of shape &lt;code&gt;[height, width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a78ed45576898596386cfd72fa34573e5d3b214" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is a 3-D uint8 or uint16 Tensor of shape &lt;code&gt;[height, width, channels]&lt;/code&gt; where &lt;code&gt;channels&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebce8d6f51227e7c9c2879ae58ee245299c1490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is an RGB image or images. The image saturation is adjusted by converting the images to HSV and multiplying the saturation (S) channel by &lt;code&gt;saturation_factor&lt;/code&gt; and clipping. The images are then converted back to RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5621ecd76a8ddc7920cca8f904b7469200b810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt; is an RGB image. The image hue is adjusted by converting the image(s) to HSV and rotating the hue channel (H) by &lt;code&gt;delta&lt;/code&gt;. The image is then converted back to RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0906dcaf98e725bf1ce0c2bd4f2656b3d8eb445e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;, converted to &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4362b2cea61fde3b1a066e12e26fd020cf5b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;images&lt;/code&gt; is a tensor of at least 3 dimensions. The last 3 dimensions are interpreted as &lt;code&gt;[height, width, channels]&lt;/code&gt;. The other dimensions only represent a collection of images, such as &lt;code&gt;[batch, height, width, channels].&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88ce4137231aa65086427d9ceaaf8b0f1d6b59f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in_band(m, n) = (num_lower &amp;lt; 0 || (m-n) &amp;lt;= num_lower)) &amp;amp;&amp;amp; (num_upper &amp;lt; 0 || (n-m) &amp;lt;= num_upper)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63020f4e9932ef0c0461f40b2b8438c61f4a623" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index_key&lt;/code&gt;: A list of names - one for each dimension in the resulting &lt;code&gt;SparseTensor&lt;/code&gt; whose &lt;code&gt;indices[i][dim]&lt;/code&gt; indicating the position of the &lt;code&gt;i&lt;/code&gt;-th value in the &lt;code&gt;dim&lt;/code&gt; dimension will be equal to the &lt;code&gt;i&lt;/code&gt;-th value in the Feature with key named &lt;code&gt;index_key[dim]&lt;/code&gt; in the &lt;code&gt;Example&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4007b6e294ba59b046b44a65ba8cce3531dfbf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt; is an K-dimensional integer tensor, best thought of as a (K-1)-dimensional tensor of indices into &lt;code&gt;params&lt;/code&gt;, where each element defines a slice of &lt;code&gt;params&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5cfad967e6b48007d21f5f37a8759e2f1b7aa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt; is an integer tensor containing indices into a new tensor of shape &lt;code&gt;shape&lt;/code&gt;. The last dimension of &lt;code&gt;indices&lt;/code&gt; can be at most the rank of &lt;code&gt;shape&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aed18eef98198e33a74f0b170a6f22b31f666ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt; is equivalent to &lt;code&gt;sp_ids.indices&lt;/code&gt; with the last dimension discarded and replaced with &lt;code&gt;sp_ids.values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6825425db5b5a082c9f82dfb549fe3e9d956c32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt; must be integer tensor, containing indices into &lt;code&gt;ref&lt;/code&gt;. It must be shape &lt;code&gt;[d_0, ..., d_{Q-2}, K]&lt;/code&gt; where &lt;code&gt;0 &amp;lt; K &amp;lt;= P&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa82f6051428c50cb3179a0f45783a0fb4c3260" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt; must be integer tensor, containing indices into self. It must be shape &lt;code&gt;[d_0, ..., d_{Q-2}, K]&lt;/code&gt; where &lt;code&gt;0 &amp;lt; K &amp;lt;= P&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c79ede89bb2d8bea199e4d17d9dacf23d78752f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt;: A 1-D integer &lt;code&gt;Tensor&lt;/code&gt; with shape &lt;code&gt;[D0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850081d8f5a5cd5c7cd6baf7b4d777c177e5e07e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indices&lt;/code&gt;: A 2-D int64 tensor of shape &lt;code&gt;[N, ndims]&lt;/code&gt;, which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed). For example, &lt;code&gt;indices=[[1,3], [2,4]]&lt;/code&gt; specifies that the elements with indexes of [1,3] and [2,4] have nonzero values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2252875da6b8579a1a0f15535675e0332a6231c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_feed_dict&lt;/code&gt;: A session feed dictionary that should be used when running the init op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fa190bfc712968fc43ead285c3e525e8d4ec46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_fn&lt;/code&gt;: A callable to run after the init op to perform additional initializations. The callable will be called as &lt;code&gt;init_fn(scaffold, session)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e829018695a738fb845759f335a8696315b7a3b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_op&lt;/code&gt;: An op to run to initialize the variables. Picked from and stored into the &lt;code&gt;INIT_OP&lt;/code&gt; collection in the graph by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a9bca8c59f38823a73edabc7a00411a693f426" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialize_or_restore(session=None)&lt;/code&gt;: When graph building, runs variable initializers if &lt;code&gt;save_path&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, but otherwise runs restore operations. If no &lt;code&gt;session&lt;/code&gt; is explicitly specified, the default session is used. No effect when executing eagerly (variables are initialized or restored eagerly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034e6f3763a7d1cd54ed225472b4698fc4e2e8ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input&lt;/code&gt; has &lt;code&gt;r+1&lt;/code&gt; dimensions &lt;code&gt;[I, J, ..., L, M, N]&lt;/code&gt;. When &lt;code&gt;k&lt;/code&gt; is scalar or &lt;code&gt;k[0] == k[1]&lt;/code&gt;, &lt;code&gt;diagonal&lt;/code&gt; has &lt;code&gt;r&lt;/code&gt; dimensions &lt;code&gt;[I, J, ..., L, max_diag_len]&lt;/code&gt;. Otherwise, it has &lt;code&gt;r+1&lt;/code&gt; dimensions &lt;code&gt;[I, J, ..., L, num_diags, max_diag_len]&lt;/code&gt;. &lt;code&gt;num_diags&lt;/code&gt; is the number of diagonals, &lt;code&gt;num_diags = k[1] - k[0] + 1&lt;/code&gt;. &lt;code&gt;max_diag_len&lt;/code&gt; is the longest diagonal in the range &lt;code&gt;[k[0], k[1]]&lt;/code&gt;, &lt;code&gt;max_diag_len = min(M + min(k[1], 0), N + min(-k[0], 0))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78af2ba1ee68a326c27cb3a12aac31ea71dba069" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input&lt;/code&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. The input to reverse. &lt;code&gt;seq_lengths&lt;/code&gt;: A &lt;code&gt;Tensor&lt;/code&gt;. Must be one of the following types: &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;. 1-D with length &lt;code&gt;input.dims(batch_dim)&lt;/code&gt; and &lt;code&gt;max(seq_lengths) &amp;lt;= input.dims(seq_dim)&lt;/code&gt;&lt;code&gt;seq_axis&lt;/code&gt;: An &lt;code&gt;int&lt;/code&gt;. The dimension which is partially reversed. &lt;code&gt;batch_axis&lt;/code&gt;: An optional &lt;code&gt;int&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;. The dimension along which reversal is performed. &lt;code&gt;name&lt;/code&gt;: A name for the operation (optional).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbac06d16e32375f5e607354d325cf1a098eca6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input_fn&lt;/code&gt; for evaluation should &lt;strong&gt;NOT&lt;/strong&gt; raise an end-of-input exception (&lt;code&gt;OutOfRangeError&lt;/code&gt; or &lt;code&gt;StopIteration&lt;/code&gt;). And all evaluation steps and all batches should have the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a8a53bcbfe7cc32a21b2a241d38c8bfecbd18f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input_fn&lt;/code&gt; must return a &lt;code&gt;Dataset&lt;/code&gt; instance rather than &lt;code&gt;features&lt;/code&gt;. In fact, .train() and .evaluate() also support Dataset as return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb8609c5fbdb4868d631405adf92baea66c2f59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input_fn&lt;/code&gt; raises an end-of-input exception (&lt;a href=&quot;../../../../errors/outofrangeerror&quot;&gt;&lt;code&gt;tf.errors.OutOfRangeError&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;StopIteration&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69416b9e1f6a0dc33af20bcab2e353e66356468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input_fn&lt;/code&gt; raises an end-of-input exception (&lt;a href=&quot;../../../errors/outofrangeerror&quot;&gt;&lt;code&gt;tf.errors.OutOfRangeError&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;StopIteration&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd2c1453c7fb988839665373327bbd32c65e5d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input_fn&lt;/code&gt; raises an end-of-input exception (&lt;a href=&quot;../../errors/outofrangeerror&quot;&gt;&lt;code&gt;tf.errors.OutOfRangeError&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;StopIteration&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adf1130ee05b268dfff33c72b4ab50d5fa4f0db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;input_fn&lt;/code&gt; raises an end-of-input exception (&lt;a href=&quot;../errors/outofrangeerror&quot;&gt;&lt;code&gt;tf.errors.OutOfRangeError&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;StopIteration&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4365124eba4fd96b4e3cdf8de23d8b5f49422aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inputs&lt;/code&gt; must be a list of Tensors or None (equivalent to an empty list), each of which has a corresponding split axis (from &lt;code&gt;input_shard_axes&lt;/code&gt;). Each input is split into &lt;code&gt;num_shards&lt;/code&gt; pieces along the corresponding axis, and computation is applied to each shard in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fb23d11910df2f6dad644ceb9abe47a07cd581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inputs&lt;/code&gt; must be a list of Tensors or None (equivalent to an empty list). Each input is split into &lt;code&gt;num_shards&lt;/code&gt; pieces along the 0-th dimension, and computation is applied to each shard in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1dc674bf798430bca7a4b9aa45bb09eadc66617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0943be3254a37fa6b40a32c1503e1e446bae74c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt; of set sizes. For &lt;code&gt;a&lt;/code&gt; ranked &lt;code&gt;n&lt;/code&gt;, this is a &lt;code&gt;Tensor&lt;/code&gt; with rank &lt;code&gt;n-1&lt;/code&gt;, and the same 1st &lt;code&gt;n-1&lt;/code&gt; dimensions as &lt;code&gt;a&lt;/code&gt;. Each value is the number of unique elements in the corresponding &lt;code&gt;[0...n-1]&lt;/code&gt; dimension of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f340befba18202e8a2aadb52e7a125eee11253c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int32&lt;/code&gt;&lt;code&gt;Tensor&lt;/code&gt;, determined at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f12c92e7727354cfa481c39f5809f0a3dd5d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int&lt;/code&gt; constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184ec1ae066bfcf01df4f4f32966139d7e5a51b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_chief&lt;/code&gt; is determined based on &lt;code&gt;task_type&lt;/code&gt; and &lt;code&gt;cluster&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c6b62846f245fd909d73917e3696cc06696cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jpeg_quality&lt;/code&gt; must be in the interval &lt;code&gt;[0, 100]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b168e5138690a48f73cb5c312acc79143912716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_checkpoint_every_n_hours&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;keep_checkpoint_every_n_hours&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="fe65242bdf37758b4900f16693fd956b6decdc7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_checkpoint_every_n_hours&lt;/code&gt;: In addition to keeping the most recent &lt;code&gt;max_to_keep&lt;/code&gt; checkpoint files, you might want to keep one checkpoint file for every N hours of training. This can be useful if you want to later analyze how a model progressed during a long training session. For example, passing &lt;code&gt;keep_checkpoint_every_n_hours=2&lt;/code&gt; ensures that you keep one checkpoint file for every 2 hours of training. The default value of 10,000 hours effectively disables the feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3802952cd8af52bbc141758fb7ecc9cbfddbe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_checkpoint_max&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;keep_checkpoint_max&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="28df7a3f8aeb875e2ea7fd2ed321364f52f7ef8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kernel_regularizer&lt;/code&gt;: Regularizer to apply a penalty on the layer's kernel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97f2d271ae62ca5bbe6af9fa6ffd6fa3fdf7499" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;labels&lt;/code&gt; must be a dense &lt;code&gt;Tensor&lt;/code&gt; with shape matching &lt;code&gt;logits&lt;/code&gt;, namely &lt;code&gt;[D0, D1, ... DN, 1]&lt;/code&gt;. If &lt;code&gt;label_vocabulary&lt;/code&gt; given, &lt;code&gt;labels&lt;/code&gt; must be a string &lt;code&gt;Tensor&lt;/code&gt; with values from the vocabulary. If &lt;code&gt;label_vocabulary&lt;/code&gt; is not given, &lt;code&gt;labels&lt;/code&gt; must be an integer &lt;code&gt;Tensor&lt;/code&gt; with values specifying the class index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5c5726c89ba714fd92a6d9ec32e87f3dcb6e2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;labels&lt;/code&gt; must be a dense &lt;code&gt;Tensor&lt;/code&gt; with shape matching &lt;code&gt;logits&lt;/code&gt;, namely &lt;code&gt;[D0, D1, ... DN, 1]&lt;/code&gt;. If &lt;code&gt;label_vocabulary&lt;/code&gt; given, &lt;code&gt;labels&lt;/code&gt; must be a string &lt;code&gt;Tensor&lt;/code&gt; with values from the vocabulary. If &lt;code&gt;label_vocabulary&lt;/code&gt; is not given, &lt;code&gt;labels&lt;/code&gt; must be float &lt;code&gt;Tensor&lt;/code&gt; with values in the interval &lt;code&gt;[0, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a33f46c8d272c1062b68d66e4a99c17ab85729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;labels&lt;/code&gt;: This is the second item returned from the &lt;code&gt;input_fn&lt;/code&gt; passed to &lt;code&gt;train&lt;/code&gt;, &lt;code&gt;evaluate&lt;/code&gt;, and &lt;code&gt;predict&lt;/code&gt;. This should be a single &lt;a href=&quot;../../../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;dict&lt;/code&gt; of same (for multi-head models). If mode is &lt;a href=&quot;../../../estimator/modekeys#PREDICT&quot;&gt;&lt;code&gt;tf.estimator.ModeKeys.PREDICT&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;labels=None&lt;/code&gt; will be passed. If the &lt;code&gt;model_fn&lt;/code&gt;'s signature does not accept &lt;code&gt;mode&lt;/code&gt;, the &lt;code&gt;model_fn&lt;/code&gt; must still be able to handle &lt;code&gt;labels=None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b534e955a0fec180b3b30cfc9f9a467b20d707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;labels&lt;/code&gt;: This is the second item returned from the &lt;code&gt;input_fn&lt;/code&gt; passed to &lt;code&gt;train&lt;/code&gt;, &lt;code&gt;evaluate&lt;/code&gt;, and &lt;code&gt;predict&lt;/code&gt;. This should be a single &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;dict&lt;/code&gt; of same (for multi-head models). If mode is &lt;a href=&quot;modekeys#PREDICT&quot;&gt;&lt;code&gt;tf.estimator.ModeKeys.PREDICT&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;labels=None&lt;/code&gt; will be passed. If the &lt;code&gt;model_fn&lt;/code&gt;'s signature does not accept &lt;code&gt;mode&lt;/code&gt;, the &lt;code&gt;model_fn&lt;/code&gt; must still be able to handle &lt;code&gt;labels=None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ff272ccbf5820fc5f544d483247e5517027693" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lam&lt;/code&gt; is the rate parameter describing the distribution(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55edc3c96bf5b380e30d289b4039efd5f2e76e6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;len(tensors_list)&lt;/code&gt; threads will be started, with thread &lt;code&gt;i&lt;/code&gt; enqueuing the tensors from &lt;code&gt;tensors_list[i]&lt;/code&gt;. &lt;code&gt;tensors_list[i1][j]&lt;/code&gt; must match &lt;code&gt;tensors_list[i2][j]&lt;/code&gt; in type and shape, except in the first dimension if &lt;code&gt;enqueue_many&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6955483e26cf8ecb0bde11891718c9524e18ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;linear_model&lt;/code&gt; assigns weights for the presence of &quot;a&quot;, &quot;b&quot;, &quot;c' implicitly, just like &lt;code&gt;indicator_column&lt;/code&gt;, while &lt;code&gt;input_layer&lt;/code&gt; explicitly requires wrapping each of categorical columns with an &lt;code&gt;embedding_column&lt;/code&gt; or an &lt;code&gt;indicator_column&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bc140b5ba01fefe4f35c576fc62c3f1b24cc9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loc = mu&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d6bd8bbf067690f3a8f42f7844dfe21f75d15d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_init_op&lt;/code&gt;: An op to initialize the local variables. Picked from and stored into the &lt;code&gt;LOCAL_INIT_OP&lt;/code&gt; collection in the graph by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80c1c2a4a19344a430ab51ad65a2da7f27203ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_step_count_steps&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;log_step_count_steps&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="260def2a87e2043a69adfd873b2d47d764b3e628" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logcosh = log((exp(x) + exp(-x))/2)&lt;/code&gt;, where x is the error (y_pred - y_true)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcfd80dfd9cf7e448c409721a4a911fd18e9a4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logcosh = log((exp(x) + exp(-x))/2)&lt;/code&gt;, where x is the error &lt;code&gt;y_pred - y_true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d89fc8ccc3cb3692ec1726061dc09465495a55f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logits&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; must have the same dtype (either &lt;code&gt;float16&lt;/code&gt;, &lt;code&gt;float32&lt;/code&gt;, or &lt;code&gt;float64&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34de2a13ee5e4419fe77996f40e228a5384809bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logits&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; must have the same type and shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff5e31fc6dd2759963a3ee8f43525b52a54c4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loss = maximum(neg - pos + 1, 0)&lt;/code&gt; where &lt;code&gt;neg = sum(y_true * y_pred)&lt;/code&gt; and &lt;code&gt;pos = maximum(1 - y_true)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53901e1ec7e83b6df82a0401f9872a40626fe0e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loss&lt;/code&gt; multiplied by &lt;a href=&quot;lossscaleoptimizer#loss_scale&quot;&gt;&lt;code&gt;LossScaleOptimizer.loss_scale()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a81ccf9b40ab52ced51d32ec1d2390947f9c3ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;low = a&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44045a38b8e2b064441307e8c25b390dc6cbf457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_tensor_proto&lt;/code&gt; accepts &quot;values&quot; of a python scalar, a python list, a numpy ndarray, or a numpy scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2695854393c2c28c70761920dbc73274604d58d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_tensor_proto&lt;/code&gt; then converts the numpy array to a tensor proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a2635b6fa45073c3bc33d320ea83d6d5651bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;managed_session()&lt;/code&gt; launches the &quot;summary&quot; and &quot;checkpoint&quot; threads which use either the optionally &lt;code&gt;summary_op&lt;/code&gt; and &lt;code&gt;saver&lt;/code&gt; passed to the constructor, or default ones created automatically by the supervisor. If you want to run your own summary and checkpointing logic, disable these services by passing &lt;code&gt;None&lt;/code&gt; to the &lt;code&gt;summary_op&lt;/code&gt; and &lt;code&gt;saver&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e40a3c0decb60770898a47b38b724ad826cae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;managed_session()&lt;/code&gt; launches the Checkpoint and Summary services (threads). If you need more services to run you can simply launch them in the block controlled by &lt;code&gt;managed_session()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab21dfcba501cd43177f2de77f197f7fb967f4cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;managed_session()&lt;/code&gt; only supports initializing the model by running an &lt;code&gt;init_op&lt;/code&gt; or restoring from the latest checkpoint. If you have special initialization needs, see how to specify a &lt;code&gt;local_init_op&lt;/code&gt; when creating the supervisor. You can also use the &lt;code&gt;SessionManager&lt;/code&gt; directly to create a session and check if it could be initialized automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da6a90591fbf9148be1fe73695bb84fb434d4de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map_func&lt;/code&gt; can accept as arguments and return any type of dataset element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0550b7418c271a20285a09ff80f6d3adc8ab64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mask&lt;/code&gt;: Boolean input mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4511d84f5bd44b98de89476fe12f118e1b13633b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master&lt;/code&gt; is determined by looking up &lt;code&gt;task_type&lt;/code&gt; and &lt;code&gt;task_id&lt;/code&gt; in the &lt;code&gt;cluster_spec&lt;/code&gt;. Defaults to ''.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9189bf65251a0bbda14bc822b3c739fa55376f08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matrix&lt;/code&gt; is a tensor of shape &lt;code&gt;[..., M, M]&lt;/code&gt; whose inner-most 2 dimensions form square matrices. If &lt;code&gt;lower&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; then the strictly upper triangular part of each inner-most matrix is assumed to be zero and not accessed. If &lt;code&gt;lower&lt;/code&gt; is False then the strictly lower triangular part of each inner-most matrix is assumed to be zero and not accessed. &lt;code&gt;rhs&lt;/code&gt; is a tensor of shape &lt;code&gt;[..., M, K]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5925f624642c492652d2efffb321561eb861a63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matrix&lt;/code&gt; is a tensor of shape &lt;code&gt;[..., M, N]&lt;/code&gt; whose inner-most 2 dimensions form &lt;code&gt;M&lt;/code&gt;-by-&lt;code&gt;N&lt;/code&gt; matrices. Rhs is a tensor of shape &lt;code&gt;[..., M, K]&lt;/code&gt; whose inner-most 2 dimensions form &lt;code&gt;M&lt;/code&gt;-by-&lt;code&gt;K&lt;/code&gt; matrices. The computed output is a &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[..., N, K]&lt;/code&gt; whose inner-most 2 dimensions form &lt;code&gt;M&lt;/code&gt;-by-&lt;code&gt;K&lt;/code&gt; matrices that solve the equations &lt;code&gt;matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]&lt;/code&gt; in the least squares sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bc8e47ee3592d8bc1ffb9ab2af56014457deca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matrix&lt;/code&gt;=\(A \in \Re^{m \times n}\), &lt;code&gt;rhs&lt;/code&gt;=\(B \in \Re^{m \times k}\), &lt;code&gt;output&lt;/code&gt;=\(X \in \Re^{n \times k}\), &lt;code&gt;l2_regularizer&lt;/code&gt;=\(\lambda\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780d0411f288c9c4c561812eb42c5972a27aa1a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_delta&lt;/code&gt; must be in the interval &lt;code&gt;[0, 0.5]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de98d7209ef393e3658dfba41d6de117dccea49c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_to_keep&lt;/code&gt; indicates the maximum number of recent checkpoint files to keep. As new files are created, older files are deleted. If None or 0, no checkpoints are deleted from the filesystem but only the last one is kept in the &lt;code&gt;checkpoint&lt;/code&gt; file. Defaults to 5 (that is, the 5 most recent checkpoint files are kept.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107316499e97cd27bf6521566f27943369c4a7c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mean&lt;/code&gt; is the average of all values in &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faff67f10f1e2a3e20331e013f312ae640058d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;variance&lt;/code&gt;, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; are all expected to be of one of two shapes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dceb68d825a4e33b9fea0a034c6ca432b27e73fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_call()&lt;/code&gt; is used to communicate between the replicas and re-enter the cross-replica context. All replicas pause their execution having encountered a &lt;code&gt;merge_call()&lt;/code&gt; call. After that the &lt;code&gt;merge_fn&lt;/code&gt;-function is executed. Its results are then unwrapped and given back to each replica call. After that execution resumes until &lt;code&gt;fn&lt;/code&gt; is complete or encounters another &lt;code&gt;merge_call()&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e517c3984ceade4aecc16a96953c6e4bd66ff3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meshgrid&lt;/code&gt; supports cartesian ('xy') and matrix ('ij') indexing conventions. When the &lt;code&gt;indexing&lt;/code&gt; argument is set to 'xy' (the default), the broadcasting instructions for the first two dimensions are swapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a269a7fa032fac5b2f4910c95e28deee4f3ed0a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;method&lt;/code&gt; can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff76289dadc56ad506b6536609c4ad4995fb6c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min_jpeg_quality&lt;/code&gt; must be in the interval &lt;code&gt;[0, 100]&lt;/code&gt; and less than &lt;code&gt;max_jpeg_quality&lt;/code&gt;. &lt;code&gt;max_jpeg_quality&lt;/code&gt; must be in the interval &lt;code&gt;[0, 100]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44fd3969bdb460d346be6270eeedf5bf1c5eeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt;: Optional. Specifies if this is training, evaluation or prediction. See &lt;a href=&quot;../../../estimator/modekeys&quot;&gt;&lt;code&gt;tf.estimator.ModeKeys&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe020c233373b41dfe3e73b0f3c671fe958a6709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt;: Optional. Specifies if this is training, evaluation or prediction. See &lt;a href=&quot;modekeys&quot;&gt;&lt;code&gt;tf.estimator.ModeKeys&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0332f6abf1f7ae3f141ab4bf2d2cfd7ac1466c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;model_dir&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;model_dir&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="02f44c8932e91b0716c0a01ed63154fb04d95534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;model_fn&lt;/code&gt; should return &lt;code&gt;TPUEstimatorSpec&lt;/code&gt;, which expects the &lt;code&gt;eval_metrics&lt;/code&gt; for TPU evaluation. If eval_on_tpu is False, the evaluation will execute on CPU or GPU; in this case the following discussion on TPU evaluation does not apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8b33312cec6b45c344fef791efe6c47661f476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; bytes of the file (or whole file) in bytes mode or &lt;code&gt;n&lt;/code&gt; bytes of the string if in string (regular) mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5f416a9b5733a2eac498dc25e9c5d79f1b6b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;names&lt;/code&gt; can be any iterable, but if &lt;code&gt;names&lt;/code&gt; is a string, it is treated as a single collection name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6120062e56dd23e9bb088799ef65c77300cfcee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num_prefix_dims = indices.ndims - 1&lt;/code&gt;&lt;code&gt;batch_dim = num_prefix_dims + 1&lt;/code&gt;&lt;code&gt;updates.shape = indices.shape + var.shape[batch_dim:]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6525bb51d4773222ea852bb2ac3834dd72e3100" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num_prefix_dims = sparse_delta.indices.ndims - 1&lt;/code&gt;&lt;code&gt;batch_dim = num_prefix_dims + 1&lt;/code&gt;&lt;code&gt;sparse_delta.updates.shape = sparse_delta.indices.shape + var.shape[ batch_dim:]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f828cc0720b999a08a7f4102e218edb8ec31ba17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num_ps_replicas&lt;/code&gt; is set by counting the number of nodes listed in the &lt;code&gt;ps&lt;/code&gt; attribute of &lt;code&gt;cluster_spec&lt;/code&gt;. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419f9e3ce59724644a1225fc4b8b8f842b8bc60b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num_segments&lt;/code&gt; should equal the number of distinct segment IDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68799da72fece464d6acf37bd7fa6dad701ad4b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num_split&lt;/code&gt;&lt;code&gt;SparseTensor&lt;/code&gt; objects resulting from splitting &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8890e65c2e76e8f98ca5fe26b2d3f88e870a93d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num_worker_replicas&lt;/code&gt; is set by counting the number of nodes listed in the &lt;code&gt;worker&lt;/code&gt; and &lt;code&gt;chief&lt;/code&gt; attributes of &lt;code&gt;cluster_spec&lt;/code&gt;. Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0b91096254b940e7e020fad3ace367303af7f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offsets&lt;/code&gt; is an &lt;code&gt;int64&lt;/code&gt; tensor with shape &lt;code&gt;[D1...DN, (num_chars)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff00cf7cd0e954feb62e6e90092e7b1fff9f25f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;on_batch_begin&lt;/code&gt; and &lt;code&gt;on_batch_end&lt;/code&gt; expect two positional arguments: &lt;code&gt;batch&lt;/code&gt;, &lt;code&gt;logs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813875a69dfbb6b8abf24144da16fd062a09923c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;on_epoch_begin&lt;/code&gt; and &lt;code&gt;on_epoch_end&lt;/code&gt; expect two positional arguments: &lt;code&gt;epoch&lt;/code&gt;, &lt;code&gt;logs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1236396eab699cdc1ef79468b729cc0394346a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;on_train_begin&lt;/code&gt; and &lt;code&gt;on_train_end&lt;/code&gt; expect one positional argument: &lt;code&gt;logs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ac7342015557e2663452342ebb273918ca737d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;on_value&lt;/code&gt; and &lt;code&gt;off_value&lt;/code&gt; must have matching data types. If &lt;code&gt;dtype&lt;/code&gt; is also provided, they must be the same data type as specified by &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d76d60e1aa2433ebee4f0cebbf17084aabd60a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.determinant()&lt;/code&gt; involves a size &lt;code&gt;N&lt;/code&gt;&lt;code&gt;reduce_prod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b250959e9500f947675e6a27dc60fe1e8ee82e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.determinant()&lt;/code&gt; is &lt;code&gt;O(1)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee921e65b455e602fd88e73c07fdcedb3475132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.determinant()&lt;/code&gt; is &lt;code&gt;O(B1*...*Bb)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47da1f2cf6b5cf8ab2f59e5e872d4e9595ecf123" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.determinant()&lt;/code&gt; is &lt;code&gt;O(D1*...*Dd)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732428d4b359acad5170dd78848ddef489b962de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.determinant()&lt;/code&gt; is &lt;code&gt;O(L_determinant + L_solve*N*K + K^2*N + K^3)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2e540a6bdb028580ac7370e55c70b7c927abc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; involves &lt;code&gt;N * R&lt;/code&gt; multiplications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124db9324d8661ebe4e9afa41fec828420d7b989" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; involves &lt;code&gt;N^2 * R&lt;/code&gt; multiplications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8019beb3c67695296e87d0a91a36ca22a2d4f513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; is &lt;code&gt;O(1)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f14ba6d8a39abb1a0e543563fedabca7c972dec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; is &lt;code&gt;O(D1*...*Dd*N*R)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25deba38371be9eb02dd690be87960b1e730398e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; is &lt;code&gt;O(L_matmul*N*R + K*N*R)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9852461d24383df730a7b18adab4c36ffb6e961d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; is &lt;code&gt;O(M * N * R)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b200ad861bc5c145f1dcb5bd0a79e47b517f21f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.matmul(x)&lt;/code&gt; is &lt;code&gt;O(R*N*Log[N])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53417a02f05b295dfff4b08b09532f29068876bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.solve(x)&lt;/code&gt; involves &lt;code&gt;N * R&lt;/code&gt; size &lt;code&gt;N&lt;/code&gt; back-substitutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d873db3385cf9c867476c411d37014bb5c2db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.solve(x)&lt;/code&gt; involves &lt;code&gt;N&lt;/code&gt; divisions and &lt;code&gt;N * R&lt;/code&gt; multiplications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cff67c1b8150d40d6938e7138b1c2d387d7f77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.solve(x)&lt;/code&gt; is &lt;code&gt;O(1)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05019c5ab426b029be9dde63aa6a19ef2a14e53b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.solve(x)&lt;/code&gt; is &lt;code&gt;O(D1*...*Dd*N*R)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37d70c8cb8fc1c27b5de68235a874b4cd27233c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.solve(x)&lt;/code&gt; is &lt;code&gt;O(L_matmul*N*R + N*K*R + K^2*R + K^3)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a2b5d3a587e1b8fedd72b482a6f21eddc57799" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;operator.solve(x)&lt;/code&gt; is &lt;code&gt;O(R*N*Log[N])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0b3492d639fbb64b409d8721e56f3596802e9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.run_metadata&lt;/code&gt; argument of &lt;code&gt;tf.Session.Run&lt;/code&gt; is used to collect metadata about execution. This hook sets the metadata and dumps it in Chrome Trace format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc0de1b795320319e5110fb000cfffa0bc896cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output.ragged_rank = max(data.ragged_rank, rank(mask) - 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f594955b003518356687922d114c7f8686187d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output.shape = params.shape[:axis] + indices.shape[batch_dims:] + params.shape[axis + 1:]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2193b495c82fa96d40cf04d74efc6ad7cb3c673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt;[..., i] = sum_k (&lt;code&gt;a&lt;/code&gt;[..., i, k] * &lt;code&gt;b&lt;/code&gt;[..., k]), for all indices i.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e0dea2eff3337ed9d685067362daee5e67df00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output[..., 0]&lt;/code&gt; contains hue, &lt;code&gt;output[..., 1]&lt;/code&gt; contains saturation, and &lt;code&gt;output[..., 2]&lt;/code&gt; contains value. All HSV values are in &lt;code&gt;[0,1]&lt;/code&gt;. A hue of 0 corresponds to pure red, hue 1/3 is pure green, and 2/3 is pure blue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afae030d04f3a2eea94e7329e94fcd7e13331d17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output[..., i, j] = sum_k (a[..., i, k] * b[..., k, j])&lt;/code&gt;, for all indices &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647b9c0572b0fa18d4d16e9a149f6fa142c25fa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output[i1,..., ik, i1,..., ik] = diagonal[i1, ..., ik]&lt;/code&gt; and 0 everywhere else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37026b4b25297f8566cc02c0b281d227fb3ef80f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddings&lt;/code&gt; and &lt;code&gt;crops&lt;/code&gt; are int32 Tensors of rank 2 and shape [N, 2]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb72633b6559bebce67e7683c28657f06a3733dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parallel_interleave()&lt;/code&gt; maps &lt;code&gt;map_func&lt;/code&gt; across its input to produce nested datasets, and outputs their elements interleaved. Unlike &lt;a href=&quot;../dataset#interleave&quot;&gt;&lt;code&gt;tf.data.Dataset.interleave&lt;/code&gt;&lt;/a&gt;, it gets elements from &lt;code&gt;cycle_length&lt;/code&gt; nested datasets in parallel, which increases the throughput, especially in the presence of stragglers. Furthermore, the &lt;code&gt;sloppy&lt;/code&gt; argument can be used to improve performance, by relaxing the requirement that the outputs are produced in a deterministic order, and allowing the implementation to skip over nested datasets whose elements are not readily available when requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae5717a638495f49fb50c73ece61796ce32450d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parallel_stack&lt;/code&gt; will copy pieces of the input into the output as they become available, in some situations this can provide a performance benefit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a399d1f4d2c711d5abc32cc2240fe0c22dab97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params&lt;/code&gt;: Optional &lt;code&gt;dict&lt;/code&gt; of hyperparameters. Will receive what is passed to Estimator in &lt;code&gt;params&lt;/code&gt; parameter. This allows to configure Estimators from hyper parameter tuning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09071a5dd22428393cf8c4f7a69c918e749762f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pos&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; must have the same shape, otherwise a &lt;code&gt;ValueError&lt;/code&gt; is thrown on Op creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f273873fbbabc4394545267781b3c0ab3e99fb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision_at_k&lt;/code&gt; creates two local variables, &lt;code&gt;true_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt; and &lt;code&gt;false_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt;, that are used to compute the precision@k frequency. This frequency is ultimately returned as &lt;code&gt;precision_at_&amp;lt;k&amp;gt;&lt;/code&gt;: an idempotent operation that simply divides &lt;code&gt;true_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt; by total (&lt;code&gt;true_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt; + &lt;code&gt;false_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a32ea7dd9a16b4b8c0f5571d89acc61504ad4bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pred_fn_pairs&lt;/code&gt; could be a dictionary in v1. However, tf.Tensor and tf.Variable are no longer hashable in v2, so cannot be used as a key for a dictionary. Please use a list or a tuple instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab8a5eed70a61d5488049997bbb9460fcfb177b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prepare_session()&lt;/code&gt; initializes or restores a model. It requires &lt;code&gt;init_op&lt;/code&gt; and &lt;code&gt;saver&lt;/code&gt; as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09dd2ff00546c8d676ad315b6b62370c5d4bda1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess_collapse_repeated=False&lt;/code&gt;, &lt;code&gt;ctc_merge_repeated=False&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500def01c290ed4333c81f7cea1528eea50c993d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess_collapse_repeated=False&lt;/code&gt;, &lt;code&gt;ctc_merge_repeated=True&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613bbe35ec735c26d418a3175bfc88a9a6be986e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess_collapse_repeated=True&lt;/code&gt;, &lt;code&gt;ctc_merge_repeated=False&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050f75af3a169156ec30db4e3ce787faacd9e11e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess_collapse_repeated=True&lt;/code&gt;, &lt;code&gt;ctc_merge_repeated=True&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d98c315781a4d61a821f3e9a17d585068e91bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;probs = pi = [pi_0, ..., pi_{K-1}]&lt;/code&gt;, &lt;code&gt;pi_j &amp;gt; 0&lt;/code&gt;, &lt;code&gt;sum_j pi_j = 1&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60dd2ac8cf95b98d085cd01df6b006079df22c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;protocol&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="b598c10ce4c4e3b659319ec126d482ed67255860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rank(output) = rank(data)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae3695dc299363fbb4d0a406660a863e3679a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rate = beta&lt;/code&gt;, &lt;code&gt;beta &amp;gt; 0&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2f36a7fe13d75365a3c6f9ea8e0526dc67f72f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ready_for_local_init_op&lt;/code&gt;: An op to verify that global state has been initialized and it is alright to run &lt;code&gt;local_init_op&lt;/code&gt;. Picked from and stored into the &lt;code&gt;READY_FOR_LOCAL_INIT_OP&lt;/code&gt; collection in the graph by default. This is needed when the initialization of local variables depends on the values of global variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579f589fb2812eb40314afcc8b2380e849de88b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ready_op&lt;/code&gt;: An op to verify that the variables are initialized. Picked from and stored into the &lt;code&gt;READY_OP&lt;/code&gt; collection in the graph by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a7d572eab947495076fa304aed2592a5397b31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recovery_wait_secs&lt;/code&gt; is the number of seconds between checks that the model is ready. It is used by processes to wait for a model to be initialized or restored. Defaults to 30 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6669a01bafa24ae941c3569a36a184d4952b1453" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recurrent_activation&lt;/code&gt; == &lt;code&gt;sigmoid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc3899fa43fc5f362d8a0b2e22d584f2eadee6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recurrent_dropout&lt;/code&gt; == 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a6acfab4230a596c8f6336ad367eca8ef7a75a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; with rank &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;indices&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; of rank &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48625c88ffea768012bd3adb9993ec5a64eb8689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reset_after&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e421a974a04d9ea6d2a4f6ab261aeac3e4d796e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reshuffle_each_iteration&lt;/code&gt; controls whether the shuffle order should be different for each epoch. In TF 1.X, the idiomatic way to create epochs was through the &lt;code&gt;repeat&lt;/code&gt; transformation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab9c69356fb5d8d42ef34be4404c4453f1da602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result()&lt;/code&gt;: Computes and returns a value for the metric from the state variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e500c0abe3d36fd8d2ab72f87f401fde5ea586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result.rank = values.rank + 1&lt;/code&gt;. &lt;code&gt;result.ragged_rank = values.ragged_rank + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51804a545a69c2eeb611a01f2a193621041af52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result[i1...iN, j]&lt;/code&gt; is the Unicode codepoint for the &lt;code&gt;j&lt;/code&gt;th character in &lt;code&gt;input[i1...iN]&lt;/code&gt;, when decoded using &lt;code&gt;input_encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdda62089d365adeaaf4c6a5c5bb418cd69326d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result[i1...iN, j]&lt;/code&gt; is the substring of &lt;code&gt;input[i1...iN]&lt;/code&gt; that encodes its &lt;code&gt;j&lt;/code&gt;th character, when decoded using &lt;code&gt;input_encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d405a5989bce5b74a11d7121956de2968df53cee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result[i1...iN]&lt;/code&gt; is the string formed by concatenating the Unicode codepoints &lt;code&gt;input[1...iN, :]&lt;/code&gt;, encoded using &lt;code&gt;output_encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebc1f8d0b2a3ce28c2f35181ca9157b2f138fba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rgb&lt;/code&gt;: Output an RGB JPEG image. The &lt;code&gt;channels&lt;/code&gt; dimension of &lt;code&gt;image&lt;/code&gt; must be 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fab150da8dba9fdc68e6973316f200a4fd09cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rhs&lt;/code&gt; is a batch matrix with compatible shape for &lt;code&gt;solve&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf897dd105e8b6535740a073798bea464f063df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rhs&lt;/code&gt; is matrix to the right of multiplication. It has shape &lt;code&gt;[..., M, N]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dafbb542c6c870e244b7aa6d1bb0949a8d2979" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;row_lengths&lt;/code&gt;: a vector with shape &lt;code&gt;[nrows]&lt;/code&gt;, which specifies the length of each row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505129edd5057a9a60dc8a1c4f50bf2de594835b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;row_limits&lt;/code&gt;: a vector with shape &lt;code&gt;[nrows]&lt;/code&gt;, which specifies the stop offset of each row. Equivalent to &lt;code&gt;row_splits[1:]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993e8f9041a3ce5de998e8d77ddc54d507333384" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;row_starts&lt;/code&gt;: a vector with shape &lt;code&gt;[nrows]&lt;/code&gt;, which specifies the start offset of each row. Equivalent to &lt;code&gt;row_splits[:-1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bc7a6007a318a4e4d21c689a0717bf7f0ef583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.flat_values.shape = [nvals] + rt.shape[rt.ragged_rank + 1:]&lt;/code&gt; (where &lt;code&gt;nvals&lt;/code&gt; is the number of items in the flattened dimensions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659e173038c083629e7b4d0ce837c061e72d975f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.nested_row_lengths()&lt;/code&gt; is a tuple containing the &lt;code&gt;row_lengths&lt;/code&gt; tensors for all ragged dimensions in &lt;code&gt;rt&lt;/code&gt;, ordered from outermost to innermost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2401662788cf09541ead1c1f177f5de737074526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.nested_row_splits&lt;/code&gt; is a tuple containing the &lt;code&gt;row_splits&lt;/code&gt; tensors for all ragged dimensions in &lt;code&gt;rt&lt;/code&gt;, ordered from outermost to innermost. In particular, &lt;code&gt;rt.nested_row_splits = (rt.row_splits,) + value_splits&lt;/code&gt; where:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad036c0ba2b0959cf1e933c63de523d5bcea7bac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.nested_value_rowids&lt;/code&gt; is a tuple containing the &lt;code&gt;value_rowids&lt;/code&gt; tensors for all ragged dimensions in &lt;code&gt;rt&lt;/code&gt;, ordered from outermost to innermost. In particular, &lt;code&gt;rt.nested_value_rowids = (rt.value_rowids(),) + value_ids&lt;/code&gt; where:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e1c61525758f7a465a540e113a41163f7a1f4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.row_lengths()[i]&lt;/code&gt; indicates the number of values in the &lt;code&gt;i&lt;/code&gt;th row of &lt;code&gt;rt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279b0358704b60065824b9cbfce31e67043d2523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.row_splits&lt;/code&gt; specifies where the values for each row begin and end in &lt;code&gt;rt.values&lt;/code&gt;. In particular, the values for row &lt;code&gt;rt[i]&lt;/code&gt; are stored in the slice &lt;code&gt;rt.values[rt.row_splits[i]:rt.row_splits[i+1]]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1292c14ec557ab6896493786a68e1322e2388e4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.value_rowids()&lt;/code&gt; corresponds one-to-one with the outermost dimension of &lt;code&gt;rt.values&lt;/code&gt;, and specifies the row containing each value. In particular, the row &lt;code&gt;rt[row]&lt;/code&gt; consists of the values &lt;code&gt;rt.values[j]&lt;/code&gt; where &lt;code&gt;rt.value_rowids()[j] == row&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7394aabfe69b1f24d3e6b6314b3e3ecf92b167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.values.shape = [nvals] + rt.shape[2:]&lt;/code&gt; (where &lt;code&gt;nvals&lt;/code&gt; is the number of items in the outer two dimensions of &lt;code&gt;rt&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2eaaba7b8f626a85344bd55881a32ff6516bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rt.values&lt;/code&gt; is a potentially ragged tensor formed by flattening the two outermost dimensions of &lt;code&gt;rt&lt;/code&gt; into a single dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf20f18403db0f739d347498f6373358f3986fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_restore_ops(session=None)&lt;/code&gt;: When graph building, runs restore operations. If no &lt;code&gt;session&lt;/code&gt; is explicitly specified, the default session is used. No effect when executing eagerly (restore operations are run eagerly). May only be called when &lt;code&gt;save_path&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1d0f7ea393e1950dd444064c975eb2ca55ac28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sample_n_shape = [n] + batch_shape + event_shape&lt;/code&gt;, where &lt;code&gt;sample_n_shape&lt;/code&gt; is the shape of the &lt;code&gt;Tensor&lt;/code&gt; returned from &lt;code&gt;sample_n&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; is the number of samples, &lt;code&gt;batch_shape&lt;/code&gt; defines how many independent distributions there are, and &lt;code&gt;event_shape&lt;/code&gt; defines the shape of samples from each of those independent distributions. Samples are independent along the &lt;code&gt;batch_shape&lt;/code&gt; dimensions, but not necessarily so along the &lt;code&gt;event_shape&lt;/code&gt; dimensions (depending on the particulars of the underlying distribution).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b45c7f5b4c3272c0deb6fa92bcf0c5f0048453" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; is a basic convenience wrapper around the &lt;code&gt;write&lt;/code&gt; method, sequentially numbering checkpoints using &lt;code&gt;save_counter&lt;/code&gt; and updating the metadata used by &lt;a href=&quot;../../../train/latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint&lt;/code&gt;&lt;/a&gt;. More advanced checkpoint management, for example garbage collection and custom numbering, may be provided by other utilities which also wrap &lt;code&gt;write&lt;/code&gt; (&lt;a href=&quot;../../../train/checkpointmanager&quot;&gt;&lt;code&gt;tf.train.CheckpointManager&lt;/code&gt;&lt;/a&gt; for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ed7a91924f9f2621271525e9d214a3e1cd4e91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; is a basic convenience wrapper around the &lt;code&gt;write&lt;/code&gt; method, sequentially numbering checkpoints using &lt;code&gt;save_counter&lt;/code&gt; and updating the metadata used by &lt;a href=&quot;latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint&lt;/code&gt;&lt;/a&gt;. More advanced checkpoint management, for example garbage collection and custom numbering, may be provided by other utilities which also wrap &lt;code&gt;write&lt;/code&gt; (&lt;a href=&quot;checkpointmanager&quot;&gt;&lt;code&gt;tf.train.CheckpointManager&lt;/code&gt;&lt;/a&gt; for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1ca9f5e5fb1ca5b4dac73f9ddaae95024dd61a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save_checkpoints_secs&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;save_checkpoints_secs&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="28f94d35778bf3776d320dfda972efeec8a1e4d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save_checkpoints_steps&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;save_checkpoints_steps&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="298cfd5d22817bb3de7fed3a3ac26a6cc570f8df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save_summary_steps&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;save_summary_steps&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="d20e694ebe37590b8c97b79e469ad47273396d92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;saver&lt;/code&gt;: A &lt;a href=&quot;saver&quot;&gt;&lt;code&gt;tf.compat.v1.train.Saver&lt;/code&gt;&lt;/a&gt; object taking care of saving the variables. Picked from and stored into the &lt;code&gt;SAVERS&lt;/code&gt; collection in the graph by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701dae60e66abb935332db7834dda3cb904f8a55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scaffold_fn&lt;/code&gt; is a function running on CPU to generate the &lt;code&gt;Scaffold&lt;/code&gt;. This function should not capture any Tensors in &lt;code&gt;model_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640be46715bda9f9db4927e137232063ad014751" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scalar * x&lt;/code&gt; of the same type (&lt;code&gt;Tensor&lt;/code&gt; or &lt;code&gt;IndexedSlices&lt;/code&gt;) as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888d51ba7dacb4e2258b862e963d5f354dc225cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scale = sigma&lt;/code&gt;, and,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20f667d797ffb5214c5d9af6b6b37fa9b824539" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self is other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22dc56ff474339754a6ad15eb062739bba5ec320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self&lt;/code&gt;, for chaining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbf6bf5718e138d08610cc8dbe7bccba474f2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sequence_features&lt;/code&gt; contains &lt;code&gt;VarLenFeature&lt;/code&gt;, &lt;code&gt;RaggedFeature&lt;/code&gt;, and &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt; objects. Each &lt;code&gt;VarLenFeature&lt;/code&gt; is mapped to a &lt;code&gt;SparseTensor&lt;/code&gt;; each &lt;code&gt;RaggedFeature&lt;/code&gt; is mapped to a &lt;code&gt;RaggedTensor; and each&lt;/code&gt;FixedLenSequenceFeature&lt;code&gt;is mapped to a&lt;/code&gt;Tensor&lt;code&gt;, each of the specified type. The shape will be&lt;/code&gt;(B,T,) + df.dense_shape&lt;code&gt;for&lt;/code&gt;FixedLenSequenceFeaturedf&lt;code&gt;, where&lt;/code&gt;B&lt;code&gt;is the batch size, and&lt;/code&gt;T&lt;code&gt;is the length of the associated&lt;/code&gt;FeatureList&lt;code&gt;in the&lt;/code&gt;SequenceExample&lt;code&gt;. For instance,&lt;/code&gt;FixedLenSequenceFeature([])&lt;code&gt;yields a scalar 2-D&lt;/code&gt;Tensor&lt;code&gt;of static shape&lt;/code&gt;[None, None]&lt;code&gt;and dynamic shape&lt;/code&gt;[B, T]&lt;code&gt;, while&lt;/code&gt;FixedLenSequenceFeature([k])&lt;code&gt;(for&lt;/code&gt;int k &amp;gt;= 1&lt;code&gt;) yields a 3-D matrix&lt;/code&gt;Tensor&lt;code&gt;of static shape&lt;/code&gt;[None, None, k]&lt;code&gt;and dynamic shape&lt;/code&gt;[B, T, k]`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455672ec5f5fdd65f368b855563836558c00064f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sequence_features&lt;/code&gt; contains &lt;code&gt;VarLenFeature&lt;/code&gt;, &lt;code&gt;RaggedFeature&lt;/code&gt;, and &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt; objects. Each &lt;code&gt;VarLenFeature&lt;/code&gt; is mapped to a &lt;code&gt;SparseTensor&lt;/code&gt;; each &lt;code&gt;RaggedFeature&lt;/code&gt; is mapped to a &lt;code&gt;RaggedTensor&lt;/code&gt;; and each &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt; is mapped to a &lt;code&gt;Tensor&lt;/code&gt;, each of the specified type. The shape will be &lt;code&gt;(T,) + df.dense_shape&lt;/code&gt; for &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt;&lt;code&gt;df&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the length of the associated &lt;code&gt;FeatureList&lt;/code&gt; in the &lt;code&gt;SequenceExample&lt;/code&gt;. For instance, &lt;code&gt;FixedLenSequenceFeature([])&lt;/code&gt; yields a scalar 1-D &lt;code&gt;Tensor&lt;/code&gt; of static shape &lt;code&gt;[None]&lt;/code&gt; and dynamic shape &lt;code&gt;[T]&lt;/code&gt;, while &lt;code&gt;FixedLenSequenceFeature([k])&lt;/code&gt; (for &lt;code&gt;int k &amp;gt;= 1&lt;/code&gt;) yields a 2-D matrix &lt;code&gt;Tensor&lt;/code&gt; of static shape &lt;code&gt;[None, k]&lt;/code&gt; and dynamic shape &lt;code&gt;[T, k]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e736be49a84e8b40dc80450065180d02bd1c38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sequence_numeric_column&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sequence_numeric_column&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="5e7476fff789379be5c4b1b83d6b6b5104bdfb81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;session_config&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;session_config&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="d81de1cc4500f69787ff2c5a192e802f6a35040e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_verbosity&lt;/code&gt; takes precedence over the environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90893c98e4957bd24bbac61faf4a747446793f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shape(output) = [d0, d1, ..., dn-1, p1, ..., pm]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaa61f583ce883d03b9138f11b6d9aa310b7f33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shard&lt;/code&gt; is deterministic. The Dataset produced by &lt;code&gt;A.shard(n, i)&lt;/code&gt; will contain all elements of A whose index mod n = i.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29529f9eb0c76ce6c7788061dab623cd7b560101" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;: A list of ints for the resulting &lt;a href=&quot;../sparse/sparsetensor#dense_shape&quot;&gt;&lt;code&gt;SparseTensor.dense_shape&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4892d4fbf4ea6f6d2b7117edf2d98a5c1d355e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slice&lt;/code&gt; containing integer constants and/or scalar integer &lt;code&gt;Tensor&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3ff6cf078ef0710be0d171fe1da3f0cc135558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparse_delta.updates.shape[:num_prefix_dims]&lt;/code&gt;&lt;code&gt;== sparse_delta.indices.shape[:num_prefix_dims]&lt;/code&gt;&lt;code&gt;== var.shape[:num_prefix_dims]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c63d6457d0c8427e5e9d180b421f9f1c18aba4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparse_recall_at_k&lt;/code&gt; creates two local variables, &lt;code&gt;true_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt; and &lt;code&gt;false_negative_at_&amp;lt;k&amp;gt;&lt;/code&gt;, that are used to compute the recall_at_k frequency. This frequency is ultimately returned as &lt;code&gt;recall_at_&amp;lt;k&amp;gt;&lt;/code&gt;: an idempotent operation that simply divides &lt;code&gt;true_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt; by total (&lt;code&gt;true_positive_at_&amp;lt;k&amp;gt;&lt;/code&gt; + &lt;code&gt;false_negative_at_&amp;lt;k&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec5d3c06e0437e6d7d56b2f803fa66385f5f6ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_offsets[i1...iN, j]&lt;/code&gt; is the start byte offset for the &lt;code&gt;j&lt;/code&gt;th character in &lt;code&gt;input[i1...iN]&lt;/code&gt;, when decoded using &lt;code&gt;input_encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d4cf6574011d4275672dc4576b2b5078a990ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stddev&lt;/code&gt; is the standard deviation of all values in &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ce3dfcbc5a08d2bf869880697b7e7d8b753829" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;steps&lt;/code&gt; batches are processed, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04a293cb88e34e3d3d998b0311c5605db296405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop_gradients&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; or a list of tensors to be considered constant with respect to all &lt;code&gt;xs&lt;/code&gt;. These tensors will not be backpropagated through, as though they had been explicitly disconnected using &lt;code&gt;stop_gradient&lt;/code&gt;. Among other things, this allows computation of partial derivatives as opposed to total derivatives. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82839dd2177057b14346e206228d504e00b3998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop_gradients&lt;/code&gt; provides a way of stopping gradient after the graph has already been constructed, as compared to &lt;a href=&quot;../../stop_gradient&quot;&gt;&lt;code&gt;tf.stop_gradient&lt;/code&gt;&lt;/a&gt; which is used during graph construction. When the two approaches are combined, backpropagation stops at both &lt;a href=&quot;../../stop_gradient&quot;&gt;&lt;code&gt;tf.stop_gradient&lt;/code&gt;&lt;/a&gt; nodes and nodes in &lt;code&gt;stop_gradients&lt;/code&gt;, whichever is encountered first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d592e88c6e89dac3def86f96105f9ab7be7eedb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop_gradients&lt;/code&gt; provides a way of stopping gradient after the graph has already been constructed, as compared to &lt;a href=&quot;stop_gradient&quot;&gt;&lt;code&gt;tf.stop_gradient&lt;/code&gt;&lt;/a&gt; which is used during graph construction. When the two approaches are combined, backpropagation stops at both &lt;a href=&quot;stop_gradient&quot;&gt;&lt;code&gt;tf.stop_gradient&lt;/code&gt;&lt;/a&gt; nodes and nodes in &lt;code&gt;stop_gradients&lt;/code&gt;, whichever is encountered first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b510d5ecc3e75f40a3cd995a2bec3190d8a09b25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strides&lt;/code&gt; controls the strides for the depthwise convolution only, since the pointwise convolution has implicit strides of &lt;code&gt;[1, 1, 1, 1]&lt;/code&gt;. Must have &lt;code&gt;strides[0] = strides[3] = 1&lt;/code&gt;. For the most common case of the same horizontal and vertical strides, &lt;code&gt;strides = [1, stride, stride, 1]&lt;/code&gt;. If any value in &lt;code&gt;rate&lt;/code&gt; is greater than 1, we perform atrous depthwise convolution, in which case all values in the &lt;code&gt;strides&lt;/code&gt; tensor must be equal to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0073066231c5cb71862111bf7a6a903f8b42dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;summary_op&lt;/code&gt;: An op to run and merge the summaries in the graph. Picked from and stored into the &lt;code&gt;SUMMARY_OP&lt;/code&gt; collection in the graph by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d900a58bd65ce454850135c6ba3d721ce6d9f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync_rep_local_step&lt;/code&gt;, one per replica. Compared against the global_step in each accumulator to check for staleness of the gradients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5c58a9a8bc7751af35c500c6d89b68a34a4c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;task&lt;/code&gt; has two attributes: &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt;, where &lt;code&gt;type&lt;/code&gt; can be any of the task types in &lt;code&gt;cluster&lt;/code&gt;. When &lt;code&gt;TF_CONFIG&lt;/code&gt; contains said information, the following properties are set on this class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f95bdc64cdf099113879949d697a6a7428d6fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;task_id&lt;/code&gt; is set to &lt;code&gt;TF_CONFIG['task']['index']&lt;/code&gt;. Must set if &lt;code&gt;cluster_spec&lt;/code&gt; is present; must be 0 (the default value) if &lt;code&gt;cluster_spec&lt;/code&gt; is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85042f5c165e23af0729d3fe3cadfcf9a03da360" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;task_type&lt;/code&gt; is set to &lt;code&gt;TF_CONFIG['task']['type']&lt;/code&gt;. Must set if &lt;code&gt;cluster_spec&lt;/code&gt; is present; must be &lt;code&gt;worker&lt;/code&gt; (the default value) if &lt;code&gt;cluster_spec&lt;/code&gt; is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5383048b9882b730b190f5d2adde2465702aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tensor&lt;/code&gt; can have up to 8 dimensions. The number of dimensions specified in &lt;code&gt;axis&lt;/code&gt; may be 0 or more entries. If an index is specified more than once, a InvalidArgument error is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87428df2bdd46e820e90d79e12c89993f724781c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tensor_dtype=[&quot;float32&quot;, &quot;float64&quot;]&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16eb6fb348d2cc46bc57d244beea3c51673190c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tensor_dtype=[tf.float32, tf.float64]&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed3ef7ab5b32079179007b5aa11f7c81534f07f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tensor_dtype=lambda dtype: dtype.is_integer&lt;/code&gt;. This filter operates in a logical AND relation with &lt;code&gt;op_regex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c21a6c5569e64c2415faec768b5e09d8d129c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tensor_dtypes=(tf.int32, tf.bool)&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea9f81ae8baaa76ae48fa0e6d7a66d4d5e51ea4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.abs(x[i] - y[i]) &amp;lt;= atol + rtol * tf.abs(y[i])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9d27975146474d515a98214aa3d369287b788f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.batch_gather&lt;/code&gt;(&lt;strong&gt;params&lt;/strong&gt;, &lt;strong&gt;indices&lt;/strong&gt;, name=&lt;code&gt;None&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8df28f2427c6d1355e5ca4636d6478f962ebabd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.distribute.is_cross_replica_context()&lt;/code&gt; returns True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca32be50cf9d3e420f53dec1e24140a70071ded5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.io.RaggedFeature.UniformRowLength(length: int)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87688c86fcf929af7a6da356cb1123555e83ad4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.io.RaggedFeature.UniformRowLength(length: int)&lt;/code&gt;. Where &lt;code&gt;key&lt;/code&gt; is a key for a &lt;code&gt;Feature&lt;/code&gt; in the input &lt;code&gt;Example&lt;/code&gt;, whose parsed &lt;code&gt;Tensor&lt;/code&gt; will be the resulting row-partitioning tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770dd6d152166eae73c8e4b7108e8cf41c2d6493" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.newaxis&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; as in NumPy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b927018ddf166561a1d3c2abf218df786ebfd9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.reshape(t, [])&lt;/code&gt; reshapes a tensor &lt;code&gt;t&lt;/code&gt; with one element to a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6457105a3010e3a88bf1eb75bee16a9a893a3fb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.stack([self.jacobian(y[i], x[i]) for i in range(x.shape[0])])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ba0e8272744f95a9368b75d2bc26029eb9c47a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf.tpu.outside_compilation()&lt;/code&gt; is used to run ops in &lt;code&gt;computation&lt;/code&gt; on CPU instead of running on TPU. For example, users can run ops that are not supported on TPU's (e.g. tf.summary.write()) by explicitly placing those ops on CPU's. Below usage of outside compilation will place ops in &lt;code&gt;computation_with_string_ops&lt;/code&gt; on CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f827ef804a9fea8322ddfcea5bedf64965318aba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tf_random_seed&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;tf_random_seed&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="3906af07206c75ccc935bdb7caaa06fba191bdcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thresh == 0.11&lt;/code&gt;: only .1 and 0 will vanish, and the remaining three index/value pairs will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840431cfadf98dbe30b989cfe95b424774984efc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thresh == 0.21&lt;/code&gt;: .1, 0, and -.2 will vanish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280c5585cd8673436307d1e8de4951a6d4518079" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thresh == 0&lt;/code&gt; (the default): all 5 index/value pairs will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbb5be51f10a7438ecd0f27bf948f0f3fd2e4dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;threshold == 0.11&lt;/code&gt;: only .1 and 0 will vanish, and the remaining three index/value pairs will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19895fc3943918169aa21d91246293503c2a9c77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;threshold == 0.21&lt;/code&gt;: .1, 0, and -.2 will vanish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62854c37a81c7c882290f830c805947d95e36e54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;threshold == 0&lt;/code&gt; (the default): all 5 index/value pairs will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a91f2dc27ec33c1246cb8ad2b99f9bbcef2d2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;total_count = N&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt; a positive integer,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894f63534ae12bdd65a3f05d7f6fd44607b7875c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace(x)&lt;/code&gt; returns the sum along the main diagonal of each inner-most matrix in x. If x is of rank &lt;code&gt;k&lt;/code&gt; with shape &lt;code&gt;[I, J, K, ..., L, M, N]&lt;/code&gt;, then output is a tensor of rank &lt;code&gt;k-2&lt;/code&gt; with dimensions &lt;code&gt;[I, J, K, ..., L]&lt;/code&gt; where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eea82c4a0d366026b86edbfc54b509e8e28f4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trace&lt;/code&gt; is useful when debugging, and it always executes during the tracing phase, that is, when the TF graph is constructed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148442a2bc8014edaa16e11e8793efe5996a8115" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;train_distribute&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;train_distribute&lt;/code&gt;,</target>
        </trans-unit>
        <trans-unit id="797d94d0899887290903cb84b70f420ee5812e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;training&lt;/code&gt;: Boolean scalar tensor of Python boolean indicating whether the &lt;code&gt;call&lt;/code&gt; is meant for training or inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ddf80f347a201a2af9e15a414de394f0dca0a1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;training=False&lt;/code&gt;: The layer will normalize its inputs using the mean and variance of its moving statistics, learned during training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bace120514017367dd8ae7d19a63e77c4918a9db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;training=True&lt;/code&gt;: The layer will normalize its inputs using the mean and variance of the current batch of inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63088d71cd0e7ad927ebda44a2f187c15d002895" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true_fn&lt;/code&gt; and &lt;code&gt;false_fn&lt;/code&gt; both return lists of output tensors. &lt;code&gt;true_fn&lt;/code&gt; and &lt;code&gt;false_fn&lt;/code&gt; must have the same non-zero number and type of outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d008c8fb97a0447b9b91db778d1e6dc1c686dc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tuple&lt;/code&gt; containing any of the above (for multidimentional indexing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f227b3fcf44645f574b5f889736afe316c8bd0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unconnected_gradients&lt;/code&gt; determines the value returned for each x in xs if it is unconnected in the graph to ys. By default this is None to safeguard against errors. Mathematically these gradients are zero which can be requested using the &lt;code&gt;'zero'&lt;/code&gt; option. &lt;code&gt;tf.UnconnectedGradients&lt;/code&gt; provides the following options and behaviors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c92e5196997b9a0fd9bec426230e09a5b3916a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uniform_row_length&lt;/code&gt;: A scalar tensor, specifying the length of every row. This row-partitioning scheme may only be used if all rows have the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295c980e1d2597f85400bb2e6593ddcc1845a231" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_name&lt;/code&gt; is used to generate structured names, separated by &lt;code&gt;&quot;/&quot;&lt;/code&gt;, to help identify operations when debugging a graph. Operation names are displayed in error messages reported by the TensorFlow runtime, and in various visualization tools such as TensorBoard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfff02397e8817c544b00954e9fd1488a5f2c3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unroll&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604abf505f0c8e22dc322040092b14c23c7fb7db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update_state()&lt;/code&gt;: Has all updates to the state variables like: self.var.assign_add(...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b82b6e27a8bb5e2c50fb4cc27e4cd73ed5ef9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;updates.shape[:num_prefix_dims]&lt;/code&gt;&lt;code&gt;== indices.shape[:num_prefix_dims]&lt;/code&gt;&lt;code&gt;== var.shape[:num_prefix_dims]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b353a4d01bad34e4441bfa97fea0bbe112b5c61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;updates&lt;/code&gt; is &lt;code&gt;Tensor&lt;/code&gt; of rank &lt;code&gt;Q-1+P-K&lt;/code&gt; with shape:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a942cb5078fae23f62b6fb3e4087909d68dae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use_bias&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb32510516f233262bf1ee179820c25568a5c5b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; safely cast to &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30939ecc0801d5d67e6e615965e6e956cbd91cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_key&lt;/code&gt; specifies the feature key for a variable-length list of values; and &lt;code&gt;partitions&lt;/code&gt; specifies zero or more feature keys for partitioning those values into higher dimensions. Each element of &lt;code&gt;partitions&lt;/code&gt; must be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ed97fee6371373b8412f13291d9bd100c70a14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_key&lt;/code&gt;: The name of key for a &lt;code&gt;Feature&lt;/code&gt; in the &lt;code&gt;Example&lt;/code&gt; whose parsed &lt;code&gt;Tensor&lt;/code&gt; will be the resulting &lt;a href=&quot;../sparse/sparsetensor#values&quot;&gt;&lt;code&gt;SparseTensor.values&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714d256be3a4996123973d1196888fdae4b70163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_rowids&lt;/code&gt; and &lt;code&gt;nrows&lt;/code&gt;: &lt;code&gt;value_rowids&lt;/code&gt; is a vector with shape &lt;code&gt;[nvals]&lt;/code&gt;, corresponding one-to-one with &lt;code&gt;values&lt;/code&gt;, which specifies each value's row index. In particular, the row &lt;code&gt;rt[row]&lt;/code&gt; consists of the values &lt;code&gt;rt.values[j]&lt;/code&gt; where &lt;code&gt;value_rowids[j]==row&lt;/code&gt;. &lt;code&gt;nrows&lt;/code&gt; is an integer scalar that specifies the number of rows in the &lt;code&gt;RaggedTensor&lt;/code&gt;. (&lt;code&gt;nrows&lt;/code&gt; is used to indicate trailing empty rows.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37919a4feb071a741ac1a024ce80d80a3560695a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt; is simply &lt;code&gt;sp_values.values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7face91423814c6d0b2c776f53f965813931d351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt;: A 1-D tensor of any type and shape &lt;code&gt;[N]&lt;/code&gt;, which supplies the values for each element in &lt;code&gt;indices&lt;/code&gt;. For example, given &lt;code&gt;indices=[[1,3], [2,4]]&lt;/code&gt;, the parameter &lt;code&gt;values=[18, 3.6]&lt;/code&gt; specifies that element [1,3] of the sparse tensor has a value of 18, and element [2,4] of the tensor has a value of 3.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa34aa08651f9d69dbe26cc6731124cb0ee9cc59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt;: A &lt;code&gt;Tensor&lt;/code&gt; of any dtype with shape &lt;code&gt;[D0, D1, ..., Dn]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f55503c2f9eb26695df561a0276c3b2c018499b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var_list&lt;/code&gt; must be a list of &lt;code&gt;Variable&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt; objects. This method creates shadow variables for all elements of &lt;code&gt;var_list&lt;/code&gt;. Shadow variables for &lt;code&gt;Variable&lt;/code&gt; objects are initialized to the variable's initial value. They will be added to the &lt;code&gt;GraphKeys.MOVING_AVERAGE_VARIABLES&lt;/code&gt; collection. For &lt;code&gt;Tensor&lt;/code&gt; objects, the shadow variables are initialized to 0 and zero debiased (see docstring in &lt;code&gt;assign_moving_average&lt;/code&gt; for more details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79096dd852bce13eefaf7b58d1d7a81516f8343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var_list&lt;/code&gt; specifies the variables that will be saved and restored. It can be passed as a &lt;code&gt;dict&lt;/code&gt; or a list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9825e3dd7cc3d275d125000799f71bfdb65525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait_for_session()&lt;/code&gt; waits for a model to be initialized by other processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240d9afc23665503718aa7615612e28120095e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weights&lt;/code&gt; acts as a coefficient for the loss. If a scalar is provided, then the loss is simply scaled by the given value. If &lt;code&gt;weights&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[batch_size]&lt;/code&gt;, then the total loss for each sample of the batch is rescaled by the corresponding element in the &lt;code&gt;weights&lt;/code&gt; vector. If the shape of &lt;code&gt;weights&lt;/code&gt; matches the shape of &lt;code&gt;predictions&lt;/code&gt;, then the loss of each measurable element of &lt;code&gt;predictions&lt;/code&gt; is scaled by the corresponding value of &lt;code&gt;weights&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38eab8c10e30c06130f9a83da075fede481276d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weights&lt;/code&gt; acts as a coefficient for the loss. If a scalar is provided, then the loss is simply scaled by the given value. If &lt;code&gt;weights&lt;/code&gt; is a tensor of shape &lt;code&gt;[batch_size]&lt;/code&gt;, then the loss weights apply to each corresponding sample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1434f805ebb4fbe6c9df03b5666230fa99fbc0ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weights&lt;/code&gt; acts as a coefficient for the loss. If a scalar is provided, then the loss is simply scaled by the given value. If &lt;code&gt;weights&lt;/code&gt; is a tensor of size &lt;code&gt;[batch_size]&lt;/code&gt;, then the total loss for each sample of the batch is rescaled by the corresponding element in the &lt;code&gt;weights&lt;/code&gt; vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83889f9b6b34ccbb04b78c7a7e2bdacc8ba5caa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weights&lt;/code&gt; acts as a coefficient for the loss. If a scalar is provided, then the loss is simply scaled by the given value. If &lt;code&gt;weights&lt;/code&gt; is a tensor of size &lt;code&gt;[batch_size]&lt;/code&gt;, then the total loss for each sample of the batch is rescaled by the corresponding element in the &lt;code&gt;weights&lt;/code&gt; vector. If the shape of &lt;code&gt;weights&lt;/code&gt; matches the shape of &lt;code&gt;predictions&lt;/code&gt;, then the loss of each measurable element of &lt;code&gt;predictions&lt;/code&gt; is scaled by the corresponding value of &lt;code&gt;weights&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72785cacd008cff8541310d033989f383baa044b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while_loop&lt;/code&gt; implements non-strict semantics, enabling multiple iterations to run in parallel. The maximum number of parallel iterations can be controlled by &lt;code&gt;parallel_iterations&lt;/code&gt;, which gives users some control over memory consumption and execution order. For correct programs, &lt;code&gt;while_loop&lt;/code&gt; should return the same result for any parallel_iterations &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713b0fc22821db0f21fff82db6c1560f146d36da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;write&lt;/code&gt; does not number checkpoints, increment &lt;code&gt;save_counter&lt;/code&gt;, or update the metadata used by &lt;a href=&quot;../../../train/latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint&lt;/code&gt;&lt;/a&gt;. It is primarily intended for use by higher level checkpoint management utilities. &lt;code&gt;save&lt;/code&gt; provides a very basic implementation of these features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ddb7fd4bcc0933b773796e19686e5885fd3c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;write&lt;/code&gt; does not number checkpoints, increment &lt;code&gt;save_counter&lt;/code&gt;, or update the metadata used by &lt;a href=&quot;latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint&lt;/code&gt;&lt;/a&gt;. It is primarily intended for use by higher level checkpoint management utilities. &lt;code&gt;save&lt;/code&gt; provides a very basic implementation of these features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362f5ba7e6596e2efc8a5be34316c6a0c1e8160f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x / y&lt;/code&gt; evaluated in floating point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54d5566b86217cb67b2c6e5cafb5aac909bdde2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x / y&lt;/code&gt; returns the quotient of x and y.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4ec0fef104577ba917ac0c79751cf670af8e86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x / y&lt;/code&gt; rounded down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6097dcab013032da28b581dd65c6e5e71c7bf244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x in S^{k-1}&lt;/code&gt;, i.e., the &lt;code&gt;(k-1)&lt;/code&gt;-simplex,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8750d18a0c99edc276aecb1282ebcfd23320fda2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must have the same numeric type. If the inputs are floating point, the output will have the same type. If the inputs are integral, the inputs are cast to &lt;code&gt;float32&lt;/code&gt; for &lt;code&gt;int8&lt;/code&gt; and &lt;code&gt;int16&lt;/code&gt; and &lt;code&gt;float64&lt;/code&gt; for &lt;code&gt;int32&lt;/code&gt; and &lt;code&gt;int64&lt;/code&gt; (matching the behavior of Numpy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1476a377ccf9036856469cca53f482a3e1c715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must have the same type, and the result will have the same type as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07961df059e18dfd9e5fb27020b179973ed12cc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is a batch matrix with compatible shape for &lt;code&gt;matmul&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda9c20328479b4852018d7c802c8710e9efa046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is a sequence of &lt;code&gt;Tensor&lt;/code&gt; inputs to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9b5e08f3aa0df6376328ce8785118b714c1873" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is changed in-place since the function is mainly used internally to standarize images and feed them to your network. If a copy of &lt;code&gt;x&lt;/code&gt; would be created instead it would have a significant performance cost. If you want to apply this method without changing the input in-place you can call the method creating a copy before:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b58b8d16ef1e012623036ac159378b9dd240f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y = sign(x) = -1&lt;/code&gt; if &lt;code&gt;x &amp;lt; 0&lt;/code&gt;; 0 if &lt;code&gt;x == 0&lt;/code&gt;; 1 if &lt;code&gt;x &amp;gt; 0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15037aafea957b9ef266d06605cafa94a8657f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt; is a &lt;code&gt;Tensor&lt;/code&gt; or sequence of &lt;code&gt;Tensor&lt;/code&gt; outputs of applying TensorFlow operations in &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177174d186c8a34b2e9d84974c7fc45b527d347a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y_pred&lt;/code&gt; and &lt;code&gt;y_true&lt;/code&gt; should be passed in as vectors of probabilities, rather than as labels. If necessary, use &lt;a href=&quot;../../one_hot&quot;&gt;&lt;code&gt;tf.one_hot&lt;/code&gt;&lt;/a&gt; to expand &lt;code&gt;y_true&lt;/code&gt; as a vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d3aabffef2f0f9e7c0624d05788257f03bea48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y_true&lt;/code&gt; and &lt;code&gt;y_pred&lt;/code&gt; should have the same shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be54ba04c47a3c48855f5b6a7f4fd9259d78e2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y_true&lt;/code&gt; values are expected to be -1 or 1. If binary (0 or 1) labels are provided we will convert them to -1 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a04e6985caa80419aca491f5b4963b5189489c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ys&lt;/code&gt; and &lt;code&gt;xs&lt;/code&gt; are each a &lt;code&gt;Tensor&lt;/code&gt; or a list of tensors. &lt;code&gt;grad_ys&lt;/code&gt; is a list of &lt;code&gt;Tensor&lt;/code&gt;, holding the gradients received by the &lt;code&gt;ys&lt;/code&gt;. The list must be the same length as &lt;code&gt;ys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4870c378f5be9f241f3d88916cb190e126680b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;a href=&quot;function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt; is polymorphic&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0963bb900a0acb53b1b1dbaa5998d29cb197e8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Consuming SavedModels asynchronously&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f60bd3e2de23785f73f07eed1afbfb51b5ef6c1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Data parallelism&lt;/em&gt; is where we run multiple copies of the model on different slices of the input data. This is in contrast to &lt;em&gt;model parallelism&lt;/em&gt; where we divide up a single copy of a model across multiple devices. Note: we only support data parallelism for now, but hope to add support for model parallelism in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b4afd93f288f7cdac41f03870a9805312ad726" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Debug logging in AutoGraph&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b89a531c7276420c3c020512c62db4504a2c1da" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Distribute-aware layers&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b3ac8f71f44fc2aaf6f7b21a2a9892f37925bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example Usage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7778d7489c6a62c13ac40396eea8a8ff664a6fca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Example usage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abe32adb48107f5de1087c0a61cda1b2b3cc8dd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Features&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Features&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="798eb35f1e8f42993c637a5eda6d6f299ba357a1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fully-known shape:&lt;/em&gt; has a known number of dimensions and a known size for each dimension. e.g. &lt;code&gt;TensorShape([16, 256])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a753dd59f4dc5b7977df41992d06406a670f61c4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Glossary&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Glossary&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d2c706c091d8683f86f21946441cc2834bb67ecc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to update a variable&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc319e564126d6147a3b6d36c8038aeb37a79a3d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Importing SavedModels from TensorFlow 1.x&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114dfae46b5581feb427a06e59a262af1de8f0e0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Input signatures&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d203702aa2788b436a9e39dbe7cb0af7256b38be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Limitation&lt;/em&gt;: this Op only broadcasts the dense side to the sparse side, but not the other direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae3ed54270268ffb3b111648fbe42dfb9d26dbd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Loading Keras models&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199fda6a516d16b5d99f00f4818f4cc123a6818a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Locality&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Locality&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97196a6a668191b8365569fbe19f926502882241" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;MIN_COMBINED Mode Example&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4d3fb928ec4cb834fd2d0c8c06cd22d77b929c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Mirrored variables&lt;/em&gt;: These are variables that are copied to multiple devices, where we keep the copies in sync by applying the same updates to every copy. Normally would only be used with sync training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec0448891bceb0b5fe7da7b3eea7261616c59d2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.:&lt;/em&gt; If &lt;code&gt;dynamic_pad&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, you must ensure that either (i) the &lt;code&gt;shapes&lt;/code&gt; argument is passed, or (ii) all of the tensors in &lt;code&gt;tensors&lt;/code&gt; must have fully-defined shapes. &lt;code&gt;ValueError&lt;/code&gt; will be raised if neither of these conditions holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c204dea30ebc379fea45bb0535fd5e00bc9030" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.:&lt;/em&gt; If &lt;code&gt;dynamic_pad&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, you must ensure that either (i) the &lt;code&gt;shapes&lt;/code&gt; argument is passed, or (ii) all of the tensors in &lt;code&gt;tensors_list&lt;/code&gt; must have fully-defined shapes. &lt;code&gt;ValueError&lt;/code&gt; will be raised if neither of these conditions holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891ee7108e779a01055d57c1188435175c63d622" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.:&lt;/em&gt; You must ensure that either (i) the &lt;code&gt;shapes&lt;/code&gt; argument is passed, or (ii) all of the tensors in &lt;code&gt;tensors&lt;/code&gt; must have fully-defined shapes. &lt;code&gt;ValueError&lt;/code&gt; will be raised if neither of these conditions holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cebb1905bb8bfddbe3682c43532c9c1fda25f6c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; Before invoking &lt;a href=&quot;operation#run&quot;&gt;&lt;code&gt;Operation.run()&lt;/code&gt;&lt;/a&gt;, its graph must have been launched in a session, and either a default session must be available, or &lt;code&gt;session&lt;/code&gt; must be specified explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddaf935cdd6e6eaa7330b8fc4bc65789b7e6032" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; Before invoking &lt;a href=&quot;sparsetensor#eval&quot;&gt;&lt;code&gt;SparseTensor.eval()&lt;/code&gt;&lt;/a&gt;, its graph must have been launched in a session, and either a default session must be available, or &lt;code&gt;session&lt;/code&gt; must be specified explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ab796d377717740016aa78a9df87b28816554d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; Before invoking &lt;a href=&quot;tensor#eval&quot;&gt;&lt;code&gt;Tensor.eval()&lt;/code&gt;&lt;/a&gt;, its graph must have been launched in a session, and either a default session must be available, or &lt;code&gt;session&lt;/code&gt; must be specified explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adb0092ee033aa45e0687eb92304dce7f375e3d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; Entering a &lt;code&gt;with sess.as_default():&lt;/code&gt; block does not affect the current default graph. If you are using multiple graphs, and &lt;code&gt;sess.graph&lt;/code&gt; is different from the value of &lt;a href=&quot;get_default_graph&quot;&gt;&lt;code&gt;tf.compat.v1.get_default_graph&lt;/code&gt;&lt;/a&gt;, you must explicitly enter a &lt;code&gt;with sess.graph.as_default():&lt;/code&gt; block to make &lt;code&gt;sess.graph&lt;/code&gt; the default graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69b75367a0ed258d02306204677149d2f266cb1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; If either &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;other&lt;/code&gt; is completely unknown, concatenation will discard information about the other shape. In future, we might support concatenation that preserves this information for use with slicing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52681c6e74b4b249720e02b5c1fa1d1029b29ea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; If the failed op was synthesized at runtime, e.g. a &lt;code&gt;Send&lt;/code&gt; or &lt;code&gt;Recv&lt;/code&gt; op, there will be no corresponding &lt;a href=&quot;../operation&quot;&gt;&lt;code&gt;tf.Operation&lt;/code&gt;&lt;/a&gt; object. In that case, this will return &lt;code&gt;None&lt;/code&gt;, and you should instead use the &lt;a href=&quot;operror#node_def&quot;&gt;&lt;code&gt;tf.errors.OpError.node_def&lt;/code&gt;&lt;/a&gt; to discover information about the op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd856fcd5b1db7944508e5e9b6c88acb05018fe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; The &lt;code&gt;as_default&lt;/code&gt; context manager &lt;em&gt;does not&lt;/em&gt; close the session when you exit the context, and you must close the session explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656c008463c0ff3d79fc8ed9938f48987767c7ee" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; The control dependencies context applies &lt;em&gt;only&lt;/em&gt; to ops that are constructed within the context. Merely using an op or tensor in the context does not add a control dependency. The following example illustrates this point:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7620dc4f0af3a74d7f4f571a2f2cb6ab6a1045c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;N.B.&lt;/em&gt; The default session is a property of the current thread. If you create a new thread, and wish to use the default session in that thread, you must explicitly add a &lt;code&gt;with sess.as_default():&lt;/code&gt; in that thread's function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9746a33c66f73627685eeb9c2184b027c001800e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/floormod&quot;&gt;&lt;code&gt;math.floormod&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76540bb5052f6159e8900b0301eb9559d9696374" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/greater&quot;&gt;&lt;code&gt;math.greater&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe30fbfda5325b7cf2b648134d4a95fa26aaa19" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/greater_equal&quot;&gt;&lt;code&gt;math.greater_equal&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c5f335c99f9667cff4f73110cadf47a0021df7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/less&quot;&gt;&lt;code&gt;math.less&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e298f667be9bc6b4648b938062492f0e1fd8bd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/less_equal&quot;&gt;&lt;code&gt;math.less_equal&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b126242de961de19f36b68e5f8cd1f5f4f19b8ca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/logical_and&quot;&gt;&lt;code&gt;math.logical_and&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0e8f061a6d059a769e36ffc3e542a87799a1db" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;../../math/logical_or&quot;&gt;&lt;code&gt;math.logical_or&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99559a7261f7a42ee46d72e3e9c429b23d115166" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;add&quot;&gt;&lt;code&gt;math.add&lt;/code&gt;&lt;/a&gt; supports broadcasting. &lt;code&gt;AddN&lt;/code&gt; does not. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a84a4e889afc92326df20e4bc706d940d12c0c7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;floormod&quot;&gt;&lt;code&gt;math.floormod&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e7abfa065d2d84f0a602b6628b20c259592560" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;greater&quot;&gt;&lt;code&gt;math.greater&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27236cfe7b683d6bffe0917f375105559b793631" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;greater_equal&quot;&gt;&lt;code&gt;math.greater_equal&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4e2824e4e20b892dd86fff3a9b727263459485" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;less&quot;&gt;&lt;code&gt;math.less&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30b8982b2f1da1983b73c1292b588c8b0870182" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;less_equal&quot;&gt;&lt;code&gt;math.less_equal&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192106b99913a403ffa00484864b92bae578a209" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;logical_and&quot;&gt;&lt;code&gt;math.logical_and&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e8ab01d0ae22e03e1e5afcde2bbb1ba7c2e97f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;logical_or&quot;&gt;&lt;code&gt;math.logical_or&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9ef2dcb6bf1731ab2cf7b010c953a0ec4cc7d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/add&quot;&gt;&lt;code&gt;math.add&lt;/code&gt;&lt;/a&gt; supports broadcasting. &lt;code&gt;AddN&lt;/code&gt; does not. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa2e87de4ec340a6c52b9b8dcb68abaa94bf044" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/floormod&quot;&gt;&lt;code&gt;math.floormod&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263a26391ec23fb7f099d9038ae56f5dae41aa98" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/greater&quot;&gt;&lt;code&gt;math.greater&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199faa13ca7f3cb125274bf60b9bb6bbb57f7a4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/greater_equal&quot;&gt;&lt;code&gt;math.greater_equal&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10415ed0a09f21b695967b22990e2e66b8412c3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/less&quot;&gt;&lt;code&gt;math.less&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf89ff665268506d258975ed50443f9a13db4a62" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/less_equal&quot;&gt;&lt;code&gt;math.less_equal&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0c2f85f8e67e8fe044e9b345c7f6957fc06211" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/logical_and&quot;&gt;&lt;code&gt;math.logical_and&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a3cd7b4908de073464365e6960ca8c33e3eb69" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/logical_or&quot;&gt;&lt;code&gt;math.logical_or&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721325a08d91476b3c6ca66d461a341ea05c4877" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;math/multiply&quot;&gt;&lt;code&gt;tf.multiply&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ff3beb09a30d54b6f624b2cc93c99c98877c4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;maximum&quot;&gt;&lt;code&gt;math.maximum&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb4ed4e923cb5787a092fe948abe0bf12388008" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;minimum&quot;&gt;&lt;code&gt;math.minimum&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ac4bcae8b9c7152d82cbe6d9f7cc21df9c0918" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;multiply&quot;&gt;&lt;code&gt;tf.multiply&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95309c01422708765416d7060309d52454d50d30" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;a href=&quot;squared_difference&quot;&gt;&lt;code&gt;math.squared_difference&lt;/code&gt;&lt;/a&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788fdec55c25c1331a771a84e62d11445457b151" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;code&gt;Div&lt;/code&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a125fe6c49cc2e6124906aa40ea8c6a46f9acc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;code&gt;Substr&lt;/code&gt; supports broadcasting up to two dimensions. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35210ba8bd5af1e9bd426d3ede054053c45b293e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;code&gt;Subtract&lt;/code&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a012b0e1a536de9b123bdcfb7d0b603cfa9e67b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;code&gt;floor_div&lt;/code&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb7c8f62465ab6153dea86c3b22d55bb51da051" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;code&gt;truncatediv&lt;/code&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a205f4d7f1997b2e284c4cc3a74629247bcdd25" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: &lt;code&gt;truncatemod&lt;/code&gt; supports broadcasting. More about broadcasting &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddcc493d9b4cf744c68aa13be155b2b94647e11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: Bitcast is implemented as a low-level cast, so machines with different endian orderings will give different results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206bb7da216d3072e22f1bb71ff46f8e7469e412" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parameter servers&lt;/em&gt;: These are machines that hold a single copy of parameters/variables, used by some strategies (right now just &lt;a href=&quot;../../distribute/experimental/parameterserverstrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.ParameterServerStrategy&lt;/code&gt;&lt;/a&gt;). All replicas that want to operate on a variable retrieve it at the beginning of a step and send an update to be applied at the end of the step. These can in priniciple support either sync or async training, but right now we only have support for async training with parameter servers. Compare to &lt;a href=&quot;../../distribute/experimental/centralstoragestrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.CentralStorageStrategy&lt;/code&gt;&lt;/a&gt;, which puts all variables on a single device on the same machine (and does sync training), and &lt;a href=&quot;../../distribute/mirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.MirroredStrategy&lt;/code&gt;&lt;/a&gt;, which mirrors variables to multiple devices (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97d4e3eaf39600496f9954718509d5b0547716a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parameter servers&lt;/em&gt;: These are machines that hold a single copy of parameters/variables, used by some strategies (right now just &lt;a href=&quot;distribute/experimental/parameterserverstrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.ParameterServerStrategy&lt;/code&gt;&lt;/a&gt;). All replicas that want to operate on a variable retrieve it at the beginning of a step and send an update to be applied at the end of the step. These can in priniciple support either sync or async training, but right now we only have support for async training with parameter servers. Compare to &lt;a href=&quot;distribute/experimental/centralstoragestrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.CentralStorageStrategy&lt;/code&gt;&lt;/a&gt;, which puts all variables on a single device on the same machine (and does sync training), and &lt;a href=&quot;distribute/mirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.MirroredStrategy&lt;/code&gt;&lt;/a&gt;, which mirrors variables to multiple devices (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34787eed0a3cef9c5b6406998fe6fa66d5bbabb0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Partially-known shape:&lt;/em&gt; has a known number of dimensions, and an unknown size for one or more dimension. e.g. &lt;code&gt;TensorShape([None, 256])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7945c08c394ff2c16d680c3c9ad25bdc1a1d7897" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Replica context vs. Cross-replica context&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58dc975f8be36a7e5d8e03ed8ee6f16c8541fce7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SCALED mode Example&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858dec0ea6f9cb9f54bad1615aab5c500f959027" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;SavedModel serialization&lt;/em&gt; (not yet added)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9589aa5a843b95c3373aff04e2b925d19813663e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Sync on read variables&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d468c878a585d2572e97385ed6e6acefcba101" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Synchronous&lt;/em&gt;, or more commonly &lt;em&gt;sync&lt;/em&gt;, training is where the updates from each replica are aggregated together before updating the model variables. This is in contrast to &lt;em&gt;asynchronous&lt;/em&gt;, or &lt;em&gt;async&lt;/em&gt; training, where each replica updates the model variables independently. You may also have replicas partitioned into groups which are in sync within each group but async between groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7f6fb016751604a76d71222eb227c61c2203d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Unknown shape:&lt;/em&gt; has an unknown number of dimensions, and an unknown size in all dimensions. e.g. &lt;code&gt;TensorShape(None)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623e69a1404187abf194ba82d8b4b010822c1b03" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Variables may only be created once&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ea93a2a3e1dce6ce69cb9acc3992ecccffddf0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;axis (int) attribute&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08652daad26fe217ef0c054b74da9d4303e4f97e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ensure_minimum_range (float) attribute&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405d2fd39b79c455b88ced5c54baa9d2ce1a0464" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;narrow_range (bool) attribute&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec2bcd65c870429640a7336a6fe96cae101e4ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;replica context&lt;/em&gt; is when we are in some function that is being called once for each replica. Otherwise we are in cross-replica context, which is useful for calling &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; methods which operate across the replicas (like &lt;code&gt;reduce_to()&lt;/code&gt;). By default you start in a replica context (the &quot;default single replica context&quot;) and then some methods can switch you back and forth. There is a third mode you can be in called &lt;em&gt;update context&lt;/em&gt; used when updating variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de11b11ce0fd959ef95813d0c462f0415eb1555" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;replica context&lt;/em&gt; is when we are in some function that is being called once for each replica. Otherwise we are in cross-replica context, which is useful for calling &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; methods which operate across the replicas (like &lt;code&gt;reduce_to()&lt;/code&gt;). By default you start in a replica context (the &quot;default single replica context&quot;) and then some methods can switch you back and forth. There is a third mode you can be in called &lt;em&gt;update context&lt;/em&gt; used when updating variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ea40e5844882bf39c5adebdfc6d2de8599abf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;About setting &lt;code&gt;layer.trainable = False&lt;/code&gt; on a `BatchNormalization layer:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8786405ec1d37df3c5cac6d0416a3b3f578f1db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;abs&quot;&gt;&lt;code&gt;tf.abs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4d021a2d7170aeec50730517a02d491f1520f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;accuracy&quot;&gt;&lt;code&gt;tf.metrics.Accuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601ec293e3df1da73969102e176b6579ea09fe10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;acos&quot;&gt;&lt;code&gt;tf.acos&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd72b98b52fee45bd44aa19d51a795c40facc6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;acosh&quot;&gt;&lt;code&gt;tf.acosh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891de16db9c5801b22293e68446ad9af87bfa9c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;adadelta&quot;&gt;&lt;code&gt;tf.optimizers.Adadelta&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ae97395ea4d22e32a5f2778b698eadb8c14a87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;adagrad&quot;&gt;&lt;code&gt;tf.optimizers.Adagrad&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e5d44c521259ed64be00535515d306d820531d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;adam&quot;&gt;&lt;code&gt;tf.optimizers.Adam&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32441bd05e0100ae3dc27993ca0e4c2ebc990efd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;adamax&quot;&gt;&lt;code&gt;tf.optimizers.Adamax&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9930689ce8e16b856859f3e648a447f9ee324e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;add&quot;&gt;&lt;code&gt;tf.add&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c563bac9e4bb069b74a34caaa70c9849f420d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;add_n&quot;&gt;&lt;code&gt;tf.add_n&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191187d1554cb2bcfb3a85a2ac5b8e2016a02d25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;all_candidate_sampler&quot;&gt;&lt;code&gt;tf.nn.all_candidate_sampler&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee21f148c21bc6ba3f454a69083af59fd5e136d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;argmax&quot;&gt;&lt;code&gt;tf.argmax&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08983bec1638b7c9a3f51d01576f8ce7c7fe7bfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;argmin&quot;&gt;&lt;code&gt;tf.argmin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a858d5fd35eb58939755b3446eeeac359295a643" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;as_dtype&quot;&gt;&lt;code&gt;tf.as_dtype&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24778d0e2b56905d56d8502c4009ea844c6c7161" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;as_string&quot;&gt;&lt;code&gt;tf.as_string&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc873832ee400c9f5fa11f8a29092fe4671e42b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;as_text&quot;&gt;&lt;code&gt;tf.compat.as_str&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b0d4ef31e7d854587dcbd4dc3a0f313a5a90d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;asin&quot;&gt;&lt;code&gt;tf.asin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d40a9ba3128302a02faba462906ea798bb1110" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;asinh&quot;&gt;&lt;code&gt;tf.asinh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db633e896091588a02cd54ab218621bf0b02cee0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;assert&quot;&gt;&lt;code&gt;tf.Assert&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e97f6b62194132e6076da9076bd2881446bb1e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;assert_equal&quot;&gt;&lt;code&gt;tf.assert_equal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39fe63bb2160ef66017ed05684ca26a16cf324b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;assert_greater&quot;&gt;&lt;code&gt;tf.assert_greater&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2fee8d1bc43bfedbcb804ad12dc2154bfd9241" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;assert_less&quot;&gt;&lt;code&gt;tf.assert_less&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc2f81235eeda4296447567ce00335903426f25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;assert_rank&quot;&gt;&lt;code&gt;tf.assert_rank&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4bc87d3294c338dd168e824e75234f32fe04c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;atan&quot;&gt;&lt;code&gt;tf.atan&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cde3598056101788d7c3aa42fe1d78a78c2500" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;atan2&quot;&gt;&lt;code&gt;tf.atan2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8998b4167a62aca739ad3b716327762933df42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;atanh&quot;&gt;&lt;code&gt;tf.atanh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bb908f824e4dbf6dcbde32314d88aef67e0ef8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;auc&quot;&gt;&lt;code&gt;tf.metrics.AUC&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a46eaadd60201eae935f3cba623ffca55968d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;averagepooling1d&quot;&gt;&lt;code&gt;tf.keras.layers.AvgPool1D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac9da2bf15ea62adffc47f562fe6f6a87c0f007" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;averagepooling2d&quot;&gt;&lt;code&gt;tf.keras.layers.AvgPool2D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb11f490a0b4027c60a8c59766030c1d9e1c25ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;averagepooling3d&quot;&gt;&lt;code&gt;tf.keras.layers.AvgPool3D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9601c33b066a82e5bd748a6a73bfbf0b5db1be60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;binary_accuracy&quot;&gt;&lt;code&gt;tf.metrics.binary_accuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8577db8a02119844ef07ff1d7a6338453bbadadd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;binary_crossentropy&quot;&gt;&lt;code&gt;tf.keras.metrics.binary_crossentropy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;binary_crossentropy&quot;&gt;&lt;code&gt;tf.losses.binary_crossentropy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;binary_crossentropy&quot;&gt;&lt;code&gt;tf.metrics.binary_crossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60543389a3058b2b4c34a9f2aa6e03087bc21a63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;binaryaccuracy&quot;&gt;&lt;code&gt;tf.metrics.BinaryAccuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c951217a0b324110cdb0e797fba6802370781b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;binarycrossentropy&quot;&gt;&lt;code&gt;tf.losses.BinaryCrossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe901d9a20207c235d6a069d101c940cec4da103" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;binarycrossentropy&quot;&gt;&lt;code&gt;tf.metrics.BinaryCrossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86247cb8b6cbc8d7113d87342c1feec55d3e097d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cast&quot;&gt;&lt;code&gt;tf.dtypes.cast&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6dfe9dddfd8320b1ef0915359a9b46795205fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categorical_accuracy&quot;&gt;&lt;code&gt;tf.metrics.categorical_accuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4ed2d5b32e84ab173fdecfa9c419af51d8d350" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categorical_crossentropy&quot;&gt;&lt;code&gt;tf.keras.metrics.categorical_crossentropy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;categorical_crossentropy&quot;&gt;&lt;code&gt;tf.losses.categorical_crossentropy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;categorical_crossentropy&quot;&gt;&lt;code&gt;tf.metrics.categorical_crossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a3731daaa7b11d0d5421195513228156616872" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categorical_hinge&quot;&gt;&lt;code&gt;tf.losses.categorical_hinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0de727c340bb1f2d1d9fb3dc6e075f1f76e0f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categoricalaccuracy&quot;&gt;&lt;code&gt;tf.metrics.CategoricalAccuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c33d9a7df334bffa5be31f64a01b36fe9df58e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categoricalcrossentropy&quot;&gt;&lt;code&gt;tf.losses.CategoricalCrossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f4b168f3ab69b3222efcabd6e1f8f5a602bf95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categoricalcrossentropy&quot;&gt;&lt;code&gt;tf.metrics.CategoricalCrossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1c7b5a9b24ad618d439226c59d5d678976cdcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categoricalhinge&quot;&gt;&lt;code&gt;tf.losses.CategoricalHinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96d3932652349c815a6e09fd812bb5de4ddc380" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;categoricalhinge&quot;&gt;&lt;code&gt;tf.metrics.CategoricalHinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b07f3aadfbbf800c207aa27bad3fac4aac7e9fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;complex&quot;&gt;&lt;code&gt;tf.complex&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018c2f17ac85727e6274f12d531eda8d4d3e18de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;constant_initializer&quot;&gt;&lt;code&gt;tf.initializers.Constant&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;constant_initializer&quot;&gt;&lt;code&gt;tf.initializers.constant&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;constant_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.Constant&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;constant_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.constant&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4c849f0e4b54d3817e67284130efe3a76f1526" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;conv1d&quot;&gt;&lt;code&gt;tf.keras.layers.Convolution1D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4217f51564e74a66b77ee9fabf2b2fcf658916fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;conv2d&quot;&gt;&lt;code&gt;tf.keras.layers.Convolution2D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77483f4c459d7ba4ebbcde1507dba3a16d1b7a09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;conv2dtranspose&quot;&gt;&lt;code&gt;tf.keras.layers.Convolution2DTranspose&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23477027d5d34078f5b4e70a60d7a1a84e4f527c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;conv3d&quot;&gt;&lt;code&gt;tf.keras.layers.Convolution3D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e6f15f15d8a7ccd972e1b43c3a3cf4ac6ef846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;conv3dtranspose&quot;&gt;&lt;code&gt;tf.keras.layers.Convolution3DTranspose&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eecbbadedc54fef95fff59be15dedb53fb4e1bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cos&quot;&gt;&lt;code&gt;tf.cos&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b86485d006d98698456b1f6b9ffe24fb84e0cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cosh&quot;&gt;&lt;code&gt;tf.cosh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958e4326a9ebbfb82e2cb9a86e8b3446e3fcdd1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cosine_similarity&quot;&gt;&lt;code&gt;tf.losses.cosine_similarity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d3805055ee769ef9c4bd9a583679de3067102d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cosinesimilarity&quot;&gt;&lt;code&gt;tf.losses.CosineSimilarity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e238ab7d057341c3b67e104af002015dc1c6902" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cosinesimilarity&quot;&gt;&lt;code&gt;tf.metrics.CosineSimilarity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa33a25b6a3a9acd470b7e259465789a5759d2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;cumsum&quot;&gt;&lt;code&gt;tf.cumsum&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd521eb88ad557f232b77fcc604595bd0d6b325b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_and_crop_jpeg&quot;&gt;&lt;code&gt;tf.image.decode_and_crop_jpeg&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f81923a9f5ee628804f75809032055f03fce9f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_bmp&quot;&gt;&lt;code&gt;tf.image.decode_bmp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba45799d5f910ac2b7a4ea4573c1c1c720eae7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_gif&quot;&gt;&lt;code&gt;tf.image.decode_gif&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835eb0d5292c66d514db42599c8f2cc0abd2ab23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_image&quot;&gt;&lt;code&gt;tf.image.decode_image&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41b20f1cd18c97a16f208529fddc93a056a64bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_jpeg&quot;&gt;&lt;code&gt;tf.image.decode_jpeg&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f7132af6a32a55c5d156a3d560f857e5f58b09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_png&quot;&gt;&lt;code&gt;tf.image.decode_png&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cc73b574e951ddbe97d330006e3c6938757a69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;decode_predictions&quot;&gt;&lt;code&gt;tf.keras.applications.resnet50.decode_predictions&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5051f18c8ed8a46067174e28bcda44ed0592eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;densenet121&quot;&gt;&lt;code&gt;tf.keras.applications.densenet.DenseNet121&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfe37b2681f7f654b8cb2cc91b037f2e1809ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;densenet169&quot;&gt;&lt;code&gt;tf.keras.applications.densenet.DenseNet169&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b025264667a1bbbce44333ab01ca6a29a29f2260" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;densenet201&quot;&gt;&lt;code&gt;tf.keras.applications.densenet.DenseNet201&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10baff4ddb3f7ecb9862b950c1c02a47f8d7e141" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;deserialize&quot;&gt;&lt;code&gt;tf.initializers.deserialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fcd59aa6d08f929fa4a82b1bab626326a24f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;deserialize&quot;&gt;&lt;code&gt;tf.losses.deserialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3b4b3beb8b919d2cfa642a9967b65b943c55f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;deserialize&quot;&gt;&lt;code&gt;tf.metrics.deserialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538bb241737fa678ac18f9002c18c72f4b3e2c58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;deserialize&quot;&gt;&lt;code&gt;tf.optimizers.deserialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0b2f1e36750eacc5c8fed27a3479ee7f526ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;deserialize&quot;&gt;&lt;code&gt;tf.optimizers.schedules.deserialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bf559a8f54fab38656361daaa82ff4dbb6cc99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;divide&quot;&gt;&lt;code&gt;tf.divide&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6de5d20066441434f15f6735ad7e29640b56e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;dtype&quot;&gt;&lt;code&gt;tf.DType&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03299f37fc58b80d76b80f5fd5488edc5ca635d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;dynamiclossscale&quot;&gt;&lt;code&gt;tf.train.experimental.DynamicLossScale&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa79414e1bb3c52ef6d7fed078c21167a67b97fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;eig&quot;&gt;&lt;code&gt;tf.linalg.eig&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20102fa884ff5988093779e2664caf39fcda172b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;eigvals&quot;&gt;&lt;code&gt;tf.linalg.eigvals&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e23db44b8d4a07d6e33fea087e8e19dad0b8f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;einsum&quot;&gt;&lt;code&gt;tf.linalg.einsum&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f0542339ed92ad4dc2d5922e931b37c8b12b13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;encode_jpeg&quot;&gt;&lt;code&gt;tf.image.encode_jpeg&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d46e67c4fed4f1122d6521ec2ffe4ee22f72ce2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;equal&quot;&gt;&lt;code&gt;tf.equal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a208c38ebf6ded02824d149bbd1c8c2b71b1f1c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;exp&quot;&gt;&lt;code&gt;tf.exp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23d3546a59ea87a3062902bf1f02d478c293676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;exponentialdecay&quot;&gt;&lt;code&gt;tf.optimizers.schedules.ExponentialDecay&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15422835e3728f3b335bfcbc01b14442d097e2b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;extract_jpeg_shape&quot;&gt;&lt;code&gt;tf.image.extract_jpeg_shape&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf90eccbee1e5770dd0fd500322040b326794a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;eye&quot;&gt;&lt;code&gt;tf.linalg.eye&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecfb81de31353d1adb333a0d23456d7b769239a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;falsenegatives&quot;&gt;&lt;code&gt;tf.metrics.FalseNegatives&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82954297b38f54cc01b08e9908f863899d45bf4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;falsepositives&quot;&gt;&lt;code&gt;tf.metrics.FalsePositives&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c6cfb012a47fd5ec5b019c148e93a68095a820" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;fixed_unigram_candidate_sampler&quot;&gt;&lt;code&gt;tf.nn.fixed_unigram_candidate_sampler&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6b56ef41acb3750b4ce4b175dbf29be812cd25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;fixedlossscale&quot;&gt;&lt;code&gt;tf.train.experimental.FixedLossScale&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a08e0012a8d6fe2a62200ba323b3cd63c803a74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;floor&quot;&gt;&lt;code&gt;tf.floor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3fdb4632f3fbd18e0c67f598ea1cffbdeec2ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;floormod&quot;&gt;&lt;code&gt;tf.math.mod&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8d3fa063aa50ea71dd78f19cdd31b827daf928" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;ftrl&quot;&gt;&lt;code&gt;tf.optimizers.Ftrl&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b13df482e2b6d17839231f302b52ac9492e9f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;get&quot;&gt;&lt;code&gt;tf.initializers.get&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1c0cb7857e0266d711032de7e0be973e952d32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;get&quot;&gt;&lt;code&gt;tf.losses.get&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efe9a95c8b3f420643781014068537031af46d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;get&quot;&gt;&lt;code&gt;tf.metrics.get&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc33e75b4e1c5f4261a7b03c970ea2db93ea4dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;get&quot;&gt;&lt;code&gt;tf.optimizers.get&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9656e83883198b0286fa59e8cb1fedfb49721a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;get_logical_device_configuration&quot;&gt;&lt;code&gt;tf.config.experimental.get_virtual_device_configuration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7395b616fb9e5922a73a470bad7d1dd1a6be8b46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;get_visible_devices&quot;&gt;&lt;code&gt;tf.config.experimental.get_visible_devices&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd03b6453a594b88e2de107c2e5ca55819a926a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;globalaveragepooling1d&quot;&gt;&lt;code&gt;tf.keras.layers.GlobalAvgPool1D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a14f18710b96902680e7e4e6f052d0f9bb89f3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;globalaveragepooling2d&quot;&gt;&lt;code&gt;tf.keras.layers.GlobalAvgPool2D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8490ea4e2da1bd1400d4e63707a222d764b5bb24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;globalaveragepooling3d&quot;&gt;&lt;code&gt;tf.keras.layers.GlobalAvgPool3D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50438b2d61f3d24696789d74844be3bde6902a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;globalmaxpool1d&quot;&gt;&lt;code&gt;tf.keras.layers.GlobalMaxPooling1D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441f0020e05880e5e9140083daa2ae16aeb75c63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;globalmaxpool2d&quot;&gt;&lt;code&gt;tf.keras.layers.GlobalMaxPooling2D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52572d0bab10674b48d8eb39bb2ee66a6691c45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;globalmaxpool3d&quot;&gt;&lt;code&gt;tf.keras.layers.GlobalMaxPooling3D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c1a5dc46594a8992326658510d64986ae0ed6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;glorotnormal&quot;&gt;&lt;code&gt;tf.initializers.GlorotNormal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;glorotnormal&quot;&gt;&lt;code&gt;tf.initializers.glorot_normal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;glorotnormal&quot;&gt;&lt;code&gt;tf.keras.initializers.glorot_normal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c782094148c38b93c119bf30f6c212fd7ecfd172" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;glorotuniform&quot;&gt;&lt;code&gt;tf.initializers.GlorotUniform&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;glorotuniform&quot;&gt;&lt;code&gt;tf.initializers.glorot_uniform&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;glorotuniform&quot;&gt;&lt;code&gt;tf.keras.initializers.glorot_uniform&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7d8897b4f7b40db6d7ab1d8a7709578f93aa66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;gradienttape&quot;&gt;&lt;code&gt;tf.autodiff.GradientTape&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b223991345176803577f10773605ce7a26372aac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;greater&quot;&gt;&lt;code&gt;tf.greater&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710d7f34806cae6c50e1ff24335da21c90e113da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;greater_equal&quot;&gt;&lt;code&gt;tf.greater_equal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995ec18336f616ca106c339ef01c9e577894ef3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;he_normal&quot;&gt;&lt;code&gt;tf.initializers.he_normal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4691e87fce2cad111d522720452c5b84cef37b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;he_uniform&quot;&gt;&lt;code&gt;tf.initializers.he_uniform&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c1c8de0598d138d7bf101cd4edbed3e36a0a0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;hinge&quot;&gt;&lt;code&gt;tf.losses.Hinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f66a8dd9975c3ca28ff088e35b811d7b23d1273" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;hinge&quot;&gt;&lt;code&gt;tf.metrics.Hinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8785c3f2bb5e487e7767d7a581464ccb99aab2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;huber&quot;&gt;&lt;code&gt;tf.losses.Huber&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e883356e5b8f7a31cff2977f2b0ba70830d3b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;identity&quot;&gt;&lt;code&gt;tf.initializers.Identity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;identity&quot;&gt;&lt;code&gt;tf.initializers.identity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;identity&quot;&gt;&lt;code&gt;tf.keras.initializers.identity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea17f8463b4737c40e4e34dd04ae41da435a5071" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;import_graph_def&quot;&gt;&lt;code&gt;tf.import_graph_def&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad81c80f0175e466b81f6dd3e10b885e5c0dd3f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;in_top_k&quot;&gt;&lt;code&gt;tf.nn.in_top_k&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933bd7ad4f4ef7552e1dea6c381bc0ef76bed10d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;inceptionresnetv2&quot;&gt;&lt;code&gt;tf.keras.applications.inception_resnet_v2.InceptionResNetV2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7458602002d38754bdcf83a4d5876230e1a6860" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;inceptionv3&quot;&gt;&lt;code&gt;tf.keras.applications.inception_v3.InceptionV3&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5ce02a9af485b2c2882e23a8d7a129533ad6a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;initializer&quot;&gt;&lt;code&gt;tf.initializers.Initializer&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06888e5a98e33c1b146bf28ce797842219e6d8cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;initializers&quot;&gt;&lt;code&gt;tf.initializers&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabfe1d7c1613fa967c2fe08fb0462146de773b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;input&quot;&gt;&lt;code&gt;tf.keras.layers.Input&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6b796cd81502a8adf91b8e231ad67ca9621820" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;inversetimedecay&quot;&gt;&lt;code&gt;tf.optimizers.schedules.InverseTimeDecay&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4c00c479a41816c487fbc62dd5eb1b3908d450" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;is_jpeg&quot;&gt;&lt;code&gt;tf.image.is_jpeg&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b9b4f08f9258ebd3165f01f144c29b9675d063" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.keras.losses.kld&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.keras.losses.kullback_leibler_divergence&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.keras.metrics.KLD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.keras.metrics.kld&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.keras.metrics.kullback_leibler_divergence&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.losses.KLD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.losses.kld&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.losses.kullback_leibler_divergence&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.metrics.KLD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.metrics.kld&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kld&quot;&gt;&lt;code&gt;tf.metrics.kullback_leibler_divergence&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334451b1786ec5297e904f355e33cc71360cad09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;kldivergence&quot;&gt;&lt;code&gt;tf.losses.KLDivergence&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634aa3cd77c51179f61bc0489632b0f7354f9e80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;kldivergence&quot;&gt;&lt;code&gt;tf.metrics.KLDivergence&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f62acf97cf05f70c93b631e7913daaa15562d2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;l2_normalize&quot;&gt;&lt;code&gt;tf.linalg.l2_normalize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;l2_normalize&quot;&gt;&lt;code&gt;tf.nn.l2_normalize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1ccdac91ccb3cc5fdc2ee01ea15c8b03f281ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;learned_unigram_candidate_sampler&quot;&gt;&lt;code&gt;tf.nn.learned_unigram_candidate_sampler&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb2d5fa54a45e5040997b61302f2babc78a7160" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;learningrateschedule&quot;&gt;&lt;code&gt;tf.optimizers.schedules.LearningRateSchedule&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8e966ab826b086b27c0307a12f11d14e0716d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;lecun_normal&quot;&gt;&lt;code&gt;tf.initializers.lecun_normal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b753bb04ff1857c032a1f70c69b9d05556ff7892" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;lecun_uniform&quot;&gt;&lt;code&gt;tf.initializers.lecun_uniform&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4352d0261d644ede220cb07974f154e077043ba9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;less&quot;&gt;&lt;code&gt;tf.less&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219b997a0f1acbd6e1fcfacf25f4fa580e81d7c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;less_equal&quot;&gt;&lt;code&gt;tf.less_equal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38285c0a6379cf340fbdf81e884834bddb22eb8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;list_logical_devices&quot;&gt;&lt;code&gt;tf.config.experimental.list_logical_devices&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f4f04a55a81fa8e0b01a2006728d5c3456dccf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;list_physical_devices&quot;&gt;&lt;code&gt;tf.config.experimental.list_physical_devices&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da6a0f5d0e1b1acd2fdd7cdcfe6f7ba80de3ddf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;local_response_normalization&quot;&gt;&lt;code&gt;tf.nn.lrn&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4f3a199bbff961a8a683490ecca3b37dae8309" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;log_softmax&quot;&gt;&lt;code&gt;tf.math.log_softmax&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8776fc9e5a506eb0c4242237dd2faee9f2ad946" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;logcosh&quot;&gt;&lt;code&gt;tf.losses.LogCosh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5862f19ccb1d4bc93ffd05532ea4897526793d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;logcosherror&quot;&gt;&lt;code&gt;tf.metrics.LogCoshError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c48ede964a59b0f71f9a9a78c5d3a43cb23724" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;logical_and&quot;&gt;&lt;code&gt;tf.logical_and&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825cc1196b3bf16d6e60d22aa0bfdec1a1c2956f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;logical_not&quot;&gt;&lt;code&gt;tf.logical_not&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507b7778fdd4760f7edbe7b466b4582d3a6c18ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;logical_or&quot;&gt;&lt;code&gt;tf.logical_or&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ffa03e440b81d33a983bfa37ca270da209a401" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;logicaldeviceconfiguration&quot;&gt;&lt;code&gt;tf.config.experimental.VirtualDeviceConfiguration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edf027eb7659d878360f96cf94df51de46f2aca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;loss&quot;&gt;&lt;code&gt;tf.losses.Loss&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c308812eafb22490a75a69c747b532649f6d0eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;losses&quot;&gt;&lt;code&gt;tf.losses&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d0dc4871dc9639dfd8e2f75ee0aecfd429ed9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;lossscale&quot;&gt;&lt;code&gt;tf.train.experimental.LossScale&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54db9aa723fc8af88dee594fd47d26fea38e6511" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.keras.losses.mae&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.keras.losses.mean_absolute_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.keras.metrics.MAE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.keras.metrics.mae&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.keras.metrics.mean_absolute_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.losses.MAE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.losses.mae&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.losses.mean_absolute_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.metrics.MAE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.metrics.mae&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mae&quot;&gt;&lt;code&gt;tf.metrics.mean_absolute_error&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45df923b83163bfbcd3daa690ac37c7aefb5ee3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.keras.losses.mape&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.keras.losses.mean_absolute_percentage_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.keras.metrics.MAPE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.keras.metrics.mape&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.keras.metrics.mean_absolute_percentage_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.losses.MAPE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.losses.mape&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.losses.mean_absolute_percentage_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.metrics.MAPE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.metrics.mape&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mape&quot;&gt;&lt;code&gt;tf.metrics.mean_absolute_percentage_error&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6586157c409c394731f2a9fd84c1e6152a7e0c4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;matmul&quot;&gt;&lt;code&gt;tf.matmul&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc1933b8f8a5835dd35ef028910843f3bcdb95c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;maximum&quot;&gt;&lt;code&gt;tf.maximum&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b969d1bceb2019d3f8f50b7aba2f7b3f9b58aacc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;maxnorm&quot;&gt;&lt;code&gt;tf.keras.constraints.max_norm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda6174482b988e638715d1ebe988bbfaca93fab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;maxpool1d&quot;&gt;&lt;code&gt;tf.keras.layers.MaxPooling1D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd23354dcbd89839d7076e6ba53fad876afee71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;maxpool2d&quot;&gt;&lt;code&gt;tf.keras.layers.MaxPooling2D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a623b16c91a73b5ff95834aeeb546d3794631e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;maxpool3d&quot;&gt;&lt;code&gt;tf.keras.layers.MaxPooling3D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e860d9f0d8f6b00a0a7f269f7c3c47adef9fef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;mean&quot;&gt;&lt;code&gt;tf.metrics.Mean&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc8befbd8d688fbaff408599b8bf2c1bd33df47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meanabsoluteerror&quot;&gt;&lt;code&gt;tf.losses.MeanAbsoluteError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dec8a5d2a296c6e3fbd68cf5ef7a055617005c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meanabsoluteerror&quot;&gt;&lt;code&gt;tf.metrics.MeanAbsoluteError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9c7bc0417d7f467ed9050b684660cdf957b622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meanabsolutepercentageerror&quot;&gt;&lt;code&gt;tf.losses.MeanAbsolutePercentageError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f846a63b96c5e0dc28f40f226bfa852a404c8ee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meanabsolutepercentageerror&quot;&gt;&lt;code&gt;tf.metrics.MeanAbsolutePercentageError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d471437765c8fdb5558941dc5fd076dcd39acdfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meaniou&quot;&gt;&lt;code&gt;tf.metrics.MeanIoU&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea22284f778ef325add7e702144735916489aaaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meanrelativeerror&quot;&gt;&lt;code&gt;tf.metrics.MeanRelativeError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028c2e23c46e250a6eaef95a629ef072b630ec2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meansquarederror&quot;&gt;&lt;code&gt;tf.losses.MeanSquaredError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a344d8ed47ba951dea2aafd7b0c07a241cd102" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meansquarederror&quot;&gt;&lt;code&gt;tf.metrics.MeanSquaredError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf832c7442adef363dad321a65213bef82cbac7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meansquaredlogarithmicerror&quot;&gt;&lt;code&gt;tf.losses.MeanSquaredLogarithmicError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156d9d4e8b90b17d3c2b96384b5ae35e467f20b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meansquaredlogarithmicerror&quot;&gt;&lt;code&gt;tf.metrics.MeanSquaredLogarithmicError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e962b07987d2fb505b9b59fde9c3d6e4413c7b67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;meantensor&quot;&gt;&lt;code&gt;tf.metrics.MeanTensor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d51886ad9305b5bf4a65d0b44f361e35d3ca7c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;metric&quot;&gt;&lt;code&gt;tf.metrics.Metric&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9f23949f0818b7a52ad1d56e777cd514c9e959" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;metrics&quot;&gt;&lt;code&gt;tf.metrics&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d296da1a21696a5fdd83c1b33879bebf15ec6567" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;minimum&quot;&gt;&lt;code&gt;tf.minimum&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b663d37ce859889613ce814f157eb332446ecc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;minmaxnorm&quot;&gt;&lt;code&gt;tf.keras.constraints.min_max_norm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8891cb34fc55bf2a2b560f94c4f0c1ab59209b65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;mobilenet&quot;&gt;&lt;code&gt;tf.keras.applications.mobilenet.MobileNet&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef136a94770200b0234261bfbba3de7e4341866d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;mobilenetv2&quot;&gt;&lt;code&gt;tf.keras.applications.mobilenet_v2.MobileNetV2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a440413adcd274e2fedfe10cb86cadde62fc5fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;model&quot;&gt;&lt;code&gt;tf.keras.models.Model&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb869e733f5fa0d7888c337665a4e5a3c05b469d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.keras.losses.mean_squared_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.keras.losses.mse&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.keras.metrics.MSE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.keras.metrics.mean_squared_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.keras.metrics.mse&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.losses.MSE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.losses.mean_squared_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.losses.mse&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.metrics.MSE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.metrics.mean_squared_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mse&quot;&gt;&lt;code&gt;tf.metrics.mse&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e6884cd502fb123e0454b4f018e9c7a485f4aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.keras.losses.mean_squared_logarithmic_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.keras.losses.msle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.keras.metrics.MSLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.keras.metrics.mean_squared_logarithmic_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.keras.metrics.msle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.losses.MSLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.losses.mean_squared_logarithmic_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.losses.msle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.metrics.MSLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.metrics.mean_squared_logarithmic_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;msle&quot;&gt;&lt;code&gt;tf.metrics.msle&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f390596170508b21016b3a44396b1bee4907dcee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;multiply&quot;&gt;&lt;code&gt;tf.multiply&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209f4e29bf16e424ba14ee416a398ff45c96bb03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;nadam&quot;&gt;&lt;code&gt;tf.optimizers.Nadam&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3966584937ffd1324aec66ee6aba4bc6c332567d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;nasnetlarge&quot;&gt;&lt;code&gt;tf.keras.applications.nasnet.NASNetLarge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3564eb014de26f8c773c5c58eb0b29f1d1feeac9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;nasnetmobile&quot;&gt;&lt;code&gt;tf.keras.applications.nasnet.NASNetMobile&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aecc4d3cb2ab7fa047c0b03ae25744d197363fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;negative&quot;&gt;&lt;code&gt;tf.negative&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb297dd5af4ae451d46bc1e79d08c751efabbc53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;nonneg&quot;&gt;&lt;code&gt;tf.keras.constraints.non_neg&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43c59375d9553aee261308085516e44c12d65ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;norm&quot;&gt;&lt;code&gt;tf.linalg.norm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae5df55c9a879b047b299bbf270a30a49ac30d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;not_equal&quot;&gt;&lt;code&gt;tf.not_equal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a826259948759906f7f42fe53362f10ac025b2e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;ones_initializer&quot;&gt;&lt;code&gt;tf.initializers.Ones&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ones_initializer&quot;&gt;&lt;code&gt;tf.initializers.ones&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ones_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.Ones&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ones_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.ones&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81746ab5a831e0987bef3a2a896515a3dfcb280c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;optimizer&quot;&gt;&lt;code&gt;tf.optimizers.Optimizer&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27a9a4dbbf17be533fce054671da1e2410205be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;optimizers&quot;&gt;&lt;code&gt;tf.optimizers&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b99c1499ce10f9b1fb322d1f3348d998f6f6ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;orthogonal&quot;&gt;&lt;code&gt;tf.initializers.Orthogonal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;orthogonal&quot;&gt;&lt;code&gt;tf.initializers.orthogonal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;orthogonal&quot;&gt;&lt;code&gt;tf.keras.initializers.orthogonal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129fc8dd03221c00b077d88f1c8682c2b4dbdc22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;piecewiseconstantdecay&quot;&gt;&lt;code&gt;tf.optimizers.schedules.PiecewiseConstantDecay&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdb70d1e757221b0a65dba39c1ba37537f1b5a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;poisson&quot;&gt;&lt;code&gt;tf.losses.Poisson&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8ce9d334aa1c9e7a34a78773772398007ac352" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;poisson&quot;&gt;&lt;code&gt;tf.metrics.Poisson&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fecab080688194c1bd49139b5a333754984f678" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;polynomialdecay&quot;&gt;&lt;code&gt;tf.optimizers.schedules.PolynomialDecay&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5b58c916f04bcd506d94466f9a028e16e5c0e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;pow&quot;&gt;&lt;code&gt;tf.pow&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b72f63e5dbcf137243531acc18e1af727f4f218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;precision&quot;&gt;&lt;code&gt;tf.metrics.Precision&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb42f9ae161d3f0d6bdc912beea6256b07cc70f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;precisionatrecall&quot;&gt;&lt;code&gt;tf.metrics.PrecisionAtRecall&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be3e2b8eff39071c71bd22c7a3c056202c09fcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;preprocess_input&quot;&gt;&lt;code&gt;tf.keras.applications.resnet50.preprocess_input&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf6161f310d8b6d649ba88b07e72a4ef48d1b7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;radialconstraint&quot;&gt;&lt;code&gt;tf.keras.constraints.radial_constraint&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c688596486de12b137a17435850e9e15cd8869b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;random_normal_initializer&quot;&gt;&lt;code&gt;tf.initializers.RandomNormal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;random_normal_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.RandomNormal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524c377438054bcee9f0c2e8ad833f6972a7859d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;random_uniform_initializer&quot;&gt;&lt;code&gt;tf.initializers.RandomUniform&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;random_uniform_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.RandomUniform&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9563c3c65cb720b9d0bcb1356611a92b8ab06775" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;recall&quot;&gt;&lt;code&gt;tf.metrics.Recall&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edc85f99ead6c3b81cd680ac86243a7579c3a58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_all&quot;&gt;&lt;code&gt;tf.math.reduce_all&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5da926c63edca99b676209d0f06d20db5843e15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_any&quot;&gt;&lt;code&gt;tf.reduce_any&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054c0191bec2e18a4ee58e2acb4b2651e790a846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_logsumexp&quot;&gt;&lt;code&gt;tf.reduce_logsumexp&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc2541d7051e40a0f0aeeb3f6841572ecc3691a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_max&quot;&gt;&lt;code&gt;tf.reduce_max&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c130acf3f7ceb09028aa4dd6f90206201ec7ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_mean&quot;&gt;&lt;code&gt;tf.reduce_mean&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d5cf38c44eadacd371c4f8f6925e6ad0ae9238" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_min&quot;&gt;&lt;code&gt;tf.reduce_min&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597e3279612fa9eab8694486e5fa734419859ad3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_prod&quot;&gt;&lt;code&gt;tf.reduce_prod&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cd187337b118fb6dc5028ffda359bd70f7e13e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduce_sum&quot;&gt;&lt;code&gt;tf.reduce_sum&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b604b71c9b9b4253ae864b085d4fb6978682f51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;reduction&quot;&gt;&lt;code&gt;tf.losses.Reduction&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d74e8dd756793a8f48150b849a2d63bfad36b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;resnet101&quot;&gt;&lt;code&gt;tf.keras.applications.resnet.ResNet101&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2f73ac92522e6a4b4d7da0c5b2a0ec97759f49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;resnet101v2&quot;&gt;&lt;code&gt;tf.keras.applications.resnet_v2.ResNet101V2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fb6aafd5a04c1579969302c49be417f0403b7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;resnet152&quot;&gt;&lt;code&gt;tf.keras.applications.resnet.ResNet152&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b4534284bd51ff01987b34b113a276a16b6f9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;resnet152v2&quot;&gt;&lt;code&gt;tf.keras.applications.resnet_v2.ResNet152V2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa4a43d174cd348674584e75d3a65808a228b38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;resnet50&quot;&gt;&lt;code&gt;tf.keras.applications.resnet.ResNet50&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;resnet50&quot;&gt;&lt;code&gt;tf.keras.applications.resnet50.ResNet50&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f472feeec0f52b357053365bf2b2e645b5961d0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;resnet50v2&quot;&gt;&lt;code&gt;tf.keras.applications.resnet_v2.ResNet50V2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a6ff31b1d7a598e1895c5fe986abd8129acc37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;rmsprop&quot;&gt;&lt;code&gt;tf.optimizers.RMSprop&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05da0d5bb24f6e398ce88bf455ed73b1d57c0b62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;rootmeansquarederror&quot;&gt;&lt;code&gt;tf.metrics.RootMeanSquaredError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a24dee4b01e6c3154038714415895a9a76ade6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;round&quot;&gt;&lt;code&gt;tf.round&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1852a7d58df8a0657a4532c4da6663b0bb7c6376" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;saturate_cast&quot;&gt;&lt;code&gt;tf.saturate_cast&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33832845abd9c1aa3ba084f275aeac916323030b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;scalar_mul&quot;&gt;&lt;code&gt;tf.scalar_mul&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b731094fa729ed75eba55643bd6dee39f29814" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;schedules&quot;&gt;&lt;code&gt;tf.optimizers.schedules&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8896ba42920458e91fb886df7b08237465f6dd56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sensitivityatspecificity&quot;&gt;&lt;code&gt;tf.metrics.SensitivityAtSpecificity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4e5cdbc9767c1a233ddcbf2f55738c382ba48c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;separableconv1d&quot;&gt;&lt;code&gt;tf.keras.layers.SeparableConvolution1D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded967fc259b3bddd9f7d0f547a126702d7161c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;separableconv2d&quot;&gt;&lt;code&gt;tf.keras.layers.SeparableConvolution2D&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999364b7b2121155a3ad51e7a41ee8270e40a4ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sequential&quot;&gt;&lt;code&gt;tf.keras.models.Sequential&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4691564d60b2a660bdb34907e536ed1e652d220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;serialize&quot;&gt;&lt;code&gt;tf.initializers.serialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb30f23df518a68a1835b50a80dda71d4f0e4d09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;serialize&quot;&gt;&lt;code&gt;tf.losses.serialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33d7ec2cee507963e803fbbed0391add337625e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;serialize&quot;&gt;&lt;code&gt;tf.metrics.serialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840513594fee9904737566107ec4e490f76b69aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;serialize&quot;&gt;&lt;code&gt;tf.optimizers.schedules.serialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f366d7dedaddea4ae78fdfe819272872b03892ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;serialize&quot;&gt;&lt;code&gt;tf.optimizers.serialize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc221b2f8ae3499b4c9cb8975b855c17229e526" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;set_logical_device_configuration&quot;&gt;&lt;code&gt;tf.config.experimental.set_virtual_device_configuration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6e82e4bd21a4fac4f8420bcc949fcd62bc7341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;set_visible_devices&quot;&gt;&lt;code&gt;tf.config.experimental.set_visible_devices&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbdaa2567c283639506d74d8eea70eb08895743" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sgd&quot;&gt;&lt;code&gt;tf.optimizers.SGD&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daedafa50ecb5e9c46225059bb17e1b5aad4d7b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sigmoid&quot;&gt;&lt;code&gt;tf.nn.sigmoid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sigmoid&quot;&gt;&lt;code&gt;tf.sigmoid&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2e21f1c3bb650eaf518021a2ce0d756aff7f31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sign&quot;&gt;&lt;code&gt;tf.sign&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf6cb8b89ea279f53d9f7b655b6dc51a9f880d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sin&quot;&gt;&lt;code&gt;tf.sin&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303cb619ab44d8635d583c9a144193271b4b7b6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sinh&quot;&gt;&lt;code&gt;tf.sinh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bffdd43570305ae9f061d19f51170a02a5d1f9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;softmax&quot;&gt;&lt;code&gt;tf.math.softmax&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec06935478d251ff7f9f38f37fa90dc050642afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;softplus&quot;&gt;&lt;code&gt;tf.nn.softplus&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82945676090aaba43f36148079e51016e2cbb8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;softsign&quot;&gt;&lt;code&gt;tf.math.softsign&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64dfb90481932f995abfbd3345315291ef2969c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;space_to_batch&quot;&gt;&lt;code&gt;tf.nn.space_to_batch&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4adfcf21207fec3a01e2777bed803e932426a25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparse_categorical_accuracy&quot;&gt;&lt;code&gt;tf.metrics.sparse_categorical_accuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3664ef3551f57a59f728de55ce1a012785b146" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparse_categorical_crossentropy&quot;&gt;&lt;code&gt;tf.keras.metrics.sparse_categorical_crossentropy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sparse_categorical_crossentropy&quot;&gt;&lt;code&gt;tf.losses.sparse_categorical_crossentropy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sparse_categorical_crossentropy&quot;&gt;&lt;code&gt;tf.metrics.sparse_categorical_crossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353c094f085ba85e976539c3f283de83180d7b7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparse_top_k_categorical_accuracy&quot;&gt;&lt;code&gt;tf.metrics.sparse_top_k_categorical_accuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3af5617002ad378f8695e6ed6368e63b16baa2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparsecategoricalaccuracy&quot;&gt;&lt;code&gt;tf.metrics.SparseCategoricalAccuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7631916f181dbb677c7b6164cf22b9121bc8941a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparsecategoricalcrossentropy&quot;&gt;&lt;code&gt;tf.losses.SparseCategoricalCrossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c1a040fb6c48a0e2cdd11503c03ea5eb023a68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparsecategoricalcrossentropy&quot;&gt;&lt;code&gt;tf.metrics.SparseCategoricalCrossentropy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af23d32f132f02c74aad84ecc4202982b3e75ae5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cbec15bbd4ca2bf06bc612e46a38dda925c1ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sparsetopkcategoricalaccuracy&quot;&gt;&lt;code&gt;tf.metrics.SparseTopKCategoricalAccuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc788d5fbcf85ecc7553061251bdd3eabda016ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;specificityatsensitivity&quot;&gt;&lt;code&gt;tf.metrics.SpecificityAtSensitivity&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2196f2ee528e67a475982bfc1902eb89f59786e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sqrt&quot;&gt;&lt;code&gt;tf.sqrt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bf42b311ccfd3f3a687449caad7aa971a00a35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sqrtm&quot;&gt;&lt;code&gt;tf.matrix_square_root&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f0f5b14d5a5faa6fa47d6348b0db4f4c759388" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;square&quot;&gt;&lt;code&gt;tf.square&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e930fa1033713e9e74bdac3e37bc12a71124ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;squared_hinge&quot;&gt;&lt;code&gt;tf.keras.metrics.squared_hinge&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;squared_hinge&quot;&gt;&lt;code&gt;tf.losses.squared_hinge&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;squared_hinge&quot;&gt;&lt;code&gt;tf.metrics.squared_hinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ba92deb0c94e5738c393d7e00e6a6496849408" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;squaredhinge&quot;&gt;&lt;code&gt;tf.losses.SquaredHinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1258526a6525b726f9c78782f792d56dbf0e7410" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;squaredhinge&quot;&gt;&lt;code&gt;tf.metrics.SquaredHinge&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ebbe2316c085e7086fc37092c876840e2c6b0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;subtract&quot;&gt;&lt;code&gt;tf.subtract&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a610cc50b947f3d057efb31198f831a1dd97c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;sum&quot;&gt;&lt;code&gt;tf.metrics.Sum&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c8af5007d1845a199fd5ccf7afa063243d9e52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;tan&quot;&gt;&lt;code&gt;tf.tan&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b544c7997db055d8adebd981e092a900be934c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;tanh&quot;&gt;&lt;code&gt;tf.nn.tanh&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;tanh&quot;&gt;&lt;code&gt;tf.tanh&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1644d32dc624a8ca52372eddc940f40a66ab6b28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;tensordot&quot;&gt;&lt;code&gt;tf.linalg.tensordot&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204b7de118d421135b7ec0ab37ad63c51d4512f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;top_k&quot;&gt;&lt;code&gt;tf.nn.top_k&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7108ce22a34a52954ba54978efa13507d51051f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;top_k_categorical_accuracy&quot;&gt;&lt;code&gt;tf.metrics.top_k_categorical_accuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0ba859ab6158579b0a5539b268db302481b6c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;topkcategoricalaccuracy&quot;&gt;&lt;code&gt;tf.metrics.TopKCategoricalAccuracy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974926081ed705a7331c9f0f33a25ea501c9d76a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;truediv&quot;&gt;&lt;code&gt;tf.truediv&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4250171cca714a069e78139896d05c70529fa22c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;truenegatives&quot;&gt;&lt;code&gt;tf.metrics.TrueNegatives&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2af9acb473afe1ebc64abdb5ab4e7b358b37cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;truepositives&quot;&gt;&lt;code&gt;tf.metrics.TruePositives&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ab8b4c6cb45fe7ff16afa10c48b714a68d99ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;truncatednormal&quot;&gt;&lt;code&gt;tf.initializers.TruncatedNormal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f10e88b3f99a83c7d50f17994c75b874b8270e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;unitnorm&quot;&gt;&lt;code&gt;tf.keras.constraints.unit_norm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b6b732e2f5f850566a0797daf8e9fea199ad47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;variancescaling&quot;&gt;&lt;code&gt;tf.initializers.VarianceScaling&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20809c49ef11f5e85efa1103a8b1975c88aaef11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;vgg16&quot;&gt;&lt;code&gt;tf.keras.applications.vgg16.VGG16&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926b6113392092fc555b081f2868bc6723217d5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;vgg19&quot;&gt;&lt;code&gt;tf.keras.applications.vgg19.VGG19&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3214da0b373de7069317147437a12d46091aca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;xception&quot;&gt;&lt;code&gt;tf.keras.applications.xception.Xception&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c990bfc40f841f591ba2d290b1684820b1a6e0ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;zero_fraction&quot;&gt;&lt;code&gt;tf.nn.zero_fraction&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1a713c9905c468bb105cb4104a42ef31ee5c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aliases&lt;/strong&gt;: &lt;a href=&quot;zeros_initializer&quot;&gt;&lt;code&gt;tf.initializers.Zeros&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;zeros_initializer&quot;&gt;&lt;code&gt;tf.initializers.zeros&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;zeros_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.Zeros&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;zeros_initializer&quot;&gt;&lt;code&gt;tf.keras.initializers.zeros&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72907b44813724f669dc2e106b4e2e9c2c4ae0bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; Passing python scalars or lists as arguments to &lt;a href=&quot;function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt; will always build a new graph. To avoid this, pass numeric arguments as Tensors whenever possible:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb2ac514ceb663db094a87e37fb3e64edb73813" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Element&lt;/strong&gt;: A single output from calling &lt;code&gt;next()&lt;/code&gt; on a dataset iterator. Elements may be nested structures containing multiple components. For example, the element &lt;code&gt;(1, (3, &quot;apple&quot;))&lt;/code&gt; has one tuple nested in another tuple. The components are &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;&quot;apple&quot;&lt;/code&gt;. &lt;strong&gt;Component&lt;/strong&gt;: The leaf in the nested structure of an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee5a199ee48a34a0cc9134ad8533202fc7fcb52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 1:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5182d053766559c8a796587cc6e079b0edece9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4557d05685700e6c14c1f60bd54f168cb36af4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Any Python side-effects (appending to a list, printing with &lt;code&gt;print&lt;/code&gt;, etc) will only happen once, when &lt;code&gt;func&lt;/code&gt; is traced. To have side-effects executed into your &lt;a href=&quot;function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt; they need to be written as TF ops:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7203c9abfc7485495e0c5e255df158725c988774" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This ragged tensor will produce an error if evaluated. Its value must be fed using the &lt;code&gt;feed_dict&lt;/code&gt; optional argument to &lt;code&gt;Session.run()&lt;/code&gt;, &lt;a href=&quot;../../../tensor#eval&quot;&gt;&lt;code&gt;Tensor.eval()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../../operation#run&quot;&gt;&lt;code&gt;Operation.run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80463fbe85926b290da0511e6cecfcb3d24d1a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This sparse tensor will produce an error if evaluated. Its value must be fed using the &lt;code&gt;feed_dict&lt;/code&gt; optional argument to &lt;code&gt;Session.run()&lt;/code&gt;, &lt;a href=&quot;../../tensor#eval&quot;&gt;&lt;code&gt;Tensor.eval()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../operation#run&quot;&gt;&lt;code&gt;Operation.run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f064b09999624b3b3170ff99173722aea4555c71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: This tensor will produce an error if evaluated. Its value must be fed using the &lt;code&gt;feed_dict&lt;/code&gt; optional argument to &lt;code&gt;Session.run()&lt;/code&gt;, &lt;a href=&quot;../../tensor#eval&quot;&gt;&lt;code&gt;Tensor.eval()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../operation#run&quot;&gt;&lt;code&gt;Operation.run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff286ee3e6f69560dd76cd3667b74fbdab41855f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instead of calling this op directly most users will want to use the NumPy-style slicing syntax (e.g. &lt;code&gt;tensor[..., 3:4:-1, tf.newaxis, 3]&lt;/code&gt;), which is supported via &lt;a href=&quot;tensor#__getitem__&quot;&gt;&lt;code&gt;tf.Tensor.&lt;strong&gt;getitem&lt;/strong&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;variable#__getitem__&quot;&gt;&lt;code&gt;tf.Variable.&lt;strong&gt;getitem&lt;/strong&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt; The interface of this op is a low-level encoding of the slicing syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2d0aa50dd3d2485808ecd8721e90afc70caeb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;N.B.&lt;/strong&gt; The &lt;a href=&quot;py_func&quot;&gt;&lt;code&gt;tf.compat.v1.py_func()&lt;/code&gt;&lt;/a&gt; operation has the following known limitations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205e4c8c61e5f938132df221414b8f22c18bc1a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;N.B.&lt;/strong&gt; The device scope may be overridden by op wrappers or other library code. For example, a variable assignment op &lt;code&gt;v.assign()&lt;/code&gt; must be colocated with the &lt;a href=&quot;variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;&lt;code&gt;v&lt;/code&gt;, and incompatible device scopes will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3874800429f235d4fc4bc0c9f42a585c6c5a292" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE: This method is still in testing, and the API may change.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e108131c675f80c4066f65f4de79711c16c695a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; For this operation, the probability of a given label is considered exclusive. That is, soft classes are not allowed, and the &lt;code&gt;labels&lt;/code&gt; vector must provide a single specific index for the true class for each row of &lt;code&gt;logits&lt;/code&gt; (each minibatch entry). For soft softmax classification with a probability distribution for each entry, see &lt;code&gt;softmax_cross_entropy_with_logits_v2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbcff6fc44b52db5d91d92be753cb86fee274e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; While the classes are mutually exclusive, their probabilities need not be. All that is required is that each row of &lt;code&gt;labels&lt;/code&gt; is a valid probability distribution. If they are not, the computation of the gradient will be incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4c08d90e298e68e1e6cf2a6efaf976879ecc78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; Floating point comparison to zero is done by exact floating point equality check. Small values are &lt;strong&gt;not&lt;/strong&gt; rounded to zero for purposes of the nonzero check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbd2253824af4eaf0cb14ae98b091252f1b7b54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; Resampling is performed via rejection sampling; some fraction of the input values will be dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6612c87c3eaf9f82d20ab32af14a83a02e246c45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; Strings are compared against zero-length empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;. Any string with a size greater than zero is already considered as nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0754c518656ae4fb005fabaa30c6a961555fdc77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; The output of this function should be used. If it is not, a warning will be logged or an error may be raised. To mark the output as used, call its .mark_used() method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f20cdcbd79ed6a85c156a83a7bd787f469edd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; Using a colocation scope resets any existing device constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956782c52ea38c5ba42d8e9bea72e5f1fbadbb77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTES&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NOTES&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9919bde726d88c949e4eae01a21d2ecd86b4e97a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that to avoid confusion, it is required to pass only named arguments to this function.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e56caba055918fe26ffa2b102a8ebbec1070c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A gradient is not defined for this function, so it can't be used in training models that need gradient descent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafa51209f9bef7b32b4c09fa4dafbfdf0bd4c6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; All eager &lt;a href=&quot;tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; values are immutable (in contrast to &lt;a href=&quot;variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt;). There is nothing especially &lt;em&gt;constant&lt;/em&gt; about the value returned from &lt;a href=&quot;constant&quot;&gt;&lt;code&gt;tf.constant&lt;/code&gt;&lt;/a&gt;. This function it is not fundamentally different from &lt;a href=&quot;convert_to_tensor&quot;&gt;&lt;code&gt;tf.convert_to_tensor&lt;/code&gt;&lt;/a&gt;. The name &lt;a href=&quot;constant&quot;&gt;&lt;code&gt;tf.constant&lt;/code&gt;&lt;/a&gt; comes from the symbolic APIs (like &lt;a href=&quot;data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; or keras functional models) where the &lt;code&gt;value&lt;/code&gt; is embeded in a &lt;code&gt;Const&lt;/code&gt; node in the &lt;a href=&quot;graph&quot;&gt;&lt;code&gt;tf.Graph&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;constant&quot;&gt;&lt;code&gt;tf.constant&lt;/code&gt;&lt;/a&gt; is useful for asserting that the value can be embedded that way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d58944560f705066678a65784e2eef9f1cd79a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; All the losses are added to the &lt;code&gt;GraphKeys.LOSSES&lt;/code&gt; collection by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99be2eb687ff2fd8282d4b283887c2562ff6d7d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Because internal calculations are done using &lt;code&gt;float64&lt;/code&gt; and casting has &lt;code&gt;floor&lt;/code&gt; semantics, we must manually map zero outcomes to the smallest possible positive floating-point value, i.e., &lt;code&gt;np.finfo(dtype).tiny&lt;/code&gt;. This means that &lt;code&gt;np.finfo(dtype).tiny&lt;/code&gt; occurs more frequently than it otherwise should. This bias can only happen for small values of &lt;code&gt;alpha&lt;/code&gt;, i.e., &lt;code&gt;alpha &amp;lt;&amp;lt; 1&lt;/code&gt; or large values of &lt;code&gt;beta&lt;/code&gt;, i.e., &lt;code&gt;beta &amp;gt;&amp;gt; 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bedacc8dd7449c4b91f8d69f2297a94c8c8c2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; By default this uses a log-uniform (Zipfian) distribution for sampling, so your labels must be sorted in order of decreasing frequency to achieve good results. For more details, see &lt;a href=&quot;../../../random/log_uniform_candidate_sampler&quot;&gt;&lt;code&gt;tf.random.log_uniform_candidate_sampler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ec054d2de263954ece86806dace019ae704776" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; By default this uses a log-uniform (Zipfian) distribution for sampling, so your labels must be sorted in order of decreasing frequency to achieve good results. For more details, see &lt;a href=&quot;../random/log_uniform_candidate_sampler&quot;&gt;&lt;code&gt;tf.random.log_uniform_candidate_sampler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a526188ea50a489bcd9e2df436fd356b3365a95a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Elementwise binary operations in TensorFlow follow &lt;a href=&quot;http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&quot;&gt;numpy-style broadcasting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313561e529e79e1abeed6b5f6d85e731db7f1cce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Estimator.predict returns a Python generator. Please consume all the data from the generator so that TPUEstimator can shutdown the TPU system properly for user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d1f3d9e4071bea5d1fc36dc56632c9e4a4c359" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For most usage of &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;, there should be no need to call these methods, since TensorFlow libraries (such as optimizers) already call these methods when needed on your behalf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e1a29b71fbda06397b61ef051e5ed475564914" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For most usage of &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt;, there should be no need to call these methods, since TensorFlow libraries (such as optimizers) already call these methods when needed on your behalf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c904863a707f3c9d541533edbc9037481e1597" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For new &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; implementations, please put all logic in a subclass of &lt;a href=&quot;../../../distribute/strategyextended&quot;&gt;&lt;code&gt;tf.distribute.StrategyExtended&lt;/code&gt;&lt;/a&gt;. The only code needed for the &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; subclass is for instantiating your subclass of &lt;a href=&quot;../../../distribute/strategyextended&quot;&gt;&lt;code&gt;tf.distribute.StrategyExtended&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;__init__&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07096365fba1529389d4324d5f860cb3abc67f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For new &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; implementations, please put all logic in a subclass of &lt;a href=&quot;strategyextended&quot;&gt;&lt;code&gt;tf.distribute.StrategyExtended&lt;/code&gt;&lt;/a&gt;. The only code needed for the &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; subclass is for instantiating your subclass of &lt;a href=&quot;strategyextended&quot;&gt;&lt;code&gt;tf.distribute.StrategyExtended&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;__init__&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc90997dd872e575f2b70db30c92b7851dda51d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For the cache to be finalized, the input dataset must be iterated through in its entirety. Otherwise, subsequent iterations will not use cached data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e899c3a9a5658deb6008340ee07285f146c2b0d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Functions taking &lt;code&gt;Tensor&lt;/code&gt; arguments can also take anything accepted by &lt;a href=&quot;../../convert_to_tensor&quot;&gt;&lt;code&gt;tf.convert_to_tensor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68a31880c2296781f85054c12313db4a2cfcfab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Functions taking &lt;code&gt;Tensor&lt;/code&gt; arguments can also take anything accepted by &lt;a href=&quot;convert_to_tensor&quot;&gt;&lt;code&gt;tf.convert_to_tensor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0cbba451c9b4b575670d40ea7e0c840acb93b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If a function has been decorated with &lt;a href=&quot;../../../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;, pass its underlying Python function, rather than the callable that `tf.function creates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c374975918994b914b3f102f9ae3ecc041e4e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If a function has been decorated with &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;, pass its underlying Python function, rather than the callable that `tf.function creates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fefb043b607684e7d120e967d57a823678666e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If a non-numeric data type output is desired (&lt;a href=&quot;../tf#string&quot;&gt;&lt;code&gt;tf.string&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../tf#bool&quot;&gt;&lt;code&gt;tf.bool&lt;/code&gt;&lt;/a&gt;, etc.), both &lt;code&gt;on_value&lt;/code&gt; and &lt;code&gt;off_value&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be provided to &lt;code&gt;one_hot&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b91d30befdefec6c985beecda2442f6e95a555" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If an exception is being passed in, in must be in the context of handling the exception (i.e. &lt;code&gt;try: ... except Exception as ex: ...&lt;/code&gt;) and not a newly created one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af43f64b76fc402943d3a50a6bbf72c2c26ab97c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If not all checkpoints exist, the length of the returned mtimes list will be smaller than the length of &lt;code&gt;checkpoint_prefixes&lt;/code&gt; list, so mapping checkpoints to corresponding mtimes will not be possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69b1dda1e3184bbf8ab003e5e663e0c54bfe7f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the input to the layer has a rank greater than 2, then it is flattened prior to the initial dot product with &lt;code&gt;kernel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8791f8c55ec21ee128813be78f7d7e38cfc71037" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If there are multiple ClusterResolvers exposing ClusterSpecs with the same job name, we will merge the list/dict of workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22cfd6b6abfca515dc0fbcaa3806d527eab64ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are concatenating along a new axis consider using stack. E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bc3f7a1f3603719e759b933672dc9e0f453801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If your program backpropagates through this function, you should replace it with a call to tf.linalg.eig (possibly ignoring the second output) to avoid computing the eigen decomposition twice. This is because the eigenvectors are used to compute the gradient w.r.t. the eigenvalues. See _SelfAdjointEigV2Grad in linalg_grad.py.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5baee5a0c24def8fa60819158664d0d8ff33c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If your program backpropagates through this function, you should replace it with a call to tf.linalg.eigh (possibly ignoring the second output) to avoid computing the eigen decomposition twice. This is because the eigenvectors are used to compute the gradient w.r.t. the eigenvalues. See _SelfAdjointEigV2Grad in linalg_grad.py.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50aa9c9deed24f0154842d9a1888aebd1de27a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In Jupyter notebooks and colabs, &lt;a href=&quot;print&quot;&gt;&lt;code&gt;tf.print&lt;/code&gt;&lt;/a&gt; prints to the notebook cell outputs. It will not write to the notebook kernel's console logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b3f5cf8b34807a9a3bd90cba5c6472bf0977f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In contrast to TPU training/evaluation, the &lt;code&gt;input_fn&lt;/code&gt; for prediction &lt;em&gt;should&lt;/em&gt; raise an end-of-input exception (&lt;code&gt;OutOfRangeError&lt;/code&gt; or &lt;code&gt;StopIteration&lt;/code&gt;), which serves as the stopping signal to &lt;code&gt;TPUEstimator&lt;/code&gt;. To be precise, the ops created by &lt;code&gt;input_fn&lt;/code&gt; produce one batch of the data. The &lt;code&gt;predict()&lt;/code&gt; API processes one batch at a time. When reaching the end of the data source, an end-of-input exception should be raised by one of these operations. The user usually does not need to do this manually. As long as the dataset is not repeated forever, the &lt;a href=&quot;../../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; API will raise an end-of-input exception automatically after the last batch has been produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33dcc55ecafb3e1e2c91eb37b9296e541de8666" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the case where &lt;code&gt;num_true&lt;/code&gt; &amp;gt; 1, we assign to each target class the target probability 1 / &lt;code&gt;num_true&lt;/code&gt; so that the target probabilities sum to 1 per-example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97758676bb06b1d389eb83510dc24ab1857356dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is illegal to &quot;directly&quot; use tensors created inside a cond branch outside it, e.g. by storing a reference to a branch tensor in the python state. If you need to use a tensor created in a branch function you should return it as an output of the branch function and use the output from &lt;a href=&quot;cond&quot;&gt;&lt;code&gt;tf.cond&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fc1a832b2592a53fdd234fa174ac65217b1af7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It would be useful to allow a variable number of target classes per example. We hope to provide this functionality in a future release. For now, if you have a variable number of target classes, you can pad them out to a constant number by either repeating them or by padding with an otherwise unused class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac08567a6fdb3b5f3c8ed23daa8245e28f00d99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Like other &lt;code&gt;Dataset&lt;/code&gt; methods, prefetch operates on the elements of the input dataset. It has no concept of examples vs. batches. &lt;code&gt;examples.prefetch(2)&lt;/code&gt; will prefetch two elements (2 examples), while &lt;code&gt;examples.batch(20).prefetch(2)&lt;/code&gt; will prefetch 2 elements (2 batches, of 20 examples each).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c461638f60065f5e4c6026723c6b14f99680781" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Most users will not call this initializer directly, and will instead use &lt;code&gt;Dataset.make_initializable_iterator()&lt;/code&gt; or &lt;code&gt;Dataset.make_one_shot_iterator()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945ca499c1b7a95da9df44ca812f784ec2d0761c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not all &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; implementations currently support TensorFlow's partitioned variables (where a single variable is split across multiple devices) at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32cb088f94bf719789bbc5023c4de834ab0fd57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not all iterators support checkpointing yet. Attempting to save the state of an unsupported iterator will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164766f92b1c40f1abdfa89faaefd21276b403d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Regardless of the value of merge_repeated, if the maximum index of a given time and batch corresponds to the blank index &lt;code&gt;(num_classes - 1)&lt;/code&gt;, no new element is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59a13a71a369049859edbd7dda2e1f3a8f3adde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Task id (the property field &lt;code&gt;task_id&lt;/code&gt;) is tracking the index of the node among all nodes with the SAME task type. For example, given the cluster definition as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035835272963e354994740057ad1d9ea669d5e1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;numpy_function&quot;&gt;&lt;code&gt;tf.numpy_function&lt;/code&gt;&lt;/a&gt; operation has the following known limitations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0d2f4414e849eb1f6ea8c160a840e2b5604e85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The behavior of dropout has changed between TensorFlow 1.x and 2.x. When converting 1.x code, please use named arguments to ensure behavior stays consistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bf2f9bae892ab8f91e4d3338ab2d1e3d75b460" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The default value is also presented to the user in the help string, so it is important that it be a legal value for this flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0790d7a7d17829e1115287cd6637c52839dc55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The mode is undefined when &lt;code&gt;concentration1 &amp;lt;= 1&lt;/code&gt; or &lt;code&gt;concentration0 &amp;lt;= 1&lt;/code&gt;. If &lt;code&gt;self.allow_nan_stats&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; is used for undefined modes. If &lt;code&gt;self.allow_nan_stats&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; an exception is raised when one or more modes are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9b78f430227a5f26ee32752754786425dff34b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The mode is undefined when any &lt;code&gt;concentration &amp;lt;= 1&lt;/code&gt;. If &lt;code&gt;self.allow_nan_stats&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; is used for undefined modes. If &lt;code&gt;self.allow_nan_stats&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; an exception is raised when one or more modes are undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab1e3026a9b342984d6d83f512c7e81881d153c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The returned iterator will be in an uninitialized state, and you must run the &lt;code&gt;iterator.initializer&lt;/code&gt; operation before using it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2d795cb5c197012e6a08134fddcd7c1753fdd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The returned iterator will be initialized automatically. A &quot;one-shot&quot; iterator does not currently support re-initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034ce5cb1fb1a4e89c8808ac7588a33e0ceb61be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The returned iterator will be initialized automatically. A &quot;one-shot&quot; iterator does not support re-initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50d787631f60f5ca00f1274f4b9dafb2e666aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The true SSIM is only defined on grayscale. This function does not perform any colorspace transform. (If input is already YUV, then it will compute YUV SSIM average.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e205f5520d23e81e0ae5aa565bede7c9d4216da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This API is not compatible with the use of &lt;a href=&quot;../../cond&quot;&gt;&lt;code&gt;tf.cond&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../while_loop&quot;&gt;&lt;code&gt;tf.while_loop&lt;/code&gt;&lt;/a&gt;, and will raise a &lt;code&gt;ValueError&lt;/code&gt; if you attempt to call it in such a graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b39d6d68564a6317c374f50dd0eb82ce48914f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This condition is validated only when &lt;code&gt;self.validate_args = True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addf9a43cfda83ad0b012329b93b808f2a45ef03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This currently only supports self-adjoint operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721d04669a24a59286489a3baf068c716566d1e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This estimator is also known as wide-n-deep.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2ac9d4fa6414ff7ab3aebf23137949e5e53a3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function diverges from default Numpy behavior for &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; types when &lt;code&gt;None&lt;/code&gt; is present in a Python list or scalar. Rather than silently converting &lt;code&gt;None&lt;/code&gt; values, an error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b60462d09f7f3eb880316a0d7ab83a1e991723a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is executed as a graph function in graph mode. This means: a) Operations on the same resource are executed in textual order. This should make it easier to do things like add the updated value of a variable to another, for example. b) You don't need to worry about collecting the update ops to execute. All update ops added to the graph by this function will be executed. As a result, code should generally work the same way with graph or eager execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ac6c678a378be6d0ffdbb37fc4714b8d49dc48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is implemented by trying to fetch the values of the variables. If one of the variables is not initialized a message may be logged by the C++ runtime. This is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bf614522f75b69ee7c62cc55a990d0a9ee9206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.builder.SavedModelBuilder or tf.compat.v1.saved_model.Builder. Tensorflow 2.0 will introduce a new object-based method of creating SavedModels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a1dd79c36eaee83bade0a3a7d06de10f2ab047" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This interface is experimental and expected to change. In particular, we expect to add other implementations of &lt;code&gt;StatsAggregator&lt;/code&gt; that provide different ways of exporting statistics, and add more types of statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66b43ec1cc2e89fca27d94f7c7c3cd357fec78b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is not a &lt;a href=&quot;../session&quot;&gt;&lt;code&gt;tf.compat.v1.Session&lt;/code&gt;&lt;/a&gt;. For example, it cannot do following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9073be559455fa6ad8b96d9c3a947d5faec7845d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This only returns values on the worker initiated by this client. When using a &lt;a href=&quot;../../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; like &lt;a href=&quot;../../../../distribute/experimental/multiworkermirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.MultiWorkerMirroredStrategy&lt;/code&gt;&lt;/a&gt;, each worker will be its own client, and this function will only return values computed on that worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9651a9fc8d2af68ef6c7da028de30cda41c53d79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This only returns values on the worker initiated by this client. When using a &lt;a href=&quot;../../../distribute/strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; like &lt;a href=&quot;../../../distribute/experimental/multiworkermirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.MultiWorkerMirroredStrategy&lt;/code&gt;&lt;/a&gt;, each worker will be its own client, and this function will only return values computed on that worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaad4572315df131e24a653938c3f3338f0038e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This only returns values on the worker initiated by this client. When using a &lt;a href=&quot;../strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; like &lt;a href=&quot;multiworkermirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.MultiWorkerMirroredStrategy&lt;/code&gt;&lt;/a&gt;, each worker will be its own client, and this function will only return values computed on that worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e19757e1e6e0746c43f395ca50e5f1bb6bff6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This only returns values on the worker initiated by this client. When using a &lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; like &lt;a href=&quot;experimental/multiworkermirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.experimental.MultiWorkerMirroredStrategy&lt;/code&gt;&lt;/a&gt;, each worker will be its own client, and this function will only return values computed on that worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5c4a626e9c85c3c7f5795905fc7ab4a5168277" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This op prints to the standard error. It is not currently compatible with jupyter notebook (printing to the notebook &lt;em&gt;server's&lt;/em&gt; output, not into the notebook).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0f4dd8db8f6f9c15ccbddb1483f70c4a84cb8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This overrides default initialization ops of specified variables and redefines dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceae0ce07d554d0617d745e71e2cc5d53f076d17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This should only be called outside of any TensorFlow scope to avoid improper nesting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936de133ea96674bf984ff570538d32123edbaae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This strategy only works with the Estimator API. Pass an instance of this strategy to the &lt;code&gt;experimental_distribute&lt;/code&gt; argument when you create the &lt;code&gt;RunConfig&lt;/code&gt;. This instance of &lt;code&gt;RunConfig&lt;/code&gt; should then be passed to the &lt;code&gt;Estimator&lt;/code&gt; instance on which &lt;code&gt;train_and_evaluate&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8309e46682c6a53c25a9d2670828ec614cff077" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When restoring the iterator, the existing iterator state is completely discarded. This means that any changes you may have made to the Dataset graph will be discarded as well! This includes the new Dataset graph that you may have built during validation. So, while running validation, make sure to run the initializer for the validation input pipeline after restoring the checkpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bd8116a9c6f220f4668f23e39068564cae3256" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using symbolic tensors, such as when using the Keras functional API, tf.shape() will return the shape of the symbolic tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a339d196d1b15614e859cfbb182dbc2530cdc17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While the mixed precision rewrite changes the datatype of various layers throughout the model, the same accuracy reached in float32 is expected. If a &lt;code&gt;NaN&lt;/code&gt; gradient occurs with dynamic loss scaling, the model update for that batch is skipped. In this case, the global step count is not incremented, and the &lt;code&gt;LossScaleOptimizer&lt;/code&gt; attempts to decrease the loss scaling value to avoid &lt;code&gt;NaN&lt;/code&gt; values in subsequent iterations. This approach has been shown to achieve the same accuracy as float32 and, in most cases, better training throughput.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c1c0bbbeb0d1377961b3fce8a14a9e63e9fcc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Will be removed in TensorFlow 2.x since DeviceSpecs will become immutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fd8281cf7dfd2920b180c5eb7253914145ace8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You rarely need to call &lt;code&gt;unique_name()&lt;/code&gt; directly. Most of the time you just need to create &lt;code&gt;with g.name_scope()&lt;/code&gt; blocks to generate structured names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565fb9e8148a2d7b94b5e6a5a0a2fca30e8e539c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; creates local counter &lt;code&gt;epochs&lt;/code&gt;. Use &lt;code&gt;local_variables_initializer()&lt;/code&gt; to initialize local variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02658220fc38b691eb47d246ccef86b0c13c1b11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if &lt;code&gt;input&lt;/code&gt; is a &lt;a href=&quot;../../raggedtensor&quot;&gt;&lt;code&gt;tf.RaggedTensor&lt;/code&gt;&lt;/a&gt;, then this operation takes &lt;code&gt;O(N)&lt;/code&gt; time, where &lt;code&gt;N&lt;/code&gt; is the number of elements in the squeezed dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d873e10c47b3ad276946e5e8fc02a9c21d342c45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if &lt;code&gt;input&lt;/code&gt; is a &lt;a href=&quot;raggedtensor&quot;&gt;&lt;code&gt;tf.RaggedTensor&lt;/code&gt;&lt;/a&gt;, then this operation takes &lt;code&gt;O(N)&lt;/code&gt; time, where &lt;code&gt;N&lt;/code&gt; is the number of elements in the squeezed dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b25d4b2cecc5883d042c6dae3da87faad53e6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if &lt;code&gt;num_epochs&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt;, this function creates local counter &lt;code&gt;epochs&lt;/code&gt;. Use &lt;code&gt;local_variables_initializer()&lt;/code&gt; to initialize local variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378d8f8fd5040d982fca462d5dc323100e80eaad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if &lt;code&gt;output_is_sparse&lt;/code&gt; is True, a gradient is not defined for this function, so it can't be used in training models that need gradient descent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906642102a8aec54040c5311989acb8f23ef92ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; shift is currently not used; the true mean is computed and used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0129ef18259388a0ff347368d70038a60b7cc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the copy distribution may continue to depend on the original initialization arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f0a8a327483b26bd492c96cad9d0d37124ecc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the newer &lt;code&gt;AutoTrackable&lt;/code&gt; API is not supported by &lt;code&gt;Saver&lt;/code&gt;. In this case, the &lt;a href=&quot;../../../train/checkpoint&quot;&gt;&lt;code&gt;tf.train.Checkpoint&lt;/code&gt;&lt;/a&gt; class should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8541934342970715284958c1f30fc2ff55d7845f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the timestamp is computed when the op is executed, not when it is added to the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7722ecc3e42be19089627df7fe0d1efdb2dd4a40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this function does not verify the implied matrix is actually invertible nor is this condition checked even when &lt;code&gt;validate_args=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0572fbc1fb7588f4a052f10be2500e68627de9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this function is not for public use, only for internal libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05316d933fd19a494bcc101bd2a7cf1d9c25b691" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this method uses reflection to find variables on the current instance and submodules. For performance reasons you may wish to cache the result of calling this method if you don't expect the return value to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2493e9ebd9cb9464d4fe706b693bb928f6cf5350" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; v2 control flow is always enabled inside of tf.function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0cdc927c149c7c11603690e16b6cad02eb8fda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; v2 control flow is always enabled inside of tf.function. Calling this function has no effect in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726f5169354d6badf322e0de77f82d10c2404cce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; v2 control flow is always enabled inside of tf.function. Calling this function is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5699a3a3fc12877ba22447cec0476d2eb466924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; when doing embedding lookup on &lt;code&gt;embedding_weights&lt;/code&gt;, &quot;div&quot; partition strategy will be used. Support for other partition strategy will be added later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555f802e9ab2d7e5df5ef38ed025791b22a72e18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; when doing embedding lookup on &lt;code&gt;weights&lt;/code&gt; and &lt;code&gt;bias&lt;/code&gt;, &quot;div&quot; partition strategy will be used. Support for other partition strategy will be added later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9def8680fc7e1f80e2baf97e19921cfaed39f17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; when training, the moving_mean and moving_variance need to be updated. By default the update ops are placed in &lt;code&gt;tf.GraphKeys.UPDATE_OPS&lt;/code&gt;, so they need to be executed alongside the &lt;code&gt;train_op&lt;/code&gt;. Also, be sure to add any batch_normalization ops before getting the update_ops collection. Otherwise, update_ops will be empty, and training/inference will not work properly. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6e9b25a9380919eb2569d94b193ad5770e4823" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; when using this with @tf.functions, the step value will be captured at the time the function is traced, so changes to the step outside the function will not be reflected inside the function unless using a &lt;a href=&quot;../../variable&quot;&gt;&lt;code&gt;tf.Variable&lt;/code&gt;&lt;/a&gt; step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9f83cfd5b5f906d8b2b91816e3147b52459a76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;raw_ops&quot;&gt;&lt;code&gt;tf.raw_ops&lt;/code&gt;&lt;/a&gt; provides direct/low level access to all TensorFlow ops. See &lt;a href=&quot;https://github.com/tensorflow/community/blob/master/rfcs/20181225-tf-raw-ops.md&quot;&gt;the RFC&lt;/a&gt; for details. Unless you are library writer, you likely do not need to use these ops directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25505463b3b13df51839f5651d179160872ec725" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;strategy&quot;&gt;&lt;code&gt;tf.distribute.Strategy&lt;/code&gt;&lt;/a&gt; currently does not support TensorFlow's partitioned variables (where a single variable is split across multiple devices) at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e919eb214728041f7f445f2b24c5a5794a3762" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;cache&lt;/code&gt; will produce exactly the same elements during each iteration through the dataset. If you wish to randomize the iteration order, make sure to call &lt;code&gt;shuffle&lt;/code&gt;&lt;em&gt;after&lt;/em&gt; calling &lt;code&gt;cache&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a436eb7bfaa2e7eca2e0c5ce794a4b46de35da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;clip_value_min&lt;/code&gt; needs to be smaller or equal to &lt;code&gt;clip_value_max&lt;/code&gt; for correct results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60a32ef07b69ba2cb99f3a5f1d51cb03cd0786a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;decode_gif&lt;/code&gt; returns a 4-D array &lt;code&gt;[num_frames, height, width, 3]&lt;/code&gt;, as opposed to &lt;code&gt;decode_bmp&lt;/code&gt;, &lt;code&gt;decode_jpeg&lt;/code&gt; and &lt;code&gt;decode_png&lt;/code&gt;, which return 3-D arrays &lt;code&gt;[height, width, num_channels]&lt;/code&gt;. Make sure to take this into account when constructing your graph if you are intermixing GIF files with BMP, JPEG, and/or PNG files. Alternately, set the &lt;code&gt;expand_animations&lt;/code&gt; argument of this function to &lt;code&gt;False&lt;/code&gt;, in which case the op will return 3-dimensional tensors and will truncate animated GIF files to the first frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7669cc11bde808ae7d2b3df024f65df302d82899" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;name_&lt;/code&gt;, &lt;code&gt;func_&lt;/code&gt; and &lt;code&gt;create_scope_now_&lt;/code&gt; have a trailing underscore to reduce the likelihood of collisions with kwargs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94acfdcb4f1e14b97766218ba87e575c1fa6c171" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;tf.compat.v1.test.mock&lt;/code&gt; is an alias to the python &lt;code&gt;mock&lt;/code&gt; or &lt;code&gt;unittest.mock&lt;/code&gt; depending on the python version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293ac01eebcb72befb41db76416f4f39024ddb4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt; must be a non-negative tensor with dtype &lt;code&gt;self.dtype&lt;/code&gt; and be in the &lt;code&gt;(self.event_shape() - 1)&lt;/code&gt;-simplex, i.e., &lt;code&gt;tf.reduce_sum(value, -1) = 1&lt;/code&gt;. It must have a shape compatible with &lt;code&gt;self.batch_shape() + self.event_shape()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271f2025df12ecceb70cddd67bd0551796b78b2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt; must be a non-negative tensor with dtype &lt;code&gt;self.dtype&lt;/code&gt;, have no fractional components, and such that &lt;code&gt;tf.reduce_sum(value, -1) = self.total_count&lt;/code&gt;. Its shape must be broadcastable with &lt;code&gt;self.concentration&lt;/code&gt; and &lt;code&gt;self.total_count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092e8422d6080016d4755fdd0f62017ec980ea2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt; must be a non-negative tensor with dtype &lt;code&gt;self.dtype&lt;/code&gt;, have no fractional components, and such that &lt;code&gt;tf.reduce_sum(value, -1) = self.total_count&lt;/code&gt;. Its shape must be broadcastable with &lt;code&gt;self.probs&lt;/code&gt; and &lt;code&gt;self.total_count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3bc20d8022463995e5f367783e8fb8bbb304b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;x&lt;/code&gt; must have dtype &lt;code&gt;self.dtype&lt;/code&gt; and be in &lt;code&gt;[0, 1].&lt;/code&gt; It must have a shape compatible with &lt;code&gt;self.batch_shape()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87606ba4b79f6f6ba9991263da27cf530bccb064" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;y&lt;/code&gt;'s index must match &lt;code&gt;x&lt;/code&gt;'s index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a7a7f9b241505669c08925fade439b97a5db71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;ctc_greedy_decoder&lt;/code&gt; is a special case of the &lt;code&gt;ctc_beam_search_decoder&lt;/code&gt; with &lt;code&gt;top_paths=1&lt;/code&gt; and &lt;code&gt;beam_width=1&lt;/code&gt; (but that decoder is faster for this special case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecd150af2b3a2913e37f1f68a80f94ba50dae35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; This operation is not supported by all queues. If a queue does not support DequeueUpTo, then a &lt;a href=&quot;../errors/unimplementederror&quot;&gt;&lt;code&gt;tf.errors.UnimplementedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca6d1e2e3346883ab97c3d744a5507501048ca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The gradient computation on GPU is faster for large matrices but not for large batch dimensions when the submatrices are small. In this case it might be faster to use the CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6a7a25b7d8085bbf123d18dced1c5ba252f9cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The output of &lt;a href=&quot;asin&quot;&gt;&lt;code&gt;tf.math.asin&lt;/code&gt;&lt;/a&gt; will lie within the invertible range of sine, i.e [-pi/2, pi/2].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178c66c483a155a8db3efbe0aabb44b180bad6f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The output of &lt;a href=&quot;atan&quot;&gt;&lt;code&gt;tf.math.atan&lt;/code&gt;&lt;/a&gt; will lie within the invertible range of tan, i.e (-pi/2, pi/2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ed6bf355e7691d55a227778dcb74d625668550" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The rank of a tensor is not the same as the rank of a matrix. The rank of a tensor is the number of indices required to uniquely select each element of the tensor. Rank is also known as &quot;order&quot;, &quot;degree&quot;, or &quot;ndims.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2012fb81117f5e72b09829facb3feb07d50c8d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: with large batch sizes, the computation on the GPU may be slow, if either &lt;code&gt;partial_pivoting=True&lt;/code&gt; or there are multiple right-hand sides (&lt;code&gt;K &amp;gt; 1&lt;/code&gt;). If this issue arises, consider if it's possible to disable pivoting and have &lt;code&gt;K = 1&lt;/code&gt;, or, alternatively, consider using CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4b7894921584a40e22e5923f9167d9daa651f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sample Weights&lt;/strong&gt; Estimators returned by &lt;code&gt;model_to_estimator&lt;/code&gt; are configured to handle sample weights (similar to &lt;code&gt;keras_model.fit(x, y, sample_weights)&lt;/code&gt;). To pass sample weights when training or evaluating the Estimator, the first item returned by the input function should be a dictionary with keys &lt;code&gt;features&lt;/code&gt; and &lt;code&gt;sample_weights&lt;/code&gt;. Example below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb3f02cbe59b5ad47b5f372f642805eb35871d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a private method for subclass use.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7de8f107359d4c4d15d0eea464471f22bc5d961" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a private method for subclass use.&lt;/strong&gt;&lt;strong&gt;Subclasses should copy-paste this &lt;code&gt;__init__&lt;/code&gt; documentation.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc44f6efa14546107d91212e5777e447f89fc03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; This op expects unscaled logits, since it performs a &lt;code&gt;softmax&lt;/code&gt; on &lt;code&gt;logits&lt;/code&gt; internally for efficiency. Do not call this op with the output of &lt;code&gt;softmax&lt;/code&gt;, as it will produce incorrect results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ba0c59124f498bcd69814d6237344df45bf03d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: Any Tensors or Operations created outside of &lt;code&gt;true_fn&lt;/code&gt; and &lt;code&gt;false_fn&lt;/code&gt; will be executed regardless of which branch is selected at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e396f4c06913a146741ca2a262fdd24c276a1a32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: The order in which updates are applied is nondeterministic, so the output will be nondeterministic if &lt;code&gt;indices&lt;/code&gt; contains duplicates -- because of some numerical approximation issues, numbers summed in different order may yield different results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522cfbbf71a624c4de99c42eeb7e7818b6bc3967" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Experimental API that could be changed or removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec93aed4f0571bc0d0fd6807f6cd785daf36caa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If &lt;code&gt;f&lt;/code&gt; was originally a tf.keras Model or Layer object, &lt;code&gt;g&lt;/code&gt; will not be able to access the member variables of that object, because &lt;code&gt;g&lt;/code&gt; returns through the wrapper function &lt;code&gt;inner&lt;/code&gt;. When recomputing gradients through objects that inherit from keras, we suggest keeping a reference to the underlying object around for the purpose of accessing these variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde9ee00f738cfa6d01e08eb7d0dd983b5e7b249" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENT VALUES ARE DEPRECATED: &lt;code&gt;(data_format='NCHW')&lt;/code&gt;. They will be removed in a future version. Instructions for updating: &lt;code&gt;NCHW&lt;/code&gt; for data_format is deprecated, use &lt;code&gt;NCW&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4568aef575e9bcb0bcc3acfc7d5a6e2e9d170b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENT VALUES ARE DEPRECATED: &lt;code&gt;(data_format='NHWC')&lt;/code&gt;. They will be removed in a future version. Instructions for updating: &lt;code&gt;NHWC&lt;/code&gt; for data_format is deprecated, use &lt;code&gt;NWC&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebbab2dba489c17ede16052ac1e2712e01f51b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENT VALUES ARE DEPRECATED: &lt;code&gt;(distribution='normal')&lt;/code&gt;. They will be removed in a future version. Instructions for updating: &lt;code&gt;normal&lt;/code&gt; is a deprecated alias for &lt;code&gt;truncated_normal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cc3a9f82346d8174d435f0971d8df975ffb471" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(axis)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: reduction_indices is deprecated, use axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6eb367c707862736c547e0036731836839b0181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(batch_dim)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: batch_dim is deprecated, use batch_axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974b9df99cee73f81e85d51d4226335a3c246d56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(bytes)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: bytes is deprecated, use input_bytes instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb16c9ed92fae56f5a4026185e8554bb0bea1a72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(caching_device)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: A variable's value can be manually cached by calling tf.Variable.read_value() under a tf.device scope. The caching_device argument does not work properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb3c7a5a48022ecaca4546633b71962182a8b62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(compute_shapes)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Shapes are always computed; don't use the compute_shapes as it has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c74c0e97e201b17fb47fa0bbbbe9bc415d469f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(concat_dim)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: concat_dim is deprecated, use axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b478588a303187f4b73bc92356224f4b09a4efc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(delimiter)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: delimiter is deprecated, please use sep instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5093de890a8b4d78d59be1789fcd0c6a0830f4e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(dim)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Use the &lt;code&gt;axis&lt;/code&gt; argument instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f560a7905261d9bfeac5a8e741cb7d115cc3e8dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(dim)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: dim is deprecated, use axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182991f977bf7dcab877b17e96da494d901ae941" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(dimension)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Use the &lt;code&gt;axis&lt;/code&gt; argument instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d86e445c296f0e9d5cb1a630fc4bf703ef73648" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(dtype)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Call initializer instance with the dtype argument instead of passing it to the constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c609e51820477c7c75f0192bef6f708119252f13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(fn1, fn2)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: fn1/fn2 are deprecated in favor of the true_fn/false_fn arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8284bc29c8015380ecc50ce520172193c031bd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(graph_parents)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Do not pass &lt;code&gt;graph_parents&lt;/code&gt;. They will no longer be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8661d41b08370eb649a88485acd3cfb68f9808b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(inputs)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: &lt;code&gt;inputs&lt;/code&gt; is now automatically inferred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b93232f7ef2bd3018102e8166eed61c12f7ef3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(keep_dims)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: keep_dims is deprecated, use keepdims instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beebc8e621159ba02ca2829609999b58685f8e26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(keep_prob)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Please use &lt;code&gt;rate&lt;/code&gt; instead of &lt;code&gt;keep_prob&lt;/code&gt;. Rate should be set to &lt;code&gt;rate = 1 - keep_prob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcaa2a67e49c65b77fae84954bf7279700940c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(op_dict)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Please file an issue at https://github.com/tensorflow/tensorflow/issues if you depend on this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137069450d96f2858c71830c5c780389ea20f87a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(position)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: position is deprecated in favor of the offset argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466187caeffa810b202e1c0afc04a84aa56dda25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(reduction_axes)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: reduction_axes is deprecated, use axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8389a65a64d90f4bdc1a129c8922030b688ef35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(seq_dim)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: seq_dim is deprecated, use seq_axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bcacfd4ba8d3419b76d94409b2b2482d0e82a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(split_dim)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: split_dim is deprecated, use axis instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb301802decf108d849abddaa5f0dd98802a4545" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(squeeze_dims)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Use the &lt;code&gt;axis&lt;/code&gt; argument instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f057a2c178b489e5547ad0f040787129422d4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(targets)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: targets is deprecated, use labels instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe6fcdd4aeea0cdaeba84093904f51b18713878" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(thresh)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: thresh is deprecated, use threshold instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131940a0fbb9193e694e1c12b4a1b49158f5626d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; SOME ARGUMENTS ARE DEPRECATED: &lt;code&gt;(verify_shape)&lt;/code&gt;. They will be removed in a future version. Instructions for updating: Objects must now be the required shape or no shape can be specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db138f23d05996c9770bc8a0f8b5fa9b0145c47d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Some components of the samples can be zero due to finite precision. This happens more often when some of the concentrations are very small. Make sure to round the samples to &lt;code&gt;np.finfo(dtype).tiny&lt;/code&gt; before computing the density.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e72f86b3bd1f968735629fba64c0f493ad5392" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2017-03-02. Instructions for updating: Please use tf.global_variables instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d757415a9357239034aadf968513a08146a97ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2017-03-02. Instructions for updating: Use &lt;code&gt;tf.global_variables_initializer&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297203c4525115b9e816651d896faefeb69db147" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2017-03-02. Instructions for updating: Use &lt;code&gt;tf.local_variables_initializer&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b394c9a283684654ca21e570fed16f067ec5803f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2017-03-02. Instructions for updating: Use &lt;code&gt;tf.variables_initializer&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f702bb74ca57add1bd55427b9937d40a95f68f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2017-10-25. Instructions for updating: &lt;code&gt;tf.batch_gather&lt;/code&gt; is deprecated, please use &lt;a href=&quot;../../gather&quot;&gt;&lt;code&gt;tf.gather&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;batch_dims=-1&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2121296bb68a6203c187d9fc8ad99ce2ffdcbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2018-08-20. Instructions for updating: Use tf.print instead of tf.Print. Note that tf.print returns a no-output operator that directly prints the output. Outside of defuns or eager mode, this operator will not be executed unless it is directly specified in session.run or used as a control dependency for other operators. This is only a concern in graph mode. Below is an example of how to ensure tf.print executes in graph mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf0e91d7c15fd7e29bc8fad2e21d24fbc0801d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2018-11-29. Instructions for updating: Use the batch_scatter_update method of Variable instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4755a7243e70e4c69438f58d35a284d2f0c81728" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2019-01-01. Instructions for updating: The TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use &lt;a href=&quot;https://www.tensorflow.org/probability/api_docs/python/tfp/distributions&quot;&gt;&lt;code&gt;tfp.distributions&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;tf.distributions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d7e8c7419d5f8cdfa343d2791be2de4776dda5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2020-04-01. Instructions for updating: Use &lt;a href=&quot;../../distribute/mirroredstrategy&quot;&gt;&lt;code&gt;tf.distribute.MirroredStrategy&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9e31b7257b9578240de6fa69c006e798b955bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed after 2020-05-30. Instructions for updating: Training with HDF5Matrix is not optimized for performance. Instead, we recommend using https://github.com/tensorflow/io to load your HDF5 data into a tf.data Dataset and passing that dataset to Keras.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3162b67666eaf5b20e4a01fbee48ddbf6b01b1e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53d5ae79b59c6f95b3b635b32bcc2e514acdbc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: &lt;code&gt;seed2&lt;/code&gt; and &lt;code&gt;deterministic&lt;/code&gt; args are deprecated. Use fractional_avg_pool_v2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ee08aa7378a7ba1acc29a98c39494fffa82ab8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: &lt;code&gt;seed2&lt;/code&gt; and &lt;code&gt;deterministic&lt;/code&gt; args are deprecated. Use fractional_max_pool_v2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3029c25f373e4b6cfdac586f89aab102bafe4c7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: &lt;code&gt;seed2&lt;/code&gt; arg is deprecated.Use sample_distorted_bounding_box_v2 instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c891632cea8777265e48639d0b83ac27079a2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Colocations handled automatically by placer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6694f7285f295aca47281d8998f5d4c2115eda5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Create a &lt;a href=&quot;../../sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.sparse.SparseTensor&lt;/code&gt;&lt;/a&gt; and use &lt;a href=&quot;../../sparse/to_dense&quot;&gt;&lt;code&gt;tf.sparse.to_dense&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2f987ead28055fd06ae0f640c9808af99c1b94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Deprecated in favor of operator or tf.math.divide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe468058af624e256de6866639e6053579efed5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Do not call &lt;code&gt;graph_parents&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26dca5d115dd55f2a1d703060a7065294779be8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: GraphDef quantized training rewriter is deprecated in the long term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca764ef74dab1702f2bbe06e8e08f6e8f6fc288" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: No similar op available at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645b7b31afca5f1f9480b758503f0eccfff2dfd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please switch to tf.train.MonitoredTrainingSession</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40e12ef2d793b9749d5e56dbc75227a1fd71e05" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use &lt;a href=&quot;../../../keras/layers/rnn&quot;&gt;&lt;code&gt;keras.layers.RNN(cell)&lt;/code&gt;&lt;/a&gt;, which is equivalent to this API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10448937519eb272d7f6d6edaa58e001a1953ffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use &lt;a href=&quot;../../../keras/layers/rnn&quot;&gt;&lt;code&gt;keras.layers.RNN(cell, stateful=True)&lt;/code&gt;&lt;/a&gt;, which is equivalent to this API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8701574175c7e209c603565a3b481f8fbd658e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use &lt;a href=&quot;../../../keras/layers/rnn&quot;&gt;&lt;code&gt;keras.layers.RNN(cell, unroll=True)&lt;/code&gt;&lt;/a&gt;, which is equivalent to this API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dbcd2b09420afab7fb94164f470bc040344fd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use &lt;code&gt;keras.layers.Bidirectional(keras.layers.RNN(cell))&lt;/code&gt;, which is equivalent to this API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73acb7ad6edaff06c275f0f54dcc4011b172f6a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use &lt;code&gt;keras.layers.Bidirectional(keras.layers.RNN(cell, unroll=True))&lt;/code&gt;, which is equivalent to this API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294cd9bb03373fd3c20e0f39347d72d2d3ae1dcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use &lt;code&gt;model.save(..., save_format=&quot;tf&quot;)&lt;/code&gt; or &lt;code&gt;tf.keras.models.save_model(..., save_format=&quot;tf&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7978906d5ec929e3f20e217958ee95edb267100" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use Model.evaluate, which supports generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0fa707fa50aa5c3707841b40a3e377feb9bfe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use Model.fit, which supports generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6d0f1f7a077d70ce2a30d5b3ddc8ce731e8751" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Please use Model.predict, which supports generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1232905a3c4356b1dcadb22ffb1b560918da095" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Prefer Dataset.range instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0731420baf39d426224fe0d87e0aae91bb0dd6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Prefer Variable.assign which has equivalent behavior in 2.X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c633f90e17e12192c8d7e4efb230d0d75d6dbc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;../../../data/dataset#batch&quot;&gt;&lt;code&gt;tf.data.Dataset.batch(batch_size)&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;padded_batch(...)&lt;/code&gt; if &lt;code&gt;dynamic_pad=True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7201e19b8d556a8a40bf1de24271e9d78db3de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.filter(...).batch(batch_size)&lt;/code&gt; (or &lt;code&gt;padded_batch(...)&lt;/code&gt; if &lt;code&gt;dynamic_pad=True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629db85ff32241560bb9b848c5ee3ce6003bba97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.filter(...).shuffle(min_after_dequeue).batch(batch_size)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfb15804853846ee9f0f3102135740d088ae239" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.from_tensor_slices(input_tensor).shuffle(tf.shape(input_tensor, out_type=tf.int64)[0]).repeat(num_epochs)&lt;/code&gt;. If &lt;code&gt;shuffle=False&lt;/code&gt;, omit the &lt;code&gt;.shuffle(...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736b8bfcfba34f7ff7f2ba9cee505035aaab937d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.from_tensor_slices(string_tensor).shuffle(tf.shape(input_tensor, out_type=tf.int64)[0]).repeat(num_epochs)&lt;/code&gt;. If &lt;code&gt;shuffle=False&lt;/code&gt;, omit the &lt;code&gt;.shuffle(...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd826d50f6534dd957ddd1dbd69221c050ffcc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.from_tensor_slices(tuple(tensor_list)).shuffle(tf.shape(input_tensor, out_type=tf.int64)[0]).repeat(num_epochs)&lt;/code&gt;. If &lt;code&gt;shuffle=False&lt;/code&gt;, omit the &lt;code&gt;.shuffle(...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186e88b7ce7e053c010d780081de2224ad39196b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.from_tensors(tensor).repeat(num_epochs)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ef5dc16aa7b7bd8bcfecb29df382204e7ab113" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.interleave(...).batch(batch_size)&lt;/code&gt; (or &lt;code&gt;padded_batch(...)&lt;/code&gt; if &lt;code&gt;dynamic_pad=True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467c1ba7c5148790dd03bc9317e66d97503b2e94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.interleave(...).filter(...).batch(batch_size)&lt;/code&gt; (or &lt;code&gt;padded_batch(...)&lt;/code&gt; if &lt;code&gt;dynamic_pad=True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e35e7ad29175250c6fb500971a0b5c697c4f040" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.interleave(...).filter(...).shuffle(min_after_dequeue).batch(batch_size)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a162e75c493a32694072b1df441ab42c1f8454a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.interleave(...).shuffle(min_after_dequeue).batch(batch_size)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f631f1447bc320f1cd1f5f8546cc947a1d0c764b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.range(limit).shuffle(limit).repeat(num_epochs)&lt;/code&gt;. If &lt;code&gt;shuffle=False&lt;/code&gt;, omit the &lt;code&gt;.shuffle(...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dce96ceb8b1e7bb0031202ad6a14b1aa7392f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.data.Dataset.shuffle(min_after_dequeue).batch(batch_size)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55f8d338f6ee401eeb63e9153375d7996b95e08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;../../data/dataset#map&quot;&gt;&lt;code&gt;tf.data.Dataset.map(...)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81145dfb0f00f56c09d52f67d08216457678a34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;../../data/dataset#map&quot;&gt;&lt;code&gt;tf.data.Dataset.map(tf.read_file)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084f9aa9a57c7d56b6958f324d34bd8b981e56ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;../../data/fixedlengthrecorddataset&quot;&gt;&lt;code&gt;tf.data.FixedLengthRecordDataset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a505384c9d108a4dae1d4e6e2d0f79563e5266" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;../../data/textlinedataset&quot;&gt;&lt;code&gt;tf.data.TextLineDataset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2cd8cf0d18f76ecd778643c7ccf3dfc91b9e78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;../../data/tfrecorddataset&quot;&gt;&lt;code&gt;tf.data.TFRecordDataset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f8030a4ff16285a6d1ae778645405303e36d78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Queue-based input pipelines have been replaced by &lt;a href=&quot;../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;tf.contrib.data.LMDBDataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1464c16b28b60d7a9937156e6d65205d000bc09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Stop using this property because tf.layers layers no longer track their graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8acc38e0005dd3ab8e72e45321522b062acb43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: The &lt;code&gt;SyncReplicaOptimizer&lt;/code&gt; class is deprecated. For synchrononous training, please use &lt;a href=&quot;https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/distribute&quot;&gt;Distribution Strategies&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f584433ee17134146bcd0fccc7d68ca20d5aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: The experimental save and load functions have been deprecated. Please switch to &lt;a href=&quot;../../../../keras/models/load_model&quot;&gt;&lt;code&gt;tf.keras.models.load_model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384897e24b823dafb327a5d4991bfe91b25edb14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: The value of AUC returned by this may race with the update so this is deprected. Please use tf.keras.metrics.AUC instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8654183e2d672f03b86fa23f10aced4d680ec740" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This class is equivalent as tf.keras.layers.GRUCell, and will be replaced by that in Tensorflow 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a899102cc7cac6fd80f9bc0e4993defcd0be3db3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This class is equivalent as tf.keras.layers.LSTMCell, and will be replaced by that in Tensorflow 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b42a1b27fe6d84904f5eeea68a99f96e81548ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This class is equivalent as tf.keras.layers.SimpleRNNCell, and will be replaced by that in Tensorflow 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03c4be1111a0d1763380653932b04b5c0d3dd52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This class is equivalent as tf.keras.layers.StackedRNNCells, and will be replaced by that in Tensorflow 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0471238d8cea1449f680201eeb0966b22591419c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function has been renamed, use &lt;code&gt;export_saved_model&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4770720f9332358ac9e3cd7a88b999cfc3849ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88dea2a12e0d546e14df82f73cd9c9e33c36f8f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.main_op.main_op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620572d995d0677807a974f681551d677b1b88c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.main_op_with_restore or tf.compat.v1.saved_model.main_op.main_op_with_restore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59468e92a1540c8b3249a41e939673a5b4e82ee9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.simple_save.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4d897b5672378263bc0612386ab329f0a58ab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b2ce6677548b35eee3194c3b8b1e6a838d52de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info or tf.compat.v1.saved_model.get_tensor_from_tensor_info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46d6a95c0ef447763faadb0fb872191f7a3906d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: To construct input pipelines, use the &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3b0d9f70ca760ac3e98014e9a93b494f123855" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../../data/dataset#from_tensor_slices&quot;&gt;&lt;code&gt;tf.data.Dataset.from_tensor_slices()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555188ea98e3e570ad789f93b51473e257a43491" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../../raggedtensorspec&quot;&gt;&lt;code&gt;tf.RaggedTensorSpec&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe8ac258530590a70aa9885a15c5e6a2c56a692" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../../sparsetensorspec&quot;&gt;&lt;code&gt;tf.SparseTensorSpec&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2131cca8899989adc25aade084212c5ca6196c3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../../tensorarrayspec&quot;&gt;&lt;code&gt;tf.TensorArraySpec&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa2101d5c4882e34a0a592d3e36a01faf8d8019" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../../tensorspec&quot;&gt;&lt;code&gt;tf.TensorSpec&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23122934c16c5075b0c8e8d97cc54c0ebe59725b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../data/dataset#from_tensor_slices&quot;&gt;&lt;code&gt;tf.data.Dataset.from_tensor_slices()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca942f792c6449c6dad8042518fc9f13c82c17a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../keras/layers/conv2dtranspose&quot;&gt;&lt;code&gt;tf.keras.layers.Conv2DTranspose&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc34856337f1b780b9965de3ce9d4d3c4cbae6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../keras/layers/conv3dtranspose&quot;&gt;&lt;code&gt;tf.keras.layers.Conv3DTranspose&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0e3018927ae190b55b7b4e59f66531994578cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../keras/layers/separableconv1d&quot;&gt;&lt;code&gt;tf.keras.layers.SeparableConv1D&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ae33fb77b1db972d61d5023f9d60d1670aeab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../keras/layers/separableconv2d&quot;&gt;&lt;code&gt;tf.keras.layers.SeparableConv2D&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad9ed2a101228846d45542c0e4e99cd22c6f4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../lite/tfliteconverter&quot;&gt;&lt;code&gt;lite.TFLiteConverter&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f97c55a2138a67a0e43a437e1a332318c33ad93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../lite/tfliteconverter#from_saved_model&quot;&gt;&lt;code&gt;lite.TFLiteConverter.from_saved_model&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0ee605847e7b0f79cd06a214cfc88fb52d6dd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../random/stateless_categorical&quot;&gt;&lt;code&gt;tf.random.stateless_categorical&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310232b9f421bd100bf1f5237ecc73795924cadc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../../train/checkpointmanager&quot;&gt;&lt;code&gt;tf.train.CheckpointManager&lt;/code&gt;&lt;/a&gt; to manage checkpoints rather than manually editing the Checkpoint proto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fa3220857c7cfb77cfc4c746e81307603dc373" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../cast&quot;&gt;&lt;code&gt;tf.cast&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fec3809b22cd70895192c8f9139a5a8da260ce2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../load_library&quot;&gt;&lt;code&gt;tf.load_library&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd81e352a30ac47c1f6670716baf2c619ba198a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../../random/categorical&quot;&gt;&lt;code&gt;tf.random.categorical&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf9655441cf45aaf9184bd9bbb002613d7b25a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../dataset#interleave&quot;&gt;&lt;code&gt;tf.data.Dataset.interleave(map_func, cycle_length, block_length, num_parallel_calls=tf.data.experimental.AUTOTUNE)&lt;/code&gt;&lt;/a&gt; instead. If sloppy execution is desired, use &lt;a href=&quot;../options#experimental_deterministic&quot;&gt;&lt;code&gt;tf.data.Options.experimental_deterministic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4fb2855b1c20c47c8a108ddc1bf8c59becfc97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../dataset#map&quot;&gt;&lt;code&gt;tf.data.Dataset.map(map_func, num_parallel_calls)&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;../dataset#batch&quot;&gt;&lt;code&gt;tf.data.Dataset.batch(batch_size, drop_remainder)&lt;/code&gt;&lt;/a&gt;. Static tf.data optimizations will take care of using the fused implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c5f67c21d3f7aa3a64150487cd8d09a749a65b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../dataset#shuffle&quot;&gt;&lt;code&gt;tf.data.Dataset.shuffle(buffer_size, seed)&lt;/code&gt;&lt;/a&gt; followed by &lt;a href=&quot;../dataset#repeat&quot;&gt;&lt;code&gt;tf.data.Dataset.repeat(count)&lt;/code&gt;&lt;/a&gt;. Static tf.data optimizations will take care of using the fused implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990e419e7b90222026ec5b0ab77990cdc5edbc3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../dataset#unbatch&quot;&gt;&lt;code&gt;tf.data.Dataset.unbatch()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a8b09a06bb638242ccdcc87d7ccb035663f17d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../get_output_classes&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_classes(dataset)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9de7fcece04c06f3f108796d1c0c40468cf7d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../get_output_shapes&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_shapes(dataset)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff53ad1d0587d3249c39ff4000c5387cefe4b43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;../get_output_types&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_types(dataset)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35312d64cfc994ae51dcc9f382959b28b9b81ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;convert_variables_to_constants&quot;&gt;&lt;code&gt;tf.compat.v1.graph_util.convert_variables_to_constants&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5b9c5cbf1dd716740f1f6cbe779d4adfd7a500" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;extract_sub_graph&quot;&gt;&lt;code&gt;tf.compat.v1.graph_util.extract_sub_graph&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba95dae976d666e589518aa5039725672a93e5a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;get_output_classes&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_classes(dataset)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0d62564f46948caa5fee12b07b918a0b74d2b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;get_output_classes&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_classes(iterator)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4491c155ebb136bd2ad557b55b1a0e279ad146" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;get_output_shapes&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_shapes(dataset)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418e89f3a1587189c04fd4b126b5170af4d3ae8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;get_output_shapes&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_shapes(iterator)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beff10ebd049d15c1ab76d059778b704c24cbaf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;get_output_types&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_types(dataset)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe900abae6c45d1a2e1d094ecdf6282fe38b6aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;get_output_types&quot;&gt;&lt;code&gt;tf.compat.v1.data.get_output_types(iterator)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b956c2234796946db55b4af710f57baf53ddee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;must_run_on_cpu&quot;&gt;&lt;code&gt;tf.compat.v1.graph_util.must_run_on_cpu&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46565d1acbbd770934f794c56f36840b6f5a21ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;remove_training_nodes&quot;&gt;&lt;code&gt;tf.compat.v1.graph_util.remove_training_nodes&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf373fc7aad36a9b90623803711491e9c94072ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;a href=&quot;tensor_shape_from_node_def_name&quot;&gt;&lt;code&gt;tf.compat.v1.graph_util.tensor_shape_from_node_def_name&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc52ec98c26429f610acdb5778c80bfee02be50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;code&gt;for ... in dataset:&lt;/code&gt; to iterate over a dataset. If using &lt;code&gt;tf.estimator&lt;/code&gt;, return the &lt;code&gt;Dataset&lt;/code&gt; object directly from your input function. As a last resort, you can use &lt;code&gt;tf.compat.v1.data.make_initializable_iterator(dataset)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ed3d995e124ec59a35541ad3d30b668e1bd83e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;code&gt;for ... in dataset:&lt;/code&gt; to iterate over a dataset. If using &lt;code&gt;tf.estimator&lt;/code&gt;, return the &lt;code&gt;Dataset&lt;/code&gt; object directly from your input function. As a last resort, you can use &lt;code&gt;tf.compat.v1.data.make_one_shot_iterator(dataset)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c2c64c217bf70a3d144c5bd8250c5ee5b116ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;code&gt;lite.TFLiteConverter.from_frozen_graph&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a030ca6ebdcc2e2a88a8e280c68eba5d8f3faa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; THIS FUNCTION IS DEPRECATED. It will be removed in a future version. Instructions for updating: Use &lt;code&gt;lite.TFLiteConverter.from_keras_model_file&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
