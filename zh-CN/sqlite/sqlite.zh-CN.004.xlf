<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="sqlite">
    <body>
      <group id="sqlite">
        <trans-unit id="fe5e3b0d396d614226a54388a7b4de0441733b51" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;alignment&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194ffe7cb502ded114f889082435f2c16c8b7359" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;application_id = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5443e0f7d9f275c31c0eb7151cf4ea53927946d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;application_id; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52171e1f2ed13a70f81dde9b3a852059c3f9848" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;assert(X)&lt;/b&gt; &amp;rarr; The assert(X) statement indicates that the condition X is always true. In other words, X is an invariant. The assert(X) macro works like a procedure in that it has no return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d034110b826070c391f6a1b3222b94a181199d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;auto_vacuum = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cd7347cc987aab65acd4c17d0fb4f855e08cf4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;auto_vacuum;&lt;br/&gt; PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d128f6edd956bb72b334d983e9c173584d32d33a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;avg(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7b6c83e75fbe3b054ea415310a7352288778a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;backup_remaining() and backup_pagecount()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af51318f30245050461c25ceed50b0039299603f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;busy&lt;/b&gt;: This field is true if the prepared statement is currently running. In other words, this field is true if &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt; has been called on the &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; at least once but &lt;a href=&quot;c3ref/reset&quot;&gt;sqlite3_reset()&lt;/a&gt; has not yet been called to reset it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07a69ddd20e31f1d596560030beac75f1ec41f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cache&lt;/b&gt;: The cache parameter may be set to either &quot;shared&quot; or &quot;private&quot;. Setting it to &quot;shared&quot; is equivalent to setting the SQLITE_OPEN_SHAREDCACHE bit in the flags argument passed to sqlite3_open_v2(). Setting the cache parameter to &quot;private&quot; is equivalent to setting the SQLITE_OPEN_PRIVATECACHE bit. If sqlite3_open_v2() is used and the &quot;cache&quot; parameter is present in a URI filename, its value overrides any behavior requested by setting SQLITE_OPEN_PRIVATECACHE or SQLITE_OPEN_SHAREDCACHE flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048afc3980c205fecc84abbd48f15a61272e10f6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cache=shared&lt;br/&gt;cache=private&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f187cf2b0d507dcac54b947ef4b4bb4548adec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cache_size = -&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a05bfa29a1d5ad78648c64ef4a1bc402a7ef7d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cache_size = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be0f4e9732fbef28f44a865ce5359d4c63e5ba3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cache_size; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d813d1d4f13504bccfdec67887288aeb2c74bf6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cache_spill=&lt;i&gt;N&lt;/i&gt;;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee76635f943345e36eadd20f93c4b84d756cd424" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;changes()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e34c8fad0c61810b664b1fb208a7e152cbd2d8f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;char(&lt;i&gt;X1&lt;/i&gt;,&lt;i&gt;X2&lt;/i&gt;,...,&lt;i&gt;XN&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abb03962a5dc4852aff5e36c48f45d6a4a3d77a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;close&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6e4e63ef7fd21c4175c425685a7ddb1ca2bea1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;coalesce(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;,...)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bbbb1bb66c64e00f2934f51b73b8e4f4056495" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;columns=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b498af88a752c45b7e25f4181284d3db7afb1a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;command&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad084040fb5ea49d3658d7989127f682b7f28c67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;count(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;count(*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39af06e9905a7448ee0b1defae9d454b6841f4d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cov.rc&lt;/b&gt; - Options for measuring test coverage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cca5b66dc12bd7e7becb822abbebae01386bdb2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;cume_dist()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bce3e62d8a1b34b91114cf92fb902035b214587" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;data=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3783e6f7dc101319ad924bc9f09ae132e7c7f898" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;data_version;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389b2f8f724900f956d877a644e2e9603c0f26c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;date(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcb55ef3726cc2a71910590d0902f7faab4f9ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;datetime(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee590495d14ff2cf1c5cbc37042295e0d1f08cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;default_cache_size = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402ca1dacea0721ad239c1af6cb3f5819295774e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;default_cache_size; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6313bf298d297088101bbaddb662c2c916679adf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;dense_rank()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aac9f3db608b20d11947a5ae9700ebd62f45001" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;distance&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b484c204986ea3c75fae52cefde5798b5dd4e4f2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;editdist3(P,W)&lt;br/&gt;editdist3(P,W,L)&lt;br/&gt;editdist3(T)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f1ae63992807b1cef27255763402cd1c0c70d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;extensions.rc&lt;/b&gt; - Options to enable &lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt;, &lt;a href=&quot;rtree&quot;&gt;R-Trees&lt;/a&gt;, and &lt;a href=&quot;fileformat2#stat4tab&quot;&gt;STAT4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd31bb22c519a3244a9371c90073d27eba9fcff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;fast.rc&lt;/b&gt; - Run most tests, including those not needed for coverage, skipping only soak tests, using delivery compiler options (ex: -O3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7047224cc767c22276bcd97b8b93c32d6c6dd0c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;filename=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86f5b252ea2c3905e9317b675f86261fe647565" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;first_value(expr)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c983beee928db863455a33eaeb9e6e8731e6e3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;foreign_key_check(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b8402ef4aa6df707621ab3e1424480dcd1b470" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;foreign_key_check; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17b9027ffda510fd8200ef5dd02defe76fb361b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;freelist_count;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c799144ac6e15128ed0f9aa7ec635a662a3d31" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;glob(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51045bdeca73ea8688c5521c40c4f76212598ff" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;group_concat(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;group_concat(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbaa7085724de96292b616e3361c44f3e9990d0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;header&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffde63e4ba8d63cb5d1bc14f06bfecda9f5dd8b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;header=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfef432e2caab9415a288e0d7ba9d174b173a01" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;hex(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd48f9963329d57278b189812b34811095c6cdeb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;id&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a7a75e65828537df32db2f1ac3e8fbbb008fae" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ifnull(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce521b193beb15f59295fefb696fd4ade983bb0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;immutable&lt;/b&gt;: The immutable parameter is a boolean query parameter that indicates that the database file is stored on read-only media. When immutable is set, SQLite assumes that the database file cannot be changed, even by a process with higher privilege, and so the database is opened read-only and all locking and change detection is disabled. Caution: Setting the immutable property on a database file that does in fact change can result in incorrect query results and/or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; errors. See also: &lt;a href=&quot;#SQLITE_IOCAP_ATOMIC&quot;&gt;SQLITE_IOCAP_IMMUTABLE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf141062b07419b584f4c1883f6a203a2df6601" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;immutable&lt;/b&gt;: The immutable parameter is a boolean query parameter that indicates that the database file is stored on read-only media. When immutable is set, SQLite assumes that the database file cannot be changed, even by a process with higher privilege, and so the database is opened read-only and all locking and change detection is disabled. Caution: Setting the immutable property on a database file that does in fact change can result in incorrect query results and/or &lt;a href=&quot;../rescode#corrupt&quot;&gt;SQLITE_CORRUPT&lt;/a&gt; errors. See also: &lt;a href=&quot;c_iocap_atomic&quot;&gt;SQLITE_IOCAP_IMMUTABLE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed08b6b1d1f0a664ae0f81d71d8d7810b3165b6c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;immutable=1&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccabe1bc4519474ead8892d0cd69c8b0775ed4b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;incremental_vacuum;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5baf91e220e87719852feaa7184a098f41965b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;incremental_vacuum&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16d799bd7829150ce3e6604138fbebab20b5419" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;index_info(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7688cc1ff573d2bca1de629a8d2a79e927035298" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;index_list(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfeb29a44b8e71355e11dbd4cf0aebfdd351c06" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;index_xinfo(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207535d3995e19d40dc08d055ca415f8028e650a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;instr(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac72f17cc719eb38ab9ab57e1ac893c356c119eb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xColumnCount)(Fts5Context*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9750e0f760da519d8715d51c87874648a8fe67e8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42b31da68a1e7f9ae5eecbab61aee9b43cb6b1b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ce4bfbb6d268c0d1ef8670fc34f7a4b65bb387" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3190bda489a99715fd738757d80223d99cccdbb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892559d9568a1d87d97b14bc61079a34debf6b83" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xInstCount)(Fts5Context*, int *pnInst)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100e77957aba25dbbb31de82532ca7bf291eb970" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xPhraseCount)(Fts5Context*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcdaa92e2b0fc49b2bf5da218bbca933cf5c296" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031f3306d8acf8f83f8963454a0457de1feea424" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d49467cfac66b79b5909b3a249dfaa9d04d187b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xPhraseSize)(Fts5Context*, int iPhrase)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27ad327723310374823171bdbac767d224d4747" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData, int(*)(const Fts5ExtensionApi*,Fts5Context*,void*) )&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af65e8dd1bd43dd26a39f7927ec9a0e3fc20406" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028bae0525e377b198a0579de0698834b402ef0a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*))&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b299d4b01b17194f0bfab31185570b2a5b0e26" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;int (*xTokenize)(Fts5Context*, const char *pText, int nText, void *pCtx, int (*xToken)(void*, int, const char*, int, int, int) )&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f951b67bdae3181e28bc99fbd1081f3db56229" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;integrity_check(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f61e2b4f6af6827071e26ba0468c59f77f7382d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;integrity_check; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbcbd2f1b02531496228f6526096af9fa315739" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;journal_mode = &lt;i&gt;DELETE | TRUNCATE | PERSIST | MEMORY | WAL | OFF&lt;/i&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f421c8ecbe88c2e594c771b7201c65eb77fcce60" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;journal_mode; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e1050ba5c76fd251b389021a94f193300849d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;journal_size_limit = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6038a087fec5ff7e87d3be2a0c692b4c7d54bf7c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;journal_size_limit&lt;br/&gt; PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b030b978b02cc9207038086c7f2c60253ad04d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;julianday(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43da3ded817719eb56f1590ebd527ae35875002" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;k1&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8481cc752e77e81f239fb8d49320bf2fa634efc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;k2&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ede80f5c49ab1747c7f023b90de4537abacf288" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;lag(expr)&lt;br/&gt;lag(expr, offset)&lt;br/&gt;lag(expr, offset, default)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9ce10c584a3ee6d960754c6357d4f20cf2de71" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;langid&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f306288a791aefbb510d07825cdcbd178d873e42" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;last_insert_rowid()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca2232f164d7c66d07ad3c034e6f4b6dda69dbd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;last_value(expr)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ed8362f530c16dff1f7d9cc5b282b98b462fc2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;lead(expr)&lt;br/&gt;lead(expr, offset)&lt;br/&gt;lead(expr, offset, default)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d2123909b0f5a819af3db1c1e94d06a3f8779f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;length(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc5b8f00ea873518dc12f8893f25bbc6c66ce67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;like(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;br/&gt;like(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;,&lt;i&gt;Z&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c7c73b4b3991211d36821e85de44d186de4969" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;likelihood(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811594ce0b6e61d3b980bd09f4d1c39bf30bbb95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;likely(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbe6610ca98a28c81ac1d281754e9a5e02f6a4a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;load_extension(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;load_extension(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df7ac0e0e06da4f24921e24ffa4a99e384f1953" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;locking_mode = &lt;i&gt;NORMAL | EXCLUSIVE&lt;/i&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd9cb7c00973c9cf4c02835fba7d46c4cd155b3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;locking_mode; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97f3f643b48dea573d334c35e46808c117b3e16" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;lower(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d4e148947298901a28af9618a2edc72556c7ac" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ltrim(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;ltrim(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ee49b847d1bd0b4c011677c606dfe46418f9b8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;matchlen&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84700aab85d80dd19448c1aadba1ce06d6cac5e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;max(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1c91322cff028b6d2a6ae101916dba85e55305" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;max(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;,...)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c668cbb57e22aa0c108185ae17175562403e88" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;max_page_count = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cca5fba8273357af3d23375f683db4ab915088e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;max_page_count; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46970ade90f97e0fcf3e0dcfc00dfcc8abf51125" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mem&lt;/b&gt;: This field is the number of bytes of heap storage used by the prepared statement. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusmemused&quot;&gt;SQLITE_STMTSTATUS_MEMUSED&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2323e80eea828e053d28f31a4b3c98243b0559a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;memdebug.rc&lt;/b&gt; - like test.rc but also enable &lt;a href=&quot;compile#memdebug&quot;&gt;-DSQLITE_MEMDEBUG&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2385b3a406fa9ea94dd4092a1e7ffc158d26ec6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;min(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8829a5160360e2352f3a4c213691d03f9ba3f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;min(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;,...)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8df04651e720bd40286ee83b4d6e48760a9ee7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;min.rc&lt;/b&gt; - Run the minimum set of tests needed for 100% coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5e7d659f4cfe7edf20e886f624adf61dcf6fe6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mmap_size; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d0eb11df5451ce3b5760e53da3fa40b8b4daa6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mmap_size=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2f639309419d347aca23f719e0b621afb92015" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mode&lt;/b&gt;: The mode parameter may be set to either &quot;ro&quot;, &quot;rw&quot;, &quot;rwc&quot;, or &quot;memory&quot;. Attempting to set it to any other value is an error. If &quot;ro&quot; is specified, then the database is opened for read-only access, just as if the &lt;a href=&quot;#SQLITE_OPEN_AUTOPROXY&quot;&gt;SQLITE_OPEN_READONLY&lt;/a&gt; flag had been set in the third argument to sqlite3_open_v2(). If the mode option is set to &quot;rw&quot;, then the database is opened for read-write (but not create) access, as if SQLITE_OPEN_READWRITE (but not SQLITE_OPEN_CREATE) had been set. Value &quot;rwc&quot; is equivalent to setting both SQLITE_OPEN_READWRITE and SQLITE_OPEN_CREATE. If the mode option is set to &quot;memory&quot; then a pure &lt;a href=&quot;inmemorydb&quot;&gt;in-memory database&lt;/a&gt; that never reads or writes from disk is used. It is an error to specify a value for the mode parameter that is less restrictive than that specified by the flags passed in the third parameter to sqlite3_open_v2().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e6b105c2bf735792ce11591cbf9c2f8556c47d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mode&lt;/b&gt;: The mode parameter may be set to either &quot;ro&quot;, &quot;rw&quot;, &quot;rwc&quot;, or &quot;memory&quot;. Attempting to set it to any other value is an error. If &quot;ro&quot; is specified, then the database is opened for read-only access, just as if the &lt;a href=&quot;c_open_autoproxy&quot;&gt;SQLITE_OPEN_READONLY&lt;/a&gt; flag had been set in the third argument to sqlite3_open_v2(). If the mode option is set to &quot;rw&quot;, then the database is opened for read-write (but not create) access, as if SQLITE_OPEN_READWRITE (but not SQLITE_OPEN_CREATE) had been set. Value &quot;rwc&quot; is equivalent to setting both SQLITE_OPEN_READWRITE and SQLITE_OPEN_CREATE. If the mode option is set to &quot;memory&quot; then a pure &lt;a href=&quot;../inmemorydb&quot;&gt;in-memory database&lt;/a&gt; that never reads or writes from disk is used. It is an error to specify a value for the mode parameter that is less restrictive than that specified by the flags passed in the third parameter to sqlite3_open_v2().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e378c447b57b9647ef1790cbe9e8e0fd004c14" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;mode=ro&lt;br/&gt;mode=rw&lt;br/&gt;mode=rwc&lt;br/&gt;mode=memory&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd7aa3ba452f8a404691484d3d1e2ea817d6231" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;modeof=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94737558aa8e30aba81834f353e695e866e2607" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;naidx&lt;/b&gt;: This field is the number of rows that have been inserted into &lt;a href=&quot;optoverview#autoindex&quot;&gt;automatic indexes&lt;/a&gt;. A positive value in this field may indicate an opportunity to improve performance by adding a named index that take the place of the automatic index. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusautoindex&quot;&gt;SQLITE_STMTSTATUS_AUTOINDEX&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dca50e56e569f3a137f02613f8e101412a6fd0a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ncol&lt;/b&gt;: The number of columns in the result set of a query. For DML statements, this column has a value of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9266cf0d1aa52a6c88fc7a9ce528569eaf218e98" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nolock&lt;/b&gt;: The nolock parameter is a boolean query parameter which if set disables file locking in rollback journal modes. This is useful for accessing a database on a filesystem that does not support locking. Caution: Database corruption might result if two or more processes write to the same database and any one of those processes uses nolock=1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92049c4fa68e8dcb2a9ce5d1c47395f719ee2e59" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nolock=1&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0821cde6d9d92bcfa8f51b791e202fe561c692f4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;now&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c962d8bc64dcb99d96b34edfd80eef77b82d8960" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nscan&lt;/b&gt;: This field is the number of times that the &lt;a href=&quot;opcode&quot;&gt;bytecode engine&lt;/a&gt; has stepped through a table as part of a full-table scan. A large number if this field may indicate an opportunity to improve performance by adding an index. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusfullscanstep&quot;&gt;SQLITE_STMTSTATUS_FULLSCAN_STEP&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793a688ba89916bc91e2948fcbbff88d939d50df" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nsort&lt;/b&gt;: This field is the number of times that the &lt;a href=&quot;opcode&quot;&gt;bytecode engine&lt;/a&gt; had to sort. A positive value in this field may indicate an opportunity to improve performance by adding an index that will cause the query results to appear naturally in the desired order. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatussort&quot;&gt;SQLITE_STMTSTATUS_SORT&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe71888a18b09526c41d1b94956d1609d2df2a9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nstep&lt;/b&gt;: This field is the number of &lt;a href=&quot;opcode&quot;&gt;bytecode engine&lt;/a&gt; operations that have been performed for the prepared statement. This field can be used as a proxy for how much CPU time a statement has used. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusvmstep&quot;&gt;SQLITE_STMTSTATUS_VM_STEP&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63815c843d590daa0dcf061c4721a9d5d4a2d517" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nth_value(expr, N)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2d0c888098e8713ffd7470fb70089d0baee7e7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ntile(N)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05286bde0bd001f85739e8fbad5157036721e2a0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;nullif(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b025946bb0710a483f2eb1f6bb0f6acf583de102" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;page_count;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acb36fa4cfdbd1af777924754ed8b90f92f80e4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;page_size = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41e038bc3ab6f9cb7c6c880a15dd5da22bca16a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;page_size; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8fb606ccbf864fa90cbb5ee1a6f32cf556579f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;percent_rank()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7925229e75f9a5ddc4c6bcf1fce67735fed59f14" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;phonehash&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5499744b67dcd6206fb619427cb287b68fddad94" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;printf(&lt;i&gt;FORMAT&lt;/i&gt;,...)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173bb75d2eff480770bb8e83d250aaf82ef0042e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;profile&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab4d8dffa722a511d73e114b16c08dc6a537cb6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;psow&lt;/b&gt;: The psow parameter indicates whether or not the &lt;a href=&quot;../psow&quot;&gt;powersafe overwrite&lt;/a&gt; property does or does not apply to the storage media on which the database file resides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dbe2a36203a00ce25e37c7598791b053afe0f0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;psow&lt;/b&gt;: The psow parameter indicates whether or not the &lt;a href=&quot;psow&quot;&gt;powersafe overwrite&lt;/a&gt; property does or does not apply to the storage media on which the database file resides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19672e769c27252099c41616a5a8161a4d6518d5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;psow=0&lt;br/&gt;psow=1&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f260f1801a8e818b6ff06e8303be11d7451a10" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;quick.rc&lt;/b&gt; - Run all tests required for 100% coverage tests using -Os and &lt;a href=&quot;compile#debug&quot;&gt;-DSQLITE_DEBUG&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd4aa79ddd410cd9139a41d386311916ebe9d17" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;quick_check(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994a2c2443ac0da9003e00fe190aaa31db2160a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;quick_check; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14e2eb2027ccd9a5fae3e53bbc6e949cbc94b70" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;quote(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340804ccd9900156a5ee658749fc30933ec1cc6d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;random()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e582c145eb46045893175b9cad76026024fcc73" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;randomblob(&lt;i&gt;N&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52d0687653f788c9a1d0b62c1ec148950ea4eb4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rank()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0dddfe101189ad9de03f6a2247d0074815decf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rank&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5642fd86cd16372a166c437b2acd799966efa693" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;replace(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;,&lt;i&gt;Z&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1387ead5a7eaf9239d995873793737440d057fc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;reprep&lt;/b&gt;: This field is the number of times that the statement has had to be reprepared due to schema changes or changes to parameter bindings. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusreprepare&quot;&gt;SQLITE_STMTSTATUS_REPREPARE&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13892832e8f338f883dc9f1b67835b33d26f9407" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;ro&lt;/b&gt;: The &quot;read only&quot; column. This column is true (non-zero) if the SQL statement is a query and false (zero) if it is a DML statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578448d770f3d2a1b5a91906bea2c63bf15fb132" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;round(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;round(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9a2c7f5f210b7436687e26513be6f97e02a2d8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;row&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc595dec6582246906837ece99dd2d9d595c4be" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;row_number()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb5815912a7a25828847a14d830afa81794e48c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rowid BETWEEN $lwr AND $upr&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cc6900b78e2dccfbf100ecdd22f5422feb3151" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rowid IN&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194d8c92ba435bfeb5dddcca984211dc5c83f9f7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rowid&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7bc59f8cdd1723aa19dd21067fb2173a1d966d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rowid=$id&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2e4bd1806543d782878e39a0464ee350a55bd2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;rtrim(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;rtrim(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a01ed5e9b0f95f0e890796478ba1457e1d2012a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;run&lt;/b&gt;: This field is the number of times that the statement has been run. This field is equivalent to the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusrun&quot;&gt;SQLITE_STMTSTATUS_RUN&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6665c42d1931c0c11bc5fdb3f4263f62967dd63d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;schema=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7581ff4e29fb81935f4ac0e64765167bccedcaf5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;schema_version = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88eb35aae7e462aa136a9cf07bcc20b9b1be9ba" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;schema_version; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6a9f0cd2885d562989c04156ad40993a8ae646" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;scope&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2741e4cf3f42be902ed8f4f9feeb47588d70ef90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;score&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73b09e15d5fda473433a1b9ec4f9f86563ba45c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;secure_delete = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2ead5c4efff15afbf4a1d95f72bf4bcf3aaac9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;secure_delete; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bba61243050573065917c0d6af2442d5ad0e95" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;shell.c&lt;/b&gt;: The command-line interface program itself. This is the C source code file that contains the definition of the &lt;b&gt;main()&lt;/b&gt; routine and the loop that prompts for user input and passes that input into the SQLite database engine for processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605c53952422929c94c4ef797c0cae43610c5471" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;soundex(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4f59d9802ac2b8b9ccdfced25c86d0a351f22a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;soundslike&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439148df042711bd9ba70bd7e598ffbca547afb7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;spellfix1_editdist(P,W)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a6c0d38f6505697db2c498ea35b78ed9e5fc63" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;spellfix1_phonehash(X)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce4abdb98f5e793c14ba05e7c794774cec57a9e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;spellfix1_scriptcode(X)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55372a1db28566500f11b9a322c8e23b33028121" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;spellfix1_translit(X)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72513f2eaa33786572b541eb69611d8a91d32bd2" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sql&lt;/b&gt;: The original SQL text of the prepared statement. If the prepared statement is compiled using the &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; interface, then the SQL text might not have been saved, in which case this column will be NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98d7e7639e1091f7a9cc980b2fa80fcf072e758" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlar_compress(X)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ef691312d4ca7479d76cbfc1797a518f374cc8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlar_uncompress(Y,SZ)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cebe7a7b12fd950a74b5fba5575de4973ffb868" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite3.c&lt;/b&gt;: The SQLite amalgamation source file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c09182d460b59bea381dbce17c0a713fbd32a19" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite3.h&lt;/b&gt;: The header files that accompanies sqlite3.c and defines the C-language interfaces to SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc4c2f9fd5dadcb7d70ecf5019b082922291e64" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite3_backup_finish()&lt;/b&gt; is called to release all resources associated with the backup operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7599f05bd7927f9fe0e7226e610b201a20fca5cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite3_backup_init()&lt;/b&gt; is called once to initialize the backup,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50049f9518772742b4f4d7a9638718fd332f558c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite3_backup_step()&lt;/b&gt; is called one or more times to transfer the data between the two databases, and finally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36384ee5a830c16bb1e112e7d3a904e2090a6806" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite3_int64 (*xRowid)(Fts5Context*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84a20c3533b13fd8f3158014a02d324fdf73854" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_compileoption_get(&lt;i&gt;N&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f387f1d980ba1b6ac824b01c4502663c86db1b1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_compileoption_used(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e44884028fa4a47b130aec37b250e2c69a0833" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_exec_printf()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebcfeff700a28642ccb8dde6efb294b6168bbaf" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_exec_vprintf()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a04b66dabddcc301fcb52fd7ec612ccbabf6148" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_get_table_printf()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f711405ae8eba472544d1aa5cfd209c541dc90a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_get_table_vprintf()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8617cd19825488ab7fdd81fef2642bb7b5bd4e71" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_offset(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efa54cd4a876a8b910e9958257c43e50054c08b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_source_id()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6332e2508f2d7603546d3bcc08b9be6340cd89c6" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sqlite_version()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abde37706a46b7ca8874418dde8c8e57d75e9301" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;srchcnt&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766dd6c9278d00bc9e2d900050adefb7e1ac80fd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;statement&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61469f9128c59549d8929ca8786e2516099564cd" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;strftime(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae9927a2b3298dd39e25b370b34d3395edd5527" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;substr(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;,&lt;i&gt;Z&lt;/i&gt;)&lt;br/&gt;substr(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12c6d8c9e8a39f25add895e2c0bf8d194e1c45f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;sum(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;total(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3492ae3d2a89485e206c4937164ed7d324c5a5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;synchronous = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f085e6ee811e844fee162829f6334cdd145d4bca" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;synchronous; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f03ee139387146c590bdbb574bc081c350f09bb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;table_info(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6eefb15dd071e91029df39120e4adef6f09f67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;table_xinfo(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7146ae989b40b504ed9566df150fba27db865a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;test-ex.rc&lt;/b&gt; - long-running soak tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9082bc8530887269298fa6b758b7df0103f4afb7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;test.rc&lt;/b&gt; - Run the same tests as in fast.rc but without compiler optimization and enabling options like &lt;a href=&quot;compile#debug&quot;&gt;-DSQLITE_DEBUG&lt;/a&gt; and -DSQLITE_ENABLE_EXPENSIVE_ASSERT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec47fe06e8fa40340ac7dc1a59a81c280b08d6c" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;testcase(X)&lt;/b&gt; &amp;rarr; The testcase(X) statement indicates that X is sometimes true and sometimes false. In other words, testcase(X) indicates that X is definitely not an invariant. Since SQLite uses 100% &lt;a href=&quot;testing#mcdc&quot;&gt;MC/DC testing&lt;/a&gt;, the presence of a testcase(X) macro indicates that not only is it possible for X to be either true or false, but there are test cases to demonstrate this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387747815042252f6049ab6dffd4c9e618d3c9ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;time(&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751f81cbcc6744df5561e7226f36021bf2e3af36" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;top&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24cfa079085118e42e96d2a55a37a53557cd88e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;total_changes()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542f31e075ca05fd951176f4d597451afd1125ec" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;trim(&lt;i&gt;X&lt;/i&gt;)&lt;br/&gt;trim(&lt;i&gt;X&lt;/i&gt;,&lt;i&gt;Y&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5adfeb6f8a74b81f3673d50c2e3be5461cb4506" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;typeof(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564af250a086d4ca4862414f517487932362df50" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unicode(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a493d0d93cdad6d8063bb460480308af31d81af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unix-dotfile&lt;/b&gt; - uses dot-file locking rather than POSIX advisory locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee0b7222a0d2745b0960933b8554bb0b2cb0f36" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unix-excl&lt;/b&gt; - obtains and holds an exclusive lock on database files, preventing other processes from accessing the database. Also keeps the &lt;a href=&quot;walformat#shm&quot;&gt;wal-index&lt;/a&gt; in heap rather than in shared memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a40a565e91b5e38415639e5c0e1f0a1d0147f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unix-namedsem&lt;/b&gt; - uses named semaphores for file locking. VXWorks only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87aa888be05eec90be29a815beb11ebb61786bc9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unix-none&lt;/b&gt; - all file locking operations are no-ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e2ab215f74d535aecccce1746b0b6f8e4eee96" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;unlikely(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abd3b06da2eeea0c8f757f2140032a74361ffdb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;upper(&lt;i&gt;X&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a630c6ced4b606f3e586eb856c79eca570d7b5d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;user_version = &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f14ee4f8a99c00c21229b1476cff5c7dcf693f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;user_version; &lt;br/&gt;PRAGMA &lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088cf7d75ebd01b23e3aca416dca22a57dac9950" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;vfs&lt;/b&gt;: The &quot;vfs&quot; parameter may be used to specify the name of a VFS object that provides the operating system interface that should be used to access the database file on disk. If this option is set to an empty string the default VFS object is used. Specifying an unknown VFS is an error. If sqlite3_open_v2() is used and the vfs option is present, then the VFS specified by the option takes precedence over the value passed as the fourth parameter to sqlite3_open_v2().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2998c7ff661dc1402458997c40d904ae7019342d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;vfs=&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be0f1dac527f6a7a3a8b6d2e7324226055d9238" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfac065939a7511e81786f4f00b434cd5618329" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f50db153cf3b9cc7e9e88b1554a9c5a044290b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;void *(*xGetAuxdata)(Fts5Context*, int bClear)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd96b486c80ce4df848a29698eba4d9200ba1cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;void *(*xUserData)(Fts5Context*)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b126f269504e317361d82c9eb42ec77f3cb00678" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;wal_checkpoint(FULL);&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4d6723b1efc24a3f9e4546fac324515250a15f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;wal_checkpoint(PASSIVE);&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245179a0a4378112590955d1a1537df9f96e19d3" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;wal_checkpoint(RESTART);&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf71d8462439fb51aa407e19229e4d9affee0e5f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;wal_checkpoint(TRUNCATE);&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e49255e11543623b2c50370c1e1606794efe285" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;wal_checkpoint;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0751bc3711d32d9aac3b755aa8669d93303b0272" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;win32-longpath-none&lt;/b&gt; - combination of &quot;win32-longpath&quot; and &quot;win32-none&quot; - long pathnames are supported and all lock operations are no-ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad6725cafce35d815b8464dedebc92eb51ec573" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;win32-longpath&lt;/b&gt; - like &quot;win32&quot; except that pathnames can be up to 65534 bytes in length, whereas pathnames max out at 1040 bytes in &quot;win32&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beadca375c7cb43a64419f239d7bb81fa172a062" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;win32-none&lt;/b&gt; - all file locking operations are no-ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f7df8b834c26f9670be7255e91884f981bbdf5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;word&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6ccfe69e2ef2274904ba1b989763fe9daed749" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xCreate:&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ea35c5e28008270d3f794e11e6b29032f8b335" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xInverse(3)&lt;/b&gt; - remove value &quot;3&quot; from the window. The window now contains values 8 and 1 only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06f04ca5de186ef308cf987a39acd62fa581efb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xInverse(4)&lt;/b&gt; - remove &quot;4&quot; from the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea3b2c9ac24752a4d124bf259358d12a4385ed1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xInverse(5)&lt;/b&gt; - remove value &quot;5&quot; from the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c201bad931f8401061d806fb20a99e02f340ca75" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xStep(1)&lt;/b&gt; - add value &quot;1&quot; to the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552183d8347d4aa8b4ecd28963b82e0980c54d3f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xStep(3)&lt;/b&gt; - add &quot;3&quot; to the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4686be269638aad4598d31d42b3f4f673d7fe4a8" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xStep(4)&lt;/b&gt; - add &quot;4&quot; to the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82113cc4bb37a3f6a26309f9a359011d7b90a67" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xStep(5)&lt;/b&gt; - add &quot;5&quot; to the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26af953955c0fb0cb311f7c624b1676a7c454639" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xStep(8)&lt;/b&gt; - add &quot;8&quot; to the current window. The window now consists of values 5, 3 and 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf072a5adae091a25691fa9f8a75085c48f93b90" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xValue()&lt;/b&gt; - invoke xValue() to obtain the value of sumint() for the row with (x='a'). The window currently consists of values 4 and 5, and so the result is 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5dd79d383628751a86ee2ffb1fcdc34f1bd26e" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xValue()&lt;/b&gt; - invoke xValue() to obtain the value of sumint() for the row with (x='b'). The window currently consists of values 4, 5 and 3, and so the result is 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e4b8f199ffe99bce9be789081aca11bd89a987" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xValue()&lt;/b&gt; - invoked to obtain the value for row (x='d').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a08acb2172b97a134c2c8886902b63f79dd194d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xValue()&lt;/b&gt; - invoked to obtain the value for row (x='d'). 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff710f762c530458940d685a64c42fe7d5eb730" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;xValue()&lt;/b&gt; - invoked to obtain the value for the row with (x='c'). In this case, 16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2de13f92fe4c6dae6ac8db9dacd9ccaae02dc07" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;zeroblob(&lt;i&gt;N&lt;/i&gt;)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa13734f5aacd4ab8879e00f3c9d12402784092" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Not yet implemented)&lt;/em&gt; Create indexes that might have been helpful to recent queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e6228539f5984d272435f54680c919edca57b8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Not yet implemented)&lt;/em&gt; Record usage and performance information from the current session in the database file so that it will be available to &quot;optimize&quot; pragmas run by future database connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4e8b1714f1b41237ba93ca2e5bf1b3d93408f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Caution:&lt;/em&gt; Making a change to the sqlite_master table like this will render the database corrupt and unreadable if the change contains a syntax error. It is suggested that careful testing of the UPDATE statement be done on a separate blank database prior to using it on a database containing important data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8d8331be552f1d9886147666d4d00355995833" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Caution:&lt;/em&gt; Once again, making changes to the sqlite_master table like this will render the database corrupt and unreadable if the change contains an error. Carefully test this entire procedure on a separate test database prior to using it on a database containing important data and/or make backup copies of important databases prior to running this procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f6ba8783597d88987529bbf21585dc3045c297" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Nota Bene:&lt;/em&gt; In this rule, &quot;application&quot; means the code that issues SQL statements. If the &quot;application&quot; is an &lt;a href=&quot;whentouse#serversidedb&quot;&gt;application server&lt;/a&gt; and if the content resides on the same physical machine as the application server, then SQLite might still be appropriate even though the end user is another network hop away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a88a70f28eea7505a4745ef400e6ee503235e73" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;any&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f86c02aa28130769f3916ecd58dfbb1c988d34" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;It is not possible to open &lt;a href=&quot;wal#readonly&quot;&gt;read-only WAL databases&lt;/a&gt;. The opening process must have write privileges for &quot;&lt;code&gt;-shm&lt;/code&gt;&quot; &lt;a href=&quot;walformat#shm&quot;&gt;wal-index&lt;/a&gt; shared memory file associated with the database, if that file exists, or else write access on the directory containing the database file if the &quot;&lt;code&gt;-shm&lt;/code&gt;&quot; file does not exist.&lt;/s&gt; Beginning with &lt;a href=&quot;https://sqlite.org/releaselog/3_22_0.html&quot;&gt;version 3.22.0&lt;/a&gt; (2018-01-22), a read-only WAL-mode database file can be opened if the &lt;code&gt;-shm&lt;/code&gt; and &lt;code&gt;-wal&lt;/code&gt; files already exists or those files can be created or the &lt;a href=&quot;uri#uriimmutable&quot;&gt;database is immutable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4adae4e92d852fe832ed5d1eceb7319abc564534" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;The target database may not contain &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt;.&lt;/s&gt; Indexes on expressions are supported beginning with SQLite 3.30.0 (2019-10-04).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db395f459bbe4efd96a60570c6c0dc0d9de9b06f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;WAL works best with smaller transactions. WAL does not work well for very large transactions. For transactions larger than about 100 megabytes, traditional rollback journal modes will likely be faster. For transactions in excess of a gigabyte, WAL mode may fail with an I/O or disk-full error. It is recommended that one of the rollback journal modes be used for transactions larger than a few dozen megabytes.&lt;/s&gt; Beginning with &lt;a href=&quot;https://sqlite.org/releaselog/3_11_0.html&quot;&gt;version 3.11.0&lt;/a&gt; (2016-02-15), WAL mode works as efficiently with large transactions as does rollback mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf9a92ecc51fe417c6554bfdf564ab70b6793e5" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_aggregate_count&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04a1191ffe57ae4dc80fdf0b0d1302374a5223c" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_expired&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ae465dac3d471fb929f18f6459bc6fcd0ad5ac" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_global_recover&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c152f165bf4d682834190453559ca4079d4e3e8f" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_memory_alarm&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213d566c65b6e979c0b12b5cb2c6d769f7e68036" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_soft_heap_limit&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650653e2136ca438507f86226e9dd600546df2c7" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_thread_cleanup&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9810cb85410d21ed25bad43b513e5d44434fc79b" translate="yes" xml:space="preserve">
          <source>&lt;s&gt;sqlite3_transfer_bindings&lt;/s&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156219115afff08d45c71a04e60351afa6d72952" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key Point:&lt;/strong&gt; An R*Tree index does not normally provide the exact answer but merely reduces the set of potential answers from millions to dozens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6049fd8bb72e0e6f1e8d8a417d9fe8b5a790ff5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key Point:&lt;/strong&gt; Changes to compile-time options have the potential to affect makefiles in projects that do customized builds of SQLite. These changes should have zero impact on application code and for most projects which use a standard, default build of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe0585022e152f67097fdd4ed2411a232e49da4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key Point:&lt;/strong&gt; The change to the way NULL values are handled by the IN and NOT IN operators is technically a bug fix, not a design change. However, maintainers should check to ensure that applications do not depend on the older, buggy behavior prior to upgrading to version 3.6.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac582c2b4e7dacb497b4397bfa98eb62970fbb75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key Point:&lt;/strong&gt; The incompatible changes in the SQLite operating-system interface for version 3.6.0 only affect the rare applications that make use of the &lt;a href=&quot;c3ref/vfs&quot;&gt;virtual file system&lt;/a&gt; interface or that supply an application-defined &lt;a href=&quot;c3ref/mutex_alloc&quot;&gt;mutex implementation&lt;/a&gt; or that make use of other obscure compile-time options. The changes introduced by SQLite version 3.6.0 will have zero impact on the vast majority of SQLite applications that use the built-in interfaces to Unix, Windows, and OS/2 and that use the standard build configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc0502f968c401bb51d275b3d308a8f8dcc412b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key Points:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3be666c416d3eeb09cb76c7b7abf3ac3e2ab55d" translate="yes" xml:space="preserve">
          <source>=0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8eebb6cdfbace0c569728246016f04641f12f9" translate="yes" xml:space="preserve">
          <source>=1 and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bab61eb53176449e25c2c82f172b82cb13ffb9d" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3611d993bcfe075143e56843e7c942308dbe016c" translate="yes" xml:space="preserve">
          <source>?NNN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2a6f3e69a4dab4720c5d9a3aae1f202d725e39" translate="yes" xml:space="preserve">
          <source>@VVV</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c828fc11c0e93226c89266f2e8a91c52ebb360" translate="yes" xml:space="preserve">
          <source>A &quot;CREATE TABLE ... AS SELECT&quot; statement creates and populates a database table based on the results of a SELECT statement. The table has the same number of columns as the rows returned by the SELECT statement. The name of each column is the same as the name of the corresponding column in the result set of the SELECT statement. The declared type of each column is determined by the &lt;a href=&quot;datatype3#expraff&quot;&gt;expression affinity&lt;/a&gt; of the corresponding expression in the result set of the SELECT statement, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1591a1617a12bcdebc03ff048dd0aaab529e900a" translate="yes" xml:space="preserve">
          <source>A &quot;long int&quot; or &quot;long unsigned int&quot;. Also 32-bits on all modern systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3cd818abaaa9a0e6005a308275969363d99be5" translate="yes" xml:space="preserve">
          <source>A &quot;long long int&quot; or &quot;long long unsigned&quot; or an &quot;sqlite3_int64&quot; or &quot;sqlite3_uint64&quot; value. These are 64-bit integers on all modern systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f83dc95438f0748d2d21836359d9d250a9cf519" translate="yes" xml:space="preserve">
          <source>A &quot;row value&quot; is an ordered list of two or more scalar values. In other words, a &quot;row value&quot; is a vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283fddadbd97aab80b3f5c004c94712b610008ef" translate="yes" xml:space="preserve">
          <source>A &quot;rowid table&quot; is any table in an SQLite schema that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ef35610d000dac934111c06adc58ba665e4eea" translate="yes" xml:space="preserve">
          <source>A &quot;value&quot; is a single number, string, BLOB or NULL. Sometimes the qualified name &quot;scalar value&quot; is used to emphasize that only a single quantity is involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e595cea14982c806deb1a68df267f727d390b83d" translate="yes" xml:space="preserve">
          <source>A &quot;variable&quot; or &quot;parameter&quot; token specifies a placeholder in the expression for a value that is filled in at runtime using the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind()&lt;/a&gt; family of C/C++ interfaces. Parameters can take several forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0650b7b535494da46a67e89f0076bd1eb000f596" translate="yes" xml:space="preserve">
          <source>A 4-byte big-endian integer page number for the first page of the overflow page list - omitted if all payload fits on the b-tree page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457dd24244954b2ed62ddd2400a48d0f00613b7e" translate="yes" xml:space="preserve">
          <source>A 4-byte big-endian page number which is the left child pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fcda7469ad59852cc6bee2078ffd2e27a37099" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;datatype3#collation&quot;&gt;collating function&lt;/a&gt; for each column is necessary in order to compute the order of text fields. SQLite defines three built-in collating functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0941f09d0d99d3f4e14cafccc32de96df6f4ca23" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;fileformat2#walreset&quot;&gt;WAL reset&lt;/a&gt; means to rewind the WAL and start adding new frames at the beginning. This occurs while appending new frames to a WAL that has &lt;a href=&quot;walformat#mxframe&quot;&gt;mxFrame&lt;/a&gt; equal to &lt;a href=&quot;walformat#nbackfill&quot;&gt;nBackfill&lt;/a&gt; and which has no locks on WAL_READ_LOCK(1) through WAL_READ_LOCK(4). The WAL_WRITE_LOCK is held.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00aa28b4ba172b3e360c196f89dfcfc325f153e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;fts3&quot;&gt;full-text search&lt;/a&gt; interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fbe703a2a9d7026510938d0ef6d0e90ee4db6f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://www.sqlite.org/src/info/80ba201079&quot;&gt;very obscure bug&lt;/a&gt; associated with the &lt;a href=&quot;optoverview#or_opt&quot;&gt;or optimization&lt;/a&gt; was fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c246c5420b674d2441ed9c3d37319384c74b2e0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt; command operates the same whether or not &lt;a href=&quot;foreignkeys#fk_enable&quot;&gt;foreign key constraints are enabled&lt;/a&gt;. The parent key definitions of foreign key constraints are not checked when a table is created. There is nothing stopping the user from creating a foreign key definition that refers to a parent table that does not exist, or to parent key columns that do not exist or are not collectively bound by a PRIMARY KEY or UNIQUE constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e29b640b6e66681a005ec711b53b3e91c43098d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;lang_createview&quot;&gt;VIEW&lt;/a&gt; may now reference undefined tables and functions when initially created. Missing tables and functions are reported when the VIEW is used in a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a46b4de837835c04612d05bdcd4565ff372f5f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;lang_savepoint&quot;&gt;nested savepoint&lt;/a&gt; transaction may be RELEASEd while the database is in a state that does not satisfy a deferred foreign key constraint. A transaction savepoint (a non-nested savepoint that was opened while there was not currently an open transaction), on the other hand, is subject to the same restrictions as a COMMIT - attempting to RELEASE it while the database is in such a state will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac241bd5950cee76dd1c229b208c7ae5eeaa8f2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement enclosed in parentheses is a subquery. All types of SELECT statement, including aggregate and compound SELECT queries (queries with keywords like UNION or EXCEPT) are allowed as scalar subqueries. The value of a subquery expression is the first row of the result from the enclosed &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement. The value of a subquery expression is NULL if the enclosed &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement returns no rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f43c4aca8f02e6e0cae74a1bfed1c05ee2754b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement used as either a scalar subquery or as the right-hand operand of an IN, NOT IN or EXISTS expression may contain references to columns in the outer query. Such a subquery is known as a correlated subquery. A correlated subquery is reevaluated each time its result is required. An uncorrelated subquery is evaluated only once and the result reused as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024807a5ea9e932cf26bbf315bdeb3b063751ec8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;lang_select#values&quot;&gt;VALUES&lt;/a&gt; clause can be the first element in a &lt;a href=&quot;lang_select#compound&quot;&gt;compound SELECT&lt;/a&gt; that uses a &lt;a href=&quot;lang_with&quot;&gt;WITH&lt;/a&gt; clause, but a &lt;a href=&quot;lang_select#simpleselect&quot;&gt;simple SELECT&lt;/a&gt; that consists of just a &lt;a href=&quot;lang_select#values&quot;&gt;VALUES&lt;/a&gt; clause cannot be preceded by a &lt;a href=&quot;lang_with&quot;&gt;WITH&lt;/a&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df491b521dc505e42bc3c6ecd099baa148547e6b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;queryplanner#covidx&quot;&gt;covering index&lt;/a&gt; can also be used to search and sort at the same time. Consider the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871606b16605f413dc5599aac71b78fa3849a872" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; is an interface to an external storage or computation engine that appears to be a table but does not actually store information in the database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4e6c14456215b9d0962cb62cb7b05235ec1b11" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; is an object that presents an SQL table interface but which is not stored in the database file, at least not directly. The virtual table mechanism is a feature of SQLite that allows SQLite to access and manipulate resources other than bits in the database file using the powerful SQL query language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d8302bde332ff69849e87aae361fdd6eed88bd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; that contains &lt;a href=&quot;vtab#hiddencol&quot;&gt;hidden columns&lt;/a&gt; can be used like a &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; in the FROM clause. The arguments to the table-valued function become constraints on the HIDDEN columns of the virtual table. Additional information can be found in the &lt;a href=&quot;vtab#tabfunc2&quot;&gt;virtual table documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a4d2f7abc06c64a3d373982c1067a695d076ac" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab&quot;&gt;virtual table&lt;/a&gt; that contains &lt;a href=&quot;vtab#hiddencol&quot;&gt;hidden columns&lt;/a&gt; can be used like a table-valued function in the FROM clause of a &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement. The arguments to the table-valued function become constraints on the HIDDEN columns of the virtual table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f54a772ec3e29fda7795793266725eca1b672c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; containing one row for each &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; associated with an open &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856349bba241130042131d7b4885683066e751c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; for decomposing a JSON string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0582a0885ca700a90a04a8eff4c47df7102e8b08" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; returning a sequence of increasing integers, modeled after the table-valued function by the same name in PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2741cf2cdf7ad64ce11cd345c855b98d1f85eb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; returning one row for each file in a selected file hierarchy of the host computer. Used by the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; to help implement the &lt;a href=&quot;cli#sqlar&quot;&gt;.archive command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373d830be5eb15d2da2a61288dc21f7719b3437c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; that allows a C-language array of integers, doubles, or strings to be used as table in a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e525a231144d654e7b02c354858c4739a1f24e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued function&lt;/a&gt; which, in combination with a co-packaged &lt;a href=&quot;vfs#shim&quot;&gt;VFS shim&lt;/a&gt; provides information on the number of system calls performed by SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6d070d5ecc711101d38eeaab3df0bef09ff2fd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;wal#walfile&quot;&gt;WAL file&lt;/a&gt; consists of a header followed by zero or more &quot;frames&quot;. Each frame records the revised content of a single page from the database file. All changes to the database are recorded by writing frames into the WAL. Transactions commit when a frame is written that contains a commit marker. A single WAL can and usually does record multiple transactions. Periodically, the content of the WAL is transferred back into the database file in an operation called a &quot;checkpoint&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a26bbd25ee7f100819f3c23deb01a412e2b8ae6" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;i&gt;clean page&lt;/i&gt;&lt;/b&gt; is one for which the cached data currently matches the contents of the corresponding page of the database file. The page has not been modified since it was loaded from the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3149daa49a57f043076bca55d34c79bbf2a94c10" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;i&gt;dirty page&lt;/i&gt;&lt;/b&gt; is a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a631580fd38df6770ba8186e0d9bd01ddb2b0586" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;CHECK&lt;/b&gt; constraint may be attached to a column definition or specified as a table constraint. In practice it makes no difference. Each time a new row is inserted into the table or an existing row is updated, the expression associated with each CHECK constraint is evaluated and cast to a NUMERIC value in the same way as a &lt;a href=&quot;lang_expr#castexpr&quot;&gt;CAST expression&lt;/a&gt;. If the result is zero (integer value 0 or real value 0.0), then a constraint violation has occurred. If the CHECK expression evaluates to NULL, or any other non-zero value, it is not a constraint violation. The expression of a CHECK constraint may not contain a subquery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22b413028503aa499aa22dd5a425b910c462c65" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;DELETE&lt;/b&gt;. A DELETE change represents a row, identified by its primary key values, to remove from a database table. The payload of a DELETE change consists of the values for all fields of the deleted row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc432bfd116ade86c9a957fa16cdde115d0191b7" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;NOT NULL&lt;/b&gt; constraint may only be attached to a column definition, not specified as a table constraint. Not surprisingly, a NOT NULL constraint dictates that the associated column may not contain a NULL value. Attempting to set the column value to NULL when inserting a new row or updating an existing one causes a constraint violation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf1ca3328f33f13bfd67487e1be34ff9035a3f1" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;UNIQUE&lt;/b&gt; constraint is similar to a PRIMARY KEY constraint, except that a single table may have any number of UNIQUE constraints. For each UNIQUE constraint on the table, each row must contain a unique combination of values in the columns identified by the UNIQUE constraint. For the purposes of UNIQUE constraints, NULL values are considered distinct from all other values, including other NULLs. As with PRIMARY KEYs, a UNIQUE &lt;a href=&quot;syntax/table-constraint&quot;&gt;table-constraint&lt;/a&gt; clause must contain only column names &amp;mdash; the use of expressions in an &lt;a href=&quot;syntax/indexed-column&quot;&gt;indexed-column&lt;/a&gt; of a UNIQUE &lt;a href=&quot;syntax/table-constraint&quot;&gt;table-constraint&lt;/a&gt; is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32809ac84c6935c3f1d547f445c33b4edd8239b" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;configuration option&lt;/b&gt; consists of an FTS5 bareword - the option name - followed by an &quot;=&quot; character, followed by the option value. The option value is specified using either a single FTS5 bareword or a string literal, again quoted in any manner acceptable to the SQLite core. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32195c7a6fc427bc8287dc1bfc7fa1047963781" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;delete file&lt;/b&gt; operation (invoked by a call to the VFS xDelete() method) is assumed to be an atomic and durable operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81eb114ea2af4078474a1cbfc4dcbef58bf150be" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;write file&lt;/b&gt; operation modifies the contents of an existing file within the file-system. It may also increase the size of the file. The effects of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837ab313b69fffe66bfeb6474a06eb42c1252970" translate="yes" xml:space="preserve">
          <source>A BLOB referenced by sqlite3_blob_open() may be read using the &lt;a href=&quot;#sqlite3_blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; interface and modified by using &lt;a href=&quot;#sqlite3_blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt;. The &lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOB handle&lt;/a&gt; can be moved to a different row of the same table using the &lt;a href=&quot;#sqlite3_blob_reopen&quot;&gt;sqlite3_blob_reopen()&lt;/a&gt; interface. However, the column, table, or database of a &lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOB handle&lt;/a&gt; cannot be changed after the &lt;a href=&quot;#sqlite3_blob&quot;&gt;BLOB handle&lt;/a&gt; is opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0640d0645ccd75a4dc327263af24976feba6da" translate="yes" xml:space="preserve">
          <source>A BLOB referenced by sqlite3_blob_open() may be read using the &lt;a href=&quot;blob_read&quot;&gt;sqlite3_blob_read()&lt;/a&gt; interface and modified by using &lt;a href=&quot;blob_write&quot;&gt;sqlite3_blob_write()&lt;/a&gt;. The &lt;a href=&quot;blob&quot;&gt;BLOB handle&lt;/a&gt; can be moved to a different row of the same table using the &lt;a href=&quot;blob_reopen&quot;&gt;sqlite3_blob_reopen()&lt;/a&gt; interface. However, the column, table, or database of a &lt;a href=&quot;blob&quot;&gt;BLOB handle&lt;/a&gt; cannot be changed after the &lt;a href=&quot;blob&quot;&gt;BLOB handle&lt;/a&gt; is opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13017a10bf35a23815a31249ff53b230bf8d7de4" translate="yes" xml:space="preserve">
          <source>A C99 compiler such as GCC (including MinGW variants for Windows), Clang, or MSVC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e474401c2fb781e6f6b3a595d076e4ab1e391bd7" translate="yes" xml:space="preserve">
          <source>A CASE expression serves a role similar to IF-THEN-ELSE in other programming languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efc18580100345c76fd2798e95f8e107ce315e6" translate="yes" xml:space="preserve">
          <source>A CAST expression of the form &quot;CAST(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31c615e2a94e5252f4b80b762cba6c0141f5cde" translate="yes" xml:space="preserve">
          <source>A COLLATE operator has the same affinity as its left-hand side operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636b65c339e5b4cff4c6abf3acf46d5d5c4067ad" translate="yes" xml:space="preserve">
          <source>A Frame object (Used by &lt;a href=&quot;opcode#subprog&quot;&gt;subprograms&lt;/a&gt; - see &lt;a href=&quot;opcode#Program&quot;&gt;Program&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd1dbb7ef5708d18278d3388bedd2577e0b3815" translate="yes" xml:space="preserve">
          <source>A Handle To An Open BLOB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3401d49e10d9d0dae1ba0bfad0af249daa8b1e6a" translate="yes" xml:space="preserve">
          <source>A NULL result is considered untrue when evaluating WHEN terms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e08d53bb50141ecc1637476fc883985d9f9ebb" translate="yes" xml:space="preserve">
          <source>A NULL value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffde3dc2b5165819167f5c21c867d724ac37b28" translate="yes" xml:space="preserve">
          <source>A NULL value is not changed by this routine. It remains NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e254962b9e0cb1aea3bfd54acadf87214effe474" translate="yes" xml:space="preserve">
          <source>A PENDING lock means that the process holding the lock wants to write to the database as soon as possible and is just waiting on all current SHARED locks to clear so that it can get an EXCLUSIVE lock. No new SHARED locks are permitted against the database if a PENDING lock is active, though existing SHARED locks are allowed to continue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792513b3669ee7042166df65b3b518052dfec139" translate="yes" xml:space="preserve">
          <source>A RESERVED lock means that the process is planning on writing to the database file at some point in the future but that it is currently just reading from the file. Only a single RESERVED lock may be active at one time, though multiple SHARED locks can coexist with a single RESERVED lock. RESERVED differs from PENDING in that new SHARED locks can be acquired while there is a RESERVED lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7573b1578e511f894b8024c7cc3d97b302451de" translate="yes" xml:space="preserve">
          <source>A RowSet object (See the &lt;a href=&quot;opcode#RowSetAdd&quot;&gt;RowSetAdd&lt;/a&gt;, &lt;a href=&quot;opcode#RowSetRead&quot;&gt;RowSetRead&lt;/a&gt;, and &lt;a href=&quot;opcode#RowSetTest&quot;&gt;RowSetTest&lt;/a&gt; opcodes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7145fed841f2e927e89061340853d861304c9e1a" translate="yes" xml:space="preserve">
          <source>A Slightly More Complex Query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9ffde27510374ea69b59f34f53d3d90e8acc69" translate="yes" xml:space="preserve">
          <source>A TEXT value is less than a BLOB value. When two TEXT values are compared an appropriate collating sequence is used to determine the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f405c1f7939c335f90c63056ef77e55a911955" translate="yes" xml:space="preserve">
          <source>A Template For SELECT Programs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a236f9f7962be97b127c37048fd412e1478ca675" translate="yes" xml:space="preserve">
          <source>A URI filename can optionally be followed by a query string. The query string consists of text following the first &quot;&lt;code&gt;?&lt;/code&gt;&quot; character but excluding the optional fragment that begins with &quot;&lt;code&gt;#&lt;/code&gt;&quot;. The query string is divided into key/value pairs. We usually refer to these key/value pairs as &quot;query parameters&quot;. Key/value pairs are separated by a single &quot;&lt;code&gt;&amp;amp;&lt;/code&gt;&quot; character. The key comes first and is separated from the value by a single &quot;&lt;code&gt;=&lt;/code&gt;&quot; character. Both key and value may contain &lt;b&gt;%HH&lt;/b&gt; escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b929656e7ccea842d99a6cdd674c24cfe9ebde24" translate="yes" xml:space="preserve">
          <source>A VACUUM will fail if there is an open transaction on the database connection that is attempting to run the VACUUM. Unfinalized SQL statements typically hold a read transaction open, so the VACUUM might fail if there are unfinalized SQL statements on the same connection. VACUUM (but not VACUUM INTO) is a write operation and so if another database connection is holding a lock that prevents writes, then the VACUUM will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3d695cfd113fe761861c75383b2e044c2e7e2b" translate="yes" xml:space="preserve">
          <source>A VALUES clause cannot be followed by &lt;a href=&quot;lang_select#limitoffset&quot;&gt;LIMIT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab21b8d4d0b0af0b5e16d3d9e8b9adc5cafa097" translate="yes" xml:space="preserve">
          <source>A VALUES clause cannot be followed by &lt;a href=&quot;lang_select#orderby&quot;&gt;ORDER BY&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d95a064571927a9a88c570d25a1e13033bf432" translate="yes" xml:space="preserve">
          <source>A VDBE program begins execution on instruction 0 and continues with successive instructions until it either (1) encounters a fatal error, (2) executes a Halt instruction, or (3) advances the program counter past the last instruction of the program. When the VDBE completes execution, all open database cursors are closed, all memory is freed, and everything is popped from the stack. So there are never any worries about memory leaks or undeallocated resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0432168769d5fe51afb6dbaedceaf1d86ce22932" translate="yes" xml:space="preserve">
          <source>A VFS object is an instance of the following structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb27bb2698737a1c139441a44f3243078e096d2" translate="yes" xml:space="preserve">
          <source>A WHERE-clause term that uses the &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt; or &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt; operator can sometimes be used with an index to do a range search, almost as if the LIKE or GLOB were an alternative to a &lt;a href=&quot;lang_expr#between&quot;&gt;BETWEEN&lt;/a&gt; operator. There are many conditions on this optimization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4f80b113ccea127e4d3021f3a4f02819b934ae" translate="yes" xml:space="preserve">
          <source>A WITH clause can contain ordinary common table expressions even if it includes the RECURSIVE keyword. The use of RECURSIVE does not force common table expressions to be recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55340617c249beb5aa9dcbec3b3a452cd918cec" translate="yes" xml:space="preserve">
          <source>A WITHOUT ROWID table is a table that uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_index#Clustered&quot;&gt;Clustered Index&lt;/a&gt; as the primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8fd2213389a0089cdcbfb615d2045c57a83ef1" translate="yes" xml:space="preserve">
          <source>A WITHOUT ROWID table is an optimization that can reduce storage and processing requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd83295099a678d051eac126141e86eda45f403" translate="yes" xml:space="preserve">
          <source>A WITHOUT ROWID table uses a different data design for the equivalent table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8671aa0f63652c459215ac815d19beddc15e8e03" translate="yes" xml:space="preserve">
          <source>A ZIP archive is basically a key/value database, optimized for the case of write-once/read-many and for a relatively small number of distinct keys (a few hundred to a few thousand) each with a large BLOB as its value. A ZIP archive can be viewed as a &quot;pile-of-files&quot; database. This works, but it has some shortcomings relative to an SQLite database, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b75515041a194398c4ef9c7f4df42ebbf1ae1c" translate="yes" xml:space="preserve">
          <source>A b-tree page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e4a5662f4ab95c05c9b1089cf8d552e985bac1" translate="yes" xml:space="preserve">
          <source>A b-tree page is divided into regions in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a9edcac9a730619e0cfe51d4bfd7d8720cb6a9" translate="yes" xml:space="preserve">
          <source>A b-tree page is either a table b-tree page or an index b-tree page. All pages within each complete b-tree are of the same type: either table or index. There is one table b-trees in the database file for each rowid table in the database schema, including system tables such as sqlite_master. There is one index b-tree in the database file for each index in the schema, including implied indexes created by uniqueness constraints. There are no b-trees associated with &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;. Specific virtual table implementations might make use of &lt;a href=&quot;vtab#xshadowname&quot;&gt;shadow tables&lt;/a&gt; for storage, but those shadow tables will have separate entries in the database schema. &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables use index b-trees rather than a table b-trees, so there is one index b-tree in the database file for each &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table. The b-tree corresponding to the sqlite_master table is always a table b-tree and always has a root page of 1. The sqlite_master table contains the root page number for every other table and index in the database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8872d8050defbccbb334917b38d2ca8e1564dc7" translate="yes" xml:space="preserve">
          <source>A b-tree page is either an interior page or a leaf page. A leaf page contains keys and in the case of a table b-tree each key has associated data. An interior page contains K keys together with K+1 pointers to child b-tree pages. A &quot;pointer&quot; in an interior b-tree page is just the 31-bit integer page number of the child page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfdea8b36cb23cd0493dd048fd3164b70e3686a" translate="yes" xml:space="preserve">
          <source>A b-tree root page. The page number should be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928af6fa4be08c1c19873c470bbd5a2625ae1f46" translate="yes" xml:space="preserve">
          <source>A better user experience</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bff53ba8dac51c9265761e2c2a4ff11158671e" translate="yes" xml:space="preserve">
          <source>A bug in SQLite versions prior to 3.6.0 (2008-07-16) caused the database to be reported as corrupt if any of the last 6 entries in the freelist trunk page array contained non-zero values. Newer versions of SQLite do not have this problem. However, newer versions of SQLite still avoid using the last six entries in the freelist trunk page array in order that database files created by newer versions of SQLite can be read by older versions of SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c8d4cd9f6ee835f0aa8d6326cf3bfa8b9da543" translate="yes" xml:space="preserve">
          <source>A build of the &lt;a href=&quot;cli&quot;&gt;command-line interface&lt;/a&gt; requires three source files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3827a0612890cae9712a71ec1095000e1430ec" translate="yes" xml:space="preserve">
          <source>A busy handler must not close the database connection or &lt;a href=&quot;#sqlite3_stmt&quot;&gt;prepared statement&lt;/a&gt; that invoked the busy handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ac4c495afe83c385509d9e3c6a5a309fa36de0" translate="yes" xml:space="preserve">
          <source>A busy handler must not close the database connection or &lt;a href=&quot;stmt&quot;&gt;prepared statement&lt;/a&gt; that invoked the busy handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243759da16d869bd57d5e12d61c35e1be1f805d8" translate="yes" xml:space="preserve">
          <source>A bytecoded program in SQLite consists of one or more instructions. Each instruction has an opcode and five operands named P1, P2 P3, P4, and P5. The P1, P2, and P3 operands are 32-bit signed integers. These operands often refer to registers. For instructions that operate on b-tree cursors, the P1 operand is usually the cursor number. For jump instructions, P2 is usually the jump destination. P4 may be a 32-bit signed integer, a 64-bit signed integer, a 64-bit floating point value, a string literal, a Blob literal, a pointer to a collating sequence comparison function, or a pointer to the implementation of an application-defined SQL function, or various other things. P5 is an 16-bit unsigned integer normally used to hold flags. Bits of the P5 flag can sometimes affect the opcode in subtle ways. For example, if the SQLITE_NULLEQ (0x0080) bit of the P5 operand is set on the &lt;a href=&quot;opcode#Eq&quot;&gt;Eq&lt;/a&gt; opcode, then the NULL values compare equal to one another. Otherwise NULL values compare different from one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af46994da07ef61f25c2f526b23c9597924b8bf6" translate="yes" xml:space="preserve">
          <source>A cache spill causes the lock on the database file to escalate from reserved to exclusive. This reduces concurrency. A cache spill also causes extra disk flush or fsync operations to occur and these operations are slow, hence a cache spill can seriously reduce performance. For these reasons a cache spill is avoided whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952fa12450de75899de19565202a5c251a96a2d4" translate="yes" xml:space="preserve">
          <source>A call to &lt;a href=&quot;#sqlite3_snapshot_open&quot;&gt;sqlite3_snapshot_open(D,S,P)&lt;/a&gt; will fail if the database connection D does not know that the database file for schema S is in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;. A database connection might not know that the database file is in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; if there has been no prior I/O on that database connection, or if the database entered &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; after the most recent I/O on the database connection. (Hint: Run &quot;&lt;a href=&quot;pragma#pragma_application_id&quot;&gt;PRAGMA application_id&lt;/a&gt;&quot; against a newly opened database connection in order to make it ready to use snapshots.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbce2a7d14e5d524aa34fd10caef37f64f6407da" translate="yes" xml:space="preserve">
          <source>A call to &lt;a href=&quot;snapshot_open&quot;&gt;sqlite3_snapshot_open(D,S,P)&lt;/a&gt; will fail if the database connection D does not know that the database file for schema S is in &lt;a href=&quot;../wal&quot;&gt;WAL mode&lt;/a&gt;. A database connection might not know that the database file is in &lt;a href=&quot;../wal&quot;&gt;WAL mode&lt;/a&gt; if there has been no prior I/O on that database connection, or if the database entered &lt;a href=&quot;../wal&quot;&gt;WAL mode&lt;/a&gt; after the most recent I/O on the database connection. (Hint: Run &quot;&lt;a href=&quot;../pragma#pragma_application_id&quot;&gt;PRAGMA application_id&lt;/a&gt;&quot; against a newly opened database connection in order to make it ready to use snapshots.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0586f982e4b86cf9914eab1aee68b8462d61681f" translate="yes" xml:space="preserve">
          <source>A call to one of the above APIs creates a new SQL function named by the second parameter (zQueryFunc or zGeom). When that SQL function appears on the right-hand side of the MATCH operator and the left-hand side of the MATCH operator is any column in the R*Tree virtual table, then the callback defined by the third argument (xQueryFunc or xGeom) is invoked to determine if a particular object or subtree overlaps the desired region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c9d57a6c7577d82ae5958b8d5845cbdeb488ef" translate="yes" xml:space="preserve">
          <source>A call to sqlite3_backup_init() will fail, returning NULL, if there is already a read or read-write transaction open on the destination database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f76c2f91f4bc291282ba8411c90b19f5effe501" translate="yes" xml:space="preserve">
          <source>A call to sqlite3_initialize() is an &quot;effective&quot; call if it is the first time sqlite3_initialize() is invoked during the lifetime of the process, or if it is the first time sqlite3_initialize() is invoked following a call to sqlite3_shutdown(). Only an effective call of sqlite3_initialize() does any initialization. All other calls are harmless no-ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e50509528b4aaa1911d41bfa12097644542f6c" translate="yes" xml:space="preserve">
          <source>A call to sqlite3_serialize(D,S,P,F) might return NULL even if the SQLITE_SERIALIZE_NOCOPY bit is omitted from argument F if a memory allocation error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f09c1e84942a3f4e19f6efa6988346dd1bf454a" translate="yes" xml:space="preserve">
          <source>A call to sqlite3_shutdown() is an &quot;effective&quot; call if it is the first call to sqlite3_shutdown() since the last sqlite3_initialize(). Only an effective call to sqlite3_shutdown() does any deinitialization. All other valid calls to sqlite3_shutdown() are harmless no-ops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d86897005e13370bf2940a7d68c4f6212b3540" translate="yes" xml:space="preserve">
          <source>A call to sqlite3_snapshot_open() will fail to open if the specified snapshot has been overwritten by a &lt;a href=&quot;../wal#ckpt&quot;&gt;checkpoint&lt;/a&gt;. In this case SQLITE_ERROR_SNAPSHOT is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b123d9394215fb466274e78d5f37dcb5d1971345" translate="yes" xml:space="preserve">
          <source>A call to sqlite3_snapshot_open() will fail to open if the specified snapshot has been overwritten by a &lt;a href=&quot;wal#ckpt&quot;&gt;checkpoint&lt;/a&gt;. In this case SQLITE_ERROR_SNAPSHOT is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83087efdcf0ff814df49782ed7673c5bb32e0d3c" translate="yes" xml:space="preserve">
          <source>A call to this method always follows a prior call to &lt;a href=&quot;vtab#xBegin&quot;&gt;xBegin&lt;/a&gt; and &lt;a href=&quot;vtab#xsync&quot;&gt;xSync&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bba7422e25acf22029d539a9c3e869ba9eebb8" translate="yes" xml:space="preserve">
          <source>A call to this method always follows a prior call to &lt;a href=&quot;vtab#xBegin&quot;&gt;xBegin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63823dedf5b482128e2d0cda7c31f9b2e6a816fd" translate="yes" xml:space="preserve">
          <source>A call to this routine stores N bytes of randomness into buffer P. The P parameter can be a NULL pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b22fa4e435ba9bc17d0619fd2c72b0454f69b7" translate="yes" xml:space="preserve">
          <source>A cast of a REAL value into an INTEGER results in the integer between the REAL value and zero that is closest to the REAL value. If a REAL is greater than the greatest possible signed integer (+9223372036854775807) then the result is the greatest possible signed integer and if the REAL is less than the least possible signed integer (-9223372036854775808) then the result is the least possible signed integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33e1dcf808eee9d2baa613dd62fa64f94613f9b" translate="yes" xml:space="preserve">
          <source>A changegroup is an object used to combine two or more &lt;a href=&quot;../sessionintro#changeset&quot;&gt;changesets&lt;/a&gt; or &lt;a href=&quot;../sessionintro#changeset&quot;&gt;patchsets&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75339bffdc37dce20eb97a829cfa5c7aa288c842" translate="yes" xml:space="preserve">
          <source>A changegroup is an object used to combine two or more &lt;a href=&quot;sessionintro#changeset&quot;&gt;changesets&lt;/a&gt; or &lt;a href=&quot;sessionintro#changeset&quot;&gt;patchsets&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a455c489be5e742a9b6a79c8fd17fd21034f9a" translate="yes" xml:space="preserve">
          <source>A changeset blob is extracted from the session object using a call to &lt;a href=&quot;session/sqlite3session_changeset&quot;&gt;sqlite3session_changeset()&lt;/a&gt; (or, if using patchsets, a call to the &lt;a href=&quot;session/sqlite3session_patchset&quot;&gt;sqlite3session_patchset()&lt;/a&gt; function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca7cd75094117285613d3c27e6356cf37002d9b" translate="yes" xml:space="preserve">
          <source>A changeset consists of zero or more INSERT, UPDATE and/or DELETE changes, each representing a change to a single row of an attached table. An INSERT change contains the values of each field of a new database row. A DELETE contains the original values of each field of a deleted database row. An UPDATE change contains the original values of each field of an updated database row along with the updated values for each updated non-primary-key column. It is not possible for an UPDATE change to represent a change that modifies the values of primary key columns. If such a change is made, it is represented in a changeset as a DELETE followed by an INSERT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b70e5afa0d3f4c5cf0dce236c8276c0465659ed" translate="yes" xml:space="preserve">
          <source>A changeset may be &quot;inverted&quot; using the &lt;a href=&quot;session/sqlite3changeset_invert&quot;&gt;sqlite3changeset_invert()&lt;/a&gt; API function. An inverted changeset undoes the changes made by the original. If changeset C&lt;sup&gt;+&lt;/sup&gt; is the inverse of changeset C, then applying C and then C&lt;sup&gt;+&lt;/sup&gt; to a database should leave the database unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f32575cd3ae2a269f162fb8c8c71eb2f8f6d374" translate="yes" xml:space="preserve">
          <source>A checkpoint need not run to completion. It might be that some readers are still using older transactions with data that is contained in the database file. In that case, transferring content for newer transactions from the WAL file into the database would delete the content out from under readers still using the older transactions. To avoid that, checkpoints only run to completion if all reader are using the last transaction in the WAL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b3764489da6b52009c87b8c15206abcd48df46" translate="yes" xml:space="preserve">
          <source>A checkpoint operation takes content from the WAL file and transfers it back into the original database file. A checkpoint can run concurrently with readers, however the checkpoint must stop when it reaches a page in the WAL that is past the end mark of any current reader. The checkpoint has to stop at that point because otherwise it might overwrite part of the database file that the reader is actively using. The checkpoint remembers (in the wal-index) how far it got and will resume transferring content from the WAL to the database from where it left off on the next invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96f1bd57862e095f823ff7f46e3b31f9d401ec4" translate="yes" xml:space="preserve">
          <source>A checksum over bytes 0 through 39 of this header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d66abdb2f9e568e194d84301cc7c1defdf138c" translate="yes" xml:space="preserve">
          <source>A co-routine is like a subroutine in that it runs in the same thread as the caller and eventually returns control back to the caller. The difference is that a co-routine also has the ability to return before it has finished, and then resume where it left off the next time it is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3446ddc5c2704f78e209be503e073dd5871e32d" translate="yes" xml:space="preserve">
          <source>A collating sequence is implemented as a function that takes the two strings being compared as inputs and returns negative, zero, or positive if the first string is less than, equal to, or greater than the second. SQLite 3.0 comes with a single built-in collating sequence named &quot;BINARY&quot; which is implemented using the memcmp() routine from the standard C library. The BINARY collating sequence works well for English text. For other languages or locales, alternative collating sequences may be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99502ad72180308e0c6e1dcbcacfcd00577dfed1" translate="yes" xml:space="preserve">
          <source>A collating sequence is just a defined order for text. When SQLite 3.0 sorts (or uses a comparison operator like &quot;&amp;lt;&quot; or &quot;&amp;gt;=&quot;) the sort order is first determined by the data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f87dfb8e180544c52ac50b7d5f03687e7a73db7" translate="yes" xml:space="preserve">
          <source>A column name can be any of the names defined in the &lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt; statement or one of the following special identifiers: &quot;&lt;b&gt;ROWID&lt;/b&gt;&quot;, &quot;&lt;b&gt;OID&lt;/b&gt;&quot;, or &quot;&lt;b&gt;_ROWID_&lt;/b&gt;&quot;. The three special identifiers describe the unique integer key (the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;) associated with every row of every table and so are not available on &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables. The special identifiers only refer to the row key if the &lt;a href=&quot;lang_createtable&quot;&gt;CREATE TABLE&lt;/a&gt; statement does not define a real column with the same name. The rowid can be used anywhere a regular column can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f5bfc838f715cc006584587792787f6b98f6d0" translate="yes" xml:space="preserve">
          <source>A column that uses INTEGER affinity behaves the same as a column with NUMERIC affinity. The difference between INTEGER and NUMERIC affinity is only evident in a &lt;a href=&quot;lang_expr#castexpr&quot;&gt;CAST expression&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bec05409618ea12efea321b6ffb50468bbd6938" translate="yes" xml:space="preserve">
          <source>A column with NUMERIC affinity may contain values using all five storage classes. When text data is inserted into a NUMERIC column, the storage class of the text is converted to INTEGER or REAL (in order of preference) if such conversion is lossless and reversible. For conversions between TEXT and REAL storage classes, SQLite considers the conversion to be lossless and reversible if the first 15 significant decimal digits of the number are preserved. If the lossless conversion of TEXT to INTEGER or REAL is not possible then the value is stored using the TEXT storage class. No attempt is made to convert NULL or BLOB values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636834272fe49a104c8b0f637d91fe89b1a7c34e" translate="yes" xml:space="preserve">
          <source>A column with REAL affinity behaves like a column with NUMERIC affinity except that it forces integer values into floating point representation. (As an internal optimization, small floating point values with no fractional component and stored in columns with REAL affinity are written to disk as integers in order to take up less space and are automatically converted back into floating point as the value is read out. This optimization is completely invisible at the SQL level and can only be detected by examining the raw bits of the database file.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c849785a5191658d60300de8d49f0749c36fe5" translate="yes" xml:space="preserve">
          <source>A column with TEXT affinity stores all data using storage classes NULL, TEXT or BLOB. If numerical data is inserted into a column with TEXT affinity it is converted into text form before being stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331f0240bd92e0f60f02450a7696762f50b6d061" translate="yes" xml:space="preserve">
          <source>A column with affinity BLOB does not prefer one storage class over another and no attempt is made to coerce data from one storage class into another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b523c7ac2e4f6d2358ca3e1fc9c4bea3b0b218" translate="yes" xml:space="preserve">
          <source>A compile-time option (SQLITE_BUSY_RESERVED_LOCK) causes the busy handler to be called when there is contention for a RESERVED lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67fed388120bd5bc263b4502fa3722ec97dd3d6" translate="yes" xml:space="preserve">
          <source>A complete database is stored in a &lt;a href=&quot;onefile&quot;&gt;single cross-platform disk file&lt;/a&gt;. Great for use as an &lt;a href=&quot;appfileformat&quot;&gt;application file format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f700eff4c65192a540e579b7e4f8ad1d2b1604" translate="yes" xml:space="preserve">
          <source>A complete release-test of SQLite requires additional software,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cbfa4256773a63897f24495c59253a95e5dd50" translate="yes" xml:space="preserve">
          <source>A composite foreign key constraint is one where the child and parent keys are both composite keys. For example, consider the following database schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bdd710506454d94afdc4228574e57b24f793bf2" translate="yes" xml:space="preserve">
          <source>A compound &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement is two or more SELECT statements connected by operators UNION, UNION ALL, EXCEPT, or INTERSECT. We call each individual SELECT statement within a compound SELECT a &quot;term&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff14af06eef38988e550d3bb6bb8834b81c2ab0" translate="yes" xml:space="preserve">
          <source>A compound SELECT created using UNION ALL operator returns all the rows from the SELECT to the left of the UNION ALL operator, and all the rows from the SELECT to the right of it. The UNION operator works the same way as UNION ALL, except that duplicate rows are removed from the final result set. The INTERSECT operator returns the intersection of the results of the left and right SELECTs. The EXCEPT operator returns the subset of rows returned by the left SELECT that are not also returned by the right-hand SELECT. Duplicate rows are removed from the results of INTERSECT and EXCEPT operators before the result set is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b1d09048efb4fd1fb06c9b9ddec9b21053649e" translate="yes" xml:space="preserve">
          <source>A conflict handler callback must return one of the following three values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d286e1793dce553da5e2fb27f69090f877b2aeb" translate="yes" xml:space="preserve">
          <source>A connection may not compile an SQL statement if any other connection is holding a write-lock on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a47f7617f36f73967261be474fcf1ca9ab960be" translate="yes" xml:space="preserve">
          <source>A connection must obtain a read-lock on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1dcaac6e13d9eb13e548994e129aca79ff47b0" translate="yes" xml:space="preserve">
          <source>A contentless FTS5 table is created by setting the &quot;content&quot; option to an empty string. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a267c5dab66f5e34a45852cc32f71b97729d1b15" translate="yes" xml:space="preserve">
          <source>A copy of bytes 0 through 47 of this header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfcf4a271894a36753059f74bed2256dff4a758" translate="yes" xml:space="preserve">
          <source>A coverage testing build is used to validate the test suite, to confirm that the test suite provides 100% MC/DC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c5d9a042e6577c2dabc042ff092ff7fee14842" translate="yes" xml:space="preserve">
          <source>A database connection in read-uncommitted mode does not attempt to obtain read-locks before reading from database tables as described above. This can lead to inconsistent query results if another database connection modifies a table while it is being read, but it also means that a read-transaction opened by a connection in read-uncommitted mode can neither block nor be blocked by any other connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2be52de867ed0c8228dad137b9e9be0ede3dc9" translate="yes" xml:space="preserve">
          <source>A database file might contain one or more pages that are not in active use. Unused pages can come about, for example, when information is deleted from the database. Unused pages are stored on the freelist and are reused when additional pages are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d2200c58a122988a36133f11d5ad81150a5964" translate="yes" xml:space="preserve">
          <source>A database handle may only have a single profile script registered at any time. If there is already a script registered when the profile method is invoked, the previous profile script is replaced by the new one. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c56f6c25c0806c71336c6dfe79200c9d74d137" translate="yes" xml:space="preserve">
          <source>A database in SQLite is a single disk file&amp;amp;sup1. Furthermore, the &lt;a href=&quot;fileformat2&quot;&gt;file format&lt;/a&gt; is cross-platform. A database that is created on one machine can be copied and used on a different machine with a different architecture. SQLite databases are portable across 32-bit and 64-bit machines and between &lt;a href=&quot;http://en.wikipedia.org/wiki/Endianness&quot;&gt;big-endian&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Endianness&quot;&gt;little-endian&lt;/a&gt; architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58caf1944b94d1b1b9c822b0c5664121932f85cd" translate="yes" xml:space="preserve">
          <source>A database page number P is mapped into a hash value using the following hash function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3347e26b126664d224486fe7f1e3e439c82acd" translate="yes" xml:space="preserve">
          <source>A database page size of 8192 or 16384 gives the best performance for large BLOB I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103c49f4c460c42c7a0369b1a9d6281b2a84fdfe" translate="yes" xml:space="preserve">
          <source>A datatype to SQLite is any sequence of zero or more names optionally followed by a parenthesized lists of one or two signed integers. Notice in particular that a datatype may be &lt;em&gt;zero&lt;/em&gt; or more names. That means that an empty string is a valid datatype as far as SQLite is concerned. So you can declare tables where the datatype of each column is left unspecified, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de414f6a58ee8730c6b30d4d04397485a33b014d" translate="yes" xml:space="preserve">
          <source>A default build of SQLite, if a &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; statement has no WHERE clause and operates on a table with no triggers, an optimization occurs that causes the DELETE to occur by dropping and recreating the table. Dropping and recreating a table is usually much faster than deleting the table content row by row. This is the &quot;truncate optimization&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2702a604a55a621adb104d691b4fe3d29100cf61" translate="yes" xml:space="preserve">
          <source>A default collation sequence to use with each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547106accc42ee8c3be32b9edfc90679c871cd46" translate="yes" xml:space="preserve">
          <source>A default value or expression for each column in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9bafa0d6a619bf3ec9b0838fb3a083c9a68cbd8" translate="yes" xml:space="preserve">
          <source>A demonstration of how to use a virtual table to implement approximate string matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c07573f063bff6f3b90762e19698056e9e8c100" translate="yes" xml:space="preserve">
          <source>A description of the available auxiliary functions, and more details regarding configuration of the special &quot;rank&quot; column, are &lt;a href=&quot;fts5#_auxiliary_functions_&quot;&gt;available below&lt;/a&gt;. &lt;a href=&quot;fts5#custom_auxiliary_functions&quot;&gt;Custom auxiliary functions&lt;/a&gt; may also be implemented in C and registered with FTS5, just as custom SQL functions may be registered with the SQLite core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c23846cd545b2b63ddda813679cd4a49e68b63" translate="yes" xml:space="preserve">
          <source>A design flaw in the layout of indices required a file format change to correct. This change appeared in version 2.6.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09b00a1870ec37c4a6711c6d9a83ee63caec494" translate="yes" xml:space="preserve">
          <source>A deterministic function always gives the same answer when it has the same inputs. Most built-in SQL functions in SQLite are deterministic. For example, the &lt;a href=&quot;lang_corefunc#abs&quot;&gt;abs(X)&lt;/a&gt; function always returns the same answer as long as its input X is the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d23588be86a8b0f51bcfc6d42620be9c04bdb9" translate="yes" xml:space="preserve">
          <source>A different interface is used to find statistics associated with a single &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bab2383badd353faf6d58c28e00ad5e2dc43f7f" translate="yes" xml:space="preserve">
          <source>A different temporary file is created each time, so that just like as with the special &quot;:memory:&quot; string, two database connections to temporary databases each have their own private database. Temporary databases are automatically deleted when the connection that created them closes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616182c007ad6c0ef9a037faf15b8a4c7b4e27dc" translate="yes" xml:space="preserve">
          <source>A docid (document id), and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa8c1978179e5d6594c307606a0c96c65d178b7" translate="yes" xml:space="preserve">
          <source>A doclist consists of an array of 64-bit signed integers, serialized using the FTS varint format. Each doclist entry is made up of a series of two or more integers, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b611cc962affaff5bc25b34d8cf2a147e0cff8" translate="yes" xml:space="preserve">
          <source>A dot-command cannot occur in the middle of an ordinary SQL statement. In other words, a dot-command cannot occur at a continuation prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3f86822b1bda8e466c4526bffa4f20cb3e5064" translate="yes" xml:space="preserve">
          <source>A dot-command must begin with the &quot;.&quot; at the left margin with no preceding whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9419d21a9cdfce978f5cf3af5bf95604556793ad" translate="yes" xml:space="preserve">
          <source>A federation of programs, perhaps all written in different programming languages, can access the same application file with no compatibility concerns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d364c247d7037a579b6c9cd2b367d98adf71052d" translate="yes" xml:space="preserve">
          <source>A few SQLite extensions benefit from passing pointers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f7d6f4dcc5ba74ac0335fa025ccd8910f0c1e1" translate="yes" xml:space="preserve">
          <source>A few opcodes for &lt;a href=&quot;#sqlite3_file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; are handled directly by the SQLite core and never invoke the sqlite3_io_methods.xFileControl method. The &lt;a href=&quot;#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt; value for the op parameter causes a pointer to the underlying &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; object to be written into the space pointed to by the 4th parameter. The &lt;a href=&quot;#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt; works similarly except that it returns the &lt;a href=&quot;#sqlite3_file&quot;&gt;sqlite3_file&lt;/a&gt; object associated with the journal file instead of the main database. The &lt;a href=&quot;#sqlitefcntlvfspointer&quot;&gt;SQLITE_FCNTL_VFS_POINTER&lt;/a&gt; opcode returns a pointer to the underlying &lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object for the file. The &lt;a href=&quot;#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt; returns the data version counter from the pager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b71d02b16fcc797e9ca6b0c9b9270d384f8e61" translate="yes" xml:space="preserve">
          <source>A few opcodes for &lt;a href=&quot;file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; are handled directly by the SQLite core and never invoke the sqlite3_io_methods.xFileControl method. The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt; value for the op parameter causes a pointer to the underlying &lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt; object to be written into the space pointed to by the 4th parameter. The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt; works similarly except that it returns the &lt;a href=&quot;file&quot;&gt;sqlite3_file&lt;/a&gt; object associated with the journal file instead of the main database. The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntlvfspointer&quot;&gt;SQLITE_FCNTL_VFS_POINTER&lt;/a&gt; opcode returns a pointer to the underlying &lt;a href=&quot;vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object for the file. The &lt;a href=&quot;c_fcntl_begin_atomic_write#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt; returns the data version counter from the pager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a30cb03f77194a1ffe9dcf2f61544ecd6effb5d" translate="yes" xml:space="preserve">
          <source>A file-handle is opened on the database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2d542371ac8e72fa484fee76e990ca0bf35dd8" translate="yes" xml:space="preserve">
          <source>A filename that is not a well-formed URI is interpreted as an ordinary filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925a1b52b051c06afa6e58e50e2b8bb4927090d1" translate="yes" xml:space="preserve">
          <source>A frame is considered valid if and only if the following conditions are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9611de2f1872728925114c844500f9f8ef115f15" translate="yes" xml:space="preserve">
          <source>A frame type - either ROWS, RANGE or GROUPS,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b126bb6dbd1d7edb9b84085983a8045b613274" translate="yes" xml:space="preserve">
          <source>A freeblock is a structure used to identify unallocated space within a b-tree page. Freeblocks are organized as a chain. The first 2 bytes of a freeblock are a big-endian integer which is the offset in the b-tree page of the next freeblock in the chain, or zero if the freeblock is the last on the chain. The third and fourth bytes of each freeblock form a big-endian integer which is the size of the freeblock in bytes, including the 4-byte header. Freeblocks are always connected in order of increasing offset. The second field of the b-tree page header is the offset of the first freeblock, or zero if there are no freeblocks on the page. In a well-formed b-tree page, there will always be at least one cell before the first freeblock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2acc382f3b34dd5d099262b455a40252f22e8680" translate="yes" xml:space="preserve">
          <source>A freeblock requires at least 4 bytes of space. If there is an isolated group of 1, 2, or 3 unused bytes within the cell content area, those bytes comprise a fragment. The total number of bytes in all fragments is stored in the fifth field of the b-tree page header. In a well-formed b-tree page, the total number of bytes in fragments may not exceed 60.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80d94705f8bf7c5e4c97f09c2fe3da9d04e1505" translate="yes" xml:space="preserve">
          <source>A freelist leaf page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3220fe91d800548a519d55ab5c5896e3d8a1361" translate="yes" xml:space="preserve">
          <source>A freelist page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c408c3d929760cbe3bea5989823d3bcbc82cd883" translate="yes" xml:space="preserve">
          <source>A freelist page. The page number should be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a249e10dcc6a39be18d8c2e3b23ef6d5feaebd" translate="yes" xml:space="preserve">
          <source>A freelist trunk page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db4fc71bebbc8176162f7cd595aa13edbeb12ed" translate="yes" xml:space="preserve">
          <source>A freelist trunk page consists of an array of 4-byte big-endian integers. The size of the array is as many integers as will fit in the usable space of a page. The minimum usable space is 480 bytes so the array will always be at least 120 entries in length. The first integer on a freelist trunk page is the page number of the next freelist trunk page in the list or zero if this is the last freelist trunk page. The second integer on a freelist trunk page is the number of leaf page pointers to follow. Call the second integer on a freelist trunk page L. If L is greater than zero then integers with array indexes between 2 and L+1 inclusive contain page numbers for freelist leaf pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f9d805045a05b8c1c21a89d92690feac608128" translate="yes" xml:space="preserve">
          <source>A full disk drive will normally give an &lt;a href=&quot;rescode#full&quot;&gt;SQLITE_FULL&lt;/a&gt; error rather than an SQLITE_IOERR error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd246aeb0987ce268dd63d7c5d7c659921acc423" translate="yes" xml:space="preserve">
          <source>A functionality testing build is used to validate the source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69647f389c03a5fb55f353538995da652df9828c" translate="yes" xml:space="preserve">
          <source>A geopoly table is created as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deba985c96e7599b149dd466acf4a33fd8b7d25a" translate="yes" xml:space="preserve">
          <source>A good rule of thumb is to avoid using SQLite in situations where the same database will be accessed directly (without an intervening application server) and simultaneously from many computers over a network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504276fb27ab49d77f3fa65dc56539df4f20135a" translate="yes" xml:space="preserve">
          <source>A good way to make an archival copy of a database is this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3552536e0c3fc2b1a5c13a249c60fb3e232b20" translate="yes" xml:space="preserve">
          <source>A high-performance full-text search index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fc66c121035cba95cdccd27eb5988b1d320b84" translate="yes" xml:space="preserve">
          <source>A higher-performance full-text search index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bfdc0040ab9af19d73d70ad7d6c87f58f9b24f" translate="yes" xml:space="preserve">
          <source>A host &lt;a href=&quot;lang_expr#varparam&quot;&gt;parameter&lt;/a&gt; is a place-holder in an SQL statement that is filled in using one of the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_XXXX()&lt;/a&gt; interfaces. Many SQL programmers are familiar with using a question mark (&quot;?&quot;) as a host parameter. SQLite also supports named host parameters prefaced by &quot;:&quot;, &quot;$&quot;, or &quot;@&quot; and numbered host parameters of the form &quot;?123&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257267c1113a289e6b9feab4b089bb45cde287f6" translate="yes" xml:space="preserve">
          <source>A host computer with a 32-bit or 64-bit address space. The OS can be Linux, Mac, Windows, *BSD, Solaris, or some other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b6a216d45c25e568110df32be35198581043b2" translate="yes" xml:space="preserve">
          <source>A journal file consists of one or more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29bbea10489e0962b8f547beacaa5c44b5643b7" translate="yes" xml:space="preserve">
          <source>A journal is hot if...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4b3bcb8b3070bf8bd1c4dde82d2f44df71510d" translate="yes" xml:space="preserve">
          <source>A jump is made to P2 if the result set after filtering would be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a1f585c4bb54305bbad30d5d616a96cefe0475" translate="yes" xml:space="preserve">
          <source>A limited form of table-level locking is now also available in SQLite. If each table is stored in a separate database file, those separate files can be attached to the main database (using the ATTACH command) and the combined databases will function as one. But locks will only be acquired on individual files as needed. So if you redefine &quot;database&quot; to mean two or more database files, then it is entirely possible for two processes to be writing to the same database at the same time. To further support this capability, commits of transactions involving two or more ATTACHed database are now atomic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759400fcd5974123ad0b1241cafe4f82c240d273" translate="yes" xml:space="preserve">
          <source>A list of term offsets, one for each occurrence of the term within the document. A term offset indicates the number of tokens (words) that occur before the term in question, not the number of characters or bytes. For example, the term offset of the term &quot;war&quot; in the phrase &quot;Ancestral voices prophesying war!&quot; is 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68d4ff4d7b33cd92deee3174c451fcde6f5c709" translate="yes" xml:space="preserve">
          <source>A list of term-offsets, sorted from smallest to largest. Instead of storing the term-offset value literally, each integer stored is the difference between the current term-offset and the previous one (or zero if the current term-offset is the first), plus 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c5240a715ebac0343aac16762c04ccbb3c2e9c" translate="yes" xml:space="preserve">
          <source>A literal value can also be the token &quot;NULL&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677dc4104adc8eb80a0bd3eedfbb0364028f37cc" translate="yes" xml:space="preserve">
          <source>A literal value represents a constant. Literal values may be integers, floating point numbers, strings, BLOBs, or NULLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec763a0eb37a9be20ccf4fd503223781cee5eb4c" translate="yes" xml:space="preserve">
          <source>A local change may be rebased against multiple remote changes simultaneously. If a single key is modified by multiple remote changesets, they are combined as follows before the local changeset is rebased:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f44fa8f0079eaf328b711da0c194b82f3bfca0" translate="yes" xml:space="preserve">
          <source>A maliciously crafted database might be able to inject SQL by defining new &lt;a href=&quot;lang_createtrigger&quot;&gt;triggers&lt;/a&gt; or &lt;a href=&quot;lang_createview&quot;&gt;views&lt;/a&gt; in the schema that the application does not anticipate. There are multiple defenses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0169e2a34230a953484e9b48ea9bd77dd4f6ea97" translate="yes" xml:space="preserve">
          <source>A master journal is stale if no individual file journals are pointing to it. To figure out if a master journal is stale, we first read the master journal to obtain the names of all of its file journals. Then we check each of those file journals. If any of the file journals named in the master journal exists and points back to the master journal, then the master journal is not stale. If all file journals are either missing or refer to other master journals or no master journal at all, then the master journal we are testing is stale and can be safely deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2661539e5d017b557d9c14e5c75af338d27b4e59" translate="yes" xml:space="preserve">
          <source>A merge has already been started (perhaps by a 'merge' command that specified a negative parameter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279ebae13f861bd71157c08bf29f5b4c651d6c5d" translate="yes" xml:space="preserve">
          <source>A minimal build of SQLite requires just these routines from the standard C library:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c466a87de63404dc0230e1abc285b23bb040a4" translate="yes" xml:space="preserve">
          <source>A minimum setup for compiling and testing SQLite from canonical sources is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3655d2734192b9504cea343051e8b9d73b7c75" translate="yes" xml:space="preserve">
          <source>A more compact format for database files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1330a0c8c8c0bac23fcad77a5abcbf9b765e263a" translate="yes" xml:space="preserve">
          <source>A more efficient approach is to remember the last entry currently displayed and then use a row value comparison in the WHERE clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfada028d3ce37e834b96c227e215c6f74539e9e" translate="yes" xml:space="preserve">
          <source>A multi-column index follows the same pattern as a single-column index; the indexed columns are added in front of the rowid. The only difference is that now multiple columns are added. The left-most column is the primary key used for ordering the rows in the index. The second column is used to break ties in the left-most column. If there were a third column, it would be used to break ties for the first two columns. And so forth for all columns in the index. Because rowid is guaranteed to be unique, every row of the index will be unique even if all of the content columns for two rows are the same. That case does not happen in our sample data, but there is one case (fruit='Orange') where there is a tie on the first column which must be broken by the second column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f562249be7affb427174375ce85f9677d3d8ba0" translate="yes" xml:space="preserve">
          <source>A nearby diagram shows the main components of SQLite and how they interoperate. The text below explains the roles of the various components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089a318d287cfcafbb763115d5d6b053c8d7bc38" translate="yes" xml:space="preserve">
          <source>A new R*Tree index is created as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a48a9b58450b09d0cfb9d4aa090ba17af83a99" translate="yes" xml:space="preserve">
          <source>A new VFS is implemented by subclassing three objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89d2ee009f148a6ac5458e28252dd05648bb979" translate="yes" xml:space="preserve">
          <source>A new algorithm for statements of the form INSERT INTO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9387ece4f279e3ed8f65e6b38d71e87ff67c981e" translate="yes" xml:space="preserve">
          <source>A new flag &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_NOMUTEX&lt;/a&gt; is made available to the &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82571217188a60c8f7271b16be25afd37dc1bf34" translate="yes" xml:space="preserve">
          <source>A new interface has been added to provided additional control over the creation of new database connections: &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt;. The legacy interfaces of &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open()&lt;/a&gt; and &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open16()&lt;/a&gt; continue to be fully supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7504ffc80677e48bad7daae529fd681b4630cb" translate="yes" xml:space="preserve">
          <source>A new union-vtab instance is created as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f615460738794433e991ce2ff6b478badda600" translate="yes" xml:space="preserve">
          <source>A non-NULL text value must be specified for the name column. It is an error if the specified name already exists in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ae7e61487d1800801d4d106af7abaadcf50460" translate="yes" xml:space="preserve">
          <source>A non-root b-tree page. The page number is the parent b-tree page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e201e2c3e74fe126c7287d5626bd1b0950b6b8" translate="yes" xml:space="preserve">
          <source>A null-terminated string containing the text of one or more SQL statements and/or queries to be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fd742955a943f2d8d68ae03590be0ffb9da9fd" translate="yes" xml:space="preserve">
          <source>A page in an overflow chain other than the first page. The page number is the prior page of the overflow chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92232575e7ddb99b286147d87a7eb37c112dd51" translate="yes" xml:space="preserve">
          <source>A page is journalled by adding a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d41f5dca0e121bb84e085c18fb28ea2c138474" translate="yes" xml:space="preserve">
          <source>A parenthesized, comma-separated list of scalar values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef2906548f6946959e71df0c261521f3831b983" translate="yes" xml:space="preserve">
          <source>A partial index definition may include the UNIQUE keyword. If it does, then SQLite requires every entry &lt;em&gt;in the index&lt;/em&gt; to be unique. This provides a mechanism for enforcing uniqueness across some subset of the rows in a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf63cba8a9d42e2054c36a2ad3d1ea049c41b10" translate="yes" xml:space="preserve">
          <source>A partial index is an index over a subset of the rows of a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5173a741f61feaf55620d5f7f757f59051d29a" translate="yes" xml:space="preserve">
          <source>A patchset blob may be used with up to date versions of all sqlite3changeset_xxx API functions except for sqlite3changeset_invert(), which returns SQLITE_CORRUPT if it is passed a patchset. Similarly, attempting to use a patchset blob with old versions of the sqlite3changeset_xxx APIs also provokes an SQLITE_CORRUPT error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65df542e5b2ab6d391d8808bfc9bfd9a42dd1c8" translate="yes" xml:space="preserve">
          <source>A patchset is similar to a changeset. It is slightly more compact than a changeset, but provides more limited conflict detection and resolution options (see the next section for details). The differences between a patchset and a changeset are that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8a1598f2157bb3e660a70a2c1195f71bea8641" translate="yes" xml:space="preserve">
          <source>A payload overflow page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fb2ed4e8bd2a3775c9d2eeb2d4e37e28a73a34" translate="yes" xml:space="preserve">
          <source>A pending lock allows other processes that already have a shared lock to continue reading the database file. But it prevents new shared locks from being established. The idea behind a pending lock is to prevent writer starvation caused by a large pool of readers. There might be dozens, even hundreds, of other processes trying to read the database file. Each process acquires a shared lock before it starts reading, reads what it needs, then releases the shared lock. If, however, there are many different processes all reading from the same database, it might happen that a new process always acquires its shared lock before the previous process releases its shared lock. And so there is never an instant when there are no shared locks on the database file and hence there is never an opportunity for the writer to seize the exclusive lock. A pending lock is designed to prevent that cycle by allowing existing shared locks to proceed but blocking new shared locks from being established. Eventually all shared locks will clear and the pending lock will then be able to escalate into an exclusive lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfdf078a1ad97afe7d10282a6193866f5d046f1b" translate="yes" xml:space="preserve">
          <source>A performance enhancement to the page-cache &quot;truncate&quot; operation reduces &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt; time by dozens of milliseconds on systems with a large &lt;a href=&quot;pragma#pragma_cache_size&quot;&gt;page cache&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3934877796a31e3b44b08445cac9678ddebadf6" translate="yes" xml:space="preserve">
          <source>A phrase matches a document if the document contains at least one sub-sequence of tokens that matches the sequence of tokens that make up the phrase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad9a1c432b5f54ebccf2d84436734289434a755" translate="yes" xml:space="preserve">
          <source>A pile-of-files encourages content to be stored in a few large chunks. In the case of ODP, there are just four XML files that define the layout off all slides in a presentation. An SQLite database allows storing information in a few large chunks, but SQLite is also adept and efficient at storing information in numerous smaller pieces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a8394ec4ac0fe21d190c15e56ba33ddbedef33" translate="yes" xml:space="preserve">
          <source>A pile-of-files format can be read incrementally just like SQLite. But many developers are surprised to learn that SQLite can read and write smaller BLOBs (less than about 100KB in size) from its database faster than those same blobs can be read or written as separate files from the filesystem. (See &lt;a href=&quot;fasterthanfs&quot;&gt;35% Faster Than The Filesystem&lt;/a&gt; and &lt;a href=&quot;intern-v-extern-blob&quot;&gt;Internal Versus External BLOBs&lt;/a&gt; for further information.) There is overhead associated with operating a relational database engine, however one should not assume that direct file I/O is faster than SQLite database I/O, as often it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6baa78bd5928c61d383f2bef11579e65db7d21d3" translate="yes" xml:space="preserve">
          <source>A pile-of-files format can be viewed as a key/value database. A key/value database is better than no database at all. But without transactions or indices or a high-level query language or a proper schema, it is much harder and more error prone to use a key/value database than a relational database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52eaf71372365322d7054ef987ab3062057c54cd" translate="yes" xml:space="preserve">
          <source>A pointer map page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b58d729b79685a69c83a9e7290179a156089320" translate="yes" xml:space="preserve">
          <source>A pointer that is forwarded to become the first argument to the callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7862edef6bec5bc1b7b5c7480359b6ac1ea3fe42" translate="yes" xml:space="preserve">
          <source>A pointer to a callback function which is invoked once for each row in the result of a query. This argument may be NULL, in which case no callbacks will ever be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a5146ef90ea88c9791d18d9b2f0b91bd10d7bf" translate="yes" xml:space="preserve">
          <source>A pointer to an error string. Error messages are written to space obtained from malloc() and the error string is made to point to the malloced space. The calling function is responsible for freeing this space when it has finished with it. This argument may be NULL, in which case error messages are not reported back to the calling function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b85ea2771637242c212f75c32dcf4f1c99ff7a4" translate="yes" xml:space="preserve">
          <source>A pointer to the opaque sqlite3_api_routines structure is passed as the third parameter to entry points of &lt;a href=&quot;../loadext&quot;&gt;loadable extensions&lt;/a&gt;. This structure must be typedefed in order to work around compiler warnings on some platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d07e71fb26035e20fdffa2af9f1c6c108edfd9" translate="yes" xml:space="preserve">
          <source>A pointer to the opaque sqlite3_api_routines structure is passed as the third parameter to entry points of &lt;a href=&quot;loadext&quot;&gt;loadable extensions&lt;/a&gt;. This structure must be typedefed in order to work around compiler warnings on some platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec59a85cc0f126d0446beb84b628cc1897023e1d" translate="yes" xml:space="preserve">
          <source>A pointer to the sqlite structure obtained from a prior call to &lt;b&gt;sqlite_open&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83e616cb2fe97cb47d6b546b005133e60c0010f" translate="yes" xml:space="preserve">
          <source>A pointer to the virtual machine is stored in a pointer which is passed in as the 4th parameter. Space to hold the virtual machine is dynamically allocated. To avoid a memory leak, the calling function must invoke &lt;b&gt;sqlite_finalize&lt;/b&gt; on the virtual machine after it has finished with it. The 4th parameter may be set to NULL if an error is encountered during compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4123ec647ffbea69c18e776fd8ad4e58f6d7bab" translate="yes" xml:space="preserve">
          <source>A polygon is defined by its vertexes. Each vertex is a JSON array of two numeric values which are the X and Y coordinates of the vertex. A polygon is a JSON array of at least four of these vertexes, and hence is an array of arrays. The first and last vertex in the array must be the same. The polygon follows the right-hand rule: When tracing a line from one vertex to the next, the area to the right of the line is outside of the polygon and the area to the left is inside the polygon. In other words, the net rotation of the vertexes is counter-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83be320cc6f7531e133a8fe75643df0ab1bd341d" translate="yes" xml:space="preserve">
          <source>A pragma can take either zero or one argument. The argument is may be either in parentheses or it may be separated from the pragma name by an equal sign. The two syntaxes yield identical results. In many pragmas, the argument is a boolean. The boolean can be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1439b9f8c7100215a693725c95a80144f9686663" translate="yes" xml:space="preserve">
          <source>A pragma may have an optional schema-name before the pragma name. The schema-name is the name of an &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt;-ed database or &quot;main&quot; or &quot;temp&quot; for the main and the TEMP databases. If the optional schema name is omitted, &quot;main&quot; is assumed. In some pragmas, the schema name is meaningless and is simply ignored. In the documentation below, pragmas for which the schema name is meaningful are shown with a &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c8a11b948e6795af6a6ceb139ca3117a5cbdfe" translate="yes" xml:space="preserve">
          <source>A prefix index is a separate index that records the location of all instances of prefix tokens of a certain length in characters used to speed up queries for prefix tokens. For example, optimizing a query for prefix token &quot;abc*&quot; requires a prefix index of three-character prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b552ccb7eeae1cbc2221248d3b23583ca4696c9f" translate="yes" xml:space="preserve">
          <source>A prepared statement can have zero or more open cursors. Each cursor is identified by a small integer, which is usually the P1 parameter to the opcode that uses the cursor. There can be multiple cursors open on the same index or table. All cursors operate independently, even cursors pointing to the same indices or tables. The only way for the virtual machine to interact with a database file is through a cursor. Instructions in the virtual machine can create a new cursor (ex: &lt;a href=&quot;opcode#OpenRead&quot;&gt;OpenRead&lt;/a&gt; or &lt;a href=&quot;opcode#OpenWrite&quot;&gt;OpenWrite&lt;/a&gt;), read data from a cursor (&lt;a href=&quot;opcode#Column&quot;&gt;Column&lt;/a&gt;), advance the cursor to the next entry in the table (ex: &lt;a href=&quot;opcode#Next&quot;&gt;Next&lt;/a&gt; or &lt;a href=&quot;opcode#Prev&quot;&gt;Prev&lt;/a&gt;), and so forth. All cursors are automatically closed when the prepared statement is &lt;a href=&quot;c3ref/reset&quot;&gt;reset&lt;/a&gt; or &lt;a href=&quot;c3ref/finalize&quot;&gt;finalized&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5a41eea2027bd1c81329dfc78cb1162a2b5985" translate="yes" xml:space="preserve">
          <source>A pseudo-table created by this opcode is used to hold a single row output from the sorter so that the row can be decomposed into individual columns using the &lt;a href=&quot;opcode#Column&quot;&gt;Column&lt;/a&gt; opcode. The &lt;a href=&quot;opcode#Column&quot;&gt;Column&lt;/a&gt; opcode is the only cursor opcode that works with a pseudo-table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfba3e1d0f3aba9e4771931b3f9186e0cfec67a" translate="yes" xml:space="preserve">
          <source>A query plan is represented as a tree. In raw form, as returned by &lt;a href=&quot;c3ref/step&quot;&gt;sqlite3_step()&lt;/a&gt;, each node of the tree consists of four fields: An integer node id, an integer parent id, an auxiliary integer field that is not currently used, and a description of the node. The entire tree is therefore a table with four columns and zero or more rows. The &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; will usually intercept this table and renders it as an ASCII-art graph for more convenient viewing. To defeat the shells automatic graph rendering, simply include extra white space in between any of the &quot;EXPLAIN&quot;, &quot;QUERY&quot;, and/or &quot;PLAN&quot; keywords and the output will appear in a (less helpful) tabular format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987ff31ff0ec375872e214a21f32922e046b143e" translate="yes" xml:space="preserve">
          <source>A query sees all changes that are completed on the same database connection prior to the start of the query, regardless of whether or not those changes have been committed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d5213dcc2c8331ce561f8806234820515ddce9" translate="yes" xml:space="preserve">
          <source>A quick enumeration of the changes in SQLite version 3.5.0 is provided here. Subsequent sections will describe these changes in more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1276c60969bd19155a8ae4ef6b0cf70c5a9044f" translate="yes" xml:space="preserve">
          <source>A random nonce for the checksum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bb741ebe526223297eaf9b1bcbc9817350f52d" translate="yes" xml:space="preserve">
          <source>A read transaction is used for reading only. A write transaction allows both reading and writing. A read transaction is started by a SELECT statement, and a write transaction is started by statements like CREATE, DELETE, DROP, INSERT, or UPDATE (collectively &quot;write statements&quot;). If a write statement occurs while a read transaction is active, then the read transaction is upgraded to write transaction if possible. If some other database connection has already modified the database or is already in the process of modifying the database, then upgrading to a write transaction is not possible and the write statement will fail with &lt;a href=&quot;rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e78c57da493fb53e9af08b8cbcf76787c9e57d" translate="yes" xml:space="preserve">
          <source>A read-only connection that is rebuilding its private heap-memory WAL-index does not hold this lock. (It cannot, since read-only connections are not allowed to hold any exclusive locks.) This lock is only held when rebuilding the global shared WAL-index contained in the memory-mapped SHM file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbb00ca2a5b578f8c701ce299cc1bdaf023483d" translate="yes" xml:space="preserve">
          <source>A record contains a header and a body, in that order. The header begins with a single varint which determines the total number of bytes in the header. The varint value is the size of the header in bytes including the size varint itself. Following the size varint are one or more additional varints, one per column. These additional varints are called &quot;serial type&quot; numbers and determine the datatype of each column, according to the following chart:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da56351fba5f53698fda54910e0c1f0207d7d3fd" translate="yes" xml:space="preserve">
          <source>A record might have fewer values than the number of columns in the corresponding table. This can happen, for example, after an &lt;a href=&quot;lang_altertable&quot;&gt;ALTER TABLE ... ADD COLUMN&lt;/a&gt; SQL statement has increased the number of columns in the table schema without modifying preexisting rows in the table. Missing values at the end of the record are filled in using the &lt;a href=&quot;lang_createtable#dfltval&quot;&gt;default value&lt;/a&gt; for the corresponding columns defined in the table schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5c8169a30113a9ed52f687099166107e7b2523" translate="yes" xml:space="preserve">
          <source>A recursive common table expression can be used to write a query that walks a tree or graph. A recursive common table expression has the same basic syntax as an ordinary common table expression, but with the following additional features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176317ddd357b266ebf755cfa3f6bc813ff788c9" translate="yes" xml:space="preserve">
          <source>A reference to &lt;b&gt;the associated &lt;i&gt;database connection&lt;/i&gt;&lt;/b&gt;. Each entry in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e876211f841b1a5a0841faa539bd0f497224e5b7" translate="yes" xml:space="preserve">
          <source>A register can also be &quot;Undefined&quot; meaning that it holds no value at all. Undefined is different from NULL. Depending on compile-time options, an attempt to read an undefined register will usually cause a run-time error. If the code generator (&lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt;) ever generates a &lt;a href=&quot;c3ref/stmt&quot;&gt;prepared statement&lt;/a&gt; that reads an Undefined register, that is a bug in the code generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a489dc4470d6b0b8e6fff51584f1f564a2e53cf" translate="yes" xml:space="preserve">
          <source>A result table is an array of pointers to zero-terminated UTF-8 strings. There are (N+1)*M elements in the array. The first M pointers point to zero-terminated strings that contain the names of the columns. The remaining entries all point to query results. NULL values result in NULL pointers. All other values are in their UTF-8 zero-terminated string representation as returned by &lt;a href=&quot;#sqlite3_column_blob&quot;&gt;sqlite3_column_text()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5699300dbfc9bd124afc697b07363b109eb2de77" translate="yes" xml:space="preserve">
          <source>A result table is an array of pointers to zero-terminated UTF-8 strings. There are (N+1)*M elements in the array. The first M pointers point to zero-terminated strings that contain the names of the columns. The remaining entries all point to query results. NULL values result in NULL pointers. All other values are in their UTF-8 zero-terminated string representation as returned by &lt;a href=&quot;column_blob&quot;&gt;sqlite3_column_text()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7b119b5d4d81d6f920e05ce966ec036ccb516b" translate="yes" xml:space="preserve">
          <source>A result table might consist of one or more memory allocations. It is not safe to pass a result table directly to &lt;a href=&quot;#sqlite3_free&quot;&gt;sqlite3_free()&lt;/a&gt;. A result table should be deallocated using &lt;a href=&quot;#sqlite3_free_table&quot;&gt;sqlite3_free_table()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f7610b427ba3a5db84c1d578ca567b66e4baef" translate="yes" xml:space="preserve">
          <source>A result table might consist of one or more memory allocations. It is not safe to pass a result table directly to &lt;a href=&quot;free&quot;&gt;sqlite3_free()&lt;/a&gt;. A result table should be deallocated using &lt;a href=&quot;free_table&quot;&gt;sqlite3_free_table()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8be34ce66bc36d8a3f910227d25c082cf34040" translate="yes" xml:space="preserve">
          <source>A return of &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_BUSY&lt;/a&gt; or &lt;a href=&quot;#SQLITE_ABORT&quot;&gt;SQLITE_LOCKED&lt;/a&gt; from sqlite3_backup_step() is not a permanent error and does not affect the return value of sqlite3_backup_finish().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ccc60d216c44abcc74c0cabe1a2c3a2883ce18" translate="yes" xml:space="preserve">
          <source>A return of &lt;a href=&quot;../rescode#busy&quot;&gt;SQLITE_BUSY&lt;/a&gt; or &lt;a href=&quot;../rescode#locked&quot;&gt;SQLITE_LOCKED&lt;/a&gt; from sqlite3_backup_step() is not a permanent error and does not affect the return value of sqlite3_backup_finish().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79663f33ba3ea21585830534cfcf02f738ed2ade" translate="yes" xml:space="preserve">
          <source>A rich library of &lt;a href=&quot;lang_corefunc&quot;&gt;standard SQL functions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5984037d329bed4e182dea84884ebbc957606423" translate="yes" xml:space="preserve">
          <source>A rollback journal header is padded with zeros out to the size of a single sector (as defined by the sector size integer at offset 20). The header is in a sector by itself so that if a power loss occurs while writing the sector, information that follows the header will be (hopefully) undamaged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da825d373397b8ff214c898f7100fa92209fe481" translate="yes" xml:space="preserve">
          <source>A rollback journal is a &quot;hot&quot; journal if all of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93117b5d93400d4aff3d9fc5e17e1f968466bd65" translate="yes" xml:space="preserve">
          <source>A rollback journal is a temporary file used to implement atomic commit and rollback capabilities in SQLite. (For a detailed discussion of how this works, see the separate document titled &lt;a href=&quot;atomiccommit&quot;&gt;Atomic Commit In SQLite&lt;/a&gt;.) The rollback journal is always located in the same directory as the database file and has the same name as the database file except with the 8 characters &quot;&lt;b&gt;-journal&lt;/b&gt;&quot; appended. The rollback journal is usually created when a transaction is first started and is usually deleted when a transaction commits or rolls back. The rollback journal file is essential for implementing the atomic commit and rollback capabilities of SQLite. Without a rollback journal, SQLite would be unable to rollback an incomplete transaction, and if a crash or power loss occurred in the middle of a transaction the entire database would likely go corrupt without a rollback journal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f61ea74ecbbdde9b91ead35df3827efa60778b" translate="yes" xml:space="preserve">
          <source>A rollback journal is only considered to be valid if it exists and contains a valid header. Hence a transaction can be committed in one of three ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbab471bf381ac51a7c14fe650ef7023a98cf57" translate="yes" xml:space="preserve">
          <source>A rollback journal is said to be &lt;a href=&quot;fileformat2#hotjrnl&quot;&gt;hot&lt;/a&gt; if it needs to be rolled back in order to restore the integrity of its database. A hot journal is created when a process is in the middle of a database update and a program or operating system crash or power failure prevents the update from completing. Hot journals are an exception condition. Hot journals exist to recover from crashes and power failures. If everything is working correctly (that is, if there are no crashes or power failures) you will never get a hot journal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52857503386ca8187f9c97fd4ff05410c36c8f77" translate="yes" xml:space="preserve">
          <source>A running SELECT statement that lacks a FROM clause (or any other statement that never reads or writes from any database file) will not prevent a read transaction from closing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb07d260e238ef8be6278670ca8159f485f6d07" translate="yes" xml:space="preserve">
          <source>A separate document, &lt;a href=&quot;c3ref/intro&quot;&gt;The SQLite C/C++ Interface&lt;/a&gt;, provides detailed specifications for all C/C++ APIs for SQLite. Once the reader understands the basic principles of operation for SQLite, &lt;a href=&quot;c3ref/intro&quot;&gt;that document&lt;/a&gt; should be used as a reference guide. This article is intended as introduction only and is neither a complete nor authoritative reference for the SQLite API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa6b5660e49902a9d6721951328be3eefc3b18e" translate="yes" xml:space="preserve">
          <source>A sequence number assigned to each index for internal tracking purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac44a9b2150727d7d1aea70b509f77cbf75e147" translate="yes" xml:space="preserve">
          <source>A series of tests were run to measure the relative performance of SQLite 2.7.6, PostgreSQL 7.1.3, and MySQL 3.23.41. The following are general conclusions drawn from these experiments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4faee13d5e4cc6ba30a1f6541864d69478d0a60" translate="yes" xml:space="preserve">
          <source>A serious bug fixed on Windows. Windows users should upgrade. No impact to Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275829adb94b5831ffff4998c0fd3b6cdf2a2059" translate="yes" xml:space="preserve">
          <source>A serious problem with the manual imposter table approach described above is that after adding the new &quot;t2&quot; entry to the &quot;sqlite_master&quot; table, the database file will technically be corrupt. Both the &quot;t1bc&quot; index and the &quot;t2&quot; table will point to the same b-tree. This will not cause any immediate problems, though one should avoid running &lt;a href=&quot;lang_vacuum&quot;&gt;VACUUM&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dc320cdb9816a2a39a9f3943b5295b82ce63f3" translate="yes" xml:space="preserve">
          <source>A session object (type sqlite3_session*) is created by making a call to the &lt;a href=&quot;session/sqlite3session_create&quot;&gt;sqlite3session_create()&lt;/a&gt; API function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc199170ebe2ff874f6db2f5e7dced1a879c2ec" translate="yes" xml:space="preserve">
          <source>A set of SQL constraints for each table. SQLite supports UNIQUE, NOT NULL, CHECK and FOREIGN KEY constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ec162401bfb188342d12868912e1becc54935f" translate="yes" xml:space="preserve">
          <source>A signed 64-bit integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e9fa36fa007a2f469e4a4760e755754b6f4660" translate="yes" xml:space="preserve">
          <source>A simple example of a shim is the &quot;vfstrace&quot; VFS. This is a VFS (implemented in the &lt;a href=&quot;http://www.sqlite.org/src/doc/trunk/src/test_vfstrace.c&quot;&gt;test_vfstrace.c&lt;/a&gt; source file) that writes a message associated with each VFS method call into a log file, then passes control off to another VFS to do the actual work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7006cbe04f6d24543c2da75c91c78320fed7444e" translate="yes" xml:space="preserve">
          <source>A single CREATE VIRTUAL TABLE statement may contain any number of SQL parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62311c4f8d538cb3c9b6fb7e004b99ac7cc9aab4" translate="yes" xml:space="preserve">
          <source>A single WAL file can be reused multiple times. In other words, the WAL can fill up with frames and then be checkpointed and then new frames can overwrite the old ones. A WAL always grows from beginning toward the end. Checksums and counters attached to each frame are used to determine which frames within the WAL are valid and which are leftovers from prior checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8785683b4ed7102093caaeccc3a5196c51a5907f" translate="yes" xml:space="preserve">
          <source>A single changeset may contain changes that apply to more than one database table. For each table that the changeset includes at least one change for, it also encodes the following data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608ce0bf9e63bfc85403ac0271b130acd58c64d6" translate="yes" xml:space="preserve">
          <source>A single database handle may have at most a single write-ahead log callback registered at one time. Calling &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; replaces any previously registered write-ahead log callback. Note that the &lt;a href=&quot;#sqlite3_wal_autocheckpoint&quot;&gt;sqlite3_wal_autocheckpoint()&lt;/a&gt; interface and the &lt;a href=&quot;pragma#pragma_wal_autocheckpoint&quot;&gt;wal_autocheckpoint pragma&lt;/a&gt; both invoke &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; and will overwrite any prior &lt;a href=&quot;#sqlite3_wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89206c073889a1c1170a0ebb7406a8fb98a4806a" translate="yes" xml:space="preserve">
          <source>A single database handle may have at most a single write-ahead log callback registered at one time. Calling &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; replaces any previously registered write-ahead log callback. Note that the &lt;a href=&quot;wal_autocheckpoint&quot;&gt;sqlite3_wal_autocheckpoint()&lt;/a&gt; interface and the &lt;a href=&quot;../pragma#pragma_wal_autocheckpoint&quot;&gt;wal_autocheckpoint pragma&lt;/a&gt; both invoke &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; and will overwrite any prior &lt;a href=&quot;wal_hook&quot;&gt;sqlite3_wal_hook()&lt;/a&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae717677f5ddab7e1611867390ac460d23c6cd8" translate="yes" xml:space="preserve">
          <source>A single function declaration should contain no more than one of the following: &lt;a href=&quot;compile#apicall&quot;&gt;SQLITE_APICALL&lt;/a&gt;, &lt;a href=&quot;compile#callback&quot;&gt;SQLITE_CALLBACK&lt;/a&gt;, &lt;a href=&quot;compile#cdecl&quot;&gt;SQLITE_CDECL&lt;/a&gt;, or &lt;a href=&quot;compile#syscall&quot;&gt;SQLITE_SYSCALL&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26df4d33430b6b34c4d91859f0ec1b63873b0b8" translate="yes" xml:space="preserve">
          <source>A single phrase or NEAR group may be restricted to matching text within a specified column of the FTS table by prefixing it with the column name followed by a colon character. Or to a set of columns by prefixing it with a whitespace separated list of column names enclosed in parenthesis (&quot;curly brackets&quot;) followed by a colon character. Column names may be specified using either of the two forms described for strings above. Unlike strings that are part of phrases, column names are not passed to the tokenizer module. Column names are case-insensitive in the usual way for SQLite column names - upper/lower case equivalence is understood for ASCII-range characters only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957ff29feb802c055a16b8a1e4c52a503d6ee8db" translate="yes" xml:space="preserve">
          <source>A single session object monitors changes made to a single database (i.e. &quot;main&quot;, &quot;temp&quot; or an attached database) via a single sqlite3* database handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1707c93eb5e5ee6c5b850e9748ead9054742daf0" translate="yes" xml:space="preserve">
          <source>A small patch to version 3.6.16 to fix &lt;a href=&quot;http://www.sqlite.org/src/info/6b00e0a34c&quot;&gt;the OP_If bug&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37282f44ff8f219293b2945eedcfa47898899c4" translate="yes" xml:space="preserve">
          <source>A smaller and faster implementation of text to floating-point conversion subroutine: sqlite3AtoF().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e409edf566363994702e2aef11edf00e8d07606" translate="yes" xml:space="preserve">
          <source>A special SQL function RAISE() may be used within a trigger-program, with the following syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a6631c65b5f7328388f2b5ccd5678cd79d4fa1" translate="yes" xml:space="preserve">
          <source>A stale master journal is a master journal that is no longer being used for anything. There is no requirement that stale master journals be deleted. The only reason for doing so is to free up disk space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ebc788dee352b396a0729f45e60a8dfd65ce42" translate="yes" xml:space="preserve">
          <source>A standard SQLite build includes a small amount of logic associated with &lt;a href=&quot;c3ref/test_control&quot;&gt;sqlite3_test_control()&lt;/a&gt; to exercise parts of the SQLite core that are otherwise difficult to validate. This compile-time option omits that extra testing logic. This compile-time option was called &quot;SQLITE_OMIT_BUILTIN_TEST&quot; prior to SQLite version 3.16.0 (2017-01-02). The name was changed to better describe the implications of using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a7a7e55f6d9bd17dba85ad11c8944fbcdc4459" translate="yes" xml:space="preserve">
          <source>A starting frame boundary,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fb198dfcb0d142d377ce0e169267e9a1cdfccb" translate="yes" xml:space="preserve">
          <source>A statement journal file is used to rollback partial results of a single statement within a larger transaction. For example, suppose an UPDATE statement will attempt to modify 100 rows in the database. But after modifying the first 50 rows, the UPDATE hits a constraint violation which should block the entire statement. The statement journal is used to undo the first 50 row changes so that the database is restored to the state it was in at the start of the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940c3a5de694a1d82ab455c32b9b6bed30de5212" translate="yes" xml:space="preserve">
          <source>A statement journal is only created for an UPDATE or INSERT statement that might change multiple rows of a database and which might hit a constraint or a RAISE exception within a trigger and thus need to undo partial results. If the UPDATE or INSERT is not contained within BEGIN...COMMIT and if there are no other active statements on the same database connection then no statement journal is created since the ordinary rollback journal can be used instead. The statement journal is also omitted if an alternative &lt;a href=&quot;lang_conflict&quot;&gt;conflict resolution algorithm&lt;/a&gt; is used. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0a69ee154fd724c3f7e2b66c07110e679818fe" translate="yes" xml:space="preserve">
          <source>A statement such as the above can be run immediately prior to invoking &lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close()&lt;/a&gt; to confirm that all prepared statements have been &lt;a href=&quot;c3ref/finalize&quot;&gt;finalized&lt;/a&gt; and to help identify and track down prepared statements that have &quot;leaked&quot; and missed finalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e2d7eae4ab34999aac0e06cf630caa26eca256" translate="yes" xml:space="preserve">
          <source>A storage class is more general than a datatype. The INTEGER storage class, for example, includes 6 different integer datatypes of different lengths. This makes a difference on disk. But as soon as INTEGER values are read off of disk and into memory for processing, they are converted to the most general datatype (8-byte signed integer). And so for the most part, &quot;storage class&quot; is indistinguishable from &quot;datatype&quot; and the two terms can be used interchangeably.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7675d21b606912c9ad81d09f8bd030b6fb973bc2" translate="yes" xml:space="preserve">
          <source>A straightforward implementation of a spelling corrector would be to compare the search term against every word in the vocabulary and select the 20 with the lowest scores. However, there will typically be hundreds of thousands or millions of words in the vocabulary, and so this approach is not fast enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf0250c67cab7be0dc1ee87f425a759227d1fab" translate="yes" xml:space="preserve">
          <source>A string constant is formed by enclosing the string in single quotes ('). A single quote within the string can be encoded by putting two single quotes in a row - as in Pascal. C-style escapes using the backslash character are not supported because they are not standard SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833d0cdbb5e0f11e62e7535fa2b560860c4b3b41" translate="yes" xml:space="preserve">
          <source>A string might look like a floating-point literal with a decimal point and/or exponent notation but as long as the value can be expressed as an integer, the NUMERIC affinity will convert it into an integer. Hence, the string '3.0e+5' is stored in a column with NUMERIC affinity as the integer 300000, not as the floating point value 300000.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8190afbd8c6bbd11bbd6c14f28a0172cbb480b3c" translate="yes" xml:space="preserve">
          <source>A subquery expression with two or more result columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5635ec05c69c3ce96a3233f42069b4904d399309" translate="yes" xml:space="preserve">
          <source>A subquery on the right-hand side of IN operator must often be materialized. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0661a4bdbca6636faba7e3ce330659e6cc7c97" translate="yes" xml:space="preserve">
          <source>A subquery that returns a single column is a scalar subquery and can be used most anywhere. A subquery that returns two or more columns is a &lt;a href=&quot;rowvalue&quot;&gt;row value&lt;/a&gt; subquery and can only be used as the operand of a comparison operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513c8fcc36f3dbb3fe1ba2919acd7ef31b0580f6" translate="yes" xml:space="preserve">
          <source>A successful invocation of this method will cause *pRowid to be filled with the &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; of row that the &lt;a href=&quot;c3ref/vtab_cursor&quot;&gt;virtual table cursor&lt;/a&gt; pCur is currently pointing at. This method returns &lt;a href=&quot;rescode#ok&quot;&gt;SQLITE_OK&lt;/a&gt; on success. It returns an appropriate &lt;a href=&quot;rescode&quot;&gt;error code&lt;/a&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a876cbac258b205fceef1496fbc66fdbd28a83e7" translate="yes" xml:space="preserve">
          <source>A swarmvtab table has the same schema as each of its component tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f9af565c085a8964740fe3fa13a54013369f70" translate="yes" xml:space="preserve">
          <source>A swarmvtab virtual table is created as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b6e57942158b2ce08f2d6299decb29e664e48f" translate="yes" xml:space="preserve">
          <source>A table b-tree interior page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb5ce26b9e5292874c4f103c523b7155ab1d3d5" translate="yes" xml:space="preserve">
          <source>A table b-tree leaf page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e18698afc8eb8fd55a13d0d4739a4898ecead4e" translate="yes" xml:space="preserve">
          <source>A table created using CREATE TABLE AS has no PRIMARY KEY and no constraints of any kind. The default value of each column is NULL. The default collation sequence for each column of the new table is BINARY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2722d24833adf5b38fd57107e3991ba2e3c139c1" translate="yes" xml:space="preserve">
          <source>A table of insertion, deletion, and substitution costs can be provided by the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d688ea9d1619e762c6e53a152855aec30c051d2" translate="yes" xml:space="preserve">
          <source>A table with the name &quot;sqlite_sequence&quot; that is used to keep track of the maximum historical &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; for a table using &lt;a href=&quot;autoinc&quot;&gt;AUTOINCREMENT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57714ccd156bf9e3f87fe308936736e98e591aa" translate="yes" xml:space="preserve">
          <source>A table-valued function, which provides read-only access to existing archives, either from the file-system or in-memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fc019c02a91fed82d92a06336ce9b17ea402c2" translate="yes" xml:space="preserve">
          <source>A template loadable extension contains the following three elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceeadc33088d54343486462a0c9aba5dbbc0128" translate="yes" xml:space="preserve">
          <source>A template virtual table implementation useful as a starting point for developers who want to write their own virtual tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab32d076f372c6b13570208a924360640dda14f" translate="yes" xml:space="preserve">
          <source>A temporary index is always used to hold the values of the right-hand side of an IN operator when that right-hand side is a list of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee92b6976c5d4721278b029adeafc2db008e6cdc" translate="yes" xml:space="preserve">
          <source>A term is a contiguous sequence of eligible characters, where eligible characters are all alphanumeric characters and all characters with Unicode codepoint values greater than or equal to 128. All other characters are discarded when splitting a document into terms. Their only contribution is to separate adjacent terms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd3e37ef65b6b87adc2cbe96c6048ce8be9f761" translate="yes" xml:space="preserve">
          <source>A text editor of the user's choice supporting UTF-8 text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d6801cd3f12d6898833bf9ca6bab5539cfae7b" translate="yes" xml:space="preserve">
          <source>A time string can be in any of the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d86f49b9040272a60a55ad61e8ad5131c63f59c" translate="yes" xml:space="preserve">
          <source>A torn page occurs when a database page is larger than a disk sector, the database page is written to disk, but a power loss occurs prior to all sectors of the database page being written. Then, upon recovery, part of the database page will have the old content while some other parts of the page will have the new content. Some database engines assume that page writes are atomic and hence a torn page is an unrecoverable error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321b99cb3ca22320bc4d4754f57c85325a5439b8" translate="yes" xml:space="preserve">
          <source>A trace callback has four arguments: xCallback(T,C,P,X). The T argument is one of the integer type codes above. The C argument is a copy of the context pointer passed in as the fourth argument to &lt;a href=&quot;#sqlite3_trace_v2&quot;&gt;sqlite3_trace_v2()&lt;/a&gt;. The P and X arguments are pointers whose meanings depend on T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f3aaaba3c5cbd27990154339c07e3ae8d754b2" translate="yes" xml:space="preserve">
          <source>A trace callback has four arguments: xCallback(T,C,P,X). The T argument is one of the integer type codes above. The C argument is a copy of the context pointer passed in as the fourth argument to &lt;a href=&quot;trace_v2&quot;&gt;sqlite3_trace_v2()&lt;/a&gt;. The P and X arguments are pointers whose meanings depend on T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bfcc86c34516e1fd4709998e44b1f12ab7abe6" translate="yes" xml:space="preserve">
          <source>A trace callback is invoked with four arguments: callback(T,C,P,X). The T argument is one of the &lt;a href=&quot;#SQLITE_TRACE&quot;&gt;SQLITE_TRACE&lt;/a&gt; constants to indicate why the callback was invoked. The C argument is a copy of the context pointer. The P and X arguments are pointers whose meanings depend on T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3391a0e081f93a34b14f66af9af68c43e3c9b43e" translate="yes" xml:space="preserve">
          <source>A trace callback is invoked with four arguments: callback(T,C,P,X). The T argument is one of the &lt;a href=&quot;c_trace&quot;&gt;SQLITE_TRACE&lt;/a&gt; constants to indicate why the callback was invoked. The C argument is a copy of the context pointer. The P and X arguments are pointers whose meanings depend on T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f406be63849f147005f5bd90bb0cfb01b00b5d0" translate="yes" xml:space="preserve">
          <source>A transaction must be started before executing this opcode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d659782eaca92197beb5705e0198423f0973c8e4" translate="yes" xml:space="preserve">
          <source>A transactional database is one in which all changes and queries appear to be Atomic, Consistent, Isolated, and Durable (&lt;a href=&quot;http://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;). SQLite implements &lt;a href=&quot;http://en.wikipedia.org/wiki/Serializability&quot;&gt;serializable&lt;/a&gt; transactions that are atomic, consistent, isolated, and durable, even if the transaction is interrupted by a program crash, an operating system crash, or a power failure to the computer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762f7ff34044b36794c45c18c95e9030f7e31400" translate="yes" xml:space="preserve">
          <source>A triangle has three vertexes, but the GeoJSON description of the triangle has 4 vertexes because the first and last vertex are duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b340a77213cb4d10ec115c1281733a8d75cde1" translate="yes" xml:space="preserve">
          <source>A trigger may be specified to fire whenever a &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt;, &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt;, or &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; of a particular database table occurs, or whenever an &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; occurs on on one or more specified columns of a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2260f1e1f77326af7731e7d8239b68e8a9f11e" translate="yes" xml:space="preserve">
          <source>A trigger normally exists in the same database as the table named after the &quot;ON&quot; keyword in the CREATE TRIGGER statement. Except, it is possible to create a TEMP TRIGGER on a table in another database. Such a trigger will only fire when changes are made to the target table by the application that defined the trigger. Other applications that modify the database will not be able to see the TEMP trigger and hence cannot run the trigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae92c55b82f470eeeb4bba0b8d4309fbfff3525" translate="yes" xml:space="preserve">
          <source>A unique constraint is satisfied if and only if no two rows in a table have the same non-null values in the unique columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae94a52f226bc47de3ee1540f2d8d90e50fc05b" translate="yes" xml:space="preserve">
          <source>A unique constraint is satisfied if and only if no two rows in a table have the same values and have non-null values in the unique columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabcb6d549c13ce12ef42eaf48b0d41d8c3dfc2d" translate="yes" xml:space="preserve">
          <source>A unique constraint is satisfied if and only if no two rows in a table have the same values in the subset of unique columns that are not null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952f4e6659d04ec5f193202b5fddffcc0087004e" translate="yes" xml:space="preserve">
          <source>A unique integer number associated with each vocabulary item in the table. This can be used as a foreign key on other tables in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe70411c725bc0721714f08714a5a3f518456c0" translate="yes" xml:space="preserve">
          <source>A valid rollback journal begins with a header in the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9323ac27e089e4d34d2bcc6e9f8a53b215a87e94" translate="yes" xml:space="preserve">
          <source>A value of 10 (0x0a) means the page is a leaf index b-tree page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e1a106666132bc7aa0c524ac57c51e9c1fa6f1" translate="yes" xml:space="preserve">
          <source>A value of 13 (0x0d) means the page is a leaf table b-tree page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f1a1f1a6aa95dae3ca3a5407b50cea28bcd1e7" translate="yes" xml:space="preserve">
          <source>A value of 2 (0x02) means the page is an interior index b-tree page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a906019a3e0d60d30d9b9306736264578b9862" translate="yes" xml:space="preserve">
          <source>A value of 5 (0x05) means the page is an interior table b-tree page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98aefbc577505a102a4bdbd9d45da156baa1724a" translate="yes" xml:space="preserve">
          <source>A value with storage class NULL is considered less than any other value (including another value with storage class NULL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61966bda21e838b4a385c022331516a90f448e33" translate="yes" xml:space="preserve">
          <source>A variable-length integer or &quot;varint&quot; is a static Huffman encoding of 64-bit twos-complement integers that uses less space for small positive values. A varint is between 1 and 9 bytes in length. The varint consists of either zero or more bytes which have the high-order bit set followed by a single byte with the high-order bit clear, or nine bytes, whichever is shorter. The lower seven bits of each of the first eight bytes and all 8 bits of the ninth byte are used to reconstruct the 64-bit twos-complement integer. Varints are big-endian: bits taken from the earlier byte of the varint are more significant than bits taken from the later bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d2c41c22785c16d3ddf35c480bf3c0b5dd588a" translate="yes" xml:space="preserve">
          <source>A varint which is the integer key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fee174cbc89434778acfe5a3e125ad5320c50ab" translate="yes" xml:space="preserve">
          <source>A varint which is the integer key, a.k.a. &quot;&lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt;&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcfb4fd379871a1c7b556422d5224ce7bad5762" translate="yes" xml:space="preserve">
          <source>A varint which is the total number of bytes of key payload, including any overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d513baeec19bb3a29eb1d68e0c4ec488b8735e" translate="yes" xml:space="preserve">
          <source>A varint which is the total number of bytes of payload, including any overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da04ae498ca0dc39858789333261d6656f640502" translate="yes" xml:space="preserve">
          <source>A version control system (VCS) will typically store the evolving versions of a project as a directed acyclic graph (DAG). Call each version of the project a &quot;checkin&quot;. A single checkin can have zero or more parents. Most checkins (except the first) have a single parent, but in the case of a merge, a checkin might have two or three or more parents. A schema to keep track of checkins and the order in which they occur might look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881d501220206ee1c616806563f13fecfb51dbf6" translate="yes" xml:space="preserve">
          <source>A virtual filesystem (VFS) is an &lt;a href=&quot;#sqlite3_vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object that SQLite uses to interact with the underlying operating system. Most SQLite builds come with a single default VFS that is appropriate for the host computer. New VFSes can be registered and existing VFSes can be unregistered. The following interfaces are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1900bfd100646a0b3b036033184bd610a0f59cc1" translate="yes" xml:space="preserve">
          <source>A virtual filesystem (VFS) is an &lt;a href=&quot;vfs&quot;&gt;sqlite3_vfs&lt;/a&gt; object that SQLite uses to interact with the underlying operating system. Most SQLite builds come with a single default VFS that is appropriate for the host computer. New VFSes can be registered and existing VFSes can be unregistered. The following interfaces are provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b11082572e398dba7e2062d48e57376c3d93de" translate="yes" xml:space="preserve">
          <source>A virtual table implementation must be able to support an arbitrary number of simultaneously open cursors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cb3efe7eb44df0ba67e5ea661e95ce4f842882" translate="yes" xml:space="preserve">
          <source>A virtual table is an object that is registered with an open SQLite &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;. From the perspective of an SQL statement, the virtual table object looks like any other table or view. But behind the scenes, queries and updates on a virtual table invoke callback methods of the virtual table object instead of reading and writing on the database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52af07e40184e006612d2e3054e64de5f1d7c832" translate="yes" xml:space="preserve">
          <source>A virtual table is created using a &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a893a3a1c0e0b537926a2530a012fcadd49c1a89" translate="yes" xml:space="preserve">
          <source>A virtual table is destroyed using the ordinary &lt;a href=&quot;lang_droptable&quot;&gt;DROP TABLE&lt;/a&gt; statement. There is no DROP VIRTUAL TABLE statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847101905322620243ed31c601c382674aa4a14b" translate="yes" xml:space="preserve">
          <source>A virtual table is eponymous if its &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; method is the exact same function as the &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; method, or if the &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; method is NULL. The &lt;a href=&quot;vtab#xcreate&quot;&gt;xCreate&lt;/a&gt; method is called when a virtual table is first created using the &lt;a href=&quot;lang_createvtab&quot;&gt;CREATE VIRTUAL TABLE&lt;/a&gt; statement. The &lt;a href=&quot;vtab#xconnect&quot;&gt;xConnect&lt;/a&gt; method is invoked whenever a database connection attaches to or reparses a schema. When these two methods are the same, that indicates that the virtual table has no persistent state that needs to be created and destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353f0b8410ad856bf5ebf8e7164ab137690e2e5f" translate="yes" xml:space="preserve">
          <source>A virtual table might represent an in-memory data structures. Or it might represent a view of data on disk that is not in the SQLite format. Or the application might compute the content of the virtual table on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f90d299472ce309a8e439b029daf5f8f8923b0" translate="yes" xml:space="preserve">
          <source>A virtual table module is created by filling in a persistent instance of this structure and passing a pointer to that instance to &lt;a href=&quot;#sqlite3_create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; or &lt;a href=&quot;#sqlite3_create_module&quot;&gt;sqlite3_create_module_v2()&lt;/a&gt;. The registration remains valid until it is replaced by a different module or until the &lt;a href=&quot;#sqlite3&quot;&gt;database connection&lt;/a&gt; closes. The content of this structure must not change while it is registered with any database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38351d643190ff2e0c5028a024cfec96116efe36" translate="yes" xml:space="preserve">
          <source>A virtual table module is created by filling in a persistent instance of this structure and passing a pointer to that instance to &lt;a href=&quot;create_module&quot;&gt;sqlite3_create_module()&lt;/a&gt; or &lt;a href=&quot;create_module&quot;&gt;sqlite3_create_module_v2()&lt;/a&gt;. The registration remains valid until it is replaced by a different module or until the &lt;a href=&quot;sqlite3&quot;&gt;database connection&lt;/a&gt; closes. The content of this structure must not change while it is registered with any database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ab9a8c810266d9131b7dc3abfde1084e5a3827" translate="yes" xml:space="preserve">
          <source>A virtual table returns all integers between 1 and 4294967295.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9550c8ab6f8d693fb2f5399ce989472075011998" translate="yes" xml:space="preserve">
          <source>A virtual table that implements a spelling correction engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d81c8273172f3de70ea8fa615e0e6a43a86ed85" translate="yes" xml:space="preserve">
          <source>A virtual table that prints diagnostic information on stdout when its key methods are invoked. Intended for interactive analysis and debugging of virtual table interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e16ff1f72c104772393373b9711e80e90eaa372" translate="yes" xml:space="preserve">
          <source>A virtual table that represents a comma-separated-value or CSV file (&lt;a href=&quot;https://www.ietf.org/rfc/rfc4180.txt&quot;&gt;RFC 4180&lt;/a&gt;) as a read-only table so that it can be used as part of a larger query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf39798b9f95adc35fd6772c7cbfb7068e01df6" translate="yes" xml:space="preserve">
          <source>A virtual table, which provides read and write access to archives stored in the file-system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0516d8f39a8906e53dce6da52e21c642d9370cf8" translate="yes" xml:space="preserve">
          <source>A well-written C program will typically contain some defensive conditionals which in practice are always true or always false. This leads to a programming dilemma: Does one remove defensive code in order to obtain 100% branch coverage?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f05d1eb22dd9a9ee6d24e61fd43de0311fb625" translate="yes" xml:space="preserve">
          <source>A window function is an SQL function where the input values are taken from a &quot;window&quot; of one or more rows in the results set of a SELECT statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e1d6e7e3fb96b500c945c549b86f711da8262a" translate="yes" xml:space="preserve">
          <source>A working &lt;a href=&quot;https://zlib.net&quot;&gt;zlib compression library&lt;/a&gt; is needed in order for the &lt;a href=&quot;cli#sqlar&quot;&gt;.archive command&lt;/a&gt; to operate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ba0d7954a4428935b75868db48e0376c9b0d38" translate="yes" xml:space="preserve">
          <source>A wrapped pile-of-files format is a compromise between a full custom file format and a pure pile-of-files format. A wrapped pile-of-files format is not an opaque blob in the same sense as a custom format, since the component parts can still be accessed using any common ZIP archiver, but the format is not quite as accessible as a pure pile-of-files format because one does still need the ZIP archiver, and one cannot normally use command-line tools like &quot;find&quot; on the file hierarchy without first un-zipping it. On the other hand, a wrapped pile-of-files format does preserve the document metaphor by putting all content into a single disk file. And because it is compressed, the wrapped pile-of-files format tends to be more compact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cb831fafd0869c861cfe72928b427adff2aa0c" translate="yes" xml:space="preserve">
          <source>A write-ahead log or WAL file is used in place of a rollback journal when SQLite is operating in &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt;. As with the rollback journal, the purpose of the WAL file is to implement atomic commit and rollback. The WAL file is always located in the same directory as the database file and has the same name as the database file except with the 4 characters &quot;&lt;b&gt;-wal&lt;/b&gt;&quot; appended. The WAL file is created when the first connection to the database is opened and is normally removed when the last connection to the database closes. However, if the last connection does not shutdown cleanly, the WAL file will remain in the filesystem and will be automatically cleaned up the next time the database is opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606ec6e9bd8a8ff2ad14e5fade3f264471e82251" translate="yes" xml:space="preserve">
          <source>AAA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd57cfd9437b3c9c1c3ce7cb0fb7a7b8366940a" translate="yes" xml:space="preserve">
          <source>ABORT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1f44b95b4f44c4b87ebcf57cafc6780d0a90b6" translate="yes" xml:space="preserve">
          <source>ACID transactions using &lt;a href=&quot;lang_transaction&quot;&gt;BEGIN&lt;/a&gt;, &lt;a href=&quot;lang_transaction&quot;&gt;COMMIT&lt;/a&gt;, and &lt;a href=&quot;lang_transaction&quot;&gt;ROLLBACK&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9f1cf5c4d33807129af3dcb41af0a491f4cda7" translate="yes" xml:space="preserve">
          <source>ACTION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9460492306d4b99cd31848c3a99a26a7e978d96" translate="yes" xml:space="preserve">
          <source>ADD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5600b2ed97ece803d7f4350448a1f4928404a3" translate="yes" xml:space="preserve">
          <source>AFL has proven remarkably adept at finding arcane bugs in SQLite. Most of the findings have been assert() statements where the conditional was false under obscure circumstances. But AFL has also found a fair number of crash bugs in SQLite, and even a few cases where SQLite computed incorrect results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63edc193e8cfcf6757dd5596309d5a764f92ace2" translate="yes" xml:space="preserve">
          <source>AFP locking style. This locking style is used for network file systems that use the AFP (Apple Filing Protocol) protocol. Locks are obtained by calling the library function _AFPFSSetLock().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aedfd73052985c2f41211e623add2af653060807" translate="yes" xml:space="preserve">
          <source>AFTER</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b42874e3cd20771d93096ec5ce36307a1f2ba14" translate="yes" xml:space="preserve">
          <source>ALL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e69e31990a7343ff088d4c32eea14ef655df385" translate="yes" xml:space="preserve">
          <source>ALTER</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdc3e679260efe34d4720e54eb086a76a15f687" translate="yes" xml:space="preserve">
          <source>ALTER TABLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1fbac7d45ba56f622f7752b89525d62ceed128" translate="yes" xml:space="preserve">
          <source>ALTER TABLE ADD COLUMN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094aafb4c8ae4eba399881e4d9b84c158bb3ff0a" translate="yes" xml:space="preserve">
          <source>ALTER TABLE RENAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b6c520c273175237f91ec319fe56f82283ec27" translate="yes" xml:space="preserve">
          <source>ALTER TABLE RENAME COLUMN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d0d0176fb0a7f55f27682b7d026c807b2a0515" translate="yes" xml:space="preserve">
          <source>ALTER TABLE uses double-quotes instead of single-quotes for quoting filenames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca598e81cf4b7eae20f25366c64a9099ce76a39" translate="yes" xml:space="preserve">
          <source>ALWAYS(X)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4e17353a4bd1a4f2d336a59d39168308ceecbc" translate="yes" xml:space="preserve">
          <source>ALWAYS(X) and NEVER(X) functions are used in places where we always want the test to occur even though the developers believe the value of X is always true or false. For example, the sqlite3BtreeCloseCursor() routine shown must remove the closing cursor from a linked list of all cursors. We know that the cursor is on the list, so that the loop must terminate by the &quot;break&quot; statement, but it is convenient to use the ALWAYS(X) test at &lt;a href=&quot;https://sqlite.org/src/artifact/18a53540aa3?ln=4371&quot;&gt;https://sqlite.org/src/artifact/18a53540aa3?ln=4371&lt;/a&gt; to prevent running off the end of the linked list in case there is an error in some other part of the code that has corrupted the linked list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caadd138e6e8d1596eda80c0f51c856600e89f65" translate="yes" xml:space="preserve">
          <source>ANALYZE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f934cb8cab6c1b3af0d4f2fdd824eabafb6bf4" translate="yes" xml:space="preserve">
          <source>AND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a397ebb8cf61587cd521ec01e5c6b51276f91a4" translate="yes" xml:space="preserve">
          <source>ANSI Common Lisp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00bb3f3b7c7b8815b6dcf237dd16aab9744eca8" translate="yes" xml:space="preserve">
          <source>AS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaffec78401451424652480dc382235348ce1b66" translate="yes" xml:space="preserve">
          <source>ASC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166240989b0ab1b8695abcaef83da0a4918a2fb9" translate="yes" xml:space="preserve">
          <source>ASCII rendering of the float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b519334032a98f7c2594012c3b3e7e13014c677" translate="yes" xml:space="preserve">
          <source>ASCII rendering of the integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5ebc115bc75bb938a3838103c3725bf90efb01" translate="yes" xml:space="preserve">
          <source>ATTACH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ca34fea5ce451e0bc66a6eadd28cb502c9e81b" translate="yes" xml:space="preserve">
          <source>ATTACH DATABASE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac676774c3a8c1551764b1d83b7d37f669fb5a0" translate="yes" xml:space="preserve">
          <source>ATTACH and DETACH as well as some other operations cause existing prepared statements to expire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a7e17a976b425553bc577b3148824d2a1f1a44" translate="yes" xml:space="preserve">
          <source>AUTOINCREMENT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c70ef0cc48907c519166dce4b32226739e45e67" translate="yes" xml:space="preserve">
          <source>AUTOINCREMENT keyword supported on INTEGER PRIMARY KEY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bb2a7951c7bb2c965f22c9a57e2ce25974df9a" translate="yes" xml:space="preserve">
          <source>Abbreviations are applied in the multitest.tcl output so that each th3make invocation will fit on a single 80-column output line. The initial &quot;th3make&quot; verb is omitted. &quot;~&quot; is shorthand for &quot;-DSQLITE_&quot; and &quot;++&quot; is stands for &quot;-DSQLITE_ENABLE&quot;. Hence, multitest.tcl output line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa097a59aa23d1ea05fcdf2e722330d9e25e4b14" translate="yes" xml:space="preserve">
          <source>Abortable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87b7bc256c5e187e5504df77ba712267f376ec4" translate="yes" xml:space="preserve">
          <source>About OpenDocument And OpenDocument Presentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32e574abd9aafdacaa9afd3405d7877d90e54cb" translate="yes" xml:space="preserve">
          <source>Accept &quot;Z&quot; as the zulu timezone at the end of date strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce752666b5e444987daa4b6966df37d55bde025" translate="yes" xml:space="preserve">
          <source>Accept column names in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0213d4fd54eabb051f311ba8f2befe3b9c69a5c" translate="yes" xml:space="preserve">
          <source>Access is coordinated in WAL mode using both the legacy DELETE-mode locks controlled by the xLock and xUnlock methods of the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object and the WAL locks controlled by the xShmLock method of the &lt;a href=&quot;c3ref/io_methods&quot;&gt;sqlite3_io_methods&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d3ef128ce8adb3705e036419e075fdb4f48299" translate="yes" xml:space="preserve">
          <source>Access the filesystem of the host computer as if it were a database table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61521a7d6f538076f32bc9879102eb6d96388ec7" translate="yes" xml:space="preserve">
          <source>Access to records via &lt;a href=&quot;lang_createtable#rowid&quot;&gt;rowid&lt;/a&gt; is highly optimized and very fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ba54a3a4413a8377f766e7307b65f628b16b98" translate="yes" xml:space="preserve">
          <source>Accessible Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17f44cb688221742030703d589c802bf0664eb2" translate="yes" xml:space="preserve">
          <source>Accommodation can be made for words that are not spelled as they sound by making additional entries into the virtual table for the same word, but adding an alternative spelling in the &quot;soundslike&quot; column. For example, the canonical entry for &quot;psalm&quot; would be this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6705b13fdc28369e54f6bdd712ca9a4db4cbf219" translate="yes" xml:space="preserve">
          <source>According to &lt;a href=&quot;http://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt;, a URI consists of a scheme, an authority, a path, a query string, and a fragment. The scheme is always required. One of either the authority or the path is also always required. The query string and fragment are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b6d5d4d823df2e184aec7120d805247860b8ea" translate="yes" xml:space="preserve">
          <source>According to the SQL standard, PRIMARY KEY should always imply NOT NULL. Unfortunately, due to a bug in some early versions, this is not the case in SQLite. Unless the column is an &lt;a href=&quot;lang_createtable#rowid&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; or the table is a &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; table or the column is declared NOT NULL, SQLite allows NULL values in a PRIMARY KEY column. SQLite could be fixed to conform to the standard, but doing so might break legacy applications. Hence, it has been decided to merely document the fact that SQLite allowing NULLs in most PRIMARY KEY columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dec6852ffb8757da75544af2803b809f2b130fe" translate="yes" xml:space="preserve">
          <source>Acquire a PENDING lock then an EXCLUSIVE lock on the database file. (Note: Do not acquire a RESERVED lock because that would make other processes think the journal was no longer hot.) If we fail to acquire these locks it means another process is already trying to do the rollback. In that case, drop all locks, close the database, and return SQLITE_BUSY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb030a7cb15f50d9dc25d4f04078043f2675ff3" translate="yes" xml:space="preserve">
          <source>Activate schema editing using &lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema=ON&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c78b30e5c862affd42bb5f1c596df83d2545ece" translate="yes" xml:space="preserve">
          <source>Actually, SQLite will easily do 50,000 or more &lt;a href=&quot;lang_insert&quot;&gt;INSERT&lt;/a&gt; statements per second on an average desktop computer. But it will only do a few dozen transactions per second. Transaction speed is limited by the rotational speed of your disk drive. A transaction normally requires two complete rotations of the disk platter, which on a 7200RPM disk drive limits you to about 60 transactions per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc81cc5fb5822da9569ed8c4f8843257c8f59e9" translate="yes" xml:space="preserve">
          <source>Actually, if one is only concerned with atomic and consistent writes and is willing to forego durable writes, the sync operation does not need to wait until the content is completely stored on persistent media. Instead, the sync operation can be thought of as an I/O barrier. As long as all writes that occur before the sync are completed before any write that happens after the sync, no database corruption will occur. If sync is operating as an I/O barrier and not as a true sync, then a power failure or system crash might cause one or more previously committed transactions to roll back (in violation of the &quot;durable&quot; property of &quot;ACID&quot;) but the database will at least continue to be consistent, and that is what most people care about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac6e880abe35cd3b7a1b0834fe47d4337bfddaa" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusreprepare&quot;&gt;SQLITE_STMTSTATUS_REPREPARE&lt;/a&gt;, &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusrun&quot;&gt;SQLITE_STMTSTATUS_RUN&lt;/a&gt;, and &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusmemused&quot;&gt;SQLITE_STMTSTATUS_MEMUSED&lt;/a&gt; options for the &lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cbb6e0f1775750062ac5669e49e04ab20b20ce" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;fts3#fts4&quot;&gt;full text search&lt;/a&gt; capabilities to the slide deck, or across multiple slide decks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfeff2912792716526d37688fba56051d490d1d" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;rescode#readonly_dbmoved&quot;&gt;SQLITE_READONLY_DBMOVED&lt;/a&gt; error code, returned at the beginning of a transaction, to indicate that the underlying database file has been renamed or moved out from under SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3f88960217978a5bdd7bc25245b711a532a875" translate="yes" xml:space="preserve">
          <source>Add A Changeset To A Changegroup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c66f22d5376c90e1654bc1561e3076b1f2090a2" translate="yes" xml:space="preserve">
          <source>Add C-language APIs for discovering SQL keywords used by SQLite: &lt;a href=&quot;c3ref/keyword_check&quot;&gt;sqlite3_keyword_count()&lt;/a&gt;, &lt;a href=&quot;c3ref/keyword_check&quot;&gt;sqlite3_keyword_name()&lt;/a&gt;, and &lt;a href=&quot;c3ref/keyword_check&quot;&gt;sqlite3_keyword_check()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ffcfc767739ad0ab5f4bd4c91e85118f99542a" translate="yes" xml:space="preserve">
          <source>Add C-language APIs for dynamic strings based on the &lt;a href=&quot;c3ref/str&quot;&gt;sqlite3_str&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5a3264f3bad4a3d08e2dbdc79dc6adf56d9043" translate="yes" xml:space="preserve">
          <source>Add Content To A Dynamic String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d839bba6e835d3e16ff5554d03f6b92e3f024d0" translate="yes" xml:space="preserve">
          <source>Add FD_CLOEXEC to all open files under Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45653642fbaec798956daf72ef08f996b3b84141" translate="yes" xml:space="preserve">
          <source>Add VxWorks-7 as an officially supported and tested platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51c9c34fae46cbf2d267f197a36b3b0082c2414" translate="yes" xml:space="preserve">
          <source>Add a &quot;fragmentation&quot; measurement in the output of sqlite3_analyzer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233e69a92bb5e64e50fa57ffccc06dceae5fcbce" translate="yes" xml:space="preserve">
          <source>Add a &lt;a href=&quot;http://www.sqlite.org/src/fdiff?sbs=1&amp;amp;v1=7d539cedb1c&amp;amp;v2=ebad891b7494d&amp;amp;smhdr&quot;&gt;one-character fix&lt;/a&gt; for a problem that might cause incorrect query results on a query that mixes DISTINCT, GROUP BY in a subquery, and ORDER BY. &lt;a href=&quot;http://www.sqlite.org/src/info/98825a79ce1456863&quot;&gt;Ticket 98825a79ce14&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fef40390b6db6660e8fd5ac547942832b3f403b" translate="yes" xml:space="preserve">
          <source>Add a few #ifdef and build script changes to address compilation issues that appeared after the 3.9.0 release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30713a4bbbb832f4d4a12dd5d80665712406baac" translate="yes" xml:space="preserve">
          <source>Add a limit counter to the query planner to prevent excessive &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare()&lt;/a&gt; times for certain pathological SQL inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8f1d1e0ae5e1fa1781dadcf39fcd78b4b595c9" translate="yes" xml:space="preserve">
          <source>Add a makefile target &quot;sqlite3.c&quot; that builds an amalgamation containing the core SQLite library C code in a single file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad83f8f8177f2cca17785adb28404967ca258c75" translate="yes" xml:space="preserve">
          <source>Add a new test harness called &quot;mptester&quot; used to verify correct operation when multiple processes are using the same database file at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e847129cbafc1b300962a09db16bffecab4a4530" translate="yes" xml:space="preserve">
          <source>Add a new type of fts5vocab virtual table - &quot;instance&quot; - that provides direct access to an FTS5 full-text index at the lowest possible level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb097c7808e448486c05ee42c0ad6699287c273" translate="yes" xml:space="preserve">
          <source>Add a numeric version number to the sqlite3.h include file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192cfdedd0a31a6c0e19a0d0ffbfa19825b53d8b" translate="yes" xml:space="preserve">
          <source>Add a zero terminator if needed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f1497ef21ab12913bab71ba40d0af254e81913" translate="yes" xml:space="preserve">
          <source>Add additional forward compatibility to the future version 3.2 database file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a75e7708f6493171875bbdcb71d6c0d0c35512" translate="yes" xml:space="preserve">
          <source>Add all changes within the changeset (or patchset) in buffer pData (size nData bytes) to the changegroup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53df8d5802795502e64b884c78d43fbcd180d6bf" translate="yes" xml:space="preserve">
          <source>Add an extension loading entry point routine that looks like something the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f1bd5a0f02484338a165c19358793d065e8df6" translate="yes" xml:space="preserve">
          <source>Add demonstration code showing how to build a VFS for a raw mass storage without a filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074e15d829469130ecedfd553fe1780886ad13ec" translate="yes" xml:space="preserve">
          <source>Add extension functions &lt;a href=&quot;cli#fileio&quot;&gt;readfile(X) and writefile(X,Y)&lt;/a&gt; (using code copy/pasted from fileio.c in the previous bullet) to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5609b29ef4b019538ab2911fb3b91dc194584696" translate="yes" xml:space="preserve">
          <source>Add files to existing archive &lt;em&gt;if&lt;/em&gt; they have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e66dc568f4c182e96e2de9065612a0db049a1a8" translate="yes" xml:space="preserve">
          <source>Add files to existing archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbd82da92201959c1e073134cea4dbf8415586f" translate="yes" xml:space="preserve">
          <source>Add forward compatibility to the future version 3.2 database file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1bef805d2eee9b43a065117a80304d349f0efa" translate="yes" xml:space="preserve">
          <source>Add functions prototypes for the database encryption API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee62379e8314b790802298bb169ed3d7eef9f2d4" translate="yes" xml:space="preserve">
          <source>Add interfaces sqlite3_quota_ferror() and sqlite3_quota_file_available() to the test_quota.c module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9994f198ea8554c8d135ebfa9e7a42a508d9f76" translate="yes" xml:space="preserve">
          <source>Add new &lt;a href=&quot;bindptr&quot;&gt;pointer passing interfaces&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6207d3440089bac343c8fc43288997a2214b79" translate="yes" xml:space="preserve">
          <source>Add option support for LIMIT and ORDER BY clauses on &lt;a href=&quot;lang_delete&quot;&gt;DELETE&lt;/a&gt; and &lt;a href=&quot;lang_update&quot;&gt;UPDATE&lt;/a&gt; statements. Only works if SQLite is compiled with &lt;a href=&quot;compile#enable_update_delete_limit&quot;&gt;SQLITE_ENABLE_UPDATE_DELETE_LIMIT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbdccfa6f84dcf86953bb91270d5a08c92376ba" translate="yes" xml:space="preserve">
          <source>Add options &quot;--expanded&quot;, &quot;--normalized&quot;, &quot;--plain&quot;, &quot;--profile&quot;, &quot;--row&quot;, &quot;--stmt&quot;, and &quot;--close&quot; to the &quot;.trace&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbca09144fd7e3e8b43bc8c2d286fd40deac6d2" translate="yes" xml:space="preserve">
          <source>Add options &lt;b&gt;-encoding&lt;/b&gt; and &lt;b&gt;-tcl-uses-utf&lt;/b&gt; to the &lt;b&gt;sqlite&lt;/b&gt; TCL command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d573825baf33d38c179e029681eca20a46ccd519" translate="yes" xml:space="preserve">
          <source>Add pluggable tokenizers and &lt;a href=&quot;http://www.icu-project.org/&quot;&gt;ICU&lt;/a&gt; tokenization support to FTS2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c6bdab5b3258b6277e55104bb87d93b720f14a" translate="yes" xml:space="preserve">
          <source>Add support for &quot;.open --hexdb&quot;. The &quot;&lt;a href=&quot;https://sqlite.org/src/doc/trunk/tool/dbtotxt.md&quot;&gt;dbtotxt&lt;/a&gt;&quot; utility program used to generate the text for the &quot;hexdb&quot; is added to the source tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0763ade3c8a449006c413b6f49449ce7b3a928a" translate="yes" xml:space="preserve">
          <source>Add support for &quot;&lt;a href=&quot;windowfunctions#exprrange&quot;&gt;&amp;lt;expr&amp;gt; PRECEDING&lt;/a&gt;&quot; and &quot;&lt;a href=&quot;windowfunctions#exprrange&quot;&gt;&amp;lt;expr&amp;gt; FOLLOWING&lt;/a&gt;&quot; boundaries in RANGE &lt;a href=&quot;windowfunctions#framespec&quot;&gt;frames&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92f21bcec77d71c0f65f3070792505ed0c70690" translate="yes" xml:space="preserve">
          <source>Add support for &quot;PRAGMA page_size&quot; to adjust the page size of the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3c5f5d30415f9f1977e35ba188ec9b5fcd474e" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;mmap&quot;&gt;memory-mapped I/O&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4c8688bed6db9be32019244a2d807910dea0cc" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;partialindex&quot;&gt;partial indexes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b2de4466aa197bc12dce31206322740e3db16d" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;rtree#auxcol&quot;&gt;auxiliary columns in r-tree tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90c29b7cfc3c62f6507d98b86aed5242ee68ae7" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;uri&quot;&gt;URI filenames&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af696b60eb69d945c8a46227c312eb8878086caa" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;windowfunctions&quot;&gt;window functions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136f3b0eed5bac09b5f3815f7575bda175da3514" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;windowfunctions#grouptype&quot;&gt;GROUPS frames&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66dce38847e4f4f6cc41e4cccbb39be56c45c40" translate="yes" xml:space="preserve">
          <source>Add support for &lt;a href=&quot;windowfunctions#wchaining&quot;&gt;window chaining&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212edd25833b5883700b116710f87eea867169b2" translate="yes" xml:space="preserve">
          <source>Add support for DEFERRED, IMMEDIATE, and EXCLUSIVE transactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb939adf84fb0194534bbaf8a41088037bb5c1e" translate="yes" xml:space="preserve">
          <source>Add support for INSERT OR REPLACE, INSERT OR IGNORE, and UPDATE OR REPLACE in the &lt;a href=&quot;zipfile&quot;&gt;Zipfile virtual table&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2330e77a6f10374d78e1306109d17dffa46e862" translate="yes" xml:space="preserve">
          <source>Add support for PostgreSQL-style &lt;a href=&quot;lang_upsert&quot;&gt;UPSERT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890cc871d57b4e2f53773580ef56c71b18a22739" translate="yes" xml:space="preserve">
          <source>Add support for coverage testing of VDBE programs using the &lt;a href=&quot;c3ref/c_testctrl_always&quot;&gt;SQLITE_TESTCTRL_VDBE_COVERAGE&lt;/a&gt; verb of &lt;a href=&quot;c3ref/test_control&quot;&gt;sqlite3_test_control()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6c363a6bf564dc52386b7db08ec41552cf1d89" translate="yes" xml:space="preserve">
          <source>Add support for handling &lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;, &lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt; and &lt;a href=&quot;rtree&quot;&gt;rtree&lt;/a&gt; virtual tables. &lt;a href=&quot;#vtab&quot;&gt;See below&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a526c3a38229774d8ba86548def1a8d12a36b235" translate="yes" xml:space="preserve">
          <source>Add support for renaming columns within a table using ALTER TABLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d659c9c8cb6c1f04393b0fc5e63bbdac64002cf9" translate="yes" xml:space="preserve">
          <source>Add support for tab-completion using the &lt;a href=&quot;completion&quot;&gt;COMPLETION extension&lt;/a&gt;, for both readline and linenoise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4eee573107dab889c4b93bbd22bffbdf1483817" translate="yes" xml:space="preserve">
          <source>Add support for the &quot;--maxsize N&quot; option on &quot;.open --deserialize&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f5d3e263c4687cf09a721220bb511aa4a69c6f" translate="yes" xml:space="preserve">
          <source>Add support for the &lt;a href=&quot;lang_aggfunc#aggfilter&quot;&gt;FILTER clause on aggregate functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f217130627272aa13b670d0e6f0d5167655ce0bd" translate="yes" xml:space="preserve">
          <source>Add support for the &lt;a href=&quot;lang_select#nullslast&quot;&gt;NULLS FIRST&lt;/a&gt; and &lt;a href=&quot;lang_select#nullslast&quot;&gt;NULLS LAST&lt;/a&gt; syntax in &lt;a href=&quot;lang_select#orderby&quot;&gt;ORDER BY&lt;/a&gt; clauses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4007f3ce6829066fa4409e2ecd136e62637d894" translate="yes" xml:space="preserve">
          <source>Add support for the full SQL-92 join syntax and LEFT OUTER JOINs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2eb33317dae4a033cc092362d492fb572cccd4" translate="yes" xml:space="preserve">
          <source>Add support for wildcard parameters of the form: &quot;?nnn&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb80b8d534ca7c36dc1e214c6909a01fde00f37" translate="yes" xml:space="preserve">
          <source>Add support the &lt;a href=&quot;windowfunctions#wexcls&quot;&gt;EXCLUDE clause&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab8baa6625378dcd2fbc2b48fe42102792d59fe" translate="yes" xml:space="preserve">
          <source>Add tclsqlite.c to the libsqlite.a library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936423dc9b571e197d4ed47a549d3e24bf5f5c1f" translate="yes" xml:space="preserve">
          <source>Add tests to make sure that tclsqlite was compiled using Tcl header files and libraries that match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0200d4b2125e37622440b4e128b278c449eb8c" translate="yes" xml:space="preserve">
          <source>Add the &quot;%token_class&quot; directive to &lt;a href=&quot;lemon&quot;&gt;Lemon parser generator&lt;/a&gt; and use it to simplify the grammar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283b2638c2b05ae208073cb37d46fd5320238943" translate="yes" xml:space="preserve">
          <source>Add the &quot;--async&quot; option to the &quot;.backup&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e8b7b2093500ea36f5f180a7347d1d5a53d8fe" translate="yes" xml:space="preserve">
          <source>Add the &quot;--memtrace&quot; command-line option, to show all memory allocations and deallocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216e54fa647db35fda70c92921d3229237ed92dd" translate="yes" xml:space="preserve">
          <source>Add the &quot;.binary&quot; and &quot;.limits&quot; commands to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8da8fe6a9987104191ff2baa0e3404f2a667db" translate="yes" xml:space="preserve">
          <source>Add the &quot;.cd&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d55280d1b7b3a8bbfa8326a3e6f14a48e7308e" translate="yes" xml:space="preserve">
          <source>Add the &quot;.clone&quot; and &quot;.save&quot; commands to the command-line shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d25cbe44023d988e7e9d81da8b1c5eafbc6826" translate="yes" xml:space="preserve">
          <source>Add the &quot;.eqp trace&quot; option on builds with SQLITE_DEBUG, to enable bytecode program listing with indentation and &lt;a href=&quot;pragma#pragma_vdbe_trace&quot;&gt;PRAGMA vdbe_trace&lt;/a&gt; all in one step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97816312767ca4a2c31df9a27f1fb491af457876" translate="yes" xml:space="preserve">
          <source>Add the &quot;.filectrl&quot; command useful for testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762e62184ff88d2ac7f6d5e9106bb08dbc9e2cb4" translate="yes" xml:space="preserve">
          <source>Add the &quot;.import&quot; command to the command-line shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc49dc138146b590b8cff67298e595fca2d6f169" translate="yes" xml:space="preserve">
          <source>Add the &quot;.progress&quot; command for accessing the &lt;a href=&quot;c3ref/progress_handler&quot;&gt;sqlite3_progress_handler()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c0e14ee7666efcfedda1a8139570d6579e1c44" translate="yes" xml:space="preserve">
          <source>Add the &quot;.recover&quot; command which tries to recover as much content as possible from a corrupt database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8a4b92340d9f7a1f000bec88f280625487d118" translate="yes" xml:space="preserve">
          <source>Add the &quot;.system&quot; and &quot;.once&quot; commands to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88db3041288101d122dcba112957a35b89342c78" translate="yes" xml:space="preserve">
          <source>Add the &quot;.testcase&quot; and &quot;.check&quot; &lt;a href=&quot;cli#dotcmd&quot;&gt;dot-commands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80eb0002e6ca30dbe7265165c28f78bf3c05f869" translate="yes" xml:space="preserve">
          <source>Add the &quot;.wheretrace&quot; command when compiled with SQLITE_DEBUG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8804479c26e1da45bb9e3ed0888fbc0d4a08ae1c" translate="yes" xml:space="preserve">
          <source>Add the &quot;totype.c&quot; extension, implementing the tointeger() and toreal() SQL functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df81e72aa83e90414fe2ffd4c6cb48365750ab99" translate="yes" xml:space="preserve">
          <source>Add the -withoutnulls option to the &lt;a href=&quot;tclsqlite#eval&quot;&gt;TCL interface eval method&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f125709e724b34ac5ad47f8eda53803f5734890" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableview&quot;&gt;SQLITE_DBCONFIG_ENABLE_VIEW&lt;/a&gt; option for &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40592c218ccd34fab463deb3f03be7da30417f9c" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuscacheused&quot;&gt;SQLITE_DBSTATUS_CACHE_USED&lt;/a&gt; verb for &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48cfd1c7357fb4864216d4d254e3beabe8b5a2d" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuscachewrite&quot;&gt;SQLITE_DBSTATUS_CACHE_WRITE&lt;/a&gt; option for &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8b97d6b9385048b55638f312823bb2eb008ce5" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntljournalpointer&quot;&gt;SQLITE_FCNTL_JOURNAL_POINTER&lt;/a&gt; file control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081364f71e5fefa3da91ea51b10405c027faaabe" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlsizelimit&quot;&gt;SQLITE_FCNTL_SIZE_LIMIT&lt;/a&gt;&lt;a href=&quot;c3ref/file_control&quot;&gt;file-control&lt;/a&gt; for setting an upper bound on the size of the in-memory database created by sqlite3_deserialize. The default upper bound is 1GiB, or whatever alternative value is specified by &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config&lt;/a&gt;(&lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigmemdbmaxsize&quot;&gt;SQLITE_CONFIG_MEMDB_MAXSIZE&lt;/a&gt;) and/or &lt;a href=&quot;compile#memdb_default_maxsize&quot;&gt;SQLITE_MEMDB_DEFAULT_MAXSIZE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d92af1fb4c4ac1e07a26f5836df488794b6bbdc" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/cancel_auto_extension&quot;&gt;sqlite3_cancel_auto_extension(X)&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe034b4f2512875ab8ea3e02c36867f516b685b5" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/drop_modules&quot;&gt;sqlite3_drop_modules()&lt;/a&gt; interface, allowing applications to disable automatically loaded virtual tables that they do not need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d27cce565db8490729a43e1af27acdeb1a1d96" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/pcache_methods2&quot;&gt;application-defined page cache&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d7eada875b03c7029bca58ac2ddc67b6735f11" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/serialize&quot;&gt;sqlite3_serialize()&lt;/a&gt; and &lt;a href=&quot;c3ref/deserialize&quot;&gt;sqlite3_deserialize()&lt;/a&gt; interfaces when the &lt;a href=&quot;compile#enable_deserialize&quot;&gt;SQLITE_ENABLE_DESERIALIZE&lt;/a&gt; compile-time option is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065e4967252d67f2418c2b348070eac9ee82255f" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/strglob&quot;&gt;sqlite3_strglob()&lt;/a&gt; convenience interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52490b8c94f339853539d2cd7b35574401e395a9" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;c3ref/vtab_config&quot;&gt;sqlite3_vtab_config()&lt;/a&gt; interface in support of &lt;a href=&quot;lang_conflict&quot;&gt;ON CONFLICT&lt;/a&gt; clauses with &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f5bebd726b497704665ee703792c5087bc4e88" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;compile#default_automatic_index&quot;&gt;SQLITE_DEFAULT_AUTOMATIC_INDEX&lt;/a&gt; compile-time option. Setting this option to 0 disables automatic indices by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470112a79227f7c994e11abc7f3c3d991569cdaa" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;compile#default_lookaside&quot;&gt;SQLITE_DEFAULT_LOOKASIDE&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85aebd6ee91874adb96cb2db93f6f4d317b58eb7" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;compile#enable_explain_comments&quot;&gt;SQLITE_ENABLE_EXPLAIN_COMMENTS&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a90d69aeda9911ff14bd96ba3dda734bfd8d53" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;compile#rtree_int_only&quot;&gt;SQLITE_RTREE_INT_ONLY&lt;/a&gt; compile-time option to force the &lt;a href=&quot;rtree&quot;&gt;R*Tree Extension Module&lt;/a&gt; to use integer instead of floating point values for both storage and computation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e9f2fd2f640e3984cdc406903ee8672531ce05" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;fts3#*fts4mergecmd&quot;&gt;FTS4 &quot;merge&quot; command&lt;/a&gt;, the &lt;a href=&quot;fts3#*fts4automergecmd&quot;&gt;FTS4 &quot;automerge&quot; command&lt;/a&gt;, and the &lt;a href=&quot;fts3#*fts4ickcmd&quot;&gt;FTS4 &quot;integrity-check&quot; command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98046a6bd29ea22d322eeeda3a2f3bdacd96dcab" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=ext/misc/vfsstat.c&quot;&gt;vfsstat.c&lt;/a&gt; loadable extension - a VFS shim that measures I/O together with an &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual table&lt;/a&gt; that provides access to the measurements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd3c312e6d704d9ddb06fdac7e44b6ba43e781a" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;lang_indexedby&quot;&gt;INDEXED BY&lt;/a&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f9efcb02f9ffd6cbf45dbb655ea785d5db4c65" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;optoverview#leftjoinreduction&quot;&gt;LEFT JOIN strength reduction optimization&lt;/a&gt; that converts a LEFT JOIN into an ordinary JOIN if there exist terms in the WHERE clause that would prevent the extra all-NULL row of the LEFT JOIN from appearing in the output set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6294f954692677e23d4407af3d20a5f13384a9c1" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;pragma#pragma_legacy_alter_table&quot;&gt;PRAGMA legacy_alter_table=ON&lt;/a&gt; command that causes the &quot;ALTER TABLE RENAME&quot; command to behave as it did in SQLite versions 3.24.0 and earlier: references to the renamed table inside the bodies of triggers and views are not updated. This new pragma provides a compatibility work around for older programs that expected the older, wonky behavior of ALTER TABLE RENAME.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e0bbc3322ff734087f22e70d84d21a6e7a30fe" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;vtab#xsavepoint&quot;&gt;xSavepoint&lt;/a&gt;, &lt;a href=&quot;vtab#xsavepoint&quot;&gt;xRelease&lt;/a&gt; and &lt;a href=&quot;vtab#xsavepoint&quot;&gt;xRollbackTo&lt;/a&gt; methods in &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt; in support of &lt;a href=&quot;lang_savepoint&quot;&gt;SAVEPOINT&lt;/a&gt; for virtual tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed36cb9eb24ef6e4831d3cb6e75c5a505ce11d8" translate="yes" xml:space="preserve">
          <source>Add the &lt;b&gt;sqlite_version[]&lt;/b&gt; string constant to the library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a77c4f39c42e3d8e465cea41bb54ff783957906" translate="yes" xml:space="preserve">
          <source>Add the COLLATE operator used to explicitly set the collating sequence used by an expression. This feature is considered experimental pending additional testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29546c6fbd4241b614f52b701e19fb42190f52db" translate="yes" xml:space="preserve">
          <source>Add the MEMORY option to the &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08441390d486d4a704f4d3ebdd1c1a4095467616" translate="yes" xml:space="preserve">
          <source>Add the ability for INSERT and UPDATE statements to refer to the &quot;rowid&quot; (or &quot;_rowid_&quot; or &quot;oid&quot;) columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d47c24f96a5ac57ed4cd528de551cd89df640b" translate="yes" xml:space="preserve">
          <source>Add the ability to change the &lt;a href=&quot;pragma#pragma_auto_vacuum&quot;&gt;auto_vacuum&lt;/a&gt; status of a database by setting the auto_vaccum pragma and VACUUMing the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b4842e5d50e9cfd8c2600caa26cf77f6f838dc" translate="yes" xml:space="preserve">
          <source>Add the ability to do MSVC Windows builds from the &lt;a href=&quot;https://sqlite.org/download.html&quot;&gt;amalgamation tarball&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4db540a1419635a899fe1e123412560851c41e" translate="yes" xml:space="preserve">
          <source>Add the ability to implement FROM clause subqueries as coroutines rather that manifesting the subquery into a temporary table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641284aafcb663d3733121dbe152ab06583bd76f" translate="yes" xml:space="preserve">
          <source>Add the ability to put TABLE.* in the column list of a SELECT statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76eab5ccc29a6c69261726a47189c3c56c533ee9" translate="yes" xml:space="preserve">
          <source>Add the ability to put a single .command in the second argument of the sqlite shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6f54e907a75263fd0bf968b6313ce06f8b53fe" translate="yes" xml:space="preserve">
          <source>Add the ability to read both little-endian and big-endian databases. So a database created under SunOS or Mac OS X can be read and written under Linux or Windows and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af73d1caadd8c6a0bfa650a1605b5bc6b382fa8b" translate="yes" xml:space="preserve">
          <source>Add the ability to read from &lt;a href=&quot;wal&quot;&gt;WAL mode&lt;/a&gt; databases even if the application lacks write permission on the database and its containing directory, as long as the -shm and -wal files exist in that directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380f653fc0d3d6ccefb92e152868bd3b2cfdb518" translate="yes" xml:space="preserve">
          <source>Add the ability to run a full regression test with a small &lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5bd71c1b0c8add951478fd6dd2ffd86268514b" translate="yes" xml:space="preserve">
          <source>Add the ability to specify an alternative temporary file directory using the &quot;sqlite_temp_directory&quot; global variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2ac397ad237a3ec1542096c2f09b239a87fcab" translate="yes" xml:space="preserve">
          <source>Add the ability to use quoted strings as table and column names in expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7939de31db1c52152d61c7f45b0bf4965a26a9" translate="yes" xml:space="preserve">
          <source>Add the build-in RTRIM collating sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4031514981ccb92e8822ed8b31bcfdb01017867" translate="yes" xml:space="preserve">
          <source>Add the capability of &quot;hidden&quot; columns in virtual tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce623dc6dee7dc1c4546659cdff0cc47e7ae976" translate="yes" xml:space="preserve">
          <source>Add the capability of evaluating an &lt;a href=&quot;lang_expr#in_op&quot;&gt;IN operator&lt;/a&gt; as a sequence of comparisons as an alternative to using a table lookup. Use the sequence of comparisons implementation in circumstances where it is likely to be faster, such as when the right-hand side of the IN operator is small and/or changes frequently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913170471b20c5cadb18e221b79038b72aa6c5c5" translate="yes" xml:space="preserve">
          <source>Add the constant P2 to the value in register P1. The result is always an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49543ed02ed7f75a8b5f4d3033d6dbc8ce95628d" translate="yes" xml:space="preserve">
          <source>Add the fuzzcheck test program and automatically run this program using both SQL and database test cases on &quot;make test&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c12a1411453c369d89d2764b058c0cb481650f" translate="yes" xml:space="preserve">
          <source>Add the global variable sqlite_temp_directory which if set defines the directory in which temporary files are stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05674fc8f1df1c74cf46b61016ca2070fc8379b9" translate="yes" xml:space="preserve">
          <source>Add the long-standing &quot;.testctrl&quot; command to the &quot;.help&quot; menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a95d896cccaf286ff7b2470d35b7c705d0ca8a" translate="yes" xml:space="preserve">
          <source>Add the name of an individual configuration setting to query the current value of that setting. Optionally add a boolean value to change a setting. For example, turn off support for the &lt;a href=&quot;quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765e23b58c1bb51c78a2c11360fa9dffbf0998be" translate="yes" xml:space="preserve">
          <source>Add the new &quot;.genfkey&quot; command in the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; for generating triggers to implement foreign key constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353211e020fc294eba4ff8c7f60b45103bef8637" translate="yes" xml:space="preserve">
          <source>Add the new &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_error_code()&lt;/a&gt; API and use it in the implementation of &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; so that proper error codes are returned when an &lt;a href=&quot;lang_attach&quot;&gt;ATTACH&lt;/a&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d645979e763a15ad29729f489aa54879c9058e28" translate="yes" xml:space="preserve">
          <source>Add the sorter-reference optimization as a compile-time option. Only available if compiled with SQLITE_ENABLE_SORTER_REFERENCES.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f9f5215cd0bcd28873268a2df03e58b7edb884" translate="yes" xml:space="preserve">
          <source>Add the text in register P1 onto the end of the text in register P2 and store the result in register P3. If either the P1 or P2 text are NULL then store NULL in P3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf58523b65d0b130a577861b217d7b44ae4b7ae" translate="yes" xml:space="preserve">
          <source>Add the value in register P1 to the value in register P2 and store the result in register P3. If either input is NULL, the result is NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fcebde89e16dc9a370173c80b02abe9e4c78f0" translate="yes" xml:space="preserve">
          <source>AddImm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2110eeb59898919163140d91e36c5206d742c963" translate="yes" xml:space="preserve">
          <source>Added &quot;.lint fkey-indexes&quot; to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b3156c2ecab2f101328f99f2bb4049428c27f0" translate="yes" xml:space="preserve">
          <source>Added &quot;.mode quote&quot; to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f34edea5910a5e62ccf46db8b7d60aaaee76631" translate="yes" xml:space="preserve">
          <source>Added &quot;busy&quot; and &quot;timeout&quot; methods to the Tcl interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379c527f7af719153fa43206a68c9c81b52a41ba" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;c3ref/c_deterministic&quot;&gt;SQLITE_DETERMINISTIC&lt;/a&gt; as an optional bit in the 4th argument to the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function()&lt;/a&gt; and related interfaces, providing applications with the ability to create new functions that can be factored out of inner loops when they have constant arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33f2de4952c71c6ae8d2342c531d9ec5acdd089" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlwin32gethandle&quot;&gt;SQLITE_FCNTL_WIN32_GET_HANDLE&lt;/a&gt; file control opcode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f0bea9f1aab4e8e94f7f046274987aafe92259" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;fts5&quot;&gt;Full Text Search version 5 (FTS5)&lt;/a&gt; to the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;, enabled using &lt;a href=&quot;compile#enable_fts5&quot;&gt;SQLITE_ENABLE_FTS5&lt;/a&gt;. FTS5 will be considered &quot;experimental&quot; (subject to incompatible changes) for at least one more release cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5083f2c6979cbe0e53546ddb0afabcdf2faa5b7" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;json1&quot;&gt;the json1 extension&lt;/a&gt; module in the source tree, and in the &lt;a href=&quot;amalgamation&quot;&gt;amalgamation&lt;/a&gt;. Enable support using the &lt;a href=&quot;compile#enable_json1&quot;&gt;SQLITE_ENABLE_JSON1&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4b533f0e27715071ef87eea4d93f3cf1f90e06" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;pragma#pragma_checkpoint_fullfsync&quot;&gt;PRAGMA checkpoint_fullfsync&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f1995fb018bbb40a46ee81938b4ec1c3d8a6dc" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;pragma#pragma_freelist_count&quot;&gt;PRAGMA freelist_count&lt;/a&gt; for determining the current size of the freelist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971c4ac1e76be78c3a8dee23705ac7dd59d334eb" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;pragma#pragma_table_xinfo&quot;&gt;PRAGMA table_xinfo&lt;/a&gt; that works just like &lt;a href=&quot;pragma#pragma_table_info&quot;&gt;PRAGMA table_info&lt;/a&gt; except that it also shows &lt;a href=&quot;vtab#hiddencol&quot;&gt;hidden columns&lt;/a&gt; in virtual tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a0808cf95414d138c9f313f7f4408d5a231ce9" translate="yes" xml:space="preserve">
          <source>Added &lt;em&gt;experimental&lt;/em&gt; support for the &lt;a href=&quot;pragma#pragma_journal_mode&quot;&gt;journal_mode&lt;/a&gt; PRAGMA and persistent journal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2336dfca3803f9a8e032676d0cec38c1ebfd454" translate="yes" xml:space="preserve">
          <source>Added Mac OS X locking patches (beta - disabled by default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db99ee2e25e21b5b81f68fcf9810b39626b69d8d" translate="yes" xml:space="preserve">
          <source>Added RPMS to the delivery (patches from Doug Henry)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67198b6e07398a12f3c25aaf4ac2154027ff0378" translate="yes" xml:space="preserve">
          <source>Added SQL functions &lt;a href=&quot;lang_corefunc#unicode&quot;&gt;unicode(A)&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#char&quot;&gt;char(X1,...,XN)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac6ca0d8ed6a2ff2db4fe6f55b929a7c0125e12" translate="yes" xml:space="preserve">
          <source>Added SQL-92 compliant handling of NULLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c2a0ba3f2291cb99aee2473a49a09f7ccf3bf8" translate="yes" xml:space="preserve">
          <source>Added UTC to localtime conversions to the experimental date/time functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdce9c9a8eb91c9a8d97198c0a3be5edb3ec079e" translate="yes" xml:space="preserve">
          <source>Added a &quot;memory:&quot; backend driver that stores its database in an in-memory hash table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e371dc673bc0768232c8a31e4ebbea705ef36e" translate="yes" xml:space="preserve">
          <source>Added a &lt;b&gt;GLOB&lt;/b&gt; operator: similar to &lt;b&gt;LIKE&lt;/b&gt; but it uses Unix shell globbing wildcards instead of the '%' and '_' wildcards of SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250be653dbe1b995ef443b4744fbdd334d1af201" translate="yes" xml:space="preserve">
          <source>Added a &lt;b&gt;VACUUM&lt;/b&gt; command that calls the &lt;b&gt;gdbm_reorganize()&lt;/b&gt; function on the underlying database files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f50be98792a4473f5df166e79e4c15e470e945f" translate="yes" xml:space="preserve">
          <source>Added a REGEXP operator to the parser. There is no function to back up this operator in the standard build but users can add their own using sqlite3_create_function()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c212ede6225bb468c44a057a6ea39db59358c58f" translate="yes" xml:space="preserve">
          <source>Added a bunch more tests that take advantage of the new fcnt() function. The new tests did not uncover any new problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405362df77d500b1d4a23148d0fa3aadc04a61a9" translate="yes" xml:space="preserve">
          <source>Added a memory barrier in the implementation of &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; to help ensure that it is thread-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e87cd127e91da0ec0dda2b4bc2817875de241c" translate="yes" xml:space="preserve">
          <source>Added a new &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; source code file to the source tree: &lt;a href=&quot;http://www.sqlite.org/src/finfo?name=ext/misc/fileio.c&quot;&gt;fileio.c&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7bef2f5c6c7c126bee7d0e1381e04a2bc5d5c7" translate="yes" xml:space="preserve">
          <source>Added a new &lt;a href=&quot;rtree&quot;&gt;R*Tree index extension&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4c4957f61db08c301d624dc05f1392878c4ab6" translate="yes" xml:space="preserve">
          <source>Added a new &lt;a href=&quot;rtree&quot;&gt;R*Tree virtual table&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e29fe680785011d7bda3161f75d1202d6b3c9e3" translate="yes" xml:space="preserve">
          <source>Added a new C/C++ API that does not use callback for returning data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b214b9ae924929f1e2351882a725695633b6e8e3" translate="yes" xml:space="preserve">
          <source>Added a new OS interface method for determining the sector size of underlying media: sqlite3OsSectorSize().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce29058ae0caf8062f35fba6d887336c4a7ab9a" translate="yes" xml:space="preserve">
          <source>Added a virtual function layer for the OS interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b8033f44960f290c02892665b99592125d3ee3" translate="yes" xml:space="preserve">
          <source>Added additional test cases and fixed a few bugs that those test cases found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c1830e3a8de651ced6ed3d6d28fa7fd0b964bd" translate="yes" xml:space="preserve">
          <source>Added an experimental power-of-two, first-fit memory allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61506056435b0abe346d4b1592020fa0841dc847" translate="yes" xml:space="preserve">
          <source>Added an optimization to UNION ALL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0bf560d56111975b663b31d372f7d04ccc0408" translate="yes" xml:space="preserve">
          <source>Added an optional 5th parameter defining the collating sequence to the next_char() extension SQL function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d357182f3b49b9560b914618c22b6d797e8a50" translate="yes" xml:space="preserve">
          <source>Added an output buffer size parameter to the xGetTempname() method of the VFS layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92c6a94a65042a5738630118f0b6522d064c4d6" translate="yes" xml:space="preserve">
          <source>Added authorization hooks for the new ATTACH and DETACH commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29532217c190ee9ef8560df060b282fde86a0201" translate="yes" xml:space="preserve">
          <source>Added built-in support for VxWorks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147b8e42a7c5709c165ca9ec210f58e87fdbc166" translate="yes" xml:space="preserve">
          <source>Added compound select operators: &lt;b&gt;UNION&lt;/b&gt;, &lt;b&gt;UNION ALL&lt;/b&gt;, &lt;b&gt;INTERSECT&lt;/b&gt;, and &lt;b&gt;EXCEPT&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966bb7eeb144aa22658b66260b0fc07c41cb34a5" translate="yes" xml:space="preserve">
          <source>Added documentation on SELECT DISTINCT and on how SQLite handles NULLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5259a8e93acf37a2a605d329efcce9e4a1e269e" translate="yes" xml:space="preserve">
          <source>Added documentation on compiling to WinNT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5004dca04585c7d3aaf25e1e1a41516474e09016" translate="yes" xml:space="preserve">
          <source>Added driver for OS/2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe42510cd0463afe5cbf6d7827cc69110a1cc60c" translate="yes" xml:space="preserve">
          <source>Added experimental API: sqlite3_auto_extension()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7766b89d29253ecd84d2e8efcc547f8a4a19fdd2" translate="yes" xml:space="preserve">
          <source>Added experimental sqlite_bind() and sqlite_reset() APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8380976f60b469b795a9cfe69a68ad28519ab2" translate="yes" xml:space="preserve">
          <source>Added experimental sqlite_progress_handler() callback API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dde0a29472bfdb42ef6a4ba4d29d82906afeb01" translate="yes" xml:space="preserve">
          <source>Added experimental support for &lt;a href=&quot;pragma#pragfunc&quot;&gt;PRAGMA functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b04ee6a08af9da9a7cc5155935020b217c59f16" translate="yes" xml:space="preserve">
          <source>Added explicit &lt;a href=&quot;limits&quot;&gt;upper bounds&lt;/a&gt; on the sizes and quantities of things SQLite can process. This change might cause compatibility problems for applications that use SQLite in the extreme, which is why the current release is 3.4.0 instead of 3.3.18.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39458a71b59bf72d180e407a4469d5eee8eb52fb" translate="yes" xml:space="preserve">
          <source>Added functions &lt;b&gt;length()&lt;/b&gt; and &lt;b&gt;substr()&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea09a49bd5b911106d49b4181dd736a6c1febba9" translate="yes" xml:space="preserve">
          <source>Added improved version identification features: C-Preprocessor macro &lt;a href=&quot;c3ref/c_source_id&quot;&gt;SQLITE_SOURCE_ID&lt;/a&gt;, C/C++ interface &lt;a href=&quot;c3ref/libversion&quot;&gt;sqlite3_sourceid()&lt;/a&gt;, and SQL function &lt;a href=&quot;lang_corefunc#sqlite_source_id&quot;&gt;sqlite_source_id()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36da124a6f3ace551424bb6aa30d21793847e7e5" translate="yes" xml:space="preserve">
          <source>Added limited support for transactions. At this point, transactions will do table locking on the GDBM backend. There is no support (yet) for rollback or atomic commit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322bfefb44d4286a4a0577edd8cf824412924d23" translate="yes" xml:space="preserve">
          <source>Added logic to detect when the library API routines are called out of sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67317880fae037ebc6d3e2d3e37f7ba602179da1" translate="yes" xml:space="preserve">
          <source>Added lots of new test cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d49fe297826d5eff0d8ba253a3d0ec9f7707bb3" translate="yes" xml:space="preserve">
          <source>Added many new loadable extensions to the source tree, including amatch, closure, fuzzer, ieee754, nextchar, regexp, spellfix, and wholenumber. See header comments on each extension source file for further information about what that extension does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ee37f0f1005525b8836f4f65d7fb421a50ba51" translate="yes" xml:space="preserve">
          <source>Added new &lt;a href=&quot;uri#coreqp&quot;&gt;URI query parameters&lt;/a&gt; &quot;nolock&quot; and &quot;immutable&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63392fe9fe96791514a3c1be366331a2c5669d4f" translate="yes" xml:space="preserve">
          <source>Added new commands &quot;.backup&quot; and &quot;.restore&quot; to the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b636e1930793301d407d0d74d8b0aa8cb970ae" translate="yes" xml:space="preserve">
          <source>Added new commands &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatusschemaused&quot;&gt;SQLITE_DBSTATUS_SCHEMA_USED&lt;/a&gt; and &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatusstmtused&quot;&gt;SQLITE_DBSTATUS_STMT_USED&lt;/a&gt; to the &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt; interface, in order to report out the amount of memory used to hold the schema and prepared statements of a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dfe8f26d08433a24df679977a760d4f646d3d2" translate="yes" xml:space="preserve">
          <source>Added new extended error codes for all SQLITE_CONSTRAINT errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5688bbdc29e537f15ce91e77d0144288a884fe89" translate="yes" xml:space="preserve">
          <source>Added new functions: &lt;b&gt;round()&lt;/b&gt; and &lt;b&gt;abs()&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0329da0075f52ea225b62d5bf9417d8dcd00a71" translate="yes" xml:space="preserve">
          <source>Added new interfaces with 64-bit length parameters: &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_malloc64()&lt;/a&gt;, &lt;a href=&quot;c3ref/free&quot;&gt;sqlite3_realloc64()&lt;/a&gt;, &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_blob64()&lt;/a&gt;, &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_blob64()&lt;/a&gt;, &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_text64()&lt;/a&gt;, and &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_text64()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cc3fb84831f2e27cea592dad28ee0dfb47e000" translate="yes" xml:space="preserve">
          <source>Added new methods &lt;a href=&quot;tclsqlite#backup&quot;&gt;backup&lt;/a&gt; and &lt;a href=&quot;tclsqlite#restore&quot;&gt;restore&lt;/a&gt; to the TCL interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f026a440b97b07d3a085b4f6c26cd70cd6721d81" translate="yes" xml:space="preserve">
          <source>Added new operators: &lt;b&gt;&amp;amp;&lt;/b&gt; (bitwise-and) &lt;b&gt;|&lt;/b&gt; (bitwise-or), &lt;b&gt;~&lt;/b&gt; (ones-complement), &lt;b&gt;&amp;lt;&amp;lt;&lt;/b&gt; (shift left), &lt;b&gt;&amp;gt;&amp;gt;&lt;/b&gt; (shift right).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de14b01c9e35bbb7629521f6a50271a7ccde1b67" translate="yes" xml:space="preserve">
          <source>Added new tests for &lt;b&gt;sqlite_complete()&lt;/b&gt; and for memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20dd22d769d6a0327cc8caabe7593808b2f880b" translate="yes" xml:space="preserve">
          <source>Added notes on how to compile for Windows95/98.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3777e6498a05a9cf616db470b108348609eefe" translate="yes" xml:space="preserve">
          <source>Added options &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuscachehit&quot;&gt;SQLITE_DBSTATUS_CACHE_HIT&lt;/a&gt; and &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuscachemiss&quot;&gt;SQLITE_DBSTATUS_CACHE_MISS&lt;/a&gt; to the &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bcb2d14872cd27ad8179b401d41712f3826ac8" translate="yes" xml:space="preserve">
          <source>Added pattern matching to the &quot;.table&quot; command in the &quot;sqlite&quot; command shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7fdec30649f808ade235da9f1d9bfc39928676" translate="yes" xml:space="preserve">
          <source>Added special column names ROWID, OID, and _ROWID_ that refer to the unique random integer key associated with every row of every table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0fd30f1cefc34648f44fd621d0ab7f5704b046" translate="yes" xml:space="preserve">
          <source>Added superfluous casts and variable initializations in order to suppress nuisance compiler warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8034fb730a94e978b35dda6f4f886fe746b86bb" translate="yes" xml:space="preserve">
          <source>Added support for &quot;Proxy Locking&quot; on Mac OS X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a768a274150328fc95ef914aa94e10888b14001" translate="yes" xml:space="preserve">
          <source>Added support for &quot;sz=NNN&quot; parameters at the end of &lt;a href=&quot;fileformat2#stat1tab&quot;&gt;sqlite_stat1.stat&lt;/a&gt; fields used to specify the average length in bytes for table and index rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d796f1bc1788a94bdc0f744f6885401132b83b" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;c3ref/blob_open&quot;&gt;Incremental BLOB I/O&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77bdf718a836eec40d5cc2bd3bd76b51bd6ed19" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigmaindbname&quot;&gt;SQLITE_DBCONFIG_MAINDBNAME&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d912639164fbfa089f0b32366f17a5c6aa911805" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;compile#enable_stat4&quot;&gt;SQLITE_ENABLE_STAT4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7df61cc46e1a14c31ecf305ec5b3cdc2ad14931" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;expridx&quot;&gt;indexes on expressions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccee6fe1568710feac231d9b82d4b7116c357c1f" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;foreignkeys&quot;&gt;foreign key constraints&lt;/a&gt;. Foreign key constraints are disabled by default. Use the &lt;a href=&quot;pragma#pragma_foreign_keys&quot;&gt;foreign_keys pragma&lt;/a&gt; to turn them on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d3823a31c3d971b8257b18cfb2e7dd4e9220f5" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;fts3#*fts4compression&quot;&gt;compressed FTS4 content&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4787e7cb7c644f741f21a4cb4f977bb669f1d4c" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt; and enhancements to the FTS &lt;a href=&quot;fts3#matchinfo&quot;&gt;matchinfo()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6092d378933e07269403fd4dd90531c8858f1c75" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;http://www.icu-project.org/&quot;&gt;International Components for Unicode (ICU)&lt;/a&gt; to the full-text search extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5facc051f99921d391afa4e3643b439a064280" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;lang_expr#hexint&quot;&gt;hexadecimal integer literals&lt;/a&gt; in the SQL parser. (Ex: 0x123abc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5a1e3af94d119995760c36810093890d689e97" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;lang_expr#like&quot;&gt;LIKE&lt;/a&gt;, &lt;a href=&quot;lang_expr#glob&quot;&gt;GLOB&lt;/a&gt;, and &lt;a href=&quot;lang_expr#regexp&quot;&gt;REGEXP&lt;/a&gt; operators on &lt;a href=&quot;vtab&quot;&gt;virtual tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5ae11919833702f8097527352d77974e85a4c5" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameters&lt;/a&gt; and the &lt;a href=&quot;cli#param&quot;&gt;.parameter command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da287db3ef9d940ef6e06049e899a3255c626579" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;lang_savepoint&quot;&gt;nested transactions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b0cb14c26129da9af31340671c9b3ff8e5ccca" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;lang_with&quot;&gt;common table expressions&lt;/a&gt; and the &lt;a href=&quot;lang_with&quot;&gt;WITH clause&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dc90ea23f1ee6a95938b67f9463a536aa9aa65" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;pragma#pragma_incremental_vacuum&quot;&gt; Incremental Vacuum&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098e47061ac752cad3c4f0dd71b4386b546c1923" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;queryplanner#partialsort&quot;&gt;partial sorting by index&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5852f13702a3f6d2950690e297970675461ddffd" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;rowvalue&quot;&gt;row values&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9304a1ae7bcff7f9d0294fd922fb7902290e9b40" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;rtree#customquery&quot;&gt;custom r-tree queries&lt;/a&gt; using application-supplied callback routines to define the boundary of the query region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38862a5dbb5ef062dda0972b971e23cd8f009ced" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;shortnames&quot;&gt;short filenames&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0678942ca70cc2234b4d6948778baf5cfae7a7b8" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;vtab#epovtab&quot;&gt;eponymous virtual tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f743bdcce78a1dddfc4dc927a772db18d15b9bd9" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;vtab#tabfunc2&quot;&gt;table-valued functions&lt;/a&gt; in the FROM clause of a &lt;a href=&quot;lang_select&quot;&gt;SELECT&lt;/a&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28342e05a28a19c9120653536a77b2d3b8ecfa3f" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;vtab#worid&quot;&gt;WITHOUT ROWID virtual tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30cf1fb4cdcf9dd548c26ae0e68c541d4720f1d" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;wal&quot;&gt;write-ahead logging&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a37e36b173d50699a7a383daf4808cca9005f3" translate="yes" xml:space="preserve">
          <source>Added support for &lt;a href=&quot;withoutrowid&quot;&gt;WITHOUT ROWID&lt;/a&gt; tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa626c013ccfe7078969d1a2418f195260916f5" translate="yes" xml:space="preserve">
          <source>Added support for &lt;b&gt;GROUP BY&lt;/b&gt; and &lt;b&gt;HAVING&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c6378ca8e0385b32d8c34595a31f9e34896f43" translate="yes" xml:space="preserve">
          <source>Added support for &lt;b&gt;IN&lt;/b&gt; and &lt;b&gt;BETWEEN&lt;/b&gt; operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39906a48ce3fe7d0519d7138f444bf5e0f5d0c4e" translate="yes" xml:space="preserve">
          <source>Added support for &lt;b&gt;SELECT DISTINCT ...&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d369d287f216943320eb1cf4c8784d883517fcc" translate="yes" xml:space="preserve">
          <source>Added support for ALTER TABLE ADD COLUMN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61dc3bfef1b0fb9159060519a3d5996919b7cdf" translate="yes" xml:space="preserve">
          <source>Added support for CASE expressions (patch from Dan Kennedy)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef50e566503d5ec6fc8c4206728cad99f6ab4e0" translate="yes" xml:space="preserve">
          <source>Added support for COUNT(DISTINCT expr)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1a1db14256e94e83a51e328f837e192ca0c2b7" translate="yes" xml:space="preserve">
          <source>Added support for CREATE TABLE AS SELECT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f480cd382ac5c6dd6874aa6a99de254caa5bd680" translate="yes" xml:space="preserve">
          <source>Added support for IF EXISTS on CREATE/DROP TRIGGER/VIEW</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802bbd8e68481149017b168987b2b6dcf3e3f523" translate="yes" xml:space="preserve">
          <source>Added support for TEMP triggers and indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecb8ed5eb711ab5bc883c11daa59ac6b2d5ce62" translate="yes" xml:space="preserve">
          <source>Added support for TEMPORARY tables and indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8ec5d1af662afdc6e8cea0faa53d9548a3715c" translate="yes" xml:space="preserve">
          <source>Added support for VIEWs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d8cf0f737beb23e6e9108cf9c8ba695b902478" translate="yes" xml:space="preserve">
          <source>Added support for Windows Phone 8 platforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156d52498375f646744777537d1b8661c3748353" translate="yes" xml:space="preserve">
          <source>Added support for aggregate functions (Ex: &lt;b&gt;COUNT(*)&lt;/b&gt;, &lt;b&gt;MIN(...)&lt;/b&gt;) to the SELECT statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59adb1923dce593e20f6cdd76d1aad57f9b3c08b" translate="yes" xml:space="preserve">
          <source>Added support for default values on columns of a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da71dda5aa64971e5509406d2038fc8ff0a58226" translate="yes" xml:space="preserve">
          <source>Added support for dynamically loaded extensions (beta)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caaf5d365573dc0f505bc362a8d1a5cfa8a2a47" translate="yes" xml:space="preserve">
          <source>Added support for exclusive access mode using &lt;a href=&quot;pragma#pragma_locking_mode&quot;&gt; &quot;PRAGMA locking_mode=EXCLUSIVE&quot;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfbd1d9a982b614144ea7761b02cfc7f2dbb5f8" translate="yes" xml:space="preserve">
          <source>Added support for grave-accent quoting for compatibility with MySQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bbd337e6061caadf8960bdff6dde0fe2e1ce00" translate="yes" xml:space="preserve">
          <source>Added support for in-memory databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269e7f8bd5682bfd59fdb502a94ab258bd85c346" translate="yes" xml:space="preserve">
          <source>Added support for new functions: &lt;b&gt;coalesce()&lt;/b&gt;, &lt;b&gt;lower()&lt;/b&gt;, &lt;b&gt;upper()&lt;/b&gt;, and &lt;b&gt;random()&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714630549f890ebcea85844393f6d39effdd678c" translate="yes" xml:space="preserve">
          <source>Added support for parentheses in FTS3 query patterns using the &lt;a href=&quot;compile#enable_fts3_parenthesis&quot;&gt;SQLITE_ENABLE_FTS3_PARENTHESIS&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0eb5b5e0bf2134ccfb6085dc04cfe49a2b50cb2" translate="yes" xml:space="preserve">
          <source>Added support for read-only &lt;a href=&quot;vtab#xshadowname&quot;&gt;shadow tables&lt;/a&gt; when the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; option is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5328ffada12715fa1740f8ed07ec5f56e3e6e11" translate="yes" xml:space="preserve">
          <source>Added support for reading and writing &lt;a href=&quot;sqlar&quot;&gt;SQLite Archive&lt;/a&gt; files using the &lt;a href=&quot;cli#sqlar&quot;&gt;.archive command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83a93fa67e821fa39cee2c0269a9594a2b7048d" translate="yes" xml:space="preserve">
          <source>Added support for row triggers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d546045a17d60665f8f36d2355b1056f5514277" translate="yes" xml:space="preserve">
          <source>Added support for sub-queries in the FROM clause of a SELECT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5baf8f3125a1b4ab71c92fa8a5439c0508a7b6ff" translate="yes" xml:space="preserve">
          <source>Added support for the &quot;T&quot; separator in ISO-8601 date/time strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725493f315496bd1f2f4a13c4ac5b992869c96d8" translate="yes" xml:space="preserve">
          <source>Added support for the &lt;a href=&quot;c3ref/expanded_sql&quot;&gt;sqlite3_normalized_sql()&lt;/a&gt; interface, when compiling with SQLITE_ENABLE_NORMALIZE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498b965855c0df0c65ab77d01077c70c3176df7c" translate="yes" xml:space="preserve">
          <source>Added support for the &lt;a href=&quot;fts3#*fts4languageid&quot;&gt;FTS4 languageid option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bebd7419f01257793b74d6f7189da20f77e3cdd" translate="yes" xml:space="preserve">
          <source>Added support for the &lt;a href=&quot;fts3#fts4prefix&quot;&gt;FTS4 prefix option&lt;/a&gt; and the &lt;a href=&quot;fts3#fts4order&quot;&gt;FTS4 order option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61e8713611aa7f646e2e630cf8669d823feec59" translate="yes" xml:space="preserve">
          <source>Added support for the &lt;a href=&quot;fts5#carrotq&quot;&gt;&quot;^&quot; initial token syntax&lt;/a&gt; in FTS5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f525fb27345b220e85e4b1882d1f850d9fd641" translate="yes" xml:space="preserve">
          <source>Added support for the CAST operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fad2e75b780f1e57df3facebce6367bd600478" translate="yes" xml:space="preserve">
          <source>Added support for user-defined functions implemented in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd469aa2c2d142386dbb22e08493982d3a3c0cf" translate="yes" xml:space="preserve">
          <source>Added support for using &lt;b&gt;(SELECT ...)&lt;/b&gt; within expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbdc56037dd11ba01c820085bfc64d7a45c048d" translate="yes" xml:space="preserve">
          <source>Added support for virtual tables (beta)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef53cbf2e79a9098a11853089aaa8d3c0fdee6d1" translate="yes" xml:space="preserve">
          <source>Added the &quot;%Q&quot; expansion to sqlite_*_printf().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19a5fb60f5adeafbe53fbf0afc64944745e9a28" translate="yes" xml:space="preserve">
          <source>Added the &quot;--indent&quot; option to the &quot;.schema&quot; and &quot;.fullschema&quot; commands of the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;, to turn on pretty-printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbed788f58b78e99986ec814826250aabd00b5f8" translate="yes" xml:space="preserve">
          <source>Added the &quot;--newlines&quot; option to the &quot;&lt;a href=&quot;cli#dump&quot;&gt;.dump&lt;/a&gt;&quot; command to cause U+000a and U+000d characters to be output literally rather than escaped using the &lt;a href=&quot;lang_corefunc#replace&quot;&gt;replace()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d540026cb1605d53141475378c06aed40694ee4" translate="yes" xml:space="preserve">
          <source>Added the &quot;--transaction&quot; option to &lt;a href=&quot;sqldiff&quot;&gt;sqldiff&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478aa7b2f50ff9f66c73e09765475623c1296d17" translate="yes" xml:space="preserve">
          <source>Added the &quot;-echo&quot; option to the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8299146bfa027dbb559bc3d23457ff833b781801" translate="yes" xml:space="preserve">
          <source>Added the &quot;-heap&quot; option to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd798caa17668bf08f6cc875f2f20a116ec83ed" translate="yes" xml:space="preserve">
          <source>Added the &quot;-sourceid&quot; option to the &quot;sqlite3&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b758a047367c847e236a7d6e0ee3c1b4474249" translate="yes" xml:space="preserve">
          <source>Added the &quot;.auth ON|OFF&quot; command to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940607a7aa26e4eb8956b707dcdaed3399cf8e2b" translate="yes" xml:space="preserve">
          <source>Added the &quot;.bail&quot; command to the command-line shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc22cc03bccb3a5998ffd80255b3094a2a899a7" translate="yes" xml:space="preserve">
          <source>Added the &quot;.changes ON|OFF&quot; and &quot;.vfsinfo&quot; &lt;a href=&quot;cli#dotcmd&quot;&gt;dot-commands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09be07a1075c82f137355e04fdda8ba46481b558" translate="yes" xml:space="preserve">
          <source>Added the &quot;.dbconfig&quot; command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b530795e109b90659ae4200c9b9587d5f7062df4" translate="yes" xml:space="preserve">
          <source>Added the &quot;.dbconfig&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71435fab5cdfaf1ac01d7010f6e9ba64d0dc7ff6" translate="yes" xml:space="preserve">
          <source>Added the &quot;.dbinfo&quot; command to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44bed98bc9ffcac82331aa66719ea4a5d15e106" translate="yes" xml:space="preserve">
          <source>Added the &quot;.eqp full&quot; option to the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt;, that does both &lt;a href=&quot;lang_explain&quot;&gt;EXPLAIN&lt;/a&gt; and &lt;a href=&quot;eqp&quot;&gt;EXPLAIN QUERY PLAN&lt;/a&gt; on each statement that is evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc76269d710537ecfa607d27057feb111d2f5738" translate="yes" xml:space="preserve">
          <source>Added the &quot;.eqp trigger&quot; variant of the &quot;.eqp&quot; command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db11420723106d62b97b1cddde4d80a86b6d3b9" translate="yes" xml:space="preserve">
          <source>Added the &quot;.print&quot; command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7ac74eb8ba91a3704bc76910d5bdd08a822466" translate="yes" xml:space="preserve">
          <source>Added the &quot;.timer&quot; command to the CLI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4061075559d28d8e4ed816bdd15c79dc564dc7a" translate="yes" xml:space="preserve">
          <source>Added the &quot;.trace&quot; dot-command to the command-line shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadf72f23a2ada14e4167774049503cfd395b448" translate="yes" xml:space="preserve">
          <source>Added the &quot;.vfslist&quot; &lt;a href=&quot;cli#dotcmd&quot;&gt;dot-command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d70605741bcb27d28026147f94d6cd602433b0f" translate="yes" xml:space="preserve">
          <source>Added the &quot;&lt;a href=&quot;https://sqlite.org/src/file/ext/misc/dbdata.c&quot;&gt;sqlite_dbdata&lt;/a&gt;&quot; virtual table for extracting raw low-level content from an SQLite database, even a database that is corrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ea4e959435eb02b355c49cbea6f7bc7d2b3ef5" translate="yes" xml:space="preserve">
          <source>Added the &quot;&lt;a href=&quot;uri#urimodeof&quot;&gt;modeof=&lt;i&gt;filename&lt;/i&gt;&lt;/a&gt;&quot; URI parameter on the unix VFS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8283f3eb012777e892f47004d1b706afd30de071" translate="yes" xml:space="preserve">
          <source>Added the &quot;EXTRA&quot; option to &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous&lt;/a&gt; that does a sync of the containing directory when a rollback journal is unlinked in DELETE mode, for better durability. The &lt;a href=&quot;compile#extra_durable&quot;&gt;SQLITE_EXTRA_DURABLE&lt;/a&gt; compile-time option enables &lt;a href=&quot;pragma#pragma_synchronous&quot;&gt;PRAGMA synchronous=EXTRA&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0605f79be49e0270c61cb5b9dfa4647f4728a0" translate="yes" xml:space="preserve">
          <source>Added the &quot;bitvec&quot; object for keeping track of which pages have been journalled. Improves speed and reduces memory consumption, especially for large database files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6dbbfeafc55121e8fcf541554220fbbb17e684" translate="yes" xml:space="preserve">
          <source>Added the &quot;case_sensitive_like&quot; pragma and the SQLITE_CASE_SENSITIVE_LIKE compile-time option to set its default value to &quot;on&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb193ea8cf898f73b58007ba9543b807b3854870" translate="yes" xml:space="preserve">
          <source>Added the &quot;percentile()&quot; function as a &lt;a href=&quot;loadext&quot;&gt;loadable extension&lt;/a&gt; in the ext/misc subdirectory of the source tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5611b9f6138afb0064fc4e62d5516726fcbf742e" translate="yes" xml:space="preserve">
          <source>Added the &quot;transaction&quot; method to the Tcl interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bef58aa7bf5fa4ae3d0cfd6f4672ac479bf0763" translate="yes" xml:space="preserve">
          <source>Added the &quot;unix-excl&quot; built-in VFS on unix and unix-like platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd67f2b6106389654227f8b92e474aef42afe028" translate="yes" xml:space="preserve">
          <source>Added the &quot;win32-none&quot; VFS, analogous to the &quot;unix-none&quot; VFS, that works like the default &quot;win32&quot; VFS except that it ignores all file locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badfd05b3b5c28b37d6844c2c9da5b634785d36b" translate="yes" xml:space="preserve">
          <source>Added the --append option to the &quot;.backup&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46228df7212ca1bca7bba47d433ba46ed3b8c9d9" translate="yes" xml:space="preserve">
          <source>Added the --enable-editline and --enable-static-shell options to the various autoconf-generated configure scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40bfc9f24ea3e7bc19fd8e19fb2ea5316c41113c" translate="yes" xml:space="preserve">
          <source>Added the --new option to the &quot;.open&quot; dot-command, causing any prior content in the database to be purged prior to opening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f31449b9f6901e8d5bc307f552648c8c9f60ad" translate="yes" xml:space="preserve">
          <source>Added the -A command-line option to the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; to make it easier to manage &lt;a href=&quot;sqlar&quot;&gt;SQLite Archive files&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab6c1327f76f890e520a0110e775c0d686745d7" translate="yes" xml:space="preserve">
          <source>Added the -D&lt;a href=&quot;compile#max_memory&quot;&gt;SQLITE_MAX_MEMORY&lt;/a&gt;=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5367ce2c93bb38a095b36e1fed991b9fb4d889ac" translate="yes" xml:space="preserve">
          <source>Added the -returntype option to the &lt;a href=&quot;tclsqlite#function&quot;&gt;function method&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8fe56b695cf00317baad779130870ca95a81df" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/backup_finish#sqlite3backupinit&quot;&gt;hot-backup interface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a89f10c162ecc008c3e13971bca30f64a17a50" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_zeroblob()&lt;/a&gt; API and the &lt;a href=&quot;lang_expr#zeroblob&quot;&gt;zeroblob()&lt;/a&gt; SQL function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77121aeb8c2408e6e7a1a0e10e0b563a3977d08d" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/blob_reopen&quot;&gt;sqlite3_blob_reopen()&lt;/a&gt; interface to allow an existing &lt;a href=&quot;c3ref/blob&quot;&gt;sqlite3_blob&lt;/a&gt; object to be rebound to a new row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55608cf2764566ce89f4e1034e4a2042979d3f0d" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_checkpoint_full&quot;&gt;SQLITE_CHECKPOINT_TRUNCATE&lt;/a&gt; option to the &lt;a href=&quot;c3ref/wal_checkpoint_v2&quot;&gt;sqlite3_wal_checkpoint_v2()&lt;/a&gt; interface, with corresponding enhancements to &lt;a href=&quot;pragma#pragma_wal_checkpoint&quot;&gt;PRAGMA wal_checkpoint&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24795c7f167ca4977e5c234dc2cbe0a63579121e" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfiglookaside&quot;&gt;SQLITE_CONFIG_LOOKASIDE&lt;/a&gt; verb to &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; to control the default lookaside configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb84f5843071fd6a0d0c50960687d9f19b751bd" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpcachehdrsz&quot;&gt;SQLITE_CONFIG_PCACHE_HDRSZ&lt;/a&gt; option to &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; which makes it easier for applications to determine the appropriate amount of memory for use with &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfigpagecache&quot;&gt;SQLITE_CONFIG_PAGECACHE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ab457ef12e647bf4dc7ecead1c36d5c4673d12" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdefensive&quot;&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/a&gt; option which disables the ability to create corrupt database files using ordinary SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e71c54907adbe78a8a28fd46aaebb36d69493c1" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdqsdml&quot;&gt;SQLITE_DBCONFIG_DQS_DML&lt;/a&gt; and &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigdqsddl&quot;&gt;SQLITE_DBCONFIG_DQS_DDL&lt;/a&gt; actions to &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt; for activating and deactivating the &lt;a href=&quot;quirks#dblquote&quot;&gt;double-quoted string literal&lt;/a&gt; misfeature. Both default to &quot;on&quot; for legacy compatibility, but developers are encouraged to turn them &quot;off&quot;, perhaps using the &lt;a href=&quot;compile#dqs&quot;&gt;-DSQLITE_DQS=0&lt;/a&gt; compile-time option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ad0ef8ac2497ed1aa5f01e1b664e81567669d2" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenablefts3tokenizer&quot;&gt;SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER&lt;/a&gt; option to &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt; which allows the two-argument version of the &lt;a href=&quot;fts3#f3tknzr&quot;&gt;fts3_tokenizer()&lt;/a&gt; SQL function to be enabled or disabled at run-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6416a3ba6c9f666e4baee452d3cb91764a92165" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfignockptonclose&quot;&gt;SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE&lt;/a&gt; option to &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692b08dd48ff9799615b16dfbc27375f3082dcfb" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigresetdatabase&quot;&gt;SQLITE_DBCONFIG_RESET_DATABASE&lt;/a&gt; option to the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6daec8b1f14932a0265d49a93345e89fdffd9a4" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigwritableschema&quot;&gt;SQLITE_DBCONFIG_WRITABLE_SCHEMA&lt;/a&gt; verb for the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt; interface, that does the same work as &lt;a href=&quot;pragma#pragma_writable_schema&quot;&gt;PRAGMA writable_schema&lt;/a&gt; without using the SQL parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d750e0c7bb7bb7bec2d0c2a829768642cb54851" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuscachespill&quot;&gt;SQLITE_DBSTATUS_CACHE_SPILL&lt;/a&gt; option to &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt; for reporting the number of cache spills that have occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f2be88cd88e0e32064f44c1119c7bd8eba616a" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuscacheusedshared&quot;&gt;SQLITE_DBSTATUS_CACHE_USED_SHARED&lt;/a&gt; option to &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d572c740f2c606b38c1537872052780a90a1967b" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuslookasidehit&quot;&gt;SQLITE_DBSTATUS_LOOKASIDE_HIT&lt;/a&gt;, &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuslookasidemisssize&quot;&gt;SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE&lt;/a&gt;, and &lt;a href=&quot;c3ref/c_dbstatus_options#sqlitedbstatuslookasidemissfull&quot;&gt;SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL&lt;/a&gt; options for the &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff540364583dcc44fa1ef2c4aadebbebd6864c4" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_deterministic&quot;&gt;SQLITE_DIRECTONLY&lt;/a&gt; flag for &lt;a href=&quot;c3ref/create_function&quot;&gt;application-defined SQL functions&lt;/a&gt; to prevent those functions from being used inside triggers and views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edde08f9646ef2c3e76ad318411c8fb6e51b64f" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlbusyhandler&quot;&gt;SQLITE_FCNTL_BUSYHANDLER&lt;/a&gt; file control, used to allow VFS implementations to get access to the busy handler callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39ae96ebc2e88dd6b2cd7e2fc1b875ebe3e289c" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlchunksize&quot;&gt;SQLITE_FCNTL_CHUNK_SIZE&lt;/a&gt; verb to the &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt; interface for both unix and windows, to cause database files to grow in large chunks in order to reduce disk fragmentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe950f2e1aef661f6ce9192c747caf6f073c554c" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntldataversion&quot;&gt;SQLITE_FCNTL_DATA_VERSION&lt;/a&gt; file-control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c419db6b4698987a8e91b919db8b97ecb28f7972" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlfilepointer&quot;&gt;SQLITE_FCNTL_FILE_POINTER&lt;/a&gt; option to &lt;a href=&quot;c3ref/file_control&quot;&gt;sqlite3_file_control()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf39bdbea0f8885f79a39d332adbbca1cd2395f" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntloverwrite&quot;&gt;SQLITE_FCNTL_OVERWRITE&lt;/a&gt; file-control by which the SQLite core indicates to the VFS that the current transaction will overwrite the entire database file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872bfec9dc1a2fcffd8687a9f2be6d01ed62715c" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlpragma&quot;&gt;SQLITE_FCNTL_PRAGMA&lt;/a&gt; file control, giving &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt; implementations the ability to add new &lt;a href=&quot;pragma#syntax&quot;&gt;PRAGMA&lt;/a&gt; statements or to override built-in PRAGMAs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a08888203226d0cb933e2381c131bd134f3e0ba" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_fcntl_begin_atomic_write#sqlitefcntlwin32gethandle&quot;&gt;SQLITE_FCNTL_WIN32_GET_HANDLE&lt;/a&gt; file control opcode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe9d20a7ecb27f21ed97321987de71e7453d365" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_iocap_atomic&quot;&gt;SQLITE_IOCAP_IMMUTABLE&lt;/a&gt; bit to the set of bits that can be returned by the xDeviceCharacteristics method of a &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f843fb220ff24f90a61313273ce94ebe78eaef3" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_limit_attached#sqlitelimitworkerthreads&quot;&gt;SQLITE_LIMIT_WORKER_THREADS&lt;/a&gt; option to &lt;a href=&quot;c3ref/limit&quot;&gt;sqlite3_limit()&lt;/a&gt; and &lt;a href=&quot;pragma#pragma_threads&quot;&gt;PRAGMA threads&lt;/a&gt; command for configuring the number of available worker threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e1dea17a78ee539422e7da11345abec026d26c" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_mutex_fast&quot;&gt;SQLITE_MUTEX_STATIC_VFS1&lt;/a&gt; static mutex and use it in the Windows &lt;a href=&quot;vfs&quot;&gt;VFS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f5d53ac1d13ed7fd23ea322e4248752246fa8d" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_SHAREDCACHE&lt;/a&gt; and &lt;a href=&quot;c3ref/c_open_autoproxy&quot;&gt;SQLITE_OPEN_PRIVATECACHE&lt;/a&gt; flags for &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; used to override the global &lt;a href=&quot;sharedcache&quot;&gt;shared cache mode&lt;/a&gt; settings for individual database connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6f319a0408b5352c4ea820f41707cd9f47de22" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_prepare_normalize#sqlitepreparenovtab&quot;&gt;SQLITE_PREPARE_NO_VTAB&lt;/a&gt; option to &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt;. Use that option to prevent circular references to &lt;a href=&quot;vtab#xshadowname&quot;&gt;shadow tables&lt;/a&gt; from causing resource leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b481e9d7f3d70cd2eecd21d70129ae31ed1963" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_stmtstatus_counter#sqlitestmtstatusvmstep&quot;&gt;SQLITE_STMTSTATUS_VM_STEP&lt;/a&gt; option to &lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173e2525ec3884e959b6bd821ed96525c786e2b2" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_testctrl_always&quot;&gt;SQLITE_TESTCTRL_BYTEORDER&lt;/a&gt; test control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d008e63c41f50a70b14a41ab55032164f43f128" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/c_testctrl_always&quot;&gt;SQLITE_TESTCTRL_EXPLAIN_STMT&lt;/a&gt; test-control option with the &lt;a href=&quot;compile#enable_tree_explain&quot;&gt;SQLITE_ENABLE_TREE_EXPLAIN&lt;/a&gt; compile-time option to enable the &lt;a href=&quot;cli&quot;&gt;command-line shell&lt;/a&gt; to display ASCII-art parse trees of SQL statements that it processes, for debugging and analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d895d26ed7e55d69a402b7a4c87a8b6ef2550de" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/close&quot;&gt;sqlite3_close_v2()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc2c5299cf593550d927e4ff94e7186fd8be0ca" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/compileoption_get&quot;&gt;sqlite3_compileoption_used()&lt;/a&gt; and &lt;a href=&quot;c3ref/compileoption_get&quot;&gt;sqlite3_compileoption_get()&lt;/a&gt; interfaces as well as the &lt;a href=&quot;pragma#pragma_compile_options&quot;&gt;compile_options pragma&lt;/a&gt; and the &lt;a href=&quot;lang_corefunc#sqlite_compileoption_used&quot;&gt;sqlite_compileoption_used()&lt;/a&gt; and &lt;a href=&quot;lang_corefunc#sqlite_compileoption_get&quot;&gt;sqlite_compileoption_get()&lt;/a&gt; SQL functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb684d2d6c2147c74c80743a4ba8731d23977f3" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt; interface for doing run-time configuration of the entire SQLite library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3d70e2882ec52d0c7e2a7601fe732995c7a8e5" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/create_function&quot;&gt;sqlite3_create_function_v2()&lt;/a&gt; interface that includes a destructor callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fc735cb1d9ab9a07f352a1fc25b9ea800e944b" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_cacheflush&quot;&gt;sqlite3_db_cacheflush()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cee0699cbf54959614bd6a182f20329176bd39" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config()&lt;/a&gt; and &lt;a href=&quot;c3ref/db_status&quot;&gt;sqlite3_db_status()&lt;/a&gt; interfaces for controlling and monitoring the lookaside allocator separately on each &lt;a href=&quot;c3ref/sqlite3&quot;&gt;database connection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14a9e833df50e1b6ce64060f4e3b591d691bb2f" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_config&quot;&gt;sqlite3_db_config&lt;/a&gt;(db,&lt;a href=&quot;c3ref/c_dbconfig_defensive#sqlitedbconfigenableloadextension&quot;&gt;SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION&lt;/a&gt;) interface which allows the &lt;a href=&quot;c3ref/load_extension&quot;&gt;sqlite3_load_extension()&lt;/a&gt; C-API to be enabled while keeping the &lt;a href=&quot;lang_corefunc#load_extension&quot;&gt;load_extension()&lt;/a&gt; SQL function disabled for security.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071c285856222e5eb7858ec7e945402304af9915" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_filename&quot;&gt;sqlite3_db_filename()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0988b37104db6710779e2dd00393ccc8aed4f156" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_mutex&quot;&gt;sqlite3_db_mutex()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b915781990b7bab55347af3d7784e6f66b997a" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_readonly&quot;&gt;sqlite3_db_readonly()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1689be755f4b5947383c0fa1c767961ce85ec869" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/db_release_memory&quot;&gt;sqlite3_db_release_memory()&lt;/a&gt; interface and the &lt;a href=&quot;pragma#pragma_shrink_memory&quot;&gt;shrink_memory pragma&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06e21c2743772c66eb0de3135ffb4cabfd2528d" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_errstr()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f9185a6e3e6c23fc4569ebe588283d6a971b66" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/errcode&quot;&gt;sqlite3_extended_errcode()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1353ba42736589cda5eaab5595079f29c695d72f" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_initialize()&lt;/a&gt; and &lt;a href=&quot;c3ref/initialize&quot;&gt;sqlite3_shutdown()&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7f42008f5ea2ae13832ff2fc538b92619a2aa1" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/log&quot;&gt;sqlite3_log()&lt;/a&gt; interface together with the &lt;a href=&quot;c3ref/c_config_covering_index_scan#sqliteconfiglog&quot;&gt;SQLITE_CONFIG_LOG&lt;/a&gt; verb to &lt;a href=&quot;c3ref/config&quot;&gt;sqlite3_config()&lt;/a&gt;. The &quot;.log&quot; command is added to the &lt;a href=&quot;cli&quot;&gt;Command Line Interface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3b9f436d3aca81a329352d555edcf6d2fc53ab" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/mprintf&quot;&gt;sqlite3_vsnprintf()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1e02c2bfcb32dedecbd7d74f284c573c13e3ce" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/next_stmt&quot;&gt;sqlite3_next_stmt()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a526df89839bb699bba5ca5c33ef0946cc371fa" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/open&quot;&gt;sqlite3_open_v2()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdad7a02f932844f1d5aad978ef31e8280c723b" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v2()&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89e059472e4cdf3b79424c462aeb1d9f42e7450" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare_v3()&lt;/a&gt; and &lt;a href=&quot;c3ref/prepare&quot;&gt;sqlite3_prepare16_v3()&lt;/a&gt; interfaces with the extra &quot;prepFlags&quot; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f79e632c84dd8f613db0c9edb744b3211ad41ad" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/result_blob&quot;&gt;sqlite3_result_zeroblob64()&lt;/a&gt; and &lt;a href=&quot;c3ref/bind_blob&quot;&gt;sqlite3_bind_zeroblob64()&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec059ca77f534e2ad1c9da5da7a07bfe515b8e8" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/set_last_insert_rowid&quot;&gt;sqlite3_set_last_insert_rowid()&lt;/a&gt; interface and use the new interface in the &lt;a href=&quot;fts3&quot;&gt;FTS3&lt;/a&gt;, &lt;a href=&quot;fts3#fts4&quot;&gt;FTS4&lt;/a&gt;, and &lt;a href=&quot;fts5&quot;&gt;FTS5&lt;/a&gt; extensions to ensure that the &lt;a href=&quot;c3ref/last_insert_rowid&quot;&gt;sqlite3_last_insert_rowid()&lt;/a&gt; interface always returns reasonable values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0499000ae920f692c6c10ff730922e71f2175340" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/soft_heap_limit64&quot;&gt;sqlite3_soft_heap_limit64()&lt;/a&gt; interface as a replacement for &lt;a href=&quot;c3ref/soft_heap_limit&quot;&gt;sqlite3_soft_heap_limit()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed7ca4c56c731b0baef64d49ccf82b79e764321" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status()&lt;/a&gt; interface used for querying run-time status information about the overall SQLite library and its subsystems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d388429eb7d67d2eee28cd2e532f95aff575159a" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/status&quot;&gt;sqlite3_status64()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c02d677fed007a0f3b79b5d1f2d07fc18c142f" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/stmt_busy&quot;&gt;sqlite3_stmt_busy()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a521c795e189c1663c9a6d75d13d86189164b4d" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/stmt_readonly&quot;&gt;sqlite3_stmt_readonly()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fef1d855e862457ed32ca48c067aa07064074f2" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/stmt_scanstatus&quot;&gt;sqlite3_stmt_scanstatus()&lt;/a&gt; interface, available only when compiled with &lt;a href=&quot;compile#enable_stmt_scanstatus&quot;&gt;SQLITE_ENABLE_STMT_SCANSTATUS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab35212654f74bbb4e759f54b77da2dec843228c" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/stmt_status&quot;&gt;sqlite3_stmt_status()&lt;/a&gt; interface for performance monitoring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17c7d56b39fa08e8e4f793f514bff570e85da50" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/stricmp&quot;&gt;sqlite3_stricmp()&lt;/a&gt; interface as a counterpart to &lt;a href=&quot;c3ref/stricmp&quot;&gt;sqlite3_strnicmp()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ab51188a3976b29c35159f06ed161f1e35db56" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/strlike&quot;&gt;sqlite3_strlike()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ec1296a97b3b974db4a08e61f32e7aafc39768" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/system_errno&quot;&gt;sqlite3_system_errno()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3ccb20e7e108f7d767e7d7513fa5c98ba8b126" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/unlock_notify&quot;&gt;sqlite3_unlock_notify()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d150faf203ca09b9bbbc984a5975f99628a02e" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/uri_boolean&quot;&gt;sqlite3_uri_boolean()&lt;/a&gt; and &lt;a href=&quot;c3ref/uri_boolean&quot;&gt;sqlite3_uri_int64()&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3426443574d8d278622270eb29b6c8bc749bbfa3" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/value_blob&quot;&gt;sqlite3_value_frombind()&lt;/a&gt; API for determining if the argument to an SQL function is from a &lt;a href=&quot;lang_expr#varparam&quot;&gt;bound parameter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b7debc2fe468faedbcf826ae56b984b1bd24d7" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/value_dup&quot;&gt;sqlite3_value_dup()&lt;/a&gt; and &lt;a href=&quot;c3ref/value_dup&quot;&gt;sqlite3_value_free()&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa32da23e9524ac42660361582e6acf7f0d9ba3" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/value_subtype&quot;&gt;sqlite3_value_subtype()&lt;/a&gt; and &lt;a href=&quot;c3ref/result_subtype&quot;&gt;sqlite3_result_subtype()&lt;/a&gt; interfaced (used by &lt;a href=&quot;json1&quot;&gt;the json1 extension&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23d8810bd1d174b58a21d6487a29fbd4ec86121" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;c3ref/vtab_collation&quot;&gt;sqlite3_vtab_collation()&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
