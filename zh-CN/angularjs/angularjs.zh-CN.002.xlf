<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="6df6e689423958b8b13ffb0a6a5742c72252b129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; refers to the current scope</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 是指当前范围</target>
        </trans-unit>
        <trans-unit id="6570b17255a636d66f9fa82bb833e5c0f7586e6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt;: (optional) override the scope.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; ：（可选）覆盖范围。</target>
        </trans-unit>
        <trans-unit id="3ae667447104aaa6f9f5e76dfcf12ece25e6e761" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;: The result of this expression will be bound to the model of the parent &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element. If not specified, &lt;code&gt;select&lt;/code&gt; expression will default to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; ：此表达式的结果将绑定到父 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素的模型。如果未指定，则 &lt;code&gt;select&lt;/code&gt; expression将默认为 &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78e458052a16c01b3670ea39bf0e5b65aeae45ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;disable when&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;disable&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;disable when&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;disable&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e0b61ae68ccf6a0fefe789619ae7c985ee70b82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for (&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;object&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for (&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;label&lt;/code&gt; &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca66b2e6ac07e7ca29ddae160544b3bc7b0ebca7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68502af231efc1bd12a7d337f6cf5a0798c290b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;strong&gt;&lt;code&gt;group by&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;group&lt;/code&gt;&lt;strong&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;strong&gt;&lt;code&gt;,&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;&lt;code&gt;) in&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;label&lt;/code&gt; &lt;strong&gt; &lt;code&gt;group by&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;group&lt;/code&gt; &lt;strong&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;key&lt;/code&gt; &lt;strong&gt; &lt;code&gt;,&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; &lt;strong&gt; &lt;code&gt;) in&lt;/code&gt; &lt;/strong&gt; &lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85b6c9eeacbfb84c2c4b45f9b1ff493799d0771f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slotName&lt;/code&gt;: (optional) the name of the slot to transclude. If falsy (e.g. &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt;) then the default transclusion is provided. The &lt;code&gt;$transclude&lt;/code&gt; function also has a method on it, &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt;, which returns &lt;code&gt;true&lt;/code&gt; if the specified slot contains content (i.e. one or more DOM nodes).</source>
          <target state="translated">&lt;code&gt;slotName&lt;/code&gt; ：（可选）要包含的插槽的名称。如果错误（例如 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;undefined&lt;/code&gt; 或 &lt;code&gt;''&lt;/code&gt; ），则提供默认的包含。的 &lt;code&gt;$transclude&lt;/code&gt; 功能还具有在其上的方法， &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; ，它返回 &lt;code&gt;true&lt;/code&gt; ，如果指定的时隙包含内容（即一个或多个DOM节点）。</target>
        </trans-unit>
        <trans-unit id="2d38932d58ae4db4450e491cc28b4e0e8782b480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stagger&lt;/code&gt; - A numeric time value representing the delay between successively animated elements (&lt;a href=&quot;../../nganimate#css-staggering-animations.html&quot;&gt;Click here to learn how CSS-based staggering works in ngAnimate.&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;stagger&lt;/code&gt; -一个数字时间值，表示连续动画元素之间的延迟（&lt;a href=&quot;../../nganimate#css-staggering-animations.html&quot;&gt;单击此处以了解ngAnimate中基于CSS的交错如何工作。&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e831bf85661d4350f937ca1ee30582dab7b941fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;staggerIndex&lt;/code&gt; - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a &lt;code&gt;stagger&lt;/code&gt; option value of &lt;code&gt;0.1&lt;/code&gt; is used then there will be a stagger delay of &lt;code&gt;600ms&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;staggerIndex&lt;/code&gt; -表示交错项的数字索引（例如，值5等于交错中的第六项；因此，当使用 &lt;code&gt;stagger&lt;/code&gt; 选项值 &lt;code&gt;0.1&lt;/code&gt; 时，会有 &lt;code&gt;600ms&lt;/code&gt; 的交错延迟）</target>
        </trans-unit>
        <trans-unit id="4b45e4978dcf7ce6b7b883c7dd98db8f0f80ca71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; - The method to start the animation. This will return a &lt;code&gt;Promise&lt;/code&gt; when called.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; -启动动画的方法。调用时将返回一个 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cb9ccde0ec19acd597bd9145a2a92a9b69d53db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; is called on either &lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;touchstart&lt;/code&gt; or &lt;code&gt;pointerdown&lt;/code&gt;. After this event, &lt;code&gt;$swipe&lt;/code&gt; is watching for &lt;code&gt;touchmove&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt; or &lt;code&gt;pointermove&lt;/code&gt; events. These events are ignored until the total distance moved in either dimension exceeds a small threshold.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 叫上或者 &lt;code&gt;mousedown&lt;/code&gt; ， &lt;code&gt;touchstart&lt;/code&gt; 或 &lt;code&gt;pointerdown&lt;/code&gt; 。在此事件之后， &lt;code&gt;$swipe&lt;/code&gt; 会监视 &lt;code&gt;touchmove&lt;/code&gt; ， &lt;code&gt;mousemove&lt;/code&gt; 或 &lt;code&gt;pointermove&lt;/code&gt; 事件。这些事件将被忽略，直到在任一维度上移动的总距离超过较小阈值为止。</target>
        </trans-unit>
        <trans-unit id="4470450130ac3b5e4842fb970bfa6aa99c71833c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stopPropagation&lt;/code&gt; - &lt;code&gt;{function=}&lt;/code&gt;: calling &lt;code&gt;stopPropagation&lt;/code&gt; function will cancel further event propagation (available only for events that were &lt;code&gt;$emit&lt;/code&gt;-ed).</source>
          <target state="translated">&lt;code&gt;stopPropagation&lt;/code&gt; - &lt;code&gt;{function=}&lt;/code&gt; ：调用 &lt;code&gt;stopPropagation&lt;/code&gt; 功能将取消进一步事件传播（仅适用于为事件 &lt;code&gt;$emit&lt;/code&gt; -ed）。</target>
        </trans-unit>
        <trans-unit id="562f32dbb4ed76736045cbd8fdf38a6b2f9b9379" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strictDi&lt;/code&gt; - disable automatic function annotation for the application. This is meant to assist in finding bugs which break minified code. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strictDi&lt;/code&gt; -禁用应用程序的自动功能注释。这旨在帮助查找破坏最小代码的错误。默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7276b814226305e007944b2417ca4a18386b0d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: An AngularJS expression. This expression will be evaluated against each item and the result will be used for sorting. For example, use &lt;code&gt;'label'&lt;/code&gt; to sort by a property called &lt;code&gt;label&lt;/code&gt; or &lt;code&gt;'label.substring(0, 3)'&lt;/code&gt; to sort by the first 3 characters of the &lt;code&gt;label&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：一个AngularJS表达式。将针对每个项目评估该表达式，并将结果用于排序。例如，使用 &lt;code&gt;'label'&lt;/code&gt; 按称为 &lt;code&gt;label&lt;/code&gt; 的属性排序，或使用 &lt;code&gt;'label.substring(0, 3)'&lt;/code&gt; 按 &lt;code&gt;label&lt;/code&gt; 属性的前3个字符排序。</target>
        </trans-unit>
        <trans-unit id="87065c1b0a8c3b424a3bf885c83aec838ee244e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: Evaluated as &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：作为&lt;a href=&quot;../../../guide/expression&quot;&gt;表达式求值&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f120efe592339b69657624de23eb491c8d1b860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: The string is used for matching against the contents of the &lt;code&gt;array&lt;/code&gt;. All strings or objects with string properties in &lt;code&gt;array&lt;/code&gt; that match this string will be returned. This also applies to nested object properties. The predicate can be negated by prefixing the string with &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：该字符串用于匹配 &lt;code&gt;array&lt;/code&gt; 的内容。将返回所有字符串或 &lt;code&gt;array&lt;/code&gt; 中具有字符串属性的对象与此字符串匹配的对象。这也适用于嵌套对象属性。可以通过在字符串前面加上 &lt;code&gt;!&lt;/code&gt; 来否定谓词。。</target>
        </trans-unit>
        <trans-unit id="0fac8b9ae85918a1b9bc8ddbaeca59ac4b4bdd0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: execute using the rules as defined in &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：使用&lt;a href=&quot;../../../guide/expression&quot;&gt;表达式中&lt;/a&gt;定义的规则执行。</target>
        </trans-unit>
        <trans-unit id="96c6e2cb8a41f3ff6df278ab114004a459396f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;: the controller instance</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; ：控制器实例</target>
        </trans-unit>
        <trans-unit id="94b44bd8ed432ec208416beb4e35097bab5affc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;DOMElement&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;DOMElement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="910d44622a6107a3b19072bdef477ba5ae9f8f6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Number&lt;/code&gt;&lt;code&gt;Array.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Number&lt;/code&gt;&lt;code&gt;Array.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b0b56a1549a08913f8940eb735e9bc52b22b15a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;Object.&amp;lt;Array.&amp;lt;string&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object.&amp;lt;string&amp;gt;&lt;/code&gt;&lt;code&gt;Object.&amp;lt;Array.&amp;lt;string&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52a43af812236606133b2286a90533aa1da9dce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0617274d3eb14a8dc52328b1796f76e5008bdb89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="333110296a642e5efb3711dbb16416e1cab4cf22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5c9c81312a04d037526e6aaf5a2317937e86260" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b79898c77a9158ed9a3b37da256dd059ffe3c81c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)=&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;code&gt;function(string)=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9eaac284d7e4378b9085c54e3296234cdfaab404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedObject&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedObject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c392a5b127563010af8428bead8b621d39ab9f3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedResourceUrl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;TrustedResourceUrl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0841c37de01d8a9cca515bc654a12239afab25d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;expression&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;expression&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="76df6b50f223f89d90393b827dfbded897257a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2797717466ee7c0a14d61e2cca32c8deba9e887a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function()&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="895ee3aad440c5ee332da06917bd8f67a4bda274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function(scope)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;function(scope)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6eae39d5eadf0ab32025ed06721ddcabd1fe903" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9f4b43f7a2cf03aecf02ecdf8aaa8da5e8670ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="746d33f90849146f5b6d6cb98d0e6d0c1d1bfd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;self&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;self&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd29f8ef866a70b2bfb061ce2616ab1e279f7e87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt;&lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt;&lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="158ce96b5b8e7c15256896a4b3412574b9b96c2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;structural&lt;/code&gt; - Indicates that the &lt;code&gt;ng-&lt;/code&gt; prefix will be added to the event class. Setting to &lt;code&gt;false&lt;/code&gt; or omitting will turn &lt;code&gt;ng-EVENT&lt;/code&gt; and &lt;code&gt;ng-EVENT-active&lt;/code&gt; in &lt;code&gt;EVENT&lt;/code&gt; and &lt;code&gt;EVENT-active&lt;/code&gt;. Unused if &lt;code&gt;event&lt;/code&gt; is omitted.</source>
          <target state="translated">&lt;code&gt;structural&lt;/code&gt; -表示将 &lt;code&gt;ng-&lt;/code&gt; 前缀添加到事件类中。设置为 &lt;code&gt;false&lt;/code&gt; 或遗漏会变成 &lt;code&gt;ng-EVENT&lt;/code&gt; 和 &lt;code&gt;ng-EVENT-active&lt;/code&gt; 在 &lt;code&gt;EVENT&lt;/code&gt; 和 &lt;code&gt;EVENT-active&lt;/code&gt; 。如果省略 &lt;code&gt;event&lt;/code&gt; ，则不使用。</target>
        </trans-unit>
        <trans-unit id="8544943dc901d069323d20e2530a0add4888fae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svg&lt;/code&gt; - The root nodes in the template are SVG elements (excluding &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;svg&lt;/code&gt; -模板中的根节点是SVG元素（ &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; 除外）。</target>
        </trans-unit>
        <trans-unit id="786046ffc4529a4e093a1303dfa9a1ee93ec701f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svgElements&lt;/code&gt;: This is similar to &lt;code&gt;htmlElements&lt;/code&gt;, but for SVG elements. This list is only taken into account if SVG is &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;enabled&lt;/a&gt; for &lt;code&gt;$sanitize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;svgElements&lt;/code&gt; ：这类似于 &lt;code&gt;htmlElements&lt;/code&gt; ，但用于SVG元素。仅当为 &lt;code&gt;$sanitize&lt;/code&gt; &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;启用&lt;/a&gt; SVG时，才考虑此列表。</target>
        </trans-unit>
        <trans-unit id="a9515e5426c7450b18d455b87febbca653c16d06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tAttrs&lt;/code&gt; - template attributes - Normalized list of attributes declared on this element shared between all directive compile functions.</source>
          <target state="translated">&lt;code&gt;tAttrs&lt;/code&gt; -模板属性-在所有指令编译函数之间共享的，在此元素上声明的属性的规范化列表。</target>
        </trans-unit>
        <trans-unit id="640b5f8f1c6fb750f1bcf0be926a6f7cccf24306" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tElement&lt;/code&gt; - template element - The element where the directive has been declared. It is safe to do template transformation on the element and child elements only.</source>
          <target state="translated">&lt;code&gt;tElement&lt;/code&gt; -模板元素-声明了指令的元素。仅对元素和子元素执行模板转换是安全的。</target>
        </trans-unit>
        <trans-unit id="72d0667731893a2127528a59238286dff75d5787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;targetScope&lt;/code&gt; - &lt;code&gt;{Scope}&lt;/code&gt;: the scope on which the event was &lt;code&gt;$emit&lt;/code&gt;-ed or &lt;code&gt;$broadcast&lt;/code&gt;-ed.</source>
          <target state="translated">&lt;code&gt;targetScope&lt;/code&gt; - &lt;code&gt;{Scope}&lt;/code&gt; ：范围在其上该事件是 &lt;code&gt;$emit&lt;/code&gt; -ed或 &lt;code&gt;$broadcast&lt;/code&gt; -ed。</target>
        </trans-unit>
        <trans-unit id="d9d78aa42995096a3743024a59381d174315f3db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; html template as a string or a function that returns an html template as a string which should be used by &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; or &lt;a href=&quot;../../ng/directive/nginclude&quot;&gt;ngInclude&lt;/a&gt; directives. This property takes precedence over &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; html模板作为字符串或返回html模板作为字符串的函数，应由&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;或&lt;a href=&quot;../../ng/directive/nginclude&quot;&gt;ngInclude&lt;/a&gt;指令使用。此属性优先于 &lt;code&gt;templateUrl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b847eeb83e71a1ccc9378c6a72a5b750311dd281" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash; html template as a string or a function that returns an html template as a string which should be used as the contents of this component. Empty string by default.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash; html模板作为字符串或返回html模板作为字符串的函数，该函数应用作此组件的内容。默认为空字符串。</target>
        </trans-unit>
        <trans-unit id="0429ae61ad47c1536dc730ee0afecadf00bc6957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash; path or function that returns a path to an html template that should be used by &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{(string|Function)=}&lt;/code&gt; &amp;ndash;路径或函数，返回&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;应使用的html模板的路径。</target>
        </trans-unit>
        <trans-unit id="1f165003a7442135289074eae552a6c8ec021d4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash; path or function that returns a path to an html template that should be used as the contents of this component.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; &amp;ndash; &lt;code&gt;{string=|function()=}&lt;/code&gt; &amp;ndash;路径或函数，该路径或函数返回html模板的路径，该路径应用作此组件的内容。</target>
        </trans-unit>
        <trans-unit id="ee42cbd3774e590fa40f0b97c140df868c1c1461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateUrl&lt;/code&gt; can also be a function which returns the URL of an HTML template to be loaded and used for the directive. AngularJS will call the &lt;code&gt;templateUrl&lt;/code&gt; function with two parameters: the element that the directive was called on, and an &lt;code&gt;attr&lt;/code&gt; object associated with that element.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; 也可以是一个函数，该函数返回要加载并用于指令的HTML模板的URL。AngularJS将使用两个参数调用 &lt;code&gt;templateUrl&lt;/code&gt; 函数：调用了该指令的元素以及与该元素关联的 &lt;code&gt;attr&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="ea870e647b9ea89f6e12722c036f7bb3d691164f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;then(successCallback, [errorCallback], [notifyCallback])&lt;/code&gt; &amp;ndash; regardless of when the promise was or will be resolved or rejected, &lt;code&gt;then&lt;/code&gt; calls one of the success or error callbacks asynchronously as soon as the result is available. The callbacks are called with a single argument: the result or rejection reason. Additionally, the notify callback may be called zero or more times to provide a progress indication, before the promise is resolved or rejected.</source>
          <target state="translated">&lt;code&gt;then(successCallback, [errorCallback], [notifyCallback])&lt;/code&gt; &amp;ndash;无论何时或将要解决或拒绝promise， &lt;code&gt;then&lt;/code&gt; 在结果可用时立即异步调用成功或错误回调之一。使用单个参数调用回调：结果或拒绝原因。另外，在解决或拒绝承诺之前，通知回调可能被调用零次或多次以提供进度指示。</target>
        </trans-unit>
        <trans-unit id="d443cc9d4071a44cd6714aa6913e16543351cdf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; for chaining</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 用于链接</target>
        </trans-unit>
        <trans-unit id="d2d6fd71723f49cd4579527a989629fb9d4d03d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeSecondsFormat&lt;/code&gt;: Defines if the &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime-local&lt;/code&gt; types should show seconds and milliseconds. The option follows the format string of &lt;a href=&quot;../filter/date&quot;&gt;date filter&lt;/a&gt;. By default, the options is &lt;code&gt;undefined&lt;/code&gt; which is equal to &lt;code&gt;'ss.sss'&lt;/code&gt; (seconds and milliseconds). The other options are &lt;code&gt;'ss'&lt;/code&gt; (strips milliseconds), and &lt;code&gt;''&lt;/code&gt; (empty string), which strips both seconds and milliseconds. Note that browsers that support &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime-local&lt;/code&gt; require the hour and minutes part of the time string, and may show the value differently in the user interface. &lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;See the example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;timeSecondsFormat&lt;/code&gt; ：定义 &lt;code&gt;datetime-local&lt;/code&gt; &lt;code&gt;time&lt;/code&gt; 和日期时间类型是否应显示秒和毫秒。该选项遵循&lt;a href=&quot;../filter/date&quot;&gt;日期过滤器&lt;/a&gt;的格式字符串。默认情况下，选项是 &lt;code&gt;undefined&lt;/code&gt; ，等于 &lt;code&gt;'ss.sss'&lt;/code&gt; （秒和毫秒）。其他选项是 &lt;code&gt;'ss'&lt;/code&gt; （小数毫秒）和 &lt;code&gt;''&lt;/code&gt; （空字符串），这将同时去除秒和毫秒。请注意，支持 &lt;code&gt;time&lt;/code&gt; 和 &lt;code&gt;datetime-local&lt;/code&gt; 时间的浏览器需要时间字符串的小时和分钟部分，并且在用户界面中可能会显示不同的值。&lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;参见示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="228f9fa9bef945471bcee9dc6f546084669857e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeStripZeroSeconds&lt;/code&gt;: Defines if the &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;datetime-local&lt;/code&gt; types should strip the seconds and milliseconds from the formatted value if they are zero. This option is applied after &lt;code&gt;timeSecondsFormat&lt;/code&gt;. This option can be used to make the formatting consistent over different browsers, as some browsers with support for &lt;code&gt;time&lt;/code&gt; will natively hide the milliseconds and seconds if they are zero, but others won't, and browsers that don't implement these input types will always show the full string. &lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;See the example&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;timeStripZeroSeconds&lt;/code&gt; ：定义 &lt;code&gt;time&lt;/code&gt; 和 &lt;code&gt;datetime-local&lt;/code&gt; 时间类型是否应从格式值中减去秒和毫秒（如果它们为零）。此选项在 &lt;code&gt;timeSecondsFormat&lt;/code&gt; 之后应用。此选项可用于使格式在不同的浏览器上保持一致，因为某些支持 &lt;code&gt;time&lt;/code&gt; 浏览器将在本地隐藏毫秒和秒（如果它们为零），而其他的则不会，而未实现这些输入类型的浏览器将隐藏毫秒和秒。始终显示完整的字符串。&lt;a href=&quot;ngmodeloptions#formatting-the-value-of-time-and-datetime-local-.html&quot;&gt;参见示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a8cf0b2913a0db255f8c2c6df6d233dc95a24ffc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timezone&lt;/code&gt;: Defines the timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model for &lt;code&gt;&amp;lt;input type=&quot;date&quot; /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;time&quot; /&amp;gt;&lt;/code&gt;, ... . It understands UTC/GMT and the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;'+0430'&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian) If not specified, the timezone of the browser will be used. Note that changing the timezone will have no effect on the current date, and is only applied after the next input / model change.</source>
          <target state="translated">&lt;code&gt;timezone&lt;/code&gt; ：为 &lt;code&gt;&amp;lt;input type=&quot;date&quot; /&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;input type=&quot;time&quot; /&amp;gt;&lt;/code&gt; ，... 定义用于在模型中读写 &lt;code&gt;Date&lt;/code&gt; 实例的时区。它了解UTC / GMT和美国大陆时区的缩写，但是对于一般用途，请使用时区偏移量，例如 &lt;code&gt;'+0430'&lt;/code&gt; （格林威治子午线以东4小时30分钟）。如果未指定，则为使用浏览器。请注意，更改时区将对当前日期无效，并且仅在下一次输入/型号更改后才应用。</target>
        </trans-unit>
        <trans-unit id="1387f6c816d68d8c1111f49ddff0725feea9741e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to&lt;/code&gt; - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; -结束CSS样式（键/值对象），该样式将通过CSS过渡应用于整个动画。</target>
        </trans-unit>
        <trans-unit id="3d33e6e6f66d624736af3942dc236de0a529ac2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJSON&lt;/code&gt;: It returns a simple object without any of the extra properties added as part of the Resource API. This object can be serialized through &lt;a href=&quot;../../ng/function/angular.tojson&quot;&gt;&lt;code&gt;angular.toJson&lt;/code&gt;&lt;/a&gt; safely without attaching AngularJS-specific fields. Notice that &lt;code&gt;JSON.stringify&lt;/code&gt; (and &lt;code&gt;angular.toJson&lt;/code&gt;) automatically use this method when serializing a Resource instance (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior&quot;&gt;MDN&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;toJSON&lt;/code&gt; ：它返回一个简单的对象，而没有作为Resource API的一部分添加任何额外的属性。无需附加AngularJS特定字段，&lt;a href=&quot;../../ng/function/angular.tojson&quot;&gt; &lt;code&gt;angular.toJson&lt;/code&gt; &lt;/a&gt;安全地通过angular.toJson序列化此对象。请注意，序列化Resource实例时， &lt;code&gt;JSON.stringify&lt;/code&gt; （和 &lt;code&gt;angular.toJson&lt;/code&gt; ）自动使用此方法（请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior&quot;&gt;MDN&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b268b94b454ee57eb30bc251dc84638c344e172e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trackexpr&lt;/code&gt;: Used when working with an array of objects. The result of this expression will be used to identify the objects in the array. The &lt;code&gt;trackexpr&lt;/code&gt; will most likely refer to the &lt;code&gt;value&lt;/code&gt; variable (e.g. &lt;code&gt;value.propertyName&lt;/code&gt;). With this the selection is preserved even when the options are recreated (e.g. reloaded from the server).</source>
          <target state="translated">&lt;code&gt;trackexpr&lt;/code&gt; ：在处理对象数组时使用。该表达式的结果将用于标识数组中的对象。该 &lt;code&gt;trackexpr&lt;/code&gt; 将最有可能参考 &lt;code&gt;value&lt;/code&gt; 变量（如 &lt;code&gt;value.propertyName&lt;/code&gt; ）。这样，即使重新创建选项（例如，从服务器重新加载），选择也会保留。</target>
        </trans-unit>
        <trans-unit id="3f094ebe4b7290c61e9499ebb0b6c3b80541f847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transclude&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean=}&lt;/code&gt; &amp;ndash; whether &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;content transclusion&lt;/a&gt; is enabled. Disabled by default.</source>
          <target state="translated">&lt;code&gt;transclude&lt;/code&gt; &amp;ndash; &lt;code&gt;{boolean=}&lt;/code&gt; &amp;ndash;是否启用&lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;内容嵌入&lt;/a&gt;。默认禁用。</target>
        </trans-unit>
        <trans-unit id="847676ced2371e533c2148870bad52b1da205f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transclude&lt;/code&gt; - [&lt;em&gt;DEPRECATED&lt;/em&gt;!] A transclude linking function: &lt;code&gt;function(scope, cloneLinkingFn)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;transclude&lt;/code&gt; - [已&lt;em&gt;弃用&lt;/em&gt;！]一个 &lt;code&gt;function(scope, cloneLinkingFn)&lt;/code&gt; 链接函数：function（scope，cloneLinkingFn）</target>
        </trans-unit>
        <trans-unit id="65712ae8d4a77115277acd1f52e30f6601b939d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transcludeControllers&lt;/code&gt; - an object hash with keys that map controller names to a hash with the key &lt;code&gt;instance&lt;/code&gt;, which maps to the controller instance; if given, it will make the controllers available to directives on the compileNode:</source>
          <target state="translated">&lt;code&gt;transcludeControllers&lt;/code&gt; -具有键的对象散列，该键将控制器名称映射到具有键 &lt;code&gt;instance&lt;/code&gt; 的哈希，该实例映射到控制器实例；如果给定，它将使控制器可用于compileNode上的指令：</target>
        </trans-unit>
        <trans-unit id="37d92d08b7ef416b01c5f305b2c61d07d365d9cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transcludeFn&lt;/code&gt; - A transclude linking function pre-bound to the correct transclusion scope. This is the same as the &lt;code&gt;$transclude&lt;/code&gt; parameter of directive controllers, see &lt;a href=&quot;%24compile#-controller-.html&quot;&gt;the controller section for details&lt;/a&gt;. &lt;code&gt;function([scope], cloneLinkingFn, futureParentElement)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transcludeFn&lt;/code&gt; -预绑定到正确的包含范围的包含链接功能。这与指令控制器的 &lt;code&gt;$transclude&lt;/code&gt; 参数相同，&lt;a href=&quot;%24compile#-controller-.html&quot;&gt;有关详细信息&lt;/a&gt;，请参见控制器部分。 &lt;code&gt;function([scope], cloneLinkingFn, futureParentElement)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d16ff7ca5be8284ed85e6eb4694c10ec231342f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transcludeFn&lt;/code&gt; is a transclude linking function pre-bound to the correct transclusion scope.</source>
          <target state="translated">&lt;code&gt;transcludeFn&lt;/code&gt; 是预先绑定到正确包含范围的包含链接功能。</target>
        </trans-unit>
        <trans-unit id="ffb35396e95b58bb7c8f48a2fbe498f67c401065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transitionStyle&lt;/code&gt; - The raw CSS transition style that will be used (e.g. &lt;code&gt;1s linear all&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;transitionStyle&lt;/code&gt; -将使用的原始CSS过渡样式（例如 &lt;code&gt;1s linear all&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="acb77224c6ceb61fd094da2474b6ea580eb395e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; - the template will replace the directive's element.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; -模板将替换指令的元素。</target>
        </trans-unit>
        <trans-unit id="d1f524d3ded436a245165aaa4f109e71bf8b5f91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; - transclude the content (i.e. the child nodes) of the directive's element.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; - transclude指令的元素的含量（即子节点）。</target>
        </trans-unit>
        <trans-unit id="7564f800bc370a2796451ba70257f53a5325b839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if injector has given service.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 如果喷油器已送修，则为true。</target>
        </trans-unit>
        <trans-unit id="0d4ccfa8d3922c854b6dd6344e7f34130ef1d616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;{enabled: true}&lt;/code&gt; - see &lt;a href=&quot;%24location#html5-mode.html&quot;&gt;HTML5 mode&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;{enabled: true}&lt;/code&gt; -参见&lt;a href=&quot;%24location#html5-mode.html&quot;&gt;HTML5模式&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af162df4dc94fd9daba3aafea0161c62a70863fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;: A shorthand for &lt;code&gt;function(actual, expected) { return angular.equals(actual, expected)}&lt;/code&gt;. This is essentially strict comparison of expected and actual.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ： &lt;code&gt;function(actual, expected) { return angular.equals(actual, expected)}&lt;/code&gt; 简写{返回angular.equals（实际，期望）}。这本质上是期望值与实际值的严格比较。</target>
        </trans-unit>
        <trans-unit id="fbe4c50fd0a9abce8570e4e958c2d4e2146509ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are converted to &lt;code&gt;''&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 和 &lt;code&gt;null&lt;/code&gt; 转换为 &lt;code&gt;''&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c98b8e988d02e1ba1e97b4721ab935dd4f217c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;updateOn&lt;/code&gt;: string specifying which event should the input be bound to. You can set several events using an space delimited list. There is a special event called &lt;code&gt;default&lt;/code&gt; that matches the default events belonging to the control. These are the events that are bound to the control, and when fired, update the &lt;code&gt;$viewValue&lt;/code&gt; via &lt;code&gt;$setViewValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; ：指定输入应绑定到哪个事件的字符串。您可以使用空格分隔的列表设置多个事件。有一个名为 &lt;code&gt;default&lt;/code&gt; 的特殊事件，它与属于控件的默认事件匹配。这些是绑定到控件的事件，并发射时，更新 &lt;code&gt;$viewValue&lt;/code&gt; 通过 &lt;code&gt;$setViewValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29d95699dd6c95d5464de3151d2264f965e177b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;urlErrorParamsEnabled&lt;/code&gt;&lt;strong&gt;{Boolean}&lt;/strong&gt; - Specifies wether the generated error url will contain the parameters of the thrown error. Disabling the parameters can be useful if the generated error url is very long.</source>
          <target state="translated">&lt;code&gt;urlErrorParamsEnabled&lt;/code&gt; &lt;strong&gt;{Boolean}&lt;/strong&gt; -指定生成的错误url是否包含抛出的错误的参数。如果生成的错误网址很长，则禁用参数可能很有用。</target>
        </trans-unit>
        <trans-unit id="3eb74c0fa899bba332ead017a3a8b0909948754f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: local variable which will refer to each item in the &lt;code&gt;array&lt;/code&gt; or each property value of &lt;code&gt;object&lt;/code&gt; during iteration.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ：局部变量，它将在迭代期间引用 &lt;code&gt;array&lt;/code&gt; 每个项目或 &lt;code&gt;object&lt;/code&gt; 每个属性值。</target>
        </trans-unit>
        <trans-unit id="94509a804195595227a5cfe6a6953e645a82587d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable in expression as alias_expression&lt;/code&gt; &amp;ndash; You can also provide an optional alias expression which will then store the intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message when a filter is active on the repeater, but the filtered result set is empty.</source>
          <target state="translated">&lt;code&gt;variable in expression as alias_expression&lt;/code&gt; &amp;ndash;您还可以提供一个可选的别名表达式，该表达式将在应用过滤器后存储转发器的中间结果。通常，当转发器上的过滤器处于活动状态但过滤的结果集为空时，此消息用于呈现特殊消息。</target>
        </trans-unit>
        <trans-unit id="da0e272e8acc0a6195e3bcaf512b0a10321a73a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable in expression track by tracking_expression&lt;/code&gt; &amp;ndash; You can also provide an optional tracking expression which can be used to associate the objects in the collection with the DOM elements. If no tracking expression is specified, ng-repeat associates elements by identity. It is an error to have more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are mapped to the same DOM element, which is not possible.)</source>
          <target state="translated">&lt;code&gt;variable in expression track by tracking_expression&lt;/code&gt; &amp;ndash;您还可以提供一个可选的跟踪表达式，该表达式可用于将集合中的对象与DOM元素相关联。如果未指定跟踪表达式，则ng-repeat通过标识关联元素。多个跟踪表达式值解析为同一键是错误的。（这意味着将两个不同的对象映射到同一DOM元素，这是不可能的。）</target>
        </trans-unit>
        <trans-unit id="92f234e3ec0cb367320a3a220f4b20ef2167912e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable in expression&lt;/code&gt; &amp;ndash; where variable is the user defined loop variable and &lt;code&gt;expression&lt;/code&gt; is a scope expression giving the collection to enumerate.</source>
          <target state="translated">&lt;code&gt;variable in expression&lt;/code&gt; 中的变量&amp;ndash;其中，变量是用户定义的循环变量，而 &lt;code&gt;expression&lt;/code&gt; 是作用域表达式，用于给出要枚举的集合。</target>
        </trans-unit>
        <trans-unit id="334ac9044b19555f1050ecb68b25a14f4bb8c986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;which&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/which&quot;&gt;which&lt;/a&gt; for keyboard events (keydown, keypress, and keyup).</source>
          <target state="translated">&lt;code&gt;which&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/which&quot;&gt;该&lt;/a&gt;键盘事件（的keydown，按键和keyUp）。</target>
        </trans-unit>
        <trans-unit id="1ac658084647c61610cc182b520bbea0c2f421a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;: x-coordinates for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEvent&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEvent的&lt;/a&gt; x坐标。</target>
        </trans-unit>
        <trans-unit id="e77c7788c746962515a474a5d749e1a79e210076" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y&lt;/code&gt;: y-coordinates for &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEvent&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/MouseEvent&quot;&gt;MouseEvent&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/TouchEvent&quot;&gt;TouchEvent的&lt;/a&gt; y坐标。</target>
        </trans-unit>
        <trans-unit id="c7e687c0043c071c6aece0047f6ecce75d19741c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yOffset&lt;/code&gt; can be specified in various ways:</source>
          <target state="translated">&lt;code&gt;yOffset&lt;/code&gt; 可以通过多种方式指定：</target>
        </trans-unit>
        <trans-unit id="a617d5ce788306d35a28f1b23deafa05516a552c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': 'bar'}&lt;/code&gt; results in &lt;code&gt;foo=bar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{'foo': 'bar'}&lt;/code&gt; 结果为 &lt;code&gt;foo=bar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40f5e12482264d458011441d8acd229f0c146c27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': Date.now()}&lt;/code&gt; results in &lt;code&gt;foo=2015-04-01T09%3A50%3A49.262Z&lt;/code&gt; (&lt;code&gt;toISOString()&lt;/code&gt; and encoded representation of a Date object)</source>
          <target state="translated">&lt;code&gt;{'foo': Date.now()}&lt;/code&gt; 结果为 &lt;code&gt;foo=2015-04-01T09%3A50%3A49.262Z&lt;/code&gt; （ &lt;code&gt;toISOString()&lt;/code&gt; 和Date对象的编码表示形式）</target>
        </trans-unit>
        <trans-unit id="57485b09d81aab721ab707b73b044a684f8e5060" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': ['bar', 'baz']}&lt;/code&gt; results in &lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt; (repeated key for each array element)</source>
          <target state="translated">&lt;code&gt;{'foo': ['bar', 'baz']}&lt;/code&gt; 结果为 &lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt; （每个数组元素的重复键）</target>
        </trans-unit>
        <trans-unit id="d3da24ed0f0d4b7cfaff7dad39818886793dbdd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{'foo': {'bar':'baz'}}&lt;/code&gt; results in &lt;code&gt;foo=%7B%22bar%22%3A%22baz%22%7D&lt;/code&gt; (stringified and encoded representation of an object)</source>
          <target state="translated">&lt;code&gt;{'foo': {'bar':'baz'}}&lt;/code&gt; 结果为 &lt;code&gt;foo=%7B%22bar%22%3A%22baz%22%7D&lt;/code&gt; （对象的字符串化和编码表示）</target>
        </trans-unit>
        <trans-unit id="911108b4676c74e69e2c8a5425b9290805810576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{..., requireBase: true/false}&lt;/code&gt; (only affects HTML5 mode) - see &lt;a href=&quot;%24location#relative-links.html&quot;&gt;Relative links&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;{..., requireBase: true/false}&lt;/code&gt; （仅影响HTML5模式）-请参阅&lt;a href=&quot;%24location#relative-links.html&quot;&gt;相对链接&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b318179a9e271f3e2ae88a0a62abd131b8304a27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{..., rewriteLinks: true/false/'string'}&lt;/code&gt; (only affects HTML5 mode) - see &lt;a href=&quot;%24location#html-link-rewriting.html&quot;&gt;HTML link rewriting&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;{..., rewriteLinks: true/false/'string'}&lt;/code&gt; （仅影响HTML5模式）-请参见&lt;a href=&quot;%24location#html-link-rewriting.html&quot;&gt;HTML链接重写&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="54f251c1df022ee72aa09d55c18a4cad4642a15c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Array.&amp;lt;Object&amp;gt;}&lt;/code&gt; - route parameters extracted from the current &lt;code&gt;$location.path()&lt;/code&gt; by applying the current route</source>
          <target state="translated">&lt;code&gt;{Array.&amp;lt;Object&amp;gt;}&lt;/code&gt; - 通过应用当前路由从当前 &lt;code&gt;$location.path()&lt;/code&gt; 提取的路由参数</target>
        </trans-unit>
        <trans-unit id="d55397a3691fb7f16c2b68ceccf09396cffff1e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Object.&amp;lt;string&amp;gt;}&lt;/code&gt; - route parameters extracted from the current &lt;code&gt;$location.path()&lt;/code&gt; by applying the current route templateUrl.</source>
          <target state="translated">&lt;code&gt;{Object.&amp;lt;string&amp;gt;}&lt;/code&gt; - 通过应用当前路由templateUrl 从当前 &lt;code&gt;$location.path()&lt;/code&gt; 提取的路由参数。</target>
        </trans-unit>
        <trans-unit id="5dd320208f2f8b6bd9bf61c72c4ecba3a9f5f0df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{Object}&lt;/code&gt; - current &lt;code&gt;$location.search()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{Object}&lt;/code&gt; -当前 &lt;code&gt;$location.search()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2149ad1bd6c42b49cd543b148dfb2f6388d925cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{number=}&lt;/code&gt;&lt;code&gt;capacity&lt;/code&gt; &amp;mdash; turns the cache into LRU cache.</source>
          <target state="translated">&lt;code&gt;{number=}&lt;/code&gt; &lt;code&gt;capacity&lt;/code&gt; -将缓存变为LRU缓存。</target>
        </trans-unit>
        <trans-unit id="da407c21ae2fa7bb980f78d9a8da4ee25cc9f350" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{object}&lt;/code&gt;&lt;code&gt;info()&lt;/code&gt; &amp;mdash; Returns id, size, and options of cache.</source>
          <target state="translated">&lt;code&gt;{object}&lt;/code&gt; &lt;code&gt;info()&lt;/code&gt; &amp;mdash;返回ID，大小和缓存选项。</target>
        </trans-unit>
        <trans-unit id="3e3ad3b4a976be784d9931118a3ade95ac665494" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{string}&lt;/code&gt; - current &lt;code&gt;$location.path()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{string}&lt;/code&gt; -当前的 &lt;code&gt;$location.path()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c522d995b45e3440f20bd443030478095e596984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{void}&lt;/code&gt;&lt;code&gt;destroy()&lt;/code&gt; &amp;mdash; Removes references to this cache from $cacheFactory.</source>
          <target state="translated">&lt;code&gt;{void}&lt;/code&gt; &lt;code&gt;destroy()&lt;/code&gt; -从$ cacheFactory删除对此缓存的引用。</target>
        </trans-unit>
        <trans-unit id="e4a6fd63772f52f96e9f426f81d54c33fb4eb1c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{void}&lt;/code&gt;&lt;code&gt;remove({string} key)&lt;/code&gt; &amp;mdash; Removes a key-value pair from the cache.</source>
          <target state="translated">&lt;code&gt;{void}&lt;/code&gt; &lt;code&gt;remove({string} key)&lt;/code&gt; &amp;mdash;从缓存中删除一个键值对。</target>
        </trans-unit>
        <trans-unit id="18479675af1aa11b86509fba5caaf0f831d9057b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{void}&lt;/code&gt;&lt;code&gt;removeAll()&lt;/code&gt; &amp;mdash; Removes all cached values.</source>
          <target state="translated">&lt;code&gt;{void}&lt;/code&gt; &lt;code&gt;removeAll()&lt;/code&gt; &amp;mdash;删除所有缓存的值。</target>
        </trans-unit>
        <trans-unit id="1d36ed26057d8216f3c08e045608a09b11e71945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{*}}&lt;/code&gt;&lt;code&gt;get({string} key)&lt;/code&gt; &amp;mdash; Returns cached value for &lt;code&gt;key&lt;/code&gt; or undefined for cache miss.</source>
          <target state="translated">&lt;code&gt;{{*}}&lt;/code&gt; &lt;code&gt;get({string} key)&lt;/code&gt; &amp;mdash;返回 &lt;code&gt;key&lt;/code&gt; 缓存值，或者为缓存未命中返回未定义的值。</target>
        </trans-unit>
        <trans-unit id="a7970ce53d560ba63cd690ee2c2257e390612fa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{*}}&lt;/code&gt;&lt;code&gt;put({string} key, {*} value)&lt;/code&gt; &amp;mdash; Puts a new key-value pair into the cache and returns it.</source>
          <target state="translated">&lt;code&gt;{{*}}&lt;/code&gt; &lt;code&gt;put({string} key, {*} value)&lt;/code&gt; -将新的键值对放入缓存并返回。</target>
        </trans-unit>
        <trans-unit id="c158b45018b20241b7d64f0e6fb6c158205d5d3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{user.name}}&lt;/code&gt; matches the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;interpolation directive&lt;/a&gt; and &lt;code&gt;ng-repeat&lt;/code&gt; matches the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt; directive&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;{{user.name}}&lt;/code&gt; 匹配&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;插值指令&lt;/a&gt;， &lt;code&gt;ng-repeat&lt;/code&gt; 匹配&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; 指令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e726282d380a1534e9fad60131be5ac0b29e3297" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;$index&lt;/em&gt;: This special property tracks the collection items by their index, and re-uses the DOM elements that match that index, e.g. &lt;code&gt;item in items track by $index&lt;/code&gt;. This can be used for a performance improvement if no unique identfier is available and the identity of the collection items cannot be easily computed. It also allows duplicates.</source>
          <target state="translated">&lt;em&gt;$ index&lt;/em&gt;：此特殊属性按集合索引跟踪集合项，并重复使用与该索引匹配的DOM元素，例如 &lt;code&gt;item in items track by $index&lt;/code&gt; 。如果没有唯一的标识符，并且收集项目的身份无法轻松计算，则可以将其用于提高性能。它还允许重复。</target>
        </trans-unit>
        <trans-unit id="a044b72eb8a0781c9343b5af12f792aab95c9bcb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: 0)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（默认值：0）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e751ce11ad956dd90cd36a0afb9b0b1dcbe4b08c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: 2)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（默认值：2）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a816a476b72a253b7763dfcfe1c04c484bed8eaa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: false)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（默认值：false）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa5362d88f02d84c0f6072e31087130279fa90f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: this)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（默认值：此）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="98d2aadf95d2d40783636f5c4b85be8f3d958303" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(default: true)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;（默认值：true）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cbb24e41dd32901d004d12d257493c3c5c0bda11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(optional)&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;(optional)&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="754ecad7a95e3b7f4e5db644ceb0b025a5bf0881" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Accessing normalized attribute names:&lt;/em&gt; Directives like 'ngBind' can be expressed in many ways: 'ng:bind', &lt;code&gt;data-ng-bind&lt;/code&gt;, or 'x-ng-bind'. The attributes object allows for normalized access to the attributes.</source>
          <target state="translated">&lt;em&gt;Accessing normalized attribute names:&lt;/em&gt; Directives like 'ngBind' can be expressed in many ways: 'ng:bind', &lt;code&gt;data-ng-bind&lt;/code&gt; , or 'x-ng-bind'. The attributes object allows for normalized access to the attributes.</target>
        </trans-unit>
        <trans-unit id="e111c27e75a56741f56869876541081c8dedd0a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Caveat&lt;/em&gt;: While regular expressions are powerful and offer great flexibility, their syntax (and all the inevitable escaping) makes them &lt;em&gt;harder to maintain&lt;/em&gt;. It's easy to accidentally introduce a bug when one updates a complex expression (imho, all regexes should have good test coverage). For instance, the use of &lt;code&gt;.&lt;/code&gt; in the regex is correct only in a small number of cases. A &lt;code&gt;.&lt;/code&gt; character in the regex used when matching the scheme or a subdomain could be matched against a &lt;code&gt;:&lt;/code&gt; or literal &lt;code&gt;.&lt;/code&gt; that was likely not intended. It is highly recommended to use the string patterns and only fall back to regular expressions as a last resort.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：尽管正则表达式功能强大且具有很大的灵活性，但它们的语法（以及所有不可避免的转义）使它们&lt;em&gt;难以维护&lt;/em&gt;。当一个人更新一个复杂的表达式时，很容易意外地引入一个错误（恕我直言，所有正则表达式都应具有良好的测试覆盖率）。例如，使用 &lt;code&gt;.&lt;/code&gt; 正则表达式中的&amp;ldquo;仅在少数情况下是正确的&amp;rdquo;。一 &lt;code&gt;.&lt;/code&gt; 匹配方案或子域时使用的正则表达式中的字符可以与 &lt;code&gt;:&lt;/code&gt; 或原义字符匹配 &lt;code&gt;.&lt;/code&gt; 那可能不是故意的。强烈建议使用字符串模式，并且只有在万不得已时才使用正则表达式。</target>
        </trans-unit>
        <trans-unit id="e30982b90f66fca844979a6a9a4f7586be2a1a77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Custom Expression&lt;/em&gt;: It is possible to use any AngularJS expression to compute the tracking id, for example with a function, or using a property on the collection items. &lt;code&gt;item in items track by item.id&lt;/code&gt; is a typical pattern when the items have a unique identifier, e.g. database id. In this case the object identity does not matter. Two objects are considered equivalent as long as their &lt;code&gt;id&lt;/code&gt; property is same. Tracking by unique identifier is the most performant way and should be used whenever possible.</source>
          <target state="translated">&lt;em&gt;自定义表达式&lt;/em&gt;：可以使用任何AngularJS表达式来计算跟踪ID，例如使用函数或使用收集项上的属性。当项目具有唯一标识符（例如数据库ID）时， &lt;code&gt;item in items track by item.id&lt;/code&gt; 是一种典型模式。在这种情况下，对象身份无关紧要。只要两个对象的 &lt;code&gt;id&lt;/code&gt; 属性相同，就认为它们是等效的。通过唯一标识符进行跟踪是最有效的方式，应尽可能使用它。</target>
        </trans-unit>
        <trans-unit id="fb6033f7c259e56bf4d1d68342cdc278b40229d9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Default tracking: $id()&lt;/em&gt;: &lt;code&gt;item in items&lt;/code&gt; is equivalent to &lt;code&gt;item in items track by $id(item)&lt;/code&gt;. This implies that the DOM elements will be associated by item identity in the collection.</source>
          <target state="translated">&lt;em&gt;默认跟踪：$ id（）&lt;/em&gt;： &lt;code&gt;item in items&lt;/code&gt; 等同于 &lt;code&gt;item in items track by $id(item)&lt;/code&gt; 。这意味着DOM元素将通过集合中的项目标识关联。</target>
        </trans-unit>
        <trans-unit id="b852f0315e4ce34566ab5c876166ae5f304785c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Directive inter-communication:&lt;/em&gt; All directives share the same instance of the attributes object which allows the directives to use the attributes object as inter directive communication.</source>
          <target state="translated">&lt;em&gt;指令间通信：&lt;/em&gt;所有指令共享属性对象的相同实例，这允许指令将属性对象用作指令间通信。</target>
        </trans-unit>
        <trans-unit id="dacb1691370dfd3920557255152348a22cf3b5d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: This function is also published on window for easy access.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：此功能也发布在窗口上，以方便访问。</target>
        </trans-unit>
        <trans-unit id="b596967063bc267febec1b76dc2c374401a146b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: This function is declared ONLY WHEN running tests with jasmine or mocha</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：仅当使用茉莉或摩卡咖啡运行测试时，才声明此功能</target>
        </trans-unit>
        <trans-unit id="c0d3c19141a200045b21b9fcad67eb34dedcb2de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: This is not an injectable instance, just a globally available function.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：这不是可注入实例，只是全局可用的函数。</target>
        </trans-unit>
        <trans-unit id="e8fbdfd4557770e7bbafe78d8a96bbbde024637b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: this is not an injectable instance, just a globally available mock class of &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;注意&lt;/em&gt;：这不是可注入的实例，只是 &lt;code&gt;Date&lt;/code&gt; 的全局可用模拟类。</target>
        </trans-unit>
        <trans-unit id="ea949e8b6b51b83ce83927bd1d2ab8eed8069172" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Child links, buttons or other interactive controls must also be removed from the tab order.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注意：子链接，按钮或其他交互式控件也必须从选项卡顺序中删除。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca1bdf6fca422a6f0c552750122a3a2b40e96654" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: This directive is only available in the &lt;code&gt;ng-csp&lt;/code&gt; and &lt;code&gt;data-ng-csp&lt;/code&gt; attribute form.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注意：此伪指令仅在 &lt;code&gt;ng-csp&lt;/code&gt; 和 &lt;code&gt;data-ng-csp&lt;/code&gt; 属性形式下可用。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77a2682333273242b4c5e6bda8deff61d9bd60c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Observing interpolated attributes:&lt;/em&gt; Use &lt;code&gt;$observe&lt;/code&gt; to observe the value changes of attributes that contain interpolation (e.g. &lt;code&gt;src=&quot;{{bar}}&quot;&lt;/code&gt;). Not only is this very efficient but it's also the only way to easily get the actual value because during the linking phase the interpolation hasn't been evaluated yet and so the value is at this time set to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;观察插值属性：&lt;/em&gt;使用 &lt;code&gt;$observe&lt;/code&gt; 观察包含插值的属性的值变化（例如 &lt;code&gt;src=&quot;{{bar}}&quot;&lt;/code&gt; ）。这不仅非常有效，而且还是轻松获取实际值的唯一方法，因为在链接阶段尚未评估插值，因此此时将值设置为 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5aae482cd8880389624b85fc425ae110f5121a77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Please note&lt;/em&gt;: The browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy apply in addition to this and may further restrict whether the template is successfully loaded. This means that without the right CORS policy, loading templates from a different domain won't work on all browsers. Also, loading templates from &lt;code&gt;file://&lt;/code&gt; URL does not work on some browsers.</source>
          <target state="translated">&lt;em&gt;请注意&lt;/em&gt;：浏览器的&amp;ldquo; &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;相同来源策略&amp;rdquo;&lt;/a&gt;和&amp;ldquo; &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;跨域资源共享（CORS）&amp;rdquo;&lt;/a&gt;策略除此以外还适用，并且可能进一步限制模板是否成功加载。这意味着，如果没有正确的CORS策略，则无法在所有浏览器上都无法从其他域加载模板。同样，从 &lt;code&gt;file://&lt;/code&gt; URL 加载模板在某些浏览器上不起作用。</target>
        </trans-unit>
        <trans-unit id="8db5bad99fcd4bad5c64bc6f0cd52fe53c5671ef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Supports interpolation:&lt;/em&gt; Interpolation attributes are assigned to the attribute object allowing other directives to read the interpolated value.</source>
          <target state="translated">&lt;em&gt;支持插值：将&lt;/em&gt;插值属性分配给属性对象，允许其他指令读取插值。</target>
        </trans-unit>
        <trans-unit id="d36f936e1ce70c281c0f3b29312665e6e0fa9952" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This is fairly rare but could be the case if a third party library is injecting the markup.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;这是相当罕见的，但如果第三方库正在注入标记，则可能是这种情况。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="366e250bee7007fcaea094681e23e7a415c9b803" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This method is essentially an alias of &lt;a href=&quot;%24flushpendingtasks&quot;&gt;&lt;code&gt;$flushPendingTasks&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;此方法本质上是&lt;a href=&quot;%24flushpendingtasks&quot;&gt; &lt;code&gt;$flushPendingTasks&lt;/code&gt; &lt;/a&gt;的别名。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f0f567975629635167fbde2583ef0602afeaa7c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This method is essentially an alias of &lt;a href=&quot;%24verifynopendingtasks&quot;&gt;&lt;code&gt;$verifyNoPendingTasks&lt;/code&gt;&lt;/a&gt; (called with no arguments).&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;此方法本质上是&lt;a href=&quot;%24verifynopendingtasks&quot;&gt; &lt;code&gt;$verifyNoPendingTasks&lt;/code&gt; &lt;/a&gt;的别名（不带参数调用）。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3520b15297383cde81b70725936914a0e5c00b82" translate="yes" xml:space="preserve">
          <source>&lt;small id=&quot;drtvArray&quot;&gt;1. Multiple directives may be registered to the same selector/name&lt;/small&gt;</source>
          <target state="translated">&lt;small id=&quot;drtvArray&quot;&gt;1.多个指令可以注册到相同的选择器/名称&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="68b9d92a12caafebe3855b5e3346edcc26067843" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngclick&quot;&gt;ngClick&lt;/span&gt; and &lt;span id=&quot;ngdblclick&quot;&gt;ngDblclick&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngclick&quot;&gt;ngClick&lt;/span&gt;和&lt;span id=&quot;ngdblclick&quot;&gt;ngDblclick&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1f8e28fe31dc034c9871f375e6dfe2b703d202d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;'self'&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;'self'&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="015a1117f6703ba8bef821a627eaa71af0db5e6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;...&lt;/strong&gt;: any additional properties from the options object when creating the cache.</source>
          <target state="translated">&lt;strong&gt;...&lt;/strong&gt;：创建缓存时，options对象中的所有其他属性。</target>
        </trans-unit>
        <trans-unit id="a544b3a64559b2b7cd3fa3fe814e5954fe808a68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;action&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {string} &amp;ndash; The name of action. This name becomes the name of the method on your resource object.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;action&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {string} &amp;ndash;动作的名称。该名称成为资源对象上方法的名称。</target>
        </trans-unit>
        <trans-unit id="f808f87280400577500827dc90a1f628ac1389e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cache&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Cache}&lt;/code&gt; &amp;ndash; A boolean value or object created with &lt;a href=&quot;../../ng/service/%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt; to enable or disable caching of the HTTP response. See &lt;a href=&quot;../../ng/service/%24http#caching.html&quot;&gt;$http Caching&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;cache&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Cache}&lt;/code&gt; &amp;ndash;用&lt;a href=&quot;../../ng/service/%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;创建的布尔值或对象，用于启用或禁用HTTP响应的缓存。有关更多信息，请参见&lt;a href=&quot;../../ng/service/%24http#caching.html&quot;&gt; $ http缓存&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5cb11994b5e6616708f025693d6148ee298b90fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cancellable&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, the request made by a &quot;non-instance&quot; call will be cancelled (if not already completed) by calling &lt;code&gt;$cancelRequest()&lt;/code&gt; on the call's return value. Calling &lt;code&gt;$cancelRequest()&lt;/code&gt; for a non-cancellable or an already completed/cancelled request will have no effect.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;cancellable&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;如果为true，则通过在调用的返回值上调用 &lt;code&gt;$cancelRequest()&lt;/code&gt; 来取消&amp;ldquo;非实例&amp;rdquo;调用所发出的请求（如果尚未完成）。调用 &lt;code&gt;$cancelRequest()&lt;/code&gt; 来处理不可取消或已完成/已取消的请求将无效。</target>
        </trans-unit>
        <trans-unit id="d26a33190f844946474d7e0488694940a6da6635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cancellable&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash; If true, the request made by a &quot;non-instance&quot; call will be cancelled (if not already completed) by calling &lt;code&gt;$cancelRequest()&lt;/code&gt; on the call's return value. This can be overwritten per action. (Defaults to false.)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;cancellable&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash;如果为true，则通过在调用的返回值上调用 &lt;code&gt;$cancelRequest()&lt;/code&gt; 来取消&amp;ldquo;非实例&amp;rdquo;调用所发出的请求（如果尚未完成）。可以按操作将其覆盖。（默认为false。）</target>
        </trans-unit>
        <trans-unit id="2aa9849f2fa96ee47a768e94764889dff2b45b78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.cache&lt;/code&gt;&lt;/strong&gt; - {boolean|Object} - A boolean value or object created with &lt;a href=&quot;../service/%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt; to enable or disable caching of HTTP responses by default. See &lt;a href=&quot;../service/%24http#caching.html&quot;&gt;$http Caching&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.cache&lt;/code&gt; -&lt;/strong&gt; {boolean | Object}-使用&lt;a href=&quot;../service/%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;创建的布尔值或对象，默认情况下启用或禁用HTTP响应的缓存。有关更多信息，请参见&lt;a href=&quot;../service/%24http#caching.html&quot;&gt; $ http缓存&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26448d453ee4f5fa77860aaf5e8d2a0a8c02f8a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.common&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.common&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a19d9dca2d591347552c0f80f4943484d1fc595" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.patch&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.patch&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01250ad1bd780612d6896e760534ed4963daca0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.post&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.post&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3572907c9434da9a2cbd4aa1d71c3bcb51cc0c1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers.put&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;defaults.headers.put&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cecf31eef476a01c594653984af1546d95027cac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.headers&lt;/code&gt;&lt;/strong&gt; - {Object} - Default headers for all $http requests. Refer to &lt;a href=&quot;../service/%24http#setting-http-headers.html&quot;&gt;$http&lt;/a&gt; for documentation on setting default headers.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.headers&lt;/code&gt; -&lt;/strong&gt; {Object}-所有$ http请求的默认标题。请参阅&lt;a href=&quot;../service/%24http#setting-http-headers.html&quot;&gt; $ http&lt;/a&gt;以获取有关设置默认标题的文档。</target>
        </trans-unit>
        <trans-unit id="fc36634214d9ac2415c40c2549f7de1cb60e3feb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.jsonpCallbackParam&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - the name of the query parameter that passes the name of the callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the &lt;a href=&quot;../service/%24jsonpcallbacks&quot;&gt;&lt;code&gt;$jsonpCallbacks&lt;/code&gt;&lt;/a&gt; service. Defaults to &lt;code&gt;'callback'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.jsonpCallbackParam&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -即通过在一个JSONP请求回调名称的查询参数的名称。此参数的值将替换为&lt;a href=&quot;../service/%24jsonpcallbacks&quot;&gt; &lt;code&gt;$jsonpCallbacks&lt;/code&gt; &lt;/a&gt;服务生成的表达式。默认为 &lt;code&gt;'callback'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a58794246bb5fa501c3b1836a60304b9cf9bb59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.paramSerializer&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; - A function used to the prepare string representation of request parameters (specified as an object). If specified as string, it is interpreted as a function registered with the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Defaults to &lt;a href=&quot;../service/%24httpparamserializer&quot;&gt;$httpParamSerializer&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.paramSerializer&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; -用于请求参数准备的字符串表示（指定为对象）的函数。如果指定为字符串，则将其解释为在&lt;a href=&quot;../../auto/service/%24injector&quot;&gt; $ injector中&lt;/a&gt;注册的函数。默认为&lt;a href=&quot;../service/%24httpparamserializer&quot;&gt; $ httpParamSerializer&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="042a55b56f1a54d0925ee17b60cfc038408dcdb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.transformRequest&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter)&amp;gt;|function(data, headersGetter)}&lt;/code&gt; - An array of functions (or a single function) which are applied to the request data. By default, this is an array with one request transformation function:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.transformRequest&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter)&amp;gt;|function(data, headersGetter)}&lt;/code&gt; - ，其被应用到该请求数据的功能（或单个功能）的数组。默认情况下，这是一个具有一个请求转换功能的数组：</target>
        </trans-unit>
        <trans-unit id="be710c6b3bfc678c19bcab77b8a8b2eef9e9b20a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.transformResponse&lt;/code&gt;&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter, status)&amp;gt;|function(data, headersGetter, status)}&lt;/code&gt; - An array of functions (or a single function) which are applied to the response data. By default, this is an array which applies one response transformation function that does two things:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.transformResponse&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;function(data, headersGetter, status)&amp;gt;|function(data, headersGetter, status)}&lt;/code&gt; -的功能的阵列（或一个单一的功能），其被应用到响应数据。默认情况下，这是一个数组，它应用一个响应转换函数来完成两件事：</target>
        </trans-unit>
        <trans-unit id="4261b76b3fa76174bbb5b55b8872a690a00997de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.xsrfCookieName&lt;/code&gt;&lt;/strong&gt; - {string} - Name of cookie containing the XSRF token. Defaults value is &lt;code&gt;'XSRF-TOKEN'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.xsrfCookieName&lt;/code&gt; -&lt;/strong&gt; {字符串}-包含XSRF令牌的cookie的名称。默认值为 &lt;code&gt;'XSRF-TOKEN'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8167ea5cadbe074374e2a50533eb74dc4f94fc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;defaults.xsrfHeaderName&lt;/code&gt;&lt;/strong&gt; - {string} - Name of HTTP header to populate with the XSRF token. Defaults value is &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;defaults.xsrfHeaderName&lt;/code&gt; -&lt;/strong&gt; {string}-使用XSRF令牌填充的HTTP标头的名称。默认值为 &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b93d026301ec002f48aa1ac86163db37461abe45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;false&lt;/code&gt; (default):&lt;/strong&gt; No scope will be created for the directive. The directive will use its parent's scope.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;false&lt;/code&gt; （默认）：&lt;/strong&gt;将不会为指令创建范围。该指令将使用其父级的范围。</target>
        </trans-unit>
        <trans-unit id="5e9b13e113acd277b44549b14aae31153cec5b74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;hasBody&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, then the request will have a body. If not specified, then only POST, PUT and PATCH requests will have a body. *</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;hasBody&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;如果为true，则请求将具有正文。如果未指定，则只有POST，PUT和PATCH请求具有主体。 *</target>
        </trans-unit>
        <trans-unit id="d734241778e6e421ce70dbb15f7c7edc8059d04e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;interceptor&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object=}&lt;/code&gt; &amp;ndash; The interceptor object has four optional methods - &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;requestError&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt;, and &lt;code&gt;responseError&lt;/code&gt;. See &lt;a href=&quot;../../ng/service/%24http#interceptors.html&quot;&gt;$http interceptors&lt;/a&gt; for details. Note that &lt;code&gt;request&lt;/code&gt;/&lt;code&gt;requestError&lt;/code&gt; interceptors are applied before calling &lt;code&gt;$http&lt;/code&gt;, thus before any global &lt;code&gt;$http&lt;/code&gt; interceptors. Also, rejecting or throwing an error inside the &lt;code&gt;request&lt;/code&gt; interceptor will result in calling the &lt;code&gt;responseError&lt;/code&gt; interceptor. The resource instance or collection is available on the &lt;code&gt;resource&lt;/code&gt; property of the &lt;code&gt;http response&lt;/code&gt; object passed to &lt;code&gt;response&lt;/code&gt;/&lt;code&gt;responseError&lt;/code&gt; interceptors. Keep in mind that the associated promise will be resolved with the value returned by the response interceptors. Make sure you return an appropriate value and not the &lt;code&gt;response&lt;/code&gt; object passed as input. For reference, the default &lt;code&gt;response&lt;/code&gt; interceptor (which gets applied if you don't specify a custom one) returns &lt;code&gt;response.resource&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;interceptor&lt;/code&gt; &lt;/strong&gt; - &lt;code&gt;{Object=}&lt;/code&gt; -拦截器对象具有四个可选方法- &lt;code&gt;request&lt;/code&gt; ， &lt;code&gt;requestError&lt;/code&gt; ， &lt;code&gt;response&lt;/code&gt; ，和 &lt;code&gt;responseError&lt;/code&gt; 。有关详细信息，请参见&lt;a href=&quot;../../ng/service/%24http#interceptors.html&quot;&gt; $ http拦截器&lt;/a&gt;。注意，在调用 &lt;code&gt;$http&lt;/code&gt; 之前，先应用 &lt;code&gt;request&lt;/code&gt; / &lt;code&gt;requestError&lt;/code&gt; 拦截器，然后在所有全局 &lt;code&gt;$http&lt;/code&gt; 拦截器之前应用。同样，拒绝或在 &lt;code&gt;request&lt;/code&gt; 拦截器内引发错误将导致调用 &lt;code&gt;responseError&lt;/code&gt; 拦截器。资源实例或收集可用的 &lt;code&gt;resource&lt;/code&gt; 的属性 &lt;code&gt;http response&lt;/code&gt; 对象传递给 &lt;code&gt;response&lt;/code&gt; / &lt;code&gt;responseError&lt;/code&gt; 拦截器。请记住，将使用响应拦截器返回的值来解析关联的承诺。确保返回适当的值，而不是返回作为输入传递的 &lt;code&gt;response&lt;/code&gt; 对象。作为参考，默认的 &lt;code&gt;response&lt;/code&gt; 拦截器（如果您未指定自定义拦截器，则将应用）返回 &lt;code&gt;response.resource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e08864f200d427bae3213d382a4ee126b33b73be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isArray&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {boolean=} &amp;ndash; If true then the returned object for this action is an array, see &lt;code&gt;returns&lt;/code&gt; section.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;isArray&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {boolean =} &amp;ndash;如果为true，则此操作返回的对象是数组，请参见 &lt;code&gt;returns&lt;/code&gt; 部分。</target>
        </trans-unit>
        <trans-unit id="c72d3596d9a1d4896c0d5cb60a5cd09bf5574ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;method&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {string} &amp;ndash; Case insensitive HTTP method (e.g. &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;JSONP&lt;/code&gt;, etc).</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;method&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {string} &amp;ndash;不区分大小写的HTTP方法（例如 &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;PUT&lt;/code&gt; ， &lt;code&gt;DELETE&lt;/code&gt; ， &lt;code&gt;JSONP&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="aae376e10a8f77b6721b4bc1bf0c98819c82c0b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;params&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {Object=} &amp;ndash; Optional set of pre-bound parameters for this action. If any of the parameter value is a function, it will be called every time when a param value needs to be obtained for a request (unless the param was overridden). The function will be passed the current data value as an argument.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;params&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {Object =} &amp;ndash;此操作的可选预绑定参数集。如果任何参数值是一个函数，则每次需要为请求获取参数值时都将调用该参数值（除非该参数被覆盖）。该函数将作为参数传递当前数据值。</target>
        </trans-unit>
        <trans-unit id="e667830ad1b6b97bb07009b7b43101e62855c36c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType&quot;&gt;XMLHttpRequest.responseType&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;responseType&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType&quot;&gt; XMLHttpRequest.responseType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6f8bfd7bb40362c4448b97ea0540c59bda61b34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;stripTrailingSlashes&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash; If true then the trailing slashes from any calculated URL will be stripped. (Defaults to true.)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;stripTrailingSlashes&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {boolean} &amp;ndash;如果为true，则将从任何计算得出的URL的尾部斜杠中删除。（默认为true。）</target>
        </trans-unit>
        <trans-unit id="ee12f09df154c39b895e5f3233f8d96b41eb95d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; Timeout in milliseconds.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;timeout&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;超时（以毫秒为单位）。</target>
        </trans-unit>
        <trans-unit id="8860939df6552cef90fec239ad04c99010175f84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;transformRequest&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash; Transform function or an array of such functions. The transform function takes the http request body and headers and returns its transformed (typically serialized) version. By default, transformRequest will contain one function that checks if the request data is an object and serializes it using &lt;code&gt;angular.toJson&lt;/code&gt;. To prevent this behavior, set &lt;code&gt;transformRequest&lt;/code&gt; to an empty array: &lt;code&gt;transformRequest: []&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;transformRequest&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash;转换函数或此类函数的数组。转换函数采用http请求正文和标头，并返回其转换后的（通常是序列化的）版本。默认情况下，transformRequest将包含一个函数，该函数检查请求数据是否为对象并使用 &lt;code&gt;angular.toJson&lt;/code&gt; 对其进行序列化。为防止此行为，请将 &lt;code&gt;transformRequest&lt;/code&gt; 设置为一个空数组： &lt;code&gt;transformRequest: []&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4b07be3a2acec82f0b9a59f65ad187c54cc4a40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;transformResponse&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash; Transform function or an array of such functions. The transform function takes the HTTP response body, headers and status and returns its transformed (typically deserialized) version. By default, transformResponse will contain one function that checks if the response looks like a JSON string and deserializes it using &lt;code&gt;angular.fromJson&lt;/code&gt;. To prevent this behavior, set &lt;code&gt;transformResponse&lt;/code&gt; to an empty array: &lt;code&gt;transformResponse: []&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;transformResponse&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash;转换函数或此类函数的数组。转换函数采用HTTP响应正文，标头和状态，并返回其转换后的（通常是反序列化的）版本。默认情况下，transformResponse将包含一个函数，该函数检查响应是否看起来像JSON字符串，并使用 &lt;code&gt;angular.fromJson&lt;/code&gt; 将其反序列化。为防止此行为，请将 &lt;code&gt;transformResponse&lt;/code&gt; 设置为一个空数组： &lt;code&gt;transformResponse: []&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a0fb5bc58db9aba768f380cd413475c058f2676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;true&lt;/code&gt;:&lt;/strong&gt; A new child scope that prototypically inherits from its parent will be created for the directive's element. If multiple directives on the same element request a new scope, only one new scope is created.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;true&lt;/code&gt; ：&lt;/strong&gt;将为指令的元素创建一个原型继承自其父对象的新子作用域。如果同一元素上的多个指令要求一个新范围，则仅创建一个新范围。</target>
        </trans-unit>
        <trans-unit id="f954c335fa1c88b9e6f54185f3e45307c2692170" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;url&lt;/code&gt;&lt;/strong&gt; &amp;ndash; {string} &amp;ndash; Action specific &lt;code&gt;url&lt;/code&gt; override. The url templating is supported just like for the resource-level urls.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;url&lt;/code&gt; &lt;/strong&gt; &amp;ndash; {string} &amp;ndash;特定于操作的 &lt;code&gt;url&lt;/code&gt; 覆盖。就像资源级url一样，支持url模板。</target>
        </trans-unit>
        <trans-unit id="8282452aa2df4d7986a97ad42ae713ded09cdf66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;withCredentials&lt;/code&gt;&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Whether to set the &lt;code&gt;withCredentials&lt;/code&gt; flag on the XHR object. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials&quot;&gt;XMLHttpRequest.withCredentials&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;withCredentials&lt;/code&gt; &lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;是否在XHR对象上设置 &lt;code&gt;withCredentials&lt;/code&gt; 标志。有关更多信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials&quot;&gt; XMLHttpRequest.withCredentials&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5534420a1f0d70bfdf49536229b84023ea80de7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;{...}&lt;/code&gt; (an object hash):&lt;/strong&gt; - map elements of the content onto transclusion &quot;slots&quot; in the template.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;{...}&lt;/code&gt; （对象哈希）：&lt;/strong&gt; -将内容的元素映射到模板中的包含&amp;ldquo;槽&amp;rdquo;上。</target>
        </trans-unit>
        <trans-unit id="71dd11f48572c56893f6273d285f51870813fbcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;{...}&lt;/code&gt; (an object hash):&lt;/strong&gt; A new &quot;isolate&quot; scope is created for the directive's template. The 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent scope. This is useful when creating reusable components, which should not accidentally read or modify data in the parent scope. Note that an isolate scope directive without a &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; will not apply the isolate scope to its children elements.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;{...}&lt;/code&gt; （对象哈希）：&lt;/strong&gt;为指令的模板创建了一个新的&amp;ldquo;隔离&amp;rdquo;作用域。&amp;ldquo;隔离&amp;rdquo;作用域与常规作用域的不同之处在于，它不原型地继承自其父作用域。这在创建可重用的组件时很有用，这些组件不应意外读取或修改父范围中的数据。请注意，没有 &lt;code&gt;template&lt;/code&gt; 或 &lt;code&gt;templateUrl&lt;/code&gt; 的隔离范围指令不会将隔离范围应用于其子元素。</target>
        </trans-unit>
        <trans-unit id="55716f0cf97f955d54001576e8203120c29a8dd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Accessibility:&lt;/strong&gt;&lt;a href=&quot;guide/accessibility&quot;&gt;ngAria&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Accessibility:&lt;/strong&gt;&lt;a href=&quot;guide/accessibility&quot;&gt;ngAria&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32d5678c93da3911d14629087f800c16a9214e81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Advanced Routing:&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UI-Router&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;高级路由：&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UI-Router&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ec468f4ccb9634ebf835fc9cc003046af4d82e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An application is a tree of components:&lt;/strong&gt; Ideally, the whole application should be a tree of components that implement clearly defined inputs and outputs, and minimize two-way data binding. That way, it's easier to predict when data changes and what the state of a component is.</source>
          <target state="translated">&lt;strong&gt;一个应用程序是一个组件树：&lt;/strong&gt;理想情况下，整个应用程序应该是一个组件树，这些组件实现明确定义的输入和输出，并最小化双向数据绑定。这样，更容易预测数据何时更改以及组件的状态。</target>
        </trans-unit>
        <trans-unit id="fc3cbfeb9923528544cefb117bda81db350ba626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Analytics and Logging:&lt;/strong&gt;&lt;a href=&quot;http://ngmodules.org/modules/angularytics&quot;&gt;Angularytics (Google Analytics)&lt;/a&gt;, &lt;a href=&quot;https://github.com/luisfarzati/angulartics&quot;&gt;Angulartics (Analytics)&lt;/a&gt;, &lt;a href=&quot;http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm&quot;&gt;Logging Client-Side Errors&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;分析和日志记录：&lt;/strong&gt;&lt;a href=&quot;http://ngmodules.org/modules/angularytics&quot;&gt;Angularytics（Google Analytics &lt;/a&gt;&lt;a href=&quot;https://github.com/luisfarzati/angulartics&quot;&gt;（分析）&lt;/a&gt;），Angulartics（Analytics），&lt;a href=&quot;http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm&quot;&gt;记录客户端错误&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4f6be7f6dde452ce0886e715bc87ec6823e4a1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Animation:&lt;/strong&gt;&lt;a href=&quot;guide/animations&quot;&gt;Core concepts&lt;/a&gt;, &lt;a href=&quot;api/nganimate&quot;&gt;ngAnimate API&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;动画：&lt;/strong&gt;&lt;a href=&quot;guide/animations&quot;&gt;核心概念&lt;/a&gt;，&lt;a href=&quot;api/nganimate&quot;&gt;ngAnimate API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="278a6aea40fd074492b2bd66393c9b7aa694664a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Announcing changes&lt;/strong&gt;: When filtering or other UI messaging happens away from the user's focus, notify with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions&quot;&gt;ARIA Live Regions&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;宣布更改&lt;/strong&gt;：当过滤或其他UI消息传递发生在用户焦点之外时，请通过&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions&quot;&gt;ARIA Live Regions进行&lt;/a&gt;通知。</target>
        </trans-unit>
        <trans-unit id="4f18c14e214158a783463e0a863bdd40977505c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;App wiring:&lt;/strong&gt;&lt;a href=&quot;guide/di&quot;&gt;Dependency injection&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;应用接线：&lt;/strong&gt;&lt;a href=&quot;guide/di&quot;&gt;依赖注入&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fb419a1909e8e3b534b459c7f7480b57df90a1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attackers with local access can retrieve sensitive data from this cache even when users are not authenticated.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;具有本地访问权限的攻击者即使未通过用户身份验证，也可以从此缓存中检索敏感数据。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0404b26fa72f75ae0a463aa6f030e67901db44fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Authentication/Login: &lt;/strong&gt;&lt;a href=&quot;https://developers.google.com/+/photohunt/python&quot;&gt;Google example&lt;/a&gt;, &lt;a href=&quot;https://github.com/pc035860/angular-easyfb&quot;&gt;AngularJS Facebook library&lt;/a&gt;, &lt;a href=&quot;http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app&quot;&gt;Facebook example&lt;/a&gt;, &lt;a href=&quot;http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app&quot;&gt;authentication strategy&lt;/a&gt;, &lt;a href=&quot;http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/&quot;&gt;unix-style authorization&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;身份验证/登录：&lt;/strong&gt;&lt;a href=&quot;https://developers.google.com/+/photohunt/python&quot;&gt;Google示例&lt;/a&gt;，&lt;a href=&quot;https://github.com/pc035860/angular-easyfb&quot;&gt;AngularJS Facebook库&lt;/a&gt;，&lt;a href=&quot;http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app&quot;&gt;Facebook示例&lt;/a&gt;，&lt;a href=&quot;http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app&quot;&gt;身份验证策略&lt;/a&gt;，&lt;a href=&quot;http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/&quot;&gt;Unix风格的授权&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cb41941bf9973471001e39b14773894e1600d9ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Authentication:&lt;/strong&gt;&lt;a href=&quot;https://github.com/witoldsz/angular-http-auth&quot;&gt;Http Auth Interceptor&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;身份验证：&lt;/strong&gt;&lt;a href=&quot;https://github.com/witoldsz/angular-http-auth&quot;&gt;Http Auth拦截器&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3613cfafa439088ac45f401ceea5a3a7878004c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Be aware that marking untrusted data as safe via calls to &lt;a href=&quot;../api/ng/service/%24sce#trustAsHtml.html&quot;&gt;&lt;code&gt;$sce.trustAsHtml&lt;/code&gt;&lt;/a&gt;, etc is dangerous and will lead to Cross Site Scripting exploits.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;请注意，通过调用&lt;a href=&quot;../api/ng/service/%24sce#trustAsHtml.html&quot;&gt; &lt;code&gt;$sce.trustAsHtml&lt;/code&gt; &lt;/a&gt;等将不可信数据标记为安全是危险的，这将导致跨站点脚本利用。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3d1565baa0d8c0800213288fd11e963f8abddc9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Any operation which can be shared among the instance of directives should be moved to the compile function for performance reasons.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;出于性能考虑，应该在指令实例之间共享的任何操作都应移至编译函数。</target>
        </trans-unit>
        <trans-unit id="154a0af44d6ebb41a4e868d63cdb4d863d1d5ad4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Comment directives were commonly used in places where the DOM API limits the ability to create directives that spanned multiple elements (e.g. inside &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements). AngularJS 1.2 introduces &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat-start&lt;/code&gt; and &lt;code&gt;ng-repeat-end&lt;/code&gt;&lt;/a&gt; as a better solution to this problem. Developers are encouraged to use this over custom comment directives when possible.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;注释指令通常用于DOM API限制创建跨越多个元素（例如，在 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 元素内）的指令的能力。AngularJS 1.2引入了&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat-start&lt;/code&gt; 和 &lt;code&gt;ng-repeat-end&lt;/code&gt; &lt;/a&gt;作为对此问题的更好解决方案。鼓励开发人员尽可能在自定义注释指令上使用此方法。</target>
        </trans-unit>
        <trans-unit id="eec82de673765c49099d465321288990084a66d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Directives should clean up after themselves. You can use &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt; or &lt;code&gt;scope.$on('$destroy', ...)&lt;/code&gt; to run a clean-up function when the directive is removed.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;指令应自行清理。删除指令后 &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt; 可以使用element.on（'$ destroy'，...）或 &lt;code&gt;scope.$on('$destroy', ...)&lt;/code&gt; 运行清理功能。</target>
        </trans-unit>
        <trans-unit id="e208258b909cdfe75b3c3165f6e087ea396480bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; If you are working with objects that have a unique identifier property, you should track by this identifier instead of the object instance, e.g. &lt;code&gt;item in items track by item.id&lt;/code&gt;. Should you reload your data later, &lt;code&gt;ngRepeat&lt;/code&gt; will not have to rebuild the DOM elements for items it has already rendered, even if the JavaScript objects in the collection have been substituted for new ones. For large collections, this significantly improves rendering performance.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;如果您正在使用具有唯一标识符属性的对象，则应使用该标识符而不是对象实例 &lt;code&gt;item in items track by item.id&lt;/code&gt; ，例如，item by item.id跟踪的项目。如果以后再加载数据，即使集合中的JavaScript对象已替换为新对象， &lt;code&gt;ngRepeat&lt;/code&gt; 也不必为其已呈现的项目重建DOM元素。对于大型集合，这可以显着提高渲染性能。</target>
        </trans-unit>
        <trans-unit id="b23c4bfb3b2b379e51d133233ee4beb35c63fb4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; If your app will be used only in one locale, it is fine to rely on the default currency symbol. If you anticipate that viewers in other locales might use your app, you should explicitly provide a currency symbol.</source>
          <target state="translated">&lt;strong&gt;最佳做法：&lt;/strong&gt;如果您的应用仅在一种语言环境中使用，则可以依赖默认货币符号。如果您预计其他地区的查看者可能会使用您的应用，则应明确提供货币符号。</target>
        </trans-unit>
        <trans-unit id="eaa374cd5f757d0f8bdee6a83204e711ef11c463" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; In order to avoid collisions with some future standard, it's best to prefix your own directive names. For instance, if you created a &lt;code&gt;&amp;lt;carousel&amp;gt;&lt;/code&gt; directive, it would be problematic if HTML7 introduced the same element. A two or three letter prefix (e.g. &lt;code&gt;btfCarousel&lt;/code&gt;) works well. Similarly, do not prefix your own directives with &lt;code&gt;ng&lt;/code&gt; or they might conflict with directives included in a future version of AngularJS.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;为了避免与将来的某些标准发生冲突，最好在自己的指令名称前加上前缀。例如，如果您创建了 &lt;code&gt;&amp;lt;carousel&amp;gt;&lt;/code&gt; 指令，那么HTML7引入相同的元素将是有问题的。两个或三个字母前缀（例如 &lt;code&gt;btfCarousel&lt;/code&gt; ）效果很好。同样，不要在自己的指令前加上 &lt;code&gt;ng&lt;/code&gt; 前缀，否则它们可能与AngularJS未来版本中包含的指令冲突。</target>
        </trans-unit>
        <trans-unit id="e91a547aa7a90f5913cc0361874deea48265913c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; It's best to keep getters fast because AngularJS is likely to call them more frequently than other parts of your code.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;最好保持快速的getter，因为AngularJS调用它们的频率可能比代码的其他部分还要频繁。</target>
        </trans-unit>
        <trans-unit id="562ae68aa5a7c95fda85899cccdcbaf4ca298e2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; It's recommended to use the &quot;directive definition object&quot; form.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;建议使用&amp;ldquo;指令定义对象&amp;rdquo;形式。</target>
        </trans-unit>
        <trans-unit id="7a47336f4b17a025f5af5052c3624880d8987c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Keep the filtering function as lean as possible, because it will be called for each DOM action (e.g. insertion, removal, class change) performed by &quot;animation-aware&quot; directives. See &lt;a href=&quot;../../../guide/animations#which-directives-support-animations-.html&quot;&gt;here&lt;/a&gt; for a list of built-in directives that support animations. Performing computationally expensive or time-consuming operations on each call of the filtering function can make your animations sluggish.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;尽可能使过滤功能更简洁，因为将对&amp;ldquo;动画感知&amp;rdquo;指令执行的每个DOM操作（例如，插入，删除，类更改）调用该过滤功能。请参阅&lt;a href=&quot;../../../guide/animations#which-directives-support-animations-.html&quot;&gt;此处&lt;/a&gt;以获取支持动画的内置指令列表。在每次调用过滤函数时执行计算量大或耗时的操作会使动画变慢。</target>
        </trans-unit>
        <trans-unit id="42b89654abdc85c287788fb956a5415b67b03df9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Keep the filtering function as lean as possible, because it will be called for each DOM action (e.g. insertion, removal, class change) performed by &quot;animation-aware&quot; directives. See &lt;a href=&quot;animations#which-directives-support-animations-.html&quot;&gt;here&lt;/a&gt; for a list of built-in directives that support animations. Performing computationally expensive or time-consuming operations on each call of the filtering function can make your animations sluggish.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;尽可能使过滤功能更简洁，因为将对&amp;ldquo;动画感知&amp;rdquo;指令执行的每个DOM操作（例如，插入，删除，类更改）调用该过滤功能。请参阅&lt;a href=&quot;animations#which-directives-support-animations-.html&quot;&gt;此处&lt;/a&gt;以获取支持动画的内置指令列表。在每次调用过滤函数时执行计算量大或耗时的操作会使动画变慢。</target>
        </trans-unit>
        <trans-unit id="b204a0bc6447763a2a9eed14261cd6cb3e7bbf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Prefer using directives via tag name and attributes over comment and class names. Doing so generally makes it easier to determine what directives a given element matches.</source>
          <target state="translated">&lt;strong&gt;最佳实践：相&lt;/strong&gt;对于注释和类名称，更喜欢通过标签名称和属性使用指令。通常，这样做可以更轻松地确定给定元素与哪些指令匹配。</target>
        </trans-unit>
        <trans-unit id="ea37a8ba38693a6357c550cc3e8fed26616432d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Prefer using the dash-delimited format (e.g. &lt;code&gt;ng-bind&lt;/code&gt; for &lt;code&gt;ngBind&lt;/code&gt;). If you want to use an HTML validating tool, you can instead use the &lt;code&gt;data&lt;/code&gt;-prefixed version (e.g. &lt;code&gt;data-ng-bind&lt;/code&gt; for &lt;code&gt;ngBind&lt;/code&gt;). The other forms shown above are accepted for legacy reasons but we advise you to avoid them.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;不想使用短划线分隔的格式（例如 &lt;code&gt;ng-bind&lt;/code&gt; 为 &lt;code&gt;ngBind&lt;/code&gt; ）。如果你要使用HTML验证工具，可以改用 &lt;code&gt;data&lt;/code&gt; -prefixed版本（例如 &lt;code&gt;data-ng-bind&lt;/code&gt; 的 &lt;code&gt;ngBind&lt;/code&gt; ）。出于遗留原因，可以接受上面显示的其他表格，但是我们建议您避免使用它们。</target>
        </trans-unit>
        <trans-unit id="1082802fce10851c5a44b53099be49c1bff97de3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Unless your template is very small, it's typically better to break it apart into its own HTML file and load it with the &lt;code&gt;templateUrl&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;除非您的模板很小，否则通常最好将其分解成自己的HTML文件，然后使用 &lt;code&gt;templateUrl&lt;/code&gt; 选项将其加载。</target>
        </trans-unit>
        <trans-unit id="0a61c999a12dbbaaf9b15f01f05db8b33b1207d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; Use the &lt;code&gt;scope&lt;/code&gt; option to create isolate scopes when making components that you want to reuse throughout your app.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;制作要在整个应用程序中重复使用的组件时，请使用 &lt;code&gt;scope&lt;/code&gt; 选项创建隔离范围。</target>
        </trans-unit>
        <trans-unit id="cf3ab3a718158f6dc5f57a13fa63897bb4d9a05c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; name the factory functions as &lt;code&gt;&amp;lt;serviceId&amp;gt;Factory&lt;/code&gt; (e.g., apiTokenFactory). While this naming convention is not required, it helps when navigating the codebase or looking at stack traces in the debugger.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;将工厂功能命名为 &lt;code&gt;&amp;lt;serviceId&amp;gt;Factory&lt;/code&gt; （例如apiTokenFactory）。尽管不需要此命名约定，但在浏览代码库或在调试器中查看堆栈跟踪时，它会有所帮助。</target>
        </trans-unit>
        <trans-unit id="fd01d844b7cc208ec811e4a8e61f854e64737953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; only use &lt;code&gt;transclude: true&lt;/code&gt; when you want to create a directive that wraps arbitrary content.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;仅当要创建包装任意内容的指令时，才使用 &lt;code&gt;transclude: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7dedb89ac35c7defeb1581c33c4fe4fc5e767eb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; use &lt;code&gt;&amp;amp;attr&lt;/code&gt; in the &lt;code&gt;scope&lt;/code&gt; option when you want your directive to expose an API for binding to behaviors.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;当您希望指令公开用于绑定行为的API时，请在 &lt;code&gt;scope&lt;/code&gt; 选项中使用 &lt;code&gt;&amp;amp;attr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="494ca317afa0a1c099d1ccb6267751ae377ac8af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice:&lt;/strong&gt; use &lt;code&gt;controller&lt;/code&gt; when you want to expose an API to other directives. Otherwise use &lt;code&gt;link&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;最佳实践：&lt;/strong&gt;要向其他指令公开API时，请使用 &lt;code&gt;controller&lt;/code&gt; 。否则请使用 &lt;code&gt;link&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="afc296414277849789c9310271d222c899f7860a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice&lt;/strong&gt;: Always provide a &lt;code&gt;cloneFn&lt;/code&gt; (clone attach function) when you call a transclude function since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.</source>
          <target state="translated">&lt;strong&gt;最佳实践&lt;/strong&gt;：调用 &lt;code&gt;cloneFn&lt;/code&gt; 函数时，请始终提供cloneFn（克隆附加功能），因为这样您就可以获得原始DOM的新克隆，并且还可以访问新的包含范围。</target>
        </trans-unit>
        <trans-unit id="539e490e5b11ba68c8d7a1e07354c117dea53cef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Best Practice&lt;/strong&gt;: if you intend to add and remove transcluded content manually in your directive (by calling the transclude function to get the DOM and calling &lt;code&gt;element.remove()&lt;/code&gt; to remove it), then you are also responsible for calling &lt;code&gt;$destroy&lt;/code&gt; on the transclusion scope.</source>
          <target state="translated">&lt;strong&gt;最佳实践&lt;/strong&gt;：如果您打算在指令中手动添加和删除已包含内容的内容（通过调用transclude函数获取DOM并调用 &lt;code&gt;element.remove()&lt;/code&gt; 删除它），那么您还负责在包含中调用 &lt;code&gt;$destroy&lt;/code&gt; 范围。</target>
        </trans-unit>
        <trans-unit id="bb5ccbde708321e45669e8a636a6ff900cf5b928" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bootstrap:&lt;/strong&gt;&lt;a href=&quot;guide/bootstrap&quot;&gt;Bootstrapping an app&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;引导程序：&lt;/strong&gt;&lt;a href=&quot;guide/bootstrap&quot;&gt;引导应用程序&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ab44cfa01ef866a58f7f9728eb8d0893aec0fc94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Careful:&lt;/strong&gt; If you plan to &lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_(programming)&quot;&gt;minify&lt;/a&gt; your code, your service names will get renamed and break your app.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果您打算&lt;a href=&quot;http://en.wikipedia.org/wiki/Minification_(programming)&quot;&gt;精简&lt;/a&gt;代码，您的服务名称将被重命名并破坏您的应用程序。</target>
        </trans-unit>
        <trans-unit id="56179cbf2aff90b5b65d0a399af34f3432b2cd0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Color contrast and scale&lt;/strong&gt;: Make sure content is legible and interactive controls are usable at all screen sizes. Consider configurable UI themes for people with color blindness, low vision or other visual impairments.</source>
          <target state="translated">&lt;strong&gt;色彩对比度和比例&lt;/strong&gt;：确保内容清晰易读，并且交互式控件适用于所有屏幕尺寸。为有色盲，视力低下或其他视觉障碍的人考虑可配置的UI主题。</target>
        </trans-unit>
        <trans-unit id="ac547823d94131b4d29fe5107223764e7946bf5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Communicating with servers:&lt;/strong&gt;&lt;a href=&quot;api/ng/service/%24http&quot;&gt;$http&lt;/a&gt;, &lt;a href=&quot;api/ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;与服务器通信：&lt;/strong&gt;&lt;a href=&quot;api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt;，&lt;a href=&quot;api/ngresource/service/%24resource&quot;&gt;$ resource&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33029029bed4b443c712a3a281f8467c8da8dfc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compile:&lt;/strong&gt; traverse the DOM and collect all of the directives. The result is a linking function.</source>
          <target state="translated">&lt;strong&gt;编译：&lt;/strong&gt;遍历DOM并收集所有指令。结果是链接功能。</target>
        </trans-unit>
        <trans-unit id="0c95db3b1f38a8001b8fcd9ace33e6cdea0243f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components have a well-defined lifecycle:&lt;/strong&gt; Each component can implement &quot;lifecycle hooks&quot;. These are methods that will be called at certain points in the life of the component. The following hook methods can be implemented:</source>
          <target state="translated">&lt;strong&gt;组件具有明确定义的生命周期：&lt;/strong&gt;每个组件都可以实现&amp;ldquo;生命周期挂钩&amp;rdquo;。这些方法将在组件寿命中的某些时候调用。可以实现以下挂钩方法：</target>
        </trans-unit>
        <trans-unit id="dc33ce1740fb347751434152e84b19712b1a8f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components have a well-defined public API - Inputs and Outputs:&lt;/strong&gt; However, scope isolation only goes so far, because AngularJS uses two-way binding. So if you pass an object to a component like this - &lt;code&gt;bindings: {item: '='}&lt;/code&gt;, and modify one of its properties, the change will be reflected in the parent component. For components however, only the component that owns the data should modify it, to make it easy to reason about what data is changed, and when. For that reason, components should follow a few simple conventions:</source>
          <target state="translated">&lt;strong&gt;组件具有定义明确的公共API-输入和输出：&lt;/strong&gt;但是，作用域隔离到目前为止还没有进行，因为AngularJS使用双向绑定。因此，如果将对象传递给这样的组件 &lt;code&gt;bindings: {item: '='}&lt;/code&gt; ，并修改其属性之一，则更改将反映在父组件中。但是，对于组件而言，只有拥有数据的组件才可以对其进行修改，以使其易于推断出更改的数据以及更改时间。因此，组件应遵循一些简单的约定：</target>
        </trans-unit>
        <trans-unit id="fdbc3c0b82f0fdd2e38b13e622456e7527414d41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Components only control their own View and Data:&lt;/strong&gt; Components should never modify any data or DOM that is out of their own scope. Normally, in AngularJS it is possible to modify data anywhere in the application through scope inheritance and watches. This is practical, but can also lead to problems when it is not clear which part of the application is responsible for modifying the data. That is why component directives use an isolate scope, so a whole class of scope manipulation is not possible.</source>
          <target state="translated">&lt;strong&gt;组件仅控制自己的视图和数据：&lt;/strong&gt;组件绝不能修改超出其范围的任何数据或DOM。通常，在AngularJS中，可以通过作用域继承和监视在应用程序中的任何地方修改数据。这很实用，但是当不清楚应用程序的哪一部分负责修改数据时，也会导致问题。这就是为什么组件指令使用隔离范围的原因，因此无法进行整个范围的操作。</target>
        </trans-unit>
        <trans-unit id="ea5024441518186f1d8d19e15ff04550168838b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Context:&lt;/strong&gt; JavaScript expressions are evaluated against the global &lt;code&gt;window&lt;/code&gt;. In AngularJS, expressions are evaluated against a &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;strong&gt;上下文：&lt;/strong&gt; JavaScript表达式是根据全局 &lt;code&gt;window&lt;/code&gt; 计算的。在AngularJS中，表达式是根据&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;对象求值的。</target>
        </trans-unit>
        <trans-unit id="25b9d3e57b4590062259c3449266ebe5e34703c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller Definition:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;控制器定义：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c4eb25f46c9ed2a0a0131f2096bc9e0ff89ef620" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Controller Test:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;控制器测试：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d21e7e084fc25e99d1555970d47ff8a6c8ffc4a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Creation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Creation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d15196e2bb706cf7a298552f36e5aa63a4fa9578" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Custom directives to access the DOM&lt;/strong&gt;: In AngularJS, the only place where an application should access the DOM is within directives. This is important because artifacts that access the DOM are hard to test. If you need to access the DOM directly you should write a custom directive for this. The &lt;a href=&quot;directive&quot;&gt;directives guide&lt;/a&gt; explains how to do this.</source>
          <target state="translated">&lt;strong&gt;用于访问DOM的自定义指令&lt;/strong&gt;：在AngularJS中，应用程序唯一应访问DOM的地方是在指令内。这很重要，因为访问DOM的工件很难测试。如果您需要直接访问DOM，则应为此编写一个自定义指令。该&lt;a href=&quot;directive&quot;&gt;指令指南&lt;/a&gt;介绍了如何做到这一点。</target>
        </trans-unit>
        <trans-unit id="05f7e5084b082e3e86f79e93392adf8dab0cd628" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data Handling&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;数据处理&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cdcaa96f16edae165b34c183a8af244b806db88b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Debugging:&lt;/strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en&quot;&gt;Batarang&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Debugging:&lt;/strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en&quot;&gt;Batarang&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dcc6d0189a9829bde92474bed45b16ba9f9f0224" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3b88a22e2271f42fe87df0e187227576e5a9612" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.6.5)</source>
          <target state="translated">&lt;strong&gt;不推荐使用：（&lt;/strong&gt;自1.6.5开始）</target>
        </trans-unit>
        <trans-unit id="b336024f1362b00347db2024e13812fdfef548d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.7.0)</source>
          <target state="translated">&lt;strong&gt;不推荐使用：（&lt;/strong&gt;自1.7.0开始）</target>
        </trans-unit>
        <trans-unit id="9115d2a2f5f4763c5242dee073391a13ca26deff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt;(since 1.7.3)</source>
          <target state="translated">&lt;strong&gt;不推荐使用：（&lt;/strong&gt;自1.7.3开始）</target>
        </trans-unit>
        <trans-unit id="9962f993ae5f02cb5239548a1e42a4a3f263c7c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Django:&lt;/strong&gt;&lt;a href=&quot;http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework&quot;&gt;Tutorial&lt;/a&gt;, &lt;a href=&quot;http://django-angular.readthedocs.org/en/latest/integration.html&quot;&gt;Integrating AngularJS with Django&lt;/a&gt;, &lt;a href=&quot;http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html&quot;&gt;Getting Started with Django Rest Framework and AngularJS&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Django的：&lt;/strong&gt;&lt;a href=&quot;http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework&quot;&gt;教程&lt;/a&gt;，&lt;a href=&quot;http://django-angular.readthedocs.org/en/latest/integration.html&quot;&gt;使用Django整合AngularJS&lt;/a&gt;，&lt;a href=&quot;http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html&quot;&gt;入门Django的REST框架和AngularJS&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ea0aaeacdcb99323968249d0f4da6d418a46a63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use this property to attempt to modify the modules after the application has been bootstrapped.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;引导应用程序后，请勿使用此属性尝试修改模块。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35c64fc4414905e1dac355fee722a3b4f7563854" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editor support:&lt;/strong&gt;&lt;a href=&quot;http://plugins.jetbrains.com/plugin/6971&quot;&gt;Webstorm&lt;/a&gt; (and &lt;a href=&quot;http://www.youtube.com/watch?v=LJOyrSh1kDU&quot;&gt;video&lt;/a&gt;), &lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&quot;http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012&quot;&gt;Visual Studio&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular-ui/AngularJS-Atom&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://github.com/burnettk/vim-angular&quot;&gt;Vim&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;编辑器支持：&lt;/strong&gt;&lt;a href=&quot;http://plugins.jetbrains.com/plugin/6971&quot;&gt;Webstorm&lt;/a&gt;（和&lt;a href=&quot;http://www.youtube.com/watch?v=LJOyrSh1kDU&quot;&gt;视频&lt;/a&gt;），&lt;a href=&quot;https://github.com/angular-ui/AngularJS-sublime-package&quot;&gt;Sublime Text&lt;/a&gt;，&lt;a href=&quot;http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012&quot;&gt;Visual Studio&lt;/a&gt;，&lt;a href=&quot;https://github.com/angular-ui/AngularJS-Atom&quot;&gt;Atom&lt;/a&gt;，&lt;a href=&quot;https://github.com/burnettk/vim-angular&quot;&gt;Vim&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c918741e4ebe8c6f874a77e7b6b027496a491b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;End-to-End Testing:&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt;, &lt;a href=&quot;guide/e2e-testing&quot;&gt;e2e testing guide&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;端到端测试：&lt;/strong&gt;&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;量角器&lt;/a&gt;，&lt;strong&gt;端到端&lt;/strong&gt;&lt;a href=&quot;guide/e2e-testing&quot;&gt;测试指南&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5eb90a61d13dbb1be010d1d795ccea91ff166125" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;: Consider the following case.</source>
          <target state="translated">&lt;strong&gt;示例&lt;/strong&gt;：考虑以下情况。</target>
        </trans-unit>
        <trans-unit id="e6ff57a661932efb3d4a52d964964919eb790b57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exposing model to templates:&lt;/strong&gt;&lt;a href=&quot;guide/scope&quot;&gt;Scopes&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;将模型暴露于模板：&lt;/strong&gt;&lt;a href=&quot;guide/scope&quot;&gt;范围&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="29419687192edcb313a9e8cb642fbcf74067c9e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fileupload:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Fileupload:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="728ae224a4f3f6513bbafc04078c292e46e0bd3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Filters:&lt;/strong&gt; You can use &lt;a href=&quot;filter&quot;&gt;filters&lt;/a&gt; within expressions to format data before displaying it.</source>
          <target state="translated">&lt;strong&gt;过滤器：&lt;/strong&gt;您可以在表达式中使用&lt;a href=&quot;filter&quot;&gt;过滤器&lt;/a&gt;来格式化数据，然后再显示数据。</target>
        </trans-unit>
        <trans-unit id="e7c1fa4b2eaf7626d1792029e5b26b13d72fcf3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;FireBase:&lt;/strong&gt;&lt;a href=&quot;http://angularfire.com/&quot;&gt;AngularFire&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;Realtime Apps with AngularJS and FireBase (video)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;FireBase：&lt;/strong&gt;&lt;a href=&quot;http://angularfire.com/&quot;&gt;AngularFire&lt;/a&gt;，&lt;a href=&quot;http://www.youtube.com/watch?v=C7ZI7z7qnHU&quot;&gt;具有AngularJS和FireBase的实时应用程序（视频）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf84010d7a6b61f41ee63c802ccd44de864e5dba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Focus management&lt;/strong&gt;: Guide the user around the app as views are appended/removed. Focus should &lt;em&gt;never&lt;/em&gt; be lost, as this causes unexpected behavior and much confusion (referred to as &quot;freak-out mode&quot;).</source>
          <target state="translated">&lt;strong&gt;焦点管理&lt;/strong&gt;：随着视图的添加/删除，引导用户在应用程序周围。&lt;em&gt;永远&lt;/em&gt;不要失去焦点，因为这会导致意外的行为和很多混乱（称为&amp;ldquo;怪胎模式&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="2af7f91debc00c4d66b54ff27066486fa7fb3a61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For security purposes, it is strongly encouraged that web servers escape user-supplied data, replacing angle brackets (&amp;lt;, &amp;gt;) with &amp;amp;lt; and &amp;amp;gt; respectively, and replacing all interpolation start/end markers with their escaped counterparts.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;为了安全起见，强烈建议Web服务器转义用户提供的数据，用＆lt;代替尖括号（&amp;lt;，&amp;gt;）。和＆gt; 分别将所有插值开始/结束标记替换为其转义的对应标记。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b581a24703a37b7af937ecbc3944d0890b25a5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Forgiving:&lt;/strong&gt; In JavaScript, trying to evaluate undefined properties generates &lt;code&gt;ReferenceError&lt;/code&gt; or &lt;code&gt;TypeError&lt;/code&gt;. In AngularJS, expression evaluation is forgiving to &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;宽恕：&lt;/strong&gt;在JavaScript中，尝试评估未定义的属性会生成 &lt;code&gt;ReferenceError&lt;/code&gt; 或 &lt;code&gt;TypeError&lt;/code&gt; 。在AngularJS中，表达式求值允许为 &lt;code&gt;undefined&lt;/code&gt; 和 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="118ae1efbf212c1af6f2ec7a52d16996705f9a9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Free online:&lt;/strong&gt;&lt;a href=&quot;http://thinkster.io&quot;&gt;thinkster.io&lt;/a&gt;, &lt;a href=&quot;http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;CodeAcademy&lt;/a&gt;, &lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;CodeSchool&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;免费在线：&lt;/strong&gt;&lt;a href=&quot;http://thinkster.io&quot;&gt;thinkster.io&lt;/a&gt;，&lt;a href=&quot;http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1&quot;&gt;CodeAcademy&lt;/a&gt;，&lt;a href=&quot;https://www.codeschool.com/courses/shaping-up-with-angular-js&quot;&gt;CodeSchool&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e321247d81350096c762f426ea37a7f7f65c46b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;General UI Libraries:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;通用用户界面库：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c62cc2644917c0c78a5ad290cc5c9b4a3cbc9f21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;General options&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;常规选项&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="83069315cc099dddfa6736b90e27c48bdf031e5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generating AngularJS templates on the server containing user-provided content&lt;/strong&gt;. This is the most common pitfall where you are generating HTML via some server-side engine such as PHP, Java or ASP.NET.</source>
          <target state="translated">&lt;strong&gt;在服务器上生成包含用户提供的内容的AngularJS模板&lt;/strong&gt;。这是您通过某些服务器端引擎（例如PHP，Java或ASP.NET）生成HTML的最常见陷阱。</target>
        </trans-unit>
        <trans-unit id="b7704441aa8773f48d301f0f5b37cfd7c03c0699" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Getting Started:&lt;/strong&gt;&lt;a href=&quot;http://www.dancancro.com/comparison-of-angularjs-application-starters/&quot;&gt;Comparison of the options for starting a new project&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;入门：&lt;/strong&gt;&lt;a href=&quot;http://www.dancancro.com/comparison-of-angularjs-application-starters/&quot;&gt;开始新项目的选项比较&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d6b4902ff6c42ae4bb55caf32e3267d18fa47e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Google Cloud Platform:&lt;/strong&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/appengine-angular-gotodos&quot;&gt;with Go&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Google Cloud Platform：&lt;/strong&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/appengine-angular-gotodos&quot;&gt;使用Go&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc400a339550b52ce6b0be7cd10a7b9a81323f48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML Semantics&lt;/strong&gt;: If you're creating custom element directives, Web Components or HTML in general, use native elements wherever possible to utilize built-in events and properties. Alternatively, use ARIA to communicate semantic meaning. See &lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html&quot;&gt;notes on ARIA use&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;HTML语义&lt;/strong&gt;：如果通常要创建自定义元素指令，Web组件或HTML，请尽可能使用本机元素来利用内置事件和属性。或者，使用ARIA传达语义。请参阅&lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html&quot;&gt;有关ARIA使用的说明&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="772e80ba0b22ef620ca409833085ad693b23ee9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hood.ie:&lt;/strong&gt;&lt;a href=&quot;http://www.roberthorvick.com/2013/06/30/todomvc-angularjs-hood-ie-60-minutes-to-awesome/&quot;&gt;60 Minutes to Awesome&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Hood.ie：&lt;/strong&gt;&lt;a href=&quot;http://www.roberthorvick.com/2013/06/30/todomvc-angularjs-hood-ie-60-minutes-to-awesome/&quot;&gt;很棒的60分钟&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19085e0a2c5cd050d84b7d76363211819ff976a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If an attacker has access to control AngularJS templates or expressions, they can exploit an AngularJS application via an XSS attack, regardless of the version.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;如果攻击者有权控制AngularJS模板或表达式，则无论版本如何，他们都可以通过XSS攻击来利用AngularJS应用程序。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="deaff8edd96bc66f4727a4f3ab4978724f45f6e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you must continue to allow user-provided content in an AngularJS template then the safest option is to ensure that it is only present in the part of the template that is made inert via the &lt;a href=&quot;../api/ng/directive/ngnonbindable&quot;&gt;&lt;code&gt;ngNonBindable&lt;/code&gt;&lt;/a&gt; directive.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;如果必须继续允许用户在AngularJS模板中提供内容，那么最安全的选择是确保该内容仅存在于通过&lt;a href=&quot;../api/ng/directive/ngnonbindable&quot;&gt; &lt;code&gt;ngNonBindable&lt;/code&gt; &lt;/a&gt;指令变为惰性的模板部分中。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b01ec1aed4e21712373f6ba89f7d3b02564dd612" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input-type specific options&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;输入类型特定的选项&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="f943ecf537936d45c56dbe1a62ccb2ab16e8ccfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Internationalization and Localization:&lt;/strong&gt;&lt;a href=&quot;guide/i18n&quot;&gt;AngularJS Guide to i18n and l10n&lt;/a&gt;, &lt;a href=&quot;api/ng/filter/date&quot;&gt;date filter&lt;/a&gt;, &lt;a href=&quot;api/ng/filter/currency&quot;&gt;currency filter&lt;/a&gt;, &lt;a href=&quot;https://blog.novanet.no/creating-multilingual-support-using-angularjs/&quot;&gt;Creating multilingual support&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;国际化和本地化：&lt;/strong&gt;&lt;a href=&quot;guide/i18n&quot;&gt;AngularJS i18n和l10n指南&lt;/a&gt;，&lt;a href=&quot;api/ng/filter/date&quot;&gt;日期过滤器&lt;/a&gt;，&lt;a href=&quot;api/ng/filter/currency&quot;&gt;货币过滤器&lt;/a&gt;，&lt;a href=&quot;https://blog.novanet.no/creating-multilingual-support-using-angularjs/&quot;&gt;创建多语言支持&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13d22bd673d3e8b5f004e45768f0644ef8cf6802" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Internationalization and Localization:&lt;/strong&gt;&lt;a href=&quot;http://www.novanet.no/blog/hallstein-brotan/dates/2013/10/creating-multilingual-support-using-angularjs/&quot;&gt;Creating multilingual support&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;国际化和本地化：&lt;/strong&gt;&lt;a href=&quot;http://www.novanet.no/blog/hallstein-brotan/dates/2013/10/creating-multilingual-support-using-angularjs/&quot;&gt;创建多语言支持&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0e5f409cb2ee335a9867f4c6a6b23ca8aa2e621" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Internationalization:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Internationalization:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ea751c15b641e55b67020dc80776c68a6993488" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;It's best to design your application in such a way that users cannot change client-side templates.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最好以用户无法更改客户端模板的方式设计应用程序。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4bd2654d1202485a2e442179165da1e7c418c60d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Javascript minification: &lt;/strong&gt;&lt;a href=&quot;http://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/&quot;&gt;Background&lt;/a&gt;, &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate automation tool&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Javascript缩小：&lt;/strong&gt;&lt;a href=&quot;http://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/&quot;&gt;背景&lt;/a&gt;，&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng注释自动化工具&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="091f846e69bd67ba0e23902bb84fa8e87a680de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Life cycle: Pseudo-Code of &lt;code&gt;$apply()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;生命周期： &lt;code&gt;$apply()&lt;/code&gt; 伪代码&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="487183e5f206a39ee969219ee284ebe8a02babcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Link:&lt;/strong&gt; combine the directives with a scope and produce a live view. Any changes in the scope model are reflected in the view, and any user interactions with the view are reflected in the scope model. This makes the scope model the single source of truth.</source>
          <target state="translated">&lt;strong&gt;链接：&lt;/strong&gt;将指令与作用域结合在一起并产生实时视图。范围模型中的任何更改都将反映在视图中，并且用户与视图的任何交互都将反映在范围模型中。这使范围模型成为事实的唯一来源。</target>
        </trans-unit>
        <trans-unit id="96b3884d0059c68bd05c7315cffd0cf62ea0f114" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MEAN Stack: &lt;/strong&gt;&lt;a href=&quot;http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and&quot;&gt;Blog post&lt;/a&gt;, &lt;a href=&quot;http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/&quot;&gt;Setup&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/live/shows/913996610&quot;&gt;GDL Video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;MEAN Stack：&lt;/strong&gt;&lt;a href=&quot;http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and&quot;&gt;博客文章&lt;/a&gt;，&lt;a href=&quot;http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/&quot;&gt;设置&lt;/a&gt;，&lt;a href=&quot;https://developers.google.com/live/shows/913996610&quot;&gt;GDL视频&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2911fd9d126848f8eb1eed1ab9acba880de28cac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Manipulating HTML DOM programmatically:&lt;/strong&gt; Manipulating HTML DOM is a cornerstone of AJAX applications, but it's cumbersome and error-prone. By declaratively describing how the UI should change as your application state changes, you are freed from low-level DOM manipulation tasks. Most applications written with AngularJS never have to programmatically manipulate the DOM, although you can if you want to.</source>
          <target state="translated">&lt;strong&gt;以编程方式操纵HTML DOM：&lt;/strong&gt;操纵HTML DOM是AJAX应用程序的基石，但它既麻烦又容易出错。通过声明性地描述UI应如何随着应用程序状态的变化而变化，使您摆脱了底层DOM操作任务的束缚。尽管可以，但是大多数用AngularJS编写的应用程序都不必以编程方式操作DOM。</target>
        </trans-unit>
        <trans-unit id="ae65de1008d93ac10e5147e1a16fe4001e84f1a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Marshaling data to and from the UI:&lt;/strong&gt; CRUD operations make up the majority of AJAX applications' tasks. The flow of marshaling data from the server to an internal object to an HTML form, allowing users to modify the form, validating the form, displaying validation errors, returning to an internal model, and then back to the server, creates a lot of boilerplate code. AngularJS eliminates almost all of this boilerplate, leaving code that describes the overall flow of the application rather than all of the implementation details.</source>
          <target state="translated">&lt;strong&gt;往返于UI的数据封送处理：&lt;/strong&gt; CRUD操作构成了AJAX应用程序的大部分任务。从服务器到内部对象的编组数据流到HTML表单，允许用户修改表单，验证表单，显示验证错误，返回内部模型然后返回到服务器，这创建了大量样板码。AngularJS几乎消除了所有这些样板，只剩下描述应用程序整体流程而不是所有实现细节的代码。</target>
        </trans-unit>
        <trans-unit id="2a275a422f10bed3a56df7995304ed16eed43489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Meteor: &lt;/strong&gt;&lt;a href=&quot;https://github.com/Urigo/angular-meteor&quot;&gt;angular-meteor package&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;流星：&lt;/strong&gt;&lt;a href=&quot;https://github.com/Urigo/angular-meteor&quot;&gt;角流包&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db0671b387ecea8787251da7e07fd8e9fdaf4483" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Methods&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Methods&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6d8a78379558acab3af04cd587819d30c75521e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model mutation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;模型变异&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7086e1ce6f42d5fad9cba2e1f5646b1b825187cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mult-slot transclusion&lt;/strong&gt; is declared by providing an object for the &lt;code&gt;transclude&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;通过为 &lt;code&gt;transclude&lt;/code&gt; 属性提供一个对象来声明&lt;strong&gt;多时隙包含&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6659bd2912ce42ac1bdd194ad91b297788435e7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mutation observation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;突变观察&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b23529e246744b68c2bd6ef0af4dd7ff9830bcef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; Developers should take care in how and why they are modifying the &lt;code&gt;$delegate&lt;/code&gt; for the service. Not only should expectations for the consumer be kept, but some functionality (such as directive registration) does not take place after decoration, but during creation/registration of the original service. This means, for example, that an action such as pushing a directive object to a directive &lt;code&gt;$delegate&lt;/code&gt; will likely result in unexpected behavior. Furthermore, great care should be taken when decorating core services, directives, or filters as this may unexpectedly or adversely affect the functionality of the framework.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;开发人员应注意如何以及为何修改服务的 &lt;code&gt;$delegate&lt;/code&gt; 。不仅要保持对消费者的期望，而且某些功能（例如指令注册）不会在装饰后发生，而是在原始服务的创建/注册过程中发生。例如，这意味着诸如将指令对象推入指令 &lt;code&gt;$delegate&lt;/code&gt; 可能会导致意外行为。此外，在装饰核心服务，指令或过滤器时应格外小心，因为这可能会意外或不利地影响框架的功能。</target>
        </trans-unit>
        <trans-unit id="68ff0628f16e24ea841c9bf624378b977ece4f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; This guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;本指南面向已经熟悉AngularJS基础知识的开发人员。如果您只是入门，我们建议您先学习本&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;教程&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fdb079ff35eeaa09176e6b1ab92674e118487a5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: animations take effect only if the &lt;strong&gt;ngAnimate&lt;/strong&gt; module is loaded.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：仅当加载了&lt;strong&gt;ngAnimate&lt;/strong&gt;模块时，动画才会生效。</target>
        </trans-unit>
        <trans-unit id="29bce9ed0569284644bd5abffe0b6b3ff5ca463c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Bitwise, Comma, And Void Operators:&lt;/strong&gt; You cannot use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;Bitwise&lt;/a&gt;, &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;void&lt;/code&gt; operators in an AngularJS expression.</source>
          <target state="translated">&lt;strong&gt;不按位，逗号和虚空运营商：&lt;/strong&gt;不能使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&quot;&gt;按位&lt;/a&gt;， &lt;code&gt;,&lt;/code&gt; 或 &lt;code&gt;void&lt;/code&gt; 在AngularJS表达式运算符。</target>
        </trans-unit>
        <trans-unit id="ac0995069bdfdc8439b558ebbcd92d17a5af46db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Control Flow Statements:&lt;/strong&gt; You cannot use the following in an AngularJS expression: conditionals, loops, or exceptions.</source>
          <target state="translated">&lt;strong&gt;无控制流语句：&lt;/strong&gt;不能在AngularJS表达式中使用以下内容：条件，循环或异常。</target>
        </trans-unit>
        <trans-unit id="f763c2d5219a3a509a21ff61c916fa107b127c3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Function Declarations:&lt;/strong&gt; You cannot declare functions in an AngularJS expression, even inside &lt;code&gt;ng-init&lt;/code&gt; directive.</source>
          <target state="translated">&lt;strong&gt;没有函数声明：&lt;/strong&gt;即使在 &lt;code&gt;ng-init&lt;/code&gt; 指令内部，也不能在AngularJS表达式中声明函数。</target>
        </trans-unit>
        <trans-unit id="3111894aec8cae77ef6914c2f135257f6ecd663c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No Object Creation With New Operator:&lt;/strong&gt; You cannot use &lt;code&gt;new&lt;/code&gt; operator in an AngularJS expression.</source>
          <target state="translated">&lt;strong&gt;使用New运算符不创建对象：&lt;/strong&gt;不能在AngularJS表达式中使用 &lt;code&gt;new&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="4884a66d9e6f11c9d9f4d185ac827f2e5cf991df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No RegExp Creation With Literal Notation:&lt;/strong&gt; You cannot create regular expressions in an AngularJS expression. An exception to this rule is &lt;a href=&quot;../api/ng/directive/ngpattern&quot;&gt;&lt;code&gt;ng-pattern&lt;/code&gt;&lt;/a&gt; which accepts valid RegExp.</source>
          <target state="translated">&lt;strong&gt;没有使用文字表示法创建RegExp：&lt;/strong&gt;您无法在AngularJS表达式中创建正则表达式。&lt;a href=&quot;../api/ng/directive/ngpattern&quot;&gt; &lt;code&gt;ng-pattern&lt;/code&gt; &lt;/a&gt;是该规则的一个例外，它接受有效的RegExp。</target>
        </trans-unit>
        <trans-unit id="754b4f64006bb56947e7f8ed014b7227d3ff1a01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; All element references in AngularJS are always wrapped with jQuery or jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; AngularJS中的所有元素引用始终使用jQuery或jqLit​​e进行包装（例如指令的compile / link函数中的element参数）。它们绝不是原始的DOM引用。</target>
        </trans-unit>
        <trans-unit id="6bccc0e1ef7219cdcae1c7eee6b50dfe79beaa7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; An &quot;origin&quot; consists of the &lt;a href=&quot;https://en.wikipedia.org/wiki/URI_scheme&quot;&gt;URI scheme&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hostname&quot;&gt;hostname&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Port_(computer_networking&quot;&gt;port number&lt;/a&gt;. For &lt;code&gt;http:&lt;/code&gt; and &lt;code&gt;https:&lt;/code&gt;, the port number can be omitted if using th default ports (80 and 443 respectively). Examples: &lt;code&gt;http://example.com&lt;/code&gt;, &lt;code&gt;https://api.example.com:9876&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &amp;ldquo;来源&amp;rdquo;由&lt;a href=&quot;https://en.wikipedia.org/wiki/URI_scheme&quot;&gt;URI方案&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Hostname&quot;&gt;主机名&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Port_(computer_networking&quot;&gt;端口号组成&lt;/a&gt;。对于 &lt;code&gt;http:&lt;/code&gt; 和 &lt;code&gt;https:&lt;/code&gt; ：，如果使用默认端口（分别为80和443），则可以省略端口号。例如： &lt;code&gt;http://example.com&lt;/code&gt; ， &lt;code&gt;https://api.example.com:9876&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07d16e1f6d934f26fde4c4dbf393c311b322112b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; AngularJS directive attributes take either expressions &lt;em&gt;or&lt;/em&gt; interpolation markup with embedded expressions. It is considered &lt;strong&gt;bad practice&lt;/strong&gt; to embed interpolation markup inside an expression:</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; AngularJS指令属性采用带嵌入式表达式的表达式&lt;em&gt;或&lt;/em&gt;插值标记。将插值标记嵌入表达式中被认为是&lt;strong&gt;不好的做法&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="9f30dc881f403b4408bffc55af0c839141d80f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; AngularJS does not make a copy of the &lt;code&gt;data&lt;/code&gt; parameter before it is passed into the &lt;code&gt;transformRequest&lt;/code&gt; pipeline. That means changes to the properties of &lt;code&gt;data&lt;/code&gt; are not local to the transform function (since Javascript passes objects by reference). For example, when calling &lt;code&gt;$http.get(url, $scope.myObject)&lt;/code&gt;, modifications to the object's properties in a transformRequest function will be reflected on the scope and in any templates where the object is data-bound. To prevent this, transform functions should have no side-effects. If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; AngularJS在将 &lt;code&gt;data&lt;/code&gt; 参数传递到 &lt;code&gt;transformRequest&lt;/code&gt; 管道之前不会对其进行复制。这意味着对 &lt;code&gt;data&lt;/code&gt; 属性的更改对于转换函数而言不是局部的（因为Javascript通过引用传递对象）。例如，当调用 &lt;code&gt;$http.get(url, $scope.myObject)&lt;/code&gt; ，对transformRequest函数中对象属性的修改将反映在范围和对象绑定数据的任何模板中。为避免这种情况，变换函数应该没有副作用。如果需要修改属性，建议制作数据副本或创建要返回的新对象。</target>
        </trans-unit>
        <trans-unit id="62e8d769efbb38bebbae56179db43581fb022339" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; AngularJS uses &lt;a href=&quot;http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/&quot;&gt;&lt;strong&gt;constructor injection&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; AngularJS使用&lt;a href=&quot;http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/&quot;&gt;&lt;strong&gt;构造函数注入&lt;/strong&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea8f867f10d41b8ea0eac218ad0e389751b74337" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Any unspecified options will use the default value. You can see the default values below.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;任何未指定的选项将使用默认值。您可以在下面看到默认值。</target>
        </trans-unit>
        <trans-unit id="0be1272e4ff520c7319bf0af92eafbe034baf447" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Avoid using the &lt;code&gt;g&lt;/code&gt; flag on the RegExp, as it will cause each successive search to start at the index of the last search's match, thus not taking the whole input value into account.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;避免在RegExp上使用 &lt;code&gt;g&lt;/code&gt; 标志，因为它会导致每个连续的搜索都从上次搜索的匹配项的索引处开始，因此不会考虑整个输入值。</target>
        </trans-unit>
        <trans-unit id="9646681f60adbf1cab980b4c3672b602175ba12b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not bootstrap the app on an element with a directive that uses &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt;, such as &lt;a href=&quot;../directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;请勿将应用程序引导到使用诸如&lt;a href=&quot;../directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; 之&lt;/a&gt;类的使用&lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;包含&lt;/a&gt;指令的元素。这样做会放错应用程序&lt;a href=&quot;../service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;和应用程序的&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;注射器的位置&lt;/a&gt;，从而导致动画停止工作并使注射器无法从应用程序外部访问。</target>
        </trans-unit>
        <trans-unit id="ee7d1df2da097b762e8500ab2bc8acc5c59dd5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Filter names must be valid AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;&lt;code&gt;Expressions&lt;/code&gt;&lt;/a&gt; identifiers, such as &lt;code&gt;uppercase&lt;/code&gt; or &lt;code&gt;orderBy&lt;/code&gt;. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (&lt;code&gt;myappSubsectionFilterx&lt;/code&gt;) or underscores (&lt;code&gt;myapp_subsection_filterx&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;过滤器名称必须是有效的AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt; &lt;code&gt;Expressions&lt;/code&gt; &lt;/a&gt;标识符，例如 &lt;code&gt;uppercase&lt;/code&gt; 或 &lt;code&gt;orderBy&lt;/code&gt; 。不允许使用带有特殊字符的名称，例如连字符和点。如果希望为过滤器命名空间，则可以使用大写字母（ &lt;code&gt;myappSubsectionFilterx&lt;/code&gt; ）或下划线（ &lt;code&gt;myapp_subsection_filterx&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b6db5293b8274f7a74ad2c0a15707b9a31946b87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Filter names must be valid AngularJS &lt;a href=&quot;expression&quot;&gt;&lt;code&gt;Expressions&lt;/code&gt;&lt;/a&gt; identifiers, such as &lt;code&gt;uppercase&lt;/code&gt; or &lt;code&gt;orderBy&lt;/code&gt;. Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace your filters, then you can use capitalization (&lt;code&gt;myappSubsectionFilterx&lt;/code&gt;) or underscores (&lt;code&gt;myapp_subsection_filterx&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;过滤器名称必须是有效的AngularJS &lt;a href=&quot;expression&quot;&gt; &lt;code&gt;Expressions&lt;/code&gt; &lt;/a&gt;标识符，例如 &lt;code&gt;uppercase&lt;/code&gt; 或 &lt;code&gt;orderBy&lt;/code&gt; 。不允许使用带有特殊字符的名称，例如连字符和点。如果希望为过滤器命名空间，则可以使用大写字母（ &lt;code&gt;myappSubsectionFilterx&lt;/code&gt; ）或下划线（ &lt;code&gt;myapp_subsection_filterx&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="09b3de40dff5562853d96db36635c9e72bd0fad2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If present, &lt;code&gt;classNameFilter&lt;/code&gt; will be checked after &lt;a href=&quot;%24animateprovider#customFilter.html&quot;&gt;customFilter&lt;/a&gt;. If &lt;code&gt;customFilter&lt;/code&gt; is present and returns false, &lt;code&gt;classNameFilter&lt;/code&gt; will not be checked.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果存在，将在&lt;a href=&quot;%24animateprovider#customFilter.html&quot;&gt;customFilter&lt;/a&gt;之后检查 &lt;code&gt;classNameFilter&lt;/code&gt; 。如果存在 &lt;code&gt;customFilter&lt;/code&gt; 并返回false，则不会检查 &lt;code&gt;classNameFilter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29f87520727c565590339f924ac7cca7cfc0196b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If present, &lt;code&gt;customFilter&lt;/code&gt; will be checked before &lt;a href=&quot;%24animateprovider#classNameFilter.html&quot;&gt;classNameFilter&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果存在， &lt;code&gt;customFilter&lt;/code&gt; 在&lt;a href=&quot;%24animateprovider#classNameFilter.html&quot;&gt;classNameFilter&lt;/a&gt;之前检查customFilter。</target>
        </trans-unit>
        <trans-unit id="8336bca83b29dfc525f1cedfe875ac2325965bd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the predicate is missing or empty then it defaults to &lt;code&gt;'+'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果谓词丢失或为空，则默认为 &lt;code&gt;'+'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb48c215391d9e21f60d1b4f3e5128f35325a987" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you notice numbers not being sorted as expected, make sure they are actually being saved as numbers and not strings. &lt;strong&gt;Note:&lt;/strong&gt; For the purpose of sorting, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are considered &quot;greater than&quot; any other value (with undefined &quot;greater than&quot; null). This effectively means that &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values end up at the end of a list sorted in ascending order. &lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;null&lt;/code&gt; values use &lt;code&gt;'null'&lt;/code&gt; as their type to be able to distinguish them from objects.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果您发现数字未按预期排序，请确保将其实际保存为数字而不是字符串。&lt;strong&gt;注意：&lt;/strong&gt;为了进行排序，将 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 视为&amp;ldquo;大于&amp;rdquo;任何其他值（undefined为&amp;ldquo;大于&amp;rdquo; null）。这实际上意味着 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 值最终会出现在以升序排序的列表的末尾。&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt; 值使用 &lt;code&gt;'null'&lt;/code&gt; 作为其类型，以便能够将它们与对象区分开。</target>
        </trans-unit>
        <trans-unit id="7dcfa7bc4217aa09ca0ac15abc5df872e42c3cb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If your scope already contains a property with this name, it will be hidden or overwritten. Make sure, you specify an appropriate name for this property, that does not collide with other properties on the scope.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果作用域已经包含具有该名称的属性，则它将被隐藏或覆盖。确保为此属性指定一个适当的名称，该名称不会与合并范围上的其他属性冲突。</target>
        </trans-unit>
        <trans-unit id="6de6d75d2a08de0ddaf214e94f5c491a4f41f785" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In contrast to &lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$http.config&lt;/a&gt;, &lt;a href=&quot;../../ng/service/%24q&quot;&gt;promises&lt;/a&gt; are &lt;strong&gt;not&lt;/strong&gt; supported in &lt;code&gt;$resource&lt;/code&gt;, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the &lt;code&gt;cancellable&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;相较于&lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$ http.config&lt;/a&gt;，&lt;a href=&quot;../../ng/service/%24q&quot;&gt;承诺&lt;/a&gt;是&lt;strong&gt;不&lt;/strong&gt;支持的 &lt;code&gt;$resource&lt;/code&gt; ，因为相同的值将被用于多个请求。如果您正在寻找取消请求的方法，则应使用 &lt;code&gt;cancellable&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="2a9960a1716b955d15c8ef82b1ff61b1bfaa4a68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Keep in mind that &lt;code&gt;angular.extend&lt;/code&gt; does not support recursive merge (deep copy). Use &lt;a href=&quot;angular.merge&quot;&gt;&lt;code&gt;angular.merge&lt;/code&gt;&lt;/a&gt; for this.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;请记住， &lt;code&gt;angular.extend&lt;/code&gt; 不支持递归合并（深度复制）。为此使用&lt;a href=&quot;angular.merge&quot;&gt; &lt;code&gt;angular.merge&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a737670eed793e3a7f5e79a30adcd1dd5cf06a3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Keep in mind that this function will not find elements by tag name / CSS selector. For lookups by tag name, try instead &lt;code&gt;angular.element(document).find(...)&lt;/code&gt; or &lt;code&gt;$document.find()&lt;/code&gt;, or use the standard DOM APIs, e.g. &lt;code&gt;document.querySelectorAll()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;请记住，此功能将不会通过标签名称/ CSS选择器来查找元素。对于按标记名进行查找，请改用 &lt;code&gt;angular.element(document).find(...)&lt;/code&gt; 或 &lt;code&gt;$document.find()&lt;/code&gt; ，或使用标准DOM API，例如 &lt;code&gt;document.querySelectorAll()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25007ddb7e4598a0075b438ca00a30fc96476806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Like other core AngularJS identifiers, built-in services always start with &lt;code&gt;$&lt;/code&gt; (e.g. &lt;code&gt;$http&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;与其他核心AngularJS标识符一样，内置服务始终以 &lt;code&gt;$&lt;/code&gt; 开头（例如 &lt;code&gt;$http&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4932f6167e601a77c161e5c189cbfa99ccc31644" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Normally, a scope prototypically inherits from its parent. An isolated scope does not. See the &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;&quot;Directive Definition Object - scope&quot;&lt;/a&gt; section for more information about isolate scopes.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;通常，范围原型是从其父级继承的。孤立的作用域则没有。有关隔离范围的更多信息，请参见&lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;&amp;ldquo;指令定义对象-范围&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="1da042f7bf95ae6c4e993f7e979d273468251963" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not every feature offered is available for all input types. Specifically, data binding and event handling via &lt;code&gt;ng-model&lt;/code&gt; is unsupported for &lt;code&gt;input[file]&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;并非所有提供的功能都适用于所有输入类型。具体来说， &lt;code&gt;input[file]&lt;/code&gt; 不支持通过 &lt;code&gt;ng-model&lt;/code&gt; 进行数据绑定和事件处理。</target>
        </trans-unit>
        <trans-unit id="43c9bbd85138c973366badefbee28f8a58515f29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Passing a &lt;code&gt;transclude&lt;/code&gt; function to the $compile function is deprecated, as it e.g. will not use the right outer scope. Please pass the transclude function as a &lt;code&gt;parentBoundTranscludeFn&lt;/code&gt; to the link function instead.</source>
          <target state="translated">&lt;strong&gt;注意：不建议&lt;/strong&gt;将 &lt;code&gt;transclude&lt;/code&gt; 函数传递给$ compile函数，因为它例如将不会使用正确的外部范围。请改为将 &lt;code&gt;parentBoundTranscludeFn&lt;/code&gt; 函数作为parentBoundTranscludeFn传递给链接函数。</target>
        </trans-unit>
        <trans-unit id="0c375e47ef7907278cde581e097943b5b5c842c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Protractor based end-to-end tests cannot use this function to bootstrap manually. They must use &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;基于量角器的端到端测试不能使用此功能手动引导。他们必须使用&lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8cf1ad8dcecbe51df5c09b1d4e999791e1bdb417" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Re-using DOM elements can have unforeseen effects. Read the &lt;a href=&quot;ngrepeat#tracking-and-duplicates.html&quot;&gt;section on tracking and duplicates&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;重复使用DOM元素会产生无法预料的影响。阅读&lt;a href=&quot;ngrepeat#tracking-and-duplicates.html&quot;&gt;有关跟踪和重复项&lt;/a&gt;的部分以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="64d9e466303a2306994cdaf48132f8a30be292b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;transclude&lt;/code&gt; function that is passed to the compile function is deprecated, as it e.g. does not know about the right outer scope. Please use the transclude function that is passed to the link function instead.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;不推荐使用传递给compile函数的 &lt;code&gt;transclude&lt;/code&gt; 函数，因为它例如不知道正确的外部作用域。请改用传递给link函数的transclude函数。</target>
        </trans-unit>
        <trans-unit id="1d372d7dabca924b84525cbea0b2c53815c203cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The compile function cannot handle directives that recursively use themselves in their own templates or compile functions. Compiling these directives results in an infinite loop and stack overflow errors. This can be avoided by manually using $compile in the postLink function to imperatively compile a directive's template instead of relying on automatic template compilation via &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; declaration or manual compilation inside the compile function.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;编译函数无法处理在其自己的模板或编译函数中递归使用自身的指令。编译这些指令会导致无限循环和堆栈溢出错误。可以通过在postLink函数中手动使用$ compile强制性地编译指令模板来避免这种情况，而不必依靠通过 &lt;code&gt;template&lt;/code&gt; 或 &lt;code&gt;templateUrl&lt;/code&gt; 声明进行的自动模板编译或依靠compile函数中的手动编译。</target>
        </trans-unit>
        <trans-unit id="c1a7cf77f06230eb77dc4be6a59d85af8ef8f296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The template instance and the link instance may be different objects if the template has been cloned. For this reason it is &lt;strong&gt;not&lt;/strong&gt; safe to do anything other than DOM transformations that apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration should be done in a linking function rather than in a compile function.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果已克隆模板，则模板实例和链接实例可能是不同的对象。出于这个原因，它是&lt;strong&gt;不是&lt;/strong&gt;安全的做多适用于所有克隆DOM节点编译函数中DOM转换的任何其他。具体来说，DOM侦听器注册应在链接功能中完成，而不是在编译功能中完成。</target>
        </trans-unit>
        <trans-unit id="4c1bb05a6bbf37a35eb2ec554716d99aa62c0f75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These &lt;code&gt;=attr&lt;/code&gt; attributes in the &lt;code&gt;scope&lt;/code&gt; option of directives are normalized just like directive names. To bind to the attribute in &lt;code&gt;&amp;lt;div bind-to-this=&quot;thing&quot;&amp;gt;&lt;/code&gt;, you'd specify a binding of &lt;code&gt;=bindToThis&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;指令的 &lt;code&gt;scope&lt;/code&gt; 选项中的这些 &lt;code&gt;=attr&lt;/code&gt; 属性像指令名称一样被规范化。要绑定到 &lt;code&gt;&amp;lt;div bind-to-this=&quot;thing&quot;&amp;gt;&lt;/code&gt; 的属性，您可以指定 &lt;code&gt;=bindToThis&lt;/code&gt; 的绑定。</target>
        </trans-unit>
        <trans-unit id="26330f0aa2b3354d455a060a2a0ed9b50f0e0816" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This directive is also added when the plain &lt;code&gt;maxlength&lt;/code&gt; attribute is used, with two differences:</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;当使用纯 &lt;code&gt;maxlength&lt;/code&gt; 属性时，也会添加此伪指令，但有两个区别：</target>
        </trans-unit>
        <trans-unit id="238371dbb97a0e21fd538ddd42aa26554743d3ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This directive is also added when the plain &lt;code&gt;minlength&lt;/code&gt; attribute is used, with two differences:</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;当使用plain &lt;code&gt;minlength&lt;/code&gt; 属性时，也会添加此伪指令，但有两个区别：</target>
        </trans-unit>
        <trans-unit id="054250c4eff180ddca708b0e13aaa9156bc4280e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This directive is also added when the plain &lt;code&gt;pattern&lt;/code&gt; attribute is used, with two differences:</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;当使用纯 &lt;code&gt;pattern&lt;/code&gt; 属性时，也会添加此伪指令，但有两个区别：</target>
        </trans-unit>
        <trans-unit id="9a3171a730d4dfd4d4e95771c02006e09d50cdce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This document is an in-depth reference of all directive options. For a gentle introduction to directives with examples of common use cases, see the &lt;a href=&quot;../../../guide/directive&quot;&gt;directive guide&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;本文档是所有指令选项的深入参考。有关指令的通俗介绍和常见用例，请参阅&lt;a href=&quot;../../../guide/directive&quot;&gt;指令指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2dd59fef3a0d3dd52af38640e43c530d57bae301" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This option has no effect if &lt;code&gt;reloadOnUrl&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果将 &lt;code&gt;reloadOnUrl&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; ,则此选项无效。</target>
        </trans-unit>
        <trans-unit id="66f44d93a693e4c8d18278d6f5c209ad5bac8242" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When testing an element transclude directive you must not place the directive at the root of the DOM fragment that is being compiled. See &lt;a href=&quot;../../../guide/unit-testing#testing-transclusion-directives.html&quot;&gt;Testing Transclusion Directives&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;测试元素transclude指令时，不得将指令放置在正在编译的DOM片段的根目录下。请参阅&lt;a href=&quot;../../../guide/unit-testing#testing-transclusion-directives.html&quot;&gt;测试包含指令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b58b0c8530e6790b470560e7f408cab50785f3ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using onload on SVG elements in IE11, the browser will try to call a function with the name on the window element, which will usually throw a &quot;function is undefined&quot; error. To fix this, you can instead use &lt;code&gt;data-onload&lt;/code&gt; or a different form that &lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;matches&lt;/a&gt;&lt;code&gt;onload&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;在IE11中的SVG元素上使用onload时，浏览器将尝试使用window元素上的名称调用函数，这通常会引发&amp;ldquo; function is undefined&amp;rdquo;错误。要解决此问题，您可以改用 &lt;code&gt;data-onload&lt;/code&gt; 或&lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;与&lt;/a&gt; &lt;code&gt;onload&lt;/code&gt; 匹配的其他形式。</target>
        </trans-unit>
        <trans-unit id="43f275432395642736507de1fe9a315f4610ac22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you create a directive, it is restricted to attribute and elements only by default. In order to create directives that are triggered by class name, you need to use the &lt;code&gt;restrict&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;创建指令时，默认情况下仅将指令限制为属性和元素。为了创建由类名触发的指令，您需要使用 &lt;code&gt;restrict&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="32cd8109a72d8948eb03c5cd4ec38de5ffe9496c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You do not currently have the ability to access scope variables from the &lt;code&gt;templateUrl&lt;/code&gt; function, since the template is requested before the scope is initialized.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;您当前无法从 &lt;code&gt;templateUrl&lt;/code&gt; 函数访问范围变量，因为在初始化范围之前需要模板。</target>
        </trans-unit>
        <trans-unit id="c3bc51797a8a7ef94a8e3d3ab8bec2861e246ac8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You should not use the ng-app directive when manually bootstrapping your app.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;手动引导应用程序时，不应使用ng-app指令。</target>
        </trans-unit>
        <trans-unit id="e718d160fc8fa7b57d62c3c0b94a711ce06db0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; if this function is called outside of a &lt;code&gt;$digest&lt;/code&gt; cycle, a new &lt;code&gt;$digest&lt;/code&gt; cycle will be scheduled. However, it is encouraged to always call code that changes the model from within an &lt;code&gt;$apply&lt;/code&gt; call. That includes code evaluated via &lt;code&gt;$evalAsync&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果在 &lt;code&gt;$digest&lt;/code&gt; 循环之外调用此函数，则会安排一个新的 &lt;code&gt;$digest&lt;/code&gt; 循环。但是，建议始终在 &lt;code&gt;$apply&lt;/code&gt; 调用中调用更改模型的代码。这包括通过 &lt;code&gt;$evalAsync&lt;/code&gt; 评估的代码。</target>
        </trans-unit>
        <trans-unit id="2bfcfeb91f4c7f896d2812380dae3170c526be42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; it is not possible to override the &lt;code&gt;getterSetter&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;无法覆盖 &lt;code&gt;getterSetter&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="54b44c51ce581455eb6d9bebb63519e9ccd54302" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;script&lt;/code&gt; tag containing the template does not need to be included in the &lt;code&gt;head&lt;/code&gt; of the document, but it must be a descendent of the &lt;a href=&quot;%24rootelement&quot;&gt;$rootElement&lt;/a&gt; (e.g. element with &lt;a href=&quot;../directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; attribute), otherwise the template will be ignored.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;包含模板的 &lt;code&gt;script&lt;/code&gt; 标签不需要包含在文档的 &lt;code&gt;head&lt;/code&gt; ，但是必须是&lt;a href=&quot;%24rootelement&quot;&gt;$ rootElement&lt;/a&gt;的后代（例如，具有&lt;a href=&quot;../directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;属性的元素），否则模板将被忽略。</target>
        </trans-unit>
        <trans-unit id="937ca5efe376d5fad14e43dc0eebc369b4c45d8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;track by&lt;/code&gt; expression must come last - after any filters, and the alias expression: &lt;code&gt;item in items | filter:searchText as results  track by item.id&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;在 &lt;code&gt;track by&lt;/code&gt; 表达式必须放在最后-任何过滤器后，和别名表达式： &lt;code&gt;item in items | filter:searchText as results track by item.id&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c758091459e087cd64a7d9d853e92c0229d1b7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the default whitelist of 'self' is not recommended if your app shares its origin with other apps! It is a good idea to limit it to only your application's directory.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;如果您的应用与其他应用共享其原始来源，则不建议使用默认的&amp;ldquo;自我&amp;rdquo;白名单！将其限制为仅应用程序的目录是一个好主意。</target>
        </trans-unit>
        <trans-unit id="580217ca4b9a925610a894a2a8a3fbeec3d61913" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this function only affects the options set on the &lt;code&gt;ngModelController&lt;/code&gt;, and not the options on the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; directive from which they might have been obtained initially.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;此函数仅影响 &lt;code&gt;ngModelController&lt;/code&gt; 上设置的选项，而不会影响&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;指令上最初从中获取的选项。</target>
        </trans-unit>
        <trans-unit id="d7a9b2da896eca14042d2367f2756e8843535ce0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first. If you just want to create custom directives, we recommend the &lt;a href=&quot;directive&quot;&gt;directives guide&lt;/a&gt;. If you want a deeper look into AngularJS's compilation process, you're in the right place.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;本指南面向已经熟悉AngularJS基础知识的开发人员。如果您只是入门，我们建议您先学习本&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;教程&lt;/a&gt;。如果您只想创建自定义指令，建议使用&lt;a href=&quot;directive&quot;&gt;指令guide&lt;/a&gt;。如果您想更深入地了解AngularJS的编译过程，那么您来对地方了。</target>
        </trans-unit>
        <trans-unit id="06f01bce739b9a30fca8b2e435855aebf0d4be03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; this guide is targeted towards developers who are already familiar with AngularJS basics. If you're just getting started, we recommend the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt; first. If you're looking for the &lt;strong&gt;directives API&lt;/strong&gt;, you can find it in the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;本指南面向已经熟悉AngularJS基础知识的开发人员。如果您只是入门，我们建议您先学习本&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;教程&lt;/a&gt;。如果要查找&lt;strong&gt;指令API&lt;/strong&gt;，可以在&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; API文档中&lt;/a&gt;找到它。</target>
        </trans-unit>
        <trans-unit id="43578b6de6d5a04f8a47794d2395d123f9352a38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;ngSelected&lt;/code&gt; does not interact with the &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;ngModel&lt;/code&gt; directives, it only sets the &lt;code&gt;selected&lt;/code&gt; attribute on the element. If you are using &lt;code&gt;ngModel&lt;/code&gt; on the select, you should not use &lt;code&gt;ngSelected&lt;/code&gt; on the options, as &lt;code&gt;ngModel&lt;/code&gt; will set the select value and selected options.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;ngSelected&lt;/code&gt; 不会与 &lt;code&gt;select&lt;/code&gt; 和 &lt;code&gt;ngModel&lt;/code&gt; 指令交互，它仅在元素上设置 &lt;code&gt;selected&lt;/code&gt; 属性。如果在选择上使用 &lt;code&gt;ngModel&lt;/code&gt; ，则不应在选项上使用 &lt;code&gt;ngSelected&lt;/code&gt; ，因为 &lt;code&gt;ngModel&lt;/code&gt; 将设置选择值和所选选项。</target>
        </trans-unit>
        <trans-unit id="9674dd656cd0bb33b36917505723e467176e6355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;null&lt;/code&gt; values use &lt;code&gt;'null'&lt;/code&gt; as their type.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt; 值使用 &lt;code&gt;'null'&lt;/code&gt; 作为其类型。</target>
        </trans-unit>
        <trans-unit id="7ce3871382cfc81e140c332a7381c6d7ded995c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;replace&lt;/code&gt; is deprecated in AngularJS and has been removed in the new Angular (v2+).</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;在AngularJS中不建议使用 &lt;code&gt;replace&lt;/code&gt; ，而在新的Angular（v2 +）中已将其删除。</target>
        </trans-unit>
        <trans-unit id="094902b4f074c52d206de76a0d6c62c38c4f99cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Link&lt;/em&gt; means setting up listeners on the DOM and setting up &lt;code&gt;$watch&lt;/code&gt; on the Scope to keep the two in sync.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;&lt;em&gt;链接&lt;/em&gt;表示在DOM上设置侦听器，在Scope上设置 &lt;code&gt;$watch&lt;/code&gt; 以使两者保持同步。</target>
        </trans-unit>
        <trans-unit id="abd92687b99044b4eddf773d671c4667439b4622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="4e7e869df02e986a8bd9dd779b5592b5c9faf996" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;%24compile#-replace-.html&quot;&gt;&lt;code&gt;replace: true&lt;/code&gt;&lt;/a&gt; is deprecated and not recommended to use, mainly due to the issues listed here. It has been completely removed in the new Angular.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：&lt;a href=&quot;%24compile#-replace-.html&quot;&gt; &lt;code&gt;replace: true&lt;/code&gt; &lt;/a&gt;不建议使用true，并且不建议使用，主要是由于此处列出的问题。在新的Angular中已将其完全删除。</target>
        </trans-unit>
        <trans-unit id="a4451c5f79942d8017493f279d2afc73973a025d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;ngForm&lt;/code&gt; cannot be used as a replacement for &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, because it lacks its &lt;a href=&quot;https://html.spec.whatwg.org/#the-form-element&quot;&gt;built-in HTML functionality&lt;/a&gt;. Specifically, you cannot submit &lt;code&gt;ngForm&lt;/code&gt; like a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. That means, you cannot send data to the server with &lt;code&gt;ngForm&lt;/code&gt;, or integrate it with &lt;a href=&quot;ngsubmit&quot;&gt;&lt;code&gt;ngSubmit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;ngForm&lt;/code&gt; 不能替代 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; ，因为它缺乏&lt;a href=&quot;https://html.spec.whatwg.org/#the-form-element&quot;&gt;内置的HTML功能&lt;/a&gt;。具体来说，您不能像 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记一样提交 &lt;code&gt;ngForm&lt;/code&gt; 。这意味着，您不能使用 &lt;code&gt;ngForm&lt;/code&gt; 将数据发送到服务器，也不能将其与&lt;a href=&quot;ngsubmit&quot;&gt; &lt;code&gt;ngSubmit&lt;/code&gt; &lt;/a&gt;集成。</target>
        </trans-unit>
        <trans-unit id="d01ba8914ae532b4b38f3b54193bdb550f9cf269" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For fake HTTP backend implementation suitable for end-to-end testing or backend-less development please see &lt;a href=&quot;../../ngmocke2e/service/%24httpbackend&quot;&gt;e2e $httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：有关适用于端到端测试或无后端开发的虚假HTTP后端实现，请参阅&lt;a href=&quot;../../ngmocke2e/service/%24httpbackend&quot;&gt;e2e $ httpBackend模拟&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b02c202d12207861a5f5725222e593ed8c38b35f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For fake http backend implementation suitable for unit testing please see &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;unit-testing $httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：有关适用于单元测试的伪造的http后端实现，请参阅&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;单元测试$ httpBackend模拟&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c97b6b23eb89dc034c80ac1fd70c6ded60d55024" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Generally, the events that are fired correspond 1:1 to &lt;code&gt;$animate&lt;/code&gt; method names, e.g. &lt;a href=&quot;%24animate#addClass.html&quot;&gt;addClass()&lt;/a&gt; will fire &lt;code&gt;addClass&lt;/code&gt;, and &lt;a href=&quot;../directive/ngclass&quot;&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; will fire &lt;code&gt;addClass&lt;/code&gt; if classes are added, and &lt;code&gt;removeClass&lt;/code&gt; if classes are removed. However, there are two exceptions:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：一般情况下，被解雇对应1事件：1 &lt;code&gt;$animate&lt;/code&gt; 方法的名称，例如&lt;a href=&quot;%24animate#addClass.html&quot;&gt;）addClass（&lt;/a&gt;将火 &lt;code&gt;addClass&lt;/code&gt; ，并&lt;a href=&quot;../directive/ngclass&quot;&gt; &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt;将火 &lt;code&gt;addClass&lt;/code&gt; 如果添加类和 &lt;code&gt;removeClass&lt;/code&gt; 如果类被删除。但是，有两个例外：</target>
        </trans-unit>
        <trans-unit id="7cacd31a04d29b782a40c79d6c3ab3a6d3435a24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If the array contains objects that reference themselves, filtering is not possible.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：如果数组包含引用自己的对象，则无法进行过滤。</target>
        </trans-unit>
        <trans-unit id="ac4a26705c378eb8deb6df0e71f71d7c21815409" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you have assignment in &lt;code&gt;ngInit&lt;/code&gt; along with a &lt;a href=&quot;../service/%24filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;, make sure you have parentheses to ensure correct operator precedence:</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：如果您在 &lt;code&gt;ngInit&lt;/code&gt; 中分配了&lt;a href=&quot;../service/%24filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt;，请确保使用括号以确保正确的运算符优先级：</target>
        </trans-unit>
        <trans-unit id="458f3e8132df2dd3d5450a74a9df936fbcdd5440" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Intervals created by this service must be explicitly destroyed when you are finished with them. In particular they are not automatically destroyed when a controller's scope or a directive's element are destroyed. You should take this into consideration and make sure to always cancel the interval at the appropriate moment. See the example below for more details on how and when to do this.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：完成此服务后，必须显式销毁此服务创建的间隔。特别是在销毁控制器的作用域或指令的元素时，它们不会自动销毁。您应该考虑到这一点，并确保始终在适当的时候取消间隔。有关如何以及何时执行此操作的更多详细信息，请参见下面的示例。</target>
        </trans-unit>
        <trans-unit id="ba6f1fdd102bb501811f6bf2972b3d2642460a55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The element will be taken into account only as long as its &lt;code&gt;position&lt;/code&gt; is set to &lt;code&gt;fixed&lt;/code&gt;. This option is useful, when dealing with responsive navbars/headers that adjust their height and/or positioning according to the viewport's size.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：仅当元素的 &lt;code&gt;position&lt;/code&gt; 设置为 &lt;code&gt;fixed&lt;/code&gt; 时,才会考虑该元素。当处理根据视口大小调整其高度和/或位置的响应式导航栏/标题时，此选项很有用。</target>
        </trans-unit>
        <trans-unit id="137a110690fcaf3ac66664419099f281ac00252c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The new attributes will not be treated as URI attributes, which means their values will not be sanitized as URIs using &lt;code&gt;$compileProvider&lt;/code&gt;'s &lt;a href=&quot;../../ng/provider/%24compileprovider#aHrefSanitizationWhitelist.html&quot;&gt;aHrefSanitizationWhitelist&lt;/a&gt; and &lt;a href=&quot;../../ng/provider/%24compileprovider#imgSrcSanitizationWhitelist.html&quot;&gt;imgSrcSanitizationWhitelist&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：新属性不会被视为URI属性，这意味着它们的值将不会使用 &lt;code&gt;$compileProvider&lt;/code&gt; 的&lt;a href=&quot;../../ng/provider/%24compileprovider#aHrefSanitizationWhitelist.html&quot;&gt;aHrefSanitizationWhitelist&lt;/a&gt;和&lt;a href=&quot;../../ng/provider/%24compileprovider#imgSrcSanitizationWhitelist.html&quot;&gt;imgSrcSanitizationWhitelist&lt;/a&gt;作为URI进行净化。</target>
        </trans-unit>
        <trans-unit id="55917c01e65338e57270513362a867e1b4c0feee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Typically directives are registered with &lt;code&gt;module.directive&lt;/code&gt;. The example below is to illustrate how &lt;code&gt;$compile&lt;/code&gt; works.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：通常，伪指令是在 &lt;code&gt;module.directive&lt;/code&gt; 中注册的。下面的示例说明 &lt;code&gt;$compile&lt;/code&gt; 如何工作。</target>
        </trans-unit>
        <trans-unit id="b0494f4ee055225c681e0e403b86a484ffd8980e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PHP: &lt;/strong&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource&quot;&gt;Building a RESTful web service&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;End to End with Laravel 4 (video)&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;PHP：&lt;/strong&gt;&lt;a href=&quot;http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource&quot;&gt;构建RESTful Web服务&lt;/a&gt;，&lt;a href=&quot;http://www.youtube.com/watch?v=hqAyiqUs93c&quot;&gt;Laravel 4端到端（视频）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b054fa14b9f8995a1c15e748a733fb1cf28c399a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Paid online:&lt;/strong&gt;&lt;a href=&quot;https://www.pluralsight.com/search?q=angularjs&quot;&gt;Pluralsight&lt;/a&gt;, &lt;a href=&quot;https://tutsplus.com/course/easier-js-apps-with-angular/&quot;&gt;Tuts+&lt;/a&gt;, &lt;a href=&quot;http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/133318-2.html&quot;&gt;lynda.com&lt;/a&gt;, &lt;a href=&quot;http://www.wintellectnow.com/Course/Detail/mastering-angularjs&quot;&gt;WintellectNOW (4 lessons)&lt;/a&gt;, &lt;a href=&quot;https://www.packtpub.com/web-development/angularjs-maintaining-web-applications&quot;&gt;Packt&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;在线支付：&lt;/strong&gt;&lt;a href=&quot;https://www.pluralsight.com/search?q=angularjs&quot;&gt;Pluralsight&lt;/a&gt;，&lt;a href=&quot;https://tutsplus.com/course/easier-js-apps-with-angular/&quot;&gt;Tuts +&lt;/a&gt;，&lt;a href=&quot;http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/133318-2.html&quot;&gt;lynda.com&lt;/a&gt;，&lt;a href=&quot;http://www.wintellectnow.com/Course/Detail/mastering-angularjs&quot;&gt;WintellectNOW（4节课）&lt;/a&gt;，&lt;a href=&quot;https://www.packtpub.com/web-development/angularjs-maintaining-web-applications&quot;&gt;Packt&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7ed46aedfd7b0fd6c026a8e38d2a8ce283872b1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Paid onsite:&lt;/strong&gt;&lt;a href=&quot;http://angularbootcamp.com/&quot;&gt;angularbootcamp.com&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;现场付费：&lt;/strong&gt;&lt;a href=&quot;http://angularbootcamp.com/&quot;&gt;angularbootcamp.com&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef361f872ee0abe6437ca670508f1edf68b6175d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing an expression generated from user provided content as a predicate to &lt;code&gt;orderBy&lt;/code&gt; pipe&lt;/strong&gt;: &lt;code&gt;{{ value | orderBy : userContent }}&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;将用户提供的内容生成的表达式作为谓词传递给 &lt;code&gt;orderBy&lt;/code&gt; 管道&lt;/strong&gt;： &lt;code&gt;{{ value | orderBy : userContent }}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a49a97f0edbf657da69f757aee03a753983b32c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing an expression generated from user-provided content in calls to services that parse expressions&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;将对用户提供的内容生成的表达式传递给对表达式进行解析的服务的调用&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ba373bfdf6ea17c370636f865ce98036d187cbe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Passing an expression generated from user-provided content in calls to the following methods on a &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;在调用&lt;a href=&quot;scope&quot;&gt;范围内&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;将由用户提供的内容生成的表达式传递给以下方法&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="cf7b6c34e4e6dfb6bb513c537e719eef4875800a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Progressive enhancement&lt;/strong&gt;: Some users do not browse with JavaScript enabled or do not have the latest browser. An accessible message about site requirements can inform users and improve the experience.</source>
          <target state="translated">&lt;strong&gt;渐进增强&lt;/strong&gt;：某些用户未启用JavaScript进行浏览或没有最新的浏览器。有关站点要求的可访问消息可以通知用户并改善体验。</target>
        </trans-unit>
        <trans-unit id="e5dbbea29c67d64aa80bbcb732589e138e7f1c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Properties&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b2caabe019481b97276f492b585ec123276f9ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RESTful services:&lt;/strong&gt;&lt;a href=&quot;https://github.com/mgonto/restangular&quot;&gt;Restangular&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;RESTful服务：&lt;/strong&gt;&lt;a href=&quot;https://github.com/mgonto/restangular&quot;&gt;矩形&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fc726fc1694d2026c213ec7c238c454994e3951" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rails: &lt;/strong&gt;&lt;a href=&quot;http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/&quot;&gt;Tutorial&lt;/a&gt;, &lt;a href=&quot;https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4&quot;&gt;AngularJS with Rails4&lt;/a&gt;, &lt;a href=&quot;https://github.com/hiravgandhi/angularjs-rails&quot;&gt;angularjs-rails&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Rails：&lt;/strong&gt;&lt;a href=&quot;http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/&quot;&gt;教程&lt;/a&gt;，&lt;a href=&quot;https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4&quot;&gt;带有Rails4的AngularJS&lt;/a&gt;，&lt;a href=&quot;https://github.com/hiravgandhi/angularjs-rails&quot;&gt;angularjs-rails&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="35f61f48a504bab275e88d2b627834431d260550" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Realtime Communication: &lt;/strong&gt;&lt;a href=&quot;http://www.creativebloq.com/javascript/angularjs-collaboration-board-socketio-2132885&quot;&gt;Socket.io&lt;/a&gt;, &lt;a href=&quot;https://github.com/jeffbcross/omnibinder&quot;&gt;OmniBinder&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;实时通讯：&lt;/strong&gt;&lt;a href=&quot;http://www.creativebloq.com/javascript/angularjs-collaboration-board-socketio-2132885&quot;&gt;Socket.io&lt;/a&gt;，&lt;a href=&quot;https://github.com/jeffbcross/omnibinder&quot;&gt;OmniBinder&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4c4b1881e3ea790d1b4cb8dcf56958e79b072995" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RegExp&lt;/strong&gt; (&lt;em&gt;see caveat below&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt;RegExp&lt;/strong&gt;（&lt;em&gt;请参阅下面的警告&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="2f424009ac2309fbb979e7f9569fcfa54550fbb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Registering callbacks:&lt;/strong&gt; Registering callbacks clutters your code, making it hard to see the forest for the trees. Removing common boilerplate code such as callbacks is a good thing. It vastly reduces the amount of JavaScript coding &lt;em&gt;you&lt;/em&gt; have to do, and it makes it easier to see what your application does.</source>
          <target state="translated">&lt;strong&gt;注册回调：&lt;/strong&gt;注册回调会使您的代码混乱，从而难以看到树木的森林。删除常见的样板代码（如回调）是一件好事。它极大地减少了&lt;em&gt;您&lt;/em&gt;必须执行的JavaScript编码的数量，并使查看应用程序的工作变得更加容易。</target>
        </trans-unit>
        <trans-unit id="8bda6b80bdaa77386bd7e68ba0999abefbe67c29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SEO:&lt;/strong&gt;&lt;a href=&quot;http://www.yearofmoo.com/2012/11/angularjs-and-seo.html&quot;&gt;By hand&lt;/a&gt;, &lt;a href=&quot;http://prerender.io/&quot;&gt;prerender.io&lt;/a&gt;, &lt;a href=&quot;http://www.brombone.com/&quot;&gt;Brombone&lt;/a&gt;, &lt;a href=&quot;http://getseojs.com/&quot;&gt;SEO.js&lt;/a&gt;, &lt;a href=&quot;http://www.seo4ajax.com/&quot;&gt;SEO4Ajax&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;SEO：&lt;/strong&gt;&lt;a href=&quot;http://www.yearofmoo.com/2012/11/angularjs-and-seo.html&quot;&gt;手动&lt;/a&gt;，&lt;a href=&quot;http://prerender.io/&quot;&gt;prerender.io&lt;/a&gt;，&lt;a href=&quot;http://www.brombone.com/&quot;&gt;Brombone&lt;/a&gt;，&lt;a href=&quot;http://getseojs.com/&quot;&gt;SEO.js&lt;/a&gt;，&lt;a href=&quot;http://www.seo4ajax.com/&quot;&gt;SEO4Ajax&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b7329df37cbcee74f573d40974e8bfc0d92b934" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SQL and NoSQL backends:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SQL和NoSQL后端：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acf1014f44dc0693085e4a0ab0bf149931716756" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scope destruction&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;范围破坏&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="076280b82e27232af3c9aa1b34ea31f26250c8e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security:&lt;/strong&gt;&lt;a href=&quot;guide/security&quot;&gt;Security Docs&lt;/a&gt;, &lt;a href=&quot;api/ng/service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;, &lt;a href=&quot;api/ng/directive/ngcsp&quot;&gt;Content Security Policy&lt;/a&gt;, &lt;a href=&quot;api/ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;安全性：&lt;/strong&gt;&lt;a href=&quot;guide/security&quot;&gt;安全文档&lt;/a&gt;，&lt;a href=&quot;api/ng/service/%24sce&quot;&gt;严格的上下文转义&lt;/a&gt;，&lt;a href=&quot;api/ng/directive/ngcsp&quot;&gt;内容安全策略&lt;/a&gt;，&lt;a href=&quot;api/ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;视频&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3818895c2eaf69923be55c09ae40035c7a33fc1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security:&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;video&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Security:&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=18ifoT-Id54&quot;&gt;video&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="731d5463075faa14e1925cfee5778a98b6fb8b60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specific UI Elements:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;特定的UI元素：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9d146aba5991ca9690d0ebf1b69c1d2ad2110eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String&lt;/strong&gt; (except the special value &lt;code&gt;'self'&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;字符串&lt;/strong&gt;（特殊值 &lt;code&gt;'self'&lt;/code&gt; 除外）</target>
        </trans-unit>
        <trans-unit id="45fd1f66005840cbb6e08d3413cddd2bf1c094d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Text alternatives&lt;/strong&gt;: Add alternate text content to make visual information accessible using &lt;a href=&quot;http://www.w3.org/TR/html-alt-techniques/&quot;&gt;these W3C guidelines&lt;/a&gt;. The appropriate technique depends on the specific markup but can be accomplished using offscreen spans, &lt;code&gt;aria-label&lt;/code&gt; or label elements, image &lt;code&gt;alt&lt;/code&gt; attributes, &lt;code&gt;figure&lt;/code&gt;/&lt;code&gt;figcaption&lt;/code&gt; elements and more.</source>
          <target state="translated">&lt;strong&gt;替代文本&lt;/strong&gt;：添加替代文本内容进行视觉信息访问使用&lt;a href=&quot;http://www.w3.org/TR/html-alt-techniques/&quot;&gt;这些W3C的指导方针&lt;/a&gt;。适当的技术取决于特定的标记，但是可以使用屏幕外跨度， &lt;code&gt;aria-label&lt;/code&gt; 或标签元素，图像 &lt;code&gt;alt&lt;/code&gt; 属性， &lt;code&gt;figure&lt;/code&gt; /无 &lt;code&gt;figcaption&lt;/code&gt; 元素等来实现。</target>
        </trans-unit>
        <trans-unit id="fba8d19cd4f7dea6aaa365182952d5236f7ad9d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The $location service:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;$ location服务：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b7007892454ee4088595e9c377a077a8c78c5c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is a dangerous API, which you use at your own risk!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;这是一个危险的API，您需要自己承担风险！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="101f5499ee7b85073fb5b7d462d7ebab58281432" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Touch events:&lt;/strong&gt;&lt;a href=&quot;api/ngtouch&quot;&gt;Touch events&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;触摸事件：&lt;/strong&gt;&lt;a href=&quot;api/ngtouch&quot;&gt;触摸事件&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ca46b9f8a99de723a70b66185c89b9dce9c64fbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Underscore notation&lt;/strong&gt;: The use of the underscore notation (e.g.: &lt;code&gt;_$rootScope_&lt;/code&gt;) is a convention wide spread in AngularJS community to keep the variable names clean in your tests. That's why the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;&lt;code&gt;$injector&lt;/code&gt;&lt;/a&gt; strips out the leading and the trailing underscores when matching the parameters. The underscore rule applies &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; if the name starts &lt;strong&gt;and&lt;/strong&gt; ends with exactly one underscore, otherwise no replacing happens.</source>
          <target state="translated">&lt;strong&gt;下划线表示法&lt;/strong&gt;：下划线表示法（例如 &lt;code&gt;_$rootScope_&lt;/code&gt; ）的使用在AngularJS社区中很普​​遍，以使变量名在测试中保持整洁。这就是为什么&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt; &lt;code&gt;$injector&lt;/code&gt; &lt;/a&gt;在匹配参数时会去除前导和尾随下划线的原因。下划线规则&lt;strong&gt;&lt;em&gt;仅&lt;/em&gt;&lt;/strong&gt;在名称以一个下划线开头&lt;strong&gt;和&lt;/strong&gt;结尾&lt;strong&gt;&lt;em&gt;时才&lt;/em&gt;&lt;/strong&gt;适用，否则不会进行替换。</target>
        </trans-unit>
        <trans-unit id="8c9695aa3f0771d41376db49cc30e5d66abe41a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing:&lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;, &lt;a href=&quot;guide/unit-testing&quot;&gt;Unit testing&lt;/a&gt;, &lt;a href=&quot;guide/services#unit-testing.html&quot;&gt;Testing services&lt;/a&gt;,</source>
          <target state="translated">&lt;strong&gt;单元测试：&lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;，&lt;a href=&quot;guide/unit-testing&quot;&gt;单元测试&lt;/a&gt;，&lt;a href=&quot;guide/services#unit-testing.html&quot;&gt;测试服务&lt;/a&gt;，</target>
        </trans-unit>
        <trans-unit id="eeca4842d131502c4e4d20da777344377746dd2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing:&lt;/strong&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=YG5DEzaQBIc&quot;&gt;Using Karma (video)&lt;/a&gt;, &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;Karma in Webstorm&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;单元测试：&lt;/strong&gt;&lt;a href=&quot;http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/&quot;&gt;在Webstorm中&lt;/a&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=YG5DEzaQBIc&quot;&gt;使用Karma（视频）&lt;/a&gt;，Karma</target>
        </trans-unit>
        <trans-unit id="c1824507e8d65146ba51fd2f682f8bce763fbcb3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Visualization:&lt;/strong&gt;&lt;a href=&quot;http://gaslight.co/blog/angular-backed-svgs&quot;&gt;SVG&lt;/a&gt;, &lt;a href=&quot;http://www.ng-newsletter.com/posts/d3-on-angular.html&quot;&gt;D3.js&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;可视化：&lt;/strong&gt;&lt;a href=&quot;http://gaslight.co/blog/angular-backed-svgs&quot;&gt;SVG&lt;/a&gt;，&lt;a href=&quot;http://www.ng-newsletter.com/posts/d3-on-angular.html&quot;&gt;D3.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43b420f64ccef0d7a45849c939b529e0440f143d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Be careful not to cause &quot;double-submission&quot; by using both the &lt;code&gt;ngClick&lt;/code&gt; and &lt;code&gt;ngSubmit&lt;/code&gt; handlers together. See the &lt;a href=&quot;form#submitting-a-form-and-preventing-the-default-action.html&quot;&gt;&lt;code&gt;form&lt;/code&gt; directive documentation&lt;/a&gt; for a detailed discussion of when &lt;code&gt;ngSubmit&lt;/code&gt; may be triggered.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;注意不要同时使用 &lt;code&gt;ngClick&lt;/code&gt; 和 &lt;code&gt;ngSubmit&lt;/code&gt; 处理程序，以免引起&amp;ldquo;两次提交&amp;rdquo; 。有关何时可以触发 &lt;code&gt;ngSubmit&lt;/code&gt; 的详细讨论，请参见&lt;a href=&quot;form#submitting-a-form-and-preventing-the-default-action.html&quot;&gt; &lt;code&gt;form&lt;/code&gt; 指令文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2756abf1eaa19230be9bb95e04f5d2e16307d6dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Warning&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5217522448e77af8b97a21a877276a4ab365b46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Watcher registration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;观察者注册&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28bd0a25092a659fd8466d8287ab8ba78d234c4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What does it mean to &quot;compile&quot; an HTML template?&lt;/strong&gt; For AngularJS, &quot;compilation&quot; means attaching directives to the HTML to make it interactive. The reason we use the term &quot;compile&quot; is that the recursive process of attaching directives mirrors the process of compiling source code in &lt;a href=&quot;http://en.wikipedia.org/wiki/Compiled_languages&quot;&gt;compiled programming languages&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;&amp;ldquo;编译&amp;rdquo; HTML模板是什么意思？&lt;/strong&gt;对于AngularJS，&amp;ldquo;编译&amp;rdquo;是指在HTML上附加指令以使其具有交互性。我们使用术语&amp;ldquo;编译&amp;rdquo;的原因是，附加指令的递归过程反映了已&lt;a href=&quot;http://en.wikipedia.org/wiki/Compiled_languages&quot;&gt;编译编程语言中&lt;/a&gt;源代码的编译过程。</target>
        </trans-unit>
        <trans-unit id="664e7640cdaa2696eb7827afab80580a8f9cf489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When should I use an attribute versus an element?&lt;/strong&gt; Use an element when you are creating a component that is in control of the template. The common case for this is when you are creating a Domain-Specific Language for parts of your template. Use an attribute when you are decorating an existing element with new functionality.</source>
          <target state="translated">&lt;strong&gt;什么时候应该使用属性而不是元素？&lt;/strong&gt;创建由模板控制的组件时，请使用元素。常见的情况是在为模板的一部分创建特定于域的语言时。用新功能装饰现有元素时，请使用属性。</target>
        </trans-unit>
        <trans-unit id="2feab5c0d7b5da0795b0fa56ef78488f3d7f1a9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workflow:&lt;/strong&gt;&lt;a href=&quot;https://github.com/yeoman/generator-angular&quot;&gt;Yeoman.io&lt;/a&gt; and &lt;a href=&quot;http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/&quot;&gt;AngularJS Yeoman Tutorial&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;工作流程：&lt;/strong&gt;&lt;a href=&quot;https://github.com/yeoman/generator-angular&quot;&gt;Yeoman.io&lt;/a&gt;和&lt;a href=&quot;http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/&quot;&gt;AngularJS Yeoman教程&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f3f6ab59fb7d12e56b5eff068180765cef04fe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing tons of initialization code just to get started:&lt;/strong&gt; Typically you need to write a lot of plumbing just to get a basic &quot;Hello World&quot; AJAX app working. With AngularJS you can bootstrap your app easily using services, which are auto-injected into your application in a &lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;-like dependency-injection style. This allows you to get started developing features quickly. As a bonus, you get full control over the initialization process in automated tests.</source>
          <target state="translated">&lt;strong&gt;刚开始&lt;/strong&gt;要编写大量&lt;strong&gt;的初始化代码：&lt;/strong&gt;通常，您需要编写大量管道才能使基本的&amp;ldquo; Hello World&amp;rdquo; AJAX应用程序正常工作。借助AngularJS，您可以使用服务轻松引导您的应用程序，这些服务会以类似&lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;的依赖项注入样式自动注入到您的应用程序中。这使您可以快速开始开发功能。另外，您可以完全控制自动化测试中的初始化过程。</target>
        </trans-unit>
        <trans-unit id="837a994c27693c0ffafa5e8b6bbd93b59ef4b61a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can use suitably sanitized server-side templating to dynamically generate CSS, URLs, etc, but not for generating templates that are bootstrapped/compiled by AngularJS.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;您可以使用经过适当处理的服务器端模板来动态生成CSS，URL等，但不能生成由AngularJS引导/编译的模板。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f42b5ce071116456c1fc4e1cc56cd6b04c6d1be1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;a library&lt;/strong&gt; - a collection of functions which are useful when writing web apps. Your code is in charge and it calls into the library when it sees fit. E.g., &lt;code&gt;jQuery&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;库&lt;/strong&gt; -编写Web应用程序时有用的功能集合。您的代码由您负责，并在合适时调用库。例如 &lt;code&gt;jQuery&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98932b647226b8e2849198caedd642fb90dab6d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;actions&lt;/strong&gt; - &lt;code&gt;{Object.&amp;lt;Object&amp;gt;}&lt;/code&gt; - A hash with default actions declarations. Actions are high-level methods corresponding to RESTful actions/methods on resources. An action may specify what HTTP method to use, what URL to hit, if the return value will be a single object or a collection (array) of objects etc. For more details, see &lt;a href=&quot;../service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt;. The actions can also be enhanced or overwritten per resource class.</source>
          <target state="translated">&lt;strong&gt;动作&lt;/strong&gt; - &lt;code&gt;{Object.&amp;lt;Object&amp;gt;}&lt;/code&gt; -具有默认动作声明的哈希。动作是与资源上的RESTful动作/方法相对应的高级方法。一个动作可以指定要使用的HTTP方法，要命中的URL，如果返回值将是单个对象或对象的集合（数组）等。有关更多详细信息，请参见&lt;a href=&quot;../service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;。还可以针对每个资源类增强或覆盖这些操作。</target>
        </trans-unit>
        <trans-unit id="2f2d2c0ce8d29d9f4e2bfa9fb62c6f4ed866864e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;addClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - space-separated CSS classes to add to element</source>
          <target state="translated">&lt;strong&gt;addClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -空格分隔CSS类添加到元件</target>
        </trans-unit>
        <trans-unit id="3b880e37bc32e5066151f7c349b650275f496d8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaChecked&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-checked tags</source>
          <target state="translated">&lt;strong&gt;ariaChecked&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria-checked标签</target>
        </trans-unit>
        <trans-unit id="b4566b629259ed3938a66f9e2c09e41cca0eff67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaDisabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-disabled tags</source>
          <target state="translated">&lt;strong&gt;ariaDisabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria禁用标签</target>
        </trans-unit>
        <trans-unit id="ec84a05dd50e86c6d693d672c9a56938940d4df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaHidden&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-hidden tags</source>
          <target state="translated">&lt;strong&gt;ariaHidden&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria隐藏标签</target>
        </trans-unit>
        <trans-unit id="f5b6a851da6c7f1da90b7c258c89ea999da5724f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaInvalid&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-invalid tags</source>
          <target state="translated">&lt;strong&gt;ariaInvalid&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria无效标签</target>
        </trans-unit>
        <trans-unit id="30e1dd087a2dff3e1ba2b39d2a8f8f28db460895" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaReadonly&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-readonly tags</source>
          <target state="translated">&lt;strong&gt;ariaReadonly&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria只读标签</target>
        </trans-unit>
        <trans-unit id="74982eb7100114452e4662b17862a0c7316b3e8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaRequired&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-required tags</source>
          <target state="translated">&lt;strong&gt;ariaRequired&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria必需的标签</target>
        </trans-unit>
        <trans-unit id="3de219a7746396ec7fc8c7048e94be789af81626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ariaValue&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags</source>
          <target state="translated">&lt;strong&gt;ariaValue&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用aria-valuemin，aria-valuemax和aria-valuenow标签</target>
        </trans-unit>
        <trans-unit id="a93636a21222157a7d39caeced98d0d0220354e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bindKeydown&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables keyboard event binding on non-interactive elements (such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;li&lt;/code&gt;) using ng-click, making them more accessible to users of assistive technologies</source>
          <target state="translated">&lt;strong&gt;bindKeydown&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; 使用ng-click 启用/禁用非交互式元素（例如 &lt;code&gt;div&lt;/code&gt; 或 &lt;code&gt;li&lt;/code&gt; ）上的键盘事件绑定，从而使辅助技术用户更容易访问它们</target>
        </trans-unit>
        <trans-unit id="1f938a576e462e2e78209117c19b46118b383162" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bindRoleForClick&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Adds role=button to non-interactive elements (such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;li&lt;/code&gt;) using ng-click, making them more accessible to users of assistive technologies</source>
          <target state="translated">&lt;strong&gt;bindRoleForClick&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; 使用ng-click 将role = button添加到非交互式元素（例如 &lt;code&gt;div&lt;/code&gt; 或 &lt;code&gt;li&lt;/code&gt; ），使辅助技术用户更易于访问它们</target>
        </trans-unit>
        <trans-unit id="1ebc19fcbae29f07eb55d62df4481b4901b11803" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Object}&lt;/code&gt; &amp;ndash; A boolean value or object created with &lt;a href=&quot;%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt; to enable or disable caching of the HTTP response. See &lt;a href=&quot;%24http#caching.html&quot;&gt;$http Caching&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean|Object}&lt;/code&gt; &amp;ndash;用&lt;a href=&quot;%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt;创建的布尔值或对象，用于启用或禁用HTTP响应的缓存。有关更多信息，请参见&lt;a href=&quot;%24http#caching.html&quot;&gt;$ http缓存&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d19728a0bfc86797b2d9cc70edb8c8754da2aec7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cancellable&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, the request made by a &quot;non-instance&quot; call will be cancelled (if not already completed) by calling &lt;code&gt;$cancelRequest()&lt;/code&gt; on the call's return value. For more details, see &lt;a href=&quot;../service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt;. This can be overwritten per resource class or action.</source>
          <target state="translated">&lt;strong&gt;cancellable&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;如果为true，则通过在调用的返回值上调用 &lt;code&gt;$cancelRequest()&lt;/code&gt; 来取消&amp;ldquo;非实例&amp;rdquo;调用所发出的请求（如果尚未完成）。有关更多详细信息，请参见&lt;a href=&quot;../service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;。可以按资源类或操作将其覆盖。</target>
        </trans-unit>
        <trans-unit id="54ba2b4f61e1d9303b95bacf774efcb814bbe9c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;child scope&lt;/strong&gt; + &lt;strong&gt;child scope&lt;/strong&gt; =&amp;gt; Both directives will share one single child scope</source>
          <target state="translated">&lt;strong&gt;子范围&lt;/strong&gt; + &lt;strong&gt;子范围&lt;/strong&gt; =&amp;gt;两个指令将共享一个子范围</target>
        </trans-unit>
        <trans-unit id="8e9bcb2c30cc37bc699c2bf46b1e5cd7b8752bd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;child scope&lt;/strong&gt; + &lt;strong&gt;no scope&lt;/strong&gt; =&amp;gt; Both directives will share one single child scope</source>
          <target state="translated">&lt;strong&gt;子范围&lt;/strong&gt; + &lt;strong&gt;无范围&lt;/strong&gt; =&amp;gt;两个指令将共享一个子范围</target>
        </trans-unit>
        <trans-unit id="8502152cb2a6790191684eea0be8b0e6958819b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;config&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash; The configuration object that was used to generate the request.</source>
          <target state="translated">&lt;strong&gt;config&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash;用于生成请求的配置对象。</target>
        </trans-unit>
        <trans-unit id="662140cf1387a85b485f928c62a84c04f36e2aa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash; Data to be sent as the request message data.</source>
          <target state="translated">&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash;要作为请求消息数据发送的数据。</target>
        </trans-unit>
        <trans-unit id="5f1af385a1cc7a95bfbe95753d773f2d47e066fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash; The response body transformed with the transform functions.</source>
          <target state="translated">&lt;strong&gt;数据&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|Object}&lt;/code&gt; &amp;ndash;用转换函数转换的响应主体。</target>
        </trans-unit>
        <trans-unit id="b80e157d8b23723a50936794e8e443415bc93df4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - The cookie will be available only for this domain and its sub-domains. For security reasons the user agent will not accept the cookie if the current domain is not a sub-domain of this domain or equal to it.</source>
          <target state="translated">&lt;strong&gt;域&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -Cookie仅可用于该域及其子域。出于安全原因，如果当前域不是该域的子域或与其相等，则用户代理将不接受该cookie。</target>
        </trans-unit>
        <trans-unit id="128553ab9ab0e05c4ab4a84338d7a953631a3185" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;enabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; (default: false) If true, will rely on &lt;code&gt;history.pushState&lt;/code&gt; to change urls where supported. Will fall back to hash-prefixed paths in browsers that do not support &lt;code&gt;pushState&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;enabled&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;（默认值：false）如果为true，则将依靠 &lt;code&gt;history.pushState&lt;/code&gt; 更改支持的网址。将退回到不支持 &lt;code&gt;pushState&lt;/code&gt; 的浏览器中的哈希前缀路径。</target>
        </trans-unit>
        <trans-unit id="d727d563ac38884edda5ae3de43341e5d7ae4a4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event&lt;/strong&gt;&lt;code&gt;{String}&lt;/code&gt; - The name of the animation event (e.g. &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, &lt;code&gt;addClass&lt;/code&gt; etc).</source>
          <target state="translated">&lt;strong&gt;event &lt;/strong&gt; &lt;code&gt;{String}&lt;/code&gt; -动画事件的名称（例如 &lt;code&gt;enter&lt;/code&gt; ， &lt;code&gt;leave&lt;/code&gt; ， &lt;code&gt;addClass&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="63abc4452ff2982408c11e34a986d4b004794707" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eventHandlers&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - Event listeners to be bound to the XMLHttpRequest object. To bind events to the XMLHttpRequest upload object, use &lt;code&gt;uploadEventHandlers&lt;/code&gt;. The handler will be called in the context of a &lt;code&gt;$apply&lt;/code&gt; block.</source>
          <target state="translated">&lt;strong&gt;事件处理器&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; -事件侦听器绑定到XMLHttpRequest对象。要将事件绑定到XMLHttpRequest上传对象，请使用 &lt;code&gt;uploadEventHandlers&lt;/code&gt; 。该处理程序将在 &lt;code&gt;$apply&lt;/code&gt; 块的上下文中调用。</target>
        </trans-unit>
        <trans-unit id="dcfcdc7c176b0da776cad529dafbf2335547158e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; - &lt;code&gt;{string|Date}&lt;/code&gt; - String of the form &quot;Wdy, DD Mon YYYY HH:MM:SS GMT&quot; or a Date object indicating the exact date/time this cookie will expire.</source>
          <target state="translated">&lt;strong&gt;过期&lt;/strong&gt; - &lt;code&gt;{string|Date}&lt;/code&gt; -格式为&amp;ldquo; Wdy，DD Mon YYYY HH：MM：SS GMT&amp;rdquo;的字符串，或者是一个Date对象，指示此cookie过期的确切日期/时间。</target>
        </trans-unit>
        <trans-unit id="2656cc29c637fb21f8e27327beb17e5e36dfd9e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;frameworks&lt;/strong&gt; - a particular implementation of a web application, where your code fills in the details. The framework is in charge and it calls into your code when it needs something app specific. E.g., &lt;code&gt;durandal&lt;/code&gt;, &lt;code&gt;ember&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;strong&gt;框架&lt;/strong&gt; -Web应用程序的特定实现，您的代码将在其中填充详细信息。该框架负责管理，当需要特定于应用程序的内容时，它将调用您的代码。例如 &lt;code&gt;durandal&lt;/code&gt; ， &lt;code&gt;ember&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="5670e234f5705492daf7befb2ad1d2ae5caf2766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;from&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - CSS properties &amp;amp; values at the beginning of animation. Must have matching &lt;code&gt;to&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;从&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; -在开头动画的CSS属性和值。必须具有匹配 &lt;code&gt;to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b091f4e3a87ebd01ba917c0b3435cc77e175a24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt;: A getter function called everytime &lt;code&gt;$anchorScroll()&lt;/code&gt; is executed. Must return a number representing the offset (in pixels).</source>
          <target state="translated">&lt;strong&gt;function&lt;/strong&gt;：每次执行 &lt;code&gt;$anchorScroll()&lt;/code&gt; 都会调用的吸气剂函数。必须返回代表偏移量的数字（以像素为单位）。</target>
        </trans-unit>
        <trans-unit id="92e857dff4997c9bc1ff36c7b2cf176c608091e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hashPrefix(prefix)&lt;/strong&gt;: &lt;code&gt;{string}&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;hashPrefix（prefix）&lt;/strong&gt;： &lt;code&gt;{string}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="582f879f3edebaeff4ee118aaf6df855b64a7075" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash; Map of strings or functions which return strings representing HTTP headers to send to the server. If the return value of a function is null, the header will not be sent. Functions accept a config object as an argument.</source>
          <target state="translated">&lt;strong&gt;标头&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object}&lt;/code&gt; &amp;ndash;字符串或函数的映射，这些字符串或函数返回表示HTTP标头的字符串以发送到服务器。如果函数的返回值为null，则不会发送标头。函数接受配置对象作为参数。</target>
        </trans-unit>
        <trans-unit id="e9daa8346bf248ada6861d23bf92e78d2db4888b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function([headerName])}&lt;/code&gt; &amp;ndash; Header getter function.</source>
          <target state="translated">&lt;strong&gt;标头&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function([headerName])}&lt;/code&gt; &amp;ndash;标头获取函数。</target>
        </trans-unit>
        <trans-unit id="feb861ab325127f385f259aec3c6d753d18eb488" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;html5Mode(mode)&lt;/strong&gt;: &lt;code&gt;{boolean|Object}&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;html5Mode（mode）&lt;/strong&gt;： &lt;code&gt;{boolean|Object}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a792522659c8bad0c4f41a9fed876f069c7f3001" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;htmlElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - A list of elements to extend the current list of HTML elements.</source>
          <target state="translated">&lt;strong&gt;HTML元素&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; -元素的列表来扩展HTML元素的当前列表。</target>
        </trans-unit>
        <trans-unit id="0a42c76c3fb4084b470b98106340ac1b01895367" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;htmlVoidElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - A list of elements to extend the current list of void HTML elements; i.e. elements that do not have an end tag.</source>
          <target state="translated">&lt;strong&gt;htmlVoidElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; -元素来扩展空隙HTML元素的当前列表的列表; 即没有结束标签的元素。</target>
        </trans-unit>
        <trans-unit id="e3fba7c55daba09f699627d6ddf5c7f98aebf5dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;id&lt;/strong&gt;: the id of the cache instance</source>
          <target state="translated">&lt;strong&gt;id&lt;/strong&gt;：缓存实例的ID</target>
        </trans-unit>
        <trans-unit id="f8de2446f97561038f35cfbca3fe049fc42c4852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isolated scope&lt;/strong&gt; + &lt;strong&gt;child scope&lt;/strong&gt; =&amp;gt; &lt;strong&gt;Won't work!&lt;/strong&gt; Only one scope can be related to one element. Therefore these directives cannot be applied to the same element.</source>
          <target state="translated">&lt;strong&gt;孤立的作用域&lt;/strong&gt; + &lt;strong&gt;子作用域&lt;/strong&gt; =&amp;gt; &lt;strong&gt;不起作用！&lt;/strong&gt;一个范围只能与一个元素相关。因此，这些指令不能应用于同一元素。</target>
        </trans-unit>
        <trans-unit id="124d7d31ddab47d2d156da6e7c9218c9f4e303b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isolated scope&lt;/strong&gt; + &lt;strong&gt;isolated scope&lt;/strong&gt; =&amp;gt; &lt;strong&gt;Won't work!&lt;/strong&gt; Only one scope can be related to one element. Therefore these directives cannot be applied to the same element.</source>
          <target state="translated">&lt;strong&gt;隔离范围&lt;/strong&gt; + &lt;strong&gt;隔离范围&lt;/strong&gt; =&amp;gt; &lt;strong&gt;不起作用！&lt;/strong&gt;一个范围只能与一个元素相关。因此，这些指令不能应用于同一元素。</target>
        </trans-unit>
        <trans-unit id="f6d1f2d0baa4d824cae5e0344ad362c468b1df71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isolated scope&lt;/strong&gt; + &lt;strong&gt;no scope&lt;/strong&gt; =&amp;gt; The isolated directive will use it's own created isolated scope. The other directive will use its parent's scope</source>
          <target state="translated">&lt;strong&gt;隔离范围&lt;/strong&gt; + &lt;strong&gt;无范围&lt;/strong&gt; =&amp;gt;隔离指令将使用其自己创建的隔离范围。另一个指令将使用其父级的范围</target>
        </trans-unit>
        <trans-unit id="c4773c7c7695330d0fb94c9c57adbbb2bf149700" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jqLite&lt;/strong&gt;: A jqLite/jQuery element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset.</source>
          <target state="translated">&lt;strong&gt;jqLit​​e&lt;/strong&gt;：一个jqLit​​e / jQuery元素，用于指定偏移量。从页面顶部到元素底部的距离将用作偏移量。</target>
        </trans-unit>
        <trans-unit id="27a1edc20316d5c41ba1140a1cc228f9cdb92f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; HTTP method (e.g. 'GET', 'POST', etc)</source>
          <target state="translated">&lt;strong&gt;方法&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; HTTP方法（例如&amp;ldquo; GET&amp;rdquo;，&amp;ldquo; POST&amp;rdquo;等）</target>
        </trans-unit>
        <trans-unit id="b8c8b20a9898829cf0f68deb23102862860694a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;no scope&lt;/strong&gt; + &lt;strong&gt;no scope&lt;/strong&gt; =&amp;gt; Two directives which don't require their own scope will use their parent's scope</source>
          <target state="translated">&lt;strong&gt;无范围&lt;/strong&gt; + &lt;strong&gt;无范围&lt;/strong&gt; =&amp;gt;两个不需要自身范围的指令将使用其父级的范围</target>
        </trans-unit>
        <trans-unit id="0e93dba1c9076df304aac7edb503b800b45a7c1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;node&lt;/strong&gt;&lt;code&gt;{DOMElement}&lt;/code&gt; - The DOM element to be animated.</source>
          <target state="translated">&lt;strong&gt;节点&lt;/strong&gt; &lt;code&gt;{DOMElement}&lt;/code&gt; -要设置动画的DOM元素。</target>
        </trans-unit>
        <trans-unit id="72addb38a35523e85f22360331c35045c03519b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;number&lt;/strong&gt;: A fixed number of pixels to be used as offset.</source>
          <target state="translated">&lt;strong&gt;number&lt;/strong&gt;：要用作偏移量的固定像素数。</target>
        </trans-unit>
        <trans-unit id="6bfe42c01803398822405d49a5823f112f8c8264" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;objectMaxDepth&lt;/strong&gt;: The maximum depth to which objects are traversed when stringified for error messages.</source>
          <target state="translated">&lt;strong&gt;objectMaxDepth&lt;/strong&gt;：对错误消息进行字符串化处理时，对象所经过的最大深度。</target>
        </trans-unit>
        <trans-unit id="59d0f8dde98a32b496242d2a29226f215bf7c086" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt;&lt;code&gt;{Object}&lt;/code&gt; - A collection of options/styles used for the animation.</source>
          <target state="translated">&lt;strong&gt;options &lt;/strong&gt; &lt;code&gt;{Object}&lt;/code&gt; -用于动画的选项/样式的集合。</target>
        </trans-unit>
        <trans-unit id="d651a44f16d7b9f660fb78f4848f8fe899718c1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;paramSerializer&lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; - A function used to prepare the string representation of request parameters (specified as an object). If specified as string, it is interpreted as function registered with the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;, which means you can create your own serializer by registering it as a &lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;service&lt;/a&gt;. The default serializer is the &lt;a href=&quot;%24httpparamserializer&quot;&gt;$httpParamSerializer&lt;/a&gt;; alternatively, you can use the &lt;a href=&quot;%24httpparamserializerjqlike&quot;&gt;$httpParamSerializerJQLike&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;paramSerializer&lt;/strong&gt; - &lt;code&gt;{string|function(Object&amp;lt;string,string&amp;gt;):string}&lt;/code&gt; -用于制备的请求参数的字符串表示（指定为对象）的函数。如果指定为字符串，则将其解释为在&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injector中&lt;/a&gt;注册的函数，这意味着您可以通过将其注册为&lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;service&lt;/a&gt;来创建自己的序列化器。默认的序列化器是&lt;a href=&quot;%24httpparamserializer&quot;&gt;$ httpParamSerializer&lt;/a&gt; ; 或者，您可以使用&lt;a href=&quot;%24httpparamserializerjqlike&quot;&gt;$ httpParamSerializerJQLike&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb412c19087d047d702d4bb44d9b2be7ab1a675c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;params&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object.&amp;lt;string|Object&amp;gt;}&lt;/code&gt; &amp;ndash; Map of strings or objects which will be serialized with the &lt;code&gt;paramSerializer&lt;/code&gt; and appended as GET parameters.</source>
          <target state="translated">&lt;strong&gt;params&lt;/strong&gt; &amp;ndash; &lt;code&gt;{Object.&amp;lt;string|Object&amp;gt;}&lt;/code&gt; &amp;ndash;字符串或对象的映射，这些字符串或对象将使用 &lt;code&gt;paramSerializer&lt;/code&gt; 序列化并附加为GET参数。</target>
        </trans-unit>
        <trans-unit id="060adaafb51ecc8f11beb5c933aa7af0d463cd31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - The cookie will be available only for this path and its sub-paths. By default, this is the URL that appears in your &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;strong&gt;路径&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; 里 - cookie将仅适用于该路径及其子路径是可用的。默认情况下，这是显示在 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 标记中的URL 。</target>
        </trans-unit>
        <trans-unit id="5f3eaf2d48263b11c832c76ce400f5db9b03ae2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;placeholder&lt;/strong&gt; in &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; in Internet Explorer 10/11 (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;issue 5025&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Internet Explorer 10/11 中 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 中的&lt;strong&gt;占位符&lt;/strong&gt;（请参阅&lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;问题5025&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="4958679eaea1cd6781d8263b662a8d5fd1a73530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;removeClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - space-separated CSS classes to remove from element</source>
          <target state="translated">&lt;strong&gt;removeClass&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; -空格分隔CSS类从元件除去</target>
        </trans-unit>
        <trans-unit id="98c7a336bebc4478053dfdd092b76fa1a2505115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;requireBase&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - (default: &lt;code&gt;true&lt;/code&gt;) When html5Mode is enabled, specifies whether or not a  tag is required to be present. If &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;requireBase&lt;/code&gt; are true, and a base tag is not present, an error will be thrown when &lt;code&gt;$location&lt;/code&gt; is injected. See the &lt;a href=&quot;../../../guide/%24location&quot;&gt;$location guide for more information&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;requireBase&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - （默认值： &lt;code&gt;true&lt;/code&gt; ）当html5Mode被启用，指定是否需要标记为存在。如果 &lt;code&gt;enabled&lt;/code&gt; 和 &lt;code&gt;requireBase&lt;/code&gt; 为true，并且不存在基本标记，则在注入 &lt;code&gt;$location&lt;/code&gt; 时将引发错误。有关&lt;a href=&quot;../../../guide/%24location&quot;&gt;更多信息，&lt;/a&gt;请参见$ location指南。</target>
        </trans-unit>
        <trans-unit id="9ff98c63e2f8647761676a30d4ba3fbaef42096f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;responseType&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype&quot;&gt;XMLHttpRequest.responseType&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;的responseType&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; 里 -看到&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype&quot;&gt;XMLHttpRequest.responseType&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83429cc05bf49200558ea7c8b13a952af6c8c748" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rewriteLinks&lt;/strong&gt; - &lt;code&gt;{boolean|string}&lt;/code&gt; - (default: &lt;code&gt;true&lt;/code&gt;) When html5Mode is enabled, enables/disables URL rewriting for relative links. If set to a string, URL rewriting will only happen on links with an attribute that matches the given string. For example, if set to &lt;code&gt;'internal-link'&lt;/code&gt;, then the URL will only be rewritten for &lt;code&gt;&amp;lt;a internal-link&amp;gt;&lt;/code&gt; links. Note that &lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;attribute name normalization&lt;/a&gt; does not apply here, so &lt;code&gt;'internalLink'&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; match &lt;code&gt;'internal-link'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;rewriteLinks&lt;/strong&gt; - &lt;code&gt;{boolean|string}&lt;/code&gt; - （默认值： &lt;code&gt;true&lt;/code&gt; ）当html5Mode启用，启用/禁用URL重写为相对链接。如果设置为字符串，则URL重写将仅在属性与给定字符串匹配的链接上进行。例如，如果设置为 &lt;code&gt;'internal-link'&lt;/code&gt; ，则将仅对 &lt;code&gt;&amp;lt;a internal-link&amp;gt;&lt;/code&gt; 链接重写URL 。请注意，&lt;a href=&quot;../../../guide/directive#normalization.html&quot;&gt;属性名称规范化&lt;/a&gt;不适用于此处，因此 &lt;code&gt;'internalLink'&lt;/code&gt; 将与 &lt;code&gt;'internal-link'&lt;/code&gt; &lt;strong&gt;不&lt;/strong&gt;匹配。</target>
        </trans-unit>
        <trans-unit id="f51a95c24827c45784afc6a3873a40fbc1bd7fef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samesite&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; - prevents the browser from sending the cookie along with cross-site requests. Accepts the values &lt;code&gt;lax&lt;/code&gt; and &lt;code&gt;strict&lt;/code&gt;. See the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;OWASP Wiki&lt;/a&gt; for more info. Note that as of May 2018, not all browsers support &lt;code&gt;SameSite&lt;/code&gt;, so it cannot be used as a single measure against Cross-Site-Request-Forgery (CSRF) attacks.</source>
          <target state="translated">&lt;strong&gt;samesite&lt;/strong&gt; - &lt;code&gt;{string}&lt;/code&gt; 里 -阻止浏览器与跨站点请求一起发送的cookie。接受 &lt;code&gt;lax&lt;/code&gt; 和 &lt;code&gt;strict&lt;/code&gt; 的价值观。有关更多信息，请参见&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;OWASP Wiki&lt;/a&gt;。请注意，截至2018年5月，并非所有浏览器都支持 &lt;code&gt;SameSite&lt;/code&gt; ，因此不能将其用作针对跨站点请求伪造（CSRF）攻击的一种措施。</target>
        </trans-unit>
        <trans-unit id="2d7da530df946f3545fca78880b34ff024bfaaa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - If &lt;code&gt;true&lt;/code&gt;, then the cookie will only be available through a secured connection.</source>
          <target state="translated">&lt;strong&gt;安全&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; -如果 &lt;code&gt;true&lt;/code&gt; ，那么cookie只能通过安全连接可用。</target>
        </trans-unit>
        <trans-unit id="1e2a25b2159af2f5d84818851dec8d42f417bf2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt; in &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/1619&quot;&gt;issue 1619&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;大小&lt;/strong&gt;在 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素（参见&lt;a href=&quot;https://github.com/angular/angular.js/issues/1619&quot;&gt;问题1619&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="9f4ef8b00882dfdcc97c71765bf22fb7abfccf47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt;: the number of entries kept in the cache instance</source>
          <target state="translated">&lt;strong&gt;size&lt;/strong&gt;：缓存实例中保留的条目数</target>
        </trans-unit>
        <trans-unit id="df2a02b6376cc0ebb01f5e18aa2d102288edb907" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;status&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash; HTTP status code of the response.</source>
          <target state="translated">&lt;strong&gt;status&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number}&lt;/code&gt; &amp;ndash;响应的HTTP状态代码。</target>
        </trans-unit>
        <trans-unit id="35ce03bf58d6ec7f55ac8f04a8ebccad62becdbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;statusText&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; HTTP status text of the response.</source>
          <target state="translated">&lt;strong&gt;statusText&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;响应的HTTP状态文本。</target>
        </trans-unit>
        <trans-unit id="0345fb2cc138ca84d0cde834fd433d751d6414af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stripTrailingSlashes&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; If true, then the trailing slashes from any calculated URL will be stripped.</source>
          <target state="translated">&lt;strong&gt;stripTrailingSlashes&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;如果为true，则将剥离任何计算出的URL的尾部斜杠。</target>
        </trans-unit>
        <trans-unit id="d3ea7e3d61cd6b089004feefdef3261d48887930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;svgElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; - A list of elements to extend the current list of SVG elements. The list of SVG elements is only taken into account if SVG is &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;enabled&lt;/a&gt; for &lt;code&gt;$sanitize&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;svgElements&lt;/strong&gt; - &lt;code&gt;{Array&amp;lt;String&amp;gt;}&lt;/code&gt; -元素的列表延伸SVG元素的当前列表。仅当为 &lt;code&gt;$sanitize&lt;/code&gt; &lt;a href=&quot;%24sanitizeprovider#enableSvg.html&quot;&gt;启用&lt;/a&gt; SVG时，才考虑SVG元素列表。</target>
        </trans-unit>
        <trans-unit id="50e376066f3f2ada02d92730374d9ebd58e1e323" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tabindex&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash; Enables/disables tabindex tags</source>
          <target state="translated">&lt;strong&gt;tabindex&lt;/strong&gt; &amp;ndash; &lt;code&gt;{boolean}&lt;/code&gt; &amp;ndash;启用/禁用tabindex标签</target>
        </trans-unit>
        <trans-unit id="70e324de17d76b0a9ec0d32b1e7654a6240d0e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;timeout&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number|Promise}&lt;/code&gt; &amp;ndash; timeout in milliseconds, or &lt;a href=&quot;%24q&quot;&gt;promise&lt;/a&gt; that should abort the request when resolved.</source>
          <target state="translated">&lt;strong&gt;超时&lt;/strong&gt; &amp;ndash; &lt;code&gt;{number|Promise}&lt;/code&gt; &amp;ndash;超时（以毫秒为单位），或&lt;a href=&quot;%24q&quot;&gt;承诺&lt;/a&gt;应在解决后中止请求。</target>
        </trans-unit>
        <trans-unit id="4e679bd6dc14d74c998593892b9b48ccec9f3a8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;to&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - CSS properties &amp;amp; values at end of animation. Must have matching &lt;code&gt;from&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;到&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; -动画结束时的CSS属性和值。必须具有匹配 &lt;code&gt;from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d33b5c0716f7f5b554828e3c86a6d260fde2f1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transformRequest&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash; transform function or an array of such functions. The transform function takes the http request body and headers and returns its transformed (typically serialized) version. See &lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;Overriding the Default Transformations&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;transformRequest&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter)|Array.&amp;lt;function(data, headersGetter)&amp;gt;}&lt;/code&gt; &amp;ndash;转换函数或此类函数的数组。转换函数采用http请求正文和标头，并返回其转换后的（通常是序列化的）版本。请参见&lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;覆盖默认转换&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87f825777fa4ed7bb1205871ba42d32b29aacd6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transformResponse&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash; transform function or an array of such functions. The transform function takes the http response body, headers and status and returns its transformed (typically deserialized) version. See &lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;Overriding the Default Transformations&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;transformResponse&lt;/strong&gt; &amp;ndash; &lt;code&gt;{function(data, headersGetter, status)|Array.&amp;lt;function(data, headersGetter, status)&amp;gt;}&lt;/code&gt; &amp;ndash;转换函数或此类函数的数组。转换函数采用http响应正文，标头和状态，并返回其转换后的（通常是反序列化的）版本。请参见&lt;a href=&quot;%24http#overriding-the-default-transformations-per-request.html&quot;&gt;覆盖默认转换&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d039bff6529a3e51b665953058a2578bf03ae530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; in &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in Internet Explorer 11 (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;issue 14117&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;键入&lt;/strong&gt;在 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 在Internet Explorer 11（参见&lt;a href=&quot;https://github.com/angular/angular.js/issues/5025&quot;&gt;问题14117&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="9043907a2669b340d01a39ec2d66417c24b13029" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;uploadEventHandlers&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; - Event listeners to be bound to the XMLHttpRequest upload object. To bind events to the XMLHttpRequest object, use &lt;code&gt;eventHandlers&lt;/code&gt;. The handler will be called in the context of a &lt;code&gt;$apply&lt;/code&gt; block.</source>
          <target state="translated">&lt;strong&gt;uploadEventHandlers&lt;/strong&gt; - &lt;code&gt;{Object}&lt;/code&gt; -事件监听器被绑定到的XMLHttpRequest对象的上传。要将事件绑定到XMLHttpRequest对象，请使用 &lt;code&gt;eventHandlers&lt;/code&gt; 。该处理程序将在 &lt;code&gt;$apply&lt;/code&gt; 块的上下文中调用。</target>
        </trans-unit>
        <trans-unit id="6bca94c5d01d86c53e05d7e629d478ec3750e7c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|TrustedObject}&lt;/code&gt; &amp;ndash; Absolute or relative URL of the resource that is being requested; or an object created by a call to &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;url&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string|TrustedObject}&lt;/code&gt; &amp;ndash;所请求资源的绝对或相对URL；或通过调用 &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; 创建的对象。</target>
        </trans-unit>
        <trans-unit id="0a760b7dddba992bcb6c8a6db574124bfeae2eb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; in &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; in Internet Explorer = 11 (see &lt;a href=&quot;https://github.com/angular/angular.js/issues/7218&quot;&gt;issue 7218&lt;/a&gt;)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Internet Explorer 中 &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; 中的&lt;strong&gt;值&lt;/strong&gt; = 11（请参阅&lt;a href=&quot;https://github.com/angular/angular.js/issues/7218&quot;&gt;问题7218&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="d9d9e23f794cf05d52a0d2a6fe3ab544fb89b0e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;withCredentials&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; - whether to set the &lt;code&gt;withCredentials&lt;/code&gt; flag on the XHR object. See &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials&quot;&gt;requests with credentials&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;withCredentials&lt;/strong&gt; - &lt;code&gt;{boolean}&lt;/code&gt; -是否设置 &lt;code&gt;withCredentials&lt;/code&gt; 标志XHR对象上。有关更多信息，请参见&lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials&quot;&gt;带有凭据的请求&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6b9f84e97e3ba1d5fd7cc6a758d16b678b9e932" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xhrStatus&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Status of the XMLHttpRequest (&lt;code&gt;complete&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt; or &lt;code&gt;abort&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;xhrStatus&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; XMLHttpRequest的状态（ &lt;code&gt;complete&lt;/code&gt; ， &lt;code&gt;error&lt;/code&gt; ， &lt;code&gt;timeout&lt;/code&gt; 或 &lt;code&gt;abort&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d2bbd1de159541f1410dcb870ff574d3ec923734" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xsrfCookieName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Name of cookie containing the XSRF token.</source>
          <target state="translated">&lt;strong&gt;xsrfCookieName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;包含XSRF令牌的cookie的名称。</target>
        </trans-unit>
        <trans-unit id="82ebc64de30022400b91cd2832387f47ce545a88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xsrfHeaderName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash; Name of HTTP header to populate with the XSRF token.</source>
          <target state="translated">&lt;strong&gt;xsrfHeaderName&lt;/strong&gt; &amp;ndash; &lt;code&gt;{string}&lt;/code&gt; &amp;ndash;使用XSRF令牌填充的HTTP标头的名称。</target>
        </trans-unit>
        <trans-unit id="2b2697460deb5f5b660f6f33232f0bbe0994052e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;%24q&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that will be resolved (request success) or rejected (request failure) with a response object.</source>
          <target state="translated">一个将被响应对象解决（请求成功）或被拒绝（请求失败）的&lt;a href=&quot;%24q&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f670bf823c39c6ce15ca2cee63a5bda25c59bf4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module&lt;/a&gt; is a collection of providers, services, directives etc., and optionally config and run blocks which get applied to the application during the bootstrap process.</source>
          <target state="translated">甲&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;模块&lt;/a&gt;是供应商，服务，等等的指令的集合，以及任选配置和运行其中获得在引导过程中施加到该应用程序块。</target>
        </trans-unit>
        <trans-unit id="99f98a62c49c1d357ce0e0c6e22da8b20e044b38" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../function/angular.element&quot;&gt;jQuery or jqLite&lt;/a&gt; wrapper for the browser's &lt;code&gt;window.document&lt;/code&gt; object.</source>
          <target state="translated">一个&lt;a href=&quot;../function/angular.element&quot;&gt;jQuery的或jqLit​​e&lt;/a&gt;包装为浏览器的 &lt;code&gt;window.document&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="1b2e7a0bbc83c26ed075072213b62d4c6f673112" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function/angular.element&quot;&gt;jQuery or jqLite&lt;/a&gt; wrapper for the browser's &lt;code&gt;window.document&lt;/code&gt; object.</source>
          <target state="translated">一个&lt;a href=&quot;function/angular.element&quot;&gt;jQuery的或jqLit​​e&lt;/a&gt;包装为浏览器的 &lt;code&gt;window.document&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="7839c71de200f27fd2e542514415551d06c81302" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx&quot;&gt;JSON vulnerability&lt;/a&gt; allows third party website to turn your JSON resource URL into &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; request under some conditions. To counter this your server can prefix all JSON requests with following string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;. AngularJS will automatically strip the prefix before processing it as JSON.</source>
          <target state="translated">一个&lt;a href=&quot;http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx&quot;&gt;JSON漏洞，&lt;/a&gt;允许第三方网站把你的JSON资源网址为&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;在某些条件下的要求。为了解决这个问题，您的服务器可以为所有JSON请求添加以下字符串 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; 前缀。AngularJS在将其处理为JSON之前会自动剥离该前缀。</target>
        </trans-unit>
        <trans-unit id="2fa15ce24236637c6517ab3482040ede6e84b058" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/blur&quot;&gt;blur event&lt;/a&gt; fires when an element has lost focus.</source>
          <target state="translated">一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/blur&quot;&gt;模糊事件&lt;/a&gt;触发时元素失去焦点。</target>
        </trans-unit>
        <trans-unit id="40add3cdd16405c074177fc8110bb43b5ac7fb2b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt; with two buttons and a simple message</source>
          <target state="translated">甲&lt;a href=&quot;templates&quot;&gt;模板&lt;/a&gt;具有两个按钮和一个简单的消息</target>
        </trans-unit>
        <trans-unit id="050f37f110fc9fa63e63cd7117b1384816703419" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentInstruction&lt;/code&gt; represents the route state for a single component. An &lt;code&gt;Instruction&lt;/code&gt; is composed of a tree of these &lt;code&gt;ComponentInstruction&lt;/code&gt;s.</source>
          <target state="translated">甲 &lt;code&gt;ComponentInstruction&lt;/code&gt; 表示单一组分的路由状态。一个 &lt;code&gt;Instruction&lt;/code&gt; 由这些 &lt;code&gt;ComponentInstruction&lt;/code&gt; 的树组成。</target>
        </trans-unit>
        <trans-unit id="f8f1e492c2e32412cc2e9ab7f4b7de5a17b72edc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Router&lt;/code&gt; is responsible for mapping URLs to components.</source>
          <target state="translated">甲 &lt;code&gt;Router&lt;/code&gt; 负责映射网址组件。</target>
        </trans-unit>
        <trans-unit id="afe91777794606fc3697cc65d25283b9e3db37d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;username&lt;/code&gt; directive that asynchronously checks if a user-entered value is already taken. We mock the server request with a &lt;code&gt;$q&lt;/code&gt; deferred.</source>
          <target state="translated">一个 &lt;code&gt;username&lt;/code&gt; 异步检查用户输入的值已经采取指令。我们用延后的 &lt;code&gt;$q&lt;/code&gt; 模拟服务器请求。</target>
        </trans-unit>
        <trans-unit id="a7878972a098fc3249b245269b4fd298ddb5e251" translate="yes" xml:space="preserve">
          <source>A Controller with two functions that set the value of &lt;code&gt;spice&lt;/code&gt;</source>
          <target state="translated">具有两个功能的控制器，可设置 &lt;code&gt;spice&lt;/code&gt; 的值</target>
        </trans-unit>
        <trans-unit id="099221b87692bd857151be9e3c242bd9da492b16" translate="yes" xml:space="preserve">
          <source>A Promise that will be resolved or rejected with a response object. See &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;&lt;code&gt;$http()&lt;/code&gt; return value&lt;/a&gt;.</source>
          <target state="translated">用响应对象解决或拒绝的承诺。参见&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt; &lt;code&gt;$http()&lt;/code&gt; 返回值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08542be42901cd2d3503e21ba713f703abed31db" translate="yes" xml:space="preserve">
          <source>A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a curtain-like effect. The ngAnimate module (versions &amp;gt;=1.2) supports staggering animations and the stagger effect can be performed by creating a &lt;strong&gt;ng-EVENT-stagger&lt;/strong&gt; CSS class and attaching that class to the base CSS class used for the animation. The style property expected within the stagger class can either be a &lt;strong&gt;transition-delay&lt;/strong&gt; or an &lt;strong&gt;animation-delay&lt;/strong&gt; property (or both if your animation contains both transitions and keyframe animations).</source>
          <target state="translated">交错动画是动画的集合，这些动画在每次连续操作之间稍微延迟地发出，从而产生类似窗帘的效果。ngAnimate模块（版本&amp;gt; = 1.2）支持交错动画，并且可以通过创建&lt;strong&gt;ng-EVENT-stagger&lt;/strong&gt; CSS类并将该类附加到用于动画的基本CSS类来执行交错效果。在stagger类中预期的style属性可以是&lt;strong&gt;transition-delay&lt;/strong&gt;或&lt;strong&gt;animation-delay&lt;/strong&gt;属性（如果动画同时包含Transition和Keyframe动画，则两者都可以）。</target>
        </trans-unit>
        <trans-unit id="8b1041ce62379a6088fbb9d282654cc4b528feba" translate="yes" xml:space="preserve">
          <source>A boolean property indicating if routes defined using this provider should be matched using a case insensitive algorithm. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">一个布尔属性，指示是否应使用不区分大小写的算法来匹配使用此提供程序定义的路由。默认为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fca8caeaa11957e504e1245c3676b49630f2625d" translate="yes" xml:space="preserve">
          <source>A cache object used to store and retrieve data, primarily used by &lt;a href=&quot;../service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; and the &lt;a href=&quot;../directive/script&quot;&gt;script&lt;/a&gt; directive to cache templates and other data.</source>
          <target state="translated">一个用于存储和检索数据的缓存对象，主要由&lt;a href=&quot;../service/%24templaterequest&quot;&gt;$ templateRequest&lt;/a&gt;和&lt;a href=&quot;../directive/script&quot;&gt;script&lt;/a&gt;指令用来缓存模板和其他数据。</target>
        </trans-unit>
        <trans-unit id="7741c0b5eadb3178c8fd1b6d3cbe41c65898491f" translate="yes" xml:space="preserve">
          <source>A cache object used to store and retrieve data, primarily used by &lt;a href=&quot;service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; and the &lt;a href=&quot;directive/script&quot;&gt;script&lt;/a&gt; directive to cache templates and other data.</source>
          <target state="translated">一个用于存储和检索数据的缓存对象，主要由&lt;a href=&quot;service/%24templaterequest&quot;&gt;$ templateRequest&lt;/a&gt;和&lt;a href=&quot;directive/script&quot;&gt;script&lt;/a&gt;指令用来缓存模板和其他数据。</target>
        </trans-unit>
        <trans-unit id="9ef2ed6994f65370ddeaf83f5b2e47c35d4d5e29" translate="yes" xml:space="preserve">
          <source>A cache-control header on the response does not affect if or how responses are cached.</source>
          <target state="translated">响应上的缓存控制头不会影响响应是否或如何缓存。</target>
        </trans-unit>
        <trans-unit id="8bfa439ad785ad69c4e2d9f497dacaf475106385" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;$resume()&lt;/code&gt; on a non-suspended scope is a no-op.</source>
          <target state="translated">在非暂停作用域上调用 &lt;code&gt;$resume()&lt;/code&gt; 是禁止操作。</target>
        </trans-unit>
        <trans-unit id="9133b855702802c397e165028750356edd7047a4" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;$suspend()&lt;/code&gt; on an already suspended scope is a no-op.</source>
          <target state="translated">在已经暂停的作用域上调用 &lt;code&gt;$suspend()&lt;/code&gt; 是禁止操作。</target>
        </trans-unit>
        <trans-unit id="0ea4006eb2cb656edf669af2a4fe53b47d3e21e0" translate="yes" xml:space="preserve">
          <source>A collection of validations that are expected to perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided is expected to return a promise when it is run during the model validation process. Once the promise is delivered then the validation status will be set to true when fulfilled and false when rejected. When the asynchronous validators are triggered, each of the validators will run in parallel and the model value will only be updated once all validators have been fulfilled. As long as an asynchronous validator is unfulfilled, its key will be added to the controllers &lt;code&gt;$pending&lt;/code&gt; property. Also, all asynchronous validators will only run once all synchronous validators have passed.</source>
          <target state="translated">预期将执行异步验证（例如HTTP请求）的验证的集合。当在模型验证过程中运行该验证功能时，预期该验证功能将返回一个promise。兑现承诺后，验证状态将在实现时设置为true，在拒绝时设置为false。触发异步验证器时，每个验证器将并行运行，并且仅在满足所有验证器后才更新模型值。只要未实现异步验证器，它的密钥就会被添加到控制器的 &lt;code&gt;$pending&lt;/code&gt; 属性中。同样，所有异步验证器将仅在所有同步验证器通过后运行。</target>
        </trans-unit>
        <trans-unit id="229fac7603e8188798542bcb67ff90d46994a3c3" translate="yes" xml:space="preserve">
          <source>A collection of validators that are applied whenever the model value changes. The key value within the object refers to the name of the validator while the function refers to the validation operation. The validation operation is provided with the model value as an argument and must return a true or false value depending on the response of that validation.</source>
          <target state="translated">一个验证器的集合,每当模型值发生变化时,就会应用这些验证器。对象中的键值指的是验证器的名称,而函数指的是验证操作。验证操作是以模型值作为参数提供的,必须根据该验证的响应返回一个真值或假值。</target>
        </trans-unit>
        <trans-unit id="be0235f4b74d82983b712495add7b645995775dd" translate="yes" xml:space="preserve">
          <source>A compile function can have a return value which can be either a function or an object.</source>
          <target state="translated">编译函数可以有一个返回值,这个返回值可以是一个函数,也可以是一个对象。</target>
        </trans-unit>
        <trans-unit id="e05e2a218277dd6b00da94dc6067e64b2045df3e" translate="yes" xml:space="preserve">
          <source>A complete client-side solution</source>
          <target state="translated">完整的客户端解决方案</target>
        </trans-unit>
        <trans-unit id="e60157b6585baedc59c4d7575ad7dc9ea71f80e6" translate="yes" xml:space="preserve">
          <source>A constructor function that will be instantiated.</source>
          <target state="translated">一个将被实例化的构造函数。</target>
        </trans-unit>
        <trans-unit id="73f2b01348f1ce5048a10e6122982c908f8be945" translate="yes" xml:space="preserve">
          <source>A container for the options set by the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; directive</source>
          <target state="translated">&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;指令设置的选项的容器</target>
        </trans-unit>
        <trans-unit id="1704347efadba97c8861b4da7846bbc0b00699ef" translate="yes" xml:space="preserve">
          <source>A container for the options set by the &lt;a href=&quot;directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; directive</source>
          <target state="translated">&lt;a href=&quot;directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;指令设置的选项的容器</target>
        </trans-unit>
        <trans-unit id="39f7ee12cd4358531c59cddc0da19e827ffc1dee" translate="yes" xml:space="preserve">
          <source>A decorator for &lt;a href=&quot;../../ng/service/%24controller&quot;&gt;&lt;code&gt;$controller&lt;/code&gt;&lt;/a&gt; with additional &lt;code&gt;bindings&lt;/code&gt; parameter, useful when testing controllers of directives that use &lt;a href=&quot;../../ng/service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24controller&quot;&gt; &lt;code&gt;$controller&lt;/code&gt; &lt;/a&gt;的装饰器，带有附加的 &lt;code&gt;bindings&lt;/code&gt; 参数，在测试使用&lt;a href=&quot;../../ng/service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; &lt;/a&gt;的指令的控制器时很有用。</target>
        </trans-unit>
        <trans-unit id="4d65491f42f9e447fd2de27ab73792203123c4e5" translate="yes" xml:space="preserve">
          <source>A decorator for &lt;a href=&quot;../ng/service/%24controller&quot;&gt;&lt;code&gt;$controller&lt;/code&gt;&lt;/a&gt; with additional &lt;code&gt;bindings&lt;/code&gt; parameter, useful when testing controllers of directives that use &lt;a href=&quot;../ng/service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24controller&quot;&gt; &lt;code&gt;$controller&lt;/code&gt; &lt;/a&gt;的装饰器，带有附加的 &lt;code&gt;bindings&lt;/code&gt; 参数，在测试使用&lt;a href=&quot;../ng/service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; &lt;/a&gt;的指令的控制器时很有用。</target>
        </trans-unit>
        <trans-unit id="a6ddae07840c68a872552d4cb70b579cf8c24aef" translate="yes" xml:space="preserve">
          <source>A decorator for &lt;a href=&quot;ng/service/%24controller&quot;&gt;&lt;code&gt;$controller&lt;/code&gt;&lt;/a&gt; with additional &lt;code&gt;bindings&lt;/code&gt; parameter, useful when testing controllers of directives that use &lt;a href=&quot;ng/service/%24compile#-bindtocontroller-.html&quot;&gt;&lt;code&gt;bindToController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24controller&quot;&gt; &lt;code&gt;$controller&lt;/code&gt; &lt;/a&gt;的装饰器，带有附加的 &lt;code&gt;bindings&lt;/code&gt; 参数，在测试使用&lt;a href=&quot;ng/service/%24compile#-bindtocontroller-.html&quot;&gt; &lt;code&gt;bindToController&lt;/code&gt; &lt;/a&gt;的指令的控制器时很有用。</target>
        </trans-unit>
        <trans-unit id="ce088c4e794e32fe14c0927041d2cdf88cfae0c8" translate="yes" xml:space="preserve">
          <source>A default message can also be displayed when no &lt;code&gt;ngMessage&lt;/code&gt; directive is inserted, using the &lt;a href=&quot;ngmessagedefault&quot;&gt;&lt;code&gt;ngMessageDefault&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">当未插入 &lt;code&gt;ngMessage&lt;/code&gt; 指令时，也可以使用&lt;a href=&quot;ngmessagedefault&quot;&gt; &lt;code&gt;ngMessageDefault&lt;/code&gt; &lt;/a&gt;指令显示默认消息。</target>
        </trans-unit>
        <trans-unit id="36be02f1c6d94ec102591f40a3981d2fe909e18c" translate="yes" xml:space="preserve">
          <source>A different issue with objects or collections is that ngModel won't detect if an object property or a collection item changes. For that reason, &lt;code&gt;ngOptions&lt;/code&gt; additionally watches the model using &lt;code&gt;$watchCollection&lt;/code&gt;, when the expression contains a &lt;code&gt;track by&lt;/code&gt; clause or the the select has the &lt;code&gt;multiple&lt;/code&gt; attribute. This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection has not changed identity, but only a property on the object or an item in the collection changes.</source>
          <target state="translated">对象或集合的另一个问题是ngModel不会检测对象属性或集合项是否发生更改。因此，当表达式包含 &lt;code&gt;track by&lt;/code&gt; 子句或select具有 &lt;code&gt;multiple&lt;/code&gt; 属性时， &lt;code&gt;ngOptions&lt;/code&gt; 还会使用 &lt;code&gt;$watchCollection&lt;/code&gt; 模型。这使ngOptions可以触发选项的重新渲染，即使实际的对象/集合没有更改身份，而仅对象上的属性或集合中的项目发生了变化。</target>
        </trans-unit>
        <trans-unit id="3708b5167f652cc7a6cae8807f541525f153a1c0" translate="yes" xml:space="preserve">
          <source>A directive can specify which of the 4 matching types it supports in the &lt;a href=&quot;../api/ng/service/%24compile#-restrict-.html&quot;&gt;&lt;code&gt;restrict&lt;/code&gt;&lt;/a&gt; property of the directive definition object. The default is &lt;code&gt;EA&lt;/code&gt;.</source>
          <target state="translated">指令可以在指令定义对象的&lt;a href=&quot;../api/ng/service/%24compile#-restrict-.html&quot;&gt; &lt;code&gt;restrict&lt;/code&gt; &lt;/a&gt;属性中指定它支持4种匹配类型中的哪一种。默认值为 &lt;code&gt;EA&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06d7072e7c82651d679b053abc62ab52bfe11d8d" translate="yes" xml:space="preserve">
          <source>A directive is a behavior which should be triggered when specific HTML constructs are encountered during the compilation process. The directives can be placed in element names, attributes, class names, as well as comments. Here are some equivalent examples of invoking the &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt;&lt;code&gt;ng-bind&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">指令是一种行为，当在编译过程中遇到特定的HTML构造时应触发该行为。指令可以放在元素名称，属性，类名称以及注释中。这是调用&lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt; &lt;code&gt;ng-bind&lt;/code&gt; &lt;/a&gt;指令的一些等效示例。</target>
        </trans-unit>
        <trans-unit id="327c78294c94992b0cd933d4b87c5e9699e89329" translate="yes" xml:space="preserve">
          <source>A directive is just a function which executes when the compiler encounters it in the DOM. See &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directive API&lt;/a&gt; for in-depth documentation on how to write directives.</source>
          <target state="translated">指令只是当编译器在DOM中遇到指令时执行的函数。有关如何编写指令的深入文档，请参见&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;指令API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="00783a21194e4ab3c93280470d34ea3574675381" translate="yes" xml:space="preserve">
          <source>A factory which creates a resource object that lets you interact with &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;RESTful&lt;/a&gt; server-side data sources.</source>
          <target state="translated">工厂创建一个资源对象，使您可以与&lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot;&gt;RESTful&lt;/a&gt;服务器端数据源进行交互。</target>
        </trans-unit>
        <trans-unit id="75674063b61a643301023ae7950ffed53283453a" translate="yes" xml:space="preserve">
          <source>A first example: Data binding</source>
          <target state="translated">第一个例子。数据绑定</target>
        </trans-unit>
        <trans-unit id="e0ea85d6b6af2158aa8c6e9605380b608e4a22b9" translate="yes" xml:space="preserve">
          <source>A form is an instance of &lt;a href=&quot;../api/ng/type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;. The form instance can optionally be published into the scope using the &lt;code&gt;name&lt;/code&gt; attribute.</source>
          <target state="translated">表单是&lt;a href=&quot;../api/ng/type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;的实例。可以选择使用 &lt;code&gt;name&lt;/code&gt; 属性将表单实例发布到范围中。</target>
        </trans-unit>
        <trans-unit id="09b0457141fd71126f4f5b1856e175c7bdc679f5" translate="yes" xml:space="preserve">
          <source>A function that performs no operations. This function can be useful when writing code in the functional style.</source>
          <target state="translated">一个不执行任何操作的函数。这个函数在用函数式编写代码时很有用。</target>
        </trans-unit>
        <trans-unit id="927c2853c79260f99382637d60b1f31d09e600d8" translate="yes" xml:space="preserve">
          <source>A function that returns its first argument. This function is useful when writing code in the functional style.</source>
          <target state="translated">一个返回第一个参数的函数。这个函数在用函数式编写代码时很有用。</target>
        </trans-unit>
        <trans-unit id="3bf96ebee31efd450a90bce44c461047308f3f00" translate="yes" xml:space="preserve">
          <source>A function that should be called repeatedly.</source>
          <target state="translated">一个应该被反复调用的函数。</target>
        </trans-unit>
        <trans-unit id="d5fe795730c98a599df718415511d721ffaffbbc" translate="yes" xml:space="preserve">
          <source>A function that should be called repeatedly. If no additional arguments are passed (see below), the function is called with the current iteration count.</source>
          <target state="translated">一个应该被反复调用的函数。如果没有传递额外的参数(见下文),函数将以当前的迭代次数被调用。</target>
        </trans-unit>
        <trans-unit id="f48966c4d92539555740018c51cafcd2b987c9f4" translate="yes" xml:space="preserve">
          <source>A function which represents the compiled expression:</source>
          <target state="translated">一个表示编译后的表达式的函数。</target>
        </trans-unit>
        <trans-unit id="03e8ddc04c009e88be1986ce9071a6ff42d38f7e" translate="yes" xml:space="preserve">
          <source>A function which takes two arguments &lt;code&gt;tElement&lt;/code&gt; and &lt;code&gt;tAttrs&lt;/code&gt; (described in the &lt;code&gt;compile&lt;/code&gt; function api below) and returns a string value.</source>
          <target state="translated">该函数接受两个参数 &lt;code&gt;tElement&lt;/code&gt; 和 &lt;code&gt;tAttrs&lt;/code&gt; （在下面的 &lt;code&gt;compile&lt;/code&gt; 函数api中进行描述），并返回一个字符串值。</target>
        </trans-unit>
        <trans-unit id="02dbdfe8aec371363fd2d4f9088e6efc174fd5a2" translate="yes" xml:space="preserve">
          <source>A function, whose execution should be delayed.</source>
          <target state="translated">一个函数,其执行应该是延迟的。</target>
        </trans-unit>
        <trans-unit id="56056728c573b2a14e4a6b4609fd75c358098fed" translate="yes" xml:space="preserve">
          <source>A handful of common AngularJS directives support and trigger animation hooks whenever any major event occurs during their life cycle. The table below explains in detail which animation events are triggered:</source>
          <target state="translated">少数常见的AngularJS指令支持并在其生命周期内发生任何重大事件时触发动画钩子。下表详细解释了哪些动画事件会被触发。</target>
        </trans-unit>
        <trans-unit id="e4ed6112409252387811e119060f0e3fb404c17f" translate="yes" xml:space="preserve">
          <source>A hash containing all the modules that have been loaded into the $injector.</source>
          <target state="translated">一个包含所有已加载到$injector中的模块的哈希值。</target>
        </trans-unit>
        <trans-unit id="6280bbd23fbf02ccab69cad3ae2df8798d0ede5f" translate="yes" xml:space="preserve">
          <source>A list of module functions or their aliases. See &lt;a href=&quot;angular.module&quot;&gt;&lt;code&gt;angular.module&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;ng&lt;/code&gt; module must be explicitly added.</source>
          <target state="translated">模块功能或其别名的列表。参见&lt;a href=&quot;angular.module&quot;&gt; &lt;code&gt;angular.module&lt;/code&gt; &lt;/a&gt;。该 &lt;code&gt;ng&lt;/code&gt; 模块必须明确的添加。</target>
        </trans-unit>
        <trans-unit id="94127fa72f5be9627d12463f3a9a89dc6e85f8d2" translate="yes" xml:space="preserve">
          <source>A list of valid HTML elements or an object with one or more of the following properties:</source>
          <target state="translated">一个有效的HTML元素列表或一个具有以下一个或多个属性的对象。</target>
        </trans-unit>
        <trans-unit id="05e8a415e27bf82becfd6d37ac93442a77ca6c5f" translate="yes" xml:space="preserve">
          <source>A list of valid attributes.</source>
          <target state="translated">有效属性的清单;</target>
        </trans-unit>
        <trans-unit id="a2cff4a5b3056231e50fc5df06de40e59768b479" translate="yes" xml:space="preserve">
          <source>A locale is a specific geographical, political, or cultural region. The most commonly used locale ID consists of two parts: language code and country code. For example, &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;en-AU&lt;/code&gt;, and &lt;code&gt;zh-CN&lt;/code&gt; are all valid locale IDs that have both language codes and country codes. Because specifying a country code in locale ID is optional, locale IDs such as &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;zh&lt;/code&gt;, and &lt;code&gt;sk&lt;/code&gt; are also valid. See the &lt;a href=&quot;http://userguide.icu-project.org/locale&quot;&gt;ICU&lt;/a&gt; website for more information about using locale IDs.</source>
          <target state="translated">语言环境是特定的地理，政治或文化区域。最常用的语言环境ID由两部分组成：语言代码和国家/地区代码。例如， &lt;code&gt;en-US&lt;/code&gt; ， &lt;code&gt;en-AU&lt;/code&gt; 和 &lt;code&gt;zh-CN&lt;/code&gt; 都是有效的语言环境ID，同时具有语言代码和国家/地区代码。由于在语言环境ID中指定国家/地区代码是可选的，因此诸如 &lt;code&gt;en&lt;/code&gt; ， &lt;code&gt;zh&lt;/code&gt; 和 &lt;code&gt;sk&lt;/code&gt; 之类的语言环境ID 也有效。有关使用区域设置ID的更多信息，请访问&lt;a href=&quot;http://userguide.icu-project.org/locale&quot;&gt;ICU&lt;/a&gt;网站。</target>
        </trans-unit>
        <trans-unit id="1ffed9d0df0955721113607f963949822e354ee2" translate="yes" xml:space="preserve">
          <source>A map of DOM element attribute names to the normalized name. This is needed to do reverse lookup from normalized name back to actual name.</source>
          <target state="translated">一个DOM元素属性名与标准化名称的映射。这需要从规范化名称反向查找到实际名称。</target>
        </trans-unit>
        <trans-unit id="ac050f8b13fbbe0e23861b0e31a09920964b0407" translate="yes" xml:space="preserve">
          <source>A map of parameters for a given route, passed as part of the &lt;a href=&quot;componentinstruction&quot;&gt;&lt;code&gt;ComponentInstruction&lt;/code&gt;&lt;/a&gt; to the Lifecycle Hooks, such as &lt;code&gt;$routerOnActivate&lt;/code&gt; and &lt;code&gt;$routerOnDeactivate&lt;/code&gt;.</source>
          <target state="translated">给定路由的参数映射，作为&lt;a href=&quot;componentinstruction&quot;&gt; &lt;code&gt;ComponentInstruction&lt;/code&gt; 的&lt;/a&gt;一部分传递给生命周期挂钩，例如 &lt;code&gt;$routerOnActivate&lt;/code&gt; 和 &lt;code&gt;$routerOnDeactivate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09b167f576d80fcd815b55aefdf9875dc0673668" translate="yes" xml:space="preserve">
          <source>A map of parameters for a given route, passed as part of the &lt;a href=&quot;ngcomponentrouter/type/componentinstruction&quot;&gt;&lt;code&gt;ComponentInstruction&lt;/code&gt;&lt;/a&gt; to the Lifecycle Hooks, such as &lt;code&gt;$routerOnActivate&lt;/code&gt; and &lt;code&gt;$routerOnDeactivate&lt;/code&gt;.</source>
          <target state="translated">给定路由的参数映射，作为&lt;a href=&quot;ngcomponentrouter/type/componentinstruction&quot;&gt; &lt;code&gt;ComponentInstruction&lt;/code&gt; 的&lt;/a&gt;一部分传递给生命周期挂钩，例如 &lt;code&gt;$routerOnActivate&lt;/code&gt; 和 &lt;code&gt;$routerOnDeactivate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9324f5aeabd030e8b469f119f264258ae0a72395" translate="yes" xml:space="preserve">
          <source>A map of parameters for a given route, passed as part of the &lt;a href=&quot;type/componentinstruction&quot;&gt;&lt;code&gt;ComponentInstruction&lt;/code&gt;&lt;/a&gt; to the Lifecycle Hooks, such as &lt;code&gt;$routerOnActivate&lt;/code&gt; and &lt;code&gt;$routerOnDeactivate&lt;/code&gt;.</source>
          <target state="translated">给定路由的参数映射，作为&lt;a href=&quot;type/componentinstruction&quot;&gt; &lt;code&gt;ComponentInstruction&lt;/code&gt; 的&lt;/a&gt;一部分传递给生命周期挂钩，例如 &lt;code&gt;$routerOnActivate&lt;/code&gt; 和 &lt;code&gt;$routerOnDeactivate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3aca56da114e66b6c7c9831f0302af945e2b9423" translate="yes" xml:space="preserve">
          <source>A model consisting of a string named &lt;code&gt;spice&lt;/code&gt;</source>
          <target state="translated">由名为 &lt;code&gt;spice&lt;/code&gt; 的字符串组成的模型</target>
        </trans-unit>
        <trans-unit id="ac776570f178191e1b9faf4c959abe7440ff6155" translate="yes" xml:space="preserve">
          <source>A module for each feature</source>
          <target state="translated">每个特征都有一个模块</target>
        </trans-unit>
        <trans-unit id="263fee6d5c3ddbbb6ce730daf5dc87f3fdbb2fed" translate="yes" xml:space="preserve">
          <source>A module for each reusable component (especially directives and filters)</source>
          <target state="translated">每个可重复使用的组件(特别是指令和过滤器)的模块。</target>
        </trans-unit>
        <trans-unit id="225d25f6753d494a37f0848446bbaa811f297e5e" translate="yes" xml:space="preserve">
          <source>A module is a collection of services, directives, controllers, filters, and configuration information. &lt;code&gt;angular.module&lt;/code&gt; is used to configure the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">模块是服务，指令，控制器，过滤器和配置信息的集合。 &lt;code&gt;angular.module&lt;/code&gt; 用于配置&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injector&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1b9810a38acec3b0112fef4ba925967a0ec7560a" translate="yes" xml:space="preserve">
          <source>A more complex example, featuring different show/hide animations:</source>
          <target state="translated">一个更复杂的例子,具有不同的显示/隐藏动画。</target>
        </trans-unit>
        <trans-unit id="9802b05fcc81cdbc44d9f5ea5e204cb68b0b7cc8" translate="yes" xml:space="preserve">
          <source>A naive approach to solving this problem would be to simply insert a copy of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element and then compile it. The problem with this approach is that compiling on every &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that we clone would duplicate a lot of the work. Specifically, we'd be traversing &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; each time before cloning it to find the directives. This would cause the compilation process to be slower, in turn making applications less responsive when inserting new nodes.</source>
          <target state="translated">解决此问题的幼稚方法是简单地插入 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素的副本，然后对其进行编译。这种方法的问题在于，在我们克隆的每个 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素上进行编译会重复很多工作。具体来说，我们将在遍历 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 之前将其克隆以找到指令。这将导致编译过程变慢，从而使应用程序在插入新节点时的响应速度降低。</target>
        </trans-unit>
        <trans-unit id="a3f1861ea558e04a53d812f2833cbf6d5066b137" translate="yes" xml:space="preserve">
          <source>A new instance of deferred is constructed by calling &lt;code&gt;$q.defer()&lt;/code&gt;.</source>
          <target state="translated">通过调用 &lt;code&gt;$q.defer()&lt;/code&gt; 构造一个新的deferred实例。</target>
        </trans-unit>
        <trans-unit id="cb83fe916c440c15ab744b5d59e5a6ebfa47364e" translate="yes" xml:space="preserve">
          <source>A new promise instance is created when a deferred instance is created and can be retrieved by calling &lt;code&gt;deferred.promise&lt;/code&gt;.</source>
          <target state="translated">创建延迟实例时会创建一个新的Promise实例，可以通过调用 &lt;code&gt;deferred.promise&lt;/code&gt; 来检索它。</target>
        </trans-unit>
        <trans-unit id="713a88d680af18fb58af607a73c855c9cc2e0e1b" translate="yes" xml:space="preserve">
          <source>A new sub-array or substring of length &lt;code&gt;limit&lt;/code&gt; or less if the input had less than &lt;code&gt;limit&lt;/code&gt; elements.</source>
          <target state="translated">一个新的子阵列或子串长度 &lt;code&gt;limit&lt;/code&gt; 或更低，如果输入具有小于 &lt;code&gt;limit&lt;/code&gt; 元件。</target>
        </trans-unit>
        <trans-unit id="2b7a002c87fcd8660e3544e9875caa6df20fec19" translate="yes" xml:space="preserve">
          <source>A note about browser compatibility</source>
          <target state="translated">关于浏览器兼容性的说明</target>
        </trans-unit>
        <trans-unit id="29ae56a350199f61ba8d6960a863d68ba1e1280c" translate="yes" xml:space="preserve">
          <source>A numerical timeout or a promise returned from &lt;a href=&quot;%24timeout&quot;&gt;$timeout&lt;/a&gt;, will set the &lt;code&gt;xhrStatus&lt;/code&gt; in the &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;response&lt;/a&gt; to &quot;timeout&quot;, and any other resolved promise will set it to &quot;abort&quot;, following standard XMLHttpRequest behavior.</source>
          <target state="translated">数值超时或返回的承诺&lt;a href=&quot;%24timeout&quot;&gt;$超时&lt;/a&gt;，将设置 &lt;code&gt;xhrStatus&lt;/code&gt; 在&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;响应&lt;/a&gt;为&amp;ldquo;超时&amp;rdquo;，以及任何其他解决承诺将其设置为&amp;ldquo;中止&amp;rdquo;，以下标准XMLHttpRequest的行为。</target>
        </trans-unit>
        <trans-unit id="1116347f621c5180dfe109771a3b63007d50e2f3" translate="yes" xml:space="preserve">
          <source>A parameterized URL template with parameters prefixed by &lt;code&gt;:&lt;/code&gt; as in &lt;code&gt;/user/:username&lt;/code&gt;. If you are using a URL with a port number (e.g. &lt;code&gt;http://example.com:8080/api&lt;/code&gt;), it will be respected.</source>
          <target state="translated">一个参数化的URL模板由前缀参数 &lt;code&gt;:&lt;/code&gt; 如 &lt;code&gt;/user/:username&lt;/code&gt; 。如果您使用带有端口号的URL（例如 &lt;code&gt;http://example.com:8080/api&lt;/code&gt; ），则将被尊重。</target>
        </trans-unit>
        <trans-unit id="452392dbf344d122f7b332400f90489eab5c05a3" translate="yes" xml:space="preserve">
          <source>A path should always begin with forward slash (&lt;code&gt;/&lt;/code&gt;); the &lt;code&gt;$location.path()&lt;/code&gt; setter will add the forward slash if it is missing.</source>
          <target state="translated">路径应始终以正斜杠（ &lt;code&gt;/&lt;/code&gt; ）开头；在 &lt;code&gt;$location.path()&lt;/code&gt; 如果它缺少二传手将添加斜线。</target>
        </trans-unit>
        <trans-unit id="6a8dda83e3a1b0ef1feb44da945442f04db8d3e9" translate="yes" xml:space="preserve">
          <source>A predicate (or list of predicates) to be used by the comparator to determine the order of elements.</source>
          <target state="translated">比较器用来确定元素顺序的谓词(或谓词列表)。</target>
        </trans-unit>
        <trans-unit id="5e0995f849e5cdc1b945ea8fbb9875c89ea13cf7" translate="yes" xml:space="preserve">
          <source>A promise from calling the &lt;code&gt;$interval&lt;/code&gt; function.</source>
          <target state="translated">来自调用 &lt;code&gt;$interval&lt;/code&gt; 函数的承诺。</target>
        </trans-unit>
        <trans-unit id="4e7cf7245f1fe3b7e365471f31c20059d76f5920" translate="yes" xml:space="preserve">
          <source>A promise which will be notified on each iteration.</source>
          <target state="translated">每次迭代时都会通知的承诺。</target>
        </trans-unit>
        <trans-unit id="5212905179099b47b09b21e5997cb8a49f0a5971" translate="yes" xml:space="preserve">
          <source>A promise which will be notified on each iteration. It will resolve once all iterations of the interval complete.</source>
          <target state="translated">一个承诺,将在每次迭代时被通知。一旦间隔的所有迭代完成,它将被解析。</target>
        </trans-unit>
        <trans-unit id="040660a941ed0ab75c40a02ea66cad58886ab53e" translate="yes" xml:space="preserve">
          <source>A reference to the browser's &lt;code&gt;window&lt;/code&gt; object. While &lt;code&gt;window&lt;/code&gt; is globally available in JavaScript, it causes testability problems, because it is a global variable. In AngularJS we always refer to it through the &lt;code&gt;$window&lt;/code&gt; service, so it may be overridden, removed or mocked for testing.</source>
          <target state="translated">对浏览器 &lt;code&gt;window&lt;/code&gt; 对象的引用。虽然 &lt;code&gt;window&lt;/code&gt; 在JavaScript中全局可用，但由于它是全局变量，因此会引起可测试性问题。在AngularJS中，我们总是通过 &lt;code&gt;$window&lt;/code&gt; 服务引用它，因此它可能会被覆盖，删除或模拟以进行测试。</target>
        </trans-unit>
        <trans-unit id="de848095c9da48c3f2897c90875017cd0e56d38e" translate="yes" xml:space="preserve">
          <source>A remote template can also be used (With &lt;a href=&quot;ngmessagesinclude&quot;&gt;&lt;code&gt;ngMessagesInclude&lt;/code&gt;&lt;/a&gt;) to promote message reusability and messages can also be overridden.</source>
          <target state="translated">也可以使用远程模板（使用&lt;a href=&quot;ngmessagesinclude&quot;&gt; &lt;code&gt;ngMessagesInclude&lt;/code&gt; &lt;/a&gt;）来提高消息的可重用性，并且也可以覆盖消息。</target>
        </trans-unit>
        <trans-unit id="54b9cbb30f599a8403b248268c58e667bbc74bf9" translate="yes" xml:space="preserve">
          <source>A resource &quot;class&quot; object with methods for the default set of resource actions optionally extended with custom &lt;code&gt;actions&lt;/code&gt;. The default set contains these actions:</source>
          <target state="translated">资源&amp;ldquo;类&amp;rdquo;对象，其对象具有默认的资源操作集的方法，可以选择使用自定义 &lt;code&gt;actions&lt;/code&gt; 扩展。默认设置包含以下操作：</target>
        </trans-unit>
        <trans-unit id="8a72795321ece67e315ace2352d61342be26d7a9" translate="yes" xml:space="preserve">
          <source>A response status code between 200 and 299 is considered a success status and will result in the success callback being called. Any response status code outside of that range is considered an error status and will result in the error callback being called. Also, status codes less than -1 are normalized to zero. -1 usually means the request was aborted, e.g. using a &lt;code&gt;config.timeout&lt;/code&gt;. More information about the status might be available in the &lt;code&gt;xhrStatus&lt;/code&gt; property.</source>
          <target state="translated">在200到299之间的响应状态代码被视为成功状态，并将导致调用成功回调。任何超出该范围的响应状态代码都将被视为错误状态，并会导致错误回调被调用。同样，将小于-1的状态代码归一化为零。 -1通常意味着请求被中止，例如使用 &lt;code&gt;config.timeout&lt;/code&gt; 。 &lt;code&gt;xhrStatus&lt;/code&gt; 属性中可能提供有关状态的更多信息。</target>
        </trans-unit>
        <trans-unit id="4d78c5ef35ba9a3a351b9b8b8ececf7e7781e688" translate="yes" xml:space="preserve">
          <source>A root scope can be retrieved using the &lt;a href=&quot;../service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; key from the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Child scopes are created using the &lt;a href=&quot;%24rootscope.scope#%24new.html&quot;&gt;$new()&lt;/a&gt; method. (Most scopes are created automatically when compiled HTML template is executed.) See also the &lt;a href=&quot;../../../guide/scope&quot;&gt;Scopes guide&lt;/a&gt; for an in-depth introduction and usage examples.</source>
          <target state="translated">根范围可以使用检索&lt;a href=&quot;../service/%24rootscope&quot;&gt;$ rootScope&lt;/a&gt;从密钥&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$注射器&lt;/a&gt;。子作用域使用&lt;a href=&quot;%24rootscope.scope#%24new.html&quot;&gt;$ new（）&lt;/a&gt;方法创建。（执行合并的HTML模板时，大多数作用域都是自动创建的。）另请参阅&amp;ldquo; &lt;a href=&quot;../../../guide/scope&quot;&gt;作用域&amp;rdquo;指南&lt;/a&gt;，以获取详细的介绍和用法示例。</target>
        </trans-unit>
        <trans-unit id="004008a8c97d3672714468bc8cfe76b2c7cab307" translate="yes" xml:space="preserve">
          <source>A root scope can be retrieved using the &lt;a href=&quot;service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; key from the &lt;a href=&quot;../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Child scopes are created using the &lt;a href=&quot;type/%24rootscope.scope#%24new.html&quot;&gt;$new()&lt;/a&gt; method. (Most scopes are created automatically when compiled HTML template is executed.) See also the &lt;a href=&quot;../../guide/scope&quot;&gt;Scopes guide&lt;/a&gt; for an in-depth introduction and usage examples.</source>
          <target state="translated">根范围可以使用检索&lt;a href=&quot;service/%24rootscope&quot;&gt;$ rootScope&lt;/a&gt;从密钥&lt;a href=&quot;../auto/service/%24injector&quot;&gt;$注射器&lt;/a&gt;。子作用域使用&lt;a href=&quot;type/%24rootscope.scope#%24new.html&quot;&gt;$ new（）&lt;/a&gt;方法创建。（执行合并的HTML模板时，大多数作用域都是自动创建的。）另请参阅&amp;ldquo; &lt;a href=&quot;../../guide/scope&quot;&gt;作用域&amp;rdquo;指南&lt;/a&gt;，以获取详细的介绍和用法示例。</target>
        </trans-unit>
        <trans-unit id="9472f1a4df3f71716a86325e4dcd0e27c0314c58" translate="yes" xml:space="preserve">
          <source>A scope can inherit from a parent scope, as in this example:</source>
          <target state="translated">一个作用域可以从父作用域继承,就像在这个例子中一样。</target>
        </trans-unit>
        <trans-unit id="8a3e8603742beaaec4dd1f083ac44804290ac748" translate="yes" xml:space="preserve">
          <source>A service that can be used to create instances of component controllers. Useful for unit-testing.</source>
          <target state="translated">一个可用于创建组件控制器实例的服务。用于单元测试。</target>
        </trans-unit>
        <trans-unit id="9909d73dae5dc48bf7bd8f099425c18f2ccd1383" translate="yes" xml:space="preserve">
          <source>A service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing.</source>
          <target state="translated">一个帮助你异步运行函数的服务,并在处理完毕后使用它们的返回值(或异常)。</target>
        </trans-unit>
        <trans-unit id="7fa98307bb925b7e78fec6db866350c8f5850d65" translate="yes" xml:space="preserve">
          <source>A shared object between directive compile / linking functions which contains normalized DOM element attributes. The values reflect current binding state &lt;code&gt;{{ }}&lt;/code&gt;. The normalization is needed since all of these are treated as equivalent in AngularJS:</source>
          <target state="translated">指令编译/链接功能之间的共享对象，其中包含标准化的DOM元素属性。这些值反映了当前的绑定状态 &lt;code&gt;{{ }}&lt;/code&gt; 。由于所有这些在AngularJS中都被视为等效项，因此需要进行规范化：</target>
        </trans-unit>
        <trans-unit id="578c6a6777e13169afd3ec0627d9cbccce541d6b" translate="yes" xml:space="preserve">
          <source>A simple &lt;code&gt;ng-csp&lt;/code&gt; (or &lt;code&gt;data-ng-csp&lt;/code&gt;) attribute will tell AngularJS to deactivate both inline styles and unsafe eval. E.g. &lt;code&gt;&amp;lt;body ng-csp&amp;gt;&lt;/code&gt;. This is backwardly compatible with previous versions of AngularJS.</source>
          <target state="translated">一个简单的 &lt;code&gt;ng-csp&lt;/code&gt; （或 &lt;code&gt;data-ng-csp&lt;/code&gt; ）属性将告诉AngularJS停用内联样式和不安全的评估。例如 &lt;code&gt;&amp;lt;body ng-csp&amp;gt;&lt;/code&gt; 。这与AngularJS的早期版本向后兼容。</target>
        </trans-unit>
        <trans-unit id="8eab9356a6cee0bd4192aaa4fe8dc2252df33c89" translate="yes" xml:space="preserve">
          <source>A simple example, animating the element's opacity:</source>
          <target state="translated">一个简单的例子,动画化元素的不透明度。</target>
        </trans-unit>
        <trans-unit id="13ca11ee80a7423b520a8cbb9b876c83a8413e4b" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;checked&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">因为我们不能在 &lt;code&gt;checked&lt;/code&gt; 属性内使用插值，所以必须使用特殊指令。有关更多信息，请参见&lt;a href=&quot;../../../guide/interpolation&quot;&gt;插值指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="96ec97c9bf5c06b46afd2259dcdc487df739471f" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;disabled&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">必须使用特殊指令，因为我们不能在 &lt;code&gt;disabled&lt;/code&gt; 属性内使用插值。有关更多信息，请参见&lt;a href=&quot;../../../guide/interpolation&quot;&gt;插值指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e86a8cbd4ddf2dfcb7e716138595387a4e5a85fe" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;open&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">必须使用特殊指令，因为我们不能在 &lt;code&gt;open&lt;/code&gt; 属性内使用插值。有关更多信息，请参见&lt;a href=&quot;../../../guide/interpolation&quot;&gt;插值指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b91103bfde51390004606921a7b8fb1ff063be2b" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;readonly&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">必须使用特殊指令，因为我们不能在 &lt;code&gt;readonly&lt;/code&gt; 属性内使用插值。有关更多信息，请参见&lt;a href=&quot;../../../guide/interpolation&quot;&gt;插值指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6493fd9ee730755cb99067d28aafe6366edf30cf" translate="yes" xml:space="preserve">
          <source>A special directive is necessary because we cannot use interpolation inside the &lt;code&gt;selected&lt;/code&gt; attribute. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">必须使用特殊指令，因为我们不能在 &lt;code&gt;selected&lt;/code&gt; 属性内使用插值。有关更多信息，请参见&lt;a href=&quot;../../../guide/interpolation&quot;&gt;插值指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9d5e64837c87ce8f3783157fa15fe926b963dac1" translate="yes" xml:space="preserve">
          <source>A special type of scope is the &lt;code&gt;isolate&lt;/code&gt; scope, which does not inherit prototypically from the parent scope. This type of scope is useful for component directives that should be isolated from their parent scope. See the &lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;directives guide&lt;/a&gt; for more information about isolate scopes in custom directives.</source>
          <target state="translated">&lt;code&gt;isolate&lt;/code&gt; 类型是隔离类型的一种特殊类型，它不是原型上从父范围继承的。这种类型的作用域对于应与其父作用域隔离的组件指令很有用。有关自定义指令中隔离作用域的更多信息，请参见&lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;指令指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59ad40cb735425875e2d4a8ab8e7371e40ff26f7" translate="yes" xml:space="preserve">
          <source>A string. For example &lt;code&gt;&amp;lt;div red-on-hover&amp;gt;{{delete_str}}&amp;lt;/div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">一个字符串。例如 &lt;code&gt;&amp;lt;div red-on-hover&amp;gt;{{delete_str}}&amp;lt;/div&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b0ca9801d5fb35012af168b081343748fd65273" translate="yes" xml:space="preserve">
          <source>A trusted representation of value, that can be used in the given context.</source>
          <target state="translated">值的可信表示,可以在给定的上下文中使用。</target>
        </trans-unit>
        <trans-unit id="5b850d32e9f4e83610766a68bff4d1eb00b0f5a4" translate="yes" xml:space="preserve">
          <source>A unit test is a way of instantiating a subset of an application to apply stimulus to it. Small, structured modules help keep unit tests concise and focused.</source>
          <target state="translated">单元测试是实例化应用程序子集的一种方式,以对其施加刺激。小的、结构化的模块有助于保持单元测试的简洁和重点。</target>
        </trans-unit>
        <trans-unit id="cd209eeff32e50f79f69edda44a79e2b6ab0898e" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; where it watches an array of &lt;code&gt;watchExpressions&lt;/code&gt;. If any one expression in the collection changes the &lt;code&gt;listener&lt;/code&gt; is executed.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）的&lt;/a&gt;一个变体，它监视一系列 &lt;code&gt;watchExpressions&lt;/code&gt; 。如果集合中的任何一个表达式发生更改，则将执行 &lt;code&gt;listener&lt;/code&gt; 器。</target>
        </trans-unit>
        <trans-unit id="1b45ac319be996d2d941a9d9450c2984ad5ce01e" translate="yes" xml:space="preserve">
          <source>A version of the value that's safe to use in the given context, or throws an exception if this is impossible.</source>
          <target state="translated">在给定的上下文中可以安全使用的值的版本,如果不可能,则抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="2114b9cf09c04eaad419c5fd2210545525228750" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.CSS&lt;/code&gt; context. This context is currently unused, so there are almost no reasons to use this function so far.</source>
          <target state="translated">价值包装版本，可以作为您的信任变异 &lt;code&gt;value&lt;/code&gt; 在 &lt;code&gt;$sce.CSS&lt;/code&gt; 背景。该上下文当前未使用，因此到目前为止，几乎没有理由使用此功能。</target>
        </trans-unit>
        <trans-unit id="6aac2364c23b77028d5fac2c7100d9e6ad6e89db" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.HTML&lt;/code&gt; context (like &lt;code&gt;ng-bind-html&lt;/code&gt;).</source>
          <target state="translated">价值包装版本，可以作为您的信任变异 &lt;code&gt;value&lt;/code&gt; 在 &lt;code&gt;$sce.HTML&lt;/code&gt; 方面（如 &lt;code&gt;ng-bind-html&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="943e357106396a3e0df4457b98387b3baac1cd3d" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.JS&lt;/code&gt; context. That context is currently unused, so there are almost no reasons to use this function so far.</source>
          <target state="translated">价值包装版本，可以作为您的信任变异 &lt;code&gt;value&lt;/code&gt; 在 &lt;code&gt;$sce.JS&lt;/code&gt; 背景。该上下文当前尚未使用，因此到目前为止，几乎没有理由使用此功能。</target>
        </trans-unit>
        <trans-unit id="aee72dee5c81b8892475ad7e50e66f541550e109" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context (template URLs in &lt;code&gt;ng-include&lt;/code&gt;, most &lt;code&gt;src&lt;/code&gt; attribute bindings, ...)</source>
          <target state="translated">这可以作为你的信任变种的价值包装版本 &lt;code&gt;value&lt;/code&gt; 在 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 上下文（模板网址 &lt;code&gt;ng-include&lt;/code&gt; ，大多数 &lt;code&gt;src&lt;/code&gt; 属性绑定，...）</target>
        </trans-unit>
        <trans-unit id="e93e7d74205a414b8e296caec821b600388e6ede" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in &lt;code&gt;$sce.URL&lt;/code&gt; context. That context is currently unused, so there are almost no reasons to use this function so far.</source>
          <target state="translated">价值包装版本，可以作为您的信任变异 &lt;code&gt;value&lt;/code&gt; 在 &lt;code&gt;$sce.URL&lt;/code&gt; 背景。该上下文当前尚未使用，因此到目前为止，几乎没有理由使用此功能。</target>
        </trans-unit>
        <trans-unit id="94634151636234123b70b002561d0dc752c67a9e" translate="yes" xml:space="preserve">
          <source>A wrapped version of value that can be used as a trusted variant of your &lt;code&gt;value&lt;/code&gt; in the context you specified.</source>
          <target state="translated">有包装的价值版本，可以作为您的信任变异 &lt;code&gt;value&lt;/code&gt; 在指定的范围内。</target>
        </trans-unit>
        <trans-unit id="e5742b7d392c9ff17c292adaab06bd43e7effa1d" translate="yes" xml:space="preserve">
          <source>A11y Project</source>
          <target state="translated">A11y项目</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API参考</target>
        </trans-unit>
        <trans-unit id="771b5051428b8e31be4c1e9b28544157fe69eb11" translate="yes" xml:space="preserve">
          <source>Absolute links that go to a different domain</source>
          <target state="translated">去往不同域名的绝对链接</target>
        </trans-unit>
        <trans-unit id="abb8862cb5fd053f1431200782dd6b2385ba3889" translate="yes" xml:space="preserve">
          <source>Absolute or relative URL of the resource that is being requested; or an object created by a call to &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;.</source>
          <target state="translated">所请求资源的绝对或相对URL；或通过调用 &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; 创建的对象。</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="932d041badc29d5b5f5f02116595faeaf3e79a51" translate="yes" xml:space="preserve">
          <source>Accessibility best practices that apply to web apps in general also apply to AngularJS.</source>
          <target state="translated">适用于一般Web应用程序的可访问性最佳实践也适用于AngularJS。</target>
        </trans-unit>
        <trans-unit id="a368acd524486ce1ec9e162bc6921361dffc280e" translate="yes" xml:space="preserve">
          <source>Accessing the backend</source>
          <target state="translated">访问后台</target>
        </trans-unit>
        <trans-unit id="73f18c14545e6b8de39ba7a2b2dae679a17ad3cd" translate="yes" xml:space="preserve">
          <source>Accessing the response</source>
          <target state="translated">获取答复</target>
        </trans-unit>
        <trans-unit id="53dfdad6a297f31a276521fd544f3049a48d0385" translate="yes" xml:space="preserve">
          <source>Add behavior to the &lt;code&gt;$scope&lt;/code&gt; object.</source>
          <target state="translated">将行为添加到 &lt;code&gt;$scope&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="354177651f5bd3ccb60bca3a000a1293dfe5c051" translate="yes" xml:space="preserve">
          <source>Add custom attributes to the link element.</source>
          <target state="translated">为链接元素添加自定义属性。</target>
        </trans-unit>
        <trans-unit id="aa635fd7300af5b89def28983561aaf159169195" translate="yes" xml:space="preserve">
          <source>Add the specified modules to the current injector.</source>
          <target state="translated">将指定的模块添加到当前注射器中。</target>
        </trans-unit>
        <trans-unit id="8cf8d577c9d621dfe11c43d243bcf5df4901001a" translate="yes" xml:space="preserve">
          <source>Adding Behavior to a Scope Object</source>
          <target state="translated">向范围对象添加行为</target>
        </trans-unit>
        <trans-unit id="0dd3cd9ca66b96853fa6aa63eec6ed109ced7c1d" translate="yes" xml:space="preserve">
          <source>Adding UI logic: Controllers</source>
          <target state="translated">添加UI逻辑。控制器</target>
        </trans-unit>
        <trans-unit id="16fadc2c4c92cb401aef05833ef060e854d83464" translate="yes" xml:space="preserve">
          <source>Adding via the &lt;code&gt;$templateCache&lt;/code&gt; service:</source>
          <target state="translated">通过 &lt;code&gt;$templateCache&lt;/code&gt; 服务添加：</target>
        </trans-unit>
        <trans-unit id="92ae3f2635c80ce7fb8d316d1172975f449ef38b" translate="yes" xml:space="preserve">
          <source>Adding via the &lt;code&gt;script&lt;/code&gt; tag:</source>
          <target state="translated">通过 &lt;code&gt;script&lt;/code&gt; 标签添加：</target>
        </trans-unit>
        <trans-unit id="d8b82f8ac1fd93a8c5863d25cc6558cb656b7f40" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
          <target state="translated">其他资源</target>
        </trans-unit>
        <trans-unit id="8c2ac4451a90f41ac885a24324949060081e16e9" translate="yes" xml:space="preserve">
          <source>Additional tools for testing AngularJS applications</source>
          <target state="translated">测试AngularJS应用的其他工具</target>
        </trans-unit>
        <trans-unit id="28b5580670d0ebc7e0ca1d7a532bdf62dab04cfd" translate="yes" xml:space="preserve">
          <source>Additionally it prevents the default action (which for form means sending the request to the server and reloading the current page), but only if the form does not contain &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;data-action&lt;/code&gt;, or &lt;code&gt;x-action&lt;/code&gt; attributes.</source>
          <target state="translated">另外，它仅在表单不包含 &lt;code&gt;action&lt;/code&gt; ， &lt;code&gt;data-action&lt;/code&gt; 或 &lt;code&gt;x-action&lt;/code&gt; 属性时才阻止默认操作（对于表单，这意味着将请求发送到服务器并重新加载当前页面）。</target>
        </trans-unit>
        <trans-unit id="bed9edff008eef6908d8593fd49a8d5e98f6d618" translate="yes" xml:space="preserve">
          <source>Additionally the promise api allows for composition that is very hard to do with the traditional callback (&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;) approach. For more on this please see the &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q documentation&lt;/a&gt; especially the section on serial or parallel joining of promises.</source>
          <target state="translated">另外，promise api允许使用传统的回调（&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;）方法很难实现的合成。有关更多信息，请参阅&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q文档，&lt;/a&gt;尤其是有关Promise串行或并行连接的部分。</target>
        </trans-unit>
        <trans-unit id="fa2c2f3d21d9dad1d8fad53911125d3af2babd45" translate="yes" xml:space="preserve">
          <source>Additionally, there is the &lt;code&gt;$asyncValidators&lt;/code&gt; object which handles asynchronous validation, such as making an &lt;code&gt;$http&lt;/code&gt; request to the backend. Functions added to the object must return a promise that must be &lt;code&gt;resolved&lt;/code&gt; when valid or &lt;code&gt;rejected&lt;/code&gt; when invalid. In-progress async validations are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24pending.html&quot;&gt;&lt;code&gt;ngModelController.$pending&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">另外，还有一个 &lt;code&gt;$asyncValidators&lt;/code&gt; 对象，该对象处理异步验证，例如向后端发出 &lt;code&gt;$http&lt;/code&gt; 请求。添加到对象的函数必须返回一个承诺，该承诺必须在有效时 &lt;code&gt;resolved&lt;/code&gt; ，在无效时 &lt;code&gt;rejected&lt;/code&gt; 。进行中的异步验证通过&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24pending.html&quot;&gt; &lt;code&gt;ngModelController.$pending&lt;/code&gt; &lt;/a&gt;密钥存储。</target>
        </trans-unit>
        <trans-unit id="5f35feb0b8448abd58c67d83a67eece168f7873e" translate="yes" xml:space="preserve">
          <source>Additionally, we don't want to manually have to flush mocked out requests like we do during unit testing. For this reason the e2e $httpBackend flushes mocked out requests automatically, closely simulating the behavior of the XMLHttpRequest object.</source>
          <target state="translated">此外,我们不希望像在单元测试时那样,手动刷新模拟出来的请求,因此e2e的$httpBackend会自动刷新模拟出来的请求。出于这个原因,e2e $httpBackend会自动刷新模拟出来的请求,密切模拟XMLHttpRequest对象的行为。</target>
        </trans-unit>
        <trans-unit id="aacc914ff1ea9003accb975048b58f1c019e22cb" translate="yes" xml:space="preserve">
          <source>Additionally, you can inject the serializer and use it explicitly, for example to serialize form data for submission:</source>
          <target state="translated">此外,你可以注入序列化器并显式地使用它,例如,将表单数据序列化以提交。</target>
        </trans-unit>
        <trans-unit id="3fb165889f8d056e976595e427b1057d57a14099" translate="yes" xml:space="preserve">
          <source>Additionally, you can provide animations via the &lt;code&gt;ngAnimate&lt;/code&gt; module to animate the &lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt; effects.</source>
          <target state="translated">另外，您可以通过 &lt;code&gt;ngAnimate&lt;/code&gt; 模块提供动画，以使 &lt;code&gt;enter&lt;/code&gt; 和 &lt;code&gt;leave&lt;/code&gt; 效果动起来。</target>
        </trans-unit>
        <trans-unit id="652ae66e59651bbad3fc4132547c5b43954a085e" translate="yes" xml:space="preserve">
          <source>Additionally, you can use its &lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;yOffset&lt;/a&gt; property to specify a vertical scroll-offset (either fixed or dynamic).</source>
          <target state="translated">此外，您可以使用其&lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;yOffset&lt;/a&gt;属性指定垂直滚动偏移量（固定或动态）。</target>
        </trans-unit>
        <trans-unit id="7b94dcd84fce535cb2ad08093b0e0a53afb78af9" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;required&lt;/code&gt; attribute and &lt;code&gt;required&lt;/code&gt; validation constraint to the element when the ngRequired expression evaluates to true. Use &lt;code&gt;ngRequired&lt;/code&gt; instead of &lt;code&gt;required&lt;/code&gt; when you want to data-bind to the &lt;code&gt;required&lt;/code&gt; attribute.</source>
          <target state="translated">当ngRequired表达式的值为true时，向元素添加 &lt;code&gt;required&lt;/code&gt; 属性和 &lt;code&gt;required&lt;/code&gt; 验证约束。使用 &lt;code&gt;ngRequired&lt;/code&gt; ，而不是 &lt;code&gt;required&lt;/code&gt; 时，要将数据绑定到 &lt;code&gt;required&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="9e69d9b4b904de4d8853a3704d0f29a9f6bee390" translate="yes" xml:space="preserve">
          <source>Adds a new route definition to the &lt;code&gt;$route&lt;/code&gt; service.</source>
          <target state="translated">向 &lt;code&gt;$route&lt;/code&gt; 服务添加新的路由定义。</target>
        </trans-unit>
        <trans-unit id="59c0db8eda34b5ba002750f3013c112f07dba20a" translate="yes" xml:space="preserve">
          <source>Adds and removes the appropriate CSS class values to the element based on the difference between the new and old CSS class values (specified as newClasses and oldClasses).</source>
          <target state="translated">根据新旧CSS类值(指定为newClasses和oldClasses)之间的差异,为元素添加和删除适当的CSS类值。</target>
        </trans-unit>
        <trans-unit id="70ceb392ed0c1f4b5afec6718451ca7c7a9a3166" translate="yes" xml:space="preserve">
          <source>Adds required attribute and required validation constraint to the element when the ngRequired expression evaluates to true. Use ngRequired instead of required when you want to data-bind to the required attribute.</source>
          <target state="translated">当ngRequired表达式值为true时,向元素添加所需属性和所需验证约束。当你想将数据绑定到所需属性时,请使用ngRequired代替requirements。</target>
        </trans-unit>
        <trans-unit id="f110af3382ef95a8b0c07d1c94b21dc5bb62ac38" translate="yes" xml:space="preserve">
          <source>Adds the CSS class value specified by the classVal parameter to the element. If animations are enabled then an animation will be triggered for the class addition.</source>
          <target state="translated">将classVal参数指定的CSS类值添加到元素中。如果启用了动画,那么添加的类值会被触发动画。</target>
        </trans-unit>
        <trans-unit id="292c1947617a2554dd67a2e52cb2cdbd0ae73d9c" translate="yes" xml:space="preserve">
          <source>Advantages of Components:</source>
          <target state="translated">组件的优势。</target>
        </trans-unit>
        <trans-unit id="847093b1cdaeebf405b6651e84441c000a9a1757" translate="yes" xml:space="preserve">
          <source>After a watcher is registered with the scope, the &lt;code&gt;listener&lt;/code&gt; fn is called asynchronously (via &lt;a href=&quot;%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;) to initialize the watcher. In rare cases, this is undesirable because the listener is called when the result of &lt;code&gt;watchExpression&lt;/code&gt; didn't change. To detect this scenario within the &lt;code&gt;listener&lt;/code&gt; fn, you can compare the &lt;code&gt;newVal&lt;/code&gt; and &lt;code&gt;oldVal&lt;/code&gt;. If these two values are identical (&lt;code&gt;===&lt;/code&gt;) then the listener was called due to initialization.</source>
          <target state="translated">在范围内注册了监视程序之后，将异步调用 &lt;code&gt;listener&lt;/code&gt; fn（通过&lt;a href=&quot;%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;）以初始化监视程序。在极少数情况下，这是不可取的，因为当 &lt;code&gt;watchExpression&lt;/code&gt; 的结果未更改时会调用侦听器。要在 &lt;code&gt;listener&lt;/code&gt; fn中检测到这种情况，可以比较 &lt;code&gt;newVal&lt;/code&gt; 和 &lt;code&gt;oldVal&lt;/code&gt; 。如果这两个值相同（ &lt;code&gt;===&lt;/code&gt; ），则由于初始化而调用了侦听器。</target>
        </trans-unit>
        <trans-unit id="6d837481cd1f8b253b815490aa92a842b47bafbe" translate="yes" xml:space="preserve">
          <source>After compilation:</source>
          <target state="translated">汇编后。</target>
        </trans-unit>
        <trans-unit id="714bd774e9df38ca603bcb1b8775b4dd02aa4f0c" translate="yes" xml:space="preserve">
          <source>After evaluating the expression, the &lt;code&gt;$apply&lt;/code&gt; method performs a &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;&lt;code&gt;$digest&lt;/code&gt;&lt;/a&gt;. In the $digest phase the scope examines all of the &lt;code&gt;$watch&lt;/code&gt; expressions and compares them with the previous value. This dirty checking is done asynchronously. This means that assignment such as &lt;code&gt;$scope.username=&quot;angular&quot;&lt;/code&gt; will not immediately cause a &lt;code&gt;$watch&lt;/code&gt; to be notified, instead the &lt;code&gt;$watch&lt;/code&gt; notification is delayed until the &lt;code&gt;$digest&lt;/code&gt; phase. This delay is desirable, since it coalesces multiple model updates into one &lt;code&gt;$watch&lt;/code&gt; notification as well as guarantees that during the &lt;code&gt;$watch&lt;/code&gt; notification no other &lt;code&gt;$watch&lt;/code&gt;es are running. If a &lt;code&gt;$watch&lt;/code&gt; changes the value of the model, it will force additional &lt;code&gt;$digest&lt;/code&gt; cycle.</source>
          <target state="translated">计算表达式后， &lt;code&gt;$apply&lt;/code&gt; 方法执行&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;/a&gt;。在$ digest阶段，范围将检查所有 &lt;code&gt;$watch&lt;/code&gt; 表达式并将它们与先前的值进行比较。这种脏检查是异步完成的。这意味着，分配诸如 &lt;code&gt;$scope.username=&quot;angular&quot;&lt;/code&gt; 将不会立即导致一个 &lt;code&gt;$watch&lt;/code&gt; 被通知，而不是 &lt;code&gt;$watch&lt;/code&gt; 通知被延迟，直到 &lt;code&gt;$digest&lt;/code&gt; 阶段。此延迟是可取的，因为它将多个模型更新合并到一个 &lt;code&gt;$watch&lt;/code&gt; 通知中，并保证在 &lt;code&gt;$watch&lt;/code&gt; 通知期间没有其他 &lt;code&gt;$watch&lt;/code&gt; es正在运行。如果 &lt;code&gt;$watch&lt;/code&gt; 更改了模型的值，则将强制执行附加的 &lt;code&gt;$digest&lt;/code&gt; 循环。</target>
        </trans-unit>
        <trans-unit id="0f6ac511eee4f8b67cef9c9c0f8eb0dbd8113bdd" translate="yes" xml:space="preserve">
          <source>After linking the view is not updated until after a call to $digest which typically is done by AngularJS automatically.</source>
          <target state="translated">在链接视图后,要等到调用$digest后才会更新,而$digest通常是由AngularJS自动完成的。</target>
        </trans-unit>
        <trans-unit id="4b4c5b8a75d9c61cd56a5a198356ed3648ef2dcc" translate="yes" xml:space="preserve">
          <source>After that, the configuration blocks (&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; functions) are executed. This means the configuration blocks of the required modules execute before the configuration blocks of any requiring module.</source>
          <target state="translated">之后，将执行配置块（&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt;函数）。这意味着所需模块的配置块在任何所需模块的配置块之前执行。</target>
        </trans-unit>
        <trans-unit id="d4c88341f5c5a27217b8f49b95476ac841a5d629" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;$log&lt;/code&gt; service has been instantiated the decorator is fired. The decorator function has a &lt;code&gt;$delegate&lt;/code&gt; object injected to provide access to the service that matches the selector in the decorator. This &lt;code&gt;$delegate&lt;/code&gt; will be the service you are decorating. The return value of the function &lt;em&gt;provided to the decorator&lt;/em&gt; will take place of the service, directive, or filter being decorated.</source>
          <target state="translated">实例化 &lt;code&gt;$log&lt;/code&gt; 服务后，将触发装饰器。装饰器函数注入了 &lt;code&gt;$delegate&lt;/code&gt; 对象，以提供对与装饰器中的选择器匹配的服务的访问。这 &lt;code&gt;$delegate&lt;/code&gt; 将是您装修服务。&lt;em&gt;提供给装饰器&lt;/em&gt;的函数的返回值将代替被装饰的服务，指令或过滤器。</target>
        </trans-unit>
        <trans-unit id="cce55f18d89c3103fa1947be1b088e997277d8d3" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngHide&lt;/code&gt; expression evaluates to a non truthy value and just before contents are set to visible.</source>
          <target state="translated">在 &lt;code&gt;ngHide&lt;/code&gt; 表达式的计算结果为非真实值之后，以及将内容设置为可见之前。</target>
        </trans-unit>
        <trans-unit id="e1ab027a6f7956cab176653dfbf6557bc5215022" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngHide&lt;/code&gt; expression evaluates to a truthy value and just before the contents are set to hidden.</source>
          <target state="translated">在 &lt;code&gt;ngHide&lt;/code&gt; 表达式计算出真实值之后，而在将内容设置为隐藏之前。</target>
        </trans-unit>
        <trans-unit id="9d89921bca08cb6fce6a3bb709fa68541674e402" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngShow&lt;/code&gt; expression evaluates to a non truthy value and just before the contents are set to hidden.</source>
          <target state="translated">在 &lt;code&gt;ngShow&lt;/code&gt; 表达式的计算结果为非真实值之后，而在将内容设置为隐藏之前。</target>
        </trans-unit>
        <trans-unit id="111f924f0a9aa3bf53d410fe9609866c67688702" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;ngShow&lt;/code&gt; expression evaluates to a truthy value and just before contents are set to visible.</source>
          <target state="translated">在 &lt;code&gt;ngShow&lt;/code&gt; 表达式的计算结果为真实值之后，而在将内容设置为可见之前。</target>
        </trans-unit>
        <trans-unit id="4f48526b77c6460bb06d0ccd8371e34af473f98d" translate="yes" xml:space="preserve">
          <source>After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller properties. You can access these bindings once they have been initialized by providing a controller method called &lt;code&gt;$onInit&lt;/code&gt;, which is called after all the controllers on an element have been constructed and had their bindings initialized.</source>
          <target state="translated">实例化控制器后，隔离范围绑定的初始值将绑定到控制器属性。一旦绑定被初始化，就可以通过提供一种称为 &lt;code&gt;$onInit&lt;/code&gt; 的控制器方法来访问这些绑定，该方法在构造元素上的所有控制器并初始化了它们的绑定之后调用。</target>
        </trans-unit>
        <trans-unit id="c607ef5c745b6810ea7c3c7628151983d81c150d" translate="yes" xml:space="preserve">
          <source>After the page and all of the code is loaded, find the root element of your AngularJS application, which is typically the root of the document.</source>
          <target state="translated">在页面和所有代码加载完毕后,找到你的AngularJS应用的根元素,通常是文档的根。</target>
        </trans-unit>
        <trans-unit id="9cbf70d065f21f96da19dec3004f6ea32dededec" translate="yes" xml:space="preserve">
          <source>After transclusion extraction</source>
          <target state="translated">萃取后</target>
        </trans-unit>
        <trans-unit id="ed0a35043da2cf495a2d6be468099e7a542faec9" translate="yes" xml:space="preserve">
          <source>After transclusion extraction:</source>
          <target state="translated">经过反萃提取。</target>
        </trans-unit>
        <trans-unit id="e285e9768c55f6517ffdb13c849b48bbb147341e" translate="yes" xml:space="preserve">
          <source>Afterwards, bootstrap your app with this new module.</source>
          <target state="translated">之后,用这个新模块来引导你的应用。</target>
        </trans-unit>
        <trans-unit id="fdc54aaa92409b498b3e55cfe625a5ae6919300c" translate="yes" xml:space="preserve">
          <source>Again, this binding is live, i.e. the DOM will be automatically updated whenever the result of the function changes. The button to pay the invoice uses the directive &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt;. This will evaluate the corresponding expression whenever the button is clicked.</source>
          <target state="translated">同样，该绑定是实时的，即，只要函数的结果发生更改，DOM就会自动更新。支付发票的按钮使用指令&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;。每当单击按钮时，它将评估相应的表达式。</target>
        </trans-unit>
        <trans-unit id="79db2c9fda03e69529128dc503983397397f3639" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;%24q#when.html&quot;&gt;when&lt;/a&gt; to maintain naming consistency with ES6.</source>
          <target state="translated">&lt;a href=&quot;%24q#when.html&quot;&gt;何时&lt;/a&gt;与ES6保持命名一致性的别名。</target>
        </trans-unit>
        <trans-unit id="d53b765cff1cd744d3fd72e862c814dcbde8f0ca" translate="yes" xml:space="preserve">
          <source>Alias: &lt;a href=&quot;ngform&quot;&gt;&lt;code&gt;ngForm&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">别名：&lt;a href=&quot;ngform&quot;&gt; &lt;code&gt;ngForm&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="982e50610ee1a463d2de619756fddf0b7506d21c" translate="yes" xml:space="preserve">
          <source>All 4 kinds of bindings (&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt;) can be made optional by adding &lt;code&gt;?&lt;/code&gt; to the expression. The marker must come after the mode and before the attribute name. See the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/iscp&quot;&gt;Invalid Isolate Scope Definition error&lt;/a&gt; for definition examples. This is useful to refine the interface directives provide. One subtle difference between optional and non-optional happens &lt;strong&gt;when the binding attribute is not set&lt;/strong&gt;:</source>
          <target state="translated">通过添加 &lt;code&gt;?&lt;/code&gt; 可以使所有4种绑定（ &lt;code&gt;@&lt;/code&gt; ， &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; ）成为可选的。表达。标记必须位于模式之后和属性名称之前。有关定义示例，请参见&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/iscp&quot;&gt;无效隔离范围定义错误&lt;/a&gt;。这对于改进提供的接口指令很有用。&lt;strong&gt;当未设置binding属性时，&lt;/strong&gt;可选和非可选之间存在细微的差别：</target>
        </trans-unit>
        <trans-unit id="86d85c5a64cd00727842decd6d1b20b43012da09" translate="yes" xml:space="preserve">
          <source>All cookies</source>
          <target state="translated">所有饼干</target>
        </trans-unit>
        <trans-unit id="ec0b516f012da1a300f51233f3fc532b53f1545b" translate="yes" xml:space="preserve">
          <source>All different types of tracking functions, their syntax, and their support for duplicate items in collections can be found in the &lt;a href=&quot;ngrepeat#ngRepeat-arguments.html&quot;&gt;ngRepeat expression description&lt;/a&gt;.</source>
          <target state="translated">可以在&lt;a href=&quot;ngrepeat#ngRepeat-arguments.html&quot;&gt;ngRepeat表达式说明中&lt;/a&gt;找到所有不同类型的跟踪功能，其语法以及对集合中重复项的支持。</target>
        </trans-unit>
        <trans-unit id="e3159c7682fd037fbbeed77e34c757d4c52e444c" translate="yes" xml:space="preserve">
          <source>All directives and components must use the standard &lt;code&gt;{{&lt;/code&gt;&lt;code&gt;}}&lt;/code&gt; interpolation symbols in their templates. If you change the application interpolation symbols the &lt;a href=&quot;%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt; service will attempt to denormalize the standard symbols to the custom symbols. The denormalization process is not clever enough to know not to replace instances of the standard symbols where they would not normally be treated as interpolation symbols. For example in the following code snippet the closing braces of the literal object will get incorrectly denormalized:</source>
          <target state="translated">所有指令和组件必须在其模板中使用标准 &lt;code&gt;{{&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 插补符号。如果更改应用程序插值符号，则&lt;a href=&quot;%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;服务将尝试将标准符号标准化为自定义符号。去规范化过程不够聪明，以至于不知道在正常情况下不会替换标准符号实例的情况下不替换它们。例如，在下面的代码片段中，文字对象的右括号将被错误地反规范化：</target>
        </trans-unit>
        <trans-unit id="73501beef5e8878433719d4f65aeedc3d1bb85c4" translate="yes" xml:space="preserve">
          <source>All items are passed through the predicate (or predicates), and the returned values are saved along with their type (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt; etc). For example, an item &lt;code&gt;{label: 'foo'}&lt;/code&gt;, passed through a predicate that extracts the value of the &lt;code&gt;label&lt;/code&gt; property, would be transformed to:</source>
          <target state="translated">所有项目都通过谓词（或多个谓词）传递，并且返回的值及其类型（ &lt;code&gt;string&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; 等）一起保存。例如，一个项目 &lt;code&gt;{label: 'foo'}&lt;/code&gt; 通过谓词传递，即提取的值 &lt;code&gt;label&lt;/code&gt; 属性，会被变换为：</target>
        </trans-unit>
        <trans-unit id="a25aaffbef3857cd123066d794fffb0b8d68aa35" translate="yes" xml:space="preserve">
          <source>All localizable AngularJS components depend on locale-specific rule sets managed by the &lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;&lt;code&gt;$locale&lt;/code&gt; service&lt;/a&gt;.</source>
          <target state="translated">所有可本地化的AngularJS组件都取决于&lt;a href=&quot;../api/ng/service/%24locale&quot;&gt; &lt;code&gt;$locale&lt;/code&gt; 服务&lt;/a&gt;管理的特定于语言环境的规则集。</target>
        </trans-unit>
        <trans-unit id="6a47817fa29a225834088f98ddaf9bf379a62572" translate="yes" xml:space="preserve">
          <source>All of the setter methods return the same &lt;code&gt;$location&lt;/code&gt; object to allow chaining. For example, to change multiple segments in one go, chain setters like this:</source>
          <target state="translated">所有的setter方法都返回相同的 &lt;code&gt;$location&lt;/code&gt; 对象以允许链接。例如，要一次性更改多个细分，请使用如下链设置器：</target>
        </trans-unit>
        <trans-unit id="e5665273a60bfa82bedc39a2b20426fbbdbe35b2" translate="yes" xml:space="preserve">
          <source>All of this compilation takes place in the web browser; no server side or pre-compilation step is involved.</source>
          <target state="translated">所有这些编译都是在网络浏览器中进行的,不涉及服务器端或预编译步骤。</target>
        </trans-unit>
        <trans-unit id="2bb32db6893580bdfa7e771a49c32315a6221726" translate="yes" xml:space="preserve">
          <source>All parameters can be changed dynamically. The next example shows how you can make the columns of a table sortable, by binding the &lt;code&gt;expression&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; parameters to scope properties.</source>
          <target state="translated">所有参数均可动态更改。下一个示例说明如何通过将 &lt;code&gt;expression&lt;/code&gt; 和 &lt;code&gt;reverse&lt;/code&gt; 参数绑定到作用域属性来使表的列可排序。</target>
        </trans-unit>
        <trans-unit id="15074bf6692ab4d76bbae6a637a1292c7beea479" translate="yes" xml:space="preserve">
          <source>All special purpose objects except for the Controller are defined via Factory recipes.</source>
          <target state="translated">除控制器外,所有特殊用途的对象都是通过工厂配方定义的。</target>
        </trans-unit>
        <trans-unit id="2cad0a05b7bc6c8be5db0377e3f07206383a266c" translate="yes" xml:space="preserve">
          <source>All that is going on here with ngShow/ngHide behind the scenes is the &lt;code&gt;.ng-hide&lt;/code&gt; class is added/removed (when the hidden state is valid). Since ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.</source>
          <target state="translated">ngShow / ngHide在后台进行的 &lt;code&gt;.ng-hide&lt;/code&gt; 都是添加/删除了.ng-hide类（当隐藏状态有效时）。由于ngShow和ngHide具有动画意识，因此我们可以匹配一个过渡，而ngAnimate则处理其余部分。</target>
        </trans-unit>
        <trans-unit id="8e830154a70aba6c6c2d76c09999e74a8801b263" translate="yes" xml:space="preserve">
          <source>All values that are passed to &lt;code&gt;$location&lt;/code&gt; setter methods, &lt;code&gt;path()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;hash()&lt;/code&gt;, are encoded.</source>
          <target state="translated">传递给 &lt;code&gt;$location&lt;/code&gt; setter方法的所有值 &lt;code&gt;path()&lt;/code&gt; ， &lt;code&gt;search()&lt;/code&gt; ， &lt;code&gt;hash()&lt;/code&gt; 都经过编码。</target>
        </trans-unit>
        <trans-unit id="ee866773b32bc215a390a39a4f20f9a341baa022" translate="yes" xml:space="preserve">
          <source>Allows defining the set of characters that are allowed in AngularJS expressions. The function &lt;code&gt;identifierStart&lt;/code&gt; will get called to know if a given character is a valid character to be the first character for an identifier. The function &lt;code&gt;identifierContinue&lt;/code&gt; will get called to know if a given character is a valid character to be a follow-up identifier character. The functions &lt;code&gt;identifierStart&lt;/code&gt; and &lt;code&gt;identifierContinue&lt;/code&gt; will receive as arguments the single character to be identifier and the character code point. These arguments will be &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;numeric&lt;/code&gt;. Keep in mind that the &lt;code&gt;string&lt;/code&gt; parameter can be two characters long depending on the character representation. It is expected for the function to return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, whether that character is allowed or not.</source>
          <target state="translated">允许定义AngularJS表达式中允许的字符集。将调用函数 &lt;code&gt;identifierStart&lt;/code&gt; 来知道给定字符是否是有效字符，以作为标识符的第一个字符。将调用函数 &lt;code&gt;identifierContinue&lt;/code&gt; 来了解给定字符是否为有效字符，以作为后续标识符字符。函数 &lt;code&gt;identifierStart&lt;/code&gt; 和 &lt;code&gt;identifierContinue&lt;/code&gt; 将作为参数的唯一字符和字符代码点作为参数接收。这些参数将是 &lt;code&gt;string&lt;/code&gt; 和 &lt;code&gt;numeric&lt;/code&gt; 。请记住， &lt;code&gt;string&lt;/code&gt; 参数可以是两个字符长，具体取决于字符表示形式。无论是否允许该字符，函数都应返回 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a0dfc44a8bb5647973347c240aca24c18c76b6e" translate="yes" xml:space="preserve">
          <source>Allows multiple options to be selected. The selected values will be bound to the model as an array.</source>
          <target state="translated">允许选择多个选项。选定的值将以数组形式绑定到模型上。</target>
        </trans-unit>
        <trans-unit id="6893f81d9274e77bed184d8c69170d4bd9bc82d3" translate="yes" xml:space="preserve">
          <source>Allows the user to query if the particular service exists.</source>
          <target state="translated">允许用户查询该服务是否存在。</target>
        </trans-unit>
        <trans-unit id="c700927994271f378f5571025a478be8044ec069" translate="yes" xml:space="preserve">
          <source>Allows you to convert a JavaScript object into JSON string.</source>
          <target state="translated">允许你将一个JavaScript对象转换成JSON字符串。</target>
        </trans-unit>
        <trans-unit id="8d2ed1f71a67126f9d5f6f5fb8ead5d97d9e1cdd" translate="yes" xml:space="preserve">
          <source>Also there is special case for Moz prefix starting with upper case letter.</source>
          <target state="translated">另外,Moz的前缀有大写字母开头的特殊情况。</target>
        </trans-unit>
        <trans-unit id="ef2bcb812e9ddd641d60f5e796d9a28cdbad4e2c" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;ngIf&lt;/code&gt; recreates elements using their compiled state. An example of this behavior is if an element's class attribute is directly modified after it's compiled, using something like jQuery's &lt;code&gt;.addClass()&lt;/code&gt; method, and the element is later removed. When &lt;code&gt;ngIf&lt;/code&gt; recreates the element the added class will be lost because the original compiled state is used to regenerate the element.</source>
          <target state="translated">同样， &lt;code&gt;ngIf&lt;/code&gt; 使用其已编译状态重新创建元素。此行为的一个示例是，如果元素的class属性在编译后使用jQuery的 &lt;code&gt;.addClass()&lt;/code&gt; 方法直接修改，然后将该元素删除。当 &lt;code&gt;ngIf&lt;/code&gt; 重新创建元素时，添加的类将丢失，因为原始的编译状态用于重新生成元素。</target>
        </trans-unit>
        <trans-unit id="cae8ad452ed52b4364f25ab05ff05e650916df18" translate="yes" xml:space="preserve">
          <source>Alternative &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that follows jQuery's &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;param()&lt;/code&gt;&lt;/a&gt; method logic. The serializer will also sort the params alphabetically.</source>
          <target state="translated">遵循jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;param()&lt;/code&gt; &lt;/a&gt;方法逻辑的替代&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; params序列化程序。序列化程序还将按字母顺序对参数进行排序。</target>
        </trans-unit>
        <trans-unit id="1986d05c6408cc68f17db3c47392a453a7bfa1f3" translate="yes" xml:space="preserve">
          <source>Alternative &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that follows jQuery's &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt;&lt;code&gt;param()&lt;/code&gt;&lt;/a&gt; method logic. The serializer will also sort the params alphabetically.</source>
          <target state="translated">遵循jQuery &lt;a href=&quot;http://api.jquery.com/jquery.param/&quot;&gt; &lt;code&gt;param()&lt;/code&gt; &lt;/a&gt;方法逻辑的替代&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; params序列化程序。序列化程序还将按字母顺序对参数进行排序。</target>
        </trans-unit>
        <trans-unit id="0e831c9cda5cf6bfb0807f5344ad0dc49c8046ab" translate="yes" xml:space="preserve">
          <source>Although AngularJS makes i18n convenient, there are several things you need to be conscious of as you develop your app.</source>
          <target state="translated">虽然AngularJS让i18n变得很方便,但是在开发应用的过程中,你需要注意几件事。</target>
        </trans-unit>
        <trans-unit id="cc361285cac50472d68caba2b407d041dcf954eb" translate="yes" xml:space="preserve">
          <source>Although the CSS is a little different than what we saw before, the idea is the same.</source>
          <target state="translated">虽然CSS与我们之前看到的有些不同,但思路是一样的。</target>
        </trans-unit>
        <trans-unit id="1d3f0a93f4e12755f9ed54ee382ddaf25896e70f" translate="yes" xml:space="preserve">
          <source>Although there are many ways to test a Controller, one of the best conventions, shown below, involves injecting the &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; and &lt;a href=&quot;../api/ng/service/%24controller&quot;&gt;$controller&lt;/a&gt;:</source>
          <target state="translated">尽管测试控制器的方法有很多，但如下所示的最佳约定之一是注入&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$ rootScope&lt;/a&gt;和&lt;a href=&quot;../api/ng/service/%24controller&quot;&gt;$ controller&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="664ea04f360cf50ee3034fb79c72bfc990a51803" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Array.&amp;lt;DirectiveObject&amp;gt;&lt;/code&gt;&lt;sub&gt;&lt;a href=&quot;decorators#drtvArray.html&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;</source>
          <target state="translated">一个 &lt;code&gt;Array.&amp;lt;DirectiveObject&amp;gt;&lt;/code&gt; &lt;sub&gt;&lt;a href=&quot;decorators#drtvArray.html&quot;&gt;1&lt;/a&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="72132aa9016db41ce813e2e986f465c21ae9978a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt; directive that validates whether the input is a valid integer. For example, &lt;code&gt;1.23&lt;/code&gt; is an invalid value, since it contains a fraction. Note that we validate the viewValue (the string value of the control), and not the modelValue. This is because input[number] converts the viewValue to a number when running the &lt;code&gt;$parsers&lt;/code&gt;.</source>
          <target state="translated">一个 &lt;code&gt;integer&lt;/code&gt; 指令，用于验证输入是否为有效整数。例如， &lt;code&gt;1.23&lt;/code&gt; 是无效值，因为它包含一个分数。请注意，我们验证viewValue（控件的字符串值），而不验证modelValue。这是因为在运行 &lt;code&gt;$parsers&lt;/code&gt; 时，input [number]会将viewValue转换为数字。</target>
        </trans-unit>
        <trans-unit id="7c21d96b949c9521f03fc61f9044eaf72551b8b6" translate="yes" xml:space="preserve">
          <source>An AngularJS &lt;strong&gt;service&lt;/strong&gt; is a singleton object created by a &lt;strong&gt;service factory&lt;/strong&gt;. These &lt;strong&gt;service factories&lt;/strong&gt; are functions which, in turn, are created by a &lt;strong&gt;service provider&lt;/strong&gt;. The &lt;strong&gt;service providers&lt;/strong&gt; are constructor functions. When instantiated they must contain a property called &lt;code&gt;$get&lt;/code&gt;, which holds the &lt;strong&gt;service factory&lt;/strong&gt; function.</source>
          <target state="translated">AngularJS &lt;strong&gt;服务&lt;/strong&gt;是由&lt;strong&gt;服务工厂&lt;/strong&gt;创建的单例对象。这些&lt;strong&gt;服务工厂&lt;/strong&gt;是由&lt;strong&gt;服务提供商&lt;/strong&gt;创建的功能。该&lt;strong&gt;服务提供商&lt;/strong&gt;是构造函数。实例化后，它们必须包含一个名为 &lt;code&gt;$get&lt;/code&gt; 的属性，该属性包含&lt;strong&gt;服务工厂&lt;/strong&gt;功能。</target>
        </trans-unit>
        <trans-unit id="5f5e902fbb09480c376fa0194b1e609ced186aa3" translate="yes" xml:space="preserve">
          <source>An AngularJS expression to be executed.</source>
          <target state="translated">一个要执行的AngularJS表达式。</target>
        </trans-unit>
        <trans-unit id="b37bf8f17fc0e4cf752fc858258841e0042e4bb7" translate="yes" xml:space="preserve">
          <source>An Example of &quot;Compile&quot; Versus &quot;Link&quot;</source>
          <target state="translated">&quot;编译 &quot;与 &quot;链接 &quot;的例子</target>
        </trans-unit>
        <trans-unit id="9ef9cd2a9880a76f773b11fee32868da9ed975cc" translate="yes" xml:space="preserve">
          <source>An alternative solution to this problem would be using the &lt;a href=&quot;ngcloak&quot;&gt;ngCloak&lt;/a&gt; directive.</source>
          <target state="translated">解决此问题的另一种方法是使用&lt;a href=&quot;ngcloak&quot;&gt;ngCloak&lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="7e680432122c70e32424dcdf0fd61139308710c4" translate="yes" xml:space="preserve">
          <source>An animation runner returned by an $animate function.</source>
          <target state="translated">一个由$animate函数返回的动画运行器。</target>
        </trans-unit>
        <trans-unit id="7056c57ecc4a5b129adb248caf351bdeae7d09c4" translate="yes" xml:space="preserve">
          <source>An array or hash of promises.</source>
          <target state="translated">承诺的数组或哈希。</target>
        </trans-unit>
        <trans-unit id="438126d6254d3420fb8b54716dd74b0c0c91bd27" translate="yes" xml:space="preserve">
          <source>An example of interpolation is shown below:</source>
          <target state="translated">下面是一个插值的例子。</target>
        </trans-unit>
        <trans-unit id="25266bc9e38243de1cfb398019dfc315000d1f50" translate="yes" xml:space="preserve">
          <source>An example on how to implement animations using &lt;code&gt;ngClassEven&lt;/code&gt;:</source>
          <target state="translated">有关如何使用 &lt;code&gt;ngClassEven&lt;/code&gt; 实现动画的示例：</target>
        </trans-unit>
        <trans-unit id="255badf5f975c2e6c577cd02fbbd0dd9ce5fa56a" translate="yes" xml:space="preserve">
          <source>An example on how to implement animations using &lt;code&gt;ngClassOdd&lt;/code&gt;:</source>
          <target state="translated">有关如何使用 &lt;code&gt;ngClassOdd&lt;/code&gt; 实现动画的示例：</target>
        </trans-unit>
        <trans-unit id="62dc53f9c709ad888e01b1a59fcc76fe0155aa4c" translate="yes" xml:space="preserve">
          <source>An expression can be optionally prefixed with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; to control the sorting direction, ascending or descending. For example, &lt;code&gt;'+label'&lt;/code&gt; or &lt;code&gt;'-label'&lt;/code&gt;. If no property is provided, (e.g. &lt;code&gt;'+'&lt;/code&gt; or &lt;code&gt;'-'&lt;/code&gt;), the collection element itself is used in comparisons.</source>
          <target state="translated">表达式可以选择以 &lt;code&gt;+&lt;/code&gt; 或 &lt;code&gt;-&lt;/code&gt; 为前缀，以控制排序方向（升序或降序）。例如， &lt;code&gt;'+label'&lt;/code&gt; 或 &lt;code&gt;'-label'&lt;/code&gt; 。如果未提供任何属性（例如 &lt;code&gt;'+'&lt;/code&gt; 或 &lt;code&gt;'-'&lt;/code&gt; ），则将collection元素本身用于比较。</target>
        </trans-unit>
        <trans-unit id="3f036173d46ad7b878cf3296d2b2dac5c0eb15db" translate="yes" xml:space="preserve">
          <source>An expression that starts with &lt;code&gt;::&lt;/code&gt; is considered a one-time expression. One-time expressions will stop recalculating once they are stable, which happens after the first digest if the expression result is a non-undefined value (see value stabilization algorithm below).</source>
          <target state="translated">以 &lt;code&gt;::&lt;/code&gt; 开头的表达式被视为一次性表达式。一次性表达式一旦稳定就将停止重新计算，如果表达式结果为非不确定值，则在第一次摘要后发生（请参阅下面的值稳定算法）。</target>
        </trans-unit>
        <trans-unit id="1377c3d192d7bf8b19b573abc270573ee59d7ec8" translate="yes" xml:space="preserve">
          <source>An injectable class (constructor function) that will be instantiated.</source>
          <target state="translated">一个将被实例化的可注入类(构造函数)。</target>
        </trans-unit>
        <trans-unit id="a9b6840dea47811dc05aae5027aa0a40ccd033fa" translate="yes" xml:space="preserve">
          <source>An injectable directive factory function. See the &lt;a href=&quot;../../../guide/directive&quot;&gt;directive guide&lt;/a&gt; and the &lt;a href=&quot;../service/%24compile&quot;&gt;compile API&lt;/a&gt; for more info.</source>
          <target state="translated">可注入指令工厂功能。有关更多信息，请参见&lt;a href=&quot;../../../guide/directive&quot;&gt;指令指南&lt;/a&gt;和&lt;a href=&quot;../service/%24compile&quot;&gt;compile API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a2c035f4bab2a6ca81a26cf1561e460c12d7af3" translate="yes" xml:space="preserve">
          <source>An object hash with all failing validator ids as keys.</source>
          <target state="translated">一个以所有失败的验证器id为键的对象哈希。</target>
        </trans-unit>
        <trans-unit id="7481e3cf882547d1cafefe1993d08399c2f33260" translate="yes" xml:space="preserve">
          <source>An object hash with all pending validator ids as keys.</source>
          <target state="translated">一个以所有待验证器ID为键的对象哈希。</target>
        </trans-unit>
        <trans-unit id="f2cf8cfd906e9099c3100166fe9e3fd7080b9f49" translate="yes" xml:space="preserve">
          <source>An object hash, containing references to controls or forms with failing validators, where:</source>
          <target state="translated">一个对象哈希,包含对验证器失效的控件或表单的引用,其中:</target>
        </trans-unit>
        <trans-unit id="b4699c85185b56a805c395192bbb329ac54ca51f" translate="yes" xml:space="preserve">
          <source>An object hash, containing references to controls or forms with pending validators, where:</source>
          <target state="translated">一个对象哈希,包含对具有待验证器的控件或表格的引用,其中:</target>
        </trans-unit>
        <trans-unit id="e28988a5accfd6915ed9bed343b184db496ecd37" translate="yes" xml:space="preserve">
          <source>An object that contains information about the current AngularJS version.</source>
          <target state="translated">一个包含当前AngularJS版本信息的对象。</target>
        </trans-unit>
        <trans-unit id="174ed948b808866039efe36a930b9f1ce4822c05" translate="yes" xml:space="preserve">
          <source>An optional object which contains additional event data that is used when creating the event:</source>
          <target state="translated">一个可选对象,包含创建事件时使用的附加事件数据。</target>
        </trans-unit>
        <trans-unit id="fc3637df868e602451404b5f647130a18cca9153" translate="yes" xml:space="preserve">
          <source>An optional string to provide the origin of the function call for error messages.</source>
          <target state="translated">一个可选的字符串,用于提供错误信息的函数调用的来源。</target>
        </trans-unit>
        <trans-unit id="890f2279934dc8a6b8499be1df29aafd89f69b59" translate="yes" xml:space="preserve">
          <source>Anchoring Demo</source>
          <target state="translated">锚定演示</target>
        </trans-unit>
        <trans-unit id="326eb1ddaaabb3b6d3a467b41d5832d75f3ed666" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;$animateCss&lt;/code&gt; will figure out the rest. Just make sure to have the &lt;code&gt;done()&lt;/code&gt; callback fire the &lt;code&gt;doneFn&lt;/code&gt; function to signal when the animation is over.</source>
          <target state="translated">和 &lt;code&gt;$animateCss&lt;/code&gt; 会找出休息。只要确保让 &lt;code&gt;done()&lt;/code&gt; 回调触发了 &lt;code&gt;doneFn&lt;/code&gt; 函数即可在动画结束时发出信号。</target>
        </trans-unit>
        <trans-unit id="d4e0c6972a0d5d288dd0cd636689c2317a6bcbb1" translate="yes" xml:space="preserve">
          <source>And an application level module which depends on the above modules and contains any initialization code.</source>
          <target state="translated">以及一个应用层模块,它依赖于上述模块并包含任何初始化代码。</target>
        </trans-unit>
        <trans-unit id="66d5e630fa1d9e7e00b2527efa6f276e0610f85b" translate="yes" xml:space="preserve">
          <source>And since Constant recipe makes the value also available at runtime just like the Value recipe, we can also use it in our controller and template:</source>
          <target state="translated">而且由于Constant recipe使得值也像Value recipe一样在运行时可用,我们也可以在控制器和模板中使用它。</target>
        </trans-unit>
        <trans-unit id="2ae7dabd4284493793044636058e6d4510506040" translate="yes" xml:space="preserve">
          <source>And the following &lt;code&gt;&amp;lt;person&amp;gt;&lt;/code&gt; element &lt;strong&gt;matches&lt;/strong&gt; the &lt;code&gt;person&lt;/code&gt; directive:</source>
          <target state="translated">而下面的 &lt;code&gt;&amp;lt;person&amp;gt;&lt;/code&gt; 元素&lt;strong&gt;相匹配&lt;/strong&gt;的 &lt;code&gt;person&lt;/code&gt; 指令：</target>
        </trans-unit>
        <trans-unit id="e074b907bd18b60b4c8b9d046fe304e0a1334c25" translate="yes" xml:space="preserve">
          <source>And then each individual test is defined within a call to the &lt;code&gt;it&lt;/code&gt; function:</source>
          <target state="translated">然后在对 &lt;code&gt;it&lt;/code&gt; 函数的调用中定义每个测试：</target>
        </trans-unit>
        <trans-unit id="bcab3a39fd9e6cc3ee88ad70caa5024094be413f" translate="yes" xml:space="preserve">
          <source>And this is how you would display it via AngularJS's data-binding:</source>
          <target state="translated">而这是你通过AngularJS的数据绑定来显示的方式。</target>
        </trans-unit>
        <trans-unit id="12546996946dd46b31df4b813318ccd8f12a4142" translate="yes" xml:space="preserve">
          <source>And with an input of &lt;code&gt;['A','B']&lt;/code&gt; for the items variable in the example above, the output will evaluate to:</source>
          <target state="translated">在上面的示例中，使用item变量的 &lt;code&gt;['A','B']&lt;/code&gt; 输入，输出结果将为：</target>
        </trans-unit>
        <trans-unit id="7be54da4aeef061feb2dd88f21e1e293d3e62c45" translate="yes" xml:space="preserve">
          <source>Angular.js</source>
          <target state="translated">Angular.js</target>
        </trans-unit>
        <trans-unit id="13791425bfb26b4e4a5449e290a7555a8da39a41" translate="yes" xml:space="preserve">
          <source>AngularFire</source>
          <target state="translated">AngularFire</target>
        </trans-unit>
        <trans-unit id="ab3119bf73d8058434a4147335dfd43554aec933" translate="yes" xml:space="preserve">
          <source>AngularJS  Tag</source>
          <target state="translated">AngularJS标签</target>
        </trans-unit>
        <trans-unit id="3f0faae0118505f14f548205980339e05517f7b2" translate="yes" xml:space="preserve">
          <source>AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of AngularJS, defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in &lt;strong&gt;JS animations taking charge of the animation&lt;/strong&gt;:</source>
          <target state="translated">AngularJS 1.4及更高版本已采取措施使CSS和JS动画的合并更加灵活。但是，与AngularJS的早期版本不同，定义CSS和JS动画以在同一个CSS类上工作将不再起作用。因此，以下示例将仅导致&lt;strong&gt;JS动画负责该动画&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="0991984fb2b8a5470a91fe03e8798b2bb70f6d5d" translate="yes" xml:space="preserve">
          <source>AngularJS &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scopes&lt;/a&gt;;</source>
          <target state="translated">AngularJS &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;范围&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="7cf4e203d1f24008eb58eb8fa122f0e7859f0b96" translate="yes" xml:space="preserve">
          <source>AngularJS &lt;strong&gt;normalizes&lt;/strong&gt; an element's tag and attribute name to determine which elements match which directives. We typically refer to directives by their case-sensitive &lt;a href=&quot;http://en.wikipedia.org/wiki/CamelCase&quot;&gt;camelCase&lt;/a&gt;&lt;strong&gt;normalized&lt;/strong&gt; name (e.g. &lt;code&gt;ngModel&lt;/code&gt;). However, since HTML is case-insensitive, we refer to directives in the DOM by lower-case forms, typically using &lt;a href=&quot;https://en.wikipedia.org/wiki/Letter_case#Special_case_styles&quot;&gt;dash-delimited&lt;/a&gt; attributes on DOM elements (e.g. &lt;code&gt;ng-model&lt;/code&gt;).</source>
          <target state="translated">AngularJS &lt;strong&gt;规范化&lt;/strong&gt;元素的标记和属性名称，以确定哪些元素与哪些指令匹配。我们通常通过区分大小写的&lt;a href=&quot;http://en.wikipedia.org/wiki/CamelCase&quot;&gt;camelCase &lt;/a&gt;&lt;strong&gt;规范化&lt;/strong&gt;名称（例如 &lt;code&gt;ngModel&lt;/code&gt; ）来引用指令。但是，由于HTML不区分大小写，因此我们以小写形式引用DOM中的指令，通常在DOM元素（例如 &lt;code&gt;ng-model&lt;/code&gt; ）上使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Letter_case#Special_case_styles&quot;&gt;破折号分隔的&lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="f4a2157fd4651f5ccd744058540881b06b68a586" translate="yes" xml:space="preserve">
          <source>AngularJS Accessibility at ngEurope</source>
          <target state="translated">ngEurope上的AngularJS可访问性</target>
        </trans-unit>
        <trans-unit id="58966c0a99e9180ce8cf2c8238894a17e5acefa3" translate="yes" xml:space="preserve">
          <source>AngularJS Blog</source>
          <target state="translated">AngularJS博客</target>
        </trans-unit>
        <trans-unit id="10935422d37be07b1f9d03bd4bd4648742ed57f5" translate="yes" xml:space="preserve">
          <source>AngularJS Expressions vs. JavaScript Expressions</source>
          <target state="translated">AngularJS表达式VS JavaScript表达式</target>
        </trans-unit>
        <trans-unit id="fa4112920b48d03503b9cfdbeff4addf37de8003" translate="yes" xml:space="preserve">
          <source>AngularJS IRC channel</source>
          <target state="translated">AngularJS IRC频道</target>
        </trans-unit>
        <trans-unit id="8709ab6a8289c4a260c3e11677b31fbb21a2a30d" translate="yes" xml:space="preserve">
          <source>AngularJS Material</source>
          <target state="translated">AngularJS材料</target>
        </trans-unit>
        <trans-unit id="2cced466cd886f24b57c2f6ae044b2c12669f782" translate="yes" xml:space="preserve">
          <source>AngularJS Scopes</source>
          <target state="translated">AngularJS作用域</target>
        </trans-unit>
        <trans-unit id="cc3917a0e77e480943a79e1de65aac43cd92aabb" translate="yes" xml:space="preserve">
          <source>AngularJS Seed</source>
          <target state="translated">AngularJS种子</target>
        </trans-unit>
        <trans-unit id="6c5d29b4a87b1dc1dda5895fca5ac894b2cad8db" translate="yes" xml:space="preserve">
          <source>AngularJS Service API</source>
          <target state="translated">AngularJS服务API</target>
        </trans-unit>
        <trans-unit id="6ea95f8da2f97d39b353d9d6c1e8c0ca783d16e2" translate="yes" xml:space="preserve">
          <source>AngularJS Styleguide</source>
          <target state="translated">AngularJS风格指南</target>
        </trans-unit>
        <trans-unit id="19c7c3ee2f637e8d9c1e5f271cfa0f66e077975b" translate="yes" xml:space="preserve">
          <source>AngularJS Templates</source>
          <target state="translated">AngularJS模板</target>
        </trans-unit>
        <trans-unit id="0453b2acb9baff1f059cf73da1f3ca1a4a489724" translate="yes" xml:space="preserve">
          <source>AngularJS Templates and Expressions</source>
          <target state="translated">AngularJS模板和表达式</target>
        </trans-unit>
        <trans-unit id="a50311307d9b448cd7b8f1579e7819949f998f99" translate="yes" xml:space="preserve">
          <source>AngularJS UI Bootstrap</source>
          <target state="translated">AngularJS UI Bootstrap</target>
        </trans-unit>
        <trans-unit id="3757aac570708761ec4fe9543f6d5b9883dd0ffc" translate="yes" xml:space="preserve">
          <source>AngularJS UI Grid</source>
          <target state="translated">AngularJS UI网格</target>
        </trans-unit>
        <trans-unit id="27533abdf37da8420a124cdfff17869288101509" translate="yes" xml:space="preserve">
          <source>AngularJS UI Map (Google Maps)</source>
          <target state="translated">AngularJS UI地图(谷歌地图</target>
        </trans-unit>
        <trans-unit id="4bfbeef31141b3d561aa7fbd5547bc14fd515a39" translate="yes" xml:space="preserve">
          <source>AngularJS also pays attention to CSS class changes on elements by triggering the &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;remove&lt;/strong&gt; hooks. This means that if a CSS class is added to or removed from an element then an animation can be executed in between, before the CSS class addition or removal is finalized. (Keep in mind that AngularJS will only be able to capture class changes if an &lt;strong&gt;interpolated expression&lt;/strong&gt; or the &lt;strong&gt;ng-class&lt;/strong&gt; directive is used on the element.)</source>
          <target state="translated">AngularJS还通过触发&lt;strong&gt;添加&lt;/strong&gt;和&lt;strong&gt;删除&lt;/strong&gt;钩子来关注元素上CSS类的更改。这意味着，如果将CSS类添加到元素或从元素中删除，则可以在CSS类添加或删除完成之前在其间执行动画。 （请记住，只有在元素上使用&lt;strong&gt;插值表达式&lt;/strong&gt;或&lt;strong&gt;ng-class&lt;/strong&gt;指令时，AngularJS才能捕获类更改。）</target>
        </trans-unit>
        <trans-unit id="4f88fe3aac6229871b3db2ee53f14d289253d6fe" translate="yes" xml:space="preserve">
          <source>AngularJS also provides the &lt;a href=&quot;../api/ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module, which provides mocking for your tests. This is used to inject and mock AngularJS services within unit tests. In addition, it is able to extend other modules so they are synchronous. Having tests synchronous keeps them much cleaner and easier to work with. One of the most useful parts of ngMock is &lt;a href=&quot;../api/ngmock/service/%24httpbackend&quot;&gt;&lt;code&gt;$httpBackend&lt;/code&gt;&lt;/a&gt;, which lets us mock XHR requests in tests, and return sample data instead.</source>
          <target state="translated">AngularJS还提供了&lt;a href=&quot;../api/ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt;模块，该模块为您的测试提供了模拟功能。这用于在单元测试中注入和模拟AngularJS服务。此外，它还可以扩展其他模块，以便它们是同步的。同步测试可以使它们更加整洁和易于使用。ngMock最有用的部分之一是&lt;a href=&quot;../api/ngmock/service/%24httpbackend&quot;&gt; &lt;code&gt;$httpBackend&lt;/code&gt; &lt;/a&gt;，它使我们可以在测试中模拟XHR请求，并返回示例数据。</target>
        </trans-unit>
        <trans-unit id="d001fe84458eea653438a88cf62e275bc3871980" translate="yes" xml:space="preserve">
          <source>AngularJS also provides the following additional methods and events to both jQuery and jqLite:</source>
          <target state="translated">AngularJS还为jQuery和jqLite提供了以下附加方法和事件。</target>
        </trans-unit>
        <trans-unit id="a8c5f79197dfa3de08bf76fd8a1637d31da7b391" translate="yes" xml:space="preserve">
          <source>AngularJS and Cordova</source>
          <target state="translated">AngularJS和Cordova</target>
        </trans-unit>
        <trans-unit id="238b92e9c0ec431391c26fbce2a871d3a4d73b04" translate="yes" xml:space="preserve">
          <source>AngularJS applications cannot be nested within each other.</source>
          <target state="translated">AngularJS应用之间不能相互嵌套。</target>
        </trans-unit>
        <trans-unit id="f3ee826c3209863e648113706ae9e0875449b60b" translate="yes" xml:space="preserve">
          <source>AngularJS applies the &lt;code&gt;name = 'X';&lt;/code&gt; to the model.</source>
          <target state="translated">AngularJS应用 &lt;code&gt;name = 'X';&lt;/code&gt; 到模型。</target>
        </trans-unit>
        <trans-unit id="8ea8fc92595d21993d4f0e0cfb641e521696f8ce" translate="yes" xml:space="preserve">
          <source>AngularJS apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped. There are several advantages to this approach:</source>
          <target state="translated">AngularJS应用程序没有主方法。相反,模块声明性地指定应用程序应该如何被引导。这种方法有几个优点。</target>
        </trans-unit>
        <trans-unit id="372bbe31b132ff0ef41b524bb7d70b9d4f2e094f" translate="yes" xml:space="preserve">
          <source>AngularJS comes pre-bundled with common directives which are useful for building any app. We also expect that you will create directives that are specific to your app. These extensions become a Domain Specific Language for building your application.</source>
          <target state="translated">AngularJS预装了通用指令,这些指令对构建任何应用程序都很有用。我们也希望您能创建针对您的应用程序的指令。这些扩展成为构建您的应用程序的特定领域语言。</target>
        </trans-unit>
        <trans-unit id="3ee0456d833564d457cddbf2538f4498b02003a6" translate="yes" xml:space="preserve">
          <source>AngularJS comes with &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; built-in, which makes testing components much easier, because you can pass in a component's dependencies and stub or mock them as you wish.</source>
          <target state="translated">AngularJS 内置有&lt;a href=&quot;di&quot;&gt;依赖项注入&lt;/a&gt;，这使测试组件变得更加容易，因为您可以根据需要传递组件的依赖项并进行存根或模拟。</target>
        </trans-unit>
        <trans-unit id="96f3285e4781ee5ee9e3f9586554d6b66101a2f5" translate="yes" xml:space="preserve">
          <source>AngularJS comes with a set of these directives built-in, like &lt;code&gt;ngBind&lt;/code&gt;, &lt;code&gt;ngModel&lt;/code&gt;, and &lt;code&gt;ngClass&lt;/code&gt;. Much like you create controllers and services, you can create your own directives for AngularJS to use. When AngularJS &lt;a href=&quot;bootstrap&quot;&gt;bootstraps&lt;/a&gt; your application, the &lt;a href=&quot;compiler&quot;&gt;HTML compiler&lt;/a&gt; traverses the DOM matching directives against the DOM elements.</source>
          <target state="translated">AngularJS带有一组内置的这些指令，例如 &lt;code&gt;ngBind&lt;/code&gt; ， &lt;code&gt;ngModel&lt;/code&gt; 和 &lt;code&gt;ngClass&lt;/code&gt; 。就像创建控制器和服务一样，您可以创建自己的指令供AngularJS使用。当AngularJS &lt;a href=&quot;bootstrap&quot;&gt;引导&lt;/a&gt;您的应用程序时，&lt;a href=&quot;compiler&quot;&gt;HTML编译器会&lt;/a&gt;针对DOM元素遍历DOM匹配指令。</target>
        </trans-unit>
        <trans-unit id="d39b93d98b5677b7abce8f8d1889ee8550f46ef8" translate="yes" xml:space="preserve">
          <source>AngularJS does not use JavaScript's &lt;code&gt;eval()&lt;/code&gt; to evaluate expressions. Instead AngularJS's &lt;a href=&quot;../api/ng/service/%24parse&quot;&gt;$parse&lt;/a&gt; service processes these expressions.</source>
          <target state="translated">AngularJS不使用JavaScript的 &lt;code&gt;eval()&lt;/code&gt; 来评估表达式。而是AngularJS的&lt;a href=&quot;../api/ng/service/%24parse&quot;&gt;$ parse&lt;/a&gt;服务处理这些表达式。</target>
        </trans-unit>
        <trans-unit id="dd88c4c5702cceb2c3a9986c7e71401a0e0bd457" translate="yes" xml:space="preserve">
          <source>AngularJS enters the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop. The loop is made up of two smaller loops which process &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue and the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list. The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop keeps iterating until the model stabilizes, which means that the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue is empty and the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list does not detect any changes.</source>
          <target state="translated">AngularJS进入&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;循环。该循环由两个较小的循环组成，分别处理&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;队列和&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ watch&lt;/a&gt;列表。在&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$消化&lt;/a&gt;循环迭代持续直到模型稳定，这意味着&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;队列为空，&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$手表&lt;/a&gt;名单没有检测到任何变化。</target>
        </trans-unit>
        <trans-unit id="0850944e4a8643e355e181af91bde09626c238b5" translate="yes" xml:space="preserve">
          <source>AngularJS executes the &lt;code&gt;stimulusFn()&lt;/code&gt;, which typically modifies application state.</source>
          <target state="translated">AngularJS执行 &lt;code&gt;stimulusFn()&lt;/code&gt; ，它通常会修改应用程序状态。</target>
        </trans-unit>
        <trans-unit id="7379667c8fedda0e1bbafd8c3ac9dcea1c105672" translate="yes" xml:space="preserve">
          <source>AngularJS exits the execution context, which in turn exits the &lt;code&gt;keydown&lt;/code&gt; event and with it the JavaScript execution context.</source>
          <target state="translated">AngularJS退出执行上下文，然后依次退出 &lt;code&gt;keydown&lt;/code&gt; 事件和JavaScript执行上下文。</target>
        </trans-unit>
        <trans-unit id="bba6c16db1c0ce833cf612e719600df9bc77f3c2" translate="yes" xml:space="preserve">
          <source>AngularJS expression evaluating to URL. If the source is a string constant, make sure you wrap it in &lt;strong&gt;single&lt;/strong&gt; quotes, e.g. &lt;code&gt;src=&quot;'myPartialTemplate.html'&quot;&lt;/code&gt;.</source>
          <target state="translated">AngularJS表达式评估为URL。如果源是字符串常量，请确保将其用&lt;strong&gt;单&lt;/strong&gt;引号引起来，例如 &lt;code&gt;src=&quot;'myPartialTemplate.html'&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b431f1a46f9d869b200da468e97d361380bd907" translate="yes" xml:space="preserve">
          <source>AngularJS expression that must evaluate to a &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; parsable into a &lt;code&gt;Number&lt;/code&gt;. Used as value for the &lt;code&gt;maxlength&lt;/code&gt;&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;validator&lt;/a&gt;.</source>
          <target state="translated">必须计算为 &lt;code&gt;Number&lt;/code&gt; 或可解析为 &lt;code&gt;Number&lt;/code&gt; 的 &lt;code&gt;String&lt;/code&gt; 的 AngularJS表达式。用作 &lt;code&gt;maxlength&lt;/code&gt; &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;验证器的&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="e509280278241209839b7c1ec5757ce68bdfb9b3" translate="yes" xml:space="preserve">
          <source>AngularJS expression that must evaluate to a &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; parsable into a &lt;code&gt;Number&lt;/code&gt;. Used as value for the &lt;code&gt;minlength&lt;/code&gt;&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;validator&lt;/a&gt;.</source>
          <target state="translated">必须计算为 &lt;code&gt;Number&lt;/code&gt; 或可解析为 &lt;code&gt;Number&lt;/code&gt; 的 &lt;code&gt;String&lt;/code&gt; 的 AngularJS表达式。用作 &lt;code&gt;minlength&lt;/code&gt; &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;验证器的&lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="88a4cc08f5767fe1829d07df54e5e6060eec74d4" translate="yes" xml:space="preserve">
          <source>AngularJS expression that must evaluate to a &lt;code&gt;RegExp&lt;/code&gt; or a &lt;code&gt;String&lt;/code&gt; parsable into a &lt;code&gt;RegExp&lt;/code&gt;, or a &lt;code&gt;RegExp&lt;/code&gt; literal. See above for more details.</source>
          <target state="translated">AngularJS表达式计算结果必须是 &lt;code&gt;RegExp&lt;/code&gt; 或 &lt;code&gt;String&lt;/code&gt; 可解析成 &lt;code&gt;RegExp&lt;/code&gt; ，或一个 &lt;code&gt;RegExp&lt;/code&gt; 文字。有关更多详细信息，请参见上文。</target>
        </trans-unit>
        <trans-unit id="97d4f64fec36f6812a573ef75120b96770cdad0c" translate="yes" xml:space="preserve">
          <source>AngularJS expression to be executed when input changes due to user interaction with the input element.</source>
          <target state="translated">当用户与输入元素的交互导致输入改变时,要执行AngularJS表达式。</target>
        </trans-unit>
        <trans-unit id="08da89807326e11b25bd5469155826eee0eb7644" translate="yes" xml:space="preserve">
          <source>AngularJS expression to be executed when selected option(s) changes due to user interaction with the select element.</source>
          <target state="translated">当用户与选择元素的交互导致所选选项发生变化时,将执行AngularJS表达式。</target>
        </trans-unit>
        <trans-unit id="2ef64a93a14456208c9b105e55c9d36b5bf65d39" translate="yes" xml:space="preserve">
          <source>AngularJS expression, whose value will be bound to the &lt;code&gt;value&lt;/code&gt; attribute and &lt;code&gt;value&lt;/code&gt; property of the element.</source>
          <target state="translated">AngularJS表达式，其值将绑定到元素的 &lt;code&gt;value&lt;/code&gt; 属性和 &lt;code&gt;value&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="7d0313fcc5ce776c2589c8549f299e088d7b5bfb" translate="yes" xml:space="preserve">
          <source>AngularJS expression. If it evaluates to &lt;code&gt;true&lt;/code&gt;, it sets the &lt;code&gt;required&lt;/code&gt; attribute to the element and adds the &lt;code&gt;required&lt;/code&gt;&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;&lt;code&gt;validator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">AngularJS表达式。如果计算结果为 &lt;code&gt;true&lt;/code&gt; ，它将为元素设置 &lt;code&gt;required&lt;/code&gt; 属性，并添加 &lt;code&gt;required&lt;/code&gt; &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24validators.html&quot;&gt; &lt;code&gt;validator&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc7f82d84685139363df50752ba4a48add9d5732" translate="yes" xml:space="preserve">
          <source>AngularJS expressions are JavaScript-like code snippets that are mainly placed in interpolation bindings such as &lt;code&gt;&amp;lt;span title=&quot;{{ attrBinding }}&quot;&amp;gt;{{ textBinding }}&amp;lt;/span&amp;gt;&lt;/code&gt;, but also used directly in directive attributes such as &lt;code&gt;ng-click=&quot;functionExpression()&quot;&lt;/code&gt;.</source>
          <target state="translated">AngularJS表达式是类似于JavaScript的代码段，主要放在插值绑定中，例如 &lt;code&gt;&amp;lt;span title=&quot;{{ attrBinding }}&quot;&amp;gt;{{ textBinding }}&amp;lt;/span&amp;gt;&lt;/code&gt; ，但也可以直接用于 &lt;code&gt;ng-click=&quot;functionExpression()&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f061af2fccf05b8fcd05482367cef5c7ff26b4bc" translate="yes" xml:space="preserve">
          <source>AngularJS expressions are like JavaScript expressions with the following differences:</source>
          <target state="translated">AngularJS表达式和JavaScript表达式一样,有以下区别。</target>
        </trans-unit>
        <trans-unit id="09c3ce274e777d18b85eef65fd68287cb37a9819" translate="yes" xml:space="preserve">
          <source>AngularJS expressions do not have direct access to global variables like &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; or &lt;code&gt;location&lt;/code&gt;. This restriction is intentional. It prevents accidental access to the global state &amp;ndash; a common source of subtle bugs.</source>
          <target state="translated">AngularJS表达式不能直接访问诸如 &lt;code&gt;window&lt;/code&gt; ， &lt;code&gt;document&lt;/code&gt; 或 &lt;code&gt;location&lt;/code&gt; 之类的全局变量。此限制是有意的。它可以防止意外访问全局状态-细微错误的常见来源。</target>
        </trans-unit>
        <trans-unit id="e07171b2ee4be74089fb92963274de2dc91e580d" translate="yes" xml:space="preserve">
          <source>AngularJS frees you from the following pains:</source>
          <target state="translated">AngularJS可以让你摆脱以下痛苦。</target>
        </trans-unit>
        <trans-unit id="fdb9cdb2309b4f5036d4198e942b004700a1e259" translate="yes" xml:space="preserve">
          <source>AngularJS has some features that can conflict with certain restrictions that are applied when using &lt;a href=&quot;https://developer.mozilla.org/en/Security/CSP&quot;&gt;CSP (Content Security Policy)&lt;/a&gt; rules.</source>
          <target state="translated">AngularJS的某些功能可能与使用&lt;a href=&quot;https://developer.mozilla.org/en/Security/CSP&quot;&gt;CSP（内容安全策略）&lt;/a&gt;规则时所应用的某些限制相冲突。</target>
        </trans-unit>
        <trans-unit id="8c32413e579d205cc826666f39f4cffe4b82b826" translate="yes" xml:space="preserve">
          <source>AngularJS hooks are prefixed with &lt;code&gt;$&lt;/code&gt;, such as &lt;code&gt;$onInit&lt;/code&gt;. Angular hooks are prefixed with &lt;code&gt;ng&lt;/code&gt;, such as &lt;code&gt;ngOnInit&lt;/code&gt;.</source>
          <target state="translated">AngularJS挂钩带有 &lt;code&gt;$&lt;/code&gt; 前缀，例如 &lt;code&gt;$onInit&lt;/code&gt; 。角形钩以 &lt;code&gt;ng&lt;/code&gt; 为前缀，例如 &lt;code&gt;ngOnInit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8080861f70c5e3379f7f21148b3d91ee5e39f3d3" translate="yes" xml:space="preserve">
          <source>AngularJS hooks can be defined on the controller prototype or added to the controller inside its constructor. In Angular you can only define hooks on the prototype of the Component class.</source>
          <target state="translated">AngularJS的钩子可以定义在控制器原型上,也可以添加到控制器的构造函数中。在Angular中,你只能在Component类的原型上定义钩子。</target>
        </trans-unit>
        <trans-unit id="752e75fd10d996a8acb5cb76944e3500f3b826d7" translate="yes" xml:space="preserve">
          <source>AngularJS implements all of the basic HTML form controls (&lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/select&quot;&gt;select&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/textarea&quot;&gt;textarea&lt;/a&gt;), which should be sufficient for most cases. However, if you need more flexibility, you can write your own form control as a directive.</source>
          <target state="translated">AngularJS实现了所有基本的HTML表单控件（&lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/select&quot;&gt;select&lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/textarea&quot;&gt;textarea&lt;/a&gt;），对于大多数情况来说，这些控件就足够了。但是，如果需要更大的灵活性，则可以编写自己的表单控件作为指令。</target>
        </trans-unit>
        <trans-unit id="cfc02d97cc07b688ab2870592f09f7fc31cc0e3f" translate="yes" xml:space="preserve">
          <source>AngularJS initializes automatically upon &lt;code&gt;DOMContentLoaded&lt;/code&gt; event or when the &lt;code&gt;angular.js&lt;/code&gt; script is evaluated if at that time &lt;code&gt;document.readyState&lt;/code&gt; is set to &lt;code&gt;'complete'&lt;/code&gt;. At this point AngularJS looks for the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive which designates your application root. If the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive is found then AngularJS will:</source>
          <target state="translated">如果那时 &lt;code&gt;document.readyState&lt;/code&gt; 设置为 &lt;code&gt;'complete'&lt;/code&gt; ，则AngularJS将在 &lt;code&gt;DOMContentLoaded&lt;/code&gt; 事件或评估 &lt;code&gt;angular.js&lt;/code&gt; 脚本时自动初始化。此时，AngularJS将查找&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;指令，该指令指定您的应用程序根目录。如果找到&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;指令，则AngularJS将：</target>
        </trans-unit>
        <trans-unit id="4435ce23f59a011ed31e42f4b0b893d57d8d3ed1" translate="yes" xml:space="preserve">
          <source>AngularJS invokes certain functions (like service factories and controllers) via the injector. You need to annotate these functions so that the injector knows what services to inject into the function. There are three ways of annotating your code with service name information:</source>
          <target state="translated">AngularJS通过注入器调用某些函数(如服务工厂和控制器)。你需要对这些函数进行注解,以便注入器知道要将哪些服务注入到函数中。有三种方式可以用服务名信息来注释你的代码。</target>
        </trans-unit>
        <trans-unit id="13bc8c54b543141e4c682ca99d8268eedb15c59a" translate="yes" xml:space="preserve">
          <source>AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. AngularJS's data binding and dependency injection eliminate much of the code you would otherwise have to write. And it all happens within the browser, making it an ideal partner with any server technology.</source>
          <target state="translated">AngularJS是一个动态Web应用的结构框架。它允许你使用HTML作为模板语言,并允许你扩展HTML的语法来清晰简洁地表达你的应用程序的组件。AngularJS的数据绑定和依赖注入消除了许多您不得不写的代码。而且这一切都发生在浏览器中,使其成为任何服务器技术的理想合作伙伴。</target>
        </trans-unit>
        <trans-unit id="afa69d76d77331bc697c05156c2d935319818e67" translate="yes" xml:space="preserve">
          <source>AngularJS is built around the belief that declarative code is better than imperative when it comes to building UIs and wiring software components together, while imperative code is excellent for expressing business logic.</source>
          <target state="translated">AngularJS是围绕着这样一个信念而构建的:在构建用户界面和将软件组件布线在一起时,声明式代码比命令式代码更好,而命令式代码在表达业务逻辑方面非常出色。</target>
        </trans-unit>
        <trans-unit id="c3edf37d74a9cf2efaa5aedcb37dbfd1f8ca4b39" translate="yes" xml:space="preserve">
          <source>AngularJS is different. The AngularJS compiler consumes the DOM, not string templates. The result is a linking function, which when combined with a scope model results in a live view. The view and scope model bindings are transparent. The developer does not need to make any special calls to update the view. And because &lt;code&gt;innerHTML&lt;/code&gt; is not used, you won't accidentally clobber user input. Furthermore, AngularJS directives can contain not just text bindings, but behavioral constructs as well.</source>
          <target state="translated">AngularJS是不同的。 AngularJS编译器使用DOM，而不是字符串模板。结果是链接功能，将其与合并范围模型组合后将显示实​​时视图。视图和范围模型绑定是透明的。开发人员无需进行任何特殊调用即可更新视图。并且由于未使用 &lt;code&gt;innerHTML&lt;/code&gt; ，因此不会意外破坏用户输入。此外，AngularJS指令不仅可以包含文本绑定，还可以包含行为构造。</target>
        </trans-unit>
        <trans-unit id="ac9efc5db18aabed4da31047d240fa2301008411" translate="yes" xml:space="preserve">
          <source>AngularJS is not a single piece in the overall puzzle of building the client-side of a web application. It handles all of the DOM and AJAX glue code you once wrote by hand and puts it in a well-defined structure. This makes AngularJS opinionated about how a CRUD (Create, Read, Update, Delete) application should be built. But while it is opinionated, it also tries to make sure that its opinion is just a starting point you can easily change. AngularJS comes with the following out-of-the-box:</source>
          <target state="translated">AngularJS在构建Web应用的客户端的整体拼图中并不是单一的一块。它处理了你曾经亲手编写的所有DOM和AJAX胶葛代码,并将其放在一个定义好的结构中。这使得AngularJS对如何构建CRUD(创建、读取、更新、删除)应用程序很有意见。但在它有意见的同时,它也试图确保它的意见只是一个你可以轻松改变的起点。AngularJS自带以下开箱即用的功能。</target>
        </trans-unit>
        <trans-unit id="9ef3b6f1388704d540c31540844164208295dbc6" translate="yes" xml:space="preserve">
          <source>AngularJS is what HTML would have been, had it been designed for applications. HTML is a great declarative language for static documents. It does not contain much in the way of creating applications, and as a result building web applications is an exercise in &lt;em&gt;what do I have to do to trick the browser into doing what I want?&lt;/em&gt;</source>
          <target state="translated">如果AngularJS是为应用程序设计的，那么它将是HTML。HTML是静态文档的一种出色的声明性语言。它没有太多的创建应用程序的方式，因此，构建Web应用程序是一种练习，&lt;em&gt;我必须采取什么措施才能诱使浏览器执行我想要的工作？&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="544f9941cafe249e5d00dbb4906eca8c99f8d603" translate="yes" xml:space="preserve">
          <source>AngularJS is written with testability in mind, but it still requires that you do the right thing. We tried to make the right thing easy, but if you ignore these guidelines you may end up with an untestable application.</source>
          <target state="translated">AngularJS在编写时考虑到了可测试性,但它仍然需要你做正确的事情。我们试图让正确的事情变得简单,但如果你忽视这些准则,你可能最终会得到一个不可测试的应用程序。</target>
        </trans-unit>
        <trans-unit id="7383699805e691e0daff8aa72c18b8f3565bd40d" translate="yes" xml:space="preserve">
          <source>AngularJS mailing list</source>
          <target state="translated">AngularJS邮件列表</target>
        </trans-unit>
        <trans-unit id="478efa9ac782264ed3b06bb9dbddc3848b85e795" translate="yes" xml:space="preserve">
          <source>AngularJS modifies the normal JavaScript flow by providing its own event processing loop. This splits the JavaScript into classical and AngularJS execution context. Only operations which are applied in the AngularJS execution context will benefit from AngularJS data-binding, exception handling, property watching, etc... You can also use $apply() to enter the AngularJS execution context from JavaScript. Keep in mind that in most places (controllers, services) $apply has already been called for you by the directive which is handling the event. An explicit call to $apply is needed only when implementing custom event callbacks, or when working with third-party library callbacks.</source>
          <target state="translated">AngularJS通过提供自己的事件处理循环来修改正常的JavaScript流程。这就把JavaScript分成了经典的和AngularJS执行上下文。只有在AngularJS执行上下文中应用的操作才能从AngularJS的数据绑定、异常处理、属性观察等功能中获益。你也可以使用$apply()从JavaScript进入AngularJS执行上下文。请记住,在大多数地方(控制器、服务),$apply已经被处理事件的指令为你调用了。只有在实现自定义事件回调时,或者在使用第三方库回调时,才需要对$apply进行显式调用。</target>
        </trans-unit>
        <trans-unit id="716ba022bcc260438c543a5bdaff3cdd08b11838" translate="yes" xml:space="preserve">
          <source>AngularJS offers several useful services (like &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt;), but for most applications you'll also want to &lt;a href=&quot;services#creating-services.html&quot;&gt;create your own&lt;/a&gt;.</source>
          <target state="translated">AngularJS提供了一些有用的服务（例如&lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;），但是对于大多数应用程序，您还需要&lt;a href=&quot;services#creating-services.html&quot;&gt;创建自己的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3aaca8b19ef9d3c826824478ea3168cc956a6ed" translate="yes" xml:space="preserve">
          <source>AngularJS on Mobile Guide</source>
          <target state="translated">手机上的AngularJS指南</target>
        </trans-unit>
        <trans-unit id="1c673989115ebb8289f93a363391b8b8d9bb8a78" translate="yes" xml:space="preserve">
          <source>AngularJS on YouTube</source>
          <target state="translated">AngularJS在YouTube上</target>
        </trans-unit>
        <trans-unit id="8ffafd56c64e9c99454bda8b427b893a982e760f" translate="yes" xml:space="preserve">
          <source>AngularJS provides animation hooks for common directives such as &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;, and &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;, as well as custom directives via the &lt;code&gt;$animate&lt;/code&gt; service. These animation hooks are set in place to trigger animations during the life cycle of various directives and when triggered, will attempt to perform a CSS Transition, CSS Keyframe Animation or a JavaScript callback Animation (depending on whether an animation is placed on the given directive). Animations can be placed using vanilla CSS by following the naming conventions set in place by AngularJS or with JavaScript code, defined as a factory.</source>
          <target state="translated">AngularJS 通过 &lt;code&gt;$animate&lt;/code&gt; 服务为常用指令（例如&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;，&lt;a href=&quot;../api/ng/directive/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;和&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;）以及自定义指令提供了动画挂钩。设置了这些动画挂钩，以在各种指令的生命周期内触发动画，并在触发时尝试执行CSS过渡，CSS关键帧动画或JavaScript回调动画（取决于动画是否放置在给定指令上） 。可以使用原始CSS通过遵循AngularJS设置的命名约定或使用定义为工厂的JavaScript代码来放置动画。</target>
        </trans-unit>
        <trans-unit id="3917cb70aac3e073835c7ae97b53a67291ace6ea" translate="yes" xml:space="preserve">
          <source>AngularJS provides basic implementation for most common HTML5 &lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt; types: (&lt;a href=&quot;../api/ng/input/input%5Btext%5D&quot;&gt;text&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bnumber%5D&quot;&gt;number&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Burl%5D&quot;&gt;url&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bemail%5D&quot;&gt;email&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bdate%5D&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bradio%5D&quot;&gt;radio&lt;/a&gt;, &lt;a href=&quot;../api/ng/input/input%5Bcheckbox%5D&quot;&gt;checkbox&lt;/a&gt;), as well as some directives for validation (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt;, &lt;code&gt;minlength&lt;/code&gt;, &lt;code&gt;maxlength&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;).</source>
          <target state="translated">AngularJS为大多数常见的HTML5 &lt;a href=&quot;../api/ng/directive/input&quot;&gt;输入&lt;/a&gt;类型提供了基本实现：（&lt;a href=&quot;../api/ng/input/input%5Btext%5D&quot;&gt;文本&lt;/a&gt;，&lt;a href=&quot;../api/ng/input/input%5Bnumber%5D&quot;&gt;数字&lt;/a&gt;，&lt;a href=&quot;../api/ng/input/input%5Burl%5D&quot;&gt;URL&lt;/a&gt;，&lt;a href=&quot;../api/ng/input/input%5Bemail%5D&quot;&gt;电子邮件&lt;/a&gt;，&lt;a href=&quot;../api/ng/input/input%5Bdate%5D&quot;&gt;日期&lt;/a&gt;，&lt;a href=&quot;../api/ng/input/input%5Bradio%5D&quot;&gt;单选&lt;/a&gt;，&lt;a href=&quot;../api/ng/input/input%5Bcheckbox%5D&quot;&gt;复选框&lt;/a&gt;），以及一些用于验证的指令（ &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;pattern&lt;/code&gt; ， &lt;code&gt;minlength&lt;/code&gt; ， &lt;code&gt;maxlength&lt;/code&gt; ， &lt;code&gt;min&lt;/code&gt; 和 &lt;code&gt;max&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="56f632ed3f689df64ece7da7819dff3bf22b0ccc" translate="yes" xml:space="preserve">
          <source>AngularJS provides specific directives for many events, such as &lt;a href=&quot;ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt;, so in most cases it is not necessary to use &lt;code&gt;ngOn&lt;/code&gt;. However, AngularJS does not support all events (e.g. the &lt;code&gt;drop&lt;/code&gt; event in the example above), and new events might be introduced in later DOM standards.</source>
          <target state="translated">AngularJS为许多事件（例如&lt;a href=&quot;ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; )&lt;/a&gt;提供了特定的指令，因此在大多数情况下，没有必要使用 &lt;code&gt;ngOn&lt;/code&gt; 。但是，AngularJS并不支持所有事件（例如，上例中的 &lt;code&gt;drop&lt;/code&gt; 事件），并且新的事件可能会在以后的DOM标准中引入。</target>
        </trans-unit>
        <trans-unit id="ba2758214e55fedd29b874bf821efa5fd7b1f6d5" translate="yes" xml:space="preserve">
          <source>AngularJS provides the following default transformations:</source>
          <target state="translated">AngularJS提供了以下默认的变换。</target>
        </trans-unit>
        <trans-unit id="05b59926978c6bbf9d44f2a94498561c9bef96bc" translate="yes" xml:space="preserve">
          <source>AngularJS separates number and datetime format rule sets into different files, each file for a particular locale. You can find a list of currently supported locales &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/src/ngLocale&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">AngularJS将数字和日期时间格式规则集分成不同的文件，每个文件用于特定的语言环境。您可以&lt;a href=&quot;https://github.com/angular/angular.js/tree/master/src/ngLocale&quot;&gt;在此处&lt;/a&gt;找到当前支持的语言环境列表</target>
        </trans-unit>
        <trans-unit id="edbbd8f92b2e2e904ae46011fc03753d219bc5d3" translate="yes" xml:space="preserve">
          <source>AngularJS services are substitutable objects that are wired together using &lt;a href=&quot;di&quot;&gt;dependency injection (DI)&lt;/a&gt;. You can use services to organize and share code across your app.</source>
          <target state="translated">AngularJS服务是可替换对象，这些对象使用&lt;a href=&quot;di&quot;&gt;依赖注入（DI）&lt;/a&gt;连接在一起。您可以使用服务来组织和共享应用程序中的代码。</target>
        </trans-unit>
        <trans-unit id="d69f80a7b3cac2616bf246adcaf4efc8679fe0a9" translate="yes" xml:space="preserve">
          <source>AngularJS services are:</source>
          <target state="translated">AngularJS服务是。</target>
        </trans-unit>
        <trans-unit id="7422e70c60bc15b4ce5aee88f1fa3d09ecfa4487" translate="yes" xml:space="preserve">
          <source>AngularJS simplifies application development by presenting a higher level of abstraction to the developer. Like any abstraction, it comes at a cost of flexibility. In other words, not every app is a good fit for AngularJS. AngularJS was built with the CRUD application in mind. Luckily CRUD applications represent the majority of web applications. To understand what AngularJS is good at, though, it helps to understand when an app is not a good fit for AngularJS.</source>
          <target state="translated">AngularJS通过向开发者展示更高层次的抽象来简化应用开发。像任何抽象一样,它也是以灵活性为代价的。换句话说,不是每个应用都适合AngularJS。AngularJS是以CRUD应用为中心构建的。幸运的是,CRUD应用代表了大多数Web应用。不过要想了解AngularJS擅长什么,了解一个应用何时不适合AngularJS是有帮助的。</target>
        </trans-unit>
        <trans-unit id="fe3ac4e24f01511fd93bb16d06effbc2d6379f34" translate="yes" xml:space="preserve">
          <source>AngularJS strongly relies on contextual escaping for the security of bindings: disabling or modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners, changes to this service will also influence users, so be extra careful and document your changes.</source>
          <target state="translated">AngularJS强烈依赖上下文转义来保证绑定的安全性:禁用或修改此功能可能会导致跨站点脚本(XSS)漏洞。对于库主来说,对这个服务的修改也会影响用户,所以要格外小心,并记录你的修改。</target>
        </trans-unit>
        <trans-unit id="4431411ecab45405bde7dd419d71acb67b3391ca" translate="yes" xml:space="preserve">
          <source>AngularJS supports i18n/l10n for &lt;a href=&quot;../api/ng/filter/date&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/ng/filter/number&quot;&gt;number&lt;/a&gt; and &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;currency&lt;/a&gt; filters.</source>
          <target state="translated">AngularJS支持i18n / l10n用于&lt;a href=&quot;../api/ng/filter/date&quot;&gt;日期&lt;/a&gt;，&lt;a href=&quot;../api/ng/filter/number&quot;&gt;数字&lt;/a&gt;和&lt;a href=&quot;../api/ng/filter/currency&quot;&gt;货币&lt;/a&gt;过滤器。</target>
        </trans-unit>
        <trans-unit id="3a4ebceac2caf5ebdf9c2c4c4dc59c26f35d27a5" translate="yes" xml:space="preserve">
          <source>AngularJS takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs. AngularJS teaches the browser new syntax through a construct we call &lt;em&gt;directives&lt;/em&gt;. Examples include:</source>
          <target state="translated">AngularJS采用另一种方法。它试图通过创建新的HTML结构来最小化以文档为中心的HTML与应用程序所需的阻抗不匹配。AngularJS通过我们称为&lt;em&gt;伪指令&lt;/em&gt;的结构向浏览器教授新的语法。示例包括：</target>
        </trans-unit>
        <trans-unit id="769e07375c5ab3bf0b0051ac78640da73f4c7868" translate="yes" xml:space="preserve">
          <source>AngularJS templates work differently. First the template (which is the uncompiled HTML along with any additional markup or directives) is compiled on the browser. The compilation step produces a live view. Any changes to the view are immediately reflected in the model, and any changes in the model are propagated to the view. The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. You can think of the view as simply an instant projection of your model.</source>
          <target state="translated">AngularJS模板的工作方式不同。首先,模板(即未编译的HTML以及任何附加标记或指令)在浏览器上进行编译。编译步骤会产生一个实时视图。对视图的任何更改都会立即反映在模型中,而模型中的任何更改也会传播到视图中。该模型是应用程序状态的单一真实来源,极大地简化了开发人员的编程模型。你可以把视图简单地看作是模型的即时投影。</target>
        </trans-unit>
        <trans-unit id="bfc125702fe4d5d98bdb594a33013e8322f09d18" translate="yes" xml:space="preserve">
          <source>AngularJS will detect if it has been loaded into the browser more than once and only allow the first loaded script to be bootstrapped and will report a warning to the browser console for each of the subsequent scripts. This prevents strange results in applications, where otherwise multiple instances of AngularJS try to work on the DOM.</source>
          <target state="translated">AngularJS会检测是否被加载到浏览器中超过一次,并且只允许第一次加载的脚本被引导,并且会向浏览器控制台报告后续每个脚本的警告。这可以防止应用程序中出现奇怪的结果,否则多个AngularJS实例会尝试在DOM上工作。</target>
        </trans-unit>
        <trans-unit id="015dbed2a049b3782ded1815109d25f8af8a31a3" translate="yes" xml:space="preserve">
          <source>AngularJS will strip the prefix, before processing the JSON.</source>
          <target state="translated">AngularJS会在处理JSON之前,将前缀剥离。</target>
        </trans-unit>
        <trans-unit id="3086e18c373e1b050a89b62431f812b993b265f5" translate="yes" xml:space="preserve">
          <source>AngularJS's &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;currency filter&lt;/a&gt; allows you to use the default currency symbol from the &lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;locale service&lt;/a&gt;, or you can provide the filter with a custom currency symbol.</source>
          <target state="translated">AngularJS的&lt;a href=&quot;../api/ng/filter/currency&quot;&gt;货币过滤器&lt;/a&gt;允许您使用&lt;a href=&quot;../api/ng/service/%24locale&quot;&gt;区域设置服务中&lt;/a&gt;的默认货币符号，也可以为过滤器提供自定义货币符号。</target>
        </trans-unit>
        <trans-unit id="a08db1303b33928851568ddd60cd23f21541a8af" translate="yes" xml:space="preserve">
          <source>AngularJS's &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;HTML compiler&lt;/a&gt; allows the developer to teach the browser new HTML syntax. The compiler allows you to attach behavior to any HTML element or attribute and even create new HTML elements or attributes with custom behavior. AngularJS calls these behavior extensions &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">AngularJS的&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;HTML编译器&lt;/a&gt;允许开发人员教浏览器新的HTML语法。编译器允许您将行为附加到任何HTML元素或属性，甚至可以创建具有自定义行为的新HTML元素或属性。AngularJS调用这些行为扩展&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;指令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f50b6286f749aa08025813527659c6fc74af40dd" translate="yes" xml:space="preserve">
          <source>AngularJS's jqLite</source>
          <target state="translated">AngularJS的jqLite</target>
        </trans-unit>
        <trans-unit id="e609b570c930b204946ccb899b6f09e78d1083ec" translate="yes" xml:space="preserve">
          <source>AngularJS's sweet spot</source>
          <target state="translated">AngularJS的甜蜜点</target>
        </trans-unit>
        <trans-unit id="18bb073a29d517b8a3a42b434c49bfbd5a2b2a13" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setInterval&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is executed every &lt;code&gt;delay&lt;/code&gt; milliseconds.</source>
          <target state="translated">AngularJS的 &lt;code&gt;window.setInterval&lt;/code&gt; 包装器。该 &lt;code&gt;fn&lt;/code&gt; 功能每执行 &lt;code&gt;delay&lt;/code&gt; 毫秒。</target>
        </trans-unit>
        <trans-unit id="f3ddbcf960e64f545ec9cb831b76819fde7f2373" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setTimeout&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is wrapped into a try/catch block and delegates any exceptions to &lt;a href=&quot;%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">AngularJS的 &lt;code&gt;window.setTimeout&lt;/code&gt; 包装。该 &lt;code&gt;fn&lt;/code&gt; 功能被包裹成一个try / catch块和代表任何例外&lt;a href=&quot;%24exceptionhandler&quot;&gt;$ exceptionHandler的&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="e28ca8ee33fee303615de7b48a3ebaeeb4dda2c4" translate="yes" xml:space="preserve">
          <source>AngularJS's wrapper for &lt;code&gt;window.setTimeout&lt;/code&gt;. The &lt;code&gt;fn&lt;/code&gt; function is wrapped into a try/catch block and delegates any exceptions to &lt;a href=&quot;service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">AngularJS的 &lt;code&gt;window.setTimeout&lt;/code&gt; 包装。该 &lt;code&gt;fn&lt;/code&gt; 功能被包裹成一个try / catch块和代表任何例外&lt;a href=&quot;service/%24exceptionhandler&quot;&gt;$ exceptionHandler的&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="edf5ebe5a67b68ae5fca138a2a5dfbc8054af2c8" translate="yes" xml:space="preserve">
          <source>AngularStrap for Bootstrap 3</source>
          <target state="translated">AngularStrap for Bootstrap 3</target>
        </trans-unit>
        <trans-unit id="aba9a35ec9eedc8eb79e6d0f03cd4eef93153ee8" translate="yes" xml:space="preserve">
          <source>Animating between value changes</source>
          <target state="translated">价值变化之间的动画</target>
        </trans-unit>
        <trans-unit id="62afd21e88769f01ba1c9330803baad57564d6e9" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="translated">Animation</target>
        </trans-unit>
        <trans-unit id="7f5f07bd5a091d92689e50573c0da813d4d14d72" translate="yes" xml:space="preserve">
          <source>Animation Anchoring (via ng-animate-ref)</source>
          <target state="translated">动画锚定(通过ng-animate-ref)</target>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="4fe25ebece61799897136d3106b7e79fe6ccfbc5" translate="yes" xml:space="preserve">
          <source>Animations are not available unless you include the &lt;a href=&quot;../api/nganimate&quot;&gt;&lt;code&gt;ngAnimate&lt;/code&gt; module&lt;/a&gt; as a dependency of your application.</source>
          <target state="translated">除非您将&lt;a href=&quot;../api/nganimate&quot;&gt; &lt;code&gt;ngAnimate&lt;/code&gt; 模块&lt;/a&gt;作为应用程序的依赖项包含在内，否则动画不可用。</target>
        </trans-unit>
        <trans-unit id="c0594ee2973edc0be64f9dfa8e39acbf86b8a72a" translate="yes" xml:space="preserve">
          <source>Animations in &lt;code&gt;ngShow&lt;/code&gt;/&lt;code&gt;ngHide&lt;/code&gt; work with the show and hide events that are triggered when the directive expression is true and false. This system works like the animation system present with &lt;code&gt;ngClass&lt;/code&gt; except that you must also include the &lt;code&gt;!important&lt;/code&gt; flag to override the display property so that the elements are not actually hidden during the animation.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; / &lt;code&gt;ngHide&lt;/code&gt; 中的动画处理show和hide事件，这些事件在指令表达式为true和false时触发。该系统的工作方式与 &lt;code&gt;ngClass&lt;/code&gt; 附带的动画系统类似，不同之处在于，您还必须包括 &lt;code&gt;!important&lt;/code&gt; 标志以覆盖display属性，以便在动画过程中实际上不会隐藏元素。</target>
        </trans-unit>
        <trans-unit id="0b2a60876cb65fb0147911bedc0ad0bf15f7d3ff" translate="yes" xml:space="preserve">
          <source>Animations in AngularJS are completely based on CSS classes. As long as you have a CSS class attached to an HTML element within your application, you can apply animations to it. Let's say for example that we have an HTML template with a repeater like so:</source>
          <target state="translated">AngularJS中的动画完全是基于CSS类的。只要你在应用中的HTML元素上附加了一个CSS类,你就可以对它应用动画。比如说,我们有一个HTML模板,它的重复器是这样的。</target>
        </trans-unit>
        <trans-unit id="fff49af586e2c4e9b3f2dd501fcc0aaac06fb0d6" translate="yes" xml:space="preserve">
          <source>Animations in ngForm are triggered when any of the associated CSS classes are added and removed. These classes are: &lt;code&gt;.ng-pristine&lt;/code&gt;, &lt;code&gt;.ng-dirty&lt;/code&gt;, &lt;code&gt;.ng-invalid&lt;/code&gt; and &lt;code&gt;.ng-valid&lt;/code&gt; as well as any other validations that are performed within the form. Animations in ngForm are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</source>
          <target state="translated">添加或删除任何关联的CSS类时，都会触发ngForm中的动画。这些类是： &lt;code&gt;.ng-pristine&lt;/code&gt; ， &lt;code&gt;.ng-dirty&lt;/code&gt; ， &lt;code&gt;.ng-invalid&lt;/code&gt; 和 &lt;code&gt;.ng-valid&lt;/code&gt; 以及在表单中执行的任何其他验证。ngForm中的动画类似于它们在ngClass中的工作方式，并且可以使用CSS过渡，关键帧以及JS动画将动画挂钩。</target>
        </trans-unit>
        <trans-unit id="67b5c3728edc0e75f5c55a0c0056f00846acd15f" translate="yes" xml:space="preserve">
          <source>Animations on app bootstrap / page load</source>
          <target state="translated">应用程序bootstrap/页面加载时的动画。</target>
        </trans-unit>
        <trans-unit id="2177639f84412abd63d8ce1ffb0f9712bb859c76" translate="yes" xml:space="preserve">
          <source>Animations within custom directives can also be established by injecting &lt;code&gt;$animate&lt;/code&gt; directly into your directive and making calls to it when needed.</source>
          <target state="translated">也可以通过将 &lt;code&gt;$animate&lt;/code&gt; 直接注入到指令中并在需要时对其进行调用来建立自定义指令中的动画。</target>
        </trans-unit>
        <trans-unit id="29559d5d09175ad58fe92108a5edad256c28781a" translate="yes" xml:space="preserve">
          <source>Animations within models are triggered when any of the associated CSS classes are added and removed on the input element which is attached to the model. These classes include: &lt;code&gt;.ng-pristine&lt;/code&gt;, &lt;code&gt;.ng-dirty&lt;/code&gt;, &lt;code&gt;.ng-invalid&lt;/code&gt; and &lt;code&gt;.ng-valid&lt;/code&gt; as well as any other validations that are performed on the model itself. The animations that are triggered within ngModel are similar to how they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well as JS animations.</source>
          <target state="translated">在关联到模型的输入元素上添加和删除任何关联的CSS类时，将触发模型内的动画。这些类包括： &lt;code&gt;.ng-pristine&lt;/code&gt; ， &lt;code&gt;.ng-dirty&lt;/code&gt; ， &lt;code&gt;.ng-invalid&lt;/code&gt; 和 &lt;code&gt;.ng-valid&lt;/code&gt; 以及对模型本身执行的任何其他验证。ngModel中触发的动画与它们在ngClass中的工作方式相似，并且可以使用CSS过渡，关键帧以及JS动画将动画挂接到钩子中。</target>
        </trans-unit>
        <trans-unit id="1859b1a59db69babc41c14f59a24c34e903944a3" translate="yes" xml:space="preserve">
          <source>Annotated constructor function.</source>
          <target state="translated">注释的构造函数。</target>
        </trans-unit>
        <trans-unit id="f2c8d59d42e7c3db1d26f04eb9b0478f66b9b7d5" translate="yes" xml:space="preserve">
          <source>Another scenario is adding a directive programmatically to a compiled element and then executing compile again. See the following &lt;strong&gt;faulty example&lt;/strong&gt;:</source>
          <target state="translated">另一种情况是将指令以编程方式添加到已编译元素中，然后再次执行编译。请参见以下&lt;strong&gt;错误示例&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="969a0ecaa65eb289d9a2e9d6090f5991d37b5286" translate="yes" xml:space="preserve">
          <source>Another solution is to use a &lt;code&gt;track by&lt;/code&gt; clause, because then &lt;code&gt;ngOptions&lt;/code&gt; will track the identity of the item not by reference, but by the result of the &lt;code&gt;track by&lt;/code&gt; expression. For example, if your collection items have an id property, you would &lt;code&gt;track by item.id&lt;/code&gt;.</source>
          <target state="translated">另一种解决方案是使用 &lt;code&gt;track by&lt;/code&gt; 子句，因为 &lt;code&gt;ngOptions&lt;/code&gt; 不会通过引用而是 &lt;code&gt;track by&lt;/code&gt; 表达式的跟踪结果来跟踪项的标识。例如，如果您的收集项目具有id属性，则可以 &lt;code&gt;track by item.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35ba7d28b3ce7cc7d01f098476d04b91469e1cbe" translate="yes" xml:space="preserve">
          <source>Another use-case for &lt;code&gt;ngOn&lt;/code&gt; is listening to &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;custom events&lt;/a&gt; fired by &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; 的另一个用例是监听&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;自&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;定义元素&lt;/a&gt;触发的自定义事件。</target>
        </trans-unit>
        <trans-unit id="c3bdf53bf457c9fc3e92bc2d910f483e037f083e" translate="yes" xml:space="preserve">
          <source>Any JavaScript object (including arrays and primitive types) to filter.</source>
          <target state="translated">任何要过滤的JavaScript对象(包括数组和基元类型)。</target>
        </trans-unit>
        <trans-unit id="de4518bc294ed54cea1f8963368f0e3c1241d4ef" translate="yes" xml:space="preserve">
          <source>Any exception emitted from the &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; will be passed onto the &lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;侦听器&lt;/a&gt;发出的任何异常都将传递到&lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$ exceptionHandler&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="eca8010205016887bae956d6ae88be83c9bd4978" translate="yes" xml:space="preserve">
          <source>Any exceptions from the execution of the expression are forwarded to the &lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; service.</source>
          <target state="translated">执行表达式时产生的任何异常都会转发到&lt;a href=&quot;../service/%24exceptionhandler&quot;&gt;$ exceptionHandler&lt;/a&gt;服务。</target>
        </trans-unit>
        <trans-unit id="136f3a6017ec892c22b97b38e6ce1b5592c356e0" translate="yes" xml:space="preserve">
          <source>Any external event on a directive/component will not trigger a digest while the hosting scope is suspended - even if the event handler calls &lt;code&gt;$apply()&lt;/code&gt; or &lt;code&gt;$rootScope.$digest()&lt;/code&gt;.</source>
          <target state="translated">挂起宿主作用域时，指令/组件上的任何外部事件都不会触发摘要-即使事件处理程序调用 &lt;code&gt;$apply()&lt;/code&gt; 或 &lt;code&gt;$rootScope.$digest()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e3b668fd7f49731bcb3c1e067c00ebcd8e78ada" translate="yes" xml:space="preserve">
          <source>Any other characters in the &lt;code&gt;format&lt;/code&gt; string will be output as-is.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 字符串中的任何其他字符将原样输出。</target>
        </trans-unit>
        <trans-unit id="422ef3807aa704fa02f9a1d220d6afe5c46512c0" translate="yes" xml:space="preserve">
          <source>Any pending &lt;code&gt;ngModelOptions&lt;/code&gt; changes will take place immediately when an enclosing form is submitted. Note that &lt;code&gt;ngClick&lt;/code&gt; events will occur before the model is updated. Use &lt;code&gt;ngSubmit&lt;/code&gt; to have access to the updated model.</source>
          <target state="translated">提交 &lt;code&gt;ngModelOptions&lt;/code&gt; 任何未完成的ngModelOptions更改都将立即发生。请注意， &lt;code&gt;ngClick&lt;/code&gt; 事件将在更新模型之前发生。使用 &lt;code&gt;ngSubmit&lt;/code&gt; 可以访问更新的模型。</target>
        </trans-unit>
        <trans-unit id="185b074a10fc46555a5d70fddc56be15b7205ef5" translate="yes" xml:space="preserve">
          <source>Any pending changes will take place immediately when an enclosing form is submitted via the &lt;code&gt;submit&lt;/code&gt; event. Note that &lt;code&gt;ngClick&lt;/code&gt; events will occur before the model is updated. Use &lt;code&gt;ngSubmit&lt;/code&gt; to have access to the updated model.</source>
          <target state="translated">通过 &lt;code&gt;submit&lt;/code&gt; 事件提交附表时，任何未决的更改将立即发生。请注意， &lt;code&gt;ngClick&lt;/code&gt; 事件将在更新模型之前发生。使用 &lt;code&gt;ngSubmit&lt;/code&gt; 可以访问更新的模型。</target>
        </trans-unit>
        <trans-unit id="8f782e9cb5bbdcbf217e9814a968f5294ded104d" translate="yes" xml:space="preserve">
          <source>Any time your application needs to react to a change in the current URL or if you want to change the current URL in the browser.</source>
          <target state="translated">当您的应用程序需要对当前URL的变化做出反应时,或者您想在浏览器中更改当前URL时。</target>
        </trans-unit>
        <trans-unit id="b848ee45c3ed822427c3aa6d8e5ae09ef5cd1527" translate="yes" xml:space="preserve">
          <source>Any uncaught exception in AngularJS expressions is delegated to this service. The default implementation simply delegates to &lt;code&gt;$log.error&lt;/code&gt; which logs it into the browser console.</source>
          <target state="translated">AngularJS表达式中任何未捕获的异常都委托给此服务。默认的实现只是将 &lt;code&gt;$log.error&lt;/code&gt; 委托给浏览器控制台。</target>
        </trans-unit>
        <trans-unit id="66d8a5005f5b7a5ddb9208ba220fe6b30ba308b2" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to a[href] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">首先将要通过数据绑定分配给a [href]的所有URL进行规范化，然后转换为绝对URL。然后，将URL与 &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; 正则表达式匹配。如果找到匹配项，则将原始网址写入dom。否则，绝对URL的前缀为 &lt;code&gt;'unsafe:'&lt;/code&gt; 字符串，然后才将其写入DOM。</target>
        </trans-unit>
        <trans-unit id="d3d6dd2884ca2cb0baa2409af0223b0a1c7c139d" translate="yes" xml:space="preserve">
          <source>Any url about to be assigned to img[src] via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with &lt;code&gt;'unsafe:'&lt;/code&gt; string and only then is it written into the DOM.</source>
          <target state="translated">首先将要通过数据绑定分配给img [src]的所有URL进行规范化，然后转换为绝对URL。然后，将URL与 &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; 正则表达式匹配。如果找到匹配项，则将原始网址写入dom。否则，绝对URL的前缀为 &lt;code&gt;'unsafe:'&lt;/code&gt; 字符串，然后才将其写入DOM。</target>
        </trans-unit>
        <trans-unit id="43f5d990f54d41e9398585a561e89b92ddaadd53" translate="yes" xml:space="preserve">
          <source>Apart from the &lt;strong&gt;Top Level Component&lt;/strong&gt; (&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;) which is associated with the &lt;a href=&quot;../service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;, every &lt;strong&gt;Routing Component&lt;/strong&gt; is associated with a &lt;code&gt;ChildRouter&lt;/code&gt;, which manages the routing for that &lt;strong&gt;Routing Component&lt;/strong&gt;.</source>
          <target state="translated">除了与&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt;关联的&lt;strong&gt;顶级组件&lt;/strong&gt;（$ routerRootComponent）&lt;a href=&quot;../service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt;，每个&lt;strong&gt;路由组件&lt;/strong&gt;都与一个 &lt;code&gt;ChildRouter&lt;/code&gt; 关联，后者管理该&lt;strong&gt;路由组件的路由&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e402e007d5cf0eceb8bba2547d33af36db64dcdf" translate="yes" xml:space="preserve">
          <source>Apart from the ternary operator (&lt;code&gt;a ? b : c&lt;/code&gt;), you cannot write a control flow statement in an expression. The reason behind this is core to the AngularJS philosophy that application logic should be in controllers, not the views. If you need a real conditional, loop, or to throw from a view expression, delegate to a JavaScript method instead.</source>
          <target state="translated">除了三元运算符（ &lt;code&gt;a ? b : c&lt;/code&gt; ），您不能在表达式中编写控制流语句。这背后的原因是AngularJS哲学的核心，即应用程序逻辑应该在控制器中，而不是视图中。如果您需要真正的条件，循环或从视图表达式中抛出，请委托给JavaScript方法。</target>
        </trans-unit>
        <trans-unit id="d71de8152541f4a1b7fda48b87f3fe315656e14c" translate="yes" xml:space="preserve">
          <source>Application Structure</source>
          <target state="translated">应用结构</target>
        </trans-unit>
        <trans-unit id="7fe601ec2e88419589f9146418e8e7af8c971aaa" translate="yes" xml:space="preserve">
          <source>Application Structure &amp;amp; Style Guides</source>
          <target state="translated">应用程序结构和样式指南</target>
        </trans-unit>
        <trans-unit id="e47fe9ae51aadfdd2d85b572285710bb9d6644ca" translate="yes" xml:space="preserve">
          <source>Application developers are free to define their own services by registering the service's name and &lt;strong&gt;service factory function&lt;/strong&gt;, with an AngularJS module.</source>
          <target state="translated">应用程序开发人员可以通过使用AngularJS模块注册服务的名称和&lt;strong&gt;服务工厂函数&lt;/strong&gt;来自由定义自己的服务。</target>
        </trans-unit>
        <trans-unit id="157fcee1bf70241b8658bd19f019bbfffbd57a6b" translate="yes" xml:space="preserve">
          <source>Application developers will rarely need to call this method directly. It is used internally, by &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setValidity.html&quot;&gt;NgModelController.$setValidity()&lt;/a&gt;, to propagate a control's validity state to the parent &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">应用程序开发人员几乎不需要直接调用此方法。&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setValidity.html&quot;&gt;NgModelController。$ setValidity（）&lt;/a&gt;在内部使用它，将控件的有效性状态传播到父 &lt;code&gt;FormController&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53162fc7151bee0f7c7ba8c31bf1c2355dfc4550" translate="yes" xml:space="preserve">
          <source>Architecture, file structure, components, one-way dataflow and best practices</source>
          <target state="translated">架构、文件结构、组件、单向数据流和最佳实践。</target>
        </trans-unit>
        <trans-unit id="c83a0088927a1633acaed10f539ea98bb1e204c3" translate="yes" xml:space="preserve">
          <source>Argument names</source>
          <target state="translated">论据名称</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="f2d1a651267110941a7e3eba6df9faa2ed02c04d" translate="yes" xml:space="preserve">
          <source>Array containing URLs whose origins are trusted to receive the XSRF token. See the &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations&lt;/a&gt; sections for more details on XSRF.</source>
          <target state="translated">包含URL的数组，URL的来源可信任来接收XSRF令牌。有关XSRF的更多详细信息，请参阅&amp;ldquo; &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;安全注意事项&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="32c9d1434f0741f3d270e0c58ec7b6e77a762138" translate="yes" xml:space="preserve">
          <source>Array containing service factories for all synchronous or asynchronous &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; pre-processing of request or postprocessing of responses.</source>
          <target state="translated">包含服务工厂的数组，用于所有同步或异步&lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt;的请求预处理或响应的后处理。</target>
        </trans-unit>
        <trans-unit id="557b5657af00498abd22b4555192836bb6d9557e" translate="yes" xml:space="preserve">
          <source>Array of config objects for currently pending requests. This is primarily meant to be used for debugging purposes.</source>
          <target state="translated">当前待处理请求的配置对象阵列。这主要是用来调试的。</target>
        </trans-unit>
        <trans-unit id="dda0d43b5dd90aadcea7413aa4213f341abd201c" translate="yes" xml:space="preserve">
          <source>Array of expressions that will be individually watched using &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt;</source>
          <target state="translated">可以使用&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;单独监视的表达式数组</target>
        </trans-unit>
        <trans-unit id="16a28eaf7d1396d70aa69a55073aa5ed0d533006" translate="yes" xml:space="preserve">
          <source>Array of functions to execute whenever a change to &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt; has caused a change to &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt;. It is called with no arguments, and its return value is ignored. This can be used in place of additional $watches against the model value.</source>
          <target state="translated">功能阵列来执行，只要更改&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt;已经引起了改变&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt;。它不带任何参数调用，并且其返回值被忽略。可以使用它代替模型值的其他$ watchs。</target>
        </trans-unit>
        <trans-unit id="1424ab51b27d79e61339e273ce91fa793a8714e8" translate="yes" xml:space="preserve">
          <source>Array of functions to execute, as a pipeline, whenever the bound ngModel expression changes programmatically. The &lt;code&gt;$formatters&lt;/code&gt; are not called when the value of the control is changed by user interaction.</source>
          <target state="translated">绑定的ngModel表达式以编程方式更改时要作为管道执行的函数数组。在 &lt;code&gt;$formatters&lt;/code&gt; 当控件的值是通过用户交互更改不叫。</target>
        </trans-unit>
        <trans-unit id="02b2ca54d88c554ca4e1087c37aecbf0eac12226" translate="yes" xml:space="preserve">
          <source>Array of functions to execute, as a pipeline, whenever the control updates the ngModelController with a new &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt; from the DOM, usually via user input. See &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;&lt;code&gt;$setViewValue()&lt;/code&gt;&lt;/a&gt; for a detailed lifecycle explanation. Note that the &lt;code&gt;$parsers&lt;/code&gt; are not called when the bound ngModel expression changes programmatically.</source>
          <target state="translated">每当控件通过DOM（通常通过用户输入）使用来自DOM 的新&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt;更新ngModelController时，作为管道执行的函数数组。有关详细的生命周期说明，请参见&lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt; &lt;code&gt;$setViewValue()&lt;/code&gt; &lt;/a&gt;。请注意，当绑定的ngModel表达式以编程方式更改时，不会调用 &lt;code&gt;$parsers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8aa61e073a4c0baab4b05c142ba71754be4dbe3a" translate="yes" xml:space="preserve">
          <source>Array of keys to assign to regex matches in request url described above.</source>
          <target state="translated">分配给上述请求url中的regex匹配的键数组。</target>
        </trans-unit>
        <trans-unit id="dce6ae97df369ff12e95dc68ff11901fddbd2a92" translate="yes" xml:space="preserve">
          <source>Array of keys to assign to regex matches in request url described on &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">分配给正则表达式匹配项的键数组，在&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackend模拟中&lt;/a&gt;描述的请求url中。</target>
        </trans-unit>
        <trans-unit id="9c6621304506b22ca9a68ad77ea41a030e17c566" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#debug.html&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#debug.html&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="57ea05d19a68d43106644cbce6da8d34187676e8" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="8151a9ffd2283d4619d532eaaac736b5d01ab54f" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#info.html&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#info.html&quot;&gt; &lt;code&gt;info()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="69d8c243e53bd946f150a38a73b18a8f0819eed0" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#log.html&quot;&gt;&lt;code&gt;log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#log.html&quot;&gt; &lt;code&gt;log()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="787bf1b8fa54bd835ba5079f6b4ece639ed7b9ed" translate="yes" xml:space="preserve">
          <source>Array of messages logged using &lt;a href=&quot;../../ng/service/%24log#warn.html&quot;&gt;&lt;code&gt;warn()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../ng/service/%24log#warn.html&quot;&gt; &lt;code&gt;warn()&lt;/code&gt; &lt;/a&gt;记录的消息数组。</target>
        </trans-unit>
        <trans-unit id="0fb4bcb40bc5316de7a202017017eaefa3df7c7b" translate="yes" xml:space="preserve">
          <source>Array/array-like, string or number to be limited.</source>
          <target state="translated">Array/array-like,字符串或数量要限制。</target>
        </trans-unit>
        <trans-unit id="647955f61de2f76c3b41b2e5804a604deead0bcb" translate="yes" xml:space="preserve">
          <source>Articles, Videos, and Projects</source>
          <target state="translated">文章、视频和项目</target>
        </trans-unit>
        <trans-unit id="7275de9628a1cc80191841f09611cfb2af505dfb" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;ngRepeat&lt;/code&gt; does its thing, each time a new item is added into the list, &lt;code&gt;ngRepeat&lt;/code&gt; will add an &lt;code&gt;ng-enter&lt;/code&gt; class to the element that is being added. When removed it will apply an &lt;code&gt;ng-leave&lt;/code&gt; class and when moved around it will apply an &lt;code&gt;ng-move&lt;/code&gt; class.</source>
          <target state="translated">随着 &lt;code&gt;ngRepeat&lt;/code&gt; 的工作，每次将新项添加到列表中时， &lt;code&gt;ngRepeat&lt;/code&gt; 都会向要添加的元素中添加 &lt;code&gt;ng-enter&lt;/code&gt; 类。删除后将应用 &lt;code&gt;ng-leave&lt;/code&gt; 类，而移动时将应用 &lt;code&gt;ng-move&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="0695df435dac0ab2843253e78e2827b4f1a7f956" translate="yes" xml:space="preserve">
          <source>As a best practice, consider adding an &lt;code&gt;ng-strict-di&lt;/code&gt; directive on the same element as &lt;code&gt;ng-app&lt;/code&gt;:</source>
          <target state="translated">最佳做法是考虑在与 &lt;code&gt;ng-app&lt;/code&gt; 相同的元素上添加 &lt;code&gt;ng-strict-di&lt;/code&gt; 指令：</target>
        </trans-unit>
        <trans-unit id="e65d701eca158f6dc26450435f4a299e994565af" translate="yes" xml:space="preserve">
          <source>As a result of &lt;code&gt;ngBind&lt;/code&gt;, &lt;code&gt;ngBindHtml&lt;/code&gt; or &lt;code&gt;{{...}}&lt;/code&gt; interpolations, binding data and CSS class &lt;code&gt;ng-binding&lt;/code&gt; are attached to the corresponding element.</source>
          <target state="translated">作为 &lt;code&gt;ngBind&lt;/code&gt; ， &lt;code&gt;ngBindHtml&lt;/code&gt; 或 &lt;code&gt;{{...}}&lt;/code&gt; 插值的结果，绑定数据和CSS类 &lt;code&gt;ng-binding&lt;/code&gt; 被附加到相应的元素。</target>
        </trans-unit>
        <trans-unit id="67db5c7bc5d719b0ac857083a55a856d06e77a01" translate="yes" xml:space="preserve">
          <source>As a result of that, &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; creates new scope and reinstantiates the controller.</source>
          <target state="translated">结果，&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;会创建新的作用域并重新实例化控制器。</target>
        </trans-unit>
        <trans-unit id="2325450d98839f1a7cf5c6905e3d4f5721cb3fd3" translate="yes" xml:space="preserve">
          <source>As already mentioned in the intro, the Provider recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe with the most abilities, but for most services it's overkill.</source>
          <target state="translated">正如前言中已经提到的,Provider recipe是核心的recipe类型,其他的recipe类型都只是在它上面的语法糖。它是最啰嗦的配方,能力最强,但对于大多数服务来说,它是矫枉过正的。</target>
        </trans-unit>
        <trans-unit id="6ef852d71fd5d9cc1d2ec23dccfd5e8aa5b6791e" translate="yes" xml:space="preserve">
          <source>As already mentioned, the component helper makes it easier to structure your application with a component-based architecture. But what makes a component beyond the options that the component helper has?</source>
          <target state="translated">如前所述,组件帮助器使你更容易用基于组件的架构来构建你的应用程序。但是,是什么让组件超越了组件帮助器所拥有的选项呢?</target>
        </trans-unit>
        <trans-unit id="66190f01e31088a12a65092a98ca24475f550877" translate="yes" xml:space="preserve">
          <source>As an array of injection names, where the last item in the array is the function to call.</source>
          <target state="translated">作为一个注入名称的数组,数组中最后一项是要调用的函数。</target>
        </trans-unit>
        <trans-unit id="ab19f6eb4ea00d87f713b79c4d8c813abaeab501" translate="yes" xml:space="preserve">
          <source>As an example, &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; uses &lt;a href=&quot;%24sce#parseAsHtml.html&quot;&gt;$sce.parseAsHtml(binding expression)&lt;/a&gt;. Here's the actual code (slightly simplified):</source>
          <target state="translated">例如，&lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt;使用&lt;a href=&quot;%24sce#parseAsHtml.html&quot;&gt;$ sce.parseAsHtml（binding expression）&lt;/a&gt;。这是实际的代码（略有简化）：</target>
        </trans-unit>
        <trans-unit id="07153bae5bff22d9000ae9eab846630c563316f9" translate="yes" xml:space="preserve">
          <source>As applications grow in size and complexity, it becomes unrealistic to rely on manual testing to verify the correctness of new features, catch bugs and notice regressions. Unit tests are the first line of defense for catching bugs, but sometimes issues come up with integration between components which can't be captured in a unit test. End-to-end tests are made to find these problems.</source>
          <target state="translated">随着应用程序的规模和复杂性的增长,依靠手动测试来验证新功能的正确性、捕捉错误和注意回归变得不现实。单元测试是捕捉bug的第一道防线,但有时组件之间的集成会出现一些问题,这些问题无法在单元测试中捕获。端到端测试就是为了发现这些问题。</target>
        </trans-unit>
        <trans-unit id="6d7a55120448d479c287c566c8d98fb08b5ccd50" translate="yes" xml:space="preserve">
          <source>As discussed in the &lt;a href=&quot;concepts&quot;&gt;Concepts&lt;/a&gt; section of this guide, any objects (or primitives) assigned to the scope become model properties. Any methods assigned to the scope are available in the template/view, and can be invoked via AngularJS expressions and &lt;code&gt;ng&lt;/code&gt; event handler directives (e.g. &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ngClick&lt;/a&gt;).</source>
          <target state="translated">如本指南的&amp;ldquo; &lt;a href=&quot;concepts&quot;&gt;概念&amp;rdquo;&lt;/a&gt;部分所述，分配给该范围的任何对象（或原语）都将成为模型属性。分配给范围的任何方法都可以在模板/视图中找到，并且可以通过AngularJS表达式和 &lt;code&gt;ng&lt;/code&gt; 事件处理程序指令（例如&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ngClick&lt;/a&gt;）调用。</target>
        </trans-unit>
        <trans-unit id="543566b9bcbd90fce5b7b69e2eb29f4197ad9e3d" translate="yes" xml:space="preserve">
          <source>As mentioned in the syntax for plural and select, the embedded messages can contain AngularJS interpolation syntax. Since you can use MessageFormat extensions in AngularJS interpolation, this allows you to nest plural and gender expressions in any order.</source>
          <target state="translated">正如在复数和选择的语法中提到的,嵌入的消息可以包含AngularJS插值语法。由于您可以在AngularJS插值中使用MessageFormat扩展,这允许您以任何顺序嵌套复数和性别表达。</target>
        </trans-unit>
        <trans-unit id="a72e1e24aff22427a315dbc60e5118663742eedc" translate="yes" xml:space="preserve">
          <source>As new &lt;code&gt;action&lt;/code&gt;s are inserted, the template &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element needs to be cloned and inserted into &lt;code&gt;ul&lt;/code&gt;. But cloning the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is not enough. It also needs to compile the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; so that its directives, like &lt;code&gt;{{action.description}}&lt;/code&gt;, evaluate against the right &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">在插入新 &lt;code&gt;action&lt;/code&gt; s时，需要克隆template &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素并将其插入 &lt;code&gt;ul&lt;/code&gt; 。但是，克隆 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素还不够。它还需要编译 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ,以便其指令（如 &lt;code&gt;{{action.description}}&lt;/code&gt; ）根据正确的&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;作用域&lt;/a&gt;进行评估。</target>
        </trans-unit>
        <trans-unit id="0ec13f23302b7d1dd1ac45a02e83f66da3e707c4" translate="yes" xml:space="preserve">
          <source>As of version 1.2, AngularJS ships with SCE enabled by default.</source>
          <target state="translated">从1.2版本开始,AngularJS默认启用SCE。</target>
        </trans-unit>
        <trans-unit id="b8080a15a0ddec2d77c43863b3384640745b7f2b" translate="yes" xml:space="preserve">
          <source>As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application is being developed with the real backend api replaced with a mock, it is often desirable for certain category of requests to bypass the mock and issue a real http request (e.g. to fetch templates or static files from the webserver). To configure the backend with this behavior use the &lt;code&gt;passThrough&lt;/code&gt; request handler of &lt;code&gt;when&lt;/code&gt; instead of &lt;code&gt;respond&lt;/code&gt;.</source>
          <target state="translated">与单元测试相反，在端到端测试方案中或在开发使用真实后端api替代了模拟程序的应用程序的情况下，某些类别的请求通常希望绕过模拟程序并发出请求真实的http请求（例如，从Web服务器获取模板或静态文件）。为了这种行为设定后端使用 &lt;code&gt;passThrough&lt;/code&gt; 的请求处理程序 &lt;code&gt;when&lt;/code&gt; ，而不是 &lt;code&gt;respond&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f031cf7748d485e3e97d83ef88851314a68f2046" translate="yes" xml:space="preserve">
          <source>As the name suggests, the &lt;strong&gt;isolate scope&lt;/strong&gt; of the directive isolates everything except models that you've explicitly added to the &lt;code&gt;scope: {}&lt;/code&gt; hash object. This is helpful when building reusable components because it prevents a component from changing your model state except for the models that you explicitly pass in.</source>
          <target state="translated">顾名思义，该伪指令的&lt;strong&gt;隔离范围&lt;/strong&gt;隔离了所有已明确添加到该 &lt;code&gt;scope: {}&lt;/code&gt; 模型，这些模型除外：{}哈希对象。这在构建可重用组件时很有用，因为它可以防止组件更改您的模型状态（明确传递的模型除外）。</target>
        </trans-unit>
        <trans-unit id="1d9cf083e1eebce068119ed3315973988cd233c8" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;repeated-item&lt;/code&gt; class is present on the element that will be repeated and this class will be used as a reference within our application's CSS and/or JavaScript animation code to tell AngularJS to perform an animation.</source>
          <target state="translated">如您所见， &lt;code&gt;repeated-item&lt;/code&gt; 类存在于将要重复的元素上，并且该类将用作我们应用程序的CSS和/或JavaScript动画代码中的引用，以告诉AngularJS执行动画。</target>
        </trans-unit>
        <trans-unit id="de4fc7d19e5e0a6d0ac18488a8fccba793d3b358" translate="yes" xml:space="preserve">
          <source>Asking for dependencies solves the issue of hard coding, but it also means that the injector needs to be passed throughout the application. Passing the injector breaks the &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;Law of Demeter&lt;/a&gt;. To remedy this, we use a declarative notation in our HTML templates, to hand the responsibility of creating components over to the injector, as in this example:</source>
          <target state="translated">要求依赖性解决了硬编码的问题，但这也意味着需要在整个应用程序中传递注入器。通过喷射器会破坏&lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;德米特律&lt;/a&gt;。为了解决这个问题，我们在HTML模板中使用了一个声明性的符号，将创建组件的责任移交给注射器，如下例所示：</target>
        </trans-unit>
        <trans-unit id="602dca52ef2fb38805f8af26bdf588f7fcb1e4e4" translate="yes" xml:space="preserve">
          <source>Assert that all of the logging methods have no logged messages. If any messages are present, an exception is thrown.</source>
          <target state="translated">假设所有的日志记录方法都没有记录的消息。如果有任何消息,就会抛出异常。</target>
        </trans-unit>
        <trans-unit id="0e32c36e98ffeeb8e37e062d05cb463a7f175dbe" translate="yes" xml:space="preserve">
          <source>Assignable AngularJS expression to data-bind to.</source>
          <target state="translated">可指定AngularJS表达式来进行数据绑定。</target>
        </trans-unit>
        <trans-unit id="fa624932ddb296ac5007e5591dd9bfb041b6cb1e" translate="yes" xml:space="preserve">
          <source>Assigning a property to &lt;code&gt;$scope&lt;/code&gt; creates or updates the model.</source>
          <target state="translated">将属性分配给 &lt;code&gt;$scope&lt;/code&gt; 创建或更新模型。</target>
        </trans-unit>
        <trans-unit id="adc58ef773100f1ac890b76704547adbe78e189d" translate="yes" xml:space="preserve">
          <source>Associates the provided element with a host parent element to allow the element to be animated even if it exists outside of the DOM structure of the AngularJS application. By doing so, any animation triggered via &lt;code&gt;$animate&lt;/code&gt; can be issued on the element despite being outside the realm of the application or within another application. Say for example if the application was bootstrapped on an element that is somewhere inside of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but we wanted to allow for an element to be situated as a direct child of &lt;code&gt;document.body&lt;/code&gt;, then this can be achieved by pinning the element via &lt;code&gt;$animate.pin(element)&lt;/code&gt;. Keep in mind that calling &lt;code&gt;$animate.pin(element, parentElement)&lt;/code&gt; will not actually insert into the DOM anywhere; it will just create the association.</source>
          <target state="translated">将提供的元素与宿主父元素相关联，以允许对该元素进行动画处理，即使该元素存在于AngularJS应用程序的DOM结构之外。这样，即使在应用程序范围之外或在另一个应用程序内，通过 &lt;code&gt;$animate&lt;/code&gt; 触发的任何动画都可以在该元素上发布。假设例如，如果应用程序是在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标记内部某个元素上引导的，但是我们希望允许该元素作为 &lt;code&gt;document.body&lt;/code&gt; 的直接子元素放置，则可以通过固定通过 &lt;code&gt;$animate.pin(element)&lt;/code&gt; 。请记住，调用 &lt;code&gt;$animate.pin(element, parentElement)&lt;/code&gt; 实际上不会在任何地方插入DOM；它只会创建关联。</target>
        </trans-unit>
        <trans-unit id="8a319250e7a62a6449653025f2ab2f88895ac77d" translate="yes" xml:space="preserve">
          <source>Asynchronous Loading</source>
          <target state="translated">异步加载</target>
        </trans-unit>
        <trans-unit id="5bbd06015f69fbcbcdb24725f6bb1567275ce22b" translate="yes" xml:space="preserve">
          <source>At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's &lt;strong&gt;HTML compiler&lt;/strong&gt; (&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.</source>
          <target state="translated">在高层次上，伪指令是DOM元素（例如属性，元素名称，注释或CSS类）上的标记，它们告诉AngularJS的&lt;strong&gt;HTML编译器&lt;/strong&gt;（&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;）将指定的行为附加到该DOM元素（例如，通过事件侦听器） ，甚至可以转换DOM元素及其子元素。</target>
        </trans-unit>
        <trans-unit id="fded031893dd4b58525b3e28e5c62e3f06e82a91" translate="yes" xml:space="preserve">
          <source>At first glance, it looks like removing the original &lt;code&gt;addMouseover&lt;/code&gt; attribute is all there is needed to make this example work. However, if the directive element or its children have other directives attached, they will be compiled and linked again, because the compiler doesn't keep track of which directives have been assigned to which elements.</source>
          <target state="translated">乍一看，看起来只有删除原始的 &lt;code&gt;addMouseover&lt;/code&gt; 属性，才能使此示例正常工作。但是，如果指令元素或其子元素附加了其他指令，则它们将再次编译并链接，因为编译器无法跟踪已将哪些指令分配给了哪些元素。</target>
        </trans-unit>
        <trans-unit id="16d656728db993e2d91d65f16fd40b8735a327f3" translate="yes" xml:space="preserve">
          <source>At first it might not be obvious why this extra complexity is worth the trouble. The payoff comes in the way of guarantees that promise and deferred APIs make, see &lt;a href=&quot;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&quot;&gt;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&lt;/a&gt;.</source>
          <target state="translated">乍一看，这种额外的复杂性值得解决的原因可能并不明显。收益来自保证API和承诺API的保证，请参见&lt;a href=&quot;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&quot;&gt;https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e100b35ab6c0fe1f3d2cdccfdad5402c15024472" translate="yes" xml:space="preserve">
          <source>At runtime the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; watches the expression and as items are added to the array it clones the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, creates a new &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; for the cloned &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element and calls the link function on the cloned &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">在运行时，&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;手表的表达和作为项目被添加到阵列中它克隆的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素，创建一个新的&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;范围&lt;/a&gt;为克隆的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元件和克隆调用链接功能 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31dab9e3efd9dd8deab1758a62454f3f213bdba8" translate="yes" xml:space="preserve">
          <source>At runtime: &lt;a href=&quot;../api/ng/service/%24animate#enabled.html&quot;&gt;$animate.enabled()&lt;/a&gt;</source>
          <target state="translated">在运行时：&lt;a href=&quot;../api/ng/service/%24animate#enabled.html&quot;&gt;$ animate.enabled（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f67e221630aa693d76075a22c1ba1f64147ff501" translate="yes" xml:space="preserve">
          <source>At the end of &lt;code&gt;$apply&lt;/code&gt;, AngularJS performs a &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle on the root scope, which then propagates throughout all child scopes. During the &lt;code&gt;$digest&lt;/code&gt; cycle, all &lt;code&gt;$watch&lt;/code&gt;ed expressions or functions are checked for model mutation and if a mutation is detected, the &lt;code&gt;$watch&lt;/code&gt; listener is called.</source>
          <target state="translated">在 &lt;code&gt;$apply&lt;/code&gt; 的末尾，AngularJS 在根作用域上执行&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;循环，然后在整个子作用域中传播。在 &lt;code&gt;$digest&lt;/code&gt; 周期内，将检查所有 &lt;code&gt;$watch&lt;/code&gt; watched表达式或函数是否存在模型突变，如果检测到突变，则会调用 &lt;code&gt;$watch&lt;/code&gt; 侦听器。</target>
        </trans-unit>
        <trans-unit id="811060f5b400ba59f43a01f37e35d2b7526adfec" translate="yes" xml:space="preserve">
          <source>At this point you may wonder why the compile process has separate compile and link phases. The short answer is that compile and link separation is needed any time a change in a model causes a change in the &lt;strong&gt;structure&lt;/strong&gt; of the DOM.</source>
          <target state="translated">此时，您可能想知道为什么编译过程具有单独的编译和链接阶段。简短的答案是，每当模型更改导致DOM &lt;strong&gt;结构&lt;/strong&gt;更改时，都需要进行编译和链接分离。</target>
        </trans-unit>
        <trans-unit id="7d38f6daaef849032ab49cae508751fbd896de2c" translate="yes" xml:space="preserve">
          <source>Attaching new behavior to DOM elements, such as DOM event handling.</source>
          <target state="translated">为DOM元素附加新的行为,如DOM事件处理。</target>
        </trans-unit>
        <trans-unit id="f18ef5bd3a9704f6d7f339924ddd7e7a2c353300" translate="yes" xml:space="preserve">
          <source>Attribute values are not merged</source>
          <target state="translated">属性值不合并</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="9cf83f638488303498c3d24f3e3e27d978f4e28e" translate="yes" xml:space="preserve">
          <source>Attributes such as &lt;code&gt;disabled&lt;/code&gt; are called &lt;code&gt;boolean&lt;/code&gt; attributes, because their presence means &lt;code&gt;true&lt;/code&gt; and their absence means &lt;code&gt;false&lt;/code&gt;. We cannot use normal attribute bindings with them, because the HTML specification does not require browsers to preserve the values of boolean attributes. This means that if we put an AngularJS interpolation expression into such an attribute then the binding information would be lost, because the browser ignores the attribute value.</source>
          <target state="translated">诸如 &lt;code&gt;disabled&lt;/code&gt; 类的属性称为 &lt;code&gt;boolean&lt;/code&gt; 属性，因为它们的存在表示 &lt;code&gt;true&lt;/code&gt; ,而它们的缺失表示 &lt;code&gt;false&lt;/code&gt; 。我们不能将常规属性绑定与它们一起使用，因为HTML规范不需要浏览器保留布尔属性的值。这意味着，如果将AngularJS插值表达式放入此类属性中，则绑定信息将丢失，因为浏览器会忽略该属性值。</target>
        </trans-unit>
        <trans-unit id="ec94b23d4cf5e5552507a5899b9e011b45a154d6" translate="yes" xml:space="preserve">
          <source>Augment the $delegate</source>
          <target state="translated">增加$delegate</target>
        </trans-unit>
        <trans-unit id="41869ae502e1528f5e860a994dc5f7a5715f3cc3" translate="yes" xml:space="preserve">
          <source>Automatic Initialization</source>
          <target state="translated">自动初始化</target>
        </trans-unit>
        <trans-unit id="1105b837870d87e705ed3933cf58b23765b1ac5f" translate="yes" xml:space="preserve">
          <source>Available task types:</source>
          <target state="translated">现有任务类型:</target>
        </trans-unit>
        <trans-unit id="b158354eab7dcfad40f037bfff4be8583770ec91" translate="yes" xml:space="preserve">
          <source>Back to the initial question: How does the &lt;code&gt;InvoiceController&lt;/code&gt; get a reference to the &lt;code&gt;currencyConverter&lt;/code&gt; function? In AngularJS, this is done by simply defining arguments on the constructor function. With this, the injector is able to create the objects in the right order and pass the previously created objects into the factories of the objects that depend on them. In our example, the &lt;code&gt;InvoiceController&lt;/code&gt; has an argument named &lt;code&gt;currencyConverter&lt;/code&gt;. By this, AngularJS knows about the dependency between the controller and the service and calls the controller with the service instance as argument.</source>
          <target state="translated">回到最初的问题： &lt;code&gt;InvoiceController&lt;/code&gt; 如何获得对 &lt;code&gt;currencyConverter&lt;/code&gt; 函数的引用？在AngularJS中，这是通过在构造函数上简单定义参数来完成的。这样，注入器就可以按正确的顺序创建对象，并将先前创建的对象传递到依赖它们的对象的工厂中。在我们的示例中， &lt;code&gt;InvoiceController&lt;/code&gt; 有一个名为 &lt;code&gt;currencyConverter&lt;/code&gt; 的参数。这样，AngularJS知道了控制器和服务之间的依赖关系，并以服务实例作为参数来调用控制器。</target>
        </trans-unit>
        <trans-unit id="d9c883a905731bc3ab1e5b1797dcc17a576c4565" translate="yes" xml:space="preserve">
          <source>Back to top</source>
          <target state="translated">返回顶部</target>
        </trans-unit>
        <trans-unit id="667908f902838bdc241aa234ee74229ead2f1562" translate="yes" xml:space="preserve">
          <source>Backend definitions</source>
          <target state="translated">后端定义</target>
        </trans-unit>
        <trans-unit id="dd04a0ffb87db83b44ae4c32b0c0f5c8813e323e" translate="yes" xml:space="preserve">
          <source>Backend definitions allow you to define a fake backend for your application which doesn't assert if a particular request was made or not, it just returns a trained response if a request is made. The test will pass whether or not the request gets made during testing.</source>
          <target state="translated">后台定义允许你为你的应用定义一个假的后台,它不会断言某个特定的请求是否被提出,它只是在请求被提出时返回一个训练好的响应。在测试过程中,无论请求是否被发出,测试都会通过。</target>
        </trans-unit>
        <trans-unit id="59f299125e1e43938ff9695b8c50f5b33268fea4" translate="yes" xml:space="preserve">
          <source>Base href constraints</source>
          <target state="translated">基本的href限制</target>
        </trans-unit>
        <trans-unit id="f8401938c390cf3e82bf20e8f5b954ce826b2925" translate="yes" xml:space="preserve">
          <source>Based on the context, other options may exist to mark a value as trusted / configure the behavior of &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. For example, to restrict the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context to specific origins, use the &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;resourceUrlBlacklist()&lt;/a&gt;.</source>
          <target state="translated">根据上下文，可能存在其他选项来将值标记为受信任/配置&lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;的行为。例如，要将 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 上下文限制为特定来源，请使用&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist（）&lt;/a&gt;和&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;resourceUrlBlacklist（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本使用方法</target>
        </trans-unit>
        <trans-unit id="a630ca8deb35f0b3fd6f775e263194a67f9726ee" translate="yes" xml:space="preserve">
          <source>Basic transclusion</source>
          <target state="translated">基本的转归</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本用途</target>
        </trans-unit>
        <trans-unit id="a8f4a3a1f0d4e06e71d9546076fd38b396b53d8c" translate="yes" xml:space="preserve">
          <source>Be aware that a scope may not be included in digests if it has a suspended ancestor, even if &lt;code&gt;$isSuspended()&lt;/code&gt; returns false.</source>
          <target state="translated">请注意，即使 &lt;code&gt;$isSuspended()&lt;/code&gt; 返回false ，范围也可能不包含在摘要中（如果祖先已暂停）。</target>
        </trans-unit>
        <trans-unit id="eb178cd3edcfd7946fd6725c07d458de69029a68" translate="yes" xml:space="preserve">
          <source>Be aware that the attribute values to match against cannot be expressions. They are interpreted as literal string values to match against. For example, &lt;strong&gt;&lt;code&gt;ng-switch-when=&quot;someVal&quot;&lt;/code&gt;&lt;/strong&gt; will match against the string &lt;code&gt;&quot;someVal&quot;&lt;/code&gt; not against the value of the expression &lt;code&gt;$scope.someVal&lt;/code&gt;.</source>
          <target state="translated">请注意，要匹配的属性值不能是表达式。它们被解释为要匹配的文字字符串值。例如，&lt;strong&gt; &lt;code&gt;ng-switch-when=&quot;someVal&quot;&lt;/code&gt; &lt;/strong&gt;将匹配字符串 &lt;code&gt;&quot;someVal&quot;&lt;/code&gt; 而不是表达式 &lt;code&gt;$scope.someVal&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="d57c89c178c1084f792baa907f8b2cd67bfc1260" translate="yes" xml:space="preserve">
          <source>Be aware that the controller will be instantiated and attached to the scope as specified in the component definition object. If you do not provide a &lt;code&gt;$scope&lt;/code&gt; object in the &lt;code&gt;locals&lt;/code&gt; param then the helper will create a new isolated scope as a child of &lt;code&gt;$rootScope&lt;/code&gt;.</source>
          <target state="translated">请注意，控制器将被实例化并附加到组件定义对象中指定的范围。如果您未在 &lt;code&gt;locals&lt;/code&gt; 参数中提供 &lt;code&gt;$scope&lt;/code&gt; 对象，则帮助程序将创建一个新的隔离范围作为 &lt;code&gt;$rootScope&lt;/code&gt; 的子级。</target>
        </trans-unit>
        <trans-unit id="6ed3cc776f278e962e755c71673491d092cfea71" translate="yes" xml:space="preserve">
          <source>Be aware that, before AngularJS 1.7.0, &lt;code&gt;a[href]&lt;/code&gt; and &lt;code&gt;img[src]&lt;/code&gt; used to sanitize their interpolated values directly rather than rely upon &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;&lt;code&gt;$sce.getTrusted&lt;/code&gt;&lt;/a&gt;. &lt;strong&gt;As of 1.7.0, this is no longer the case.&lt;/strong&gt; Now such interpolations are marked as requiring &lt;code&gt;$sce.URL&lt;/code&gt; (for &lt;code&gt;a[href]&lt;/code&gt;) or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; (for &lt;code&gt;img[src]&lt;/code&gt;), so that the sanitization happens (via &lt;code&gt;$sce.getTrusted...&lt;/code&gt;) when the &lt;code&gt;$interpolate&lt;/code&gt; service evaluates the expressions.</source>
          <target state="translated">请注意，在AngularJS 1.7.0之前， &lt;code&gt;a[href]&lt;/code&gt; 和 &lt;code&gt;img[src]&lt;/code&gt; 用于直接清理其插值，而不是依赖于&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt; &lt;code&gt;$sce.getTrusted&lt;/code&gt; &lt;/a&gt;。&lt;strong&gt;从1.7.0版开始，情况不再如此。&lt;/strong&gt;现在，这样的插值被标记为需要 &lt;code&gt;$sce.URL&lt;/code&gt; （对于 &lt;code&gt;a[href]&lt;/code&gt; ）或 &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; （对于 &lt;code&gt;img[src]&lt;/code&gt; ），以便在 &lt;code&gt;$interpolate&lt;/code&gt; 时进行清理（​​通过 &lt;code&gt;$sce.getTrusted...&lt;/code&gt; ）。服务评估表达式。</target>
        </trans-unit>
        <trans-unit id="2dc590986ab9f4a1c9c7cd048d14ee382cfa0665" translate="yes" xml:space="preserve">
          <source>Be careful when using &lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; in the same expression.</source>
          <target state="translated">在同一表达式中使用 &lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt;和&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;时要小心。</target>
        </trans-unit>
        <trans-unit id="756d08e3929f443998e8b33d291e1c7ac910d9d7" translate="yes" xml:space="preserve">
          <source>Be ready to update rapidly when new security-centric patches are available.</source>
          <target state="translated">当有新的以安全为中心的补丁时,要做好快速更新的准备。</target>
        </trans-unit>
        <trans-unit id="064da4156fc4de43ba0aa3698866646d47db5fcc" translate="yes" xml:space="preserve">
          <source>Be sure to check all relative links, images, scripts etc. AngularJS requires you to specify the url base in the head of your main html file (&lt;code&gt;&amp;lt;base href=&quot;/my-base/index.html&quot;&amp;gt;&lt;/code&gt;) unless &lt;code&gt;html5Mode.requireBase&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the html5Mode definition object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;. With that, relative urls will always be resolved to this base url, even if the initial url of the document was different.</source>
          <target state="translated">确保检查所有相关链接，图像，脚本等。AngularJS要求您在主html文件（ &lt;code&gt;&amp;lt;base href=&quot;/my-base/index.html&quot;&amp;gt;&lt;/code&gt; ）的开头指定url base，除非 &lt;code&gt;html5Mode.requireBase&lt;/code&gt; 在传递给 &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; 的html5Mode定义对象中将设置为 &lt;code&gt;false&lt;/code&gt; 。这样，即使文档的初始URL不同，相对URL仍将始终解析为该基本URL。</target>
        </trans-unit>
        <trans-unit id="c6ccae1d4f176aa022cf0467d0a41874c687b05c" translate="yes" xml:space="preserve">
          <source>Bear in mind that calling &lt;code&gt;$http.jsonp&lt;/code&gt; gives the remote server (and, if the request is not secured, any Man-in-the-Middle attackers) instant remote code execution in your application: the result of these requests is handed off to the browser as a regular &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">请记住，调用 &lt;code&gt;$http.jsonp&lt;/code&gt; 在应用程序中立即执行远程服务器（如果请求不受保护，则是任何中间人攻击者）都可以立即执行远程代码：这些请求的结果将传递给浏览器作为常规 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="913a9f820820f8fa1cd66701b894a4992b1a3a57" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;$location&lt;/code&gt; uses getters/setters, you can use &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to bind it to &lt;code&gt;ngModel&lt;/code&gt;:</source>
          <target state="translated">因为 &lt;code&gt;$location&lt;/code&gt; 使用getters / setter，所以可以使用 &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; 将其绑定到 &lt;code&gt;ngModel&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="66918714be29738338a327fa4d2ac2597587dfb7" translate="yes" xml:space="preserve">
          <source>Because AngularJS separates logic from the view layer, it keeps controllers easy to test. Let's take a look at how we might test the controller below, which provides &lt;code&gt;$scope.grade&lt;/code&gt;, which sets a property on the scope based on the length of the password.</source>
          <target state="translated">由于AngularJS将逻辑与视图层分开，因此使控制器易于测试。让我们看一下如何测试下面的控制器，该控制器提供 &lt;code&gt;$scope.grade&lt;/code&gt; ，该控制器根据密码的长度在作用域上设置一个属性。</target>
        </trans-unit>
        <trans-unit id="1af7e1fd57a13d91c70dd236e289a06c3575397f" translate="yes" xml:space="preserve">
          <source>Because calling the &lt;code&gt;then&lt;/code&gt; method of a promise returns a new derived promise, it is easily possible to create a chain of promises:</source>
          <target state="translated">因为调用promise 的 &lt;code&gt;then&lt;/code&gt; 方法会返回新的派生promise，所以很容易创建promise的链：</target>
        </trans-unit>
        <trans-unit id="9672864e0e40f75d7a0f50f10bc9d756a2e191b3" translate="yes" xml:space="preserve">
          <source>Because controllers are not available on the global scope, we need to use &lt;a href=&quot;../api/ngmock/function/angular.mock.inject&quot;&gt;&lt;code&gt;angular.mock.inject&lt;/code&gt;&lt;/a&gt; to inject our controller first. The first step is to use the &lt;code&gt;module&lt;/code&gt; function, which is provided by angular-mocks. This loads in the module it's given, so it is available in your tests. We pass this into &lt;code&gt;beforeEach&lt;/code&gt;, which is a function Jasmine provides that lets us run code before each test. Then we can use &lt;code&gt;inject&lt;/code&gt; to access &lt;code&gt;$controller&lt;/code&gt;, the service that is responsible for instantiating controllers.</source>
          <target state="translated">由于控制器在全局范围内不可用，因此我们需要使用&lt;a href=&quot;../api/ngmock/function/angular.mock.inject&quot;&gt; &lt;code&gt;angular.mock.inject&lt;/code&gt; &lt;/a&gt;首先注入控制器。第一步是使用 &lt;code&gt;module&lt;/code&gt; 功能，该功能由角度模拟提供。这将加载给定的模块，因此可以在测试中使用。我们将其传递给 &lt;code&gt;beforeEach&lt;/code&gt; ，这是Jasmine提供的功能，可让我们在每次测试之前运行代码。然后，我们可以使用 &lt;code&gt;inject&lt;/code&gt; 访问 &lt;code&gt;$controller&lt;/code&gt; ，该服务负责实例化控制器。</target>
        </trans-unit>
        <trans-unit id="e4f9e4a032b3c265ca8bc0abd382f689fad90b1d" translate="yes" xml:space="preserve">
          <source>Because of rewriting capability in HTML5 mode, your users will be able to open regular url links in legacy browsers and hashbang links in modern browser:</source>
          <target state="translated">由于HTML5模式下的重写能力,您的用户将能够在传统浏览器中打开常规的网址链接,在现代浏览器中打开哈希邦链接。</target>
        </trans-unit>
        <trans-unit id="2bf8e5fddffa8c784285c98c1c4d48d93b7de849" translate="yes" xml:space="preserve">
          <source>Because of these caveats, we recommend avoiding this style of annotation.</source>
          <target state="translated">由于这些注意事项,我们建议避免使用这种风格的注释。</target>
        </trans-unit>
        <trans-unit id="f831e48daf5bfcb79f6cbc1cd4201ba14ebde551" translate="yes" xml:space="preserve">
          <source>Because template loading is asynchronous the compiler will suspend compilation of directives on that element for later when the template has been resolved. In the meantime it will continue to compile and link sibling and parent elements as though this element had not contained any directives.</source>
          <target state="translated">由于模板加载是异步的,编译器将暂停对该元素指令的编译,待以后模板解析完毕后再进行编译。同时,它将继续编译和链接同级元素和父元素,就像这个元素没有包含任何指令一样。</target>
        </trans-unit>
        <trans-unit id="c2686aeaeb26c6b0f88a3e35dc78028d0d367579" translate="yes" xml:space="preserve">
          <source>Because the constants are fixed, they get applied before other provide methods. See &lt;a href=&quot;../../auto/service/%24provide#constant.html&quot;&gt;$provide.constant()&lt;/a&gt;.</source>
          <target state="translated">因为常量是固定的，所以它们在其他提供方法之前应用。参见&lt;a href=&quot;../../auto/service/%24provide#constant.html&quot;&gt;$ provide.constant（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fe7c5eb34e275ba1c5c585a6d36df4df0abd8a0c" translate="yes" xml:space="preserve">
          <source>Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it. This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency.</source>
          <target state="translated">因为视图只是模型的投影,控制器与视图完全分离,不知道它的存在。这使得测试变得非常简单,因为没有视图和相关的DOM/浏览器依赖,就可以轻松地隔离测试你的控制器。</target>
        </trans-unit>
        <trans-unit id="d2474582b13c2c5cbe322f103e9aa433011581de" translate="yes" xml:space="preserve">
          <source>Because these messages can themselves contain AngularJS expressions, you could also write this as follows:</source>
          <target state="translated">因为这些消息本身可以包含AngularJS表达式,你也可以这样写。</target>
        </trans-unit>
        <trans-unit id="e949293bb3141d39921183faafd54e8bcb4089c2" translate="yes" xml:space="preserve">
          <source>Becomes:</source>
          <target state="translated">Becomes:</target>
        </trans-unit>
        <trans-unit id="eac5d76c03a8af1becda5e52ec3a36ad44266321" translate="yes" xml:space="preserve">
          <source>Before animating, &lt;code&gt;ngAnimate&lt;/code&gt; checks if the animated element is inside the application DOM tree. If not, no animation is run. Usually, this is not a problem since most apps use the &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; elements as their root.</source>
          <target state="translated">在制作动画之前， &lt;code&gt;ngAnimate&lt;/code&gt; 检查动画元素是否在应用程序DOM树内。如果不是，则不运行动画。通常，这不是问题，因为大多数应用程序都将 &lt;code&gt;html&lt;/code&gt; 或 &lt;code&gt;body&lt;/code&gt; 元素用作其根。</target>
        </trans-unit>
        <trans-unit id="f9dea2dff9695dcee2903587ddf4721df61dee63" translate="yes" xml:space="preserve">
          <source>Before compilation</source>
          <target state="translated">汇编前</target>
        </trans-unit>
        <trans-unit id="f741ff2771fb251149a44e53c3845e34e949b99f" translate="yes" xml:space="preserve">
          <source>Before compilation:</source>
          <target state="translated">编制前:</target>
        </trans-unit>
        <trans-unit id="d2ed330fba12b5acc7c29421a0cc662fa9ec96e4" translate="yes" xml:space="preserve">
          <source>Before we can write a directive, we need to know how AngularJS's &lt;a href=&quot;compiler&quot;&gt;HTML compiler&lt;/a&gt; determines when to use a given directive.</source>
          <target state="translated">在编写指令之前，我们需要了解AngularJS的&lt;a href=&quot;compiler&quot;&gt;HTML编译器&lt;/a&gt;如何确定何时使用给定指令。</target>
        </trans-unit>
        <trans-unit id="a4244aeaf237de0bd45b29f36dc3172737bcea80" translate="yes" xml:space="preserve">
          <source>Before you start creating interceptors, be sure to understand the &lt;a href=&quot;%24q&quot;&gt;$q and deferred/promise APIs&lt;/a&gt;.</source>
          <target state="translated">在开始创建拦截器之前，请确保了解&lt;a href=&quot;%24q&quot;&gt;$ q和deferred / promise API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c9130bc666cd2fae643b177fd9066f63c8444f18" translate="yes" xml:space="preserve">
          <source>Below is a more detailed breakdown of the attributes handled by ngAria:</source>
          <target state="translated">下面是ngAria处理的属性的更详细的分解。</target>
        </trans-unit>
        <trans-unit id="11bbabfeedc954ff982e0a78487164bd01cf2aef" translate="yes" xml:space="preserve">
          <source>Below is a pseudo code showing how a simplified dialog component may work.</source>
          <target state="translated">下面是一段伪代码,展示了一个简化的对话框组件如何工作。</target>
        </trans-unit>
        <trans-unit id="8780b9b9f2ecc23a18832842a6331d7e904cf4bd" translate="yes" xml:space="preserve">
          <source>Below is a quick example of animations being enabled for &lt;code&gt;ngShow&lt;/code&gt; and &lt;code&gt;ngHide&lt;/code&gt;:</source>
          <target state="translated">以下是为 &lt;code&gt;ngShow&lt;/code&gt; 和 &lt;code&gt;ngHide&lt;/code&gt; 启用动画的快速示例：</target>
        </trans-unit>
        <trans-unit id="be1db57587b85598644961ce203ff84d2d516194" translate="yes" xml:space="preserve">
          <source>Below is the corresponding code using the &lt;code&gt;$compile&lt;/code&gt; service. This should help give you an idea of what AngularJS does internally.</source>
          <target state="translated">以下是使用 &lt;code&gt;$compile&lt;/code&gt; 服务的相应代码。这应该有助于您了解AngularJS在内部的功能。</target>
        </trans-unit>
        <trans-unit id="95b8e9add7e9e88cd1012d17110827a722b230cd" translate="yes" xml:space="preserve">
          <source>Besides making it possible to bind different data to the scope inside a directive, using an isolated scope has another effect.</source>
          <target state="translated">除了可以在指令内将不同的数据绑定到作用域外,使用隔离的作用域还有另一个效果。</target>
        </trans-unit>
        <trans-unit id="93406408f653eced71823f50bb1a33f720c1359a" translate="yes" xml:space="preserve">
          <source>Besides the new file that contains the controller code, we also added an &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;&lt;code&gt;ng-controller&lt;/code&gt;&lt;/a&gt; directive to the HTML. This directive tells AngularJS that the new &lt;code&gt;InvoiceController&lt;/code&gt; is responsible for the element with the directive and all of the element's children. The syntax &lt;code&gt;InvoiceController as invoice&lt;/code&gt; tells AngularJS to instantiate the controller and save it in the variable &lt;code&gt;invoice&lt;/code&gt; in the current scope.</source>
          <target state="translated">除了包含控制器代码的新文件之外，我们还向HTML 添加了&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt; &lt;code&gt;ng-controller&lt;/code&gt; &lt;/a&gt;指令。该指令告诉AngularJS，新的 &lt;code&gt;InvoiceController&lt;/code&gt; 负责使用该指令的元素以及该元素的所有子元素。 &lt;code&gt;InvoiceController as invoice&lt;/code&gt; 的语法告诉AngularJS实例化控制器并将其保存在当前作用域的变量 &lt;code&gt;invoice&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5dce4dc5831fd9122f1e8fb1725d04397f36283e" translate="yes" xml:space="preserve">
          <source>Besides these few cases, you should use &lt;a href=&quot;../../../guide/component&quot;&gt;Components&lt;/a&gt; or &lt;a href=&quot;../../../guide/controller&quot;&gt;Controllers&lt;/a&gt; rather than &lt;code&gt;ngInit&lt;/code&gt; to initialize values on a scope.</source>
          <target state="translated">除了这几种情况，您应该使用&lt;a href=&quot;../../../guide/component&quot;&gt;Components&lt;/a&gt;或&lt;a href=&quot;../../../guide/controller&quot;&gt;Controllers&lt;/a&gt;而不是 &lt;code&gt;ngInit&lt;/code&gt; 来初始化作用域上的值。</target>
        </trans-unit>
        <trans-unit id="bd3e4ab482cc2518af6697be2e20841e8a579b32" translate="yes" xml:space="preserve">
          <source>Beware that using &lt;code&gt;angular.module('myModule', [])&lt;/code&gt; will create the module &lt;code&gt;myModule&lt;/code&gt; and overwrite any existing module named &lt;code&gt;myModule&lt;/code&gt;. Use &lt;code&gt;angular.module('myModule')&lt;/code&gt; to retrieve an existing module.</source>
          <target state="translated">请注意，使用 &lt;code&gt;angular.module('myModule', [])&lt;/code&gt; 将创建模块 &lt;code&gt;myModule&lt;/code&gt; 并覆盖任何名为 &lt;code&gt;myModule&lt;/code&gt; 的现有模块。使用 &lt;code&gt;angular.module('myModule')&lt;/code&gt; 检索现有模块。</target>
        </trans-unit>
        <trans-unit id="8807c9bb60191c14db0f1b18c1ea78b4f82dbc02" translate="yes" xml:space="preserve">
          <source>Bind to built-in DOM events</source>
          <target state="translated">绑定到内置的DOM事件</target>
        </trans-unit>
        <trans-unit id="657d28f8e1850fbaf57c9e8970ad485efff54816" translate="yes" xml:space="preserve">
          <source>Bind to custom DOM events</source>
          <target state="translated">绑定到自定义DOM事件</target>
        </trans-unit>
        <trans-unit id="d5b9dbf27d5fc4d4a4c313e066f87df8c57477db" translate="yes" xml:space="preserve">
          <source>Binding expressions to arbitrary properties poses a security risk, as properties like &lt;code&gt;innerHTML&lt;/code&gt; can insert potentially dangerous HTML into the application, e.g. script tags that execute malicious code. For this reason, &lt;code&gt;ngProp&lt;/code&gt; applies Strict Contextual Escaping with the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce service&lt;/a&gt;. This means vulnerable properties require their content to be &quot;trusted&quot;, based on the context of the property. For example, the &lt;code&gt;innerHTML&lt;/code&gt; is in the &lt;code&gt;HTML&lt;/code&gt; context, and the &lt;code&gt;iframe.src&lt;/code&gt; property is in the &lt;code&gt;RESOURCE_URL&lt;/code&gt; context, which requires that values written to this property are trusted as a &lt;code&gt;RESOURCE_URL&lt;/code&gt;.</source>
          <target state="translated">将表达式绑定到任意属性会带来安全风险，因为诸如 &lt;code&gt;innerHTML&lt;/code&gt; 之类的属性可能会将潜在危险的HTML插入应用程序中，例如，执行恶意代码的脚本标签。因此， &lt;code&gt;ngProp&lt;/code&gt; 通过&lt;a href=&quot;../service/%24sce&quot;&gt;$ sce服务&lt;/a&gt;应用严格的上下文转义。这意味着，基于属性的上下文，易受攻击的属性要求其内容&amp;ldquo;受信任&amp;rdquo;。例如， &lt;code&gt;innerHTML&lt;/code&gt; 在 &lt;code&gt;HTML&lt;/code&gt; 上下文中，而 &lt;code&gt;iframe.src&lt;/code&gt; 属性在 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 上下文中，这要求写入此属性的值作为 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 被信任。</target>
        </trans-unit>
        <trans-unit id="3c95abad5a4fb01b2daa804b21d3bcaa9976b850" translate="yes" xml:space="preserve">
          <source>Binding select to a non-string value via ngModel parsing / formatting</source>
          <target state="translated">通过ngModel解析/格式化将选择绑定到一个非字符串的值。</target>
        </trans-unit>
        <trans-unit id="87c4c92c7cc5c40f37665ead791df5e9d4951a3e" translate="yes" xml:space="preserve">
          <source>Binding the view into the model, which other directives such as &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; require.</source>
          <target state="translated">将视图绑定到模型中，这是其他指令（例如 &lt;code&gt;input&lt;/code&gt; ， &lt;code&gt;textarea&lt;/code&gt; 或 &lt;code&gt;select&lt;/code&gt; )所需要的。</target>
        </trans-unit>
        <trans-unit id="bb8d1dbec2383b2ace68d315a5505325a07603fe" translate="yes" xml:space="preserve">
          <source>Binding to a getter/setter</source>
          <target state="translated">绑定到getter/setter</target>
        </trans-unit>
        <trans-unit id="25ace093925e2814896e0582fd4ff55182dce1a7" translate="yes" xml:space="preserve">
          <source>Binding to boolean attributes</source>
          <target state="translated">绑定到布尔属性</target>
        </trans-unit>
        <trans-unit id="8bce3a109839f438e000945b18acdd32b0210c8c" translate="yes" xml:space="preserve">
          <source>Binding to camelCase properties</source>
          <target state="translated">绑定camelCase属性</target>
        </trans-unit>
        <trans-unit id="99b5983ad3dd8a0fefc84a6eff022b8d33c135fe" translate="yes" xml:space="preserve">
          <source>Binding to different contexts</source>
          <target state="translated">绑定到不同的环境中</target>
        </trans-unit>
        <trans-unit id="d0561b07cc318a1f09fc9de10ee57ff0d9c80f3a" translate="yes" xml:space="preserve">
          <source>Binding to form and control state</source>
          <target state="translated">对形式和控制状态的约束</target>
        </trans-unit>
        <trans-unit id="ebd58a4a7b83d78b2f35d5de1c469945d20cbdfa" translate="yes" xml:space="preserve">
          <source>Binding to innerHTML with ngSanitize</source>
          <target state="translated">用ngSanitize绑定到innerHTML。</target>
        </trans-unit>
        <trans-unit id="b6fc4d77d0ae47604bdf44f931ee45b700a34949" translate="yes" xml:space="preserve">
          <source>Binds the given expression to the value of the element.</source>
          <target state="translated">将给定的表达式与元素的值绑定。</target>
        </trans-unit>
        <trans-unit id="0b9d2b2362bc33581ba11fddcb0cf0590ebd3a7a" translate="yes" xml:space="preserve">
          <source>Blog</source>
          <target state="translated">Blog</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="443f17a7b86f51793bfee7a9b599be7411962f49" translate="yes" xml:space="preserve">
          <source>Both approaches described above require you to prepare different &lt;code&gt;index.html&lt;/code&gt; pages or JavaScript files for each locale that your app may use. You also need to configure your server to serve the correct file that corresponds to the desired locale.</source>
          <target state="translated">上述两种方法都要求您为应用程序可能使用的每种语言环境准备不同的 &lt;code&gt;index.html&lt;/code&gt; 页面或JavaScript文件。您还需要配置服务器以提供与所需语言环境相对应的正确文件。</target>
        </trans-unit>
        <trans-unit id="6ca64c991bfb8f51ff1d5093045e9b7f736452f5" translate="yes" xml:space="preserve">
          <source>Both controllers and directives have reference to the scope, but not to each other. This arrangement isolates the controller from the directive as well as from the DOM. This is an important point since it makes the controllers view agnostic, which greatly improves the testing story of the applications.</source>
          <target state="translated">控制器和指令都有对作用域的引用,但不是相互引用。这种安排将控制器与指令以及DOM隔离开来。这是一个重要的点,因为它使控制器的视图不可知,这大大改善了应用程序的测试故事。</target>
        </trans-unit>
        <trans-unit id="40dcb3b95121f56d8a5d3c7eb1620ecb8cb8dc8b" translate="yes" xml:space="preserve">
          <source>Both methods return the &lt;code&gt;requestHandler&lt;/code&gt; object for possible overrides.</source>
          <target state="translated">这两个方法都返回 &lt;code&gt;requestHandler&lt;/code&gt; 对象以进行可能的覆盖。</target>
        </trans-unit>
        <trans-unit id="d46a182956cbe1896d122a91a94ab7a7d4100cc8" translate="yes" xml:space="preserve">
          <source>Both objects or values are of the same type and all of their properties are equal by comparing them with &lt;code&gt;angular.equals&lt;/code&gt;.</source>
          <target state="translated">通过将它们与 &lt;code&gt;angular.equals&lt;/code&gt; 相比较，这两个对象或值都属于同一类型，并且它们的所有属性都相等。</target>
        </trans-unit>
        <trans-unit id="3e5005cfde41f6cbdc44666fa883267220053196" translate="yes" xml:space="preserve">
          <source>Both objects or values pass &lt;code&gt;===&lt;/code&gt; comparison.</source>
          <target state="translated">对象或值都通过 &lt;code&gt;===&lt;/code&gt; 比较。</target>
        </trans-unit>
        <trans-unit id="a125206df8681fa85102404723fa7cd9d26dd16c" translate="yes" xml:space="preserve">
          <source>Both requests and responses can be transformed using transformation functions: &lt;code&gt;transformRequest&lt;/code&gt; and &lt;code&gt;transformResponse&lt;/code&gt;. These properties can be a single function that returns the transformed value (&lt;code&gt;function(data, headersGetter, status)&lt;/code&gt;) or an array of such transformation functions, which allows you to &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;unshift&lt;/code&gt; a new transformation function into the transformation chain.</source>
          <target state="translated">请求和响应都可以使用以下转换函数进行转换： &lt;code&gt;transformRequest&lt;/code&gt; 和 &lt;code&gt;transformResponse&lt;/code&gt; 。这些属性可以是返回转换后的值的单个函数（ &lt;code&gt;function(data, headersGetter, status)&lt;/code&gt; ），也可以是此类转换函数的数组，允许您 &lt;code&gt;push&lt;/code&gt; 新的转换函数推入或 &lt;code&gt;unshift&lt;/code&gt; 转换链。</target>
        </trans-unit>
        <trans-unit id="75b4106a74d08ca7beaa672015bdedf0fbb0610c" translate="yes" xml:space="preserve">
          <source>Both server and the client must cooperate in order to eliminate these threats. AngularJS comes pre-configured with strategies that address these issues, but for this to work backend server cooperation is required.</source>
          <target state="translated">为了消除这些威胁,服务器和客户端都必须合作。AngularJS 预先配置了解决这些问题的策略,但要做到这一点,需要后端服务器的合作。</target>
        </trans-unit>
        <trans-unit id="d7a06053351dcacb0958c1d7874174fafa3e176f" translate="yes" xml:space="preserve">
          <source>Both services use the array notation to declare their dependencies.</source>
          <target state="translated">两个服务都使用数组符号来声明它们的依赖关系。</target>
        </trans-unit>
        <trans-unit id="453b6ec0bdcf074f42019bd759bd4f46fe479c1d" translate="yes" xml:space="preserve">
          <source>Both values are NaN. (In JavaScript, NaN == NaN =&amp;gt; false. But we consider two NaN as equal)</source>
          <target state="translated">两个值均为NaN。（在JavaScript中，NaN == NaN =&amp;gt; false。但是我们认为两个NaN相等）</target>
        </trans-unit>
        <trans-unit id="8238aa1fee0718d12fd25bfcbae5d91e5efcde6e" translate="yes" xml:space="preserve">
          <source>Both values represent the same regular expression (In JavaScript, /abc/ == /abc/ =&amp;gt; false. But we consider two regular expressions as equal when their textual representation matches).</source>
          <target state="translated">这两个值表示相同的正则表达式（在JavaScript中，/ abc / == / abc / =&amp;gt; false。但是当它们的文本表示形式匹配时，我们认为两个正则表达式相等）。</target>
        </trans-unit>
        <trans-unit id="236ab44b7fba5a5f64f75f18c707a81aa8471a1c" translate="yes" xml:space="preserve">
          <source>BreezeJS</source>
          <target state="translated">BreezeJS</target>
        </trans-unit>
        <trans-unit id="a0cdfd5795b7e2c68f3f565bde94c8cda195a6da" translate="yes" xml:space="preserve">
          <source>Broadcasted after a URL was changed.</source>
          <target state="translated">在URL被更改后播报。</target>
        </trans-unit>
        <trans-unit id="5717f71e7e0404413a5bac0d197a4f54f36c5557" translate="yes" xml:space="preserve">
          <source>Broadcasted after a route change has happened successfully. The &lt;code&gt;resolve&lt;/code&gt; dependencies are now available in the &lt;code&gt;current.locals&lt;/code&gt; property.</source>
          <target state="translated">路由更改成功发生后广播。该 &lt;code&gt;resolve&lt;/code&gt; 依赖关系现在处于可用 &lt;code&gt;current.locals&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="db63277f54c549ffb9ccc9b41975c00069d4fd0b" translate="yes" xml:space="preserve">
          <source>Broadcasted before a URL will change.</source>
          <target state="translated">广播之前的URL会改变。</target>
        </trans-unit>
        <trans-unit id="a528b7c196e8ddc0cb9c7f059079eae85e556a77" translate="yes" xml:space="preserve">
          <source>Broadcasted before a route change. At this point the route services starts resolving all of the dependencies needed for the route change to occur. Typically this involves fetching the view template as well as any dependencies defined in &lt;code&gt;resolve&lt;/code&gt; route property. Once all of the dependencies are resolved &lt;code&gt;$routeChangeSuccess&lt;/code&gt; is fired.</source>
          <target state="translated">在更改路线之前广播。此时，路由服务开始解决发生路由更改所需的所有依赖关系。通常，这涉及获取视图模板以及在 &lt;code&gt;resolve&lt;/code&gt; route属性中定义的所有依赖项。解决所有依赖关系后，将触发 &lt;code&gt;$routeChangeSuccess&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e142877d6ef7e5d1e6c077814dcc5637d27b1f7" translate="yes" xml:space="preserve">
          <source>Broadcasted if a redirection function fails or any redirection or resolve promises are rejected.</source>
          <target state="translated">如果重定向功能失败或任何重定向或解析承诺被拒绝,则进行广播。</target>
        </trans-unit>
        <trans-unit id="5cfcce92d36aeb1c520e9b5db15f22bee58c5791" translate="yes" xml:space="preserve">
          <source>Broadcasted if the same instance of a route (including template, controller instance, resolved dependencies, etc.) is being reused. This can happen if either &lt;code&gt;reloadOnSearch&lt;/code&gt; or &lt;code&gt;reloadOnUrl&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果路由的同一实例（包括模板，控制器实例，已解决的依存关系等）被重用，则进行广播。如果将 &lt;code&gt;reloadOnSearch&lt;/code&gt; 或 &lt;code&gt;reloadOnUrl&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; ,则会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="5a8322d960d47320dc5989c276e6b8166c048003" translate="yes" xml:space="preserve">
          <source>Broadcasted when a scope and its children are being destroyed.</source>
          <target state="translated">当一个范围和它的孩子被摧毁时,广播。</target>
        </trans-unit>
        <trans-unit id="7d70e82b9c499004d1850cf08803f0ce4e7e5cfd" translate="yes" xml:space="preserve">
          <source>Browser in HTML5 Fallback mode (Hashbang mode)</source>
          <target state="translated">浏览器处于HTML5回退模式(Hashbang模式)。</target>
        </trans-unit>
        <trans-unit id="ecc6c180b9874f1a6748cfecac7f942eda9570d6" translate="yes" xml:space="preserve">
          <source>Browser in HTML5 mode</source>
          <target state="translated">浏览器在HTML5模式下</target>
        </trans-unit>
        <trans-unit id="e83b0bc612367cc74978d533e0e30cf24b965e7c" translate="yes" xml:space="preserve">
          <source>Built-in validation tokens:</source>
          <target state="translated">内置验证令牌。</target>
        </trans-unit>
        <trans-unit id="02e264495bc8c8e6e9753884128090bbb591476a" translate="yes" xml:space="preserve">
          <source>But &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; has a dilemma.</source>
          <target state="translated">但是&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;有一个难题。</target>
        </trans-unit>
        <trans-unit id="59c3592d94e357cca81ab82eb84d5087a88626ed" translate="yes" xml:space="preserve">
          <source>But given that the token is just a string literal, sticking with the Value recipe is still more appropriate as it makes the code easier to follow.</source>
          <target state="translated">但考虑到token只是一个字符串文字,坚持使用Value配方还是比较合适的,因为它让代码更容易遵循。</target>
        </trans-unit>
        <trans-unit id="fce344d9abbbab9562c13cd7f34c0b9da8dd4d9c" translate="yes" xml:space="preserve">
          <source>But unlike &lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;, a constant can be injected into a module configuration function (see &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;) and it cannot be overridden by an AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">但是与&lt;a href=&quot;%24provide#value.html&quot;&gt;值&lt;/a&gt;不同的是，常量可以注入模块配置函数中（参见&lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;），不能被AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;装饰器&lt;/a&gt;覆盖。</target>
        </trans-unit>
        <trans-unit id="405847fd05efd79761c86b02e94559369547dbc6" translate="yes" xml:space="preserve">
          <source>By adding an &lt;code&gt;$inject&lt;/code&gt; property onto a function the injection parameters can be specified.</source>
          <target state="translated">通过将 &lt;code&gt;$inject&lt;/code&gt; 属性添加到函数中，可以指定注入参数。</target>
        </trans-unit>
        <trans-unit id="2fa2da9f3a76efbcb9284be63afad1a9da922618" translate="yes" xml:space="preserve">
          <source>By default $animate doesn't trigger any animations. This is because the &lt;code&gt;ngAnimate&lt;/code&gt; module isn't included and only when it is active then the animation hooks that &lt;code&gt;$animate&lt;/code&gt; triggers will be functional. Once active then all structural &lt;code&gt;ng-&lt;/code&gt; directives will trigger animations as they perform their DOM-related operations (enter, leave and move). Other directives such as &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and &lt;code&gt;ngMessages&lt;/code&gt; also provide support for animations.</source>
          <target state="translated">默认情况下，$ animate不会触发任何动画。这是因为不包含 &lt;code&gt;ngAnimate&lt;/code&gt; 模块，只有当该模块处于活动状态时， &lt;code&gt;$animate&lt;/code&gt; 才会挂钩$ animate触发器将起作用。一旦激活，所有结构 &lt;code&gt;ng-&lt;/code&gt; 指令将在执行与DOM相关的操作（进入，离开和移动）时触发动画。其他指令（例如 &lt;code&gt;ngClass&lt;/code&gt; ， &lt;code&gt;ngShow&lt;/code&gt; ， &lt;code&gt;ngHide&lt;/code&gt; 和 &lt;code&gt;ngMessages&lt;/code&gt; )也提供动画支持。</target>
        </trans-unit>
        <trans-unit id="6a63f23b39aeafeeeef2f721b04b4097b6810a86" translate="yes" xml:space="preserve">
          <source>By default AngularJS attaches information about binding and scopes to DOM nodes, and adds CSS classes to data-bound elements:</source>
          <target state="translated">默认情况下,AngularJS会将绑定和作用域的信息附加到DOM节点上,并为数据绑定的元素添加CSS类。</target>
        </trans-unit>
        <trans-unit id="370ccd1eb19dc0d611cfd9491b8afea309b7a0df" translate="yes" xml:space="preserve">
          <source>By default AngularJS compiles and executes all directives inside comments and element classes. In order to perform this task, the AngularJS compiler must look for directives by:</source>
          <target state="translated">默认情况下,AngularJS会编译并执行注释和元素类内的所有指令。为了执行这项任务,AngularJS编译器必须通过以下方式查找指令。</target>
        </trans-unit>
        <trans-unit id="1e2842d70be7f65d0a8c45bdabb3581c644cabee" translate="yes" xml:space="preserve">
          <source>By default you don't need to override anything in CSS and the animations will work around the display style.</source>
          <target state="translated">默认情况下,你不需要在CSS中覆盖任何东西,动画将围绕显示风格工作。</target>
        </trans-unit>
        <trans-unit id="cfc9fd29727c805e8bcd27c2fd78719670ad599e" translate="yes" xml:space="preserve">
          <source>By default you don't need to override in CSS anything and the animations will work around the display style.</source>
          <target state="translated">默认情况下,你不需要在CSS中覆盖任何东西,动画将围绕显示风格工作。</target>
        </trans-unit>
        <trans-unit id="8e2db882ad5f7a39f81879fd1d5e758ebc4f4597" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll()&lt;/a&gt; will automatically detect changes to &lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; and scroll to the element matching the new hash.</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll（）&lt;/a&gt;将自动检测对&lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$ location.hash（）的&lt;/a&gt;更改，并滚动到与新哈希匹配的元素。</target>
        </trans-unit>
        <trans-unit id="c70a53728f1b21d2741de003d4f7d107644ad595" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;$sce&lt;/code&gt; will throw an error if it detects untrusted HTML content, and will not bind the content. However, if you include the &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize module&lt;/a&gt;, it will try to sanitize the potentially dangerous HTML, e.g. strip non-whitelisted tags and attributes when binding to &lt;code&gt;innerHTML&lt;/code&gt;.</source>
          <target state="translated">默认情况下，如果 &lt;code&gt;$sce&lt;/code&gt; 检测到不受信任的HTML内容，将抛出错误，并且不会绑定该内容。但是，如果包含&lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize模块&lt;/a&gt;，它将尝试清除潜在危险的HTML，例如，在绑定到 &lt;code&gt;innerHTML&lt;/code&gt; 时删除未列入白名单的标签和属性。</target>
        </trans-unit>
        <trans-unit id="79c69d18163b4e263908e7612db7c38c1f192b89" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngMessages&lt;/code&gt; will only display one message for a particular key/value collection at any time. If more than one message (or error) key is currently true, then which message is shown is determined by the order of messages in the HTML template code (messages declared first are prioritised). This mechanism means the developer does not have to prioritize messages using custom JavaScript code.</source>
          <target state="translated">默认情况下， &lt;code&gt;ngMessages&lt;/code&gt; 在任何时候都只会显示一条消息，用于特定的键/值集合。如果当前有多个消息（或错误）键为真，则显示的消息由HTML模板代码中的消息顺序确定（优先声明的消息优先）。这种机制意味着开发人员不必使用自定义JavaScript代码优先处理消息。</target>
        </trans-unit>
        <trans-unit id="24c1da0bbb6770f2b962ebbc35b060bf09623b8f" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngModel&lt;/code&gt; watches the model by reference, not value. This is important to know when binding inputs to models that are objects (e.g. &lt;code&gt;Date&lt;/code&gt;) or collections (e.g. arrays). If only properties of the object or collection change, &lt;code&gt;ngModel&lt;/code&gt; will not be notified and so the input will not be re-rendered.</source>
          <target state="translated">默认情况下， &lt;code&gt;ngModel&lt;/code&gt; 通过引用而非值监视模型。了解何时将输入绑定到对象（例如 &lt;code&gt;Date&lt;/code&gt; ）或集合（例如数组）的模型，这一点很重要。如果仅对象或集合的属性发生更改，则不会通知 &lt;code&gt;ngModel&lt;/code&gt; ，因此不会重新呈现输入。</target>
        </trans-unit>
        <trans-unit id="7190d37e5aa54069ede2834cb78f273c5c43c428" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ngModel&lt;/code&gt; watches the model by reference, not value. This is important to know when binding the select to a model that is an object or a collection.</source>
          <target state="translated">默认情况下， &lt;code&gt;ngModel&lt;/code&gt; 通过引用而非值监视模型。了解将选择绑定到作为对象或集合的模型时，这一点很重要。</target>
        </trans-unit>
        <trans-unit id="6903112b079eaf8ffdf3aec857a1afc48c94199d" translate="yes" xml:space="preserve">
          <source>By default, AngularJS only loads templates from the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on the template URL. To load templates from other domains and/or protocols, you may either &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelist them&lt;/a&gt; or &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;wrap it&lt;/a&gt; into a trusted value.</source>
          <target state="translated">默认情况下，AngularJS仅从与应用程序文档相同的域和协议中加载模板。这是通过在模板URL上调用&lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;来完成的。要从其他域和/或协议中加载模板，您可以将其&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;列入白名单&lt;/a&gt;或&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;将其包装&lt;/a&gt;为可信值。</target>
        </trans-unit>
        <trans-unit id="1966d304ab081cea6a8b5d7d37a52d0b976b638f" translate="yes" xml:space="preserve">
          <source>By default, animations are disabled when the AngularJS app &lt;a href=&quot;bootstrap&quot;&gt;bootstraps&lt;/a&gt;. If you are using the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive, this happens in the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, so immediately after the page has been loaded. Animations are disabled, so that UI and content are instantly visible. Otherwise, with many animations on the page, the loading process may become too visually overwhelming, and the performance may suffer.</source>
          <target state="translated">默认情况下，当AngularJS应用&lt;a href=&quot;bootstrap&quot;&gt;启动&lt;/a&gt;时，动画是禁用的。如果您使用的是&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt;指令，则这会在 &lt;code&gt;DOMContentLoaded&lt;/code&gt; 事件中发生，因此在页面加载后立即发生。动画被禁用，因此UI和内容立即可见。否则，页面上会有许多动画，加载过程可能在视觉上变得不堪重负，并且性能可能会受到影响。</target>
        </trans-unit>
        <trans-unit id="df4843033cbd0e8a2de04acc71992eef26af1ccc" translate="yes" xml:space="preserve">
          <source>By default, any &lt;code&gt;ngAnimate&lt;/code&gt;-enabled directives will assume that &lt;code&gt;transition&lt;/code&gt; / &lt;code&gt;animation&lt;/code&gt; styles on the element are part of an &lt;code&gt;ngAnimate&lt;/code&gt; animation. This can lead to problems when the styles are actually for animations that are independent of &lt;code&gt;ngAnimate&lt;/code&gt;.</source>
          <target state="translated">默认情况下，任何启用 &lt;code&gt;ngAnimate&lt;/code&gt; 的指令都将假定元素上的 &lt;code&gt;transition&lt;/code&gt; / &lt;code&gt;animation&lt;/code&gt; 样式是 &lt;code&gt;ngAnimate&lt;/code&gt; 动画的一部分。当样式实际上是与 &lt;code&gt;ngAnimate&lt;/code&gt; 无关的动画时，这可能会导致问题。</target>
        </trans-unit>
        <trans-unit id="a89e6cd1f35ad33962ebab128b602ce984b62740" translate="yes" xml:space="preserve">
          <source>By default, any change to the content will trigger a model update and form validation. You can override this behavior using the &lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive to bind only to specified list of events. I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'blur' }&quot;&lt;/code&gt; will update and validate only after the control loses focus. You can set several events using a space delimited list. I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'mousedown blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">默认情况下，对内容的任何更改都会触发模型更新和表单验证。您可以使用&lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;指令覆盖此行为，以仅绑定到指定的事件列表。即 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'blur' }&quot;&lt;/code&gt; 仅在控件失去焦点之后才会更新和验证。您可以使用空格分隔的列表设置多个事件。即 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'mousedown blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="500f830c32748a1f53ff5f9a7775baaecd3aa39e" translate="yes" xml:space="preserve">
          <source>By default, ngMock will create an injector per test case to ensure your tests do not affect each other. However, if we want to use &lt;code&gt;beforeAll()&lt;/code&gt;, ngMock will have to create the injector before any test cases are run, and share that injector through all the cases for that &lt;code&gt;describe&lt;/code&gt;. That is where &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector()&lt;/a&gt; comes in. When it's called within a &lt;code&gt;describe&lt;/code&gt; block, a single injector is shared between all hooks and test cases run in that block.</source>
          <target state="translated">默认情况下，ngMock将为每个测试用例创建一个注入器，以确保您的测试不会相互影响。但是，如果我们要使用 &lt;code&gt;beforeAll()&lt;/code&gt; ，则ngMock将必须在运行任何测试用例之前创建注入器，并通过该 &lt;code&gt;describe&lt;/code&gt; 的所有用例共享该注入器。那就是&lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector（）&lt;/a&gt;进入的地方。在 &lt;code&gt;describe&lt;/code&gt; 块中调用它时，所有挂钩之间都共享一个注入器，并且该块中运行的测试用例。</target>
        </trans-unit>
        <trans-unit id="85a705fceaf0b765e21238642283db4e9a9de198" translate="yes" xml:space="preserve">
          <source>By default, query parameters on request URLs are parsed into the &lt;code&gt;params&lt;/code&gt; object. So a request URL of &lt;code&gt;/list?q=searchstr&amp;amp;orderby=-name&lt;/code&gt; would set &lt;code&gt;params&lt;/code&gt; to be &lt;code&gt;{q: 'searchstr', orderby: '-name'}&lt;/code&gt;.</source>
          <target state="translated">默认情况下，请求URL上的查询参数被解析为 &lt;code&gt;params&lt;/code&gt; 对象。因此， &lt;code&gt;/list?q=searchstr&amp;amp;orderby=-name&lt;/code&gt; 的请求URL 会将 &lt;code&gt;params&lt;/code&gt; 设置为 &lt;code&gt;{q: 'searchstr', orderby: '-name'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7198ac8768b77ff593616dc4b6e2aca0b18676a4" translate="yes" xml:space="preserve">
          <source>By default, the &quot;required&quot; error on the ngModelController is only set on a required select when the empty option is selected. This example adds a custom directive that also sets the error when the unknown option is selected.</source>
          <target state="translated">默认情况下,ngModelController上的 &quot;必填 &quot;错误只有在选择空选项时才会在必填选择时设置。这个例子增加了一个自定义指令,当选择未知选项时也会设置错误。</target>
        </trans-unit>
        <trans-unit id="e221e45c15e66ddc82e3f4a4feda670a95e982cd" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; method is used for tracking changes, and the equality check is based on object identity. However, if an object literal or an array literal is passed as the binding expression, the equality check is done by value (using the &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; function). It's also possible to watch the evaluated value shallowly with &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;&lt;code&gt;$watchCollection&lt;/code&gt;&lt;/a&gt;: use &lt;code&gt;=*&lt;/code&gt; or &lt;code&gt;=*attr&lt;/code&gt;</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;方法用于跟踪更改，并且相等性检查基于对象标识。但是，如果将对象文字或数组文字作为绑定表达式传递，则相等检查将通过值（使用&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; &lt;/a&gt;函数）完成。也可以使用&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt; &lt;code&gt;$watchCollection&lt;/code&gt; &lt;/a&gt;浅看一下评估值：use &lt;code&gt;=*&lt;/code&gt; 或 &lt;code&gt;=*attr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0973385c3a816fcb28f0098577f72a074edba112" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; method is used for tracking changes, and the equality check is based on object identity. It's also possible to watch the evaluated value shallowly with &lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt;&lt;code&gt;$watchCollection&lt;/code&gt;&lt;/a&gt;: use &lt;code&gt;&amp;lt;*&lt;/code&gt; or &lt;code&gt;&amp;lt;*attr&lt;/code&gt;</source>
          <target state="translated">默认情况下，&lt;a href=&quot;../type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;方法用于跟踪更改，并且相等性检查基于对象标识。也可以使用&lt;a href=&quot;../type/%24rootscope.scope#%24watchCollection.html&quot;&gt; &lt;code&gt;$watchCollection&lt;/code&gt; &lt;/a&gt;地查看评估值：使用 &lt;code&gt;&amp;lt;*&lt;/code&gt; 或 &lt;code&gt;&amp;lt;*attr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb24723013a0e6e79cb996d2a10e6b4c5257acc0" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;.ng-hide&lt;/code&gt; class will style the element with &lt;code&gt;display: none !important&lt;/code&gt;. If you wish to change the hide behavior with &lt;code&gt;ngShow&lt;/code&gt;/&lt;code&gt;ngHide&lt;/code&gt;, you can simply overwrite the styles for the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class. Note that the selector that needs to be used is actually &lt;code&gt;.ng-hide:not(.ng-hide-animate)&lt;/code&gt; to cope with extra animation classes that can be added.</source>
          <target state="translated">默认情况下， &lt;code&gt;.ng-hide&lt;/code&gt; 类将使用 &lt;code&gt;display: none !important&lt;/code&gt; 设置元素的样式：none！important。如果要使用 &lt;code&gt;ngShow&lt;/code&gt; / &lt;code&gt;ngHide&lt;/code&gt; 更改隐藏行为，则可以简单地覆盖 &lt;code&gt;.ng-hide&lt;/code&gt; CSS类的样式。请注意，实际上需要使用的选择器是 &lt;code&gt;.ng-hide:not(.ng-hide-animate)&lt;/code&gt; 来应对可以添加的额外动画类。</target>
        </trans-unit>
        <trans-unit id="fce47139951721d70fff4365f4ba57737c92ef63" translate="yes" xml:space="preserve">
          <source>By default, the template URL is restricted to the same domain and protocol as the application document. This is done by calling &lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt; on it. To load templates from other domains or protocols you may either &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelist them&lt;/a&gt; or &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;wrap them&lt;/a&gt; as trusted values. Refer to AngularJS's &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping&lt;/a&gt;.</source>
          <target state="translated">默认情况下，模板URL限于与应用程序文档相同的域和协议。这是通过在其上调用&lt;a href=&quot;../service/%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl&lt;/a&gt;来完成的。要从其他域或协议中加载模板，您可以将其&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;列入白名单&lt;/a&gt;或&lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;将其包装&lt;/a&gt;为可信值。请参阅AngularJS的&lt;a href=&quot;../service/%24sce&quot;&gt;严格上下文转义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32e44cbd14ed433730fe544c3bfd62ca5f7ab6e5" translate="yes" xml:space="preserve">
          <source>By default, trailing slashes will be stripped from the calculated URLs, which can pose problems with server backends that do not expect that behavior. This can be disabled by configuring the &lt;code&gt;$resourceProvider&lt;/code&gt; like this:</source>
          <target state="translated">默认情况下，将从计算得出的URL中删除尾部的斜杠，这可能会给服务器后端带来一些问题，这些后端无法预期这种行为。可以通过如下配置 &lt;code&gt;$resourceProvider&lt;/code&gt; 来禁用它：</target>
        </trans-unit>
        <trans-unit id="523150288e3d3cbcdab71e7b4b769b8742b51985" translate="yes" xml:space="preserve">
          <source>By enabling this setting without taking other precautions, you might expose your application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned outside of the containing element and be rendered over other elements on the page (e.g. a login link). Such behavior can then result in phishing incidents.</source>
          <target state="translated">启用此设置而不采取其他预防措施,您可能会使您的应用程序受到点击劫持攻击。在这些攻击中,经过消毒的 svg 元素可能会被定位在包含元素之外,并呈现在页面上的其他元素上(例如登录链接)。这种行为可能会导致钓鱼事件。</target>
        </trans-unit>
        <trans-unit id="aa28a200094d0f8e4952a2572b5bf5b51a4cfccf" translate="yes" xml:space="preserve">
          <source>By implementing these methods, your component can hook into its lifecycle.</source>
          <target state="translated">通过实现这些方法,你的组件可以挂入它的生命周期。</target>
        </trans-unit>
        <trans-unit id="29c9ccc283e35e9d7b41129880c9316c7594e9f5" translate="yes" xml:space="preserve">
          <source>By listening to this event, you can remove event listeners that might cause memory leaks. Listeners registered to scopes and elements are automatically cleaned up when they are destroyed, but if you registered a listener on a service, or registered a listener on a DOM node that isn't being deleted, you'll have to clean it up yourself or you risk introducing a memory leak.</source>
          <target state="translated">通过监听这个事件,你可以删除可能导致内存泄漏的事件监听器。注册在作用域和元素上的监听器在被销毁后会自动清理,但如果你在服务上注册了一个监听器,或者在没有被删除的DOM节点上注册了一个监听器,你就必须自己清理,否则就有可能引入内存泄漏。</target>
        </trans-unit>
        <trans-unit id="c171fe9b3aaa70bdfa6d6276dcd49d45e27676fa" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;transition: 0s&lt;/code&gt;, &lt;code&gt;ngAnimate&lt;/code&gt; will ignore the existing transition styles, and not try to animate them (Javascript animations will still execute, though). This can be used to prevent &lt;a href=&quot;animations#preventing-collisions-with-existing-animations-and-third-party-libraries.html&quot;&gt;issues with existing animations interfering with &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通过设置 &lt;code&gt;transition: 0s&lt;/code&gt; ， &lt;code&gt;ngAnimate&lt;/code&gt; 将忽略现有的过渡样式，而不尝试对其进行动画处理（尽管Javascript动画仍将执行）。这可以用来防止&lt;a href=&quot;animations#preventing-collisions-with-existing-animations-and-third-party-libraries.html&quot;&gt;现有动画干扰 &lt;code&gt;ngAnimate&lt;/code&gt; 的问题&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="763c7e134cede96adf42badc199f39b157262036" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;getterSetter&lt;/code&gt; property to true you are telling ngModel that the &lt;code&gt;ngModel&lt;/code&gt; expression on the scope refers to a &quot;getter/setter&quot; function rather than the value itself.</source>
          <target state="translated">通过将 &lt;code&gt;getterSetter&lt;/code&gt; 属性设置为true，您将告诉ngModel 范围内的 &lt;code&gt;ngModel&lt;/code&gt; 表达式引用的是&amp;ldquo; getter / setter&amp;rdquo;函数，而不是值本身。</target>
        </trans-unit>
        <trans-unit id="d37d16187a12d14dca29958bee98c95dd2595b03" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;!important&lt;/code&gt;, the show and hide behavior will work as expected despite any clash between CSS selector specificity (when &lt;code&gt;!important&lt;/code&gt; isn't used with any conflicting styles). If a developer chooses to override the styling to change how to hide an element then it is just a matter of using &lt;code&gt;!important&lt;/code&gt; in their own CSS code.</source>
          <target state="translated">通过使用 &lt;code&gt;!important&lt;/code&gt; ，尽管CSS选择器特异性之间存在任何冲突（当 &lt;code&gt;!important&lt;/code&gt; 不与任何冲突的样式一起使用时），显示和隐藏行为仍将按预期工作。如果开发人员选择覆盖样式以更改隐藏元素的方式，则只需在自己的CSS代码中使用 &lt;code&gt;!important&lt;/code&gt; 即可。</target>
        </trans-unit>
        <trans-unit id="ab7870cd0f2f0c17b236bdc86d6ea708504a5cb8" translate="yes" xml:space="preserve">
          <source>CSS + JS Animations Together</source>
          <target state="translated">CSS+JS动画一起用</target>
        </trans-unit>
        <trans-unit id="43bd3c1e45e7e9c523e66a4eeb74db09cdd9706e" translate="yes" xml:space="preserve">
          <source>CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out what CSS classes differ between the starting element and the destination element. These different CSS classes will be added/removed on the anchor element and a transition will be applied (the transition that is provided in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since the cloned element is placed inside of root element which is likely close to the body element).</source>
          <target state="translated">CSS Anchoring依赖于过渡和关键帧,内部代码足够智能,可以找出起始元素和目标元素之间有哪些CSS类不同。这些不同的CSS类将被添加/删除在锚元素上,并应用一个过渡(锚类中提供的过渡)。长话短说,ngAnimate会想出要添加和删除哪些类,这将使元素的过渡尽可能的平滑和自动。一定要使用简单的CSS类,不依赖DOM嵌套结构,这样锚元素看起来就和起始元素一样了(因为克隆的元素放在根元素里面,而根元素很可能靠近主体元素)。</target>
        </trans-unit>
        <trans-unit id="0f55d5c092d0ff662c046991d7571e5ba312c6ba" translate="yes" xml:space="preserve">
          <source>CSS Class-based Animations</source>
          <target state="translated">基于CSS类的动画</target>
        </trans-unit>
        <trans-unit id="bbe967875f19b43ebcf8ae9cc8592cc142b0fc64" translate="yes" xml:space="preserve">
          <source>CSS Staggering Animations</source>
          <target state="translated">CSS交错动画</target>
        </trans-unit>
        <trans-unit id="21444efa9494abd66434381371c755d1d31f0244" translate="yes" xml:space="preserve">
          <source>CSS classes</source>
          <target state="translated">CSS类</target>
        </trans-unit>
        <trans-unit id="4785c5decce46adb9da8916ce47b654ac25c1fa0" translate="yes" xml:space="preserve">
          <source>CSS-based Animations</source>
          <target state="translated">基于CSS的动画</target>
        </trans-unit>
        <trans-unit id="b0a851e9310143c493ee5626ebda91ac22925d52" translate="yes" xml:space="preserve">
          <source>CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML and CSS code we can create an animation that will be picked up by AngularJS when an underlying directive performs an operation.</source>
          <target state="translated">ngAnimate基于CSS的动画是独一无二的,因为它们完全不需要JavaScript代码。通过使用我们在HTML和CSS代码之间引用的CSS类,我们可以创建一个动画,当一个底层指令执行操作时,AngularJS将接收到这个动画。</target>
        </trans-unit>
        <trans-unit id="f2cd38d164b13f9a7249cbfb4a4b5ef9fc8b5c5d" translate="yes" xml:space="preserve">
          <source>Cache name of the template.</source>
          <target state="translated">模板的缓存名称。</target>
        </trans-unit>
        <trans-unit id="4841830df2aa5c0a9fdc5cf539d835c1b65395ec" translate="yes" xml:space="preserve">
          <source>Cache object identified by the cacheId or undefined if no such cache.</source>
          <target state="translated">由cacheId标识的缓存对象,如果没有缓存,则未定义。</target>
        </trans-unit>
        <trans-unit id="322c7ca089e85e4cdaa343c933e86bd05885e89f" translate="yes" xml:space="preserve">
          <source>Cached responses are returned asynchronously, in the same way as responses from the server.</source>
          <target state="translated">缓存的响应是异步返回的,与服务器的响应方式相同。</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="78d83114a9f21cb004c811c700f1ebf657586754" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;compiler&quot;&gt;compile&lt;/a&gt; the element into an executable, bi-directionally bound application.</source>
          <target state="translated">呼叫&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;到&lt;a href=&quot;compiler&quot;&gt;编译&lt;/a&gt;元素为可执行文件，双向绑定的应用程序。</target>
        </trans-unit>
        <trans-unit id="b162081de98877f8d47457aad07d35f7c7120470" translate="yes" xml:space="preserve">
          <source>Call this method as a setter to enable/disable eager instantiation of the &lt;a href=&quot;../service/%24route&quot;&gt;$route&lt;/a&gt; service upon application bootstrap. You can also call it as a getter (i.e. without any arguments) to get the current value of the &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag.</source>
          <target state="translated">将此方法作为设置器调用，以在应用程序引导时启用/禁用&lt;a href=&quot;../service/%24route&quot;&gt;$ route&lt;/a&gt;服务的即时实例化。您也可以将其称为getter（即不带任何参数）以获取 &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; 标志的当前值。</target>
        </trans-unit>
        <trans-unit id="e14131abb69b67447b042d7e96d77593367604f4" translate="yes" xml:space="preserve">
          <source>Call this method to determine if this scope has been explicitly suspended. It will not tell you whether an ancestor has been suspended. To determine if this scope will be excluded from a digest triggered at the $rootScope, for example, you must check all its ancestors:</source>
          <target state="translated">调用此方法来确定此作用域是否已被显式暂停。它不会告诉你一个祖先是否已经被暂停。例如,要确定这个作用域是否会被从$rootScope触发的摘要中排除,您必须检查它的所有祖先。</target>
        </trans-unit>
        <trans-unit id="f35d12cb9238244359750cfa0d0a76f474d059bf" translate="yes" xml:space="preserve">
          <source>Call this method to enable / disable the strict component bindings check. If enabled, the compiler will enforce that all scope / controller bindings of a &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;component&lt;/a&gt; that are not set as optional with &lt;code&gt;?&lt;/code&gt;, must be provided when the directive is instantiated. If not provided, the compiler will throw the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$compile:missingattr error&lt;/a&gt;.</source>
          <target state="translated">调用此方法以启用/禁用严格组件绑定检查。如果启用，编译器将强制未将 &lt;code&gt;?&lt;/code&gt; 设置为可选的&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;指令&lt;/a&gt; / &lt;a href=&quot;%24compileprovider#component.html&quot;&gt;组件的&lt;/a&gt;所有作用域/控制器绑定。实例化指令时必须提供。如果未提供，则编译器将抛出&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/provider/error/%24compile/missingattr&quot;&gt;$ compile：missingattr错误&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cc4eaaf9dbe4e310951ac61cd764aaa491556cb9" translate="yes" xml:space="preserve">
          <source>Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope</source>
          <target state="translated">调用此方法来启用/禁用编译器中的各种调试运行时信息,如在DOM元素上添加绑定信息和对当前作用域的引用。如果启用,编译器将在已经绑定到作用域的DOM元素上添加以下信息。</target>
        </trans-unit>
        <trans-unit id="1440403750e2ed45b458c5ac229f85fb683fa150" translate="yes" xml:space="preserve">
          <source>Callback called whenever the return value of any expression in &lt;code&gt;watchExpressions&lt;/code&gt; changes The &lt;code&gt;newValues&lt;/code&gt; array contains the current values of the &lt;code&gt;watchExpressions&lt;/code&gt;, with the indexes matching those of &lt;code&gt;watchExpression&lt;/code&gt; and the &lt;code&gt;oldValues&lt;/code&gt; array contains the previous values of the &lt;code&gt;watchExpressions&lt;/code&gt;, with the indexes matching those of &lt;code&gt;watchExpression&lt;/code&gt; The &lt;code&gt;scope&lt;/code&gt; refers to the current scope.</source>
          <target state="translated">回调调用每当在任何表达式中的返回值 &lt;code&gt;watchExpressions&lt;/code&gt; 变化 &lt;code&gt;newValues&lt;/code&gt; 数组包含的当前值 &lt;code&gt;watchExpressions&lt;/code&gt; ，具有匹配那些的索引 &lt;code&gt;watchExpression&lt;/code&gt; 和 &lt;code&gt;oldValues&lt;/code&gt; 数组包含的先前值 &lt;code&gt;watchExpressions&lt;/code&gt; ，具有匹配那些的索引 &lt;code&gt;watchExpression&lt;/code&gt; 的 &lt;code&gt;scope&lt;/code&gt; 是指当前作用域。</target>
        </trans-unit>
        <trans-unit id="d70eaf5bd89066c1b42f522abbd8dee8568dd708" translate="yes" xml:space="preserve">
          <source>Callback called whenever the value of &lt;code&gt;watchExpression&lt;/code&gt; changes.</source>
          <target state="translated">当 &lt;code&gt;watchExpression&lt;/code&gt; 的值更改时调用回调。</target>
        </trans-unit>
        <trans-unit id="2c689cdead0e90f013714cd4077f4ea01b650f8c" translate="yes" xml:space="preserve">
          <source>Callbacks and Promises</source>
          <target state="translated">回调和承诺</target>
        </trans-unit>
        <trans-unit id="6f75995f3b255bdefeacf9e236456a83f540b1a9" translate="yes" xml:space="preserve">
          <source>Called when the view needs to be updated. It is expected that the user of the ng-model directive will implement this method.</source>
          <target state="translated">当视图需要更新时调用。预计ng-model指令的用户会实现这个方法。</target>
        </trans-unit>
        <trans-unit id="63675a1d70484b5f1fc1c3405a8ded5f332fcc61" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;$digest()&lt;/code&gt; directly on a descendant of a suspended scope will still run the watchers for that scope and its descendants. When digesting we only check whether the current scope is locally suspended, rather than checking whether it has a suspended ancestor.</source>
          <target state="translated">直接在挂起的作用域的后代上调用 &lt;code&gt;$digest()&lt;/code&gt; 仍将运行该作用域及其后代的观察程序。进行摘要时，我们仅检查当前范围是否在本地暂停，而不检查其是否具有暂停的祖先。</target>
        </trans-unit>
        <trans-unit id="49fc3e72976c3ca65e702be767e99bb84f601ccf" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;$resume()&lt;/code&gt; on a scope that has a suspended ancestor will not cause the scope to be included in future digests until all its ancestors have been resumed.</source>
          <target state="translated">在具有暂停的祖先的作用域上调用 &lt;code&gt;$resume()&lt;/code&gt; 不会导致将该作用域包括在将来的摘要中，直到恢复了其所有祖先。</target>
        </trans-unit>
        <trans-unit id="20c938d13e09b0f80b5576ad14ce6af88219cf0d" translate="yes" xml:space="preserve">
          <source>Calling the linking function returns the element of the template. It is either the original element passed in, or the clone of the element if the &lt;code&gt;cloneAttachFn&lt;/code&gt; is provided.</source>
          <target state="translated">调用链接函数将返回模板的元素。它是传入的原始元素，或者是提供了 &lt;code&gt;cloneAttachFn&lt;/code&gt; 的元素的克隆。</target>
        </trans-unit>
        <trans-unit id="e6781591ce11dba9f9d2938ebe354ec4a507a51c" translate="yes" xml:space="preserve">
          <source>Calling these methods invoke &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; with the specified http method, destination and parameters. When the data is returned from the server then the object is an instance of the resource class. The actions &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; are available on it as methods with the &lt;code&gt;$&lt;/code&gt; prefix. This allows you to easily perform CRUD operations (create, read, update, delete) on server-side data like this:</source>
          <target state="translated">调用这些方法将使用指定的http方法，目标和参数来调用&lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;。从服务器返回数据时，该对象是资源类的实例。这些动作 &lt;code&gt;save&lt;/code&gt; ， &lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;delete&lt;/code&gt; 可用它作为与方法 &lt;code&gt;$&lt;/code&gt; 前缀。这使您可以轻松地对服务器端数据执行CRUD操作（创建，读取，更新，删除），如下所示：</target>
        </trans-unit>
        <trans-unit id="31893b7919db92062b0a54add3dc3c1b08b461ce" translate="yes" xml:space="preserve">
          <source>Calling these methods invokes &lt;code&gt;$http&lt;/code&gt; on the &lt;code&gt;url&lt;/code&gt; template with the given HTTP &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;headers&lt;/code&gt;.</source>
          <target state="translated">调用这些方法将使用给定的HTTP &lt;code&gt;method&lt;/code&gt; ， &lt;code&gt;params&lt;/code&gt; 和 &lt;code&gt;headers&lt;/code&gt; 在 &lt;code&gt;url&lt;/code&gt; 模板上调用 &lt;code&gt;$http&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91a3b32b3f576fa1a25afa0ab7e2394916694e74" translate="yes" xml:space="preserve">
          <source>Calling this function with false disables the compilation of directives on comments for the whole application. This results in a compilation performance gain, as the compiler doesn't have to check comments when looking for directives. This should however only be used if you are sure that no comment directives are used in the application (including any 3rd party directives).</source>
          <target state="translated">用false调用这个函数会禁用整个应用程序的注释指令的编译。这将导致编译性能的提高,因为编译器在查找指令时不需要检查注释。但是,只有当你确定应用程序中没有使用注释指令(包括任何第三方指令)时,才可以使用这个函数。</target>
        </trans-unit>
        <trans-unit id="fbbb4b5eaa44b0b5551e31e4b0525bc03141436e" translate="yes" xml:space="preserve">
          <source>Calling this function with false disables the compilation of directives on element classes for the whole application. This results in a compilation performance gain, as the compiler doesn't have to check element classes when looking for directives. This should however only be used if you are sure that no class directives are used in the application (including any 3rd party directives).</source>
          <target state="translated">用false调用这个函数会禁用整个应用程序的元素类指令的编译。这将导致编译性能的提高,因为编译器在寻找指令时不必检查元素类。但是,只有当你确定应用程序中没有使用类指令(包括任何第三方指令)时,才可以使用这个函数。</target>
        </trans-unit>
        <trans-unit id="1a4aefee23fa0c2ddc499c67e421bc097332c1e9" translate="yes" xml:space="preserve">
          <source>Can I disable SCE completely?</source>
          <target state="translated">我可以完全禁用SCE吗?</target>
        </trans-unit>
        <trans-unit id="38a4b640b107f7de6465c3ff929cb568050eaed3" translate="yes" xml:space="preserve">
          <source>Can be one of:</source>
          <target state="translated">可以是一个。</target>
        </trans-unit>
        <trans-unit id="3816f23c92cddb7d9eb035e560daee147a023eaf" translate="yes" xml:space="preserve">
          <source>Cancel an update and reset the input element's value to prevent an update to the &lt;code&gt;$modelValue&lt;/code&gt;, which may be caused by a pending debounced event or because the input is waiting for some future event.</source>
          <target state="translated">取消更新并重置输入元素的值，以防止更新 &lt;code&gt;$modelValue&lt;/code&gt; ，这可能是由于未决的反跳事件或输入正在等待某个将来的事件引起的。</target>
        </trans-unit>
        <trans-unit id="da189d192d9888fffe6e40083bb8393ace97b3e9" translate="yes" xml:space="preserve">
          <source>Cancelling requests</source>
          <target state="translated">撤销请求</target>
        </trans-unit>
        <trans-unit id="838a9d672c095a05992dfe53058bf7ccd9ff411d" translate="yes" xml:space="preserve">
          <source>Cancels a task associated with the &lt;code&gt;promise&lt;/code&gt;.</source>
          <target state="translated">取消与 &lt;code&gt;promise&lt;/code&gt; 相关的任务。</target>
        </trans-unit>
        <trans-unit id="5fc80b14e6aaae3cc1ada473f23aa327b69f4333" translate="yes" xml:space="preserve">
          <source>Cancels a task associated with the &lt;code&gt;promise&lt;/code&gt;. As a result of this, the promise will be resolved with a rejection.</source>
          <target state="translated">取消与 &lt;code&gt;promise&lt;/code&gt; 相关的任务。结果，诺言将被拒绝解决。</target>
        </trans-unit>
        <trans-unit id="edecf4dc2de919262a28ba9a2f7840added3c399" translate="yes" xml:space="preserve">
          <source>Cancels the provided animation and applies the end state of the animation. Note that this does not cancel the underlying operation, e.g. the setting of classes or adding the element to the DOM.</source>
          <target state="translated">取消提供的动画并应用动画的结束状态。请注意,这不会取消底层的操作,例如类的设置或将元素添加到DOM中。</target>
        </trans-unit>
        <trans-unit id="43a94b1cd16e828fd25f079b0c6f119d1c492ce3" translate="yes" xml:space="preserve">
          <source>Case Studies</source>
          <target state="translated">案例研究</target>
        </trans-unit>
        <trans-unit id="f2e31c0705378a0ca912d442b249a5361708204c" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;$route&lt;/code&gt; service to reload the current route even if &lt;a href=&quot;../../ng/service/%24location&quot;&gt;$location&lt;/a&gt; hasn't changed.</source>
          <target state="translated">原因 &lt;code&gt;$route&lt;/code&gt; 服务重新加载，即使当前路径&lt;a href=&quot;../../ng/service/%24location&quot;&gt;$位置&lt;/a&gt;并没有改变。</target>
        </trans-unit>
        <trans-unit id="60afdcebb41362038962725243c0aed09552fc50" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;$route&lt;/code&gt; service to update the current URL, replacing current route parameters with those specified in &lt;code&gt;newParams&lt;/code&gt;. Provided property names that match the route's path segment definitions will be interpolated into the location's path, while remaining properties will be treated as query params.</source>
          <target state="translated">使 &lt;code&gt;$route&lt;/code&gt; 服务更新当前URL，用 &lt;code&gt;newParams&lt;/code&gt; 中指定的参数替换当前路由参数。所提供的与路线的路径段定义匹配的属性名称将被插入到位置的路径中，而其余属性将被视为查询参数。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="72d71a668e56adbe90d2fa9fb6ee8972c0b66e4a" translate="yes" xml:space="preserve">
          <source>Chaining promises</source>
          <target state="translated">链式承诺</target>
        </trans-unit>
        <trans-unit id="58e493046d8fd6e3081b6c746a33e60405b9effa" translate="yes" xml:space="preserve">
          <source>Change path when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">使用参数调用时更改路径并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dca2424dc0deb99a58c19e534f338127124d9aab" translate="yes" xml:space="preserve">
          <source>Change path, search and hash, when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">当使用参数调用时，更改路径，搜索和哈希，并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da91b66135a4f77c9cc08ce3eaa7130f2a6d2b72" translate="yes" xml:space="preserve">
          <source>Change search part when called with parameter and return &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">使用参数调用时更改搜索部分，并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c02c34ae53310357e58911c775459e9c3de3ba96" translate="yes" xml:space="preserve">
          <source>Change the URL.</source>
          <target state="translated">更改URL。</target>
        </trans-unit>
        <trans-unit id="927385537fbe1015a617be665c6693f672fb3a52" translate="yes" xml:space="preserve">
          <source>Change the history state object when called with one parameter and return &lt;code&gt;$location&lt;/code&gt;. The state object is later passed to &lt;code&gt;pushState&lt;/code&gt; or &lt;code&gt;replaceState&lt;/code&gt;.</source>
          <target state="translated">使用一个参数调用时更改历史状态对象，并返回 &lt;code&gt;$location&lt;/code&gt; 。状态对象随后传递给 &lt;code&gt;pushState&lt;/code&gt; 或 &lt;code&gt;replaceState&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fa9f4c8eaa824574dae37f62154980d60ca28a4" translate="yes" xml:space="preserve">
          <source>Change the validity state of the form, and notify the parent form (if any).</source>
          <target state="translated">改变表格的有效性状态,并通知上级表格(如有)。</target>
        </trans-unit>
        <trans-unit id="667e7970ed20e88c4e980d20c8d0629557dd7400" translate="yes" xml:space="preserve">
          <source>Change the validity state, and notify the form.</source>
          <target state="translated">改变有效期状态,并通知表格。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="1403f945a22ede84f416992deee9c6911dc2c57f" translate="yes" xml:space="preserve">
          <source>Changes the address bar.</source>
          <target state="translated">更改地址栏。</target>
        </trans-unit>
        <trans-unit id="318dfbf2d67fa7b4fded5ca142121201dcf2c9ef" translate="yes" xml:space="preserve">
          <source>Changes the address in the browser's address bar.</source>
          <target state="translated">更改浏览器地址栏中的地址。</target>
        </trans-unit>
        <trans-unit id="5b764ac2b679596bebc6492993329bbb0d3fd0d8" translate="yes" xml:space="preserve">
          <source>Changes the hash fragment when called with a parameter and returns &lt;code&gt;$location&lt;/code&gt;.</source>
          <target state="translated">使用参数调用时更改哈希片段，并返回 &lt;code&gt;$location&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0bb203b42d991b17fac172d8578a01b132de763" translate="yes" xml:space="preserve">
          <source>Changes to the model inside &lt;code&gt;$doCheck&lt;/code&gt; will trigger new turns of the digest loop, which will cause the changes to be propagated throughout the application. Angular does not allow the &lt;code&gt;ngDoCheck&lt;/code&gt; hook to trigger a change outside of the component. It will either throw an error or do nothing depending upon the state of &lt;code&gt;enableProdMode()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$doCheck&lt;/code&gt; 对模型的更改将触发摘要循环的新变化，这将导致更改在整个应用程序中传播。Angular不允许 &lt;code&gt;ngDoCheck&lt;/code&gt; 挂钩触发组件外部的更改。根据 &lt;code&gt;enableProdMode()&lt;/code&gt; 的状态，它将抛出错误或不执行任何操作。</target>
        </trans-unit>
        <trans-unit id="7409e3021a2ae10433e51958a73352a869dfdffa" translate="yes" xml:space="preserve">
          <source>Changing parameters dynamically</source>
          <target state="translated">动态改变参数</target>
        </trans-unit>
        <trans-unit id="5e785584860674d65fa52977c48c6a2d8ab7530e" translate="yes" xml:space="preserve">
          <source>ChildRouter</source>
          <target state="translated">ChildRouter</target>
        </trans-unit>
        <trans-unit id="395f9525e05660c43c121056b86241cf54b50bdc" translate="yes" xml:space="preserve">
          <source>Choose: &lt;code&gt;angular-[version].js&lt;/code&gt; for a human-readable file, suitable for development and debugging.</source>
          <target state="translated">选择： &lt;code&gt;angular-[version].js&lt;/code&gt; 以获取易于阅读的文件，适合开发和调试。</target>
        </trans-unit>
        <trans-unit id="2d01471977547f403988a18fa90d7812ed92cad5" translate="yes" xml:space="preserve">
          <source>Choose: &lt;code&gt;angular-[version].min.js&lt;/code&gt; for a compressed and obfuscated file, suitable for use in production.</source>
          <target state="translated">选择： &lt;code&gt;angular-[version].min.js&lt;/code&gt; 以获取压缩和混淆的文件，适用于生产。</target>
        </trans-unit>
        <trans-unit id="e0fa5d9e8c5bdec155184c067e6fec7c8bb15af2" translate="yes" xml:space="preserve">
          <source>Choosing between ngRepeat and ngOptions</source>
          <target state="translated">在 ngRepeat 和 ngOptions 之间进行选择。</target>
        </trans-unit>
        <trans-unit id="6f950f66f6524d1d6d701a16679a2f3ae7d90d78" translate="yes" xml:space="preserve">
          <source>Chrome Accessibility Developer Tools</source>
          <target state="translated">Chrome 无障碍开发者工具</target>
        </trans-unit>
        <trans-unit id="71c207df916db009b3057f6560a48a47fcc25310" translate="yes" xml:space="preserve">
          <source>Class actions return an empty instance (with the additional properties listed below). Instance actions return a promise for the operation.</source>
          <target state="translated">类操作返回一个空的实例(具有下面列出的附加属性)。实例动作返回操作的承诺。</target>
        </trans-unit>
        <trans-unit id="6ec0ce07d9481bf4db4c020b148a12c1b4c3112a" translate="yes" xml:space="preserve">
          <source>Class and ngClass animation hooks</source>
          <target state="translated">类和ng类动画钩子</target>
        </trans-unit>
        <trans-unit id="2a0863a04b4ee272c83f2a94dd23442cc0eb6c51" translate="yes" xml:space="preserve">
          <source>Class-based animations (animations that are triggered via &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and some other directives) have a slightly different naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added and removed.</source>
          <target state="translated">基于类的动画（通过 &lt;code&gt;ngClass&lt;/code&gt; ， &lt;code&gt;ngShow&lt;/code&gt; ， &lt;code&gt;ngHide&lt;/code&gt; 和其他一些指令触发的动画）的命名约定略有不同。基于类的动画足够基本，可以在要添加和删除的类上引用标准过渡或关键帧。</target>
        </trans-unit>
        <trans-unit id="9191759140319ff20e9dd16485bf237db76b0c98" translate="yes" xml:space="preserve">
          <source>Clears the cache object of any entries.</source>
          <target state="translated">清除缓存对象的任何条目。</target>
        </trans-unit>
        <trans-unit id="e515212a1c11de2835082ada05e6ec961879403e" translate="yes" xml:space="preserve">
          <source>Click here &lt;a href=&quot;../../ng/service/%24animate&quot;&gt;to learn more about animations with &lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">单击此处&lt;a href=&quot;../../ng/service/%24animate&quot;&gt;以了解有关 &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="f4fed55c7291e2ae4022dc03f74858153d78fbbe" translate="yes" xml:space="preserve">
          <source>Click here &lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;to read the documentation for $animateCss&lt;/a&gt;.</source>
          <target state="translated">单击此处&lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;阅读$ animateCss的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32484b33993cf9537f02013fd9f85c2ec6cd936f" translate="yes" xml:space="preserve">
          <source>Clicking on the &quot;show&quot; button will open the dialog. The dialog will have a title, which is data bound to &lt;code&gt;username&lt;/code&gt;, and it will also have a body which we would like to transclude into the dialog.</source>
          <target state="translated">单击&amp;ldquo;显示&amp;rdquo;按钮将打开对话框。对话框将具有标题，该标题是绑定到 &lt;code&gt;username&lt;/code&gt; 的数据，并且还将具有我们要包含在对话框中的主体。</target>
        </trans-unit>
        <trans-unit id="c724973f7e774a94420a9f7d99e10433c417d579" translate="yes" xml:space="preserve">
          <source>Clicks on a link in the page.</source>
          <target state="translated">点击页面中的链接。</target>
        </trans-unit>
        <trans-unit id="730424b9edeae148b8ff6d50d8ca98ceee4c119c" translate="yes" xml:space="preserve">
          <source>Clicks on a link.</source>
          <target state="translated">点击一个链接。</target>
        </trans-unit>
        <trans-unit id="9ab2e40fdeb36ffa03fcf8447b001724a990908a" translate="yes" xml:space="preserve">
          <source>Clicks the back or forward button (or clicks a History link).</source>
          <target state="translated">点击后退或前进按钮(或点击历史链接)。</target>
        </trans-unit>
        <trans-unit id="74d1f7b3edab4ca6a434b8e934d29da720f08e4a" translate="yes" xml:space="preserve">
          <source>Clicks the back or forward button in the browser (or clicks a History link).</source>
          <target state="translated">在浏览器中点击后退或前进按钮(或点击历史记录链接)。</target>
        </trans-unit>
        <trans-unit id="bbfa773e5a63a5ea58c9b6207e608ca0120e592a" translate="yes" xml:space="preserve">
          <source>Close</source>
          <target state="translated">Close</target>
        </trans-unit>
        <trans-unit id="09ef3902bc825a92dc2ab7a4572699d9bb63ce7f" translate="yes" xml:space="preserve">
          <source>Code licensed under &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;The MIT License&lt;/a&gt;. Documentation licensed under &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;.</source>
          <target state="translated">根据&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/LICENSE&quot;&gt;MIT许可许可的&lt;/a&gt;代码。根据&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;许可的文档。</target>
        </trans-unit>
        <trans-unit id="2dfc49fb8ca872a4cafc6a47501eb288da5ef7b5" translate="yes" xml:space="preserve">
          <source>CoffeeScript Tutorial</source>
          <target state="translated">咖啡脚本教程</target>
        </trans-unit>
        <trans-unit id="c548b316d570083f3666806fff6f562e7eab1bab" translate="yes" xml:space="preserve">
          <source>Combines multiple promises into a single promise that is resolved when all of the input promises are resolved.</source>
          <target state="translated">将多个承诺组合成一个承诺,当所有的输入承诺都被解析时,这个承诺就会被解析。</target>
        </trans-unit>
        <trans-unit id="fd5f82d40e47be64b2bc3a51357dc831a7c9ccc1" translate="yes" xml:space="preserve">
          <source>Combining directives with different scope defintions</source>
          <target state="translated">结合具有不同范围定义的指令</target>
        </trans-unit>
        <trans-unit id="3030caa6c289f4c08d71dfe3a1f33564ff7465d0" translate="yes" xml:space="preserve">
          <source>Commit a pending update to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">提交对 &lt;code&gt;$modelValue&lt;/code&gt; 的挂起更新。</target>
        </trans-unit>
        <trans-unit id="a521630b4593fb9bacca2130761b0f7eae72e200" translate="yes" xml:space="preserve">
          <source>Commit all form controls pending updates to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">提交所有表单控件，以等待对 &lt;code&gt;$modelValue&lt;/code&gt; 更新。</target>
        </trans-unit>
        <trans-unit id="7dcd19b6ea69063f828f5ff860efae73d6849a4b" translate="yes" xml:space="preserve">
          <source>Common Accessibility Patterns</source>
          <target state="translated">常见的无障碍模式</target>
        </trans-unit>
        <trans-unit id="dcd05a800dce1c0a95f1b07835a587a1fa065ad4" translate="yes" xml:space="preserve">
          <source>Community Resources</source>
          <target state="translated">社区资源</target>
        </trans-unit>
        <trans-unit id="f087c397aade898e8ebf5017a565387063b4caf7" translate="yes" xml:space="preserve">
          <source>Comparator which is used in determining if values retrieved using &lt;code&gt;expression&lt;/code&gt; (when it is not a function) should be considered a match based on the expected value (from the filter expression) and actual value (from the object in the array).</source>
          <target state="translated">基于期望值（来自过滤器表达式）和实际值（来自数组中的对象），用于确定是否使用 &lt;code&gt;expression&lt;/code&gt; （不是函数）检索的值的比较器应视为匹配项。</target>
        </trans-unit>
        <trans-unit id="666fd1f458daf70bc53cddeb4eeb774d87e18c31" translate="yes" xml:space="preserve">
          <source>Compare for object equality using &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; instead of comparing for reference equality.</source>
          <target state="translated">使用&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; &lt;/a&gt;比较对象相等性，而不是比较引用相等性。</target>
        </trans-unit>
        <trans-unit id="3877d9f9528e5e589937b6c5e2e2222e153bc4a4" translate="yes" xml:space="preserve">
          <source>Comparing $location to window.location</source>
          <target state="translated">将$location与window.location进行比较</target>
        </trans-unit>
        <trans-unit id="e9bfd3462dbe8e77bcf76ca7642f0a152f0c0338" translate="yes" xml:space="preserve">
          <source>Comparison between Directive definition and Component definition</source>
          <target state="translated">指令定义和组件定义的比较</target>
        </trans-unit>
        <trans-unit id="53cb52234319d0132a4da6be7bbd0b5b04aa75f1" translate="yes" xml:space="preserve">
          <source>Comparison of the two approaches</source>
          <target state="translated">两种方法的比较</target>
        </trans-unit>
        <trans-unit id="70d88717d38b547780477523d9cbf84942fc4774" translate="yes" xml:space="preserve">
          <source>Comparison with life-cycle hooks in the new Angular</source>
          <target state="translated">与新Angular中的生命周期钩子的比较</target>
        </trans-unit>
        <trans-unit id="17ab47599110d104d7ae0defacdd1ff429aa3f51" translate="yes" xml:space="preserve">
          <source>Compile the element, but restrict the maximum priority, so that any already compiled directives (including the &lt;code&gt;addOptions&lt;/code&gt; directive) are not compiled again.</source>
          <target state="translated">编译元素，但限制最大优先级，以使不再编译任何已经编译的指令（包括 &lt;code&gt;addOptions&lt;/code&gt; 指令）。</target>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes" xml:space="preserve">
          <source>Compiler</source>
          <target state="translated">Compiler</target>
        </trans-unit>
        <trans-unit id="1782e5208f00a046cef2996ed8671fed74f08a08" translate="yes" xml:space="preserve">
          <source>Compiler is an AngularJS service which traverses the DOM looking for attributes. The compilation process happens in two phases.</source>
          <target state="translated">编译器是一个AngularJS服务,它遍历DOM寻找属性。编译过程分两个阶段进行。</target>
        </trans-unit>
        <trans-unit id="fa46964e2997513f5edb8da69c2a884d9e0d6812" translate="yes" xml:space="preserve">
          <source>Compiles a string with markup into an interpolation function. This service is used by the HTML &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt; service for data binding. See &lt;a href=&quot;../provider/%24interpolateprovider&quot;&gt;$interpolateProvider&lt;/a&gt; for configuring the interpolation markup.</source>
          <target state="translated">将带有标记的字符串编译为插值函数。HTML &lt;a href=&quot;%24compile&quot;&gt;$ compile&lt;/a&gt;服务使用此服务进行数据绑定。有关配置插值标记，请参见&lt;a href=&quot;../provider/%24interpolateprovider&quot;&gt;$ interpolateProvider&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eca1135b84c5a41b83e29f018e5f8bc1af9b4725" translate="yes" xml:space="preserve">
          <source>Compiles a string with markup into an interpolation function. This service is used by the HTML &lt;a href=&quot;service/%24compile&quot;&gt;$compile&lt;/a&gt; service for data binding. See &lt;a href=&quot;provider/%24interpolateprovider&quot;&gt;$interpolateProvider&lt;/a&gt; for configuring the interpolation markup.</source>
          <target state="translated">将带有标记的字符串编译为插值函数。HTML &lt;a href=&quot;service/%24compile&quot;&gt;$ compile&lt;/a&gt;服务使用此服务进行数据绑定。有关配置插值标记，请参见&lt;a href=&quot;provider/%24interpolateprovider&quot;&gt;$ interpolateProvider&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="35e0dd7e6479d72ea347ebf52f30653b69adb513" translate="yes" xml:space="preserve">
          <source>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; and the template together.</source>
          <target state="translated">将HTML字符串或DOM编译为模板，并生成模板函数，然后可将其用于将&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;和模板链接在一起。</target>
        </trans-unit>
        <trans-unit id="443f4ce80e9a994956ec0834e6c655a3bb098864" translate="yes" xml:space="preserve">
          <source>Compiles an HTML string or DOM into a template and produces a template function, which can then be used to link &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; and the template together.</source>
          <target state="translated">将HTML字符串或DOM编译为模板，并生成模板函数，然后可将其用于将&lt;a href=&quot;type/%24rootscope.scope&quot;&gt; &lt;code&gt;scope&lt;/code&gt; &lt;/a&gt;和模板链接在一起。</target>
        </trans-unit>
        <trans-unit id="952c4e08cf22564bbdb9648e98a02a3602d26f59" translate="yes" xml:space="preserve">
          <source>Complementary Libraries</source>
          <target state="translated">补充图书馆</target>
        </trans-unit>
        <trans-unit id="1660cae935161f6c4359132ab0d198129c40fd5d" translate="yes" xml:space="preserve">
          <source>Complete list of shortcut methods:</source>
          <target state="translated">完整的快捷方法列表。</target>
        </trans-unit>
        <trans-unit id="ddddba8622d54a1019f55ac5d840e4b03ae004df" translate="yes" xml:space="preserve">
          <source>Completely Replace the $delegate</source>
          <target state="translated">完全替换$delegate</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
