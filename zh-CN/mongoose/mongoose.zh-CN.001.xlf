<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="mongoose">
    <body>
      <group id="mongoose">
        <trans-unit id="396b1e49d9a5a34ac69ff95ceb5716e20dbdc354" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2010 LearnBoost</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b0a9d7d0780349feffd1e09261dd5071a5af5f" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Aggregate&amp;raquo;</source>
          <target state="translated">&amp;laquo;Aggregate&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="895ed7f797860285a4b736d2d8eee531172fe8c2" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Aggregate&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641f4ead86ba0f14d1f64d67822bd9613e689bc0" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Aggregate,Model&amp;raquo; if model is passed, will return &lt;code&gt;this&lt;/code&gt;, otherwise will return the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4eca8faf02647ad1bb0049717765e0b41cba2a2" translate="yes" xml:space="preserve">
          <source>&amp;laquo;AggregationCursor&amp;raquo;</source>
          <target state="translated">&amp;laquo;AggregationCursor&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="b5f1661348eaf333a29c6fd9b50689e139b193bc" translate="yes" xml:space="preserve">
          <source>&amp;laquo;AggregationCursor&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bf20eb5be1da0db28679b6947ea6874d0d5acc" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Any&amp;raquo; the option's value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb324fb6e4243835582239ff20047b602c982dd" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Array&amp;raquo;</source>
          <target state="translated">&amp;laquo;Array&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="a2330b1ce733030410b3d0a1a73542736416090f" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Array&amp;raquo; an array of strings representing populated paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0964c5007b172ed43e035c1bc7b6f7d6c249d1a9" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Array&amp;raquo; list of indexes defined in the schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4be4222069154a358e068df3dd61cbbeeea4ee" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Array&amp;raquo; the values that were added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efb155d97c37101eb7c3fb2c3c62020cc16de84" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Array&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f5e87c7859fcfa8a23eaf69709dbd0ad2c98d0" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Array,ObjectId,Number,Buffer,String,undefined&amp;raquo;</source>
          <target state="translated">&amp;laquo;Array,ObjectId,Number,Buffer,String,undefined&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="8ad6af5d7b3df92cd913f60890c069c35a351218" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Boolean&amp;raquo;</source>
          <target state="translated">&amp;laquo;Boolean&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="7e1c687d57fda64a99de4e89226b46a8e2364608" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Boolean&amp;raquo; whether mongoose thinks this doc is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d2801a0b52f2da100e937824cb94a8724c52eb" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Boolean|Number&amp;raquo;</source>
          <target state="translated">&amp;laquo;Boolean|Number&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="378e2bf4f4f8c580715fc9f1bf5847d290eade9c" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Boolean|Number|Object&amp;raquo;</source>
          <target state="translated">&amp;laquo;Boolean|Number|Object&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="f28fb2d976231c59fa537df2a377b95350074bd0" translate="yes" xml:space="preserve">
          <source>&amp;laquo;ChangeStream&amp;raquo; mongoose-specific change stream wrapper, inherits from EventEmitter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c72ba97867a97306931b29ab92fdc23b57ede3" translate="yes" xml:space="preserve">
          <source>&amp;laquo;ClientSession&amp;raquo;</source>
          <target state="translated">&amp;laquo;ClientSession&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="ad38bb6f8daebf4bdca08e601b66474dccb4cc3d" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Collection&amp;raquo; collection instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7582bc46e0a43e6a8123d80268464feb3d015d" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Connection&amp;raquo;</source>
          <target state="translated">&amp;laquo;Connection&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="58e7c7b519efa92e1cef0b63a7bbe256a62eda42" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Connection&amp;raquo; New Connection Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5344c09c2d89b7efcabcc4464067f86a0c5513" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Connection&amp;raquo; the created Connection object. Connections are thenable, so you can do &lt;code&gt;await mongoose.createConnection()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3f5e7ad180e81cd47de5263dbdcdb2cc6d92d1" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Connection&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5308644335b5b7a0056eb11c0b4e45cd02e195a" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Document http://mongoosejs.com/docs/api.html#document-js&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4ac27d0d1150a8376e73ac04767555bd9ceade" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Document&amp;raquo; document instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd199fb465a281dcdd00903c1cf1ecb8a44adad" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Document&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e18239e1a903f5ced378afa883c62976489c110" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a429d431a52377d27cffc6c3a0537656ab8bfc4" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function&amp;raquo;</source>
          <target state="translated">&amp;laquo;Function&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="1ab2207af9a953f8c50762a440f84964196768c2" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function&amp;raquo; the constructor Mongoose will use for creating instances of this discriminator model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c224a86407ef1bed0a7b344fa5c6d23c1e939b" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function,null&amp;raquo; the current function used to pluralize collection names, defaults to the legacy function from &lt;code&gt;mongoose-legacy-pluralize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a3b20c947868a6c2cedeaeddee12d8389293e8" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function|Any&amp;raquo;</source>
          <target state="translated">&amp;laquo;Function|Any&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="5579ff355408466f4579e61227f9ae07c9526d77" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function|Boolean&amp;raquo;</source>
          <target state="translated">&amp;laquo;Function|Boolean&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="f562e4622b0be6e233d560f48dff17fd961e6da8" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function|Object&amp;raquo;</source>
          <target state="translated">&amp;laquo;Function|Object&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="e27e7a7f83faa2a43356c3ed03fe96a251825692" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function|String&amp;raquo;</source>
          <target state="translated">&amp;laquo;Function|String&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="8e2d00a1a466badfbf8c38aea21441183936cead" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Function|String|Object&amp;raquo;</source>
          <target state="translated">&amp;laquo;Function|String|Object&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="a6aca36ee17875cb925ab4b1dccfcfad10dc91d1" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Model&amp;raquo; The compiled model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618e880ce9f2784adec5ee2df01b9693b1740a99" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Model&amp;raquo; The model associated with &lt;code&gt;name&lt;/code&gt;. Mongoose will create the model if it doesn't already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6e14db2797511746faf10ac3255f189e292188" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Model&amp;raquo; The newly created discriminator model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c944b3f28b65049e2f94a6dd029f3a65110484" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Mongoose&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5728d5e723e5bc005f4935e446c2d408c3792ca7" translate="yes" xml:space="preserve">
          <source>&amp;laquo;NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter&amp;raquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2e246ecc91c047f8e07d1eae29bd2a5c0ab24a" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Number&amp;raquo;</source>
          <target state="translated">&amp;laquo;Number&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="01e6fb36bab5e956778b2378cf7cda5d01a4ca37" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo;</source>
          <target state="translated">&amp;laquo;Object&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="7f4e1e2a5b4eeae274b5b3519ce09cbec167bfca" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; Mongoose-specific options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3e2889b26a8a81fce60565b2af0edf4c1bf596" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; current query filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a5f6975e724fa80662862b6b186f3d41213016" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; current update operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6191b84bad54cc9355d4cf9cb6e4fdc6114e31" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; js object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c5999da6865e22d436de7a78a679d313025268" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; the current projection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02b6da5f63c34364b4fbc1b0397fe7b308725aa" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; the options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d38c300e2009f41c67df79272b4b7e1d44ecf70" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Object&amp;raquo; the translated 'pure' fields/conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1130be47252a74f8c533cf76b1a593dbaa605bc0" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;lt;ClientSession&amp;gt;&amp;raquo; promise that resolves to a MongoDB driver &lt;code&gt;ClientSession&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a2014a1a16af0006dea110ae7325152f2ec9ae" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;raquo;</source>
          <target state="translated">&amp;laquo;Promise&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="c8ab4be4a4901fd3430ce60299abd30f6af8e8a0" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;raquo; Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ad96732a888c9c8ec6cd890b01d17e98ddf447" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;raquo; promise that resolves to the document when population is done</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf63118a856894eecc79fdf8e34ad8c11bc0c6c" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;raquo; resolves to &lt;code&gt;this&lt;/code&gt; if connection succeeded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab06b813829af6911b844c76bd87ec91a6d9ae61" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;raquo; resolves to a &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~BulkWriteOpResult&quot;&gt;&lt;code&gt;BulkWriteOpResult&lt;/code&gt;&lt;/a&gt; if the operation succeeds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4001724b4be9b1f56b43d54c1cd34f00d7b19b3e" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise&amp;raquo; resolves when all connections are closed, or rejects with the first error that occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2db26156498de0aea5d102d05bddaa4b2b19dd" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise,undefined&amp;raquo;</source>
          <target state="translated">&amp;laquo;Promise,undefined&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="f79c12926a60d1b487d8b2e83349a04ac40999f6" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise,undefined&amp;raquo; Returns &lt;code&gt;undefined&lt;/code&gt; if callback is specified, returns a promise if no callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acd6baa0fe321df2a0171fb1f9427b1234de748" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Promise,undefined&amp;raquo; Returns undefined if used with callback or a Promise otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e333d72d7cdf32771a4b96bc3b8805c170d0f8" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Query&amp;raquo;</source>
          <target state="translated">&amp;laquo;Query&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="a440b4b38d5e5f1c472d068dff9718a7aad464fc" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Query&amp;raquo; subclass-of-Query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4587ba8cc2e9270f2325a893e3d33d95d41a71a" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Query&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179a077fda5d99a3d4a4e311a55972ae754eb69e" translate="yes" xml:space="preserve">
          <source>&amp;laquo;QueryCursor&amp;raquo;</source>
          <target state="translated">&amp;laquo;QueryCursor&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="92812058e5c47179f92caa6f9d814c14d3a7d866" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Readable&amp;raquo;</source>
          <target state="translated">&amp;laquo;Readable&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="57f7b3390151246c68545d3b3e02562a10354219" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Schema&amp;raquo;</source>
          <target state="translated">&amp;laquo;Schema&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="bb1edbc673d7812d905a51dbb1da22862692ce3c" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Schema&amp;raquo; the Schema instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc9a922ba90aadabd60c361473d5bd07d17976f" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Schema&amp;raquo; the cloned schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d2a5a4c073aac7a1aff5168ff9c52333b0197d" translate="yes" xml:space="preserve">
          <source>&amp;laquo;Schema&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4af337134c93491e10a086920186fd255d8eb2" translate="yes" xml:space="preserve">
          <source>&amp;laquo;SchemaArray&amp;raquo;</source>
          <target state="translated">&amp;laquo;SchemaArray&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="3eae0cc3e1b0c54404707d5f12377d6971689cc5" translate="yes" xml:space="preserve">
          <source>&amp;laquo;SchemaType&amp;raquo;</source>
          <target state="translated">&amp;laquo;SchemaType&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="b346721599ac3bcaa3509f5a5b06d844e05677d0" translate="yes" xml:space="preserve">
          <source>&amp;laquo;SchemaType&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e194f5808cc125474924556f3923529fde27c2de" translate="yes" xml:space="preserve">
          <source>&amp;laquo;String&amp;raquo;</source>
          <target state="translated">&amp;laquo;String&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="c03cd5464471cd0d93be6a47392e802d02291ada" translate="yes" xml:space="preserve">
          <source>&amp;laquo;ValidationError&amp;raquo; the current ValidationError, with all currently invalidated paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba6af7246e785fd52df9fd021e43dfcd4487b8c" translate="yes" xml:space="preserve">
          <source>&amp;laquo;ValidationError,undefined&amp;raquo; ValidationError if there are errors during validation, or undefined if there is no error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfc685b34f8035e3134b02875cf081720c0657f" translate="yes" xml:space="preserve">
          <source>&amp;laquo;VirtualType&amp;raquo;</source>
          <target state="translated">&amp;laquo;VirtualType&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="f0283001bd5b3e4bda4061718fe322f3166edfa4" translate="yes" xml:space="preserve">
          <source>&amp;laquo;VirtualType&amp;raquo; this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861c3aad1b86e88500792cd88432614b5314a474" translate="yes" xml:space="preserve">
          <source>&amp;laquo;any&amp;raquo; the value after applying all getters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e30d2da70ecfd259dd8b306daf98271115cc2c" translate="yes" xml:space="preserve">
          <source>&amp;laquo;any&amp;raquo; the value after applying all setters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356cd38e1d9ed306793a83e1c02af984fc180a2f" translate="yes" xml:space="preserve">
          <source>&amp;laquo;defaultValue&amp;raquo;</source>
          <target state="translated">&amp;laquo;defaultValue&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="3ce6302b513b2ccdfb635740ac34047c559b2629" translate="yes" xml:space="preserve">
          <source>&amp;laquo;property&amp;raquo;</source>
          <target state="translated">&amp;laquo;property&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="1975216dc9a2eb86f40129c1ae34e56ac43ce285" translate="yes" xml:space="preserve">
          <source>&amp;laquo;public&amp;raquo;</source>
          <target state="translated">&amp;laquo;public&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="f1a92a48d014ac3d4e55cb12305b133da1f6c4a8" translate="yes" xml:space="preserve">
          <source>&amp;laquo;this&amp;raquo;</source>
          <target state="translated">&amp;laquo;this&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="99dbfd3e854583bdf84601c52e3401e70177aa32" translate="yes" xml:space="preserve">
          <source>&amp;laquo;undefined&amp;raquo;</source>
          <target state="translated">&amp;laquo;undefined&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="19fa45f687861b8412448fb8c3bb4c1d1cbab3eb" translate="yes" xml:space="preserve">
          <source>'applyPluginsToChildSchemas': true by default. Set to false to skip applying global plugins to child schemas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14281c238dc908406a4a660397ba0167420b6be0" translate="yes" xml:space="preserve">
          <source>'applyPluginsToDiscriminators': false by default. Set to true to apply global plugins to discriminator schemas. This typically isn't necessary because plugins are applied to the base schema and discriminators copy all middleware, methods, statics, and properties from the base schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7259bf5c460a69c82b405f1f7697ce3e9d8bf26c" translate="yes" xml:space="preserve">
          <source>'autoIndex': true by default. Set to false to disable automatic index creation for all models associated with this Mongoose instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b28b407a3c36451e3817b53a630aecf58ac225" translate="yes" xml:space="preserve">
          <source>'bufferCommands': enable/disable mongoose's buffering mechanism for all connections and models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5461410603139ad0d83a77356a227d4d7c018e02" translate="yes" xml:space="preserve">
          <source>'change': A change occurred, see below example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd64af1d4f1862982545a046c575adf2793857e" translate="yes" xml:space="preserve">
          <source>'cloneSchemas': false by default. Set to &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;clone()&lt;/code&gt; all schemas before compiling into a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9d4d7802cd69ec0de5811fd10db7aefec118ca" translate="yes" xml:space="preserve">
          <source>'close': Emitted if the underlying stream is closed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1c83bbd68da0b4869090b59796363193409f04" translate="yes" xml:space="preserve">
          <source>'debug': prints the operations mongoose sends to MongoDB to the console</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd12c0c01c23f087c15d48d511a1683500725be" translate="yes" xml:space="preserve">
          <source>'end': Emitted if the underlying stream is closed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bef82226d571a4cbaee273b6c19314883bd25b" translate="yes" xml:space="preserve">
          <source>'error': An unrecoverable error occurred. In particular, change streams currently error out if they lose connection to the replica set primary. Follow &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/6799&quot;&gt;this GitHub issue&lt;/a&gt; for updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8293b7eb42e24966d93f6ac8fd565b0e7599ff4c" translate="yes" xml:space="preserve">
          <source>'maxTimeMS': If set, attaches &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/&quot;&gt;maxTimeMS&lt;/a&gt; to every query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b7e69dbc57b65d7cd8fd3757968f1bc205f55f" translate="yes" xml:space="preserve">
          <source>'objectIdGetter': true by default. Mongoose adds a getter to MongoDB ObjectId's called &lt;code&gt;_id&lt;/code&gt; that returns &lt;code&gt;this&lt;/code&gt; for convenience with populate. Set this to false to remove the getter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66971a995515ca9d9bfe513d64ce571495d8ab1e" translate="yes" xml:space="preserve">
          <source>'runValidators': false by default. Set to true to enable &lt;a href=&quot;../validation#update-validators&quot;&gt;update validators&lt;/a&gt; for all validators by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47f654bb7723b62b47cf66afc07c3be65e9ced6" translate="yes" xml:space="preserve">
          <source>'selectPopulatedPaths': true by default. Set to false to opt out of Mongoose adding all fields that you &lt;code&gt;populate()&lt;/code&gt; to your &lt;code&gt;select()&lt;/code&gt;. The schema-level option &lt;code&gt;selectPopulatedPaths&lt;/code&gt; overwrites this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78735cb77ec047720c2f49919247a38f513a84e8" translate="yes" xml:space="preserve">
          <source>'strict': true by default, may be &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, or &lt;code&gt;'throw'&lt;/code&gt;. Sets the default strict mode for schemas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc6dccd093f070c1d3859c9aab5cb6871a0d621" translate="yes" xml:space="preserve">
          <source>'toJSON': &lt;code&gt;{ transform: true, flattenDecimals: true }&lt;/code&gt; by default. Overwrites default objects to &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toJSON&quot;&gt;&lt;code&gt;toJSON()&lt;/code&gt;&lt;/a&gt;, for determining how Mongoose documents get serialized by &lt;code&gt;JSON.stringify()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ca355a133d60a93029a802cea3c039a535d877" translate="yes" xml:space="preserve">
          <source>'toObject': &lt;code&gt;{ transform: true, flattenDecimals: true }&lt;/code&gt; by default. Overwrites default objects to &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toObject&quot;&gt;&lt;code&gt;toObject()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2bfaf07c89e895efb7be320f1b13521b5052d5" translate="yes" xml:space="preserve">
          <source>'typePojoToMixed': true by default, may be &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;. Sets the default typePojoToMixed for schemas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8e062a40b74223e950fd091ef8dc81b9fae068" translate="yes" xml:space="preserve">
          <source>'useCreateIndex': false by default. Set to &lt;code&gt;true&lt;/code&gt; to make Mongoose's default index build use &lt;code&gt;createIndex()&lt;/code&gt; instead of &lt;code&gt;ensureIndex()&lt;/code&gt; to avoid deprecation warnings from the MongoDB driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e6881576e73d801fab761811c6e5faae518e27" translate="yes" xml:space="preserve">
          <source>'useFindAndModify': true by default. Set to &lt;code&gt;false&lt;/code&gt; to make &lt;code&gt;findOneAndUpdate()&lt;/code&gt; and &lt;code&gt;findOneAndRemove()&lt;/code&gt; use native &lt;code&gt;findOneAndUpdate()&lt;/code&gt; rather than &lt;code&gt;findAndModify()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3641e483b863e9b561601df0d3f20aac8d612a57" translate="yes" xml:space="preserve">
          <source>'useNewUrlParser': false by default. Set to &lt;code&gt;true&lt;/code&gt; to make all connections set the &lt;code&gt;useNewUrlParser&lt;/code&gt; option by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaaa5c2c11913d5a7869ea8cd13fe15cb77b546" translate="yes" xml:space="preserve">
          <source>'useUnifiedTopology': false by default. Set to &lt;code&gt;true&lt;/code&gt; to make all connections set the &lt;code&gt;useUnifiedTopology&lt;/code&gt; option by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84478ec0c3903a1931b3d852af44d1a4ce66608" translate="yes" xml:space="preserve">
          <source>* Except for how it treats &lt;code&gt;undefined&lt;/code&gt;. If you use &lt;code&gt;findOne()&lt;/code&gt;, you'll see that &lt;code&gt;findOne(undefined)&lt;/code&gt; and &lt;code&gt;findOne({ _id: undefined })&lt;/code&gt; are equivalent to &lt;code&gt;findOne({})&lt;/code&gt; and return arbitrary documents. However, mongoose translates &lt;code&gt;findById(undefined)&lt;/code&gt; into &lt;code&gt;findOne({ _id: null })&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82e46918890b02d7dd602b5808742c50a6ddf33" translate="yes" xml:space="preserve">
          <source>* out options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a816e56dbc7e7590f813b7503975709ed4f911" translate="yes" xml:space="preserve">
          <source>.CastError</source>
          <target state="translated">.CastError</target>
        </trans-unit>
        <trans-unit id="3653f722e3fc996b573d0d4fc2bd2fd8bc160d78" translate="yes" xml:space="preserve">
          <source>.DivergentArrayError</source>
          <target state="translated">.DivergentArrayError</target>
        </trans-unit>
        <trans-unit id="29e832effbf71714debfd3fbaababeaef09876e2" translate="yes" xml:space="preserve">
          <source>.DocumentNotFoundError</source>
          <target state="translated">.DocumentNotFoundError</target>
        </trans-unit>
        <trans-unit id="b093a4ef9a4aa21a59eea9c7ed336e3a3147d581" translate="yes" xml:space="preserve">
          <source>.MissingSchemaError</source>
          <target state="translated">.MissingSchemaError</target>
        </trans-unit>
        <trans-unit id="209da261a3d7d4b9c97e1b424781d675910018e7" translate="yes" xml:space="preserve">
          <source>.OverwriteModelError</source>
          <target state="translated">.OverwriteModelError</target>
        </trans-unit>
        <trans-unit id="e17912d83f30a614f09fba3f9e3934322bbed16f" translate="yes" xml:space="preserve">
          <source>.ParallelSaveError</source>
          <target state="translated">.ParallelSaveError</target>
        </trans-unit>
        <trans-unit id="de6a113978d23c6a7899fd4523314e7d90ceaf1f" translate="yes" xml:space="preserve">
          <source>.StrictModeError</source>
          <target state="translated">.StrictModeError</target>
        </trans-unit>
        <trans-unit id="c57e9974f4267012fc97eda38ec7b7582a60807a" translate="yes" xml:space="preserve">
          <source>.Types</source>
          <target state="translated">.Types</target>
        </trans-unit>
        <trans-unit id="effbf90bd64a86c589110b7a895c45a0d4453a12" translate="yes" xml:space="preserve">
          <source>.ValidationError</source>
          <target state="translated">.ValidationError</target>
        </trans-unit>
        <trans-unit id="3a4685509aec8b7e8fcd6bcfcbe2a3ff7918a402" translate="yes" xml:space="preserve">
          <source>.ValidatorError</source>
          <target state="translated">.ValidatorError</target>
        </trans-unit>
        <trans-unit id="17e91dffda19f478e954d3a8530ed24bf1f92a5a" translate="yes" xml:space="preserve">
          <source>.VersionError</source>
          <target state="translated">.VersionError</target>
        </trans-unit>
        <trans-unit id="fad861f42092d73eb5be0f03231251bc738c21e7" translate="yes" xml:space="preserve">
          <source>.aggregate()</source>
          <target state="translated">.aggregate()</target>
        </trans-unit>
        <trans-unit id="87bef0a7b4a5bda8f2b4e58095434e2cec8e511a" translate="yes" xml:space="preserve">
          <source>.bulkWrite()</source>
          <target state="translated">.bulkWrite()</target>
        </trans-unit>
        <trans-unit id="cc5c3e89a0d31abfc9b8739a6e5cda42fcd99bfc" translate="yes" xml:space="preserve">
          <source>.cast()</source>
          <target state="translated">.cast()</target>
        </trans-unit>
        <trans-unit id="52267759b9efec131f1614bd22188ee4cf9dd54e" translate="yes" xml:space="preserve">
          <source>.checkRequired()</source>
          <target state="translated">.checkRequired()</target>
        </trans-unit>
        <trans-unit id="184fdee3c5e77ab03fce7a6e93d5f5d148b896f5" translate="yes" xml:space="preserve">
          <source>.cleanIndexes()</source>
          <target state="translated">.cleanIndexes()</target>
        </trans-unit>
        <trans-unit id="45c50c3d0334282db8ba6b17620b9d509b6cf53d" translate="yes" xml:space="preserve">
          <source>.count()</source>
          <target state="translated">.count()</target>
        </trans-unit>
        <trans-unit id="e391a420f332c34ec1e1338ed8fa64a8b0695af9" translate="yes" xml:space="preserve">
          <source>.countDocuments()</source>
          <target state="translated">.countDocuments()</target>
        </trans-unit>
        <trans-unit id="2a0f50d7d09b16509e1157dd95bedac3a7e649c1" translate="yes" xml:space="preserve">
          <source>.create()</source>
          <target state="translated">.create()</target>
        </trans-unit>
        <trans-unit id="90bca1a8749fc31c3624a4e56621ac99c535aaa3" translate="yes" xml:space="preserve">
          <source>.createCollection()</source>
          <target state="translated">.createCollection()</target>
        </trans-unit>
        <trans-unit id="7c1293b447a47892afe7221cb1a82d196ede91c5" translate="yes" xml:space="preserve">
          <source>.createIndexes()</source>
          <target state="translated">.createIndexes()</target>
        </trans-unit>
        <trans-unit id="a08ce7d0b1da5c6a535b7febef1480ad97f84fc7" translate="yes" xml:space="preserve">
          <source>.deleteMany()</source>
          <target state="translated">.deleteMany()</target>
        </trans-unit>
        <trans-unit id="84a70effe49a322c83958877bc22c49cac9911ff" translate="yes" xml:space="preserve">
          <source>.deleteOne()</source>
          <target state="translated">.deleteOne()</target>
        </trans-unit>
        <trans-unit id="721a87d71d382e65a91c557c569dd830173209bb" translate="yes" xml:space="preserve">
          <source>.discriminator()</source>
          <target state="translated">.discriminator()</target>
        </trans-unit>
        <trans-unit id="99118a348652fc8490b5d3a0cff130a653d84aff" translate="yes" xml:space="preserve">
          <source>.distinct()</source>
          <target state="translated">.distinct()</target>
        </trans-unit>
        <trans-unit id="41887c3104640cf56cfda18156e7aad318db79c6" translate="yes" xml:space="preserve">
          <source>.ensureIndexes()</source>
          <target state="translated">.ensureIndexes()</target>
        </trans-unit>
        <trans-unit id="06ff8e7b79137402a595964c21e922fd271240f6" translate="yes" xml:space="preserve">
          <source>.estimatedDocumentCount()</source>
          <target state="translated">.estimatedDocumentCount()</target>
        </trans-unit>
        <trans-unit id="c624af6dc25be1328250e9ffc41dc95cdd0ab0e5" translate="yes" xml:space="preserve">
          <source>.events</source>
          <target state="translated">.events</target>
        </trans-unit>
        <trans-unit id="fd80251f038b3e506519cba3204e2a5073109ce8" translate="yes" xml:space="preserve">
          <source>.exists()</source>
          <target state="translated">.exists()</target>
        </trans-unit>
        <trans-unit id="d25980948b24cf9ba73d9afbc5d63be60b6e77fb" translate="yes" xml:space="preserve">
          <source>.find()</source>
          <target state="translated">.find()</target>
        </trans-unit>
        <trans-unit id="063ea59b76cc82f6c8fccc1af8431a2840de15ea" translate="yes" xml:space="preserve">
          <source>.findById()</source>
          <target state="translated">.findById()</target>
        </trans-unit>
        <trans-unit id="a5f5b4cb868214036e51854ced70a3ca9cd6b7a8" translate="yes" xml:space="preserve">
          <source>.findByIdAndDelete()</source>
          <target state="translated">.findByIdAndDelete()</target>
        </trans-unit>
        <trans-unit id="8f6d6b9b30f4036d702d1b8affcf2151f5d5034c" translate="yes" xml:space="preserve">
          <source>.findByIdAndRemove()</source>
          <target state="translated">.findByIdAndRemove()</target>
        </trans-unit>
        <trans-unit id="13f987973e778448d64e0d84bd98e5e42c5485b9" translate="yes" xml:space="preserve">
          <source>.findByIdAndUpdate()</source>
          <target state="translated">.findByIdAndUpdate()</target>
        </trans-unit>
        <trans-unit id="3c93b04868e9da7f3f9bb169f5810857dce35257" translate="yes" xml:space="preserve">
          <source>.findOne()</source>
          <target state="translated">.findOne()</target>
        </trans-unit>
        <trans-unit id="1827f8900302447da88ea9f2d5b30e4ccb21fda2" translate="yes" xml:space="preserve">
          <source>.findOneAndDelete()</source>
          <target state="translated">.findOneAndDelete()</target>
        </trans-unit>
        <trans-unit id="a827a6f9e7626630ced26d8f441cce5f22602ff0" translate="yes" xml:space="preserve">
          <source>.findOneAndRemove()</source>
          <target state="translated">.findOneAndRemove()</target>
        </trans-unit>
        <trans-unit id="de0df2c9deb05f623d42457c42718fe95df9e59b" translate="yes" xml:space="preserve">
          <source>.findOneAndReplace()</source>
          <target state="translated">.findOneAndReplace()</target>
        </trans-unit>
        <trans-unit id="13656eb354fdcab319e09a842ee067ab1918438d" translate="yes" xml:space="preserve">
          <source>.findOneAndUpdate()</source>
          <target state="translated">.findOneAndUpdate()</target>
        </trans-unit>
        <trans-unit id="10409c7cdf88c4b027b5e166eb3efb097bfecfa9" translate="yes" xml:space="preserve">
          <source>.geoSearch()</source>
          <target state="translated">.geoSearch()</target>
        </trans-unit>
        <trans-unit id="d2538532726edc7d05ac99a088c54c90e745a7b0" translate="yes" xml:space="preserve">
          <source>.hydrate()</source>
          <target state="translated">.hydrate()</target>
        </trans-unit>
        <trans-unit id="d967fe5cccdee45f367da7f46dc35dcc8432b565" translate="yes" xml:space="preserve">
          <source>.indexTypes</source>
          <target state="translated">.indexTypes</target>
        </trans-unit>
        <trans-unit id="44dade9646a84176f0205cd62487852c60acc23a" translate="yes" xml:space="preserve">
          <source>.init()</source>
          <target state="translated">.init()</target>
        </trans-unit>
        <trans-unit id="8c2a53880ee9d6aba1c826613954b93767594e44" translate="yes" xml:space="preserve">
          <source>.insertMany()</source>
          <target state="translated">.insertMany()</target>
        </trans-unit>
        <trans-unit id="6116ab202af7abb7809d66ff6c292bea0ea935f9" translate="yes" xml:space="preserve">
          <source>.inspect()</source>
          <target state="translated">.inspect()</target>
        </trans-unit>
        <trans-unit id="2c1cf14569ea68c352dbbf789cd7df2c04373141" translate="yes" xml:space="preserve">
          <source>.listIndexes()</source>
          <target state="translated">.listIndexes()</target>
        </trans-unit>
        <trans-unit id="216053886e66826ace8187fb3ff3d4457905a042" translate="yes" xml:space="preserve">
          <source>.mapReduce()</source>
          <target state="translated">.mapReduce()</target>
        </trans-unit>
        <trans-unit id="06fe4872749b3e95f06274e9319b9f90a239d0f1" translate="yes" xml:space="preserve">
          <source>.messages</source>
          <target state="translated">.messages</target>
        </trans-unit>
        <trans-unit id="fdc34e77f8c1fd678afdf44bb4d7799c70097cd4" translate="yes" xml:space="preserve">
          <source>.options</source>
          <target state="translated">.options</target>
        </trans-unit>
        <trans-unit id="de9e57a52bb486e092523e89621ae837148cde09" translate="yes" xml:space="preserve">
          <source>.populate()</source>
          <target state="translated">.populate()</target>
        </trans-unit>
        <trans-unit id="165b3742373acced1e9c2796d1f781b05d8df44f" translate="yes" xml:space="preserve">
          <source>.prototype.$ignore()</source>
          <target state="translated">.prototype.$ignore()</target>
        </trans-unit>
        <trans-unit id="7357dfe22f11e0aac12084b96e4dda5f55133753" translate="yes" xml:space="preserve">
          <source>.prototype.$isDefault()</source>
          <target state="translated">.prototype.$isDefault()</target>
        </trans-unit>
        <trans-unit id="0baf23e365e7dea43331470a6647aae13fc9947f" translate="yes" xml:space="preserve">
          <source>.prototype.$isDeleted()</source>
          <target state="translated">.prototype.$isDeleted()</target>
        </trans-unit>
        <trans-unit id="ff0e68cb2410915b2520ad9155a4268ceb433b31" translate="yes" xml:space="preserve">
          <source>.prototype.$isEmpty()</source>
          <target state="translated">.prototype.$isEmpty()</target>
        </trans-unit>
        <trans-unit id="22e7a4e97b3b274f0acc33a37f4e660a778f53f4" translate="yes" xml:space="preserve">
          <source>.prototype.$locals</source>
          <target state="translated">.prototype.$locals</target>
        </trans-unit>
        <trans-unit id="174ee343791b3661088ee9799ac5eaf05497c2fe" translate="yes" xml:space="preserve">
          <source>.prototype.$markValid()</source>
          <target state="translated">.prototype.$markValid()</target>
        </trans-unit>
        <trans-unit id="34edee54459964b6ba85b91c12206e7131572a29" translate="yes" xml:space="preserve">
          <source>.prototype.$pop()</source>
          <target state="translated">.prototype.$pop()</target>
        </trans-unit>
        <trans-unit id="6e2cecc467a04c1ffb9c4dd275fd3d671037cb40" translate="yes" xml:space="preserve">
          <source>.prototype.$session()</source>
          <target state="translated">.prototype.$session()</target>
        </trans-unit>
        <trans-unit id="0a23477f365690d3b38ffcafec6ee927213a732b" translate="yes" xml:space="preserve">
          <source>.prototype.$set()</source>
          <target state="translated">.prototype.$set()</target>
        </trans-unit>
        <trans-unit id="be0c418cbdb569f5521c0b352162034e74791fcd" translate="yes" xml:space="preserve">
          <source>.prototype.$shift()</source>
          <target state="translated">.prototype.$shift()</target>
        </trans-unit>
        <trans-unit id="f64efe5b9b30344e6dc5f79f383c2d95eca39e01" translate="yes" xml:space="preserve">
          <source>.prototype.$where()</source>
          <target state="translated">.prototype.$where()</target>
        </trans-unit>
        <trans-unit id="411f30a5ba83863893cfc386db995a8cc8545131" translate="yes" xml:space="preserve">
          <source>.prototype.Aggregate()</source>
          <target state="translated">.prototype.Aggregate()</target>
        </trans-unit>
        <trans-unit id="b0e30dee674b03591ce5df4b210ac1ef6168ec22" translate="yes" xml:space="preserve">
          <source>.prototype.CastError()</source>
          <target state="translated">.prototype.CastError()</target>
        </trans-unit>
        <trans-unit id="5803fba4f15d19147a938c22d06f8a9d8125a5c0" translate="yes" xml:space="preserve">
          <source>.prototype.Collection()</source>
          <target state="translated">.prototype.Collection()</target>
        </trans-unit>
        <trans-unit id="175de861e25bde117de98ed277bc81e6e2a6cacc" translate="yes" xml:space="preserve">
          <source>.prototype.Connection()</source>
          <target state="translated">.prototype.Connection()</target>
        </trans-unit>
        <trans-unit id="bd2df2a869d7516f4da26ffafcc059d9a3046130" translate="yes" xml:space="preserve">
          <source>.prototype.Decimal128</source>
          <target state="translated">.prototype.Decimal128</target>
        </trans-unit>
        <trans-unit id="606188671f1132ed681e4ffc13ac0cd425d9ed66" translate="yes" xml:space="preserve">
          <source>.prototype.Document()</source>
          <target state="translated">.prototype.Document()</target>
        </trans-unit>
        <trans-unit id="4023feb24ed79e8c7275bf0320f24977ac936519" translate="yes" xml:space="preserve">
          <source>.prototype.DocumentProvider()</source>
          <target state="translated">.prototype.DocumentProvider()</target>
        </trans-unit>
        <trans-unit id="afff4301af8c95ae24bb74df7351ca8296ef5b03" translate="yes" xml:space="preserve">
          <source>.prototype.Error()</source>
          <target state="translated">.prototype.Error()</target>
        </trans-unit>
        <trans-unit id="696e4180458b8683f116ed4e1b33860342c9ec5b" translate="yes" xml:space="preserve">
          <source>.prototype.Mixed</source>
          <target state="translated">.prototype.Mixed</target>
        </trans-unit>
        <trans-unit id="adbf36c1c316a6bc331387aa1869881f88de20dd" translate="yes" xml:space="preserve">
          <source>.prototype.Model()</source>
          <target state="translated">.prototype.Model()</target>
        </trans-unit>
        <trans-unit id="4198a786ab8f08613d80a066c3f94e339d33619e" translate="yes" xml:space="preserve">
          <source>.prototype.Mongoose()</source>
          <target state="translated">.prototype.Mongoose()</target>
        </trans-unit>
        <trans-unit id="23bf5519bcfcdb213f6f3cb8b8664c047bb15b12" translate="yes" xml:space="preserve">
          <source>.prototype.Number</source>
          <target state="translated">.prototype.Number</target>
        </trans-unit>
        <trans-unit id="385c5776c8940490c8e45fba8fd27acbf5d7561d" translate="yes" xml:space="preserve">
          <source>.prototype.ObjectId</source>
          <target state="translated">.prototype.ObjectId</target>
        </trans-unit>
        <trans-unit id="71fed7d39c3fcf2fd37ff9930ef5f6263b7844ea" translate="yes" xml:space="preserve">
          <source>.prototype.Promise</source>
          <target state="translated">.prototype.Promise</target>
        </trans-unit>
        <trans-unit id="b8a04ef64579dc6ab012e6b91f70a044fe0bf32e" translate="yes" xml:space="preserve">
          <source>.prototype.PromiseProvider()</source>
          <target state="translated">.prototype.PromiseProvider()</target>
        </trans-unit>
        <trans-unit id="b9e8c515452fe9e2abf16a9b997d7a83df7c0a65" translate="yes" xml:space="preserve">
          <source>.prototype.Query()</source>
          <target state="translated">.prototype.Query()</target>
        </trans-unit>
        <trans-unit id="7a825d551469e76d24bfca155b31024e4e4c2f0b" translate="yes" xml:space="preserve">
          <source>.prototype.STATES</source>
          <target state="translated">.prototype.STATES</target>
        </trans-unit>
        <trans-unit id="bc0fc3fe21ae18ef3dee80beecbedea9fdc5fed2" translate="yes" xml:space="preserve">
          <source>.prototype.Schema()</source>
          <target state="translated">.prototype.Schema()</target>
        </trans-unit>
        <trans-unit id="2e230f3f6dabff02c05052c2551ef2eda9f599c6" translate="yes" xml:space="preserve">
          <source>.prototype.SchemaType()</source>
          <target state="translated">.prototype.SchemaType()</target>
        </trans-unit>
        <trans-unit id="971a06258572ede1b8bb1ac7bb1ede1b9fd42cca" translate="yes" xml:space="preserve">
          <source>.prototype.SchemaTypeOptions()</source>
          <target state="translated">.prototype.SchemaTypeOptions()</target>
        </trans-unit>
        <trans-unit id="63fe1938d8f7c7ac768e114e04fde105a410e395" translate="yes" xml:space="preserve">
          <source>.prototype.SchemaTypes</source>
          <target state="translated">.prototype.SchemaTypes</target>
        </trans-unit>
        <trans-unit id="71b19cfd8b6e5b842bc87a9debf581351293ab52" translate="yes" xml:space="preserve">
          <source>.prototype.Symbol.asyncIterator()</source>
          <target state="translated">.prototype.Symbol.asyncIterator()</target>
        </trans-unit>
        <trans-unit id="7e5556dd1366ea1ea7b9827ea413986b9db1d077" translate="yes" xml:space="preserve">
          <source>.prototype.Types</source>
          <target state="translated">.prototype.Types</target>
        </trans-unit>
        <trans-unit id="8b24bfb28ea1c2eeff7dc6c31f839609c74b96a6" translate="yes" xml:space="preserve">
          <source>.prototype.VirtualType()</source>
          <target state="translated">.prototype.VirtualType()</target>
        </trans-unit>
        <trans-unit id="e5f8056d1e0b0063256f5df07b723207a4b43a41" translate="yes" xml:space="preserve">
          <source>.prototype.add()</source>
          <target state="translated">.prototype.add()</target>
        </trans-unit>
        <trans-unit id="82de2f4a7cc28d3e217c64d2b9315c794524beb8" translate="yes" xml:space="preserve">
          <source>.prototype.addCursorFlag</source>
          <target state="translated">.prototype.addCursorFlag</target>
        </trans-unit>
        <trans-unit id="bf20a1d647adaac64b7919e8ee8c4c8c2ad68eac" translate="yes" xml:space="preserve">
          <source>.prototype.addCursorFlag()</source>
          <target state="translated">.prototype.addCursorFlag()</target>
        </trans-unit>
        <trans-unit id="259c0762a0d65b669770c0fcb80745e13d7f0e26" translate="yes" xml:space="preserve">
          <source>.prototype.addFields()</source>
          <target state="translated">.prototype.addFields()</target>
        </trans-unit>
        <trans-unit id="a6188ab031d7194cafcc045a43666a8d5f1d374d" translate="yes" xml:space="preserve">
          <source>.prototype.addToSet()</source>
          <target state="translated">.prototype.addToSet()</target>
        </trans-unit>
        <trans-unit id="ea96dafde2e469a19477d3818d1118f2b82cceb0" translate="yes" xml:space="preserve">
          <source>.prototype.all()</source>
          <target state="translated">.prototype.all()</target>
        </trans-unit>
        <trans-unit id="c168e635b15d0e559315c7a6369bd600ffa65cc3" translate="yes" xml:space="preserve">
          <source>.prototype.allowDiskUse()</source>
          <target state="translated">.prototype.allowDiskUse()</target>
        </trans-unit>
        <trans-unit id="b991427281cdd216b762d7348f7af5be1a48e122" translate="yes" xml:space="preserve">
          <source>.prototype.and()</source>
          <target state="translated">.prototype.and()</target>
        </trans-unit>
        <trans-unit id="bc64ed6c4c245dc542cd5c3ab07d9c926b307af7" translate="yes" xml:space="preserve">
          <source>.prototype.append()</source>
          <target state="translated">.prototype.append()</target>
        </trans-unit>
        <trans-unit id="6ddaebd013b427d166524442fea4e30df7e7e497" translate="yes" xml:space="preserve">
          <source>.prototype.applyGetters()</source>
          <target state="translated">.prototype.applyGetters()</target>
        </trans-unit>
        <trans-unit id="6f8195417feaeb413d69fcc8916bf004eb32ffc6" translate="yes" xml:space="preserve">
          <source>.prototype.applySetters()</source>
          <target state="translated">.prototype.applySetters()</target>
        </trans-unit>
        <trans-unit id="05642b8a7a1f523f9f35d694439fa081faa8bfd8" translate="yes" xml:space="preserve">
          <source>.prototype.base</source>
          <target state="translated">.prototype.base</target>
        </trans-unit>
        <trans-unit id="29cd7c412d866ac7a202ed35b01247dc5aaf4bb8" translate="yes" xml:space="preserve">
          <source>.prototype.baseModelName</source>
          <target state="translated">.prototype.baseModelName</target>
        </trans-unit>
        <trans-unit id="bb97166373fe42b6ddf9abb7c6c731cd0e162dfa" translate="yes" xml:space="preserve">
          <source>.prototype.batchSize()</source>
          <target state="translated">.prototype.batchSize()</target>
        </trans-unit>
        <trans-unit id="d6864b6a50402e905ff88ca7bd88812c4087ab21" translate="yes" xml:space="preserve">
          <source>.prototype.box()</source>
          <target state="translated">.prototype.box()</target>
        </trans-unit>
        <trans-unit id="a079a563a36b7aa10788bb96cd998e27250b2370" translate="yes" xml:space="preserve">
          <source>.prototype.cast</source>
          <target state="translated">.prototype.cast</target>
        </trans-unit>
        <trans-unit id="2f52f14238f18496500f3e404770ad24852f2f5b" translate="yes" xml:space="preserve">
          <source>.prototype.cast()</source>
          <target state="translated">.prototype.cast()</target>
        </trans-unit>
        <trans-unit id="49bf1107924fbfcbc12436f5fd83baa5fd0baaaa" translate="yes" xml:space="preserve">
          <source>.prototype.catch()</source>
          <target state="translated">.prototype.catch()</target>
        </trans-unit>
        <trans-unit id="d2ccb6f4a36ab53c1f481f50f2e09b53e45c482b" translate="yes" xml:space="preserve">
          <source>.prototype.center()</source>
          <target state="translated">.prototype.center()</target>
        </trans-unit>
        <trans-unit id="dc11d19f0831e81f7bb37723aed739419d530770" translate="yes" xml:space="preserve">
          <source>.prototype.centerSphere()</source>
          <target state="translated">.prototype.centerSphere()</target>
        </trans-unit>
        <trans-unit id="92247d4b1535654edd1569fa33e65f308a56f119" translate="yes" xml:space="preserve">
          <source>.prototype.childSchemas</source>
          <target state="translated">.prototype.childSchemas</target>
        </trans-unit>
        <trans-unit id="3555512fd6de14aca434daab28f0b4ae3d84e397" translate="yes" xml:space="preserve">
          <source>.prototype.circle()</source>
          <target state="translated">.prototype.circle()</target>
        </trans-unit>
        <trans-unit id="e275c8a3ca0f909191bec4f92f46751e8c2566fc" translate="yes" xml:space="preserve">
          <source>.prototype.clone()</source>
          <target state="translated">.prototype.clone()</target>
        </trans-unit>
        <trans-unit id="556daca401d545bd6f8612f8c8256a5c97269c78" translate="yes" xml:space="preserve">
          <source>.prototype.close()</source>
          <target state="translated">.prototype.close()</target>
        </trans-unit>
        <trans-unit id="485c7bbac4add7991341a09c430cae1d4b6e518a" translate="yes" xml:space="preserve">
          <source>.prototype.collation()</source>
          <target state="translated">.prototype.collation()</target>
        </trans-unit>
        <trans-unit id="d7ba97c7b12332dcbcc291f0a1c5693eb6227c81" translate="yes" xml:space="preserve">
          <source>.prototype.collection</source>
          <target state="translated">.prototype.collection</target>
        </trans-unit>
        <trans-unit id="623ff18939c0a450d752322a3ee596737dc5ce3d" translate="yes" xml:space="preserve">
          <source>.prototype.collection()</source>
          <target state="translated">.prototype.collection()</target>
        </trans-unit>
        <trans-unit id="6192f8986ce68dd551845cc134fd1a831f92f93a" translate="yes" xml:space="preserve">
          <source>.prototype.collections</source>
          <target state="translated">.prototype.collections</target>
        </trans-unit>
        <trans-unit id="40e68325e40fe231ed4bdacd11cb18b61a549b34" translate="yes" xml:space="preserve">
          <source>.prototype.comment()</source>
          <target state="translated">.prototype.comment()</target>
        </trans-unit>
        <trans-unit id="1b6258dcce54426cfa16bc2ff4f208d719e528ad" translate="yes" xml:space="preserve">
          <source>.prototype.config</source>
          <target state="translated">.prototype.config</target>
        </trans-unit>
        <trans-unit id="ef6f12e30c629c6baaa394cd8db6fd40df6b0f22" translate="yes" xml:space="preserve">
          <source>.prototype.connect()</source>
          <target state="translated">.prototype.connect()</target>
        </trans-unit>
        <trans-unit id="0e5d6c62d588d0eba161591ae086570b0686e07b" translate="yes" xml:space="preserve">
          <source>.prototype.connection</source>
          <target state="translated">.prototype.connection</target>
        </trans-unit>
        <trans-unit id="de38becb91a6bed5bc3f432aa15b01c028643cda" translate="yes" xml:space="preserve">
          <source>.prototype.connections</source>
          <target state="translated">.prototype.connections</target>
        </trans-unit>
        <trans-unit id="fedfeafafabab420c8977687218849b57c4dfd1b" translate="yes" xml:space="preserve">
          <source>.prototype.count()</source>
          <target state="translated">.prototype.count()</target>
        </trans-unit>
        <trans-unit id="764e92c748510b6871656d4b77214357b0969f15" translate="yes" xml:space="preserve">
          <source>.prototype.countDocuments()</source>
          <target state="translated">.prototype.countDocuments()</target>
        </trans-unit>
        <trans-unit id="6c3972ddcad0eeb297bc064ee9537de614c7e640" translate="yes" xml:space="preserve">
          <source>.prototype.createCollection()</source>
          <target state="translated">.prototype.createCollection()</target>
        </trans-unit>
        <trans-unit id="741bc6544d93586fe99f830a4d940f97e92e191d" translate="yes" xml:space="preserve">
          <source>.prototype.createConnection()</source>
          <target state="translated">.prototype.createConnection()</target>
        </trans-unit>
        <trans-unit id="e89211b1eded752cfb065b677728f1a2866a65ff" translate="yes" xml:space="preserve">
          <source>.prototype.cursor()</source>
          <target state="translated">.prototype.cursor()</target>
        </trans-unit>
        <trans-unit id="6e83e5205635c5cd8e1a73220deb5da6904bfc43" translate="yes" xml:space="preserve">
          <source>.prototype.db</source>
          <target state="translated">.prototype.db</target>
        </trans-unit>
        <trans-unit id="914c834ff36f5b7e70181a9b486eedafa94b0eb5" translate="yes" xml:space="preserve">
          <source>.prototype.default</source>
          <target state="translated">.prototype.default</target>
        </trans-unit>
        <trans-unit id="7fef6bf86bdc85db0d98980cf2276a511e902bd4" translate="yes" xml:space="preserve">
          <source>.prototype.default()</source>
          <target state="translated">.prototype.default()</target>
        </trans-unit>
        <trans-unit id="9f0ec75a18df23699b3256430881de509e59e24c" translate="yes" xml:space="preserve">
          <source>.prototype.delete</source>
          <target state="translated">.prototype.delete</target>
        </trans-unit>
        <trans-unit id="09d4c9c823b9b1cdf9c2ae595322f79a029c93a2" translate="yes" xml:space="preserve">
          <source>.prototype.deleteMany()</source>
          <target state="translated">.prototype.deleteMany()</target>
        </trans-unit>
        <trans-unit id="13893de68374ecacd8c4c9e5d72f5cb08a258202" translate="yes" xml:space="preserve">
          <source>.prototype.deleteModel()</source>
          <target state="translated">.prototype.deleteModel()</target>
        </trans-unit>
        <trans-unit id="42a6f86efdb7966839f02f7570b61e3c32c00c60" translate="yes" xml:space="preserve">
          <source>.prototype.deleteOne()</source>
          <target state="translated">.prototype.deleteOne()</target>
        </trans-unit>
        <trans-unit id="2865f2e169e6949aa040ddf8e42b7c125c5c2ab9" translate="yes" xml:space="preserve">
          <source>.prototype.depopulate()</source>
          <target state="translated">.prototype.depopulate()</target>
        </trans-unit>
        <trans-unit id="fd28a560ca0487c6a763ea616258979162cca958" translate="yes" xml:space="preserve">
          <source>.prototype.directModifiedPaths()</source>
          <target state="translated">.prototype.directModifiedPaths()</target>
        </trans-unit>
        <trans-unit id="ff49a53b25512d00a6889cae2f0f8e9afbe410ad" translate="yes" xml:space="preserve">
          <source>.prototype.disconnect()</source>
          <target state="translated">.prototype.disconnect()</target>
        </trans-unit>
        <trans-unit id="911584c81c62e02f79941da28e8fbac1b6f1b871" translate="yes" xml:space="preserve">
          <source>.prototype.discriminator()</source>
          <target state="translated">.prototype.discriminator()</target>
        </trans-unit>
        <trans-unit id="b1e9f33c1a654f8fb67b93f166750393232407d4" translate="yes" xml:space="preserve">
          <source>.prototype.discriminators</source>
          <target state="translated">.prototype.discriminators</target>
        </trans-unit>
        <trans-unit id="1b80813763a61a1ddd3b668d5500da8e90f51687" translate="yes" xml:space="preserve">
          <source>.prototype.distinct()</source>
          <target state="translated">.prototype.distinct()</target>
        </trans-unit>
        <trans-unit id="145a4b5c4014fb012f37f74695cb658d1b64cd8a" translate="yes" xml:space="preserve">
          <source>.prototype.driver</source>
          <target state="translated">.prototype.driver</target>
        </trans-unit>
        <trans-unit id="f94b0cf1ab31e4e573e84dec368f643f2228b4bf" translate="yes" xml:space="preserve">
          <source>.prototype.dropCollection()</source>
          <target state="translated">.prototype.dropCollection()</target>
        </trans-unit>
        <trans-unit id="0a2e9ecb7487a9dea1a2919867f9feb1495c0fbb" translate="yes" xml:space="preserve">
          <source>.prototype.dropDatabase()</source>
          <target state="translated">.prototype.dropDatabase()</target>
        </trans-unit>
        <trans-unit id="0816ff5a662d9e638b981067dc0aaf2d71511a12" translate="yes" xml:space="preserve">
          <source>.prototype.eachAsync()</source>
          <target state="translated">.prototype.eachAsync()</target>
        </trans-unit>
        <trans-unit id="3a625c679a7cf5f036709eebc93e53eac363652f" translate="yes" xml:space="preserve">
          <source>.prototype.eachPath()</source>
          <target state="translated">.prototype.eachPath()</target>
        </trans-unit>
        <trans-unit id="3f82c53c8da815e591f7a8aabc7d52cbe2f289d8" translate="yes" xml:space="preserve">
          <source>.prototype.elemMatch()</source>
          <target state="translated">.prototype.elemMatch()</target>
        </trans-unit>
        <trans-unit id="ef3cb895993d26e2921e505a9626bfa6f19ea156" translate="yes" xml:space="preserve">
          <source>.prototype.equals()</source>
          <target state="translated">.prototype.equals()</target>
        </trans-unit>
        <trans-unit id="1cd545a44796dbc4364a4eb7e1c8b6530780378a" translate="yes" xml:space="preserve">
          <source>.prototype.error()</source>
          <target state="translated">.prototype.error()</target>
        </trans-unit>
        <trans-unit id="a14ea6577aa7f5f427fe61b0fe6982e78bca1663" translate="yes" xml:space="preserve">
          <source>.prototype.errors</source>
          <target state="translated">.prototype.errors</target>
        </trans-unit>
        <trans-unit id="4a313059cfb7b900ce525a5857eddf91d8965f0a" translate="yes" xml:space="preserve">
          <source>.prototype.estimatedDocumentCount()</source>
          <target state="translated">.prototype.estimatedDocumentCount()</target>
        </trans-unit>
        <trans-unit id="7ce21924793d3ddea195b7877c640492fd527f82" translate="yes" xml:space="preserve">
          <source>.prototype.exec()</source>
          <target state="translated">.prototype.exec()</target>
        </trans-unit>
        <trans-unit id="2baf26088014cb4da0e2ac5bfa0671a56638fd46" translate="yes" xml:space="preserve">
          <source>.prototype.execPopulate()</source>
          <target state="translated">.prototype.execPopulate()</target>
        </trans-unit>
        <trans-unit id="63b4622da79365116a905ad8c558cc55c269a657" translate="yes" xml:space="preserve">
          <source>.prototype.exists()</source>
          <target state="translated">.prototype.exists()</target>
        </trans-unit>
        <trans-unit id="5bd41b6eb55b9940ae03d07327b2201ca3677677" translate="yes" xml:space="preserve">
          <source>.prototype.explain()</source>
          <target state="translated">.prototype.explain()</target>
        </trans-unit>
        <trans-unit id="b7273767078ddf13b6b8ac4be9bedc27745e7675" translate="yes" xml:space="preserve">
          <source>.prototype.facet()</source>
          <target state="translated">.prototype.facet()</target>
        </trans-unit>
        <trans-unit id="439bc717431c9d5b45e2204e03e8af301035d80f" translate="yes" xml:space="preserve">
          <source>.prototype.find()</source>
          <target state="translated">.prototype.find()</target>
        </trans-unit>
        <trans-unit id="2204e35e70d5600e1907aa525018d3d4bc6968a5" translate="yes" xml:space="preserve">
          <source>.prototype.findOne()</source>
          <target state="translated">.prototype.findOne()</target>
        </trans-unit>
        <trans-unit id="f0aa2d8a75f1c8810c252b0bfc9f823e624c80cc" translate="yes" xml:space="preserve">
          <source>.prototype.findOneAndDelete()</source>
          <target state="translated">.prototype.findOneAndDelete()</target>
        </trans-unit>
        <trans-unit id="5b5c80496257bab415d899521811854857404a6f" translate="yes" xml:space="preserve">
          <source>.prototype.findOneAndRemove()</source>
          <target state="translated">.prototype.findOneAndRemove()</target>
        </trans-unit>
        <trans-unit id="4bc3cbabe35f82eaef6e69bcac48e4c62d4e2914" translate="yes" xml:space="preserve">
          <source>.prototype.findOneAndReplace()</source>
          <target state="translated">.prototype.findOneAndReplace()</target>
        </trans-unit>
        <trans-unit id="60a0329bd2216bba2f8dc9046b7c240509ea7ea1" translate="yes" xml:space="preserve">
          <source>.prototype.findOneAndUpdate()</source>
          <target state="translated">.prototype.findOneAndUpdate()</target>
        </trans-unit>
        <trans-unit id="a3b06549738828472ac20ec2a4780a4efb4c0ac7" translate="yes" xml:space="preserve">
          <source>.prototype.geometry()</source>
          <target state="translated">.prototype.geometry()</target>
        </trans-unit>
        <trans-unit id="70686020ff1ffdd884d340ca3980707de635d0f0" translate="yes" xml:space="preserve">
          <source>.prototype.get()</source>
          <target state="translated">.prototype.get()</target>
        </trans-unit>
        <trans-unit id="c050c3f212b65e299162deb19cb223d7e60c1495" translate="yes" xml:space="preserve">
          <source>.prototype.getFilter()</source>
          <target state="translated">.prototype.getFilter()</target>
        </trans-unit>
        <trans-unit id="5dce9e6ec3f9f754d52d2e8e804c3d117b504e55" translate="yes" xml:space="preserve">
          <source>.prototype.getOptions()</source>
          <target state="translated">.prototype.getOptions()</target>
        </trans-unit>
        <trans-unit id="f99f13637c03c8595a983aed9336a46dff833571" translate="yes" xml:space="preserve">
          <source>.prototype.getPopulatedPaths()</source>
          <target state="translated">.prototype.getPopulatedPaths()</target>
        </trans-unit>
        <trans-unit id="1dca78935de39b50d6be7747538981207ddd090e" translate="yes" xml:space="preserve">
          <source>.prototype.getQuery()</source>
          <target state="translated">.prototype.getQuery()</target>
        </trans-unit>
        <trans-unit id="5f221f1a338460ed8a770f3e6edcd21a056a92f1" translate="yes" xml:space="preserve">
          <source>.prototype.getUpdate()</source>
          <target state="translated">.prototype.getUpdate()</target>
        </trans-unit>
        <trans-unit id="0a82e1408c3cafe9dd95f5d2f44d18a873f76068" translate="yes" xml:space="preserve">
          <source>.prototype.graphLookup()</source>
          <target state="translated">.prototype.graphLookup()</target>
        </trans-unit>
        <trans-unit id="f0b1fe1f96adab6e560cf587198948f122ef0bc7" translate="yes" xml:space="preserve">
          <source>.prototype.group()</source>
          <target state="translated">.prototype.group()</target>
        </trans-unit>
        <trans-unit id="a838f741666a9f3e013daf1f9f41cfdae2b92cbd" translate="yes" xml:space="preserve">
          <source>.prototype.gt()</source>
          <target state="translated">.prototype.gt()</target>
        </trans-unit>
        <trans-unit id="6071308a114ac785f360cf2c25b6916c1b5d351f" translate="yes" xml:space="preserve">
          <source>.prototype.gte()</source>
          <target state="translated">.prototype.gte()</target>
        </trans-unit>
        <trans-unit id="329a4935d3c4b73c15c9afdd5ce4e03129ea1c0d" translate="yes" xml:space="preserve">
          <source>.prototype.hint()</source>
          <target state="translated">.prototype.hint()</target>
        </trans-unit>
        <trans-unit id="b991b7caaba138f0d2820e8a221430290cb4dca1" translate="yes" xml:space="preserve">
          <source>.prototype.host</source>
          <target state="translated">.prototype.host</target>
        </trans-unit>
        <trans-unit id="2c075ecefd81e145981378a1c9a2bf1056f8f7e7" translate="yes" xml:space="preserve">
          <source>.prototype.id</source>
          <target state="translated">.prototype.id</target>
        </trans-unit>
        <trans-unit id="47ec1d354170d9a16601f678bfe224b41a894c57" translate="yes" xml:space="preserve">
          <source>.prototype.immutable</source>
          <target state="translated">.prototype.immutable</target>
        </trans-unit>
        <trans-unit id="ea7707386d53529bf7a97589ae2c8a029654b1fb" translate="yes" xml:space="preserve">
          <source>.prototype.immutable()</source>
          <target state="translated">.prototype.immutable()</target>
        </trans-unit>
        <trans-unit id="b2126044274ed839eac3637167452e0a332d6e99" translate="yes" xml:space="preserve">
          <source>.prototype.in()</source>
          <target state="translated">.prototype.in()</target>
        </trans-unit>
        <trans-unit id="d66c14b333bce4b8df7dca876c590dc0d6582801" translate="yes" xml:space="preserve">
          <source>.prototype.includes()</source>
          <target state="translated">.prototype.includes()</target>
        </trans-unit>
        <trans-unit id="8c726ed229cff9a09641af3b56a084ad08141499" translate="yes" xml:space="preserve">
          <source>.prototype.increment()</source>
          <target state="translated">.prototype.increment()</target>
        </trans-unit>
        <trans-unit id="a4a86c6f10622e8cc5cb5cfaa7a7210c34eda7d0" translate="yes" xml:space="preserve">
          <source>.prototype.index</source>
          <target state="translated">.prototype.index</target>
        </trans-unit>
        <trans-unit id="18c753dbe295adf9c1b8af7b9d58bddd9f85436c" translate="yes" xml:space="preserve">
          <source>.prototype.index()</source>
          <target state="translated">.prototype.index()</target>
        </trans-unit>
        <trans-unit id="f72931123155d85d3b6fba7382eb63c298e17e44" translate="yes" xml:space="preserve">
          <source>.prototype.indexOf()</source>
          <target state="translated">.prototype.indexOf()</target>
        </trans-unit>
        <trans-unit id="cd57e6952f82bb89957cc165556883a2f715005f" translate="yes" xml:space="preserve">
          <source>.prototype.indexes()</source>
          <target state="translated">.prototype.indexes()</target>
        </trans-unit>
        <trans-unit id="0de02652ad09592f8b252011c63881381be5794e" translate="yes" xml:space="preserve">
          <source>.prototype.init()</source>
          <target state="translated">.prototype.init()</target>
        </trans-unit>
        <trans-unit id="15792c84e6e0bc96157c31493175def836aedc93" translate="yes" xml:space="preserve">
          <source>.prototype.inspect()</source>
          <target state="translated">.prototype.inspect()</target>
        </trans-unit>
        <trans-unit id="b659aff21301835fe0226dc712dccef8e4adfabe" translate="yes" xml:space="preserve">
          <source>.prototype.intersects()</source>
          <target state="translated">.prototype.intersects()</target>
        </trans-unit>
        <trans-unit id="d10c63dd3336532c6dbbc90083ee8e39ca558186" translate="yes" xml:space="preserve">
          <source>.prototype.invalidate()</source>
          <target state="translated">.prototype.invalidate()</target>
        </trans-unit>
        <trans-unit id="22157e5164e4dceacfbf2b39ac1c76ecbe5d5cf5" translate="yes" xml:space="preserve">
          <source>.prototype.isDirectModified()</source>
          <target state="translated">.prototype.isDirectModified()</target>
        </trans-unit>
        <trans-unit id="5a8e88d6121aafbace287468b01479481016eb30" translate="yes" xml:space="preserve">
          <source>.prototype.isDirectSelected()</source>
          <target state="translated">.prototype.isDirectSelected()</target>
        </trans-unit>
        <trans-unit id="8aa6d5585c7afbebbc92d36ccc206e625c39935d" translate="yes" xml:space="preserve">
          <source>.prototype.isInit()</source>
          <target state="translated">.prototype.isInit()</target>
        </trans-unit>
        <trans-unit id="e9109fbb78ad35e93628c7f3a32ad4169a11dc26" translate="yes" xml:space="preserve">
          <source>.prototype.isModified()</source>
          <target state="translated">.prototype.isModified()</target>
        </trans-unit>
        <trans-unit id="407d3766d3c378eb657ea638051c31fe9628dbd3" translate="yes" xml:space="preserve">
          <source>.prototype.isNew</source>
          <target state="translated">.prototype.isNew</target>
        </trans-unit>
        <trans-unit id="5ea8cfe4b03166faecb4f9898d253ffdafda81b7" translate="yes" xml:space="preserve">
          <source>.prototype.isSelected()</source>
          <target state="translated">.prototype.isSelected()</target>
        </trans-unit>
        <trans-unit id="14a0c42f090ce764be2749166f8cf012ffc7d21c" translate="yes" xml:space="preserve">
          <source>.prototype.isValidObjectId()</source>
          <target state="translated">.prototype.isValidObjectId()</target>
        </trans-unit>
        <trans-unit id="1d55b450d5ddbe6e2b8bc12e1394c3ef5e3dae15" translate="yes" xml:space="preserve">
          <source>.prototype.j()</source>
          <target state="translated">.prototype.j()</target>
        </trans-unit>
        <trans-unit id="6d0ad7d315b9220b43b582e75c3e9cef6cfe149e" translate="yes" xml:space="preserve">
          <source>.prototype.lean()</source>
          <target state="translated">.prototype.lean()</target>
        </trans-unit>
        <trans-unit id="cd4f83ef746eb5f1d9968042dd24c0c44c0c529f" translate="yes" xml:space="preserve">
          <source>.prototype.limit()</source>
          <target state="translated">.prototype.limit()</target>
        </trans-unit>
        <trans-unit id="024a39fd9135bdf952d38dd308892a2ee3db8f7f" translate="yes" xml:space="preserve">
          <source>.prototype.loadClass()</source>
          <target state="translated">.prototype.loadClass()</target>
        </trans-unit>
        <trans-unit id="a1275867594f7f7fcd948389116b4fe76e3002fe" translate="yes" xml:space="preserve">
          <source>.prototype.lookup()</source>
          <target state="translated">.prototype.lookup()</target>
        </trans-unit>
        <trans-unit id="938adbdc116aa8dbec2e88cedb2e2da2fd83e4c4" translate="yes" xml:space="preserve">
          <source>.prototype.lt()</source>
          <target state="translated">.prototype.lt()</target>
        </trans-unit>
        <trans-unit id="49603b4fb25fc564189d645e826fe8656e05620d" translate="yes" xml:space="preserve">
          <source>.prototype.lte()</source>
          <target state="translated">.prototype.lte()</target>
        </trans-unit>
        <trans-unit id="58f89c2c2d2d6c7d33ce462329ab5163b48d4bde" translate="yes" xml:space="preserve">
          <source>.prototype.map()</source>
          <target state="translated">.prototype.map()</target>
        </trans-unit>
        <trans-unit id="3576df8538df97d8192ff0e73d5287ded852220b" translate="yes" xml:space="preserve">
          <source>.prototype.markModified()</source>
          <target state="translated">.prototype.markModified()</target>
        </trans-unit>
        <trans-unit id="7425a8294e9c1579588b2eef0e8bfdc45fd616bb" translate="yes" xml:space="preserve">
          <source>.prototype.match()</source>
          <target state="translated">.prototype.match()</target>
        </trans-unit>
        <trans-unit id="96801c4c4e602ee76c9b5a369125078c17191849" translate="yes" xml:space="preserve">
          <source>.prototype.maxDistance()</source>
          <target state="translated">.prototype.maxDistance()</target>
        </trans-unit>
        <trans-unit id="c3a34b0f421aade9610630a11cd6255627bf2919" translate="yes" xml:space="preserve">
          <source>.prototype.maxScan()</source>
          <target state="translated">.prototype.maxScan()</target>
        </trans-unit>
        <trans-unit id="24bece3152ca8546455231911b785a7a1af46abc" translate="yes" xml:space="preserve">
          <source>.prototype.maxTimeMS()</source>
          <target state="translated">.prototype.maxTimeMS()</target>
        </trans-unit>
        <trans-unit id="a2975ba0678aab4d7f5459b438231faeea0db211" translate="yes" xml:space="preserve">
          <source>.prototype.maxscan()</source>
          <target state="translated">.prototype.maxscan()</target>
        </trans-unit>
        <trans-unit id="b6c44fb9a3371c6aa5e88e7add22f2a08f6950d3" translate="yes" xml:space="preserve">
          <source>.prototype.merge()</source>
          <target state="translated">.prototype.merge()</target>
        </trans-unit>
        <trans-unit id="2e10bbcff6956b90129054c2e23c197475fb6e82" translate="yes" xml:space="preserve">
          <source>.prototype.method()</source>
          <target state="translated">.prototype.method()</target>
        </trans-unit>
        <trans-unit id="837dfe9b9166430226ab03f53141f917db1b577e" translate="yes" xml:space="preserve">
          <source>.prototype.mod()</source>
          <target state="translated">.prototype.mod()</target>
        </trans-unit>
        <trans-unit id="c1aa282c8dda7a2272d3df176c96aaf7fec0434b" translate="yes" xml:space="preserve">
          <source>.prototype.model()</source>
          <target state="translated">.prototype.model()</target>
        </trans-unit>
        <trans-unit id="f53d8c7c65c816a6cd3b62bbcee2399333efa66c" translate="yes" xml:space="preserve">
          <source>.prototype.modelName</source>
          <target state="translated">.prototype.modelName</target>
        </trans-unit>
        <trans-unit id="57bc944d7d53fe406ab8ad144751eba6097d6e6d" translate="yes" xml:space="preserve">
          <source>.prototype.modelNames()</source>
          <target state="translated">.prototype.modelNames()</target>
        </trans-unit>
        <trans-unit id="046819686a2e0c970e8d61ffd8f65b9dfb2b2ff5" translate="yes" xml:space="preserve">
          <source>.prototype.models</source>
          <target state="translated">.prototype.models</target>
        </trans-unit>
        <trans-unit id="c67c9bdef28da8f7cb0bcee7807c79ad4aaf3c1a" translate="yes" xml:space="preserve">
          <source>.prototype.modifiedPaths()</source>
          <target state="translated">.prototype.modifiedPaths()</target>
        </trans-unit>
        <trans-unit id="caab8cdb9626331e208804cb784a8ab5de64175f" translate="yes" xml:space="preserve">
          <source>.prototype.mongo</source>
          <target state="translated">.prototype.mongo</target>
        </trans-unit>
        <trans-unit id="ee562b29ac29aa7719ff18e4ab8c9cc3bbf40730" translate="yes" xml:space="preserve">
          <source>.prototype.mongooseOptions()</source>
          <target state="translated">.prototype.mongooseOptions()</target>
        </trans-unit>
        <trans-unit id="ce17cb767e445f6a4d1a8fba78738071073dc310" translate="yes" xml:space="preserve">
          <source>.prototype.mquery</source>
          <target state="translated">.prototype.mquery</target>
        </trans-unit>
        <trans-unit id="84821ffb45c608f2bbe5c4a8af8797d611e1a381" translate="yes" xml:space="preserve">
          <source>.prototype.name</source>
          <target state="translated">.prototype.name</target>
        </trans-unit>
        <trans-unit id="f2b614e790a84c73e75bd5cfb868aad863af41f1" translate="yes" xml:space="preserve">
          <source>.prototype.ne()</source>
          <target state="translated">.prototype.ne()</target>
        </trans-unit>
        <trans-unit id="5d0a7d89c47f50ddcc57640964f6374dea6a1c95" translate="yes" xml:space="preserve">
          <source>.prototype.near()</source>
          <target state="translated">.prototype.near()</target>
        </trans-unit>
        <trans-unit id="ea4160e678ebaf6c3decc6d977144d2bd483619a" translate="yes" xml:space="preserve">
          <source>.prototype.nearSphere()</source>
          <target state="translated">.prototype.nearSphere()</target>
        </trans-unit>
        <trans-unit id="c79eb7eab897a2b1d96679196498a3bd4095ec93" translate="yes" xml:space="preserve">
          <source>.prototype.next()</source>
          <target state="translated">.prototype.next()</target>
        </trans-unit>
        <trans-unit id="cc262244711a6b49ad6af38a7caa6c9aa625e90e" translate="yes" xml:space="preserve">
          <source>.prototype.nin()</source>
          <target state="translated">.prototype.nin()</target>
        </trans-unit>
        <trans-unit id="bdcbbb07f084dfb69a5bdce371406d8fa7d17088" translate="yes" xml:space="preserve">
          <source>.prototype.nonAtomicPush()</source>
          <target state="translated">.prototype.nonAtomicPush()</target>
        </trans-unit>
        <trans-unit id="469376a88518290f110a1dfec30890c6fe629007" translate="yes" xml:space="preserve">
          <source>.prototype.nor()</source>
          <target state="translated">.prototype.nor()</target>
        </trans-unit>
        <trans-unit id="3bcd40cb6acf4495b003faaf2d71079f8bc56129" translate="yes" xml:space="preserve">
          <source>.prototype.now()</source>
          <target state="translated">.prototype.now()</target>
        </trans-unit>
        <trans-unit id="750c14df51de67cef731d2abfe96fff3f98ffb41" translate="yes" xml:space="preserve">
          <source>.prototype.obj</source>
          <target state="translated">.prototype.obj</target>
        </trans-unit>
        <trans-unit id="2ff3b02321b529dee603066f7eb3ce1a36e8b732" translate="yes" xml:space="preserve">
          <source>.prototype.openUri()</source>
          <target state="translated">.prototype.openUri()</target>
        </trans-unit>
        <trans-unit id="7175a43c1ba91bc210df7b717ceca2cd1e85406d" translate="yes" xml:space="preserve">
          <source>.prototype.option()</source>
          <target state="translated">.prototype.option()</target>
        </trans-unit>
        <trans-unit id="57ed680442dab47fbf586af65a35094ed2537718" translate="yes" xml:space="preserve">
          <source>.prototype.options</source>
          <target state="translated">.prototype.options</target>
        </trans-unit>
        <trans-unit id="21d137709194ec5389b67fb13f6707c9b19ece95" translate="yes" xml:space="preserve">
          <source>.prototype.or()</source>
          <target state="translated">.prototype.or()</target>
        </trans-unit>
        <trans-unit id="783a85f5c2ffabc7986014e6936b982f9a90b882" translate="yes" xml:space="preserve">
          <source>.prototype.orFail()</source>
          <target state="translated">.prototype.orFail()</target>
        </trans-unit>
        <trans-unit id="d64e0c86c0d9ff6344d5557e84a48614ef7db377" translate="yes" xml:space="preserve">
          <source>.prototype.overwrite()</source>
          <target state="translated">.prototype.overwrite()</target>
        </trans-unit>
        <trans-unit id="1f3ce22e27aa980aa7507734b2505ad8c8a184c8" translate="yes" xml:space="preserve">
          <source>.prototype.pass</source>
          <target state="translated">.prototype.pass</target>
        </trans-unit>
        <trans-unit id="d001a3ca7ef28526a8559cd03cfc4a94d27b3c29" translate="yes" xml:space="preserve">
          <source>.prototype.path()</source>
          <target state="translated">.prototype.path()</target>
        </trans-unit>
        <trans-unit id="c45063e12633edc384d5a77ac3979a62099b44ae" translate="yes" xml:space="preserve">
          <source>.prototype.pathType()</source>
          <target state="translated">.prototype.pathType()</target>
        </trans-unit>
        <trans-unit id="5590c446da682bad913f4b8f768b08fb3218f759" translate="yes" xml:space="preserve">
          <source>.prototype.paths</source>
          <target state="translated">.prototype.paths</target>
        </trans-unit>
        <trans-unit id="37b09f1c9f04e4e0976852f9086639efc94b1a1f" translate="yes" xml:space="preserve">
          <source>.prototype.pick()</source>
          <target state="translated">.prototype.pick()</target>
        </trans-unit>
        <trans-unit id="21986294d5760e73cf3e3bac0b89956dfd2828f1" translate="yes" xml:space="preserve">
          <source>.prototype.pipeline()</source>
          <target state="translated">.prototype.pipeline()</target>
        </trans-unit>
        <trans-unit id="8752527103b9922f53176ad05abec1101924880f" translate="yes" xml:space="preserve">
          <source>.prototype.plugin()</source>
          <target state="translated">.prototype.plugin()</target>
        </trans-unit>
        <trans-unit id="1b5025cf599f7bcb1e0932734849b79aaddfe991" translate="yes" xml:space="preserve">
          <source>.prototype.plugins</source>
          <target state="translated">.prototype.plugins</target>
        </trans-unit>
        <trans-unit id="e55028d9a20352050d41eb1089934572753d1329" translate="yes" xml:space="preserve">
          <source>.prototype.pluralize()</source>
          <target state="translated">.prototype.pluralize()</target>
        </trans-unit>
        <trans-unit id="435f8b5b3f29a3d72478bf042acccd27b2fba856" translate="yes" xml:space="preserve">
          <source>.prototype.polygon()</source>
          <target state="translated">.prototype.polygon()</target>
        </trans-unit>
        <trans-unit id="c95911877778b1a844795b6dcddf8b84145d50b4" translate="yes" xml:space="preserve">
          <source>.prototype.pop()</source>
          <target state="translated">.prototype.pop()</target>
        </trans-unit>
        <trans-unit id="e0df72d4d95df1aa3845eda58465c29a025ab479" translate="yes" xml:space="preserve">
          <source>.prototype.populate()</source>
          <target state="translated">.prototype.populate()</target>
        </trans-unit>
        <trans-unit id="17285d76b09f76a4e22e2f55a5bba5a06ac5baeb" translate="yes" xml:space="preserve">
          <source>.prototype.populated()</source>
          <target state="translated">.prototype.populated()</target>
        </trans-unit>
        <trans-unit id="45b4d167c64cecb7cfa0aa08845cd051e069a056" translate="yes" xml:space="preserve">
          <source>.prototype.port</source>
          <target state="translated">.prototype.port</target>
        </trans-unit>
        <trans-unit id="db4d3bfbc66c88b088ed9c22c0790a3be95d598f" translate="yes" xml:space="preserve">
          <source>.prototype.post()</source>
          <target state="translated">.prototype.post()</target>
        </trans-unit>
        <trans-unit id="bdc8f4a906791bbabc90f6f6497b451a5eae712d" translate="yes" xml:space="preserve">
          <source>.prototype.pre()</source>
          <target state="translated">.prototype.pre()</target>
        </trans-unit>
        <trans-unit id="a197e9676060986084b5ad4de15bf790c719cafc" translate="yes" xml:space="preserve">
          <source>.prototype.project()</source>
          <target state="translated">.prototype.project()</target>
        </trans-unit>
        <trans-unit id="c1ec94d1495d9de0aefeae54b3a8918c9f0923b7" translate="yes" xml:space="preserve">
          <source>.prototype.projection()</source>
          <target state="translated">.prototype.projection()</target>
        </trans-unit>
        <trans-unit id="6bce03805e3b6e58bd20b03f86acde5c920149a0" translate="yes" xml:space="preserve">
          <source>.prototype.pull()</source>
          <target state="translated">.prototype.pull()</target>
        </trans-unit>
        <trans-unit id="6952cd9fe2472e4f5f766a5c7009cc6bf6bde0d9" translate="yes" xml:space="preserve">
          <source>.prototype.push()</source>
          <target state="translated">.prototype.push()</target>
        </trans-unit>
        <trans-unit id="b97ee7d576eec2e8d09ae1d7b7490ef0254a57dd" translate="yes" xml:space="preserve">
          <source>.prototype.queue()</source>
          <target state="translated">.prototype.queue()</target>
        </trans-unit>
        <trans-unit id="3081fb9bc72335a7d403704a85502cb5cf500426" translate="yes" xml:space="preserve">
          <source>.prototype.read()</source>
          <target state="translated">.prototype.read()</target>
        </trans-unit>
        <trans-unit id="efa19fcd9a0394b2ee85a34dad5e48a31c9f5ea4" translate="yes" xml:space="preserve">
          <source>.prototype.readConcern()</source>
          <target state="translated">.prototype.readConcern()</target>
        </trans-unit>
        <trans-unit id="36340ffd6f01cb5741a3b36bdaf2f5e90651031e" translate="yes" xml:space="preserve">
          <source>.prototype.readyState</source>
          <target state="translated">.prototype.readyState</target>
        </trans-unit>
        <trans-unit id="55d531a64e4d65e31ae1fe80c6a53939c2059389" translate="yes" xml:space="preserve">
          <source>.prototype.redact()</source>
          <target state="translated">.prototype.redact()</target>
        </trans-unit>
        <trans-unit id="4f8823152fcd00595681cb1e8621b55cadf49bf1" translate="yes" xml:space="preserve">
          <source>.prototype.ref</source>
          <target state="translated">.prototype.ref</target>
        </trans-unit>
        <trans-unit id="f479cc99a8ef2b1cc0d8ad272b32f85d1bd62e3a" translate="yes" xml:space="preserve">
          <source>.prototype.ref()</source>
          <target state="translated">.prototype.ref()</target>
        </trans-unit>
        <trans-unit id="f73d7d02f69f14d8ffe9d344587f14f264f598da" translate="yes" xml:space="preserve">
          <source>.prototype.regex()</source>
          <target state="translated">.prototype.regex()</target>
        </trans-unit>
        <trans-unit id="71035a14bd56186a7bb03d9de5b300d568efcac4" translate="yes" xml:space="preserve">
          <source>.prototype.remove()</source>
          <target state="translated">.prototype.remove()</target>
        </trans-unit>
        <trans-unit id="4b0da2a2e147dc0eb16cee839e50aaa9b6a8e5f5" translate="yes" xml:space="preserve">
          <source>.prototype.replaceOne()</source>
          <target state="translated">.prototype.replaceOne()</target>
        </trans-unit>
        <trans-unit id="cfdbddd18014c3de86a1155c5e1e43fce5be41ca" translate="yes" xml:space="preserve">
          <source>.prototype.replaceRoot()</source>
          <target state="translated">.prototype.replaceRoot()</target>
        </trans-unit>
        <trans-unit id="924d478b25a2108bdf2ea7fe52dff366ad3f9fad" translate="yes" xml:space="preserve">
          <source>.prototype.required</source>
          <target state="translated">.prototype.required</target>
        </trans-unit>
        <trans-unit id="d932a7960b760098c12e048c59f3c07cd8c6c37f" translate="yes" xml:space="preserve">
          <source>.prototype.required()</source>
          <target state="translated">.prototype.required()</target>
        </trans-unit>
        <trans-unit id="4063856f5d7c66dc3b90d0d6f8f6288f9fad9653" translate="yes" xml:space="preserve">
          <source>.prototype.requiredPaths()</source>
          <target state="translated">.prototype.requiredPaths()</target>
        </trans-unit>
        <trans-unit id="7194b406638d4afb5421efd3cfe59f39c295cf51" translate="yes" xml:space="preserve">
          <source>.prototype.sample()</source>
          <target state="translated">.prototype.sample()</target>
        </trans-unit>
        <trans-unit id="f7322f1d569c4dec62ea88b351327969645dd7e1" translate="yes" xml:space="preserve">
          <source>.prototype.save()</source>
          <target state="translated">.prototype.save()</target>
        </trans-unit>
        <trans-unit id="6629f81749f0356f265249bc25a767fa9f585f09" translate="yes" xml:space="preserve">
          <source>.prototype.schema</source>
          <target state="translated">.prototype.schema</target>
        </trans-unit>
        <trans-unit id="881915719468dbc120aab8126165d105729bfd70" translate="yes" xml:space="preserve">
          <source>.prototype.select</source>
          <target state="translated">.prototype.select</target>
        </trans-unit>
        <trans-unit id="3a00e3c21c1835b350a57043fb8f9b5d66d65d60" translate="yes" xml:space="preserve">
          <source>.prototype.select()</source>
          <target state="translated">.prototype.select()</target>
        </trans-unit>
        <trans-unit id="ee93006a488cded4f788a8532ebfd1b000a7eca5" translate="yes" xml:space="preserve">
          <source>.prototype.selected()</source>
          <target state="translated">.prototype.selected()</target>
        </trans-unit>
        <trans-unit id="24edc39dfc5872b0eb3e03de28c7caf7ce900b71" translate="yes" xml:space="preserve">
          <source>.prototype.selectedExclusively()</source>
          <target state="translated">.prototype.selectedExclusively()</target>
        </trans-unit>
        <trans-unit id="5ba23f5ea52bd61fcb721e2be096b124e50d042e" translate="yes" xml:space="preserve">
          <source>.prototype.selectedInclusively()</source>
          <target state="translated">.prototype.selectedInclusively()</target>
        </trans-unit>
        <trans-unit id="6f52a4bfb83e0ebb535f7b4353895f903853b7a2" translate="yes" xml:space="preserve">
          <source>.prototype.session()</source>
          <target state="translated">.prototype.session()</target>
        </trans-unit>
        <trans-unit id="bdc5b9ed565294521fff41fdf7e128a0b0714027" translate="yes" xml:space="preserve">
          <source>.prototype.set()</source>
          <target state="translated">.prototype.set()</target>
        </trans-unit>
        <trans-unit id="9b43aff97214be9f9c9a7fef1c41e0a33ada4d98" translate="yes" xml:space="preserve">
          <source>.prototype.setOptions()</source>
          <target state="translated">.prototype.setOptions()</target>
        </trans-unit>
        <trans-unit id="f7ba9ce1ea366d33fd1236f5b0175fabc0d26ee9" translate="yes" xml:space="preserve">
          <source>.prototype.setQuery()</source>
          <target state="translated">.prototype.setQuery()</target>
        </trans-unit>
        <trans-unit id="8a54297e48dad4886edb9ba418b404b4f0b52eee" translate="yes" xml:space="preserve">
          <source>.prototype.setUpdate()</source>
          <target state="translated">.prototype.setUpdate()</target>
        </trans-unit>
        <trans-unit id="f7193c150453f4548fde77c02f06d681ded0dc84" translate="yes" xml:space="preserve">
          <source>.prototype.shift()</source>
          <target state="translated">.prototype.shift()</target>
        </trans-unit>
        <trans-unit id="40a70f1d9f6bb9040483e356bb3d9c0240b459bd" translate="yes" xml:space="preserve">
          <source>.prototype.size()</source>
          <target state="translated">.prototype.size()</target>
        </trans-unit>
        <trans-unit id="1b135e9adeac6a71da1131bbe5b6d92cd7e7abe0" translate="yes" xml:space="preserve">
          <source>.prototype.skip()</source>
          <target state="translated">.prototype.skip()</target>
        </trans-unit>
        <trans-unit id="daf05f712faa3afa4f6bac5fad9157be9601a0cd" translate="yes" xml:space="preserve">
          <source>.prototype.slaveOk()</source>
          <target state="translated">.prototype.slaveOk()</target>
        </trans-unit>
        <trans-unit id="ba4ec193ae6bbffcf45d96b54eb821134dabce62" translate="yes" xml:space="preserve">
          <source>.prototype.slice()</source>
          <target state="translated">.prototype.slice()</target>
        </trans-unit>
        <trans-unit id="a774c4fd68cbc442820505c4b21dfd278a053c07" translate="yes" xml:space="preserve">
          <source>.prototype.snapshot()</source>
          <target state="translated">.prototype.snapshot()</target>
        </trans-unit>
        <trans-unit id="c150f18135cde5d9b3f94e9518b3bf2fee61f284" translate="yes" xml:space="preserve">
          <source>.prototype.sort()</source>
          <target state="translated">.prototype.sort()</target>
        </trans-unit>
        <trans-unit id="b7401a0afb4981db0ebbeaea7470bd10463f4a0f" translate="yes" xml:space="preserve">
          <source>.prototype.sortByCount()</source>
          <target state="translated">.prototype.sortByCount()</target>
        </trans-unit>
        <trans-unit id="9e3eade545bc64b805d6232a042667c28abcf9a3" translate="yes" xml:space="preserve">
          <source>.prototype.sparse</source>
          <target state="translated">.prototype.sparse</target>
        </trans-unit>
        <trans-unit id="0c3eb02e754d87342be94e0b7b48cd752cc03e5e" translate="yes" xml:space="preserve">
          <source>.prototype.sparse()</source>
          <target state="translated">.prototype.sparse()</target>
        </trans-unit>
        <trans-unit id="197a60ff41739caa988833e1a8d8594fa1f0dcfc" translate="yes" xml:space="preserve">
          <source>.prototype.splice()</source>
          <target state="translated">.prototype.splice()</target>
        </trans-unit>
        <trans-unit id="df3058cb4732e8a83a4ea6748ed88187a31f3070" translate="yes" xml:space="preserve">
          <source>.prototype.startSession()</source>
          <target state="translated">.prototype.startSession()</target>
        </trans-unit>
        <trans-unit id="095ce3d3a88713d49920688d5114479dce12bbf5" translate="yes" xml:space="preserve">
          <source>.prototype.static()</source>
          <target state="translated">.prototype.static()</target>
        </trans-unit>
        <trans-unit id="aafd2156acc085f3463e24e0961299913968ad29" translate="yes" xml:space="preserve">
          <source>.prototype.tailable()</source>
          <target state="translated">.prototype.tailable()</target>
        </trans-unit>
        <trans-unit id="0c1af9272886c87a1dac46d7d088596e91849faa" translate="yes" xml:space="preserve">
          <source>.prototype.text</source>
          <target state="translated">.prototype.text</target>
        </trans-unit>
        <trans-unit id="848f601d4e67df7bf684a8fe8ac43fb4957c657b" translate="yes" xml:space="preserve">
          <source>.prototype.text()</source>
          <target state="translated">.prototype.text()</target>
        </trans-unit>
        <trans-unit id="c6d6a35c26e167686edb8e11700f2378b0428255" translate="yes" xml:space="preserve">
          <source>.prototype.then()</source>
          <target state="translated">.prototype.then()</target>
        </trans-unit>
        <trans-unit id="6b2671f43a158e92d36bac096747a860cd1b7852" translate="yes" xml:space="preserve">
          <source>.prototype.toConstructor()</source>
          <target state="translated">.prototype.toConstructor()</target>
        </trans-unit>
        <trans-unit id="ca8f5b17145c550ea90640a458ecd37ca8bd5c9e" translate="yes" xml:space="preserve">
          <source>.prototype.toJSON()</source>
          <target state="translated">.prototype.toJSON()</target>
        </trans-unit>
        <trans-unit id="78dfa5847fc071653030fc4395a05ecb3bae2751" translate="yes" xml:space="preserve">
          <source>.prototype.toObject()</source>
          <target state="translated">.prototype.toObject()</target>
        </trans-unit>
        <trans-unit id="9887971fb5f66ebb5b2c580df1ade5a62eee5628" translate="yes" xml:space="preserve">
          <source>.prototype.toString()</source>
          <target state="translated">.prototype.toString()</target>
        </trans-unit>
        <trans-unit id="faaf7aecdac9d3e0561c6ee1f24bb667bb8a2b93" translate="yes" xml:space="preserve">
          <source>.prototype.type</source>
          <target state="translated">.prototype.type</target>
        </trans-unit>
        <trans-unit id="cbe9af191b9ce3ee3fd8a46ad1c60c180e2ae106" translate="yes" xml:space="preserve">
          <source>.prototype.unique</source>
          <target state="translated">.prototype.unique</target>
        </trans-unit>
        <trans-unit id="31851c5f6e4d277ca59938c7d584062482acca5c" translate="yes" xml:space="preserve">
          <source>.prototype.unique()</source>
          <target state="translated">.prototype.unique()</target>
        </trans-unit>
        <trans-unit id="d2de4341e410065c1ce4ab2df8641b0f855da1ea" translate="yes" xml:space="preserve">
          <source>.prototype.unmarkModified()</source>
          <target state="translated">.prototype.unmarkModified()</target>
        </trans-unit>
        <trans-unit id="48e9dec78fa1fc5b48835ffc75abd5b51bdcea26" translate="yes" xml:space="preserve">
          <source>.prototype.unshift()</source>
          <target state="translated">.prototype.unshift()</target>
        </trans-unit>
        <trans-unit id="b736fef4b60a1af15c5043c7aea4ee78e313bbab" translate="yes" xml:space="preserve">
          <source>.prototype.unwind()</source>
          <target state="translated">.prototype.unwind()</target>
        </trans-unit>
        <trans-unit id="4407b955bde17cec43354314d8d0976048081fe4" translate="yes" xml:space="preserve">
          <source>.prototype.update()</source>
          <target state="translated">.prototype.update()</target>
        </trans-unit>
        <trans-unit id="efadf5ce346f1754594371b57e75081743e4e5d3" translate="yes" xml:space="preserve">
          <source>.prototype.updateMany()</source>
          <target state="translated">.prototype.updateMany()</target>
        </trans-unit>
        <trans-unit id="7c909ab990772f310bb1564d18e2e25e6cd3b96f" translate="yes" xml:space="preserve">
          <source>.prototype.updateOne()</source>
          <target state="translated">.prototype.updateOne()</target>
        </trans-unit>
        <trans-unit id="7648e3fda5c41ba7e84b59f845a4e2ab832c8372" translate="yes" xml:space="preserve">
          <source>.prototype.use$geoWithin</source>
          <target state="translated">.prototype.use$geoWithin</target>
        </trans-unit>
        <trans-unit id="af79773cc31436cd4d3036a14e4e8630db5174cb" translate="yes" xml:space="preserve">
          <source>.prototype.useDb()</source>
          <target state="translated">.prototype.useDb()</target>
        </trans-unit>
        <trans-unit id="8a2c96a213db34ef44cce7bd68e011bfb98fe156" translate="yes" xml:space="preserve">
          <source>.prototype.user</source>
          <target state="translated">.prototype.user</target>
        </trans-unit>
        <trans-unit id="adbefb0aecf170519569d85fe3a20d530c816d13" translate="yes" xml:space="preserve">
          <source>.prototype.validate</source>
          <target state="translated">.prototype.validate</target>
        </trans-unit>
        <trans-unit id="d6f1008357fa91a7aa86d6f73b14219b3b04df51" translate="yes" xml:space="preserve">
          <source>.prototype.validate()</source>
          <target state="translated">.prototype.validate()</target>
        </trans-unit>
        <trans-unit id="9f7038018fcaff2486b38f40711490b09e3095ee" translate="yes" xml:space="preserve">
          <source>.prototype.validateSync()</source>
          <target state="translated">.prototype.validateSync()</target>
        </trans-unit>
        <trans-unit id="5ae15623bc52a77622d5c00a3b23a1849fbce60e" translate="yes" xml:space="preserve">
          <source>.prototype.version</source>
          <target state="translated">.prototype.version</target>
        </trans-unit>
        <trans-unit id="d6f6d2956df97d7d22b1b7851fd005c0a0ff559b" translate="yes" xml:space="preserve">
          <source>.prototype.virtual()</source>
          <target state="translated">.prototype.virtual()</target>
        </trans-unit>
        <trans-unit id="4291f9b32c2c939679b1ed2d03e5a6f4da6ef0d8" translate="yes" xml:space="preserve">
          <source>.prototype.virtualpath()</source>
          <target state="translated">.prototype.virtualpath()</target>
        </trans-unit>
        <trans-unit id="cfcb02b6f0a09346dba03ccfb2d6672622fd6cab" translate="yes" xml:space="preserve">
          <source>.prototype.w()</source>
          <target state="translated">.prototype.w()</target>
        </trans-unit>
        <trans-unit id="9ce23ce6f88dc6741c49d34c4375c0e95fed7290" translate="yes" xml:space="preserve">
          <source>.prototype.where()</source>
          <target state="translated">.prototype.where()</target>
        </trans-unit>
        <trans-unit id="f2e1607baea42896412cbf79f83c7d6e14941e87" translate="yes" xml:space="preserve">
          <source>.prototype.within()</source>
          <target state="translated">.prototype.within()</target>
        </trans-unit>
        <trans-unit id="38bbb9a32bf76748c260f247390308525b9f2a9e" translate="yes" xml:space="preserve">
          <source>.prototype.wtimeout()</source>
          <target state="translated">.prototype.wtimeout()</target>
        </trans-unit>
        <trans-unit id="22e64e3b5ec2e18b81aa750d08ffa3bff79b896b" translate="yes" xml:space="preserve">
          <source>.remove()</source>
          <target state="translated">.remove()</target>
        </trans-unit>
        <trans-unit id="fb2b09c8d818f8e58149003e7ed36c132a534352" translate="yes" xml:space="preserve">
          <source>.replaceOne()</source>
          <target state="translated">.replaceOne()</target>
        </trans-unit>
        <trans-unit id="da8bd941fbaa625388f3621fa067af134f213e5c" translate="yes" xml:space="preserve">
          <source>.reserved</source>
          <target state="translated">.reserved</target>
        </trans-unit>
        <trans-unit id="9dac88115aafc472ed68574b942ca0f413ba0fdc" translate="yes" xml:space="preserve">
          <source>.schemaName</source>
          <target state="translated">.schemaName</target>
        </trans-unit>
        <trans-unit id="a4525204d9f99460243878d457ee4fb5556877f3" translate="yes" xml:space="preserve">
          <source>.startSession()</source>
          <target state="translated">.startSession()</target>
        </trans-unit>
        <trans-unit id="8c81a20b6d03ecf6abb4fee7255c4a0383c3168d" translate="yes" xml:space="preserve">
          <source>.syncIndexes()</source>
          <target state="translated">.syncIndexes()</target>
        </trans-unit>
        <trans-unit id="01651c0d87ae1608e84d7a3689c7760ef9132e7c" translate="yes" xml:space="preserve">
          <source>.translateAliases()</source>
          <target state="translated">.translateAliases()</target>
        </trans-unit>
        <trans-unit id="586e51964c7545b834914728b8253d36ec546cb3" translate="yes" xml:space="preserve">
          <source>.update()</source>
          <target state="translated">.update()</target>
        </trans-unit>
        <trans-unit id="ece2faa7c52e0db79e3c9fa053956926c3f411be" translate="yes" xml:space="preserve">
          <source>.updateMany()</source>
          <target state="translated">.updateMany()</target>
        </trans-unit>
        <trans-unit id="76cb596eb4ecacb72d84b3c30de18b6e3a85ae3f" translate="yes" xml:space="preserve">
          <source>.updateOne()</source>
          <target state="translated">.updateOne()</target>
        </trans-unit>
        <trans-unit id="e80fdad76057b2cdd7fdf5e0986056e59a4973e0" translate="yes" xml:space="preserve">
          <source>.validate()</source>
          <target state="translated">.validate()</target>
        </trans-unit>
        <trans-unit id="4cdb872381efbe3507f5382859af453cdf7f80ef" translate="yes" xml:space="preserve">
          <source>.watch()</source>
          <target state="translated">.watch()</target>
        </trans-unit>
        <trans-unit id="5ef852ff8afae23ed766e2efe539bbbe7f511989" translate="yes" xml:space="preserve">
          <source>.where()</source>
          <target state="translated">.where()</target>
        </trans-unit>
        <trans-unit id="68f8afebaf12603f44a98e9cce8a472b5faf2aad" translate="yes" xml:space="preserve">
          <source>0 = disconnected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86954b1ba914840c9a1b3a77ca935c5e2230f9a" translate="yes" xml:space="preserve">
          <source>1 = connected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce1fed8e271702e90849be7c05873e352354375" translate="yes" xml:space="preserve">
          <source>2 = connecting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72072f1a79a5380e177b30e9d4f9e9028c3ca86f" translate="yes" xml:space="preserve">
          <source>3 = disconnecting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd18ac2764f48a188acd6da047218b4d62b346a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#schema-boolean-js&quot;&gt;Boolean&lt;/a&gt; | Bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6c9e6e3e1bb27f25600aa0a21dfbae47123d30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#schema-objectid-js&quot;&gt;ObjectId&lt;/a&gt; | Oid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aac10fc027a7cb717c82aea6e416eaa8f23a292" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#_id&quot;&gt;_id&lt;/a&gt;: bool - defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3571205b9c1c0c0e63b523d7354aca4ad4eb3c77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#autoCreate&quot;&gt;autoCreate&lt;/a&gt;: bool - defaults to null (which means use the connection's autoCreate option)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e9d9220ca4abb1d58ec527d1a14aa1e0c7ca28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#autoIndex&quot;&gt;autoIndex&lt;/a&gt;: bool - defaults to null (which means use the connection's autoIndex option)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f39e1e08083fd24137f5d526809e5502f09ed4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#bufferCommands&quot;&gt;bufferCommands&lt;/a&gt;: bool - defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ea143fbda034ad1b099f3cbfb4fd67a94bb166" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#capped&quot;&gt;capped&lt;/a&gt;: bool - defaults to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b15b04e595fb80f333ff78899ed74c99a79306f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#collation&quot;&gt;collation&lt;/a&gt;: object - defaults to null (which means use no collation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98f8bd88ecdf8388a31c2a91053eaf86ca47379" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#collection&quot;&gt;collection&lt;/a&gt;: string - no default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b18a3409254d6f70481076574722d1eb81caaf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#id&quot;&gt;id&lt;/a&gt;: bool - defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f93343be381e4cc57a2a28a43c84537ba21f31" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#minimize&quot;&gt;minimize&lt;/a&gt;: bool - controls &lt;a href=&quot;#document_Document-toObject&quot;&gt;document#toObject&lt;/a&gt; behavior when called manually - defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765cd347f83bdb160eb4d0cde5043589221f68af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#read&quot;&gt;read&lt;/a&gt;: string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148f08b61d53d1301d3d129bcafabe65563dc736" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#selectPopulatedPaths&quot;&gt;selectPopulatedPaths&lt;/a&gt;: boolean - defaults to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44fb064953725bef65902fe5568b7f98d9af0fdf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#shardKey&quot;&gt;shardKey&lt;/a&gt;: object - defaults to &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530cc023be6bd325837ca10eefbb88614e8df641" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#skipVersioning&quot;&gt;skipVersioning&lt;/a&gt;: object - paths to exclude from versioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34a2b5dd70097104bd43e107cd72c1a27d8a5e8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#storeSubdocValidationError&quot;&gt;storeSubdocValidationError&lt;/a&gt;: boolean - Defaults to true. If false, Mongoose will wrap validation errors in single nested document subpaths into a single validation error on the single nested subdoc's path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6895332c49caa2ed453478624069b0614de90f26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#strict&quot;&gt;strict&lt;/a&gt;: bool - defaults to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c68c05b915decbe8870d71574a2b1ec37dc1ae3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#strictQuery&quot;&gt;strictQuery&lt;/a&gt;: bool - defaults to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107fa4aece649a3a758fc46c59efd39ede69cded" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#timestamps&quot;&gt;timestamps&lt;/a&gt;: If &lt;code&gt;timestamps&lt;/code&gt; is set in the schema, set this option to &lt;code&gt;false&lt;/code&gt; to skip timestamps for that particular update. Has no effect if &lt;code&gt;timestamps&lt;/code&gt; is not enabled in the schema options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b538a253d3c0cdbc6b6115dd75e71ab2af49bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#timestamps&quot;&gt;timestamps&lt;/a&gt;: object or boolean - defaults to &lt;code&gt;false&lt;/code&gt;. If true, Mongoose adds &lt;code&gt;createdAt&lt;/code&gt; and &lt;code&gt;updatedAt&lt;/code&gt; properties to your schema and manages those properties for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428a16487f69f76f80c5c77e60e680e33ed17b07" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#toJSON&quot;&gt;toJSON&lt;/a&gt; - object - no default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ef992e56242661c7d88f0d13fe7e7388736631" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#toObject&quot;&gt;toObject&lt;/a&gt; - object - no default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f33146a0705baf615cfb4c26282fc04dc89138e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#typeKey&quot;&gt;typeKey&lt;/a&gt; - string - defaults to 'type'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c12c6871186b91e2f4dda0bb995674f5eab022e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#typePojoToMixed&quot;&gt;typePojoToMixed&lt;/a&gt; - boolean - defaults to true. Determines whether a type set to a POJO becomes a Mixed path or a Subdocument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749292bb3c7409de8ba4504c499da08b8c389123" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#useNestedStrict&quot;&gt;useNestedStrict&lt;/a&gt; - boolean - defaults to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccced08c10f57b4ecbc2551da8f56a1112dbc9d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#validateBeforeSave&quot;&gt;validateBeforeSave&lt;/a&gt; - bool - defaults to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de63854ad1749e6e5dca315158727c76af68485" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#versionKey&quot;&gt;versionKey&lt;/a&gt;: string - defaults to &quot;__v&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fad58b4bb83e21deb1214d02bb69d83904283d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../guide#writeConcern&quot;&gt;writeConcern&lt;/a&gt;: object - defaults to null, use to override &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/&quot;&gt;the MongoDB server's default write concern settings&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e67e05e6028ad61df59572ca5ae0a9f69e2aa6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../populate&quot;&gt;Populate&lt;/a&gt; works with &lt;code&gt;lean()&lt;/code&gt;. If you use both &lt;code&gt;populate()&lt;/code&gt; and &lt;code&gt;lean()&lt;/code&gt;, the &lt;code&gt;lean&lt;/code&gt; option propagates to the populated documents as well. In the below example, both the top-level 'Group' documents and the populated 'Person' documents will be lean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8dee52e9cb17c9e914650b1ae1f671ff5b6ee4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../populate#populate-virtuals&quot;&gt;Virtual populate&lt;/a&gt; also works with lean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f55432643ad40f18d2290f84030bbb2f2f0bf71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../tutorials/lean&quot;&gt;Lean is great for high-performance, read-only cases&lt;/a&gt;, especially when combined with &lt;a href=&quot;../queries#streaming&quot;&gt;cursors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476b06e6195ef5246e854461e93dc43a81a4d8ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api/document#document_Document-init&quot;&gt;init&lt;/a&gt; (note: init hooks are &lt;a href=&quot;#synchronous&quot;&gt;synchronous&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9eb0be0ef1c0884faf31dffc21e84c910f6696a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://mongoosejs.com/docs/queries.html&quot;&gt;Mongoose queries&lt;/a&gt; are &lt;strong&gt;not&lt;/strong&gt; promises. They have a &lt;code&gt;.then()&lt;/code&gt; function for &lt;a href=&quot;https://www.npmjs.com/package/co&quot;&gt;co&lt;/a&gt; and async/await as a convenience. If you need a fully-fledged promise, use the &lt;code&gt;.exec()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbf34228c7599f42df5ec40d1a0a530db31a70b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://plugins.mongoosejs.io/plugins/autopopulate&quot;&gt;mongoose-autopopulate&lt;/a&gt;: Always &lt;a href=&quot;populate&quot;&gt;&lt;code&gt;populate()&lt;/code&gt;&lt;/a&gt; certain fields in your Mongoose schemas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d7d74f5dacd50e0a3f705017ef4f99d70c18c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://plugins.mongoosejs.io/plugins/lean-virtuals&quot;&gt;mongoose-lean-virtuals&lt;/a&gt;: Attach virtuals to the results of Mongoose queries when using &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;&lt;code&gt;.lean()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6af9f618acca567078d610c083556e7d657518d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;Built-in &lt;code&gt;Date&lt;/code&gt; methods&lt;/a&gt; are &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/1598&quot;&gt;&lt;strong&gt;not&lt;/strong&gt; hooked into&lt;/a&gt; the mongoose change tracking logic which in English means that if you use a &lt;code&gt;Date&lt;/code&gt; in your document and modify it with a method like &lt;code&gt;setMonth()&lt;/code&gt;, mongoose will be unaware of this change and &lt;code&gt;doc.save()&lt;/code&gt; will not persist this modification. If you must modify &lt;code&gt;Date&lt;/code&gt; types using built-in methods, tell mongoose about the change with &lt;code&gt;doc.markModified('pathToYourDate')&lt;/code&gt; before saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc24fbd5027a7ecf3371b29418246e3515a6aeb3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.mongodb.com/manual/changeStreams/&quot;&gt;Change streams&lt;/a&gt; provide a way for you to listen to all inserts and updates going through your MongoDB database. Note that change streams do &lt;strong&gt;not&lt;/strong&gt; work unless you're connected to a &lt;a href=&quot;https://docs.mongodb.com/manual/replication/&quot;&gt;MongoDB replica set&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60cfb35a02b82cabeb5e9cc66a812cff088c569" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.mongodb.com/manual/replication/#transactions&quot;&gt;MongoDB currently only supports transactions on replica sets&lt;/a&gt;, not standalone servers. To run a &lt;a href=&quot;http://thecodebarbarian.com/introducing-run-rs-zero-config-mongodb-runner.html&quot;&gt;local replica set for development&lt;/a&gt; on macOS, Linux or Windows, use npm to install &lt;a href=&quot;https://www.npmjs.com/package/run-rs&quot;&gt;run-rs&lt;/a&gt; globally and run &lt;code&gt;run-rs --version 4.0.0&lt;/code&gt;. Run-rs will download MongoDB 4.0.0 for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cb34b98357a707edcbe47eb0a49ec02de08f2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://mongoosejs.com/docs/api.html#Document&quot;&gt;Document&lt;/a&gt; and &lt;a href=&quot;https://mongoosejs.com/docs/api.html#Model&quot;&gt;Model&lt;/a&gt; are distinct classes in Mongoose. The Model class is a subclass of the Document class. When you use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#Model&quot;&gt;Model constructor&lt;/a&gt;, you create a new document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319dbab51bbfb096e057b6f3013b875961c74c9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://mongoosejs.com/docs/api.html#model-js&quot;&gt;Models&lt;/a&gt; are fancy constructors compiled from &lt;code&gt;Schema&lt;/code&gt; definitions. An instance of a model is called a &lt;a href=&quot;documents&quot;&gt;document&lt;/a&gt;. Models are responsible for creating and reading documents from the underlying MongoDB database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ddc8c369954b9a3873e033b3f42de62d322d12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema-number-js&quot;&gt;Numbers&lt;/a&gt; have &lt;a href=&quot;schematypes#number-validators&quot;&gt;&lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;&lt;/a&gt; validators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4050b7609b104a24a3babc239500eb391f38ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema-string-js&quot;&gt;Strings&lt;/a&gt; have &lt;a href=&quot;schematypes#string-validators&quot;&gt;&lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;minlength&lt;/code&gt;, and &lt;code&gt;maxlength&lt;/code&gt;&lt;/a&gt; validators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e4189ca3fc4155dfd69db7931b0bf840d979e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-post&quot;&gt;post&lt;/a&gt; middleware are executed &lt;em&gt;after&lt;/em&gt; the hooked method and all of its &lt;code&gt;pre&lt;/code&gt; middleware have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704b9d70e6fa2a1f41feb5b23ce028505c027c2e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-virtual&quot;&gt;Virtuals&lt;/a&gt; are document properties that you can get and set but that do not get persisted to MongoDB. The getters are useful for formatting or combining fields, while setters are useful for de-composing a single value into multiple values for storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650b58accb163cbf8eac2770e15e03275a93a325" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.mongodb.com/transactions&quot;&gt;Transactions&lt;/a&gt; are new in MongoDB 4.0 and Mongoose 5.2.0. Transactions let you execute multiple operations in isolation and potentially undo all the operations if one of them fails. This guide will get you started using transactions with Mongoose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5ba3eec7cb9c2a3dcbd62ad88a67c41932f563" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$addToSet&lt;/code&gt; (&amp;gt;= 4.8.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143f0bc44d7086dc278de6972afd165c39d897fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$near&lt;/code&gt;: &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/geoWithin/&quot;&gt;&lt;code&gt;$geoWithin&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center&quot;&gt;&lt;code&gt;$center&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7a9b26b7016d5c0f0fa22ca8882fc29b960ea6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$nearSphere&lt;/code&gt;: &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/geoWithin/&quot;&gt;&lt;code&gt;$geoWithin&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere&quot;&gt;&lt;code&gt;$centerSphere&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1197924c841daa76579b00cc00958374efd561f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pull&lt;/code&gt; (&amp;gt;= 4.12.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb88a17da2c654d32f0ee866d9d4f80b1e677d68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pullAll&lt;/code&gt; (&amp;gt;= 4.12.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1f9e28b6bf545b0a1a0c1fe84f3ec0422df343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$push&lt;/code&gt; (&amp;gt;= 4.8.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29a0bcb11f0614b8a2c2975a0968dbfef805238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$pushAll&lt;/code&gt; is no longer supported and no longer used internally for &lt;code&gt;save()&lt;/code&gt;, since it has been &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/pushAll/&quot;&gt;deprecated since MongoDB 2.4&lt;/a&gt;. Use &lt;code&gt;$push&lt;/code&gt; with &lt;code&gt;$each&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c10260159df637289be18eaa78934fa82e43a87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$where&lt;/code&gt;: &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/expr/&quot;&gt;&lt;code&gt;$expr&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f2988b80ae2c900e71285458957945debb7241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CastError&lt;/code&gt;: Mongoose could not convert a value to the type defined in the schema path. May be in a &lt;code&gt;ValidationError&lt;/code&gt; class' &lt;code&gt;errors&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f920d1a01eac2bce1fddb4cf40ed62091408e26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DisconnectedError&lt;/code&gt;: This &lt;a href=&quot;connections&quot;&gt;connection&lt;/a&gt; timed out in trying to reconnect to MongoDB and will not successfully reconnect to MongoDB unless you explicitly reconnect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ff56c281641538a263e9bfad26f34ca82e54ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DivergentArrayError&lt;/code&gt;: You attempted to &lt;code&gt;save()&lt;/code&gt; an array that was modified after you loaded it with a &lt;code&gt;$elemMatch&lt;/code&gt; or similar projection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42afc25e8e69b5574a0dc54cbbf1ddc1f1c385c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Document.prototype.init()&lt;/code&gt; no longer takes a callback as a parameter. It was always synchronous, just had a callback for legacy reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608896a860b68ff5606256e93f01160ca1facdcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DocumentNotFoundError&lt;/code&gt;: The document you tried to &lt;a href=&quot;api#document_Document-save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; was not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faddc01a70d1dc3a4aee8fb6c898435a7c9efac1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MissingSchemaError&lt;/code&gt;: You called &lt;code&gt;mongoose.Document()&lt;/code&gt; without a schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477e8f12a8a5edb82d2f904f9bbdf0c3ddfdb5fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MissingSchemaError&lt;/code&gt;: You tried to access a model with &lt;a href=&quot;api#mongoose_Mongoose-model&quot;&gt;&lt;code&gt;mongoose.model()&lt;/code&gt;&lt;/a&gt; that was not defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85927415d2272390520a7abcf0fe5ff4139a6751" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Model.geoNear()&lt;/code&gt; has been removed because the &lt;a href=&quot;https://github.com/mongodb/node-mongodb-native/blob/master/CHANGES_3.0.0.md#geonear-command-helper&quot;&gt;MongoDB driver no longer supports it&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da0dc58f92eec628a04cd24ec677b8802974639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MongooseError&lt;/code&gt;: general Mongoose error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a4814150e4be153eb078d65ab2df23ea5117fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ObjectExpectedError&lt;/code&gt;: Thrown when you set a nested path to a non-object value with &lt;a href=&quot;guide#strict&quot;&gt;strict mode set&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde7599cf7b1c603f6d0271d1279143a32781c46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ObjectParameterError&lt;/code&gt;: Thrown when you pass a non-object value to a function which expects an object as a paramter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf6a9a0aef3a361ea2b695e63c3d9167fab8b8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OverwriteModelError&lt;/code&gt;: Thrown when you call &lt;a href=&quot;api#mongoose_Mongoose-model&quot;&gt;&lt;code&gt;mongoose.model()&lt;/code&gt;&lt;/a&gt; to re-define a model that was already defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4096e01a5694ef1ae7262e3fb5aa540faa201663" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParallelSaveError&lt;/code&gt;: Thrown when you call &lt;a href=&quot;api#model_Model-save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; on a document when the same document instance is already saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490fb99ccc89684b2a767ef2e7ef53c81aa929f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;StrictModeError&lt;/code&gt;: Thrown when you set a path that isn't the schema and &lt;a href=&quot;guide#strict&quot;&gt;strict mode&lt;/a&gt; is set to &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e642d6bef8e18f61b1c33e7deccc6772ea2d5edf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ValidationError&lt;/code&gt;: error returned from &lt;a href=&quot;api#document_Document-validate&quot;&gt;&lt;code&gt;validate()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api#document_Document-validateSync&quot;&gt;&lt;code&gt;validateSync()&lt;/code&gt;&lt;/a&gt;. Contains zero or more &lt;code&gt;ValidatorError&lt;/code&gt; instances in &lt;code&gt;.errors&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e2e8534336f40d92562cab878d970f607cd148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ValidatorError&lt;/code&gt;: error from an individual schema path's validator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef03101a25e09d1c96cda32b2ca07d6795a036a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VersionError&lt;/code&gt;: Thrown when the &lt;a href=&quot;guide#versionKey&quot;&gt;document is out of sync&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a044d28fc201700c9501d138e7f0d4b3ea373f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aggregate()&lt;/code&gt; no longer accepts a spread, you &lt;strong&gt;must&lt;/strong&gt; pass your aggregation pipeline as an array. The below code worked in 4.x:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3df912a97a9e2c2a9d60446d7012089833522d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alias&lt;/code&gt;: string, mongoose &amp;gt;= 4.10.0 only. Defines a &lt;a href=&quot;guide#virtuals&quot;&gt;virtual&lt;/a&gt; with the given name that gets/sets this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84133e2619cb34ba4035d50acba992590dec95b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt;: Emitted when you're connecting to a replica set and Mongoose has successfully connected to all servers specified in your connection string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a270134e3267656867c21464a599262785aede96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoIndex&lt;/code&gt; - By default, mongoose will automatically build indexes defined in your schema when it connects. This is great for development, but not ideal for large production deployments, because index builds can cause performance degradation. If you set &lt;code&gt;autoIndex&lt;/code&gt; to false, mongoose will not automatically build indexes for &lt;strong&gt;any&lt;/strong&gt; model associated with this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86ab4feeffb1ccedd7cb1c97799f10840a404b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoReconnect&lt;/code&gt; - The underlying MongoDB driver will automatically try to reconnect when it loses connection to MongoDB. Unless you are an extremely advanced user that wants to manage their own connection pool, do &lt;strong&gt;not&lt;/strong&gt; set this option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34839045c0a3c6751d8683f857769a0854ed7ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufferCommands&lt;/code&gt; - This is a mongoose-specific option (not passed to the MongoDB driver) that disables &lt;a href=&quot;http://mongoosejs.com/docs/faq.html#callback_never_executes&quot;&gt;mongoose's buffering mechanism&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647f446b408931c7c328e63d345f202693530031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufferMaxEntries&lt;/code&gt; - The MongoDB driver also has its own buffering mechanism that kicks in when the driver is disconnected. Set this option to 0 and set &lt;code&gt;bufferCommands&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on your schemas if you want your database operations to fail immediately when the driver is not connected, as opposed to waiting for reconnection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7d860c55ecd38f02499614d4843938fb8e748a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bulkWrite()&lt;/code&gt; results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bf329c8d5cee13941f8b564c56aa775be4d97f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;castNonArrays&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; by default. If &lt;code&gt;false&lt;/code&gt;, Mongoose will throw a CastError when a value isn't an array. If &lt;code&gt;true&lt;/code&gt;, Mongoose will wrap the provided value in an array before casting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeaab0fcdd4c7575121ad9e55ab81468fa5ebde3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close&lt;/code&gt;: Emitted after &lt;a href=&quot;https://mongoosejs.com/docs/api.html#connection_Connection-close&quot;&gt;&lt;code&gt;Connection#close()&lt;/code&gt;&lt;/a&gt; successfully closes the connection. If you call &lt;code&gt;conn.close()&lt;/code&gt;, you'll get both a 'disconnected' event and a 'close' event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec0c11d28eab577cc3a45bf4225047d158217bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connectTimeoutMS&lt;/code&gt; - How long the MongoDB driver will wait before killing a socket due to inactivity &lt;em&gt;during initial connection&lt;/em&gt;. Defaults to 30000. This option is passed transparently to &lt;a href=&quot;https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback&quot;&gt;Node.js' &lt;code&gt;socket#setTimeout()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91817eb8dbc8ecdfc9d31cf4a94b235296d8232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connected&lt;/code&gt;: Emitted when Mongoose successfully makes its initial connection to the MongoDB server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd96a1ff4deefae692aab7e5df82cf32136ce78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connecting&lt;/code&gt;: Emitted when Mongoose starts making its initial connection to the MongoDB server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ac06d3dba1bbed57b74fb95fe39b8157bdbda1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context&lt;/code&gt; (string) if set to 'query' and &lt;code&gt;runValidators&lt;/code&gt; is on, &lt;code&gt;this&lt;/code&gt; will refer to the query in custom validator functions that update validation runs. Does nothing if &lt;code&gt;runValidators&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f1774f4c7caead811a19dd4f7eb90780745e0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbName&lt;/code&gt; - Specifies which database to connect to and overrides any database specified in the connection string. This is useful if you are unable to specify a default database in the connection string like with &lt;a href=&quot;https://stackoverflow.com/questions/48917591/fail-to-connect-mongoose-to-atlas/48917626#48917626&quot;&gt;some &lt;code&gt;mongodb+srv&lt;/code&gt; syntax connections&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976db7537bc5471ae0475c028ade1acaf2d7b272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;: Any or function, sets a default value for the path. If the value is a function, the return value of the function is used as the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cf2f6c3526ca82e69d01ffa7fea8d5d7e77e9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deleteOne()&lt;/code&gt;, &lt;code&gt;deleteMany()&lt;/code&gt;, and &lt;code&gt;remove()&lt;/code&gt; now resolve to the result object rather than the full &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~writeOpCallback&quot;&gt;driver &lt;code&gt;WriteOpResult&lt;/code&gt; object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75f84184244837646490e351587aa88aa46b39a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deletedCount&lt;/code&gt;: the number of documents deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ed943c7a266e7c37eea09dcee81be5960cc6cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depopulate&lt;/code&gt; depopulate any populated paths, replacing them with their original refs (defaults to false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91864c393bf5e66537fc29c26fd806e5d6e00301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnected&lt;/code&gt;: Emitted when Mongoose lost connection to the MongoDB server. This event may be due to your code explicitly closing the connection, the database server crashing, or network connectivity issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14def2fd90d17f85c230abf9746f0caca5d3daa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnecting&lt;/code&gt;: Your app called &lt;a href=&quot;https://mongoosejs.com/docs/api.html#connection_Connection-close&quot;&gt;&lt;code&gt;Connection#close()&lt;/code&gt;&lt;/a&gt; to disconnect from MongoDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5c308cb852be7209879e716e045e4fe1917a3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc.remove()&lt;/code&gt; no longer debounces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7bdea652f3b99615c2b917407eebf17187dda2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc.save()&lt;/code&gt; no longer passes &lt;code&gt;numAffected&lt;/code&gt; as a 3rd param to its callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75fb6870bd2eb76110c6af4f090a309a6029369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&lt;/code&gt; The mongoose document which is being converted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c492321a6139503b2aea1c8f6cc9471d09433e66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&lt;/code&gt;: the document this virtual is attached to. Equivalent to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31980db7caa9dbbb556bfcfd873acb09df7cf7e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enum&lt;/code&gt;: Array, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value is in the given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f117ec35a5500ee0c75ae77ab6cc67f0593a99dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enum&lt;/code&gt;: Array, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value is strictly equal to one of the values in the given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6825658461765a346cc8439ec4cbf2f2f2ff544d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;err&lt;/code&gt; if an error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98947fc8f7f25464de74d873d2dd7018cbef9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;err&lt;/code&gt; is the error if any occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0d41f14752f7611e25264aa25917a47292eab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt;: Emitted if an error occurs on a connection, like a &lt;code&gt;parseError&lt;/code&gt; due to malformed data or a payload larger than &lt;a href=&quot;https://docs.mongodb.com/manual/reference/limits/#BSON-Document-Size&quot;&gt;16MB&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9788e124b0a325e6dbe8dabc897e27fb2b2f5f43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;estimatedDocumentCount()&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; accept a filter. &lt;code&gt;Model.find({ foo: bar }).estimatedDocumentCount()&lt;/code&gt; is equivalent to &lt;code&gt;Model.find().estimatedDocumentCount()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d6f858e753e9825942920595c6e8fb11fc5243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;excludeIndexes&lt;/code&gt;: bool - defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, skip building indexes on this schema's paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f39ca67e276b2a64f7dcf980b2c2e47a02c4da9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;family&lt;/code&gt; - Whether to connect using IPv4 or IPv6. This option passed to &lt;a href=&quot;https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback&quot;&gt;Node.js' &lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function. If you don't specify this option, the MongoDB driver will try IPv6 first and then IPv4 if IPv6 fails. If your &lt;code&gt;mongoose.connect(uri)&lt;/code&gt; call takes a long time, try &lt;code&gt;mongoose.connect(uri, { family: 4 })&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57badf9a9f3b31af2a9375faeb6b23e88fdacc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fields&lt;/code&gt;: {Object|String} - Field selection. Equivalent to &lt;code&gt;.select(fields).findOneAndUpdate()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ecb3c08d5be7f43a0f5898cf79c4cd41cb73ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finalize&lt;/code&gt; {Function} finalize function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bcc47cf6148e9ae19508e68c5adb2a4d9798ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findAndModify&lt;/code&gt; helpers support limited validation. You can enable these by setting the &lt;code&gt;runValidators&lt;/code&gt; options, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba22287f1b3ea8ecf90c710915174101997ad4c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fullsetup&lt;/code&gt;: Emitted when you're connecting to a replica set and Mongoose has successfully connected to the primary and at least one secondary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ba8e271253329befbacb6af0bace8695ad20f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;geometry()&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; come after either &lt;code&gt;intersects()&lt;/code&gt; or &lt;code&gt;within()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4bc93c94c7df2dd286fd67c19b975f7657b1325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt;: function, defines a custom getter for this property using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584042d04188950fae02e4dddfbd42163537c79b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPromiseConstructor()&lt;/code&gt; is gone, just use &lt;code&gt;mongoose.Promise&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf525980a98cc01323671b80c610376717ef033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getters&lt;/code&gt; apply all getters (path and virtual getters), defaults to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6b36b129b6aaf7fb9fa081030113c63c82467c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;: boolean, whether to define an &lt;a href=&quot;https://docs.mongodb.com/manual/indexes/&quot;&gt;index&lt;/a&gt; on this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251c3d312d92671fba771dc894613701a36b8224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; hooks are now fully synchronous and do not receive &lt;code&gt;next()&lt;/code&gt; as a parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327e4f4f9ea7b8aebd8973735f14fb242467a979" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsMode&lt;/code&gt; {Boolean, default:false} it is possible to make the execution stay in JS. Provided in MongoDB &amp;gt; 2.0.X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15ffe71c912aec9b5c3e9984cb437e653ec90e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keepAliveInitialDelay&lt;/code&gt; is the number of milliseconds to wait before initiating &lt;code&gt;keepAlive&lt;/code&gt; on the socket. &lt;code&gt;keepAlive&lt;/code&gt; is true by default since mongoose 5.2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0788a8bb215cadcaa8326716c519b39f58eb25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keeptemp&lt;/code&gt; {Boolean, default:false} keep temporary data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bf781f034287413c6e662025037e97164e501b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kind&lt;/code&gt;: The validator's &lt;code&gt;type&lt;/code&gt;, like &lt;code&gt;'required'&lt;/code&gt; or &lt;code&gt;'regexp'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdd29155f29d2b9681960cf835361bd6ee7e788" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lean&lt;/code&gt; {Object|Boolean} return the raw object instead of the Mongoose Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263fbd378b63c0cc8603f31d7c139d96c755ca3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lean&lt;/code&gt;: if truthy, Mongoose will not &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.hydrate&quot;&gt;hydrate&lt;/a&gt; any documents that are returned from this query. See &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;&lt;code&gt;Query.prototype.lean()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91ba0414f8418f80fb34b5817c9c4ab60f903b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt; {Number} The maximum number of results to return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c6341276cf261724a4c0fa1af797d4dee00cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt; {Number} max number of documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5dc44ff4ec63afcc2952aafa97ad58439febdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lowercase&lt;/code&gt;: boolean, whether to always call &lt;code&gt;.toLowerCase()&lt;/code&gt; on the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3a07a5570e7a3c4de11e6699ddec08cfb2d0a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;match&lt;/code&gt;: RegExp, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value matches the given regular expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d333a3d59c5acf75b3162cdba8e58af3376b3b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max&lt;/code&gt;: Date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ee33863bbd6ddcd189a0fc9c5201ef1445ed1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max&lt;/code&gt;: Number, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value is less than or equal to the given maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8554a2fdc04b61b7b9dcb07a713b933729dfc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDistance&lt;/code&gt; {Number} the maximum distance from the point near that a result can be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d4fcd0c41172f2dd16a8fdd65e450688ee041d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTimeMS&lt;/code&gt;: Set &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-maxTimeMS&quot;&gt;&lt;code&gt;maxTimeMS&lt;/code&gt;&lt;/a&gt; for all queries on this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727d1f5409ee53c897d0f7dfefdb653573aa3001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxTimeMS&lt;/code&gt;: puts a time limit on the query - requires mongodb &amp;gt;= 2.6.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91fb9be9946c07074fe801c65ac3088a26ead65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxlength&lt;/code&gt;: Number, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value length is not greater than the given number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d56ff677ba0ffbb8f5ab2ebe0b54eb6f9db286d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min&lt;/code&gt;: Date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344de15e099019f1c2a8066aee7ec5e14688279d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min&lt;/code&gt;: Number, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value is greater than or equal to the given minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0616bb698527f7e6719413c6a00771570a5051" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minimize&lt;/code&gt; remove empty objects (defaults to true)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a4f73df6dd7aa7209b86c8ed8f541fe6d894c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minlength&lt;/code&gt;: Number, creates a &lt;a href=&quot;validation&quot;&gt;validator&lt;/a&gt; that checks if the value length is not less than the given number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f4d107cc3182559d43e2bd1ce8784c418a61c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mongoose.connect()&lt;/code&gt; and &lt;code&gt;mongoose.disconnect()&lt;/code&gt; now return a promise if no callback specified, or &lt;code&gt;null&lt;/code&gt; otherwise. It does &lt;strong&gt;not&lt;/strong&gt; return the mongoose singleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cac5bb5ea79f5943f0151824553ae02017bd28d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multi&lt;/code&gt; (boolean) whether multiple documents should be updated (false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ba871578d9b3c7cd8586035101986aaee42dbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multi&lt;/code&gt; (boolean): whether multiple documents should be updated (false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aa3dbe003b197217b56f1090afbd3313072700" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt;: the number of documents deleted. Equal to &lt;code&gt;deletedCount&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d550f0fd217ee9170bcab46668cd6e9ea00a18fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;near&lt;/code&gt; {Array} x,y point to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a1bb5545d73d299a33e9ff98f189ae9184f857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nearSphere&lt;/code&gt;: use &lt;code&gt;$nearSphere&lt;/code&gt; instead of &lt;code&gt;near()&lt;/code&gt;. See the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-nearSphere&quot;&gt;&lt;code&gt;Query.prototype.nearSphere()&lt;/code&gt; docs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e20fb0ec6d807d0229592a097ffffe0bddec9e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt;: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a6e6083e6edc989a5d574bb726a853df9602d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt;: bool - true to return the modified document rather than the original. defaults to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8059f35d6ad77e89108350323eb6d4fdde0ee84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numAffected&lt;/code&gt; and &lt;code&gt;save()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370b0e8b2d835332b8056569817a576d817395a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;o&lt;/code&gt; is an object specifying all mapReduce options as well as the map and reduce functions. All options are delegated to the driver implementation. See &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#mapreduce&quot;&gt;node-mongodb-native mapReduce() documentation&lt;/a&gt; for more detail about options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7694271350740487948e7d6d4cc351f79b9435" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok&lt;/code&gt;: &lt;code&gt;1&lt;/code&gt; if no errors occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856887b62dfbbe3c1e1bfa68ac8b99932baa4c4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;omitUndefined&lt;/code&gt; (boolean): If true, delete any properties whose value is &lt;code&gt;undefined&lt;/code&gt; when casting an update. In other words, if this is set, Mongoose will delete &lt;code&gt;baz&lt;/code&gt; from the update in &lt;code&gt;Model.updateOne({}, { foo: 'bar', baz: undefined })&lt;/code&gt; before sending the update to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2511b6bda3a080fb60fa72a5fca2b41e743f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;omitUndefined&lt;/code&gt;: delete any properties whose value is &lt;code&gt;undefined&lt;/code&gt; when casting an update. In other words, if this is set, Mongoose will delete &lt;code&gt;baz&lt;/code&gt; from the update in &lt;code&gt;Model.updateOne({}, { foo: 'bar', baz: undefined })&lt;/code&gt; before sending the update to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191eccda1a7477307399886df9f5aa3fdba82b83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;: Equivalent to &lt;code&gt;connected&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198acec78237a676890107262414e4be58961c1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; The options in use (either schema options or the options passed inline)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8713a7aae21082c21ce83898e465d2aa0e6d8773" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;out*&lt;/code&gt; {Object, default: {inline:1}} sets the output target for the map reduce job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36537318544fc169a797abec6494b2f60c097c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overwrite&lt;/code&gt; (boolean) disables update-only mode, allowing you to overwrite the doc (false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82531dce68b3b2180858f8d7b923fe15094e068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overwrite&lt;/code&gt; (boolean): disables update-only mode, allowing you to overwrite the doc (false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffc32fc018ea376452565d28bb0190ed08099b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt;: The path that failed validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ce1c9a24591a71e5a30ef9d6a6d06baa638825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;poolSize&lt;/code&gt; - The maximum number of sockets the MongoDB driver will keep open for this connection. By default, &lt;code&gt;poolSize&lt;/code&gt; is 5. Keep in mind that, as of MongoDB 3.4, MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding. See &lt;a href=&quot;http://thecodebarbarian.com/slow-trains-in-mongodb-and-nodejs&quot;&gt;Slow Trains in MongoDB and Node.js&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc45361a7ba41c742ea98840cb39e8f71469b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;populate&lt;/code&gt;: an array representing what paths will be populated. Should have one entry for each call to &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-populate&quot;&gt;&lt;code&gt;Query.prototype.populate()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994b1b68662846034907625ab7a7225f778ded28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;product&lt;/code&gt; which is the saved &lt;code&gt;product&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206571975cc083201e9e56ebc5b06ede3b56b0dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;projection&lt;/code&gt;: like select, it determines which fields to return, ex. &lt;code&gt;{ projection: { _id: 0 } }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0789baf4bb08a9bf1414f999494410413b202c14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;promiseLibrary&lt;/code&gt; - Sets the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html&quot;&gt;underlying driver's promise library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacd2bf8b71305d3d0b3bcc434650859f516036c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;query&lt;/code&gt; {Object} query filter object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704a7bc3621be7c1e3b87df93f76afaa9b9f6e84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawResponse&lt;/code&gt; is the full response from Mongo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd70b6505466a1cfb95c6504684c4c7599fb55dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawResult&lt;/code&gt;: if true, resolves to the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify&quot;&gt;raw result from the MongoDB driver&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c989eefb25edded639ba505cb1ff7fea8661603c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawResult&lt;/code&gt;: if true, returns the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify&quot;&gt;raw result from the MongoDB driver&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113cd9b7fc6ca323742280c1b02e7e6cf17ab886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readPreference&lt;/code&gt; {String}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd427e8eee6383dcaaee31ab80f6d3078f5e1aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnectFailed&lt;/code&gt;: Emitted when you're connected to a standalone server and Mongoose has run out of &lt;a href=&quot;https://thecodebarbarian.com/managing-connections-with-the-mongodb-node-driver.html#handling-single-server-outages&quot;&gt;&lt;code&gt;reconnectTries&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;http://npmjs.com/package/mongodb&quot;&gt;MongoDB driver&lt;/a&gt; will no longer attempt to reconnect after this event is emitted. This event will never be emitted if you're connected to a replica set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ca768dc4d1c58da72821762aeafe24b141719e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnectInterval&lt;/code&gt; - See &lt;code&gt;reconnectTries&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99d63ef39074f98bb64bc56ecc39a3a0bd563eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnectTries&lt;/code&gt; - If you're connected to a single server or mongos proxy (as opposed to a replica set), the MongoDB driver will try to reconnect every &lt;code&gt;reconnectInterval&lt;/code&gt; milliseconds for &lt;code&gt;reconnectTries&lt;/code&gt; times, and give up afterward. When the driver gives up, the mongoose connection emits a &lt;code&gt;reconnectFailed&lt;/code&gt; event. This option does nothing for replica set connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2c572afcd5844c5a81976e99c32a591f3d2095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnected&lt;/code&gt;: Emitted if Mongoose lost connectivity to MongoDB and successfully reconnected. Mongoose attempts to &lt;a href=&quot;https://thecodebarbarian.com/managing-connections-with-the-mongodb-node-driver.html&quot;&gt;automatically reconnect&lt;/a&gt; when it loses connection to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220f075c75fe02e74c4c16970b7b4d72d3314926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove()&lt;/code&gt; and debouncing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae73462e8e9c43e14232cdd99fdb90bf27b1f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;required&lt;/code&gt; validator for arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2f22c1e34d97da93e393ec63607f8d0b9d65a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;required&lt;/code&gt;: boolean or function, if true adds a &lt;a href=&quot;validation#built-in-validators&quot;&gt;required validator&lt;/a&gt; for this property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6326702c9d2aafd6a736e666458974651381c3d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ret&lt;/code&gt; The plain object representation which has been converted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830d5c373f0d0c168864ab523dc09d7d3f18cd06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runValidators&lt;/code&gt;: if true, runs &lt;a href=&quot;../validation#update-validators&quot;&gt;update validators&lt;/a&gt; on this command. Update validators validate the update operation against the model's schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f622fad460e513a6013d73e08e1f68f1ad1bd2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope&lt;/code&gt; {Object} scope variables exposed to map/reduce/finalize during execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816dcd76cceafb84671cfce2d69390944ef3294e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;: boolean, specifies default &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/&quot;&gt;projections&lt;/a&gt; for queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7750ffe845ba8b3f5fedb56373a6061182da3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt;: sets the document fields to return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fd408bea80c5ae2c9807aa422ac2b464fbb1c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt;: function, defines a custom setter for this property using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87607ba563101466b59ceb54f50c39e303445298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setDefaultsOnInsert&lt;/code&gt; (boolean): if this and &lt;code&gt;upsert&lt;/code&gt; are true, mongoose will apply the &lt;a href=&quot;http://mongoosejs.com/docs/defaults.html&quot;&gt;defaults&lt;/a&gt; specified in the model's schema if a new document is created. This option only works on MongoDB &amp;gt;= 2.4 because it relies on &lt;a href=&quot;https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/&quot;&gt;MongoDB's &lt;code&gt;$setOnInsert&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6052d8580433b76250beb249a74b31e88f12703" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setDefaultsOnInsert&lt;/code&gt;: if this and &lt;code&gt;upsert&lt;/code&gt; are true, mongoose will apply the &lt;a href=&quot;http://mongoosejs.com/docs/defaults.html&quot;&gt;defaults&lt;/a&gt; specified in the model's schema if a new document is created. This option only works on MongoDB &amp;gt;= 2.4 because it relies on &lt;a href=&quot;https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/&quot;&gt;MongoDB's &lt;code&gt;$setOnInsert&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65bb542c5d3e37cc64d3a8a78bec4e094183bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipVersioning&lt;/code&gt; allows excluding paths from versioning (i.e., the internal revision will not be incremented even if these paths are updated). DO NOT do this unless you know what you're doing. For subdocuments, include this on the parent document using the fully qualified path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89df5d02de74d995488fbed169c1804633676b41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;socketTimeoutMS&lt;/code&gt; - How long the MongoDB driver will wait before killing a socket due to inactivity &lt;em&gt;after initial connection&lt;/em&gt;. A socket may be inactive because of either no activity or a long-running operation. This is set to &lt;code&gt;30000&lt;/code&gt; by default, you should set this to 2-3x your longest running operation if you expect some of your database operations to run longer than 20 seconds. This option is passed to &lt;a href=&quot;https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback&quot;&gt;Node.js &lt;code&gt;socket#setTimeout()&lt;/code&gt; function&lt;/a&gt; after the MongoDB driver successfully completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183aa28de3bebd70040b5b4efd7e5a335e3e3347" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort&lt;/code&gt; {Object} sort input objects using this key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a06c41cb0e3c128bfb9a27922001201d726b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort&lt;/code&gt;: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec848dd5a34623f7405260fa4515cb1f96567385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sparse&lt;/code&gt;: boolean, whether to define a &lt;a href=&quot;https://docs.mongodb.com/manual/core/index-sparse/&quot;&gt;sparse index&lt;/a&gt; on this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5949616c9dc5bb0fb3f55a439bfe322949668b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict&lt;/code&gt; (boolean) overrides the &lt;code&gt;strict&lt;/code&gt; option for this update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4634548c1bc956297796279336d916c4b50cc51e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict&lt;/code&gt; (boolean): overrides the &lt;a href=&quot;../guide#strict&quot;&gt;schema-level &lt;code&gt;strict&lt;/code&gt; option&lt;/a&gt; for this update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df44c5e5d497de619e12679776ea08ba776a340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict&lt;/code&gt;: controls how Mongoose handles keys that aren't in the schema for updates. This option is &lt;code&gt;true&lt;/code&gt; by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the &lt;a href=&quot;../guide#strict&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode docs&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b735a5ae094815e727b579cb46ee189dc1e3db52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict&lt;/code&gt;: overwrites the schema's &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#strict&quot;&gt;strict mode option&lt;/a&gt; for this update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c9c8d686cc13fac335bc332ed857b488b24a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strictQuery&lt;/code&gt;: controls how Mongoose handles keys that aren't in the schema for the query &lt;code&gt;filter&lt;/code&gt;. This option is &lt;code&gt;false&lt;/code&gt; by default for backwards compatibility, which means Mongoose will allow &lt;code&gt;Model.find({ foo: 'bar' })&lt;/code&gt; even if &lt;code&gt;foo&lt;/code&gt; is not in the schema. See the &lt;a href=&quot;../guide#strictQuery&quot;&gt;&lt;code&gt;strictQuery&lt;/code&gt; docs&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd70343c57d713a4a755843b75fdebb345b3d1b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamps&lt;/code&gt; (boolean): If set to &lt;code&gt;false&lt;/code&gt; and &lt;a href=&quot;../guide#timestamps&quot;&gt;schema-level timestamps&lt;/a&gt; are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4570afd3f2e8014c356a52682b43413cea098a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toObject()&lt;/code&gt; Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53a1f9c0e3655ad103ce929f5a19b018ca44158" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt; a transform function to apply to the resulting document before returning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f1ba830af058c7594ef3c7ee01b1a075a70ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt;: optional function which accepts a mongoose document. The return value of the function will be emitted on &lt;code&gt;data&lt;/code&gt; and returned by &lt;code&gt;.next()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203333c57889846252b505480accc502c3e18dd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trim&lt;/code&gt;: boolean, whether to always call &lt;code&gt;.trim()&lt;/code&gt; on the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86136095565bee36067af67d45296d835611cfad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is a special property in Mongoose schemas. When Mongoose finds a nested property named &lt;code&gt;type&lt;/code&gt; in your schema, Mongoose assumes that it needs to define a SchemaType with the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535695cca343e9804a36c0513d1b451259d49421" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique&lt;/code&gt;: boolean, whether to define a &lt;a href=&quot;https://docs.mongodb.com/manual/core/index-unique/&quot;&gt;unique index&lt;/a&gt; on this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d593f88b0fa1263ae9620794b55c13a6cf526d7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uppercase&lt;/code&gt;: boolean, whether to always call &lt;code&gt;.toUpperCase()&lt;/code&gt; on the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337242d1c73719005e18c549cf3e31e74d326a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upsert&lt;/code&gt; (boolean) whether to create the doc if it doesn't match (false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7833f338f230f8a2d250a5819555d1e615cf28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upsert&lt;/code&gt; (boolean): whether to create the doc if it doesn't match (false)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce665a122b871ecd552589b334d0182e607aa60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upsert&lt;/code&gt;: bool - creates the object if it doesn't exist. defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0261e5ea1b712c7b0d83c040d10c6ed91c1548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useCreateIndex&lt;/code&gt; - False by default. Set to &lt;code&gt;true&lt;/code&gt; to make Mongoose's default index build use &lt;code&gt;createIndex()&lt;/code&gt; instead of &lt;code&gt;ensureIndex()&lt;/code&gt; to avoid deprecation warnings from the MongoDB driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c644779b7da2f594e7073e50a7f9317c5af6615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useFindAndModify&lt;/code&gt; - True by default. Set to &lt;code&gt;false&lt;/code&gt; to make &lt;code&gt;findOneAndUpdate()&lt;/code&gt; and &lt;code&gt;findOneAndRemove()&lt;/code&gt; use native &lt;code&gt;findOneAndUpdate()&lt;/code&gt; rather than &lt;code&gt;findAndModify()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53d2f17e8dd408858dd5875a65a507e9aaa129f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useFindAndModify&lt;/code&gt;: Set to &lt;code&gt;false&lt;/code&gt; to work around the &lt;a href=&quot;../deprecations#-findandmodify-&quot;&gt;&lt;code&gt;findAndModify()&lt;/code&gt; deprecation warning&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdec1d9ef0e8d35dd932c9e850804f70b5a53215" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useFindAndModify&lt;/code&gt;: used to work around the &lt;a href=&quot;../deprecations#-findandmodify-&quot;&gt;&lt;code&gt;findAndModify()&lt;/code&gt; deprecation warning&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8868f97eb586531eac7f273305745ce01b6c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useNewUrlParser&lt;/code&gt; - The underlying MongoDB driver has deprecated their current &lt;a href=&quot;https://docs.mongodb.com/manual/reference/connection-string/&quot;&gt;connection string&lt;/a&gt; parser. Because this is a major change, they added the &lt;code&gt;useNewUrlParser&lt;/code&gt; flag to allow users to fall back to the old parser if they find a bug in the new parser. You should set &lt;code&gt;useNewUrlParser: true&lt;/code&gt; unless that prevents you from connecting. Note that if you specify &lt;code&gt;useNewUrlParser: true&lt;/code&gt;, you &lt;strong&gt;must&lt;/strong&gt; specify a port in your connection string, like &lt;code&gt;mongodb://localhost:27017/dbname&lt;/code&gt;. The new url parser does &lt;em&gt;not&lt;/em&gt; support connection strings that do not have a port, like &lt;code&gt;mongodb://localhost/dbname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d845ca4e8f46755b4b244136cdd40d7682e4167b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useUnifiedTopology&lt;/code&gt;- False by default. Set to &lt;code&gt;true&lt;/code&gt; to opt in to using &lt;a href=&quot;deprecations#useunifiedtopology&quot;&gt;the MongoDB driver's new connection management engine&lt;/a&gt;. You should set this option to &lt;code&gt;true&lt;/code&gt;, except for the unlikely case that it prevents you from maintaining a stable connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8855e41182910a365a6ceedcea3e592e5e3e9ad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt;/&lt;code&gt;pass&lt;/code&gt; - The username and password for authentication. These options are mongoose-specific, they are equivalent to the MongoDB driver's &lt;code&gt;auth.user&lt;/code&gt; and &lt;code&gt;auth.password&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b531291f8ff0292c85e82bced36abc17a5397e1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;validate&lt;/code&gt;: function, adds a &lt;a href=&quot;validation#built-in-validators&quot;&gt;validator function&lt;/a&gt; for this property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e2a3705a4d829f96a5768de0787234968fa2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: The value that failed validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1963f930c99635ecb2064f666c1015a1b98f6ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: the value being set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932bf37da0dff8c134be51621ca5761f30b1439c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;: the value returned by the previous getter. If there is only one getter, &lt;code&gt;value&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6445731ad6ce1279abf8c5381480e03eaf631a2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verbose&lt;/code&gt; {Boolean, default:false} provide statistics on job execution time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd9e9bfae71d15543ef3eac674020381e60a31d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;versionKey&lt;/code&gt; whether to include the version key (defaults to true)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5821fba65161b5be37f3b0ca9e7b8a84adf8ff5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;virtual&lt;/code&gt;: the virtual object you called &lt;code&gt;.get()&lt;/code&gt; on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fcb786d146a1f4c2229102719ef038353ac64c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;virtual&lt;/code&gt;: the virtual object you're calling &lt;code&gt;.set()&lt;/code&gt; on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0127c4aac362d3e73b8c75eb2121e225cf3827e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;virtuals&lt;/code&gt; apply virtual getters (can override &lt;code&gt;getters&lt;/code&gt; option), defaults to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f28c7987d0b757b74218febcbada1657361254a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writeConcern&lt;/code&gt; (object): sets the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/&quot;&gt;write concern&lt;/a&gt; for replica sets. Overrides the &lt;a href=&quot;../guide#writeConcern&quot;&gt;schema-level write concern&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e030d1135aef1422fd44e24deca6c0c54bf72e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{inline:1}&lt;/code&gt; the results are returned in an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6209fbba8b979271bd932e6378028a86faa07bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{merge: 'collectionName'}&lt;/code&gt; add the results to collectionName: if dups exist the new docs overwrite the old</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e10d7952a53a9c6c7ac835f1efd9409c4223b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{reduce: 'collectionName'}&lt;/code&gt; add the results to collectionName: if dups are detected, uses the reducer / finalize functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60aca80a754f12b0d81ed83155eda8459347c6f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{replace: 'collectionName'}&lt;/code&gt; add the results to collectionName: the results replace the collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434f41f03f48947afda46a6dd3ee370e6640a88e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alias of mongoose.Schema.Types for backwards compatibility.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f764620fc613dc98f8f1fc377d4478ce0c3d96" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All paths passed that are not &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern&quot;&gt;atomic&lt;/a&gt; operations will become &lt;code&gt;$set&lt;/code&gt; ops.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e476d0439e9c16581b3e7636b6c73ea065258c40" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Calling this mulitple times on an array before saving sends the same command as calling it once.&lt;/em&gt;&lt;em&gt;This update is implemented using the MongoDB &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop&quot;&gt;$pop&lt;/a&gt; method which enforces this restriction.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46997c79c149f2a76d83be8199fad8e1c57e6ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Calling this multiple times on an array before saving sends the same command as calling it once.&lt;/em&gt;&lt;em&gt;This update is implemented using the MongoDB &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop&quot;&gt;$pop&lt;/a&gt; method which enforces this restriction.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce4ccdf33ae5df4becac5937b4508f2f8cb02ff" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;DEPRECATED&lt;/em&gt; Alias for &lt;a href=&quot;#query_Query-circle&quot;&gt;circle&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f509f5740be2aac5607c895d9ddce2fc7ca5ed99" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;DEPRECATED&lt;/em&gt; Alias of &lt;code&gt;maxScan&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a04e32e9f8c0f4e915ba2b10e15a645611c3d8d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;DEPRECATED&lt;/em&gt; Sets the slaveOk option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffe4de60cd8c891803e26d2a3fcbca75afd1607" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;DEPRECATED&lt;/em&gt; Specifies a &lt;code&gt;$centerSphere&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6951cccfae4425fdcf1d40838fe0193c74a17d62" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;DEPRECATED&lt;/em&gt; Specifies a &lt;code&gt;$nearSphere&lt;/code&gt; condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf63c14bf4090f590525be9571d1be33ff9f3ef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Does not include names of models created using &lt;code&gt;connection.model()&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0826771d5413b32626db71b2e9c5533a3a59258" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;During save, no custom options are applied to the document before being sent to the database.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278da751924ddc40aa1f3b9b94c855cc3737ab76" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;First be sure you have &lt;a href=&quot;http://www.mongodb.org/downloads&quot;&gt;MongoDB&lt;/a&gt; and &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; installed.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701e1a1cc2ed42518d4318ba88c983ce6ac6c649" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you want to update a single document in the db and return it to your application, use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOneAndUpdate&quot;&gt;findOneAndUpdate&lt;/a&gt; instead.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8017840c8a81c994692511783b8aa20198be9bf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Indexes are created &lt;a href=&quot;https://docs.mongodb.com/manual/core/index-creation/#index-creation-background&quot;&gt;in the background&lt;/a&gt; by default. If &lt;code&gt;background&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, MongoDB will not execute any read/write operations you send until the index build. Specify &lt;code&gt;background: false&lt;/code&gt; to override Mongoose's default.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8443f1659e45438398367927c2d8f415b2751b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: Any key/val set on the instance that does not exist in your schema is always ignored, regardless of schema option.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788e9994d495fef4094c2b715e3bc98f4a01c6c8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3060155e8980bc3e6d22cf875184481a2ef4569" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: violating the constraint returns an &lt;code&gt;E11000&lt;/code&gt; error from MongoDB when saving, not a Mongoose validation error.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6b0f3f08bfa963a1d73e2650d4c93c6ba0da80" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: we could have also just used the built-in &lt;code&gt;lowercase: true&lt;/code&gt; SchemaType option instead of defining our own function.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df2e4e867be5010e5e6eb4dfdeb7c8f21ef855f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: you may also specify the driver read pref &lt;a href=&quot;http://mongodb.github.com/node-mongodb-native/api-generated/replset.html?highlight=strategy&quot;&gt;strategy&lt;/a&gt; option when connecting:&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3762d487b704f7849be223d0007688cba227382" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE:&lt;/em&gt; Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70433395fbb4f77b1abfb7683ccc6c3ff54fab2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in 4.5.0&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5947c4e8f79a0e4bfb864b2dc56ee1602140c68" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in MongoDB 3.6.0 and Mongoose 5.0.0&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0151b187ce0794de7c5b93d300d0e24ca1bdaf3a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in Mongoose 4.4.0:&lt;/em&gt; Mongoose supports custom types. Before you reach for a custom type, however, know that a custom type is overkill for most use cases. You can do most basic tasks with &lt;a href=&quot;http://mongoosejs.com/docs/2.7.x/docs/getters-setters.html&quot;&gt;custom getters/setters&lt;/a&gt;, &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#virtuals&quot;&gt;virtuals&lt;/a&gt;, and &lt;a href=&quot;http://mongoosejs.com/docs/subdocs.html#single-embedded&quot;&gt;single embedded docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d97c1163c7ec8ccb897936ab5d265bbdcd4f4d7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in Mongoose 5.1.0&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e591a152ff7539a37b33c70ab19a8ba520eaa95" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note that &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, &lt;code&gt;findOneAndUpdate()&lt;/code&gt;, etc. do &lt;em&gt;not&lt;/em&gt; execute &lt;code&gt;save()&lt;/code&gt; middleware. If you need save middleware and full validation, first query for the document and then &lt;code&gt;save()&lt;/code&gt; it.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560f86b7ffcc057bb13642f1bea70a948a5e34fb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note that Mongoose does not send the &lt;code&gt;shardcollection&lt;/code&gt; command for you. You must configure your shards yourself.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87a46676c06734aa2484980210a1ade59cc1373" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: if a transform function returns &lt;code&gt;undefined&lt;/code&gt;, the return value will be ignored.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66840619fbd8f4a104152907de26c12b7b442793" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt;&lt;code&gt;conditions&lt;/code&gt; is optional, and if &lt;code&gt;conditions&lt;/code&gt; is null or undefined, mongoose will send an empty &lt;code&gt;findOne&lt;/code&gt; command to MongoDB, which will return an arbitrary document. If you're querying by &lt;code&gt;_id&lt;/code&gt;, use &lt;code&gt;Model.findById()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a46e3266a3e1943f68f0f82292679050fab4545" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt;&lt;code&gt;conditions&lt;/code&gt; is optional, and if &lt;code&gt;conditions&lt;/code&gt; is null or undefined, mongoose will send an empty &lt;code&gt;findOne&lt;/code&gt; command to MongoDB, which will return an arbitrary document. If you're querying by &lt;code&gt;_id&lt;/code&gt;, use &lt;code&gt;findById()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a65332da73f857bf4bd5998442efe00b325399" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Options passed take precedence over options included in connection strings.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d23fd71c4091355fa12655fd6a374c4ec539de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires MongoDB &amp;gt;= 3.6.0.&lt;/em&gt; Starts a &lt;a href=&quot;https://docs.mongodb.com/manual/release-notes/3.6/#client-sessions&quot;&gt;MongoDB session&lt;/a&gt; for benefits like causal consistency, &lt;a href=&quot;https://docs.mongodb.com/manual/core/retryable-writes/&quot;&gt;retryable writes&lt;/a&gt;, and &lt;a href=&quot;http://thecodebarbarian.com/a-node-js-perspective-on-mongodb-4-transactions.html&quot;&gt;transactions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5060dd17a83a716802158526267da200eb0a11d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Requires a replica set running MongoDB &amp;gt;= 3.6.0.&lt;/em&gt; Watches the underlying collection for changes using &lt;a href=&quot;https://docs.mongodb.com/manual/changeStreams/&quot;&gt;MongoDB change streams&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0936a5fa9b46e31ef2bd093c989fb9ab5dd6d203" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Very helpful when using &lt;a href=&quot;schematypes#mixed&quot;&gt;Mixed&lt;/a&gt; types.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc871237fe9bc59bbe370c17446267d25d405c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;When nesting schemas, (&lt;code&gt;children&lt;/code&gt; in the example above), always declare the child schema first before passing it into its parent.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c244e567c1cd676c3eb23687790c8742399e1655" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;When no &lt;code&gt;collection&lt;/code&gt; argument is passed, Mongoose produces a collection name by passing the model &lt;code&gt;name&lt;/code&gt; to the &lt;a href=&quot;#utils_exports.toCollectionName&quot;&gt;utils.toCollectionName&lt;/a&gt; method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409fac58b4a768fcaba7050edf05e4dcae6a65e8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;When no &lt;code&gt;collection&lt;/code&gt; argument is passed, Mongoose uses the model name. If you don't like this behavior, either pass a collection name, use &lt;code&gt;mongoose.pluralize()&lt;/code&gt;, or set your schemas collection name option.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa6fe57e89cbc7208a7dcddd182064887e80adb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dad436f0b0e52ce300e35909b7fc2a22fb080a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;marks the entire array as modified, which if saved, will store it as a &lt;code&gt;$set&lt;/code&gt; operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f4ff6c2232737c03bea3a714c654905792a25d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;a href=&quot;#query_Query-circle&quot;&gt;circle&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9688cf7425909dc523b6bbdd3f6e51bf3d9c21a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use &lt;code&gt;query.near()&lt;/code&gt; instead with the &lt;code&gt;spherical&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb951cb615dfbb2549fe629c7e3d5ad10fe368f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; in MongoDB 2.2 in favor of &lt;a href=&quot;#query_Query-read&quot;&gt;read preferences&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0663c86c1013c27c24db8db9168f7637668e0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MUST&lt;/strong&gt; be used after &lt;code&gt;where()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d40e1726e9e31d5aa19041376b35dafc16b6c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MUST&lt;/strong&gt; be used as the first operator in the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2d6606c26daf81fae23f74b434ee48ef9a27dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you specify &lt;code&gt;schema.pre('remove')&lt;/code&gt;, Mongoose will register this middleware for &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-remove&quot;&gt;&lt;code&gt;doc.remove()&lt;/code&gt;&lt;/a&gt; by default. If you want to your middleware to run on &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-remove&quot;&gt;&lt;code&gt;Query.remove()&lt;/code&gt;&lt;/a&gt; use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-pre&quot;&gt;&lt;code&gt;schema.pre('remove', { query: true, document: false }, fn)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972933e856e1099f22929a5a61107d38b025c2f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; function fires &lt;code&gt;save()&lt;/code&gt; hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79208270353be7bf79cb5330079261404b334370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;.model()&lt;/code&gt; function makes a copy of &lt;code&gt;schema&lt;/code&gt;. Make sure that you've added everything you want to &lt;code&gt;schema&lt;/code&gt;, including hooks, before calling &lt;code&gt;.model()&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630046674f9bdfb9f0d3d946a10f11c4e5cc3524" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is not if &lt;code&gt;Symbol.asyncIterator&lt;/code&gt; is undefined. If &lt;code&gt;Symbol.asyncIterator&lt;/code&gt; is undefined, that means your Node.js version does not support async iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d89ba331dcc8a5688ef0e9175ed74179e5bff6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is not set if &lt;code&gt;Symbol.asyncIterator&lt;/code&gt; is undefined. If &lt;code&gt;Symbol.asyncIterator&lt;/code&gt; is undefined, that means your Node.js version does not support async iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f89b3d177c7a4f71e43094e848a4188284ee610" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; replaceOne will &lt;em&gt;not&lt;/em&gt; fire update middleware. Use &lt;code&gt;pre('replaceOne')&lt;/code&gt; and &lt;code&gt;post('replaceOne')&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5999c3e9ebcdd6322cf4facaac503ae2fb270b4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; updateMany will &lt;em&gt;not&lt;/em&gt; fire update middleware. Use &lt;code&gt;pre('updateMany')&lt;/code&gt; and &lt;code&gt;post('updateMany')&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c611b121b306a0a8f54b73727534168b87e380" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; updateOne will &lt;em&gt;not&lt;/em&gt; fire update middleware. Use &lt;code&gt;pre('updateOne')&lt;/code&gt; and &lt;code&gt;post('updateOne')&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724cd281279b3e7a616d70723fb4ee40a0d51097" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;ObjectId&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, and &lt;code&gt;Buffer&lt;/code&gt; are valid for use as refs. However, you should use &lt;code&gt;ObjectId&lt;/code&gt; unless you are an advanced user and have a good reason for doing so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e79a542532387a639e0eb86e09e37f06c9b9e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In Mongoose Maps, keys must be strings in order to store the document in MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae87017ba40060de3762b8b14cf7798e1816fd4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/pojo&quot;&gt;POJO&lt;/a&gt; containing a map from model names to models. Contains all models that have been added to this connection using &lt;a href=&quot;connection#connection_Connection-model&quot;&gt;&lt;code&gt;Connection#model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90c5c6eb246dd9a1134aa9e61db2abac3f75972" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MongoTimeoutError&lt;/code&gt; has a &lt;code&gt;reason&lt;/code&gt; property that explains why server selection timed out. For example, if you're connecting to a standalone server with an incorrect password, &lt;code&gt;reason&lt;/code&gt; will contain an &quot;Authentication failed&quot; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d87f1428610e173664f5d3b413c1e6779745cb2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MongooseMap&lt;/code&gt; is a subclass of &lt;a href=&quot;http://thecodebarbarian.com/the-80-20-guide-to-maps-in-javascript.html&quot;&gt;JavaScript's &lt;code&gt;Map&lt;/code&gt; class&lt;/a&gt;. In these docs, we'll use the terms 'map' and &lt;code&gt;MongooseMap&lt;/code&gt; interchangeably. In Mongoose, maps are how you create a nested document with arbitrary keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62ed262dca99a9cd9ed3869f44a31beb4229fbd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ValidationError&lt;/code&gt; has a hash of &lt;code&gt;errors&lt;/code&gt; that contain individual &lt;code&gt;ValidatorError&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8319ac8454b542c63e1ca965bb363c9db7f823" translate="yes" xml:space="preserve">
          <source>A Model is a class that's your primary tool for interacting with MongoDB. An instance of a Model is called a &lt;a href=&quot;api#Document&quot;&gt;Document&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa210d4378fbf7551fc8e07be26500cc4428071" translate="yes" xml:space="preserve">
          <source>A QueryCursor is a concurrency primitive for processing query results one document at a time. A QueryCursor fulfills the Node.js streams3 API, in addition to several other mechanisms for loading documents from MongoDB one at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397edc9b774c2876ccb2c8f8486ce69d49d94cab" translate="yes" xml:space="preserve">
          <source>A SchemaType is different from a type. In other words, &lt;code&gt;mongoose.ObjectId !== mongoose.Types.ObjectId&lt;/code&gt;. A SchemaType is just a configuration object for Mongoose. An instance of the &lt;code&gt;mongoose.ObjectId&lt;/code&gt; SchemaType doesn't actually create MongoDB ObjectIds, it is just a configuration for a path in a schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aab34d0a71865d38b97135a037d78b403e86498" translate="yes" xml:space="preserve">
          <source>A common gotcha for beginners is that the &lt;code&gt;unique&lt;/code&gt; option for schemas is &lt;em&gt;not&lt;/em&gt; a validator. It's a convenient helper for building &lt;a href=&quot;https://docs.mongodb.com/manual/core/index-unique/&quot;&gt;MongoDB unique indexes&lt;/a&gt;. See the &lt;a href=&quot;https://mongoosejs.com/docs/faq.html&quot;&gt;FAQ&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fc78af75bc8e58ce4f1b53446d3a80975a7cf1" translate="yes" xml:space="preserve">
          <source>A discriminator's fields are the union of the base schema's fields and the discriminator schema's fields, and the discriminator schema's fields take precedence. There is one exception: the default &lt;code&gt;_id&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b402473ae7533854fb2dfda8544b78da06dbe574" translate="yes" xml:space="preserve">
          <source>A full list of &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query-js&quot;&gt;Query helper functions can be found in the API docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18468fc2f45b74d0f266444c255c4c9f717fb0b5" translate="yes" xml:space="preserve">
          <source>A full list of options can be found on the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect&quot;&gt;MongoDB Node.js driver docs for &lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;. Mongoose passes options to the driver without modification, modulo a few exceptions that are explained below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d8bfb30e50c992fc077dc3529d017249c63c0d" translate="yes" xml:space="preserve">
          <source>A hash of the collections associated with this connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346df2fa9ae083b8bc30594ac244a88095726531" translate="yes" xml:space="preserve">
          <source>A hash of the global options that are associated with this connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95565837f3ccbf8ba69cc83bbb4f22addbb1533" translate="yes" xml:space="preserve">
          <source>A model is a class with which we construct documents. In this case, each document will be a kitten with properties and behaviors as declared in our schema. Let's create a kitten document representing the little guy we just met on the sidewalk outside:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b027ccafa8ad8b504d4d0937b5bfcfe2b20bcd0" translate="yes" xml:space="preserve">
          <source>A mongoose query can be executed in one of two ways. First, if you pass in a &lt;code&gt;callback&lt;/code&gt; function, Mongoose will execute the query asynchronously and pass the results to the &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dab2667bbfa609a9c7ec6e9d18a1a46d229eb7" translate="yes" xml:space="preserve">
          <source>A note about keepAlive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f06dc3facc264ff0d68f6bb9d07daef9406d80" translate="yes" xml:space="preserve">
          <source>A path &lt;code&gt;a&lt;/code&gt; may be in &lt;code&gt;modifiedPaths()&lt;/code&gt; but not in &lt;code&gt;directModifiedPaths()&lt;/code&gt; because a child of &lt;code&gt;a&lt;/code&gt; was directly modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2417c485743df9dce6b3a983083e1b637cfa3e7" translate="yes" xml:space="preserve">
          <source>A projection &lt;em&gt;must&lt;/em&gt; be either inclusive or exclusive. In other words, you must either list the fields to include (which excludes all others), or list the fields to exclude (which implies all other fields are included). The &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field&quot;&gt;&lt;code&gt;_id&lt;/code&gt; field is the only exception because MongoDB includes it by default&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9755b2a2724f9d3723079315bbb83fde9c29e8c9" translate="yes" xml:space="preserve">
          <source>A query also has a &lt;code&gt;.then()&lt;/code&gt; function, and thus can be used as a promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641f1ab8a8834d22ccb3fdf353a4175251c6a5c8" translate="yes" xml:space="preserve">
          <source>API summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ba395af486acd8c6736d85195047e04c88f269" translate="yes" xml:space="preserve">
          <source>Aborting a Transaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e6d6fb4a63c051c4716663149b475710898719" translate="yes" xml:space="preserve">
          <source>Aborting the transaction if your operation throws</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fd8d720fb704f5f561a32d7865f6d53d890c97" translate="yes" xml:space="preserve">
          <source>Add a function property to &lt;code&gt;schema.statics&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496e4f7db42fef74704bcc3c4138717f84ed49b6" translate="yes" xml:space="preserve">
          <source>Adding Subdocs to Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b4f38f1d14ab3ca43456e262267bc45cba29c1" translate="yes" xml:space="preserve">
          <source>Additional properties to attach to the query when calling &lt;code&gt;save()&lt;/code&gt; and &lt;code&gt;isNew&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41259af1d149e80f372ae7fe01ad4794f775651d" translate="yes" xml:space="preserve">
          <source>Adds a &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag&quot;&gt;cursor flag&lt;/a&gt;. Useful for setting the &lt;code&gt;noCursorTimeout&lt;/code&gt; and &lt;code&gt;tailable&lt;/code&gt; flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928bc6b0b0675b07401b0f2cbcb37eca0ab66c3c" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;$set&lt;/code&gt; to this query's update without changing the operation. This is useful for query middleware so you can add an update regardless of whether you use &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, &lt;code&gt;findOneAndUpdate()&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1a7400b5731716fa13daae602d6785d1610dc7" translate="yes" xml:space="preserve">
          <source>Adds a collation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a603f09fd6dbb1110cdc20dfcabf5d8d6c40df3" translate="yes" xml:space="preserve">
          <source>Adds a collation to this op (MongoDB 3.4 and up)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34e43d8415373dd3d2e60ca9b4167ada4943fca" translate="yes" xml:space="preserve">
          <source>Adds a custom getter to this virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8747f70f6d87fbbc0e9b930389249ac090ba0dee" translate="yes" xml:space="preserve">
          <source>Adds a custom setter to this virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06873bced0f4e45fcad9d710c31e59bbcc4665e" translate="yes" xml:space="preserve">
          <source>Adds a discriminator to this document array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c455289a22a86dba3a18abc048e376f37bb9783" translate="yes" xml:space="preserve">
          <source>Adds a discriminator to this single nested subdocument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773a40f2dd3a08c2a3b774ea936480888a520907" translate="yes" xml:space="preserve">
          <source>Adds a discriminator type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9462a42ffb88b21a7e3f8b0cfad7f4d5ac110cc8" translate="yes" xml:space="preserve">
          <source>Adds a getter to this schematype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbc5ee2578b7a57aac651dd37b3ebd24a1d0048" translate="yes" xml:space="preserve">
          <source>Adds a method call to the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7254ddcb07824e4f2c603eab09130b668c71daf2" translate="yes" xml:space="preserve">
          <source>Adds a required validator to this SchemaType. The validator gets added to the front of this SchemaType's validators array using &lt;code&gt;unshift()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0249e76074ff3cbc8ce58c92a1afdbcde986a6e5" translate="yes" xml:space="preserve">
          <source>Adds a setter to this schematype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895df6dc372ffc5aae7f31d2e0e549b1bb589d58" translate="yes" xml:space="preserve">
          <source>Adds an instance method to documents constructed from Models compiled from this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fffa6538b705be5c5d1bf80c87e9f068f43ba8e" translate="yes" xml:space="preserve">
          <source>Adds key path / schema type pairs to this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2af4663b3475889e23f03f5a792de00f24ddff3" translate="yes" xml:space="preserve">
          <source>Adds static &quot;class&quot; methods to Models compiled from this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489bfab46f7fde5fead9265f4487b47d3eed36b2" translate="yes" xml:space="preserve">
          <source>Adds validator(s) for this document path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a7f02f9a16dd150b72d22ea712e0288e31cb94" translate="yes" xml:space="preserve">
          <source>Adds values to the array if not already present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb77150e9faa487ba719c5bcecc6b2cfa53c6f0" translate="yes" xml:space="preserve">
          <source>After completion, an &lt;code&gt;index&lt;/code&gt; event is emitted on this &lt;code&gt;Model&lt;/code&gt; passing an error if one occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8e8189f1313ddd69a6c196be4e792c160e8ade" translate="yes" xml:space="preserve">
          <source>Aggregate</source>
          <target state="translated">Aggregate</target>
        </trans-unit>
        <trans-unit id="82e9fbabfa8c8eb99c225c42549902e3b8b31754" translate="yes" xml:space="preserve">
          <source>Aggregate Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a244ebd1a3fb6a3d6786f4ba6e4acce10a7692bf" translate="yes" xml:space="preserve">
          <source>Aggregate constructor used for building aggregation pipelines. Do not instantiate this class directly, use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.aggregate&quot;&gt;Model.aggregate()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc31257ce9d2b4c422dd2005037999ddae66d41" translate="yes" xml:space="preserve">
          <source>Aggregate middleware is for &lt;code&gt;MyModel.aggregate()&lt;/code&gt;. Aggregate middleware executes when you call &lt;code&gt;exec()&lt;/code&gt; on an aggregate object. In aggregate middleware, &lt;code&gt;this&lt;/code&gt; refers to the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.aggregate&quot;&gt;aggregation object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7457a858adb90a8f43bfa7b4322a45bef7e73d70" translate="yes" xml:space="preserve">
          <source>Aggregate()</source>
          <target state="translated">Aggregate()</target>
        </trans-unit>
        <trans-unit id="843922cde6a9b2950b6c6b1c95ca2e49a2256ec5" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.Symbol.asyncIterator()</source>
          <target state="translated">Aggregate.prototype.Symbol.asyncIterator()</target>
        </trans-unit>
        <trans-unit id="6fc9eb50be3cd7a5aba07a7a775fb11d9368a465" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.addCursorFlag</source>
          <target state="translated">Aggregate.prototype.addCursorFlag</target>
        </trans-unit>
        <trans-unit id="e7cc6f90930e623c81ce306040f62c268252ea66" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.addFields()</source>
          <target state="translated">Aggregate.prototype.addFields()</target>
        </trans-unit>
        <trans-unit id="516fb8a746ffd02f915cd4dfc880f0ba02cba9be" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.allowDiskUse()</source>
          <target state="translated">Aggregate.prototype.allowDiskUse()</target>
        </trans-unit>
        <trans-unit id="41076f599a5a808b131e549eb3fd977815fce6d8" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.append()</source>
          <target state="translated">Aggregate.prototype.append()</target>
        </trans-unit>
        <trans-unit id="29bf105c791db16cbf14c472883dde4a0870d1e2" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.catch()</source>
          <target state="translated">Aggregate.prototype.catch()</target>
        </trans-unit>
        <trans-unit id="4f0e8afd33a923c67e140496e143f18a19fcf392" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.collation()</source>
          <target state="translated">Aggregate.prototype.collation()</target>
        </trans-unit>
        <trans-unit id="236924d905926f0fca0b0f8a7387a504233230fe" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.count()</source>
          <target state="translated">Aggregate.prototype.count()</target>
        </trans-unit>
        <trans-unit id="858959ae05cc9be09412fc9d982ebb0d4c6b5c60" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.cursor()</source>
          <target state="translated">Aggregate.prototype.cursor()</target>
        </trans-unit>
        <trans-unit id="95f6a117abc7e6ce719db6fcad95e549c0d5ef72" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.exec()</source>
          <target state="translated">Aggregate.prototype.exec()</target>
        </trans-unit>
        <trans-unit id="c760f4693a79f435b48ac79f62072af9b1bcb21e" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.explain()</source>
          <target state="translated">Aggregate.prototype.explain()</target>
        </trans-unit>
        <trans-unit id="68d4397435e1a3c0d270a05945a96c55dff04d66" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.facet()</source>
          <target state="translated">Aggregate.prototype.facet()</target>
        </trans-unit>
        <trans-unit id="11605e727111d2bad2dcb3e890ecb3f791d2dfdc" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.graphLookup()</source>
          <target state="translated">Aggregate.prototype.graphLookup()</target>
        </trans-unit>
        <trans-unit id="ad39320fc0c746cd9c03f1ce647a2fb9cafb524d" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.group()</source>
          <target state="translated">Aggregate.prototype.group()</target>
        </trans-unit>
        <trans-unit id="bfbbdd73e35982d1c92c8418103ac460e840ad10" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.hint()</source>
          <target state="translated">Aggregate.prototype.hint()</target>
        </trans-unit>
        <trans-unit id="240975104f0259b2a92dfd124cdc034682beb2cd" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.limit()</source>
          <target state="translated">Aggregate.prototype.limit()</target>
        </trans-unit>
        <trans-unit id="194e641ee0007bb8abe5a776b7c7ce903e0746cd" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.lookup()</source>
          <target state="translated">Aggregate.prototype.lookup()</target>
        </trans-unit>
        <trans-unit id="6fef8a9f367f754ec3ac82324d5599507c730e3b" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.match()</source>
          <target state="translated">Aggregate.prototype.match()</target>
        </trans-unit>
        <trans-unit id="9bd669681d014e761029c9a8692afbb80fac8ea5" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.model()</source>
          <target state="translated">Aggregate.prototype.model()</target>
        </trans-unit>
        <trans-unit id="d30da3d4c1b5014f4c0bba392dd3416b48791314" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.near()</source>
          <target state="translated">Aggregate.prototype.near()</target>
        </trans-unit>
        <trans-unit id="c8c03c213a86e583f5e152adc8ed5530ac91a930" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.option()</source>
          <target state="translated">Aggregate.prototype.option()</target>
        </trans-unit>
        <trans-unit id="8e3af50c8fb7ddaa1513df10d8d3fb1c930c0a93" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.options</source>
          <target state="translated">Aggregate.prototype.options</target>
        </trans-unit>
        <trans-unit id="239df6560fbac20b2a6e4f7440e5ed52d7c18f5c" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.pipeline()</source>
          <target state="translated">Aggregate.prototype.pipeline()</target>
        </trans-unit>
        <trans-unit id="c7c14f11df0d532ee0a1a039bfa5dc7c833319c2" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.project()</source>
          <target state="translated">Aggregate.prototype.project()</target>
        </trans-unit>
        <trans-unit id="978a73dfdbcef041b7682c9f6bfdaf2d1b38c233" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.read()</source>
          <target state="translated">Aggregate.prototype.read()</target>
        </trans-unit>
        <trans-unit id="5c405bcfb9a32a6ecc68945ffefb51700bdb8d43" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.readConcern()</source>
          <target state="translated">Aggregate.prototype.readConcern()</target>
        </trans-unit>
        <trans-unit id="e3297a4beaf3a6b1fc0b1fb7a166ee9390071d93" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.redact()</source>
          <target state="translated">Aggregate.prototype.redact()</target>
        </trans-unit>
        <trans-unit id="097a9487db294cb47133cc5ab2c4c7bf35b15dd8" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.replaceRoot()</source>
          <target state="translated">Aggregate.prototype.replaceRoot()</target>
        </trans-unit>
        <trans-unit id="e7ee8ce33fdaf467f9ca030564b2dc8ec4946311" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.sample()</source>
          <target state="translated">Aggregate.prototype.sample()</target>
        </trans-unit>
        <trans-unit id="8992969af7dee5a1b59a0f577221f37ae87b1bea" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.session()</source>
          <target state="translated">Aggregate.prototype.session()</target>
        </trans-unit>
        <trans-unit id="4a47091a9446521482d1c0daa6ab905a2f1087dc" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.skip()</source>
          <target state="translated">Aggregate.prototype.skip()</target>
        </trans-unit>
        <trans-unit id="040ddd22a46ab9687c94f0855f5f215b0fd542de" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.sort()</source>
          <target state="translated">Aggregate.prototype.sort()</target>
        </trans-unit>
        <trans-unit id="477e6282ff5e036d9c6105551f7f6f0390aedfb4" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.sortByCount()</source>
          <target state="translated">Aggregate.prototype.sortByCount()</target>
        </trans-unit>
        <trans-unit id="7c20583c7dfbead8bcb29052218876ead9083557" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.then()</source>
          <target state="translated">Aggregate.prototype.then()</target>
        </trans-unit>
        <trans-unit id="ae23af45790745b5d82d9688e6d203fdbeffa334" translate="yes" xml:space="preserve">
          <source>Aggregate.prototype.unwind()</source>
          <target state="translated">Aggregate.prototype.unwind()</target>
        </trans-unit>
        <trans-unit id="ecb60e367fcb61db7ebd3ac1d38044cf0eb00a67" translate="yes" xml:space="preserve">
          <source>Aggregation Cursors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be92f44c34d513efbfb5966d4f26829544dc02cb" translate="yes" xml:space="preserve">
          <source>Aggregation Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c06088cd7039929d537a54a51056168148f93b" translate="yes" xml:space="preserve">
          <source>AggregationCursor</source>
          <target state="translated">AggregationCursor</target>
        </trans-unit>
        <trans-unit id="81c36fdae1953675a8eb1cdb218532f6e98fa3e4" translate="yes" xml:space="preserve">
          <source>AggregationCursor()</source>
          <target state="translated">AggregationCursor()</target>
        </trans-unit>
        <trans-unit id="6e6c70fbb536558c01d025ff0fb48536efd63231" translate="yes" xml:space="preserve">
          <source>AggregationCursor.prototype.addCursorFlag()</source>
          <target state="translated">AggregationCursor.prototype.addCursorFlag()</target>
        </trans-unit>
        <trans-unit id="4842a8f6f3e69dee23028c0eef66983859a3b7b3" translate="yes" xml:space="preserve">
          <source>AggregationCursor.prototype.close()</source>
          <target state="translated">AggregationCursor.prototype.close()</target>
        </trans-unit>
        <trans-unit id="9d5a768f46d2cf095614b2c2058468bce6fc25eb" translate="yes" xml:space="preserve">
          <source>AggregationCursor.prototype.eachAsync()</source>
          <target state="translated">AggregationCursor.prototype.eachAsync()</target>
        </trans-unit>
        <trans-unit id="14cd91d832be93282743e2d1c5907127bea8ba8c" translate="yes" xml:space="preserve">
          <source>AggregationCursor.prototype.map()</source>
          <target state="translated">AggregationCursor.prototype.map()</target>
        </trans-unit>
        <trans-unit id="98e34ab1c08d39ec0aecc260bc2d5a42b2222af3" translate="yes" xml:space="preserve">
          <source>AggregationCursor.prototype.next()</source>
          <target state="translated">AggregationCursor.prototype.next()</target>
        </trans-unit>
        <trans-unit id="d8c4010a65a4f6bcf71ba056088cd58b5d66e98b" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;set()&lt;/code&gt;, used internally to avoid conflicts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27805eba16c77fb51fa8f3fb64d0d25940c6c505" translate="yes" xml:space="preserve">
          <source>Alias for remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99694a1b5337daf76f7d3a3ce97e173e33c199a2" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#types_array_MongooseArray-pull&quot;&gt;pull&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="e7319f98205cd8db4b5885ee88e39fb2e302e7a3" translate="yes" xml:space="preserve">
          <source>Aliases are a particular type of virtual where the getter and setter seamlessly get and set another property. This is handy for saving network bandwidth, so you can convert a short property name stored in the database into a longer name for code readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249325939490bc8735908bed5f73c74bdfebc544" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;schematypes&quot;&gt;SchemaTypes&lt;/a&gt; have the built-in &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-required&quot;&gt;required&lt;/a&gt; validator. The required validator uses the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-checkRequired&quot;&gt;SchemaType's &lt;code&gt;checkRequired()&lt;/code&gt; function&lt;/a&gt; to determine if the value satisfies the required validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e0c0d438b3ea601d1b9a4b3a10e435b8b16582" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;update&lt;/code&gt; values are cast to their appropriate SchemaTypes before being sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980356a9ed199883795278ff2eef0836f5e224eb" translate="yes" xml:space="preserve">
          <source>All Schema Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87f4d75717de57fb0c8638ce8eec06045991c08" translate="yes" xml:space="preserve">
          <source>All middleware types support pre and post hooks. How pre and post hooks work is described in more detail below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86abacfebb8c940392b2c8ce1296b1110e76ab3" translate="yes" xml:space="preserve">
          <source>All other values will cause a &lt;code&gt;CastError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9ec7ca0aa13bbb84b6637ca13c4d252278945c" translate="yes" xml:space="preserve">
          <source>All top level keys which are not &lt;code&gt;atomic&lt;/code&gt; operation names are treated as set operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b202580a6be03bc633d8f7e64acd625c5c5571eb" translate="yes" xml:space="preserve">
          <source>All top level update keys which are not &lt;code&gt;atomic&lt;/code&gt; operation names are treated as set operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa2098b200dca11b3889919446589046de03e0d" translate="yes" xml:space="preserve">
          <source>Allows overriding casting logic for this individual path. If a string, the given string overwrites Mongoose's default cast error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181d38db7ef9c24e06366b7e8c0a0c37edfe5a2d" translate="yes" xml:space="preserve">
          <source>Allows setting &lt;a href=&quot;https://docs.mongodb.com/manual/reference/write-concern/&quot;&gt;write concern&lt;/a&gt; at the schema level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfcaa99b1d3068242ee53699c3b372200547af1" translate="yes" xml:space="preserve">
          <source>Allows setting &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-read&quot;&gt;query#read&lt;/a&gt; options at the schema level, providing us a way to apply default &lt;a href=&quot;http://docs.mongodb.org/manual/applications/replication/#replica-set-read-preference&quot;&gt;ReadPreferences&lt;/a&gt; to all queries derived from a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e45cada9261aa7a6ce12a0bdc76635d9c3b2c21" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;$push&lt;/code&gt;, &lt;code&gt;$addToSet&lt;/code&gt;, &lt;code&gt;$pull&lt;/code&gt;, and &lt;code&gt;$pullAll&lt;/code&gt; validation does &lt;strong&gt;not&lt;/strong&gt; run any validation on the array itself, only individual elements of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847eb85077d7d48d284d196cf7c20eda98376691" translate="yes" xml:space="preserve">
          <source>Also, suppose that events and conversations are stored in separate MongoDB instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7cfde00c356b92b9b8c1119e0864456154d4a8" translate="yes" xml:space="preserve">
          <source>Alternate declaration syntax for arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22c6647fffa2046e20896a4f6f9d33c2f4184a6" translate="yes" xml:space="preserve">
          <source>Alternate declaration syntax for single subdocuments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ba7b370f03030b8c76b0dc656480d9bcc52def" translate="yes" xml:space="preserve">
          <source>Although queries are not promises, queries are &lt;a href=&quot;https://promisesaplus.com/#terminology&quot;&gt;thenables&lt;/a&gt;. That means they have a &lt;code&gt;.then()&lt;/code&gt; function, so you can use queries as promises with either promise chaining or &lt;a href=&quot;https://asyncawait.net&quot;&gt;async await&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a49fc1358694fe192a8b453996d1db31b425d7" translate="yes" xml:space="preserve">
          <source>Always Use Forward Key Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e34c68e9185a70097a071412482bf9e565ee7a" translate="yes" xml:space="preserve">
          <source>An &quot;anything goes&quot; SchemaType. Mongoose will not do any casting on mixed paths. You can define a mixed path using &lt;code&gt;Schema.Types.Mixed&lt;/code&gt; or by passing an empty object literal. The following are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a705941c7091d1ffb4181ac8b6af805a46d0d4c" translate="yes" xml:space="preserve">
          <source>An AggregationCursor fulfills the Node.js streams3 API, in addition to several other mechanisms for loading documents from MongoDB one at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b4a6e838271f9af442d4731a7a44b39006a99f" translate="yes" xml:space="preserve">
          <source>An AggregationCursor is a concurrency primitive for processing aggregation results one document at a time. It is analogous to QueryCursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a5161d039eb21457fc7182512f8160cea3e335" translate="yes" xml:space="preserve">
          <source>An alternative approach is to define separate &lt;code&gt;blogPost&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt; properties on &lt;code&gt;commentSchema&lt;/code&gt;, and then &lt;code&gt;populate()&lt;/code&gt; on both properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c60afde9116cb2d14149dcb235dcebedc631939" translate="yes" xml:space="preserve">
          <source>An array containing all &lt;a href=&quot;connections&quot;&gt;connections&lt;/a&gt; associated with this Mongoose instance. By default, there is 1 connection. Calling &lt;a href=&quot;#mongoose_Mongoose-createConnection&quot;&gt;&lt;code&gt;createConnection()&lt;/code&gt;&lt;/a&gt; adds a connection to this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e350f0b0f226ba49c4d52e1b93c3bcfd9f7e9f" translate="yes" xml:space="preserve">
          <source>An instance of a model is called a &lt;a href=&quot;documents&quot;&gt;document&lt;/a&gt;. Creating them and saving to the database is easy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd76edc9f2a9af34523d8bedc6a28c5d42505ee" translate="yes" xml:space="preserve">
          <source>An instance of this error class will be returned when &lt;a href=&quot;../validation&quot;&gt;validation&lt;/a&gt; failed. The &lt;code&gt;errors&lt;/code&gt; property contains an object whose keys are the paths that failed and whose values are instances of CastError or ValidationError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ba35fd36ef88f4affac24a07de26e12cdb9d3a" translate="yes" xml:space="preserve">
          <source>An instance of this error class will be returned when &lt;code&gt;save()&lt;/code&gt; fails because the underlying document was not found. The constructor takes one parameter, the conditions that mongoose passed to &lt;code&gt;update()&lt;/code&gt; when trying to update the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb4de760b0210ece76a83f79760f744d8065edd" translate="yes" xml:space="preserve">
          <source>An instance of this error class will be returned when mongoose failed to cast a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c70404aff1884073622bf3aa3cf9b6353162285" translate="yes" xml:space="preserve">
          <source>An instance of this error class will be returned when you call &lt;code&gt;save()&lt;/code&gt; after the document in the database was changed in a potentially unsafe way. See the &lt;a href=&quot;../guide#versionKey&quot;&gt;&lt;code&gt;versionKey&lt;/code&gt; option&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8025501df43f30dbd1781a71bf5cecb63b68db9e" translate="yes" xml:space="preserve">
          <source>An instance of this error class will be returned when you call &lt;code&gt;save()&lt;/code&gt; multiple times on the same document in parallel. See the &lt;a href=&quot;https://mongoosejs.com/docs/faq.html&quot;&gt;FAQ&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23143c292e44d6050f231fd8df5cbc58124c9a25" translate="yes" xml:space="preserve">
          <source>An instance of this error will be returned if you used an array projection and then modified the array in an unsafe way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7208b16e18312640104485d2d90814759d152c8" translate="yes" xml:space="preserve">
          <source>And the following values to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6029c1aae491b6ee7d6ca884f72df4feaae38e" translate="yes" xml:space="preserve">
          <source>Any functions you pass to &lt;code&gt;map()&lt;/code&gt; will run &lt;strong&gt;after&lt;/strong&gt; any post hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f2f6952b73e26e7a09f0936661e1b442258c2d" translate="yes" xml:space="preserve">
          <source>Any other value causes a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongooseerror_MongooseError.CastError&quot;&gt;CastError&lt;/a&gt;. You can modify what values Mongoose converts to true or false using the &lt;code&gt;convertToTrue&lt;/code&gt; and &lt;code&gt;convertToFalse&lt;/code&gt; properties, which are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;JavaScript sets&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e564dbfbac7f7e35fadf4e56abebfeacb024037" translate="yes" xml:space="preserve">
          <source>Anywhere a callback is passed to a query in Mongoose, the callback follows the pattern &lt;code&gt;callback(error, results)&lt;/code&gt;. What &lt;code&gt;results&lt;/code&gt; is depends on the operation: For &lt;code&gt;findOne()&lt;/code&gt; it is a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOne&quot;&gt;potentially-null single document&lt;/a&gt;, &lt;code&gt;find()&lt;/code&gt; a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.find&quot;&gt;list of documents&lt;/a&gt;, &lt;code&gt;count()&lt;/code&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.count&quot;&gt;the number of documents&lt;/a&gt;, &lt;code&gt;update()&lt;/code&gt; the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.update&quot;&gt;number of documents affected&lt;/a&gt;, etc. The &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model-js&quot;&gt;API docs for Models&lt;/a&gt; provide more detail on what is passed to the callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747d496559dd3dbc0e4f2bb00c054202d069dc06" translate="yes" xml:space="preserve">
          <source>Appends a new $addFields operator to this aggregate pipeline. Requires MongoDB v3.4+ to work</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba494bde986fc8257738d15efab31e240933fcc8" translate="yes" xml:space="preserve">
          <source>Appends a new $count operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973bb88fceebcca17b1a173646c2097b9bdf56ee" translate="yes" xml:space="preserve">
          <source>Appends a new $geoNear operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64001ac674e200a3ec305a9ce6ec4222d70ffb70" translate="yes" xml:space="preserve">
          <source>Appends a new $limit operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0e08deda0d843667dfb14acea7f30b83b10015" translate="yes" xml:space="preserve">
          <source>Appends a new $project operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec183d3b239fc9ff37bb2d94a1fbbaeb9a6456f" translate="yes" xml:space="preserve">
          <source>Appends a new $redact operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c26984567fcda93924a1abd8865f71f4eb9ed8" translate="yes" xml:space="preserve">
          <source>Appends a new $replaceRoot operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c402a802c129119e922a7e88d234780fb666ee46" translate="yes" xml:space="preserve">
          <source>Appends a new $skip operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c68c95d064e5edfad6e3cdb2f657b48d709c34" translate="yes" xml:space="preserve">
          <source>Appends a new $sort operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648e48b4aecb029054829ff3bee60869c2eb8fa4" translate="yes" xml:space="preserve">
          <source>Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name or a pipeline object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71030667c24ecf5efa4b780080d384043135ef1f" translate="yes" xml:space="preserve">
          <source>Appends a new custom $group operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a81c1fbd53afa41e7acdb9c509bcd8cd1a1de1" translate="yes" xml:space="preserve">
          <source>Appends a new custom $match operator to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768ce73a342c251fb8f50155829e0ecffeb720fc" translate="yes" xml:space="preserve">
          <source>Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c1f331b605940c9b1725d76913022228b94c88" translate="yes" xml:space="preserve">
          <source>Appends new custom $lookup operator(s) to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3277143ec95368f18c44b452d574393f4ec89edc" translate="yes" xml:space="preserve">
          <source>Appends new custom $sample operator(s) to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acafaf19a389ffc1d83bb7aa32068b074bb3950" translate="yes" xml:space="preserve">
          <source>Appends new custom $unwind operator(s) to this aggregate pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2de818667f64ef4d9593fcbf5522f2afb6fc362" translate="yes" xml:space="preserve">
          <source>Appends new operators to this aggregate pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a0ef2a2fa4ff9d87fd72d3b365d9052d2ea31f" translate="yes" xml:space="preserve">
          <source>Applies getters to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d291fc256ac11aaec318df8e987e01b6012221" translate="yes" xml:space="preserve">
          <source>Applies setters to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="7c75d67848d366d2ee8f75eb7fb62759e5d3ff09" translate="yes" xml:space="preserve">
          <source>Array of child schemas (from document arrays and single nested subdocs) and their corresponding compiled models. Each element of the array is an object with 2 properties: &lt;code&gt;schema&lt;/code&gt; and &lt;code&gt;model&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="d3bb47b3b52828441aecba4ef48350e69d82945a" translate="yes" xml:space="preserve">
          <source>Arrays are special because they implicitly have a default value of &lt;code&gt;[]&lt;/code&gt; (empty array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4956f316a8f2c6143c368299f8f33077589aed" translate="yes" xml:space="preserve">
          <source>Arrays of refs work the same way. Just call the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-populate&quot;&gt;populate&lt;/a&gt; method on the query and an array of documents will be returned &lt;em&gt;in place&lt;/em&gt; of the original &lt;code&gt;_id&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2780c078ffb35c877e3b5695ec4e690e6c21100" translate="yes" xml:space="preserve">
          <source>As a consequence, &lt;a href=&quot;https://mongoosejs.com/docs/faq.html#type-key&quot;&gt;you need a little extra work to define a property named &lt;code&gt;type&lt;/code&gt; in your schema&lt;/a&gt;. For example, suppose you're building a stock portfolio app, and you want to store the asset's &lt;code&gt;type&lt;/code&gt; (stock, bond, ETF, etc.). Naively, you might define your schema as shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb2c0989f391dc6163c3115e17e227ff30ff042" translate="yes" xml:space="preserve">
          <source>As a consequence, be careful about exporting Mongoose models from the same file that you define your schema. If you choose to use this pattern, you must define &lt;a href=&quot;api/mongoose#mongoose_Mongoose-plugin&quot;&gt;global plugins&lt;/a&gt;&lt;strong&gt;before&lt;/strong&gt; calling &lt;code&gt;require()&lt;/code&gt; on your model file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca408e8ff2c0e1ca0beac00ffbea3695b58011f9" translate="yes" xml:space="preserve">
          <source>As a consequence, checking whether &lt;code&gt;blogPost.author._id&lt;/code&gt; is &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/6415#issuecomment-388579185&quot;&gt;no longer viable as a way to check whether &lt;code&gt;author&lt;/code&gt; is populated&lt;/a&gt;. Use &lt;code&gt;blogPost.populated('author') != null&lt;/code&gt; or &lt;code&gt;blogPost.author instanceof mongoose.Types.ObjectId&lt;/code&gt; to check whether &lt;code&gt;author&lt;/code&gt; is populated instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3601431b0b4b71f065b21b94b189676d17ab54bb" translate="yes" xml:space="preserve">
          <source>As a general best practice, make sure you declare any hooks on your schemas &lt;strong&gt;before&lt;/strong&gt; you use them. You should &lt;strong&gt;not&lt;/strong&gt; call &lt;code&gt;pre()&lt;/code&gt; or &lt;code&gt;post()&lt;/code&gt; after calling &lt;code&gt;discriminator()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b925bab8f0c4c0d543642a1b8483a14534d1e4a1" translate="yes" xml:space="preserve">
          <source>As an extra measure of flow control, remove will return a Promise (bound to &lt;code&gt;fn&lt;/code&gt; if passed) so it could be chained, or hooked to recieve errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b6d187189f96c36894d73aeff8314167f0a070" translate="yes" xml:space="preserve">
          <source>As an extra measure of flow control, save will return a Promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b7bb1db006f7691ed2b9ad2e7dfd7aefff0f41" translate="yes" xml:space="preserve">
          <source>As of Mongoose 3.7, &lt;code&gt;$geoWithin&lt;/code&gt; is always used for queries. To change this behavior, see &lt;a href=&quot;#query_Query-use%2524geoWithin&quot;&gt;Query.use$geoWithin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1205531bdecdeccf4f760bb371e7d65a1d1e7b0" translate="yes" xml:space="preserve">
          <source>As you can see above, setters allow you to transform the data before it stored in MongoDB, or before executing a query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87114911b43da39a538c139c37064d8257980f98" translate="yes" xml:space="preserve">
          <source>Aside from code reuse, one important reason to use subdocuments is to create a path where there would otherwise not be one to allow for validation over a group of fields (e.g. dateRange.fromDate &amp;lt;= dateRange.toDate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea3cb10f62bd16ab9d0d0765ba05afd9d83e79c" translate="yes" xml:space="preserve">
          <source>Async Custom Validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9662d399cee557301a946a6c9f7cc03083807b0d" translate="yes" xml:space="preserve">
          <source>Asynchronous Post Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683a05ecd5aeddaf17ee0f2970ad04a638c7ae69" translate="yes" xml:space="preserve">
          <source>Asynchronous validation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761193e3a3c4f114ec40047225c8379ef0d584d3" translate="yes" xml:space="preserve">
          <source>Atomically shifts the array at most one time per document &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1075b97c783e628af607122a96dbada0ae885c" translate="yes" xml:space="preserve">
          <source>Attaches a getter for all instances of this schema type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48315d4da6f457296128d582ea2ac7a8107a6caa" translate="yes" xml:space="preserve">
          <source>Available options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1e1650314eb0664e99c992821e78b6f24c0ca6" translate="yes" xml:space="preserve">
          <source>Available top-level options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b91cb4d12c5aff4ec277a1340c29e79f609bdc8" translate="yes" xml:space="preserve">
          <source>Base Mongoose instance the model uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9f3e501cf8a96e76c57e06933917d1822714e8" translate="yes" xml:space="preserve">
          <source>Be careful to not use an existing model instance for the update clause (this won't work and can cause weird behavior like infinite loops). Also, ensure that the update clause does not have an _id property, which causes Mongo to return a &quot;Mod on _id not allowed&quot; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73920b9b9e2d6f035e87111915acf7f67b6b3da0" translate="yes" xml:space="preserve">
          <source>Because of schemas, Mongoose knows what types fields should be, so it can provide some neat syntactic sugar. For example, if you forget to put &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/in/&quot;&gt;&lt;code&gt;$in&lt;/code&gt;&lt;/a&gt; on a non-array field, Mongoose will add &lt;code&gt;$in&lt;/code&gt; for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1fbd17b66470f9fa9d13c686a52f53ee5b76f2" translate="yes" xml:space="preserve">
          <source>Before Mongoose builds indexes, it calls &lt;code&gt;Model.createCollection()&lt;/code&gt; to create the underlying collection in MongoDB if &lt;code&gt;autoCreate&lt;/code&gt; is set to true. Calling &lt;code&gt;createCollection()&lt;/code&gt; sets the &lt;a href=&quot;https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations&quot;&gt;collection's default collation&lt;/a&gt; based on the &lt;a href=&quot;#collation&quot;&gt;collation option&lt;/a&gt; and establishes the collection as a capped collection if you set the &lt;a href=&quot;#capped&quot;&gt;&lt;code&gt;capped&lt;/code&gt; schema option&lt;/a&gt;. Like &lt;code&gt;autoIndex&lt;/code&gt;, setting &lt;code&gt;autoCreate&lt;/code&gt; to true is helpful for development and test environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a985d24726a551ff3e1a8c2513771324cc8c0f10" translate="yes" xml:space="preserve">
          <source>Before running validators, Mongoose attempts to coerce values to the correct type. This process is called &lt;em&gt;casting&lt;/em&gt; the document. If casting fails for a given path, the &lt;code&gt;error.errors&lt;/code&gt; object will contain a &lt;code&gt;CastError&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5e40b5c16cce3265d3fddb4763f2fcfefe9dc7" translate="yes" xml:space="preserve">
          <source>Before we get into the specifics of validation syntax, please keep the following rules in mind:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7edc9b1533a18d376060ac316dc99065771a9ee" translate="yes" xml:space="preserve">
          <source>Below are some of the options that are important for tuning Mongoose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ff7005671cd8b817cded5ba3ed3df9cfb43979" translate="yes" xml:space="preserve">
          <source>Below is a full list of properties the return value from this function may have</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80edb3adad4e9aa071af1ca3c10cb954f8d4e783" translate="yes" xml:space="preserve">
          <source>Below is an example of an &lt;a href=&quot;http://expressjs.com/en/guide/routing.html&quot;&gt;Express route&lt;/a&gt; that is a good candidate for &lt;code&gt;lean()&lt;/code&gt;. This route does not modify the &lt;code&gt;person&lt;/code&gt; doc and doesn't rely on any Mongoose-specific functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc602f994904a14fffcb591abc08c56a3804a74" translate="yes" xml:space="preserve">
          <source>Below is an example of an Express route that should &lt;strong&gt;not&lt;/strong&gt; use &lt;code&gt;lean()&lt;/code&gt;. As a general rule of thumb, &lt;code&gt;GET&lt;/code&gt; routes are good candidates for &lt;code&gt;lean()&lt;/code&gt; in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful API&lt;/a&gt;. On the other hand, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc. routes generally should not use &lt;code&gt;lean()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d9e21cfaef9bc5d6e83d24dbd6a49e28756e5b" translate="yes" xml:space="preserve">
          <source>Below is one way to implement the &lt;code&gt;domain&lt;/code&gt; property using a virtual. You define virtuals on a schema using the &lt;a href=&quot;../api/schema#schema_Schema-virtual&quot;&gt;&lt;code&gt;Schema#virtual()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="08bbfb9c4d1d69262f16ef8594116c436e8473a3" translate="yes" xml:space="preserve">
          <source>Boolean Casting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5b1613f108b7d78d3535c1b82dd50046d98d7e" translate="yes" xml:space="preserve">
          <source>Boolean flag specifying if the document is new.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef592aa3bdb635d11cfb51b4901e6bd272996703" translate="yes" xml:space="preserve">
          <source>Booleans in Mongoose are &lt;a href=&quot;https://www.w3schools.com/js/js_booleans.asp&quot;&gt;plain JavaScript booleans&lt;/a&gt;. By default, Mongoose casts the below values to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be5f64b36230104ef9c6e230215846a83d18df6" translate="yes" xml:space="preserve">
          <source>Buffer</source>
          <target state="translated">Buffer</target>
        </trans-unit>
        <trans-unit id="7e525d047349c5b9d9bc4dc5bae919493ae9507a" translate="yes" xml:space="preserve">
          <source>Buffers are converted to instances of &lt;a href=&quot;http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html&quot;&gt;mongodb.Binary&lt;/a&gt; for proper storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b3c1c5fae7b886e1d6a0f9340a04d822106125" translate="yes" xml:space="preserve">
          <source>Built-in Promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d8e6ecef53e9407524165ac5b4c687389f0cac" translate="yes" xml:space="preserve">
          <source>Built-in Validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f326e2c2ecbb8cba51072b2515c89375022f6bac" translate="yes" xml:space="preserve">
          <source>But concatenating the first and last name every time can get cumbersome. And what if you want to do some extra processing on the name, like &lt;a href=&quot;https://www.npmjs.com/package/diacritics&quot;&gt;removing diacritics&lt;/a&gt;? A &lt;a href=&quot;https://mongoosejs.com/docs/api.html#virtualtype_VirtualType-get&quot;&gt;virtual property getter&lt;/a&gt; lets you define a &lt;code&gt;fullName&lt;/code&gt; property that won't get persisted to MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27127d570098e1768acba0cb1c77e2be4af62773" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mongoose.connect()&lt;/code&gt; will print out the below warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d112a3ce9f1d62d211c61d9f5e8e684476378f97" translate="yes" xml:space="preserve">
          <source>By default, Mongoose 5.x calls the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#ensureIndex&quot;&gt;MongoDB driver's &lt;code&gt;ensureIndex()&lt;/code&gt; function&lt;/a&gt;. The MongoDB driver deprecated this function in favor of &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#createIndex&quot;&gt;&lt;code&gt;createIndex()&lt;/code&gt;&lt;/a&gt;. Set the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-set&quot;&gt;&lt;code&gt;useCreateIndex&lt;/code&gt; global option&lt;/a&gt; to opt in to making Mongoose use &lt;code&gt;createIndex()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fc6029a24f92fef2dbd7e73dbba1545dc07ca3" translate="yes" xml:space="preserve">
          <source>By default, Mongoose does &lt;strong&gt;not&lt;/strong&gt; cast filter properties that aren't in your schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6fa4b7c268c4e50db567e27b6d8aecb0469c76" translate="yes" xml:space="preserve">
          <source>By default, Mongoose does not include virtuals when you convert a document to JSON. For example, if you pass a document to &lt;a href=&quot;http://expressjs.com/en/4x/api.html#res.json&quot;&gt;Express' &lt;code&gt;res.json()&lt;/code&gt; function&lt;/a&gt;, virtuals will &lt;strong&gt;not&lt;/strong&gt; be included by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38be75512b1163768374f184c577ad1febe67f2e" translate="yes" xml:space="preserve">
          <source>By default, Mongoose executes getters when converting a document to JSON, including &lt;a href=&quot;http://expressjs.com/en/4x/api.html#res.json&quot;&gt;Express' &lt;code&gt;res.json()&lt;/code&gt; function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0de981bc28bb318a52d97fd1583b5e1e61c2332" translate="yes" xml:space="preserve">
          <source>By default, Mongoose queries return an instance of the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#Document&quot;&gt;Mongoose &lt;code&gt;Document&lt;/code&gt; class&lt;/a&gt;. Documents are much heavier than vanilla JavaScript objects, because they have a lot of internal state for change tracking. Enabling the &lt;code&gt;lean&lt;/code&gt; option tells Mongoose to skip instantiating a full Mongoose document and just give you the POJO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fda110ec805e375d3db16d39e32df889b6578a" translate="yes" xml:space="preserve">
          <source>By default, Mongoose will automatically &lt;code&gt;select()&lt;/code&gt; any populated paths for you, unless you explicitly exclude them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3445fc0370803a15e0bad70cbc41305408206ffd" translate="yes" xml:space="preserve">
          <source>By default, Mongoose's &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.init&quot;&gt;&lt;code&gt;init()&lt;/code&gt; function&lt;/a&gt; creates all the indexes defined in your model's schema by calling &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.createIndexes&quot;&gt;&lt;code&gt;Model.createIndexes()&lt;/code&gt;&lt;/a&gt; after you successfully connect to MongoDB. Creating indexes automatically is great for development and test environments. But index builds can also create significant load on your production database. If you want to manage indexes carefully in production, you can set &lt;code&gt;autoIndex&lt;/code&gt; to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c73618c72d5ae627c678d5d0fcbf169e6ca0ab9" translate="yes" xml:space="preserve">
          <source>By default, documents are automatically validated before they are saved to the database. This is to prevent saving an invalid document. If you want to handle validation manually, and be able to save objects which don't pass validation, you can set &lt;code&gt;validateBeforeSave&lt;/code&gt; to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a81a65188f83c08e082ef1548f813eb3e88989" translate="yes" xml:space="preserve">
          <source>By default, if you have an object with key 'type' in your schema, mongoose will interpret it as a type declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70373bce8a9a4840a0f0e3ea9ca642be6dfd680" translate="yes" xml:space="preserve">
          <source>By default, mongoose 4 would coerce any value to a boolean without error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7feda312cdb550cd99ffec265f962362840a66" translate="yes" xml:space="preserve">
          <source>By default, mongoose buffers commands when the connection goes down until the driver manages to reconnect. To disable buffering, set &lt;code&gt;bufferCommands&lt;/code&gt; to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f341da2f52e64f22dfb6ff86a20a362a2c5de0" translate="yes" xml:space="preserve">
          <source>By default, mongoose only applies defaults when you create a new document. It will &lt;strong&gt;not&lt;/strong&gt; set defaults if you use &lt;code&gt;update()&lt;/code&gt; and &lt;code&gt;findOneAndUpdate()&lt;/code&gt;. However, mongoose 4.x lets you opt-in to this behavior using the &lt;code&gt;setDefaultsOnInsert&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dad8cfd3db0064b20928cb96e2bcd2ddf62581d" translate="yes" xml:space="preserve">
          <source>By default, the name of two fields are &lt;code&gt;createdAt&lt;/code&gt; and &lt;code&gt;updatedAt&lt;/code&gt;, customize the field name by setting &lt;code&gt;timestamps.createdAt&lt;/code&gt; and &lt;code&gt;timestamps.updatedAt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b8024b8661856dddf954eae8a25396723556b2" translate="yes" xml:space="preserve">
          <source>Call the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-static&quot;&gt;&lt;code&gt;Schema#static()&lt;/code&gt; function&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fb639b7313463881ed7d9bae34cc709237f03b" translate="yes" xml:space="preserve">
          <source>Callback</source>
          <target state="translated">Callback</target>
        </trans-unit>
        <trans-unit id="921cc8fbe8dea8ccbe6e1315d4a8d421d30c0a21" translate="yes" xml:space="preserve">
          <source>Callback Signature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf1a8accad15ce05664389e6e7b4379c1338ca0" translate="yes" xml:space="preserve">
          <source>Called internally after a document is returned from mongodb. Normally, you do &lt;strong&gt;not&lt;/strong&gt; need to call this function on your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0b5946cb7161f94c14580d9b656a5a68bd8cbd" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;MyModel.startSession()&lt;/code&gt; is equivalent to calling &lt;code&gt;MyModel.db.startSession()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b62767bd153b76136e2f1f95e24e72153fc18a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;mongoose.startSession()&lt;/code&gt; is equivalent to calling &lt;code&gt;mongoose.connection.startSession()&lt;/code&gt;. Sessions are scoped to a connection, so calling &lt;code&gt;mongoose.startSession()&lt;/code&gt; starts a session on the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-connection&quot;&gt;default mongoose connection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739945ecd2e8de7e221ceb240da0e1b5f5816a4b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;next()&lt;/code&gt; multiple times is a no-op. If you call &lt;code&gt;next()&lt;/code&gt; with an error &lt;code&gt;err1&lt;/code&gt; and then throw an error &lt;code&gt;err2&lt;/code&gt;, mongoose will report &lt;code&gt;err1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7fb08ca6be0aea79587841f6823ab6f9059516" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;pre()&lt;/code&gt; or &lt;code&gt;post()&lt;/code&gt; after &lt;a href=&quot;models#compiling&quot;&gt;compiling a model&lt;/a&gt; does &lt;strong&gt;not&lt;/strong&gt; work in Mongoose in general. For example, the below &lt;code&gt;pre('save')&lt;/code&gt; middleware will not fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f32d53ca520111e30a4e8ab267e78740c13c55" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;query.explain(v)&lt;/code&gt; is equivalent to &lt;code&gt;query.setOption({ explain: v })&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ed3bdfa7ce8b86c95c2f27523e3848e3f87c76" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;query.maxTimeMS(v)&lt;/code&gt; is equivalent to &lt;code&gt;query.setOption({ maxTimeMS: v })&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec96007b9cd06f5268c5d6208e4fcc437c404d86" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;remove()&lt;/code&gt; creates a &lt;a href=&quot;queries&quot;&gt;Mongoose query&lt;/a&gt;, and a query does not execute until you either pass a callback, call &lt;a href=&quot;#query_Query-then&quot;&gt;&lt;code&gt;Query#then()&lt;/code&gt;&lt;/a&gt;, or call &lt;a href=&quot;#query_Query-exec&quot;&gt;&lt;code&gt;Query#exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609a8ef4049cf198a6e264c58157b23a4c292806" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;session(null)&lt;/code&gt; removes the session from this query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5fb443ab4b658a940c29246ec079421a695aa8" translate="yes" xml:space="preserve">
          <source>Cannot be used with &lt;code&gt;distinct()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e780db5e68a7ac7e3a67608aa7e597550428a45" translate="yes" xml:space="preserve">
          <source>Cast Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea1b09f35d8cc32f668a4e439de4615d04ef452" translate="yes" xml:space="preserve">
          <source>Casting and validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c3e714349187fa77afd784906c02506d17cb63" translate="yes" xml:space="preserve">
          <source>Casting for &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, &lt;code&gt;replaceOne()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;deleteOne()&lt;/code&gt;, and &lt;code&gt;deleteMany()&lt;/code&gt; doesn't happen until &lt;code&gt;exec()&lt;/code&gt;. This makes it easier for hooks and custom query helpers to modify data, because mongoose won't restructure the data you passed in until after your hooks and query helpers have ran. It also makes it possible to set the &lt;code&gt;overwrite&lt;/code&gt; option &lt;em&gt;after&lt;/em&gt; passing in an update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27989ca27826e9b5de31d75fe8af67f93a20236" translate="yes" xml:space="preserve">
          <source>Casting runs before validation, and validation does not run if casting fails. That means your custom validators may assume &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, or an instance of the type specified in your schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63d5515edecf0374fda356fc97878b08f9a3bdc" translate="yes" xml:space="preserve">
          <source>Casts and validates the given object against this model's schema, passing the given &lt;code&gt;context&lt;/code&gt; to custom validators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f73a1700e04a2d0d32c23174a4c912f63a2760" translate="yes" xml:space="preserve">
          <source>Casts this query to the schema of &lt;code&gt;model&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb41fb48db4357799a08b5b080b820bd02b1104" translate="yes" xml:space="preserve">
          <source>Certain Mongoose hooks are synchronous, which means they do &lt;strong&gt;not&lt;/strong&gt; support functions that return promises or receive a &lt;code&gt;next()&lt;/code&gt; callback. Currently, only &lt;code&gt;init&lt;/code&gt; hooks are synchronous, because the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-init&quot;&gt;&lt;code&gt;init()&lt;/code&gt; function&lt;/a&gt; is synchronous. Below is an example of using pre and post init hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5927b964dcaf677321670b2514ec3c40f27f2dea" translate="yes" xml:space="preserve">
          <source>Change Streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccc05679167d48f8332ecd8e1cf1d1786a68c40" translate="yes" xml:space="preserve">
          <source>Change tracking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef674ba5e2610df019129a5b523328f30db1df39" translate="yes" xml:space="preserve">
          <source>Checking if a path is populated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac219a48665e303bf13a4d3cf72cba0fddf5100" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;path&lt;/code&gt; was explicitly selected. If no projection, always returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d918b271d353ef4b22d61e59c586fc48d3277c8" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;path&lt;/code&gt; was initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d81e1455d47c6a8d8efef17acbf10345d24549" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;path&lt;/code&gt; was selected in the source query which initialized this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fa8f3b08620b97143e19e6dd84636065a1617a" translate="yes" xml:space="preserve">
          <source>Checks if a path is set to its default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3213a077b923bc9585454a4df6bfca3a8ae83cba" translate="yes" xml:space="preserve">
          <source>Clears the modified state on the specified path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf61348036dd033c2bf4c60149b2215ec8c1bec" translate="yes" xml:space="preserve">
          <source>ClientSession &amp;laquo;[options.session]&amp;raquo; see &lt;a href=&quot;docs/api#aggregate_Aggregate-session&quot;&gt;&lt;code&gt;Aggregate.prototype.session()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4979e37ea0874504cb701ee5c796e8d46f366dfe" translate="yes" xml:space="preserve">
          <source>Closes the connection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3c19ec97620449d096d4e7b8c6e170f9b21447" translate="yes" xml:space="preserve">
          <source>Collection the model uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc7f0e7247f307d2251505f9af3918033fcc3c8" translate="yes" xml:space="preserve">
          <source>Combines multiple aggregation pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f162bb9bcb4a2295fd6f46a8cf6e60d14b2e39f" translate="yes" xml:space="preserve">
          <source>Committing the transaction if it succeeds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f38581d3223a59dab9bf5e14bdc1dda0efa40c5" translate="yes" xml:space="preserve">
          <source>Community!</source>
          <target state="translated">Community!</target>
        </trans-unit>
        <trans-unit id="fa15e5947a5613a7523c9de4a315223bb2d02613" translate="yes" xml:space="preserve">
          <source>Compiling your first model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8150e384faa238703f7782b4cd64de11be6c3411" translate="yes" xml:space="preserve">
          <source>Congratulations</source>
          <target state="translated">Congratulations</target>
        </trans-unit>
        <trans-unit id="6512ee1541e9a6c52d5bf7cf465332e8df25ea3c" translate="yes" xml:space="preserve">
          <source>Connection</source>
          <target state="translated">Connection</target>
        </trans-unit>
        <trans-unit id="5313ddf4ca6ee191e12efbc7496e07a98543f2f6" translate="yes" xml:space="preserve">
          <source>Connection Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8de674d74dfb397b9c24e61065b38bd41912699" translate="yes" xml:space="preserve">
          <source>Connection Logic and &lt;code&gt;useMongoClient&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca16cacf3157ce75f65073dd63dcb945e03aa7c" translate="yes" xml:space="preserve">
          <source>Connection Logic and `useMongoClient`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77840d6c2e65774f271cf1cf454f60d95052c5cf" translate="yes" xml:space="preserve">
          <source>Connection Pools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eead00386f670309e75fcd603b8c9a925665429a" translate="yes" xml:space="preserve">
          <source>Connection String Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81863a6b3baa3d10c0d270f388637dcd9943539f" translate="yes" xml:space="preserve">
          <source>Connection constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78766fd776cdb59bfcd3781169ca915d06214aa9" translate="yes" xml:space="preserve">
          <source>Connection ready state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fb604df337b22e7b0531f7dab0c4824af2a7d5" translate="yes" xml:space="preserve">
          <source>Connection the model uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa0aa65039ff4d6b98ec004e6ade920c56811cd" translate="yes" xml:space="preserve">
          <source>Connection()</source>
          <target state="translated">Connection()</target>
        </trans-unit>
        <trans-unit id="cbca46d5a055bbb95a83e1239a9f07900cb9c3ef" translate="yes" xml:space="preserve">
          <source>Connection.prototype.close()</source>
          <target state="translated">Connection.prototype.close()</target>
        </trans-unit>
        <trans-unit id="5a7fb35d28970d323d74b7817085b7d67bb2203b" translate="yes" xml:space="preserve">
          <source>Connection.prototype.collection()</source>
          <target state="translated">Connection.prototype.collection()</target>
        </trans-unit>
        <trans-unit id="26adaf084bffda1eb25a3b8ea5ebc04051b30fa4" translate="yes" xml:space="preserve">
          <source>Connection.prototype.collections</source>
          <target state="translated">Connection.prototype.collections</target>
        </trans-unit>
        <trans-unit id="ab412bf9568ef83cdbfd7817ed7e0a41c8636bbb" translate="yes" xml:space="preserve">
          <source>Connection.prototype.config</source>
          <target state="translated">Connection.prototype.config</target>
        </trans-unit>
        <trans-unit id="469985e176653a073f28cb3e7385c074af77590a" translate="yes" xml:space="preserve">
          <source>Connection.prototype.createCollection()</source>
          <target state="translated">Connection.prototype.createCollection()</target>
        </trans-unit>
        <trans-unit id="5f907d8466a04c71aa5c31d3bfd583368f273974" translate="yes" xml:space="preserve">
          <source>Connection.prototype.db</source>
          <target state="translated">Connection.prototype.db</target>
        </trans-unit>
        <trans-unit id="702075669bbd274b35f10ed47b41554ef351e981" translate="yes" xml:space="preserve">
          <source>Connection.prototype.deleteModel()</source>
          <target state="translated">Connection.prototype.deleteModel()</target>
        </trans-unit>
        <trans-unit id="d1bbdf8153f9e58af36a0eabef70454f3297be6a" translate="yes" xml:space="preserve">
          <source>Connection.prototype.dropCollection()</source>
          <target state="translated">Connection.prototype.dropCollection()</target>
        </trans-unit>
        <trans-unit id="b4a6934d5f82072ce1ebee95f6d0c7c87c93b103" translate="yes" xml:space="preserve">
          <source>Connection.prototype.dropDatabase()</source>
          <target state="translated">Connection.prototype.dropDatabase()</target>
        </trans-unit>
        <trans-unit id="473c74ded637962296db236334fc361a4e9ef456" translate="yes" xml:space="preserve">
          <source>Connection.prototype.get()</source>
          <target state="translated">Connection.prototype.get()</target>
        </trans-unit>
        <trans-unit id="3ccd2bd5006f0648b51887798247255ef10c1f74" translate="yes" xml:space="preserve">
          <source>Connection.prototype.host</source>
          <target state="translated">Connection.prototype.host</target>
        </trans-unit>
        <trans-unit id="17ff5274786c551cec766918e475e5203b2cd7f7" translate="yes" xml:space="preserve">
          <source>Connection.prototype.model()</source>
          <target state="translated">Connection.prototype.model()</target>
        </trans-unit>
        <trans-unit id="b73b5bf02445a3236058179b0e53e2ebe33d2fbc" translate="yes" xml:space="preserve">
          <source>Connection.prototype.modelNames()</source>
          <target state="translated">Connection.prototype.modelNames()</target>
        </trans-unit>
        <trans-unit id="34ae1deadf86ed8318ff53964e5c61b428dd10f9" translate="yes" xml:space="preserve">
          <source>Connection.prototype.models</source>
          <target state="translated">Connection.prototype.models</target>
        </trans-unit>
        <trans-unit id="c6fcafeb7ef51b3497ce49ebf5c596cbd6e859d8" translate="yes" xml:space="preserve">
          <source>Connection.prototype.name</source>
          <target state="translated">Connection.prototype.name</target>
        </trans-unit>
        <trans-unit id="614ef63e71dc31df9a8ad55376abfdf7bb0bae8c" translate="yes" xml:space="preserve">
          <source>Connection.prototype.openUri()</source>
          <target state="translated">Connection.prototype.openUri()</target>
        </trans-unit>
        <trans-unit id="dd2d82d851721edaf3f6455fd2be084b55cf1a4f" translate="yes" xml:space="preserve">
          <source>Connection.prototype.pass</source>
          <target state="translated">Connection.prototype.pass</target>
        </trans-unit>
        <trans-unit id="b61606ae02629165fa348d34fc0417c984fd5eb7" translate="yes" xml:space="preserve">
          <source>Connection.prototype.plugin()</source>
          <target state="translated">Connection.prototype.plugin()</target>
        </trans-unit>
        <trans-unit id="0a84146c64e4a9b9259829eb69b2d892a005f31f" translate="yes" xml:space="preserve">
          <source>Connection.prototype.plugins</source>
          <target state="translated">Connection.prototype.plugins</target>
        </trans-unit>
        <trans-unit id="1f275b13174d40e8d3147c3d581ff3a88cc0ecd5" translate="yes" xml:space="preserve">
          <source>Connection.prototype.port</source>
          <target state="translated">Connection.prototype.port</target>
        </trans-unit>
        <trans-unit id="dadac22184dac19ab4d2f97b05616527c4f98789" translate="yes" xml:space="preserve">
          <source>Connection.prototype.readyState</source>
          <target state="translated">Connection.prototype.readyState</target>
        </trans-unit>
        <trans-unit id="f1e64c26f0518e9bf2c1904ea7f7ac8885918879" translate="yes" xml:space="preserve">
          <source>Connection.prototype.set()</source>
          <target state="translated">Connection.prototype.set()</target>
        </trans-unit>
        <trans-unit id="cb7556d9e79f92a1abf2255c45676ac54d48db7b" translate="yes" xml:space="preserve">
          <source>Connection.prototype.startSession()</source>
          <target state="translated">Connection.prototype.startSession()</target>
        </trans-unit>
        <trans-unit id="3086aa3c1de05377c4e65eba0a89b33647327520" translate="yes" xml:space="preserve">
          <source>Connection.prototype.useDb()</source>
          <target state="translated">Connection.prototype.useDb()</target>
        </trans-unit>
        <trans-unit id="1f84d345638a837de23a8b8eb06aa973f9f124d5" translate="yes" xml:space="preserve">
          <source>Connection.prototype.user</source>
          <target state="translated">Connection.prototype.user</target>
        </trans-unit>
        <trans-unit id="8f3509b64e0ea82c53329cb49a7756bd1ced3566" translate="yes" xml:space="preserve">
          <source>Connections</source>
          <target state="translated">Connections</target>
        </trans-unit>
        <trans-unit id="e26d646aa3f8720bb4c21ec7cfb45529317aa85b" translate="yes" xml:space="preserve">
          <source>Connections inherit from &lt;a href=&quot;https://nodejs.org/api/events.html#events_class_eventemitter&quot;&gt;Node.js' &lt;code&gt;EventEmitter&lt;/code&gt; class&lt;/a&gt;, and emit events when something happens to the connection, like losing connectivity to the MongoDB server. Below is a list of events that a connection may emit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06ce18be8ed6d0c74455574e9856832f34c79fa" translate="yes" xml:space="preserve">
          <source>Constructing Documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0461bdbafa6361c8561624f2494687d1778ed2" translate="yes" xml:space="preserve">
          <source>Contains options passed down to the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/command/aggregate/&quot;&gt;aggregate command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a354088147bdd103eb1bf8a8b3f7ef6ad75f9d3" translate="yes" xml:space="preserve">
          <source>Converts this document into a plain javascript object, ready for storage in MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d96b8cb9106dae82f8eae41080629d289834fb" translate="yes" xml:space="preserve">
          <source>Converts this query to a customized, reusable query constructor with all arguments and options retained.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
