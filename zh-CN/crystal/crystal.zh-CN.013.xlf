<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="crystal">
    <body>
      <group id="crystal">
        <trans-unit id="c3a7062e78b6bc62ee92b074d9a991f8d4267462" translate="yes" xml:space="preserve">
          <source>IPS::Entry#slower?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c74149071433ee1e367907d082be98d2ba6e3f" translate="yes" xml:space="preserve">
          <source>IPS::Entry#stddev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651157a8768893bf91474e1aecb5d32fc628e130" translate="yes" xml:space="preserve">
          <source>IPS::Entry#stddev=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6e7f806bb8ee40beb341537753a660b0731146" translate="yes" xml:space="preserve">
          <source>IPS::Entry#stddev?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cf8c7ddb90481b6a70e9ed16a068ea144f13ce" translate="yes" xml:space="preserve">
          <source>IPS::Entry#variance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d23d788bdb6b5ee607ef5f3968cf6bae85381ca" translate="yes" xml:space="preserve">
          <source>IPS::Entry#variance=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81162b3d4f15be4379ee8465a237d9d9675a27ae" translate="yes" xml:space="preserve">
          <source>IPS::Entry#variance?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0fe766412b54b23f12e39e383a9b38467b4f72" translate="yes" xml:space="preserve">
          <source>IPS::Entry.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0a4ec4acf9d51175d4caad6e38cdff26432fc9" translate="yes" xml:space="preserve">
          <source>IPS::Job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282111bedc015dbc0cb7c222dda43e7939d7c57f" translate="yes" xml:space="preserve">
          <source>IPS::Job#execute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c06c73790bdbcf40a653656912db2e3df6c35e" translate="yes" xml:space="preserve">
          <source>IPS::Job#items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74c7fdfcf49c63dbc1d5e3aa1ebee583d5907d9" translate="yes" xml:space="preserve">
          <source>IPS::Job#items=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1a8d67c2220c0e54ff9551a1b1a7ce0e3a3d5a" translate="yes" xml:space="preserve">
          <source>IPS::Job#report</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5953a348176d3e57606b464bb265aac10b6d03" translate="yes" xml:space="preserve">
          <source>IPS::Job.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f73036f2160743e22e15df55aaacea0c9c24bd" translate="yes" xml:space="preserve">
          <source>IPSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4121d0729d3383b3e475d56a3cb1ea70f85743" translate="yes" xml:space="preserve">
          <source>ISAAC#new_seed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35cbb0b70fd21bccd8d8f868f4b0f174d7e355d" translate="yes" xml:space="preserve">
          <source>ISAAC#next_u</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc8af541fff3394a1e9faef770cd91730b0aba8" translate="yes" xml:space="preserve">
          <source>ISAAC.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba22a08c3d8f577a02d3f2eee47803c962e2bb7" translate="yes" xml:space="preserve">
          <source>ISO 8601 allows some freedom over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format intended for use in internet protocols and standards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1a745105ff9b6c357cf50bdd91090ffef6ae55" translate="yes" xml:space="preserve">
          <source>Identifier removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e93e317f014b06d6be17bf1cbc4a58a08ff9299" translate="yes" xml:space="preserve">
          <source>Identifiers may contain any unicode characters. Individual symbols are separated by a single space character () which must be escaped to use it as a part of an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696f8d0b72d4a63b474ef8b387292cf251a3b628" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../env&quot;&gt;ENV&lt;/a&gt;[&quot;TZ&quot;]&lt;/code&gt; is not set, the system's local time zone data will be used (&lt;code&gt;/etc/localtime&lt;/code&gt; on unix-based systems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6309788fd36df3106e50e46ec0bb407990ddd58f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;delimited#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will close the underlying &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df565692580464904b72cc05c4672d4618cfed50" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;multiwriter#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will close all of the underlying IOs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2dcb097408e4145c1763e9539ef0671c1c6ac0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;reader#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this IO will close the underlying IO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bdc7a23cb0ddbbc370614aeb44bb709db2be01" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;server#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this server will close the wrapped server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176c57a5f3d2f30907b441f29f06fc87152a4b1a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;sized#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will close the underlying &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c86068c82d52746191a17ebb946efaecbcb07a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;socket#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this socket will close the underlying IO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabeb33ab5cf2649b99f1d81e9d3f97f7785ffa9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;stapled#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will close the underlying &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa9fe823f5e8f053665595e8e5f2e1b8653c5c6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;stapled#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, it will also close the underlying &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84a8acd3481dbcb7d432a5cda140a291b0b58fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;status#normal_exit?-instance-method&quot;&gt;#normal_exit?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, returns the exit code of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce56af18819ea8ae30de92f63e36238ef03660b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;status#signal_exit?-instance-method&quot;&gt;#signal_exit?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, returns the &lt;em&gt;Signal&lt;/em&gt; the process received and didn't handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b1bd00aa116410f238d2ab34e3736aaea21704" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;status#signal_exit?-instance-method&quot;&gt;#signal_exit?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, returns the &lt;em&gt;Signal&lt;/em&gt; the process received and didn't handle. Will raise if &lt;code&gt;&lt;a href=&quot;status#signal_exit?-instance-method&quot;&gt;#signal_exit?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118b99c87b9f334fe135ea24ea60ca095da620a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;writer#sync_close?:Bool-instance-method&quot;&gt;#sync_close?&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, closing this IO will close the underlying IO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5c618cd8069294c00c33511ad14e5f66c57dc7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;zone#name:String-instance-method&quot;&gt;#name&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, the formatted &lt;code&gt;&lt;a href=&quot;zone#offset:Int32-instance-method&quot;&gt;#offset&lt;/a&gt;&lt;/code&gt; will be used as &lt;code&gt;&lt;a href=&quot;zone#name:String-instance-method&quot;&gt;#name&lt;/a&gt;&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;zone#format(io:IO,with_colon=true,with_seconds=:auto)-instance-method&quot;&gt;#format&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed14ae205e8b50ac900092813bf7c57bc5a54db2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MyHash&lt;/code&gt; is generic, the above is equivalent to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9633387b451b3f09cffe8b4c0728a615bf78682" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Point&lt;/code&gt; is inherited, an array of such type should also account for the fact that other types can be inside it, so the size of each element should grow to accommodate that. That is certainly unexpected. So, non-abstract structs can't be inherited from. Abstract structs, on the other hand, will have descendants, so it is expected that an array of them will account for the possibility of having multiple types inside it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001824d6a11cb5f87430d46237946d9fcfe13e12" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T1&lt;/code&gt; and &lt;code&gt;T2&lt;/code&gt; are under the same hierarchy, and their nearest common ancestor &lt;code&gt;Parent&lt;/code&gt; is not &lt;code&gt;Reference&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt; nor &lt;code&gt;Value&lt;/code&gt;, the resulting type is &lt;code&gt;Parent+&lt;/code&gt;. This is called a virtual type, which basically means the compiler will now see the type as being &lt;code&gt;Parent&lt;/code&gt; or any of its subtypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfcde4d4b19cac8e803c09f648ae18a646571057" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; then this is equivalent to &lt;code&gt;&lt;a href=&quot;number#slice(*nums,read_only=false)-macro&quot;&gt;Number.slice&lt;/a&gt;&lt;/code&gt; (numbers will be coerced to the type &lt;code&gt;T&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c508a87dc0d0dfb6bbb2a994f5702cb16978cb67" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;compress&lt;/code&gt; isn't set to &lt;code&gt;false&lt;/code&gt;, and no &lt;code&gt;Accept-Encoding&lt;/code&gt; header is explicitly specified, an HTTP::Client will add an &lt;code&gt;&quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;&lt;/code&gt; header, and automatically decompress the response body/body_io.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9443900999907e25a9a3699f28e5a935063e785" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;focus&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, only this &lt;code&gt;&lt;a href=&quot;methods#context(description,file=__FILE__,line=__LINE__,end_line=__END_LINE__,focus:Bool=false,&amp;amp;block)-instance-method&quot;&gt;#context&lt;/a&gt;&lt;/code&gt;, and others marked with &lt;code&gt;focus: true&lt;/code&gt;, will run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43cbb0cd26e2eaac009a678d114ac2ec97686ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;focus&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, only this &lt;code&gt;&lt;a href=&quot;methods#describe(description,file=__FILE__,line=__LINE__,end_line=__END_LINE__,focus:Bool=false,&amp;amp;block)-instance-method&quot;&gt;#describe&lt;/a&gt;&lt;/code&gt;, and others marked with &lt;code&gt;focus: true&lt;/code&gt;, will run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d7ded0d009f0c6ff76df23628f806a0c4bd196" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;focus&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, only this test, and others marked with &lt;code&gt;focus: true&lt;/code&gt;, will run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b8f4fc8c1858269ed8034bc4b0514d2f9963f7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;host&lt;/code&gt; is not empty, it will be prepended to &lt;code&gt;&lt;a href=&quot;unixaddress#path:String-instance-method&quot;&gt;#path&lt;/a&gt;&lt;/code&gt; to form a relative path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afcb2d5562ff7693e73d94564b16c12cae0354d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;node&lt;/code&gt; parses to a null value, returns &lt;code&gt;nil&lt;/code&gt;, otherwise invokes the given block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf531f12e26b5c03372773ce0a2f9504bd05586c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;self&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt; range, it provides O(1) implementation, otherwise it is same as &lt;code&gt;&lt;a href=&quot;enumerable#sum-instance-method&quot;&gt;Enumerable#sum&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a9e43c95323f0200030968fdd2b35a8560a9f2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;self&lt;/code&gt;'s size is the same as &lt;em&gt;other&lt;/em&gt;'s size, this method yields elements from &lt;code&gt;self&lt;/code&gt; and &lt;em&gt;other&lt;/em&gt; in tandem: if the block returns true for all of them, this method returns &lt;code&gt;true&lt;/code&gt;. Otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2489b31bd4768233dc45aa6e65c3c8b215192c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x&lt;/code&gt; is assigned something else after the block, the compiler knows the type changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b062925c845396eae106827a0314b752e9836c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;backreferences&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt; (the default value), &lt;em&gt;replacement&lt;/em&gt; can include backreferences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f648955f6dd8544bc8a2903673e1f4e3e9b8dc88" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;command&lt;/em&gt; contains no spaces and &lt;em&gt;args&lt;/em&gt; is given, it will become its argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1e70f9c6dc375c5f06cd46945845804bc1450b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;command&lt;/em&gt; contains spaces and &lt;em&gt;args&lt;/em&gt; is given, &lt;em&gt;command&lt;/em&gt; must include &lt;code&gt;&quot;${@}&quot;&lt;/code&gt; (including the quotes) to receive the argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c3de480bb4db74776b8b33618c1c66da449ce4" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is bigger than the number of elements in the array, returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0e995399fcadb3f8c8f91b22de715523c4592b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is bigger than the number of elements in the collection, returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cff5feb6241c1079b517e48db098f878df765f6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is bigger than the number of elements in the collection, returns as many as possible. This include the case of calling it over an empty collection, in which case it returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b341eeb963983de41f3ef55fc807427c76167f2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is greater than the number of bits of this integer, returns 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d16d63e314d6f981adf805cb2d0e19621bea1d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is negative, a left shift is performed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b0da30675a7f8de5eef3d0b1990a5608f449d1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is negative, a right shift is performed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5905bfba811efd936414e9db6f91154ff1bcb612" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;count&lt;/em&gt; is zero, &lt;em&gt;value&lt;/em&gt; is inserted at &lt;em&gt;index&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2f1b6b72d1830f1bec3b922c6517174b82ef04" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;decimal_places&lt;/em&gt; is &lt;code&gt;nil&lt;/code&gt;, all significant decimal places are printed (similar to &lt;code&gt;#to_s&lt;/code&gt;). If the argument has a numeric value, the number of visible decimal places will be fixed to that amount.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115a61602aeae7203aae7dece9983de6574631fd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;denominator&lt;/em&gt; is 0, this will raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f36629bbf6c3d4cef6f46ab2b338c6c05c0d2fd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;dest_dir&lt;/em&gt; is not a directory, raises an &lt;code&gt;&lt;a href=&quot;argumenterror&quot;&gt;ArgumentError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfee9e01c7a4bff75c159a7d05cc10d525bd9cbf" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;directory_listing&lt;/em&gt; is &lt;code&gt;false&lt;/code&gt;, directory listing is disabled. This means that paths matching directories are ignored and next handler is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfff6100ca8880d8ae619d927854f24108d530ed" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;fallthrough&lt;/em&gt; is &lt;code&gt;false&lt;/code&gt;, this handler does not call next handler when request method is neither GET or HEAD, then serves &lt;code&gt;405 Method Not Allowed&lt;/code&gt;. Otherwise, it calls next handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f526ba3b4eb326f43ba94631830b6fa9dd84bd42" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;follow_symlinks&lt;/em&gt; is set (the default), symbolic links are followed. Otherwise, symbolic links return information on the symlink itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22c7ebe10fe7967f687cd9177e44841ed9f8838" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;headers&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, row values can be accessed with header names or patterns. Headers are always stripped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eb1afe7020efb6c3e7594c8335ccd697d415c6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;key&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt; contains a null-byte an &lt;code&gt;&lt;a href=&quot;argumenterror&quot;&gt;ArgumentError&lt;/a&gt;&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e65be4b66c30ae73f6229f7368512720e9da983" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;limit&lt;/em&gt; is present, the array will be limited to &lt;em&gt;limit&lt;/em&gt; items and the final item will contain the remainder of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d991cbb1a6f148364ea70b4bea463f4cfdb90b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;limit&lt;/em&gt; is present, up to &lt;em&gt;limit&lt;/em&gt; new strings will be created, with the entire remainder added to the last string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956488a99c627f88b0b8d1646f6f57b3fc4ac483" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;lower&lt;/em&gt; is true, lower camelcase will be returned (the first letter is downcased).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff52173390ecb60674a8bd8d76db9e1610faa2d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;match_hidden&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt; the pattern will match hidden files and folders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccf4f6039a3be2aa91638eedd6a9ca9828b1e86" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;message&lt;/em&gt; is &lt;code&gt;nil&lt;/code&gt;, the default message for &lt;em&gt;status&lt;/em&gt; is used provided by &lt;code&gt;&lt;a href=&quot;../status#description:String?-instance-method&quot;&gt;HTTP::Status#description&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d67ea054e60e53ff93b07e22b356d281d0ab5c0" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;message&lt;/em&gt; is a string, it matches if the exception's error message contains that string. If &lt;em&gt;message&lt;/em&gt; is a regular expression, it is used to match the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0331c9ca7f98fa42634ea6fc79272138a5f13ea9" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;n&lt;/em&gt; is greater than the size of &lt;code&gt;self&lt;/code&gt;, all values will be removed from &lt;code&gt;self&lt;/code&gt; without raising an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffda41aba9f04619155715dd2271140da5a593c6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offset&lt;/em&gt; is given, it defines the position to &lt;em&gt;end&lt;/em&gt; the search (elements beyond this point are ignored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d078df7bf0aab4171defe954eb11b9c30cc61f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offset&lt;/em&gt; is given, the search starts from that index towards the first elements in &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0238d61b41d5a362f7256c1e2c2a3ce19c122c25" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;port&lt;/em&gt; is &lt;code&gt;nil&lt;/code&gt;, the existing default port for the &lt;em&gt;scheme&lt;/em&gt;, if any, will be unregistered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6977acf4283ba5a98a2bfca0a1ce4cc9efabf12d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;remove_empty&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, any empty strings are not yielded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8dc17fa9384b73c535ec7ba87f83d9e1b27d9f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;remove_empty&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, any empty strings are removed from the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1684a4928ad6ac9568e1e053c3911624c9b10319" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is &lt;code&gt;false&lt;/code&gt;, the method will create a new array for each chunk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c451a834de5ed8b3bf6ff443447ee0473649b5ea" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, the method will create a new array and reuse it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43891ffe4967f64ff183af8a6d31446ec93dd6a5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is an &lt;code&gt;&lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt;, that array will be reused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37cfe537d2c94bf7215651550e0d45d92d7ac877" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is an &lt;code&gt;&lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt;, this array will be reused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bc52c555d7d08614f2ad6e46dbec1869f702c1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is an instance of &lt;code&gt;&lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;deque&quot;&gt;Deque&lt;/a&gt;&lt;/code&gt; or a similar collection type (implementing &lt;code&gt;#&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;#shift&lt;/code&gt; and &lt;code&gt;#size&lt;/code&gt;) it will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7ecad99943e84db09dee5580ed37e4213eca24" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is an instance of &lt;code&gt;&lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;deque&quot;&gt;Deque&lt;/a&gt;&lt;/code&gt; or a similar collection type (implementing &lt;code&gt;#&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;#shift&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;enumerable#size-instance-method&quot;&gt;#size&lt;/a&gt;&lt;/code&gt;) it will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272a2b66d32510445ff1cbbc6b1ac09996322b98" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is falsey, the array will not be reused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c7aaa7bf4894847f2d8855c4c82b407a5d57f4" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is given, the array can be reused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdb08315081f9f2abf430f088329a2ad5ed8b73" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse&lt;/em&gt; is truthy, the method will create a new array and reuse it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f8a943e7ebf91fc52658b99bb50526423627e4" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;reuse_port&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, it enables the &lt;code&gt;SO_REUSEPORT&lt;/code&gt; socket option, which allows multiple processes to bind to the same port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460e68d8ef01e52ccd847c95228ab1a81ae0f55f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;separator&lt;/em&gt; is an empty regex (&lt;code&gt;//&lt;/code&gt;), the string will be separated into one-character strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5f8cbaee524f2c4f2334388b72c4f46b8e6a02" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;separator&lt;/em&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the string will be separated into one-character strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725538d905b838905f9ab875e612f31912c2adb2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;significant&lt;/em&gt; is &lt;code&gt;false&lt;/code&gt;, the number of &lt;em&gt;precision&lt;/em&gt; digits is preserved after the decimal separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96afdc56d5b9a96d63e0d74761eb1df8876ce12" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, unknown properties in the JSON document will raise a parse exception. The default is &lt;code&gt;false&lt;/code&gt;, so unknown properties are silently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5619350cd94ed727536b115906de1cf65f9f36" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;strip&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt;, row values are stripped with &lt;code&gt;&lt;a href=&quot;string#strip-instance-method&quot;&gt;String#strip&lt;/a&gt;&lt;/code&gt; before being returned from methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00da179e0cf5508f54b883ae8b4b41f80e78faa5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;suffix&lt;/em&gt; is given, it is stripped from the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b9dd1a18c0f04acbb6bd1d460d97e4ee61da98" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;suffix&lt;/em&gt; is present at the end of &lt;em&gt;path&lt;/em&gt;, it is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd6c4ea1183c6cb703cc6142ce080e7dea54752" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;tls&lt;/em&gt; is given it will be used, if not a new TLS context will be created. If &lt;em&gt;tls&lt;/em&gt; is given and &lt;em&gt;uri&lt;/em&gt; is a HTTP URI, &lt;code&gt;&lt;a href=&quot;../argumenterror&quot;&gt;ArgumentError&lt;/a&gt;&lt;/code&gt; is raised. In any case the active context can be accessed through &lt;code&gt;&lt;a href=&quot;client#tls-instance-method&quot;&gt;#tls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd458694ffcc4a1f6a690d5aea29ba6ff5b7d49a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;trailing_string&lt;/em&gt; is given, it will be appended to the result unless this array is empty. This lets you splat an array and optionally write a trailing comma if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea19159934dac81ccdfd55dbbd27fab3e0d80b2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;trailing_string&lt;/em&gt; is given, it will be appended to the result unless this hash is empty. This lets you splat a hash and optionally write a trailing comma if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4f47777321239bbad1144e63dabb61454f1c71" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;uri&lt;/em&gt; is &lt;code&gt;&lt;a href=&quot;uri#absolute?:Bool-instance-method&quot;&gt;#absolute?&lt;/a&gt;&lt;/code&gt;, or if this URI is &lt;code&gt;&lt;a href=&quot;uri#opaque?:Bool-instance-method&quot;&gt;#opaque?&lt;/a&gt;&lt;/code&gt;, then an exact copy of &lt;em&gt;uri&lt;/em&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec201bb966188105c8ad4c91c6479a116e74e6f5" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;break&lt;/code&gt; receives many arguments, they are automatically transformed to a &lt;a href=&quot;http://crystal-lang.org/api/Tuple.html&quot;&gt;Tuple&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b24d2ecb05952057f3291d41e23ff7d03e2a1ac" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;break&lt;/code&gt; receives no arguments, it's the same as receiving a single &lt;code&gt;nil&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ad0bae85f62fbd9b3784141c15526304a7c805" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;next&lt;/code&gt; receives many arguments, they are automatically transformed to a &lt;a href=&quot;http://crystal-lang.org/api/Tuple.html&quot;&gt;Tuple&lt;/a&gt;. If it receives no arguments it's the same as receiving a single &lt;code&gt;nil&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90deef2f1796c81473a99bc04948113b105bcea" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;when&lt;/code&gt;'s expression is a type, &lt;code&gt;is_a?&lt;/code&gt; is used. Additionally, if the case expression is a variable or a variable assignment the type of the variable is restricted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1275db804d6f688817d997747002010d07281288" translate="yes" xml:space="preserve">
          <source>If a C function executes a user-provided callback that might raise, it must be annotated with the &lt;code&gt;@[Raises]&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4624e5f4350d5bfe950e64b9d775049af83af268" translate="yes" xml:space="preserve">
          <source>If a block has a single argument and invokes a method on it, the block can be replaced with the short syntax argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda02f6332b9a517b76784d07383f35c533591d2" translate="yes" xml:space="preserve">
          <source>If a block is given to the macro, a getter is generated with a variable that is lazily initialized with the block's contents, for examples see &lt;code&gt;&lt;a href=&quot;object#class_getter(*names,&amp;amp;block)-macro&quot;&gt;#class_getter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3255356325e21f103994e0f204ebb59138c35ca" translate="yes" xml:space="preserve">
          <source>If a block is given to the macro, a getter is generated with a variable that is lazily initialized with the block's contents, for examples see &lt;code&gt;&lt;a href=&quot;object#getter(*names,&amp;amp;block)-macro&quot;&gt;#getter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5e92ae62fb761acc8ca32626109f7bbce4d456" translate="yes" xml:space="preserve">
          <source>If a block is given to the macro, a getter is generated with a variable that is lazily initialized with the block's contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968e2064a6b9d129f86af5ba7c53fb91181908a3" translate="yes" xml:space="preserve">
          <source>If a block is given to the macro, a property is generated with a variable that is lazily initialized with the block's contents, for examples see &lt;code&gt;&lt;a href=&quot;object#class_property(*names,&amp;amp;block)-macro&quot;&gt;#class_property&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773fb2a94f5c917726e3e308539d9daddbb11923" translate="yes" xml:space="preserve">
          <source>If a block is given to the macro, a property is generated with a variable that is lazily initialized with the block's contents, for examples see &lt;code&gt;&lt;a href=&quot;object#property(*names,&amp;amp;block)-macro&quot;&gt;#property&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcf39e23eb0d908c8c0b74559ca49c69c448fab" translate="yes" xml:space="preserve">
          <source>If a block is given to the macro, a property is generated with a variable that is lazily initialized with the block's contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25cbfd0418113ef3d1669d23d04affb698639e4" translate="yes" xml:space="preserve">
          <source>If a class defines a &lt;code&gt;finalize&lt;/code&gt; method, when an instance of that class is garbage-collected that method will be invoked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc3832dd2ff2b1092aedb57ee07ac8681f721d9" translate="yes" xml:space="preserve">
          <source>If a class defines a &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;initialize&lt;/code&gt; then its superclass constructors are not inherited:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c53a94921a12c91801261440bc9e9867c6f7338" translate="yes" xml:space="preserve">
          <source>If a connection can't be created, or if a connection loss occurs while the statement is performed the above process is repeated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309d0203d542b54f01020c65e0417a449527233b" translate="yes" xml:space="preserve">
          <source>If a connection is lost or can't be established retry at most &lt;code&gt;retry_attempts&lt;/code&gt; times waiting &lt;code&gt;retry_delay&lt;/code&gt; seconds between each try.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a982b21b46b69125af765ff5d3d1dae7ce6efe" translate="yes" xml:space="preserve">
          <source>If a directory named &quot;filename&quot; is found and it contains a file named &quot;filename.cr&quot; directly underneath it, it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e11533df20d53af351c31a9f8d7e6aa4d799230" translate="yes" xml:space="preserve">
          <source>If a directory named &quot;filename&quot; is found with a directory &quot;src&quot; in it and it contains a directory named &quot;filename&quot; directly underneath it with a &quot;filename.cr&quot; file inside it, it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ffab83dfb6539dbe52609e3cf715bc11b94d67" translate="yes" xml:space="preserve">
          <source>If a directory named &quot;filename&quot; is found with a directory &quot;src&quot; in it and it contains a file named &quot;filename.cr&quot; directly underneath it, it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c7979eadf699837e62443808e4d73ebef44e38" translate="yes" xml:space="preserve">
          <source>If a file named &quot;filename.cr&quot; is found in the require path, it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28468817fe8e7e6797b5ba70b2570b89887a4ff0" translate="yes" xml:space="preserve">
          <source>If a file named &quot;filename.cr&quot; is found relative to the current file, it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f9561c964634c2d022a4372cad8b4a126620bd" translate="yes" xml:space="preserve">
          <source>If a location has only one offset (such as &lt;code&gt;&lt;a href=&quot;location#UTC&quot;&gt;UTC&lt;/a&gt;&lt;/code&gt;) it is considered &lt;em&gt;fixed&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b311403f23440df1393607caac90911054301e0" translate="yes" xml:space="preserve">
          <source>If a response has a &lt;code&gt;Content-Type&lt;/code&gt; header with a charset, that charset is set as the encoding of the returned IO (or used for creating a String for the body). Invalid bytes in the given encoding are silently ignored when reading text content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c0c6d5033d8a26831d04bff23deaba4617edb5" translate="yes" xml:space="preserve">
          <source>If a set starts with a ^, it is negated. The sequence c1-c2 means all characters between and including c1 and c2 and is known as a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bc19ca9733034c745ef2a08e6efcada1bf810b" translate="yes" xml:space="preserve">
          <source>If a string with those contents was already present in the pool, that one is returned. Otherwise a new string is created, put in the pool and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296d5c6ea451381e09f3824461d839430ce28726" translate="yes" xml:space="preserve">
          <source>If a type declaration is given, a variable with that name is declared with that type, as nilable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0528e9deaae7ee8b5857c66327d14eef4f1934f3" translate="yes" xml:space="preserve">
          <source>If a type declaration is given, a variable with that name is declared with that type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0b544a5bb8f8f33b23206e23d5af2b7a55431b" translate="yes" xml:space="preserve">
          <source>If a type defines a &lt;code&gt;to_unsafe&lt;/code&gt; method, when passing it to C the value returned by this method will be passed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de33be1a14369f4655c08c0d8e3fc92e9cfa818" translate="yes" xml:space="preserve">
          <source>If a value already exists for &lt;code&gt;key&lt;/code&gt;, that (old) value is returned. Otherwise the given block is invoked with &lt;em&gt;key&lt;/em&gt; and its value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca2fb4c2d48f906ba4e7129cead6edd36b249b1" translate="yes" xml:space="preserve">
          <source>If a variable is the condition of an &lt;code&gt;if&lt;/code&gt;, inside the &lt;code&gt;then&lt;/code&gt; branch the variable will be considered as not having the &lt;code&gt;Nil&lt;/code&gt; type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7a8c3abdcbe456f939bef9243b80fa3fb882bb" translate="yes" xml:space="preserve">
          <source>If all elements are equal, the comparison is based on the size of the arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fdcd001c33b216adca2d93b3602f5b1a19e4ce" translate="yes" xml:space="preserve">
          <source>If all the elements are equal, then the result is based on a comparison of the tuple sizes. Thus, two tuples are &quot;equal&quot; according to &lt;code&gt;&lt;a href=&quot;tuple#(other:self)-instance-method&quot;&gt;#&amp;lt;=&amp;gt;&lt;/a&gt;&lt;/code&gt; if, and only if, they have the same size and the value of each element is equal to the value of the corresponding element in the other tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28238e464f82ac83594452ad3d15d6ee8311283e" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt; branch is empty, or it&amp;rsquo;s missing, it&amp;rsquo;s considered as if it had &lt;code&gt;nil&lt;/code&gt; in it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bca3ea9dbbaacf32811461e40b613efa549724b" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt;'s condition is &lt;code&gt;var.nil?&lt;/code&gt; then the type of &lt;code&gt;var&lt;/code&gt; in the &lt;code&gt;then&lt;/code&gt; branch is known by the compiler to be &lt;code&gt;Nil&lt;/code&gt;, and to be known as non-&lt;code&gt;Nil&lt;/code&gt; in the &lt;code&gt;else&lt;/code&gt; branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e5a233d577ff732f4c518211068ebd91019d57" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt;'s condition is a &lt;code&gt;responds_to?&lt;/code&gt; test, in the &lt;code&gt;then&lt;/code&gt; branch the type of a variable is guaranteed to be restricted to the types that respond to that method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2eb49eced4ef35afb79545782ff0d82f0e21965" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt;'s condition is an &lt;code&gt;is_a?&lt;/code&gt; test, the type of a variable is guaranteed to be restricted by that type in the &lt;code&gt;then&lt;/code&gt; branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972a3ca3d3cfcb7795698193335367b6ccbb24d9" translate="yes" xml:space="preserve">
          <source>If an encoding is not set, the default one is UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fdb6d64dcc5bc9608ffe1ffa361a0151e5ce5c" translate="yes" xml:space="preserve">
          <source>If an enum's value doesn't match a member's value, the raw value is returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a438805c1dbc6915edc3c31e83678fe2bbd339" translate="yes" xml:space="preserve">
          <source>If any configurations or choices in Crystal regarding SSL settings and security are found to be lacking or need improvement please &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/new&quot;&gt;open an issue&lt;/a&gt; and let us know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc4a06e0c9b4cb3f0d3cd847a9ce5405b06999c" translate="yes" xml:space="preserve">
          <source>If any such thing is marked with &lt;code&gt;focus: true&lt;/code&gt; then only those examples will run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4469f519d20cfd1b7cdd7fde6f9ad62038fcb4e0" translate="yes" xml:space="preserve">
          <source>If for any reason you can't or don't want to use one of the previous installation methods, you can still download Crystal in a standalone .tar.gz file with everything you need to get started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385688564b637f21d4357f4e0ce387a98a4f7e8e" translate="yes" xml:space="preserve">
          <source>If in the handler chain this header is overridden to &lt;code&gt;Connection: close&lt;/code&gt;, then the connection will not be reused after the request has been processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea8a35cdabe9e52a13baf969fcdd1c8c87adbee" translate="yes" xml:space="preserve">
          <source>If it is impossible for a type to be restricted by another type, a compile-time error is issued:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a93e8b288ee4de32903b58922b5bfa5b952de6" translate="yes" xml:space="preserve">
          <source>If logging to multiple locations is required, an &lt;code&gt;&lt;a href=&quot;io/multiwriter&quot;&gt;IO::MultiWriter&lt;/a&gt;&lt;/code&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6f22de11e26a8e1484dda50c08d119ab0085ce" translate="yes" xml:space="preserve">
          <source>If multiple blocks are registered they run in the order that they are given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6fef3d734fecba44a536270e0b9dd6cab28d13" translate="yes" xml:space="preserve">
          <source>If multiple blocks are registered they run in the reversed order that they are given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad73e78278f9484f7b0fbf6bb49ebecd32051ac" translate="yes" xml:space="preserve">
          <source>If necessary a variable can be defined as a union type at compile time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e98a80654eceeb65aba067e72ab9c54378da31" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;source&lt;/code&gt; argument is provided, the Crystal source is read from standard input. The binary executable is stored in a temporary location between compiling and running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5c36032086e8d25d1ee94fc16efdd9aa72ba1c" translate="yes" xml:space="preserve">
          <source>If no command is given, &lt;code&gt;install&lt;/code&gt; will be run by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65837f03ca6eb16967c172d8f011101ae9ec2e8" translate="yes" xml:space="preserve">
          <source>If no encoding is set, this is the same as &lt;code&gt;&lt;a href=&quot;io#read(slice:Bytes)-instance-method&quot;&gt;#read(slice)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f634a6142d7788c2424463a1543fcd14444cc918" translate="yes" xml:space="preserve">
          <source>If no encoding is set, this is the same as &lt;code&gt;&lt;a href=&quot;io#read_byte:UInt8?-instance-method&quot;&gt;#read_byte&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c3ae19aa60292eaffd48e18f07b0724f82ad31" translate="yes" xml:space="preserve">
          <source>If no set is given, all characters are matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6eb809c04bae729e529facf3e683320653a4155" translate="yes" xml:space="preserve">
          <source>If no time zone data could be found (i.e. the previous methods failed), &lt;code&gt;&lt;a href=&quot;location#UTC&quot;&gt;Location::UTC&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb03fa512ad66ec4676da7b846b3c82347188876" translate="yes" xml:space="preserve">
          <source>If one of the branches never reaches past the end of an &lt;code&gt;if&lt;/code&gt;, like in the case of a &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;raise&lt;/code&gt;, that type is not considered at the end of the &lt;code&gt;if&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66926c43b273615d7a07ef1bd9e1558cc0e8b4eb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;serializable/strict&quot;&gt;JSON::Serializable::Strict&lt;/a&gt;&lt;/code&gt; module is included, unknown properties in the JSON document will raise a parse exception. By default the unknown properties are silently ignored. If the &lt;code&gt;&lt;a href=&quot;serializable/unmapped&quot;&gt;JSON::Serializable::Unmapped&lt;/a&gt;&lt;/code&gt; module is included, unknown properties in the JSON document will be stored in a &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt;(&lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;, &lt;a href=&quot;any&quot;&gt;JSON::Any&lt;/a&gt;)&lt;/code&gt;. On serialization, any keys inside json_unmapped will be serialized and appended to the current json object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f1cee8780d6c7edf11074277c01476f2a7365f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;serializable/strict&quot;&gt;YAML::Serializable::Strict&lt;/a&gt;&lt;/code&gt; module is included, unknown properties in the YAML document will raise a parse exception. By default the unknown properties are silently ignored. If the &lt;code&gt;&lt;a href=&quot;serializable/unmapped&quot;&gt;YAML::Serializable::Unmapped&lt;/a&gt;&lt;/code&gt; module is included, unknown properties in the YAML document will be stored in a &lt;code&gt;&lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt;(&lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;, &lt;a href=&quot;any&quot;&gt;YAML::Any&lt;/a&gt;)&lt;/code&gt;. On serialization, any keys inside yaml_unmapped will be serialized appended to the current yaml object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc4a520fc094d5fd531e4e77712649f865a0072" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;max_pool_size&lt;/code&gt; was reached and a connection is needed, wait up to &lt;code&gt;checkout_timeout&lt;/code&gt; seconds for an existing connection to become available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b7b0af5326f18bb1872eb5e8f05ff255ad4d26" translate="yes" xml:space="preserve">
          <source>If the &lt;strong&gt;rollback is fired by an exception at the inner_tx block&lt;/strong&gt; all the changes including the ones in the &lt;code&gt;outer_tx&lt;/code&gt; are rollbacked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130a17de1aedbe126b0430113f1a68cdc36e9bac" translate="yes" xml:space="preserve">
          <source>If the DEFLATED compression method is used, crc32, compressed size and uncompressed size will be computed from the data written to the yielded IO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b012656f1ef204b001b3d2401194b36c0ab9b117" translate="yes" xml:space="preserve">
          <source>If the STORED compression method is used, its crc32, compressed size and uncompressed size &lt;strong&gt;must&lt;/strong&gt; be set and be correct with respect to the data that will be written to the yielded &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a846a71dadd41428c0cc438a00dd0c50422272fc" translate="yes" xml:space="preserve">
          <source>If the argument isn't a &lt;code&gt;&lt;a href=&quot;regex&quot;&gt;Regex&lt;/a&gt;&lt;/code&gt;, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c2f93592018b614d681ec9dd7d75a024d0606b" translate="yes" xml:space="preserve">
          <source>If the assigned value is not exactly the same as the property's type, &lt;a href=&quot;to_unsafe&quot;&gt;to_unsafe&lt;/a&gt; will be tried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e7b14b1420dbb9f2775057dc24c158bd3146f2" translate="yes" xml:space="preserve">
          <source>If the block returns &lt;code&gt;false&lt;/code&gt;, the finding element exists behind. If the block returns &lt;code&gt;true&lt;/code&gt;, the finding element is itself or exists infront.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19408c12d6284c35f83ff55e7ad0ba021cc768e1" translate="yes" xml:space="preserve">
          <source>If the block returns &lt;code&gt;false&lt;/code&gt;, the finding value exists behind. If the block returns &lt;code&gt;true&lt;/code&gt;, the finding value is itself or exists infront.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a257cbcb34af22097b1346a0e71359fd1d43a60" translate="yes" xml:space="preserve">
          <source>If the callback passed to &lt;code&gt;store_callback&lt;/code&gt; raises, then &lt;code&gt;execute_callback&lt;/code&gt; will raise. However, the compiler doesn't know that &lt;code&gt;execute_callback&lt;/code&gt; can potentially raise because it is not marked as &lt;code&gt;@[Raises]&lt;/code&gt; and the compiler has no way to figure this out. In these cases you have to manually mark such functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6966c5ccc56a7b6009eeb0d1fe5004d7b58966" translate="yes" xml:space="preserve">
          <source>If the collection is empty, returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdab30020c44d65432e3de9fb25291e29e70a07" translate="yes" xml:space="preserve">
          <source>If the collection is empty, returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbbd6708cd876e1976bbc4db04349abb5431214" translate="yes" xml:space="preserve">
          <source>If the collection is empty, returns &lt;em&gt;initial&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1d385502513194a04c3ebe890af4cc82dac31e" translate="yes" xml:space="preserve">
          <source>If the compiler can't detect this at compile-time, an exception will be raised at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e22bb4c0c2d9d6a34e081434fea3fdbbde88c4" translate="yes" xml:space="preserve">
          <source>If the constant denotes a type, you get back a &lt;a href=&quot;https://crystal-lang.org/api/Crystal/Macros/TypeNode.html&quot;&gt;&lt;code&gt;TypeNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29a8f505f3d2aab85079cf352a0708db2499686" translate="yes" xml:space="preserve">
          <source>If the constant is a constant (like &lt;code&gt;A = 1&lt;/code&gt;), then its value as an &lt;code&gt;&lt;a href=&quot;astnode&quot;&gt;ASTNode&lt;/a&gt;&lt;/code&gt; is returned. If the constant is a type, the type is returned as a &lt;code&gt;&lt;a href=&quot;typenode&quot;&gt;TypeNode&lt;/a&gt;&lt;/code&gt;. Otherwise, &lt;code&gt;&lt;a href=&quot;nilliteral&quot;&gt;NilLiteral&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1482446c286f9dccb86600e7bd3b41f453a1d003" translate="yes" xml:space="preserve">
          <source>If the day-of-month resulting from shifting by &lt;em&gt;years&lt;/em&gt; and &lt;em&gt;months&lt;/em&gt; would be invalid, the date is adjusted to the last valid day of the month. For example, adding one month to &lt;code&gt;2018-08-31&lt;/code&gt; would result in the invalid date &lt;code&gt;2018-09-31&lt;/code&gt; which will be adjusted to &lt;code&gt;2018-09-30&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38825a3829588a49956f7e617fd75538df14905" translate="yes" xml:space="preserve">
          <source>If the file does not exist, it will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98f3fcc4efdea14c860a494d11a0e16af437e20" translate="yes" xml:space="preserve">
          <source>If the given size is zero, the amount of UTF-8 codepoints will be lazily computed when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c916d3697b63ccd18cd4c4eaa521f835428adb24" translate="yes" xml:space="preserve">
          <source>If the increment generates a &quot;carry&quot;, the character to the left of it is incremented. This process repeats until there is no carry, adding an additional character if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432445db70e7576655c3d4952ad03213490208fe" translate="yes" xml:space="preserve">
          <source>If the location name cannot be found, &lt;code&gt;&lt;a href=&quot;location/invalidlocationnameerror&quot;&gt;InvalidLocationNameError&lt;/a&gt;&lt;/code&gt; is raised. If the loader encounters a format error in the time zone database, &lt;code&gt;&lt;a href=&quot;location/invalidtzdataerror&quot;&gt;InvalidTZDataError&lt;/a&gt;&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3116c00c05640f85cb3dad876cae435f6fb6b9e" translate="yes" xml:space="preserve">
          <source>If the method has arguments, you must specify their types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72b0ddbe2378832f2b36cca43b523e5bb6bd7ef" translate="yes" xml:space="preserve">
          <source>If the method has other required parameters, the short syntax argument should also be supplied in the method's argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effd214f7ab2ff0c70af0dcbdd8d59302f827e61" translate="yes" xml:space="preserve">
          <source>If the path is empty or &lt;code&gt;&quot;.&quot;&lt;/code&gt;, it returns &lt;code&gt;&quot;.&quot;&lt;/code&gt;. If the path is rooted and in the top-most hierarchy, the root path is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b02d9326a2b21752830927a6e250f2888effd8" translate="yes" xml:space="preserve">
          <source>If the path turns to be empty, the current directory (&lt;code&gt;&quot;.&quot;&lt;/code&gt;) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ff4dd28574680ae9433784f3952e8ae72b4963" translate="yes" xml:space="preserve">
          <source>If the pool is not allowed to create a new connection, wait a for a connection to become available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c842a9518f899eae31205ecdf0b9890d26cce7" translate="yes" xml:space="preserve">
          <source>If the ports collection is not already installed, it can be downloaded using &lt;code&gt;portsnap fetch&lt;/code&gt; or &lt;code&gt;git clone https://github.com/freebsd/freebsd-ports&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ab6ab1ba149af1866bc07b0ade3208abefa72a" translate="yes" xml:space="preserve">
          <source>If the resulting date-time is ambiguous due to time zone transitions, a correct time will be returned, but it does not guarantee which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32deab680675f255674ae2216b5571519f29d1e6" translate="yes" xml:space="preserve">
          <source>If the return type is void you can omit it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23145595903fc2e398483b41a77943f18f2f8ea0" translate="yes" xml:space="preserve">
          <source>If the right-hand side contains just one expression, the type is indexed for each variable on the left-hand side like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1615eef18d7467f6b12e6fafb540dc8e47c72c" translate="yes" xml:space="preserve">
          <source>If the server is closed after invoking this method, an &lt;code&gt;&lt;a href=&quot;../io/error&quot;&gt;IO::Error&lt;/a&gt;&lt;/code&gt; (closed stream) exception must be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17220bbdcc986124d2db207f05fdfcfc10cffda3" translate="yes" xml:space="preserve">
          <source>If the specified line is the beginning of a &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; section, all specs inside that group are run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd8e040f4bdc958e54c848037c1287f76dfe1df" translate="yes" xml:space="preserve">
          <source>If the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered greater than the shorter one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8663c7a4de5671e97b7aafc659817ea16c4d0c42" translate="yes" xml:space="preserve">
          <source>If there are conditional breaks, the call's return value type will be a union of the type of the block's value and the type of the many &lt;code&gt;break&lt;/code&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f741ac83e90685ec4d575b72b74860aa6a511d7b" translate="yes" xml:space="preserve">
          <source>If there are multiple annotations of the same type applied to the same instance variable/method/type, the &lt;code&gt;.annotations(type : TypeNode)&lt;/code&gt; method can be used. This will work on anything that &lt;code&gt;.annotation(type : TypeNode)&lt;/code&gt; would, but instead returns an &lt;code&gt;ArrayLiteral(Annotation)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d818234a1ae7fa56c9771266ecf90c17f9f46093" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;DB::ResultSet&lt;/code&gt; yielded, return the connection to the pool. Otherwise, the connection will be returned to the pool when the ResultSet is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a93ba56cc5b74f39d96d3f5dfc76165f0f0f51d" translate="yes" xml:space="preserve">
          <source>If there is no time zone information in the formatted time, &lt;em&gt;location&lt;/em&gt; will be assumed. When &lt;em&gt;location&lt;/em&gt; is &lt;code&gt;nil&lt;/code&gt;, in such a case the parser will raise &lt;code&gt;&lt;a href=&quot;time/format/error&quot;&gt;Time::Format::Error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a01d1818bbb7a8a9bc8b63b52ab1c1fe4c2e683" translate="yes" xml:space="preserve">
          <source>If there is no time zone information in the formatted time, the parser will raise &lt;code&gt;&lt;a href=&quot;time/format/error&quot;&gt;Time::Format::Error&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a024e2ef7b2e827498e91756e32eacfa1a13315" translate="yes" xml:space="preserve">
          <source>If there is not a valid number at the start of this string, or if the resulting integer doesn't fit an &lt;code&gt;&lt;a href=&quot;int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt;, an &lt;code&gt;&lt;a href=&quot;argumenterror&quot;&gt;ArgumentError&lt;/a&gt;&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f6f65bddde630c02d1f85d21fdd9be267c2643" translate="yes" xml:space="preserve">
          <source>If there was an error decoding the current char because of an invalid UTF-8 byte sequence, returns the byte that produced the invalid encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3d294487015981ed52691e8078049c2fe4e25e" translate="yes" xml:space="preserve">
          <source>If there was an error decoding the current char because of an invalid UTF-8 byte sequence, returns the byte that produced the invalid encoding. Returns &lt;code&gt;0&lt;/code&gt; if the char would've been out of bounds. Otherwise returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5613446b53d266ad630c4d08a8e7171a0064b9f6" translate="yes" xml:space="preserve">
          <source>If there's a match, the scanner advances the scan offset, the last match is saved, and it returns the size of the skip. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and does not advance the offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454cb822e207c8c8cf1e19d8344909cc77a4fb69" translate="yes" xml:space="preserve">
          <source>If there's a match, the scanner advances the scan offset, the last match is saved, and it returns the size of the skipped match. Otherwise it returns &lt;code&gt;nil&lt;/code&gt; and does not advance the offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38616dfa48ed0248b98643665b1e0b8cf8dffcc0" translate="yes" xml:space="preserve">
          <source>If this value is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;colorize/object&quot;&gt;Colorize::Object&lt;/a&gt;&lt;/code&gt; is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35575ed49a091bc12d7e1c0bbd8827ace030b455" translate="yes" xml:space="preserve">
          <source>If this value is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;colorize/object&quot;&gt;Colorize::Object&lt;/a&gt;&lt;/code&gt; is enabled by default. But if this value is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;colorize/object&quot;&gt;Colorize::Object&lt;/a&gt;&lt;/code&gt; is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eb8b0ab697add0a4d8d83b45749ec3d21b24b0" translate="yes" xml:space="preserve">
          <source>If we define two modules with names &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044b28684b72ceaa1d72ef53c31f8adb0e20c8d4" translate="yes" xml:space="preserve">
          <source>If we hand't use &lt;code&gt;&lt;a href=&quot;macroid#id:MacroId-instance-method&quot;&gt;#id&lt;/a&gt;&lt;/code&gt;, the generated code would have been this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc038e00b2204b168d33c626192675a2517e2aa" translate="yes" xml:space="preserve">
          <source>If we want to execute the spawned fiber for ever, we can use &lt;code&gt;sleep&lt;/code&gt; without arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6844a6a8a18710d78630335246bf6cb26d11be1c" translate="yes" xml:space="preserve">
          <source>If you compile the above program with the &lt;code&gt;tool hierarchy&lt;/code&gt; command you will see this for &lt;code&gt;Person&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5d9509f2e3cc93a293efb11c650a6eea9e41e6" translate="yes" xml:space="preserve">
          <source>If you declare your type as a &lt;strong&gt;struct&lt;/strong&gt; instead of a &lt;strong&gt;class&lt;/strong&gt;, creating an instance of it will use stack memory, which is much cheaper than heap memory and doesn't put pressure on the GC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4b9d71eeb3fef7f237163eb09797ef2f7941d5" translate="yes" xml:space="preserve">
          <source>If you define the function inline in the same call you can omit the argument types, the compiler will add the types for you based on the &lt;code&gt;fun&lt;/code&gt; signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67bb5d71d0e06a738efd339fa7554f58881d74a" translate="yes" xml:space="preserve">
          <source>If you don't mark them, &lt;code&gt;begin/rescue&lt;/code&gt; blocks that surround this function's calls won't work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db8912b4d9e5567c619bc268526af5712d19120" translate="yes" xml:space="preserve">
          <source>If you get an error like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeea1ef3b64a8f67465b1f2348da76bcc1837f8" translate="yes" xml:space="preserve">
          <source>If you haven't already, &lt;a href=&quot;https://travis-ci.org/&quot;&gt;sign up for Travis CI&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a515903a331c7adf2a4850ada40f94faf4622500" translate="yes" xml:space="preserve">
          <source>If you need to build a &lt;code&gt;&lt;a href=&quot;string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; where the maximum capacity is unknown, use &lt;code&gt;&lt;a href=&quot;string#build(capacity=64,&amp;amp;block):self-class-method&quot;&gt;String#build&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a4231ffd3145a2e17ccd826fc00864537ec792" translate="yes" xml:space="preserve">
          <source>If you need to dynamically build a string, use &lt;code&gt;&lt;a href=&quot;string#build(capacity=64,&amp;amp;block):self-class-method&quot;&gt;String#build&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;io/memory&quot;&gt;IO::Memory&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e33e349997459fbeb1a2aa3c48d52562ec234a" translate="yes" xml:space="preserve">
          <source>If you need to execute the body at least once and then check for a breaking condition, you can do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b91cffcb640dd04b3df67370094008cc11ca90" translate="yes" xml:space="preserve">
          <source>If you need to set any compile-time flags not set implicitly through &lt;code&gt;--target&lt;/code&gt;, you can use the &lt;code&gt;-D&lt;/code&gt; command line flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632f7f303044a9bffe7b52f89142e5036a1cbcce" translate="yes" xml:space="preserve">
          <source>If you need to write a string that has many double quotes, parentheses, or similar characters, you can use alternative literals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356d8adc679d48604a349e3a8b9ddc0c9ee281c9" translate="yes" xml:space="preserve">
          <source>If you omit an explicit type restriction, the compiler will try to infer the type of instance and class variables using a bunch of syntactic rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412e16a2d2db6af9b1f9b8f07b27f452be9f7cdf" translate="yes" xml:space="preserve">
          <source>If you redefine a method, the last definition will take precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410a8318180bd09eff41e8cc0b660bd1142155fb" translate="yes" xml:space="preserve">
          <source>If you run the compiler from somewhere else, say the &lt;code&gt;src&lt;/code&gt; folder, &lt;code&gt;lib&lt;/code&gt; will not be in the path and &lt;code&gt;require &quot;foo&quot;&lt;/code&gt; can't be resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46635aca929eb0dc9cdfc2bcf0aeea8a0a18975a" translate="yes" xml:space="preserve">
          <source>If you want a method to only accept the type Int32 (not instances of it), you use &lt;code&gt;.class&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df566aa68ecfbf6dfa5f7b5378bc80293d2d6ebb" translate="yes" xml:space="preserve">
          <source>If you want to contribute then you might want to install Crystal from sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f59918ff367bc32efced5deba138d5dc0263842" translate="yes" xml:space="preserve">
          <source>If you want to invoke the program's method, even though the current type defines a method with the same name, prefix the call with &lt;code&gt;::&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c586a9a5f5e8f10a1de56e853440af82e8a1e4" translate="yes" xml:space="preserve">
          <source>If you want to pass &lt;code&gt;NULL&lt;/code&gt; instead of a callback, just pass &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ba118065f124836ada1dae1c7d7a1c2f20798b" translate="yes" xml:space="preserve">
          <source>If you want to verify that all your code has been formatted with &lt;code&gt;crystal tool format&lt;/code&gt;, add a script for &lt;code&gt;crystal tool format --check&lt;/code&gt;. If the code is not formatted correctly, this will &lt;a href=&quot;https://docs.travis-ci.com/user/for-beginners/#breaking-the-build&quot;&gt;break the build&lt;/a&gt; just as failing tests would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4aef3252cad6456eca00eb1161df1deafc2382" translate="yes" xml:space="preserve">
          <source>If you would like more information about &lt;code&gt;bin/crystal&lt;/code&gt;, check out the &lt;a href=&quot;../using_the_compiler/index&quot;&gt;using the compiler&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2b9dfcd7352fe0bb387189e0d5ab88b584c912" translate="yes" xml:space="preserve">
          <source>If you're on a &lt;code&gt;-RELEASE&lt;/code&gt; version of FreeBSD, by default &lt;code&gt;pkg&lt;/code&gt; is configured for the &lt;code&gt;quarterly&lt;/code&gt; package set, which is updated every quarter (except for security patches, which are included ASAP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e759f241669f8bab60848fe61cabfe006f9ba86" translate="yes" xml:space="preserve">
          <source>If you're planning to contribute to the language itself you might find useful to install LLVM as well. So replace the last line with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6618bc7455279890292923d513388ccc28194ee3" translate="yes" xml:space="preserve">
          <source>If you've been following along, your &lt;code&gt;.travis.yml&lt;/code&gt; file should look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081a86d8835d5147ede55f7c5f68848f67509bf5" translate="yes" xml:space="preserve">
          <source>If your shard builds an application, both &lt;code&gt;shard.yml&lt;/code&gt; and &lt;code&gt;shard.lock&lt;/code&gt; should be checked into version control to provide reproducible dependency installs. If it is only a library for other shards to depend on, &lt;code&gt;shard.lock&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be checked in, only &lt;code&gt;shard.yml&lt;/code&gt;. It's good advice to add it to &lt;code&gt;.gitignore&lt;/code&gt; (the &lt;a href=&quot;../using_the_compiler/index#crystal-init&quot;&gt;&lt;code&gt;crystal init&lt;/code&gt;&lt;/a&gt; does this automatically when initializing a &lt;code&gt;lib&lt;/code&gt; repository).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f704f1f4341c2e007c25bf130f73a86589aaf7f3" translate="yes" xml:space="preserve">
          <source>Ignore internal document encoding hint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e769494ea641bd01735c8978b12dae80bc631fc2" translate="yes" xml:space="preserve">
          <source>Illegal byte sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3176fdb344f7026fb9cd9da003d83547cd35fc12" translate="yes" xml:space="preserve">
          <source>Illegal seek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78785e84488212efeb2df817e6c0811fde489e5" translate="yes" xml:space="preserve">
          <source>Implement XInclude substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7193857d3b73c5303f625327d016375cad6c9bd" translate="yes" xml:space="preserve">
          <source>Implementation is based on an open hash table. Two objects refer to the same hash key when their hash value (&lt;code&gt;&lt;a href=&quot;object#hash-instance-method&quot;&gt;Object#hash&lt;/a&gt;&lt;/code&gt;) is identical and both objects are equal to each other (&lt;code&gt;&lt;a href=&quot;object#==(other)-instance-method&quot;&gt;Object#==&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a13cf35486afca7a9a49f42ce8dd25245bef7d4" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;&lt;a href=&quot;../../socket/server&quot;&gt;::Socket::Server&lt;/a&gt;&lt;a href=&quot;server#accept:OpenSSL::SSL::Socket::Server-instance-method&quot;&gt;#accept&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6febf3423b5a2fd5d708d0cafafae45278263e8d" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;&lt;a href=&quot;../../socket/server&quot;&gt;::Socket::Server&lt;/a&gt;&lt;a href=&quot;server#accept?:OpenSSL::SSL::Socket::Server?-instance-method&quot;&gt;#accept?&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522d7f2bf78da2c71f62f15e7ea93767f964798c" translate="yes" xml:space="preserve">
          <source>Implements the MD5 digest algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6517a6b07ad2994f4db48b1a5fca25d96b5794" translate="yes" xml:space="preserve">
          <source>Implements the SHA1 digest algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c33c1d5f4fa18cbeb1939fec24c2dc189e85fc" translate="yes" xml:space="preserve">
          <source>Implicit constants, &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;All&lt;/code&gt;, are automatically added to these enums, where &lt;code&gt;None&lt;/code&gt; has the value &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;All&lt;/code&gt; has the &quot;or&quot;ed value of all constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e67fca40f0865559decb7988447ee1a5d8afa90" translate="yes" xml:space="preserve">
          <source>Implicit-object allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9097990aa250d8f26c2cfe005b8d4cc9d881781d" translate="yes" xml:space="preserve">
          <source>In Crystal everything is an object. The definition of an object boils down to these points:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adb3016af8e6fb7aa092ef4f2cbea0f28a08306" translate="yes" xml:space="preserve">
          <source>In Crystal, &lt;code&gt;puts&lt;/code&gt; will invoke &lt;code&gt;to_s(io)&lt;/code&gt; on the object, passing it the IO to which the string representation should be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9466fcc2a8dc340d36e807c6fd6035b41d1e3d" translate="yes" xml:space="preserve">
          <source>In Debian derived distributions, you can use the official Crystal repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3420906df7a8098222f85752d96256b7fae157a9" translate="yes" xml:space="preserve">
          <source>In RedHat derived distributions, you can use the official Crystal repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20d35e011fcff7c9bfba4fa9e8f1fd220651dd6" translate="yes" xml:space="preserve">
          <source>In all of these cases you can use the special &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; suffixes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3933f8aefcde5fa10556fdc0355de356ee6b2888" translate="yes" xml:space="preserve">
          <source>In all the previous examples, the rolling back is &lt;strong&gt;implicit&lt;/strong&gt;, but we can also tell the transaction to rollback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd338898fb2109e29819cb3d608e19399d6e3c9" translate="yes" xml:space="preserve">
          <source>In binary file mode, line endings are not converted to CRLF on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f057cf08f3968ab6ed1ba375b21b72ec05df09e" translate="yes" xml:space="preserve">
          <source>In both cases you can use nested names and they will be looked up in nested directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5f6851b0dc51557521b3f2a040fcad95429166" translate="yes" xml:space="preserve">
          <source>In class names, acronyms are &lt;em&gt;all-uppercase&lt;/em&gt;. For example, &lt;code&gt;HTTP&lt;/code&gt;, and &lt;code&gt;LibXML&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b90c702b82602a8ad11637852efc2a0a14c17d" translate="yes" xml:space="preserve">
          <source>In code examples, the comment &lt;code&gt;#=&amp;gt;&lt;/code&gt; is used to show the value of an expression. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8e35bbf336b39b920f37a26849fc466895e2d6" translate="yes" xml:space="preserve">
          <source>In contrast, &lt;code&gt;&lt;a href=&quot;time#to_local_in(location:Location)-instance-method&quot;&gt;#to_local_in&lt;/a&gt;&lt;/code&gt; changes to a different location while preserving the same wall time, which results in different instants on the time line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91252187c9622577b97522e09b6689e3975ee758" translate="yes" xml:space="preserve">
          <source>In either case, &lt;code&gt;&amp;amp;.some_method&lt;/code&gt; is an argument passed to &lt;code&gt;method&lt;/code&gt;. This argument is syntactically equivalent to the block variants. It is only syntactic sugar and does not have any performance penalty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baabc5553f8c1404a113ef41725f49489e618aa7" translate="yes" xml:space="preserve">
          <source>In fact, the above code doesn't need the return type restriction in &lt;code&gt;self.unknown&lt;/code&gt;. The reason is that the compiler will also look at a class method's body and if it can apply one of the previous rules (it's a &lt;code&gt;new&lt;/code&gt; method, or it's a literal, etc.) it will infer the type from that expression. So, the above can be simply written like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e98a764080798c366f229c0388793139f23457" translate="yes" xml:space="preserve">
          <source>In floored division, given two integers x and y:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7bdc1551e860e2537e62a30de5df863b4efb84" translate="yes" xml:space="preserve">
          <source>In generated documentation the dummy &lt;code&gt;&amp;amp;block&lt;/code&gt; method will always appear, regardless of you writing it or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0d97ace8f4764818f14af7c2827d661b52d173" translate="yes" xml:space="preserve">
          <source>In its basic form, it allows matching a value against other values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3d240203a8b6c79f2e44535d1881beb0aa8f5e" translate="yes" xml:space="preserve">
          <source>In macro definitions, arguments are passed as their AST nodes, giving you access to them in macro expansions (&lt;code&gt;{{some_macro_argument}}&lt;/code&gt;). However that is not true for macro defs. Here the argument list is that of the method generated by the macro def. You cannot access their compile-time value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdf26967d789974e8d26a48672ad46762c3b391" translate="yes" xml:space="preserve">
          <source>In many programming languages what will happen is that &lt;code&gt;to_s&lt;/code&gt;, or a similar method for converting the object to its string representation, will be invoked, and then that string will be written to the standard output. This works, but it has a flaw: it creates an intermediate string, in heap memory, only to write it and then discard it. This, involves a heap memory allocation and gives a bit of work to the GC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fcf1095841b67382c241734de7c6c3270ef129" translate="yes" xml:space="preserve">
          <source>In method names, acronyms are &lt;em&gt;all-lowercase&lt;/em&gt;. For example &lt;code&gt;#from_json&lt;/code&gt;, &lt;code&gt;#to_io&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abef0c25fad769d15456af4cd758bf852ce49066" translate="yes" xml:space="preserve">
          <source>In one moment a transfer is made from one account to the other. For example, &lt;em&gt;John transfers $50 to Sarah&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b20353fa4a607cc54a9a084e3781b0d325118f" translate="yes" xml:space="preserve">
          <source>In order to achieve this, the compiler executable provides two flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fca536d6d8a121e64fa8a24226d59515e156fc8" translate="yes" xml:space="preserve">
          <source>In order to release a Crystal Shard, and follow along with this tutorial, you will need the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45845528a893d7f07d0dcb0adb6bf6678c74e3ff" translate="yes" xml:space="preserve">
          <source>In regular code &lt;code&gt;Int32 -&amp;gt; String&lt;/code&gt; is a syntax error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c7a4d4741aa6515f174c290b51cd5a14d9ddd0" translate="yes" xml:space="preserve">
          <source>In regular code, &lt;code&gt;Int32*&lt;/code&gt; means invoking the &lt;code&gt;*&lt;/code&gt; method on &lt;code&gt;Int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f6356268a6e30bf06632cfbb11e2a11cbb4d50" translate="yes" xml:space="preserve">
          <source>In regular code, &lt;code&gt;Int32?&lt;/code&gt; is a syntax error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492f078cffe16fb68d2167d03739db05308b94af" translate="yes" xml:space="preserve">
          <source>In regular code, &lt;code&gt;Int32[8]&lt;/code&gt; means invoking the &lt;code&gt;[]&lt;/code&gt; method on &lt;code&gt;Int32&lt;/code&gt; with &lt;code&gt;8&lt;/code&gt; as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526586a834f1acd181071ee8a67839e86c895c7f" translate="yes" xml:space="preserve">
          <source>In regular code, &lt;code&gt;{Int32, String}&lt;/code&gt; is a tuple instance containing &lt;code&gt;Int32&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; as its elements. This is different than the above tuple &lt;strong&gt;type&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a61b2f88a6519db2174b4c0fd81ab4104e656f" translate="yes" xml:space="preserve">
          <source>In regular code, &lt;code&gt;{x: Int32, y: String}&lt;/code&gt; is a named tuple instance containing &lt;code&gt;Int32&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. This is different than the above named tuple &lt;strong&gt;type&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9197929b078049f3d920b613864a5137ba83476e" translate="yes" xml:space="preserve">
          <source>In short, avoid &lt;code&gt;&amp;amp;block&lt;/code&gt; forwarding when &lt;code&gt;yield&lt;/code&gt; is involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ff5b78c5e6b747a3030301d6331afba01439db" translate="yes" xml:space="preserve">
          <source>In such cases, the choice of time zone, and therefore the time, is not well-defined. This method returns a time that is correct in one of the two zones involved in the transition, but it does not guarantee which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0c05f42e0f0e35e6860c2aa34f779c5ad03453" translate="yes" xml:space="preserve">
          <source>In test files, specs are structured by example groups which are defined by &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; sections. Typically a top level &lt;code&gt;describe&lt;/code&gt; defines the outer unit (such as a class) to be tested by the spec. Further &lt;code&gt;describe&lt;/code&gt; sections can be nested within the outer unit to specify smaller units under test (such as individual methods).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7797ad4b749b9838697b2454d45f1289a82261" translate="yes" xml:space="preserve">
          <source>In the IPv4 family, loopback addresses are all addresses in the subnet &lt;code&gt;127.0.0.0/24&lt;/code&gt;. In IPv6 &lt;code&gt;::1&lt;/code&gt; is the loopback address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5571ff15655a22733fe5015d3a6e2b504b7002f6" translate="yes" xml:space="preserve">
          <source>In the above case, &lt;code&gt;@lucky_number&lt;/code&gt; will be inferred to be &lt;code&gt;Int32 | Nil&lt;/code&gt;: &lt;code&gt;Int32&lt;/code&gt; because 42 was assigned to it, and &lt;code&gt;Nil&lt;/code&gt; because it wasn't assigned in all of the class' initialize methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efa502e913abbc79dcda531f8a0990c2a080c79" translate="yes" xml:space="preserve">
          <source>In the above case, the compiler will still infer &lt;code&gt;@name&lt;/code&gt; to be &lt;code&gt;String&lt;/code&gt;, and later will give a compile time error, when fully typing that method, saying that &lt;code&gt;Int32&lt;/code&gt; can't be assigned to a variable of type &lt;code&gt;String&lt;/code&gt;. Use an explicit type restriction if &lt;code&gt;@name&lt;/code&gt; isn't supposed to be a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ed7572b4d153af5a9de9d9ab6e906482e280b1" translate="yes" xml:space="preserve">
          <source>In the above code we didn't have to specify the type arguments of &lt;code&gt;MyBox&lt;/code&gt;, the compiler inferred them following this process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a818a2bc286641ec8480d71d3ba85299f97abeb4" translate="yes" xml:space="preserve">
          <source>In the above code, &lt;code&gt;a&lt;/code&gt; is a union of &lt;code&gt;Int32 | String&lt;/code&gt;. If for some reason we are sure &lt;code&gt;a&lt;/code&gt; is an &lt;code&gt;Int32&lt;/code&gt; after the &lt;code&gt;if&lt;/code&gt;, we can force the compiler to treat it like one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b85f665ae6c92e2a3db22fa56a75e055c972b04" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;@lucky_number&lt;/code&gt; will be inferred to be &lt;code&gt;Int32 | Nil&lt;/code&gt;. This is very useful for lazily initialized variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124ada8309146e0f4c168bc700ffa0393754b23e" translate="yes" xml:space="preserve">
          <source>In the above example the type of &lt;code&gt;&amp;amp;block&lt;/code&gt; wasn't specified: this just means that the captured block doesn't have arguments and doesn't return anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a7642382c651738fddc7f605477138fd4fcf59" translate="yes" xml:space="preserve">
          <source>In the above example we used &lt;code&gt;nil&lt;/code&gt; just to communicate that the fiber ended. We can also use channels to communicate values between fibers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d75092753e0f0d0e7a607d9814119db70549412" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;invoke&lt;/code&gt; receives a block. We can't pass &lt;code&gt;proc&lt;/code&gt; directly to it because &lt;code&gt;invoke&lt;/code&gt; doesn't receive regular arguments, just a block argument. We use &lt;code&gt;&amp;amp;&lt;/code&gt; to specify that we really want to pass &lt;code&gt;proc&lt;/code&gt; as the block argument. Otherwise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3dbe0c0ea2d5e5cc5ba04c9b70d7366c234db59" translate="yes" xml:space="preserve">
          <source>In the above example, even though &lt;code&gt;x&lt;/code&gt; is a local variable, it was captured by the proc literal. In this case the compiler allocates &lt;code&gt;x&lt;/code&gt; on the heap and uses it as the context data of the proc to make it work, because normally local variables live in the stack and are gone after a method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91f1497e93bf47302926f3080552ab1b7bead36" translate="yes" xml:space="preserve">
          <source>In the above example, it is as if we pasted the &lt;code&gt;size&lt;/code&gt; method from the module into the &lt;code&gt;Items&lt;/code&gt; class. The way this really works is by making each type have a list of ancestors, or parents. By default this list starts with the superclass. As modules are included they are &lt;strong&gt;prepended&lt;/strong&gt; to this list. When a method is not found in a type it is looked up in this list. When you invoke &lt;code&gt;super&lt;/code&gt;, the first type in this ancestors list is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c6bc18e6c0d45245b059a944b3bf024ed56dae" translate="yes" xml:space="preserve">
          <source>In the above example, three indexed variables are declared, assigned values, and then printed, displaying their corresponding indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d122c215033c5da6e1628b04dc3f3c56c303fd64" translate="yes" xml:space="preserve">
          <source>In the above example, trying to invoke a method on the returned value will give a compile time error unless both &lt;code&gt;&lt;a href=&quot;int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;nil&quot;&gt;Nil&lt;/a&gt;&lt;/code&gt; define that method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51415e1d10034628d167c7a1b19bbc3f9d76ff9c" translate="yes" xml:space="preserve">
          <source>In the above example, we start a transaction simply by calling the method &lt;code&gt;Database#transaction&lt;/code&gt; (how we get the &lt;code&gt;database&lt;/code&gt; object is encapsulated in the method &lt;code&gt;get_bank_db&lt;/code&gt; and is out of the scope of this document). The &lt;code&gt;block&lt;/code&gt; is the body of the transaction. When the &lt;code&gt;block&lt;/code&gt; gets executed (without any error) then an &lt;strong&gt;implicit commit&lt;/strong&gt; is finally executed to persist the changes in the database. If an exception is raised by one of the operations, then an &lt;strong&gt;implicit rollback&lt;/strong&gt; is executed, bringing the database to the state before the transaction started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcef7a51e128206daec27d6a7e4f9aa89371cab0" translate="yes" xml:space="preserve">
          <source>In the case of flags enums, this invokes &lt;code&gt;&lt;a href=&quot;enum#includes?(other:self)-instance-method&quot;&gt;#includes?&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7dd16b5b05f743bcfad7a9a5465ff9f7a7ddad" translate="yes" xml:space="preserve">
          <source>In the case of regular enums, this compares by equality (&lt;code&gt;&lt;a href=&quot;enum#==(other:self)-instance-method&quot;&gt;#==&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcd9f4e856948e8a3be2a8f5fb09b0eb29b464e" translate="yes" xml:space="preserve">
          <source>In the following example &lt;code&gt;@age&lt;/code&gt; is inferred to be &lt;code&gt;Int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5b0626fee0a18d632f9443ed431c26862140e0" translate="yes" xml:space="preserve">
          <source>In the following example &lt;code&gt;@name&lt;/code&gt; is inferred to be &lt;code&gt;String&lt;/code&gt; because the method argument &lt;code&gt;name&lt;/code&gt; has a type restriction of type &lt;code&gt;String&lt;/code&gt;, and that argument is assigned to &lt;code&gt;@name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7313dce0ee84b164076b56b4581f51dde5ec706" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;@address&lt;/code&gt; is inferred to be &lt;code&gt;Address&lt;/code&gt;, because the class method &lt;code&gt;Address.unknown&lt;/code&gt; has a return type restriction of &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49029b9c2bcaa1c2e4dd77cea777c2e41fb65b4" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;@address&lt;/code&gt; is inferred to be &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ca8f892e668e16502b6aaabe088f879f063a50" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;@name&lt;/code&gt; is inferred to be &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;@age&lt;/code&gt; to be &lt;code&gt;Int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df5a618b3865cffd7845a48b17f694f112e9529" translate="yes" xml:space="preserve">
          <source>In the following example, because the default value of &lt;code&gt;name&lt;/code&gt; is a string literal, and it's later assigned to &lt;code&gt;@name&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; will be added to the set of inferred types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b5af7a3b99d804b6630e30b044d9107e3bfa8b" translate="yes" xml:space="preserve">
          <source>In the general case, when two types &lt;code&gt;T1&lt;/code&gt; and &lt;code&gt;T2&lt;/code&gt; are combined, the result is a union &lt;code&gt;T1 | T2&lt;/code&gt;. However, there are a few cases where the resulting type is a different type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68060a64d5ca9a24e2d3d6068708a62ef681950d" translate="yes" xml:space="preserve">
          <source>In the previous example &lt;code&gt;self&lt;/code&gt; is the same as writing &lt;code&gt;Person&lt;/code&gt;. But, in general, &lt;code&gt;self&lt;/code&gt; is the same as writing the type that will finally own that method, which, when modules are involved, becomes more useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514e6fa2040cfbd7a473f42da2776658c65cb65d" translate="yes" xml:space="preserve">
          <source>In this case, leading whitespace is not included in the resulting string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd23cc1df5b309a251dda223a31fb375d169840" translate="yes" xml:space="preserve">
          <source>In this case, no runtime checks are done: pointers are unsafe and this type of casting is usually only needed in C bindings and low-level code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25af0a6ae35089113e88ba9d5bc7c35374c0be7" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll be making a Crystal library called &lt;em&gt;palindrome-example&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111a36bf8332a4163ec695bc63042943efe48fc1" translate="yes" xml:space="preserve">
          <source>In this way a block can be saved as a callback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7dad6455dba565c9aa636279b2b42b57e655e4" translate="yes" xml:space="preserve">
          <source>In this way a module can be used as a namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f3ad3b83ad9ee22a604db1b623b84c7bb74df7" translate="yes" xml:space="preserve">
          <source>In this way generic types are less tedious to work with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7104d6ead642bbdcc16e9c61e87c72cd9a230e5" translate="yes" xml:space="preserve">
          <source>In this way we pass a pointer of &lt;code&gt;status_ptr&lt;/code&gt; to the function for it to fill its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93de36436727da023b0275426c9ce5fcb0b002ae" translate="yes" xml:space="preserve">
          <source>In truncated division, given two integers x and y:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4753ffe674feb5c9e2bb5af076e1e8c15a4c5a" translate="yes" xml:space="preserve">
          <source>In type restrictions, generic type arguments and other places where a type is expected, you can use a shorter syntax, as explained in the &lt;a href=&quot;../type_grammar&quot;&gt;type grammar&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af93d6778e838a9db8bbbb9727cb630672bebd9b" translate="yes" xml:space="preserve">
          <source>In type restrictions, generic type arguments and other places where a type is expected, you can use a shorter syntax, as explained in the &lt;a href=&quot;../type_grammar&quot;&gt;type&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d1db0ef06261c321c2ce9f91cd5a1a34aca9de" translate="yes" xml:space="preserve">
          <source>In verbose mode prints the exception with its backtrace to the response, else a generic error message is returned to the client. Use the &lt;code&gt;&lt;a href=&quot;loghandler&quot;&gt;HTTP::LogHandler&lt;/a&gt;&lt;/code&gt; before this to log the exception on the server side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462205bf0a89cdc74a3011f60c8b25f7f515c495" translate="yes" xml:space="preserve">
          <source>In your terminal: &lt;code&gt;crystal init lib &amp;lt;YOUR-SHARD-NAME&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4f7828c46ac4c3d9f95d485eb13b699f135c25" translate="yes" xml:space="preserve">
          <source>Inappropriate ioctl for device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1d01d8cbbdaafc58904654ab11eedc627a6259" translate="yes" xml:space="preserve">
          <source>Included Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cab9a496932542bfe0aaa92041e8f1bf57af88" translate="yes" xml:space="preserve">
          <source>Includes the current position of the offset, the total size of the string, and five characters near the current position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fe5bd7005257d25d665a6cd555f50ace814b67" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;&lt;a href=&quot;serializable&quot;&gt;JSON::Serializable&lt;/a&gt;&lt;/code&gt; will create &lt;code&gt;&lt;a href=&quot;serializable#to_json(json:JSON::Builder)-instance-method&quot;&gt;#to_json&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;self.from_json&lt;/code&gt; methods on the current class, and a constructor which takes a &lt;code&gt;&lt;a href=&quot;pullparser&quot;&gt;JSON::PullParser&lt;/a&gt;&lt;/code&gt;. By default, these methods serialize into a json object containing the value of every instance variable, the keys being the instance variable name. Most primitives and collections supported as instance variable values (string, integer, array, hash, etc.), along with objects which define to_json and a constructor taking a &lt;code&gt;&lt;a href=&quot;pullparser&quot;&gt;JSON::PullParser&lt;/a&gt;&lt;/code&gt;. Union types are also supported, including unions with nil. If multiple types in a union parse correctly, it is undefined which one will be chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddcc5b735eadc1af1b2a356449896a4f8df55ef" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;&lt;a href=&quot;serializable&quot;&gt;YAML::Serializable&lt;/a&gt;&lt;/code&gt; will create &lt;code&gt;&lt;a href=&quot;serializable#to_yaml(yaml:YAML::Nodes::Builder)-instance-method&quot;&gt;#to_yaml&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;self.from_yaml&lt;/code&gt; methods on the current class, and a constructor which takes a &lt;code&gt;&lt;a href=&quot;pullparser&quot;&gt;YAML::PullParser&lt;/a&gt;&lt;/code&gt;. By default, these methods serialize into a yaml object containing the value of every instance variable, the keys being the instance variable name. Most primitives and collections supported as instance variable values (string, integer, array, hash, etc.), along with objects which define to_yaml and a constructor taking a &lt;code&gt;&lt;a href=&quot;pullparser&quot;&gt;YAML::PullParser&lt;/a&gt;&lt;/code&gt;. Union types are also supported, including unions with nil. If multiple types in a union parse correctly, it is undefined which one will be chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab464ce8f134afcd16e7505da7fc547187588711" translate="yes" xml:space="preserve">
          <source>Including types must provide an &lt;code&gt;&lt;a href=&quot;comparable#(other:T)-instance-method&quot;&gt;#&amp;lt;=&amp;gt;&lt;/a&gt;&lt;/code&gt; method, which compares the receiver against another object, returning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fae64fc81923761b8ca1bdb4a3828cf6c92bf1" translate="yes" xml:space="preserve">
          <source>Including types must provide an &lt;code&gt;&lt;a href=&quot;enumerable#each(&amp;amp;block:T-%3EUNDERSCORE)-instance-method&quot;&gt;#each&lt;/a&gt;&lt;/code&gt; method, which yields successive members of the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa2788cdc8e7cfe875775088a98530e243656f1" translate="yes" xml:space="preserve">
          <source>Including types must provide an &lt;code&gt;&lt;a href=&quot;partialcomparable#(other:T)-instance-method&quot;&gt;#&amp;lt;=&amp;gt;&lt;/a&gt;&lt;/code&gt; method, which compares the receiver against another object, returning a negative number, &lt;code&gt;0&lt;/code&gt;, a positive number or &lt;code&gt;nil&lt;/code&gt; depending on whether the receiver is less than, equal to, greater than the other object, or no order can be established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a14219f8778db41eddc5fe7f7e4da01bbbd1253" translate="yes" xml:space="preserve">
          <source>Increases the indentation for breakables inside the current group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dc6f3198e1ab65580dfebac35a07a14e7e38f6" translate="yes" xml:space="preserve">
          <source>Index: Crystal Programming Language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383b324a3291b51f1e54ef9c0d763010fbc5e171" translate="yes" xml:space="preserve">
          <source>IndexError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19de3299a3897fa0771a50182b11e1e8be821894" translate="yes" xml:space="preserve">
          <source>IndexError.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b6addd60debc77c2c9b03c90e8b626de36d170" translate="yes" xml:space="preserve">
          <source>Indexable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79cefe685814aa2f049a41f6ffc4e30d84b145c" translate="yes" xml:space="preserve">
          <source>Indexable#[]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7babee602f0988fd98bb2f1d95a43bfac7caa9" translate="yes" xml:space="preserve">
          <source>Indexable#[]?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05db1f01edfbc59515f166e88d4fd5b24f07c8e7" translate="yes" xml:space="preserve">
          <source>Indexable#dig</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af3718bc62736c3dfedac8bdc3d7da673715ce9" translate="yes" xml:space="preserve">
          <source>Indexable#dig?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b96fcd989302177599a91423fda4968c15acb5" translate="yes" xml:space="preserve">
          <source>Indexable#each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7630382d1564302d2e2a8a2c487c20cb9b1b28b2" translate="yes" xml:space="preserve">
          <source>Indexable#hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5723cc35dcf1bfe6bbb83dbe157b2d8b7b86b9a4" translate="yes" xml:space="preserve">
          <source>Indexable#join</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c21620b0bd8bdc033ef481e54e15c2d9fde8b0" translate="yes" xml:space="preserve">
          <source>Indexable#last</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df56a7f87f1d712659a55c82d479f1c99939c9d" translate="yes" xml:space="preserve">
          <source>Indexable#size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238e9f22f6c210dabfb3a95cc042e94e4ad66efe" translate="yes" xml:space="preserve">
          <source>Indexable#to_a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0e2d3a57fd1cf7ddedb21fd52f835db33214e5" translate="yes" xml:space="preserve">
          <source>Indexable(T)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d93b049bf4950dbec2b7d9c03737e03e1882b07" translate="yes" xml:space="preserve">
          <source>Indexable(Union(*T))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9951861c21df18489a5872209655d6f9039b5e2a" translate="yes" xml:space="preserve">
          <source>Indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0416c4a1d681a8fdc755037de993bdd49fa79545" translate="yes" xml:space="preserve">
          <source>Indexing starts at &lt;code&gt;0&lt;/code&gt;. A negative index is assumed to be relative to the end of the container: &lt;code&gt;-1&lt;/code&gt; indicates the last element, &lt;code&gt;-2&lt;/code&gt; is the next to last element, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4eafbd37e7902b944d838c2cde789f85ab1f7f" translate="yes" xml:space="preserve">
          <source>Indexing with a symbol that is only known at runtime will return a value whose type is the union of all the types in the named tuple, and might raise &lt;code&gt;&lt;a href=&quot;keyerror&quot;&gt;KeyError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caf89b3f9c705f50f90dbbb42966840fe3ba4c9" translate="yes" xml:space="preserve">
          <source>Indexing with an integer value that is only known at runtime will return a value whose type is the union of all the types in the tuple, and might raise &lt;code&gt;&lt;a href=&quot;indexerror&quot;&gt;IndexError&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ff70971870dbb59096c430e7b50b74e869044a" translate="yes" xml:space="preserve">
          <source>Indicates the call convention of a &lt;a href=&quot;../c_bindings/fun&quot;&gt;lib fun&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe205a81f47d8626e156d49fd481c57d8bb84c94" translate="yes" xml:space="preserve">
          <source>Indicates the possible hash algorithms for &lt;code&gt;&lt;a href=&quot;../openssl&quot;&gt;OpenSSL&lt;/a&gt;&lt;/code&gt; digest operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211f828d6f28bcc064ab08a81d3eea6343094a2a" translate="yes" xml:space="preserve">
          <source>Info#directory?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555f919b4df3de254a8116361968e47b73856f7e" translate="yes" xml:space="preserve">
          <source>Info#file?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19de402a865facf8738f953f5b3cea929ac9070" translate="yes" xml:space="preserve">
          <source>Info#flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74f97b45c200e1a01e4223bf1a54bf53d7e3800" translate="yes" xml:space="preserve">
          <source>Info#group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c557ef53f8bf8c3d8b352f500bfa9c605ff912d1" translate="yes" xml:space="preserve">
          <source>Info#modification_time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abbb4b0e1f640dfdfc8cb04ffa078cec69437063" translate="yes" xml:space="preserve">
          <source>Info#owner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbcbed738d550b11fc7f09535150b157ff0bd78" translate="yes" xml:space="preserve">
          <source>Info#permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfbc280aca1bd08275922fcf5683a9bff351752" translate="yes" xml:space="preserve">
          <source>Info#same_file?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f76514c8d7427a911d17937ee22793264048637" translate="yes" xml:space="preserve">
          <source>Info#size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1069ce11cd747c58056412e13320fc85bdd1c62b" translate="yes" xml:space="preserve">
          <source>Info#symlink?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131f0f2ef479d04720650444b3026d8bff5acb48" translate="yes" xml:space="preserve">
          <source>Info#type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9e1e8fb8993dc0d9e9eeef8c93cc0189fa0b6d" translate="yes" xml:space="preserve">
          <source>Info.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3919f37f92b72d7d934c42faeef036bec6d07752" translate="yes" xml:space="preserve">
          <source>Informative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73aa49eaa4b825dc0db4ce8945a56681d937f402" translate="yes" xml:space="preserve">
          <source>Initializes a shard folder and creates a &lt;code&gt;shard.yml&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079cd7451c2f33776e2d43a15299490325b9d402" translate="yes" xml:space="preserve">
          <source>Initializes an instance seeded from a system source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3feee74bdbd58050136cbaaf33ab5797560f65d" translate="yes" xml:space="preserve">
          <source>Initializes an instance with the given &lt;em&gt;seed&lt;/em&gt; and &lt;em&gt;sequence&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02f1240730d62d775f24cef4c75c62f97f3d2a2" translate="yes" xml:space="preserve">
          <source>Initializes the GC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc218c2e160f72aaf4bd66baecf606176dbdfee8" translate="yes" xml:space="preserve">
          <source>Initializes the MIME database loading contents from a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2631e1bd6441c38f62d38f6c5e2eda71db2b45" translate="yes" xml:space="preserve">
          <source>Initializes the MIME database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67704b2a377775925196685fd1c04cfb5a7c685c" translate="yes" xml:space="preserve">
          <source>Initializes this handler to log to the given &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f41200b6d51a2b0a4e22a2949eb0f878c8d407" translate="yes" xml:space="preserve">
          <source>Input/output error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a10ed30072d4eb54080a4b477ad2480832a17b" translate="yes" xml:space="preserve">
          <source>InputMode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9cbaf61598ef8489f9448debe9d96258545178" translate="yes" xml:space="preserve">
          <source>InputMode#brkint?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b1e9eb8d41546c9c0bc12ee611b836d18b045d" translate="yes" xml:space="preserve">
          <source>InputMode#icrnl?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe14c0807d2e2119a097ab2c65d048ff6c3d2e8" translate="yes" xml:space="preserve">
          <source>InputMode#ignbrk?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bc9f299a0b4597d4e7d9fd3f01eb09387ed1ea" translate="yes" xml:space="preserve">
          <source>InputMode#igncr?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6342c1809c583298f0e791e4aa19c85c9665eb" translate="yes" xml:space="preserve">
          <source>InputMode#ignpar?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70c126727f7464b259080460db08e721d2acc50" translate="yes" xml:space="preserve">
          <source>InputMode#inlcr?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b9e5c743fc33b9576b58396eb4a7ce77b3a4e1" translate="yes" xml:space="preserve">
          <source>InputMode#inpck?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b208d03058a4ba2584d967881a3dd1fc49fa09b" translate="yes" xml:space="preserve">
          <source>InputMode#istrip?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f8cf6cc1e5d5fab19e1de801849f67a48bf5c0" translate="yes" xml:space="preserve">
          <source>InputMode#ixany?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4393acb3d3e23d05e8ab73b5e6e0d9d9df6bde5a" translate="yes" xml:space="preserve">
          <source>InputMode#ixoff?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6047be95a8a78ddb1ec7a95ed048207f63dcdfef" translate="yes" xml:space="preserve">
          <source>InputMode#ixon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cd219e3fcfca10ea5a789e3faf2a8a0729e539" translate="yes" xml:space="preserve">
          <source>InputMode#none?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea136f1aa1cdcfd24aae5df9fa61e76957e3edbd" translate="yes" xml:space="preserve">
          <source>InputMode#parmrk?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1424ec1956956356c2428404a376c4ef7da02718" translate="yes" xml:space="preserve">
          <source>Insert &lt;em&gt;object&lt;/em&gt; before the element at &lt;em&gt;index&lt;/em&gt; and shifting successive elements, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641353f1acbc86a3146b793a84b36357f2a9c579" translate="yes" xml:space="preserve">
          <source>Insert &lt;em&gt;object&lt;/em&gt; before the element at &lt;em&gt;index&lt;/em&gt; and shifting successive elements, if any. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669b482fd3443d0e4b555121d0836c3c77953668" translate="yes" xml:space="preserve">
          <source>Insert a new item before the item at &lt;em&gt;index&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c30453bac2b40ed5569d54efb87eaafda2c1766" translate="yes" xml:space="preserve">
          <source>Insert a new item before the item at &lt;em&gt;index&lt;/em&gt;. Items to the right of this one will have their indices incremented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfcdce8e330cf70f09d335158de3344bf482eca" translate="yes" xml:space="preserve">
          <source>Insert the following markdown build badge below the description in your README.md: (be sure to replace &lt;code&gt;&amp;lt;YOUR-GITHUB-USERNAME&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;YOUR-REPOSITORY-NAME&amp;gt;&lt;/code&gt; accordingly)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bfe8293c52165db712b7851720a089934100fb" translate="yes" xml:space="preserve">
          <source>Inside an &lt;code&gt;if&lt;/code&gt;'s branch the type of a variable is the one it got assigned in that branch, or the one that it had before the branch if it was not reassigned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48347e1765f4c25d196f4770862b167229fc6698" translate="yes" xml:space="preserve">
          <source>Inspection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8794287335edc08cb0e7d9595e1c2caef264d686" translate="yes" xml:space="preserve">
          <source>Inspects &lt;em&gt;object&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;toplevel#STDOUT&quot;&gt;STDOUT&lt;/a&gt;&lt;/code&gt; followed by a newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd0e034a31cabd0dd6dfefaa78c95b41d73e8be" translate="yes" xml:space="preserve">
          <source>Inspects &lt;em&gt;object&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;toplevel#STDOUT&quot;&gt;STDOUT&lt;/a&gt;&lt;/code&gt; followed by a newline. Returns &lt;em&gt;object&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b9fbcf2cd1acbe12c532ec73e34d1049da7f3e" translate="yes" xml:space="preserve">
          <source>Inspects &lt;em&gt;objects&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;toplevel#STDOUT&quot;&gt;STDOUT&lt;/a&gt;&lt;/code&gt;, followed by a newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cccf2ce48c034cb15c334694329c222e943f12" translate="yes" xml:space="preserve">
          <source>Inspects &lt;em&gt;objects&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;toplevel#STDOUT&quot;&gt;STDOUT&lt;/a&gt;&lt;/code&gt;, followed by a newline. Returns &lt;em&gt;objects&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00edb8f50cfaab32f5ce41ac4dcdfa3ba22100a" translate="yes" xml:space="preserve">
          <source>Inspects each object in &lt;em&gt;objects&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;toplevel#STDOUT&quot;&gt;STDOUT&lt;/a&gt;&lt;/code&gt;, followed by a newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15165d65c21e0a5e31e84fa1d4957edb3cae8c6d" translate="yes" xml:space="preserve">
          <source>Inspects each object in &lt;em&gt;objects&lt;/em&gt; to &lt;code&gt;&lt;a href=&quot;toplevel#STDOUT&quot;&gt;STDOUT&lt;/a&gt;&lt;/code&gt;, followed by a newline. Returns &lt;em&gt;objects&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2466e6c5910e6bf74df9f4f82d2332639c23c538" translate="yes" xml:space="preserve">
          <source>Inspects this path to &lt;em&gt;io&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e303864f9f232d82cce74c2cbb80e5eb573e15" translate="yes" xml:space="preserve">
          <source>Inspired by &lt;a href=&quot;http://rspec.info/&quot;&gt;Rspec&lt;/a&gt;, it includes a domain specific language (DSL) that allows you to write examples in a way similar to plain english.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026a10d33b98158b23aa84e14be00d4a7535b2fb" translate="yes" xml:space="preserve">
          <source>Install Package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c63974011e21c8a3854d4404ae4c847f419401" translate="yes" xml:space="preserve">
          <source>Install Port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93299bfceb205192aa4908d74e536163a4f60bd1" translate="yes" xml:space="preserve">
          <source>Installation: From a tar.gz</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ea18871fd5bb7a83a164ee47bbaabaf473e8fb" translate="yes" xml:space="preserve">
          <source>Installation: From sources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3b811b3acefcd0e3787d7d0a5b02df7721ec9c" translate="yes" xml:space="preserve">
          <source>Installation: On Alpine Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84621496885b87cf395a2b7fc3f5c707aed94b60" translate="yes" xml:space="preserve">
          <source>Installation: On Arch Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b146755e997311386480108139d6e7d3e3ceff" translate="yes" xml:space="preserve">
          <source>Installation: On Debian and Ubuntu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02843fcfc91d316cb947685c4aad3101d85c0fe5" translate="yes" xml:space="preserve">
          <source>Installation: On FreeBSD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6827c56ecea00ab98538167517bde8641b4f53" translate="yes" xml:space="preserve">
          <source>Installation: On Gentoo Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca83100367cd95451e2cdb129b748615d4e17ea5" translate="yes" xml:space="preserve">
          <source>Installation: On Linux using Linuxbrew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac7c0cdba93b9e7f203765ffffb49b1b2eb9b3c" translate="yes" xml:space="preserve">
          <source>Installation: On Linux using Snap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8307a549d8a17ee93295fb77c3ef8198ede888" translate="yes" xml:space="preserve">
          <source>Installation: On OpenSUSE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977a24e5a96063c232ee2bf38a77622f04ae8831" translate="yes" xml:space="preserve">
          <source>Installation: On RedHat and CentOS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c9b45d7f36185f544fe4b2106ed0ca8a1af51d" translate="yes" xml:space="preserve">
          <source>Installation: On macOS using Homebrew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a989538e88bba588f01f4b9d2d7226c2e1adeb5" translate="yes" xml:space="preserve">
          <source>Installation: Windows Subsystem for Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d0c0b27a5607a7a13affdba23a3f796628e001" translate="yes" xml:space="preserve">
          <source>Installing the shard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29920c295454d02c33c602160a9238a8af27099a" translate="yes" xml:space="preserve">
          <source>Instance Method Detail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ec3ffd8dc53a1d99d736ad3933ef452d4ad2e9" translate="yes" xml:space="preserve">
          <source>Instance Method Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e668b525c2f1215b004e6856abf44b1d38d3384" translate="yes" xml:space="preserve">
          <source>Instance and class methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625ad1613b53ad4be00259e6cb712cf9bd80fe98" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779c3bbdafc342613b070ca3ebd350a5ca45a805" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../../object&quot;&gt;Object&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495386fae8728da628e10ba3a1f4ca8927dad678" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../../reference&quot;&gt;Reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e271f85116eb91729a7311f905499fc67d59a9b0" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc54bcc13746373ebce84768c3360d5b952bacf5" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de513b46c2d258a82234d55cf0fed4f87b22a46" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../object&quot;&gt;Object&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5ad0022bca9c10a82bd2fffc0f4a588e8ee18f" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../../reference&quot;&gt;Reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b955ebe67b3313bb658feacd5e9b8966d8a36a03" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../abi&quot;&gt;LLVM::ABI&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76df7a846356daf25378fd3f2a31782fbbc75775" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../accesstoken&quot;&gt;OAuth2::AccessToken&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d472670d7e231672d035a16e5399209ac632bd01" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../context&quot;&gt;OpenSSL::SSL::Context&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72b5063f6bf807b810b9d813c086cce18ab649a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../error&quot;&gt;OpenSSL::Error&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3193f43864977bd8a126845f1b32d028e2da268" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a21025e00e8a6bfa6fd188fdf7e00e88d25999" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af43034df2a7db3fa5db0296cf9604db98eff03e" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78d09fd15ef4505c7df21c705ff186d5d5896f4" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../reference&quot;&gt;Reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595723d4cdf205de378899f2c04433910d60b241" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;../socket&quot;&gt;OpenSSL::SSL::Socket&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902a04107a176049bcdb5a6a6821bdbd93838591" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;astnode&quot;&gt;Crystal::Macros::ASTNode&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12f325e35239d1d4ac651641d8eba69d54b03ba" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;binaryop&quot;&gt;Crystal::Macros::BinaryOp&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adcab79aad39ccd4ad1fa22b8031281765f9876" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;exception&quot;&gt;Exception&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58889bc238f3f9243128c75d384acd6d96355aa7" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd639e78d199d451a642528d5f1b499810aab90c" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;io/filedescriptor&quot;&gt;IO::FileDescriptor&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549f4aa52a2f99158653e49dcd2be2a4ceb74955" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;ipsocket&quot;&gt;IPSocket&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922b7ec525116ba2b6f9744547ce8137d96b6e17" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;node&quot;&gt;YAML::Nodes::Node&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504f9b81ae5086cf927f532a9913f5682856629d" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e34b3b2e38bd897a768504f5edb3a3a25bdef9" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;parseexception&quot;&gt;JSON::ParseException&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d5dfbac341191fc15752140322f90293951972" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;reference&quot;&gt;Reference&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91efe764607d03b3ef4de866bc882e5c4508b04" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6654b3bf70076fb6ae098c1603c233a43588c29" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;tcpsocket&quot;&gt;TCPSocket&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d063324b14232dbcf382db359e6a5647c6eb12" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;unaryexpression&quot;&gt;Crystal::Macros::UnaryExpression&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b614fe3d8b250a81a9c6fc997ac78b5b335d27" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from class &lt;code&gt;&lt;a href=&quot;unixsocket&quot;&gt;UNIXSocket&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a8acace28ea36366dfd45a2a0aba0756fc0332" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../../../comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;../../../enum&quot;&gt;Enum&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ed540ea434b65c8276d053321d121427881bb0" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../../../io/buffered&quot;&gt;IO::Buffered&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e234cd72db496d0e0b23779af06cbe1e7606679" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../../comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;../../enum&quot;&gt;Enum&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2edd9ce4b71b7fa0fb68833358f0d39aa4d9124c" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../../enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;node&quot;&gt;YAML::Nodes::Node&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f077ce0ba9a600a23cdef15a484fd65e7aded1" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../../io/buffered&quot;&gt;IO::Buffered&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce20134551a90d41c9dd992163ea84e49f82e5a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../../socket/server&quot;&gt;Socket::Server&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11548c1616a9cad4dd53b0f119d6c7682dfe51a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;../enum&quot;&gt;Enum&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce89da18135892a4e78b6a6501866f08e2bed7b3" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;span&quot;&gt;Time::Span&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f482136cdbc0a4a7962b03e6b2d57246dfa835" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;../char&quot;&gt;Char&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b0ddb90a6b4232644256bc68eb8ab60f31da70" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;cookie&quot;&gt;HTTP::Cookie&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b0adde0c8a9ecc78cc9749536aa4abdde688d8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;node&quot;&gt;XML::Node&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843f8b20707d49e0489d41c7af1b8a524329a67c" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;value&quot;&gt;LLVM::Value&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea7f333ade27e3b4fe49b6f15b7131f0f3863f8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../enumerable&quot;&gt;Enumerable&lt;/a&gt;({&lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;, &lt;a href=&quot;../array&quot;&gt;Array&lt;/a&gt;(&lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;)})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64138db181683ef3f4efc8d0ff8f8b75a0f09105" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../enumerable&quot;&gt;Enumerable&lt;/a&gt;({&lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;, &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9ee768bf2e0e991886622325536634609e0fea" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../fileinfo&quot;&gt;Zip::FileInfo&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f43d471a0ee157f5c9e550cd5f6ae083e9db6f8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../indexable&quot;&gt;Indexable&lt;/a&gt;(&lt;a href=&quot;value&quot;&gt;LLVM::Value&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2508026a5b4ad63a2b63d43b5b58182478a99593" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../io/buffered&quot;&gt;IO::Buffered&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382d6b3d67cbde7a87dcfe9b892d553b1e0179cf" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../iterable&quot;&gt;Iterable&lt;/a&gt;(&lt;a href=&quot;value&quot;&gt;LLVM::Value&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1697a7f62c96941f72b1ae1a1e51efed46b5ad11" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;../random&quot;&gt;Random&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104b557931f550106bfaef0ba7b87b0618d1950" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;buffered&quot;&gt;IO::Buffered&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763447b55c2378aa9bb7188392e64701e6c87db7" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;colorize/objectextensions&quot;&gt;Colorize::ObjectExtensions&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c09eab66b8fcbc1296c2a743be2313ed71fe6a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;array&quot;&gt;Array(T)&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60696d81504a878b276cd154e86985cf39592652" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;bigdecimal&quot;&gt;BigDecimal&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f693e93b23fb60614fae8915331e9a46c9767a9b" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;bigfloat&quot;&gt;BigFloat&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59d7437e715d1fd88063417f5ff8a57e5b5a5e6" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;bigint&quot;&gt;BigInt&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966e8f4216ed7f57ddc41a054effb5be8b30b319" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;bigrational&quot;&gt;BigRational&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172ab3d22a92c4c6cb60a69518c1cd873998bb45" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;char&quot;&gt;Char&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16670e88ef001e42b5e4866e2e9cc7884cdfc82d" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;enum&quot;&gt;Enum&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b4ab7d9c3aa6666b642abef9abb0fcb4397dcb" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;float&quot;&gt;Float&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0093445e65ceb4ed874ac618ce508121d00a863" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;int&quot;&gt;Int&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c34bc6bdc658dc7efe4410dd9b8631c04047a8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;int128&quot;&gt;Int128&lt;/a&gt; | &lt;a href=&quot;int16&quot;&gt;Int16&lt;/a&gt; | &lt;a href=&quot;int32&quot;&gt;Int32&lt;/a&gt; | &lt;a href=&quot;int64&quot;&gt;Int64&lt;/a&gt; | &lt;a href=&quot;int8&quot;&gt;Int8&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a356c1cd630c5ccfeeee027da8b326301528f" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;number&quot;&gt;Number&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6904031db5a94884fd6ce9cc3d8a48bdec9b103a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;path&quot;&gt;Path&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2d69a3f1c794c9e047c3ea546e2bf6a053de32" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;pointer&quot;&gt;Pointer(T)&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87287803c89561dddaea6106b0f4e44ea3e06ce" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;semanticversion&quot;&gt;SemanticVersion&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19feadd87570b6ce794943af3a82cf30bc03a83" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;slice&quot;&gt;Slice(T)&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58896b1fca39ca27d30559b2e1b530b6a07a245e" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;string&quot;&gt;String&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edb5b38a0e022b285be0ba79123f36dc1285703" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;symbol&quot;&gt;Symbol&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7204115b26fd9dcabbccaefd9ebb2981b576f4" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab44b2220d4fac863ac3c629acdfaf6ab9c422a8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;tuple&quot;&gt;Tuple(*T)&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adcb6edfc39d721d5978a401737c4f2823827ec8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;comparable&quot;&gt;Comparable&lt;/a&gt;(&lt;a href=&quot;uint128&quot;&gt;UInt128&lt;/a&gt; | &lt;a href=&quot;uint16&quot;&gt;UInt16&lt;/a&gt; | &lt;a href=&quot;uint32&quot;&gt;UInt32&lt;/a&gt; | &lt;a href=&quot;uint64&quot;&gt;UInt64&lt;/a&gt; | &lt;a href=&quot;uint8&quot;&gt;UInt8&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a15a713d0246dc5a56f0fb318bee674782aeeb" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;digestbase&quot;&gt;OpenSSL::DigestBase&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b5447df39ccb2a1331ad2caa39b6e2e8040fa3" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;enumerable&quot;&gt;Enumerable(B)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26801ea74bcce4fa50803d16f05a123f68ef282c" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;enumerable&quot;&gt;Enumerable(T)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e190b9658c707564fdb7568e97ee93403bddb1e" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;enumerable&quot;&gt;Enumerable(Union(*T))&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1deafbd488c9638b0ef185b18965877f2e8e0f" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;enumerable&quot;&gt;Enumerable({K, V})&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a036f831ce2c4ef2871580edf77ea91edc24ea8d" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;bool&quot;&gt;Bool&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6acbca2831b860e8a2d113f3b3863142cbe2c4" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;enumerable&quot;&gt;Enumerable&lt;/a&gt;(&lt;a href=&quot;string&quot;&gt;String&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11126c8993ceb2fedad5b98f3569e326ed320495" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;evented&quot;&gt;IO::Evented&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81707053aef30e815cdfcd70b77c517639ef03b" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;handler&quot;&gt;HTTP::Handler&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c334872a4b8191880c20c5e11d5c466de3e189" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;indexable&quot;&gt;Indexable(T)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed56f4609ce42aec0bd5f0f4388236f30d7f049f" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;indexable&quot;&gt;Indexable(Union(*T))&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e180e274d409a47b9c4de49b979ecdb6b772ddab" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;indexable&quot;&gt;Indexable&lt;/a&gt;(&lt;a href=&quot;bool&quot;&gt;Bool&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3629b4f97532cfc945381c519877a4e39ee4fb" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;io/buffered&quot;&gt;IO::Buffered&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f785ecc4d0cbda96e34ea756b8cd693e9a78b56" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;io/evented&quot;&gt;IO::Evented&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c5b58c69f36ce6a880552e8a8f5a2399bee7bc" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;iterable&quot;&gt;Iterable(B)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387a0827abec2164a5c8e409494666a8f4d9f65b" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;iterable&quot;&gt;Iterable(T)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284ea93b21422c1844ad76bc2f946067818d25f3" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;iterable&quot;&gt;Iterable(Union(*T))&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db72ef176f33f82127711118bf20ba5e5f71ec3" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;iterable&quot;&gt;Iterable({K, V})&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eb67acdc7e8315fa8537f937c808b4cb593275" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;iterable&quot;&gt;Iterable&lt;/a&gt;(&lt;a href=&quot;bool&quot;&gt;Bool&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd94e9cceea37cd2a1f0c6372adff5d60e254d4" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;iterable&quot;&gt;Iterable&lt;/a&gt;(&lt;a href=&quot;string&quot;&gt;String&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ad2ae8c740fcbf03ded02e3980a0b3d18da51b" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;socket/server&quot;&gt;Socket::Server&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0255d48df50033a5c08288854202c8d1e281ff1" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;spec/expectations&quot;&gt;Spec::Expectations&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42798e60708f25559436f78375082afd9ce75e5e" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;spec/methods&quot;&gt;Spec::Methods&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94116eac0714ebe5c05ac72d9bcf9316127dd5f7" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;spec/objectextensions&quot;&gt;Spec::ObjectExtensions&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd902ebd90c947a05ed362303944a9b69cbb8f1" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;&lt;a href=&quot;valuemethods&quot;&gt;LLVM::ValueMethods&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccf7f6da732198e30eab3e0580f002c36ac0d1a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from module &lt;code&gt;Spec::Item&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88cce42690ad0f5f76343c477168535a131fbe6" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../../../enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff438d3401a260d7ce9eb30def0d7baff2cd0a9" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../../../value&quot;&gt;Value&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d05c77e3d09c739427b5f89392f4952f24d7709" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../../enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef63b4a729b6e6df8cd557cd417e5409a3541cce" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../../struct&quot;&gt;Struct&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36d1647ad771953e663750241ff94128dfa757e" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../../value&quot;&gt;Value&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638b5d4647bb4fbe2c338746fff2fb9dc2ad83bb" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fca12ff7f28f5b966a2ba2a61c10a2439c0cf6c" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../struct&quot;&gt;Struct&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c711cc6273df85f8080896391e6ce93972754dd7" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;../value&quot;&gt;Value&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6282d77aaeda0f7354735036dffa1dddeba68c" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;address&quot;&gt;Socket::Address&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f419c143cfa7f7b9440dba7a9007059e7a8ff490" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414cfcce8f945f8be68a800e2b7bee693375d55e" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;float&quot;&gt;Float&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c91c5467521d8d79f59e290aef53a2d47a1cdd8" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;int&quot;&gt;Int&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776889a99f5efbde8af0b0831e059b4b4aa9279f" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99520548a5b6fa1368fc225b4b330725766f4adb" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;struct&quot;&gt;Struct&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd122fc7b8952ccaa5aa25eefe74cb5db77fa2a" translate="yes" xml:space="preserve">
          <source>Instance methods inherited from struct &lt;code&gt;&lt;a href=&quot;value&quot;&gt;Value&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f04c4ba964874db6809362b1a8926b072c78c2" translate="yes" xml:space="preserve">
          <source>Instance variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea55c865bf1db46d6a04d21a747577b7c0d892a" translate="yes" xml:space="preserve">
          <source>Instance variables can also be initialized outside &lt;code&gt;initialize&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787f100278103ea55c1573c04de928c8d31f8940" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;&lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;&lt;/code&gt; are focused on telling time &amp;ndash; using a &quot;wall clock&quot;. When &lt;code&gt;&lt;a href=&quot;time#local(year:Int32,month:Int32,day:Int32,hour:Int32=0,minute:Int32=0,second:Int32=0,*,nanosecond:Int32=0,location:Location=Location.local):Time-class-method&quot;&gt;Time.local&lt;/a&gt;&lt;/code&gt; is called multiple times, the difference between the returned instances is not guaranteed to equal to the time elapsed between making the calls; even the order of the returned &lt;code&gt;&lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;&lt;/code&gt; instances might not reflect invocation order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1e9e6b7c9ad5f0cd5bd359d068c9fe5d7ea585" translate="yes" xml:space="preserve">
          <source>Instances of this class are passed to an &lt;code&gt;&lt;a href=&quot;../server&quot;&gt;HTTP::Server&lt;/a&gt;&lt;/code&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6218b9f36ba046e184c7444708b6484cebc0c566" translate="yes" xml:space="preserve">
          <source>Instances of this class wrap another &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; object. When you write to this instance, it compresses the data and writes it to the underlying &lt;code&gt;&lt;a href=&quot;../io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34aab868c8ca2315f30dfd86b2b8df252f0586c" translate="yes" xml:space="preserve">
          <source>Instances of this class wrap another IO object. When you read from this instance instance, it reads data from the underlying IO, decompresses it, and returns it to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c9cd759c1f241349f73a04fdb9c2476486f765" translate="yes" xml:space="preserve">
          <source>Instances of this class wrap another IO object. When you write to this instance, it compresses the data and writes it to the underlying IO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca033777d8c3f289a99184f1752669c350d26b63" translate="yes" xml:space="preserve">
          <source>Instantiations of this static array type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76f8cee37fc229387acc13bf2f685b115ed1ea8" translate="yes" xml:space="preserve">
          <source>Instead of defining a type with &lt;code&gt;class&lt;/code&gt; you can do so with &lt;code&gt;struct&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffda3100c78567eeeb1e2dc7fef014e52e11c6e" translate="yes" xml:space="preserve">
          <source>Instead of overriding you can define specialized methods by using type restrictions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11719da4548e1706888bad4b177eb045d8911db" translate="yes" xml:space="preserve">
          <source>Instruction per second interface of the &lt;code&gt;&lt;a href=&quot;benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0144aee16de362b8548a5809ab084131370d5d14" translate="yes" xml:space="preserve">
          <source>Instruction per second interface of the &lt;code&gt;&lt;a href=&quot;benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/code&gt; module. Yields a &lt;code&gt;Job&lt;/code&gt; to which one can report the benchmarks. See the module's description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9641d1ce9a478b6f9da69bf971baae267dbf6f60" translate="yes" xml:space="preserve">
          <source>InstructionCollection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8092c85b13a9e74beafe3a848690f6673f837906" translate="yes" xml:space="preserve">
          <source>InstructionCollection#empty?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b011d60b7a501a710d14dd573a9a3f63a12909c" translate="yes" xml:space="preserve">
          <source>InstructionCollection#first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af946580a8862571557ab4997a650a90ba5fbe4" translate="yes" xml:space="preserve">
          <source>InstructionCollection#first?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921e48132d33f22227fb915723ea5df6dc38f0ca" translate="yes" xml:space="preserve">
          <source>InstructionCollection.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc75473bf4efca67b9902a5e4b992bb68e8c345" translate="yes" xml:space="preserve">
          <source>Instructs the spec runner to execute the given block after each spec, regardless of where this method is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db3e37585fe9a67dde7dfd3fc884bded980ccaa" translate="yes" xml:space="preserve">
          <source>Instructs the spec runner to execute the given block after the entire spec suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6ad32d2a805084d6088d0982fd833061948213" translate="yes" xml:space="preserve">
          <source>Instructs the spec runner to execute the given block before each spec, regardless of where this method is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d8afa840bdd7bdc4d583b2aabe1d99e4de6439" translate="yes" xml:space="preserve">
          <source>Instructs the spec runner to execute the given block before the entire spec suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c89edcac2811a6a9e8072517cae7f3cbfd5049d" translate="yes" xml:space="preserve">
          <source>Int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9f1f4210ebddbaf6813b6ad77c222fe4a2a1ae" translate="yes" xml:space="preserve">
          <source>Int is the base type of all integer types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a5fb226a10b6ab88f7d8bc1dd047605ceef5dc" translate="yes" xml:space="preserve">
          <source>Int#%</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030862b9ab0152efff5681b2a892117029e77594" translate="yes" xml:space="preserve">
          <source>Int#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9bb39ae6c471aac3a456621e3e5bc0408430a2" translate="yes" xml:space="preserve">
          <source>Int#**</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53752164d6689a371fd3d1255693b2b1355445e8" translate="yes" xml:space="preserve">
          <source>Int#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc697fa100544136830a160ba9658473d1053f87" translate="yes" xml:space="preserve">
          <source>Int#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9485f1697e12c0b60fdeb597a7fe963f9ddbf62f" translate="yes" xml:space="preserve">
          <source>Int#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd242c10d71f110b986bfbeef6b93c15a01f415d" translate="yes" xml:space="preserve">
          <source>Int#//</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb892a132e098c7b5e734082146c4b95686224d" translate="yes" xml:space="preserve">
          <source>Int#===</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c5ed31c675d0ef11dc689b7c4930883e00af85" translate="yes" xml:space="preserve">
          <source>Int#abs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75df43afa268bc06119d7183ea5268dff7d58db" translate="yes" xml:space="preserve">
          <source>Int#bit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c14ccf5584ba617995ce53c082d7280a8f01f1b" translate="yes" xml:space="preserve">
          <source>Int#ceil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922c8d382d2d804ab2140efe9b3b792025929e7e" translate="yes" xml:space="preserve">
          <source>Int#chr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4aa190c2012d69cc4b9b7012d406eac5e79e2b" translate="yes" xml:space="preserve">
          <source>Int#day</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfade1d972ea942990e3162fc8191ec1a6b7527" translate="yes" xml:space="preserve">
          <source>Int#days</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fb2858cc149035de46bf4c65a0242a2d4fe273" translate="yes" xml:space="preserve">
          <source>Int#fdiv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e130c1b1298c9ee0dfeec15ec725ec8c734338" translate="yes" xml:space="preserve">
          <source>Int#gcd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9922096f3bb77c14935c8af38769d5b755d6c394" translate="yes" xml:space="preserve">
          <source>Int#gcm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766410356bd81ee7b7388104fad9c2a289431782" translate="yes" xml:space="preserve">
          <source>Int#hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614a071fece4caa7fc27664e760c1e1281d91d50" translate="yes" xml:space="preserve">
          <source>Int#hour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38ef96d87696d7445a98fa08f72a823f861ecb5" translate="yes" xml:space="preserve">
          <source>Int#lcm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449d5b1614b9c1e455dd45da75e9aee37cb8fe43" translate="yes" xml:space="preserve">
          <source>Int#odd?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d603910a50b5f6e47e6566f66f87884aab64272" translate="yes" xml:space="preserve">
          <source>Int#pred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8820592ff885e1cd4c61f4f10403d36e4d56c049" translate="yes" xml:space="preserve">
          <source>Int#succ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116d767faee502f87f93b6068fb1db6a1a7d35e0" translate="yes" xml:space="preserve">
          <source>Int#tdiv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f4523513a63275b1ae650f5a8f018a138579c2" translate="yes" xml:space="preserve">
          <source>Int#to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040a925af57573c3896a745a984fe8031cce7ab0" translate="yes" xml:space="preserve">
          <source>Int#to_s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b480ebfd49e625f00cd377222e7ec6c727fd5b9b" translate="yes" xml:space="preserve">
          <source>Int#upto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800ef8abdcdf618d3043dc01bbda27c9e8346b1b" translate="yes" xml:space="preserve">
          <source>Int#week</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae143499c2fb4ce7f956070c135c7c063b1fa6a7" translate="yes" xml:space="preserve">
          <source>Int#year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ff3e382b1e55c47deedc59ec85fa9e5152f578" translate="yes" xml:space="preserve">
          <source>Int#~</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de86a870104fb0a5a2a80ba8c78d8f536c9c7510" translate="yes" xml:space="preserve">
          <source>Int128</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e6160662f3625a557b8630a33bd5a5ede2d481" translate="yes" xml:space="preserve">
          <source>Int128#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ed7ccbece559f519bf04bf9c53fdba2f96b707" translate="yes" xml:space="preserve">
          <source>Int128#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8b82278b1ec306e8b8443702fdca81f2e0f27b" translate="yes" xml:space="preserve">
          <source>Int128#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a480060666d575974093cba6371099473558123" translate="yes" xml:space="preserve">
          <source>Int128#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68470d4e9ddc057231b69763257f485fa5eec41" translate="yes" xml:space="preserve">
          <source>Int128#^</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70fdbfdadef595acb25ded1cd7ebcd61b5beb7c8" translate="yes" xml:space="preserve">
          <source>Int128#|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7982e8c08d84551a97dde8c3cc98e03fc2d6082c" translate="yes" xml:space="preserve">
          <source>Int16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c42afdeb337ac1a816b9ed6c735e4b98846051c" translate="yes" xml:space="preserve">
          <source>Int16#!=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8942b9c26ebc108847ae383238e48ed5ac0fbbf0" translate="yes" xml:space="preserve">
          <source>Int16#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41a557cd79ebd8a73f46143ae944c6c36dcb177" translate="yes" xml:space="preserve">
          <source>Int16#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a204510b2f347ae701f9b47cd6a270455ea13b0" translate="yes" xml:space="preserve">
          <source>Int16#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239eaf4148edf3d42b490a8d52793ee6e0910ece" translate="yes" xml:space="preserve">
          <source>Int16#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59142ef94839a8df88b043de57cd2e4231509cb" translate="yes" xml:space="preserve">
          <source>Int16#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210c7377b582fa4c57278392d983745c92757801" translate="yes" xml:space="preserve">
          <source>Int16#^</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aee87e56fc310b8f710f28870cc99908bcd3a08" translate="yes" xml:space="preserve">
          <source>Int16#|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4753a4dee54ee10a75b28c6d04eb9ea0d19acce" translate="yes" xml:space="preserve">
          <source>Int32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617053928b45f497d709580b805e0be1b6e42569" translate="yes" xml:space="preserve">
          <source>Int32#!=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4075c7476cd1608c8c7f384fae9b08651d18a4c9" translate="yes" xml:space="preserve">
          <source>Int32#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d72d7dfd3185c69ea1b4adb363a7d043adf1fe" translate="yes" xml:space="preserve">
          <source>Int32#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63db2e9e5eb63c386b3e9886304db6ae0185df01" translate="yes" xml:space="preserve">
          <source>Int32#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a790f68105b37d6bec879910a2724484fb2873f8" translate="yes" xml:space="preserve">
          <source>Int32#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd4164714d97c02fa9a5b30f9dc7f436507a173" translate="yes" xml:space="preserve">
          <source>Int32#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c9b3dbb330728f8fb842c5187b6b44f255afe9" translate="yes" xml:space="preserve">
          <source>Int32#^</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9f882f40be19cbfa275d6465c7a2cd1d4143d3" translate="yes" xml:space="preserve">
          <source>Int32#|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180fcbe698d0f2c44101a06215c472930bbd0a01" translate="yes" xml:space="preserve">
          <source>Int64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22f5c57f3f28f66388d1a1bb671743594d00962" translate="yes" xml:space="preserve">
          <source>Int64#!=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb615a96ff19fc2e417afeb7d8f1e5389c0ed58" translate="yes" xml:space="preserve">
          <source>Int64#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f4200d7139d47ee4267ba8a1f111611fd68a06" translate="yes" xml:space="preserve">
          <source>Int64#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a048bf109a15b2fef5e3a443b44ce6df44443713" translate="yes" xml:space="preserve">
          <source>Int64#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d286f33385d9c7c16d334e089349476618bfaa1e" translate="yes" xml:space="preserve">
          <source>Int64#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f459af14f4da2a906631902aef19498e8631f1b3" translate="yes" xml:space="preserve">
          <source>Int64#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d37ed4a289e28472fa2950b09c01844d3f6a48" translate="yes" xml:space="preserve">
          <source>Int64#^</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff68b73826f573b3bc2380fa09a6d04ad3788de0" translate="yes" xml:space="preserve">
          <source>Int64#|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96d87d7c8b3dcfbd0b1d669a1f16d6b32c2a364" translate="yes" xml:space="preserve">
          <source>Int8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9139bedef204c2cb0b32f8500378365a93f127" translate="yes" xml:space="preserve">
          <source>Int8#!=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5649e931ffb56d92314ee734400dd3f6ad2a0b" translate="yes" xml:space="preserve">
          <source>Int8#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e23c5bf945549ee7b8d7f358f305d157268fde0" translate="yes" xml:space="preserve">
          <source>Int8#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c5e2d7be02b316e49148b15f0f9604bf958315" translate="yes" xml:space="preserve">
          <source>Int8#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8e144c20f228163b38065ffa493736438150c7" translate="yes" xml:space="preserve">
          <source>Int8#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3aedd9076452217fe05ce1a6994f8fe3cb7ec8" translate="yes" xml:space="preserve">
          <source>Int8#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724186007727dbbafaf2f2bbf2031c5314901dc2" translate="yes" xml:space="preserve">
          <source>Int8#^</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f538c6ff3ecfa6b3c72985c1de34c282a09febfd" translate="yes" xml:space="preserve">
          <source>Int8#|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1fa4361fb43ea84994dcb7c9f13a2bea0ba2f4" translate="yes" xml:space="preserve">
          <source>Int8.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309fee8187082f78425e5e7c6a0b5c8fec85b726" translate="yes" xml:space="preserve">
          <source>IntPredicate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d2d97eb493277f59670eb0ecba56dade5b89b8" translate="yes" xml:space="preserve">
          <source>IntPredicate#eq?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6dc2f39b130e14e868864c14f37e6399cfca7b7" translate="yes" xml:space="preserve">
          <source>IntPredicate#ne?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23327858be73ee78376de9e29ca4daaaeb774a8b" translate="yes" xml:space="preserve">
          <source>IntPredicate#sge?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e0109e6356c7488fab20a1a007c31c2dcaca76" translate="yes" xml:space="preserve">
          <source>IntPredicate#sgt?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f94f8cc70c0e6ea7a42aed58a8a12f4f443564" translate="yes" xml:space="preserve">
          <source>IntPredicate#sle?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e15d591b9866f7e368b7941f433e6a5783d6ba" translate="yes" xml:space="preserve">
          <source>IntPredicate#slt?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da463d8c03f71cfd9e05a7094f78f524e2453547" translate="yes" xml:space="preserve">
          <source>IntPredicate#uge?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616ea781e97a084fac07e94a955bef3588b14d3b" translate="yes" xml:space="preserve">
          <source>IntPredicate#ugt?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea766709ea2602f633912764e7eb7398b7a0ab37" translate="yes" xml:space="preserve">
          <source>IntPredicate#ule?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d5233ab5121da530682e630dea47d20552dce7" translate="yes" xml:space="preserve">
          <source>IntPredicate#ult?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724b5422dc05c791b8cf0befd732972c0409722e" translate="yes" xml:space="preserve">
          <source>Integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ff6add61075bc88dbed579e8ec292cb807f7db" translate="yes" xml:space="preserve">
          <source>Intermediate multiplication will wrap around silently in case of overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a182524348a8e585a50beb28f32c5dbeff8717be" translate="yes" xml:space="preserve">
          <source>Internally a symbol is represented as an &lt;code&gt;&lt;a href=&quot;int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt;, so it's very efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a6455c4971bd24c8ce79f996a088d36ba7cb1a" translate="yes" xml:space="preserve">
          <source>Internally, symbols are implemented as constants with a numeric value of type &lt;code&gt;Int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8561b0950c770bea073ea4bb33239c8d5abfd1d1" translate="yes" xml:space="preserve">
          <source>Internally, the compiler rewrites command literals to calls to the top-level method &lt;a href=&quot;https://crystal-lang.org/api/latest/toplevel.html#%60(command&quot;&gt;&lt;code&gt;`()&lt;/code&gt;&lt;/a&gt;:String-class-method) with a string literal containing the command as argument: &lt;code&gt;`echo #{argument}` &lt;/code&gt; and &lt;code&gt;%x(echo #{argument})&lt;/code&gt; are rewritten to &lt;code&gt;`(&quot;echo #{argument}&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e2d293daa9d8c84ee4d742cc245a7c4de2b1a7" translate="yes" xml:space="preserve">
          <source>Internally, the time is stored as an &lt;code&gt;&lt;a href=&quot;int64&quot;&gt;Int64&lt;/a&gt;&lt;/code&gt; representing seconds from epoch (&lt;code&gt;0001-01-01 00:00:00.0 UTC&lt;/code&gt;) and an &lt;code&gt;&lt;a href=&quot;int32&quot;&gt;Int32&lt;/a&gt;&lt;/code&gt; representing nanosecond-of-second with value range &lt;code&gt;0..999_999_999&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d774038263eef90e66a521a0124a4a6a5d6fe4ae" translate="yes" xml:space="preserve">
          <source>Interpolated strings are transformed by the compiler to append to a string IO so that it automatically avoids intermediate strings. The example above translates to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac1841fd698dde8b6be69a3e373fd857dc87713" translate="yes" xml:space="preserve">
          <source>Interpolates &lt;em&gt;other&lt;/em&gt; into the string using &lt;code&gt;Kernel#sprintf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8279ca448a0ab5697985d6ac3096ea1121f6590a" translate="yes" xml:space="preserve">
          <source>Interpolation can be disabled by escaping the &lt;code&gt;#&lt;/code&gt; character with a backslash or by using a non-interpolating string literal like &lt;code&gt;%q()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203dd8f222ef6ee7a0085ccde00e27f9606acbeb" translate="yes" xml:space="preserve">
          <source>Interpolation is implemented using a &lt;a href=&quot;http://crystal-lang.org/api/String/Builder.html&quot;&gt;String::Builder&lt;/a&gt; and invoking &lt;code&gt;Object#to_s(IO)&lt;/code&gt; on each expression enclosed by &lt;code&gt;#{...}&lt;/code&gt;. The expression &lt;code&gt;&quot;sum: #{a} + #{b} = #{a + b}&quot;&lt;/code&gt; is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e99587a630151c74d807401b256a84d8024138" translate="yes" xml:space="preserve">
          <source>Interpolation works in regular expression literals just as it does in &lt;a href=&quot;string&quot;&gt;string literals&lt;/a&gt;. Be aware that using this feature will cause an exception to be raised at runtime, if the resulting string results in an invalid regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e946dbbe87720ea29ef7eba132fed7777c7ec02e" translate="yes" xml:space="preserve">
          <source>Interpolation works in regular expression literals just as it does in string literals. Be aware that using this feature will cause an exception to be raised at runtime, if the resulting string would not be a valid regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35aec9dea1d5266672223745d817ff394e4b0339" translate="yes" xml:space="preserve">
          <source>Interprets this string as containing a sequence of hexadecimal values and decodes it as a slice of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b79b2978dc2b067cf00a9d08bb433b78da020b" translate="yes" xml:space="preserve">
          <source>Interprets this string as containing a sequence of hexadecimal values and decodes it as a slice of bytes. Two consecutive bytes in the string represent a byte in the returned slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4425f38834670c21aafe50ba6134b8282e16b90" translate="yes" xml:space="preserve">
          <source>Interrupted system call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd40ef5a82184e855e7d20253e995f84f3e72386" translate="yes" xml:space="preserve">
          <source>Intersection: returns a new set containing elements common to both sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ff4427a9f1fb0c18cbcdf6b26d6a2d22f2df2f" translate="yes" xml:space="preserve">
          <source>Invalid argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e51d1b0bad3a5c76a90346800ed0b9632bdf99" translate="yes" xml:space="preserve">
          <source>Invalid chars (in the range U+D800..U+DFFF) are encoded with the unicode replacement char value &lt;code&gt;0xfffd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d62df85231310e8d5fe78ea4e88593efd0006a9" translate="yes" xml:space="preserve">
          <source>Invalid values are encoded using the unicode replacement char with codepoint &lt;code&gt;0xfffd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d879133f90013d89c52a565c9cffb0c0ab147a5e" translate="yes" xml:space="preserve">
          <source>InvalidBigDecimalException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a11ef64e873369f79deae1dd1f6e621b52b9f5" translate="yes" xml:space="preserve">
          <source>InvalidBigDecimalException.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c98896354dcb37a5b41f0710d5ba593dc57415" translate="yes" xml:space="preserve">
          <source>InvalidByteSequenceError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b8312a80435648dbb3cfa519b4d587d62f61b8" translate="yes" xml:space="preserve">
          <source>InvalidByteSequenceError.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915701f62a525253f72f96eb63151564af9562c1" translate="yes" xml:space="preserve">
          <source>Inverts all bits in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aef6c40ab904b771c1629b9328deec25e336505" translate="yes" xml:space="preserve">
          <source>Inverts all bits in the array. Falses become &lt;code&gt;true&lt;/code&gt; and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d441ed4c58e304b58418ecca1ff23c31e41e9f0" translate="yes" xml:space="preserve">
          <source>Inverts keys and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28808e7e4a6b05374bcd974c6780e1cdb52e6947" translate="yes" xml:space="preserve">
          <source>Inverts keys and values. If there are duplicated values, the last key becomes the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a86efefc08f766779a7d5ac4fb5269e193aa28" translate="yes" xml:space="preserve">
          <source>Invoke this method on an &lt;code&gt;&lt;a href=&quot;../http/client&quot;&gt;HTTP::Client&lt;/a&gt;&lt;/code&gt; before executing an HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa3a51e95d32582d4da3b08fedb735c5b5aa9ca" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;at_exit&lt;/code&gt; handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84d499067fbb3e0a3de544ae02e145c98325eda" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;next&lt;/code&gt; on the wrapped iterator and returns &lt;code&gt;stop&lt;/code&gt; if the given value was a &lt;code&gt;&lt;a href=&quot;stop&quot;&gt;Iterator::Stop&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8ea797249046496cbd124627b2a1e6b67795c2" translate="yes" xml:space="preserve">
          <source>Invokes &lt;code&gt;next&lt;/code&gt; on the wrapped iterator and returns &lt;code&gt;stop&lt;/code&gt; if the given value was a &lt;code&gt;&lt;a href=&quot;stop&quot;&gt;Iterator::Stop&lt;/a&gt;&lt;/code&gt;. Otherwise, returns the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02438a065f28c4d5e07aa723e37693050f303a09" translate="yes" xml:space="preserve">
          <source>Invokes the block for each of the given &lt;em&gt;node&lt;/em&gt;s keys and values, resolving merge keys (&amp;lt;&amp;lt;) when found (keys and values of the resolved merge mappings are yielded, recursively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8385e16485f1cca3a2d76c65bc11828324e0163b" translate="yes" xml:space="preserve">
          <source>Invokes the block once for each row in this CSV, yielding &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d89efefe422c82462c7cb4c2e0b825e59a12272" translate="yes" xml:space="preserve">
          <source>Invokes the given &lt;em&gt;block&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e62acc6438fad58c6927a4c011279656eb56d2c" translate="yes" xml:space="preserve">
          <source>Invokes the given block for each element of &lt;code&gt;self&lt;/code&gt;, replacing the element with the value returned by the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8f503a8307bfbec2c26d9e33e8e1e0241b2889" translate="yes" xml:space="preserve">
          <source>Invokes the given block for each element of &lt;code&gt;self&lt;/code&gt;, replacing the element with the value returned by the block. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98cc1f99c2fd578cced906f6c13d1c71b294e1" translate="yes" xml:space="preserve">
          <source>Invokes the given block with each &lt;code&gt;&lt;a href=&quot;char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt; in this &lt;code&gt;&lt;a href=&quot;io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558f5f6ed4eaee763fc7be5b1cc4b683e83599a9" translate="yes" xml:space="preserve">
          <source>Invokes the given block with each &lt;em&gt;line&lt;/em&gt; in this &lt;code&gt;&lt;a href=&quot;io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;, where a line is defined by the arguments passed to this method, which can be the same ones as in the &lt;code&gt;&lt;a href=&quot;io#gets(delimiter:Char,limit:Int,chomp=false):String?-instance-method&quot;&gt;#gets&lt;/a&gt;&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b26383f6bb1af450d3fba7998fff022f698dc9a" translate="yes" xml:space="preserve">
          <source>Invokes the given block with each byte (&lt;code&gt;&lt;a href=&quot;uint8&quot;&gt;UInt8&lt;/a&gt;&lt;/code&gt;) in this &lt;code&gt;&lt;a href=&quot;io&quot;&gt;IO&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156490680a11be4dc17e176296871669bc11d53b" translate="yes" xml:space="preserve">
          <source>Invokes the given block with the sequence of numbers starting at &lt;code&gt;self&lt;/code&gt;, incremented by &lt;em&gt;by&lt;/em&gt; on each call, and with an optional &lt;em&gt;to&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45edf559d3bc6bb2c31eb962d2eee2e1b0ea107" translate="yes" xml:space="preserve">
          <source>Invokes this &lt;code&gt;&lt;a href=&quot;proc&quot;&gt;Proc&lt;/a&gt;&lt;/code&gt; and returns the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b673c6a72896107ce4c1c1720830db2d7090b84b" translate="yes" xml:space="preserve">
          <source>Invoking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b58236c28262a0145db427d2dce68ca8624e043" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;&lt;a href=&quot;pullparser#read_next:EventKind-instance-method&quot;&gt;#read_next&lt;/a&gt;&lt;/code&gt; reads the next event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a193eaed15e06b5adaf4d36c21d57d8bb6045b84" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;&lt;a href=&quot;reference#new-class-method&quot;&gt;.new&lt;/a&gt;&lt;/code&gt; on a &lt;code&gt;&lt;a href=&quot;reference&quot;&gt;Reference&lt;/a&gt;&lt;/code&gt; allocates a new instance on the heap. The instance's memory is automatically freed (garbage-collected) when the instance is no longer referred by any other entity in the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82b06adf1a876d702b6a3905d8d56b51827e40e" translate="yes" xml:space="preserve">
          <source>Is a directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53455c7c74fd74db45e82be0cf4bea5c8e068f2a" translate="yes" xml:space="preserve">
          <source>Is equivalent to this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0eda3fd7457c0fb4308b75d0bf6df3d4719aced" translate="yes" xml:space="preserve">
          <source>Is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebd5482f2fe3d68fca757b459cad0585790de2b" translate="yes" xml:space="preserve">
          <source>Is the same as writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc143ae2a93c710a2cfc98cc0ba68108d9eda5a6" translate="yes" xml:space="preserve">
          <source>It accepts multiple arguments, and the result is the union of the expression types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a4e799d99c7294806f559139d9db9702d615a9" translate="yes" xml:space="preserve">
          <source>It adds the number of months with overflow decreasing the year. If the resulting day-of-month would be invalid, it is adjusted to the last valid day of the moneth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d19cc2623700c513b188e3430e6fbfa3c1e3e4a" translate="yes" xml:space="preserve">
          <source>It adds the number of months with overflow increasing the year. If the resulting day-of-month would be invalid, it is adjusted to the last valid day of the moneth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e7ebd4c12aa41dd3dd3a73040cb0023d98db91" translate="yes" xml:space="preserve">
          <source>It can be useful to read ints and floats without losing precision, or to read an object and deserialize it later based on some condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3913f47304263c694a73a849afcd806e1fe1919a" translate="yes" xml:space="preserve">
          <source>It can respond to some methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0abefad6ac5edb54665e9b0bc20ad2c3b0cae5e" translate="yes" xml:space="preserve">
          <source>It compares the elements of both arrays in the same position using the &lt;code&gt;&lt;a href=&quot;array#(other:Array)-instance-method&quot;&gt;#&amp;lt;=&amp;gt;&lt;/a&gt;&lt;/code&gt; operator. As soon as one of such comparisons returns a non-zero value, that result is the return value of the comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2df94acaebb3f052ec0332272a9bd5125dcb80" translate="yes" xml:space="preserve">
          <source>It compares the elements of both slices in the same position using the &lt;code&gt;&lt;a href=&quot;slice#(other:Slice(U))forallU-instance-method&quot;&gt;#&amp;lt;=&amp;gt;&lt;/a&gt;&lt;/code&gt; operator. As soon as one of such comparisons returns a non-zero value, that result is the return value of the comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64aa730d9d744511cd0b0a8fb3b5954f779dc0ef" translate="yes" xml:space="preserve">
          <source>It compares using &lt;code&gt;&amp;gt;&lt;/code&gt; so it will work for any type that supports that method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a22f978ac64e7d513badd1fb3a7071a5bcaf62c" translate="yes" xml:space="preserve">
          <source>It compares using &lt;code&gt;&amp;gt;&lt;/code&gt; so the block must return a type that supports that method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c9d20a5502153269c963c849b822b83e292e5a" translate="yes" xml:space="preserve">
          <source>It compares using &lt;code&gt;&amp;lt;&lt;/code&gt; so it will work for any type that supports that method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885c6a11fa3aeee34c5898eb00aa7d7eca897dfb" translate="yes" xml:space="preserve">
          <source>It compares using &lt;code&gt;&amp;lt;&lt;/code&gt; so the block must return a type that supports that method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2f7e261c940c0d24f850f16e8b930367d6c442" translate="yes" xml:space="preserve">
          <source>It contains a list of zone offsets and rules for transitioning between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf4db640a5dabfdd27410bba064eed5f42177bc" translate="yes" xml:space="preserve">
          <source>It contains the &lt;code&gt;&lt;a href=&quot;zone#name:String-instance-method&quot;&gt;#name&lt;/a&gt;&lt;/code&gt;, hour-minute-second format (see &lt;code&gt;&lt;a href=&quot;zone#format(io:IO,with_colon=true,with_seconds=:auto)-instance-method&quot;&gt;#format&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;zone#offset:Int32-instance-method&quot;&gt;#offset&lt;/a&gt;&lt;/code&gt; in seconds and &lt;code&gt;&quot;DST&quot;&lt;/code&gt; if &lt;code&gt;&lt;a href=&quot;zone#dst?:Bool-instance-method&quot;&gt;#dst?&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;&quot;STD&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee3adb7e538057430c079ddf7809891f1e53ade" translate="yes" xml:space="preserve">
          <source>It expects the URI to include &lt;code&gt;&lt;scheme&gt;://&lt;/scheme&gt;&lt;/code&gt; where &lt;code&gt;scheme&lt;/code&gt; as well as any additional URI components (such as &lt;code&gt;fragment&lt;/code&gt; or &lt;code&gt;query&lt;/code&gt;) are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14bd2ffe2da93fef16cda1c33f9bcd51e0645d5" translate="yes" xml:space="preserve">
          <source>It expects the URI to include &lt;code&gt;&lt;scheme&gt;://&lt;host&gt;:&lt;/host&gt;&lt;/scheme&gt;&lt;/code&gt; where &lt;code&gt;scheme&lt;/code&gt; as well as any additional URI components (such as &lt;code&gt;path&lt;/code&gt; or &lt;code&gt;query&lt;/code&gt;) are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a595fe54697df1012f2586e134b6f1fae4d5f6cf" translate="yes" xml:space="preserve">
          <source>It has a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c24e36af14871b3d53eeac8703e7e91d7593f16" translate="yes" xml:space="preserve">
          <source>It has the same effect as writing &lt;code&gt;is_a?(Nil)&lt;/code&gt; but it's shorter and easier to read and write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a36866f0aaba4310877a1d4b4772c5da1f4b07d" translate="yes" xml:space="preserve">
          <source>It is a difference from &lt;code&gt;&lt;a href=&quot;matchdata#to_a-instance-method&quot;&gt;#to_a&lt;/a&gt;&lt;/code&gt; that the result array does not contain the match for the entire &lt;code&gt;&lt;a href=&quot;../regex&quot;&gt;Regex&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;self[0]&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c8d8e5bdb5904742399caf4e5bea65975e9705" translate="yes" xml:space="preserve">
          <source>It is a pseudo-method because it only accepts a symbol literal as its argument, and is also treated specially by the compiler, as explained in &lt;a href=&quot;if_varresponds_to&quot;&gt;if var.responds_to?(...)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b57860ae8c66522eccf8931742069c8809da815" translate="yes" xml:space="preserve">
          <source>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in &lt;a href=&quot;if_var_nil&quot;&gt;if var.nil?(...)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937a99e3a9fdce4c06e8a92d2e57f0d815b54bec" translate="yes" xml:space="preserve">
          <source>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in &lt;a href=&quot;if_varis_a&quot;&gt;if var.is_a?(...)&lt;/a&gt;. Also, it accepts a &lt;a href=&quot;type_grammar&quot;&gt;type&lt;/a&gt; that must be known at compile-time as its argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159f956badd281a8e32b6eaf96b75f8db1ca0b21" translate="yes" xml:space="preserve">
          <source>It is a type of message authentication code (MAC) involving a hash function in combination with a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb59b00a40f24088f1d8f23ca89cab9c5119f0c" translate="yes" xml:space="preserve">
          <source>It is also possible to bind a generic &lt;code&gt;&lt;a href=&quot;../socket/server&quot;&gt;Socket::Server&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;server#bind(socket:Socket::Server):Nil-instance-method&quot;&gt;#bind(socket : Socket::Server)&lt;/a&gt;&lt;/code&gt; which can be used for custom network protocol configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d119e59fb133e03d944b34c8efdd3041b1d8d3a6" translate="yes" xml:space="preserve">
          <source>It is created by enclosing an UTF-8 character in single quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a504fe621647db7eba2c16f92b9f776be6d075" translate="yes" xml:space="preserve">
          <source>It is encouraged to delete a tempfile after using it, which ensures they are not left behind in your filesystem until garbage collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a858ee4ba3877abdf058491e979bc86b9f765b9a" translate="yes" xml:space="preserve">
          <source>It is for convenience with using on &lt;code&gt;case&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f9cfd4ae4c989f3382c47847d1940ec9eb787e" translate="yes" xml:space="preserve">
          <source>It is functionally equivalent to &lt;code&gt;&lt;a href=&quot;methods#describe(description,file=__FILE__,line=__LINE__,end_line=__END_LINE__,focus:Bool=false,&amp;amp;block)-instance-method&quot;&gt;#describe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564df31c38824b71c71434a836be7a7e7b8c792b" translate="yes" xml:space="preserve">
          <source>It is generally recommended to keep instances in UTC and only apply a local time zone when formatting for user display, unless the domain logic requires having a specific time zone (for example for calendaric operations).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c775346f2939dec769906b9bc1a5335723d76575" translate="yes" xml:space="preserve">
          <source>It is implemented under the hood with &lt;a href=&quot;https://gmplib.org/&quot;&gt;GMP&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4b139867eccd18018e961b39e1273a93d49775" translate="yes" xml:space="preserve">
          <source>It is important to have in mind that if one of the operations fails then the final state would be inconsistent. So we need to execute the &lt;strong&gt;two operations&lt;/strong&gt; (deposit and withdraw) as &lt;strong&gt;one operation&lt;/strong&gt;. And if an error occurs then we would like to go back in time as if that one operation was never executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d427db589a10935ea6290aaa43929a1648b20aad" translate="yes" xml:space="preserve">
          <source>It is initially configured according to system environment settings, but its value can be changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b43129ae7c929430bf865127c986d6b053f16b" translate="yes" xml:space="preserve">
          <source>It is often used in generic code, to make use of the compiler's type inference capabilities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bd642c8a468e701cf996857ecd9cf03463815b" translate="yes" xml:space="preserve">
          <source>It is possible to define a macro which generates one or more macro definitions. You must escape macro expressions of the inner macro by preceding them with a backslash character &quot;\&quot; to prevent them from being evaluated by the outer macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17205b781b0b2cdfb7451d646dd1abd9036df89" translate="yes" xml:space="preserve">
          <source>It is possible to directly call methods on heredoc string literals, or use them inside parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13802aebfb819e9918605d1e0f2fddf9dd00b19" translate="yes" xml:space="preserve">
          <source>It is possible to make a custom RNG by including &lt;code&gt;&lt;a href=&quot;random&quot;&gt;Random&lt;/a&gt;&lt;/code&gt; and implementing &lt;code&gt;&lt;a href=&quot;random#next_u-instance-method&quot;&gt;#next_u&lt;/a&gt;&lt;/code&gt; to return an unsigned number of a pre-determined type (usually &lt;code&gt;&lt;a href=&quot;uint32&quot;&gt;UInt32&lt;/a&gt;&lt;/code&gt;). The numbers generated by your RNG must be uniformly distributed in the whole range of possible values for that type (e.g. &lt;code&gt;0u32..UInt32::MAX&lt;/code&gt;). This allows all other methods of &lt;code&gt;&lt;a href=&quot;random&quot;&gt;Random&lt;/a&gt;&lt;/code&gt; to be based on this and still produce uniformly distributed results. Your &lt;code&gt;&lt;a href=&quot;random&quot;&gt;Random&lt;/a&gt;&lt;/code&gt; class should also have a way to initialize it. For pseudo-random number generators that will usually be an integer seed, but there are no rigid requirements for the initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a32de1d0907515530fd1d90acb3378a4eb2462b" translate="yes" xml:space="preserve">
          <source>It is recommended to use a secure source, such as &lt;code&gt;&lt;a href=&quot;random/secure&quot;&gt;Random::Secure&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;random/isaac&quot;&gt;Random::ISAAC&lt;/a&gt;&lt;/code&gt; or ChaCha20 for anything that needs security, such as online games, identification tokens, salts, initializing a PRNG, ... These PRNG are slower but cryptographically secure, so a third party can't deduce incoming numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae83b2915e1a4466f14ff7ff6bb1f15cebfb925" translate="yes" xml:space="preserve">
          <source>It is recommended to use the secure &lt;code&gt;&lt;a href=&quot;random/secure&quot;&gt;Random::Secure&lt;/a&gt;&lt;/code&gt; as a source or another cryptographically quality PRNG such as &lt;code&gt;&lt;a href=&quot;random/isaac&quot;&gt;Random::ISAAC&lt;/a&gt;&lt;/code&gt; or ChaCha20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f040c1cfc8994c9d56e7ac0117cadc647caeec" translate="yes" xml:space="preserve">
          <source>It is strongly recommended to use a cryptographically random source for &lt;em&gt;random&lt;/em&gt;, such as &lt;code&gt;&lt;a href=&quot;random/secure&quot;&gt;Random::Secure&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6ac9f1048cf822d468cd15e661673e36ae88d2" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to remove the file when no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8edaca6788c7c913ff2a8beb35d142e0febf69" translate="yes" xml:space="preserve">
          <source>It is the only zone offset used in &lt;code&gt;&lt;a href=&quot;../location#UTC&quot;&gt;Time::Location::UTC&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc04793196384156ba81caa2f1399203a06d06b" translate="yes" xml:space="preserve">
          <source>It is typically created with a char literal by enclosing an UTF-8 character in single quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167d5320042ed31381da530503f6ac23afa57bb8" translate="yes" xml:space="preserve">
          <source>It is usually used inside a &lt;code&gt;&lt;a href=&quot;methods#describe(description,file=__FILE__,line=__LINE__,end_line=__END_LINE__,focus:Bool=false,&amp;amp;block)-instance-method&quot;&gt;#describe&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;methods#context(description,file=__FILE__,line=__LINE__,end_line=__END_LINE__,focus:Bool=false,&amp;amp;block)-instance-method&quot;&gt;#context&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5073dd9e365b46368647b27c355fe6170f4f9ff7" translate="yes" xml:space="preserve">
          <source>It is valid to pass &lt;code&gt;&lt;a href=&quot;string#bytesize:Int32-instance-method&quot;&gt;#bytesize&lt;/a&gt;&lt;/code&gt; to &lt;em&gt;index&lt;/em&gt;, and in this case the answer will be the size of this string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493a4de947e7d1d3de0e26cd7b606a362a97a832" translate="yes" xml:space="preserve">
          <source>It is valid to pass &lt;code&gt;&lt;a href=&quot;string#size-instance-method&quot;&gt;#size&lt;/a&gt;&lt;/code&gt; to &lt;em&gt;index&lt;/em&gt;, and in this case the answer will be the bytesize of this string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23adbd354ecbde6eb0ab83184916b8c2916f8ab2" translate="yes" xml:space="preserve">
          <source>It manages dependencies for Crystal projects and libraries with reproducible installs across computers and systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449ff91ee23573155e7d4a0e39db55c0b1700016" translate="yes" xml:space="preserve">
          <source>It may contain non-ASCII bytes, including NUL bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fdb45f3edc2b0d0cf9249c0e92699e387f4432" translate="yes" xml:space="preserve">
          <source>It provides constants for the defined HTTP status codes as well as helper methods to easily identify the type of response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78714368442c6514c207f75da6d297b10e34ace6" translate="yes" xml:space="preserve">
          <source>It receives an optional &lt;code&gt;StringLiteral&lt;/code&gt; as single argument containing a deprecation notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf197db26f12c9c2de1086aeebd1ad7308d08664" translate="yes" xml:space="preserve">
          <source>It returns a copy of this instance if it already has POSIX kind. Otherwise a new instance is created with &lt;code&gt;&lt;a href=&quot;path/kind#POSIX&quot;&gt;Kind::POSIX&lt;/a&gt;&lt;/code&gt; and all occurences of backslash file separators (&lt;code&gt;\\&lt;/code&gt;) replaced by forward slash (&lt;code&gt;&lt;a href=&quot;path#/(part:Path%7CString):Path-instance-method&quot;&gt;#/&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9495c2413e841c571d654c5194a0eb85e3b84f" translate="yes" xml:space="preserve">
          <source>It returns the rescued exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c027793c4fcbf7f7be6aed911c23cf2d476fffe0" translate="yes" xml:space="preserve">
          <source>It returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5497a697168334130e08eb2adbeb0c076753e7ac" translate="yes" xml:space="preserve">
          <source>It rounds the number to the nearest thousands magnitude with &lt;em&gt;precision&lt;/em&gt; number of significant digits. The order of magnitude is expressed with an appended quantifier. By default, SI prefixes are used (see &lt;code&gt;&lt;a href=&quot;number#SI_PREFIXES&quot;&gt;SI_PREFIXES&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18d9b5d8b79b72fafcd7ca5abdfcee3fc0cc37c" translate="yes" xml:space="preserve">
          <source>It serves both to perform requests by an &lt;code&gt;&lt;a href=&quot;client&quot;&gt;HTTP::Client&lt;/a&gt;&lt;/code&gt; and to represent requests received by an &lt;code&gt;&lt;a href=&quot;server&quot;&gt;HTTP::Server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7049c154fa6f27376835c94cf2fd87ee45c09e2" translate="yes" xml:space="preserve">
          <source>It takes named arguments, a named tuple literal or a hash literal as argument, in which attributes and types are defined. Once defined, &lt;code&gt;&lt;a href=&quot;object#from_yaml(string_or_io:String%7CIO):self-class-method&quot;&gt;Object#from_yaml&lt;/a&gt;&lt;/code&gt; populates properties of the class from the YAML document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac5ab36bbcd609f08d13ddb13ccc42fbb6ba0cb" translate="yes" xml:space="preserve">
          <source>It usually consists of a continent and city name separated by a slash, for example &lt;code&gt;Europe/Berlin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e688c3ec268b37e21ee8bbf51b03c4f3fc6affd8" translate="yes" xml:space="preserve">
          <source>It's also possible to change the text decoration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0455648ab1162c692f5930d431e16bf57083cb" translate="yes" xml:space="preserve">
          <source>It's an error specifying more block arguments than those yielded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6883cf46102cc538a015336c0491ab0512234fae" translate="yes" xml:space="preserve">
          <source>It's fine to have your own style, but sticking to &lt;a href=&quot;../conventions/coding_style&quot;&gt;some core rubrics defined by the Crystal team&lt;/a&gt; can help keep your code consistent, readable and usable for other developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60587587f639b7c4e503898074105495d5fe3e4c" translate="yes" xml:space="preserve">
          <source>It's good practice to do GitHub Releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5876e4db9f1889238b8f42d10ed6f9752e75963c" translate="yes" xml:space="preserve">
          <source>It's hard for anyone to use your project if they can't find it. &lt;a href=&quot;https://crystalshards.xyz/&quot;&gt;crystalshards.xyz&lt;/a&gt; is currently the go-to place for Crystal libraries, so that's what we'll optimize for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56afe37629c80637e20b023cc788f813c83b45cc" translate="yes" xml:space="preserve">
          <source>It's macro methods are the same as &lt;code&gt;&lt;a href=&quot;arrayliteral&quot;&gt;ArrayLiteral&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f28846369c72b7284ecf0cba91626ba4bfab2c" translate="yes" xml:space="preserve">
          <source>It's possible to send a PING frame, which the client must respond to with a PONG, or the server can send an unsolicited PONG frame which the client should not respond to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231347e530baf0c7c4425dc74499994820ba5f6c" translate="yes" xml:space="preserve">
          <source>It's the opposite of &lt;code&gt;&lt;a href=&quot;enumerable#all?(&amp;amp;block)-instance-method&quot;&gt;#all?&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ca6a3da933ca6826a2f4d3fcc919af71d7e380" translate="yes" xml:space="preserve">
          <source>Iterable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21855f7001acdc97654d5a2c2abb5f3919a52a83" translate="yes" xml:space="preserve">
          <source>Iterable#each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cee6129111866e425b821724e81eac09e86ecd8" translate="yes" xml:space="preserve">
          <source>Iterable(B)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6de4230c85208856db75cca457616e4f81ae48" translate="yes" xml:space="preserve">
          <source>Iterable(T)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da99d66ecc6e9b83d3c1331105b9a4ead856a295" translate="yes" xml:space="preserve">
          <source>Iterable({K, V})</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801351cc068c434ed200af6fbfd20b18162b4e4a" translate="yes" xml:space="preserve">
          <source>Iterates each member of the enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fba05dd79033eb190f672f6d386739c8d872be" translate="yes" xml:space="preserve">
          <source>Iterates each member of the enum. It won't iterate the &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;All&lt;/code&gt; members of flags enums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c6894cc6e51e490a6ebf1212dbe54f16948393" translate="yes" xml:space="preserve">
          <source>Iterates each values in a Flags Enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d5090413ecc016fc08697af8c43ee36ed32aa5" translate="yes" xml:space="preserve">
          <source>Iterates over all &lt;code&gt;KEY=VALUE&lt;/code&gt; pairs of environment variables, yielding both the &lt;em&gt;key&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b1d9ca8566c25f29a89572a5ef9c83d35b6070" translate="yes" xml:space="preserve">
          <source>Iterates over the collection in slices of size &lt;em&gt;count&lt;/em&gt;, and runs the block for each of those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9434f35e1f5f4333a4fdfd22e95dadb99cea4150" translate="yes" xml:space="preserve">
          <source>Iterates over the collection yielding chunks of size &lt;em&gt;count&lt;/em&gt;, but advancing one by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3203cc17231cf37624d0f5aea4a82be1f2b777" translate="yes" xml:space="preserve">
          <source>Iterates over the collection, passing each element and the initial object &lt;em&gt;obj&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c07aa61b9e3bbd1a7513ac7002fafeef65f3e3" translate="yes" xml:space="preserve">
          <source>Iterates over the collection, passing each element and the initial object &lt;em&gt;obj&lt;/em&gt;. Returns that object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be626cd2843ed4e65e3be982133d99c50840328" translate="yes" xml:space="preserve">
          <source>Iterates over the collection, yielding both the elements and their index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da696b666cf9e80879bb77507bdec0e9053bbe98" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of this range in reverse order, passing each in turn to the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458662c0cf3d4f48e3590d5e232c0feb69bc6bfd" translate="yes" xml:space="preserve">
          <source>Iterates over the elements of this range, passing each in turn to the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a1c576cff75174b984f38bd74d03ebdffdc135" translate="yes" xml:space="preserve">
          <source>Iterates over this range, passing each nth element to the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cac53ebd6210e9b26809ca3d2e05daf9a3acf9f" translate="yes" xml:space="preserve">
          <source>Iterating strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8809b2429231a50c28ba87cecc038aac88855" translate="yes" xml:space="preserve">
          <source>Iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81008a1d5603847c92ae6ec8f5c8beee1b025f88" translate="yes" xml:space="preserve">
          <source>Iterator#cons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fc7977dd2976eff1cac89908bf603d719d2328" translate="yes" xml:space="preserve">
          <source>Iterator#each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d09fd8578cf22aed8e798bc7e4b7e569bb2dd01" translate="yes" xml:space="preserve">
          <source>Iterator#map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eacb03f472cc021031d0c7d999df0406a28e2b6" translate="yes" xml:space="preserve">
          <source>Iterator#next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0d92d49d483fa2962c2e91898e4fc7eb7e6a0d" translate="yes" xml:space="preserve">
          <source>Iterator#skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4528dbc0009d2105dbd09970dc1a51ff877f04" translate="yes" xml:space="preserve">
          <source>Iterator#step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10880ed735aa8f0eb23bf19eb29ba54180e18a87" translate="yes" xml:space="preserve">
          <source>Iterator#stop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22099b9f07c141f8c7dbaf911190abad9e6641d7" translate="yes" xml:space="preserve">
          <source>Iterator#tap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472fb70214809a7170e15a9eb4969ff6ad0aa3be" translate="yes" xml:space="preserve">
          <source>Iterator#uniq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1df69ea7687d308728ef15cb7f4d54d76052c75" translate="yes" xml:space="preserve">
          <source>Iterator#zip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a6f7690d3f67a5c2a34fb79ce33a081d403ded" translate="yes" xml:space="preserve">
          <source>Iterator(T)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb09d01284857f13b83a78fb893791b953d86861" translate="yes" xml:space="preserve">
          <source>Iterator.of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4897718268df751c4f61583a5f4fae0a77d463f7" translate="yes" xml:space="preserve">
          <source>Iterator.stop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5674e76e082100f7018e4be02db322d282a31e82" translate="yes" xml:space="preserve">
          <source>Iterator::Stop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbea495944c028a03d60c813a69f24633c27700" translate="yes" xml:space="preserve">
          <source>IteratorWrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe3f404cb6e226371e69d371c8303dc1253de6e" translate="yes" xml:space="preserve">
          <source>IteratorWrapper wrapped_next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84785865f5c1faf41f21bb5b59c8153b605867e" translate="yes" xml:space="preserve">
          <source>Its first argument changes the foreground color:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d552b9b23b8db34ab12baac8aba7d28f7e24e77c" translate="yes" xml:space="preserve">
          <source>JITCompiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0b16b267f4986b5cc2b0091ccc5e13a11f2a3a" translate="yes" xml:space="preserve">
          <source>JITCompiler#dispose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72492aa85a3aa9a50bf31b81058a39e271717d3a" translate="yes" xml:space="preserve">
          <source>JITCompiler#finalize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79734fbfe144e716e2047fbdcec07f81863cda76" translate="yes" xml:space="preserve">
          <source>JITCompiler#get_pointer_to_global</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d57741ee7b281945d9ff1b2b50a218d841c3e82" translate="yes" xml:space="preserve">
          <source>JITCompiler#run_function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb79308d799296c6df78ec46f77ca99f13a10b8a" translate="yes" xml:space="preserve">
          <source>JITCompiler#to_unsafe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311eb8d84ee8573f9143997f47e5d0bfd987ab46" translate="yes" xml:space="preserve">
          <source>JITCompiler.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d57aff05d797dfa147cf5d55dc71690f4221e62" translate="yes" xml:space="preserve">
          <source>JSON key-value pairs that are outside of the OAuth2 spec are stored in this property in case they are needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bddeceaa4a22fc72d98fda9a69be516973be25" translate="yes" xml:space="preserve">
          <source>JSON key-value pairs that are outside of the OAuth2 spec are stored in this property in case they are needed. Their value is the raw JSON string found in the JSON value (with possible changes in the string format, but preserving JSON semantic). For example if the value was &lt;code&gt;[1, 2, 3]&lt;/code&gt; then the value in this hash will be the string &quot;[1,2,3]&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03b0b78981bc28291880680db9f0f18c219bd56" translate="yes" xml:space="preserve">
          <source>JSON::Any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1adf47961de54bd3ef64648aab56e21d5a5a448" translate="yes" xml:space="preserve">
          <source>JSON::Builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdb133c62b94222b3c6a6c8ade57450226f2207" translate="yes" xml:space="preserve">
          <source>JSON::Builder::ArrayState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadaf0adfab09753ab4e070c66630e979e4d00d4" translate="yes" xml:space="preserve">
          <source>JSON::Builder::DocumentEndState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a0ffddeeb72ee2b3b9d7656e14ba6de3c07751" translate="yes" xml:space="preserve">
          <source>JSON::Builder::DocumentStartState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cac541a839de8f5e97339e955aa3b9ad4ef0bea" translate="yes" xml:space="preserve">
          <source>JSON::Builder::ObjectState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9863ca26568c54b73d4b0ad14b34a946d34392b" translate="yes" xml:space="preserve">
          <source>JSON::Builder::StartState</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3cf54a7bf262de75716747fb1438e03ab612ba" translate="yes" xml:space="preserve">
          <source>JSON::Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e652e0d3c0b8150e0896d321b55ba31e274be02b" translate="yes" xml:space="preserve">
          <source>JSON::Field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01136816887cd3b845c84deb7784651dd3b84657" translate="yes" xml:space="preserve">
          <source>JSON::Lexer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797a5912c907c727c595cef1d9575f6d23188e9b" translate="yes" xml:space="preserve">
          <source>JSON::MappingError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721586a408a2497bff3cd650e2605d74da972249" translate="yes" xml:space="preserve">
          <source>JSON::MappingError#attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827858537c6bb3e59add58f5024b4145e2a57531" translate="yes" xml:space="preserve">
          <source>JSON::MappingError#klass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de52742aca88c5feaa2c4685fa1a0d45b5d68cd8" translate="yes" xml:space="preserve">
          <source>JSON::MappingError.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdf5bca0c244ac7e53965d2d0d78ecda0bfed5a" translate="yes" xml:space="preserve">
          <source>JSON::ParseException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ce61553a6ba7e71a3b50c4fb7b2cf6948078fb" translate="yes" xml:space="preserve">
          <source>JSON::ParseException#column_number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6401ae902008000da859ed79005abc01081a3c" translate="yes" xml:space="preserve">
          <source>JSON::ParseException#line_number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebbb48f13498878568266f0ef1b277f28f1ccfe" translate="yes" xml:space="preserve">
          <source>JSON::ParseException#location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2208ef37acaa079038ca9ea777f2ede2c2066b" translate="yes" xml:space="preserve">
          <source>JSON::ParseException.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210f49994dc8b74d5f6f6caa864a330c6dce7240" translate="yes" xml:space="preserve">
          <source>JSON::Parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad1aa2e616c4804e9d57f2514a1a45c64dbe51c" translate="yes" xml:space="preserve">
          <source>JSON::PullParser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49957832dc2d365f32502d561e3e415cd7a1ec72" translate="yes" xml:space="preserve">
          <source>JSON::Token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd72869a330087cfe42486d0e37438efc054165a" translate="yes" xml:space="preserve">
          <source>Just like a class or a struct, you can define methods for enums:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76f97582b9cefc13e0faeb17d594f0bfca9056d" translate="yes" xml:space="preserve">
          <source>Just like the other variant, but you can set the initial value of the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6526cb0b460c5757c8a3173eb88b61dc53862a" translate="yes" xml:space="preserve">
          <source>Keeps &lt;em&gt;digits&lt;/em&gt; significants digits of this number in the given &lt;em&gt;base&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdc7b1b69ed74ff1eefeeee6ac727cbf6c876e4" translate="yes" xml:space="preserve">
          <source>Key/value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374e8590be500826c7d343cb59fec0f206c2c523" translate="yes" xml:space="preserve">
          <source>KeyBindingProc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74018238351de8a4b5f41ef51f98e3f2c94d5837" translate="yes" xml:space="preserve">
          <source>KeyError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9534d70e7d02c74e1866ae136e1dcf1d8544f1" translate="yes" xml:space="preserve">
          <source>Keys are read by invoking &lt;code&gt;from_json_object_key?&lt;/code&gt; on this hash's key type (&lt;code&gt;K&lt;/code&gt;), which must return a value of type &lt;code&gt;K&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;. If &lt;code&gt;nil&lt;/code&gt; is returned a &lt;code&gt;&lt;a href=&quot;json/parseexception&quot;&gt;JSON::ParseException&lt;/a&gt;&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9273383ae64df8f1b372db98ea4ba08b59acfdfd" translate="yes" xml:space="preserve">
          <source>Keys are serialized by invoking &lt;code&gt;to_json_object_key&lt;/code&gt; on them. Values are serialized with the usual &lt;code&gt;&lt;a href=&quot;hash#to_json(json:JSON::Builder)-instance-method&quot;&gt;#to_json(json : JSON::Builder)&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa19a4d11de40b1f70b3c8ba4d213213a811bcf" translate="yes" xml:space="preserve">
          <source>Kind#posix?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69613af46fdb432e68c2d836af22b13ef5d076b" translate="yes" xml:space="preserve">
          <source>Kind#windows?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e81f8da9bf20ac68903b79eb88468c315f82796" translate="yes" xml:space="preserve">
          <source>Kind.native</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a230d4a66845b14c7d2a6ab825e82549a7f4cacc" translate="yes" xml:space="preserve">
          <source>LLVM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af7dc24d98dd6ad5792635bf314908d01227cf0" translate="yes" xml:space="preserve">
          <source>LLVM &amp;gt;= 3.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2abeff0b40a905438fb436921d6fdbd12f6683b" translate="yes" xml:space="preserve">
          <source>LLVM::ABI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b766dab78d8a3849c9852bff63fcb4cf9cc0088e" translate="yes" xml:space="preserve">
          <source>LLVM::ABI::AArch64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c51725babc80b06ecf0b438efafec38e415c927" translate="yes" xml:space="preserve">
          <source>LLVM::ABI::ARM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdc65111d34329f104b994fc1fb855f89682195" translate="yes" xml:space="preserve">
          <source>LLVM::ABI::ArgType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09356d92c80cefad0a6321582019e14f8e01ee55" translate="yes" xml:space="preserve">
          <source>LLVM::ABI::FunctionType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4829151c4b849aedaa7a10548809b0ad7b75ce94" translate="yes" xml:space="preserve">
          <source>LLVM::ABI::X86</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f25225754920d4a1ea64cf822ea0ef993172c0" translate="yes" xml:space="preserve">
          <source>LLVM::ABI::X86_64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae02234332e344344478a943eab21acf56e4737d" translate="yes" xml:space="preserve">
          <source>LLVM::BasicBlock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29188390719576a8d4f11a342f95e8dbd581966" translate="yes" xml:space="preserve">
          <source>LLVM::BasicBlockCollection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd541bb453e01e94ab2b4ff07cdfa0a07562bb09" translate="yes" xml:space="preserve">
          <source>LLVM::Builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8fe2ec04763a3ab9a798d7d4efc79aacdb58d0" translate="yes" xml:space="preserve">
          <source>LLVM::Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fffe33531b85b6f48117e62feddbdf800353410" translate="yes" xml:space="preserve">
          <source>LLVM::DIBuilder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf548c237a6d5ea0bb18ad43b9b65f9fa894dba" translate="yes" xml:space="preserve">
          <source>LLVM::Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6621c84105b48844ec9324cf1fb84fdb37b31190" translate="yes" xml:space="preserve">
          <source>LLVM::FunctionCollection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed14b6eb0f4552291cb0ab0ebe117da7efb45038" translate="yes" xml:space="preserve">
          <source>LLVM::FunctionPassManager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a0fb0a2199587b41a2e1e6f17100d11fd95979" translate="yes" xml:space="preserve">
          <source>LLVM::FunctionPassManager::Runner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac89a453d6b08a7577122c56c9f9f1592e821f44" translate="yes" xml:space="preserve">
          <source>LLVM::GenericValue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3e75248eead55c4202f56ec54495147805cc29" translate="yes" xml:space="preserve">
          <source>LLVM::GlobalCollection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393c3f73ef484e17fde9d3c73cb7b6f6f08266e5" translate="yes" xml:space="preserve">
          <source>LLVM::InstructionCollection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a066b2ca2f3ff68781c61079da5421404dff0a48" translate="yes" xml:space="preserve">
          <source>LLVM::JITCompiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de3159c833534a9499829fdf0ad3280667eea95" translate="yes" xml:space="preserve">
          <source>LLVM::MemoryBuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9270784a5808612d3ec037faabe2038e05ead4" translate="yes" xml:space="preserve">
          <source>LLVM::Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc82c0d85aba9dbaaa08d405a37edc3162bc171" translate="yes" xml:space="preserve">
          <source>LLVM::ModulePassManager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1448363d392bf598bbf97378d8a386bcd04ef4" translate="yes" xml:space="preserve">
          <source>LLVM::OperandBundleDef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956235bca106eedaf580949906ac9c6f57731208" translate="yes" xml:space="preserve">
          <source>LLVM::ParameterCollection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d0bebbe164b8bdd16ced8f7488b3d8c649721a" translate="yes" xml:space="preserve">
          <source>LLVM::PassManagerBuilder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c61b5f2a89714eb0659fe1992bf622f2452967" translate="yes" xml:space="preserve">
          <source>LLVM::PassRegistry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b13ec41e86348fbe7909e8577f197220cf10401" translate="yes" xml:space="preserve">
          <source>LLVM::PhiTable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18075df1669f42f9f5effd0a10595cc84567b0c" translate="yes" xml:space="preserve">
          <source>LLVM::Target</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03315d96615d63549abab276ebf6e19e4b7fafa9" translate="yes" xml:space="preserve">
          <source>LLVM::TargetData</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43adbe9208215fa82eb0c49d2516c520521f730d" translate="yes" xml:space="preserve">
          <source>LLVM::TargetMachine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4435490dc71b864b5f1be05d0c067fa0fa8cc247" translate="yes" xml:space="preserve">
          <source>LLVM::Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a1fc9564534676203ce56efde2241940a9de04" translate="yes" xml:space="preserve">
          <source>LLVM::Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac35358baf271447fca4ff816a9dd24f1374708" translate="yes" xml:space="preserve">
          <source>LLVM::ValueMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef711f499820bd0a8a57e7a5c521593ec8ed715" translate="yes" xml:space="preserve">
          <source>Label of the benchmark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd623c775a7a5517ed0d06b451021da5bb73103f" translate="yes" xml:space="preserve">
          <source>Largest finite value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4fc789599fd69c0acb9650f814c9bbb7b2b398" translate="yes" xml:space="preserve">
          <source>Last but not least: beware of denial of services! Always protect your application using an external strategy (eg: rate limiting), otherwise endpoints that verifies bcrypt hashes will be an easy target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51ec4cbdbdfc04b448fdf9ea52e70612175fa0c" translate="yes" xml:space="preserve">
          <source>Lazily parses and returns the request's query component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd3aa1501cd5cbcf47947cfc545f8ba6fd82061" translate="yes" xml:space="preserve">
          <source>Leading whitespace is removed from the heredoc contents according to the number of whitespace in the last line before the heredoc identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123cb4c4e46ae282f59fafcfeae7c6e5cfc15c01" translate="yes" xml:space="preserve">
          <source>Let's compare the times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886d581a78cba947c2d8f7c84814775c5fe3c38f" translate="yes" xml:space="preserve">
          <source>Let's start with two examples to familiarize ourselves with the language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87aa8b80dc98b7bb76b6b2e0e83be6b8c0fce3a4" translate="yes" xml:space="preserve">
          <source>Lets make John's pet talk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be58065827c0c55029971feac76d75af08b2cc3" translate="yes" xml:space="preserve">
          <source>Levenshtein</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bdb0a040e6326fe99352351cb5a72ae82951e2" translate="yes" xml:space="preserve">
          <source>Levenshtein.find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d3fb39c961676e87e1ad81ac552a3e8624c5d7" translate="yes" xml:space="preserve">
          <source>Levenshtein::Finder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71415841f8065930f7d2a88f2d0b4434a4d73d7" translate="yes" xml:space="preserve">
          <source>Levensthein distance methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f7e7b6ae00ba207bdd95defa89166fdde8de12" translate="yes" xml:space="preserve">
          <source>Lexer#next_token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c835f60dfef3e0dc43c16046597c09c589c5df1e" translate="yes" xml:space="preserve">
          <source>Lexer#next_token_expect_object_key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdb0913c50d36a5d6113a67ec143018a18fc175" translate="yes" xml:space="preserve">
          <source>Lexer#quote_char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ef6e55f3ac361c61aa7871911d6741a3086852" translate="yes" xml:space="preserve">
          <source>Lexer#separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5277f79ab983c4a072554a025ec478aaaddbaf" translate="yes" xml:space="preserve">
          <source>Lexer#skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e105c6842c2063736af156635ff50582ece60fa0" translate="yes" xml:space="preserve">
          <source>Lexer#skip=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7aaa7b80cfc45d8c6329b93360488b1613ba36b" translate="yes" xml:space="preserve">
          <source>Lexer#token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52df2c0d6f1b1d56be28fd240ab8aa8a54fd27f9" translate="yes" xml:space="preserve">
          <source>Lexer.new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1736d56ad06476934c60a388b3520d14f71bc9ba" translate="yes" xml:space="preserve">
          <source>Library authors are advised to put their definitions inside a module to avoid name clashes. The standard library usually doesn't have a namespace as its types and methods are very common, to avoid writing long names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cec90d9a893d7a57df44cadf9f6412918df9f79" translate="yes" xml:space="preserve">
          <source>Libs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec793eb7fd1d6c9106d97e622f4fcbf89e666960" translate="yes" xml:space="preserve">
          <source>Licensed under the Apache License, Version 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8117333c848ceead3cf2ebcb9fc60d67cffa76d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;#[Int, &lt;a href=&quot;int&quot;&gt;Int&lt;/a&gt;]&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the &lt;em&gt;start&lt;/em&gt; index is out of range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2faa49a404924168ec0283364b105bd8c0330c8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;#[Range(Int, Int)]&lt;/code&gt;, but returns &lt;code&gt;nil&lt;/code&gt; if the range's start is out of range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b0a77e7fe1e4d57e1280f673c49ca884a7d8aa" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;array#map_with_index(&amp;amp;block:T,Int32-%3EU)forallU-instance-method&quot;&gt;#map_with_index&lt;/a&gt;&lt;/code&gt;, but mutates &lt;code&gt;self&lt;/code&gt; instead of allocating a new object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346a17ea65928aff9e81a09c1d95b67671239e11" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;array#pop-instance-method&quot;&gt;#pop&lt;/a&gt;&lt;/code&gt;, but returns &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;self&lt;/code&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8cc9372a289d46319628a9617c0da3c012db0a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#map(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#map&lt;/a&gt;&lt;/code&gt;, but the block gets passed both the element and its index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d4df9a262f8b1fae59a90027c24b2dc6d1d8bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#max-instance-method&quot;&gt;#max&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75abf028c2e38794417e1070ec656a09c94d5eb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#max_by(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#max_by&lt;/a&gt;&lt;/code&gt; but instead of the element, returns the value returned by the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63714128e187f2e2322343d88891641f3f00f23" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#max_by(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#max_by&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c86e3406468d6c564bf76ebd45854e71bc7fd0c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#max_of(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#max_of&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7da451a3d9cabf9666f07d7cb73d6efc4df6953" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#min-instance-method&quot;&gt;#min&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265fb96f4b74ee827b45d8fa453731f3cce961d6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#min_by(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#min_by&lt;/a&gt;&lt;/code&gt; but instead of the element, returns the value returned by the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84267a8bca46b3f94996ecb9cd973e3b697ab036" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#min_by(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#min_by&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5963f7939b92a2a486153c5e028d3675187397f3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#min_of(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#min_of&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;nil&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39fb794a9708a0d7d9e6770c8d432ff720df4d2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#minmax-instance-method&quot;&gt;#minmax&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;{nil, nil}&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d982ce4ddb66cf7a172a0239c0aaee464fe55339" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#minmax_by(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#minmax_by&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;{nil, nil}&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d93b083798cdbaaf8779491b12058b21032e155" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;enumerable#minmax_of(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#minmax_of&lt;/a&gt;&lt;/code&gt; but returns &lt;code&gt;{nil, nil}&lt;/code&gt; if the collection is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e9b9dc0bd6353a13f759605d875a2c0f075775" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;fileutils#ln_s(src_path:String,dest_path:String)-instance-method&quot;&gt;#ln_s(String, String)&lt;/a&gt;&lt;/code&gt;, but overwrites &lt;code&gt;dest_path&lt;/code&gt; if it exists and is not a directory or if &lt;code&gt;dest_path/src_path&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e94c88068363130679488e131c5abe836a992f2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;pointer#map!(count:Int,&amp;amp;block)-instance-method&quot;&gt;#map!&lt;/a&gt;&lt;/code&gt;, but yields 2 arguments, the element and its index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679ed74cfac9efaa8d9335840342ca632499af3a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;slice#map!(&amp;amp;block)-instance-method&quot;&gt;#map!&lt;/a&gt;&lt;/code&gt;, but the block gets passed both the element and its index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e0a16329eda10d56c1a55d48bb407facab7dec" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;slice#map(*,read_only=false,&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#map&lt;/a&gt;&lt;/code&gt;, but the block gets passed both the element and its index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f413abfd5dd5cf833951eb503f2372b65800280" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;staticarray#map!(&amp;amp;block)-instance-method&quot;&gt;#map!&lt;/a&gt;&lt;/code&gt;, but the block gets passed both the element and its index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22bc19984fc88a105b365c1c07008c58bef2c8a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;staticarray#map(&amp;amp;block:T-%3EU)forallU-instance-method&quot;&gt;#map&lt;/a&gt;&lt;/code&gt;, but the block gets passed both the element and its index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588e904faa4cc7b928e6a18a5d6ad596701b81a9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;tuple#map(&amp;amp;block)-instance-method&quot;&gt;#map&lt;/a&gt;&lt;/code&gt;, but the block gets passed both the element and its index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9505c9bdb28e2e2699dea50b24886a1e28f38c" translate="yes" xml:space="preserve">
          <source>Likewise, other Crystal logic can be implemented in ECR text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabb5c2ae8384dc97babe35a4e5646126d742bc2" translate="yes" xml:space="preserve">
          <source>Likewise, we can wait for multiple fibers to complete execution, and gather their values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a403a0d61ce05c392e1457e343cdab1eef188e" translate="yes" xml:space="preserve">
          <source>LineControl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01671b023b88357a5cd9035d0aa06f99fafa1ace" translate="yes" xml:space="preserve">
          <source>LineControl#tciflush?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15d0abf77777df5d6cb2ef17032f72dd8111f11" translate="yes" xml:space="preserve">
          <source>LineControl#tcioff?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec01bb1e4054e9ad0891b990d5cacf20547ec72" translate="yes" xml:space="preserve">
          <source>LineControl#tcioflush?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e669b8adc37550d524377cb8fdde782b97c2a0a0" translate="yes" xml:space="preserve">
          <source>LineControl#tcion?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd3fb3aa57acbb2a1482fd711352899b024b7e7" translate="yes" xml:space="preserve">
          <source>LineControl#tcoflush?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a451847eee38fb54367e03fed6eb4d9d8e81cb" translate="yes" xml:space="preserve">
          <source>LineControl#tcooff?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a600cc1290f10606f153ba1cba35e422ca6b594" translate="yes" xml:space="preserve">
          <source>LineControl#tcoon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89adfcc25f87fb64c9b7ba426374d63db16c52b" translate="yes" xml:space="preserve">
          <source>LineControl#tcsadrain?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4967b2cd89fa48573e7579e09a75008261e89dfa" translate="yes" xml:space="preserve">
          <source>LineControl#tcsaflush?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a0707215ed6cfa7f2eb1f999f13d612a4c1d6e" translate="yes" xml:space="preserve">
          <source>LineControl#tcsanow?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0517071aa376e797705058bbad4b658954b9930" translate="yes" xml:space="preserve">
          <source>Link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27dc31140950c016978fcb4c144b7b2d3cbc47c" translate="yes" xml:space="preserve">
          <source>Linkage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6978db6a02c3bd9083a27790beae1915fd6ef3" translate="yes" xml:space="preserve">
          <source>Linkage#appending?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba64672a5e076017201728566597ac17fd54451" translate="yes" xml:space="preserve">
          <source>Linkage#available_externally?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a2fa7ee198a997071b2392890a723a97e305a6" translate="yes" xml:space="preserve">
          <source>Linkage#common?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3006cbc963feff09e7b5a650bf224f30b3091103" translate="yes" xml:space="preserve">
          <source>Linkage#dll_export?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b54cb737eedabfea9aa113fd287e2b77c5dcae" translate="yes" xml:space="preserve">
          <source>Linkage#dll_import?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334728d7eeec8101f433b57495f797af225435af" translate="yes" xml:space="preserve">
          <source>Linkage#external?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abde9e901fc86a258aaae1f41b3cb57fa38c37a7" translate="yes" xml:space="preserve">
          <source>Linkage#external_weak?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32aa75cd6c18bac2be64ba02bbb9c30640c346a4" translate="yes" xml:space="preserve">
          <source>Linkage#ghost?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f2bfe4c5533888a6dce31270dcf3f57b594ce4" translate="yes" xml:space="preserve">
          <source>Linkage#internal?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536bda20b9e3410ec2fffc2f643b9ad719549206" translate="yes" xml:space="preserve">
          <source>Linkage#link_once_any?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbf4f2d6f6ef6bc759c73dabcd2dd4deead5fe9" translate="yes" xml:space="preserve">
          <source>Linkage#link_once_odr?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0d896a256b365c6c82fbcb72cf1bab6925d7b9" translate="yes" xml:space="preserve">
          <source>Linkage#link_once_odr_auto_hide?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c598a2d782b8d6d40c9c0bd46e887ddf1daaca6" translate="yes" xml:space="preserve">
          <source>Linkage#linker_private?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03d963b8bca52dd6df13e96979bc1aeda3a0eb8" translate="yes" xml:space="preserve">
          <source>Linkage#linker_private_weak?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83cc293843c374ecd2af09ed4e1d412d4b03ae2" translate="yes" xml:space="preserve">
          <source>Linkage#private?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c9b053b1449798e0bc6f797b957a022718b403" translate="yes" xml:space="preserve">
          <source>Linkage#weak_any?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afafa064b74e6c5de9630841ba137d0c1a8dd512" translate="yes" xml:space="preserve">
          <source>Linkage#weak_odr?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27f3ca9ba440e3da3e466b92f6aaf945fa47231" translate="yes" xml:space="preserve">
          <source>Linked version of OpenSSL need to be checked for supporting specific protocols and ciphers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cf97442cf3a9ce9b907593c9596985a5eb8e1a" translate="yes" xml:space="preserve">
          <source>List of all entries in the benchmark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34895b4491fa04f5cbd7fa52cba85581715b73cb" translate="yes" xml:space="preserve">
          <source>List of all entries in the benchmark. After #execute, these are populated with the resulting statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9bc0e8b5bf216fbc6c157bd8f8c7a8d35fccc8" translate="yes" xml:space="preserve">
          <source>List of metacharacters that need to be escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0574842123374ee77707d75a17ad4ec6cf02c75" translate="yes" xml:space="preserve">
          <source>Lists the installed dependencies and their versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e97e035f44f8980e413b0d3167603ea36902ee" translate="yes" xml:space="preserve">
          <source>Literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b75844b8c02eaa032013b906d46bc59d53b7cde" translate="yes" xml:space="preserve">
          <source>Literals: Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6f077a10141306566bf85447228b2facc2745e" translate="yes" xml:space="preserve">
          <source>Literals: Bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233aba591a8054f6aed4a76a17f96014e9363925" translate="yes" xml:space="preserve">
          <source>Literals: Char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec246d5ceda6b53e5bbd7a01e09c49b6d56394b4" translate="yes" xml:space="preserve">
          <source>Literals: Command literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5462d6a86a215d6228a11ebd5c02094207825d7" translate="yes" xml:space="preserve">
          <source>Literals: Floats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e407d86a37652d1bec6c17459fadce4c84f9d90" translate="yes" xml:space="preserve">
          <source>Literals: Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3468b69beb08ae542f912c8e20be35188afe56df" translate="yes" xml:space="preserve">
          <source>Literals: Integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4378fab7ac228b7c046d54950d01c015113c04f" translate="yes" xml:space="preserve">
          <source>Literals: NamedTuple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f90410ceb093a53bee28a654ba7328e871bd52" translate="yes" xml:space="preserve">
          <source>Literals: Nil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf3597238ad593de4a81f196d0bb5458a176c9b" translate="yes" xml:space="preserve">
          <source>Literals: Proc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b59b88264c64eede13fda01936058c9a191487" translate="yes" xml:space="preserve">
          <source>Literals: Range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4042329aa69a13fe56b13ae92ad96de6c73199" translate="yes" xml:space="preserve">
          <source>Literals: Regular Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7447e2b76a629aa19420cf7cf46cdff3a5aa8d6" translate="yes" xml:space="preserve">
          <source>Literals: String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a706d990e28bb7938655236ac99d224f8d25125b" translate="yes" xml:space="preserve">
          <source>Literals: Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dc2a3ff5ffac01474f9988568bf390051a8b72" translate="yes" xml:space="preserve">
          <source>Literals: Tuple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fb56725cdbd2ddef060b1599393c2090a498b1" translate="yes" xml:space="preserve">
          <source>Load the external subset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb340c9d1672c9fe76a09c37a919a87b4c63eb1f" translate="yes" xml:space="preserve">
          <source>Loaded values override previously defined mappings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b2b8dcb12a8ad042e22dd494bf8fbb11691d6a" translate="yes" xml:space="preserve">
          <source>Loading a custom MIME database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4ff695efe04f2448917b199032253d0cad92c0" translate="yes" xml:space="preserve">
          <source>Loads a bcrypt hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f254c812c1ef585d8615b817ff6acf088bee48" translate="yes" xml:space="preserve">
          <source>Loads the &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; with the given &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510a1cd62879c3a55e9820ad64d56a80b891eabd" translate="yes" xml:space="preserve">
          <source>Loads the local time zone according to the current application environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fabf0703109710fed22f74f958c204133fc85234" translate="yes" xml:space="preserve">
          <source>Local Time Zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5148d6cff2251fbb44fa24ac71e87831f6949a" translate="yes" xml:space="preserve">
          <source>Local Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573faf18825a085ecfb3336ef224bcc2ae1d82cf" translate="yes" xml:space="preserve">
          <source>Local variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b403f50cd9a5f8f922d2b8e7d70bbb8e764b4257" translate="yes" xml:space="preserve">
          <source>Local variables start with lowercase letters. They are declared when you first assign them a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478df254596a4a4a51b18fe7c43423e110e9c8b9" translate="yes" xml:space="preserve">
          <source>LocalMode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3fa59744396db63746e3108cbd3a6f4dd2fede" translate="yes" xml:space="preserve">
          <source>LocalMode#echo?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350765e637400a21652eb657a65366cc093f01ff" translate="yes" xml:space="preserve">
          <source>LocalMode#echoe?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a715cfc66237e24741207791d746b83e921c9d" translate="yes" xml:space="preserve">
          <source>LocalMode#echok?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0c47336df662e3f4241bac8054dfb378ec6854" translate="yes" xml:space="preserve">
          <source>LocalMode#echonl?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b0b6ade4df27ae1fbc5c2b98047723b0c248d4" translate="yes" xml:space="preserve">
          <source>LocalMode#icanon?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee3ae83eac2380204f752ebb2d573dde232957d" translate="yes" xml:space="preserve">
          <source>LocalMode#iexten?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a3ce0eff2d6c1aa71261c83b2172b243fb15ce" translate="yes" xml:space="preserve">
          <source>LocalMode#isig?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7df72a29ed9d70ba67db067aae37822c68c5c0" translate="yes" xml:space="preserve">
          <source>LocalMode#noflsh?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4a72ad2742661bfdb1c9bd1255760aebd4195f" translate="yes" xml:space="preserve">
          <source>LocalMode#none?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61be914f1706cdef098cb8e3a88e6d9f7d425f1" translate="yes" xml:space="preserve">
          <source>LocalMode#tostop?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb7398ae107f4c1237c61593dbbad5d2d6575e3" translate="yes" xml:space="preserve">
          <source>Location#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af03bfd94384c2ce585a69894ca66e3aaf7a80b8" translate="yes" xml:space="preserve">
          <source>Location#fixed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8a0f93b1784fe121d98a416a3ac9dc75d68c0c" translate="yes" xml:space="preserve">
          <source>Location#hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b453917b4c38a93fab61e9a6e661fa90f63afb4f" translate="yes" xml:space="preserve">
          <source>Location#inspect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53f4bcc39754498a7c355dfae5bf8cc3e0fc12a" translate="yes" xml:space="preserve">
          <source>Location#local?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cf70bf72158e593221d69a19980c610ec0d988" translate="yes" xml:space="preserve">
          <source>Location#lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6398908f01346408a5e29b478192c1ce88de93bb" translate="yes" xml:space="preserve">
          <source>Location#name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f7360acf5ee08d1492cfecb479342690cfae48" translate="yes" xml:space="preserve">
          <source>Location#to_s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9864f52bbbb76fb010f551a2e301c766c5d4a7" translate="yes" xml:space="preserve">
          <source>Location#utc?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4695794b3d87ca6ab4957046dcb6e84bd1c62fc5" translate="yes" xml:space="preserve">
          <source>Location#zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d035c6e8a9bad42537e3f95ee84ebae90471ecc3" translate="yes" xml:space="preserve">
          <source>Location.fixed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c6af7857396d1699705ea585bdd9ebe333150f" translate="yes" xml:space="preserve">
          <source>Location.load</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a9586a75921e1368162e89a743fb00ed9bb0db" translate="yes" xml:space="preserve">
          <source>Location.load_local</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d48920a4e4797a77aa16e8380cee04944c71d7" translate="yes" xml:space="preserve">
          <source>Location.local</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696bf036ba7ec49a4526cdf748d8afc2f6d8769e" translate="yes" xml:space="preserve">
          <source>Location.local=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe83c8e415ad5c7825489bd4034ae05714cd1357" translate="yes" xml:space="preserve">
          <source>Location::Zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651c0ed739b8a5d39c9984433cc4a15e3a9655f5" translate="yes" xml:space="preserve">
          <source>Location::Zone#dst?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debdde49529dc51554ee29f61389e8fabbd63a0c" translate="yes" xml:space="preserve">
          <source>Location::Zone#format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3daff9c83ff776355db391005591ad921760a4" translate="yes" xml:space="preserve">
          <source>Location::Zone#inspect</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
