<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="25c90f8fd4499cd6197f01d510ea3f1b389a2d87" translate="yes" xml:space="preserve">
          <source>Wraps an &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;. This is used when reading or writing NSKeyedArchiver encoded data, which contains UID (see PList manual).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ffa41434f5ef07bf1b79c543ee91e505e4515d" translate="yes" xml:space="preserve">
          <source>Wraps the &lt;code&gt;posix_spawn()&lt;/code&gt; C library API for use from Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e4112a55e8230798780d123b0e6ee7624c2bdb" translate="yes" xml:space="preserve">
          <source>Wraps the &lt;code&gt;posix_spawnp()&lt;/code&gt; C library API for use from Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43d22b5ed05f4ee8e1729b35aef77956fd174aa" translate="yes" xml:space="preserve">
          <source>Wraps the single paragraph in &lt;em&gt;text&lt;/em&gt; (a string) so every line is at most &lt;a href=&quot;#textwrap.TextWrapper.width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; characters long. All wrapping options are taken from instance attributes of the &lt;a href=&quot;#textwrap.TextWrapper&quot;&gt;&lt;code&gt;TextWrapper&lt;/code&gt;&lt;/a&gt; instance. Returns a list of output lines, without final newlines. If the wrapped output has no content, the returned list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc06193157378861d75bff7a2f1b594fb5b1d3ad" translate="yes" xml:space="preserve">
          <source>Wraps the single paragraph in &lt;em&gt;text&lt;/em&gt; (a string) so every line is at most &lt;em&gt;width&lt;/em&gt; characters long. Returns a list of output lines, without final newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbb266e216d3a300ed723990a06600b7e04df65" translate="yes" xml:space="preserve">
          <source>Wraps the single paragraph in &lt;em&gt;text&lt;/em&gt;, and returns a single string containing the wrapped paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca151de3d39257aaa7ef51f09776d9426a4e86bf" translate="yes" xml:space="preserve">
          <source>Wraps the single paragraph in &lt;em&gt;text&lt;/em&gt;, and returns a single string containing the wrapped paragraph. &lt;a href=&quot;#textwrap.fill&quot;&gt;&lt;code&gt;fill()&lt;/code&gt;&lt;/a&gt; is shorthand for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb520367f46e90cee8b8f5b1e6c21207124495b" translate="yes" xml:space="preserve">
          <source>Write &lt;em&gt;buf&lt;/em&gt; to the SSL socket and return the number of bytes written. The &lt;em&gt;buf&lt;/em&gt; argument must be an object supporting the buffer interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef4a515b7b057bb68f87f064fae35143ec9e666" translate="yes" xml:space="preserve">
          <source>Write &lt;em&gt;rootObject&lt;/em&gt; to an XML plist file. &lt;em&gt;pathOrFile&lt;/em&gt; may be either a file name or a (writable and binary) file object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a124faaf6d6424254bc6c3fa325a5691ed3e90" translate="yes" xml:space="preserve">
          <source>Write &lt;em&gt;s&lt;/em&gt; to the &lt;em&gt;write&lt;/em&gt; method of the &lt;em&gt;outfp&lt;/em&gt; passed to the &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s constructor. This provides just enough file-like API for &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; instances to be used in the &lt;a href=&quot;functions#print&quot;&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2124f354eb98d13eab8a7539f15f0cde6ced95" translate="yes" xml:space="preserve">
          <source>Write &lt;em&gt;value&lt;/em&gt; to a plist file. &lt;em&gt;Fp&lt;/em&gt; should be a writable, binary file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc569fdf3522d7fe1d58d73b6d385b8c188e591" translate="yes" xml:space="preserve">
          <source>Write TLS keys to a keylog file, whenever key material is generated or received. The keylog file is designed for debugging purposes only. The file format is specified by NSS and used by many traffic analyzers such as Wireshark. The log file is opened in append-only mode. Writes are synchronized between threads, but not between processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c8d727588366243c8993e3e979b39ba193db5c" translate="yes" xml:space="preserve">
          <source>Write Transports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f87fb907ae200e452ff1d664c58831d2d4084b7" translate="yes" xml:space="preserve">
          <source>Write XML to the writer object. The writer receives texts but not bytes as input, it should have a &lt;code&gt;write()&lt;/code&gt; method which matches that of the file object interface. The &lt;em&gt;indent&lt;/em&gt; parameter is the indentation of the current node. The &lt;em&gt;addindent&lt;/em&gt; parameter is the incremental indentation to use for subnodes of the current one. The &lt;em&gt;newl&lt;/em&gt; parameter specifies the string to use to terminate newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34af1234d1be52e185f56532800f5c20e29687e6" translate="yes" xml:space="preserve">
          <source>Write a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;data&lt;/em&gt; to the audio device and return the number of bytes written. If the audio device is in blocking mode (the default), the entire data is always written (again, this is different from usual Unix device semantics). If the device is in non-blocking mode, some data may not be written&amp;mdash;see &lt;a href=&quot;#ossaudiodev.oss_audio_device.writeall&quot;&gt;&lt;code&gt;writeall()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7530782eb2bf804763cda334f2dc760226b94c6f" translate="yes" xml:space="preserve">
          <source>Write a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;data&lt;/em&gt; to the audio device: waits until the audio device is able to accept data, writes as much data as it will accept, and repeats until &lt;em&gt;data&lt;/em&gt; has been completely written. If the device is in blocking mode (the default), this has the same effect as &lt;a href=&quot;#ossaudiodev.oss_audio_device.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt;; &lt;a href=&quot;#ossaudiodev.oss_audio_device.writeall&quot;&gt;&lt;code&gt;writeall()&lt;/code&gt;&lt;/a&gt; is only useful in non-blocking mode. Has no return value, since the amount of data written is always equal to the amount of data supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab07be95f65e1f944e226c637379683c5bcbbeff" translate="yes" xml:space="preserve">
          <source>Write a &lt;code&gt;__main__.py&lt;/code&gt; file to the archive that executes &lt;em&gt;mainfn&lt;/em&gt;. The &lt;em&gt;mainfn&lt;/em&gt; argument should have the form &amp;ldquo;pkg.mod:fn&amp;rdquo;, where &amp;ldquo;pkg.mod&amp;rdquo; is a package/module in the archive, and &amp;ldquo;fn&amp;rdquo; is a callable in the given module. The &lt;code&gt;__main__.py&lt;/code&gt; file will execute that callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee50cf63ba8885dc61601f8b5cd0b79d178853d" translate="yes" xml:space="preserve">
          <source>Write a byte string to the socket, doubling any IAC characters. This can block if the connection is blocked. May raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if the connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11050f94833bd03482233f6f4a212266c002bd4d" translate="yes" xml:space="preserve">
          <source>Write a file into the archive. The contents is &lt;em&gt;data&lt;/em&gt;, which may be either a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; instance; if it is a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, it is encoded as UTF-8 first. &lt;em&gt;zinfo_or_arcname&lt;/em&gt; is either the file name it will be given in the archive, or a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; instance. If it&amp;rsquo;s an instance, at least the filename, date, and time must be given. If it&amp;rsquo;s a name, the date and time is set to the current date and time. The archive must be opened with mode &lt;code&gt;'w'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3eb00f495508e3700c4ba0640bfacc98b0501ae" translate="yes" xml:space="preserve">
          <source>Write a list (or any iterable) of data bytes to the transport. This is functionally equivalent to calling &lt;a href=&quot;#asyncio.WriteTransport.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; on each element yielded by the iterable, but may be implemented more efficiently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7437d7098997ca3f0b36ac87a6783125bd334ba" translate="yes" xml:space="preserve">
          <source>Write a list of lines to the stream. Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e2299e025bd71effd4f4c8ea111a73efc09766" translate="yes" xml:space="preserve">
          <source>Write a prompt and read a line. The returned line does not include the trailing newline. When the user enters the EOF key sequence, &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; is raised. The base implementation reads from &lt;code&gt;sys.stdin&lt;/code&gt;; a subclass may replace this with a different implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f447e1ee94708098c72a4348432a023a0a8cf9" translate="yes" xml:space="preserve">
          <source>Write a representation of the configuration to the specified &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, which must be opened in text mode (accepting strings). This representation can be parsed by a future &lt;a href=&quot;#configparser.ConfigParser.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; call. If &lt;em&gt;space_around_delimiters&lt;/em&gt; is true, delimiters between keys and values are surrounded by spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f425021d217395cd90bd3e1c685d406345abef" translate="yes" xml:space="preserve">
          <source>Write a row with the field names (as specified in the constructor) to the writer&amp;rsquo;s file object, formatted according to the current dialect. Return the return value of the &lt;a href=&quot;#csv.csvwriter.writerow&quot;&gt;&lt;code&gt;csvwriter.writerow()&lt;/code&gt;&lt;/a&gt; call used internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de22fd70b48f7f02d64b21199c74c551c5a4056" translate="yes" xml:space="preserve">
          <source>Write a string to the standard error stream (&lt;code&gt;sys.stderr&lt;/code&gt;). Derived classes should override this to provide the appropriate output handling as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d612d16d0cf266e7ebef3c7987599b4fd184d79d" translate="yes" xml:space="preserve">
          <source>Write a warning to a file. The default implementation calls &lt;code&gt;formatwarning(message, category, filename, lineno, line)&lt;/code&gt; and writes the resulting string to &lt;em&gt;file&lt;/em&gt;, which defaults to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;. You may replace this function with any callable by assigning to &lt;code&gt;warnings.showwarning&lt;/code&gt;. &lt;em&gt;line&lt;/em&gt; is a line of source code to be included in the warning message; if &lt;em&gt;line&lt;/em&gt; is not supplied, &lt;a href=&quot;#warnings.showwarning&quot;&gt;&lt;code&gt;showwarning()&lt;/code&gt;&lt;/a&gt; will try to read the line specified by &lt;em&gt;filename&lt;/em&gt; and &lt;em&gt;lineno&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb845fd32652cc2e4f58bebbf5d18bb847fd06c2" translate="yes" xml:space="preserve">
          <source>Write all data associated with the window into the provided file object. This information can be later retrieved using the &lt;a href=&quot;#curses.getwin&quot;&gt;&lt;code&gt;getwin()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81abe8375bf8942cde0da27f3d6c849d0068cc77" translate="yes" xml:space="preserve">
          <source>Write all elements in &lt;em&gt;rows&lt;/em&gt; (an iterable of &lt;em&gt;row&lt;/em&gt; objects as described above) to the writer&amp;rsquo;s file object, formatted according to the current dialect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9ceb61920372f0588b9d7561124c54016a1122" translate="yes" xml:space="preserve">
          <source>Write all items (as machine values) to the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81f2599a0df03842e1b569bdbf1ec30324a18f4" translate="yes" xml:space="preserve">
          <source>Write an EOF marker to the memory BIO. After this method has been called, it is illegal to call &lt;a href=&quot;#ssl.MemoryBIO.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt;. The attribute &lt;a href=&quot;#ssl.MemoryBIO.eof&quot;&gt;&lt;code&gt;eof&lt;/code&gt;&lt;/a&gt; will become true after all data currently in the buffer has been read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0862fa068194298c775ee76e1f456320747a5a" translate="yes" xml:space="preserve">
          <source>Write any pending changes to the filesystem. For some &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; subclasses, changes are always written immediately and &lt;a href=&quot;#mailbox.Mailbox.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; does nothing, but you should still make a habit of calling this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1297c30d5d72fb62f06bfd02306776bc567c17" translate="yes" xml:space="preserve">
          <source>Write audio frames and make sure &lt;em&gt;nframes&lt;/em&gt; is correct. It will raise an error if the output stream is not seekable and the total number of frames that have been written after &lt;em&gt;data&lt;/em&gt; has been written does not match the previously set value for &lt;em&gt;nframes&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6374207475d74b69e79e3c97cb15756f85e6eecd" translate="yes" xml:space="preserve">
          <source>Write audio frames, without correcting &lt;em&gt;nframes&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d10592df13916c769fed5ce2f6051eab11d892" translate="yes" xml:space="preserve">
          <source>Write back all entries in the cache if the shelf was opened with &lt;em&gt;writeback&lt;/em&gt; set to &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;. Also empty the cache and synchronize the persistent dictionary on disk, if feasible. This is called automatically when the shelf is closed with &lt;a href=&quot;#shelve.Shelf.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb4b78e519e7550928b490acec5cdf38eb80432" translate="yes" xml:space="preserve">
          <source>Write buffers to the transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef28f2b25c05e4ce563406a1aa0120af14871caf" translate="yes" xml:space="preserve">
          <source>Write coverage results. Set &lt;em&gt;show_missing&lt;/em&gt; to show lines that had no hits. Set &lt;em&gt;summary&lt;/em&gt; to include in the output the coverage summary per module. &lt;em&gt;coverdir&lt;/em&gt; specifies the directory into which the coverage result files will be output. If &lt;code&gt;None&lt;/code&gt;, the results for each source file are placed in its directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de823fe8fae6707bcca7ae9d265deafd25388197" translate="yes" xml:space="preserve">
          <source>Write data to the output file. This method can only be called after the audio file parameters have been set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0192353108eeff55932692ba801f256905196f" translate="yes" xml:space="preserve">
          <source>Write data to the transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37ba65d2a4a6d647d50783ee4565efe21874280" translate="yes" xml:space="preserve">
          <source>Write only mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de43cb842768a7bf97800356094a1d534b6900c6" translate="yes" xml:space="preserve">
          <source>Write some &lt;em&gt;data&lt;/em&gt; bytes to the transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871c8f9286c953dd029dbbaeca8bcb6b99962da0" translate="yes" xml:space="preserve">
          <source>Write text - the string representation of &lt;em&gt;arg&lt;/em&gt; - at the current turtle position according to &lt;em&gt;align&lt;/em&gt; (&amp;ldquo;left&amp;rdquo;, &amp;ldquo;center&amp;rdquo; or right&amp;rdquo;) and with the given font. If &lt;em&gt;move&lt;/em&gt; is true, the pen is moved to the bottom-right corner of the text. By default, &lt;em&gt;move&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3378a681ace2c9c5d6e0cd6c28d0e5dc9a0608f5" translate="yes" xml:space="preserve">
          <source>Write text files containing test cases as interactive examples, and test the files using &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#doctest.DocFileSuite&quot;&gt;&lt;code&gt;DocFileSuite()&lt;/code&gt;&lt;/a&gt;. This is recommended, although is easiest to do for new projects, designed from the start to use doctest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49bb785234b8ca3d65e01ef187d421d2ad64c53" translate="yes" xml:space="preserve">
          <source>Write the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, &lt;em&gt;b&lt;/em&gt;, and return the number of bytes written. When in non-blocking mode, a &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; is raised if the buffer needs to be written out but the raw stream blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c87e056df756962ad8a4e0b3ed6dfcb114b2df" translate="yes" xml:space="preserve">
          <source>Write the &lt;em&gt;buffers&lt;/em&gt; contents to file descriptor &lt;em&gt;fd&lt;/em&gt; at a offset &lt;em&gt;offset&lt;/em&gt;, leaving the file offset unchanged. &lt;em&gt;buffers&lt;/em&gt; must be a sequence of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;. Buffers are processed in array order. Entire contents of the first buffer is written before proceeding to the second, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68098901631691c20ac4c25cf82febd1b870a65" translate="yes" xml:space="preserve">
          <source>Write the &lt;em&gt;row&lt;/em&gt; parameter to the writer&amp;rsquo;s file object, formatted according to the current dialect. Return the return value of the call to the &lt;em&gt;write&lt;/em&gt; method of the underlying file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ec3e1f52340e46c299e8d695880b094a6fd996" translate="yes" xml:space="preserve">
          <source>Write the XML-RPC base 64 encoding of this binary item to the &lt;em&gt;out&lt;/em&gt; stream object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09605d772916211b4f273ac78b4abb90e0284a69" translate="yes" xml:space="preserve">
          <source>Write the XML-RPC encoding of this &lt;a href=&quot;#xmlrpc.client.DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; item to the &lt;em&gt;out&lt;/em&gt; stream object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef2916cd925d9f570653604eed88e3d7738b49e" translate="yes" xml:space="preserve">
          <source>Write the byte-code files to their legacy locations and names, which may overwrite byte-code files created by another version of Python. The default is to write files to their &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt; locations and names, which allows byte-code files from multiple versions of Python to coexist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdd677e07f573fdbc799f5165e8f7ed05952f7f" translate="yes" xml:space="preserve">
          <source>Write the bytes from &lt;em&gt;buf&lt;/em&gt; to the memory BIO. The &lt;em&gt;buf&lt;/em&gt; argument must be an object supporting the buffer protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3354e519dec860fd5b4513b4f703e6282b70945" translate="yes" xml:space="preserve">
          <source>Write the bytes in &lt;em&gt;bytes&lt;/em&gt; into memory at the current position of the file pointer and return the number of bytes written (never less than &lt;code&gt;len(bytes)&lt;/code&gt;, since if the write fails, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised). The file position is updated to point after the bytes that were written. If the mmap was created with &lt;code&gt;ACCESS_READ&lt;/code&gt;, then writing to it will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791c39fe68f1524d71fee0a4ea28b01783eda89a" translate="yes" xml:space="preserve">
          <source>Write the bytestring in &lt;em&gt;str&lt;/em&gt; to file descriptor &lt;em&gt;fd&lt;/em&gt; at position of &lt;em&gt;offset&lt;/em&gt;, leaving the file offset unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5328e34fbdfb16a49801df3179dac7827d6c2c5e" translate="yes" xml:space="preserve">
          <source>Write the bytestring in &lt;em&gt;str&lt;/em&gt; to file descriptor &lt;em&gt;fd&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b94773d284ac100a9d67d6a8514f6713ad81c9" translate="yes" xml:space="preserve">
          <source>Write the contents of &lt;em&gt;buffers&lt;/em&gt; to file descriptor &lt;em&gt;fd&lt;/em&gt;. &lt;em&gt;buffers&lt;/em&gt; must be a sequence of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;. Buffers are processed in array order. Entire contents of the first buffer is written before proceeding to the second, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2efd35168142cd179ef29ca72c5ec8a98f503be" translate="yes" xml:space="preserve">
          <source>Write the file named &lt;em&gt;filename&lt;/em&gt; to the archive, giving it the archive name &lt;em&gt;arcname&lt;/em&gt; (by default, this will be the same as &lt;em&gt;filename&lt;/em&gt;, but without a drive letter and with leading path separators removed). If given, &lt;em&gt;compress_type&lt;/em&gt; overrides the value given for the &lt;em&gt;compression&lt;/em&gt; parameter to the constructor for the new entry. Similarly, &lt;em&gt;compresslevel&lt;/em&gt; will override the constructor if given. The archive must be open with mode &lt;code&gt;'w'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt; or &lt;code&gt;'a'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0122c32b529e0fe1cabeadad2b8ff8edccbce43" translate="yes" xml:space="preserve">
          <source>Write the given &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, &lt;em&gt;b&lt;/em&gt;, and return the number of bytes written (always equal to the length of &lt;em&gt;b&lt;/em&gt; in bytes, since if the write fails an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; will be raised). Depending on the actual implementation, these bytes may be readily written to the underlying stream, or held in a buffer for performance and latency reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a6af62d0fddfdcac2699f837e4923a4e0da362" translate="yes" xml:space="preserve">
          <source>Write the given &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, &lt;em&gt;b&lt;/em&gt;, to the underlying raw stream, and return the number of bytes written. This can be less than the length of &lt;em&gt;b&lt;/em&gt; in bytes, depending on specifics of the underlying raw stream, and especially if it is in non-blocking mode. &lt;code&gt;None&lt;/code&gt; is returned if the raw stream is set not to block and no single byte could be readily written to it. The caller may release or mutate &lt;em&gt;b&lt;/em&gt; after this method returns, so the implementation should only access &lt;em&gt;b&lt;/em&gt; during the method call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aca4b0c4cf6c2a7fe54cc559e99496d0c3f596" translate="yes" xml:space="preserve">
          <source>Write the integer &lt;em&gt;byte&lt;/em&gt; into memory at the current position of the file pointer; the file position is advanced by &lt;code&gt;1&lt;/code&gt;. If the mmap was created with &lt;code&gt;ACCESS_READ&lt;/code&gt;, then writing to it will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb72d7ee339e68a0aebdb5f886ea9310729e068" translate="yes" xml:space="preserve">
          <source>Write the modified properties to the summary information stream, using &lt;code&gt;MsiSummaryInfoPersist()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bf2fe45536bc78a1a8caf7889193c631c34161" translate="yes" xml:space="preserve">
          <source>Write the output of the &lt;em&gt;infile&lt;/em&gt; to the given &lt;em&gt;outfile&lt;/em&gt;. Otherwise, write it to &lt;a href=&quot;sys#sys.stdout&quot;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d838008f04fccbdbd310f0f2eda2be824679476" translate="yes" xml:space="preserve">
          <source>Write the output to a file named &lt;em&gt;output&lt;/em&gt;. If this option is not specified, the output filename will be the same as the input &lt;em&gt;source&lt;/em&gt;, with the extension &lt;code&gt;.pyz&lt;/code&gt; added. If an explicit filename is given, it is used as is (so a &lt;code&gt;.pyz&lt;/code&gt; extension should be included if required).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82530a5087bab2d42ad0ddb90cf1ef9792a699a" translate="yes" xml:space="preserve">
          <source>Write the pickled representation of &lt;em&gt;obj&lt;/em&gt; to the open file object given in the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3cb793d567a188a0b227ebd8f0b39627a11406" translate="yes" xml:space="preserve">
          <source>Write the pickled representation of the object &lt;em&gt;obj&lt;/em&gt; to the open &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;file&lt;/em&gt;. This is equivalent to &lt;code&gt;Pickler(file, protocol).dump(obj)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26b0a11db95123185fa367e58a8b7362b3ed079" translate="yes" xml:space="preserve">
          <source>Write the results of the current profile to &lt;em&gt;filename&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb7530657763f9875f7b1f976e2ce7f011577e9" translate="yes" xml:space="preserve">
          <source>Write the snapshot into a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d258d2fb226ec2c0c709a20107d7d1cd49dda7" translate="yes" xml:space="preserve">
          <source>Write the string &lt;em&gt;s&lt;/em&gt; to the stream and return the number of characters written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f9fa39199b8be1519faca0bdbf541e2e1411a7" translate="yes" xml:space="preserve">
          <source>Write the value on the open file. The value must be a supported type. The file must be a writeable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-binary-file&quot;&gt;binary file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0ad1cd3dd03f0a6c9c662064a29f7888fb5ccf" translate="yes" xml:space="preserve">
          <source>Write-only Transports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335cbd7aaa63f61606a8ce6bfa9ddbc970e54241" translate="yes" xml:space="preserve">
          <source>Writer Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0bf7b553d43cfdd760c33cc20420dd919b351d" translate="yes" xml:space="preserve">
          <source>Writer objects have the following public attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eda2b27bf2882a31d059cb23f01e9439d450de" translate="yes" xml:space="preserve">
          <source>Writes a sentinel to the queue to tell the listener to quit. This implementation uses &lt;code&gt;put_nowait()&lt;/code&gt;. You may want to override this method if you want to use timeouts or work with custom queue implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17739c26273b3c54186e1d431020da69cfc1db41" translate="yes" xml:space="preserve">
          <source>Writes all the attributes of a key to the registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e658a7fb3a51b39345e62d94dba9025da173bea3" translate="yes" xml:space="preserve">
          <source>Writes an element tree or element structure to sys.stdout. This function should be used for debugging only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80c0741f41bf444cf6674603a6956344dc09d2c" translate="yes" xml:space="preserve">
          <source>Writes the concatenated list of strings to the stream (possibly by reusing the &lt;a href=&quot;#codecs.StreamWriter.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; method). The standard bytes-to-bytes codecs do not support this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5380803f5da36b35d28343f1d050c78f6fcd7c0d" translate="yes" xml:space="preserve">
          <source>Writes the element tree to a file, as XML. &lt;em&gt;file&lt;/em&gt; is a file name, or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; opened for writing. &lt;em&gt;encoding&lt;/em&gt;&lt;a href=&quot;#id9&quot; id=&quot;id6&quot;&gt;1&lt;/a&gt; is the output encoding (default is US-ASCII). &lt;em&gt;xml_declaration&lt;/em&gt; controls if an XML declaration should be added to the file. Use &lt;code&gt;False&lt;/code&gt; for never, &lt;code&gt;True&lt;/code&gt; for always, &lt;code&gt;None&lt;/code&gt; for only if not US-ASCII or UTF-8 or Unicode (default is &lt;code&gt;None&lt;/code&gt;). &lt;em&gt;default_namespace&lt;/em&gt; sets the default XML namespace (for &amp;ldquo;xmlns&amp;rdquo;). &lt;em&gt;method&lt;/em&gt; is either &lt;code&gt;&quot;xml&quot;&lt;/code&gt;, &lt;code&gt;&quot;html&quot;&lt;/code&gt; or &lt;code&gt;&quot;text&quot;&lt;/code&gt; (default is &lt;code&gt;&quot;xml&quot;&lt;/code&gt;). The keyword-only &lt;em&gt;short_empty_elements&lt;/em&gt; parameter controls the formatting of elements that contain no content. If &lt;code&gt;True&lt;/code&gt; (the default), they are emitted as a single self-closed tag, otherwise they are emitted as a pair of start/end tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a8fba70140127a17356ef143684300827e20e9" translate="yes" xml:space="preserve">
          <source>Writes the object&amp;rsquo;s contents encoded to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae18decb80c060b17ef47ce0c96553cc5c6d777" translate="yes" xml:space="preserve">
          <source>Writing PyUnit regression tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cc1ad64131bcda2eb3e49d5f401de5ae0fa111" translate="yes" xml:space="preserve">
          <source>Writing Unit Tests for the &lt;code&gt;test&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d735f0726a922d346407641bd5cf2708118ab7" translate="yes" xml:space="preserve">
          <source>Writing Unit Tests for the test package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6623bd8fdf17715345d6e193b4a938d36d3a8912" translate="yes" xml:space="preserve">
          <source>Writing a Tokenizer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7970cd648ac7bccb04089bb24dad00d62fe7de4" translate="yes" xml:space="preserve">
          <source>Writing an adapter lets you send custom Python types to SQLite. But to make it really useful we need to make the Python to SQLite to Python roundtrip work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcb129b81a9b97ee4f1424a1e0fb697ea634d2f" translate="yes" xml:space="preserve">
          <source>Writing and reading a bzip2-compressed file in binary mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d1fb7894a11f529f52cf8ecb5d9976ceef53b1" translate="yes" xml:space="preserve">
          <source>Writing compressed data to an already-open file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423fd842912e5704c1495f92cbf775b3b301aaec" translate="yes" xml:space="preserve">
          <source>Writing outside the window, subwindow, or pad raises &lt;a href=&quot;#curses.error&quot;&gt;&lt;code&gt;curses.error&lt;/code&gt;&lt;/a&gt;. Attempting to write to the lower right corner of a window, subwindow, or pad will cause an exception to be raised after the string is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b0caed981253d594af909c645888be42302ac7" translate="yes" xml:space="preserve">
          <source>Writing outside the window, subwindow, or pad raises a &lt;a href=&quot;#curses.error&quot;&gt;&lt;code&gt;curses.error&lt;/code&gt;&lt;/a&gt;. Attempting to write to the lower right corner of a window, subwindow, or pad will cause an exception to be raised after the character is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463175f0030d6c5bc93c5ba14c4b34f90a466ed2" translate="yes" xml:space="preserve">
          <source>Written by James C. Ahlstrom, who also provided an implementation. Python 2.3 follows the specification in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0273&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 273&lt;/strong&gt;&lt;/a&gt;, but uses an implementation written by Just van Rossum that uses the import hooks described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270c60956bc9c23c8fe9a0b4bac1ed97cf2f4291" translate="yes" xml:space="preserve">
          <source>X Bitmap Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2e2736374ccada1de5c3b7c05f3612bbc80534" translate="yes" xml:space="preserve">
          <source>XInclude support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad96390f6242f3cec13bdeae582a19d9407d608" translate="yes" xml:space="preserve">
          <source>XML Processing Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7f7159a8411bf46c36150c878849d3426e4995" translate="yes" xml:space="preserve">
          <source>XML data for the &lt;a href=&quot;#plistlib.FMT_XML&quot;&gt;&lt;code&gt;FMT_XML&lt;/code&gt;&lt;/a&gt; format is parsed using the Expat parser from &lt;a href=&quot;pyexpat#module-xml.parsers.expat&quot;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;&lt;/a&gt; &amp;ndash; see its documentation for possible exceptions on ill-formed XML. Unknown elements will simply be ignored by the plist parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4e1a90d8df93786f8530be82d70f96c907403f" translate="yes" xml:space="preserve">
          <source>XML is an inherently hierarchical data format, and the most natural way to represent it is with a tree. &lt;code&gt;ET&lt;/code&gt; has two classes for this purpose - &lt;a href=&quot;#xml.etree.ElementTree.ElementTree&quot;&gt;&lt;code&gt;ElementTree&lt;/code&gt;&lt;/a&gt; represents the whole XML document as a tree, and &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; represents a single node in this tree. Interactions with the whole document (reading and writing to/from files) are usually done on the &lt;a href=&quot;#xml.etree.ElementTree.ElementTree&quot;&gt;&lt;code&gt;ElementTree&lt;/code&gt;&lt;/a&gt; level. Interactions with a single XML element and its sub-elements are done on the &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9924906708da9844dcf966582660a824d07419a9" translate="yes" xml:space="preserve">
          <source>XML parse error, raised by the various parsing methods in this module when parsing fails. The string representation of an instance of this exception will contain a user-friendly error message. In addition, it will have the following attributes available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096332ac995cd54246f20718b546ac8586de4200" translate="yes" xml:space="preserve">
          <source>XML tree and elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10f7ada917a0516264a166e94fe43f43a7f141e" translate="yes" xml:space="preserve">
          <source>XML vulnerabilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d50f18d7b7a0ea894fe5f24aec3e7baf72508e" translate="yes" xml:space="preserve">
          <source>XML-RPC HOWTO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecaf07183071066578274e8760e0bea165e82a4" translate="yes" xml:space="preserve">
          <source>XML-RPC Introspection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68fd76cd84fb2c95d9fbb40006ec3cb311e1bc2" translate="yes" xml:space="preserve">
          <source>XML-RPC Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e48b9fbebc39ff8c9f81e1b9bc7ae35dc6312d6" translate="yes" xml:space="preserve">
          <source>XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a transport. With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3256ce956df095fe4314c0a860638e54fbdef5" translate="yes" xml:space="preserve">
          <source>XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) as a transport. With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data. This module supports writing XML-RPC client code; it handles all the details of translating between conformable Python objects and XML on the wire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466d1915a26cde29cec1e37e7777bd7f436a3403" translate="yes" xml:space="preserve">
          <source>XML-RPC type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48dd5178a470f86e203690c7805dc9b0b2341c0" translate="yes" xml:space="preserve">
          <source>XMLParser Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9410180aab9a821557dcc7d0d4c2058d73dd7c" translate="yes" xml:space="preserve">
          <source>XMLPullParser Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a5ba60aa26c1d7531b3906ecd8c55209f2d410" translate="yes" xml:space="preserve">
          <source>XMLReader Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa3cfc9c89b42310a22b649c3f853faf5dd886d" translate="yes" xml:space="preserve">
          <source>XOFF, for flow control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd84031d44b67a1ddb8cdee96e88fe594f8656ed" translate="yes" xml:space="preserve">
          <source>XON, for flow control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c789da8e50b0e071e1c885013d7a4b29164374" translate="yes" xml:space="preserve">
          <source>XPath support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6060d77ff0f25227959b320cc3c85a394bdc6230" translate="yes" xml:space="preserve">
          <source>Xlib (C)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c91c9cd5c47000ef428a9ab7e99e267172260b" translate="yes" xml:space="preserve">
          <source>Year (&amp;gt;= 1980)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b7f5d30699e5d4e15b4875dbd3728c364030a0" translate="yes" xml:space="preserve">
          <source>Year with century as a decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64879d90ccc2fc0d06f018314bfc95458d99f67" translate="yes" xml:space="preserve">
          <source>Year without century as a decimal number [00,99].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872bdd7e5e7113390d4c8fa46dd39ec67115b808" translate="yes" xml:space="preserve">
          <source>Year without century as a zero-padded decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3526f607bcd4f51ad0bc05f814579a42c2c0ba57" translate="yes" xml:space="preserve">
          <source>Yellow</source>
          <target state="translated">Yellow</target>
        </trans-unit>
        <trans-unit id="4b7d9108b065dee3edad5735649aad18773cab07" translate="yes" xml:space="preserve">
          <source>Yet another view is the transport and protocol interfaces together define an abstract interface for using network I/O and interprocess I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7feecab2e1b4006a64972db4b4b19657a1f23d1" translate="yes" xml:space="preserve">
          <source>Yield &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; objects for the given module name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023c595fbee175f8fca03795fa86cafa1a4d11e0" translate="yes" xml:space="preserve">
          <source>Yield a tuple of &lt;code&gt;(fieldname, value)&lt;/code&gt; for each field in &lt;code&gt;node._fields&lt;/code&gt; that is present on &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6779be84159814116de4d6defda58236dc2d77b" translate="yes" xml:space="preserve">
          <source>Yield all direct child nodes of &lt;em&gt;node&lt;/em&gt;, that is, all fields that are nodes and all items of fields that are lists of nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836fb31f30edf4301b980b0c16e58e5aca0eb9ba" translate="yes" xml:space="preserve">
          <source>Yields &lt;a href=&quot;#pkgutil.ModuleInfo&quot;&gt;&lt;code&gt;ModuleInfo&lt;/code&gt;&lt;/a&gt; for all modules recursively on &lt;em&gt;path&lt;/em&gt;, or, if &lt;em&gt;path&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, all accessible modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9faaa5a777c93309c3cc258992e9b2bf854a04d" translate="yes" xml:space="preserve">
          <source>Yields &lt;a href=&quot;#pkgutil.ModuleInfo&quot;&gt;&lt;code&gt;ModuleInfo&lt;/code&gt;&lt;/a&gt; for all submodules on &lt;em&gt;path&lt;/em&gt;, or, if &lt;em&gt;path&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, all top-level modules on &lt;code&gt;sys.path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e2b5d8b96f15b1607e0fd8f2aba767f499b4cc" translate="yes" xml:space="preserve">
          <source>You &amp;ldquo;block&amp;rdquo; attributes by deleting them. Once deleted, accessing an attribute will raise an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75e02c51bec7a3ae6df9959824abb351dfd2a65" translate="yes" xml:space="preserve">
          <source>You can add a call to &lt;a href=&quot;pdb#pdb.set_trace&quot;&gt;&lt;code&gt;pdb.set_trace()&lt;/code&gt;&lt;/a&gt; in a doctest example, and you&amp;rsquo;ll drop into the Python debugger when that line is executed. Then you can inspect current values of variables, and so on. For example, suppose &lt;code&gt;a.py&lt;/code&gt; contains just this module docstring:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb5ee2b3c4d39d5885e625e1382b9b2cbcbbadc" translate="yes" xml:space="preserve">
          <source>You can also create a &lt;code&gt;Document&lt;/code&gt; by calling a method on a &amp;ldquo;DOM Implementation&amp;rdquo; object. You can get this object either by calling the &lt;code&gt;getDOMImplementation()&lt;/code&gt; function in the &lt;a href=&quot;xml.dom#module-xml.dom&quot;&gt;&lt;code&gt;xml.dom&lt;/code&gt;&lt;/a&gt; package or the &lt;a href=&quot;#module-xml.dom.minidom&quot;&gt;&lt;code&gt;xml.dom.minidom&lt;/code&gt;&lt;/a&gt; module. Once you have a &lt;code&gt;Document&lt;/code&gt;, you can add child nodes to it to populate the DOM:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd29f26483ed42fd8dc1116c4e8174423d8b0c6" translate="yes" xml:space="preserve">
          <source>You can also customize &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; argument conversion to allow instances of your own classes be used as function arguments. &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; looks for an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute and uses this as the function argument. Of course, it must be one of integer, string, or bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e30ddb9ce13f853c2bfa8e3007580a9b8c57cc" translate="yes" xml:space="preserve">
          <source>You can also extract a tar archive into a different directory by passing the directory&amp;rsquo;s name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd455d2467cd1dcd0d2e97d17dee374eccd5cfd" translate="yes" xml:space="preserve">
          <source>You can also get a &lt;a href=&quot;#version&quot;&gt;distribution&amp;rsquo;s version number&lt;/a&gt;, list its &lt;a href=&quot;#files&quot;&gt;constituent files&lt;/a&gt;, and get a list of the distribution&amp;rsquo;s &lt;a href=&quot;#requirements&quot;&gt;Distribution requirements&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68300502198932658513c3b6ded30832208e1d6" translate="yes" xml:space="preserve">
          <source>You can also get the full set of files contained within a distribution. The &lt;code&gt;files()&lt;/code&gt; function takes a distribution package name and returns all of the files installed by this distribution. Each file object returned is a &lt;code&gt;PackagePath&lt;/code&gt;, a &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;pathlib.Path&lt;/a&gt; derived object with additional &lt;code&gt;dist&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; properties as indicated by the metadata. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13be6cdea4e3d4decb6434c0ceed8a0ae35d3756" translate="yes" xml:space="preserve">
          <source>You can also get the set of entry points keyed by group, such as &lt;code&gt;console_scripts&lt;/code&gt;, &lt;code&gt;distutils.commands&lt;/code&gt; and others. Each group contains a sequence of &lt;a href=&quot;#entry-points&quot;&gt;EntryPoint&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c554438646a4fbb6bf065d2eb85cf775c355cab2" translate="yes" xml:space="preserve">
          <source>You can also override this method in an abstract base class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190f0f3ab62c7ad1e17bcd39e5e06e81ea5e0af0" translate="yes" xml:space="preserve">
          <source>You can also set it to any other callable that accepts a single bytestring parameter and returns the resulting object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf53e0a2dfd4a1e030ae29ed48f2c5b451befc1" translate="yes" xml:space="preserve">
          <source>You can also supply the special name &lt;code&gt;:memory:&lt;/code&gt; to create a database in RAM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10258a035721306e7f2e7a26bdaef81ffbba54de" translate="yes" xml:space="preserve">
          <source>You can also use &lt;strong&gt;pydoc&lt;/strong&gt; to start an HTTP server on the local machine that will serve documentation to visiting Web browsers. &lt;strong&gt;pydoc -p 1234&lt;/strong&gt; will start a HTTP server on port 1234, allowing you to browse the documentation at &lt;code&gt;http://localhost:1234/&lt;/code&gt; in your preferred Web browser. Specifying &lt;code&gt;0&lt;/code&gt; as the port number will select an arbitrary unused port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda72f19cb6e48b513d9b28377c92f2ebdb8b1bd" translate="yes" xml:space="preserve">
          <source>You can also use a callable Python object (a function or a class for example) as the &lt;code&gt;restype&lt;/code&gt; attribute, if the foreign function returns an integer. The callable will be called with the &lt;em&gt;integer&lt;/em&gt; the C function returns, and the result of this call will be used as the result of your function call. This is useful to check for error return values and automatically raise an exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454870431f74d4866521fb0079e0632baf5ce8fd" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement and the &lt;a href=&quot;#decimal.localcontext&quot;&gt;&lt;code&gt;localcontext()&lt;/code&gt;&lt;/a&gt; function to temporarily change the active context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f46ed4471fe65e1faf5ebf1891ef4d016092a2" translate="yes" xml:space="preserve">
          <source>You can avoid calling this method explicitly by using the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. The following code will automatically unlink &lt;em&gt;dom&lt;/em&gt; when the &lt;code&gt;with&lt;/code&gt; block is exited:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff8e543590eb6efdd79bbec14ee431d600224b1" translate="yes" xml:space="preserve">
          <source>You can avoid having to call this method explicitly if you use the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, which will shutdown the &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; (waiting as if &lt;a href=&quot;#concurrent.futures.Executor.shutdown&quot;&gt;&lt;code&gt;Executor.shutdown()&lt;/code&gt;&lt;/a&gt; were called with &lt;em&gt;wait&lt;/em&gt; set to &lt;code&gt;True&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddf45cff20d1b2f04fdafeec9e97e0ab7dd24ce" translate="yes" xml:space="preserve">
          <source>You can call &lt;a href=&quot;#hashlib.hash.update&quot;&gt;&lt;code&gt;hash.update()&lt;/code&gt;&lt;/a&gt; as many times as you need to iteratively update the hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c3da7abf9b07dabb72b6daa7e9e7c974938c68" translate="yes" xml:space="preserve">
          <source>You can call these functions like any other Python callable. This example uses the &lt;code&gt;time()&lt;/code&gt; function, which returns system time in seconds since the Unix epoch, and the &lt;code&gt;GetModuleHandleA()&lt;/code&gt; function, which returns a win32 module handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9c3c4d6ee67054cff47adecf258437ce7a8a43" translate="yes" xml:space="preserve">
          <source>You can call this method from a different thread to abort any queries that might be executing on the connection. The query will then abort and the caller will get an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34bf214bdf66878eb786811d2f218be800ab6aa" translate="yes" xml:space="preserve">
          <source>You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row. This way, you can implement more advanced ways of returning results, such as returning an object that can also access columns by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfc510d44c70187526acac335d43e20ac9ac3b7" translate="yes" xml:space="preserve">
          <source>You can check whether or not &lt;em&gt;dir_fd&lt;/em&gt; is supported for a particular function on your platform using &lt;a href=&quot;#os.supports_dir_fd&quot;&gt;&lt;code&gt;os.supports_dir_fd&lt;/code&gt;&lt;/a&gt;. If it&amp;rsquo;s unavailable, using it will raise a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f9df6440b712c040a96a597c89c59d5cd17c0" translate="yes" xml:space="preserve">
          <source>You can check whether or not &lt;em&gt;follow_symlinks&lt;/em&gt; is supported for a particular function on your platform using &lt;a href=&quot;#os.supports_follow_symlinks&quot;&gt;&lt;code&gt;os.supports_follow_symlinks&lt;/code&gt;&lt;/a&gt;. If it&amp;rsquo;s unavailable, using it will raise a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d14bdf3cfbfc55eeb19102c8785836424dd0384" translate="yes" xml:space="preserve">
          <source>You can check whether or not &lt;em&gt;path&lt;/em&gt; can be specified as a file descriptor for a particular function on your platform using &lt;a href=&quot;#os.supports_fd&quot;&gt;&lt;code&gt;os.supports_fd&lt;/code&gt;&lt;/a&gt;. If this functionality is unavailable, using it will raise a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e32b868cec8c152364c46842077c4cc9e7fa693" translate="yes" xml:space="preserve">
          <source>You can control how files are opened by providing an opening hook via the &lt;em&gt;openhook&lt;/em&gt; parameter to &lt;a href=&quot;#fileinput.input&quot;&gt;&lt;code&gt;fileinput.input()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fileinput.FileInput&quot;&gt;&lt;code&gt;FileInput()&lt;/code&gt;&lt;/a&gt;. The hook must be a function that takes two arguments, &lt;em&gt;filename&lt;/em&gt; and &lt;em&gt;mode&lt;/em&gt;, and returns an accordingly opened file-like object. Two useful hooks are already provided by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759d4b35c7817f3e8c98a2e2dd3e428931ede384" translate="yes" xml:space="preserve">
          <source>You can control which kind of &lt;code&gt;BEGIN&lt;/code&gt; statements &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; implicitly executes via the &lt;em&gt;isolation_level&lt;/em&gt; parameter to the &lt;a href=&quot;#sqlite3.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call, or via the &lt;code&gt;isolation_level&lt;/code&gt; property of connections. If you specify no &lt;em&gt;isolation_level&lt;/em&gt;, a plain &lt;code&gt;BEGIN&lt;/code&gt; is used, which is equivalent to specifying &lt;code&gt;DEFERRED&lt;/code&gt;. Other possible values are &lt;code&gt;IMMEDIATE&lt;/code&gt; and &lt;code&gt;EXCLUSIVE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34baf03473d0f12ec482dd3869630ac31ac0cdee" translate="yes" xml:space="preserve">
          <source>You can create a new object structure by creating &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instances, adding attachments and all the appropriate headers manually. For MIME messages though, the &lt;a href=&quot;email#module-email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; package provides some convenient subclasses to make things easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5697da2c07ba075dd78f5d4867d1c352a9a54b9" translate="yes" xml:space="preserve">
          <source>You can deactivate a virtual environment by typing &amp;ldquo;deactivate&amp;rdquo; in your shell. The exact mechanism is platform-specific and is an internal implementation detail (typically a script or shell function will be used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3165c20f5760e56d7cc769937fc9c54ec9eb5b3c" translate="yes" xml:space="preserve">
          <source>You can disable the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s implicit transaction management by setting &lt;code&gt;isolation_level&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;. This will leave the underlying &lt;code&gt;sqlite3&lt;/code&gt; library operating in &lt;code&gt;autocommit&lt;/code&gt; mode. You can then completely control the transaction state by explicitly issuing &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;ROLLBACK&lt;/code&gt;, &lt;code&gt;SAVEPOINT&lt;/code&gt;, and &lt;code&gt;RELEASE&lt;/code&gt; statements in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700422f5e3ee3a72c11fcc9addee940ea1cbf9da" translate="yes" xml:space="preserve">
          <source>You can either call &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; with three arguments or two arguments. The three argument form takes the object to be patched, the attribute name and the object to replace the attribute with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931d434403a5284cf6c44cafa1f3fb736e71253d" translate="yes" xml:space="preserve">
          <source>You can escape other strings of data by passing a dictionary as the optional &lt;em&gt;entities&lt;/em&gt; parameter. The keys and values must all be strings; each key will be replaced with its corresponding value. The characters &lt;code&gt;'&amp;amp;'&lt;/code&gt;, &lt;code&gt;'&amp;lt;'&lt;/code&gt; and &lt;code&gt;'&amp;gt;'&lt;/code&gt; are always escaped, even if &lt;em&gt;entities&lt;/em&gt; is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573f2efb0ec1c2a5d9e8ef8857e1296252240138" translate="yes" xml:space="preserve">
          <source>You can extend the list of file types &lt;a href=&quot;#module-imghdr&quot;&gt;&lt;code&gt;imghdr&lt;/code&gt;&lt;/a&gt; can recognize by appending to this variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195ad7b8f2b09586418660df23685063cb22b239" translate="yes" xml:space="preserve">
          <source>You can force use of your own dict as the execution context by passing &lt;code&gt;globs=your_dict&lt;/code&gt; to &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb97e241e1e5c9620f24676030d9e232a3c7a23" translate="yes" xml:space="preserve">
          <source>You can force verbose mode by passing &lt;code&gt;verbose=True&lt;/code&gt; to &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;, or prohibit it by passing &lt;code&gt;verbose=False&lt;/code&gt;. In either of those cases, &lt;code&gt;sys.argv&lt;/code&gt; is not examined by &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt; (so passing &lt;code&gt;-v&lt;/code&gt; or not has no effect).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c7606f98e9dd961b696a7ddeffebdba225ead4" translate="yes" xml:space="preserve">
          <source>You can get the &lt;a href=&quot;#metadata&quot;&gt;metadata for a distribution&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a35d8910326f07b0f1906f10b52c07b4fa3a76e" translate="yes" xml:space="preserve">
          <source>You can get the version string for &lt;code&gt;wheel&lt;/code&gt; by running the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a032c7f821aa0424d57257b08c9ddac86e6e7e57" translate="yes" xml:space="preserve">
          <source>You can handle these with code like the following. Note that for arbitrary getset descriptors invoking these may trigger code execution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb8c4e2de3a151cd226fb06b93bdaeac63f0b4d" translate="yes" xml:space="preserve">
          <source>You can instantiate a &lt;a href=&quot;#curses.textpad.Textbox&quot;&gt;&lt;code&gt;Textbox&lt;/code&gt;&lt;/a&gt; object as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5d59662d5371a0fdfca7a9eef49f35ae3ce64a" translate="yes" xml:space="preserve">
          <source>You can modify some of the &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s attributes before you add it using &lt;a href=&quot;#tarfile.TarFile.addfile&quot;&gt;&lt;code&gt;addfile()&lt;/code&gt;&lt;/a&gt;. If the file object is not an ordinary file object positioned at the beginning of the file, attributes such as &lt;a href=&quot;#tarfile.TarInfo.size&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; may need modifying. This is the case for objects such as &lt;a href=&quot;gzip#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#tarfile.TarInfo.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; may also be modified, in which case &lt;em&gt;arcname&lt;/em&gt; could be a dummy string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e839e79b2480577448952d6abaeadf88b91bec05" translate="yes" xml:space="preserve">
          <source>You can only instantiate the class flavour that corresponds to your system (allowing system calls on non-compatible path flavours could lead to bugs or failures in your application):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0578dfb60398ddde818b7586a4e3117026258d03" translate="yes" xml:space="preserve">
          <source>You can override this to implement custom flushing behavior. This version just zaps the buffer to empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc87e2256f9989176b847850b749c9cc0cc6702" translate="yes" xml:space="preserve">
          <source>You can pass in a list with any combination of module names, and fully qualified class or method names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41bb05a43844e14e9db9886115ec4b066bd61b1" translate="yes" xml:space="preserve">
          <source>You can pass integers 0 or 1 or the strings &lt;code&gt;&quot;yes&quot;&lt;/code&gt; or &lt;code&gt;&quot;no&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0da7097c864ecb1de37d622a186a7c648c4e2a" translate="yes" xml:space="preserve">
          <source>You can patch any builtins within a module. The following example patches builtin &lt;a href=&quot;functions#ord&quot;&gt;&lt;code&gt;ord()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec973428da2c09e12914b4e9b653d668597b96e" translate="yes" xml:space="preserve">
          <source>You can place the definitions of test cases and test suites in the same modules as the code they are to test (such as &lt;code&gt;widget.py&lt;/code&gt;), but there are several advantages to placing the test code in a separate module, such as &lt;code&gt;test_widget.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d273c86ad6ae2b4218d4f8a1cf522c0e7dff12" translate="yes" xml:space="preserve">
          <source>You can re-use the same &lt;a href=&quot;#textwrap.TextWrapper&quot;&gt;&lt;code&gt;TextWrapper&lt;/code&gt;&lt;/a&gt; object many times, and you can change any of its options through direct assignment to instance attributes between uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185356fb3c67fcf9bd0085c884b80c32a2e93e4d" translate="yes" xml:space="preserve">
          <source>You can register new formats or provide your own archiver for any existing formats, by using &lt;a href=&quot;#shutil.register_archive_format&quot;&gt;&lt;code&gt;register_archive_format()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c59d52c0ef34971a017a80bfad6dc0e9a43e0e" translate="yes" xml:space="preserve">
          <source>You can register new formats or provide your own unpacker for any existing formats, by using &lt;a href=&quot;#shutil.register_unpack_format&quot;&gt;&lt;code&gt;register_unpack_format()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eab1e30d733d2bc722869dacae533e1cfa585d" translate="yes" xml:space="preserve">
          <source>You can run tests with more detail (higher verbosity) by passing in the -v flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b607c7c24b44337173d6d898a09d86d78747aa" translate="yes" xml:space="preserve">
          <source>You can run tests with more detailed information by passing in the verbosity argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e511b3bdd1ce757c87785c523b616f2db1ad16" translate="yes" xml:space="preserve">
          <source>You can see that &lt;code&gt;request.Request&lt;/code&gt; has a spec. &lt;code&gt;request.Request&lt;/code&gt; takes two arguments in the constructor (one of which is &lt;em&gt;self&lt;/em&gt;). Here&amp;rsquo;s what happens if we try to call it incorrectly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc1b0288d71a05f65580cdcbf7bcc461729fa07" translate="yes" xml:space="preserve">
          <source>You can specify &lt;em&gt;stack_info&lt;/em&gt; independently of &lt;em&gt;exc_info&lt;/em&gt;, e.g. to just show how you got to a certain point in your code, even when no exceptions were raised. The stack frames are printed following a header line which says:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680d7a6fb2ebb3408e9b53cb231daa64e3270083" translate="yes" xml:space="preserve">
          <source>You can stack up multiple patch decorators using this pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c643863a496cceedd3383ac19ac4ae419cf4d464" translate="yes" xml:space="preserve">
          <source>You can still retrieve the downloaded data in this case, it is stored in the &lt;code&gt;content&lt;/code&gt; attribute of the exception instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de115a11b34194063eb6b97040f48ef6d842aca" translate="yes" xml:space="preserve">
          <source>You can unescape other strings of data by passing a dictionary as the optional &lt;em&gt;entities&lt;/em&gt; parameter. The keys and values must all be strings; each key will be replaced with its corresponding value. &lt;code&gt;'&amp;amp;amp'&lt;/code&gt;, &lt;code&gt;'&amp;amp;lt;'&lt;/code&gt;, and &lt;code&gt;'&amp;amp;gt;'&lt;/code&gt; are always unescaped, even if &lt;em&gt;entities&lt;/em&gt; is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301b27cb1683d2e7c0b8ba419ff685e93d50ce4d" translate="yes" xml:space="preserve">
          <source>You can unregister a finalizer using its &lt;a href=&quot;#weakref.finalize.detach&quot;&gt;&lt;code&gt;detach()&lt;/code&gt;&lt;/a&gt; method. This kills the finalizer and returns the arguments passed to the constructor when it was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166be8a8478c4349774e11ae954bcf15ea13c98f" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#module-sysconfig&quot;&gt;&lt;code&gt;sysconfig&lt;/code&gt;&lt;/a&gt; as a script with Python&amp;rsquo;s &lt;em&gt;-m&lt;/em&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2a75932fb642063f33320e42bd47704f40bcf9" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#str.maketrans&quot;&gt;&lt;code&gt;str.maketrans()&lt;/code&gt;&lt;/a&gt; to create a translation map from character-to-character mappings in different formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef37ecf8c36fd08b114602b0f13c55a48235640" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Optional[X]&lt;/code&gt; as a shorthand for &lt;code&gt;Union[X, None]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93860cdb857fa2ccab62a0fe438384b6ec2ab456" translate="yes" xml:space="preserve">
          <source>You can use breakpoint commands to start your program up again. Simply use the &lt;a href=&quot;#pdbcommand-continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; command, or &lt;a href=&quot;#pdbcommand-step&quot;&gt;&lt;code&gt;step&lt;/code&gt;&lt;/a&gt;, or any other command that resumes execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a9f7442f0c27445596b606f02263419595de19" translate="yes" xml:space="preserve">
          <source>You can use multiple inheritance with &lt;a href=&quot;#typing.Generic&quot;&gt;&lt;code&gt;Generic&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a65a4fd87ab3260a2995232edfe49d33c5209f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;#bytes.maketrans&quot;&gt;&lt;code&gt;bytes.maketrans()&lt;/code&gt;&lt;/a&gt; method to create a translation table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a1452d46bec95e5b939ca953e994a40a430f62" translate="yes" xml:space="preserve">
          <source>You can use the &lt;em&gt;maxBytes&lt;/em&gt; and &lt;em&gt;backupCount&lt;/em&gt; values to allow the file to &lt;em&gt;rollover&lt;/em&gt; at a predetermined size. When the size is about to be exceeded, the file is closed and a new file is silently opened for output. Rollover occurs whenever the current log file is nearly &lt;em&gt;maxBytes&lt;/em&gt; in length; but if either of &lt;em&gt;maxBytes&lt;/em&gt; or &lt;em&gt;backupCount&lt;/em&gt; is zero, rollover never occurs, so you generally want to set &lt;em&gt;backupCount&lt;/em&gt; to at least 1, and have a non-zero &lt;em&gt;maxBytes&lt;/em&gt;. When &lt;em&gt;backupCount&lt;/em&gt; is non-zero, the system will save old log files by appending the extensions &amp;lsquo;.1&amp;rsquo;, &amp;lsquo;.2&amp;rsquo; etc., to the filename. For example, with a &lt;em&gt;backupCount&lt;/em&gt; of 5 and a base file name of &lt;code&gt;app.log&lt;/code&gt;, you would get &lt;code&gt;app.log&lt;/code&gt;, &lt;code&gt;app.log.1&lt;/code&gt;, &lt;code&gt;app.log.2&lt;/code&gt;, up to &lt;code&gt;app.log.5&lt;/code&gt;. The file being written to is always &lt;code&gt;app.log&lt;/code&gt;. When this file is filled, it is closed and renamed to &lt;code&gt;app.log.1&lt;/code&gt;, and if files &lt;code&gt;app.log.1&lt;/code&gt;, &lt;code&gt;app.log.2&lt;/code&gt;, etc. exist, then they are renamed to &lt;code&gt;app.log.2&lt;/code&gt;, &lt;code&gt;app.log.3&lt;/code&gt; etc. respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d81a63f3a0b165e52e93538340d0368d87d32f2" translate="yes" xml:space="preserve">
          <source>You can use the &lt;em&gt;when&lt;/em&gt; to specify the type of &lt;em&gt;interval&lt;/em&gt;. The list of possible values is below. Note that they are not case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cca2e6adbd32c2d102c851414d65aceb06c207" translate="yes" xml:space="preserve">
          <source>You can use their &amp;ldquo;tupleness&amp;rdquo; to pull out the individual arguments for more complex introspection and assertions. The positional arguments are a tuple (an empty tuple if there are no positional arguments) and the keyword arguments are a dictionary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad3bae98cc6e6098bbeb87c404b93a8af1ae980" translate="yes" xml:space="preserve">
          <source>You can use these objects to do transparent transcodings, e.g., from Latin-1 to UTF-8 and back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a3127c0bc2be176f0faafcf4a37b1cfc1abb3f" translate="yes" xml:space="preserve">
          <source>You can use this value if you want to wait on several events at once using &lt;a href=&quot;#multiprocessing.connection.wait&quot;&gt;&lt;code&gt;multiprocessing.connection.wait()&lt;/code&gt;&lt;/a&gt;. Otherwise calling &lt;a href=&quot;#multiprocessing.Process.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; is simpler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2350bed90650fb87541671e1d3f3ffd1c20689e" translate="yes" xml:space="preserve">
          <source>You can, however, build much more complicated structures. A structure can itself contain other structures by using a structure as a field type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64232b1d30a4b1e7f9e804d9e5b5aeafaf0b3c72" translate="yes" xml:space="preserve">
          <source>You cannot go past an anchor, or empty path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66b26b6f2c6b7b9831acdd5ef8c996027377922" translate="yes" xml:space="preserve">
          <source>You cannot subclass or instantiate a union.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966bda9fba3346ce89e289b42714a0f9e137407c" translate="yes" xml:space="preserve">
          <source>You cannot write &lt;code&gt;Union[X][Y]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752587134d14b2eaf8447f7b6f2d68877dfdd6b9" translate="yes" xml:space="preserve">
          <source>You do not need to create instances of this class directly; they are automatically created as needed by &lt;a href=&quot;#wsgiref.simple_server.WSGIServer&quot;&gt;&lt;code&gt;WSGIServer&lt;/code&gt;&lt;/a&gt; objects. You can, however, subclass this class and supply it as a &lt;em&gt;handler_class&lt;/em&gt; to the &lt;a href=&quot;#wsgiref.simple_server.make_server&quot;&gt;&lt;code&gt;make_server()&lt;/code&gt;&lt;/a&gt; function. Some possibly relevant methods for overriding in subclasses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431cbf03af6322a0c5713e5104bf689d6714c32c" translate="yes" xml:space="preserve">
          <source>You do not need to set the epilogue to the empty string in order for the &lt;a href=&quot;email.generator#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; to print a newline at the end of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17530dc8c32d2acb8875bd9c97bc5b2d12e7a45" translate="yes" xml:space="preserve">
          <source>You do not normally need to call this constructor, as the &lt;a href=&quot;#wsgiref.simple_server.make_server&quot;&gt;&lt;code&gt;make_server()&lt;/code&gt;&lt;/a&gt; function can handle all the details for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea99f60bcd9ea0794f5438dbea50265ec904cc2b" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t actually need to subclass &lt;code&gt;Filter&lt;/code&gt;: you can pass any instance which has a &lt;code&gt;filter&lt;/code&gt; method with the same semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc60677ef0241f3f9196c36f2e70aeee248e2fbd" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to subclass the parser to use this method, you can also set it on an instance, to a function that takes a string argument and returns a string. Setting it to &lt;code&gt;str&lt;/code&gt;, for example, would make option names case sensitive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07066c5c390391f5b0549847d58ead8ad1fc7cf5" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to wrap with &lt;a href=&quot;functions#staticmethod&quot;&gt;&lt;code&gt;staticmethod()&lt;/code&gt;&lt;/a&gt; if you&amp;rsquo;re setting the import callable on a configurator &lt;em&gt;instance&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50060718f1fe46b8db95adb5dafc6399b74bdccf" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t specifically &lt;em&gt;need&lt;/em&gt; to activate an environment; activation just prepends the virtual environment&amp;rsquo;s binary directory to your path, so that &amp;ldquo;python&amp;rdquo; invokes the virtual environment&amp;rsquo;s Python interpreter and you can run installed scripts without having to use their full path. However, all scripts installed in a virtual environment should be runnable without activating it, and run with the virtual environment&amp;rsquo;s Python automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d235d73a43398a64c313b4126a55b055ef79602" translate="yes" xml:space="preserve">
          <source>You load libraries by accessing them as attributes of these objects. &lt;em&gt;cdll&lt;/em&gt; loads libraries which export functions using the standard &lt;code&gt;cdecl&lt;/code&gt; calling convention, while &lt;em&gt;windll&lt;/em&gt; libraries call functions using the &lt;code&gt;stdcall&lt;/code&gt; calling convention. &lt;em&gt;oledll&lt;/em&gt; also uses the &lt;code&gt;stdcall&lt;/code&gt; calling convention, and assumes the functions return a Windows &lt;code&gt;HRESULT&lt;/code&gt; error code. The error code is used to automatically raise an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception when the function call fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9f24d09ce2fac5b6b5e198261279380d5bbbd5" translate="yes" xml:space="preserve">
          <source>You may also specify an arbitrary action by passing an Action subclass or other object that implements the same interface. The recommended way to do this is to extend &lt;a href=&quot;#argparse.Action&quot;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;, overriding the &lt;code&gt;__call__&lt;/code&gt; method and optionally the &lt;code&gt;__init__&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355be00ad0a55445558f75bdbc18f08ec59ccd73" translate="yes" xml:space="preserve">
          <source>You may override this method in a subclass. The standard &lt;a href=&quot;#multiprocessing.Process.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method invokes the callable object passed to the object&amp;rsquo;s constructor as the target argument, if any, with sequential and keyword arguments taken from the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwargs&lt;/em&gt; arguments, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d0895d58df495742a522d15640d62134175d03" translate="yes" xml:space="preserve">
          <source>You may override this method in a subclass. The standard &lt;a href=&quot;#threading.Thread.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method invokes the callable object passed to the object&amp;rsquo;s constructor as the &lt;em&gt;target&lt;/em&gt; argument, if any, with positional and keyword arguments taken from the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwargs&lt;/em&gt; arguments, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559ac3792a61fab934579c9348c599af2f6ebff8" translate="yes" xml:space="preserve">
          <source>You may still perform all &lt;code&gt;int&lt;/code&gt; operations on a variable of type &lt;code&gt;UserId&lt;/code&gt;, but the result will always be of type &lt;code&gt;int&lt;/code&gt;. This lets you pass in a &lt;code&gt;UserId&lt;/code&gt; wherever an &lt;code&gt;int&lt;/code&gt; might be expected, but will prevent you from accidentally creating a &lt;code&gt;UserId&lt;/code&gt; in an invalid way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58ea92f23614149b70f3349883f40aae428e954" translate="yes" xml:space="preserve">
          <source>You may then fetch the certificate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f46d58993c757c98a68957af7a5a798eec2a9d" translate="yes" xml:space="preserve">
          <source>You may want a mock object to return &lt;code&gt;False&lt;/code&gt; to a &lt;a href=&quot;functions#hasattr&quot;&gt;&lt;code&gt;hasattr()&lt;/code&gt;&lt;/a&gt; call, or raise an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; when an attribute is fetched. You can do this by providing an object as a &lt;code&gt;spec&lt;/code&gt; for a mock, but that isn&amp;rsquo;t always convenient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332990ee9355f487c806f435103a83563f35c4ce" translate="yes" xml:space="preserve">
          <source>You might also try:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5406fdd2ad0d5807786d625bddb416283fad614" translate="yes" xml:space="preserve">
          <source>You might want to override this method if you want to convert the record to a dict or JSON string, or send a modified copy of the record while leaving the original intact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e922832e7caa53085050a22089bcfc200171f5" translate="yes" xml:space="preserve">
          <source>You mock magic methods by setting the method you are interested in to a function or a mock instance. If you are using a function then it &lt;em&gt;must&lt;/em&gt; take &lt;code&gt;self&lt;/code&gt; as the first argument &lt;a href=&quot;#id10&quot; id=&quot;id8&quot;&gt;3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b20a74562a4b523aea5e75b3238fba4872f230" translate="yes" xml:space="preserve">
          <source>You must fully initialize the parsers before passing them via &lt;code&gt;parents=&lt;/code&gt;. If you change the parent parsers after the child parser, those changes will not be reflected in the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094bc364ccd654aa3f90655ab2f56388f1bc3a61" translate="yes" xml:space="preserve">
          <source>You must have enough privileges to access the shadow password database (this usually means you have to be root).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b23fc7062bc1845bf77eb0ae69f21c191174259" translate="yes" xml:space="preserve">
          <source>You need to derive a concrete subclass, and (at least) supply implementations of the standard &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; methods needed by the &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; methods you use. The &lt;a href=&quot;#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module provides &lt;a href=&quot;#datetime.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;, a simple concrete subclass of &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; which can represent timezones with fixed offset from UTC such as UTC itself or North American EST and EDT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7740fbb5cd79d6ed8c08a1c933712cfcb8fda34d" translate="yes" xml:space="preserve">
          <source>You should be careful, however, not to pass them to functions expecting pointers to mutable memory. If you need mutable memory blocks, ctypes has a &lt;a href=&quot;#ctypes.create_string_buffer&quot;&gt;&lt;code&gt;create_string_buffer()&lt;/code&gt;&lt;/a&gt; function which creates these in various ways. The current memory block contents can be accessed (or changed) with the &lt;code&gt;raw&lt;/code&gt; property; if you want to access it as NUL terminated string, use the &lt;code&gt;value&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1f3cec241149216d9168d1204ff3d17a2754cc" translate="yes" xml:space="preserve">
          <source>You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;https://creativecommons.org/publicdomain/zero/1.0/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed8e41ce1b3c70de9323f77dbec3def95dca2b2" translate="yes" xml:space="preserve">
          <source>You should implement this method if the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; method of your class requires keyword-only arguments. Otherwise, it is recommended for compatibility to implement &lt;a href=&quot;#object.__getnewargs__&quot;&gt;&lt;code&gt;__getnewargs__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608bdf7953eb348170dc085e02eb0651f71c21f7" translate="yes" xml:space="preserve">
          <source>You should report this to the author or maintainer of your Python interpreter. Be sure to report the version of the Python interpreter (&lt;code&gt;sys.version&lt;/code&gt;; it is also printed at the start of an interactive Python session), the exact error message (the exception&amp;rsquo;s associated value) and if possible the source of the program that triggered the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c782fc647ff3aa498d746efee7b7356d8e5253" translate="yes" xml:space="preserve">
          <source>You shouldn&amp;rsquo;t need to format this yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88788ab2aad4e62798ccc5bda983ef8733f0b94" translate="yes" xml:space="preserve">
          <source>You want to make sure that your code only manipulates paths without actually accessing the OS. In this case, instantiating one of the pure classes may be useful since those simply don&amp;rsquo;t have any OS-accessing operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916096316bc5b5aae5496f6bd41e8229ed9c923a" translate="yes" xml:space="preserve">
          <source>Your App Here (Python)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1c084cf7519afce21379d5a8c3eb6c5c1b462b" translate="yes" xml:space="preserve">
          <source>Your tests can pass silently and incorrectly because of the typo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2020bd4ed774a09d2ace95d49cf92fbcbd6e4c" translate="yes" xml:space="preserve">
          <source>ZIP flag bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf3f71c4d3d91d72b09100088bc05f6648939f4" translate="yes" xml:space="preserve">
          <source>ZeroDivisionError</source>
          <target state="translated">ZeroDivisionError</target>
        </trans-unit>
        <trans-unit id="b44e96f9df87d40173b4e4687155b468a0e9dfd0" translate="yes" xml:space="preserve">
          <source>ZipFile Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c28efb247369df3c23761952bb20eddb7ead55" translate="yes" xml:space="preserve">
          <source>ZipFile is also a context manager and therefore supports the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. In the example, &lt;em&gt;myzip&lt;/em&gt; is closed after the &lt;code&gt;with&lt;/code&gt; statement&amp;rsquo;s suite is finished&amp;mdash;even if an exception occurs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32dece39948d14cba87cb98ecec9b9ed1ae759c7" translate="yes" xml:space="preserve">
          <source>ZipInfo Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1f3fc8258eaf3393e718a8a2747228a7fb364a" translate="yes" xml:space="preserve">
          <source>Zoom/Restore Height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817238a139f150e9f4f1383dbd74c0b91ee8bae0" translate="yes" xml:space="preserve">
          <source>__annotations__</source>
          <target state="translated">__annotations__</target>
        </trans-unit>
        <trans-unit id="f409f35afb6adb9d0745380c602ca135f47ef811" translate="yes" xml:space="preserve">
          <source>__code__</source>
          <target state="translated">__code__</target>
        </trans-unit>
        <trans-unit id="62bbeb1e267c62609bdf2f95e593915d20733a27" translate="yes" xml:space="preserve">
          <source>__debug__</source>
          <target state="translated">__debug__</target>
        </trans-unit>
        <trans-unit id="a0ea0ae317994102ce4319f4d6a770bf60eb5981" translate="yes" xml:space="preserve">
          <source>__defaults__</source>
          <target state="translated">__defaults__</target>
        </trans-unit>
        <trans-unit id="2922e12594306ed2f517ef5a341de5247c8c8b83" translate="yes" xml:space="preserve">
          <source>__doc__</source>
          <target state="translated">__doc__</target>
        </trans-unit>
        <trans-unit id="c75fde63c1afd749e27a30c936498ccc7b596d55" translate="yes" xml:space="preserve">
          <source>__file__</source>
          <target state="translated">__file__</target>
        </trans-unit>
        <trans-unit id="d8db95cc58ad2925bc93429910aec8cf2d80ad01" translate="yes" xml:space="preserve">
          <source>__func__</source>
          <target state="translated">__func__</target>
        </trans-unit>
        <trans-unit id="05a73385f8915931c595c28004a15b3861ea5391" translate="yes" xml:space="preserve">
          <source>__future__</source>
          <target state="translated">__future__</target>
        </trans-unit>
        <trans-unit id="8243a95f4a52e809ca3146b71b1c4eb64e88daec" translate="yes" xml:space="preserve">
          <source>__future__ &amp;mdash; Future statement definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a6b9c717b079d3902c3d927cc73c750f401249" translate="yes" xml:space="preserve">
          <source>__globals__</source>
          <target state="translated">__globals__</target>
        </trans-unit>
        <trans-unit id="7fa022a1dbbda2854490c44ddb9bbf67c875072a" translate="yes" xml:space="preserve">
          <source>__import__()</source>
          <target state="translated">__import__()</target>
        </trans-unit>
        <trans-unit id="8f67cc8062d70ff192a2db59e5936d1454a10513" translate="yes" xml:space="preserve">
          <source>__kwdefaults__</source>
          <target state="translated">__kwdefaults__</target>
        </trans-unit>
        <trans-unit id="3a64a9fca18e24c6cc560c53c3603d38f21d45e1" translate="yes" xml:space="preserve">
          <source>__main__</source>
          <target state="translated">__main__</target>
        </trans-unit>
        <trans-unit id="67b7e3744be66edbab900391343b344e45582311" translate="yes" xml:space="preserve">
          <source>__main__ &amp;mdash; Top-level script environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafa226dd7478c948168cc8fe05f819f78f92608" translate="yes" xml:space="preserve">
          <source>__module__</source>
          <target state="translated">__module__</target>
        </trans-unit>
        <trans-unit id="c1dab70a8cae8ab6675cd1dd0933150036c91264" translate="yes" xml:space="preserve">
          <source>__name__</source>
          <target state="translated">__name__</target>
        </trans-unit>
        <trans-unit id="507d7fdd431c9a0168a6ce7ab07d6fddb7444e35" translate="yes" xml:space="preserve">
          <source>__qualname__</source>
          <target state="translated">__qualname__</target>
        </trans-unit>
        <trans-unit id="85e18720c20496ae00ef9cf6b8aa9ea49b266a6b" translate="yes" xml:space="preserve">
          <source>__self__</source>
          <target state="translated">__self__</target>
        </trans-unit>
        <trans-unit id="64f034dabbb4855ca6a80405bbada75a41e4f8cc" translate="yes" xml:space="preserve">
          <source>_dummy_thread</source>
          <target state="translated">_dummy_thread</target>
        </trans-unit>
        <trans-unit id="05d8fbde3570a77c3787f305a76091073da240c1" translate="yes" xml:space="preserve">
          <source>_dummy_thread &amp;mdash; Drop-in replacement for the _thread module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415e8b762f52dba735a8941f5c118bbcbe9c97d0" translate="yes" xml:space="preserve">
          <source>_thread</source>
          <target state="translated">_thread</target>
        </trans-unit>
        <trans-unit id="da5b2839c3debda59dc6d44d96457dca817c02c5" translate="yes" xml:space="preserve">
          <source>_thread &amp;mdash; Low-level threading API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1197d3e3671fe302e212fc6e01a5599df1e24739" translate="yes" xml:space="preserve">
          <source>_thread.LockType</source>
          <target state="translated">_thread.LockType</target>
        </trans-unit>
        <trans-unit id="10b6524890c56d7b3c9d02dd5f9974643c3f4270" translate="yes" xml:space="preserve">
          <source>_thread.TIMEOUT_MAX</source>
          <target state="translated">_thread.TIMEOUT_MAX</target>
        </trans-unit>
        <trans-unit id="e53d1af9d5893b2846a539cfb58a8f7a8d22c89e" translate="yes" xml:space="preserve">
          <source>_thread.allocate_lock()</source>
          <target state="translated">_thread.allocate_lock()</target>
        </trans-unit>
        <trans-unit id="197f373125020edee90662419f7aad02a7b9c17d" translate="yes" xml:space="preserve">
          <source>_thread.error</source>
          <target state="translated">_thread.error</target>
        </trans-unit>
        <trans-unit id="f77734f9a672561ada2f9d806095e7dfabbef029" translate="yes" xml:space="preserve">
          <source>_thread.exit()</source>
          <target state="translated">_thread.exit()</target>
        </trans-unit>
        <trans-unit id="5c63f8bac316bfc2484ee6625f020abc63787523" translate="yes" xml:space="preserve">
          <source>_thread.get_ident()</source>
          <target state="translated">_thread.get_ident()</target>
        </trans-unit>
        <trans-unit id="6ac74f7dc2c2fc2ce38eefb755e928f8633dea0f" translate="yes" xml:space="preserve">
          <source>_thread.get_native_id()</source>
          <target state="translated">_thread.get_native_id()</target>
        </trans-unit>
        <trans-unit id="d0da4946a68555999c188366affeae7b761778a5" translate="yes" xml:space="preserve">
          <source>_thread.interrupt_main()</source>
          <target state="translated">_thread.interrupt_main()</target>
        </trans-unit>
        <trans-unit id="9d73ffbe13b07689c72d68cf3437ff8586dc3977" translate="yes" xml:space="preserve">
          <source>_thread.lock.acquire()</source>
          <target state="translated">_thread.lock.acquire()</target>
        </trans-unit>
        <trans-unit id="a66a2bd7cd05e13cbc2c202fe9970f286f342d5b" translate="yes" xml:space="preserve">
          <source>_thread.lock.locked()</source>
          <target state="translated">_thread.lock.locked()</target>
        </trans-unit>
        <trans-unit id="d9d44b39308b962300683283a9f5c9e4432e993d" translate="yes" xml:space="preserve">
          <source>_thread.lock.release()</source>
          <target state="translated">_thread.lock.release()</target>
        </trans-unit>
        <trans-unit id="92e76f45930236545f796bf83967a90dae1c5dae" translate="yes" xml:space="preserve">
          <source>_thread.stack_size()</source>
          <target state="translated">_thread.stack_size()</target>
        </trans-unit>
        <trans-unit id="fafa7fa9e2fa93f20e14a4830e70ee7f5c7a4195" translate="yes" xml:space="preserve">
          <source>_thread.start_new_thread()</source>
          <target state="translated">_thread.start_new_thread()</target>
        </trans-unit>
        <trans-unit id="e57494049e3e9cb998a365df5ebf284df3d8cd6d" translate="yes" xml:space="preserve">
          <source>_tkinter (C)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884a8a81095a6c975cc5f46c5535aca47a40cc29" translate="yes" xml:space="preserve">
          <source>a (graphical) breadth first tree (using generators)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3c787e15c30f9b3971b501cda113129f37b40e" translate="yes" xml:space="preserve">
          <source>a 4:1 compressed format defined by the Interactive Multimedia Association</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a607ef8d6e4ef1cfa7c1eb06d4c3bf4e4ce6fb6" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; object that would await on &lt;em&gt;obj&lt;/em&gt;, if &lt;em&gt;obj&lt;/em&gt; is an awaitable (&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; is used for the test.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5940cf955ef1b31a29e37f1f63d6add86f7a107" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; object wrapping &lt;em&gt;obj&lt;/em&gt;, if &lt;em&gt;obj&lt;/em&gt; is a coroutine (&lt;a href=&quot;asyncio-task#asyncio.iscoroutine&quot;&gt;&lt;code&gt;iscoroutine()&lt;/code&gt;&lt;/a&gt; is used for the test); in this case the coroutine will be scheduled by &lt;code&gt;ensure_future()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f2374ba0e896c62e9d0dd5eb89cdd040867b25" translate="yes" xml:space="preserve">
          <source>a &lt;em&gt;coroutine function&lt;/em&gt;: an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; function;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f127c8970e8aa4599e65040eeb62944bf8597ce0" translate="yes" xml:space="preserve">
          <source>a &lt;em&gt;coroutine object&lt;/em&gt;: an object returned by calling a &lt;em&gt;coroutine function&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3911806e29cd9080090236543824b5efe243359e" translate="yes" xml:space="preserve">
          <source>a Future-like object with a &lt;code&gt;_asyncio_future_blocking&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5891a4d5a151f585a0c68c891e76d580817faf7b" translate="yes" xml:space="preserve">
          <source>a Microsoft Windows code page, which is typically derived from an 8859 codeset, but replaces control characters with additional graphic characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933e55c18eda96ea117a68f16b3c87e563cf2584" translate="yes" xml:space="preserve">
          <source>a character string or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object representing the path to the file which will be opened. In this case closefd must be &lt;code&gt;True&lt;/code&gt; (the default) otherwise an error will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176fa9b59e72ef5e9b661ef430b1c1b283c9b900" translate="yes" xml:space="preserve">
          <source>a complex number with real part &lt;em&gt;re&lt;/em&gt;, imaginary part &lt;em&gt;im&lt;/em&gt;. &lt;em&gt;im&lt;/em&gt; defaults to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cb47559c45099cd55090b108360692573d92cd" translate="yes" xml:space="preserve">
          <source>a connected and readable &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket.socket&lt;/code&gt;&lt;/a&gt; object; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c913dab07a3e871b091d09309c9a97d8b988174f" translate="yes" xml:space="preserve">
          <source>a file-like object representing a pipe to be connected to the subprocess&amp;rsquo;s standard error stream using &lt;a href=&quot;#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;connect_write_pipe()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8f3cba0ae0c31b00f743c2c6d5a5b70d8654de" translate="yes" xml:space="preserve">
          <source>a file-like object representing a pipe to be connected to the subprocess&amp;rsquo;s standard input stream using &lt;a href=&quot;#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;connect_write_pipe()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ab911c5e7c464d2be123c8d268865bad923208" translate="yes" xml:space="preserve">
          <source>a file-like object representing a pipe to be connected to the subprocess&amp;rsquo;s standard output stream using &lt;a href=&quot;#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;connect_write_pipe()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386f15c8139cf75838d497f40399a9103a530d1f" translate="yes" xml:space="preserve">
          <source>a labelled instruction, indicated with &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0697684cc35bd1f5f3599ded2ae60e4e90d78e" translate="yes" xml:space="preserve">
          <source>a list of all received parameters to the &lt;code&gt;MAIL&lt;/code&gt; command (the elements are uppercase strings; example: &lt;code&gt;['BODY=8BITMIME', 'SMTPUTF8']&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfac224217452ba9a90f212a902ee1a47ab2ecc" translate="yes" xml:space="preserve">
          <source>a logarithmic encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1acc3823ec59584f589d733c73ebf69a828ee4" translate="yes" xml:space="preserve">
          <source>a logarithmic encoding (used by Sun &lt;code&gt;.au&lt;/code&gt; files and &lt;code&gt;/dev/audio&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbc86209c99fc06fedc28d20e4c6998dc771f44" translate="yes" xml:space="preserve">
          <source>a pattern from the wikipedia article on turtle graphics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bc4d762f4726ec868d6099b805944b28af3288" translate="yes" xml:space="preserve">
          <source>a polygon-tuple, i.e. a tuple of pairs of coordinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95f33def911a2c6829c8462e2721a2559400b0d" translate="yes" xml:space="preserve">
          <source>a readable &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0901badac04f3b74bfcc02503440581292c0bb3" translate="yes" xml:space="preserve">
          <source>a text string that is pattern matched against the label of the menu entry, as scanned from the top of the menu to the bottom. Note that this index type is considered after all the others, which means that matches for menu items labelled &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;active&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt; may be interpreted as the above literals, instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05df3d7b372bd2ddee06b6095e01e0e750c166b5" translate="yes" xml:space="preserve">
          <source>a write occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4afe0f0bc0033bb9859082e1c5eae63420774b7a" translate="yes" xml:space="preserve">
          <source>abbreviation of timezone name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9993e364706816aba3e25717850c26c9cd0d89d" translate="yes" xml:space="preserve">
          <source>abc</source>
          <target state="translated">abc</target>
        </trans-unit>
        <trans-unit id="c08753fb4d9d1abe3ccddc9ff169db6e7c7528c6" translate="yes" xml:space="preserve">
          <source>abc &amp;mdash; Abstract Base Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9ea26d3d8e8312edf5a0bebaf7517d3a4dd7e1" translate="yes" xml:space="preserve">
          <source>abc.ABC</source>
          <target state="translated">abc.ABC</target>
        </trans-unit>
        <trans-unit id="ba245dfb03cc341cb848315c70bc52fbf739961d" translate="yes" xml:space="preserve">
          <source>abc.ABCMeta</source>
          <target state="translated">abc.ABCMeta</target>
        </trans-unit>
        <trans-unit id="c29b9fa83144882e32d4099551dd42373c86d00c" translate="yes" xml:space="preserve">
          <source>abc.ABCMeta.__subclasshook__()</source>
          <target state="translated">abc.ABCMeta.__subclasshook__()</target>
        </trans-unit>
        <trans-unit id="138d240b7097248d743cf4adf1116dff39fbf808" translate="yes" xml:space="preserve">
          <source>abc.ABCMeta.register()</source>
          <target state="translated">abc.ABCMeta.register()</target>
        </trans-unit>
        <trans-unit id="ce3bb07a076db923efeb746464a6f9c553a2fd91" translate="yes" xml:space="preserve">
          <source>abc.abstractclassmethod()</source>
          <target state="translated">abc.abstractclassmethod()</target>
        </trans-unit>
        <trans-unit id="391a4594de59167c86b3312bb7d1a502832bc121" translate="yes" xml:space="preserve">
          <source>abc.abstractmethod()</source>
          <target state="translated">abc.abstractmethod()</target>
        </trans-unit>
        <trans-unit id="675688523ca074d550d2cfecde888dba39bbe704" translate="yes" xml:space="preserve">
          <source>abc.abstractproperty()</source>
          <target state="translated">abc.abstractproperty()</target>
        </trans-unit>
        <trans-unit id="7f4dd1d1678c5584a209c064afc9fc4e9d1c6866" translate="yes" xml:space="preserve">
          <source>abc.abstractstaticmethod()</source>
          <target state="translated">abc.abstractstaticmethod()</target>
        </trans-unit>
        <trans-unit id="d812c68f3158523b35db785897b5ce853dc15fc4" translate="yes" xml:space="preserve">
          <source>abc.get_cache_token()</source>
          <target state="translated">abc.get_cache_token()</target>
        </trans-unit>
        <trans-unit id="f486f320564a8de306d258d39e1ac70a94dc6b0b" translate="yes" xml:space="preserve">
          <source>abs()</source>
          <target state="translated">abs()</target>
        </trans-unit>
        <trans-unit id="0ac9a4a735b39498ce6295417c9a6efd1a75b0b5" translate="yes" xml:space="preserve">
          <source>absolute value or magnitude of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91918fa48914734fdde7c9fa83dfa06edba5b8d4" translate="yes" xml:space="preserve">
          <source>absolute_import</source>
          <target state="translated">absolute_import</target>
        </trans-unit>
        <trans-unit id="382bc11f299164afe1dcfd244a27e7defc1cbeae" translate="yes" xml:space="preserve">
          <source>access to the file was revoked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34eb4c4ef005207e8b8f916b9f1fffacccd6945e" translate="yes" xml:space="preserve">
          <source>action</source>
          <target state="translated">action</target>
        </trans-unit>
        <trans-unit id="2bb6b986c5d6fb26dd9dd1054b545ce022371b0c" translate="yes" xml:space="preserve">
          <source>active</source>
          <target state="translated">active</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="b60935378315c696890abc5f5a8f9c2e64c961b3" translate="yes" xml:space="preserve">
          <source>add_help</source>
          <target state="translated">add_help</target>
        </trans-unit>
        <trans-unit id="f11d5a1d231a653bf365de95ff681dc5aeeb1563" translate="yes" xml:space="preserve">
          <source>additional mechanisms for configuring which files to include in source releases (including plugins for integration with version control systems)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f993987424aa4710bfc3774644cca022ab27b0" translate="yes" xml:space="preserve">
          <source>after the name of an &lt;em&gt;accessible&lt;/em&gt; function. A name expression may include dots and subscripts. A calltip remains until it is clicked, the cursor is moved out of the argument area, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc27880044770caeefbfe91e302b68f08a5ae02d" translate="yes" xml:space="preserve">
          <source>aifc</source>
          <target state="translated">aifc</target>
        </trans-unit>
        <trans-unit id="a4afe197481d744f7fca322b4a37e4764abd60c6" translate="yes" xml:space="preserve">
          <source>aifc &amp;mdash; Read and write AIFF and AIFC files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f6b8a71912f7fc50c34c284364a752a0256efc" translate="yes" xml:space="preserve">
          <source>aifc.aifc.aifc()</source>
          <target state="translated">aifc.aifc.aifc()</target>
        </trans-unit>
        <trans-unit id="0453ae178f877711fa7db1f8123f1cfa72eeb9c8" translate="yes" xml:space="preserve">
          <source>aifc.aifc.aiff()</source>
          <target state="translated">aifc.aifc.aiff()</target>
        </trans-unit>
        <trans-unit id="bb14096033040d120a93c51522d6dffb7de1e260" translate="yes" xml:space="preserve">
          <source>aifc.aifc.close()</source>
          <target state="translated">aifc.aifc.close()</target>
        </trans-unit>
        <trans-unit id="12d70c69d5c82625360c46611037aa45b45ce1dc" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getcompname()</source>
          <target state="translated">aifc.aifc.getcompname()</target>
        </trans-unit>
        <trans-unit id="c40797732c9e146ba7433f3293928aeefe471528" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getcomptype()</source>
          <target state="translated">aifc.aifc.getcomptype()</target>
        </trans-unit>
        <trans-unit id="6416d8173134e21b4c4a05d5eff469fd2a510178" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getframerate()</source>
          <target state="translated">aifc.aifc.getframerate()</target>
        </trans-unit>
        <trans-unit id="405f0d2d0566b37e68bfc579071cf3c61c60e388" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getmark()</source>
          <target state="translated">aifc.aifc.getmark()</target>
        </trans-unit>
        <trans-unit id="8948064d1de20b8b679a20672f243a5299b21ec1" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getmarkers()</source>
          <target state="translated">aifc.aifc.getmarkers()</target>
        </trans-unit>
        <trans-unit id="d4b4ea443bcf0728bbfcba98f0e03298164ec0df" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getnchannels()</source>
          <target state="translated">aifc.aifc.getnchannels()</target>
        </trans-unit>
        <trans-unit id="08484d4e35df001a8f09a11b4bc53f04c7c8d3ef" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getnframes()</source>
          <target state="translated">aifc.aifc.getnframes()</target>
        </trans-unit>
        <trans-unit id="75818fc42c5831969a31504ecf6e58acdee90ceb" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getparams()</source>
          <target state="translated">aifc.aifc.getparams()</target>
        </trans-unit>
        <trans-unit id="74825a94be77ce361bb87ed76b1b634542f45094" translate="yes" xml:space="preserve">
          <source>aifc.aifc.getsampwidth()</source>
          <target state="translated">aifc.aifc.getsampwidth()</target>
        </trans-unit>
        <trans-unit id="1530e370a5ce43c6cf7c98bb2102f5068e6d07ae" translate="yes" xml:space="preserve">
          <source>aifc.aifc.readframes()</source>
          <target state="translated">aifc.aifc.readframes()</target>
        </trans-unit>
        <trans-unit id="ba458100eaa3c8166051fe87be0cc1222910c7c1" translate="yes" xml:space="preserve">
          <source>aifc.aifc.rewind()</source>
          <target state="translated">aifc.aifc.rewind()</target>
        </trans-unit>
        <trans-unit id="8e3ec905d65ca1e55289379007aa3f7a3b5c96fe" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setcomptype()</source>
          <target state="translated">aifc.aifc.setcomptype()</target>
        </trans-unit>
        <trans-unit id="024defbc0b24dbe65447c1ed84bd7595dcc81a00" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setframerate()</source>
          <target state="translated">aifc.aifc.setframerate()</target>
        </trans-unit>
        <trans-unit id="3cc42d03ee8631f2b5e22b804d83a1597a8449d3" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setmark()</source>
          <target state="translated">aifc.aifc.setmark()</target>
        </trans-unit>
        <trans-unit id="1cb8192f4b97a06dffc7694c7387c777a52267ad" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setnchannels()</source>
          <target state="translated">aifc.aifc.setnchannels()</target>
        </trans-unit>
        <trans-unit id="05f11f41ff359cc557f8e1e8c348e1441a95aed1" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setnframes()</source>
          <target state="translated">aifc.aifc.setnframes()</target>
        </trans-unit>
        <trans-unit id="e896ee0ee4b9cf60595b6881db3b9e77e324960d" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setparams()</source>
          <target state="translated">aifc.aifc.setparams()</target>
        </trans-unit>
        <trans-unit id="54f653769fe4aaec76605cf3af3f6f8b6f15c6c2" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setpos()</source>
          <target state="translated">aifc.aifc.setpos()</target>
        </trans-unit>
        <trans-unit id="74ce3631171ffe4c0c0fdb11cf1faa6dc6db005f" translate="yes" xml:space="preserve">
          <source>aifc.aifc.setsampwidth()</source>
          <target state="translated">aifc.aifc.setsampwidth()</target>
        </trans-unit>
        <trans-unit id="6a0326d2b4e58c089386c68b5a055b0f09b3ea29" translate="yes" xml:space="preserve">
          <source>aifc.aifc.tell()</source>
          <target state="translated">aifc.aifc.tell()</target>
        </trans-unit>
        <trans-unit id="73c51500ca025eebd8de7ee3ab5f91c07a9add0a" translate="yes" xml:space="preserve">
          <source>aifc.aifc.writeframes()</source>
          <target state="translated">aifc.aifc.writeframes()</target>
        </trans-unit>
        <trans-unit id="ca1eca37d95a3710b1055a8c38b63e6f9a4386db" translate="yes" xml:space="preserve">
          <source>aifc.aifc.writeframesraw()</source>
          <target state="translated">aifc.aifc.writeframesraw()</target>
        </trans-unit>
        <trans-unit id="f15e4337c3fb0967f98a3e925443a3356a98c8d6" translate="yes" xml:space="preserve">
          <source>aifc.open()</source>
          <target state="translated">aifc.open()</target>
        </trans-unit>
        <trans-unit id="9f538a8214518d565759196f96b6834eb3140853" translate="yes" xml:space="preserve">
          <source>all data must be &amp;ldquo;7 bit clean&amp;rdquo; (ASCII-only). This means that where necessary data will be encoded using either quoted-printable or base64 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98e24bfdf711f9de208cd274da9016b3ed7dbaa" translate="yes" xml:space="preserve">
          <source>all languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97b3b03b1d92866058783156abd98660ae28897" translate="yes" xml:space="preserve">
          <source>all source values use original folding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f9502017753523b87ae400ed69244a9ba97902" translate="yes" xml:space="preserve">
          <source>all the group member&amp;rsquo;s user names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11a299df1f32bca9cd69d2a6b94f4b9bf342297" translate="yes" xml:space="preserve">
          <source>all three arguments must be integral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c30c7b13b84d504d937ddcec9e57b2794a46c7d" translate="yes" xml:space="preserve">
          <source>all values are refolded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a2eb0945387d30fb64cb5fe24823e361f0921b" translate="yes" xml:space="preserve">
          <source>all()</source>
          <target state="translated">all()</target>
        </trans-unit>
        <trans-unit id="befee92b4940920c965a810c3ad3b0a846b72aef" translate="yes" xml:space="preserve">
          <source>allow_abbrev</source>
          <target state="translated">allow_abbrev</target>
        </trans-unit>
        <trans-unit id="65b9337dd1eb20bca1113bf6bd11cb96c866245b" translate="yes" xml:space="preserve">
          <source>alternate</source>
          <target state="translated">alternate</target>
        </trans-unit>
        <trans-unit id="e2b4d0a50829a3e97846a1e7cafb22e8703c7155" translate="yes" xml:space="preserve">
          <source>alternate name for bottom tee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63416ebedb0d081a47d4f9d6f57912ed5d592d7f" translate="yes" xml:space="preserve">
          <source>alternate name for crossover or big plus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fb8966ffb1f27cee0bf0f1c7fa9422bb6c39f1" translate="yes" xml:space="preserve">
          <source>alternate name for horizontal line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3feb964c089f96ce17e6932a45e3835de3b7dfd0" translate="yes" xml:space="preserve">
          <source>alternate name for left tee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc509601354a645558fc47c7d4dc979d184aafdf" translate="yes" xml:space="preserve">
          <source>alternate name for lower left corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018ae67973fa06297a15ebb45577e91416d0e23b" translate="yes" xml:space="preserve">
          <source>alternate name for lower right corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e349bb5e049ff3172aad9de3cce680d69e8eec5" translate="yes" xml:space="preserve">
          <source>alternate name for right tee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cd3f8b320b77e5c3503a4f84ef49d747f24523" translate="yes" xml:space="preserve">
          <source>alternate name for top tee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f60aea69ab158ad74e5830d5d6269c1a2e4bedb" translate="yes" xml:space="preserve">
          <source>alternate name for upper left corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d364d99bb37b4ef7a7d4f16cdec03aa41dcac653" translate="yes" xml:space="preserve">
          <source>alternate name for upper right corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecd48f61a574e8dc312d6d8c047b4a68209986c" translate="yes" xml:space="preserve">
          <source>alternate name for vertical line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f50f304cbb4fa69f8fd7343e4838af2aabd689" translate="yes" xml:space="preserve">
          <source>always print matching warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831a347989b6c463b473ff625226cf37820a0fb4" translate="yes" xml:space="preserve">
          <source>an IBM EBCDIC code page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd9d72e0ca40874209aa34fbb292f697a892826" translate="yes" xml:space="preserve">
          <source>an IBM PC code page, which is ASCII compatible</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8734199e830e9acb293bee965da77d4a0b82680" translate="yes" xml:space="preserve">
          <source>an ISO 8859 codeset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defaa00abfab463492270748b99778a6ee43b442" translate="yes" xml:space="preserve">
          <source>an attribute was changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23eb26df14210ff11da031d61e3d01deda08bb4a" translate="yes" xml:space="preserve">
          <source>an image (in this form only used internally!)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c409e7d5f2d44fc604040cf07d87da9fe9a607ce" translate="yes" xml:space="preserve">
          <source>an instance of &lt;a href=&quot;#asyncio.Future&quot;&gt;&lt;code&gt;asyncio.Future&lt;/code&gt;&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f995efdf8f805be957422b78cd7f28fbb512d02e" translate="yes" xml:space="preserve">
          <source>an instance of &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;asyncio.Task&lt;/code&gt;&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e000d6a60bf22a6fe691514bdc8367bf29a807" translate="yes" xml:space="preserve">
          <source>an integer representing the number of an existing OS-level file descriptor to which the resulting &lt;a href=&quot;#io.FileIO&quot;&gt;&lt;code&gt;FileIO&lt;/code&gt;&lt;/a&gt; object will give access. When the FileIO object is closed this fd will be closed as well, unless &lt;em&gt;closefd&lt;/em&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83995f30a3d1a1741d57744d5d27f2a714a30c8f" translate="yes" xml:space="preserve">
          <source>an integer which refers to the numeric position of the entry in the widget, counted from the top, starting with 0;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0375433df0ea443ddf68b574f190368f60494efe" translate="yes" xml:space="preserve">
          <source>analog clock showing time of your computer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06df609aed50661247cc6ec96c1599c193c3ec4" translate="yes" xml:space="preserve">
          <source>anchor</source>
          <target state="translated">anchor</target>
        </trans-unit>
        <trans-unit id="1e128e09279e10059cbea86e5e31740b1d262806" translate="yes" xml:space="preserve">
          <source>anchor: One of the standard Tk anchor values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a025ce8df16a512da5a2558b78ba74e7b6dd6ce" translate="yes" xml:space="preserve">
          <source>anchor: anchor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="8ecd4dbc0053742a7c509a0d6376d40f0bfe6252" translate="yes" xml:space="preserve">
          <source>and &amp;ldquo;Spot.&amp;rdquo; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3e5d5701ee4120f94f9901ea09d3cc13a1a520" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;bar.pth&lt;/code&gt; contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02c59866fa4359754bde06bbe15f6ab58ab379f" translate="yes" xml:space="preserve">
          <source>and a detailed report of all examples tried is printed to standard output, along with assorted summaries at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c2cd947c95900a32447127e362a130d78e802c" translate="yes" xml:space="preserve">
          <source>and as many leading whitespace characters are stripped from the expected output as appeared in the initial &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; line that started the example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49924e10d6cd37a72ac4d264e46efdd07e617a7" translate="yes" xml:space="preserve">
          <source>and days, seconds and microseconds are then normalized so that the representation is unique, with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68436be83f816ca399313c5868dc6f9b731ef16" translate="yes" xml:space="preserve">
          <source>and gathers profiling statistics as in the &lt;a href=&quot;#profile.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; function above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db48768d3b03f869a929128179b99b5a4a4649ef" translate="yes" xml:space="preserve">
          <source>and gathers profiling statistics from the execution. If no file name is present, then this function automatically creates a &lt;a href=&quot;#pstats.Stats&quot;&gt;&lt;code&gt;Stats&lt;/code&gt;&lt;/a&gt; instance and prints a simple profiling report. If the sort value is specified, it is passed to this &lt;a href=&quot;#pstats.Stats&quot;&gt;&lt;code&gt;Stats&lt;/code&gt;&lt;/a&gt; instance to control how the results are sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5464f83c7db3a420d0be3a97bc66ece48f43e62" translate="yes" xml:space="preserve">
          <source>and this contains the special key &lt;code&gt;'()'&lt;/code&gt;, which means that user-defined instantiation is wanted. In this case, the specified factory callable will be used. If it is an actual callable it will be used directly - otherwise, if you specify a string (as in the example) the actual callable will be located using normal import mechanisms. The callable will be called with the &lt;strong&gt;remaining&lt;/strong&gt; items in the configuration sub-dictionary as keyword arguments. In the above example, the formatter with id &lt;code&gt;custom&lt;/code&gt; will be assumed to be returned by the call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e4f3f2ff15fe353b7389d75762c743fc97e669" translate="yes" xml:space="preserve">
          <source>and typechecking for &lt;code&gt;ProUserId&lt;/code&gt; will work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4507118251215dee733e012eac214635b4fe95ff" translate="yes" xml:space="preserve">
          <source>and you would get a list of callers for each of the listed functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="516d70777b5ffab32d73d264205e523acd04b40b" translate="yes" xml:space="preserve">
          <source>annotations</source>
          <target state="translated">annotations</target>
        </trans-unit>
        <trans-unit id="99015e660225c5c03c3475fde514fd091b962ea2" translate="yes" xml:space="preserve">
          <source>another elementary example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff132e36aa3e3703921453a59a2fcc712f2ccb4" translate="yes" xml:space="preserve">
          <source>ansi, dbcs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e806bac8f67f0550fefa93d0ca9ae041cc0226" translate="yes" xml:space="preserve">
          <source>answered</source>
          <target state="translated">answered</target>
        </trans-unit>
        <trans-unit id="3286eef174626f77e92241d8fd52ea18f5436387" translate="yes" xml:space="preserve">
          <source>any other positive value means use a buffer of approximately that size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec1ef429d6ab4fa9af71b7fac096b95fc180f8d" translate="yes" xml:space="preserve">
          <source>any()</source>
          <target state="translated">any()</target>
        </trans-unit>
        <trans-unit id="211af7ee72fb53f391fb355d41a2c2edba563ac5" translate="yes" xml:space="preserve">
          <source>aperiodic tiling with kites and darts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade27d06479d7589d7bd4a048b4421691e4e2251" translate="yes" xml:space="preserve">
          <source>appends &lt;em&gt;x&lt;/em&gt; to the end of the sequence (same as &lt;code&gt;s[len(s):len(s)] = [x]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e750ee7c231477c66be61075d1aafe532a03970f" translate="yes" xml:space="preserve">
          <source>argparse</source>
          <target state="translated">argparse</target>
        </trans-unit>
        <trans-unit id="10f056e7e3ead36a24a095fa78ff24229b498013" translate="yes" xml:space="preserve">
          <source>argparse &amp;mdash; Parser for command-line options, arguments and sub-commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350c06d7c67176d63d3abec685ce0a3d967c6661" translate="yes" xml:space="preserve">
          <source>argparse.Action</source>
          <target state="translated">argparse.Action</target>
        </trans-unit>
        <trans-unit id="599b0d53ee7b4cc0794ace141b8db0c874665cd5" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentDefaultsHelpFormatter</source>
          <target state="translated">argparse.ArgumentDefaultsHelpFormatter</target>
        </trans-unit>
        <trans-unit id="b3687fe203c94fedb43e3a2fe0211134771c2167" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser</source>
          <target state="translated">argparse.ArgumentParser</target>
        </trans-unit>
        <trans-unit id="bcf8d95221c0bf12aa2ef85b16f395c1104e22ff" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.add_argument()</source>
          <target state="translated">argparse.ArgumentParser.add_argument()</target>
        </trans-unit>
        <trans-unit id="6ce20928d862070bfb9a9c643b5c485976533a79" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.add_argument_group()</source>
          <target state="translated">argparse.ArgumentParser.add_argument_group()</target>
        </trans-unit>
        <trans-unit id="fef8efe0fd6776ab85f48813a6235371bdcc949a" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.add_mutually_exclusive_group()</source>
          <target state="translated">argparse.ArgumentParser.add_mutually_exclusive_group()</target>
        </trans-unit>
        <trans-unit id="2cdaacbf7dfdfe104f037d63f7aa7ae843cba057" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.add_subparsers()</source>
          <target state="translated">argparse.ArgumentParser.add_subparsers()</target>
        </trans-unit>
        <trans-unit id="ce8ac1e7f2953183a7b0410e8d63d2d955ac3573" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.convert_arg_line_to_args()</source>
          <target state="translated">argparse.ArgumentParser.convert_arg_line_to_args()</target>
        </trans-unit>
        <trans-unit id="80989c3420a374a5f1da34834fc72416dd17c3f9" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.error()</source>
          <target state="translated">argparse.ArgumentParser.error()</target>
        </trans-unit>
        <trans-unit id="2dbf9562be586c867eb625213e167c133a6929be" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.exit()</source>
          <target state="translated">argparse.ArgumentParser.exit()</target>
        </trans-unit>
        <trans-unit id="a6a17db975444bbb2874273539f1a81935b5e842" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.format_help()</source>
          <target state="translated">argparse.ArgumentParser.format_help()</target>
        </trans-unit>
        <trans-unit id="1c97e8be425f9c663e90675669f86fa6efb84801" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.format_usage()</source>
          <target state="translated">argparse.ArgumentParser.format_usage()</target>
        </trans-unit>
        <trans-unit id="019545ee1d025e2ebe215e3b46308bd84eb6ea4d" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.get_default()</source>
          <target state="translated">argparse.ArgumentParser.get_default()</target>
        </trans-unit>
        <trans-unit id="618ede71f07df74ee8fb88aeb53655a0c671934b" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.parse_args()</source>
          <target state="translated">argparse.ArgumentParser.parse_args()</target>
        </trans-unit>
        <trans-unit id="4df768b7fc07c190ca94c9c958cc286350fcc800" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.parse_intermixed_args()</source>
          <target state="translated">argparse.ArgumentParser.parse_intermixed_args()</target>
        </trans-unit>
        <trans-unit id="c8bb46f482956b7b386a936d212ea93a8cbe535b" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.parse_known_args()</source>
          <target state="translated">argparse.ArgumentParser.parse_known_args()</target>
        </trans-unit>
        <trans-unit id="e0e3c6b9b8be1ec9f244d89abbe2fed99b51c74e" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.parse_known_intermixed_args()</source>
          <target state="translated">argparse.ArgumentParser.parse_known_intermixed_args()</target>
        </trans-unit>
        <trans-unit id="28299fb8dc1b747072fed8228aecd295d5b551b9" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.print_help()</source>
          <target state="translated">argparse.ArgumentParser.print_help()</target>
        </trans-unit>
        <trans-unit id="6355d32a54ffe4ddb34f08c93e5e5b6ae83e34da" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.print_usage()</source>
          <target state="translated">argparse.ArgumentParser.print_usage()</target>
        </trans-unit>
        <trans-unit id="fc187baec989c8602bd2183928768d6ad6feb160" translate="yes" xml:space="preserve">
          <source>argparse.ArgumentParser.set_defaults()</source>
          <target state="translated">argparse.ArgumentParser.set_defaults()</target>
        </trans-unit>
        <trans-unit id="3dcd786751e36950823a14e5ec40575c6f6ee59f" translate="yes" xml:space="preserve">
          <source>argparse.FileType</source>
          <target state="translated">argparse.FileType</target>
        </trans-unit>
        <trans-unit id="2f811bc5fffa23427f3378a499934fbfaf43e283" translate="yes" xml:space="preserve">
          <source>argparse.MetavarTypeHelpFormatter</source>
          <target state="translated">argparse.MetavarTypeHelpFormatter</target>
        </trans-unit>
        <trans-unit id="49e00d8f8f1da08540d06bed4e1c1269ac538f3f" translate="yes" xml:space="preserve">
          <source>argparse.Namespace</source>
          <target state="translated">argparse.Namespace</target>
        </trans-unit>
        <trans-unit id="c79fcb2e4b112ad26c846e4647c2857d484cafc7" translate="yes" xml:space="preserve">
          <source>argparse.RawDescriptionHelpFormatter</source>
          <target state="translated">argparse.RawDescriptionHelpFormatter</target>
        </trans-unit>
        <trans-unit id="e5182d2de64873a544a12409b01c9bdcc14fbd28" translate="yes" xml:space="preserve">
          <source>argparse.RawTextHelpFormatter</source>
          <target state="translated">argparse.RawTextHelpFormatter</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="640f60eaacba7f2e4d989e622e94831adbf4444e" translate="yes" xml:space="preserve">
          <source>argument_default</source>
          <target state="translated">argument_default</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="535e013f86b402ad618f14b53bc2dc8be2caebc4" translate="yes" xml:space="preserve">
          <source>array &amp;mdash; Efficient arrays of numeric values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4138ee51e47b37c1c9c527b2387a7557e6eb894b" translate="yes" xml:space="preserve">
          <source>array.__new__</source>
          <target state="translated">array.__new__</target>
        </trans-unit>
        <trans-unit id="e48407cd9fff425b9dc77ee94c133cce8b880d67" translate="yes" xml:space="preserve">
          <source>array.array</source>
          <target state="translated">array.array</target>
        </trans-unit>
        <trans-unit id="a9ea83b3b6f727974378192eb1164a51a6b12dd4" translate="yes" xml:space="preserve">
          <source>array.array.append()</source>
          <target state="translated">array.array.append()</target>
        </trans-unit>
        <trans-unit id="be64b2c79973b79ffc4f8f3ff24bd6fbeb52aa58" translate="yes" xml:space="preserve">
          <source>array.array.buffer_info()</source>
          <target state="translated">array.array.buffer_info()</target>
        </trans-unit>
        <trans-unit id="67815ad34b9af9c5c28147dca6f991e3c2a9f111" translate="yes" xml:space="preserve">
          <source>array.array.byteswap()</source>
          <target state="translated">array.array.byteswap()</target>
        </trans-unit>
        <trans-unit id="5aad55a8e4d33dceeddd262d668dcc89a515db7b" translate="yes" xml:space="preserve">
          <source>array.array.count()</source>
          <target state="translated">array.array.count()</target>
        </trans-unit>
        <trans-unit id="b09bf32d0eac11e292bc0f80981a582578d1e80f" translate="yes" xml:space="preserve">
          <source>array.array.extend()</source>
          <target state="translated">array.array.extend()</target>
        </trans-unit>
        <trans-unit id="4b19ab46453a5d932cb1b71196d6f0d9a0a597bc" translate="yes" xml:space="preserve">
          <source>array.array.frombytes()</source>
          <target state="translated">array.array.frombytes()</target>
        </trans-unit>
        <trans-unit id="b9d92910d003def0d6a21f00a82fb249fd99bc76" translate="yes" xml:space="preserve">
          <source>array.array.fromfile()</source>
          <target state="translated">array.array.fromfile()</target>
        </trans-unit>
        <trans-unit id="0ffafb68c4195ae137eea415caf81799399d36bb" translate="yes" xml:space="preserve">
          <source>array.array.fromlist()</source>
          <target state="translated">array.array.fromlist()</target>
        </trans-unit>
        <trans-unit id="972cd5298afac7504de42799e5c0e57f757a64ae" translate="yes" xml:space="preserve">
          <source>array.array.fromstring()</source>
          <target state="translated">array.array.fromstring()</target>
        </trans-unit>
        <trans-unit id="f7bd833f28eca7cb489511d9f395620c08e0d893" translate="yes" xml:space="preserve">
          <source>array.array.fromunicode()</source>
          <target state="translated">array.array.fromunicode()</target>
        </trans-unit>
        <trans-unit id="d7591d892f7ca0c7d147f8e2c5a612119a79de7e" translate="yes" xml:space="preserve">
          <source>array.array.index()</source>
          <target state="translated">array.array.index()</target>
        </trans-unit>
        <trans-unit id="3400766abaef964c05b25a247722ddf1a2924c66" translate="yes" xml:space="preserve">
          <source>array.array.insert()</source>
          <target state="translated">array.array.insert()</target>
        </trans-unit>
        <trans-unit id="b340829304907a939f0548aeefcd3cd4a5480279" translate="yes" xml:space="preserve">
          <source>array.array.itemsize</source>
          <target state="translated">array.array.itemsize</target>
        </trans-unit>
        <trans-unit id="3b4e5fe384e70ecad2ac0419db4780d846d7ae33" translate="yes" xml:space="preserve">
          <source>array.array.pop()</source>
          <target state="translated">array.array.pop()</target>
        </trans-unit>
        <trans-unit id="49a47f96560139b0d0c22fa97a8333e5ba3f34cc" translate="yes" xml:space="preserve">
          <source>array.array.remove()</source>
          <target state="translated">array.array.remove()</target>
        </trans-unit>
        <trans-unit id="62cdf85ac263f52b0de59953787073347aa845cd" translate="yes" xml:space="preserve">
          <source>array.array.reverse()</source>
          <target state="translated">array.array.reverse()</target>
        </trans-unit>
        <trans-unit id="25a0ddaf4cefd5c469db202cc3e9f0d4f071d007" translate="yes" xml:space="preserve">
          <source>array.array.tobytes()</source>
          <target state="translated">array.array.tobytes()</target>
        </trans-unit>
        <trans-unit id="148b45ff6ab81391b06688a615220942c1be6983" translate="yes" xml:space="preserve">
          <source>array.array.tofile()</source>
          <target state="translated">array.array.tofile()</target>
        </trans-unit>
        <trans-unit id="b8b2e306cdabede8cdd0efb3cf0fc7de72cdcf11" translate="yes" xml:space="preserve">
          <source>array.array.tolist()</source>
          <target state="translated">array.array.tolist()</target>
        </trans-unit>
        <trans-unit id="39c98e5af7268b91efb5d8be0de236aceb2a95c8" translate="yes" xml:space="preserve">
          <source>array.array.tostring()</source>
          <target state="translated">array.array.tostring()</target>
        </trans-unit>
        <trans-unit id="da6bbfbd079a2850c2967de6fb2548eb885aa298" translate="yes" xml:space="preserve">
          <source>array.array.tounicode()</source>
          <target state="translated">array.array.tounicode()</target>
        </trans-unit>
        <trans-unit id="e43925fd71f9a294136112147e1d8a8fa0a3004b" translate="yes" xml:space="preserve">
          <source>array.array.typecode</source>
          <target state="translated">array.array.typecode</target>
        </trans-unit>
        <trans-unit id="59c8c0c6d5e4e19593900a146c9dfef836ac4eb9" translate="yes" xml:space="preserve">
          <source>array.typecodes</source>
          <target state="translated">array.typecodes</target>
        </trans-unit>
        <trans-unit id="dd26316c2ceb8d1e92be03ac18151182967d643b" translate="yes" xml:space="preserve">
          <source>arrives while the main thread is blocked by a call to &lt;code&gt;BoundedSemaphore.acquire()&lt;/code&gt;, &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt;&lt;code&gt;Lock.acquire()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.RLock.acquire&quot;&gt;&lt;code&gt;RLock.acquire()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Semaphore.acquire()&lt;/code&gt;, &lt;code&gt;Condition.acquire()&lt;/code&gt; or &lt;code&gt;Condition.wait()&lt;/code&gt; then the call will be immediately interrupted and &lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt;&lt;code&gt;KeyboardInterrupt&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c59a35e3fd69af10856b275ad389dd13801d23" translate="yes" xml:space="preserve">
          <source>arrow pointing down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c066b36ea8b32076964c766f8a0324ca4eb4b9" translate="yes" xml:space="preserve">
          <source>ascii</source>
          <target state="translated">ascii</target>
        </trans-unit>
        <trans-unit id="ed52264993856d6c8394c0dbf5ec6eb4cfd96def" translate="yes" xml:space="preserve">
          <source>ascii()</source>
          <target state="translated">ascii()</target>
        </trans-unit>
        <trans-unit id="d25fa281a64c10f8fc9b121f25ff1a1d91fd6d3b" translate="yes" xml:space="preserve">
          <source>asctime</source>
          <target state="translated">asctime</target>
        </trans-unit>
        <trans-unit id="013f4a2d49ec49febb6cd18cc91111ed989fb99d" translate="yes" xml:space="preserve">
          <source>assert the mock has been called with the specified arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9260e296f44f4454063a3e0941ef8632d2f82f" translate="yes" xml:space="preserve">
          <source>assert the mock has been called with the specified calls. The &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt; list is checked for the calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25097071a4d1f84d826e1782c1395c32b7f562a" translate="yes" xml:space="preserve">
          <source>assertAlmostEquals</source>
          <target state="translated">assertAlmostEquals</target>
        </trans-unit>
        <trans-unit id="b221e27e0ff7a2bddbad1afe92577208176a7461" translate="yes" xml:space="preserve">
          <source>assertEquals</source>
          <target state="translated">assertEquals</target>
        </trans-unit>
        <trans-unit id="b49246367e7f0e09c0f2be9821197efd11a354f7" translate="yes" xml:space="preserve">
          <source>assertNotAlmostEquals</source>
          <target state="translated">assertNotAlmostEquals</target>
        </trans-unit>
        <trans-unit id="1eed2668ab41ab807ca181fb2255284af66a1706" translate="yes" xml:space="preserve">
          <source>assertNotEquals</source>
          <target state="translated">assertNotEquals</target>
        </trans-unit>
        <trans-unit id="05db0ecb4b1a0720f91d87129d9c9c8abb4781af" translate="yes" xml:space="preserve">
          <source>assertNotRegexpMatches</source>
          <target state="translated">assertNotRegexpMatches</target>
        </trans-unit>
        <trans-unit id="d3266358a476a1229f55ac277f102472794623da" translate="yes" xml:space="preserve">
          <source>assertRaisesRegexp</source>
          <target state="translated">assertRaisesRegexp</target>
        </trans-unit>
        <trans-unit id="649ac97341500b7b81ff62eb4d4ac88bda4a5ea3" translate="yes" xml:space="preserve">
          <source>assertRegexpMatches</source>
          <target state="translated">assertRegexpMatches</target>
        </trans-unit>
        <trans-unit id="a3d41b20f13f15d9fc415e2cc7153762f0cad464" translate="yes" xml:space="preserve">
          <source>assert_</source>
          <target state="translated">assert_</target>
        </trans-unit>
        <trans-unit id="c24c0248770ae98831f8a654310d4c2e07514c61" translate="yes" xml:space="preserve">
          <source>ast</source>
          <target state="translated">ast</target>
        </trans-unit>
        <trans-unit id="d6f808635ebcb386dfa0b964c45a167786c2f55a" translate="yes" xml:space="preserve">
          <source>ast &amp;mdash; Abstract Syntax Trees</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03e35bf8e5d760824e1adbcc8103d83bc6123e4" translate="yes" xml:space="preserve">
          <source>ast Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3729405671c4f650ed7fa48913697ee54188beb" translate="yes" xml:space="preserve">
          <source>ast.AST</source>
          <target state="translated">ast.AST</target>
        </trans-unit>
        <trans-unit id="4584aca55baf6f8f96c587edb62859bf25ee3e4b" translate="yes" xml:space="preserve">
          <source>ast.AST._fields</source>
          <target state="translated">ast.AST._fields</target>
        </trans-unit>
        <trans-unit id="39ddea6bdd19167797c083fedaad67dc24867231" translate="yes" xml:space="preserve">
          <source>ast.AST.col_offset</source>
          <target state="translated">ast.AST.col_offset</target>
        </trans-unit>
        <trans-unit id="b8ab261da2ddd0a14442f0c2cacafe4b90298cee" translate="yes" xml:space="preserve">
          <source>ast.AST.end_col_offset</source>
          <target state="translated">ast.AST.end_col_offset</target>
        </trans-unit>
        <trans-unit id="d16e7a4b5656535900fbd50f5f8c0cbd7ea5e2fc" translate="yes" xml:space="preserve">
          <source>ast.AST.end_lineno</source>
          <target state="translated">ast.AST.end_lineno</target>
        </trans-unit>
        <trans-unit id="d491b0e9b54a6e704b041fe58fe0dc709c27bd17" translate="yes" xml:space="preserve">
          <source>ast.AST.lineno</source>
          <target state="translated">ast.AST.lineno</target>
        </trans-unit>
        <trans-unit id="6e5faf33d23cadcc9aae7082c0198f91a5d7852d" translate="yes" xml:space="preserve">
          <source>ast.NodeTransformer</source>
          <target state="translated">ast.NodeTransformer</target>
        </trans-unit>
        <trans-unit id="97b2879aedfed75f08682a4f0bd9e0dadbfeaaeb" translate="yes" xml:space="preserve">
          <source>ast.NodeVisitor</source>
          <target state="translated">ast.NodeVisitor</target>
        </trans-unit>
        <trans-unit id="8cd0c5ca5bacfaad758f22c56e14e44df83ce7f3" translate="yes" xml:space="preserve">
          <source>ast.NodeVisitor.generic_visit()</source>
          <target state="translated">ast.NodeVisitor.generic_visit()</target>
        </trans-unit>
        <trans-unit id="a3605a70ed4a249255e275f18e842550c3a49426" translate="yes" xml:space="preserve">
          <source>ast.NodeVisitor.visit()</source>
          <target state="translated">ast.NodeVisitor.visit()</target>
        </trans-unit>
        <trans-unit id="96ff62b5d8b1fab3e0d5e1a807e9e7c52367e7bb" translate="yes" xml:space="preserve">
          <source>ast.copy_location()</source>
          <target state="translated">ast.copy_location()</target>
        </trans-unit>
        <trans-unit id="aaaddb66e9a5cabc6aa294b1aad88b794665266c" translate="yes" xml:space="preserve">
          <source>ast.dump()</source>
          <target state="translated">ast.dump()</target>
        </trans-unit>
        <trans-unit id="d8a9bc71d98895876c022a385d023dd5b88439b2" translate="yes" xml:space="preserve">
          <source>ast.fix_missing_locations()</source>
          <target state="translated">ast.fix_missing_locations()</target>
        </trans-unit>
        <trans-unit id="dbad919996d43c26fcce98ec59998f811f62b75c" translate="yes" xml:space="preserve">
          <source>ast.get_docstring()</source>
          <target state="translated">ast.get_docstring()</target>
        </trans-unit>
        <trans-unit id="7659f78669f6ba13dc931a31250fc0ad7885e199" translate="yes" xml:space="preserve">
          <source>ast.get_source_segment()</source>
          <target state="translated">ast.get_source_segment()</target>
        </trans-unit>
        <trans-unit id="5b3088f54d6adcc10d4c79660f932d86a6fd3e85" translate="yes" xml:space="preserve">
          <source>ast.increment_lineno()</source>
          <target state="translated">ast.increment_lineno()</target>
        </trans-unit>
        <trans-unit id="608cbc9ad9985975bba753b47fb7a58a57f1f152" translate="yes" xml:space="preserve">
          <source>ast.iter_child_nodes()</source>
          <target state="translated">ast.iter_child_nodes()</target>
        </trans-unit>
        <trans-unit id="fd0238cfb9e06ddadc11867b07ae5a8d5c6e7290" translate="yes" xml:space="preserve">
          <source>ast.iter_fields()</source>
          <target state="translated">ast.iter_fields()</target>
        </trans-unit>
        <trans-unit id="a617f85f6cc1f2e058d775a66ea4a77aa69e604f" translate="yes" xml:space="preserve">
          <source>ast.literal_eval()</source>
          <target state="translated">ast.literal_eval()</target>
        </trans-unit>
        <trans-unit id="27d4c5bd26de46a93e91d8b3bd291ab59ea59739" translate="yes" xml:space="preserve">
          <source>ast.parse()</source>
          <target state="translated">ast.parse()</target>
        </trans-unit>
        <trans-unit id="b8c9353043b27e7d439408deb52a0e0eb70f6291" translate="yes" xml:space="preserve">
          <source>ast.walk()</source>
          <target state="translated">ast.walk()</target>
        </trans-unit>
        <trans-unit id="1a6fa3630893a36f3c87432d2e3b6a4f42e4f690" translate="yes" xml:space="preserve">
          <source>asynchat</source>
          <target state="translated">asynchat</target>
        </trans-unit>
        <trans-unit id="1edb068e5d829d190b4b29e7ff1fbc3b4dd466ff" translate="yes" xml:space="preserve">
          <source>asynchat &amp;mdash; Asynchronous socket command/response handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179da5692f378a546ceaf299f70728ff58e7efbe" translate="yes" xml:space="preserve">
          <source>asynchat Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255dedcf02d9bf741cc8cbe72e65dd2c07b8adce" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat</source>
          <target state="translated">asynchat.async_chat</target>
        </trans-unit>
        <trans-unit id="3c347dbb646b2b4899abd7de9fc6ae87e3a1ccda" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.ac_in_buffer_size</source>
          <target state="translated">asynchat.async_chat.ac_in_buffer_size</target>
        </trans-unit>
        <trans-unit id="bb86248987c55566e0da95b38761e04869aa8c01" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.ac_out_buffer_size</source>
          <target state="translated">asynchat.async_chat.ac_out_buffer_size</target>
        </trans-unit>
        <trans-unit id="6b68c4f37635e2dfb5cb6a0848df2ab112f21997" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.close_when_done()</source>
          <target state="translated">asynchat.async_chat.close_when_done()</target>
        </trans-unit>
        <trans-unit id="393b5bc332edb7150f9a597f971e7d1105dcf38c" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.collect_incoming_data()</source>
          <target state="translated">asynchat.async_chat.collect_incoming_data()</target>
        </trans-unit>
        <trans-unit id="663a8d20ab4a0979285876537cdb2b4dfee6314e" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.discard_buffers()</source>
          <target state="translated">asynchat.async_chat.discard_buffers()</target>
        </trans-unit>
        <trans-unit id="c35beb1dd7571ef164573f2f8d1e0e1391878502" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.found_terminator()</source>
          <target state="translated">asynchat.async_chat.found_terminator()</target>
        </trans-unit>
        <trans-unit id="f076f9f8b36492393fb18d569c5334a864db352d" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.get_terminator()</source>
          <target state="translated">asynchat.async_chat.get_terminator()</target>
        </trans-unit>
        <trans-unit id="9a0510e69ca8a4cd4e60a4a306d37aa805b721bd" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.push()</source>
          <target state="translated">asynchat.async_chat.push()</target>
        </trans-unit>
        <trans-unit id="5360e2af0a267855a09a78b741cb604f21938776" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.push_with_producer()</source>
          <target state="translated">asynchat.async_chat.push_with_producer()</target>
        </trans-unit>
        <trans-unit id="6d7500a79a5a7886ae4338e280f9643d3d9e35e8" translate="yes" xml:space="preserve">
          <source>asynchat.async_chat.set_terminator()</source>
          <target state="translated">asynchat.async_chat.set_terminator()</target>
        </trans-unit>
        <trans-unit id="4f5a0f016913fc4a169af7be4ea530a3a7d60ba2" translate="yes" xml:space="preserve">
          <source>asyncio</source>
          <target state="translated">asyncio</target>
        </trans-unit>
        <trans-unit id="acc85a432a0479fc747900a8a48464cc0a72a338" translate="yes" xml:space="preserve">
          <source>asyncio &amp;mdash; Asynchronous I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409031429f07b7eac463fdc6f94f9b004a328193" translate="yes" xml:space="preserve">
          <source>asyncio Future is not compatible with the &lt;a href=&quot;concurrent.futures#concurrent.futures.wait&quot;&gt;&lt;code&gt;concurrent.futures.wait()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;concurrent.futures#concurrent.futures.as_completed&quot;&gt;&lt;code&gt;concurrent.futures.as_completed()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24be314bd3746fb5fdcc015b5a93c3240967618" translate="yes" xml:space="preserve">
          <source>asyncio also has the following &lt;em&gt;low-level&lt;/em&gt; APIs to work with subprocesses: &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_shell&quot;&gt;&lt;code&gt;loop.subprocess_shell()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt;&lt;code&gt;loop.connect_read_pipe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;loop.connect_write_pipe()&lt;/code&gt;&lt;/a&gt;, as well as the &lt;a href=&quot;asyncio-protocol#asyncio-subprocess-transports&quot;&gt;Subprocess Transports&lt;/a&gt; and &lt;a href=&quot;asyncio-protocol#asyncio-subprocess-protocols&quot;&gt;Subprocess Protocols&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b835d1fb2dda9e77bec62e99fcbf6d9a2f51d7a" translate="yes" xml:space="preserve">
          <source>asyncio also supports legacy &lt;a href=&quot;#asyncio-generator-based-coro&quot;&gt;generator-based&lt;/a&gt; coroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b406ce6aa2cbd6083cb0946ec4c411b96f2eca0e" translate="yes" xml:space="preserve">
          <source>asyncio checks for &lt;a href=&quot;#asyncio-coroutine-not-scheduled&quot;&gt;coroutines that were not awaited&lt;/a&gt; and logs them; this mitigates the &amp;ldquo;forgotten await&amp;rdquo; pitfall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7bd2413bb5f524ab2ae674f8c41bbcf0dd1649" translate="yes" xml:space="preserve">
          <source>asyncio defines the &lt;a href=&quot;#asyncio.AbstractChildWatcher&quot;&gt;&lt;code&gt;AbstractChildWatcher&lt;/code&gt;&lt;/a&gt; abstract base class, which child watchers should implement, and has four different implementations: &lt;a href=&quot;#asyncio.ThreadedChildWatcher&quot;&gt;&lt;code&gt;ThreadedChildWatcher&lt;/code&gt;&lt;/a&gt; (configured to be used by default), &lt;a href=&quot;#asyncio.MultiLoopChildWatcher&quot;&gt;&lt;code&gt;MultiLoopChildWatcher&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.SafeChildWatcher&quot;&gt;&lt;code&gt;SafeChildWatcher&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#asyncio.FastChildWatcher&quot;&gt;&lt;code&gt;FastChildWatcher&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35e2af169cedbef0564548ebedd9c645b1913d8" translate="yes" xml:space="preserve">
          <source>asyncio has the following basic synchronization primitives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee4a5c8e8226cc032be30ec219f92986b11703b" translate="yes" xml:space="preserve">
          <source>asyncio implements transports for TCP, UDP, SSL, and subprocess pipes. The methods available on a transport depend on the transport&amp;rsquo;s kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e74c311ce00e569f12d7d258e70d8217bc2686" translate="yes" xml:space="preserve">
          <source>asyncio is a library to write &lt;strong&gt;concurrent&lt;/strong&gt; code using the &lt;strong&gt;async/await&lt;/strong&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1968130e3bee412fcf4f123c0aec1d4ab01e140c" translate="yes" xml:space="preserve">
          <source>asyncio is often a perfect fit for IO-bound and high-level &lt;strong&gt;structured&lt;/strong&gt; network code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450a8870e122bc6b74fec284b948b43988353e9e" translate="yes" xml:space="preserve">
          <source>asyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, database connection libraries, distributed task queues, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80703cc8df509e34ba51876b0a261ef299113193" translate="yes" xml:space="preserve">
          <source>asyncio primitives are not thread-safe, therefore they should not be used for OS thread synchronization (use &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt; for that);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbb81cc0737193b5f6da2028ac9494f9cc29426" translate="yes" xml:space="preserve">
          <source>asyncio provides a set of &lt;strong&gt;high-level&lt;/strong&gt; APIs to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef9c17b287851ab6d77c015dc0ff584230a47f0" translate="yes" xml:space="preserve">
          <source>asyncio provides a set of abstract base classes that should be used to implement network protocols. Those classes are meant to be used together with &lt;a href=&quot;#asyncio-transport&quot;&gt;transports&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0011423f4f5fc0b313ea0ab3a841cf46a7c36e85" translate="yes" xml:space="preserve">
          <source>asyncio queues are designed to be similar to classes of the &lt;a href=&quot;queue#module-queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt; module. Although asyncio queues are not thread-safe, they are designed to be used specifically in async/await code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3449fcdad519e762b3acb4165f05944053fdbd0" translate="yes" xml:space="preserve">
          <source>asyncio ships with the following built-in policies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a686db93a5faed45c965917eb89960b088140986" translate="yes" xml:space="preserve">
          <source>asyncio ships with two different event loop implementations: &lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013e977a608e0d40b13786a9333f3236dcb4fac5" translate="yes" xml:space="preserve">
          <source>asyncio support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b61734a1920a354b297238efd53f8862550bdad" translate="yes" xml:space="preserve">
          <source>asyncio synchronization primitives are designed to be similar to those of the &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt; module with two important caveats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56273fee1fa1d4f80c41e394a44f94361806b4fa" translate="yes" xml:space="preserve">
          <source>asyncio uses the &lt;a href=&quot;logging#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module and all logging is performed via the &lt;code&gt;&quot;asyncio&quot;&lt;/code&gt; logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8894d371e575093d6c42da8230a7392ec710669" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractChildWatcher</source>
          <target state="translated">asyncio.AbstractChildWatcher</target>
        </trans-unit>
        <trans-unit id="fc140117dc800098649acf1753c6c5879a99218c" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractChildWatcher.add_child_handler()</source>
          <target state="translated">asyncio.AbstractChildWatcher.add_child_handler()</target>
        </trans-unit>
        <trans-unit id="12053598e3e6da43c5804824253b89992561abda" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractChildWatcher.attach_loop()</source>
          <target state="translated">asyncio.AbstractChildWatcher.attach_loop()</target>
        </trans-unit>
        <trans-unit id="d6e04a52d2d2bb79500559e9d69ead8b0ad3763d" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractChildWatcher.close()</source>
          <target state="translated">asyncio.AbstractChildWatcher.close()</target>
        </trans-unit>
        <trans-unit id="883fa0c7405432c13b12efe5dbb7d952bb575389" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractChildWatcher.is_active()</source>
          <target state="translated">asyncio.AbstractChildWatcher.is_active()</target>
        </trans-unit>
        <trans-unit id="bd57e7d90e390386195636842e8f91fb879c2b6f" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractChildWatcher.remove_child_handler()</source>
          <target state="translated">asyncio.AbstractChildWatcher.remove_child_handler()</target>
        </trans-unit>
        <trans-unit id="3d819f0564a1caf03bb62983fc5654c732036544" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoop</source>
          <target state="translated">asyncio.AbstractEventLoop</target>
        </trans-unit>
        <trans-unit id="bef1701dca2b80811b82c19d57216d4fbfd6eeb3" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoopPolicy</source>
          <target state="translated">asyncio.AbstractEventLoopPolicy</target>
        </trans-unit>
        <trans-unit id="ab6ff1c924d45ad3163fca9b546a9dc40e3252fe" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoopPolicy.get_child_watcher()</source>
          <target state="translated">asyncio.AbstractEventLoopPolicy.get_child_watcher()</target>
        </trans-unit>
        <trans-unit id="5775b2f174ea3b5974d4faaedac26b0ddd943fdf" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoopPolicy.get_event_loop()</source>
          <target state="translated">asyncio.AbstractEventLoopPolicy.get_event_loop()</target>
        </trans-unit>
        <trans-unit id="6e6c22c52fe259ba19e49e6941a68d9283bcac66" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoopPolicy.new_event_loop()</source>
          <target state="translated">asyncio.AbstractEventLoopPolicy.new_event_loop()</target>
        </trans-unit>
        <trans-unit id="10b405c751ae2041116213cf829f0ddaadcb6e95" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoopPolicy.set_child_watcher()</source>
          <target state="translated">asyncio.AbstractEventLoopPolicy.set_child_watcher()</target>
        </trans-unit>
        <trans-unit id="68ea075b651b88abb84f479bfee9d9957580ed16" translate="yes" xml:space="preserve">
          <source>asyncio.AbstractEventLoopPolicy.set_event_loop()</source>
          <target state="translated">asyncio.AbstractEventLoopPolicy.set_event_loop()</target>
        </trans-unit>
        <trans-unit id="bb84288da4190c1a05e1ef8911d4db084be51dbf" translate="yes" xml:space="preserve">
          <source>asyncio.BaseProtocol</source>
          <target state="translated">asyncio.BaseProtocol</target>
        </trans-unit>
        <trans-unit id="ce2ffc52d5704386fdd1f3003d0fcd2b76f507cb" translate="yes" xml:space="preserve">
          <source>asyncio.BaseProtocol.connection_lost()</source>
          <target state="translated">asyncio.BaseProtocol.connection_lost()</target>
        </trans-unit>
        <trans-unit id="abbbce0d6a853b81a686650bf41ada649c94cd74" translate="yes" xml:space="preserve">
          <source>asyncio.BaseProtocol.connection_made()</source>
          <target state="translated">asyncio.BaseProtocol.connection_made()</target>
        </trans-unit>
        <trans-unit id="859e00cfd8c82c317ebdff4752c5507346add6ed" translate="yes" xml:space="preserve">
          <source>asyncio.BaseProtocol.pause_writing()</source>
          <target state="translated">asyncio.BaseProtocol.pause_writing()</target>
        </trans-unit>
        <trans-unit id="ec42a9a08dcf15d9cd691041807f558ed71d8a38" translate="yes" xml:space="preserve">
          <source>asyncio.BaseProtocol.resume_writing()</source>
          <target state="translated">asyncio.BaseProtocol.resume_writing()</target>
        </trans-unit>
        <trans-unit id="bd32a237179e2354c5346485824768a8c658261b" translate="yes" xml:space="preserve">
          <source>asyncio.BaseTransport</source>
          <target state="translated">asyncio.BaseTransport</target>
        </trans-unit>
        <trans-unit id="e48a4b616e5cf60f79d50e48f0d7dc6a7face5b3" translate="yes" xml:space="preserve">
          <source>asyncio.BaseTransport.close()</source>
          <target state="translated">asyncio.BaseTransport.close()</target>
        </trans-unit>
        <trans-unit id="328f6467334f343960e577985835275db3c11810" translate="yes" xml:space="preserve">
          <source>asyncio.BaseTransport.get_extra_info()</source>
          <target state="translated">asyncio.BaseTransport.get_extra_info()</target>
        </trans-unit>
        <trans-unit id="fd60d8f29f5c69e667010e192f48ddabb3effacf" translate="yes" xml:space="preserve">
          <source>asyncio.BaseTransport.get_protocol()</source>
          <target state="translated">asyncio.BaseTransport.get_protocol()</target>
        </trans-unit>
        <trans-unit id="f947fd6a3a07dc75f2cd43c85f854d9872fc51c8" translate="yes" xml:space="preserve">
          <source>asyncio.BaseTransport.is_closing()</source>
          <target state="translated">asyncio.BaseTransport.is_closing()</target>
        </trans-unit>
        <trans-unit id="5216c666df136db521fc575012832de0c245f9ff" translate="yes" xml:space="preserve">
          <source>asyncio.BaseTransport.set_protocol()</source>
          <target state="translated">asyncio.BaseTransport.set_protocol()</target>
        </trans-unit>
        <trans-unit id="2b72936819c2cf71a2e0e20b70ffab7aedf79148" translate="yes" xml:space="preserve">
          <source>asyncio.BoundedSemaphore</source>
          <target state="translated">asyncio.BoundedSemaphore</target>
        </trans-unit>
        <trans-unit id="3355f9c2338c54d50888321f4cbc306413149e05" translate="yes" xml:space="preserve">
          <source>asyncio.BufferedProtocol</source>
          <target state="translated">asyncio.BufferedProtocol</target>
        </trans-unit>
        <trans-unit id="e818c89a5df8710645d99fe2ba4a74162c3abd5c" translate="yes" xml:space="preserve">
          <source>asyncio.BufferedProtocol.buffer_updated()</source>
          <target state="translated">asyncio.BufferedProtocol.buffer_updated()</target>
        </trans-unit>
        <trans-unit id="54edf407242edcf2c75466836b4627c5577a6d52" translate="yes" xml:space="preserve">
          <source>asyncio.BufferedProtocol.eof_received()</source>
          <target state="translated">asyncio.BufferedProtocol.eof_received()</target>
        </trans-unit>
        <trans-unit id="81050141ab01041735808af501c81833f4695a19" translate="yes" xml:space="preserve">
          <source>asyncio.BufferedProtocol.get_buffer()</source>
          <target state="translated">asyncio.BufferedProtocol.get_buffer()</target>
        </trans-unit>
        <trans-unit id="50774bf6f6ce5c047b59589abb3421b645bada43" translate="yes" xml:space="preserve">
          <source>asyncio.CancelledError</source>
          <target state="translated">asyncio.CancelledError</target>
        </trans-unit>
        <trans-unit id="798bb560f86d03d98aabfd02e67a4d811d843669" translate="yes" xml:space="preserve">
          <source>asyncio.Condition</source>
          <target state="translated">asyncio.Condition</target>
        </trans-unit>
        <trans-unit id="8fdd188ff52284fe851178ac02c87329fcdfddf0" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.acquire()</source>
          <target state="translated">asyncio.Condition.acquire()</target>
        </trans-unit>
        <trans-unit id="197043ef4e1166ea4b1a839e3023e1860e4a42b8" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.locked()</source>
          <target state="translated">asyncio.Condition.locked()</target>
        </trans-unit>
        <trans-unit id="9d873a2927480855d52e12e2c1a0ff3b2db3ff24" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.notify()</source>
          <target state="translated">asyncio.Condition.notify()</target>
        </trans-unit>
        <trans-unit id="aea8a2f2f13713ed84ab7d075c97cb948cfa1463" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.notify_all()</source>
          <target state="translated">asyncio.Condition.notify_all()</target>
        </trans-unit>
        <trans-unit id="941382a0bc761428609e9f65a0660c85650df1c1" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.release()</source>
          <target state="translated">asyncio.Condition.release()</target>
        </trans-unit>
        <trans-unit id="7d82e9a7c8f66aa9a3e3423b990356daed45c053" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.wait()</source>
          <target state="translated">asyncio.Condition.wait()</target>
        </trans-unit>
        <trans-unit id="98c45fc46a976633b0732f3961011b9084472935" translate="yes" xml:space="preserve">
          <source>asyncio.Condition.wait_for()</source>
          <target state="translated">asyncio.Condition.wait_for()</target>
        </trans-unit>
        <trans-unit id="55fdae00757fa2ced54250e8bf16e17b19d87be2" translate="yes" xml:space="preserve">
          <source>asyncio.DatagramProtocol</source>
          <target state="translated">asyncio.DatagramProtocol</target>
        </trans-unit>
        <trans-unit id="3aaa02cf0f04afa8df37adbc33cb084595e16d12" translate="yes" xml:space="preserve">
          <source>asyncio.DatagramProtocol.datagram_received()</source>
          <target state="translated">asyncio.DatagramProtocol.datagram_received()</target>
        </trans-unit>
        <trans-unit id="cfa49940b97bd68663f3516ad5387ae822d139a0" translate="yes" xml:space="preserve">
          <source>asyncio.DatagramProtocol.error_received()</source>
          <target state="translated">asyncio.DatagramProtocol.error_received()</target>
        </trans-unit>
        <trans-unit id="107b76c4541b508610868a785ced359eac058eb3" translate="yes" xml:space="preserve">
          <source>asyncio.DatagramTransport</source>
          <target state="translated">asyncio.DatagramTransport</target>
        </trans-unit>
        <trans-unit id="2b7e74ae9755080257ba8b8b18af076ce9e9f606" translate="yes" xml:space="preserve">
          <source>asyncio.DatagramTransport.abort()</source>
          <target state="translated">asyncio.DatagramTransport.abort()</target>
        </trans-unit>
        <trans-unit id="857d3ad98ab5c5783f7a5b7ddd1880052fb0db5d" translate="yes" xml:space="preserve">
          <source>asyncio.DatagramTransport.sendto()</source>
          <target state="translated">asyncio.DatagramTransport.sendto()</target>
        </trans-unit>
        <trans-unit id="fe874a70263a33f4ece612d112af0b23c313b7d6" translate="yes" xml:space="preserve">
          <source>asyncio.DefaultEventLoopPolicy</source>
          <target state="translated">asyncio.DefaultEventLoopPolicy</target>
        </trans-unit>
        <trans-unit id="b095786cac15a2cd7aec75d2bc419fe215083912" translate="yes" xml:space="preserve">
          <source>asyncio.Event</source>
          <target state="translated">asyncio.Event</target>
        </trans-unit>
        <trans-unit id="f0d1a6feb86135b791bd30bf67e0893faa47ca4f" translate="yes" xml:space="preserve">
          <source>asyncio.Event.clear()</source>
          <target state="translated">asyncio.Event.clear()</target>
        </trans-unit>
        <trans-unit id="7a0cab34fd72d5762d653b78ccbb6456dc481aca" translate="yes" xml:space="preserve">
          <source>asyncio.Event.is_set()</source>
          <target state="translated">asyncio.Event.is_set()</target>
        </trans-unit>
        <trans-unit id="b70db3445cdb55edc12dafa8c9ee777e814496d9" translate="yes" xml:space="preserve">
          <source>asyncio.Event.set()</source>
          <target state="translated">asyncio.Event.set()</target>
        </trans-unit>
        <trans-unit id="27afde54983b2459b5b62f27c6ad5de6fdfb1457" translate="yes" xml:space="preserve">
          <source>asyncio.Event.wait()</source>
          <target state="translated">asyncio.Event.wait()</target>
        </trans-unit>
        <trans-unit id="87276f9458c061b84c68416efa276adac58f25aa" translate="yes" xml:space="preserve">
          <source>asyncio.FastChildWatcher</source>
          <target state="translated">asyncio.FastChildWatcher</target>
        </trans-unit>
        <trans-unit id="85a243ba5cf14121daf64c534bd4c67d7f77e339" translate="yes" xml:space="preserve">
          <source>asyncio.Future</source>
          <target state="translated">asyncio.Future</target>
        </trans-unit>
        <trans-unit id="55596b3e5b916459205e86108c1714e26e56a37e" translate="yes" xml:space="preserve">
          <source>asyncio.Future.add_done_callback()</source>
          <target state="translated">asyncio.Future.add_done_callback()</target>
        </trans-unit>
        <trans-unit id="69f9e960b0e2da2e9af81c316271c71ad7fbaf67" translate="yes" xml:space="preserve">
          <source>asyncio.Future.cancel()</source>
          <target state="translated">asyncio.Future.cancel()</target>
        </trans-unit>
        <trans-unit id="73f51b634e5d8ee516e7054c75090d80dd27dff5" translate="yes" xml:space="preserve">
          <source>asyncio.Future.cancelled()</source>
          <target state="translated">asyncio.Future.cancelled()</target>
        </trans-unit>
        <trans-unit id="aca166b3a83feefe4a50ad10a42c7a06d253a33a" translate="yes" xml:space="preserve">
          <source>asyncio.Future.done()</source>
          <target state="translated">asyncio.Future.done()</target>
        </trans-unit>
        <trans-unit id="266058b282bc089411495bf679c4f7ed043d29e3" translate="yes" xml:space="preserve">
          <source>asyncio.Future.exception()</source>
          <target state="translated">asyncio.Future.exception()</target>
        </trans-unit>
        <trans-unit id="318a3c42885983faf728b932f4534102145a0b2f" translate="yes" xml:space="preserve">
          <source>asyncio.Future.get_loop()</source>
          <target state="translated">asyncio.Future.get_loop()</target>
        </trans-unit>
        <trans-unit id="0be14ab5bf1d59d902db23a2b86ae48099d01752" translate="yes" xml:space="preserve">
          <source>asyncio.Future.remove_done_callback()</source>
          <target state="translated">asyncio.Future.remove_done_callback()</target>
        </trans-unit>
        <trans-unit id="88eb1b64a2a222a676a7cc45bb0aaa3e036148cc" translate="yes" xml:space="preserve">
          <source>asyncio.Future.result()</source>
          <target state="translated">asyncio.Future.result()</target>
        </trans-unit>
        <trans-unit id="89923a30bc746e6acb03122a06735d672ec1f13f" translate="yes" xml:space="preserve">
          <source>asyncio.Future.set_exception()</source>
          <target state="translated">asyncio.Future.set_exception()</target>
        </trans-unit>
        <trans-unit id="6dbda717263a43ed3265ead176264efb34a411e5" translate="yes" xml:space="preserve">
          <source>asyncio.Future.set_result()</source>
          <target state="translated">asyncio.Future.set_result()</target>
        </trans-unit>
        <trans-unit id="656a0b6e73c0f0d3e8836f2009c6462363ca3b39" translate="yes" xml:space="preserve">
          <source>asyncio.Handle</source>
          <target state="translated">asyncio.Handle</target>
        </trans-unit>
        <trans-unit id="152e0d69cef6c5a5d312ac76957df4cbb9468720" translate="yes" xml:space="preserve">
          <source>asyncio.Handle.cancel()</source>
          <target state="translated">asyncio.Handle.cancel()</target>
        </trans-unit>
        <trans-unit id="6db98dd91a4830423f9970bac541484a4e683fc8" translate="yes" xml:space="preserve">
          <source>asyncio.Handle.cancelled()</source>
          <target state="translated">asyncio.Handle.cancelled()</target>
        </trans-unit>
        <trans-unit id="57b51063fe51fb40a34af17b508293ed2854eb7f" translate="yes" xml:space="preserve">
          <source>asyncio.IncompleteReadError</source>
          <target state="translated">asyncio.IncompleteReadError</target>
        </trans-unit>
        <trans-unit id="77cf4b9d119dc8b6684e3ab25056aaf3290e177e" translate="yes" xml:space="preserve">
          <source>asyncio.IncompleteReadError.expected</source>
          <target state="translated">asyncio.IncompleteReadError.expected</target>
        </trans-unit>
        <trans-unit id="2c4e91793e62d81828e8265beb138a407a9c5ed9" translate="yes" xml:space="preserve">
          <source>asyncio.IncompleteReadError.partial</source>
          <target state="translated">asyncio.IncompleteReadError.partial</target>
        </trans-unit>
        <trans-unit id="af5869179a75cdad307876794d3b7208676fab0c" translate="yes" xml:space="preserve">
          <source>asyncio.InvalidStateError</source>
          <target state="translated">asyncio.InvalidStateError</target>
        </trans-unit>
        <trans-unit id="0c92244e9e7fc4421db8401350e02266d8769c1e" translate="yes" xml:space="preserve">
          <source>asyncio.LifoQueue</source>
          <target state="translated">asyncio.LifoQueue</target>
        </trans-unit>
        <trans-unit id="7c7e36a7be71d40a4243e9e07bf368441b8b0e52" translate="yes" xml:space="preserve">
          <source>asyncio.LimitOverrunError</source>
          <target state="translated">asyncio.LimitOverrunError</target>
        </trans-unit>
        <trans-unit id="4dd0a80220f5d04ff556bde69406fce7a1a65b93" translate="yes" xml:space="preserve">
          <source>asyncio.LimitOverrunError.consumed</source>
          <target state="translated">asyncio.LimitOverrunError.consumed</target>
        </trans-unit>
        <trans-unit id="0a9371a37aa3ab2545cd1309c2cd46945dfd3454" translate="yes" xml:space="preserve">
          <source>asyncio.Lock</source>
          <target state="translated">asyncio.Lock</target>
        </trans-unit>
        <trans-unit id="b28a34dfd81f91d3d77bf242b6b79aede614da0f" translate="yes" xml:space="preserve">
          <source>asyncio.Lock.acquire()</source>
          <target state="translated">asyncio.Lock.acquire()</target>
        </trans-unit>
        <trans-unit id="07b54441a69980f3c7e727c74bbebcbe4183adf7" translate="yes" xml:space="preserve">
          <source>asyncio.Lock.locked()</source>
          <target state="translated">asyncio.Lock.locked()</target>
        </trans-unit>
        <trans-unit id="2663245357e34c8561c1818781c25411eaee861e" translate="yes" xml:space="preserve">
          <source>asyncio.Lock.release()</source>
          <target state="translated">asyncio.Lock.release()</target>
        </trans-unit>
        <trans-unit id="50c8717b22a045c18355ca41368611e57d80901f" translate="yes" xml:space="preserve">
          <source>asyncio.MultiLoopChildWatcher</source>
          <target state="translated">asyncio.MultiLoopChildWatcher</target>
        </trans-unit>
        <trans-unit id="03f473ca3803986b401d66e00830f97039e38a41" translate="yes" xml:space="preserve">
          <source>asyncio.PriorityQueue</source>
          <target state="translated">asyncio.PriorityQueue</target>
        </trans-unit>
        <trans-unit id="742114872c88b73d864b14e5b1451b3d8f415305" translate="yes" xml:space="preserve">
          <source>asyncio.ProactorEventLoop</source>
          <target state="translated">asyncio.ProactorEventLoop</target>
        </trans-unit>
        <trans-unit id="71db784c802db7243b1dc3527f8b3e037676d171" translate="yes" xml:space="preserve">
          <source>asyncio.Protocol</source>
          <target state="translated">asyncio.Protocol</target>
        </trans-unit>
        <trans-unit id="7e74d0a36949dcccb55ab02675343bce73c6f20f" translate="yes" xml:space="preserve">
          <source>asyncio.Protocol.data_received()</source>
          <target state="translated">asyncio.Protocol.data_received()</target>
        </trans-unit>
        <trans-unit id="7e5ffa9105c4374e50c83967aa1cc944ee41c6f0" translate="yes" xml:space="preserve">
          <source>asyncio.Protocol.eof_received()</source>
          <target state="translated">asyncio.Protocol.eof_received()</target>
        </trans-unit>
        <trans-unit id="ea01f2fe9187933b7d2763ccd852c760cef6db9d" translate="yes" xml:space="preserve">
          <source>asyncio.Queue</source>
          <target state="translated">asyncio.Queue</target>
        </trans-unit>
        <trans-unit id="0fabed4b6952c04a75ca9c33895fd115ffe3fb74" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.empty()</source>
          <target state="translated">asyncio.Queue.empty()</target>
        </trans-unit>
        <trans-unit id="e2d0c06e116e69d1ee769ebf4eeffdadf6fb1c4a" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.full()</source>
          <target state="translated">asyncio.Queue.full()</target>
        </trans-unit>
        <trans-unit id="8cda39836f2b026555588075247fe710b5e14ca3" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.get()</source>
          <target state="translated">asyncio.Queue.get()</target>
        </trans-unit>
        <trans-unit id="73fa1b88e549cd7deb54e9c4143a688f3a51b866" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.get_nowait()</source>
          <target state="translated">asyncio.Queue.get_nowait()</target>
        </trans-unit>
        <trans-unit id="5a7f99f8ee2b00de44553d3a6f54e3e561a1c38c" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.join()</source>
          <target state="translated">asyncio.Queue.join()</target>
        </trans-unit>
        <trans-unit id="f1cfeb7a50b1a0824216f9f5a3b657b1e2a5f149" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.maxsize</source>
          <target state="translated">asyncio.Queue.maxsize</target>
        </trans-unit>
        <trans-unit id="15f1ba400775bb1540f0b627ebfb4725ec6b90eb" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.put()</source>
          <target state="translated">asyncio.Queue.put()</target>
        </trans-unit>
        <trans-unit id="61971a1dad10e02173959242732126f0c584abe5" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.put_nowait()</source>
          <target state="translated">asyncio.Queue.put_nowait()</target>
        </trans-unit>
        <trans-unit id="6c80621b5bb78c52880db427bd81d14d753ef023" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.qsize()</source>
          <target state="translated">asyncio.Queue.qsize()</target>
        </trans-unit>
        <trans-unit id="5e0a6add076d5889da391b92c6b6e117d5255d58" translate="yes" xml:space="preserve">
          <source>asyncio.Queue.task_done()</source>
          <target state="translated">asyncio.Queue.task_done()</target>
        </trans-unit>
        <trans-unit id="b7b124d23234cb2a59638b965a65e2373c782e46" translate="yes" xml:space="preserve">
          <source>asyncio.QueueEmpty</source>
          <target state="translated">asyncio.QueueEmpty</target>
        </trans-unit>
        <trans-unit id="4ba7afa8edcfc311bf40b9d3cd5b792b4ac2909c" translate="yes" xml:space="preserve">
          <source>asyncio.QueueFull</source>
          <target state="translated">asyncio.QueueFull</target>
        </trans-unit>
        <trans-unit id="b7a5dcb798f0371ebc4f697e68ed2eea7599c3a9" translate="yes" xml:space="preserve">
          <source>asyncio.ReadTransport</source>
          <target state="translated">asyncio.ReadTransport</target>
        </trans-unit>
        <trans-unit id="2bee9106b20c956a8b445896c1b78b468f33edaa" translate="yes" xml:space="preserve">
          <source>asyncio.ReadTransport.is_reading()</source>
          <target state="translated">asyncio.ReadTransport.is_reading()</target>
        </trans-unit>
        <trans-unit id="71364182f3ba2b64ae572c2d2165452354de3d9b" translate="yes" xml:space="preserve">
          <source>asyncio.ReadTransport.pause_reading()</source>
          <target state="translated">asyncio.ReadTransport.pause_reading()</target>
        </trans-unit>
        <trans-unit id="5a2b592d747e897a9b4a9bdbdf2a93d3a63c0d69" translate="yes" xml:space="preserve">
          <source>asyncio.ReadTransport.resume_reading()</source>
          <target state="translated">asyncio.ReadTransport.resume_reading()</target>
        </trans-unit>
        <trans-unit id="acdc8cae41cccf1bdc72bcbd395a651ccb6b4cb8" translate="yes" xml:space="preserve">
          <source>asyncio.SafeChildWatcher</source>
          <target state="translated">asyncio.SafeChildWatcher</target>
        </trans-unit>
        <trans-unit id="ed796408c605f0b5b65b3f751b31fbaff4d23208" translate="yes" xml:space="preserve">
          <source>asyncio.SelectorEventLoop</source>
          <target state="translated">asyncio.SelectorEventLoop</target>
        </trans-unit>
        <trans-unit id="b3d1a1cc782d9ee7acfc3a128b3c931f70e0999f" translate="yes" xml:space="preserve">
          <source>asyncio.Semaphore</source>
          <target state="translated">asyncio.Semaphore</target>
        </trans-unit>
        <trans-unit id="69f92840d72be1c70dbbdd60ca98f0280977a60f" translate="yes" xml:space="preserve">
          <source>asyncio.Semaphore.acquire()</source>
          <target state="translated">asyncio.Semaphore.acquire()</target>
        </trans-unit>
        <trans-unit id="2637757911132760a783707e880e290627b1282c" translate="yes" xml:space="preserve">
          <source>asyncio.Semaphore.locked()</source>
          <target state="translated">asyncio.Semaphore.locked()</target>
        </trans-unit>
        <trans-unit id="28f8613c35087ee7cc1672ca8e615232be6560bb" translate="yes" xml:space="preserve">
          <source>asyncio.Semaphore.release()</source>
          <target state="translated">asyncio.Semaphore.release()</target>
        </trans-unit>
        <trans-unit id="b34e0313219956e877d1d4f8fd6f64bb9d2c14b5" translate="yes" xml:space="preserve">
          <source>asyncio.SendfileNotAvailableError</source>
          <target state="translated">asyncio.SendfileNotAvailableError</target>
        </trans-unit>
        <trans-unit id="2774f253b08e11a94a6fa47b4b3f7783e7a81089" translate="yes" xml:space="preserve">
          <source>asyncio.Server</source>
          <target state="translated">asyncio.Server</target>
        </trans-unit>
        <trans-unit id="43f9b589a4cc3ba43c6d55a2f8e8a9194620b555" translate="yes" xml:space="preserve">
          <source>asyncio.Server.close()</source>
          <target state="translated">asyncio.Server.close()</target>
        </trans-unit>
        <trans-unit id="06c30a5151457ddabdfd023eb2f3c3e0a72e66fd" translate="yes" xml:space="preserve">
          <source>asyncio.Server.get_loop()</source>
          <target state="translated">asyncio.Server.get_loop()</target>
        </trans-unit>
        <trans-unit id="941ed1ee0674ecb155bd21d34a8f8484ef88e9ac" translate="yes" xml:space="preserve">
          <source>asyncio.Server.is_serving()</source>
          <target state="translated">asyncio.Server.is_serving()</target>
        </trans-unit>
        <trans-unit id="61a0cc385b34a3fbf70de2538567e507afcece3c" translate="yes" xml:space="preserve">
          <source>asyncio.Server.serve_forever()</source>
          <target state="translated">asyncio.Server.serve_forever()</target>
        </trans-unit>
        <trans-unit id="8226e77637f3ff3577324e4643a3f3acb5814e8b" translate="yes" xml:space="preserve">
          <source>asyncio.Server.sockets</source>
          <target state="translated">asyncio.Server.sockets</target>
        </trans-unit>
        <trans-unit id="7cc109635f50811cf8c9608012534825d13e272c" translate="yes" xml:space="preserve">
          <source>asyncio.Server.start_serving()</source>
          <target state="translated">asyncio.Server.start_serving()</target>
        </trans-unit>
        <trans-unit id="01780d3cfc5f3f4cc36037c36a51ed09d7d981c6" translate="yes" xml:space="preserve">
          <source>asyncio.Server.wait_closed()</source>
          <target state="translated">asyncio.Server.wait_closed()</target>
        </trans-unit>
        <trans-unit id="38041185ab196ab2b36b6a6b14f1be84c1ddb1c7" translate="yes" xml:space="preserve">
          <source>asyncio.StreamReader</source>
          <target state="translated">asyncio.StreamReader</target>
        </trans-unit>
        <trans-unit id="105020a3888d0c8e6d269c35170dc7bf6ca1cace" translate="yes" xml:space="preserve">
          <source>asyncio.StreamReader.at_eof()</source>
          <target state="translated">asyncio.StreamReader.at_eof()</target>
        </trans-unit>
        <trans-unit id="e708989541a4d9f836afc175e254a96c98b4b9d6" translate="yes" xml:space="preserve">
          <source>asyncio.StreamReader.read()</source>
          <target state="translated">asyncio.StreamReader.read()</target>
        </trans-unit>
        <trans-unit id="397660ee44ccdd2443099f8542168fc208335270" translate="yes" xml:space="preserve">
          <source>asyncio.StreamReader.readexactly()</source>
          <target state="translated">asyncio.StreamReader.readexactly()</target>
        </trans-unit>
        <trans-unit id="b51c773b9ad4b603c451c3669fa0a394d994e179" translate="yes" xml:space="preserve">
          <source>asyncio.StreamReader.readline()</source>
          <target state="translated">asyncio.StreamReader.readline()</target>
        </trans-unit>
        <trans-unit id="8d78aba6e5c387bb1325daec8a6857cd1728ea00" translate="yes" xml:space="preserve">
          <source>asyncio.StreamReader.readuntil()</source>
          <target state="translated">asyncio.StreamReader.readuntil()</target>
        </trans-unit>
        <trans-unit id="2392ad6c525269db38d84259c49bff6565f64da7" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter</source>
          <target state="translated">asyncio.StreamWriter</target>
        </trans-unit>
        <trans-unit id="5bf356a6fe512bba229e24258469ca06f072fbee" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.can_write_eof()</source>
          <target state="translated">asyncio.StreamWriter.can_write_eof()</target>
        </trans-unit>
        <trans-unit id="4a65bcd875f18f2e502b7a64e9877b8d9c1ee257" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.close()</source>
          <target state="translated">asyncio.StreamWriter.close()</target>
        </trans-unit>
        <trans-unit id="fef14f194a530e931cfab0164e785dfc14df7807" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.drain()</source>
          <target state="translated">asyncio.StreamWriter.drain()</target>
        </trans-unit>
        <trans-unit id="81e76c8a7b7ca524515ecbb137d6928ca67b5534" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.get_extra_info()</source>
          <target state="translated">asyncio.StreamWriter.get_extra_info()</target>
        </trans-unit>
        <trans-unit id="dadefb8e96640912744f5d7371177ba25b5b3271" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.is_closing()</source>
          <target state="translated">asyncio.StreamWriter.is_closing()</target>
        </trans-unit>
        <trans-unit id="10ad3c35737a542397071ea52ff717dafa791f78" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.transport</source>
          <target state="translated">asyncio.StreamWriter.transport</target>
        </trans-unit>
        <trans-unit id="a2a7cbaf0818f08aadb64193ad55e5589736f920" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.wait_closed()</source>
          <target state="translated">asyncio.StreamWriter.wait_closed()</target>
        </trans-unit>
        <trans-unit id="07cf740ffcf2b56372d2968f005d6131accb8f7c" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.write()</source>
          <target state="translated">asyncio.StreamWriter.write()</target>
        </trans-unit>
        <trans-unit id="61aa522e76c1179975f05c42f195d40348eb5afe" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.write_eof()</source>
          <target state="translated">asyncio.StreamWriter.write_eof()</target>
        </trans-unit>
        <trans-unit id="ff4e7a4bc63f6bb853a90f2a5a9b88ef432ab0ac" translate="yes" xml:space="preserve">
          <source>asyncio.StreamWriter.writelines()</source>
          <target state="translated">asyncio.StreamWriter.writelines()</target>
        </trans-unit>
        <trans-unit id="9f27132d3ced1ebbf416e517274911bcea54a979" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessProtocol</source>
          <target state="translated">asyncio.SubprocessProtocol</target>
        </trans-unit>
        <trans-unit id="aaed5f669115b81965025ae278770f38c1e25f92" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessProtocol.pipe_connection_lost()</source>
          <target state="translated">asyncio.SubprocessProtocol.pipe_connection_lost()</target>
        </trans-unit>
        <trans-unit id="7c53ee42ce4efe0b83a07cc27036cc4336a9a2f0" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessProtocol.pipe_data_received()</source>
          <target state="translated">asyncio.SubprocessProtocol.pipe_data_received()</target>
        </trans-unit>
        <trans-unit id="7577e0543308c10b14374294196dba3347c838c3" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessProtocol.process_exited()</source>
          <target state="translated">asyncio.SubprocessProtocol.process_exited()</target>
        </trans-unit>
        <trans-unit id="78c4f97786c117fe6339e7ad5efaeae1e23507dd" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport</source>
          <target state="translated">asyncio.SubprocessTransport</target>
        </trans-unit>
        <trans-unit id="c740cbca9674816d36a615d73869f782f931e2ec" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.close()</source>
          <target state="translated">asyncio.SubprocessTransport.close()</target>
        </trans-unit>
        <trans-unit id="4db8e49a50cc8326b188429633f7bb6668ebbcfd" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.get_pid()</source>
          <target state="translated">asyncio.SubprocessTransport.get_pid()</target>
        </trans-unit>
        <trans-unit id="f3aa443d08ab74ef464218d02bad725117d7dfea" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.get_pipe_transport()</source>
          <target state="translated">asyncio.SubprocessTransport.get_pipe_transport()</target>
        </trans-unit>
        <trans-unit id="d47fbfc4a3fd1c5964a584076cb93269891ae3e6" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.get_returncode()</source>
          <target state="translated">asyncio.SubprocessTransport.get_returncode()</target>
        </trans-unit>
        <trans-unit id="d38f8e2e10c657ded84b0ee31ef1720cb4c761dc" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.kill()</source>
          <target state="translated">asyncio.SubprocessTransport.kill()</target>
        </trans-unit>
        <trans-unit id="87f2b3968c6261324e313a8c25030f5a9316c12e" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.send_signal()</source>
          <target state="translated">asyncio.SubprocessTransport.send_signal()</target>
        </trans-unit>
        <trans-unit id="391e137ac7f8c12e725c0a028b3d947f9a3dd84a" translate="yes" xml:space="preserve">
          <source>asyncio.SubprocessTransport.terminate()</source>
          <target state="translated">asyncio.SubprocessTransport.terminate()</target>
        </trans-unit>
        <trans-unit id="c5405656894bfbd578596475976b76ab36387b25" translate="yes" xml:space="preserve">
          <source>asyncio.Task</source>
          <target state="translated">asyncio.Task</target>
        </trans-unit>
        <trans-unit id="a1fc6c6a4f6d0326f74dd7fe9ca189b52ad8aa73" translate="yes" xml:space="preserve">
          <source>asyncio.Task.add_done_callback()</source>
          <target state="translated">asyncio.Task.add_done_callback()</target>
        </trans-unit>
        <trans-unit id="e331af5f9d05b7862c2040b3461e6640c28f723e" translate="yes" xml:space="preserve">
          <source>asyncio.Task.all_tasks()</source>
          <target state="translated">asyncio.Task.all_tasks()</target>
        </trans-unit>
        <trans-unit id="42586655a1f35e9c6c568a46cf10006ee6e6bec5" translate="yes" xml:space="preserve">
          <source>asyncio.Task.cancel()</source>
          <target state="translated">asyncio.Task.cancel()</target>
        </trans-unit>
        <trans-unit id="1f995960012526be57825095ec90046ffda35a37" translate="yes" xml:space="preserve">
          <source>asyncio.Task.cancelled()</source>
          <target state="translated">asyncio.Task.cancelled()</target>
        </trans-unit>
        <trans-unit id="c1b61161518071c4f02e5aa0c5875bad136f4f0f" translate="yes" xml:space="preserve">
          <source>asyncio.Task.current_task()</source>
          <target state="translated">asyncio.Task.current_task()</target>
        </trans-unit>
        <trans-unit id="d2edfff1256f58759144962b5cf0a9740405a774" translate="yes" xml:space="preserve">
          <source>asyncio.Task.done()</source>
          <target state="translated">asyncio.Task.done()</target>
        </trans-unit>
        <trans-unit id="94e91f8b578317ee50267a20eec959ea004ae28f" translate="yes" xml:space="preserve">
          <source>asyncio.Task.exception()</source>
          <target state="translated">asyncio.Task.exception()</target>
        </trans-unit>
        <trans-unit id="634c250b940f95202b4127cfb9d6aa39d5a94c1c" translate="yes" xml:space="preserve">
          <source>asyncio.Task.get_coro()</source>
          <target state="translated">asyncio.Task.get_coro()</target>
        </trans-unit>
        <trans-unit id="c2fe36b444d529743cf7dff26779dcdb0df25589" translate="yes" xml:space="preserve">
          <source>asyncio.Task.get_name()</source>
          <target state="translated">asyncio.Task.get_name()</target>
        </trans-unit>
        <trans-unit id="4ab739292168ed78eb555c0b4a93ffc532075f66" translate="yes" xml:space="preserve">
          <source>asyncio.Task.get_stack()</source>
          <target state="translated">asyncio.Task.get_stack()</target>
        </trans-unit>
        <trans-unit id="19523aa7d8226f8a53fa3d3239b1aba1749707f4" translate="yes" xml:space="preserve">
          <source>asyncio.Task.print_stack()</source>
          <target state="translated">asyncio.Task.print_stack()</target>
        </trans-unit>
        <trans-unit id="5a297c74284ec3c7d6d65afdbebb0edf06a17fe5" translate="yes" xml:space="preserve">
          <source>asyncio.Task.remove_done_callback()</source>
          <target state="translated">asyncio.Task.remove_done_callback()</target>
        </trans-unit>
        <trans-unit id="63bb8697a689bf3cc14d90ec639d35dfeb58ef9a" translate="yes" xml:space="preserve">
          <source>asyncio.Task.result()</source>
          <target state="translated">asyncio.Task.result()</target>
        </trans-unit>
        <trans-unit id="36648e689a686cd0d5baa1a1357258c9abfa6b90" translate="yes" xml:space="preserve">
          <source>asyncio.Task.set_name()</source>
          <target state="translated">asyncio.Task.set_name()</target>
        </trans-unit>
        <trans-unit id="2ab8a41e37c2937d47b9016a1e7537b2d6b77d55" translate="yes" xml:space="preserve">
          <source>asyncio.ThreadedChildWatcher</source>
          <target state="translated">asyncio.ThreadedChildWatcher</target>
        </trans-unit>
        <trans-unit id="71fa25afe1d32e1ce4faee9501df73a9fd957526" translate="yes" xml:space="preserve">
          <source>asyncio.TimeoutError</source>
          <target state="translated">asyncio.TimeoutError</target>
        </trans-unit>
        <trans-unit id="34285792b0acd1d713efe7b91cdd633b4868f221" translate="yes" xml:space="preserve">
          <source>asyncio.TimerHandle</source>
          <target state="translated">asyncio.TimerHandle</target>
        </trans-unit>
        <trans-unit id="347495b2ed0c6a27f46018f08cfb52bf77ce7320" translate="yes" xml:space="preserve">
          <source>asyncio.TimerHandle.when()</source>
          <target state="translated">asyncio.TimerHandle.when()</target>
        </trans-unit>
        <trans-unit id="864acbfa9a8b23cf3f7d7fc2ea90bc1884a79368" translate="yes" xml:space="preserve">
          <source>asyncio.Transport</source>
          <target state="translated">asyncio.Transport</target>
        </trans-unit>
        <trans-unit id="ff65f60784b6b277716cf164d27fb4416304f63e" translate="yes" xml:space="preserve">
          <source>asyncio.WindowsProactorEventLoopPolicy</source>
          <target state="translated">asyncio.WindowsProactorEventLoopPolicy</target>
        </trans-unit>
        <trans-unit id="fb0bf0d33c84c144ece3e9ab88ae67a5ae41493e" translate="yes" xml:space="preserve">
          <source>asyncio.WindowsSelectorEventLoopPolicy</source>
          <target state="translated">asyncio.WindowsSelectorEventLoopPolicy</target>
        </trans-unit>
        <trans-unit id="0697df4a7611d2756327e48c43a90789c56f4014" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport</source>
          <target state="translated">asyncio.WriteTransport</target>
        </trans-unit>
        <trans-unit id="81cf7553e691efc25b436f69caaf45f0190e2dd5" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.abort()</source>
          <target state="translated">asyncio.WriteTransport.abort()</target>
        </trans-unit>
        <trans-unit id="f4616e1c6486c3e821ecea4c4bd3e539c411df19" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.can_write_eof()</source>
          <target state="translated">asyncio.WriteTransport.can_write_eof()</target>
        </trans-unit>
        <trans-unit id="3766def3b833dc5956a2abebeed4a8817ff54b24" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.get_write_buffer_limits()</source>
          <target state="translated">asyncio.WriteTransport.get_write_buffer_limits()</target>
        </trans-unit>
        <trans-unit id="84c56220ce23d069bd86ac2d604169963e61f859" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.get_write_buffer_size()</source>
          <target state="translated">asyncio.WriteTransport.get_write_buffer_size()</target>
        </trans-unit>
        <trans-unit id="248f460a2e2fd6564ed42ed38f3830d627f4d25c" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.set_write_buffer_limits()</source>
          <target state="translated">asyncio.WriteTransport.set_write_buffer_limits()</target>
        </trans-unit>
        <trans-unit id="9e8bdcd6bbfc59317b911d174bd93a2566c261b7" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.write()</source>
          <target state="translated">asyncio.WriteTransport.write()</target>
        </trans-unit>
        <trans-unit id="7b27659cf34092d67d77a89c5c714feabbb1bf45" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.write_eof()</source>
          <target state="translated">asyncio.WriteTransport.write_eof()</target>
        </trans-unit>
        <trans-unit id="95dc0c3d612773a9fba3e1b3854317087fb79214" translate="yes" xml:space="preserve">
          <source>asyncio.WriteTransport.writelines()</source>
          <target state="translated">asyncio.WriteTransport.writelines()</target>
        </trans-unit>
        <trans-unit id="641c729390c2e50a70e9ae7f345a1ed246256147" translate="yes" xml:space="preserve">
          <source>asyncio.all_tasks()</source>
          <target state="translated">asyncio.all_tasks()</target>
        </trans-unit>
        <trans-unit id="dfcca02f36bde33991e8d54bcb938cf4151e8f03" translate="yes" xml:space="preserve">
          <source>asyncio.as_completed()</source>
          <target state="translated">asyncio.as_completed()</target>
        </trans-unit>
        <trans-unit id="c87875f8dc569bf688f0fe066d28e896978fa8ab" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.DEVNULL</source>
          <target state="translated">asyncio.asyncio.subprocess.DEVNULL</target>
        </trans-unit>
        <trans-unit id="b9ae9f330ad5a874be72e650b8dd3378f7127952" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.PIPE</source>
          <target state="translated">asyncio.asyncio.subprocess.PIPE</target>
        </trans-unit>
        <trans-unit id="20b07356d2b96902e55ccb4ac72a049f1a881eaa" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process</source>
          <target state="translated">asyncio.asyncio.subprocess.Process</target>
        </trans-unit>
        <trans-unit id="58fe74ea43848fc0d621ad8cd08bc2e9f91a7f95" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.communicate()</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.communicate()</target>
        </trans-unit>
        <trans-unit id="750865dc4a2bffcb62842ee659ca12f08759b977" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.kill()</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.kill()</target>
        </trans-unit>
        <trans-unit id="a5df975fe2dc6ba8c6d22b3e849a522d5260e156" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.pid</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.pid</target>
        </trans-unit>
        <trans-unit id="37ed6993c45207974d255440411418feb2047b72" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.returncode</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.returncode</target>
        </trans-unit>
        <trans-unit id="dedabbde864ef03d878808f4dbf232beb5145e2f" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.send_signal()</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.send_signal()</target>
        </trans-unit>
        <trans-unit id="5698e786b4ddf96221b4c61ada6d1ff36e824ba6" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.stderr</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.stderr</target>
        </trans-unit>
        <trans-unit id="9a6b0c684d101eb05966d2b4925cbd778995c6f4" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.stdin</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.stdin</target>
        </trans-unit>
        <trans-unit id="b9bb474177cee26ed0d440765e05f5529521f79b" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.stdout</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.stdout</target>
        </trans-unit>
        <trans-unit id="d2495945e5b3f51a6d8158d8c3e95cfc993b84a0" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.terminate()</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.terminate()</target>
        </trans-unit>
        <trans-unit id="9162527154bea586878a17205fd391a4a08ca2a3" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.Process.wait()</source>
          <target state="translated">asyncio.asyncio.subprocess.Process.wait()</target>
        </trans-unit>
        <trans-unit id="cc1b64478330e12d6e8ea0acab9af6bd2facad1e" translate="yes" xml:space="preserve">
          <source>asyncio.asyncio.subprocess.STDOUT</source>
          <target state="translated">asyncio.asyncio.subprocess.STDOUT</target>
        </trans-unit>
        <trans-unit id="5c5641fb6d612c156ffbd6f7e537eef08bda4043" translate="yes" xml:space="preserve">
          <source>asyncio.coroutine()</source>
          <target state="translated">asyncio.coroutine()</target>
        </trans-unit>
        <trans-unit id="251d2ed1e55220b2253efa00842b9f92674e703a" translate="yes" xml:space="preserve">
          <source>asyncio.create_subprocess_exec()</source>
          <target state="translated">asyncio.create_subprocess_exec()</target>
        </trans-unit>
        <trans-unit id="a3f2da3dee8b8b4e8ddc63ee349e60a3e3b626f0" translate="yes" xml:space="preserve">
          <source>asyncio.create_subprocess_shell()</source>
          <target state="translated">asyncio.create_subprocess_shell()</target>
        </trans-unit>
        <trans-unit id="ae7fbe170c6a899c1c211a5ad0227e1d1d0c52d5" translate="yes" xml:space="preserve">
          <source>asyncio.create_task()</source>
          <target state="translated">asyncio.create_task()</target>
        </trans-unit>
        <trans-unit id="9175be6d17887f1e23725a5cdff6628e8a7d17e8" translate="yes" xml:space="preserve">
          <source>asyncio.current_task()</source>
          <target state="translated">asyncio.current_task()</target>
        </trans-unit>
        <trans-unit id="20ccf582294dc34cc46260495660579f501e26b7" translate="yes" xml:space="preserve">
          <source>asyncio.ensure_future()</source>
          <target state="translated">asyncio.ensure_future()</target>
        </trans-unit>
        <trans-unit id="839b6b9be05b8c4819f9f6f85b59c1e7b6fc8ec5" translate="yes" xml:space="preserve">
          <source>asyncio.gather()</source>
          <target state="translated">asyncio.gather()</target>
        </trans-unit>
        <trans-unit id="55bce3347a9e8d23e4e94c41948b22b322e543d0" translate="yes" xml:space="preserve">
          <source>asyncio.get_child_watcher()</source>
          <target state="translated">asyncio.get_child_watcher()</target>
        </trans-unit>
        <trans-unit id="d78432982198e83a6a189981d27d3e088cd52ee3" translate="yes" xml:space="preserve">
          <source>asyncio.get_event_loop()</source>
          <target state="translated">asyncio.get_event_loop()</target>
        </trans-unit>
        <trans-unit id="10c86c0fde940f3820d9a95b9eaa1b72c5190c92" translate="yes" xml:space="preserve">
          <source>asyncio.get_event_loop_policy()</source>
          <target state="translated">asyncio.get_event_loop_policy()</target>
        </trans-unit>
        <trans-unit id="27ce7161404d1f4078d78761a7a1804dd57b84ef" translate="yes" xml:space="preserve">
          <source>asyncio.get_running_loop()</source>
          <target state="translated">asyncio.get_running_loop()</target>
        </trans-unit>
        <trans-unit id="8bcda04d665641ea178a57b709d256ea4536f2e4" translate="yes" xml:space="preserve">
          <source>asyncio.iscoroutine()</source>
          <target state="translated">asyncio.iscoroutine()</target>
        </trans-unit>
        <trans-unit id="5958dc5a78fcf9224a8cf218c83987aef6fc568b" translate="yes" xml:space="preserve">
          <source>asyncio.iscoroutinefunction()</source>
          <target state="translated">asyncio.iscoroutinefunction()</target>
        </trans-unit>
        <trans-unit id="a3dc294307c23b86ec1dfb38eb2a74f5d4e0e6f0" translate="yes" xml:space="preserve">
          <source>asyncio.isfuture()</source>
          <target state="translated">asyncio.isfuture()</target>
        </trans-unit>
        <trans-unit id="750a9dc09be699acec078be338a6850f6dfad051" translate="yes" xml:space="preserve">
          <source>asyncio.loop.add_reader()</source>
          <target state="translated">asyncio.loop.add_reader()</target>
        </trans-unit>
        <trans-unit id="fe5cdd44d2e5aee59678a357afc04f35988cb0ba" translate="yes" xml:space="preserve">
          <source>asyncio.loop.add_signal_handler()</source>
          <target state="translated">asyncio.loop.add_signal_handler()</target>
        </trans-unit>
        <trans-unit id="e8ac48cdd8d80b3af5960026db96be7c302f0212" translate="yes" xml:space="preserve">
          <source>asyncio.loop.add_writer()</source>
          <target state="translated">asyncio.loop.add_writer()</target>
        </trans-unit>
        <trans-unit id="c3b0a1ab1f42c92cf7fbe64cae5ba33de7e53340" translate="yes" xml:space="preserve">
          <source>asyncio.loop.call_at()</source>
          <target state="translated">asyncio.loop.call_at()</target>
        </trans-unit>
        <trans-unit id="994ae69ee19144cd99c217d414baf5a54be8445f" translate="yes" xml:space="preserve">
          <source>asyncio.loop.call_exception_handler()</source>
          <target state="translated">asyncio.loop.call_exception_handler()</target>
        </trans-unit>
        <trans-unit id="5aa0a781e7992057aeb894f44d2d6d21e1c1e813" translate="yes" xml:space="preserve">
          <source>asyncio.loop.call_later()</source>
          <target state="translated">asyncio.loop.call_later()</target>
        </trans-unit>
        <trans-unit id="69d63932d49c122b101b10a799fbf835e9a8e0b8" translate="yes" xml:space="preserve">
          <source>asyncio.loop.call_soon()</source>
          <target state="translated">asyncio.loop.call_soon()</target>
        </trans-unit>
        <trans-unit id="c85142c3673050b1b48075b02f3d8f02d28cb800" translate="yes" xml:space="preserve">
          <source>asyncio.loop.call_soon_threadsafe()</source>
          <target state="translated">asyncio.loop.call_soon_threadsafe()</target>
        </trans-unit>
        <trans-unit id="f4485ec829d0ad1f12232f775415c9c7a60c12f1" translate="yes" xml:space="preserve">
          <source>asyncio.loop.close()</source>
          <target state="translated">asyncio.loop.close()</target>
        </trans-unit>
        <trans-unit id="3af8c6a70c993f507fd21647482d4501baebd7ad" translate="yes" xml:space="preserve">
          <source>asyncio.loop.connect_accepted_socket()</source>
          <target state="translated">asyncio.loop.connect_accepted_socket()</target>
        </trans-unit>
        <trans-unit id="2a787ebe746a8ba79ee531fcfa6cb7acd2c12da4" translate="yes" xml:space="preserve">
          <source>asyncio.loop.connect_read_pipe()</source>
          <target state="translated">asyncio.loop.connect_read_pipe()</target>
        </trans-unit>
        <trans-unit id="95b7afc258f4a7e47c0f047be450b94ea33620e0" translate="yes" xml:space="preserve">
          <source>asyncio.loop.connect_write_pipe()</source>
          <target state="translated">asyncio.loop.connect_write_pipe()</target>
        </trans-unit>
        <trans-unit id="bbfa06b05db20e1c3e56fc709ba6c91f093b5273" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_connection()</source>
          <target state="translated">asyncio.loop.create_connection()</target>
        </trans-unit>
        <trans-unit id="2d222a393386158c011dd555ed7607983276357c" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_datagram_endpoint()</source>
          <target state="translated">asyncio.loop.create_datagram_endpoint()</target>
        </trans-unit>
        <trans-unit id="68aaf742eddb30205c13f1c7266366eace10170d" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_future()</source>
          <target state="translated">asyncio.loop.create_future()</target>
        </trans-unit>
        <trans-unit id="30d7b285bca74905e2f2ca4f5f56ad8330eee310" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_server()</source>
          <target state="translated">asyncio.loop.create_server()</target>
        </trans-unit>
        <trans-unit id="467e3fff0d54888466646c663110ef77c4dbc40b" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_task()</source>
          <target state="translated">asyncio.loop.create_task()</target>
        </trans-unit>
        <trans-unit id="cf46d134c86ab1a0e50a45ca1147556bbe3048b7" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_unix_connection()</source>
          <target state="translated">asyncio.loop.create_unix_connection()</target>
        </trans-unit>
        <trans-unit id="3304d77af5e76b28e9a241908ae995aeec93ec4b" translate="yes" xml:space="preserve">
          <source>asyncio.loop.create_unix_server()</source>
          <target state="translated">asyncio.loop.create_unix_server()</target>
        </trans-unit>
        <trans-unit id="e2bee327e2d73ddd4f85da666bc49e7467a6f6a7" translate="yes" xml:space="preserve">
          <source>asyncio.loop.default_exception_handler()</source>
          <target state="translated">asyncio.loop.default_exception_handler()</target>
        </trans-unit>
        <trans-unit id="ab5f2bf1fd28394629073a13c1e3c92c336ec793" translate="yes" xml:space="preserve">
          <source>asyncio.loop.get_debug()</source>
          <target state="translated">asyncio.loop.get_debug()</target>
        </trans-unit>
        <trans-unit id="f739a8994df0591bf3f1f7dc4d56426620127e0e" translate="yes" xml:space="preserve">
          <source>asyncio.loop.get_exception_handler()</source>
          <target state="translated">asyncio.loop.get_exception_handler()</target>
        </trans-unit>
        <trans-unit id="cefef3603e463fb7ce429a0d321c72d516bb9c45" translate="yes" xml:space="preserve">
          <source>asyncio.loop.get_task_factory()</source>
          <target state="translated">asyncio.loop.get_task_factory()</target>
        </trans-unit>
        <trans-unit id="3efd517305eb3fdf4cc41f99421aed587dc2442b" translate="yes" xml:space="preserve">
          <source>asyncio.loop.getaddrinfo()</source>
          <target state="translated">asyncio.loop.getaddrinfo()</target>
        </trans-unit>
        <trans-unit id="781ba52a3b85b70f3d8f0e79f714cddf25914451" translate="yes" xml:space="preserve">
          <source>asyncio.loop.getnameinfo()</source>
          <target state="translated">asyncio.loop.getnameinfo()</target>
        </trans-unit>
        <trans-unit id="ca54c43926037f6053c9bd1d873dc24baf6cc721" translate="yes" xml:space="preserve">
          <source>asyncio.loop.is_closed()</source>
          <target state="translated">asyncio.loop.is_closed()</target>
        </trans-unit>
        <trans-unit id="583b9a7722a64f18d687ac48da0bd7f85fb807d5" translate="yes" xml:space="preserve">
          <source>asyncio.loop.is_running()</source>
          <target state="translated">asyncio.loop.is_running()</target>
        </trans-unit>
        <trans-unit id="565cfd58084ec9a2e96f28d48ac375d98b3389f2" translate="yes" xml:space="preserve">
          <source>asyncio.loop.remove_reader()</source>
          <target state="translated">asyncio.loop.remove_reader()</target>
        </trans-unit>
        <trans-unit id="81a25aba1dd712e4f1d265519c72198a35509d57" translate="yes" xml:space="preserve">
          <source>asyncio.loop.remove_signal_handler()</source>
          <target state="translated">asyncio.loop.remove_signal_handler()</target>
        </trans-unit>
        <trans-unit id="b4c125ef322de8b51aed6cc6e2c2e6aa7f8a726d" translate="yes" xml:space="preserve">
          <source>asyncio.loop.remove_writer()</source>
          <target state="translated">asyncio.loop.remove_writer()</target>
        </trans-unit>
        <trans-unit id="a7167c9b69a1f6f15b9e61626b9289b4adf88427" translate="yes" xml:space="preserve">
          <source>asyncio.loop.run_forever()</source>
          <target state="translated">asyncio.loop.run_forever()</target>
        </trans-unit>
        <trans-unit id="100255d0d237cd45152928682f32ab04f41a8024" translate="yes" xml:space="preserve">
          <source>asyncio.loop.run_in_executor()</source>
          <target state="translated">asyncio.loop.run_in_executor()</target>
        </trans-unit>
        <trans-unit id="9419528cc1dc51bc5e0535c02c22a69e409b7110" translate="yes" xml:space="preserve">
          <source>asyncio.loop.run_until_complete()</source>
          <target state="translated">asyncio.loop.run_until_complete()</target>
        </trans-unit>
        <trans-unit id="0a8fdd96d05d671043ff8a7995cb0ed4f4aac3c3" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sendfile()</source>
          <target state="translated">asyncio.loop.sendfile()</target>
        </trans-unit>
        <trans-unit id="19aa73240eebec0abf63563af2895a2149bc02a7" translate="yes" xml:space="preserve">
          <source>asyncio.loop.set_debug()</source>
          <target state="translated">asyncio.loop.set_debug()</target>
        </trans-unit>
        <trans-unit id="88790820053bfd35afb64026403688d445a6c4d7" translate="yes" xml:space="preserve">
          <source>asyncio.loop.set_default_executor()</source>
          <target state="translated">asyncio.loop.set_default_executor()</target>
        </trans-unit>
        <trans-unit id="b8c3502452a87b839a6ef3759b1e046ec9a7e7d9" translate="yes" xml:space="preserve">
          <source>asyncio.loop.set_exception_handler()</source>
          <target state="translated">asyncio.loop.set_exception_handler()</target>
        </trans-unit>
        <trans-unit id="6467e867ea49fea2647c157e513cebf37d243e66" translate="yes" xml:space="preserve">
          <source>asyncio.loop.set_task_factory()</source>
          <target state="translated">asyncio.loop.set_task_factory()</target>
        </trans-unit>
        <trans-unit id="15ef1d7b38d75d9c3e37b46d388898a94dce4229" translate="yes" xml:space="preserve">
          <source>asyncio.loop.shutdown_asyncgens()</source>
          <target state="translated">asyncio.loop.shutdown_asyncgens()</target>
        </trans-unit>
        <trans-unit id="c754f183f76fa1ccc87e110ddb528c4dd0367da7" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sock_accept()</source>
          <target state="translated">asyncio.loop.sock_accept()</target>
        </trans-unit>
        <trans-unit id="0c8ab0966bfea26e482e328396ea5617488ae1ea" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sock_connect()</source>
          <target state="translated">asyncio.loop.sock_connect()</target>
        </trans-unit>
        <trans-unit id="81d9a14ff2755c9700b5eeeefa3fa3fc02e5be86" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sock_recv()</source>
          <target state="translated">asyncio.loop.sock_recv()</target>
        </trans-unit>
        <trans-unit id="0f378589ed4a254450160cf46d194fe867f0cf24" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sock_recv_into()</source>
          <target state="translated">asyncio.loop.sock_recv_into()</target>
        </trans-unit>
        <trans-unit id="47b697f01fb1dc83ff9778c38c2c6358d590e98c" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sock_sendall()</source>
          <target state="translated">asyncio.loop.sock_sendall()</target>
        </trans-unit>
        <trans-unit id="53039d7e8a585fec705dc185269413997d96a2de" translate="yes" xml:space="preserve">
          <source>asyncio.loop.sock_sendfile()</source>
          <target state="translated">asyncio.loop.sock_sendfile()</target>
        </trans-unit>
        <trans-unit id="cd90a41bfc960abd303e3e1b332578e3a8a466cb" translate="yes" xml:space="preserve">
          <source>asyncio.loop.start_tls()</source>
          <target state="translated">asyncio.loop.start_tls()</target>
        </trans-unit>
        <trans-unit id="4804d5906e80bd5fccf49c02057ff52746a74e03" translate="yes" xml:space="preserve">
          <source>asyncio.loop.stop()</source>
          <target state="translated">asyncio.loop.stop()</target>
        </trans-unit>
        <trans-unit id="cf4a9853c7722892c011521a3b09179b562ada14" translate="yes" xml:space="preserve">
          <source>asyncio.loop.subprocess_exec()</source>
          <target state="translated">asyncio.loop.subprocess_exec()</target>
        </trans-unit>
        <trans-unit id="8de001dcd2535a364e4d049778fada2b78dfeb11" translate="yes" xml:space="preserve">
          <source>asyncio.loop.subprocess_shell()</source>
          <target state="translated">asyncio.loop.subprocess_shell()</target>
        </trans-unit>
        <trans-unit id="48eee8f722000b34cf3625a051774397667141e2" translate="yes" xml:space="preserve">
          <source>asyncio.loop.time()</source>
          <target state="translated">asyncio.loop.time()</target>
        </trans-unit>
        <trans-unit id="d325ab675b49ceeeec246eb351a28e2ce1b6b5b5" translate="yes" xml:space="preserve">
          <source>asyncio.new_event_loop()</source>
          <target state="translated">asyncio.new_event_loop()</target>
        </trans-unit>
        <trans-unit id="1f43a6a792bd0230519d42d40b6b0aa7c572575b" translate="yes" xml:space="preserve">
          <source>asyncio.open_connection()</source>
          <target state="translated">asyncio.open_connection()</target>
        </trans-unit>
        <trans-unit id="64e5ab36f30335bf86156f07d4bca9ae1f4e7e2a" translate="yes" xml:space="preserve">
          <source>asyncio.open_unix_connection()</source>
          <target state="translated">asyncio.open_unix_connection()</target>
        </trans-unit>
        <trans-unit id="1c707ef02983e3f044801a8b8300516d3e7f3729" translate="yes" xml:space="preserve">
          <source>asyncio.run()</source>
          <target state="translated">asyncio.run()</target>
        </trans-unit>
        <trans-unit id="26d695c2bf08585602cc50776b3bff6a1233ba32" translate="yes" xml:space="preserve">
          <source>asyncio.run_coroutine_threadsafe()</source>
          <target state="translated">asyncio.run_coroutine_threadsafe()</target>
        </trans-unit>
        <trans-unit id="cfe1fdcb962a9b8a396ce6364de37ea2d7036c05" translate="yes" xml:space="preserve">
          <source>asyncio.set_child_watcher()</source>
          <target state="translated">asyncio.set_child_watcher()</target>
        </trans-unit>
        <trans-unit id="bbe001b3f46a70e37464af9fee02ffbdc773312a" translate="yes" xml:space="preserve">
          <source>asyncio.set_event_loop()</source>
          <target state="translated">asyncio.set_event_loop()</target>
        </trans-unit>
        <trans-unit id="0bb9d6e2e3c6a58972ddeadc6925d9c8f03d855a" translate="yes" xml:space="preserve">
          <source>asyncio.set_event_loop_policy()</source>
          <target state="translated">asyncio.set_event_loop_policy()</target>
        </trans-unit>
        <trans-unit id="48820fe4e7a84ed84e5c03d61fdbf8bbcadb4cdf" translate="yes" xml:space="preserve">
          <source>asyncio.shield()</source>
          <target state="translated">asyncio.shield()</target>
        </trans-unit>
        <trans-unit id="dfe5fc2b7c5a06016ceb53f79342b952bcfc7f69" translate="yes" xml:space="preserve">
          <source>asyncio.sleep()</source>
          <target state="translated">asyncio.sleep()</target>
        </trans-unit>
        <trans-unit id="f42f4f107e55682cef8552b55106e5a48ad43d31" translate="yes" xml:space="preserve">
          <source>asyncio.start_server()</source>
          <target state="translated">asyncio.start_server()</target>
        </trans-unit>
        <trans-unit id="f1061e4e0e2b188642f710c1ab89e20f8516f435" translate="yes" xml:space="preserve">
          <source>asyncio.start_unix_server()</source>
          <target state="translated">asyncio.start_unix_server()</target>
        </trans-unit>
        <trans-unit id="a05881a3efda873a3468913532d064c89703f4c5" translate="yes" xml:space="preserve">
          <source>asyncio.wait()</source>
          <target state="translated">asyncio.wait()</target>
        </trans-unit>
        <trans-unit id="47b7169a7ca8ba692897fc4370050d12e8b84aba" translate="yes" xml:space="preserve">
          <source>asyncio.wait_for()</source>
          <target state="translated">asyncio.wait_for()</target>
        </trans-unit>
        <trans-unit id="7461bbba30c97e96e9e6dfa86ded407a689a1932" translate="yes" xml:space="preserve">
          <source>asyncio.wrap_future()</source>
          <target state="translated">asyncio.wrap_future()</target>
        </trans-unit>
        <trans-unit id="a29e3619c88f0e74fc3cde7dace1e18bd151bdd7" translate="yes" xml:space="preserve">
          <source>asyncore</source>
          <target state="translated">asyncore</target>
        </trans-unit>
        <trans-unit id="e5707c8b0a31eda7b4ceefe9d513f44b767a6c48" translate="yes" xml:space="preserve">
          <source>asyncore &amp;mdash; Asynchronous socket handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f9aaa13cae8673e443cdf3bbc358f648655756" translate="yes" xml:space="preserve">
          <source>asyncore Example basic HTTP client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f89750a9ec4960c174d105ddc8526cae42e295" translate="yes" xml:space="preserve">
          <source>asyncore Example basic echo server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e43942f88c5ae831de8b64a3478ca404f0b9eac" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher</source>
          <target state="translated">asyncore.dispatcher</target>
        </trans-unit>
        <trans-unit id="78db311e1ef16520e207fa576ab9877c9a75be91" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.accept()</source>
          <target state="translated">asyncore.dispatcher.accept()</target>
        </trans-unit>
        <trans-unit id="c6125da57f3f94563686d14e31628b456ea24d42" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.bind()</source>
          <target state="translated">asyncore.dispatcher.bind()</target>
        </trans-unit>
        <trans-unit id="58e4998929e40afb69c217a1d422d650ddd71e08" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.close()</source>
          <target state="translated">asyncore.dispatcher.close()</target>
        </trans-unit>
        <trans-unit id="d9c17e729ac1e90872070712cc66a0f12e161454" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.connect()</source>
          <target state="translated">asyncore.dispatcher.connect()</target>
        </trans-unit>
        <trans-unit id="38a206b667ed91088edb68ed32784d1e8e098232" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.create_socket()</source>
          <target state="translated">asyncore.dispatcher.create_socket()</target>
        </trans-unit>
        <trans-unit id="93c4ed2ce11009ae6d13dd002e17ff66e4e9c8e4" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_accept()</source>
          <target state="translated">asyncore.dispatcher.handle_accept()</target>
        </trans-unit>
        <trans-unit id="0703449406efd1fa2f26e30819838aa8e8162636" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_accepted()</source>
          <target state="translated">asyncore.dispatcher.handle_accepted()</target>
        </trans-unit>
        <trans-unit id="369101f3063bbf3ba246efe2d0a528da8e8fe60b" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_close()</source>
          <target state="translated">asyncore.dispatcher.handle_close()</target>
        </trans-unit>
        <trans-unit id="e7067482a3c257601b379e05cf9765b950aff0e5" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_connect()</source>
          <target state="translated">asyncore.dispatcher.handle_connect()</target>
        </trans-unit>
        <trans-unit id="bd7f260aa54bd45887fd0fcd5137d88176013e0c" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_error()</source>
          <target state="translated">asyncore.dispatcher.handle_error()</target>
        </trans-unit>
        <trans-unit id="e05c5f6aac794841dc0798d8aac1dd0fa9d1c6a3" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_expt()</source>
          <target state="translated">asyncore.dispatcher.handle_expt()</target>
        </trans-unit>
        <trans-unit id="f9e5aa353931fec22bfa57c9671ed78f60397744" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_read()</source>
          <target state="translated">asyncore.dispatcher.handle_read()</target>
        </trans-unit>
        <trans-unit id="137a9d245037e88c7b2c6b6bbe9faf9932838118" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.handle_write()</source>
          <target state="translated">asyncore.dispatcher.handle_write()</target>
        </trans-unit>
        <trans-unit id="88a910646b5ad5ed03a5d1a8c849c68fd1b7b99d" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.listen()</source>
          <target state="translated">asyncore.dispatcher.listen()</target>
        </trans-unit>
        <trans-unit id="d70a9fdee1887aa5e8f2a125ee6b6941dfb15af4" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.readable()</source>
          <target state="translated">asyncore.dispatcher.readable()</target>
        </trans-unit>
        <trans-unit id="14c262c9b8052e0acf99f937bbdafebe018d8102" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.recv()</source>
          <target state="translated">asyncore.dispatcher.recv()</target>
        </trans-unit>
        <trans-unit id="f1c26fd6a1b0275d3bc1f55c6a7f060f124f831d" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.send()</source>
          <target state="translated">asyncore.dispatcher.send()</target>
        </trans-unit>
        <trans-unit id="eeca9353f68237b0113bdd4de0befc2833d00c66" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher.writable()</source>
          <target state="translated">asyncore.dispatcher.writable()</target>
        </trans-unit>
        <trans-unit id="6a238d78fddf47634acfd86751ce4f983000a6f8" translate="yes" xml:space="preserve">
          <source>asyncore.dispatcher_with_send</source>
          <target state="translated">asyncore.dispatcher_with_send</target>
        </trans-unit>
        <trans-unit id="fc7734397e93237db87cd1c4b2f2858932e99a05" translate="yes" xml:space="preserve">
          <source>asyncore.file_dispatcher</source>
          <target state="translated">asyncore.file_dispatcher</target>
        </trans-unit>
        <trans-unit id="93c4457a32ada8fb5e70b5254a01ff2d6a8ab9cf" translate="yes" xml:space="preserve">
          <source>asyncore.file_wrapper</source>
          <target state="translated">asyncore.file_wrapper</target>
        </trans-unit>
        <trans-unit id="25bf58b584a082d7dd09c9be9173c13dae206800" translate="yes" xml:space="preserve">
          <source>asyncore.loop()</source>
          <target state="translated">asyncore.loop()</target>
        </trans-unit>
        <trans-unit id="d6fe1e3e2341969bc30fba1adb17bf6894c88b77" translate="yes" xml:space="preserve">
          <source>at a shell prompt will display documentation on the &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; module, in a style similar to the manual pages shown by the Unix &lt;strong&gt;man&lt;/strong&gt; command. The argument to &lt;strong&gt;pydoc&lt;/strong&gt; can be the name of a function, module, or package, or a dotted reference to a class, method, or function within a module or module in a package. If the argument to &lt;strong&gt;pydoc&lt;/strong&gt; looks like a path (that is, it contains the path separator for your operating system, such as a slash in Unix), and refers to an existing Python source file, then documentation is produced for that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dc4fcd15680a3059934c10d74e559e4de1c37a" translate="yes" xml:space="preserve">
          <source>at least one of &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; must be nonzero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2e8110f7c194e6f799e804eff3d3829fd99c4a" translate="yes" xml:space="preserve">
          <source>at the location you want to break into the debugger. You can then step through the code following this statement, and continue running without the debugger using the &lt;a href=&quot;#pdbcommand-continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3853b2fd4c89603fc8835e3e1228e431622c9270" translate="yes" xml:space="preserve">
          <source>atexit</source>
          <target state="translated">atexit</target>
        </trans-unit>
        <trans-unit id="7b2c40c0cfb1d29953f3b60cf93d85f5c048aee1" translate="yes" xml:space="preserve">
          <source>atexit &amp;mdash; Exit handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0225d7c0ce72b0e65ce3dfa260abcc8e2a207c6b" translate="yes" xml:space="preserve">
          <source>atexit Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8303c4a45e4cbfe583ffa4065eee5ef7c119bd" translate="yes" xml:space="preserve">
          <source>atexit.register()</source>
          <target state="translated">atexit.register()</target>
        </trans-unit>
        <trans-unit id="a24a84dbe4fbcd8fddf1ce6f43bc56f8d30f71d4" translate="yes" xml:space="preserve">
          <source>atexit.unregister()</source>
          <target state="translated">atexit.unregister()</target>
        </trans-unit>
        <trans-unit id="2c317cd0735d9046d7675c475fa1c6dce647953f" translate="yes" xml:space="preserve">
          <source>attribute</source>
          <target state="translated">attribute</target>
        </trans-unit>
        <trans-unit id="a91edf8b91abc5620e43ce81bfe0755cc1285f62" translate="yes" xml:space="preserve">
          <source>audioop</source>
          <target state="translated">audioop</target>
        </trans-unit>
        <trans-unit id="b3274718e03d24286968e6ff03a093a885a6cf89" translate="yes" xml:space="preserve">
          <source>audioop &amp;mdash; Manipulate raw audio data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba42d620b331da02312f8c23369055860bdbefac" translate="yes" xml:space="preserve">
          <source>audioop.add()</source>
          <target state="translated">audioop.add()</target>
        </trans-unit>
        <trans-unit id="408227c1548f553c16d788a603f9151f86fce5cc" translate="yes" xml:space="preserve">
          <source>audioop.adpcm2lin()</source>
          <target state="translated">audioop.adpcm2lin()</target>
        </trans-unit>
        <trans-unit id="1edc1a8820702ea1d7a071bad9aa68d3da804aba" translate="yes" xml:space="preserve">
          <source>audioop.alaw2lin()</source>
          <target state="translated">audioop.alaw2lin()</target>
        </trans-unit>
        <trans-unit id="3035d0179e16d9a3498116130a91aa2a92176152" translate="yes" xml:space="preserve">
          <source>audioop.avg()</source>
          <target state="translated">audioop.avg()</target>
        </trans-unit>
        <trans-unit id="00641a1f197ef009a6a19f709c45c57da25a279d" translate="yes" xml:space="preserve">
          <source>audioop.avgpp()</source>
          <target state="translated">audioop.avgpp()</target>
        </trans-unit>
        <trans-unit id="cce42e754622c7deacfffde3d0efae0126188cf9" translate="yes" xml:space="preserve">
          <source>audioop.bias()</source>
          <target state="translated">audioop.bias()</target>
        </trans-unit>
        <trans-unit id="4d92e93a18501a0340dde3b50a20d89c1260aaf6" translate="yes" xml:space="preserve">
          <source>audioop.byteswap()</source>
          <target state="translated">audioop.byteswap()</target>
        </trans-unit>
        <trans-unit id="f298e6ae766322f265f596df8226a69c58d527d9" translate="yes" xml:space="preserve">
          <source>audioop.cross()</source>
          <target state="translated">audioop.cross()</target>
        </trans-unit>
        <trans-unit id="4486056fd6028cad138bafaf6270298bbbde69f5" translate="yes" xml:space="preserve">
          <source>audioop.error</source>
          <target state="translated">audioop.error</target>
        </trans-unit>
        <trans-unit id="baa03496dfb400401dce93fa43eab9c90967e636" translate="yes" xml:space="preserve">
          <source>audioop.findfactor()</source>
          <target state="translated">audioop.findfactor()</target>
        </trans-unit>
        <trans-unit id="3edc6ce04e26b22cf1f37b8d8aabf90675f318d4" translate="yes" xml:space="preserve">
          <source>audioop.findfit()</source>
          <target state="translated">audioop.findfit()</target>
        </trans-unit>
        <trans-unit id="4a09b470df2acae2a5bfc516718b2a62b42c7ace" translate="yes" xml:space="preserve">
          <source>audioop.findmax()</source>
          <target state="translated">audioop.findmax()</target>
        </trans-unit>
        <trans-unit id="aae49baf1e402d5256bb3b927fcfed2f8604d317" translate="yes" xml:space="preserve">
          <source>audioop.getsample()</source>
          <target state="translated">audioop.getsample()</target>
        </trans-unit>
        <trans-unit id="ca361ff88efacfcf350e36e65d07f5259b46a973" translate="yes" xml:space="preserve">
          <source>audioop.lin2adpcm()</source>
          <target state="translated">audioop.lin2adpcm()</target>
        </trans-unit>
        <trans-unit id="8bae57154aba5cc0eb630dcc12ef9d5cddb2806d" translate="yes" xml:space="preserve">
          <source>audioop.lin2alaw()</source>
          <target state="translated">audioop.lin2alaw()</target>
        </trans-unit>
        <trans-unit id="b7e432a119fe62915b496464ef00fbfc2248520a" translate="yes" xml:space="preserve">
          <source>audioop.lin2lin()</source>
          <target state="translated">audioop.lin2lin()</target>
        </trans-unit>
        <trans-unit id="e0a59845cc487b8a4347e964fcbe481f3a03e7a8" translate="yes" xml:space="preserve">
          <source>audioop.lin2ulaw()</source>
          <target state="translated">audioop.lin2ulaw()</target>
        </trans-unit>
        <trans-unit id="b627c9bc48c715ec32bc2603029872f7a411b6bd" translate="yes" xml:space="preserve">
          <source>audioop.max()</source>
          <target state="translated">audioop.max()</target>
        </trans-unit>
        <trans-unit id="ce4f856f7ef56cda8ea6a71e63b07c540692ee09" translate="yes" xml:space="preserve">
          <source>audioop.maxpp()</source>
          <target state="translated">audioop.maxpp()</target>
        </trans-unit>
        <trans-unit id="fd21980c3f886a2afc700e8c4cf19757e04df2e9" translate="yes" xml:space="preserve">
          <source>audioop.minmax()</source>
          <target state="translated">audioop.minmax()</target>
        </trans-unit>
        <trans-unit id="8e49fdc8b9cbd91ff5572b71e138ab0ec6cefe0c" translate="yes" xml:space="preserve">
          <source>audioop.mul()</source>
          <target state="translated">audioop.mul()</target>
        </trans-unit>
        <trans-unit id="10610b7a59a380c8c43fbcbd2d38b239fe376973" translate="yes" xml:space="preserve">
          <source>audioop.ratecv()</source>
          <target state="translated">audioop.ratecv()</target>
        </trans-unit>
        <trans-unit id="ad634b24a09909ac6235f73db124a4035562d722" translate="yes" xml:space="preserve">
          <source>audioop.reverse()</source>
          <target state="translated">audioop.reverse()</target>
        </trans-unit>
        <trans-unit id="a3c6c9a8cfdc92a649c7532724c83e0d2d6f2858" translate="yes" xml:space="preserve">
          <source>audioop.rms()</source>
          <target state="translated">audioop.rms()</target>
        </trans-unit>
        <trans-unit id="9b0f3efdbb9ae03dbf5103d9b277b0cde026c7f0" translate="yes" xml:space="preserve">
          <source>audioop.tomono()</source>
          <target state="translated">audioop.tomono()</target>
        </trans-unit>
        <trans-unit id="c0887d566f8e7c29dff8be848507009c9a07feb4" translate="yes" xml:space="preserve">
          <source>audioop.tostereo()</source>
          <target state="translated">audioop.tostereo()</target>
        </trans-unit>
        <trans-unit id="ca7d9d40a9d01b0391fced6fd8aa375776ee4817" translate="yes" xml:space="preserve">
          <source>audioop.ulaw2lin()</source>
          <target state="translated">audioop.ulaw2lin()</target>
        </trans-unit>
        <trans-unit id="248a20b62efba8f4303c75830c83230f1b088f1e" translate="yes" xml:space="preserve">
          <source>background</source>
          <target state="translated">background</target>
        </trans-unit>
        <trans-unit id="8095e159699116466e36cbafd09e1d845f29f2b9" translate="yes" xml:space="preserve">
          <source>base64</source>
          <target state="translated">base64</target>
        </trans-unit>
        <trans-unit id="bfd023531ceeb47b59327cc907e0f0d0078b4cc0" translate="yes" xml:space="preserve">
          <source>base64 &amp;mdash; Base16, Base32, Base64, Base85 Data Encodings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bf59016e5a4d05187f2ca975c2a755b66711c5" translate="yes" xml:space="preserve">
          <source>base64, base_64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385256204c94dda4377fed4db004da60728bb2b5" translate="yes" xml:space="preserve">
          <source>base64.a85decode()</source>
          <target state="translated">base64.a85decode()</target>
        </trans-unit>
        <trans-unit id="31b4503c8e25812a87f2feacaa839f1540c75240" translate="yes" xml:space="preserve">
          <source>base64.a85encode()</source>
          <target state="translated">base64.a85encode()</target>
        </trans-unit>
        <trans-unit id="caec44d00f486be7ef1a7966f37d18b49ac13168" translate="yes" xml:space="preserve">
          <source>base64.b16decode()</source>
          <target state="translated">base64.b16decode()</target>
        </trans-unit>
        <trans-unit id="fa3306af78e57aa06f65ef335dc51aa16b084b89" translate="yes" xml:space="preserve">
          <source>base64.b16encode()</source>
          <target state="translated">base64.b16encode()</target>
        </trans-unit>
        <trans-unit id="8e307240be1d993652b9f2fbb4c268e4348e28c6" translate="yes" xml:space="preserve">
          <source>base64.b32decode()</source>
          <target state="translated">base64.b32decode()</target>
        </trans-unit>
        <trans-unit id="b972b7470ef2b0bb91cf7bb79b5c01f75c452a8a" translate="yes" xml:space="preserve">
          <source>base64.b32encode()</source>
          <target state="translated">base64.b32encode()</target>
        </trans-unit>
        <trans-unit id="bd86f1292e4b621c4577e2963524af646677de19" translate="yes" xml:space="preserve">
          <source>base64.b64decode()</source>
          <target state="translated">base64.b64decode()</target>
        </trans-unit>
        <trans-unit id="fc0b6f858ac2613a3b4ae4a48dffe1fc6ecb00c6" translate="yes" xml:space="preserve">
          <source>base64.b64encode()</source>
          <target state="translated">base64.b64encode()</target>
        </trans-unit>
        <trans-unit id="b214d1e8ce891d6e6611d6e8a0cffd1e8081d4ef" translate="yes" xml:space="preserve">
          <source>base64.b85decode()</source>
          <target state="translated">base64.b85decode()</target>
        </trans-unit>
        <trans-unit id="316a3536da35d7615b5c243217137942f967bf91" translate="yes" xml:space="preserve">
          <source>base64.b85encode()</source>
          <target state="translated">base64.b85encode()</target>
        </trans-unit>
        <trans-unit id="59bdf336a98a522fa715665c7665e7ba6fef7129" translate="yes" xml:space="preserve">
          <source>base64.decode()</source>
          <target state="translated">base64.decode()</target>
        </trans-unit>
        <trans-unit id="d57fb91110c6842be4f141d439e783c4b6ca5ef3" translate="yes" xml:space="preserve">
          <source>base64.decodebytes()</source>
          <target state="translated">base64.decodebytes()</target>
        </trans-unit>
        <trans-unit id="a02160c6e5a195466788e9d4bff5131814c03896" translate="yes" xml:space="preserve">
          <source>base64.decodestring()</source>
          <target state="translated">base64.decodestring()</target>
        </trans-unit>
        <trans-unit id="a7e9f84a475ae7aaeeabda891d02ad06023000bc" translate="yes" xml:space="preserve">
          <source>base64.encode()</source>
          <target state="translated">base64.encode()</target>
        </trans-unit>
        <trans-unit id="d794970458c87ee9dd94894d3023daab71771a3a" translate="yes" xml:space="preserve">
          <source>base64.encodebytes()</source>
          <target state="translated">base64.encodebytes()</target>
        </trans-unit>
        <trans-unit id="f40aabbace7cb0683f30e38c567c8f28bdf10a05" translate="yes" xml:space="preserve">
          <source>base64.encodestring()</source>
          <target state="translated">base64.encodestring()</target>
        </trans-unit>
        <trans-unit id="415979747963fa811a3cb0e11a5d72c5cda3c124" translate="yes" xml:space="preserve">
          <source>base64.standard_b64decode()</source>
          <target state="translated">base64.standard_b64decode()</target>
        </trans-unit>
        <trans-unit id="65d0047a9d6ce5e11440f782430f081746b3fc0e" translate="yes" xml:space="preserve">
          <source>base64.standard_b64encode()</source>
          <target state="translated">base64.standard_b64encode()</target>
        </trans-unit>
        <trans-unit id="527bd0ba885aabdc38e8fbda93c594b96cdbe98a" translate="yes" xml:space="preserve">
          <source>base64.urlsafe_b64decode()</source>
          <target state="translated">base64.urlsafe_b64decode()</target>
        </trans-unit>
        <trans-unit id="98650eaeb8368abeda08aeca20aaa365498680ca" translate="yes" xml:space="preserve">
          <source>base64.urlsafe_b64encode()</source>
          <target state="translated">base64.urlsafe_b64encode()</target>
        </trans-unit>
        <trans-unit id="504a53d25bd567a0c504e957082852217cda9e24" translate="yes" xml:space="preserve">
          <source>base64_codec &lt;a href=&quot;#b64&quot; id=&quot;id5&quot;&gt;1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cdb5df4fa6b4541ba9ecec8e1b22192c3f3515" translate="yes" xml:space="preserve">
          <source>bash/zsh</source>
          <target state="translated">bash/zsh</target>
        </trans-unit>
        <trans-unit id="e87b45953875b7caad2f0266b83919ebff7fb937" translate="yes" xml:space="preserve">
          <source>bcc</source>
          <target state="translated">bcc</target>
        </trans-unit>
        <trans-unit id="36f126590815b12c71dbac12b6df7d2154917c13" translate="yes" xml:space="preserve">
          <source>bdb</source>
          <target state="translated">bdb</target>
        </trans-unit>
        <trans-unit id="0f3bed21ef7563d534116a1ce85c54a5fc33c880" translate="yes" xml:space="preserve">
          <source>bdb &amp;mdash; Debugger framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32a8c6cd58c136893f4f77f75d8ed9521f8073b" translate="yes" xml:space="preserve">
          <source>bdb.Bdb</source>
          <target state="translated">bdb.Bdb</target>
        </trans-unit>
        <trans-unit id="e0b6d4839fcaeb433f6bcd1ec19093227d1642fa" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.break_anywhere()</source>
          <target state="translated">bdb.Bdb.break_anywhere()</target>
        </trans-unit>
        <trans-unit id="00a802653e290e345767238126b9f1d5e34a2d18" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.break_here()</source>
          <target state="translated">bdb.Bdb.break_here()</target>
        </trans-unit>
        <trans-unit id="ac0b5901860ae954c8eb1b93c4c43da44baf6f5a" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.canonic()</source>
          <target state="translated">bdb.Bdb.canonic()</target>
        </trans-unit>
        <trans-unit id="7187bff870a5af14faeb945ada483b461d70b944" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.clear_all_breaks()</source>
          <target state="translated">bdb.Bdb.clear_all_breaks()</target>
        </trans-unit>
        <trans-unit id="0de8db7f6a1f62d6bf9f69b19e8fcbf0b44480a6" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.clear_all_file_breaks()</source>
          <target state="translated">bdb.Bdb.clear_all_file_breaks()</target>
        </trans-unit>
        <trans-unit id="263bea72279a32eb13a460522f337be25e664031" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.clear_bpbynumber()</source>
          <target state="translated">bdb.Bdb.clear_bpbynumber()</target>
        </trans-unit>
        <trans-unit id="3ab97170576e8b186d1c1c7be958b143ab626f1d" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.clear_break()</source>
          <target state="translated">bdb.Bdb.clear_break()</target>
        </trans-unit>
        <trans-unit id="69692a58415542b119c85134eaad6d9948dcb5f7" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.dispatch_call()</source>
          <target state="translated">bdb.Bdb.dispatch_call()</target>
        </trans-unit>
        <trans-unit id="7569edf1cbcc988e96aea42f0d09a3f552633b33" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.dispatch_exception()</source>
          <target state="translated">bdb.Bdb.dispatch_exception()</target>
        </trans-unit>
        <trans-unit id="e2dbb0151d525646f38b0a5d02cf8dd7d7a48431" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.dispatch_line()</source>
          <target state="translated">bdb.Bdb.dispatch_line()</target>
        </trans-unit>
        <trans-unit id="5cc2f90097677c19d81c96c8899df7ecae196ef2" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.dispatch_return()</source>
          <target state="translated">bdb.Bdb.dispatch_return()</target>
        </trans-unit>
        <trans-unit id="60bc94441ae0d17e34c86a7c4c73ada0eab5c50f" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.do_clear()</source>
          <target state="translated">bdb.Bdb.do_clear()</target>
        </trans-unit>
        <trans-unit id="cddea981666bf76dc27056282b748e9ab68449ff" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.format_stack_entry()</source>
          <target state="translated">bdb.Bdb.format_stack_entry()</target>
        </trans-unit>
        <trans-unit id="8d49ffe24017ba3c9be265880b25d7ea9db130e5" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.get_all_breaks()</source>
          <target state="translated">bdb.Bdb.get_all_breaks()</target>
        </trans-unit>
        <trans-unit id="4f15fbce8c5de175af64c5e32dd10d65ffa5f05c" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.get_bpbynumber()</source>
          <target state="translated">bdb.Bdb.get_bpbynumber()</target>
        </trans-unit>
        <trans-unit id="bef82f53ec7687e9222d1c5262edf4fd78efa4ea" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.get_break()</source>
          <target state="translated">bdb.Bdb.get_break()</target>
        </trans-unit>
        <trans-unit id="d805563e27c9d1319c61c44bcf022fa8a3d00824" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.get_breaks()</source>
          <target state="translated">bdb.Bdb.get_breaks()</target>
        </trans-unit>
        <trans-unit id="2bac2289da63ff0706f9924b3a3242de90759837" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.get_file_breaks()</source>
          <target state="translated">bdb.Bdb.get_file_breaks()</target>
        </trans-unit>
        <trans-unit id="c27db4fb5054ee9f0c14348c71e60ecc75531603" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.get_stack()</source>
          <target state="translated">bdb.Bdb.get_stack()</target>
        </trans-unit>
        <trans-unit id="06570c35f40cadc216eb2c4b5027b5edf640816c" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.reset()</source>
          <target state="translated">bdb.Bdb.reset()</target>
        </trans-unit>
        <trans-unit id="2ddef9c9dfb0b261383ed08a439200a9fdbdbd6b" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.run()</source>
          <target state="translated">bdb.Bdb.run()</target>
        </trans-unit>
        <trans-unit id="a334f747113cd439b160c36a9e7ddfb8ce5d4f2d" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.runcall()</source>
          <target state="translated">bdb.Bdb.runcall()</target>
        </trans-unit>
        <trans-unit id="5ef61e32c4643e46377acff56ec4db075036b09b" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.runctx()</source>
          <target state="translated">bdb.Bdb.runctx()</target>
        </trans-unit>
        <trans-unit id="105200ed3d65fd20a3939fd7a32b866f7e307226" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.runeval()</source>
          <target state="translated">bdb.Bdb.runeval()</target>
        </trans-unit>
        <trans-unit id="c408f7a0b29e20fd2c0edf6449a533c97f1d1aea" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_break()</source>
          <target state="translated">bdb.Bdb.set_break()</target>
        </trans-unit>
        <trans-unit id="7dd6520e75ff6a12046ebe98ebc549b3363483b6" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_continue()</source>
          <target state="translated">bdb.Bdb.set_continue()</target>
        </trans-unit>
        <trans-unit id="e6a072e3d435803d8f533e9051fc24b6b956a530" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_next()</source>
          <target state="translated">bdb.Bdb.set_next()</target>
        </trans-unit>
        <trans-unit id="895db003769126b2987e1c7aa0ef912cb8aefa18" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_quit()</source>
          <target state="translated">bdb.Bdb.set_quit()</target>
        </trans-unit>
        <trans-unit id="44f25c87d0e3bb0eabdd9ce1006307da48dd459f" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_return()</source>
          <target state="translated">bdb.Bdb.set_return()</target>
        </trans-unit>
        <trans-unit id="541eaa7a5b44cf60a7433ba4bc903ec1b9003a50" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_step()</source>
          <target state="translated">bdb.Bdb.set_step()</target>
        </trans-unit>
        <trans-unit id="6d610838ea6dd0c490ef05339cdf271fac89c04e" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_trace()</source>
          <target state="translated">bdb.Bdb.set_trace()</target>
        </trans-unit>
        <trans-unit id="d9b1d662f4308bc0274e632d3656d6ad37c63bef" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.set_until()</source>
          <target state="translated">bdb.Bdb.set_until()</target>
        </trans-unit>
        <trans-unit id="8f60a9c85afdf4af2b306995148de8bb7a197567" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.stop_here()</source>
          <target state="translated">bdb.Bdb.stop_here()</target>
        </trans-unit>
        <trans-unit id="41ad21f08609cba05df4ca361c2d0fcb2d06fafd" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.trace_dispatch()</source>
          <target state="translated">bdb.Bdb.trace_dispatch()</target>
        </trans-unit>
        <trans-unit id="c6165d83541ed740cc35128a9d474abad292cb5c" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.user_call()</source>
          <target state="translated">bdb.Bdb.user_call()</target>
        </trans-unit>
        <trans-unit id="6bba3df820cd974db81276179a48cb34db9c9610" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.user_exception()</source>
          <target state="translated">bdb.Bdb.user_exception()</target>
        </trans-unit>
        <trans-unit id="3169248a2d2f0c9601c2a923bbb56770150f3961" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.user_line()</source>
          <target state="translated">bdb.Bdb.user_line()</target>
        </trans-unit>
        <trans-unit id="861dc4ea388fca7895ff6ba96bfdc8187faa7c12" translate="yes" xml:space="preserve">
          <source>bdb.Bdb.user_return()</source>
          <target state="translated">bdb.Bdb.user_return()</target>
        </trans-unit>
        <trans-unit id="87b4430ff57e300fa53d20057a4bff148b9f374e" translate="yes" xml:space="preserve">
          <source>bdb.BdbQuit</source>
          <target state="translated">bdb.BdbQuit</target>
        </trans-unit>
        <trans-unit id="e2d86c51f39c38a0f682eba7cc8001f8e5399d0a" translate="yes" xml:space="preserve">
          <source>bdb.Breakpoint</source>
          <target state="translated">bdb.Breakpoint</target>
        </trans-unit>
        <trans-unit id="1cb372fd0b8148c29a999c33aafb4cad9282678c" translate="yes" xml:space="preserve">
          <source>bdb.Breakpoint.bpformat()</source>
          <target state="translated">bdb.Breakpoint.bpformat()</target>
        </trans-unit>
        <trans-unit id="14a726755d919f8824937bcd844502c2261fa893" translate="yes" xml:space="preserve">
          <source>bdb.Breakpoint.bpprint()</source>
          <target state="translated">bdb.Breakpoint.bpprint()</target>
        </trans-unit>
        <trans-unit id="13d3705323edc010364f4123fac5a010add20a64" translate="yes" xml:space="preserve">
          <source>bdb.Breakpoint.deleteMe()</source>
          <target state="translated">bdb.Breakpoint.deleteMe()</target>
        </trans-unit>
        <trans-unit id="5481d48107a5e708ee4f130be4c935c9de0e3421" translate="yes" xml:space="preserve">
          <source>bdb.Breakpoint.disable()</source>
          <target state="translated">bdb.Breakpoint.disable()</target>
        </trans-unit>
        <trans-unit id="0873d650848d36786b0e0ca860f0ba14ede50928" translate="yes" xml:space="preserve">
          <source>bdb.Breakpoint.enable()</source>
          <target state="translated">bdb.Breakpoint.enable()</target>
        </trans-unit>
        <trans-unit id="f40d879ef15cc97f2def9ee8f401578dadde94f9" translate="yes" xml:space="preserve">
          <source>bdb.checkfuncname()</source>
          <target state="translated">bdb.checkfuncname()</target>
        </trans-unit>
        <trans-unit id="e99aa154bece901f0ce03c6e6e7541588e0b2df3" translate="yes" xml:space="preserve">
          <source>bdb.effective()</source>
          <target state="translated">bdb.effective()</target>
        </trans-unit>
        <trans-unit id="3c315ddbe4fd27bc5efbfecd57492200b4278d35" translate="yes" xml:space="preserve">
          <source>bdb.set_trace()</source>
          <target state="translated">bdb.set_trace()</target>
        </trans-unit>
        <trans-unit id="ebfb4f3c63a0d8c49b5b0f2b475ee2e986f4ab9a" translate="yes" xml:space="preserve">
          <source>because the new &lt;code&gt;class cell&lt;/code&gt; is not available in the class statement itself. In &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;, we can define the &lt;code&gt;cell&lt;/code&gt; class and set the &lt;code&gt;_fields_&lt;/code&gt; attribute later, after the class statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="49e683ad37125bd208c0c03f749ff25e939cef23" translate="yes" xml:space="preserve">
          <source>before they can create child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd9090d5ffddd195d3f3b419ffede153b0dbf80" translate="yes" xml:space="preserve">
          <source>beginning of line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340ded3fc511a6691a8b7c6f55585799df272244" translate="yes" xml:space="preserve">
          <source>big plus sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e4f23119f7668c81c56c877acdc10f397299d2" translate="yes" xml:space="preserve">
          <source>big-endian</source>
          <target state="translated">big-endian</target>
        </trans-unit>
        <trans-unit id="e321952e2f70df1ede282b6c6baa937999273dc3" translate="yes" xml:space="preserve">
          <source>big5</source>
          <target state="translated">big5</target>
        </trans-unit>
        <trans-unit id="88db5568c0302fad2c2bebaaa568574c8fc18f87" translate="yes" xml:space="preserve">
          <source>big5-hkscs, hkscs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e348d43d4bbc5c70e441880731bfcf672ebe7f4" translate="yes" xml:space="preserve">
          <source>big5-tw, csbig5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1b302ec3ee32d19525c0d34a49b2afcf4933fb" translate="yes" xml:space="preserve">
          <source>big5hkscs</source>
          <target state="translated">big5hkscs</target>
        </trans-unit>
        <trans-unit id="b85badabc5176aa1f4e5f12a3f99e9f131fb869c" translate="yes" xml:space="preserve">
          <source>billion laughs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c087c37bd1a88f656df1a74c788c6e86aad92949" translate="yes" xml:space="preserve">
          <source>billion laughs / exponential entity expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00915fca63befed3b644995b5c669a35aab6879" translate="yes" xml:space="preserve">
          <source>bin()</source>
          <target state="translated">bin()</target>
        </trans-unit>
        <trans-unit id="8339e42ba07f3aae1686018b967d3af496493814" translate="yes" xml:space="preserve">
          <source>binary mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18849f6ba6a1716be9658bf2e81dabf5cc87e08" translate="yes" xml:space="preserve">
          <source>binascii</source>
          <target state="translated">binascii</target>
        </trans-unit>
        <trans-unit id="cb72c56f7b389178db93f0005fc74445f2c7034f" translate="yes" xml:space="preserve">
          <source>binascii &amp;mdash; Convert between binary and ASCII</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c58489aeacfd8c1bc08e21c14a28b8d8f3ebe2" translate="yes" xml:space="preserve">
          <source>binascii.Error</source>
          <target state="translated">binascii.Error</target>
        </trans-unit>
        <trans-unit id="165d5f0a7e6e5c544443c6091074bf7dc24ff1a6" translate="yes" xml:space="preserve">
          <source>binascii.Incomplete</source>
          <target state="translated">binascii.Incomplete</target>
        </trans-unit>
        <trans-unit id="8d38c236f8e389238890232ff527f6d69ba6ff61" translate="yes" xml:space="preserve">
          <source>binascii.a2b_base64()</source>
          <target state="translated">binascii.a2b_base64()</target>
        </trans-unit>
        <trans-unit id="d5189ca19e6e706ff3efe503a4207d75bc7b70ff" translate="yes" xml:space="preserve">
          <source>binascii.a2b_hex()</source>
          <target state="translated">binascii.a2b_hex()</target>
        </trans-unit>
        <trans-unit id="9532e60f5cab9d2045cf02afa6b594d30baf213c" translate="yes" xml:space="preserve">
          <source>binascii.a2b_hqx()</source>
          <target state="translated">binascii.a2b_hqx()</target>
        </trans-unit>
        <trans-unit id="923f06e2769aa547dc90b2e5a8e188027bf1e03a" translate="yes" xml:space="preserve">
          <source>binascii.a2b_qp()</source>
          <target state="translated">binascii.a2b_qp()</target>
        </trans-unit>
        <trans-unit id="272754d8c8e1ed2a5fc8b4f2beab239a64b7cc6f" translate="yes" xml:space="preserve">
          <source>binascii.a2b_uu()</source>
          <target state="translated">binascii.a2b_uu()</target>
        </trans-unit>
        <trans-unit id="de59cd3fdb7e1fb94f9b545c4a05009c1acefbbd" translate="yes" xml:space="preserve">
          <source>binascii.b2a_base64()</source>
          <target state="translated">binascii.b2a_base64()</target>
        </trans-unit>
        <trans-unit id="2894dc0c535f00a11f13677cf6e6f9dd21eee3a5" translate="yes" xml:space="preserve">
          <source>binascii.b2a_hex()</source>
          <target state="translated">binascii.b2a_hex()</target>
        </trans-unit>
        <trans-unit id="c8eaafde341003a5f0a0f909c1880aad957b30aa" translate="yes" xml:space="preserve">
          <source>binascii.b2a_hqx()</source>
          <target state="translated">binascii.b2a_hqx()</target>
        </trans-unit>
        <trans-unit id="850d9d0d648737ac8491658c74a56a7afff53676" translate="yes" xml:space="preserve">
          <source>binascii.b2a_qp()</source>
          <target state="translated">binascii.b2a_qp()</target>
        </trans-unit>
        <trans-unit id="fa4c625a95126fad484c9a8c5d581ad17a9b3d4d" translate="yes" xml:space="preserve">
          <source>binascii.b2a_uu()</source>
          <target state="translated">binascii.b2a_uu()</target>
        </trans-unit>
        <trans-unit id="59deb5ee2402eebd80a92574025f4f149184fe43" translate="yes" xml:space="preserve">
          <source>binascii.crc32()</source>
          <target state="translated">binascii.crc32()</target>
        </trans-unit>
        <trans-unit id="8eb8f39cd7a2fa1962c7552ce6a60898379f7043" translate="yes" xml:space="preserve">
          <source>binascii.crc_hqx()</source>
          <target state="translated">binascii.crc_hqx()</target>
        </trans-unit>
        <trans-unit id="bbf33f410e596f571d955f17459fa4b914d8ea34" translate="yes" xml:space="preserve">
          <source>binascii.hexlify()</source>
          <target state="translated">binascii.hexlify()</target>
        </trans-unit>
        <trans-unit id="22b0a863eddeec83118269eaea88d3e0592398d5" translate="yes" xml:space="preserve">
          <source>binascii.rlecode_hqx()</source>
          <target state="translated">binascii.rlecode_hqx()</target>
        </trans-unit>
        <trans-unit id="06da54d7ee613488a594a4865f198d1fde54adf8" translate="yes" xml:space="preserve">
          <source>binascii.rledecode_hqx()</source>
          <target state="translated">binascii.rledecode_hqx()</target>
        </trans-unit>
        <trans-unit id="8cf9a8e3377b3f054f51a86cee9646fd65646179" translate="yes" xml:space="preserve">
          <source>binascii.unhexlify()</source>
          <target state="translated">binascii.unhexlify()</target>
        </trans-unit>
        <trans-unit id="64f0d150b6fff2454c87b9402bfb06f6897e7d0d" translate="yes" xml:space="preserve">
          <source>binhex</source>
          <target state="translated">binhex</target>
        </trans-unit>
        <trans-unit id="a02f496b7163edaacb07d508484fe8a4fda9141f" translate="yes" xml:space="preserve">
          <source>binhex &amp;mdash; Encode and decode binhex4 files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552f40a657644e6d2e6ed244b63b118af5b026ae" translate="yes" xml:space="preserve">
          <source>binhex.Error</source>
          <target state="translated">binhex.Error</target>
        </trans-unit>
        <trans-unit id="3f8916013ab94e1c3c3766957557a155e93bef9f" translate="yes" xml:space="preserve">
          <source>binhex.binhex()</source>
          <target state="translated">binhex.binhex()</target>
        </trans-unit>
        <trans-unit id="7653135593a7354c7e7b39a6d84922b1d5d2a32e" translate="yes" xml:space="preserve">
          <source>binhex.hexbin()</source>
          <target state="translated">binhex.hexbin()</target>
        </trans-unit>
        <trans-unit id="fc5afa849d013727d8acf30682a03a891f7aca7e" translate="yes" xml:space="preserve">
          <source>bisect</source>
          <target state="translated">bisect</target>
        </trans-unit>
        <trans-unit id="3cf3963fde2f5c1b5440fc1511570500c3dafe9d" translate="yes" xml:space="preserve">
          <source>bisect &amp;mdash; Array bisection algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877ba224c0b7105ddc55d35f62ff743f2cee70a9" translate="yes" xml:space="preserve">
          <source>bisect.bisect()</source>
          <target state="translated">bisect.bisect()</target>
        </trans-unit>
        <trans-unit id="ccccd442d3a0f3d0bd9978f0c1bb5769adf86bc8" translate="yes" xml:space="preserve">
          <source>bisect.bisect_left()</source>
          <target state="translated">bisect.bisect_left()</target>
        </trans-unit>
        <trans-unit id="6d1746690bf723c0eca44018a16ac6113a0c75ce" translate="yes" xml:space="preserve">
          <source>bisect.bisect_right()</source>
          <target state="translated">bisect.bisect_right()</target>
        </trans-unit>
        <trans-unit id="e441c2d8897c845d2457f9c9e56e585e66b3b982" translate="yes" xml:space="preserve">
          <source>bisect.insort()</source>
          <target state="translated">bisect.insort()</target>
        </trans-unit>
        <trans-unit id="57a3cc370fba1b6e75ea57963f14708419ab1d6f" translate="yes" xml:space="preserve">
          <source>bisect.insort_left()</source>
          <target state="translated">bisect.insort_left()</target>
        </trans-unit>
        <trans-unit id="336266ae4a4c28b607f2d2fd03d6aa2d90a91dfe" translate="yes" xml:space="preserve">
          <source>bisect.insort_right()</source>
          <target state="translated">bisect.insort_right()</target>
        </trans-unit>
        <trans-unit id="30daf508e3328242e1c0c273cf91dc6ea1476f09" translate="yes" xml:space="preserve">
          <source>bitmap</source>
          <target state="translated">bitmap</target>
        </trans-unit>
        <trans-unit id="95da31268de1d743f93bd918550b51f15b04b4a9" translate="yes" xml:space="preserve">
          <source>bitmap of &lt;code&gt;CO_*&lt;/code&gt; flags, read more &lt;a href=&quot;#inspect-module-co-flags&quot;&gt;here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0fd865501822ef18da1f49d7bace41a482dcde" translate="yes" xml:space="preserve">
          <source>bitwise &lt;em&gt;and&lt;/em&gt; of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13708af6d30d68c03ca412278840d1cdd117c280" translate="yes" xml:space="preserve">
          <source>bitwise &lt;em&gt;exclusive or&lt;/em&gt; of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35e606f5603c446aec4511572df02cdd48d32e5" translate="yes" xml:space="preserve">
          <source>bitwise &lt;em&gt;or&lt;/em&gt; of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea7dd8761a09afa1bea015d73212fbf230f6ff1" translate="yes" xml:space="preserve">
          <source>block input operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9f04290273edb46f5b22ff4ed58e1b040952bb" translate="yes" xml:space="preserve">
          <source>block output operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474ead5ad581dbabf948f2116e40eb4e4005aba3" translate="yes" xml:space="preserve">
          <source>board of squares</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5039d155a71c0a5f7a2b2654ad49cb7ee47a8980" translate="yes" xml:space="preserve">
          <source>bool</source>
          <target state="translated">bool</target>
        </trans-unit>
        <trans-unit id="7d8d4df6f30ef8fd80efb64f4869442c20da5ad2" translate="yes" xml:space="preserve">
          <source>bool (1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="bec43a00ca58d0dba8b9095ed3989b9cf0318145" translate="yes" xml:space="preserve">
          <source>boolean, indicates whether the request is unverifiable as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770ffded307f29a053dc96a33c67b10b75fb84ce" translate="yes" xml:space="preserve">
          <source>border=padding</source>
          <target state="translated">border=padding</target>
        </trans-unit>
        <trans-unit id="30ca013f5479509970d024b78a6d6ae9b28df3dc" translate="yes" xml:space="preserve">
          <source>both in the UNIX Programmer&amp;rsquo;s Manual, Supplementary Documents 1 (sections PS1:7 and PS1:8). The platform-specific reference material for the various socket-related system calls are also a valuable source of information on the details of socket semantics. For Unix, refer to the manual pages; for Windows, see the WinSock (or Winsock 2) specification. For IPv6-ready APIs, readers may want to refer to &lt;a href=&quot;https://tools.ietf.org/html/rfc3493.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 3493&lt;/strong&gt;&lt;/a&gt; titled Basic Socket Interface Extensions for IPv6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00db784e5a22b2c0caf64e6e23f3efdbc1ef802" translate="yes" xml:space="preserve">
          <source>bottom tee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb715b785b5dbcbcbfcada8374ab5a52fc89274" translate="yes" xml:space="preserve">
          <source>breakpoint()</source>
          <target state="translated">breakpoint()</target>
        </trans-unit>
        <trans-unit id="4adbbf16d5c07e0449170f8d6c441c6067145738" translate="yes" xml:space="preserve">
          <source>built-in functions defined at the top level of a module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748a336cc88c03ccb07ed5f5073d18624731b8b5" translate="yes" xml:space="preserve">
          <source>builtin</source>
          <target state="translated">builtin</target>
        </trans-unit>
        <trans-unit id="bd1dc6f71297c711fd62c63df1bdbc3f49918cb3" translate="yes" xml:space="preserve">
          <source>builtins</source>
          <target state="translated">builtins</target>
        </trans-unit>
        <trans-unit id="890f68fa7bf8a5e491ecab5f23aedde80881442a" translate="yes" xml:space="preserve">
          <source>builtins &amp;mdash; Built-in objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ab9813d397fb6f4ee3f434c145a2776c873b85" translate="yes" xml:space="preserve">
          <source>builtins namespace seen by this frame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a171f528d85754529501390ca6eba7703cdaeaf" translate="yes" xml:space="preserve">
          <source>builtins.breakpoint</source>
          <target state="translated">builtins.breakpoint</target>
        </trans-unit>
        <trans-unit id="66ff426b4ab16d6ca2567a8cbbc0f3f8c6ce10da" translate="yes" xml:space="preserve">
          <source>builtins.input</source>
          <target state="translated">builtins.input</target>
        </trans-unit>
        <trans-unit id="555c11f0367669c1394cd4cb470cfbdfb471e0b3" translate="yes" xml:space="preserve">
          <source>builtins.input/result</source>
          <target state="translated">builtins.input/result</target>
        </trans-unit>
        <trans-unit id="472da2b94e9fa87badd16a55e1eaec4f53ffc52a" translate="yes" xml:space="preserve">
          <source>bullet</source>
          <target state="translated">bullet</target>
        </trans-unit>
        <trans-unit id="7201f9de45dfebecdbcb33d14debe55ee941ce10" translate="yes" xml:space="preserve">
          <source>but adding &lt;code&gt;create=True&lt;/code&gt; in the call to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; will make the previous example work as expected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27223c30fca82dc741c15c3bed5ebd7203781e3" translate="yes" xml:space="preserve">
          <source>but using &lt;a href=&quot;#re.compile&quot;&gt;&lt;code&gt;re.compile()&lt;/code&gt;&lt;/a&gt; and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
