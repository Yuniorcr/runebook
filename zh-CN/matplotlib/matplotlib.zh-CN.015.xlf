<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="matplotlib">
    <body>
      <group id="matplotlib">
        <trans-unit id="9eb02bc9405f93ae8dad6ec30b3ec07dceebd79f" translate="yes" xml:space="preserve">
          <source>Enable or disable mouse dragging support of the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7122017a0c938515150f7654bc63b1203ef37816" translate="yes" xml:space="preserve">
          <source>Enable or disable the back/forward button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3df185c692474197cd407c7d688c0deff93726a" translate="yes" xml:space="preserve">
          <source>Enable the toggle tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8490d3e63a25af2b016e56e2b7ecf47c5823ee2c" translate="yes" xml:space="preserve">
          <source>Enable/disable corner masking, which only has an effect if &lt;em&gt;Z&lt;/em&gt; is a masked array. If &lt;code&gt;False&lt;/code&gt;, any quad touching a masked point is masked out. If &lt;code&gt;True&lt;/code&gt;, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c971c623a53ce4d12a0051663ee6a8e2629b444" translate="yes" xml:space="preserve">
          <source>Encapsulation of a font that a DVI file can refer to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca42f628faf21333db6f1b467fb188f38845fc0" translate="yes" xml:space="preserve">
          <source>Endpoints, expanded and/or swapped if necessary. If either input is inf or NaN, or if both inputs are 0 or very close to zero, it returns -&lt;em&gt;expander&lt;/em&gt;, &lt;em&gt;expander&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb614f68385ca66b09829924d9687a29dd6638dc" translate="yes" xml:space="preserve">
          <source>Enforces the priority of a local variable over potentially conflicting argument(s) from a kwargs dict. The following possible output values are considered in order of priority:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b2fcc794efac90eafb382df3120aaff82bc5d4" translate="yes" xml:space="preserve">
          <source>Ensures that all ticks are strictly positive. For all other tasks, it delegates to the base &lt;a href=&quot;ticker_api#matplotlib.ticker.Locator&quot;&gt;&lt;code&gt;Locator&lt;/code&gt;&lt;/a&gt; (which may be different depending on the scale of the &lt;em&gt;r&lt;/em&gt;-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868c597d1d7b31beb636c5d9f153bd926d1c9480" translate="yes" xml:space="preserve">
          <source>Enter &quot;raster&quot; mode. All subsequent drawing commands (until stop_rasterizing is called) will be drawn with the raster backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183bc82c25b047823f1bcca5066c9bc42597b14e" translate="yes" xml:space="preserve">
          <source>Errorbar Subsample</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6ed81554689457972ba8b9eb0076d62957326f" translate="yes" xml:space="preserve">
          <source>Errorbar function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad8087b9020aa0931fe28bb3974ade80d59dabf" translate="yes" xml:space="preserve">
          <source>Errorbar limit selection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ce65486132c25526e1a9e489fcd9c31e4467ea" translate="yes" xml:space="preserve">
          <source>Evaluate the estimated pdf on a set of points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a561dbf9927845b60cf04eb55e4fceec888470" translate="yes" xml:space="preserve">
          <source>Evans test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b668316d212518e024c9a8d778cf67cbbafc14ed" translate="yes" xml:space="preserve">
          <source>Even if multiple calls to &lt;a href=&quot;#matplotlib.backend_bases.FigureCanvasBase.draw_idle&quot;&gt;&lt;code&gt;draw_idle&lt;/code&gt;&lt;/a&gt; occur before control returns to the GUI event loop, the figure will only be rendered once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0eb0148e1418e16bcce0e217fc2c4cddcdd3e8" translate="yes" xml:space="preserve">
          <source>Event carrying messages from toolmanager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68850c71e128a2ac4dfa31048d6f16cae8dda9b9" translate="yes" xml:space="preserve">
          <source>Event for tool manipulation (add/remove).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff111c3428f381db918415a32517788cdd66ace" translate="yes" xml:space="preserve">
          <source>Event handler; will be passed to the current figure to retrieve events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e120ac89fd2d1c01f73e4b615c42168a2848bcd9" translate="yes" xml:space="preserve">
          <source>Event to inform that a tool has been triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d25ea6caaa04e3103ae148892bde536995b099" translate="yes" xml:space="preserve">
          <source>EventCollection Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6c659fe78117fad14ab87734774717fb2e9d44" translate="yes" xml:space="preserve">
          <source>Eventplot Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93e1fa6d859d606a4c016c93a9fb2738ffb288c" translate="yes" xml:space="preserve">
          <source>Every time it is triggered, it switches between enable and disable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddf3e8087091c323d25161e0a2c52b2bdbe0c90" translate="yes" xml:space="preserve">
          <source>Example code to write the progress to stdout:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55530580de9ba2c625e8f84d2a4b07d07de460b6" translate="yes" xml:space="preserve">
          <source>Example format strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f9d603e16f8ef16b61cb7dd71733745d6dc774" translate="yes" xml:space="preserve">
          <source>Example use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2f7fadd9be85bdea071cdccfc6eaf80b4f594d" translate="yes" xml:space="preserve">
          <source>Example with large yticks labels:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85646a7517d0843d57d4704e9b295a0a5fba2e5b" translate="yes" xml:space="preserve">
          <source>Example with rotated xtick labels:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="a9a13b0bbaf903fa42e539fa507a4dbbde025e5a" translate="yes" xml:space="preserve">
          <source>Example: an array &lt;code&gt;a&lt;/code&gt; where the first column represents the &lt;em&gt;x&lt;/em&gt; values and the other columns are the &lt;em&gt;y&lt;/em&gt; columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf09b1bb86a9ee564f7561104a9b947db491413" translate="yes" xml:space="preserve">
          <source>Example: see &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/event_handling/lasso_demo.html&quot;&gt;Lasso Demo&lt;/a&gt; for a complete example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114715b67ebb6434c9b7687c83c91f7ed8200478" translate="yes" xml:space="preserve">
          <source>Example: suppose you want red to increase from 0 to 1 over the bottom half, green to do the same over the middle half, and blue over the top half. Then you would use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="018a096a4b949810e5378e01010b0eb8529b721e" translate="yes" xml:space="preserve">
          <source>Examples include timers (see &lt;a href=&quot;matplotlib.animation.timedanimation#matplotlib.animation.TimedAnimation&quot;&gt;&lt;code&gt;TimedAnimation&lt;/code&gt;&lt;/a&gt;) and file system notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b2e1d3970eec4b52208641325edb75a0bba180" translate="yes" xml:space="preserve">
          <source>Examples showing the use of markers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2e82f1d55cfbf106ac694a9ea5b390b63bd612" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.acorr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6682e2338225140373e09148e7406d6d5e2ed791" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.add_artist&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4816e6268c94122fe6f3c5db10c12dcd7cdbbed" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.add_collection&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded2e5d989bc207113c053f6706082532fee3d87" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.add_line&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807ca0ec41391c98d48b7598e867e7afb1c8bcb8" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.add_patch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd384130a4ccd9debddf956f5470137262408bb" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.annotate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8693724740ce5cddada3e050739f4b5423a548bc" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.autoscale_view&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de734f301a96cd9a7cea708cdc83694644b7f2e9" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.axhline&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995deff904408ec60923c02ac5161a8169944815" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.axis&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951266a7c2fa3e495ea5e21c488192868f835a91" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.axvline&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdf88ad71ab6b5cde7ac43c8ac17d644d979e0e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.bar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812e30f5d9b8ae14308d05d528ff9d6bc8ea84b5" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.barbs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff6ba405c6cbc9dfef370a4c33881a394fe3f50" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.barh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a0e2d41762cf8dadfbae4c90286dbf699f6525" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.boxplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04032e279e2869bba6a2cb8a1221aa6cfeadd32a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.cla&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0236894fd19bc86043a62bbd9ae994639646aaf" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.clabel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538ac3d00bc1d66bdc09bcc025c0fa796e8b33c6" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.contour&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc33df28f3ad9006862985782e4e488257cef00" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.contourf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93643a489b77acb183c00dc4ba2caac57a92949e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.errorbar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16a5df6aafc24f235473e80fda7ca93cb819111" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.fill&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb019baee785c95bee50eb6aba511c25332101c6" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.fill_between&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6488752942054bdb657f6a6ecfd2617522ba0af3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.fill_betweenx&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecc7b629cebe97b2462a4f3df2ec6cbd7c1029e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.format_coord&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4d7b65749ccde5efc32b3a7a2f3a5e788ed3bf" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.get_position&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797591f1f84faca3d5d79f30c5b04e413d02f682" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.get_xaxis_transform&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13329eda15763052a1bc329d7db66c40b23d0c3e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.get_yaxis_transform&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec975f6343220c35ff338ead40390129feedcac4" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.hist2d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbc28257e7f2fd98ad160efbb1928a155a78c37" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.hist&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfed3da852b501d063676de688f504c98e948be4" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.hlines&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebf03725ee5f88484a5f7088eb5f9c823990fc5" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.imshow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7109600120584e0d375418c0c72c96127e274bf3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.indicate_inset_zoom&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a9d6c707abebfe7088ee88257907e0af705b3c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.inset_axes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97937ccdf924ebe4ced77f922e8cbf13e8a1873" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.legend&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5251729f420c0c53466ea0ce075724b876c6ae" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.margins&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35161891fb0496523edb39d287ffd2a0906886ed" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.matshow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b99062bf0b1dacccc9b57cce8a213154cb2a0d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.pcolor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661a2c30972e918d0b2fc2529a9c100e224b1ed0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.pcolorfast&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1548307f71d97db4d56ffab8a5875234a2985a7" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.pcolormesh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7afecbd4f622611dba132943218310281dca9f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.pie&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c2e19678acaf8ab3cca770294af308cbff7879" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.plot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398510372a71d80a3d6934284d3c54c44f6f42c6" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.quiver&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8aa15f2cae7ed325d6158353c7969791f3038cf" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.quiverkey&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28348557f168e829c1383440956f2073f55ce778" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.scatter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6866bfde2ec7c8336fd727d3fb460636bb62c6fc" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.secondary_xaxis&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6937337934dfc3ba33b715b72b95016943656278" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.secondary_yaxis&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae27d726d684139d87c6beb577a61960449f416" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c057fc6ff9b441731925e4e04e4f616e3dbd8ab" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_aspect&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e474619e7165b4cecb8d288ee8a2fc16eefd875" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_axis_off&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cffcb25b8d7bd72186412d8a7d309d41eb8b38a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_facecolor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ddc31f0753d6afc9dc56f77b389658cd8733c9" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_position&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632b2ba4a6b562b289181874a32f6e36af2ef4eb" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_prop_cycle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82cf326607884da4c67defcaa436143e9e2f515" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_title&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34cc8841ac57c348a58eaa0383ac5f5bc67b6cd" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_xlabel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4c296f35a64dbd00e16191a30234db721ca05c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_xlim&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e830ca2c16a3f7a294860be96d395e6a378e8d4e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_xscale&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2d56b95cb8f77006c1ee94e47dfe0da40181c8" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_ylabel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f3de86d61b6f574a57bcb3079432e879612856" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_ylim&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb198d5bca48a8c4c7df9a35bd1dac405d19174" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.set_yscale&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0240d684efcae2a2f092a6a303802cbae353618f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.specgram&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fb6adc0e704261a0d4663cdee21c87d7f2b5aa" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.spy&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0979b7bdb9711e0414a1d19096a713b5da920829" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.stem&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca79dace3dbdec3fc633e6c414c103abfd61d66" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.step&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fcbb8d93090cc06d0a6a521ad7f984e3c1c6a6" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.streamplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e25f4fa2e05d6496fc50c89af1fb3fcdf8a1e6" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ee98710e2715d57bb38ae90567110a6a74132f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.tick_params&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5215ce85a7e7cfae97d02de7fc48bc05bc712b" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.tricontour&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528bf1b39157b13b8f6ecbed30d6a89a0275dcf2" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.tricontourf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc34a2c69928c5c3b0d2b64d562d1d668eb738a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.tripcolor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c847df0cd6c2b5891ac36f5e13a75dbc1b623b9" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.triplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f4e4fc6022f9c59ea5e66551ff7af601273493" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.twinx&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240b6d16de62ea1d06a090fae749afedb92314ed" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.twiny&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537be084709b36705390d0e37a93cdf3e198b935" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axes.Axes.xcorr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fe5397ba83621e4852e9b571b459fd22c43b8a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.get_major_ticks&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf0d596c5fbc93050b8e0bf17db065ae42a51da" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.get_ticklabels&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3da9b001eb3ed0cffade92031509abe162f901" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.get_ticklines&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd29954cc19b9f029be336afcc90e8ae6bd2b31" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.set_label_coords&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09cdb5b993a219c50e8b1f699b88fc7f362cbee" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.set_major_formatter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f203e5e2dae91cce84af7c4fd40f92e7023b8d71" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.set_major_locator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dafbb7cfc9a5c2b23ef7997d20f4543341e167" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.set_minor_formatter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d06c3d4e4a0918449345f019f82abb8a9dd8cce" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.Axis.set_ticks&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb40220aa39d0eb8766925a051336dfb08778a6" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.XAxis.set_ticks_position&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6605f489706c9f19e3b80f27ad6901e9c0c700e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.axis.YAxis.set_ticks_position&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f014e36aa97c7075beb7633ddddd4641e62ee0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.BoundaryNorm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bcf5f90c2fc427df05a3b31efdaeddaa7f4bef" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.Colormap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc32d6d73b03d5a974d5d4d80993049b8f8e3b08" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.DivergingNorm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e07be83aacfd749f07b00bbc1107f90ae6d48a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.LightSource&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6a683552ccf3e3c200560683ede4604ac5d3b3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.LinearSegmentedColormap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bfc7d05c5d72c3167391fdf5dfda7af0eb8df3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.ListedColormap&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c501140000e98f101194f9c5c1bf652826b994" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.LogNorm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fe0a1f0e5e9645edc71c00085b9454a7c4b457" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.Normalize&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2eb66e74e91dbd3def317ed76ca875014649443" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.PowerNorm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8828de700703b85436a377e4862e014a32ed8c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.SymLogNorm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25fef2ce3aafb925d9156d3e2e33656aafae5ce8" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.rgb_to_hsv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab3608d8edd94eb8f0bc953791892e3e80ef6bd" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.to_rgb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e37657fa0d5b4ae0c33c59239ece93a683ac1" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.colors.to_rgba&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c61fb1307b127101dbfc460ba56818a35bcf1ff" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.figure.Figure&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf032d56c9597b746e4141b86a769ea03530af0b" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.figure.SubplotParams&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7653c1339fdd7e94430ccfd826d30721ac0fd9ec" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.gridspec.GridSpec&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d32ca19b9192c350e7cfd5afc5088e7e08546c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.gridspec.GridSpecFromSubplotSpec&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222c4f07f1e7853eb591c91cf172a5f6d7808d17" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.lines.Line2D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9718c093b83856391271bb811b87d5ac2b5515be" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Arc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2703148cf2791b72212da551d51e7a8636cc3703" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Arrow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62385018cd87e28243c986ce245e6d7309495258" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.ArrowStyle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c15745d62c0deeb1ab0c4086b5963ddb7f2d586" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.BoxStyle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3710ad5e34d5e684b60fde455da42a3ab26741bc" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Circle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62076b76a56a9c17db53e96fca9225a390d3cb4" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.ConnectionPatch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b0bd471929ab4f2b5b1db4ef0254245ab489ad" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Ellipse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420960a38028278a87e57b4c2858f92ef0c473ff" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.FancyArrowPatch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ee78cc5d8e70c5b8c89f6cfb5735d3fea311be" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.FancyBboxPatch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4256f964f2b24165346c68f770ac6caf5e27703f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Patch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da81a43182f9641ea774948469d00ecbff2db359" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.PathPatch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b938303fef404079d1639aaf01c16b8a4521ee64" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Polygon&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef32e0ee2fe81399f3fb80130430f24b47eb64a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Rectangle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276cdc39acd306386b38d914d7ca4d3affde0502" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.RegularPolygon&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e76d2bc8f4c5db9055797ea2a3d999e5e97ae0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Shadow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c892ab595d520452ec28abfbdeae15368811de" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.patches.Wedge&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59b96cd3c2672b7f1b2d89b850b956826bcb22d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.acorr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb92465c45ffb0870941f94056426f85a14bcc0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.annotate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804a140ec8fa15389b54dc24bde17d5260d986bf" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.arrow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5cfe6cbf0ab32d31489a4b95d704b5d1dc2456" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.axes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c968430fa4838e039a8210aeeb6701f83c298e23" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.axhline&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71902ea92ce274f4c91943c5bb8996022372875d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.axhspan&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6d2535b4b0997389602aefebc6ffe43b05bc60" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.axis&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5c131be0fa98928a960695aa19561a8c3f1298" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.axvline&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0ed99029719911ee83c1f6f261f06cbdbeb220" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.axvspan&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c2a9c7eb9d81bc0f354cc134af25da051aa87d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.bar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ab717b1e09208a5c91f316e16a53be063203e9" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.barbs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072641518b50ce17d178aa547e0b2c04aa08c209" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.barh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ffc66a8a809724207d2768b8239b7c76babdf2" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.boxplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab16b9a8826419ff0fceefdeb1f3bbfdfa87d80" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.clabel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce10a26bea88699c477453f8efa62156d5054794" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.clf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf396f63287c205cc92822bd24cb57290a1a9922" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.close&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824f6529da5d6dc4f5cd580722d359a4f7135b26" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.colorbar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd3345bb728e52968af0e13461ef57da6e32896" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.connect&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a372c0495c139870bd570b754239d586e27c7c85" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.contour&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78efd1379f1a34af5634786c13feee2143313f6e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.contourf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5066dd009023167d0f0ee445e8521d0635fdc86" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.disconnect&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343c586bf560af8bf9e04b246cbdd2decff9ea4d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.draw&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23d801cad57b1fe64d3960cfd250565ff07f695" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.errorbar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6c871a56719fdc98db48d87de5c48f46ead49c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.figimage&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b45a90061f8491df833d2ac233e1b2d36ed5be" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.figtext&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6993f68a0b37a0967da117611df778378cff3ab4" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.figure&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a3349c84dd0210fb26b24eb2791325ff258688" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.fill&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f9de464d6b5f8a57e2b788815893df0642c139" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.fill_between&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e857110c94cfaea401f551457fa51dcd4a444f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.gca&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2439c0a74118bf052bf6ed1488c8d2ebabe3af3c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.gcf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a0d4708e27586f654d4167e67fd100aaab130b" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.get_current_fig_manager&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9953411c8ca32a3460309e52781fdda0844c57d1" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.ginput&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a28d0c4510b3999ca91ceea6f00c4f28612c20" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.grid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47c4df8966e7fe6d479b9d7448f22347ac950c0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.hist2d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7622eb41521f10a0744af59dd3ba52fe34aaf1" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.hist&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f30ed59abbaf5ef34ebe8e2d19fd80c4f33655" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.imread&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b632a246e8689020c2d208766d3a0aa2cc19ff3e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.imshow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d6c5d715f18086b20c3c076242e724aff2ad31" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.ioff&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd207e9bd85647151809234e38104bbb83b945e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.ion&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fec0d675032a42a6ebc451deabb05512aa992ba" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.legend&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa2b42d478959c744d1727bad0b275248d1b8cb" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.margins&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303b93232d46c2ddb346f287c79828fd92066174" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.matshow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66c22e7d0a564039eaec1183e91bd5edd2b0399" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.pause&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8d6881298881bd19021927a3c051f17413bfc5" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.pcolor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3ad9789dbc8f936462851ec2108b6b6cc961f7" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.pcolormesh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb0e1675eb1929e0f85f316aeb462c7207281a0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.pie&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f151d29a6bde3648c29738fa5ffd72f20fcc1caa" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.plot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fa2092003a3d8fd683a28e23058cb5b4a46752" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.plot_date&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb5ff3978540f29378331c69913e400fb43a83c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.plotfile&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27c0a9b45ffc1ea8a4cff6f19e82e8e584ddde9" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.polar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04df27d12aa8786edf93604b7eca53241fa303d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.psd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a841506d1996e0ddb128e4e769f992864cee7d9" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.quiver&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd1582a17ac5b5aa5782c5e79bf99d12eec1b06" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.quiverkey&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d60cee86775202d9fa98a7b2ab9de3f423a0f2f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.rc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb10e8f14608811662b411205a63956bb3eab4a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.rc_context&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75fe1b6f53cab36c517b15d4cd9d651aefcbf17" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.rcdefaults&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771b2390aa5acedbb1d10e91dde1676eb1954f38" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.savefig&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61aeba93f78b1da5f4aefc959a8635b88197d317" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.scatter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de7623f66919af258c26a2af6b29974a727becf" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.sci&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61ee6af3229b49516b14c80fe173e4fcbcb4ae7" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.setp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5f6986a10513d4a06ed0c569c204e2635d2e9f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.show&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffda92e5fbef496eb21f5469d98b159fbfdd0055" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.specgram&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fa06864a0f863205d3277a5bab413fa2235792" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.spy&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b918916b8c7517a4bac92dc2fe329603b7483d3e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.stem&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ba32c0e85e801cb2d20a526daaa605ac024221" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.step&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29684555c0f488168040a65058802dd0ce51f411" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.streamplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f39c0e1e06c2de77504d0b8303887d5971569a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.subplot2grid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c16d7d897a32a9d9337876d64fcb114f54fa372" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.subplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51c8200557d20a1cfc1127720e196a25625fdfa" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.subplot_tool&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c72caa8b64144c04ebc3e7009181c88bfb2914f" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.subplots&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2889e2301c5ae5e5d3a2e3e28be705e6bebe7fd" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.subplots_adjust&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da40828cb1cf4d58956122a435bf431d2fdb750e" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.suptitle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489795c0119b9ae468e2e456a1f1cb7c9b987aa0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.table&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf537ccdcf1c9cb6459ba8090f6c1db6e8502630" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93e6c2f472763a67ba18ba89eb79e27a15b3aef" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.tight_layout&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14efc40c4cbef2f2413db1df3e8cb2934bde7f76" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.title&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaec9345b95dedd3b83a74aed0befebfb65df684" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.tricontour&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a8aa328657df99c4bc76c9cd16dfb748c17ed3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.tricontourf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547a391a0f91f0938c0c6bd35819aee7918a3d29" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.tripcolor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfb304b2a04afcd52fc9c11c98925ab3142c31b" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.triplot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604220f7f26d7926b77d689c66013c1f70612813" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.waitforbuttonpress&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c40774930cbc4e2c6e1ecc4d7295b7aa0517a9a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.xcorr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fcb71c09b084d8be6307405cec98ca19cd896a" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.xkcd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f1d2d57d549a55b40064218e198b679891c577" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.xlabel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1058142b5b2d9e18039c2822d33de9147325d3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.xlim&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089be8577ce38b6ae2bc4fc9ed7895277a540e75" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.xscale&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601c0be7cac0a029dd0f833f94e981cbc882c274" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.xticks&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a201bcb41691f002df1205b148c324c6f7f03889" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.ylabel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d2651dfc9260745da0216cbe985dabd9e57256" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.ylim&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b5f0a3c734daeda82552cf2642ffb643bfadd2" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.yscale&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570c00666e08de958c2de5a3b8b03277a2a9321c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;matplotlib.pyplot.yticks&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c5809f25f099df31be4de089bf0f63f19ec63d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437c91096ae82af8ca0fedbdcdb8351913bcf184" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f956794cc74d6fa6043f6ba52d2f58195e5a16b0" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd76e306bebc5403b61d2477acb79a72fc478bd3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115e64fd4c30c628e66e3a9e258ceeb6d9d348d5" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8b50ee2bf10c22de9670726fcc69f4abea8556" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_divider.HBoxDivider&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1090cfe1533b19dff5b97be4a7828b82d8e79008" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d33ca7350b5fe2a4bb5791cf33a0dba9d695e7" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_rgb.RGBAxes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cc8661fc2e6f442ad82c19fa471e49fc119e24" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4492b0e978b1ffd0ac48815313a83fdcb5bab33" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_size.AxesX&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed86a645d464a495dac7af0b4cd7692984a27bee" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_size.AxesY&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e88848d717afba8e00bce0f44ea021a67bfab3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_size.Fixed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa66f5e1a005b27e3e8846cc6b8fc994b021d883" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.axes_size.Scaled&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1142ac094ba2d84efe875afdfa9e4f7322b58c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.inset_locator.BboxConnector&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fd172c10de200bb361911ea8d753244cc26972" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcf74763ad3514cb5cb1a7343939aee0842b199" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.inset_locator.BboxPatch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe09a91d1a3bd06328a78fbda783229610eb78ff" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.inset_locator.inset_axes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417a8616d81093c67657777f3e33dd0f049fc535" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.inset_locator.mark_inset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de42a5ad7c3c8a4cd2eb58b250d208c426cb81d" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08394b2b9bc897ec6a5898c86afa476f09520b5" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axes_grid1.mpl_axes.Axes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f648535411dc1b7b1192b3bfe7b6aa7fc30593" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4904e262f9bf0e05d5055e26fd6839c033ae22" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.angle_helper.FormatterDMS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6a502a364569db6ae088dcdc1785b022e63307" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.angle_helper.FormatterHMS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98de235e837c8e97514fb5b478d503c0004834f3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.angle_helper.LocatorDMS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551ff687f9584b683b4329ae9db772560e0ca77c" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.angle_helper.LocatorHMS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58199d64ce58905545688cd708ef204f005b8a6b" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157681c743d3336ed58d1be1c134905a01f5e244" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.grid_finder.DictFormatter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a399b1f6469ec1f99d0b35f5501f95e66dab8b41" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.grid_finder.FixedLocator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dce1f89c0d31ce2c583a8a405b70522dfe11d3" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.axisartist.grid_finder.MaxNLocator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab65972c7690070bef48d3854407d21152751417" translate="yes" xml:space="preserve">
          <source>Examples using &lt;code&gt;mpl_toolkits.mplot3d.art3d.pathpatch_2d_to_3d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="7f5c2180184a9fd3572ed1aebfa9345b0e96facc" translate="yes" xml:space="preserve">
          <source>Exceptions are &lt;em&gt;capstyle&lt;/em&gt; and &lt;em&gt;joinstyle&lt;/em&gt; properties, these can only be set globally for the whole collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c693517de27557ff23344ecebb11ffeb4bec17" translate="yes" xml:space="preserve">
          <source>Exit &quot;raster&quot; mode. All of the drawing that was done since the last start_rasterizing command will be copied to the vector backend by calling draw_image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce527b0e6b351c7bb5d782b884d76923c7144f78" translate="yes" xml:space="preserve">
          <source>Expand a range as needed to avoid singularities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c853001ebd57f966eaa6d63e9cdfe254782da9ed" translate="yes" xml:space="preserve">
          <source>Experimental; we may want to add an option to force the use of float32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db01fff3d165d1f7a377f33c2567f5d32bee5ec" translate="yes" xml:space="preserve">
          <source>Explicit color(s) for the arrows. If &lt;em&gt;C&lt;/em&gt; has been set, &lt;em&gt;color&lt;/em&gt; has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f7ad3e6b6d08e66769baf971655c16a295eb70" translate="yes" xml:space="preserve">
          <source>Exploring normalizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7551f0e730a5c9dff73ab707766793f0a3e5c515" translate="yes" xml:space="preserve">
          <source>Extend the &lt;code&gt;dataLim&lt;/code&gt; BBox to include the given points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154b24ba0ecef30009f7f316b9f687461958ea9b" translate="yes" xml:space="preserve">
          <source>Extend the &lt;code&gt;datalim&lt;/code&gt; BBox to include the given &lt;a href=&quot;../transformations#matplotlib.transforms.Bbox&quot;&gt;&lt;code&gt;Bbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efa832a7832f0357260cf0420c7c464249286f6" translate="yes" xml:space="preserve">
          <source>Extend the &lt;code&gt;datalim&lt;/code&gt; BBox to include the given &lt;a href=&quot;transformations#matplotlib.transforms.Bbox&quot;&gt;&lt;code&gt;Bbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b5596088c8f3842dea294a30ff47d730a0f3b6" translate="yes" xml:space="preserve">
          <source>Extent of the subplots as a fraction of figure width or height. Left cannot be larger than right, and bottom cannot be larger than top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5287289e46856660ef1bfa777509f43696a0179" translate="yes" xml:space="preserve">
          <source>Extra data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24951954d5a1dbe0e40950c135bcd980dc5f109e" translate="yes" xml:space="preserve">
          <source>Extra data to pass to the tool when triggering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c6fdb09284b45aae0a5941cf478e12e745f75e" translate="yes" xml:space="preserve">
          <source>Extra keywords are stored and passed through to &lt;code&gt;AbstractPathEffect._update_gc()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0eafd2ba5d736acb58e975ad93dbd064f9e441" translate="yes" xml:space="preserve">
          <source>Extract information from a TrueType font file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc36884cf936701e72cda82e59d4276511fb3fe8" translate="yes" xml:space="preserve">
          <source>Extract information from an AFM font file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ece2dc3382411d7193e29e26723e68eaed4cbc" translate="yes" xml:space="preserve">
          <source>Facecolor of the rectangle (default 'none').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56ff7768b5248d0aa747b9e39eaa013113f8402" translate="yes" xml:space="preserve">
          <source>Factor by which the font is scaled from its natural size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff2a4a06f209f18202b5f691a13bd279163ba13" translate="yes" xml:space="preserve">
          <source>Factors to rescale the triangulation into a unit square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c912b6f858958fb39e461911388c92bfc05071" translate="yes" xml:space="preserve">
          <source>False or 'none': each subplot x- or y-axis will be independent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c45731c4fa889ba2805bc717e9631c33e8fa785" translate="yes" xml:space="preserve">
          <source>False: leave vertices as-is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c206dc2cff9d138afef177e516bd0129a60d949" translate="yes" xml:space="preserve">
          <source>False: the annotation will always be drawn regardless of its</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244195529e306e7bfc3b8168c8bf4fc498402ecc" translate="yes" xml:space="preserve">
          <source>Fancy</source>
          <target state="translated">Fancy</target>
        </trans-unit>
        <trans-unit id="cf50722b9357158f482b6d7c8ca5266cf325333c" translate="yes" xml:space="preserve">
          <source>Fancyarrow Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b66449c91ffa10bbf2af0159b984ea7ddee39de" translate="yes" xml:space="preserve">
          <source>Fancybox Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309dc6b2f1b321b0582a591b75023a525fd0a751" translate="yes" xml:space="preserve">
          <source>Fancytextbox Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74e963b08e2658916d037e4738a3d79faaef927" translate="yes" xml:space="preserve">
          <source>Features that are implemented</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c326a4660b674d2f6ea82687a1e1abae2337541f" translate="yes" xml:space="preserve">
          <source>Field</source>
          <target state="translated">Field</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="51a9748a5900ce3cf008a6370ec2b7fb2f29af00" translate="yes" xml:space="preserve">
          <source>Fig Axes Customize Simple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b6bd56888d2604a29d94e8c7965b4b77b27755" translate="yes" xml:space="preserve">
          <source>Figimage Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dfef03ae2485100458e50b6d4a8a011368218c" translate="yes" xml:space="preserve">
          <source>Figure Axes Enter Leave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568f035ab2b220dc874d58f65cf6286ccc785440" translate="yes" xml:space="preserve">
          <source>Figure Title</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34d2dd00fdceb109be788f833dc15b2ff2137bb" translate="yes" xml:space="preserve">
          <source>Figure and Axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03727009fa1f60b99b0b289e75d8d473eec3166f" translate="yes" xml:space="preserve">
          <source>Figure dimension &lt;code&gt;(width, height)&lt;/code&gt; in inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969dc67b06e48e2df0792c8d7f11fd65b585224f" translate="yes" xml:space="preserve">
          <source>Figure instance that is affected by this Tool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d786cf31c5c704d348073628b7def7eb5b892986" translate="yes" xml:space="preserve">
          <source>Figure legend demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b751b5def0b0220ea287fa0a5de953727d12f245" translate="yes" xml:space="preserve">
          <source>Figure that holds the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c2939789c1b7731a2042dea8a495d1c87e7e3c" translate="yes" xml:space="preserve">
          <source>Figure to place axis in. Defaults to current figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb91368b4d85ff2ede371185f9fd3a0ba9f08d4" translate="yes" xml:space="preserve">
          <source>Figure to which the axes will be added. Defaults to the current figure &lt;code&gt;pyplot.gcf()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b905430bc73f0d9b09364d9f9feeec38edff5ed" translate="yes" xml:space="preserve">
          <source>Figure to which the subplot will be added. Defaults to the current figure &lt;code&gt;pyplot.gcf()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f77fbf03bc4a79bdd764b642097fb426df9d195" translate="yes" xml:space="preserve">
          <source>File extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b530c09c05ca471ff6057b63bf029b84a9e32872" translate="yes" xml:space="preserve">
          <source>File handle for the output of the drawing commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e733a8ac2a7b310cc5ee8a5fd508c29afad7a503" translate="yes" xml:space="preserve">
          <source>File-based animated gif writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dadcc79042c1fa0f58ec2b60c9eb1b1b2f6cb4" translate="yes" xml:space="preserve">
          <source>File-based avconv writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e801c168fec1a5ba25861b988f142aa5c86c1c" translate="yes" xml:space="preserve">
          <source>File-based ffmpeg writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600ebe4a7bac5dfd6560541f521e6bdddb74e14d" translate="yes" xml:space="preserve">
          <source>Filename of the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea9448041f4cea93bdfd01626bdd630c6c718b6" translate="yes" xml:space="preserve">
          <source>Filename of the image for the button or &lt;a href=&quot;https://docs.python.org/3/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f72e03e2d447809d9de987e5aa47688fb284ba" translate="yes" xml:space="preserve">
          <source>Fill Between</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df7576f16ff41cbd9d55d9c845b3e2ee6f3af20" translate="yes" xml:space="preserve">
          <source>Fill Between and Alpha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af26f831088d89aea98091797ea728ef419dedc" translate="yes" xml:space="preserve">
          <source>Fill Betweenx Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd774f3fd1896ebe88d34770e624e1fb9087519a" translate="yes" xml:space="preserve">
          <source>Fill Spiral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f804017bef3da4ffa8bc4ef74dc31d4e2159bd" translate="yes" xml:space="preserve">
          <source>Fill between two sets of x-values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f64a92fb001f9416861719d8b04945bfc6e1ee3" translate="yes" xml:space="preserve">
          <source>Fill between two sets of y-values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783018b66c2de285bce3c060d4b2244a497ccc2e" translate="yes" xml:space="preserve">
          <source>Fill the area between two horizontal curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8b325fcb8bbe8a8f24b40238b33f5a4aae35e1" translate="yes" xml:space="preserve">
          <source>Fill the area between two vertical curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0d027068e045eee04faec94f7fe0503049a4c2" translate="yes" xml:space="preserve">
          <source>Filled contours</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b984cd8f7789b15a57d3bfbc0b0bad3a5b7058d8" translate="yes" xml:space="preserve">
          <source>Filled polygon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867d9b76cbe3fa650573c144266c0055185af08f" translate="yes" xml:space="preserve">
          <source>Filling the area between lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09cb1ab92d97c8a82c622d1122e6089594c5075" translate="yes" xml:space="preserve">
          <source>Finalize stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c077aabbd2fa6a897562e28b39f590c9cae5444" translate="yes" xml:space="preserve">
          <source>Finalize this object, making the underlying file a complete PDF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddacc784622e5249a53ab8ea45b44d773504c084" translate="yes" xml:space="preserve">
          <source>Finalize this object, running LaTeX in a temporary directory and moving the final pdf file to &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a34f313bd95f60fe0ce68b25162b657e71b1085" translate="yes" xml:space="preserve">
          <source>Finally, create the full diagram:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9138f3c61f2e8dbea2550acc7556b7851c845a" translate="yes" xml:space="preserve">
          <source>Finally, weekday is applied, using the rule described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0074b3c7afd5888dc0dce7f680d471e91b611a68" translate="yes" xml:space="preserve">
          <source>Find a file in the texmf tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2a5c01f1f148a8e207c648eef561328883ae4d" translate="yes" xml:space="preserve">
          <source>Find a font that most closely matches the given font properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2249de9e0887291bdf2e80874eecb2dd7c8454cd" translate="yes" xml:space="preserve">
          <source>Find all masked and/or non-finite points in a set of arguments, and return the arguments with only the unmasked points remaining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08bf02936bf280f29ee3600afe74e7c12682484" translate="yes" xml:space="preserve">
          <source>Find artist objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844fd5853e1c867312a6b8c3cc57f23e7c566cce" translate="yes" xml:space="preserve">
          <source>Find good place to draw a label (relatively flat part of the contour).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70bd20d7c250e34f94756fbede70dd957fd68de" translate="yes" xml:space="preserve">
          <source>Findobj Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58dcf508844bbef2088da438d90c233ccc5be641" translate="yes" xml:space="preserve">
          <source>Finds contour that is closest to a point. Defaults to measuring distance in pixels (screen space - useful for manual contour labeling), but this can be controlled via a keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036ecbdb00bb3683c9a07df7d44686d1f62dafc3" translate="yes" xml:space="preserve">
          <source>Finds up to a max number of intervals with ticks at nice locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe5913704c9ba3f6a1d722321cfe5f53b7b9382" translate="yes" xml:space="preserve">
          <source>Finish any processing for writing the movie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23ee52d137240d87be7ba087b7409ef21c37baa" translate="yes" xml:space="preserve">
          <source>Finite-length iterable of the property values. These values are validated and will raise a ValueError if invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67b1d68508e3b2aef3ba94945398e41db8f2711" translate="yes" xml:space="preserve">
          <source>Fire an event when property changed, calling all of the registered callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="a3729e7e53ea3693d919915facbeabbbc47f1e1b" translate="yes" xml:space="preserve">
          <source>First, the day is set to 1 (the first of the month), then 25 hours are added, to get to the 2nd day and 14th hour, finally the weekday is applied, but since the 2nd is already a Monday there is no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410d4bbaa9cd10e0a85b2a51691574a20b987ef0" translate="yes" xml:space="preserve">
          <source>FiveThirtyEight style sheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378ba2c4dcaa902baf3db7fb2e9140f871b8b6fa" translate="yes" xml:space="preserve">
          <source>Fix any cyclical references before the object is about to be destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692b96e39497338594ce87ec201fdd323547eb62" translate="yes" xml:space="preserve">
          <source>Fixing common date annoyances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d295e79b2f6cd823a7df8a2d7a79c36cba93298" translate="yes" xml:space="preserve">
          <source>Flows are placed along the top of the diagram from the inside out in order of their index within &lt;em&gt;flows&lt;/em&gt;. They are placed along the sides of the diagram from the top down and along the bottom from the outside in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f250921f78697e0d7dc0ec841d4847a7564b72f9" translate="yes" xml:space="preserve">
          <source>Flush all buffers and free all resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efab2fb1b7193392a9ebd161a9ad2ecd8ce2a679" translate="yes" xml:space="preserve">
          <source>Flush the GUI events for the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68474a594e5e531becc22a75e1cb48699c2193d3" translate="yes" xml:space="preserve">
          <source>Flushes the output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ee4388be4898067cf4b11831d75694d7c9eb6a" translate="yes" xml:space="preserve">
          <source>Following boxstyle classes are defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa1f4d4e95dc33eeeb95771abaf2d30534fcd0a" translate="yes" xml:space="preserve">
          <source>Font properties for the label text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff036ca8a19b675ab8006ae71f063ca340ea2e9" translate="yes" xml:space="preserve">
          <source>Font property used as a reference for paddings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b286e2a457d9ab1875cde94c0f34a93d29c4f67" translate="yes" xml:space="preserve">
          <source>Font property. If not provided, will use a default &lt;code&gt;FontProperties&lt;/code&gt; with parameters from the &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ee8ddc11b3dba86d84f00b65ee8fd9ee040fbe" translate="yes" xml:space="preserve">
          <source>Font size in points. Defaults to the size specified via the font properties &lt;em&gt;prop&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ee392941d4c8f7da5eee12b9bb0779ee907ba3" translate="yes" xml:space="preserve">
          <source>Font table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37735221aa49444e189901664419e9d5be293364" translate="yes" xml:space="preserve">
          <source>Fonts demo (kwargs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37653a9fbe5f215b26646cbafe5ff71f4c4c8e9" translate="yes" xml:space="preserve">
          <source>Fonts demo (object-oriented style)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="5b761aaa74430d219adc6931ea1fb3c1cedf04bb" translate="yes" xml:space="preserve">
          <source>For 'default', the points are connected with straight lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2714cfd9e04d234861945d54fdf2b1e21031797" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix&quot;&gt;&lt;code&gt;scipy.sparse.spmatrix&lt;/code&gt;&lt;/a&gt; instances, you can also pass 'present'. In this case any value present in the array will be plotted, even if it is identically zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687be9252977dbccc18236da4e9a934df8a2f26c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;origin == 'lower'&lt;/code&gt; the default is &lt;code&gt;(-0.5, numcols-0.5, -0.5, numrows-0.5)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d77410984ab151b6eb8e064c9b75d097d26539c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;origin == 'upper'&lt;/code&gt; the default is &lt;code&gt;(-0.5, numcols-0.5, numrows-0.5, -0.5)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e0a6057e0be4d72cc1c68db7a774f943b616c9" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;linelengths&lt;/em&gt;, &lt;em&gt;linewidths&lt;/em&gt;, &lt;em&gt;colors&lt;/em&gt;, and &lt;em&gt;linestyles&lt;/em&gt;, if only a single value is given, that value is applied to all lines. If an array-like is given, it must have the same length as &lt;em&gt;positions&lt;/em&gt;, and each value will be applied to the corresponding row of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5e6c7fff71a55d7d6d7a58aeeec053e7b5920a" translate="yes" xml:space="preserve">
          <source>For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception to be caught by &lt;a href=&quot;_as_gen/matplotlib.figure.figure#matplotlib.figure.Figure.show&quot;&gt;&lt;code&gt;show()&lt;/code&gt;&lt;/a&gt;, for an optional warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6aaa7565416a678addc2f708526adab50d355c" translate="yes" xml:space="preserve">
          <source>For a Triangulation to be valid it must not have duplicate points, triangles formed from colinear points, or overlapping triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8492302b3de7cadbd823f2667158ac57f4c5d7d3" translate="yes" xml:space="preserve">
          <source>For a more in-depth look at colormaps, see the &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/colors/colormaps.html&quot;&gt;Choosing Colormaps in Matplotlib&lt;/a&gt; tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df54432ff97e181e77a5649f1383017b58a916e7" translate="yes" xml:space="preserve">
          <source>For a simple table, you'll have a full grid of cells with indices from (0, 0) to (num_rows-1, num_cols-1), in which the cell (0, 0) is positioned at the top left. However, you can also add cells with negative indices. You don't have to add a cell to every grid position, so you can create tables that have holes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454dec6e5d56dcfd98ee28489fd47bf7163818ea" translate="yes" xml:space="preserve">
          <source>For a tutorial of its usage see &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/text/mathtext.html&quot;&gt;Writing mathematical expressions&lt;/a&gt;. This document is primarily concerned with implementation details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715bdbe0bd04dd45dcd4a4de9b85bfc2d2c63791" translate="yes" xml:space="preserve">
          <source>For a visual representation of the Matplotlib colormaps, see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bac8df50e96ab27564bd7da9be035bed51b0fd" translate="yes" xml:space="preserve">
          <source>For adding callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5a89513bcfcb7e003b5116a1b924a3ef95ed33" translate="yes" xml:space="preserve">
          <source>For an instance of axes that does not support subplotspec, None is inserted in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cca97549432208d9a409ed2f3ae19b319bf007" translate="yes" xml:space="preserve">
          <source>For artists in an axes, if the zaxis has units support, convert &lt;em&gt;z&lt;/em&gt; using zaxis unit type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f0b4e9e22964c94f02edcb1fb7f4cd800b6599" translate="yes" xml:space="preserve">
          <source>For back-compatibility reasons, scales take an &lt;a href=&quot;axis_api#matplotlib.axis.Axis&quot;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt; object as first argument. However, this argument should not be used: a single scale object should be usable by multiple &lt;a href=&quot;axis_api#matplotlib.axis.Axis&quot;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt;es at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d79f8905f25d320879633ae19724ef21ae7b8e" translate="yes" xml:space="preserve">
          <source>For back-compatibility, &lt;code&gt;'center right'&lt;/code&gt; (but no other location) can also be spelled &lt;code&gt;'right'&lt;/code&gt;, and each &quot;string&quot; locations can also be given as a numeric value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4222ba811bb0051032d48ab39abeb5f3e753b215" translate="yes" xml:space="preserve">
          <source>For backward compatibility, the form &lt;code&gt;(verts, 0)&lt;/code&gt; is also accepted, but it is deprecated and equivalent to just &lt;code&gt;verts&lt;/code&gt; for giving a raw set of vertices that define the shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda62740116e14c2448badd77e285ca294e10d62" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, the parameters &lt;em&gt;hsv_min_val&lt;/em&gt;, &lt;em&gt;hsv_max_val&lt;/em&gt;, &lt;em&gt;hsv_min_sat&lt;/em&gt;, and &lt;em&gt;hsv_max_sat&lt;/em&gt; may be supplied at initialization as well. However, these parameters will only be used if &quot;blend_mode='hsv'&quot; is passed into &lt;a href=&quot;#matplotlib.colors.LightSource.shade&quot;&gt;&lt;code&gt;shade()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#matplotlib.colors.LightSource.shade_rgb&quot;&gt;&lt;code&gt;shade_rgb()&lt;/code&gt;&lt;/a&gt;. See the documentation for &lt;a href=&quot;#matplotlib.colors.LightSource.blend_hsv&quot;&gt;&lt;code&gt;blend_hsv()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef44c63fbe01a1103d88e49ace496fa65393c14" translate="yes" xml:space="preserve">
          <source>For base class, this just appends an event to events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabd6d77cf29b57c81493bc74846f30f5ba186b6" translate="yes" xml:space="preserve">
          <source>For baseclass, do nothing but collect events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88543dfcd0e9575bca01ada4e4f6f659912d771f" translate="yes" xml:space="preserve">
          <source>For best results, the &quot;Humor Sans&quot; font should be installed: it is not included with matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643e27f47a65db1fa85d4b6daaf0660f304701c4" translate="yes" xml:space="preserve">
          <source>For documentation of keyword arguments, see &lt;a href=&quot;matplotlib.axes.axes.tick_params#matplotlib.axes.Axes.tick_params&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.tick_params()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d1e5ea825f18ab77f7d3bd6c82e63299fd94a0" translate="yes" xml:space="preserve">
          <source>For each key in keys that is removed from kwargs but not used as the output value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae142ab444dc4c6a36598a1b383f6174cc3ac9e" translate="yes" xml:space="preserve">
          <source>For each point in &lt;em&gt;pts&lt;/em&gt; and angle in &lt;em&gt;angles&lt;/em&gt;, the transformed angle is computed by transforming a segment of length &lt;em&gt;pushoff&lt;/em&gt; starting at that point and making that angle relative to the horizontal axis, and measuring the angle between the horizontal axis and the transformed segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32fee6ba833cfedc5dd136c251d00f3fbcad571" translate="yes" xml:space="preserve">
          <source>For each tick, includes &lt;code&gt;tick.label1&lt;/code&gt; if it is visible, then &lt;code&gt;tick.label2&lt;/code&gt; if it is visible, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd2b8013e8f6a1d6331bcab0f664733b7d97215" translate="yes" xml:space="preserve">
          <source>For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner. If not specified, the Delaunay triangulation is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0124e49dd4b74f45fb2e5abca62de98df1524700" translate="yes" xml:space="preserve">
          <source>For each triangle, the indices of the three triangles that share the same edges, or -1 if there is no such neighboring triangle. neighbors[i,j] is the triangle that is the neighbor to the edge from point index triangles[i,j] to point index triangles[i,(j+1)%3].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2a5aca8666a4e4db36429b03cf3654d31bf7a3" translate="yes" xml:space="preserve">
          <source>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed1d69b0deb1086c90a835f15926a81c72fe248" translate="yes" xml:space="preserve">
          <source>For every tool added a new event is created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d14f99b1af41409affda56a90b515eeb6ab2260" translate="yes" xml:space="preserve">
          <source>For example if we want to have a second scale for the data plotted on the xaxis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7a7fa25f7a206922b7d46f41da871ae85f6495" translate="yes" xml:space="preserve">
          <source>For example if we want to have a second scale for the data plotted on the yaxis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4ca1e03c5d941f23624d5c7f29b176f9d3adf2" translate="yes" xml:space="preserve">
          <source>For example, (5, 2, 1, 2) describes a sequence of 5 point and 1 point dashes separated by 2 point spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49538d16135edd83f9ea6ee78a456d77b06afab2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;formatter.set_powerlimits((-3, 4))&lt;/code&gt; sets the pre-2007 default in which scientific notation is used for numbers less than 1e-3 or greater than 1e4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a89ae1b0071fe685bbd5cc828134f588f1dd316" translate="yes" xml:space="preserve">
          <source>For example, each of the following is legal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8843f87a021a7d7dbf21e44859eef9968260fdc" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;em&gt;bottom&lt;/em&gt; axis (the left and right is relative to the direction of the increasing coordinate),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9a4ae0ccfa542030553d8e731ff97a9d364224" translate="yes" xml:space="preserve">
          <source>For example, here is a graph of the transform tree used to plot data to the graph:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1771fb748533e0787cef59969eb8d08de0cc87b1" translate="yes" xml:space="preserve">
          <source>For example, one may define a patch of a circle which represents a radius of 5 by providing coordinates for a unit circle, and a transform which scales the coordinates (the patch coordinate) by 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addf231cb52258061614f8cb71eda1802035c32f" translate="yes" xml:space="preserve">
          <source>For example, the first entry in &lt;em&gt;coordinates&lt;/em&gt; is the coordinates of the vertex at mesh coordinates (0, 0), then the one at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93ac1384be7b98f164f6c81fd59de15e924427b" translate="yes" xml:space="preserve">
          <source>For example, to support arbitrary iterators, you could implement default like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc722311fe71b17091d6e51517540884682ae990" translate="yes" xml:space="preserve">
          <source>For examples see &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/joinstyle.html&quot;&gt;Join styles and cap styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ca43048659f1c4c8ecdbd987653112e7f49296" translate="yes" xml:space="preserve">
          <source>For examples see &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/marker_fillstyle_reference.html&quot;&gt;Marker filling-styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1bd4bfb73345bade0a7e29fa698f8b5726eb35" translate="yes" xml:space="preserve">
          <source>For finer grained control over tables, use the &lt;a href=&quot;#matplotlib.table.Table&quot;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt; class and add it to the axes with &lt;a href=&quot;_as_gen/matplotlib.axes.axes.add_table#matplotlib.axes.Axes.add_table&quot;&gt;&lt;code&gt;Axes.add_table&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4244d5967f06c10be6852fc03d09a58ac979c01d" translate="yes" xml:space="preserve">
          <source>For finer grained control over tables, use the &lt;a href=&quot;../table_api#matplotlib.table.Table&quot;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt; class and add it to the axes with &lt;a href=&quot;matplotlib.axes.axes.add_table#matplotlib.axes.Axes.add_table&quot;&gt;&lt;code&gt;Axes.add_table&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c175fa55023e58be43e9c214747917cec842a5" translate="yes" xml:space="preserve">
          <source>For full control of which artists have a legend entry, it is possible to pass an iterable of legend artists followed by an iterable of legend labels respectively:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea7bb914b60dbb1683d21ddda8e16603c8b79ff" translate="yes" xml:space="preserve">
          <source>For historical reasons, TeX knows many Type-1 fonts by different names than the outside world. (For one thing, the names have to fit in eight characters.) Also, TeX's native fonts are not Type-1 but Metafont, which is nontrivial to convert to PostScript except as a bitmap. While high-quality conversions to Type-1 format exist and are shipped with modern TeX distributions, we need to know which Type-1 fonts are the counterparts of which native fonts. For these reasons a mapping is needed from internal font names to font file names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d6f0aa59a20bc8be54f4210d014892071350d1" translate="yes" xml:space="preserve">
          <source>For information about making a mapping array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b51454f3191aa5ce39aa95dadb898c5a4b8235" translate="yes" xml:space="preserve">
          <source>For information about the methods used to compute \(P_{xy}\), \(P_{xx}\) and \(P_{yy}\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a26bc84b68e5fdf9ed55f7fdfda0fbf08842e9d" translate="yes" xml:space="preserve">
          <source>For line segment defined by (&lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt;) and (&lt;em&gt;x2&lt;/em&gt;, &lt;em&gt;y2&lt;/em&gt;) return the points on the line that is perpendicular to the line and intersects (&lt;em&gt;x2&lt;/em&gt;, &lt;em&gt;y2&lt;/em&gt;) and the distance from (&lt;em&gt;x2&lt;/em&gt;, &lt;em&gt;y2&lt;/em&gt;) of the returned points is &lt;em&gt;k&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71555320fed85f0ee7b4a87b93313517118897c" translate="yes" xml:space="preserve">
          <source>For more details see the &lt;a href=&quot;https://www.w3.org/TR/2003/REC-PNG-20031110/#11keywords&quot;&gt;PNG specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b765b2820c93fb6a0a19ead892452abb5ea1ab" translate="yes" xml:space="preserve">
          <source>For more details see the &lt;em&gt;c&lt;/em&gt; argument of &lt;a href=&quot;matplotlib.axes.axes.scatter#matplotlib.axes.Axes.scatter&quot;&gt;&lt;code&gt;scatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf2f78c1ade472025af7d08ff410ce9ad23b841" translate="yes" xml:space="preserve">
          <source>For more precise control, you can manually specify the positions of the axes objects in which the mappable and the colorbar are drawn. In this case, do not use any of the axes properties kwargs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1fe2dc294423643e03287550f2d82e8b2b2588" translate="yes" xml:space="preserve">
          <source>For most cases, &lt;a href=&quot;#matplotlib.path.Path.circle&quot;&gt;&lt;code&gt;Path.circle()&lt;/code&gt;&lt;/a&gt; will be what you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8dfe925c600b890c5f0e7b617a3d8d340054aa" translate="yes" xml:space="preserve">
          <source>For multiple figure images, the figure will make composite images depending on the renderer option_image_nocomposite function. If &lt;em&gt;suppressComposite&lt;/em&gt; is a boolean, this will override the renderer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecfcf05b1a0de541f824d50333a7086172db275" translate="yes" xml:space="preserve">
          <source>For non-filled markers, the &lt;em&gt;edgecolors&lt;/em&gt; kwarg is ignored and forced to 'face' internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018450454efa8015a47f83a802d3e3d3e16c3526" translate="yes" xml:space="preserve">
          <source>For plotting, the power is plotted as \(10\log_{10}(P_{xx})\) for decibels, though &lt;em&gt;Pxx&lt;/em&gt; itself is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b7ac537a5e91b8e5c63261f5ed3a600181ff59" translate="yes" xml:space="preserve">
          <source>For plotting, the power is plotted as \(10\log_{10}(P_{xy})\) for decibels, though &lt;code&gt;P_{xy}&lt;/code&gt; itself is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d295ca6a371cbfb3e37ef443d431a01e15a3ff" translate="yes" xml:space="preserve">
          <source>For polar axes, this is slightly misleading. Both panning and zooming are performed by the same button. Panning is performed in azimuth while zooming is done along the radial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e37d9adb4d3e5ae1a78d4f40076d89c529ac011" translate="yes" xml:space="preserve">
          <source>For setting the edge or face color individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152b03ce70c7b314b8a4d2392b4f3796eaba21ef" translate="yes" xml:space="preserve">
          <source>For the button to remain responsive you must keep a reference to it. Call &lt;a href=&quot;#matplotlib.widgets.Button.on_clicked&quot;&gt;&lt;code&gt;on_clicked()&lt;/code&gt;&lt;/a&gt; to connect to the button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c09c6d192c325ac94a55d4a2fd3d1c1fdaf34f" translate="yes" xml:space="preserve">
          <source>For the buttons to remain responsive you must keep a reference to this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e31443973e8957d9e3acdec8632daaa00ef2ea" translate="yes" xml:space="preserve">
          <source>For the case where the given transform represents the whole of this transform, returns True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d21b7bbdc470a806cea438a8dd86acf3733b189" translate="yes" xml:space="preserve">
          <source>For the check buttons to remain responsive you must keep a reference to this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68602c400ac79bcaf3b9d35b9ac075dc4b34548" translate="yes" xml:space="preserve">
          <source>For the cursor to remain responsive you must keep a reference to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389d51064118f2b6565e7b72d61aaa033d48c9f4" translate="yes" xml:space="preserve">
          <source>For the image style, you can pass the following additional parameters of &lt;a href=&quot;matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f610d789ca2431b743ff6900c432f3c20c0d90" translate="yes" xml:space="preserve">
          <source>For the location events (button and key press/release), if the mouse is over the axes, the variable &lt;code&gt;event.inaxes&lt;/code&gt; will be set to the &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; the event occurs is over, and additionally, the variables &lt;code&gt;event.xdata&lt;/code&gt; and &lt;code&gt;event.ydata&lt;/code&gt; will be defined. This is the mouse location in data coords. See &lt;a href=&quot;../backend_bases_api#matplotlib.backend_bases.KeyEvent&quot;&gt;&lt;code&gt;KeyEvent&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../backend_bases_api#matplotlib.backend_bases.MouseEvent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342698d8a86d5b5e881990d58025dd4020b6b828" translate="yes" xml:space="preserve">
          <source>For the location events (button and key press/release), if the mouse is over the axes, the variable &lt;code&gt;event.inaxes&lt;/code&gt; will be set to the &lt;a href=&quot;axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; the event occurs is over, and additionally, the variables &lt;code&gt;event.xdata&lt;/code&gt; and &lt;code&gt;event.ydata&lt;/code&gt; will be defined. This is the mouse location in data coords. See &lt;a href=&quot;#matplotlib.backend_bases.KeyEvent&quot;&gt;&lt;code&gt;KeyEvent&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.backend_bases.MouseEvent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0e1b210b95a9e527bd64d519b87ab498d58485" translate="yes" xml:space="preserve">
          <source>For the marker style, you can pass any &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; property except for &lt;em&gt;linestyle&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0bd9a44512e784a54eb0698cd4159f46d1500d" translate="yes" xml:space="preserve">
          <source>For the selector to remain responsive you must keep a reference to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d18bd38023614309c6e373d2bec8d8aee54e3b" translate="yes" xml:space="preserve">
          <source>For the simple case of a y-continuous mapping, y0 and y1 are identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7695265e8897e846a2b72e1d693d179ad4962ae" translate="yes" xml:space="preserve">
          <source>For the special case of a Composite transform, the maximum depth of the two is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f41045f94550217db3856c423c2fccd2d7086d2" translate="yes" xml:space="preserve">
          <source>For the text box to remain responsive you must keep a reference to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ac85e802969854139b6373b3fbcefa7290a356" translate="yes" xml:space="preserve">
          <source>For those who are 'picking' artists while using twinx, pick events are only called for the artists in the top-most axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ef875475357edeef822cd42f63001c3faeea24" translate="yes" xml:space="preserve">
          <source>For those who are 'picking' artists while using twiny, pick events are only called for the artists in the top-most axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d45d6e657a9d62f99a27d8886161efaaf2e3da" translate="yes" xml:space="preserve">
          <source>Force rasterized (bitmap) drawing in vector backend output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95267d819e7772730af143cbcd4474a9793506f1" translate="yes" xml:space="preserve">
          <source>Force the update of the ticks and ticklabels. This must be called whenever the tick locator and/or tick formatter changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7f133ce9225d8f7df4e2bb71bbfb86e5dcaeda" translate="yes" xml:space="preserve">
          <source>Force tools to update figure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf1364072eed379d94e39ed2151f7cb358903be" translate="yes" xml:space="preserve">
          <source>Form 1 copies a given &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.Cycler.html#cycler.Cycler&quot;&gt;&lt;code&gt;Cycler&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd164f62d4e42839bb11f5e6dbbaaddaf001cbe" translate="yes" xml:space="preserve">
          <source>Form 1 sets given &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.Cycler.html#cycler.Cycler&quot;&gt;&lt;code&gt;Cycler&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6408398518a4f42fe7f95af5272ba3ff2437fb57" translate="yes" xml:space="preserve">
          <source>Form 2 creates a &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.Cycler.html#cycler.Cycler&quot;&gt;&lt;code&gt;Cycler&lt;/code&gt;&lt;/a&gt; which cycles over one or more properties simultaneously and set it as the property cycle of the axes. If multiple properties are given, their value lists must have the same length. This is just a shortcut for explicitly creating a cycler and passing it to the function, i.e. it's short for &lt;code&gt;set_prop_cycle(cycler(label=values label2=values2, ...))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9942a36afae7b1900605599a4f037fe3a6727f39" translate="yes" xml:space="preserve">
          <source>Form 2 creates a &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.Cycler.html#cycler.Cycler&quot;&gt;&lt;code&gt;Cycler&lt;/code&gt;&lt;/a&gt; which cycles over one or more properties simultaneously. If multiple properties are given, their value lists must have the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104ee412b16dec613b4d0c7e78548498f26e1e0a" translate="yes" xml:space="preserve">
          <source>Form 3 creates a &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.Cycler.html#cycler.Cycler&quot;&gt;&lt;code&gt;Cycler&lt;/code&gt;&lt;/a&gt; for a single property and set it as the property cycle of the axes. This form exists for compatibility with the original &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.cycler.html#cycler.cycler&quot;&gt;&lt;code&gt;cycler.cycler&lt;/code&gt;&lt;/a&gt; interface. Its use is discouraged in favor of the kwarg form, i.e. &lt;code&gt;set_prop_cycle(label=values)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785da19bcba39857b31d9c3bad261be0aaf8b2de" translate="yes" xml:space="preserve">
          <source>Form 3 creates a &lt;a href=&quot;https://matplotlib.org/cycler/generated/cycler.Cycler.html#cycler.Cycler&quot;&gt;&lt;code&gt;Cycler&lt;/code&gt;&lt;/a&gt; for a single property. This form exists for compatibility with the original cycler. Its use is discouraged in favor of the kwarg form, i.e. &lt;code&gt;cycler(label=values)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7066d358b87fe40018ffd5d4dfe867e219d549c1" translate="yes" xml:space="preserve">
          <source>Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f349c0b7b05f5c22fd600528f8c24e5b99ad8715" translate="yes" xml:space="preserve">
          <source>Format a tick (in seconds since the epoch) with a &lt;a href=&quot;#matplotlib.dates.DateFormatter.strftime&quot;&gt;&lt;code&gt;strftime&lt;/code&gt;&lt;/a&gt; format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e08970fdedac7357701e0c9b1a90013cc486cf0" translate="yes" xml:space="preserve">
          <source>Format labels as a percentage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc85f5a0704655341d14f1341b5fe4d0e405c0cc" translate="yes" xml:space="preserve">
          <source>Format labels in engineering notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228134a9be5f48fb06a5b061076f3f151fc65ad9" translate="yes" xml:space="preserve">
          <source>Format numbers as a percentage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7475e8249d97440684b8c6226f6f65c55942c4" translate="yes" xml:space="preserve">
          <source>Format string used in &lt;a href=&quot;../ticker_api#matplotlib.ticker.FormatStrFormatter&quot;&gt;&lt;code&gt;matplotlib.ticker.FormatStrFormatter&lt;/code&gt;&lt;/a&gt;. For example '%f'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9b47c0c84042e47846d6316124f53ad59a8636" translate="yes" xml:space="preserve">
          <source>Format string used in &lt;a href=&quot;../ticker_api#matplotlib.ticker.FormatStrFormatter&quot;&gt;&lt;code&gt;matplotlib.ticker.FormatStrFormatter&lt;/code&gt;&lt;/a&gt;. For example '%f'. Note that the angle in radians will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c9f8b0c162e804484dd013a9766e019b2dfef0" translate="yes" xml:space="preserve">
          <source>Format string used in &lt;a href=&quot;ticker_api#matplotlib.ticker.FormatStrFormatter&quot;&gt;&lt;code&gt;matplotlib.ticker.FormatStrFormatter&lt;/code&gt;&lt;/a&gt;. For example '%f'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b585c4dd3ca475af267e3941c75d90b1e2dd92" translate="yes" xml:space="preserve">
          <source>Format string used in &lt;a href=&quot;ticker_api#matplotlib.ticker.FormatStrFormatter&quot;&gt;&lt;code&gt;matplotlib.ticker.FormatStrFormatter&lt;/code&gt;&lt;/a&gt;. For example '%f'. Note that the angle that is used is in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cd3be3d824e8e8c5e7c8af473ad5f32b90802f" translate="yes" xml:space="preserve">
          <source>Format strings are just an abbreviation for quickly setting basic line properties. All of these and more can also be controlled by keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed41771b32ea94dfd9db5cd0a04158112bc6c08a" translate="yes" xml:space="preserve">
          <source>Format strings for 6 levels of tick labelling: mostly years, months, days, hours, minutes, and seconds. Strings use the same format codes as &lt;code&gt;strftime&lt;/code&gt;. Default is &lt;code&gt;['%Y', '%b', '%d', '%H:%M', '%H:%M', '%S.%f']&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ce4551007e6f3d7ed10683689166e013aacfae" translate="yes" xml:space="preserve">
          <source>Format strings for the 6 levels that is applied to the &quot;offset&quot; string found on the right side of an x-axis, or top of a y-axis. Combined with the tick labels this should completely specify the date. The default is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff20ee8d1f1ad262e49cc2388a1d59d16e462a0" translate="yes" xml:space="preserve">
          <source>Format strings for tick labels that are &quot;zeros&quot; for a given tick level. For instance, if most ticks are months, ticks around 1 Jan 2005 will be labeled &quot;Dec&quot;, &quot;2005&quot;, &quot;Feb&quot;. The default is &lt;code&gt;['', '%Y', '%b', '%b-%d', '%H:%M', '%H:%M']&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7920071186b6f45e8ba4ce913a8910fb21d9626" translate="yes" xml:space="preserve">
          <source>Format the position x to the nearest i-th label where &lt;code&gt;i = int(x + 0.5)&lt;/code&gt;. Positions where &lt;code&gt;i &amp;lt; 0&lt;/code&gt; or &lt;code&gt;i &amp;gt; len(list)&lt;/code&gt; have no tick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdcc0c60826af824b7b778906fefedba61e3073" translate="yes" xml:space="preserve">
          <source>Format tick values as a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b52c7fc29f306996644de51cd5685bbfc9f943" translate="yes" xml:space="preserve">
          <source>Format values following scientific notation in a logarithmic axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2424eac675bdd270905728e3bda76ab54b5700" translate="yes" xml:space="preserve">
          <source>Format values for log axis using &lt;code&gt;exponent = log_base(value)&lt;/code&gt; using Math text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5066216bfbca7c583d5c2f04f1bf0ea592fc8f01" translate="yes" xml:space="preserve">
          <source>Format values for log axis using &lt;code&gt;exponent = log_base(value)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26d33bab32f049c633375a064e4c4f6a5acd005" translate="yes" xml:space="preserve">
          <source>Format values for log axis using scientific notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460a1772d55cd0b251c6d135f82dc20db70327d6" translate="yes" xml:space="preserve">
          <source>Formats a number in engineering notation, appending a letter representing the power of 1000 of the original number. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91def2b45ba545a497c6194a4a935d7a76de883e" translate="yes" xml:space="preserve">
          <source>Formats axis values using engineering prefixes to represent powers of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd1114fb153178fb1520d2d4d21b0b211670b41" translate="yes" xml:space="preserve">
          <source>Formats the number as a percentage number with the correct number of decimals and adds the percent symbol, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98eb439373665ae6cf9facbe97171e503a218820" translate="yes" xml:space="preserve">
          <source>Formatter for log axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0fd969cc074cc7fb33dea4e325134db8c39781" translate="yes" xml:space="preserve">
          <source>Formatters and Locators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a51ce60985813af4a9e657838df2bcdf369a72" translate="yes" xml:space="preserve">
          <source>Formatting date ticks using ConciseDateFormatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d5b567cf89dbe928f78f809da602219297cf61" translate="yes" xml:space="preserve">
          <source>Forward one step in the stack of views and positions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6a090602d1f6fa6b757ef1d56457f58d539912" translate="yes" xml:space="preserve">
          <source>Fourier Demo WX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173479292e06042345eaf0aacbd82d04c445874f" translate="yes" xml:space="preserve">
          <source>Fraction of axes from lower left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9ae008cee4e0cc8ea980ab8caacfc57ff49b68" translate="yes" xml:space="preserve">
          <source>Fraction of figure from lower left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e439b81d8df08aced6301c6eb4e444f6e809fe" translate="yes" xml:space="preserve">
          <source>Fraction of the arrow behind the arrow crossing. Defaults to 0.15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e48c32cd034f7708ba27612f9ebb0cf877becb" translate="yes" xml:space="preserve">
          <source>Fraction of the arrow width at the middle point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be535a86fd96e836d1b1d08aad4202f333de44bb" translate="yes" xml:space="preserve">
          <source>Fraction of the axes height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4419aaa55d3dbefc3b6aee9f06165314dbaacf91" translate="yes" xml:space="preserve">
          <source>Fraction of total length to shrink from both ends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5e26cd6fad7692474a8c27cfa423dbb2b3b12f" translate="yes" xml:space="preserve">
          <source>Fractional amount by which &lt;em&gt;vmin&lt;/em&gt; and &lt;em&gt;vmax&lt;/em&gt; are expanded if the original interval is too small, based on &lt;em&gt;tiny&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417b720e18dce0bbaee7a9ca0e21c7d13673717c" translate="yes" xml:space="preserve">
          <source>Frame grabbing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c32bbe46d18bf7f5981a234b486a1dd00ce37b" translate="yes" xml:space="preserve">
          <source>Framerate for movie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5fa3679081e9b14b656b79935ac56199d81856" translate="yes" xml:space="preserve">
          <source>Frames are streamed directly to ImageMagick via a pipe and written in a single pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acaaca9a50227db5e1acc10221a8a6231b09c58" translate="yes" xml:space="preserve">
          <source>Frames are streamed directly to avconv via a pipe and written in a single pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1783e2be8427a7b27a3765ca3d4db54e04fa92d0" translate="yes" xml:space="preserve">
          <source>Frames are streamed directly to ffmpeg via a pipe and written in a single pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67924b4693a54dc8d176186bfbab2db571ef577e" translate="yes" xml:space="preserve">
          <source>Frames are written to temporary files on disk and then stitched together at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca321e124239d33e512c5e5228a229a3c4c9999e" translate="yes" xml:space="preserve">
          <source>Frames per second in the movie. Defaults to &lt;code&gt;None&lt;/code&gt;, which will use the animation's specified interval to set the frames per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192b2b94143f3675060757b93b95294fa0d9669b" translate="yes" xml:space="preserve">
          <source>Frontpage 3D example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8099759584b53c1ce8548c563b4c1f26ac2595" translate="yes" xml:space="preserve">
          <source>Frontpage contour example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078cd0f3004e64d03e0e577ab0ff3ae52b3779d8" translate="yes" xml:space="preserve">
          <source>Frontpage histogram example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ce1aca161bc1e08f1d3d050d6ccf6d7eb960d9" translate="yes" xml:space="preserve">
          <source>Frontpage plot example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="6b17df8edea3f525a161170fce6c7dda9246b2b5" translate="yes" xml:space="preserve">
          <source>Function not implemented for base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5356f48ec443884d90fed71e87b31bc4b8b66958" translate="yes" xml:space="preserve">
          <source>Function signatures for the &lt;a href=&quot;matplotlib.pyplot#module-matplotlib.pyplot&quot;&gt;&lt;code&gt;pyplot&lt;/code&gt;&lt;/a&gt; interface; all but the first are also method signatures for the &lt;a href=&quot;#matplotlib.figure.Figure.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb5fbe4357ad15a0845a5e7e0e416c9a0ffb794" translate="yes" xml:space="preserve">
          <source>Function signatures for the &lt;a href=&quot;matplotlib.pyplot#module-matplotlib.pyplot&quot;&gt;&lt;code&gt;pyplot&lt;/code&gt;&lt;/a&gt; interface; all but the first are also method signatures for the &lt;a href=&quot;matplotlib.figure.figure#matplotlib.figure.Figure.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351b485d56f5344d9456aa23a815651456bdcb1c" translate="yes" xml:space="preserve">
          <source>Function to be called with signature def func(event)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49fa596eae1d6bdb4972c0af0b81891141c4f58" translate="yes" xml:space="preserve">
          <source>Function to calculate the labels. Often the size (or color) argument to &lt;a href=&quot;_as_gen/matplotlib.axes.axes.scatter#matplotlib.axes.Axes.scatter&quot;&gt;&lt;code&gt;scatter()&lt;/code&gt;&lt;/a&gt; will have been pre-processed by the user using a function &lt;em&gt;s = f(x)&lt;/em&gt; to make the markers visible; e.g. &lt;em&gt;size = np.log10(x)&lt;/em&gt;. Providing the inverse of this function here allows that pre-processing to be inverted, so that the legend labels have the correct values; e.g. &lt;em&gt;func = np.exp(x, 10)&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c03967785e1263969659294eeb8b6aa003dc0d9" translate="yes" xml:space="preserve">
          <source>Function to call when slider is changed. The function must accept a single float as its arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99266aea514e5da1ad0a5e427aa48e47c0df7044" translate="yes" xml:space="preserve">
          <source>Function used to format the numbers in the labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="5b6dc20c8358d3e12f7f6f34400280cd4f607c45" translate="yes" xml:space="preserve">
          <source>Fundamentally, a &lt;a href=&quot;_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter&quot;&gt;&lt;code&gt;MovieWriter&lt;/code&gt;&lt;/a&gt; provides a way to grab sequential frames from the same underlying &lt;a href=&quot;_as_gen/matplotlib.figure.figure#matplotlib.figure.Figure&quot;&gt;&lt;code&gt;Figure&lt;/code&gt;&lt;/a&gt; object. The base class &lt;a href=&quot;_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter&quot;&gt;&lt;code&gt;MovieWriter&lt;/code&gt;&lt;/a&gt; implements 3 methods and a context manager. The only difference between the pipe-based and file-based writers is in the arguments to their respective &lt;code&gt;setup&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1149c9b9517cc84920b23d91c3c82ef20bc7c84" translate="yes" xml:space="preserve">
          <source>Fundamentally, scatter works with 1-D arrays; &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;s&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt; may be input as 2-D arrays, but within scatter they will be flattened. The exception is &lt;em&gt;c&lt;/em&gt;, which will be flattened only if its size matches the size of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096bafb1ad02c5e340fc0cffb7efac1d03c6fdd6" translate="yes" xml:space="preserve">
          <source>Further reading:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88a6e023be4dbd7fa03e9d378cf99d23d4ab85e" translate="yes" xml:space="preserve">
          <source>GTK Spreadsheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac0218ab12fd79707bcc8f257c3c5bb757873bf" translate="yes" xml:space="preserve">
          <source>GUI neutral widgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cd6771835208e803ae8e9bfc4b9cde78f27be3" translate="yes" xml:space="preserve">
          <source>Gamma correction factor for input distribution x of the mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deba171cdc47a2686665ba25c201725f75c0484" translate="yes" xml:space="preserve">
          <source>General Artist Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69953fef9cab006d63fbfdb6564e1af7e40cb24" translate="yes" xml:space="preserve">
          <source>General approach from: McGill, R., Tukey, J.W., and Larsen, W.A. (1978) &quot;Variations of Boxplots&quot;, The American Statistician, 32:12-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed55a8d75863186e3d85b29092d13519842c4fd1" translate="yes" xml:space="preserve">
          <source>Generate HTML representation of the animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f52f5511a9106ed9309b35ec376b13760a0146" translate="yes" xml:space="preserve">
          <source>Generate a 3D barplot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31182856637a782e0bbfcce72790e82e0d9a8272" translate="yes" xml:space="preserve">
          <source>Generate a colormap index based on discrete intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e99765d3928b617640a5fad6e332d87745fba4" translate="yes" xml:space="preserve">
          <source>Generate polygons to fill under 3D line graph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7955464143f862c33df96824f72b6ba62dbaf6a7" translate="yes" xml:space="preserve">
          <source>Geographic Projections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb05462957e5c1fbcfd9496e96907c918057b7f" translate="yes" xml:space="preserve">
          <source>Get 3D world limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220c217e81219d2e38308d0da0df910a1242b62b" translate="yes" xml:space="preserve">
          <source>Get 3D z limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ccf8544bcfcfd9f3692ea8487db8c80fca49a8" translate="yes" xml:space="preserve">
          <source>Get LaTeX preamble from rc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbd66ceb7b92e38e14406e8cbfb4be453fa041c" translate="yes" xml:space="preserve">
          <source>Get a &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/fontconfig/&quot;&gt;fontconfig&lt;/a&gt;&lt;a href=&quot;https://www.freedesktop.org/software/fontconfig/fontconfig-user.html&quot;&gt;pattern&lt;/a&gt; suitable for looking up the font as specified with fontconfig's &lt;code&gt;fc-match&lt;/code&gt; utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7777dd104a083d2c84067ccd7afe7d51a3f901" translate="yes" xml:space="preserve">
          <source>Get a colormap instance, defaulting to rc values if &lt;em&gt;name&lt;/em&gt; is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ed9a62957e5b64b7f6dd70f949a44ad14e5363" translate="yes" xml:space="preserve">
          <source>Get a copy of the axes rectangle as a &lt;a href=&quot;../transformations#matplotlib.transforms.Bbox&quot;&gt;&lt;code&gt;Bbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb90574cd3324a84c301656cb0c56f2fa85f8d2" translate="yes" xml:space="preserve">
          <source>Get a copy of the axes rectangle as a &lt;a href=&quot;transformations#matplotlib.transforms.Bbox&quot;&gt;&lt;code&gt;Bbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c55b90156da610faa7eae5c9179a8f929c6085" translate="yes" xml:space="preserve">
          <source>Get a dict mapping property fullnames to sets of aliases for each alias in the &lt;a href=&quot;#matplotlib.artist.ArtistInspector&quot;&gt;&lt;code&gt;ArtistInspector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac989a71435750a8111c2ab8a4675cc688fa7bf" translate="yes" xml:space="preserve">
          <source>Get a list of acceptable projection names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c3b7688c8e88033d33081f92c0a0a7c3ab9873" translate="yes" xml:space="preserve">
          <source>Get a list of artists contained in the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd1e3f02da4e26cc15761245aa6c35536244f6f" translate="yes" xml:space="preserve">
          <source>Get a list of available MovieWriters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc08110ec2053b6800eb96ce329baf79005c365" translate="yes" xml:space="preserve">
          <source>Get a list of the names of all projections currently registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b3fbbb743eafd9563fa9fd47694afc8b3e1493" translate="yes" xml:space="preserve">
          <source>Get a projection class from its &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4138d8c4b6a137f924ed6b68c67bb6954a57e4e" translate="yes" xml:space="preserve">
          <source>Get a projection class from its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ed97dbcfec72084dc02c304f097b9951d43487" translate="yes" xml:space="preserve">
          <source>Get a sorted list of all of the plotting commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee0af1eda47ba0a21281e5cef8b43acddce69ec" translate="yes" xml:space="preserve">
          <source>Get all windows in an array in a memory-efficient manner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62aeeed5769aaa97cbec17f7f0ed37602c84039d" translate="yes" xml:space="preserve">
          <source>Get all windows of x with length n as a single array, using strides to avoid data duplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613ba4200c97f4b38147914ff13fbd9bd5d5ce26" translate="yes" xml:space="preserve">
          <source>Get an axes title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a3900cbee33a22c397aeef94b5978bfb6a083f" translate="yes" xml:space="preserve">
          <source>Get one of the three available axes titles. The available titles are positioned above the axes in the center, flush with the left edge, and flush with the right edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12b562511c765fda381a48874d4cbd91dc2c8bb" translate="yes" xml:space="preserve">
          <source>Get or set the current tick locations and labels of the x-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e400ae5189e2cf805482c923fc7ab064bda14d7d" translate="yes" xml:space="preserve">
          <source>Get or set the current tick locations and labels of the y-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ca91332dd0c5f93b6d4d83ae3564c34a52b772" translate="yes" xml:space="preserve">
          <source>Get or set the radial gridlines on the current polar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c789bddf14c9fb5e2cd5b4020fc424324101000" translate="yes" xml:space="preserve">
          <source>Get or set the theta gridlines on the current polar plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e06bc8b3e6f575543d0bb8b29af3cc6e895851" translate="yes" xml:space="preserve">
          <source>Get or set the x limits of the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c660b4fdf39f9aa98e65e2e712999c9625c112" translate="yes" xml:space="preserve">
          <source>Get or set the y-limits of the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5194c1bb076b46a2304534dd3070a1fd33f786" translate="yes" xml:space="preserve">
          <source>Get padding for &lt;code&gt;constrained_layout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214a68df42d82cc4eb5d89db6caff21061c6e363" translate="yes" xml:space="preserve">
          <source>Get the Affine transformation array for the affine part of this transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb787c1e90a0423e5862cdb3fae2cec3779b1c9" translate="yes" xml:space="preserve">
          <source>Get the FreeType hinting type to use with this particular backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2129598a055ae9f6aeaa63d2f2ef710ab52ecf4" translate="yes" xml:space="preserve">
          <source>Get the affine part of this transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96a19b080a0932418a82950293570d10b8081b0" translate="yes" xml:space="preserve">
          <source>Get the anchor location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11247b2822af7bf6e933544282fb2239e2c05185" translate="yes" xml:space="preserve">
          <source>Get the array of major tick locations in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f741916daaa8b872bc16b99eeff6019993f7cb0" translate="yes" xml:space="preserve">
          <source>Get the array of minor tick locations in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ca3a3bb49a6a403f36f53e53f64520497c19d3" translate="yes" xml:space="preserve">
          <source>Get the array of tick locations in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71f01e8fc89177aa0144424e8c6a9550d872c3f" translate="yes" xml:space="preserve">
          <source>Get the attribute strings with setters for object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afdfd2c797fef7cd620dd4f9fbe27304e4cdff8" translate="yes" xml:space="preserve">
          <source>Get the attribute strings with setters for object. e.g., for a line, return &lt;code&gt;['markerfacecolor', 'linewidth', ....]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0143e077026dc7ac92c3729ee32fd434053c84" translate="yes" xml:space="preserve">
          <source>Get the axes bounding box in display space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de22b8779b60e182ae24ee3ebdb309df2d12e43" translate="yes" xml:space="preserve">
          <source>Get the bounding box (ink) height of character &lt;em&gt;c&lt;/em&gt; (space is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4695194bc550e18c8c27b0eeec184f6e68d2a8" translate="yes" xml:space="preserve">
          <source>Get the bounds of the spine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fff6096c80a885502d4eb78639659433ef8cbd" translate="yes" xml:space="preserve">
          <source>Get the converter interface instance for &lt;em&gt;x&lt;/em&gt;, or None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e61e1a81b330eef131c553214f7296568727d78" translate="yes" xml:space="preserve">
          <source>Get the current &lt;a href=&quot;#matplotlib.mathtext.Parser.State&quot;&gt;&lt;code&gt;State&lt;/code&gt;&lt;/a&gt; of the parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052764a83c4856d647ac90474eb4dc44ecf04985" translate="yes" xml:space="preserve">
          <source>Get the current &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; instance on the current figure matching the given keyword args, or create one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5643e1dcb26c515d67b68185c5aa12c833d37400" translate="yes" xml:space="preserve">
          <source>Get the current &lt;a href=&quot;axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; instance on the current figure matching the given keyword args, or create one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9f18ebe885406cee16d83ea062e2471ea4ac1c" translate="yes" xml:space="preserve">
          <source>Get the current axes, creating one if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a92cf2ab0c9c2fb5b9f5bb1c4cef67b4acc39b4" translate="yes" xml:space="preserve">
          <source>Get the current colorable artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e080e132d31e9cecde24d0f61449904de4db2b" translate="yes" xml:space="preserve">
          <source>Get the current colorable artist. Specifically, returns the current &lt;a href=&quot;../cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; instance (image or patch collection), or &lt;em&gt;None&lt;/em&gt; if no images or patch collections have been defined. The commands &lt;a href=&quot;matplotlib.pyplot.imshow#matplotlib.pyplot.imshow&quot;&gt;&lt;code&gt;imshow()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;matplotlib.pyplot.figimage#matplotlib.pyplot.figimage&quot;&gt;&lt;code&gt;figimage()&lt;/code&gt;&lt;/a&gt; create &lt;code&gt;Image&lt;/code&gt; instances, and the commands &lt;a href=&quot;matplotlib.pyplot.pcolor#matplotlib.pyplot.pcolor&quot;&gt;&lt;code&gt;pcolor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;matplotlib.pyplot.scatter#matplotlib.pyplot.scatter&quot;&gt;&lt;code&gt;scatter()&lt;/code&gt;&lt;/a&gt; create &lt;a href=&quot;../collections_api#matplotlib.collections.Collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; instances. The current image is an attribute of the current axes, or the nearest earlier axes in the current figure that contains an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d38f6ae6f5aa47ad21cc019ae6692a6cbcc1f01" translate="yes" xml:space="preserve">
          <source>Get the current data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a359b0b4d4298ba02de2c9b582547fa271bd9ba" translate="yes" xml:space="preserve">
          <source>Get the current figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a2fe030330d64d14a65c5da3ba68b477bce0ff" translate="yes" xml:space="preserve">
          <source>Get the current hatch style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388df75fdac08a6150f09b7670b29fa617fb0899" translate="yes" xml:space="preserve">
          <source>Get the current locations and labels:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09a8affcee1c5b4552f64abddab8d5577d19042" translate="yes" xml:space="preserve">
          <source>Get the data needed by the backend to render the math expression. The return value is backend-specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ba3150d6e5a56bade23a65e847a837dfc55e94" translate="yes" xml:space="preserve">
          <source>Get the default savefig file format as specified in rcParam &lt;code&gt;savefig.format&lt;/code&gt;. Returned string excludes period. Overridden in backends that only support a single file type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9118d5e09def83f91e9922a79bca765c970c01eb" translate="yes" xml:space="preserve">
          <source>Get the direction dash. 1 is before the text and 0 is after.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff2d01b3bf11804f2d0bce96cdec8e1b7068278" translate="yes" xml:space="preserve">
          <source>Get the direction in which theta increases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1076727a70335dac82340a163eb1b12dd7c619" translate="yes" xml:space="preserve">
          <source>Get the edge color of the Figure rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2912c7d00d8da6764fe1b8254e7ed8ae2c738f" translate="yes" xml:space="preserve">
          <source>Get the extents of the tick labels on either side of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083fab8c50a9f15b082f06b48cf3b7049334fc65" translate="yes" xml:space="preserve">
          <source>Get the extra spacing between the dash and the specified text position, in canvas units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6cbec9c2b91f7cd03fa54782e17de9ffffdfe02" translate="yes" xml:space="preserve">
          <source>Get the extra spacing between the dash and the text, in canvas units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c896f1dc1622b8ad6350d17ab14befc914238490" translate="yes" xml:space="preserve">
          <source>Get the face color of the Figure rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e00919a0ba8a387bc554509201a643c7c3a73e" translate="yes" xml:space="preserve">
          <source>Get the facecolor of the Axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5770e5ae01baa422fc40f3c8d2b35a063b0d88ff" translate="yes" xml:space="preserve">
          <source>Get the factor by which to magnify images passed to &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. Allows a backend to have images at a different resolution to other artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faeb0e0922b328077042bbed0e5707536fd80d00" translate="yes" xml:space="preserve">
          <source>Get the factor by which to magnify images passed to &lt;a href=&quot;#matplotlib.backends.backend_pdf.RendererPdf.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. Allows a backend to have images at a different resolution to other artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe3c6c21326df9c6278579f30abd89371b653b8" translate="yes" xml:space="preserve">
          <source>Get the factor by which to magnify images passed to &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.draw_image&quot;&gt;&lt;code&gt;draw_image()&lt;/code&gt;&lt;/a&gt;. Allows a backend to have images at a different resolution to other artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6b475bdc7bb1fd72d5bcc3aff3ac9decaccd79" translate="yes" xml:space="preserve">
          <source>Get the factor by which to magnify images passed to draw_image. Allows a backend to have images at a different resolution to other artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0ef54dc81dbd86c82776be2b315bf6f5932e62" translate="yes" xml:space="preserve">
          <source>Get the font stretch as a string or number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e257e4083443e3f1fd86ddec657f80271f1c8fb7" translate="yes" xml:space="preserve">
          <source>Get the font weight as string or number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dc64bb5a4df368714c111081cc3dc2708becd3" translate="yes" xml:space="preserve">
          <source>Get the formatter of the major ticker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b715d29f62e813f7082e03ec41d69efc3349782d" translate="yes" xml:space="preserve">
          <source>Get the formatter of the minor ticker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf4e82eef2a68408995951ba7adbabb94daf76b" translate="yes" xml:space="preserve">
          <source>Get the hatch color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9083fdba1dfafafbe36da159d3ccd3fc9996f05" translate="yes" xml:space="preserve">
          <source>Get the hatch linewidth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f78757890bf707db21e4732907f430b8ad666fc" translate="yes" xml:space="preserve">
          <source>Get the image as a memoryview to the renderer's buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5368de4205ece10f05e010f68289bcda11d30f69" translate="yes" xml:space="preserve">
          <source>Get the image as an ARGB byte string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81152a77dd9cf982f6b9f6018900455cc2c8471" translate="yes" xml:space="preserve">
          <source>Get the image as an RGB byte string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9031a4ba062cf88bfb31a0fe8648249fb91f46" translate="yes" xml:space="preserve">
          <source>Get the image extent: left, right, bottom, top</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7b28b1744063ce5394b400c1e3e00ca1d32d26" translate="yes" xml:space="preserve">
          <source>Get the kerning distance for font between &lt;em&gt;sym1&lt;/em&gt; and &lt;em&gt;sym2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58e8a0d05ad97227771943903938ef342f30327" translate="yes" xml:space="preserve">
          <source>Get the keymap associated with the specified tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209f882c4a25249b8f58c0a44d86ad36984ba620" translate="yes" xml:space="preserve">
          <source>Get the label used for this artist in the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77c3c83f2f82050e238660807113df5fc9920e1" translate="yes" xml:space="preserve">
          <source>Get the legal arguments for the setter associated with &lt;em&gt;attr&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c04290e55f404354614512bd6f82750668d6d3a" translate="yes" xml:space="preserve">
          <source>Get the length of the dash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cd17b1e85ecdfac2d4e094b8eb94cdadeb30b0" translate="yes" xml:space="preserve">
          <source>Get the length of the tick outside of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b8e712dd23aca14d6b3d549170a652a47d89c2" translate="yes" xml:space="preserve">
          <source>Get the line thickness that matches the given font. Used as a base unit for drawing lines such as in a fraction or radical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3409992357ba317eea1d8327b050068885fc9e" translate="yes" xml:space="preserve">
          <source>Get the location of the config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e59aeea23f38c6e7d61085ab2aae34a63fd561c" translate="yes" xml:space="preserve">
          <source>Get the locator of the major ticker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf385680e6ef6d8b2bb71693d709fdb4d269ee18" translate="yes" xml:space="preserve">
          <source>Get the locator of the minor ticker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e2fc15f5ba19ad815ce34b6b98f533d1ee8c1f" translate="yes" xml:space="preserve">
          <source>Get the major x tick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202f7c4824a30cb987ebe40215af43f66f8a9e85" translate="yes" xml:space="preserve">
          <source>Get the major y tick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb5c97fff95c42829c3d6ad59521c866853c543" translate="yes" xml:space="preserve">
          <source>Get the minor tick instances; grow as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5930a4ac451d25804f79527957f74443923354b2" translate="yes" xml:space="preserve">
          <source>Get the minor x tick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916bf60c32c34be0e3c60a3febb86ea1b6d99a8c" translate="yes" xml:space="preserve">
          <source>Get the minor y tick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b858c62a8f8186682b6ab82d499bbe869c197bac" translate="yes" xml:space="preserve">
          <source>Get the name of the character, i.e., ';' is 'semicolon'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38af597b0e091baef5fde9e8315c71560a3ea564" translate="yes" xml:space="preserve">
          <source>Get the navigation toolbar button status: 'PAN', 'ZOOM', or None</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d20535847034c17a7cfd0358c424f2059e4d40" translate="yes" xml:space="preserve">
          <source>Get the offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc8cee58dd7c68e21c56b11f2fb4de23160837e" translate="yes" xml:space="preserve">
          <source>Get the offset for the location of 0 in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be5a98371c27cc33321d2a2a388be8139469d57" translate="yes" xml:space="preserve">
          <source>Get the path of the polygon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a3caa16865a52e503f7f6027ca28f14c74333c" translate="yes" xml:space="preserve">
          <source>Get the points of the bounding box directly as a numpy array of the form: &lt;code&gt;[[x0, y0], [x1, y1]]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d68f5abb5dc2f9c84fcb9d039be9f1eff78b85" translate="yes" xml:space="preserve">
          <source>Get the polygon vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d5bfa7b378e538efd27aa58bb9d1ec73a7590d" translate="yes" xml:space="preserve">
          <source>Get the rotation of the dash in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0745d8a8e2eee1c6d9af5123021c7772b8f026f5" translate="yes" xml:space="preserve">
          <source>Get the set of characters that were used in the math expression. Used by backends that need to subset fonts so they know which glyphs to include.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0adde6f6503384c96d6a83840178c07b6b5d3b" translate="yes" xml:space="preserve">
          <source>Get the text as string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea5267c6175844595cb43817d09e1491d1c991d" translate="yes" xml:space="preserve">
          <source>Get the text of the label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16c0fbd227206faa65eb6f3783a6aef8cc5d493" translate="yes" xml:space="preserve">
          <source>Get the text of the label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cdb3f1ad9c832e2e27a1cf68c4aaf789fd3524" translate="yes" xml:space="preserve">
          <source>Get the text rotation mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdfb283350abcd1195674686a748bf966657ec9" translate="yes" xml:space="preserve">
          <source>Get the text size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f235ee6125477f25ba8449666417bbf6c57b5cc7" translate="yes" xml:space="preserve">
          <source>Get the tick instances; grow as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1962df85f7375353d994ab1c64a25e6f70d71bb" translate="yes" xml:space="preserve">
          <source>Get the tick labels as a list of &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400e1aa75c16867cb5f6515015b1f0d0dc11fc49" translate="yes" xml:space="preserve">
          <source>Get the tick labels as a list of &lt;a href=&quot;text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1056dbe53616ecb92c2eadadcb50c272da27d8" translate="yes" xml:space="preserve">
          <source>Get the title text of the window containing the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62a553684abf3977845a3f2a2a2c70e1aa09cfb" translate="yes" xml:space="preserve">
          <source>Get the title text of the window containing the figure. Return None if there is no window (e.g., a PS backend).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b502b22dbe67a3c29df396309866dd85bd5e3a3" translate="yes" xml:space="preserve">
          <source>Get the transformation used for drawing x-axis labels, ticks and gridlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51fb41576a0a37d0adffbd68bd18e41949971c2" translate="yes" xml:space="preserve">
          <source>Get the transformation used for drawing x-axis labels, ticks and gridlines. The x-direction is in data coordinates and the y-direction is in axis coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0259cca7201bdd47f86c256104900e48a14e83" translate="yes" xml:space="preserve">
          <source>Get the transformation used for drawing y-axis labels, ticks and gridlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f429ab50dd5017221f27378cf1581a8edb359f2" translate="yes" xml:space="preserve">
          <source>Get the transformation used for drawing y-axis labels, ticks and gridlines. The x-direction is in axis coordinates and the y-direction is in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c1cbcb852355b675fb501de3bb8e9dc258e60b" translate="yes" xml:space="preserve">
          <source>Get the underlying transformation matrix as a 3x3 numpy array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b531fa3717baa512788d026d762a0b1e4185fc" translate="yes" xml:space="preserve">
          <source>Get the value of the tick label pad in points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63bb705afe1ed35b1ae5fe2ffab2d52ffafdccc" translate="yes" xml:space="preserve">
          <source>Get the vertices of the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db41073cecfc96dcabe9212564572c18ee11c52" translate="yes" xml:space="preserve">
          <source>Get the width of the character from a type1 character name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218ffc0f5f374e80fb2163771c441395387c07a6" translate="yes" xml:space="preserve">
          <source>Get the width of the character from the character metric WX field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae41f911586133d69a5e28b15eff333784381792" translate="yes" xml:space="preserve">
          <source>Get the width of the lines used to mark each event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001073bf82744812ddd29d734593c89c346bc439" translate="yes" xml:space="preserve">
          <source>Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string &lt;em&gt;s&lt;/em&gt; with &lt;a href=&quot;font_manager_api#matplotlib.font_manager.FontProperties&quot;&gt;&lt;code&gt;FontProperties&lt;/code&gt;&lt;/a&gt;&lt;em&gt;prop&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82cae3167f67d45cdde98d385b91dff3974e75f" translate="yes" xml:space="preserve">
          <source>Get the width, total height and descent for a text typeset by the current LaTeX environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cb4ff72912b69185caf13800bbc6bc9da83e56" translate="yes" xml:space="preserve">
          <source>Get the x grid lines as a list of &lt;code&gt;Line2D&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa92df5918336f1fefc19c6312c4799ee8e42f42" translate="yes" xml:space="preserve">
          <source>Get the x tick labels as a list of &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737311b21e96d5eafdfda941cce23b5011c47b32" translate="yes" xml:space="preserve">
          <source>Get the x tick labels as a list of &lt;a href=&quot;text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3656582288458ec6269fd86a30123d3b91fd1fe4" translate="yes" xml:space="preserve">
          <source>Get the x tick lines as a list of &lt;code&gt;Line2D&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17cf5fd05b90ca64fd452676cade8cb2bc9baf8" translate="yes" xml:space="preserve">
          <source>Get the xheight for the given &lt;em&gt;font&lt;/em&gt; and &lt;em&gt;fontsize&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffce81c0748c92f7e07d32adccbc0220d0113a48" translate="yes" xml:space="preserve">
          <source>Get the xlabel text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30abe15707994e2d86844fe09f8a1436e2f1f1be" translate="yes" xml:space="preserve">
          <source>Get the y grid lines as a list of &lt;code&gt;Line2D&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fcb1fe3cd4ffc0716abf0bd36937e496faae89" translate="yes" xml:space="preserve">
          <source>Get the y tick labels as a list of &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b98d0765c461d838f834a83aa83698b30e076de" translate="yes" xml:space="preserve">
          <source>Get the y tick labels as a list of &lt;a href=&quot;text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2a5fafd1373e78f79a6b31df7fbd7765dcf2bf" translate="yes" xml:space="preserve">
          <source>Get the y tick lines as a list of &lt;code&gt;Line2D&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1ce3ff25e041ae6a60567a963744ba1f03873c" translate="yes" xml:space="preserve">
          <source>Get the ylabel text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c81f23270b11db6d6c40e808caf5561208d74b" translate="yes" xml:space="preserve">
          <source>Get the z-label text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74cbc36432a64fe824b725260128211b8cb68f8" translate="yes" xml:space="preserve">
          <source>Get the ztick labels as a list of Text instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d4edd2de4bc8d07238c939002e1fdac6cdfbd5" translate="yes" xml:space="preserve">
          <source>Get vmin and vmax, and then clip at vcenter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe6393caa4d0ad4957fc9d704afd9fb2a9c5413" translate="yes" xml:space="preserve">
          <source>Get whether autoscaling for the x-axis is applied on plot commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f957c6edf5520068f406034c08f1cc3536fdfa1" translate="yes" xml:space="preserve">
          <source>Get whether autoscaling for the y-axis is applied on plot commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed703a86ffb72b43dada9a89dfd3d4cc06cc44b" translate="yes" xml:space="preserve">
          <source>Get whether autoscaling for the z-axis is applied on plot commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16ca6828707e49641d7031316d98eae08fc224c" translate="yes" xml:space="preserve">
          <source>Get whether autoscaling is applied for all axes on plot commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4e2d9114e31697d4373d6cf0002fc54f5452a3" translate="yes" xml:space="preserve">
          <source>Get whether autoscaling is applied for both axes on plot commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c5969e838d506c5c3247678515bfc7da289928" translate="yes" xml:space="preserve">
          <source>Get whether axis ticks and gridlines are above or below most artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7858126f6f375c204487c8b82c0d992a0334cc71" translate="yes" xml:space="preserve">
          <source>Get whether the 3D axes panels are drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c2a87113260b96343a0354a7c7f0cc788d6bad" translate="yes" xml:space="preserve">
          <source>Get whether the axes rectangle patch is drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57aac171483ad01284b7aff8e4614dc565e95c56" translate="yes" xml:space="preserve">
          <source>Get whether the axes responds to navigation commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7fb8b29d3f3693d169f65c321628d00b2a4afe" translate="yes" xml:space="preserve">
          <source>Get whether the legend box patch is drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a2b79237d6989c5aaf4af9e29165114000b41d" translate="yes" xml:space="preserve">
          <source>Get whether the widget is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8e5f90aa1f359dfd93984e6f0421143da4552a" translate="yes" xml:space="preserve">
          <source>Get ztick labels as a list of Text instances. See &lt;a href=&quot;matplotlib.axes.axes.get_yticklabels#matplotlib.axes.Axes.get_yticklabels&quot;&gt;&lt;code&gt;matplotlib.axes.Axes.get_yticklabels()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6861c263076faa74621a2fd8faf2c4c324b58459" translate="yes" xml:space="preserve">
          <source>Get ztick lines as a list of Line2D instances. Note that this function is provided merely for completeness. These lines are re-calculated as the display changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235409d240694fb57eaf0d36cf6c7f3a46be8921" translate="yes" xml:space="preserve">
          <source>Given a dictionary of key/value pairs, generates a fontconfig pattern string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6846d56122c8bc19f26aff9527a708b9619f10a2" translate="yes" xml:space="preserve">
          <source>Given a dvi font object, return a name suitable for Op.selectfont. This registers the font information in self.dviFontInfo if not yet registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65814fed32eac83a9bae5f87e7719d3f9e49e3d" translate="yes" xml:space="preserve">
          <source>Given a hatch specifier, &lt;em&gt;hatchpattern&lt;/em&gt;, generates a Path that can be used in a repeated hatching pattern. &lt;em&gt;density&lt;/em&gt; is the number of lines per unit square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a1efe3923e1fe14e47ed289fac6c29f3ae84c6" translate="yes" xml:space="preserve">
          <source>Given a math expression, renders it in a closely-clipped bounding box to an image file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1f7d6f218c2bdecbfbe243bba64f029a0d572e" translate="yes" xml:space="preserve">
          <source>Given a sequence of &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;s, &lt;a href=&quot;transformations#matplotlib.transforms.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;s objects, and offsets, as found in a &lt;a href=&quot;collections_api#matplotlib.collections.PathCollection&quot;&gt;&lt;code&gt;PathCollection&lt;/code&gt;&lt;/a&gt;, returns the bounding box that encapsulates all of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e16629b7c59fff155bfc9e4863ca779ffc2077a" translate="yes" xml:space="preserve">
          <source>Given a set of &lt;code&gt;N&lt;/code&gt; points convert to &lt;code&gt;2N + 1&lt;/code&gt; points, which when connected linearly give a step function which changes values at the end of the intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594e2c972df876c6ab3f914c8cfb60ff05fdfbfd" translate="yes" xml:space="preserve">
          <source>Given a set of &lt;code&gt;N&lt;/code&gt; points convert to &lt;code&gt;2N&lt;/code&gt; points which when connected linearly give a step function which changes values at the middle of the intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0a5eb147b4a3726214bc4762ce4fc1a5eb66cb" translate="yes" xml:space="preserve">
          <source>Given a set of &lt;code&gt;N&lt;/code&gt; points, convert to &lt;code&gt;2N - 1&lt;/code&gt; points, which when connected linearly give a step function which changes values at the beginning of the intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dddd0433bcbd1ff3a75b3b361ebb5b47919605" translate="yes" xml:space="preserve">
          <source>Given the 2D view coordinates attempt to guess a 3D coordinate. Looks for the nearest edge to the point and then assumes that the point is at the same z location as the nearest point on the edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e416db02ff9bc6a2b4936a9982bf442d928674ee" translate="yes" xml:space="preserve">
          <source>Given the proposed upper and lower extent, adjust the range if it is too close to being singular (i.e. a range of ~0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d9ab6f26d628513d8520ebe2a0bf030e27c458" translate="yes" xml:space="preserve">
          <source>Gives the multiples of integer powers of the base at which to place ticks. The default places ticks only at integer powers of the base. The permitted string values are &lt;code&gt;'auto'&lt;/code&gt; and &lt;code&gt;'all'&lt;/code&gt;, both of which use an algorithm based on the axis view limits to determine whether and how to put ticks between integer powers of the base. With &lt;code&gt;'auto'&lt;/code&gt;, ticks are placed only between integer powers; with &lt;code&gt;'all'&lt;/code&gt;, the integer powers are included. A value of None is equivalent to &lt;code&gt;'auto'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59baf685855c0e81e3bd5ba36ee96ef8c0ed5f2e" translate="yes" xml:space="preserve">
          <source>Global transformation applied to all paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6519b701c08cfd9efd1ac68bb51722c4d95e6428" translate="yes" xml:space="preserve">
          <source>GnBu</source>
          <target state="translated">GnBu</target>
        </trans-unit>
        <trans-unit id="fd7534a192697018748e2ca7b5baa71ed02c8099" translate="yes" xml:space="preserve">
          <source>Grab the image information from the figure and save as a movie frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e18b2d93e911af4e84df8956a470811d450a3d1" translate="yes" xml:space="preserve">
          <source>Grab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the &lt;code&gt;savefig&lt;/code&gt; command that saves the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33665bdb2ed06624c85393f162249bfcb7f922d" translate="yes" xml:space="preserve">
          <source>Grayscale style sheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8d6165468d94cfd4397632146b38addb6327a4" translate="yes" xml:space="preserve">
          <source>Greens</source>
          <target state="translated">Greens</target>
        </trans-unit>
        <trans-unit id="93cd5559103664269c35e4f5d0142b1a75b405bf" translate="yes" xml:space="preserve">
          <source>Greys</source>
          <target state="translated">Greys</target>
        </trans-unit>
        <trans-unit id="a62589a0d411c3945dd49520e2b4ade72d229f26" translate="yes" xml:space="preserve">
          <source>GridSpec demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a6bbca5661c1b3f89956d8702fb2a76e001764" translate="yes" xml:space="preserve">
          <source>GridSpec whose subplot layout parameters are inherited from the location specified by a given SubplotSpec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6704fa2bad7fd94989b54acd63c68c0ef6519cf" translate="yes" xml:space="preserve">
          <source>Group barchart with units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee458870ce270de61381307cac104410a1565157" translate="yes" xml:space="preserve">
          <source>Grouped bar chart with labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e776dc61beca498fae0db89d165774af39d0ab" translate="yes" xml:space="preserve">
          <source>Grows one level larger. There is no limit to how big something can get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21ca9d011dd80a2916ee4bfb91656805f9d34fa" translate="yes" xml:space="preserve">
          <source>Handle registering and disconnecting for a set of signals and callbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa8491aa6f690dbd372b29a184b195843314b72" translate="yes" xml:space="preserve">
          <source>Handle storing and drawing of text in window or data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c35a6486ed541ccccb8ad0e54879e21c019ad3f" translate="yes" xml:space="preserve">
          <source>Handler for &lt;a href=&quot;_as_gen/matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa8db259865efba186f1c99aff9695d40bf138a" translate="yes" xml:space="preserve">
          <source>Handler for &lt;a href=&quot;_as_gen/matplotlib.patches.patch#matplotlib.patches.Patch&quot;&gt;&lt;code&gt;Patch&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900e6e2b5cab88c933e08b32a50f86257efd1cdf" translate="yes" xml:space="preserve">
          <source>Handler for &lt;a href=&quot;collections_api#matplotlib.collections.LineCollection&quot;&gt;&lt;code&gt;LineCollection&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446fe5b45cebe9b9b9f4213f1e56e0332148ce7c" translate="yes" xml:space="preserve">
          <source>Handler for &lt;a href=&quot;collections_api#matplotlib.collections.PolyCollection&quot;&gt;&lt;code&gt;PolyCollection&lt;/code&gt;&lt;/a&gt; used in &lt;a href=&quot;_as_gen/matplotlib.axes.axes.fill_between#matplotlib.axes.Axes.fill_between&quot;&gt;&lt;code&gt;fill_between&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;_as_gen/matplotlib.axes.axes.stackplot#matplotlib.axes.Axes.stackplot&quot;&gt;&lt;code&gt;stackplot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afce24dcb16cab132ff8b6c5eed95c3b783370f" translate="yes" xml:space="preserve">
          <source>Handler for &lt;code&gt;CircleCollections&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4e73133485f0b2e66ce6fbae37b4b8923813a7" translate="yes" xml:space="preserve">
          <source>Handler for &lt;code&gt;PathCollections&lt;/code&gt;, which are used by &lt;a href=&quot;_as_gen/matplotlib.axes.axes.scatter#matplotlib.axes.Axes.scatter&quot;&gt;&lt;code&gt;scatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113fe6ca1fed8d1224e806d8b9acdaaced80ccce" translate="yes" xml:space="preserve">
          <source>Handler for &lt;code&gt;RegularPolyCollections&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07608f26aa1ab1cab7a04078547d993ec37352bb" translate="yes" xml:space="preserve">
          <source>Handler for Errorbars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d19789696daa223c283ea176bbe11530c11aeff" translate="yes" xml:space="preserve">
          <source>Handler for Tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c07c15e23c9a30fd585e673a1cd71fa981a2fc9" translate="yes" xml:space="preserve">
          <source>Handler for plots produced by &lt;a href=&quot;_as_gen/matplotlib.axes.axes.stem#matplotlib.axes.Axes.stem&quot;&gt;&lt;code&gt;stem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6669a702cb320f67a2cbf8e56d3adbfb0080af5a" translate="yes" xml:space="preserve">
          <source>Handles FontManager and its fields. File paths that are children of the Matplotlib data path (typically, fonts shipped with Matplotlib) are stored relative to that data path (to remain valid across virtualenvs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a5fad89211248ff6c706b19989907780eb4d10" translate="yes" xml:space="preserve">
          <source>Handles FontManager and its fields. Relative file paths are interpreted as being relative to the Matplotlib data path, and transformed into absolute paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e0da987fe94e9c0b0d9f3bd1527a4d234a8577" translate="yes" xml:space="preserve">
          <source>Hatch Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85094b3da2cdc3cfcb77c658f84149841a3111f" translate="yes" xml:space="preserve">
          <source>Hatch-filled histograms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d616c2d20f6b1da911816e2fee2f05acf0515317" translate="yes" xml:space="preserve">
          <source>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f794a7a5151cbbe6192cfc34d2d8edb4612deab0" translate="yes" xml:space="preserve">
          <source>Head and tail patch respectively. &lt;code&gt;matplotlib.patch.Patch&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf4691a1bfc569105d753f626cbf4737c1714a0" translate="yes" xml:space="preserve">
          <source>Head length as multiple of shaft width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8641e53820d8ed25d83e154b0155e8f7f00352ad" translate="yes" xml:space="preserve">
          <source>Head length at shaft intersection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f13ccd5f88e0f2e45c62b75912c94af8511778" translate="yes" xml:space="preserve">
          <source>Head width as multiple of shaft width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a84f09b5428e3d58bd968be9cfdffcab56fd5e6" translate="yes" xml:space="preserve">
          <source>Height padding between subplots, expressed as a fraction of the subplot width. The total padding ends up being h_pad + hspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ace152bfda6151d523acfe6bd8b9974c308a6f" translate="yes" xml:space="preserve">
          <source>Height padding in inches. Defaults to 3 pts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b7ba1d6e115b88daaadeeaab78f38b42949cf8" translate="yes" xml:space="preserve">
          <source>Height ratios of the rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a1b94a7a6895d855248fbccdd91510cfbd3ac0" translate="yes" xml:space="preserve">
          <source>Helper Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bc303e261e91a904cf5fd3c4f8394cc95a2a3e" translate="yes" xml:space="preserve">
          <source>Helper base class for a draggable artist (legend, offsetbox).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8d4082263802a28778012f9eba9ebe8a1797ab" translate="yes" xml:space="preserve">
          <source>Helper class for a fixed (in the axes coordinate) axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee68a2a01dfa7dfde6e4ce035a2ce60f64d76ee" translate="yes" xml:space="preserve">
          <source>Helper class for a fixed axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5c4410153a5ee7650fd51e33c13d6a6355ea50" translate="yes" xml:space="preserve">
          <source>Helper class for pyplot mode, wraps everything up into a neat bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9037b1c3c6535c07c23cfd26e3c8fc662c0b1b63" translate="yes" xml:space="preserve">
          <source>Helper class to raise parser errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f942fb4acd91fa767b0a829f2524d3249f5df61" translate="yes" xml:space="preserve">
          <source>Helper function to normalize kwarg inputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d7942bb23d3623ca29fa904d6af1ed4cb4b539" translate="yes" xml:space="preserve">
          <source>Helper function to obtain a Path from one bbox to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d291af20a4f32690f1e3d18166c7cc2b23950552" translate="yes" xml:space="preserve">
          <source>Helper function to obtain the location of a corner of a bbox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdc575121f603cdc7fde8e0c3a2f705d419c79f" translate="yes" xml:space="preserve">
          <source>Helper functions for testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb784bc40deee931523c5ba4ba7cade6de483aa" translate="yes" xml:space="preserve">
          <source>Helper functions on dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea1fe3d6d81cb43f1cf813a2e7b045d67bf4230" translate="yes" xml:space="preserve">
          <source>Hence y0 in the first row and y1 in the last row are never used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323ab3451cee3f23c40185993947d3d4f0eee50f" translate="yes" xml:space="preserve">
          <source>Hence, if &lt;em&gt;fname&lt;/em&gt; is not a path or has no extension, remember to specify &lt;em&gt;format&lt;/em&gt; to ensure that the correct backend is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67aeaff16aa2a1eae5f3cae16edb5685be8735c" translate="yes" xml:space="preserve">
          <source>Here all all the date formatters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41be04701829de68a229ad082808f021f8df3d78" translate="yes" xml:space="preserve">
          <source>Here are all the date tickers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de03b89eaec2d4b110c6f3d18549e2073b054f4" translate="yes" xml:space="preserve">
          <source>Here is a list of available &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5427d77dc1f6612f421a5d1523cc82a365e865fb" translate="yes" xml:space="preserve">
          <source>Here is an example which highlights the selected verts with red circles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0831fe23bbff8200e216f3004337dce2d5265f" translate="yes" xml:space="preserve">
          <source>Here is an overview of the possible positions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5087d1ac36a759f14034377e09a8ad868075130" translate="yes" xml:space="preserve">
          <source>Hexbin Demo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7acec701681baf5eaac1f1d19a22a99647a8393" translate="yes" xml:space="preserve">
          <source>Hillshading</source>
          <target state="translated">Hillshading</target>
        </trans-unit>
        <trans-unit id="2284d040f5091f510de37a154536196310f9c02d" translate="yes" xml:space="preserve">
          <source>Hint</source>
          <target state="translated">Hint</target>
        </trans-unit>
        <trans-unit id="eda8bc33393ee6e3c62e14906416f374d60a8e92" translate="yes" xml:space="preserve">
          <source>Hinton diagrams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f573dd516c5fae818d100652937d22c8be8a33c" translate="yes" xml:space="preserve">
          <source>Histograms</source>
          <target state="translated">Histograms</target>
        </trans-unit>
        <trans-unit id="362f3518160ed4cdf7dcf560c5d506f4543dc3bf" translate="yes" xml:space="preserve">
          <source>Historically, mplot3d has suffered from a hard-coding of parameters used to control visuals such as label spacing, tick length, and grid line width. Work is being done to eliminate this issue. For matplotlib v1.1.0, there is a semi-official manner to modify these parameters. See the note in the &lt;a href=&quot;../mplot3d#toolkit-mplot3d-axisapi&quot;&gt;axis3d&lt;/a&gt; section of the mplot3d API documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487a9497ee14e4b3ad4576317dee5a8a0028d46b" translate="yes" xml:space="preserve">
          <source>Historically, the only colorable artists were images; hence the name &lt;code&gt;gci&lt;/code&gt; (get current image).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c13d9cbe6b8b06006f3b83bdd36b8e3be6f898e" translate="yes" xml:space="preserve">
          <source>Homogenize the input &lt;em&gt;value&lt;/em&gt; for easy and efficient normalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ec66187a04150d0757954c1018dca525f600f5" translate="yes" xml:space="preserve">
          <source>Hook method for deconstructing the class fixture after running all tests in the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3376d91b293e2ef0e2b7a2f9d722cde34fcb75c" translate="yes" xml:space="preserve">
          <source>Hook method for setting up class fixture before running tests in the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c02d7c8746a5cd1e778f8b6ae621705493bd792" translate="yes" xml:space="preserve">
          <source>Horizontal bar chart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf2c5961229f98d302a13dcfd32a2c164566b64" translate="yes" xml:space="preserve">
          <source>Horizontal length of the size bar, given in coordinates of &lt;em&gt;transform&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa8beb0dcc0b3f85d369923b60ac30f9224b96d" translate="yes" xml:space="preserve">
          <source>Horizontal line at 0 if &lt;em&gt;usevlines&lt;/em&gt; is True None &lt;em&gt;usevlines&lt;/em&gt; is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e25a34e635a123f8958bbe26e7c4843278597fb" translate="yes" xml:space="preserve">
          <source>Hours</source>
          <target state="translated">Hours</target>
        </trans-unit>
        <trans-unit id="ef3a2ec58945d2ce74eaf11a72fffde66c54c742" translate="yes" xml:space="preserve">
          <source>How is mplot3d different from MayaVi?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b76feb9562ba9ce6a2e07bd227a5020009d57f" translate="yes" xml:space="preserve">
          <source>However this has negative consequences in other circumstances, e.g. with semi-transparent images (alpha &amp;lt; 1) and colorbar extensions; therefore, this workaround is not used by default (see issue #1188).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a261d700fe15da36733548ffc0fd4bd93394ad" translate="yes" xml:space="preserve">
          <source>However this has negative consequences in other circumstances. Particularly with semi transparent images (alpha &amp;lt; 1) and colorbar extensions and is not enabled by default see (issue #1188).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1659ddcc0cb2b9b7c243a8823acdb8e1adaf460" translate="yes" xml:space="preserve">
          <source>However, it is useful in any situation where you wish to show the timing or position of multiple sets of discrete events, such as the arrival times of people to a business on each day of the month or the date of hurricanes each year of the last century.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dfad8f232847d8b36a42069f5233adcde59a13" translate="yes" xml:space="preserve">
          <source>However, there is no automatic scaling of the row height so that the text may exceed the cell boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc8c468571013dfde0c43e49f7c2d286eee0d41" translate="yes" xml:space="preserve">
          <source>However, things like the locations of ticks, and their ticklabels need to be changed from the side of the grid_helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9711a7cfeff071972d36fdd6050e80bc9d749c0b" translate="yes" xml:space="preserve">
          <source>Hyperlinks</source>
          <target state="translated">Hyperlinks</target>
        </trans-unit>
        <trans-unit id="97b132b421449d19989dfaa37f11b4c153460bfd" translate="yes" xml:space="preserve">
          <source>I don't like how the 3D plot is laid out, how do I change that?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a378261a647aed378affb85cf1c5dd46d66fa8f1" translate="yes" xml:space="preserve">
          <source>I'm not sure that I got the &lt;a href=&quot;#matplotlib.text.TextWithDash.get_window_extent&quot;&gt;&lt;code&gt;get_window_extent()&lt;/code&gt;&lt;/a&gt; right, or whether that's sufficient for providing the object bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259e209137cb6406e98104644a7ab436565ca7cd" translate="yes" xml:space="preserve">
          <source>Id of the tool to toggle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bcd8306945f6d72718e0405fcfc07f36830bf5" translate="yes" xml:space="preserve">
          <source>If &quot;loc&quot;, update the &lt;em&gt;loc&lt;/em&gt; parameter of the legend upon finalizing. If &quot;bbox&quot;, update the &lt;em&gt;bbox_to_anchor&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7f7f6d43ffbc3a152108a2b10c7d7ec3892188" translate="yes" xml:space="preserve">
          <source>If 'Software' is not given, an autogenerated value for matplotlib will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772598279bc7754024376d70ff513eaa97e8ae80" translate="yes" xml:space="preserve">
          <source>If 'box', change the physical dimensions of the Axes. If 'datalim', change the &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; data limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e696b2088c0cf2928dd27caff7bb6000e3be90b1" translate="yes" xml:space="preserve">
          <source>If 'face' (the default), draws the edges in the same color as the fill color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cde075190a4dae0e14df73a9d2a77186a5fd9ed" translate="yes" xml:space="preserve">
          <source>If 'horizontal', &lt;a href=&quot;matplotlib.pyplot.barh#matplotlib.pyplot.barh&quot;&gt;&lt;code&gt;barh&lt;/code&gt;&lt;/a&gt; will be used for bar-type histograms and the &lt;em&gt;bottom&lt;/em&gt; kwarg will be the left edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f55bd80e8544af37932b19c5b168ec61181911" translate="yes" xml:space="preserve">
          <source>If 'log', use a logarithmic scale for the color map. Internally, \(log_{10}(i+1)\) is used to determine the hexagon color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20957fe4b000dc5201882c52c2c0d7f22034a20" translate="yes" xml:space="preserve">
          <source>If 'neither', values outside the &lt;em&gt;levels&lt;/em&gt; range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the &lt;em&gt;levels&lt;/em&gt; range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4964997c588b95419200d17cb5b7faefc06a2f5d" translate="yes" xml:space="preserve">
          <source>If 'none', no edge is drawn; this can sometimes lead to unsightly unpainted pixels between the hexagons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809ac965ab1fbae20c5e338fe20510f386092ad9" translate="yes" xml:space="preserve">
          <source>If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of &lt;em&gt;nchunk&lt;/em&gt; by &lt;em&gt;nchunk&lt;/em&gt; quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the &lt;em&gt;antialiased&lt;/em&gt; flag and value of &lt;em&gt;alpha&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dc5eb4d96f9a2ffe3158eaa620d1d80c436836" translate="yes" xml:space="preserve">
          <source>If 0, use the current axes (or create one if it does not exist).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a260fadf312f70008af67978035f0472ddbc0e63" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#matplotlib.sankey.Sankey&quot;&gt;&lt;code&gt;Sankey&lt;/code&gt;&lt;/a&gt; is instantiated with any keyword arguments other than those explicitly listed above (&lt;code&gt;**kwargs&lt;/code&gt;), they will be passed to &lt;a href=&quot;#matplotlib.sankey.Sankey.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, which will create the first subdiagram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e7cb6028226bf130379b8922c7db629eec2de0" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; (default), produces a rectangular box plot. If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will produce a notched box plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebca73ce5088c2e861ec4025051b0b4d0d9b5ec" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; produces boxes with the &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; artist. If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; produces boxes with the &lt;a href=&quot;matplotlib.patches.patch#matplotlib.patches.Patch&quot;&gt;&lt;code&gt;Patch&lt;/code&gt;&lt;/a&gt; artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008f02e36c332342dc084c41b636d9153908697e" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; produces boxes with the Line2D artist. Otherwise, boxes and drawn with Patch artists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46f68b0c1dcdadce72de7a18fa299b669110a16" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; (and &lt;code&gt;showmeans&lt;/code&gt; is &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;), will try to render the mean as a line spanning the full width of the box according to &lt;code&gt;meanprops&lt;/code&gt; (see below). Not recommended if &lt;code&gt;shownotches&lt;/code&gt; is also True. Otherwise, means will be shown as points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3da72fa6582864680b6a249154d01d7f87e766" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; (and &lt;em&gt;showmeans&lt;/em&gt; is &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;), will try to render the mean as a line spanning the full width of the box according to &lt;em&gt;meanprops&lt;/em&gt;. Not recommended if &lt;em&gt;shownotches&lt;/em&gt; is also True. Otherwise, means will be shown as points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae7d3590c5c638c27e847a4203018efcd8b7ae4" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; (default), makes the boxes vertical. If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, everything is drawn horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4022617a373ffab76a44d1e0bce44192281975" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; (default), makes the boxes vertical. If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, makes horizontal boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b422343b5515748f27b6003d116651bb4c401990" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, baseline for multiline text is adjusted so that it is (approximately) center-aligned with singleline text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff4fc457c5e19df0846a437745433a118020052" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, the box has a minimum descent of &quot;p&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2fc282d8a8a6db1b47310e61a11062f150b592" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, then convert from inches to figure relative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e729bb2d01daf6f8976c333c03044b3789d96b" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will produce a notched box plot. Otherwise, a rectangular boxplot is produced. The notches represent the confidence interval (CI) around the median. See the entry for the &lt;code&gt;bootstrap&lt;/code&gt; parameter for information regarding how the locations of the notches are computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e3b44bd6441b97eef0f6a345b47ee850aec37d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle on the rendering of the box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8246285c921727f1ae602ae0a601659f09efc9a5" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle on the rendering of the caps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c8be0a22722a5307c1d26f3fb4fa3747704847" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle on the rendering of the fliers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d67e5470e3a7904900d4fed8f56e0efe79118f7" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle on the rendering of the means</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f084240ba3111c9e72486a1d04952d8bf6955353" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle rendering of the extrema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba78abf28178e96a180d5f892d7128c8348cdcc" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle rendering of the means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868fa57cf546fcb7da22930304c936fec3e32cfe" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, will toggle rendering of the medians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8489563c472c8a4e12331f4ac06683e48851cc80" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.PathLike&quot;&gt;&lt;code&gt;os.PathLike&lt;/code&gt;&lt;/a&gt;, the file is opened using the flags specified by &lt;em&gt;flag&lt;/em&gt; and &lt;em&gt;encoding&lt;/em&gt;. If a file-like object, it is passed through.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2192b8cd5eaab4b89b2e131ad69099f03f7d3f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; sets major ticks, if &lt;code&gt;True&lt;/code&gt; sets minor ticks. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211c7bec681f6a827c1d8ecdca62ddd8254676c8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt; use &lt;em&gt;subplotpars&lt;/em&gt;. If &lt;code&gt;True&lt;/code&gt; adjust subplot parameters using &lt;a href=&quot;#matplotlib.figure.Figure.tight_layout&quot;&gt;&lt;code&gt;tight_layout&lt;/code&gt;&lt;/a&gt; with default padding. When providing a dict containing the keys &lt;code&gt;pad&lt;/code&gt;, &lt;code&gt;w_pad&lt;/code&gt;, &lt;code&gt;h_pad&lt;/code&gt;, and &lt;code&gt;rect&lt;/code&gt;, the default &lt;a href=&quot;#matplotlib.figure.Figure.tight_layout&quot;&gt;&lt;code&gt;tight_layout&lt;/code&gt;&lt;/a&gt; paddings will be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493f9d0fb4da799291ba7711140c3952960fc980" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, markers are plotted at the acorr values using &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;Axes.plot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84aeb32fa782094a5c2018e6af565292c9b37c0c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, markers are plotted at the acorr values using &lt;code&gt;Axes.plot&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e94eb09bdf0477846d51beedfb3d7f2651fbc6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, markers are plotted at the xcorr values using &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;Axes.plot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c33078fb05e60dd2ed4e9a457192bd6e1c16d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, markers are plotted at the xcorr values using &lt;code&gt;Axes.plot&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c573f3928b861f7079050ad053f007f67b4858" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;False&lt;/code&gt;, suppress drawing the figure background patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7138487ac6e1e24d526fec19db5b59142f977587" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;&quot;default&quot;&lt;/code&gt;, the text will be first rotated, then aligned according to their horizontal and vertical alignments. If &lt;code&gt;&quot;anchor&quot;&lt;/code&gt;, then alignment occurs before rotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d6f3aaa393a68fa6a6207f363d267ecfa09ccc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; and we are not running headless (i.e. on Linux with an unset DISPLAY), issue warning when called on a non-GUI backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2e1b932f33b2412bc357820c80e8c1fe8d05c1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; the underlying contour is removed where the label is placed. Default is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afec6a8784edf6940b093e39e50c716750cb70c2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt; use constrained layout to adjust positioning of plot elements. Like &lt;code&gt;tight_layout&lt;/code&gt;, but designed to be more flexible. See &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/intermediate/constrainedlayout_guide.html&quot;&gt;Constrained Layout Guide&lt;/a&gt; for examples. (Note: does not work with &lt;code&gt;subplot()&lt;/code&gt; or &lt;code&gt;subplot2grid()&lt;/code&gt;.) Defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;figure.constrained_layout.use&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166001614c9f7e432fa670f8de50ec03915182e7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, &lt;a href=&quot;#matplotlib.contour.ClabelText&quot;&gt;&lt;code&gt;ClabelText&lt;/code&gt;&lt;/a&gt; class (instead of &lt;a href=&quot;text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;) is used to create labels. &lt;a href=&quot;#matplotlib.contour.ClabelText&quot;&gt;&lt;code&gt;ClabelText&lt;/code&gt;&lt;/a&gt; recalculates rotation angles of texts during the drawing time, therefore this can be used if aspect of the axes changes. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27a9622aad3a5abbf91a57b2fb9c64b402080af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, &lt;a href=&quot;../contour_api#matplotlib.contour.ClabelText&quot;&gt;&lt;code&gt;ClabelText&lt;/code&gt;&lt;/a&gt; class (instead of &lt;a href=&quot;../text_api#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;) is used to create labels. &lt;code&gt;ClabelText&lt;/code&gt; recalculates rotation angles of texts during the drawing time, therefore this can be used if aspect of the axes changes. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def4d8e69f60a13d9bebbd94301773981234f3ab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, apply the settings to all shared Axes. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7310cbbfbe84af158a28be0577941cda678cdec2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, contour labels will be placed manually using mouse clicks. Click the first button near a contour to add a label, click the second button (or potentially both mouse buttons at once) to finish adding labels. The third button can be used to remove the last label added, but only if labels are not inline. Alternatively, the keyboard can be used to select label locations (enter to end label placement, delete or backspace act like the third mouse button, and any other key will select a label location).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79adf998c7ba0017121e49b4a82cb044e1b4d5c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, input vectors are normalised to unit length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66422a73bf802e021ac8bae5b69a951ff906117" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, label rotations will always be plus or minus 90 degrees from level. Default is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99501d93039f99b8957129b2fef09d0d8472fa82" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, multiple data are stacked on top of each other If &lt;code&gt;False&lt;/code&gt; multiple data are arranged side by side if histtype is 'bar' or on top of each other if histtype is 'step'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4dc5a98a39db5e4efb84104463394dd4f22cf5f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, return the original position. Otherwise return the active position. For an explanation of the positions see &lt;a href=&quot;matplotlib.axes.axes.set_position#matplotlib.axes.Axes.set_position&quot;&gt;&lt;code&gt;set_position&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd268710adc16f8cf14acc5c4e5f4a3caf28f6d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, set the x-axis to be log scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14a28430a73cfa4d795ad2e0d27bd7ad83bc1a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, store and plot the stem lines as a &lt;a href=&quot;../collections_api#matplotlib.collections.LineCollection&quot;&gt;&lt;code&gt;LineCollection&lt;/code&gt;&lt;/a&gt; instead of individual lines. This significantly increases performance, and will become the default option in Matplotlib 3.3. If &lt;code&gt;False&lt;/code&gt;, defaults to the old behavior of using a list of &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92f1988f498d2726842d5e3313af4deba34e54c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the first element of the return tuple will be the counts normalized to form a probability density, i.e., the area (or integral) under the histogram will sum to 1. This is achieved by dividing the count by the number of observations times the bin width and not dividing by the total number of observations. If &lt;em&gt;stacked&lt;/em&gt; is also &lt;code&gt;True&lt;/code&gt;, the sum of the histograms is normalized to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe013163550f0a9f9cd753eb1dc41cc82d835e7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, the histogram axis will be set to a log scale. If &lt;em&gt;log&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;em&gt;x&lt;/em&gt; is a 1D array, empty bins will be filtered out and only the non-empty &lt;code&gt;(n, bins, patches)&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90db7f3cfb05b49939f60c55836c3735214491ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints. If &lt;em&gt;normed&lt;/em&gt; or &lt;em&gt;density&lt;/em&gt; is also &lt;code&gt;True&lt;/code&gt; then the histogram is normalized such that the last bin equals 1. If &lt;em&gt;cumulative&lt;/em&gt; evaluates to less than 0 (e.g., -1), the direction of accumulation is reversed. In this case, if &lt;em&gt;normed&lt;/em&gt; and/or &lt;em&gt;density&lt;/em&gt; is also &lt;code&gt;True&lt;/code&gt;, then the histogram is normalized such that the first bin equals 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65998f4ccca2d290614a54b958785e707fb23a6a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, vertical lines are plotted from 0 to the acorr value using &lt;a href=&quot;matplotlib.axes.axes.vlines#matplotlib.axes.Axes.vlines&quot;&gt;&lt;code&gt;Axes.vlines&lt;/code&gt;&lt;/a&gt;. Additionally, a horizontal line is plotted at y=0 using &lt;a href=&quot;matplotlib.axes.axes.axhline#matplotlib.axes.Axes.axhline&quot;&gt;&lt;code&gt;Axes.axhline&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fe4ff0ea8e534e2d87c1d0d0cc151e5c94d2b6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, vertical lines are plotted from 0 to the acorr value using &lt;code&gt;Axes.vlines&lt;/code&gt;. Additionally, a horizontal line is plotted at y=0 using &lt;code&gt;Axes.axhline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8794ab6bf3a004381785495f13965b14535efb59" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, vertical lines are plotted from 0 to the xcorr value using &lt;a href=&quot;matplotlib.axes.axes.vlines#matplotlib.axes.Axes.vlines&quot;&gt;&lt;code&gt;Axes.vlines&lt;/code&gt;&lt;/a&gt;. Additionally, a horizontal line is plotted at y=0 using &lt;a href=&quot;matplotlib.axes.axes.axhline#matplotlib.axes.Axes.axhline&quot;&gt;&lt;code&gt;Axes.axhline&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08893194d96e93d4e470cdd160f8684e857078e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, vertical lines are plotted from 0 to the xcorr value using &lt;code&gt;Axes.vlines&lt;/code&gt;. Additionally, a horizontal line is plotted at y=0 using &lt;code&gt;Axes.axhline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1232c7e065f196ff856dd0938208331d85b372b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;[array, array]&lt;/code&gt;, the bin edges in each dimension (x_edges, y_edges = bins).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322be96c823dcee01cb7df48281099497f0641e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;[int, int]&lt;/code&gt;, the number of bins in each dimension (nx, ny = bins).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d22df8ab1c642c9b95dfbb47454c6ed21507c59" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;alpha=None&lt;/code&gt; (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, &lt;code&gt;alpha&lt;/code&gt; will override them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666f92320e4577493ca5998602276eb4a133ef72" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;artist&lt;/code&gt; is a transform, the offset origin is the transform applied to this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7538c6e76910b3d06bd7603cba1becdd5637d60" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;artist&lt;/code&gt; is an &lt;code&gt;Artist&lt;/code&gt; or &lt;code&gt;BboxBase&lt;/code&gt;, this values is the location to of the offset origin in fractions of the &lt;code&gt;artist&lt;/code&gt; bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeebfed484a77965d28caff9c83b0c829d98bf6c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bins&lt;/code&gt; is a sequence, gives bin edges, including left edge of first bin and right edge of last bin. In this case, &lt;code&gt;bins&lt;/code&gt; is returned unmodified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb6b59a9fcbea16ff2196edc7d2e5b7dc225fd7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;blit == True&lt;/code&gt;, &lt;em&gt;func&lt;/em&gt; must return an iterable of all artists that were modified or created. This information is used by the blitting algorithm to determine which parts of the figure have to be updated. The return value is unused if &lt;code&gt;blit == False&lt;/code&gt; and may be omitted in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e8a77c5867423035c942adf0652869a1a0ea72" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;blit == True&lt;/code&gt;, &lt;em&gt;init_func&lt;/em&gt; must return an iterable of artists to be re-drawn. This information is used by the blitting algorithm to determine which parts of the figure have to be updated. The return value is unused if &lt;code&gt;blit == False&lt;/code&gt; and may be omitted in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27dfe0b43de17c4c1ba5389dbda1d79834486fb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode&lt;/code&gt; is set to &lt;code&gt;&quot;expand&quot;&lt;/code&gt; the legend will be horizontally expanded to fill the axes area (or &lt;code&gt;bbox_to_anchor&lt;/code&gt; if defines the legend's size).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1266c8b6d13c290b866fea5a2578f81ec1eb0ce" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;self.decimals&lt;/code&gt; is &lt;a href=&quot;https://docs.python.org/3/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the number of digits after the decimal point is set based on the &lt;code&gt;display_range&lt;/code&gt; of the axis as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6174950aad494925f67ee0c2bdb4bc3edf037f0c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;C&lt;/em&gt; is specified, it specifies values at the coordinate (x[i], y[i]). These values are accumulated for each hexagonal bin and then reduced according to &lt;em&gt;reduce_C_function&lt;/em&gt;, which defaults to &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html#numpy.mean&quot;&gt;&lt;code&gt;numpy.mean&lt;/code&gt;&lt;/a&gt;. (If &lt;em&gt;C&lt;/em&gt; is specified, it must also be a 1-D sequence of the same length as &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff5224a620cfb87da46dad4832a7cf09fecc926" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;False&lt;/em&gt;, reserved LaTeX characters in &lt;em&gt;symbol&lt;/em&gt; will be escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec435f396af795db1727b900c731325182e502e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;False&lt;/em&gt;, the annotation will always be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf32469020b0fe0271b917261d78cd31cf1ecbef" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, a simple autoscaling algorithm is used, based on the average vector length and the number of vectors. The arrow length unit is given by the &lt;em&gt;scale_units&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f689a5be72bcb3dc4311f7b2d4af69422b665a6f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, create a new figure window with automatic numbering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f4abca395dfad869d37e6486227ebfeaae6550" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, defaults to 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d53c4b33080232a4875d50b6f2f000ef98a8956" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, defaults to all supported extensions: png, pdf, and svg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501e71921d7e4c342c2c1d046a4c568d3825667a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, draws outlines in the default color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4756c6d3cc0d0a6993927d6f37df3dcf01743cc5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, no binning is applied; the color of each hexagon directly corresponds to its count value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da6ba75241deeeb27dde2aaf80b2f38188fa4da" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, the annotation will only be drawn when &lt;em&gt;xy&lt;/em&gt; is within the axes and &lt;em&gt;xycoords&lt;/em&gt; is 'data'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e2313515b3b0d54f1da0c0b97000fb3ecbeeba" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, the color of each label matches the color of the corresponding contour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574b9289b8cddb635f52aedec1fb3aac518454fe" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, the test function must use the &lt;code&gt;baseline_images&lt;/code&gt; fixture, either as a parameter or with &lt;code&gt;pytest.mark.usefixtures&lt;/code&gt;. This value is only allowed when using pytest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b88e4745b8697574787650ccc1a266b5e6e8f29" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;None&lt;/em&gt;, then equivalent to passing &lt;code&gt;itertools.count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c1eb5966bea32db1e7f838630f6045d243176c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt; remove the segment of the contour beneath the label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06411b654c1c2fc2e920b74ba77fc3da8c68e8ce" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, indicates that the JPEG encoder should make an extra pass over the image in order to select optimal encoder settings. Applicable only if &lt;em&gt;format&lt;/em&gt; is jpg or jpeg, ignored otherwise. Is &lt;em&gt;False&lt;/em&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b42a0ccf15386587ff49aa4024b7193ff38cc4" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, indicates that this image should be stored as a progressive JPEG file. Applicable only if &lt;em&gt;format&lt;/em&gt; is jpg or jpeg, ignored otherwise. Is &lt;em&gt;False&lt;/em&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c03ecd30344e1b9a73a1bcc4eb23031b0a7728" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, legend marker is placed to the left of the legend label. If &lt;em&gt;False&lt;/em&gt;, legend marker is placed to the right of the legend label. Default is &lt;em&gt;True&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270a76acd48ef6d4c68d742fa06fe80ef592dd8b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, measure distance in pixel space, if not, measure distance in axes space. Defaults to &lt;em&gt;True&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a1abeb01eb96c4a154e4855bc0be323ae77f5f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, resize the figure to match the given image size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3024530c5f77f375db8a25d2990685c3acb59343" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, set all parameters to defaults before processing other keyword arguments. Default is &lt;em&gt;False&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714ec7cef77be61ec8554e0f3ba43083da574d31" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, set the y-axis to be log scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5162dc28c188e2894f50e2cf708d862a4f01f179" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, the &lt;em&gt;x&lt;/em&gt;-axis will be interpreted as Matplotlib dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2d96a165dba2cd294c14a3fa0daaabbc98ad06" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, the &lt;em&gt;y&lt;/em&gt;-axis will be interpreted as Matplotlib dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e206a472da8591d79a5828860dffd49a0a3147e6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, the annotation will only be drawn when &lt;em&gt;xy&lt;/em&gt; is within the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500e6ba51b479a26f1fc0093b7f48074c66614ce" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;True&lt;/em&gt;, the axes patches will all be transparent; the figure patch will also be transparent unless facecolor and/or edgecolor are specified via kwargs. This is useful, for example, for displaying a plot on top of a colored background on a web page. The transparency of these patches will be restored to their original values upon exit of this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9b98e871300a4ef81b25f47b4119c474b7c872" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; are 1D but &lt;em&gt;U&lt;/em&gt;, &lt;em&gt;V&lt;/em&gt; are 2D, &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; are expanded to 2D using &lt;code&gt;X, Y = np.meshgrid(X, Y)&lt;/code&gt;. In this case &lt;code&gt;len(X)&lt;/code&gt; and &lt;code&gt;len(Y)&lt;/code&gt; must match the column and row dimensions of &lt;em&gt;U&lt;/em&gt; and &lt;em&gt;V&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61981ae907cbabf39034f4b4be49a8ec0432fdb9" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; are each equidistant, &lt;a href=&quot;matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt; can be a faster alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0877aff30a4c7438bd634eb7f1c520276d8335" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;X&lt;/em&gt; and/or &lt;em&gt;Y&lt;/em&gt; are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2-D arrays, making a rectangular grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ea248dd473cc249adf5b1e930106102e5400cc" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;Z&lt;/em&gt; is a &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix&quot;&gt;&lt;code&gt;scipy.sparse.spmatrix&lt;/code&gt;&lt;/a&gt; or &lt;em&gt;marker&lt;/em&gt; or &lt;em&gt;markersize&lt;/em&gt; are &lt;em&gt;None&lt;/em&gt;, a &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; object will be returned with the value of marker determining the marker type, and any remaining kwargs passed to &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92203711978e7e254eec52001da57c415da3a39" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;a&lt;/em&gt; is already on the stack, don't add it again, but return &lt;em&gt;None&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de928a53ceecf5278e2874189c235175fa25892b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;allkinds&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, usually all polygons for a particular contour level are grouped together so that &lt;code&gt;level0segs = [polygon0]&lt;/code&gt; and &lt;code&gt;level0kinds = [polygon0kinds]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41cc2a4456e439d1c91733ddee36b6c2fce89c7" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;alpha&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it forces the alpha value, except if &lt;em&gt;c&lt;/em&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; (case-insensitive), which always maps to &lt;code&gt;(0, 0, 0, 0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eae3f856e89dc7378f6803924765c392e4a9363" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;alpha&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, it forces the alpha value. If &lt;em&gt;c&lt;/em&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; (case-insensitive) or an empty list, an empty array is returned. If &lt;em&gt;c&lt;/em&gt; is a masked array, an ndarray is returned with a (0, 0, 0, 0) row for each masked value or row in &lt;em&gt;c&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fbd878e5a77c2e6dab5babee95ad7f896f438e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;arrowprops&lt;/em&gt; contains the key 'arrowstyle' the above keys are forbidden. The allowed values of &lt;code&gt;'arrowstyle'&lt;/code&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43733d23b2d1a96303b39649718a4d096a2ded6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;arrowprops&lt;/em&gt; does not contain the key 'arrowstyle' the allowed keys are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e9905367f8c432dc5adc04e994af9220791c60" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;b&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt; and there are no &lt;em&gt;kwargs&lt;/em&gt;, this toggles the visibility of the lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752784cf2c8f86a1ba3287e11b42692e3dafade6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;bins&lt;/em&gt; is a sequence or &lt;em&gt;range&lt;/em&gt; is specified, autoscaling is based on the specified bin range instead of the range of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b697e094cee529598c57112abdb645b60b828b75" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;c&lt;/em&gt; is 'none', the patch will not be filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd10a925417d802dc4748d52f868837c8469bbe" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;call_axes_locator&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, it does not call the &lt;code&gt;_axes_locator&lt;/code&gt; attribute, which is necessary to get the correct bounding box. &lt;code&gt;call_axes_locator=False&lt;/code&gt; can be used if the caller is only interested in the relative size of the tightbbox compared to the axes bbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f56b8e067d757b00c76b5ae1f433464ce921b83" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;cax&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, a new &lt;em&gt;cax&lt;/em&gt; is created as an instance of Axes. If &lt;em&gt;ax&lt;/em&gt; is an instance of Subplot and &lt;em&gt;use_gridspec&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;em&gt;cax&lt;/em&gt; is created as an instance of Subplot using the &lt;a href=&quot;../gridspec_api#module-matplotlib.gridspec&quot;&gt;&lt;code&gt;gridspec&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cac382e5ac54c27953851078bc7c4dd955af446" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;closed&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt;, the polygon will be closed so the starting and ending points are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2705172b0b152f8db16e473aea43f9be4356068a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;closed_only&lt;/em&gt; is &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; (default), only closed polygons, with the last point being the same as the first point, will be returned. Any unclosed polylines in the path will be explicitly closed. If &lt;em&gt;closed_only&lt;/em&gt; is &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, any unclosed polygons in the path will be returned as unclosed polygons, and the closed polygons will be returned explicitly closed by setting the last point to the same as the first point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5a690c228febe6b87316cbc31a453d50a06749" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;codes&lt;/em&gt; is None and closed is True, vertices will be treated as line segments of a closed polygon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd0fdf4b98d5799deff95b4d4f23ecd166eea95" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;data&lt;/em&gt; is a callable, it must accept and return numpy arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a69379a153a98bd1c2d84cefa809a58bf932a74" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;fg&lt;/em&gt; is known to be an &lt;code&gt;(r, g, b, a)&lt;/code&gt; tuple, &lt;em&gt;isRGBA&lt;/em&gt; can be set to True to improve performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0f25c00c52c9046b80171813e6e1783d1c811c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;format&lt;/em&gt; is not set, then the output format is inferred from the extension of &lt;em&gt;fname&lt;/em&gt;, if any, and from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;savefig.format&quot;]&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;em&gt;format&lt;/em&gt; is set, it determines the output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed713dbc3ce548511721ab0397b9b7e718ab00d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;ignore&lt;/em&gt; is False (the default), this method will never reduce the preexisting data limits, only expand them if &lt;em&gt;vmin&lt;/em&gt; or &lt;em&gt;vmax&lt;/em&gt; are not within them. Moreover, the order of &lt;em&gt;vmin&lt;/em&gt; and &lt;em&gt;vmax&lt;/em&gt; does not matter; the orientation of the axis will not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d8b82a9761b27f26b1b4419de660135e08fde5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;ignore&lt;/em&gt; is False (the default), this method will never reduce the preexisting view limits, only expand them if &lt;em&gt;vmin&lt;/em&gt; or &lt;em&gt;vmax&lt;/em&gt; are not within them. Moreover, the order of &lt;em&gt;vmin&lt;/em&gt; and &lt;em&gt;vmax&lt;/em&gt; does not matter; the orientation of the axis will not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059edbbceea9dddd185720741808c603b4180742" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;ignore&lt;/em&gt; is True, the data limits will be set exactly to &lt;code&gt;(vmin,
vmax)&lt;/code&gt; in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53777e9179076ceac0fe6b13fefdda45ea6464b1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;ignore&lt;/em&gt; is True, the view limits will be set exactly to &lt;code&gt;(vmin,
vmax)&lt;/code&gt; in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6816f54368df6df849d5dd48cb59aa37b2e0fd7f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;inside&lt;/em&gt; is &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, clip to the inside of the box, otherwise to the outside of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4890274b3ca3b408f17f187bdfb251d7ae5b30c6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;interpolation&lt;/em&gt; is 'none', then no interpolation is performed on the Agg, ps, pdf and svg backends. Other backends will fall back to 'nearest'. Note that most SVG renders perform interpolation at rendering and that the default interpolation method they implement may differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4aec8da9eb82d80585fe546531d9156bd959d90" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;key&lt;/em&gt; is unhashable, replace it by a unique, arbitrary object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d4bf6917e73e663de4bc1e2cb50bb0cf7aa32e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;linestyles&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;contour.negative_linestyle&quot;]&lt;/a&gt;&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ee4455488bd193d6a515f0590af7f42dc81b3c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;linewidths&lt;/em&gt;, &lt;em&gt;colors&lt;/em&gt;, or &lt;em&gt;antialiaseds&lt;/em&gt; is None, they default to their rcParams setting, in sequence form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106de2da3f641e1b856720a1681a2b4048faa3a6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;lut&lt;/em&gt; is not None it must be an integer giving the number of entries desired in the lookup table, and &lt;em&gt;name&lt;/em&gt; must be a standard mpl colormap name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87de1321d95644d4be0cc2b367331faad9d5c63e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;mappable&lt;/em&gt; is a &lt;code&gt;ContourSet&lt;/code&gt;, its &lt;em&gt;extend&lt;/em&gt; kwarg is included automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cf26e06115f41c40d784d9836717aca3326fd4" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;marginals&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt;, horizontal bar and vertical bar (both PolyCollections) will be attached to the return collection as attributes &lt;em&gt;hbar&lt;/em&gt; and &lt;em&gt;vbar&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613396a033246fbbef3f9793867ca9d703f24bd3" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;marker&lt;/em&gt; and &lt;em&gt;markersize&lt;/em&gt; are &lt;em&gt;None&lt;/em&gt;, &lt;a href=&quot;matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt; is used. Any extra remaining kwargs are passed to this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795a67f152acf92297c6e995e40748f182494111" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;matrix&lt;/em&gt; is None, initialize with the identity transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6c278f1048bf07f2b66b8abe5d1559a02b917e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;minspanx&lt;/em&gt; is not &lt;em&gt;None&lt;/em&gt; then events smaller than &lt;em&gt;minspanx&lt;/em&gt; in x direction are ignored (it's the same for y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d41b4b7d4b238745010aa5c7f0ea80c812bdc8" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;n&lt;/em&gt; is omitted or None, it will be set to 5 or 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6edd37a5d04e0dbd0a651ad0bdd08a845f3cf98" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;n&lt;/em&gt; is provided, it is the number of spline segments to make. If &lt;em&gt;n&lt;/em&gt; is not provided, the number of spline segments is determined based on the delta between &lt;em&gt;theta1&lt;/em&gt; and &lt;em&gt;theta2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbf70a0244cf1bdfa534c879b440b5b0c35f9cb" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;name&lt;/em&gt; is a &lt;a href=&quot;_as_gen/matplotlib.colors.colormap#matplotlib.colors.Colormap&quot;&gt;&lt;code&gt;matplotlib.colors.Colormap&lt;/code&gt;&lt;/a&gt; instance, it will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13df0478bd3f0b94f483a637f4ed3acc24a5d51a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;newfig&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt;, the plot always will be made in a new figure; if &lt;em&gt;False&lt;/em&gt;, it will be made in the current figure if one exists, else in a new figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36099718762136e1f738dbaeb0ed87e6c0ffe97d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;norm&lt;/em&gt; is not given, these values set the data limits for the colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698f57e2dd62a8bc13b5a24f82a1c3902831a6ef" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;numRows&lt;/em&gt; &amp;lt;= &lt;em&gt;numCols&lt;/em&gt; &amp;lt;= &lt;em&gt;plotNum&lt;/em&gt; &amp;lt; 10, &lt;em&gt;args&lt;/em&gt; can be the decimal integer &lt;em&gt;numRows&lt;/em&gt; * 100 + &lt;em&gt;numCols&lt;/em&gt; * 10 + &lt;em&gt;plotNum&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf74e85bac98ba3e926862490a4546266473a743" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;obj&lt;/em&gt; is a sequence, return the converted sequence. The output must be a sequence of scalars that can be used by the numpy array layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b66790eb4fc3d5318a879d3328ff26b35388f9" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offsets&lt;/em&gt; and &lt;em&gt;transOffset&lt;/em&gt; are not None, then &lt;em&gt;offsets&lt;/em&gt; are transformed by &lt;em&gt;transOffset&lt;/em&gt; and applied after the segments have been transformed to display coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10220ad002f4d92bf24704832a0c9794ba4561e2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offsets&lt;/em&gt; is not None but &lt;em&gt;transOffset&lt;/em&gt; is None, then the &lt;em&gt;offsets&lt;/em&gt; are added to the segments before any transformation. In this case, a single offset can be specified as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f0c54b6c4e12efee86bba734e722a07e44943d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;orig&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt;, return the original data, else the processed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9110c5b80a90987d769d4b995d71dd86fff2c6a2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;orig&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt;, return the original data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914de53c36b8972501878cf29a0bf67f2c32bdf1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;origin&lt;/em&gt; is not &lt;em&gt;None&lt;/em&gt;, then &lt;em&gt;extent&lt;/em&gt; is interpreted as in &lt;a href=&quot;matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt;: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If &lt;em&gt;origin&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;, then (&lt;em&gt;x0&lt;/em&gt;, &lt;em&gt;y0&lt;/em&gt;) is the position of Z[0,0], and (&lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt;) is the position of Z[-1,-1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838d33feff1d1617ddf35e60dba7c1d5ac1f59cd" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;origin&lt;/em&gt; is not &lt;em&gt;None&lt;/em&gt;, then &lt;em&gt;extent&lt;/em&gt; is interpreted as in &lt;a href=&quot;matplotlib.pyplot.imshow#matplotlib.pyplot.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt;: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If &lt;em&gt;origin&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;, then (&lt;em&gt;x0&lt;/em&gt;, &lt;em&gt;y0&lt;/em&gt;) is the position of Z[0,0], and (&lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt;) is the position of Z[-1,-1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea852c80f571755baff4d0bda21bee3ca415824" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;origin&lt;/em&gt; is not &lt;em&gt;None&lt;/em&gt;, then &lt;em&gt;extent&lt;/em&gt; is interpreted as in &lt;a href=&quot;matplotlib.pyplot.imshow#matplotlib.pyplot.imshow&quot;&gt;&lt;code&gt;matplotlib.pyplot.imshow()&lt;/code&gt;&lt;/a&gt;: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If &lt;em&gt;origin&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;, then (&lt;em&gt;x0&lt;/em&gt;, &lt;em&gt;y0&lt;/em&gt;) is the position of Z[0,0], and (&lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt;) is the position of Z[-1,-1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae41fdb7690a48be811262d4e46b7d28e6d6075" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;posA&lt;/em&gt; and &lt;em&gt;posB&lt;/em&gt; are given, a path connecting two points is created according to &lt;em&gt;connectionstyle&lt;/em&gt;. The path will be clipped with &lt;em&gt;patchA&lt;/em&gt; and &lt;em&gt;patchB&lt;/em&gt; and further shrunken by &lt;em&gt;shrinkA&lt;/em&gt; and &lt;em&gt;shrinkB&lt;/em&gt;. An arrow is drawn along this resulting path using the &lt;em&gt;arrowstyle&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc3be8b27a61cc06362507e454370b9785e26f5" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;precision&lt;/em&gt; is 0, any non-zero value will be plotted. Otherwise, values of \(|Z| &amp;gt; precision\) will be plotted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ab02099d724dba5a9e34257f8496dfc418a3ba" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;projection&lt;/em&gt; is None, a standard rectilinear projection is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e859d76b7e870e215834658186b496a588b6394" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;prop&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;, return a list of strings of all settable properties and their valid values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59574ee3bffa88b14eadb52576b16f0cafc5f5a1" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;prop&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;, return a list of strings of all settable properties and their valid values. Format the output for ReST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0469581a1b3efc7c165a60c38294eaf291fe052c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;prop&lt;/em&gt; is not &lt;em&gt;None&lt;/em&gt;, it is a valid property name and that property will be returned as a string of property : valid values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5050604de3d7a6d40574c6343c83e26589911f" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;prop&lt;/em&gt; is passed as a keyword argument, but &lt;em&gt;fontproperties&lt;/em&gt; is not, then &lt;em&gt;prop&lt;/em&gt; is be assumed to be the intended &lt;em&gt;fontproperties&lt;/em&gt;. Using both &lt;em&gt;prop&lt;/em&gt; and &lt;em&gt;fontproperties&lt;/em&gt; is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1f6b484fdfb9115a1fbf3cbdffbda13328edd2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;prop&lt;/em&gt; is passed as a keyworded argument, but &lt;em&gt;fontproperties&lt;/em&gt; is not, then &lt;em&gt;prop&lt;/em&gt; is be assumed to be the intended &lt;em&gt;fontproperties&lt;/em&gt;. Using both &lt;em&gt;prop&lt;/em&gt; and &lt;em&gt;fontproperties&lt;/em&gt; is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba8cebdc21eacf8620fa1c5055766b5ee32872d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;scale_units&lt;/em&gt; is 'width' or 'height', then the vector will be half the width/height of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbf2ef3aa945e208e8a68605b10857c3eeeb2e3" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;scale_units&lt;/em&gt; is 'x' then the vector will be 0.5 x-axis units. To plot vectors in the x-y plane, with u and v having the same units as x and y, use &lt;code&gt;angles='xy', scale_units='xy', scale=1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc39b30171ad2fc8efd66f4c382986984fedc8a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;seq&lt;/em&gt; is empty or &lt;code&gt;(None, None)&lt;/code&gt;, the linestyle will be set to solid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a791e285afaf23d6093dfe3a430a0dffa667121" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;size2&lt;/em&gt; (the size specified in the font file) is 'scalable', this function always returns 0.0, since any font size can be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac720eded59f98f633a19a411b593ef2913cf196" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;sy&lt;/em&gt; is None, the same scale is applied in both the &lt;em&gt;x&lt;/em&gt;- and &lt;em&gt;y&lt;/em&gt;-directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd25eaa9623c17ff596c4f345f1a7847d2e6adf6" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;tight&lt;/em&gt; is &lt;em&gt;False&lt;/em&gt;, the axis major locator will be used to expand the view limits if rcParams['axes.autolimit_mode'] is 'round_numbers'. Note that any margins that are in effect will be applied first, regardless of whether &lt;em&gt;tight&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt; or &lt;em&gt;False&lt;/em&gt;. Specifying &lt;em&gt;tight&lt;/em&gt; as &lt;em&gt;True&lt;/em&gt; or &lt;em&gt;False&lt;/em&gt; saves the setting as a private attribute of the Axes; specifying it as &lt;em&gt;None&lt;/em&gt; (the default) applies the previously saved value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9d3e0d4b432dff03c7f54bab803f6956bc2104" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;timeout&lt;/em&gt; is negative, does not timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5982c4f6b8865ba308f4115f7ca2ba3f20e71210" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;timeout&lt;/em&gt; is negative, never timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd307d4dc8ee0f9b517a740332ccf882cd4a1f2" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;transform&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, the path will be transformed before performing the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc0161d76a7f6288403f71e801479aa55b46027" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;unsampled&lt;/em&gt; is True, the image will not be scaled, but an appropriate affine transformation will be returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e206b79f30bc8fbc0335ab2d49c3a86584c3f05c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;vertices&lt;/em&gt; contains masked values, they will be converted to NaNs which are then handled correctly by the Agg PathIterator and other consumers of path data, such as &lt;a href=&quot;#matplotlib.path.Path.iter_segments&quot;&gt;&lt;code&gt;iter_segments()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc42fa4e2bc50cf2eff9a12cfcffdfefae0d905" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;vmin&lt;/em&gt; or &lt;em&gt;vmax&lt;/em&gt; is not given, they are initialized from the minimum and maximum value respectively of the first input processed. That is, &lt;em&gt;__call__(A)&lt;/em&gt; calls &lt;em&gt;autoscale_None(A)&lt;/em&gt;. If &lt;em&gt;clip&lt;/em&gt; is &lt;em&gt;True&lt;/em&gt; and the given value falls outside the range, the returned value will be 0 or 1, whichever is closer. Returns 0 if:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b20fe1a0dd576bca1d2cf9f50a5aaaede03d3e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;height&lt;/em&gt; are both non-zero then the lines will be simplified so that vertices outside of (0, 0), (width, height) will be clipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a931aa1f0287715b3b8d719f5760ab52058ec07a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;x&lt;/em&gt; is a sequence, a sequence of &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; objects will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e110f16c30999ce2d7d24a49d55f262b4effac8b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;x&lt;/em&gt; is a sequence, a sequence of &lt;code&gt;datetime&lt;/code&gt; objects will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec9655a344329f6d3e7afc7a8d12db632ce5173" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;xscale&lt;/em&gt; or &lt;em&gt;yscale&lt;/em&gt; is set to 'log', the limits are expected to be the exponent for a power of 10. E.g. for x-limits of 1 and 50 in 'linear' scale and y-limits of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad5dc7291adfc703762fda346f6273ef35b36ec" translate="yes" xml:space="preserve">
          <source>If False, always treat as a single unicode character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3056b63abb9a9d22b4d1408b7044ce417f71b19" translate="yes" xml:space="preserve">
          <source>If False, no squeezing at all is done: the returned Axes object is always a 2D array containing Axes instances, even if it ends up being 1x1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82709390720ef703e5db7a55032261396f9585cb" translate="yes" xml:space="preserve">
          <source>If False, suppress drawing the figure frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70db20c0dc44a796b82ee97c7ad53034b2f02075" translate="yes" xml:space="preserve">
          <source>If False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfbb6fcad09fab0fa0d71f8786f3bcb24c87e16" translate="yes" xml:space="preserve">
          <source>If False, the widget does not respond to events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5e833d8403f7fdd6f76354b61612243d43272f" translate="yes" xml:space="preserve">
          <source>If LaTeX is enabled via &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;text.usetex&quot;]&lt;/a&gt;&lt;/code&gt;, the special characters &lt;code&gt;{'#', '$', '%', '&amp;amp;', '~', '_', '^', '\', '{', '}'}&lt;/code&gt; are automatically escaped in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bb36637cd52547354592a896670289cd7b8190" translate="yes" xml:space="preserve">
          <source>If None, a default Locator will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154266a3329101b6b383bfbbc28a406396535d0d" translate="yes" xml:space="preserve">
          <source>If None, fall back to &lt;code&gt;legend.borderpad&lt;/code&gt; as the default. In units of fraction of font size. Default is None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180e90ca838ed4bd1089c37122ed5a93bbdf743c" translate="yes" xml:space="preserve">
          <source>If True and if size_vertical is nonzero, the size bar will be filled in with the color specified by the size bar. Defaults to True if &lt;code&gt;size_vertical&lt;/code&gt; is greater than zero and False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7cce1b0fe29d1f957f629d60307954a5e78262" translate="yes" xml:space="preserve">
          <source>If True and not &lt;em&gt;force&lt;/em&gt;, warn that the call will have no effect if this is called after pyplot has been imported and a backend is set up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f456e1ec86e0d22398be88f5da6a243509b70b" translate="yes" xml:space="preserve">
          <source>If True and the figure already exists, then it is cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4871d2828d8661e87f7bc76e8764903b24bc7d43" translate="yes" xml:space="preserve">
          <source>If True return the minor ticklabels, else return the major ticklabels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8221f33c2cc37f7c780fb36d2a33e2559e3b1be" translate="yes" xml:space="preserve">
          <source>If True return the minor ticklabels, else return the major ticklabels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b70052f6dbb6bd9264e3cee3b184a037d61395" translate="yes" xml:space="preserve">
          <source>If True the slider can be dragged by the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117154366818bec7a076f3679a570089bf030f49" translate="yes" xml:space="preserve">
          <source>If True, a rescaling will be internally performed (based on &lt;a href=&quot;#matplotlib.tri.TriAnalyzer.scale_factors&quot;&gt;&lt;code&gt;scale_factors&lt;/code&gt;&lt;/a&gt;, so that the (unmasked) triangles fit exactly inside a unit square mesh. Default is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba4a974b10074ebfd863cf61e8ef61520d67536" translate="yes" xml:space="preserve">
          <source>If True, a rescaling will first be internally performed (based on &lt;a href=&quot;#matplotlib.tri.TriAnalyzer.scale_factors&quot;&gt;&lt;code&gt;scale_factors&lt;/code&gt;&lt;/a&gt; ), so that the (unmasked) triangles fit exactly inside a unit square mesh. This rescaling accounts for the difference of scale which might exist between the 2 axis. Default (and recommended) value is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4acef7cd611d60187575b5973b071b39230b24" translate="yes" xml:space="preserve">
          <source>If True, apply style after resetting settings to their defaults; otherwise, apply style on top of the current settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f234d6c1cca5f5604c6e621ed4649e3cb3f66dd" translate="yes" xml:space="preserve">
          <source>If True, attempt to switch the backend. An ImportError is raised if an interactive backend is selected, but another interactive backend has already started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddd141cf23d6f7c8a76ef90235267b9948dd193" translate="yes" xml:space="preserve">
          <source>If True, autoscaling will result in a range symmetric about zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310a266295856511e435918fd6b22bab7ef1427f" translate="yes" xml:space="preserve">
          <source>If True, baseline for multiline text is adjusted so that it is (approximately) center-aligned with single-line text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dc32efeb7b1a7dee14e430e83633c3a577d7d8" translate="yes" xml:space="preserve">
          <source>If True, curve segments will be returned as curve segments. If False, all curves will be converted to line segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6f0bea60de85132ff015d55706b947dc38043f" translate="yes" xml:space="preserve">
          <source>If True, draw a box around the arrows and labels. Defaults to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b9eaeeeaab6557bf3b1026c4ea274e2844b7ac" translate="yes" xml:space="preserve">
          <source>If True, draw a box around the ellipse. Defaults to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f8be34d3f60f80a5fda660692903f678e394e3" translate="yes" xml:space="preserve">
          <source>If True, draw a box around the horizontal bar and label. Defaults to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2c5739a35b367d8327aa244518d039cf4c707c" translate="yes" xml:space="preserve">
          <source>If True, draw a box around this artists. Defaults to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191846150f98e244b670e6671fcb5366ecfced7f" translate="yes" xml:space="preserve">
          <source>If True, each axes in the grid has a &lt;em&gt;cax&lt;/em&gt; attribute that is bound to associated &lt;em&gt;cbar_axes&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3e51d62c6c55763fb82ff0ed668aa37efa11a7" translate="yes" xml:space="preserve">
          <source>If True, equivalent to projection='polar'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3c0ca00b5c15ad712f1decb7cbd645e278805e" translate="yes" xml:space="preserve">
          <source>If True, extent of the single line text is adjusted so that it has minimum descent of &quot;p&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a18670ef59cb68202872b7ea871ebe46cbc0136" translate="yes" xml:space="preserve">
          <source>If True, extra dimensions are squeezed out from the returned array of &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ebc4a7a14a48caf413ce968617782a1471ebf1" translate="yes" xml:space="preserve">
          <source>If True, extra dimensions are squeezed out from the returned array of Axes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72389b4f5cd1afa0642435ab4be73db7fd5a9a68" translate="yes" xml:space="preserve">
          <source>If True, format the number according to the current locale. This affects things such as the character used for the decimal separator. If False, use C-style (English) formatting. The default setting is controlled by the axes.formatter.use_locale rcparam.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dc50f1d068f2708a6018fba78e68bcc9521fc9" translate="yes" xml:space="preserve">
          <source>If True, initialize with default parameters before updating with those in the given file. If False, the configuration class only contains the parameters specified in the file. (Useful for updating dicts.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f38e41b7bc686b8dba7daa2c3cf2c79aeb30315" translate="yes" xml:space="preserve">
          <source>If True, initialize with default parameters before updating with those in the given file. If False, the current configuration persists and only the parameters specified in the file are updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a99d3e4879373138f0fb93383f15f287a491a60" translate="yes" xml:space="preserve">
          <source>If True, label ticks only at integer powers of base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012910cc6d7a82be86508b94fd6d4e136b755343" translate="yes" xml:space="preserve">
          <source>If True, label ticks only at integer powers of base. This is normally True for major ticks and False for minor ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f47b38e5136e80fc35493660152eac00501a6bc" translate="yes" xml:space="preserve">
          <source>If True, print the number of objects reached as they are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12556db5d63ac0e7d447a850026465eee63d0f74" translate="yes" xml:space="preserve">
          <source>If True, raise an error when the parser fails to convert a parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b472f2b9acfe6d8fac1756ba4bceddd30693c49b" translate="yes" xml:space="preserve">
          <source>If True, render the offset and scientific notation in mathtext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94164da66f4b16e093a45ad4b4909a18a836583c" translate="yes" xml:space="preserve">
          <source>If True, return both the file object and a boolean indicating whether this was a new file (that the caller needs to close). If False, return only the new file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f650815a628e6a6426a6a6c077ff32a780e0ae" translate="yes" xml:space="preserve">
          <source>If True, set minor ticks instead of major ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cbd97fc4a209172dd2f0e6d304294255c00327" translate="yes" xml:space="preserve">
          <source>If True, set view limits to data limits; if False, let the locator and margins expand the view limits; if None, use tight scaling if the only artist is an image, otherwise treat &lt;em&gt;tight&lt;/em&gt; as False. The &lt;em&gt;tight&lt;/em&gt; setting is retained for future autoscaling until it is explicitly changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b0160b402cd2e0b863abc2326fdaaf5218cb36" translate="yes" xml:space="preserve">
          <source>If True, show a red cross at the location of each click.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fb428e4cf23733e2637421471c6a9861e40ac1" translate="yes" xml:space="preserve">
          <source>If True, snap all nodes to pixels; if False, don't snap them. If None, perform snapping if the path contains only segments parallel to the x or y axes, and no more than 1024 of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ff4a90916e608bfcf970f15ff2f778cd20eb15" translate="yes" xml:space="preserve">
          <source>If True, swap &lt;em&gt;vmin&lt;/em&gt;, &lt;em&gt;vmax&lt;/em&gt; if &lt;em&gt;vmin&lt;/em&gt; &amp;gt; &lt;em&gt;vmax&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5dd1afd807e08d47e8793cb584f97fb5e62d58" translate="yes" xml:space="preserve">
          <source>If True, the default backend (presumably a user interface backend) will be used which will cause a figure to be raised if &lt;a href=&quot;_as_gen/matplotlib.pyplot.show#matplotlib.pyplot.show&quot;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/a&gt; is called. If it is False, the figure is created using &lt;code&gt;FigureCanvasBase&lt;/code&gt; and the drawing backend is selected as &lt;code&gt;savefig&lt;/code&gt; would normally do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd8e69c1f380b9b7479b4e8d2db423c96147655" translate="yes" xml:space="preserve">
          <source>If True, the label will be over the size bar. Defaults to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffc82eadedba76b5cc90ae697bb49b25c1a7406" translate="yes" xml:space="preserve">
          <source>If True, the span stays visible after the mouse is released</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46d6b2bb250f06be5713cb763bed9ef6155c2a9" translate="yes" xml:space="preserve">
          <source>If True, the tick locations and labels will be adjusted to match the boxplot positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529ea9e4b82c4accabf650ced32ddd3a7589ba78" translate="yes" xml:space="preserve">
          <source>If True, tick locations are updated immediately. If False, use &lt;a href=&quot;#matplotlib.colorbar.ColorbarBase.update_ticks&quot;&gt;&lt;code&gt;update_ticks()&lt;/code&gt;&lt;/a&gt; to manually update the ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbd6cc97211fe1d4718c76fbee2228b9c6402e1" translate="yes" xml:space="preserve">
          <source>If True, ticks will take only integer values, provided at least &lt;code&gt;min_n_ticks&lt;/code&gt; integers are found within the view limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a516343177c12129951fa5557ee98cb2320819" translate="yes" xml:space="preserve">
          <source>If True, use mathtext parser. If &quot;TeX&quot;, use tex for renderering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50cafc8781177a13567fde9c83b08596a488d91" translate="yes" xml:space="preserve">
          <source>If True, use the backend-dependent blitting features for faster canvas updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78977753799da3a59e70b982bf2870cc958dbf48" translate="yes" xml:space="preserve">
          <source>If True, use the colors and linewidths of the original patches. If False, new colors may be assigned by providing the standard collection arguments, facecolor, edgecolor, linewidths, norm or cmap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efafbd675d5212b75f7216b56ba9f21c18a102c9" translate="yes" xml:space="preserve">
          <source>If True, will fallback to the default font family (usually &quot;DejaVu Sans&quot; or &quot;Helvetica&quot;) if the first lookup hard-fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea6effad26bbdce0e52b318bc0411c05da5b3c7" translate="yes" xml:space="preserve">
          <source>If True, will plot the errorbars above the plot symbols. Default is below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a46409552a9fb800f076843e6e945923791cdaf" translate="yes" xml:space="preserve">
          <source>If a 2-tuple of functions, the user specifies the transform function and its inverse. i.e. &lt;code&gt;functions=(lambda x: 2 / x, lambda x: 2 / x)&lt;/code&gt; would be an reciprocal transform with a factor of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1c35f70dc71fd4f409fb78042c0c271862a11f" translate="yes" xml:space="preserve">
          <source>If a 4-tuple or &lt;a href=&quot;../transformations#matplotlib.transforms.BboxBase&quot;&gt;&lt;code&gt;BboxBase&lt;/code&gt;&lt;/a&gt; is given, then it specifies the bbox &lt;code&gt;(x, y, width, height)&lt;/code&gt; that the legend is placed in. To put the legend in the best location in the bottom right quadrant of the axes (or figure):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac25cb87fe03bf2ed0d1147b428d84d1b83c14e" translate="yes" xml:space="preserve">
          <source>If a 4-tuple or &lt;a href=&quot;transformations#matplotlib.transforms.BboxBase&quot;&gt;&lt;code&gt;BboxBase&lt;/code&gt;&lt;/a&gt; is given, then it specifies the bbox &lt;code&gt;(x, y, width, height)&lt;/code&gt; that the legend is placed in. To put the legend in the best location in the bottom right quadrant of the axes (or figure):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d717f1da5ed95cb46df6c4b7be8cfde1cfe24a9" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instance is constructed with &lt;code&gt;fontfamily=None&lt;/code&gt;, then the font is set to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;font.family&quot;]&lt;/a&gt;&lt;/code&gt;, and the same is done when &lt;a href=&quot;#matplotlib.text.Text.set_fontfamily&quot;&gt;&lt;code&gt;set_fontfamily()&lt;/code&gt;&lt;/a&gt; is called on an existing &lt;a href=&quot;#matplotlib.text.Text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d63e9a617cd19a41d36014c62e010e801bc3a1" translate="yes" xml:space="preserve">
          <source>If a Mx3 array-like, the rows define values (x, y0, y1). The x values must start with x=0, end with x=1, and all x values be in increasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8dfa5c8e0032aefa7a10a33d3f76fcd4bd83108" translate="yes" xml:space="preserve">
          <source>If a bool, sets whether to call &lt;a href=&quot;#matplotlib.figure.Figure.tight_layout&quot;&gt;&lt;code&gt;tight_layout&lt;/code&gt;&lt;/a&gt; upon drawing. If &lt;code&gt;None&lt;/code&gt;, use the &lt;code&gt;figure.autolayout&lt;/code&gt; rcparam instead. If a dict, pass it as kwargs to &lt;a href=&quot;#matplotlib.figure.Figure.tight_layout&quot;&gt;&lt;code&gt;tight_layout&lt;/code&gt;&lt;/a&gt;, overriding the default paddings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e9690b4efacfcbc83aa3c3dde114ed1d9fa6d9" translate="yes" xml:space="preserve">
          <source>If a bool, turns axis lines and labels on or off. If a string, possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63931214ac1abbf36492e3a37d48378b046876d" translate="yes" xml:space="preserve">
          <source>If a colormap is used, the &lt;a href=&quot;matplotlib.colors.normalize#matplotlib.colors.Normalize&quot;&gt;&lt;code&gt;Normalize&lt;/code&gt;&lt;/a&gt; instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a41422d1cf97722922e1bfe7fa7f7699652af1" translate="yes" xml:space="preserve">
          <source>If a float, it is used as the pick radius in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3a15aedce825181330d192830a2bdbee9cd5c9" translate="yes" xml:space="preserve">
          <source>If a generator function, then must have the signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d4f736560d7b750ed28b370ed8a2d819bdb6fb" translate="yes" xml:space="preserve">
          <source>If a glyph is not found it will fallback to Stix Sans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db9a634c6a9e303807ec5a4d7885c025617192c" translate="yes" xml:space="preserve">
          <source>If a glyph is not found it will fallback to Stix Serif</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcef49bd2ee28306837b1ff9122ad8c44730670" translate="yes" xml:space="preserve">
          <source>If a label is on the bottom, it is aligned with labels on axes that also have their label on the bottom and that have the same bottom-most subplot row. If the label is on the top, it is aligned with labels on axes with the same top-most row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d0890666c55b4275c948cedb90137e7fd2f110" translate="yes" xml:space="preserve">
          <source>If a label is on the left, it is aligned with labels on axes that also have their label on the left and that have the same left-most subplot column. If the label is on the right, it is aligned with labels on axes with the same right-most column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cce2640e3bd8fee835d8dee5a4bda6e0339cf3" translate="yes" xml:space="preserve">
          <source>If a matplotlib color arg, draws outlines in the specified color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9ba1a08b66e4aab1389016863627db3906eec2" translate="yes" xml:space="preserve">
          <source>If a nonzero integer, draw into the figure with the given number (create it if it does not exist).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491dd8c622d6c130d81d67660f7959748487e441" translate="yes" xml:space="preserve">
          <source>If a number, all levels will be plotted with this linewidth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77ee64c69b8a1d1d30593b835c6c0c243251e94" translate="yes" xml:space="preserve">
          <source>If a previously used Axes method such as &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor()&lt;/code&gt;&lt;/a&gt; has set &lt;a href=&quot;matplotlib.axes.axes.use_sticky_edges#matplotlib.axes.Axes.use_sticky_edges&quot;&gt;&lt;code&gt;use_sticky_edges&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, only the limits not set by the &quot;sticky artists&quot; will be modified. To force all of the margins to be set, set &lt;a href=&quot;matplotlib.axes.axes.use_sticky_edges#matplotlib.axes.Axes.use_sticky_edges&quot;&gt;&lt;code&gt;use_sticky_edges&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; before calling &lt;a href=&quot;#matplotlib.axes.Axes.margins&quot;&gt;&lt;code&gt;margins()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae39d56417240a329254a51ad2b8989449eec948" translate="yes" xml:space="preserve">
          <source>If a previously used Axes method such as &lt;a href=&quot;matplotlib.pyplot.pcolor#matplotlib.pyplot.pcolor&quot;&gt;&lt;code&gt;pcolor()&lt;/code&gt;&lt;/a&gt; has set &lt;code&gt;use_sticky_edges&lt;/code&gt; to &lt;a href=&quot;https://docs.python.org/3/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, only the limits not set by the &quot;sticky artists&quot; will be modified. To force all of the margins to be set, set &lt;code&gt;use_sticky_edges&lt;/code&gt; to &lt;a href=&quot;https://docs.python.org/3/library/constants.html#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; before calling &lt;a href=&quot;#matplotlib.pyplot.margins&quot;&gt;&lt;code&gt;margins()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea4e663284b643492db364c3ec2c94196f31552" translate="yes" xml:space="preserve">
          <source>If a scalar, this defines the aspect ratio (i.e. the ratio height / width). In case of an array the aspect ratio is number of rows / number of columns, so that the array could be fitted in the figure undistorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e743c3fb5da09d749b7340db650883a183fe7c3" translate="yes" xml:space="preserve">
          <source>If a sequence of values, the values of the lower bound of the bins to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d4476eb190fe3d20ca248c8d13e51a0f9fb4c9" translate="yes" xml:space="preserve">
          <source>If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097639baa7149ccb0d6885800f457ef4e89064a0" translate="yes" xml:space="preserve">
          <source>If a single positional argument is provided, it specifies both margins of the x-axis and y-axis limits. If two positional arguments are provided, they will be interpreted as &lt;em&gt;xmargin&lt;/em&gt;, &lt;em&gt;ymargin&lt;/em&gt;. If setting the margin on a single axis is desired, use the keyword arguments described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4749fcb47b87cdde290488d9138b00d44c88739" translate="yes" xml:space="preserve">
          <source>If a string, like 'r' or 'red', all levels will be plotted in this color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644d2e0b9b7558fc54d48d4de83f4bebff5c1469" translate="yes" xml:space="preserve">
          <source>If a symmetric log scale is in use, its &lt;code&gt;linthresh&lt;/code&gt; parameter must be supplied here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fbd4a52e9613f7a397a3ee8d0fd8d57ff55943" translate="yes" xml:space="preserve">
          <source>If a tuple of matplotlib color args (string, float, rgb, etc), different labels will be plotted in different colors in the order specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e0012254773b5bc63f6bc39d396841f83001f6" translate="yes" xml:space="preserve">
          <source>If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
