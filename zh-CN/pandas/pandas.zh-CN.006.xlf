<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="pandas">
    <body>
      <group id="pandas">
        <trans-unit id="6e9ffc843b10d93241eaefde5b3725754f1680e5" translate="yes" xml:space="preserve">
          <source>Broadcast across a level, matching Index values on the passed MultiIndex level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce9e4479d8cdea2aa38baf1a05a1b5769573c13" translate="yes" xml:space="preserve">
          <source>Broadcast values along this axis, if aligning two objects of different dimensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a1d2a406525265da4b4a94b199835b01e2c242" translate="yes" xml:space="preserve">
          <source>Buffer to write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df097c1839d8f2d1d0b45b61a1fad63542067dab" translate="yes" xml:space="preserve">
          <source>Buffer to write to. If None, the output is returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35d94d9fb34f3e421990757c2e9c3f3810b2803" translate="yes" xml:space="preserve">
          <source>Bug reports and enhancement requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ab496194272dfc9dfa8b272a6e165f5f1e010c" translate="yes" xml:space="preserve">
          <source>Bug reports are an important part of making &lt;em&gt;pandas&lt;/em&gt; more stable. Having a complete bug report will allow others to reproduce the bug and provide insight into fixing. See &lt;a href=&quot;https://stackoverflow.com/help/mcve&quot;&gt;this stackoverflow article&lt;/a&gt; and &lt;a href=&quot;http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports&quot;&gt;this blogpost&lt;/a&gt; for tips on writing a good bug report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ffb54583c93a5c37eed48b29b14791e00518de" translate="yes" xml:space="preserve">
          <source>Bug reports must:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6939921e7058714b7d7daabe0956cc9c18239021" translate="yes" xml:space="preserve">
          <source>Build and install pandas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83219ecb58983f691ff0da5e97811189739c34e" translate="yes" xml:space="preserve">
          <source>Building Styles Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233e4088744766fe25ce63da13f185d5e74832f9" translate="yes" xml:space="preserve">
          <source>Building master branch documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce9c4f324a40b6546390a83b25a305089ac3db2" translate="yes" xml:space="preserve">
          <source>Building styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac827cc13e078ada5ddfe46b0f806978b51bf586" translate="yes" xml:space="preserve">
          <source>Building the documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd4120957934bd2a1de97a101b5f591bc61c7ce" translate="yes" xml:space="preserve">
          <source>Builtin style functions: style functions that are methods on &lt;code&gt;Styler&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d96d520546578343b9168251f31f50b6c392165" translate="yes" xml:space="preserve">
          <source>Builtin styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935629b390eec3d2484049f90b0b65397dde0244" translate="yes" xml:space="preserve">
          <source>BusinessDay</source>
          <target state="translated">BusinessDay</target>
        </trans-unit>
        <trans-unit id="1783f25a9f385e15220ea7c4ec375b1b0b91a708" translate="yes" xml:space="preserve">
          <source>BusinessDay.apply()</source>
          <target state="translated">BusinessDay.apply()</target>
        </trans-unit>
        <trans-unit id="cc63930cda9d999809d2d02fa1a100e7f64a401d" translate="yes" xml:space="preserve">
          <source>BusinessDay.apply_index()</source>
          <target state="translated">BusinessDay.apply_index()</target>
        </trans-unit>
        <trans-unit id="0b89f384e1789d3fda45ddde884a48b6a7c6b4f8" translate="yes" xml:space="preserve">
          <source>BusinessDay.base</source>
          <target state="translated">BusinessDay.base</target>
        </trans-unit>
        <trans-unit id="ea3d018a7f06b4daa4abaa96b48ff750d2a7a3c9" translate="yes" xml:space="preserve">
          <source>BusinessDay.copy()</source>
          <target state="translated">BusinessDay.copy()</target>
        </trans-unit>
        <trans-unit id="5765617819c468117ed6b34269d06090100ed6ce" translate="yes" xml:space="preserve">
          <source>BusinessDay.freqstr</source>
          <target state="translated">BusinessDay.freqstr</target>
        </trans-unit>
        <trans-unit id="70dae1ab2ec500b06ab4ac87d9b906080e29be98" translate="yes" xml:space="preserve">
          <source>BusinessDay.isAnchored()</source>
          <target state="translated">BusinessDay.isAnchored()</target>
        </trans-unit>
        <trans-unit id="c9ec9551d3161fc8818424138a3c3853db6b919a" translate="yes" xml:space="preserve">
          <source>BusinessDay.kwds</source>
          <target state="translated">BusinessDay.kwds</target>
        </trans-unit>
        <trans-unit id="ab5f2d3898ff7d52d978faa9bb68d9c57fd241da" translate="yes" xml:space="preserve">
          <source>BusinessDay.name</source>
          <target state="translated">BusinessDay.name</target>
        </trans-unit>
        <trans-unit id="972d6b2a3fc2cd3c032fa77e87eba0600ee55ded" translate="yes" xml:space="preserve">
          <source>BusinessDay.nanos</source>
          <target state="translated">BusinessDay.nanos</target>
        </trans-unit>
        <trans-unit id="018f680e45fd8cf1a4dfea4c312a0f7fc74c16e3" translate="yes" xml:space="preserve">
          <source>BusinessDay.normalize</source>
          <target state="translated">BusinessDay.normalize</target>
        </trans-unit>
        <trans-unit id="b4f765db67f4c745d69c9bd9bb90f6c379da2c65" translate="yes" xml:space="preserve">
          <source>BusinessDay.offset</source>
          <target state="translated">BusinessDay.offset</target>
        </trans-unit>
        <trans-unit id="d7b74f817db5458b1da2962225177f049f99fc86" translate="yes" xml:space="preserve">
          <source>BusinessDay.onOffset()</source>
          <target state="translated">BusinessDay.onOffset()</target>
        </trans-unit>
        <trans-unit id="c422f7d85847a20433e9eadfb3eb320bac30cf97" translate="yes" xml:space="preserve">
          <source>BusinessDay.rollback()</source>
          <target state="translated">BusinessDay.rollback()</target>
        </trans-unit>
        <trans-unit id="296a6b2ab68578bebb7d1429c526b8600be1b0a0" translate="yes" xml:space="preserve">
          <source>BusinessDay.rollforward()</source>
          <target state="translated">BusinessDay.rollforward()</target>
        </trans-unit>
        <trans-unit id="c0f21ea00a491cde49e5ebdebbbf7f6bf52a3f9b" translate="yes" xml:space="preserve">
          <source>BusinessDay.rule_code</source>
          <target state="translated">BusinessDay.rule_code</target>
        </trans-unit>
        <trans-unit id="d79d814a814f9f2b1ec74ae659ddf0a5df6be0d2" translate="yes" xml:space="preserve">
          <source>BusinessHour</source>
          <target state="translated">BusinessHour</target>
        </trans-unit>
        <trans-unit id="667a05aa5fc944599927485cd4387b0f59cc03c3" translate="yes" xml:space="preserve">
          <source>BusinessHour.apply()</source>
          <target state="translated">BusinessHour.apply()</target>
        </trans-unit>
        <trans-unit id="8d4f38a4434c1baee272eddadec6f7da6db7126f" translate="yes" xml:space="preserve">
          <source>BusinessHour.apply_index()</source>
          <target state="translated">BusinessHour.apply_index()</target>
        </trans-unit>
        <trans-unit id="17b2c5e8ddf99e7fe071c97d9a8b82cd4378f43f" translate="yes" xml:space="preserve">
          <source>BusinessHour.base</source>
          <target state="translated">BusinessHour.base</target>
        </trans-unit>
        <trans-unit id="75dc37b0eb9341c041399e7eabe82b274c143127" translate="yes" xml:space="preserve">
          <source>BusinessHour.copy()</source>
          <target state="translated">BusinessHour.copy()</target>
        </trans-unit>
        <trans-unit id="d263183636d8500111d6d82cb40f081c391a5d47" translate="yes" xml:space="preserve">
          <source>BusinessHour.freqstr</source>
          <target state="translated">BusinessHour.freqstr</target>
        </trans-unit>
        <trans-unit id="ceca3248d259c3aee4d1db08d3afbe9bbb3e84f4" translate="yes" xml:space="preserve">
          <source>BusinessHour.isAnchored()</source>
          <target state="translated">BusinessHour.isAnchored()</target>
        </trans-unit>
        <trans-unit id="b0843b8f2c969b86ac6714add264e8e139894df0" translate="yes" xml:space="preserve">
          <source>BusinessHour.kwds</source>
          <target state="translated">BusinessHour.kwds</target>
        </trans-unit>
        <trans-unit id="093ae334e4d42821d51b95f3ba26b69f76d74d85" translate="yes" xml:space="preserve">
          <source>BusinessHour.name</source>
          <target state="translated">BusinessHour.name</target>
        </trans-unit>
        <trans-unit id="f9c4af650f260c9e9458b14a2a49f150f81fc298" translate="yes" xml:space="preserve">
          <source>BusinessHour.nanos</source>
          <target state="translated">BusinessHour.nanos</target>
        </trans-unit>
        <trans-unit id="e2e401e4adbb05da8c7578950c105fc77a0b99b9" translate="yes" xml:space="preserve">
          <source>BusinessHour.next_bday</source>
          <target state="translated">BusinessHour.next_bday</target>
        </trans-unit>
        <trans-unit id="2f7bd7b25d02e873d0680c78918511cd2440449f" translate="yes" xml:space="preserve">
          <source>BusinessHour.normalize</source>
          <target state="translated">BusinessHour.normalize</target>
        </trans-unit>
        <trans-unit id="55997971d70ddc97c5beeb830b001c9df21fa78d" translate="yes" xml:space="preserve">
          <source>BusinessHour.offset</source>
          <target state="translated">BusinessHour.offset</target>
        </trans-unit>
        <trans-unit id="dad6a169f51729e4958f03975d08350bf374cf02" translate="yes" xml:space="preserve">
          <source>BusinessHour.onOffset()</source>
          <target state="translated">BusinessHour.onOffset()</target>
        </trans-unit>
        <trans-unit id="0f1337fc2d214aaab0b2421a34cbc6ed4eaecc32" translate="yes" xml:space="preserve">
          <source>BusinessHour.rollback()</source>
          <target state="translated">BusinessHour.rollback()</target>
        </trans-unit>
        <trans-unit id="ad049355ce9c6e01cc3f8af0705ba5f89802a8c6" translate="yes" xml:space="preserve">
          <source>BusinessHour.rollforward()</source>
          <target state="translated">BusinessHour.rollforward()</target>
        </trans-unit>
        <trans-unit id="09ddcc1eebde9bcefd98f26f30a3e6bab8899bfb" translate="yes" xml:space="preserve">
          <source>BusinessHour.rule_code</source>
          <target state="translated">BusinessHour.rule_code</target>
        </trans-unit>
        <trans-unit id="ecc54d8554088c18ea99f68a14aaaa510e545301" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin</source>
          <target state="translated">BusinessMonthBegin</target>
        </trans-unit>
        <trans-unit id="3b04d4046eee0f4b086e00dfbfbedaf41630d8b4" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.apply()</source>
          <target state="translated">BusinessMonthBegin.apply()</target>
        </trans-unit>
        <trans-unit id="8310d740e1145f6b64d5b06f9d600ac6a35c3589" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.apply_index()</source>
          <target state="translated">BusinessMonthBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="6a0e5007f04cdd6aaa2ad0f4605653f092b83de1" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.base</source>
          <target state="translated">BusinessMonthBegin.base</target>
        </trans-unit>
        <trans-unit id="0f8685980c4542c63d7ef33b50c4941d0085c380" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.copy()</source>
          <target state="translated">BusinessMonthBegin.copy()</target>
        </trans-unit>
        <trans-unit id="8a3933d048ae7b49d7cbffdea703f91c8304719d" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.freqstr</source>
          <target state="translated">BusinessMonthBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="eadc1660f6f37d65886533e8c836be0345125b10" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.isAnchored()</source>
          <target state="translated">BusinessMonthBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="8f775117e3d2d9b3d1e3ab3cb3607da50368f87c" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.kwds</source>
          <target state="translated">BusinessMonthBegin.kwds</target>
        </trans-unit>
        <trans-unit id="25feedbaa46b83106de019a064167e6717edaf20" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.name</source>
          <target state="translated">BusinessMonthBegin.name</target>
        </trans-unit>
        <trans-unit id="c13fcc7606515cf41c6193d5f9268db2440aa587" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.nanos</source>
          <target state="translated">BusinessMonthBegin.nanos</target>
        </trans-unit>
        <trans-unit id="f3f6922e73906e42d265ad23d7be0fa10860cd24" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.normalize</source>
          <target state="translated">BusinessMonthBegin.normalize</target>
        </trans-unit>
        <trans-unit id="3123b8822fd6578b6c8951bd627b4a686193e386" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.onOffset()</source>
          <target state="translated">BusinessMonthBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="4249607ebda76c678b5831b4130b4518ea76e802" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.rollback()</source>
          <target state="translated">BusinessMonthBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="83559ec26b3115ab310b5b7215ca3068027417ad" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.rollforward()</source>
          <target state="translated">BusinessMonthBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="c14d592ac07e12570c56e9e0a4bce9772e6b95ba" translate="yes" xml:space="preserve">
          <source>BusinessMonthBegin.rule_code</source>
          <target state="translated">BusinessMonthBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="b4d94da0e612d53d740022f4e81348ce5cd9b4c6" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd</source>
          <target state="translated">BusinessMonthEnd</target>
        </trans-unit>
        <trans-unit id="f63220872722e4b907275af8521ee956d0edbcb2" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.apply()</source>
          <target state="translated">BusinessMonthEnd.apply()</target>
        </trans-unit>
        <trans-unit id="93ff73d790246ceaa8e543c66dcf1d8aff2484a5" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.apply_index()</source>
          <target state="translated">BusinessMonthEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="1e2d33720bff64f9ce5ace35511e6d55cabd833a" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.base</source>
          <target state="translated">BusinessMonthEnd.base</target>
        </trans-unit>
        <trans-unit id="c34e5f5118ecb11f5ac666d8aaf7487a2ef3cdb6" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.copy()</source>
          <target state="translated">BusinessMonthEnd.copy()</target>
        </trans-unit>
        <trans-unit id="cf0d854810094b551c1ba7a1b81f5a3deac4adf7" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.freqstr</source>
          <target state="translated">BusinessMonthEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="2a1616dcf8cf64f9e012dd9fb6f5ba273076a5a8" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.isAnchored()</source>
          <target state="translated">BusinessMonthEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="37659218f13b60ddced35090ed6d7dcbb1446f98" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.kwds</source>
          <target state="translated">BusinessMonthEnd.kwds</target>
        </trans-unit>
        <trans-unit id="5d24f45ad31d4820f7d8a7f34217052eed864d6d" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.name</source>
          <target state="translated">BusinessMonthEnd.name</target>
        </trans-unit>
        <trans-unit id="417c600d94038d028f88e414d494d823c8e9cbee" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.nanos</source>
          <target state="translated">BusinessMonthEnd.nanos</target>
        </trans-unit>
        <trans-unit id="30bd20fe9d2c9130d0aaa8fec3ef25fc6a4c6959" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.normalize</source>
          <target state="translated">BusinessMonthEnd.normalize</target>
        </trans-unit>
        <trans-unit id="b8c6ec6758dc12908db900138a9c8a03623b682d" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.onOffset()</source>
          <target state="translated">BusinessMonthEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="ee0c230238853c8292a8516de8210849afef9c4a" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.rollback()</source>
          <target state="translated">BusinessMonthEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="71eb4f303d2a973a726a2a4a1cbe1cc2b6f5bb2d" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.rollforward()</source>
          <target state="translated">BusinessMonthEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="996e142c13feb8da325e4518c8e6af70549077a9" translate="yes" xml:space="preserve">
          <source>BusinessMonthEnd.rule_code</source>
          <target state="translated">BusinessMonthEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="c697f9d39b1dadd1220f166ecf34f2aabcb19b19" translate="yes" xml:space="preserve">
          <source>But clearly this isn&amp;rsquo;t fast enough for us. Let&amp;rsquo;s take a look and see where the time is spent during this operation (limited to the most time consuming four calls) using the &lt;a href=&quot;http://ipython.org/ipython-doc/stable/api/generated/IPython.core.magics.execution.html#IPython.core.magics.execution.ExecutionMagics.prun&quot;&gt;prun ipython magic function&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ba631a49a65341531cbcdb54e0dc6f8abdacf9" translate="yes" xml:space="preserve">
          <source>But it&amp;rsquo;s better to avoid applymap in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32938515c899eb3e4418b898186ca4a99f113a3d" translate="yes" xml:space="preserve">
          <source>But rather, use &lt;a href=&quot;../reference/api/pandas.series.to_numpy#pandas.Series.to_numpy&quot;&gt;&lt;code&gt;Series.to_numpy()&lt;/code&gt;&lt;/a&gt; to get the underlying &lt;code&gt;ndarray&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a15cce834d743eabb2d51100ec2353785344643" translate="yes" xml:space="preserve">
          <source>But suppose we wish to do time series operations with the variables. A better representation would be where the &lt;code&gt;columns&lt;/code&gt; are the unique variables and an &lt;code&gt;index&lt;/code&gt; of dates identifies individual observations. To reshape the data into this form, we use the &lt;a href=&quot;../reference/api/pandas.dataframe.pivot#pandas.DataFrame.pivot&quot;&gt;&lt;code&gt;DataFrame.pivot()&lt;/code&gt;&lt;/a&gt; method (also implemented as a top level function &lt;a href=&quot;../reference/api/pandas.pivot#pandas.pivot&quot;&gt;&lt;code&gt;pivot()&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3ad5d1ad065d8cbcaad955862729d89b418d02" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;group by&amp;rdquo; we are referring to a process involving one or more of the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39e1e6dfd224e52ae9e307f2bc2e41b31af593c" translate="yes" xml:space="preserve">
          <source>By converting an existing &lt;code&gt;Series&lt;/code&gt; or column to a &lt;code&gt;category&lt;/code&gt; dtype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01adc7e0359a60f85839ade2c482344c9e5154f2" translate="yes" xml:space="preserve">
          <source>By default (if you don&amp;rsquo;t specify &lt;code&gt;dtype&lt;/code&gt;), NumPy is used, and you&amp;rsquo;ll end up with a &lt;code&gt;float64&lt;/code&gt; dtype Series:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d06ecc791717f632c29fd787978c42dc76ae12" translate="yes" xml:space="preserve">
          <source>By default NaNs are put at the end, but use &lt;code&gt;na_position&lt;/code&gt; to place them at the beginning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c70123161ac84535dccfbf668ca0b92c905eacd" translate="yes" xml:space="preserve">
          <source>By default the display option is set to &lt;code&gt;True&lt;/code&gt; but can be explicitly overridden by passing the &lt;code&gt;memory_usage&lt;/code&gt; argument when invoking &lt;code&gt;df.info()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a1710309fea69365770112b6581fe169c63605" translate="yes" xml:space="preserve">
          <source>By default the keys of the dict become the DataFrame columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3309043dd87fc9cec057a0a1137b28733c920f79" translate="yes" xml:space="preserve">
          <source>By default we are taking the asof of the quotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8438416c9e7646bc0a30016edf1e39b53ee108" translate="yes" xml:space="preserve">
          <source>By default, NA values are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12265640338ad9cf4267b696443e1a968ed6d2a" translate="yes" xml:space="preserve">
          <source>By default, NA values in the Series are ignored. Using &lt;code&gt;na_rep&lt;/code&gt;, they can be given a representation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7909d660888d2baa10b3a5ae7e4bee9c5966e9d6" translate="yes" xml:space="preserve">
          <source>By default, astype always returns a newly allocated object. If copy is set to False and internal requirements on dtype are satisfied, the original data is used to create a new Index or the original Index is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca53cd02ae5e6785460debb4d4e721d53e196cb" translate="yes" xml:space="preserve">
          <source>By default, equal values are assigned a rank that is the average of the ranks of those values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40571deae9486030a562d81e703e1f060e8aa2ec" translate="yes" xml:space="preserve">
          <source>By default, for each set of duplicated values, the first occurrence is set on False and all others on True:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1dce940f1b44f893bdc84bf6ada06675ad9cca" translate="yes" xml:space="preserve">
          <source>By default, for each set of duplicated values, the first occurrence is set to False and all others to True:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418bbaae1a86eb20c86f38b29c4f75943e2f17bf" translate="yes" xml:space="preserve">
          <source>By default, in the abstract class, just the name of the type is expected. But subclasses can overwrite this method to accept parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0a73dc4ec5cad042a76c1dbba0ec1b82215198" translate="yes" xml:space="preserve">
          <source>By default, iterates over rows and finds the maximum in each column. This is equivalent to &lt;code&gt;axis=None&lt;/code&gt; or &lt;code&gt;axis='index'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a683de412412c0a4069a9b28f4f2d4f9007925" translate="yes" xml:space="preserve">
          <source>By default, iterates over rows and finds the minimum in each column. This is equivalent to &lt;code&gt;axis=None&lt;/code&gt; or &lt;code&gt;axis='index'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1639c50c70632a374cb66254268072a2e44ecf3f" translate="yes" xml:space="preserve">
          <source>By default, iterates over rows and finds the product in each column. This is equivalent to &lt;code&gt;axis=None&lt;/code&gt; or &lt;code&gt;axis='index'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a746c0b49750d2cc1f0c89dbd88b786bd37c49" translate="yes" xml:space="preserve">
          <source>By default, iterates over rows and finds the sum in each column. This is equivalent to &lt;code&gt;axis=None&lt;/code&gt; or &lt;code&gt;axis='index'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3c4f268b612e4471ac10cc8e294acd2a6a25b4" translate="yes" xml:space="preserve">
          <source>By default, missing values are not considered, and the mode of wings are both 0 and 2. The second row of species and legs contains &lt;code&gt;NaN&lt;/code&gt;, because they have only one mode, but the DataFrame has two rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e52d7c7e2f5d2c520080c806d06efc8cc199f24" translate="yes" xml:space="preserve">
          <source>By default, one of pandas CI workers will fail if any unhandled warnings are emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c9b91fa70430a08196d5ba84f8b25b9fc4bda6" translate="yes" xml:space="preserve">
          <source>By default, the dtype of the returned array will be the common NumPy dtype of all types in the DataFrame. For example, if the dtypes are &lt;code&gt;float16&lt;/code&gt; and &lt;code&gt;float32&lt;/code&gt;, the results dtype will be &lt;code&gt;float32&lt;/code&gt;. This may require copying data and coercing values, which may be expensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4344cd41a25db846a02c4310caf07c5e8513ef" translate="yes" xml:space="preserve">
          <source>By default, the original Index is reused. To enforce a new Index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47018e8a9cd3ef91ff4bfe5c9fcc40df02bc384c" translate="yes" xml:space="preserve">
          <source>By default, the product of an empty or all-NA Series is &lt;code&gt;1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6807fba437e846fc2074f6114e49c4eb4f95dacc" translate="yes" xml:space="preserve">
          <source>By default, the result is set to the right edge of the window. This can be changed to the center of the window by setting &lt;code&gt;center=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4950f54276bc162c3b0ceabccf06b7f030b5a3dd" translate="yes" xml:space="preserve">
          <source>By default, the resulting categories will be ordered as they appear in the &lt;code&gt;categories&lt;/code&gt; of the data. If you want the categories to be lexsorted, use &lt;code&gt;sort_categories=True&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb5d0ef37688aa89a58a81d6fcbe6d7ffceb008" translate="yes" xml:space="preserve">
          <source>By default, the sum of an empty or all-NA Series is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783253e721567d41f884456e70eb7dede1bc10aa" translate="yes" xml:space="preserve">
          <source>By default, the value will be read from the pandas config module. Use a longtable environment instead of tabular. Requires adding a usepackage{longtable} to your LaTeX preamble.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc677900402355f9692b17deb1174d6da56e2da" translate="yes" xml:space="preserve">
          <source>By default, the value will be read from the pandas config module. When set to False prevents from escaping latex special characters in column names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bf0086e76134d3690184f97f4373e0cfe1f064" translate="yes" xml:space="preserve">
          <source>By default, there are no operators defined for the class &lt;a href=&quot;../reference/api/pandas.api.extensions.extensionarray#pandas.api.extensions.ExtensionArray&quot;&gt;&lt;code&gt;ExtensionArray&lt;/code&gt;&lt;/a&gt;. There are two approaches for providing operator support for your ExtensionArray:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6952abece8099d0a47bebf623635c26a7f290c25" translate="yes" xml:space="preserve">
          <source>By far the majority of time is spend inside either &lt;code&gt;integrate_f&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt;, hence we&amp;rsquo;ll concentrate our efforts cythonizing these two functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7e2e9fdd8dbfa250ca1faea5939438c265fce9" translate="yes" xml:space="preserve">
          <source>By file-like object, we refer to objects with a &lt;code&gt;read()&lt;/code&gt; method, such as a file handler (e.g. via builtin &lt;code&gt;open&lt;/code&gt; function) or &lt;code&gt;StringIO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da19fce9010d081ce71581b34437339d2cb1482" translate="yes" xml:space="preserve">
          <source>By passing a &lt;a href=&quot;../reference/api/pandas.categorical#pandas.Categorical&quot;&gt;&lt;code&gt;pandas.Categorical&lt;/code&gt;&lt;/a&gt; object to a &lt;code&gt;Series&lt;/code&gt; or assigning it to a &lt;code&gt;DataFrame&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484bc1b8ece9e461bb4da908ce530988bbaad293" translate="yes" xml:space="preserve">
          <source>By providing an integer each column is rounded to the same number of decimal places</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0b56ec0e3cfa6b7e57d60c9bf585f543fb6126" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;start_time&lt;/code&gt; to be later than &lt;code&gt;end_time&lt;/code&gt;, you can get the times that are &lt;em&gt;not&lt;/em&gt; between the two times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cce3ac3bf5ce5bf0e24e43824e86a5c10c1b98" translate="yes" xml:space="preserve">
          <source>By setting keep on &lt;code&gt;False&lt;/code&gt;, all duplicates are True:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7a7a8a99a4192f750a5d020df3f30613f2dafe" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;index&lt;/code&gt; parameter to False we can remove the index as the first element of the tuple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bdd506e2fa5925823a80c867753c32e8ce9b72" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;dtype=&quot;category&quot;&lt;/code&gt; when constructing a &lt;code&gt;Series&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72beadb893edbb6dbeabe25aa68f9aed772d4415" translate="yes" xml:space="preserve">
          <source>By using &amp;lsquo;last&amp;rsquo;, the last occurrence of each set of duplicated values is set on False and all others on True:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe77e32b2efa939216c7aca9a6fdfa902b0ec8e" translate="yes" xml:space="preserve">
          <source>By using special functions, such as &lt;a href=&quot;../reference/api/pandas.cut#pandas.cut&quot;&gt;&lt;code&gt;cut()&lt;/code&gt;&lt;/a&gt;, which groups data into discrete bins. See the &lt;a href=&quot;reshaping#reshaping-tile-cut&quot;&gt;example on tiling&lt;/a&gt; in the docs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef860d8694959dcd3b3f5294cfe1a27b62827ecf" translate="yes" xml:space="preserve">
          <source>Byte-Ordering issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d804821e42ba00da4ea51832ca1627ebb8e32fc3" translate="yes" xml:space="preserve">
          <source>Bytes consumed by a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22afd5ad83b4943ef7a149feb3d6a97ab68e319" translate="yes" xml:space="preserve">
          <source>Bytes consumed by a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979cc06d8e05220bd40ab32450a5945bc1ca766b" translate="yes" xml:space="preserve">
          <source>Bytes of memory consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="d248e1897f1ef981f1dbf826833eb3bdd0f2002c" translate="yes" xml:space="preserve">
          <source>C (cpplint)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd50275cebf1e0d0a9a001828720ee71d19510c4" translate="yes" xml:space="preserve">
          <source>CBMonthBegin</source>
          <target state="translated">CBMonthBegin</target>
        </trans-unit>
        <trans-unit id="77314b7ad24fcacf554b1e85e13d43a0c742a765" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.apply()</source>
          <target state="translated">CBMonthBegin.apply()</target>
        </trans-unit>
        <trans-unit id="e52fa093754db7363a045cf724818a00c2ec3c04" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.apply_index()</source>
          <target state="translated">CBMonthBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="752361a98f257c5c4108068471fbfe972d25a065" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.base</source>
          <target state="translated">CBMonthBegin.base</target>
        </trans-unit>
        <trans-unit id="be5b06d5b3154c3b599013d5bec8a19738a1f743" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.cbday_roll</source>
          <target state="translated">CBMonthBegin.cbday_roll</target>
        </trans-unit>
        <trans-unit id="8df7ef3eb3c3c3a8aebb19bd5339cec8bb915337" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.copy()</source>
          <target state="translated">CBMonthBegin.copy()</target>
        </trans-unit>
        <trans-unit id="f4c935e3e78c344662e07b15a01f980ccaf1e206" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.freqstr</source>
          <target state="translated">CBMonthBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="ff343ef3708d2f97f26ae07585aeafe61881b64f" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.isAnchored()</source>
          <target state="translated">CBMonthBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="e5910e66d3cee3946eea76cefc4e785dd13f576d" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.kwds</source>
          <target state="translated">CBMonthBegin.kwds</target>
        </trans-unit>
        <trans-unit id="6dd50d5b382368371443c2ca16c45a6d040bcdae" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.m_offset</source>
          <target state="translated">CBMonthBegin.m_offset</target>
        </trans-unit>
        <trans-unit id="dfd80afbc6f7db3c8598695a4577fc2b2e0c28c5" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.month_roll</source>
          <target state="translated">CBMonthBegin.month_roll</target>
        </trans-unit>
        <trans-unit id="22bbca6df1edfbf8b14e4bf565d3656291920ae0" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.name</source>
          <target state="translated">CBMonthBegin.name</target>
        </trans-unit>
        <trans-unit id="d851c28bc711ea8cea5efd4d49c67e538c818d99" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.nanos</source>
          <target state="translated">CBMonthBegin.nanos</target>
        </trans-unit>
        <trans-unit id="79d6a8fc2610f5a0f8caa6e2708eeab049472494" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.normalize</source>
          <target state="translated">CBMonthBegin.normalize</target>
        </trans-unit>
        <trans-unit id="83cefe4ed97ac2c669974e9b5d9e8173c2ff173d" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.offset</source>
          <target state="translated">CBMonthBegin.offset</target>
        </trans-unit>
        <trans-unit id="4bffa90c943561b9c312b4cd2f433af248316007" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.onOffset()</source>
          <target state="translated">CBMonthBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="5bed58d831e7aa03d7d82698be8866f56235f6e6" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.rollback()</source>
          <target state="translated">CBMonthBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="67f5f6845ba3e4340567c2a634e26197430e99ed" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.rollforward()</source>
          <target state="translated">CBMonthBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="6a3d7c64b56e8e6ab4a6090d16ff2537383f40ab" translate="yes" xml:space="preserve">
          <source>CBMonthBegin.rule_code</source>
          <target state="translated">CBMonthBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="c77122e4538cdad5f41377ecb3b357d3fa3deb80" translate="yes" xml:space="preserve">
          <source>CBMonthEnd</source>
          <target state="translated">CBMonthEnd</target>
        </trans-unit>
        <trans-unit id="f39a686445564b8e2ff14986c41a57ae444ee4d9" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.apply()</source>
          <target state="translated">CBMonthEnd.apply()</target>
        </trans-unit>
        <trans-unit id="cb35aca995dec6219ccefb09aeb22860fa4f47ff" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.apply_index()</source>
          <target state="translated">CBMonthEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="a8359819693c2d617b5a724c8093e8fae6113356" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.base</source>
          <target state="translated">CBMonthEnd.base</target>
        </trans-unit>
        <trans-unit id="5a274c2c1cbc7f7a109212903746ed33d1e95e6e" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.cbday_roll</source>
          <target state="translated">CBMonthEnd.cbday_roll</target>
        </trans-unit>
        <trans-unit id="0fb5ac2e0c54cf424a331453140502196b892eed" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.copy()</source>
          <target state="translated">CBMonthEnd.copy()</target>
        </trans-unit>
        <trans-unit id="ae6ca3eab3b552d011c0f5e137fbf031af7f0437" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.freqstr</source>
          <target state="translated">CBMonthEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="545421d28f711fdbf618dcd31af5946cfc0c39f2" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.isAnchored()</source>
          <target state="translated">CBMonthEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="dd6522df4889a80b77691be240475aae857cd30f" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.kwds</source>
          <target state="translated">CBMonthEnd.kwds</target>
        </trans-unit>
        <trans-unit id="333b9de7045ba768c8bb1926fe74004ba86f3edc" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.m_offset</source>
          <target state="translated">CBMonthEnd.m_offset</target>
        </trans-unit>
        <trans-unit id="9b730695c3ba755a1b0e6570c1bf845615d918f3" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.month_roll</source>
          <target state="translated">CBMonthEnd.month_roll</target>
        </trans-unit>
        <trans-unit id="1b958f9e84e73d514cc92a78755a314816fc07e8" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.name</source>
          <target state="translated">CBMonthEnd.name</target>
        </trans-unit>
        <trans-unit id="0813e73972541105b10b8f6e7f0b8fa268431253" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.nanos</source>
          <target state="translated">CBMonthEnd.nanos</target>
        </trans-unit>
        <trans-unit id="197dda086a2ab80418236cb346b2470554272afc" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.normalize</source>
          <target state="translated">CBMonthEnd.normalize</target>
        </trans-unit>
        <trans-unit id="24249caa55e583123b6ef0891011c48c10cb5b43" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.offset</source>
          <target state="translated">CBMonthEnd.offset</target>
        </trans-unit>
        <trans-unit id="171753e7829a35df6ad9f764beca8f2076527339" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.onOffset()</source>
          <target state="translated">CBMonthEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="d0c5377e414fbd9eb91e7ed826182f7b477e3973" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.rollback()</source>
          <target state="translated">CBMonthEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="34e1afaf180fc00524d731b74031f4289e65dae6" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.rollforward()</source>
          <target state="translated">CBMonthEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="3477bfa987be5737e96ecd908b6b32ea1833a3b8" translate="yes" xml:space="preserve">
          <source>CBMonthEnd.rule_code</source>
          <target state="translated">CBMonthEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="0edd95404ab2003a5242069e0ba9233cc511db53" translate="yes" xml:space="preserve">
          <source>CDay</source>
          <target state="translated">CDay</target>
        </trans-unit>
        <trans-unit id="ccd03003c78be7580fefa52975897f8191ffcfca" translate="yes" xml:space="preserve">
          <source>CDay.apply()</source>
          <target state="translated">CDay.apply()</target>
        </trans-unit>
        <trans-unit id="b470978595d6e1c292c999dffa69b85b1d801534" translate="yes" xml:space="preserve">
          <source>CDay.apply_index()</source>
          <target state="translated">CDay.apply_index()</target>
        </trans-unit>
        <trans-unit id="251320c1201b002fa0c12c6f5761904f987e19da" translate="yes" xml:space="preserve">
          <source>CDay.base</source>
          <target state="translated">CDay.base</target>
        </trans-unit>
        <trans-unit id="909eaf36761b1da1e6183ebc68da39170364b6cc" translate="yes" xml:space="preserve">
          <source>CDay.copy()</source>
          <target state="translated">CDay.copy()</target>
        </trans-unit>
        <trans-unit id="4f1131cf3e0ce01669eb0b455907792764621989" translate="yes" xml:space="preserve">
          <source>CDay.freqstr</source>
          <target state="translated">CDay.freqstr</target>
        </trans-unit>
        <trans-unit id="b2a9682ba54c0f9c6b5b55638019aaeeaeec4f25" translate="yes" xml:space="preserve">
          <source>CDay.isAnchored()</source>
          <target state="translated">CDay.isAnchored()</target>
        </trans-unit>
        <trans-unit id="e547563390cac2bd9f0aeab25d109136678f5011" translate="yes" xml:space="preserve">
          <source>CDay.kwds</source>
          <target state="translated">CDay.kwds</target>
        </trans-unit>
        <trans-unit id="8a315575e630eb97654c6b2d472c351de06f9d18" translate="yes" xml:space="preserve">
          <source>CDay.name</source>
          <target state="translated">CDay.name</target>
        </trans-unit>
        <trans-unit id="7a90130b3ef5726c3fbbf57afac7dfbbb9643486" translate="yes" xml:space="preserve">
          <source>CDay.nanos</source>
          <target state="translated">CDay.nanos</target>
        </trans-unit>
        <trans-unit id="3d376ecf8b8df644741f59bd1fdedcd13568e628" translate="yes" xml:space="preserve">
          <source>CDay.normalize</source>
          <target state="translated">CDay.normalize</target>
        </trans-unit>
        <trans-unit id="242f378c192b8ba237d3682f7ce8e85a66300879" translate="yes" xml:space="preserve">
          <source>CDay.offset</source>
          <target state="translated">CDay.offset</target>
        </trans-unit>
        <trans-unit id="f801ef71ce0c88d51a58283222dbd727099d22b7" translate="yes" xml:space="preserve">
          <source>CDay.onOffset()</source>
          <target state="translated">CDay.onOffset()</target>
        </trans-unit>
        <trans-unit id="8b273063ddfeb00f3fbd6561dca6f8ed38547146" translate="yes" xml:space="preserve">
          <source>CDay.rollback()</source>
          <target state="translated">CDay.rollback()</target>
        </trans-unit>
        <trans-unit id="5c714e93c993d2b534ccf64051eb9749aef36a69" translate="yes" xml:space="preserve">
          <source>CDay.rollforward()</source>
          <target state="translated">CDay.rollforward()</target>
        </trans-unit>
        <trans-unit id="4a6a1ac178e6eb5cce7c58829139508d71d5d253" translate="yes" xml:space="preserve">
          <source>CDay.rule_code</source>
          <target state="translated">CDay.rule_code</target>
        </trans-unit>
        <trans-unit id="aac367e4df21201d2296d58ff096308fac8a2fb0" translate="yes" xml:space="preserve">
          <source>CLN: Code cleanup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b08eccd5042e525d0e617f3a848548d4c3357c" translate="yes" xml:space="preserve">
          <source>CSS class(es) to apply to the resulting html table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21444efa9494abd66434381371c755d1d31f0244" translate="yes" xml:space="preserve">
          <source>CSS classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4142c31f9ade153d88101f69671f6996dd2f0036" translate="yes" xml:space="preserve">
          <source>CSS classes are attached to the generated HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3281188351b89c8e2db28d6da7af4992d415de90" translate="yes" xml:space="preserve">
          <source>CSV</source>
          <target state="translated">CSV</target>
        </trans-unit>
        <trans-unit id="1cd2cecf23747420eb42a5ddd994b11118a8c1de" translate="yes" xml:space="preserve">
          <source>CSV &amp;amp; text files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ac1a43bfb669a0baeea979968eae0d8a36bd81" translate="yes" xml:space="preserve">
          <source>Calculate TimedeltaArray of difference between index values and index converted to PeriodArray at specified freq.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dec92724bea9c197938d6867a141e34292bb9ff" translate="yes" xml:space="preserve">
          <source>Calculate TimedeltaArray of difference between index values and index converted to PeriodArray at specified freq. Used for vectorized offsets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde74733c1f31ddd656c1cde0448ed456d768ed4" translate="yes" xml:space="preserve">
          <source>Calculate expanding correlation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af71107d6ea63e2dc273d016489e108b1b493b3" translate="yes" xml:space="preserve">
          <source>Calculate expanding standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360cd8f64bc341187c26f909121fea2f8941bf9e" translate="yes" xml:space="preserve">
          <source>Calculate expanding sum of given DataFrame or Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbfd75732f526f1460c8ce11d8b4958a0d20cd0" translate="yes" xml:space="preserve">
          <source>Calculate exponential power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfd95e8eecd4ead623d85fb6ced50f9877e17d6" translate="yes" xml:space="preserve">
          <source>Calculate its length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa636e61add750ce57ec7f6c8748ec75f2d60b3a" translate="yes" xml:space="preserve">
          <source>Calculate modulo (remainder after division).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300da0bcbdd41544d489526f5cac8618a2355bc7" translate="yes" xml:space="preserve">
          <source>Calculate pairwise combinations of columns within a DataFrame. If &lt;code&gt;other&lt;/code&gt; is not specified, defaults to &lt;code&gt;True&lt;/code&gt;, otherwise defaults to &lt;code&gt;False&lt;/code&gt;. Not relevant for &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840ddbfd478e8cf567a549418e380e3ddcc887e3" translate="yes" xml:space="preserve">
          <source>Calculate pct_change of each value to previous entry in group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f62b2b16cb4b434c58dea980f12708c03f13e5" translate="yes" xml:space="preserve">
          <source>Calculate rolling correlation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850f20e99de1936bda32ceeff70170b6406276a1" translate="yes" xml:space="preserve">
          <source>Calculate rolling standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f04ca990edc89de8494f94d3cb57d9fe234352" translate="yes" xml:space="preserve">
          <source>Calculate rolling sum of given DataFrame or Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c970e014af3ef2fbaa4a9f91c5c5a60993764d" translate="yes" xml:space="preserve">
          <source>Calculate slice bound that corresponds to given label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897a0bcc51e675340eb8de452d794c61bbe86ad4" translate="yes" xml:space="preserve">
          <source>Calculate the absolute value element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4085961c15d89a811239e096d578fa42188f4fb1" translate="yes" xml:space="preserve">
          <source>Calculate the expanding maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a13032e0ec1e2ec55a47ef780f2a8d8a8b246c9" translate="yes" xml:space="preserve">
          <source>Calculate the expanding mean of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8406bf60930113c031af4f23a867ce417712eee3" translate="yes" xml:space="preserve">
          <source>Calculate the expanding median.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c750dd6530f857067e77496ee393d943531bc6" translate="yes" xml:space="preserve">
          <source>Calculate the expanding minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b74859926373a8c97237bf6ba4212f83b6bfdd" translate="yes" xml:space="preserve">
          <source>Calculate the expanding quantile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c9a6f2667f67990f1ec55040b35c0ee42dbb4e" translate="yes" xml:space="preserve">
          <source>Calculate the expanding sample covariance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7c7f61b8473e791ed672a9771d92d89e9b853" translate="yes" xml:space="preserve">
          <source>Calculate the rolling maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f887c8ccbd530c971b5a68cbae83b79086bd95" translate="yes" xml:space="preserve">
          <source>Calculate the rolling mean of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e584dbbac651d0160592120f9ae199795f612ba" translate="yes" xml:space="preserve">
          <source>Calculate the rolling median.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d5f9af24012fcf43bbee8db6ac3031a2d5f0aa" translate="yes" xml:space="preserve">
          <source>Calculate the rolling minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00eabfef7ffbb75614ac3d3e272c17d70a5a64f" translate="yes" xml:space="preserve">
          <source>Calculate the rolling quantile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2658f86ca889438eede93a778ad39ed078d2de" translate="yes" xml:space="preserve">
          <source>Calculate the rolling sample covariance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad97d8d1c39809e78c3e237d0b6512d9b67a1cd" translate="yes" xml:space="preserve">
          <source>Calculate the window mean of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9d8c86d4c1d289a0acbebb41be6ce393f46d71" translate="yes" xml:space="preserve">
          <source>Calculate unbiased expanding kurtosis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fa4f8c9ad5717a24fc8615d7126266a8e4e0fe" translate="yes" xml:space="preserve">
          <source>Calculate unbiased expanding variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8772816555c47d2670666f6b36cd6cd7ebdfd55c" translate="yes" xml:space="preserve">
          <source>Calculate unbiased rolling kurtosis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5a9dc3b40f3101ec8c2b35747025814d6a2665" translate="yes" xml:space="preserve">
          <source>Calculate unbiased rolling variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee6592d4e67645efaff4667f77e78e210964e36" translate="yes" xml:space="preserve">
          <source>Calculate window sum of given DataFrame or Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4f0817d00f660a767de2d1e73b1708a0f418e8" translate="yes" xml:space="preserve">
          <source>Calculates the difference of a DataFrame element compared with another element in the DataFrame (default is the element in the same column of the previous row).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f697e36345c82dbbb291b1235a7bcfab769bbb7" translate="yes" xml:space="preserve">
          <source>Calculates the difference of a Series element compared with another element in the Series (default is element in previous row).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829008f6ad591390ea8eb6200bd65cb8bb7bf12e" translate="yes" xml:space="preserve">
          <source>Calendar to integrate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64af04d5ab99c3aa23103e7a2cc0bb2ba2f5888d" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;func&lt;/code&gt; on self producing a DataFrame with transformed values and that has the same axis length as self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec17e54a8e78ba4c5a96f25a2f55f7c4cc217ddc" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;func&lt;/code&gt; on self producing a Series with transformed values and that has the same axis length as self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb72433f4270083c8853ddb3da4a76c8207ea8f" translate="yes" xml:space="preserve">
          <source>Call function producing a like-indexed Series on each group and return a Series with the transformed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef266f410d282365eeaef6f6541415ad4d67585" translate="yes" xml:space="preserve">
          <source>Call self as a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e6f2e7fd9cfff2eadea78bb1e57630d5ca513c" translate="yes" xml:space="preserve">
          <source>Call with not arguments to get a listing for all registered options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55d13fa69e7f82c84df44c8c823d6b406b57e51" translate="yes" xml:space="preserve">
          <source>Callable that returns a boolean Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc9be9c9fa405052b15a51bb1a1ce89e7d70906" translate="yes" xml:space="preserve">
          <source>Callable[[Any], str]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d31314d01bb388db9ebbd2aee0dad743991a939" translate="yes" xml:space="preserve">
          <source>Caller.</source>
          <target state="translated">Caller.</target>
        </trans-unit>
        <trans-unit id="747d0e40b4d16bb8039df11373ff262c1de48eec" translate="yes" xml:space="preserve">
          <source>Calling a DataFrame&amp;rsquo;s &lt;a href=&quot;../reference/api/pandas.dataframe.plot.bar#pandas.DataFrame.plot.bar&quot;&gt;&lt;code&gt;plot.bar()&lt;/code&gt;&lt;/a&gt; method produces a multiple bar plot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4974f7b15c8997f459d81350abfb253b6a3d346b" translate="yes" xml:space="preserve">
          <source>Calling object with DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee2e652b90c42a69eda5f79342a0b1a333e012b" translate="yes" xml:space="preserve">
          <source>Calling object with Series data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4a54fa51f71d8e249d77ad8a0277a922b576da" translate="yes" xml:space="preserve">
          <source>Calling object with a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f908f58ee504c24947256630c6c1dce6269da91" translate="yes" xml:space="preserve">
          <source>Calling object with a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebb024ff35bea7821d88061d262e15bebf744bf" translate="yes" xml:space="preserve">
          <source>Calling object, as there is only one level in the Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab0de4c215386754c266357a84881160dda184f" translate="yes" xml:space="preserve">
          <source>Calling the DataFrame without the list of column names would display all columns (akin to SQL&amp;rsquo;s &lt;code&gt;*&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e074f4754f2dae3a164e7883eab76b93c18c9a" translate="yes" xml:space="preserve">
          <source>Calling this method does not change the ordering of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d68a3863769d405d2d9edfaa0dde04b6102a30a" translate="yes" xml:space="preserve">
          <source>Can also add a layer of hierarchical indexing on the concatenation axis, which may be useful if the labels are the same (or overlapping) on the passed axis number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5919c621028ad19e82becc9a3bb5215ebce7eb4" translate="yes" xml:space="preserve">
          <source>Can be &amp;ldquo;&amp;gt;&amp;rdquo;, &amp;ldquo;&amp;lt;&amp;rdquo;, &amp;ldquo;little&amp;rdquo;, or &amp;ldquo;big&amp;rdquo;. default is &lt;code&gt;sys.byteorder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3c9ad081211024fca4d3eb6a9219ec67535ab9" translate="yes" xml:space="preserve">
          <source>Can be any valid input to groupby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4283d456b8e46842ad260f227901d59c9c21e50" translate="yes" xml:space="preserve">
          <source>Can be applied to a second style with &lt;code&gt;Styler.use&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aca382222f840171413dec4e13d7f9683e7b728" translate="yes" xml:space="preserve">
          <source>Can be ufunc (a NumPy function that applies to the entire Series) or a Python function that only works on single values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a844d92fe4d043fa4adb5ec6a8fd4daeedba6f7" translate="yes" xml:space="preserve">
          <source>Can choose to replace values other than NA. Return True for values that should be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b464d81361cebd15b5a778a02ad6759080a317" translate="yes" xml:space="preserve">
          <source>Can evaluate an expression or function to create new values for a column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a38a967680be46b805ca59a37a68e56e0128428" translate="yes" xml:space="preserve">
          <source>Cannot be set if &lt;code&gt;pat&lt;/code&gt; is a compiled regex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18357ac154b52d09a4800eac362a21679c4a9c27" translate="yes" xml:space="preserve">
          <source>Cannot be set to False if &lt;code&gt;pat&lt;/code&gt; is a compiled regex or &lt;code&gt;repl&lt;/code&gt; is a callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1201f5be65e0b58542aaf0a90394b6f142fa1fdc" translate="yes" xml:space="preserve">
          <source>Captions</source>
          <target state="translated">Captions</target>
        </trans-unit>
        <trans-unit id="eaad57de04203ff12d8e6b908882f8cdb382e2bf" translate="yes" xml:space="preserve">
          <source>Capture group names are used for column names of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd48dc81ac51ede2775f66c3afe277ea32fa170f" translate="yes" xml:space="preserve">
          <source>Cast a numpy array to a specified type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afe62d80f9ae3682ad4518813aa5e7b262d3ae9" translate="yes" xml:space="preserve">
          <source>Cast a pandas object to a specified dtype &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78c90568308a9135347c4d827e900aa8183c86f" translate="yes" xml:space="preserve">
          <source>Cast all columns to int32:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90996126ba85ca200dc1a975fde0e43153df3134" translate="yes" xml:space="preserve">
          <source>Cast argument to a specified dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3396252038d98a6a09fc0a5da74a8c2ca78fb94b" translate="yes" xml:space="preserve">
          <source>Cast col1 to int32 using a dictionary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f134c1795b16936f211817a0716ac33c86717fbd" translate="yes" xml:space="preserve">
          <source>Cast index labels to a different type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4955fa99651a21d032c65acbbb0b2d0d394eef" translate="yes" xml:space="preserve">
          <source>Cast to DatetimeArray/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a35ea3e433645048284145bb0f9f063bec2576a" translate="yes" xml:space="preserve">
          <source>Cast to DatetimeIndex of Timestamps, at &lt;em&gt;beginning&lt;/em&gt; of period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb88a879f730800091a568064ba604663179f10f" translate="yes" xml:space="preserve">
          <source>Cast to DatetimeIndex of timestamps, at &lt;em&gt;beginning&lt;/em&gt; of period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919bd6cbab254b7def740b5d6fbffb81a6d4c2bf" translate="yes" xml:space="preserve">
          <source>Cast to PeriodArray/Index at a particular frequency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2540a54a523dac3fc5ab168d60f203efda48fb82" translate="yes" xml:space="preserve">
          <source>Cast to a NumPy array with &amp;lsquo;dtype&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8528ae94e2e148afb1dc7ce9973ecc62392671c1" translate="yes" xml:space="preserve">
          <source>Categorical</source>
          <target state="translated">Categorical</target>
        </trans-unit>
        <trans-unit id="b6c0e85b6e1038f0193aeaf324e427617c7aa526" translate="yes" xml:space="preserve">
          <source>Categorical : when the input is a Categorical dtype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db2cf1f98b2571e6cd3afec358ae7e56af5c5b4" translate="yes" xml:space="preserve">
          <source>Categorical &lt;code&gt;Series&lt;/code&gt; or columns in a &lt;code&gt;DataFrame&lt;/code&gt; can be created in several ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f551e258210d980d4f7d3ad8ad3ef24cbf7011aa" translate="yes" xml:space="preserve">
          <source>Categorical accessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1d455769f1a79e43b75ac1eff2ba880612d5f4" translate="yes" xml:space="preserve">
          <source>Categorical components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65644ced85eb53271f5518bd55233d23dc99918f" translate="yes" xml:space="preserve">
          <source>Categorical data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d6cdafff3fc1da5d0931715fd4f855fa672756" translate="yes" xml:space="preserve">
          <source>Categorical data can be stored in a &lt;a href=&quot;api/pandas.categorical#pandas.Categorical&quot;&gt;&lt;code&gt;pandas.Categorical&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33c43d6eb71e2e4b34c3ec86e32d5202d00541c" translate="yes" xml:space="preserve">
          <source>Categorical data has a specific &lt;code&gt;category&lt;/code&gt;&lt;a href=&quot;../getting_started/basics#basics-dtypes&quot;&gt;dtype&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491163921e6191ccb53eb4db02988471d04ad6ca" translate="yes" xml:space="preserve">
          <source>Categorical label contains more than 32,000 characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd90a498e42dc2f0680e4bd847b44d1af00ce2b" translate="yes" xml:space="preserve">
          <source>Categorical with reordered categories or None if inplace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7fc16052b6e3846ce87315fd3a672bfcb7f9b1" translate="yes" xml:space="preserve">
          <source>Categorical()</source>
          <target state="translated">Categorical()</target>
        </trans-unit>
        <trans-unit id="1394f5c3380caf0dd8d74771b41257faf3596ce1" translate="yes" xml:space="preserve">
          <source>Categorical-dtype specific methods and attributes are available under the &lt;code&gt;Series.cat&lt;/code&gt; accessor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0d2f1a806c404f4d559514b89f48083f9d193d" translate="yes" xml:space="preserve">
          <source>Categorical.__array__()</source>
          <target state="translated">Categorical.__array__()</target>
        </trans-unit>
        <trans-unit id="e5bfe1ba592c8308c10b368c5366a52c1abbc641" translate="yes" xml:space="preserve">
          <source>Categorical.categories</source>
          <target state="translated">Categorical.categories</target>
        </trans-unit>
        <trans-unit id="65b67237a2d8a8dc5d769e16d4c1a18fa721763e" translate="yes" xml:space="preserve">
          <source>Categorical.codes</source>
          <target state="translated">Categorical.codes</target>
        </trans-unit>
        <trans-unit id="50d64782ecc617772b51a0f12a3a0bdcaabe17c1" translate="yes" xml:space="preserve">
          <source>Categorical.dtype</source>
          <target state="translated">Categorical.dtype</target>
        </trans-unit>
        <trans-unit id="696b10a3829c28bae2e28b2c055e4203f716754b" translate="yes" xml:space="preserve">
          <source>Categorical.from_codes()</source>
          <target state="translated">Categorical.from_codes()</target>
        </trans-unit>
        <trans-unit id="e86cdad0b5d5ce67f3ac07f2bb694ace1c428acd" translate="yes" xml:space="preserve">
          <source>Categorical.ordered</source>
          <target state="translated">Categorical.ordered</target>
        </trans-unit>
        <trans-unit id="7bf923a9b309df1570f3eae0d18eb6349ca22527" translate="yes" xml:space="preserve">
          <source>Categorical: &lt;code&gt;'categorical'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b70053f969e0425da037b442dcf24227286d85f" translate="yes" xml:space="preserve">
          <source>CategoricalDtype</source>
          <target state="translated">CategoricalDtype</target>
        </trans-unit>
        <trans-unit id="c4035a91edeb10313ddd45340ece7cd7954d76e0" translate="yes" xml:space="preserve">
          <source>CategoricalDtype()</source>
          <target state="translated">CategoricalDtype()</target>
        </trans-unit>
        <trans-unit id="c169a4bff5395ea24ffc600e37c2644bb8fc0508" translate="yes" xml:space="preserve">
          <source>CategoricalDtype.categories</source>
          <target state="translated">CategoricalDtype.categories</target>
        </trans-unit>
        <trans-unit id="f59c0d1c108467a32cbc26cc8dd83280810b949e" translate="yes" xml:space="preserve">
          <source>CategoricalDtype.ordered</source>
          <target state="translated">CategoricalDtype.ordered</target>
        </trans-unit>
        <trans-unit id="bfddf732e2e8da032626c8952317e320dfe0372f" translate="yes" xml:space="preserve">
          <source>CategoricalIndex</source>
          <target state="translated">CategoricalIndex</target>
        </trans-unit>
        <trans-unit id="15bec1bea4e1a753bad82ce87a7c9c7a32ef767c" translate="yes" xml:space="preserve">
          <source>CategoricalIndex, like Categorical, can only take on a limited, and usually fixed, number of possible values (&lt;code&gt;categories&lt;/code&gt;). Also, like Categorical, it might have an order, but numerical operations (additions, divisions, &amp;hellip;) are not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38accf3e9af13df9f5a6bae403b50a85984e0470" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.add_categories()</source>
          <target state="translated">CategoricalIndex.add_categories()</target>
        </trans-unit>
        <trans-unit id="cb65a60124086f38594e9292efeb5b732ef5ec90" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.as_ordered()</source>
          <target state="translated">CategoricalIndex.as_ordered()</target>
        </trans-unit>
        <trans-unit id="512b6d0f45c49486470124cbeb418be60f404666" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.as_unordered()</source>
          <target state="translated">CategoricalIndex.as_unordered()</target>
        </trans-unit>
        <trans-unit id="e6faa723a554f4ee548a737fea2fb53c31683991" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.categories</source>
          <target state="translated">CategoricalIndex.categories</target>
        </trans-unit>
        <trans-unit id="8de4660dd15a299de760d4693058c84ef82ed3e7" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.codes</source>
          <target state="translated">CategoricalIndex.codes</target>
        </trans-unit>
        <trans-unit id="ff8326c1c76fac87bf0bd3f8d61842283ce04f52" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.equals()</source>
          <target state="translated">CategoricalIndex.equals()</target>
        </trans-unit>
        <trans-unit id="4be64d83fb38ec32992b493650712a6c0b62321c" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.map()</source>
          <target state="translated">CategoricalIndex.map()</target>
        </trans-unit>
        <trans-unit id="58616d7ca9004ae58e42cb0841d937d78a9497ed" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.ordered</source>
          <target state="translated">CategoricalIndex.ordered</target>
        </trans-unit>
        <trans-unit id="c6a41d37914b0066660abd9a5f234575d596d36f" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.remove_categories()</source>
          <target state="translated">CategoricalIndex.remove_categories()</target>
        </trans-unit>
        <trans-unit id="524eed6b5e64fce4d3531d330316a70082136865" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.remove_unused_categories()</source>
          <target state="translated">CategoricalIndex.remove_unused_categories()</target>
        </trans-unit>
        <trans-unit id="399d84c91470553483855a192e542eb27665e59c" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.rename_categories()</source>
          <target state="translated">CategoricalIndex.rename_categories()</target>
        </trans-unit>
        <trans-unit id="59116a78cfd982f30ed3d807915d4564bbd4a6bf" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.reorder_categories()</source>
          <target state="translated">CategoricalIndex.reorder_categories()</target>
        </trans-unit>
        <trans-unit id="3938a97297f1dba58dfcb5ec86c69fa97fbb5b5b" translate="yes" xml:space="preserve">
          <source>CategoricalIndex.set_categories()</source>
          <target state="translated">CategoricalIndex.set_categories()</target>
        </trans-unit>
        <trans-unit id="a0534b3f2baeebdb3d2286bd11b172d3f2c06b68" translate="yes" xml:space="preserve">
          <source>CategoricalIndex[source]</source>
          <target state="translated">CategoricalIndex[source]</target>
        </trans-unit>
        <trans-unit id="161cfb6c94ad896f7c62eb5191a55e93c3999706" translate="yes" xml:space="preserve">
          <source>Categoricals</source>
          <target state="translated">Categoricals</target>
        </trans-unit>
        <trans-unit id="1ed01c86e796cbda0d6b958d180fb6f694902476" translate="yes" xml:space="preserve">
          <source>Categoricals are converted to the &lt;code&gt;any&lt;/code&gt; dtype, and use the &lt;code&gt;enum&lt;/code&gt; field constraint to list the allowed values. The &lt;code&gt;ordered&lt;/code&gt; attribute is included in an &lt;code&gt;ordered&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90263e43a38312ed28ebfdec47ac8bb0c8c873a1" translate="yes" xml:space="preserve">
          <source>Categoricals, Series Categoricals, and CategoricalIndex will return True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="ac3af4138153ad8e38e0d1ce5646fe9280cb0421" translate="yes" xml:space="preserve">
          <source>Ceil the datetimes to the specified freq.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fb92f4b9e3df25b7fe429f380d809d48b75997" translate="yes" xml:space="preserve">
          <source>Centos/RHEL</source>
          <target state="translated">Centos/RHEL</target>
        </trans-unit>
        <trans-unit id="0d0fe8e2c6ff650f6e9a90847e93d198dc63ecf5" translate="yes" xml:space="preserve">
          <source>Certain CSS classes are attached to cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7037199ad500ec96495b9e7a2438dcb0225eec3b" translate="yes" xml:space="preserve">
          <source>Change the column labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008b900ba91ff9a0b55940bff1034784d5777f3b" translate="yes" xml:space="preserve">
          <source>Change the row labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837505c509149956d526b441b15a8c96da6c2e7c" translate="yes" xml:space="preserve">
          <source>Change to new indices or expand indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206e10200054a5a57acc1ee0bf60a3d98a112564" translate="yes" xml:space="preserve">
          <source>Change to same indices as other DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbeb0a3fe895d6a9f984844e6c66df99915fb12a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.18.1: The indexes &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are now optional, and default to the two innermost levels of the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c2c66ebc3382ede19136b4b95bb85524d58327" translate="yes" xml:space="preserve">
          <source>Changed in version 0.20.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33001e47334bc8a02c531d674b04787760dc5bd4" translate="yes" xml:space="preserve">
          <source>Changed in version 0.20.2: Added to Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3245c37b6c52925c02ca0e9361157c3b852560" translate="yes" xml:space="preserve">
          <source>Changed in version 0.21.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce703c7a7fce52d2e6703cb81db23fc330c50da" translate="yes" xml:space="preserve">
          <source>Changed in version 0.21.0: The signature is now &lt;code&gt;labels&lt;/code&gt; and &lt;code&gt;axis&lt;/code&gt;, consistent with the rest of pandas API. Previously, the &lt;code&gt;axis&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; arguments were respectively the first and second positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b421673cd24de334ffaea2cd5557c532f8961eb" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084cf3f554150223efb6069845b2dc8384d3c96a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: Added to DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcc516ffb07f8140563479f71bbe2a4f79d7231" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: Allow specifying index or column level names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b845776a5c57156d68f932019cdd8d028eaf4f" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: Also accept list of column names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82698cae7b61ab9bc31a2cabc9cba30a8aebfd11" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: If data is a dict, argument order is maintained for Python 3.6 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912e1a95563868f1e0b3e4cb758352e453ce5c22" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: If data is a dict, column order follows insertion-order for Python 3.6 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb8c36dda45eaf315ac40aa500b2aa8f306e4a7" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: Keyword argument order is maintained for Python 3.6 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4a0dffc96f0e2500fb92ae0d80f73a41dd08a3" translate="yes" xml:space="preserve">
          <source>Changed in version 0.23.0: When all suffixes are numeric, they are cast to int64/float64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98d2109973444872a56dc70a77421e6def265f8" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99411dc3bcede54f350f83df2b55cdc70d8b05ce" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: &amp;lsquo;infer&amp;rsquo; option added and set to default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea22f8671fdd8255be2e914531207123a01f31a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: &amp;lsquo;infer&amp;rsquo; option added and set to default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7150fa91a2c2bd8532e0e61931195c4eeeb1bc9d" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: &lt;code&gt;MultiIndex.labels&lt;/code&gt; has been renamed to &lt;a href=&quot;../reference/api/pandas.multiindex.codes#pandas.MultiIndex.codes&quot;&gt;&lt;code&gt;MultiIndex.codes&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;MultiIndex.set_labels&lt;/code&gt; to &lt;a href=&quot;../reference/api/pandas.multiindex.set_codes#pandas.MultiIndex.set_codes&quot;&gt;&lt;code&gt;MultiIndex.set_codes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28490e78948df3eb2c2a9f5965d8036de1611037" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: Added &lt;code&gt;_metadata&lt;/code&gt;, &lt;code&gt;__hash__&lt;/code&gt;, and changed the default definition of &lt;code&gt;__eq__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720067ab1623a9f3427803dd74907bd39496c391" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: Changed from &lt;code&gt;raise_conflict=False|True&lt;/code&gt; to &lt;code&gt;errors=&amp;rsquo;ignore&amp;rsquo;|&amp;rsquo;raise&amp;rsquo;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fea6a9ea83f8e4a1291625b77dc68d5d330858" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: If &lt;code&gt;value&lt;/code&gt; is a scalar, an int is now always returned. Previously, scalar inputs returned an 1-item array for &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pandas.categorical#pandas.Categorical&quot;&gt;&lt;code&gt;Categorical&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9ce4e4b70fa212a20aceda0ef72dff8d44c2c1" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: Implements the ExtensionArray interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4225a91766ace5a8fb3c43837d602376d3a1e8" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: Previously defaulted to False for Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5ea37559924b996ad9ff2202c6cf8af5c7ff0f" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered as integer by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fc91a3a0fbe0f19baab714efc6b848f330dabf" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also considered as integer by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c718a7d3953410fc92ff604658f8df865545681f" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: The order of arguments for Series was changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e82c07acc46c85a594ffc35149b045a5df73d3c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.0: Was previously named &amp;ldquo;path&amp;rdquo; for Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3888991224126878360fb3932d668b709a5e3d1a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.1: Changed the default from &lt;code&gt;True&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;, to match the behaviour of 0.23.4 and earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe4eac8dadfd1b2fc2b7e61d8b974893dc7b061" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24.1: Changed the default value from &lt;code&gt;True&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt; (without change in behaviour).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab0fdfcfa67bc5e63566e4af00dad5d043e2311" translate="yes" xml:space="preserve">
          <source>Changed in version 0.24: The default value will change to True in a future release. You can set &lt;code&gt;keep_tz=True&lt;/code&gt; to already obtain the future behaviour and silence the warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f50020c9a2c8baccfa67bb7a58e115ccfa9853" translate="yes" xml:space="preserve">
          <source>Changed in version 0.25.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29be402fec15411d3a9e8185cfe9dc0f86d2af6e" translate="yes" xml:space="preserve">
          <source>Changed in version 0.25.0: - changed default value from False to True</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee6ab432d39a641442ccadd898e4052d1ff1e6c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.25.0: If data is a list of dicts, column order follows insertion-order Python 3.6 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17077b41abfcbfc66f9add222d6d0e9f9e8b2f4a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.25.0: Not applicable for &lt;code&gt;orient='table'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d22c4da38adf1427f54e403e63a3f5a76444ab" translate="yes" xml:space="preserve">
          <source>Changed row labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3beccd61efb517aef7e6e6f017e36caf765b0cbf" translate="yes" xml:space="preserve">
          <source>Changed the &lt;code&gt;freq&lt;/code&gt; (frequency) to &lt;code&gt;'M'&lt;/code&gt; (month end frequency).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77481949bf33cc7e4ab2f3dd8b681bd8474a5cd" translate="yes" xml:space="preserve">
          <source>Changes should be reflected in the release notes located in &lt;code&gt;doc/source/whatsnew/vx.y.z.rst&lt;/code&gt;. This file contains an ongoing change log for each release. Add an entry to this file to document your fix, enhancement or (unavoidable) breaking change. Make sure to include the GitHub issue number when adding your entry (using &lt;code&gt;:issue:`1234`&lt;/code&gt; where &lt;code&gt;1234&lt;/code&gt; is the issue/pull request number).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d73749c6bfd63c1d7900d5d7982aaf76d69e62e" translate="yes" xml:space="preserve">
          <source>Character recognized as decimal separator, e.g. &amp;lsquo;,&amp;rsquo; in Europe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c1a97e6eee24429fdeafb4836d3e9bf20c5114" translate="yes" xml:space="preserve">
          <source>Character recognized as decimal separator. E.g. use &amp;lsquo;,&amp;rsquo; for European data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292095e13df2678c32b3907fb0f314d5d6b86b80" translate="yes" xml:space="preserve">
          <source>Character sequence or regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c2245afb0246ad2f05ac3b8ddc9195cab546fe" translate="yes" xml:space="preserve">
          <source>Character sequence. Regular expressions are not accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c442e48cc95608724d7a3e9cbcd4844dad58282" translate="yes" xml:space="preserve">
          <source>Character to break file into lines. Only valid with C parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874b5fde9e6bbaafd680af9aee0c45cd8ee41fba" translate="yes" xml:space="preserve">
          <source>Character to recognize as decimal point (e.g. use &amp;lsquo;,&amp;rsquo; for European data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa71568ee2ce7a4e1f5e0cbe3d2387f57188a782" translate="yes" xml:space="preserve">
          <source>Check DataFrame equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcd92e73328e4d256314c87f53bafb7c98e5f06" translate="yes" xml:space="preserve">
          <source>Check an IntervalIndex elementwise for overlaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793e282e73a4bee58ce712b89322d8d91b5f3709" translate="yes" xml:space="preserve">
          <source>Check elementwise if an Interval overlaps the values in the IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bda1b4a85b76faf926045de0a31bf9d5405d65" translate="yes" xml:space="preserve">
          <source>Check elementwise if an Interval overlaps the values in the IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e287b02af27047967b4228fe01a2d3589a53fd25" translate="yes" xml:space="preserve">
          <source>Check elementwise if the Intervals contain the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ad628475120b051f6a640fa2ad5af99110c9b4" translate="yes" xml:space="preserve">
          <source>Check for rows with the same id but conflicting values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb38c6c0333a2676c7bec3a1611c0d100fb4dfb" translate="yes" xml:space="preserve">
          <source>Check if an Interval overlaps the values in the IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3168f67f506d19fb377bc57184685946949f7a7" translate="yes" xml:space="preserve">
          <source>Check if an Interval overlaps the values in the IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf57698a72fd98282021615477c9194e98bd5d73" translate="yes" xml:space="preserve">
          <source>Check if an object is a pandas extension array type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234bbfcf5944339da525b5a12922ba4cd0fce974" translate="yes" xml:space="preserve">
          <source>Check if the Index holds categorical data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c54430d4f68615aafb6713ee0b87b2995373a5" translate="yes" xml:space="preserve">
          <source>Check if the interval is closed on the left side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b175f7a5a08cb90ff97fbebf3c170fcca38832" translate="yes" xml:space="preserve">
          <source>Check if the interval is closed on the right side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0317d82798ab05e4a35c19c4f9d5e1e3a54bc7bd" translate="yes" xml:space="preserve">
          <source>Check if the interval is open on the left side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5a9c355e46c11d3fd68f54833fca7d385a69f0" translate="yes" xml:space="preserve">
          <source>Check if the interval is open on the right side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a2f717cba92d98622889652332bf86e19ab23e" translate="yes" xml:space="preserve">
          <source>Check if the object can be compiled into a regex pattern instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91cacfeda721c0e8e0d6a083bf9544103650bc0" translate="yes" xml:space="preserve">
          <source>Check if the object is a file-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7702507808f01d330621c833605f10524c6cc4" translate="yes" xml:space="preserve">
          <source>Check if the object is a named tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1f7392914d461214724d8979979eab70dd89a5" translate="yes" xml:space="preserve">
          <source>Check if the object is a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7c7e47b42683ba5d6c0994ce9537bf55178667" translate="yes" xml:space="preserve">
          <source>Check if the object is a regex pattern instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aa5f3d7f125219e95148d4c42e0cbae808a5f9" translate="yes" xml:space="preserve">
          <source>Check if the object is an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b0a34d1cd153e21a3047ae99357899de4ed38" translate="yes" xml:space="preserve">
          <source>Check if the object is dict-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76978ffe6ba6a6218cf8e9191aaa0bdab8ac6cfe" translate="yes" xml:space="preserve">
          <source>Check if the object is list-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9971fc2975c8526324319cef755f76cccc824cd7" translate="yes" xml:space="preserve">
          <source>Check if we match &amp;lsquo;dtype&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea13b76442ad30e2a1173139e4b39430cbf49106" translate="yes" xml:space="preserve">
          <source>Check that left and right DataFrame are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c292f7053a3a261f18758c8e65b065a466f69bb7" translate="yes" xml:space="preserve">
          <source>Check that left and right Index are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b4066706ad82c7d6dd3c9701a6300bfe86ecd3" translate="yes" xml:space="preserve">
          <source>Check that left and right Series are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302b31da76dca2b0d57acabfed93338bb8685592" translate="yes" xml:space="preserve">
          <source>Check that the levels/codes are consistent and valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4c15fc3e5aaa706e62a26e94c68c24e1a41405" translate="yes" xml:space="preserve">
          <source>Check that the one-dimensional array-like is a pandas sparse array. Returns True if it is a pandas sparse array, not another type of sparse array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e5aaa69b157f39ff2599b910aa39d90a73354a" translate="yes" xml:space="preserve">
          <source>Check the new index for duplicates. Otherwise defer the check until necessary. Setting to False will improve the performance of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2a2471a6a566e61618eb4f8c593d65203c5a8b" translate="yes" xml:space="preserve">
          <source>Check whether &lt;code&gt;values&lt;/code&gt; are contained in Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09493c3c382a24ed55f8268b9d81751660da6327" translate="yes" xml:space="preserve">
          <source>Check whether Interval object contains value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237d10d1740a6578c83db435b00d2d08316cdbd0" translate="yes" xml:space="preserve">
          <source>Check whether all characters are alphabetic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad313f1adff210d5d716f374a49c7aa2bc7608c" translate="yes" xml:space="preserve">
          <source>Check whether all characters are alphanumeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98415c660281b5c8df0a34b144de57093ca7d253" translate="yes" xml:space="preserve">
          <source>Check whether all characters are decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1164a5bfed2b9819335c700aaed9336cd1b96b" translate="yes" xml:space="preserve">
          <source>Check whether all characters are digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b579a193cbde79715bbf0d3f2380ecc3eb31f055" translate="yes" xml:space="preserve">
          <source>Check whether all characters are lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a7498ad37546bf23e962d0f120c92f45795eff" translate="yes" xml:space="preserve">
          <source>Check whether all characters are numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd225329df24a4c0c0ffaea6f72ab4e5a7f16b1" translate="yes" xml:space="preserve">
          <source>Check whether all characters are titlecase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4940c380a4429b8c13aed78a5b8158648320776f" translate="yes" xml:space="preserve">
          <source>Check whether all characters are uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fb99bcf29a72510e3abf709997b647a849ccfc" translate="yes" xml:space="preserve">
          <source>Check whether all characters are whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010f0c4bdfa69ef3540e75aedc2f3975e7ee0915" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are alphabetic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab75270c70425ffb242d9540bfc1e44b967ae02" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are alphanumeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acb8b8b734806ae33a315d2d3fe55786abeaad3" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ff18a9ec9f462bc3f2fcb82a7296e05da32d78" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a529540dbbe68c2451c36ec126f4ef33256dba70" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9ca672d17253cb2c06e2e9a47f3fb3fa69f573" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9aad64f85039b3481ec800b213c952b0b23f75" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are titlecase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c873dfbf5f1a9fb523ce97369e1be519d4e06e57" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35042b9e76c7e26be3adab76aeccfc273a198920" translate="yes" xml:space="preserve">
          <source>Check whether all characters in each string are whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d25873929c31470d50ab07ab6d75a8724c6d94d" translate="yes" xml:space="preserve">
          <source>Check whether an array-like is a 1-D pandas sparse array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3229a6475628aa0f209dd552337b3806265a09a" translate="yes" xml:space="preserve">
          <source>Check whether an array-like is a Categorical instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165718a60ace751298340feceac46aa006938691" translate="yes" xml:space="preserve">
          <source>Check whether an array-like is a datetime array-like with a timezone component in its dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1283ebe5aed5c45f976474c743e736ddd46b674b" translate="yes" xml:space="preserve">
          <source>Check whether an array-like is a periodical index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2504f40c0792ae6cb0684acd3c9dd4827d5adfba" translate="yes" xml:space="preserve">
          <source>Check whether an array-like is of a pandas extension class instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6a25d95c575a90849ff554ef4c76597a2b1a82" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of a DatetimeTZDtype dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659f2da1abd38d35649bd09f2a51575f159738a8" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of the Categorical dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c97f0b5e5d1acfb9aa47702c8f20c807265b31" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of the Interval dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb6890367328206d082d0d8d0e1baa143fe03d9" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of the Period dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248f73701915ee63b617b29442ef80b4383b536c" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of the datetime64 dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c2965a58d5a0b38a510ce804e4e7262df09b82" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of the object dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ac9965a5724206755cd47c8ad57176adb6a353" translate="yes" xml:space="preserve">
          <source>Check whether an array-like or dtype is of the timedelta64 dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f705283f3ce7493d7b4ccece9dba24f38d6225" translate="yes" xml:space="preserve">
          <source>Check whether each index value in a list of values. &amp;gt;&amp;gt;&amp;gt; idx.isin([1, 4]) array([ True, False, False])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac527f8145fade79f7a4604c572fbb91cf09ee8" translate="yes" xml:space="preserve">
          <source>Check whether the new concatenated axis contains duplicates. This can be very expensive relative to the actual data concatenation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d222ea79224ef9ec6c911fc7bfdb0d84536a76d3" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of a boolean dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facd6e10aacd6688d61f2e14c577f2534c50348c" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of a complex dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744a354d72e6063b3b0d7bae89f98e60670e140f" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of a float dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c56232b2da3a41bff55f92ad52855fb6e72c1ac" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of a numeric dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340bea9f736602fb1798b46d220cc01b09481c1c" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of a signed integer dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de535eafa7e24690a43fa239dfee5af81134c2a" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of an integer dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ee2eaa3260c34ce84c2c4e1db46f70f272d99f" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of an unsigned integer dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cba4c6ae1dc5cf87f0a11812732fe5bd3f74189" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of the datetime64 dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f2483b1fe846a2c5fb68a25835b71f8173bd3b" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of the datetime64[ns] dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51168b6d35cf659fafb6dcb6c67cc544a2af13b" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of the int64 dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa9cdc330a20e9ae730e795f09f66e6924f3624" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of the string dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ae311256e5ed24bf859f8db14a107e06872def" translate="yes" xml:space="preserve">
          <source>Check whether the provided array or dtype is of the timedelta64[ns] dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a171c452b1bc39765ac0e3cc88aecbabcb1b10" translate="yes" xml:space="preserve">
          <source>Check whether the strings in the &amp;lsquo;color&amp;rsquo; level of the MultiIndex are in a list of colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c49a9ebae5fdddc859917870077436df1aa6485" translate="yes" xml:space="preserve">
          <source>Check whether two Interval objects overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e4dce445db6238d414e103f653b615cb4eee76" translate="yes" xml:space="preserve">
          <source>Checking for duplicate keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc00173c71c0a7cc22851827c7805c54693df9de" translate="yes" xml:space="preserve">
          <source>Checks a subgroup of numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8aa8a5a81783d21d930aebd48f375dcc30d523d" translate="yes" xml:space="preserve">
          <source>Choice of sorting algorithm. See also &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html#numpy.sort&quot;&gt;&lt;code&gt;numpy.sort()&lt;/code&gt;&lt;/a&gt; for more information. &amp;lsquo;mergesort&amp;rsquo; is the only stable algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038e8e1b1ae879ad60823c8f32df263a56639a36" translate="yes" xml:space="preserve">
          <source>Choice of sorting algorithm. See also &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html#numpy.sort&quot;&gt;&lt;code&gt;numpy.sort()&lt;/code&gt;&lt;/a&gt; for more information. &amp;lsquo;mergesort&amp;rsquo; is the only stable algorithm. For DataFrames, this option is only applied when sorting on a single column or label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4937643dbc1b842c5ddaf88c7203547bf743236e" translate="yes" xml:space="preserve">
          <source>Choice of sorting algorithm. See also ndarray.np.sort for more information. &lt;code&gt;mergesort&lt;/code&gt; is the only stable algorithm. For DataFrames, this option is only applied when sorting on a single column or label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10275dc86bc198fd035e44a5711d2976fcd27855" translate="yes" xml:space="preserve">
          <source>Choice of sorting algorithm. See np.sort for more information. &amp;lsquo;mergesort&amp;rsquo; is the only stable algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395a1dab74c3608ca6396332abb59bae2d9fd58a" translate="yes" xml:space="preserve">
          <source>Class for writing DataFrame objects into excel sheets, default is to use xlwt for xls, openpyxl for xlsx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c2ba842e04e07c2f57cd6aed7e83e3cfa2f206" translate="yes" xml:space="preserve">
          <source>Class for writing DataFrame objects into excel sheets, default is to use xlwt for xls, openpyxl for xlsx. See DataFrame.to_excel for typical usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83151111a95579ca7b59895d3a4eeeed18d726e" translate="yes" xml:space="preserve">
          <source>Class for writing DataFrame objects into excel sheets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdf29c5c073a0fad9c6beb11245df809155a5f7" translate="yes" xml:space="preserve">
          <source>Class implementing the .plot attribute for groupby objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="bfd2449b7720607ecebcd73f5ba1c78da2354958" translate="yes" xml:space="preserve">
          <source>Clear the existing index and reset it in the result by setting the &lt;code&gt;ignore_index&lt;/code&gt; option to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b02eeec38f4e8da18fdb4b44ce8c367b67482" translate="yes" xml:space="preserve">
          <source>Click &lt;code&gt;Send Pull Request&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b3a55ebc079f44193132dc71e06578f78c5e80" translate="yes" xml:space="preserve">
          <source>Click on &lt;code&gt;Branches&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c4dc9494172ddecde54e391b0a606ae8ca046b" translate="yes" xml:space="preserve">
          <source>Click on the &lt;code&gt;Compare&lt;/code&gt; button for your feature branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a619ce7bf0013bfb36f079ad6a9e018e08ad037d" translate="yes" xml:space="preserve">
          <source>Click on the &lt;code&gt;Pull Request&lt;/code&gt; button</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efe0c9323a499a8546aeac42d4b659bd2a4039f" translate="yes" xml:space="preserve">
          <source>Clipboard</source>
          <target state="translated">Clipboard</target>
        </trans-unit>
        <trans-unit id="75b545d8e3ea98d02b5454ad507417fdf53e6d50" translate="yes" xml:space="preserve">
          <source>Clipboard I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4915b6484d5046b42cb2a9a85f55adae919a3510" translate="yes" xml:space="preserve">
          <source>Clipboard I/O on linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39284217c81ff88276c459597bf73c203dad2ac6" translate="yes" xml:space="preserve">
          <source>Clips per column using lower and upper thresholds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ade8fa84497ddb9a336eb5e5e343f27620eb67" translate="yes" xml:space="preserve">
          <source>Clips using specific lower and upper thresholds per column element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b369a0ec45fd96187a3d82f1b342bf2a1f7eea69" translate="yes" xml:space="preserve">
          <source>Closed end of interval. Only when &lt;code&gt;freq&lt;/code&gt; parameter is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c770036c851b8e5c073be17f28c56711e40641" translate="yes" xml:space="preserve">
          <source>Closely related to the &lt;a href=&quot;../reference/api/pandas.dataframe.pivot#pandas.DataFrame.pivot&quot;&gt;&lt;code&gt;pivot()&lt;/code&gt;&lt;/a&gt; method are the related &lt;a href=&quot;../reference/api/pandas.dataframe.stack#pandas.DataFrame.stack&quot;&gt;&lt;code&gt;stack()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/api/pandas.dataframe.unstack#pandas.DataFrame.unstack&quot;&gt;&lt;code&gt;unstack()&lt;/code&gt;&lt;/a&gt; methods available on &lt;code&gt;Series&lt;/code&gt; and &lt;code&gt;DataFrame&lt;/code&gt;. These methods are designed to work together with &lt;code&gt;MultiIndex&lt;/code&gt; objects (see the section on &lt;a href=&quot;advanced#advanced-hierarchical&quot;&gt;hierarchical indexing&lt;/a&gt;). Here are essentially what these methods do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55248b3abf33bbf7a1e504d8f2045aa665f12eb" translate="yes" xml:space="preserve">
          <source>Code Base:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acea98de1ec71480fd1ad99e3c67d21a389be5c9" translate="yes" xml:space="preserve">
          <source>Code in examples is assumed to always start with these two lines which are not shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b610d1070a420e19e2a8fe83994ed72990335cd9" translate="yes" xml:space="preserve">
          <source>Code standards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a692a416953f6f800cc8d931ec54b0b9fa01d0a" translate="yes" xml:space="preserve">
          <source>Collectively we refer to the grouping objects as the &lt;strong&gt;keys&lt;/strong&gt;. For example, consider the following &lt;code&gt;DataFrame&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0730a08c48e3625f50313d733d0120f5e641afd8" translate="yes" xml:space="preserve">
          <source>Color the background in a gradient according to the data in each column (optionally row).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5993cf2a69d5fb7d9ff73448fa1b49788964598a" translate="yes" xml:space="preserve">
          <source>Colormap to select colors from. If string, load colormap with that name from matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208b15b51046bc5f9b1b33dbdb56d7138163ee37" translate="yes" xml:space="preserve">
          <source>Colormap to use for line colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c862d5ab3318ebe04f9e217dd74af6928e1bcc" translate="yes" xml:space="preserve">
          <source>Colormaps, with a caption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6f76e82fd50a304805a584082d35a9ad5285da" translate="yes" xml:space="preserve">
          <source>Colors to use for the different classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4556bb2df128a60cd892cd4ab6a6375289dac776" translate="yes" xml:space="preserve">
          <source>Column (0-indexed) to use as the row labels of the DataFrame. Pass None if there is no such column. If a list is passed, those columns will be combined into a &lt;code&gt;MultiIndex&lt;/code&gt;. If a subset of data is selected with &lt;code&gt;usecols&lt;/code&gt;, index_col is based on the subset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ba733a366ab5e19abe3e73cbdae4708f723a8e" translate="yes" xml:space="preserve">
          <source>Column and index locations and names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f142690d33ff9b9f13d228397984fe393aad63" translate="yes" xml:space="preserve">
          <source>Column dtype is not representable in Stata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91bee0202f6f1cecc6f5711ba5251a9f6fd458d" translate="yes" xml:space="preserve">
          <source>Column in the DataFrame to &lt;a href=&quot;pandas.dataframe.groupby#pandas.DataFrame.groupby&quot;&gt;&lt;code&gt;pandas.DataFrame.groupby()&lt;/code&gt;&lt;/a&gt;. One box-plot will be done per value of columns in &lt;code&gt;by&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae13f32e55ad2e6cc8bca9ab22713b02419aaacb" translate="yes" xml:space="preserve">
          <source>Column in the DataFrame to group by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b6ef802d54f8807147137226b80062c77d025e" translate="yes" xml:space="preserve">
          <source>Column label cells include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238531c0501e865e8c1e23ecaa2d4c672eefbe00" translate="yes" xml:space="preserve">
          <source>Column label cells include * &lt;code&gt;col_heading&lt;/code&gt; * &lt;code&gt;col&amp;lt;n&amp;gt;&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the numeric position of the column * &lt;code&gt;evel&amp;lt;k&amp;gt;&lt;/code&gt; where &lt;code&gt;k&lt;/code&gt; is the level in a MultiIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec18a98ba927af5feef8d546a01309738b7be55e" translate="yes" xml:space="preserve">
          <source>Column label for index column(s) if desired. If None is given, and &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are True, then the index names are used. A sequence should be given if the object uses MultiIndex. If False do not print fields for index names. Use index_label=False for easier importing in R.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304cfd0ded7a98d58163bcbdea40f381b27af23b" translate="yes" xml:space="preserve">
          <source>Column label for index column(s) if desired. If not specified, and &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80e06ef3b358b10756446cd0bab12d5a9f91573" translate="yes" xml:space="preserve">
          <source>Column label for index column(s). If None is given (default) and &lt;code&gt;index&lt;/code&gt; is True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083904ca239edcb0700e8b52ccd2677262cb02ee" translate="yes" xml:space="preserve">
          <source>Column label(s) to order by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807199c201e90de8edc39da3b6b87baf347cf015" translate="yes" xml:space="preserve">
          <source>Column labels to use for resulting frame. Will default to RangeIndex (0, 1, 2, &amp;hellip;, n) if no column labels are provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e731ee7613c58a2c02b5a9ddd98b8a1527081b7" translate="yes" xml:space="preserve">
          <source>Column labels to use when &lt;code&gt;orient='index'&lt;/code&gt;. Raises a ValueError if used with &lt;code&gt;orient='columns'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81eb5e121a60018e255e0f035e13420e1fd38d9f" translate="yes" xml:space="preserve">
          <source>Column listed in convert_dates is not in DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee9824b19b5abdb14597e8e21c27491bc4e38ad" translate="yes" xml:space="preserve">
          <source>Column name containing class names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b7f37ad5b0cfc5ae9cb7c0b0d15b53efdb60cc" translate="yes" xml:space="preserve">
          <source>Column name containing the name of the data point category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ee5beccfb3f64cfcbee1e186c11ad60cdcb5d8" translate="yes" xml:space="preserve">
          <source>Column name or list of names, or vector. Can be any valid input to &lt;a href=&quot;pandas.dataframe.groupby#pandas.DataFrame.groupby&quot;&gt;&lt;code&gt;pandas.DataFrame.groupby()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34293e894a6ef667eb6765a5376c652434e2fa14" translate="yes" xml:space="preserve">
          <source>Column name or names to order by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a035a548f3e7045c84b70b3e0c59c1ac99a0640d" translate="yes" xml:space="preserve">
          <source>Column names by which to partition the dataset Columns are partitioned in the order they are given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1540a9f7215834cb6068c8b8a8f2b978dc554f91" translate="yes" xml:space="preserve">
          <source>Column names in the DataFrame to be encoded. If &lt;code&gt;columns&lt;/code&gt; is None then all the columns with &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;category&lt;/code&gt; dtype will be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fd93a3ae22d0eb817e43911a0b6f7eb2e71c92" translate="yes" xml:space="preserve">
          <source>Column names to use. If the passed data do not have names associated with them, this argument provides names for the columns. Otherwise this argument indicates the order of the columns in the result (any names not found in the data will become all-NA columns)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77540c48601b21c4ec552359a91c7db4f0daae6d" translate="yes" xml:space="preserve">
          <source>Column or index level name(s) in the caller to join on the index in &lt;code&gt;other&lt;/code&gt;, otherwise joins index-on-index. If multiple values given, the &lt;code&gt;other&lt;/code&gt; DataFrame must have a MultiIndex. Can pass an array as the join key if it is not already contained in the calling DataFrame. Like an Excel VLOOKUP operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0851a5a01fe17d516a794d595ef2a761cbd89498" translate="yes" xml:space="preserve">
          <source>Column or index level names to join on in the left DataFrame. Can also be an array or list of arrays of the length of the left DataFrame. These arrays are treated as if they are columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd41820505d7561ab5304943962f3f23d8cb37c" translate="yes" xml:space="preserve">
          <source>Column or index level names to join on in the right DataFrame. Can also be an array or list of arrays of the length of the right DataFrame. These arrays are treated as if they are columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7e6989b0ea65c072493477e48067bdfe43b39d" translate="yes" xml:space="preserve">
          <source>Column or index level names to join on. These must be found in both DataFrames. If &lt;code&gt;on&lt;/code&gt; is None and not merging on indexes then this defaults to the intersection of the columns in both DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf415c82c10b30712bd7d32eeff37b9c3b421df" translate="yes" xml:space="preserve">
          <source>Column ordering is determined by the DataFrame constructor with data as a dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbcd8d8f64d21a210e403a82b061cd401e09f03" translate="yes" xml:space="preserve">
          <source>Column to be used for categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22b644a5430f254d450bb07361b20113b49b2f7" translate="yes" xml:space="preserve">
          <source>Column to plot. By default uses all columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5e473d3ef38737f6751501fd5f535fe81eaf52" translate="yes" xml:space="preserve">
          <source>Column to set as index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40640b0e2841432a0e1b80e7287fb36004b23be2" translate="yes" xml:space="preserve">
          <source>Column to use to make new frame&amp;rsquo;s columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42dd5d3f5fa44629485dc82a01d082eb317fc98" translate="yes" xml:space="preserve">
          <source>Column to use to make new frame&amp;rsquo;s index. If None, uses existing index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bf071eac35cea9bb9d2900e571016f7286e864" translate="yes" xml:space="preserve">
          <source>Column types are inferred but can be explicitly specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23113cd9d041946b898430290b92407370a3f07" translate="yes" xml:space="preserve">
          <source>Column(s) to set as index(MultiIndex).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70acde08d85eb63d1ba9a3e9122fa4e7b3c40e2" translate="yes" xml:space="preserve">
          <source>Column(s) to unpivot. If not specified, uses all columns that are not set as &lt;code&gt;id_vars&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8ea2adf188b49396d77f5ba3c0178b155b41d7" translate="yes" xml:space="preserve">
          <source>Column(s) to use as id variable(s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb3bad9a21a3e6d6fc79c6a730d99f64067cc3a" translate="yes" xml:space="preserve">
          <source>Column(s) to use as identifier variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27ffcda71860c177fc16f11f71424403e3efe4c" translate="yes" xml:space="preserve">
          <source>Column(s) to use as the row labels of the &lt;code&gt;DataFrame&lt;/code&gt;, either given as string name or column index. If a sequence of int / str is given, a MultiIndex is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a18b7e2dcf7903d81a1099712c4cba16c4cc5f" translate="yes" xml:space="preserve">
          <source>Column(s) to use for populating new frame&amp;rsquo;s values. If not specified, all remaining columns will be used and the result will have hierarchically indexed columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c2193ad3e20d0ad48ab45026b644450748a29c" translate="yes" xml:space="preserve">
          <source>Columns in &lt;code&gt;other&lt;/code&gt; that are not in the caller are added as new columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b3f4cbdbe7a6b9dff9390bac4558cfa59d2da8" translate="yes" xml:space="preserve">
          <source>Columns listed in convert_dates are neither datetime64[ns] or datetime.datetime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f0584f29bfa757aa76d3b8e7ae23b498085324" translate="yes" xml:space="preserve">
          <source>Columns or fields to exclude</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522d0ad1d966fc513a7717e6b7f4492d5b8ede68" translate="yes" xml:space="preserve">
          <source>Columns to be plotted from the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cac4d4c6b2328879e3f6952bac548a9429da2a" translate="yes" xml:space="preserve">
          <source>Columns to retain. Columns will be returned in the given order. None returns all columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5cbfafd50fff3b1ca79996eb9259d1549db24f" translate="yes" xml:space="preserve">
          <source>Columns to use for the horizontal axis. Either the location or the label of the columns to be used. By default, it will use the DataFrame indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842bbfc9d330079f05a074af631cbbd7958177c2" translate="yes" xml:space="preserve">
          <source>Columns to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38255f8569083b1c034f484591a6f6f3201ab2fd" translate="yes" xml:space="preserve">
          <source>Combination of the provided DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df1cf9a799aa66381b7f68a7350367bd784cca3" translate="yes" xml:space="preserve">
          <source>Combine &lt;code&gt;DataFrame&lt;/code&gt; objects horizontally along the x axis by passing in &lt;code&gt;axis=1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ca8f3e87e41640234f26352a720486be610eb2" translate="yes" xml:space="preserve">
          <source>Combine &lt;code&gt;DataFrame&lt;/code&gt; objects with overlapping columns and return everything. Columns outside the intersection will be filled with &lt;code&gt;NaN&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e5f5993c2eaf8c674bf3885e9ed113dd7cf74b" translate="yes" xml:space="preserve">
          <source>Combine &lt;code&gt;DataFrame&lt;/code&gt; objects with overlapping columns and return only those that are shared by passing &lt;code&gt;inner&lt;/code&gt; to the &lt;code&gt;join&lt;/code&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850c4f06e2f725bd91f24ec45234911c61cebbeb" translate="yes" xml:space="preserve">
          <source>Combine Series values, choosing the calling Series&amp;rsquo; values first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af862d33846ccce4938aa9bbf2d2590fb77291f9" translate="yes" xml:space="preserve">
          <source>Combine Series values, choosing the calling Series&amp;rsquo;s values first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e591b22e563219b1408c94afde56927b7ca2b1" translate="yes" xml:space="preserve">
          <source>Combine list-like of Categorical-like, unioning categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b05b57732271ce92de871ff4e8fdceb05ecad59" translate="yes" xml:space="preserve">
          <source>Combine list-like of Categorical-like, unioning categories. All categories must have the same dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e7438822e9a34335e610edf5932d5e3d478861" translate="yes" xml:space="preserve">
          <source>Combine the Series and &lt;code&gt;other&lt;/code&gt; using &lt;code&gt;func&lt;/code&gt; to perform elementwise selection for combined Series. &lt;code&gt;fill_value&lt;/code&gt; is assumed when value is missing at some index from one of the two objects being combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe12963c4b8e9d3ad239ce37e9c194ec94a8d85b" translate="yes" xml:space="preserve">
          <source>Combine the Series with a Series or scalar according to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee3c348adf744f4fcc8328f974cc5d1d76d4d42" translate="yes" xml:space="preserve">
          <source>Combine two &lt;code&gt;DataFrame&lt;/code&gt; objects with identical columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da24ca90320987b34039ae1f4c57ebbfb41513dd" translate="yes" xml:space="preserve">
          <source>Combine two &lt;code&gt;Series&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1a134a2b39fdfdecb3389d7580c8dbb325fcdf" translate="yes" xml:space="preserve">
          <source>Combine two DataFrame objects and default to non-null values in frame calling the method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c3d054287ac2cfda91cecd51c4bb53ee2bad6b" translate="yes" xml:space="preserve">
          <source>Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame. The row and column indexes of the resulting DataFrame will be the union of the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be85acb92c7eeae4ce977ad9edadeebe089c0bdb" translate="yes" xml:space="preserve">
          <source>Combine using a simple function that chooses the smaller column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb8ac11760b9abfa0c348ab5758784ed0f92a29" translate="yes" xml:space="preserve">
          <source>Combines a DataFrame with &lt;code&gt;other&lt;/code&gt; DataFrame using &lt;code&gt;func&lt;/code&gt; to element-wise combine columns. The row and column indexes of the resulting DataFrame will be the union of the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48abbc1ce266ff63ded3f4b88b8cf56e71d95052" translate="yes" xml:space="preserve">
          <source>Combining / joining / merging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39455eba83264807affb8fe8654c63fdd2f631c3" translate="yes" xml:space="preserve">
          <source>Combining / joining / set operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff94d1627bdd6fdbfb9015da139b13f1ba9f17b" translate="yes" xml:space="preserve">
          <source>Combining with stats and GroupBy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933505972e4ef4d9a1b6b173c17eaffb4431db9d" translate="yes" xml:space="preserve">
          <source>Comment lines in the excel input file can be skipped using the &lt;code&gt;comment&lt;/code&gt; kwarg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c0af0df8c85aa59bbad4689c2ac5bbac4b2588" translate="yes" xml:space="preserve">
          <source>Comments out remainder of line. Pass a character or characters to this argument to indicate comments in the input file. Any data between the comment string and the end of the current line is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d68eb8ffe2afd982180b226d157b710d7445a43" translate="yes" xml:space="preserve">
          <source>Committing your code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="1e44d4dc1426d9b9be373a1fe3772b1d2f2bed56" translate="yes" xml:space="preserve">
          <source>Community guides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f155430ba8aa42c74db8fac8bbc45de27a4aec5a" translate="yes" xml:space="preserve">
          <source>Compare DataFrames for equality elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd9f8875152b023f4e8a66a0f42a67c58edba50" translate="yes" xml:space="preserve">
          <source>Compare DataFrames for greater than inequality or equality elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684cbaab27f6dfcb26c3ec87abe4e3fdcc851d33" translate="yes" xml:space="preserve">
          <source>Compare DataFrames for inequality elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde260ad3ded842ce8b3750f690acb9d6e82a0ac" translate="yes" xml:space="preserve">
          <source>Compare DataFrames for less than inequality or equality elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4438d767b315cfa29b23801fc052414a38ad367b" translate="yes" xml:space="preserve">
          <source>Compare DataFrames for strictly greater than inequality elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c4df59ecfe64298fa5ad6d71b3ccf62564d876" translate="yes" xml:space="preserve">
          <source>Compare DataFrames for strictly less than inequality elementwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9dee3be6efdc8145e7bde36469ec156d4476a16" translate="yes" xml:space="preserve">
          <source>Compare datetime-like which is comparable ignoring dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997ae502caf3b67bc397fe55d4cc23853aa80674" translate="yes" xml:space="preserve">
          <source>Compare the behavior of &lt;code&gt;s.replace({'a': None})&lt;/code&gt; and &lt;code&gt;s.replace('a', None)&lt;/code&gt; to understand the peculiarities of the &lt;code&gt;to_replace&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4456c666f595468e5ed8c9153bb896647103b298" translate="yes" xml:space="preserve">
          <source>Compare to a DataFrame of different shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d1ca9d73743c8d3ba860213457a11daeb0562c" translate="yes" xml:space="preserve">
          <source>Compare to a MultiIndex by level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73743fcd0b30c25a479265260cc909a1f7a46b3b" translate="yes" xml:space="preserve">
          <source>Compare two DataFrame objects of the same shape and return a DataFrame where each element is True if the respective element in each DataFrame is equal, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7c37c0e62e70225e4e912d71eea4797f252f57" translate="yes" xml:space="preserve">
          <source>Compare two Series objects of the same length and return a Series where each element is True if the element in each Series is equal, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef80b6d91eef4adf0034b0f6c45050d4404b6a9" translate="yes" xml:space="preserve">
          <source>Comparison operations, including chained comparisons, e.g., &lt;code&gt;2 &amp;lt; df &amp;lt; df2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49183965e309e6fc240ba645ba66ada148da07df" translate="yes" xml:space="preserve">
          <source>Comparison with R / R libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544489b1652a97ae99d14359cb3348ad20005ff3" translate="yes" xml:space="preserve">
          <source>Comparison with SAS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e6cb6ecd15eeb9a352bb2e0cbaf046d6b12e1f" translate="yes" xml:space="preserve">
          <source>Comparison with SQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202fb51da3d9288c413585fad11949464920e47a" translate="yes" xml:space="preserve">
          <source>Comparison with Stata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2068d6e8f9c6e31f0efbacb4d49a794d9ef763" translate="yes" xml:space="preserve">
          <source>Comparison with a scalar, using either the operator or method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a326f0c9150a74f2cec637e0df72b9e7470d866" translate="yes" xml:space="preserve">
          <source>Comparison with other tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="cafb998b04da33004626d5854f0b8662066f3d7d" translate="yes" xml:space="preserve">
          <source>Compatibility with MultiIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="e656d2f61223dc6b02c256f8624891498f366e26" translate="yes" xml:space="preserve">
          <source>Compression for msgpack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db25c7f9ba5ee624bed83ee08e1746e6f8ea65b" translate="yes" xml:space="preserve">
          <source>Compression mode among the following possible values: {&amp;lsquo;infer&amp;rsquo;, &amp;lsquo;gzip&amp;rsquo;, &amp;lsquo;bz2&amp;rsquo;, &amp;lsquo;zip&amp;rsquo;, &amp;lsquo;xz&amp;rsquo;, None}. If &amp;lsquo;infer&amp;rsquo; and &lt;code&gt;path_or_buf&lt;/code&gt; is path-like, then detect compression from the following extensions: &amp;lsquo;.gz&amp;rsquo;, &amp;lsquo;.bz2&amp;rsquo;, &amp;lsquo;.zip&amp;rsquo; or &amp;lsquo;.xz&amp;rsquo;. (otherwise no compression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd260770f98f9ac256c0d151419fd05e77f6fc69" translate="yes" xml:space="preserve">
          <source>Computation</source>
          <target state="translated">Computation</target>
        </trans-unit>
        <trans-unit id="28864201e992ac1f3ab48b9cf8c420de923fcad7" translate="yes" xml:space="preserve">
          <source>Computational tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b6874c92cbe8e8591f67048e1390767a01882e" translate="yes" xml:space="preserve">
          <source>Computations / descriptive stats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600b92b1afe6223ca876c70e61a764b8459cc4a7" translate="yes" xml:space="preserve">
          <source>Compute a simple cross tabulation of two (or more) factors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d096bf0af8eded8af9b29aa629f585a1e0f617" translate="yes" xml:space="preserve">
          <source>Compute a simple cross tabulation of two (or more) factors. By default computes a frequency table of the factors unless an array of values and an aggregation function are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f3288ffc549b7fe8c30e2c036778145430d1a0" translate="yes" xml:space="preserve">
          <source>Compute boolean array of whether each index value is found in the passed set of values. The length of the returned boolean array matches the length of the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443fa04eed3c762ca168aef81b33f1814d51342e" translate="yes" xml:space="preserve">
          <source>Compute correlation with &lt;code&gt;other&lt;/code&gt; Series, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f0e327a3e33e786a9ace732e4ce6359f79fe0e" translate="yes" xml:space="preserve">
          <source>Compute count of group, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035f3a15b670ac01ef1a31000fb85d342549ece5" translate="yes" xml:space="preserve">
          <source>Compute covariance with Series, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485b1cdcb172e668bc259c40b5e045376a11b12c" translate="yes" xml:space="preserve">
          <source>Compute covariance with another Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60568b74eff51f43e0b351cdfa2a42c92fa4e63" translate="yes" xml:space="preserve">
          <source>Compute first of group values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df1d7a34b548de4822b623273cc14c060a63428" translate="yes" xml:space="preserve">
          <source>Compute group sizes / counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa7d1ee1cbd734394da8fc02e99f2c28c72e74f" translate="yes" xml:space="preserve">
          <source>Compute group sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7364d7fdd904a2a44310979d5817945f7eee51d" translate="yes" xml:space="preserve">
          <source>Compute group sums or means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa008c2f2a151ecbcac2c0987bc395920ad466f" translate="yes" xml:space="preserve">
          <source>Compute indexer and mask for new index given the current index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bba16d2ed53fe2d70d09336fe06c7da1cb6fe6b" translate="yes" xml:space="preserve">
          <source>Compute indexer and mask for new index given the current index. The indexer should be then used as an input to ndarray.take to align the current data to the new index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5da2f41fe51ae451a3b9b83fd874521b4b7731" translate="yes" xml:space="preserve">
          <source>Compute join_index and indexers to conform data structures to the new index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887dce40a354986de318c94652c0982b74e0b896" translate="yes" xml:space="preserve">
          <source>Compute last of group values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2395d63d6e1c2ef5df924e84920d967b33503f6b" translate="yes" xml:space="preserve">
          <source>Compute max of group values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6a9bd65288eb61d8e2250e3b3587daf3e7406c" translate="yes" xml:space="preserve">
          <source>Compute mean of groups, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb94c2c49458f7bcf1a7e701bdf8b53e6892567" translate="yes" xml:space="preserve">
          <source>Compute median of groups, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7792b658971864fae8314a25f520a29f7beb5b0b" translate="yes" xml:space="preserve">
          <source>Compute min of group values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c5940b469f85c1d48d0f742ef59a1d5334a74f" translate="yes" xml:space="preserve">
          <source>Compute numerical data ranks (1 through n) along axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea8ec50d2285951785312954bbe1b3da9b04875" translate="yes" xml:space="preserve">
          <source>Compute pairwise correlation between rows or columns of DataFrame with rows or columns of Series or DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aedc810fb5ce58150bc3b33e4a92eb8a8eebe586" translate="yes" xml:space="preserve">
          <source>Compute pairwise correlation between rows or columns of DataFrame with rows or columns of Series or DataFrame. DataFrames are first aligned along both axes before computing the correlations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873e268b2de797002263dc6ee4cee0ff897638a9" translate="yes" xml:space="preserve">
          <source>Compute pairwise correlation between rows or columns of two DataFrame objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f23fabb3534bb4734607f412436b238a63d131" translate="yes" xml:space="preserve">
          <source>Compute pairwise correlation of columns, excluding NA/null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54cd1de4795ed756c72087bbf30d07327f915f0" translate="yes" xml:space="preserve">
          <source>Compute pairwise correlation of columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6933aed91953ab488c5280baae21e71067f5bc95" translate="yes" xml:space="preserve">
          <source>Compute pairwise covariance of columns, excluding NA/null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1797c1edd46c18ac2d170d8149c19aaf07ed63d2" translate="yes" xml:space="preserve">
          <source>Compute percentage rank of data within each group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4611af0fb702b1d1ab40e8a21c21d6fbb0aeac9" translate="yes" xml:space="preserve">
          <source>Compute prod of group values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bac27df53988a1f1561e10076c064e7fdaa57c" translate="yes" xml:space="preserve">
          <source>Compute slice locations for input labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee28d58b48b7866532cb92d346040a61e2f3697" translate="yes" xml:space="preserve">
          <source>Compute standard deviation of groups, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fc420a41dd905a7b30e761c2978b456cc94f53" translate="yes" xml:space="preserve">
          <source>Compute standard error of the mean of groups, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2528f8bdbac57884a8d7a1285b548ef4f4bd800f" translate="yes" xml:space="preserve">
          <source>Compute sum of group values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b2550ca06c455052fa5161c0c08732ba069e09" translate="yes" xml:space="preserve">
          <source>Compute sum of values, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8222ed86efd7b21f7a460bfa90cbb02be01a5a0" translate="yes" xml:space="preserve">
          <source>Compute the ExtensionArray of unique values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8ac8b4904fe2815ebe1a289d0636312d7447b9" translate="yes" xml:space="preserve">
          <source>Compute the correlation between two Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf61b6a527c31c370cd70df00a2218a71d0cb891" translate="yes" xml:space="preserve">
          <source>Compute the difference of two elements in a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945bc5e28165153ebe6c96a37adda5c980b70749" translate="yes" xml:space="preserve">
          <source>Compute the difference of two elements in a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab47ba26131fc97917c0219bae292eb6a9f49fb" translate="yes" xml:space="preserve">
          <source>Compute the dot product between the Series and the columns of other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd27aa2c0b7b863a86f149c50c08bdca122c117c" translate="yes" xml:space="preserve">
          <source>Compute the lag-N autocorrelation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03ad9478f0cfd44cc6c01af81182ed2db0529fd" translate="yes" xml:space="preserve">
          <source>Compute the length of each element in the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc55c5ce6c4ca1e46f2d4ceebdf6698e2e9a217" translate="yes" xml:space="preserve">
          <source>Compute the length of each element in the Series/Index. The element may be a sequence (such as a string, tuple or list) or a collection (such as a dictionary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f2c26945b5bebb896d63a6c5d14d2c6e9d4d3b" translate="yes" xml:space="preserve">
          <source>Compute the matrix multiplication between the DataFrame and other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0b093ee27fe1830a0d78fc37eaffab856924f9" translate="yes" xml:space="preserve">
          <source>Compute the matrix product with the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d91b1be961bfef39359d9f2e48940f1a4e808a6" translate="yes" xml:space="preserve">
          <source>Compute the pairwise covariance among the series of a DataFrame. The returned data frame is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Covariance_matrix&quot;&gt;covariance matrix&lt;/a&gt; of the columns of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b47d286c8bf2a3a8c9e152972dcdc4d21152db" translate="yes" xml:space="preserve">
          <source>Compute the rolling median of a series with a window size of 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc2cc41a8e7bea5f553d69f22f00a9a9264610f" translate="yes" xml:space="preserve">
          <source>Compute the symmetric difference of two Index objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911d9a3685e24d35266fbde267ccd911e3d76a82" translate="yes" xml:space="preserve">
          <source>Compute variance of groups, excluding missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2adffe0eb5bf413cd15f00760a16f548b75cd41" translate="yes" xml:space="preserve">
          <source>Computed first of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59fc62fc337c2eec5c3d31b38fe8b9874bb11fe" translate="yes" xml:space="preserve">
          <source>Computed last of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b84cb87e51463e22511caf0eb2a2adf84cee37" translate="yes" xml:space="preserve">
          <source>Computed max of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6772dd0b780c15db0e888835874913b36157ab6" translate="yes" xml:space="preserve">
          <source>Computed min of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d02b9484154eecdf30102fe3743cfac5b0b517" translate="yes" xml:space="preserve">
          <source>Computed prod of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdedffa722aac4a364768bbdb69ecb343a62b93" translate="yes" xml:space="preserve">
          <source>Computed sum of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5b2540511cd00439a60d08533f5fcbad6827f0" translate="yes" xml:space="preserve">
          <source>Computes the percentage change from the immediately previous row by default. This is useful in comparing the percentage of change in a time series of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a47d1315c4588adda68a64fc73fddca3c2d16d" translate="yes" xml:space="preserve">
          <source>Computes value at the given quantile over all data in Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c784d047a1e5390a87af72162c9c1e605797cae" translate="yes" xml:space="preserve">
          <source>Computes values at the given quantile over requested axis in DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc67d8549498132db1f618c60e7fdca09dd2614" translate="yes" xml:space="preserve">
          <source>Computing indicator / dummy variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb44fd34196e7f81575b7210dc5fd37a76546b2" translate="yes" xml:space="preserve">
          <source>Concatenate DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d165c0b80237ebc581abc59334d70693b3306233" translate="yes" xml:space="preserve">
          <source>Concatenate Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91334d7b692f9c7f150134bd6b4d670168f06c50" translate="yes" xml:space="preserve">
          <source>Concatenate multiple array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c6e0b7c93d96e06b7462aea2e60b3c853dff15" translate="yes" xml:space="preserve">
          <source>Concatenate pandas objects along a particular axis with optional set logic along the other axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f39a101f37155586913b2b2c31f8a90d7ed24f3" translate="yes" xml:space="preserve">
          <source>Concatenate strings in the Series/Index with given separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab18de006abe7b9150e507867f524b9b1919208" translate="yes" xml:space="preserve">
          <source>Concatenate two or more Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d18d8f142d9025cc124816605bcea74a4b9d5bb" translate="yes" xml:space="preserve">
          <source>Concatenated Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0116c0e52af92ba9d32230d738071ee517e661" translate="yes" xml:space="preserve">
          <source>Concatenating objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d54526409fb31a4761b8417b6a64d80145b483b" translate="yes" xml:space="preserve">
          <source>Concatenating using &lt;code&gt;append&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c5df46512a2a39f20ced9294449d616a48bc08" translate="yes" xml:space="preserve">
          <source>Concatenating with mixed ndims</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec037fd21cdbe752cf956ee1da877b809e27461" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
          <target state="translated">Concatenation</target>
        </trans-unit>
        <trans-unit id="6cbe0351fc4baae3b342a11344173d28091006d0" translate="yes" xml:space="preserve">
          <source>Concise summary of a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1dd915adbaf5a7d6e35c3e587c89aaba05308e" translate="yes" xml:space="preserve">
          <source>Conditional formatting with DataFrame.style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bf51fc1abe31636ec3c95778687f557e4a63ed" translate="yes" xml:space="preserve">
          <source>Conditional that returns a boolean Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597c3190066e68186685e8f5d5d9e71601acae2b" translate="yes" xml:space="preserve">
          <source>Conditional that returns a boolean Series with column labels specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f59ad0be4b3be6015b150aa9a9d58c096a7fde" translate="yes" xml:space="preserve">
          <source>Configures error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d155157553d417b13f6253e06d9f2e73b3457a" translate="yes" xml:space="preserve">
          <source>Conform DataFrame to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df1c9607fdf2079d174fb314ce247406de2536a" translate="yes" xml:space="preserve">
          <source>Conform DataFrame to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and &lt;code&gt;copy=False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0efef5ac2a14b5771b907246ff1c8ea66ac5ca" translate="yes" xml:space="preserve">
          <source>Conform Series to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f542375cb41e8e25072eabf445b1d32e73a61c5d" translate="yes" xml:space="preserve">
          <source>Conform Series to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and &lt;code&gt;copy=False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a4a404b6923f7e8451a348cc9aef6e70d7ba29" translate="yes" xml:space="preserve">
          <source>Conform object to new index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffec2ce10f49c5b650c901d220de81fc089d2380" translate="yes" xml:space="preserve">
          <source>Conform the object to the same index on all axes. Optional filling logic, placing NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and copy=False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307e4f8ba864c0f049eaa18884998c800f1ca7b7" translate="yes" xml:space="preserve">
          <source>Consider 2 Datasets &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; containing highest clocked speeds of different birds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149e97f68f8fedbda1b88a156dbd93b66344bce6" translate="yes" xml:space="preserve">
          <source>Consider using &lt;code&gt;pd.IndexSlice&lt;/code&gt; to construct the tuple for the last one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08256af4b4538f685aaed545b4aeea98003e5f05" translate="yes" xml:space="preserve">
          <source>Construct DataFrame from dict of array-like or dicts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2714f0fdfb352e008ee132e62fc0b27074f6afa1" translate="yes" xml:space="preserve">
          <source>Construct DataFrame from group with provided name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74b40575722be192ca5f823d2d1cfd2d31c64b2" translate="yes" xml:space="preserve">
          <source>Construct Series from array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa46ba5ff332c2de515b7c7b2419e6620b0b392" translate="yes" xml:space="preserve">
          <source>Construct a DataFrame from a list of tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99ea8fcb84f69abe82dc28b5604b0a03898aa57" translate="yes" xml:space="preserve">
          <source>Construct a NumPy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650886acd872367482dd97ac79b384d26e5552d4" translate="yes" xml:space="preserve">
          <source>Construct a naive UTC datetime from a POSIX timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e9eee80c8943491e4f62ae6277e4f873f8e9b8" translate="yes" xml:space="preserve">
          <source>Construct a new ExtensionArray from a sequence of scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ec68c6d15170d11f3188f0eb9c79d7ccaa2ad1" translate="yes" xml:space="preserve">
          <source>Construct a new ExtensionArray from a sequence of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ba941025ad26bd1fae7f31455afc9315abf066" translate="yes" xml:space="preserve">
          <source>Construct a pandas Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d761cbf460e89290d70ca85d87fb26e18f24399b" translate="yes" xml:space="preserve">
          <source>Construct a pandas Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2837297b90acbaf6c35daa9b8c715da21b6bb990" translate="yes" xml:space="preserve">
          <source>Construct an IntervalArray from a left and right array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52738995a14b9f7305234549fadd8fb4afd50a22" translate="yes" xml:space="preserve">
          <source>Construct an IntervalArray from an array of splits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81180cde2c54338650e3b239b9277a3258546f" translate="yes" xml:space="preserve">
          <source>Construct an IntervalArray from an array-like of tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca751cdcdc6ddb4c327070e3c9bbe7aeb78d2198" translate="yes" xml:space="preserve">
          <source>Construct an IntervalArray from an array-like of tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b773e72e72efc952c93a13b8f2bfabae4f374634" translate="yes" xml:space="preserve">
          <source>Construct an IntervalIndex from a left and right array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e0f3a651e4acfa5b25596b8c365cc40f798f20" translate="yes" xml:space="preserve">
          <source>Construct an IntervalIndex from an array of splits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198b046eff65a9838edd04c44afb2d8830a3d64b" translate="yes" xml:space="preserve">
          <source>Construct an IntervalIndex from an array-like of tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191511c730ed1b11f45ccd2583af33efbd69cbe3" translate="yes" xml:space="preserve">
          <source>Construct an IntervalIndex from an array-like of tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0373003f48cba180a48f00c0d86e021657664b7e" translate="yes" xml:space="preserve">
          <source>Construct for this particular dtype. This should be a Dtype compatible with the ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2072dcd94888d844d5e9289e93a2d7eff07ccab3" translate="yes" xml:space="preserve">
          <source>Construct from a left and right array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2587a42d3522138bc09a4d387e9621ddfb1a148b" translate="yes" xml:space="preserve">
          <source>Construct from a sequence of tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039c556869f7b7999482c98165c519e805757d88" translate="yes" xml:space="preserve">
          <source>Construct from two arrays defining the left and right bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bee7e8709e39c2a2fc6b8c5caa36bb48a9b0c43" translate="yes" xml:space="preserve">
          <source>Construct this type from a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a87f6215b6262757a707933e335cb7f9a301f5" translate="yes" xml:space="preserve">
          <source>Constructed Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672ca8ac2689b30fd76d26035b5e066ef5b8478f" translate="yes" xml:space="preserve">
          <source>Constructing DataFrame from a dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebe17340a20d958938f8e9ecd5c5b3324a912a5" translate="yes" xml:space="preserve">
          <source>Constructing DataFrame from a dictionary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd7f27f002e9e4f78a40da719bf4e71195f5760" translate="yes" xml:space="preserve">
          <source>Constructing DataFrame from numpy ndarray:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87af03046b9e66dfac444c84b7ac7c99ecb80ae1" translate="yes" xml:space="preserve">
          <source>Constructing a DataFrame from values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="012432c39543dcf363bbc592f33be10a7ca22854" translate="yes" xml:space="preserve">
          <source>Constructor from tuples, also record arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d148eb41265f7dd0daba9fcfe89643f553505f08" translate="yes" xml:space="preserve">
          <source>Container for sparse data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41786c242ec8617c43c19c7fe93e87fddd1c1414" translate="yes" xml:space="preserve">
          <source>Container for sparse tabular data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2e240a8dc2b408532a438d738e6979490b1a57" translate="yes" xml:space="preserve">
          <source>Containing integers indicating the day number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19fe4bfadf56dff6f574707ff95a0c845b319ac" translate="yes" xml:space="preserve">
          <source>Contains data stored in Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a067da24118edb44e2864653b9b937a486c22f" translate="yes" xml:space="preserve">
          <source>Context manager to temporarily set options in the &lt;code&gt;with&lt;/code&gt; statement context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625e2b393e8f52779cbc6606062d0416f8ed9804" translate="yes" xml:space="preserve">
          <source>Contrasting to an integer rolling window, this will roll a variable length window corresponding to the time period. The default for min_periods is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0e0ac8e19f1c4243218cd10c77b844bcb4f2c7" translate="yes" xml:space="preserve">
          <source>Contributing to pandas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5f89ee8d241726aaa6846a0be60ed8f2856db4" translate="yes" xml:space="preserve">
          <source>Contributing to the code base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33b1ce6f06399250f8888ffc1f1e2e2443a0642" translate="yes" xml:space="preserve">
          <source>Contributing to the documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdf4dcbfc6957b54f6b29f687bfd9e9b6780eed" translate="yes" xml:space="preserve">
          <source>Contributing to the documentation benefits everyone who uses &lt;em&gt;pandas&lt;/em&gt;. We encourage you to help us improve the documentation, and you don&amp;rsquo;t have to be an expert on &lt;em&gt;pandas&lt;/em&gt; to do so! In fact, there are sections of the docs that are worse off after being written by experts. If something in the docs doesn&amp;rsquo;t make sense to you, updating the relevant section after you figure it out is a great way to ensure it will help the next person.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8832c3e2e3f23486fe2072409d098890bbee983d" translate="yes" xml:space="preserve">
          <source>Contributing your changes to pandas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b86a15cbf15cfcc4652364edd0364bdab47cfc" translate="yes" xml:space="preserve">
          <source>Control field quoting behavior per &lt;code&gt;csv.QUOTE_*&lt;/code&gt; constants. Use one of QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a8f1ca48fd69916c94ac709867b7dfeb548c5a" translate="yes" xml:space="preserve">
          <source>Control how &lt;code&gt;threshold&lt;/code&gt; is broadcast with &lt;code&gt;axis&lt;/code&gt;. In this case &lt;code&gt;threshold&lt;/code&gt; should be the same length as the axis specified by &lt;code&gt;axis&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ae1f56f8fd9dfb877392ba5a0729ff18e381ca" translate="yes" xml:space="preserve">
          <source>Control quoting of &lt;code&gt;quotechar&lt;/code&gt; inside a field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2f5e59c2a27291c65c8b21353aee16be9fb07d" translate="yes" xml:space="preserve">
          <source>Control raising of exceptions on invalid data for provided dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3b6ebcd59c07677fb2061b63075c3624b1b0e3" translate="yes" xml:space="preserve">
          <source>Controls the SQL insertion clause used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff066a19ff3478f6953e2db2d2556599474ff870" translate="yes" xml:space="preserve">
          <source>Controls the reordering of the labels. If the result is going to be an inner level in a MultiIndex, n_shuffle will need to be greater than one. The size of each label must divisible by n_shuffle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b1238f643c3c906d3ceb1a7528799a293e292d" translate="yes" xml:space="preserve">
          <source>Convenience method for frequency conversion and resampling of time series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f27b308794c8239c938eda8d04b29aa26c10249" translate="yes" xml:space="preserve">
          <source>Convenience method for frequency conversion and resampling of time series. Object must have a datetime-like index (&lt;code&gt;DatetimeIndex&lt;/code&gt;, &lt;code&gt;PeriodIndex&lt;/code&gt;, or &lt;code&gt;TimedeltaIndex&lt;/code&gt;), or pass datetime-like values to the &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;level&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d8c8a3a4fd36d67f6c00a234fa5d150d3b42d9" translate="yes" xml:space="preserve">
          <source>Convenience method for setting one or more non-data dependent properties or each cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a4cb39ee15139658c3f92e262c816066bcefad" translate="yes" xml:space="preserve">
          <source>Convenience method for subsetting final periods of time series data based on a date offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6886e5d4b45860a2e05cca86ac213a9fbe353d99" translate="yes" xml:space="preserve">
          <source>Convenience method for subsetting initial periods of time series data based on a date offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92ab372d80ed40ec871da9ae4fd41639067fd06" translate="yes" xml:space="preserve">
          <source>Convention for converting period to timestamp; start of period vs. end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a882b71dce28313d041fe89a77a759d532f63968" translate="yes" xml:space="preserve">
          <source>Conventions for the examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9151f8433f795cb0f0b5b6743aeb7de77ec49f00" translate="yes" xml:space="preserve">
          <source>Conversion</source>
          <target state="translated">Conversion</target>
        </trans-unit>
        <trans-unit id="6fec7febb356ad522bc8d22e90dfe1ac173a9e6a" translate="yes" xml:space="preserve">
          <source>Convert (key, value) pairs to DataFrame. The keys will be the axis index (usually the columns, but depends on the specified orientation). The values should be arrays or Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ae2369526c6be9721accc614f0449ffe23ba4c" translate="yes" xml:space="preserve">
          <source>Convert DataFrame from DatetimeIndex to PeriodIndex with desired frequency (inferred from index if not passed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd10b08a9f1917ee38541b14b04c96bb07cc6b4" translate="yes" xml:space="preserve">
          <source>Convert DataFrame to HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5448a08a19d92a52b5d6d2a703d5d058ecb69a4e" translate="yes" xml:space="preserve">
          <source>Convert DataFrame to a NumPy record array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad9bd966228050548204ebe1a46fd26c46b60c9" translate="yes" xml:space="preserve">
          <source>Convert DataFrame to a SparseDataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9ba0c2b44356fd5b7336adbb90e8c5a986cae6" translate="yes" xml:space="preserve">
          <source>Convert DataFrame to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd4ff87d0195f2ee5e54de312ae1f0e81d062ef" translate="yes" xml:space="preserve">
          <source>Convert Period to desired frequency, either at the start or end of the interval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1668981ba26299df9ba520752415387adb8eb1e" translate="yes" xml:space="preserve">
          <source>Convert Series from DatetimeIndex to PeriodIndex with desired frequency (inferred from index if not passed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8245ef72161a95397e161c7edc51a789c55e54c" translate="yes" xml:space="preserve">
          <source>Convert Series to DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2eadda8043b3d0e3e336ed878d99a1ae3fbe0f" translate="yes" xml:space="preserve">
          <source>Convert Series to SparseSeries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0659cf8109997476cdd031d6c79f67e7f38cbb6f" translate="yes" xml:space="preserve">
          <source>Convert Series to dummy codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9ed50386b0abed9de4fb7e00e4f05f8250c32f" translate="yes" xml:space="preserve">
          <source>Convert Series to {label -&amp;gt; value} dict or dict-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9192b5baeb1bf826e1a94e598bb1589266670150" translate="yes" xml:space="preserve">
          <source>Convert TimeSeries to specified frequency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73f9a022b30a4a46c62e725ec8461cc5efccd6d" translate="yes" xml:space="preserve">
          <source>Convert TimeStamp to a Julian Date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efa1ee46f270298567979980d474e9dd26bcecd" translate="yes" xml:space="preserve">
          <source>Convert TimeStamp to a Julian Date. 0 Julian date is noon January 1, 4713 BC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f495ea9625b3a8a0b5ca87468b86d5febdf7ddef" translate="yes" xml:space="preserve">
          <source>Convert URLs to HTML links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e38433291573fbc2f66154c196eafeceabaeacd" translate="yes" xml:space="preserve">
          <source>Convert a DataFrame to JSON format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f7e198022a8240aeb59bbdb8f7bba89057311b" translate="yes" xml:space="preserve">
          <source>Convert a DataFrame to a JSON string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251d6ae2d4d9a9b9b77d5d2ceba86a5d498c4318" translate="yes" xml:space="preserve">
          <source>Convert a DataFrame with sparse values to dense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f7a6722f97e72ecaa0785e151f938741d9cd1fb" translate="yes" xml:space="preserve">
          <source>Convert a JSON string to pandas object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13200a8efaf83692d0bcba83328b89a43f4cda90" translate="yes" xml:space="preserve">
          <source>Convert a MultiIndex to an Index of Tuples containing the level values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7412691350e97ddab2a9f7c07be5929c99961163" translate="yes" xml:space="preserve">
          <source>Convert a Series to a JSON string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb13a22426ce951d0f20fe372fc8608fd20f50c0" translate="yes" xml:space="preserve">
          <source>Convert a Timestamp object to a native Python datetime object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029a0abcf9b7baa3e6d2331a0c579ce6ed663092" translate="yes" xml:space="preserve">
          <source>Convert a pandas Timedelta object into a python timedelta object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a768eed4005fa3797ef930b704b7807bbe78e2" translate="yes" xml:space="preserve">
          <source>Convert an Index to a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ce760e54e3756dee844149eabf818a3a49372d" translate="yes" xml:space="preserve">
          <source>Convert argument to Timedelta type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cb07153c89e02ce2c3d09df41a7f259327d1ec" translate="yes" xml:space="preserve">
          <source>Convert argument to a numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab19c15520845283d2c56c980b655321f6fa5302" translate="yes" xml:space="preserve">
          <source>Convert argument to datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211003d7e6953c3d6a642f78c0763f731c9ac76c" translate="yes" xml:space="preserve">
          <source>Convert argument to numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547c981f7ecac231688e744f3d6b75449986023e" translate="yes" xml:space="preserve">
          <source>Convert argument to timedelta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b411ee17acbb6a8dc8a1552e9e66cec6ad7ff5f" translate="yes" xml:space="preserve">
          <source>Convert arrays to MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d6df9c5ef9972e5a11b89faf7b59a2632f849c" translate="yes" xml:space="preserve">
          <source>Convert categorical variable into dummy/indicator variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395466401b0f6f0484ed8782c463dabaf7e2242e" translate="yes" xml:space="preserve">
          <source>Convert continuous data into bins (Categorical of Interval objects) based on quantiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0575e7f909ccd21d65c03195f8d43526b35171d0" translate="yes" xml:space="preserve">
          <source>Convert continuous data into discrete bins (Categorical of Interval objects).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b17ac4f257d684ba3c04cdde8d1b0c80c5dced0" translate="yes" xml:space="preserve">
          <source>Convert date variables to DataFrame time values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecb230a5b7cd5a90809b932fa202f3e0fe21924" translate="yes" xml:space="preserve">
          <source>Convert input into a pandas only dtype object or a numpy dtype object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8799be9bd8f2ecd14c60572ed0d8b0565cd86768" translate="yes" xml:space="preserve">
          <source>Convert integral floats to int (i.e., 1.0 &amp;ndash;&amp;gt; 1). If False, all numeric data will be read in as floats: Excel stores all numbers as floats internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe52668313195795246b6c43899c01276320943e" translate="yes" xml:space="preserve">
          <source>Convert list of arrays to MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7011571e23e3a0238615db37ab8fd087511de8" translate="yes" xml:space="preserve">
          <source>Convert list of tuples to MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193dd6c03f9b9a18bb2e9bff0c3ce5834f2d111f" translate="yes" xml:space="preserve">
          <source>Convert list of tuples to a MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adc861ebb48757f903e42cdf03c8b3eb35886a6" translate="yes" xml:space="preserve">
          <source>Convert naive Timestamp to local time zone, or remove timezone from tz-aware Timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432dfe0656c600fc2af69fe340735d9352ca1e12" translate="yes" xml:space="preserve">
          <source>Convert strings in the Series/Index to be capitalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25df3472f3e878c5d048c68eed8eea0fddd37501" translate="yes" xml:space="preserve">
          <source>Convert strings in the Series/Index to be casefolded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5501fcf303b04f64afadc82708b9571888b32e6a" translate="yes" xml:space="preserve">
          <source>Convert strings in the Series/Index to be swapcased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dc1c7fa4bf61f983a381fac64746f31e73b005" translate="yes" xml:space="preserve">
          <source>Convert strings in the Series/Index to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2397a4f6eadcc2b9c0ad7395b9463cb976fca7c" translate="yes" xml:space="preserve">
          <source>Convert strings in the Series/Index to titlecase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27b33c20818801bfc90ac0f832c7bf47dc3ed35" translate="yes" xml:space="preserve">
          <source>Convert strings in the Series/Index to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc7a4397d8e2fa67aed94d9280fbe4cb9ebc9df" translate="yes" xml:space="preserve">
          <source>Convert structured or record ndarray to DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f294bd89a0d47fcc3ce89a61a56efe422ea0c5c9" translate="yes" xml:space="preserve">
          <source>Convert the DataFrame to a NumPy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb7dce6da52ec837fda2451b8207e3af4452fb9" translate="yes" xml:space="preserve">
          <source>Convert the DataFrame to a dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6671638e80bad74c7c851a86571c095c2f9ee976" translate="yes" xml:space="preserve">
          <source>Convert the Period Array/Index to the specified frequency &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea6f475b608d4567ddc42bcee67b7acbd7eb349" translate="yes" xml:space="preserve">
          <source>Convert the Timestamp to a NumPy datetime64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4e7cb59ee13c119317c37c023cc3e8ddec03b9" translate="yes" xml:space="preserve">
          <source>Convert the Timestamp to a NumPy timedelta64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63bf629779457da7c8add61fad9ea5dc95aa3143" translate="yes" xml:space="preserve">
          <source>Convert the characters &amp;lt;, &amp;gt;, and &amp;amp; to HTML-safe sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30487a4c23cf4a086e447ee1e814f38e5bff5a5d" translate="yes" xml:space="preserve">
          <source>Convert the frame to a dict of dtype -&amp;gt; Constructor Types that each has a homogeneous dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae03c76d8ff0cac16ca1234231af84eb70d2ddf" translate="yes" xml:space="preserve">
          <source>Convert the frame to its Numpy-array representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9abdb86fdfc0589c2671b85f4ef84a91e6e9f0" translate="yes" xml:space="preserve">
          <source>Convert the given argument to datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49313bf55a3e83b8a45abec8006a437917a533c" translate="yes" xml:space="preserve">
          <source>Convert the object to a JSON string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6165e16004e2dad0e768be0eda3deea16bc7025" translate="yes" xml:space="preserve">
          <source>Convert times to midnight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508e86b90f7b1369b33b86e9ed8a53f1fef9e6cc" translate="yes" xml:space="preserve">
          <source>Convert to Index using specified date_format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11dd93b7655393ba3b49ca30eaeed519cf5a71b" translate="yes" xml:space="preserve">
          <source>Convert to SparseDataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28f95d0e817a96ddae6751d24f040122c862fe" translate="yes" xml:space="preserve">
          <source>Convert to categorical type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffd9a6b71c619b4a905e8851fb77f840d082e28" translate="yes" xml:space="preserve">
          <source>Convert to ordered categorical type with custom ordering:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042193775bdca8815fdc22e72c637bffc1863504" translate="yes" xml:space="preserve">
          <source>Convert tz-aware Datetime Array/Index from one time zone to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b938c6884bb9cc60fdb4a1976d576e29c14ef55d" translate="yes" xml:space="preserve">
          <source>Convert tz-aware DatetimeIndex from one time zone to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e9c905f0114691e551980ea5f346366ce8a0a1" translate="yes" xml:space="preserve">
          <source>Convert tz-aware Timestamp to another time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923e670c5ac4b0643ad8350a30f1dd3357173c0c" translate="yes" xml:space="preserve">
          <source>Convert tz-aware axis to target time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929957ff9ee78b2f34d3e8819e16dfa0c9b008ef" translate="yes" xml:space="preserve">
          <source>Converting between representations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480659b3a0a52898898d6fc8bfe2a002081a19a5" translate="yes" xml:space="preserve">
          <source>Converting numbers by specifying the &lt;code&gt;unit&lt;/code&gt; keyword argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ada3af4b6d80c0981e885aaa8120403d541e39" translate="yes" xml:space="preserve">
          <source>Converting to timestamps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2539f1b735960c1b272d7f5f7e836b79c4928117" translate="yes" xml:space="preserve">
          <source>Converts DatetimeArray/Index to PeriodArray/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd4e55c46cc6729426ae94ee59407df423c955f" translate="yes" xml:space="preserve">
          <source>Converts all characters to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e80f82a0aaa38ff96f4dadf77a79d131500c78" translate="yes" xml:space="preserve">
          <source>Converts all characters to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7662b099873eb0b7e4b985046e9783d1c9acf3fa" translate="yes" xml:space="preserve">
          <source>Converts first character of each word to uppercase and remaining to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dada1f470ae3b0c997ecd81fff45c5017c75c5b" translate="yes" xml:space="preserve">
          <source>Converts first character to uppercase and remaining to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139c4abbd1867cf69458be46595489d78f707945" translate="yes" xml:space="preserve">
          <source>Converts the DataFrame back to the its dense form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f6e3da693aa5eb124804b05fee01cc84f71c47" translate="yes" xml:space="preserve">
          <source>Converts uppercase to lowercase and lowercase to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae28e153fd42b3087fa9d3d89c76a5aaf5e4b04c" translate="yes" xml:space="preserve">
          <source>Cookbook</source>
          <target state="translated">Cookbook</target>
        </trans-unit>
        <trans-unit id="300817d183966bf533ee8d9a40a2bfd74cbb6b13" translate="yes" xml:space="preserve">
          <source>Coordinates for the X axis. By default uses the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47167081690577152028777bc085c6c9377c0bf5" translate="yes" xml:space="preserve">
          <source>Copy data from inputs. Only affects DataFrame / 2d ndarray input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9831705b4c93daba749807a79e337979fb65e8" translate="yes" xml:space="preserve">
          <source>Copy input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790253ddf2ee43dcd73c92d7c30fba984f99036c" translate="yes" xml:space="preserve">
          <source>Copy object to the system clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa6198dce662342b77c8c7e936a7322260462a5" translate="yes" xml:space="preserve">
          <source>Copy of input object, shifted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d43ad62957896d6bdc825328857ec76a0aa89b" translate="yes" xml:space="preserve">
          <source>Copy the contents of a DataFrame to the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567f1505e7bcb0f0dc1ad4e7485e9255a9c10576" translate="yes" xml:space="preserve">
          <source>Copy the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6dbff8d3579f6abf0870581acf0d5c69aac6b9" translate="yes" xml:space="preserve">
          <source>Copy the input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2649d51f5a8a206c5e3e7d6af385a7554867217" translate="yes" xml:space="preserve">
          <source>Copy the meta-data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b7de9894fd26b8d14ca6988e963239baff6ad4" translate="yes" xml:space="preserve">
          <source>Copying</source>
          <target state="translated">Copying</target>
        </trans-unit>
        <trans-unit id="f16896a82da944b18274b0a1fa5e0cf555b93d36" translate="yes" xml:space="preserve">
          <source>Correlation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b24c8f45bd3343486e006870531b8626b62f508" translate="yes" xml:space="preserve">
          <source>Correlation with other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5569e3a4ffb278748e42f26fab24c3e528e9eca2" translate="yes" xml:space="preserve">
          <source>Corresponds to the axis that contains the Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b9e3959d70993007274bb21ef9fb5d454a625b" translate="yes" xml:space="preserve">
          <source>Count distinct observations over requested axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9e6df1dc79d380ca339cc44842d73d6f5f4e3a" translate="yes" xml:space="preserve">
          <source>Count non-NA cells for each column or row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed70b7cc34baeccac379851d4f5364b28db8b190" translate="yes" xml:space="preserve">
          <source>Count non-NA/null observations in the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3b18a042a09e641a332250c963b7d0d76eb804" translate="yes" xml:space="preserve">
          <source>Count number of non-NA/null observations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fc274eb33353db96c059dc4d5d3a3c28e36347" translate="yes" xml:space="preserve">
          <source>Count occurrences of pattern in each string of the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182488283d0330e4146cc1d62bbb2e2ddae60335" translate="yes" xml:space="preserve">
          <source>Count occurrences of pattern or regular expression in each string of the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc8f164656d71cd16aa4bc81f369e1fefe40071" translate="yes" xml:space="preserve">
          <source>Count of the full DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6697956f00091dc096077f03a32a29c2e982d5e5" translate="yes" xml:space="preserve">
          <source>Count of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5916f4131dc45e6c58e4178a18d12d482d5dae82" translate="yes" xml:space="preserve">
          <source>Counts for each &lt;strong&gt;row&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b169ae64ef9caad70f71a12c7b215a3f41c167" translate="yes" xml:space="preserve">
          <source>Counts for one level of a &lt;code&gt;MultiIndex&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37d133ea5c1b52753b3893f902c233ee8442bb5" translate="yes" xml:space="preserve">
          <source>Covariance</source>
          <target state="translated">Covariance</target>
        </trans-unit>
        <trans-unit id="ce0ba8f1e706ae79135a9a0d76d01992ee85d578" translate="yes" xml:space="preserve">
          <source>Covariance between Series and other normalized by N-1 (unbiased estimator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09224cc135683a1c45e30d37dd58be490bf89e5" translate="yes" xml:space="preserve">
          <source>Create RangeIndex from a range object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406a44fc1fbdf90d769dd866c4a8552d5173cf1d" translate="yes" xml:space="preserve">
          <source>Create a DataFrame from a dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863d95fedf0a8cd1a82d6fecb1b06ddeb3639541" translate="yes" xml:space="preserve">
          <source>Create a DataFrame with a column containing the Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346f5cb919d86ca35388ddda7c1a75789b8e68c8" translate="yes" xml:space="preserve">
          <source>Create a DataFrame with the levels of the MultiIndex as columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc3d301d3238111665cda62f2f3fe6f3e4ff088" translate="yes" xml:space="preserve">
          <source>Create a DataFrame:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1c72a5ed26f40007436b82c84c9aa9741a6217" translate="yes" xml:space="preserve">
          <source>Create a MultiIndex from the cartesian product of iterables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe5e097ff98a5ae73c41015870f51f2fa5b608" translate="yes" xml:space="preserve">
          <source>Create a MultiIndex using an Index and a column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86275ff928d726a335cbdde9185db4a08593e1eb" translate="yes" xml:space="preserve">
          <source>Create a MultiIndex using columns &amp;lsquo;year&amp;rsquo; and &amp;lsquo;month&amp;rsquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c383af8e5735be3504b09af2fde900907287ea0" translate="yes" xml:space="preserve">
          <source>Create a MultiIndex using two Series:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28c348bb53cf13685b5cb249c388f75bae63cfb" translate="yes" xml:space="preserve">
          <source>Create a MultiIndex:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00fe9864ab37baf32b63d0d75b2254e7921ec10" translate="yes" xml:space="preserve">
          <source>Create a Series with both index and values equal to the index keys useful with map for returning an indexer based on an index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc15d318212f5f888184be8b6bf754975eb32764" translate="yes" xml:space="preserve">
          <source>Create a Series with both index and values equal to the index keys useful with map for returning an indexer based on an index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0762e37cb55d12fc3a8627f71426711a69d37555" translate="yes" xml:space="preserve">
          <source>Create a SparseSeries from a scipy.sparse.coo_matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb36efbf2f2f70fdd76fa262f5bffced633a2bd" translate="yes" xml:space="preserve">
          <source>Create a Table schema from &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51593d1ac8d7b1b017cb23eab1d877918c14d3c" translate="yes" xml:space="preserve">
          <source>Create a dataframe from a dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78155128710ae692d568e9e42c2b122ce3f408b" translate="yes" xml:space="preserve">
          <source>Create a dataframe with some fictional data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc6a0b2603b052eefb8c91c89877cf677645837" translate="yes" xml:space="preserve">
          <source>Create a fixed-frequency DatetimeIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d653c4bdcbb69d267ebe9062f84d8b7aca6e01" translate="yes" xml:space="preserve">
          <source>Create a fixed-frequency PeriodIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f7fab5ded0cbb79702ec81f24260594975058a" translate="yes" xml:space="preserve">
          <source>Create a fixed-frequency TimedeltaIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10aada06ad4fe3af35a489425cb5e26da66ce282" translate="yes" xml:space="preserve">
          <source>Create a new DataFrame from a scipy sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6955f10daeb003a30af22cd695477623e13e3942" translate="yes" xml:space="preserve">
          <source>Create a new MultiIndex from the current that removes unused levels, meaning that they are not expressed in the labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508dd857ab4da0f34f0ec6c327a055f200b812cc" translate="yes" xml:space="preserve">
          <source>Create a new PeriodArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fe3a79bf960c471b6a20685e7eb27d48a77b56" translate="yes" xml:space="preserve">
          <source>Create a new array from data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d2811d068b107984134b58886b19fbf68696b4" translate="yes" xml:space="preserve">
          <source>Create a new index and reindex the dataframe. By default values in the new index that do not have corresponding records in the dataframe are assigned &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930a427e5fc0ea70a2d04a6f79b44084a8f84568" translate="yes" xml:space="preserve">
          <source>Create a new view of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fe6a315bf55639c91dec886f9b63d6876e1122" translate="yes" xml:space="preserve">
          <source>Create a pivot table as a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec92272cc6c7e0868ebd38f2555a945154db136" translate="yes" xml:space="preserve">
          <source>Create a scatter plot with varying marker point size and color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3acc4ab3b92970e57a6877817cafe030b5639e7" translate="yes" xml:space="preserve">
          <source>Create a scipy.sparse.coo_matrix from a SparseSeries with MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3b4ba65194a4caf1439a5b565d06fe08eb7514" translate="yes" xml:space="preserve">
          <source>Create a series with typical summer temperatures for each city.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93634fc3654eb94310ada73989f4a5d20119ec0c" translate="yes" xml:space="preserve">
          <source>Create a series:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6d70a448e878ade9c7f6a624fe3dc05423bffa" translate="yes" xml:space="preserve">
          <source>Create a spreadsheet-style pivot table as a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600dc1747164883a6f910cd51ed361f2f1060d36" translate="yes" xml:space="preserve">
          <source>Create a spreadsheet-style pivot table as a DataFrame. The levels in the pivot table will be stored in MultiIndex objects (hierarchical indexes) on the index and columns of the result DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7dac405fe31ee956d497092b5a9b44adff2611" translate="yes" xml:space="preserve">
          <source>Create a table from scratch with 3 rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3f487cd37b45fb182235639e8bcbecae4478ae" translate="yes" xml:space="preserve">
          <source>Create an Index with values cast to dtypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a05f5f3bd0ec10b2c6981293f9511d11c14699" translate="yes" xml:space="preserve">
          <source>Create an Index with values cast to dtypes. The class of a new Index is determined by dtype. When conversion is impossible, a ValueError exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17bc9059c2a718ebcfb2643eca926dd1d3b6283" translate="yes" xml:space="preserve">
          <source>Create an IntegerArray with &lt;a href=&quot;pandas.array#pandas.array&quot;&gt;&lt;code&gt;pandas.array()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415b3ad3f5d5fec6811715fcb43c61600d019de3" translate="yes" xml:space="preserve">
          <source>Create an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0099051f0e1e34bef0a815fe6cffbdcb11cbcb" translate="yes" xml:space="preserve">
          <source>Create an in-memory SQLite database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e350aec48df71b9fd25c686e694d3478dcec54da" translate="yes" xml:space="preserve">
          <source>Create an object to more easily perform multi-index slicing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8ba7148ec0b032d10a6428f85ff32000933a55" translate="yes" xml:space="preserve">
          <source>Create index with target&amp;rsquo;s values (move/add/delete values as necessary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6cd68569380f10f7de7875786407376534e964" translate="yes" xml:space="preserve">
          <source>Create the data required for the example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb7e4d7f09f9fddf2e49a5f40d0458a51d725ae" translate="yes" xml:space="preserve">
          <source>Create, write to and save a workbook:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8309bdec080a114f1274f890114f0e6930604af0" translate="yes" xml:space="preserve">
          <source>Creates DataFrame object from dictionary by columns or by index allowing dtype specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed22f369920ce5a4e73b61d2805e3b99c67af7ab" translate="yes" xml:space="preserve">
          <source>Creating a &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; by passing a NumPy array, with a datetime index and labeled columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6201ea13e17671a006cb6b9b603313aab21fd5d2" translate="yes" xml:space="preserve">
          <source>Creating a &lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; by passing a list of values, letting pandas create a default integer index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2034dd4ac216c7401bb7fe60b2ee2e218bf2e5f" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;DataFrame&lt;/code&gt; by passing a dict of objects that can be converted to series-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6b0693b5ed982e4725fbd2e0d0dd0e5b2ff6cb" translate="yes" xml:space="preserve">
          <source>Creating a DatetimeIndex based on &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;periods&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; has been deprecated in favor of &lt;a href=&quot;pandas.date_range#pandas.date_range&quot;&gt;&lt;code&gt;date_range()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e929481833f1034dc1aa48699c90b088062ff6" translate="yes" xml:space="preserve">
          <source>Creating a MultiIndex (hierarchical index) object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece78b03f1f2135fae8691488939ec29db25535a" translate="yes" xml:space="preserve">
          <source>Creating a PeriodIndex based on &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;periods&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; has been deprecated in favor of &lt;a href=&quot;pandas.period_range#pandas.period_range&quot;&gt;&lt;code&gt;period_range()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23a5e9c9eb1786174383274caf4c6009c90a284" translate="yes" xml:space="preserve">
          <source>Creating a Python environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9504a0159183d8fcfcb2e6290f6684778245ee6" translate="yes" xml:space="preserve">
          <source>Creating a Python environment (pip)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f537d1136a10e29c51deda2b6efad136ed5874b9" translate="yes" xml:space="preserve">
          <source>Creating a TimedeltaIndex based on &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;periods&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; has been deprecated in favor of &lt;a href=&quot;pandas.timedelta_range#pandas.timedelta_range&quot;&gt;&lt;code&gt;timedelta_range()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b77b0d13fff3dc6b98b64cd707f520e4ed32d5" translate="yes" xml:space="preserve">
          <source>Creating a branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b72c80c2d8b49724b0c973e0dc2b4e6c48183f3" translate="yes" xml:space="preserve">
          <source>Creating a development environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e810755c1d897500dd980c845a207c17bd3b977f" translate="yes" xml:space="preserve">
          <source>Creating example data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9ef3965244bb03e79728dacd9add9fe05392f5" translate="yes" xml:space="preserve">
          <source>Creating indicator variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9a60863af06856d7b0bc3c12cf5c6ea72b5836" translate="yes" xml:space="preserve">
          <source>Credentials for accessing Google APIs. Use this parameter to override default credentials, such as to use Compute Engine &lt;code&gt;google.auth.compute_engine.Credentials&lt;/code&gt; or Service Account &lt;code&gt;google.oauth2.service_account.Credentials&lt;/code&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe895c695079f56dc327579721317d06326507a7" translate="yes" xml:space="preserve">
          <source>Cross tabulation of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a51880616891c2e06e43b4c75d90be140ed9744" translate="yes" xml:space="preserve">
          <source>Cross tabulations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0f8ce2fc635dee92aecbd76e04e384a02b4001" translate="yes" xml:space="preserve">
          <source>Cross-section from the original Series or DataFrame corresponding to the selected index levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6059dfd066daa8f744a911df7591efcfe964f618" translate="yes" xml:space="preserve">
          <source>Cubic spline data interpolator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c410bc78c9eeecc32adaf925bec91165858e4b7" translate="yes" xml:space="preserve">
          <source>Cumulative max for each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9782a2c53158f833a4129ad809b7eeb1b70526e2" translate="yes" xml:space="preserve">
          <source>Cumulative min for each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76528b89e7797a2c444181a7af4db8307d33098e" translate="yes" xml:space="preserve">
          <source>Cumulative product for each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc19b54b728e5f6cba3cedcae7d554d239d14b1f" translate="yes" xml:space="preserve">
          <source>Cumulative sum for each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ccca60030fc806c05cc3f704e504287ab972f2" translate="yes" xml:space="preserve">
          <source>Currently, &amp;lsquo;c&amp;rsquo; unsupported options include the following parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9261f6d90ae290998608fa09ac06e2d51c611b" translate="yes" xml:space="preserve">
          <source>Currently, only &lt;code&gt;numpy.dtype(&quot;timedelta64[ns]&quot;)&lt;/code&gt; is accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb47bd61d78143650abc6c410de62c11e8101e97" translate="yes" xml:space="preserve">
          <source>Currently, pandas will infer an extension dtype for sequences of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85584c1fed0b891e56ca649a87ddd79533e18890" translate="yes" xml:space="preserve">
          <source>Custom NA values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8820295f9c281c178c471b09a5cc915fce7024b3" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay</source>
          <target state="translated">CustomBusinessDay</target>
        </trans-unit>
        <trans-unit id="eb3a7781d5c0d29e1e53805344d1c982260eb778" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.apply()</source>
          <target state="translated">CustomBusinessDay.apply()</target>
        </trans-unit>
        <trans-unit id="6af4d4bdc60fe89f848badd11038745e473f4375" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.apply_index()</source>
          <target state="translated">CustomBusinessDay.apply_index()</target>
        </trans-unit>
        <trans-unit id="5fb62382b6321ca23f92edf50723cab8c055f7c7" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.base</source>
          <target state="translated">CustomBusinessDay.base</target>
        </trans-unit>
        <trans-unit id="1be50d7d71ecc23d4ff9f431f9a9273d6c6fe494" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.copy()</source>
          <target state="translated">CustomBusinessDay.copy()</target>
        </trans-unit>
        <trans-unit id="4dc2664b72b2c1a0492ff24313830520325d04d3" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.freqstr</source>
          <target state="translated">CustomBusinessDay.freqstr</target>
        </trans-unit>
        <trans-unit id="0d3fb5060af34a218fd7f2c4c608add4bc4630eb" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.isAnchored()</source>
          <target state="translated">CustomBusinessDay.isAnchored()</target>
        </trans-unit>
        <trans-unit id="b6f4ed62e61fad69f97d2dba3af7938f377832c2" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.kwds</source>
          <target state="translated">CustomBusinessDay.kwds</target>
        </trans-unit>
        <trans-unit id="bab255cb07105932783b114abc795dcd5280d006" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.name</source>
          <target state="translated">CustomBusinessDay.name</target>
        </trans-unit>
        <trans-unit id="15804868ac2df56b3d0fdcbdc168e63af0b6bbca" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.nanos</source>
          <target state="translated">CustomBusinessDay.nanos</target>
        </trans-unit>
        <trans-unit id="5b8f40de6d66037200061dcde69f6a62a8346c02" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.normalize</source>
          <target state="translated">CustomBusinessDay.normalize</target>
        </trans-unit>
        <trans-unit id="8252784eb05f52868eafa699eac7abd1c6e665df" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.offset</source>
          <target state="translated">CustomBusinessDay.offset</target>
        </trans-unit>
        <trans-unit id="00b8e9bcc9b8fd5454797603af0e5e57b94bbee6" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.onOffset()</source>
          <target state="translated">CustomBusinessDay.onOffset()</target>
        </trans-unit>
        <trans-unit id="13f67b68909b60a129c6d1db6f393dfe486eeed6" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.rollback()</source>
          <target state="translated">CustomBusinessDay.rollback()</target>
        </trans-unit>
        <trans-unit id="a8f553042bd05d33061f77d2b1cebff0c7d60860" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.rollforward()</source>
          <target state="translated">CustomBusinessDay.rollforward()</target>
        </trans-unit>
        <trans-unit id="750afb02245cfa3ff51b3edf6fc84dd56f171cef" translate="yes" xml:space="preserve">
          <source>CustomBusinessDay.rule_code</source>
          <target state="translated">CustomBusinessDay.rule_code</target>
        </trans-unit>
        <trans-unit id="a53b3554eb5b76e1ba3a68cfb43dfd0a895305f0" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour</source>
          <target state="translated">CustomBusinessHour</target>
        </trans-unit>
        <trans-unit id="94c2a5297c3bde2f65d8531ecdde6955f8606f8a" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.apply()</source>
          <target state="translated">CustomBusinessHour.apply()</target>
        </trans-unit>
        <trans-unit id="76aac327c30012cea521764efae0ba21b9eedafb" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.apply_index()</source>
          <target state="translated">CustomBusinessHour.apply_index()</target>
        </trans-unit>
        <trans-unit id="0300a72eddfb711949a8cb12be8c2d686a6c5341" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.base</source>
          <target state="translated">CustomBusinessHour.base</target>
        </trans-unit>
        <trans-unit id="46d3630cb1aeec129d7c24fa445b70ac85be209e" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.copy()</source>
          <target state="translated">CustomBusinessHour.copy()</target>
        </trans-unit>
        <trans-unit id="1abc275d3da20cbb8b1d474493c6c358b0a6fc7d" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.freqstr</source>
          <target state="translated">CustomBusinessHour.freqstr</target>
        </trans-unit>
        <trans-unit id="e0256f7abeabf113046ee3fa723526014d9fcebb" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.isAnchored()</source>
          <target state="translated">CustomBusinessHour.isAnchored()</target>
        </trans-unit>
        <trans-unit id="065e4fdeda4229adbb2b76840a4aed3fcdd3151c" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.kwds</source>
          <target state="translated">CustomBusinessHour.kwds</target>
        </trans-unit>
        <trans-unit id="14065da41db9727d0c3e5a9a7cc4ae7a5450a210" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.name</source>
          <target state="translated">CustomBusinessHour.name</target>
        </trans-unit>
        <trans-unit id="b5f32a6123c86cc8adec3f0f2f63efdb4b579443" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.nanos</source>
          <target state="translated">CustomBusinessHour.nanos</target>
        </trans-unit>
        <trans-unit id="e4d75fe1eb29640d3fbf29fedd0990c3c3b6a0ca" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.next_bday</source>
          <target state="translated">CustomBusinessHour.next_bday</target>
        </trans-unit>
        <trans-unit id="3e9df1e907275369b740d36c3f78b44ced55fe11" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.normalize</source>
          <target state="translated">CustomBusinessHour.normalize</target>
        </trans-unit>
        <trans-unit id="c37db94abac1e30b0affe2dbc61a63ed31952bbd" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.offset</source>
          <target state="translated">CustomBusinessHour.offset</target>
        </trans-unit>
        <trans-unit id="ac9213389689e955f1ab22ed2b529b61e8d57b85" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.onOffset()</source>
          <target state="translated">CustomBusinessHour.onOffset()</target>
        </trans-unit>
        <trans-unit id="964b04bb7b50a7fe0149aae7c9237d18dd9d9755" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.rollback()</source>
          <target state="translated">CustomBusinessHour.rollback()</target>
        </trans-unit>
        <trans-unit id="847e7728a56e7288ee2daf9d906d7044729d653f" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.rollforward()</source>
          <target state="translated">CustomBusinessHour.rollforward()</target>
        </trans-unit>
        <trans-unit id="056e0b8f3bed099a6afd7ea7fd4bdd268cbf9c86" translate="yes" xml:space="preserve">
          <source>CustomBusinessHour.rule_code</source>
          <target state="translated">CustomBusinessHour.rule_code</target>
        </trans-unit>
        <trans-unit id="02a15359b6a6b74cfb08068609b0cebf9df44545" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin</source>
          <target state="translated">CustomBusinessMonthBegin</target>
        </trans-unit>
        <trans-unit id="97558ad97471a535fe95b02041bd317e34102d79" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.apply()</source>
          <target state="translated">CustomBusinessMonthBegin.apply()</target>
        </trans-unit>
        <trans-unit id="4dc38f014cbff6f8a101f450824b77ab57cda380" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.apply_index()</source>
          <target state="translated">CustomBusinessMonthBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="1083080783068e660fb920bc7acbd04bc8295b5b" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.base</source>
          <target state="translated">CustomBusinessMonthBegin.base</target>
        </trans-unit>
        <trans-unit id="a8917f79c5ce9e4802a7b92ed5256902a8fc6a5c" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.cbday_roll</source>
          <target state="translated">CustomBusinessMonthBegin.cbday_roll</target>
        </trans-unit>
        <trans-unit id="e553e60c29ba4300a00963c77a2e52add592be79" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.copy()</source>
          <target state="translated">CustomBusinessMonthBegin.copy()</target>
        </trans-unit>
        <trans-unit id="f0df9db1f389ade68c0d7c62ab66dfc8bd024f0f" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.freqstr</source>
          <target state="translated">CustomBusinessMonthBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="86196f1eec8a650c0256c4766f4458dc65e1ac28" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.isAnchored()</source>
          <target state="translated">CustomBusinessMonthBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="68465c17ef75aed20de10fe5650685029f3352c3" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.kwds</source>
          <target state="translated">CustomBusinessMonthBegin.kwds</target>
        </trans-unit>
        <trans-unit id="1e41580dc83af84fa31146f64147518717bc0b2e" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.m_offset</source>
          <target state="translated">CustomBusinessMonthBegin.m_offset</target>
        </trans-unit>
        <trans-unit id="675003b0fc6fda44d76f3a8f073e4da0b0eaf89f" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.month_roll</source>
          <target state="translated">CustomBusinessMonthBegin.month_roll</target>
        </trans-unit>
        <trans-unit id="728724f65bea6ce1388098feebcfc20e4cfad70b" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.name</source>
          <target state="translated">CustomBusinessMonthBegin.name</target>
        </trans-unit>
        <trans-unit id="866e226fdfc001f527d94b4c272832640484b4db" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.nanos</source>
          <target state="translated">CustomBusinessMonthBegin.nanos</target>
        </trans-unit>
        <trans-unit id="ca68e7c31f0caa122383e5da10e15242ddfd6bf5" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.normalize</source>
          <target state="translated">CustomBusinessMonthBegin.normalize</target>
        </trans-unit>
        <trans-unit id="f24b565cac37526ecc8a7cbc2594271708b92d51" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.offset</source>
          <target state="translated">CustomBusinessMonthBegin.offset</target>
        </trans-unit>
        <trans-unit id="d80ce4376dea6c729f7a92be76c69e8b013f7e2b" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.onOffset()</source>
          <target state="translated">CustomBusinessMonthBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="3be1f850c3f1f54e1bd5efd4a11f7673f378f4d3" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.rollback()</source>
          <target state="translated">CustomBusinessMonthBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="e61e77f940f176a9cf8eac3a0f9eecdf865b7495" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.rollforward()</source>
          <target state="translated">CustomBusinessMonthBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="1d5f432620eee6a6e05720f20143c5f83adfd18c" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthBegin.rule_code</source>
          <target state="translated">CustomBusinessMonthBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="d7fed2730eaa4b25ea83f56e2c0e80b4bbd1743e" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd</source>
          <target state="translated">CustomBusinessMonthEnd</target>
        </trans-unit>
        <trans-unit id="b13f69aaa1c24524ba61d32d22be6a41bae8b9c0" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.apply()</source>
          <target state="translated">CustomBusinessMonthEnd.apply()</target>
        </trans-unit>
        <trans-unit id="339184712a834acce2c36a13805c5db41196197e" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.apply_index()</source>
          <target state="translated">CustomBusinessMonthEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="f2ca8e43f40785ea2378530ecd738bb9a72f298d" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.base</source>
          <target state="translated">CustomBusinessMonthEnd.base</target>
        </trans-unit>
        <trans-unit id="1d7b6125be1374e89a63dc19b03c4e9576c19b3f" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.cbday_roll</source>
          <target state="translated">CustomBusinessMonthEnd.cbday_roll</target>
        </trans-unit>
        <trans-unit id="6e2d1ceb88ca8ecc798faf7bb543c0f6edbf3d23" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.copy()</source>
          <target state="translated">CustomBusinessMonthEnd.copy()</target>
        </trans-unit>
        <trans-unit id="0fecc94199efe5dde868202c5e40176271ce5bba" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.freqstr</source>
          <target state="translated">CustomBusinessMonthEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="f1615cbed7aa085626e64e448403b55405d2e251" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.isAnchored()</source>
          <target state="translated">CustomBusinessMonthEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="246a1f65c8cf682e33b2b7dc9d1bc9dd1b9e0dcc" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.kwds</source>
          <target state="translated">CustomBusinessMonthEnd.kwds</target>
        </trans-unit>
        <trans-unit id="accbf728760dd7f5624f9c1d356c4d9db901d224" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.m_offset</source>
          <target state="translated">CustomBusinessMonthEnd.m_offset</target>
        </trans-unit>
        <trans-unit id="94420a9669497a40c732807a892cdd8262974e0d" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.month_roll</source>
          <target state="translated">CustomBusinessMonthEnd.month_roll</target>
        </trans-unit>
        <trans-unit id="b9cf5656a90c0c1bfbfcd7db1c6e9438f9677189" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.name</source>
          <target state="translated">CustomBusinessMonthEnd.name</target>
        </trans-unit>
        <trans-unit id="abe3a4455f463aaa31d38dc3742db29b50014180" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.nanos</source>
          <target state="translated">CustomBusinessMonthEnd.nanos</target>
        </trans-unit>
        <trans-unit id="5777645e89084934aebe870d0402605bb5238b11" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.normalize</source>
          <target state="translated">CustomBusinessMonthEnd.normalize</target>
        </trans-unit>
        <trans-unit id="f1438229581e6210cfcdd135072308e5aa2c0e61" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.offset</source>
          <target state="translated">CustomBusinessMonthEnd.offset</target>
        </trans-unit>
        <trans-unit id="6f161ff59f9ab75890cad363d12309389d026376" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.onOffset()</source>
          <target state="translated">CustomBusinessMonthEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="deb152f4c7aca68a286dc464a651303c46237b68" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.rollback()</source>
          <target state="translated">CustomBusinessMonthEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="be799c1c5fb43e57e42bde25da178190e1be47c4" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.rollforward()</source>
          <target state="translated">CustomBusinessMonthEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="89e3341ee47dfb58f9203d9e56209809b7df3789" translate="yes" xml:space="preserve">
          <source>CustomBusinessMonthEnd.rule_code</source>
          <target state="translated">CustomBusinessMonthEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="9db3b1e1a8b16c61228838648572ef80176988fd" translate="yes" xml:space="preserve">
          <source>Customarily, we import as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69e95750698a411aaeefeb71050e3198e6be62f" translate="yes" xml:space="preserve">
          <source>Cyberpandas provides an extension type for storing arrays of IP Addresses. These arrays can be stored inside pandas&amp;rsquo; Series and DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bc53b5eee3239983747762283228949b5ef1cd" translate="yes" xml:space="preserve">
          <source>Cython (writing C extensions for pandas)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="0f8acabd0b82b167836ee44cfa66b3d3c8bf8fbe" translate="yes" xml:space="preserve">
          <source>DD/MM format dates, international and European format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f5636098cd458ce9d22939f8e3e8deab0e9bd0" translate="yes" xml:space="preserve">
          <source>DELETE</source>
          <target state="translated">DELETE</target>
        </trans-unit>
        <trans-unit id="792d832adab0bd24404e12bc3971e0e01a8d5ef1" translate="yes" xml:space="preserve">
          <source>DOC: Additions/updates to documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6efff04d7c735dcf31793d3bfabc3f0aef11663" translate="yes" xml:space="preserve">
          <source>Dask</source>
          <target state="translated">Dask</target>
        </trans-unit>
        <trans-unit id="f30dcabb638d7ca308a54cf792fbbcbe4bb1de76" translate="yes" xml:space="preserve">
          <source>Dask is a flexible parallel computing library for analytics. Dask provides a familiar &lt;code&gt;DataFrame&lt;/code&gt; interface for out-of-core, parallel and distributed computing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c442e394df2e5e5a98c11b8bb0632072f4aa8df6" translate="yes" xml:space="preserve">
          <source>Dask-ML</source>
          <target state="translated">Dask-ML</target>
        </trans-unit>
        <trans-unit id="6e00080f2485c0a1e141b7e0cd97eeb7930f3474" translate="yes" xml:space="preserve">
          <source>Dask-ML enables parallel and distributed machine learning using Dask alongside existing machine learning libraries like Scikit-Learn, XGBoost, and TensorFlow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fc1332f04ab4a37c1df0afb713c9858669ce20" translate="yes" xml:space="preserve">
          <source>Data Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1dbef749c928069d750e16e541d2b7f5641579" translate="yes" xml:space="preserve">
          <source>Data In/Out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7f244fc5171be63484d8e40c59808ea2c3e492" translate="yes" xml:space="preserve">
          <source>Data Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673e62bf41e5d6b979d35e41e1d009a55620f500" translate="yes" xml:space="preserve">
          <source>Data cells include &lt;code&gt;data&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3a17dfedf8e17aa5933eb99bbb7abcdb29a681" translate="yes" xml:space="preserve">
          <source>Data in the pandas structure converted to Dataset if the object is a DataFrame, or a DataArray if the object is a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3bba8da59148fd695a62ccf87703f4f3660e90" translate="yes" xml:space="preserve">
          <source>Data input / output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8991711c3932bc8d789ac24a1eb767d050a2af" translate="yes" xml:space="preserve">
          <source>Data is often stored in so-called &amp;ldquo;stacked&amp;rdquo; or &amp;ldquo;record&amp;rdquo; format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff457183d3213dfb84025200b565b4dde25c6873" translate="yes" xml:space="preserve">
          <source>Data manipulations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0c6f77d61ef113ac2404b61fa93d621fe9ca63" translate="yes" xml:space="preserve">
          <source>Data munging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73529dcb4db0003ce0fab6b827dd44f7025415f4" translate="yes" xml:space="preserve">
          <source>Data of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7fb00aeb5934e7b4e6b8113b4cabbd516fb533" translate="yes" xml:space="preserve">
          <source>Data of which to get dummy indicators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac7f6cf0941c354910074d2e4b35c462443327f" translate="yes" xml:space="preserve">
          <source>Data operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303c85db56e6f90f1fcaafbed47e91067f22fbe9" translate="yes" xml:space="preserve">
          <source>Data structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072b0ad3ff2e3fabe11ed25e58cacfab669f8465" translate="yes" xml:space="preserve">
          <source>Data to be plotted, preferably normalized to (0.0, 1.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e8955067cc10ef6745f4116dc5a047f3c3f46f" translate="yes" xml:space="preserve">
          <source>Data type for data or columns. E.g. {&amp;lsquo;a&amp;rsquo;: np.float64, &amp;lsquo;b&amp;rsquo;: np.int32, &amp;lsquo;c&amp;rsquo;: &amp;lsquo;Int64&amp;rsquo;} Use &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt; together with suitable &lt;code&gt;na_values&lt;/code&gt; settings to preserve and not interpret dtype. If converters are specified, they will be applied INSTEAD of dtype conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a644ac61569dccaedce46722423c0504ff325f" translate="yes" xml:space="preserve">
          <source>Data type for data or columns. E.g. {&amp;lsquo;a&amp;rsquo;: np.float64, &amp;lsquo;b&amp;rsquo;: np.int32} Use &lt;code&gt;object&lt;/code&gt; to preserve data as stored in Excel and not interpret dtype. If converters are specified, they will be applied INSTEAD of dtype conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c149e9560b023fbd4561b035aef30d94e4859eb2" translate="yes" xml:space="preserve">
          <source>Data type for new columns. Only a single dtype is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539736773ddde528e7912a6a108dcb02e6c8fdac" translate="yes" xml:space="preserve">
          <source>Data type for the output Series. If not specified, this will be inferred from &lt;code&gt;data&lt;/code&gt;. See the &lt;a href=&quot;../../getting_started/basics#basics-dtypes&quot;&gt;user guide&lt;/a&gt; for more usages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15960dcb4bd42ddaf12b3f1bd9716afd31b1889" translate="yes" xml:space="preserve">
          <source>Data type object or one of their string representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c266d6d34c9cb8dd1680be706eecc108f59cb6" translate="yes" xml:space="preserve">
          <source>Data type to force, otherwise infer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754eefff5169ab6c14e949df9bc2c972db5d0549" translate="yes" xml:space="preserve">
          <source>Data type to force. Only a single dtype is allowed. If None, infer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c77c7585441d29ab76d53b20e81a7a7e7d0c74" translate="yes" xml:space="preserve">
          <source>Data types can be specified for the columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5b03e00974d3b3d578fc435d13537066b98672" translate="yes" xml:space="preserve">
          <source>Data types related functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c31d827262954909d3e332388837d1a1fd933ae" translate="yes" xml:space="preserve">
          <source>Data used in the example should be as compact as possible. The number of rows is recommended to be around 4, but make it a number that makes sense for the specific example. For example in the &lt;code&gt;head&lt;/code&gt; method, it requires to be higher than 5, to show the example with the default values. If doing the &lt;code&gt;mean&lt;/code&gt;, we could use something like &lt;code&gt;[1, 2, 3]&lt;/code&gt;, so it is easy to see that the value returned is the mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac512b2277dc12fb253b90cadeff4b79f7f0c52d" translate="yes" xml:space="preserve">
          <source>Data validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c737e17aaa6d7236af77efe92df4cb5a32d8c8b0" translate="yes" xml:space="preserve">
          <source>Data where a single value is repeated many times (e.g. &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt;) may be stored efficiently as a &lt;a href=&quot;api/pandas.sparsearray#pandas.SparseArray&quot;&gt;&lt;code&gt;SparseArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ac27621acb033bbf1ab2c6f1ffd61347159420" translate="yes" xml:space="preserve">
          <source>DataFrame</source>
          <target state="translated">DataFrame</target>
        </trans-unit>
        <trans-unit id="732175610fe2cff6e892e9808ff5dbb25b7fa090" translate="yes" xml:space="preserve">
          <source>DataFrame : when &lt;code&gt;self&lt;/code&gt; is a DataFrame and &lt;code&gt;where&lt;/code&gt; is an array-like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029e593a9eebe5ecdb4c9e18b4901d89844429ab" translate="yes" xml:space="preserve">
          <source>DataFrame : when DataFrame.agg is called with several functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a13eddb799738937c9173ad156765155b620ab5" translate="yes" xml:space="preserve">
          <source>DataFrame accessor for sparse data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49dc7ef527269621183907971f0c0c8e1415bc5" translate="yes" xml:space="preserve">
          <source>DataFrame containing the original Index data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a999e654f19ab61c6d0e750f098ab0c20d1975" translate="yes" xml:space="preserve">
          <source>DataFrame creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8e6a84031eae2495266a3bb1d89d4bcbc1f63d" translate="yes" xml:space="preserve">
          <source>DataFrame ewm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75480dc44bce712de1332272bd126ddc958c9ffb" translate="yes" xml:space="preserve">
          <source>DataFrame expanding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bb0477e4837d3a3490bc5e1550ba7f4d4e589a" translate="yes" xml:space="preserve">
          <source>DataFrame from ndarray (structured dtype), list of tuples, dict, or DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9808cc6ed627dc162e2536a1dcd2134205a86a" translate="yes" xml:space="preserve">
          <source>DataFrame from the passed in Excel file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bcf799c16924593e8b5c01d22a45636449f071" translate="yes" xml:space="preserve">
          <source>DataFrame from the passed in Excel file. See notes in sheet_name argument for more information on when a dict of DataFrames is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221da8602e1ae4541709fe14a03c6b51988dbf17" translate="yes" xml:space="preserve">
          <source>DataFrame if iterator=False and chunksize=None, else SAS7BDATReader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07770da1f90feb1a179a30f0c7e1a2348f72f8e2" translate="yes" xml:space="preserve">
          <source>DataFrame memory usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f922b78d76b2b0edf1b4c00bdd6a9a4124010c" translate="yes" xml:space="preserve">
          <source>DataFrame object creation using constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c2b05aaa91862ac3fb872b599be34a80551531" translate="yes" xml:space="preserve">
          <source>DataFrame of bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c3357d10f7125c794a01081e96b1a7165fac7d" translate="yes" xml:space="preserve">
          <source>DataFrame of booleans showing whether each element in the DataFrame is contained in values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93afdb400081a6c313aa8c52ccf4e18db2ceb679" translate="yes" xml:space="preserve">
          <source>DataFrame only &lt;code&gt;(use Series.to_frame().style)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7441364b1dcf1fb40247367bf99329defb7773b9" translate="yes" xml:space="preserve">
          <source>DataFrame or Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a125c766a4fe0501d158262d45c59c72cfbf3b5" translate="yes" xml:space="preserve">
          <source>DataFrame or Series or Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a3bb1ab312bae30e10d5fdda6193afe3d864a3" translate="yes" xml:space="preserve">
          <source>DataFrame or StataReader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffc7fd67aa0ed3fd53a733015f6248b9f35fe39" translate="yes" xml:space="preserve">
          <source>DataFrame or TextParser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccc33dc0015358106cfd82f007ead65114bb49c" translate="yes" xml:space="preserve">
          <source>DataFrame or dict of DataFrames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b266c21adda6d4efba1d9abd44b2a7e28a4c1196" translate="yes" xml:space="preserve">
          <source>DataFrame plotting accessor and method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee308898bcba83318571f3011612192a4e124841" translate="yes" xml:space="preserve">
          <source>DataFrame representation of Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179fd48d6fb800e336f6797a3e9febb73d24f1ea" translate="yes" xml:space="preserve">
          <source>DataFrame representing results of query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23839f1b66e799a28d1c3a03db1d47d8f78fc7fc" translate="yes" xml:space="preserve">
          <source>DataFrame resampling is done column-wise. All the same options are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c472f9d1ffa03dd2b239d29ddbb7c6a5299a5e1a" translate="yes" xml:space="preserve">
          <source>DataFrame resulting from the provided query expression.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
