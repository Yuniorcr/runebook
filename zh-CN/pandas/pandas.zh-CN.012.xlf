<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="pandas">
    <body>
      <group id="pandas">
        <trans-unit id="e2f2d6bf716ec3fd26415996c52cf9833348b425" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataFrame.eval&lt;/code&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfe5180518a5032f9d35d1deee8331837bb8871" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Series.sparse&lt;/code&gt; accessor may be used to access sparse-specific attributes and methods if the &lt;a href=&quot;api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; contains sparse values. See &lt;a href=&quot;series#api-series-sparse&quot;&gt;Sparse accessor&lt;/a&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3abd6408d164fd7853d8deeb8a47e5524bf8e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closed&lt;/code&gt; parameter specifies which endpoint is included. The default behavior is to include both endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c6d80c1b4c85a3a9439b443f3bd92d046d7b97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closed&lt;/code&gt; parameter specifies which endpoints of the individual intervals within the &lt;code&gt;IntervalIndex&lt;/code&gt; are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0201bd20e1851f7f156baf82c8d5bd321092add4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dtype&lt;/code&gt; of any objects involved in an arithmetic &lt;code&gt;%&lt;/code&gt; operation are recursively cast to &lt;code&gt;float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5021c195f8f0182d43c1d3d1043eda5406f70f84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fill_value&lt;/code&gt; argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a6189f8e25d7c471dc6d318e0ad55dd265c839" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;freq&lt;/code&gt; indicates the span covered by each element of the array. All elements in the PeriodArray have the same &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef65e07d413f3026e9c1d870da15b99f05d3ee1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;freq&lt;/code&gt; parameter specifies the frequency between the left and right. endpoints of the individual intervals within the &lt;code&gt;IntervalIndex&lt;/code&gt;. For numeric &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, the frequency must also be numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a69d08d152f8515759c76fdd09c203ccce5d321" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;freq&lt;/code&gt; parameter specifies the frequency of the TimedeltaIndex. Only fixed frequencies can be passed, non-fixed frequencies such as &amp;lsquo;M&amp;rsquo; (month end) will raise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ec42eeb22665831f1c694c34e57e5231f9441c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;freq&lt;/code&gt; to use for the array. Mostly applicable when &lt;code&gt;values&lt;/code&gt; is an ndarray of integers, when &lt;code&gt;freq&lt;/code&gt; is required. When &lt;code&gt;values&lt;/code&gt; is a PeriodArray (or box around), it&amp;rsquo;s checked that &lt;code&gt;values.freq&lt;/code&gt; matches &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12955858f929bc15c7d612df4906960756d471ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;how&lt;/code&gt; argument to &lt;code&gt;merge&lt;/code&gt; specifies how to determine which keys are to be included in the resulting table. If a key combination &lt;strong&gt;does not appear&lt;/strong&gt; in either the left or right tables, the values in the joined table will be &lt;code&gt;NA&lt;/code&gt;. Here is a summary of the &lt;code&gt;how&lt;/code&gt; options and their SQL equivalent names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97e68f43d57ee7ddc9bf9c201a65187f8441552" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; parameters can be used to limit which columns in a &lt;code&gt;DataFrame&lt;/code&gt; are analyzed for the output. The parameters are ignored when analyzing a &lt;code&gt;Series&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1a80b20b9f42db0d23847477ac2ff3becdc644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indicator&lt;/code&gt; argument will also accept string arguments, in which case the indicator function will use the value of the passed string as the name for the indicator column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df958664d51134c617bc23225c83fbcfd7eab42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inplace&lt;/code&gt; keyword determines whether this assignment will performed on the original &lt;code&gt;DataFrame&lt;/code&gt; or return a copy with the new column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c65f2d93e83126f33e1cca127a9d807d1811d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;items&lt;/code&gt;, &lt;code&gt;like&lt;/code&gt;, and &lt;code&gt;regex&lt;/code&gt; parameters are enforced to be mutually exclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058116d5f61968a9bdc6c1686202fc8d6367765c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keep&lt;/code&gt; parameter controls which duplicate values are removed. The value &amp;lsquo;first&amp;rsquo; keeps the first occurrence for each set of duplicated entries. The default value of keep is &amp;lsquo;first&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3b042afa9c4e3b7ea072ac51d966bd67c71067" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;level&lt;/code&gt; parameter is interesting for Series with a multi-level index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7459ba8949eedd7d2ff085ad6ee6d4febbb6ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup()&lt;/code&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7df22bee283a18268660b4e1e8f02d635495ac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;memory_usage&lt;/code&gt; parameter allows deep introspection mode, specially useful for big DataFrames and fine-tune memory optimization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562d5a579e80ca680edd16f987fdb96a3a4cdb59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metadata&lt;/code&gt; field is &lt;code&gt;None&lt;/code&gt; except for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419bb88fdf1060975a9c7c5f0a9fc0997f148cb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; largest elements where &lt;code&gt;n=3&lt;/code&gt; and keeping the last duplicates. Brunei will be kept since it is the last with value 434000 based on the index order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202dee002f46bd51040f1065ec057015253f64d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; largest elements where &lt;code&gt;n=3&lt;/code&gt; with all duplicates kept. Note that the returned Series has five elements due to the three duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1dd1632d9fd02210c871b2812e748417053d6dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; largest elements where &lt;code&gt;n=3&lt;/code&gt;. Default &lt;code&gt;keep&lt;/code&gt; value is &amp;lsquo;first&amp;rsquo; so Malta will be kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10bf33f63b78e315760ecc05be646d5058a2bcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; largest elements where &lt;code&gt;n=5&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e53b7793e319b9baa04b3629c7e3c39437e9b34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; largest values in the Series, sorted in decreasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63cbbd558380fee23b151e484617601ec31b95ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; parameter can be used to limit the number of splits on the delimiter. The outputs of &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;rsplit&lt;/code&gt; are different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffcb34d74226ed55703c1c7d8d5c1733dee5082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; smallest elements where &lt;code&gt;n=3&lt;/code&gt; and keeping the last duplicates. Anguilla and Tuvalu will be kept since they are the last with value 11300 based on the index order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f918ade5db0c33a6a0ede1016c0810e5bcef3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; smallest elements where &lt;code&gt;n=3&lt;/code&gt; with all duplicates kept. Note that the returned Series has four elements due to the three duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5ceedccec77462ef0a28e9f7eb4c151f0bf40c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; smallest elements where &lt;code&gt;n=3&lt;/code&gt;. Default &lt;code&gt;keep&lt;/code&gt; value is &amp;lsquo;first&amp;rsquo; so Nauru and Tuvalu will be kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8058d54ef17067fd2d241a18b5bab7e6bed155be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; smallest elements where &lt;code&gt;n=5&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91343d985727347205d77764fb14c516e01c3f07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; smallest values in the Series, sorted in increasing order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55fbb131df261019ca89818e346f6d73b4425ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;na_value&lt;/code&gt; class attribute can be used to set the default NA value for this type. &lt;code&gt;numpy.nan&lt;/code&gt; is used by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0af24fd1a5aafb2362ff9509275a7cd73053563" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;numpy_type&lt;/code&gt; is the physical storage type of the column, which is the result of &lt;code&gt;str(dtype)&lt;/code&gt; for the underlying NumPy array that holds the data. So for &lt;code&gt;datetimetz&lt;/code&gt; this is &lt;code&gt;datetime64[ns]&lt;/code&gt; and for categorical, it may be any of the supported integer categorical types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868f255ac25f6448480e591707396924a45a8722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pandas.core&lt;/code&gt;, &lt;code&gt;pandas.compat&lt;/code&gt;, and &lt;code&gt;pandas.util&lt;/code&gt; top-level modules are PRIVATE. Stable functionality in such modules is not guaranteed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194ef88af088ec3ce4a49f3007e83cd32955b0df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pandas.util.testing&lt;/code&gt; module has many special &lt;code&gt;assert&lt;/code&gt; functions that make it easier to make statements about whether Series or DataFrame objects are equivalent. The easiest way to verify that your code is correct is to explicitly construct the result you expect, then compare the actual result to the expected correct result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902877ab6bb9ca63e3609e978cfbb19d875cca96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pat&lt;/code&gt; parameter can be used to split by other characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db443bed6efe5679193ee751071207c605b5d821" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plot&lt;/code&gt; method on Series and DataFrame is just a simple wrapper around &lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plt.plot()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65d036c5492ddfb7f3762952e5dfe3430bd7251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query()&lt;/code&gt; Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4c4284dacf4f9d70b5e9580be493b374957042" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw&lt;/code&gt; parameter is required and will show a FutureWarning if not passed. In the future &lt;code&gt;raw&lt;/code&gt; will default to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d5b88d1dff9d3f85d182137c95da1875c025ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;row0_col2&lt;/code&gt; is the identifier for that particular cell. We&amp;rsquo;ve also prepended each row/column identifier with a UUID unique to each DataFrame so that the style from one doesn&amp;rsquo;t collide with the styling from another within the same notebook or page (you can set the &lt;code&gt;uuid&lt;/code&gt; if you&amp;rsquo;d like to tie together the styling of two DataFrames).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f93fbb9132467f8baed429a1b41097fd068d0ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;s.str.isdigit&lt;/code&gt; method is the same as &lt;code&gt;s3.str.isdecimal&lt;/code&gt; but also includes special digits, like superscripted and subscripted digits in unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b42709b4813e4ab22b64388ed9ae3e5a68f8af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;s.str.isnumeric&lt;/code&gt; method is the same as &lt;code&gt;s3.str.isdigit&lt;/code&gt; but also includes other characters that can represent quantities such as unicode fractions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e044074625f34c4d4a2c5a88a124aff393d65971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;s3.str.isdecimal&lt;/code&gt; method checks for characters used to form numbers in base 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ac3bb363d0be9f46fe308ae1d2d4b4c73246af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;s5.str.istitle&lt;/code&gt; method checks for whether all words are in title case (whether only the first letter of each word is capitalized). Words are assumed to be as any sequence of non-numeric characters separated by whitespace characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a8c68f95547249b7a6cec641d49ffc2151fdc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stack&lt;/code&gt; function &amp;ldquo;compresses&amp;rdquo; a level in the &lt;code&gt;DataFrame&lt;/code&gt;&amp;rsquo;s columns to produce either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c444d892e28d64467b5531636f35d0cccf5c77f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;where()&lt;/code&gt; Method and Masking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa8c8053ff42a72b7fea6607471ec585ff25425" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;where&lt;/code&gt; group itself is listed first (preorder), then each of its child groups (following an alphanumerical order) is also traversed, following the same procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc850e8ddcc798bcc6e060199ead1d2dae8c8f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;year&lt;/code&gt; and the &lt;code&gt;qyear&lt;/code&gt; of the period will be the same if the fiscal and calendar years are the same. When they are not, the fiscal year can be different from the calendar year of the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70da7c1723970edaec8d3559b2f6d62818446eb7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;pandas&lt;/em&gt; documentation consists of two parts: the docstrings in the code itself and the docs in this folder &lt;code&gt;doc/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9081969c25c824dd4f015d503392d9d527ff3836" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;pandas&lt;/em&gt; test suite will run automatically on &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis-CI&lt;/a&gt; and &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; continuous integration services, once your pull request is submitted. However, if you wish to run the test suite on a branch prior to submitting the pull request, then the continuous integration services need to be hooked to your GitHub repository. Instructions are here for &lt;a href=&quot;http://about.travis-ci.org/docs/user/getting-started/&quot;&gt;Travis-CI&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943977cbe2a5528ad4253969c9ea2103a078e2c1" translate="yes" xml:space="preserve">
          <source>The API is composed of 5 relevant functions, available directly from the &lt;code&gt;pandas&lt;/code&gt; namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef7c61751d225e67a4e2a48c738daf6965844ec" translate="yes" xml:space="preserve">
          <source>The DataFrame columns must be unique for orients &lt;code&gt;'index'&lt;/code&gt;, &lt;code&gt;'columns'&lt;/code&gt;, and &lt;code&gt;'records'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce36c670ab5aad0655cc5a390a4c5aa18f07210" translate="yes" xml:space="preserve">
          <source>The DataFrame index must be unique for orients &lt;code&gt;'index'&lt;/code&gt; and &lt;code&gt;'columns'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bbbf9a7db8fe3586b53ab0950d81ac6d394717" translate="yes" xml:space="preserve">
          <source>The DataFrame to merge column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcad6c645beec0a97692e6f8ced0b5cba822b91" translate="yes" xml:space="preserve">
          <source>The DataFrame&amp;rsquo;s length does not increase as a result of the update, only values at matching index/column labels are updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9743583cb56703445e98aca9acf720c007efca7" translate="yes" xml:space="preserve">
          <source>The ExtensionArray of the data backing this Series or Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907582ab048253d02e4abfecf71a5a3635ecf88a" translate="yes" xml:space="preserve">
          <source>The MultiIndex created has levels that are constructed from the passed keys and the index of the &lt;code&gt;DataFrame&lt;/code&gt; pieces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e0901e5da3a74b665c21bd125d31851109c12e" translate="yes" xml:space="preserve">
          <source>The MultiIndex representation of the given DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6c365728d20ef00257699e38f3c7840a8be1f2" translate="yes" xml:space="preserve">
          <source>The NumPy ndarray to wrap. Must be 1-dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0f8078848d7bf1b78fddfd26f1b23b1befaab9" translate="yes" xml:space="preserve">
          <source>The Pearson correlation between self and self.shift(lag).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03419fef33bfe9a27c674ff387984d386fcd91cf" translate="yes" xml:space="preserve">
          <source>The Python and NumPy indexing operators &lt;code&gt;[]&lt;/code&gt; and attribute operator &lt;code&gt;.&lt;/code&gt; provide quick and easy access to pandas data structures across a wide range of use cases. This makes interactive work intuitive, as there&amp;rsquo;s little new to learn if you already know how to deal with Python dictionaries and NumPy arrays. However, since the type of the data to be accessed isn&amp;rsquo;t known in advance, directly using standard operators has some optimization limits. For production code, we recommended that you take advantage of the optimized pandas data access methods exposed in this chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f311a1f768c5c458d3d379085c59d9eb46bd10c8" translate="yes" xml:space="preserve">
          <source>The Python core team plans to stop supporting Python 2.7 on January 1st, 2020. In line with &lt;a href=&quot;https://github.com/numpy/numpy/blob/master/doc/neps/nep-0014-dropping-python2.7-proposal.rst#plan-for-dropping-python-27-support&quot;&gt;NumPy&amp;rsquo;s plans&lt;/a&gt;, all pandas releases through December 31, 2018 will support Python 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31eb8d2f2787419decaad3ed2cff5f945848896" translate="yes" xml:space="preserve">
          <source>The Series and other has to share the same index if other is a Series or a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd86e3017a1d6ffb84c415d6f9c05bf90f50764" translate="yes" xml:space="preserve">
          <source>The Series index must be unique for orient &lt;code&gt;'index'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54c988e6bb0a0dcd40e13aacac15e7e1168b3a9" translate="yes" xml:space="preserve">
          <source>The User Guide covers all of pandas by topic area. Each of the subsections introduces a topic (such as &amp;ldquo;working with missing data&amp;rdquo;), and discusses how pandas approaches the problem, with many examples throughout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8e123970e7e1b85aacb3b2421a27496dff0719" translate="yes" xml:space="preserve">
          <source>The above can be simplified to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160b8d6bd88d2d58b089d1dfb8b97e6e7a9a1204" translate="yes" xml:space="preserve">
          <source>The above output looks very similar to the standard DataFrame HTML representation. But we&amp;rsquo;ve done some work behind the scenes to attach CSS classes to each cell. We can view these by calling the &lt;code&gt;.render&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36e58d4e0016c9b6fe81f470f4d60ec68913ae4" translate="yes" xml:space="preserve">
          <source>The above statement is simply passing a &lt;code&gt;Series&lt;/code&gt; of True/False objects to the DataFrame, returning all rows with True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce3422a02e2526b40cb3b5ee108e178d7077164" translate="yes" xml:space="preserve">
          <source>The aggregation operations are always performed over an axis, either the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30ba6acf0ec9dd6c9673cbaada8122a50988653" translate="yes" xml:space="preserve">
          <source>The alignment for multicolumns, similar to &lt;code&gt;column_format&lt;/code&gt; The default will be read from the config module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3322fbee683e22d15eb9dd422f6bf81856fae98" translate="yes" xml:space="preserve">
          <source>The allowed and default values depend on the value of the &lt;code&gt;typ&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9634a7f3ab931d2d9d65624f09ffa66c83f405af" translate="yes" xml:space="preserve">
          <source>The alternative &lt;a href=&quot;api/pandas.categorical.from_codes#pandas.Categorical.from_codes&quot;&gt;&lt;code&gt;Categorical.from_codes()&lt;/code&gt;&lt;/a&gt; constructor can be used when you have the categories and integer codes already:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d3fabba253d79d7e0f869ce57480b1b95e4dcc" translate="yes" xml:space="preserve">
          <source>The array or dtype to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51567e9923a5b31a4db9b65260aa4d00e65b2315" translate="yes" xml:space="preserve">
          <source>The array-like or dtype to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6df26f2a3e60eaf0c41fdd82cf68d1ce6eaf0b4" translate="yes" xml:space="preserve">
          <source>The array-like to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6e01ae2379a962cd80bab74bc4d51e151456f9" translate="yes" xml:space="preserve">
          <source>The assigned value has to be a list-like object. All items must be unique and the number of items in the new categories must be the same as the number of items in the old categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77ce643b876fe1237ed1869adaf6c1cc6fab9d1" translate="yes" xml:space="preserve">
          <source>The attribute that get_values wraps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c5c84398ab44dd2b453f5b7aeebde5fa39f59d" translate="yes" xml:space="preserve">
          <source>The available options with its descriptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb6f7dca3c72097b5306cc57d310ff0892c03f7" translate="yes" xml:space="preserve">
          <source>The axes to plot the histogram on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d789121fd7a2947bd0359b47d68eaff9fcab102" translate="yes" xml:space="preserve">
          <source>The axis along which to sort. The value 0 identifies the rows, and 1 identifies the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4226784681e9fba870fdfcdfe1ead37c856c575b" translate="yes" xml:space="preserve">
          <source>The axis labeling information in pandas objects serves many purposes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b0c1ebfd9634de3941c55dfaf6517f434adc07" translate="yes" xml:space="preserve">
          <source>The axis of the object over which to compute the rank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0953de10e0196346c62012e9a524ec8d64d0968f" translate="yes" xml:space="preserve">
          <source>The axis on which to select elements. &lt;code&gt;0&lt;/code&gt; means that we are selecting rows, &lt;code&gt;1&lt;/code&gt; means that we are selecting columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c916def9a65c257e95d00cc554d25479a76a082" translate="yes" xml:space="preserve">
          <source>The axis over which to select values, always 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a36ecc99cc9dbf73d56a2e1632ae067d6767b6" translate="yes" xml:space="preserve">
          <source>The axis to concatenate along.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7849b15daecc88739a78174a8b9961c3ba77fbe0" translate="yes" xml:space="preserve">
          <source>The axis to convert (the index by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617c4e799cb940ef82c46d1cd3dde4d47688a497" translate="yes" xml:space="preserve">
          <source>The axis to filter on. By default this is the info axis, &amp;lsquo;index&amp;rsquo; for Series, &amp;lsquo;columns&amp;rsquo; for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1243c2a6fe64f4147c08752739863d4fbafd64fa" translate="yes" xml:space="preserve">
          <source>The axis to iterate over while searching for the mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062381d2bab7cf2774a3e169172bb3b09f12a191" translate="yes" xml:space="preserve">
          <source>The axis to rename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc6bcfcb9673122d073fe944710ca418de39ee4" translate="yes" xml:space="preserve">
          <source>The axis to update. The value 0 identifies the rows, and 1 identifies the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f02ec70adb648c619bba9c8381c148049b81c51" translate="yes" xml:space="preserve">
          <source>The axis to use. 0 or &amp;lsquo;index&amp;rsquo; for row-wise, 1 or &amp;lsquo;columns&amp;rsquo; for column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42278d9800c74796740df55c085822dda417ea8b" translate="yes" xml:space="preserve">
          <source>The axis to use. The value 0 identifies the rows, and 1 identifies the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a845f39ad44c7ea5c36b661ccf9335e0180112c" translate="yes" xml:space="preserve">
          <source>The backend module can then use other visualization tools (Bokeh, Altair,&amp;hellip;) to generate the plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0f3a088a1421033ee6663032966e8a343cfca4" translate="yes" xml:space="preserve">
          <source>The base pandas Index type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fd329b7e8ee3bfdaf431a851607c95c9f9bfb8" translate="yes" xml:space="preserve">
          <source>The behavior is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbf72311894064e12974abf94ebac96f1ca81b5" translate="yes" xml:space="preserve">
          <source>The below example shows a rolling calculation with a window size of four matching the equivalent function call using &lt;code&gt;numpy.corrcoef()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f44b1a8792b73f93c95ddff614ef1605f01172" translate="yes" xml:space="preserve">
          <source>The below example shows a similar rolling calculation on a DataFrame using the pairwise option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600970eb9e7d2e56ee3ebdce80c6533c1b316427" translate="yes" xml:space="preserve">
          <source>The below examples will show rolling mean calculations with window sizes of two and three, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebdc04a265a22f038191af6d73e81b818cd022c" translate="yes" xml:space="preserve">
          <source>The best method to use depends on the context. Use the &lt;code&gt;Styler&lt;/code&gt; constructor when building many styled DataFrames that should all share the same properties. For interactive use, the&lt;code&gt;.set_&lt;/code&gt; and &lt;code&gt;.hide_&lt;/code&gt; methods are more convenient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f495801aafce3160ffcbe88810eb851e2b06c1" translate="yes" xml:space="preserve">
          <source>The best way to think about the pandas data structures is as flexible containers for lower dimensional data. For example, DataFrame is a container for Series, and Series is a container for scalars. We would like to be able to insert and remove objects from these containers in a dictionary-like fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588808fbd7bbcc5f419a351c1ee5165b35abf3ea" translate="yes" xml:space="preserve">
          <source>The bootstrap plot is used to estimate the uncertainty of a statistic by relaying on random sampling with replacement &lt;a href=&quot;#r11075647b7c8-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. This function will generate bootstrapping plots for mean, median and mid-range statistics for the given number of samples of the given size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a470a4671ee8442874175278b709a2f5dc63940b" translate="yes" xml:space="preserve">
          <source>The branch will still exist on GitHub, so to delete it there do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44ef9943538bfa4adca5d29238f26f740ab84cf" translate="yes" xml:space="preserve">
          <source>The categorical data type is useful in the following cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04066206c6e50fc4fd13bb5c96b07f814b14e97" translate="yes" xml:space="preserve">
          <source>The categories for the categorical. Items need to be unique. If the categories are not given here (and also not in &lt;code&gt;dtype&lt;/code&gt;), they will be inferred from the &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1f578fc078e58b7aa82c55530e13bf12aa7e71" translate="yes" xml:space="preserve">
          <source>The categories for the categorical. Items need to be unique. If the categories are not given here, then they must be provided in &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878e56ad5f7e7fd7a1f83386da6ec9557fa6c4ee" translate="yes" xml:space="preserve">
          <source>The categories in new order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63f5263dca62a1a41fb98737e313c4966d6bb1f" translate="yes" xml:space="preserve">
          <source>The categories of this categorical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b97eddff0c0010f556ecc62e6d860d566ed34a4" translate="yes" xml:space="preserve">
          <source>The categories which should be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d280c538d9d63cf5e3155da5f98d20ebdeb44c" translate="yes" xml:space="preserve">
          <source>The category codes of this categorical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5571259d06c00d0cc7ec372fb183e16a2a68f71" translate="yes" xml:space="preserve">
          <source>The character used to denote the start and end of a quoted item. Quoted items can include the delimiter and it will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b936303a3065e9ff6e48098e73cadb4616ce6e" translate="yes" xml:space="preserve">
          <source>The choice of using &lt;code&gt;NaN&lt;/code&gt; internally to denote missing data was largely for simplicity and performance reasons. It differs from the MaskedArray approach of, for example, &lt;code&gt;scikits.timeseries&lt;/code&gt;. We are hopeful that NumPy will soon be able to provide a native NA type solution (similar to R) performant enough to be used in pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a42b83fb80ae7724d84a0b045e01bfc04250ba7" translate="yes" xml:space="preserve">
          <source>The clearest way to explain is by example. Let&amp;rsquo;s take a prior example data set from the hierarchical indexing section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdbbd9d6b8e55abf1599979e04485dc5e58e767" translate="yes" xml:space="preserve">
          <source>The code is hosted on &lt;a href=&quot;https://www.github.com/pandas-dev/pandas&quot;&gt;GitHub&lt;/a&gt;. To contribute you will need to sign up for a &lt;a href=&quot;https://github.com/signup/free&quot;&gt;free GitHub account&lt;/a&gt;. We use &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; for version control to allow many people to work together on the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acad627096cc18a3027643ecc34e5706862e601e" translate="yes" xml:space="preserve">
          <source>The collections.abc.Mapping subclass to use as the return object. Can be the actual class or an empty instance of the mapping type you want. If you want a collections.defaultdict, you must pass it initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a4624c39a7dce04ebb2c125610a154cb93ec0d" translate="yes" xml:space="preserve">
          <source>The collections.abc.Mapping subclass used for all Mappings in the return value. Can be the actual class or an empty instance of the mapping type you want. If you want a collections.defaultdict, you must pass it initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4070ed3a628b337f16889a17018ec04a508e19d" translate="yes" xml:space="preserve">
          <source>The color of each point. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1e6cd6aae24ea702c7a0a06fdb24e4a93446be" translate="yes" xml:space="preserve">
          <source>The column (or list of columns) to use to create the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6473d47aaca0f2137ec3c177359184e3c73dfe" translate="yes" xml:space="preserve">
          <source>The column entries belonging to each label, as a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5247231fe8ba626fad6c7129666bfdd61ca95182" translate="yes" xml:space="preserve">
          <source>The column label or position for the value of &lt;code&gt;(x, y)&lt;/code&gt; point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588a7572b3d95f0a5a89edd12686f9709564f7e0" translate="yes" xml:space="preserve">
          <source>The column label or position for x points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd04eb366aaa57d6e315c3a1e94ab9f7318810bc" translate="yes" xml:space="preserve">
          <source>The column label or position for y points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496e27668915d93b6710a7a05d5ea08bff64b1ae" translate="yes" xml:space="preserve">
          <source>The column labels of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b9fba64509719cf5ad7f0c1a2cb207fda1fb8c" translate="yes" xml:space="preserve">
          <source>The column labels to use for lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfb14b3ada372347000f14ab85ce77ffeba9515" translate="yes" xml:space="preserve">
          <source>The column name or column position to be used as horizontal coordinates for each point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dead56ca8e6ddd00554b4b4f1e7ee1e2a270386c" translate="yes" xml:space="preserve">
          <source>The column name or column position to be used as vertical coordinates for each point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee0aac1a66b1eb12cc233d6e565a565a5e17be1" translate="yes" xml:space="preserve">
          <source>The column names are keywords. If the values are callable, they are computed on the DataFrame and assigned to the new columns. The callable must not change input DataFrame (though pandas doesn&amp;rsquo;t check it). If the values are not callable, (e.g. a Series, scalar, or array), they are simply assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603734f565e92028236a1b4fe637c22d25fc6e01" translate="yes" xml:space="preserve">
          <source>The column names for the DataFrame being iterated over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa69217c71a367fe16c4cc1ccc96790a0adb7696" translate="yes" xml:space="preserve">
          <source>The column names will be renamed to positional names if they are invalid Python identifiers, repeated, or start with an underscore. With a large number of columns (&amp;gt;255), regular tuples are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859771c148cd64679e8dceac54e1cc27b8350574" translate="yes" xml:space="preserve">
          <source>The columns format as specified in &lt;a href=&quot;https://en.wikibooks.org/wiki/LaTeX/Tables&quot;&gt;LaTeX table format&lt;/a&gt; e.g. &amp;lsquo;rcl&amp;rsquo; for 3 columns. By default, &amp;lsquo;l&amp;rsquo; will be used for all columns except columns of numbers, which default to &amp;lsquo;r&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbd27c2ff108d01264dc15b0442c92c0cca12e6" translate="yes" xml:space="preserve">
          <source>The columns of a DataFrame can be truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339f715add5fbbc8584cd6799003eff7b617ff9e" translate="yes" xml:space="preserve">
          <source>The columns of the resulting &lt;code&gt;DataFrame&lt;/code&gt; have different &lt;a href=&quot;basics#basics-dtypes&quot;&gt;dtypes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc50b11821758054ff914defeebe1a2bda60d3f4" translate="yes" xml:space="preserve">
          <source>The commands in this table will install pandas for Python 3 from your distribution. To install pandas for Python 2, you may need to use the &lt;code&gt;python-pandas&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70591e847b5c74a3726e37e861f369edd688f5f4" translate="yes" xml:space="preserve">
          <source>The computed or specified bins. Only returned when &lt;code&gt;retbins=True&lt;/code&gt;. For scalar or sequence &lt;code&gt;bins&lt;/code&gt;, this is an ndarray with the computed bins. If set &lt;code&gt;duplicates=drop&lt;/code&gt;, &lt;code&gt;bins&lt;/code&gt; will drop non-unique bin. For an IntervalIndex &lt;code&gt;bins&lt;/code&gt;, this is equal to &lt;code&gt;bins&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27b16e3506e4d5e764bdd0fc01e6ae2ae9ea014" translate="yes" xml:space="preserve">
          <source>The coordinates of each point are defined by two dataframe columns and filled circles are used to represent each point. This kind of plot is useful to see complex correlations between two variables. Points could be for instance natural 2D coordinates like longitude and latitude in a map or, in general, any pair of metrics that can be plotted against each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea625acdc6781dba4bd58f2fe461a519a41789a" translate="yes" xml:space="preserve">
          <source>The core of pandas is, and will remain, its &amp;ldquo;high-performance, easy-to-use data structures&amp;rdquo;. With that in mind, we hope that &lt;code&gt;DataFrame.style&lt;/code&gt; accomplishes two goals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc064b3b484c00d883640426c2a68b9f0a3aee7a" translate="yes" xml:space="preserve">
          <source>The correct way to swap column values is by using raw values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33941291fb1e0c87c285a16385fb41a48a48869c" translate="yes" xml:space="preserve">
          <source>The corresponding method for IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cc88d788cc98fbbbad671f4927ba403ca319d7" translate="yes" xml:space="preserve">
          <source>The corresponding method for IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360f341ef6ba381134393b1594fbaa54a41a7d0f" translate="yes" xml:space="preserve">
          <source>The covariance matrix of the series of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a592412f98c5b4e9930d12bb8c333597743f24ee" translate="yes" xml:space="preserve">
          <source>The criteria to bin by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a1e60fd2064a78005124353880ad6d5666032a" translate="yes" xml:space="preserve">
          <source>The current behaviour of &amp;lsquo;Series.argmax&amp;rsquo; is deprecated, use &amp;lsquo;idxmax&amp;rsquo; instead. The behavior of &amp;lsquo;argmax&amp;rsquo; will be corrected to return the positional maximum in the future. For now, use &amp;lsquo;series.values.argmax&amp;rsquo; or &amp;lsquo;np.argmax(np.array(values))&amp;rsquo; to get the position of the maximum row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fc8d61f6758f12be787f7649ece0afcd26009d" translate="yes" xml:space="preserve">
          <source>The current behaviour of &amp;lsquo;Series.argmin&amp;rsquo; is deprecated, use &amp;lsquo;idxmin&amp;rsquo; instead. The behavior of &amp;lsquo;argmin&amp;rsquo; will be corrected to return the positional minimum in the future. For now, use &amp;lsquo;series.values.argmin&amp;rsquo; or &amp;lsquo;np.argmin(np.array(values))&amp;rsquo; to get the position of the minimum row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8fc67ca0e8e554fcdfc4a52b37e930aedd5ec7" translate="yes" xml:space="preserve">
          <source>The data of the row as a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b46a6371a5e32d7201212d06d795417e7d9ba46" translate="yes" xml:space="preserve">
          <source>The data to append.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8912934a8248c83b94d53606fdaa96ab458a7a" translate="yes" xml:space="preserve">
          <source>The data to be converted to timedelta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87796e0cfeef9524ea3664b9dca8f23ae53dd1c" translate="yes" xml:space="preserve">
          <source>The data to store. These should be arrays that can be directly converted to ordinals without inference or copy (PeriodArray, ndarray[int64]), or a box around such an array (Series[period], PeriodIndex).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a98ea2aca679e0f46d91ae4b2e92996b8664b8c" translate="yes" xml:space="preserve">
          <source>The data type and indication of sparse/dense of each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347c2710a27722538431cd66497ed229ece2a685" translate="yes" xml:space="preserve">
          <source>The data type of each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea04a1b2d966d6e26bb9950ad49a3987df38f25" translate="yes" xml:space="preserve">
          <source>The datetime data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a72d66aa4679137482bf814ae1b74976918804" translate="yes" xml:space="preserve">
          <source>The day of the week with Monday=0, Sunday=6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554072b7cbe5efba256068dc7290ad0703cd1845" translate="yes" xml:space="preserve">
          <source>The day of the week with Monday=0, Sunday=6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64648e620fd79a164edd40b92246b3c3aebed464" translate="yes" xml:space="preserve">
          <source>The day of year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5989e13a431b85456adef20a1f2cc995bfa0c5" translate="yes" xml:space="preserve">
          <source>The days of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b7ac5eaf6043bcc3bcfcf646acc5681f932ee0" translate="yes" xml:space="preserve">
          <source>The days of the period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c64834671b77cc191d56a17247fdc8dd9dd171b" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;ddof&lt;/code&gt; of 1 used in &lt;code&gt;Series.var()&lt;/code&gt; is different than the default &lt;code&gt;ddof&lt;/code&gt; of 0 in &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.var.html#numpy.var&quot;&gt;&lt;code&gt;numpy.var()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b449264054f856d7a4023d0b4c9e6fb5386e6683" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;ddof&lt;/code&gt; of 1 used in Series.std is different than the default &lt;code&gt;ddof&lt;/code&gt; of 0 in numpy.std.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fd908016d3b540a47b93342aa0688d8fbf144e" translate="yes" xml:space="preserve">
          <source>The default behavior with &lt;code&gt;join='outer'&lt;/code&gt; is to sort the other axis (columns in this case). In a future version of pandas, the default will be to not sort. We specified &lt;code&gt;sort=False&lt;/code&gt; to opt in to the new behavior now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c5e86fc863dd44dac93b88a70fd9d945bd63c1" translate="yes" xml:space="preserve">
          <source>The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94deb1ef9aac8ee5071d97b435dad0d700758516" translate="yes" xml:space="preserve">
          <source>The default display value for numeric values is the &amp;ldquo;general&amp;rdquo; (&lt;code&gt;g&lt;/code&gt;) format with &lt;code&gt;pd.options.display.precision&lt;/code&gt; precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3838a96a5c86ae28010187dde5f06778bf3ce890" translate="yes" xml:space="preserve">
          <source>The default implementation is True if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a033c15dcd83543f554bceedc2b3fd44d9f85d1" translate="yes" xml:space="preserve">
          <source>The default is &amp;ldquo;backward&amp;rdquo; and is compatible in versions below 0.20.0. The direction parameter was added in version 0.20.0 and introduces &amp;ldquo;forward&amp;rdquo; and &amp;ldquo;nearest&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2de7bbeecaccacc960723e631406a8183d969f2" translate="yes" xml:space="preserve">
          <source>The default return dtype is &lt;code&gt;float64&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt; depending on the data supplied. Use the &lt;code&gt;downcast&lt;/code&gt; parameter to obtain other dtypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d8de5175ba758737fc415e86d3b36b7a518880" translate="yes" xml:space="preserve">
          <source>The default value may be overridden by specifying a &lt;code&gt;fill_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7a08b440290c21cffc0816bc4e51145b744da7" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;freq&lt;/code&gt; is the &lt;code&gt;freq&lt;/code&gt; attribute of the index, which is &amp;lsquo;MS&amp;rsquo; (month start) in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073f912a2527ac0aff9cae70c295331d17e13f52" translate="yes" xml:space="preserve">
          <source>The details of the parameters will be added in this section. This section has the title &amp;ldquo;Parameters&amp;rdquo;, followed by a line with a hyphen under each letter of the word &amp;ldquo;Parameters&amp;rdquo;. A blank line is left before the section title, but not after, and not between the line with the word &amp;ldquo;Parameters&amp;rdquo; and the one with the hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3e1a1b7aac1fcca4093b60b1bdc23a103805f9" translate="yes" xml:space="preserve">
          <source>The dimensions of DataFrame and other must be compatible in order to compute the matrix multiplication. In addition, the column names of DataFrame and the index of other must contain the same values, as they will be aligned prior to the multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a3f344332215ad709e515143729ea445ed320f" translate="yes" xml:space="preserve">
          <source>The docstrings follow a pandas convention, based on the &lt;strong&gt;Numpy Docstring Standard&lt;/strong&gt;. Follow the &lt;a href=&quot;contributing_docstring#docstring&quot;&gt;pandas docstring guide&lt;/a&gt; for detailed instructions on how to write a correct docstring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfb4c304f228aaff2dc1cec19b6c50daf45cbce" translate="yes" xml:space="preserve">
          <source>The docstrings provide a clear explanation of the usage of the individual functions, while the documentation in this folder consists of tutorial-like overviews per topic together with some other information (what&amp;rsquo;s new, installation, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c5f6ccef319a39910bac9f2c169b3f9186cb6f" translate="yes" xml:space="preserve">
          <source>The documentation is written in &lt;strong&gt;reStructuredText&lt;/strong&gt;, which is almost like writing in plain English, and built using &lt;a href=&quot;http://sphinx.pocoo.org/&quot;&gt;Sphinx&lt;/a&gt;. The Sphinx Documentation has an excellent &lt;a href=&quot;http://sphinx.pocoo.org/rest.html&quot;&gt;introduction to reST&lt;/a&gt;. Review the Sphinx docs to perform more complex changes to the documentation as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7aac8846f37474850cb16c3310b007bad268e00" translate="yes" xml:space="preserve">
          <source>The documentation of the return is also similar to the parameters. But in this case, no name will be provided, unless the method returns or yields more than one value (a tuple of values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0897b2a7a0fa02adf7a30f758cef844f21a9515b" translate="yes" xml:space="preserve">
          <source>The dot method for Series computes the inner product, instead of the matrix product here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1c32fe7462d36538b25efd37151d511037fd38" translate="yes" xml:space="preserve">
          <source>The dot method works also if other is an np.array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b16eb53f1a75de548a6bde9f0180712536d3878" translate="yes" xml:space="preserve">
          <source>The dtype information is available on the &lt;code&gt;Categorical&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ef1002ce728cf60a393377668f0b603a0d1851" translate="yes" xml:space="preserve">
          <source>The dtype of the Interval bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff788d41d8864ac91966b175d1157885276dca0" translate="yes" xml:space="preserve">
          <source>The dtype of the underlying array storing the non-fill value values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbba94d5d0f6fe486cbede799aa9eeb41861faa" translate="yes" xml:space="preserve">
          <source>The dtype to pass to &lt;code&gt;numpy.asarray()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9b06fe3766e5f16050e4f74023856c774e7894" translate="yes" xml:space="preserve">
          <source>The dtype to use for the SparseArray. For numpy dtypes, this determines the dtype of &lt;code&gt;self.sp_values&lt;/code&gt;. For SparseDtype, this determines &lt;code&gt;self.sp_values&lt;/code&gt; and &lt;code&gt;self.fill_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b6a8e1948b82a08d11d2de9bd673b8427920e0" translate="yes" xml:space="preserve">
          <source>The dtype to use for the array. This may be a NumPy dtype or an extension type registered with pandas using &lt;a href=&quot;pandas.api.extensions.register_extension_dtype#pandas.api.extensions.register_extension_dtype&quot;&gt;&lt;code&gt;pandas.api.extensions.register_extension_dtype()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ea048dc012eb95095f8ab5d95b81d6eb184e13" translate="yes" xml:space="preserve">
          <source>The dtype to use for the resulting NumPy array. By default, the dtype is inferred from the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6033055f888ffc49ce021fe4ea924eeb6a1ca8fc" translate="yes" xml:space="preserve">
          <source>The dtype will be a lower-common-denominator dtype (implicit upcasting); that is to say if the dtypes (even of numeric types) are mixed, the one that accommodates all will be chosen. Use this with care if you are not dealing with the blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c13bbf31ea8747d061e25366430476499754944" translate="yes" xml:space="preserve">
          <source>The dtype will be the lowest-common-denominator type (implicit upcasting); that is to say if the dtypes (even of numeric types) are mixed, the one that accommodates all will be chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402e9b51868b17efec48f2c06546f86e2dff706d" translate="yes" xml:space="preserve">
          <source>The earliest supported pytest version is 4.0.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb0f16c4fefb50922eb2b1990a8580cecff19f2" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0ad6e9cac2ca0b5372b00d829b0b91de65b0fa" translate="yes" xml:space="preserve">
          <source>The easiest way to install pandas is to install it as part of the &lt;a href=&quot;http://docs.continuum.io/anaconda/&quot;&gt;Anaconda&lt;/a&gt; distribution, a cross platform distribution for data analysis and scientific computing. This is the recommended installation method for most users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d9c7e68a4be8ac43994ec948a0e91a3a55e18b" translate="yes" xml:space="preserve">
          <source>The encoding is optional, and if not present is UTF-8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db57f3fbdbb4b27ae5e007ca3b428007e12954fd" translate="yes" xml:space="preserve">
          <source>The encoding to use to decode py3 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0ef74d1b7270d348ed7ec1b2a914da574e4151" translate="yes" xml:space="preserve">
          <source>The encoding used to decode the web page. Defaults to &lt;code&gt;None&lt;/code&gt;.``None`` preserves the previous encoding behavior, which depends on the underlying parser library (e.g., the parser library will try to use the encoding provided by the document).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424f85d5be8114e5f2c73b85d3deae13c2984340" translate="yes" xml:space="preserve">
          <source>The engine used to evaluate the expression. Supported engines are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026424f27c591f64e9ae53ca01390954a08e4f1d" translate="yes" xml:space="preserve">
          <source>The equivalent &lt;code&gt;re&lt;/code&gt; function to all non-overlapping matches of pattern or regular expression in string, as a list of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cca18a7b50ea3cff102bf5cc96e6beeeadd235c" translate="yes" xml:space="preserve">
          <source>The equivalent pandas operations are shown below. In addition to these functions pandas supports other Time Series features not available in Base SAS (such as resampling and custom offsets) - see the &lt;a href=&quot;../../user_guide/timeseries#timeseries&quot;&gt;timeseries documentation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909b95a2338903f93c09ad033d48e2e6e9142b94" translate="yes" xml:space="preserve">
          <source>The equivalent pandas operations are shown below. In addition to these functions, pandas supports other Time Series features not available in Stata (such as time zone handling and custom offsets) &amp;ndash; see the &lt;a href=&quot;../../user_guide/timeseries#timeseries&quot;&gt;timeseries documentation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762c00e158f42e7f982d68b65ca7ff4693d06ee8" translate="yes" xml:space="preserve">
          <source>The example below will show a rolling calculation with a window size of four matching the equivalent function call using &lt;code&gt;scipy.stats&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329bff10d2656acb920b02e499aad4d54df51037" translate="yes" xml:space="preserve">
          <source>The example below will show an expanding calculation with a window size of four matching the equivalent function call using &lt;code&gt;scipy.stats&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587a9a62e057904337faca887667080313d4abe6" translate="yes" xml:space="preserve">
          <source>The examples in the docstring (&amp;lsquo;doctests&amp;rsquo;) must be valid Python code, that in a deterministic way returns the presented output, and that can be copied and run by users. This can be checked with the script above, and is also tested on Travis. A failing doctest will be a blocker for merging a PR. Check the &lt;a href=&quot;contributing_docstring#docstring-examples&quot;&gt;examples&lt;/a&gt; section in the docstring guide for some tips and tricks to get the doctests passing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa239efa3bb9c50d52785b92c6e393285c774b8" translate="yes" xml:space="preserve">
          <source>The examples should be as concise as possible. In cases where the complexity of the function requires long examples, is recommended to use blocks with headers in bold. Use double star &lt;code&gt;**&lt;/code&gt; to make a text bold, like in &lt;code&gt;**this example**&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88da40f5219334609e93cf1aa5d6a14e48582fe2" translate="yes" xml:space="preserve">
          <source>The existing interface &lt;code&gt;DataFrame.hist&lt;/code&gt; to plot histogram still can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2342a38bccf11c8abb08a1819a87deccf8cd5f" translate="yes" xml:space="preserve">
          <source>The expanding count of any non-NaN observations inside the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b32a0ed467b4a9f8e2f67e863af9abfbaf3e912" translate="yes" xml:space="preserve">
          <source>The expanding function&amp;rsquo;s apply function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e744e9642d17219b2c910b06c32657e8b5a055" translate="yes" xml:space="preserve">
          <source>The expectation is that this is cheap to compute, and is primarily used for interacting with our indexers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bdba721808815dbebc8ea526518e9c3f52cff5" translate="yes" xml:space="preserve">
          <source>The expression is multiline, but not all them have item assignment. An example of such an arrangement is this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101e1eea0b49b333be0d7d368f0b89b605bfccb1" translate="yes" xml:space="preserve">
          <source>The expression string to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0aae65ec71dd7be215782f754fd2bbc1b2542d6" translate="yes" xml:space="preserve">
          <source>The expression to evaluate. This string cannot contain any Python &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html#simple-statements&quot;&gt;statements&lt;/a&gt;, only Python &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html#expression-statements&quot;&gt;expressions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558df34336f39c16d87f38320c19b5b9f32306f7" translate="yes" xml:space="preserve">
          <source>The extended summary provides details on what the function does. It should not go into the details of the parameters, or discuss implementation notes, which go in other sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807e1cb761a84abbb752537840c6bb9987d2f3b2" translate="yes" xml:space="preserve">
          <source>The extended summary should provide details on why the function is useful and their use cases, if it is not too generic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04933d90d214ab309930e41f4edfdfdc733cc857" translate="yes" xml:space="preserve">
          <source>The file can be read using the file name as string or an open file object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c29dd765ea137d3dc7140e87e273412157a076c" translate="yes" xml:space="preserve">
          <source>The fill value is potentially specified in three ways. In order of precedence, these are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95722d1fb8d2a0701797550a2d84789cc28d3ca5" translate="yes" xml:space="preserve">
          <source>The final step required is to install pandas. This can be done with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bd7c869ab9197b160461618d612bb6b14e967c" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;n&lt;/code&gt; rows of the caller object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c7aa608513ba45af36ee3f7cdd9b2429f03fd4" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;n&lt;/code&gt; rows ordered by the given columns in descending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47c9bad9a0d50e16efb914a6f0b10aec458889a" translate="yes" xml:space="preserve">
          <source>The first calling convention will only modify the names of the index and/or the names of the Index object that is the columns. In this case, the parameter &lt;code&gt;copy&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779a2b640512545f25945cac2a8661ad6babf108" translate="yes" xml:space="preserve">
          <source>The first conventions every Python docstring should follow are defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0257/&quot;&gt;PEP-257&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9314c9bffbf2dd99ccd9114dcf5744aabcbbe8" translate="yes" xml:space="preserve">
          <source>The first element of %(klass)s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29278a8b619c88bc62033e996de5fc561a3ccbd2" translate="yes" xml:space="preserve">
          <source>The first parameter controls which level or levels are stacked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9781f90d582a93f78605c8d0d7b934e5a8d289" translate="yes" xml:space="preserve">
          <source>The first stop for pandas issues and ideas is the &lt;a href=&quot;https://github.com/pandas-dev/pandas/issues&quot;&gt;Github Issue Tracker&lt;/a&gt;. If you have a general question, pandas community experts can answer through &lt;a href=&quot;https://stackoverflow.com/questions/tagged/pandas&quot;&gt;Stack Overflow&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a078fd004b71d4a005de8f56fbf891bf67bbd92" translate="yes" xml:space="preserve">
          <source>The first time you build the docs, it will take quite a while because it has to run all the code examples and build all the generated docstring pages. In subsequent evocations, sphinx will try to only build the pages that have been modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce52aec2aff5d463ae59e14588dc17c6431070ed" translate="yes" xml:space="preserve">
          <source>The fiscal year of the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7032dfe99bbe1c7f8f414fc8f35f2d0c54a6e413" translate="yes" xml:space="preserve">
          <source>The following arithmetic operations are supported: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt; (python engine only) along with the following boolean operations: &lt;code&gt;|&lt;/code&gt; (or), &lt;code&gt;&amp;amp;&lt;/code&gt; (and), and &lt;code&gt;~&lt;/code&gt; (not). Additionally, the &lt;code&gt;'pandas'&lt;/code&gt; parser allows the use of &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3/reference/expressions.html#not&quot;&gt;&lt;code&gt;not&lt;/code&gt;&lt;/a&gt; with the same semantics as the corresponding bitwise operators. &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; objects are supported and behave as they would with plain ol&amp;rsquo; Python evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0062ecb43b3cfa305fca5641333b41553178ebc" translate="yes" xml:space="preserve">
          <source>The following attributes influence the behavior of the dtype in pandas operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6601f74b97be707651a5acd1f1378b954b1e39bc" translate="yes" xml:space="preserve">
          <source>The following data feeds are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cef8c1f15945c2dc0fe193b45c515a3e1f3136f" translate="yes" xml:space="preserve">
          <source>The following defines how a commit message should be structured. Please reference the relevant GitHub issues in your commit message using GH1234 or #1234. Either style is fine, but the former is generally preferred:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03e9488990819bd5ae0b54d4c51731730d9ddd0" translate="yes" xml:space="preserve">
          <source>The following example aims to give a highlight of the behavior of the new align options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b7594ffcb2281c06a127b4176c59b4f5b0433d" translate="yes" xml:space="preserve">
          <source>The following example shows how the method behaves with the above parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75ab12ec0f0a50840334286859cdb21e807d00b" translate="yes" xml:space="preserve">
          <source>The following example shows the populations for some animals over the years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2520eebde8aaa316871d7ad4e41e7a6b820b1640" translate="yes" xml:space="preserve">
          <source>The following example shows the relationship between both populations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fece5f2121f168ba82ac1e775fd1e283c02a0d3b" translate="yes" xml:space="preserve">
          <source>The following examples are generated with random data from a normal distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687aa7699cc4e28054e99e5f501bba469edaf71a" translate="yes" xml:space="preserve">
          <source>The following functions are contained in the &lt;code&gt;pandas.plotting&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faaa2feec4dd9e1f0ff47108b7da498e64ffde68" translate="yes" xml:space="preserve">
          <source>The following methods are available in both &lt;code&gt;SeriesGroupBy&lt;/code&gt; and &lt;code&gt;DataFrameGroupBy&lt;/code&gt; objects, but may differ slightly, usually in that the &lt;code&gt;DataFrameGroupBy&lt;/code&gt; version usually permits the specification of an axis argument, and often an argument indicating whether to restrict application to columns of a specific data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fffb253b4aaeb6acea14045c4996a29875275c" translate="yes" xml:space="preserve">
          <source>The following methods are available only for &lt;code&gt;DataFrameGroupBy&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0903a8cb8025a1c959967330557f9a473e10f8a4" translate="yes" xml:space="preserve">
          <source>The following methods are available only for &lt;code&gt;SeriesGroupBy&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffe8149cda0851680e06a560efc5c8ccdb2df81" translate="yes" xml:space="preserve">
          <source>The following pseudo CSS properties are also available to set excel specific style properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8aa6e01797f7df97d025b6c6a59c54f2b6b5469" translate="yes" xml:space="preserve">
          <source>The following will &lt;strong&gt;not work&lt;/strong&gt; because it matches multiple option names, e.g. &lt;code&gt;display.max_colwidth&lt;/code&gt;, &lt;code&gt;display.max_rows&lt;/code&gt;, &lt;code&gt;display.max_columns&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bd108ab633267cf55a00790d8cf9ecfbe4e1a3" translate="yes" xml:space="preserve">
          <source>The following, while not recommended methods for generating DataFrames, show two ways to generate a DataFrame from multiple data sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138e170da5c426d60332c6449e5ce83e935b8ded" translate="yes" xml:space="preserve">
          <source>The format of the JSON string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af3b5b13b432fd75bd2221a806f9ee0cd60a5ae" translate="yes" xml:space="preserve">
          <source>The format used to represent date-like values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1aa7f259f576c08abf9b9c79f7b4063d7b0d3f" translate="yes" xml:space="preserve">
          <source>The found values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0e4ba98c3158e3606f5527ed8083a30732806c" translate="yes" xml:space="preserve">
          <source>The frequency level to ceil the index to. Must be a fixed frequency like &amp;lsquo;S&amp;rsquo; (second) not &amp;lsquo;ME&amp;rsquo; (month end). See &lt;a href=&quot;../../user_guide/timeseries#timeseries-offset-aliases&quot;&gt;frequency aliases&lt;/a&gt; for a list of possible &lt;code&gt;freq&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d87dcb2bb1749deba7a582bb80a8ba7924f35d" translate="yes" xml:space="preserve">
          <source>The frequency level to floor the index to. Must be a fixed frequency like &amp;lsquo;S&amp;rsquo; (second) not &amp;lsquo;ME&amp;rsquo; (month end). See &lt;a href=&quot;../../user_guide/timeseries#timeseries-offset-aliases&quot;&gt;frequency aliases&lt;/a&gt; for a list of possible &lt;code&gt;freq&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33f682f2e5e962b5a982acb833a76873c9bf33b" translate="yes" xml:space="preserve">
          <source>The frequency level to round the index to. Must be a fixed frequency like &amp;lsquo;S&amp;rsquo; (second) not &amp;lsquo;ME&amp;rsquo; (month end). See &lt;a href=&quot;../../user_guide/timeseries#timeseries-offset-aliases&quot;&gt;frequency aliases&lt;/a&gt; for a list of possible &lt;code&gt;freq&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dfbbe311edc5ab1fa0e3eea87add9013d0c913" translate="yes" xml:space="preserve">
          <source>The frequency object of this PeriodDtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34efcd6f14262e812d82d4f486748c8245af8384" translate="yes" xml:space="preserve">
          <source>The frequency of this PeriodDtype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75632130c3c856285cecc0b4b5525010239f00a" translate="yes" xml:space="preserve">
          <source>The function is named by analogy with a collection of books being reorganized from being side by side on a horizontal position (the columns of the dataframe) to being stacked vertically on top of each other (in the index of the dataframe).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8976b7a90b34a2f85d49407412f19a0a3a04b2c" translate="yes" xml:space="preserve">
          <source>The function passed to &lt;code&gt;apply&lt;/code&gt; must take a dataframe as its first argument and return a DataFrame, Series or scalar. &lt;code&gt;apply&lt;/code&gt; will then take care of combining the results back together into a single dataframe or series. &lt;code&gt;apply&lt;/code&gt; is therefore a highly flexible grouping method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b69b3c0102590605bd7e8e837d4b1e093e1d1ea" translate="yes" xml:space="preserve">
          <source>The get_loc method for (single-level) index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d8aafaea3c3d69409a22c423740c84afb9df16" translate="yes" xml:space="preserve">
          <source>The goal of this 2015 cookbook (by &lt;a href=&quot;http://jvns.ca&quot;&gt;Julia Evans&lt;/a&gt;) is to give you some concrete examples for getting started with pandas. These are examples with real-world data, and all the bugs and weirdness that entails. For the table of contents, see the &lt;a href=&quot;http://github.com/jvns/pandas-cookbook&quot;&gt;pandas-cookbook GitHub repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19332c0506dbe50b87c4f31bdc88435bd2d3123e" translate="yes" xml:space="preserve">
          <source>The governance process that pandas project has used informally since its inception in 2008 is formalized in &lt;a href=&quot;https://github.com/pandas-dev/pandas-governance&quot;&gt;Project Governance documents&lt;/a&gt;. The documents clarify how decisions are made and how the various elements of our community interact, including the relationship between open source collaborative development and work that may be funded by for-profit or non-profit entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232a69f69639ba586fe33201064da64251d4167a" translate="yes" xml:space="preserve">
          <source>The group identifier in the store. Can be omitted if the HDF file contains a single pandas object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ad8b2660d1ba73cc19d194aee74c66d6e9d468" translate="yes" xml:space="preserve">
          <source>The handling of the &lt;code&gt;n&lt;/code&gt; keyword depends on the number of found splits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a74ef898a80d4d455e122ed4927689913e11f17" translate="yes" xml:space="preserve">
          <source>The header can be a list of ints that specify row locations for a MultiIndex on the columns e.g. &lt;code&gt;[0,1,3]&lt;/code&gt;. Intervening rows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this parameter ignores commented lines and empty lines if &lt;code&gt;skip_blank_lines=True&lt;/code&gt;, so header=0 denotes the first line of data rather than the first line of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f4baf24f68ab228a5a404e9d9cc4d088867fbb" translate="yes" xml:space="preserve">
          <source>The hour as an integer, between 0 and 23.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db25a06996e277d4bea2b4dac8e1692a6f17ef7" translate="yes" xml:space="preserve">
          <source>The hour of the period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a558f8a93d4938b56e04a424fd7904b0273baeb" translate="yes" xml:space="preserve">
          <source>The hours of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d687cf27a3f5579822cef10d318f3f8abbf491" translate="yes" xml:space="preserve">
          <source>The implementation is simple, it creates an array of zeros and loops over the rows, applying our &lt;code&gt;integrate_f_typed&lt;/code&gt;, and putting this in the zeros array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8190ac8baba140ed31d4583440808af18e02f95f" translate="yes" xml:space="preserve">
          <source>The index (axis labels) of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36ba98a948575d24887853f618dd8e8e83a90b2" translate="yes" xml:space="preserve">
          <source>The index (row labels) of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9122a14b107cebdcfe40b681209cd301a00852d" translate="yes" xml:space="preserve">
          <source>The index and columns must be unique</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59062eb4825de615d29dc8e3b0cd8a69b5fb8df6" translate="yes" xml:space="preserve">
          <source>The index can be excluded from the record array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1896cc8ebc830ad64f7b6e2154c37ba025c90e" translate="yes" xml:space="preserve">
          <source>The index can be hidden from rendering by calling &lt;code&gt;Styler.hide_index&lt;/code&gt;. Columns can be hidden from rendering by calling &lt;code&gt;Styler.hide_columns&lt;/code&gt; and passing in the name of a column, or a slice of columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe4edf24f7574a811ec87e2a658b5b261aa3e27" translate="yes" xml:space="preserve">
          <source>The index entries that did not have a value in the original data frame (for example, &amp;lsquo;2009-12-29&amp;rsquo;) are by default filled with &lt;code&gt;NaN&lt;/code&gt;. If desired, we can fill in the missing values using one of several options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5a3924b493782a39b6ba185a3a5364a20052a8" translate="yes" xml:space="preserve">
          <source>The index of the row. A tuple for a &lt;code&gt;MultiIndex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbdc15e2f83ddfab85ad87c91f4fc5a615e620d" translate="yes" xml:space="preserve">
          <source>The index or the name of the axis. 0 is equivalent to None or &amp;lsquo;index&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b1e70683e9844c48722360acd2efc0c0f8d07b" translate="yes" xml:space="preserve">
          <source>The index values in &lt;code&gt;truncate&lt;/code&gt; can be datetimes or string dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35ec512367929a41d9cd3282c0a0784665a65d3" translate="yes" xml:space="preserve">
          <source>The indices that the index itself was sorted by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caef1481fbf805c88176474592de5e74c7a1810c" translate="yes" xml:space="preserve">
          <source>The information about current institutional partners can be found on &lt;a href=&quot;https://pandas.pydata.org/about.html&quot;&gt;pandas website page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fc2c649fa1012f5055918636463936f4bc3232" translate="yes" xml:space="preserve">
          <source>The input array to be binned. Must be 1-dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939bc92c43eb914a9ff7e2b31825e59bbf957184" translate="yes" xml:space="preserve">
          <source>The interface consists of two classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebdeb522381b87dc7e3a8c93703238ac4bbd117" translate="yes" xml:space="preserve">
          <source>The interface includes the following abstract methods that must be implemented by subclasses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9595c46e2aad2cb0eba723cfa14958cd1dab93ff" translate="yes" xml:space="preserve">
          <source>The interval to check against for an overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679b60de5244590df99de7a1234df7c3a80f3a9f" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;PROC IMPORT&lt;/code&gt; in SAS is &lt;code&gt;PROC EXPORT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7288f71c3c88367eb035402444927c74971369dc" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;import delimited&lt;/code&gt; in Stata is &lt;code&gt;export delimited&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313b28e6f6728c561db11e61f5fb0d2105366e45" translate="yes" xml:space="preserve">
          <source>The issue will then show up to the &lt;em&gt;pandas&lt;/em&gt; community and be open to comments/ideas from others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c27f6a853017c9057339758d810961d340ee40b" translate="yes" xml:space="preserve">
          <source>The join is done on columns or indexes. If joining columns on columns, the DataFrame indexes &lt;em&gt;will be ignored&lt;/em&gt;. Otherwise if joining indexes on indexes or indexes on a column or columns, the index will be passed on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abb206db4949ca2e24e37998f63833bd3967d84" translate="yes" xml:space="preserve">
          <source>The key cannot be a slice, list of same-level labels, a boolean mask, or a sequence of such. If you want to use those, use &lt;code&gt;MultiIndex.get_locs()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aad223c6c3dcc2ea92c03949d42f4faafc91db3" translate="yes" xml:space="preserve">
          <source>The keys, levels, and names arguments are all optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951814611f4e360846716f735741d1e9644f8173" translate="yes" xml:space="preserve">
          <source>The kind of object to return. The default is &lt;code&gt;axes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af15498936f18bd892da0ef57995d7f1bf96d74a" translate="yes" xml:space="preserve">
          <source>The kind of the SparseIndex tracking where data is not equal to the fill value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef108c8900d997517b5f403d5feb4f143582a97" translate="yes" xml:space="preserve">
          <source>The label up to which the method returns the latest index label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a098a22fc68b503c2403e750a32b4de2259c84" translate="yes" xml:space="preserve">
          <source>The larger the frame and the larger the expression the more speedup you will see from using &lt;a href=&quot;../reference/api/pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f8520c0395f8e9f9b233b2f21bf28007c037e3" translate="yes" xml:space="preserve">
          <source>The last &lt;code&gt;n&lt;/code&gt; rows of the caller object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c20769b8994ed13551ec27ff10252f9e33f5f7" translate="yes" xml:space="preserve">
          <source>The last row (for each element in &lt;code&gt;where&lt;/code&gt;, if list) without any NaN is taken. In case of a &lt;a href=&quot;pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt;, the last row without NaN considering only the subset of columns (if not &lt;code&gt;None&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d815cfd6047037d06e9eee748eac1835bce3ae" translate="yes" xml:space="preserve">
          <source>The layout of boxplot can be adjusted giving a tuple to &lt;code&gt;layout&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8401f09b226e3214786958d2dbddb1dfa5036b" translate="yes" xml:space="preserve">
          <source>The length of each interval. Must be consistent with the type of start and end, e.g. 2 for numeric, or &amp;lsquo;5H&amp;rsquo; for datetime-like. Default is 1 for numeric and &amp;lsquo;D&amp;rsquo; for datetime-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e91ea6b0b59b4bcc64e521a015d379bca65c08" translate="yes" xml:space="preserve">
          <source>The level involved will automatically get sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923397953bf0e0a0c6ac5f6fd247ba650564a521" translate="yes" xml:space="preserve">
          <source>The lexical order of a variable is not the same as the logical order (&amp;ldquo;one&amp;rdquo;, &amp;ldquo;two&amp;rdquo;, &amp;ldquo;three&amp;rdquo;). By converting to a categorical and specifying an order on the categories, sorting and min/max will use the logical order instead of the lexical order, see &lt;a href=&quot;#categorical-sort&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72287d147df163783c823c0184c573bf64db5394" translate="yes" xml:space="preserve">
          <source>The list entries concatenated by intervening occurrences of the delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47e542600352d25d6ddfd94c61674f43cba5fd0" translate="yes" xml:space="preserve">
          <source>The list of the Core Team members and more detailed information can be found on the &lt;a href=&quot;https://github.com/pandas-dev/pandas-governance/blob/master/people.md&quot;&gt;people&amp;rsquo;s page&lt;/a&gt; of the governance repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9274648371818371d893056c89f147ca18a6f3e8" translate="yes" xml:space="preserve">
          <source>The longest component is days, whose value may be larger than 365. Every component is always included, even if its value is 0. Pandas uses nanosecond precision, so up to 9 decimal places may be included in the seconds component. Trailing 0&amp;rsquo;s are removed from the seconds component after the decimal. We do not 0 pad components, so it&amp;rsquo;s &lt;code&gt;&amp;hellip;T5H&amp;hellip;&lt;/code&gt;, not &lt;code&gt;&amp;hellip;T05H&amp;hellip;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c728f93b883de72b79e28ad92ba813b31b463a5" translate="yes" xml:space="preserve">
          <source>The mapping can be specified many different ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4b4f2631ec3cfe6a26f42b88b893989f74b624" translate="yes" xml:space="preserve">
          <source>The mask method is an application of the if-then idiom. For each element in the calling DataFrame, if &lt;code&gt;cond&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; the element is used; otherwise the corresponding element from the DataFrame &lt;code&gt;other&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f683ea0e33c9b081b109d32451e952a52170df95" translate="yes" xml:space="preserve">
          <source>The matplotlib &lt;code&gt;Axes&lt;/code&gt; on which the hexbin is plotted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007eeaca8c931c91d02270e3528b200a70a07108" translate="yes" xml:space="preserve">
          <source>The matplotlib axes to be used by boxplot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0af9e9b25ef45e044d35ed7e881ae3674bbfe3" translate="yes" xml:space="preserve">
          <source>The memory footprint of &lt;code&gt;object&lt;/code&gt; dtype columns is ignored by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0214e7feec3bad341c731865c5487378d7ab650e" translate="yes" xml:space="preserve">
          <source>The memory footprint of &lt;code&gt;object&lt;/code&gt; values is ignored by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c540b53855deddb53265b98976538482e503032" translate="yes" xml:space="preserve">
          <source>The memory usage can optionally include the contribution of the index and elements of &lt;code&gt;object&lt;/code&gt; dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0ba044a0ffd110ecb44cb2f0d845d7c268c084" translate="yes" xml:space="preserve">
          <source>The memory usage can optionally include the contribution of the index and of elements of &lt;code&gt;object&lt;/code&gt; dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8efe100654f820b1306b703c822fc9e107704e" translate="yes" xml:space="preserve">
          <source>The memory usage of a &lt;code&gt;DataFrame&lt;/code&gt; (including the index) is shown when calling the &lt;a href=&quot;../reference/api/pandas.dataframe.info#pandas.DataFrame.info&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;. A configuration option, &lt;code&gt;display.memory_usage&lt;/code&gt; (see &lt;a href=&quot;options#options-available&quot;&gt;the list of options&lt;/a&gt;), specifies if the &lt;code&gt;DataFrame&lt;/code&gt;&amp;rsquo;s memory usage will be displayed when invoking the &lt;code&gt;df.info()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e454ea062689a6ea4be7d10a964b4d915596a3a9" translate="yes" xml:space="preserve">
          <source>The memory usage of each column can be found by calling the &lt;a href=&quot;../reference/api/pandas.dataframe.memory_usage#pandas.DataFrame.memory_usage&quot;&gt;&lt;code&gt;memory_usage()&lt;/code&gt;&lt;/a&gt; method. This returns a &lt;code&gt;Series&lt;/code&gt; with an index represented by column names and memory usage of each column shown in bytes. For the &lt;code&gt;DataFrame&lt;/code&gt; above, the memory usage of each column and the total memory usage can be found with the &lt;code&gt;memory_usage&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a09de75ad6a3109448ec9417a65d598d7929935" translate="yes" xml:space="preserve">
          <source>The merge indicator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed563f7347f457619184de905ac4a1eee8c1ac4" translate="yes" xml:space="preserve">
          <source>The method to use when for replacement, when &lt;code&gt;to_replace&lt;/code&gt; is a scalar, list or tuple and &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42604281a85ffbc5487df96190a6679c606b6dc" translate="yes" xml:space="preserve">
          <source>The method used to calculate the estimator bandwidth. This can be &amp;lsquo;scott&amp;rsquo;, &amp;lsquo;silverman&amp;rsquo;, a scalar constant or a callable. If None (default), &amp;lsquo;scott&amp;rsquo; is used. See &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde&quot;&gt;&lt;code&gt;scipy.stats.gaussian_kde&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af81d793e1f816ba33cae3ca0b660a651e3cc2fc" translate="yes" xml:space="preserve">
          <source>The microseconds of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b14d66a9b4c3410fe8bb69c7d38e82bbb524fe" translate="yes" xml:space="preserve">
          <source>The minimum width of each column in CSS length units. An int is assumed to be px units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b477ed2789039a264b6454f7f01b7aa1a10ad55a" translate="yes" xml:space="preserve">
          <source>The minimum width of each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc637b15b2cb592a407cc548be20ddebd2120986" translate="yes" xml:space="preserve">
          <source>The minute as an integer, between 0 and 59.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6569764e9b9a662ba23cc896ab1ccee1749b5df" translate="yes" xml:space="preserve">
          <source>The minute of the period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32b6cde1157adaa24fcd29957c296f6f0a6bb56" translate="yes" xml:space="preserve">
          <source>The minutes of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9453d4e70dcfbf1bc833a33630c19578c80af0f" translate="yes" xml:space="preserve">
          <source>The mode of a set of values is the value that appears most often. It can be multiple values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a90411c9b4858260f7b81fc226825a712f494fb" translate="yes" xml:space="preserve">
          <source>The modes of each column or row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468c34cf153e19b52c3bb16ae3154400817f1fbb" translate="yes" xml:space="preserve">
          <source>The month as January=1, December=12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a097b9d836b42484bc515fa475f70544735b5a66" translate="yes" xml:space="preserve">
          <source>The month as January=1, December=12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7eaa2bd11f9b9f190bdd4cc5ec85fdb69b4226" translate="yes" xml:space="preserve">
          <source>The motivation for having an &lt;code&gt;Index&lt;/code&gt; class in the first place was to enable different implementations of indexing. This means that it&amp;rsquo;s possible for you, the user, to implement a custom &lt;code&gt;Index&lt;/code&gt; subclass that may be better suited to a particular application than the ones provided in pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869e8364ba8283da06dc221a0d84a58861751c37" translate="yes" xml:space="preserve">
          <source>The name of a parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c4358e73923051c0853434d9775952656c918b" translate="yes" xml:space="preserve">
          <source>The name of the returned namedtuples or None to return regular tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472c1ceac59fe82e62dfcc918e65363ff2e634ad" translate="yes" xml:space="preserve">
          <source>The name of the sub-observation variable. What you wish to name your suffix in the long format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9022eabcad504511f5abf1f9dc89bd3029a0dc24" translate="yes" xml:space="preserve">
          <source>The name of the type, for example &lt;code&gt;category&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942c1cfbb5da607b3a224c0a214a3c2bf10eceae" translate="yes" xml:space="preserve">
          <source>The name to use for the column containing the original Series values. Uses &lt;code&gt;self.name&lt;/code&gt; by default. This argument is ignored when &lt;code&gt;drop&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74239ff4fa8be7affb888e52da014078dda191b5" translate="yes" xml:space="preserve">
          <source>The names of &amp;lsquo;variable&amp;rsquo; and &amp;lsquo;value&amp;rsquo; columns can be customized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af7e13eaa1ef6335d5434c4021b6dd9107a7a3c" translate="yes" xml:space="preserve">
          <source>The nanoseconds of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b78ec60325da96866bc27e5cc194a495e3ab1d" translate="yes" xml:space="preserve">
          <source>The new categories to be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c9cbf54a80ec100f92ef66a99e0ca44b52fe4b" translate="yes" xml:space="preserve">
          <source>The new index levels are sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205f307e9a241cd14826e510387b412f0d55cd86" translate="yes" xml:space="preserve">
          <source>The newline character or character sequence to use in the output file. Defaults to &lt;code&gt;os.linesep&lt;/code&gt;, which depends on the OS in which this method is called (&amp;lsquo;n&amp;rsquo; for linux, &amp;lsquo;rn&amp;rsquo; for Windows, i.e.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee288780b01526bd96fb1c5f783e3b6474da3457" translate="yes" xml:space="preserve">
          <source>The newly created array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b621c7227283172c772038d67552683c1b91d4b" translate="yes" xml:space="preserve">
          <source>The next example aggregates by taking the mean across multiple columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f8b2d37abcfbdaffc0a10e0a64eda118a2b79c" translate="yes" xml:space="preserve">
          <source>The next example uses &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;np.sum&lt;/code&gt; as &lt;code&gt;reduce_C_function&lt;/code&gt;. Note that &lt;code&gt;&amp;lsquo;observations&amp;rsquo;&lt;/code&gt; values ranges from 1 to 5 but the result plot shows values up to more than 25. This is because of the &lt;code&gt;reduce_C_function&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b031439e6ccffa0c8703f18995c3a3820bcf596" translate="yes" xml:space="preserve">
          <source>The next four examples generate the same &lt;code&gt;DatetimeIndex&lt;/code&gt;, but vary the combination of &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;periods&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2021d890a177f83b098297bbb2ff685cfe3065" translate="yes" xml:space="preserve">
          <source>The next option you have are &amp;ldquo;table styles&amp;rdquo;. These are styles that apply to the table as a whole, but don&amp;rsquo;t look at the data. Certain sytlings, including pseudo-selectors like &lt;code&gt;:hover&lt;/code&gt; can only be used this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e6b0921919b371dddbe756a710788e70568ef3" translate="yes" xml:space="preserve">
          <source>The next step is to create a new conda environment. A conda environment is like a virtualenv that allows you to specify a specific version of Python and set of libraries. Run the following commands from a terminal window:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d80f9cc40118d8c7d54d8a9cd4e2489b0bbabe3" translate="yes" xml:space="preserve">
          <source>The number of bytes needed to store this object in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435559aa14bf09863b43d95c15f10f77dd1771bd" translate="yes" xml:space="preserve">
          <source>The number of consecutive NAs to fill before stopping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd503654d0bf114a58a10a419a9d56d4f338738" translate="yes" xml:space="preserve">
          <source>The number of days in the month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff056a9dfe8558b99cb3b232a0c622c8e50a37c0" translate="yes" xml:space="preserve">
          <source>The number of days in the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042cf84840f3ad0e37dca4bf11dc79f2d9d819fc" translate="yes" xml:space="preserve">
          <source>The number of decimal places to use when encoding floating point values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7e5b093d75f7dd7088ba954f14126edea257a6" translate="yes" xml:space="preserve">
          <source>The number of hexagons in the x-direction. The corresponding number of hexagons in the y-direction is chosen in a way that the hexagons are approximately regular. Alternatively, gridsize can be a tuple with two elements specifying the number of hexagons in the x-direction and the y-direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623e138181076d7c469bdcdf969917b5b9ba4d48" translate="yes" xml:space="preserve">
          <source>The number of months represented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefce58ca8c26ddb87cc7e8e49ce6014bf02f8ae" translate="yes" xml:space="preserve">
          <source>The number of non- &lt;code&gt;fill_value&lt;/code&gt; points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f6e149d0997c359c5c6df0f702f5ed9a7db96c" translate="yes" xml:space="preserve">
          <source>The number of periods to shift. Negative values are allowed for shifting backwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02738e140e509b547c333b961f33715cd1337362" translate="yes" xml:space="preserve">
          <source>The number of prior stack frames to traverse and add to the current scope. Most users will &lt;strong&gt;not&lt;/strong&gt; need to change this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47006074a4284de2d08115410e184f4134b3b4db" translate="yes" xml:space="preserve">
          <source>The number of repetitions for each element. This should be a non-negative integer. Repeating 0 times will return an empty ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d76fa5776dde4dda59b5857a1bba329a8a6b46" translate="yes" xml:space="preserve">
          <source>The number of repetitions for each element. This should be a non-negative integer. Repeating 0 times will return an empty Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15edcd8a5a75ce34ddea34f766d0880ac228660a" translate="yes" xml:space="preserve">
          <source>The number of repetitions for each element. This should be a non-negative integer. Repeating 0 times will return an empty Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959cc306d091367005395eec44ce05de49afa0f0" translate="yes" xml:space="preserve">
          <source>The number of rows to consider when letting the parser determine the &lt;code&gt;colspecs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cfdb40506fd700fbb3f177793a4c6a457e3f5b" translate="yes" xml:space="preserve">
          <source>The number of rows to display in a truncated repr (when number of rows is above &lt;code&gt;max_rows&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae1f3ee233b89ab1b1a8eab54193e4f076d6e08" translate="yes" xml:space="preserve">
          <source>The number of rows to display in the console in a truncated repr (when number of rows is above &lt;code&gt;max_rows&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b38bd2f621d285d5c32cfcb37c37dc75f5b0052" translate="yes" xml:space="preserve">
          <source>The number of time periods the offset represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1351c99b7c959f89e54be94d2e1a1265070c0fe9" translate="yes" xml:space="preserve">
          <source>The numpy array interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d087a2185f9f2ce2d51d8e471c6b5735ce7a26eb" translate="yes" xml:space="preserve">
          <source>The object need not be a DatetimeIndex object. It just needs to have a dtype which has a timezone component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34e5f6f8853c4283e277968c201ce55d1d5f4d0" translate="yes" xml:space="preserve">
          <source>The object to check if is a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbfb146acae6cf5d1e2df4b8b0cf4b046d06226" translate="yes" xml:space="preserve">
          <source>The object to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b3057e6bef7de938da21b166ce3aa9f4c7c09f" translate="yes" xml:space="preserve">
          <source>The offset string or object representing target conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd06064d787a7bd93ef1a68f6a0a95bc7a6e9c0" translate="yes" xml:space="preserve">
          <source>The offset string or object representing target grouper conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12d7e3c7c46ccf79e518acf06683097f613c9c8" translate="yes" xml:space="preserve">
          <source>The ordinal day of the year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781d9d01ec66b9cf0b9b4b4fdfeadd723a7bfb88" translate="yes" xml:space="preserve">
          <source>The ordinal day of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0558fc0b8332a66277879215002dcadd7579df5" translate="yes" xml:space="preserve">
          <source>The original ExtensionArray that factorize was called on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbdfe923514d50323bc3f52e5130523c675102b" translate="yes" xml:space="preserve">
          <source>The original Series sorted by the labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf55ba53e8c3dd53f183f3a8e7ca54290f40243" translate="yes" xml:space="preserve">
          <source>The original object is not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a23319e86098d86b6acc1057eda024f34da7959" translate="yes" xml:space="preserve">
          <source>The other Series or DataFrame to be compared with the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0abc2dee3a83ba247c229eafab56dca3ed8e94" translate="yes" xml:space="preserve">
          <source>The other object to compute the dot product with its columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f1a6652562ca3f7dcdff42637ec365c0a715b0" translate="yes" xml:space="preserve">
          <source>The other object to compute the matrix product with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbc32ae89dfeeb2ac48cddaabb50db5baf7b5af" translate="yes" xml:space="preserve">
          <source>The other two forms mimic the parameters from &lt;code&gt;datetime.datetime&lt;/code&gt;. They can be passed by either position or keyword, but not both mixed together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97428b0ccfaabfd8d098101e4400a125a4770266" translate="yes" xml:space="preserve">
          <source>The output of the mapping function applied to the index. If the function returns a tuple with more than one element a MultiIndex will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34a0f3f2187a703d1f898f84a7d13bbbe6f96e8" translate="yes" xml:space="preserve">
          <source>The output shape of &lt;code&gt;func&lt;/code&gt; should match the input, i.e. if &lt;code&gt;x&lt;/code&gt; is the input row, column, or table (depending on &lt;code&gt;axis&lt;/code&gt;), then &lt;code&gt;func(x).shape == x.shape&lt;/code&gt; should be true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32a8e52ecf350f3d5a747b3c786e8bd6035a2e2" translate="yes" xml:space="preserve">
          <source>The output type will the be same as &amp;lsquo;left&amp;rsquo;, if it is a subclass of DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cc42eb84f71abb1f9799ed9c9d77f6c6cc8249" translate="yes" xml:space="preserve">
          <source>The pandas I/O API is a set of top level &lt;code&gt;reader&lt;/code&gt; functions accessed like &lt;a href=&quot;../reference/api/pandas.read_csv#pandas.read_csv&quot;&gt;&lt;code&gt;pandas.read_csv()&lt;/code&gt;&lt;/a&gt; that generally return a pandas object. The corresponding &lt;code&gt;writer&lt;/code&gt; functions are object methods that are accessed like &lt;a href=&quot;../reference/api/pandas.dataframe.to_csv#pandas.DataFrame.to_csv&quot;&gt;&lt;code&gt;DataFrame.to_csv()&lt;/code&gt;&lt;/a&gt;. Below is a table containing available &lt;code&gt;readers&lt;/code&gt; and &lt;code&gt;writers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdd816d618d71e3a0349561b67330e4d60ca510" translate="yes" xml:space="preserve">
          <source>The pandas method is &lt;a href=&quot;../../reference/api/pandas.read_csv#pandas.read_csv&quot;&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/a&gt;, which works similarly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c86bf97eefb0d383638157467b99c72d6c94a5e" translate="yes" xml:space="preserve">
          <source>The pandas method is &lt;a href=&quot;../../reference/api/pandas.read_csv#pandas.read_csv&quot;&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/a&gt;, which works similarly. Additionally, it will automatically download the data set if presented with a url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4214f7cb13c02200fc758d1ba653c7d3d2925135" translate="yes" xml:space="preserve">
          <source>The pandas object holding the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6a6580ef831365238a7968b818ece9e94c9ff3" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;return_type&lt;/code&gt; can be used to select the type of element returned by &lt;code&gt;boxplot&lt;/code&gt;. When &lt;code&gt;return_type='axes'&lt;/code&gt; is selected, the matplotlib axes on which the boxplot is drawn are returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5de879fb78cb203c4db8224a59c88f7e55e095" translate="yes" xml:space="preserve">
          <source>The parameters &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; must be from the same type, you must be able to compare them and they must satisfy &lt;code&gt;left &amp;lt;= right&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a3658c4ab640187d72027736edb717444f98b3" translate="yes" xml:space="preserve">
          <source>The parameters are defined by their name, followed by a space, a colon, another space, and the type (or types). Note that the space between the name and the colon is important. Types are not defined for &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;, but must be defined for all other parameters. After the parameter definition, it is required to have a line with the parameter description, which is indented, and can have multiple lines. The description must start with a capital letter, and finish with a dot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4021e99fcfe389611b00fa1e1e375ef6c28bda" translate="yes" xml:space="preserve">
          <source>The parser to use to construct the syntax tree from the expression. The default of &lt;code&gt;'pandas'&lt;/code&gt; parses code slightly different than standard Python. Alternatively, you can parse an expression using the &lt;code&gt;'python'&lt;/code&gt; parser to retain strict Python semantics. See the &lt;a href=&quot;../../user_guide/enhancingperf#enhancingperf-eval&quot;&gt;enhancing performance&lt;/a&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd82d8138c348a77074696421439c48a77dec69" translate="yes" xml:space="preserve">
          <source>The parsing engine to use. &amp;lsquo;bs4&amp;rsquo; and &amp;lsquo;html5lib&amp;rsquo; are synonymous with each other, they are both there for backwards compatibility. The default of &lt;code&gt;None&lt;/code&gt; tries to use &lt;code&gt;lxml&lt;/code&gt; to parse and if that fails it falls back on &lt;code&gt;bs4&lt;/code&gt; + &lt;code&gt;html5lib&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d333f158e14ba9fe626200bbefd9154d8bcd52ff" translate="yes" xml:space="preserve">
          <source>The passed &lt;strong&gt;index&lt;/strong&gt; is a list of axis labels. Thus, this separates into a few cases depending on what &lt;strong&gt;data is&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae38d74ee55d7f4c3dcc093fdb2b6aaa449cd98b" translate="yes" xml:space="preserve">
          <source>The passed label if it is in the index. The previous label if the passed label is not in the sorted index or &lt;code&gt;NaN&lt;/code&gt; if there is no such label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9f0fbbfe09095e9388851be75453c8753da328" translate="yes" xml:space="preserve">
          <source>The passed name should substitute for the index name (if it has one).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7528c46a5415db3abf012226858d0ddd9a61d62c" translate="yes" xml:space="preserve">
          <source>The passed name should substitute for the series name (if it has one).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ad366f06aef948abcea11f57c9964c6207634e" translate="yes" xml:space="preserve">
          <source>The passed names should substitute index level names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5617c3e9d3f80c864d2c7cb3cfff079617786cf3" translate="yes" xml:space="preserve">
          <source>The percent of non- &lt;code&gt;fill_value&lt;/code&gt; points, as decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ecf9686ef63612456cba84e32f6d437116ce9e" translate="yes" xml:space="preserve">
          <source>The percentiles to include in the output. All should fall between 0 and 1. The default is &lt;code&gt;[.25, .5, .75]&lt;/code&gt;, which returns the 25th, 50th, and 75th percentiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83557ad7c919ab9a9b1f712d2de2ea1ff06a50b2" translate="yes" xml:space="preserve">
          <source>The point of using &lt;a href=&quot;../reference/api/pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; for expression evaluation rather than plain Python is two-fold: 1) large &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; objects are evaluated more efficiently and 2) large arithmetic and boolean expressions are evaluated all at once by the underlying engine (by default &lt;code&gt;numexpr&lt;/code&gt; is used for evaluation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be427a8952488ee8f61241c6ad57d3b3b2d3167c" translate="yes" xml:space="preserve">
          <source>The precision at which to store and display the bins labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57429d5886e7ba042042f676a2b920c29c33e221" translate="yes" xml:space="preserve">
          <source>The precision at which to store and display the bins labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5d4bb5543f5a8133d26857a4c1e4e955e527c5" translate="yes" xml:space="preserve">
          <source>The precision of the datetime data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9710306c5002505d79c0c09a6d07b88cc1b7396" translate="yes" xml:space="preserve">
          <source>The precision of the datetime data. Currently limited to &lt;code&gt;&quot;ns&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f000a4fda3527c7e5a6de47aae328431a119eb01" translate="yes" xml:space="preserve">
          <source>The previous expression is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81571d6fe4da0960d36d1e4460bed6c0e62846b7" translate="yes" xml:space="preserve">
          <source>The previous section outlined how to get pandas installed as part of the &lt;a href=&quot;http://docs.continuum.io/anaconda/&quot;&gt;Anaconda&lt;/a&gt; distribution. However this approach means you will install well over one hundred packages and involves downloading the installer which is a few hundred megabytes in size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cbf36401a0168146dab10473ea89163457e025" translate="yes" xml:space="preserve">
          <source>The projection after squeezing &lt;code&gt;axis&lt;/code&gt; or all the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81acc1e74b2d94e9cf84073a96c1a2a569b64f34" translate="yes" xml:space="preserve">
          <source>The quarter of the date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1ac70a76670d547fc833eee5881cc01f39bb40" translate="yes" xml:space="preserve">
          <source>The quarter of the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b89ca2fbea8da348417aafb60e88f9bb50c32f" translate="yes" xml:space="preserve">
          <source>The query string to evaluate. You can refer to variables in the environment by prefixing them with an &amp;lsquo;@&amp;rsquo; character like &lt;code&gt;@a + b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396c61e446d440b8a9522c2879a8becaf9230655" translate="yes" xml:space="preserve">
          <source>The range really is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;61&lt;/code&gt;; this accounts for leap seconds and the (very rare) double leap seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd668de4a29e13c343aa508392a3bbec94aae6dd" translate="yes" xml:space="preserve">
          <source>The recognized win_types are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e5f62bbdecf31b9d993a940bedbe8bfcd96e83" translate="yes" xml:space="preserve">
          <source>The related &lt;a href=&quot;../reference/api/pandas.dataframe.join#pandas.DataFrame.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; method, uses &lt;code&gt;merge&lt;/code&gt; internally for the index-on-index (by default) and column(s)-on-index join. If you are joining on index only, you may wish to use &lt;code&gt;DataFrame.join&lt;/code&gt; to save yourself some typing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f69cafc1b64f0d14abd5ded16ab91ecf8785eb" translate="yes" xml:space="preserve">
          <source>The remaining methods implemented on this class should be performant, as they only compose abstract methods. Still, a more efficient implementation may be available, and these methods can be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b47d0d9e49c48dd6e7ef5093ac4fd92844e9343" translate="yes" xml:space="preserve">
          <source>The rendered HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8cf862416c25604a0aebe9bb600983f9f3ab55" translate="yes" xml:space="preserve">
          <source>The required number of valid values to perform the operation. If fewer than &lt;code&gt;min_count&lt;/code&gt; non-NA values are present the result will be NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77121a6f2e4e9ea8aefafc47f9e2107160a25003" translate="yes" xml:space="preserve">
          <source>The rest of this document will summarize all the above guides, and will provide additional convention specific to the pandas project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d2e0bdb9f8e4d995d148a9da5086f6251f488b" translate="yes" xml:space="preserve">
          <source>The result of combining the Series with the other object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7828da3cdb6360b2d1e00710bcb0b180c180a45d" translate="yes" xml:space="preserve">
          <source>The result of the evaluation of this expression is first passed to &lt;a href=&quot;pandas.dataframe.loc#pandas.DataFrame.loc&quot;&gt;&lt;code&gt;DataFrame.loc&lt;/code&gt;&lt;/a&gt; and if that fails because of a multidimensional key (e.g., a DataFrame) then the result will be passed to &lt;code&gt;DataFrame.__getitem__()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5a5f27b55d1f0280a61cdc1b3a967d55f8456f" translate="yes" xml:space="preserve">
          <source>The result of the evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1c264300cd8b658cc8b4e315b7758a06a23af7" translate="yes" xml:space="preserve">
          <source>The result of the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bcf90539d00645ed644427ca20760852c7ac2c" translate="yes" xml:space="preserve">
          <source>The result will only be true at a location if all the labels match. If &lt;code&gt;values&lt;/code&gt; is a Series, that&amp;rsquo;s the index. If &lt;code&gt;values&lt;/code&gt; is a dict, the keys must be the column names, which must match. If &lt;code&gt;values&lt;/code&gt; is a DataFrame, then both the index and column labels must match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81bc866c8cf80d7ed032edef232760b9f8c3550" translate="yes" xml:space="preserve">
          <source>The resulting MultiIndex will have the same outward appearance, meaning the same .values and ordering. It will also be .equals() to the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1d81e9fcc51e7155d40abe62aa6a16ff8d1006" translate="yes" xml:space="preserve">
          <source>The resulting docstrings are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8366275c19d6dbfefea3e3555fd2ab1c88ed49" translate="yes" xml:space="preserve">
          <source>The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1490e9a7fc98d64acac99d497e98444507d28fbd" translate="yes" xml:space="preserve">
          <source>The return can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b85b33b7c02a04deda36103dc52578bc9f0295" translate="yes" xml:space="preserve">
          <source>The return type (Categorical or Series) depends on the input: a Series of type category if input is a Series else Categorical. Bins are represented as categories when categorical data is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1627476263193587edd221c596b8faa83658a58f" translate="yes" xml:space="preserve">
          <source>The return type depends on the &lt;code&gt;return_type&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992ffa7f4ae029ba5642dde9b52cccad7cbc2cfd" translate="yes" xml:space="preserve">
          <source>The return type will be the same as &lt;code&gt;left&lt;/code&gt;. If &lt;code&gt;left&lt;/code&gt; is a &lt;code&gt;DataFrame&lt;/code&gt; or named &lt;code&gt;Series&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; is a subclass of &lt;code&gt;DataFrame&lt;/code&gt;, the return type will still be &lt;code&gt;DataFrame&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed476228c85f69922821770cf70d3b9926420909" translate="yes" xml:space="preserve">
          <source>The returned array will be the same up to equality (values equal in &lt;code&gt;self&lt;/code&gt; will be equal in the returned array; likewise for values that are not equal). When &lt;code&gt;self&lt;/code&gt; contains an ExtensionArray, the dtype may be different. For example, for a category-dtype Series, &lt;code&gt;to_numpy()&lt;/code&gt; will return a NumPy array and the categorical dtype will be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a9b245b6b6f3094e60c2559a8e59157767111b" translate="yes" xml:space="preserve">
          <source>The rolling count of any non-NaN observations inside the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c3af82d229d6f5306c8ce848fa78bfd222ec1f" translate="yes" xml:space="preserve">
          <source>The rolling function&amp;rsquo;s apply function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c72e549282f6aa72b084cdbb9c83b3d9574f499" translate="yes" xml:space="preserve">
          <source>The rotation angle of labels (in degrees) with respect to the screen coordinate system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b6193d2f72888279a1fdbd1c9a96e81e230f67" translate="yes" xml:space="preserve">
          <source>The row (or list of rows for a &lt;a href=&quot;pandas.multiindex#pandas.MultiIndex&quot;&gt;&lt;code&gt;MultiIndex&lt;/code&gt;&lt;/a&gt;) to use to make the columns headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f5302b7291118fbb4dbdbea0ca878bb4c42a01" translate="yes" xml:space="preserve">
          <source>The row labels to use for lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ed927022d23f68868325e3665965a9704bad19" translate="yes" xml:space="preserve">
          <source>The same operation in pandas can be accomplished using the &lt;code&gt;where&lt;/code&gt; method from &lt;code&gt;numpy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce2662e1d97b02d60bc4c1a7b9ba6899f6bf524" translate="yes" xml:space="preserve">
          <source>The same operations are expressed in pandas below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafc67ac697fccf7f09cb94d41ef73e708f72b36" translate="yes" xml:space="preserve">
          <source>The same operations are expressed in pandas below. Note that in contrast to Stata, these operations do not happen in place. To make these changes persist, assign the operation back to a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c58708e3e3fba35ca4dbb71be213768210f6fea" translate="yes" xml:space="preserve">
          <source>The same type as the caller or None if &lt;code&gt;inplace&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2def2a71e9091c25f4bd78f38c1a40f038788cc3" translate="yes" xml:space="preserve">
          <source>The same type as the caller or None if inplace is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76721095f49027e5d5ed7d0c406345eb56ad4a10" translate="yes" xml:space="preserve">
          <source>The same type as the calling object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3ae2acaf1f2f03ee68f1176046396918ed9196" translate="yes" xml:space="preserve">
          <source>The same type as the original data with boolean values. Series will have the same name and index. DatetimeIndex will have the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e524037682385113145ba1a6cfa1ec7a2b8cf010" translate="yes" xml:space="preserve">
          <source>The same type as the original data. Series will have the same name and index. DatetimeIndex will have the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969186d0efcdfa245b2cc072d16a13c0ed6d9422" translate="yes" xml:space="preserve">
          <source>The scalar type for the array, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf6b0ba062bda0294a4cc687f93e7ec0c48bff7" translate="yes" xml:space="preserve">
          <source>The scalar type for the array, e.g. &lt;code&gt;int&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a0191d22d6c839516b1560d1e8d4049142780b" translate="yes" xml:space="preserve">
          <source>The scalar value not stored in the SparseArray. By default, this depends on &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b1d771ab2f0aa3d89199585b56883e43ca8f70" translate="yes" xml:space="preserve">
          <source>The scalar value to use for newly introduced missing values. The default is &lt;code&gt;self.dtype.na_value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a091cef3cca53dec3318d7dad8abe0239c9140e7" translate="yes" xml:space="preserve">
          <source>The scalar value to use for newly introduced missing values. the default depends on the dtype of &lt;code&gt;self&lt;/code&gt;. For numeric data, &lt;code&gt;np.nan&lt;/code&gt; is used. For datetime, timedelta, or period data, etc. &lt;code&gt;NaT&lt;/code&gt; is used. For extension dtypes, &lt;code&gt;self.dtype.na_value&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a770eefca45b5b72cb7aed7f41dc5b3b5e9faffe" translate="yes" xml:space="preserve">
          <source>The scalars inside &lt;code&gt;data&lt;/code&gt; should be instances of the scalar type for &lt;code&gt;dtype&lt;/code&gt;. It&amp;rsquo;s expected that &lt;code&gt;data&lt;/code&gt; represents a 1-dimensional array of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da03a0d2aa81134a8747096e5636bd439b2dcc2" translate="yes" xml:space="preserve">
          <source>The script verifies the linting of code files, it looks for common mistake patterns (like missing spaces around sphinx directives that make the documentation not being rendered properly) and it also validates the doctests. It is possible to run the checks independently by using the parameters &lt;code&gt;lint&lt;/code&gt;, &lt;code&gt;patterns&lt;/code&gt; and &lt;code&gt;doctests&lt;/code&gt; (e.g. &lt;code&gt;./ci/code_checks.sh lint&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc31b4660a8563222bb0144021e41774b0c7364" translate="yes" xml:space="preserve">
          <source>The search for the pattern &amp;lsquo;Monkey&amp;rsquo; returns one match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a405dfb764231139a687e0c98e53959c00b35247" translate="yes" xml:space="preserve">
          <source>The second approach assumes that the underlying elements (i.e., scalar type) of the &lt;code&gt;ExtensionArray&lt;/code&gt; have the individual operators already defined. In other words, if your &lt;code&gt;ExtensionArray&lt;/code&gt; named &lt;code&gt;MyExtensionArray&lt;/code&gt; is implemented so that each element is an instance of the class &lt;code&gt;MyExtensionElement&lt;/code&gt;, then if the operators are defined for &lt;code&gt;MyExtensionElement&lt;/code&gt;, the second approach will automatically define the operators for &lt;code&gt;MyExtensionArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca52b010fa605f2ee4f369f8cb284449e3e438f6" translate="yes" xml:space="preserve">
          <source>The second calling convention will modify the names of the the corresponding index if mapper is a list or a scalar. However, if mapper is dict-like or a function, it will use the deprecated behavior of modifying the axis &lt;em&gt;labels&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf780186b806afbce21ef49aef1ed5b9ec915424" translate="yes" xml:space="preserve">
          <source>The second of the Period (ranges from 0 to 59).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b472b678a28517514097b064aeba5a58ced4265f" translate="yes" xml:space="preserve">
          <source>The second of the period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5943d41ff125fb9b0a9be1fb0bab2715346540" translate="yes" xml:space="preserve">
          <source>The seconds of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9792f4cc99b9e9433600b925b441c008f8dec71" translate="yes" xml:space="preserve">
          <source>The selected object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1885cda70a693e6364cfa8821b2ce9a251f3c509" translate="yes" xml:space="preserve">
          <source>The selected object. Return type depends on the object stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad769e26717baa8515cdc19a2f2284a46a175a8" translate="yes" xml:space="preserve">
          <source>The separator between the different elements/columns. By default the empty string &lt;code&gt;&amp;lsquo;&amp;rsquo;&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4398e142a656cf9e480c3f6602870954fcb067b2" translate="yes" xml:space="preserve">
          <source>The sequence of values to test. Passing in a single string will raise a &lt;code&gt;TypeError&lt;/code&gt;. Instead, turn a single string into a list of one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6449473cbc55300f624baf6317ec0107782fd312" translate="yes" xml:space="preserve">
          <source>The set of tables containing text matching this regex or string will be returned. Unless the HTML is extremely simple you will probably need to pass a non-empty string here. Defaults to &amp;lsquo;.+&amp;rsquo; (match any non-empty string). The default value will return all tables contained on a page. This value is converted to a regular expression so that there is consistent behavior between Beautiful Soup and lxml.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f5bd8d0dc32dcec6e6de368b7412f98affbe15" translate="yes" xml:space="preserve">
          <source>The short summary is a single sentence that expresses what the function does in a concise way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a871becb3793790d2424c4ec96b5ddbba1d1a6b" translate="yes" xml:space="preserve">
          <source>The short summary must start with a capital letter, end with a dot, and fit in a single line. It needs to express what the object does without providing details. For functions and methods, the short summary must start with an infinitive verb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e2cd4be526759f8759f0ec9f7bdd368cb0c45f" translate="yes" xml:space="preserve">
          <source>The signature for &lt;a href=&quot;#pandas.DataFrame.where&quot;&gt;&lt;code&gt;DataFrame.where()&lt;/code&gt;&lt;/a&gt; differs from &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html#numpy.where&quot;&gt;&lt;code&gt;numpy.where()&lt;/code&gt;&lt;/a&gt;. Roughly &lt;code&gt;df1.where(m, df2)&lt;/code&gt; is equivalent to &lt;code&gt;np.where(m, df1, df2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ffe018315752fd3ac08196adfc88ff2920411e" translate="yes" xml:space="preserve">
          <source>The signature for &lt;a href=&quot;pandas.dataframe.where#pandas.DataFrame.where&quot;&gt;&lt;code&gt;DataFrame.where()&lt;/code&gt;&lt;/a&gt; differs from &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html#numpy.where&quot;&gt;&lt;code&gt;numpy.where()&lt;/code&gt;&lt;/a&gt;. Roughly &lt;code&gt;df1.where(m, df2)&lt;/code&gt; is equivalent to &lt;code&gt;np.where(m, df1, df2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e83009ed13e6b800b3d0b66b63aef94ce3a4a83" translate="yes" xml:space="preserve">
          <source>The simplest way to install not only pandas, but Python and the most popular packages that make up the &lt;a href=&quot;http://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt; stack (&lt;a href=&quot;http://ipython.org/&quot;&gt;IPython&lt;/a&gt;, &lt;a href=&quot;http://www.numpy.org/&quot;&gt;NumPy&lt;/a&gt;, &lt;a href=&quot;http://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt;, &amp;hellip;) is with &lt;a href=&quot;http://docs.continuum.io/anaconda/&quot;&gt;Anaconda&lt;/a&gt;, a cross-platform (Linux, Mac OS X, Windows) Python distribution for data analytics and scientific computing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89006e04fb6ae06ee69fd7e1cbc4ebb84ff9c33" translate="yes" xml:space="preserve">
          <source>The size in inches of the figure to create. Uses the value in &lt;code&gt;matplotlib.rcParams&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f7fb3bd331e115151c971690f334a92a305fd6" translate="yes" xml:space="preserve">
          <source>The size of each point. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c9c83909e4848a4c6d5e202dfef089c8a143a6" translate="yes" xml:space="preserve">
          <source>The size of the figure to create in matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff105db7b62462e2a7db748acf24891a045782b" translate="yes" xml:space="preserve">
          <source>The sparse objects exist for memory efficiency reasons. Suppose you had a large, mostly NA &lt;code&gt;DataFrame&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21491ee1e399c47977d700d8c4fc58f6ab7cf717" translate="yes" xml:space="preserve">
          <source>The sparse representation of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ce02e970660791adeb2a1b77033fc6e43f7a8e" translate="yes" xml:space="preserve">
          <source>The specific value that should be omitted in the representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed464cacc736babb9a482e5c2b4bdbde5f5886b2" translate="yes" xml:space="preserve">
          <source>The standard uses reStructuredText (reST). reStructuredText is a markup language that allows encoding styles in plain text files. Documentation about reStructuredText can be found in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6171a4b413ddb813b8222a05f0e307ce39e3d30d" translate="yes" xml:space="preserve">
          <source>The string to add after each label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20eea1819d2cfaf5ede1b0c9dddb5e2987931f2d" translate="yes" xml:space="preserve">
          <source>The string to add before each label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a7787c19da5d9e4b440b588d51994c786871e2" translate="yes" xml:space="preserve">
          <source>The stub name(s). The wide format variables are assumed to start with the stub names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0480a8d28f11c46cb6415359fbce5045ea3ab1" translate="yes" xml:space="preserve">
          <source>The styling is accomplished using CSS. You write &amp;ldquo;style functions&amp;rdquo; that take scalars, &lt;code&gt;DataFrame&lt;/code&gt;s or &lt;code&gt;Series&lt;/code&gt;, and return &lt;em&gt;like-indexed&lt;/em&gt; DataFrames or Series with CSS &lt;code&gt;&quot;attribute: value&quot;&lt;/code&gt; pairs for the values. These functions can be incrementally passed to the &lt;code&gt;Styler&lt;/code&gt; which collects the styles before rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfa745d900c548f7039279ba3cb8ff238739a67" translate="yes" xml:space="preserve">
          <source>The subset of columns to write. Writes all columns by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f66cf675d25a00e7660e8f4a72e9879d1b16c49" translate="yes" xml:space="preserve">
          <source>The subset of the frame including the dtypes in &lt;code&gt;include&lt;/code&gt; and excluding the dtypes in &lt;code&gt;exclude&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafdc56f2bad794cd13f6d56f11b1618571b6a78" translate="yes" xml:space="preserve">
          <source>The tests can then be run directly inside your Git clone (without having to install &lt;em&gt;pandas&lt;/em&gt;) by typing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6514c43ab66f1cedea6c97f6a9816832c61bb4" translate="yes" xml:space="preserve">
          <source>The tests suite is exhaustive and takes around 20 minutes to run. Often it is worth running only a subset of tests first around your changes before running the entire suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f12ff793291a6139a55f35cafd81cc03023aee1" translate="yes" xml:space="preserve">
          <source>The time component of the date-time is converted to midnight i.e. 00:00:00. This is useful in cases, when the time does not matter. Length is unaltered. The timezones are unaffected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e10232a5d9217463d843a989410e61594a3162" translate="yes" xml:space="preserve">
          <source>The time period represented (e.g., &amp;lsquo;4Q2005&amp;rsquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aca2bb6fbf1021901f563fbb0adfed6ab2e42c3" translate="yes" xml:space="preserve">
          <source>The time unit to encode to, governs timestamp and ISO8601 precision. One of &amp;lsquo;s&amp;rsquo;, &amp;lsquo;ms&amp;rsquo;, &amp;lsquo;us&amp;rsquo;, &amp;lsquo;ns&amp;rsquo; for second, millisecond, microsecond, and nanosecond respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c96d9925eb2e486400896a41e7e9e0e6c3dc2d" translate="yes" xml:space="preserve">
          <source>The timedelta data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008f8045b2c87cc99a6d58ebc6aebfb93fd88c32" translate="yes" xml:space="preserve">
          <source>The timestamp unit to detect if converting dates. The default behaviour is to try and detect the correct precision, but if this is not desired then pass one of &amp;lsquo;s&amp;rsquo;, &amp;lsquo;ms&amp;rsquo;, &amp;lsquo;us&amp;rsquo; or &amp;lsquo;ns&amp;rsquo; to force parsing only seconds, milliseconds, microseconds or nanoseconds respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40192af83c21441509117fb84b2b969ad948f740" translate="yes" xml:space="preserve">
          <source>The timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f276c3d93dd614dc3db7bfa9287b5a4a3cd326" translate="yes" xml:space="preserve">
          <source>The title of the section will be defined in the same way as the &amp;ldquo;Parameters&amp;rdquo;. With the names &amp;ldquo;Returns&amp;rdquo; or &amp;ldquo;Yields&amp;rdquo; followed by a line with as many hyphens as the letters in the preceding word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f6cab82becc4967939d1cdc4d8722ad1f8bb50" translate="yes" xml:space="preserve">
          <source>The top-level function &lt;a href=&quot;../reference/api/pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;pandas.eval()&lt;/code&gt;&lt;/a&gt; implements expression evaluation of &lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9313258cf31294cf78f2d7a82a367b9d96411090" translate="yes" xml:space="preserve">
          <source>The transformed values should maintain the ordering between values within the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea1b44d768d7ebd55958215afdd1402a550788d" translate="yes" xml:space="preserve">
          <source>The transposed DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0927348f5c944712027e84fbf0c644bbc38a20ec" translate="yes" xml:space="preserve">
          <source>The truncated Series or DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f214cb7ca5640a92eef9de5b786b5636fb3c19f3" translate="yes" xml:space="preserve">
          <source>The tutorials make heavy use of the &lt;a href=&quot;http://matplotlib.org/sampledoc/ipython_directive.html&quot;&gt;ipython directive&lt;/a&gt; sphinx extension. This directive lets you put code in the documentation which will be run during the doc build. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6697bde0ca2f6191e57083935504137a053b9a" translate="yes" xml:space="preserve">
          <source>The two primary data structures of pandas, &lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; (1-dimensional) and &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; (2-dimensional), handle the vast majority of typical use cases in finance, statistics, social science, and many areas of engineering. For R users, &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; provides everything that R&amp;rsquo;s &lt;code&gt;data.frame&lt;/code&gt; provides and much more. pandas is built on top of &lt;a href=&quot;https://www.numpy.org&quot;&gt;NumPy&lt;/a&gt; and is intended to integrate well within a scientific computing environment with many other 3rd party libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4483ecf6dccbe41d8d496dd2dba08db239fb56cb" translate="yes" xml:space="preserve">
          <source>The type of object to recover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f751f50f1e8f430845fcaf196d804307d2dcd8" translate="yes" xml:space="preserve">
          <source>The type of storage for sparse locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0c4e99099b234804f97860719695612087ef15" translate="yes" xml:space="preserve">
          <source>The type of the key-value pairs can be customized with the parameters (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03145edb4e266b12a866409268ef31378abd1db6" translate="yes" xml:space="preserve">
          <source>The type returned depends on the value of &lt;code&gt;typ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79f3a757f52d5cea4cc7929ece04e1bd225bf11" translate="yes" xml:space="preserve">
          <source>The types for &amp;ldquo;Returns&amp;rdquo; and &amp;ldquo;Yields&amp;rdquo; are the same as the ones for the &amp;ldquo;Parameters&amp;rdquo;. Also, the description must finish with a dot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee3f92abb3e238573e261de20c106235e1e0f37" translate="yes" xml:space="preserve">
          <source>The unique categories for this categorical. If not given, the categories are assumed to be the unique values of &lt;code&gt;values&lt;/code&gt; (sorted, if possible, otherwise in the order in which they appear).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d5b21a76a03bb3da817e49568cf4247697ea7c" translate="yes" xml:space="preserve">
          <source>The unique labels for each level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516ddbe4ee77da3873adf520bce750390d2937e5" translate="yes" xml:space="preserve">
          <source>The unique valid values. When &lt;code&gt;values&lt;/code&gt; is Categorical, &lt;code&gt;uniques&lt;/code&gt; is a Categorical. When &lt;code&gt;values&lt;/code&gt; is some other pandas object, an &lt;code&gt;Index&lt;/code&gt; is returned. Otherwise, a 1-D ndarray is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba287563afabc6c7654180c7256a6438ab828132" translate="yes" xml:space="preserve">
          <source>The unique values returned as a NumPy array. See Notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16757d9761bab66aa59f454abb1d50d839900340" translate="yes" xml:space="preserve">
          <source>The user-defined &lt;code&gt;format_conversion&lt;/code&gt; function above can be called within a sequence of other style modifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c668b160a4f7fd0b0c56252f618ffdb9fba4a5f5" translate="yes" xml:space="preserve">
          <source>The utility script &lt;code&gt;scripts/validate_docstrings.py&lt;/code&gt; can be used to get a csv summary of the API documentation. And also validate common errors in the docstring of a specific class, function or method. The summary also compares the list of methods documented in &lt;code&gt;doc/source/api.rst&lt;/code&gt; (which is used to generate the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/api.html&quot;&gt;API Reference&lt;/a&gt; page) and the actual public methods. This will identify methods documented in &lt;code&gt;doc/source/api.rst&lt;/code&gt; that are not actually class methods, and existing methods that are not documented in &lt;code&gt;doc/source/api.rst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ffb665ad37c0a99bc893f4692cf6f388438a79" translate="yes" xml:space="preserve">
          <source>The value &amp;lsquo;last&amp;rsquo; for parameter &amp;lsquo;keep&amp;rsquo; keeps the last occurrence for each set of duplicated entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4783e916c879475221a6dd330847cb7047a8f09" translate="yes" xml:space="preserve">
          <source>The value &amp;lsquo;last&amp;rsquo; keeps the last occurrence for each set of duplicated entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa1c5b121c9318d42b117b1d9f27d18cfb737d2" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;False&lt;/code&gt; discards all sets of duplicated entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfdd62044c55b5c0bde5b6cdafae8d31138392bc" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;False&lt;/code&gt; for parameter &amp;lsquo;keep&amp;rsquo; discards all sets of duplicated entries. Setting the value of &amp;lsquo;inplace&amp;rsquo; to &lt;code&gt;True&lt;/code&gt; performs the operation inplace and returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91316e4cabdee709646e506bcc62a06d21b71b5" translate="yes" xml:space="preserve">
          <source>The value in &lt;code&gt;values&lt;/code&gt; to consider missing. This will be treated as NA in the factorization routines, so it will be coded as &lt;code&gt;na_sentinal&lt;/code&gt; and not included in &lt;code&gt;uniques&lt;/code&gt;. By default, &lt;code&gt;np.nan&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082c1a19087cf5c8c94a26d4f654224c6ea31d68" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;start&lt;/code&gt; parameter (&lt;code&gt;0&lt;/code&gt; if this was not supplied)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca210000aadee57e0cd1a5a787d605c678627e4" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;step&lt;/code&gt; parameter (&lt;code&gt;1&lt;/code&gt; if this was not supplied)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675ea6e7709763e0978f0b4c9ee60c1c151e6625" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;stop&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273a96f5b91494b14bcdc3ab415562c8e1811f92" translate="yes" xml:space="preserve">
          <source>The value or values in a set of duplicates to mark as missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8036a7dd8b89ee59719d91c7a95ab47dccc119" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;code&gt;subset&lt;/code&gt; behaves similar to slicing a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1cec649c0500439dfbd7da81e021781c85c3d6" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2388952019119001154f5073cb74304c73d791" translate="yes" xml:space="preserve">
          <source>The value that serves as a placeholder for NULL values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c98005d15357096e93c7269c6ecd647b8a2f1c" translate="yes" xml:space="preserve">
          <source>The value to assume when an index is missing from one Series or the other. The default specifies to use the appropriate NaN value for the underlying dtype of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38ddad2d4a4fa0877c749c7f336e97b4951b359" translate="yes" xml:space="preserve">
          <source>The value to check whether it is contained in the Intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c732ffeccd3e9064b80fedd884c706842eef979" translate="yes" xml:space="preserve">
          <source>The value to fill NaNs with prior to passing any column to the merge func.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b22b563a657f00dc600a72cc3c6301ec831bdb" translate="yes" xml:space="preserve">
          <source>The value(s) to be combined with the &lt;code&gt;Series&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8bb6b48a81fc8c24477536c8076653aa0b8de8" translate="yes" xml:space="preserve">
          <source>The values &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;NaT&lt;/code&gt;, and optionally &lt;code&gt;numpy.inf&lt;/code&gt; (depending on &lt;code&gt;pandas.options.mode.use_inf_as_na&lt;/code&gt;) are considered NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfe044fe8a7353ae44591174229f93b595a9229" translate="yes" xml:space="preserve">
          <source>The values are physically stored as a 1-D ndarray of integers. These are called &amp;ldquo;ordinals&amp;rdquo; and represent some kind of offset from a base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a1d83c4d98819c93429c70e53814cbb56c2445" translate="yes" xml:space="preserve">
          <source>The values for the new index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a751025f587cb83a5859c11bc9eb06adf29de990" translate="yes" xml:space="preserve">
          <source>The values in the series converted to a &lt;code&gt;numpy.ndarary&lt;/code&gt; with the specified &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657bd4d9ae8e395ab5fab2517b5f25b9e924f6ae" translate="yes" xml:space="preserve">
          <source>The values of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bd988d8d8c28417a2a4dcb63cc638a69452728" translate="yes" xml:space="preserve">
          <source>The values of the categorical. If &lt;code&gt;categories&lt;/code&gt; are given, values not in &lt;code&gt;categories&lt;/code&gt; will be replaced with NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d6aab699700d286d1bd641a2d94003b833630b" translate="yes" xml:space="preserve">
          <source>The values of the categorical. If categories are given, values not in categories will be replaced with NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca8f39f1756e5478294ae57b376365d6ab92671" translate="yes" xml:space="preserve">
          <source>The values returned by this method are also used in &lt;a href=&quot;pandas.util.hash_pandas_object#pandas.util.hash_pandas_object&quot;&gt;&lt;code&gt;pandas.util.hash_pandas_object()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538882f2dae2d1b315b7d468413ec9e83b912deb" translate="yes" xml:space="preserve">
          <source>The values to be plotted. Either the location or the label of the columns to be used. By default, it will use the remaining DataFrame numeric columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05ee150cfb9c7545a4078b6f06d3c4a5a3481e4" translate="yes" xml:space="preserve">
          <source>The views share the same underlying values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fd4d6810e5af8a60892e6e28d843eef4ac0a8c" translate="yes" xml:space="preserve">
          <source>The warning can be avoided by adding &lt;code&gt;engine=&amp;rsquo;python&amp;rsquo;&lt;/code&gt; as a parameter in &lt;code&gt;pd.read_csv&lt;/code&gt; and &lt;code&gt;pd.read_table&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b734efe785a84887a8bf2dead9db1ae8624267b" translate="yes" xml:space="preserve">
          <source>The way to present examples is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303fe67581ba287d82bd9df663498cc9915672d7" translate="yes" xml:space="preserve">
          <source>The week ordinal of the year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2bfce7c1d756677b1c22b6223b9eca74118105" translate="yes" xml:space="preserve">
          <source>The week ordinal of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f8ec6c1b239864ebd4a14533ca7acc4b8ec2d0" translate="yes" xml:space="preserve">
          <source>The where method is an application of the if-then idiom. For each element in the calling DataFrame, if &lt;code&gt;cond&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; the element is used; otherwise the corresponding element from the DataFrame &lt;code&gt;other&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb497ee397b034145981944802072ba5c6ec7a1" translate="yes" xml:space="preserve">
          <source>The wide-format DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828a37f745e274a94e922c45d297d2f30237b424" translate="yes" xml:space="preserve">
          <source>The workhorse function for reading text files (a.k.a. flat files) is &lt;a href=&quot;../reference/api/pandas.read_csv#pandas.read_csv&quot;&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;cookbook#cookbook-csv&quot;&gt;cookbook&lt;/a&gt; for some advanced strategies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031078724d277958b364494e4ebc13bb46ac0dbf" translate="yes" xml:space="preserve">
          <source>The year may either: - end on the last X day of the Y month. - end on the last X day closest to the last day of the Y month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d52f0e9ac072d8b6d237d59b7699e96a60edf7" translate="yes" xml:space="preserve">
          <source>The year of the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa9865ec03ed677708dbbf78d6c8d0a954c69a7" translate="yes" xml:space="preserve">
          <source>The year of the period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae352b4b0774bf484badc28da965d2cbabad72c" translate="yes" xml:space="preserve">
          <source>Then modify the file to ensure that any indentation width parameters are at least four. Once configured, you can run the tool as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeae1384b2f94311d0148155d4105806167ce513" translate="yes" xml:space="preserve">
          <source>Then you can do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ca81fab19a798d8365820a52c9af42f39fbf73" translate="yes" xml:space="preserve">
          <source>Then you can find the HTML output in the folder &lt;code&gt;doc/build/html/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0742f13ef772bb4d4475e2ccb17f15f08843c6f1" translate="yes" xml:space="preserve">
          <source>There are 3 constructor properties to be defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785caed00ed8e63af9b33d9f9f7b66f20f09dbf9" translate="yes" xml:space="preserve">
          <source>There are essentially three calling conventions for the constructor. The primary form accepts four parameters. They can be passed by position or keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c574453dc604bff13ca2bb408bbcc26a6770608a" translate="yes" xml:space="preserve">
          <source>There are functions that make the creation of a regular index easy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95434a6520f7d506cea6f3c335bbf3cf86fe8db" translate="yes" xml:space="preserve">
          <source>There are many instances where such an error can be raised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aff5ca4d9c081f86be824ca4f3781825014bca" translate="yes" xml:space="preserve">
          <source>There are several different but overlapping sets of numeric characters that can be checked for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e8aeb0491c1efe1b7f37ad6ed7fde8dc589b6d" translate="yes" xml:space="preserve">
          <source>There are some easier alternatives before considering subclassing &lt;code&gt;pandas&lt;/code&gt; data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290cab346508a7f862a676451dfc29426ec813da" translate="yes" xml:space="preserve">
          <source>There are some methods in pandas returning plots. To render the plots generated by the examples in the documentation, the &lt;code&gt;.. plot::&lt;/code&gt; directive exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8543214c45e5a10b45bf735f9d6b580c52c0ef4d" translate="yes" xml:space="preserve">
          <source>There are two components to a PeriodArray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056d870a9c1b7c3f76dfc0e9b3a6280767ff9dfe" translate="yes" xml:space="preserve">
          <source>There is a tool in pandas to help contributors verify their changes before contributing them to the project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce4567ae9b0d78f15ec488b4864341b4cf64bc5" translate="yes" xml:space="preserve">
          <source>There is not setter, use the other categorical methods and the normal item setter to change values in the categorical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555ad54203baf89b44bad176441beceee8a413b3" translate="yes" xml:space="preserve">
          <source>There is only one axis to drop values from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a81aa3a7361c854caa86c4ab347fd6d28612c1" translate="yes" xml:space="preserve">
          <source>There is still hope for improvement. Here&amp;rsquo;s an example of using some more advanced Cython techniques:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23070a717ac66a5b7aa94edc1e1314056a7e6e25" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also &lt;code&gt;.highlight_min&lt;/code&gt; and &lt;code&gt;.highlight_max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ffd0fe953f3d6d866e4777a0a6b1a642ccc510" translate="yes" xml:space="preserve">
          <source>These are each a scalar type, which is a Python scalar (for str, int, float) or a pandas scalar (for Timestamp/Timedelta/Interval/Period)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33a648a93aed042f3d0bcfc9fab52aa0a265119" translate="yes" xml:space="preserve">
          <source>These are placed in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag before the generated HTML table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac1b0bc68248b72f4980c1bd88fdc45dc8fefa6" translate="yes" xml:space="preserve">
          <source>These are primarily intended for library authors looking to extend pandas objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f755c151c45b04dfbfdf817c9cb0dfe2c3dfa91" translate="yes" xml:space="preserve">
          <source>These are some neat pandas &lt;code&gt;idioms&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cecf62e082001231e2b801b3e4a06d8333e0429" translate="yes" xml:space="preserve">
          <source>These are the items that show up in the opening &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag in addition to to automatic (by default) id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66eba5aaff5afc0267e2d6dbd80c69a1b836960a" translate="yes" xml:space="preserve">
          <source>These examples all show factorize as a top-level method like &lt;code&gt;pd.factorize(values)&lt;/code&gt;. The results are identical for methods like &lt;a href=&quot;#pandas.Series.factorize&quot;&gt;&lt;code&gt;Series.factorize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc113faeeaabe0934fe79a9f5063bb0726c4b38e" translate="yes" xml:space="preserve">
          <source>These examples all show factorize as a top-level method like &lt;code&gt;pd.factorize(values)&lt;/code&gt;. The results are identical for methods like &lt;a href=&quot;pandas.series.factorize#pandas.Series.factorize&quot;&gt;&lt;code&gt;Series.factorize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23aa5a6987da34b0e0f37052f29312ce3beaf41" translate="yes" xml:space="preserve">
          <source>These examples are written for Python 3. Minor tweaks might be necessary for earlier python versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fccfe905597818e9b3a8dd216568247c9eb3a4" translate="yes" xml:space="preserve">
          <source>These only act when &lt;code&gt;axis=1&lt;/code&gt; (columns):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ac1425acbec711e87ef450ba202235fce5763b" translate="yes" xml:space="preserve">
          <source>These operations are supported by &lt;a href=&quot;../reference/api/pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;pandas.eval()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3c218381d3c02c7a884419188313ebfc73c5e2" translate="yes" xml:space="preserve">
          <source>These parameters will be passed to DataFrame.to_csv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbab4d6c746a29d1c09ce01a835a12e803a0ddbd" translate="yes" xml:space="preserve">
          <source>These parameters will be passed to numpy.all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fd8a1b624db1d374f9c53804aa1a8e6b8ceb3b" translate="yes" xml:space="preserve">
          <source>These parameters will be passed to numpy.any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a3e04b6549876d8b36c2ce90872576b2aca74c" translate="yes" xml:space="preserve">
          <source>These will split the DataFrame on its index (rows). We could also split by the columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627428df0d28db98bd106cfdec011127bab05500" translate="yes" xml:space="preserve">
          <source>They are presented as a session in the Python terminal. &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; is used to present code. &lt;code&gt;&amp;hellip;&lt;/code&gt; is used for code continuing from the previous line. Output is presented immediately after the last line of code generating the output (no blank lines in between). Comments describing the examples can be added with blank lines before and after them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af05d3af44d17c526b8198923cce6acd2ebafba" translate="yes" xml:space="preserve">
          <source>They may be backed by none, one, or many NumPy arrays. For example, &lt;code&gt;pandas.Categorical&lt;/code&gt; is an extension array backed by two arrays, one for codes and one for categories. An array of IPv6 address may be backed by a NumPy structured array with two fields, one for the lower 64 bits and one for the upper 64 bits. Or they may be backed by some other storage type, like Python lists. Pandas makes no assumptions on how the data are stored, just that it can be converted to a NumPy array. The ExtensionArray interface does not impose any rules on how this data is stored. However, currently, the backing data cannot be stored in attributes called &lt;code&gt;.values&lt;/code&gt; or &lt;code&gt;._values&lt;/code&gt; to ensure full compatibility with pandas internals. But other names as &lt;code&gt;.data&lt;/code&gt;, &lt;code&gt;._data&lt;/code&gt;, &lt;code&gt;._items&lt;/code&gt;, &amp;hellip; can be freely used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21dd92b75b7b24d19fbf8d81f51694113fc3089a" translate="yes" xml:space="preserve">
          <source>They may be backed by none, one, or many NumPy arrays. For example, &lt;code&gt;pandas.Categorical&lt;/code&gt; is an extension array backed by two arrays, one for codes and one for categories. An array of IPv6 addresses may be backed by a NumPy structured array with two fields, one for the lower 64 bits and one for the upper 64 bits. Or they may be backed by some other storage type, like Python lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786917075a48c15977c206c149dcd2c59b50eca9" translate="yes" xml:space="preserve">
          <source>Third Party</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a97679e77509ef07d0c427ac155a7f685ebbd6b" translate="yes" xml:space="preserve">
          <source>Third moment of a probability density.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0b45bda94d064baa13110ed1b4650ba3e2d71f" translate="yes" xml:space="preserve">
          <source>Third-party libraries may implement arrays or types satisfying this interface as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c107e420aa2b6b9f6717df43880dd261cb088b7e" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://wavedatalab.github.io/datawithpython&quot;&gt;guide&lt;/a&gt; is an introduction to the data analysis process using the Python data ecosystem and an interesting open dataset. There are four sections covering selected topics as &lt;a href=&quot;http://wavedatalab.github.io/datawithpython/munge.html&quot;&gt;munging data&lt;/a&gt;, &lt;a href=&quot;http://wavedatalab.github.io/datawithpython/aggregate.html&quot;&gt;aggregating data&lt;/a&gt;, &lt;a href=&quot;http://wavedatalab.github.io/datawithpython/visualize.html&quot;&gt;visualizing data&lt;/a&gt; and &lt;a href=&quot;http://wavedatalab.github.io/datawithpython/timeseries.html&quot;&gt;time series&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae71e0767356c8aa111e381cd6eb9140b03e1a7" translate="yes" xml:space="preserve">
          <source>This Python syntax is &lt;strong&gt;not&lt;/strong&gt; allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e0a4df3ebe24c715a7316827d3fe03572562c9" translate="yes" xml:space="preserve">
          <source>This array can be stored in a &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; like any NumPy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d35539932f070039e75fbf30d9dea602703ae9" translate="yes" xml:space="preserve">
          <source>This attribute returns the day of the year on which the particular date occurs. The return value ranges between 1 to 365 for regular years and 1 to 366 for leap years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a26d702b0b41c0e042fc5a6dc19dfef551357a7" translate="yes" xml:space="preserve">
          <source>This can be a convenient way to extend pandas objects without subclassing them. If you write a custom accessor, make a pull request adding it to our &lt;a href=&quot;../ecosystem#ecosystem&quot;&gt;Pandas ecosystem&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645ca12ebe563c1ea049354b367146f11942b89e" translate="yes" xml:space="preserve">
          <source>This can be controlled with the &lt;code&gt;min_count&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a972cf91562ead5a73bdc642f640002075b478ac" translate="yes" xml:space="preserve">
          <source>This can be controlled with the &lt;code&gt;min_count&lt;/code&gt; parameter. For example, if you&amp;rsquo;d like the sum of an empty series to be NaN, pass &lt;code&gt;min_count=1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a5ab109236a96c14157ab47027e467e88b1f93" translate="yes" xml:space="preserve">
          <source>This can be done during construction by specifying &lt;code&gt;dtype=&quot;category&quot;&lt;/code&gt; in the &lt;code&gt;DataFrame&lt;/code&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcfe7fa582e3c98e7daadbd6b0a00e6df26ca09" translate="yes" xml:space="preserve">
          <source>This can significantly reduce the time it takes to locally run tests before submitting a pull request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da14810815b086a8cebb17d38c2f95117553c0a" translate="yes" xml:space="preserve">
          <source>This changes your working directory to the shiny-new-feature branch. Keep any changes in this branch specific to one bug or feature so it is clear what the branch brings to &lt;em&gt;pandas&lt;/em&gt;. You can have many shiny-new-features and switch in between them using the git checkout command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b9aff8eefc546b605be03493ee8149a2bf075d" translate="yes" xml:space="preserve">
          <source>This checks whether an object implements the pandas extension array interface. In pandas, this includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40033ce141993f2680ee35676e37500971071cd" translate="yes" xml:space="preserve">
          <source>This class does not inherit from &amp;lsquo;abc.ABCMeta&amp;rsquo; for performance reasons. Methods and properties required by the interface raise &lt;code&gt;pandas.errors.AbstractMethodError&lt;/code&gt; and no &lt;code&gt;register&lt;/code&gt; method is provided for registering virtual subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8602ada00477138f8cd047562fadd3af3664b6" translate="yes" xml:space="preserve">
          <source>This class is useful for specifying the type of a &lt;code&gt;Categorical&lt;/code&gt; independent of the values. See &lt;a href=&quot;../../user_guide/categorical#categorical-categoricaldtype&quot;&gt;CategoricalDtype&lt;/a&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfe66f05011d9a46d53a21eabf378b87fe94c30" translate="yes" xml:space="preserve">
          <source>This class provides all the array-like functionality. ExtensionArrays are limited to 1 dimension. An ExtensionArray is linked to an ExtensionDtype via the &lt;code&gt;dtype&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4234764bf8145806a95a29ef25e69ef423a2065c" translate="yes" xml:space="preserve">
          <source>This command will catch any stylistic errors in your changes specifically, but be beware it may not catch all of them. For example, if you delete the only usage of an imported function, it is stylistically incorrect to import an unused function. However, style-checking the diff will not catch this because the actual import is not part of the diff. Thus, for completeness, you should run this command, though it will take longer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be2d7d89a7ebfbd53122e55efc8f0ff96c5a6e4" translate="yes" xml:space="preserve">
          <source>This constructor is useful if you already have codes and categories/dtype and so do not need the (computation intensive) factorization step, which is usually done on the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dec02d8d5cabd0f06d7d51530ba08066b6cdf37" translate="yes" xml:space="preserve">
          <source>This converts a datetime-like string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5791191ae8c804e4b683c9221ba32aa9936950c1" translate="yes" xml:space="preserve">
          <source>This converts a float representing a Unix epoch in units of seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90070cf7ec3cc1d2b37c7353dbfadf6e4a1395b2" translate="yes" xml:space="preserve">
          <source>This converts an int representing a Unix-epoch in units of seconds and for a particular timezone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa27786e269ae3c59089b36a164b220839ab79c0" translate="yes" xml:space="preserve">
          <source>This creates the directory &lt;code&gt;pandas-yourname&lt;/code&gt; and connects your repository to the upstream (main project) &lt;em&gt;pandas&lt;/em&gt; repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f0084681a1bdee0076d18ddc3792283f2e069f" translate="yes" xml:space="preserve">
          <source>This dispatches to get_indexer or get_indexer_nonunique as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c2aa1066f2ba47aa41385593090b00a919a0c0" translate="yes" xml:space="preserve">
          <source>This document is written as a Jupyter Notebook, and can be viewed or downloaded &lt;a href=&quot;http://nbviewer.ipython.org/github/pandas-dev/pandas/blob/master/doc/source/style.ipynb&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b38c2cd02916e0a31b74857add0b7e99752703c" translate="yes" xml:space="preserve">
          <source>This dtype implements the pandas ExtensionDtype interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c9280747c310a812ebae48bfb53dbe169f04b3" translate="yes" xml:space="preserve">
          <source>This enables operations like &lt;code&gt;.astype(name)&lt;/code&gt; for the name of the ExtensionDtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51de29eb6a67003411932538aff39519be3777da" translate="yes" xml:space="preserve">
          <source>This example creates and reads a large CSV file with a column that contains &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a04a497f04bf69c38dae0187a5a16e45012fdd" translate="yes" xml:space="preserve">
          <source>This example draws a histogram based on the length and width of some animals, displayed in three bins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be5624659b7fd664faf7ccc7e55c65fea85943a" translate="yes" xml:space="preserve">
          <source>This example shows comparing two DataFrames that are equal but with columns of differing dtypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7f39e73cb18602c6357dd83256bd88582d42e4" translate="yes" xml:space="preserve">
          <source>This feature requires version 0.10.0 or later of the &lt;code&gt;pandas-gbq&lt;/code&gt; package. It also requires the &lt;code&gt;google-cloud-bigquery-storage&lt;/code&gt; and &lt;code&gt;fastavro&lt;/code&gt; packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8d0aafac77f75100febe73e08f0d935abb4320" translate="yes" xml:space="preserve">
          <source>This first example aggregates values by taking the sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7278f934da03c436ff662730b85ac667cb937f" translate="yes" xml:space="preserve">
          <source>This function allows two Series or DataFrames to be compared against each other to see if they have the same shape and elements. NaNs in the same location are considered equal. The column headers do not need to have the same type, but the elements within the columns must be the same dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e16146ea218d5ef5aebf96bd656944c4e5ec89" translate="yes" xml:space="preserve">
          <source>This function assumes that the data is sorted, so use at your own peril</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a4649793ebcfe190e1dde69e7856803c8018f8" translate="yes" xml:space="preserve">
          <source>This function cannot be used with all column types. For example, when specifying columns with &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;category&lt;/code&gt; dtypes, &lt;code&gt;TypeError&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af383e74cb46472608263bbad0c530811202d786" translate="yes" xml:space="preserve">
          <source>This function in the pandas-gbq library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dbf7b53a9fe3cf52ba2c402639f407f83c9079" translate="yes" xml:space="preserve">
          <source>This function is a convenience wrapper around &lt;code&gt;read_sql_table&lt;/code&gt; and &lt;code&gt;read_sql_query&lt;/code&gt; (for backward compatibility). It will delegate to the specific function depending on the provided input. A SQL query will be routed to &lt;code&gt;read_sql_query&lt;/code&gt;, while a database table name will be routed to &lt;code&gt;read_sql_table&lt;/code&gt;. Note that the delegated function might have more specific notes about their functionality not listed here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7673e5ba7fb0a93e29f921c282d4a163204527a7" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;(left &amp;lt;= ser) &amp;amp; (ser &amp;lt;= right)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4985ecb24b8b0c8be19147f627b7776d2460cd" translate="yes" xml:space="preserve">
          <source>This function is intended to compare two DataFrames and output any differences. Is is mostly intended for use in unit tests. Additional parameters allow varying the strictness of the equality checks performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a85b044c5fe432ec1bdedd6e7da75edb7a1dbe" translate="yes" xml:space="preserve">
          <source>This function is internal and should not be exposed in the public API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ece71ffa3c13fa661cb9fdbf3c2fca3e9ecaf0a" translate="yes" xml:space="preserve">
          <source>This function is used to count the number of times a particular regex pattern is repeated in each of the string elements of the &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6928a7b14b0af5c2ccafa7ce1e25e9ec4c9c396e" translate="yes" xml:space="preserve">
          <source>This function is useful to massage a DataFrame into a format where one or more columns are identifier variables (&lt;code&gt;id_vars&lt;/code&gt;), while all other columns, considered measured variables (&lt;code&gt;value_vars&lt;/code&gt;), are &amp;ldquo;unpivoted&amp;rdquo; to the row axis, leaving just two non-identifier columns, &amp;lsquo;variable&amp;rsquo; and &amp;lsquo;value&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80efe6b8a4481fb52eda1b582c9e6e79c6386922" translate="yes" xml:space="preserve">
          <source>This function is useful to massage a DataFrame into a format where one or more columns are identifier variables (&lt;code&gt;id_vars&lt;/code&gt;), while all other columns, considered measured variables (&lt;code&gt;value_vars&lt;/code&gt;), are &amp;ldquo;unpivoted&amp;rdquo; to the row axis, leaving just two non-identifier columns, &amp;lsquo;variable&amp;rsquo; and &amp;lsquo;value&amp;rsquo;. .. versionadded:: 0.20.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8021234795f5745240d46e7b1e687b3a7c3fd79f" translate="yes" xml:space="preserve">
          <source>This function is useful to plot lines using DataFrame&amp;rsquo;s values as coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065f774b74be2e4515773ed0450f2dbe902a3063" translate="yes" xml:space="preserve">
          <source>This function modifies the global &lt;code&gt;matplotlib.units.registry&lt;/code&gt; dictionary. Pandas adds custom converters for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b162930b7759c083c844cea5c62308d93d40782a" translate="yes" xml:space="preserve">
          <source>This function only applies to elements that are all numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae286ac01b6cf840f715daa6c31dcaa4001c11c" translate="yes" xml:space="preserve">
          <source>This function requires either the &lt;a href=&quot;https://pypi.org/project/fastparquet&quot;&gt;fastparquet&lt;/a&gt; or &lt;a href=&quot;https://arrow.apache.org/docs/python/&quot;&gt;pyarrow&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2014ceb32fb8f839a848ccd5d6c62591535ad519" translate="yes" xml:space="preserve">
          <source>This function requires that the elements have the same dtype as their respective elements in the other Series or DataFrame. However, the column labels do not need to have the same type, as long as they are still considered equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea4ae09a1d337a8d87959674d6bcc89b838db4d" translate="yes" xml:space="preserve">
          <source>This function requires the &lt;a href=&quot;https://pandas-gbq.readthedocs.io&quot;&gt;pandas-gbq package&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a460788da3f64bc3d4ae274a55422721de1b4b5f" translate="yes" xml:space="preserve">
          <source>This function returns a boolean vector containing &lt;code&gt;True&lt;/code&gt; wherever the corresponding Series element is between the boundary values &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;. NA values are treated as &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19842d018e5a10c3366681ceb006429f96166aaa" translate="yes" xml:space="preserve">
          <source>This function returns last &lt;code&gt;n&lt;/code&gt; rows from the object based on position. It is useful for quickly verifying data, for example, after sorting or appending rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567d064855ce8e1942b326b78ecb52d17ab38f79" translate="yes" xml:space="preserve">
          <source>This function returns the first &lt;code&gt;n&lt;/code&gt; rows for the object based on position. It is useful for quickly testing if your object has the right type of data in it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea727e2e4108ec7429d4570dbe75b91ec665241d" translate="yes" xml:space="preserve">
          <source>This function searches for &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements and only for &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; rows and &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; elements within each &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element in the table. &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; stands for &amp;ldquo;table data&amp;rdquo;. This function attempts to properly handle &lt;code&gt;colspan&lt;/code&gt; and &lt;code&gt;rowspan&lt;/code&gt; attributes. If the function has a &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; argument, it is used to construct the header, otherwise the function attempts to find the header within the body (by putting rows with only &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; elements into the header).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3310acadad3ef64a1eec5c74e0f0ae2c6e3dcc16" translate="yes" xml:space="preserve">
          <source>This function takes a scalar or array-like object and indicates whether values are missing (&lt;code&gt;NaN&lt;/code&gt; in numeric arrays, &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt; in object arrays, &lt;code&gt;NaT&lt;/code&gt; in datetimelike).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5e26033cc8c8b5e7fd8e0fe0dd4ee3dcf1e180" translate="yes" xml:space="preserve">
          <source>This function takes a scalar or array-like object and indicates whether values are valid (not missing, which is &lt;code&gt;NaN&lt;/code&gt; in numeric arrays, &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt; in object arrays, &lt;code&gt;NaT&lt;/code&gt; in datetimelike).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792d3bc17ce890ab82b9df956d40e75101f10e0c" translate="yes" xml:space="preserve">
          <source>This function uses Fisher&amp;rsquo;s definition of kurtosis without bias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884b20733c5dd03663efb5465364f27032bf32ff" translate="yes" xml:space="preserve">
          <source>This function uses Pearson&amp;rsquo;s definition of correlation (&lt;a href=&quot;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&quot;&gt;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67f7355a975885363a2f6529c113c950367ec87" translate="yes" xml:space="preserve">
          <source>This function will &lt;em&gt;always&lt;/em&gt; return a list of &lt;a href=&quot;pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt;&lt;em&gt;or&lt;/em&gt; it will fail, e.g., it will &lt;em&gt;not&lt;/em&gt; return an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ff3eeb1fb53180d3967759365553afe2e51955" translate="yes" xml:space="preserve">
          <source>This function will return a new Series with a view of the same underlying values in memory, optionally reinterpreted with a new data type. The new data type must preserve the same size in bytes as to not cause index misalignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2dbf95a3b69a10565b6348d980cf5a80373c01" translate="yes" xml:space="preserve">
          <source>This function writes the dataframe as a &lt;a href=&quot;https://parquet.apache.org/&quot;&gt;parquet file&lt;/a&gt;. You can choose different parquet backends, and have the option of compression. See &lt;a href=&quot;../../user_guide/io#io-parquet&quot;&gt;the user guide&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1ca960684b62283823a6eabe056e0cb3d96221" translate="yes" xml:space="preserve">
          <source>This generator will yield the group path, subgroups and pandas object names for each group. Any non-pandas PyTables objects that are not a group will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1933101f0b9a47b8fc8daa8b908ca084ab7bbdcb" translate="yes" xml:space="preserve">
          <source>This has no effect when &lt;code&gt;join='inner'&lt;/code&gt;, which already preserves the order of the non-concatenation axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090dad24206e677cf8b595f373c722e7ad11cf36" translate="yes" xml:space="preserve">
          <source>This includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d185514e8b216a493b1dec42c64cbe9c9fefeca" translate="yes" xml:space="preserve">
          <source>This index can back any axis of a pandas object, and the number of &lt;strong&gt;levels&lt;/strong&gt; of the index is up to you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae55e6ad4406085b8575be8d5a34fc88ee715058" translate="yes" xml:space="preserve">
          <source>This is a dictionary of attributes that you can pass to use to identify the table in the HTML. These are not checked for validity before being passed to lxml or Beautiful Soup. However, these attributes must be valid HTML table attributes to work correctly. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5055799cfa4983bb6116c1f662628d8631dc4ce8" translate="yes" xml:space="preserve">
          <source>This is a generic error raised for errors encountered when functions like &lt;code&gt;read_csv&lt;/code&gt; or &lt;code&gt;read_html&lt;/code&gt; are parsing contents of a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6442e1efb11702bd4f790de9b75e51a1dc67c4a4" translate="yes" xml:space="preserve">
          <source>This is a guide to many pandas tutorials, geared mainly for new users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b10f2c143173bd7a9576d1eb250b77ca9a74d96" translate="yes" xml:space="preserve">
          <source>This is a method on all index types. For example you can do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8faa86ddbeed73dfb54a3fba438e0e17ecd8b635" translate="yes" xml:space="preserve">
          <source>This is a repository for &lt;em&gt;short and sweet&lt;/em&gt; examples and links for useful pandas recipes. We encourage users to add to this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee24bd745f1960d739a58607f750d23547406d93" translate="yes" xml:space="preserve">
          <source>This is a short introduction to pandas, geared mainly for new users. You can see more complex recipes in the &lt;a href=&quot;../user_guide/cookbook#cookbook&quot;&gt;Cookbook&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48023001e16fc55848768bdc0b462b5608d6c895" translate="yes" xml:space="preserve">
          <source>This is a useful shorthand for boolean indexing based on index values above or below certain thresholds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3009ad497ec1e86ee8ff3b8cd848c4ff6c508cd6" translate="yes" xml:space="preserve">
          <source>This is a very specific dtype, so generic ones like &lt;code&gt;np.timedelta64&lt;/code&gt; will return False if passed into this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827d0f341dba0b989814698598251dea24c4da18" translate="yes" xml:space="preserve">
          <source>This is also a valid argument to &lt;a href=&quot;../reference/api/pandas.dataframe.append#pandas.DataFrame.append&quot;&gt;&lt;code&gt;DataFrame.append()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714141153177f677aef2d74122e479138e481ee4" translate="yes" xml:space="preserve">
          <source>This is also available on Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cccb50bc886f959fdaae7ad8b6eea9eaf0e4785" translate="yes" xml:space="preserve">
          <source>This is an alias method for &lt;code&gt;Timedelta.to_timedelta64()&lt;/code&gt;. The dtype and copy parameters are available here only for compatibility. Their values will not affect the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7f6dda587b53cf9c11789902b18903805aec65" translate="yes" xml:space="preserve">
          <source>This is an alias method for &lt;code&gt;Timestamp.to_datetime64()&lt;/code&gt;. The dtype and copy parameters are available here only for compatibility. Their values will not affect the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12734d223c300e75ac5d9b41a5e9b72362216fd7" translate="yes" xml:space="preserve">
          <source>This is an inexhaustive list of projects that build on pandas in order to provide tools in the PyData space. For a list of projects that depend on pandas, see the &lt;a href=&quot;https://libraries.io/pypi/pandas/usage&quot;&gt;libraries.io usage page for pandas&lt;/a&gt; or &lt;a href=&quot;https://pypi.org/search/?q=pandas&quot;&gt;search pypi for pandas&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618c16119ed84f4326d7709b364b3d1b9e5aeac9" translate="yes" xml:space="preserve">
          <source>This is an introduction to pandas categorical data type, including a short comparison with R&amp;rsquo;s &lt;code&gt;factor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac4c32f82cfeca1d1a8fc00ef44a23d52e68438" translate="yes" xml:space="preserve">
          <source>This is an optional section used for notes about the implementation of the algorithm. Or to document technical aspects of the function behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003521402d289b31909e91dfea6f89509b21cf2c" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isalnum&quot;&gt;&lt;code&gt;str.isalnum()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3b54835b414fc0b737ad39a4f62ab81b3db82a" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isalpha&quot;&gt;&lt;code&gt;str.isalpha()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15479962930884e2caf3626e94a0a717149eab0d" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isdecimal&quot;&gt;&lt;code&gt;str.isdecimal()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec1e0c5d47e7b1d58c26f073004d9c39a5b3fd1" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isdigit&quot;&gt;&lt;code&gt;str.isdigit()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df98a28e73f7034b45301a223792dd56ed9c3db5" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.islower&quot;&gt;&lt;code&gt;str.islower()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8de9dae4b5c2ddc9819f8f277f59216da34e8b" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isnumeric&quot;&gt;&lt;code&gt;str.isnumeric()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772090581a8ac1c5180e6f59ff45eb3add248b74" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isspace&quot;&gt;&lt;code&gt;str.isspace()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615ce6e53f5e532da93e143761d9a55bd417d8d3" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.istitle&quot;&gt;&lt;code&gt;str.istitle()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbc456ca1f33fb25c015622c2dafab06c42cf75" translate="yes" xml:space="preserve">
          <source>This is equivalent to running the Python string method &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.isupper&quot;&gt;&lt;code&gt;str.isupper()&lt;/code&gt;&lt;/a&gt; for each element of the Series/Index. If a string has zero characters, &lt;code&gt;False&lt;/code&gt; is returned for that check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e61b270d1e86cb22052e58e93be989c0f08d82" translate="yes" xml:space="preserve">
          <source>This is equivalent to the method &lt;code&gt;numpy.sum&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0142fbd9c141b5e63e11bc2d11a6607a82d57a3a" translate="yes" xml:space="preserve">
          <source>This is fairly esoteric, but it is actually necessary for implementing things like GroupBy where the order of a categorical variable is meaningful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ce3eaad5694ff453054f12e711f8bbe2f64164" translate="yes" xml:space="preserve">
          <source>This is for compatibility with NumPy arrays, and may be removed in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df912878d15b268e850349990c87f3aae164c28c" translate="yes" xml:space="preserve">
          <source>This is implemented for compatibility with subclass implementations when chaining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c17d364b4309e769c1b1bb35c2650dc7cab5f6f" translate="yes" xml:space="preserve">
          <source>This is index for Series, columns for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000149c5e5d82237193390604b2bce81726eb3c1" translate="yes" xml:space="preserve">
          <source>This is mostly for internal compatibility, and is not especially useful on its own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e58dee98fb1abd07fbfbb96e3aaf0acc159b84f" translate="yes" xml:space="preserve">
          <source>This is one of the most important sections of a docstring, even if it is placed in the last position. As often, people understand concepts better with examples, than with accurate explanations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7007c1ec4b606d7cb349bc75de9c72939b6e171" translate="yes" xml:space="preserve">
          <source>This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad0a7133769d927c789c75b7fa3dcf7258b7a57" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;DataFrame.apply&lt;/code&gt;, except that &lt;code&gt;axis=None&lt;/code&gt; applies the function to the entire DataFrame at once, rather than column-wise or row-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be42caf6714db145dc566029f11422e0d90fde8" translate="yes" xml:space="preserve">
          <source>This is the default index type used by DataFrame and Series when no explicit index is provided by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0861c946a683b8c12768946036e601454f687f47" translate="yes" xml:space="preserve">
          <source>This is the enumerative complement of cumcount. Note that the numbers given to the groups match the order in which the groups would be seen when iterating over the groupby object, not the order they are first observed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b5f5ef987e2a4ba822827916bf50d1e2998baa" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;.values&lt;/code&gt; for non-sparse data. For sparse data contained in a &lt;code&gt;SparseArray&lt;/code&gt;, the data are first converted to a dense representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4555220065e1dc12dde8fb29600ef7ba8b394f" translate="yes" xml:space="preserve">
          <source>This is the set difference of two Index objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904f82014286201e53cac2b3acadb099bc39b7b1" translate="yes" xml:space="preserve">
          <source>This is the target object for assignment. It is used when there is variable assignment in the expression. If so, then &lt;code&gt;target&lt;/code&gt; must support item assignment with string keys, and if a copy is being returned, it must also support &lt;code&gt;.copy()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d70293742810ee021ebdd451d1364004586f0cb" translate="yes" xml:space="preserve">
          <source>This is used in e.g. ExtensionArray.take. This should be the user-facing &amp;ldquo;boxed&amp;rdquo; version of the NA value, not the physical NA value for storage. e.g. for JSONArray, this is an empty dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90030a9915adaa22b103b39e7493b48cb29104b" translate="yes" xml:space="preserve">
          <source>This is used in the default &amp;lsquo;__repr__&amp;rsquo;. The returned formatting function receives instances of your scalar type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14782eb14f37713891edc6820aae1692eaecbfaa" translate="yes" xml:space="preserve">
          <source>This is useful for SparseDataFrame or for DataFrames containing sparse arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b9ac213dfa69da443517f8e3cebfcea9d01454" translate="yes" xml:space="preserve">
          <source>This is useful mainly for data types that accept parameters. For example, a period dtype accepts a frequency parameter that can be set as &lt;code&gt;period[H]&lt;/code&gt; (where H means hourly frequency).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c503a2c502e7f715ab6b8c071a787e5e6746a1d7" translate="yes" xml:space="preserve">
          <source>This is useful when the index needs to be treated as a column, or when the index is meaningless and needs to be reset to the default before another operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d0d18f69e8f4ea267bc2992c96dccac1154219" translate="yes" xml:space="preserve">
          <source>This mapping is applied only if &lt;code&gt;index=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c548f3abe0c10309608ea8fedd8f123f0270c9a" translate="yes" xml:space="preserve">
          <source>This means that the &lt;code&gt;regex&lt;/code&gt; argument must be a string, compiled regular expression, or list, dict, ndarray or Series of such elements. If &lt;code&gt;value&lt;/code&gt; is also &lt;code&gt;None&lt;/code&gt; then this &lt;strong&gt;must&lt;/strong&gt; be a nested dictionary or Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324497d09c5de087f6bc924dd9e034bfa04eb3ac" translate="yes" xml:space="preserve">
          <source>This means that we are not indexing according to actual values in the index attribute of the object. We are indexing according to the actual position of the element in the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72fb58f90108444594ec99ed422e2d93ce18578" translate="yes" xml:space="preserve">
          <source>This method also supports an optional &lt;code&gt;min_periods&lt;/code&gt; keyword that specifies the required minimum number of non-NA observations for each column pair in order to have a valid result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c930077dbd1c4b442a3f2b7e3eadd440b26d7b" translate="yes" xml:space="preserve">
          <source>This method applies a function that accepts and returns a scalar to every element of a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59419593321b70a1095e11a7aa8e3b317a15accf" translate="yes" xml:space="preserve">
          <source>This method can be used to perform more than one action of adding, removing, and reordering simultaneously and is therefore faster than performing the individual steps via the more specialised methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4e1c841592b0f6b85deb0a8d2bf4cf07644a4b" translate="yes" xml:space="preserve">
          <source>This method computes the Pearson correlation between the Series and its shifted self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4e7082d5d12ce4a2e2d82b682bd2b90af43f60" translate="yes" xml:space="preserve">
          <source>This method computes the dot product between the Series and another one, or the Series and each columns of a DataFrame, or the Series and each columns of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec71eb7bf2f96dd0b9066d9912fb8d74ab5e16b" translate="yes" xml:space="preserve">
          <source>This method computes the matrix product between the DataFrame and the values of an other Series, DataFrame or a numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d554798f68cc69361bed97a7de34a3822748a0a3" translate="yes" xml:space="preserve">
          <source>This method has &lt;em&gt;a lot&lt;/em&gt; of options. You are encouraged to experiment and play with this method to gain intuition about how it works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b839ecd3f4e14181e44af59fb112de1f23ab55d2" translate="yes" xml:space="preserve">
          <source>This method has the same keyword parameters and defaults as &lt;a href=&quot;https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper&quot;&gt;&lt;code&gt;textwrap.TextWrapper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5bf2a9c759b781871f2c2ba6d06a222f607427" translate="yes" xml:space="preserve">
          <source>This method is available directly on TimedeltaArray, TimedeltaIndex and on Series containing timedelta values under the &lt;code&gt;.dt&lt;/code&gt; namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdbbf9002519740a35ba0329f84e7b5549f43fe" translate="yes" xml:space="preserve">
          <source>This method is available on Series with datetime values under the &lt;code&gt;.dt&lt;/code&gt; accessor, and directly on Datetime Array/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9ed40e60ce1f6b4be775b5e74935c03640ced8" translate="yes" xml:space="preserve">
          <source>This method is available on Series with datetime values under the &lt;code&gt;.dt&lt;/code&gt; accessor, and directly on DatetimeIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6573392bb1f9f00ace438e0e4c36fe78c2e95db" translate="yes" xml:space="preserve">
          <source>This method is equivalent to &lt;code&gt;df.sort_values(columns, ascending=False).head(n)&lt;/code&gt;, but more performant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06b92685a52860c9e146ba58c85510a1fa3a846" translate="yes" xml:space="preserve">
          <source>This method is equivalent to &lt;code&gt;df.sort_values(columns, ascending=True).head(n)&lt;/code&gt;, but more performant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738f6266dc89d327fd0ce106c80dd20a85a542ca" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;code&gt;numpy.nonzero&lt;/code&gt; on the series data. For compatibility with NumPy, the return value is the same (a tuple with an array of indices for each dimension), but it will always be a one-item tuple because series only have one dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d652484fa25ba4ccf389b306b12e15d660582ff2" translate="yes" xml:space="preserve">
          <source>This method is for shifting the values of datetime-like indexes by a specified time increment a given number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a0a44a61b3016febce96da2890a80ccdc51190" translate="yes" xml:space="preserve">
          <source>This method is generally used for the analysis of time series data to understand the relationship between different measures across time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3823c5f5e8ec6acfb74ef0889b307601e4f466d8" translate="yes" xml:space="preserve">
          <source>This method is most useful when you don&amp;rsquo;t know if your object is a Series or DataFrame, but you do know it has just a single column. In that case you can safely call &lt;code&gt;squeeze&lt;/code&gt; to ensure you have a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751bf7919e7bbc9ad2ac68d7ea48730f9b1f8461" translate="yes" xml:space="preserve">
          <source>This method is not part of the pandas interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c810a344032afaa951459ae930dd68eb52cb57cb" translate="yes" xml:space="preserve">
          <source>This method is only implemented for datetime-like index classes, i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7f88c81bf962b4576f8a38064511c37173024e" translate="yes" xml:space="preserve">
          <source>This method is provided for backwards compatibility. Generally, it is recommended to use &amp;lsquo;.values&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856397989b2856553ec1cb383cfcf54cf2e3aba1" translate="yes" xml:space="preserve">
          <source>This method is the DataFrame version of &lt;code&gt;ndarray.argmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855588edb6190f95074e6d356428097957924d5a" translate="yes" xml:space="preserve">
          <source>This method is the DataFrame version of &lt;code&gt;ndarray.argmin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e18886ebb3ee33e24eefcde5d568b258d5b5c0" translate="yes" xml:space="preserve">
          <source>This method is the Series version of &lt;code&gt;ndarray.argmax&lt;/code&gt;. This method returns the label of the maximum, while &lt;code&gt;ndarray.argmax&lt;/code&gt; returns the position. To get the position, use &lt;code&gt;series.values.argmax()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dae5621b0e44bc28e71498c0776a53fd5f0407a" translate="yes" xml:space="preserve">
          <source>This method is the Series version of &lt;code&gt;ndarray.argmin&lt;/code&gt;. This method returns the label of the minimum, while &lt;code&gt;ndarray.argmin&lt;/code&gt; returns the position. To get the position, use &lt;code&gt;series.values.argmin()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996ac28d97663b87c393fece1987427ee75bf9a2" translate="yes" xml:space="preserve">
          <source>This method is useful for obtaining a numeric representation of an array when all that matters is identifying distinct values. &lt;code&gt;factorize&lt;/code&gt; is available as both a top-level function &lt;a href=&quot;#pandas.factorize&quot;&gt;&lt;code&gt;pandas.factorize()&lt;/code&gt;&lt;/a&gt;, and as a method &lt;a href=&quot;pandas.series.factorize#pandas.Series.factorize&quot;&gt;&lt;code&gt;Series.factorize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pandas.index.factorize#pandas.Index.factorize&quot;&gt;&lt;code&gt;Index.factorize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fd2980ee1697e11427c2bf2f0b8544494011e3" translate="yes" xml:space="preserve">
          <source>This method is useful for obtaining a numeric representation of an array when all that matters is identifying distinct values. &lt;code&gt;factorize&lt;/code&gt; is available as both a top-level function &lt;a href=&quot;pandas.factorize#pandas.factorize&quot;&gt;&lt;code&gt;pandas.factorize()&lt;/code&gt;&lt;/a&gt;, and as a method &lt;a href=&quot;#pandas.Series.factorize&quot;&gt;&lt;code&gt;Series.factorize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pandas.index.factorize#pandas.Index.factorize&quot;&gt;&lt;code&gt;Index.factorize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8137417c59bd05cacf5e1c38d288625d4dc631eb" translate="yes" xml:space="preserve">
          <source>This method is useful for obtaining a numeric representation of an array when all that matters is identifying distinct values. &lt;code&gt;factorize&lt;/code&gt; is available as both a top-level function &lt;a href=&quot;pandas.factorize#pandas.factorize&quot;&gt;&lt;code&gt;pandas.factorize()&lt;/code&gt;&lt;/a&gt;, and as a method &lt;a href=&quot;pandas.series.factorize#pandas.Series.factorize&quot;&gt;&lt;code&gt;Series.factorize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pandas.Index.factorize&quot;&gt;&lt;code&gt;Index.factorize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3128b61ce67f969fbebac2417c78ee83505e697f" translate="yes" xml:space="preserve">
          <source>This method only works if the index is monotonic or unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60aa110e2d76313464ff3dff754879c824bd9db" translate="yes" xml:space="preserve">
          <source>This method prints a summary of a DataFrame and returns None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddf0977e8b0a74892ff40fadaa3392461c390c8" translate="yes" xml:space="preserve">
          <source>This method prints information about a DataFrame including the index dtype and column dtypes, non-null values and memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8794c3efec0dc7822321fb0c3644fad3b15d259d" translate="yes" xml:space="preserve">
          <source>This method returns an iterable tuple (index, value). This is convenient if you want to create a lazy iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0860bca18e7a4a1616ba554c7e0b45d7d93e7899" translate="yes" xml:space="preserve">
          <source>This method splits the string at the first occurrence of &lt;code&gt;sep&lt;/code&gt;, and returns 3 elements containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return 3 elements containing the string itself, followed by two empty strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77359f849815631897870b32fec319fbbe6f8ebd" translate="yes" xml:space="preserve">
          <source>This method splits the string at the last occurrence of &lt;code&gt;sep&lt;/code&gt;, and returns 3 elements containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return 3 elements containing two empty strings, followed by the string itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3119b07e4befa5537fd376ec91310949a91ec44e" translate="yes" xml:space="preserve">
          <source>This method takes a &lt;code&gt;key&lt;/code&gt; argument to select data at a particular level of a MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8707c090d9af44c445e59eae25906822109d28d9" translate="yes" xml:space="preserve">
          <source>This method takes a time zone (tz) naive Datetime Array/Index object and makes this time zone aware. It does not move the time to another time zone. Time zone localization helps to switch from time zone aware to time zone unaware objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c933c0873fc5ce09ce8835385b1078505ce72df" translate="yes" xml:space="preserve">
          <source>This method uses the top-level &lt;a href=&quot;pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function to evaluate the passed query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc87e8475f20503057128ed429d87a9e8a96b85b" translate="yes" xml:space="preserve">
          <source>This method will simply return the caller if called by anything other than a MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb898735f8aa037bfda0a864f41acf403b85111" translate="yes" xml:space="preserve">
          <source>This must be a boolean scalar value, either True or False. Raise a ValueError if the PandasObject does not have exactly 1 element, or that element is not boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0769d00b122b5aaa1ce79bf5af69c331d6006d" translate="yes" xml:space="preserve">
          <source>This only applies if any of the groupers are Categoricals. If True: only show observed values for categorical groupers. If False: show all values for categorical groupers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6227a95b3cf2eedb4329a0c1a5b6cd9abccf076" translate="yes" xml:space="preserve">
          <source>This operation localizes the Index. To localize the values in a timezone-naive Series, use &lt;a href=&quot;pandas.series.dt.tz_localize#pandas.Series.dt.tz_localize&quot;&gt;&lt;code&gt;Series.dt.tz_localize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69034b71a2e7b13ae9e77740b3765ccb1f5ec73" translate="yes" xml:space="preserve">
          <source>This optional parameter specifies the interpolation method to use, when the desired quantile lies between two data points &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3059a053c2ac66c37e5393d975d6063876a22148" translate="yes" xml:space="preserve">
          <source>This page gives an overview of all public pandas objects, functions and methods. All classes and functions exposed in &lt;code&gt;pandas.*&lt;/code&gt; namespace are public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6216c3dad6c31553fa86ce20962b0025ce3a23ee" translate="yes" xml:space="preserve">
          <source>This page is also here to offer a bit of a translation guide for users of these R packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dea9b547b13ce7cdff683f0cff11a7545310a64" translate="yes" xml:space="preserve">
          <source>This parameter can be either a single column key, a single array of the same length as the calling DataFrame, or a list containing an arbitrary combination of column keys and arrays. Here, &amp;ldquo;array&amp;rdquo; encompasses &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;pandas.index#pandas.Index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;np.ndarray&lt;/code&gt;, and instances of &lt;a href=&quot;https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f655a645e84d84fc73a73f0824ed32157fdadc0" translate="yes" xml:space="preserve">
          <source>This raises a &lt;code&gt;TypeError&lt;/code&gt; because one of the &lt;code&gt;dict&lt;/code&gt; keys is not of the correct type for replacement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f64bea06289a99cd902345a371757dc6a897d5" translate="yes" xml:space="preserve">
          <source>This request then goes to the repository maintainers, and they will review the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c95a7094c67643b0ab6f28404c1944c7bf3197" translate="yes" xml:space="preserve">
          <source>This returns a Series with the data type of each column. The result&amp;rsquo;s index is the original DataFrame&amp;rsquo;s columns. Columns with mixed types are stored with the &lt;code&gt;object&lt;/code&gt; dtype. See &lt;a href=&quot;../../getting_started/basics#basics-dtypes&quot;&gt;the User Guide&lt;/a&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0152631f97602783a59ef0a729e6ca5a7eefe8be" translate="yes" xml:space="preserve">
          <source>This returns a new Index with elements common to the index and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d51e7654970d50ac7ca8e3065a05f8b77d8e9a1" translate="yes" xml:space="preserve">
          <source>This routine will explode list-likes including lists, tuples, Series, and np.ndarray. The result dtype of the subset rows will be object. Scalars will be returned unchanged. Empty list-likes will result in a np.nan for that row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd82b53e184606bb55735603cad2bebf66e6927d" translate="yes" xml:space="preserve">
          <source>This script will indicate some formatting errors if present, and will also run and test the examples included in the docstring. Check the &lt;a href=&quot;contributing_docstring#docstring&quot;&gt;pandas docstring guide&lt;/a&gt; for a detailed guide on how to format the docstring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689e1bc356e69c1b1a72b35c97f85f30345934f5" translate="yes" xml:space="preserve">
          <source>This section covers &lt;a href=&quot;#advanced-hierarchical&quot;&gt;indexing with a MultiIndex&lt;/a&gt; and &lt;a href=&quot;#indexing-index-types&quot;&gt;other advanced indexing features&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f209a9a389ec8b793482f75fb64df1e19393beca" translate="yes" xml:space="preserve">
          <source>This section describes how to subclass &lt;code&gt;pandas&lt;/code&gt; data structures to meet more specific needs. There are two points that need attention:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47303db9ed329715b72028899c6aa3e67f5f45e8" translate="yes" xml:space="preserve">
          <source>This section follows the same format as the extended summary section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd3897f1296b2b15b4e3dff782c293d8aaa1d56" translate="yes" xml:space="preserve">
          <source>This section is used to let users know about pandas functionality related to the one being documented. In rare cases, if no related methods or functions can be found at all, this section can be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fb3ec71f33da750995b66b6859ca1b1d8b7a3a" translate="yes" xml:space="preserve">
          <source>This section will focus on downstream applications of pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e681ffb046699302d581ca49c596c12166f99b50" translate="yes" xml:space="preserve">
          <source>This section will provide a look into some of pandas internals. It&amp;rsquo;s primarily intended for developers of pandas itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d328d9e2438a70d52c356e68d371064083376c1f" translate="yes" xml:space="preserve">
          <source>This section, as the previous, also has a header, &amp;ldquo;See Also&amp;rdquo; (note the capital S and A). Also followed by the line with hyphens, and preceded by a blank line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc63698847500095e7ef2bb857dc3da939a3e388" translate="yes" xml:space="preserve">
          <source>This should match the NumPy dtype used when the array is converted to an ndarray, which is probably &amp;lsquo;O&amp;rsquo; for object if the extension type cannot be represented as a built-in NumPy type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451d23930ae09abaf317d0ac8e13e0018e8ff057" translate="yes" xml:space="preserve">
          <source>This specification will select a column via the key parameter, or if the level and/or axis parameters are given, a level of the index of the target object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc46b9b036c8ff89872dbdfaafdb270b6eca0887" translate="yes" xml:space="preserve">
          <source>This table lays out the different array types for each extension dtype within pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6fed36ad397607ea121821b5c24aee97b88043" translate="yes" xml:space="preserve">
          <source>This table lays out the different dtypes and default return types of &lt;code&gt;to_numpy()&lt;/code&gt; for various dtypes within pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dde14ef838511140d8095b819f72c037e94af90" translate="yes" xml:space="preserve">
          <source>This test shows off several useful features of Hypothesis, as well as demonstrating a good use-case: checking properties that should hold over a large or complicated domain of inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50ba13d827d6189c3ad97d769bd1ef7e7b3251a" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you have refactored as much as possible in Python, for example by trying to remove for-loops and making use of NumPy vectorization. It&amp;rsquo;s always worth optimising in Python first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1969920e9a097aa4c303680c1eb36cb4b8a7d945" translate="yes" xml:space="preserve">
          <source>This tutorial walks through a &amp;ldquo;typical&amp;rdquo; process of cythonizing a slow computation. We use an &lt;a href=&quot;http://docs.cython.org/src/quickstart/cythonize.html&quot;&gt;example from the Cython documentation&lt;/a&gt; but in the context of pandas. Our final cythonized solution is around 100 times faster than the pure Python solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e4f89cf3c5ad98ceda60e1633015e7afe9c7c9" translate="yes" xml:space="preserve">
          <source>This value is displayed in &lt;code&gt;DataFrame.info&lt;/code&gt; by default. This can be suppressed by setting &lt;code&gt;pandas.options.display.memory_usage&lt;/code&gt; to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb864ccdc545d63df5e1e6d68c4e137e376ee3a" translate="yes" xml:space="preserve">
          <source>This warning is issued when dealing with larger files because the dtype checking happens per chunk read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90af9dd9868c9663f1a8854ffbdbb3cd81d74d6" translate="yes" xml:space="preserve">
          <source>This will &lt;strong&gt;not&lt;/strong&gt; modify &lt;code&gt;df&lt;/code&gt; because the column alignment is before value assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973b64f97d2ef7e5a84d5ffe4f9c0eb40570d4c5" translate="yes" xml:space="preserve">
          <source>This will automatically update your pull request with the latest code and restart the &lt;a href=&quot;#contributing-ci&quot;&gt;Continuous Integration&lt;/a&gt; tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90a6c4ec0b650116e6da4e02de3e0f3d22f5b2e" translate="yes" xml:space="preserve">
          <source>This will create a minimal environment with only Python installed in it. To put your self inside this environment run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a3f38d7825817b82702b8805e103ed2459ef0c" translate="yes" xml:space="preserve">
          <source>This will create the new environment, and not touch any of your existing environments, nor any existing Python installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dcd64e3204448ae0e79f6078beecc92d76f8b2" translate="yes" xml:space="preserve">
          <source>This will display stderr from the benchmarks, and use your local &lt;code&gt;python&lt;/code&gt; that comes from your &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc245ab4d16ad77a8be2baa53833ff1ab37e881" translate="yes" xml:space="preserve">
          <source>This will force Table format, append the input data to the existing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ae453e29e46d946c33fb2f617e896d8cd3e8b4" translate="yes" xml:space="preserve">
          <source>This will get all the files being changed by the PR (and ending with &lt;code&gt;.py&lt;/code&gt;), and run &lt;code&gt;flake8&lt;/code&gt; on them, one after the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66116e76ece6a37f1cd46c1a5ab3bfe4417ca1e3" translate="yes" xml:space="preserve">
          <source>This will groupby the specified frequency if the target selection (via key or level) is a datetime-like object. For full specification of available frequencies, please see &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca32a4dfef11686c9a932cf499f04cb12fd1810c" translate="yes" xml:space="preserve">
          <source>This will output what your file will look like if the changes are made, and to apply them, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9c668878d4e203e0a788bf8ef0ee909a722fb7" translate="yes" xml:space="preserve">
          <source>This will put the text &lt;em&gt;New in version 0.21.0&lt;/em&gt; wherever you put the sphinx directive. This should also be put in the docstring when adding a new function or method (&lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/frame.py#L1495&quot;&gt;example&lt;/a&gt;) or a new keyword argument (&lt;a href=&quot;https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/generic.py#L568&quot;&gt;example&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7aab8a35d480d26e54cb0b3c3cc01a1cc64882" translate="yes" xml:space="preserve">
          <source>This would be more or less equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634cd2e6cde2d98b41e7a610447bdd6bcb80e0ec" translate="yes" xml:space="preserve">
          <source>This would instead return the new ExtensionArray dedicated for string data. If you really need the new array to be backed by a NumPy array, specify that in the dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d7351bd144039f0ad934857f64258268b7bcb5" translate="yes" xml:space="preserve">
          <source>Thousands separator for parsing string columns to numeric. Note that this parameter is only necessary for columns stored as TEXT in Excel, any numeric columns will automatically be parsed, regardless of display format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31d4908156dd20f2c665daa3bd02718ca200501" translate="yes" xml:space="preserve">
          <source>Thousands separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d883028ca01a1fd0855b14863bfa7121240ec4" translate="yes" xml:space="preserve">
          <source>Thread-safety</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682f4e12d69489eec604893bb60cbfdb128f099a" translate="yes" xml:space="preserve">
          <source>Through the &lt;code&gt;keys&lt;/code&gt; argument we can override the existing column names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800534ef25c202aee761b30a03dd2347a79334c9" translate="yes" xml:space="preserve">
          <source>Throughout this tutorial, the pandas &lt;code&gt;DataFrame&lt;/code&gt; will be displayed by calling &lt;code&gt;df.head()&lt;/code&gt;, which displays the first N (default 5) rows of the &lt;code&gt;DataFrame&lt;/code&gt;. This is often used in interactive work (e.g. &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter notebook&lt;/a&gt; or terminal) &amp;ndash; the equivalent in Stata would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477d8c9bc0a4be5eaa4c863a8c508c0fdf36ebf0" translate="yes" xml:space="preserve">
          <source>Throughout this tutorial, the pandas &lt;code&gt;DataFrame&lt;/code&gt; will be displayed by calling &lt;code&gt;df.head()&lt;/code&gt;, which displays the first N (default 5) rows of the &lt;code&gt;DataFrame&lt;/code&gt;. This is often used in interactive work (e.g. &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter notebook&lt;/a&gt; or terminal) - the equivalent in SAS would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ca640241c69227719e9f18f995dcee74d810c7" translate="yes" xml:space="preserve">
          <source>Thus far, we&amp;rsquo;ve only factorized lists (which are internally coerced to NumPy arrays). When factorizing pandas objects, the type of &lt;code&gt;uniques&lt;/code&gt; will differ. For Categoricals, a &lt;code&gt;Categorical&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36b445eefee98c2a91e1a97da7fa25fc0bd5cba" translate="yes" xml:space="preserve">
          <source>Thus, as per above, we have the most basic indexing using &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeddfe22a01fc0ff5fb0fe691b08db0b2e2a26c7" translate="yes" xml:space="preserve">
          <source>Tick</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005e2d6d133a507128b3b4a22220c99353a01ab5" translate="yes" xml:space="preserve">
          <source>Tick label font size in points or as a string (e.g., &lt;code&gt;large&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91be3bad2dddb635b9a4327f0ad047518f3fa7d" translate="yes" xml:space="preserve">
          <source>Tick.apply()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec7c55fe842d78900b97706e1718f0e4129cad9" translate="yes" xml:space="preserve">
          <source>Tick.apply_index()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7463f5857d907ef1e2eaa78da4de07eef49a797f" translate="yes" xml:space="preserve">
          <source>Tick.base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020208071d617cb627b89110c900bb2bcad307a1" translate="yes" xml:space="preserve">
          <source>Tick.copy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe789382a556d93cc25583c950b721f114d1f60" translate="yes" xml:space="preserve">
          <source>Tick.delta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b8b6252d04454747e17e18291cb6122f2af3f6" translate="yes" xml:space="preserve">
          <source>Tick.freqstr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79bc466fd9bed3cf547af01e0803e6cb7f2c5d7" translate="yes" xml:space="preserve">
          <source>Tick.isAnchored()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46349a91885da9a1054c3943f05a122af3c88c91" translate="yes" xml:space="preserve">
          <source>Tick.kwds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93e443a27418e28b535610699666437a3bafefd" translate="yes" xml:space="preserve">
          <source>Tick.name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81f2dee86924548e5a995accf3c93391726145" translate="yes" xml:space="preserve">
          <source>Tick.nanos</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7411235bbdc33c689834de89717751dbb3c31a34" translate="yes" xml:space="preserve">
          <source>Tick.normalize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3470641067ebc45a2dcfdd160963089b0506535f" translate="yes" xml:space="preserve">
          <source>Tick.onOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c42ed1ebd667112c1fd17294614eaf25049f48c" translate="yes" xml:space="preserve">
          <source>Tick.rollback()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb01fb88f916fb5d43cfdf88e62eaab883bf764" translate="yes" xml:space="preserve">
          <source>Tick.rollforward()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7daae1db7e9f8b06371d00efe0404fcdcdac93d" translate="yes" xml:space="preserve">
          <source>Tick.rule_code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ae7256499b1aad47073adf6dddba670bc621db" translate="yes" xml:space="preserve">
          <source>Tidy Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d403c7850dab621de485bbf677e4e821689cdf6" translate="yes" xml:space="preserve">
          <source>Tiingo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac3e00029de86efb050d459c1b741e4ec9b87bd" translate="yes" xml:space="preserve">
          <source>Tiling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690bd8d19b1d5bb91b9484541ca7645dca247cd3" translate="yes" xml:space="preserve">
          <source>Time Series-Related Instance Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a76c0931bd76a6fcd1972a3188f938c0dc74c2" translate="yes" xml:space="preserve">
          <source>Time deltas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf8c86edc5573927dcb0e0f2d0099a1e4fff122" translate="yes" xml:space="preserve">
          <source>Time offset to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044562ecb24a4347ae12d2ecd7afe6cd46dc5f01" translate="yes" xml:space="preserve">
          <source>Time series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5333b1306530a4b7f38e7b710bf7ef8ab337c77d" translate="yes" xml:space="preserve">
          <source>Time series / date functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b1a1a34466e65f9095e778e5475396708d42a3" translate="yes" xml:space="preserve">
          <source>Time series-related</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c001a7181a3e754618425f73e009b9131120a502" translate="yes" xml:space="preserve">
          <source>Time span representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b915a2f6545db1f34617084c28d9d756a3da2a3c" translate="yes" xml:space="preserve">
          <source>Time zone for time which Timestamp will be converted to. None will remove timezone holding UTC time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f910e871d542509ad0a7fad727edd8837a18e52d" translate="yes" xml:space="preserve">
          <source>Time zone for time which Timestamp will be converted to. None will remove timezone holding local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1afe906bc661f66e28653debd96b22120176f1" translate="yes" xml:space="preserve">
          <source>Time zone for time which Timestamp will have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2ae05a267734fbc853ad315bb86bf6c3168507" translate="yes" xml:space="preserve">
          <source>Time zone for time. Corresponding timestamps would be converted to this time zone of the Datetime Array/Index. A &lt;code&gt;tz&lt;/code&gt; of None will convert to UTC and remove the timezone information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e87ded296ce05ba9c8d4798092135c41726f34" translate="yes" xml:space="preserve">
          <source>Time zone handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8f614d144ab47b670e20f7522453fc38517d98" translate="yes" xml:space="preserve">
          <source>Time zone name (no characters if no time zone exists).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ac5fd66de1d40139b066d61aab909d01b1d7e7" translate="yes" xml:space="preserve">
          <source>Time zone name for returning localized DatetimeIndex, for example &amp;lsquo;Asia/Hong_Kong&amp;rsquo;. By default, the resulting DatetimeIndex is timezone-naive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd854c720beea78d180bea684461d35a9f85ee7" translate="yes" xml:space="preserve">
          <source>Time zone name for returning localized DatetimeIndex, for example Asia/Beijing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3046a4401e4b5577460b83814f6e133acbf0e000" translate="yes" xml:space="preserve">
          <source>Time zone to convert timestamps to. Passing &lt;code&gt;None&lt;/code&gt; will remove the time zone information preserving local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd07d379c68011eb6618583ca43d965eaef8c4f7" translate="yes" xml:space="preserve">
          <source>Time-specific operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795fca15e66565ce57765b653f3830c7ee47ddec" translate="yes" xml:space="preserve">
          <source>Time/Date components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b9da71e1fa9327afc7704b22bd1e79435a0730" translate="yes" xml:space="preserve">
          <source>Time/date components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f84a42a4f12280c3407decd56ba362c616ad239" translate="yes" xml:space="preserve">
          <source>TimeSeries with PeriodIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1258d8d00628ceb619d9da1eb4d43759e2fd1a" translate="yes" xml:space="preserve">
          <source>TimeStamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f427901653e2f16331f232b03616db8d30b0bf3e" translate="yes" xml:space="preserve">
          <source>Timedelta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b10bdcd075cdde2fa60b0c7802da6768ac2e90" translate="yes" xml:space="preserve">
          <source>Timedelta data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43158df8bdebcf560f52e2ea487c664041f9daf2" translate="yes" xml:space="preserve">
          <source>Timedelta in nanoseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfb7b15450290a0b3bd03e7a9408cef2f7ea485" translate="yes" xml:space="preserve">
          <source>Timedelta is the pandas equivalent of python&amp;rsquo;s &lt;code&gt;datetime.timedelta&lt;/code&gt; and is interchangeable with it in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f43b97cb1b2228971cf9047f0d409b5b56256b2" translate="yes" xml:space="preserve">
          <source>Timedelta methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e33a2f5fc4a50b4cc139532c474db6b97e21c5" translate="yes" xml:space="preserve">
          <source>Timedelta objects are internally saved as numpy datetime64[ns] dtype. Use to_pytimedelta() to convert to object dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858ffb0fd78ac2aa3bd7f317582a39980112ea81" translate="yes" xml:space="preserve">
          <source>Timedelta properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dac3b2b92279314eb5efdc72b4e03e185a1bd9" translate="yes" xml:space="preserve">
          <source>Timedelta resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebb2c818174f7d1d3d871719814d958cdbaa334" translate="yes" xml:space="preserve">
          <source>Timedelta.asm8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f2112576ebfc48a140659b4c2fa1342c0177d4" translate="yes" xml:space="preserve">
          <source>Timedelta.ceil()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31eb6ab6cadc4009cee95c2fae58c421df9153e2" translate="yes" xml:space="preserve">
          <source>Timedelta.components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7959c25887e77c705a72ad2cbcad5b4684bca12c" translate="yes" xml:space="preserve">
          <source>Timedelta.days</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560568662562cdf9d49d4fe842129387d5b40f37" translate="yes" xml:space="preserve">
          <source>Timedelta.delta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaba76775783ca78af5280131b41864b001604b9" translate="yes" xml:space="preserve">
          <source>Timedelta.floor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06efb29720de29203f78f84a99fcbfb09c04352c" translate="yes" xml:space="preserve">
          <source>Timedelta.freq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec633e4996060cf3667d6dafc5ff84d6e22c3f3" translate="yes" xml:space="preserve">
          <source>Timedelta.is_populated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca83f6e6d82749047d7d7e79de72a97ce8beec65" translate="yes" xml:space="preserve">
          <source>Timedelta.isoformat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c95fd66a280ded40ecd11ddc0d22fd99807130" translate="yes" xml:space="preserve">
          <source>Timedelta.max</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c90ba698290d0000973384ff2b1f018dcd4dafa" translate="yes" xml:space="preserve">
          <source>Timedelta.microseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa42f45bb461407d2ebc6d5c40d33f99441d8a56" translate="yes" xml:space="preserve">
          <source>Timedelta.min</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943b5518e6b5f300d100188ee9fbfce0c0c3e38d" translate="yes" xml:space="preserve">
          <source>Timedelta.nanoseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cd43abde9802114b5108364866bd25e0cfda4b" translate="yes" xml:space="preserve">
          <source>Timedelta.resolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982d33d13577250e862aa38150aee9a4e410e2b6" translate="yes" xml:space="preserve">
          <source>Timedelta.resolution_string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db6718621b43ee40cc86b4c7f0b9cb80ad7814b" translate="yes" xml:space="preserve">
          <source>Timedelta.round()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e579e4d49bb1439b334f2cbab5a2816c3b16da" translate="yes" xml:space="preserve">
          <source>Timedelta.seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39fbcbd284f3f4f32bc27bd4bcd5981cf7a1041" translate="yes" xml:space="preserve">
          <source>Timedelta.to_numpy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5110f3a433a8621115c5c646ab1013d6e1e63efd" translate="yes" xml:space="preserve">
          <source>Timedelta.to_pytimedelta()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c771d2a2005407cb7c5ecb5ba68ac2f9c7ab57cd" translate="yes" xml:space="preserve">
          <source>Timedelta.to_timedelta64()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d25ed481744a31b90eafa60ca0fdc9bfb8cac6" translate="yes" xml:space="preserve">
          <source>Timedelta.total_seconds()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b0054a9b28f7c6b9bd9da71b03a6bbfa81e16f" translate="yes" xml:space="preserve">
          <source>Timedelta.value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c127fc8f5f611374a61b363dfa27781aef09ff7" translate="yes" xml:space="preserve">
          <source>Timedelta.view()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9194f8b1890f5af2a97db577c40b5ccb4e0aa0" translate="yes" xml:space="preserve">
          <source>TimedeltaArray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31890a13031c1915358b738127d2e7862f5a161" translate="yes" xml:space="preserve">
          <source>TimedeltaArray is currently experimental, and its API may change without warning. In particular, &lt;code&gt;TimedeltaArray.dtype&lt;/code&gt; is expected to change to be an instance of an &lt;code&gt;ExtensionDtype&lt;/code&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7118282f772a2f29f25a10d288a4e0e46cf1b070" translate="yes" xml:space="preserve">
          <source>TimedeltaArray/Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26349b64ad149d161a1e4f87310a7765b41ddab" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b961523a5c840c2870503700a7da03bf9eff178a" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.ceil()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a41a70de56adc877e19da4798f890899326483" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8d5f95301c68f9d93dc816a52630c0cb706b26" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.days</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b300ee38265e7acb0e8fcada193371c7fb8a28f1" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.floor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7645c631be4cc90ddd14dad54d438c08592ebe2c" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.inferred_freq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02b1268a64fae0618e0f1e423b40ad11d48c871" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.mean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5116ccf332f887e7e33fe4d733431007853f41" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.microseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8964a0974c26dca49c53bd153f700971750c5162" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.nanoseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d33eaf31db6f4708aedffbc59baad26d27353c" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.round()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b2878e223343ee60d249d2f6aa1ad90bed0f14" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ae8a5ab3ef25596f3dd51ed3daf4cee1c6ef25" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.to_frame()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae7e2bfa54937e01ffe78a97b1958bdf0d7e981" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.to_pytimedelta()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e49267659e7a6ccff3bb1245fb8934f327c8ed" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex.to_series()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87ecbf9e53cb43dfb2c99ad995d1a17e8b20622" translate="yes" xml:space="preserve">
          <source>TimedeltaIndex[source]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e935599cd3a8cb0a39854b6cce9cd142600401" translate="yes" xml:space="preserve">
          <source>Timedeltas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4855616e88a1a9a3ddfd5bcfb497d483a30414" translate="yes" xml:space="preserve">
          <source>Timedeltas are absolute differences in times, expressed in difference units (e.g. days, hours, minutes, seconds). This method converts an argument from a recognized timedelta format / value into a Timedelta type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765065ed54c96f745cfa8d6fddb07cfbfdbb1e34" translate="yes" xml:space="preserve">
          <source>Timedeltas are differences in times, expressed in difference units, e.g. days, hours, minutes, seconds. They can be both positive and negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a3218081ecce5fdaf292828606117830a8a7cb" translate="yes" xml:space="preserve">
          <source>Timeseries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b147a3cda149bbf8f8aae3b78384c257ea74811" translate="yes" xml:space="preserve">
          <source>Timeseries friendly merging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf17488abcdda9994184de6be1eac26a1153530c" translate="yes" xml:space="preserve">
          <source>Timespan data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19eabc961735d78f12fc7be906ffcb033853cf85" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cabb2d2194bc36845c7acabf9bb356a1a65112b" translate="yes" xml:space="preserve">
          <source>Timestamp is the pandas equivalent of python&amp;rsquo;s Datetime and is interchangeable with it in most cases. It&amp;rsquo;s the type used for the entries that make up a DatetimeIndex, and other timeseries oriented data structures in pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcd92169a1a62f8170bc0e774ee78a9dab70961" translate="yes" xml:space="preserve">
          <source>Timestamp limitations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6f28e866bddddcce6848b072a3f2266d3f5351" translate="yes" xml:space="preserve">
          <source>Timestamp with fields replaced</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3f4f64c3084062fb05b550bef261e15ae1facb" translate="yes" xml:space="preserve">
          <source>Timestamp.asm8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a1dc5361c4ebb78c0485509b0bab2f84880756" translate="yes" xml:space="preserve">
          <source>Timestamp.astimezone()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e357ed8eb879b9d584c9b143d132bed274e85dac" translate="yes" xml:space="preserve">
          <source>Timestamp.ceil()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f7e380b4d6fd2ff6da8b99223cb48c67a3b606" translate="yes" xml:space="preserve">
          <source>Timestamp.combine()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d374297e499b6f4f03a6dc5778bd499019aab123" translate="yes" xml:space="preserve">
          <source>Timestamp.ctime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be57785263bf0f5b8aafc6c53f202edae3d51daf" translate="yes" xml:space="preserve">
          <source>Timestamp.date()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3460755c51094011739270c160b4a040ca2e01aa" translate="yes" xml:space="preserve">
          <source>Timestamp.day</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d8e2b2089e170c28b8dee31b7372fb37988515" translate="yes" xml:space="preserve">
          <source>Timestamp.day_name()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a379df7862c5bec62cfbec930cf86f82a70bae8a" translate="yes" xml:space="preserve">
          <source>Timestamp.dayofweek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006ecc842f064b7815925aa6cedead58b1fb7278" translate="yes" xml:space="preserve">
          <source>Timestamp.dayofyear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b1ca98738daa4185f61ae82ee10e24a72720a8" translate="yes" xml:space="preserve">
          <source>Timestamp.days_in_month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87912ab0c5bcabea91c53bd22034a565cf96bc8" translate="yes" xml:space="preserve">
          <source>Timestamp.daysinmonth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec15b39881e4c7f37362a92b164a33c444836b1c" translate="yes" xml:space="preserve">
          <source>Timestamp.dst()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294c7bb18e355e33fc4407712ddb5570921b22bc" translate="yes" xml:space="preserve">
          <source>Timestamp.floor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8125f33dcc8baeb4600ec46aadaae20716d7a61f" translate="yes" xml:space="preserve">
          <source>Timestamp.fold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ed81a9f112109e3235ead0d8af2e37df101820" translate="yes" xml:space="preserve">
          <source>Timestamp.freq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d25a3c15cadfa4a5cac2c0c70cea3859843c302" translate="yes" xml:space="preserve">
          <source>Timestamp.freqstr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6589a41df19a722ae13dd05621883adc041b7e5" translate="yes" xml:space="preserve">
          <source>Timestamp.fromisoformat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50e3381ede130fe6a5aeedc59563bc9f42e6d8a" translate="yes" xml:space="preserve">
          <source>Timestamp.fromordinal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c499800cad78776876522ae39e9a987fb3bd6e" translate="yes" xml:space="preserve">
          <source>Timestamp.fromtimestamp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c333f8f6e93ff37eb1d088d89cb62426bad2d92e" translate="yes" xml:space="preserve">
          <source>Timestamp.hour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10a1bc84ce2ed17763ee8ac83752f9c5bd599e7" translate="yes" xml:space="preserve">
          <source>Timestamp.is_leap_year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f33d24f074cb0034704b1353269b02e7a0123b5" translate="yes" xml:space="preserve">
          <source>Timestamp.is_month_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5dd9b10a801c0c475c5fe1616f3277bb3cc6bf" translate="yes" xml:space="preserve">
          <source>Timestamp.is_month_start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acdf0d95d282865bd0d8252e7102befda233577" translate="yes" xml:space="preserve">
          <source>Timestamp.is_quarter_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8deb027e4d75adc486bc928494833b551f407b3b" translate="yes" xml:space="preserve">
          <source>Timestamp.is_quarter_start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da54f190525c72e67b12a5801b0daafbcd43fce" translate="yes" xml:space="preserve">
          <source>Timestamp.is_year_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9323e07458c8408bfb3c89546788dbd60bb694e" translate="yes" xml:space="preserve">
          <source>Timestamp.is_year_start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e9a60d31f5d96fec345643cfeaecc93e0c0d58" translate="yes" xml:space="preserve">
          <source>Timestamp.isocalendar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1447fcc4e758bbbfd0c5449b22a7c9976fa9f13f" translate="yes" xml:space="preserve">
          <source>Timestamp.isoformat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c23d1ad0c58a4662aad86b4dd733ef77f4405c9" translate="yes" xml:space="preserve">
          <source>Timestamp.isoweekday()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0ef927fc5e7b5adfc2be7153c5a6674e3cfce5" translate="yes" xml:space="preserve">
          <source>Timestamp.max</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4062a120a615714adfb6a610c2e242deac71b435" translate="yes" xml:space="preserve">
          <source>Timestamp.microsecond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fa2fa0c3b1f03490b00a93b981636a8d1a12ae" translate="yes" xml:space="preserve">
          <source>Timestamp.min</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f93049a28b93014329e3581bed6d5fcb0bbb19" translate="yes" xml:space="preserve">
          <source>Timestamp.minute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b19bab2fb7a19e758a48e28f6249991d1018505" translate="yes" xml:space="preserve">
          <source>Timestamp.month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1500921c7d6765dd73ad012b0133a651f292436f" translate="yes" xml:space="preserve">
          <source>Timestamp.month_name()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a87654a065ef5c7a4558013992ff6d067721e7" translate="yes" xml:space="preserve">
          <source>Timestamp.nanosecond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c204a94571f29cdcc26b9ee5586ebd626f84b2" translate="yes" xml:space="preserve">
          <source>Timestamp.normalize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859fed4196f469a3bb9bdf71ea1e13034f1e6f8e" translate="yes" xml:space="preserve">
          <source>Timestamp.now()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8721587b6bde3f6ce3b9ea13ffe6ba2a82dbce6a" translate="yes" xml:space="preserve">
          <source>Timestamp.quarter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47ddd7346038910f9e027331fcf0c9a75a85bb0" translate="yes" xml:space="preserve">
          <source>Timestamp.replace()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edecd9b84c3b07d721eecde7a76c3f9732489448" translate="yes" xml:space="preserve">
          <source>Timestamp.resolution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce984acec782b4f40e02c7e5b846bb69af4611a" translate="yes" xml:space="preserve">
          <source>Timestamp.round()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57891355260c3a4fc5bef7ba0c09e49ccbf36b3a" translate="yes" xml:space="preserve">
          <source>Timestamp.second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98feb16f76cae5de9a5cdd61a1498cea6381eda" translate="yes" xml:space="preserve">
          <source>Timestamp.strftime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7825ef239b195379d5a70af1c8a16e8a0614e730" translate="yes" xml:space="preserve">
          <source>Timestamp.strptime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c25c2fc4d49bc47aebdf4f96ce51b73833b3798" translate="yes" xml:space="preserve">
          <source>Timestamp.time()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3a48760017c4fe5ea4362823d4a383896d4285" translate="yes" xml:space="preserve">
          <source>Timestamp.timestamp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99090d3fdc2e490489ccb7506c34511931b3e345" translate="yes" xml:space="preserve">
          <source>Timestamp.timetuple()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d21124baeaa9f26eba49b25241431ef0fac995" translate="yes" xml:space="preserve">
          <source>Timestamp.timetz()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408f797124733627bddfe629ce8c775e96c74728" translate="yes" xml:space="preserve">
          <source>Timestamp.to_datetime64()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124e41084941b2a52a22852db1cd87594780270c" translate="yes" xml:space="preserve">
          <source>Timestamp.to_julian_date()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a161afc645ff2ecbe54a27828a1357a209ee55" translate="yes" xml:space="preserve">
          <source>Timestamp.to_numpy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e7183e3b74682015ee97d6372c18b4a89cb5c3" translate="yes" xml:space="preserve">
          <source>Timestamp.to_period()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af87c2b6d990709da9f56369fd9090c91c53002" translate="yes" xml:space="preserve">
          <source>Timestamp.to_pydatetime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8771c03a6884616a44a2dbdc8ff065b21f52afb1" translate="yes" xml:space="preserve">
          <source>Timestamp.today()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01deb30ddb85ebcfe3b291be463a8148f113f7d0" translate="yes" xml:space="preserve">
          <source>Timestamp.toordinal()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e97baa329202f5634f17e2ebac4f478913e2bf2" translate="yes" xml:space="preserve">
          <source>Timestamp.tz</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180392b6d14ee7b1aaa3ef2d2a25a51647cc7467" translate="yes" xml:space="preserve">
          <source>Timestamp.tz_convert()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13c6c07cd5d90d56ccbc214355953f015bb538f" translate="yes" xml:space="preserve">
          <source>Timestamp.tz_localize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c0959feedce9923bc744a36b15cfd90d27e0ce" translate="yes" xml:space="preserve">
          <source>Timestamp.tzinfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1feb867bd92261f5398b086a9cc86b84baa90764" translate="yes" xml:space="preserve">
          <source>Timestamp.tzname()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641fc28421346449b43285e973aacd86f6a595af" translate="yes" xml:space="preserve">
          <source>Timestamp.utcfromtimestamp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85a4af62853cbbed4ccd9c50c0c5855a298a8c3" translate="yes" xml:space="preserve">
          <source>Timestamp.utcnow()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90289f8697b8fabf9bbe37c06abbdf6c8f49fbb2" translate="yes" xml:space="preserve">
          <source>Timestamp.utcoffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00023bbd488ba3b2cb9cef5808f33ba8cb145cd9" translate="yes" xml:space="preserve">
          <source>Timestamp.utctimetuple()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cc36d6b17b48a44b5904423887bac1068d5049" translate="yes" xml:space="preserve">
          <source>Timestamp.value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766cd7d1a93328d0b2a74d841605ed54b8242c40" translate="yes" xml:space="preserve">
          <source>Timestamp.week</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72deaac95aa9cf7c95aa455bcfafab61f56fd87e" translate="yes" xml:space="preserve">
          <source>Timestamp.weekday()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb09d90e61d1073149bc985c7732347e5c0f3b14" translate="yes" xml:space="preserve">
          <source>Timestamp.weekday_name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef07a570fbd97e58573039b27ce5aa348105485d" translate="yes" xml:space="preserve">
          <source>Timestamp.weekofyear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad86c8ad06117367ce1996a116d23a8ba16aac8f" translate="yes" xml:space="preserve">
          <source>Timestamp.year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba269e33ebd7242ae5645829dfde7fa0ee0c701" translate="yes" xml:space="preserve">
          <source>Timestamps vs. Time Spans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf3b8d9a40ca56d940581ac78edfd7564bee94a" translate="yes" xml:space="preserve">
          <source>Timezone aware datetime columns will be written as &lt;code&gt;Timestamp with timezone&lt;/code&gt; type with SQLAlchemy if supported by the database. Otherwise, the datetimes will be stored as timezone unaware timestamps local to the original timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d77147448366d3dfeb9684f13455422a30c81a6" translate="yes" xml:space="preserve">
          <source>Timezone aware datetime data is converted to UTC:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99251367becb28e3e26f725d4414f093993eeb8" translate="yes" xml:space="preserve">
          <source>Timezone for converting datetime64 data to Periods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917bb2e62b8f570c4e66ba455c10b16dd323c1e9" translate="yes" xml:space="preserve">
          <source>Timezone information is retained if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2776cc5f42ec83e6f2e4706b518d965979e2723e" translate="yes" xml:space="preserve">
          <source>Timezone to localize to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a609a0d8c2c7c2aec996dfdfbf611c89b3dcd3d5" translate="yes" xml:space="preserve">
          <source>Tips for getting your examples pass the doctests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e02fce0228a8e9ae82f747c20b6518515f7a4f9" translate="yes" xml:space="preserve">
          <source>To apply to each group. Should return a Series with the same index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89819f88fd4718c15c82921a736771f81e0494d" translate="yes" xml:space="preserve">
          <source>To avoid applying the function to missing values (and keep them as &lt;code&gt;NaN&lt;/code&gt;) &lt;code&gt;na_action='ignore'&lt;/code&gt; can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9b1e6fdd2c382b7f755b2d95b8b9e4e581189e" translate="yes" xml:space="preserve">
          <source>To be passed to hist function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d187501b56d2ccaaca17b1aaf8b02733684ad9" translate="yes" xml:space="preserve">
          <source>To be passed to kernel density estimate plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaeb720173ed0d873d7113e8f58b7a84516622c5" translate="yes" xml:space="preserve">
          <source>To be passed to scatter function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5c7e4edcb6f146b434527a8427fc470624ff2f" translate="yes" xml:space="preserve">
          <source>To be passed to the actual plotting function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01766d5de68d241d4424b6f76368e40013d1f67e" translate="yes" xml:space="preserve">
          <source>To benefit from using &lt;a href=&quot;../reference/api/pandas.eval#pandas.eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; you need to install &lt;code&gt;numexpr&lt;/code&gt;. See the &lt;a href=&quot;../install#install-recommended-dependencies&quot;&gt;recommended dependencies section&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227a9b7c1712eb78a595847176d5c667779490da" translate="yes" xml:space="preserve">
          <source>To check across the levels of a MultiIndex, pass a list of tuples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0f910ab11a661d8b5d684495993db79815efaf" translate="yes" xml:space="preserve">
          <source>To compute the mode over columns and not rows, use the axis parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc327bd3006fa34acc4c2df0e7d808804f77bd93" translate="yes" xml:space="preserve">
          <source>To construct an IntegerArray from generic array-like input, use &lt;a href=&quot;pandas.array#pandas.array&quot;&gt;&lt;code&gt;pandas.array()&lt;/code&gt;&lt;/a&gt; with one of the integer dtypes (see examples).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b91af9ac3331fd2dd8189bc31c6bc070254860a" translate="yes" xml:space="preserve">
          <source>To create a time interval you can use Timestamps as the bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6e73835e97716ef64c9f08c3147dcf9d2cd812" translate="yes" xml:space="preserve">
          <source>To display only the last component of the linked class, method or function, prefix it with &lt;code&gt;~&lt;/code&gt;. For example, &lt;code&gt;:class:`~pandas.Series`&lt;/code&gt; will link to &lt;code&gt;pandas.Series&lt;/code&gt; but only display the last part, &lt;code&gt;Series&lt;/code&gt; as the link text. See &lt;a href=&quot;https://www.sphinx-doc.org/en/stable/domains.html#cross-referencing-syntax&quot;&gt;Sphinx cross-referencing syntax&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c4eb3dc3c9572ee2bf9d3d2065c0ee47faa096" translate="yes" xml:space="preserve">
          <source>To do this, you need to &amp;ldquo;merge upstream master&amp;rdquo; in your branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406c85883a0ae10baec610e677ec85cde1866d56" translate="yes" xml:space="preserve">
          <source>To enforce a single dtype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd690f8dcaed241715ebe8c092cb1c086569026" translate="yes" xml:space="preserve">
          <source>To further illustrate the filling functionality in &lt;code&gt;reindex&lt;/code&gt;, we will create a dataframe with a monotonically increasing index (for example, a sequence of dates).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e0b8adaad5c617e1a38c53de0b28bbf15bd943" translate="yes" xml:space="preserve">
          <source>To generate a new Series with the default set &lt;code&gt;drop&lt;/code&gt; to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a90c92a3ec3b00ab51a55bc295b889227b11fc3" translate="yes" xml:space="preserve">
          <source>To get horizontal bar plots, use the &lt;code&gt;barh&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cca41c8c2ff6efefdd4f7febf697650e7054677" translate="yes" xml:space="preserve">
          <source>To get the difference between each 2-day period&amp;rsquo;s maximum and minimum value in one pass, you can do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7af73481c2190b698313bd665a30c51eb7a95a" translate="yes" xml:space="preserve">
          <source>To get the difference between each groups maximum and minimum value in one pass, you can do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4652462a5f45246259c866dbee701a9e9e55524a" translate="yes" xml:space="preserve">
          <source>To get the idea:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e863d784b5a03faf04fcdc6b2c9002dacf6371" translate="yes" xml:space="preserve">
          <source>To give an intuition on what can be considered related, here there are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7048b5becc2f335858472826e5424435fe7956" translate="yes" xml:space="preserve">
          <source>To include NA values in the operation, use &lt;code&gt;skipna=False&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b74e095b4f1c910180fa76ca70a29c5b1ffa1e" translate="yes" xml:space="preserve">
          <source>To install a specific pandas version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3bc76af25455ec2f386a47a3088f42530cea6b" translate="yes" xml:space="preserve">
          <source>To install asv:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da403b659360d2ea0e0b44186932641486e3d553" translate="yes" xml:space="preserve">
          <source>To install other packages, IPython for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6f3ade4cce767645ca424c7349eb16e036bab8" translate="yes" xml:space="preserve">
          <source>To install the full &lt;a href=&quot;http://docs.continuum.io/anaconda/&quot;&gt;Anaconda&lt;/a&gt; distribution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cdac8648df57542f9b3a3fb0900a98c16bb4b2" translate="yes" xml:space="preserve">
          <source>To iterate over columns and find the maximum in each row, use &lt;code&gt;axis=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f688a397f6135e4b026419ccfd47f555078f10b" translate="yes" xml:space="preserve">
          <source>To iterate over columns and find the minimum in each row, use &lt;code&gt;axis=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d9a3abdb236eb785acaa248e763d34ef8caae6" translate="yes" xml:space="preserve">
          <source>To iterate over columns and find the product in each row, use &lt;code&gt;axis=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816b17d60920fd00d9d183cc068a2f61cc64dd96" translate="yes" xml:space="preserve">
          <source>To iterate over columns and find the sum in each row, use &lt;code&gt;axis=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2eaace0fd2906a36bac78c35cb5f56a2163de53" translate="yes" xml:space="preserve">
          <source>To keep the Pandas test suite running quickly, parametrized tests are preferred if the inputs or logic are simple, with Hypothesis tests reserved for cases with complex logic or where there are too many combinations of options or subtle interactions to test (or think of!) all of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdd8a1b20d5b6001db744f214c681b43c7962fe" translate="yes" xml:space="preserve">
          <source>To learn more about categories, see &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning&quot;&gt;link&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbbe7305bfdabda4a8c6cec78a442537749bb31" translate="yes" xml:space="preserve">
          <source>To learn more about datetime-like frequency strings, please see &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&quot;&gt;this link&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc544c582e2aa5ce0d1ddf92335ea464575b468" translate="yes" xml:space="preserve">
          <source>To learn more about the frequency strings, please see &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&quot;&gt;this link&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d323b4dbfdf7b6a9998acfdaf390579844bb32ee" translate="yes" xml:space="preserve">
          <source>To learn more about the offset strings, please see &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects&quot;&gt;this link&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3622b61e4ec0af4504c883be7e8b3c9b26b6f6" translate="yes" xml:space="preserve">
          <source>To learn more about the offsets &amp;amp; frequency strings, please see &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases&quot;&gt;this link&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5871e2be1bb6d80f7eb244410d47d10309606ef4" translate="yes" xml:space="preserve">
          <source>To let original data structures have additional properties, you should let &lt;code&gt;pandas&lt;/code&gt; know what properties are added. &lt;code&gt;pandas&lt;/code&gt; maps unknown properties to data names overriding &lt;code&gt;__getattribute__&lt;/code&gt;. Defining original properties can be done in one of 2 ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f477d0576dba285470dd1b6daf99212c0d4872b5" translate="yes" xml:space="preserve">
          <source>To make detecting missing values easier (and across different array dtypes), pandas provides the &lt;a href=&quot;../reference/api/pandas.isna#pandas.isna&quot;&gt;&lt;code&gt;isna()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/api/pandas.notna#pandas.notna&quot;&gt;&lt;code&gt;notna()&lt;/code&gt;&lt;/a&gt; functions, which are also methods on Series and DataFrame objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2894821d304c6feb35838be7c87d0578db6e307" translate="yes" xml:space="preserve">
          <source>To make your commits compliant with this standard, you can install the &lt;a href=&quot;http://clang.llvm.org/docs/ClangFormat.html&quot;&gt;ClangFormat&lt;/a&gt; tool, which can be downloaded &lt;a href=&quot;http://llvm.org/builds/&quot;&gt;here&lt;/a&gt;. To configure, in your home directory, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95013ca38f50985aa8422fad85c591e0c1c1282" translate="yes" xml:space="preserve">
          <source>To order by the largest values in column &amp;ldquo;a&amp;rdquo; and then &amp;ldquo;c&amp;rdquo;, we can specify multiple columns like in the next example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9132ce06e9d7651bbd9bbe14dc66b30c4bf4caf" translate="yes" xml:space="preserve">
          <source>To order by the largest values in column &amp;ldquo;population&amp;rdquo; and then &amp;ldquo;GDP&amp;rdquo;, we can specify multiple columns like in the next example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ed19929e37add13a7dc30a6806acbccdd66f1b" translate="yes" xml:space="preserve">
          <source>To override the name of the resulting column, specify &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29081492e58f309e14379389a3ce1257015c67a" translate="yes" xml:space="preserve">
          <source>To partition by something different than a space:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2217493d067c0e79d3144d65df5dccbc6d86122" translate="yes" xml:space="preserve">
          <source>To partition by the last space instead of the first one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dceec10d0ad72679090eb2dd43564aee4e6c3645" translate="yes" xml:space="preserve">
          <source>To preserve dtypes while iterating over the rows, it is better to use &lt;a href=&quot;pandas.dataframe.itertuples#pandas.DataFrame.itertuples&quot;&gt;&lt;code&gt;itertuples()&lt;/code&gt;&lt;/a&gt; which returns namedtuples of the values and which is generally faster than &lt;code&gt;iterrows&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ffc7b53af9f6a6ece23933f33d630a07426a09" translate="yes" xml:space="preserve">
          <source>To produce a stacked bar plot, pass &lt;code&gt;stacked=True&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37be07ebbadde1f184157fe5a2011ac27dfe74e4" translate="yes" xml:space="preserve">
          <source>To remove a specific level from the Index, use &lt;code&gt;level&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bcd9a8b7d7ee6313c65b3050b1db05f9caa2e8" translate="yes" xml:space="preserve">
          <source>To return a Series containing tuples instead of a DataFrame:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51622ca88bb987fbed05bf53c87b2119a96f67be" translate="yes" xml:space="preserve">
          <source>To return to your root environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f28811e5d1d70510fd4fc9dcde76b5e3c370f9" translate="yes" xml:space="preserve">
          <source>To run the tool on an entire directory, you can run the following analogous commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5004c8b82da0da8260452f70b55fd824ec6557db" translate="yes" xml:space="preserve">
          <source>To select Pandas categorical dtypes, use &lt;code&gt;'category'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a52739709a49b19a7a15593e3f442a5e803acc" translate="yes" xml:space="preserve">
          <source>To select Pandas datetimetz dtypes, use &lt;code&gt;'datetimetz'&lt;/code&gt; (new in 0.20.0) or &lt;code&gt;'datetime64[ns, tz]'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd4acfa205316e985d02a0c62bfb8cccd6eb56e" translate="yes" xml:space="preserve">
          <source>To select all &lt;em&gt;numeric&lt;/em&gt; types, use &lt;code&gt;np.number&lt;/code&gt; or &lt;code&gt;'number'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06c189f2a106e2da74f68b0cf4d91e0f0c27e5e" translate="yes" xml:space="preserve">
          <source>To select datetimes, use &lt;code&gt;np.datetime64&lt;/code&gt;, &lt;code&gt;'datetime'&lt;/code&gt; or &lt;code&gt;'datetime64'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3264423bb91acf32073dec6bcba7ffa4b56305e" translate="yes" xml:space="preserve">
          <source>To select out everything for variable &lt;code&gt;A&lt;/code&gt; we could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d861fbe1d6f16c4d4c36baaf7f11ed6dfc168134" translate="yes" xml:space="preserve">
          <source>To select strings you must use the &lt;code&gt;object&lt;/code&gt; dtype, but note that this will return &lt;em&gt;all&lt;/em&gt; object dtype columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2b5bb6b93009f5f5eb89ee4949c1625547bf56" translate="yes" xml:space="preserve">
          <source>To select timedeltas, use &lt;code&gt;np.timedelta64&lt;/code&gt;, &lt;code&gt;'timedelta'&lt;/code&gt; or &lt;code&gt;'timedelta64'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cab342189112b42be5b0013ead5228c6979475b" translate="yes" xml:space="preserve">
          <source>To set the library that is used to write the Excel file, you can pass the &lt;code&gt;engine&lt;/code&gt; keyword (the default engine is automatically chosen depending on the file extension):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015c372b912bdaace9fcf093ad2b1a45cfdb6715" translate="yes" xml:space="preserve">
          <source>To specify the name of the new column use &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110822fbc5c9d15237a05b6139b567a48ad4915d" translate="yes" xml:space="preserve">
          <source>To specify the sheet name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c31fd3db22b4fb1d60356ed55730886780d1ef4" translate="yes" xml:space="preserve">
          <source>To test out code changes, you&amp;rsquo;ll need to build pandas from source, which requires a C compiler and Python environment. If you&amp;rsquo;re making documentation changes, you can skip to &lt;a href=&quot;#contributing-documentation&quot;&gt;Contributing to the documentation&lt;/a&gt; but you won&amp;rsquo;t be able to build the documentation locally before pushing your changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc47acd7cea87c576631eb9f7f9b88b3f5df1df7" translate="yes" xml:space="preserve">
          <source>To the new user, working with Git is one of the more daunting aspects of contributing to &lt;em&gt;pandas&lt;/em&gt;. It can very quickly become overwhelming, but sticking to the guidelines below will help keep the process straightforward and mostly trouble free. As always, if you are having difficulties please feel free to ask for help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cc4f1be069dbe799fcb80219cb3af57cef45e6" translate="yes" xml:space="preserve">
          <source>To update the Series in place, without generating a new one set &lt;code&gt;inplace&lt;/code&gt; to True. Note that it also requires &lt;code&gt;drop=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfb8fa2fbfddc00c35b9611ae3d7de3d6237f11" translate="yes" xml:space="preserve">
          <source>To use a test, subclass it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aed6ab03dacb8bf65078e0e19f6a5b67a6b6120" translate="yes" xml:space="preserve">
          <source>To use all features of asv, you will need either &lt;code&gt;conda&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt;. For more details please check the &lt;a href=&quot;https://asv.readthedocs.io/en/latest/installing.html&quot;&gt;asv installation webpage&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aae57d8c9a0edab21bc22abec1ebf0b513dc7e2" translate="yes" xml:space="preserve">
          <source>To use it, place the next code after the &amp;ldquo;Examples&amp;rdquo; header as shown below. The plot will be generated automatically when building the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a22daeecb3117dbb286c45dd113d3761129297" translate="yes" xml:space="preserve">
          <source>To use pandas&amp;rsquo; nullable &lt;a href=&quot;pandas.arrays.integerarray#pandas.arrays.IntegerArray&quot;&gt;&lt;code&gt;pandas.arrays.IntegerArray&lt;/code&gt;&lt;/a&gt;, specify the dtype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19279d13f034638ee9e3bf7ab582679d4631b43" translate="yes" xml:space="preserve">
          <source>To view a small sample of a Series or DataFrame object, use the &lt;a href=&quot;../reference/api/pandas.dataframe.head#pandas.DataFrame.head&quot;&gt;&lt;code&gt;head()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/api/pandas.dataframe.tail#pandas.DataFrame.tail&quot;&gt;&lt;code&gt;tail()&lt;/code&gt;&lt;/a&gt; methods. The default number of elements to display is five, but you may pass a custom number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d8592e92650c4d711742c87dd5a1feba7ddbd0" translate="yes" xml:space="preserve">
          <source>To view your environments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87edce1fb3af1c13d7a4b37011099b51cf990914" translate="yes" xml:space="preserve">
          <source>To write a single Styler to an Excel .xlsx file it is only necessary to specify a target file name. To write to multiple sheets it is necessary to create an &lt;code&gt;ExcelWriter&lt;/code&gt; object with a target file name, and specify a sheet in the file to write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c914b4246f0fb60596569ed0a47f40b9dff4137" translate="yes" xml:space="preserve">
          <source>To write a single object to an Excel .xlsx file it is only necessary to specify a target file name. To write to multiple sheets it is necessary to create an &lt;code&gt;ExcelWriter&lt;/code&gt; object with a target file name, and specify a sheet in the file to write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0735e3dcf490ae1ea7b44492fa5422de1793c727" translate="yes" xml:space="preserve">
          <source>To write to separate sheets in a single file:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
