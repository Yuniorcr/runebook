<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/k0dasm/">
    <body>
      <group id="k0dasm">
        <trans-unit id="a36abd240d4fced49d5e073136718ece787d8d3c" translate="yes" xml:space="preserve">
          <source>) will still need to be resolved manually.</source>
          <target state="translated">）仍需要手动解决。</target>
        </trans-unit>
        <trans-unit id="5fda23d62015b99fb2a9f86b38bcdf2bdf7609c8" translate="yes" xml:space="preserve">
          <source>Author</source>
          <target state="translated">撰稿人</target>
        </trans-unit>
        <trans-unit id="92e5f3778e6f41bd90cfde8d9ba37c348715ef61" translate="yes" xml:space="preserve">
          <source>Code / Data Separation.  Starting from the vectors at the bottom of memory, k0dasm uses recursive traversal disassembly to separate code from data.  This automates much of the disassembly process but indirect jumps (</source>
          <target state="translated">代码/数据分离。从内存底部的向量开始,k0dasm使用递归遍历分解来分离代码和数据。这使得大部分的反汇编过程自动化,但是间接跳转(</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">特点</target>
        </trans-unit>
        <trans-unit id="e99f3ac80b2b2350f2e51853d26bb1447dd0afda" translate="yes" xml:space="preserve">
          <source>Identical Reassembly.  The assembly language output of k0dasm will assemble to a bit-for-bit exact copy of the original binary using as78k0.  This has been tested using several real firmware binaries.</source>
          <target state="translated">相同的重新组装。k0dasm的汇编语言输出将使用as78k0组装成原始二进制的位对位的精确拷贝。这已经用几个真实的固件二进制文件进行了测试。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="ef794089d65c29260193d1171143c513c37dd853" translate="yes" xml:space="preserve">
          <source>Mike Naberezny</source>
          <target state="translated">Mike Naberezny</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概述</target>
        </trans-unit>
        <trans-unit id="184aae6f77608718224c424e74717a6de967207d" translate="yes" xml:space="preserve">
          <source>Renesas (NEC) 78K0 disassembler</source>
          <target state="translated">瑞萨(NEC)78K0拆解器</target>
        </trans-unit>
        <trans-unit id="c611e7531edc5ad06854e7aa8c370fa7c7df38ae" translate="yes" xml:space="preserve">
          <source>Symbol Generation.  k0dasm tries not to write hardcoded addresses in the output when possible.  It will automatically add symbols for hardware registers and vectors, other memory locations used, and will add labels for branches and subroutines.</source>
          <target state="translated">k0dasm尽量不在输出中写硬编码地址。它将自动为硬件寄存器和向量、其他使用的内存位置添加符号,并为分支和子程序添加标签。</target>
        </trans-unit>
        <trans-unit id="887bd25b814c2ea33c2020e1ae14e08e3e41ab2c" translate="yes" xml:space="preserve">
          <source>The file is assumed to be a ROM image that should be aligned to the bottom of memory.  For example, if a 32K file is given, k0dasm will assume the image should be located at 0x0000-0x7FFF.  After loading the image, the disassembler reads the vectors and starts tracing instructions from their targets.</source>
          <target state="translated">文件被假定为ROM映像,应该与内存的底部对齐。例如,如果给定一个32K的文件,k0dasm将假定映像应该位于0x0000-0x7FFF。加载映像后,反汇编器读取向量,并从目标开始追踪指令。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="83889f5663f7f860486c3e9bfe18177eff6db2cd" translate="yes" xml:space="preserve">
          <source>br ax</source>
          <target state="translated">斧头</target>
        </trans-unit>
        <trans-unit id="5839dc65065f115602262aa635fbf67791899625" translate="yes" xml:space="preserve">
          <source>k0dasm</source>
          <target state="translated">k0dasm</target>
        </trans-unit>
        <trans-unit id="9e53567246f36fc5e20142d5b92badeead00b4a5" translate="yes" xml:space="preserve">
          <source>k0dasm accepts a plain binary file as input:</source>
          <target state="translated">k0dasm接受一个纯二进制文件作为输入。</target>
        </trans-unit>
        <trans-unit id="adaa751be62a63905f2aad7b6a93a8813858eb2b" translate="yes" xml:space="preserve">
          <source>k0dasm is a disassembler for NEC 78K0 binaries that generates output compatible with the &lt;a href=&quot;http://shop-pdp.net/ashtml/as78k0.htm&quot;&gt;as78k0&lt;/a&gt; assembler.  It can be used to disassemble firmware for many 8-bit NEC 78K0 microcontrollers.  Note that NEC has several microcontroller families with similar names, such as 78K0S, that use different instruction sets.  These are not supported.</source>
          <target state="translated">k0dasm是NEC 78K0二进制文件的&lt;a href=&quot;http://shop-pdp.net/ashtml/as78k0.htm&quot;&gt;反&lt;/a&gt;汇编程序，可生成与as78k0汇编程序兼容的输出。它可用于拆卸许多8位NEC 78K0微控制器的固件。注意，NEC有几个名称相似的微控制器系列，例如78K0S，它们使用不同的指令集。不支持这些。</target>
        </trans-unit>
        <trans-unit id="c5d0b1d900eca0713b3f5d6e97a3ee2a22b52e92" translate="yes" xml:space="preserve">
          <source>k0dasm is written in Python and requires Python 3.4 or later.  Packages are &lt;a href=&quot;https://pypi.org/project/k0dasm/&quot;&gt;available&lt;/a&gt; on the Python Package Index (PyPI).  You can download them from there or you can use</source>
          <target state="translated">k0dasm用Python编写，需要Python 3.4或更高版本。软件包在Python软件包索引（PyPI）上&lt;a href=&quot;https://pypi.org/project/k0dasm/&quot;&gt;可用&lt;/a&gt;。您可以从那里下载它们，也可以使用</target>
        </trans-unit>
        <trans-unit id="2a2a6fadee5f4ff99025989aec099e65c85077c0" translate="yes" xml:space="preserve">
          <source>k0dasm was developed to disassemble the firmware of the &lt;a href=&quot;https://github.com/mnaberez/vwradio&quot;&gt;Volkswagen Premium V&lt;/a&gt; car radios made by Delco.  These radios use the undocumented NEC &amp;micro;PD78F0831Y microcontroller, which is similar to the &lt;a href=&quot;https://web.archive.org/web/20180328161019/https://www.renesas.com/en-us/doc/DocumentServer/021/U13892EJ2V0UM00.pdf&quot;&gt;&amp;micro;PD78F0833Y&lt;/a&gt;.  A companion program, &lt;a href=&quot;https://github.com/mnaberez/k0emu&quot;&gt;k0emu&lt;/a&gt;, is a 78K0 emulator developed for the same project.</source>
          <target state="translated">k0dasm的开发是为了分解Delco生产的&lt;a href=&quot;https://github.com/mnaberez/vwradio&quot;&gt;Volkswagen Premium V&lt;/a&gt;汽车收音机的固件。这些无线电使用未公开的NEC &amp;micro;PD78F0831Y微控制器，该微控制器与&lt;a href=&quot;https://web.archive.org/web/20180328161019/https://www.renesas.com/en-us/doc/DocumentServer/021/U13892EJ2V0UM00.pdf&quot;&gt;&amp;micro;PD78F0833Y&lt;/a&gt;相似。伴随程序&lt;a href=&quot;https://github.com/mnaberez/k0emu&quot;&gt;k0emu&lt;/a&gt;是为同一项目开发的78K0仿真器。</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">pip</target>
        </trans-unit>
        <trans-unit id="4fdadaadb6acd13e89b1e933e596f13897f901f6" translate="yes" xml:space="preserve">
          <source>to automatically install or upgrade</source>
          <target state="translated">自动安装或升级</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
