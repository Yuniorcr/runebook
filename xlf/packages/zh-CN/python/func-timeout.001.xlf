<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/func-timeout/">
    <body>
      <group id="func-timeout">
        <trans-unit id="feee6a54136f547b5b223ea01ea22ddd16752062" translate="yes" xml:space="preserve">
          <source># Code here</source>
          <target state="translated">＃代码在这里</target>
        </trans-unit>
        <trans-unit id="e68023cd09f756d57b4d6e241204e2ab723be088" translate="yes" xml:space="preserve">
          <source># Handle any exceptions that doit might raise here</source>
          <target state="translated">＃处理doit可能引发的任何异常</target>
        </trans-unit>
        <trans-unit id="a36178640e22cbfc2d65c319364d9167eaafd809" translate="yes" xml:space="preserve">
          <source># Uncomment next line to start thread in &amp;ldquo;daemon mode&amp;rdquo; &amp;ndash; i.e. will terminate/join automatically upon main thread exit</source>
          <target state="translated">＃取消注释以&amp;ldquo;守护程序模式&amp;rdquo;启动线程的下一行-即在主线程退出时自动终止/加入</target>
        </trans-unit>
        <trans-unit id="275eeebecf558e4aea38b60e24254c43efbe1b41" translate="yes" xml:space="preserve">
          <source>#myThread.daemon = True</source>
          <target state="translated">＃myThread.daemon =真</target>
        </trans-unit>
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="d2187e63645ef4bb3f26e2fb34dce39becd241df" translate="yes" xml:space="preserve">
          <source>&amp;lsquo;&amp;rsquo;&amp;rsquo;</source>
          <target state="translated">'''</target>
        </trans-unit>
        <trans-unit id="b8b3c85833b691944d6333b2a187ace95545f9a1" translate="yes" xml:space="preserve">
          <source>* No argument - Retry same args, same function, same timeout</source>
          <target state="translated">*无参数-重试相同的参数，相同的函数，相同的超时</target>
        </trans-unit>
        <trans-unit id="23aa718e7e7ad48c68768019e7e4ec2ee93b2a54" translate="yes" xml:space="preserve">
          <source>* None - Retry same args, same function, no timeout</source>
          <target state="translated">*无-重试相同的参数，相同的功能，无超时</target>
        </trans-unit>
        <trans-unit id="c10c25328ef4d57b12a00c84012aab2456cc9f3b" translate="yes" xml:space="preserve">
          <source>* Number argument - Retry same args, same function, provided timeout</source>
          <target state="translated">* Number参数-重试相同的参数，相同的函数，提供的超时</target>
        </trans-unit>
        <trans-unit id="309927097440c7f76f70fcb6b11e98329ae23db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a Parent Class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;作为家长班&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f8aa0ed92b246136317387a1baf277f343cdbf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Direct Thread To Execute A Function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;直接线程执行功能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb48907b580ebd035cde20253b39011836f211b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes on Exception Type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;关于异常类型的注意事项&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c99b14cc2a1e2f3a8efed4682ec12293b3494c36" translate="yes" xml:space="preserve">
          <source>@func_set_timeout(2.5)</source>
          <target state="translated">@func_set_timeout（2.5）</target>
        </trans-unit>
        <trans-unit id="c7a0970f989fa5ef2b54661eda5c630da4545bc6" translate="yes" xml:space="preserve">
          <source>@param args    &amp;lt;tuple&amp;gt; - Any ordered arguments to pass to the function</source>
          <target state="translated">@param args &amp;lt;tuple&amp;gt;-传递给函数的任何有序参数</target>
        </trans-unit>
        <trans-unit id="4ea60d53ee1449ad95b704a34f51fb8a3d90d9ef" translate="yes" xml:space="preserve">
          <source>@param exception &amp;lt;Exception type&amp;gt; - Exception to throw. Likely, you want to use something</source>
          <target state="translated">@param异常&amp;lt;Exception type&amp;gt;-引发的异常。您可能想使用一些东西</target>
        </trans-unit>
        <trans-unit id="6cb16a85fff57f4e4d38262597e41a2f59d90fb5" translate="yes" xml:space="preserve">
          <source>@param func &amp;lt;function&amp;gt; - The function to call</source>
          <target state="translated">@param func &amp;lt;函数&amp;gt;-要调用的函数</target>
        </trans-unit>
        <trans-unit id="35390e8a89b0942498fae834d5992b00f625480f" translate="yes" xml:space="preserve">
          <source>@param kwargs  &amp;lt;dict/None&amp;gt; - Keyword arguments to pass to the function.</source>
          <target state="translated">@param kwargs &amp;lt;dict / None&amp;gt;-传递给函数的关键字参数。</target>
        </trans-unit>
        <trans-unit id="ef18d87a32f160cb292de0290a036a455e7cc431" translate="yes" xml:space="preserve">
          <source>@param raiseEvery &amp;lt;float&amp;gt; Default 2.0 - We will keep raising this exception every #raiseEvery seconds,</source>
          <target state="translated">@param raiseEvery &amp;lt;float&amp;gt;默认值2.0-我们将每#raiseEvery秒持续发出一次此异常，</target>
        </trans-unit>
        <trans-unit id="50b7eb667bb071740b4afff9f4b8729d4327662a" translate="yes" xml:space="preserve">
          <source>@param timeout &amp;lt;float&amp;gt; - Maximum number of seconds to run #func# before terminating</source>
          <target state="translated">@param timeout &amp;lt;float&amp;gt;-终止前运行＃func＃的最大秒数</target>
        </trans-unit>
        <trans-unit id="b0c07ea97f78c45cc7ea0926ab2640e6c40d98af" translate="yes" xml:space="preserve">
          <source>@raises - FunctionTimedOut if #timeout# is exceeded, otherwise anything #func# could raise will be raised</source>
          <target state="translated">@raises-如果超过了＃timeout＃，则会抛出FunctionTimedOut，否则将引发＃func＃可能引发的任何问题</target>
        </trans-unit>
        <trans-unit id="0659ba6686518e2a7ce04bb5f4309a7d923045b6" translate="yes" xml:space="preserve">
          <source>@return &amp;lt;None&amp;gt;</source>
          <target state="translated">@return &amp;lt;无&amp;gt;</target>
        </trans-unit>
        <trans-unit id="467ba344eec003a5ff0fc569fc2a10f5a561174b" translate="yes" xml:space="preserve">
          <source>@return - The return value that #func# gives</source>
          <target state="translated">@return-＃func＃给出的返回值</target>
        </trans-unit>
        <trans-unit id="100d77de8173ea5e368d9c0cb6d295e8c4cee7b5" translate="yes" xml:space="preserve">
          <source>Alternatively, you can instantiate StoppableThread directly and pass the &amp;ldquo;target&amp;rdquo;, &amp;ldquo;args&amp;rdquo;, and &amp;ldquo;kwargs&amp;rdquo; arguments to the constructor</source>
          <target state="translated">另外，您可以直接实例化StoppableThread并将&amp;ldquo; target&amp;rdquo;，&amp;ldquo; args&amp;rdquo;和&amp;ldquo; kwargs&amp;rdquo;参数传递给构造函数</target>
        </trans-unit>
        <trans-unit id="8bff82bd190b9c2d124fa8b1c94f00ff3a5c15b1" translate="yes" xml:space="preserve">
          <source>BaseException.__init__(self, &amp;lsquo;Server is shutting down&amp;rsquo;)</source>
          <target state="translated">BaseException .__ init __（自身，&amp;ldquo;服务器正在关闭&amp;rdquo;）</target>
        </trans-unit>
        <trans-unit id="54a09183a92bb78d8025aac71327b4f225b065a5" translate="yes" xml:space="preserve">
          <source>ChangeLog can be found at &lt;a href=&quot;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&quot;&gt;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&lt;/a&gt;</source>
          <target state="translated">可以在&lt;a href=&quot;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&quot;&gt;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog中&lt;/a&gt;找到ChangeLog</target>
        </trans-unit>
        <trans-unit id="4f10e3d40f7b6fe8af9732eb3b3b2f1718b656d2" translate="yes" xml:space="preserve">
          <source>Consider using a custom exception type which extends BaseException, which you can then use to do basic cleanup ( flush any open files, etc. ).</source>
          <target state="translated">考虑使用一个自定义的异常类型,它扩展了BaseException,然后你可以用它来做基本的清理工作(刷新任何打开的文件等)。</target>
        </trans-unit>
        <trans-unit id="cb5e98805e8916222733f2479eaf75dfa868942d" translate="yes" xml:space="preserve">
          <source>Exception raised if the function times out.</source>
          <target state="translated">如果函数超时,则发出异常。</target>
        </trans-unit>
        <trans-unit id="d6cd60a74a862ce4794d712691e5036e182599bf" translate="yes" xml:space="preserve">
          <source>Find the latest pydoc at &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&lt;/a&gt;?vers=4.3.5 .</source>
          <target state="translated">在&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html？vers&lt;/a&gt; = 4.3.5中找到最新的pydoc 。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="9bd21f858ad515e347536489b8e6aa92b8321745" translate="yes" xml:space="preserve">
          <source>Function Timeout</source>
          <target state="translated">功能超时</target>
        </trans-unit>
        <trans-unit id="38135db3327312ca8905b3043a3204cddd31c084" translate="yes" xml:space="preserve">
          <source>FunctionTimedOut</source>
          <target state="translated">功能定时输出(FunctionTimedOut)</target>
        </trans-unit>
        <trans-unit id="8888b0b6ee750b5c3fd635edd38d064a0d74cf44" translate="yes" xml:space="preserve">
          <source>Has a &amp;ldquo;retry&amp;rdquo; method which takes the following arguments:</source>
          <target state="translated">有一个&amp;ldquo;重试&amp;rdquo;方法，它采用以下参数：</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">运作方式</target>
        </trans-unit>
        <trans-unit id="02ac01fb0cfd279b39ed474d0bdcc7cd3414f7f3" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;ve tested func_timeout with python 2.7, 3.4, 3.5, 3.6, 3.7. It should work on other versions as well.</source>
          <target state="translated">我已经使用python 2.7、3.4、3.5、3.6、3.7测试了func_timeout。它也应该适用于其他版本。</target>
        </trans-unit>
        <trans-unit id="09fffbdcf1dd4f28d31baa327756e64b7acdd3f7" translate="yes" xml:space="preserve">
          <source>If &amp;ldquo;allowOverride&amp;rdquo; is present, an optional keyword argument is added to the wrapped function, &amp;lsquo;forceTimeout&amp;rsquo;. When provided, this will override the timeout used on this function.</source>
          <target state="translated">如果存在&amp;ldquo; allowOverride&amp;rdquo;，则将可选的关键字参数添加到包装函数&amp;ldquo; forceTimeout&amp;rdquo;中。如果提供，它将覆盖此函数上使用的超时。</target>
        </trans-unit>
        <trans-unit id="bbdf149491f140acb5ae1179d2fdb2cb2326a377" translate="yes" xml:space="preserve">
          <source>If the timeout has exceeded, the &amp;ldquo;FunctionTimedOut&amp;rdquo; exception will be raised in the context of the function being called, as well as from the context of &amp;ldquo;func_timeout&amp;rdquo;. You should have your function catch the &amp;ldquo;FunctionTimedOut&amp;rdquo; exception and exit cleanly if possible. Every 2 seconds until your function is terminated, it will continue to raise FunctionTimedOut. The terminating of the timed-out function happens in the context of the thread and will not block main execution.</source>
          <target state="translated">如果超过了超时，则将在调用函数的上下文以及&amp;ldquo; func_timeout&amp;rdquo;的上下文中引发&amp;ldquo; FunctionTimedOut&amp;rdquo;异常。您应该让函数捕获&amp;ldquo; FunctionTimedOut&amp;rdquo;异常，并在可能的情况下干净地退出。每隔2秒，直到函数终止，它将继续提高FunctionTimedOut。超时功能的终止发生在线程的上下文中，并且不会阻止主执行。</target>
        </trans-unit>
        <trans-unit id="aa7a109d8a92b592ba887b0b4d9d5999c9e5998a" translate="yes" xml:space="preserve">
          <source>If there is a return or an exception raised, it will be returned/raised as normal.</source>
          <target state="translated">如果有返回或异常引发,将按正常方式返回/引发。</target>
        </trans-unit>
        <trans-unit id="bd633cce19e2b0f7922432032989a632f946529c" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t avoid such code (third-party lib?) you can set the &amp;ldquo;repeatEvery&amp;rdquo; to a very very low number (like .00001 ), so hopefully it will raise, go to the except clause, and then raise again before &amp;ldquo;continue&amp;rdquo; is hit.</source>
          <target state="translated">如果您无法避免使用此类代码（第三方库？），则可以将&amp;ldquo; repeatEvery&amp;rdquo;设置为非常低的数字（例如.00001），因此希望它将提高，转到except子句，然后再次提高在点击&amp;ldquo;继续&amp;rdquo;之前。</target>
        </trans-unit>
        <trans-unit id="c34ff3efd6f9ed87c63cf8fb1e301439741632ae" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re calling third-party code you can&amp;rsquo;t control, which catches BaseException, set this to a low number</source>
          <target state="translated">如果您正在调用无法控制的第三方代码（捕获到BaseException），请将其设置为较小的数字</target>
        </trans-unit>
        <trans-unit id="d42190007de4c011a55f67b562fb0bc423a30a1c" translate="yes" xml:space="preserve">
          <source>If your code traps a specific exception type, this will allow you #raiseEvery seconds to cleanup before exit.</source>
          <target state="translated">如果你的代码捕获了一个特定的异常类型,这将允许你#raiseEvery秒清理退出前。</target>
        </trans-unit>
        <trans-unit id="716c60e7b79f82324044ecdf8ef28ea264d629f1" translate="yes" xml:space="preserve">
          <source>It is recommended that you create an exception that extends BaseException instead of Exception, otherwise code like this will never stop:</source>
          <target state="translated">建议你创建一个扩展BaseException的异常,而不是Exception,否则这样的代码永远不会停止。</target>
        </trans-unit>
        <trans-unit id="ecbef2995cf67f967161f9f335efae907164c78a" translate="yes" xml:space="preserve">
          <source>Pydoc</source>
          <target state="translated">Pydoc</target>
        </trans-unit>
        <trans-unit id="1fe4b21eeb0e315b583d66c662dd6045b31fba73" translate="yes" xml:space="preserve">
          <source>Pydoc can be found at: &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&lt;/a&gt;?vers=1</source>
          <target state="translated">可以在以下位置找到Pydoc：&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http&lt;/a&gt; ://htmlpreview.github.io/ ? https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html ？vers = 1</target>
        </trans-unit>
        <trans-unit id="e353dccbb3770ad2a0cb80535fbb189f2749efd8" translate="yes" xml:space="preserve">
          <source>Python module to support running any existing function with a given timeout.</source>
          <target state="translated">Python模块,支持以给定的超时时间运行任何现有的函数。</target>
        </trans-unit>
        <trans-unit id="50e737758e7a78a17cd92eceeb66a215d0703657" translate="yes" xml:space="preserve">
          <source>Python module which allows you to specify timeouts when calling any existing function. Also provides support for stoppable-threads</source>
          <target state="translated">Python模块允许你在调用任何现有函数时指定超时。还提供对可停止线程的支持。</target>
        </trans-unit>
        <trans-unit id="f068c399200bcf8c682f992645b319ce961b0414" translate="yes" xml:space="preserve">
          <source>Raises any exceptions #func# would raise, returns what #func# would return (unless timeout is exceeded), in which case it raises FunctionTimedOut</source>
          <target state="translated">引发任何#func#会引发的异常,返回#func#会返回的异常(除非超时),在这种情况下,它会引发FunctionTimedOut。</target>
        </trans-unit>
        <trans-unit id="95d653c8c0f9762787df73e800dde458c122fc19" translate="yes" xml:space="preserve">
          <source>So, for esxample, if you have a function &amp;ldquo;doit(&amp;lsquo;arg1&amp;rsquo;, &amp;lsquo;arg2&amp;rsquo;)&amp;rdquo; that you want to limit to running for 5 seconds, with func_timeout you can call it like this:</source>
          <target state="translated">因此，对于esxample，如果您有一个函数&amp;ldquo; doit（'arg1'，'arg2'）&amp;rdquo;想要限制运行5秒钟，则可以使用func_timeout调用它，如下所示：</target>
        </trans-unit>
        <trans-unit id="5e0c8be2dae1c18af6438e224c6d5079d7506bee" translate="yes" xml:space="preserve">
          <source>StoppableThread</source>
          <target state="translated">可停线程</target>
        </trans-unit>
        <trans-unit id="9051d0e12075d0499bbce88409b66cd0b3bb5d06" translate="yes" xml:space="preserve">
          <source>StoppableThread is a subclass of threading.Thread, which supports stopping the thread (supports both python2 and python3). It will work to stop even in C code.</source>
          <target state="translated">StoppableThread是threading.Thread的一个子类,它支持停止线程(支持python2和python3)。即使在C代码中,它也可以停止工作。</target>
        </trans-unit>
        <trans-unit id="0ac7dac1eafab769493419e79a8514435fb333a7" translate="yes" xml:space="preserve">
          <source>Stopping a Thread</source>
          <target state="translated">停止线程</target>
        </trans-unit>
        <trans-unit id="1e68785772a867c1dc7bfd922efe601ac2fe777b" translate="yes" xml:space="preserve">
          <source>Stops the thread by raising a given exception.</source>
          <target state="translated">通过引发一个给定的异常来停止线程。</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">技术支持</target>
        </trans-unit>
        <trans-unit id="d329942c0a4bcf7c2177264fee462a98f280336c" translate="yes" xml:space="preserve">
          <source>Takes two arguments, &amp;ldquo;timeout&amp;rdquo; and &amp;ldquo;allowOverride&amp;rdquo;</source>
          <target state="translated">接受两个参数，&amp;ldquo;超时&amp;rdquo;和&amp;ldquo; allowOverride&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="e0159984409ba3dd74cf3aa597338586632461d9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;exception&amp;rdquo; param must be a type, and it must be instantiable with no arguments (i.e. MyExceptionType() must create the object).</source>
          <target state="translated">&amp;ldquo; exception&amp;rdquo;参数必须是一种类型，并且它必须是可实例化的，且不带任何参数（即MyExceptionType（）必须创建对象）。</target>
        </trans-unit>
        <trans-unit id="962f5de7ab88f0bb85d3ad5bfdf32a584ed6496c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;timeout&amp;rdquo; parameter can be either a number (for a fixed timeout), or a function/lambda. If a function/lambda is used, it will be passed the same arguments as the called function was passed. It should return a number which will be used as the timeout for that paticular run. For example, if you have a method that calculates data, you&amp;rsquo;ll want a higher timeout for 1 million records than 50 records.</source>
          <target state="translated">&amp;ldquo; timeout&amp;rdquo;参数可以是数字（用于固定的超时），也可以是函数/ lambda。如果使用了函数/ lambda，则将传递与调用函数相同的参数。它应该返回一个数字，该数字将用作该特定运行的超时。例如，如果您有一种计算数据的方法，那么您希望一百万条记录的超时时间大于50条记录的超时时间。</target>
        </trans-unit>
        <trans-unit id="638c6dda5ff5545302fdfc1d9a135d5a723d022d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;StoppableThread&lt;/em&gt; class (you must extend this for your thread) adds a function, &lt;em&gt;stop&lt;/em&gt;, which can be called to stop the thread.</source>
          <target state="translated">该&lt;em&gt;StoppableThread&lt;/em&gt;类（必须扩展此为你的线程）增加了一个功能，&lt;em&gt;停止&lt;/em&gt;，这才叫停止线程。</target>
        </trans-unit>
        <trans-unit id="941a778074283ddae1ae7efe4b8e3cd69210788b" translate="yes" xml:space="preserve">
          <source>The exception type you pass will be raised every #raiseEvery seconds in the context of that stoppable thread. You can tweak this value to give yourself more time for cleanups, or you can shrink it down to break out of empty exception handlers  ( try/except with bare except ).</source>
          <target state="translated">你传递的异常类型将在该可停止线程的上下文中每#raiseEvery秒引发一次。你可以调整这个值,给自己更多的清理时间,也可以缩小这个值,以脱离空的异常处理程序(用裸的except来尝试/except)。</target>
        </trans-unit>
        <trans-unit id="306582be0dbc88fde6f9211698e7d894ea794cd4" translate="yes" xml:space="preserve">
          <source>The way it works is that you pass it an exception, and it raises it via the cpython api (So the next time a &amp;ldquo;python&amp;rdquo; function is called from C api, or the next line is processed in python code, the exception is raised).</source>
          <target state="translated">它的工作方式是向它传递一个异常，然后通过cpython api引发它（因此，下次从C api调用&amp;ldquo; python&amp;rdquo;函数，或者在python代码中处理下一行时，会引发异常）。</target>
        </trans-unit>
        <trans-unit id="3f6e6626b94cfc10d932ccfc6cc02a4e53fbcd25" translate="yes" xml:space="preserve">
          <source>Then, at any time during the thread&amp;rsquo;s execution, you can call .stop( StopExceptionType ) to stop it ( more in &amp;ldquo;Stopping a Thread&amp;rdquo; below</source>
          <target state="translated">然后，在线程执行期间的任何时间，您都可以调用.stop（StopExceptionType）来停止它（更多信息请参见下面的&amp;ldquo;停止线程&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="232f4a9ed1931c78516d5ebe645e54ec887af5dd" translate="yes" xml:space="preserve">
          <source>Then, you can create and start this thread like:</source>
          <target state="translated">然后,你可以像创建和启动这个线程。</target>
        </trans-unit>
        <trans-unit id="59edc89391a5ff18bdc39fa62ae634509905ac75" translate="yes" xml:space="preserve">
          <source>This is a decorator you can use on functions to apply func_timeout.</source>
          <target state="translated">这是一个装饰器,你可以在函数上使用它来应用 func_timeout。</target>
        </trans-unit>
        <trans-unit id="4746c633466638eb200a1ed4d9648f4828a5bf80" translate="yes" xml:space="preserve">
          <source>This is the function wherein you pass the timeout, the function you want to call, and any arguments, and it runs it for up to #timeout# seconds, and will return/raise anything the passed function would otherwise return or raise.</source>
          <target state="translated">这个函数是将超时时间、要调用的函数和任何参数传递给它,它最多运行#timeout#秒,并将返回/引发所传递的函数会返回或引发的任何东西。</target>
        </trans-unit>
        <trans-unit id="7464d026804d91f73a7d71c9343a14eb1532a5b5" translate="yes" xml:space="preserve">
          <source>This should be a class/type, NOT an instance, i.e.  MyExceptionType   not  MyExceptionType()</source>
          <target state="translated">这应该是一个类/类型,而不是一个实例,即MyExceptionType而不是MyExceptionType()</target>
        </trans-unit>
        <trans-unit id="b2964ece4565541a784c561ecb7a9f59721bbb95" translate="yes" xml:space="preserve">
          <source>This will allow you to call functions in stoppable threads, for example handlers in an event loop, which can be stopped later via the .stop() method.</source>
          <target state="translated">这将允许你在可停止的线程中调用函数,例如事件循环中的处理程序,可以在以后通过.stop()方法停止。</target>
        </trans-unit>
        <trans-unit id="76f27034687f9e082fa0729766c71b35a8cb477c" translate="yes" xml:space="preserve">
          <source>This will force &amp;lsquo;Server is shutting down&amp;rsquo; as the message held by this exception.</source>
          <target state="translated">这将强制&amp;ldquo;服务器正在关闭&amp;rdquo;，因为此异常保留了该消息。</target>
        </trans-unit>
        <trans-unit id="f74d606309338e7e102a2a7e1f653d9bffd8a50e" translate="yes" xml:space="preserve">
          <source>Using StoppableThread</source>
          <target state="translated">使用StoppableThread</target>
        </trans-unit>
        <trans-unit id="8322fbe11cd44910c2b7c54f8d6f80e8e098392e" translate="yes" xml:space="preserve">
          <source>Works on windows, linux/unix, cygwin, mac</source>
          <target state="translated">可在windows、linux/unix、cygwin、mac上使用。</target>
        </trans-unit>
        <trans-unit id="dc256a906c56d5aa58d033feeb07568d6473cd98" translate="yes" xml:space="preserve">
          <source>You can use StoppableThread one of two ways:</source>
          <target state="translated">您可以通过两种方式使用StoppableThread。</target>
        </trans-unit>
        <trans-unit id="6f04c2db341aa133d55d9ac57971090de97ed837" translate="yes" xml:space="preserve">
          <source>You may want to consider using singleton types with fixed error messages, so that tracebacks, etc. log that the call timed out.</source>
          <target state="translated">你可以考虑使用带有固定错误信息的单子类型,这样跟踪等就可以记录下调用超时了。</target>
        </trans-unit>
        <trans-unit id="b447f29b37d37004c887f2625617e804cc43b47b" translate="yes" xml:space="preserve">
          <source>Your thread can extend func_timeout.StoppableThread.StoppableThread and implement the &amp;ldquo;run&amp;rdquo; method, same as a normal thread.</source>
          <target state="translated">您的线程可以扩展func_timeout.StoppableThread.StoppableThread并实现&amp;ldquo; run&amp;rdquo;方法，与普通线程相同。</target>
        </trans-unit>
        <trans-unit id="cd7d54d7f0255f95c66baa0a6f4bac5df63e8150" translate="yes" xml:space="preserve">
          <source>class MyThread(StoppableThread):</source>
          <target state="translated">class MyThread(StoppableThread)。</target>
        </trans-unit>
        <trans-unit id="4242da60e142b57966582fd1eabfb210aa0675a1" translate="yes" xml:space="preserve">
          <source>class ServerShutdownExceptionType(BaseException):</source>
          <target state="translated">类ServerShutdownExceptionType(BaseException)。</target>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">继续</target>
        </trans-unit>
        <trans-unit id="12159d1a0ad11fb0b167e1c9b28827fa8a24449c" translate="yes" xml:space="preserve">
          <source>def __init__(self, *args, **kwargs):</source>
          <target state="translated">def __init__(self,*args,**kwargs)。</target>
        </trans-unit>
        <trans-unit id="6bf03baf72f015d08c16ab6dda4aaa344cf19a71" translate="yes" xml:space="preserve">
          <source>def func_timeout(timeout, func, args=(), kwargs=None):</source>
          <target state="translated">def func_timeout(timeout,func,args=(),kwargs=None)。</target>
        </trans-unit>
        <trans-unit id="72af865f9d9ec68b133b3beba17ac1778f075fb9" translate="yes" xml:space="preserve">
          <source>def myFunction(self, arg1, arg2):</source>
          <target state="translated">def myFunction(self,arg1,arg2):</target>
        </trans-unit>
        <trans-unit id="d9096d97c422134c85a3a5a4754c45aa13c827f9" translate="yes" xml:space="preserve">
          <source>def run(self):</source>
          <target state="translated">def run(self):</target>
        </trans-unit>
        <trans-unit id="dad19f8f1e75ac0fc8a519081539c38d6d0dc583" translate="yes" xml:space="preserve">
          <source>def stop(self, exception, raiseEvery=2.0):</source>
          <target state="translated">def stop(self,exception,raiseEvery=2.0)。</target>
        </trans-unit>
        <trans-unit id="84bffc3939a91128da32c64886f3e05319f53853" translate="yes" xml:space="preserve">
          <source>doSomething()</source>
          <target state="translated">doSomething()</target>
        </trans-unit>
        <trans-unit id="5e77970730597cf1b78a5a1dfb5db0c74da883e8" translate="yes" xml:space="preserve">
          <source>doitReturnValue = func_timeout(5, doit, args=(&amp;lsquo;arg1&amp;rsquo;, &amp;lsquo;arg2&amp;rsquo;))</source>
          <target state="translated">doitReturnValue = func_timeout（5，doit，args =（'arg1'，'arg2'））</target>
        </trans-unit>
        <trans-unit id="8adb1a8fcec638260bae17578f39fc5d88f3f6f0" translate="yes" xml:space="preserve">
          <source>except Exception as e:</source>
          <target state="translated">除例外为e。</target>
        </trans-unit>
        <trans-unit id="c57cf408589b3a07482119901763caba5284ee4e" translate="yes" xml:space="preserve">
          <source>except FunctionTimedOut:</source>
          <target state="translated">除了FunctionTimedOut。</target>
        </trans-unit>
        <trans-unit id="a3d10fd05f1987b39fa22b8e279f20c451159de2" translate="yes" xml:space="preserve">
          <source>from func_timeout import func_timeout, FunctionTimedOut</source>
          <target state="translated">从 func_timeout 中导入 func_timeout,FunctionTimedOut。</target>
        </trans-unit>
        <trans-unit id="db2590fa65bf729699de2c12a7ed18ca792b7a80" translate="yes" xml:space="preserve">
          <source>from func_timeout.StoppableThread import StoppableThread</source>
          <target state="translated">从 func_timeout.StoppableThread 中导入 StoppableThread。</target>
        </trans-unit>
        <trans-unit id="f6130d61094a69ddf03067c3d8ba313f22f9ff1e" translate="yes" xml:space="preserve">
          <source>func_set_timeout</source>
          <target state="translated">func_set_timeout</target>
        </trans-unit>
        <trans-unit id="7e5b4e7b8a249bfaf725a967ea5b1f5d6999e2d2" translate="yes" xml:space="preserve">
          <source>func_timeout</source>
          <target state="translated">func_timeout</target>
        </trans-unit>
        <trans-unit id="412e059da1b9e9f5c40c9e02312c9c8012e034d5" translate="yes" xml:space="preserve">
          <source>func_timeout - Runs the given function for up to #timeout# seconds.</source>
          <target state="translated">func_timeout-在#timeout#秒内运行给定函数。</target>
        </trans-unit>
        <trans-unit id="b9e1073b8ef8631b95584b26745f2a78d9d0caef" translate="yes" xml:space="preserve">
          <source>func_timeout will run the specified function in a thread with the specified arguments until it returns, raises an exception, or the timeout is exceeded.</source>
          <target state="translated">func_timeout将在线程中运行指定参数的函数,直到它返回、引发异常或超过超时。</target>
        </trans-unit>
        <trans-unit id="dffd52bc06625dde19d0b56d547325a15bd705d2" translate="yes" xml:space="preserve">
          <source>myThread = MyThread()</source>
          <target state="translated">myThread=MyThread()</target>
        </trans-unit>
        <trans-unit id="f31fd0390f6ec70393d585c64d822c8e8e0a339b" translate="yes" xml:space="preserve">
          <source>myThread = StoppableThread( target=myFunction, args=(&amp;lsquo;ordered&amp;rsquo;, &amp;lsquo;args&amp;rsquo;, &amp;lsquo;here&amp;rsquo;), kwargs={ &amp;lsquo;keyword args&amp;rsquo; : &amp;lsquo;here&amp;rsquo; } )</source>
          <target state="translated">myThread = StoppableThread（target = myFunction，args =（'ordered'，'args'，'here'），kwargs = {'keyword args'：'here'}））</target>
        </trans-unit>
        <trans-unit id="1703660c77617b7381eb65f83d232ec083ffe925" translate="yes" xml:space="preserve">
          <source>myThread.start()</source>
          <target state="translated">myThread.start()</target>
        </trans-unit>
        <trans-unit id="63e724a84d6a501b4b835c7854cfc47a6b9d95be" translate="yes" xml:space="preserve">
          <source>print ( &amp;ldquo;doit(&amp;lsquo;arg1&amp;rsquo;, &amp;lsquo;arg2&amp;rsquo;) could not complete within 5 seconds and was terminated.\n&amp;rdquo;)</source>
          <target state="translated">打印（&amp;ldquo; doit（'arg1'，'arg2'）无法在5秒钟内完成并被终止。\ n&amp;rdquo;）</target>
        </trans-unit>
        <trans-unit id="63143b6f8007b98c53ca2149822777b3566f9241" translate="yes" xml:space="preserve">
          <source>return</source>
          <target state="translated">返回</target>
        </trans-unit>
        <trans-unit id="6e6037620e97f018e0458067ae68d161d69b7968" translate="yes" xml:space="preserve">
          <source>that inherits from BaseException (so except Exception as e: continue; isn&amp;rsquo;t a problem)</source>
          <target state="translated">从BaseException继承的（因此Exception除外，例如e：Continue；这不是问题）</target>
        </trans-unit>
        <trans-unit id="c0f8e6a47ebeea6e24f6f6579081cf64be8d33e7" translate="yes" xml:space="preserve">
          <source>to break out of their exception handler.</source>
          <target state="translated">以脱离其异常处理程序。</target>
        </trans-unit>
        <trans-unit id="ee5bcc552a9530d8c817eb7c1414555172f903ff" translate="yes" xml:space="preserve">
          <source>try:</source>
          <target state="translated">尝试。</target>
        </trans-unit>
        <trans-unit id="05c9d64a43b4817c5646da02b15d6da3296c151e" translate="yes" xml:space="preserve">
          <source>until the thread terminates.</source>
          <target state="translated">直到线程终止。</target>
        </trans-unit>
        <trans-unit id="33911b06c894b3c1865492f50a52116659f18019" translate="yes" xml:space="preserve">
          <source>while True:</source>
          <target state="translated">而真。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
