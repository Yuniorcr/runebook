<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/crcmod/">
    <body>
      <group id="crcmod">
        <trans-unit id="28d303f1280b8b00db095bc23b5edb51ee3a6483" translate="yes" xml:space="preserve">
          <source>, which contains unit
tests for both</source>
          <target state="translated">，其中包含两个单元测试</target>
        </trans-unit>
        <trans-unit id="4be45b09e251ac4729aa08bb2166009e211b98b3" translate="yes" xml:space="preserve">
          <source>, you should run the unit tests to make sure
everything is installed properly.  The test script performs a number of tests
including a comparison to the direct method which uses a class implementing
polynomials over the integers mod 2.</source>
          <target state="translated">，您应该运行单元测试以确保所有内容均已正确安装。测试脚本执行许多测试，包括与直接方法的比较，该直接方法使用在整数mod 2上实现多项式的类。</target>
        </trans-unit>
        <trans-unit id="d00c3339b246f06d4016d266361fa05d1539372e" translate="yes" xml:space="preserve">
          <source>.
Run the following command:</source>
          <target state="translated">。运行以下命令：</target>
        </trans-unit>
        <trans-unit id="b52fc10a104e9dca5ffe7376a710f4bd51a915c5" translate="yes" xml:space="preserve">
          <source>.
You may also use the</source>
          <target state="translated">。您也可以使用</target>
        </trans-unit>
        <trans-unit id="20edd3045532ba1df350086595418d0faede93f0" translate="yes" xml:space="preserve">
          <source>.  The generated code was checked to make
sure it compiles with the GCC compiler.</source>
          <target state="translated">。检查生成的代码，以确保它可以与GCC编译器一起编译。</target>
        </trans-unit>
        <trans-unit id="493af3014138d1d8c2f9ce4fecc7ed908edeba2f" translate="yes" xml:space="preserve">
          <source>.  Use</source>
          <target state="translated">。用</target>
        </trans-unit>
        <trans-unit id="2bf06e52d5606204175b06b2717f9b98e06ad7d5" translate="yes" xml:space="preserve">
          <source>Alternatively, in the</source>
          <target state="translated">或者,在</target>
        </trans-unit>
        <trans-unit id="66744080714fb06bedf26298f921a433930670b7" translate="yes" xml:space="preserve">
          <source>Building C extension</source>
          <target state="translated">C号楼扩建部分</target>
        </trans-unit>
        <trans-unit id="04b1edfa5605aca13be435c54632bf49a7da6634" translate="yes" xml:space="preserve">
          <source>CRC Generator</source>
          <target state="translated">CRC生成器</target>
        </trans-unit>
        <trans-unit id="d0078b16e6e193ac2fab2fcfbc625d4cc9fdb7f5" translate="yes" xml:space="preserve">
          <source>Code Generation</source>
          <target state="translated">代码生成</target>
        </trans-unit>
        <trans-unit id="a60a223c98b2c36522f0b7f89f57ae14e144678a" translate="yes" xml:space="preserve">
          <source>Contributors</source>
          <target state="translated">贡献者</target>
        </trans-unit>
        <trans-unit id="911cfed2dfb85e7ac7e9127db628e093caab8030" translate="yes" xml:space="preserve">
          <source>Craig McQueen</source>
          <target state="translated">Craig McQueen</target>
        </trans-unit>
        <trans-unit id="ffbfc278c4d34c720f85d74c895bf0a2e09e7039" translate="yes" xml:space="preserve">
          <source>Crc</source>
          <target state="translated">CRC</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">依赖性</target>
        </trans-unit>
        <trans-unit id="befbbac1befca1ef472d2906501e1332b68cb27b" translate="yes" xml:space="preserve">
          <source>Documentation is available from the doc strings.  It is up to you to decide
what polynomials to use in your application.  If someone has not specified the
polynomials to use, you will need to do some research to find one suitable for
your application.  Examples are available in the unit test script</source>
          <target state="translated">文档可以从doc字符串中获得。您可以自行决定在您的应用程序中使用什么多项式。如果有人没有指定要使用的多项式,你需要做一些研究来找到适合你的应用程序的多项式。例子可以在单元测试脚本中找到</target>
        </trans-unit>
        <trans-unit id="be8bf7cb01dec1c43b40f75a63510276ccda14db" translate="yes" xml:space="preserve">
          <source>For Python 3.x, the install process is the same but you need to use the 3.x
interpreter.</source>
          <target state="translated">对于Python 3.x,安装过程是一样的,但你需要使用3.x解释器。</target>
        </trans-unit>
        <trans-unit id="52e4738c9581759e12f023419cbdd91bc9695ebf" translate="yes" xml:space="preserve">
          <source>For Windows users who want to use the mingw32 compiler, run this command:</source>
          <target state="translated">对于想使用mingw32编译器的Windows用户,运行这个命令。</target>
        </trans-unit>
        <trans-unit id="c7f24d7254f1f5bc2d1c8f383cd594f9649c1b58" translate="yes" xml:space="preserve">
          <source>For the 2.x versions of Python, these versions have been tested:</source>
          <target state="translated">对于Python的2.x版本,这些版本已经过测试。</target>
        </trans-unit>
        <trans-unit id="850aa53b7d6670cbb7e242dde2f94084f895d5f6" translate="yes" xml:space="preserve">
          <source>For the 3.x versions of Python, these versions have been tested:</source>
          <target state="translated">对于Python的3.x版本,这些版本已经过测试。</target>
        </trans-unit>
        <trans-unit id="141d1d74d8a6b3e7a7f1418ef539a53ce746ef34" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
          <target state="translated">指南</target>
        </trans-unit>
        <trans-unit id="eb576c484dc0906234a76b6397fd1839dece2700" translate="yes" xml:space="preserve">
          <source>If the extension module builds, it will be installed.  Otherwise, the
installation will include the pure Python version.  This will run significantly
slower than the extension module but will allow the package to be used.</source>
          <target state="translated">如果扩展模块构建,它将被安装。否则,安装将包括纯Python版本。这将比扩展模块的运行速度慢得多,但将允许使用该包。</target>
        </trans-unit>
        <trans-unit id="091cce68b2c0c019c285795f085a0b95ac7c9998" translate="yes" xml:space="preserve">
          <source>If you need to generate code for another language, I suggest you subclass the</source>
          <target state="translated">如果你需要生成其他语言的代码,我建议你将</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="a97a262c83c3ed0910948209493576ab7450e526" translate="yes" xml:space="preserve">
          <source>It may still work on earlier versions of Python 2.x, but these have not been
recently tested.</source>
          <target state="translated">它可能在Python 2.x的早期版本上仍然有效,但这些版本最近没有经过测试。</target>
        </trans-unit>
        <trans-unit id="0398ccd0f49298b10a3d76a47800d2ebecd49859" translate="yes" xml:space="preserve">
          <source>LICENSE</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="e67dd06503d322ddb37aa204244ecbcc12419ca8" translate="yes" xml:space="preserve">
          <source>Python Version</source>
          <target state="translated">Python版本</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="1df69e4816b1287ed18296090abb1955b1c8d54d" translate="yes" xml:space="preserve">
          <source>The crcmod package is capable of generating C functions that can be compiled
with a C or C++ compiler.  In the test directory, there is an examples.py
script that demonstrates how to use the code generator.  The result of this is
written out to the file</source>
          <target state="translated">crcmod包能够生成可以用C或C++编译器编译的C函数。在测试目录中,有一个examples.py脚本来演示如何使用代码生成器。其结果被写入到文件</target>
        </trans-unit>
        <trans-unit id="5a41772ee53d0756a2677bd38de04ff0b8a42df4" translate="yes" xml:space="preserve">
          <source>The crcmod package is installed using</source>
          <target state="translated">crcmod包是用</target>
        </trans-unit>
        <trans-unit id="90b3a87fc7a28ad594a210e1d1e62b9cb09f5c05" translate="yes" xml:space="preserve">
          <source>The package has separate code to support the 2.x and 3.x Python series.</source>
          <target state="translated">该软件包有单独的代码来支持2.x和3.x Python系列。</target>
        </trans-unit>
        <trans-unit id="a8cd32ce0a3d5cec5ac7d73539092dbf2b68467e" translate="yes" xml:space="preserve">
          <source>The software in this package is a Python module for generating objects that
compute the Cyclic Redundancy Check (CRC).  There is no attempt in this package
to explain how the CRC works.  There are a number of resources on the web that
give a good explanation of the algorithms.  Just do a Google search for &amp;ldquo;crc
calculation&amp;rdquo; and browse till you find what you need.  Another resource can be
found in chapter 20 of the book &amp;ldquo;Numerical Recipes in C&amp;rdquo; by Press et. al.</source>
          <target state="translated">该软件包中的软件是一个Python模块，用于生成计算循环冗余校验（CRC）的对象。此程序包中没有尝试解释CRC如何工作。网络上有许多资源可以很好地说明算法。只需在Google中搜索&amp;ldquo; crc计算&amp;rdquo;，然后浏览直到找到所需的内容即可。另一种资源可以在Press等人的《 C的数字食谱》一书的第20章中找到。等</target>
        </trans-unit>
        <trans-unit id="e004781af13617b28a83b8d786f8a40fc15e6e11" translate="yes" xml:space="preserve">
          <source>This package allows the use of any 8, 16, 24, 32, or 64 bit CRC.  You can
generate a Python function for the selected polynomial or an instance of the
Crc class which provides the same interface as the</source>
          <target state="translated">这个包允许使用任何8、16、24、32或64位的CRC。你可以为选定的多项式生成一个Python函数,或者生成一个Crc类的实例,该实例提供了与CRC类相同的接口。</target>
        </trans-unit>
        <trans-unit id="10f2c988d83d0d304518b58240636a2218470238" translate="yes" xml:space="preserve">
          <source>To build the C extension, the appropriate compiler tools for your platform must
be installed. Refer to the Python documentation for building C extensions for
details.</source>
          <target state="translated">要构建 C 扩展,必须为您的平台安装适当的编译器工具。详情请参考Python文档中关于构建C语言扩展的内容。</target>
        </trans-unit>
        <trans-unit id="0828ec98ea476fa479dfacee0dbfcd0cc91bbb3f" translate="yes" xml:space="preserve">
          <source>To run the unit tests on Python &amp;gt;=2.5:</source>
          <target state="translated">要在Python&amp;gt; = 2.5上运行单元测试：</target>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="translated">单元测试</target>
        </trans-unit>
        <trans-unit id="c6c14e820d6075211924c681507d8cacb82ddcbe" translate="yes" xml:space="preserve">
          <source>When you first install</source>
          <target state="translated">当您第一次安装</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="e1a927710e3bfbdd35253ac1370ba9ea3e9dfe76" translate="yes" xml:space="preserve">
          <source>as
a model for the new version.</source>
          <target state="translated">作为新版本的模型。</target>
        </trans-unit>
        <trans-unit id="c6b761bbd485802a68f894af97c2718ab83f5fc1" translate="yes" xml:space="preserve">
          <source>class and replace the method</source>
          <target state="translated">类,并将该方法替换为</target>
        </trans-unit>
        <trans-unit id="1ecf2de728e6b18f2cd0adf6194e22233f8ea162" translate="yes" xml:space="preserve">
          <source>class instance can also generate
C/C++ source code that can be used in another application.</source>
          <target state="translated">类实例还可以生成可以在另一个应用程序中使用的C/C++源代码。</target>
        </trans-unit>
        <trans-unit id="d4f0454286dad8d92b98e8c355762c870ba7a16f" translate="yes" xml:space="preserve">
          <source>crcmod</source>
          <target state="translated">crcmod</target>
        </trans-unit>
        <trans-unit id="14a7304b13f45cd0af6a323ce7011e82954595a8" translate="yes" xml:space="preserve">
          <source>crcmod.predefined</source>
          <target state="translated">crcmod.predefined</target>
        </trans-unit>
        <trans-unit id="410275fe0a3ef7d9f2dd234cb8b9775f5e6e04b3" translate="yes" xml:space="preserve">
          <source>crcmod.test</source>
          <target state="translated">crcmod.test</target>
        </trans-unit>
        <trans-unit id="0bcdf200d7a54c08a3b362ef3dfccc6a504ae823" translate="yes" xml:space="preserve">
          <source>directory run:</source>
          <target state="translated">目录运行。</target>
        </trans-unit>
        <trans-unit id="9d5c61b50b1fb9f50174dc923990e3b1afb8515b" translate="yes" xml:space="preserve">
          <source>distutils</source>
          <target state="translated">馏分</target>
        </trans-unit>
        <trans-unit id="dbad997bd0bb4630b70fce61ead288ad1372a9b1" translate="yes" xml:space="preserve">
          <source>examples.c</source>
          <target state="translated">例子.c</target>
        </trans-unit>
        <trans-unit id="1ab20b233b709fe74ad493bf3beb80496e261452" translate="yes" xml:space="preserve">
          <source>file for details.</source>
          <target state="translated">文件的细节。</target>
        </trans-unit>
        <trans-unit id="8d3f56b2f4b1e37016b14905e3b13e8e8801cba8" translate="yes" xml:space="preserve">
          <source>generateCode</source>
          <target state="translated">生成代码</target>
        </trans-unit>
        <trans-unit id="c1ea94f7e524679d0cf34ab7b0b28abe41ba732b" translate="yes" xml:space="preserve">
          <source>md5</source>
          <target state="translated">md5</target>
        </trans-unit>
        <trans-unit id="dd2441428475dceb091a758b515387983351739d" translate="yes" xml:space="preserve">
          <source>module to select one of the standard
polynomials.</source>
          <target state="translated">模块来选择其中一个标准多项式。</target>
        </trans-unit>
        <trans-unit id="9fd1c6c48fd95954002b9791e34fe069e8c4a9b3" translate="yes" xml:space="preserve">
          <source>modules
from the Python standard library.  A</source>
          <target state="translated">来自Python标准库的模块。A</target>
        </trans-unit>
        <trans-unit id="b2706f64c65fd288215d073181ed84f4fc724556" translate="yes" xml:space="preserve">
          <source>package has a module</source>
          <target state="translated">包有一个模块</target>
        </trans-unit>
        <trans-unit id="1e333a49dda1b33b63344e1648dd5cf8e538b2db" translate="yes" xml:space="preserve">
          <source>package is released under the MIT license. See the</source>
          <target state="translated">包是在MIT许可下发布的。参见</target>
        </trans-unit>
        <trans-unit id="182289100048348805f5f7f70e9cbbe3fd0e6d0c" translate="yes" xml:space="preserve">
          <source>predefined</source>
          <target state="translated">预定义</target>
        </trans-unit>
        <trans-unit id="d8f4590320e1343a915b6394170650a8f35d6926" translate="yes" xml:space="preserve">
          <source>sha</source>
          <target state="translated">sha</target>
        </trans-unit>
        <trans-unit id="a94a8fe5ccb19ba61c4c0873d391e987982fbbd3" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="translated">检验</target>
        </trans-unit>
        <trans-unit id="a36e355ddb203d7d4133221f339dc406cb9f480f" translate="yes" xml:space="preserve">
          <source>test.py</source>
          <target state="translated">测试.py</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
