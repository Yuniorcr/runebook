<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/altwalker/">
    <body>
      <group id="altwalker">
        <trans-unit id="0a9bc275becb35a8148001fbc5413496b8e2d72c" translate="yes" xml:space="preserve">
          <source>.NET Executor</source>
          <target state="translated">.NET执行器</target>
        </trans-unit>
        <trans-unit id="a8f3f33bea9a1312e44f453fceb3de3125fc3748" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;Optional&quot;&gt;.NET Core&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;a href=&quot;Optional&quot;&gt;.NET Core&lt;/a&gt;（可选）</target>
        </trans-unit>
        <trans-unit id="eaedd2973d888e4a0a51520667e98062d11ae570" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Model-based_testing&quot;&gt;Model-Based Testing&lt;/a&gt; is a testing
technique which offers a way of generating test cases based on models that describe the behaviour
(functionality) of the system under test.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Model-based_testing&quot;&gt;基于模型的测试&lt;/a&gt;是一种测试技术，它提供了一种基于描述模型的测试案例的方法，这些模型描述了被测系统的行为（功能）。</target>
        </trans-unit>
        <trans-unit id="aa88f98f43a897fa1949ad0222952e34a512dcac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; (Optional)</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;（可选）</target>
        </trans-unit>
        <trans-unit id="96f3cef29424ed6ec8e63b2bca74836cdaa70def" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/&quot;&gt;Python3&lt;/a&gt; (with pip3)</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/&quot;&gt;Python3&lt;/a&gt;（带pip3）</target>
        </trans-unit>
        <trans-unit id="d35ecc95355536e657d65b2771c24d2644c4b985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Executor&lt;/strong&gt;: for each step in the plan it looks up and calls the named method
from the &lt;em&gt;test code&lt;/em&gt;. In addition to the step methods, it also calls
fixture methods if present (e.g. &lt;code&gt;setUpModel&lt;/code&gt;, &lt;code&gt;tearDownModel&lt;/code&gt; ...).</source>
          <target state="translated">&lt;strong&gt;执行器&lt;/strong&gt;：对于计划中的每个步骤，它都会查找并从&lt;em&gt;测试代码中&lt;/em&gt;调用命名方法。除了step方法外，它还调用fixture方法（如果存在）（例如 &lt;code&gt;setUpModel&lt;/code&gt; ， &lt;code&gt;tearDownModel&lt;/code&gt; ...）。</target>
        </trans-unit>
        <trans-unit id="7a383a564a9684274f5176cf1f019668bf384686" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Further Reading/Useful Links&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;进一步阅读/有用链接&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="cd3d5fe207e8107e557140311dbbdbd5f30477fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generator&lt;/strong&gt; and &lt;strong&gt;Stop Condition&lt;/strong&gt;: used to specify how to generate a
path and to decide when a path is complete.</source>
          <target state="translated">&lt;strong&gt;生成器&lt;/strong&gt;和&lt;strong&gt;停止条件&lt;/strong&gt;：用于指定如何生成路径以及确定路径何时完成。</target>
        </trans-unit>
        <trans-unit id="5a486d3641d0cfd49e45908b66fefe3aeb18b556" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Model&lt;/strong&gt;: a directed graph, supplied by the user as a json or graphml file.
A graph is composed from a list of vertices and a list of edges.</source>
          <target state="translated">&lt;strong&gt;Model&lt;/strong&gt;：有向图，由用户作为json或graphml文件提供。图由顶点列表和边列表组成。</target>
        </trans-unit>
        <trans-unit id="3855b39860193266867bf717e23102431748cc28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Offline Mode&lt;/strong&gt; (using the Offline Planner): Run a path from a sequence of steps.
Usually the path is generated using the &lt;code&gt;offline&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;脱机模式&lt;/strong&gt;（使用脱机计划器）：从一系列步骤中运行路径。通常，该路径是使用 &lt;code&gt;offline&lt;/code&gt; 命令生成的。</target>
        </trans-unit>
        <trans-unit id="a866ca88f0d9918e4443319463ff9841c9333053" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Online Mode&lt;/strong&gt; (using the Online Planner): Generate one step and then execute
the step, until the path is complete.</source>
          <target state="translated">&lt;strong&gt;联机模式&lt;/strong&gt;（使用联机计划器）：生成一个步骤，然后执行该步骤，直到完成路径。</target>
        </trans-unit>
        <trans-unit id="a55fa8c0af1611553471c9e7dc4fdee9be61681b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Planner&lt;/strong&gt;: uses the &lt;em&gt;model(s)&lt;/em&gt; and a pair of &lt;em&gt;generator&lt;/em&gt; and &lt;em&gt;stop condition&lt;/em&gt;
to provide a path (a sequence of steps) through the model(s).</source>
          <target state="translated">&lt;strong&gt;计划器&lt;/strong&gt;：使用&lt;em&gt;模型&lt;/em&gt;以及一对&lt;em&gt;生成器&lt;/em&gt;和&lt;em&gt;停止条件&lt;/em&gt; 来提供通过模型的路径（一系列步骤）。</target>
        </trans-unit>
        <trans-unit id="63913d5edbdc636242b635aa03d7043f273af01a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reporter&lt;/strong&gt;: reports the output of the tests, the reporter is called on
each event (e.g. &lt;code&gt;step_start&lt;/code&gt;, &lt;code&gt;step_end&lt;/code&gt;, ...).</source>
          <target state="translated">&lt;strong&gt;报告者&lt;/strong&gt;：报告测试的输出，在每个事件（例如 &lt;code&gt;step_start&lt;/code&gt; ， &lt;code&gt;step_end&lt;/code&gt; ，...）上都会调用报告者。</target>
        </trans-unit>
        <trans-unit id="a7b8e54247ea11d74d1d1b895fcdf6a1a6af40d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test Code&lt;/strong&gt;: the implementation of the model(s) as code. Each model is mapped to a
class and each vertex and edge is mapped to a method.</source>
          <target state="translated">&lt;strong&gt;测试代码&lt;/strong&gt;：将模型的实现作为代码。每个模型都映射到一个类，每个顶点和边都映射到一个方法。</target>
        </trans-unit>
        <trans-unit id="504ccc52545c0ef1857f7523f8645c6abb068c35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Walker&lt;/strong&gt;: the test runner. Coordinates the execution of a test asking the &lt;code&gt;Planner&lt;/code&gt;
for the next step, executing the step using the &lt;code&gt;Executor&lt;/code&gt; and reporting the progress
using the &lt;code&gt;Reporter&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;沃克&lt;/strong&gt;：测试跑步者。坐标的测试要求的执行 &lt;code&gt;Planner&lt;/code&gt; 下一步，执行使用步骤 &lt;code&gt;Executor&lt;/code&gt; 和报告使用进度 &lt;code&gt;Reporter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ddaf00c3604299ce2c304f87568eff85b781b8c3" translate="yes" xml:space="preserve">
          <source>After running the command check that you correctly installed GraphWalker by running:</source>
          <target state="translated">运行该命令后,请检查是否正确安装了 GraphWalker。</target>
        </trans-unit>
        <trans-unit id="df10665200f2bbbe8d091162ade5e00d629b237d" translate="yes" xml:space="preserve">
          <source>After you install the python dependencies to generate the documentation run:</source>
          <target state="translated">安装好python依赖关系后,运行生成文档。</target>
        </trans-unit>
        <trans-unit id="7be3c4b7e8cceecfb68bbaaf56e96f94afe41f26" translate="yes" xml:space="preserve">
          <source>After you install the python dependencies to setup AltWalker CLI locally from code run:</source>
          <target state="translated">在你安装了python依赖项后,从代码运行中设置AltWalker CLI本地。</target>
        </trans-unit>
        <trans-unit id="ad80b7fb6a3312a42c37521d089765c451396896" translate="yes" xml:space="preserve">
          <source>AltWalker</source>
          <target state="translated">AltWalker</target>
        </trans-unit>
        <trans-unit id="d615c51a5816d97ef7af375b66fe4410f200e64f" translate="yes" xml:space="preserve">
          <source>AltWalker Components</source>
          <target state="translated">AltWalker组件</target>
        </trans-unit>
        <trans-unit id="1aa17571f7a57558734626e73a5ea816620529c3" translate="yes" xml:space="preserve">
          <source>AltWalker also borrows the concept of test fixture from unit tests, and implements the following fixtures:
&lt;code&gt;setUpRun&lt;/code&gt;, &lt;code&gt;tearDownRun&lt;/code&gt;, &lt;code&gt;setUpModel&lt;/code&gt; and &lt;code&gt;tearDownModel&lt;/code&gt;.</source>
          <target state="translated">AltWalker还从单元测试中借鉴了测试装置的概念，并实现了以下装置： &lt;code&gt;setUpRun&lt;/code&gt; ， &lt;code&gt;tearDownRun&lt;/code&gt; ， &lt;code&gt;setUpModel&lt;/code&gt; 和 &lt;code&gt;tearDownModel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2416f42376a908c547b2ff8018b3e446fa54de3" translate="yes" xml:space="preserve">
          <source>AltWalker has the following components:</source>
          <target state="translated">AltWalker有以下组件。</target>
        </trans-unit>
        <trans-unit id="32bbb872a206e206d85c79a1fac9e531e5433574" translate="yes" xml:space="preserve">
          <source>AltWalker is a test execution tool, which  aims to make it easy to write and run your model-based tests. AltWalker uses GraphWalker to generate a path through the models.</source>
          <target state="translated">AltWalker是一个测试执行工具,它的目的是使你的基于模型的测试容易编写和运行。AltWalker使用GraphWalker来生成一条通过模型的路径。</target>
        </trans-unit>
        <trans-unit id="37df9fef33bce5f9f289d85623bc9a446b04f25f" translate="yes" xml:space="preserve">
          <source>AltWalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.</source>
          <target state="translated">AltWalker是一个开源的、基于模型的测试框架。在Python或C#中编写你的测试,并使用GraphWalker来生成一个通过你的模型的路径。</target>
        </trans-unit>
        <trans-unit id="f7f256f13cdbdaa60902a03f707f87e61fe6e6c6" translate="yes" xml:space="preserve">
          <source>AltWalker is an open source, Model-Based testing framework for automating your test execution. You
design your tests as a directed graph and AltWalker executes them. It relies on
&lt;a href=&quot;http://graphwalker.github.io/&quot;&gt;GraphWalker&lt;/a&gt; to generate paths through your graph.</source>
          <target state="translated">AltWalker是一个基于模型的开源测试框架，可自动执行测试。您将测试设计为有向图，然后AltWalker执行它们。它依靠 &lt;a href=&quot;http://graphwalker.github.io/&quot;&gt;GraphWalker&lt;/a&gt;生成通过图形的路径。</target>
        </trans-unit>
        <trans-unit id="a41ea63fa4319baabce1ce4582a61b55581bf527" translate="yes" xml:space="preserve">
          <source>AltWalker is licensed under the GNU General Public License v3.0.</source>
          <target state="translated">AltWalker采用GNU General Public License v3.0授权。</target>
        </trans-unit>
        <trans-unit id="0020dcfd3005761f38569bc481d9eeed05e45fdc" translate="yes" xml:space="preserve">
          <source>AltWalker is now installed. Check that you correctly installed AltWalker by running:</source>
          <target state="translated">AltWalker现在已经安装完毕。检查你是否正确安装了AltWalker,运行。</target>
        </trans-unit>
        <trans-unit id="d3eb0b578e3a5a4bcc0b554a36144d27d016d6e2" translate="yes" xml:space="preserve">
          <source>Altwalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.</source>
          <target state="translated">Altwalker是一个开源的、基于模型的测试框架。在Python或C#中编写你的测试,并使用GraphWalker来生成一个通过你的模型的路径。</target>
        </trans-unit>
        <trans-unit id="34954fcb4910538734e628d36f95db11f40ba4e6" translate="yes" xml:space="preserve">
          <source>And an &lt;strong&gt;Http Executor&lt;/strong&gt; that allows you to hook up your own executor via HTTP. You can read
more about the Http Executor on the &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/how-tos/custom-executor.html&quot;&gt;How to: Write your own executor&lt;/a&gt;
page.</source>
          <target state="translated">还有一个&lt;strong&gt;Http执行器&lt;/strong&gt;，可让您通过HTTP连接自己的执行器。您可以在&lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/how-tos/custom-executor.html&quot;&gt;如何：编写自己的执行程序&lt;/a&gt; 页面上阅读有关Http执行程序的更多信息。</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="0e7014134042a56f1f9c92294190363fc721cbea" translate="yes" xml:space="preserve">
          <source>Clone the repository:</source>
          <target state="translated">克隆版本库。</target>
        </trans-unit>
        <trans-unit id="7efb19a30b32f92bbbc48973aae20b3b11becdd7" translate="yes" xml:space="preserve">
          <source>Currently AltWalker provides three executors:</source>
          <target state="translated">目前AltWalker提供了三个执行器。</target>
        </trans-unit>
        <trans-unit id="15335476013023af5c0e73e556221dfeb5eb3d3e" translate="yes" xml:space="preserve">
          <source>Currently AltWalker provides two planners:</source>
          <target state="translated">目前AltWalker提供了两个规划器。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">文件资料</target>
        </trans-unit>
        <trans-unit id="be37e18f09d3079dd6c4358117744bf89d5f7062" translate="yes" xml:space="preserve">
          <source>For a more detailed tutorial read the &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/installation.html&quot;&gt;Installation&lt;/a&gt; section from the documentation.</source>
          <target state="translated">有关更详细的教程，请阅读文档中的&amp;ldquo; &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker/installation.html&quot;&gt;安装&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="3d43662365b8632f674f128cad2ea7aad412e0ab" translate="yes" xml:space="preserve">
          <source>For the test structure it uses an Object-Oriented approach inspired by python's &lt;code&gt;unittest&lt;/code&gt; module. Every model is mapped to a class with the same name and each vertex and edge from the model is mapped to a method inside the class.</source>
          <target state="translated">对于测试结构，它使用了受python的 &lt;code&gt;unittest&lt;/code&gt; 模块启发的面向对象的方法。每个模型都映射到具有相同名称的类，并且模型的每个顶点和边都映射到该类内部的方法。</target>
        </trans-unit>
        <trans-unit id="77874bd80f0bab910bbb5f6945df8f56312b10cf" translate="yes" xml:space="preserve">
          <source>Google Style Docstring Example</source>
          <target state="translated">谷歌风格文档字符串示例</target>
        </trans-unit>
        <trans-unit id="bb8188fdd97de3b6571d511b82dfd622f3998f96" translate="yes" xml:space="preserve">
          <source>Google Style Guide</source>
          <target state="translated">谷歌风格指南</target>
        </trans-unit>
        <trans-unit id="16d450e6776272899190621eab911b05a46591fa" translate="yes" xml:space="preserve">
          <source>GraphWalker CLI</source>
          <target state="translated">GraphWalker CLI</target>
        </trans-unit>
        <trans-unit id="85e1d41f96d17b0f0f36339f3dacb93cb06c65c6" translate="yes" xml:space="preserve">
          <source>If you want to work with the latest code before it&amp;rsquo;s released, install or update the code from the &lt;code&gt;develop&lt;/code&gt; branch:</source>
          <target state="translated">如果要在发布最新代码之前使用它，请从 &lt;code&gt;develop&lt;/code&gt; 分支安装或更新代码：</target>
        </trans-unit>
        <trans-unit id="50079265ddc3b26b4b3dcce9410b3abcb0dec316" translate="yes" xml:space="preserve">
          <source>Install AltWalker</source>
          <target state="translated">安装AltWalker</target>
        </trans-unit>
        <trans-unit id="3735e432380231f4af2220906f2c0622a77ea8f1" translate="yes" xml:space="preserve">
          <source>Install GraphWalker</source>
          <target state="translated">安装GraphWalker</target>
        </trans-unit>
        <trans-unit id="25b0c3833fdb4dafff4809da702a4ebb1def5484" translate="yes" xml:space="preserve">
          <source>Install python dependencies:</source>
          <target state="translated">安装python的依赖关系。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="c287a1bbff0a047aa1cc86cd23da90c9abec2a7c" translate="yes" xml:space="preserve">
          <source>Java 8</source>
          <target state="translated">爪哇8</target>
        </trans-unit>
        <trans-unit id="dc58f04116c6ece56d94454441370b248cc77180" translate="yes" xml:space="preserve">
          <source>Join our Gitter chat room &lt;a href=&quot;https://gitter.im/altwalker/community&quot;&gt;here&lt;/a&gt; to chat with us or with other members of the community.</source>
          <target state="translated">&lt;a href=&quot;https://gitter.im/altwalker/community&quot;&gt;在这里&lt;/a&gt;加入我们的Gitter聊天室，与我们或社区的其他成员聊天。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="57c42222720e5f496a8df0809680b4294f03d281" translate="yes" xml:space="preserve">
          <source>Living on the edge</source>
          <target state="translated">生活在边缘</target>
        </trans-unit>
        <trans-unit id="b74b1c54641834f0492df83a2306a12c077a2e42" translate="yes" xml:space="preserve">
          <source>MacOS/Linux:</source>
          <target state="translated">MacOS/Linux。</target>
        </trans-unit>
        <trans-unit id="3193001c0f0d1acda4df4c521ce9f808567c048f" translate="yes" xml:space="preserve">
          <source>Make a sample project and run the tests.</source>
          <target state="translated">制作一个示例项目并运行测试。</target>
        </trans-unit>
        <trans-unit id="c7ba6bef733ed12cc3f77b8a28247ad7e65f01e5" translate="yes" xml:space="preserve">
          <source>Model-Based Testing</source>
          <target state="translated">基于模型的测试</target>
        </trans-unit>
        <trans-unit id="973223ffeaf0067f2183549980459ce47cb4f279" translate="yes" xml:space="preserve">
          <source>Now it supports running tests written in .NET/C# and Python3.</source>
          <target state="translated">现在它支持运行.NET/C#和Python3编写的测试。</target>
        </trans-unit>
        <trans-unit id="7696dbfdc5a07f91fc9b0252e53e8b7fc1068092" translate="yes" xml:space="preserve">
          <source>Offline Planner</source>
          <target state="translated">离线规划师</target>
        </trans-unit>
        <trans-unit id="335266c541a9d99ce2224f1361287daf9ffa9f68" translate="yes" xml:space="preserve">
          <source>Online Planner</source>
          <target state="translated">在线规划师</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概述</target>
        </trans-unit>
        <trans-unit id="f2a646f662464e161695ae3f9d8ea6ca3732ad91" translate="yes" xml:space="preserve">
          <source>Prerequisites:</source>
          <target state="translated">先决条件:</target>
        </trans-unit>
        <trans-unit id="fc37513e2861642bc88186db662f5cfefd3f3921" translate="yes" xml:space="preserve">
          <source>Python Executor</source>
          <target state="translated">Python执行器</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">快速启动</target>
        </trans-unit>
        <trans-unit id="c322f197fb9f57f7f37b035e1d98e32c0a13f566" translate="yes" xml:space="preserve">
          <source>Read the documentation on &lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker&quot;&gt;https://altom.gitlab.io/altwalker/altwalker&lt;/a&gt;.</source>
          <target state="translated">阅读&lt;a href=&quot;https://altom.gitlab.io/altwalker/altwalker&quot;&gt;https://altom.gitlab.io/altwalker/altwalker&lt;/a&gt;上的文档。</target>
        </trans-unit>
        <trans-unit id="7ec9eede60ad8e8637510a86e616531533ada02f" translate="yes" xml:space="preserve">
          <source>Running Tests</source>
          <target state="translated">运行测试</target>
        </trans-unit>
        <trans-unit id="d5013672dcda9176a75bf59239db1b0e7c7eeb8c" translate="yes" xml:space="preserve">
          <source>Running tests with tox inside docker</source>
          <target state="translated">在docker中使用ox运行测试</target>
        </trans-unit>
        <trans-unit id="e881014f5d1027fc5aeff87e5f8e28519914a9e1" translate="yes" xml:space="preserve">
          <source>Setting Up a Development Environment</source>
          <target state="translated">建立开发环境</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">技术支持</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="1ccfdf41146d2a54089b6b6822dc8a2cb3fd15f6" translate="yes" xml:space="preserve">
          <source>The goal when designing models is to represent the part of the system under test, usually
by one model for each functionality of your system.</source>
          <target state="translated">设计模型时的目标是表示被测系统的部分,通常是通过一个模型来表示系统的每个功能。</target>
        </trans-unit>
        <trans-unit id="8bd93c1878b69a73b6386cd9d18f551661a8c3fd" translate="yes" xml:space="preserve">
          <source>Then from any command line you can access:</source>
          <target state="translated">然后从任何命令行可以访问。</target>
        </trans-unit>
        <trans-unit id="af53abd46f11dcdb2c869d57c7365695ddba7c8e" translate="yes" xml:space="preserve">
          <source>There are two ways to run your tests:</source>
          <target state="translated">有两种方法来运行你的测试。</target>
        </trans-unit>
        <trans-unit id="cdd105cf385f4c1d385e41406571344443badc92" translate="yes" xml:space="preserve">
          <source>To see the documentation run:</source>
          <target state="translated">要查看文档运行。</target>
        </trans-unit>
        <trans-unit id="2a12a451b955c1c04d7447615e789bb90474a125" translate="yes" xml:space="preserve">
          <source>Use the following command to install AltWalker:</source>
          <target state="translated">使用以下命令安装AltWalker。</target>
        </trans-unit>
        <trans-unit id="efa4d7b0974d436ba82706d9c81864b43e82d602" translate="yes" xml:space="preserve">
          <source>Why use Model-Based Testing:</source>
          <target state="translated">为什么使用基于模型的测试。</target>
        </trans-unit>
        <trans-unit id="d0a162f24e233795006248e6eceb7d0912e33599" translate="yes" xml:space="preserve">
          <source>Windows:</source>
          <target state="translated">窗口。</target>
        </trans-unit>
        <trans-unit id="e6891ae3069ea787707fdd333202f358b3f68dad" translate="yes" xml:space="preserve">
          <source>With the help of graph theory we can dynamically generate multiple test scripts. A test script is a path passing through the model from a starting point till
a condition is met.</source>
          <target state="translated">在图论的帮助下,我们可以动态地生成多个测试脚本。测试脚本是指从一个起点到满足一个条件为止通过模型的路径。</target>
        </trans-unit>
        <trans-unit id="d996feaa5f46c0715004c58e42b1af6ca5b546c2" translate="yes" xml:space="preserve">
          <source>allows for a large number of tests to be created which results in a larger part of the system under test to be covered.</source>
          <target state="translated">允许创建大量的测试,从而使被测系统的更多部分被覆盖。</target>
        </trans-unit>
        <trans-unit id="8e6e30c166e6191ad073f6e275714d5b42c2ba79" translate="yes" xml:space="preserve">
          <source>dynamically generates multiple test scripts based on different conditions (like coverage or length)</source>
          <target state="translated">根据不同的条件(如覆盖率或长度)动态生成多个测试脚本。</target>
        </trans-unit>
        <trans-unit id="e1ec99496c42989cfce6d75cf8e1e1c05c19621d" translate="yes" xml:space="preserve">
          <source>the abstraction layer added by the model gives your tests a better structure</source>
          <target state="translated">模型所添加的抽象层为您的测试提供了更好的结构。</target>
        </trans-unit>
        <trans-unit id="105643e8bc6c891dffa4c49c2a5cea052792de81" translate="yes" xml:space="preserve">
          <source>the model can be updated to reflect the requirements changes making the tests easy to maintain</source>
          <target state="translated">该模型可以更新,以反映需求的变化,使测试易于维护。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
