<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/flake8-mypy/">
    <body>
      <group id="flake8-mypy">
        <trans-unit id="60488cac36c3dc3751c1291910e0d7cab19677b7" translate="yes" xml:space="preserve">
          <source>&amp;macr;\_(ツ)_/&amp;macr;</source>
          <target state="translated">&amp;macr;\ _（ツ）_ /&amp;macr;</target>
        </trans-unit>
        <trans-unit id="c5de8b04dcdf529c65c8be3014afcd34cc5b662b" translate="yes" xml:space="preserve">
          <source>). The value of that option should be a path to a
mypy.ini or setup.cfg compatible file. For full configuration syntax,
follow &lt;a href=&quot;http://mypy.readthedocs.io/en/latest/config_file.html&quot;&gt;mypy
documentation&lt;/a&gt;.</source>
          <target state="translated">）。该选项的值应该是mypy.ini或setup.cfg兼容文件的路径。有关完整的配置语法，请遵循&lt;a href=&quot;http://mypy.readthedocs.io/en/latest/config_file.html&quot;&gt;mypy文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3589ac6e3e8d464a43586be5e04841eee061246a" translate="yes" xml:space="preserve">
          <source>--disallow-untyped-calls</source>
          <target state="translated">--disallow-untyped-calls</target>
        </trans-unit>
        <trans-unit id="54038f5a1c66a56b596028b7372d7545f52cfc96" translate="yes" xml:space="preserve">
          <source>--follow-imports</source>
          <target state="translated">-跟随进口</target>
        </trans-unit>
        <trans-unit id="46120ae092895e4fcab91fc5e752ef8f6497eedf" translate="yes" xml:space="preserve">
          <source>--mypy-config=</source>
          <target state="translated">--mypy-config =</target>
        </trans-unit>
        <trans-unit id="3ca0d8063e6fb00a77a7818fd98c45eae7922ab4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Flake8&lt;/em&gt; operates on unrelated files, it doesn&amp;rsquo;t perform full program
analysis. In other words, it doesn&amp;rsquo;t follow imports. This is a curse and
a blessing. We cannot find complex problems and the number of warnings
we can safely show without risking false positives is lower. In return,
we can provide useful warnings with great performance, usable for
realtime editor integration.</source>
          <target state="translated">&lt;em&gt;Flake8&lt;/em&gt;对不相关的文件进行操作，它不执行完整的程序分析。换句话说，它不遵循导入。这是一个诅咒和祝福。我们找不到复杂的问题，可以放心显示警告而又不冒误报的警告的数量会减少。作为回报，我们可以提供性能卓越的有用警告，可用于实时编辑器集成。</target>
        </trans-unit>
        <trans-unit id="1e6a33b799d99a72b912f28a90ea025eb3386657" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;flake8-mypy&lt;/em&gt; reserves &lt;strong&gt;T4&lt;/strong&gt; for all current and future codes, T being
the natural letter for typing-related errors. There are other plugins
greedily reserving the entire letter &lt;strong&gt;T&lt;/strong&gt;. To this I say:</source>
          <target state="translated">&lt;em&gt;flake8-mypy&lt;/em&gt;为所有当前和将来的代码保留&lt;strong&gt;T4&lt;/strong&gt;，T是与打字相关的错误的自然字母。还有其他的插件贪婪地保留了整个信&lt;strong&gt;牛逼&lt;/strong&gt;。为此，我说：</target>
        </trans-unit>
        <trans-unit id="bd5c4dcdf2ee1ea515601f8540c77dc661d32621" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;mypy&lt;/em&gt; shines when given a full program to analyze. You can then use
options like</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;给定完整的程序进行分析时，&lt;em&gt;mypy会&lt;/em&gt;闪耀。然后，您可以使用类似的选项</target>
        </trans-unit>
        <trans-unit id="974887dfa46a311b9f39c0942ae5d39115b9222a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T400&lt;/strong&gt;: any typing note.</source>
          <target state="translated">&lt;strong&gt;T400&lt;/strong&gt;：任何打字说明。</target>
        </trans-unit>
        <trans-unit id="14da6db46ca06b5d99b2d6cda83558a26e6c9c79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T484&lt;/strong&gt;: any typing error (after PEP 484, geddit?).</source>
          <target state="translated">&lt;strong&gt;T484&lt;/strong&gt;：任何键入错误（在PEP 484之后，geddit？）。</target>
        </trans-unit>
        <trans-unit id="631a7e672461b4c5f9af05f3b2e2c193caf44968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T498&lt;/strong&gt;: internal &lt;em&gt;mypy&lt;/em&gt; error.</source>
          <target state="translated">&lt;strong&gt;T498&lt;/strong&gt;：内部&lt;em&gt;Mypy&lt;/em&gt;错误。</target>
        </trans-unit>
        <trans-unit id="a0dacfe6bcd97c970d9f2b206d84f6c13c70b89c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;T499&lt;/strong&gt;: internal &lt;em&gt;mypy&lt;/em&gt; traceback, stderr output, or an unmatched
line.</source>
          <target state="translated">&lt;strong&gt;T499&lt;/strong&gt;：内部&lt;em&gt;mypy&lt;/em&gt;回溯，stderr输出，或不匹配的线。</target>
        </trans-unit>
        <trans-unit id="f04261d13987fe5171a6036526d16e31e8e44548" translate="yes" xml:space="preserve">
          <source>A plugin for &lt;a href=&quot;http://flake8.pycqa.org/&quot;&gt;Flake8&lt;/a&gt; integrating
&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;. The idea is to enable limited type
checking as a linter inside editors and other tools that already support
&lt;em&gt;Flake8&lt;/em&gt; warning syntax and config.</source>
          <target state="translated">&lt;a href=&quot;http://flake8.pycqa.org/&quot;&gt;Flake8&lt;/a&gt;集成 &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy的&lt;/a&gt;插件。这样做的目的是在编辑器和其他已经支持&lt;em&gt;Flake8&lt;/em&gt;警告语法和配置的工具中作为&lt;em&gt;lint&lt;/em&gt;启用有限类型检查 。</target>
        </trans-unit>
        <trans-unit id="818767d0f3f0d4c305cb2870d32965cfd535224d" translate="yes" xml:space="preserve">
          <source>A plugin for flake8 integrating mypy.</source>
          <target state="translated">一个集成mypy的flake8插件。</target>
        </trans-unit>
        <trans-unit id="bf04a90969ef3054c9ddc9e9938177793e24f289" translate="yes" xml:space="preserve">
          <source>As it turns out, in this mode of operation, &lt;em&gt;mypy&lt;/em&gt; is still able to
provide useful information on the annotations within and at least usage
of stubbed standard library and third party libraries. However, for best
effects, you will want to use separate configuration for &lt;em&gt;mypy&lt;/em&gt;&amp;rsquo;s
standalone mode and for usage as a &lt;em&gt;Flake8&lt;/em&gt; plugin.</source>
          <target state="translated">事实证明，在这种操作模式下，&lt;em&gt;mypy&lt;/em&gt;仍然能够提供有关存根标准库和第三方库中的注释以及至少使用它们的有用信息。但是，为了获得最佳效果，您需要为&lt;em&gt;mypy&lt;/em&gt;的独立模式和用作&lt;em&gt;Flake8&lt;/em&gt;插件使用单独的配置。</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">作者</target>
        </trans-unit>
        <trans-unit id="cf81e7d259138135771f83dad79d7314a0e2ed14" translate="yes" xml:space="preserve">
          <source>By making the code exclusively Python 3.5+, I&amp;rsquo;m able to focus on the
quality of the checks and re-use all the nice features of the new
releases (check out
&lt;a href=&quot;docs.python.org/3/library/pathlib.html&quot;&gt;pathlib&lt;/a&gt;) instead of wasting
cycles on Unicode compatibility, etc.</source>
          <target state="translated">通过专门制作Python 3.5+的代码，我可以专注于检查的质量&lt;a href=&quot;docs.python.org/3/library/pathlib.html&quot;&gt;并重&lt;/a&gt;用新版本的所有出色功能（签出 pathlib），而不是浪费Unicode兼容性等方面的时间。</target>
        </trans-unit>
        <trans-unit id="9c74fb571984d7f3e781ea8b013e5f74bcd16389" translate="yes" xml:space="preserve">
          <source>Change Log</source>
          <target state="translated">更改日志</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">配置</target>
        </trans-unit>
        <trans-unit id="8b2f5cc82eb598461d90350ee365e079b3eda5cf" translate="yes" xml:space="preserve">
          <source>Due to the reasoning above, by default &lt;em&gt;flake8-mypy&lt;/em&gt; will operate with
options equivalent to the following:</source>
          <target state="translated">由于上述原因，默认情况下&lt;em&gt;flake8-mypy&lt;/em&gt;将使用与以下选项等效的选项进行操作：</target>
        </trans-unit>
        <trans-unit id="9b3adb8e7e52e763c4d388ea00c733415b004ab6" translate="yes" xml:space="preserve">
          <source>For the sake of simplicity and readability, the config you provide will
fully replace the one listed above. Values left out will be using
&lt;em&gt;mypy&lt;/em&gt;&amp;rsquo;s own defaults.</source>
          <target state="translated">为简单起见，您提供的配置将完全替代上面列出的配置。遗漏的值将使用 &lt;em&gt;mypy&lt;/em&gt;的默认值。</target>
        </trans-unit>
        <trans-unit id="6079753cffde07ec1b9796ca4dbc24a645992d45" translate="yes" xml:space="preserve">
          <source>Glued together by &lt;a href=&quot;mailto:lukasz%40langa.pl&quot;&gt;Łukasz Langa&lt;/a&gt;.</source>
          <target state="translated">由粘在一起&lt;a href=&quot;mailto:lukasz%40langa.pl&quot;&gt;的Lukasz兰加&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0475411b3386d0057115cf895be7d1a1cd488f8f" translate="yes" xml:space="preserve">
          <source>I plan to support more fine-grained error codes for specific &lt;em&gt;mypy&lt;/em&gt;
errors in the future.</source>
          <target state="translated">我计划 将来支持针对特定的&lt;em&gt;mypy&lt;/em&gt;错误的更细粒度的错误代码。</target>
        </trans-unit>
        <trans-unit id="59670c588f206d175b558ff346b27889051cdd0d" translate="yes" xml:space="preserve">
          <source>If you disagree with the defaults above, you can specify your own &lt;em&gt;mypy&lt;/em&gt;
configuration by providing the</source>
          <target state="translated">如果您不同意上述默认设置，则可以 通过提供以下内容来指定自己的&lt;em&gt;mypy&lt;/em&gt;配置：</target>
        </trans-unit>
        <trans-unit id="accadaa2de1d9b54d08912507fc259d22f1d0931" translate="yes" xml:space="preserve">
          <source>Just run:</source>
          <target state="translated">只是跑。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="5516fee04290d8fb240eb1035f9649b7af9c46bc" translate="yes" xml:space="preserve">
          <source>List of warnings</source>
          <target state="translated">警告清单</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">麻省理工学院</target>
        </trans-unit>
        <trans-unit id="e5235c3d74608e18ac9a99adeba9dde4044408a5" translate="yes" xml:space="preserve">
          <source>NOTE: This plugin requires &lt;em&gt;mypy&lt;/em&gt; &amp;gt;=0.500, as of Mar 1st no released
version satisfies this yet. You can use master in the mean time.</source>
          <target state="translated">注意：此插件要求&lt;em&gt;mypy&lt;/em&gt; &amp;gt; = 0.500，截至3月1日，尚无发行版本满足此要求。您可以同时使用master。</target>
        </trans-unit>
        <trans-unit id="12e19660be012b4eba852959c0cfdb85d3bd927b" translate="yes" xml:space="preserve">
          <source>Note: chaing the</source>
          <target state="translated">注:chain</target>
        </trans-unit>
        <trans-unit id="e36741c0ba08cc37f8bfbe95a6affd2ddc5b5471" translate="yes" xml:space="preserve">
          <source>OMG, this is Python 3 only!</source>
          <target state="translated">天哪,这只是Python 3的版本!</target>
        </trans-unit>
        <trans-unit id="38479adfbc61c2036e2fc6b0467c2047db17d640" translate="yes" xml:space="preserve">
          <source>Remember that for the best user experience, your linter integration mode
shouldn&amp;rsquo;t generally display errors that a full run of &lt;em&gt;mypy&lt;/em&gt; wouldn&amp;rsquo;t.
This would be confusing.</source>
          <target state="translated">请记住，为了获得最佳的用户体验，您的linter集成模式通常不应显示完整的&lt;em&gt;mypy&lt;/em&gt;不会显示的错误。这会令人困惑。</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">测试</target>
        </trans-unit>
        <trans-unit id="6ca0550bdbe31ceea7515b9973420cf532d0e801" translate="yes" xml:space="preserve">
          <source>Two levels of type checking</source>
          <target state="translated">两级类型检查</target>
        </trans-unit>
        <trans-unit id="b5b99244a9d16756d53a44f391e4137f95f047dc" translate="yes" xml:space="preserve">
          <source>Yes, so is &lt;em&gt;mypy&lt;/em&gt;. Relax, you can run &lt;em&gt;Flake8&lt;/em&gt; with all popular plugins
&lt;strong&gt;as a tool&lt;/strong&gt; perfectly fine under Python 3.5+ even if you want to
analyze Python&amp;nbsp;2 code. This way you&amp;rsquo;ll be able to parse all of the new
syntax supported on Python 3 but also &lt;em&gt;effectively all&lt;/em&gt; the Python 2
syntax at the same time.</source>
          <target state="translated">是的，&lt;em&gt;mypy&lt;/em&gt;也是&lt;em&gt;如此&lt;/em&gt;。放轻松，即使您要分析Python 2代码，也可以在Python 3.5+下使用所有流行插件运行&lt;em&gt;Flake8&lt;/em&gt;，这 &lt;strong&gt;是一个&lt;/strong&gt;非常好的&lt;strong&gt;工具&lt;/strong&gt;。这样，你就可以分析所有支持Python 3的新语法的同时也&lt;em&gt;有效的所有&lt;/em&gt;Python的2语法在同一时间。</target>
        </trans-unit>
        <trans-unit id="54caab93217af0f5a295a3ceb50447edb5f3b7cb" translate="yes" xml:space="preserve">
          <source>always run type checks from a temporary directory to avoid clashing
with unrelated files in the same directory</source>
          <target state="translated">总是从临时目录中运行类型检查,以避免与同一目录中不相关的文件发生冲突。</target>
        </trans-unit>
        <trans-unit id="fd9fd63588735ed2f20df436b4ef13a1224493ce" translate="yes" xml:space="preserve">
          <source>avoid raising errors in the default config which don&amp;rsquo;t happen during
a full run (disable warn_unused_ignores and warn_redundant_casts)</source>
          <target state="translated">避免在默认配置中引发完整运行期间不会发生的错误（禁用warn_unused_ignores和warn_redundant_casts）</target>
        </trans-unit>
        <trans-unit id="954af3ede91f571ff68eee59cce29ee578445fac" translate="yes" xml:space="preserve">
          <source>bugfix: don&amp;rsquo;t crash on relative imports in the form</source>
          <target state="translated">错误修正：不要在表单中的相对导入时崩溃</target>
        </trans-unit>
        <trans-unit id="3da0e2535ecbeec5d12440c6e632abec61c8ae54" translate="yes" xml:space="preserve">
          <source>bugfix: using &lt;em&gt;Flake8&lt;/em&gt; with absolute paths now correctly matches
&lt;em&gt;mypy&lt;/em&gt; messages</source>
          <target state="translated">错误修正：将&lt;em&gt;Flake8&lt;/em&gt;与绝对路径配合使用现在可以正确匹配 &lt;em&gt;mypy&lt;/em&gt;消息</target>
        </trans-unit>
        <trans-unit id="cfe4311042959f04387387a2bc4b7ffa4d5f07eb" translate="yes" xml:space="preserve">
          <source>bugfix: when running over an entire directory, T484 is now correctly
used instead of T499</source>
          <target state="translated">bug修复:当运行在整个目录上时,现在正确使用T484而不是T499。</target>
        </trans-unit>
        <trans-unit id="74bc72bc5e3b152dc1e0945e5c2f4f54eae624d5" translate="yes" xml:space="preserve">
          <source>command-line option to
&lt;em&gt;Flake8&lt;/em&gt; (with the .flake8/setup.cfg equivalent being called</source>
          <target state="translated">&lt;em&gt;Flake8的&lt;/em&gt;命令行选项 （调用.flake8 / setup.cfg等效项</target>
        </trans-unit>
        <trans-unit id="f90e09f0523a6748b6e6749a04730a63f6c8b4f0" translate="yes" xml:space="preserve">
          <source>date-versioned</source>
          <target state="translated">日期版</target>
        </trans-unit>
        <trans-unit id="c6fcbab7e6b771c2287910acf25eb269ee96b2fb" translate="yes" xml:space="preserve">
          <source>first published version</source>
          <target state="translated">初版</target>
        </trans-unit>
        <trans-unit id="cebf7969bb81174d32a8d8bebcb633487a68a468" translate="yes" xml:space="preserve">
          <source>follow_imports</source>
          <target state="translated">follow_imports</target>
        </trans-unit>
        <trans-unit id="72da8abfddfca33cea60457e4b28e80601bdb63f" translate="yes" xml:space="preserve">
          <source>from &amp;ldquo;silent&amp;rdquo; to &amp;ldquo;skip&amp;rdquo; to avoid name
clashing files being used to follow imports within
&lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt;</source>
          <target state="translated">从&amp;ldquo;无声&amp;rdquo;到&amp;ldquo;跳过&amp;rdquo;，以避免名称冲突文件被用来跟随 &lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;排版中的导入&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39198568ff36b27b1332a183f68a81d4b18d870b" translate="yes" xml:space="preserve">
          <source>from . import X</source>
          <target state="translated">从.进口X</target>
        </trans-unit>
        <trans-unit id="6fdbd71a54a14094c9a27a4b8ea68ff2fd32fc5a" translate="yes" xml:space="preserve">
          <source>mypy_config</source>
          <target state="translated">mypy_config</target>
        </trans-unit>
        <trans-unit id="842cb3868b389b38969f4028bde3dc6bfa6aa100" translate="yes" xml:space="preserve">
          <source>option might have surprising
effects. If the file you&amp;rsquo;re linting with Flake8 has other files around
it, then in &amp;ldquo;silent&amp;rdquo; or &amp;ldquo;normal&amp;rdquo; mode those files will be used to follow
imports. This includes imports from
&lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;typeshed&lt;/a&gt;.</source>
          <target state="translated">选项可能会产生令人惊讶的效果。如果您要使用Flake8整理的文件周围还有其他文件，则在&amp;ldquo;静默&amp;rdquo;或&amp;ldquo;正常&amp;rdquo;模式下，这些文件将用于跟踪导入。这包括来自 &lt;a href=&quot;https://github.com/python/typeshed/&quot;&gt;排版的导入&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="e52f654b92917aea6efd4174a78067ef96fa58af" translate="yes" xml:space="preserve">
          <source>performance optimization: skip running &lt;em&gt;mypy&lt;/em&gt; over files that contain
no annotations or imports from</source>
          <target state="translated">性能优化：在不含注释或导入内容的文件上跳过&lt;em&gt;mypy&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70e95468414ffb8125815974910831c61f7f1dd9" translate="yes" xml:space="preserve">
          <source>set MYPYPATH by default to give stubs from typeshed higher priority
than local sources</source>
          <target state="translated">默认设置MYPYPATH,使来自typehed的存根的优先级高于本地来源。</target>
        </trans-unit>
        <trans-unit id="1b2a57913ec4c00a6268bfd7ad8fe8e5fb8a9543" translate="yes" xml:space="preserve">
          <source>suppress &lt;em&gt;mypy&lt;/em&gt; messages about relative imports</source>
          <target state="translated">抑制有关相对导入的&lt;em&gt;mypy&lt;/em&gt;消息</target>
        </trans-unit>
        <trans-unit id="01ba7992f85de477e8e630428eb5ed14769f9155" translate="yes" xml:space="preserve">
          <source>switch</source>
          <target state="translated">开关</target>
        </trans-unit>
        <trans-unit id="e63b0644ff79a6fc86c737b67aca9392a7eca9a0" translate="yes" xml:space="preserve">
          <source>to
exercise the full transitive closure of your modules, catching errors
stemming from bad API usage or incompatible types. That being said,
those checks take time, and require access to the entire codebase. For
some tools, like an editor with an open file, or a code review tool,
achieving this is not trivial. This is where a more limited approach
inside a linter comes in.</source>
          <target state="translated">来行使你的模块的完整的换向闭合,捕捉来自于糟糕的API使用或不兼容类型的错误。也就是说,这些检查需要时间,并且需要访问整个代码库。对于一些工具来说,比如一个打开文件的编辑器,或者一个代码审查工具,实现这一点并非易事。这就是在linter里面的一个比较有限的方法的作用。</target>
        </trans-unit>
        <trans-unit id="02d7d3475883e6dccc76a4a332e908c39c996571" translate="yes" xml:space="preserve">
          <source>typing</source>
          <target state="translated">typing</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
