<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/cu2qu/">
    <body>
      <group id="cu2qu">
        <trans-unit id="7739136dc697141cd8d76585cab6736b910f012b" translate="yes" xml:space="preserve">
          <source>(or</source>
          <target state="translated">（要么</target>
        </trans-unit>
        <trans-unit id="35ff59f1757a1944b8ce4cfe244ed15660054f77" translate="yes" xml:space="preserve">
          <source>) mode:</source>
          <target state="translated">）模式：</target>
        </trans-unit>
        <trans-unit id="4126eaa1ad9d4d3f568a3aa60bc75e582b5dc6a4" translate="yes" xml:space="preserve">
          <source>), and then use the global option</source>
          <target state="translated">），然后使用全局选项</target>
        </trans-unit>
        <trans-unit id="3515cb6d2089484641f48d16f9ad5eaf9e75541b" translate="yes" xml:space="preserve">
          <source>--editable</source>
          <target state="translated">-可编辑</target>
        </trans-unit>
        <trans-unit id="51a11bde9f418c43a742d4872926f70fac030487" translate="yes" xml:space="preserve">
          <source>--global-option</source>
          <target state="translated">--global-option</target>
        </trans-unit>
        <trans-unit id="9a8265a5ba2c33881e2717e7581df323a5188174" translate="yes" xml:space="preserve">
          <source>--help</source>
          <target state="translated">- 救命</target>
        </trans-unit>
        <trans-unit id="2409dbb844cb1f81941d2ceb0136d6ea85918bbe" translate="yes" xml:space="preserve">
          <source>--with-cython</source>
          <target state="translated">--with-cython</target>
        </trans-unit>
        <trans-unit id="2360917b9377a0f8f526499aa422e769e1252d5b" translate="yes" xml:space="preserve">
          <source>-e</source>
          <target state="translated">-e</target>
        </trans-unit>
        <trans-unit id="4bf031a80e9f0db8a2a223e30a4d10780ec25e1a" translate="yes" xml:space="preserve">
          <source>.
Check its</source>
          <target state="translated">。检查它</target>
        </trans-unit>
        <trans-unit id="31c9f7538d545b4835f11242466a14d794bd775b" translate="yes" xml:space="preserve">
          <source>CU2QU_WITH_CYTHON=1</source>
          <target state="translated">CU2QU_WITH_CYTHON=1</target>
        </trans-unit>
        <trans-unit id="de13b5293805e71af7639a8555435df96ec4ae95" translate="yes" xml:space="preserve">
          <source>Cubic-to-quadratic bezier curve conversion</source>
          <target state="translated">三次方曲线到二次方曲线的转换。</target>
        </trans-unit>
        <trans-unit id="a7ccc4ada9faaae2f3382702ec4d86a2e99e5eb1" translate="yes" xml:space="preserve">
          <source>For example, to build the cu2qu extension module in-place (i.e. in the same
source directory):</source>
          <target state="translated">例如,在原地建立cu2qu扩展模块(即在同一个源目录下)。</target>
        </trans-unit>
        <trans-unit id="8fb253255ce8087c9fa3e039e73ea6c27f3cea3d" translate="yes" xml:space="preserve">
          <source>If you have cloned the git repository, the C source files are not present and
need to be regenerated. To do that, you need to install the latest Cython
(as usual,</source>
          <target state="translated">如果你克隆了git仓库,C源文件不存在,需要重新生成。要做到这一点,你需要安装最新的Cython(照例。</target>
        </trans-unit>
        <trans-unit id="74cc0eeab3c6ec1e8f2c83f5e0207b34d48f0b25" translate="yes" xml:space="preserve">
          <source>If you wish to modify the sources in-place, you can clone the git repository
from Github and install in</source>
          <target state="translated">如果你想在原地修改源代码,你可以从Github克隆git仓库,然后安装在</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="3035caa6305226b744b1ea162fc3020baa859bce" translate="yes" xml:space="preserve">
          <source>Interpolation compatibility is guaranteed during conversion. If it&amp;rsquo;s not
needed, converting one font at a time may yield more optimized results:</source>
          <target state="translated">转换期间保证插值兼容性。如果不需要，一次转换一种字体可能会产生更优化的结果：</target>
        </trans-unit>
        <trans-unit id="813f7c2f7f4633a852ca19870655e4e1b8cdbe2c" translate="yes" xml:space="preserve">
          <source>Optionally, you can build an optimized version of cu2qu which uses &lt;a href=&quot;https://github.com/cython/cython&quot;&gt;Cython&lt;/a&gt;
to compile Python to C. The extension module thus created is &lt;em&gt;more than
twice as fast&lt;/em&gt; than its pure-Python equivalent.</source>
          <target state="translated">（可选）您可以构建cu2qu的优化版本，该版本使用&lt;a href=&quot;https://github.com/cython/cython&quot;&gt;Cython&lt;/a&gt; 来将Python编译为C。如此创建的扩展模块的&lt;em&gt;速度&lt;/em&gt;是其纯Python等效模块的&lt;em&gt;两倍&lt;/em&gt;以上。</target>
        </trans-unit>
        <trans-unit id="39dbdecb441816090957cb06b246a7e4a0301376" translate="yes" xml:space="preserve">
          <source>Some fonts may need a different error threshold than the default (0.001
em). This can also be provided by the caller:</source>
          <target state="translated">有些字体可能需要一个不同于默认值(0.001 em)的错误阈值。这也可以由调用者提供。</target>
        </trans-unit>
        <trans-unit id="f13c9450644dabff84b22eadf04a26c76e842f97" translate="yes" xml:space="preserve">
          <source>The library also provides a command-line script also named</source>
          <target state="translated">该库还提供了一个命令行脚本,也叫做</target>
        </trans-unit>
        <trans-unit id="7a8f075aeba8e47113dd0b389ca3feb24cd785ff" translate="yes" xml:space="preserve">
          <source>This library provides functions which take in UFO objects (Defcon Fonts
or Robofab RFonts) and converts any cubic curves to quadratic. The most
useful function is probably</source>
          <target state="translated">这个库提供的函数可以接收UFO对象(Defcon Fonts或Robofab RFonts),并将任何立方曲线转换为二次方。最有用的函数可能是</target>
        </trans-unit>
        <trans-unit id="8a3d34371c839fd3fa3d0a04f9db2900c1fb3692" translate="yes" xml:space="preserve">
          <source>This will download the latest stable version available from the Python
Package Index (PyPI).</source>
          <target state="translated">这将从 Python 包索引 (PyPI)中下载最新的稳定版本。</target>
        </trans-unit>
        <trans-unit id="46e66f6f6ae97d47d9101da9ee872b4841ea9662" translate="yes" xml:space="preserve">
          <source>When installing cu2qu from PyPI using pip, as long as you have a C compiler
available, the cu2qu setup script will automatically attempt to build a
C/Python extension module. If the compilation fails for any reasons, an error
is printed and cu2qu will be installed as pure-Python, without the optimized
extension.</source>
          <target state="translated">当使用pip从PyPI安装cu2qu时,只要你有一个可用的C编译器,cu2qu安装脚本会自动尝试构建一个C/Python扩展模块。如果由于任何原因编译失败,会打印出一个错误,cu2qu将作为纯Python安装,没有优化的扩展模块。</target>
        </trans-unit>
        <trans-unit id="23a3e9a65c7eed785bc48509feae93af3929bfc5" translate="yes" xml:space="preserve">
          <source>You can also pass</source>
          <target state="translated">您也可以通过</target>
        </trans-unit>
        <trans-unit id="f0f5d1433107dd661ca2741e23bc4a0ff5e92bed" translate="yes" xml:space="preserve">
          <source>You can install/upgrade cu2qu using pip, like any other Python package.</source>
          <target state="translated">你可以使用pip安装/升级cu2qu,就像其他Python包一样。</target>
        </trans-unit>
        <trans-unit id="62ede488616689051aa1bada35cc3eda7e5d143a" translate="yes" xml:space="preserve">
          <source>can print a string reporting the number of curves
of each length. For example</source>
          <target state="translated">可以打印一个字符串,报告每条长度的曲线数量。例如</target>
        </trans-unit>
        <trans-unit id="f81019bd418ef37925ba4c15e706700adb830534" translate="yes" xml:space="preserve">
          <source>cu2qu</source>
          <target state="translated">cu2qu</target>
        </trans-unit>
        <trans-unit id="673e91f8fdab380718b1c007f83e1dd19dd7f158" translate="yes" xml:space="preserve">
          <source>environment variable if you prefer.</source>
          <target state="translated">环境变量,如果你愿意的话。</target>
        </trans-unit>
        <trans-unit id="89a84eb90fe8d75d3c2f2d4161c173cefad26ef2" translate="yes" xml:space="preserve">
          <source>fonts_to_quadratic</source>
          <target state="translated">字体转四边形。</target>
        </trans-unit>
        <trans-unit id="9aebafa2e1cf5e690fac575d914a7a225b46769e" translate="yes" xml:space="preserve">
          <source>fonts_to_quadratic([font], dump_stats=True)</source>
          <target state="translated">fonts_to_quadratic([font],dump_stats=True)</target>
        </trans-unit>
        <trans-unit id="6988a338d03964fcb6f3634588014e8f6b60b13c" translate="yes" xml:space="preserve">
          <source>may print something
like:</source>
          <target state="translated">可能会打印这样的内容:</target>
        </trans-unit>
        <trans-unit id="f92a02fc2a4d584b81b3165e470f9a088c9475eb" translate="yes" xml:space="preserve">
          <source>meaning that the font now contains 1000 curves with three points, 2000
with four points, and 100 with five. Given multiple fonts, the function
will report the total counts across all fonts. You can also accumulate
statistics between calls by providing your own report dictionary:</source>
          <target state="translated">意味着字体现在包含1000条三点的曲线,2000条四点的曲线,100条五点的曲线。给定多个字体,函数将报告所有字体的总计数。你也可以通过提供自己的报告字典来积累调用之间的统计数据。</target>
        </trans-unit>
        <trans-unit id="8a400afd3bdbcbbe443ba8312904b0c0c9dcff16" translate="yes" xml:space="preserve">
          <source>pip install -U cython</source>
          <target state="translated">pip install -U cython</target>
        </trans-unit>
        <trans-unit id="372b42996e793b1cb3419275c40075f2d527575f" translate="yes" xml:space="preserve">
          <source>script. You can also export
a</source>
          <target state="translated">脚本。您也可以导出一个</target>
        </trans-unit>
        <trans-unit id="8e2edce0d507e1297474f25c00cae94258db38d8" translate="yes" xml:space="preserve">
          <source>setup.py</source>
          <target state="translated">setup.py</target>
        </trans-unit>
        <trans-unit id="04f390e6147cb095d3e061ef92c62fb6a514da8b" translate="yes" xml:space="preserve">
          <source>to see all the options.</source>
          <target state="translated">查看所有选项。</target>
        </trans-unit>
        <trans-unit id="7d7c8de9493fc2d4f706302317e23c526893ffaa" translate="yes" xml:space="preserve">
          <source>when installing with pip from a local
source checkout, like so:</source>
          <target state="translated">当用pip从本地源检查安装时,像这样。</target>
        </trans-unit>
        <trans-unit id="bc3dee14fec66ef0ed25d9c4a4e7e7d1a7763166" translate="yes" xml:space="preserve">
          <source>when invoking the</source>
          <target state="translated">当调用</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
