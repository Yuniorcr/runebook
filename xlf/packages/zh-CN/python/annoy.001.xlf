<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/annoy/">
    <body>
      <group id="annoy">
        <trans-unit id="fa6b81880a53294907cac9442a07b15c672f5fde" translate="yes" xml:space="preserve">
          <source>&quot;angular&quot;</source>
          <target state="translated">&amp;ldquo;角&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="8a06f55c90662680f742673c4f595b18fdc7bb31" translate="yes" xml:space="preserve">
          <source>&quot;dot&quot;</source>
          <target state="translated">&amp;ldquo;点&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="67c1fdf385f4f5beeed1dad728572514b27124d4" translate="yes" xml:space="preserve">
          <source>&quot;euclidean&quot;</source>
          <target state="translated">&amp;ldquo;欧几里得&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="20fe0dd97c5e9a83af1a365a8fe81b5de51bf08f" translate="yes" xml:space="preserve">
          <source>&quot;hamming&quot;</source>
          <target state="translated">&amp;ldquo;海明&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="d4c8325a3e32bc53bf90c440ba1dacf7cd09770f" translate="yes" xml:space="preserve">
          <source>&quot;manhattan&quot;</source>
          <target state="translated">&amp;ldquo;曼哈顿&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="d7a998e7a9f6d4b5513b0680f841dbaa6294dbfc" translate="yes" xml:space="preserve">
          <source>#include &quot;annoylib.h&quot;</source>
          <target state="translated">#include&amp;ldquo; annoylib.h&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="3e2917e368098e05f842e9bcaeb55a0d37ab4d6f" translate="yes" xml:space="preserve">
          <source>(any nonnegative integer) with vector</source>
          <target state="translated">（任何非负整数）和向量</target>
        </trans-unit>
        <trans-unit id="3708bc20afa9ad8f2c30850b4295ae2a97673051" translate="yes" xml:space="preserve">
          <source>). Default is</source>
          <target state="translated">）。默认是</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">，</target>
        </trans-unit>
        <trans-unit id="12dc819d75f1a25b8775662313ac1df66bfb82e0" translate="yes" xml:space="preserve">
          <source>, causing the file to be pre-emptively read from disk into memory. If you set</source>
          <target state="translated">，导致该文件被抢先从磁盘读入内存。如果您设定</target>
        </trans-unit>
        <trans-unit id="f3c52d4fb7a441ffed34e25cab208ddf7278658d" translate="yes" xml:space="preserve">
          <source>, it will pre-read the entire file into memory (using mmap with</source>
          <target state="translated">，它将把整个文件预读到内存中（使用带有</target>
        </trans-unit>
        <trans-unit id="aac04c2e51265f7fcd66d049b5f48808a3e7c12b" translate="yes" xml:space="preserve">
          <source>, it will return a 2 element tuple with two lists in it: the second one containing all corresponding distances.</source>
          <target state="translated">，它将返回一个包含两个列表的2元素元组：第二个包含所有对应的距离。</target>
        </trans-unit>
        <trans-unit id="d82d7d8dddd385c0b6b9781775a29dde52a7f33d" translate="yes" xml:space="preserve">
          <source>, no more items can be added.</source>
          <target state="translated">，不能再添加任何项目。</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">， 要么</target>
        </trans-unit>
        <trans-unit id="33c4edd52aa7f00c5b8f252848ba7cc41da45241" translate="yes" xml:space="preserve">
          <source>, pages of the mmapped index are instead read from disk and cached in memory on-demand, as necessary for a search to complete. This can significantly increase early search times but may be better suited for systems with low memory compared to index size, when few queries are executed against a loaded index, and/or when large areas of the index are unlikely to be relevant to search queries.</source>
          <target state="translated">而是从磁盘读取mmapped索引的页面，并根据需要按需将其缓存在内存中，以完成搜索。与针对索引大小的索引相比，当针对加载的索引执行的查询很少时，和/或当索引的较大区域不太可能与搜索查询相关时，这可能会大大增加早期搜索时间，但可能更适合于内存不足的系统。</target>
        </trans-unit>
        <trans-unit id="87d116bf8221098ebf13bad98dc3e78f9143ba21" translate="yes" xml:space="preserve">
          <source>. NOTE: this used to return the &lt;em&gt;squared&lt;/em&gt; distance, but has been changed as of Aug 2016.</source>
          <target state="translated">。注意：此&lt;em&gt;函数&lt;/em&gt;用于返回&lt;em&gt;平方&lt;/em&gt;距离，但自2016年8月起已更改。</target>
        </trans-unit>
        <trans-unit id="9e69595b8a502231e798dace150690bba2a1efdf" translate="yes" xml:space="preserve">
          <source>. Note that it will allocate memory for</source>
          <target state="translated">。请注意，它将分配内存用于</target>
        </trans-unit>
        <trans-unit id="f345ca21871fa0a43e9c34e78466c20bccdb5bf8" translate="yes" xml:space="preserve">
          <source>. The test suite includes a big real world dataset that is downloaded from the internet, so it will take a few minutes to execute.</source>
          <target state="translated">。该测试套件包括一个很大的真实世界数据集，该数据集是从Internet下载的，因此需要几分钟的时间来执行。</target>
        </trans-unit>
        <trans-unit id="7530e3b5f45d1a95a25164b4b22f08fc429fe15a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.slideshare.net/erikbern/approximate-nearest-neighbor-methods-and-vector-models-nyc-ml-meetup&quot;&gt;Presentation from New York Machine Learning meetup&lt;/a&gt; about Annoy</source>
          <target state="translated">&lt;a href=&quot;http://www.slideshare.net/erikbern/approximate-nearest-neighbor-methods-and-vector-models-nyc-ml-meetup&quot;&gt;纽约机器学习聚会上&lt;/a&gt;有关Annoy的演讲</target>
        </trans-unit>
        <trans-unit id="604a50a3dddffe024ec2f44cdf77ae8cc171babc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_distance&quot;&gt;Euclidean distance&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Taxicab_geometry&quot;&gt;Manhattan distance&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;cosine distance&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Hamming_distance&quot;&gt;Hamming distance&lt;/a&gt;, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Dot_product&quot;&gt;Dot (Inner) Product distance&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_distance&quot;&gt;欧氏距离&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Taxicab_geometry&quot;&gt;曼哈顿距离&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;余弦距离&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Hamming_distance&quot;&gt;汉明距离&lt;/a&gt;或&lt;a href=&quot;https://en.wikipedia.org/wiki/Dot_product&quot;&gt;点（内）乘积距离&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5379502ae75d8eb778920dabf2d96eb2b8c4bacc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/a1k0n&quot;&gt;Andy Sloane&lt;/a&gt; provides a &lt;a href=&quot;https://github.com/spotify/annoy-java&quot;&gt;Java version of Annoy&lt;/a&gt; although currently limited to cosine and read-only.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/a1k0n&quot;&gt;Andy Sloane&lt;/a&gt;提供了&lt;a href=&quot;https://github.com/spotify/annoy-java&quot;&gt;Annoy&lt;/a&gt;的Java版本，尽管当前仅限于余弦和只读。</target>
        </trans-unit>
        <trans-unit id="d8966bb747a1956ce1812f1a25a9b38d287e0771" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/eddelbuettel&quot;&gt;Dirk Eddelbuettel&lt;/a&gt; provides an &lt;a href=&quot;http://dirk.eddelbuettel.com/code/rcpp.annoy.html&quot;&gt;R version of Annoy&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/eddelbuettel&quot;&gt;Dirk Eddelbuettel&lt;/a&gt;提供了Annoy的&lt;a href=&quot;http://dirk.eddelbuettel.com/code/rcpp.annoy.html&quot;&gt;R版本&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1d5ef4bbf847f1ee5dd27ffca9dc159fa4368b3b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/erikbern/ann-benchmarks&quot;&gt;ann-benchmarks&lt;/a&gt; is a benchmark for several approximate nearest neighbor libraries. Annoy seems to be fairly competitive, especially at higher precisions:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/erikbern/ann-benchmarks&quot;&gt;ann-benchmarks&lt;/a&gt;是几个近似最近邻居库的基准。烦恼似乎具有相当的竞争力，尤其是在更高的精度下：</target>
        </trans-unit>
        <trans-unit id="d57d4b029e0540315b6ce066a436f92fc747a8c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mskimm&quot;&gt;Min-Seok Kim&lt;/a&gt; built a &lt;a href=&quot;https://github.com/mskimm/ann4s&quot;&gt;Scala version&lt;/a&gt; of Annoy.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mskimm&quot;&gt;Min-Seok Kim制作&lt;/a&gt;了&lt;a href=&quot;https://github.com/mskimm/ann4s&quot;&gt;Scala版本&lt;/a&gt;的Annoy。</target>
        </trans-unit>
        <trans-unit id="9d7e23bd89258423c9304f577dfb5c05c9c123ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pishen&quot;&gt;Pishen Tsai&lt;/a&gt; provides a &lt;a href=&quot;https://github.com/pishen/annoy4s&quot;&gt;Scala wrapper of Annoy&lt;/a&gt; which uses JNA to call the C++ library of Annoy.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pishen&quot;&gt;Pishen Tsai&lt;/a&gt;提供了&lt;a href=&quot;https://github.com/pishen/annoy4s&quot;&gt;Annoy&lt;/a&gt;的Scala包装器，该包装器使用JNA调用Annoy的C ++库。</target>
        </trans-unit>
        <trans-unit id="64ed893e60f6273daccd5ac9423328d81aa013c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/starius&quot;&gt;Boris Nagaev&lt;/a&gt; wrote &lt;a href=&quot;https://github.com/spotify/annoy/blob/master/README_Lua.md&quot;&gt;Lua bindings&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/starius&quot;&gt;鲍里斯&amp;bull;纳加耶夫&lt;/a&gt;（Boris Nagaev）写了&lt;a href=&quot;https://github.com/spotify/annoy/blob/master/README_Lua.md&quot;&gt;Lua的&lt;/a&gt;装订书。</target>
        </trans-unit>
        <trans-unit id="9783c3ea0b8263dff7b13d827bc369879370bfdb" translate="yes" xml:space="preserve">
          <source>Annoy</source>
          <target state="translated">恼人</target>
        </trans-unit>
        <trans-unit id="e9e5f90cd83af2fcdbeecf5b87130912dd29df33" translate="yes" xml:space="preserve">
          <source>Annoy (&lt;a href=&quot;http://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximate_nearest_neighbor&quot;&gt;Approximate Nearest Neighbors&lt;/a&gt; Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are &lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;mmapped&lt;/a&gt; into memory so that many processes may share the same data.</source>
          <target state="translated">Annoy（哦，是，&lt;a href=&quot;http://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximate_nearest_neighbor&quot;&gt;最近邻居&lt;/a&gt;）是一个带有Python绑定的C ++库，用于搜索空间中接近给定查询点的点。它还会创建大型的基于文件的只读数据结构，这些结构被&lt;a href=&quot;https://en.wikipedia.org/wiki/Mmap&quot;&gt;映射&lt;/a&gt;到内存中，以便许多进程可以共享相同的数据。</target>
        </trans-unit>
        <trans-unit id="0dd02066da1eea79ef40d6035b7d2ac1cbe726c8" translate="yes" xml:space="preserve">
          <source>Annoy uses Euclidean distance of normalized vectors for its angular distance, which for two vectors u,v is equal to</source>
          <target state="translated">Annoy使用归一化向量的欧几里得距离来表示其角距离,对于两个向量u,v等于</target>
        </trans-unit>
        <trans-unit id="80a89a29da34a4d94530522d816f2ad0f1ee4ff3" translate="yes" xml:space="preserve">
          <source>Annoy was built by &lt;a href=&quot;http://www.erikbern.com&quot;&gt;Erik Bernhardsson&lt;/a&gt; in a couple of afternoons during &lt;a href=&quot;http://labs.spotify.com/2013/02/15/organizing-a-hack-week/&quot;&gt;Hack Week&lt;/a&gt;.</source>
          <target state="translated">Annoy由&lt;a href=&quot;http://www.erikbern.com&quot;&gt;Erik Bernhardsson&lt;/a&gt;在&lt;a href=&quot;http://labs.spotify.com/2013/02/15/organizing-a-hack-week/&quot;&gt;Hack Week&lt;/a&gt;的几个下午建造。</target>
        </trans-unit>
        <trans-unit id="f1f553308862adf9749b0e0ab8d70b826df094dc" translate="yes" xml:space="preserve">
          <source>AnnoyIndex(f, metric)</source>
          <target state="translated">AnnoyIndex(f,metric)</target>
        </trans-unit>
        <trans-unit id="ba522c836db9dbe15bbcc8cf05c3565ff3440e83" translate="yes" xml:space="preserve">
          <source>Approximate Nearest Neighbors in C++/Python optimized for memory usage and loading/saving to disk.</source>
          <target state="translated">在C++/Python中,对内存使用和加载/保存到磁盘进行了优化的近似邻居。</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">背景资料</target>
        </trans-unit>
        <trans-unit id="a463fdc81a550d5d714400a7cba7bff71f026753" translate="yes" xml:space="preserve">
          <source>Build index on disk to enable indexing big datasets that won&amp;rsquo;t fit into memory (contributed by &lt;a href=&quot;https://github.com/ReneHollander&quot;&gt;Rene Hollander&lt;/a&gt;)</source>
          <target state="translated">在磁盘上建立索引，以使无法放入内存的大型数据集索引（由&lt;a href=&quot;https://github.com/ReneHollander&quot;&gt;Rene Hollander提供&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="d62f1b432900b8309589f2d3fe3847e42365b7fb" translate="yes" xml:space="preserve">
          <source>Cosine distance is equivalent to Euclidean distance of normalized vectors = sqrt(2-2*cos(u, v))</source>
          <target state="translated">余弦距离相当于归一化向量的欧氏距离=sqrt(2-2*cos(u,v))</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="85016ac7fabd0f269f3323d663fd847b3d8b64a4" translate="yes" xml:space="preserve">
          <source>Discuss</source>
          <target state="translated">讨论</target>
        </trans-unit>
        <trans-unit id="0c8b45af79c3492fccbdabb0b225dab931085628" translate="yes" xml:space="preserve">
          <source>Dot Product distance (contributed by &lt;a href=&quot;https://github.com/psobot&quot;&gt;Peter Sobot&lt;/a&gt;) reduces the provided vectors from dot (or &amp;ldquo;inner-product&amp;rdquo;) space to a more query-friendly cosine space using &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/XboxInnerProduct.pdf&quot;&gt;a method by Bachrach et al., at Microsoft Research, published in 2014&lt;/a&gt;.</source>
          <target state="translated">点积距离（由&lt;a href=&quot;https://github.com/psobot&quot;&gt;Peter Sobot&lt;/a&gt;贡献）使用&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/XboxInnerProduct.pdf&quot;&gt;2014年出版的Microsoft Research的Bachrach等人的方法，&lt;/a&gt;将提供的矢量从点（或&amp;ldquo;内积&amp;rdquo;）空间减少到更便于查询的余弦空间。</target>
        </trans-unit>
        <trans-unit id="27197234704db5e448f0154848849c7e3f299f9a" translate="yes" xml:space="preserve">
          <source>During part of Spotify Hack Week 2016 (and a bit afterward), &lt;a href=&quot;https://github.com/jimkang&quot;&gt;Jim Kang&lt;/a&gt; wrote &lt;a href=&quot;https://github.com/jimkang/annoy-node&quot;&gt;Node bindings&lt;/a&gt; for Annoy.</source>
          <target state="translated">在2016年Spotify Hack Week期间（及之后），&lt;a href=&quot;https://github.com/jimkang&quot;&gt;Jim Kang&lt;/a&gt;为Annoy 编写了&lt;a href=&quot;https://github.com/jimkang/annoy-node&quot;&gt;Node绑定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="97cdbdc7feff827efb082a6b6dd2727237cd49fd" translate="yes" xml:space="preserve">
          <source>False</source>
          <target state="translated">假的</target>
        </trans-unit>
        <trans-unit id="3bbb58d368c647215eb98c7c6c71656d8439cd0d" translate="yes" xml:space="preserve">
          <source>Feel free to post any questions or comments to the &lt;a href=&quot;https://groups.google.com/group/annoy-user&quot;&gt;annoy-user&lt;/a&gt; group. I&amp;rsquo;m &lt;a href=&quot;https://twitter.com/fulhack&quot;&gt;@fulhack&lt;/a&gt; on Twitter.</source>
          <target state="translated">随时向&lt;a href=&quot;https://groups.google.com/group/annoy-user&quot;&gt;烦恼的用户&lt;/a&gt;组发布任何问题或评论。我是Twitter上的&lt;a href=&quot;https://twitter.com/fulhack&quot;&gt;@fulhack&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="459c1d1bffec82561c0ebce50c0d428582e3d932" translate="yes" xml:space="preserve">
          <source>For the C++ version, just clone the repo and</source>
          <target state="translated">对于C++版本,只需克隆repo和</target>
        </trans-unit>
        <trans-unit id="36e52933fd7e4520e7d5e1ae98e05cd36ee41bbf" translate="yes" xml:space="preserve">
          <source>For the latest source, discussion, etc, please visit the
&lt;a href=&quot;https://github.com/spotify/annoy&quot;&gt;GitHub repository&lt;/a&gt;</source>
          <target state="translated">有关最新资源，讨论等，请访问 &lt;a href=&quot;https://github.com/spotify/annoy&quot;&gt;GitHub存储库&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5af588ff24b3f9e5707e7eb2d980b8ac657ca836" translate="yes" xml:space="preserve">
          <source>Full Python API</source>
          <target state="translated">完整的Python API</target>
        </trans-unit>
        <trans-unit id="00963f0f4bb401987fb1c7b0cbe9e39ff9624271" translate="yes" xml:space="preserve">
          <source>Hamming distance (contributed by &lt;a href=&quot;https://github.com/maumueller&quot;&gt;Martin Aum&amp;uuml;ller&lt;/a&gt;) packs the data into 64-bit integers under the hood and uses built-in bit count primitives so it could be quite fast. All splits are axis-aligned.</source>
          <target state="translated">汉明距离（由&lt;a href=&quot;https://github.com/maumueller&quot;&gt;MartinAum&amp;uuml;ller&lt;/a&gt;贡献）将数据打包成底层的 64位整数，并使用内置的位计数原语，因此速度可能很快。所有拆分均与轴对齐。</target>
        </trans-unit>
        <trans-unit id="835b57473e1467705aca6b6eda2456af09b8ed84" translate="yes" xml:space="preserve">
          <source>How does it work</source>
          <target state="translated">它是如何工作的</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">如果</target>
        </trans-unit>
        <trans-unit id="2cc48c36c38745d3a6771d181f702b47f3a3a0b3" translate="yes" xml:space="preserve">
          <source>Index creation is separate from lookup (in particular you can not add more items once the tree has been created)</source>
          <target state="translated">索引的创建与查找是分开的(特别是一旦创建了树,你就不能再添加更多的项目了</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="22cda533c7c178dafb471feace7fdef6209513af" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s all written in C++ with a handful of ugly optimizations for performance and memory usage. You have been warned :)</source>
          <target state="translated">所有这些都是用C ++编写的，并对性能和内存使用进行了一些难看的优化。你被警告了 ：）</target>
        </trans-unit>
        <trans-unit id="8d990b898d59117410ed57592a64dad4c718f210" translate="yes" xml:space="preserve">
          <source>Lets you share memory between multiple processes</source>
          <target state="translated">让您在多个进程之间共享内存</target>
        </trans-unit>
        <trans-unit id="a75c9babc38b22b751167a18847100aee11d2de4" translate="yes" xml:space="preserve">
          <source>MAP_POPULATE</source>
          <target state="translated">MAP_POPULATE</target>
        </trans-unit>
        <trans-unit id="59842d981c57fb9cc87deffb5fe760f6cbaebe00" translate="yes" xml:space="preserve">
          <source>More info</source>
          <target state="translated">更多信息</target>
        </trans-unit>
        <trans-unit id="3afa997913a199a793d47ca9afc0d37b46a1f796" translate="yes" xml:space="preserve">
          <source>Native Python support, tested with 2.7, 3.6, and 3.7.</source>
          <target state="translated">原生Python支持,在2.7、3.6和3.7中测试。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">注:</target>
        </trans-unit>
        <trans-unit id="37294dde02354b99b34615f28a50a5068f8400d7" translate="yes" xml:space="preserve">
          <source>Python code example</source>
          <target state="translated">Python代码示例</target>
        </trans-unit>
        <trans-unit id="177bef74bbcc287eca8add594a6c94843bdf9337" translate="yes" xml:space="preserve">
          <source>Radim Řehůřek&amp;rsquo;s blog posts comparing Annoy to a couple of other similar Python libraries: &lt;a href=&quot;http://radimrehurek.com/2013/11/performance-shootout-of-nearest-neighbours-intro/&quot;&gt;Intro&lt;/a&gt;, &lt;a href=&quot;http://radimrehurek.com/2013/12/performance-shootout-of-nearest-neighbours-contestants/&quot;&gt;Contestants&lt;/a&gt;, &lt;a href=&quot;http://radimrehurek.com/2014/01/performance-shootout-of-nearest-neighbours-querying/&quot;&gt;Querying&lt;/a&gt;</source>
          <target state="translated">RadimŘehůřek的博客文章将Annoy与其他几个类似的Python库进行了比较：&lt;a href=&quot;http://radimrehurek.com/2013/11/performance-shootout-of-nearest-neighbours-intro/&quot;&gt;Intro&lt;/a&gt;，&lt;a href=&quot;http://radimrehurek.com/2013/12/performance-shootout-of-nearest-neighbours-contestants/&quot;&gt;Contestants&lt;/a&gt;，&lt;a href=&quot;http://radimrehurek.com/2014/01/performance-shootout-of-nearest-neighbours-querying/&quot;&gt;Querying&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="64ed0d15bde72919d6938ecb913572c364089227" translate="yes" xml:space="preserve">
          <source>Right now it only accepts integers as identifiers for items. Note that it will allocate memory for max(id)+1 items because it assumes your items are numbered 0 &amp;hellip; n-1. If you need other id&amp;rsquo;s, you will have to keep track of a map yourself.</source>
          <target state="translated">现在，它仅接受整数作为项的标识符。请注意，它将为max（id）+1个项目分配内存，因为它假定您的项目编号为0&amp;hellip;n-1。如果您需要其他ID，则必须自己跟踪地图。</target>
        </trans-unit>
        <trans-unit id="4eb2b69fdaf53dfe8d621287aa314faa108ce92b" translate="yes" xml:space="preserve">
          <source>Small memory usage</source>
          <target state="translated">占用内存小</target>
        </trans-unit>
        <trans-unit id="22a35fbebff47762d94faae1d7babdf97b0736bf" translate="yes" xml:space="preserve">
          <source>Source code</source>
          <target state="translated">源代码</target>
        </trans-unit>
        <trans-unit id="80ae2f5ddca99ebbe128ba09852071db98684819" translate="yes" xml:space="preserve">
          <source>Summary of features</source>
          <target state="translated">特征摘要</target>
        </trans-unit>
        <trans-unit id="d154ab6aceabbb0f822692573bbf6ffae0f7fb02" translate="yes" xml:space="preserve">
          <source>The C++ API is very similar: just</source>
          <target state="translated">C++的API非常相似:只要</target>
        </trans-unit>
        <trans-unit id="5c03ec2f8632d965171149c86606c1bfe1357e9e" translate="yes" xml:space="preserve">
          <source>The code should support Windows, thanks to &lt;a href=&quot;https://github.com/thirdwing&quot;&gt;Qiang Kou&lt;/a&gt; and &lt;a href=&quot;https://github.com/tjrileywisc&quot;&gt;Timothy Riley&lt;/a&gt;.</source>
          <target state="translated">感谢&lt;a href=&quot;https://github.com/thirdwing&quot;&gt;强强&lt;/a&gt;和&lt;a href=&quot;https://github.com/tjrileywisc&quot;&gt;Timothy Riley的&lt;/a&gt;支持，该代码应支持Windows 。</target>
        </trans-unit>
        <trans-unit id="04f2c8b8ff9aa960f0af5415a6b4646799baa6ab" translate="yes" xml:space="preserve">
          <source>There are just two main parameters needed to tune Annoy: the number of trees</source>
          <target state="translated">调整Annoy只需要两个主要参数:树的数量。</target>
        </trans-unit>
        <trans-unit id="a569e7d530dc36bc4732bba86719589bf5e00981" translate="yes" xml:space="preserve">
          <source>There are some other libraries to do nearest neighbor search. Annoy is almost as fast as the fastest libraries, (see below), but there is actually another feature that really sets Annoy apart: it has the ability to &lt;strong&gt;use static files as indexes&lt;/strong&gt;. In particular, this means you can &lt;strong&gt;share index across processes&lt;/strong&gt;. Annoy also decouples creating indexes from loading them, so you can pass around indexes as files and map them into memory quickly. Another nice thing of Annoy is that it tries to minimize memory footprint so the indexes are quite small.</source>
          <target state="translated">还有其他一些库可以进行最近邻居搜索。 Annoy的速度几​​乎与最快的库一样快（见下文），但实际上还有另一个功能确实使Annoy与众不同：它具有&lt;strong&gt;使用静态文件作为索引的功能&lt;/strong&gt;。特别是，这意味着您可以&lt;strong&gt;跨进程共享索引&lt;/strong&gt;。 Annoy还使创建索引与加载索引脱钩，因此您可以将索引作为文件传递并快速将其映射到内存中。 Annoy的另一个好处是，它试图最小化内存占用，因此索引很小。</target>
        </trans-unit>
        <trans-unit id="3796a1d066f1e5893a31a802e2506cda3dac133b" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://github.com/spotify/annoy/blob/master/README_GO.rst&quot;&gt;experimental support for Go&lt;/a&gt; provided by &lt;a href=&quot;https://github.com/rosmo&quot;&gt;Taneli Lepp&amp;auml;&lt;/a&gt;.</source>
          <target state="translated">有&lt;a href=&quot;https://github.com/spotify/annoy/blob/master/README_GO.rst&quot;&gt;对围棋的实验性支持&lt;/a&gt;提供&lt;a href=&quot;https://github.com/rosmo&quot;&gt;TaneliLepp&amp;auml;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbfcfd7134a0650c20a422e47e77eb23d7e00b03" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no bounds checking performed on the values so be careful.</source>
          <target state="translated">没有对值执行边界检查，因此请小心。</target>
        </trans-unit>
        <trans-unit id="f9b76c75f46bab371e220e9adae8a5df2309537a" translate="yes" xml:space="preserve">
          <source>To install, simply do</source>
          <target state="translated">要安装,只需进行以下操作</target>
        </trans-unit>
        <trans-unit id="abc61fab33fcefc8c53000786f2222397ad9f3c6" translate="yes" xml:space="preserve">
          <source>To run the tests, execute</source>
          <target state="translated">要运行测试,请执行</target>
        </trans-unit>
        <trans-unit id="f698e5b2645ac0bbc246d48b10271b68e9474767" translate="yes" xml:space="preserve">
          <source>Tradeoffs</source>
          <target state="translated">权衡利弊</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">True</target>
        </trans-unit>
        <trans-unit id="4746d266e6f62df15219643685ac1271316ea183" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://en.wikipedia.org/wiki/Locality-sensitive_hashing#Random_projection&quot;&gt;random projections&lt;/a&gt; and by building up a tree. At every intermediate node in the tree, a random hyperplane is chosen, which divides the space into two subspaces. This hyperplane is chosen by sampling two points from the subset and taking the hyperplane equidistant from them.</source>
          <target state="translated">使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Locality-sensitive_hashing#Random_projection&quot;&gt;随机投影&lt;/a&gt;并构建一棵树。在树中的每个中间节点处，选择一个随机超平面，该超平面将空间分为两个子空间。通过从子集中采样两个点并选择与它们等距的超平面来选择此超平面。</target>
        </trans-unit>
        <trans-unit id="5cec04517c9ac86518a828f0883d9cd3a15b448b" translate="yes" xml:space="preserve">
          <source>We do this k times so that we get a forest of trees. k has to be tuned to your need, by looking at what tradeoff you have between precision and performance.</source>
          <target state="translated">k必须根据你的需求进行调整,看你在精度和性能之间有什么权衡。</target>
        </trans-unit>
        <trans-unit id="754af1004ae80d9f56fcf14eaaad59eb3d25d1f8" translate="yes" xml:space="preserve">
          <source>We use it at &lt;a href=&quot;http://www.spotify.com/&quot;&gt;Spotify&lt;/a&gt; for music recommendations. After running matrix factorization algorithms, every user/item can be represented as a vector in f-dimensional space. This library helps us search for similar users/items. We have many millions of tracks in a high-dimensional space, so memory usage is a prime concern.</source>
          <target state="translated">我们在&lt;a href=&quot;http://www.spotify.com/&quot;&gt;Spotify上&lt;/a&gt;使用它来推荐音乐。运行矩阵分解算法后，每个用户/项目都可以表示为f维空间中的向量。该库可帮助我们搜索相似的用户/项目。在高维空间中，我们有数百万条轨道，因此内存使用是首要考虑的问题。</target>
        </trans-unit>
        <trans-unit id="d98f3293eddd46a7ffc7f06b56a8673fbf74ff94" translate="yes" xml:space="preserve">
          <source>Why is this useful? If you want to find nearest neighbors and you have many CPU&amp;rsquo;s, you only need to build the index once. You can also pass around and distribute static files to use in production environment, in Hadoop jobs, etc. Any process will be able to load (mmap) the index into memory and will be able to do lookups immediately.</source>
          <target state="translated">为什么这有用？如果要查找最近的邻居并且有很多CPU，则只需建立一次索引。您还可以传递并分发静态文件以用于生产环境，Hadoop作业等中。任何进程都将能够将索引加载（mmap）到内存中，并且能够立即执行查找。</target>
        </trans-unit>
        <trans-unit id="d59f28e37c50d2a1255ea9c36b482b211bdaa988" translate="yes" xml:space="preserve">
          <source>Works better if you don&amp;rsquo;t have too many dimensions (like &amp;lt;100) but seems to perform surprisingly well even up to 1,000 dimensions</source>
          <target state="translated">如果您没有太多的尺寸（例如&amp;lt;100），效果会更好，但即使在多达1000个尺寸上，其表现也令人惊讶</target>
        </trans-unit>
        <trans-unit id="85076dfb114ca34bada94f9b8c70443fe2358671" translate="yes" xml:space="preserve">
          <source>You can also accept slower search times in favour of reduced loading times, memory usage, and disk IO. On supported platforms the index is prefaulted during</source>
          <target state="translated">您也可以接受较慢的搜索时间,以减少加载时间、内存使用和磁盘IO。在受支持的平台上,索引会在</target>
        </trans-unit>
        <trans-unit id="70dd8f0f298f2e75403925a5c6ba11a959666239" translate="yes" xml:space="preserve">
          <source>a.add_item(i, v)</source>
          <target state="translated">a.add_item(i,v)</target>
        </trans-unit>
        <trans-unit id="2a25c241c37a9718dbb2ef6c3577c40f5aad2a86" translate="yes" xml:space="preserve">
          <source>a.build(n_trees)</source>
          <target state="translated">a.build(n_trees)</target>
        </trans-unit>
        <trans-unit id="782a766a87ba88aaa9687138d39d5828c6d9b92b" translate="yes" xml:space="preserve">
          <source>a.get_distance(i, j)</source>
          <target state="translated">a.get_distance(i,j)</target>
        </trans-unit>
        <trans-unit id="009e74f14dd5e36196d97938a13350c3f25a4c1e" translate="yes" xml:space="preserve">
          <source>a.get_item_vector(i)</source>
          <target state="translated">a.get_item_vector(i)</target>
        </trans-unit>
        <trans-unit id="5eadcd5e1ef5ab6bc065583d0f0b5ac6dcec1aa7" translate="yes" xml:space="preserve">
          <source>a.get_n_items()</source>
          <target state="translated">a.get_n_items()</target>
        </trans-unit>
        <trans-unit id="2bc11c894e7ad049416ff182651cd1b0e5324e6a" translate="yes" xml:space="preserve">
          <source>a.get_n_trees()</source>
          <target state="translated">a.get_n_trees()</target>
        </trans-unit>
        <trans-unit id="53dd997e92ab7decf9cddad1f05746fca4d89f0a" translate="yes" xml:space="preserve">
          <source>a.get_nns_by_item(i, n, search_k=-1, include_distances=False)</source>
          <target state="translated">a.get_nns_by_item(i,n,search_k=-1,include_distances=False)</target>
        </trans-unit>
        <trans-unit id="37803d56d687ecc893dd1857b52758cf812f85f8" translate="yes" xml:space="preserve">
          <source>a.get_nns_by_vector(v, n, search_k=-1, include_distances=False)</source>
          <target state="translated">a.get_nns_by_vector(v,n,search_k=-1,include_distances=False)</target>
        </trans-unit>
        <trans-unit id="01160e27d6339c854de7a38ba019d2519a8db0f4" translate="yes" xml:space="preserve">
          <source>a.load(fn, prefault=False)</source>
          <target state="translated">a.load(fn,prefault=False)</target>
        </trans-unit>
        <trans-unit id="6af70f27ac521da04018b350588abf56a15de88f" translate="yes" xml:space="preserve">
          <source>a.on_disk_build(fn)</source>
          <target state="translated">a.on_disk_build(fn)</target>
        </trans-unit>
        <trans-unit id="cca2c1436c0aa3dcdc516033156a5b482b744ca3" translate="yes" xml:space="preserve">
          <source>a.save(fn, prefault=False)</source>
          <target state="translated">a.save(fn,prefault=False)</target>
        </trans-unit>
        <trans-unit id="3eb73d3e5ac1fc196ffea52e2b21bd00ba450508" translate="yes" xml:space="preserve">
          <source>a.unload()</source>
          <target state="translated">a.unload()</target>
        </trans-unit>
        <trans-unit id="e21d8cc269b9de84c58cb305e4933d6bb12f5263" translate="yes" xml:space="preserve">
          <source>adds item</source>
          <target state="translated">添加项目</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="70cbe69e3e34fde70b8fc8e78b8df6f3a1efee36" translate="yes" xml:space="preserve">
          <source>and the number of nodes to inspect during searching</source>
          <target state="translated">以及在搜索过程中要检查的节点数量。</target>
        </trans-unit>
        <trans-unit id="aea5b82764bdaf53444d81bce6412b9cc0fc03cb" translate="yes" xml:space="preserve">
          <source>are roughly independent, i.e. a the value of</source>
          <target state="translated">大致上是独立的,即a的值。</target>
        </trans-unit>
        <trans-unit id="25b992e04189889bf66ebd4e1ab94b26d968415a" translate="yes" xml:space="preserve">
          <source>as large as possible given the amount of memory you can afford, and it&amp;rsquo;s recommended to set</source>
          <target state="translated">给定尽可能大的内存，建议设置</target>
        </trans-unit>
        <trans-unit id="388a65acd0f7e72c2432910e98989ce7878b6cc5" translate="yes" xml:space="preserve">
          <source>as large as possible given the time constraints you have for the queries.</source>
          <target state="translated">鉴于你对查询的时间限制,尽可能的大。</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">构建</target>
        </trans-unit>
        <trans-unit id="c8a23db50ea2597dd91b967d012abd0bff7c2a8c" translate="yes" xml:space="preserve">
          <source>builds a forest of</source>
          <target state="translated">营造森林</target>
        </trans-unit>
        <trans-unit id="269bd4948694ac656c016e2b62abb94212876342" translate="yes" xml:space="preserve">
          <source>closest items. During the query it will inspect up to</source>
          <target state="translated">最接近的项目。在查询过程中,它将最多检查</target>
        </trans-unit>
        <trans-unit id="aa90b2b34e6737929233d0161775252de64dea89" translate="yes" xml:space="preserve">
          <source>dimensions. Metric can be</source>
          <target state="translated">尺寸。公制可以是</target>
        </trans-unit>
        <trans-unit id="4a0a19218e082a343a1b17e5333409af9d98f0f5" translate="yes" xml:space="preserve">
          <source>f</source>
          <target state="translated">f</target>
        </trans-unit>
        <trans-unit id="652beb3183b4189b3d7cdbb4fde7e22afc5a67d8" translate="yes" xml:space="preserve">
          <source>gives you a run-time tradeoff between better accuracy and speed. If you set</source>
          <target state="translated">为您提供了一个运行时间的折中,在更好的精度和速度之间。如果您将</target>
        </trans-unit>
        <trans-unit id="042dc4512fa3d391c5170cf3aa61e6a638f84342" translate="yes" xml:space="preserve">
          <source>i</source>
          <target state="translated">i</target>
        </trans-unit>
        <trans-unit id="d04a4a41100bd78ec650b89e2521696c9e9bead3" translate="yes" xml:space="preserve">
          <source>if not provided.</source>
          <target state="translated">如果没有提供。</target>
        </trans-unit>
        <trans-unit id="62c0c7ac7ff89a5b3e1a3f1530973e006e77c236" translate="yes" xml:space="preserve">
          <source>include_distances</source>
          <target state="translated">include_distances</target>
        </trans-unit>
        <trans-unit id="c936ab18559091d34bfcbb167fcadfeb2a13ca7b" translate="yes" xml:space="preserve">
          <source>is a constant depending on the metric. Otherwise,</source>
          <target state="translated">是一个常数,取决于度量。否则。</target>
        </trans-unit>
        <trans-unit id="ac085875fd8673d1f78ed39f34ce7c0c974b3c6b" translate="yes" xml:space="preserve">
          <source>is held constant and vice versa. Basically it&amp;rsquo;s recommended to set</source>
          <target state="translated">保持不变，反之亦然。基本上建议设置</target>
        </trans-unit>
        <trans-unit id="b45729b372ab65d1e80ddda04b2a79d7f6add315" translate="yes" xml:space="preserve">
          <source>is not provided, it will default to</source>
          <target state="translated">没有提供,它将默认为</target>
        </trans-unit>
        <trans-unit id="fc18a81ce7c3bf6337360647199eb6344cd2a474" translate="yes" xml:space="preserve">
          <source>is provided during build time and affects the build time and the index size. A larger value will give more accurate results, but larger indexes.</source>
          <target state="translated">是在构建时提供的,会影响构建时间和索引大小。值越大,结果越准确,但索引越大。</target>
        </trans-unit>
        <trans-unit id="477b5b9cc459c57d470996a132d87e98db73bca8" translate="yes" xml:space="preserve">
          <source>is provided in runtime and affects the search performance. A larger value will give more accurate results, but will take longer time to return.</source>
          <target state="translated">是在运行时提供的,会影响搜索性能。值越大,结果越准确,但需要更长的时间来返回。</target>
        </trans-unit>
        <trans-unit id="04aea98291c14f68c64d647870dcc66791bebff3" translate="yes" xml:space="preserve">
          <source>is set to</source>
          <target state="translated">设置为</target>
        </trans-unit>
        <trans-unit id="bafd78e6bdab5077f56fc4436b18e2db22fcd1d6" translate="yes" xml:space="preserve">
          <source>is the number of approximate nearest neighbors and</source>
          <target state="translated">是近似最近的邻居数,而</target>
        </trans-unit>
        <trans-unit id="3882d7e94f0d77db2e8c250fc65c86e5fb79ee7f" translate="yes" xml:space="preserve">
          <source>items.</source>
          <target state="translated">项目:</target>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="5dbc716c4600097b85b9e51d6aeb77a4363b03ed" translate="yes" xml:space="preserve">
          <source>load</source>
          <target state="translated">负荷</target>
        </trans-unit>
        <trans-unit id="6040fe12c3dea2bfa67dc351d3759bafcc291ec4" translate="yes" xml:space="preserve">
          <source>loads (mmaps) an index from disk. If</source>
          <target state="translated">从磁盘加载(mmaps)一个索引。如果</target>
        </trans-unit>
        <trans-unit id="e948bcc77b9fc135d227cbb471faf7ea7ddd830c" translate="yes" xml:space="preserve">
          <source>max(i)+1</source>
          <target state="translated">max(i)+1</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="0472d93fd49eba0061cdc5168b8a8e3826744127" translate="yes" xml:space="preserve">
          <source>n * n_trees * D</source>
          <target state="translated">n*n_trees*D</target>
        </trans-unit>
        <trans-unit id="cde4bd3cb39741fe18db208ea1e84a096820e2fe" translate="yes" xml:space="preserve">
          <source>n_trees</source>
          <target state="translated">n_trees</target>
        </trans-unit>
        <trans-unit id="fdf854d3022548ff88be557687d683b0b59c86a8" translate="yes" xml:space="preserve">
          <source>n_trees * n</source>
          <target state="translated">n_trees*n</target>
        </trans-unit>
        <trans-unit id="475ccda37f2e81659078651dedf705a5e124f52d" translate="yes" xml:space="preserve">
          <source>nodes which defaults to</source>
          <target state="translated">节点,默认为</target>
        </trans-unit>
        <trans-unit id="b030cd60a7f6aeaf171916dea83da3e282464cea" translate="yes" xml:space="preserve">
          <source>pip install --user annoy</source>
          <target state="translated">pip install --user annoy</target>
        </trans-unit>
        <trans-unit id="355a3ec8c028ba2fde0f342e421077b7c4687574" translate="yes" xml:space="preserve">
          <source>prefault</source>
          <target state="translated">逾期</target>
        </trans-unit>
        <trans-unit id="e69a3a743ba46b572017d4c88e624bc3dd078413" translate="yes" xml:space="preserve">
          <source>prepares annoy to build the index in the specified file instead of RAM (execute before adding items, no need to save after build)</source>
          <target state="translated">准备在指定的文件中建立索引,而不是在RAM中建立索引(在添加项目前执行,建立后无需保存)</target>
        </trans-unit>
        <trans-unit id="de59633d9975c3e79e9e4b5384d346c4a578c717" translate="yes" xml:space="preserve">
          <source>python setup.py nosetests</source>
          <target state="translated">python setup.py nosetests</target>
        </trans-unit>
        <trans-unit id="df9ce6fa00fdac9175368a43a5e2286d93060a20" translate="yes" xml:space="preserve">
          <source>returns a new index that&amp;rsquo;s read-write and stores vector of</source>
          <target state="translated">返回一个读写的新索引，并存储向量</target>
        </trans-unit>
        <trans-unit id="8fb5e45e31b0cbdd7bc1a7e4cca72e0f67deb6b0" translate="yes" xml:space="preserve">
          <source>returns the</source>
          <target state="translated">返回</target>
        </trans-unit>
        <trans-unit id="5b16466351719315b331b7936642daa9ef2da8f4" translate="yes" xml:space="preserve">
          <source>returns the distance between items</source>
          <target state="translated">返回项目之间的距离</target>
        </trans-unit>
        <trans-unit id="7aeb900ac98f6db91805b54754d79e428e30fb72" translate="yes" xml:space="preserve">
          <source>returns the number of items in the index.</source>
          <target state="translated">返回索引中的项目数。</target>
        </trans-unit>
        <trans-unit id="65e1a69a8c81a1548c9b02dc9d4392e07320d2fe" translate="yes" xml:space="preserve">
          <source>returns the number of trees in the index.</source>
          <target state="translated">返回索引中树木的数量。</target>
        </trans-unit>
        <trans-unit id="e8b8183adcc37b4fa6146f6411d4c2f8fd723553" translate="yes" xml:space="preserve">
          <source>returns the vector for item</source>
          <target state="translated">返回项目的向量</target>
        </trans-unit>
        <trans-unit id="052940c6daaeded4a0400e352a1457eb4ca76961" translate="yes" xml:space="preserve">
          <source>same but query by vector</source>
          <target state="translated">同样的,但用向量查询</target>
        </trans-unit>
        <trans-unit id="13a4a11319d31c1b323d5774f44240a9ffc984d0" translate="yes" xml:space="preserve">
          <source>save</source>
          <target state="translated">保存</target>
        </trans-unit>
        <trans-unit id="496071e77cdb7a5e75ba97c95c86a4c1fe2b4fc9" translate="yes" xml:space="preserve">
          <source>saves the index to disk and loads it (see next function). After saving, no more items can be added.</source>
          <target state="translated">将索引保存到磁盘并加载它(见下一个功能)。保存后,不能再添加项目。</target>
        </trans-unit>
        <trans-unit id="cb5e2272998c193f332eed4ab0ec67d8b028a39a" translate="yes" xml:space="preserve">
          <source>search_k</source>
          <target state="translated">搜索_k</target>
        </trans-unit>
        <trans-unit id="5812b28ddc6d4cc63452b713bd490f6021c3de34" translate="yes" xml:space="preserve">
          <source>sqrt(2(1-cos(u,v)))</source>
          <target state="translated">sqrt(2(1-cos(u,v)))</target>
        </trans-unit>
        <trans-unit id="f4172de10a385f0d46e5704b9af4f90f22f15116" translate="yes" xml:space="preserve">
          <source>that was previously added.</source>
          <target state="translated">之前添加的。</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">にとって</target>
        </trans-unit>
        <trans-unit id="7903ad43db2933de2b9a4c5f518c50cec9795141" translate="yes" xml:space="preserve">
          <source>to get access to it.</source>
          <target state="translated">来获取它。</target>
        </trans-unit>
        <trans-unit id="bf53a97b606bbd8d23c6d2031438feb7693ce427" translate="yes" xml:space="preserve">
          <source>to pull down the latest version from &lt;a href=&quot;https://pypi.python.org/pypi/annoy&quot;&gt;PyPI&lt;/a&gt;.</source>
          <target state="translated">从&lt;a href=&quot;https://pypi.python.org/pypi/annoy&quot;&gt;PyPI&lt;/a&gt;下拉最新版本。</target>
        </trans-unit>
        <trans-unit id="31eb5cdf158a9d0aa0b0abcb6371f28ee9a7c2a6" translate="yes" xml:space="preserve">
          <source>trees. More trees gives higher precision when querying. After calling</source>
          <target state="translated">树。查询时,树越多,精度越高。在调用</target>
        </trans-unit>
        <trans-unit id="e9639abaed3bd830dc608863db2948ee488cb719" translate="yes" xml:space="preserve">
          <source>unloads.</source>
          <target state="translated">卸载。</target>
        </trans-unit>
        <trans-unit id="7a38d8cbd20d9932ba948efaa364bb62651d5ad4" translate="yes" xml:space="preserve">
          <source>v</source>
          <target state="translated">v</target>
        </trans-unit>
        <trans-unit id="46148cc3b4d2b3ac8073f14b0cba7f25ffff54bd" translate="yes" xml:space="preserve">
          <source>where</source>
          <target state="translated">哪儿</target>
        </trans-unit>
        <trans-unit id="8843dd6e967d734be1e3c0d9bb2280b5c7126ec2" translate="yes" xml:space="preserve">
          <source>will not affect search time if</source>
          <target state="translated">不会影响搜索时间,如果</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
