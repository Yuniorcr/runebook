<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/clyngor/">
    <body>
      <group id="clyngor">
        <trans-unit id="1592e063d7a969a69bf13c246c5059857832850d" translate="yes" xml:space="preserve">
          <source>&amp;hellip; the defined function &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; is now embedded in clyngor API</source>
          <target state="translated">&amp;hellip;定义的函数 &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; 现在嵌入在clyngor API中</target>
        </trans-unit>
        <trans-unit id="289088a8310c7a311823999259054510a07dd5d3" translate="yes" xml:space="preserve">
          <source>0.4.0 (todo)</source>
          <target state="translated">0.4.0(全部)</target>
        </trans-unit>
        <trans-unit id="748fae240ad995290d568f3bf4041a8f160dc31d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;examples/enum-optN.py&quot;&gt;new example&lt;/a&gt; showing how to retrieve all optimal models using clyngor, and&amp;hellip;</source>
          <target state="translated">&lt;a href=&quot;examples/enum-optN.py&quot;&gt;一个新示例，&lt;/a&gt;展示了如何使用clyngor检索所有最优模型，以及&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="c5e09701c4d09ee936abe9dbdc533a1b5798cd37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;examples/pyconstraint-is-not-working.lp&quot;&gt;demonstration&lt;/a&gt; of the non-working Constraint type implementation</source>
          <target state="translated">&lt;a href=&quot;examples/pyconstraint-is-not-working.lp&quot;&gt;&lt;/a&gt;非工作约束类型实现的演示</target>
        </trans-unit>
        <trans-unit id="fe241816de9724cd4877ee36cb2f370be394a869" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/1840c36e3f57c926a565fef7352cd1b083194e58&quot;&gt;1840c36e3&lt;/a&gt;: fix the &lt;code&gt;models.command&lt;/code&gt; output when clingo module is used</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/1840c36e3f57c926a565fef7352cd1b083194e58&quot;&gt;1840c36e3&lt;/a&gt;：使用clingo模块时修复 &lt;code&gt;models.command&lt;/code&gt; 输出</target>
        </trans-unit>
        <trans-unit id="fbdb8b2277eb0c5b48ea302639bcf2674f75704a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/2679d26a91720ab507fb7c2ffc41c064e8ca9cb9&quot;&gt;2679d26a9&lt;/a&gt;: optimize memory usage of &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; by using yield and answer number, but is now a generator and loses (the useless) &lt;code&gt;repeated_optimal&lt;/code&gt; option</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/2679d26a91720ab507fb7c2ffc41c064e8ca9cb9&quot;&gt;2679d26a9&lt;/a&gt;：的优化存储器使用 &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; 通过使用产率和答复号，但现在是发电机和失去（无用） &lt;code&gt;repeated_optimal&lt;/code&gt; 选项</target>
        </trans-unit>
        <trans-unit id="a2ff869151cf3d38e7dc67b9dc83071246b34534" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/31375774c437403e8a05f5fe8d0346caba0f43e4&quot;&gt;31375774c&lt;/a&gt;: when using clingo module, the models contains only the output atoms, not everything (thank you Arnaud)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/31375774c437403e8a05f5fe8d0346caba0f43e4&quot;&gt;31375774c&lt;/a&gt;：使用clingo模块时，模型仅包含输出原子，而不包含所有原子（感谢Arnaud）</target>
        </trans-unit>
        <trans-unit id="3d085383a6db5d4e86d8833638737bb398cc5f16" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/6efdb6ab0f0304b28b35d6ceb16545226b2f9e3e&quot;&gt;6efdb6ab0&lt;/a&gt;: fix combination of .as_pyasp and .parse_args, where atoms in args were not transformed as pyasp Atom objects.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/6efdb6ab0f0304b28b35d6ceb16545226b2f9e3e&quot;&gt;6efdb6ab0&lt;/a&gt;：修复.as_pyasp和.parse_args的组合，其中args中的原子未转换为pyasp Atom对象。</target>
        </trans-unit>
        <trans-unit id="216431aa8133aa273e2f437f35ecca8f2915e9ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/706747045cb96abcb9de1e2d729cd43c084cb36f&quot;&gt;706747045&lt;/a&gt;: handle default negation on atoms, by keeping the prefixed dash</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/706747045cb96abcb9de1e2d729cd43c084cb36f&quot;&gt;706747045&lt;/a&gt;：通过保留前缀破折号来处理原子的默认求反</target>
        </trans-unit>
        <trans-unit id="8735300782ab59c724dbce187778e0bbf4e68927" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/80245b2a72b8d76639b44a2315622f6743a7bc17&quot;&gt;80245b2a7&lt;/a&gt;: remove f-strings for 3.4 and 3.5 compat.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/80245b2a72b8d76639b44a2315622f6743a7bc17&quot;&gt;80245b2a7&lt;/a&gt;：删除3.4和3.5兼容的f字符串。</target>
        </trans-unit>
        <trans-unit id="e2cfb60636eb95a119324af27f91a566473e7f57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/c0c090c34a7028ba34c49815f0197c67c76e7bfb&quot;&gt;c0c090c34&lt;/a&gt;: parsing and string reproduction of nested atoms such as &lt;code&gt;a((a(&quot;g(2,3)&quot;,(2)),))&lt;/code&gt; is now correctly handled and tested</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/c0c090c34a7028ba34c49815f0197c67c76e7bfb&quot;&gt;c0c090c34&lt;/a&gt;：现在已正确处理和测试了嵌套原子（例如 &lt;code&gt;a((a(&quot;g(2,3)&quot;,(2)),))&lt;/code&gt; 解析和字符串重现</target>
        </trans-unit>
        <trans-unit id="4a47e8c29df9ee44e14879e06a5b81060ee532e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/cc60217975de123a5ef0d083fb10971e0d89c03e&quot;&gt;cc6021797&lt;/a&gt;: support for &lt;code&gt;.with_answer_number&lt;/code&gt;, giving model, optimization, optimality and answer number</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/cc60217975de123a5ef0d083fb10971e0d89c03e&quot;&gt;cc6021797&lt;/a&gt;：支持 &lt;code&gt;.with_answer_number&lt;/code&gt; ，提供模型，优化，最优性和答案号</target>
        </trans-unit>
        <trans-unit id="fbea8a4c8230a211ca0f77b1f33696e0cdd36e71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d4830ad521a6dcf9024f2c70f2f50e6b19f8c7a2&quot;&gt;d4830ad52&lt;/a&gt;: fix an import error</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d4830ad521a6dcf9024f2c70f2f50e6b19f8c7a2&quot;&gt;d4830ad52&lt;/a&gt;：修复导入错误</target>
        </trans-unit>
        <trans-unit id="67b5f3577dd616d233291f1f48946b7d0fab18d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d6507f17dbf27c6c309e3e4009a234b9d63134ba&quot;&gt;d6507f17d&lt;/a&gt;: careful parsing is automatically set when answer set &lt;a href=&quot;clyngor/parsing.py#L266&quot;&gt;obviously needs it&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d6507f17dbf27c6c309e3e4009a234b9d63134ba&quot;&gt;d6507f17d&lt;/a&gt;：在&lt;a href=&quot;clyngor/parsing.py#L266&quot;&gt;显然需要&lt;/a&gt;答案的情况下会自动设置仔细的解析。</target>
        </trans-unit>
        <trans-unit id="418811871ec4bfb4153b8807089398877089a784" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f2c65e8ae018b9d3589a058a09f9de87e1f3fdf3&quot;&gt;f2c65e8ae&lt;/a&gt;: fixed bug when using clingo module and &lt;code&gt;.int_not_parsed&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f2c65e8ae018b9d3589a058a09f9de87e1f3fdf3&quot;&gt;f2c65e8ae&lt;/a&gt;：修复了使用clingo模块和 &lt;code&gt;.int_not_parsed&lt;/code&gt; 时的错误。</target>
        </trans-unit>
        <trans-unit id="7584be4708f1cf0cd2b6c3be54caa057542275f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f92248e91def2c979fd2f8f8af3755b86485becf&quot;&gt;f92248e91&lt;/a&gt;: &lt;code&gt;#show 3.&lt;/code&gt; and &lt;code&gt;#show &quot;hello !&quot;.&lt;/code&gt; are now handled</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f92248e91def2c979fd2f8f8af3755b86485becf&quot;&gt;f92248e91&lt;/a&gt;： &lt;code&gt;#show 3.&lt;/code&gt; 和 &lt;code&gt;#show &quot;hello !&quot;.&lt;/code&gt; 现在已处理</target>
        </trans-unit>
        <trans-unit id="d1f8c8694b382068b19e49f8976ade310b5a9d00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/fe410757386e2c3e0881ecc90d7f18ee97672194&quot;&gt;fe4107573&lt;/a&gt;: correctly parse atoms starting with underscores.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/fe410757386e2c3e0881ecc90d7f18ee97672194&quot;&gt;fe4107573&lt;/a&gt;：正确解析以下划线开头的原子。</target>
        </trans-unit>
        <trans-unit id="28c9a1c6507374fd246d796daaae2179d1567f83" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/12698328/3077939&quot;&gt;timeout&lt;/a&gt; in addition to time-limit</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/12698328/3077939&quot;&gt;&lt;/a&gt;除了时间限制之外的超时</target>
        </trans-unit>
        <trans-unit id="b4feaf9d53dcb74337c186e0f288807287b5e41c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TermSet.add&lt;/code&gt; to add atoms to the TermSet</source>
          <target state="translated">&lt;code&gt;TermSet.add&lt;/code&gt; 将原子添加到TermSet</target>
        </trans-unit>
        <trans-unit id="62bfa8f662403c006406747a2b3b8fc173fc6776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TermSet.union&lt;/code&gt; to generate the union of multiple TermSet instances</source>
          <target state="translated">&lt;code&gt;TermSet.union&lt;/code&gt; 生成多个TermSet实例的并集</target>
        </trans-unit>
        <trans-unit id="9c720f1b6e9baf95add567fc0d1ccc03457a38e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clyngor.solve&lt;/code&gt; parameters</source>
          <target state="translated">&lt;code&gt;clyngor.solve&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="9f574e25e0d82507b7348d378c0dcfa84398a95d" translate="yes" xml:space="preserve">
          <source>ASP source code debugging generator (started in &lt;a href=&quot;clyngor-parser&quot;&gt;clyngor-parser&lt;/a&gt;)</source>
          <target state="translated">ASP源代码调试生成器（从&lt;a href=&quot;clyngor-parser&quot;&gt;clyngor-parser&lt;/a&gt;启动）</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">替代品</target>
        </trans-unit>
        <trans-unit id="4fcbdcf9a8478b08289d57eb5d6b942842b7b22b" translate="yes" xml:space="preserve">
          <source>An idea coming from the &lt;a href=&quot;https://docs.python.org/3/library/json.html#encoders-and-decoders&quot;&gt;JSON decoders&lt;/a&gt;, allowing user to specify how to decode/encode custom objects in JSON.
With clyngor, you can do something alike for ASP (though very basic and only from ASP to Python):</source>
          <target state="translated">来自&lt;a href=&quot;https://docs.python.org/3/library/json.html#encoders-and-decoders&quot;&gt;JSON解码器&lt;/a&gt;的想法，允许用户指定如何对JSON中的自定义对象进行解码/编码。使用clyngor，您可以为ASP做类似的事情（尽管非常基本，并且仅从ASP到Python）：</target>
        </trans-unit>
        <trans-unit id="39318c9c45e4312f4bc273fd17a3b8133344d509" translate="yes" xml:space="preserve">
          <source>And here is the version using clyngor, that pass the exact same unit tests:</source>
          <target state="translated">这里是使用clyngor的版本,通过了完全相同的单元测试。</target>
        </trans-unit>
        <trans-unit id="9b42ee824e78746675f554a97728266dd30209ca" translate="yes" xml:space="preserve">
          <source>And if you need a &lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;&lt;em&gt;pyasp-like&lt;/em&gt;&lt;/a&gt; interface:</source>
          <target state="translated">如果您需要类似&lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;&lt;em&gt;pyasp的&lt;/em&gt;&lt;/a&gt;界面：</target>
        </trans-unit>
        <trans-unit id="425d5f0303995ef8ca802609882eeda6a699ad57" translate="yes" xml:space="preserve">
          <source>As shown in &lt;a href=&quot;clyngor/test/test_propagator_class.py&quot;&gt;clyngor/test/test_propagator_class.py&lt;/a&gt;,
a high-level propagator class built on top of the official API is available, useful in many typical use-cases.</source>
          <target state="translated">如&lt;a href=&quot;clyngor/test/test_propagator_class.py&quot;&gt;clyngor / test / test_propagator_class.py中&lt;/a&gt;所示，可以使用基于官方API构建的高级传播器类，它在许多典型用例中很有用。</target>
        </trans-unit>
        <trans-unit id="4833540de79fafa02d7530187e20aeb32307b9ca" translate="yes" xml:space="preserve">
          <source>As shown in &lt;a href=&quot;examples/pyconstraint.lp&quot;&gt;examples/pyconstraint.lp&lt;/a&gt;,
clyngor also exposes some helpers for users wanting to create propagators
that implement an ASP constraint, but written in Python:</source>
          <target state="translated">如&lt;a href=&quot;examples/pyconstraint.lp&quot;&gt;examples / pyconstraint.lp&lt;/a&gt;所示，clyngor还为希望创建实现ASP约束但使用Python编写的传播器的用户提供了一些帮助程序：</target>
        </trans-unit>
        <trans-unit id="88eb26c9d492472c4d7371c1ce83de486035d05b" translate="yes" xml:space="preserve">
          <source>By default, clyngor uses a very simple parser (yeah, &lt;code&gt;str.split&lt;/code&gt;) in order to achieve time efficiency in most time.
However, when asked to compute a particular output format (like &lt;code&gt;parse_args&lt;/code&gt;) or an explicitely &lt;em&gt;careful parsing&lt;/em&gt;,
clyngor will use a much more robust parser (made with an &lt;a href=&quot;http://www.igordejanovic.net/Arpeggio/&quot;&gt;arpeggio&lt;/a&gt; grammar).</source>
          <target state="translated">默认情况下，clyngor使用一个非常简单的解析器（是的， &lt;code&gt;str.split&lt;/code&gt; ）来在大多数时间内实现时间效率。但是，当要求计算特定的输出格式（如 &lt;code&gt;parse_args&lt;/code&gt; ）或进行&lt;em&gt;非常仔细的解析时&lt;/em&gt;，clyngor将使用功能更强大的解析器（由&lt;a href=&quot;http://www.igordejanovic.net/Arpeggio/&quot;&gt;琶音&lt;/a&gt;文法制作）。</target>
        </trans-unit>
        <trans-unit id="cadc6cbf45c88b7cffb05b9803dec13ffa85d606" translate="yes" xml:space="preserve">
          <source>Careful parsing</source>
          <target state="translated">仔细解析</target>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes" xml:space="preserve">
          <source>Chaining</source>
          <target state="translated">链式</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">变更日志</target>
        </trans-unit>
        <trans-unit id="3e4273d28c600900b37562519469391dba4bc368" translate="yes" xml:space="preserve">
          <source>Clyngor is basically the total rewriting of &lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;pyasp&lt;/a&gt;, which is now abandoned.</source>
          <target state="translated">Clyngor基本上是总重写&lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;pyasp&lt;/a&gt;，现在放弃了。</target>
        </trans-unit>
        <trans-unit id="b1372ffdee32e8b4c3ea51f44289f05a3ed35ad9" translate="yes" xml:space="preserve">
          <source>Clyngor offers multiple interfaces. The followings are all equivalent.
(they search for &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_concept_analysis&quot;&gt;formal concepts&lt;/a&gt;)</source>
          <target state="translated">Clyngor提供了多个接口。以下各项均等效。（他们搜索&lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_concept_analysis&quot;&gt;正式概念&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="0e5ffbd42728ebc42657b008a7a9ee969574de65" translate="yes" xml:space="preserve">
          <source>Clyngor provides &lt;code&gt;converted_types&lt;/code&gt; function,
allowing one to avoid boilerplate code based on type annotation when
calling python from inside ASP code.</source>
          <target state="translated">Clyngor提供 &lt;code&gt;converted_types&lt;/code&gt; 器，允许一个基于类型的注释，以避免样板代码从ASP代码内调用蟒时。</target>
        </trans-unit>
        <trans-unit id="11c20fc2d9fe5dc279351084100911de9ff3e48d" translate="yes" xml:space="preserve">
          <source>Clyngor was designed to not require the official module, because it required a manual compilation and installation of clingo.
However, because of the obvious interest in features and performances,
the official module can be used by clyngor if it is available.</source>
          <target state="translated">Clyngor的设计不需要官方模块,因为它需要手动编译和安装clingo。然而,由于对功能和性能的明显兴趣,如果有官方模块,clyngor可以使用它。</target>
        </trans-unit>
        <trans-unit id="e30721c5da491b591816c7c1a33db266ac84cf31" translate="yes" xml:space="preserve">
          <source>Contributions ?</source>
          <target state="translated">缴款?</target>
        </trans-unit>
        <trans-unit id="7394abcfe600aa1b5dde2f955faf174b007eaeeb" translate="yes" xml:space="preserve">
          <source>Currently, there is only one way to see all chaining operator available:
&lt;a href=&quot;clyngor/answers.py&quot;&gt;the source code of the Answers object&lt;/a&gt;.
(or &lt;code&gt;help(clyngor.Answers)&lt;/code&gt;)</source>
          <target state="translated">当前，只有一种方法可以查看所有可用的链接运算符： &lt;a href=&quot;clyngor/answers.py&quot;&gt;Answers对象的源代码&lt;/a&gt;。（或 &lt;code&gt;help(clyngor.Answers)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="fb1bc08c65b4ee4f49711d2388ffb579ffc57f23" translate="yes" xml:space="preserve">
          <source>Decoders</source>
          <target state="translated">解码器</target>
        </trans-unit>
        <trans-unit id="3599698f598bd7dfd42cac8553684cba07ec80c3" translate="yes" xml:space="preserve">
          <source>Define the path to clingo binary</source>
          <target state="translated">定义通往clingo二进制的路径。</target>
        </trans-unit>
        <trans-unit id="fb2194038e671fd85a964cbd0545f8e6e6c2501a" translate="yes" xml:space="preserve">
          <source>Dinopython support ?</source>
          <target state="translated">Dinopython支持?</target>
        </trans-unit>
        <trans-unit id="eadc2a9f8f64e3ccf735df2b23eb50d6728aa148" translate="yes" xml:space="preserve">
          <source>Easy ASP functors</source>
          <target state="translated">简单的ASP漏斗器</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="384e8626622a3ab84503c5921aadb430784953e2" translate="yes" xml:space="preserve">
          <source>Example (see &lt;a href=&quot;clyngor/test/test_upapi.py&quot;&gt;tests&lt;/a&gt; for more):</source>
          <target state="translated">示例（有关更多信息，请参见&lt;a href=&quot;clyngor/test/test_upapi.py&quot;&gt;测试&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="6b78565c61110062f9f5cca6b1a3123a27c6b732" translate="yes" xml:space="preserve">
          <source>Explain me again the thing with the official module</source>
          <target state="translated">再给我解释一下官方模块的事情。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">常见问题</target>
        </trans-unit>
        <trans-unit id="37f54a04d50c399d93f8533021feb3b7d1edb01b" translate="yes" xml:space="preserve">
          <source>For an ORM approach, give a try to &lt;a href=&quot;https://github.com/daveraja/clorm&quot;&gt;clorm&lt;/a&gt;.</source>
          <target state="translated">对于ORM方法，请尝试&lt;a href=&quot;https://github.com/daveraja/clorm&quot;&gt;clorm&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04e047f9c06520d43841b8b7f97a2e025c955000" translate="yes" xml:space="preserve">
          <source>For users putting some python in their ASP, clyngor may help.
The only condition is to have clingo compiled with python support,
and having clyngor installed for the python used by clingo.</source>
          <target state="translated">对于在ASP中加入一些python的用户,clyngor可能会有帮助。唯一的条件是要编译支持python的clingo,并为clingo使用的python安装clyngor。</target>
        </trans-unit>
        <trans-unit id="f44e67b0bbe4e60b04fb799536784193d84a3364" translate="yes" xml:space="preserve">
          <source>Further ideas</source>
          <target state="translated">其他想法</target>
        </trans-unit>
        <trans-unit id="a3b916a7e6888d6abb65ac4b82ddc47a2596b54d" translate="yes" xml:space="preserve">
          <source>Generalist propagators</source>
          <target state="translated">普通传播者</target>
        </trans-unit>
        <trans-unit id="a6a175864c431b0bd85d7be273e53369ab81c235" translate="yes" xml:space="preserve">
          <source>Handy python wrapper around &lt;a href=&quot;https://potassco.org/&quot;&gt;Potassco's Clingo&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Answer%20set%20programming&quot;&gt;ASP solver&lt;/a&gt;.</source>
          <target state="translated">方便的python包装器，围绕&lt;a href=&quot;https://potassco.org/&quot;&gt;Potassco的Clingo &lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Answer%20set%20programming&quot;&gt;ASP求解器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1a37a994eea7921d38ca2dcf7de94090bb16c18c" translate="yes" xml:space="preserve">
          <source>Here was my old code:</source>
          <target state="translated">这是我以前的代码。</target>
        </trans-unit>
        <trans-unit id="0d929b7953e8bd4aea268a29e9d9f03d0e356ca1" translate="yes" xml:space="preserve">
          <source>If the used version of clingo is compiled with python, you can put python code into your ASP code as usual.
But if you also have the &lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;clingo package&lt;/a&gt;
installed and importable, clyngor can use it for various tasks.</source>
          <target state="translated">如果使用的clingo版本是使用python编译的，则可以照常将python代码放入ASP代码中。但是，如果您还 安装了可导入的&lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;clingo软件包&lt;/a&gt;，则clyngor可以将其用于各种任务。</target>
        </trans-unit>
        <trans-unit id="2746b678411f54f0fe919b1702df84e43c3daaf7" translate="yes" xml:space="preserve">
          <source>If you have a project that makes use of pyasp, but need clingo instead of gringo+clasp, one way to go is to use clyngor instead.</source>
          <target state="translated">如果你有一个使用pyasp的项目,但需要用clingo代替gringo+clasp,一个办法是用clyngor代替。</target>
        </trans-unit>
        <trans-unit id="fd26af85fd58ff3935044e4f589476f32dcc3c34" translate="yes" xml:space="preserve">
          <source>Import/export</source>
          <target state="translated">进口/出口</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="4390541efd33287202bbbb990e914d484036c9ca" translate="yes" xml:space="preserve">
          <source>More examples are available in &lt;a href=&quot;clyngor/test/&quot;&gt;the unit tests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;clyngor/test/&quot;&gt;单元测试&lt;/a&gt;中提供了更多示例。</target>
        </trans-unit>
        <trans-unit id="2180e05b1bd9de4dbd27384d20dddec937ab55a2" translate="yes" xml:space="preserve">
          <source>More traditional interface, using file containing the ASP source code:</source>
          <target state="translated">更传统的界面,使用包含ASP源代码的文件。</target>
        </trans-unit>
        <trans-unit id="e184c7cd489465182b2046eec31efebb8fec3e03" translate="yes" xml:space="preserve">
          <source>No, it's pronounced &lt;a href=&quot;https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s&quot;&gt;&lt;em&gt;clyngor&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">不，这是发音&lt;a href=&quot;https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s&quot;&gt;&lt;em&gt;clyngor&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8b9f1367ad6269845f5ec54d66262066092883f" translate="yes" xml:space="preserve">
          <source>No.</source>
          <target state="translated">不知道</target>
        </trans-unit>
        <trans-unit id="463e089b0dc00d6a1104b0dcaaf482a84ee07e05" translate="yes" xml:space="preserve">
          <source>Note that it will be the very first parameter to &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt;&lt;/a&gt;.
The &lt;code&gt;solve&lt;/code&gt; function also support the &lt;code&gt;clingo_bin_path&lt;/code&gt; parameter.</source>
          <target state="translated">请注意，这将是&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt; &lt;code&gt;subprocess.Popen&lt;/code&gt; 的&lt;/a&gt;第一个参数。该 &lt;code&gt;solve&lt;/code&gt; 功能还支持 &lt;code&gt;clingo_bin_path&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="cca4e4edc4e230602d82bbcc56bd550993cf86f8" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;https://github.com/potassco/clingo/issues/147&quot;&gt;incoming clingo version&lt;/a&gt;
is leading to that flexibility regarding returned values.</source>
          <target state="translated">请注意，&lt;a href=&quot;https://github.com/potassco/clingo/issues/147&quot;&gt;传入的clingo版本&lt;/a&gt; 在返回值方面带来了灵活性。</target>
        </trans-unit>
        <trans-unit id="e9a98bf23ef06499413d0b04079436ea24bcf9b8" translate="yes" xml:space="preserve">
          <source>Note the use of annotations to declare that each &lt;code&gt;concept&lt;/code&gt; must be associated to one instance,
and that all &lt;code&gt;extent&lt;/code&gt; and &lt;code&gt;intent&lt;/code&gt; must be sent to constructor for each object.</source>
          <target state="translated">请注意，使用批注声明每个 &lt;code&gt;concept&lt;/code&gt; 必须与一个实例相关联，并且所有 &lt;code&gt;extent&lt;/code&gt; 和 &lt;code&gt;intent&lt;/code&gt; 必须发送给每个对象的构造函数。</target>
        </trans-unit>
        <trans-unit id="eb85013aa265395b046991fc7ca120dcb8e2f12f" translate="yes" xml:space="preserve">
          <source>Official Python API</source>
          <target state="translated">官方Python API</target>
        </trans-unit>
        <trans-unit id="a5de6231aa35bf318b624de9266e03bad7635ed9" translate="yes" xml:space="preserve">
          <source>Once you get your answers, clyngor allows you to specify
the answer sets format using builtin methods:</source>
          <target state="translated">一旦你得到了你的答案,clyngor允许你使用内置的方法指定答案集格式。</target>
        </trans-unit>
        <trans-unit id="73e90f1b2f4fa18e7665465d396e1166726f10c5" translate="yes" xml:space="preserve">
          <source>Propagators are presented in &lt;a href=&quot;http://drops.dagstuhl.de/opus/volltexte/2016/6733/&quot;&gt;this paper&lt;/a&gt;. They are basically active
observers of the solving process, able for instance to modify truth assignment
and invalidate models.</source>
          <target state="translated">&lt;a href=&quot;http://drops.dagstuhl.de/opus/volltexte/2016/6733/&quot;&gt;本文&lt;/a&gt;介绍了传播器。他们基本上是解决过程的积极观察者，例如能够修改真值分配并使模型无效。</target>
        </trans-unit>
        <trans-unit id="9333da961302a0a9c813edfac641a495bef0c905" translate="yes" xml:space="preserve">
          <source>Python constraint propagators</source>
          <target state="translated">Python约束传播器</target>
        </trans-unit>
        <trans-unit id="26d1c78e45436cb82650f09d425d708d8c33b307" translate="yes" xml:space="preserve">
          <source>Python embedding</source>
          <target state="translated">Python嵌入</target>
        </trans-unit>
        <trans-unit id="e0ee96d2d4d44ec44d0febf699f59d9975cb18b7" translate="yes" xml:space="preserve">
          <source>Python wrapper around Clingo/Answer Set Programming</source>
          <target state="translated">围绕Clingo/Answer Set编程的Python封装器。</target>
        </trans-unit>
        <trans-unit id="245fe981538e3689226b72d304416a397deac758" translate="yes" xml:space="preserve">
          <source>Remaining features for a good decoder support:</source>
          <target state="translated">其余的功能为一个好的解码器支持。</target>
        </trans-unit>
        <trans-unit id="7bcdee2adeac9770dc4a0eae94768a8628f42f90" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;clyngor/test/test_decoder.py&quot;&gt;tests&lt;/a&gt; for complete API example.</source>
          <target state="translated">有关完整的API示例，请参见&lt;a href=&quot;clyngor/test/test_decoder.py&quot;&gt;测试&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="484955075e924a719a4cc5c53d00c4a145811494" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;clyngor/utils.py&quot;&gt;&lt;code&gt;utils&lt;/code&gt; module&lt;/a&gt; and its &lt;a href=&quot;clyngor/test/test_utils.py&quot;&gt;tests&lt;/a&gt;,
which provides high level routines to save and load answer sets.</source>
          <target state="translated">请参阅&lt;a href=&quot;clyngor/utils.py&quot;&gt; &lt;code&gt;utils&lt;/code&gt; 模块&lt;/a&gt;及其&lt;a href=&quot;clyngor/test/test_utils.py&quot;&gt;测试&lt;/a&gt;，该模块提供了高级例程来保存和加载答案集。</target>
        </trans-unit>
        <trans-unit id="3bce3ed8bdd36d76601cf959a5cc94b200bf5d45" translate="yes" xml:space="preserve">
          <source>TermSet bugfix</source>
          <target state="translated">术语集错误修正</target>
        </trans-unit>
        <trans-unit id="97cba4858411c435e526dd651157aac20178222c" translate="yes" xml:space="preserve">
          <source>Thanks</source>
          <target state="translated">谢谢你</target>
        </trans-unit>
        <trans-unit id="304fd404f301c9ccf649621b6f76c52a39c00344" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;solve&lt;/code&gt; functions allow to pass explicitely some parameters to clingo
(including number of models to yield, time-limit, and constants).
Using the &lt;code&gt;options&lt;/code&gt; parameter is just fine, but with the explicit parameters some verifications
are made against data (mostly about type).</source>
          <target state="translated">的 &lt;code&gt;solve&lt;/code&gt; 功能允许明确地通过一些参数clingo（包括常数的模型，以产生数，时限，和）。使用 &lt;code&gt;options&lt;/code&gt; 参数就可以了，但是使用显式参数可以对数据进行一些验证（主要是关于类型）。</target>
        </trans-unit>
        <trans-unit id="705e3984b662041956b6da23e869f275ebee6d6d" translate="yes" xml:space="preserve">
          <source>The same, but with the lower level function expecting files:</source>
          <target state="translated">同样的,但低级函数期待文件。</target>
        </trans-unit>
        <trans-unit id="fec812de66c1c5e75fb70bb3caeeaeb539ae1baf" translate="yes" xml:space="preserve">
          <source>The third solution is to use the decorator &lt;code&gt;with_clingo_bin&lt;/code&gt;, which modify the global variable
during the execution of a specific function:</source>
          <target state="translated">第三种解决方案是使用装饰器 &lt;code&gt;with_clingo_bin&lt;/code&gt; ，该装饰器在执行特定功能期间修改全局变量：</target>
        </trans-unit>
        <trans-unit id="1419a8eb36687ad0752d86cf04b0ef1070e6b504" translate="yes" xml:space="preserve">
          <source>Therefore, the two followings are equivalent ; but the first is more readable and will crash earlier with a better error message if &lt;code&gt;n&lt;/code&gt; is not valid:</source>
          <target state="translated">因此，以下两个是等价的；但是第一个更具可读性，如果 &lt;code&gt;n&lt;/code&gt; 无效，则会以更好的错误消息更早崩溃：</target>
        </trans-unit>
        <trans-unit id="9c3073b3c4e9e8b375dcab87133132ec275fb17c" translate="yes" xml:space="preserve">
          <source>This code will print something like:</source>
          <target state="translated">这段代码将打印出这样的内容。</target>
        </trans-unit>
        <trans-unit id="4cf1b54b003a59c279d1ba0b615a8a5f3459ca8c" translate="yes" xml:space="preserve">
          <source>Tips</source>
          <target state="translated">技巧</target>
        </trans-unit>
        <trans-unit id="1ceaf78d462be91214480c73367875ef197097e9" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;https://github.com/ArnaudBelcour&quot;&gt;Arnaud Belcour&lt;/a&gt; for his works and frequent feedbacks.</source>
          <target state="translated">要&lt;a href=&quot;https://github.com/ArnaudBelcour&quot;&gt;阿尔诺贝尔库&lt;/a&gt;为他的工作和频繁的反馈。</target>
        </trans-unit>
        <trans-unit id="c674a828ebc455b3a8b48d6c99c3b82f80e795b4" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;https://github.com/domoritz&quot;&gt;Domoritz&lt;/a&gt; for his questions and feedbacks.</source>
          <target state="translated">为了&lt;a href=&quot;https://github.com/domoritz&quot;&gt;Domoritz&lt;/a&gt;对他提出的问题和反馈。</target>
        </trans-unit>
        <trans-unit id="d7649b3c98b8ecf194e261d05438370f5beedd8a" translate="yes" xml:space="preserve">
          <source>Using the official API leads to the following changes :</source>
          <target state="translated">使用官方API会导致以下变化。</target>
        </trans-unit>
        <trans-unit id="b43dd45d8ee7f5ad3504aef61a730a13e90b6c41" translate="yes" xml:space="preserve">
          <source>What is clyngor used for ?</source>
          <target state="translated">clyngor的用途是什么?</target>
        </trans-unit>
        <trans-unit id="f4f3d7881e9be1d333c9aed0f668fbf2b72ae0eb" translate="yes" xml:space="preserve">
          <source>Why clyngor ?</source>
          <target state="translated">为什么是Clyngor?</target>
        </trans-unit>
        <trans-unit id="13525d313aa0f7ec3c7862f65a1ba61efee9eafd" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;converted_types&lt;/code&gt;, user have to ensure that &lt;code&gt;f&lt;/code&gt; is a function returning a list,
and that arguments are of the expected type.</source>
          <target state="translated">如果没有 &lt;code&gt;converted_types&lt;/code&gt; ，则用户必须确保 &lt;code&gt;f&lt;/code&gt; 是返回列表的函数，并且参数为预期的类型。</target>
        </trans-unit>
        <trans-unit id="c53c562dab4b33b3e42f3bc4d8e5719439a9c155" translate="yes" xml:space="preserve">
          <source>Yes.</source>
          <target state="translated">是的,我知道</target>
        </trans-unit>
        <trans-unit id="f9b3a47d05b251231cb4c9640b95102336c35e4c" translate="yes" xml:space="preserve">
          <source>You can activate the use of the clingo module by calling once &lt;code&gt;clyngor.activate_clingo_module()&lt;/code&gt;
or calling &lt;code&gt;clyngor.solve&lt;/code&gt; with argument &lt;code&gt;use_clingo_module&lt;/code&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">您可以通过一次调用 &lt;code&gt;clyngor.activate_clingo_module()&lt;/code&gt; 或将参数 &lt;code&gt;use_clingo_module&lt;/code&gt; 设置为 &lt;code&gt;True&lt;/code&gt; 来调用 &lt;code&gt;clyngor.solve&lt;/code&gt; 来激活clingo模块的使用。</target>
        </trans-unit>
        <trans-unit id="a303dcafb3e6cc8ab666cffa898594e8d2a33d4a" translate="yes" xml:space="preserve">
          <source>You may also want to install the &lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;python clingo module&lt;/a&gt;,
which is &lt;a href=&quot;#official-api-embedding&quot;&gt;an optional dependancy&lt;/a&gt;.</source>
          <target state="translated">您可能还需要安装&lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;python clingo模块&lt;/a&gt;，这是&lt;a href=&quot;#official-api-embedding&quot;&gt;一个可选的依赖项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61b9ca8ea533910460f8d6636a923902e5142a8f" translate="yes" xml:space="preserve">
          <source>You must have &lt;a href=&quot;https://potassco.org/doc/start/&quot;&gt;&lt;code&gt;clingo&lt;/code&gt;&lt;/a&gt; in your path. Depending on your OS, it might be done with a system installation,
or through &lt;a href=&quot;https://github.com/potassco/clingo/releases&quot;&gt;downloading&lt;/a&gt; and (compilation and) manual installation.</source>
          <target state="translated">您的路径中必须有&lt;a href=&quot;https://potassco.org/doc/start/&quot;&gt; &lt;code&gt;clingo&lt;/code&gt; &lt;/a&gt;。根据您的操作系统，可以通过系统安装或通过&lt;a href=&quot;https://github.com/potassco/clingo/releases&quot;&gt;下载&lt;/a&gt;和（编译和）手动安装来完成。</target>
        </trans-unit>
        <trans-unit id="4cad31ae8e8efc1f4ddf34354de173ef6731770a" translate="yes" xml:space="preserve">
          <source>add support for clingo official python module</source>
          <target state="translated">增加对clingo官方python模块的支持。</target>
        </trans-unit>
        <trans-unit id="8da81f55a2c9fba388ff4bb025f39999b06975bd" translate="yes" xml:space="preserve">
          <source>add support for propagators</source>
          <target state="translated">增加对传播者的支持</target>
        </trans-unit>
        <trans-unit id="e9dadb607e6d489853495354d9a14b63f6ea629b" translate="yes" xml:space="preserve">
          <source>allow to raise an InvalidDecoder exception during decoder instanciation to get the instance discarded</source>
          <target state="translated">允许在解码器实例化过程中引发InvalidDecoder异常,以使实例被丢弃。</target>
        </trans-unit>
        <trans-unit id="51de2b835bd35a67eb32dbcd3d77d4b96e5aa39d" translate="yes" xml:space="preserve">
          <source>before</source>
          <target state="translated">之前</target>
        </trans-unit>
        <trans-unit id="50da729e7d5e37656158efa76fa38475c29a75f4" translate="yes" xml:space="preserve">
          <source>bioinformatics, to encode biological pathway logic in &lt;a href=&quot;https://github.com/pathmodel/pathmodel&quot;&gt;pathmodel&lt;/a&gt; and &lt;a href=&quot;https://github.com/cfrioux/MeneTools&quot;&gt;Menetools&lt;/a&gt;, and for &lt;a href=&quot;https://github.com/cfrioux/miscoto&quot;&gt;community detection&lt;/a&gt;.</source>
          <target state="translated">生物信息学，以编码路径&lt;a href=&quot;https://github.com/pathmodel/pathmodel&quot;&gt;模型&lt;/a&gt;和&lt;a href=&quot;https://github.com/cfrioux/MeneTools&quot;&gt;Menetools中的&lt;/a&gt;生物途径逻辑，并进行&lt;a href=&quot;https://github.com/cfrioux/miscoto&quot;&gt;社区检测&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="074438a63ef19ed48a00cea72614c91d38173715" translate="yes" xml:space="preserve">
          <source>both robust and quick parsing, instead of the simple vs slow method</source>
          <target state="translated">既健壮又快速的解析,而不是简单与缓慢的方法。</target>
        </trans-unit>
        <trans-unit id="e0912bf181e07f0c5072c5e872c83c95431ed5e3" translate="yes" xml:space="preserve">
          <source>bugfix: &lt;code&gt;.atom_as_string&lt;/code&gt; and &lt;code&gt;.first_arg_only&lt;/code&gt; collision</source>
          <target state="translated">错误修正： &lt;code&gt;.atom_as_string&lt;/code&gt; 和 &lt;code&gt;.first_arg_only&lt;/code&gt; 冲突</target>
        </trans-unit>
        <trans-unit id="5007fa8d83436ab973c991a27b18d472aecd5aa5" translate="yes" xml:space="preserve">
          <source>bugfix: more robust tempfile deletion and closing management</source>
          <target state="translated">bug修复:更强大的temp文件删除和关闭管理。</target>
        </trans-unit>
        <trans-unit id="e18a7ce81ad96200ba729c0bbc124c3f9d51b019" translate="yes" xml:space="preserve">
          <source>decoders support, see &lt;a href=&quot;clyngor/decoder.py&quot;&gt;&lt;code&gt;clyngor.decoder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decoders&quot;&gt;doc&lt;/a&gt;</source>
          <target state="translated">解码器支持，请参阅&lt;a href=&quot;clyngor/decoder.py&quot;&gt; &lt;code&gt;clyngor.decoder&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#decoders&quot;&gt;doc&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9fb3cccc99a0b896ac303711eb87065e488d6ac6" translate="yes" xml:space="preserve">
          <source>decorator &lt;code&gt;with_clingo_bin&lt;/code&gt;, changing clingo binary path for encapsulated function</source>
          <target state="translated">装饰器 &lt;code&gt;with_clingo_bin&lt;/code&gt; ，更改封装函数的clingo二进制路径</target>
        </trans-unit>
        <trans-unit id="96808953997a2ce41c2f2e33d58a68a23fc78e11" translate="yes" xml:space="preserve">
          <source>easy interface for most use cases using type hint for embedded python</source>
          <target state="translated">使用嵌入式Python的类型提示为大多数用例提供简单的接口。</target>
        </trans-unit>
        <trans-unit id="cefbc993455527eed9fde6b4e6be4855272911b7" translate="yes" xml:space="preserve">
          <source>easy python constraints in ASP with Constraint type</source>
          <target state="translated">在ASP中使用约束类型的简单python约束。</target>
        </trans-unit>
        <trans-unit id="b091a5d5b3131b981749ac7c080a7d5521eca1e7" translate="yes" xml:space="preserve">
          <source>encoding: try to more-or-less automatically build the python to ASP compiler</source>
          <target state="translated">编码:尝试或多或少地自动构建python到ASP的编译器。</target>
        </trans-unit>
        <trans-unit id="e765327e3f299dc210e0f0f69ddb310fc9c2c821" translate="yes" xml:space="preserve">
          <source>fix &lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/16&quot;&gt;#16&lt;/a&gt;</source>
          <target state="translated">修复&lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/16&quot;&gt;＃16&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d71e072ae705eec88f34616a293e820b041052a" translate="yes" xml:space="preserve">
          <source>fix &lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/7&quot;&gt;#7&lt;/a&gt;</source>
          <target state="translated">修复&lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/7&quot;&gt;＃7&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b768efe9f2d78e51b32d26194cb3b7a9d189d31" translate="yes" xml:space="preserve">
          <source>from pyasp to clyngor</source>
          <target state="translated">从Pyasp到Clyngor</target>
        </trans-unit>
        <trans-unit id="496e197dd9949af9792127c66bfb7a81e0a8ba05" translate="yes" xml:space="preserve">
          <source>improve testing cover, fix warning in recent versions of pytest</source>
          <target state="translated">改进测试覆盖面,修复最近版本的pytest中的警告。</target>
        </trans-unit>
        <trans-unit id="43eb7abf564b266b33012692f9ae2e2773b789f7" translate="yes" xml:space="preserve">
          <source>mathematics, to encode some &lt;a&gt;FCA&lt;/a&gt;-related task such as &lt;a href=&quot;https://github.com/Aluriak/AOC-poset-generation&quot;&gt;AOC-poset generation&lt;/a&gt; or &lt;a href=&quot;https://github.com/Aluriak/concept-generation&quot;&gt;concept search&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Aluriak/PowerGrASP&quot;&gt;graph compression&lt;/a&gt; or &lt;a href=&quot;https://github.com/Aluriak/phasme&quot;&gt;graph manipulation&lt;/a&gt; in the context of graph theory.</source>
          <target state="translated">数学，以编码一些与&lt;a&gt;FCA&lt;/a&gt;相关的任务，例如&lt;a href=&quot;https://github.com/Aluriak/AOC-poset-generation&quot;&gt;AOC姿态生成&lt;/a&gt;或&lt;a href=&quot;https://github.com/Aluriak/concept-generation&quot;&gt;概念搜索&lt;/a&gt;，以及在图论背景下进行图&lt;a href=&quot;https://github.com/Aluriak/PowerGrASP&quot;&gt;压缩&lt;/a&gt;或&lt;a href=&quot;https://github.com/Aluriak/phasme&quot;&gt;图操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f17da3e1bf8613b59f1ebd9d651eb2f221c8a470" translate="yes" xml:space="preserve">
          <source>more available annotations, for instance &lt;code&gt;(3, 5)&lt;/code&gt; (to ask for between 3 and 5 atoms to be associated with the instance), or &lt;code&gt;any&lt;/code&gt; (exact meaning has to be found)</source>
          <target state="translated">更多可用的注释，例如 &lt;code&gt;(3, 5)&lt;/code&gt; （要求与实例关联3至5个原子），或 &lt;code&gt;any&lt;/code&gt; 注释（必须找到确切的含义）</target>
        </trans-unit>
        <trans-unit id="a1e82e07ce83d0509d046b2892e35aba991e2e9d" translate="yes" xml:space="preserve">
          <source>more robust options parsing when solving with clingo module</source>
          <target state="translated">在使用clingo模块求解时,更强大的选项解析。</target>
        </trans-unit>
        <trans-unit id="9992fe949dc68ec8aebc3fec46629b55ec90aa02" translate="yes" xml:space="preserve">
          <source>new parameter &lt;code&gt;return_raw_output&lt;/code&gt; for clyngor.solve, allowing to get stdout/stderr without treatments</source>
          <target state="translated">&lt;code&gt;return_raw_output&lt;/code&gt; 新参数return_raw_output，无需处理即可获取stdout / stderr</target>
        </trans-unit>
        <trans-unit id="8d0fb2d6cc5ffba846b9139966e69e5bf633b600" translate="yes" xml:space="preserve">
          <source>predicat to know if python/lua are available with used clingo binary</source>
          <target state="translated">判断python/Lua是否可以使用clingo二进制。</target>
        </trans-unit>
        <trans-unit id="c9bfaa14976106285b7dce65a9cea2e80d2b677a" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;#Further-ideas&quot;&gt;further ideas&lt;/a&gt;</source>
          <target state="translated">看到&lt;a href=&quot;#Further-ideas&quot;&gt;更多的想法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7afa991458ca7d414f51b74832e1074e6d8490d1" translate="yes" xml:space="preserve">
          <source>some options are not supported : constants, &lt;a href=&quot;clyngor/test/test_time_limit.py&quot;&gt;time-limit&lt;/a&gt;, parsing error handling, &lt;a href=&quot;clyngor/test/test_grounding.py&quot;&gt;decoupled grounding/solving&lt;/a&gt;</source>
          <target state="translated">不支持某些选项：常量，&lt;a href=&quot;clyngor/test/test_time_limit.py&quot;&gt;时间限制&lt;/a&gt;，解析错误处理，&lt;a href=&quot;clyngor/test/test_grounding.py&quot;&gt;解耦的接地/求解&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c293064e1f16f4237014d85419900b69236542be" translate="yes" xml:space="preserve">
          <source>support for &lt;code&gt;.by_arity&lt;/code&gt;, equivalent to &lt;code&gt;.by_predicate&lt;/code&gt; but with predicate and arity</source>
          <target state="translated">支持 &lt;code&gt;.by_arity&lt;/code&gt; ，等效于 &lt;code&gt;.by_predicate&lt;/code&gt; ,但具有谓词和arity</target>
        </trans-unit>
        <trans-unit id="dd6edfee6c61e2cd9b6af185d8bb6109e1b6b47d" translate="yes" xml:space="preserve">
          <source>support for &lt;code&gt;.discard_quotes&lt;/code&gt; option (thanks to ArnaudBelcour)</source>
          <target state="translated">支持 &lt;code&gt;.discard_quotes&lt;/code&gt; 选项（感谢ArnaudBelcour）</target>
        </trans-unit>
        <trans-unit id="d8522e605d5e8d4ef665672ccb60c426edb93378" translate="yes" xml:space="preserve">
          <source>support for &lt;code&gt;.with_optimality&lt;/code&gt;, giving optimization and optimality along with the model</source>
          <target state="translated">支持 &lt;code&gt;.with_optimality&lt;/code&gt; ，与模型一起提供优化和最优性</target>
        </trans-unit>
        <trans-unit id="c54e76c5715613a8df5b162b9c62a504a30f9c6a" translate="yes" xml:space="preserve">
          <source>support for decoupled grounding and solving, as shown in &lt;a href=&quot;examples/decoupled-grounding.py&quot;&gt;dedicated example&lt;/a&gt;</source>
          <target state="translated">支持去耦接地和求解，如&lt;a href=&quot;examples/decoupled-grounding.py&quot;&gt;专用示例&lt;/a&gt;所示</target>
        </trans-unit>
        <trans-unit id="2249ef853cab0c296867009154d1f4dca4be7a9f" translate="yes" xml:space="preserve">
          <source>visualization, with &lt;a href=&quot;https://github.com/uwdata/draco&quot;&gt;Draco&lt;/a&gt;, a formalization of visualization design knowledge as constraints, and &lt;a href=&quot;https://gitlab.inria.fr/lbourneu/biseau&quot;&gt;biseau&lt;/a&gt;, an ASP-to-graph compiler.</source>
          <target state="translated">可视化，&lt;a href=&quot;https://github.com/uwdata/draco&quot;&gt;Draco&lt;/a&gt;是可视化设计知识的形式化约束，而&lt;a href=&quot;https://gitlab.inria.fr/lbourneu/biseau&quot;&gt;biseau&lt;/a&gt;是ASP到图形的编译器。</target>
        </trans-unit>
        <trans-unit id="c9f881e734899d11d5249a5fb2f4de1b7be54ff1" translate="yes" xml:space="preserve">
          <source>web applications, for &lt;a href=&quot;https://github.com/llaisdy/phoenix_live_view_sudoku/&quot;&gt;a sudoku solver made with ASP&lt;/a&gt;.</source>
          <target state="translated">Web应用程序，用于&lt;a href=&quot;https://github.com/llaisdy/phoenix_live_view_sudoku/&quot;&gt;使用ASP制作的数独求解器&lt;/a&gt;。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
