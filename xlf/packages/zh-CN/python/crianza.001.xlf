<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/crianza/">
    <body>
      <group id="crianza">
        <trans-unit id="90578b4b08efa4ccc792ffa82d11d16addfab948" translate="yes" xml:space="preserve">
          <source>(2 + 3) * 4</source>
          <target state="translated">（2 + 3）* 4</target>
        </trans-unit>
        <trans-unit id="9b2abf7f931ef0561ff59098cecc5f3ada41e345" translate="yes" xml:space="preserve">
          <source>) and the
value on top of the stack.</source>
          <target state="translated">）和堆栈顶部的值。</target>
        </trans-unit>
        <trans-unit id="b0bebed444c9176225f8a0815fe4c22aebc69c89" translate="yes" xml:space="preserve">
          <source>), the number of items on the return stack (</source>
          <target state="translated">），返回堆栈上的项目数（</target>
        </trans-unit>
        <trans-unit id="cd5428592573d8998a00d166fc48bace9610c33e" translate="yes" xml:space="preserve">
          <source>). In this case, the entire expression
is constant-folded down to the result</source>
          <target state="translated">）。在这种情况下，整个表达式将始终折叠为结果</target>
        </trans-unit>
        <trans-unit id="456be907097f8bb5621f3388e63dca76ddbf17c1" translate="yes" xml:space="preserve">
          <source>, an experimental, work-in-progress
compiler to native &lt;a href=&quot;https://docs.python.org/2/library/dis.html#python-bytecode-instructions&quot;&gt;CPython bytecode&lt;/a&gt;. At
the moment, it only correctly implements simple instructions and doesn&amp;rsquo;t do any
optimizations.</source>
          <target state="translated">，是针对本地&lt;a href=&quot;https://docs.python.org/2/library/dis.html#python-bytecode-instructions&quot;&gt;CPython字节码&lt;/a&gt;的实验性，正在进行中的编译器。目前，它只正确实现了简单的指令，没有进行任何优化。</target>
        </trans-unit>
        <trans-unit id="b002e038f685b03772e95a26208183524c9fc2f7" translate="yes" xml:space="preserve">
          <source>, and this is what I
usually get, although I&amp;rsquo;ve also gotten fun variants that are almost
correct, such as</source>
          <target state="translated">，这是我通常得到的，尽管我也得到了几乎正确的有趣变体，例如</target>
        </trans-unit>
        <trans-unit id="decbd273adc77d97ec3321669035383ae841d619" translate="yes" xml:space="preserve">
          <source>, the
number of arguments the resulting Python function will take.  In the above
example, we create a function that multiplies its &lt;em&gt;single&lt;/em&gt; argument by two, so
we set</source>
          <target state="translated">，结果Python函数将采用的参数数量。在上面的示例中，我们创建了一个将&lt;em&gt;单个&lt;/em&gt;参数乘以2 的函数，因此我们将</target>
        </trans-unit>
        <trans-unit id="0ad5663191931dfc99fa454b2bb85474cf7ad24f" translate="yes" xml:space="preserve">
          <source>, the number
of items on the data stack</source>
          <target state="translated">，数据堆栈中的项目数</target>
        </trans-unit>
        <trans-unit id="745505e405486921373a34e2c2303a2e15de0152" translate="yes" xml:space="preserve">
          <source>, the number of items on the data stack
(</source>
          <target state="translated">，数据堆栈上的项目数（</target>
        </trans-unit>
        <trans-unit id="3d10711b2e9850859e20f3ce54c85e2dde1c188e" translate="yes" xml:space="preserve">
          <source>.  This is &lt;em&gt;exactly&lt;/em&gt; the same as doing:</source>
          <target state="translated">。这与执行操作&lt;em&gt;完全相同&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="f781e8b1b56de354e5c64fc69553bfe12e94c2f5" translate="yes" xml:space="preserve">
          <source>.  This will list the current instruction pointer</source>
          <target state="translated">。这将列出当前指令指针</target>
        </trans-unit>
        <trans-unit id="969fd9a83ca867a717842cfb0d95ca8dd0c39bf7" translate="yes" xml:space="preserve">
          <source>.  You can see this by printing out the compiled code with the command</source>
          <target state="translated">。您可以通过使用以下命令打印出已编译的代码来查看</target>
        </trans-unit>
        <trans-unit id="7778f0db4ef44d8d8dfbe9d50e1b9f7292033f9c" translate="yes" xml:space="preserve">
          <source>. The language
is basically a &lt;a href=&quot;https://en.wikipedia.org/wiki/Forth_(programming_language)&quot;&gt;dialect of
Forth&lt;/a&gt;.</source>
          <target state="translated">。该语言基本上是&lt;a href=&quot;https://en.wikipedia.org/wiki/Forth_(programming_language)&quot;&gt;Forth的&lt;/a&gt;一种方言。</target>
        </trans-unit>
        <trans-unit id="bc4a3e3b9eca496c550f5eb463e0fced8112dfa4" translate="yes" xml:space="preserve">
          <source>.code</source>
          <target state="translated">。码</target>
        </trans-unit>
        <trans-unit id="2d88b339e3d17159e955704bdc757d13617492ee" translate="yes" xml:space="preserve">
          <source>1000 if self._error else 0</source>
          <target state="translated">1000 if self._error else 0</target>
        </trans-unit>
        <trans-unit id="262948d06ec1d52bfce5ecc85f999bc55ddacfe3" translate="yes" xml:space="preserve">
          <source>Again, note that this compiler is currently &lt;em&gt;very&lt;/em&gt; buggy. In particular, it
doesn&amp;rsquo;t correctly implement branching (jumps, if-statements, etc.) and many
other things.</source>
          <target state="translated">再次注意，该编译器当前存在&lt;em&gt;很多&lt;/em&gt;错误。特别是，它不能正确实现分支（跳转，if语句等）和许多其他功能。</target>
        </trans-unit>
        <trans-unit id="376f271566f0283944d906efb6695d8381c9316b" translate="yes" xml:space="preserve">
          <source>An experimental, in-progress compiler to native Python bytecode</source>
          <target state="translated">一个实验性的,正在开发中的本地Python字节码编译器。</target>
        </trans-unit>
        <trans-unit id="98a80809741d37f87ac3e413198500b0db7755ce" translate="yes" xml:space="preserve">
          <source>An interpreter for a Forth-like stack-based language</source>
          <target state="translated">一个类似Forth的基于堆栈的语言的解释器。</target>
        </trans-unit>
        <trans-unit id="65d35d237c8a726c2af59d9888c57c112d3e2acb" translate="yes" xml:space="preserve">
          <source>Because the CPython bytecode also operates on Python types, it naturally
supports things like multiplying sequences:</source>
          <target state="translated">因为CPython字节码也是在Python类型上进行操作的,所以它自然而然地支持乘法序列这样的事情。</target>
        </trans-unit>
        <trans-unit id="89161f9c39ae88fa85945772434903b308057732" translate="yes" xml:space="preserve">
          <source>Compilation from source language down to virtual machine language</source>
          <target state="translated">从源语言到虚拟机语言的编译。</target>
        </trans-unit>
        <trans-unit id="5aea1693157f20d398a9e36d6312097536cc8bed" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2015 Christian Stigen Larsen</source>
          <target state="translated">Copyright (C)2015 Christian Stigen Larsen.</target>
        </trans-unit>
        <trans-unit id="ad62ee6e83cd9f9d1e5dcb4a2539dc8953c39ff5" translate="yes" xml:space="preserve">
          <source>Crianza</source>
          <target state="translated">Crianza</target>
        </trans-unit>
        <trans-unit id="a3e8d448bde2c01c28159483be2e5ab21e9d144f" translate="yes" xml:space="preserve">
          <source>Crianza also contains</source>
          <target state="translated">Crianza还包含</target>
        </trans-unit>
        <trans-unit id="59fdf15e51b9a90a0adbfec0084e40d4c24a8547" translate="yes" xml:space="preserve">
          <source>Crianza also contains very simple genetic programming facilities, just
to demonstrate a cool usage of the VM.</source>
          <target state="translated">Crianza还包含了非常简单的遗传编程设施,只是为了演示虚拟机的一种很酷的用法。</target>
        </trans-unit>
        <trans-unit id="dd93c45e367459fc28605d998b2ebee397126657" translate="yes" xml:space="preserve">
          <source>Crianza is a very simple program virtual machine with example genetic
programming applications.</source>
          <target state="translated">Crianza是一个非常简单的程序虚拟机,有遗传编程应用实例。</target>
        </trans-unit>
        <trans-unit id="2ee0d2dca289c3eb54f4cc5e98db8d63e9b0794b" translate="yes" xml:space="preserve">
          <source>DS</source>
          <target state="translated">DS</target>
        </trans-unit>
        <trans-unit id="2a44864bedc9bb47878a0f293b9863c2248c52a9" translate="yes" xml:space="preserve">
          <source>Data types: Integers, floats, booleans and strings</source>
          <target state="translated">数据类型。整数、浮点数、布尔值和字符串。</target>
        </trans-unit>
        <trans-unit id="d05ed29705761dd9e8b77dff02254674f59c83ff" translate="yes" xml:space="preserve">
          <source>Distributed under the BSD 3-Clause License. See the LICENSE.txt file for
the full text.</source>
          <target state="translated">以 BSD 3-Clause License 分发。全文请参见LICENSE.txt文件。</target>
        </trans-unit>
        <trans-unit id="d04e1b8d38b11b25ff6bad16e9bdc6de53907189" translate="yes" xml:space="preserve">
          <source>Example: Controlling parsing</source>
          <target state="translated">例子:控制解析</target>
        </trans-unit>
        <trans-unit id="01cc434e0aae6b8359bccca08c435ad6df4317f8" translate="yes" xml:space="preserve">
          <source>Example: Genetic programming</source>
          <target state="translated">例如:遗传方案编制</target>
        </trans-unit>
        <trans-unit id="8bbb2241239454f2fd6ea67d4528532847352e9a" translate="yes" xml:space="preserve">
          <source>Example: Running a simple program from Python</source>
          <target state="translated">示例。从Python中运行一个简单的程序</target>
        </trans-unit>
        <trans-unit id="1012cf866ed03d9fd9e6e06d94c3481f318cfc1b" translate="yes" xml:space="preserve">
          <source>Example: Source code with subroutines</source>
          <target state="translated">例子:带子程序的源代码</target>
        </trans-unit>
        <trans-unit id="74433d56b88aefb3e1ccfbf8a053f30c3e378705" translate="yes" xml:space="preserve">
          <source>Example: Using crianza from the command line</source>
          <target state="translated">例子:在命令行中使用crianza</target>
        </trans-unit>
        <trans-unit id="d2c391f89b80fd6ddb0d28f8d9847e484ed0a363" translate="yes" xml:space="preserve">
          <source>For the above example, the fitness score encodes several goals:</source>
          <target state="translated">对于上面的例子,体能评分编码了几个目标。</target>
        </trans-unit>
        <trans-unit id="e535032bbffb1677991a1ac9deb0622823aaa726" translate="yes" xml:space="preserve">
          <source>For the above, it almost always seems to converge. The obvious result
for calculating the square of a number is</source>
          <target state="translated">对于上述情况,几乎都是收敛的。计算一个数的平方的明显结果是</target>
        </trans-unit>
        <trans-unit id="83c972f3df97181f7a2dcb03ec10e397f7106911" translate="yes" xml:space="preserve">
          <source>Furthermore, it uses the &lt;a href=&quot;https://pypi.python.org/pypi/byteplay/0.2&quot;&gt;byteplay module&lt;/a&gt;, which works for Python 2.x only.
In time, I plan to support all instructions and the Python 3.x series.</source>
          <target state="translated">此外，它使用&lt;a href=&quot;https://pypi.python.org/pypi/byteplay/0.2&quot;&gt;byteplay模块&lt;/a&gt;，该模块仅适用于Python2.x。我计划及时支持所有说明和Python 3.x系列。</target>
        </trans-unit>
        <trans-unit id="dd43d31de5b67d2d08845ea50dc9ca91c99fd44b" translate="yes" xml:space="preserve">
          <source>Here is the main part of the code that instructs Crianza to find a</source>
          <target state="translated">这里是代码的主要部分,它指示Crianza找到一个</target>
        </trans-unit>
        <trans-unit id="5723ce3a2d10cbf827162afee57c19432b657c99" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s code to print the Fibonacci sequence:</source>
          <target state="translated">这是打印斐波那契数列的代码：</target>
        </trans-unit>
        <trans-unit id="0d3f35998f1921266e21688229a7fe892f313e86" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;ve not played around much with the GP, but I think it currently does
crossover quite badly and unintelligently. It also seems to have
problems converging on somewhat more advanced programs. But, it&amp;rsquo;s a
start, and it&amp;rsquo;s definitely a lot of fun!</source>
          <target state="translated">我在GP上玩的不多，但是我认为它目前确实非常糟糕且毫无智能地交叉。在某些更高级的程序上融合似乎也存在问题。但是，这是一个开始，肯定很有趣！</target>
        </trans-unit>
        <trans-unit id="ea424d38af72dd1366a08aad1f47eca3e7ec3d24" translate="yes" xml:space="preserve">
          <source>IP</source>
          <target state="translated">知识产权</target>
        </trans-unit>
        <trans-unit id="28772ac68c4ecb9394b7b2928403f6c16e1436e9" translate="yes" xml:space="preserve">
          <source>In fact, the Python bytecode for the two functions are exactly the same, sans
the local argument name.</source>
          <target state="translated">事实上,这两个函数的 Python 字节码是完全一样的,只是局部参数名称不同。</target>
        </trans-unit>
        <trans-unit id="4adeb1dfba8fadc5d51405deb59e15dbfd646573" translate="yes" xml:space="preserve">
          <source>In this case, the entire code will be constant-folded to simply 20. The</source>
          <target state="translated">在这种情况下,整个代码将被恒定折叠为简单的20。在这种情况下,整个代码将恒定地折叠成简单的20。</target>
        </trans-unit>
        <trans-unit id="641ab27786347be1c7ac80c61cd9c5a472c75bf6" translate="yes" xml:space="preserve">
          <source>Install from PyPI:</source>
          <target state="translated">从PyPI安装。</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="016306a37644bb615a64608475d4dad37c7484fc" translate="yes" xml:space="preserve">
          <source>It comes both with a command line program (for running programs and starting a
REPL) and as a Python module so you can create and run programs from Python.
The</source>
          <target state="translated">它既有命令行程序 (用于运行程序和启动 REPL),也有 Python 模块,因此你可以从 Python 中创建和运行程序。这个</target>
        </trans-unit>
        <trans-unit id="9d6e4753a76fe2315edccbd9087b6b2730c1fe45" translate="yes" xml:space="preserve">
          <source>It uses a weighted &lt;a href=&quot;https://en.wikipedia.org/wiki/Jaccard_index#Tanimoto_similarity_and_distance&quot;&gt;Tanimoto coefficient (or Jaccard
index)&lt;/a&gt;
to relate fitness scores among programs, so you can encode any goal. See
the example files for more information.</source>
          <target state="translated">它使用加权的&lt;a href=&quot;https://en.wikipedia.org/wiki/Jaccard_index#Tanimoto_similarity_and_distance&quot;&gt;Tanimoto系数（或Jaccard索引）&lt;/a&gt; 来关联程序之间的适应度得分，因此您可以编码任何目标。有关更多信息，请参见示例文件。</target>
        </trans-unit>
        <trans-unit id="62dfb418aa5fe184e07cb42ddbc791c93dc5a566" translate="yes" xml:space="preserve">
          <source>Just type</source>
          <target state="translated">只要输入</target>
        </trans-unit>
        <trans-unit id="ebd31605d313a0796e5d8244ab7f1b733f6b9728" translate="yes" xml:space="preserve">
          <source>License and author</source>
          <target state="translated">许可证和作者</target>
        </trans-unit>
        <trans-unit id="b36f5d479abb3fd8a23e527fabad55a55a076469" translate="yes" xml:space="preserve">
          <source>More examples in the</source>
          <target state="translated">更多例子</target>
        </trans-unit>
        <trans-unit id="02a58f6f26a4bf096e82ba7b1e5c29f093ef18d3" translate="yes" xml:space="preserve">
          <source>Native Python bytecode compiler</source>
          <target state="translated">本地Python字节码编译器</target>
        </trans-unit>
        <trans-unit id="dffcd8ee5b021428b5a66409c3cf5ffd0ef47513" translate="yes" xml:space="preserve">
          <source>Notice that the optimizer constant-folds the entire expression down to simply</source>
          <target state="translated">请注意,优化器对整个表达式进行了常量折叠,将其简化为简单的</target>
        </trans-unit>
        <trans-unit id="54561fd891ee8d3bc3718283afdce5d24a9fb9d4" translate="yes" xml:space="preserve">
          <source>RS</source>
          <target state="translated">RS</target>
        </trans-unit>
        <trans-unit id="2959b6f8046ae37e19b5157cb97b691664f7bd93" translate="yes" xml:space="preserve">
          <source>Runtime and compile time errors in the program are penalized
(</source>
          <target state="translated">程序中的运行时和编译时错误会被惩罚(</target>
        </trans-unit>
        <trans-unit id="a1614ecc4e1e7e863ea36eeabcefacd2d98fa89d" translate="yes" xml:space="preserve">
          <source>Simple Forth-like VM and genetic programming framework.</source>
          <target state="translated">简单的类Forth虚拟机和遗传编程框架。</target>
        </trans-unit>
        <trans-unit id="200c007403aafa9f6caf36fbab97c4d953e76752" translate="yes" xml:space="preserve">
          <source>Simple correctness checking</source>
          <target state="translated">简单的正确性检查</target>
        </trans-unit>
        <trans-unit id="488016aeffd3725ec90f58a0174b566527dd6699" translate="yes" xml:space="preserve">
          <source>Some simple peephole optimizations</source>
          <target state="translated">一些简单的窥视孔优化</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="77d017b321a82b348c35437f78bb59c9c1e9d0a3" translate="yes" xml:space="preserve">
          <source>The VM contains:</source>
          <target state="translated">该虚拟机包含:</target>
        </trans-unit>
        <trans-unit id="138bc16623faae49da0e67c9595ed7819073c5b6" translate="yes" xml:space="preserve">
          <source>The code length should be no more than 5 instructions, but as small
as possible.</source>
          <target state="translated">代码长度不应超过5条指令,但要尽可能小。</target>
        </trans-unit>
        <trans-unit id="72c078e431a8c80abec1f5ec8809628f74d36cde" translate="yes" xml:space="preserve">
          <source>The complete machine is returned. Here it prints the current value of
the instruction pointer</source>
          <target state="translated">返回的是完整的机器。在这里,它打印出指令指针的当前值。</target>
        </trans-unit>
        <trans-unit id="1fdd25a60ea6841097a9fd0c74b6a137237c8124" translate="yes" xml:space="preserve">
          <source>The genetic programming part uses a simple evolutionary approach with
crossover and weighted Tanimoto coefficients to relate fitness scores.</source>
          <target state="translated">遗传编程部分使用简单的进化方法,用交叉和加权Tanimoto系数来关联健身分数。</target>
        </trans-unit>
        <trans-unit id="8e8862279b34124ce2156caaecc9a1e2827184da" translate="yes" xml:space="preserve">
          <source>The length of the data stack should be exactly one (this makes it
easier to embed the resulting code in a subroutine).</source>
          <target state="translated">数据堆栈的长度应该正好是一个(这样更容易将结果代码嵌入到子程序中)。</target>
        </trans-unit>
        <trans-unit id="96a8f3bad58877a2193d967a7d121509ac669c93" translate="yes" xml:space="preserve">
          <source>The more elaborate way of parsing and running code is:</source>
          <target state="translated">比较复杂的解析和运行代码的方式是。</target>
        </trans-unit>
        <trans-unit id="7264f92cc06fc1440581f616fe3fe92d839f0249" translate="yes" xml:space="preserve">
          <source>The project&amp;rsquo;s main goal is to be tutorial and fun.</source>
          <target state="translated">该项目的主要目标是使教程变得有趣。</target>
        </trans-unit>
        <trans-unit id="9d1f3a585e081c0e37a664c382bcce17ffb6db2f" translate="yes" xml:space="preserve">
          <source>The return stack should be zero after program completion.</source>
          <target state="translated">程序完成后,返回的栈应该为零。</target>
        </trans-unit>
        <trans-unit id="6e0ee4af76fbe65c0824dd610ddbadf829524ebe" translate="yes" xml:space="preserve">
          <source>The simplest way to get started with the language itself is to use the</source>
          <target state="translated">最简单的方法就是使用语言本身的</target>
        </trans-unit>
        <trans-unit id="689c31e1556df6ab5eaa0b2bd8a0d478e2cd8b86" translate="yes" xml:space="preserve">
          <source>The top of the stack</source>
          <target state="translated">栈的顶部</target>
        </trans-unit>
        <trans-unit id="7b930be5df29c83ec37ef31f0d98190220389bb5" translate="yes" xml:space="preserve">
          <source>This is equivalent of computing</source>
          <target state="translated">这相当于计算</target>
        </trans-unit>
        <trans-unit id="fa1d1d4534a518017fb37c4580f799d449ace77b" translate="yes" xml:space="preserve">
          <source>This project originated from a blog post I wrote at &lt;a href=&quot;https://csl.name/post/vm/&quot;&gt;https://csl.name/post/vm/&lt;/a&gt;
(it details how you can write your own interpreter from scratch) and is hosted
on &lt;a href=&quot;https://github.com/cslarsen/crianza&quot;&gt;https://github.com/cslarsen/crianza&lt;/a&gt;</source>
          <target state="translated">这个项目源自我在&lt;a href=&quot;https://csl.name/post/vm/&quot;&gt;https://csl.name/post/vm/上&lt;/a&gt;写的博客文章 （它详细说明了如何从头开始编写自己的解释器），并托管在&lt;a href=&quot;https://github.com/cslarsen/crianza&quot;&gt;https://github.com/cslarsen/crianza上。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="068bcb889ebaf784aaa49e616f1dbd0f68094064" translate="yes" xml:space="preserve">
          <source>Threaded code interpretation</source>
          <target state="translated">线程代码解释</target>
        </trans-unit>
        <trans-unit id="99f0fb19b02b5b10615962b4dad8ecf56e6d12ab" translate="yes" xml:space="preserve">
          <source>To test it, you can do:</source>
          <target state="translated">为了测试它,你可以做。</target>
        </trans-unit>
        <trans-unit id="f6cd365540d954f7619a03b0564adc05c6c32d8e" translate="yes" xml:space="preserve">
          <source>You can also do some simple optimizations on the code by specifying:</source>
          <target state="translated">你也可以通过指定对代码进行一些简单的优化。</target>
        </trans-unit>
        <trans-unit id="22d0b06ab6697336780029eb518e6cdd2c05382e" translate="yes" xml:space="preserve">
          <source>You can also use</source>
          <target state="translated">您也可以使用</target>
        </trans-unit>
        <trans-unit id="a2ce7b006e6140a7d43eedb49509d8586d53a284" translate="yes" xml:space="preserve">
          <source>You can divert program output to a memory buffer:</source>
          <target state="translated">您可以将程序输出转移到内存缓冲区。</target>
        </trans-unit>
        <trans-unit id="375e5f2d5190b0dd18d87335863a24b2ad176deb" translate="yes" xml:space="preserve">
          <source>You can run it by typing:</source>
          <target state="translated">你可以通过输入来运行它。</target>
        </trans-unit>
        <trans-unit id="ab498a354bd632be1005dd17c216f6c9e5fb46c0" translate="yes" xml:space="preserve">
          <source>You can run programs in files as well.  Use</source>
          <target state="translated">你也可以在文件中运行程序。使用</target>
        </trans-unit>
        <trans-unit id="2aedf6a87a1c82be17d551be676f1dbd36135e12" translate="yes" xml:space="preserve">
          <source>You can run the example simulation, which simply attempts to find a
program that squares input numbers. For speed, you should run it with</source>
          <target state="translated">你可以运行这个例子模拟,它只是试图找到一个能将输入数字平方化的程序。为了提高速度,你应该用</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="e8538d8f6c1214087fe9a2d454708d52f0caade5" translate="yes" xml:space="preserve">
          <source>and equivalently:</source>
          <target state="translated">并等效地。</target>
        </trans-unit>
        <trans-unit id="31df52a82204e63adf4babe7f7f5cb094c1ba56c" translate="yes" xml:space="preserve">
          <source>and puts the result on
top of the data stack. We can get this by doing</source>
          <target state="translated">并将结果放在数据栈的顶部。我们可以通过执行</target>
        </trans-unit>
        <trans-unit id="5383b4e94720dc6913447195d742d392dfec7ad2" translate="yes" xml:space="preserve">
          <source>and the return stack</source>
          <target state="translated">和返回栈</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">琶音</target>
        </trans-unit>
        <trans-unit id="f3976080c63fe888533cc6330e2a9131407105d5" translate="yes" xml:space="preserve">
          <source>args=1</source>
          <target state="translated">args=1</target>
        </trans-unit>
        <trans-unit id="d56d985300d4b52eb6e189be006f44f8d23c5ec9" translate="yes" xml:space="preserve">
          <source>check</source>
          <target state="translated">检查</target>
        </trans-unit>
        <trans-unit id="c7a9b610d4272ac739737c2e1fd26f33cd22b665" translate="yes" xml:space="preserve">
          <source>crianza --repl</source>
          <target state="translated">育种----再育</target>
        </trans-unit>
        <trans-unit id="f9664f1479588f5506343084be6096bd475dd9f0" translate="yes" xml:space="preserve">
          <source>crianza -h</source>
          <target state="translated">crianza -h</target>
        </trans-unit>
        <trans-unit id="cae4e302d3c5a7cabf1b161e714712d9686caa7a" translate="yes" xml:space="preserve">
          <source>crianza -r</source>
          <target state="translated">crianza -r</target>
        </trans-unit>
        <trans-unit id="b1da3508624ff2de6e2733a6c76aeb56e4675ebf" translate="yes" xml:space="preserve">
          <source>crianza.eval</source>
          <target state="translated">crianza.evaluation</target>
        </trans-unit>
        <trans-unit id="ac2fb3e6a94f32968b180b70f6174761f90592fa" translate="yes" xml:space="preserve">
          <source>crianza.execute</source>
          <target state="translated">crianza.execute</target>
        </trans-unit>
        <trans-unit id="d2fb90f95f4199599e95d8580671e489cc10b1f2" translate="yes" xml:space="preserve">
          <source>crianza.execute(...).top</source>
          <target state="translated">crianza.execute(...).top</target>
        </trans-unit>
        <trans-unit id="b2593dd37b483b3be03b2fdf0590ab1038799c1a" translate="yes" xml:space="preserve">
          <source>crianza.genetic</source>
          <target state="translated">Cryanza.genetic</target>
        </trans-unit>
        <trans-unit id="12e282b1f69fda4c2f22743a3b8cc71546695fbb" translate="yes" xml:space="preserve">
          <source>crianza.native</source>
          <target state="translated">crianza.native</target>
        </trans-unit>
        <trans-unit id="5a7fd866b82dd5c429cd208defc323360492c305" translate="yes" xml:space="preserve">
          <source>crianza.native.xcompile</source>
          <target state="translated">crianza.native.xcompile</target>
        </trans-unit>
        <trans-unit id="6e8ff4a3415366fd032e631d6e811470a8c42d25" translate="yes" xml:space="preserve">
          <source>dup *</source>
          <target state="translated">dup *</target>
        </trans-unit>
        <trans-unit id="e3ca57555f23b8a30bbcb98f2f7758dab3a0d05e" translate="yes" xml:space="preserve">
          <source>dup abs *</source>
          <target state="translated">dup abs *</target>
        </trans-unit>
        <trans-unit id="822bc13e2d55b402eb4233cb23c9d414a7a03bc1" translate="yes" xml:space="preserve">
          <source>eval</source>
          <target state="translated">评价</target>
        </trans-unit>
        <trans-unit id="edc7122991b4584d9789593b98c6dbce319820b2" translate="yes" xml:space="preserve">
          <source>examples/</source>
          <target state="translated">例子/</target>
        </trans-unit>
        <trans-unit id="c1710b83ca9f760fec39a3d9086df7f17a9ef85b" translate="yes" xml:space="preserve">
          <source>examples/genetic/square-number.py</source>
          <target state="translated">例子/遗传/平方数.py</target>
        </trans-unit>
        <trans-unit id="39ae89e0a135945a5e08d9340cd2eac771f228f6" translate="yes" xml:space="preserve">
          <source>execute</source>
          <target state="translated">执行</target>
        </trans-unit>
        <trans-unit id="d8434826715d3b3aa19ffefdffadb122d01422d6" translate="yes" xml:space="preserve">
          <source>folder.</source>
          <target state="translated">文件夹。</target>
        </trans-unit>
        <trans-unit id="936c99519ec4df025106decfc59454dee21d8ca7" translate="yes" xml:space="preserve">
          <source>followed by the
code.</source>
          <target state="translated">后面是代码。</target>
        </trans-unit>
        <trans-unit id="27f8e20bca824766bac879e975aeb3fab9df72b5" translate="yes" xml:space="preserve">
          <source>function checks for simple errors.</source>
          <target state="translated">函数检查简单的错误。</target>
        </trans-unit>
        <trans-unit id="43ceb0674229d7b2ed301185b87c7ca1b6c51e81" translate="yes" xml:space="preserve">
          <source>function takes in source code and</source>
          <target state="translated">函数接收源码和</target>
        </trans-unit>
        <trans-unit id="1dfae75987ab2c547d85f2eedd53692b234672e0" translate="yes" xml:space="preserve">
          <source>function:</source>
          <target state="translated">职能。</target>
        </trans-unit>
        <trans-unit id="f9aba3f1299b4a48e75ee40ef3baf522152a817c" translate="yes" xml:space="preserve">
          <source>ip</source>
          <target state="translated">联网</target>
        </trans-unit>
        <trans-unit id="3bb24737b980bf03bd3ac00fec5cc1ec74c16295" translate="yes" xml:space="preserve">
          <source>module contains a simple genetic programming framework.</source>
          <target state="translated">模块包含一个简单的遗传编程框架。</target>
        </trans-unit>
        <trans-unit id="1ce51b54ae3cb496f4f6a51699fa4dd1e4ae2a08" translate="yes" xml:space="preserve">
          <source>optimize=False</source>
          <target state="translated">optimize=False</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="cde1e9b6607355ff00ef6c5acea4068e07d5792b" translate="yes" xml:space="preserve">
          <source>or from the repository:</source>
          <target state="translated">或从存储库。</target>
        </trans-unit>
        <trans-unit id="c1218ee617d759a934dfca88784d348ab3b204e0" translate="yes" xml:space="preserve">
          <source>or just use</source>
          <target state="translated">或只用</target>
        </trans-unit>
        <trans-unit id="0576e1682d62e4d6290e79b18d0b0972fe64f1d1" translate="yes" xml:space="preserve">
          <source>pypy</source>
          <target state="translated">pypy</target>
        </trans-unit>
        <trans-unit id="c40adfb53e980367566a839ada751b56600f98d9" translate="yes" xml:space="preserve">
          <source>self._input**2</source>
          <target state="translated">self._input**2</target>
        </trans-unit>
        <trans-unit id="dc8358a1d4fa65e8cee686e47ee5940315120d9d" translate="yes" xml:space="preserve">
          <source>should equal the square of the program&amp;rsquo;s
input</source>
          <target state="translated">应该等于程序输入的平方</target>
        </trans-unit>
        <trans-unit id="a46084d8b3b86919d90ae295491f09ec4f7e8886" translate="yes" xml:space="preserve">
          <source>square-number</source>
          <target state="translated">平方数</target>
        </trans-unit>
        <trans-unit id="7b917a2076b5ac15595eed245529f13933dbdfbe" translate="yes" xml:space="preserve">
          <source>subroutine (see the file</source>
          <target state="translated">子程序(见文件</target>
        </trans-unit>
        <trans-unit id="0aceeff36c718f7a6f90c5dc8ade770e1ef5c179" translate="yes" xml:space="preserve">
          <source>to get options.</source>
          <target state="translated">以获得选项。</target>
        </trans-unit>
        <trans-unit id="5fb3ff3828a11518b05363c7715535eda45ab86f" translate="yes" xml:space="preserve">
          <source>to get the machine used to execute
the program:</source>
          <target state="translated">来获取执行程序的机器。</target>
        </trans-unit>
        <trans-unit id="6c28c5eae7cf954cd14298176c1381d7ddd3bf0e" translate="yes" xml:space="preserve">
          <source>to start the interpreter.  In
this example, we want to calculate</source>
          <target state="translated">来启动解释器。在这个例子中,我们想计算</target>
        </trans-unit>
        <trans-unit id="af2c7b4ca07ae6c74d261bc745e174df8ab3ffef" translate="yes" xml:space="preserve">
          <source>top</source>
          <target state="translated">顶端</target>
        </trans-unit>
        <trans-unit id="405910ebf7ab9578889aa890de36e0b6b17f7dbf" translate="yes" xml:space="preserve">
          <source>will automatically optimize the code (turn off
with the option</source>
          <target state="translated">将会自动优化代码(使用选项 &quot;关闭&quot;)。</target>
        </trans-unit>
        <trans-unit id="4da09b897111962e4da3f70aa51d149e1fc7dcc4" translate="yes" xml:space="preserve">
          <source>|ds|</source>
          <target state="translated">| ds |</target>
        </trans-unit>
        <trans-unit id="82ac8511d21f9215b993338f6781127d013ee783" translate="yes" xml:space="preserve">
          <source>|rs|</source>
          <target state="translated">| rs |</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
