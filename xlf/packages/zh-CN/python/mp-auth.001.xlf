<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/mp-auth/">
    <body>
      <group id="mp-auth">
        <trans-unit id="0c77360d80e4bb131a23da58c58c5db89f1b3d32" translate="yes" xml:space="preserve">
          <source>Add Multi-provider auth for various providers</source>
          <target state="translated">为不同的供应商增加多供应商授权。</target>
        </trans-unit>
        <trans-unit id="db3bc6c39fe038a45fb86f895589f506bf0c2499" translate="yes" xml:space="preserve">
          <source>Install the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)</source>
          <target state="translated">安装Django REST框架的多供应商认证中间件 (需要Python 3)</target>
        </trans-unit>
        <trans-unit id="f365c609b0e3df72d19f5307e8b50df05266a6e7" translate="yes" xml:space="preserve">
          <source>Many authentication middleware packages have been writted for Django REST Framework with
support for OAuth2 opaque or JWT token. Most popular ones are listed with a short description
on &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt;. But all of them that support opaque tokens
require access to the Identity Provider database to verify the access tokens. Or they cannot be
stack up with other authentication classes to authenticate a bearer token against multiple
Identity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all
Identity Providers that issue JWT tokens and &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; that issues opaque access tokens. Support
for other Identity Providers can easily be added by creating a new backend in &lt;code&gt;mp_auth/backends&lt;/code&gt;.
Each backend can be used separately as an Django REST Framework authentication class, or can be a part of
list of authentication class that Django REST Framework will go through to authenticate an HTTP request.
&lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; is a special authentication class that calls all
authentication classes configured in &lt;code&gt;settings.py&lt;/code&gt;.</source>
          <target state="translated">已经为Django REST Framework编写了许多身份验证中间件程序包，并支持OAuth2不透明或JWT令牌。其中列出了最流行的&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST框架-身份验证&lt;/a&gt;的简短描述。但是所有支持不透明令牌的用户都需要访问身份提供者数据库以验证访问令牌。或者，它们不能与其他身份验证类堆叠在一起，以针对多个身份提供者对承载令牌进行身份验证。 Multiprovider身份验证中间件填补了这一空白。它支持所有发行JWT令牌的身份提供者和发行不透明访问令牌的&lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;。通过在 &lt;code&gt;mp_auth/backends&lt;/code&gt; 中创建新的后端，可以轻松添加对其他身份提供者的支持。。每个后端都可以单独用作Django REST Framework身份验证类，也可以作为Django REST Framework将用于验证HTTP请求的身份验证类列表的一部分。 &lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; 是一个特殊的身份验证类，它调用 &lt;code&gt;settings.py&lt;/code&gt; 中配置的所有身份验证类。</target>
        </trans-unit>
        <trans-unit id="ab86ee1d35d4278b22e567dc8690b42b93f4cfb5" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication</source>
          <target state="translated">多供应商认证</target>
        </trans-unit>
        <trans-unit id="85545c3c5d03b98f9f0c66cdebd184642f0ee177" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication is an easy to setup authentication middleware with support for
&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; and multiple OAuth2/OIDC Identity Providers that issue opaque
or JWT access tokens, e.g. &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;, &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;, etc.</source>
          <target state="translated">Multiprovider身份验证是一种易于设置的身份验证中间件，它支持 &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt;和多个OAuth2 / OIDC身份提供程序，这些身份提供程序会发布不透明或JWT访问令牌，例如&lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;，&lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;等。</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">理由</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">设置</target>
        </trans-unit>
        <trans-unit id="f7347011dad922ecb28d1f9f97cae602c60f8dc5" translate="yes" xml:space="preserve">
          <source>Then any view can be protected by &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, or, if you want to
authenticate an HTTP request against both &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, by
&lt;code&gt;MultiproviderAuthentication&lt;/code&gt; class.</source>
          <target state="translated">然后，可以通过 &lt;code&gt;JWTAuthentication&lt;/code&gt; 或 &lt;code&gt;GlobusAuthentication&lt;/code&gt; 来保护任何视图，或者，如果要针对 &lt;code&gt;JWTAuthentication&lt;/code&gt; 或 &lt;code&gt;GlobusAuthentication&lt;/code&gt; 来验证HTTP请求，则可以通过 &lt;code&gt;MultiproviderAuthentication&lt;/code&gt; 类来保护任何视图。</target>
        </trans-unit>
        <trans-unit id="a1220b82c1195db067a1119e19e5d9fe237de6f8" translate="yes" xml:space="preserve">
          <source>and in &lt;code&gt;settings.py&lt;/code&gt; set the following:</source>
          <target state="translated">并在 &lt;code&gt;settings.py&lt;/code&gt; 中设置以下内容：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
