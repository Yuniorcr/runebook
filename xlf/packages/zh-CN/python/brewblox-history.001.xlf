<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/brewblox-history/">
    <body>
      <group id="brewblox-history">
        <trans-unit id="da39a3ee5e6b4b0d3255bfef95601890afd80709" translate="yes" xml:space="preserve">
          <source/>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6264f0c98f6b92ba3d3a9cf0e3cb4936232f90a" translate="yes" xml:space="preserve">
          <source># History Service</source>
          <target state="translated">＃历史服务</target>
        </trans-unit>
        <trans-unit id="57251adf3375dc25500671ee7d5655fa1894f682" translate="yes" xml:space="preserve">
          <source>## Features</source>
          <target state="translated">＃＃ 特征</target>
        </trans-unit>
        <trans-unit id="9512fdecb6c8a2d8c66c62a88dd013c980064cbf" translate="yes" xml:space="preserve">
          <source>## REST API</source>
          <target state="translated">## REST API</target>
        </trans-unit>
        <trans-unit id="b937a3e6ab01df17da9b6ba2355af5aaf9c97cd8" translate="yes" xml:space="preserve">
          <source>### DataRelay ([relays.py](./brewblox_history/relays.py))</source>
          <target state="translated">### DataRelay（[relays.py]（../ brewblox_history / relays.py））</target>
        </trans-unit>
        <trans-unit id="df65c140922a207842119debdcfcc2324351ed80" translate="yes" xml:space="preserve">
          <source>### InfluxWriter ([influx.py](./brewblox_history/influx.py))</source>
          <target state="translated">### InfluxWriter（[influx.py]（./ brewblox_history / influx.py））</target>
        </trans-unit>
        <trans-unit id="46380f097319048b23a60ed67b69af2afee93fef" translate="yes" xml:space="preserve">
          <source>### QueryClient ([influx.py](./brewblox_history/influx.py))</source>
          <target state="translated">### QueryClient（[influx.py]（../ brewblox_history / influx.py））</target>
        </trans-unit>
        <trans-unit id="449f7f86edfd047a52c92f3519049ed3e9c7659a" translate="yes" xml:space="preserve">
          <source>### queries ([sse.py](./brewblox_history/sse.py))</source>
          <target state="translated">###查询（[sse.py]（./ brewblox_history / sse.py））</target>
        </trans-unit>
        <trans-unit id="8eae460f337f1d70bbc6581a5d0404123767a5c5" translate="yes" xml:space="preserve">
          <source>### sse ([sse.py](./brewblox_history/sse.py))</source>
          <target state="translated">### sse（[sse.py]（./ brewblox_history / sse.py））</target>
        </trans-unit>
        <trans-unit id="0ac2b20ad4bb1e198be86ddc029c2a92036d1d77" translate="yes" xml:space="preserve">
          <source>### subscribe ([influx.py](./brewblox_history/influx.py))</source>
          <target state="translated">###订阅（[influx.py]（./ brewblox_history / influx.py））</target>
        </trans-unit>
        <trans-unit id="fe9cd7727b5ed157449310b882927180124fed70" translate="yes" xml:space="preserve">
          <source>&amp;ndash;broadcast-exchange</source>
          <target state="translated">&amp;ndash;广播交换</target>
        </trans-unit>
        <trans-unit id="96394833448116c93791e97844dcc0b309663d9b" translate="yes" xml:space="preserve">
          <source>. It will periodically yield newly received data as SSE data.</source>
          <target state="translated">。它将定期产生新接收的数据作为SSE数据。</target>
        </trans-unit>
        <trans-unit id="710108398efcaf878e5813b31b6296cbc6180fdf" translate="yes" xml:space="preserve">
          <source>Adds another broadcast subscription. All data received with this subscription is written to InfluxDB.</source>
          <target state="translated">添加另一个广播订阅。所有接收到的数据都会写入InfluxDB。</target>
        </trans-unit>
        <trans-unit id="401c5783cb0893fc7476739fcd86005d6e1ac731" translate="yes" xml:space="preserve">
          <source>By default, it is subscribed to the broadcast exchange specified with the</source>
          <target state="translated">默认情况下,它被订阅到用</target>
        </trans-unit>
        <trans-unit id="dd06fc9a4e50175cb51d952136c4007ef82dccfb" translate="yes" xml:space="preserve">
          <source>Handles directly querying InfluxDB. API functions eventually call this.</source>
          <target state="translated">处理直接查询InfluxDB。API函数最终会调用这个。</target>
        </trans-unit>
        <trans-unit id="aed8a0cad569155cb392fe582905ca00c56d0511" translate="yes" xml:space="preserve">
          <source>Periodically writes scheduled data points to InfluxDB.</source>
          <target state="translated">定期向InfluxDB写入计划数据点。</target>
        </trans-unit>
        <trans-unit id="94441d6f8d77121a7028d16f2f8d2d616af14c31" translate="yes" xml:space="preserve">
          <source>Public query API for external clients. Input is sanitized before being passed on to InfluxDB.</source>
          <target state="translated">面向外部客户的公共查询API。输入的信息在被传递给InfluxDB之前会被过滤。</target>
        </trans-unit>
        <trans-unit id="3d939c7b5d2145dab3be22f7a20f661f95309ac7" translate="yes" xml:space="preserve">
          <source>Publicly offers the</source>
          <target state="translated">公开提供</target>
        </trans-unit>
        <trans-unit id="d47b817ec91ff5dadb8a690f7ab905835ae93deb" translate="yes" xml:space="preserve">
          <source>Subscribe to regular updates of database values. The endpoint arguments are comparable to the ones used to get values from</source>
          <target state="translated">订阅数据库值的定期更新。端点参数与用于从</target>
        </trans-unit>
        <trans-unit id="d8cc7ddd700c2542df97d48a35141e4b1a957a1f" translate="yes" xml:space="preserve">
          <source>Subscribes to the broadcast exchange on the event bus, and schedules all received data for writing to the database.</source>
          <target state="translated">订阅事件总线上的广播交换,并安排所有收到的数据写入数据库。</target>
        </trans-unit>
        <trans-unit id="cff1756e42457473311237993fbcebe748ecc2ef" translate="yes" xml:space="preserve">
          <source>The history service is the gatekeeper for the InfluxDB database. It writes broadcasted data, and offers a REST interface for querying the database.</source>
          <target state="translated">历史服务是InfluxDB数据库的守门人。它写广播数据,并提供一个REST接口来查询数据库。</target>
        </trans-unit>
        <trans-unit id="667170cb5954dbda5be8397121e6769c812fd86d" translate="yes" xml:space="preserve">
          <source>commandline argument. Additional subscriptions can be added.</source>
          <target state="translated">命令行参数。可以添加额外的订阅。</target>
        </trans-unit>
        <trans-unit id="4aae6ce38d1775eaf765a9aaae84455c2474b94d" translate="yes" xml:space="preserve">
          <source>function, where data can be scheduled for writing.</source>
          <target state="translated">函数,在该函数中可以安排数据的写入。</target>
        </trans-unit>
        <trans-unit id="b9bc9eb9599dc8cac9a8f99884fcfb4ed933a35f" translate="yes" xml:space="preserve">
          <source>queries</source>
          <target state="translated">查询</target>
        </trans-unit>
        <trans-unit id="04f8051539f470904e88a17354586252491e11e4" translate="yes" xml:space="preserve">
          <source>write_soon()</source>
          <target state="translated">write_soon()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
