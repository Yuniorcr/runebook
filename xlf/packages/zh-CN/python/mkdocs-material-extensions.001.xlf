<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/mkdocs-material-extensions/">
    <body>
      <group id="mkdocs-material-extensions">
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="f5e1055bf37b3ff6b56485d2613a913655a7cde0" translate="yes" xml:space="preserve">
          <source>Extension pack for Python Markdown.</source>
          <target state="translated">Python Markdown的扩展包。</target>
        </trans-unit>
        <trans-unit id="17c076391013450ceb7b86b199052bb1fe65bdf3" translate="yes" xml:space="preserve">
          <source>If an icon name is already in the index, the icon will not be added. It is recommended to always have your icons in
sub-folders to help namespace them to avoid name collisions. In the example above, &lt;code&gt;bird&lt;/code&gt; was under &lt;code&gt;animals&lt;/code&gt; which
created the name &lt;code&gt;:animals-bird:&lt;/code&gt; and helped create a more unique name with less of a chance of creating a duplicate
name with existing emoji and Material icons.</source>
          <target state="translated">如果图标名称已经在索引中，则不会添加该图标。建议始终将图标放在子文件夹中，以帮助命名它们以避免名称冲突。在上面的示例中， &lt;code&gt;bird&lt;/code&gt; 在 &lt;code&gt;animals&lt;/code&gt; ，该动物创建了名称 &lt;code&gt;:animals-bird:&lt;/code&gt; ,并帮助创建了一个更独特的名称，很少有机会使用现有的表情符号和Material图标创建重复的名称。</target>
        </trans-unit>
        <trans-unit id="59beb8d3be9596cd1e36a12dfec4b37770ab9d5b" translate="yes" xml:space="preserve">
          <source>If given an icon at &lt;code&gt;my_project/my_icons/animals/bird.svg&lt;/code&gt;, the icon would be available using the emoji syntax as
&lt;code&gt;:animals-bird:&lt;/code&gt;. Notice that the base folder that is provided doesn't contribute to the icon's name. Also, folders
are separated with &lt;code&gt;-&lt;/code&gt;. Folder names and icon names should be compatible with the emoji syntax, so special characters
should be avoided -- &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; are okay.</source>
          <target state="translated">如果在给定的图标 &lt;code&gt;my_project/my_icons/animals/bird.svg&lt;/code&gt; ，图标会使用表情符号的语法可用 &lt;code&gt;:animals-bird:&lt;/code&gt; 。请注意，提供的基本文件夹不会影响图标的名称。此外，文件夹用 &lt;code&gt;-&lt;/code&gt; 分隔。文件夹名称和图标名称应与emoji语法兼容，因此应避免使用特殊字符 &lt;code&gt;-&lt;/code&gt; 和 &lt;code&gt;_&lt;/code&gt; 可以。</target>
        </trans-unit>
        <trans-unit id="2cd94e53848fe9fc6efc914b3d450c583ad80aed" translate="yes" xml:space="preserve">
          <source>In MkDocs, you can override theme assets locally, and even add assets to the theme. Unfortunately, the Markdown parsing
process isn't aware of the MkDocs environment. Luckily, if you are using PyMdown Extensions 7.1, you can pass in custom
icon paths that will be used when constructing the emoji index and include your custom SVG assets. If a folder path of
&lt;code&gt;theme/my_icons&lt;/code&gt; was given to the index builder, all icons under &lt;code&gt;my_project/my_icons&lt;/code&gt;, even in sub-folders, would
become part of the index.</source>
          <target state="translated">在MkDocs中，您可以在本地覆盖主题资产，甚至可以将资产添加到主题。不幸的是，Markdown解析过程并不了解MkDocs环境。幸运的是，如果您使用的是PyMdown Extensions 7.1，则可以传入在构建表情符号索引时将使用的自定义图标路径，并包括自定义SVG资产。如果将 &lt;code&gt;theme/my_icons&lt;/code&gt; 的文件夹路径 提供给了索引生成器，则 &lt;code&gt;my_project/my_icons&lt;/code&gt; 下的所有图标（即使在子文件夹中）也将成为索引的一部分。</target>
        </trans-unit>
        <trans-unit id="3c2611898371c8785487e231908db3e8c1afbf25" translate="yes" xml:space="preserve">
          <source>In addition to the custom index, you must also specify the associated custom generator. This will will find the
appropriate icon and insert it into your Markdown content as an inlined SVG.</source>
          <target state="translated">除了自定义索引,您还必须指定相关的自定义生成器。这将会找到合适的图标,并将其作为内嵌的SVG插入到你的Markdown内容中。</target>
        </trans-unit>
        <trans-unit id="5e67a02373654838808b08db96cc409aef257a3f" translate="yes" xml:space="preserve">
          <source>Inline SVG Icons</source>
          <target state="translated">在线SVG图标</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="7115e8eb4fe680a3052f9e3ec9d4c28b69e5204f" translate="yes" xml:space="preserve">
          <source>Markdown extension resources for &lt;a href=&quot;https://github.com/squidfunk/mkdocs-material&quot;&gt;MkDocs for Material&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/squidfunk/mkdocs-material&quot;&gt;MkDocs for Material的&lt;/a&gt;Markdown扩展资源</target>
        </trans-unit>
        <trans-unit id="cbb07f930fa392fac74ad3f7c65e2dfb001979c7" translate="yes" xml:space="preserve">
          <source>MkDocs Material Extensions</source>
          <target state="translated">MkDocs材料扩展</target>
        </trans-unit>
        <trans-unit id="7b383e3c8b17a4876e8fcfa6789a9202fe17a44b" translate="yes" xml:space="preserve">
          <source>MkDocs Material provides numerous icons from Material, FontAwesome, and Octicons, but it does so by inlining the SVG
icons into the source. Currently there is no easy way access these icons and arbitrarily insert them into Markdown
content. Users must include the icon fonts themselves and do it with HTML.</source>
          <target state="translated">MkDocs Material提供了许多来自Material、FontAwesome和Octicons的图标,但它是通过将SVG图标内嵌到源代码中来实现的。目前,还没有简单的方法来访问这些图标并将它们任意插入到Markdown内容中。用户必须自己包含图标字体,并用HTML来完成。</target>
        </trans-unit>
        <trans-unit id="b421e36b31ba979e30bb4cf179a2ffb4a4de1e43" translate="yes" xml:space="preserve">
          <source>Then, using the folder structure of Material's &lt;code&gt;.icons&lt;/code&gt; folder, you can specify icons:</source>
          <target state="translated">然后，使用Material的 &lt;code&gt;.icons&lt;/code&gt; 文件夹的文件夹结构，可以指定图标：</target>
        </trans-unit>
        <trans-unit id="df8642c2b8f3937719aa838b896a029ff02ae4f3" translate="yes" xml:space="preserve">
          <source>This module allows you to use PyMdown Extensions' &lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/extensions/emoji/&quot;&gt;Emoji&lt;/a&gt; extension to enable easy insertion of MkDocs Material's
SVG assets using simple &lt;code&gt;:emoji-syntax:&lt;/code&gt;.  This is done by creating our own &lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/extensions/emoji/#custom-emoji-indexes&quot;&gt;emoji index&lt;/a&gt; and
&lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/extensions/emoji/#custom-emoji-generators&quot;&gt;emoji generator&lt;/a&gt;. The custom index provides a modified version of the Emoji extensions Twemoji
index.</source>
          <target state="translated">该模块允许您使用PyMdown扩展的&lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/extensions/emoji/&quot;&gt;Emoji&lt;/a&gt;扩展使用简单的 &lt;code&gt;:emoji-syntax:&lt;/code&gt; 轻松插入MkDocs Material的SVG资产。这是通过创建我们自己的&lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/extensions/emoji/#custom-emoji-indexes&quot;&gt;表情符号索引&lt;/a&gt;和 &lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/extensions/emoji/#custom-emoji-generators&quot;&gt;表情符号生成器来完成的&lt;/a&gt;。自定义索引提供了Emoji扩展Twemoji索引的修改版本。</target>
        </trans-unit>
        <trans-unit id="e48c75e79062c267d2f499c2d095f4d23411a4c6" translate="yes" xml:space="preserve">
          <source>Using Local Custom Icons</source>
          <target state="translated">使用本地自定义图标</target>
        </trans-unit>
        <trans-unit id="858c84947a51f344057d4e099f892ba1e11652f2" translate="yes" xml:space="preserve">
          <source>You can provide as many paths as you would like, and they will be evaluated in the order that they are specified. The
Material theme's own icons will be evaluated after all custom paths. This allows a user to override Material's icons if
desired.</source>
          <target state="translated">你可以提供任意多的路径,它们将按照指定的顺序被评估。Material主题自己的图标将在所有自定义路径之后被评估。这允许用户在需要时覆盖Material的图标。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
