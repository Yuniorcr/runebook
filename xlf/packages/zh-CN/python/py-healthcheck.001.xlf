<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/py-healthcheck/">
    <body>
      <group id="py-healthcheck">
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">，</target>
        </trans-unit>
        <trans-unit id="496f9742fd035271d08a16ad33164d828ec640d9" translate="yes" xml:space="preserve">
          <source>, etc.) to check the status and uptime of your
application.</source>
          <target state="translated">, etc.) to check the status and uptime of your application.</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">， 要么</target>
        </trans-unit>
        <trans-unit id="f6b456c5a40061fff4798251b6137d99bffd81e3" translate="yes" xml:space="preserve">
          <source>. If those strings are
present in the name of the variable, the value is not included.</source>
          <target state="translated">. If those strings are present in the name of the variable, the value is not included.</target>
        </trans-unit>
        <trans-unit id="132a80ec866858af34ddf395af859d9d2b5187ce" translate="yes" xml:space="preserve">
          <source>: information about the currently running Python process,
including the PID, command line arguments, and all environment
variables.</source>
          <target state="translated">: information about the currently running Python process, including the PID, command line arguments, and all environment variables.</target>
        </trans-unit>
        <trans-unit id="78b376114ed5864022b05b60cd69c1c3024d357a" translate="yes" xml:space="preserve">
          <source>: information about your Python executable, Python path,
and installed packages.</source>
          <target state="translated">: information about your Python executable, Python path, and installed packages.</target>
        </trans-unit>
        <trans-unit id="4bd8a9273dcacaa8f83f6b05768b4aa695905dc8" translate="yes" xml:space="preserve">
          <source>: information about your operating system.</source>
          <target state="translated">: information about your operating system.</target>
        </trans-unit>
        <trans-unit id="ec2b3d03393fd7b1b52c56d4264a11f98f636111" translate="yes" xml:space="preserve">
          <source>Adding custom data sections</source>
          <target state="translated">添加自定义数据部分</target>
        </trans-unit>
        <trans-unit id="b27178160a5dd73b444778016d08bd1bcab94e06" translate="yes" xml:space="preserve">
          <source>Adds healthcheck endpoints to Flask or Tornado apps</source>
          <target state="translated">为Flask或Tornado应用程序添加健康检查端点。</target>
        </trans-unit>
        <trans-unit id="9161e8f28342154f0c1382abb8c961fc823ab1a3" translate="yes" xml:space="preserve">
          <source>Alternatively you can set all together:</source>
          <target state="translated">也可以全部设置在一起。</target>
        </trans-unit>
        <trans-unit id="7489f3b79c417eaeea837239da085fb31818fe2d" translate="yes" xml:space="preserve">
          <source>And to view the environment data, make a check to the URL you specified
for EnvironmentDump:</source>
          <target state="translated">如果要查看环境数据,请到你指定的EnvironmentDump的URL进行检查。</target>
        </trans-unit>
        <trans-unit id="392f7dc0da98201e9ffe105a5001fb3934b33b99" translate="yes" xml:space="preserve">
          <source>Any exceptions that get thrown by your code will be caught and handled
as errors in the healthcheck:</source>
          <target state="translated">任何被你的代码抛出的异常都会被捕获,并在健康检查中作为错误处理。</target>
        </trans-unit>
        <trans-unit id="bafc4cb9c08c2b6814ce83ead37693b0fc260fbe" translate="yes" xml:space="preserve">
          <source>Built-in data sections</source>
          <target state="translated">内置数据部分</target>
        </trans-unit>
        <trans-unit id="84f687ba0578a146e850dfca295c286958669c8d" translate="yes" xml:space="preserve">
          <source>By default, EnvironmentDump data includes these 4 sections:</source>
          <target state="translated">默认情况下,EnvironmentDump数据包括这4个部分。</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">缓存</target>
        </trans-unit>
        <trans-unit id="12d33189bcb81a95540f068151a9176e68adf743" translate="yes" xml:space="preserve">
          <source>Check Functions</source>
          <target state="translated">检查功能</target>
        </trans-unit>
        <trans-unit id="48470d224a9557938a65847a9749e89561e056e2" translate="yes" xml:space="preserve">
          <source>Check functions take no arguments and should return a tuple of (bool,
str). The boolean is whether or not the check passed. The message is any
string or output that should be rendered for this check. Useful for
error messages/debugging.</source>
          <target state="translated">检查函数不接受任何参数,应该返回一个(bool,str)的元组。boolean是检查是否通过。message是任何应该为这个检查渲染的字符串或输出。对错误信息/调试有用。</target>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="translated">学分</target>
        </trans-unit>
        <trans-unit id="cf6d2f40fcb0dd73c771598c1a396e4ff778df72" translate="yes" xml:space="preserve">
          <source>Customizing</source>
          <target state="translated">自定义</target>
        </trans-unit>
        <trans-unit id="36863a6d0a87232caf24c32784774d7635531000" translate="yes" xml:space="preserve">
          <source>Disabling built-in data sections</source>
          <target state="translated">停用内置数据部分</target>
        </trans-unit>
        <trans-unit id="60bce7d1e7e778af73c12ce083d28d2660772e8e" translate="yes" xml:space="preserve">
          <source>EnvironmentDump</source>
          <target state="translated">EnvironmentDump</target>
        </trans-unit>
        <trans-unit id="f749d85face6d985a84c2dd0bb2da0a1fcb65288" translate="yes" xml:space="preserve">
          <source>Flask</source>
          <target state="translated">烧瓶</target>
        </trans-unit>
        <trans-unit id="96e8c8e935fb374f5b67b93b2e97d9676d533f73" translate="yes" xml:space="preserve">
          <source>For security reasons, you may want to disable an entire section. You can
disable sections when you instantiate the</source>
          <target state="translated">出于安全考虑,您可能需要禁用整个部分。您可以在实例化的时候禁用部分。</target>
        </trans-unit>
        <trans-unit id="4007effca2245f3fcbc552e12ae7b0adbdc48ecf" translate="yes" xml:space="preserve">
          <source>Healthcheck</source>
          <target state="translated">健康检查</target>
        </trans-unit>
        <trans-unit id="d4907ff73ee974016208f491e6178dda43d498ad" translate="yes" xml:space="preserve">
          <source>Healthcheck is a library to write simple healthcheck functions that can
be used to monitor your application. It is possible to use in a</source>
          <target state="translated">Healthcheck是一个用于编写简单的健康检查函数的库,可以用来监控你的应用程序。它可以用在</target>
        </trans-unit>
        <trans-unit id="0707f48f79ca2199066e0812f176adb9a798fd54" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of basic usage with</source>
          <target state="translated">Here&amp;rsquo;s an example of basic usage with</target>
        </trans-unit>
        <trans-unit id="ff01e68311156e4b750459ad6675d294c11c7828" translate="yes" xml:space="preserve">
          <source>In Runscope&amp;rsquo;s infrastructure, the /healthcheck endpoint is hit
surprisingly often. haproxy runs on every server, and each haproxy hits
every healthcheck twice a minute. (So if we have 30 servers in our
infrastructure, that&amp;rsquo;s 60 healthchecks per minute to every Flask
service.) Plus, monit hits every healthcheck 6 times a minute.</source>
          <target state="translated">In Runscope&amp;rsquo;s infrastructure, the /healthcheck endpoint is hit surprisingly often. haproxy runs on every server, and each haproxy hits every healthcheck twice a minute. (So if we have 30 servers in our infrastructure, that&amp;rsquo;s 60 healthchecks per minute to every Flask service.) Plus, monit hits every healthcheck 6 times a minute.</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="652bdd0a8b91526107a4c3d7006aa02cc5bcea0e" translate="yes" xml:space="preserve">
          <source>New in version 1.1: Healthcheck also gives you a simple Flask route to
view information about your application&amp;rsquo;s environment. By default, this
includes data about the operating system, the Python environment, the
current process, and the application config. You can customize which
sections are included, or add your own sections to the output.</source>
          <target state="translated">New in version 1.1: Healthcheck also gives you a simple Flask route to view information about your application&amp;rsquo;s environment. By default, this includes data about the operating system, the Python environment, the current process, and the application config. You can customize which sections are included, or add your own sections to the output.</target>
        </trans-unit>
        <trans-unit id="b0a065880afbfd52b550c2f99909f73699751c66" translate="yes" xml:space="preserve">
          <source>Note, all checkers will get run and all failures will be reported. It&amp;rsquo;s
intended that they are all separate checks and if any one fails the
healthcheck overall is failed.</source>
          <target state="translated">Note, all checkers will get run and all failures will be reported. It&amp;rsquo;s intended that they are all separate checks and if any one fails the healthcheck overall is failed.</target>
        </trans-unit>
        <trans-unit id="694b1ac250fc54782fbc893ed5696e861bb626ee" translate="yes" xml:space="preserve">
          <source>Runscope</source>
          <target state="translated">Runscope</target>
        </trans-unit>
        <trans-unit id="d9e22942e1ee78a73bb7a561cfccac7b15db2626" translate="yes" xml:space="preserve">
          <source>Some of the data is scrubbed to avoid accidentally exposing passwords or
access keys/tokens. Config keys and environment variable names are
scanned for</source>
          <target state="translated">部分数据会被擦除,以避免意外暴露密码或访问密钥/标记。配置键和环境变量名会被扫描,以确定是否存在以下情况</target>
        </trans-unit>
        <trans-unit id="29b864bed070b7cda5c33025a76e154ebc3d44da" translate="yes" xml:space="preserve">
          <source>The EnvironmentDump class</source>
          <target state="translated">环境转储类</target>
        </trans-unit>
        <trans-unit id="707ba89915cd3369a1d092bc549e1b73c9a77d1f" translate="yes" xml:space="preserve">
          <source>The HealthCheck class</source>
          <target state="translated">HealthCheck类</target>
        </trans-unit>
        <trans-unit id="0fcee205c4e8d1256ce96cf6c0314462cbbd44ac" translate="yes" xml:space="preserve">
          <source>This project was forked from &lt;a href=&quot;https://github.com/Runscope/healthcheck&quot;&gt;Runscope/healthcheck&lt;/a&gt;. since</source>
          <target state="translated">This project was forked from &lt;a href=&quot;https://github.com/Runscope/healthcheck&quot;&gt;Runscope/healthcheck&lt;/a&gt;. since</target>
        </trans-unit>
        <trans-unit id="2ec028f31d1ad6dcf12cf48c4523c344698161f3" translate="yes" xml:space="preserve">
          <source>To avoid putting too much strain on backend services, health check
results can be cached in process memory. By default, health checks that
succeed are cached for 27 seconds, and failures are cached for 9
seconds. These can be overridden with the</source>
          <target state="translated">为了避免给后端服务带来太大压力,可以将健康检查结果缓存在进程内存中。默认情况下,成功的健康检查会被缓存27秒,失败的会被缓存9秒。这些可以通过</target>
        </trans-unit>
        <trans-unit id="59b3b6ff5d14ffaea4abbe587d980838f631d25a" translate="yes" xml:space="preserve">
          <source>To run all of your check functions, make a request to the healthcheck
URL you specified, like this:</source>
          <target state="translated">要运行所有的检查功能,向你指定的healthcheck URL发出请求,就像这样。</target>
        </trans-unit>
        <trans-unit id="209fadc31519d68d6e9f9f4cb3c7332b66534d89" translate="yes" xml:space="preserve">
          <source>To use with</source>
          <target state="translated">搭配使用</target>
        </trans-unit>
        <trans-unit id="bea627f8ee28519a09b024254b900d47c7456046" translate="yes" xml:space="preserve">
          <source>Tornado</source>
          <target state="translated">龙卷风</target>
        </trans-unit>
        <trans-unit id="6537de12d3eaf5bcb9cea1af236a581ec92c50cf" translate="yes" xml:space="preserve">
          <source>TornadoHandler</source>
          <target state="translated">TornadoHandler</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="d713ca8d870cdfeb112abd654479d42242f3e918" translate="yes" xml:space="preserve">
          <source>Will output:</source>
          <target state="translated">将输出。</target>
        </trans-unit>
        <trans-unit id="aa5e063b86c8115fc3eaa5eb39c06edc84184046" translate="yes" xml:space="preserve">
          <source>You can add a new section to the output by registering a function of
your own. Here&amp;rsquo;s an example of how this would be used:</source>
          <target state="translated">You can add a new section to the output by registering a function of your own. Here&amp;rsquo;s an example of how this would be used:</target>
        </trans-unit>
        <trans-unit id="8d1d818f309be29108981f205bc8e315211151b3" translate="yes" xml:space="preserve">
          <source>You can customize the status codes, headers, and output format for
success and failure responses.</source>
          <target state="translated">您可以自定义状态代码、标题以及成功和失败响应的输出格式。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="8dd7058a8af1555eedefc29e87e8c81745c59bda" translate="yes" xml:space="preserve">
          <source>app or</source>
          <target state="translated">应用程序或</target>
        </trans-unit>
        <trans-unit id="c5ae7505f21eae4c05ebabed260ff858833ce21c" translate="yes" xml:space="preserve">
          <source>app. It&amp;rsquo;s useful for asserting that your dependencies
are up and running and your application can respond to HTTP requests.
The Healthcheck functions can be exposed via a user defined</source>
          <target state="translated">app. It&amp;rsquo;s useful for asserting that your dependencies are up and running and your application can respond to HTTP requests. The Healthcheck functions can be exposed via a user defined</target>
        </trans-unit>
        <trans-unit id="8bed5e5f9ac816fad31db37ad7366ae906720ad7" translate="yes" xml:space="preserve">
          <source>failed_ttl</source>
          <target state="translated">失败_ttl</target>
        </trans-unit>
        <trans-unit id="a62f2225bf70bfaccbc7f1ef2a397836717377de" translate="yes" xml:space="preserve">
          <source>key</source>
          <target state="translated">钥匙</target>
        </trans-unit>
        <trans-unit id="3568f62a517667d3dae77d47746d8382dd3b9f3b" translate="yes" xml:space="preserve">
          <source>monit</source>
          <target state="translated">货币</target>
        </trans-unit>
        <trans-unit id="fe2d0a7a5b34951b6ec3c46184f1ed3eae19459d" translate="yes" xml:space="preserve">
          <source>nagios</source>
          <target state="translated">nagios</target>
        </trans-unit>
        <trans-unit id="44fb019f2290c608761e08bbe8200f92bd8e0e1a" translate="yes" xml:space="preserve">
          <source>object,
like this:</source>
          <target state="translated">对象,像这样。</target>
        </trans-unit>
        <trans-unit id="999a3419d9959d3c39b11dcc67d79c7888b4b765" translate="yes" xml:space="preserve">
          <source>os</source>
          <target state="translated">操作系统</target>
        </trans-unit>
        <trans-unit id="57ba2f9426f34ea690b1b538058a7dc3cf5654c1" translate="yes" xml:space="preserve">
          <source>parameters. If you don&amp;rsquo;t want to use the cache at all,
initialize the Healthcheck object with</source>
          <target state="translated">parameters. If you don&amp;rsquo;t want to use the cache at all, initialize the Healthcheck object with</target>
        </trans-unit>
        <trans-unit id="9d4e1e23bd5b727046a9e3b4b7db57bd8d6ee684" translate="yes" xml:space="preserve">
          <source>pass</source>
          <target state="translated">pass</target>
        </trans-unit>
        <trans-unit id="c2e2d6621334dc890bbd8a69430012c45a83bf65" translate="yes" xml:space="preserve">
          <source>process</source>
          <target state="translated">处理</target>
        </trans-unit>
        <trans-unit id="4235227b51436ad86d07c7cf5d69bda2644984de" translate="yes" xml:space="preserve">
          <source>python</source>
          <target state="translated">蟒蛇</target>
        </trans-unit>
        <trans-unit id="56a0d61b53179bb1a0092bf4a9b3c2c04f31f587" translate="yes" xml:space="preserve">
          <source>route so you can use an external monitoring application (</source>
          <target state="translated">路由,这样您就可以使用外部监控应用程序(</target>
        </trans-unit>
        <trans-unit id="95a10e04d34310fc2a741f32fb95ddefdd390e5a" translate="yes" xml:space="preserve">
          <source>success_ttl</source>
          <target state="translated">成功_ttl</target>
        </trans-unit>
        <trans-unit id="7eb3504c876ee8c6ba1355f77b671788dc833b0b" translate="yes" xml:space="preserve">
          <source>success_ttl=None, failed_ttl=None</source>
          <target state="translated">success_ttl=None,failed_ttl=None。</target>
        </trans-unit>
        <trans-unit id="ee977806d7286510da8b9a7492ba58e2484c0ecc" translate="yes" xml:space="preserve">
          <source>token</source>
          <target state="translated">象征性</target>
        </trans-unit>
        <trans-unit id="7f8540c938e0bcbbf4e23dc669b95b85983db4f3" translate="yes" xml:space="preserve">
          <source>you can import the</source>
          <target state="translated">你可以导入</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
