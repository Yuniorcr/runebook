<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/pymetis/">
    <body>
      <group id="pymetis">
        <trans-unit id="be1afc7d51a8b82d29fbb608999d7c66e32316b4" translate="yes" xml:space="preserve">
          <source>A Graph Partitioning Package</source>
          <target state="translated">图形分割包</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="2cd5c7737fd6c2874e72cc5de91a253ff2a15a52" translate="yes" xml:space="preserve">
          <source>PyMetis is a Python wrapper for the &lt;a href=&quot;http://glaros.dtc.umn.edu/gkhome/views/metis&quot;&gt;Metis&lt;/a&gt; graph partititioning software
by George Karypis, Vipin Kumar and others. It includes version 5.1.0 of Metis
and wraps it using the &lt;a href=&quot;http://www.boost.org/libs/python/doc/&quot;&gt;Boost Python&lt;/a&gt;
wrapper generator library. So far, it only wraps the most basic graph
partitioning functionality (which is enough for my current use), but extending
it in case you need more should be quite straightforward. Using PyMetis to
partition your meshes is really easy&amp;ndash;essentially all you need to pass into
PyMetis is an adjacency list for the graph and the number of parts you would
like.</source>
          <target state="translated">PyMetis is a Python wrapper for the &lt;a href=&quot;http://glaros.dtc.umn.edu/gkhome/views/metis&quot;&gt;Metis&lt;/a&gt; graph partititioning software by George Karypis, Vipin Kumar and others. It includes version 5.1.0 of Metis and wraps it using the &lt;a href=&quot;http://www.boost.org/libs/python/doc/&quot;&gt;Boost Python&lt;/a&gt; wrapper generator library. So far, it only wraps the most basic graph partitioning functionality (which is enough for my current use), but extending it in case you need more should be quite straightforward. Using PyMetis to partition your meshes is really easy&amp;ndash;essentially all you need to pass into PyMetis is an adjacency list for the graph and the number of parts you would like.</target>
        </trans-unit>
        <trans-unit id="79f6a852786a83078873dc39b44456872a21e738" translate="yes" xml:space="preserve">
          <source>PyMetis: A Python Wrapper for METIS</source>
          <target state="translated">PyMetis。METIS的Python封装器</target>
        </trans-unit>
        <trans-unit id="3d410f37629e04d0576e0b40d8e1a59498f0b6cc" translate="yes" xml:space="preserve">
          <source>The following line should do the job:</source>
          <target state="translated">下面这句话应该可以做到。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
