<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/edalize/">
    <body>
      <group id="edalize">
        <trans-unit id="460a25395cb88a0253f6d94a6f6583cae534a278" translate="yes" xml:space="preserve">
          <source>, and then run it with a parameter to control simulated clock frequency.</source>
          <target state="translated">，然后使用参数运行它以控制模拟时钟频率。</target>
        </trans-unit>
        <trans-unit id="7ebba9ffffc46e236ade83e935eeeffecf379455" translate="yes" xml:space="preserve">
          <source>.
Then there&amp;rsquo;s also a testbench called</source>
          <target state="translated">。然后还有一个称为</target>
        </trans-unit>
        <trans-unit id="711ee7f5712d24652b92979ccd38f348dc292e8f" translate="yes" xml:space="preserve">
          <source>.
You can get those files from &lt;a href=&quot;https://github.com/fusesoc/blinky&quot;&gt;blinky&lt;/a&gt; and for</source>
          <target state="translated">。您可以从&lt;a href=&quot;https://github.com/fusesoc/blinky&quot;&gt;眨眼间&lt;/a&gt;获取这些文件，并且</target>
        </trans-unit>
        <trans-unit id="fce0ab600d2933e71f37fbd7146f9f6276bf9fb7" translate="yes" xml:space="preserve">
          <source>. Or we could skip it altogether, and the default value from the configure stage would be used. Let&amp;rsquo;s run with VCD logging enabled:</source>
          <target state="translated">。或者，我们可以完全跳过它，而将使用configure阶段的默认值。让我们在启用VCD日志记录的情况下运行：</target>
        </trans-unit>
        <trans-unit id="b46348b8f3042b1dc57a3747afed967a17d80670" translate="yes" xml:space="preserve">
          <source>. The testbench also
has an option to enable waveform dumping by setting a plusarg called</source>
          <target state="translated">。测试台还具有一个选项，可以通过设置一个称为</target>
        </trans-unit>
        <trans-unit id="3a924ab25b49cb0b1c9aef2dcf934d461f944d61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edalize it, don&amp;rsquo;t criticize it!&lt;/strong&gt;&lt;strong&gt;Edalize it, and I will advertise it!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;陶醉它，不要批评它！&lt;/strong&gt;&lt;strong&gt;进行个性化处理，我会做广告！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17ebf5e9417d20ad0829bbb4e65b8995ebad1a0c" translate="yes" xml:space="preserve">
          <source>All EDA tools such as Icarus, Yosys, ModelSim, Vivado, Verilator, GHDL, Quartus etc get input HDL files (Verilog and VHDL) and some tool-specific files (constraint files, memory initialization files, IP description files etc). Together with the files, perhaps a couple of Verilog `defines, some top-level parameters/generics or some tool-specific options are set. Once the configuration is done, a simulation model, netlist or FPGA image is built, and in the case of simulations, the model is also executed, maybe with some extra run-time parameters.</source>
          <target state="translated">所有的EDA工具,如Icarus、Yosys、ModelSim、Vivado、Verilator、GHDL、Quartus等都会得到输入的HDL文件(Verilog和VHDL)和一些工具专用文件(约束文件、内存初始化文件、IP描述文件等)。连同这些文件一起,可能会设置几个Verilog`定义,一些顶层参数/generics或一些工具专用选项。配置完成后,就会建立一个仿真模型、网表或FPGA映像,如果是仿真,模型也会被执行,也许会有一些额外的运行时参数。</target>
        </trans-unit>
        <trans-unit id="f04346c9b14aa1e2dc53081a2b3b56dbf8aeac27" translate="yes" xml:space="preserve">
          <source>And finally run it, with our arguments. Some types of parameters (e.g. plusargs) are defined aat runtime, and at this point we can change their value by passing the name and new value to</source>
          <target state="translated">最后运行它,带上我们的参数。某些类型的参数(例如 plusargs)是在运行时定义的,此时我们可以通过将名称和新的值传递给</target>
        </trans-unit>
        <trans-unit id="67492b9b30fbd61b1d14fc098d280246e3a07208" translate="yes" xml:space="preserve">
          <source>And put it all into a single data structure together with some info about the toplevel and name for the project:</source>
          <target state="translated">并将其与一些关于toplevel和项目名称的信息一起放入一个单一的数据结构中。</target>
        </trans-unit>
        <trans-unit id="f1e0d4f63ebd29901652b379795e0eb1dfcbd982" translate="yes" xml:space="preserve">
          <source>As you have seen, Edalize is an award-winning tool for interfacing EDA tools, so</source>
          <target state="translated">正如你所看到的,Edalize是一款屡获殊荣的EDA工具接口工具,所以,你可以在Edalize中找到你想要的工具。</target>
        </trans-unit>
        <trans-unit id="2d46c258895968d92747aca439c679856375f5a7" translate="yes" xml:space="preserve">
          <source>Assume we have a project that consists of a Verilog source file called</source>
          <target state="translated">假设我们有一个由Verilog源文件组成的项目,这个源文件叫做</target>
        </trans-unit>
        <trans-unit id="94d873bc74c843f84372114e02f7e3007c8e0f93" translate="yes" xml:space="preserve">
          <source>At this point, we still haven&amp;rsquo;t run the actual EDA tool and the files in the</source>
          <target state="translated">目前，我们还没有运行实际的EDA工具，</target>
        </trans-unit>
        <trans-unit id="15355334677940ca226d6420d966d84c54348f3c" translate="yes" xml:space="preserve">
          <source>Build the simulation model:</source>
          <target state="translated">建立模拟模型。</target>
        </trans-unit>
        <trans-unit id="b644287a00ccafd0b3c0c207a253072a29c74554" translate="yes" xml:space="preserve">
          <source>Create the directory and the project files:</source>
          <target state="translated">创建目录和项目文件。</target>
        </trans-unit>
        <trans-unit id="9dfe4884d89d809060eca3e9407cb552c62ceac9" translate="yes" xml:space="preserve">
          <source>Dread not! Edalize takes care of this for you. By telling Edalize what files you have, together with some info, what parametrization to use at compile- and run-time (e.g. plusargs, defines, generics, parameters), VPI library sources (when applicable) and any other tool-specific options not already mentioned, it will create the necessary project files and offer to build and run it for you.</source>
          <target state="translated">不要害怕!&quot;Edalize &quot;为您解决这个问题。Edalize会帮你解决这个问题。通过告诉 Edalize 你有哪些文件,以及一些信息,在编译和运行时使用什么参数(例如 plusargs、defines、generics、参数),VPI 库源(如果适用)以及任何其他工具专用选项,它将创建必要的项目文件,并为你提供构建和运行它。</target>
        </trans-unit>
        <trans-unit id="3b38658d027fbfc3d86f3535f8eb739a9e46cb21" translate="yes" xml:space="preserve">
          <source>Edalize is a Python Library for interacting with EDA tools. It can create project files for supported tools and run them in batch or GUI mode (where supported).</source>
          <target state="translated">Edalize是一个用于与EDA工具交互的Python库。它可以为支持的工具创建项目文件,并在批处理或GUI模式下运行它们(如果支持)。</target>
        </trans-unit>
        <trans-unit id="6ac5488e478b00139f53c29df69a5d1edac38a30" translate="yes" xml:space="preserve">
          <source>Edalize is a Python module. Then once downloaded we can install it with
following Python command:</source>
          <target state="translated">Edalize是一个Python模块。那么下载后,我们可以通过下面的Python命令来安装它。</target>
        </trans-unit>
        <trans-unit id="9717ffd1fd53971ac86bfb2c9c8e6183ee0164d4" translate="yes" xml:space="preserve">
          <source>Edalize is a Python tool, then we can run it inside a Python script file or
directly in the Python console.</source>
          <target state="translated">Edalize是一个Python工具,那么我们可以在Python脚本文件里面运行它,也可以直接在Python控制台中运行。</target>
        </trans-unit>
        <trans-unit id="b33fc087e3c60205a7d6b6e4d717734ee3ef727f" translate="yes" xml:space="preserve">
          <source>Edalize is a library for interfacing EDA tools, primarily for FPGA development</source>
          <target state="translated">Edalize是一个用于连接EDA工具的库,主要用于FPGA开发。</target>
        </trans-unit>
        <trans-unit id="f5c724862c13cb0f32787f22eb025739a67f24e9" translate="yes" xml:space="preserve">
          <source>First we have to import Edalize objects:</source>
          <target state="translated">首先我们要导入Edalize对象。</target>
        </trans-unit>
        <trans-unit id="0312f8c6ecf65ccaefe478d32a396d7fe11129b2" translate="yes" xml:space="preserve">
          <source>For a simulation, we want to use the two Verilog files, build it in a subdirectory called</source>
          <target state="translated">对于模拟,我们要使用两个Verilog文件,将其建立在一个名为</target>
        </trans-unit>
        <trans-unit id="5a3af79b01e7f107ad0671c6788a469b93f8e1ad" translate="yes" xml:space="preserve">
          <source>How to use it?</source>
          <target state="translated">如何使用它?</target>
        </trans-unit>
        <trans-unit id="5d28aa5c3f5f864624758280797d60a6e8cc60fb" translate="yes" xml:space="preserve">
          <source>Install it</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="2043ab103db471787545635670b5d2fe2a717c7d" translate="yes" xml:space="preserve">
          <source>It allows you to quickly switch tools, at least when it comes to simulators. This is highly useful to shake out tool-specific bugs, or just to let you work with your weapon of choice.</source>
          <target state="translated">它允许你快速切换工具,至少在模拟器方面。这对于解决工具特有的bug,或者只是让你使用你选择的武器工作是非常有用的。</target>
        </trans-unit>
        <trans-unit id="93fdcf91f5d1658bdfb8b7d5cec5025b2e8f589c" translate="yes" xml:space="preserve">
          <source>It can also be used to just get a quick template that you can open up in the tool&amp;rsquo;s GUI if there is such, and continue working from there.</source>
          <target state="translated">它也可以用来获取快速模板，如果可以的话，可以在工具的GUI中打开它，然后从那里继续工作。</target>
        </trans-unit>
        <trans-unit id="c21332b6aa36f052e268b5595517058d4803f61f" translate="yes" xml:space="preserve">
          <source>It can be directly integrated as a library for your existing Python-powered HDL project, or can be used stand-alone (soon anyway) to feed Edalize from projects written in other languages.</source>
          <target state="translated">它可以作为一个库直接集成到你现有的Python-powered HDL项目中,也可以独立使用(很快),从其他语言编写的项目中馈送Edalize。</target>
        </trans-unit>
        <trans-unit id="7eddbb861b4b6fcf0c38b112825f6b8e70df5ed7" translate="yes" xml:space="preserve">
          <source>Let Edalize know we intend to use Icarus Verilog for our simulation:</source>
          <target state="translated">让Edalize知道我们打算使用Icarus Verilog进行仿真。</target>
        </trans-unit>
        <trans-unit id="2763a18ffbef7cdf00c67e62201bcd1b0a20ec23" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to create an FPGA image instead</source>
          <target state="translated">现在该创建一个FPGA映像了</target>
        </trans-unit>
        <trans-unit id="11deed86fd2ca82b1cc491dd4dd6d9896257c822" translate="yes" xml:space="preserve">
          <source>Now we need to get ourselves a backend object from Edalize:</source>
          <target state="translated">现在我们需要从Edalize中获取一个后端对象。</target>
        </trans-unit>
        <trans-unit id="c5569ecaac0adae33393fb4c716fbb49cd78e3cf" translate="yes" xml:space="preserve">
          <source>Ok, this sounds great. Now, how do I get started?</source>
          <target state="translated">好吧,这听起来不错。现在,我如何开始?</target>
        </trans-unit>
        <trans-unit id="81f306fa9f2104ad0970b13508e0d8ec5d3ba86b" translate="yes" xml:space="preserve">
          <source>See source code for further details.</source>
          <target state="translated">详见源代码。</target>
        </trans-unit>
        <trans-unit id="ed8364e54c55a479b8e6f39bbb85b0323457d9d2" translate="yes" xml:space="preserve">
          <source>Tada! We have simulated. As an exercise, try to just change the tool variable to e.g. modelsim, xsim or any of the other simulators supported by Edalize and see if it works without any changes.</source>
          <target state="translated">塔达!我们已经模拟了。作为一个练习,试着把工具变量改成例如modelsim、xsim或Edalize支持的任何其他模拟器,看看它是否可以不做任何改变。</target>
        </trans-unit>
        <trans-unit id="2c673fad51e8998785267683a52f59a2fdc567f3" translate="yes" xml:space="preserve">
          <source>The design has a toplevel Verilog parameter with the name</source>
          <target state="translated">该设计有一个顶层Verilog参数,名称为</target>
        </trans-unit>
        <trans-unit id="4a5f04cfa2646a6411b9bbce19d94ce63814c3f5" translate="yes" xml:space="preserve">
          <source>The os module is also required for this tutorial:</source>
          <target state="translated">本教程还需要os模块。</target>
        </trans-unit>
        <trans-unit id="67a71057959242412a00f73a70c76871cc8fed7d" translate="yes" xml:space="preserve">
          <source>The thing is, all these tools are doing this in completely different ways and there&amp;rsquo;s generally no way to import configurations from one simulator to another.</source>
          <target state="translated">事实是，所有这些工具都以完全不同的方式执行此操作，并且通常无法将配置从一个模拟器导入到另一个模拟器。</target>
        </trans-unit>
        <trans-unit id="078e4dfbd491fda0f4db5a99e75dc67320474513" translate="yes" xml:space="preserve">
          <source>Then register the files to use:</source>
          <target state="translated">然后注册要使用的文件。</target>
        </trans-unit>
        <trans-unit id="e4698f00fd38de3c922bfd483e8a1384f3d6f913" translate="yes" xml:space="preserve">
          <source>This will save you from having to deal with the boring stuff of interfacing the EDA tools yourself, while still have pretty much full power to set up the project the way you want.</source>
          <target state="translated">这将使你免于自己处理与EDA工具接口的枯燥事情,同时仍然拥有相当充分的权力来按照你想要的方式设置项目。</target>
        </trans-unit>
        <trans-unit id="dd6cb77a0659a3d52a82d922b5fe57156ac08fa7" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s this?</source>
          <target state="translated">这是什么？</target>
        </trans-unit>
        <trans-unit id="f464238dd5a91479083d9fcb05cf40b38119c8db" translate="yes" xml:space="preserve">
          <source>and a constraints file for synthesis called</source>
          <target state="translated">和用于合成的约束文件,称为</target>
        </trans-unit>
        <trans-unit id="608cd7846c435ee24ae5d4b2f88f10126174e7ba" translate="yes" xml:space="preserve">
          <source>blinky.v</source>
          <target state="translated">blinky.v</target>
        </trans-unit>
        <trans-unit id="005630791c057cd51eb0c23ba1006266a3ae03a5" translate="yes" xml:space="preserve">
          <source>blinky_tb.v</source>
          <target state="translated">blinky_tb.v</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">构建</target>
        </trans-unit>
        <trans-unit id="c7824641df903748e69482c26b0c53d7a0a633c7" translate="yes" xml:space="preserve">
          <source>clk_freq_hz</source>
          <target state="translated">时钟频率</target>
        </trans-unit>
        <trans-unit id="e2e36f5eeec1dbfe424f52bd33380ad0559a3fa3" translate="yes" xml:space="preserve">
          <source>constraints.sdc</source>
          <target state="translated">限制因素.SDC</target>
        </trans-unit>
        <trans-unit id="74bb2d76efbddcf927bd6676400e84db657b4f94" translate="yes" xml:space="preserve">
          <source>directory can be used without Edalize if that is preferred. But let&amp;rsquo;s continue the example with Edalize.</source>
          <target state="translated">如果首选，可以在没有Edalize的情况下使用该目录。但是，让我们继续以Edalize为例。</target>
        </trans-unit>
        <trans-unit id="00f90da41c1d2f1c4be8e728b74a058d3376c7de" translate="yes" xml:space="preserve">
          <source>in &lt;a href=&quot;https://github.com/fusesoc/vlog_tb_utils/blob/master/vlog_tb_utils.v&quot;&gt;orpsoc-cores&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/fusesoc/vlog_tb_utils/blob/master/vlog_tb_utils.v&quot;&gt;orpsoc-cores中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f805aaf52532959faf0be97c80abde3c8ae5e849" translate="yes" xml:space="preserve">
          <source>run()</source>
          <target state="translated">运行()</target>
        </trans-unit>
        <trans-unit id="73b04c4cec8b01e3b9b12628278aefec0240da8c" translate="yes" xml:space="preserve">
          <source>that accepts integers. We set its default value to</source>
          <target state="translated">接受整数。我们将其默认值设置为</target>
        </trans-unit>
        <trans-unit id="d7176438bb72b4ae6b7444ccfa29af622f3c03c7" translate="yes" xml:space="preserve">
          <source>vcd</source>
          <target state="translated">录像带</target>
        </trans-unit>
        <trans-unit id="64ba003b5e80d6f16edae9f35c0c00aa7bc8c2c4" translate="yes" xml:space="preserve">
          <source>vlog_tb_utils.v</source>
          <target state="translated">vlog_tb_utils.v</target>
        </trans-unit>
        <trans-unit id="e4a8408776e5338937b198443915b8b72ba74261" translate="yes" xml:space="preserve">
          <source>work_root</source>
          <target state="translated">工作根</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
