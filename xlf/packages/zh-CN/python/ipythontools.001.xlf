<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/ipythontools/">
    <body>
      <group id="ipythontools">
        <trans-unit id="7867d3fd53be0dc7eca20917d239cbfb7c62a7b9" translate="yes" xml:space="preserve">
          <source>&amp;gt; fig.savefig(&amp;lsquo;/path/to/my/article/XXX.eps&amp;rsquo;)</source>
          <target state="translated">&amp;gt; fig.savefig（'/ path / to / my / article / XXX.eps'）</target>
        </trans-unit>
        <trans-unit id="dadf221e2b29630f8f97a7151151f1cad05f402f" translate="yes" xml:space="preserve">
          <source>) as opposed to real markdown that resembles
English much better I define a custom filter function that
makes sure that strings which look like LaTeX commands will not be spell checked
(since very few LaTeX command are valid English words so that would give a lot of
apparent typos).
More complicated filters that avoid spell checking within equations or
commands like</source>
          <target state="translated">），而不是像英语那样的真实Markdown更好，我定义了一个自定义过滤器函数，该函数可以确保不会对看起来像LaTeX命令的字符串进行拼写检查（因为很少有LaTeX命令是有效的英文单词，因此，错别字）。更复杂的过滤器可避免在等式或命令中进行拼写检查，例如</target>
        </trans-unit>
        <trans-unit id="96be7d667b95a8cabd202ecf5703e0ece29f80f1" translate="yes" xml:space="preserve">
          <source>). Check the &lt;a href=&quot;https://github.com/hamogu/ipythontools&quot;&gt;github repository&lt;/a&gt;
for this code if you want to see if I have an improved version.</source>
          <target state="translated">）。 如果要查看我是否有改进版本，请在&lt;a href=&quot;https://github.com/hamogu/ipythontools&quot;&gt;github存储库中&lt;/a&gt;查找此代码。</target>
        </trans-unit>
        <trans-unit id="cc9c165d061c0cd51e388cd5a0445e26184e0ca7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a Python module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;作为Python模块&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06f316d860d3d49ac19a87af2e5590c668831891" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a script&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;作为脚本&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3115d1ebf2eefd3ec16172afc65b35b8221a39cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to use this script&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;如何使用此脚本&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="8ac7fc4a738213b4ceb8225268ac922724b3a577" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Design&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;设计&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f3278aa7e29a17ce9f2584f24d0b1a47ce961a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to use it&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;如何使用它&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="785fe4fefdab8199a472f341a617e7362ff57a5b" translate="yes" xml:space="preserve">
          <source>As much as I love the IPython notebook, there is one big drawback (at least in
my installation). When I type into a cell in the browser (I use firefox) there
is no automatic spell checking of the input. Sure, the notebook has syntax
highlighting for code cells in python, but I want to do my entire paper
writing in the notebook and for me that means that a spell checker for cells
with markdown, headings or raw text is absolutely essential.
On the other hand, I cannot just run e.g.</source>
          <target state="translated">虽然我很喜欢IPython笔记本,但有一个很大的缺点(至少在我的安装中)。当我在浏览器中输入一个单元格时(我使用firefox),没有对输入进行自动拼写检查。当然,笔记本在python中为代码单元格提供了语法高亮,但我想在笔记本中完成我的整个论文写作,对我来说,这意味着对带有标记、标题或原始文本的单元格进行拼写检查是绝对必要的。另一方面,我不能只运行例如</target>
        </trans-unit>
        <trans-unit id="e0d2763db5293e3bbef1e8ffe6e5892df0cb91a2" translate="yes" xml:space="preserve">
          <source>Be able to ignore certain parts of the notebook (e.g. introductory comments
in the first few cells).</source>
          <target state="translated">能够忽略笔记本的某些部分(如前几格的介绍性评论)。</target>
        </trans-unit>
        <trans-unit id="f1c19d2a2ee9313b484d11307196670bfd490fcb" translate="yes" xml:space="preserve">
          <source>Close down the notebook you want to spell check in IPython, then simply type on
the command line:</source>
          <target state="translated">关闭要在IPython中进行拼写检查的笔记本,然后简单地在命令行中输入。</target>
        </trans-unit>
        <trans-unit id="996122812a4499d2e98c63c2097cf853c4aa0b71" translate="yes" xml:space="preserve">
          <source>Convert headings to section / subsection etc.
I generally level 2 such as &amp;ldquo;## Heading&amp;rdquo; for section, &amp;ldquo;### Heading&amp;rdquo; for subsections etc.</source>
          <target state="translated">将标题转换为节/小节等。我通常使用第2级，例如，节的&amp;ldquo; ##标题&amp;rdquo;，节的&amp;ldquo; ###标题&amp;rdquo;等。</target>
        </trans-unit>
        <trans-unit id="a0a16ec70ec256609b5cabdb79290f5c6addc3f7" translate="yes" xml:space="preserve">
          <source>Copy text in &amp;ldquo;markdown&amp;rdquo; and &amp;ldquo;raw text&amp;rdquo; cells. To simplify, I just write
real LaTeX code in those cells. All equations will be rendered correctly
in the notebook file for me and my co-authors to see.
When I want to highlight something I type LaTeX &amp;ldquo;emph{}&amp;rdquo; or &amp;ldquo;textbf{}&amp;rdquo;,
not the markdown equivalents. That looks not as nice in the notebook, but
makes live so much easier.
Also, markdown does not recognize &amp;ldquo;cite&amp;rdquo;, &amp;ldquo;ref&amp;rdquo; and &amp;ldquo;label&amp;rdquo;. Again, it
looks not as nice in markdown, but
(1) I only need to know LaTeX and (2) it works flawlessly when converted.</source>
          <target state="translated">在&amp;ldquo; markdown&amp;rdquo;和&amp;ldquo; raw text&amp;rdquo;单元格中复制文本。为简化起见，我只在这些单元格中编写了真实的LaTeX代码。所有方程式将正确显示在笔记本文件中，供我和我的合著者查看。当我想突出显示某些内容时，请键入LaTeX&amp;ldquo; emph {}&amp;rdquo;或&amp;ldquo; textbf {}&amp;rdquo;，而不是markdown等效项。在笔记本中看起来并不那么好，但使生活变得更加轻松。同样，降价不能识别&amp;ldquo;引用&amp;rdquo;，&amp;ldquo;参考&amp;rdquo;和&amp;ldquo;标签&amp;rdquo;。再次，它在markdown中看起来不太好，但是（1）我只需要知道LaTeX，（2）转换后它可以完美地工作。</target>
        </trans-unit>
        <trans-unit id="d7de9f59c8e0e1ec511693cd90ca8354c3c2ebb8" translate="yes" xml:space="preserve">
          <source>Finally, call:</source>
          <target state="translated">最后,打电话。</target>
        </trans-unit>
        <trans-unit id="9d9befd865685e9e95d33be98682e396dce57dc6" translate="yes" xml:space="preserve">
          <source>Import into python and make a</source>
          <target state="translated">导入到python中并制作一个</target>
        </trans-unit>
        <trans-unit id="1160f28fb9bc2da5ebf8283b07c493f0463f2c5e" translate="yes" xml:space="preserve">
          <source>In this case it&amp;rsquo;s run with my set of design choices (see below).</source>
          <target state="translated">在这种情况下，它将与我的一组设计选择一起运行（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="0d334f4021259c6fdf3d2da6814a39acf2c925e0" translate="yes" xml:space="preserve">
          <source>Installing this module places a script in your path, so you can do:</source>
          <target state="translated">安装这个模块会在你的路径中放置一个脚本,所以你可以做。</target>
        </trans-unit>
        <trans-unit id="7546602cf40b4d2b031f722cdb27793c0481ca90" translate="yes" xml:space="preserve">
          <source>Jupyter/IPython notebook to latex converter and spell checker</source>
          <target state="translated">Jupyter/IPython 笔记本到乳胶的转换器和拼写检查器。</target>
        </trans-unit>
        <trans-unit id="d6875ea847a285b0f3fea4c40460d035f67fdc12" translate="yes" xml:space="preserve">
          <source>Just type figure captions into markdown cells.</source>
          <target state="translated">只要在markdown单元格中输入数字标题即可。</target>
        </trans-unit>
        <trans-unit id="4963541f8b271af92276d1437767aff6268feb12" translate="yes" xml:space="preserve">
          <source>LatexHeadingConverter</source>
          <target state="translated">LatexHeadingConverter</target>
        </trans-unit>
        <trans-unit id="e86cb4e0b6564c9e713d39dc9797777891ba34e8" translate="yes" xml:space="preserve">
          <source>LiteralSourceConverter</source>
          <target state="translated">LiteralSourceConverter</target>
        </trans-unit>
        <trans-unit id="5ce8c534c7950cd7b5e42fe74be74b167a43fc06" translate="yes" xml:space="preserve">
          <source>MarkedCodeOutputConverter</source>
          <target state="translated">MarkedCodeOutputConverter</target>
        </trans-unit>
        <trans-unit id="d3d82c5630254d2e7ee3f20683d7662d78166a38" translate="yes" xml:space="preserve">
          <source>No conversion of code cells. Who wants code in an ApJ paper?</source>
          <target state="translated">没有代码单元的转换。谁愿意在ApJ论文中写代码?</target>
        </trans-unit>
        <trans-unit id="a0ea28392b12edb9b0bb76d671d7c54b0847cf8a" translate="yes" xml:space="preserve">
          <source>No figure conversion. Instead, in the notebook itself I issue:</source>
          <target state="translated">没有图文转换。而是在笔记本本身我发出。</target>
        </trans-unit>
        <trans-unit id="d9c93a447b06ee883a9a40e9cf21bb79a519a0f4" translate="yes" xml:space="preserve">
          <source>Note that scipts and procedures have been renamed to &amp;ldquo;jupyter&amp;rdquo;, but the name of the package
and its directory structure still reflect that fact that Jupyter notebooks started out as part of the &lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; project.</source>
          <target state="translated">请注意，程序和过程已重命名为&amp;ldquo; jupyter&amp;rdquo;，但是程序包的名称及其目录结构仍然反映出Jupyter笔记本作为&lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt;项目的一部分而开始的事实。</target>
        </trans-unit>
        <trans-unit id="ba5aad5cc9fdd94c71a3990de2df0f303556d62d" translate="yes" xml:space="preserve">
          <source>NotebookConverter</source>
          <target state="translated">笔记本转换器</target>
        </trans-unit>
        <trans-unit id="ef481c6be928206bddfac40ea95dba82bc2ebd4a" translate="yes" xml:space="preserve">
          <source>Now all papers I work on a are written in an IPython notebook. So, the final
step to do is to convert the notebook to the LaTeX file I can submit to a
journal. That&amp;rsquo;s what this simple converter code does.</source>
          <target state="translated">现在，我从事的所有论文都写在IPython笔记本中。因此，要做的最后一步是将笔记本转换为我可以提交到日记本的LaTeX文件。这就是这个简单的转换器代码所做的。</target>
        </trans-unit>
        <trans-unit id="b31553839c43a486203d587b96dc51bd94505c76" translate="yes" xml:space="preserve">
          <source>Occasionally, I want to have the output of a computation (e.g. a table
written with astropy in LaTeX format) in the article. Keep it simple.
Output of all code cells that have a certain comment string (I use
&amp;ldquo;# output-&amp;gt;LaTeX&amp;rdquo;) is copied verbatim to the LaTeX file.</source>
          <target state="translated">有时，我想在文章中得到一个计算的输出（例如，以LaTeX格式用astropy编写的表）。把事情简单化。具有特定注释字符串（我使用&amp;ldquo;＃output-&amp;gt; LaTeX&amp;rdquo;）的所有代码单元的输出均原样复制到LaTeX文件中。</target>
        </trans-unit>
        <trans-unit id="f53a479e72af885654b465b2289725076471c943" translate="yes" xml:space="preserve">
          <source>Oh, one more thing: Because I type a lot of raw LaTeX in my notebooks (see my
other post on</source>
          <target state="translated">哦,还有一件事:因为我在我的笔记本上输入了很多原始的LaTeX文件(见我的另一篇关于</target>
        </trans-unit>
        <trans-unit id="db5e602ea3758bc969be7f6f82109e2dca89d280" translate="yes" xml:space="preserve">
          <source>Open the new file in IPython, run all cells again and keep working.</source>
          <target state="translated">在IPython中打开新文件,再运行所有单元格,继续工作。</target>
        </trans-unit>
        <trans-unit id="69dec19e2ce348a6b020bdd1bb2291da5bc2c527" translate="yes" xml:space="preserve">
          <source>Spell check the markdown text in IPython notebooks</source>
          <target state="translated">在IPython笔记本中检查标记文本的拼写。</target>
        </trans-unit>
        <trans-unit id="55b16bba4db3dc88083cb0d4bcd080deb43bf600" translate="yes" xml:space="preserve">
          <source>The code is written around these design ideas:</source>
          <target state="translated">代码就是围绕着这些设计理念来写的。</target>
        </trans-unit>
        <trans-unit id="9c063267cede9ac731c05e8aee66329f1183f81e" translate="yes" xml:space="preserve">
          <source>The converter</source>
          <target state="translated">转换器</target>
        </trans-unit>
        <trans-unit id="c3d1d1122a9b0cdc614468b496550c5eec457705" translate="yes" xml:space="preserve">
          <source>The spellchecker</source>
          <target state="translated">拼写检查器</target>
        </trans-unit>
        <trans-unit id="8bced610e3d0cfb3867bace09c956272e0734c9b" translate="yes" xml:space="preserve">
          <source>Then, customize how each type of cell is converted by changing the converter:</source>
          <target state="translated">然后,通过改变转换器来定制每种类型的单元格的转换方式。</target>
        </trans-unit>
        <trans-unit id="4e913128f80861691ab5f4fbdf2cfc2e0f8f9961" translate="yes" xml:space="preserve">
          <source>This converter is not intended to replace the nbconvert from the IPython
project. Instead, it serves one very specific purpose:
Turn a notebook into a LaTeX file that I can submit to the journal.</source>
          <target state="translated">这个转换器并不是要取代IPython项目中的nbconvert,而是为了一个非常特殊的目的:把笔记本变成LaTeX文件,以便提交给期刊。相反,它有一个非常特殊的目的:把笔记本变成一个LaTeX文件,以便我可以提交给期刊。</target>
        </trans-unit>
        <trans-unit id="848bc60a2dac408fdb7f552d03b5259b7156d402" translate="yes" xml:space="preserve">
          <source>This method allows you to use only part of a notebook file (ignore to first n
cells or ignore everything until a cell has a specific string value, e.g.
&amp;ldquo;The paper starts here&amp;rdquo;). Also, it allows you to provide a text file that will be
pasted before or after the converted notebook (you can put the &amp;lsquo;usepackage&amp;rsquo; and
similar stuff in those files so they don&amp;rsquo;t clutter your notebook).
However, I do not use this option any longer, because that means I would have
multiple input files. If I put all those LaTeX headers into the notebook as
well, I only have a single file.</source>
          <target state="translated">此方法仅允许您使用笔记本文件的一部分（忽略前n个单元格或忽略所有内容，直到一个单元格具有特定的字符串值，例如&amp;ldquo;纸张从此处开始&amp;rdquo;）。此外，它还允许您提供一个文本文件，该文本文件将在转换后的笔记本之前或之后粘贴（您可以将&amp;ldquo; usepackage&amp;rdquo;和类似的东西放入这些文件中，以免它们混乱您的笔记本）。但是，我不再使用此选项，因为这意味着我将有多个输入文件。如果我也将所有这些LaTeX标头都放到笔记本中，则我只有一个文件。</target>
        </trans-unit>
        <trans-unit id="1fec3f5db3c9fd65b860d4e6a9b0a693810d50cd" translate="yes" xml:space="preserve">
          <source>This module installs two command line scripts:</source>
          <target state="translated">本模块安装两个命令行脚本。</target>
        </trans-unit>
        <trans-unit id="7f2f0a960e33f9e2cf4f775bb9ca0ab72b891f68" translate="yes" xml:space="preserve">
          <source>To implement this I wrote a converter for each cell type.</source>
          <target state="translated">为了实现这一点,我为每个单元格类型写了一个转换器。</target>
        </trans-unit>
        <trans-unit id="d6f1eb8eb72b1108f6f2bfa3ff38785751430f78" translate="yes" xml:space="preserve">
          <source>When I first encountered the IPython notebook, I thought this was a solution
looking for a problem. However, I have since been converted!
The tipping point for me was this: I want to version control my papers and
I always had multiple directories for analysis code, plotting code, LaTeX files,
plot scripts and figures and tables. That&amp;rsquo;s just so unwieldy.
Also, I found it cumbersome to email figures to individual collaborators all
the time.
The Notebook can hold all this information in one place and I can just provide
my co-authors with a link to the github repository once and they have access
to the latest version all the time. Even if they do not use python, they can
still see the all the current figures using nbviewer.ipython.org</source>
          <target state="translated">当我第一次遇到IPython笔记本时，我以为这是解决问题的解决方案。但是，我从此被converted依了！对我而言，引爆点是：我想对论文进行版本控制，并且我始终有多个目录用于分析代码，绘图代码，LaTeX文件，绘图脚本以及图形和表格。那太笨拙了。另外，我发现总是将电子邮件发送给各个协作者很麻烦。笔记本可以将所有这些信息保存在一个地方，我只需为我的共同作者提供一次到github存储库的链接，他们就可以随时访问最新版本。即使他们不使用python，他们仍然可以使用nbviewer.ipython.org查看所有当前数据</target>
        </trans-unit>
        <trans-unit id="875cbcc95d99e4a4dd0d3e17db205085301357cd" translate="yes" xml:space="preserve">
          <source>Work with the python standard library only. No external dependencies.</source>
          <target state="translated">仅与python标准库一起工作。没有外部依赖性。</target>
        </trans-unit>
        <trans-unit id="49b84fdb779c24c1b3f5568727374457092f0309" translate="yes" xml:space="preserve">
          <source>\cite{}</source>
          <target state="translated">\引用{}</target>
        </trans-unit>
        <trans-unit id="6e5dfe09ab74d80bcb54e57395fd2bb52c2055c3" translate="yes" xml:space="preserve">
          <source>\label{XXX}</source>
          <target state="translated">\ label {XXX}</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="406752e03d293ca5a420e14227bdf63680343906" translate="yes" xml:space="preserve">
          <source>are possible (they would be called
a</source>
          <target state="translated">是可能的(它们将被称为</target>
        </trans-unit>
        <trans-unit id="01113a113efa76bd4bb0e3fd9f0ee8ce322c2fc4" translate="yes" xml:space="preserve">
          <source>because ApJ requires me to submit figures as separate files anyway.</source>
          <target state="translated">因为ApJ要求我无论如何都要把数字作为单独的文件提交。</target>
        </trans-unit>
        <trans-unit id="d6595f0cf3fe24d2b70103bcf8a5458ff4741217" translate="yes" xml:space="preserve">
          <source>can be the same filename (in this case the old file will get
overwritten with the spelling corrected version), but I recommend to keep a copy
just in case something gets screwed up.</source>
          <target state="translated">可以是相同的文件名(在这种情况下,旧文件会被改正后的拼写版本覆盖),但我建议保留一份副本,以防万一出现什么问题。</target>
        </trans-unit>
        <trans-unit id="35c5900c12f56b6e838bd659034d6f287f48e122" translate="yes" xml:space="preserve">
          <source>checks if a code cell has a specific string in
it and if so, it copies the output of this cell, and</source>
          <target state="translated">检查一个代码单元格中是否有特定的字符串,如果有,它就复制这个单元格的输出,而且</target>
        </trans-unit>
        <trans-unit id="a7507f1795b973d9534c465c5afe646d7b983a13" translate="yes" xml:space="preserve">
          <source>chunker</source>
          <target state="translated">大块头</target>
        </trans-unit>
        <trans-unit id="1c4b9e2170dd1cdc45dd53edc855cd112d29246e" translate="yes" xml:space="preserve">
          <source>converter.cellconverters[&amp;lsquo;code&amp;rsquo;] = NotebookConverter.IgnoreConverter()</source>
          <target state="translated">converter.cellconverters ['code'] = NotebookConverter.IgnoreConverter（）</target>
        </trans-unit>
        <trans-unit id="7cff5b5b7799f826e4ccf4118ff39f0bd5a71995" translate="yes" xml:space="preserve">
          <source>converter.convert(infile, outfile, &amp;hellip;)</source>
          <target state="translated">converter.convert（infile，outfile，&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="117bad3bab9782ca784fc6c013803e2db4200328" translate="yes" xml:space="preserve">
          <source>extracts some content (raw cells, markdown cells, code output) from a
Jupyter/IPython notebook and pastes it into a new file. It also converst markdown headings
to proper LaTeX chapter, section, subsetion etc. and inserts appropriate labels.
This converter is not intended to replace the nbconvert from the IPython
project. Instead, it serves one very specific purpose:
Turn a notebook into a LaTeX file that I can submit to the journal.</source>
          <target state="translated">从Jupyter/IPython笔记本中提取一些内容(原始单元格、标记单元格、代码输出)并粘贴到新文件中。它还可以将markdown标题转换为正确的LaTeX章、节、子集等,并插入适当的标签。这个转换器并不是要取代IPython项目中的nbconvert。相反,它有一个非常特殊的目的:把笔记本变成一个LaTeX文件,以便我可以提交给期刊。</target>
        </trans-unit>
        <trans-unit id="853f6d7c1d08cc6b26e5574a008dd81318c45acb" translate="yes" xml:space="preserve">
          <source>filein</source>
          <target state="translated">入档</target>
        </trans-unit>
        <trans-unit id="294f0add48f73ecc0d984886c8b10c0a9ed0f315" translate="yes" xml:space="preserve">
          <source>fileout</source>
          <target state="translated">出档</target>
        </trans-unit>
        <trans-unit id="68145c9316e801087b7108a5cc3d3b3f855b2647" translate="yes" xml:space="preserve">
          <source>from ipynb2article import NotebookConverter
converter = NotebookConverter</source>
          <target state="translated">从ipynb2article导入NotebookConverter转换器=NotebookConverter。</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">in</target>
        </trans-unit>
        <trans-unit id="45f3e2e7a61691e19164608a0c9c4959ada7625a" translate="yes" xml:space="preserve">
          <source>ipynb2article.py</source>
          <target state="translated">ipynb2article.py</target>
        </trans-unit>
        <trans-unit id="039969f05dc4707c725c2de5b903086fbfe71107" translate="yes" xml:space="preserve">
          <source>ispell</source>
          <target state="translated">拼写</target>
        </trans-unit>
        <trans-unit id="f1dd56b156609a34f786d18c1bd98609b6d88f91" translate="yes" xml:space="preserve">
          <source>jupyter2article</source>
          <target state="translated">jupyter2文章</target>
        </trans-unit>
        <trans-unit id="2d6cc5f6a92a6677e7136cfa35be836bb093bc5e" translate="yes" xml:space="preserve">
          <source>jupyter2article myanalysis.ipynb myanalysis.tex</source>
          <target state="translated">jupyter2article myanalysis.ipynb myanalysis.tex</target>
        </trans-unit>
        <trans-unit id="3f9ee6a0f3c4984f03f16adab8dd3174c8066ac4" translate="yes" xml:space="preserve">
          <source>jupyterspellcheck</source>
          <target state="translated">jupyterspellcheck</target>
        </trans-unit>
        <trans-unit id="10dc687a8a6d398a0253047d33cbf04dc71c93e7" translate="yes" xml:space="preserve">
          <source>jupyterspellcheck filein.ipynb fileout.ipynb</source>
          <target state="translated">jupyterspellcheck filein.ipynb fileout.ipynb</target>
        </trans-unit>
        <trans-unit id="13e53880be1515e812985845eb3181eeaf84666b" translate="yes" xml:space="preserve">
          <source>just takes the literal string value (it also adds
a line break at the end of the  cell) and puts it into the LaTeX file
(use for markdown and raw text cells),</source>
          <target state="translated">只是取字面的字符串值(它还在单元格末尾添加了一个换行符),并将其放入LaTeX文件中(用于标记和原始文本单元格)。</target>
        </trans-unit>
        <trans-unit id="87dc27214c1944c8d235d751c0ac66a8811edb7b" translate="yes" xml:space="preserve">
          <source>looks for the level of the heading and turns that into LaTeX (it also adds
as label like &amp;ldquo;label{sect:title}&amp;rdquo;).</source>
          <target state="translated">查找标题的级别，然后将其转换为LaTeX（它还会添加为&amp;ldquo; label {sect：title}&amp;rdquo;之类的标签）。</target>
        </trans-unit>
        <trans-unit id="0426c65f9613a523407c71497c3795ae931bf5cc" translate="yes" xml:space="preserve">
          <source>object:</source>
          <target state="translated">对象。</target>
        </trans-unit>
        <trans-unit id="f57a44af2cd8513541016b8bd43532f5deb4b97c" translate="yes" xml:space="preserve">
          <source>on the ipynb file, since
most of its contents is actually code and not plain English.
So, I wanted to write a spell checker, that parses the ipynb file and spell checks
only the markdown, heading and raw text input cells.</source>
          <target state="translated">ipynb文件,因为它的大部分内容实际上是代码而不是纯英文。所以,我想写一个拼写检查器,它可以解析ipynb文件,并且只对标记、标题和原始文本输入单元进行拼写检查。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="09c20497814ab5a11888e90c4aa824df1fa2c5d2" translate="yes" xml:space="preserve">
          <source>pyenchant</source>
          <target state="translated">阮经天</target>
        </trans-unit>
        <trans-unit id="00dbf49b7c82ff3159975aacc11cb205814756ef" translate="yes" xml:space="preserve">
          <source>spell checks markdown and raw cells in a notebook.</source>
          <target state="translated">拼写检查笔记本中的标记和原始单元格。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
