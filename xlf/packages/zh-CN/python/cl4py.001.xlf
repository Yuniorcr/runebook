<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/cl4py/">
    <body>
      <group id="cl4py">
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">，</target>
        </trans-unit>
        <trans-unit id="dfc68394d92d28ed14e74422c938a34492324fd4" translate="yes" xml:space="preserve">
          <source>.  This
means, that the Lisp process will ignore any user initialization files,
including the Quicklisp setup.  However, we provide an extra option for
installing and loading Quicklisp automatically:</source>
          <target state="translated">。这意味着Lisp进程将忽略任何用户初始化文件，包括Quicklisp设置。但是，我们提供了一个额外的选项来自动安装和加载Quicklisp：</target>
        </trans-unit>
        <trans-unit id="4911a208b464e3c88a14296c202fff997a17499d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.hylang.org/en/stable/&quot;&gt;Hy&lt;/a&gt;
- Python, but with Lisp syntax. This project is certainly a great way to
get started with Lisp. It allows you to study the advantages of Lisp&amp;rsquo;s
seemingly weird syntax, without leaving the comfortable Python
ecosystem. Once you understand the advantages of Lisp, you will doubly
appreciate cl4py for your projects.</source>
          <target state="translated">&lt;a href=&quot;http://docs.hylang.org/en/stable/&quot;&gt;Hy&lt;/a&gt; -Python，但具有Lisp语法。这个项目无疑是Lisp入门的好方法。它使您无需离开舒适的Python生态系统，即可研究Lisp看起来很奇怪的语法的优点。一旦了解了Lisp的优势，您将对cl4py的项目加倍赞赏。</target>
        </trans-unit>
        <trans-unit id="1d1057ed26fcf9d9d5910c3b2d1101ee4ec6fc0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/bendudson/py4cl&quot;&gt;py4cl&lt;/a&gt;
- A library that allows Common Lisp code to access Python libraries.  It
is basically the inverse of cl4py.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/bendudson/py4cl&quot;&gt;py4cl-&lt;/a&gt; 一个允许Common Lisp代码访问Python库的库。它基本上是cl4py的反函数。</target>
        </trans-unit>
        <trans-unit id="8b891ac4c97379c150d0ecd3d198ae5a95776353" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/metawilm/cl-python&quot;&gt;cl-python&lt;/a&gt;
- A much heavier solution than cl4py &amp;mdash; let&amp;rsquo;s simply implement Python
in Lisp! An amazing project. However, cl-python cannot access foreign
libraries, e.g., NumPy. And people are probably hesitant to migrate away
from CPython.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/metawilm/cl-python&quot;&gt;cl-&lt;/a&gt; python-比cl4py重得多的解决方案-让我们简单地在Lisp中实现Python！一个了不起的项目。但是，cl-python无法访问外部库，例如NumPy。人们可能不愿从CPython迁移。</target>
        </trans-unit>
        <trans-unit id="a6cac227b0e0cfeba9b90f7681aca51b3fa2ed22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pinterface/burgled-batteries&quot;&gt;burgled-batteries&lt;/a&gt;
- A bridge between Python and Lisp. The goal is that Lisp programs can
use Python libraries, which is in some sense the opposite of
cl4py. Furthermore it relies on the less portable mechanism of FFI
calls.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pinterface/burgled-batteries&quot;&gt;防盗电池-Python&lt;/a&gt; 和Lisp之间的桥梁。目的是Lisp程序可以使用Python库，从某种意义上说，这与cl4py相反。此外，它依赖于FFI呼叫的较不便携的机制。</target>
        </trans-unit>
        <trans-unit id="50d835c00486b111eca88683714097e58a1abbfb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.nicklevine.org/claude/&quot;&gt;CLAUDE&lt;/a&gt;
- An earlier attempt to access Lisp libraries from Python. The key
difference is that cl4py does not run Lisp directly in the host
process. This makes cl4py more portable, but complicates the exchange of
data.</source>
          <target state="translated">&lt;a href=&quot;https://www.nicklevine.org/claude/&quot;&gt;CLAUDE-&lt;/a&gt; 较早的尝试从Python访问Lisp库。关键区别在于cl4py不会直接在主机进程中运行Lisp。这使cl4py更具可移植性，但使数据交换变得复杂。</target>
        </trans-unit>
        <trans-unit id="4bbc2bad866e068f7a83235c65224f8f43ca8e4f" translate="yes" xml:space="preserve">
          <source>By default, cl4py starts a Lisp subprocess with</source>
          <target state="translated">默认情况下,cl4py启动一个Lisp子进程时,会使用</target>
        </trans-unit>
        <trans-unit id="b820f44f707e2d2bfda8a73e7deeb8deb276083f" translate="yes" xml:space="preserve">
          <source>Common Lisp for Python</source>
          <target state="translated">Python的通用Lisp</target>
        </trans-unit>
        <trans-unit id="148b514079c970f00202742b91f589dab000adac" translate="yes" xml:space="preserve">
          <source>Frequently Asked Problems</source>
          <target state="translated">常见的问题</target>
        </trans-unit>
        <trans-unit id="fce92a58d4a009a80c62759514bdc0f104880ceb" translate="yes" xml:space="preserve">
          <source>It soon becomes clumsy to look up individual Lisp functions by name.
Instead, it is usually better to convert entire Lisp packages to Python
modules, like this:</source>
          <target state="translated">很快就会变得笨拙地按名称查找各个Lisp函数。相反,通常最好是将整个Lisp包转换为Python模块,就像这样。</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">动机</target>
        </trans-unit>
        <trans-unit id="7fac72fa371151361d1c539c6461c22eccaa90fe" translate="yes" xml:space="preserve">
          <source>Of course, this requires you have some Lisp installed. If not, use
something like</source>
          <target state="translated">当然,这需要你安装一些Lisp。如果没有,可以使用类似</target>
        </trans-unit>
        <trans-unit id="15fcd561f77dbd0c514f2391d3c7596df9294341" translate="yes" xml:space="preserve">
          <source>Package QL does not exist</source>
          <target state="translated">QL包不存在</target>
        </trans-unit>
        <trans-unit id="5080ebd78aaa8f3e4acd6d4cd153e6b28156a27a" translate="yes" xml:space="preserve">
          <source>Related Projects</source>
          <target state="translated">相关项目</target>
        </trans-unit>
        <trans-unit id="c2496758451190079c5ff46ed234f6bf876783e3" translate="yes" xml:space="preserve">
          <source>Some Lisp data structures have no direct equivalent in Python, most
notably, cons cells.  The cl4py module provides a suitable Cons class and
converts List conses to instances of cl4py.Cons.</source>
          <target state="translated">一些Lisp数据结构在Python中没有直接的等价物,最明显的就是cons单元。cl4py模块提供了一个合适的Cons类,并将List conses转换为cl4py.Cons的实例。</target>
        </trans-unit>
        <trans-unit id="40102a7557c7125cb544b98b57257f65d209dd20" translate="yes" xml:space="preserve">
          <source>The library cl4py (pronounce as &lt;em&gt;clappy&lt;/em&gt;) allows Python programs to call
Common Lisp libraries.  Its official mascot is the cl4py-bird:</source>
          <target state="translated">cl4py库（发音为&lt;em&gt;clappy&lt;/em&gt;）允许Python程序调用Common Lisp库。它的官方吉祥物是cl4py-bird：</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">教程</target>
        </trans-unit>
        <trans-unit id="d1fd463e2211f716e42a7d42d60ef7a504f5676a" translate="yes" xml:space="preserve">
          <source>Why does my Lisp subprocess complain about</source>
          <target state="translated">为什么我的Lisp子进程会抱怨关于</target>
        </trans-unit>
        <trans-unit id="e2a9f255c2065c6cb3cc36379ae5c9bb470b0b5b" translate="yes" xml:space="preserve">
          <source>You are a Python programmer, but you want access to some of the powerful
features of Lisp, for example to compile code at run time?  Or you want to
use some &lt;a href=&quot;http://codys.club/awesome-cl/&quot;&gt;awesome Lisp libraries&lt;/a&gt;?  Or
you are a Lisp programmer and want to show your work to your Python
friends.  In all these cases, cl4py is here to help you.</source>
          <target state="translated">您是Python程序员，但您想使用Lisp的某些强大功能，例如在运行时编译代码？或者您想使用一些&lt;a href=&quot;http://codys.club/awesome-cl/&quot;&gt;很棒的Lisp库&lt;/a&gt;？或者您是Lisp程序员，并且想向您的Python朋友展示您的工作。在所有这些情况下，cl4py都可以为您提供帮助。</target>
        </trans-unit>
        <trans-unit id="a1829fa02283e0a82ccbadc9abe55eff92b9688f" translate="yes" xml:space="preserve">
          <source>You can start any number of Lisp subprocesses within Python, like this:</source>
          <target state="translated">你可以在Python中启动任何数量的Lisp子进程,就像这样。</target>
        </trans-unit>
        <trans-unit id="2ca175d569e3bddb9bd42186937f3d9a19474282" translate="yes" xml:space="preserve">
          <source>apt install sbcl</source>
          <target state="translated">apt install sbcl</target>
        </trans-unit>
        <trans-unit id="a0d6591fa77e0813e270cc0b321c6f1da9640f76" translate="yes" xml:space="preserve">
          <source>brew install
sbcl</source>
          <target state="translated">brew install sbcl</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="84122cdb9e98b2fdddcd6d887b4d74a136bd5068" translate="yes" xml:space="preserve">
          <source>pacman -S sbcl</source>
          <target state="translated">pacman -S sbcl</target>
        </trans-unit>
        <trans-unit id="8f2ed9f246f7ff0643d359045e9252655a4fb598" translate="yes" xml:space="preserve">
          <source>quicklisp=True</source>
          <target state="translated">quicklisp=True</target>
        </trans-unit>
        <trans-unit id="e5afdbd708aea1d57f803c59648c0871a0966485" translate="yes" xml:space="preserve">
          <source>sbcl --script</source>
          <target state="translated">sbcl --script</target>
        </trans-unit>
        <trans-unit id="b519792eff2865136af2e654208db187c51b185b" translate="yes" xml:space="preserve">
          <source>to correct this deficiency.  Once you have a running Lisp process,
you can execute Lisp code on it:</source>
          <target state="translated">来纠正这个缺陷。一旦你有了一个正在运行的Lisp进程,你就可以在其上执行Lisp代码。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
