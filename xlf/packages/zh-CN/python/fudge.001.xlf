<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/fudge/">
    <body>
      <group id="fudge">
        <trans-unit id="5eac10d955e77365c4b38c49f908818f3411a05e" translate="yes" xml:space="preserve">
          <source>Complete documentation is available at &lt;a href=&quot;https://fudge.readthedocs.org/en/latest/&quot;&gt;https://fudge.readthedocs.org/en/latest/&lt;/a&gt;</source>
          <target state="translated">完整的文档可在&lt;a href=&quot;https://fudge.readthedocs.org/en/latest/&quot;&gt;https://fudge.readthedocs.org/en/latest/&lt;/a&gt;获得。</target>
        </trans-unit>
        <trans-unit id="c13afbf40129ff3222adbcddcbf4bdae54002f2c" translate="yes" xml:space="preserve">
          <source>Fudge is a Python module for using fake objects (mocks and stubs) to test real ones.</source>
          <target state="translated">Fudge 是一个 Python 模块,用于使用假对象 (mocks 和 stubs)来测试真对象。</target>
        </trans-unit>
        <trans-unit id="979e43004c2ac2a8ab821edf85d630614f648981" translate="yes" xml:space="preserve">
          <source>Here is a quick preview of how you can test code that sends
email without actually sending email:</source>
          <target state="translated">这里是一个快速预览,你可以测试如何在不实际发送电子邮件的情况下发送电子邮件的代码。</target>
        </trans-unit>
        <trans-unit id="fb1bb391a7eba76e0330fd54ebd9318823b1d136" translate="yes" xml:space="preserve">
          <source>In readable Python code, you declare what methods are available on your fake and
how they should be called. Then you inject that into your application and start
testing. This declarative approach means you don&amp;rsquo;t have to record and playback
actions and you don&amp;rsquo;t have to inspect your fakes after running code. If the fake
object was used incorrectly then you&amp;rsquo;ll see an informative exception message
with a traceback that points to the culprit.</source>
          <target state="translated">在可读的Python代码中，您声明对伪造品可用的方法以及应如何调用它们。然后，将其注入到您的应用程序中并开始测试。这种声明性方法意味着您不必记录和回放动作，也不必在运行代码后检查伪造品。如果伪造的对象使用不当，那么您将看到一条提示性异常消息，其追溯指向罪魁祸首。</target>
        </trans-unit>
        <trans-unit id="2f680878f880516cd458d6920ff922438d656c03" translate="yes" xml:space="preserve">
          <source>Replace real objects with fakes (mocks, stubs, etc) while testing.</source>
          <target state="translated">在测试时,用假货(模拟、存根等)代替真实物体。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
