<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/calysto-scheme/">
    <body>
      <group id="calysto-scheme">
        <trans-unit id="e2b252931d870ccc1c94a12f0ab2cbdd440573a4" translate="yes" xml:space="preserve">
          <source># Calysto Scheme</source>
          <target state="translated">＃Calysto方案</target>
        </trans-unit>
        <trans-unit id="57251adf3375dc25500671ee7d5655fa1894f682" translate="yes" xml:space="preserve">
          <source>## Features</source>
          <target state="translated">＃＃ 特征</target>
        </trans-unit>
        <trans-unit id="f3fb36a464b39957c3ece0a95960beca0b329366" translate="yes" xml:space="preserve">
          <source>## Install</source>
          <target state="translated">##安装</target>
        </trans-unit>
        <trans-unit id="5406a753adff9fcf3a23726c5f879fdac03e35a9" translate="yes" xml:space="preserve">
          <source>## Requires</source>
          <target state="translated">##需要</target>
        </trans-unit>
        <trans-unit id="25df6ff2be82b5f55012a26be45bd55365159a5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Calysto Scheme&lt;/strong&gt; in use:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;使用的&lt;strong&gt;Calysto方案&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="bca5e8a5c2254473984c95afd49752fe00e57faa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Calysto Scheme&lt;/strong&gt; is a real Scheme programming language, with full support for continuations, including call/cc. It can also use all Python libraries. Also has some extensions that make it more useful (stepper-debugger, choose/fail, stack traces), or make it better integrated with Python. For more details on using Calysto Scheme, see:</source>
          <target state="translated">&lt;strong&gt;Calysto Scheme&lt;/strong&gt;是一种真正的Scheme编程语言，完全支持连续性，包括call / cc。它还可以使用所有Python库。还具有一些扩展，使其更有用（步进调试器，选择/失败，堆栈跟踪），或使其与Python更好地集成。有关使用Calysto Scheme的更多详细信息，请参阅：</target>
        </trans-unit>
        <trans-unit id="df190fcb0ece73922a91c15d0928d4af8e41ac63" translate="yes" xml:space="preserve">
          <source>A Scheme kernel for Jupyter that can use Python libraries</source>
          <target state="translated">一个可以使用Python库的Jupyter的Scheme内核。</target>
        </trans-unit>
        <trans-unit id="c4f914149fae4fc3e59aed8ddb5880fe99e6815c" translate="yes" xml:space="preserve">
          <source>Calysto Scheme can also be un under PyPy for increased performance.</source>
          <target state="translated">Calysto Scheme也可以在PyPy下解除,以提高性能。</target>
        </trans-unit>
        <trans-unit id="6bb6e325cc25238d0cc6c88e5bd312f152e878c3" translate="yes" xml:space="preserve">
          <source>Calysto Scheme is written in Scheme, and then translated into Python (and other backends). The entire functionality lies in a single Python file: &lt;a href=&quot;https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py&quot;&gt;https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py&lt;/a&gt; However, you can easily install it (see below).</source>
          <target state="translated">Calysto Scheme用Scheme编写，然后翻译成Python（和其他后端）。整个功能位于一个Python文件中：&lt;a href=&quot;https://github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py&quot;&gt;https&lt;/a&gt; : //github.com/Calysto/calysto_scheme/blob/master/calysto_scheme/scheme.py但是，您可以轻松地安装它（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="d77e0881323fa9f4ce91d6af2ce52c818ce90a18" translate="yes" xml:space="preserve">
          <source>Calysto Scheme supports:</source>
          <target state="translated">Calysto计划支持。</target>
        </trans-unit>
        <trans-unit id="478a8e665726d93108fdeb5e2142d57cac415427" translate="yes" xml:space="preserve">
          <source>Change pip3/python3 to use a different pip or Python. The version of Python used will determine how Calysto Scheme is run.</source>
          <target state="translated">改变pip3/python3来使用不同的pip或Python。使用的Python版本将决定Calysto Scheme的运行方式。</target>
        </trans-unit>
        <trans-unit id="008979b13636a420532822feee817df107a857ed" translate="yes" xml:space="preserve">
          <source>In Jupyter notebooks, because &lt;strong&gt;Calysto Scheme&lt;/strong&gt; uses [MetaKernel](&lt;a href=&quot;https://github.com/Calysto/metakernel/blob/master/README.rst&quot;&gt;https://github.com/Calysto/metakernel/blob/master/README.rst&lt;/a&gt;), it has a fully-supported set of &amp;ldquo;magics&amp;rdquo;&amp;mdash;meta-commands for additional functionality. This includes running Scheme in parallel. See all of the [MetaKernel Magics](&lt;a href=&quot;https://github.com/Calysto/metakernel/blob/master/metakernel/magics/README.md&quot;&gt;https://github.com/Calysto/metakernel/blob/master/metakernel/magics/README.md&lt;/a&gt;).</source>
          <target state="translated">在Jupyter笔记本中，由于&lt;strong&gt;Calysto Scheme&lt;/strong&gt;使用[MetaKernel]（&lt;a href=&quot;https://github.com/Calysto/metakernel/blob/master/README.rst&quot;&gt;https://github.com/Calysto/metakernel/blob/master/README.rst&lt;/a&gt;），因此它具有一组完全受支持的&amp;ldquo;魔术&amp;rdquo; &amp;mdash;用于附加操作的meta命令功能。这包括并行运行Scheme。查看所有[MetaKernel魔术]（&lt;a href=&quot;https://github.com/Calysto/metakernel/blob/master/metakernel/magics/README.md&quot;&gt;https://github.com/Calysto/metakernel/blob/master/metakernel/magics/README.md&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="52c0a2f3a058b234bb1af57941e3f1c4df61c56c" translate="yes" xml:space="preserve">
          <source>Limitations:</source>
          <target state="translated">限制因素:</target>
        </trans-unit>
        <trans-unit id="080d024b5e2c3112830310be80f47b56993983b7" translate="yes" xml:space="preserve">
          <source>Object-oriented class definitions and instance creation</source>
          <target state="translated">面向对象的类定义和实例创建</target>
        </trans-unit>
        <trans-unit id="351b996d14d4cc04cc2f8019d4beb0410a96f6ee" translate="yes" xml:space="preserve">
          <source>Planned:</source>
          <target state="translated">计划中的。</target>
        </trans-unit>
        <trans-unit id="260cdb02eef94c3ec0c5d6feeb1243b43c8d1491" translate="yes" xml:space="preserve">
          <source>Python3</source>
          <target state="translated">Python3</target>
        </trans-unit>
        <trans-unit id="d746ab363bc42994f38b4e0dffe978d14bbf3f4c" translate="yes" xml:space="preserve">
          <source>Runs slow on CPython; try PyPy</source>
          <target state="translated">在CPython上运行很慢,可以试试PyPy。</target>
        </trans-unit>
        <trans-unit id="fe37acc0bc2a4457cf66e3f81a23309e50c13797" translate="yes" xml:space="preserve">
          <source>Use it in the Jupyter console, qtconsole, or notebook:</source>
          <target state="translated">在Jupyter控制台、qtconsole或笔记本中使用它。</target>
        </trans-unit>
        <trans-unit id="52ec3b5ff29551f6e00671805893e93f5da16e56" translate="yes" xml:space="preserve">
          <source>Videos: &lt;a href=&quot;https://www.youtube.com/watch?v=2w-iO701g_w&quot;&gt;https://www.youtube.com/watch?v=2w-iO701g_w&lt;/a&gt;</source>
          <target state="translated">影片：&lt;a href=&quot;https://www.youtube.com/watch?v=2w-iO701g_w&quot;&gt;https&lt;/a&gt;：//www.youtube.com/watch？v = 2w-iO701g_w</target>
        </trans-unit>
        <trans-unit id="bd25c225faa88dd46c8b44e321c0f8e289659e46" translate="yes" xml:space="preserve">
          <source>You can also just use the Python program, but it doesn&amp;rsquo;t have a fancy Read-Eval-Print Loop. Just run:</source>
          <target state="translated">您也可以只使用Python程序，但是它没有精美的Read-Eval-Print循环。赶紧跑：</target>
        </trans-unit>
        <trans-unit id="f9345116acd141897a2aecd1107d764078aadbdf" translate="yes" xml:space="preserve">
          <source>You can also use the &amp;ndash;sys-prefix to install into your virtualenv.</source>
          <target state="translated">您也可以使用&amp;ndash;sys-prefix安装到您的virtualenv中。</target>
        </trans-unit>
        <trans-unit id="e279b54dc7a2f098d2fc6daedc34268d1e7f5ea6" translate="yes" xml:space="preserve">
          <source>You can install Calysto Scheme with Python3:</source>
          <target state="translated">你可以用Python3安装Calysto Scheme。</target>
        </trans-unit>
        <trans-unit id="f2cad4c87aba1f4fb4a5755988a58a3d929be115" translate="yes" xml:space="preserve">
          <source>You can try Calysto Scheme without installing anything by clicking on the following button:</source>
          <target state="translated">点击以下按钮,你可以在不安装任何东西的情况下尝试Calysto方案。</target>
        </trans-unit>
        <trans-unit id="dfd463d9a75031127058b90cf0b1d055057ccbb9" translate="yes" xml:space="preserve">
          <source>[![Binder](&lt;a href=&quot;https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/Calysto/calysto_scheme/master?filepath=notebooks%2FReference%20Guide%20for%20Calysto%20Scheme.ipynb&quot;&gt;https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/Calysto/calysto_scheme/master?filepath=notebooks%2FReference%20Guide%20for%20Calysto%20Scheme.ipynb&lt;/a&gt;)</source>
          <target state="translated">[！[Binder]（&lt;a href=&quot;https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/Calysto/calysto_scheme/master?filepath=notebooks%2FReference%20Guide%20for%20Calysto%20Scheme.ipynb&quot;&gt;https://mybinder.org/badge.svg)&lt;/a&gt; ]( https://mybinder.org/v2/gh/Calysto/calysto_scheme/master?filepath=notebooks%2FReference%20Guide%20for%20Calysto% 20Scheme.ipynb）</target>
        </trans-unit>
        <trans-unit id="f70251bbb947d62349df84e22262495551af60a6" translate="yes" xml:space="preserve">
          <source>[![codecov](&lt;a href=&quot;https://codecov.io/gh/Calysto/calysto_scheme/branch/master/graph/badge.svg)](https://codecov.io/gh/Calysto/calysto_scheme&quot;&gt;https://codecov.io/gh/Calysto/calysto_scheme/branch/master/graph/badge.svg)](https://codecov.io/gh/Calysto/calysto_scheme&lt;/a&gt;) [![CircleCI](&lt;a href=&quot;https://circleci.com/gh/Calysto/calysto_scheme.svg?style=svg)](https://circleci.com/gh/Calysto/calysto_scheme&quot;&gt;https://circleci.com/gh/Calysto/calysto_scheme.svg?style=svg)](https://circleci.com/gh/Calysto/calysto_scheme&lt;/a&gt;)</source>
          <target state="translated">[！[codecov]（&lt;a href=&quot;https://codecov.io/gh/Calysto/calysto_scheme/branch/master/graph/badge.svg)](https://codecov.io/gh/Calysto/calysto_scheme&quot;&gt;https://codecov.io/gh/Calysto/calysto_scheme/branch/master/graph/badge.svg&lt;/a&gt; ) ]( https://codecov.io/gh/Calysto/calysto_scheme）[！[CircleCI ]（&lt;a href=&quot;https://circleci.com/gh/Calysto/calysto_scheme.svg?style=svg)](https://circleci.com/gh/Calysto/calysto_scheme&quot;&gt;https://circleci.com/gh/Calysto/calysto_scheme.svg?style=svg&lt;/a&gt; ) ]( https://circleci.com/gh/Calysto/calysto_scheme）</target>
        </trans-unit>
        <trans-unit id="9cbedabfc0635150ad2e410803c22d988d28f6d3" translate="yes" xml:space="preserve">
          <source>[CS245: Programming Languages - 2014, Fall](&lt;a href=&quot;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2014-Fall/Programming%20Languages,%20Syllabus.ipynb&quot;&gt;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2014-Fall/Programming%20Languages,%20Syllabus.ipynb&lt;/a&gt;)</source>
          <target state="translated">[CS245：编程语言-2014年秋季]（&lt;a href=&quot;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2014-Fall/Programming%20Languages,%20Syllabus.ipynb&quot;&gt;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2014-Fall/Programming%20Languages,%20Syllabus.ipynb&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="91680a6c14c3afa09d1ebcc31b383262ab244e40" translate="yes" xml:space="preserve">
          <source>[CS245: Programming Languages - 2016, Fall](&lt;a href=&quot;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2016-Fall/Syllabus.ipynb&quot;&gt;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2016-Fall/Syllabus.ipynb&lt;/a&gt;)</source>
          <target state="translated">[CS245：编程语言-2016年秋季]（&lt;a href=&quot;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2016-Fall/Syllabus.ipynb&quot;&gt;https://jupyter.brynmawr.edu/services/public/dblank/CS245%20Programming%20Languages/2016-Fall/Syllabus.ipynb&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="217d774a257d06a41f98748b85bb23274b6e77e0" translate="yes" xml:space="preserve">
          <source>`
jupyter console --kernel calysto_scheme
jupyter qtconsole --kernel calysto_scheme
jupyter notebook
`</source>
          <target state="translated">`jupyter控制台-内核calysto_scheme jupyter qtconsole-内核calysto_scheme jupyter笔记本`</target>
        </trans-unit>
        <trans-unit id="26113ce3bc33532bdae67a5ed32167ac705937d6" translate="yes" xml:space="preserve">
          <source>`
pip3 install --upgradecalysto-scheme--user
python3 -m calysto_scheme install --user
`</source>
          <target state="translated">`pip3 install --upgradecalysto-scheme--user python3 -m calysto_scheme install --user`</target>
        </trans-unit>
        <trans-unit id="9da8e00cbfd8842f99b471b0a327914baf9936eb" translate="yes" xml:space="preserve">
          <source>`
python calysto_scheme/scheme.py
`</source>
          <target state="translated">python calysto_scheme / scheme.py</target>
        </trans-unit>
        <trans-unit id="3530ef97f30be9aed05fe2933be3cbd7f11e966c" translate="yes" xml:space="preserve">
          <source>`
sudo pip3 install --upgradecalysto-scheme
sudo python3 -m calysto_scheme install
`</source>
          <target state="translated">sudo pip3 install --upgradecalysto-scheme sudo python3 -m calysto_scheme安装</target>
        </trans-unit>
        <trans-unit id="a38477879d6e701f3494b24621f550ebfd3a544b" translate="yes" xml:space="preserve">
          <source>choose/fail - built in fail and try again</source>
          <target state="translated">选择/失败--内置失败再试</target>
        </trans-unit>
        <trans-unit id="0734581fe664368c5646aa95b2dd1928eec3feab" translate="yes" xml:space="preserve">
          <source>complete Scheme functions (one can fall back to Python for now)</source>
          <target state="translated">完备的Scheme函数(暂且回到Python)</target>
        </trans-unit>
        <trans-unit id="d3e0b619b3729b20359ab7068cacec3bc130b31e" translate="yes" xml:space="preserve">
          <source>continuations</source>
          <target state="translated">延续</target>
        </trans-unit>
        <trans-unit id="086df788e776cfb67695632a0a1934c156101cc1" translate="yes" xml:space="preserve">
          <source>metakernel (installed automatically)</source>
          <target state="translated">metakernel(自动安装</target>
        </trans-unit>
        <trans-unit id="dfbab263cf7ab81f0afe577c6b0eb85def682815" translate="yes" xml:space="preserve">
          <source>or in the system kernel folder with:</source>
          <target state="translated">或在系统内核文件夹中,用。</target>
        </trans-unit>
        <trans-unit id="31ded0e581be315cc5f4e91ab2bd7e49b22e6685" translate="yes" xml:space="preserve">
          <source>produces stack trace (with line numbers), like Python</source>
          <target state="translated">产生堆栈跟踪(带行号),就像Python一样。</target>
        </trans-unit>
        <trans-unit id="40c4e8000a1a2408c882a10f856c69d3d1e684d2" translate="yes" xml:space="preserve">
          <source>test suite</source>
          <target state="translated">测试套件</target>
        </trans-unit>
        <trans-unit id="2505cddf4439c115a9cc928433ee282617e8cf14" translate="yes" xml:space="preserve">
          <source>use of all Python libraries</source>
          <target state="translated">使用所有Python库</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
