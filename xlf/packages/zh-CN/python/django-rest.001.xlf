<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/django-rest/">
    <body>
      <group id="django-rest">
        <trans-unit id="0a67d439e28b78ef6e9b6633dfb3e1f8923bb5c1" translate="yes" xml:space="preserve">
          <source>&amp;mdash; Made with :hearts: &amp;mdash;</source>
          <target state="translated">-用：心：-</target>
        </trans-unit>
        <trans-unit id="d6fe99aba923e8e1c35e0a2c0fc8cb274d07e1d5" translate="yes" xml:space="preserve">
          <source>1. Primitive types</source>
          <target state="translated">1.原始类型</target>
        </trans-unit>
        <trans-unit id="e34fa6dbda16cf676fb939d743c74cd5bc0e2de3" translate="yes" xml:space="preserve">
          <source>1. The &lt;code&gt;@api_view&lt;/code&gt; decorator</source>
          <target state="translated">1. &lt;code&gt;@api_view&lt;/code&gt; 装饰器</target>
        </trans-unit>
        <trans-unit id="101311509cf1bdae0d1b6486462196c84f2f1cf0" translate="yes" xml:space="preserve">
          <source>1.1 Decorator arguments</source>
          <target state="translated">1.1 装饰者参数</target>
        </trans-unit>
        <trans-unit id="ca59443e3fe27cd3c524846b60104d68e08af973" translate="yes" xml:space="preserve">
          <source>1.2 Decorated view's arguments</source>
          <target state="translated">1.2装饰性观点的论点。</target>
        </trans-unit>
        <trans-unit id="3bdf3862c75d80de9bcb899dade0f0631a6a57bd" translate="yes" xml:space="preserve">
          <source>1.3 How to decorate a view</source>
          <target state="translated">1.3如何装饰景观</target>
        </trans-unit>
        <trans-unit id="334b2ec94f60a93282f304656f0da6996dc2d89f" translate="yes" xml:space="preserve">
          <source>2. MethodField</source>
          <target state="translated">2.methodField</target>
        </trans-unit>
        <trans-unit id="8add350f60b67abe5e6ab50966ead8b75c33adc7" translate="yes" xml:space="preserve">
          <source>2. View Permissions</source>
          <target state="translated">2.查看权限</target>
        </trans-unit>
        <trans-unit id="6b4b48d4f9cef55dfe3f1822eac7ad1ede0bb54c" translate="yes" xml:space="preserve">
          <source>2.1 Introduction</source>
          <target state="translated">2.1 简介</target>
        </trans-unit>
        <trans-unit id="b6e9208739cc417c07cbadba87b541072d31a3f5" translate="yes" xml:space="preserve">
          <source>2.2 Available Permissions</source>
          <target state="translated">2.2 可用的权限</target>
        </trans-unit>
        <trans-unit id="eff17523552562051b93205dfb896011bf4549e2" translate="yes" xml:space="preserve">
          <source>2.3 Permissions Operators</source>
          <target state="translated">2.3 许可操作者</target>
        </trans-unit>
        <trans-unit id="8328d598a01fdde90804eaf686f886b8d707eaf9" translate="yes" xml:space="preserve">
          <source>2.4 Implement your own permission</source>
          <target state="translated">2.4 实施自己的权限</target>
        </trans-unit>
        <trans-unit id="771007f0a84b5546c405f2c2f68613e7b990e697" translate="yes" xml:space="preserve">
          <source>3. ConstantField</source>
          <target state="translated">3.ConstantField</target>
        </trans-unit>
        <trans-unit id="fda2147241f2d687df5f4abbf9bca201fbc52309" translate="yes" xml:space="preserve">
          <source>3. Deserializers</source>
          <target state="translated">3.解串器</target>
        </trans-unit>
        <trans-unit id="b0852d56d74de85c8d0711f0ffe05584a74da9ef" translate="yes" xml:space="preserve">
          <source>3.1. Introduction</source>
          <target state="translated">3.1.绪论</target>
        </trans-unit>
        <trans-unit id="a048df5ce6e85899168ca7c3bb301036cf43c81f" translate="yes" xml:space="preserve">
          <source>3.2. Implement a new Deserializer</source>
          <target state="translated">3.2.实施一个新的解串器</target>
        </trans-unit>
        <trans-unit id="87e25c6d2a270460bc6e6e0746fb95081db92a8b" translate="yes" xml:space="preserve">
          <source>3.3. Available Deserializer Fields</source>
          <target state="translated">3.3.可用的解串器领域</target>
        </trans-unit>
        <trans-unit id="ee70f77d9cac1ac2206e8b7d4f242c131d70af35" translate="yes" xml:space="preserve">
          <source>3.4 Nested Deserializers</source>
          <target state="translated">3.4 嵌套解串器</target>
        </trans-unit>
        <trans-unit id="3104eabd166f3e101cdc6525cdedd65a795ec027" translate="yes" xml:space="preserve">
          <source>3.5. Post-clean methods</source>
          <target state="translated">3.5.清洁后的方法</target>
        </trans-unit>
        <trans-unit id="8bffabd3017fab92f0d9e626009be88bc578f73e" translate="yes" xml:space="preserve">
          <source>3.6 All-pass Deserializer</source>
          <target state="translated">3.6 全通解串器</target>
        </trans-unit>
        <trans-unit id="16d66f8d91b7996ae35b8a8716b58e59d4d7a358" translate="yes" xml:space="preserve">
          <source>4. ListField</source>
          <target state="translated">4.列表字段</target>
        </trans-unit>
        <trans-unit id="cdefe2771d42b667cd9decfd59a4b01095616bf1" translate="yes" xml:space="preserve">
          <source>4. Serializers</source>
          <target state="translated">4.序列器</target>
        </trans-unit>
        <trans-unit id="970e40baf04de6c238243f22eaaa1652e1a34bd6" translate="yes" xml:space="preserve">
          <source>4.1. Introduction</source>
          <target state="translated">4.1.绪论</target>
        </trans-unit>
        <trans-unit id="c7c2d2263a57b5220a3c0f7ccbb644e1193bb23e" translate="yes" xml:space="preserve">
          <source>4.2. Implement a new Serializer</source>
          <target state="translated">4.2.实现一个新的序列器</target>
        </trans-unit>
        <trans-unit id="70063e3d3c96b580445e856226d6121439a98638" translate="yes" xml:space="preserve">
          <source>4.3. Available Serializer Fields</source>
          <target state="translated">4.3.可用的序列器字段</target>
        </trans-unit>
        <trans-unit id="98ebbaa8099e857dc04b261ff7845b1500619bcb" translate="yes" xml:space="preserve">
          <source>4.4. Nested Serializers</source>
          <target state="translated">4.4.嵌套的序列器</target>
        </trans-unit>
        <trans-unit id="a55df348e4213788ce89543b8afd914503b3f783" translate="yes" xml:space="preserve">
          <source>4.5. DictSerializer</source>
          <target state="translated">4.5.DictSerializer</target>
        </trans-unit>
        <trans-unit id="c51c71e9a34df0ef008eadb0a22b9d72bb9ff936" translate="yes" xml:space="preserve">
          <source>5. Exceptions</source>
          <target state="translated">5.5.例外情况</target>
        </trans-unit>
        <trans-unit id="65ead6c25889988c5de7a42a692c25bec2213c3e" translate="yes" xml:space="preserve">
          <source>5.1. &lt;code&gt;@api_view&lt;/code&gt; exceptions catching</source>
          <target state="translated">5.1。 &lt;code&gt;@api_view&lt;/code&gt; 异常捕获</target>
        </trans-unit>
        <trans-unit id="c18a7532fd6b3ba17fcc7df04ed0e5c155d5d79f" translate="yes" xml:space="preserve">
          <source>5.2. Existing API Exceptions</source>
          <target state="translated">5.2.现有的API异常</target>
        </trans-unit>
        <trans-unit id="570dd98701c039ef416c53bf223fa03158b00252" translate="yes" xml:space="preserve">
          <source>5.3. Define your own API Exception</source>
          <target state="translated">5.3.定义你自己的API异常</target>
        </trans-unit>
        <trans-unit id="0cb37d5bfa34fcbe3b6c21945d8e6ee67719cdc3" translate="yes" xml:space="preserve">
          <source>6. HTTP</source>
          <target state="translated">6.HTTP</target>
        </trans-unit>
        <trans-unit id="edc3975480d9fade43b2b61fafc5c0a389b8323f" translate="yes" xml:space="preserve">
          <source>6.1. HTTP Status codes</source>
          <target state="translated">6.1.HTTP状态码</target>
        </trans-unit>
        <trans-unit id="240d3c55a9bcd80a2dd68281ee7f1ad10483d062" translate="yes" xml:space="preserve">
          <source>6.2. HTTP Methods</source>
          <target state="translated">6.2 HTTP方法</target>
        </trans-unit>
        <trans-unit id="1990b618adfed03435ea1b5034ff9c0665959b82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ALL_METHODS&lt;/code&gt; = (&lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;, &lt;code&gt;TRACE&lt;/code&gt;, &lt;code&gt;CONNECT&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;ALL_METHODS&lt;/code&gt; =（ &lt;code&gt;HEAD&lt;/code&gt; ， &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;PUT&lt;/code&gt; ， &lt;code&gt;PATCH&lt;/code&gt; ， &lt;code&gt;DELETE&lt;/code&gt; ， &lt;code&gt;OPTIONS&lt;/code&gt; ， &lt;code&gt;TRACE&lt;/code&gt; ， &lt;code&gt;CONNECT&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bab8b4ac253565a502cd3d05586fb8200907cd40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConstantField&lt;/code&gt; accepts 3 arguments:</source>
          <target state="translated">&lt;code&gt;ConstantField&lt;/code&gt; 接受3个参数：</target>
        </trans-unit>
        <trans-unit id="c1804c8850ff7788c36e30cb4ab8bc804975dbfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConstantField&lt;/code&gt; allows you to include constant data in your response, without
having to include that constant in your model. In the previous example,
&lt;code&gt;TAX_RATE&lt;/code&gt; was a constant. In case we wanted to include it in the serialized
data, we should had defined it as &lt;code&gt;PricingExample&lt;/code&gt; class/instance attribute, or
created a &lt;code&gt;MethodField&lt;/code&gt; that returns a constant. Both solutions are quite
&quot;painful&quot;. Using &lt;code&gt;ConstantField&lt;/code&gt;, the code will look like:</source>
          <target state="translated">&lt;code&gt;ConstantField&lt;/code&gt; 使您可以在响应中包括常量数据，而不必在模型中包括该常量。在前面的示例中， &lt;code&gt;TAX_RATE&lt;/code&gt; 是一个常数。如果我们想将其包括在序列化数据中，则应将其定义为 &lt;code&gt;PricingExample&lt;/code&gt; 类/实例属性，或创建一个返回常量的 &lt;code&gt;MethodField&lt;/code&gt; 。两种解决方案都非常&amp;ldquo;痛苦&amp;rdquo;。使用 &lt;code&gt;ConstantField&lt;/code&gt; ，代码将如下所示：</target>
        </trans-unit>
        <trans-unit id="4aaeee879688a391c978646c7a5ea7149e9928e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListField&lt;/code&gt; allows you to serialize iterables of primitives. Let's say your
object's attribute is a list of integers. With a simple &lt;code&gt;IntegerField&lt;/code&gt;, you
won't be able to serialize that field. It could be achieved with &lt;code&gt;MethodField&lt;/code&gt;,
but it will be too much written code for a trivial thing. &lt;code&gt;ListField&lt;/code&gt; does the
same thing as the &lt;code&gt;many=True&lt;/code&gt; for &lt;code&gt;Serializer&lt;/code&gt; class, but the &lt;code&gt;many&lt;/code&gt; argument
isn't implemented for &lt;code&gt;IntegerField&lt;/code&gt;, &lt;code&gt;BooleanField&lt;/code&gt;, &lt;code&gt;FloatField&lt;/code&gt; and
&lt;code&gt;CharField&lt;/code&gt; for performance purpose.
The &lt;code&gt;ListField&lt;/code&gt; accepts a single argument which is the field to be rendered as list.</source>
          <target state="translated">&lt;code&gt;ListField&lt;/code&gt; 允许您序列化基元的可迭代对象。假设您的对象的属性是整数列表。使用简单的 &lt;code&gt;IntegerField&lt;/code&gt; ，您将无法序列化该字段。可以使用 &lt;code&gt;MethodField&lt;/code&gt; 来实现，但是对于琐碎的事情来说，这将是太多的书面代码。 &lt;code&gt;ListField&lt;/code&gt; 做了同样的事情 &lt;code&gt;many=True&lt;/code&gt; 为 &lt;code&gt;Serializer&lt;/code&gt; 类，但 &lt;code&gt;many&lt;/code&gt; 说法是不是为了实现 &lt;code&gt;IntegerField&lt;/code&gt; ， &lt;code&gt;BooleanField&lt;/code&gt; ， &lt;code&gt;FloatField&lt;/code&gt; 和 &lt;code&gt;CharField&lt;/code&gt; 性能的目的。该 &lt;code&gt;ListField&lt;/code&gt; 接受一个参数，该参数是要呈现为列表的字段。</target>
        </trans-unit>
        <trans-unit id="3d0bb80630e321aed8cfeb6ff24f165a292ee4b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MethodField&lt;/code&gt; accepts 3 arguments:</source>
          <target state="translated">&lt;code&gt;MethodField&lt;/code&gt; 接受3个参数：</target>
        </trans-unit>
        <trans-unit id="52baecba618f0c428ed3a81ffcc88a11b916486f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SAFE_METHODS&lt;/code&gt; = (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;SAFE_METHODS&lt;/code&gt; =（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;HEAD&lt;/code&gt; ， &lt;code&gt;OPTIONS&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="eac1051375a994cbf01539100937c2ba1b5140a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUPPORTING_PAYLOAD_METHODS&lt;/code&gt; = (&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;SUPPORTING_PAYLOAD_METHODS&lt;/code&gt; =（ &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;PUT&lt;/code&gt; ， &lt;code&gt;PATCH&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2e90a048e3b3327ec4a35559f760fd1315ff0313" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Serializer&lt;/code&gt; class accepts 2 arguments:</source>
          <target state="translated">&lt;code&gt;Serializer&lt;/code&gt; 类接受2个参数：</target>
        </trans-unit>
        <trans-unit id="97f1f21efe340f246a46aa8386680534e7640c3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AND operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;AND运算子&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="616bfae44b0f50fcdf732bf1a3a9375907f38ed2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AllowAny&lt;/strong&gt;:
By choosing this permission, your view will be public (all requests will have granted access). It's the default permission for &lt;code&gt;@api_view&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;strong&gt;AllowAny&lt;/strong&gt;：通过选择此权限，您的视图将是公开的（所有请求都将被授予访问权限）。这是 &lt;code&gt;@api_view&lt;/code&gt; 装饰器的默认权限。</target>
        </trans-unit>
        <trans-unit id="3ddcb564e68d66285d11d091364433ccf641cd56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BadRequest&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;BadRequest&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="933123b68da2980000fb54fbeabf0cf5bce007c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Combining Operators&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;合并运算符&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="19bb2121ca0fc42d7e400e2b1dd19cdc2ac5a940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important Note:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;重要的提示：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52e1aeb4cecbd7c0cb99fd6c70aff72f29940875" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important Note:&lt;/strong&gt; The post-clean methods are called &lt;strong&gt;only&lt;/strong&gt; if the field's standard
validation succeeds. If a &lt;code&gt;ValidationError&lt;/code&gt; occurs, the post-clean won't be
done.</source>
          <target state="translated">&lt;strong&gt;重要说明：&lt;/strong&gt;&lt;strong&gt;仅&lt;/strong&gt;当字段的标准验证成功&lt;strong&gt;时才&lt;/strong&gt;调用后清理方法。如果发生 &lt;code&gt;ValidationError&lt;/code&gt; ，则不会进行后期清理。</target>
        </trans-unit>
        <trans-unit id="5412059496d4f4509844dea6db60987425ccca12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important Note:&lt;/strong&gt; You can enjoy &lt;strong&gt;every&lt;/strong&gt; feature available in django forms fields, such as
&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/validators/&quot;&gt;custom validators&lt;/a&gt; and
&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/#error-messages&quot;&gt;custom error messages&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;重要说明：&lt;/strong&gt;您可以享受Django表单字段中的&lt;strong&gt;所有&lt;/strong&gt;可用功能，例如 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/validators/&quot;&gt;自定义验证器&lt;/a&gt;和 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/#error-messages&quot;&gt;自定义错误消息&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="05df9c89026f5ac53cd2ac527d6a6bb988ecaba7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; The &lt;code&gt;MethodField&lt;/code&gt;'s method should return native Python
data-types (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;) or (nested) &lt;code&gt;list&lt;/code&gt;/&lt;code&gt;dict&lt;/code&gt; of native types.</source>
          <target state="translated">&lt;strong&gt;重要提示：&lt;/strong&gt;本 &lt;code&gt;MethodField&lt;/code&gt; 的方法应返回原生的Python的数据类型（ &lt;code&gt;str&lt;/code&gt; ， &lt;code&gt;bool&lt;/code&gt; ， &lt;code&gt;int&lt;/code&gt; ， &lt;code&gt;float&lt;/code&gt; ， &lt;code&gt;None&lt;/code&gt; ）或（嵌套） &lt;code&gt;list&lt;/code&gt; / &lt;code&gt;dict&lt;/code&gt; 本地类型。</target>
        </trans-unit>
        <trans-unit id="37e492b675bf7e7698b038a79941226b9e1dad91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; The parameters are already casted into their target types (&lt;em&gt;in
the example above, &lt;code&gt;url_params['age']&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;, while &lt;code&gt;url_params['first_name']&lt;/code&gt; is &lt;code&gt;str&lt;/code&gt;&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt;重要说明：&lt;/strong&gt;参数已经转换为它们的目标类型（&lt;em&gt;在上面的示例中， &lt;code&gt;url_params['age']&lt;/code&gt; 为 &lt;code&gt;int&lt;/code&gt; ，而 &lt;code&gt;url_params['first_name']&lt;/code&gt; 为 &lt;code&gt;str&lt;/code&gt; &lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="eabbc920fba92543f22f57548c5af44d42a42f4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; Unlike &lt;code&gt;url_params&lt;/code&gt;, for query parameters, the values are &lt;strong&gt;ALWAYS&lt;/strong&gt; strings (&lt;code&gt;str&lt;/code&gt;), and
they should be casted manually.</source>
          <target state="translated">&lt;strong&gt;重要说明：&lt;/strong&gt;与 &lt;code&gt;url_params&lt;/code&gt; 不同，对于查询参数，这些值&lt;strong&gt;始终为&lt;/strong&gt;字符串（ &lt;code&gt;str&lt;/code&gt; ），应手动进行强制转换。</target>
        </trans-unit>
        <trans-unit id="916d2e194528d88776b0e4e108b17f679cead6d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;InternalServerError&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;InternalServerError&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="59ef662e427df548d312b46a5966af7662598fda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAdminUser&lt;/strong&gt;:
Admins are the only users who can access the decorated view. An admin is a &lt;code&gt;User&lt;/code&gt; object having &lt;code&gt;is_superuser&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;IsAdminUser&lt;/strong&gt;：管理员是唯一可以访问修饰视图的用户。admin是具有 &lt;code&gt;is_superuser&lt;/code&gt; 属性设置为 &lt;code&gt;True&lt;/code&gt; 的 &lt;code&gt;User&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="5e29c62cfda2ea9ceaa7832720e283bb85f356ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAuthenticated&lt;/strong&gt;:
Allows only authenticated users to access your view. Anonymous users (&lt;em&gt;i.e.&lt;/em&gt; not authenticated) receive a &lt;code&gt;403 Forbidden access&lt;/code&gt; response.</source>
          <target state="translated">&lt;strong&gt;IsAuthenticated&lt;/strong&gt;：仅允许经过身份验证的用户访问您的视图。匿名用户（&lt;em&gt;即&lt;/em&gt;未认证）收到 &lt;code&gt;403 Forbidden access&lt;/code&gt; 响应。</target>
        </trans-unit>
        <trans-unit id="b00fa8246428361aeff9ad0e29520921c7e1fc03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAuthenticatedOrReadOnly&lt;/strong&gt;:
This permission allows Authenticated users to use all HTTP methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;), and anonymous users to use safe methods only (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;IsAuthenticatedOrReadOnly&lt;/strong&gt;：此权限允许身份验证的用户使用所有的HTTP方法（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;DELETE&lt;/code&gt; ，&lt;em&gt;等等&lt;/em&gt;），和匿名用户使用安全的方法只（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;OPTIONS&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1c25f6f2418b8e6ad939630db6301152d0c00b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsReadOnly&lt;/strong&gt;:
Only HTTP safe methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;) are allowed. For a &lt;code&gt;POST&lt;/code&gt; request for example, the user receives a &lt;code&gt;403 Forbidden access&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;IsReadOnly&lt;/strong&gt;：仅允许使用HTTP安全方法（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;OPTIONS&lt;/code&gt; ）。例如，对于 &lt;code&gt;POST&lt;/code&gt; 请求，用户会收到 &lt;code&gt;403 Forbidden access&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8995ab11b644366b8209113c500367bfa40c1fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsStaffUser&lt;/strong&gt;:
The view can be accessed by staff users only. A staff user is a &lt;code&gt;User&lt;/code&gt; object having &lt;code&gt;is_staff&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;IsStaffUser&lt;/strong&gt;：该视图只能由职员用户访问。人员用户是具有 &lt;code&gt;is_staff&lt;/code&gt; 属性设置为 &lt;code&gt;True&lt;/code&gt; 的 &lt;code&gt;User&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="d46b74ded969e9d17e713b2eaaac076a7ed0e11c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MethodNotAllowed&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;MethodNotAllowed&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="bd3c219888d158e3c359cdc411660356935659c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOT operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;非运算符&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="7aed4059a5de59398f73f32c9045e9bbfd26fd4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NotAuthenticated&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;未经认证&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="4bacdeb514307234a3c9f3f47db1dd5943a34231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NotFound&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;未找到&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="51c26cb7728cdcc9c0643d8e0fe42c739564cc7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;code&gt;@api_view()&lt;/code&gt; and &lt;code&gt;@api_view&lt;/code&gt; syntaxes are correct in case the decorator is used without arguments.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;这两个 &lt;code&gt;@api_view()&lt;/code&gt; 和 &lt;code&gt;@api_view&lt;/code&gt; 语法在情况下，装饰器不使用参数的正确。</target>
        </trans-unit>
        <trans-unit id="0c65c0b9223cf3341528db0109e9ef2380a6d5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In case you want to ignore a argument (let's say &lt;code&gt;deserialized_data&lt;/code&gt;
for a &lt;code&gt;GET&lt;/code&gt; view), add &lt;code&gt;**kwargs&lt;/code&gt; argument to your view. Otherwise, you'll have
a arguments error.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;如果您想要忽略的参数（假设 &lt;code&gt;deserialized_data&lt;/code&gt; 一个 &lt;code&gt;GET&lt;/code&gt; 视图），添加 &lt;code&gt;**kwargs&lt;/code&gt; 参数到您的视图。否则，将出现参数错误。</target>
        </trans-unit>
        <trans-unit id="bef281cd70e186db79f18d68f9cac0744743b0b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; In order to simplify the wording in this section, &quot;field&quot; word refers
to the serializer's field, and &quot;attribute&quot; word to an attribute of the object
to serialize.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;为了简化本节中的措词，&amp;ldquo;字段&amp;rdquo;一词是指序列化器的字段，而&amp;ldquo;属性&amp;rdquo;一词是指要序列化的对象的属性。</target>
        </trans-unit>
        <trans-unit id="447cbadc7e31ff6fe78d763b89833fd28c97e25b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;&lt;code&gt;MethodField&lt;/code&gt; is very similar to a deserializer's post-clean method,
the only difference is that the post-clean receives the attribute's value,
while the &lt;code&gt;MethodField&lt;/code&gt; receives the whole object.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt; &lt;code&gt;MethodField&lt;/code&gt; 与解串器的post-clean方法非常相似，唯一的区别是post-clean接收属性的值，而 &lt;code&gt;MethodField&lt;/code&gt; 接收整个对象。</target>
        </trans-unit>
        <trans-unit id="5fdd63238a5855b36a94bac7dae7ac618d517d16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;OR运算子&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="0e05c1df137dfbaa9b84d1acd55740d700694f2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PermissionDenied&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;PermissionDenied&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ce62fe8d821606526611b30938820227c591b552" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ServiceUnavailable&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;服务不可用&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="5ed4814738407d87db51e8bd3e2c378b3cdf947d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String constants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;字符串常量：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d042fccfe024ecdcf755cc2d8c25c6b8bbad5f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tuple constants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;元组常量：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="815b085202401ef5361992607ab9dc811255bbc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UnsupportedMediaType&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;UnsupportedMediaType&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ba2a77b554d63e41573467f762955424c26c074b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XOR (&lt;em&gt;eXclusive OR&lt;/em&gt;) operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;XOR（&lt;em&gt;eXclusive OR&lt;/em&gt;）运算符&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="2ca43aa6dbe3f0b7d00ea6e36a9da58eb7238f53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allow_forms&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;allow_forms&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="4d4f1ffecc49307c9e49c4c0b9ec8d4f79959770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allowed_methods&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;allowed_methods&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="f2d0229d98477c41b1a7186f8168b70ad5c86b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attr_name&lt;/strong&gt;: It refers to the object's attribute that should be binded to the
current field. The default value is the field name. For example:</source>
          <target state="translated">&lt;strong&gt;attr_name&lt;/strong&gt;：它是指应绑定到当前字段的对象属性。默认值为字段名称。例如：</target>
        </trans-unit>
        <trans-unit id="efe314a1d11427e5af5c5f749a114b6c6977e0e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;call&lt;/strong&gt;: If set to &lt;code&gt;True&lt;/code&gt;, the serializer will try to execute (call)
your attribute. This is useful when the attribute referred-to is a method. Here is a quick example:</source>
          <target state="translated">&lt;strong&gt;call&lt;/strong&gt;：如果设置为 &lt;code&gt;True&lt;/code&gt; ，则序列化程序将尝试执行（调用）您的属性。当引用的属性是一种方法时，这很有用。这是一个简单的示例：</target>
        </trans-unit>
        <trans-unit id="2fd5d0c672abcd68aaf15e49124a915c176ca729" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;constant&lt;/strong&gt;: The constant to be included in the serialized object. The
constant &lt;strong&gt;should be&lt;/strong&gt; primitive (i.e. &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;
or combinations -&lt;code&gt;list&lt;/code&gt;/&lt;code&gt;dict&lt;/code&gt;- of them), otherwise &lt;code&gt;SerializationError&lt;/code&gt; will
be raised (unless &lt;code&gt;required&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, in that case, the field won't figure
in the rendered object).</source>
          <target state="translated">&lt;strong&gt;constant&lt;/strong&gt;：要包含在序列化对象中的常量。常量&lt;strong&gt;应该是&lt;/strong&gt;原始的（即 &lt;code&gt;str&lt;/code&gt; ， &lt;code&gt;bool&lt;/code&gt; ， &lt;code&gt;int&lt;/code&gt; ， &lt;code&gt;float&lt;/code&gt; ， &lt;code&gt;None&lt;/code&gt; 或它们的组合- &lt;code&gt;list&lt;/code&gt; / &lt;code&gt;dict&lt;/code&gt; -），否则将引发 &lt;code&gt;SerializationError&lt;/code&gt; （除非 &lt;code&gt;required&lt;/code&gt; 设置为 &lt;code&gt;False&lt;/code&gt; ，否则该字段将不存在）在呈现的对象中）。</target>
        </trans-unit>
        <trans-unit id="985275611357e1fa156c6ee1122c828cfe1f3684" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deserialized_data&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;deserialized_data&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="8cb97e6149ad83c3929af54b65cfe277c8f2c772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deserializer_class&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;deserializer_class&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="41e9fec00ef1237bc92dfd93a5df88512d414e71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;instance&lt;/strong&gt;: The object (or iterable of objects) to be serialized.</source>
          <target state="translated">&lt;strong&gt;instance&lt;/strong&gt;：要序列化的对象（或对象的可迭代对象）。</target>
        </trans-unit>
        <trans-unit id="910173855098f788334ba62192edf9a31e2adcb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;label&lt;/strong&gt;: It's the name you want to give to your field in the serialized object.
If omitted, it preserves the field's name. For the same &lt;code&gt;Example&lt;/code&gt; class defined above, let's use &lt;code&gt;label&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;strong&gt;label&lt;/strong&gt;：这是您要赋予序列化对象字段的名称。如果省略，它将保留该字段的名称。对于上面定义的相同 &lt;code&gt;Example&lt;/code&gt; 类，让我们使用 &lt;code&gt;label&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="5d5076fc23e234282698f1b233028b0149d089ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;label&lt;/strong&gt;: The same as &lt;a href=&quot;#1-primitive-types&quot;&gt;primitive fields&lt;/a&gt;&lt;code&gt;label&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;label&lt;/strong&gt;：与&lt;a href=&quot;#1-primitive-types&quot;&gt;基本字段&lt;/a&gt; &lt;code&gt;label&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="47ac1ffd2c228450ea8c8666358ef8e3c181fd5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;many&lt;/strong&gt;: Boolean that tells the &lt;code&gt;Serializer&lt;/code&gt; if the object is iterable or not. If
&lt;code&gt;many=True&lt;/code&gt;, the serialized data will be a &lt;code&gt;list&lt;/code&gt; of serialized elements of
the &lt;code&gt;instance&lt;/code&gt; iterable. Its set by default to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;many&lt;/strong&gt;：布尔值，通知 &lt;code&gt;Serializer&lt;/code&gt; 对象是否可迭代。如果 &lt;code&gt;many=True&lt;/code&gt; ，则序列化的数据将是可迭代 &lt;code&gt;instance&lt;/code&gt; 的序列化元素的 &lt;code&gt;list&lt;/code&gt; 。默认情况下将其设置为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d63cde96d1ce1228d13d98ae2fc63c7c67ced295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method_name&lt;/strong&gt;: The name of the serializer's method that should be
called. The default value is &lt;code&gt;get_&amp;lt;Serializer's field name&amp;gt;&lt;/code&gt; (in the previous
example, if &lt;code&gt;method_name&lt;/code&gt; was not given, the method should have been renamed
&lt;code&gt;get_final_price(self, obj)&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;method_name&lt;/strong&gt;：应调用的序列化程序方法的名称。默认值为 &lt;code&gt;get_&amp;lt;Serializer's field name&amp;gt;&lt;/code&gt; （在上一个示例中，如果未提供 &lt;code&gt;method_name&lt;/code&gt; ，则该方法应重命名为 &lt;code&gt;get_final_price(self, obj)&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="72d25fc4ee0733951b919a10d25594e5c6991a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;permission_class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Permission_class&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="651a9071e1cae20135e51f222015c128e24ad2e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;query_params&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;query_params&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="b9843d810eef90c106df43e0391cac851fe8794b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;request&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;要求&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ef2375d2dfd2083de7370596fabb6a7874b8150a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;required&lt;/strong&gt;: The same as &lt;a href=&quot;#1-primitive-types&quot;&gt;primitive fields&lt;/a&gt;&lt;code&gt;label&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;required&lt;/strong&gt;：与&lt;a href=&quot;#1-primitive-types&quot;&gt;基本字段&lt;/a&gt; &lt;code&gt;label&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="61b203648375b00b79de2b62d24ae61ed3945bda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;required&lt;/strong&gt;: When set to &lt;code&gt;True&lt;/code&gt;, if the serializer fails to
retrieve the attribute's value, or to convert it into the target type, a &lt;code&gt;SerializationError&lt;/code&gt; will be raised.
If the fields isn't required (&lt;code&gt;required=False&lt;/code&gt;), in case the serializer fails to render the attribute's value,
the field won't be added to the final result. If we take the same &lt;code&gt;Example&lt;/code&gt; class from the previous examples:</source>
          <target state="translated">&lt;strong&gt;required&lt;/strong&gt;：当设置为 &lt;code&gt;True&lt;/code&gt; 时，如果序列化程序无法检索属性的值或将其转换为目标类型，则将引发 &lt;code&gt;SerializationError&lt;/code&gt; 。如果不需要该字段（ &lt;code&gt;required=False&lt;/code&gt; ），以防序列化程序无法呈现该属性的值，则该字段不会添加到最终结果中。如果我们从前面的示例中获取相同的 &lt;code&gt;Example&lt;/code&gt; 类：</target>
        </trans-unit>
        <trans-unit id="e96fd83f78baf59ac3a01e7ceaf4366dace69a7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_params&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;url_params&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="57b749a1026b1d32a697878b9d1bbc54356cd111" translate="yes" xml:space="preserve">
          <source>@api_view exceptions catching</source>
          <target state="translated">@api_view异常捕获</target>
        </trans-unit>
        <trans-unit id="ceb605cd12b78e228235a6bebea665c93e4c754f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; response will be returned in case the user sends form
data to a view decorated with &lt;code&gt;allow_forms=False&lt;/code&gt;. The argument's default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">阿 &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; 的响应的情况下将返回的用户发送表单数据到装饰的视图 &lt;code&gt;allow_forms=False&lt;/code&gt; 。参数的默认值为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8a995ab7bf45966b60d94bedc645031fc2b1b42" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DictSerializer&lt;/code&gt; is a sub-class of &lt;code&gt;Serializer&lt;/code&gt; (it means that it's
a particular serializer), that, instead of taking an object (class
instance) as input, it takes a &lt;code&gt;dict&lt;/code&gt;. The &lt;code&gt;DictSerializer&lt;/code&gt; transforms a &lt;code&gt;dict&lt;/code&gt;
into another &lt;code&gt;dict&lt;/code&gt;. It accepts the same fields as the classic serializer.
Here is the previous example, rewritten using &lt;code&gt;DictSerializer&lt;/code&gt; (to show the
difference):</source>
          <target state="translated">甲 &lt;code&gt;DictSerializer&lt;/code&gt; 是子类的 &lt;code&gt;Serializer&lt;/code&gt; （这意味着它是一个特定的串行器），即，而不是采取一个对象（类实例）作为输入，它需要一个 &lt;code&gt;dict&lt;/code&gt; 。该 &lt;code&gt;DictSerializer&lt;/code&gt; 转换一个 &lt;code&gt;dict&lt;/code&gt; 到另一个 &lt;code&gt;dict&lt;/code&gt; 。它接受与经典序列化器相同的字段。这是使用 &lt;code&gt;DictSerializer&lt;/code&gt; 重写的上一个示例（以显示差异）：</target>
        </trans-unit>
        <trans-unit id="3b11a63fdb558dd1397e742588e92e0a9ccefb77" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;bool&lt;/code&gt; that allows/forbids payloads coming from forms (
&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; and &lt;code&gt;multipart/form-data&lt;/code&gt; content-types).</source>
          <target state="translated">一个允许/禁止来自表单（ &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 和 &lt;code&gt;multipart/form-data&lt;/code&gt; 内容类型）的有效载荷的 &lt;code&gt;bool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f45adeea272eeaaf1b7f89c9b0488af96f8fc73b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict&lt;/code&gt; containing all the query parameters encoded in the request's URL.
Let's request the previous example's view with the following URL:&lt;code&gt;/api/hello/foo/bar/25/?lang=fr&amp;amp;display=true&lt;/code&gt;:</source>
          <target state="translated">一个 &lt;code&gt;dict&lt;/code&gt; 其中包含所有编码在请求的URL中的查询参数。让我们使用以下URL请求上一个示例的视图： &lt;code&gt;/api/hello/foo/bar/25/?lang=fr&amp;amp;display=true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e2b8bfcfd732742b05da023f348253bc63f40248" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict&lt;/code&gt; containing the parameter defined in your view's
route (django router). For example, let's take a look to &lt;code&gt;url_params&lt;/code&gt; when requesting the URL &lt;code&gt;/api/hello/foo/bar/25/&lt;/code&gt; in the following example:</source>
          <target state="translated">包含在视图的路由（Django路由器）中定义的参数的 &lt;code&gt;dict&lt;/code&gt; 。例如，在以下示例中，当请求URL &lt;code&gt;/api/hello/foo/bar/25/&lt;/code&gt; 时，让我们看一下 &lt;code&gt;url_params&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d520ea9cf5fbe68b71b9b7ef032921d334328d31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict&lt;/code&gt; with the data validated by the deserializer. For HTTP
methods without payload (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;), this argument's value is
&lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">带有经过反序列化器验证的数据的 &lt;code&gt;dict&lt;/code&gt; 。对于没有有效载荷的HTTP方法（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;DELETE&lt;/code&gt; ，&lt;em&gt;等等&lt;/em&gt;），这个参数的值是 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d7662bd6e0b6912e27d863159c62ee2646358c5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;list&lt;/code&gt;/&lt;code&gt;tuple&lt;/code&gt; of HTTP allowed methods. Allowed methods should
be in uppercase strings (&lt;em&gt;ex.&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc.&lt;/em&gt;). You can also use some
predefined sets in &lt;code&gt;django_rest.http.methods&lt;/code&gt;. If no &lt;code&gt;allowed_methods&lt;/code&gt;
given, all HTTP methods will be allowed.</source>
          <target state="translated">一个 &lt;code&gt;list&lt;/code&gt; / &lt;code&gt;tuple&lt;/code&gt; HTTP的允许的方法。允许的方法应使用大写字符串（&lt;em&gt;例如 &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;POST&lt;/code&gt; 等&lt;/em&gt;）。您还可以在 &lt;code&gt;django_rest.http.methods&lt;/code&gt; 中使用一些预定义的集合。如果未 给出 &lt;code&gt;allowed_methods&lt;/code&gt; ，则将允许所有HTTP方法。</target>
        </trans-unit>
        <trans-unit id="f9620f39f3d0c8ec44c54e0d717ece6e117519d1" translate="yes" xml:space="preserve">
          <source>A class that defines who is allowed to access the
decorated view. If no &lt;code&gt;permission_class&lt;/code&gt; given, the decorator's default permission is
&lt;code&gt;AllowAny&lt;/code&gt; (your view is public).</source>
          <target state="translated">定义允许谁访问装饰视图的类。如果未给出 &lt;code&gt;permission_class&lt;/code&gt; ，则装饰器的默认许可权为 &lt;code&gt;AllowAny&lt;/code&gt; （您的视图是公共的）。</target>
        </trans-unit>
        <trans-unit id="342586a827d2002bb7cee27c3c8be40ade16fdd9" translate="yes" xml:space="preserve">
          <source>A post-clean method is a deserializer's method, specific to a single &lt;code&gt;Field&lt;/code&gt; and
that will be called once the &quot;standard&quot; validation is done by the deserializer,
allowing you to handle this validated value more easily, then return the value
that will appear in the output data (that will be given to your view).
By convention, their name follows the pattern: &lt;code&gt;post_clean_&amp;lt;FIELD NAME&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">后清洗方法是反序列化器的方法，特定于单个 &lt;code&gt;Field&lt;/code&gt; 并且在反序列化器完成&amp;ldquo;标准&amp;rdquo;验证后将调用该方法，使您可以更轻松地处理此验证后的值，然后返回将在输出数据（将提供给您的视图）。按照约定，它们的名称遵循以下模式： &lt;code&gt;post_clean_&amp;lt;FIELD NAME&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="575797131c5480bfbe93d2552c32f5f53f79b09e" translate="yes" xml:space="preserve">
          <source>Admin users with all HTTP methods</source>
          <target state="translated">拥有所有HTTP方法的管理用户</target>
        </trans-unit>
        <trans-unit id="349d9457bef62a1e0df0ea2f2c6dd8c4faea06f5" translate="yes" xml:space="preserve">
          <source>All the following HTTP method's related constants can be found in
&lt;code&gt;django_rest.http.methods&lt;/code&gt;:</source>
          <target state="translated">可以在 &lt;code&gt;django_rest.http.methods&lt;/code&gt; 中找到以下所有与HTTP方法相关的常量 ：</target>
        </trans-unit>
        <trans-unit id="622ee6f2ee3ea0731f6ffbd54e8a594dadbb702f" translate="yes" xml:space="preserve">
          <source>All the permissions listed below could be imported from &lt;code&gt;django_rest.permissions&lt;/code&gt;</source>
          <target state="translated">下面列出的所有权限都可以从 &lt;code&gt;django_rest.permissions&lt;/code&gt; 导入</target>
        </trans-unit>
        <trans-unit id="5a2bcb288e00105ab9a864a478e774fdfeb2b5b9" translate="yes" xml:space="preserve">
          <source>All-pass Deserializer</source>
          <target state="translated">全通解串器</target>
        </trans-unit>
        <trans-unit id="4b0d017a9abb122925b9918ef8d906ce8ed8e64a" translate="yes" xml:space="preserve">
          <source>As explained in the section before, for HTTP methods requiring
data, if no &lt;code&gt;deserializer_class&lt;/code&gt;'s been given to the decorator, &lt;code&gt;deserialized_data&lt;/code&gt;
will contain the raw payload's data (without any validation).</source>
          <target state="translated">正如在节中说明之前，对于HTTP要求的数据的方法中，如果没有 &lt;code&gt;deserializer_class&lt;/code&gt; 的被赋予给装饰， &lt;code&gt;deserialized_data&lt;/code&gt; 将包含原始负载的数据（没有任何验证）。</target>
        </trans-unit>
        <trans-unit id="397071cff6cdc083a04f91aa180f675c9c9725aa" translate="yes" xml:space="preserve">
          <source>As illustrated in the examples above, the &lt;code&gt;@api_view&lt;/code&gt; decorator alters the
decorated view's arguments. The decorator gathers, extracts and standardizes
different arguments, then passes them to your view, in order to facilitate their
use. Let's explain each argument:</source>
          <target state="translated">如上面的示例所示， &lt;code&gt;@api_view&lt;/code&gt; 装饰器更改了装饰视图的参数。装饰器收集，提取和标准化不同的参数，然后将它们传递给您的视图，以方便它们的使用。让我们解释每个参数：</target>
        </trans-unit>
        <trans-unit id="7a7714aeb6ce5236b2d22c6a175ba08dbe357975" translate="yes" xml:space="preserve">
          <source>As seen in the previous chapter, django-REST provides you some custom exceptions that you can use (&lt;em&gt;i.e.&lt;/em&gt; raise) so that your view returns an error response,
without having to do it manually everytime. Here is the list of the available API exceptions , each with its returned object and status code:</source>
          <target state="translated">如上一章所示，django-REST为您提供了一些可以使用（&lt;em&gt;即&lt;/em&gt;引发）的自定义异常，以便您的视图返回错误响应，而不必每次都手动进行。以下是可用API异常的列表，每个API异常都有其返回的对象和状态代码：</target>
        </trans-unit>
        <trans-unit id="79ec626a9eccb00699f290e7afc45e2e02276e57" translate="yes" xml:space="preserve">
          <source>As shown in the example section, the &lt;code&gt;@api_view&lt;/code&gt; could be used with multiple
(optional) arguments:</source>
          <target state="translated">如示例部分所示， &lt;code&gt;@api_view&lt;/code&gt; 可以与多个（可选）参数一起使用：</target>
        </trans-unit>
        <trans-unit id="83dac886e1708e3687e878071f91f763ff6fa478" translate="yes" xml:space="preserve">
          <source>Available Deserializer Fields</source>
          <target state="translated">可用的解串器字段</target>
        </trans-unit>
        <trans-unit id="2f20fb50969d8dfbbb8d62634e92a9e1ad49d012" translate="yes" xml:space="preserve">
          <source>Available Permissions</source>
          <target state="translated">可用的权限</target>
        </trans-unit>
        <trans-unit id="a6ce7c6ea3cab8ba64b3ae75232ffd163383c49b" translate="yes" xml:space="preserve">
          <source>Available Serializer Fields</source>
          <target state="translated">可用的序列器字段</target>
        </trans-unit>
        <trans-unit id="714924d9a57669e99bfa17338027bad901a91dd7" translate="yes" xml:space="preserve">
          <source>Besides, you also have (in the same module &lt;code&gt;django_rest.http.status&lt;/code&gt;) 5 functions that you can use to verify
a status code category easily:</source>
          <target state="translated">此外，您（在同一模块 &lt;code&gt;django_rest.http.status&lt;/code&gt; 中）还具有5个函数，可用于轻松验证状态代码类别：</target>
        </trans-unit>
        <trans-unit id="fcb269bfee78d44a06b26cd4ef94e12a2796bf7b" translate="yes" xml:space="preserve">
          <source>But, a deserializer class has no purpose without its fields. Let's define
a simple &lt;code&gt;Deserializer&lt;/code&gt; with 2 fields: a positive integer primary key (&lt;code&gt;pk&lt;/code&gt;),
and a &lt;code&gt;username&lt;/code&gt; (string).</source>
          <target state="translated">但是，反序列化器类没有它的字段是没有目的的。让我们定义一个具有2个字段的简单 &lt;code&gt;Deserializer&lt;/code&gt; ：正整数主键（ &lt;code&gt;pk&lt;/code&gt; ）和 &lt;code&gt;username&lt;/code&gt; （string）。</target>
        </trans-unit>
        <trans-unit id="0ba5205c6d9a7394e3140c7ddfcc010e051c5a13" translate="yes" xml:space="preserve">
          <source>By nesting deserializers, errors are nested, and output data is a nested &lt;code&gt;dict&lt;/code&gt;
too. The following example illustrates how to nest deserializers:</source>
          <target state="translated">通过嵌套解串器，错误将被嵌套，输出数据也将成为嵌套 &lt;code&gt;dict&lt;/code&gt; 。以下示例说明了如何嵌套反序列化器：</target>
        </trans-unit>
        <trans-unit id="f2d5f4f8f1d30564bcf016c766d958cafd884491" translate="yes" xml:space="preserve">
          <source>By raising one of the &lt;a href=&quot;#52-existing-api-exceptions&quot;&gt;existing API exceptions&lt;/a&gt; (or
&lt;a href=&quot;#53-define-your-own-api-exception&quot;&gt;defining your own&lt;/a&gt;), the decorator will
return the response with the correct message (and status code). This approach
ensures that:</source>
          <target state="translated">通过引发&lt;a href=&quot;#52-existing-api-exceptions&quot;&gt;现有API异常之一&lt;/a&gt;（或 &lt;a href=&quot;#53-define-your-own-api-exception&quot;&gt;定义您自己的&lt;/a&gt;），装饰器将返回带有正确消息（和状态代码）的响应。这种方法可确保：</target>
        </trans-unit>
        <trans-unit id="2ae0cd5ad92d3f07a1abb9f0916488af811a4f6d" translate="yes" xml:space="preserve">
          <source>Call the &lt;code&gt;.clean()&lt;/code&gt; method with the data to validate, it should return the
valid data, or raise a &lt;code&gt;ValidationError&lt;/code&gt; in case the input data is invalid.</source>
          <target state="translated">用数据调用 &lt;code&gt;.clean()&lt;/code&gt; 方法进行验证，它应该返回有效数据，或者在输入数据无效的情况下引发 &lt;code&gt;ValidationError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d96d176c54c5ff026fea4c994777596845af7fa4" translate="yes" xml:space="preserve">
          <source>Check your data validity, by calling &lt;code&gt;.is_valid()&lt;/code&gt; method.</source>
          <target state="translated">通过调用 &lt;code&gt;.is_valid()&lt;/code&gt; 方法检查您的数据有效性。</target>
        </trans-unit>
        <trans-unit id="3b27e5c08e2d8abc2c1dc955a94fd654acb21121" translate="yes" xml:space="preserve">
          <source>ConstantField</source>
          <target state="translated">ConstantField</target>
        </trans-unit>
        <trans-unit id="db2cb87d17cd5591e428c4ba011ca7892f686191" translate="yes" xml:space="preserve">
          <source>Could be either a sub-class of &lt;code&gt;Deserializer&lt;/code&gt; (as shown in the
previous example), or a &lt;code&gt;dict&lt;/code&gt; that maps HTTP methods that use payload (&lt;em&gt;i.e.&lt;/em&gt;&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;
and &lt;code&gt;PATCH&lt;/code&gt;) to &lt;code&gt;Deserializer&lt;/code&gt; sub-classes, as the following:</source>
          <target state="translated">可以是 &lt;code&gt;Deserializer&lt;/code&gt; 的子类（如上例所示），也可以是将使用有效负载的HTTP方法（&lt;em&gt;即&lt;/em&gt; &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;PUT&lt;/code&gt; 和 &lt;code&gt;PATCH&lt;/code&gt; ）映射到 &lt;code&gt;Deserializer&lt;/code&gt; 子类的 &lt;code&gt;dict&lt;/code&gt; ，如下所示：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="26afb35da6f62177e4b0e9abccc2859fafbe6eec" translate="yes" xml:space="preserve">
          <source>Decorate a function-based view. For example:</source>
          <target state="translated">装饰一个基于功能的视图。例如:</target>
        </trans-unit>
        <trans-unit id="866f66f21e7dd6770886d3e5ce07306cfdf27a52" translate="yes" xml:space="preserve">
          <source>Decorate a whole class-based view (should be a sub-class of &lt;code&gt;django.view.View&lt;/code&gt;). For example:</source>
          <target state="translated">装饰整个基于类的视图（应该是 &lt;code&gt;django.view.View&lt;/code&gt; 的子类）。例如：</target>
        </trans-unit>
        <trans-unit id="26ab6f35deb751ef4cfac302bc6d6aa3ff064bc1" translate="yes" xml:space="preserve">
          <source>Decorated view's arguments</source>
          <target state="translated">被装饰的观点的论点</target>
        </trans-unit>
        <trans-unit id="5e6cda99d8bf4e1d5fee07a46ad2277d9eee0736" translate="yes" xml:space="preserve">
          <source>Decorator argments</source>
          <target state="translated">裝飾師論點</target>
        </trans-unit>
        <trans-unit id="6b821e6462e3bb88da2f1f2719569c1ec0e78158" translate="yes" xml:space="preserve">
          <source>Define your own API Exception</source>
          <target state="translated">定义你自己的API异常</target>
        </trans-unit>
        <trans-unit id="9ff905d2bda3f17d7ab7ddaf4ecfb8660cb76ea8" translate="yes" xml:space="preserve">
          <source>Defining a new &lt;code&gt;Deserializer&lt;/code&gt; is quite simple. All you need to do is to inherit
from &lt;code&gt;Deserializer&lt;/code&gt; class:</source>
          <target state="translated">定义新的 &lt;code&gt;Deserializer&lt;/code&gt; 非常简单。您需要做的就是从 &lt;code&gt;Deserializer&lt;/code&gt; 类继承：</target>
        </trans-unit>
        <trans-unit id="e0af9d4c1bca1e2323fb1d2f7c454642a84b4de4" translate="yes" xml:space="preserve">
          <source>Deserializers</source>
          <target state="translated">解串器</target>
        </trans-unit>
        <trans-unit id="0f3c41d986f00716a2834ddea66b4d669dd93f9e" translate="yes" xml:space="preserve">
          <source>DictSerializer</source>
          <target state="translated">DictSerializer</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">文件资料</target>
        </trans-unit>
        <trans-unit id="8bb583aa2f8601442adb30a18928537700d8a029" translate="yes" xml:space="preserve">
          <source>Even if combining standard permissions covers the most usual use-cases, you may have some unusual constrains that cannot be tackled using existing operators only.</source>
          <target state="translated">即使标准权限的组合涵盖了最常见的使用情况,你也可能有一些不寻常的限制,而这些限制不能只用现有的操作符来解决。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">例外情况</target>
        </trans-unit>
        <trans-unit id="96d610d7f05892922c182fe3041674f4600cb96b" translate="yes" xml:space="preserve">
          <source>Existing API Exceptions</source>
          <target state="translated">现有的API异常</target>
        </trans-unit>
        <trans-unit id="b03e918b2eeed24e00a50e907923a8459a2f7d06" translate="yes" xml:space="preserve">
          <source>First, start a new django project:</source>
          <target state="translated">首先,启动一个新的django项目。</target>
        </trans-unit>
        <trans-unit id="aa6f6b592d2f95de9e1f366f0fc21bacca8b927d" translate="yes" xml:space="preserve">
          <source>For class-based views, the decorator decorates all view's http methods
(&lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;post()&lt;/code&gt;, &lt;code&gt;put()&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;) and &lt;strong&gt;ONLY&lt;/strong&gt; them. In the example above, all http methods are restricted for staff-users only, but &lt;code&gt;other_method&lt;/code&gt; method hasn't been altered.</source>
          <target state="translated">对于基于类的观点，装饰装修的所有视图的HTTP方法（ &lt;code&gt;get()&lt;/code&gt; ， &lt;code&gt;post()&lt;/code&gt; ， &lt;code&gt;put()&lt;/code&gt; 方法，&lt;em&gt;等等&lt;/em&gt;）和&lt;strong&gt;ONLY&lt;/strong&gt;他们。在上面的示例中，所有http方法仅限于职员用户，但 &lt;code&gt;other_method&lt;/code&gt; 方法未更改。</target>
        </trans-unit>
        <trans-unit id="8a6a7b0f84c315f6ce5a4527d2ced588bbc766bc" translate="yes" xml:space="preserve">
          <source>For example, if your deserializer defines a &lt;code&gt;foo&lt;/code&gt; field as a &lt;code&gt;CharField()&lt;/code&gt;, and
you want that your view receives a custom transformation of that &lt;code&gt;foo&lt;/code&gt; field (for example, let's
say: striping border spaces), the post-clean method for that field should be
named &lt;code&gt;post_clean_foo()&lt;/code&gt;:</source>
          <target state="translated">例如，如果您的反序列化器将 &lt;code&gt;foo&lt;/code&gt; 字段定义为 &lt;code&gt;CharField()&lt;/code&gt; ，并且您希望视图接收该 &lt;code&gt;foo&lt;/code&gt; 字段的自定义转换（例如，假设：去除边框空间），则该字段的post-clean方法应该命名为 &lt;code&gt;post_clean_foo()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="edc8d57530e0ff92b767e02dc8430499924a24b3" translate="yes" xml:space="preserve">
          <source>For this example, let's implement a permission that grants access to:</source>
          <target state="translated">在这个例子中,让我们实现一个权限,授予访问。</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">超文本传输协议</target>
        </trans-unit>
        <trans-unit id="0d0e89ab8fb5de0b2f0ce37c01d8fe6ac1289b49" translate="yes" xml:space="preserve">
          <source>HTTP Methods</source>
          <target state="translated">HTTP方法</target>
        </trans-unit>
        <trans-unit id="843afb6a7d5b1f50643f4ddcbfd23e079f33c14a" translate="yes" xml:space="preserve">
          <source>HTTP Status codes</source>
          <target state="translated">HTTP状态码</target>
        </trans-unit>
        <trans-unit id="9cf6473b13025d50d7f9153df312a23940124ab5" translate="yes" xml:space="preserve">
          <source>Here is a simple example of a view that receives &lt;code&gt;url_params&lt;/code&gt;, calls a &lt;code&gt;find_results()&lt;/code&gt; function, and returns a &lt;code&gt;404&lt;/code&gt; in case there is no result:</source>
          <target state="translated">这是一个简单的视图示例，该视图接收 &lt;code&gt;url_params&lt;/code&gt; ，调用 &lt;code&gt;find_results()&lt;/code&gt; 函数，并在没有结果的情况下返回 &lt;code&gt;404&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b28da82e7b12eb5210cc8b82b626763bf3272761" translate="yes" xml:space="preserve">
          <source>Here is a simple example that illustrates how &lt;code&gt;MethodField&lt;/code&gt; works:</source>
          <target state="translated">这是一个简单的示例，说明 &lt;code&gt;MethodField&lt;/code&gt; 的工作方式：</target>
        </trans-unit>
        <trans-unit id="237c7dd58721730dec15f62269ac3f43e5558f3b" translate="yes" xml:space="preserve">
          <source>Here is a simple example that shows how to define a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409&quot;&gt;conflict&lt;/a&gt; exception:</source>
          <target state="translated">这是一个简单的示例，显示了如何定义&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409&quot;&gt;冲突&lt;/a&gt;异常：</target>
        </trans-unit>
        <trans-unit id="ea724b816190320574ae29c6484ba706b02e562b" translate="yes" xml:space="preserve">
          <source>Here is a simple example:</source>
          <target state="translated">下面是一个简单的例子。</target>
        </trans-unit>
        <trans-unit id="a7d0f0ace14c76bb531eb8490f33d16b3c35a71f" translate="yes" xml:space="preserve">
          <source>Here is the exhaustive list of http status constants provided by django-REST
(more details about status codes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&quot;&gt;here&lt;/a&gt;):</source>
          <target state="translated">这是django-REST提供的http状态常量的详尽列表（有关状态代码的更多详细信息，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&quot;&gt;此处&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="8037948dd8dc82a49ccb2aaaa5c2c74e23f16c84" translate="yes" xml:space="preserve">
          <source>How to decorate a view</source>
          <target state="translated">如何装修景观</target>
        </trans-unit>
        <trans-unit id="1757a133f40405e1a22e42dd181b33b78a6cb118" translate="yes" xml:space="preserve">
          <source>If the payload data doesn't respect the format defined in the deserializer,
a &lt;code&gt;400 Bad Request&lt;/code&gt; response will be returned.</source>
          <target state="translated">如果有效载荷数据不符合反序列化器中定义的格式，则将返回 &lt;code&gt;400 Bad Request&lt;/code&gt; 响应。</target>
        </trans-unit>
        <trans-unit id="8f3d66938ce8863493b8e31706d8d55ce307d304" translate="yes" xml:space="preserve">
          <source>If the user requests the decorated view
with a non-allowed method, a &lt;code&gt;405 Method not allowed&lt;/code&gt; response will be
returned before executing your view's code.</source>
          <target state="translated">如果用户使用不允许的方法请求修饰的视图，则在执行视图的代码之前将返回 &lt;code&gt;405 Method not allowed&lt;/code&gt; 响应。</target>
        </trans-unit>
        <trans-unit id="654fa5d928083958ae3394c2b58df13fa6ff5fb3" translate="yes" xml:space="preserve">
          <source>If we switched permissions order as the following:</source>
          <target state="translated">如果我们把权限顺序换成如下。</target>
        </trans-unit>
        <trans-unit id="b2de3ec475855d4200c2caaa94c0d82d0c4d4ac4" translate="yes" xml:space="preserve">
          <source>Implement your own permission</source>
          <target state="translated">落实自己的权限</target>
        </trans-unit>
        <trans-unit id="b99d8c6a31f8fc91fc90d0b80869ea59402f2a0a" translate="yes" xml:space="preserve">
          <source>Impmement a new Deserializer</source>
          <target state="translated">实施一个新的Deserializer</target>
        </trans-unit>
        <trans-unit id="edd6835e4606af0821a9b78744ce4a4b1bb1f430" translate="yes" xml:space="preserve">
          <source>Impmement a new Serializer</source>
          <target state="translated">植入一个新的序列器</target>
        </trans-unit>
        <trans-unit id="34977fd0f8575a6dcb558cab5e1d9b40ab1600bd" translate="yes" xml:space="preserve">
          <source>In case the user isn't allowed to access the view,
a &lt;code&gt;403 Forbidden access&lt;/code&gt; response will be returned before even executing the
view's code. More details in &lt;a href=&quot;#2-view-permissions&quot;&gt;permissions section&lt;/a&gt;.</source>
          <target state="translated">如果不允许用户访问该视图，则即使执行该视图的代码，也将返回 &lt;code&gt;403 Forbidden access&lt;/code&gt; 响应。在&lt;a href=&quot;#2-view-permissions&quot;&gt;权限部分中有&lt;/a&gt;更多详细信息。</target>
        </trans-unit>
        <trans-unit id="9418098911e577457a16ac1964eb4dfc61cb1bb9" translate="yes" xml:space="preserve">
          <source>In django-REST, a deserializer validates input data (request payload and/or form data)
based on custom fields ans constrains defined in the deserializer class,
then &quot;translates&quot; data into the target format (Python primitive types), and finally
executes some post-validation methods (if defined).
In this chapter, we'll cover how to implement a simple deserializer, what are the
fields available for use, how to nest deserializers for more complex validation and to post-clean your data,
and finally, what the &lt;code&gt;AllPassDeserializer&lt;/code&gt; is.</source>
          <target state="translated">在django-REST中，反序列化器基于在反序列化器类中定义的自定义字段和约束来验证输入数据（请求有效载荷和/或表单数据），然后将数据&amp;ldquo;转换&amp;rdquo;为目标格式（Python基本类型），最后执行一些验证后方法（如果已定义）。在本章中，我们将介绍如何实现简单的反序列化器，可使用的字段，如何嵌套反序列化器以进行更复杂的验证以及对数据进行后期清理，最后介绍 &lt;code&gt;AllPassDeserializer&lt;/code&gt; 是什么。</target>
        </trans-unit>
        <trans-unit id="e127e2d09f91de53de52de36f73011a28d66e25f" translate="yes" xml:space="preserve">
          <source>In django-REST, all permissions inherit from &lt;code&gt;Permission&lt;/code&gt;, and passed as argument to the &lt;code&gt;@api_view&lt;/code&gt; decorator, as seen in
the previous examples.</source>
          <target state="translated">在django-REST中，所有权限都继承自 &lt;code&gt;Permission&lt;/code&gt; ，并作为参数传递给 &lt;code&gt;@api_view&lt;/code&gt; 装饰器，如前面的示例所示。</target>
        </trans-unit>
        <trans-unit id="6fd6f85dfd4b01cd7ecc85f67ee9e792ad1b5b45" translate="yes" xml:space="preserve">
          <source>In order to define your own API Exception, all you have to do is inheriting from
&lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt; (or one of its sub-classes), then override its &lt;code&gt;STATUS_CODE&lt;/code&gt; and &lt;code&gt;RESPONSE_MESSAGE&lt;/code&gt; attributes.</source>
          <target state="translated">为了定义自己的API异常，您需要做的就是从 &lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt; （或其子类之一）继承 ，然后覆盖其 &lt;code&gt;STATUS_CODE&lt;/code&gt; 和 &lt;code&gt;RESPONSE_MESSAGE&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="b908525f5d32667d8846ea4ac7661a407747c471" translate="yes" xml:space="preserve">
          <source>In order to test your endpoints, you can use &lt;a href=&quot;https://www.postman.com/&quot;&gt;PostMan&lt;/a&gt;, &lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt; or &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl&lt;/a&gt;.
I'll be using &lt;code&gt;httpie&lt;/code&gt; in the example:</source>
          <target state="translated">为了测试您的端点，可以使用&lt;a href=&quot;https://www.postman.com/&quot;&gt;PostMan&lt;/a&gt;，&lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt;或&lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl&lt;/a&gt;。在示例中，我将使用 &lt;code&gt;httpie&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3ed53e5707d26985b3cf3d15ece09faac2654e93" translate="yes" xml:space="preserve">
          <source>In the example above, in &lt;code&gt;HasGmailAddress&lt;/code&gt; code, we assumed that the user is
already authenticated, instead of manually checking it. That's because if the permission &lt;code&gt;IsAuthenticated&lt;/code&gt; isn't satisfied,
django-REST returns a &lt;code&gt;403 Forbidden access&lt;/code&gt; before even evaluating &lt;code&gt;HasGmailAddress&lt;/code&gt; permission.
That's why in &lt;code&gt;HasGmailAddress&lt;/code&gt; code, we assumed the user is authenticated.</source>
          <target state="translated">在上面的示例中，在 &lt;code&gt;HasGmailAddress&lt;/code&gt; 代码中，我们假定用户已通过身份验证，而不是手动检查它。这是因为，如果不满足 &lt;code&gt;IsAuthenticated&lt;/code&gt; 权限，django-REST甚至会在评估 &lt;code&gt;HasGmailAddress&lt;/code&gt; 权限之前返回 &lt;code&gt;403 Forbidden access&lt;/code&gt; 。这就是为什么在 &lt;code&gt;HasGmailAddress&lt;/code&gt; 代码中，我们假设用户已通过身份验证。</target>
        </trans-unit>
        <trans-unit id="4bd34b714c47ba07442e6bc4ab76a071bacc2154" translate="yes" xml:space="preserve">
          <source>In the first case above, &lt;code&gt;MyDeserializerClass&lt;/code&gt; will be applied to: &lt;code&gt;POST&lt;/code&gt;,
&lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;PATCH&lt;/code&gt; methods. Also, note that in second case, the &lt;code&gt;deserializer_class&lt;/code&gt; mapping doesn't
define a deserializer for the &lt;code&gt;PATCH&lt;/code&gt; HTTP method. In this case,
the &quot;all-pass&quot; deserializer (&lt;em&gt;i.e.&lt;/em&gt; passes payload data to the view without any
validation) will be used. The same deserializer will be applied if no
&lt;code&gt;deserializer_class&lt;/code&gt; is given.</source>
          <target state="translated">在上述第一种情况下， &lt;code&gt;MyDeserializerClass&lt;/code&gt; 将应用于： &lt;code&gt;POST&lt;/code&gt; ， &lt;code&gt;PUT&lt;/code&gt; 和 &lt;code&gt;PATCH&lt;/code&gt; 方法。另外，请注意，在第二种情况下， &lt;code&gt;deserializer_class&lt;/code&gt; 映射未为 &lt;code&gt;PATCH&lt;/code&gt; HTTP方法定义反序列化器。在这种情况下，将使用&amp;ldquo;全通&amp;rdquo;解串器（&lt;em&gt;即，&lt;/em&gt;将有效载荷数据传递到视图而无需任何验证）。如果未提供deserializer_class，则将应用相同的解串 &lt;code&gt;deserializer_class&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5c51e11e6aed83bb0ec70c1dcba624849b92eca" translate="yes" xml:space="preserve">
          <source>In this section, we will start by introducing the django-REST's provided
permissions, then how to build more complex permissions by combining the
existing ones, and finally, how to implement your own custom permission.</source>
          <target state="translated">在本节中,我们将首先介绍django-REST提供的权限,然后是如何结合现有的权限建立更复杂的权限,最后是如何实现自己的自定义权限。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="e0da246674293ee7df9ce1390adb2bcff6820e1c" translate="yes" xml:space="preserve">
          <source>Instantiate the deserializer class without arguments.</source>
          <target state="translated">在没有参数的情况下实例化反序列器类。</target>
        </trans-unit>
        <trans-unit id="379ed8145e9dfabdba5fe78bf2e11f54fd99a289" translate="yes" xml:space="preserve">
          <source>Instantiate your deserializer class, passing &lt;code&gt;data&lt;/code&gt; argument to the
constructor.</source>
          <target state="translated">实例化反序列化器类，将 &lt;code&gt;data&lt;/code&gt; 参数传递给构造函数。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">介紹</target>
        </trans-unit>
        <trans-unit id="c651c0527459e73980d3ad52c3edfa4807d663f6" translate="yes" xml:space="preserve">
          <source>It will be implemented as the following:</source>
          <target state="translated">它将按以下方式执行:</target>
        </trans-unit>
        <trans-unit id="8e0f863b3feef582d8ab9849b4d8a9a0edb3a6a3" translate="yes" xml:space="preserve">
          <source>Let's consider a view that should be exposed to anonymous (&lt;em&gt;i.e.&lt;/em&gt; not
authenticated) users only. This view's permission will be defined as the following:</source>
          <target state="translated">让我们考虑应该仅向匿名（&lt;em&gt;即，&lt;/em&gt;未经身份验证）用户公开的视图。该视图的权限将定义如下：</target>
        </trans-unit>
        <trans-unit id="96887327f8f666ec50df04f02130437be5641d64" translate="yes" xml:space="preserve">
          <source>Let's create a new &lt;code&gt;IsAdminOrReadOnly&lt;/code&gt; permission granting access to:</source>
          <target state="translated">让我们创建一个新的 &lt;code&gt;IsAdminOrReadOnly&lt;/code&gt; 权限，授予对以下内容的访问权限：</target>
        </trans-unit>
        <trans-unit id="b0da78b52a2a0ef641d76e4d571ce2304fc9c953" translate="yes" xml:space="preserve">
          <source>Let's create a new &lt;code&gt;IsStaffAndReadOnly&lt;/code&gt; permission that grants access to:</source>
          <target state="translated">让我们创建一个新的 &lt;code&gt;IsStaffAndReadOnly&lt;/code&gt; 权限，该权限授予对以下内容的访问权：</target>
        </trans-unit>
        <trans-unit id="fd2141e8e3eb048b0968e320972b618e6bcc640d" translate="yes" xml:space="preserve">
          <source>Let's demonstrate those operators then their combinations in concrete examples:</source>
          <target state="translated">我们来演示一下这些运算符,然后在具体的例子中演示它们的组合。</target>
        </trans-unit>
        <trans-unit id="f1ff9eef0ce45d06246ca9b45f906fdac0836866" translate="yes" xml:space="preserve">
          <source>Let's get started by implementing the views in &lt;code&gt;./first_project/urls.py&lt;/code&gt;:</source>
          <target state="translated">让我们开始在 &lt;code&gt;./first_project/urls.py&lt;/code&gt; 中实现视图：</target>
        </trans-unit>
        <trans-unit id="80ae4b28dfb9f0fab8302c59da63d4fc2b399fb5" translate="yes" xml:space="preserve">
          <source>Let's implement a custom permission that grants access to authenticated users
having &lt;code&gt;gmail&lt;/code&gt; address only. The &quot;authenticated users&quot; part will be taken care
of using the existing &lt;code&gt;IsAuthenticated&lt;/code&gt; permission.</source>
          <target state="translated">让我们实现一个自定义权限，该权限将访问权限授予仅具有 &lt;code&gt;gmail&lt;/code&gt; 地址的经过身份验证的用户。&amp;ldquo;经过身份验证的用户&amp;rdquo;部分将使用现有的 &lt;code&gt;IsAuthenticated&lt;/code&gt; 权限进行处理。</target>
        </trans-unit>
        <trans-unit id="594d3d23342bafc556bbe721512d2259e8494b9a" translate="yes" xml:space="preserve">
          <source>Let's implement a quick public API endpoint that lists existing regular (&lt;em&gt;i.e.&lt;/em&gt; not staff) users:</source>
          <target state="translated">让我们实现一个快速的公共API终结点，该终结点列出现有的常规（&lt;em&gt;即&lt;/em&gt;非员工）用户：</target>
        </trans-unit>
        <trans-unit id="c1596d84bca554057a4c353dd7c84e7b9d17ef6b" translate="yes" xml:space="preserve">
          <source>Let's re-implement the &lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt; used in the XOR example above, by using
multiple operators. Then, we'll re-use it (&lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt;) to implement a new
&lt;code&gt;IsStaffAndNotAdminUserOrReadOnly&lt;/code&gt;:</source>
          <target state="translated">让我们通过使用多个运算符来重新实现在 &lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt; 的XOR示例中使用的IsStaffAndNotAdminUser。然后，我们将重用它（ &lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt; ）来实现一个新的 &lt;code&gt;IsStaffAndNotAdminUserOrReadOnly&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="dc0f9116c0ed8840cb05f3d2fc25a3fea1ab9b9e" translate="yes" xml:space="preserve">
          <source>ListField</source>
          <target state="translated">列表字段</target>
        </trans-unit>
        <trans-unit id="b274ef72a565799d803633a15bead807ed56b2d5" translate="yes" xml:space="preserve">
          <source>MethodField</source>
          <target state="translated">方法域</target>
        </trans-unit>
        <trans-unit id="3417f0f9cde6632ffb5b430911f95956fc9bdd31" translate="yes" xml:space="preserve">
          <source>Nested Deserializers</source>
          <target state="translated">嵌套解串器</target>
        </trans-unit>
        <trans-unit id="983db32ec03d260db1c1777fde1c8ae38726b2a7" translate="yes" xml:space="preserve">
          <source>Nested Serializers</source>
          <target state="translated">嵌套的序列器</target>
        </trans-unit>
        <trans-unit id="8eea461a6b2888fb9ac308e66f8f03e1c241c1f8" translate="yes" xml:space="preserve">
          <source>Non-admin users with reading http methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;) only.</source>
          <target state="translated">仅具有阅读http方法（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;OPTIONS&lt;/code&gt; ）的非管理员用户。</target>
        </trans-unit>
        <trans-unit id="60453f0bcd44a9cdf1ad57f483221ae6b70faab5" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;Deserializer&lt;/code&gt; is a field too, it can be used the exact same way you use a field (with the &lt;a href=&quot;https://docs.djangoproject.com/fr/3.0/ref/forms/fields/#core-field-arguments&quot;&gt;same arguments&lt;/a&gt;).</source>
          <target state="translated">请注意， &lt;code&gt;Deserializer&lt;/code&gt; 也是一个字段，可以使用与使用字段完全相同的方式（具有&lt;a href=&quot;https://docs.djangoproject.com/fr/3.0/ref/forms/fields/#core-field-arguments&quot;&gt;相同的参数&lt;/a&gt;）使用它。</target>
        </trans-unit>
        <trans-unit id="9fd2c752085b3421f096d4144be397f7de2b5b33" translate="yes" xml:space="preserve">
          <source>Note that this permission could be implemented differently (and in a more
correct and readable way). The use of XOR operator here is for demonstration purpose only.
The correct implementation is shown below in &quot;&lt;em&gt;5. Combining Operators&lt;/em&gt;&quot; example.</source>
          <target state="translated">请注意，可以以不同的方式（以更正确和可读的方式）实现此权限。这里使用XOR运算符仅用于演示目的。下面的&amp;ldquo; &lt;em&gt;5.合并运算符&lt;/em&gt;&amp;rdquo;示例中显示了正确的实现。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概述</target>
        </trans-unit>
        <trans-unit id="62adffa246883fc5fd9249d92a33650601dff73d" translate="yes" xml:space="preserve">
          <source>Permissions Operators</source>
          <target state="translated">权限操作员</target>
        </trans-unit>
        <trans-unit id="55047f2e224f7531bc7deef60c354019d2436bc1" translate="yes" xml:space="preserve">
          <source>Permissions is what determines whether a request should be granted or denied
access, for a particular view. The inspection process is done before executing
the decorated view's code, then, if the request satisfies the
permission's constraints, the access is granted. If not, a &lt;code&gt;403 Forbidden access&lt;/code&gt;
response is returned.</source>
          <target state="translated">权限是确定对于特定视图应授予请求还是拒绝访问的权限。检查过程在执行装饰的视图的代码之前完成，然后，如果请求满足权限的约束，则授予访问权限。如果不是， 则返回&amp;ldquo; &lt;code&gt;403 Forbidden access&lt;/code&gt; 响应。</target>
        </trans-unit>
        <trans-unit id="c9706a7f668f507761bc65c6b7c174ff136a6eae" translate="yes" xml:space="preserve">
          <source>Post-clean methods</source>
          <target state="translated">后期清洁方法</target>
        </trans-unit>
        <trans-unit id="c7969f1f2306323d21ee870b267eca96e3a3e899" translate="yes" xml:space="preserve">
          <source>Primitive types</source>
          <target state="translated">原始类型</target>
        </trans-unit>
        <trans-unit id="9ef7997531b0ae969d7696de912d2dc860be2298" translate="yes" xml:space="preserve">
          <source>Put the clean call inside a &lt;code&gt;try/except&lt;/code&gt; clause to catch the validation errors.</source>
          <target state="translated">将clean调用放在 &lt;code&gt;try/except&lt;/code&gt; 子句中，以捕获验证错误。</target>
        </trans-unit>
        <trans-unit id="0050cd45550aca440b92b8da99fe4c2a2d3e1db1" translate="yes" xml:space="preserve">
          <source>Python version 2.7+ or 3.3+</source>
          <target state="translated">Python版本2.7+或3.3+。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">所需经费</target>
        </trans-unit>
        <trans-unit id="be5a7a5ec7c4c9525ce526cb8161aadd505d4b5a" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;An unknown server error occured.&quot;&lt;/em&gt; - status code: &lt;code&gt;500&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;发生未知的服务器错误。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;500&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdd8bacfe8a93ad52a407fb6c6a6e5e8f206f130" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Bad request.&quot;&lt;/em&gt; - status code: &lt;code&gt;400&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;错误的请求。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;400&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7528491e6a1e5a550952d68ea7507e9d839feb7e" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Forbidden operation. Make sure you have the right permissions.&quot;&lt;/em&gt; - status code: &lt;code&gt;403&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;禁止操作。请确保您具有正确的权限。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;403&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3039f25c9479be3287b482e4bdd924b66f93430e" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;HTTP Method not allowed.&quot;&lt;/em&gt; - status code: &lt;code&gt;405&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;不允许使用HTTP方法。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;405&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c5fa2521ddbd16793f66cd9d6da8a54edf7b90d" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;The requested resource is not found.&quot;&lt;/em&gt; - status code: &lt;code&gt;404&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;找不到所请求的资源。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;404&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="161feccc589be89a47c2015f5840ac643b364791" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;The requested service is unavailable.&quot;&lt;/em&gt; - status code: &lt;code&gt;502&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;请求的服务不可用。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;502&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec9c81695b0d09c5ec14fca35b0dfc3a2df5dafe" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Unauthorized operation. Maybe forgot the authentication step ?&quot;&lt;/em&gt; - status code: &lt;code&gt;401&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;未经授权的操作。也许忘记了身份验证步骤？&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;401&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7891d62bbaf2d69b5e5049b24a2296136651855e" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Unsupported Media Type. Check your request's Content-Type.&quot;&lt;/em&gt; - status code: &lt;code&gt;415&lt;/code&gt;</source>
          <target state="translated">响应消息：&lt;em&gt;&amp;ldquo;不支持的媒体类型。检查请求的内容类型。&amp;rdquo; &lt;/em&gt;-状态码： &lt;code&gt;415&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae8e55daa2bd29605a4ee191154750f051e02efe" translate="yes" xml:space="preserve">
          <source>Retrieve the validated data with &lt;code&gt;.data&lt;/code&gt; (or errors with &lt;code&gt;.errors&lt;/code&gt;)
attribute.</source>
          <target state="translated">使用 &lt;code&gt;.data&lt;/code&gt; （或带有 &lt;code&gt;.errors&lt;/code&gt; 的错误）属性检索经过验证的数据。</target>
        </trans-unit>
        <trans-unit id="71796031218483adb9338df6ac1fe8ad1217e178" translate="yes" xml:space="preserve">
          <source>Serializers</source>
          <target state="translated">序列器</target>
        </trans-unit>
        <trans-unit id="b3bb5217c28b1d26e506757e01d5147849575a98" translate="yes" xml:space="preserve">
          <source>Serializers allow complex data such as querysets and model instances to be
converted into native Python data-types, so that they could be easily rendered
into JSON. Serializers do the opposite of Deserializers, and intervene at the
&quot;return&quot; statement of your view.</source>
          <target state="translated">序列化器允许将复杂的数据(如查询集和模型实例)转换为本地的 Python 数据类型,这样它们就可以很容易地渲染成 JSON。序列化器的作用与序列化器相反,它在视图的 &quot;return &quot;语句处进行干预。</target>
        </trans-unit>
        <trans-unit id="6b81f2ec5c4de2ef9597e1d943195339f992a1c9" translate="yes" xml:space="preserve">
          <source>Serializers fields are very limited, because, remember that the data will be converted
into native Python data-types (that are limited too). Besides primitive fields (&lt;code&gt;CharField&lt;/code&gt;,
&lt;code&gt;IntegerField&lt;/code&gt;, &lt;code&gt;FloatField&lt;/code&gt;, &lt;code&gt;BooleanField&lt;/code&gt;), django-REST provides 3 additional
fields to use within &lt;code&gt;Serializers&lt;/code&gt;: &lt;code&gt;ListField&lt;/code&gt;, &lt;code&gt;ConstantField&lt;/code&gt; and &lt;code&gt;MethodField&lt;/code&gt; (and the nested
serializers). Let's dive into existing fields details.</source>
          <target state="translated">序列化器字段非常有限，因为请记住，数据将被转换为原生Python数据类型（也受到限制）。除了原始字段（ &lt;code&gt;CharField&lt;/code&gt; ， &lt;code&gt;IntegerField&lt;/code&gt; ， &lt;code&gt;FloatField&lt;/code&gt; ， &lt;code&gt;BooleanField&lt;/code&gt; ）之外，django-REST还提供了3个在 &lt;code&gt;Serializers&lt;/code&gt; 中使用的其他字段： &lt;code&gt;ListField&lt;/code&gt; ， &lt;code&gt;ConstantField&lt;/code&gt; 和 &lt;code&gt;MethodField&lt;/code&gt; （以及嵌套的序列化器）。让我们深入研究现有字段的详细信息。</target>
        </trans-unit>
        <trans-unit id="8d4fd798f87fdae64082e55d87a13fd730ead25f" translate="yes" xml:space="preserve">
          <source>Similar to how we've implemented a &lt;code&gt;Deserializer&lt;/code&gt;, in order to implement your
own serializer, you have to inherit from &lt;code&gt;Serializer&lt;/code&gt; class, then define the
fields that you want to include into your serialized data (probably your view's response). Here is a simple
example:</source>
          <target state="translated">与我们实现 &lt;code&gt;Deserializer&lt;/code&gt; 的方式类似，要实现自己的序列化器，您必须从 &lt;code&gt;Serializer&lt;/code&gt; 类继承，然后定义要包含在序列化数据中的字段（可能是视图的响应）。这是一个简单的示例：</target>
        </trans-unit>
        <trans-unit id="87b067f5d4700efc96d3ee98d020e4b72d4b27ff" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;Deserializer&lt;/code&gt;, &lt;code&gt;Serializer&lt;/code&gt; sub-classes could be nested (i.e.
using &lt;code&gt;Serializer&lt;/code&gt; sub-class as a serializer's field). Here is a simple example
that shows how to nest serializers:</source>
          <target state="translated">与 &lt;code&gt;Deserializer&lt;/code&gt; 相似，可以嵌套 &lt;code&gt;Serializer&lt;/code&gt; 子类（即，将 &lt;code&gt;Serializer&lt;/code&gt; 子类用作序列化器的字段）。这是一个简单的示例，显示了如何嵌套序列化程序：</target>
        </trans-unit>
        <trans-unit id="7fbf2a39f74420632020f98ebc38d5d85f3588b2" translate="yes" xml:space="preserve">
          <source>Staff users, &lt;strong&gt;and&lt;/strong&gt; only with reading http methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;).</source>
          <target state="translated">员工用户，&lt;strong&gt;并且&lt;/strong&gt;只能使用读取http方法（ &lt;code&gt;GET&lt;/code&gt; ， &lt;code&gt;HEAD&lt;/code&gt; 和 &lt;code&gt;OPTIONS&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1a428989bd13dceabd89b698d9fa38eb8a0d175c" translate="yes" xml:space="preserve">
          <source>Table of contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="7455a01bab300b63b3e5c018aa62a5207b1d29fd" translate="yes" xml:space="preserve">
          <source>That's all! Now run the server:</source>
          <target state="translated">就这样吧! 现在运行服务器。</target>
        </trans-unit>
        <trans-unit id="18094be7752942196d540572254de7dee1a3a8ee" translate="yes" xml:space="preserve">
          <source>That's how a &lt;code&gt;Deserializer&lt;/code&gt; is defined. Now, if you want to use the deserializer
outside the &lt;code&gt;@api_view&lt;/code&gt;'s &lt;code&gt;deserializer_class&lt;/code&gt; argument, you have two approaches to proceed:</source>
          <target state="translated">这就是 &lt;code&gt;Deserializer&lt;/code&gt; 的定义方式。现在，如果你想使用外部解串器 &lt;code&gt;@api_view&lt;/code&gt; 的 &lt;code&gt;deserializer_class&lt;/code&gt; 说法，你有两种方式进行：</target>
        </trans-unit>
        <trans-unit id="77732eb5e23217875cc3cc68834d65d9e557e0db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@api_view&lt;/code&gt; decorator catches exceptions for you in case you did not, and returns a JSON response with the correct status code.
If the raised exception is a sub-class of &lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt;, a custom message and status code will be returned.
If it's not the case, the returned JSON response will have &lt;code&gt;&quot;An unknown server error occured.&quot;&lt;/code&gt; as message, and &lt;code&gt;500&lt;/code&gt; as status code.</source>
          <target state="translated">该 &lt;code&gt;@api_view&lt;/code&gt; 你没有的情况下，装饰捕获异常你，并返回正确的状态码的JSON响应。如果引发的异常是 &lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt; 的子类，则将返回自定义消息和状态代码。如果不是这种情况，则返回的JSON响应将显示 &lt;code&gt;&quot;An unknown server error occured.&quot;&lt;/code&gt; 作为消息，以及 &lt;code&gt;500&lt;/code&gt; 作为状态代码。</target>
        </trans-unit>
        <trans-unit id="a7b3761b83c46037ffa0b0ddfe4e64833c10ff89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@api_view&lt;/code&gt; decorator could be applied differently on the views, depending on your use-case. You can:</source>
          <target state="translated">该 &lt;code&gt;@api_view&lt;/code&gt; 装饰可以以不同的观点得到应用，这取决于你的使用情况。您可以：</target>
        </trans-unit>
        <trans-unit id="52b0aaef3de79ffde180c7d85027983ab0980490" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllPassDeserializer&lt;/code&gt; is the default deserializer used by &lt;code&gt;@api_view&lt;/code&gt;
decorator. (You probably won't need it unless you're dealing with a very unusual
use-case)</source>
          <target state="translated">该 &lt;code&gt;AllPassDeserializer&lt;/code&gt; 是使用默认解串器 &lt;code&gt;@api_view&lt;/code&gt; 装饰。（除非您要处理一个非常不寻常的用例，否则您可能不需要它）</target>
        </trans-unit>
        <trans-unit id="d30d433337a13704f2348b9ae3366cafce83ef86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllPassDeserializer&lt;/code&gt;, is a particular deserializer that allows all payloads to pass to the view, without
any validation: No type-casts, no post-clean methods, and more importantly,
never raises a &lt;code&gt;ValidationError&lt;/code&gt; or returns a &lt;code&gt;400 BadRequest&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;AllPassDeserializer&lt;/code&gt; ，是一个特别的解串器，允许所有有效载荷传递给视图，而无需任何验证：无类型强制转换，无后清洗的方法，更重要的是，从未提出了一个 &lt;code&gt;ValidationError&lt;/code&gt; 或返回 &lt;code&gt;400 BadRequest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f1296a0c1eabde27e5f36212978bffa51963747" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has_permission()&lt;/code&gt; takes the &lt;code&gt;request&lt;/code&gt; object, and the target view object as
arguments, and should return a &lt;code&gt;bool&lt;/code&gt; that represents if the access should be
granted (&lt;code&gt;True&lt;/code&gt;) or not (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;has_permission()&lt;/code&gt; 取 &lt;code&gt;request&lt;/code&gt; 对象，并作为参数目标视图对象，以及应该返回一个 &lt;code&gt;bool&lt;/code&gt; 表示如果应授予访问权限（ &lt;code&gt;True&lt;/code&gt; ）还是不（ &lt;code&gt;False&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="39d7ad6a89c73d70a6be58ddbb416ecdfc7e544a" translate="yes" xml:space="preserve">
          <source>The @api_view decorator</source>
          <target state="translated">@api_view装饰器</target>
        </trans-unit>
        <trans-unit id="3cf2178cf416886a2e50ceb7f91c8180d831daba" translate="yes" xml:space="preserve">
          <source>The HTTP status codes can be imported from &lt;code&gt;django_rest.http.status&lt;/code&gt;:</source>
          <target state="translated">可以从 &lt;code&gt;django_rest.http.status&lt;/code&gt; 导入HTTP状态代码：</target>
        </trans-unit>
        <trans-unit id="0bfd8dcd1c21584dcb049f881a0d509c7ecfec89" translate="yes" xml:space="preserve">
          <source>The first approach</source>
          <target state="translated">第一种方法</target>
        </trans-unit>
        <trans-unit id="b4564b07cdaa85badd51131499d4faaa7004f968" translate="yes" xml:space="preserve">
          <source>The library itself was highly inspired from the great &lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;django-rest-framework&lt;/a&gt; and &lt;a href=&quot;https://serpy.readthedocs.io/en/latest/&quot;&gt;SerPy&lt;/a&gt;</source>
          <target state="translated">图书馆本身受到&lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;django-rest- &lt;/a&gt;&lt;a href=&quot;https://serpy.readthedocs.io/en/latest/&quot;&gt;frame&lt;/a&gt;和SerPy的启发</target>
        </trans-unit>
        <trans-unit id="64a3dff1d2647312432b4ad1a794dc17b5f0412a" translate="yes" xml:space="preserve">
          <source>The primitive types are serializer's fields that cast your data into Python's
native data-types: &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt;. The &lt;code&gt;CharField&lt;/code&gt;,
&lt;code&gt;IntegerField&lt;/code&gt;, &lt;code&gt;FloatField&lt;/code&gt; and &lt;code&gt;BooleanField&lt;/code&gt; accept the &lt;strong&gt;same&lt;/strong&gt; arguments:</source>
          <target state="translated">基本类型是序列化程序的字段，这些字段将您的数据转换为Python的本机数据类型： &lt;code&gt;str&lt;/code&gt; ， &lt;code&gt;int&lt;/code&gt; ， &lt;code&gt;float&lt;/code&gt; 和 &lt;code&gt;bool&lt;/code&gt; 。该 &lt;code&gt;CharField&lt;/code&gt; ， &lt;code&gt;IntegerField&lt;/code&gt; ， &lt;code&gt;FloatField&lt;/code&gt; 和 &lt;code&gt;BooleanField&lt;/code&gt; 接受&lt;strong&gt;相同的&lt;/strong&gt;参数：</target>
        </trans-unit>
        <trans-unit id="6270988b8056d18a0b530a02af8302ef0da99133" translate="yes" xml:space="preserve">
          <source>The second approach</source>
          <target state="translated">第二种方法</target>
        </trans-unit>
        <trans-unit id="06605b56b8987e967160f4c74f99c030e7d51f02" translate="yes" xml:space="preserve">
          <source>There are some situations in which you'd need a calculated value (from one or multiple attributes),
without polluting your view, nor your model with a new method.
In that case, &lt;code&gt;MethodField&lt;/code&gt; could be very useful. By defining a &lt;code&gt;MethodField&lt;/code&gt;,
you have to define a method in your &lt;code&gt;Serializer&lt;/code&gt;, that receives your object as
input, and has to return the value to be rendered</source>
          <target state="translated">在某些情况下，您需要一个计算值（来自一个或多个属性），而不污染您的视图，也不需要使用新方法的模型。在这种情况下， &lt;code&gt;MethodField&lt;/code&gt; 可能会非常有用。通过定义 &lt;code&gt;MethodField&lt;/code&gt; ，您必须在 &lt;code&gt;Serializer&lt;/code&gt; 中定义一个方法，该方法接收对象作为输入，并必须返回要呈现的值</target>
        </trans-unit>
        <trans-unit id="4156bc7015ebd79f2f504c665715bf26a4fbcdb1" translate="yes" xml:space="preserve">
          <source>This permission is not meant to be used in standalone, because, remember, the &lt;code&gt;@api_view&lt;/code&gt; decorator has already the &lt;code&gt;allowed_methods&lt;/code&gt; argument for this purpose, that returns a &lt;code&gt;405 Method not allowed&lt;/code&gt;.
It has been implemented only to be combined with other permissions in order to build a more complex ones (the next permission on the list is a good example).</source>
          <target state="translated">此权限不能单机使用，因为请记住， &lt;code&gt;@api_view&lt;/code&gt; 装饰器已具有为此目的的 &lt;code&gt;allowed_methods&lt;/code&gt; 参数，该参数返回 &lt;code&gt;405 Method not allowed&lt;/code&gt; 。它仅实现为与其他权限组合在一起才能构建更复杂的权限（列表中的下一个权限就是一个很好的示例）。</target>
        </trans-unit>
        <trans-unit id="7dd59e1070b8babe913baac66be842da9ecd4447" translate="yes" xml:space="preserve">
          <source>Tiny, lightweight, blazing fast REST library for django</source>
          <target state="translated">小巧、轻量级、快速的django REST库。</target>
        </trans-unit>
        <trans-unit id="710726c975cb6318d357467b1e699b924c516b09" translate="yes" xml:space="preserve">
          <source>Users that are &lt;strong&gt;not&lt;/strong&gt; admins</source>
          <target state="translated">&lt;strong&gt;不是&lt;/strong&gt;管理员的用户</target>
        </trans-unit>
        <trans-unit id="a319e2d7cf90eaf77006baba77787129726d620b" translate="yes" xml:space="preserve">
          <source>Users that are staff</source>
          <target state="translated">属于工作人员的用户</target>
        </trans-unit>
        <trans-unit id="1de928532e166bdebe87d23cd0f37f50ad65f87d" translate="yes" xml:space="preserve">
          <source>Using logical operators allows you to combine different &lt;code&gt;Permission&lt;/code&gt; sub-classes, in a simple and powerful way, to obtain more complex and complete permissions.</source>
          <target state="translated">使用逻辑运算符可以使您以简单而强大的方式组合不同的 &lt;code&gt;Permission&lt;/code&gt; 子类，以获得更复杂和完整的权限。</target>
        </trans-unit>
        <trans-unit id="2a14e0d5015f0d6b0edd2814a019ec22929b602d" translate="yes" xml:space="preserve">
          <source>View Permissions</source>
          <target state="translated">查看权限</target>
        </trans-unit>
        <trans-unit id="8e0220c1514ab33686fa56ac5ea8608be03c017c" translate="yes" xml:space="preserve">
          <source>We should have added a condition in &lt;code&gt;HasGmailAddress&lt;/code&gt; to verify if the user is
authenticated (and therefore, &lt;code&gt;IsAuthenticated&lt;/code&gt; permission will be useless).
Otherwise, if an anonymous user requests the view, a &lt;code&gt;AttributeError: 'NoneType' object has no attribute 'email'&lt;/code&gt; exception will be raised.</source>
          <target state="translated">我们应该在 &lt;code&gt;HasGmailAddress&lt;/code&gt; 中添加一个条件，以验证用户是否已通过身份验证（因此 &lt;code&gt;IsAuthenticated&lt;/code&gt; 权限将无用）。否则，如果匿名用户请求该视图， &lt;code&gt;AttributeError: 'NoneType' object has no attribute 'email'&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="8f9519798f83f5d2cc07f5f7eaea83bd3c6381ed" translate="yes" xml:space="preserve">
          <source>While using operators, operands order &lt;strong&gt;matters&lt;/strong&gt;.</source>
          <target state="translated">在使用运算符时，操作数的顺序很&lt;strong&gt;重要&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4efefe2ad6aee9a014cc9a362f02e48d9a065bda" translate="yes" xml:space="preserve">
          <source>You can get the package using &lt;code&gt;pip&lt;/code&gt;, as the following:</source>
          <target state="translated">您可以使用 &lt;code&gt;pip&lt;/code&gt; 获得软件包，如下所示：</target>
        </trans-unit>
        <trans-unit id="f6e6f02d7ef24fa9b39e389957988f6217c78619" translate="yes" xml:space="preserve">
          <source>Your responses are standardized in all your decorated views: always the same message and status code for the same situations.</source>
          <target state="translated">您的回复在您所有的装饰视图中都是标准化的:对于相同的情况,总是有相同的消息和状态代码。</target>
        </trans-unit>
        <trans-unit id="ba4af23e0b41ce26f2df66b8bf83e2cb294465fe" translate="yes" xml:space="preserve">
          <source>Your view's code is lighter (dropping all the useless &lt;code&gt;try/except&lt;/code&gt; clauses).</source>
          <target state="translated">您视图的代码更轻巧（删除所有无用的 &lt;code&gt;try/except&lt;/code&gt; 子句）。</target>
        </trans-unit>
        <trans-unit id="fb349f69741a62b7b30f86ca1bafbd0200f4534a" translate="yes" xml:space="preserve">
          <source>django version 1.10+</source>
          <target state="translated">django 1.10+版本</target>
        </trans-unit>
        <trans-unit id="0be40418142ce90be3e4ae2d805c99301871d70b" translate="yes" xml:space="preserve">
          <source>django's native request object (&lt;code&gt;django.http.request.HttpRequest&lt;/code&gt;). Similar
to every django view's first argument.
More details on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/request-response/&quot;&gt;django's documentation&lt;/a&gt;</source>
          <target state="translated">django的本机请求对象（ &lt;code&gt;django.http.request.HttpRequest&lt;/code&gt; ）。类似于每个django视图的第一个参数。有关&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/request-response/&quot;&gt;Django文档的&lt;/a&gt;更多详细信息</target>
        </trans-unit>
        <trans-unit id="cfc8836b0353670dfe3403f7f63dcb975eba6769" translate="yes" xml:space="preserve">
          <source>django-REST</source>
          <target state="translated">django-REST</target>
        </trans-unit>
        <trans-unit id="6f571455de40c336216696bf7648cb7a562bd48f" translate="yes" xml:space="preserve">
          <source>django-REST deserializers use native django forms fields. &lt;strong&gt;Depending on the
django version you are using&lt;/strong&gt;, you may have access (or not) to some fields, and some of
their attributes. More details on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/&quot;&gt;django's official doc&lt;/a&gt;.</source>
          <target state="translated">django-REST反序列化器使用本机django表单字段。&lt;strong&gt;根据所使用的Django版本&lt;/strong&gt;，您可能可以访问（或不能访问）某些字段及其某些属性。有关&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/&quot;&gt;django官方文档的&lt;/a&gt;更多详细信息。</target>
        </trans-unit>
        <trans-unit id="711eb7f94a755096e6df160e4a787c4e1b355268" translate="yes" xml:space="preserve">
          <source>django-REST is a &lt;strong&gt;tiny&lt;/strong&gt;, &lt;strong&gt;lightweight&lt;/strong&gt;, &lt;strong&gt;easy-to-use&lt;/strong&gt; and &lt;strong&gt;incredibly fast&lt;/strong&gt; library to implement
REST views with django. The whole library's focused in &lt;strong&gt;one&lt;/strong&gt; decorator that transforms the
simple views into REST ones, allowing easy customizations (such as permissions, serializers, etc.)</source>
          <target state="translated">django-REST是一个&lt;strong&gt;小巧&lt;/strong&gt;，&lt;strong&gt;轻巧&lt;/strong&gt;，&lt;strong&gt;易于使用&lt;/strong&gt;且&lt;strong&gt;难以置信的快速&lt;/strong&gt;库，可使用django实现REST视图。整个库集中于&lt;strong&gt;一个&lt;/strong&gt;装饰器，该装饰器将简单的视图转换为REST的视图，从而允许轻松进行自定义（例如权限，序列化程序等）。</target>
        </trans-unit>
        <trans-unit id="fadaccede7972d444c67468c3c77db357b2829aa" translate="yes" xml:space="preserve">
          <source>django-REST library requires:</source>
          <target state="translated">django-REST库需要。</target>
        </trans-unit>
        <trans-unit id="bcf353904ba38bb23de16f25f3b440bc81a34ab2" translate="yes" xml:space="preserve">
          <source>django-REST offers support for nesting deserializers, in order to build more complex ones, in a flexible way and without losing readability.</source>
          <target state="translated">django-REST提供了对嵌套反序列器的支持,以便以灵活的方式构建更复杂的反序列器,同时又不失去可读性。</target>
        </trans-unit>
        <trans-unit id="2daa5a91473171ed15d647ac88c06bb6e7daa64a" translate="yes" xml:space="preserve">
          <source>django-REST provides some constants/enumerations that allow you to avoid using
hard-coded values (&lt;code&gt;str&lt;/code&gt; for HTTP methods, and &lt;code&gt;int&lt;/code&gt; for status codes), and
improve your code readability.</source>
          <target state="translated">django-REST提供了一些常量/枚举，使您可以避免使用硬编码的值（HTTP方法为 &lt;code&gt;str&lt;/code&gt; ，状态代码为 &lt;code&gt;int&lt;/code&gt; ），并提高了代码的可读性。</target>
        </trans-unit>
        <trans-unit id="9d2aa03e78896e151c404722b9b1788baafa5a13" translate="yes" xml:space="preserve">
          <source>django-REST provides you 4 logical operators: &lt;strong&gt;AND&lt;/strong&gt; (&lt;code&gt;&amp;amp;&lt;/code&gt;), &lt;strong&gt;OR&lt;/strong&gt; (&lt;code&gt;|&lt;/code&gt;), &lt;strong&gt;XOR&lt;/strong&gt; (&lt;code&gt;^&lt;/code&gt;) and &lt;strong&gt;NOT&lt;/strong&gt; (&lt;code&gt;~&lt;/code&gt;).</source>
          <target state="translated">django-REST为您提供4种逻辑运算符：&lt;strong&gt;AND&lt;/strong&gt;（ &lt;code&gt;&amp;amp;&lt;/code&gt; ），&lt;strong&gt;OR&lt;/strong&gt;（ &lt;code&gt;|&lt;/code&gt; ），&lt;strong&gt;XOR&lt;/strong&gt;（ &lt;code&gt;^&lt;/code&gt; ）和&lt;strong&gt;NOT&lt;/strong&gt;（ &lt;code&gt;~&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="98fca8b005281373912dbba2eb3739b198c820b0" translate="yes" xml:space="preserve">
          <source>django-REST provides you a way to implement a custom permission that fits your needs.
All you have to do is inherit from &lt;code&gt;django_rest.permissions.BasePermission&lt;/code&gt;, then implement the &lt;code&gt;has_permission()&lt;/code&gt; method.</source>
          <target state="translated">django-REST为您提供了一种实现满足您需求的自定义权限的方法。您要做的就是从 &lt;code&gt;django_rest.permissions.BasePermission&lt;/code&gt; 继承，然后实现 &lt;code&gt;has_permission()&lt;/code&gt; 方法。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
