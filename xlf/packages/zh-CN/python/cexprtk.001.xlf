<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/cexprtk/">
    <body>
      <group id="cexprtk">
        <trans-unit id="faa1f2fba98b7126fa603844aad2f4c22421dba0" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;Symbol_Table&lt;/em&gt;) &lt;code&gt;Symbol_Table&lt;/code&gt; associated with this &lt;code&gt;Expression&lt;/code&gt;.</source>
          <target state="translated">（&lt;em&gt;Symbol_Table&lt;/em&gt;）与此 &lt;code&gt;Expression&lt;/code&gt; 关联的 &lt;code&gt;Symbol_Table&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ee0ce97f8007779087e71db478e952c8e84f136" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;float&lt;/em&gt;) Value resulting from evaluation of expression.</source>
          <target state="translated">（&lt;em&gt;float&lt;/em&gt;）表达式计算得出的值。</target>
        </trans-unit>
        <trans-unit id="060c312531020e268dc7d85734b678d52feca219" translate="yes" xml:space="preserve">
          <source>(&lt;em&gt;float&lt;/em&gt;): Evaluated expression</source>
          <target state="translated">（&lt;em&gt;float&lt;/em&gt;）：求值表达式</target>
        </trans-unit>
        <trans-unit id="fc5e2771691397865fad07aceb10cc02406e8437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERROR_STRING&lt;/code&gt; when &lt;code&gt;HANDLED_FLAG&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; this can be used to describe error condition.</source>
          <target state="translated">&lt;code&gt;ERROR_STRING&lt;/code&gt; 当 &lt;code&gt;HANDLED_FLAG&lt;/code&gt; 为 &lt;code&gt;False&lt;/code&gt; 时为ERROR_STRING，可用于描述错误情况。</target>
        </trans-unit>
        <trans-unit id="7e8ef6025c0b3fafb43c3f43f1f3c384e8a70aa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;False&lt;/code&gt;, flags and error condition, the reason why the unknown symbol could not be resolved by the callback is described by &lt;code&gt;ERROR_STRING&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; _，标志和错误条件 &lt;code&gt;ERROR_STRING&lt;/code&gt; 描述了回调无法解析未知符号的原因。</target>
        </trans-unit>
        <trans-unit id="24263d0b1b18a527588d649761c18689ed57a5b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HANDLED_FLAG&lt;/code&gt; is a boolean:</source>
          <target state="translated">&lt;code&gt;HANDLED_FLAG&lt;/code&gt; 是布尔值：</target>
        </trans-unit>
        <trans-unit id="0caffabede73914e05f9f4b874d9f8292164d12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParseException&lt;/code&gt;: If expression is invalid.</source>
          <target state="translated">&lt;code&gt;ParseException&lt;/code&gt; ：如果表达式无效。</target>
        </trans-unit>
        <trans-unit id="feda492da67c8336e47f6c362ca5845ea7002bcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParseException&lt;/code&gt;: if &lt;em&gt;expression&lt;/em&gt; is invalid.</source>
          <target state="translated">&lt;code&gt;ParseException&lt;/code&gt; ：如果&lt;em&gt;表达式&lt;/em&gt;无效。</target>
        </trans-unit>
        <trans-unit id="2c5756622f1acb8e43a87efa0ac784d6aa35bfcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SYMBOL_VALUE&lt;/code&gt;, floating point value that should be used when resolving missing symbol.</source>
          <target state="translated">&lt;code&gt;SYMBOL_VALUE&lt;/code&gt; ，是解决缺少符号时应使用的浮点值。</target>
        </trans-unit>
        <trans-unit id="f514bdea2f3e53ed2004a30658aabf30cc32c9d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; indicates that callback was able handle the error condition and that &lt;code&gt;SYMBOL_VALUE&lt;/code&gt; should be used for the missing symbol.</source>
          <target state="translated">&lt;code&gt;True&lt;/code&gt; 表示回调能够处理错误情况，并且 &lt;code&gt;SYMBOL_VALUE&lt;/code&gt; 应该用于缺少的符号。</target>
        </trans-unit>
        <trans-unit id="0149c39095598977ba38d55e774b5da7f68fd800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;USR_SYMBOL_TYPE&lt;/code&gt; gives type of symbol (constant or variable) that should be added to the &lt;code&gt;symbol_table&lt;/code&gt; when unkown symbol is resolved. Value should be one of those given in &lt;code&gt;cexprtk.USRSymbolType&lt;/code&gt;. e.g.</source>
          <target state="translated">&lt;code&gt;USR_SYMBOL_TYPE&lt;/code&gt; 给出了解析未知符号时应添加到 &lt;code&gt;symbol_table&lt;/code&gt; 中的符号类型（常量或变量）。值应为 &lt;code&gt;cexprtk.USRSymbolType&lt;/code&gt; 中给出的值之一。例如</target>
        </trans-unit>
        <trans-unit id="9b9cca042b73235b2c34f13ea0b3d227fd19ff4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VARIABLENAME&lt;/code&gt; should be used to look up the desired value in a dictionary.</source>
          <target state="translated">&lt;code&gt;VARIABLENAME&lt;/code&gt; 应该使用VARIABLENAME在字典中查找所需的值。</target>
        </trans-unit>
        <trans-unit id="264ee0ab13c055d3acb93a66b00c63dd6c5a45c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cexprtk&lt;/code&gt; is a cython wrapper around the &quot;&lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK: C++ Mathematical Expression  Toolkit Library &lt;/a&gt;&quot;  by Arash Partow. Using &lt;code&gt;cexprtk&lt;/code&gt; a powerful mathematical expression engine can be incorporated into your python project.</source>
          <target state="translated">&lt;code&gt;cexprtk&lt;/code&gt; 是围绕Arash Partow撰写的&amp;ldquo; &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK：C ++数学表达式工具包库&lt;/a&gt; &amp;rdquo;的cython包装。使用 &lt;code&gt;cexprtk&lt;/code&gt; ,可以将强大的数学表达式引擎集成到您的python项目中。</target>
        </trans-unit>
        <trans-unit id="762762e6b72d7e46ec64ce75963b98a34e90b89b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cexprtk&lt;/code&gt; is released under the same terms as the [ExprTK][] library the &lt;a href=&quot;http://opensource.org/licenses/cpl1.0.php&quot;&gt;Common Public License Version 1.0&lt;/a&gt; (CPL).</source>
          <target state="translated">&lt;code&gt;cexprtk&lt;/code&gt; 以与[ExprTK] []库相同的术语发布，即&lt;a href=&quot;http://opensource.org/licenses/cpl1.0.php&quot;&gt;通用公共许可证版本1.0&lt;/a&gt;（CPL）。</target>
        </trans-unit>
        <trans-unit id="87b94d1fff43e6e1c69689c535c12dd699a4b933" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f_&lt;/code&gt; variables should be multiplied by 1.1.</source>
          <target state="translated">&lt;code&gt;f_&lt;/code&gt; 变量应乘以1.1。</target>
        </trans-unit>
        <trans-unit id="3bbd24309c8196df277063ce2c4c4e1671812ef1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m_&lt;/code&gt; or &lt;code&gt;f_&lt;/code&gt; prefix the  actual variable name (perhaps indicating gender).</source>
          <target state="translated">&lt;code&gt;m_&lt;/code&gt; 或 &lt;code&gt;f_&lt;/code&gt; 作为实际变量名的前缀（可能表示性别）。</target>
        </trans-unit>
        <trans-unit id="87364b854a30250989e5b5cf586344f0c813f49b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m_&lt;/code&gt; variables should be multiplied by 0.8.</source>
          <target state="translated">&lt;code&gt;m_&lt;/code&gt; 变量应乘以0.8。</target>
        </trans-unit>
        <trans-unit id="cc1d7715637acb90668719fc93775cef09e9993f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;expression&lt;/em&gt; (&lt;em&gt;str&lt;/em&gt;) Formula to be evaluated</source>
          <target state="translated">&lt;em&gt;表达式&lt;/em&gt;（&lt;em&gt;str&lt;/em&gt;）要计算的公式</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf5a16b42e8b109efb2abba5661696aaa783641" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Installation requires a compatible C++ compiler to be installed (unless installing from a binary wheel).</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;安装需要安装兼容的C ++编译器（除非从二进制驱动器安装）。</target>
        </trans-unit>
        <trans-unit id="8cf6a6684f50f3ea7a170aa3398f4403873e6036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameters:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;参数：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c947f4da9fa7638d21a4a158190b3a6fe6e48a3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Raises:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;筹款：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e584ca6914ce5e035ff932a639c1bba063960a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Returns:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;返回值：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffe9527b47b5aadf88274c1ea62f497ece58d7c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Problem:&lt;/strong&gt; The following example shows a potential use for the symbol resolver:</source>
          <target state="translated">&lt;strong&gt;问题：&lt;/strong&gt;以下示例显示了符号解析器的潜在用途：</target>
        </trans-unit>
        <trans-unit id="3dd514fff89b3bc71a0a2a48f2e39e39f3d69f0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Solution:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;解决方案：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba0b3baef4b4a7d8215c2361603b3bf5309bc7c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add_constants&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;) If &lt;code&gt;True&lt;/code&gt;, add the standard constants &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;inf&lt;/code&gt;, &lt;code&gt;epsilon&lt;/code&gt; to the 'constants' dictionary before populating the &lt;code&gt;Symbol_Table&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;add_constants&lt;/strong&gt;（&lt;em&gt;bool&lt;/em&gt;）如果为 &lt;code&gt;True&lt;/code&gt; ，则在填充 &lt;code&gt;Symbol_Table&lt;/code&gt; 之前，将标准常数 &lt;code&gt;pi&lt;/code&gt; ， &lt;code&gt;inf&lt;/code&gt; ， &lt;code&gt;epsilon&lt;/code&gt; 添加到&amp;ldquo; constants&amp;rdquo;字典中</target>
        </trans-unit>
        <trans-unit id="e3abeed0be789a1c717f2b7201fefd5f4ecd2069" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;constants&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Dictionary containing values that should be added to &lt;code&gt;Symbol_Table&lt;/code&gt; as constants. These can be used a variables within expressions but their values cannot be updated following &lt;code&gt;Symbol_Table&lt;/code&gt; instantiation.</source>
          <target state="translated">&lt;strong&gt;常量&lt;/strong&gt;（&lt;em&gt;dict&lt;/em&gt;）包含应作为常量添加到 &lt;code&gt;Symbol_Table&lt;/code&gt; 的值的字典。可以在表达式 &lt;code&gt;Symbol_Table&lt;/code&gt; 它们用作变量，但是在Symbol_Table实例化之后不能更新它们的值。</target>
        </trans-unit>
        <trans-unit id="4c367d28f4c874179051dfa8e18c311267e5c64b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expression&lt;/strong&gt; (&lt;em&gt;str&lt;/em&gt;) Expression to be evaluated.</source>
          <target state="translated">&lt;strong&gt;expression&lt;/strong&gt;（&lt;em&gt;str&lt;/em&gt;）要评估的表达式。</target>
        </trans-unit>
        <trans-unit id="3a6f7dd1a08db834cd3e2eb69564871822010d9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expression&lt;/strong&gt; (&lt;em&gt;str&lt;/em&gt;) String giving expression to be calculated.</source>
          <target state="translated">&lt;strong&gt;expression&lt;/strong&gt;（&lt;em&gt;str&lt;/em&gt;）给出要计算的表达式的字符串。</target>
        </trans-unit>
        <trans-unit id="5ab56d155d457c2e4449d984749cea53be7f3248" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;functions&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Dictionary containing custom functions to be made available to expressions. Dictionary keys specify function names and values should be functions.</source>
          <target state="translated">&lt;strong&gt;functions&lt;/strong&gt;（&lt;em&gt;dict&lt;/em&gt;）包含自定义函数的字典，可用于表达式。字典键指定函数名称，值应为函数。</target>
        </trans-unit>
        <trans-unit id="88cd664a01de6f852fd90344abff4d61e55c4f86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;symbol_table&lt;/strong&gt; (&lt;em&gt;Symbol_Table&lt;/em&gt;) Object defining variables and constants.</source>
          <target state="translated">&lt;strong&gt;symbol_table&lt;/strong&gt;（&lt;em&gt;Symbol_Table&lt;/em&gt;）定义变量和常量的对象。</target>
        </trans-unit>
        <trans-unit id="104ffb159674493086ce38158c907e7264b5a334" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unknown_symbol_resolver_callback&lt;/strong&gt; (&lt;em&gt;callable&lt;/em&gt;)  See description above.</source>
          <target state="translated">&lt;strong&gt;unknown_symbol_resolver_callback&lt;/strong&gt;（&lt;em&gt;callable&lt;/em&gt;）参见上面的描述。</target>
        </trans-unit>
        <trans-unit id="f723fc68c18689b0e93f9971b2ee5f38d916c940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;variables&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Dictionary containing variable name, variable value pairs to be used in expression.</source>
          <target state="translated">&lt;strong&gt;变量&lt;/strong&gt;（&lt;em&gt;dict&lt;/em&gt;）包含变量名，表达式中要使用的变量值对的字典。</target>
        </trans-unit>
        <trans-unit id="3a4354266b7b341ed57e737cc58c9d6899effd41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;variables&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) Mapping between variable name and initial variable value.</source>
          <target state="translated">&lt;strong&gt;变量&lt;/strong&gt;（&lt;em&gt;dict&lt;/em&gt;）变量名称和初始变量值之间的映射。</target>
        </trans-unit>
        <trans-unit id="fee8c05def1e111e796208bd0fda24ff61d0979b" translate="yes" xml:space="preserve">
          <source>A callback can be passed to the &lt;code&gt;Expression&lt;/code&gt; constructor through the &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; parameter. This callback is invoked during expression parsing when a variable or constant is encountered that isn't in the &lt;code&gt;Symbol_Table&lt;/code&gt; associated with the &lt;code&gt;Expression&lt;/code&gt;.</source>
          <target state="translated">可以通过 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 参数将回调传递给 &lt;code&gt;Expression&lt;/code&gt; 构造函数。当遇到与 &lt;code&gt;Expression&lt;/code&gt; 关联的 &lt;code&gt;Symbol_Table&lt;/code&gt; 中没有的变量或常量时，将在表达式解析期间调用此回调。</target>
        </trans-unit>
        <trans-unit id="b1f1d3614d5269c38771c64bddc3e00e0aa67f4c" translate="yes" xml:space="preserve">
          <source>A suitable function exists in the &lt;code&gt;random&lt;/code&gt; module, namely &lt;code&gt;random.uniform&lt;/code&gt;. As this is an instance method it needs to be wrapped in function:</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; 模块中存在一个合适的函数，即 &lt;code&gt;random.uniform&lt;/code&gt; 。由于这是一个实例方法，因此需要将其包装在函数中：</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API参考</target>
        </trans-unit>
        <trans-unit id="f22aee4047706265d2c4aa8df189e1ab80ceb5da" translate="yes" xml:space="preserve">
          <source>All that remains is to register the callback with an instance of &lt;code&gt;Expression&lt;/code&gt; and to evaluate an expression. The expression to be evaluated is:</source>
          <target state="translated">剩下的就是向 &lt;code&gt;Expression&lt;/code&gt; 实例注册回调并评估表达式。要评估的表达式是：</target>
        </trans-unit>
        <trans-unit id="60676e43c115f1e7c44ed4bb34d016393c828c69" translate="yes" xml:space="preserve">
          <source>An expression contains variables of the form &lt;code&gt;m_VARIABLENAME&lt;/code&gt; and &lt;code&gt;f_VARIABLENAME&lt;/code&gt;.</source>
          <target state="translated">表达式包含形式为 &lt;code&gt;m_VARIABLENAME&lt;/code&gt; 和 &lt;code&gt;f_VARIABLENAME&lt;/code&gt; 的变量。</target>
        </trans-unit>
        <trans-unit id="ce1b0bf3d36e9821cee08cb2e1dc4ca750c65510" translate="yes" xml:space="preserve">
          <source>An expression will be defined to calculate the circumference of circle, this will then be re-used to calculate the value for several different radii.</source>
          <target state="translated">将定义一个表达式来计算圆的周长,然后这个表达式将被重新用于计算几个不同半径的值。</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">作者</target>
        </trans-unit>
        <trans-unit id="04f7a401af0af2cc5c6bf955d1407d15f1874fc1" translate="yes" xml:space="preserve">
          <source>CONSTANT</source>
          <target state="translated">恒定</target>
        </trans-unit>
        <trans-unit id="ac74af1d715bbf38c95640717fa5f2a93319ba8c" translate="yes" xml:space="preserve">
          <source>Check that expression can be parsed. If successful do nothing, if unsuccessful raise &lt;code&gt;ParseException&lt;/code&gt;.</source>
          <target state="translated">检查表达式是否可以解析。如果成功，则不执行任何操作；如果失败，则引发 &lt;code&gt;ParseException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9382448b2c3687cbaf87fa5d8e26483be9bea08" translate="yes" xml:space="preserve">
          <source>Class Reference</source>
          <target state="translated">类别参考</target>
        </trans-unit>
        <trans-unit id="ecb43daaab93553aeeedb56fffc606528209e260" translate="yes" xml:space="preserve">
          <source>Class for providing variable and constant values to &lt;code&gt;Expression&lt;/code&gt; instances.</source>
          <target state="translated">用于向 &lt;code&gt;Expression&lt;/code&gt; 实例提供变量和常量值的类。</target>
        </trans-unit>
        <trans-unit id="859caffa8d0a0e4911ccf106833a523e8228b761" translate="yes" xml:space="preserve">
          <source>Class representing mathematical expression.</source>
          <target state="translated">代表数学表达式的类。</target>
        </trans-unit>
        <trans-unit id="8a4f3e57af370ff327a5eeda6df1f9789671c329" translate="yes" xml:space="preserve">
          <source>Cython wrapper by Michael Rushton (&lt;a href=&quot;mailto:m.j.d.rushton@gmail.com&quot;&gt;m.j.d.rushton@gmail.com&lt;/a&gt;), although most credit should go to Arash Partow for creating the underlying &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK&lt;/a&gt; library.</source>
          <target state="translated">Cython包装器由Michael Rushton（&lt;a href=&quot;mailto:m.j.d.rushton@gmail.com&quot;&gt;mjdrushton@gmail.com&lt;/a&gt;）提供，尽管大多数功劳应该归功于Arash Partow来创建基础的&lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;ExprTK&lt;/a&gt;库。</target>
        </trans-unit>
        <trans-unit id="ef508744ebc192e88f31b180a2418131be70c484" translate="yes" xml:space="preserve">
          <source>Defines constant values used to determine symbol type returned by &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; (see &lt;code&gt;Expression&lt;/code&gt; constructor documentation for more).</source>
          <target state="translated">定义用于确定 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 返回的符号类型的常数值（有关更多信息，请参见 &lt;code&gt;Expression&lt;/code&gt; 构造函数文档）。</target>
        </trans-unit>
        <trans-unit id="2fbf56cb00436cdde9993ed391b56784ca50c293" translate="yes" xml:space="preserve">
          <source>Defining unknown symbol-resolver:</source>
          <target state="translated">定义未知符号解析器。</target>
        </trans-unit>
        <trans-unit id="c2f61c7d48e94ecfd0b73583aa680a2bb77e955d" translate="yes" xml:space="preserve">
          <source>Dictionary like giving function stored in this &lt;code&gt;Symbol_Table&lt;/code&gt;. Keys are function names (as used in &lt;code&gt;Expression&lt;/code&gt;) and these map to python callable objects including functions, functors, and &lt;code&gt;functools.partial&lt;/code&gt;.</source>
          <target state="translated">像给定功能的字典存储在此 &lt;code&gt;Symbol_Table&lt;/code&gt; 中。键是函数名（在 &lt;code&gt;Expression&lt;/code&gt; 中使用），它们映射到python可调用对象，包括函数，函子和 &lt;code&gt;functools.partial&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="321fc6b599cb093206564a99dea07ab9048ee7ec" translate="yes" xml:space="preserve">
          <source>Dictionary like giving variables stored in this &lt;code&gt;Symbol_Table&lt;/code&gt;. Keys are variables names and these map to variable values.</source>
          <target state="translated">字典就像给出存储在此 &lt;code&gt;Symbol_Table&lt;/code&gt; 中的变量一样。键是变量名，它们映射到变量值。</target>
        </trans-unit>
        <trans-unit id="83137b095f2e35e48bf6f2f05df8d0f58ea05cd5" translate="yes" xml:space="preserve">
          <source>Equivalent to calling &lt;code&gt;value()&lt;/code&gt; method.</source>
          <target state="translated">等效于调用 &lt;code&gt;value()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="82f848ee84d0d9f8d370da94bde1355f6515f368" translate="yes" xml:space="preserve">
          <source>Evaluate a mathematical formula using the exprtk library and return result.</source>
          <target state="translated">使用exprtk库评估一个数学公式并返回结果。</target>
        </trans-unit>
        <trans-unit id="56f7bdc946917219ef0d5e163c291f3ccceff92e" translate="yes" xml:space="preserve">
          <source>Evaluate expression using variable values currently set within associated &lt;code&gt;Symbol_Table&lt;/code&gt;</source>
          <target state="translated">使用当前在关联 &lt;code&gt;Symbol_Table&lt;/code&gt; 中设置的变量值评估表达式</target>
        </trans-unit>
        <trans-unit id="cc3e53a68a42db96f7414d8a73eba8908f6b1073" translate="yes" xml:space="preserve">
          <source>Example: Defining an unknown symbol resolver</source>
          <target state="translated">例子。定义未知符号解析器</target>
        </trans-unit>
        <trans-unit id="2cf763560fc9ec7fd44b4b0a17b8cd9a43ecf64c" translate="yes" xml:space="preserve">
          <source>Example: Defining custom functions</source>
          <target state="translated">例子:定义自定义功能</target>
        </trans-unit>
        <trans-unit id="3f7fffba7503af04ee38af3badd4b45f5563e629" translate="yes" xml:space="preserve">
          <source>Example: Evaluate a simple equation</source>
          <target state="translated">例题。评估一个简单的方程</target>
        </trans-unit>
        <trans-unit id="d6248355916ac3e8f1df4d9a16a774d3be8f6a38" translate="yes" xml:space="preserve">
          <source>Example: Re-using expressions</source>
          <target state="translated">例子。重复使用表达式</target>
        </trans-unit>
        <trans-unit id="d3f2c8813cf117674c2af4e5abcc3c50a9be99c8" translate="yes" xml:space="preserve">
          <source>Example: Using Variables</source>
          <target state="translated">例子:使用变量</target>
        </trans-unit>
        <trans-unit id="8634f427ba210d34fb3366f9df8e78b11037dbae" translate="yes" xml:space="preserve">
          <source>First a &lt;code&gt;Symbol_Table&lt;/code&gt; is created containing a variable &lt;code&gt;r&lt;/code&gt; (for radius), it is also populated with some useful constants such as &amp;pi;.</source>
          <target state="translated">首先创建一个 &lt;code&gt;Symbol_Table&lt;/code&gt; ，其中包含一个变量 &lt;code&gt;r&lt;/code&gt; （用于半径），并且还填充了一些有用的常量，例如&amp;pi;。</target>
        </trans-unit>
        <trans-unit id="990de414c75ca00914d93228629a8a05c7a14f8c" translate="yes" xml:space="preserve">
          <source>First the &lt;code&gt;VARIABLENAME&lt;/code&gt; dictionary is defined:</source>
          <target state="translated">首先，定义 &lt;code&gt;VARIABLENAME&lt;/code&gt; 字典：</target>
        </trans-unit>
        <trans-unit id="bab5ff91e28f59413e2565d9874b6b1f7dfb71bc" translate="yes" xml:space="preserve">
          <source>Following instantiation, the expression is evaluated calling the expression or invoking its &lt;code&gt;value()&lt;/code&gt; method.</source>
          <target state="translated">实例化之后，对表达式进行求值，以调用该表达式或调用其 &lt;code&gt;value()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="9e0f16ce0361e0e03beeb215729bfd1aba357ff3" translate="yes" xml:space="preserve">
          <source>For information about expressions supported by &lt;code&gt;cexprtk&lt;/code&gt; please refer to the original C++ [ExprTK][] documentation:</source>
          <target state="translated">有关 &lt;code&gt;cexprtk&lt;/code&gt; 支持的表达式的信息，请参考原始的C ++ [ExprTK] []文档：</target>
        </trans-unit>
        <trans-unit id="6beaad2db3cb298c0cb3ec43368a06d639fb2920" translate="yes" xml:space="preserve">
          <source>For more information about supported functions and syntax see the
&lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;exprtk C++ library website&lt;/a&gt;.</source>
          <target state="translated">有关受支持的函数和语法的更多信息，请参见 &lt;a href=&quot;http://www.partow.net/programming/exprtk/index.html&quot;&gt;exprtk C ++库网站&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="226ea5d89972fde4694f100a4ce5ec2ca676fe30" translate="yes" xml:space="preserve">
          <source>Instantiate &lt;code&gt;Expression&lt;/code&gt; from a text string giving formula and &lt;code&gt;Symbol_Table&lt;/code&gt;
instance encapsulating variables and constants used by the expression.</source>
          <target state="translated">从文本字符串实例化 &lt;code&gt;Expression&lt;/code&gt; ，该字符串给出公式和 &lt;code&gt;Symbol_Table&lt;/code&gt; 实例，该实例封装了表达式使用的变量和常量。</target>
        </trans-unit>
        <trans-unit id="e137e6354673fa6383ebbe8c63676af062678404" translate="yes" xml:space="preserve">
          <source>Instantiate &lt;code&gt;Symbol_Table&lt;/code&gt; defining variables and constants for use with &lt;code&gt;Expression&lt;/code&gt; class.</source>
          <target state="translated">实例化 &lt;code&gt;Symbol_Table&lt;/code&gt; 定义与 &lt;code&gt;Expression&lt;/code&gt; 类一起使用的变量和常量。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="e327ca93ec46c6ee901ab683fbceccdbe0205d49" translate="yes" xml:space="preserve">
          <source>Mathematical expression parser: cython wrapper around the 'C++ Mathematical Expression Toolkit Library'</source>
          <target state="translated">数学表达式解析器:围绕 &quot;C++数学表达式工具包库 &quot;的cython封装器。</target>
        </trans-unit>
        <trans-unit id="701f93f9254956dd7e0b2eaaea69954f223bcba2" translate="yes" xml:space="preserve">
          <source>Now an instance of &lt;code&gt;Expression&lt;/code&gt; is created, defining our function:</source>
          <target state="translated">现在创建了 &lt;code&gt;Expression&lt;/code&gt; 的实例，定义了我们的功能：</target>
        </trans-unit>
        <trans-unit id="9c47e9f0eca733caf24267fc3c24e0eac290d681" translate="yes" xml:space="preserve">
          <source>Now the callback is defined. This takes a single argument, &lt;em&gt;symbol&lt;/em&gt;, which gives the name of the missing variable found in the expression:</source>
          <target state="translated">现在定义了回调。这需要一个参数&lt;em&gt;symbol&lt;/em&gt;，它给出在表达式中找到的缺失变量的名称：</target>
        </trans-unit>
        <trans-unit id="6ef5b7cab692d3952ac0b30576e84c79568ade10" translate="yes" xml:space="preserve">
          <source>Now update the radius to a value of 3.0 using the dictionary like object returned by the &lt;code&gt;Symbol_Table&lt;/code&gt;'s &lt;code&gt;.variables&lt;/code&gt; property:</source>
          <target state="translated">现在，使用 &lt;code&gt;Symbol_Table&lt;/code&gt; 的 &lt;code&gt;.variables&lt;/code&gt; 属性返回的字典之类的对象，将半径更新为3.0 。</target>
        </trans-unit>
        <trans-unit id="c8ecbd5cbf31074819dbccd172962688f8d6918e" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;rnd&lt;/code&gt; function now needs to be registered with a &lt;code&gt;Symbol_Table&lt;/code&gt;:</source>
          <target state="translated">现在，我们的 &lt;code&gt;rnd&lt;/code&gt; 函数需要使用 &lt;code&gt;Symbol_Table&lt;/code&gt; 注册：</target>
        </trans-unit>
        <trans-unit id="b7e9f6b2379e2455d98d9946be25019b23b0576f" translate="yes" xml:space="preserve">
          <source>Property giving constants stored in this &lt;code&gt;Symbol_Table&lt;/code&gt;.</source>
          <target state="translated">给出存储在此 &lt;code&gt;Symbol_Table&lt;/code&gt; 中的常量的属性。</target>
        </trans-unit>
        <trans-unit id="76367fa8cea82ae1d8d92dfba880230b1087c672" translate="yes" xml:space="preserve">
          <source>Python functions can be registered with a &lt;code&gt;Symbol_Table&lt;/code&gt; then used in an &lt;code&gt;Expression&lt;/code&gt;. In this example a custom function will be defined which produces a random number within a given range.</source>
          <target state="translated">可以向 &lt;code&gt;Symbol_Table&lt;/code&gt; 注册Python函数，然后在 &lt;code&gt;Expression&lt;/code&gt; 中使用它。在此示例中，将定义一个自定义函数，该函数将生成给定范围内的随机数。</target>
        </trans-unit>
        <trans-unit id="8886e22c39f8000e78c4601c8cfba518d9af8d23" translate="yes" xml:space="preserve">
          <source>Read only property that returns &lt;code&gt;Symbol_Table&lt;/code&gt; instance associated with this expression.</source>
          <target state="translated">只读属性，该属性返回与此表达式关联的 &lt;code&gt;Symbol_Table&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="aadec5e3c548a737f3450a15497da45e6009caab" translate="yes" xml:space="preserve">
          <source>Read-only dictionary like object mapping constant names stored in &lt;code&gt;Symbol_Table&lt;/code&gt; to their values.</source>
          <target state="translated">只读字典，例如将存储在 &lt;code&gt;Symbol_Table&lt;/code&gt; 中的常量名称映射到其值的对象。</target>
        </trans-unit>
        <trans-unit id="2ce7f5ce5f0e60bd549cbba6436bde72e63d32cc" translate="yes" xml:space="preserve">
          <source>Returns dictionary like object containing custom python functions to use in expressions.</source>
          <target state="translated">返回类似字典的对象,包含自定义的python函数,用于表达式中。</target>
        </trans-unit>
        <trans-unit id="8f8c6dedd55d7e05261e23b73295f3ccb871b4ae" translate="yes" xml:space="preserve">
          <source>Returns dictionary like object containing variable values. &lt;code&gt;Symbol_Table&lt;/code&gt; values can be updated through this object.</source>
          <target state="translated">返回字典，如包含变量值的对象。可以通过此对象更新 &lt;code&gt;Symbol_Table&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="c28d59a9d4b0247e9e3da20629ceb57e643a375f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol_Table&lt;/code&gt; was initialised with &lt;code&gt;r=1&lt;/code&gt;, the expression can be evaluated for this radius simply by calling it:</source>
          <target state="translated">所述 &lt;code&gt;Symbol_Table&lt;/code&gt; 用初始化 &lt;code&gt;r=1&lt;/code&gt; ，则表达式可以为这个半径进行评估简单地通过调用它：</target>
        </trans-unit>
        <trans-unit id="56bb7d1bb7b285d7d8ef2db34649f9053d602daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;functions&lt;/code&gt; property of the &lt;code&gt;Symbol_Table&lt;/code&gt; is accessed like a dictionary. In the preceding code snippet, a symbol table is created and then the &lt;code&gt;rnd&lt;/code&gt; function is assigned to the &lt;code&gt;rand&lt;/code&gt; key. This key is used as the function's name in a &lt;code&gt;cexprtk&lt;/code&gt; expression. The key cannot be the same as an existing variable, constant or reserved function name.</source>
          <target state="translated">可以像字典一样访问 &lt;code&gt;Symbol_Table&lt;/code&gt; 的 &lt;code&gt;functions&lt;/code&gt; 属性。在前面的代码片段中，创建了一个符号表，然后将 &lt;code&gt;rnd&lt;/code&gt; 函数分配给 &lt;code&gt;rand&lt;/code&gt; 键。该键在 &lt;code&gt;cexprtk&lt;/code&gt; 表达式中用作函数名称。键不能与现有变量，常量或保留的函数名相同。</target>
        </trans-unit>
        <trans-unit id="6c2007ad75cfdfd9c2116c2cc450710e02f191c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rand&lt;/code&gt; function will now be used in an expression. This expression chooses a random number between 5 and 8 and then multiplies it by 10. The followin snippet shows the instantiation of the &lt;code&gt;Expression&lt;/code&gt; which is then evaluated a few times. You will probably get different numbers out of your expression than shown, this is because your random number generator will have been initialised with a different seed than used in the example.</source>
          <target state="translated">该 &lt;code&gt;rand&lt;/code&gt; 功能现在将在表达式中使用。该表达式选择5到8之间的一个随机数，然后将其乘以10。followingin片段显示了 &lt;code&gt;Expression&lt;/code&gt; 的实例化，然后对它进行了几次评估。您可能会从表达式中得到与所示不同的数字，这是因为您的随机数生成器将使用与示例中使用的种子不同的种子进行初始化。</target>
        </trans-unit>
        <trans-unit id="35d6d8c0f67d686c61d2d786e7d29c03fda773f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; argument  to the &lt;code&gt;Expression&lt;/code&gt;
constructor accepts a callable which is invoked  whenever a symbol (i.e. a
variable or a constant), is not found in the &lt;code&gt;Symbol_Table&lt;/code&gt; given by the
&lt;code&gt;symbol_table&lt;/code&gt; argument. The &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; can be
used to provide a value for the missing value or to set an error condition.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; 构造函数的 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 参数接受一个callable，只要在 &lt;code&gt;symbol_table&lt;/code&gt; 参数给出 的 &lt;code&gt;Symbol_Table&lt;/code&gt; 中找不到符号（即变量或常量），就会调用该callable 。的 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 可以用来提供用于缺失值的值，或者设置一个错误条件。</target>
        </trans-unit>
        <trans-unit id="b9099a9dd131d0ad46ccafeb9e14ceba01a2f14f" translate="yes" xml:space="preserve">
          <source>The callable should have following signature:</source>
          <target state="translated">可调用应该有以下签名。</target>
        </trans-unit>
        <trans-unit id="fb0fad98c4930b3dd007b57aa61713289cf955a2" translate="yes" xml:space="preserve">
          <source>The callable should return a tuple of the form:</source>
          <target state="translated">可调用应该返回一个形式的元组。</target>
        </trans-unit>
        <trans-unit id="f15452f8af98b5c4ed431a9573fbf951e18702eb" translate="yes" xml:space="preserve">
          <source>The callback can be used to provide some logic that leads to a new symbol being registered or for an error condition to be flagged.</source>
          <target state="translated">该回调可用于提供一些逻辑,导致一个新的符号被注册或错误条件被标记。</target>
        </trans-unit>
        <trans-unit id="a6fdb0024909057b0489298d4422efee1d746992" translate="yes" xml:space="preserve">
          <source>The dictionary value of &lt;code&gt;VARIABLENAME&lt;/code&gt; should then be weighted according to its prefix:</source>
          <target state="translated">然后应根据其前缀对 &lt;code&gt;VARIABLENAME&lt;/code&gt; 的字典值进行加权：</target>
        </trans-unit>
        <trans-unit id="754d099be65ba03ae895d981645baac769104f44" translate="yes" xml:space="preserve">
          <source>The following code would be used:</source>
          <target state="translated">将使用以下代码:</target>
        </trans-unit>
        <trans-unit id="81d6b5f8dc6501a7f8b74774e9376b5ea791864b" translate="yes" xml:space="preserve">
          <source>The following examples show the major features of &lt;code&gt;cexprtk&lt;/code&gt;.</source>
          <target state="translated">以下示例显示了 &lt;code&gt;cexprtk&lt;/code&gt; 的主要功能。</target>
        </trans-unit>
        <trans-unit id="c965204ad0224f33e50424441e53ec97eb8866a0" translate="yes" xml:space="preserve">
          <source>The following shows how the arithmetic expression &lt;code&gt;(5+5) * 23&lt;/code&gt; can be evaluated:</source>
          <target state="translated">下面显示了如何计算算术表达式 &lt;code&gt;(5+5) * 23&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8eff634efd6ced9470dfe5e44c3060492c70e21f" translate="yes" xml:space="preserve">
          <source>The latest version of &lt;code&gt;cexprtk&lt;/code&gt; can be installed using &lt;a href=&quot;http://www.pip-installer.org/en/latest/index.html&quot;&gt;pip&lt;/a&gt; :</source>
          <target state="translated">可以使用&lt;a href=&quot;http://www.pip-installer.org/en/latest/index.html&quot;&gt;pip&lt;/a&gt;安装最新版本的 &lt;code&gt;cexprtk&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e06cd27df47e07a46b83684a7668c57566ed6af5" translate="yes" xml:space="preserve">
          <source>The variable values used by the Expression can be modified through the &lt;code&gt;variables&lt;/code&gt; property of the &lt;code&gt;Symbol_Table&lt;/code&gt; instance associated with the expression. The &lt;code&gt;Symbol_Table&lt;/code&gt; can be accessed using the &lt;code&gt;Expression.symbol_table&lt;/code&gt; property.</source>
          <target state="translated">可以通过与表达式关联的 &lt;code&gt;Symbol_Table&lt;/code&gt; 实例的 &lt;code&gt;variables&lt;/code&gt; 属性来修改Expression使用的变量值。该 &lt;code&gt;Symbol_Table&lt;/code&gt; 可以通过访问 &lt;code&gt;Expression.symbol_table&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="a587ad68c586cf0341f243680f35243fffe7c027" translate="yes" xml:space="preserve">
          <source>This should give a value of &lt;code&gt;(0.8*82) - (1.1*76) = -18&lt;/code&gt;</source>
          <target state="translated">值应为 &lt;code&gt;(0.8*82) - (1.1*76) = -18&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80a301589c8f919b292270ad98c09beb32fc18df" translate="yes" xml:space="preserve">
          <source>To instantiate a &lt;code&gt;Symbol_Table&lt;/code&gt; with:</source>
          <target state="translated">要实例化 &lt;code&gt;Symbol_Table&lt;/code&gt; ，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="773f6ff3cdef6ef6e792726c788e19f9169103d9" translate="yes" xml:space="preserve">
          <source>Update the value of &lt;code&gt;x&lt;/code&gt; in the symbol table and re-evaluate the expression:</source>
          <target state="translated">更新符号表中的 &lt;code&gt;x&lt;/code&gt; 值，然后重新计算表达式：</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="8bf056ede57539fe7ab422f88b516c58223a0adf" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
          <target state="translated">实用功能</target>
        </trans-unit>
        <trans-unit id="b58c19038082c2364b9c1548d2e1a4ec413831d4" translate="yes" xml:space="preserve">
          <source>VARIABLE</source>
          <target state="translated">变量</target>
        </trans-unit>
        <trans-unit id="162cca68b743ad213088460d60bb46c2b0f0fe17" translate="yes" xml:space="preserve">
          <source>Value that should be returned by an &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; to define a constant.</source>
          <target state="translated">应该由 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 返回以定义常量的值。</target>
        </trans-unit>
        <trans-unit id="5e26db07bd7b6c2ed9a936047791a9dd266719a3" translate="yes" xml:space="preserve">
          <source>Value that should be returned by an &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; to define a variable.</source>
          <target state="translated">应该由 &lt;code&gt;unknown_symbol_resolver_callback&lt;/code&gt; 返回以定义变量的值。</target>
        </trans-unit>
        <trans-unit id="a74ad009f177e10e62b0a58bbacbeba1c77a0920" translate="yes" xml:space="preserve">
          <source>Variables can be used within expressions by passing a dictionary to the &lt;code&gt;evaluate_expression&lt;/code&gt; function. This maps variable names to their values. The expression from the previous example can be re-calculated using variable values:</source>
          <target state="translated">变量可以在表达式中通过使辞典的使用 &lt;code&gt;evaluate_expression&lt;/code&gt; 功能。这会将变量名称映射到其值。可以使用变量值重新计算上一示例中的表达式：</target>
        </trans-unit>
        <trans-unit id="161f93b7f39df5db7e15bd2f4f8a3fb7443abc60" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;evaluate_expression()&lt;/code&gt; function, the mathematical expression is parsed, evaluated and then immediately thrown away. This example shows how to re-use an &lt;code&gt;Expression&lt;/code&gt; for multiple evaluations.</source>
          <target state="translated">当使用 &lt;code&gt;evaluate_expression()&lt;/code&gt; 函数时，将对数学表达式进行解析，求值，然后立即将其丢弃。本示例说明如何将 &lt;code&gt;Expression&lt;/code&gt; 重新用于多个评估。</target>
        </trans-unit>
        <trans-unit id="0bf4a50120c6e995fa74f37f5b5dcaf4090e4c2a" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;symbol_name&lt;/code&gt; is a string identifying the missing symbol.</source>
          <target state="translated">其中 &lt;code&gt;symbol_name&lt;/code&gt; 是标识丢失符号的字符串。</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">哪里:</target>
        </trans-unit>
        <trans-unit id="d82616d864a123021b62bd770b7d5f69c5d7205e" translate="yes" xml:space="preserve">
          <source>cexprtk: Mathematical Expression Parsing and Evaluation in Python</source>
          <target state="translated">cexprtk:在Python中进行数学表达式的解析和评估。</target>
        </trans-unit>
        <trans-unit id="bb1e3fdb2f426b9ccbd814dd33abc5780a9388b1" translate="yes" xml:space="preserve">
          <source>class Expression:</source>
          <target state="translated">类Expression。</target>
        </trans-unit>
        <trans-unit id="ff3ee5ed18dce0d440cab3b92b33e10cf9581054" translate="yes" xml:space="preserve">
          <source>class Symbol_Table:</source>
          <target state="translated">Class Symbol_Table:</target>
        </trans-unit>
        <trans-unit id="5921b716da16ec490c50abea1fef9eb6568a8020" translate="yes" xml:space="preserve">
          <source>class USRSymbolType:</source>
          <target state="translated">类USRSymbolType。</target>
        </trans-unit>
        <trans-unit id="a35e8df8e67845a52974a31c97d74ab8a195e3da" translate="yes" xml:space="preserve">
          <source>constants</source>
          <target state="translated">常量</target>
        </trans-unit>
        <trans-unit id="d6350a477d4a2dcb68cdb7b58ab0ff6ff0573b99" translate="yes" xml:space="preserve">
          <source>def &lt;strong&gt;call&lt;/strong&gt;(self):</source>
          <target state="translated">def &lt;strong&gt;电话&lt;/strong&gt;（个体经营）：</target>
        </trans-unit>
        <trans-unit id="31c1f46ceab294568908012235e1a6cf3a07e5b8" translate="yes" xml:space="preserve">
          <source>def &lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;symbol_table&lt;/em&gt;, &lt;em&gt;unknown_symbol_resolver_callback&lt;/em&gt; = None):</source>
          <target state="translated">def &lt;strong&gt;init&lt;/strong&gt;（self，&lt;em&gt;expression&lt;/em&gt;，&lt;em&gt;symbol_table&lt;/em&gt;，&lt;em&gt;unknown_symbol_resolver_callback&lt;/em&gt; = None）：</target>
        </trans-unit>
        <trans-unit id="0aa5e582b2420cbb8cf7e56f87c61a6ee3121948" translate="yes" xml:space="preserve">
          <source>def &lt;strong&gt;init&lt;/strong&gt;(self, &lt;em&gt;variables&lt;/em&gt;, &lt;em&gt;constants&lt;/em&gt; = {}, &lt;em&gt;add_constants&lt;/em&gt; = False, functions = {}):</source>
          <target state="translated">def &lt;strong&gt;init&lt;/strong&gt;（自我，&lt;em&gt;变量&lt;/em&gt;，&lt;em&gt;常量&lt;/em&gt; = {}，&lt;em&gt;add_constants&lt;/em&gt; = False，函数= {}）：</target>
        </trans-unit>
        <trans-unit id="f589c51c25ce78175feb76e9874ed17cccab6df1" translate="yes" xml:space="preserve">
          <source>def check_expression (&lt;em&gt;expression&lt;/em&gt;)</source>
          <target state="translated">def check_expression（&lt;em&gt;表达式&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="4d19995f47176af729694f365be5f0aecb053009" translate="yes" xml:space="preserve">
          <source>def evaluate_expression (&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;variables&lt;/em&gt;)</source>
          <target state="translated">defvaluate_expression（&lt;em&gt;表达式&lt;/em&gt;，&lt;em&gt;变量&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="9faa101b109bbcb0a3d1a221c31501bd38bf41d8" translate="yes" xml:space="preserve">
          <source>def value(self):</source>
          <target state="translated">def value(self):</target>
        </trans-unit>
        <trans-unit id="b1fb536ba968b73697eee7fba807fcc0afea8d01" translate="yes" xml:space="preserve">
          <source>define a constant &lt;code&gt;k = 1.3806488e-23&lt;/code&gt;</source>
          <target state="translated">定义常数 &lt;code&gt;k = 1.3806488e-23&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2f887def33825e52ffbcca83446cfd6a6f676ff7" translate="yes" xml:space="preserve">
          <source>functions</source>
          <target state="translated">职能</target>
        </trans-unit>
        <trans-unit id="5dd96caa812ac72ca264221d288d3f75df69d7e6" translate="yes" xml:space="preserve">
          <source>symbol_table</source>
          <target state="translated">符号表</target>
        </trans-unit>
        <trans-unit id="bc5af2310c7f15770a4ed0028648ce367e3e2ec0" translate="yes" xml:space="preserve">
          <source>variables</source>
          <target state="translated">变量</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
