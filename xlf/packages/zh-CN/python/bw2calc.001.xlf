<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/bw2calc/">
    <body>
      <group id="bw2calc">
        <trans-unit id="da39a3ee5e6b4b0d3255bfef95601890afd80709" translate="yes" xml:space="preserve">
          <source/>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17606854f8ce660a9f509844c5e509fece88dd97" translate="yes" xml:space="preserve">
          <source>The Monte Carlo LCA class can do about 30 iterations a second (on a 2011 MacBook Pro). Instead of doing LU factorization, it uses an initial guess and the conjugant gradient squared algorithm.</source>
          <target state="translated">蒙特卡洛LCA类一秒钟可以做大约30次迭代(在2011年的MacBook Pro上)。它不做LU分解,而是使用初始猜测和共轭梯度平方算法。</target>
        </trans-unit>
        <trans-unit id="9410b1ac58a0f5e490df4f25684985c7393b5724" translate="yes" xml:space="preserve">
          <source>The emphasis here has been on speed of solving the linear systems, for normal LCA calculations, graph traversal, or Monte Carlo uncertainty analysis.</source>
          <target state="translated">这里强调的是线性系统的求解速度,用于正常的LCA计算、图形遍历或蒙特卡洛不确定性分析。</target>
        </trans-unit>
        <trans-unit id="332470e3d7c0885ab730cc99c4edcf51a6098458" translate="yes" xml:space="preserve">
          <source>The multiprocessing Monte Carlo class (ParallelMonteCarlo) can do about 100 iterations a second, using 7 virtual cores. The MultiMonteCarlo class, which does Monte Carlo for many processes (and hence can re-use the factorized technosphere matrix), can do about 500 iterations a second, using 7 virtual cores. Both these algorithms perform best when the initial setup for each worker job is minimized, e.g. by dispatching big chunks.</source>
          <target state="translated">多进程蒙特卡洛类(ParallelMonteCarlo)使用7个虚拟内核,一秒钟可以做大约100次迭代。多进程蒙特卡洛类(MultiMonteCarlo)对多个进程进行蒙特卡洛处理(因此可以重复使用因子化的技术圈矩阵),可以使用7个虚拟内核,每秒进行大约500次迭代。当每个worker job的初始设置最小化时,这两种算法都表现得最好,例如通过调度大块。</target>
        </trans-unit>
        <trans-unit id="e8fa0c2541b4ff41005026981fb88a842d263ff3" translate="yes" xml:space="preserve">
          <source>This package provides the calculation engine for the &lt;a href=&quot;https://brightwaylca.org&quot;&gt;Brightway2 life cycle assessment framework&lt;/a&gt;. &lt;a href=&quot;https://docs.brightwaylca.org/&quot;&gt;Online documentation&lt;/a&gt; is available, and the source code is hosted on &lt;a href=&quot;https://bitbucket.org/cmutel/brightway2-calc&quot;&gt;Bitucket&lt;/a&gt;.</source>
          <target state="translated">该软件包为&lt;a href=&quot;https://brightwaylca.org&quot;&gt;Brightway2生命周期评估框架&lt;/a&gt;提供了计算引擎。&lt;a href=&quot;https://docs.brightwaylca.org/&quot;&gt;提供在线文档&lt;/a&gt;，并且源代码托管在&lt;a href=&quot;https://bitbucket.org/cmutel/brightway2-calc&quot;&gt;Bitucket上&lt;/a&gt;。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
