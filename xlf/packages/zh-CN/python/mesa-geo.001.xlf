<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/mesa-geo/">
    <body>
      <group id="mesa-geo">
        <trans-unit id="95ea506b38ee872d08a6f93af7a8a63e2d23f851" translate="yes" xml:space="preserve">
          <source>Agent-based modeling (ABM) in Python 3+</source>
          <target state="translated">基于代理的建模(ABM)在Python 3+中的应用。</target>
        </trans-unit>
        <trans-unit id="27ef550fa9b5065df5c5c330c3012dd94e01e0ec" translate="yes" xml:space="preserve">
          <source>By default the AgentCreator also sets further agent attributes from the Feature properties.</source>
          <target state="translated">默认情况下,AgentCreator也会从Feature属性中进一步设置代理属性。</target>
        </trans-unit>
        <trans-unit id="4dbcbf31807f0ba1714d98b2f359d5f72a4c8387" translate="yes" xml:space="preserve">
          <source>First we create a &lt;code&gt;State&lt;/code&gt; Agent and a &lt;code&gt;GeoModel&lt;/code&gt;. Both should look familiar if you have worked with mesa before.</source>
          <target state="translated">首先，我们创建一个 &lt;code&gt;State&lt;/code&gt; Agent和一个 &lt;code&gt;GeoModel&lt;/code&gt; 。如果您以前使用过台面，那么两者都应该看起来很熟悉。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">开始</target>
        </trans-unit>
        <trans-unit id="48136dddf5fa2de69f33868667ee8e35c7a68815" translate="yes" xml:space="preserve">
          <source>Going further</source>
          <target state="translated">更进一步</target>
        </trans-unit>
        <trans-unit id="0c0a3cb4b1caa9609ee3219bd71d0ad954902aa5" translate="yes" xml:space="preserve">
          <source>If you work in the Jupyter Notebook your output should give you the name of the state and a visual representation of the shape.</source>
          <target state="translated">如果你在Jupyter Notebook中工作,你的输出应该给你状态的名称和形状的可视化表示。</target>
        </trans-unit>
        <trans-unit id="39ce44f05ac3bcf094db91edb4c611eefe5d172f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;GeoModel&lt;/code&gt; we first create an instance of AgentCreator, where we provide the Agent class (State) and its required arguments, except shape and unique_id. We then use the &lt;code&gt;.from_GeoJSON&lt;/code&gt; function to create our agents from the shapes in the GeoJSON file. We provide the feature &quot;name&quot; as the key from which the agents get their unique_ids.
Finally, we add the agents to the GeoSpace</source>
          <target state="translated">在 &lt;code&gt;GeoModel&lt;/code&gt; 中,我们首先创建一个AgentCreator实例，在其中提供Agent类（状态）及其必需的参数，但shape和unique_id除外。然后，我们使用 &lt;code&gt;.from_GeoJSON&lt;/code&gt; 函数根据GeoJSON文件中的形状创建代理。我们提供功能&amp;ldquo;名称&amp;rdquo;作为代理从中获取其unique_id的密钥。最后，我们将代理添加到GeoSpace</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="c326931d0629d1b21f18e19d7bef228eed4e1ed5" translate="yes" xml:space="preserve">
          <source>Let's instantiate our model and look at one of the agents:</source>
          <target state="translated">让我们实例化我们的模型,看看其中一个代理。</target>
        </trans-unit>
        <trans-unit id="aa016c7332ec11889efc160882b15bdc111aff4c" translate="yes" xml:space="preserve">
          <source>Let's start to do some spatial analysis. We can use usual Mesa function names to get neighboring states</source>
          <target state="translated">让我们开始做一些空间分析。我们可以使用通常的Mesa函数名来获得相邻的状态。</target>
        </trans-unit>
        <trans-unit id="b32547c7b34de4be961a53e906749e7a157e04ba" translate="yes" xml:space="preserve">
          <source>On windows you should first use Anaconda to install some of the requirements with</source>
          <target state="translated">在windows上,你应该首先使用Anaconda来安装一些需求,并使用</target>
        </trans-unit>
        <trans-unit id="4f8f99ecb227045017ba85aaec8e2a8e28bb221a" translate="yes" xml:space="preserve">
          <source>Since mesa-geo is in early development you could also install the latest version directly from Github via</source>
          <target state="translated">由于mesa-geo处于早期开发阶段,你也可以直接从Github上通过以下方式安装最新版本</target>
        </trans-unit>
        <trans-unit id="4d46afd664f6f81e6062be02b45b89ae156c88d4" translate="yes" xml:space="preserve">
          <source>So let's get started with some shapes! We will work with &lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;records of US states&lt;/a&gt;. We use the &lt;code&gt;requests&lt;/code&gt; library to retrieve the data, but of course you can work with local data.</source>
          <target state="translated">因此，让我们开始一些形状吧！我们将处理&lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;美国各州的记录&lt;/a&gt;。我们使用 &lt;code&gt;requests&lt;/code&gt; 库来检索数据，但是您当然可以使用本地数据。</target>
        </trans-unit>
        <trans-unit id="b4600cfe004ab3590da41e92d18f8d4b4c94f633" translate="yes" xml:space="preserve">
          <source>The unit for the distance depends on the coordinate reference system (CRS) of the GeoSpace. Since we did not specify the CRS, mesa-geo defaults to the 'Web Mercator' projection (in meters). If you want to do some serious measurements you should always set an appropriate CRS, since the accuracy of Web Mercator declines with distance from the equator.  We can achieve this by initializing the AgentCreator and the GeoSpace with the &lt;code&gt;crs&lt;/code&gt; keyword  &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt;. Mesa-geo then transforms all coordinates from the GeoJSON geographic coordinates into the set crs.</source>
          <target state="translated">距离的单位取决于GeoSpace的坐标参考系统（CRS）。由于我们未指定CRS，因此&amp;ldquo; mesa-geo&amp;rdquo;默认为&amp;ldquo; Web Mercator&amp;rdquo;投影（以米为单位）。如果要进行一些认真的测量，则应始终设置适当的CRS，因为Web Mercator的精度会随距赤道的距离而降低。我们可以通过使用 &lt;code&gt;crs&lt;/code&gt; 关键字 &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt; 初始化AgentCreator和GeoSpace来实现此目的。然后，Mesa-geo将所有坐标从GeoJSON地理坐标转换为设置的crs。</target>
        </trans-unit>
        <trans-unit id="54e5dad8c3855cf07e1b0e1e39b24b7a2c690358" translate="yes" xml:space="preserve">
          <source>This is the first release of mesa-geo. No functionality guaranteed, bugs included.</source>
          <target state="translated">这是mesa-geo的第一个版本。不保证功能,包括错误。</target>
        </trans-unit>
        <trans-unit id="9a78599f9a3e0eb90b0e60667f88406b1457d05e" translate="yes" xml:space="preserve">
          <source>To add further functionality, I need feedback on which functionality is desired by users. Please post a message &lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;here&lt;/a&gt; or open an issue if you have any ideas or recommendations.</source>
          <target state="translated">要添加更多功能，我需要用户希望获得哪些功能的反馈。如果您有任何想法或建议，请&lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;在此处&lt;/a&gt;发布消息或提出问题。</target>
        </trans-unit>
        <trans-unit id="81c47b762f17ded645b7e732f66c1e741999626d" translate="yes" xml:space="preserve">
          <source>To get a deeper understanding of mesa-geo you should checkout the GeoSchelling example. It implements a Leaflet visualization which is similar to use as the CanvasGridVisualization of Mesa.</source>
          <target state="translated">要想更深入的了解Mesa-geo,你应该看看GeoSchelling的例子,它实现了一个类似于Mesa的CanvasGridVisualization的Leaflet可视化。它实现了一个Leaflet可视化,这与Mesa的CanvasGridVisualization的用法类似。</target>
        </trans-unit>
        <trans-unit id="99ff25b7020d090cd9cdb188ea60cacfd11c21b4" translate="yes" xml:space="preserve">
          <source>To get a list of all states within a certain distance you can use the following</source>
          <target state="translated">要获得一定距离内的所有州的列表,你可以使用以下方法。</target>
        </trans-unit>
        <trans-unit id="f956276c6b976e9e091af7d42b963012d3a4d6d7" translate="yes" xml:space="preserve">
          <source>To install mesa-geo on linux or macOS run</source>
          <target state="translated">要在linux或macOS上安装mesa-geo,请运行以下命令</target>
        </trans-unit>
        <trans-unit id="fefab4115e562a86c0c58de9ea47e9b7935010be" translate="yes" xml:space="preserve">
          <source>You should be familiar with how &lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;mesa&lt;/a&gt; works.</source>
          <target state="translated">您应该熟悉&lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;台面的&lt;/a&gt;工作原理。</target>
        </trans-unit>
        <trans-unit id="cb0ae5ae56a9d417cb1a9d18e8cfdbc4ea5481d3" translate="yes" xml:space="preserve">
          <source>mesa-geo - a GIS extension to Mesa Agent-Based Modeling</source>
          <target state="translated">mesa-geo-Mesa Agent-Based Modeling的GIS扩展。</target>
        </trans-unit>
        <trans-unit id="a87505c161b91f2824718829afc67cee52c36469" translate="yes" xml:space="preserve">
          <source>mesa-geo implements a &lt;code&gt;GeoSpace&lt;/code&gt; that can host GIS-based &lt;code&gt;GeoAgents&lt;/code&gt;, which are like normal Agents, except they have a &lt;code&gt;shape&lt;/code&gt; attribute that is a &lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;Shapely object&lt;/a&gt;. You can use &lt;code&gt;Shapely&lt;/code&gt; directly to create arbitrary shapes, but in most cases you will want to import your shapes from a file. Mesa-geo allows you to create GeoAgents from any vector data file (e.g. shapefiles), valid GeoJSON objects or a GeoPandas GeoDataFrame.</source>
          <target state="translated">mesa-geo实现了一个 &lt;code&gt;GeoSpace&lt;/code&gt; ，它可以托管基于GIS的 &lt;code&gt;GeoAgents&lt;/code&gt; ，与普通的Agent一样，除了它们的 &lt;code&gt;shape&lt;/code&gt; 属性是&lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;Shapely对象之外&lt;/a&gt;。您可以直接使用 &lt;code&gt;Shapely&lt;/code&gt; 创建任意形状，但是在大多数情况下，您将需要从文件中导入形状。Mesa-geo允许您从任何矢量数据文件（例如shapefile），有效的GeoJSON对象或GeoPandas GeoDataFrame创建GeoAgent。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
