<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/astor/">
    <body>
      <group id="astor">
        <trans-unit id="53be3e9b4b8da7509fe5e1a76aeaf24c219bbd68" translate="yes" xml:space="preserve">
          <source>3-clause BSD</source>
          <target state="translated">3项BSD</target>
        </trans-unit>
        <trans-unit id="00b5635b8954b6dae7436cabfda878687e7a5813" translate="yes" xml:space="preserve">
          <source>Build status:</source>
          <target state="translated">建设状态。</target>
        </trans-unit>
        <trans-unit id="0ba11f86b8c377aae433814ab9f7d825e11d981b" translate="yes" xml:space="preserve">
          <source>Can round-trip two different source trees to compare for functional
differences, using the astor.rtrip tool (for example, after PEP8 edits).</source>
          <target state="translated">可以使用 astor.rtrip 工具对两个不同的源树进行往返比较,以获取功能上的差异(例如 PEP8 编辑后)。</target>
        </trans-unit>
        <trans-unit id="ed0350dc3257153d84758ae6cd511caacb10aa9d" translate="yes" xml:space="preserve">
          <source>Documentation:</source>
          <target state="translated">文件:</target>
        </trans-unit>
        <trans-unit id="cdd71d7867ffee792ba1cdd6bf67000e27906706" translate="yes" xml:space="preserve">
          <source>Dump pretty-printing of AST</source>
          <target state="translated">转储AST的漂亮打印</target>
        </trans-unit>
        <trans-unit id="7033d02f1e72274ee75ff03e454b66ae46bf300e" translate="yes" xml:space="preserve">
          <source>Easier to read than dump from built-in AST module</source>
          <target state="translated">比内置AST模块的转储更容易读取。</target>
        </trans-unit>
        <trans-unit id="5442279cc0bf933aa64970b9ae35132eccddba7b" translate="yes" xml:space="preserve">
          <source>Easy to read generated code as, well, code</source>
          <target state="translated">易于阅读生成的代码,就像代码一样。</target>
        </trans-unit>
        <trans-unit id="17ac0e084f63802e44a5b82e52032f7394f9c31e" translate="yes" xml:space="preserve">
          <source>Enjoy easy access to parent node(s) for tree rewriting</source>
          <target state="translated">可轻松访问父节点以进行树形重写。</target>
        </trans-unit>
        <trans-unit id="50df4994a34ea45c58c071503e79edfbf7bbbb9b" translate="yes" xml:space="preserve">
          <source>Harder to read than round-tripped code, but more accurate to figure out what
is going on.</source>
          <target state="translated">比绕来绕去的代码更难读,但更能准确地弄清楚是怎么回事。</target>
        </trans-unit>
        <trans-unit id="de13bf1ab0b419f34cb1b3b43e094c84009a42db" translate="yes" xml:space="preserve">
          <source>License:</source>
          <target state="translated">许可证:</target>
        </trans-unit>
        <trans-unit id="aec37af295938682a676824da787c0a4755fd0e5" translate="yes" xml:space="preserve">
          <source>Modified AST doesn&amp;rsquo;t need linenumbers, ctx, etc. or otherwise
be directly compileable for the round-trip to work.</source>
          <target state="translated">修改后的AST不需要行号，ctx等，也不需要直接编译即可往返。</target>
        </trans-unit>
        <trans-unit id="3ec7576ed275f489deb967b40c1ff9a2b3b4c981" translate="yes" xml:space="preserve">
          <source>Non-recursive treewalk</source>
          <target state="translated">非递归树道</target>
        </trans-unit>
        <trans-unit id="46c1aeda14c2d947a9c9a02ddfb0528e25559b2d" translate="yes" xml:space="preserve">
          <source>Other derivatives of Armin&amp;rsquo;s code are floating around, and typically
have fixes for a few corner cases that happened to be noticed by the
maintainers, but most of them have not been tested as thoroughly as
astor.  One exception may be the version of codegen
&lt;a href=&quot;https://github.com/CensoredUsername/codegen&quot;&gt;maintained at github by CensoredUsername&lt;/a&gt;.  This has been tested
to work properly on Python 2.7 using astor&amp;rsquo;s test suite, and, as it
is a single source file, it may be easier to drop into some applications
that do not require astor&amp;rsquo;s other features or Python 3.x compatibility.</source>
          <target state="translated">Armin的代码的其他派生词随处可见，并且通常针对一些极端情况进行了修复，而维护人员恰巧注意到了这些情况，但是大多数情况下，还没有像astor一样经过全面的测试。一个例外可能是&lt;a href=&quot;https://github.com/CensoredUsername/codegen&quot;&gt;CensoredUsername在github上维护&lt;/a&gt;的codegen版本 。已使用astor的测试套件对它进行了测试，以在Python 2.7上正常工作，并且由于它是单个源文件，因此可以轻松放入不需要astor的其他功能或Python 3.x兼容性的某些应用程序中。</target>
        </trans-unit>
        <trans-unit id="987643832c62d765a5a002bbfb3d522cdefd5190" translate="yes" xml:space="preserve">
          <source>PyPI:</source>
          <target state="translated">PyPI。</target>
        </trans-unit>
        <trans-unit id="2228de3ecafe59358ed749175a7a3119f2cf860a" translate="yes" xml:space="preserve">
          <source>Read/rewrite/write Python ASTs</source>
          <target state="translated">读/写/写Python ASTs</target>
        </trans-unit>
        <trans-unit id="6e0d4f3e50e1876b4fd4ee07f09047a074974503" translate="yes" xml:space="preserve">
          <source>Round-trip an AST back to Python &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;:</source>
          <target state="translated">将AST往返返回Python &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="63331f9cbea9fa2605e9dcae08a8bbce148c8905" translate="yes" xml:space="preserve">
          <source>Sometimes you want a recursive treewalk (and astor supports that, starting
at any node on the tree), but sometimes you don&amp;rsquo;t need to do that.  astor
doesn&amp;rsquo;t require you to explicitly visit sub-nodes unless you want to:</source>
          <target state="translated">有时您需要递归的树形路径（并且Astor支持，从树上的任何节点开始），但是有时您不需要这样做。除非您要执行以下操作，否则astor不需要您明确访问子节点：</target>
        </trans-unit>
        <trans-unit id="922acd282cc0f3bb9e6dffb4c4b3c4fe33787051" translate="yes" xml:space="preserve">
          <source>Source:</source>
          <target state="translated">资料来源:</target>
        </trans-unit>
        <trans-unit id="fa96c4a289e2ce09c351f9ef385d64354303a049" translate="yes" xml:space="preserve">
          <source>The decompilation back to Python is based on code originally written
by Armin Ronacher.  Armin&amp;rsquo;s code was well-structured, but failed on
some obscure corner cases of the Python language (and even more corner
cases when the AST changed on different versions of Python), and its
output arguably had cosmetic issues &amp;ndash; for example, it produced
parentheses even in some cases where they were not needed, to
avoid having to reason about precedence.</source>
          <target state="translated">反编译回Python是基于Armin Ronacher最初编写的代码。 Armin的代码结构合理，但是在某些晦涩的Python语言极端情况下（以及在不同版本的AST上更改AST时遇到的更多极端情况）失败，并且其输出可以说是修饰性的，例如，甚至产生括号在某些情况下不需要它们，以避免不得不考虑优先级。</target>
        </trans-unit>
        <trans-unit id="4a3191718f8827b4d4eda5f0e20c5611ecfff025" translate="yes" xml:space="preserve">
          <source>There are some other similar libraries, but astor focuses on the following areas:</source>
          <target state="translated">还有一些其他类似的图书馆,但astor专注于以下领域。</target>
        </trans-unit>
        <trans-unit id="f831ffa820e2894229f0ea9a781b96e384326429" translate="yes" xml:space="preserve">
          <source>Write functions to access the tree based on object names and/or attribute names</source>
          <target state="translated">编写基于对象名称和/或属性名称的访问树的函数。</target>
        </trans-unit>
        <trans-unit id="b82f1bc66eed63c2e85aeb658ce0b34382f889d0" translate="yes" xml:space="preserve">
          <source>You can add code that executes after a node&amp;rsquo;s children are visited, and/or</source>
          <target state="translated">您可以添加在访问节点的子节点之后执行的代码，和/或</target>
        </trans-unit>
        <trans-unit id="98b431a61ca3c1dc62b70f80cb6688bc31c516d6" translate="yes" xml:space="preserve">
          <source>You can add code that executes and keeps the node&amp;rsquo;s children from being
visited (and optionally visit them yourself via a recursive call)</source>
          <target state="translated">您可以添加执行并阻止访问该节点的子代的代码（还可以选择通过递归调用亲自访问它们）</target>
        </trans-unit>
        <trans-unit id="4f8050928f91117105da983328482b2429f5cac8" translate="yes" xml:space="preserve">
          <source>You can add code that executes before a node&amp;rsquo;s children are visited, and/or</source>
          <target state="translated">您可以添加在访问节点的子节点之前执行的代码，和/或</target>
        </trans-unit>
        <trans-unit id="ada9ccf3f8d6e919422d077f8ec677e05976ccf5" translate="yes" xml:space="preserve">
          <source>astor is designed to allow easy manipulation of Python source via the AST.</source>
          <target state="translated">astor被设计为允许通过AST对Python源代码进行简单的操作。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
