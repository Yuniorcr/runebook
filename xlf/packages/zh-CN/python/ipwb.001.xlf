<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/ipwb/">
    <body>
      <group id="ipwb">
        <trans-unit id="06e2345659ef91547b398c738861507f6102e187" translate="yes" xml:space="preserve">
          <source>...for example, from the root of the ipwb repository:</source>
          <target state="translated">...例如，从ipwb存储库的根目录：</target>
        </trans-unit>
        <trans-unit id="2ee77b1984d30adfe92c847867331d0951e1f7d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Peer-To-Peer Permanence of Web Archives&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;网络档案的点对点永久性&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e2d3bf70b8cb34a7fca9a6659848dc363edbcb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ipwb/indexer.py&lt;/strong&gt; - archival indexing script that takes the path to a WARC input, extracts the HTTP headers, HTTP payload (response body), and relevant parts of the WARC-response record header from the WARC specified and creates byte string representations. The indexer then pushes the byte strings into IPFS using a locally running IPFS daemon then creates a &lt;a href=&quot;https://github.com/oduwsdl/ORS/wiki/CDXJ&quot;&gt;CDXJ&lt;/a&gt; file with this metadata for replay.py.</source>
          <target state="translated">&lt;strong&gt;ipwb / indexer.py-&lt;/strong&gt;归档索引脚本，用于获取WARC输入的路径，从指定的WARC中提取HTTP标头，HTTP有效负载（响应主体）和WARC响应记录标头的相关部分，并创建字节字符串表示形式。然后，索引器使用本地运行的IPFS守护程序将字节字符串推入IPFS，然后使用该元数据为replay.py创建一个&lt;a href=&quot;https://github.com/oduwsdl/ORS/wiki/CDXJ&quot;&gt;CDXJ&lt;/a&gt;文件。</target>
        </trans-unit>
        <trans-unit id="be88dde89885f711e34d52ef22c677825420a1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ipwb/replay.py&lt;/strong&gt; - rudimentary replay script to resolve requests for archival content contained in IPFS for replay in the browser.</source>
          <target state="translated">&lt;strong&gt;ipwb / replay.py-&lt;/strong&gt;基本的重播脚本，用于解析对IPFS中包含的存档内容的请求，以便在浏览器中重播。</target>
        </trans-unit>
        <trans-unit id="b7d077dd899c7d229f99e0de196434fc49e5b60b" translate="yes" xml:space="preserve">
          <source>A pictorial representation of the ipwb indexing and replay process:</source>
          <target state="translated">ipwb索引和重放过程的图示。</target>
        </trans-unit>
        <trans-unit id="55bd269e3afb67bd2dfaea54fa7300aa6464fc66" translate="yes" xml:space="preserve">
          <source>A pre-built Docker image is made available that can be run as following:</source>
          <target state="translated">我们提供了一个预先构建的Docker镜像,可以按以下方式运行。</target>
        </trans-unit>
        <trans-unit id="65e25ef42cdbe3ba21bab8361ce5779085964d2c" translate="yes" xml:space="preserve">
          <source>An archival replay system is also included with ipwb to re-experience the content disseminated to IPFS. A CDXJ index needs to be provided and used by the ipwb replay system by specifying the path of the index file as a parameter to the replay system:</source>
          <target state="translated">ipwb还包括一个存档重放系统,以重新体验传播给IPFS的内容。需要提供CDXJ索引,并由ipwb重放系统使用,指定索引文件的路径作为重放系统的参数。</target>
        </trans-unit>
        <trans-unit id="c5050f193a520cf9c7432406f6fcc4e6838a12ba" translate="yes" xml:space="preserve">
          <source>An important aspect of archival replay systems is rewriting various resource references for proper memento reconstruction so that they are dereferenced properly from the archive from around the same datetime as of the root memento and not from the live site (in which case the resource might have changed or gone missing). Many archival replay systems perform server-side rewriting, but it has its limitations when URIs are generated using JavaScript. To handle this we use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;Service Worker&lt;/a&gt; for rerouting requests on the client-side when they are dereferenced to avoid any server-side rewiring. For this, we have implemented a separate library, &lt;a href=&quot;https://oduwsdl.github.io/Reconstructive/&quot;&gt;Reconstructive&lt;/a&gt;, which is reusable and extendable by any archival replay system.</source>
          <target state="translated">档案重播系统的一个重要方面是重写各种资源引用以进行正确的memento重建，以便从与根memento相同的日期时间而不是从实时站点正确地从存档中取消引用它们（在这种情况下，资源可能已更改）或丢失了）。许多档案重播系统执行服务器端重写，但是当使用JavaScript生成URI时，它有其局限性。为了解决这个问题，我们使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;Service Worker&lt;/a&gt;在取消引用后在客户端重新路由请求，以避免任何服务器端重新布线。为此，我们实现了一个单独的库&lt;a href=&quot;https://oduwsdl.github.io/Reconstructive/&quot;&gt;Reconstructive&lt;/a&gt;，该库可通过任何档案重播系统重用和扩展。</target>
        </trans-unit>
        <trans-unit id="15f1ed0e14f5d5b28c49a63f8b4fd0c61ce3582b" translate="yes" xml:space="preserve">
          <source>Another important feature of archival replays is the inclusion of an archival banner in mementos. The purpose of an archival banner is to highlight that a replayed page is a memento and not a live page, to provide metadata about the memento and the archive, and to facilitate additional interactivity. Many archival banners used in different web archival replay systems are obtrusive in nature and have issues like style leakage. To eliminate both of these issues we have implemented a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;Custom HTML Element&lt;/a&gt;, &lt;a href=&quot;https://oduwsdl.github.io/Reconstructive/docs/class/Reconstructive/reconstructive-banner.js%7EReconstructiveBanner.html&quot;&gt;&amp;lt;reconstructive-banner&amp;gt;&lt;/a&gt; as part of the &lt;a href=&quot;https://oduwsdl.github.io/Reconstructive/&quot;&gt;Reconstructive&lt;/a&gt; library and used in the ipwb.</source>
          <target state="translated">存档重播的另一个重要功能是在纪念品中包含了一个存档横幅。归档标语的目的是突出显示已重播的页面是纪念品，而不是实时页面，以提供有关纪念品和档案的元数据，并促进其他交互性。在不同的Web档案重放系统中使用的许多档案标语本质上是令人讨厌的，并且存在样式泄漏等问题。为了消除这两个问题，我们已经实现了一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;自定义HTML元素&lt;/a&gt;，&lt;a href=&quot;https://oduwsdl.github.io/Reconstructive/docs/class/Reconstructive/reconstructive-banner.js%7EReconstructiveBanner.html&quot;&gt;&amp;lt;重建横幅&amp;gt;&lt;/a&gt;作为的一部分&lt;a href=&quot;https://oduwsdl.github.io/Reconstructive/&quot;&gt;重建&lt;/a&gt;图书馆和ipwb使用。</target>
        </trans-unit>
        <trans-unit id="6d7af7007f339e84fc4c2de5df5b67bacbc49164" translate="yes" xml:space="preserve">
          <source>By default, the image building process also performs tests, so it might take a while to build the image. It ensures that an image will not be created with failing tests. However, it is possible to skip tests by supplying a build-arg &lt;code&gt;--build-arg SKIPTEST=true&lt;/code&gt; as illustrated below:</source>
          <target state="translated">默认情况下，图像构建过程还会执行测试，因此构建图像可能需要一段时间。它确保不会通过失败的测试创建映像。然而，有可能通过提供一个跳过测试构建精氨酸 &lt;code&gt;--build-arg SKIPTEST=true&lt;/code&gt; 如下图所示：</target>
        </trans-unit>
        <trans-unit id="81c8fe621b0eccc77a08435bab3cb65dac5b3b28" translate="yes" xml:space="preserve">
          <source>Citing Project</source>
          <target state="translated">引用项目</target>
        </trans-unit>
        <trans-unit id="9ecea0dacc72c9dda1b28914a57568d8febec652" translate="yes" xml:space="preserve">
          <source>For conventional usage, the latest release of ipwb can be installed using pip:</source>
          <target state="translated">对于传统的使用,可以使用pip安装最新版本的ipwb。</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">帮忙</target>
        </trans-unit>
        <trans-unit id="18cda72bbdc6519fd8818fe9fad8a2413f6c02c6" translate="yes" xml:space="preserve">
          <source>If the host folder structure is something other than &lt;code&gt;/some/path/{warc,cdxj,ipfs}&lt;/code&gt; then these volumes need to be mounted separately.</source>
          <target state="translated">如果主机文件夹结构以外的东西 &lt;code&gt;/some/path/{warc,cdxj,ipfs}&lt;/code&gt; 然后需要被单独地安装这些卷。</target>
        </trans-unit>
        <trans-unit id="333fa6880824b1a0a04ba574a034b122afc8c90f" translate="yes" xml:space="preserve">
          <source>If you encounter a conflict with the default API port of 5001 when starting the daemon, running the following prior to launching the daemon will change the API port to access to one of your choosing (here, shown to be 5002):</source>
          <target state="translated">如果您在启动守护进程时遇到与默认API端口5001冲突的情况,在启动守护进程之前运行以下内容将把API端口改为您选择的访问端口(这里显示为5002)。</target>
        </trans-unit>
        <trans-unit id="4a455c1218dcb14bbda9fd52343b4dd39b78406a" translate="yes" xml:space="preserve">
          <source>In a separate terminal session (or the same if you started the daemon in the background), instruct ipwb to push contents of a WARC file into IPFS and create an index of records:</source>
          <target state="translated">在一个单独的终端会话中(如果你在后台启动了守护进程,也是一样),指示ipwb将WARC文件的内容推送到IPFS中,并创建一个记录索引。</target>
        </trans-unit>
        <trans-unit id="9951861c21df18489a5872209655d6f9039b5e2a" translate="yes" xml:space="preserve">
          <source>Indexing</source>
          <target state="translated">编制索引</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="19357182557718b1e0bf5808b04030cce9490a3b" translate="yes" xml:space="preserve">
          <source>InterPlanetary Wayback (ipwb)</source>
          <target state="translated">行星际回溯(ipwb)</target>
        </trans-unit>
        <trans-unit id="a09fd116f6d0b1bba040a6d00e3aebf1c4153e62" translate="yes" xml:space="preserve">
          <source>InterPlanetary Wayback (ipwb) facilitates permanence and collaboration in web archives by disseminating the contents of &lt;a href=&quot;http://www.iso.org/iso/catalogue_detail.htm?csnumber=44717&quot;&gt;WARC&lt;/a&gt; files into the IPFS network. &lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt; is a peer-to-peer content-addressable file system that inherently allows deduplication and facilitates opt-in replication. ipwb splits the header and payload of WARC response records before disseminating into IPFS to leverage the deduplication, builds a &lt;a href=&quot;https://github.com/oduwsdl/ORS/wiki/CDXJ&quot;&gt;CDXJ index&lt;/a&gt; with references to the IPFS hashes returned, and combines the header and payload from IPFS at the time of replay.</source>
          <target state="translated">行星际回程（ipwb）通过将&lt;a href=&quot;http://www.iso.org/iso/catalogue_detail.htm?csnumber=44717&quot;&gt;WARC&lt;/a&gt;文件的内容传播到IPFS网络中来促进Web存档中的持久性和协作。&lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt;是对等内容可寻址文件系统，其固有地允许重复数据删除并促进选择复制。ipwb在将WARC响应记录的标头和有效负载分散到IPFS之前，以利用重复数据消除功能，使用返回的IPFS散列的引用构建&lt;a href=&quot;https://github.com/oduwsdl/ORS/wiki/CDXJ&quot;&gt;CDXJ索引&lt;/a&gt;，并在重播时合并IPFS的标头和有效负载。</target>
        </trans-unit>
        <trans-unit id="7cad164ec83177b70c542f7c54b11491ad6801a6" translate="yes" xml:space="preserve">
          <source>InterPlanetary Wayback (ipwb) requires Python 3.7+. ipwb can also be used with Docker (&lt;a href=&quot;#user-content-using-docker&quot;&gt;see below&lt;/a&gt;).</source>
          <target state="translated">行星际回溯（ipwb）需要Python 3.7+。ipwb也可以与Docker一起使用（&lt;a href=&quot;#user-content-using-docker&quot;&gt;请参阅下文&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c944df46aa48f9ad2f50c18c6b540f3e5f369013" translate="yes" xml:space="preserve">
          <source>InterPlanetary Wayback (ipwb): Web Archive integration with IPFS</source>
          <target state="translated">InterPlanetary Wayback(ipwb)。网络档案与IPFS整合</target>
        </trans-unit>
        <trans-unit id="ccb4eba544ad27b675212b67ab6f3e9dedb62fef" translate="yes" xml:space="preserve">
          <source>InterPlanetary Wayback primarily consists of two scripts:</source>
          <target state="translated">InterPlanetary Wayback主要包括两个脚本。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">麻省理工学院</target>
        </trans-unit>
        <trans-unit id="50ebc49c256d22e38e0443852b867f8ee5d31bc6" translate="yes" xml:space="preserve">
          <source>Mat Kelly, Sawood Alam, Michael L. Nelson, and Michele C. Weigle. &lt;strong&gt;InterPlanetary Wayback: Peer-To-Peer Permanence of Web Archives&lt;/strong&gt;. In &lt;em&gt;Proceedings of the 20th International Conference on Theory and Practice of Digital Libraries&lt;/em&gt;, pages 411&amp;ndash;416, Hamburg, Germany, June 2016.</source>
          <target state="translated">Mat Kelly，Sawood Alam，Michael L. Nelson和Michele C. Weigle。&lt;strong&gt;行星际回溯：网络档案的点对点永久性&lt;/strong&gt;。在&lt;em&gt;第20届国际会议上的理论和数字图书馆的实践论文集&lt;/em&gt;，411-416，德国汉堡，2016年6月的页面。</target>
        </trans-unit>
        <trans-unit id="280fcb3c140ac32a4c80dc5f2e2cff8af750f0f9" translate="yes" xml:space="preserve">
          <source>Once started, the replay system's web interface can be accessed through a web browser, e.g., &lt;a href=&quot;http://localhost:5000/&quot;&gt;http://localhost:5000/&lt;/a&gt; by default.</source>
          <target state="translated">启动后，默认情况下可以通过Web浏览器访问重播系统的Web界面，例如&lt;a href=&quot;http://localhost:5000/&quot;&gt;http：// localhost：5000 /&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8442dc4d1ec0bad64eee08dd76a30bc77df4064" translate="yes" xml:space="preserve">
          <source>Project History</source>
          <target state="translated">项目历史</target>
        </trans-unit>
        <trans-unit id="4cbc9b79dabc02dd5ba1414234564bd4645b9735" translate="yes" xml:space="preserve">
          <source>Replaying</source>
          <target state="translated">重播</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">设置</target>
        </trans-unit>
        <trans-unit id="bd10f47230c2a9b0135b0cb7ec8955bb7d1fd138" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://fox.cs.vt.edu/wadl2016.html&quot;&gt;Web Archiving and Digital Libraries (WADL) 2016 workshop&lt;/a&gt; in Newark, NJ in June 2016.</source>
          <target state="translated">该&lt;a href=&quot;http://fox.cs.vt.edu/wadl2016.html&quot;&gt;网页存档和数字图书馆（WADL）2016研讨会&lt;/a&gt;在纽瓦克，新泽西州在2016年6月。</target>
        </trans-unit>
        <trans-unit id="2dcf353afbd930f92a87457f283f80190ecc6d9a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://netpreserve.org/wac2017/&quot;&gt;International Internet Preservation Consortium (IIPC) Web Archiving Conference (WAC) 2017&lt;/a&gt; in London, England in June 2017.</source>
          <target state="translated">在&lt;a href=&quot;http://netpreserve.org/wac2017/&quot;&gt;国际互联网保存联盟（IIPC）的Web归档大会（WAC）2017&lt;/a&gt;在英国伦敦，在六月2017年</target>
        </trans-unit>
        <trans-unit id="22524760ddfa238b1e7b190816c2d288595cdca1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.jcdl2016.org/&quot;&gt;Joint Conference on Digital Libraries 2016&lt;/a&gt; in Newark, NJ in June 2016.</source>
          <target state="translated">该&lt;a href=&quot;http://www.jcdl2016.org/&quot;&gt;联席会议数字图书馆2016&lt;/a&gt;在纽瓦克，新泽西州在2016年6月。</target>
        </trans-unit>
        <trans-unit id="9689ff1ffcfaa553c88669971142168667abb46f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.tpdl2016.org/&quot;&gt;Theory and Practice on Digital Libraries (TPDL) 2016&lt;/a&gt; in Hannover, Germany in September 2016.</source>
          <target state="translated">该&lt;a href=&quot;http://www.tpdl2016.org/&quot;&gt;数字图书馆（tPDL宽）2016理论与实践&lt;/a&gt;在德国汉诺威在2016年9月。</target>
        </trans-unit>
        <trans-unit id="de4a1718ce4cc57be02a114a4c1efd22d9a60518" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://archivesunleashed.com/call-for-participation-au4/&quot;&gt;Archives Unleashed 4.0: Web Archive Datathon&lt;/a&gt; in London, England in June 2017.</source>
          <target state="translated">该&lt;a href=&quot;https://archivesunleashed.com/call-for-participation-au4/&quot;&gt;偷跑4.0档案：Web档案Datathon&lt;/a&gt;在英国伦敦，在六月2017年</target>
        </trans-unit>
        <trans-unit id="39bd5c9fcdf6fdbe4f5e2c3bffff1bd953af7b33" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.decentralizedweb.net/&quot;&gt;Decentralized Web Summit 2018's&lt;/a&gt; IPFS Lab Day in San Francisco, CA in August 2018.</source>
          <target state="translated">将&lt;a href=&quot;https://www.decentralizedweb.net/&quot;&gt;分散的Web峰会2018是&lt;/a&gt;IPFS实验室一天在旧金山，加州在2018年八月</target>
        </trans-unit>
        <trans-unit id="8ea766ccac44e1cafd8e8d5427f8ed1f7fbe3887" translate="yes" xml:space="preserve">
          <source>The InterPlanetary Filesystem (ipfs) daemon must be installed and running before starting ipwb. See the &lt;a href=&quot;https://ipfs.io/docs/install/&quot;&gt;Install IPFS&lt;/a&gt; page to accomplish this. In the future, we hope to make this more automated. Once ipfs is installed, start the daemon:</source>
          <target state="translated">在启动ipwb之前，必须先安装并运行InterPlanetary Filesystem（ipfs）守护程序。请参阅&amp;ldquo;&lt;a href=&quot;https://ipfs.io/docs/install/&quot;&gt;安装IPFS&amp;rdquo;&lt;/a&gt;页面以完成此操作。将来，我们希望使其自动化。安装ipfs后，启动守护程序：</target>
        </trans-unit>
        <trans-unit id="0b0c4d17c42a40a64af9420d43d0b3a4020a42c9" translate="yes" xml:space="preserve">
          <source>The container will run an IPFS daemon, index a sample WARC file, and replay it using the newly created index. It will take a few seconds to be ready, then the replay will be accessible at &lt;a href=&quot;http://localhost:5000/&quot;&gt;http://localhost:5000/&lt;/a&gt; with a sample archived page.</source>
          <target state="translated">该容器将运行IPFS守护程序，为示例WARC文件建立索引，并使用新创建的索引对其进行重播。准备工作将需要几秒钟，然后可以在&lt;a href=&quot;http://localhost:5000/&quot;&gt;http：// localhost：5000 /&lt;/a&gt;上访问重放，并提供一个示例存档页面。</target>
        </trans-unit>
        <trans-unit id="303f24ccd6cd043206250bc3946f6ea7c6da15c6" translate="yes" xml:space="preserve">
          <source>The ipwb indexer partitions the WARC into WARC Records and extracts the WARC Response headers, HTTP response headers, and the HTTP response bodies (payloads). Relevant information is extracted from the WARC Response headers, temporary byte strings are created for the HTTP response headers and payload, and these two bytes strings are pushed into IPFS. The resulting CDXJ data is written to &lt;code&gt;STDOUT&lt;/code&gt; by default but can be redirected to a file, e.g.,</source>
          <target state="translated">ipwb索引器将WARC划分为WARC记录，并提取WARC响应标头，HTTP响应标头和HTTP响应正文（有效载荷）。从WARC响应标头中提取相关信息，为HTTP响应标头和有效负载创建临时字节字符串，并将这两个字节字符串推入IPFS。默认情况下，所得的CDXJ数据将写入 &lt;code&gt;STDOUT&lt;/code&gt; ，但可以重定向到文件，例如，</target>
        </trans-unit>
        <trans-unit id="479e52e8f617f9038c9b21e771e6d3296a9bb24b" translate="yes" xml:space="preserve">
          <source>The latest development version containing changes not yet released can be installed from source:</source>
          <target state="translated">可以从源头安装包含尚未发布的变化的最新开发版本。</target>
        </trans-unit>
        <trans-unit id="627d22102b7377e70070b81ef3943caa143f921a" translate="yes" xml:space="preserve">
          <source>This repo contains the code for integrating &lt;a href=&quot;http://www.iso.org/iso/catalogue_detail.htm?csnumber=44717&quot;&gt;WARC&lt;/a&gt;s and &lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt; as developed at the &lt;a&gt;Archives Unleashed: Web Archive Hackathon&lt;/a&gt; in Toronto, Canada in March 2016. The project was also presented at:</source>
          <target state="translated">此存储库包含用于集成&lt;a href=&quot;http://www.iso.org/iso/catalogue_detail.htm?csnumber=44717&quot;&gt;WARC&lt;/a&gt;和&lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt;的代码，该代码是2016年3月在加拿大多伦多举行的&amp;ldquo; &lt;a&gt;Archives Unleashed：Web Archive Hackathon&amp;rdquo;&lt;/a&gt;中开发的。</target>
        </trans-unit>
        <trans-unit id="57c0feda619e4bd8b71a80886c53aa2ff3920eed" translate="yes" xml:space="preserve">
          <source>To build an image from the source, run the following command from the directory where the source code is checked out. The name of the locally built image could be anything, but we use &lt;code&gt;oduwsdl/ipwb&lt;/code&gt; to be consistent with the above commands.</source>
          <target state="translated">要从源代码构建映像，请在检出源代码的目录中运行以下命令。本地生成的映像的名称可以是任何名称，但是我们使用 &lt;code&gt;oduwsdl/ipwb&lt;/code&gt; 来与上述命令保持一致。</target>
        </trans-unit>
        <trans-unit id="2d66e0a72f236d5c3e76da62ac908d47aab1cdd7" translate="yes" xml:space="preserve">
          <source>To index and replay your own WARC file, bind mount your data folders inside the container using &lt;code&gt;-v&lt;/code&gt; (or &lt;code&gt;--volume&lt;/code&gt;) flag and run commands accordingly. The provided docker image has designated &lt;code&gt;/data&lt;/code&gt; directory, inside which there are &lt;code&gt;warc&lt;/code&gt;, &lt;code&gt;cdxj&lt;/code&gt;, and &lt;code&gt;ipfs&lt;/code&gt; folders where host folders can be mounted separately or as a single mount point at the parent &lt;code&gt;/data&lt;/code&gt; directory. Assuming that the host machine has a &lt;code&gt;/path/to/data&lt;/code&gt; folder under which there are &lt;code&gt;warc&lt;/code&gt;, &lt;code&gt;cdxj&lt;/code&gt;, and &lt;code&gt;ipfs&lt;/code&gt; folders and a WARC file at &lt;code&gt;/path/to/data/warc/custom.warc.gz&lt;/code&gt;.</source>
          <target state="translated">要索引并重放您自己的WARC文件，请使用 &lt;code&gt;-v&lt;/code&gt; （或 &lt;code&gt;--volume&lt;/code&gt; ）标志将数据文件夹绑定安装在容器中，并相应地运行命令。提供的docker映像已指定 &lt;code&gt;/data&lt;/code&gt; 目录，其中有 &lt;code&gt;warc&lt;/code&gt; ， &lt;code&gt;cdxj&lt;/code&gt; 和 &lt;code&gt;ipfs&lt;/code&gt; 文件夹，可以在其中将主机文件夹单独安装或作为单个安装点安装在父 &lt;code&gt;/data&lt;/code&gt; 目录中。假设主机具有 &lt;code&gt;/path/to/data&lt;/code&gt; 文件夹，在该文件夹下有 &lt;code&gt;warc&lt;/code&gt; ， &lt;code&gt;cdxj&lt;/code&gt; 和 &lt;code&gt;ipfs&lt;/code&gt; 文件夹，以及位于 &lt;code&gt;/path/to/data/warc/custom.warc.gz&lt;/code&gt; 的WARC文件。</target>
        </trans-unit>
        <trans-unit id="f6877d0f5d9b7e6b6fe72694ce71c6e26a52b6be" translate="yes" xml:space="preserve">
          <source>To run it under a domain name other than &lt;code&gt;localhost&lt;/code&gt;, the easiest approach is to use a reverse proxy that supports HTTPS. The replay system utilizes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;Service Worker&lt;/a&gt; for URL rerouting/rewriting to prevent &lt;a href=&quot;http://ws-dl.blogspot.com/2012/10/2012-10-10-zombies-in-archives.html&quot;&gt;live leakage (zombies)&lt;/a&gt;. However, for security reason many web browsers have mandated HTTPS for the Service Worker API with only exception if the domain is &lt;code&gt;localhost&lt;/code&gt;. &lt;a href=&quot;https://caddyserver.com/&quot;&gt;Caddy Server&lt;/a&gt; and &lt;a href=&quot;https://traefik.io/&quot;&gt;Traefik&lt;/a&gt; can be used as a reverse-proxy server and are very easy to setup. They come with built-in HTTPS support and manage (install and update) TLS certificates transparently and automatically from &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt;. However, any web server proxy that has HTTPS support on the front-end will work. To make ipwb replay aware of the proxy, use &lt;code&gt;--proxy&lt;/code&gt; or &lt;code&gt;-P&lt;/code&gt; flag to supply the proxy URL. This way the replay will yield the supplied proxy URL as a prefix when generating various fully qualified domain name (FQDN) URIs or absolute URIs (for example, those in the TimeMap or Link header) instead of the default &lt;code&gt;http://localhost:5000&lt;/code&gt;. This can be necessary when the service is running in a private network or a container and only exposed via a reverse-proxy. Suppose a reverse-proxy server is running and ready to forward all traffic on the &lt;code&gt;https://ipwb.example.com&lt;/code&gt; to the ipwb replay server then the replay can be started as following:</source>
          <target state="translated">要在非 &lt;code&gt;localhost&lt;/code&gt; 的域名下运行它，最简单的方法是使用支持HTTPS的反向代理。重播系统利用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;Service Worker&lt;/a&gt;进行URL重路由/重写以防止&lt;a href=&quot;http://ws-dl.blogspot.com/2012/10/2012-10-10-zombies-in-archives.html&quot;&gt;实时泄漏（僵尸）&lt;/a&gt;。但是，出于安全原因，许多Web浏览器已为Service Worker API强制使用HTTPS，只有域为 &lt;code&gt;localhost&lt;/code&gt; 时例外。&lt;a href=&quot;https://caddyserver.com/&quot;&gt;Caddy服务器&lt;/a&gt;和&lt;a href=&quot;https://traefik.io/&quot;&gt;Traefik&lt;/a&gt;可以用作反向代理服务器，并且非常易于设置。它们具有内置的HTTPS支持，并通过&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt;透明，自动地管理（安装和更新）TLS证书。。但是，任何在前端具有HTTPS支持的Web服务器代理都可以使用。要使ipwb重播有关代理的信息，请使用 &lt;code&gt;--proxy&lt;/code&gt; 或 &lt;code&gt;-P&lt;/code&gt; 标志来提供代理URL。这样，当生成各种完全限定域名（FQDN）URI或绝对URI（例如，TimeMap或Link标头中的那些）而不是默认的 &lt;code&gt;http://localhost:5000&lt;/code&gt; 时，重播将产生提供的代理URL作为前缀。。当服务在专用网络或容器中运行并且仅通过反向代理公开时，这可能是必需的。假设反向代理服务器正在运行，并且准备将 &lt;code&gt;https://ipwb.example.com&lt;/code&gt; 上的所有流量转发到ipwb重播服务器，则可以按以下方式启动重播：</target>
        </trans-unit>
        <trans-unit id="57ffd16df72d6eef36ddb2fae5f71afca197b424" translate="yes" xml:space="preserve">
          <source>Usage of sub-commands in ipwb can be accessed through providing the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; flag, like any of the below.</source>
          <target state="translated">可以通过提供 &lt;code&gt;-h&lt;/code&gt; 或 &lt;code&gt;--help&lt;/code&gt; 标志来访问ipwb中子命令的用法，如下所示。</target>
        </trans-unit>
        <trans-unit id="f1e887ad301db2838308801456e01403dfd27811" translate="yes" xml:space="preserve">
          <source>Using Docker</source>
          <target state="translated">使用Docker</target>
        </trans-unit>
        <trans-unit id="b6df9757d187b07028baf8d27cd4b57a78abedbe" translate="yes" xml:space="preserve">
          <source>We have numerous publications related to this project, but the most significant and primary one was published in TPDL 2016. (&lt;a href=&quot;http://www.cs.odu.edu/%7Emkelly/papers/2016_tpdl_ipwb.pdf&quot;&gt;Read the PDF&lt;/a&gt;)</source>
          <target state="translated">我们有许多与该项目有关的出版物，但最重要，最主要的出版物是在TPDL 2016中发表的。（&lt;a href=&quot;http://www.cs.odu.edu/%7Emkelly/papers/2016_tpdl_ipwb.pdf&quot;&gt;阅读PDF&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="daba946216be60ed41b22da33cd78990c628860e" translate="yes" xml:space="preserve">
          <source>ipwb also supports using an IPFS hash or any HTTP location as the source of the CDXJ:</source>
          <target state="translated">ipwb也支持使用IPFS哈希或任何HTTP位置作为CDXJ的来源。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
