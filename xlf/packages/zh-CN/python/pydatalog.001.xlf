<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/pydatalog/">
    <body>
      <group id="pydatalog">
        <trans-unit id="30ee3e160c87f4cb08e4464e6c9ce673e7576c41" translate="yes" xml:space="preserve">
          <source>#### Datalog = SQL + recursivity
Datalog is a truly declarative language derived from Prolog, with strong academic foundations.  It complements Python very well for:</source>
          <target state="translated">#### Datalog = SQL +递归性Datalog是一种真正的声明性语言，源于Prolog，具有强大的学术基础。它在以下方面很好地补充了Python：</target>
        </trans-unit>
        <trans-unit id="5ce278aef6a44b4a6d85c267016a3cc878e8b48f" translate="yes" xml:space="preserve">
          <source>#### Simple as Excel
Datalog excels at accelerated development : Datalog programs are often shorter than their Python equivalent,
and Datalog statements can be specified in any order, as simply as formula in a spreadsheet.</source>
          <target state="translated">####简单易用Excel数据记录擅长加速开发：数据记录程序通常短于它们的Python等效记录，并且数据记录语句可以以任何顺序指定，就像电子表格中的公式一样。</target>
        </trans-unit>
        <trans-unit id="1cc21bb1c9ffc625faccd2bf8037b2e805394a6c" translate="yes" xml:space="preserve">
          <source>###1.1 pyDatalog</source>
          <target state="translated">### 1.1 pyDatalog</target>
        </trans-unit>
        <trans-unit id="6092b1cb915e381d977776c4e9963ee6c352d447" translate="yes" xml:space="preserve">
          <source>###1.2 Datalog</source>
          <target state="translated">### 1.2数据记录</target>
        </trans-unit>
        <trans-unit id="3dd7a992f7d04e210019cc150205ddcb8259fa06" translate="yes" xml:space="preserve">
          <source>##1. Description
The main goal of pyDatalog is to introduce Datalog as a Domain Specific Language (DSL) inside Python syntax and programs.</source>
          <target state="translated">## 1。描述pyDatalog的主要目标是在Python语法和程序中引入Datalog作为领域特定语言（DSL）。</target>
        </trans-unit>
        <trans-unit id="3bc1e3fd28a367b2b2d2ccf225e2c6b701b70e26" translate="yes" xml:space="preserve">
          <source>A pure-python implementation of Datalog, a truly declarative language derived from Prolog.</source>
          <target state="translated">Datalog的一个纯Python实现,它是一种从Prolog衍生出来的真正的声明式语言。</target>
        </trans-unit>
        <trans-unit id="6c721ad53a91094717081d14a3a9d33e9dfe0444" translate="yes" xml:space="preserve">
          <source>it can perform multi-database queries (from memory datastore, 11 relational databases, and noSQL database with appropriate connectors)</source>
          <target state="translated">它可以执行多数据库查询(从内存数据存储,11个关系型数据库,以及使用适当的连接器的NoSQL数据库)。</target>
        </trans-unit>
        <trans-unit id="6966b54b4aa3de34ac5a5c25caacfd47c1347ede" translate="yes" xml:space="preserve">
          <source>it facilitates re-use of SQL code snippet (e.g. for frequent joins or formula);</source>
          <target state="translated">它便于重复使用SQL代码片段(例如频繁的连接或公式)。</target>
        </trans-unit>
        <trans-unit id="08fee37b868dff3ee91fefc7da2165e4fb3fe72f" translate="yes" xml:space="preserve">
          <source>it is more expressive than SQL, with a cleaner syntax;</source>
          <target state="translated">它比SQL更有表现力,语法更简洁。</target>
        </trans-unit>
        <trans-unit id="001ccd2545a9f6a94d661aff17c000a5c13d47f2" translate="yes" xml:space="preserve">
          <source>managing complex sets of related information (e.g. in data integration or the semantic web).</source>
          <target state="translated">管理复杂的相关信息集(例如,在数据集成或语义网中)。</target>
        </trans-unit>
        <trans-unit id="985cf3bcf22fd53cc11acdeccce166358d086573" translate="yes" xml:space="preserve">
          <source>performing recursive algorithms (e.g. in network protocol, code and graph analysis, parsing)</source>
          <target state="translated">递归算法(如网络协议、代码和图形分析、解析)</target>
        </trans-unit>
        <trans-unit id="66c26ef355255508dbbc81f0da48ab27d7a10e2f" translate="yes" xml:space="preserve">
          <source>pyDatalog adds the logic programming paradigm to Python&amp;rsquo;s toolbox, in a pythonic way.
You can now run logic queries on databases or Python objects, and use logic clauses to define python classes.
In particular, pyDatalog can be used as a query language:</source>
          <target state="translated">pyDatalog以Python方式将逻辑编程范例添加到Python的工具箱中。现在，您可以在数据库或Python对象上运行逻辑查询，并使用逻辑子句定义python类。特别是，pyDatalog可以用作查询语言：</target>
        </trans-unit>
        <trans-unit id="30995bb5e233e47e6bb257a64794e11305c0b156" translate="yes" xml:space="preserve">
          <source>requirements, bugs&amp;hellip;</source>
          <target state="translated">需求，错误&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="49f78e96336d68f2c9e30f93b50c766c08b0ad06" translate="yes" xml:space="preserve">
          <source>simulating intelligent behavior (e.g. in games),</source>
          <target state="translated">模拟智能行为(如在游戏中)。</target>
        </trans-unit>
        <trans-unit id="6000cbc8da1255f5d1752f8e983c87d722723e7a" translate="yes" xml:space="preserve">
          <source>solving discrete constraint problems.</source>
          <target state="translated">解决离散约束问题;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
