<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/captcha-harvester/">
    <body>
      <group id="captcha-harvester">
        <trans-unit id="7fb505d333ffbfca21839989658311c79424d705" translate="yes" xml:space="preserve">
          <source>&amp;gt; harvester</source>
          <target state="translated">&amp;gt;收割机</target>
        </trans-unit>
        <trans-unit id="1779e3f54ff270d17ed5708e454502ac09afdfd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: The way the harvester is currently setup, if you use the &lt;code&gt;-b&lt;/code&gt; flag to start up the browser, then when you quit either the browser or the server, the other will also terminate.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：当前设置收割机的方式，如果使用 &lt;code&gt;-b&lt;/code&gt; 标志启动浏览器，则退出浏览器或服务器时，另一个也会终止。</target>
        </trans-unit>
        <trans-unit id="072d20f55098e62fcb2f0f0bac460312bf91a3ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Without the &lt;code&gt;-b/--browser&lt;/code&gt; only the server will start up, without the browser. You won't
be able to access the site correctly on your normal browsers because the host won't be correctly
mapped to the local server. This could be useful if you want to open the browser with your own
command line options or you already have one running from a previous session.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：如果没有 &lt;code&gt;-b/--browser&lt;/code&gt; 只有服务器启动，没有浏览器。您将无法在常规浏览器上正确访问该站点，因为该主机将无法正确映射到本地服务器。如果您想使用自己的命令行选项打开浏览器，或者您已经在上一个会话中运行了该选项，则这可能很有用。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="3fe643b265d20b260a59d70a3cde15e9509f7dba" translate="yes" xml:space="preserve">
          <source>Additonally, V3 ReCaptcha's require an action when submitting the captcha. Sometimes they don't
matter if the target site dosen't double check them and you can get away passing anything to (-a/--data-action).
However, it is advised that you grab the correct &lt;code&gt;data-action&lt;/code&gt; attribute when looking for the sitekey, they
should be near each other.</source>
          <target state="translated">另外，V3 ReCaptcha在提交验证码时需要执行一项操作。有时，如果目标站点不对它们进行仔细检查就无所谓了，那么您可以避免将任何内容传递给（-a /-data-action）。但是，建议您在寻找站点密钥时获取正确的 &lt;code&gt;data-action&lt;/code&gt; 属性，它们应该彼此靠近。</target>
        </trans-unit>
        <trans-unit id="3864eeb539c9df959bdb7e6247306ba05b74fcba" translate="yes" xml:space="preserve">
          <source>Any Other Lanuage (via HTTP API)</source>
          <target state="translated">任何其他语言(通过HTTP API)</target>
        </trans-unit>
        <trans-unit id="55f45fc0081a5ed9ca7af87f6b119c977ec51d92" translate="yes" xml:space="preserve">
          <source>Basically this sets the DNS record for &lt;code&gt;example.com&lt;/code&gt; to &lt;code&gt;127.0.0.1:5000&lt;/code&gt; rather than querying a DNS server
for the actual IP of the real site. This helps us trick the captcha provider into thinking that the captcha
is actually being loaded on their client's.</source>
          <target state="translated">基本上，这 &lt;code&gt;example.com&lt;/code&gt; 的DNS记录设置为 &lt;code&gt;127.0.0.1:5000&lt;/code&gt; ,而不是向DNS服务器查询实际站点的实际IP。这可以帮助我们欺骗验证码提供者，使其认为验证码实际上是在其客户端上加载的。</target>
        </trans-unit>
        <trans-unit id="a4689aa17ba52c30664d1cbd2d626c02440c8871" translate="yes" xml:space="preserve">
          <source>CaptchaHarvester</source>
          <target state="translated">CaptchaHarvester</target>
        </trans-unit>
        <trans-unit id="06eb2f0298434a2205253ad0bafc1893668bddb9" translate="yes" xml:space="preserve">
          <source>CloudProxy</source>
          <target state="translated">云端代理</target>
        </trans-unit>
        <trans-unit id="8ac4fa30873706b40c1ce1934cd117d2f81c0310" translate="yes" xml:space="preserve">
          <source>Configuring The Browser</source>
          <target state="translated">配置浏览器</target>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="translated">学分</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">说明</target>
        </trans-unit>
        <trans-unit id="bccc14ee7da1d20ff06b9ff2497087e8c7d9f28b" translate="yes" xml:space="preserve">
          <source>Discord</source>
          <target state="translated">Discord</target>
        </trans-unit>
        <trans-unit id="6d658e3b4a9ba01dcd5e064f450e95c837f53375" translate="yes" xml:space="preserve">
          <source>For help contact @&lt;code&gt;MacHacker#7322&lt;/code&gt; (Discord)</source>
          <target state="translated">如需帮助，请联系@ &lt;code&gt;MacHacker#7322&lt;/code&gt; （Discord）</target>
        </trans-unit>
        <trans-unit id="ab77231edaee5d3518142f58bef4702fb011d5e1" translate="yes" xml:space="preserve">
          <source>Has CaptchaHarvester saved you money on your project? Consider buying me a coffee for the countless hours I have
spent making your job easier?</source>
          <target state="translated">CaptchaHarvester是否为您的项目节省了资金?考虑请我喝杯咖啡吧,因为我花了无数的时间让你的工作变得更容易。</target>
        </trans-unit>
        <trans-unit id="7ca4b5181c2ec33ed753d9712d48363506b456b9" translate="yes" xml:space="preserve">
          <source>How do I use the tokens of the captcha's I solve?</source>
          <target state="translated">如何使用我解决的验证码的代币?</target>
        </trans-unit>
        <trans-unit id="b813f3dea95a7e7e0342b05d8aae2dd54fbad3cc" translate="yes" xml:space="preserve">
          <source>How do we do this the EASY way?</source>
          <target state="translated">我们如何用EASY的方式来做?</target>
        </trans-unit>
        <trans-unit id="c95593a768dbcb253cab3337146cd9943707c5bc" translate="yes" xml:space="preserve">
          <source>How do we do this the HARD way?</source>
          <target state="translated">我们如何用艰难的方式来做这件事?</target>
        </trans-unit>
        <trans-unit id="b8deb3047fa46ff3e7b14411af407cf86ce28159" translate="yes" xml:space="preserve">
          <source>If for some reason you don't want a browser launched on the start of the harvester or you want to configure it
youself, all you have to do is pass the &lt;code&gt;-b/--no-browser&lt;/code&gt; flag.</source>
          <target state="translated">如果由于某种原因您不希望在收割机启动时启动浏览器，或者想要自己配置 &lt;code&gt;-b/--no-browser&lt;/code&gt; ，则只需通过-b /-no-browser标志即可。</target>
        </trans-unit>
        <trans-unit id="09a3cac761c82f30f0a0e0f659520f86b04cad85" translate="yes" xml:space="preserve">
          <source>If you are running MacOS/Windows and have the &lt;a href=&quot;https://brave.com/&quot;&gt;Brave Browser&lt;/a&gt;
or &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Google Chrome&lt;/a&gt;, all you have to do is pass
the &lt;code&gt;-b/--browser&lt;/code&gt; flag set to either &lt;code&gt;chrome&lt;/code&gt; or &lt;code&gt;brave&lt;/code&gt;. This will automatically open
a new instance of Brave/Chrome under a temporary profile with and map the &lt;code&gt;domain&lt;/code&gt; to the
local server.</source>
          <target state="translated">如果您运行的是MacOS / Windows，并且具有&lt;a href=&quot;https://brave.com/&quot;&gt;Brave Browser&lt;/a&gt; 或&lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Google Chrome&lt;/a&gt;，那么您只需将 &lt;code&gt;-b/--browser&lt;/code&gt; 标志设置为 &lt;code&gt;chrome&lt;/code&gt; 或 &lt;code&gt;brave&lt;/code&gt; 即可。这将在临时配置文件下自动打开Brave / Chrome的新实例，并将该 &lt;code&gt;domain&lt;/code&gt; 映射到本地服务器。</target>
        </trans-unit>
        <trans-unit id="c618109fe21840a7a57a061dbca478b6494ebf8b" translate="yes" xml:space="preserve">
          <source>If you are using this project with PyArmor and or PyInstaller then fear not, it has
already been configured to work seamlessly when packages into an &lt;code&gt;.exe&lt;/code&gt; file. All you
have to do is add the following to your &lt;code&gt;.spec&lt;/code&gt; file's &lt;code&gt;Anaysis&lt;/code&gt; call.</source>
          <target state="translated">如果您将此项目与PyArmor和/或PyInstaller一起使用，请不要担心，它已经配置为在将软件包打包到 &lt;code&gt;.exe&lt;/code&gt; 文件时可以无缝工作。所有你需要做的就是以下添加到您 &lt;code&gt;.spec&lt;/code&gt; 文件的 &lt;code&gt;Anaysis&lt;/code&gt; 呼叫。</target>
        </trans-unit>
        <trans-unit id="23a20d8519c12cb90bd2a8763406e7fdb60f877f" translate="yes" xml:space="preserve">
          <source>If you need help feel free to swing by my &lt;a href=&quot;https://discord.gg/AAQrkhR&quot;&gt;Discord&lt;/a&gt;!</source>
          <target state="translated">如果您需要帮助，请随时与我的&lt;a href=&quot;https://discord.gg/AAQrkhR&quot;&gt;Discord交流&lt;/a&gt;！</target>
        </trans-unit>
        <trans-unit id="0213a1bc3f6dd8dc64018cdb81c30db31844aafa" translate="yes" xml:space="preserve">
          <source>If you want to access the tokens with a Python script, you are in luck! I've included a handy
wrapper for the API which makes things really simple. Just take a look at this example:</source>
          <target state="translated">如果你想用Python脚本来访问代币,那你就太幸运了!我已经为API加入了一个方便的包装器,这使得事情变得非常简单。我已经包含了一个方便的API封装器,这使得事情变得非常简单。看看这个例子吧。</target>
        </trans-unit>
        <trans-unit id="c3e5bfa09cabd6f79eaa2985ca0febfc9f8f4a4e" translate="yes" xml:space="preserve">
          <source>If you would like to come up with an automated solution for your OS, I am open to PR requests.</source>
          <target state="translated">如果你想为你的操作系统提供一个自动化的解决方案,我愿意接受公关请求。</target>
        </trans-unit>
        <trans-unit id="cd8af2911c37dc7bef6f5dd9a71c47d218a493bc" translate="yes" xml:space="preserve">
          <source>If your lanuage of choice isn't Python, then you can grab tokens by making calls to the API endpoints
that the harvester's server has avalible.</source>
          <target state="translated">如果你选择的语言不是Python,那么你可以通过调用收割机服务器可用的API端点来抓取代币。</target>
        </trans-unit>
        <trans-unit id="7fbcd400f1cda7a80ec7c0cb7d0f1841ccb95692" translate="yes" xml:space="preserve">
          <source>In most cases you'll probably want to use the API to fetch the tokens.</source>
          <target state="translated">在大多数情况下,你可能会想要使用API来获取代币。</target>
        </trans-unit>
        <trans-unit id="c45c12d89161a29b3c2ee6057ae5a161cc5f9774" translate="yes" xml:space="preserve">
          <source>Inspred by &lt;a href=&quot;https://github.com/Cosmo3904/Recaptcha-Harvester-V2&quot;&gt;Cosmo3904/Recaptcha-Harvester-V2&lt;/a&gt;.</source>
          <target state="translated">由&lt;a href=&quot;https://github.com/Cosmo3904/Recaptcha-Harvester-V2&quot;&gt;Cosmo3904 / Recaptcha-Harvester-V2主持&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2f529c6cbca4fb6f216ccdee95e9b749d5d9f47" translate="yes" xml:space="preserve">
          <source>List[String]</source>
          <target state="translated">列表[字符串]</target>
        </trans-unit>
        <trans-unit id="3ff97be3cff763af433c29eeb40a4587c764692c" translate="yes" xml:space="preserve">
          <source>Luckily, the easy way is pretty easy. You literally have to do nothing! However, this only works on Mac/Windows (Linux
support coming soon). Additionally, you can pass the path to a &lt;strong&gt;Chromium&lt;/strong&gt; browser binary/&lt;code&gt;.exe&lt;/code&gt; or a browser
that can be found in your $PATH envrionment variable through the &lt;code&gt;-b/--browser&lt;/code&gt;.</source>
          <target state="translated">幸运的是，简单的方法非常简单。您实际上什么都不要做！但是，这仅适用于Mac / Windows（即将支持Linux）。此外，您可以通过 &lt;code&gt;-b/--browser&lt;/code&gt; -browser 将路径传递到&lt;strong&gt;Chromium&lt;/strong&gt;浏览器binary / &lt;code&gt;.exe&lt;/code&gt; 或可以在$ PATH envrionment变量中找到的浏览器。</target>
        </trans-unit>
        <trans-unit id="0eeecd8242dfe3e4e5e38f7064e843dbdd7631bc" translate="yes" xml:space="preserve">
          <source>Made with ❤️ by &lt;a href=&quot;https://github.com/NoahCardoza&quot;&gt;@NoahCardoza&lt;/a&gt;</source>
          <target state="translated">由@NoahCardoza用&lt;a href=&quot;https://github.com/NoahCardoza&quot;&gt;❤️制成&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5de29fb047e31888189bff84addf617e55cd52ba" translate="yes" xml:space="preserve">
          <source>Mainly through the use on the &lt;code&gt;--host-rules&lt;/code&gt; Chromium flag. Here's an example:</source>
          <target state="translated">主要是通过在 &lt;code&gt;--host-rules&lt;/code&gt; Chromium标志上使用。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="a8000f6d9a3db4e6f40fa058d82f7cc54b06438e" translate="yes" xml:space="preserve">
          <source>Programtically</source>
          <target state="translated">程序上</target>
        </trans-unit>
        <trans-unit id="4f4d8bd58af9bc33d0a0890bec69a139c1ea36cb" translate="yes" xml:space="preserve">
          <source>PyArmor/PyInstaller</source>
          <target state="translated">PyArmor/PyInstaller</target>
        </trans-unit>
        <trans-unit id="643619899deccf1c9a941c05486245c8e5ade051" translate="yes" xml:space="preserve">
          <source>PyPi</source>
          <target state="translated">PyPi</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">蟒蛇</target>
        </trans-unit>
        <trans-unit id="c703dec9d9e14de8d799db54bb1883c73ea5695a" translate="yes" xml:space="preserve">
          <source>ReCaptcha: V2 vs. V3</source>
          <target state="translated">ReCaptcha:V2与V3的比较</target>
        </trans-unit>
        <trans-unit id="4999528efe0f94f8f66b1dc05aad8ebaaae7b2be" translate="yes" xml:space="preserve">
          <source>Route</source>
          <target state="translated">航线</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">设置</target>
        </trans-unit>
        <trans-unit id="677d54e4a2ad63dc543678fef08950fe8b67884b" translate="yes" xml:space="preserve">
          <source>Solve captchas yourself without having to pay for services like 2captcha for use in automated projects.</source>
          <target state="translated">自己解决验证码问题,而不需要为像2captcha这样的服务付费,以便在自动化项目中使用。</target>
        </trans-unit>
        <trans-unit id="c0994f61b9aac7e86fcad8a53357959fae9351a8" translate="yes" xml:space="preserve">
          <source>Solveing V2 Captchas with &lt;a href=&quot;https://github.com/dessant/buster&quot;&gt;Buster&lt;/a&gt;</source>
          <target state="translated">用&lt;a href=&quot;https://github.com/dessant/buster&quot;&gt;克星&lt;/a&gt;解决V2验证码</target>
        </trans-unit>
        <trans-unit id="2ff25e18559a1f42918c3d5265e7566c23680cc2" translate="yes" xml:space="preserve">
          <source>Sometimes there will be updates I'm working on that won't be pushed to the master branch/PyPi
because I haven't had time to test them. Sometimes these patches will fix problems you experience
in the stable branch, but if things get buggy don't be surprised.</source>
          <target state="translated">有时我正在做的更新不会被推送到主分支/PyPi上,因为我还没有时间去测试它们。有时这些补丁会修复你在稳定分支中遇到的问题,但如果事情变得有bug,也不要惊讶。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">字符串</target>
        </trans-unit>
        <trans-unit id="24beb9985deee2175892e1aaa0b147a522b0e87b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dev&lt;/code&gt; Branch</source>
          <target state="translated">该 &lt;code&gt;dev&lt;/code&gt; 分公司</target>
        </trans-unit>
        <trans-unit id="ae890c4e48dc04b8723ea4931e1bf514ba4d0c78" translate="yes" xml:space="preserve">
          <source>The main advantage of setting up the harvester programtically is you can
set multiple interccepter hooks to solve captchas on multiple domains.</source>
          <target state="translated">程序化设置收割机的主要好处是可以设置多个拦截器钩子来解决多个域的验证码。</target>
        </trans-unit>
        <trans-unit id="f29fd41939bbc6de937ba90984e9b7c0f45b87b4" translate="yes" xml:space="preserve">
          <source>There are a few other arguments the harvester uses to make things easier and simpler which can be found in
&lt;a href=&quot;https://github.com/NoahCardoza/CaptchaHarvester/blob/master/harvester/browser.py&quot;&gt;/harvester/browser.py&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/NoahCardoza/CaptchaHarvester/blob/master/harvester/browser.py&quot;&gt;/harvester/browser.py中&lt;/a&gt;可以找到收割机用来简化事情的其他一些论点 。</target>
        </trans-unit>
        <trans-unit id="9a13bca08b02a89f72e982e5a8f6c49a659ef53d" translate="yes" xml:space="preserve">
          <source>This is your most useful endpoint. When called it will pop a token from the queue and return it in plain text. If no tokens are available it will return a &lt;a href=&quot;https://httpstatuses.com/418&quot;&gt;418 status code&lt;/a&gt;.</source>
          <target state="translated">这是您最有用的端点。调用时，它将从队列中弹出令牌并以纯文本形式返回。如果没有可用的令牌，它将返回&lt;a href=&quot;https://httpstatuses.com/418&quot;&gt;418状态代码&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e92ababd0f077baee969e8d7c335b3205114a2b1" translate="yes" xml:space="preserve">
          <source>This project allows you to solve Google's V2 and V3 ReCaptchas as well as
hCaptchas. However, since Google's V3 ReCaptchas are based on a rating
system of your browser and browsing habits, it's slightly less reliable.</source>
          <target state="translated">这个项目可以让你解决Google的V2和V3 ReCaptchas以及hCaptchas。不过,由于Google的V3 ReCaptchas是基于你的浏览器和浏览习惯的评分系统,所以它的可靠性稍差。</target>
        </trans-unit>
        <trans-unit id="b7bf46dc58cd014abfbaff664cd514e1b262bd52" translate="yes" xml:space="preserve">
          <source>This project is also natively supported by a newer project of mine which allows you to bypass
Cloudflare's Bot Detection. It's super simlpe to setup, just follow the instructions &lt;a href=&quot;https://github.com/NoahCardoza/CloudProxy#harvester&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">我的一个较新的项目也从本地支持该项目，该项目使您可以绕过Cloudflare的Bot Detection。设置非常简单，只需按照&lt;a href=&quot;https://github.com/NoahCardoza/CloudProxy#harvester&quot;&gt;此处&lt;/a&gt;的说明进行操作即可。</target>
        </trans-unit>
        <trans-unit id="be1a14e95fb133112162867412861c509b521b40" translate="yes" xml:space="preserve">
          <source>This will return a list of all the avalible tokens in the queue. It is recomended that you never use any tokens you see in this list because then &lt;code&gt;/token&lt;/code&gt; may return an already used token.</source>
          <target state="translated">这将返回队列中所有可用令牌的列表。建议您不要使用在此列表中看到的任何令牌，因为 &lt;code&gt;/token&lt;/code&gt; 可能会返回一个已使用的令牌。</target>
        </trans-unit>
        <trans-unit id="a9b8787550aa118283c2f42ab25ddd4a566faa76" translate="yes" xml:space="preserve">
          <source>This will setup an HTTP server at &lt;code&gt;https://127.0.0.1:5000&lt;/code&gt; by default.</source>
          <target state="translated">默认情况下，这将在 &lt;code&gt;https://127.0.0.1:5000&lt;/code&gt; 上设置HTTP服务器。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">种类</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="c5c0671a0be6041e5f1d3866fb7667e4202e512d" translate="yes" xml:space="preserve">
          <source>Use Cases</source>
          <target state="translated">使用案例</target>
        </trans-unit>
        <trans-unit id="188e999acded8422599aaefff54e44481c3e5600" translate="yes" xml:space="preserve">
          <source>When accessing the server to collect the tokens you have to do it the right way and you can't connect to it
just like any old server. You configure your browser to think that the server is actually the site we want
to collect captcha tokens for</source>
          <target state="translated">在访问服务器收集令牌的时候,你必须用正确的方式,不能像普通的服务器一样连接到它。你要配置你的浏览器,让它认为这个服务器实际上是我们要收集验证码的网站。</target>
        </trans-unit>
        <trans-unit id="921cf36ac899ac816dd480faa8b1be9a7c9dbfbe" translate="yes" xml:space="preserve">
          <source>When solving Google's v3 captchas, you should login to a Google Account first. The v3 captcha's
work of a raiting system of your browsing habits. They are a little finicky compared to their v2
predecessors. If the tokens stop working, you should start using a different Google Account or
wait a little bit between reloading the captcha harvester page.</source>
          <target state="translated">在解决Google的V3验证码时,你应该先登录一个Google账户。v3验证码的工作是对你的浏览习惯进行突击检查。与v2的前辈相比,它们有点微妙。如果令牌停止工作,你应该开始使用不同的谷歌帐户或等待一点点之间重新加载验证码收获页面。</target>
        </trans-unit>
        <trans-unit id="8eea4e2d81d87dc9dc0e4d1f9ef3e36b86abf6be" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;-b&lt;/code&gt;, a browser instance will be lanuched that's totally disconnected from your main Profile
(unless you pass &lt;code&gt;-r&lt;/code&gt;, which &lt;em&gt;MIGHT&lt;/em&gt; be buggy on Windows).</source>
          <target state="translated">当使用 &lt;code&gt;-b&lt;/code&gt; ，浏览器实例将lanuched这是完全不同于你的主配置文件断开连接（除非你通过 &lt;code&gt;-r&lt;/code&gt; ，其中&lt;em&gt;MIGHT&lt;/em&gt;是越野车在Windows上）。</target>
        </trans-unit>
        <trans-unit id="00761b5837e6754cd93df29269a9e528dbccb587" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;&amp;lt;domain&amp;gt;&lt;/code&gt; is the domain the harvester was lanuched on. We need this because the harvester supports intercepting multiple domains at a time.</source>
          <target state="translated">其中 &lt;code&gt;&amp;lt;domain&amp;gt;&lt;/code&gt; 是收割机所使用的域。我们需要这样做，因为收割机支持一次拦截多个域。</target>
        </trans-unit>
        <trans-unit id="f91e7f3452ac124fc13d7719c8608082343af961" translate="yes" xml:space="preserve">
          <source>You can check out &lt;a href=&quot;example.py&quot;&gt;example.py&lt;/a&gt; to see how to progamatically
start the server and access the tokens by integrating the harvester with
your existsing (or new) code.</source>
          <target state="translated">您可以检出&lt;a href=&quot;example.py&quot;&gt;example.py，&lt;/a&gt;以了解如何通过将收割机与现有（或新的）代码集成来以编程方式启动服务器和访问令牌。</target>
        </trans-unit>
        <trans-unit id="04fb40e31c0d6d7fc8a915772bd89155c8fb58e2" translate="yes" xml:space="preserve">
          <source>You might find it useful to use &lt;a href=&quot;https://github.com/dessant/buster&quot;&gt;Buster&lt;/a&gt; when solving V2 Captchas.
You can clone and build the extension for chrome, and then pass the path of the built extension
to harvester with the &lt;code&gt;-e/--load-extension&lt;/code&gt; flag.</source>
          <target state="translated">解决V2验证码时，使用&lt;a href=&quot;https://github.com/dessant/buster&quot;&gt;Buster&lt;/a&gt;可能会很有用。您可以克隆和构建chrome扩展名，然后使用 &lt;code&gt;-e/--load-extension&lt;/code&gt; 标志将构建的扩展名的路径传递给收割机。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
