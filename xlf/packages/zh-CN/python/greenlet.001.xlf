<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/greenlet/">
    <body>
      <group id="greenlet">
        <trans-unit id="adaf11e77976b1db3da41bdce39ee80caf89a041" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;greenlet&amp;rdquo;, on the other hand, is a still more primitive notion of
micro-thread with no implicit scheduling; coroutines, in other
words. This is useful when you want to control exactly when your code
runs. You can build custom scheduled micro-threads on top of greenlet;
however, it seems that greenlets are useful on their own as a way to
make advanced control flow structures. For example, we can recreate
generators; the difference with Python&amp;rsquo;s own generators is that our
generators can call nested functions and the nested functions can
yield values too. Additionally, you don&amp;rsquo;t need a &amp;ldquo;yield&amp;rdquo; keyword. See
the example in tests/test_generator.py.</source>
          <target state="translated">另一方面，&amp;ldquo; greenlet&amp;rdquo;是更原始的微线程概念，没有隐式调度。换句话说，协程。当您想精确控制代码运行的时间时，这很有用。您可以在greenlet之上构建自定义的预定微线程。但是，greenlet本身可以用作制作高级控制流结构的一种方法。例如，我们可以重新创建生成器；与Python自己的生成器的区别在于我们的生成器可以调用嵌套函数，并且嵌套函数也可以产生值。此外，您不需要&amp;ldquo; yield&amp;rdquo;关键字。请参阅tests / test_generator.py中的示例。</target>
        </trans-unit>
        <trans-unit id="60014bf21723832fcd770695f34a2ac6aec40c31" translate="yes" xml:space="preserve">
          <source>Concurrence</source>
          <target state="translated">协商一致</target>
        </trans-unit>
        <trans-unit id="7520bc16833b40c80f4836415af1e67e592d9eb1" translate="yes" xml:space="preserve">
          <source>Documentation is available on readthedocs.org:
&lt;a href=&quot;https://greenlet.readthedocs.io&quot;&gt;https://greenlet.readthedocs.io&lt;/a&gt;</source>
          <target state="translated">可在readthedocs.org上找到文档：&lt;a href=&quot;https://greenlet.readthedocs.io&quot;&gt;https&lt;/a&gt; ://greenlet.readthedocs.io</target>
        </trans-unit>
        <trans-unit id="b9da9768d496d27402246e22f29b0761f331bfbc" translate="yes" xml:space="preserve">
          <source>Eventlet</source>
          <target state="translated">活动单元</target>
        </trans-unit>
        <trans-unit id="7efd500ce749859ca01e5cc53af1010721d004f0" translate="yes" xml:space="preserve">
          <source>Getting Greenlet</source>
          <target state="translated">获得Greenlet</target>
        </trans-unit>
        <trans-unit id="17c6bf64bf960c6bdea9f0d103dff20d00bac154" translate="yes" xml:space="preserve">
          <source>Gevent</source>
          <target state="translated">Gevent</target>
        </trans-unit>
        <trans-unit id="8acb83f8c59e6a6e068dd420a5d0211d89e1d7f1" translate="yes" xml:space="preserve">
          <source>Greenlets are lightweight coroutines for in-process concurrent
programming.</source>
          <target state="translated">Greenlets是用于进程内并发编程的轻量级coroutines。</target>
        </trans-unit>
        <trans-unit id="f27faa7a89962aeacdd62df8f836120e07b78ab3" translate="yes" xml:space="preserve">
          <source>Greenlets are provided as a C extension module for the regular
unmodified interpreter.</source>
          <target state="translated">Greenlets是作为常规未修改的解释器的C扩展模块提供的。</target>
        </trans-unit>
        <trans-unit id="e40cbbce7df1c68eee0b19a19ffb661a38fea3fa" translate="yes" xml:space="preserve">
          <source>Lightweight in-process concurrent programming</source>
          <target state="translated">轻量级进程内并发编程</target>
        </trans-unit>
        <trans-unit id="e7ec99eb4b2a357ad2c0bdfbf1b28a834e064c15" translate="yes" xml:space="preserve">
          <source>Source code archives and windows installers are available on the
python package index at &lt;a href=&quot;https://pypi.python.org/pypi/greenlet&quot;&gt;https://pypi.python.org/pypi/greenlet&lt;/a&gt;</source>
          <target state="translated">python包索引中提供了源代码存档和Windows安装程序，&lt;a href=&quot;https://pypi.python.org/pypi/greenlet&quot;&gt;网址&lt;/a&gt;为https://pypi.python.org/pypi/greenlet</target>
        </trans-unit>
        <trans-unit id="b2dc5153f8439f3cb766c2df9f108c08510ba3b0" translate="yes" xml:space="preserve">
          <source>The easiest way to get Greenlet is to install it with pip or
easy_install:</source>
          <target state="translated">获取Greenlet最简单的方法是用pip或easy_install安装。</target>
        </trans-unit>
        <trans-unit id="2deb206c5b8f85bdbe71c431cb50181956dfffdf" translate="yes" xml:space="preserve">
          <source>The greenlet package is a spin-off of Stackless, a version of CPython
that supports micro-threads called &amp;ldquo;tasklets&amp;rdquo;. Tasklets run
pseudo-concurrently (typically in a single or a few OS-level threads)
and are synchronized with data exchanges on &amp;ldquo;channels&amp;rdquo;.</source>
          <target state="translated">greenlet软件包是Stackless的衍生产品，Stackless是CPython的一种版本，它支持称为&amp;ldquo; tasklets&amp;rdquo;的微线程。 Tasklet伪并行运行（通常在单个或几个OS级线程中运行），并与&amp;ldquo;通道&amp;rdquo;上的数据交换同步。</target>
        </trans-unit>
        <trans-unit id="9420aa3967b9c02613ac42e1885a5577856eaefe" translate="yes" xml:space="preserve">
          <source>The source code repository is hosted on github:
&lt;a href=&quot;https://github.com/python-greenlet/greenlet&quot;&gt;https://github.com/python-greenlet/greenlet&lt;/a&gt;</source>
          <target state="translated">源代码存储库托管在github上：&lt;a href=&quot;https://github.com/python-greenlet/greenlet&quot;&gt;https&lt;/a&gt; : //github.com/python-greenlet/greenlet</target>
        </trans-unit>
        <trans-unit id="fb772fb5d10a97b18252ef57c9235142ecf5d922" translate="yes" xml:space="preserve">
          <source>There are several libraries that use Greenlet as a more flexible
alternative to Python&amp;rsquo;s built in coroutine support:</source>
          <target state="translated">有一些库使用Greenlet作为Python内置协程支持的更灵活替代：</target>
        </trans-unit>
        <trans-unit id="aa78f0f42358f5844d68bc1f02e3f2d268741a61" translate="yes" xml:space="preserve">
          <source>Who is using Greenlet?</source>
          <target state="translated">谁在使用Greenlet?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
