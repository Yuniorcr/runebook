<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/floraconcierge-client/">
    <body>
      <group id="floraconcierge-client">
        <trans-unit id="9e5809d74e50c1a36c02f6e86167a4d14c24e662" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_ID` Required. Your application ID.</source>
          <target state="translated">*`FLORACONCIERGE_API_ID`是必需的。您的应用程序ID。</target>
        </trans-unit>
        <trans-unit id="7c4c1cfdcce56720a052a3f528d93d15ba869bfd" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_INIT_CLIENT` Optional. Custom api client initiation function. By default middleware initiate</source>
          <target state="translated">*`FLORACONCIERGE_API_INIT_CLIENT`可选。自定义api客户端启动功能。默认情况下，中间件启动</target>
        </trans-unit>
        <trans-unit id="e0013a6babd9e8081219bc701075ff74eced73bf" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_INIT_ENV` Optional. You can setup custom init function for env setup. Function takes params</source>
          <target state="translated">* FLORACONCIERGE_API_INIT_ENV`可选。您可以为环境设置设置自定义init函数。功能需要参数</target>
        </trans-unit>
        <trans-unit id="30f260257dec70272c8c693b5ec13765e60b4355" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_API_SECRET` Required. Your application secret.</source>
          <target state="translated">*`FLORACONCIERGE_API_SECRET`是必需的。您的应用程序秘密。</target>
        </trans-unit>
        <trans-unit id="7dbfaf9c936b642b9df619507e4c5ba7ffaf0a35" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_CHAT_SECRET` Optional. Secret key for chat.</source>
          <target state="translated">*`FLORACONCIERGE_CHAT_SECRET`可选。聊天的秘密密钥。</target>
        </trans-unit>
        <trans-unit id="78a6be4bf0b208c8897ec7a0aa7e98e2451c38b1" translate="yes" xml:space="preserve">
          <source>* `FLORACONCIERGE_PRODUCT_IMAGES` Optional. Can be used to customize product images urls by this dict. Generated urls added automatically to</source>
          <target state="translated">*`FLORACONCIERGE_PRODUCT_IMAGES`可选。可以用于根据此字典来自定义产品图片网址。生成的网址会自动添加到</target>
        </trans-unit>
        <trans-unit id="82ea1180dbf1f96e408930e3d9e95c59a82b4ba5" translate="yes" xml:space="preserve">
          <source>After application installation to your apps, you must add `floraconcierge.apiauth.backends.FloraConciergeBackend` to</source>
          <target state="translated">当应用程序安装到您的应用程序后,您必须将`floraconcierge.apiauth.backends.FloraConciergeBackend`添加到应用程序中。</target>
        </trans-unit>
        <trans-unit id="89870ca2cdc28e9710565809cfd4d89b3b824eea" translate="yes" xml:space="preserve">
          <source>After this users will can login on your site throught floraconcierge api by standart django authentication framework.</source>
          <target state="translated">这样用户就可以通过站内的django认证框架,通过floraconcierge api登录你的网站。</target>
        </trans-unit>
        <trans-unit id="d2f8a69d4e6d2332d2d636f728228e6c0a46671e" translate="yes" xml:space="preserve">
          <source>All information at http://www.floraexpress.ru/</source>
          <target state="translated">所有信息见http://www.floraexpress.ru/</target>
        </trans-unit>
        <trans-unit id="21c27a506f8fe2f0cd31b59f94b8c1bf3e4a9b1d" translate="yes" xml:space="preserve">
          <source>All settings used in middleware only, if you want manual initiation of api client object, you can do it yourself.</source>
          <target state="translated">所有的设置只在中间件中使用,如果你想手动启动api客户端对象,你可以自己动手。</target>
        </trans-unit>
        <trans-unit id="999136d582f003a9742f3e0abf11bf4b30780124" translate="yes" xml:space="preserve">
          <source>Also available debug panel for django.</source>
          <target state="translated">也可用于django的调试面板。</target>
        </trans-unit>
        <trans-unit id="8d8410397a205b13699dbabba44a7261a90d99a5" translate="yes" xml:space="preserve">
          <source>Also you can add `floraconcierge.middleware.ApiObjectNotFound404` to your middlewares for automatic 404 pages when</source>
          <target state="translated">您也可以在您的中间件中添加`floraconcierge.middleware.ApiObjectNotFound404`,以便在您的中间件中出现自动404页面。</target>
        </trans-unit>
        <trans-unit id="b5b62e9fadd00e70f530a824cc50a1161be51834" translate="yes" xml:space="preserve">
          <source>And you must add `floraconcierge` to your `INSTALLED_APPS`.</source>
          <target state="translated">你必须在你的 &quot;INSTALLED_APPS &quot;中添加 &quot;floraconcierge&quot;。</target>
        </trans-unit>
        <trans-unit id="4e14af933a0e8370ca9b0d4237c4b647888bce09" translate="yes" xml:space="preserve">
          <source>ApiAuth authentication backend</source>
          <target state="translated">ApiAuth认证后端</target>
        </trans-unit>
        <trans-unit id="277a0831ffa6dd7df99804a3bbb855b456ec1f81" translate="yes" xml:space="preserve">
          <source>Available settings</source>
          <target state="translated">可用的设置</target>
        </trans-unit>
        <trans-unit id="55ef292b5de2a84a8f61f3720e7422ffe9843f33" translate="yes" xml:space="preserve">
          <source>Collection methods</source>
          <target state="translated">收集方法</target>
        </trans-unit>
        <trans-unit id="3e00341654277d7decc886df1e41eee6c8669e6a" translate="yes" xml:space="preserve">
          <source>Django debug toolbar panel</source>
          <target state="translated">Django调试工具条面板</target>
        </trans-unit>
        <trans-unit id="6078f328df57afb18cc95b8947ae2873c540a834" translate="yes" xml:space="preserve">
          <source>FloraConcierge api provides simple request lifetime cache object for caching offen queried data on page. This cache</source>
          <target state="translated">FloraConcierge api提供了简单的请求终身缓存对象,用于缓存页面上的offen查询数据。这个缓存</target>
        </trans-unit>
        <trans-unit id="231f567238f896c431d3a76575409cfdcf9202aa" translate="yes" xml:space="preserve">
          <source>FloraConcierge is worldwide flowers delivery service. We provide api services for</source>
          <target state="translated">FloraConcierge是全球鲜花配送服务。我们提供的api服务包括</target>
        </trans-unit>
        <trans-unit id="c10c93350b9ab2af776c9f3578a32686d5ed3255" translate="yes" xml:space="preserve">
          <source>FloraExpress API python client library. www.floraexpress.ru</source>
          <target state="translated">FloraExpress API python客户端库。www.floraexpress.ru。</target>
        </trans-unit>
        <trans-unit id="5df5ba4880462b2427cfbce690398bc2a17ef4ee" translate="yes" xml:space="preserve">
          <source>Now you can search throught your result collections with find/findall methods.</source>
          <target state="translated">现在你可以用find/findall方法在你的结果集合中搜索。</target>
        </trans-unit>
        <trans-unit id="c69b298ea6ed4be4aae2303aa007ea35469dd25d" translate="yes" xml:space="preserve">
          <source>Request cache middleware</source>
          <target state="translated">请求缓存中间件</target>
        </trans-unit>
        <trans-unit id="95e4dd9d6dcf3a9442ceda4d885c51788418d862" translate="yes" xml:space="preserve">
          <source>Version 0.7.52</source>
          <target state="translated">0.7.52版本</target>
        </trans-unit>
        <trans-unit id="ce7d7687eb3af6a421f5e95ac3d88e4e8abf7988" translate="yes" xml:space="preserve">
          <source>You can add `floraconcierge.middleware.RequestCacheMiddleware` to your `MIDDLEWARE_CLASSES` and get request cache</source>
          <target state="translated">您可以将`floraconcierge.middleware.RequestCacheMiddleware`添加到您的`MIDDLEWARE_CLASSES`中,并获得请求缓存。</target>
        </trans-unit>
        <trans-unit id="58a7dc6f2433fc501a0979dacbf050a24264f9f4" translate="yes" xml:space="preserve">
          <source>You can add `floraconcierge.panels.FloraConciergeRequests` to django debug panels settings `DEBUG_TOOLBAR_PANELS`.</source>
          <target state="translated">你可以将`floraconcierge.panels.FloraConciergeRequests`添加到django调试面板设置`DEBUG_TOOLBAR_PANELS`中。</target>
        </trans-unit>
        <trans-unit id="35b9ea9a31aed5a051da7ad426c39030ea2bb2d9" translate="yes" xml:space="preserve">
          <source>You can add support for logging in users on your site with api by adding `floraconcierge.apiauth` to your `INSTALLED_APPS`.</source>
          <target state="translated">你可以通过在你的 &quot;INSTALLED_APPS &quot;中添加`floraconcierge.apiauth`来支持在你的网站上用api登录用户。</target>
        </trans-unit>
        <trans-unit id="2b480a6d677e513fb34c02be3b0692f735cd89f2" translate="yes" xml:space="preserve">
          <source>You can simple install floraconcierge api client into your django environment by adding middleware</source>
          <target state="translated">你可以通过添加中间件,简单地将floraconcierge api客户端安装到你的django环境中。</target>
        </trans-unit>
        <trans-unit id="65c1a4ce23248d829300703e06d7ddb1c82de3a8" translate="yes" xml:space="preserve">
          <source>You must inherit your cache object from `floraconcierge.cache.RequestCache` and setup it via `FLORACONCIERGE_CACHE_CLASS`.</source>
          <target state="translated">你必须从`floraconcierge.cache.RequestCache`继承你的缓存对象,并通过`FLORACONCIERGE_CACHE_CLASS`进行设置。</target>
        </trans-unit>
        <trans-unit id="de31c7a46a967d0fd879bdb4283fbe5534da8403" translate="yes" xml:space="preserve">
          <source>`client, request, restored` where client is ApiClient instance, request is django request object and restored is flag</source>
          <target state="translated">`client，request，restore`，其中client是ApiClient实例，request是django请求对象，restore是flag</target>
        </trans-unit>
        <trans-unit id="12c32971519b71317865e4d4305b8d0263a60992" translate="yes" xml:space="preserve">
          <source>`floraconcierge.middleware.ApiClientMiddleware` to your `MIDDLEWARE_CLASSES`.</source>
          <target state="translated">将`floraconcierge.middleware.ApiClientMiddleware`添加到您的`MIDDLEWARE_CLASSES`。</target>
        </trans-unit>
        <trans-unit id="1f03fde2da1017ae0c46c3740e6cf73e91d84a32" translate="yes" xml:space="preserve">
          <source>`{{ product.urls.thumb }}`. Available default sizes: default, small, middle, big, thumb_100, thumb_250, thumb_500.</source>
          <target state="translated">{{product.urls.thumb}}`。可用的默认大小：默认，小，中，大，thumb_100，thumb_250，thumb_500。</target>
        </trans-unit>
        <trans-unit id="1731b5a863c78122fbd72d8b81272934e5e88bb4" translate="yes" xml:space="preserve">
          <source>api result raises ResultObjectNotFoundError.</source>
          <target state="translated">api result会引发ResultObjectNotFoundError。</target>
        </trans-unit>
        <trans-unit id="6d2d2e03448c49b65436dfac6aa543c814d73ff4" translate="yes" xml:space="preserve">
          <source>building your own flowers delivery e-commerce and submit users orders into our system.</source>
          <target state="translated">建立自己的鲜花配送电商,将用户订单提交到我们的系统中。</target>
        </trans-unit>
        <trans-unit id="6fd9e78aebd682e8acc006f20149cc7d75f0fb67" translate="yes" xml:space="preserve">
          <source>cleares automatically every next request.</source>
          <target state="translated">每次下一次请求都会自动清除。</target>
        </trans-unit>
        <trans-unit id="a6713cfc9aeea3c7f9f01026ce34efb19688aadb" translate="yes" xml:space="preserve">
          <source>client with function `floraconcierge.middleware.initialize_apiclient`. You can se your own function. Function take</source>
          <target state="translated">使用函数`floraconcierge.middleware.initialize_apiclient`来实现客户端。你可以使用自己的函数。函数采取</target>
        </trans-unit>
        <trans-unit id="a76db04d3532f1dd0ef95fb09e94824c95a25f64" translate="yes" xml:space="preserve">
          <source>instance with function `floraconcierge.cache.get_request_cache()`.</source>
          <target state="translated">用函数`floraconcierge.cache.get_request_cache()`实现实例。</target>
        </trans-unit>
        <trans-unit id="ad826fcc3dc50e42d26f9ed676af9a273139e204" translate="yes" xml:space="preserve">
          <source>only one param `request`.</source>
          <target state="translated">只有一个参数`request`。</target>
        </trans-unit>
        <trans-unit id="0dcf7470569e9b278cc8248c99a07b25fd50b4c6" translate="yes" xml:space="preserve">
          <source>product `urls` field. You can get product image url with `product.urls['thumb']` or in Django Template by calling</source>
          <target state="translated">产品`urls`字段。你可以用`product.urls['thumb']`或者在Django模板中通过调用</target>
        </trans-unit>
        <trans-unit id="ed96bbd7ce05dca41e30cb65bf52c59e0997af05" translate="yes" xml:space="preserve">
          <source>variable indicating client env was restored from request session.</source>
          <target state="translated">变量,表示客户端环境已从请求会话中恢复。</target>
        </trans-unit>
        <trans-unit id="2c15a6124162abe90825137bfc6e8e80cd3b497b" translate="yes" xml:space="preserve">
          <source>your `AUTHENTICATION_BACKENDS`.</source>
          <target state="translated">您的`AUTHENTICATION_BACKENDS`。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
