<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/bcpandas/">
    <body>
      <group id="bcpandas">
        <trans-unit id="2b84ff96244431fc59487bc112f83689f35d35f4" translate="yes" xml:space="preserve">
          <source>(continuing example above)</source>
          <target state="translated">（以上继续示例）</target>
        </trans-unit>
        <trans-unit id="b89a64dfe77728c2429687df2f1e767d89d04235" translate="yes" xml:space="preserve">
          <source>:white_check_mark:</source>
          <target state="translated">：white_check_mark：</target>
        </trans-unit>
        <trans-unit id="76e3d5524e143855957921563877ecc340a8f38d" translate="yes" xml:space="preserve">
          <source>:x:</source>
          <target state="translated">：X：</target>
        </trans-unit>
        <trans-unit id="4836865bbd25774ba0868873e41dc65975fb0b06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/bcp-utility&quot;&gt;BCP&lt;/a&gt; Utility</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/bcp-utility&quot;&gt;BCP&lt;/a&gt;实用程序</target>
        </trans-unit>
        <trans-unit id="581cf8b96b273994f1a0d32ae2f89feaeb9924f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/titan550/bcpy&quot;&gt;bcpy&lt;/a&gt; has several flaws:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/titan550/bcpy&quot;&gt;bcpy&lt;/a&gt;有几个缺陷：</target>
        </trans-unit>
        <trans-unit id="eb1a5258765bef87dcfb5a45d1928686e8a6cf66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numpy.NaN&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.NaN&lt;/code&gt; ， &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ffae9028254c446fd16cb7e3ef77614349ed5c61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numpy.inf&lt;/code&gt; (fails, as expected)</source>
          <target state="translated">&lt;code&gt;numpy.inf&lt;/code&gt; （按预期失败）</target>
        </trans-unit>
        <trans-unit id="12224a99522728ff06bc19e04f22478701fd4838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas&lt;/code&gt; &amp;gt;= 0.19</source>
          <target state="translated">&lt;code&gt;pandas&lt;/code&gt; &amp;gt; = 0.19</target>
        </trans-unit>
        <trans-unit id="4d8d5146c6e6d799c74cb3a5840b3bdfa3b1762d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pyodbc&lt;/code&gt; as the &lt;a href=&quot;https://docs.sqlalchemy.org/en/13/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc&quot;&gt;supported DBAPI&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pyodbc&lt;/code&gt; 作为受&lt;a href=&quot;https://docs.sqlalchemy.org/en/13/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc&quot;&gt;支持的DBAPI&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cd74a966d207661429813a8a660a3e30d9f23cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pytest-cov&lt;/code&gt; (which uses &lt;code&gt;coverage.py&lt;/code&gt; under the hood) is used to measure code coverage. This is then uploaded to &lt;a href=&quot;https://codecov.io/gh/yehoshuadimarsky/bcpandas&quot;&gt;codecov.io&lt;/a&gt; as part of the CI/CD process (see below).</source>
          <target state="translated">&lt;code&gt;pytest-cov&lt;/code&gt; （在后台使用 &lt;code&gt;coverage.py&lt;/code&gt; ）用于测量代码覆盖率。然后，将其作为CI / CD流程的一部分上传到&lt;a href=&quot;https://codecov.io/gh/yehoshuadimarsky/bcpandas&quot;&gt;codecov.io&lt;/a&gt;（请参见下文）。</target>
        </trans-unit>
        <trans-unit id="8bb5f287cc1e42d12a5d8ba03efe21e809edff80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sqlalchemy&lt;/code&gt; &amp;gt;= 1.1.4</source>
          <target state="translated">&lt;code&gt;sqlalchemy&lt;/code&gt; &amp;gt; = 1.1.4</target>
        </trans-unit>
        <trans-unit id="78255068df60a5f13b5c2f02554a2d1bfd983874" translate="yes" xml:space="preserve">
          <source>&lt;del&gt;If there is a NaN/Null in the last column of the dataframe it will throw an error. This is due to a BCP issue. See my issue with Microsoft about this &lt;a href=&quot;https://github.com/MicrosoftDocs/sql-docs/issues/2689&quot;&gt;here&lt;/a&gt;.&lt;/del&gt; This doesn't seem to be a problem based on the tests.</source>
          <target state="translated">&lt;del&gt;如果数据帧的最后一列中存在NaN / Null，则将引发错误。这是由于BCP问题。&lt;a href=&quot;https://github.com/MicrosoftDocs/sql-docs/issues/2689&quot;&gt;在这里&lt;/a&gt;查看与Microsoft有关的问题。&lt;/del&gt; 根据测试，这似乎不是问题。</target>
        </trans-unit>
        <trans-unit id="5443a8fe489f4b2a5e21a2be54853312785f5021" translate="yes" xml:space="preserve">
          <source>A convoluted, overly class-based internal design</source>
          <target state="translated">复杂的、过于类的内部设计。</target>
        </trans-unit>
        <trans-unit id="8136ea47893bb6bb3bdd2662707167d1e50ba885" translate="yes" xml:space="preserve">
          <source>An empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) in the dataframe becomes &lt;code&gt;NULL&lt;/code&gt; in the SQL database instead of remaining an empty string.</source>
          <target state="translated">数据框中的空字符串（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）在SQL数据库中变为 &lt;code&gt;NULL&lt;/code&gt; ，而不是保留空字符串。</target>
        </trans-unit>
        <trans-unit id="812ab620f478475a5ebda099456721c6c7e0043d" translate="yes" xml:space="preserve">
          <source>Any version of Microsoft SQL Server. Can be installed on-prem, in the cloud, on a VM, or one of the Azure versions.</source>
          <target state="translated">任何版本的Microsoft SQL Server。可以安装在内部、云端、虚拟机或Azure版本之一。</target>
        </trans-unit>
        <trans-unit id="14148fbce0183b3e58b829b94ac9721f58af64ec" translate="yes" xml:space="preserve">
          <source>As you can see, pandas native clearly wins here</source>
          <target state="translated">正如你所看到的,大熊猫本地人显然在这里赢了</target>
        </trans-unit>
        <trans-unit id="b3ec344f6d5bb6015e30100abb1ebc72a7d36b1b" translate="yes" xml:space="preserve">
          <source>BCPandas</source>
          <target state="translated">BCPandas</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">背景资料</target>
        </trans-unit>
        <trans-unit id="7850ad1fb073003cae12f25032a05442a117f1f5" translate="yes" xml:space="preserve">
          <source>Bcpandas has been tested with all ASCII characters 32-127. Unicode characters beyond that range have not been tested.</source>
          <target state="translated">Bcpandas已经测试了所有ASCII字符32-127。超出该范围的Unicode字符尚未测试。</target>
        </trans-unit>
        <trans-unit id="145a0a84fd6f860c424ac5c3d09d21d33d00f5fa" translate="yes" xml:space="preserve">
          <source>Bcpandas requires a &lt;code&gt;bcpandas.SqlCreds&lt;/code&gt; object in order to use it, and also a &lt;code&gt;sqlalchemy.Engine&lt;/code&gt;. The user has 2 options when constructing it.</source>
          <target state="translated">Bcpandas需要 &lt;code&gt;bcpandas.SqlCreds&lt;/code&gt; 为了使用它的对象，也是一个 &lt;code&gt;sqlalchemy.Engine&lt;/code&gt; 。构造时，用户有2个选项。</target>
        </trans-unit>
        <trans-unit id="3508d1816f504c4af81ecdd0323b15ea7c25b474" translate="yes" xml:space="preserve">
          <source>Because bcpandas first outputs to CSV, it needs to use several specific characters to create the CSV, including a &lt;em&gt;delimiter&lt;/em&gt; and a &lt;em&gt;quote character&lt;/em&gt;. Bcpandas attempts to use  characters that are not present in the dataframe for this, going through the possilbe delimiters and quote characters specified in &lt;code&gt;constants.py&lt;/code&gt;. If all possible characters are present in the dataframe and bcpandas cannot find both a delimiter and quote character to use, it will throw an error.</source>
          <target state="translated">因为bcpandas首先输出为CSV，所以它需要使用几个特定的​​字符来创建CSV，包括&lt;em&gt;定界符&lt;/em&gt;和&lt;em&gt;引号字符&lt;/em&gt;。为此，Bcpandas尝试使用数据框中不存在的字符，通过possilbe分隔符并引用 &lt;code&gt;constants.py&lt;/code&gt; 中指定的字符。如果数据框中存在所有可能的字符，并且bcpandas找不到要使用的分隔符和引号字符，则将引发错误。</target>
        </trans-unit>
        <trans-unit id="db706274a149e8745c23ef55afb14dbd27aa7f2e" translate="yes" xml:space="preserve">
          <source>Because it is still much slower</source>
          <target state="translated">因为它还是慢了很多</target>
        </trans-unit>
        <trans-unit id="8eb442ba9fc29343f2fcc7b8c56d33281f7d96dc" translate="yes" xml:space="preserve">
          <source>Because you are forced to set the &lt;code&gt;chunksize&lt;/code&gt; parameter to a very small number for it to work - generally a bit less then &lt;code&gt;2100/&amp;lt;number of columns&amp;gt;&lt;/code&gt;. This is because SQL Server can only accept up to 2100 parameters in a query. See &lt;a href=&quot;https://stackoverflow.com/questions/50689082/to-sql-pyodbc-count-field-incorrect-or-syntax-error&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/mkleehammer/pyodbc/issues/217&quot;&gt;here&lt;/a&gt; for more discussion on this, and the recommendation to use a bulk insert tool such as BCP. It seems that SQL Server simply didn't design the regular &lt;code&gt;INSERT&lt;/code&gt; statement to support huge amounts of data.</source>
          <target state="translated">因为您不得不将 &lt;code&gt;chunksize&lt;/code&gt; 参数设置为一个很小的数字才能正常工作-通常比 &lt;code&gt;2100/&amp;lt;number of columns&amp;gt;&lt;/code&gt; 少一点。这是因为SQL Server在一个查询中最多只能接受2100个参数。有关&lt;a href=&quot;https://stackoverflow.com/questions/50689082/to-sql-pyodbc-count-field-incorrect-or-syntax-error&quot;&gt;此&lt;/a&gt;方面的更多讨论以及使用大容量插入工具（如BCP）的建议，请参见此处和&lt;a href=&quot;https://github.com/mkleehammer/pyodbc/issues/217&quot;&gt;此处&lt;/a&gt;。似乎SQL Server只是没有设计常规的 &lt;code&gt;INSERT&lt;/code&gt; 语句来支持大量数据。</target>
        </trans-unit>
        <trans-unit id="4f46ac72b3634f96c6860b1ed26d9d4cd71d21aa" translate="yes" xml:space="preserve">
          <source>Benchmarks</source>
          <target state="translated">基准</target>
        </trans-unit>
        <trans-unit id="25ef1b4378fab2acfcb4bfaec56de16f3a8c47fd" translate="yes" xml:space="preserve">
          <source>CI/CD</source>
          <target state="translated">CI/CD</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">指挥部</target>
        </trans-unit>
        <trans-unit id="ecf2e3b26ea2414a35178b19b8880b296c3d6d18" translate="yes" xml:space="preserve">
          <source>Conda</source>
          <target state="translated">Conda</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">贡献</target>
        </trans-unit>
        <trans-unit id="041c9624ae9bde19cfe1b3aef4bcbfd516a3e4f2" translate="yes" xml:space="preserve">
          <source>Create creds (see next section)</source>
          <target state="translated">创建证书(见下一节</target>
        </trans-unit>
        <trans-unit id="d2277c2470dce46d0446e41643b36dc157685d59" translate="yes" xml:space="preserve">
          <source>Create the bcpandas &lt;code&gt;SqlCreds&lt;/code&gt; object with just the minimum attributes needed (server, database, username, password), and bcpandas will create a full &lt;code&gt;Engine&lt;/code&gt; object from this. It will use &lt;code&gt;pyodbc&lt;/code&gt;, &lt;code&gt;sqlalchemy&lt;/code&gt;, and the Microsoft ODBC Driver for SQL Server, and will store it in the &lt;code&gt;.engine&lt;/code&gt; attribute.</source>
          <target state="translated">仅使用所需的最少属性（服务器，数据库，用户名，密码）创建bcpandas &lt;code&gt;SqlCreds&lt;/code&gt; 对象，然后bcpandas将由此创建完整的 &lt;code&gt;Engine&lt;/code&gt; 对象。它将使用 &lt;code&gt;pyodbc&lt;/code&gt; ， &lt;code&gt;sqlalchemy&lt;/code&gt; 和SQL Server的Microsoft ODBC驱动程序，并将其存储在 &lt;code&gt;.engine&lt;/code&gt; 属性中。</target>
        </trans-unit>
        <trans-unit id="0f9a3d3c77a3e5189127aec138f272b3273064f5" translate="yes" xml:space="preserve">
          <source>Credential/Connection object</source>
          <target state="translated">凭证/连接对象</target>
        </trans-unit>
        <trans-unit id="d023b329fe7007e5bb9557b9d934149be38715d5" translate="yes" xml:space="preserve">
          <source>Data types: All ASCII characters 32-127 (using the Hypothesis library, see below). Unicode characters beyond that range have not been tested.</source>
          <target state="translated">数据类型。所有ASCII字符32-127(使用Hypothesis库,见下文)。超出该范围的Unicode字符尚未测试。</target>
        </trans-unit>
        <trans-unit id="61074f1c958d6cdd32dad889b3d58a2d0704cbe3" translate="yes" xml:space="preserve">
          <source>Database</source>
          <target state="translated">数据库</target>
        </trans-unit>
        <trans-unit id="691ce6b53b50d3f885d4222772e2a70799907e08" translate="yes" xml:space="preserve">
          <source>Database columns that are missing from the dataframe, are out of order, or both (passes)</source>
          <target state="translated">数据框中的数据库列缺失、失序或两者都缺失(通过)。</target>
        </trans-unit>
        <trans-unit id="76f28351a7d0c8876ec4cf3dc017b25e19d1c043" translate="yes" xml:space="preserve">
          <source>Design and Scope</source>
          <target state="translated">设计和范围</target>
        </trans-unit>
        <trans-unit id="7307d0d41237bcfa9b4164065b4ae1c16c5070f9" translate="yes" xml:space="preserve">
          <source>Docker Desktop installed, either of the Linux or Windows runtimes, doesn't matter</source>
          <target state="translated">安装了Docker Desktop,不管是Linux还是Windows运行时,都没关系。</target>
        </trans-unit>
        <trans-unit id="80a466f377e6463c788fa476b5d058155e687809" translate="yes" xml:space="preserve">
          <source>Duplicate column names (raises error)</source>
          <target state="translated">列名重复(引发错误)</target>
        </trans-unit>
        <trans-unit id="64ccda66e16a44cbba57a4db2b57a9a05bc450f4" translate="yes" xml:space="preserve">
          <source>Empty dataframe (nothing happens, database not modified)</source>
          <target state="translated">空数据框(什么都没有发生,数据库没有修改)。</target>
        </trans-unit>
        <trans-unit id="a9ae32d0b39095733ff905d0f13fb3f93e4a75f1" translate="yes" xml:space="preserve">
          <source>Existing Solutions</source>
          <target state="translated">现有的解决方案</target>
        </trans-unit>
        <trans-unit id="76284d7bc7ed062672bc5972bdb127a08e71fcd9" translate="yes" xml:space="preserve">
          <source>Extra dataframe columns that aren't in database, when &lt;code&gt;if_exists=&quot;append&quot;&lt;/code&gt; specified (fails)</source>
          <target state="translated">指定 &lt;code&gt;if_exists=&quot;append&quot;&lt;/code&gt; 时，数据库中没有的额外数据框列（失败）</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">特征</target>
        </trans-unit>
        <trans-unit id="3acb1702b49c155fe6302829070e992486dcd322" translate="yes" xml:space="preserve">
          <source>For now, we are using the non-XML BCP format file type. In the future, XML format files may be added.</source>
          <target state="translated">目前,我们使用的是非XML BCP格式的文件类型。将来可能会增加XML格式的文件。</target>
        </trans-unit>
        <trans-unit id="81b1231bbf8b818b98726cdc0006bb44b7de1bd4" translate="yes" xml:space="preserve">
          <source>Github Actions is used for CI/CD, although it is still somewhat a work in progress.</source>
          <target state="translated">Github Actions是用于CI/CD的,尽管它仍然是某种程度上的工作。</target>
        </trans-unit>
        <trans-unit id="52a99797ae5b7e3cfb129ed2df62557a2d94f55c" translate="yes" xml:space="preserve">
          <source>Good for simple data types like numbers and dates</source>
          <target state="translated">适用于简单的数据类型,如数字和日期</target>
        </trans-unit>
        <trans-unit id="dabf30b579c8c0bd6e23af5eb7b139345fa4df0e" translate="yes" xml:space="preserve">
          <source>Handle messy string data</source>
          <target state="translated">处理混乱的字符串数据</target>
        </trans-unit>
        <trans-unit id="547b7980a4a464c718de4e7055baf94c4675407f" translate="yes" xml:space="preserve">
          <source>Here are some caveats and limitations of bcpandas.</source>
          <target state="translated">以下是bcpandas的一些注意事项和限制。</target>
        </trans-unit>
        <trans-unit id="d5aae98f14872303c91c9d73ac64438923bdc2f6" translate="yes" xml:space="preserve">
          <source>High-level wrapper around BCP for high performance data transfers between pandas and SQL Server. No knowledge of BCP required!!</source>
          <target state="translated">围绕BCP的高级封装器,用于pandas和SQL Server之间的高性能数据传输。不需要BCP的知识!</target>
        </trans-unit>
        <trans-unit id="9db61721b3c0b0accb2d62591aa7f2898fa5e0e0" translate="yes" xml:space="preserve">
          <source>High-level wrapper around BCP for high performance data transfers between pandas and SQL Server. No knowledge of BCP required!! (pronounced &lt;em&gt;BEE-CEE-Pandas&lt;/em&gt;)</source>
          <target state="translated">围绕BCP的高级包装器，用于在熊猫和SQL Server之间进行高性能的数据传输。不需要BCP知识！！（发音为&lt;em&gt;BEE-CEE-Pandas&lt;/em&gt;）</target>
        </trans-unit>
        <trans-unit id="fa8278b8ef8905e7f0a40631d946ff53074c850c" translate="yes" xml:space="preserve">
          <source>I didn't bother including the pandas non-&lt;code&gt;multiinsert&lt;/code&gt; version here because it just takes way too long</source>
          <target state="translated">我没有在这里包括熊猫的非多 &lt;code&gt;multiinsert&lt;/code&gt; 版本，因为它花了太长时间</target>
        </trans-unit>
        <trans-unit id="3d407a0ff2b36881d9fc324af8fcaebf8e0992a5" translate="yes" xml:space="preserve">
          <source>I will attempt to use the &lt;code&gt;pandas&lt;/code&gt; docstring style as detailed &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/development/contributing_docstring.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">我将尝试使用&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/development/contributing_docstring.html&quot;&gt;此处&lt;/a&gt;详细介绍的 &lt;code&gt;pandas&lt;/code&gt; docstring样式。</target>
        </trans-unit>
        <trans-unit id="c3fab8786779f3e61b8f68a7ac126fed43557a2d" translate="yes" xml:space="preserve">
          <source>IMPORTANT - Read vs. Write</source>
          <target state="translated">重要-读与写</target>
        </trans-unit>
        <trans-unit id="21a587ecb595cbd02b92ebe158e13eff7c106f26" translate="yes" xml:space="preserve">
          <source>In order to spin up a local SQL Server during testing, we use Docker. Specifically, we run one of the images that Microsoft provides that already have SQL Server fully installed, all we have to do is use the image to run a container. Here are the links to the &lt;a href=&quot;https://hub.docker.com/_/microsoft-mssql-server&quot;&gt;Linux versions&lt;/a&gt; and the Windows versions - &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-express/&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-developer&quot;&gt;Developer&lt;/a&gt;.</source>
          <target state="translated">为了在测试期间启动本地SQL Server，我们使用Docker。具体来说，我们运行Microsoft提供的已完全安装SQL Server的映像之一，我们要做的就是使用该映像运行容器。这是&lt;a href=&quot;https://hub.docker.com/_/microsoft-mssql-server&quot;&gt;Linux版本&lt;/a&gt;和Windows版本的链接&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-express/&quot;&gt;-Express&lt;/a&gt;和&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-developer&quot;&gt;Developer&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="3e1d61d3b4e30cc9a0f56244235c036c9bf428e1" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;subprocess&lt;/code&gt; library to control Docker manually, we use the elegant &lt;code&gt;docker-py&lt;/code&gt; library which works very nicely. A &lt;code&gt;DockerDB&lt;/code&gt; Python class is defined in &lt;code&gt;bcpandas/tests/utils.py&lt;/code&gt; and it wraps up all the Docker commands and functionality needed to use SQL Server into one class. This class is used in &lt;code&gt;conftest.py&lt;/code&gt; in the core bcpandas tests, and in the &lt;code&gt;benchmarks/&lt;/code&gt; directory for both the benchmarks code as well as the legacy tests for &lt;code&gt;read_sql&lt;/code&gt;.</source>
          <target state="translated">我们使用优雅的 &lt;code&gt;docker-py&lt;/code&gt; 库，而不是使用 &lt;code&gt;subprocess&lt;/code&gt; 库来手动控制Docker，该库非常好用。在 &lt;code&gt;bcpandas/tests/utils.py&lt;/code&gt; 中定义了一个 &lt;code&gt;DockerDB&lt;/code&gt; Python类，该类将使用SQL Server所需的所有Docker命令和功能包装在一起。在核心bcpandas测试中的 &lt;code&gt;conftest.py&lt;/code&gt; 中使用该类，在基准代码和 &lt;code&gt;read_sql&lt;/code&gt; 的旧式测试中，在betas &lt;code&gt;benchmarks/&lt;/code&gt; 目录中使用该类。</target>
        </trans-unit>
        <trans-unit id="a66dd1dbbcdaed8372df35dfee9c244c4fe29ad0" translate="yes" xml:space="preserve">
          <source>JSON file of the benchmark data</source>
          <target state="translated">基准数据的JSON文件</target>
        </trans-unit>
        <trans-unit id="c356804ddce0f7e1a9765716af7555229e0ea654" translate="yes" xml:space="preserve">
          <source>JSON file with the environment details of the machine that was used to generate it</source>
          <target state="translated">JSON文件,包含用于生成该文件的机器的环境细节。</target>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="translated">已知问题</target>
        </trans-unit>
        <trans-unit id="bc167ac3f0e18206129211c7f3fa357e48c5c4b5" translate="yes" xml:space="preserve">
          <source>Microsoft ODBC Driver &lt;strong&gt;11, 13, 13.1, or 17&lt;/strong&gt; for SQL Server. See the &lt;a href=&quot;https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-Windows&quot;&gt;pyodbc docs&lt;/a&gt; for details.</source>
          <target state="translated">用于SQL Server的Microsoft ODBC驱动程序&lt;strong&gt;11、13、13.1或17&lt;/strong&gt;。有关&lt;a href=&quot;https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-Windows&quot;&gt;详细&lt;/a&gt;信息，请参见pyodbc文档。</target>
        </trans-unit>
        <trans-unit id="6df0fe186d7f4fe3db9e445dc14466665fdbbe28" translate="yes" xml:space="preserve">
          <source>Much credit is due to &lt;code&gt;bcpy&lt;/code&gt; for the original idea and for some of the code that was adopted and changed.</source>
          <target state="translated">对于 &lt;code&gt;bcpy&lt;/code&gt; 而言，最初的想法以及所采用和更改的某些代码都应归功于bcpy。</target>
        </trans-unit>
        <trans-unit id="d4b2a1e43166e35dafcdfee719b641412d2a1787" translate="yes" xml:space="preserve">
          <source>No support for reading from SQL, only writing to SQL</source>
          <target state="translated">不支持从SQL中读取,只支持向SQL中写入。</target>
        </trans-unit>
        <trans-unit id="3d45dc15d4aa32921a6bd5174281815bac463550" translate="yes" xml:space="preserve">
          <source>PNG image of the graph</source>
          <target state="translated">图形的PNG图像</target>
        </trans-unit>
        <trans-unit id="26f36cc3e752dabfb46d93d28cf67ca7e0964af6" translate="yes" xml:space="preserve">
          <source>Pandas native</source>
          <target state="translated">熊猫</target>
        </trans-unit>
        <trans-unit id="c0896b5a24266a7f891c8679df9cf1580202d0f3" translate="yes" xml:space="preserve">
          <source>Pass a full &lt;code&gt;Engine&lt;/code&gt; object to the bcpandas &lt;code&gt;SqlCreds&lt;/code&gt; object, and bcpandas will attempt to parse out the server, database, username, and password to pass to the command line utilities. If a DSN is used, this will fail.</source>
          <target state="translated">将完整的 &lt;code&gt;Engine&lt;/code&gt; 对象传递给bcpandas &lt;code&gt;SqlCreds&lt;/code&gt; 对象，然后bcpandas将尝试解析服务器，数据库，用户名和密码，以传递给命令行实用程序。如果使用DSN，则将失败。</target>
        </trans-unit>
        <trans-unit id="c45012d793434c12de12f6b04ab7092f9aae5e61" translate="yes" xml:space="preserve">
          <source>Please, all contributions are very welcome!</source>
          <target state="translated">请大家踊跃投稿!</target>
        </trans-unit>
        <trans-unit id="33e72da85f21769ca9a8ee3181ea9def0321f98f" translate="yes" xml:space="preserve">
          <source>PyPI</source>
          <target state="translated">PyPI</target>
        </trans-unit>
        <trans-unit id="c32b6c1ab053aa1b803595ba447bebbb8760c137" translate="yes" xml:space="preserve">
          <source>Python &amp;gt;= 3.6</source>
          <target state="translated">Python&amp;gt; = 3.6</target>
        </trans-unit>
        <trans-unit id="164100a124690d40ea0f689d3e939d9e9bbbf9c5" translate="yes" xml:space="preserve">
          <source>Python User</source>
          <target state="translated">Python用户</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">快速启动</target>
        </trans-unit>
        <trans-unit id="c33ebb18aa7c683e58237addbd590da420348847" translate="yes" xml:space="preserve">
          <source>Recommended Usage</source>
          <target state="translated">推荐用途</target>
        </trans-unit>
        <trans-unit id="08d9bc6898acc588635443ca8df6948b4af9793e" translate="yes" xml:space="preserve">
          <source>Replace any &lt;code&gt;df.to_sql(...)&lt;/code&gt; in your code with &lt;code&gt;bcpandas.to_sql(df, ...)&lt;/code&gt;</source>
          <target state="translated">用 &lt;code&gt;bcpandas.to_sql(df, ...)&lt;/code&gt; 替换代码中的任何 &lt;code&gt;df.to_sql(...)&lt;/code&gt; ...）</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">所需经费</target>
        </trans-unit>
        <trans-unit id="71d4a739c996a8252e5b9838680b099447f11563" translate="yes" xml:space="preserve">
          <source>Running this will output</source>
          <target state="translated">运行该程序将输出</target>
        </trans-unit>
        <trans-unit id="4c3581a4d5355beb88ad0bea14ac93c6dc4c9163" translate="yes" xml:space="preserve">
          <source>Scope a bit too broad - deals with pandas as well as flat files
This repository aims to fix and improve on &lt;code&gt;bcpy&lt;/code&gt; and the above issues by making the design choices described earlier.</source>
          <target state="translated">范围太宽-处理大熊猫和平面文件此存储库旨在通过做出前面所述的设计选择来修复和改进 &lt;code&gt;bcpy&lt;/code&gt; 和上述问题。</target>
        </trans-unit>
        <trans-unit id="a3a612f92d3ceff5a3d5ae1a7a9f30fdf9233090" translate="yes" xml:space="preserve">
          <source>See figures below. All code is in the &lt;code&gt;/benchmarks&lt;/code&gt; directory. To run the benchmarks, from the root directory of this repository, run &lt;code&gt;python benchmarks/benchmark.py main --help&lt;/code&gt; and fill in the command line options that are presented.</source>
          <target state="translated">参见下图。所有代码都在 &lt;code&gt;/benchmarks&lt;/code&gt; 目录中。要运行基准测试，请从该存储库的根目录运行 &lt;code&gt;python benchmarks/benchmark.py main --help&lt;/code&gt; 并填写显示的命令行选项。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">资料来源</target>
        </trans-unit>
        <trans-unit id="4a5d769ec38e509a2cc0d034cbf395fa726c2163" translate="yes" xml:space="preserve">
          <source>Super speed</source>
          <target state="translated">超速</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">测试</target>
        </trans-unit>
        <trans-unit id="72f6ac91015e7ff555be46a691c5d5439b6a006f" translate="yes" xml:space="preserve">
          <source>Testing Implementation</source>
          <target state="translated">测试实施</target>
        </trans-unit>
        <trans-unit id="fdabde9e2546d302d5577b7817f77c38b8ea8095" translate="yes" xml:space="preserve">
          <source>Testing Requirements</source>
          <target state="translated">测试要求</target>
        </trans-unit>
        <trans-unit id="7e187957ecf95e1b7c04491211d99d11fb5d46b7" translate="yes" xml:space="preserve">
          <source>Testing uses &lt;code&gt;pytest&lt;/code&gt;.</source>
          <target state="translated">测试使用 &lt;code&gt;pytest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e93f4cf2c16977aa0828b84202ee64df60519c65" translate="yes" xml:space="preserve">
          <source>That's it!</source>
          <target state="translated">就是这样!</target>
        </trans-unit>
        <trans-unit id="cf8b8e72a0f0d39a93c59901416904bc1ebcbf95" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;strong&gt;only&lt;/strong&gt;&lt;/em&gt; scope of &lt;code&gt;bcpandas&lt;/code&gt; is to read and write between a pandas DataFrame and a Microsoft SQL Server database. That's it. We do &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; concern ourselves with reading existing flat files to/from SQL - that introduces &lt;em&gt;way&lt;/em&gt; to much complexity in trying to parse and decode the various parts of the file, like delimiters, quote characters, and line endings. Instead, to read/write an exiting flat file, just import it via pandas into a DataFrame, and then use &lt;code&gt;bcpandas&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bcpandas&lt;/code&gt; 的&lt;em&gt;&lt;strong&gt;唯一&lt;/strong&gt;&lt;/em&gt;范围是在熊猫DataFrame和Microsoft SQL Server数据库之间进行读取和写入。而已。我们&lt;em&gt;&lt;strong&gt;不&lt;/strong&gt;&lt;/em&gt;关心从SQL中读取现有的平面文件，这与尝试解析和解码文件的各个部分（例如定界符，引号和行尾）引入了很多复杂的&lt;em&gt;方法&lt;/em&gt;。相反，要读取/写入现有的平面文件，只需将其通过pandas导入到DataFrame中，然后使用 &lt;code&gt;bcpandas&lt;/code&gt; 即可。&lt;em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="935ef7ea006a968f0e6aa05f8b21d0ef6b501136" translate="yes" xml:space="preserve">
          <source>The BCP utility does &lt;strong&gt;not&lt;/strong&gt; ignore delimiter characters when surrounded by quotes, unlike CSVs - see &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/import-export/specify-field-and-row-terminators-sql-server#characters-supported-as-terminators&quot;&gt;here&lt;/a&gt; in the Microsoft docs.</source>
          <target state="translated">与CSV不同，BCP实用程序在用引号引起来时&lt;strong&gt;不会&lt;/strong&gt;忽略定界符-请参阅Microsoft文档中的&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/import-export/specify-field-and-row-terminators-sql-server#characters-supported-as-terminators&quot;&gt;此处&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd16e25205e87e71f6f85d75be7cb12d82640bdc" translate="yes" xml:space="preserve">
          <source>The big benefit of this is that we get to precicely control all the finicky parts of the text file when we write/read it to a local file and then in the BCP utility. This lets us set library-wide defaults (maybe configurable in the future) and work with those.</source>
          <target state="translated">这样做的最大好处是,当我们把文本文件写/读到本地文件,然后在BCP实用程序中,我们可以精确地控制文本文件的所有细节部分。这让我们可以设置全库的默认值(也许将来可以配置),并使用这些默认值工作。</target>
        </trans-unit>
        <trans-unit id="c2fed85ad249e75421b950e6e4ef07685f5a9825" translate="yes" xml:space="preserve">
          <source>The big speedup benefit of bcpandas is in the &lt;code&gt;to_sql&lt;/code&gt; function, as the benchmarks below show. However, the bcpandas &lt;code&gt;read_sql&lt;/code&gt; function actually performs &lt;strong&gt;slower&lt;/strong&gt; than the pandas equivalent. Therefore, the bcpandas &lt;code&gt;read_sql&lt;/code&gt; function was deprecated in v5.0 and has now been removed in v6.0+. To read data &lt;strong&gt;from&lt;/strong&gt; SQL to pandas, use the native pandas method &lt;code&gt;pd.read_sql_table&lt;/code&gt; or &lt;code&gt;pd.read_sql_query&lt;/code&gt;.</source>
          <target state="translated">bcpandas的大提速的好处是在 &lt;code&gt;to_sql&lt;/code&gt; 功能，如下显示的基准。但是，bcpandas的 &lt;code&gt;read_sql&lt;/code&gt; 函数实际上要比等效的pandas &lt;strong&gt;慢&lt;/strong&gt;。因此，v5.0中不推荐使用bcpandas &lt;code&gt;read_sql&lt;/code&gt; 函数，而v6.0 +中已将其删除。要将数据&lt;strong&gt;从&lt;/strong&gt; SQL 读取到熊猫，请使用本地熊猫方法 &lt;code&gt;pd.read_sql_table&lt;/code&gt; 或 &lt;code&gt;pd.read_sql_query&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f26a925ed89f7dc927bccea30da0e63653a37df0" translate="yes" xml:space="preserve">
          <source>This package is a wrapper for seamlessly using the bcp utility from Python using a pandas DataFrame. Despite the IO hits, the fastest option by far is saving the data to a CSV file in the file system and using the bcp utility to transfer the CSV file to SQL Server. &lt;strong&gt;Best of all, you don't need to know anything about using BCP at all!&lt;/strong&gt;</source>
          <target state="translated">该软件包是包装程序，可用于通过Python使用pandas DataFrame无缝使用bcp实用程序。尽管有IO命中，但迄今为止最快的选择是将数据保存到文件系统中的CSV文件中，并使用bcp实用程序将CSV文件传输到SQL Server。&lt;strong&gt;最重要的是，您完全不需要任何有关使用BCP的知识！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9c47aa7f6032f05875deb0226f3f944ec08fc09" translate="yes" xml:space="preserve">
          <source>To test for all possible data types, we use the &lt;code&gt;hypothesis&lt;/code&gt; library, instead of trying to come up with every single case on our own.</source>
          <target state="translated">为了测试所有可能的数据类型，我们使用 &lt;code&gt;hypothesis&lt;/code&gt; 库，而不是尝试自己提出每个个案。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="d792e208dd4288df221b3b3ede563a86487fd15f" translate="yes" xml:space="preserve">
          <source>We take testing very seriously here. In order to rely on a library like this in production, it &lt;strong&gt;MUST&lt;/strong&gt; be ruthlessly tested, which thankfully it is.
Here is a partial list of what has been tested so far. Pull Requests welcome!</source>
          <target state="translated">我们在这里非常重视测试。为了在生产中依赖这样的库，&lt;strong&gt;必须&lt;/strong&gt;对其进行无情的测试，值得庆幸的是。这是到目前为止已测试的部分列表。拉请求欢迎！</target>
        </trans-unit>
        <trans-unit id="d619ad7cc694d2eb378d8abe6f951f3c088fe61c" translate="yes" xml:space="preserve">
          <source>What Is Tested?</source>
          <target state="translated">什么是测试?</target>
        </trans-unit>
        <trans-unit id="4a6a9ea1c387d614a4dfcfd6ea6fd479e5eda7c0" translate="yes" xml:space="preserve">
          <source>When running the tests, we can specify a specific Docker image to use, by invoking the custom command line option called &lt;code&gt;--mssql-docker-image&lt;/code&gt;. For example:</source>
          <target state="translated">运行测试时，我们可以通过调用名为 &lt;code&gt;--mssql-docker-image&lt;/code&gt; 的自定义命令行选项来指定要使用的特定Docker 映像。例如：</target>
        </trans-unit>
        <trans-unit id="ce4b3ce57d73ee84b7d96666566ccb18a60d24d9" translate="yes" xml:space="preserve">
          <source>Why not just use the new pandas &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt;&lt;code&gt;method='multi'&lt;/code&gt;&lt;/a&gt;?</source>
          <target state="translated">为什么不只使用新的pandas &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt; &lt;code&gt;method='multi'&lt;/code&gt; &lt;/a&gt;？</target>
        </trans-unit>
        <trans-unit id="6b792efb0e17c873405d7c3bd52c451ffd50a79f" translate="yes" xml:space="preserve">
          <source>Writing data from pandas DataFrames to a SQL database is very slow using the built-in &lt;code&gt;to_sql&lt;/code&gt; method, even with the newly introduced &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt;&lt;code&gt;execute_many&lt;/code&gt;&lt;/a&gt; option. For Microsoft SQL Server, a far far faster method is to use the BCP utility provided by Microsoft. This utility is a command line tool that transfers data to/from the database and flat text files.</source>
          <target state="translated">即使使用新引入的&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt; &lt;code&gt;execute_many&lt;/code&gt; &lt;/a&gt;选项，使用内置的 &lt;code&gt;to_sql&lt;/code&gt; 方法将数据从pandas DataFrames写入SQL数据库也非常慢。对于Microsoft SQL Server，一种更快得多的方法是使用Microsoft提供的BCP实用程序。此实用程序是一个命令行工具，用于与数据库和平面文本文件之间进行数据传输。</target>
        </trans-unit>
        <trans-unit id="89c5a8e81022b57de232291b5f23612984386cbc" translate="yes" xml:space="preserve">
          <source>bcpandas</source>
          <target state="translated">bcpandas</target>
        </trans-unit>
        <trans-unit id="48363b6d6c5d2b3eb4bf1623a23a5ada58598b5a" translate="yes" xml:space="preserve">
          <source>bcpy</source>
          <target state="translated">bcpy</target>
        </trans-unit>
        <trans-unit id="e19cc09f0d7a61b0d1fb50cd0869a44f3809c507" translate="yes" xml:space="preserve">
          <source>built with the help of &lt;a href=&quot;https://www.tablesgenerator.com/markdown_tables#&quot;&gt;https://www.tablesgenerator.com/markdown_tables#&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;https://gist.github.com/rxaviers/7360908&lt;/a&gt;</source>
          <target state="translated">借助&lt;a href=&quot;https://www.tablesgenerator.com/markdown_tables#&quot;&gt;https://www.tablesgenerator.com/markdown_tables#&lt;/a&gt;和&lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;https://gist.github.com/rxaviers/7360908&lt;/a&gt;构建</target>
        </trans-unit>
        <trans-unit id="fc32cc01476fe016f2f60d0a6131db73c31b390a" translate="yes" xml:space="preserve">
          <source>docker-py (for controlling Docker)</source>
          <target state="translated">docker-py (用于控制Docker)</target>
        </trans-unit>
        <trans-unit id="ed4b436c75459c858b3198e9e021f32cfa7ec531" translate="yes" xml:space="preserve">
          <source>hypothesis</source>
          <target state="translated">假说</target>
        </trans-unit>
        <trans-unit id="0eaa389e1fdb3a1917c0f987514bd561be5718ee" translate="yes" xml:space="preserve">
          <source>pytest</source>
          <target state="translated">pytest</target>
        </trans-unit>
        <trans-unit id="f15272625459b266aacc0426b2b7f797e3be63a1" translate="yes" xml:space="preserve">
          <source>pytest-cov (coverage.py)</source>
          <target state="translated">pytest-cov (coverage.py)</target>
        </trans-unit>
        <trans-unit id="929dea4a610a279ad1a08fffdfd589f668b86b08" translate="yes" xml:space="preserve">
          <source>read_sql</source>
          <target state="translated">read_sql</target>
        </trans-unit>
        <trans-unit id="49379e60d7f0b5a617ba8fe350d92995b4818b1f" translate="yes" xml:space="preserve">
          <source>to_sql</source>
          <target state="translated">to_sql</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
