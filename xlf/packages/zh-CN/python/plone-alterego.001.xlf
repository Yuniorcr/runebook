<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/plone-alterego/">
    <body>
      <group id="plone-alterego">
        <trans-unit id="86ce4d28f1065055e57e232627a6e2440d9b6666" translate="yes" xml:space="preserve">
          <source>1.0 (2011-04-30)</source>
          <target state="translated">1.0 (2011-04-30)</target>
        </trans-unit>
        <trans-unit id="ad12a756dec6df60a90664cee03b43f3768c9f18" translate="yes" xml:space="preserve">
          <source>1.0.1 (2016-08-11)</source>
          <target state="translated">1.0.1 (2016-08-11)</target>
        </trans-unit>
        <trans-unit id="97cd2d4444171ddbe22d28d58aa72d176e1ec9ed" translate="yes" xml:space="preserve">
          <source>1.0a1 (2009-04-17)</source>
          <target state="translated">1.0a1 (2009-04-17)</target>
        </trans-unit>
        <trans-unit id="b3e88389433cde6f39a17e49ae5c9a8e5e2682aa" translate="yes" xml:space="preserve">
          <source>1.1 (2016-11-01)</source>
          <target state="translated">1.1 (2016-11-01)</target>
        </trans-unit>
        <trans-unit id="e5d9b606d65046bca3a327cf5abeb596d0543e90" translate="yes" xml:space="preserve">
          <source>1.1.2 (2018-11-21)</source>
          <target state="translated">1.1.2 (2018-11-21)</target>
        </trans-unit>
        <trans-unit id="654dcf338316667ac8581e7ca8b03aaa226f07a7" translate="yes" xml:space="preserve">
          <source>1.1.3 (2018-11-21)</source>
          <target state="translated">1.1.3 (2018-11-21)</target>
        </trans-unit>
        <trans-unit id="cecc217f93b4eac37c36e0ab0548651ff00aa576" translate="yes" xml:space="preserve">
          <source>1.1.3 (unreleased)</source>
          <target state="translated">1.1.3(未发布)</target>
        </trans-unit>
        <trans-unit id="dc2c014e312088005e3f7b1b1644df4f296e7822" translate="yes" xml:space="preserve">
          <source>1.1.4 (2020-03-21)</source>
          <target state="translated">1.1.4 (2020-03-21)</target>
        </trans-unit>
        <trans-unit id="61d0135fde40e42dc447af99f58928dca35cd84a" translate="yes" xml:space="preserve">
          <source>1.1.5 (2020-04-20)</source>
          <target state="translated">1.1.5 (2020-04-20)</target>
        </trans-unit>
        <trans-unit id="a59e44482f4d55a33d253f996aacba8889b6e621" translate="yes" xml:space="preserve">
          <source>Add compatibility with Python 3. [datakurre]</source>
          <target state="translated">增加与Python 3的兼容性。[datakurre]</target>
        </trans-unit>
        <trans-unit id="54d964bde3b45008273493e091d5fc828d1a6056" translate="yes" xml:space="preserve">
          <source>Bug fixes:</source>
          <target state="translated">错误修复。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">变更日志</target>
        </trans-unit>
        <trans-unit id="dab00ff92f942c70b2474095401e7c25a9379887" translate="yes" xml:space="preserve">
          <source>Cleanup project level files (setup.py, .travis-ci.yml&amp;hellip;) [maurits]
[gforcada] (#2524)</source>
          <target state="translated">Cleanup project level files (setup.py, .travis-ci.yml&amp;hellip;) [maurits] [gforcada] (#2524)</target>
        </trans-unit>
        <trans-unit id="c6501be72f7ce2ffe5d007bd6bdb9943d798911f" translate="yes" xml:space="preserve">
          <source>Ensure that plone.alterego.dynamic.create() is called with this module and
a dynamic module name. Typically, you&amp;rsquo;d do this in the parent module
itself, so that the dynamic module is instantiated as soon as the parent
module is imported.</source>
          <target state="translated">Ensure that plone.alterego.dynamic.create() is called with this module and a dynamic module name. Typically, you&amp;rsquo;d do this in the parent module itself, so that the dynamic module is instantiated as soon as the parent module is imported.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="98bcf050cf3c78543d1d27cd06759e2d587c22e7" translate="yes" xml:space="preserve">
          <source>Fixes:</source>
          <target state="translated">修复。</target>
        </trans-unit>
        <trans-unit id="7a8a97863e9722315f79dc857bce39877ecd972d" translate="yes" xml:space="preserve">
          <source>For a more fully-featured example, see the alterego.txt doctest.</source>
          <target state="translated">关于更全功能的例子,请看 alterego.txt doctest。</target>
        </trans-unit>
        <trans-unit id="c2608a770bbc75f46250213d61456e2c4a48690b" translate="yes" xml:space="preserve">
          <source>From this point forward, when we access an attribute of the dynamic module,
the factory will be used:</source>
          <target state="translated">从此,当我们访问动态模块的某个属性时,将使用工厂。</target>
        </trans-unit>
        <trans-unit id="bbeb5c105d8036f2d6481f9c13d31d9ec90cbd35" translate="yes" xml:space="preserve">
          <source>Identify an appropriate parent module where the dynamic module will live.</source>
          <target state="translated">确定动态模块所在的适当的父模块;</target>
        </trans-unit>
        <trans-unit id="970d9459b2c3bd1aab215bea63f715a31dc6bf75" translate="yes" xml:space="preserve">
          <source>Initial release.</source>
          <target state="translated">初次发布。</target>
        </trans-unit>
        <trans-unit id="f87c2866c0b7367137c164d7fc4355f50494307e" translate="yes" xml:space="preserve">
          <source>Initialized towncrier. [gforcada] (#2548)</source>
          <target state="translated">初始化拖曳器。[gforcada](#2548)</target>
        </trans-unit>
        <trans-unit id="5ecccfbc8acf9a2a09a48140d7bcc76a17888c33" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we have a generic content class that should get a unique interface
for each instance.</source>
          <target state="translated">Let&amp;rsquo;s say we have a generic content class that should get a unique interface for each instance.</target>
        </trans-unit>
        <trans-unit id="4189de394c8aa355e8f96c9dde9195e5bc6b11f1" translate="yes" xml:space="preserve">
          <source>Low level support for dynamic modules</source>
          <target state="translated">对动态模块的低水平支持</target>
        </trans-unit>
        <trans-unit id="c409d8714ffae5d66cb34a2df540a1907b03b383" translate="yes" xml:space="preserve">
          <source>Minor packaging updates. (#1)</source>
          <target state="translated">小幅更新包装。(#1)</target>
        </trans-unit>
        <trans-unit id="47edc4b6169d4bd4d632afc7c087d8d999098585" translate="yes" xml:space="preserve">
          <source>Minor packaging updates. [various] (#1)</source>
          <target state="translated">小包装更新。[各种](#1)</target>
        </trans-unit>
        <trans-unit id="208a508aabbf19798034826f77ed481ec28e90cc" translate="yes" xml:space="preserve">
          <source>New features:</source>
          <target state="translated">新特点:</target>
        </trans-unit>
        <trans-unit id="bb13e76a76d1129d25e2f493658cdc545b887c99" translate="yes" xml:space="preserve">
          <source>Note that so long as the setattr() call above is executed, the factory is
called only once. That is, you&amp;rsquo;ll always get the same object each time you
access a given attribute of the dynamic module.</source>
          <target state="translated">Note that so long as the setattr() call above is executed, the factory is called only once. That is, you&amp;rsquo;ll always get the same object each time you access a given attribute of the dynamic module.</target>
        </trans-unit>
        <trans-unit id="d181ab288f592838bbdc39815a6081d46ffc6a34" translate="yes" xml:space="preserve">
          <source>Now you see it, it now you don&amp;rsquo;t!</source>
          <target state="translated">Now you see it, it now you don&amp;rsquo;t!</target>
        </trans-unit>
        <trans-unit id="dd8386ca0140e1c88fdb88a05ec86478a0ccfcca" translate="yes" xml:space="preserve">
          <source>Register a named utility providing IDynamicObjectFactory. The name should
be the same as the full dotted path to the dynamic module. This utility
will be responsible for creating the objects that inhabit the dynamic
module.</source>
          <target state="translated">注册一个提供IDynamicObjectFactory的命名实用程序。这个名称应该和动态模块的完整点阵路径相同。这个实用程序将负责创建居住在动态模块中的对象。</target>
        </trans-unit>
        <trans-unit id="badd70d2521913d938fe494f00785096891c12b4" translate="yes" xml:space="preserve">
          <source>This package defines a dynamic module type that lets you create objects in the
dynamic module on demand.</source>
          <target state="translated">这个包定义了一个动态模块类型,让你可以根据需求在动态模块中创建对象。</target>
        </trans-unit>
        <trans-unit id="b9c898d65f756bab1596741826049bbea6737515" translate="yes" xml:space="preserve">
          <source>This utility should have a name that corresponds to the full,
dotted name to the dynamic module. This way, we can have different factories
for different dynamic modules. We&amp;rsquo;d register this in ZCML like so:</source>
          <target state="translated">This utility should have a name that corresponds to the full, dotted name to the dynamic module. This way, we can have different factories for different dynamic modules. We&amp;rsquo;d register this in ZCML like so:</target>
        </trans-unit>
        <trans-unit id="2f8cda870df3e8b305d3a631a8e84e8cab26d043" translate="yes" xml:space="preserve">
          <source>To create the unique interface, we will use a dynamic module. There is a
helper method to make this easier. It takes a parent module and a name as
arguments:</source>
          <target state="translated">为了创建独特的接口,我们将使用一个动态模块。有一个辅助方法可以让这个过程更简单。它需要一个父模块和一个名称作为参数。</target>
        </trans-unit>
        <trans-unit id="8989c42275729dee581b422dab7ccda24194f801" translate="yes" xml:space="preserve">
          <source>To make objects on demand, we&amp;rsquo;ll need to register a utility that can act
as a factory.</source>
          <target state="translated">To make objects on demand, we&amp;rsquo;ll need to register a utility that can act as a factory.</target>
        </trans-unit>
        <trans-unit id="faf74a3bd88910ef5bf70272474cd965d4989ac2" translate="yes" xml:space="preserve">
          <source>To use this package, you should:</source>
          <target state="translated">要使用这个软件包,你应该:</target>
        </trans-unit>
        <trans-unit id="dc30ce06903bf07cfd9aff13881dc898ad02f74e" translate="yes" xml:space="preserve">
          <source>Update code to follow Plone styleguide.
[gforcada]</source>
          <target state="translated">更新代码以遵循Plone样式指南。[gforcada]</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="45127be249b0146582144db1f8aa8da4a139c6b3" translate="yes" xml:space="preserve">
          <source>Use doctest from the stdlib instead of from zope.testing
[davisagli]</source>
          <target state="translated">使用stdlib中的doctest而不是zope.testing中的doctest [davisagli]</target>
        </trans-unit>
        <trans-unit id="500d9f3b8932dad656f1b4a85c12532f19c40535" translate="yes" xml:space="preserve">
          <source>Use zope.interface decorator.
[gforcada]</source>
          <target state="translated">使用zope.interface decorator。[gforcada]</target>
        </trans-unit>
        <trans-unit id="d0b8fdf3a0a125d7922e1bd6a207c4d4d7bf96e9" translate="yes" xml:space="preserve">
          <source>We can now import this module:</source>
          <target state="translated">我们现在可以导入这个模块。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
