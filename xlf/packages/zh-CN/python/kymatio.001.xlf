<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/kymatio/">
    <body>
      <group id="kymatio">
        <trans-unit id="7fb4391a6444cdfc98721cf84a888e92ce5e7ccf" translate="yes" xml:space="preserve">
          <source>After installing the latest version of PyTorch, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;torch.nn.Module&lt;/code&gt; using:</source>
          <target state="translated">安装最新版本的PyTorch之后，您可以使用以下 &lt;code&gt;torch.nn.Module&lt;/code&gt; 将 &lt;code&gt;Scattering2D&lt;/code&gt; 作为torch.nn.Module调用：</target>
        </trans-unit>
        <trans-unit id="2d53b89f41ba50001f12184fc1f54cef6ed50714" translate="yes" xml:space="preserve">
          <source>After installing the latest version of TensorFlow, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;tf.Module&lt;/code&gt; using:</source>
          <target state="translated">在安装了最新版本的TensorFlow之后，您可以使用以下 &lt;code&gt;tf.Module&lt;/code&gt; 将 &lt;code&gt;Scattering2D&lt;/code&gt; 作为tf.Module调用：</target>
        </trans-unit>
        <trans-unit id="5656ae60d6b13d4ea92fa6c75bf0a61833a82268" translate="yes" xml:space="preserve">
          <source>After installing the latest version of scikit-learn, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;Transformer&lt;/code&gt; using:</source>
          <target state="translated">安装最新版本的scikit-learn后，您可以使用以下命令将 &lt;code&gt;Scattering2D&lt;/code&gt; 作为 &lt;code&gt;Transformer&lt;/code&gt; 调用：</target>
        </trans-unit>
        <trans-unit id="15d92fd88eb1e4901f01cd8aa7ef2f2a163abc6b" translate="yes" xml:space="preserve">
          <source>Alternatively, with TensorFlow installed, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a Keras &lt;code&gt;Layer&lt;/code&gt; using:</source>
          <target state="translated">另外，在安装了TensorFlow之后，您可以使用以下命令将 &lt;code&gt;Scattering2D&lt;/code&gt; 称为Keras &lt;code&gt;Layer&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ce98733b52e5764a6674e832754e16e00beef0a2" translate="yes" xml:space="preserve">
          <source>Andreux M., Angles T., Exarchakis G., Leonarduzzi R., Rochette G., Thiry L., Zarka J., Mallat S., And&amp;eacute;n J., Belilovsky E., Bruna J., Lostanlen V., Hirn M. J., Oyallon E., Zhang S., Cella C., Eickenberg M. (2019). Kymatio: Scattering Transforms in Python. arXiv preprint arXiv:1812.11214. &lt;a href=&quot;https://arxiv.org/abs/1812.11214&quot;&gt;(paper)&lt;/a&gt;</source>
          <target state="translated">Andreux M.，Angles T.，Exarchakis G.，Leonarduzzi R.，Rochette G.，Thiry L.，Zarka J.，Mallat S.，And&amp;eacute;nJ.，Belilovsky E.，Bruna J.，Lostanlen V.，Hirn MJ ，Oyallon E.，Zhang S.，Cella C.，Eickenberg M.（2019）。Kymatio：Python中的散射变换。arXiv预印本arXiv：1812.11214。&lt;a href=&quot;https://arxiv.org/abs/1812.11214&quot;&gt;（纸）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f12b81f2cc6b4de10d38bf56fc6d4331958fed02" translate="yes" xml:space="preserve">
          <source>Assuming the Kymatio source has been downloaded, you may install it by running</source>
          <target state="translated">假设已经下载了Kymatio的源码,你可以通过运行以下命令来安装它。</target>
        </trans-unit>
        <trans-unit id="36039c3f46e580163854da82be8479a2cafb33f2" translate="yes" xml:space="preserve">
          <source>BSD-3-Clause license</source>
          <target state="translated">BSD-3-条款许可</target>
        </trans-unit>
        <trans-unit id="c1f8fdcb20a1e7bdce7abff74794ceaeee5c0c92" translate="yes" xml:space="preserve">
          <source>Building the documentation from source</source>
          <target state="translated">从源头开始建立文档</target>
        </trans-unit>
        <trans-unit id="c23cdae7f0075e92523e078952ccaad69da3cef0" translate="yes" xml:space="preserve">
          <source>Certain frontends, &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;sklearn&lt;/code&gt;, only allow processing on the CPU and are therefore slower. The &lt;code&gt;torch&lt;/code&gt;, &lt;code&gt;tensorflow&lt;/code&gt;, and &lt;code&gt;keras&lt;/code&gt; frontends, however, also support GPU processing, which can significantly accelerate computations. Additionally, the &lt;code&gt;torch&lt;/code&gt; backend supports an optimized &lt;code&gt;skcuda&lt;/code&gt; backend which currently provides the fastest performance in computing scattering transforms. In 2D, it may be instantiated using:</source>
          <target state="translated">某些前端 &lt;code&gt;numpy&lt;/code&gt; 和 &lt;code&gt;sklearn&lt;/code&gt; 仅允许在CPU上进行处理，因此速度较慢。但是， &lt;code&gt;torch&lt;/code&gt; ， &lt;code&gt;tensorflow&lt;/code&gt; 和 &lt;code&gt;keras&lt;/code&gt; 前端也支持GPU处理，从而可以显着加快计算速度。此外， &lt;code&gt;torch&lt;/code&gt; 后端支持优化的 &lt;code&gt;skcuda&lt;/code&gt; 后端，该后端目前在计算散射变换方面提供最快的性能。在2D中，可以使用以下方法实例化它：</target>
        </trans-unit>
        <trans-unit id="95bbf2dcf8e638da8f3ec0da173f22c4ce47b0cd" translate="yes" xml:space="preserve">
          <source>Code of conduct</source>
          <target state="translated">行为守则</target>
        </trans-unit>
        <trans-unit id="e8280da218d7d376eca1b64f4dbd2e78d1e95323" translate="yes" xml:space="preserve">
          <source>Currently, there are six available frontend&amp;ndash;backend pairs, NumPy (CPU), scikit-learn (CPU), pure PyTorch (CPU and GPU), PyTorch+scikit-cuda (GPU), TensorFlow (CPU and GPU), and Keras (CPU and GPU).</source>
          <target state="translated">目前，有六对可用的前端-后端对，NumPy（CPU），scikit-learn（CPU），纯PyTorch（CPU和GPU），PyTorch + scikit-cuda（GPU），TensorFlow（CPU和GPU）和Keras（ CPU和GPU）。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">依赖性</target>
        </trans-unit>
        <trans-unit id="8704fea0ca5af722fe8cb83918ba5d375516bd96" translate="yes" xml:space="preserve">
          <source>Developers can also install Kymatio via:</source>
          <target state="translated">开发者也可以通过安装Kymatio。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">文件资料</target>
        </trans-unit>
        <trans-unit id="36ae6b07ddb620b3c4b46d8635a1c22b8bedcc53" translate="yes" xml:space="preserve">
          <source>Each algorithm comes packaged with a frontend and backend. The frontend takes care of
interfacing with the user. The backend defines functions necessary for
computation of the scattering transform.</source>
          <target state="translated">每个算法都有一个前台和后台的包装。前端负责与用户的接口,后端定义了散射变换计算所需的函数。后端定义了计算散射变换所需的函数。</target>
        </trans-unit>
        <trans-unit id="e98420ff70d2b8112ee3173ae9b1c8f18bb7558f" translate="yes" xml:space="preserve">
          <source>Each of these algorithms is written in a high-level imperative paradigm, making it portable to any Python library for array operations as long as it enables complex-valued linear algebra and a fast Fourier transform (FFT).</source>
          <target state="translated">这些算法中的每一个都是用高级命令式范式编写的,因此,只要能够实现复值线性代数和快速傅立叶变换(FFT),它就可以移植到任何用于数组运算的Python库中。</target>
        </trans-unit>
        <trans-unit id="1ef8e6da45d2dd081d16f57b855fc793cd8acd72" translate="yes" xml:space="preserve">
          <source>Flexibility</source>
          <target state="translated">灵活性</target>
        </trans-unit>
        <trans-unit id="152d1cf2d912c0b47ab85242e86450251a763f9b" translate="yes" xml:space="preserve">
          <source>Frontend</source>
          <target state="translated">前台</target>
        </trans-unit>
        <trans-unit id="9433c5fb4a89d84b7499d9e379b243c69ce6205c" translate="yes" xml:space="preserve">
          <source>GPU acceleration</source>
          <target state="translated">GPU加速</target>
        </trans-unit>
        <trans-unit id="2ad1db6e3f2ba5bce854f2655954836f3db54c2f" translate="yes" xml:space="preserve">
          <source>GitHub issue tracker</source>
          <target state="translated">GitHub问题跟踪器</target>
        </trans-unit>
        <trans-unit id="c6651994b242228b647fbbd2a83eccefd957abca" translate="yes" xml:space="preserve">
          <source>GitHub repository</source>
          <target state="translated">GitHub 仓库</target>
        </trans-unit>
        <trans-unit id="76be732f9cb754d7da8b57d54ea72b2e3b8ba2c3" translate="yes" xml:space="preserve">
          <source>How to cite</source>
          <target state="translated">如何引用</target>
        </trans-unit>
        <trans-unit id="efd6b6ccb79578b072463a1d8293ef806ea055fb" translate="yes" xml:space="preserve">
          <source>If you use this package, please cite the following paper:</source>
          <target state="translated">如果您使用此包,请引用以下论文。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="3f3de271c6c7dc20a297d761972fe34ae72df935" translate="yes" xml:space="preserve">
          <source>Installation from source</source>
          <target state="translated">从源头安装</target>
        </trans-unit>
        <trans-unit id="86c7b897c9b72bd137dc4b767e6866f5c39a73d8" translate="yes" xml:space="preserve">
          <source>Keras</source>
          <target state="translated">Keras</target>
        </trans-unit>
        <trans-unit id="df3d1a146f6692a3651aaa3fbcacc93f681aafb3" translate="yes" xml:space="preserve">
          <source>Kyma (&lt;em&gt;&amp;kappa;ύ&amp;mu;&amp;alpha;&lt;/em&gt;) means &lt;em&gt;wave&lt;/em&gt; in Greek. By the same token, Kymatio (&lt;em&gt;&amp;kappa;&amp;upsilon;&amp;mu;ά&amp;tau;&amp;iota;&amp;omicron;&lt;/em&gt;) means &lt;em&gt;wavelet&lt;/em&gt;.</source>
          <target state="translated">Kyma（&lt;em&gt;&amp;kappa;ύ&amp;mu;&amp;alpha;&lt;/em&gt;）在希腊语中是指&lt;em&gt;波&lt;/em&gt;。同样，Kymatio（&lt;em&gt;&amp;kappa;&amp;upsilon;&amp;mu;ά&amp;tau;&amp;iota;&amp;omicron;&lt;/em&gt;）表示&lt;em&gt;小波&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8548ef3944e0cef547f58cf5a2b4a3c646d896d9" translate="yes" xml:space="preserve">
          <source>Kymatio</source>
          <target state="translated">Kymatio</target>
        </trans-unit>
        <trans-unit id="2a3060a5bd60e793748b70988510c5cec47cd775" translate="yes" xml:space="preserve">
          <source>Kymatio integrates the construction of wavelet filter banks in 1D, 2D, and 3D, as well as memory-efficient algorithms for extracting wavelet scattering coefficients, under a common application programming interface.</source>
          <target state="translated">Kymatio将一维、二维和三维的小波滤波器库的构建,以及提取小波散射系数的内存效率算法集成在一个通用的应用编程界面下。</target>
        </trans-unit>
        <trans-unit id="54cac6c05abe915a8d206d03162f6ab2fc659a33" translate="yes" xml:space="preserve">
          <source>Kymatio is an implementation of the wavelet scattering transform in the Python programming language, suitable for large-scale numerical experiments in signal processing and machine learning.
Scattering transforms are translation-invariant signal representations implemented as convolutional networks whose filters are not learned, but fixed (as wavelet filters).</source>
          <target state="translated">Kymatio是Python编程语言中小波散射变换的实现,适用于信号处理和机器学习的大规模数值实验。散射变换是以卷积网络的形式实现的翻译不变的信号表示,其滤波器不是学习的,而是固定的(如小波滤波器)。</target>
        </trans-unit>
        <trans-unit id="6d5120c08afc7db51817d584e6d6b97810edfc46" translate="yes" xml:space="preserve">
          <source>Kymatio requires:</source>
          <target state="translated">Kymatio要求。</target>
        </trans-unit>
        <trans-unit id="3ae7b28236ecfd76acbd2047faa28b2e0324cff4" translate="yes" xml:space="preserve">
          <source>Kymatio: Wavelet scattering in Python</source>
          <target state="translated">Kymatio。小波散射在Python中的应用</target>
        </trans-unit>
        <trans-unit id="ab2b0d24f77e5a3a38bab001e141787df2995183" translate="yes" xml:space="preserve">
          <source>Linux and macOS are the two officially supported operating systems.</source>
          <target state="translated">Linux和macOS是官方支持的两个操作系统。</target>
        </trans-unit>
        <trans-unit id="c2290380067bfed6df2ec6fcc5387ef97d892b91" translate="yes" xml:space="preserve">
          <source>List of authors</source>
          <target state="translated">作者名单</target>
        </trans-unit>
        <trans-unit id="4dc55fcd63f479bf8ebfdeaffa6bcc70d86f81ad" translate="yes" xml:space="preserve">
          <source>Note that the organization and the library are capitalized (&lt;em&gt;Kymatio&lt;/em&gt;) whereas the corresponding Python module is written in lowercase (&lt;code&gt;import kymatio&lt;/code&gt;).</source>
          <target state="translated">请注意，组织和库均大写（&lt;em&gt;Kymatio&lt;/em&gt;），而相应的Python模块以小写形式（ &lt;code&gt;import kymatio&lt;/code&gt; ）编写。</target>
        </trans-unit>
        <trans-unit id="148fb3e1f0f3a0a5a25d7af63d9dc5d6da0841ea" translate="yes" xml:space="preserve">
          <source>NumPy</source>
          <target state="translated">NumPy</target>
        </trans-unit>
        <trans-unit id="181b2d0668b8d7262738c301c5724be5ca7e3241" translate="yes" xml:space="preserve">
          <source>Online resources</source>
          <target state="translated">在线资源</target>
        </trans-unit>
        <trans-unit id="b307b88c84327b1804aee227595be53342245965" translate="yes" xml:space="preserve">
          <source>Portability</source>
          <target state="translated">便携性</target>
        </trans-unit>
        <trans-unit id="98a2e30eeb85238d061519d74935e170e44c72cb" translate="yes" xml:space="preserve">
          <source>PyTorch</source>
          <target state="translated">PyTorch</target>
        </trans-unit>
        <trans-unit id="be4fdf26c96852e056bf5d6ac5c3b6c919765a54" translate="yes" xml:space="preserve">
          <source>PyTorch and scikit-cuda</source>
          <target state="translated">PyTorch和scikit-cuda</target>
        </trans-unit>
        <trans-unit id="36ccbb6e002491c3a25d7ac443e22891fb590e4b" translate="yes" xml:space="preserve">
          <source>Python (&amp;gt;= 3.5)</source>
          <target state="translated">Python（&amp;gt; = 3.5）</target>
        </trans-unit>
        <trans-unit id="cde26ebfd6a3380e06f47e7a97faf1d5c4989cc4" translate="yes" xml:space="preserve">
          <source>Running Kymatio on a graphics processing unit (GPU) rather than a multi-core conventional central processing unit (CPU) allows for significant speedups in computing the scattering transform.
The current speedup with respect to CPU-based MATLAB code is of the order of 10 in 1D and 3D and of the order of 100 in 2D.</source>
          <target state="translated">在图形处理单元(GPU)上运行Kymatio,而不是在多核传统的中央处理单元(CPU)上运行Kymatio,可以显著加快散射变换的计算速度。目前相对于基于CPU的MATLAB代码,一维和三维的速度提升了10倍,二维的速度提升了100倍。</target>
        </trans-unit>
        <trans-unit id="94b03c70b196c58604c0a7faf7218bf6901b8e0c" translate="yes" xml:space="preserve">
          <source>Scalability</source>
          <target state="translated">可扩展性</target>
        </trans-unit>
        <trans-unit id="719627dc8b024372a3f64a840cea6b6b82e3930e" translate="yes" xml:space="preserve">
          <source>SciPy (&amp;gt;= 0.13)</source>
          <target state="translated">SciPy（&amp;gt; = 0.13）</target>
        </trans-unit>
        <trans-unit id="aa03f53e41cb1c33016b8b02ed6b8f6801d7a75d" translate="yes" xml:space="preserve">
          <source>Scikit-learn</source>
          <target state="translated">Scikit-learn</target>
        </trans-unit>
        <trans-unit id="04c6f7f38268f65dec83686a308d089d271f8881" translate="yes" xml:space="preserve">
          <source>Standard installation (on CPU hardware)</source>
          <target state="translated">标准安装(在CPU硬件上</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">技术支持</target>
        </trans-unit>
        <trans-unit id="91920dffa2de075aa71252ce246c4919ca2918b7" translate="yes" xml:space="preserve">
          <source>TensorFlow</source>
          <target state="translated">TensorFlow</target>
        </trans-unit>
        <trans-unit id="c25dc5610a01b0c692eaeed08e28068b4bcc5187" translate="yes" xml:space="preserve">
          <source>The Kymatio environment</source>
          <target state="translated">Kymatio环境</target>
        </trans-unit>
        <trans-unit id="1abd05325464742c038fa63ed6a75dfab2865ff5" translate="yes" xml:space="preserve">
          <source>The Kymatio organization associates the developers of several pre-existing packages for wavelet scattering, including &lt;code&gt;ScatNet&lt;/code&gt;, &lt;code&gt;scattering.m&lt;/code&gt;, &lt;code&gt;PyScatWave&lt;/code&gt;, &lt;code&gt;WaveletScattering.jl&lt;/code&gt;, and &lt;code&gt;PyScatHarm&lt;/code&gt;.</source>
          <target state="translated">该Kymatio组织小波散射几个预先存在的封装，包括开发商关联 &lt;code&gt;ScatNet&lt;/code&gt; ， &lt;code&gt;scattering.m&lt;/code&gt; ， &lt;code&gt;PyScatWave&lt;/code&gt; ， &lt;code&gt;WaveletScattering.jl&lt;/code&gt; 和 &lt;code&gt;PyScatHarm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="889510d61cc4478b1f890a999b109806db04b367" translate="yes" xml:space="preserve">
          <source>The documentation can also be found in the &lt;code&gt;doc/&lt;/code&gt; subfolder of the GitHub repository.
To build the documentation locally, please clone this repository and run</source>
          <target state="translated">该文档也可以在GitHub存储库的 &lt;code&gt;doc/&lt;/code&gt; 子文件夹中找到。要在本地构建文档，请克隆此存储库并运行</target>
        </trans-unit>
        <trans-unit id="fa9f92c1199d3cb46e41c8111a313f3059de7824" translate="yes" xml:space="preserve">
          <source>The documentation of Kymatio is officially hosted on the &lt;a href=&quot;https://www.kymat.io/&quot;&gt;kymat.io&lt;/a&gt; website.</source>
          <target state="translated">Kymatio的文档正式托管在&lt;a href=&quot;https://www.kymat.io/&quot;&gt;kymat.io&lt;/a&gt;网站上。</target>
        </trans-unit>
        <trans-unit id="38bd42950d585edf9cac7c0b160e300e46553aa8" translate="yes" xml:space="preserve">
          <source>The recommended pronunciation for Kymatio is &lt;em&gt;kim-ah-tio&lt;/em&gt;. In other words, it rhymes with patio, not with ratio.</source>
          <target state="translated">Kymatio的推荐发音是&lt;em&gt;kim-ah-tio&lt;/em&gt;。换句话说，它与天井韵律，而不与比率韵律。</target>
        </trans-unit>
        <trans-unit id="b2372497347160ef4fd2d2708611e96f9f743d06" translate="yes" xml:space="preserve">
          <source>The resort to PyTorch tensors as inputs to Kymatio allows the programmer to backpropagate the gradient of wavelet scattering coefficients, thus integrating them within an end-to-end trainable pipeline, such as a deep neural network.</source>
          <target state="translated">诉诸PyTorch tensors作为Kymatio的输入,允许程序员反推小波散射系数的梯度,从而将它们集成到一个端到端可训练的管道中,例如深度神经网络。</target>
        </trans-unit>
        <trans-unit id="d5a1bf380ef4e64c7198f09c52af5705b6a80a91" translate="yes" xml:space="preserve">
          <source>The user may control the choice of backend at runtime via for instance:</source>
          <target state="translated">用户可以在运行时通过例如控制后台的选择。</target>
        </trans-unit>
        <trans-unit id="fa133e091d611c406041455e9dc419d31a31e906" translate="yes" xml:space="preserve">
          <source>This is particularly useful when working with large images, such as those in ImageNet, which are of size 224&amp;times;224.</source>
          <target state="translated">当处理大图像（例如ImageNet中的大小为224&amp;times;224）时，这特别有用。</target>
        </trans-unit>
        <trans-unit id="fb3e475a7ee89678052880f00eb0fa9feda6105c" translate="yes" xml:space="preserve">
          <source>To explicitly call the &lt;code&gt;numpy&lt;/code&gt; frontend, run:</source>
          <target state="translated">要显式调用 &lt;code&gt;numpy&lt;/code&gt; 前端，请运行：</target>
        </trans-unit>
        <trans-unit id="bea76a8e8b506c0a9628a71da028ba7568b9ab4b" translate="yes" xml:space="preserve">
          <source>To run Kymatio on a graphics processing unit (GPU), you can either use the PyTorch-style &lt;code&gt;cuda()&lt;/code&gt; method to move your
object to GPU. Kymatio is designed to operate on a variety of backends for tensor operations. For extra speed, install
the CUDA library and the &lt;code&gt;skcuda&lt;/code&gt; dependency by running the following pip command:</source>
          <target state="translated">要在图形处理单元（GPU）上运行Kymatio，可以使用PyTorch样式的 &lt;code&gt;cuda()&lt;/code&gt; 方法将对象移动到GPU。Kymatio设计为可在多种后端上进行张量操作。为了提高速度，请通过运行以下pip命令来安装CUDA库和 &lt;code&gt;skcuda&lt;/code&gt; 依赖项：</target>
        </trans-unit>
        <trans-unit id="36e4e599c682ada4993528950521fa589d9ec336" translate="yes" xml:space="preserve">
          <source>Use Kymatio if you need a library that:</source>
          <target state="translated">如果你需要一个图书馆,请使用Kymatio。</target>
        </trans-unit>
        <trans-unit id="05a5ae551bf368c5e5041bf2d553b6aabbde4596" translate="yes" xml:space="preserve">
          <source>Wavelet scattering transforms in Python with GPU acceleration</source>
          <target state="translated">小波散射变换在Python中的GPU加速功能</target>
        </trans-unit>
        <trans-unit id="2754d3d6d5e3850f1489be50c4b4328fc62e9d21" translate="yes" xml:space="preserve">
          <source>We refer to our &lt;a href=&quot;https://www.kymat.io/userguide.html#benchmarks&quot;&gt;official benchmarks&lt;/a&gt; for further details.</source>
          <target state="translated">有关更多详细信息，请参考我们的&lt;a href=&quot;https://www.kymat.io/userguide.html#benchmarks&quot;&gt;官方基准&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5a1163607c1137f1cda0f47a72aa839208d98ac" translate="yes" xml:space="preserve">
          <source>We strongly recommend running Kymatio in an Anaconda environment, because this simplifies the installation of other
dependencies. You may install the latest version of Kymatio using the package manager &lt;code&gt;pip&lt;/code&gt;, which will automatically download
Kymatio from the Python Package Index (PyPI):</source>
          <target state="translated">我们强烈建议在Anaconda环境中运行Kymatio，因为这样可以简化其他依赖项的安装。您可以使用软件包管理器 &lt;code&gt;pip&lt;/code&gt; 安装最新版本的Kymatio ，它将自动从Python软件包索引（PyPI）下载Kymatio：</target>
        </trans-unit>
        <trans-unit id="0a90cf7749775f795a2e742c439f803343fdd208" translate="yes" xml:space="preserve">
          <source>We wish to thank the Scientific Computing Core at the Flatiron Institute for the use of their computing resources for testing.</source>
          <target state="translated">我们要感谢Flatiron研究所的科学计算核心利用其计算资源进行测试。</target>
        </trans-unit>
        <trans-unit id="06c8d549921b00b4e95f34fc557fff72651fde53" translate="yes" xml:space="preserve">
          <source>We would also like to thank &amp;Eacute;cole Normale Sup&amp;eacute;rieure for their support.</source>
          <target state="translated">我们还要感谢&amp;Eacute;coleNormaleSup&amp;eacute;rieure的支持。</target>
        </trans-unit>
        <trans-unit id="54774106dc227a99af20e5f33853600fbcf96e22" translate="yes" xml:space="preserve">
          <source>integrates wavelet scattering in a deep learning architecture, and</source>
          <target state="translated">在深度学习架构中集成了小波散射,以及</target>
        </trans-unit>
        <trans-unit id="dd482e601611de45efcfd5d84acfca518a9fb1ea" translate="yes" xml:space="preserve">
          <source>runs seamlessly on CPU and GPU hardware, with major deep learning APIs, such
as PyTorch and TensorFlow.</source>
          <target state="translated">在CPU和GPU硬件上无缝运行,主要的深度学习API,如PyTorch和TensorFlow。</target>
        </trans-unit>
        <trans-unit id="8cdc0b5a5f22cf13a5eaa3baf42d2bd5ebe625cf" translate="yes" xml:space="preserve">
          <source>supports 1-D, 2-D, and 3-D wavelets,</source>
          <target state="translated">支持1-D、2-D和3-D小波。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
