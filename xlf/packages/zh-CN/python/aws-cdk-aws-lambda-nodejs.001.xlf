<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/aws-cdk-aws-lambda-nodejs/">
    <body>
      <group id="aws-cdk-aws-lambda-nodejs">
        <trans-unit id="58b63e273b964039d6ef432a415df3f177c818e5" translate="yes" xml:space="preserve">
          <source>---</source>
          <target state="translated">---</target>
        </trans-unit>
        <trans-unit id="5795655f7099122749abab518defa40e8f577550" translate="yes" xml:space="preserve">
          <source>All other properties of &lt;code&gt;lambda.Function&lt;/code&gt; are supported, see also the &lt;a href=&quot;https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda&quot;&gt;AWS Lambda construct library&lt;/a&gt;.</source>
          <target state="translated">支持 &lt;code&gt;lambda.Function&lt;/code&gt; 的所有其他属性，另请参阅&lt;a href=&quot;https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda&quot;&gt;AWS Lambda构造库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9276dcebe68a8a88eb119fcf4b29ee42dbb75afc" translate="yes" xml:space="preserve">
          <source>Alternatively, an entry file and handler can be specified:</source>
          <target state="translated">另外,也可以指定一个条目文件和处理程序。</target>
        </trans-unit>
        <trans-unit id="fe411f3505b8a51d0edd0cfeae8bbddc8954aeef" translate="yes" xml:space="preserve">
          <source>Amazon Lambda Node.js Library</source>
          <target state="translated">Amazon Lambda Node.js库</target>
        </trans-unit>
        <trans-unit id="24dcdfe14d89a9025c5f1251a50a23a33d095702" translate="yes" xml:space="preserve">
          <source>By default, all node modules are bundled except for &lt;code&gt;aws-sdk&lt;/code&gt;. This can be configured by specifying
the &lt;code&gt;externalModules&lt;/code&gt; prop.</source>
          <target state="translated">默认情况下，除 &lt;code&gt;aws-sdk&lt;/code&gt; 之外，所有节点模块都捆绑在一起。可以通过指定 &lt;code&gt;externalModules&lt;/code&gt; 属性来配置。</target>
        </trans-unit>
        <trans-unit id="2c64c152d95e133825bc36ebdd93dcd5bd9d7260" translate="yes" xml:space="preserve">
          <source>By default, all node modules referenced in your Lambda code will be bundled by Parcel.
Use the &lt;code&gt;nodeModules&lt;/code&gt; prop to specify a list of modules that should not be bundled
but instead included in the &lt;code&gt;node_modules&lt;/code&gt; folder of the Lambda package. This is useful
when working with native dependencies or when Parcel fails to bundle a module.</source>
          <target state="translated">默认情况下，Parcel将捆绑Lambda代码中引用的所有节点模块。使用 &lt;code&gt;nodeModules&lt;/code&gt; 属性指定不应捆绑的模块列表，而应包括在Lambda软件包的 &lt;code&gt;node_modules&lt;/code&gt; 文件夹中。当使用本机依赖性或Parcel未能捆绑模块时，这很有用。</target>
        </trans-unit>
        <trans-unit id="16be50ff4682c025e368afca8af7638ef4a4387d" translate="yes" xml:space="preserve">
          <source>By default, the construct will use the name of the defining file and the construct's id to look
up the entry file:</source>
          <target state="translated">默认情况下,构造体将使用定义文件的名称和构造体的id来查找条目文件。</target>
        </trans-unit>
        <trans-unit id="bf1ce9d0ae9f2be9d1ced2d965ea8c704ae8c699" translate="yes" xml:space="preserve">
          <source>CDK Constructs for AWS Lambda in Node.js</source>
          <target state="translated">Node.js中的AWS Lambda的CDK构造。</target>
        </trans-unit>
        <trans-unit id="3675011cec878c3740e77f768578f298e39a2567" translate="yes" xml:space="preserve">
          <source>Configuring Babel with Parcel is possible via a &lt;code&gt;.babelrc&lt;/code&gt; or a &lt;code&gt;babel&lt;/code&gt; config in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">通过 &lt;code&gt;.babelrc&lt;/code&gt; 或 &lt;code&gt;package.json&lt;/code&gt; 中的 &lt;code&gt;babel&lt;/code&gt; 配置，可以使用Parcel配置Babel 。</target>
        </trans-unit>
        <trans-unit id="8cb175f39c41dfa100b9298d0997644a86e80d58" translate="yes" xml:space="preserve">
          <source>Configuring Parcel</source>
          <target state="translated">配置包裹</target>
        </trans-unit>
        <trans-unit id="a53a6d0015c9fb70a39b58589ef90c8790ad40cc" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;NodejsFunction&lt;/code&gt;:</source>
          <target state="translated">定义一个 &lt;code&gt;NodejsFunction&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="548bcef531f24042c1657c9c7bd347a1802c9d7a" translate="yes" xml:space="preserve">
          <source>Externals</source>
          <target state="translated">外观</target>
        </trans-unit>
        <trans-unit id="7529436495f41b82b037ccc5c12868c690fa34aa" translate="yes" xml:space="preserve">
          <source>For macOS the recommendend approach is to install Parcel as Docker volume performance is really poor.</source>
          <target state="translated">对于macOS来说,推荐的方法是安装Parcel,因为Docker卷性能确实很差。</target>
        </trans-unit>
        <trans-unit id="76c66b321778edb94d8b3338a340a8561aeac7c2" translate="yes" xml:space="preserve">
          <source>If Parcel v2 is available it will be used to bundle your code in your environment. Otherwise,
bundling will happen in a &lt;a href=&quot;https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x&quot;&gt;Lambda compatible Docker container&lt;/a&gt;.</source>
          <target state="translated">如果Parcel v2可用，它将用于在您的环境中捆绑您的代码。否则，捆绑将发生在&lt;a href=&quot;https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x&quot;&gt;兼容Lambda的Docker容器中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5bd306138d7db02dd179a58e4120116e262529c" translate="yes" xml:space="preserve">
          <source>Install modules</source>
          <target state="translated">安装模块</target>
        </trans-unit>
        <trans-unit id="a93a8fad5e2475a93a5b27709ab8b83ee5850cf5" translate="yes" xml:space="preserve">
          <source>Local bundling</source>
          <target state="translated">本地捆绑</target>
        </trans-unit>
        <trans-unit id="2b8afe313b4f360463019224d5515d7614fc64ce" translate="yes" xml:space="preserve">
          <source>Node.js Function</source>
          <target state="translated">Node.js功能</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="9a0012f840b496b36e9af0df9accd8112622aa8e" translate="yes" xml:space="preserve">
          <source>Parcel transpiles your code (every internal module) with &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;@babel/preset-env&lt;/a&gt; and uses the
runtime version of your Lambda function as target.</source>
          <target state="translated">包裹使用&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;@ babel / preset-env&lt;/a&gt;转换代码（每个内部模块），并使用Lambda函数的运行时版本作为目标。</target>
        </trans-unit>
        <trans-unit id="6075431affacbe07ce9149b8f60d62d9fc494fb0" translate="yes" xml:space="preserve">
          <source>Parcel v2 can be installed with:</source>
          <target state="translated">Parcel v2可以安装与。</target>
        </trans-unit>
        <trans-unit id="32929d4172783d036384d81f3979c9b3eb8af2b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodejsFunction&lt;/code&gt; construct automatically &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html&quot;&gt;reuses existing connections&lt;/a&gt;
when working with the AWS SDK for JavaScript. Set the &lt;code&gt;awsSdkConnectionReuse&lt;/code&gt; prop to &lt;code&gt;false&lt;/code&gt; to disable it.</source>
          <target state="translated">&lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html&quot;&gt;使用&lt;/a&gt; 适用于JavaScript的AWS开发工具包时， &lt;code&gt;NodejsFunction&lt;/code&gt; 构造会自动重用现有连接。将 &lt;code&gt;awsSdkConnectionReuse&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; 以禁用它。</target>
        </trans-unit>
        <trans-unit id="2384a3d1b2191d72845aeaec8eda0416912060d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodejsFunction&lt;/code&gt; construct exposes some &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt; options via properties: &lt;code&gt;minify&lt;/code&gt;, &lt;code&gt;sourceMaps&lt;/code&gt; and &lt;code&gt;cacheDir&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;NodejsFunction&lt;/code&gt; 结构暴露了一些&lt;a href=&quot;https://parceljs.org/&quot;&gt;包裹&lt;/a&gt;通过属性选择： &lt;code&gt;minify&lt;/code&gt; ， &lt;code&gt;sourceMaps&lt;/code&gt; 和 &lt;code&gt;cacheDir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dbcc18ab4e657e549e75fa1c70952b084642819" translate="yes" xml:space="preserve">
          <source>The APIs of higher level constructs in this module are experimental and under active development. They are subject to non-backward compatible changes or removal in any future version. These are not subject to the &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; model and breaking changes will be announced in the release notes. This means that while you may use them, you may need to update your source code when upgrading to a newer version of this package.</source>
          <target state="translated">此模块中较高级别构造的API是实验性的，并且正在积极开发中。它们可能会在将来的任何版本中发生向后兼容的更改或删除。这些不受&lt;a href=&quot;https://semver.org/&quot;&gt;语义版本控制&lt;/a&gt;模型的限制，重大更改将在发行说明中宣布。这意味着尽管可以使用它们，但在升级到此程序包的较新版本时，可能需要更新源代码。</target>
        </trans-unit>
        <trans-unit id="2c7b606236a07ec9fdfb8c85e13cade1fe722e93" translate="yes" xml:space="preserve">
          <source>The modules listed in &lt;code&gt;nodeModules&lt;/code&gt; must be present in the &lt;code&gt;package.json&lt;/code&gt;'s dependencies. The
same version will be used for installation. If a lock file is detected (&lt;code&gt;package-lock.json&lt;/code&gt; or
&lt;code&gt;yarn.lock&lt;/code&gt;) it will be used along with the right installer (&lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;nodeModules&lt;/code&gt; 中列出的模块必须存在于 &lt;code&gt;package.json&lt;/code&gt; 的依赖项中。相同版本将用于安装。如果检测到锁定文件（ &lt;code&gt;package-lock.json&lt;/code&gt; 或 &lt;code&gt;yarn.lock&lt;/code&gt; ），它将与正确的安装程序（ &lt;code&gt;npm&lt;/code&gt; 或 &lt;code&gt;yarn&lt;/code&gt; ）一起使用。</target>
        </trans-unit>
        <trans-unit id="d1cfee13775a080a95a55f2e8d7f2f0ec9f8991c" translate="yes" xml:space="preserve">
          <source>This file is used as &quot;entry&quot; for &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;. This means that your code is
automatically transpiled and bundled whether it's written in JavaScript or TypeScript.</source>
          <target state="translated">该文件用作&lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel的&lt;/a&gt; &amp;ldquo;条目&amp;rdquo; 。这意味着无论是用JavaScript还是TypeScript编写的代码都将自动转译和捆绑。</target>
        </trans-unit>
        <trans-unit id="3478f408f645be3df5912e1f38688ce394448d20" translate="yes" xml:space="preserve">
          <source>This library provides constructs for Node.js Lambda functions.</source>
          <target state="translated">这个库提供了Node.js Lambda函数的构造。</target>
        </trans-unit>
        <trans-unit id="f96123128e1a1023019977f9f0fb79219187a257" translate="yes" xml:space="preserve">
          <source>To force bundling in a Docker container, set the &lt;code&gt;forceDockerBundling&lt;/code&gt; prop to &lt;code&gt;true&lt;/code&gt;. This
is useful if your function relies on node modules that should be installed (&lt;code&gt;nodeModules&lt;/code&gt; prop, see &lt;a href=&quot;#install-modules&quot;&gt;above&lt;/a&gt;) in a Lambda compatible environment. This is usually the
case with modules using native dependencies.</source>
          <target state="translated">要强制在Docker容器中进行捆绑，请将 &lt;code&gt;forceDockerBundling&lt;/code&gt; prop 设置为 &lt;code&gt;true&lt;/code&gt; 。如果您的函数依赖于应在Lambda兼容环境中安装的节点模块（ &lt;code&gt;nodeModules&lt;/code&gt; prop，请参见&lt;a href=&quot;#install-modules&quot;&gt;上文&lt;/a&gt;），这将很有用。对于使用本机依赖性的模块，通常是这种情况。</target>
        </trans-unit>
        <trans-unit id="cba9ffdd1f430eaff38909df65fd3f73edb05620" translate="yes" xml:space="preserve">
          <source>To use this module, you will need to have Docker installed.</source>
          <target state="translated">要使用这个模块,你需要安装Docker。</target>
        </trans-unit>
        <trans-unit id="fcee0bf341086e2cd8b948161e27973343c45662" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;buildArgs&lt;/code&gt; prop to pass build arguments when building the bundling image:</source>
          <target state="translated">构建绑定图像时，请使用 &lt;code&gt;buildArgs&lt;/code&gt; 属性传递构建参数：</target>
        </trans-unit>
        <trans-unit id="d0d1b18f10106351ffc86685b850ccc783891846" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;containerEnvironment&lt;/code&gt; prop to pass environments variables to the Docker container
running Parcel:</source>
          <target state="translated">使用 &lt;code&gt;containerEnvironment&lt;/code&gt; 属性将环境变量传递给运行Parcel的Docker容器：</target>
        </trans-unit>
        <trans-unit id="521bac9f90defc7164b2074837c8624e98766b62" translate="yes" xml:space="preserve">
          <source>Working with modules</source>
          <target state="translated">与模块一起工作</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
