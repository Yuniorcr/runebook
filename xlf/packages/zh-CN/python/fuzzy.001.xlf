<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/fuzzy/">
    <body>
      <group id="fuzzy">
        <trans-unit id="2ac3ab330988eeda30ebaad295aeff9b0524a505" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance&quot;&gt;Jaro-Winkler&lt;/a&gt; distance</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance&quot;&gt;Jaro-Winkler&lt;/a&gt;距离</target>
        </trans-unit>
        <trans-unit id="39292dcb0679d7ba796f5b6de6c57002efb7256f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro_distance&quot;&gt;Jaro&lt;/a&gt; distance</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro_distance&quot;&gt;Jaro&lt;/a&gt;距离</target>
        </trans-unit>
        <trans-unit id="86346e756da7a68299d3a21af9a2618073aeea24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein&lt;/a&gt; edit distance</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein&lt;/a&gt;编辑距离</target>
        </trans-unit>
        <trans-unit id="ada8c6313c42a3760ac948f31f18bf270dd3cbd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Metaphone&quot;&gt;Double Metaphone&lt;/a&gt; Based on Maurice
Aubrey&amp;rsquo;s C code from his perl implementation.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Metaphone&quot;&gt;Double Metaphone&lt;/a&gt;基于他的perl实现中的Maurice Aubrey的C代码。</target>
        </trans-unit>
        <trans-unit id="21cbc0b46d2d1053f6c633b39655ff70dad97aa3" translate="yes" xml:space="preserve">
          <source>Distance Metrics</source>
          <target state="translated">距离指标</target>
        </trans-unit>
        <trans-unit id="0b95da5363bf715342dd2773e4787f0043c8b319" translate="yes" xml:space="preserve">
          <source>Fast Python phonetic algorithms</source>
          <target state="translated">快速的Python语音算法</target>
        </trans-unit>
        <trans-unit id="5907c6450353cf7906660822b423e6fd50098dcd" translate="yes" xml:space="preserve">
          <source>Fuzzy is a python library implementing common phonetic algorithms quickly.
Typically this is in string similarity exercises, but they&amp;rsquo;re pretty versatile.</source>
          <target state="translated">Fuzzy是一个Python库，可快速实现常见的语音算法。通常，这是在字符串相似性练习中，但是它们用途广泛。</target>
        </trans-unit>
        <trans-unit id="36bb4b30e3584f0b501d5bf9eabae2acbc5e2dc2" translate="yes" xml:space="preserve">
          <source>Fuzzy&amp;rsquo;s Double Metaphone was ~10 times faster than the pure python
implementation by  &lt;a href=&quot;http://www.atomodo.com/code/double-metaphone&quot;&gt;Andrew Collins&lt;/a&gt;
in some recent &lt;a href=&quot;http://chmullig.com/2011/03/pypy-testing/&quot;&gt;testing&lt;/a&gt;.
Soundex and NYSIIS should be similarly faster. Using iPython&amp;rsquo;s timeit:</source>
          <target state="translated">在最近的一些&lt;a href=&quot;http://chmullig.com/2011/03/pypy-testing/&quot;&gt;测试中，&lt;/a&gt; Fuzzy的Double Metaphone比&lt;a href=&quot;http://www.atomodo.com/code/double-metaphone&quot;&gt;Andrew Collins&lt;/a&gt;的纯python实现快约10倍 。Soundex和NYSIIS应该同样更快。使用iPython的timeit：</target>
        </trans-unit>
        <trans-unit id="fdf64174f6a3174decf155ec5cb6931b7226f610" translate="yes" xml:space="preserve">
          <source>Hamming distance</source>
          <target state="translated">锤击距离</target>
        </trans-unit>
        <trans-unit id="18f4ad11465c01a84fcbfd76a5eec9298f033f0a" translate="yes" xml:space="preserve">
          <source>In testing it&amp;rsquo;s been several times faster than comparable pure python
implementations of those algorithms.</source>
          <target state="translated">在测试中，它比那些算法的纯python实现要快几倍。</target>
        </trans-unit>
        <trans-unit id="f69ed5f6153731eb61eea3b6afd50cde3480f09e" translate="yes" xml:space="preserve">
          <source>It uses C Extensions (via Cython) for speed.</source>
          <target state="translated">它使用C扩展(通过Cython)来提高速度。</target>
        </trans-unit>
        <trans-unit id="92fe52ee6627e4c2a666cbf487ba6aa5604bac02" translate="yes" xml:space="preserve">
          <source>NYSIIS</source>
          <target state="translated">NYSIIS</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">绩效</target>
        </trans-unit>
        <trans-unit id="5930aa2cb67f8872a19036ca9715aa2cfbd09188" translate="yes" xml:space="preserve">
          <source>Soundex</source>
          <target state="translated">Soundex</target>
        </trans-unit>
        <trans-unit id="30e9dc68e43536a073a9f130a15ce6b0bc51ad23" translate="yes" xml:space="preserve">
          <source>The algorithms are:</source>
          <target state="translated">这些算法是:</target>
        </trans-unit>
        <trans-unit id="faadcfcd7a0b6ae78711959eb1c32069d976d460" translate="yes" xml:space="preserve">
          <source>The functions are quite easy to use!</source>
          <target state="translated">功能使用起来相当方便!</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="15477a9fbe30c75783ab6c4a8f59caadd1295100" translate="yes" xml:space="preserve">
          <source>We recommend the &lt;a href=&quot;http://code.google.com/p/pylevenshtein/&quot;&gt;Python-Levenshtein&lt;/a&gt;
module for fast, C based string distance/similarity metrics. Among others
functions it includes:</source>
          <target state="translated">我们建议使用&lt;a href=&quot;http://code.google.com/p/pylevenshtein/&quot;&gt;Python-Levenshtein&lt;/a&gt; 模块获取基于C的快速字符串距离/相似度指标。除其他功能外，它还包括：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
