<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/namedatomiclock/">
    <body>
      <group id="namedatomiclock">
        <trans-unit id="247d2c089b0a64ec810a0af206d8b3a0eb8849ef" translate="yes" xml:space="preserve">
          <source>A basic usage example</source>
          <target state="translated">基本使用实例</target>
        </trans-unit>
        <trans-unit id="c2dee8bbfbdd939850d245105988b3320925c9bd" translate="yes" xml:space="preserve">
          <source>All UNIX systems are supported, overhead is light, and the lock is global to the system.</source>
          <target state="translated">支持所有UNIX系统,开销很轻,锁是全局的系统。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">文件资料</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="903cb5a06af6cd37b2d4c9506e90f468c9463dc7" translate="yes" xml:space="preserve">
          <source>NamedAtomicLock works by taking advantage of the fact that POSIX defines mkdir to be an atomic operation. So a directory is used as the name.</source>
          <target state="translated">NamedAtomicLock的工作原理是利用POSIX将mkdir定义为原子操作的事实。因此,一个目录被用作名称。</target>
        </trans-unit>
        <trans-unit id="ecc69e5b4b08c4854a55637a6a5030b461112a5c" translate="yes" xml:space="preserve">
          <source>Python module for an atomic named interprocess lock which is local to the machine.</source>
          <target state="translated">Python 模块用于原子命名的进程间锁,它是本地的。</target>
        </trans-unit>
        <trans-unit id="7afd4cd25c14da45b27204c3b2581faa0f32bce2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/NamedAtomicLock/blob/master/doc/NamedAtomicLock.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/NamedAtomicLock/blob/master/doc/NamedAtomicLock.html&lt;/a&gt;</source>
          <target state="translated">参见&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/NamedAtomicLock/blob/master/doc/NamedAtomicLock.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/NamedAtomicLock/blob/master/doc/NamedAtomicLock.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abcfaff739c540fb61ebcb76d9560dfa11083a30" translate="yes" xml:space="preserve">
          <source>The NamedAtomicLock module provides a class NamedAtomicLock which implements the &amp;ldquo;lock&amp;rdquo; interface, with familiar &amp;ldquo;acquire&amp;rdquo; and &amp;ldquo;release&amp;rdquo; methods.</source>
          <target state="translated">NamedAtomicLock模块提供了一个名为NamedAtomicLock的类，该类实现了&amp;ldquo;锁&amp;rdquo;接口以及熟悉的&amp;ldquo;获取&amp;rdquo;和&amp;ldquo;释放&amp;rdquo;方法。</target>
        </trans-unit>
        <trans-unit id="08079591945d469679a88b79fc03ac2ced50ed0e" translate="yes" xml:space="preserve">
          <source>This means that this lock works across process boundries, so you can use it to lock objects that multiple processes would use.</source>
          <target state="translated">这意味着这个锁可以跨进程边界工作,所以你可以用它来锁定多个进程会使用的对象。</target>
        </trans-unit>
        <trans-unit id="fbc00a7c559b69a8f9320a74e7b97adbce9d2af2" translate="yes" xml:space="preserve">
          <source>doWork()</source>
          <target state="translated">doWork()</target>
        </trans-unit>
        <trans-unit id="31ffa27a91b19d4b7dd4f639259ad11d59448368" translate="yes" xml:space="preserve">
          <source>from NamedAtomicLock import NamedAtomicLock</source>
          <target state="translated">从NamedAtomicLock导入NamedAtomicLock。</target>
        </trans-unit>
        <trans-unit id="3d740b36a7745bcb72fdbdd40f42f413151db62a" translate="yes" xml:space="preserve">
          <source>if myLock.acquire(timeout=15):</source>
          <target state="translated">如果myLock.acquire(timeout=15)。</target>
        </trans-unit>
        <trans-unit id="8fdc68979ce6bbda5cf4cf9f065d498808f0452f" translate="yes" xml:space="preserve">
          <source>myLock = NamedAtomicLock(&amp;lsquo;myLock&amp;rsquo;)</source>
          <target state="translated">myLock = NamedAtomicLock（'myLock'）</target>
        </trans-unit>
        <trans-unit id="6e75031c87bf619683baba356647ad4c6715cd71" translate="yes" xml:space="preserve">
          <source>myLock.release()</source>
          <target state="translated">myLock.release()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
