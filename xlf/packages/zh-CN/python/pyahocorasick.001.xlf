<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/pyahocorasick/">
    <body>
      <group id="pyahocorasick">
        <trans-unit id="ed97aac606c284f00a8e98f0ae07140929fbe028" translate="yes" xml:space="preserve">
          <source>(and its</source>
          <target state="translated">（及其</target>
        </trans-unit>
        <trans-unit id="e3067ae56410f9464bfc62ad525719ec2237bbc0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;noaho&lt;/a&gt; by Jeff Donner</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;&lt;/a&gt;Jeff Donner的noaho</target>
        </trans-unit>
        <trans-unit id="2898914d91ade6aa4b5fab75831b531b3d2f6679" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick&lt;/a&gt; by Jan</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick&lt;/a&gt;于Jan</target>
        </trans-unit>
        <trans-unit id="81c37789d6d7ff8f548453721778100bd5d331dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;ahocorapy&lt;/a&gt; by abusix</source>
          <target state="translated">&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;abusix&lt;/a&gt;的同种疗法</target>
        </trans-unit>
        <trans-unit id="c7d44400b2f57def86baddf19afbfc3e699abdc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;acora&lt;/a&gt; by Stefan Behnel</source>
          <target state="translated">&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;acora酒店&lt;/a&gt;由斯特凡Behnel</target>
        </trans-unit>
        <trans-unit id="6d9a570276800e272f34696ea2ab7536f7a8bede" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;ahocorasick&lt;/a&gt; by Danny Yoo</source>
          <target state="translated">&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;ahocorasick&lt;/a&gt;丹尼柳</target>
        </trans-unit>
        <trans-unit id="9770c1cb2742574796021ba58990f9e621272f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aho-Corasick automatons&lt;/strong&gt; are commonly used for fast multi-pattern matching
in intrusion detection systems (such as snort), anti-viruses and many other
applications that need fast matching against a pre-defined set of string keys.</source>
          <target state="translated">&lt;strong&gt;Aho-Corasick自动机&lt;/strong&gt;通常用于入侵检测系统（例如snort），防病毒软件和许多其他需要与预定义的字符串键快速匹配的应用程序中的快速多模式匹配。</target>
        </trans-unit>
        <trans-unit id="7dd3bf2e6f48a980abeaa7119e3942eda3c11cae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Andrew Grigorev&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;安德鲁&amp;middot;格里戈列夫（Andrew Grigorev）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2fb40f4f613f9ac3cfec16945940e4349611a293" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bogdan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;博格丹&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6393c48fba67057a6497248e9d6b30140999726f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;David Woakes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;大卫&amp;middot;沃克斯（David Woakes）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="162d0e50b0670b0376cbdbf7b1e65d64fc0a1f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edward Betts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;爱德华&amp;middot;贝茨&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bfe3f4ab47a409cb2bd40897690783ae572c53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frankie Robertson&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;弗兰基&amp;middot;罗伯逊（Frankie Robertson）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3af194910234db2a514c52b9a661270037c96342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frederik Petersen&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;弗雷德里克&amp;middot;彼得森&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e49fa0cad50da1418d242834a238904c03fdd42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INADA Naoki&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;稻田直树&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="874d19396e59a53cbdcade123bc4349d5fd7cf57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jan Fan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;范凡&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc7d3706eaf36f8967cc0d24859e944da30d97d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pastafarianist&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;面食主义者&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ea279129e79d202bf58037ef3a7cd73546b43af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Philippe Ombredanne&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;菲利普&amp;middot;奥姆布雷丹&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b2d0fa470009d75d07f9589be39b9f90813cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Renat Nasyrov&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;雷纳特&amp;middot;纳西罗夫（Renat Nasyrov）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b95a3ee36aea47516df64cdf62619b4ef0f8fe0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sylvain Zimmer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;西尔万&amp;middot;齐默尔&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="949463ea7fe3fff2c8592527d998390dde1c321c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xiaopeng Xu&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;徐小鹏&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8185da43a01dd59da25c68eb057e9018a63e6d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gladtosee&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;很高兴见到&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aec24ead2e378aa1de01e390b2d48c5093417c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pyahocorasick&lt;/strong&gt; is a fast and memory efficient library for exact or approximate
multi-pattern string search meaning that you can find multiple key strings
occurrences at once in some input text.  The library provides an</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt;是一个快速且内存有效的库，用于精确或近似的多模式字符串搜索，这意味着您可以在某些输入文本中一次找到多个键字符串。图书馆提供了</target>
        </trans-unit>
        <trans-unit id="b094c013fc7959b0e49319f3c239cd5595cb2e1c" translate="yes" xml:space="preserve">
          <source>A drawback is that it needs to be constructed and &amp;ldquo;finalized&amp;rdquo; ahead of time
before you can search strings. In several applications where you search for several
pre-defined &amp;ldquo;needles&amp;rdquo; in a variable &amp;ldquo;haystacks&amp;rdquo; this is actually an advantage.</source>
          <target state="translated">缺点是需要先构造和&amp;ldquo;确定&amp;rdquo;它，然后才能搜索字符串。在几个应用程序中，您需要在变量&amp;ldquo;干草堆&amp;rdquo;中搜索几个预定义的&amp;ldquo;针&amp;rdquo;，这实际上是一个优势。</target>
        </trans-unit>
        <trans-unit id="04782ec4eca1f6097648d60e92dc2368306610c7" translate="yes" xml:space="preserve">
          <source>AHOCORASICK_UNICODE</source>
          <target state="translated">AHOCORASICK_UNICODE</target>
        </trans-unit>
        <trans-unit id="d8c1fb100909b2de5e3e6846b03cdf758e3a1ef9" translate="yes" xml:space="preserve">
          <source>Alphabetic list of authors:</source>
          <target state="translated">按字母顺序排列的作者名单:</target>
        </trans-unit>
        <trans-unit id="7b2c0e3b7a55c97534608d2d71b37edc8610942d" translate="yes" xml:space="preserve">
          <source>And play with the</source>
          <target state="translated">和玩</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">作者</target>
        </trans-unit>
        <trans-unit id="44ba7c9100516298055fc980c38686ce14b07df5" translate="yes" xml:space="preserve">
          <source>Automaton</source>
          <target state="translated">自动机</target>
        </trans-unit>
        <trans-unit id="f405bb9bd02d587cdb693f843b6d07868d7a8784" translate="yes" xml:space="preserve">
          <source>Automaton.iter()</source>
          <target state="translated">Automaton.iter()</target>
        </trans-unit>
        <trans-unit id="25719a5cf1783036cea960576445312036b584ec" translate="yes" xml:space="preserve">
          <source>Automaton.unicode</source>
          <target state="translated">Automaton.unicode</target>
        </trans-unit>
        <trans-unit id="3ea9b7958e6e0f63f2ef85fa952a4e7d3b2a34a4" translate="yes" xml:space="preserve">
          <source>Behind the scenes the &lt;strong&gt;pyahocorasick&lt;/strong&gt; Python library implements these two data
structures:  a &lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt; and an Aho-Corasick string
matching automaton. Both are exposed through the</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt; Python库在&lt;strong&gt;后台&lt;/strong&gt;实现了这两个数据结构：&lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt;和Aho-Corasick字符串匹配自动机。两者都通过</target>
        </trans-unit>
        <trans-unit id="7abedb1575fd6bac486d83daa0fae3666fcd6d40" translate="yes" xml:space="preserve">
          <source>Better performance than py-aho-corasick.</source>
          <target state="translated">比py-aho-corasick表现更好。</target>
        </trans-unit>
        <trans-unit id="02afad2d07ff35fa2d38c3f1aa70f1ad2bf9a908" translate="yes" xml:space="preserve">
          <source>Build and install from PyPi</source>
          <target state="translated">从PyPi构建和安装</target>
        </trans-unit>
        <trans-unit id="e50315914efb0d909a65ca1269c98237e027ab40" translate="yes" xml:space="preserve">
          <source>Conda-Forge &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</source>
          <target state="translated">康达伪造&lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">贡献</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">文件资料</target>
        </trans-unit>
        <trans-unit id="55ab40731d2b483f40f5c367bf45cf082a424256" translate="yes" xml:space="preserve">
          <source>Does not compile on Windows (July 2016).</source>
          <target state="translated">不在Windows上编译(2016年7月)。</target>
        </trans-unit>
        <trans-unit id="9cf270b0ed04e38ca1168cadd64d0b400c9268cd" translate="yes" xml:space="preserve">
          <source>Download and source code</source>
          <target state="translated">下载和源代码</target>
        </trans-unit>
        <trans-unit id="658c081ddc6d9c0cb44f7db7896b386bf67ec1fc" translate="yes" xml:space="preserve">
          <source>FAQ and Who is using pyahocorasick? &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</source>
          <target state="translated">常见问题解答，谁在使用pyahocorasick？&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1e450a10c75a74703dde77de000687ff20958d0" translate="yes" xml:space="preserve">
          <source>Full text of license is available in LICENSE file.</source>
          <target state="translated">许可证的全文可在LICENSE文件中找到。</target>
        </trans-unit>
        <trans-unit id="cab4b9f03f6a3ca40df9255c188756480ea392ef" translate="yes" xml:space="preserve">
          <source>GPL-licensed.</source>
          <target state="translated">GPL授权。</target>
        </trans-unit>
        <trans-unit id="272e4f2c171f5d31922d67de7378f7e262a5bc76" translate="yes" xml:space="preserve">
          <source>GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad05633a3a72b5a69f26140c6b056ca6ac3cc746" translate="yes" xml:space="preserve">
          <source>Here we print the results and just check that they are correct. The</source>
          <target state="translated">这里我们把结果打印出来,检查一下是否正确即可。在这里,我们只需检查结果是否正确。</target>
        </trans-unit>
        <trans-unit id="17312d12e6bb98023633465fda0a407c342321e8" translate="yes" xml:space="preserve">
          <source>If compilation succeeds, the module is ready to use.</source>
          <target state="translated">如果编译成功,模块就可以使用了。</target>
        </trans-unit>
        <trans-unit id="bd491784e8bd16d60a13acab42b345ed6027c091" translate="yes" xml:space="preserve">
          <source>In addition to Trie-like and Aho-Corasick methods and data structures,
&lt;strong&gt;pyahocorasick&lt;/strong&gt; also implements dict-like methods: The pyahocorasick
&lt;strong&gt;Automaton&lt;/strong&gt; is a &lt;strong&gt;Trie&lt;/strong&gt; a dict-like structure indexed by string keys each
associated with a value object. You can use this to retrieve an associated value
in a time proportional to a string key length.</source>
          <target state="translated">除了类似Trie和Aho-Corasick的方法和数据结构之外，&lt;strong&gt;pyahocorasick&lt;/strong&gt;还实现了类似dict的方法：pyahocorasick&lt;strong&gt;自动机&lt;/strong&gt;是&lt;strong&gt;Trie&lt;/strong&gt;的类似dict的结构，每个字符串都与一个值对象相关联。您可以使用它在与字符串键长成比例的时间内检索关联值。</target>
        </trans-unit>
        <trans-unit id="734f73caf4ba4b4af7ad7e2ac00e7ad457c2946d" translate="yes" xml:space="preserve">
          <source>Includes visualization tool for resulting automaton (using pygraphviz).</source>
          <target state="translated">包括结果自动机的可视化工具(使用pygraphviz)。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="bb182491194b4d0793fa0b2ebfb14180cb314c9d" translate="yes" xml:space="preserve">
          <source>Internally an Aho-Corasick automaton is typically based on a Trie with extra
data for failure links and an implementation of the Aho-Corasick search
procedure.</source>
          <target state="translated">在内部,一个Aho-Corasick自动机通常是基于一个带有额外数据的故障链接的Trie和Aho-Corasick搜索过程的实现。</target>
        </trans-unit>
        <trans-unit id="fe01490a6d0f624547f199e72bd239c228a8fa3e" translate="yes" xml:space="preserve">
          <source>It is implemented in C and tested on Python 2.7 and 3.4+. It works on Linux, Mac and
Windows.</source>
          <target state="translated">它是用C语言实现的,并在Python 2.7和3.4+上测试。它适用于Linux、Mac和Windows。</target>
        </trans-unit>
        <trans-unit id="0b87609b15fd736afe5e6b3e9f08be5444d9d946" translate="yes" xml:space="preserve">
          <source>Large automaton may take a long time to build (July 2016)</source>
          <target state="translated">大型自动机可能需要很长的时间来制造(2016年7月)。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="122441255d963912bba0b6bd7da9b922f9c619b6" translate="yes" xml:space="preserve">
          <source>MIT-licensed, 100% test coverage, tested on all major python versions (+ pypy)</source>
          <target state="translated">MIT授权,100%测试覆盖率,在所有主流的python版本上进行测试(+pypy)</target>
        </trans-unit>
        <trans-unit id="ce7628c9a6e0f7b0383b4db2f57e0a8e41f2d4fd" translate="yes" xml:space="preserve">
          <source>No support for a dict-like protocol to associate a value to a string key.</source>
          <target state="translated">不支持类似于dict的协议,将一个值关联到一个字符串键。</target>
        </trans-unit>
        <trans-unit id="10e2c2319f5e18601635b0d8ffdf8a79b616342e" translate="yes" xml:space="preserve">
          <source>No support for the pickle protocol.</source>
          <target state="translated">不支持泡菜协议。</target>
        </trans-unit>
        <trans-unit id="199d8cc3d06f55aa835b5938ee867f1fcd4256a9" translate="yes" xml:space="preserve">
          <source>Now convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search:</source>
          <target state="translated">现在将trie转换为Aho-Corasick自动机,以实现Aho-Corasick搜索。</target>
        </trans-unit>
        <trans-unit id="574fb291c52b991631be9dcc16b47856c8ba7921" translate="yes" xml:space="preserve">
          <source>On Windows and Python 2.7 you need the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;Microsoft Visual C++ Compiler for Python 2.7&lt;/a&gt; (aka. Visual
Studio 2008). There have been reports that</source>
          <target state="translated">在Windows和Python 2.7上，您需要&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;用于Python 2.7&lt;/a&gt;的Microsoft Visual C ++编译器（又名Visual Studio 2008）。有报道说</target>
        </trans-unit>
        <trans-unit id="8a664c4f166a6502ac9a27fe58c9b46cbef6d96e" translate="yes" xml:space="preserve">
          <source>One of the advantages of an Aho-Corasick automaton is that the typical worst-case
and best-case &lt;strong&gt;runtimes&lt;/strong&gt; are about the same and depends primarily on the size
of the input string and secondarily on the number of matches returned.  While
this may not be the fastest string search algorithm in all cases, it can search
for multiple strings at once and its runtime guarantees make it rather unique.
Because pyahocorasick is based on a Trie, it stores redundant keys prefixes only
once using memory efficiently.</source>
          <target state="translated">Aho-Corasick自动机的优点之一是典型的最差情况和最佳情况&lt;strong&gt;运行时&lt;/strong&gt;几乎相同，并且主要取决于输入字符串的大小，其次取决于返回的匹配项的数量。尽管这可能不是在所有情况下最快的字符串搜索算法，但它可以一次搜索多个字符串，并且其运行时保证使它相当独特。因为pyahocorasick基于Trie，所以它仅使用内存有效地存储一次冗余密钥前缀。</target>
        </trans-unit>
        <trans-unit id="e246417542e9b47eb9f386debf9a6c56e0bfe0d8" translate="yes" xml:space="preserve">
          <source>Other Aho-Corasick implementations for Python you can consider</source>
          <target state="translated">其他你可以考虑的Python的Aho-Corasick实现。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概述</target>
        </trans-unit>
        <trans-unit id="db0f74a1197d6b2e8f18cf9a0e372b427a8942e7" translate="yes" xml:space="preserve">
          <source>Performs additional suffix shortcutting (more setup overhead, less search overhead for suffix lookups).</source>
          <target state="translated">执行额外的后缀快捷方式(更多的设置开销,更少的后缀查找的搜索开销)。</target>
        </trans-unit>
        <trans-unit id="74e4fe431448e00688da3c8643c56bc538eb9444" translate="yes" xml:space="preserve">
          <source>Poor performance.</source>
          <target state="translated">表现不佳。</target>
        </trans-unit>
        <trans-unit id="fe28615cf8cffc3bbeb6a7d015900e3338401a59" translate="yes" xml:space="preserve">
          <source>Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45c1df25b203a7ba230eed956c1777a7aa677903" translate="yes" xml:space="preserve">
          <source>Python
module that you can use as a plain dict-like Trie or convert a Trie to an automaton
for efficient Aho-Corasick search.</source>
          <target state="translated">Python模块,你可以将其作为一个普通的类似于dict的Trie,或者将一个Trie转换为一个自动机,以实现高效的Aho-Corasick搜索。</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">快速启动</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">另见:</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">技术支持</target>
        </trans-unit>
        <trans-unit id="3e13dec66bbc8d1730f2c6132002840bd1f7157a" translate="yes" xml:space="preserve">
          <source>Support is available through the &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; to report bugs or ask
questions.</source>
          <target state="translated">可以通过&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub问题跟踪器&lt;/a&gt;获得支持，以报告错误或提出问题。</target>
        </trans-unit>
        <trans-unit id="174534c6b3882921f07bb41f7a29c9824d9b171b" translate="yes" xml:space="preserve">
          <source>Thank you.</source>
          <target state="translated">谢谢你。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">De</target>
        </trans-unit>
        <trans-unit id="1d05cabd76099f37019d2974b963cca4a1200f90" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#license&quot;&gt;license&lt;/a&gt; is BSD-3-clause. Some utilities, such as tests and the pure Python
automaton are dedicated to the Public Domain.</source>
          <target state="translated">该&lt;a href=&quot;#license&quot;&gt;许可证&lt;/a&gt;是BSD -3-子句。一些实用程序（例如测试和纯Python自动机）专用于Public Domain。</target>
        </trans-unit>
        <trans-unit id="7d65dbc73543968a8479240a96a7efc6150edcf9" translate="yes" xml:space="preserve">
          <source>The full documentation including the API overview and reference is published on
&lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt;.</source>
          <target state="translated">完整的文档（包括API概述和参考）在&lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt;上发布。</target>
        </trans-unit>
        <trans-unit id="afed17b15d79d7910cc59b01b6cb7ac878d8f5fa" translate="yes" xml:space="preserve">
          <source>The initial author and maintainer is Wojciech Muła. &lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt;, the current co-owner, rewrote
documentation, setup CI servers and did a whole lot of work to make this module
better accessible to end users.</source>
          <target state="translated">最初的作者和维护者是WojciechMuła。当前的共同所有者&lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt;重新编写了文档，设置了CI服务器，并做了很多工作，以使最终用户可以更好地访问此模块。</target>
        </trans-unit>
        <trans-unit id="4b5ac9c74ef0cc47e587063fd4e4d4c3a5c9a569" translate="yes" xml:space="preserve">
          <source>The type of strings accepted and returned by</source>
          <target state="translated">接受和返回的字符串类型</target>
        </trans-unit>
        <trans-unit id="9534657f069153e8db5ee1126e3cc2e1a451ece9" translate="yes" xml:space="preserve">
          <source>Then check if some string exists in the trie:</source>
          <target state="translated">然后检查trie中是否存在一些字符串。</target>
        </trans-unit>
        <trans-unit id="959dc99901355a8612b602dbe13380c89fb12c42" translate="yes" xml:space="preserve">
          <source>Then create an Automaton:</source>
          <target state="translated">然后创建一个自动人。</target>
        </trans-unit>
        <trans-unit id="d2c6d3f04bf71d2bfa75772861724b90c6e11939" translate="yes" xml:space="preserve">
          <source>Then search all occurrences of the keys (the needles) in an input string (our haystack).</source>
          <target state="translated">然后在一个输入字符串(我们的干草堆)中搜索所有键(针)的出现。</target>
        </trans-unit>
        <trans-unit id="26eae255de3160d089849367227c318e420bae93" translate="yes" xml:space="preserve">
          <source>This library is licensed under very liberal
&lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; license. Some portions of
the code are dedicated to the public domain such as the pure Python automaton and test
code.</source>
          <target state="translated">该库是根据非常宽松的&lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3条款&lt;/a&gt;许可使用的。该代码的某些部分专用于公共领域，例如纯Python自动机和测试代码。</target>
        </trans-unit>
        <trans-unit id="a76d0f88d6303cbc70bca3eaafc6057174b0e969" translate="yes" xml:space="preserve">
          <source>This library would not be possible without help of many people, who contributed in
various ways.
They created &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;pull requests&lt;/a&gt;,
reported bugs as &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issues&lt;/a&gt;
or via direct messages, proposed fixes, or spent their valuable time on testing.</source>
          <target state="translated">没有许多人的帮助，这个图书馆是不可能的，他们以各种方式作出了贡献。他们创建了&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;拉取请求&lt;/a&gt;，以&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub问题&lt;/a&gt;或直接消息的形式报告错误，提出了建议的修复程序，或将宝贵的时间花在了测试上。</target>
        </trans-unit>
        <trans-unit id="65802d1bebf9a241c61798462c97bce6dfbfc8f7" translate="yes" xml:space="preserve">
          <source>This module is written in C. You need a C compiler installed to compile native
CPython extensions. To install:</source>
          <target state="translated">这个模块是用C语言编写的,你需要安装一个C编译器来编译本地CPython扩展。要安装</target>
        </trans-unit>
        <trans-unit id="e800b963297cdb42008d55c6934e3c969110967f" translate="yes" xml:space="preserve">
          <source>To build from sources you need to have a C compiler installed and configured which
should be standard on Linux and easy to get on MacOSX.</source>
          <target state="translated">要从源码编译,你需要安装和配置一个C编译器,这个编译器在Linux上应该是标准的,在MacOSX上很容易得到。</target>
        </trans-unit>
        <trans-unit id="2303b77104c204d0cf392f7c5542a4497f1ecdf6" translate="yes" xml:space="preserve">
          <source>To build from sources, clone the git repository or download and extract the source
archive.</source>
          <target state="translated">要从源码中构建,可以克隆git仓库或下载并解压源码档案。</target>
        </trans-unit>
        <trans-unit id="75a85f5e73844aa9ce0678ff10641a6c17579101" translate="yes" xml:space="preserve">
          <source>To install for common operating systems, use pip. Pre-built wheels should be
available on Pypi at some point in the future:</source>
          <target state="translated">要为普通操作系统安装,请使用pip。Pypi上的预制轮子应该会在未来的某个时候出现。</target>
        </trans-unit>
        <trans-unit id="6e777a781dedce1b28e01826c3c139d313404f24" translate="yes" xml:space="preserve">
          <source>Unicode and bytes</source>
          <target state="translated">统一码和字节</target>
        </trans-unit>
        <trans-unit id="7206176896659795f74afea7cc4e7d29256396ff" translate="yes" xml:space="preserve">
          <source>Unicode is &lt;strong&gt;NOT supported&lt;/strong&gt; on Python 2 for now.</source>
          <target state="translated">目前，Python 2&lt;strong&gt;不支持&lt;/strong&gt;Unicode 。</target>
        </trans-unit>
        <trans-unit id="20a865e70cb26947232ecd90e8b1136329511b67" translate="yes" xml:space="preserve">
          <source>Using pypy, ahocorapy&amp;rsquo;s search performance is only slightly worse than pyahocorasick&amp;rsquo;s.</source>
          <target state="translated">使用pypy，ahocorapy的搜索性能仅比pyahocorasick的搜索性能稍差。</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">警告</target>
        </trans-unit>
        <trans-unit id="20325b1033d8381cc0e0e9f5cdf4baa1aeecfa32" translate="yes" xml:space="preserve">
          <source>When the library is built with unicode support on Python 3, an Automaton will
store 2 or 4 bytes per letter, depending on your Python installation. When built
for bytes, only one byte per letter is needed.</source>
          <target state="translated">当在Python 3上以支持unicode的方式构建库时,Automaton将根据你的Python安装情况,为每个字母存储2或4个字节。当为字节构建时,每个字母只需要一个字节。</target>
        </trans-unit>
        <trans-unit id="cc578d41959c5c83a536719803a2120cb3a926c9" translate="yes" xml:space="preserve">
          <source>While &lt;strong&gt;pyahocorasick&lt;/strong&gt; tries to be the finest and fastest Aho Corasick library
for Python you may consider these other libraries:</source>
          <target state="translated">尽管&lt;strong&gt;pyahocorasick&lt;/strong&gt;试图成为Python最好，最快的Aho Corasick库，但您可以考虑以下其他库：</target>
        </trans-unit>
        <trans-unit id="189369cb661a954a8ee2e23f3f4d59cb8ab47209" translate="yes" xml:space="preserve">
          <source>With an &lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;Aho-Corasick automaton&lt;/a&gt;
you can efficiently search all occurrences of multiple strings (the needles) in an
input string (the haystack) making a single pass over the input string. With
pyahocorasick you can eventually build large automatons and pickle them to reuse
them over and over as an indexed structure for fast multi pattern string matching.</source>
          <target state="translated">借助&lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;Aho-Corasick自动机，&lt;/a&gt;您可以高效地搜索输入字符串（干草堆）中所有出现的多个字符串（针），并在输入字符串上进行一次遍历。有了pyahocorasick，您最终可以构建大型自动机，然后对它们进行腌制，以反复使用它们作为索引结构，以实现快速的多模式字符串匹配。</target>
        </trans-unit>
        <trans-unit id="ddd8dcd46e0738b341d3e1e285d6a263179698ec" translate="yes" xml:space="preserve">
          <source>Written in C.</source>
          <target state="translated">用C写的。</target>
        </trans-unit>
        <trans-unit id="d42f9e878192a8bb5e32f72fea1ce7300932b374" translate="yes" xml:space="preserve">
          <source>Written in C. Does not return overlapping matches.</source>
          <target state="translated">用C语言编写,不返回重叠的匹配。</target>
        </trans-unit>
        <trans-unit id="4ad9e66c3d7119769fc23a32bf9ea46fc37a0022" translate="yes" xml:space="preserve">
          <source>Written in Cython.</source>
          <target state="translated">用Cython编写。</target>
        </trans-unit>
        <trans-unit id="f648ca758eb1cfa4b53138bdd824268576d35265" translate="yes" xml:space="preserve">
          <source>Written in pure Python.</source>
          <target state="translated">用纯Python编写。</target>
        </trans-unit>
        <trans-unit id="21610d0af0f56ee1ffce9457679ca588e96303ed" translate="yes" xml:space="preserve">
          <source>You can also create an eventually large automaton ahead of time and</source>
          <target state="translated">你也可以提前创建一个最终的大型自动机,并。</target>
        </trans-unit>
        <trans-unit id="f90f51c59d0a07bb77939cc1d895db9ff88903bd" translate="yes" xml:space="preserve">
          <source>You can fetch &lt;strong&gt;pyahocorasick&lt;/strong&gt; from:</source>
          <target state="translated">您可以从以下位置获取&lt;strong&gt;pyahocorasick&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="8a34cb424be5c612007112dca2745443175309ac" translate="yes" xml:space="preserve">
          <source>You can submit contributions through &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHub pull requests&lt;/a&gt;.</source>
          <target state="translated">您可以通过&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHub拉取请求&lt;/a&gt;提交贡献。</target>
        </trans-unit>
        <trans-unit id="4059645e8bead06953ce87b04c2044bb82ea4469" translate="yes" xml:space="preserve">
          <source>You can use the Automaton class as a trie. Add some string keys and their associated
value to this trie. Here we associate a tuple of (insertion index, original string)
as a value to each key string we add to the trie:</source>
          <target state="translated">你可以使用Automaton类作为一个trie。将一些字符串键及其相关的值添加到这个 trie 中。在这里,我们将一个(插入索引,原始字符串)的元组作为值关联到我们添加到 trie 中的每个键串。</target>
        </trans-unit>
        <trans-unit id="cad0f60d92a12c5e6f6120b7baa3005fd81bd2d4" translate="yes" xml:space="preserve">
          <source>a CPython &lt;strong&gt;C-based extension&lt;/strong&gt;, compatible with Python 2 and 3.</source>
          <target state="translated">一个&lt;strong&gt;基于&lt;/strong&gt;CPython &lt;strong&gt;C的扩展&lt;/strong&gt;，与Python 2和3兼容。</target>
        </trans-unit>
        <trans-unit id="c8f2d0f5b3922e28e1d46e2a166716a566fb7927" translate="yes" xml:space="preserve">
          <source>a simpler pure Python module, compatible with Python 2 and 3. This is only
available in the source repository (not on Pypi) under the py/ directory and
has a slightly different API.</source>
          <target state="translated">一个更简单的纯 Python 模块,与 Python 2 和 3 兼容。它只在 py/目录下的源码库中 (不在 Pypi 上)提供,并且有一个稍微不同的 API。</target>
        </trans-unit>
        <trans-unit id="85c447a62211d435f16120c5801a6a4d6e1f2695" translate="yes" xml:space="preserve">
          <source>ahocorasick</source>
          <target state="translated">ahocorasick</target>
        </trans-unit>
        <trans-unit id="07c33f4c5b41e7883028c6861ece1bf8a0b7044f" translate="yes" xml:space="preserve">
          <source>as set in</source>
          <target state="translated">定于</target>
        </trans-unit>
        <trans-unit id="c3ce14415b37306cdba0e601673a7e7701e60f4f" translate="yes" xml:space="preserve">
          <source>attributes can tell you how the library was built.
On Python 3, unicode is the default. On Python 2, bytes is the default and only value.</source>
          <target state="translated">属性可以告诉您库是如何构建的。在 Python 3 中,unicode 是默认值。在 Python 2 中,字节是默认的,也是唯一的值。</target>
        </trans-unit>
        <trans-unit id="db5f6869b5f0574b5bb750d7a83d523f28ed9c61" translate="yes" xml:space="preserve">
          <source>class.</source>
          <target state="translated">类。</target>
        </trans-unit>
        <trans-unit id="6c8d48ef3f05b27405f0b115449226fa1295dca3" translate="yes" xml:space="preserve">
          <source>companion) and then run (in a</source>
          <target state="translated">同伴),然后运行(在</target>
        </trans-unit>
        <trans-unit id="eafac96f6304711036f6df796ae70e90f66d43fb" translate="yes" xml:space="preserve">
          <source>dict-like method:</source>
          <target state="translated">dict类方法。</target>
        </trans-unit>
        <trans-unit id="1e137456ce41b147b97c4a3b82b9d921053a7b85" translate="yes" xml:space="preserve">
          <source>does not build yet with
MinGW. It may build with cygwin but this has not been tested. If you get this working
with these platforms, please report in a ticket!</source>
          <target state="translated">还不能与MinGW一起构建。它可能会在cygwin中构建,但还没有测试过。如果您能在这些平台上运行,请在票据中报告。</target>
        </trans-unit>
        <trans-unit id="c0105fb2a16ab02277e579cd37d38307d734cc35" translate="yes" xml:space="preserve">
          <source>end index</source>
          <target state="translated">尾数</target>
        </trans-unit>
        <trans-unit id="24d7cde2f7b74a74ae24dd233457289a2e70ea1f" translate="yes" xml:space="preserve">
          <source>for this key. Here
we had stored as values a tuple with the original string and its trie insertion
order:</source>
          <target state="translated">为这个键。在这里,我们存储了一个带有原始字符串的元组和它的Trie插入顺序作为值。</target>
        </trans-unit>
        <trans-unit id="4a79533a2233d37071096ed5d29c1e9ac6cf66e6" translate="yes" xml:space="preserve">
          <source>get()</source>
          <target state="translated">get()</target>
        </trans-unit>
        <trans-unit id="57b3198ec561cc8ba7f8f3463ae5ce122251a891" translate="yes" xml:space="preserve">
          <source>it to
re-load later. Here we just pickle to a string. You would typically pickle to a
file instead:</source>
          <target state="translated">以便以后重新加载。在这里,我们只是pickle到一个字符串。你通常会用pickle来代替一个文件。</target>
        </trans-unit>
        <trans-unit id="dd3297182bd934e5b975d272e648bb0bba704c84" translate="yes" xml:space="preserve">
          <source>method return the results as two-tuples of the</source>
          <target state="translated">方法返回的结果为</target>
        </trans-unit>
        <trans-unit id="10503efecca5b35f7093f4d661d94c7e8a3631cd" translate="yes" xml:space="preserve">
          <source>methods are either
&lt;strong&gt;unicode&lt;/strong&gt; or &lt;strong&gt;bytes&lt;/strong&gt;, depending on a compile time settings (preprocessor
definition of</source>
          <target state="translated">方法是&lt;strong&gt;unicode&lt;/strong&gt;或&lt;strong&gt;bytes&lt;/strong&gt;，具体取决于编译时设置（</target>
        </trans-unit>
        <trans-unit id="e7e07db96173fcd579f4a7910b826b93a8cd1d37" translate="yes" xml:space="preserve">
          <source>of
course!):</source>
          <target state="translated">当然!)。)</target>
        </trans-unit>
        <trans-unit id="a4561d3eb3b70a05c27c8ecfe455b03bd467781c" translate="yes" xml:space="preserve">
          <source>pickle</source>
          <target state="translated">泡菜</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">pip</target>
        </trans-unit>
        <trans-unit id="6be2e6bc394bd46ea0d122608c74793b53c4b08a" translate="yes" xml:space="preserve">
          <source>pyahocorasick</source>
          <target state="translated">晕车</target>
        </trans-unit>
        <trans-unit id="6cd73e638cb43aad4182b170751dce7d061b2c67" translate="yes" xml:space="preserve">
          <source>pyahocorasick is a fast and memory efficient library for exact or approximate multi-pattern string search.  With the ahocorasick.Automaton class, you can find multiple key strings occurrences at once in some input text.  You can use it as a plain dict-like Trie or convert a Trie to an automaton for efficient Aho-Corasick search.  Implemented in C and tested on Python 2.7 and 3.4+.  Works on Linux, Mac and Windows. BSD-3-clause license.</source>
          <target state="translated">pyahocorasick是一个快速且节省内存的库,用于精确或近似的多模式字符串搜索。通过ahocorasick.Automaton类,你可以在一些输入文本中一次找到多个关键字符串的出现。你可以将它作为一个普通的类似于dict的Trie使用,或者将Trie转换为自动机来进行高效的Aho-Corasick搜索。用C语言实现,并在Python 2.7和3.4+上测试。可在Linux、Mac和Windows上运行。BSD-3-clause授权。</target>
        </trans-unit>
        <trans-unit id="a5a2857f47a66a88e4fd3cde78c61c3de269fda8" translate="yes" xml:space="preserve">
          <source>pyahocorasick is available in two flavors:</source>
          <target state="translated">pyahocorasick有两种口味。</target>
        </trans-unit>
        <trans-unit id="4bf1502884f37a3b69d66f4b8d71dc7fe92c730b" translate="yes" xml:space="preserve">
          <source>seems unmaintained (last update in 2005).</source>
          <target state="translated">似乎无人维护(最后一次更新是在2005年)。</target>
        </trans-unit>
        <trans-unit id="8e2edce0d507e1297474f25c00cae94258db38d8" translate="yes" xml:space="preserve">
          <source>setup.py</source>
          <target state="translated">setup.py</target>
        </trans-unit>
        <trans-unit id="bff5288d43b5b0b423a623fd27ab60ad387791d3" translate="yes" xml:space="preserve">
          <source>setuptools</source>
          <target state="translated">设置工具</target>
        </trans-unit>
        <trans-unit id="f32b67c7e26342af42efabc674d441dca0a281c5" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="translated">价值</target>
        </trans-unit>
        <trans-unit id="fd3e2ebf7bd54402b7055af9ea9a035226639dee" translate="yes" xml:space="preserve">
          <source>virtualenv</source>
          <target state="translated">虚荣心</target>
        </trans-unit>
        <trans-unit id="c5d8a7bf63d5bed0ba64a18928de900d025670bd" translate="yes" xml:space="preserve">
          <source>where a
trie key was found in the input string and the associated</source>
          <target state="translated">其中,在输入字符串中找到了一个Trie键,并找到了相关的</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
