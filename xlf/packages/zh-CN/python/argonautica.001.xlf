<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/argonautica/">
    <body>
      <group id="argonautica">
        <trans-unit id="195662646c06edbd6b499b5b7b8dd96bb3dfe173" translate="yes" xml:space="preserve">
          <source>* Indeed, argonautica has a feature that even the cannonical C implementation
lacks, i.e. hashing passwords with secret keys (the C implementation implements this, but
does not expose it publicly)</source>
          <target state="translated">*实际上，argonautica具有甚至规范的C实现都缺乏的功能，即使用秘密密钥对密码进行哈希处理（C实现实现了此功能，但未公开公开）</target>
        </trans-unit>
        <trans-unit id="ede0f3c56202fdbf000f4bdbd27f888e075eb202" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;The Apache License, Version 2.0&lt;/a&gt;, or</source>
          <target state="translated">&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache许可证2.0版&lt;/a&gt;或</target>
        </trans-unit>
        <trans-unit id="51febab75ee75e8c4c4b7d70353a430c81211aa2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; version 3.9 or higher</source>
          <target state="translated">&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; 3.9或更高版本</target>
        </trans-unit>
        <trans-unit id="a3837bf6aae91373ad5275ed79cabc9b6852605c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; version 3.4 or higher (or &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; version 3.5 or higher)</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; 3.4或更高版本（或&lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; 3.5或更高版本）</target>
        </trans-unit>
        <trans-unit id="9cc7a2c6d141926a46b35ada4d5874007d72f4ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; version 1.26 or higher</source>
          <target state="translated">&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;版本1.26或更高</target>
        </trans-unit>
        <trans-unit id="a4f4b2ffcba94341fefc5dee4994e344deb70827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Argon2&lt;/code&gt; is a convenience class that holds both a &lt;code&gt;Hasher&lt;/code&gt; and a &lt;code&gt;Verifier&lt;/code&gt;. If you'd like to use just one class that knows how both to hash and to verify, instantiate an &lt;code&gt;Argon2&lt;/code&gt;. It works essentially the same way as &lt;code&gt;Hasher&lt;/code&gt; and &lt;code&gt;Verifier&lt;/code&gt; do.</source>
          <target state="translated">&lt;code&gt;Argon2&lt;/code&gt; 是同时具有 &lt;code&gt;Hasher&lt;/code&gt; 和 &lt;code&gt;Verifier&lt;/code&gt; 的便捷类。如果您只想使用一个同时知道如何哈希和验证的类，请实例化 &lt;code&gt;Argon2&lt;/code&gt; 。它的工作方式与 &lt;code&gt;Hasher&lt;/code&gt; 和 &lt;code&gt;Verifier&lt;/code&gt; 基本上相同。</target>
        </trans-unit>
        <trans-unit id="42e43c02d5cc6dcf4f01ccf572544c66fe605969" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RandomSalt&lt;/code&gt; is a special kind of salt that will create new random salt bytes before each hash. A RandomSalt knows its length (in number of bytes). The default &lt;code&gt;Hasher&lt;/code&gt; uses a &lt;code&gt;RandomSalt&lt;/code&gt; with length of 32 bytes, but you can use your own &lt;code&gt;RandomSalt&lt;/code&gt; of custom length. When you instantiate a &lt;code&gt;RandomSalt&lt;/code&gt;, the constructor takes a length, e.g. &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RandomSalt&lt;/code&gt; 是一种特殊的盐，它将在每次哈希之前创建新的随机盐字节。RandomSalt知道其长度（以字节数为单位）。默认的 &lt;code&gt;Hasher&lt;/code&gt; 使用长度为32字节的 &lt;code&gt;RandomSalt&lt;/code&gt; ，但是您可以使用自己的自定义长度的 &lt;code&gt;RandomSalt&lt;/code&gt; 。实例化 &lt;code&gt;RandomSalt&lt;/code&gt; 时，构造函数采用一个长度，例如 &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7e9ef3323d845d8b7fe28b3a6c8ed8bac3d3d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install --upgrade pip&lt;/code&gt; or &lt;code&gt;pip install setuptools-rust&lt;/code&gt;. Note: setuptool-rust is not required if you have pip version 10.0 or above</source>
          <target state="translated">&lt;code&gt;pip install --upgrade pip&lt;/code&gt; &lt;code&gt;pip install setuptools-rust&lt;/code&gt; pip或pip install setuptools-rust。注意：如果您使用的pip版本为10.0或更高版本，则不需要setuptool-rust</target>
        </trans-unit>
        <trans-unit id="9f9e21cec5bff7c00c47588c720b10c717c6cfc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install argonautica&lt;/code&gt;. Unfortunately, this step may take several minutes, as argonautica needs to compile it's Rust code for your specific CPU (due to its use of SIMD instructions). The upside, however, is that once compiled, argonautica should run blazingly fast</source>
          <target state="translated">&lt;code&gt;pip install argonautica&lt;/code&gt; 。不幸的是，此步骤可能要花费几分钟，因为argonautica需要针对您的特定CPU编译它的Rust代码（由于使用了SIMD指令）。好处是，一旦编译，argonautica应该运行得非常快</target>
        </trans-unit>
        <trans-unit id="e1c91e3f30599a290b2b01dca0cda3b6be9dbdf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argon2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;氩气2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ec16863d4de7e250b1bc9ea235ef9d47e56dc61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HashRaw&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;散列&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddc9a492e751ec0ba5fa5059b73ea7d1f52a1435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LLVM:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LLVM：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb72c98066c0b5500b75fff01572f0dabe63aab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RandomSalt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;随机盐&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db8ffdf33529bce1203d1e34714e61c69da4dc95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rust:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;锈：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76771f82d99201c55f403bd9428ec0aed8e29448" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;arg&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d367fa420fee75b359d8b4b19d890e4bd1373c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is a Python package for hashing passwords that uses the cryptographically-secure &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; hashing algorithm.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;是用于使用安全加密的&lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt;哈希算法对密码进行哈希加密的Python软件包。</target>
        </trans-unit>
        <trans-unit id="ceaca1a9a949ee490386b46d45ac5b124ea2344e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is licensed under either of:</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;的许可依据以下任何一项：</target>
        </trans-unit>
        <trans-unit id="86332913a7df9ce53012c8a6c20d92e902eca568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 to use &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instructions to peform it's hashing algorithm, which means it can be quite fast. The downside is that you have to compile it for your specific machine (this is why the &lt;code&gt;pip install argonautica&lt;/code&gt; process takes time). That said, on the developer's early 2014 Macbook Air, which has &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instruction through &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt;, argonautica runs ~30% faster than passlib on default settings.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;是argon2的唯一使用&lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt;指令执行其哈希算法的Python实现，这意味着它可以非常快。缺点是您必须为您的特定机器编译它（这就是为什么 &lt;code&gt;pip install argonautica&lt;/code&gt; 过程需要时间的原因）。也就是说，在开发人员早期的2014年Macbook Air（通过&lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt;具有&lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt;指令）上，默认设置下argonautica的运行速度比passlib快30％。</target>
        </trans-unit>
        <trans-unit id="6226e5be9a3b94dfed0589fbae7543c84509985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; supports the latest argon2 variant: argon2id, which, unless you have a reason not to, you should be using. A number of Python implementations do not yet support this variant.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;支持最新的argon2变体：argon2id，除非有理由，否则应使用。许多Python实现尚不支持此变体。</target>
        </trans-unit>
        <trans-unit id="dd95e0f87d8aebc153c0145c144355188efd7f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; uses &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; type annotations everywhere in the code, which, in the author's humble opinion, is a very useful form of documentation; so if you're ever confused about what types to use for arguments, just pop open the code and take a look at the function signatures.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;在代码中到处都使用&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;类型注释，按照作者的愚见，这是非常有用的文档形式；因此，如果您对使用哪种类型的参数感到困惑，只需弹出代码并查看函数签名即可。</target>
        </trans-unit>
        <trans-unit id="7f09aa620c3a56871f93c5817cb52cab65fbb571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; was built with a simple use-case in mind: hashing passwords for storage in a
website's database. That said, it's also &quot;feature-complete&quot;, meaning anything you can do with
the cannonical &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C implementation&lt;/a&gt; of argon2
you can do with argonautica*.</source>
          <target state="translated">&lt;strong&gt;argonautica的&lt;/strong&gt;构建考虑了一个简单的用例：哈希密码以存储在网站的数据库中。就是说，它也是&amp;ldquo;功能完备的&amp;rdquo;，这意味着您可以使用argonautica * 的标准&lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C实现&lt;/a&gt; argon2进行任何操作。</target>
        </trans-unit>
        <trans-unit id="ca7d4b6bcd0af299645a83a7d4aea595025a5c74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mypy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;py&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5669ec44ecef2ed5804540a396dd292f49b16257" translate="yes" xml:space="preserve">
          <source>AFAIK, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 that supports hashing with secret keys. Not even the &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;cannonical C implementation&lt;/a&gt; of argon2 exposes this feature publicly (it's in the code, but unfortunately not accessable via the public API).</source>
          <target state="translated">在AFAIK中，&lt;strong&gt;argonautica&lt;/strong&gt;是argon2的唯一Python支持，该实现支持使用私钥进行散列。甚至不是&lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;argon2的规范C实现&lt;/a&gt;也不会公开公开此功能（它在代码中，但不幸的是无法通过公共API访问）。</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">替代品</target>
        </trans-unit>
        <trans-unit id="9ae5e35b46adfc77d4a514a98bde3b1fa47cc9aa" translate="yes" xml:space="preserve">
          <source>Arch linux: &lt;code&gt;pacman -S clang&lt;/code&gt;</source>
          <target state="translated">Arch Linux： &lt;code&gt;pacman -S clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8eabad1d4bfdf2c84b2250a383bd249e22dcad89" translate="yes" xml:space="preserve">
          <source>Argon2 won the &lt;a href=&quot;https://password-hashing.net/&quot;&gt;Password Hashing Competition&lt;/a&gt; in 2015, a several year project to identify a successor to &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt;, and other common hashing algorithms.</source>
          <target state="translated">Argon2 在2015年赢得了&lt;a href=&quot;https://password-hashing.net/&quot;&gt;密码哈希竞赛&lt;/a&gt;，这是一个为期数年的项目，旨在确定&lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt;和其他常见哈希算法的后继者。</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">配置</target>
        </trans-unit>
        <trans-unit id="45529ed06c625b76e4c4357555c4b0244426e657" translate="yes" xml:space="preserve">
          <source>Debian-based linux: &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</source>
          <target state="translated">基于Debian的linux： &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b2776064a97e290ac856229ddad7ef1f00f1357" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 written in &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; (as opposed to C or C++). &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; is a &quot;systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&quot;</source>
          <target state="translated">最后，&lt;strong&gt;argonautica&lt;/strong&gt;是用&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;（与C或C ++相对）编写的argon2的唯一Python实现。&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;是一种&amp;ldquo;运行速度极快，可防止段错误并保证线程安全的系统编程语言&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6360e261bdf44c4f899f7ef00378583f501b8d5e" translate="yes" xml:space="preserve">
          <source>Follow the instructions &lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;here&lt;/a&gt;, which will just tell you to run the following command in your terminal and follow the on-screen instructions: &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</source>
          <target state="translated">请按照&lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;此处&lt;/a&gt;的说明进行操作，该操作只告诉您在终端中运行以下命令并按照屏幕上的说明进行操作： &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53e49a69fb315c4f51afc9825055d4858a064cdc" translate="yes" xml:space="preserve">
          <source>Hashing</source>
          <target state="translated">哈希</target>
        </trans-unit>
        <trans-unit id="e95fb4d89f702858269571680eb4384b6e1d7b29" translate="yes" xml:space="preserve">
          <source>Hashing with &lt;strong&gt;argonautica&lt;/strong&gt; produces a string-encoded hash, but sometimes you might want the &quot;raw material&quot; behind this hash, i.e. the raw hash bytes, the raw salt bytes, or raw parameters, which are the three component parts of a string-encoded hash. To obtain these raw parts...</source>
          <target state="translated">用&lt;strong&gt;argonautica进行&lt;/strong&gt;散列会产生一个字符串编码的散列，但是有时您可能希望此散列后面的&amp;ldquo;原始材料&amp;rdquo;，即原始散列字节，原始盐字节或原始参数，它们是字符串编码的三个组成部分哈希。为了获得这些原始零件...</target>
        </trans-unit>
        <trans-unit id="b53a956811aafe360ad463c2664de99be4dd6654" translate="yes" xml:space="preserve">
          <source>Idiomatic Argon2 password hashing for Python</source>
          <target state="translated">为Python设计的Argon2密码散列法</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">杂项</target>
        </trans-unit>
        <trans-unit id="95d388e8fafd9bc83d5b80bb3527b53a99d59f87" translate="yes" xml:space="preserve">
          <source>Other linux: Use your distribution's package manager</source>
          <target state="translated">其他linux。使用你的发行版的软件包管理器</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概述</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">所需经费</target>
        </trans-unit>
        <trans-unit id="17e159a0b832fb918538fa8e1dc1427f74ab81de" translate="yes" xml:space="preserve">
          <source>The MIT license</source>
          <target state="translated">MIT许可证</target>
        </trans-unit>
        <trans-unit id="ce584f3715e750d6e40ca52529e7e6017d7221ff" translate="yes" xml:space="preserve">
          <source>There are several Python packages that implement argon2, including the excellent &lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt;, which uses &lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi&lt;/a&gt;, but...</source>
          <target state="translated">有几个实现argon2的Python软件包，包括出色的&lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt;，它使用&lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi&lt;/a&gt;，但是...</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="536244f4cc64c32141c5753233b90a09618435ae" translate="yes" xml:space="preserve">
          <source>Verifying</source>
          <target state="translated">核查</target>
        </trans-unit>
        <trans-unit id="a61dc7cfe81decf95f172527fe51435f115b2cce" translate="yes" xml:space="preserve">
          <source>Windows: Download a pre-built binary &lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Windows：&lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;在此处&lt;/a&gt;下载预构建的二进制文件</target>
        </trans-unit>
        <trans-unit id="f2c07cb057a688edc054b308f1255acb4ededede" translate="yes" xml:space="preserve">
          <source>argonautica-py</source>
          <target state="translated">氩气</target>
        </trans-unit>
        <trans-unit id="f9bc3be46ae328e0c638fc70e35e07ff6d55dfab" translate="yes" xml:space="preserve">
          <source>at your option.</source>
          <target state="translated">由你选择。</target>
        </trans-unit>
        <trans-unit id="32e74c13596c69be07e436be4b969f69cc195576" translate="yes" xml:space="preserve">
          <source>macOS: &lt;code&gt;brew install llvm&lt;/code&gt;, which requires &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;</source>
          <target state="translated">macOS： &lt;code&gt;brew install llvm&lt;/code&gt; ，需要&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
