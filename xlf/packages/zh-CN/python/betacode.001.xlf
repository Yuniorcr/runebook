<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/betacode/">
    <body>
      <group id="betacode">
        <trans-unit id="b3cd195562e841820415716910df47b2007b260d" translate="yes" xml:space="preserve">
          <source>Betacode to Unicode converter.</source>
          <target state="translated">Betacode到Unicode转换器。</target>
        </trans-unit>
        <trans-unit id="edb1a6ec033b43b4f12fa32ef48e7f7bdc25b2bd" translate="yes" xml:space="preserve">
          <source>Betacode to unicode</source>
          <target state="translated">Betacode转unicode</target>
        </trans-unit>
        <trans-unit id="d3e35f5e5ada536b2f1e73f7253568fbe387ecbf" translate="yes" xml:space="preserve">
          <source>Conversion can also be made more strict by using the</source>
          <target state="translated">转化也可以更加严格,通过使用</target>
        </trans-unit>
        <trans-unit id="1cf79be5352210b263ba6b50eb109f80d1fa447b" translate="yes" xml:space="preserve">
          <source>Convert betacode to unicode and vice-versa easily. Tested on python 3.4,
3.5, and 3.6. The definition used is based off what is found at the &lt;a href=&quot;http://www.tlg.uci.edu/encoding/BCM.pdf&quot;&gt;TLG
Beta Code Manual&lt;/a&gt;. Only the
Greek sections were paid attention to.</source>
          <target state="translated">轻松将betacode转换为unicode，反之亦然。在python 3.4、3.5和3.6上测试。使用的定义基于《&lt;a href=&quot;http://www.tlg.uci.edu/encoding/BCM.pdf&quot;&gt;TLG Beta Code手册》中的定义&lt;/a&gt;。仅关注希腊部分。</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">发展</target>
        </trans-unit>
        <trans-unit id="4f9d1ffdef409da197526ac8e0a70ed4114b38c3" translate="yes" xml:space="preserve">
          <source>I am no classicist, and this was done in my free time. It is very
possible that there are some letters missing that are not accounted for,
or some punctuation that is not properly handled. If that is the case,
please tell me as it is easy to fix, or please open a PR for your own
branch. Write tests if you do add a feature.</source>
          <target state="translated">我不是古典学家,这是我在空闲时间做的。很有可能是少了一些字母没有交代清楚,或者一些标点符号没有处理好。如果是这样的话,请告诉我,因为这很容易修复,或者请你自己开一个分支的PR。如果你真的增加了一个功能,请写测试。</target>
        </trans-unit>
        <trans-unit id="ee8b9d84394671720e5520119b9003f25d6b2e61" translate="yes" xml:space="preserve">
          <source>I was working a classics research project and had to use the Perseus
catalog to extract some Greek work. Much to my surprise however, the
only download I could find was a betacode version. An encoding that is
over 30 years old, rather than modern, fancy, clean unicode. There was
no nice pip package that I could easily go to for this simple task, so I
decided to roll my own.</source>
          <target state="translated">我正在进行一个古典文学研究项目,不得不使用Perseus目录来提取一些希腊作品。然而,令我惊讶的是,我唯一能找到的下载是一个betacode版本。这种编码已经有30多年的历史,而不是现代的、花哨的、干净的unicode。没有一个很好的pip包可以让我轻松地完成这个简单的任务,所以我决定自己开发一个。</target>
        </trans-unit>
        <trans-unit id="f9e472db28ec4512052e2be84d83ba7247a0d307" translate="yes" xml:space="preserve">
          <source>If set, only the cannonical order of diacritics is accepted in betacode.
If it is not set, then any order is allowed as long as capital letters
begin with a</source>
          <target state="translated">如果设置了,那么在betacode中只接受双音节的规范顺序。如果没有设置,那么只要大写字母是以 &quot;大写 &quot;开头的,任何顺序都是允许的。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="bc10c1ba9c65203d7efd65666e78a5bc0108d0ff" translate="yes" xml:space="preserve">
          <source>Installation is easy. Use</source>
          <target state="translated">安装很简单。使用</target>
        </trans-unit>
        <trans-unit id="7dde410acbf56b51ab56a3843576b376cac25eb3" translate="yes" xml:space="preserve">
          <source>Modified Betacode</source>
          <target state="translated">修改后的Betacode</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">动机</target>
        </trans-unit>
        <trans-unit id="0f593d9187fbb07ef3caf4a052f9be2176f390e1" translate="yes" xml:space="preserve">
          <source>Note that in all examples, strings are unicode encoded. Input can be in
upper or lower case. The official definition from TLG uses only
uppercase, but many resources, such as the Perseus catalog, are encoded
in lowercase, so this package accepts both. This package also can
disregard the unnecessary cannonical order of Greek diacritics from the
official definition. The only thing that matters in order for the
betacode to be unambiguous is that each unit must either begin with a</source>
          <target state="translated">请注意,在所有的例子中,字符串都是unicode编码的。输入可以是大写或小写。来自 TLG 的官方定义只使用大写字母,但许多资源,如 Perseus 目录,是用小写字母编码的,所以这个包同时接受这两种字母。这个包也可以不考虑官方定义中不必要的希腊文二角符号的大写顺序。唯一重要的是,为了使betacode毫不含糊,每个单元必须以</target>
        </trans-unit>
        <trans-unit id="67d62af798a1335a54b51ef43d2356592fb7e949" translate="yes" xml:space="preserve">
          <source>Note that polytonic accent marks will be used, and not monotonic accent
marks. Both are de jure equivalent in Greece, but betacode was initially
developed to encode classic works so the polytonic diacritics are more
fitting. In other words, the oxe&amp;icirc;a will be used rather than t&amp;oacute;nos. The
oxe&amp;icirc;a form can be converted to the modern accent form easily either
through search and replace, or unicode normalization since oxe&amp;icirc;a has
canonical decomposition into t&amp;oacute;nos.</source>
          <target state="translated">请注意，将使用多调重音符号，而不是单调重音符号。两者在希腊在法律上是等效的，但是betacode最初是为了对经典作品进行编码而开发的，因此多调变音符更为合适。换句话说，将使用oxe&amp;icirc;a而不是t&amp;oacute;nos。可以通过搜索和替换或unicode归一化将oxe&amp;iacute;a形式轻松转换为现代重音形式，因为oxe&amp;iacute;a具有规范分解为t&amp;oacute;nos的能力。</target>
        </trans-unit>
        <trans-unit id="2d2cb022bc3d26bd1407c4aa787d5e46e1ad4c3b" translate="yes" xml:space="preserve">
          <source>Speed</source>
          <target state="translated">速度</target>
        </trans-unit>
        <trans-unit id="52625f21204b45641f1dede98d37a7a2c6f80aed" translate="yes" xml:space="preserve">
          <source>The original implementation used a custom made trie. This maybe was not
the fastest (I wasn&amp;rsquo;t sure). So, I compared against a third party trie
implementation, pygtrie. The pygtrie had nicer prefix methods which
allowed for much faster processing of large texts. This changed
converting all of Strabo or Herodotus in the Perseus catalog from a many
minute operation to a ~3-4 second operation. I have seen implementations
that use regular expressions which I suspsect might be faster since the
underlying implementation is in C. However, this package is much smaller
and simpler if betacode conversion is all that is needed than CLTK, for
example.</source>
          <target state="translated">原始实现使用定制的特里。这可能不是最快的（我不确定）。因此，我将其与第三方trie实现pygtrie进行了比较。 pygtrie具有更好的前缀方法，可以更快地处理大型文本。这将将Perseus目录中的Strabo或Herodotus的所有操作从几分钟的操作更改为约3-4秒的操作。我已经看到使用可疑的正则表达式的实现可能会更快，因为底层的实现是在C中实现的。但是，例如，如果只需要Betacode转换，则此包会比CLTK小得多，并且更加简单。</target>
        </trans-unit>
        <trans-unit id="e8d98e50a75680c2e1adf0e170c3b5e5fcf8fee1" translate="yes" xml:space="preserve">
          <source>The unicode text can use polytonic (oxe&amp;icirc;a) accent marks or monotonic
(t&amp;oacute;nos) accent marks can be used.</source>
          <target state="translated">unicode文本可以使用多调（oxe&amp;icirc;a）重音标记，也可以使用单调（t&amp;oacute;nos）重音标记。</target>
        </trans-unit>
        <trans-unit id="8b5a218d6b551b88be739168aea5a263dc3fbe58" translate="yes" xml:space="preserve">
          <source>There is talk of a modified betacode that I have seen around on the
internet. I have never been able to find a definitive definition of this
so I have not implemented it. Among some differences is word final sigma
usage,</source>
          <target state="translated">我在网上看到有关于修改betacode的说法。我一直没能找到一个明确的定义,所以我没有实施。其中一些不同的地方是词的最终西格玛用法。</target>
        </trans-unit>
        <trans-unit id="07aaf7420220a5eba14fd597cf4cea0bd5420e99" translate="yes" xml:space="preserve">
          <source>Unicode to betacode</source>
          <target state="translated">从Unicode到betacode</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="ae29b0081f3239bf52354c8f8b1fcf561680179e" translate="yes" xml:space="preserve">
          <source>and lowercase letters begin with the letter and not a
diacritic.</source>
          <target state="translated">和小写字母开头的字母,而不是双音符。</target>
        </trans-unit>
        <trans-unit id="6f5f934cc78e6e5896946aeb30957705e6f177be" translate="yes" xml:space="preserve">
          <source>as macron, and uppercase and lowercase roman letters
instead of using</source>
          <target state="translated">作为macron,以及大写和小写罗马字母,而不是使用</target>
        </trans-unit>
        <trans-unit id="a3e0b42d1b53e2bf0933e6f8de49d79f46e44cf6" translate="yes" xml:space="preserve">
          <source>betacode</source>
          <target state="translated">betacode</target>
        </trans-unit>
        <trans-unit id="964992a57d111bb0865d708e942f8599f79c480d" translate="yes" xml:space="preserve">
          <source>flag.</source>
          <target state="translated">旗帜。</target>
        </trans-unit>
        <trans-unit id="dbc2295bf00cdf626f678a9ac7252675cfacfb76" translate="yes" xml:space="preserve">
          <source>or a letter. As long as these constraints are followed, breathing
marks, accents, and such can go in any order. However, the cannonical
order will be returned when going from unicode to betacode. Also note
that currently, only individual, non-combining characters are handled.
This means that you cannot do all combinations of letters and
diacritics. Only those defined as composite characters in the Greek and
Extended Greek sections of unicode.</source>
          <target state="translated">或一个字母。只要遵循这些限制,呼吸标记、重音等可以按照任何顺序进行。然而,当从unicode转到betacode时,将返回规范的顺序。另外要注意的是,目前只处理单个的、非组合的字符。这意味着你不能处理所有字母和双音符的组合。只有那些在unicode的希腊语和扩展希腊语部分定义为复合字符的字符。</target>
        </trans-unit>
        <trans-unit id="2efa14a5fe81ce30b9830d1f03de2c01ee1b8319" translate="yes" xml:space="preserve">
          <source>or your preferred method to download
from PyPI.</source>
          <target state="translated">或你喜欢的方法从PyPI下载。</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">pip</target>
        </trans-unit>
        <trans-unit id="41eaab877ca3a0e3aa14f5a4b7981f590e3c2bd6" translate="yes" xml:space="preserve">
          <source>strict</source>
          <target state="translated">严密</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
