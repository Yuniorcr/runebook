<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/multilevel-mesa/">
    <body>
      <group id="multilevel-mesa">
        <trans-unit id="c9a3ef5798f6fbb18f2688c2f8e055ace57d20e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;图1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3266723dce3df48a82cff590c881e33eeced350f" translate="yes" xml:space="preserve">
          <source>As Multi-level Mesa replaces the normal schedule function of Mesa, it must also have the basic scheduling functions. These are the add and remove functions, which remain at the individual agent level but have a higher degree of complexity as agents must be kept in multiple managers to ensure agents are being properly 'stepped' in the schedule or removed if the agent 'dies'. Multi-level Mesa also replaces Mesa's step function. Its primary schedule is random activation, but this can be turned off for an ordered activation and a staged activation can be executed through the agent_type manager. A future extension of MultiLevel_Mesa would be to store different schedules based on different network configurations. This would save computation time so specific agent schedules would be created less often. For example, if one was recreating daily life of a population and the night and morning hours used one configuration, while the daytime hours would use a different configuration, each calling different behavior routines for the agents.</source>
          <target state="translated">由于Multi-level Mesa取代了Mesa的普通调度功能,因此它还必须具备基本的调度功能。这些功能是添加和删除功能,这些功能仍保留在单个代理级别,但具有较高的复杂性,因为代理必须被保存在多个管理器中,以确保代理在计划中被正确地 &quot;步进 &quot;或在代理 &quot;死亡 &quot;时被删除。多级Mesa也取代了Mesa的步进功能。它的主要计划是随机激活,但这可以被关闭以进行有序的激活,并且可以通过agent_type管理器执行阶段性激活。MultiLevel_Mesa未来的一个扩展是根据不同的网络配置来存储不同的时间表。这将节省计算时间,因此特定的代理计划将被减少创建的频率。例如,如果一个人正在重现一个人口的日常生活,晚上和早上的时间使用一个配置,而白天的时间将使用不同的配置,每个配置都会为代理调用不同的行为例程。</target>
        </trans-unit>
        <trans-unit id="435c5fe50be2432abc7056a8f0280112c7eab7a6" translate="yes" xml:space="preserve">
          <source>As shown in figure 1, Multi-level Mesa has two primary approaches for facilitating a multi-level ABM, an explicit approach and a network approach. Within these two approaches, Multi-level Mesa turns the desired agents into a bilateral link list which form the groups. Each input of agents is transformed into a network edge which forms the groups or adds agents to an existing group. The use of links is also used to disband groups or remove agents from the group. These functions then create a more dynamic schedule with modules of agent within hierarchies.</source>
          <target state="translated">如图1所示,多级Mesa有两种主要的方法来促进多级ABM,一种是显式方法,一种是网络方法。在这两种方法中,Multi-level Mesa将所需的代理转化为双边链接列表,形成组。每一个代理的输入都被转化为一个网络边缘,形成组或将代理添加到一个现有的组中。链接的使用也被用来解散组或从组中移除代理。然后,这些功能创建了一个更动态的时间表,在层次结构内的代理模块。</target>
        </trans-unit>
        <trans-unit id="c43b278aa5d16fe58da0b687c4717aa69e488770" translate="yes" xml:space="preserve">
          <source>Attribute:</source>
          <target state="translated">属性:</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">属性:</target>
        </trans-unit>
        <trans-unit id="47794dc9c0ee0cf4bdc68fe1ca73422a643bf6dd" translate="yes" xml:space="preserve">
          <source>Creating an Multi-level Mesa Instance and the Multi-level Mesa Managers</source>
          <target state="translated">创建多级Mesa实例和多级Mesa管理器</target>
        </trans-unit>
        <trans-unit id="035b08f4549a3d2315c654e9b218fcedcabb2cd5" translate="yes" xml:space="preserve">
          <source>Creating an instance of Multi-level Mesa requires no parameters, and initiates one attribute and six managers.</source>
          <target state="translated">创建一个多级Mesa实例不需要任何参数,启动一个属性和六个管理者。</target>
        </trans-unit>
        <trans-unit id="21d5889502bfd325a4000763fbf071309d470790" translate="yes" xml:space="preserve">
          <source>Example Instance and Use</source>
          <target state="translated">实例和使用</target>
        </trans-unit>
        <trans-unit id="7c8d8b87efb5b6548c0f1eecae857eb585305992" translate="yes" xml:space="preserve">
          <source>Examples of Multi-Level Mesa</source>
          <target state="translated">多层中间层的例子</target>
        </trans-unit>
        <trans-unit id="eb5f3aaed755a6adbc164e2ec1136429ba6818f5" translate="yes" xml:space="preserve">
          <source>Examples of multilevel_mesa are available at [Sugarscape Models]:&lt;a href=&quot;https://github.com/tpike3/SugarScape&quot;&gt;https://github.com/tpike3/SugarScape&lt;/a&gt;</source>
          <target state="translated">在[Sugarscape模型]中可以找到multilevel_mesa的示例：&lt;a href=&quot;https://github.com/tpike3/SugarScape&quot;&gt;https&lt;/a&gt; : //github.com/tpike3/SugarScape</target>
        </trans-unit>
        <trans-unit id="566fecd1ecc51ba47d2e6d3b8ea1b31b4356c09c" translate="yes" xml:space="preserve">
          <source>Forming and Dissolving Meta-Agents</source>
          <target state="translated">形成和溶解元剂</target>
        </trans-unit>
        <trans-unit id="dc243838c0b1944f7a3a1538281e4a0b41f5c92c" translate="yes" xml:space="preserve">
          <source>Group.active = status of Group</source>
          <target state="translated">Group.active=Group的状态</target>
        </trans-unit>
        <trans-unit id="6a9c44634869fc5cf1a1860aa102d7a176dd6ebd" translate="yes" xml:space="preserve">
          <source>Group.agents_by_type = dictionary</source>
          <target state="translated">Group.agent_by_type=dictionary</target>
        </trans-unit>
        <trans-unit id="842bfc15872021302f23c6c934ed6ac6cb340750" translate="yes" xml:space="preserve">
          <source>Group.meta_step() = policies to dictate sub_agent behavior</source>
          <target state="translated">Group.meta_step()=政策来决定子代理的行为。</target>
        </trans-unit>
        <trans-unit id="a146c717a542871b8c5e5d388ca77dc90f6899e8" translate="yes" xml:space="preserve">
          <source>Group.net = NetworkX graph</source>
          <target state="translated">Group.net=NetworkX图</target>
        </trans-unit>
        <trans-unit id="c0ccf89b834f406ca2fec502077ac30f5565a4ba" translate="yes" xml:space="preserve">
          <source>Group.policy = object of group policies</source>
          <target state="translated">Group.policy=组政策的对象</target>
        </trans-unit>
        <trans-unit id="efce0356075f72250f5b43c5db802bca2a7d8146" translate="yes" xml:space="preserve">
          <source>Group.step() = sub_agent behaviors</source>
          <target state="translated">Group.step()=sub_agent behaviors</target>
        </trans-unit>
        <trans-unit id="55fc06e84f4805b742bda2032265fe0a415c6969" translate="yes" xml:space="preserve">
          <source>Group.sub_agents = dictionary</source>
          <target state="translated">Group.sub_agents=dictionary</target>
        </trans-unit>
        <trans-unit id="9d1822c1ae5af2003b1434efdb49c9c6a13c1c1a" translate="yes" xml:space="preserve">
          <source>Happy Modeling!</source>
          <target state="translated">快乐建模</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="7ff11086b20a443877fdff663fd8b36dda49ec5b" translate="yes" xml:space="preserve">
          <source>Keyword parameters:</source>
          <target state="translated">关键字参数。</target>
        </trans-unit>
        <trans-unit id="398b3a5600f4f0c2445df305f4e7c034bfc164f4" translate="yes" xml:space="preserve">
          <source>Main Functions:</source>
          <target state="translated">主要功能:</target>
        </trans-unit>
        <trans-unit id="0915b5eda410b7fd81a958b942357c3e44c16831" translate="yes" xml:space="preserve">
          <source>Multi-Level Mesa</source>
          <target state="translated">多层中间层</target>
        </trans-unit>
        <trans-unit id="759380268ae70321d8b068a6285b8cb076a34faf" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa has three main components. First, a collection of managers which tracks the agents, the modules of agents (groups), the network of agents, and agents who belong to an existing group, and the schedule. Second, a series of functions which provides the user different options to form groups or dissolve them. Third, a group class which allows for the inclusion of different policies, manages the behavior and status of the group, and implicitly produces hierarchies within the complex system. (Figure 1)</source>
          <target state="translated">多级Mesa主要有三个组成部分。首先,是一个管理者的集合,它可以跟踪代理人、代理人的模块(组)、代理人的网络、属于现有组的代理人以及计划。第二,一系列的功能,它为用户提供了不同的选项来组建组或解散组。第三,一个组类,它允许包含不同的策略,管理组的行为和状态,并隐含在复杂系统中产生层次结构。(图1)</target>
        </trans-unit>
        <trans-unit id="612cdf1dcaad735e8e0faf18fdc420f5c85a7b0c" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa is a library which supports Python's Agent Based Modeling Library Mesa. Multi-level Mesa's views complex systems as adaptive networks and uses a network graph structure to allow dynamic management of agent modules (groups) and model schedules.</source>
          <target state="translated">Multi-level Mesa是一个支持Python的基于代理的建模库Mesa的库。Multi-level Mesa将复杂系统视为自适应网络,并使用网络图结构允许动态管理代理模块(组)和模型计划。</target>
        </trans-unit>
        <trans-unit id="a3b8a3df7a895fa349a319a01d693dbf13d21fa8" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa requires</source>
          <target state="translated">多层Mesa需要</target>
        </trans-unit>
        <trans-unit id="d852f990ae118bf9d73b83b33c6ebe19dce0deb2" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa._agents which is an ordered dictionary (a hash-table consisting of a key:value pair) that holds every agent added to the instance</source>
          <target state="translated">MultiLevel_Mesa._agents是一个有序的字典(一个由key:value对组成的哈希表),其中包含了添加到实例中的每一个代理。</target>
        </trans-unit>
        <trans-unit id="1a3a782c952762649ccf732af8d2eb2cdec32141" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.agents_by_type uses a dictionary of dictionaries to track agents by type. This feature allows for faster reference of specific types of agents when manipulating groups or schedules.</source>
          <target state="translated">MultiLevel_Mesa.agents_by_type使用字典的字典来按类型追踪代理。该功能允许在操作组或计划时更快地参考特定类型的代理。</target>
        </trans-unit>
        <trans-unit id="82a39e8becc21a50fdc3da1656d877c66c59e5b0" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.group_net takes a Boolean and is defaulted to False. This parameter tells the instance whether or not a group agent can form a larger group agent with other group agents.</source>
          <target state="translated">MultiLevel_Mesa.group_net取一个布尔值,默认为False。这个参数告诉实例,一个组代理是否可以与其他组代理组成一个更大的组代理。</target>
        </trans-unit>
        <trans-unit id="500a2958bb0dc817cb193a0c12914f3485536b30" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.groups is an ordered dictionary and tracks the groups within the model performing the same function of tracking groups as the agents ordered dictionary.</source>
          <target state="translated">MultiLevel_Mesa.groups是一个有序字典,跟踪模型内的组,执行与代理有序字典相同的跟踪组的功能。</target>
        </trans-unit>
        <trans-unit id="bbf83e090b2d38e45bf1f744b29e4e21b577fcde" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.id_counter, provides a unique_id for each group</source>
          <target state="translated">MultiLevel_Mesa.id_counter,为每个组提供一个唯一的id。</target>
        </trans-unit>
        <trans-unit id="ab5904bab85a853408025c1ce315be6bd49d7429" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.min_for_group tells the instance the minimum number of agents which must be in a group. The min_for_group parameter has a default setting of 2.</source>
          <target state="translated">MultiLevel_Mesa.min_for_group 告诉实例必须在一个组中的最小代理数量。min_for_group参数的默认设置为2。</target>
        </trans-unit>
        <trans-unit id="4c026a85c445ae21b2abb4c28d4a04aad09ca117" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.net is an instance of a NewtorkX graph. This feature provides the critical structure for tracking and managing agents and groups.</source>
          <target state="translated">MultiLevel_Mesa.net是NewtorkX图的一个实例。这个功能提供了跟踪和管理代理和组的关键结构。</target>
        </trans-unit>
        <trans-unit id="b6981411887768aa23d0805f1ce7fff1301a8d69" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.reverse_groups is a dictionary of dictionaries of sets. The first dictionary key is the agent id, while the second is group types (link and link values) and the set is the group ids to which the agent belongs in those group types.</source>
          <target state="translated">MultiLevel_Mesa.reverse_groups是一个集的字典。第一个字典键是代理id,第二个字典键是组类型(链接和链接值),集合是代理在这些组类型中所属的组id。</target>
        </trans-unit>
        <trans-unit id="cf3d87d029822593e1ab5bc21bf9729f7536fd4d" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.schedule replaces the Mesa schedule and is an ordered dictionary which manages the agents and when they execute a step function.</source>
          <target state="translated">MultiLevel_Mesa.schedule取代了Mesa schedule,是一个有序的字典,它管理代理和当他们执行一个步骤函数。</target>
        </trans-unit>
        <trans-unit id="ca7f2075793db109cb2317a4a97ca56aebe3ffdd" translate="yes" xml:space="preserve">
          <source>Network Defined Dissolution: Multi-level_Mesa.reassess_net_group</source>
          <target state="translated">网络定义的解散。Multi-level_Mesa.reassess_net_group.</target>
        </trans-unit>
        <trans-unit id="d1363385e386dee5f55a93094c972a74d2d48c97" translate="yes" xml:space="preserve">
          <source>Network Defined Formation: Multi-level_Mesa.net_group</source>
          <target state="translated">网络定义的形成。多级_Mesa.net_group</target>
        </trans-unit>
        <trans-unit id="20a6d7f2088fc95d97daf986670199e6be687acb" translate="yes" xml:space="preserve">
          <source>Network Dissolution Function</source>
          <target state="translated">网络解体功能</target>
        </trans-unit>
        <trans-unit id="bdd82605e3dc3d698d45840be249fed36a34b7cc" translate="yes" xml:space="preserve">
          <source>Network Formation Function</source>
          <target state="translated">网络形成功能</target>
        </trans-unit>
        <trans-unit id="55fe774102e304e0470a2916dc3e124f51c6f147" translate="yes" xml:space="preserve">
          <source>Provides Extension module to Mesa to allow for Hierarchies and Modules of Agents</source>
          <target state="translated">为Mesa提供扩展模块,允许代理的层次和模块。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">所需经费</target>
        </trans-unit>
        <trans-unit id="edb3cec927126c2f59aeacf3d2229a5df427c1f2" translate="yes" xml:space="preserve">
          <source>Schedule Functions</source>
          <target state="translated">附表功能</target>
        </trans-unit>
        <trans-unit id="36b7c31c4e10000ebf134e745b744840499d5c25" translate="yes" xml:space="preserve">
          <source>Similar to Mesa, the MultiLevel_Mesa.add function requires an agent object. It also has two keyword parameters which take Boolean parameters each with a default value of True. Keyword parameter schedule adds the agent to the schedule. This is an option in case the user begins with a complex network and the agent is already part of a group. The net parameter similarly adds the agent to the NetworkX object. This is done in case the user has an agent he or she does not want to be part of the network. The Multi-level.Mesa.remove function requires an agent object. If invoked this will remove the agent from all managers as applicable. The Multi-level_Mesa.step function works in a similar way to the Mesa step function, where it iterates through each agent in schedule and executes their step function. Random activation is the default as identified by the keyword parameter shuffled. If shuffled is False it will follow the order in the ordered dictionary (the order the agents were added). The keyword parameter by_type is set to False but can take a list of agent types to simulate staged activation. Constant update provides the ability to have specific agent types activated after the more dynamic schedule. For example, an environmental variable which changes at a steady rate for each time step.</source>
          <target state="translated">与Mesa类似,MultiLevel_Mesa.add函数也需要一个agent对象。它还有两个关键字参数,分别取布尔参数,默认值为True。关键字参数schedule将代理添加到时间表中。这是在用户开始使用一个复杂的网络,并且代理已经是一个组的一部分的情况下的一个选项。net参数同样将代理添加到NetworkX对象中。这是在用户有一个不想成为网络一部分的代理的情况下进行的。Multi-level.Mesa.remove函数需要一个代理对象。如果调用该函数,将从所有适用的管理器中删除该代理。Multi-level_Mesa.step函数的工作方式类似于Mesa的step函数,它在计划中遍历每个代理,并执行他们的step函数。随机激活是默认的,由关键字参数shuffled确定。如果shuffled为False,它将遵循有序字典中的顺序(代理被添加的顺序)。关键字参数by_type设置为False,但可以取一个代理类型的列表来模拟分期激活。恒定更新提供了让特定的代理类型在更动态的计划后被激活的能力。例如,一个环境变量,它在每个时间步骤中以稳定的速度变化。</target>
        </trans-unit>
        <trans-unit id="428c367fb7ad0a7d3a822102fd7437d4785f9888" translate="yes" xml:space="preserve">
          <source>Six Managers:</source>
          <target state="translated">六位经理。</target>
        </trans-unit>
        <trans-unit id="d875696ff97cd2193fbcb1e6a086b94c9c5ce3db" translate="yes" xml:space="preserve">
          <source>The Group class introduces hierarchy into the ABM. The Group class performs similar functions to Multi-level Mesa or Mesa's time module. The Group class has three managers, which includes a dictionary of the agents which belong to the Group, a dictionary of dictionaries with the agents in the Group by type and a NetworkX graph object of the sub_agents. The Group then has three attributes to make it easier for users to employ the Group. The first attribute is Group.active which is a Boolean value to help users activate and deactivate Groups as necessary. The next two attributes are Group.type and Group.&lt;strong&gt;str&lt;/strong&gt; which both equal &quot;group&quot; and allow the user greater ease in identifying and performing functions on the groups. The final attribute of the Group is its policy object, this object is passed in by the user and provides the Group behavior. The behavior of the Groups and its internal agents is done with two step functions the Group.group_step which calls the policy function and the individual agent step functions, again using a random order, but with the same options of the MultiLevel_Mesa.step function to dictate schedule ordering processes.</source>
          <target state="translated">Group类将层次结构引入到ABM中。 Group类执行与多层Mesa或Mesa的时间模块类似的功能。 Group类具有三个管理器，其中包括属于该组的代理的字典，具有按类型在Group中的代理的字典的字典和sub_agents的NetworkX图形对象。然后，该组具有三个属性，以使用户更容易使用该组。第一个属性是Group.active，它是一个布尔值，可以帮助用户根据需要激活和停用组。接下来的两个属性是Group.type和Group。&lt;strong&gt;力量&lt;/strong&gt;它们既等于&amp;ldquo;组&amp;rdquo;，又使用户更容易识别和执行组上的功能。组的最终属性是其策略对象，该对象由用户传递并提供组行为。组及其内部代理的行为是通过两个步骤函数Group.group_step来完成的，Group.group_step调用策略函数和单个代理步骤函数，再次使用随机顺序，但是使用与MultiLevel_Mesa.step函数相同的选项来指示安排订购过程。</target>
        </trans-unit>
        <trans-unit id="aa491434aef2bbc20d2898cad8850c5dae27294f" translate="yes" xml:space="preserve">
          <source>The MetaAgent Class</source>
          <target state="translated">MetaAgent类</target>
        </trans-unit>
        <trans-unit id="9b88c454df4f4c918cebd63180fd3e7ae8c741a2" translate="yes" xml:space="preserve">
          <source>The Multi-level Mesa Functions</source>
          <target state="translated">多级Mesa函数</target>
        </trans-unit>
        <trans-unit id="14ff72121885339c6959e12490a5baff998d005b" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.form_group function requires one parameter which is the user specified process which determines whether or not an agent should be in a group with other agents. The *args and **kwargs allows the user to pass in the parameters for this process. The determine_id parameters ensures each group gets a unique id. If default it will simply append a number based on the id_counter attribute to the string 'group'. For the user to pass in an id he or she must yield the id as the first element of a tuple generated from the yield operator from the user defined process. Users must choose this id carefully as the id is used in the set operations to merge groups. The double parameter takes a Boolean value and is defaulted to False. If True the agent will remain in the schedule as an independent entity and be added as part of the group, while if False the agent is removed. This feature is to provide users maximum flexibility for agent scheduling and group processes. The policy parameter passes in the step processes for the group, which can consist of only internal processes or can consist of group processes and then execute the individual agent processes.  The group_type parameter takes a string and allows the user to specify different types of groups so an agent can belong to different types of group such as &amp;acirc;&amp;euro;&amp;tilde;family&amp;acirc;&amp;euro;&amp;trade; and &amp;acirc;&amp;euro;&amp;tilde;firm&amp;acirc;&amp;euro;&amp;trade;.</source>
          <target state="translated">MultiLevel_Mesa.form_group函数需要一个参数，该参数是用户指定的过程，该过程确定一个座席是否应与其他座席组成一个组。 * args和** kwargs允许用户传入此过程的参数。 define_id参数可确保每个组获得唯一的ID。如果是默认值，它将仅基于id_counter属性将数字附加到字符串&amp;ldquo; group&amp;rdquo;。为使用户传递ID，他或她必须将ID作为从用户定义的过程中的yield操作符生成的元组的第一个元素。用户必须仔细选择此ID，因为ID在设置操作中用于合并组。 double参数采用布尔值，默认为False。如果为True，则该代理将作为独立实体保留在时间表中，并作为组的一部分添加，如果为False，则删除代理。此功能旨在为用户提供最大的灵活性，以安排座席安排和分组流程。策略参数传入组的步骤过程，该步骤过程可以仅由内部过程组成，也可以由组过程组成，然后执行各个代理程序过程。 group_type参数采用字符串，并允许用户指定不同类型的组，以便代理可以属于不同类型的组，例如&amp;ldquo; family&amp;rdquo;和&amp;ldquo; firm&amp;rdquo;。group_type参数采用字符串，并允许用户指定不同类型的组，以便代理可以属于不同类型的组，例如&amp;ldquo; family&amp;rdquo;和&amp;ldquo; firm&amp;rdquo;。group_type参数采用字符串，并允许用户指定不同类型的组，以便代理可以属于不同类型的组，例如&amp;ldquo; family&amp;rdquo;和&amp;ldquo; firm&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="836e6112c0bc763389cef144472c76ebb4c1bc50" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.net_group function requires no parameters and will default to whether or not a link exists or not between agents. As the net_group function has no process passed in there is no way to specify a group id, the function uses the default &quot;group&quot; if groups are forming based on the presence of a link, the link_type is not the default None or the link_type_link_value, plus a number from the Multi-level_Mesa.id_counter attribute. If users decided they would like to pass in processes to provide a unique id for groups this could be added in future versions, but was not included in this version as it did not add anything substantive to the Multi-level Mesa dynamics. The link_type function allows the user to pass in what link key value should link agents together. The link_type can then be further specified with the link_value criteria. These values are also used as the dictionary keys in the Multi-level_Mesa.reverse_groups manager. The link_value can either be a string to further classify the type of link, for example family: friendly or family: angry_teenager or it can be a value such as trades: 10 (number of trades between agents), which in this case tracks a type of interaction between agents. As net_group is an additive process the value is assumed to be a threshold of greater than or equal to a value. The network can then be updated and evaluated through the other processes in the ABM using NetworkX object manipulation functions. For convenience, Multi-level_Mesa also has Multi-level_Mesa.add_links and Multi-level_Mesa.remove_links functions. These functions take a list of agents, combines them in to a list of fully connected tuples and then adds or removes the links.</source>
          <target state="translated">MultiLevel_Mesa.net_group函数不需要参数,会默认代理之间是否存在链接。由于net_group函数没有传入进程,所以没有办法指定组的id,如果组是基于链接的存在而形成的,那么该函数使用默认的 &quot;组&quot;,链接类型不是默认的None或者链接_type_link_value,加上Multi-level_Mesa.id_counter属性中的一个数字。如果用户决定他们想通过进程来为组提供一个唯一的id,这可以在未来的版本中添加,但是这个版本中没有包含,因为它没有给多级Mesa动态添加任何实质性的东西。link_type函数允许用户传入什么样的链接键值来链接代理。link_type可以通过link_value标准进一步指定。这些值在Multi-level_Mesa.reverse_groups管理器中也被用作字典键。link_value可以是一个字符串来进一步分类链接的类型,例如family:friendly或family:angry_teenager,也可以是一个值,例如transks:10(代理之间的交易次数),在这种情况下,它跟踪的是代理之间的一种互动类型。由于net_group是一个加法过程,该值被假设为大于或等于一个阈值。然后可以通过ABM中的其他过程使用NetworkX对象操作函数更新和评估网络。为了方便起见,Multi-level_Mesa还具有Multi-level_Mesa.add_links和Multi-level_Mesa.remove_links函数。这些函数接收一个代理列表,将它们组合成一个完全连接的元组列表,然后添加或删除链接。</target>
        </trans-unit>
        <trans-unit id="fb920b58e145b1e086e21b323ffd229317ebd07d" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.reassess_meta function requires one parameter, which is the process defined by the user for assessing whether or not the agent should remain within the group. The function also has a reintroduce parameter which takes a Boolean value and is defaulted to True. This parameter tells the function whether or not to reintroduce the removed agents back into the schedule.</source>
          <target state="translated">MultiLevel_Mesa.reassess_meta函数需要一个参数,即用户定义的评估代理是否应该留在组内的过程。该函数还有一个reintroduce参数,该参数取一个布尔值,默认为True。这个参数告诉函数是否将被移除的代理重新引入到计划中。</target>
        </trans-unit>
        <trans-unit id="3200bef127d2edad72f3d71838e216c1fbaab255" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.reassess_net_group (Box 3-5) uses the same taxonomy of options as Multi-level_Mesa.net_group. First, an agent can be removed based on the presence of a link, the presence of a specific link type and finally the presence of a specific link value. The function will also check to ensure the meta-agent still has the minimum number of agents to remain a group which is defaulted to two with the Multi-level_Mesa.min_for_group attribute.</source>
          <target state="translated">MultiLevel_Mesa.reassess_net_group(框3-5)使用与Multi-level_Mesa.net_group相同的选项分类法。首先,可以根据是否存在链接、是否存在特定的链接类型以及最后是否存在特定的链接值来删除代理。该函数还将检查以确保元代理仍然有最小数量的代理来保持一个组,这个组的默认数量是两个,Multi-level_Mesa.min_for_group属性。</target>
        </trans-unit>
        <trans-unit id="7aeffe395f9e52f877e34e274fedb6fa230532d4" translate="yes" xml:space="preserve">
          <source>The dissolution function for the explicit approach (although it can be used interchangeably with the network approach) is Multi-level_Mesa.reassess_group. This function iterates through each group and then uses the user defined process to assess whether or not an agent should still belong to the group. Similar to the Multi-level_Mesa.form_group this function requires a yield to provide the list of agents which should be removed and then proceeds to remove those agents while updating the appropriate managers. This function also ensures if the group fails to have a certain number of agents within the group that the group will be removed. This minimum number of agents is the min_for_group attribute of the Multi-level Mesa instance and has a default setting of two</source>
          <target state="translated">显式方法的解散函数(尽管它可以与网络方法互换使用)是Multi-level_Mesa.reassess_group。这个函数遍历每个组,然后使用用户定义的过程来评估一个代理是否还应该属于该组。与Multi-level_Mesa.form_group类似,这个函数需要一个yield来提供应该被移除的代理列表,然后继续移除这些代理,同时更新相应的管理人员。这个函数还确保如果组内没有一定数量的代理,该组将被删除。这个最小代理数量是多级Mesa实例的min_for_group属性,默认设置为两个。</target>
        </trans-unit>
        <trans-unit id="37c886402f15b31f8b53b45efd57e0dc1c8f3811" translate="yes" xml:space="preserve">
          <source>The dissolution function similar to the formation function requires no parameters and will default to determining if there is a link or not. The user can also specify link types which cause agents to be removed or link values, which can again be either strings or numbers. However, as this function is not additive, if the value is a number it must be less than or equal to the given value.</source>
          <target state="translated">溶解函数类似于形成函数,不需要任何参数,将默认确定是否有链接。用户还可以指定导致代理被移除的链接类型或链接值,这些值同样可以是字符串或数字。但是,由于这个函数不是加法,如果值是数字,它必须小于或等于给定值。</target>
        </trans-unit>
        <trans-unit id="e846e9a75ba79c176424d40e346b809843120f9f" translate="yes" xml:space="preserve">
          <source>The formation function of the explicit approach is MultiLevel_Mesa.form_group and takes a user defined process which must generate a list of bilaterally connected agents (Box 3-2). This approach can be computationally expensive, but is necessary to allow for the accurate recreation of the network. As dictionaries (e.g. the schedule) cannot be manipulated during iteration users must use a yield versus the more common return operator to pass the list of agents to the MultiLevel_Mesa.form_group function.</source>
          <target state="translated">显式方法的形成函数是MultiLevel_Mesa.form_group,需要一个用户定义的过程,它必须生成一个双边连接的代理列表(框3-2)。这种方法在计算上可能是昂贵的,但对于允许网络的精确再现是必要的。由于在迭代过程中不能对字典(如时间表)进行操作,用户必须使用yield与更常见的return操作符将代理列表传递给MultiLevel_Mesa.form_group函数。</target>
        </trans-unit>
        <trans-unit id="51cf4d36ed362c2184a4b84f3e43995a5f93dfa7" translate="yes" xml:space="preserve">
          <source>The formation function of the network approach is Multi-level_Mesa.net_group and uses an undirected NetworkX graph object to assess what agents should form groups. With an undirected graph and as indicated in the above figure, there are three possibilities for assessing whether or not linked agents should be in the same group. First, by whether or not a link exists between the agents. Second, if a specific type of link exists (e.g. friend, enemy). Third, if a link exists which has reached a certain value.</source>
          <target state="translated">网络方法的形成函数是Multi-level_Mesa.net_group,并使用一个非定向的NetworkX图对象来评估哪些代理应该形成组。在非定向图的情况下,如上图所示,有三种可能来评估有联系的代理是否应该在同一个组中。第一,通过代理之间是否存在链接。第二,如果存在特定类型的链接(如朋友、敌人)。第三,如果存在的联系达到一定的数值。</target>
        </trans-unit>
        <trans-unit id="24aae1fc396217c59c234f4357d4f58fe00d390b" translate="yes" xml:space="preserve">
          <source>The interaction of the schedule, formation and dissolution of modules of agents, and the ability for hierarchies to exist allows for the easier introduction of these key features of complex systems. The functions can be employed as part of the normal step function, at specific events or at specific intervals. By using a network data structure as the main management structure, Multi-level Mesa is able to integrate the interdependencies and changing dynamics of those interdependencies into ABM management structure providing a new dynamic which goes beyond the current multi-level approaches.</source>
          <target state="translated">计划表的交互,代理模块的形成和解散,以及层次结构存在的能力,使得复杂系统的这些关键特征更容易引入。这些功能可以作为正常步骤功能的一部分,在特定的事件或特定的时间间隔中使用。通过使用网络数据结构作为主要的管理结构,多级Mesa能够将相互依存关系和这些相互依存关系的变化动态整合到ABM管理结构中,提供了一种超越当前多级方法的新动态。</target>
        </trans-unit>
        <trans-unit id="5e081bb2d0131bb0e9db8758d2500154e9cced20" translate="yes" xml:space="preserve">
          <source>These examples are various instantiations of the Sugar and Spice trading model described in Chapter 4 of &lt;em&gt;Growing Artificial Societies&lt;/em&gt; by ROb Axtell and Joshua Epstein.</source>
          <target state="translated">这些示例是ROb Axtell和Joshua Epstein在&amp;ldquo;&lt;em&gt;不断发展的人工社会&amp;rdquo;&lt;/em&gt;第4章中描述的Sugar and Spice交易模型的各种实例。</target>
        </trans-unit>
        <trans-unit id="20cf766f97f692e7ce72ffbeaa78febb6e20c005" translate="yes" xml:space="preserve">
          <source>User Defined Dissolution Process: Multi-level_Mesa.reassess_group</source>
          <target state="translated">用户定义的解散过程。Multi-level_Mesa.reassess_group。</target>
        </trans-unit>
        <trans-unit id="565a6b0e22fd4f040c42d8f315e07e8e275d81fa" translate="yes" xml:space="preserve">
          <source>User Defined Formation Process Multi-level_Mesa.form_meta</source>
          <target state="translated">用户定义的形成过程 多层级_Mesa.form_meta。</target>
        </trans-unit>
        <trans-unit id="62dae151ed9c54ab314b0aff7b97a541dac292c0" translate="yes" xml:space="preserve">
          <source>User-Defined Dissolution Function</source>
          <target state="translated">用户定义的溶解功能</target>
        </trans-unit>
        <trans-unit id="f13ba7910ad4cf65afc10e456e2277cec9e73d6f" translate="yes" xml:space="preserve">
          <source>User-Defined Formation Function: Multi-level_Mesa.form_group</source>
          <target state="translated">用户自定义组建功能。Multi-level_Mesa.form_group</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
