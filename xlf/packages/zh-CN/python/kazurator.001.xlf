<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/kazurator/">
    <body>
      <group id="kazurator">
        <trans-unit id="97b43cf57a938b03bc2a7474cfc2db2c693b1ed0" translate="yes" xml:space="preserve">
          <source>(default is</source>
          <target state="translated">（默认为</target>
        </trans-unit>
        <trans-unit id="bc52f59e07b308041a47839463735af34159ffaf" translate="yes" xml:space="preserve">
          <source>), at which point a</source>
          <target state="translated">），此时</target>
        </trans-unit>
        <trans-unit id="0d3af63f25971b9e0cddc6955d09130fd2b8bace" translate="yes" xml:space="preserve">
          <source>1s</source>
          <target state="translated">1s</target>
        </trans-unit>
        <trans-unit id="e9b1d88a461081c882b13e092d2ea12808b086f5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;kwarg&lt;/em&gt; to a higher number. For example:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;向更高的数量&lt;em&gt;倾斜&lt;/em&gt;。例如：</target>
        </trans-unit>
        <trans-unit id="1db0459a722454039a43cf677315793acce1fc91" translate="yes" xml:space="preserve">
          <source>A python port of the &lt;a href=&quot;http://curator.apache.org/curator-recipes/shared-reentrant-read-write-lock.html&quot;&gt;Shared Reentrant Read Write Lock&lt;/a&gt; recipe from &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt;. This package dependends on &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; for
handling the zookeeper bits.</source>
          <target state="translated">来自&lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt;的&lt;a href=&quot;http://curator.apache.org/curator-recipes/shared-reentrant-read-write-lock.html&quot;&gt;Shared Reentrant Read Lock&lt;/a&gt;配方的python端口。该软件包依赖于&lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;来处理Zookeeper位。</target>
        </trans-unit>
        <trans-unit id="5221385fde95fc2b503d319054e9323a69ffa891" translate="yes" xml:space="preserve">
          <source>Also, if you&amp;rsquo;d rather not use the content management protocol, you can
call</source>
          <target state="translated">另外，如果您不想使用内容管理协议，可以致电</target>
        </trans-unit>
        <trans-unit id="8c7d756afd219442f9c20b36f6e433007c8ddfe4" translate="yes" xml:space="preserve">
          <source>At this point, you&amp;rsquo;re probably wondering why I didn&amp;rsquo;t just use the existing locks recipe from &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;. The original
goal was to make &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt; and &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt; respect each other&amp;rsquo;s locks such that:</source>
          <target state="translated">在这一点上，您可能想知道为什么我不只是使用&lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;的现有锁配方。最初的目标是使&lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;策展人&lt;/a&gt;和&lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;尊重彼此的锁，从而：</target>
        </trans-unit>
        <trans-unit id="cd229e246a6d3ee867a0192f0d0cc374a330727b" translate="yes" xml:space="preserve">
          <source>Clone this repo and</source>
          <target state="translated">克隆这个Repo,然后</target>
        </trans-unit>
        <trans-unit id="8eef3eb1036b99b663f3242b7d15644d9edff863" translate="yes" xml:space="preserve">
          <source>Consumers will block until the lock is available, or timeout after the
specified</source>
          <target state="translated">消耗者会被阻挡,直到锁定可用,或在指定的时间后超时。</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">发展</target>
        </trans-unit>
        <trans-unit id="20bd9db7cdc731f38af4a3cf913c127322514c76" translate="yes" xml:space="preserve">
          <source>Either could acquire a read lock, so long as neither held a write
lock</source>
          <target state="translated">只要双方都不持有写锁,任何一方都可以获得读锁。</target>
        </trans-unit>
        <trans-unit id="2dc29acc7f069c5cfa34f8c0a28a24b6288039a1" translate="yes" xml:space="preserve">
          <source>Either could acquire a write lock, and block either from acquiring
either read/write locks</source>
          <target state="translated">其中一个可以获得写锁,并阻止其中一个获得读/写锁。</target>
        </trans-unit>
        <trans-unit id="6c2692703fbd0ce921552836973c379006240cb8" translate="yes" xml:space="preserve">
          <source>Example of Interop with Curator</source>
          <target state="translated">与策展人的互操作实例</target>
        </trans-unit>
        <trans-unit id="a558352b8558114b6b351402b317ee674519f9af" translate="yes" xml:space="preserve">
          <source>I first attempted to patch the locks recipe in &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;, but the internals are a bit different. (&lt;strong&gt;READ&lt;/strong&gt;: &lt;em&gt;I wasn&amp;rsquo;t
able to make it work right&lt;/em&gt;).</source>
          <target state="translated">我首先尝试在&lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo中&lt;/a&gt;修补锁的配方，但内部原理有所不同。（&lt;strong&gt;阅读&lt;/strong&gt;：&lt;em&gt;我无法使其正常运行&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="c81a523f185fa80bc33528d019fc29f8a2fa248c" translate="yes" xml:space="preserve">
          <source>In some cases, you&amp;rsquo;ll need to support an unlimited number of read locks,
but only a single write lock. For example, suppose you were processing
some HDFS paths by altering the format and replacing the data (totally
hypothetical of course :smile:).</source>
          <target state="translated">在某些情况下，您需要支持无限数量的读锁，但仅支持一个写锁。例如，假设您正在通过更改格式并替换数据来处理某些HDFS路径（当然完全是假设的：smile :）。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="f6a746eca25318fd2b27f17fb5eb3db67d653aee" translate="yes" xml:space="preserve">
          <source>Inter Process Mutex</source>
          <target state="translated">进程间互换</target>
        </trans-unit>
        <trans-unit id="d272c3b19bf0448bff28f204a895699bbb11e582" translate="yes" xml:space="preserve">
          <source>Inter Process Read Write Lock</source>
          <target state="translated">进程间读写锁</target>
        </trans-unit>
        <trans-unit id="eba05f20566186a3f5928715b9c944cb1a345b12" translate="yes" xml:space="preserve">
          <source>Inter process lock recipes that play nice with curator</source>
          <target state="translated">与策展人玩得好的进程间锁配方</target>
        </trans-unit>
        <trans-unit id="fcab481b05d6a1db01c2b0869ada3103ff798e52" translate="yes" xml:space="preserve">
          <source>Run tests</source>
          <target state="translated">运行测试</target>
        </trans-unit>
        <trans-unit id="7f65857ebdeee3a7b83ccbdd3a2b083962cd0133" translate="yes" xml:space="preserve">
          <source>Running the tests will spawn a docker container to run zookeeper in. It
will be shutdown automatically at the end of the run</source>
          <target state="translated">运行测试会生成一个docker容器来运行zookeeper。运行结束后,容器会自动关闭。</target>
        </trans-unit>
        <trans-unit id="98f4de881ea486bd6b14a7a887b38ac8b1a90c61" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/pseudomuto/kazurator/tree/master/example/&quot;&gt;example&lt;/a&gt; directory.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://github.com/pseudomuto/kazurator/tree/master/example/&quot;&gt;示例&lt;/a&gt;目录。</target>
        </trans-unit>
        <trans-unit id="5dc54bd7df9085373f1481f147d91a5baa0c0a64" translate="yes" xml:space="preserve">
          <source>The reason this is necessary (at least for me), is that some code was running Scala and using &lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt;, and other code
was running Python using &lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo&lt;/a&gt;.</source>
          <target state="translated">之所以必须这样做（至少对我而言）是因为某些代码在运行Scala并使用&lt;a href=&quot;http://curator.apache.org/index.html&quot;&gt;curator&lt;/a&gt;，而其他代码在Python使用&lt;a href=&quot;https://kazoo.readthedocs.io/en/latest&quot;&gt;kazoo来&lt;/a&gt;运行。</target>
        </trans-unit>
        <trans-unit id="0c94fe5468df592d13f6f1b932b2dce82a6a492f" translate="yes" xml:space="preserve">
          <source>There are two main use cases for this package. Both of them relate to
creating an inter-process critical region.</source>
          <target state="translated">该软件包有两个主要的使用案例。这两个案例都与创建进程间关键区域有关。</target>
        </trans-unit>
        <trans-unit id="2c6d9cdcdca998a2ccbad6e6b6ab95ef53e10216" translate="yes" xml:space="preserve">
          <source>This example assumes you want a single thread to be in the critical
region. In order to support simultaneous multi-threaded access, you can
set the</source>
          <target state="translated">这个例子假设你希望一个线程在关键区域。为了支持同时的多线程访问,您可以在关键区域中设置</target>
        </trans-unit>
        <trans-unit id="b846d677fd93ce2f8bfbc977f9b50bbf62090abc" translate="yes" xml:space="preserve">
          <source>To start, let&amp;rsquo;s take a look at how we could implement a simple shared
(across process) mutex:</source>
          <target state="translated">首先，让我们看一下如何实现一个简单的共享（跨进程）互斥量：</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="cfa161709373c0965606d71e17a7f4490ac5d614" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;d want any consumers of the data to acquire a read lock. This would
prevent the altering process from acquiring a write lock until the
consumer(s) are finished. Similarly, the consumers wouldn&amp;rsquo;t be able to
acquire read locks until the altering process removes the write lock.</source>
          <target state="translated">您希望数据的所有使用者都获得读锁定。这将防止更改过程在使用者使用完之前获取写锁定。同样，在更改过程删除写锁之前，使用者将无法获取读锁。</target>
        </trans-unit>
        <trans-unit id="657d3c7714fb8d9f2df8c78e78ad719e4d4dbe43" translate="yes" xml:space="preserve">
          <source>acquire</source>
          <target state="translated">购置</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="72a595a1cf5c40c1b816d87b7205413f620301fe" translate="yes" xml:space="preserve">
          <source>directly.</source>
          <target state="translated">直接。</target>
        </trans-unit>
        <trans-unit id="0a0c08c986366bffac791a879e9a390c5e762fc3" translate="yes" xml:space="preserve">
          <source>is raised.</source>
          <target state="translated">是提出。</target>
        </trans-unit>
        <trans-unit id="afcc60b4529d4cb124375f93fea855c6ef20aefb" translate="yes" xml:space="preserve">
          <source>kazoo.LockTimeout</source>
          <target state="translated">kazoo.LockTimeout</target>
        </trans-unit>
        <trans-unit id="6bdc02b22852e0293eff50625dfe834b0a588aed" translate="yes" xml:space="preserve">
          <source>max_leases</source>
          <target state="translated">最大租约</target>
        </trans-unit>
        <trans-unit id="7b1855527317d0124ebeb726defa838d54e9b663" translate="yes" xml:space="preserve">
          <source>pip install -r requirements.txt</source>
          <target state="translated">pip install -r requirements.txt</target>
        </trans-unit>
        <trans-unit id="01f561ac4ab15d6a23a57976bba4dbcc423b9cbb" translate="yes" xml:space="preserve">
          <source>release</source>
          <target state="translated">释放</target>
        </trans-unit>
        <trans-unit id="e8993c260135f06b99572740519d740a1e9d1a8b" translate="yes" xml:space="preserve">
          <source>script/test nosetests</source>
          <target state="translated">脚本/测试 nosetests</target>
        </trans-unit>
        <trans-unit id="56d3c9490be2608ac36f5a4805bfec2f21f7f982" translate="yes" xml:space="preserve">
          <source>timeout</source>
          <target state="translated">超时</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
