<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/lisflood-model/">
    <body>
      <group id="lisflood-model">
        <trans-unit id="f5a70ebf38e5204631f154037e88711a35c8e56d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/ec-jrc/lisflood-code&quot;&gt;https://github.com/ec-jrc/lisflood-code&lt;/a&gt; (this repository)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ec-jrc/lisflood-code&quot;&gt;https://github.com/ec-jrc/lisflood-code&lt;/a&gt;（此存储库）</target>
        </trans-unit>
        <trans-unit id="f9a56caeef5914fb0e23b98d65cf00abd25d9b22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Documentation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;文献资料&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f92e515a09c6556d3e4d74bf9bcdb65752d32b2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Project&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;项目&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9884d83477481e3e4a02a37194f54a67783273c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;源代码&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cc1d86ad3dec745808f7f2e62ec9e1fc92052b3" translate="yes" xml:space="preserve">
          <source>After this command, you can find all files to run a test against a catchment under the directory you mapped: &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment1&lt;/code&gt;</source>
          <target state="translated">执行此命令后，您可以在映射的目录下找到所有文件来对集水区进行测试： &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2550d9ef4edfb8b4e32da8b929e99d174b6bdbd3" translate="yes" xml:space="preserve">
          <source>Calibration tool</source>
          <target state="translated">校准工具</target>
        </trans-unit>
        <trans-unit id="6d7e0ad55992656c65f95da8077f6ff9d5d18727" translate="yes" xml:space="preserve">
          <source>Clone the master branch of this repository (you need to have git installed on your machine).</source>
          <target state="translated">克隆这个仓库的主分支(你需要在你的机器上安装git)。</target>
        </trans-unit>
        <trans-unit id="09e5be92217f34fd97102791fb83c603429aa9ed" translate="yes" xml:space="preserve">
          <source>Collaborate</source>
          <target state="translated">协作</target>
        </trans-unit>
        <trans-unit id="6dbf52f8a91c0112ba71cf1a8ac73765ffb1d516" translate="yes" xml:space="preserve">
          <source>Command above will also install the executable &lt;code&gt;lisflood&lt;/code&gt; in the virtualenv, so that you can run LISFLOOD with the following:</source>
          <target state="translated">上面的命令还将在virtualenv中安装可执行文件 &lt;code&gt;lisflood&lt;/code&gt; ，以便您可以使用以下命令运行LISFLOOD：</target>
        </trans-unit>
        <trans-unit id="99ccd8cefc5a97400a8da81fc14e1e8d76212ff0" translate="yes" xml:space="preserve">
          <source>Compile the cython module kinematic_wave_parallel_tool</source>
          <target state="translated">编译cython模块 kinematic_wave_parallel_tool。</target>
        </trans-unit>
        <trans-unit id="75e9eb550ef8830df4087ed3e618e418590b5323" translate="yes" xml:space="preserve">
          <source>Copy catchment files from container to your host, using mapped directories:</source>
          <target state="translated">使用映射的目录,将容器中的集水文件复制到您的主机上。</target>
        </trans-unit>
        <trans-unit id="96c9832311d686e35ab40bdc7cfd6f32ecd3c52b" translate="yes" xml:space="preserve">
          <source>Delete the files *.so (if any) in directory hydrological-modules</source>
          <target state="translated">删除水文模块目录下的*.so文件(如果有)。</target>
        </trans-unit>
        <trans-unit id="2fccb4697e15d7027e2840920bb6fda8e3795dcc" translate="yes" xml:space="preserve">
          <source>Docker image</source>
          <target state="translated">Docker镜像</target>
        </trans-unit>
        <trans-unit id="68a4194227be4ab74bc3d32363417c0fc1f30055" translate="yes" xml:space="preserve">
          <source>Docs</source>
          <target state="translated">文件</target>
        </trans-unit>
        <trans-unit id="caa68eafd379e07405ef3d18542c81bb1cea0898" translate="yes" xml:space="preserve">
          <source>Execute lisflood with a Docker image:</source>
          <target state="translated">用Docker镜像执行lisflood。</target>
        </trans-unit>
        <trans-unit id="82f564fcee3ff8dc3056b530d43342e2d261cf59" translate="yes" xml:space="preserve">
          <source>GDAL should be installed as well. To install GDAL C library and gdal python library on debian/ubuntu systems, we found good instructions &lt;a href=&quot;https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">还应安装GDAL。要在debian / ubuntu系统上安装GDAL C库和gdal python库，我们在&lt;a href=&quot;https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html&quot;&gt;这里&lt;/a&gt;找到了很好的说明。</target>
        </trans-unit>
        <trans-unit id="0ca9d0c71408c6a6852839b2197eab62ac1f4278" translate="yes" xml:space="preserve">
          <source>If the command above successed without errors, producing dis.nc into tests/data/TestCatchment1/outputs folder, your lisflood installation was correct.</source>
          <target state="translated">如果上面的命令成功而不出错,生成dis.nc到test/data/TestCatchment1/outputs文件夹,说明你的lisflood安装是正确的。</target>
        </trans-unit>
        <trans-unit id="2b9bbe592c37baa4c78ab2875e9a710517c6383d" translate="yes" xml:space="preserve">
          <source>If you already have GDAL installed in your computer, make sure that the GDAL and the python gdal library have the same version.</source>
          <target state="translated">如果你的计算机中已经安装了GDAL,请确保GDAL和python gdal库的版本相同。</target>
        </trans-unit>
        <trans-unit id="5bf4502cfc076a9c2ad05a0d1e24c9a05b55b9d9" translate="yes" xml:space="preserve">
          <source>If you find an issue in our code, please follow the &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub flow&lt;/a&gt; to propose your changes (Fork, commit your changes and ask for a Pull Request).
When you develop, you need to run our unit tests before to propose a pull request.
Simply execute &lt;code&gt;tox&lt;/code&gt; or &lt;code&gt;pytest&lt;/code&gt; on command line from project folder.</source>
          <target state="translated">如果您在我们的代码中发现问题，请按照&lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub流程&lt;/a&gt;提出更改建议（叉，提交更改并请求&amp;ldquo;拉取请求&amp;rdquo;）。开发时，您需要先运行我们的单元测试，然后才能提出请求请求。只需从项目文件夹中的命令行执行 &lt;code&gt;tox&lt;/code&gt; 或 &lt;code&gt;pytest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9611e74d64102180a0eb54d2a1866236589092a1" translate="yes" xml:space="preserve">
          <source>Important: the module has to be compiled on the machine where the model is run - the resulting binary is not portable.</source>
          <target state="translated">重要的是:该模块必须在运行模型的机器上编译--生成的二进制文件是不可移植的。</target>
        </trans-unit>
        <trans-unit id="984cd4284bc5646539efa1c933ab3ee699f4ebd4" translate="yes" xml:space="preserve">
          <source>Inside the hydrological_modules folder, execute &quot;python compile_kinematic_wave_parallel_tools.py build_ext --inplace&quot;</source>
          <target state="translated">在水文模块文件夹中,执行 &quot;python compile_kinematic_wave_parallel_tools.py build_ext --inplace&quot; 。</target>
        </trans-unit>
        <trans-unit id="72569447fc3cefa3c6e3fa3fdb0f03a77a50b741" translate="yes" xml:space="preserve">
          <source>Install requirements into a Python 3 virtualenv.
We recommend to follow the instructions on &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;virtualenv docs&lt;/a&gt;.
Assuming you've activated your virtual environment, you can now install requirements with pip:</source>
          <target state="translated">将需求安装到Python 3 virtualenv中。我们建议您遵循&lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;virtualenv docs&lt;/a&gt;上的说明。假设您已经激活了虚拟环境，现在可以使用pip安装需求：</target>
        </trans-unit>
        <trans-unit id="9639a1640ed3297e6e9e54047bf09e6afd36f13c" translate="yes" xml:space="preserve">
          <source>LISFLOOD is also distributed as a standard python package. You can install the pip package in your Python 3 virtualenv:</source>
          <target state="translated">LISFLOOD也作为一个标准的python包发布。你可以在你的Python 3 virtualenv中安装pip包。</target>
        </trans-unit>
        <trans-unit id="d33062e21cd4cf97f04c936d18f71f12067b1d8b" translate="yes" xml:space="preserve">
          <source>LISFLOOD model python module</source>
          <target state="translated">LISFLOOD模型python模块</target>
        </trans-unit>
        <trans-unit id="5dd5fa74710baff78d8910353e7f6cb137d665fc" translate="yes" xml:space="preserve">
          <source>Lisflood</source>
          <target state="translated">Lisflood</target>
        </trans-unit>
        <trans-unit id="6904f96606b8308e1edd02cbaf1569120d340827" translate="yes" xml:space="preserve">
          <source>Lisflood OS</source>
          <target state="translated">Lisflood操作系统</target>
        </trans-unit>
        <trans-unit id="e72f3af253c5368a1c5ab922f5774f151e55e089" translate="yes" xml:space="preserve">
          <source>Lisflood Usecases</source>
          <target state="translated">葡京娱乐案例</target>
        </trans-unit>
        <trans-unit id="d497aeb6b8181fa03b11ab0530d6a1cd234b45c0" translate="yes" xml:space="preserve">
          <source>Lisflood Utilities</source>
          <target state="translated">Lisflood Utilities</target>
        </trans-unit>
        <trans-unit id="af7ac08fe444302fcf967e887c640a037860e09f" translate="yes" xml:space="preserve">
          <source>Lisvap</source>
          <target state="translated">Lisvap</target>
        </trans-unit>
        <trans-unit id="6029b82adea2d88a40994be36142e94d93797f6d" translate="yes" xml:space="preserve">
          <source>Model docs</source>
          <target state="translated">文件范本</target>
        </trans-unit>
        <trans-unit id="d98b3357ed1732017e20a7b4283fb1f7ec7891ff" translate="yes" xml:space="preserve">
          <source>Now your environment should be set up to run lisflood. Try with a prepared settings file for one of the two test catchments:</source>
          <target state="translated">现在,你的环境应该被设置为运行lisflood。试着为两个测试流域中的一个准备一个设置文件。</target>
        </trans-unit>
        <trans-unit id="286081987f85b323e4f97f4897df7d6b3f1518cf" translate="yes" xml:space="preserve">
          <source>Now, you can run LISFLOOD as a docker container to test included catchments. Only thing you need to do is to map the TestCatchment1 folder to the container folder &lt;code&gt;input&lt;/code&gt;, by using -v option.
In the XML settings file, all paths are adjusted to be relative to the very same settings file, so you don't need to edit paths, as long as you keep same folders structure.</source>
          <target state="translated">现在，您可以将LISFLOOD作为docker容器运行，以测试包括的集水区。您只需要做的就是使用-v选项将TestCatchment1文件夹映射到容器文件夹 &lt;code&gt;input&lt;/code&gt; 。在XML设置文件中，所有路径都被调整为相对于完全相同的设置文件，因此，只要保持相同的文件夹结构，就无需编辑路径。</target>
        </trans-unit>
        <trans-unit id="bcee8eb5d4eb54a05e43e4969ca7785a3a847f48" translate="yes" xml:space="preserve">
          <source>Once LISFLOOD finished, you find reported maps in &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment/outputs/&lt;/code&gt; folder.</source>
          <target state="translated">LISFLOOD完成后，您可以在 &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment/outputs/&lt;/code&gt; 文件夹中找到报告的地图。</target>
        </trans-unit>
        <trans-unit id="071846331a4fbf6d22d1f577ca4b03db90e84064" translate="yes" xml:space="preserve">
          <source>Other useful resources</source>
          <target state="translated">其他有用的资源</target>
        </trans-unit>
        <trans-unit id="d5cab98a44e31c7078e90f4eab8005d71ee982ae" translate="yes" xml:space="preserve">
          <source>Pull image from repository:</source>
          <target state="translated">从资源库中提取图片。</target>
        </trans-unit>
        <trans-unit id="d14740d63c1b28ba6dadec5cd587e9634468a4f2" translate="yes" xml:space="preserve">
          <source>Pypi packaged LISFLOOD</source>
          <target state="translated">皮皮包装的LISFLOOD。</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">快速启动</target>
        </trans-unit>
        <trans-unit id="c5f55d2f7a5b3d22b88b0048a560841f934b9835" translate="yes" xml:space="preserve">
          <source>Run a cold run for the test catchment</source>
          <target state="translated">对测试集水区进行冷运行</target>
        </trans-unit>
        <trans-unit id="7c997b69c234fba79de979660eea389fbabe7fbd" translate="yes" xml:space="preserve">
          <source>Run tests in image:</source>
          <target state="translated">在图像中运行测试。</target>
        </trans-unit>
        <trans-unit id="bdb60ecf7f3f9dfc72f52a132d9fafc262ef2554" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;official website&lt;/a&gt; for more info about pytest.</source>
          <target state="translated">有关pytest的更多信息，请参见&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;官方网站&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="da2e976462110467f5f0d87ac80728472e8b5a3e" translate="yes" xml:space="preserve">
          <source>Then in the settings file the option &quot;numberParallelThreadsKinematicWave&quot; may take the following values:
- &quot;0&quot;           : auto-detection of the machine/node's number of CPUs (all CPUs are used minus 1) (do not set it if other simulations are running on the same machine/node)
- &quot;1&quot;           : serial execution (not parallel)
- &quot;2&quot;, &quot;3&quot;, ... : manual setting of the number of parallel threads.
(if exceeding the number of CPUs, the option is set to &quot;0&quot;) --&amp;gt;</source>
          <target state="translated">然后，在设置文件中，选项&amp;ldquo; numberParallelThreadsKinematicWave&amp;rdquo;可以采用以下值：-&amp;ldquo; 0&amp;rdquo;：自动检测机器/节点的CPU数量（使用的所有CPU减1）（如果正在运行其他模拟，则不要设置该值）在同一台机器/节点上）-&amp;ldquo; 1&amp;rdquo;：串行执行（非并行）-&amp;ldquo; 2&amp;rdquo;，&amp;ldquo; 3&amp;rdquo;，...：手动设置并行线程数。（如果超过CPU数量，则该选项设置为&amp;ldquo; 0&amp;rdquo;）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="773e27a9ff328adf3821461b29377e617bd1a08d" translate="yes" xml:space="preserve">
          <source>This repository hosts source code of LISFLOOD model.
Go to &lt;a href=&quot;https://ec-jrc.github.io/lisflood/&quot;&gt;Lisflood OS page&lt;/a&gt; for more information.</source>
          <target state="translated">该存储库托管LISFLOOD模型的源代码。转到&lt;a href=&quot;https://ec-jrc.github.io/lisflood/&quot;&gt;Lisflood OS页面&lt;/a&gt;以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="863218ecd4bd19a52d11d513030b7ec979fe4634" translate="yes" xml:space="preserve">
          <source>To compile this Cython module to enable OpenMP multithreading (parallel kinematic wave):</source>
          <target state="translated">编译这个Cython模块,启用OpenMP多线程(并行运动波)。</target>
        </trans-unit>
        <trans-unit id="100bdf67dec2dca99cc9f783954ef6fe26135005" translate="yes" xml:space="preserve">
          <source>Tox tests can last minutes. You can also just use pytest and run tests in a single environment (e.g. Python 3.7).
This is often enough and will save you some time if you need to run tests frequently.</source>
          <target state="translated">毒测试可以持续几分钟。你也可以只使用pytest,在一个环境中运行测试(例如Python 3.7)。如果你需要频繁地运行测试,这通常已经足够了,并且会节省你的一些时间。</target>
        </trans-unit>
        <trans-unit id="9a907a2a9e2d8f2282b25aa37fedd952420dd3fa" translate="yes" xml:space="preserve">
          <source>User guide</source>
          <target state="translated">用户指南</target>
        </trans-unit>
        <trans-unit id="8805808855a21562903815a7c7fe4554162584ef" translate="yes" xml:space="preserve">
          <source>You can download code and datasets for testing the model.
Follow this instruction for a basic test (included in this repository under &lt;a href=&quot;https://github.com/ec-jrc/lisflood-code/tree/master/tests/data/TestCatchment1&quot;&gt;tests/data/TestCatchment1&lt;/a&gt;)</source>
          <target state="translated">您可以下载代码和数据集以测试模型。按照此说明进行基本测试（包含在此存储库中的&lt;a href=&quot;https://github.com/ec-jrc/lisflood-code/tree/master/tests/data/TestCatchment1&quot;&gt;tests / data / TestCatchment1下&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e1bd048441a7158d9b72de646e746f13bce9481c" translate="yes" xml:space="preserve">
          <source>You can use the updated docker image to run lisflood, so without taking care to install dependencies on your system.</source>
          <target state="translated">你可以使用更新后的docker镜像来运行lisflood,所以不用注意在系统上安装依赖关系。</target>
        </trans-unit>
        <trans-unit id="8b0e71e596d783b7ae40a69281fb10bf2862d109" translate="yes" xml:space="preserve">
          <source>You need to install PCRaster (4.2.x is first version which works with Python3) and include its python interface in PYTHONPATH environment variable.
For details, please follow instruction on &lt;a href=&quot;http://pcraster.geo.uu.nl/getting-started/pcraster-on-linux/&quot;&gt;official docs&lt;/a&gt;.</source>
          <target state="translated">您需要安装PCRaster（4.2.x是与Python3兼容的第一个版本），并将其python接口包含在PYTHONPATH环境变量中。有关详细信息，请按照&lt;a href=&quot;http://pcraster.geo.uu.nl/getting-started/pcraster-on-linux/&quot;&gt;官方文档&lt;/a&gt;上的说明进行操作。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
