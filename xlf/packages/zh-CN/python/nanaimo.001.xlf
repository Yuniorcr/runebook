<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/nanaimo/">
    <body>
      <group id="nanaimo">
        <trans-unit id="57b0192c90bade6200f8fe6add2bd92423f9a981" translate="yes" xml:space="preserve">
          <source>A delicious Python treat that makes on-target testing sweet and satisfying.</source>
          <target state="translated">美味的Python美食,让在靶测试变得甜蜜而满足。</target>
        </trans-unit>
        <trans-unit id="7e72ab885b6eecaecfbe3c9d5d916b2e1e1ab636" translate="yes" xml:space="preserve">
          <source>Block diagram of Nanaimo&amp;rsquo;s relationship to other components of a typical software build and test pipeline.</source>
          <target state="translated">Nanaimo与典型软件构建和测试管道的其他组件的关系框图。</target>
        </trans-unit>
        <trans-unit id="9a5cf9c40036ab923e4b08d4bf75097ac400ff09" translate="yes" xml:space="preserve">
          <source>Example of S32K dev boards attached to Raspberry PI CI workers running the &lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt; agent and using Nanaimo.</source>
          <target state="translated">连接到运行&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;代理并使用Nanaimo的Raspberry PI CI工人的S32K开发板示例。</target>
        </trans-unit>
        <trans-unit id="e4b9878a6bb4d7ade487215e6a25d783fd1e3a1d" translate="yes" xml:space="preserve">
          <source>Example scenario using Nanaimo to test an I2C driver for a microcontroller.</source>
          <target state="translated">使用Nanaimo测试微控制器的I2C驱动程序的示例场景。</target>
        </trans-unit>
        <trans-unit id="74dd49bd8ec3e146e66e88c16fcdff760c7dfd12" translate="yes" xml:space="preserve">
          <source>Framework for automating tests involving hardware test fixtures.</source>
          <target state="translated">涉及硬件测试夹具的自动化测试框架。</target>
        </trans-unit>
        <trans-unit id="b3e1ac3d545f8a410b7bcb9a5fd366c4bf888b75" translate="yes" xml:space="preserve">
          <source>Hierarchy of system testing. Nanaimo focuses on part and subassembly testing.</source>
          <target state="translated">系统测试的层次结构。Nanaimo专注于零件和子装配测试。</target>
        </trans-unit>
        <trans-unit id="e6fa936c1f8b0374bb1f00c2e7ebcab08335fa24" translate="yes" xml:space="preserve">
          <source>Nanaimo is &lt;em&gt;not&lt;/em&gt; a simulation framework and is not designed to support the complexity of a full hardware-in-the-loop platform.
Instead it&amp;rsquo;s focused on testing small integrations with a few hardware components and instruments using concepts, syntax,
and frameworks familiar to software engineers. Examples of these small integrations might include verifying a SPI driver for a
microcontroller or ensuring the upload time for a serial bootloader meets expected Key-Performance-Indicators (KPIs). To do this
Nanaimo abstractions provide async interfaces to hardware either directly using available communication protocols
(e.g. serial or IP networks) or by invoking a CLI provided by the instrument vendor. Because of this latter use case some
instruments will require additional programs be available in a test environment.</source>
          <target state="translated">Nanaimo&lt;em&gt;不是&lt;/em&gt;模拟框架，也不旨在支持完整的硬件在环平台的复杂性。相反，它专注于使用软件工程师熟悉的概念，语法和框架来测试与一些硬件组件和仪器的小型集成。这些小型集成的示例可能包括验证微控制器的SPI驱动程序或确保串行引导加载程序的上载时间符合预期的关键性能指标（KPI）。为此，Nanaimo抽象可直接使用可用的通信协议（例如，串行或IP网络）或通过调用仪器供应商提供的CLI向硬件提供异步接口。由于后一种用例，某些仪器将需要在测试环境中提供其他程序。</target>
        </trans-unit>
        <trans-unit id="14c12ea446b8fb714a267f185c0390be1cf066b4" translate="yes" xml:space="preserve">
          <source>Nanaimo is a set of utilities and plugins designed to enable integration of hardware test apparatuses
with pytest. This can allow on-target tests to run as part of continuous integration pipelines like
&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;, &lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt;, or &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;.</source>
          <target state="translated">Nanaimo是一组实用程序和插件，旨在使硬件测试设备与pytest集成。这可以使目标测试作为&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;，&lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt;或&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins之&lt;/a&gt;类的持续集成管道的一部分运行 。</target>
        </trans-unit>
        <trans-unit id="a3008905c2e9a32e2b3a3144f0ea7a8f7d1ef964" translate="yes" xml:space="preserve">
          <source>Nanaimo is alpha software and will remain so until we bump its version to 1.0.0 or greater.
We will not knowingly break compatibility within a minor revision but we will break compatibility
a few more times between minor revisions until beta is declared. Because of this you should depend
on a minor version explicitly. For example</source>
          <target state="translated">Nanaimo是alpha软件,在我们把它的版本提升到1.0.0或更高之前,它都会保持这个状态。我们不会在次要版本中故意破坏兼容性,但我们会在次要版本之间多破坏几次兼容性,直到宣布测试版。正因为如此,你应该明确地依赖一个小版本。比如说</target>
        </trans-unit>
        <trans-unit id="9d7cd62b4cca86287dfc6d8d17a3b3d532dc71f3" translate="yes" xml:space="preserve">
          <source>Nanaimo is designed to enable testing of software-defined, physical components in isolation to
provide pre-integration verification of software interfaces and behavioral contracts. It adapts
asynchronous control and monitoring of these components to fit familiar testing idioms
(e.g. x-unit testing) using the popular python test framework, &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;.</source>
          <target state="translated">Nanaimo旨在隔离测试软件定义的物理组件，以提供对软件接口和行为合同的预集成验证。它使用流行的python测试框架&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;，对这些组件进行异步控制和监视，以适应熟悉的测试习惯（例如x-unit测试）。</target>
        </trans-unit>
        <trans-unit id="ab972799d0dfd1ccd4227b35e29e69093098ded9" translate="yes" xml:space="preserve">
          <source>Nanaimo is named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Nanaimo_bar&quot;&gt;Nanaimo bars&lt;/a&gt; which are about the best things humans have ever invented.</source>
          <target state="translated">Nanaimo的名字以&lt;a href=&quot;https://en.wikipedia.org/wiki/Nanaimo_bar&quot;&gt;Nanaimo的酒吧&lt;/a&gt;命名，这是人类发明过的最好的东西。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Noot:</target>
        </trans-unit>
        <trans-unit id="d03acb6e4ba3216844800c042f62673952a7e510" translate="yes" xml:space="preserve">
          <source>This design is an amalgam of the &lt;a href=&quot;https://www.youtube.com/watch?v=0BSaI117ITI&quot;&gt;TLYF&lt;/a&gt; (Test Like You Fly) methodology and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Swiss_cheese_model&quot;&gt;Swiss cheese&lt;/a&gt; model of
failure analysis. Specifically; Nanaimo facilitates testing on actual or representative hardware
for the first integration of software into a part or subassembly. Traditionally software engineers were
responsible only for unit-testing and Software-In-the-Loop (SIL) simulation of their code. Nanaimo encourages
software engineers to also provide hardware integration tests by enabling Hardware-In-the-Loop
&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous-integration&lt;/a&gt; (HIL-CI, perhaps?).</source>
          <target state="translated">此设计是&lt;a href=&quot;https://www.youtube.com/watch?v=0BSaI117ITI&quot;&gt;TLYF&lt;/a&gt;（像您一样飞行测试）方法学和故障分析的&lt;a href=&quot;https://en.wikipedia.org/wiki/Swiss_cheese_model&quot;&gt;瑞士奶酪&lt;/a&gt;模型的混合物。特别; Nanaimo有助于在实际或具有代表性的硬件上进行测试，以便将软件首次集成到零件或部件中。传统上，软件工程师仅负责其代码的单元测试和软件在环（SIL）仿真。Nanaimo鼓励软件工程师通过启用硬件在环&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;持续集成&lt;/a&gt;（也许是HIL-CI）来提供硬件集成测试 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
