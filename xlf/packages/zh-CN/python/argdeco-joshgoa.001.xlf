<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/argdeco-joshgoa/">
    <body>
      <group id="argdeco-joshgoa">
        <trans-unit id="a7f18b66ff596d1e271735d1f9916cb0e1c7d04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: The &lt;em&gt;EXACT&lt;/em&gt; same decorating order as regular argparse &lt;em&gt;MUST&lt;/em&gt; be respected</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：在&lt;em&gt;EXACT&lt;/em&gt;相同的装潢为了定期argparse &lt;em&gt;必须&lt;/em&gt;得到尊重</target>
        </trans-unit>
        <trans-unit id="5b8427a6940f118f708778630446a3e62d1c1366" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ardeco.add_mutually_exclusive_group&lt;/strong&gt;(required=False)</source>
          <target state="translated">&lt;strong&gt;ardeco.add_mutually_exclusive_group&lt;/strong&gt;（必填= False）</target>
        </trans-unit>
        <trans-unit id="5c1196d1aca5f7983150193877f48a6c116e2695" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argdeco.add_argument&lt;/strong&gt;(name or flags..., group=None, [, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</source>
          <target state="translated">&lt;strong&gt;argdeco.add_argument&lt;/strong&gt;（名称或标志...，group = None，[，操作] [，nargs] [，const] [，默认] [，类型] [，选择] [，必填] [，帮助] [，metavar ] [，dest]）</target>
        </trans-unit>
        <trans-unit id="1eb2cb893c805042d68f7016b34e3cc95ace2363" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argdeco.add_argument_group&lt;/strong&gt;(title=None, description=None)</source>
          <target state="translated">&lt;strong&gt;argdeco.add_argument_group&lt;/strong&gt;（标题=无，描述=无）</target>
        </trans-unit>
        <trans-unit id="b5a88ebdcded36dd74d801dad7f9001d907906d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argdeco.add_subparsers&lt;/strong&gt;(wrapped=None, [title][, description][, prog][, parser_class][, action][, option_string][, dest][, required][, help][, metavar])</source>
          <target state="translated">&lt;strong&gt;argdeco.add_subparsers&lt;/strong&gt;（包装=无，[title] [，description] [，prog] [，parser_class] [，action] [，option_string] [，dest] [，必填] [，help] [，metavar]）</target>
        </trans-unit>
        <trans-unit id="e315888d47add042b209cca861510ab33022a2a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argdeco.argument_parser&lt;/strong&gt;(wrapped=None, parser_class=argparse.ArgumentParser, ctx=False, prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=&quot;-&quot;, fromfile_prefix_chars=None, argument_default=None, conflict_handler=&quot;error&quot;, add_help=True, allow_abbrev=True)</source>
          <target state="translated">&lt;strong&gt;argdeco.argument_parser&lt;/strong&gt;（包装=无，parser_class = argparse.ArgumentParser，ctx = False，prog =无，用法=无，描述=无，epilog =无，父母= []，formatter_class = argparse.HelpFormatter，prefix_chars =&amp;ldquo;-&amp;rdquo; ，fromfile_prefix_chars = None，arguments_default = None，flict_handler =&amp;ldquo; error&amp;rdquo;，add_help = True，allow_abbrev = True）</target>
        </trans-unit>
        <trans-unit id="110f5501b8a8b1e1e498eb41bc9c0e33fc8986c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argdeco&lt;/strong&gt; does &lt;em&gt;NOT&lt;/em&gt; override decorated functions so that they can be accessed by the user easily if needed. In order to access the &lt;strong&gt;argparse&lt;/strong&gt; context or parser instance, it is recommended to use context forwarding.</source>
          <target state="translated">&lt;strong&gt;argdeco&lt;/strong&gt;不会&lt;em&gt;不&lt;/em&gt;覆盖装饰功能，使它们可以使用户很容易在需要时访问。为了访问&lt;strong&gt;argparse&lt;/strong&gt;上下文或解析器实例，建议使用上下文转发。</target>
        </trans-unit>
        <trans-unit id="c5b8781a2e0f49608d24254388ed0a9538345f59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argdeco&lt;/strong&gt; supports class callback method decoration, unlike the big majority of CLI decorator libraries, without any difference as regular callback callable decoration.</source>
          <target state="translated">&lt;strong&gt;argdeco&lt;/strong&gt;支持类回调方法修饰，这与大多数CLI装饰器库不同，它与常规回调可调用修饰没有任何区别。</target>
        </trans-unit>
        <trans-unit id="89c25a6e98b7d12432623429744aea6cf501424a" translate="yes" xml:space="preserve">
          <source>API reference</source>
          <target state="translated">API参考</target>
        </trans-unit>
        <trans-unit id="e9aa1070458c71e8dfa7843126288e26142d4365" translate="yes" xml:space="preserve">
          <source>Accessing attributes</source>
          <target state="translated">访问属性</target>
        </trans-unit>
        <trans-unit id="5126940d744a6dff391a643edf858b06f00785ed" translate="yes" xml:space="preserve">
          <source>Advanced usage</source>
          <target state="translated">高级用法</target>
        </trans-unit>
        <trans-unit id="f06703d4ee169a2df88810906ccf6cb1a4741ea9" translate="yes" xml:space="preserve">
          <source>By default, ArgumentParser groups command-line arguments into &amp;ldquo;positional arguments&amp;rdquo; and &amp;ldquo;optional arguments&amp;rdquo; when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method:</source>
          <target state="translated">默认情况下，在显示帮助消息时，ArgumentParser将命令行参数分为&amp;ldquo;位置参数&amp;rdquo;和&amp;ldquo;可选参数&amp;rdquo;。如果参数的概念分组比此默认参数更好，则可以使用add_argument_group（）方法创建适当的组：</target>
        </trans-unit>
        <trans-unit id="6038979db56bf75b5b4a45ad68227c2545616e28" translate="yes" xml:space="preserve">
          <source>Class callback method context or parser instance forwarding is still respected on decorated class methods.</source>
          <target state="translated">类回调方法上下文或解析器实例转发在被装饰的类方法上仍然被尊重。</target>
        </trans-unit>
        <trans-unit id="d3761d64d52b354057683284a19bff79ad2ff2bb" translate="yes" xml:space="preserve">
          <source>Class method decoration</source>
          <target state="translated">类方法装饰</target>
        </trans-unit>
        <trans-unit id="c7e15bfc847aa9f34a9a600d7630ac9de4d5634e" translate="yes" xml:space="preserve">
          <source>Context forwarding</source>
          <target state="translated">上下文转发</target>
        </trans-unit>
        <trans-unit id="0b38454212aed7e51006cd7ebccd502bc3fcd9b0" translate="yes" xml:space="preserve">
          <source>Create a new ArgumentParser object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are:</source>
          <target state="translated">创建一个新的ArgumentParser对象。所有的参数都应该以关键字参数的形式传递。每个参数在下面都有自己更详细的描述,但简而言之就是。</target>
        </trans-unit>
        <trans-unit id="645a41729eae20ef920e713b9fa58f18d5313a56" translate="yes" xml:space="preserve">
          <source>Decorated callback callables can get access to the &lt;strong&gt;argparse&lt;/strong&gt; context or parser instance.</source>
          <target state="translated">装饰的回调可调用对象可以访问&lt;strong&gt;argparse&lt;/strong&gt;上下文或解析器实例。</target>
        </trans-unit>
        <trans-unit id="2b9b1d323a6d34cd45b93a2493527fb4444468f8" translate="yes" xml:space="preserve">
          <source>Decorating a class will forward the arguments to the &lt;em&gt;__init__&lt;/em&gt; method (usually not the desired behaviour), as decorated callbacks will &lt;em&gt;ALWAYS&lt;/em&gt; be treated as callables.</source>
          <target state="translated">装饰一个类会将参数转发给&lt;em&gt;__init__&lt;/em&gt;方法（通常不是所需的行为），因为修饰的回调将&lt;em&gt;始终&lt;/em&gt;被视为可调用的。</target>
        </trans-unit>
        <trans-unit id="3038dd2489869ab5fbcdd8c3bf1ac9ef78d03566" translate="yes" xml:space="preserve">
          <source>Decorating the &lt;em&gt;__call__&lt;/em&gt; method will forward the arguments to the class itself, following standard decorator usage as specified by &lt;a href=&quot;https://wrapt.readthedocs.io/en/latest/decorators.html#decorating-class-methods&quot;&gt;wrapt&lt;/a&gt;.</source>
          <target state="translated">装饰&lt;em&gt;__call__&lt;/em&gt;方法提出的论据类本身，由指定的以下标准的装饰用途&lt;a href=&quot;https://wrapt.readthedocs.io/en/latest/decorators.html#decorating-class-methods&quot;&gt;缠住了&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ea4c81be540a9da7d64fcb6c25f2d35c8309048" translate="yes" xml:space="preserve">
          <source>Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are:</source>
          <target state="translated">定义单个命令行参数的解析方式。下面每个参数都有自己更详细的描述,但简而言之,它们是。</target>
        </trans-unit>
        <trans-unit id="09dac122e8953867260f1e16deb240632cdc29cd" translate="yes" xml:space="preserve">
          <source>Description of parameters:</source>
          <target state="translated">参数说明:</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="8ad3d736ba19e67c41d72812f96929fff3fbe2d1" translate="yes" xml:space="preserve">
          <source>Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout, svn update, and svn commit. Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports the creation of such sub-commands with the add_subparsers() method. The add_subparsers() method is normally called with no arguments and returns a special action object. This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual.</source>
          <target state="translated">许多程序将它们的功能分割成许多子命令,例如,svn程序可以调用svn checkout、svn update和svn commit等子命令。当一个程序执行多个不同的功能,而这些功能又需要不同的命令行参数时,这样拆分功能是一个特别好的主意。ArgumentParser支持使用add_subparsers()方法创建这样的子命令。add_subparsers()方法通常在没有参数的情况下被调用,并返回一个特殊的操作对象。这个对象有一个单一的方法add_parser(),它接收一个命令名和任何ArgumentParser构造函数参数,并返回一个ArgumentParser对象,这个对象可以像平常一样被修改。</target>
        </trans-unit>
        <trans-unit id="0a578cd592bdce36ffc58256bcb20bca416915a8" translate="yes" xml:space="preserve">
          <source>The installation into a &lt;a href=&quot;https://github.com/pypa/virtualenv&quot;&gt;virtualenv&lt;/a&gt; (or &lt;a href=&quot;https://github.com/pypa/pipenv&quot;&gt;pipenv&lt;/a&gt;) is heavily recommended.</source>
          <target state="translated">强烈建议将其安装到&lt;a href=&quot;https://github.com/pypa/virtualenv&quot;&gt;virtualenv&lt;/a&gt;（或&lt;a href=&quot;https://github.com/pypa/pipenv&quot;&gt;pipenv&lt;/a&gt;）中。</target>
        </trans-unit>
        <trans-unit id="0613a0ecff9361d38f97cba660e8938737cb4379" translate="yes" xml:space="preserve">
          <source>There are so many libraries out there for writing command line utilities; why does &lt;strong&gt;argdeco&lt;/strong&gt; exist?</source>
          <target state="translated">有太多的库可以编写命令行实用程序。为什么&lt;strong&gt;argdeco&lt;/strong&gt;存在？</target>
        </trans-unit>
        <trans-unit id="a463c569e85538f2350685a8e3592be18c41cb06" translate="yes" xml:space="preserve">
          <source>This question is easy to answer: because there is not a single command line utility for Python out there which ticks the following boxes: (&lt;a href=&quot;https://click.palletsprojects.com/en/7.x/why/&quot;&gt;sound familiar?&lt;/a&gt;)</source>
          <target state="translated">这个问题很容易回答：因为那里没有一个适用于Python的命令行实用工具，可以在以下方框中打勾：（&lt;a href=&quot;https://click.palletsprojects.com/en/7.x/why/&quot;&gt;听起来很熟悉？&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="bd35682e13c89e4579b11121d5e8c193aa5bdee8" translate="yes" xml:space="preserve">
          <source>Unopinionated argparse wrapper</source>
          <target state="translated">无主见的argparse包装器。</target>
        </trans-unit>
        <trans-unit id="6cc9119157ed9d1605ab58e82ba549461e8941fd" translate="yes" xml:space="preserve">
          <source>Why &lt;strong&gt;argdeco&lt;/strong&gt;?</source>
          <target state="translated">为什么选择&lt;strong&gt;argdeco&lt;/strong&gt;？</target>
        </trans-unit>
        <trans-unit id="7fd33a09827ea0f06465a11f07fb181684d743c2" translate="yes" xml:space="preserve">
          <source>You can get the library directly from PyPI:</source>
          <target state="translated">你可以直接从PyPI获得该库。</target>
        </trans-unit>
        <trans-unit id="91b57573ae4fae8abe7f04f23341b760821f296e" translate="yes" xml:space="preserve">
          <source>action - The basic type of action to be taken when this argument is encountered at the command line.</source>
          <target state="translated">action-在命令行中遇到这个参数时,要采取的基本行动类型。</target>
        </trans-unit>
        <trans-unit id="0f62c1f0377daf7ece6f9e7f5cdf59801458b804" translate="yes" xml:space="preserve">
          <source>action - the basic type of action to be taken when this argument is encountered at the command line</source>
          <target state="translated">action-当在命令行中遇到这个参数时,要采取的基本行动类型。</target>
        </trans-unit>
        <trans-unit id="6dcb61ff42dee9d36d4e0deea99a2c303ae92006" translate="yes" xml:space="preserve">
          <source>add_help - Add a -h/--help option to the parser (default: True)</source>
          <target state="translated">add_help-在解析器中添加-h/--help选项(默认:True)。</target>
        </trans-unit>
        <trans-unit id="005609e28f949056739115329cc24b6a08c6ec57" translate="yes" xml:space="preserve">
          <source>allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True)</source>
          <target state="translated">allow_abbrev-如果缩写不明确,允许将长选项缩写。(默认:True)</target>
        </trans-unit>
        <trans-unit id="913621c0db72e453062525c100abde3086ea911b" translate="yes" xml:space="preserve">
          <source>argdeco</source>
          <target state="translated">辩证法</target>
        </trans-unit>
        <trans-unit id="0e70ba91954cab2900f6430cdff6f630d32422e5" translate="yes" xml:space="preserve">
          <source>argument_default - The global default value for arguments (default: None)</source>
          <target state="translated">argument_default-参数的全局默认值(默认:无)。</target>
        </trans-unit>
        <trans-unit id="f36fd2fd01ada64c5b9dce774867f15f9aab31c5" translate="yes" xml:space="preserve">
          <source>choices - A container of the allowable values for the argument.</source>
          <target state="translated">choices-参数允许值的容器。</target>
        </trans-unit>
        <trans-unit id="03c15d5dc6bc8764e953a645657d2c20561e0163" translate="yes" xml:space="preserve">
          <source>conflict_handler - The strategy for resolving conflicting optionals (usually unnecessary)</source>
          <target state="translated">conflict_handler-解决冲突选项的策略(通常不需要)。</target>
        </trans-unit>
        <trans-unit id="ef8dffc588d64927429aa17a280e375a45c3c226" translate="yes" xml:space="preserve">
          <source>const - A constant value required by some action and nargs selections.</source>
          <target state="translated">const-一些动作和nargs选择所需的常量值。</target>
        </trans-unit>
        <trans-unit id="7d466698be17ab196f643a9e432a397997562a47" translate="yes" xml:space="preserve">
          <source>ctx - Pass the &lt;strong&gt;argparse&lt;/strong&gt; context or parser instance to the callback callable (default: False)</source>
          <target state="translated">ctx-将&lt;strong&gt;argparse&lt;/strong&gt;上下文或解析器实例传递给可调用的回调（默认值：False）</target>
        </trans-unit>
        <trans-unit id="15c254be539b07fb2fe66395f9fd3afa16d98cf7" translate="yes" xml:space="preserve">
          <source>default - The value produced if the argument is absent from the command line.</source>
          <target state="translated">default-在命令行中没有参数时产生的值。</target>
        </trans-unit>
        <trans-unit id="79d322772a51c7eccf8756f2e330b72c53a112af" translate="yes" xml:space="preserve">
          <source>description - Text to display before the argument help (default: &lt;strong&gt;doc&lt;/strong&gt;)</source>
          <target state="translated">description-在参数帮助前显示的文本（默认值：&lt;strong&gt;doc&lt;/strong&gt;）</target>
        </trans-unit>
        <trans-unit id="4881098dafaf49a485b9fc71ad1aad0fcf1ec856" translate="yes" xml:space="preserve">
          <source>description - description for the sub-parser group in help output, by default None</source>
          <target state="translated">description-在帮助输出中对子解析器组的描述,默认为None。</target>
        </trans-unit>
        <trans-unit id="132b39dd0926992034f613a25650ced45f23c21e" translate="yes" xml:space="preserve">
          <source>dest - The name of the attribute to be added to the object returned by parse_args().</source>
          <target state="translated">dest-要添加到parse_args()返回的对象中的属性名称。</target>
        </trans-unit>
        <trans-unit id="c98db1ffd87dbb84085dc20c0e6a25c04515d449" translate="yes" xml:space="preserve">
          <source>dest - name of the attribute under which sub-command name will be stored; by default None and no value is stored</source>
          <target state="translated">dest-存储子命令名称的属性名称,默认为None,不存储任何值。</target>
        </trans-unit>
        <trans-unit id="580c20fd848bbd1774ef01e5b5586da9bb62fe04" translate="yes" xml:space="preserve">
          <source>epilog - Text to display after the argument help (default: none)</source>
          <target state="translated">epilog-在参数帮助后显示的文本(默认:无)。</target>
        </trans-unit>
        <trans-unit id="d386788fca86677d0109d8e5f32e3f708fb6bdae" translate="yes" xml:space="preserve">
          <source>formatter_class - A class for customizing the help output</source>
          <target state="translated">formatter_class-一个用于自定义帮助输出的类。</target>
        </trans-unit>
        <trans-unit id="05e2e36e44acc9367918b0f1aed96d54da408354" translate="yes" xml:space="preserve">
          <source>fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read (default: None)</source>
          <target state="translated">fromfile_prefix_chars-用于读取附加参数的文件前缀的字符集(默认:无)。</target>
        </trans-unit>
        <trans-unit id="255b2262e7f425029e08f05ffa36c26faf409c21" translate="yes" xml:space="preserve">
          <source>group - The group to add the argument. (default: None)</source>
          <target state="translated">group-要添加参数的组。(默认:无)</target>
        </trans-unit>
        <trans-unit id="f4388b5b008d69888b29e9dcb12de8640ddad9c6" translate="yes" xml:space="preserve">
          <source>help - A brief description of what the argument does.</source>
          <target state="translated">help-简要说明该参数的作用。</target>
        </trans-unit>
        <trans-unit id="250387d77f25799607da225c81e082afe9e69906" translate="yes" xml:space="preserve">
          <source>help - help for sub-parser group in help output, by default None</source>
          <target state="translated">help-帮助输出中对子解析器组的帮助,默认为无。</target>
        </trans-unit>
        <trans-unit id="20580895dc6a57ece54def68c7f001aceb201ca3" translate="yes" xml:space="preserve">
          <source>metavar - A name for the argument in usage messages.</source>
          <target state="translated">metavar-使用信息中参数的名称。</target>
        </trans-unit>
        <trans-unit id="27addbe397aeb18137197b024adf84c96d811e65" translate="yes" xml:space="preserve">
          <source>metavar - string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..}</source>
          <target state="translated">metavar-在帮助中显示可用的子命令的字符串,默认为None,以{cmd1,cmd2,...}的形式显示子命令。</target>
        </trans-unit>
        <trans-unit id="a8e76d4a65f55c18078c9181a9dc398f6ef72bff" translate="yes" xml:space="preserve">
          <source>name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.</source>
          <target state="translated">name或flags-名称或选项字符串列表,例如foo或-f,-foo。</target>
        </trans-unit>
        <trans-unit id="e86ecb01b3ea8ebc38d4b97bf72d74b887fdabce" translate="yes" xml:space="preserve">
          <source>nargs - The number of command-line arguments that should be consumed.</source>
          <target state="translated">nargs-应该消耗的命令行参数的数量。</target>
        </trans-unit>
        <trans-unit id="f600f5f91b5997d8f126d20c1c3cc54cf427f7c2" translate="yes" xml:space="preserve">
          <source>parents - A list of ArgumentParser objects whose arguments should also be included</source>
          <target state="translated">parents-一个ArgumentParser对象的列表,这些对象的参数也应该被包含在内。</target>
        </trans-unit>
        <trans-unit id="af0155dba0f70844d8be294bb74bf2a256f57f22" translate="yes" xml:space="preserve">
          <source>parser_class - The class to instantiate the parser (default: argparse.ArgumentParser)</source>
          <target state="translated">parser_class-要实例化解析器的类(默认:argparse.ArgumentParser)。</target>
        </trans-unit>
        <trans-unit id="66a8e4ab807a3068f427103cd3859ae953863a36" translate="yes" xml:space="preserve">
          <source>parser_class - class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser)</source>
          <target state="translated">parser_class-用于创建子解析器实例的类,默认为当前解析器的类 (例如 ArgumentParser)</target>
        </trans-unit>
        <trans-unit id="9276bf97b120d6475223088f07c0888abdea6c5b" translate="yes" xml:space="preserve">
          <source>prefix_chars - The set of characters that prefix optional arguments (default: &quot;-&quot;)</source>
          <target state="translated">prefix_chars-可选参数前的字符集(默认:&quot;-&quot;)。</target>
        </trans-unit>
        <trans-unit id="a8988ae12fb0997451ba9d150871f427e4105bb0" translate="yes" xml:space="preserve">
          <source>prog - The name of the program (default: sys.argv[0])</source>
          <target state="translated">prog-程序的名称 (默认值:sys.argv[0])</target>
        </trans-unit>
        <trans-unit id="ae26143d33c9a0822ee23df3faaa9bd9f1b98adc" translate="yes" xml:space="preserve">
          <source>prog - usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument</source>
          <target state="translated">prog-将通过子命令帮助显示的使用信息,默认情况下,程序的名称和子命令参数前的任何位置性参数</target>
        </trans-unit>
        <trans-unit id="cae819f1f59b40cf42ec0206828a41f33a10ce1f" translate="yes" xml:space="preserve">
          <source>required - Whether or not a subcommand must be provided, by default False (added in 3.7)</source>
          <target state="translated">required-是否必须提供一个子命令,默认为False(在3.7中添加)</target>
        </trans-unit>
        <trans-unit id="56402d5511c6a2455803525df0b18682dadf54e8" translate="yes" xml:space="preserve">
          <source>required - Whether or not the command-line option may be omitted (optionals only).</source>
          <target state="translated">required-是否可以省略命令行选项(仅选项)。</target>
        </trans-unit>
        <trans-unit id="9c24ef0deb8e512ae7ff3e432925ddf6367d58a4" translate="yes" xml:space="preserve">
          <source>shares the &lt;em&gt;EXACT&lt;/em&gt; same API as &lt;strong&gt;argparse&lt;/strong&gt; using decorators</source>
          <target state="translated">股票&lt;em&gt;EXACT&lt;/em&gt;相同的API &lt;strong&gt;argparse&lt;/strong&gt;使用装饰</target>
        </trans-unit>
        <trans-unit id="e3d31e1394f8d3b448561e71ba4a2d6178fdaacd" translate="yes" xml:space="preserve">
          <source>supports callback callable instance binding with &lt;strong&gt;argparse&lt;/strong&gt; context or parser instance forwarding</source>
          <target state="translated">支持带有&lt;strong&gt;argparse&lt;/strong&gt;上下文或解析器实例转发的回调可调用实例绑定</target>
        </trans-unit>
        <trans-unit id="710b9d92ee06c7e707c588e057074a5389c5820f" translate="yes" xml:space="preserve">
          <source>supports class callback method decoration and method instance binding with class instance forwarding (thank you &lt;a href=&quot;https://github.com/GrahamDumpleton&quot;&gt;Graham Dumpleton&lt;/a&gt; for &lt;a href=&quot;https://github.com/GrahamDumpleton/wrapt&quot;&gt;wrapt&lt;/a&gt;!)</source>
          <target state="translated">支持类回调方法装饰和方法实例与类的实例转发绑定（谢谢你，&lt;a href=&quot;https://github.com/GrahamDumpleton&quot;&gt;格雷厄姆邓普尔顿&lt;/a&gt;的&lt;a href=&quot;https://github.com/GrahamDumpleton/wrapt&quot;&gt;缠住了&lt;/a&gt;！）</target>
        </trans-unit>
        <trans-unit id="686c12c6e2e8fcd4dcff231dfa1cb660b410b9e4" translate="yes" xml:space="preserve">
          <source>title - title for the sub-parser group in help output; by default &amp;ldquo;subcommands&amp;rdquo; if description is provided, otherwise uses title for positional arguments</source>
          <target state="translated">title-帮助输出中的子解析器组的标题；默认情况下，如果提供了描述，则为&amp;ldquo;子命令&amp;rdquo;，否则将标题用作位置参数</target>
        </trans-unit>
        <trans-unit id="8a9de5198521fc780d0bedea49cfc46054bb885b" translate="yes" xml:space="preserve">
          <source>type - The type to which the command-line argument should be converted.</source>
          <target state="translated">type-命令行参数应转换为的类型。</target>
        </trans-unit>
        <trans-unit id="5d04ba015d06eb10afbbc2602bd53c84d1f5cd86" translate="yes" xml:space="preserve">
          <source>usage - The string describing the program usage (default: generated from arguments added to parser)</source>
          <target state="translated">usage-描述程序用法的字符串(默认情况下:从添加到解析器的参数中生成)。</target>
        </trans-unit>
        <trans-unit id="27b2990f4ef44e7d22e2448c29644f50b652da7c" translate="yes" xml:space="preserve">
          <source>wrapped - The callback callable (default: None)</source>
          <target state="translated">wrapped-可调用的回调(默认:None)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
