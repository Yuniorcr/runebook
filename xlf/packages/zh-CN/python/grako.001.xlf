<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/grako/">
    <body>
      <group id="grako">
        <trans-unit id="4784be16436864f71cc9672f745adebbe734a561" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;Dennis Ritchie&lt;/a&gt; (1941-2011)</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;丹尼斯&amp;middot;里奇&lt;/a&gt;（1941-2011）</target>
        </trans-unit>
        <trans-unit id="d33ab16238e758409a4929d3e0d4d79170dccce6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; is a great language for working with language parsing and translation.</source>
          <target state="translated">&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;是用于语言解析和翻译的出色语言。</target>
        </trans-unit>
        <trans-unit id="9173c79f634b5c1ee5c5a3f6a450c82857535ff3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;At least for the people who send me mail about a new language that they&amp;rsquo;re designing, the general advice is: do it to learn about how to write a compiler. Don&amp;rsquo;t have any expectations that anyone will use it, unless you hook up with some sort of organization in a position to push it hard. It&amp;rsquo;s a lottery, and some can buy a lot of the tickets. There are plenty of beautiful languages (more beautiful than C) that didn&amp;rsquo;t catch on. But someone does win the lottery, and doing a language at least teaches you something.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;至少对于给我发送有关他们正在设计的新语言的邮件的人，一般建议是：这样做是为了了解如何编写编译器。不要期望任何人会使用它，除非您与某种类型的组织建立联系以努力推动它。这是彩票，有些人可以买很多票。有许多流行的美丽语言（比C更美丽）没有流行。但是有人确实赢得了彩票，并且至少讲一种语言会教给您一些东西。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9cd32f9a64f66e3f1e92f2d3295a021d9250efa8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Positive and negative lookaheads&lt;/em&gt;, and the &lt;em&gt;cut&lt;/em&gt; element (with its cleaning of the memoization cache) allow for additional, hand-crafted optimizations at the grammar level.</source>
          <target state="translated">&lt;em&gt;正向和负向前瞻&lt;/em&gt;以及&lt;em&gt;cut&lt;/em&gt;元素（通过清理内存缓存）可以在语法级别进行其他手工优化。</target>
        </trans-unit>
        <trans-unit id="3451857826106f627f426aedc8a1625020f56def" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; (for &lt;em&gt;grammar compiler&lt;/em&gt;) is a tool that takes grammars in a variation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt; as input, and outputs &lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoizing&lt;/a&gt; (&lt;a href=&quot;http://bford.info/packrat/&quot;&gt;Packrat&lt;/a&gt;) &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parsers in &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;（对于&lt;em&gt;语法编译器&lt;/em&gt;）是一种工具，发生在的变化语法&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt;作为输入，并输出&lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoizing&lt;/a&gt;（&lt;a href=&quot;http://bford.info/packrat/&quot;&gt;Packrat&lt;/a&gt;）&lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt;解析器&lt;a href=&quot;http://python.org&quot;&gt;的Python&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="96d115f7edccd957024570c7f59eb004a1abbc54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; can also compile a grammar stored in a string into a</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;还可以将存储在字符串中的语法编译为</target>
        </trans-unit>
        <trans-unit id="5e252d8adf9f8d7f679f07a346459bc97962fdb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; is &lt;em&gt;different&lt;/em&gt; from other &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parser generators:</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;是&lt;em&gt;不同&lt;/em&gt;与其他&lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt;解析器生成器：</target>
        </trans-unit>
        <trans-unit id="cae77d5bd2e58e1ae20d3dd7dee10a10a9c037c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; is feature-complete and currently being used with complex grammars to parse, analyze, and translate hundreds of thousands of lines of input text, including source code in several programming languages.</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;具有完整的功能，目前正与复杂的语法一起使用，以分析，分析和翻译成千上万行输入文本，包括多种编程语言的源代码。</target>
        </trans-unit>
        <trans-unit id="18f89b63e0d8d958e85ae07f9fe7bdd6c944757a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; was created to address some recurring problems encountered over decades of working with parser generation tools:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;创建&lt;strong&gt;Grako的目的&lt;/strong&gt;是解决使用解析器生成工具数十年来遇到的一些反复出现的问题：</target>
        </trans-unit>
        <trans-unit id="b5ce5decf77605100580ce22e928c0123812aa93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;em&gt;DEVELOPMENT OF GRAKO HAS STOPPED&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;&lt;em&gt;GRAKO的开发已停止&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e298f9b741ca46826580289e198d319f2582e58" translate="yes" xml:space="preserve">
          <source>Automatic generation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;Abstract Syntax Trees&lt;/a&gt; and Object Models, along with &lt;em&gt;Model Walkers&lt;/em&gt; and &lt;em&gt;Code Generators&lt;/em&gt; make analysis and translation approachable</source>
          <target state="translated">自动生成&lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;抽象语法树&lt;/a&gt;和对象模型，以及&lt;em&gt;模型遍历器&lt;/em&gt;和&lt;em&gt;代码生成器，&lt;/em&gt;使分析和翻译变得&lt;em&gt;容易&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8aa57de6dce6ee1c35c6aba7426503281876b258" translate="yes" xml:space="preserve">
          <source>Changes</source>
          <target state="translated">变化</target>
        </trans-unit>
        <trans-unit id="3d7268de642e81fe33fc02c6192b5394b70af1fb" translate="yes" xml:space="preserve">
          <source>Creator of the &lt;a href=&quot;http://en.wikipedia.org/wiki/C_language&quot;&gt;C&lt;/a&gt; programming language and of &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unix&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/C_language&quot;&gt;C&lt;/a&gt;编程语言和&lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unix的&lt;/a&gt;创建者</target>
        </trans-unit>
        <trans-unit id="0cc53949dbf52cda6c9c708fa39f2c4e03372552" translate="yes" xml:space="preserve">
          <source>Delegation to &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; module for &lt;em&gt;lexemes&lt;/em&gt; allows for (&lt;a href=&quot;http://www.perl.org/&quot;&gt;Perl&lt;/a&gt;-like) powerful and efficient lexical analysis.</source>
          <target state="translated">组团&lt;a href=&quot;http://python.org&quot;&gt;的Python&lt;/a&gt;的&lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;重新&lt;/a&gt;用于模块&lt;em&gt;的词位&lt;/em&gt;允许（&lt;a href=&quot;http://www.perl.org/&quot;&gt;Perl的&lt;/a&gt;样）强大和高效的词法分析。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">文件资料</target>
        </trans-unit>
        <trans-unit id="681b8515024fa7916ec123b3549da902d51a6208" translate="yes" xml:space="preserve">
          <source>Generated parsers should be easy to read and debug by humans. Looking at the generated source code is sometimes the only way to find problems in a grammar, the semantic actions, or in the parser generator itself. It&amp;rsquo;s inconvenient to trust generated code that one cannot understand.</source>
          <target state="translated">生成的解析器应该易于人阅读和调试。有时，查看生成的源代码是查找语法，语义动作或解析器生成器本身中问题的唯一方法。信任人们无法理解的生成代码很不方便。</target>
        </trans-unit>
        <trans-unit id="76f845b11158ab0286548c14cec0c121d6bbd47d" translate="yes" xml:space="preserve">
          <source>Generated parsers use &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s very efficient exception-handling system to backtrack. &lt;strong&gt;Grako&lt;/strong&gt; generated parsers simply assert what must be parsed. There are no complicated &lt;em&gt;if-then-else&lt;/em&gt; sequences for decision making or backtracking. Memoization allows going over the same input sequence several times in linear time.</source>
          <target state="translated">生成的解析器使用&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;的非常有效的异常处理系统来回溯。&lt;strong&gt;Grako&lt;/strong&gt;生成的解析器仅声明必须解析的内容。没有复杂的&lt;em&gt;if-then-else&lt;/em&gt;序列用于决策或回溯。记忆允许在线性时间内多次遍历同一输入序列。</target>
        </trans-unit>
        <trans-unit id="18206f68d40065c1f40256be2b8dc8a21f41a464" translate="yes" xml:space="preserve">
          <source>Grako</source>
          <target state="translated">Grako</target>
        </trans-unit>
        <trans-unit id="6253aa0b0e4ccb4b5ac966af71e55203f6647a95" translate="yes" xml:space="preserve">
          <source>Grako takes a grammar in a variation of EBNF as input, and outputs a memoizing PEG/Packrat parser in Python.</source>
          <target state="translated">Grako 将 EBNF 变体中的语法作为输入,并在 Python 中输出一个备忘录化的 PEG/Packrat 解析器。</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">语法</target>
        </trans-unit>
        <trans-unit id="4a8046fe523970120912fccf857dbd6aca85ed64" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in the technology, or in future developments such as proper support for left recursion, then please follow the &lt;a href=&quot;https://pypi.python.org/pypi/tatsu&quot;&gt;Tatsu&lt;/a&gt; project.</source>
          <target state="translated">如果您对这项技术或未来的发展（例如对左递归的适当支持）感兴趣，请遵循&lt;a href=&quot;https://pypi.python.org/pypi/tatsu&quot;&gt;Tatsu&lt;/a&gt;项目。</target>
        </trans-unit>
        <trans-unit id="78c589e22d8a0b1fc429384f8cbc3ac1db8365ab" translate="yes" xml:space="preserve">
          <source>Include files, rule inheritance, and rule inclusion give &lt;strong&gt;Grako&lt;/strong&gt; grammars considerable expressive power.</source>
          <target state="translated">包含文件，规则继承和规则包含赋予&lt;strong&gt;Grako&lt;/strong&gt;语法相当大的表达能力。</target>
        </trans-unit>
        <trans-unit id="92bbdfa77d1a626bc85b41f02d51c64bfd2c18e7" translate="yes" xml:space="preserve">
          <source>It is easy to recruit help with knowledge about a mainstream programming language like &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;, but help is hard to find for working with complex grammar-description languages. &lt;strong&gt;Grako&lt;/strong&gt; grammars are in the spirit of a &lt;em&gt;Translators and Interpreters 101&lt;/em&gt; course (if something is hard to explain to a college student, it&amp;rsquo;s probably too complicated, or not well understood).</source>
          <target state="translated">利用诸如&lt;a href=&quot;http://python.org&quot;&gt;Python之&lt;/a&gt;类的主流编程语言的知识来招募帮助很容易，但是使用复杂的语法描述语言很难找到帮助。&lt;strong&gt;Grako&lt;/strong&gt;语法本着&amp;ldquo;&lt;em&gt;笔译和口译员101&amp;rdquo;&lt;/em&gt;课程的精神（如果很难向大学生解释某些内容，则它可能太复杂或无法很好理解）。</target>
        </trans-unit>
        <trans-unit id="02bb67e6cc89e14999f6a90a934010b7f7c13bdc" translate="yes" xml:space="preserve">
          <source>LL and LR grammars become contaminated with myriads of lookahead statements to deal with ambiguous constructs in the source language. &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parsers address ambiguity from the onset.</source>
          <target state="translated">LL和LR语法被无数先行陈述所污染，以处理源语言中的歧义构造。&lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt;解析器从一开始就解决了歧义。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="e796128e20dca9168d541e6b047b6047325e3780" translate="yes" xml:space="preserve">
          <source>Preprocessing (like dealing with includes, fixed column formats, or structure-through-indentation) belongs in well-designed program code; not in the grammar.</source>
          <target state="translated">预处理(如处理包含、固定列格式或结构通缩)属于设计良好的程序代码,而不是在语法中。</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">理由</target>
        </trans-unit>
        <trans-unit id="858be1680530539f957c139bee2bebf6eee8af08" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for details.</source>
          <target state="translated">有关详细信息，请参见&lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25d2be045a32363cbde1def910edb8f3e046e4dd" translate="yes" xml:space="preserve">
          <source>Semantic actions &lt;em&gt;do not&lt;/em&gt;  belong in a grammar. They create yet another programming language to deal with when doing parsing and translation: the source language, the grammar language, the semantics language, the generated parser&amp;rsquo;s language, and the translation&amp;rsquo;s target language. Most grammar parsers do not check the syntax of embedded semantic actions, so errors get reported at awkward moments, and against the generated code, not against the grammar.</source>
          <target state="translated">语义动作&lt;em&gt;不&lt;/em&gt; 属于语法。他们创建了另一种在解析和翻译时要处理的编程语言：源语言，语法语言，语义语言，生成的解析器语言和翻译的目标语言。大多数语法分析器不会检查嵌入式语义动作的语法，因此错误会在尴尬的时刻，针对生成的代码而不是针对语法报告错误。</target>
        </trans-unit>
        <trans-unit id="d6afa14e36dcba3c2e920822346be6dde11e35ba" translate="yes" xml:space="preserve">
          <source>Separating the grammar from the code that implements the semantics, and using a variation of a well-known grammar syntax (&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt;) allows for full declarative power in language descriptions. General-purpose programming languages are not up to the task.</source>
          <target state="translated">将语法与实现语义的代码分开，并使用众所周知的语法的变体（&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt;）可以在语言描述中发挥全面的声明能力。通用编程语言无法胜任这项工作。</target>
        </trans-unit>
        <trans-unit id="be662f8f9b0c089fe4bb6c790411386a0f4151c6" translate="yes" xml:space="preserve">
          <source>Some programming languages allow the use of &lt;em&gt;keywords&lt;/em&gt; as identifiers, or have different meanings for symbols depending on context (&lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;). A parser needs control of lexical analysis to be able to handle those languages.</source>
          <target state="translated">有些编程语言允许使用&lt;em&gt;关键字&lt;/em&gt;作为标识符，或者根据上下文（&lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;）对符号具有不同的含义。解析器需要对词法分析进行控制才能处理这些语言。</target>
        </trans-unit>
        <trans-unit id="6d09aa2b6d57d449611e9a1932f33d9572fa6d78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/README.md&quot;&gt;complete documentation&lt;/a&gt; is available at &lt;strong&gt;Grako&lt;/strong&gt;&amp;rsquo;s &lt;a href=&quot;https://bitbucket.org/neogeny/grako/&quot;&gt;home page&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/README.md&quot;&gt;完整的文档&lt;/a&gt;，请&lt;strong&gt;Grako&lt;/strong&gt;的&lt;a href=&quot;https://bitbucket.org/neogeny/grako/&quot;&gt;主页&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bf08bc76382ad0b914e5b8affbbf72d16c3e77dd" translate="yes" xml:space="preserve">
          <source>The only dependencies are on the &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; standard library, yet the &lt;a href=&quot;https://pypi.python.org/pypi/regex&quot;&gt;regex&lt;/a&gt; library will be used if installed, and &lt;a href=&quot;https://pypi.python.org/pypi/colorama/&quot;&gt;colorama&lt;/a&gt; will be used on trace output if available.  &lt;a href=&quot;https://pypi.python.org/pypi/pygraphviz&quot;&gt;pygraphviz&lt;/a&gt; is required for generating diagrams.</source>
          <target state="translated">唯一的依赖关系是在&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;标准库上，但是如果已安装则将使用&lt;a href=&quot;https://pypi.python.org/pypi/regex&quot;&gt;regex&lt;/a&gt;库，如果可用，将在跟踪输出上使用&lt;a href=&quot;https://pypi.python.org/pypi/colorama/&quot;&gt;colorama&lt;/a&gt;。 &lt;a href=&quot;https://pypi.python.org/pypi/pygraphviz&quot;&gt;pygraphviz&lt;/a&gt;是生成图所必需的。</target>
        </trans-unit>
        <trans-unit id="083a2119512e7c2fd127dfa7cdd816418ca95241" translate="yes" xml:space="preserve">
          <source>The parser generator, the run-time support, and the generated parsers have measurably low &lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;Cyclomatic complexity&lt;/a&gt;.  At around 5 &lt;a href=&quot;http://en.wikipedia.org/wiki/KLOC&quot;&gt;KLOC&lt;/a&gt; of &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;, it is possible to study all its source code in a single session.</source>
          <target state="translated">解析器生成器，运行时支持和生成的解析器具有可测量的低&lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;循环复杂度&lt;/a&gt;。在大约5 &lt;a href=&quot;http://en.wikipedia.org/wiki/KLOC&quot;&gt;KLOC&lt;/a&gt;的&lt;a href=&quot;http://python.org&quot;&gt;Python下&lt;/a&gt;，可以在一个会话中研究其所有源代码。</target>
        </trans-unit>
        <trans-unit id="b2fc2a23b30cf230f79e5698d481f48b0648e949" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;http://docs.python.org/2/library/contextlib.html&quot;&gt;context managers&lt;/a&gt; considerably reduces the size of the generated parsers for code clarity, and enhanced CPU-cache hits.</source>
          <target state="translated">使用&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;的&lt;a href=&quot;http://docs.python.org/2/library/contextlib.html&quot;&gt;上下文管理器可以&lt;/a&gt;极大地减少生成的解析器的大小，以提高代码的清晰度，并增强CPU缓存命中率。</target>
        </trans-unit>
        <trans-unit id="814155b159afb05e0e13696a70e7146843e9fa92" translate="yes" xml:space="preserve">
          <source>You may use &lt;strong&gt;Grako&lt;/strong&gt; under the terms of the &lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29&quot;&gt;BSD&lt;/a&gt;-style license described in the enclosed &lt;strong&gt;LICENSE.txt&lt;/strong&gt; file. &lt;em&gt;If your project requires different licensing&lt;/em&gt; please &lt;a href=&quot;mailto:apalala%40gmail.com&quot;&gt;email&lt;/a&gt;.</source>
          <target state="translated">您可以根据随附的&lt;strong&gt;LICENSE.txt&lt;/strong&gt;文件中所述的&lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29&quot;&gt;BSD&lt;/a&gt;样式许可的条款使用&lt;strong&gt;Grako&lt;/strong&gt;。&lt;em&gt;如果您的项目需要其他许可，&lt;/em&gt;请&lt;a href=&quot;mailto:apalala%40gmail.com&quot;&gt;发送电子邮件&lt;/a&gt;。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="509f2c59a959ba7aab427f88785cad273b2dedab" translate="yes" xml:space="preserve">
          <source>object that can be used to parse any given input, much like the &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; module does with regular expressions.</source>
          <target state="translated">可以用来解析任何给定输入的对象，就像&lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt;模块对正则表达式所做的一样。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
