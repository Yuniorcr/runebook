<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/pymarc/">
    <body>
      <group id="pymarc">
        <trans-unit id="6cccc90a9e4c5e3906b34cbcc33d00ac163bed77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSON&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebc3502c58b8d55fea91ccf75aaceeb4c9543560" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XML&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;XML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5dae37a1346bbd5125a6ccbfb2f409baf0f68af9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;pymarc.Record&lt;/code&gt; object has a few handy methods like &lt;code&gt;title&lt;/code&gt; for getting at
bits of a bibliographic record, others include: &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;isbn&lt;/code&gt;, &lt;code&gt;subjects&lt;/code&gt;,
&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;notes&lt;/code&gt;, &lt;code&gt;physicaldescription&lt;/code&gt;, &lt;code&gt;publisher&lt;/code&gt;, &lt;code&gt;pubyear&lt;/code&gt;, &lt;code&gt;issn&lt;/code&gt;,
&lt;code&gt;issn_title&lt;/code&gt;. But really, to work with MARC data you need to understand the
numeric field tags and subfield codes that are used to designate various bits
of information. There is a lot more hiding in a MARC record than these methods
provide access to. For example the &lt;code&gt;title&lt;/code&gt; method extracts the information from
the &lt;code&gt;245&lt;/code&gt; field, subfields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. You can access &lt;code&gt;245a&lt;/code&gt; like so:</source>
          <target state="translated">A &lt;code&gt;pymarc.Record&lt;/code&gt; object has a few handy methods like &lt;code&gt;title&lt;/code&gt; for getting at bits of a bibliographic record, others include: &lt;code&gt;author&lt;/code&gt; , &lt;code&gt;isbn&lt;/code&gt; , &lt;code&gt;subjects&lt;/code&gt; , &lt;code&gt;location&lt;/code&gt; , &lt;code&gt;notes&lt;/code&gt; , &lt;code&gt;physicaldescription&lt;/code&gt; , &lt;code&gt;publisher&lt;/code&gt; , &lt;code&gt;pubyear&lt;/code&gt; , &lt;code&gt;issn&lt;/code&gt; , &lt;code&gt;issn_title&lt;/code&gt; . But really, to work with MARC data you need to understand the numeric field tags and subfield codes that are used to designate various bits of information. There is a lot more hiding in a MARC record than these methods provide access to. For example the &lt;code&gt;title&lt;/code&gt; method extracts the information from the &lt;code&gt;245&lt;/code&gt; field, subfields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; . You can access &lt;code&gt;245a&lt;/code&gt; like so:</target>
        </trans-unit>
        <trans-unit id="dfe61712ece80ec5d6d821c2408097410ddfc961" translate="yes" xml:space="preserve">
          <source>Also, if you prefer you can pass in a file like object in addition to the path
to both &lt;em&gt;map_xml&lt;/em&gt; and &lt;em&gt;parse_xml_to_array&lt;/em&gt;:</source>
          <target state="translated">Also, if you prefer you can pass in a file like object in addition to the path to both &lt;em&gt;map_xml&lt;/em&gt; and &lt;em&gt;parse_xml_to_array&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="858dd2c84d6191765937fd3b826ec5a8279612f4" translate="yes" xml:space="preserve">
          <source>And then install:</source>
          <target state="translated">然后安装。</target>
        </trans-unit>
        <trans-unit id="f0fd204d09ee922b25df99e4223b80fb9117e442" translate="yes" xml:space="preserve">
          <source>Below are some common examples of how you might want to use pymarc. If
you run across an example that you think should be here please send a
pull request.</source>
          <target state="translated">以下是一些常见的例子,你可能想使用pymarc。如果你遇到一个你认为应该放在这里的例子,请发送一个pull request。</target>
        </trans-unit>
        <trans-unit id="7885692754b4ef05ed3a532810ef4fcc9f33435a" translate="yes" xml:space="preserve">
          <source>Here's an example of creating a record and writing it out to a file.</source>
          <target state="translated">下面是一个创建记录并将其写入文件的例子。</target>
        </trans-unit>
        <trans-unit id="4d1c780e027991c7084ed4fcd56ab9f0c844a718" translate="yes" xml:space="preserve">
          <source>If you are new to MARC fields &lt;a href=&quot;http://www.loc.gov/marc/umb/&quot;&gt;Understanding
MARC&lt;/a&gt; is a pretty good primer, and the &lt;a href=&quot;http://www.loc.gov/marc/marcdocz.html&quot;&gt;MARC 21
Formats&lt;/a&gt; page at the Library of Congress is a good reference once you understand the basics.</source>
          <target state="translated">If you are new to MARC fields &lt;a href=&quot;http://www.loc.gov/marc/umb/&quot;&gt;Understanding MARC&lt;/a&gt; is a pretty good primer, and the &lt;a href=&quot;http://www.loc.gov/marc/marcdocz.html&quot;&gt;MARC 21 Formats&lt;/a&gt; page at the Library of Congress is a good reference once you understand the basics.</target>
        </trans-unit>
        <trans-unit id="44d02b17d266725a3515af875df0ba0309197609" translate="yes" xml:space="preserve">
          <source>If you find yourself using MARC data a fair bit, and distributing it, you may
make other developers a bit happier by using the JSON or XML serializations. The
main benefit to using XML or JSON is that the UTF8 character encoding is used,
rather than the frustratingly archaic MARC8 encoding. Also they will be able to
use standard JSON and XML reading/writing tools to get at the data they want
instead of some crazy MARC processing library like, ahem, pymarc.</source>
          <target state="translated">如果你发现自己经常使用MARC数据,并将其分发,你可能会通过使用JSON或XML序列化来让其他开发者更开心一些。使用XML或JSON的主要好处是使用UTF8字符编码,而不是令人沮丧的陈旧的MARC8编码。另外,他们还可以使用标准的JSON和XML读/写工具来获取他们想要的数据,而不是一些疯狂的MARC处理库,比如,嗯,pymarc。</target>
        </trans-unit>
        <trans-unit id="fd70bf7333cfe1dede95b08fc52730360bc30f2a" translate="yes" xml:space="preserve">
          <source>If you have a large XML file and would rather not read them all into memory you
can:</source>
          <target state="translated">如果你有一个大的XML文件,而不愿意将它们全部读入内存,你可以。</target>
        </trans-unit>
        <trans-unit id="ddb131ae47f3e8a6de9c2af320d95231c330cf48" translate="yes" xml:space="preserve">
          <source>If you start working with MARC you may feel like you need moral support
in addition to technical support. The &lt;a&gt;#code4lib&lt;/a&gt;
channel on &lt;a href=&quot;http://freenode.net&quot;&gt;Freenode&lt;/a&gt; is a good place for both.</source>
          <target state="translated">If you start working with MARC you may feel like you need moral support in addition to technical support. The &lt;a&gt;#code4lib&lt;/a&gt; channel on &lt;a href=&quot;http://freenode.net&quot;&gt;Freenode&lt;/a&gt; is a good place for both.</target>
        </trans-unit>
        <trans-unit id="831c56c564414059bb69fda43a37f81aaba668a1" translate="yes" xml:space="preserve">
          <source>If you want to parse a file of MARCJSON records you can:</source>
          <target state="translated">如果你想解析一个MARCJSON记录的文件,你可以。</target>
        </trans-unit>
        <trans-unit id="233fb3a889ae0ac04805e032682a8e2791743ada" translate="yes" xml:space="preserve">
          <source>If you'd like to download and install the latest source you'll need git:</source>
          <target state="translated">如果你想下载并安装最新的源代码,你需要git。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="f88a38267021e4a1c57e7ba88e767440ccbc1740" translate="yes" xml:space="preserve">
          <source>JSON and XML</source>
          <target state="translated">JSON和XML</target>
        </trans-unit>
        <trans-unit id="a880931342f146e7499a54643c21edc93420ee0d" translate="yes" xml:space="preserve">
          <source>JSON support is fairly minimal in that you can call a &lt;code&gt;pymarc.Record&lt;/code&gt;'s
&lt;code&gt;as_json()&lt;/code&gt; method to return JSON for a given MARC Record:</source>
          <target state="translated">JSON support is fairly minimal in that you can call a &lt;code&gt;pymarc.Record&lt;/code&gt; 's &lt;code&gt;as_json()&lt;/code&gt; method to return JSON for a given MARC Record:</target>
        </trans-unit>
        <trans-unit id="e757c042b03ae86daf547d33c7f0863e44de8149" translate="yes" xml:space="preserve">
          <source>Most often you will have some MARC data and will want to extract data
from it. Here's an example of reading a batch of records and printing out
the title. If you are curious this example uses the batch file
available here in pymarc repository:</source>
          <target state="translated">大多数情况下,你会有一些MARC数据,并希望从中提取数据。下面是一个读取一批记录并打印出标题的例子。如果你好奇的话,这个例子使用的是pymarc仓库里的批处理文件。</target>
        </trans-unit>
        <trans-unit id="5b4f1d5e7a8584f60986673af027e754474f238c" translate="yes" xml:space="preserve">
          <source>Read, write and modify MARC bibliographic data</source>
          <target state="translated">读、写和修改MARC书目数据。</target>
        </trans-unit>
        <trans-unit id="cffa2af0a3a67cf2123e3411d020161abc01fc05" translate="yes" xml:space="preserve">
          <source>Reading</source>
          <target state="translated">阅读</target>
        </trans-unit>
        <trans-unit id="3ea94436392cc8e5727f552f1ba19f73fffc5cd0" translate="yes" xml:space="preserve">
          <source>Some fields like subjects can repeat. In cases like that you will want to use
&lt;code&gt;get_fields&lt;/code&gt; to get all of them as &lt;code&gt;pymarc.Field&lt;/code&gt; objects, which you can then
interact with further:</source>
          <target state="translated">Some fields like subjects can repeat. In cases like that you will want to use &lt;code&gt;get_fields&lt;/code&gt; to get all of them as &lt;code&gt;pymarc.Field&lt;/code&gt; objects, which you can then interact with further:</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">技术支持</target>
        </trans-unit>
        <trans-unit id="da1db8ce07e21accbd991bd1e52717d332749de3" translate="yes" xml:space="preserve">
          <source>The pymarc developers encourage you to join the &lt;a href=&quot;http://groups.google.com/group/pymarc&quot;&gt;pymarc Google
Group&lt;/a&gt; if you need help.  Also, please
feel free to use &lt;a href=&quot;https://gitlab.com/pymarc/pymarc/issues&quot;&gt;issue tracking&lt;/a&gt; on
GitLab to submit feature requests or bug reports. If you've got an itch to
scratch, please scratch it, and send merge requests on
&lt;a href=&quot;http://gitlab.com/pymarc/pymarc&quot;&gt;GitLab&lt;/a&gt;.</source>
          <target state="translated">The pymarc developers encourage you to join the &lt;a href=&quot;http://groups.google.com/group/pymarc&quot;&gt;pymarc Google Group&lt;/a&gt; if you need help. Also, please feel free to use &lt;a href=&quot;https://gitlab.com/pymarc/pymarc/issues&quot;&gt;issue tracking&lt;/a&gt; on GitLab to submit feature requests or bug reports. If you've got an itch to scratch, please scratch it, and send merge requests on &lt;a href=&quot;http://gitlab.com/pymarc/pymarc&quot;&gt;GitLab&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d23d54129ca3ddb55eb550117859e9d31cca04a0" translate="yes" xml:space="preserve">
          <source>To parse a file of MARCXML records you can:</source>
          <target state="translated">要解析MARCXML记录文件,你可以。</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">更新</target>
        </trans-unit>
        <trans-unit id="5e9f258a03125d2c07d9d21d42e97d7785a82802" translate="yes" xml:space="preserve">
          <source>Updating works the same way, you read it in, modify it, and then write it out
again:</source>
          <target state="translated">更新的方法也是一样的,你把它读进去,修改一下,然后再写出来。</target>
        </trans-unit>
        <trans-unit id="2dabb8334b6cbbc19635a160f00032f11eeb9962" translate="yes" xml:space="preserve">
          <source>Writing</source>
          <target state="translated">写作</target>
        </trans-unit>
        <trans-unit id="b4b47533f88801822f5148c8a0197523829dfc6c" translate="yes" xml:space="preserve">
          <source>You'll also need &lt;a href=&quot;https://pypi.python.org/pypi/setuptools#installation-instructions&quot;&gt;setuptools&lt;/a&gt;. Once you have the source and setuptools run the pymarc test
suite to make sure things are in order with the distribution:</source>
          <target state="translated">You'll also need &lt;a href=&quot;https://pypi.python.org/pypi/setuptools#installation-instructions&quot;&gt;setuptools&lt;/a&gt;. Once you have the source and setuptools run the pymarc test suite to make sure things are in order with the distribution:</target>
        </trans-unit>
        <trans-unit id="19170da7243e564bfabc20d1c82caa4455f9919a" translate="yes" xml:space="preserve">
          <source>You'll probably just want to use pip to install pymarc:</source>
          <target state="translated">你可能只想用pip来安装pymarc。</target>
        </trans-unit>
        <trans-unit id="36709a8db97b080264a37d3a650b58cec0b537fe" translate="yes" xml:space="preserve">
          <source>pymarc is a python library for working with bibliographic data encoded in
&lt;a href=&quot;https://en.wikipedia.org/wiki/MARC_standards&quot;&gt;MARC21&lt;/a&gt;. It provides an API for
reading, writing and modifying MARC records. It was mostly designed to be an
emergency eject seat, for getting your data assets out of MARC and into some
kind of saner representation. However over the years it has been used to create
and modify MARC records, since despite &lt;a href=&quot;https://web.archive.org/web/20170731163019/http://www.marc-must-die.info/index.php/Main_Page&quot;&gt;repeated
calls&lt;/a&gt;
for it to die as a format, MARC seems to be living quite happily as a zombie.</source>
          <target state="translated">pymarc is a python library for working with bibliographic data encoded in &lt;a href=&quot;https://en.wikipedia.org/wiki/MARC_standards&quot;&gt;MARC21&lt;/a&gt;. It provides an API for reading, writing and modifying MARC records. It was mostly designed to be an emergency eject seat, for getting your data assets out of MARC and into some kind of saner representation. However over the years it has been used to create and modify MARC records, since despite &lt;a href=&quot;https://web.archive.org/web/20170731163019/http://www.marc-must-die.info/index.php/Main_Page&quot;&gt;repeated calls&lt;/a&gt; for it to die as a format, MARC seems to be living quite happily as a zombie.</target>
        </trans-unit>
        <trans-unit id="e19512be0a96d22c78f26ce04f239b9e71cd61f0" translate="yes" xml:space="preserve">
          <source>pymarc's support for JSON and XML is currently a bit lopsided and ad hoc. pymarc
allows you to read XML in a variety of ways, but not write it. On the other hand
pymarc allows you to write JSON, but not read it. Part of the reason for this
unevenness is that the functionality was added to solve a particular need at a
particular time. If you are interested in providing a more holistic solution
pull requests (with unit tests) are always welcome.</source>
          <target state="translated">pymarc对JSON和XML的支持目前还有点片面,而且是临时性的,pymarc允许你用各种方式读取XML,但不允许你写它。另一方面,pymarc允许你写JSON,但不允许你读JSON。造成这种不平衡的部分原因是,这些功能是为了解决特定时间的特定需求而添加的。如果你有兴趣提供一个更全面的解决方案,欢迎提出拉取请求(带单元测试)。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
