<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/accelerator-toolbox/">
    <body>
      <group id="accelerator-toolbox">
        <trans-unit id="3db3b4b1c9f714fcb81576c92a69bbd8f6cc6ca0" translate="yes" xml:space="preserve">
          <source>A similar process is necessary for the Appveyor settings. You can click the
little lock to keep the variable values private.</source>
          <target state="translated">Appveyor的设置也需要类似的过程。你可以点击小锁来保持变量值的私密性。</target>
        </trans-unit>
        <trans-unit id="c41207e359f542586acc4ad4b77602611fc7d620" translate="yes" xml:space="preserve">
          <source>Accelerator Toolbox</source>
          <target state="translated">加速器工具箱</target>
        </trans-unit>
        <trans-unit id="3c32a9a04462f634fae2b90e03262719362d313b" translate="yes" xml:space="preserve">
          <source>All the binaries should be built when building the Python extension.</source>
          <target state="translated">在构建Python扩展时,应该构建所有的二进制文件。</target>
        </trans-unit>
        <trans-unit id="39c706334d3ad0e7bb7ab9a3214f00827496f06d" translate="yes" xml:space="preserve">
          <source>Any changes to .py files are automatically reinstalled in the build, but to
ensure any changes to .c files are reinstalled rerun:</source>
          <target state="translated">任何对.py文件的修改都会在构建中自动重新安装,但要确保任何对.c文件的修改都会重新安装重新运行。</target>
        </trans-unit>
        <trans-unit id="077c6b9e8061b1493b140cbe1060f2ca732f2ce4" translate="yes" xml:space="preserve">
          <source>Because pyAT compiles C code, releasing a version is not simple. The code
must be compiled for different operating systems and Python versions.</source>
          <target state="translated">因为 pyAT 编译 C 代码,所以发布一个版本并不简单。代码必须针对不同的操作系统和Python版本进行编译。</target>
        </trans-unit>
        <trans-unit id="68c70411ecf865551849f191cd12389199b5ae17" translate="yes" xml:space="preserve">
          <source>Because there are complications putting special characters into these
environment variables it may be simpler to ensure your Test PyPI password
contains only alphanumeric characters.</source>
          <target state="translated">因为在这些环境变量中加入特殊字符是很复杂的,所以要确保你的 Test PyPI 密码只包含字母数字字符可能会更简单。</target>
        </trans-unit>
        <trans-unit id="07e793a7684a830f9b2fcda96092bf3ce0ff20d6" translate="yes" xml:space="preserve">
          <source>Comparing results with Matlab</source>
          <target state="translated">与Matlab比较结果</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">调试</target>
        </trans-unit>
        <trans-unit id="1a9fe52e538781c5c5dd83c22f9667b4c07348ad" translate="yes" xml:space="preserve">
          <source>Download Microsoft Visual C++ Compiler for Python 2.7 (&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;here&lt;/a&gt;), and use
the Visual C++ Command Prompt of the correct architecture to build pyat.</source>
          <target state="translated">下载适用于Python 2.7的Microsoft Visual C ++编译器（&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;此处&lt;/a&gt;），并使用正确体系结构的Visual C ++命令提示符来构建pyat。</target>
        </trans-unit>
        <trans-unit id="7a378a22b7d658b3ac7873b77dfa86fdd1287e07" translate="yes" xml:space="preserve">
          <source>Finally, you should be able to run the tests:</source>
          <target state="translated">最后,你应该能够运行测试。</target>
        </trans-unit>
        <trans-unit id="7d33df7f82bd76b168cd61f446f2cc161e5535f7" translate="yes" xml:space="preserve">
          <source>For Travis to be authenticated to Test PyPI, someone must set the variables
TWINE_USERNAME and TWINE_PASSWORD in the Travis CI project settings. These
are not public so it is possible to use personal details; it may be best
not to use the same password for PyPI.</source>
          <target state="translated">为了使Travis能够通过测试PyPI的认证,必须有人在Travis CI项目设置中设置变量TWINE_USERNAME和TWINE_PASSWORD。这些变量是不公开的,所以可以使用个人信息;最好不要对PyPI使用相同的密码。</target>
        </trans-unit>
        <trans-unit id="7b630f4dc7612b1f2fd28953e2efc6a62ecb0575" translate="yes" xml:space="preserve">
          <source>For newer versions of Python you need the appropriate version of Visual C++.</source>
          <target state="translated">对于较新版本的Python,你需要适当的Visual C++版本。</target>
        </trans-unit>
        <trans-unit id="22ba2b890f056a2f1c8f7cef14073255a2939125" translate="yes" xml:space="preserve">
          <source>For some examples of how to use pyAT, see pyat_examples.rst.</source>
          <target state="translated">关于如何使用pyAT的一些例子,请参见pyat_examples.rst。</target>
        </trans-unit>
        <trans-unit id="28dc5e5dd4486a32fd81583a015a11f024fee086" translate="yes" xml:space="preserve">
          <source>If you are using Python 3, you can use the built-in venv module:</source>
          <target state="translated">如果你使用的是Python 3,你可以使用内置的venv模块。</target>
        </trans-unit>
        <trans-unit id="47df42481141fc31d588814c1559f84dbb4a5a05" translate="yes" xml:space="preserve">
          <source>If you get strange behaviour even after running setup.py develop again, then
running the following, inside pyat, should fix it:</source>
          <target state="translated">如果你在再次运行setup.py开发后得到了奇怪的行为,那么在pyat中运行以下内容,应该可以解决这个问题。</target>
        </trans-unit>
        <trans-unit id="1d85ae4c8a492e1bc7d20fd2f59835f45f6b768d" translate="yes" xml:space="preserve">
          <source>Installation (all platforms)</source>
          <target state="translated">安装(所有平台</target>
        </trans-unit>
        <trans-unit id="204ced5b6e1e112dcd72618548b5a14e82d97a59" translate="yes" xml:space="preserve">
          <source>Installation preparation (Windows)</source>
          <target state="translated">安装准备(Windows)</target>
        </trans-unit>
        <trans-unit id="a11c12111a9f747d478037b563021e14e45f5192" translate="yes" xml:space="preserve">
          <source>It is easiest to do this using a virtualenv. inside pyat:</source>
          <target state="translated">最简单的方法是在pyat里面使用virtualenv:</target>
        </trans-unit>
        <trans-unit id="537e3dedc502589f1b1bcee55a7d9519573684cf" translate="yes" xml:space="preserve">
          <source>It supports Python 2.7 (deprecated) and 3.5 to 3.8.</source>
          <target state="translated">它支持Python 2.7 (已废弃)和3.5到3.8。</target>
        </trans-unit>
        <trans-unit id="589bce7a102d4b12ee142cf65e8f5149c9df7663" translate="yes" xml:space="preserve">
          <source>N.B. setup.py develop needs to be run with the same version of Python (and
numpy) that you are using to run pyAT.</source>
          <target state="translated">N.B.setup.py 开发需要使用与运行 pyAT 相同版本的 Python (和 numpy)来运行。</target>
        </trans-unit>
        <trans-unit id="07be17b282070ebdf2ed3dbf935e9b8b0008e601" translate="yes" xml:space="preserve">
          <source>Print statements in the C code will work once the integrators are
recompiled.  To force recompilation, remove the build directory:</source>
          <target state="translated">C代码中的打印语句在集成器重新编译后即可使用。要强制重新编译,请删除构建目录。</target>
        </trans-unit>
        <trans-unit id="1db674343b66c2fd419ae58ed846533db4cf98e5" translate="yes" xml:space="preserve">
          <source>Releasing a version to PyPI</source>
          <target state="translated">向PyPI发布一个版本</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">那么..:</target>
        </trans-unit>
        <trans-unit id="46100204b0ac6f625c3a1dbf9452903a6bc12be8" translate="yes" xml:space="preserve">
          <source>There is a second set of tests that require a Matlab licence and allows
comparing results directly with a Matlab session.  See test_matlab/README
for information.</source>
          <target state="translated">有第二组测试需要Matlab许可,并允许直接与Matlab会话比较结果。请参阅test_matlab/README了解相关信息。</target>
        </trans-unit>
        <trans-unit id="89cd347f115409abd64350474d479f243956da38" translate="yes" xml:space="preserve">
          <source>To do this, we use the continuous integration services Travis CI (for Linux
and Mac) and Appveyor (for Windows). When a tag of the form pyat-x.y.z is
pushed to Github, wheels for each of the different platforms will be built
and automatically uploaded to
&lt;a href=&quot;https://test.pypi.org/project/accelerator-toolbox/&quot;&gt;https://test.pypi.org/project/accelerator-toolbox/&lt;/a&gt;. Once there, someone
should manually test that the wheels are working correctly, then they can
manually download the files and upload them to PyPI itself.</source>
          <target state="translated">为此，我们使用Travis CI（对于Linux和Mac）和Appveyor（对于Windows）的持续集成服务。当将pyat-xyz形式的标签推送到Github时，将构建每个不同平台的轮子并将其自动上传到 &lt;a href=&quot;https://test.pypi.org/project/accelerator-toolbox/&quot;&gt;https://test.pypi.org/project/accelerator-toolbox/&lt;/a&gt;。到达那里后，应该有人手动测试轮子是否正常工作，然后他们可以手动下载文件并将其上传到PyPI本身。</target>
        </trans-unit>
        <trans-unit id="33ca68401434ffba0b1cc7273110f6ba231b812d" translate="yes" xml:space="preserve">
          <source>We recommend using Python 3. If you are still using Python 2, you need virtualenv installed:</source>
          <target state="translated">我们建议使用Python 3。如果您还在使用Python 2,您需要安装virtualenv。</target>
        </trans-unit>
        <trans-unit id="f87ebee18fa038a1061a8c213fd6af97a5e535d0" translate="yes" xml:space="preserve">
          <source>find at -name&quot;*.pyc&quot;-exec rm '{}' \;</source>
          <target state="translated">find at -name &quot;*.pyc&quot;-exec rm '{}' \。</target>
        </trans-unit>
        <trans-unit id="ec11b5c5d5cec1c7fad93ee5cc141964df2eca48" translate="yes" xml:space="preserve">
          <source>find at -name&quot;*.so&quot;-exec rm '{}' \;</source>
          <target state="translated">find at -name &quot;*.so&quot;-exec rm '{}' \。</target>
        </trans-unit>
        <trans-unit id="0d862ec4c48d8bf536d3ac6dd16c4790afb05d5a" translate="yes" xml:space="preserve">
          <source>pip install -e .</source>
          <target state="translated">pip install -e .</target>
        </trans-unit>
        <trans-unit id="7b1855527317d0124ebeb726defa838d54e9b663" translate="yes" xml:space="preserve">
          <source>pip install -r requirements.txt</source>
          <target state="translated">pip install -r requirements.txt</target>
        </trans-unit>
        <trans-unit id="672b3d2d87baf808818e08ee3552a878196544b2" translate="yes" xml:space="preserve">
          <source>pyAT is a Python interface to the pass methods defined in Accelerator Toolbox,
implemented by compiling the C code used in the AT &amp;lsquo;integrators&amp;rsquo; plus a Python
extension.</source>
          <target state="translated">pyAT是Accelerator Toolbox中定义的pass方法的Python接口，该方法通过编译AT集成商中使用的C代码以及Python扩展来实现。</target>
        </trans-unit>
        <trans-unit id="c901bc68547861c235a7621de1fabc389fcf0423" translate="yes" xml:space="preserve">
          <source>python -m pytest test</source>
          <target state="translated">python -m pytest test</target>
        </trans-unit>
        <trans-unit id="fbdd53d95d21c0b3493e11f3f33bdfc205354590" translate="yes" xml:space="preserve">
          <source>python setup.py develop</source>
          <target state="translated">python setup.py 开发</target>
        </trans-unit>
        <trans-unit id="fc532be409a0f5c47ed9493bf97d0fa3bff073aa" translate="yes" xml:space="preserve">
          <source>python3 -m venv venv</source>
          <target state="translated">python3 -m venv venv</target>
        </trans-unit>
        <trans-unit id="07f59140ef0241af93e7ef7f12462fca3facf740" translate="yes" xml:space="preserve">
          <source>rm -rf build</source>
          <target state="translated">rm -rf build</target>
        </trans-unit>
        <trans-unit id="4f013bafe9de3b3da1a0e6fb3517215f466196d0" translate="yes" xml:space="preserve">
          <source>source venv/bin/activate&amp;nbsp; # or venv\Scripts\activate on Windows</source>
          <target state="translated">在Windows上来源venv / bin / activate＃或venv \ Scripts \ activate</target>
        </trans-unit>
        <trans-unit id="24889fe0e41d99d71c5e09fcee21658e77a41eb1" translate="yes" xml:space="preserve">
          <source>virtualenv --no-site-packages venv</source>
          <target state="translated">virtualenv --no-site-packages venv</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
