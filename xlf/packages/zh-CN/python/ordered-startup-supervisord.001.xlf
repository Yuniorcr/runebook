<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/ordered-startup-supervisord/">
    <body>
      <group id="ordered-startup-supervisord">
        <trans-unit id="49cb7459e7efc48a0e85feadf0fe0d10416bf495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;startinorder&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;启动顺序&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28699d8af59625e581df07408f84ee38eb9200d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;startnextafter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;下一个开始&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08791930245f47c3d967a442f4ec2dc90c23a525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;supervisord.d/ping2.conf&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;administratord.d / ping2.conf&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="e01770b6de6bab4afc5c5d699e870f7c683f32bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;supervisord.d/ping3.conf&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;administratord.d / ping3.conf&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="095654ebf76047b1a4814276e3fb12b8a6c698a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;supervisord.d/sleep.conf&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;administratord.d / sleep.conf&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="d53ce001052af2a0866071dabebfe64f4081772b" translate="yes" xml:space="preserve">
          <source>All of the processes started in order.  &lt;strong&gt;ping2&lt;/strong&gt; started after sleep was &lt;em&gt;RUNNING&lt;/em&gt; (influenced by startsecs).  When
sleep respawned it didn&amp;rsquo;t restart the chain, it only goes through it once.</source>
          <target state="translated">所有过程均按顺序开始。&lt;strong&gt;平2&lt;/strong&gt;开始睡在后&lt;em&gt;RUNNING&lt;/em&gt;（由startsecs影响）。当睡眠重新产生时，它没有重新启动链，只经过了一次。</target>
        </trans-unit>
        <trans-unit id="694340f966eff4ce99f11ef66e8c4c468e8f9a08" translate="yes" xml:space="preserve">
          <source>An event listener for supervisord that will start up items in order upon certain states.</source>
          <target state="translated">一个用于监理的事件监听器,它将在某些状态下按顺序启动项目。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">注意事项</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">配置</target>
        </trans-unit>
        <trans-unit id="d081aad85fbb5837d13b38bbb4f7e87702d7041a" translate="yes" xml:space="preserve">
          <source>Configuration requires several things.  First you need to configure this software as a event listener:</source>
          <target state="translated">配置需要几个方面。首先你需要把这个软件配置成一个事件监听器。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">例子</target>
        </trans-unit>
        <trans-unit id="73ec10361d1440be1c6a4af907f0bd878f46aa79" translate="yes" xml:space="preserve">
          <source>First &lt;strong&gt;supervisord.conf&lt;/strong&gt;:</source>
          <target state="translated">第一个&lt;strong&gt;supervisor.conf&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">运作方式</target>
        </trans-unit>
        <trans-unit id="ae59dc94e6b0a55154ee0e318f631b3465cb96fe" translate="yes" xml:space="preserve">
          <source>Next we will look at the jobs in the &lt;strong&gt;supervisord.d&lt;/strong&gt; directory like &lt;strong&gt;supervisord.d/ping.conf&lt;/strong&gt;:</source>
          <target state="translated">接下来，我们将查看&lt;strong&gt;supervisord.d&lt;/strong&gt;目录中的工作，例如&lt;strong&gt;supervisord.d / ping.conf&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="c2c52593871e1bf5d680f58305ad05dc215e5bdc" translate="yes" xml:space="preserve">
          <source>Notice how all of the &lt;em&gt;program:&lt;/em&gt; sections have autostart=false.  Finally let&amp;rsquo;s look at the output of running
supervisord:</source>
          <target state="translated">注意所有&lt;em&gt;程序：&lt;/em&gt;部分的autostart = false。最后，让我们看一下运行超级用户的输出：</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">问题</target>
        </trans-unit>
        <trans-unit id="f486426c923ca70ed6a7b2e0cff942f32d2aedee" translate="yes" xml:space="preserve">
          <source>The following is an example of a supervisor configuration that starts one item after the next in priority order.
The order will be ping, sleep, ping2, and ping3.  The ping jobs are configured to wait till they have exited before
the next job is started (this is commonly used for initialization scripts that need to complete before continuing).</source>
          <target state="translated">下面是一个主管配置的例子,按照优先级顺序,一个项目接着一个项目启动。顺序为ping、sleep、ping2和ping3。ping作业被配置为等待它们退出后再启动下一个作业(这通常用于需要在继续之前完成的初始化脚本)。</target>
        </trans-unit>
        <trans-unit id="7eca36217fea42056d73cda09b6f949072c66964" translate="yes" xml:space="preserve">
          <source>The problem can be seen in &lt;a href=&quot;https://github.com/Supervisor/supervisor/issues/122&quot;&gt;supervisor bug 122&lt;/a&gt;.  The priority order in supervisor does determine startup order, but
when &lt;strong&gt;autostart=true&lt;/strong&gt; supervisor doesn&amp;rsquo;t wait for the previous process to be RUNNING in order to continue.  What is
even harder is having initialization scripts that need to exit before continuing.  This software is meant to make
this one use case easier.</source>
          <target state="translated">该问题可以在&lt;a href=&quot;https://github.com/Supervisor/supervisor/issues/122&quot;&gt;超级用户错误122中&lt;/a&gt;看到。主管中的优先级顺序会确定启动顺序，但是当&lt;strong&gt;autostart = true时，&lt;/strong&gt;主管不会等待上一个进程正在运行才能继续。更加困难的是，初始化脚本需要先退出，然后才能继续。该软件旨在简化此用例。</target>
        </trans-unit>
        <trans-unit id="ba4fb057bf52024c2c0d2124b673b0eda3472b27" translate="yes" xml:space="preserve">
          <source>There are 2 additional configurations that can be put in a &lt;em&gt;[program:&lt;/em&gt; section.  These are:</source>
          <target state="translated">可以在&lt;em&gt;[program：&lt;/em&gt;部分中放置2种其他配置。这些是：</target>
        </trans-unit>
        <trans-unit id="952b8f3c177b8fe413cb246fbfc7bd5633491d2a" translate="yes" xml:space="preserve">
          <source>This does not solve every situation.  If what you need is everything starting up one by one, then this will likely solve
your issue.  If you need to mix and match which starts in parallel and which in serial (dependencies) this is probably
not what you want.</source>
          <target state="translated">这并不能解决所有的情况。如果你需要的是所有的东西都是一个一个的启动,那么这很可能会解决你的问题。如果你需要混合匹配哪些是并行启动,哪些是串行启动(依赖关系),这可能不是你想要的。</target>
        </trans-unit>
        <trans-unit id="bf76ac1ddab9bb7b165370582c15a1651639ae29" translate="yes" xml:space="preserve">
          <source>This does not start groups.  It can start programs that are part of a group, but it won&amp;rsquo;t directly start a group.</source>
          <target state="translated">这不会启动组。它可以启动属于组的程序，但不会直接启动组。</target>
        </trans-unit>
        <trans-unit id="ada9a6bdc69842285f9a43a3806091c02aa67b08" translate="yes" xml:space="preserve">
          <source>This is an event listener for supervisor.  This means it is run by supervisor on startup and supervisor will send it
messages whenever a program reaches a particular process state.  When configured it will wait till a supervisor
subprocess get&amp;rsquo;s to the configured state, then starts the next process.  The next process is determined by priority.</source>
          <target state="translated">这是主管的事件侦听器。这意味着它在启动时由主管运行，并且只要程序达到特定的进程状态，主管就会向其发送消息。配置完成后，它将等待直到主管子进程进入配置状态，然后再启动下一个进程。下一步由优先级决定。</target>
        </trans-unit>
        <trans-unit id="c27fb872e01147dc9851e7003482189c27b8656d" translate="yes" xml:space="preserve">
          <source>This is optional and is defaulted to &lt;em&gt;RUNNING&lt;/em&gt;.  If you want the process to exit before continuing then set
this to &lt;em&gt;EXITED&lt;/em&gt; (this is useful for initialization scripts that have to finish before something else starts).
This is case insensitive.</source>
          <target state="translated">这是可选的，默认为&lt;em&gt;RUNNING&lt;/em&gt;。如果您希望进程在继续之前退出，则将其设置为&lt;em&gt;EXITED&lt;/em&gt;（这对于必须在其他启动之前完成的初始化脚本很有用）。这是不区分大小写的。</target>
        </trans-unit>
        <trans-unit id="50d4f7ab512aa0d2b0bc2e5d618060c3681d6053" translate="yes" xml:space="preserve">
          <source>This is probably the only thing you want to autostart.  It needs xml rpc api, so don&amp;rsquo;t forget to configure that.  A
full example is shown later.</source>
          <target state="translated">这可能是您要自动启动的唯一内容。它需要xml rpc api，因此请不要忘记对其进行配置。完整的示例将在后面显示。</target>
        </trans-unit>
        <trans-unit id="310c7ed906ccd2f568588a21ba16099bb871146f" translate="yes" xml:space="preserve">
          <source>This must be set to &lt;em&gt;true&lt;/em&gt; in order to have the next process in the line to be started after this one.</source>
          <target state="translated">必须将其设置为&lt;em&gt;true&lt;/em&gt;，以便在该行之后启动该行中的下一个进程。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
