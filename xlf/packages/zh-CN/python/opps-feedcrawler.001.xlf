<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/opps-feedcrawler/">
    <body>
      <group id="opps-feedcrawler">
        <trans-unit id="409020dbb919b1cef4e50104b0c32c3c8244e611" translate="yes" xml:space="preserve">
          <source>&quot;&quot;&quot;</source>
          <target state="translated">&amp;ldquo;&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="58d3643082fb1c4d821fcf186c0766764bccd6dd" translate="yes" xml:space="preserve">
          <source># Now you have access to **self.entry_model** which you will use to create CMS entries.</source>
          <target state="translated">＃现在您可以访问** self.entry_model **，它将用于创建CMS条目。</target>
        </trans-unit>
        <trans-unit id="0f716ad92ab9f66d27e1cae2a520ec92eb66ab7d" translate="yes" xml:space="preserve">
          <source># here you have access to the **feed** object in **self.feed**</source>
          <target state="translated">＃在这里您可以访问self.feed **中的feed对象</target>
        </trans-unit>
        <trans-unit id="6d5319d683f226df82eb44244ceb439c2edb22e1" translate="yes" xml:space="preserve">
          <source># remember to implement your own logic to avoid duplications</source>
          <target state="translated">＃记住实现自己的逻辑以避免重复</target>
        </trans-unit>
        <trans-unit id="2df33b427393b1e487c8473790100e4a8651f5c8" translate="yes" xml:space="preserve">
          <source># this method should return the count of entries read and created or 0</source>
          <target state="translated">＃此方法应返回读取和创建的条目数或0</target>
        </trans-unit>
        <trans-unit id="af387196765608361cf759b6ed3811af42d6250f" translate="yes" xml:space="preserve">
          <source>&amp;gt; Example: 'yourproject.yourmodule.processors.MyProcessor'</source>
          <target state="translated">&amp;gt;示例：&amp;ldquo; yourproject.yourmodule.processors.MyProcessor&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="cdef8ce219d847b28c525335cde9349f82f22b27" translate="yes" xml:space="preserve">
          <source>&amp;gt; The processor API is documented in the item **Processor API**</source>
          <target state="translated">&amp;gt;处理器API记录在**处理器API **项目中</target>
        </trans-unit>
        <trans-unit id="7ad225686ecada2aa7561edb0e2c128499689544" translate="yes" xml:space="preserve">
          <source>&amp;gt; You can replace RSSProcessor with your own processor class, following the processor API.</source>
          <target state="translated">&amp;gt;您可以按照处理器API用自己的处理器类替换RSSProcessor。</target>
        </trans-unit>
        <trans-unit id="e7064f0b80f61dbc65915311032d27baa569ae2a" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">）</target>
        </trans-unit>
        <trans-unit id="ab0e89d6b0cf4a7f160334fc8f603d930f135e73" translate="yes" xml:space="preserve">
          <source>**RSSProcessor** wil take the feed url and do all the job fetching, reading and creating **entries** on database.</source>
          <target state="translated">** RSSProcessor **将获取提要URL，并完成所有工作，以在数据库上获取，读取和创建**条目**。</target>
        </trans-unit>
        <trans-unit id="304d8ffeea1b1470201903baa3dc45c27c2afa5d" translate="yes" xml:space="preserve">
          <source>- actions = ['opps.feedcrawler.actions.rss.RSSActions'</source>
          <target state="translated">-动作= ['opps.feedcrawler.actions.rss.RSSActions'</target>
        </trans-unit>
        <trans-unit id="0b5407f696dd322b058646960c484b415746608a" translate="yes" xml:space="preserve">
          <source>- processor = 'opps.feedcrawler.processors.rss.RSSProcessor'</source>
          <target state="translated">-处理器='opps.feedcrawler.processors.rss.RSSProcessor'</target>
        </trans-unit>
        <trans-unit id="9947eaceccdc70cf35d8379cd30f3b015c04fc68" translate="yes" xml:space="preserve">
          <source>- url = 'http://site.com/feed.rss'</source>
          <target state="translated">-网址='http://site.com/feed.rss'</target>
        </trans-unit>
        <trans-unit id="6eae3a5b062c6d0d79f070c26e6d62486b40cb46" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>
        </trans-unit>
        <trans-unit id="8138d9665b320241b84a4369a8b108f5f3a4cd1b" translate="yes" xml:space="preserve">
          <source>Also, your **feed** takes **actions** which is a path to a callable returning a list of Django admin actions in the form of functions.</source>
          <target state="translated">另外,你的**feed**需要**actions**,它是一个可调用的路径,以函数的形式返回一个Django管理动作的列表。</target>
        </trans-unit>
        <trans-unit id="e74bb403599fe7d7187486ee341dbaaece5d72a0" translate="yes" xml:space="preserve">
          <source>BaseProcessor.__init__ receives the **feed** object as parameter</source>
          <target state="translated">BaseProcessor.__init__接收**feed**对象作为参数。</target>
        </trans-unit>
        <trans-unit id="ff1928e5d29bcefda7faa6ad45f1108995dd13a3" translate="yes" xml:space="preserve">
          <source>Feed</source>
          <target state="translated">饲料</target>
        </trans-unit>
        <trans-unit id="958c027db6efe53d8b8e846267599164072416c5" translate="yes" xml:space="preserve">
          <source>Feed is commonly a url with some configurations, **url**, **credentials**, **processor** and **actions**</source>
          <target state="translated">Feed常见的是一个网址,有一些配置,**url**、**credentials**、**processor**和**actions**。</target>
        </trans-unit>
        <trans-unit id="0c29f11593892a894ec8837b9a7c73142f5883d0" translate="yes" xml:space="preserve">
          <source>Feed reader App for Opps CMS</source>
          <target state="translated">Opps CMS的Feed阅读器应用程序</target>
        </trans-unit>
        <trans-unit id="59499be277471bb7c7a5e281e34ded3d2de625a5" translate="yes" xml:space="preserve">
          <source>FeedCrawler takes a **feed** of any type, executes its customized processor in order to create CMS Entries.</source>
          <target state="translated">FeedCrawler接受任何类型的**feed**,执行其定制的处理器,以创建CMS条目。</target>
        </trans-unit>
        <trans-unit id="0e793484b1a0da91b4c6c8c7a23c516acd1e1b20" translate="yes" xml:space="preserve">
          <source>In the above example we have an **url** to read feed entries, and feedcrawler comes with a builtin processor for RSS feeds</source>
          <target state="translated">在上面的例子中,我们有一个**url**来读取feed条目,feedcrawler自带一个内置的RSS feeds处理器</target>
        </trans-unit>
        <trans-unit id="d5c18ae19bb4beeaed11196748478d6aea7ddb31" translate="yes" xml:space="preserve">
          <source>Processor API</source>
          <target state="translated">处理器API</target>
        </trans-unit>
        <trans-unit id="8bcb612f62379f61a4e1b06a98dd3674bc19b01c" translate="yes" xml:space="preserve">
          <source>The most simple example is an RSS feed</source>
          <target state="translated">最简单的例子是一个RSS订阅</target>
        </trans-unit>
        <trans-unit id="9d9d21e45d08129095fe9b760281e00be765f7a7" translate="yes" xml:space="preserve">
          <source>The processor above will be executed by management command **manage.py process_feeds -f feed_slug** also you can put this command to run on **cron** or **celery**</source>
          <target state="translated">上面的处理器将由管理命令**manage.py process_feeds -f feed_slug**执行,你也可以把这个命令放在**cron**或**celery**上运行。</target>
        </trans-unit>
        <trans-unit id="5166258030205444cbb040f2430258edebd6f160" translate="yes" xml:space="preserve">
          <source>You override if you need, but be careful.</source>
          <target state="translated">如果你需要,你可以覆盖,但要小心。</target>
        </trans-unit>
        <trans-unit id="bf8d016ef2199c4376c8beb321ae74850ff141c8" translate="yes" xml:space="preserve">
          <source>an example of action is &quot;Create posts&quot; which takes the selected entries and convert it in to Opps Posts.</source>
          <target state="translated">例如 &quot;创建帖子&quot;,它将选定的条目转换为Opps帖子。</target>
        </trans-unit>
        <trans-unit id="24b601a90eab63022c76ab584dcaaeb3f78747d7" translate="yes" xml:space="preserve">
          <source>class MyProcessor(BaseProcessor):</source>
          <target state="translated">class MyProcessor(BaseProcessor)。</target>
        </trans-unit>
        <trans-unit id="c2f565ed4dd3d13e62f040f4d941712942788013" translate="yes" xml:space="preserve">
          <source>def __init__(feed, entry_model, *args, **kwargs):</source>
          <target state="translated">def __init__(feed,entry_model,*args,**kwargs)。</target>
        </trans-unit>
        <trans-unit id="ae1f5f2938801fed2655d1382d6792ce3bff176d" translate="yes" xml:space="preserve">
          <source>def process(self):</source>
          <target state="translated">def process(self):</target>
        </trans-unit>
        <trans-unit id="3ae8f599decd24a78d26ee67fb57191ad471e2c8" translate="yes" xml:space="preserve">
          <source>entries = read_and_parse_rss_feed(url)  #  example function which fetch and parse XML feed</source>
          <target state="translated">entries=read_and_parse_rss_feed(url)#获取和解析XML feed的示例函数。</target>
        </trans-unit>
        <trans-unit id="86ca2e3ea7cc8eb2aea970c91f5dc149bc9c42b3" translate="yes" xml:space="preserve">
          <source>feedcrawler provides a **BaseProcessor** class for you to extend and you have to override some methods.</source>
          <target state="translated">feedcrawler提供了一个**BaseProcessor**类供你扩展,你必须覆盖一些方法。</target>
        </trans-unit>
        <trans-unit id="73616f3815ee34d8fadcdaa2dae631f5a80eccfb" translate="yes" xml:space="preserve">
          <source>for entry in entries:</source>
          <target state="translated">用于录入条目。</target>
        </trans-unit>
        <trans-unit id="748808e0d7150d177f2c1e086bec5cb30dda3710" translate="yes" xml:space="preserve">
          <source>from opps.feedcrawler.processors.base import BaseProcessor</source>
          <target state="translated">从oppos.feedcrawler.processors.base导入BaseProcessor。</target>
        </trans-unit>
        <trans-unit id="052c042df8426787c92002f50b3249f1aa41fdf5" translate="yes" xml:space="preserve">
          <source>max_entries = self.feed.max_entries</source>
          <target state="translated">max_entries=self.feed.max_entries。</target>
        </trans-unit>
        <trans-unit id="0a89b85046b779c82b05a6d61c5e004aec861c5d" translate="yes" xml:space="preserve">
          <source>opps-feedcrawler</source>
          <target state="translated">opps-feedcrawler</target>
        </trans-unit>
        <trans-unit id="9738ae123f3f00e8f704361c3c3e61f054b53db4" translate="yes" xml:space="preserve">
          <source>return len(entries)</source>
          <target state="translated">返回 len(entry)</target>
        </trans-unit>
        <trans-unit id="08d8301171876fa4c150d3c0ee6bae565e4f7fa6" translate="yes" xml:space="preserve">
          <source>self.entry_model = entry_model</source>
          <target state="translated">self.entry_model=entry_model</target>
        </trans-unit>
        <trans-unit id="437ee87bc049fd9f3013281606939e546133e54f" translate="yes" xml:space="preserve">
          <source>self.entry_model.objects.get_or_create(</source>
          <target state="translated">self.entry_model.objects.get_or_create(</target>
        </trans-unit>
        <trans-unit id="b2d01716586b0486caf9ee21e622a3341f4a3822" translate="yes" xml:space="preserve">
          <source>self.feed = feed</source>
          <target state="translated">self.feed=feed</target>
        </trans-unit>
        <trans-unit id="d151fd0f91d98a4978ed5b6fd23c1f0c6f52b9ff" translate="yes" xml:space="preserve">
          <source>title=entry['title']</source>
          <target state="translated">title=entry['标题']</target>
        </trans-unit>
        <trans-unit id="8ba0825f007be52e911f7e8a45903260b660dafb" translate="yes" xml:space="preserve">
          <source>url = self.feed.source_url</source>
          <target state="translated">url=self.feed.source_url</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
