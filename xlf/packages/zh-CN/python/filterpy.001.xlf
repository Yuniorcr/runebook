<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/filterpy/">
    <body>
      <group id="filterpy">
        <trans-unit id="8a8e298f9a396f054dba117cef6a17d8c2fbb635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Imminent drop of support of Python 2.7, 3.4. See section below for details.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：即将停止对Python 2.7，3.4的支持。有关详细信息，请参见以下部分。</target>
        </trans-unit>
        <trans-unit id="4d58a7251bc15282c41f3b3a4aa3f72641348a7f" translate="yes" xml:space="preserve">
          <source>All tests are written to work with py.test. Just type</source>
          <target state="translated">所有的测试都是为了配合py.test而写的。只要输入</target>
        </trans-unit>
        <trans-unit id="c1939d3939c93a9c3ab83c20a36c6f9ccb15e5ef" translate="yes" xml:space="preserve">
          <source>And, if you want to install from the bleeding edge git version</source>
          <target state="translated">而且,如果你想从最先进的git版本中安装</target>
        </trans-unit>
        <trans-unit id="e5a8c89ee16ef426c7761586d7e5aa3f19a032ae" translate="yes" xml:space="preserve">
          <source>As explained above, the tests are not robust. I&amp;rsquo;m still at the stage
where visual plots are the best way to see how things are working.
Apologies, but I think it is a sound choice for development. It is easy
for a filter to perform within theoretical limits (which we can write a
non-visual test for) yet be &amp;lsquo;off&amp;rsquo; in some way. The code itself contains
tests in the form of asserts and properties that ensure that arrays are
of the proper dimension, etc.</source>
          <target state="translated">如上所述，测试并不可靠。我还处在视觉图是观察事物如何运作的最佳方式的阶段。抱歉，但我认为这是发展的明智选择。过滤器很容易在理论极限（我们可以写一个非视觉测试）内执行，但以某种方式&amp;ldquo;关闭&amp;rdquo;。代码本身包含断言和属性形式的测试，以确保数组的维数正确，等等。</target>
        </trans-unit>
        <trans-unit id="4b613f6d7285ef9f4bef8a4f0bd6a6c9681d7640" translate="yes" xml:space="preserve">
          <source>At the moment FilterPy is on version 1.x. I plan to fork the project
to version 2.0, and support only Python 3.5+. The 1.x version
will still be available, but I will not support it. If I add something
amazing to 2.0 and someone really begs, I might backport it; more
likely I would accept a pull request with the feature backported
to 1.x. But to be honest I don&amp;rsquo;t forsee this happening.</source>
          <target state="translated">目前，FilterPy的版本是1.x。我计划将该项目分叉到2.0版，并且仅支持Python 3.5+。1.x版本将仍然可用，但我将不支持它。如果我在2.0上添加了惊人的功能并且有人真的乞求，我可能会反向移植它。我更有可能接受将功能反向移植到1.x的请求请求。但老实说，我不认为这种情况会发生。</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">基本用途</target>
        </trans-unit>
        <trans-unit id="968bd2b33b4162a81ec2cd8ed2df38da9b302693" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2015 Roger R. Labbe Jr</source>
          <target state="translated">Copyright (c)2015 Roger R.Labbe Jr.</target>
        </trans-unit>
        <trans-unit id="3d89f90b67b082a45bef90c0d79a6ebd3711a370" translate="yes" xml:space="preserve">
          <source>FilterPy - Kalman filters and other optimal and non-optimal estimation filters in Python.</source>
          <target state="translated">FilterPy-在Python中使用卡尔曼滤波器和其他最优和非最优估计滤波器。</target>
        </trans-unit>
        <trans-unit id="1c3fbbca97bb5d8f412fea56090f90411596cfe8" translate="yes" xml:space="preserve">
          <source>Finally, run the filter.</source>
          <target state="translated">最后,运行过滤器。</target>
        </trans-unit>
        <trans-unit id="ee3680252bd004d7ef4df31fbaff398d7d1a87fd" translate="yes" xml:space="preserve">
          <source>First, import the filters and helper functions.</source>
          <target state="translated">首先,导入过滤器和辅助函数。</target>
        </trans-unit>
        <trans-unit id="35555ce65ba60c36f60b29bd85e767779829a60a" translate="yes" xml:space="preserve">
          <source>Full documentation is at
&lt;a href=&quot;https://filterpy.readthedocs.io/en/latest/&quot;&gt;https://filterpy.readthedocs.io/en/latest/&lt;/a&gt;</source>
          <target state="translated">完整文档位于 &lt;a href=&quot;https://filterpy.readthedocs.io/en/latest/&quot;&gt;https://filterpy.readthedocs.io/en/latest/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="816b4bbd3e420c572b205dac19fade101d072597" translate="yes" xml:space="preserve">
          <source>I am making edits to the package now in support of my book;
once those are done I&amp;rsquo;ll probably create the 2.0 branch.
I&amp;rsquo;m contemplating a SLAM addition to the book, and am not
sure if I will do this in 3.5+ only or not.</source>
          <target state="translated">我现在正在对该软件包进行编辑以支持我的书；完成这些操作后，我可能会创建2.0分支。我正在考虑将SLAM添加到本书中，并且不确定是否只在3.5+中执行此操作。</target>
        </trans-unit>
        <trans-unit id="a748886f04c2328f504cab48b8f72e609596428e" translate="yes" xml:space="preserve">
          <source>I haven&amp;rsquo;t extensively tested backwards compatibility - I use the
Anaconda distribution, and so I am on Python 3.6 and 2.7.14, along with
whatever version of NumPy, SciPy, and matplotlib they provide. But I am
using pretty basic Python - numpy.array, maybe a list comprehension in
my tests.</source>
          <target state="translated">我还没有广泛测试向后兼容性-我使用Anaconda发行版，因此我使用的是Python 3.6和2.7.14，以及它们提供的NumPy，SciPy和matplotlib的任何版本。但是我使用的是非常基本的Python-numpy.array，也许是我的测试中的列表理解。</target>
        </trans-unit>
        <trans-unit id="8e09978b025a4723b3622ef57e7d817d2a858e11" translate="yes" xml:space="preserve">
          <source>I haven&amp;rsquo;t finalized my decision on this, but NumPy is dropping
Python 2.7 support in December 2018. I will certainly drop Python
2.7 support by then; I will probably do it much sooner.</source>
          <target state="translated">我尚未最终决定，但NumPy将于2018年12月放弃对Python 2.7的支持。我可能会早点做。</target>
        </trans-unit>
        <trans-unit id="61c05ef3006579fbdd490e4b533ee3726eb4d772" translate="yes" xml:space="preserve">
          <source>I import from &lt;strong&gt;__future__&lt;/strong&gt; to ensure the code works in Python 2 and 3.</source>
          <target state="translated">我是从&lt;strong&gt;__future__&lt;/strong&gt;进口的&lt;strong&gt;&lt;/strong&gt;以确保代码可在Python 2和3中使用。</target>
        </trans-unit>
        <trans-unit id="7488ac725f5d27750031e40080ed22d2b9cd5291" translate="yes" xml:space="preserve">
          <source>I said three books. I also like and use Bar-Shalom&amp;rsquo;s Estimation with
Applications to Tracking and Navigation. Much more mathematical than the
previous two books, I would not recommend it as a first text unless you
already have a background in control theory or optimal estimation. Once
you have that experience, this book is a gem. Every sentence is crystal
clear, his language is precise, but each abstract mathematical statement
is followed with something like &amp;ldquo;and this means&amp;hellip;&amp;rdquo;.</source>
          <target state="translated">我说了三本书。我也喜欢Bar-Shalom的Estimation及其在跟踪和导航中的应用。与前两本书相比，数学方面的内容要多得多，除非您已经具备控制理论或最佳估计的背景知识，否则我不建议您将其作为第一本书。一旦有了这些经验，这本书就是一本珍宝。每个句子都很清晰，语言也很精确，但是每个抽象的数学陈述都跟着&amp;ldquo;这意味着&amp;hellip;&amp;hellip;&amp;rdquo;之类的意思。</target>
        </trans-unit>
        <trans-unit id="2aa942fd3c88f16190a93b80a61fa11f8ebdb5a4" translate="yes" xml:space="preserve">
          <source>I use NumPy and SciPy for all of the computations. I have experimented
with Numba and it yields impressive speed ups with minimal costs, but I
am not convinced that I want to add that requirement to my project. It
is still on my list of things to figure out, however.</source>
          <target state="translated">我使用NumPy和SciPy进行所有的计算。我已经用Numba做了实验,它以最小的成本产生了令人印象深刻的速度,但我不相信我想在我的项目中加入这个要求。然而,它仍然在我的事情清单上,有待解决。</target>
        </trans-unit>
        <trans-unit id="ba522cc2398fca76e29351085a92280f3c143c00" translate="yes" xml:space="preserve">
          <source>I use three main texts as my refererence, though I do own the majority
of the Kalman filtering literature. First is Paul Zarchan&amp;rsquo;s
&amp;lsquo;Fundamentals of Kalman Filtering: A Practical Approach&amp;rsquo;. I think it by
far the best Kalman filtering book out there if you are interested in
practical applications more than writing a thesis. The second book I use
is Eli Brookner&amp;rsquo;s &amp;lsquo;Tracking and Kalman Filtering Made Easy&amp;rsquo;. This is an
astonishingly good book; its first chapter is actually readable by the
layperson! Brookner starts from the g-h filter, and shows how all other
filters - the Kalman filter, least squares, fading memory, etc., all
derive from the g-h filter. It greatly simplifies many aspects of
analysis and/or intuitive understanding of your problem. In contrast,
Zarchan starts from least squares, and then moves on to Kalman
filtering. I find that he downplays the predict-update aspect of the
algorithms, but he has a wealth of worked examples and comparisons
between different methods. I think both viewpoints are needed, and so I
can&amp;rsquo;t imagine discarding one book. Brookner also focuses on issues that
are ignored in other books - track initialization, detecting and
discarding noise, tracking multiple objects, an so on.</source>
          <target state="translated">尽管我确实拥有卡尔曼滤波文献的大部分内容，但我还是以三篇主要文章作为参考。首先是Paul Zarchan的&amp;ldquo;卡尔曼滤波基础：实用方法&amp;rdquo;。如果您对实际应用感兴趣，而不是撰写论文，那么我认为这是迄今为止最好的卡尔曼滤波书籍。我使用的第二本书是Eli Brookner的&amp;ldquo;轻松跟踪和卡尔曼滤波&amp;rdquo;。这是一本惊人的好书。它的第一章实际上是外行阅读的！ Brookner从gh滤波器开始，并显示所有其他滤波器（卡尔曼滤波器，最小二乘，衰落内存等）如何从gh滤波器派生。它极大地简化了分析和/或对问题的直观理解的许多方面。相反，Zarchan从最小二乘开始，然后进行卡尔曼滤波。我发现他不重视算法的预测更新方面，但是他有大量的工作示例以及不同方法之间的比较。我认为这两种观点都是必要的，因此我无法想象丢掉一本书。布鲁克纳还专注于其他书籍中忽略的问题-跟踪初始化，检测和消除噪声，跟踪多个对象等。</target>
        </trans-unit>
        <trans-unit id="b9067a5289890407887c107d828776b6282737e0" translate="yes" xml:space="preserve">
          <source>If you prefer to download the source yourself</source>
          <target state="translated">如果你喜欢自己下载源码</target>
        </trans-unit>
        <trans-unit id="950ad6a6b9a6d7503133a16c0753c700fd4b6713" translate="yes" xml:space="preserve">
          <source>If you use Anaconda, you can install from the conda-forge channel. You
will need to add the conda-forge channel if you haven&amp;rsquo;t already done so:</source>
          <target state="translated">如果使用Anaconda，则可以从conda-forge渠道进行安装。如果您尚未添加conda-forge频道，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="d021e768fe46c9e993b9bc26daebe1e0a7ccf5ea" translate="yes" xml:space="preserve">
          <source>Initialize the filter&amp;rsquo;s matrices.</source>
          <target state="translated">初始化过滤器的矩阵。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="069f6f37ff0b3b14a1e2b9c9a3ca8b9b8085a537" translate="yes" xml:space="preserve">
          <source>Kalman filtering and optimal estimation library</source>
          <target state="translated">卡尔曼滤波和最优估计库</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">许可证</target>
        </trans-unit>
        <trans-unit id="ff42cf30abec69d9cd5e9a6d51db617908be4d0b" translate="yes" xml:space="preserve">
          <source>My aim is largely pedalogical - I opt for clear code that matches the
equations in the relevant texts on a 1-to-1 basis, even when that has a
performance cost. There are places where this tradeoff is unclear - for
example, I find it somewhat clearer to write a small set of equations
using linear algebra, but numpy&amp;rsquo;s overhead on small matrices makes it
run slower than writing each equation out by hand. Furthermore, books
such Zarchan present the written out form, not the linear algebra form.
It is hard for me to choose which presentation is &amp;lsquo;clearer&amp;rsquo; - it depends
on the audience. In that case I usually opt for the faster implementation.</source>
          <target state="translated">我的目标主要是教育学-我选择清晰的代码以一对一的方式匹配相关文本中的方程式，即使这样做会降低性能。在某些地方，这种权衡尚不明确-例如，我发现使用线性代数编写一小组方程式更为清晰，但是numpy在小型矩阵上的开销使其运行速度比手动编写每个方程式慢。此外，诸如Zarchan之类的书本是书面形式，而不是线性代数形式。对于我来说，很难选择哪种显示更&amp;ldquo;清晰&amp;rdquo;-这取决于听众。在那种情况下，我通常选择更快的实现。</target>
        </trans-unit>
        <trans-unit id="fa8af4cb23ae77c128a4a33e6c038f3d5d3fe115" translate="yes" xml:space="preserve">
          <source>My book &lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&lt;/a&gt;
uses this library, and is the place to go if you are trying to learn
about Kalman filtering and/or this library. These two are not exactly in
sync - my normal development cycle is to add files here, test them, figure
out how to present them pedalogically, then write the appropriate section
or chapter in the book. So there is code here that is not discussed
yet in the book.</source>
          <target state="translated">我的书&lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&lt;/a&gt; 使用此库，是尝试学习Kalman过滤和/或此库的地方。两者并不完全同步-我的正常开发周期是在此处添加文件，对其进行测试，弄清楚如何按顺序呈现它们，然后在书中撰写相应的章节。因此，这里有尚未在本书中讨论的代码。</target>
        </trans-unit>
        <trans-unit id="24162d16555bd8804ec6c655dbbca2fb05c22443" translate="yes" xml:space="preserve">
          <source>Note: I make no guarantees that everything works if you install from here.
I&amp;rsquo;m the only developer, and so I don&amp;rsquo;t worry about dev/release branches and
the like. Unless I fix a bug for you and tell you to get this version because
I haven&amp;rsquo;t made a new release yet, I strongly advise not installing from git.</source>
          <target state="translated">注意：如果您从此处安装，我不保证一切都会正常。我是唯一的开发人员，因此不必担心dev / release分支之类的问题。除非我没有为您修复错误并告诉您获得此版本，因为我还没有发布新版本，否则我强烈建议不要从git安装。</target>
        </trans-unit>
        <trans-unit id="a94bc79395b7f9e096a0e3083d5e99d870902600" translate="yes" xml:space="preserve">
          <source>Now, create the filter</source>
          <target state="translated">现在,创建过滤器</target>
        </trans-unit>
        <trans-unit id="4428df60996dd395af6c51238f43c71d4400a7fa" translate="yes" xml:space="preserve">
          <source>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</source>
          <target state="translated">特此免费授予获得此软件和相关文档文件（&amp;ldquo;软件&amp;rdquo;）副本的任何人无限制使用软件的权利，包括但不限于使用，复制，修改，合并的权利，发布，分发，再许可和/或出售本软件的副本，并允许具备软件的人员这样做，但须满足以下条件：</target>
        </trans-unit>
        <trans-unit id="c89209cb3cdced2b4e97399f88e4af894bfd8485" translate="yes" xml:space="preserve">
          <source>Plan for dropping Python 2.7 support</source>
          <target state="translated">计划放弃对Python 2.7的支持</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">参考文献</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">所需经费</target>
        </trans-unit>
        <trans-unit id="f5470597044f9881eb58bf21ebb16608cd981bed" translate="yes" xml:space="preserve">
          <source>Sorry, that is the extent of the documentation here. However, the library
is broken up into subdirectories: gh, kalman, memory, leastsq, and so on.
Each subdirectory contains python files relating to that form of filter.
The functions and methods contain pretty good docstrings on use.</source>
          <target state="translated">抱歉,这里的文档就到此为止。不过,这个库被分成了几个子目录:gh、kalman、memory、leastsq等等。每个子目录都包含了与该过滤器形式相关的python文件。函数和方法包含了相当好的使用文档。</target>
        </trans-unit>
        <trans-unit id="e07e66ec2ec5d10f836f2ac4a05173041f8d092a" translate="yes" xml:space="preserve">
          <source>Sphinx generated documentation lives at &lt;a href=&quot;http://filterpy.readthedocs.org/&quot;&gt;http://filterpy.readthedocs.org/&lt;/a&gt;.
Generation is triggered by git when I do a check in, so this will always
be bleeding edge development version - it will often be ahead of the
released version.</source>
          <target state="translated">Sphinx生成的文档位于&lt;a href=&quot;http://filterpy.readthedocs.org/&quot;&gt;http://filterpy.readthedocs.org/&lt;/a&gt;。当我签入时，生成是由git触发的，因此这将始终是最前沿的开发版本-它通常会在发行版本之前。</target>
        </trans-unit>
        <trans-unit id="ba51f3c923b832e2cb3feca36180c8813bdbec40" translate="yes" xml:space="preserve">
          <source>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.TION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</source>
          <target state="translated">本软件按&amp;ldquo;原样&amp;rdquo;提供，不提供任何形式的明示或暗示担保，包括但不限于对适销性，特定目的的适用性和非侵权性的保证。无论是由于软件，使用或其他方式产生的，与之有关或与之有关的合同，侵权或其他形式的任何索赔，损害或其他责任，作者或版权所有者概不负责。源自，出于或与软件或软件的使用或其他交易有关或与之相关的合同，侵权或其他软件。</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">测试</target>
        </trans-unit>
        <trans-unit id="2770edfa17d1ba1518644752acbba767797d8840" translate="yes" xml:space="preserve">
          <source>The MIT License (MIT)</source>
          <target state="translated">麻省理工学院许可证(MIT)</target>
        </trans-unit>
        <trans-unit id="abf94dbab29db68325894cd60a65f3c2a1fc56fa" translate="yes" xml:space="preserve">
          <source>The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.</source>
          <target state="translated">上述版权声明和本许可声明应包含在软件的所有副本或主要部分中。</target>
        </trans-unit>
        <trans-unit id="ab40192173a47c8e5ce7406412a220e2a474ada7" translate="yes" xml:space="preserve">
          <source>The most general installation is just to use pip, which should come with
any modern Python distribution.</source>
          <target state="translated">最一般的安装就是使用pip,任何现代的Python发行版都应该自带pip。</target>
        </trans-unit>
        <trans-unit id="24d855a043cf9286f92b9e45c2eac0cf512060ff" translate="yes" xml:space="preserve">
          <source>This is code I am developing in conjunction with my book Kalman and
Bayesian Filter in Python, which you can read/download at
&lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&lt;/a&gt;</source>
          <target state="translated">这是我与我的《用Python编写的Kalman和贝叶斯滤波器》一书一起开发的代码，您可以在&lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/中&lt;/a&gt;阅读/下载。</target>
        </trans-unit>
        <trans-unit id="5b2920fd5055a135502dd8014d61c32dbbe26640" translate="yes" xml:space="preserve">
          <source>This library provides Kalman filtering and various related optimal and
non-optimal filtering software written in Python. It contains Kalman
filters, Extended Kalman filters, Unscented Kalman filters, Kalman
smoothers, Least Squares filters, fading memory filters, g-h filters,
discrete Bayes, and more.</source>
          <target state="translated">该库提供了用Python编写的卡尔曼滤波和各种相关的最优和非最优滤波软件。它包含卡尔曼滤波、扩展卡尔曼滤波、无痕卡尔曼滤波、卡尔曼平滑器、最小二乘滤波、渐进记忆滤波、g-h滤波、离散贝叶斯等。</target>
        </trans-unit>
        <trans-unit id="e13f7bb9ae937b5d5cd0d8b07fd0aa0ec1e81f48" translate="yes" xml:space="preserve">
          <source>This library uses NumPy, SciPy, Matplotlib, and Python.</source>
          <target state="translated">这个库使用了NumPy、SciPy、Matplotlib和Python。</target>
        </trans-unit>
        <trans-unit id="6bf801da2d6dc208fc60fa6f2e476b5d0f913f6e" translate="yes" xml:space="preserve">
          <source>Why 3.5+, and not 3.4+? 3.5 introduced the matrix multiply symbol,
and I want my code to take advantage of it. Plus, to be honest,
I&amp;rsquo;m being selfish. I don&amp;rsquo;t want to spend my life supporting this
package, and moving as far into the present as possible means
a few extra years before the Python version I choose becomes
hopelessly dated and a liability. I recognize this makes people
running the default Python in their linux distribution more
painful. All I can say is I did not decide to do the Python
3 fork, and I don&amp;rsquo;t have the time to support the bifurcation
any longer.</source>
          <target state="translated">为什么是3.5+，而不是3.4+？3.5引入了矩阵乘法符号，我希望我的代码能够利用它。另外，老实说，我很自私。我不想花费我的一生来支持这个程序包，而尽可能远地发展到现在意味着在我选择的Python版本过时且过时之前要承担几年的责任。我认识到这使人们在Linux发行版中运行默认Python更加痛苦。我只能说我没有决定做Python 3分支，而且我没有时间再支持分叉了。</target>
        </trans-unit>
        <trans-unit id="7bda3972fd645f4aa5fd7bc9c0f516b27fc7fa48" translate="yes" xml:space="preserve">
          <source>and then install with:</source>
          <target state="translated">然后用安装。</target>
        </trans-unit>
        <trans-unit id="f6762bfd6156e1d6ad2d093399eec4c20a937173" translate="yes" xml:space="preserve">
          <source>at the
command line.</source>
          <target state="translated">在命令行中。</target>
        </trans-unit>
        <trans-unit id="30b49ad158449a6fb7703af823510598668f8ad0" translate="yes" xml:space="preserve">
          <source>conda config &amp;ndash;add channels conda-forge</source>
          <target state="translated">conda config &amp;ndash;添加通道conda-forge</target>
        </trans-unit>
        <trans-unit id="99422a0a2caacfadcbdf22e2c4ec04c454b2eea3" translate="yes" xml:space="preserve">
          <source>conda install filterpy</source>
          <target state="translated">康达安装filterpy</target>
        </trans-unit>
        <trans-unit id="0e043421bf3470cb731f4c32448c91e870f04998" translate="yes" xml:space="preserve">
          <source>py.test</source>
          <target state="translated">py.test</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
