<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/asynqueue/">
    <body>
      <group id="asynqueue">
        <trans-unit id="66179e04cd581cd55472563ee8587ce658020aeb" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing based on the &lt;em&gt;Twisted&lt;/em&gt; framework, with task
prioritization and a powerful worker interface. Worker implementations
are included for running tasks asynchronously in the main thread, in
separate threads, in separate Python interpreters (multiprocessing),
and even on separate devices using Twisted's Asynchronous Message
Protocol.</source>
          <target state="translated">基于&lt;em&gt;Twisted&lt;/em&gt;框架的异步任务队列，具有任务优先级和强大的工作程序接口。包含工作程序实现，以便在主线程，单独的线程，单独的Python解释器（多处理）中甚至在使用Twisted异步消息协议的单独设备上异步运行任务。</target>
        </trans-unit>
        <trans-unit id="6128a235c0fd39685f6b5b99b7fadbfec5342418" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing with Twisted: threaded, multicore, and remote.</source>
          <target state="translated">使用Twisted的异步任务队列:线程、多核和远程。</target>
        </trans-unit>
        <trans-unit id="959199c5e1b1d30e53adfe003d916868a2a40023" translate="yes" xml:space="preserve">
          <source>Includes an example package
&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; that generates
Mandelbrot set images, row by row, demonstrating the power of
asynchronous multi-core processing. An instance of
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;
dispatches the computations for each row of pixels to workers running
on separate Python processes. The color-mapped RGB results are
collected as they come back and intelligently buffered for iterating
in a proper sequence to a third-party PNG library that wouldn't
ordinarily play nice with Twisted.</source>
          <target state="translated">包括一个示例软件包&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt;，该软件包 逐行生成Mandelbrot设置映像，展示了异步多核处理的强大功能。&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;实例将 像素的每一行的计算分派给在单独的Python进程上运行的工作程序。色彩映射的RGB结果在返回时被收集，并被智能缓冲，以适当的顺序迭代到第三方PNG库，该库通常在Twisted中无法正常使用。</target>
        </trans-unit>
        <trans-unit id="85daa8d0fd14d30741e29b572dbfda1d090a6fc9" translate="yes" xml:space="preserve">
          <source>Includes deferred iteration capability: Calling a task that returns an
iterator can return a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;
instead, which does the iteration in a Twisted-friendly fashion, even
over a network connection. You can also supply an object conforming to
Twisted's &lt;em&gt;IConsumer&lt;/em&gt; interface and iterations will be fed to it as they
become available.</source>
          <target state="translated">包括延迟的迭代功能：调用返回迭代器的任务可以 改为返回 &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;，即使在网络连接上，它也以Twisted友好的方式进行迭代。您还可以提供一个符合Twisted的&lt;em&gt;IConsumer&lt;/em&gt;接口的对象，并且当迭代可用时，将向其提供迭代。</target>
        </trans-unit>
        <trans-unit id="169b63918b76adefc1f65fe3ec1bfb21b732f5ab" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;util&lt;/em&gt; module contains a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt;
object that makes the import worthwhile all on its own. You can use
its &lt;strong&gt;put&lt;/strong&gt; method to track Twisted &lt;em&gt;Deferred&lt;/em&gt; objects without inserting
anything into their callback chains. Then you can wait in non-blocking
Twisted fashion for all, any, or some of the tracked deferreds to fire
(again, without getting tangled up with any of their callbacks) using
the tracker's &lt;strong&gt;deferToAll&lt;/strong&gt;, &lt;strong&gt;deferToAny&lt;/strong&gt;, and &lt;strong&gt;deferUntilFewer&lt;/strong&gt;
methods.</source>
          <target state="translated">该&lt;em&gt;UTIL&lt;/em&gt;模块包含 &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt; 对象，使自身的进口值得所有。您可以使用其&lt;strong&gt;put&lt;/strong&gt;方法来跟踪Twisted &lt;em&gt;Deferred&lt;/em&gt;对象，而无需在其回调链中插入任何内容。然后，您可以使用跟踪器的&lt;strong&gt;deferToAll&lt;/strong&gt;，&lt;strong&gt;deferToAny&lt;/strong&gt;和&lt;strong&gt;deferUntilFewer&lt;/strong&gt; 方法以无阻塞Twisted方式等待所有，任何或一些跟踪的延迟触发（再次，不与它们的任何回调纠结）。</target>
        </trans-unit>
        <trans-unit id="eb7d5439f2d9250bf009f7a2be477526c15559f6" translate="yes" xml:space="preserve">
          <source>There was some effort toward Python 3 compatiblity a while ago, but
it's still not yet supported.</source>
          <target state="translated">前段时间朝着Python 3兼容的方向做了一些努力,但现在还不支持。</target>
        </trans-unit>
        <trans-unit id="9f5ed9620d68c79dd8003b36b7a5bc59d3c01f81" translate="yes" xml:space="preserve">
          <source>You can try things out after installation by running &lt;code&gt;mcmandelbrot&lt;/code&gt;
(with a few options and arguments) from the console. The output of the
script is a PNG file, which you can view by piping to the free Feh
image viewer: Just add &lt;code&gt;|feh -&lt;/code&gt; at the end of the command line.</source>
          <target state="translated">您可以在安装后通过 从控制台运行 &lt;code&gt;mcmandelbrot&lt;/code&gt; （带有一些选项和参数）来尝试一下。脚本的输出是一个PNG文件，您可以通过管道传输到免费的Feh图像查看器进行查看：只需在命令行末尾添加 &lt;code&gt;|feh -&lt;/code&gt; feh-即可。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
