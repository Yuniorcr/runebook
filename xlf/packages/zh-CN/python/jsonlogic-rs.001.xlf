<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/jsonlogic-rs/">
    <body>
      <group id="jsonlogic-rs">
        <trans-unit id="d73737adc4cecff4211f205b3ff43c0275a9690b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Available Via&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;可通过&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="100f54ab7016d08c776bf5eb400bb8bf401b3295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Language&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;语言&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d978cf366a977f9b43bc86d84f453fcb5ba09e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; from our CI experiences, this may not work for Python 3.8 on Windows.
If you are running this on a Windows machine and can confirm whether or not
this works, let us know!</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;根据我们的CI经验，这可能不适用于Windows上的Python 3.8。如果您是在Windows计算机上运行此程序，并且可以确认它是否有效，请告诉我们！</target>
        </trans-unit>
        <trans-unit id="e0e4b44ab668c7293399a8ca9a5e825b567c473b" translate="yes" xml:space="preserve">
          <source>All operations are tested using our own test suite in Rust as well as the
shared tests for all JsonLogic implementations defined &lt;a href=&quot;http://jsonlogic.com/tests.json&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">使用Rust中我们自己的测试套件以及&lt;a href=&quot;http://jsonlogic.com/tests.json&quot;&gt;此处&lt;/a&gt;定义的所有JsonLogic实现的共享测试，对所有操作进行了测试。</target>
        </trans-unit>
        <trans-unit id="5831acda4a827b8389227bfef92bb8d176d8e4ca" translate="yes" xml:space="preserve">
          <source>An example of chaining multiple results:</source>
          <target state="translated">一个链式多结果的例子。</target>
        </trans-unit>
        <trans-unit id="d37ac01df24b6b4910d8b5723cc37382d0f3e194" translate="yes" xml:space="preserve">
          <source>Being built in Rust, we are able to provide the package in a variety of
languages. The table below describes current language support:</source>
          <target state="translated">由于是用Rust构建的,我们能够提供多种语言的软件包。下表描述了当前的语言支持。</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">建筑物</target>
        </trans-unit>
        <trans-unit id="6c98e86fc49b32d64a3b4b449a8cdd37ce4e8e8d" translate="yes" xml:space="preserve">
          <source>Cargo</source>
          <target state="translated">货物</target>
        </trans-unit>
        <trans-unit id="97645330a1a0a67a4d21bf91c8598ee8ee4c9a16" translate="yes" xml:space="preserve">
          <source>Commandline</source>
          <target state="translated">命令行</target>
        </trans-unit>
        <trans-unit id="7ba231db8b69c78c3126e7c1ac979c8612fb475a" translate="yes" xml:space="preserve">
          <source>If a wheel does &lt;em&gt;not&lt;/em&gt; exist for your system, this will attempt to build the
package. In order for the package to build successfully, you MUST have Rust
installed on your local system, and &lt;code&gt;cargo&lt;/code&gt; MUST be present in your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">如果您的系统&lt;em&gt;不&lt;/em&gt;存在轮子，这将尝试构建软件包。为了成功构建软件包，您必须在本地系统上安装Rust，并且 &lt;code&gt;PATH&lt;/code&gt; 中必须存在 &lt;code&gt;cargo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8740af5f27e71662805094227a27bf222311fa76" translate="yes" xml:space="preserve">
          <source>If you just want to use the commandline &lt;code&gt;jsonlogic&lt;/code&gt; binary:</source>
          <target state="translated">如果您只想使用命令行 &lt;code&gt;jsonlogic&lt;/code&gt; 二进制文件：</target>
        </trans-unit>
        <trans-unit id="12bb7b639e3ab6dc3d745e4ba09f609bdf740848" translate="yes" xml:space="preserve">
          <source>If you would like to build or test the Python distribution, Python 3.6 or
newer must be available in your &lt;code&gt;PATH&lt;/code&gt;. The &lt;code&gt;venv&lt;/code&gt; module must be part of the
Python distribution (looking at you, Ubuntu).</source>
          <target state="translated">如果要构建或测试Python发行版，则 &lt;code&gt;PATH&lt;/code&gt; 中必须提供Python 3.6或更高版本。该 &lt;code&gt;venv&lt;/code&gt; 模块必须是Python的分布（看你的，Ubuntu）的一部分。</target>
        </trans-unit>
        <trans-unit id="21d30629145c689ea13de28256c6ba29f628644e" translate="yes" xml:space="preserve">
          <source>If you would like to run tests for the WASM package, &lt;code&gt;node&lt;/code&gt; 10 or newer must be
available in your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">如果要对WASM软件包运行测试，则 &lt;code&gt;PATH&lt;/code&gt; 中必须有 &lt;code&gt;node&lt;/code&gt; 10或更高版本。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="820d0909e9b671cc84d8d89d8c976f60005be210" translate="yes" xml:space="preserve">
          <source>JavaScript (as WASM)</source>
          <target state="translated">JavaScript(作为WASM)</target>
        </trans-unit>
        <trans-unit id="1ca76be7b84d714e17e61b65c84bec4810f63dd5" translate="yes" xml:space="preserve">
          <source>Javascript</source>
          <target state="translated">Javascript</target>
        </trans-unit>
        <trans-unit id="42711534b8f39ba938bd6719c707f2031c439f7d" translate="yes" xml:space="preserve">
          <source>JsonLogic implemented with a Rust backend</source>
          <target state="translated">用Rust后端实现的JsonLogic。</target>
        </trans-unit>
        <trans-unit id="d81381ad21a195e6a8edb90dde47a36fc7e985dc" translate="yes" xml:space="preserve">
          <source>Node Package via &lt;a href=&quot;https://www.npmjs.com/package/@bestow/jsonlogic-rs&quot;&gt;NPM&lt;/a&gt;</source>
          <target state="translated">通过&lt;a href=&quot;https://www.npmjs.com/package/@bestow/jsonlogic-rs&quot;&gt;NPM的&lt;/a&gt;节点包</target>
        </trans-unit>
        <trans-unit id="e1b33239879f037fa7056be2c1c53971cb54787e" translate="yes" xml:space="preserve">
          <source>Node/Browser</source>
          <target state="translated">节点/浏览器</target>
        </trans-unit>
        <trans-unit id="7924070d81775e573c33d271a1576618206c58f7" translate="yes" xml:space="preserve">
          <source>Note that the package is distributed as a node package, so you'll need to use
&lt;code&gt;browserify&lt;/code&gt;, &lt;code&gt;webpack&lt;/code&gt;, or similar to install for the browser.</source>
          <target state="translated">请注意，软件包分发为节点程序包，所以你需要使用 &lt;code&gt;browserify&lt;/code&gt; ， &lt;code&gt;webpack&lt;/code&gt; ，或者安装的浏览器类似。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">先决条件</target>
        </trans-unit>
        <trans-unit id="1cb0bee5478facc7715136ce6ca34b0fe11136cb" translate="yes" xml:space="preserve">
          <source>Project Status</source>
          <target state="translated">项目状态</target>
        </trans-unit>
        <trans-unit id="33e72da85f21769ca9a8ee3181ea9def0321f98f" translate="yes" xml:space="preserve">
          <source>PyPI</source>
          <target state="translated">PyPI</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">蟒蛇</target>
        </trans-unit>
        <trans-unit id="3db74efa0be8ce0796c674c7c44fd1c34852ed79" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;jsonlogic --help&lt;/code&gt; the most up-to-date usage.</source>
          <target state="translated">运行 &lt;code&gt;jsonlogic --help&lt;/code&gt; 最新用法。</target>
        </trans-unit>
        <trans-unit id="e2ae20d9ae7fcacb605c03c198e0a1c51d446f50" translate="yes" xml:space="preserve">
          <source>Rust</source>
          <target state="translated">锈蚀</target>
        </trans-unit>
        <trans-unit id="94c93370113da1530dd030935b611c10a40030d4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Building&quot;&gt;Building&lt;/a&gt; below for more details.</source>
          <target state="translated">有关更多详细信息，请参见下面的&lt;a href=&quot;#Building&quot;&gt;构建&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58fd115d1b08adcd81e3cd4063b89d341a1059f9" translate="yes" xml:space="preserve">
          <source>Supports Python 3.6+.</source>
          <target state="translated">支持Python 3.6+。</target>
        </trans-unit>
        <trans-unit id="6d970f6d6d932d6adca15b0d8a70c491ee266519" translate="yes" xml:space="preserve">
          <source>The built WASM package will be in &lt;code&gt;js/&lt;/code&gt;. This package is directly importable
from &lt;code&gt;node&lt;/code&gt;, but needs to be browserified in order to be used in the browser.</source>
          <target state="translated">内置的WASM软件包将在 &lt;code&gt;js/&lt;/code&gt; 。该包可直接从 &lt;code&gt;node&lt;/code&gt; 导入，但需要进行浏览器化才能在浏览器中使用。</target>
        </trans-unit>
        <trans-unit id="2c178a7557e7b2677d86c1f802afe02c592d7dcf" translate="yes" xml:space="preserve">
          <source>The python distribution consists both of the C extension generated from the
Rust and a thin wrapper found in &lt;code&gt;py/jsonlogic_rs/&lt;/code&gt;. &lt;code&gt;make develop-py&lt;/code&gt; will
compile the C extension and place it in that directory, where it will be
importable by your local venv. When building wheels, the wrapper and the C
extension are all packaged together into the resultant wheel, which will
be found in &lt;code&gt;dist/&lt;/code&gt;. When building an sdist, the Rust extension is not compiled.
The Rust and Python source are distributed together in a &lt;code&gt;.tar.gz&lt;/code&gt; file, again
found in &lt;code&gt;dist/&lt;/code&gt;.</source>
          <target state="translated">python发行版包括从Rust生成的C扩展名和在 &lt;code&gt;py/jsonlogic_rs/&lt;/code&gt; 找到的瘦包装器。makedevelop &lt;code&gt;make develop-py&lt;/code&gt; 将编译C扩展名并将其放置在该目录中，本地venv可将其导入。组装车轮时，包装纸和C扩展件都打包在一起，形成了最终的车轮，可以在 &lt;code&gt;dist/&lt;/code&gt; 找到。构建sdist时，不会编译Rust扩展。 Rust和Python源代码一起分布在 &lt;code&gt;.tar.gz&lt;/code&gt; 文件中，该文件再次在 &lt;code&gt;dist/&lt;/code&gt; 找到。</target>
        </trans-unit>
        <trans-unit id="1149e91090a0196701c09d8b14709d84f71f07a4" translate="yes" xml:space="preserve">
          <source>This is an implementation of  the &lt;a href=&quot;http://jsonlogic.com/&quot;&gt;JsonLogic&lt;/a&gt; specification in Rust.</source>
          <target state="translated">这是Rust中&lt;a href=&quot;http://jsonlogic.com/&quot;&gt;JsonLogic&lt;/a&gt;规范的实现。</target>
        </trans-unit>
        <trans-unit id="f8cd888e4ce7b8d496c4cae463fdbe3fee51e6d2" translate="yes" xml:space="preserve">
          <source>This will automatically create a virtual environment in &lt;code&gt;venv/&lt;/code&gt;, install
the necessary packages, and then install &lt;code&gt;jsonlogic_rs&lt;/code&gt; into that environment.</source>
          <target state="translated">这将在 &lt;code&gt;venv/&lt;/code&gt; 自动创建一个虚拟环境，安装必要的软件包，然后将 &lt;code&gt;jsonlogic_rs&lt;/code&gt; 安装到该环境中。</target>
        </trans-unit>
        <trans-unit id="28a12e26040ce743a2ef0e4f26c056717346a6ef" translate="yes" xml:space="preserve">
          <source>To build a production source distribution:</source>
          <target state="translated">要建立生产源头分布。</target>
        </trans-unit>
        <trans-unit id="da7cfdbe3c23dddf3ce9ce6243b18ddbb084a6db" translate="yes" xml:space="preserve">
          <source>To build a wheel (specific to your current system architecture and python
version):</source>
          <target state="translated">构建一个轮子(针对你当前的系统架构和python版本)。</target>
        </trans-unit>
        <trans-unit id="023a3af5b4d5274607ce8f5dbb00a0b75bbec1b7" translate="yes" xml:space="preserve">
          <source>To build the Rust library, just run &lt;code&gt;cargo build&lt;/code&gt;.</source>
          <target state="translated">要构建Rust库，只需运行 &lt;code&gt;cargo build&lt;/code&gt; 即可。</target>
        </trans-unit>
        <trans-unit id="e041e86f81a8736f07aea797e990e57477e7f11b" translate="yes" xml:space="preserve">
          <source>To perform a dev install of the Python package, run:</source>
          <target state="translated">要执行Python包的开发安装,运行。</target>
        </trans-unit>
        <trans-unit id="67c3e40438629ab02e0df13e2c978ce9b971d9c4" translate="yes" xml:space="preserve">
          <source>To use as a Rust library, add to your &lt;code&gt;Cargo.toml&lt;/code&gt;:</source>
          <target state="translated">要用作Rust库，请添加到您的 &lt;code&gt;Cargo.toml&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="05246491325c5d174b82e5fe85d5788c1a164aba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;jsonlogic&lt;/code&gt; on the cmdline to explore an API:</source>
          <target state="translated">在cmdline上使用 &lt;code&gt;jsonlogic&lt;/code&gt; 探索API：</target>
        </trans-unit>
        <trans-unit id="9b3f1e07a2364545d66c31d18234666c8c789ce0" translate="yes" xml:space="preserve">
          <source>We also implement the &lt;code&gt;?:&lt;/code&gt;, which is not described in that specification
but is a direct alias for &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="translated">我们还实现了 &lt;code&gt;?:&lt;/code&gt; ，该规范中未进行描述，但它是 &lt;code&gt;if&lt;/code&gt; 的直接别名。</target>
        </trans-unit>
        <trans-unit id="0643c216d42fa73b0cea0ebc5ebe54b22658d5da" translate="yes" xml:space="preserve">
          <source>We are working on adding new operations with improved type safety, as well
as the ability to define functions as JsonLogic. We will communicate with
the broader JsonLogic community to see if we can make them part of the
standard as we do so.</source>
          <target state="translated">我们正在努力增加新的操作,提高类型安全性,以及将函数定义为JsonLogic的能力。我们将与更广泛的JsonLogic社区进行沟通,看是否能将其作为标准的一部分。</target>
        </trans-unit>
        <trans-unit id="05920badbde1bebce61d394ec357c54fbfb91537" translate="yes" xml:space="preserve">
          <source>We implement 100% of the standard supported operations defined &lt;a href=&quot;http://jsonlogic.com/operations.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">我们执行&lt;a href=&quot;http://jsonlogic.com/operations.html&quot;&gt;此处&lt;/a&gt;定义的100％标准支持的操作。</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">WebAssembly</target>
        </trans-unit>
        <trans-unit id="7e409f559bf3a92a805cf96e2714d0e6c93a3e0c" translate="yes" xml:space="preserve">
          <source>Wheels are distributed for many platforms, so you can often just run:</source>
          <target state="translated">轮子分布在很多平台,所以你经常可以随便跑。</target>
        </trans-unit>
        <trans-unit id="c2b74be4837907b6b90281b88fc05f487a5c71ca" translate="yes" xml:space="preserve">
          <source>You can build a debug WASM release with</source>
          <target state="translated">你可以用以下方法建立一个调试WASM版本</target>
        </trans-unit>
        <trans-unit id="899ee7d3fca1f14acdc3476dabc461f19e33d27e" translate="yes" xml:space="preserve">
          <source>You can build a production WASM release with</source>
          <target state="translated">你可以用以下方法构建一个生产型的WASM版本</target>
        </trans-unit>
        <trans-unit id="9414810992a02fa99fa86e102a0dc5c9dfead22b" translate="yes" xml:space="preserve">
          <source>You can create a release build with &lt;code&gt;make build&lt;/code&gt;.</source>
          <target state="translated">您可以使用 &lt;code&gt;make build&lt;/code&gt; 创建发布版本。</target>
        </trans-unit>
        <trans-unit id="bb2708a21d417e46c818816fd592fe180c4303d0" translate="yes" xml:space="preserve">
          <source>You can install JsonLogic using npm or yarn. In NPM:</source>
          <target state="translated">你可以使用npm或yarn安装JsonLogic。在NPM中。</target>
        </trans-unit>
        <trans-unit id="1d42a5e0e52895f4ededd30fcb8e5c9091c0eb72" translate="yes" xml:space="preserve">
          <source>You must have Rust installed and &lt;code&gt;cargo&lt;/code&gt; available in your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">您必须已安装Rust，并且 &lt;code&gt;PATH&lt;/code&gt; 中有可用的 &lt;code&gt;cargo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="797c21e1f5e332d42b2af953b9e841d6a3ffa0a9" translate="yes" xml:space="preserve">
          <source>json-logic-rs</source>
          <target state="translated">json-logic-rs</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
