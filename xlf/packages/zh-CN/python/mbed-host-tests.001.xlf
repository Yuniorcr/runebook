<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/mbed-host-tests/">
    <body>
      <group id="mbed-host-tests">
        <trans-unit id="73f206237358af4e214f2ad31e03066659a22927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;IP_address&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;port_number&amp;gt;&lt;/code&gt; - IP address and port of remote resource manager.</source>
          <target state="translated">&lt;code&gt;&amp;lt;IP_address&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;port_number&amp;gt;&lt;/code&gt; -远程资源管理器的IP地址和端口。</target>
        </trans-unit>
        <trans-unit id="2315dd8635db49d10d5ff717a07556886c485353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;config_name&amp;gt;&lt;/code&gt; - ether pre-defined CONFIG_NAME from mbedfm or a local config file for the Fast Models.</source>
          <target state="translated">&lt;code&gt;&amp;lt;config_name&amp;gt;&lt;/code&gt; -来自mbedfm的以太预定义的CONFIG_NAME或快速模型的本地配置文件。</target>
        </trans-unit>
        <trans-unit id="17c0b030ceb8c6259d29f69c159b24b1152ff97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;module_name&amp;gt;&lt;/code&gt; - name of Python module to load as remote resource manager.</source>
          <target state="translated">&lt;code&gt;&amp;lt;module_name&amp;gt;&lt;/code&gt; -要作为远程资源管理器加载的Python模块的名称。</target>
        </trans-unit>
        <trans-unit id="62e60b103cf49cca316e125268312fad8ae04e38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--sync=-1&lt;/code&gt;- &lt;code&gt;__sync&lt;/code&gt; packets will be sent unless we will reach timeout or proper response is sent from DUT.</source>
          <target state="translated">&lt;code&gt;--sync=-1&lt;/code&gt; - &lt;code&gt;__sync&lt;/code&gt; 数据包将被发送，除非我们将达到超时或适当的响应被从DUT发送。</target>
        </trans-unit>
        <trans-unit id="1bde794eaa5ce5cdd871c8a8ed159f2745b594f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--sync=0&lt;/code&gt; - No sync packets will be sent to DUT.</source>
          <target state="translated">&lt;code&gt;--sync=0&lt;/code&gt; -没有同步数据包将发送到DUT。</target>
        </trans-unit>
        <trans-unit id="9202d111f81be25b256c55649110d666c93d381e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--sync=N&lt;/code&gt; - Where N is integer &amp;gt; 0. Send up to N &lt;code&gt;__sync&lt;/code&gt; packets to target platform. Response is sent unless we get response from target platform or timeout occurs.</source>
          <target state="translated">&lt;code&gt;--sync=N&lt;/code&gt; -其中N是整数&amp;gt;0。最多将N个 &lt;code&gt;__sync&lt;/code&gt; 数据包发送到目标平台。除非我们从目标平台获得响应或发生超时，否则将发送响应。</target>
        </trans-unit>
        <trans-unit id="4b945ede260654e0f827dbfaa6e83ea7b0de2d24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONN&lt;/code&gt; - connection process (pooling for connection source e.g. serial port),</source>
          <target state="translated">&lt;code&gt;CONN&lt;/code&gt; -连接过程（连接源（例如串行端口）的池），</target>
        </trans-unit>
        <trans-unit id="aa36907e745e96b081ba0cf5430162f2088874fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COPY&lt;/code&gt; - host test plugins, type &lt;code&gt;CopyMethod&lt;/code&gt; of the plugin,</source>
          <target state="translated">&lt;code&gt;COPY&lt;/code&gt; -主机测试插件，类型 &lt;code&gt;CopyMethod&lt;/code&gt; 的插件，</target>
        </trans-unit>
        <trans-unit id="252ece708e3ba5fff9ea90f1c513c684f79d7ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERR&lt;/code&gt; (error).</source>
          <target state="translated">&lt;code&gt;ERR&lt;/code&gt; （错误）。</target>
        </trans-unit>
        <trans-unit id="0324877f43e21edc185859f23fc35c8063d0a492" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HTST&lt;/code&gt; - host test object, HostTestBase derived object,</source>
          <target state="translated">&lt;code&gt;HTST&lt;/code&gt; -主机测试对象，HostTestBase派生对象，</target>
        </trans-unit>
        <trans-unit id="ae0c1f99a757da1a18a9f18f9a7c5c896def47d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INF&lt;/code&gt; (info),</source>
          <target state="translated">&lt;code&gt;INF&lt;/code&gt; （信息），</target>
        </trans-unit>
        <trans-unit id="b5068e5fbd010807231f1efd39c83bf9820c804d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PLGN&lt;/code&gt; - host test plugins, type &lt;code&gt;BasePlugin&lt;/code&gt; of the plugin,</source>
          <target state="translated">&lt;code&gt;PLGN&lt;/code&gt; -主机测试插件，键入插件的 &lt;code&gt;BasePlugin&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="68dcc3ab0c52c817a21c29b3f4309a9a3e6599ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REST&lt;/code&gt; - host test plugins, type &lt;code&gt;ResetMethod&lt;/code&gt; of the plugin,</source>
          <target state="translated">&lt;code&gt;REST&lt;/code&gt; -主机测试插件，键入插件的 &lt;code&gt;ResetMethod&lt;/code&gt; ，</target>
        </trans-unit>
        <trans-unit id="d6504288f35fb136d6facff97c815828c12809b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RXD&lt;/code&gt; (host's RX channel, from DUT).</source>
          <target state="translated">&lt;code&gt;RXD&lt;/code&gt; （来自DUT的主机的RX通道）。</target>
        </trans-unit>
        <trans-unit id="be48e576ff325b898d77d4109b00a276a9b5f49e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RXD&lt;/code&gt; channel emitted &lt;code&gt;{{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RXD&lt;/code&gt; 发出RXD频道 &lt;code&gt;{{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4eebcb9ceef0a9470046493bd884b5166dee8de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SERI&lt;/code&gt; - serial port wrapper with standard read, write, flush interface,</source>
          <target state="translated">&lt;code&gt;SERI&lt;/code&gt; -带有标准读，写，刷新接口的串行端口包装器，</target>
        </trans-unit>
        <trans-unit id="525831b4e82343e67b3190b1ce9c195f0b1d1201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TXD&lt;/code&gt; (host's TX channel, to DUT).</source>
          <target state="translated">&lt;code&gt;TXD&lt;/code&gt; （主机的TX通道，到DUT）。</target>
        </trans-unit>
        <trans-unit id="8d94a283f05853dc0c1c67fa44a75a42ed73e149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRN&lt;/code&gt; (warning),</source>
          <target state="translated">&lt;code&gt;WRN&lt;/code&gt; （警告），</target>
        </trans-unit>
        <trans-unit id="a424516ef2e22ca2f296966a65c99bdb62aff720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[1455218713.87][CONN][RXD] {{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;[1455218713.87][CONN][RXD] {{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3ebf8ec5cbec6661a8f3fef93bbd7aae0404f050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[timestamp][source][level]&lt;/code&gt; - new log format, where:</source>
          <target state="translated">&lt;code&gt;[timestamp][source][level]&lt;/code&gt; -新的日志格式，其中：</target>
        </trans-unit>
        <trans-unit id="aebb6375919652bf3cd4cec03e3f2f2c7f08969b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__coverage_start&lt;/code&gt; - sent by DUT, coverage data.</source>
          <target state="translated">&lt;code&gt;__coverage_start&lt;/code&gt; -DUT发送的coverage数据。</target>
        </trans-unit>
        <trans-unit id="aef3110f389e82af1973c9bcd0c75c246fa8a691" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__exit&lt;/code&gt; - sent by DUT, test suite execution finished.</source>
          <target state="translated">&lt;code&gt;__exit&lt;/code&gt; -由DUT发送，测试套件执行完成。</target>
        </trans-unit>
        <trans-unit id="e73f1f004a2d367ad3306a388160e6bd776dcd7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__exit_event_queue&lt;/code&gt; - sent by host test, indicating no more events expected.</source>
          <target state="translated">&lt;code&gt;__exit_event_queue&lt;/code&gt; -由主机测试发送，指示没有其他预期的事件。</target>
        </trans-unit>
        <trans-unit id="66ab6ccf2d92f9d1d9a8d6179803a40238c95c5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__host_test_name&lt;/code&gt; - host test name, sent by DUT after &lt;code&gt;{{sync;UUID}}&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;__host_test_name&lt;/code&gt; -主机测试名称，由DUT在收到 &lt;code&gt;{{sync;UUID}}&lt;/code&gt; 之后发送。</target>
        </trans-unit>
        <trans-unit id="b4c381c842b653117058d4eb629f3b159890c58e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_complete&lt;/code&gt; - sent by DUT, async notificaion about test case result (true, false, none).</source>
          <target state="translated">&lt;code&gt;__notify_complete&lt;/code&gt; -由DUT发送，关于测试用例结果的异步通知（真，假，无）。</target>
        </trans-unit>
        <trans-unit id="70915690f15f4057e050e62023b57db39122af21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_conn_lost&lt;/code&gt; - sent by host test's connection process to notify serial port connection lost.</source>
          <target state="translated">&lt;code&gt;__notify_conn_lost&lt;/code&gt; -由主机测试的连接过程发送，以通知串行端口连接丢失。</target>
        </trans-unit>
        <trans-unit id="38605565e3847c0ad513f2ba8dea7090207e8d27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_prn&lt;/code&gt; - sent by host test to print log message.</source>
          <target state="translated">&lt;code&gt;__notify_prn&lt;/code&gt; -由主机测试发送以打印日志消息。</target>
        </trans-unit>
        <trans-unit id="2536463805107e8572fd2f50d4dafe64b11ed998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_sync_failed&lt;/code&gt; - sent by host when sync response not received from DUT.</source>
          <target state="translated">&lt;code&gt;__notify_sync_failed&lt;/code&gt; -当未从DUT收到同步响应时由主机发送。</target>
        </trans-unit>
        <trans-unit id="73a87a44a506b29d322e968afa4e11f08928f7f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__rxd_line&lt;/code&gt; - Event triggered when &lt;code&gt;\n&lt;/code&gt; was found on DUT RXD channel. It can be overridden (&lt;code&gt;self.register_callback('__rxd_line', &amp;lt;callback_function&amp;gt;)&lt;/code&gt;) and used by user. Event is sent by host test to notify a new line of text was received on RXD channel. &lt;code&gt;__rxd_line&lt;/code&gt; event payload (value) in a line of text received from DUT over RXD.</source>
          <target state="translated">&lt;code&gt;__rxd_line&lt;/code&gt; -在DUT RXD通道上找到 &lt;code&gt;\n&lt;/code&gt; 时触发的事件。可以覆盖它（ &lt;code&gt;self.register_callback('__rxd_line', &amp;lt;callback_function&amp;gt;)&lt;/code&gt; ）并由用户使用。主机测试发送事件，以通知在RXD通道上收到新的一行文本。通过RXD从DUT接收的一行文本中的 &lt;code&gt;__rxd_line&lt;/code&gt; 事件有效负载（值）。</target>
        </trans-unit>
        <trans-unit id="0522521478639533401e1883eff02556a26666be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__sync&lt;/code&gt; - sync message, used by master and DUT to handshake.</source>
          <target state="translated">&lt;code&gt;__sync&lt;/code&gt; -同步消息，由主服务器和DUT用于握手。</target>
        </trans-unit>
        <trans-unit id="e44e21591905935c4722b68cea21bca505ee8d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__testcase_finish&lt;/code&gt; - sent by DUT, test case result.</source>
          <target state="translated">&lt;code&gt;__testcase_finish&lt;/code&gt; -由DUT发送，测试用例结果。</target>
        </trans-unit>
        <trans-unit id="b1b2477cddf45a8f624498658f7c0e05338b1976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__testcase_start&lt;/code&gt; - sent by DUT, test case start data.</source>
          <target state="translated">&lt;code&gt;__testcase_start&lt;/code&gt; -由DUT发送，测试用例开始数据。</target>
        </trans-unit>
        <trans-unit id="a72bf43954020d842d07f1c5611e30859cebb23a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__timeout&lt;/code&gt; - timeout in sec, sent by DUT after &lt;code&gt;{{sync;UUID}}&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;__timeout&lt;/code&gt; -超时（以秒为单位），由DUT在收到 &lt;code&gt;{{sync;UUID}}&lt;/code&gt; 之后发送。</target>
        </trans-unit>
        <trans-unit id="f256f495b16d358fb749994641994004470ab033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__version&lt;/code&gt; - &lt;code&gt;greentea-client&lt;/code&gt; version send from DUT to host.</source>
          <target state="translated">&lt;code&gt;__version&lt;/code&gt; - &lt;code&gt;greentea-client&lt;/code&gt; 版本从DUT发送到主机。</target>
        </trans-unit>
        <trans-unit id="6aab874b35584a0d5e82976158f12f70a498f241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htrun&lt;/code&gt; has extensive command line. In most cases &lt;code&gt;htrun&lt;/code&gt; (or its command line avatar &lt;code&gt;mbedhtrun&lt;/code&gt;) will be run in background:</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; 具有广泛的命令行。在大多数情况下， &lt;code&gt;htrun&lt;/code&gt; （或其命令行头像 &lt;code&gt;mbedhtrun&lt;/code&gt; ）将在后台运行：</target>
        </trans-unit>
        <trans-unit id="1bfd8fc28acb332ed6a8cb6f250ba9930873af0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htrun&lt;/code&gt; is redistributed with sources, as Python 2.7 compatible module called &lt;code&gt;mbed-host-tests&lt;/code&gt; and command line tool called &lt;code&gt;mbedhtrun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; 随源一起重新分发，这是称为 &lt;code&gt;mbed-host-tests&lt;/code&gt; 的Python 2.7兼容模块和称为 &lt;code&gt;mbedhtrun&lt;/code&gt; 的命令行工具。</target>
        </trans-unit>
        <trans-unit id="a09ab1183cd1a4455515d2dfa623110358964aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htrun&lt;/code&gt; new log format:</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; 新的日志格式：</target>
        </trans-unit>
        <trans-unit id="146047f10bfe28e6ca1342363d40e58580f19413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;level&lt;/code&gt; - logging level:</source>
          <target state="translated">&lt;code&gt;level&lt;/code&gt; -日志记录级别：</target>
        </trans-unit>
        <trans-unit id="d230633f3997fb0cd8a87b415d32dfb4f5ec4ee9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbed-host-tests&lt;/code&gt; module is redistributed via PyPI. We recommend you use the &lt;a href=&quot;https://pip.pypa.io/en/latest/installing.html#install-pip&quot;&gt;application pip&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mbed-host-tests&lt;/code&gt; 模块通过PyPI重新分发。我们建议您使用&lt;a href=&quot;https://pip.pypa.io/en/latest/installing.html#install-pip&quot;&gt;应用程序pip&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ab7b650f12a748dc308096fa0d77c6e039d3f5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbed-host-tests&lt;/code&gt; responsibilities are:</source>
          <target state="translated">&lt;code&gt;mbed-host-tests&lt;/code&gt; 的职责是：</target>
        </trans-unit>
        <trans-unit id="41c86f566beb36c6b6b2c4d73651b3ec643725db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_complete(result : bool)&lt;/code&gt; used by host test to notify test case result. This result will be read after test suite &lt;code&gt;TIMEOUT&lt;/code&gt;s or after DUT send &lt;code&gt;__exit&lt;/code&gt; message (test suite execution finished event).</source>
          <target state="translated">&lt;code&gt;notify_complete(result : bool)&lt;/code&gt; 由主机测试用来通知测试用例结果。在测试套件 &lt;code&gt;TIMEOUT&lt;/code&gt; 之后或DUT发送 &lt;code&gt;__exit&lt;/code&gt; 消息（测试套件执行完成事件）之后，将读取此结果。</target>
        </trans-unit>
        <trans-unit id="172d5caa7d56ca7f7d3a296400bb8c3531f32901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result()&lt;/code&gt; used to return test case result when &lt;code&gt;notify_complete()&lt;/code&gt; is not called.</source>
          <target state="translated">&lt;code&gt;result()&lt;/code&gt; 用于在未调用 &lt;code&gt;notify_complete()&lt;/code&gt; 时返回测试用例结果。</target>
        </trans-unit>
        <trans-unit id="633f8b8babe06c499ac945176a533e88fe992987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self.log(text : string)&lt;/code&gt; - send event &lt;code&gt;__notify_prn&lt;/code&gt; with text as payload (value). Your message will be printed in log.</source>
          <target state="translated">&lt;code&gt;self.log(text : string)&lt;/code&gt; -发送事件 &lt;code&gt;__notify_prn&lt;/code&gt; ，文本作为有效内容（值）。您的消息将打印在日志中。</target>
        </trans-unit>
        <trans-unit id="528d177a7da06eb7a40d93df454c3d1b17ba45ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self.send_kv(key : string, value : string)&lt;/code&gt; - send key-value message to DUT.</source>
          <target state="translated">&lt;code&gt;self.send_kv(key : string, value : string)&lt;/code&gt; -将键值消息发送到DUT。</target>
        </trans-unit>
        <trans-unit id="3fa3134d5f4f9085110c25014db8a0a89b5f2f5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup()&lt;/code&gt; used to initialize host test and register callbacks.</source>
          <target state="translated">&lt;code&gt;setup()&lt;/code&gt; 用于初始化主机测试和注册回调。</target>
        </trans-unit>
        <trans-unit id="3d3df85d101648df2a2e38a07d2767c6bede72a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; - log source.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; -日志源。</target>
        </trans-unit>
        <trans-unit id="d8d216f69ea1a3eaa95ba6458b40f43c08f477d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;teardown()&lt;/code&gt; used to finalize and resource freeing. It is guaranteed that &lt;code&gt;teardown()&lt;/code&gt; will be always called after timeout or async test completion().</source>
          <target state="translated">&lt;code&gt;teardown()&lt;/code&gt; 用于完成操作和释放资源。确保在超时或异步测试完成（）之后始终调用 &lt;code&gt;teardown()&lt;/code&gt; （）。</target>
        </trans-unit>
        <trans-unit id="2d70bf3e0f99480aa5b2daca6cbfcc9765092684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; - returned by Python's &lt;code&gt;time.time()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;timestamp&lt;/code&gt; -由Python的 &lt;code&gt;time.time()&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="c10001035cfba5804245ebe313f1c7cddd149675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utest&lt;/code&gt; harness allows you to define multiple test cases inside your test suite. This feature is supported by &lt;code&gt;Greentea&lt;/code&gt; test tools.</source>
          <target state="translated">&lt;code&gt;utest&lt;/code&gt; 工具允许您在测试套件中定义多个测试用例。 &lt;code&gt;Greentea&lt;/code&gt; 测试工具支持此功能。</target>
        </trans-unit>
        <trans-unit id="ccf7d45fdb7a3ec8da001ef50e0b0789523e0ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{key;value}}&lt;/code&gt; string captured on DUT output.</source>
          <target state="translated">&lt;code&gt;{{key;value}}&lt;/code&gt; 字符串在DUT输出上捕获。</target>
        </trans-unit>
        <trans-unit id="978812719c428d1362d193a491e176614ac1cf5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Blocking&lt;/strong&gt; wait for key-value pair message in input stream:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;在输入流中&lt;strong&gt;阻塞&lt;/strong&gt;等待键值对消息：</target>
        </trans-unit>
        <trans-unit id="bf04b208a59aca6656cbaf500f2714b821fc5dea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Event exchange&lt;/strong&gt; - key-value event exchange between slave and master. In this exchange in general slave (DUT) will initialize communication. This part may end with ending pair of events &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;__exit&lt;/code&gt; where &lt;code&gt;end&lt;/code&gt; event carries test suite result returned by DUT and &lt;code&gt;__exit&lt;/code&gt; event marks test suite ended and exited. After &lt;code&gt;__exit&lt;/code&gt; event is received there will be no more communication between DUT and host test.</source>
          <target state="translated">&lt;strong&gt;事件交换&lt;/strong&gt;-从站和主站之间的键值事件交换。在这种交换中，一般从站（DUT）将初始化通信。这部分的结尾可以是事件对 &lt;code&gt;end&lt;/code&gt; 和 &lt;code&gt;__exit&lt;/code&gt; ，其中 &lt;code&gt;end&lt;/code&gt; 事件携带DUT返回的测试套件结果，而 &lt;code&gt;__exit&lt;/code&gt; 事件标志着测试套件已结束并退出。收到 &lt;code&gt;__exit&lt;/code&gt; 事件后，DUT与主机测试之间将不再有通信。</target>
        </trans-unit>
        <trans-unit id="b82b304ec2e4d8ca5c5d2b85582fa51e84fcd23a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Handshake&lt;/strong&gt; - synchronize master and slave.</source>
          <target state="translated">&lt;strong&gt;握手&lt;/strong&gt;-同步主机和从机。</target>
        </trans-unit>
        <trans-unit id="22001cf273403186960b9b8e3ec3f02a2b7da50d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Python 2.7.9 onwards include &lt;code&gt;pip&lt;/code&gt; by default, so you may have &lt;code&gt;pip&lt;/code&gt; already.
&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;mbed-host-tests&lt;/code&gt; module is redistributed with &lt;code&gt;mbed-greentea&lt;/code&gt; module as a dependency. So if you've already installed Greentea &lt;code&gt;mbed-host-tests&lt;/code&gt; should be there!</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;默认情况下，Python 2.7.9及更高版本包含 &lt;code&gt;pip&lt;/code&gt; ，因此您可能已经拥有 &lt;code&gt;pip&lt;/code&gt; 。 &lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;mbed-host-tests&lt;/code&gt; 模块随 &lt;code&gt;mbed-greentea&lt;/code&gt; 模块一起重新分发。因此，如果您已经安装了Greentea， &lt;code&gt;mbed-host-tests&lt;/code&gt; 应该在那里！</target>
        </trans-unit>
        <trans-unit id="7ba071ca9346f715811b90bbcf80176dafdd545a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Switch -m &amp;lt;platform_name&amp;gt; is required to tell Global Resource Management which platform to request.
&lt;strong&gt;Note&lt;/strong&gt;: Command line switch &lt;code&gt;--grm&lt;/code&gt; implicitly forces &lt;code&gt;--skip-flashing&lt;/code&gt; and &lt;code&gt;--skip-reset&lt;/code&gt; because both flags are used for locally available DUTs.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：需要使用-m &amp;lt;platform_name&amp;gt;开关来告诉全局资源管理请求哪个平台。 &lt;strong&gt;注意&lt;/strong&gt;：命令行开关 &lt;code&gt;--grm&lt;/code&gt; 隐式强制使用 &lt;code&gt;--skip-flashing&lt;/code&gt; 和 &lt;code&gt;--skip-reset&lt;/code&gt; ,因为这两个标志都用于本地可用的DUT。</target>
        </trans-unit>
        <trans-unit id="2cdb8891adb6df7e3efff295d8bfc5578b693584" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Switch -m &amp;lt;platform_name&amp;gt; is required to tell this fastmodel connection which Fastmodel to request.
&lt;strong&gt;Note&lt;/strong&gt;: Command line switch &lt;code&gt;--fm&lt;/code&gt; implicitly forces &lt;code&gt;--skip-flashing&lt;/code&gt; and &lt;code&gt;--skip-reset&lt;/code&gt; because both flags are used for locally available DUTs.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：需要使用-m &amp;lt;platform_name&amp;gt;开关来告诉此fastmodel连接请求哪个Fastmodel。 &lt;strong&gt;注意&lt;/strong&gt;：命令行开关 &lt;code&gt;--fm&lt;/code&gt; 隐式强制使用 &lt;code&gt;--skip-flashing&lt;/code&gt; 和 &lt;code&gt;--skip-reset&lt;/code&gt; ,因为这两个标志都用于本地可用的DUT。</target>
        </trans-unit>
        <trans-unit id="4a7ab915a793ffe6e1b42c4b1d8fcdeea993e9cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Sync packet management allows you to manipulate the way &lt;code&gt;htrun&lt;/code&gt; sends &lt;code&gt;__sync&lt;/code&gt; packet(s) to DUT. With current settings we can force on &lt;code&gt;htrun&lt;/code&gt; to send &lt;code&gt;__sync&lt;/code&gt; packets in this manner:</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：同步数据包管理允许您操纵 &lt;code&gt;htrun&lt;/code&gt; 将 &lt;code&gt;__sync&lt;/code&gt; 数据包发送到DUT的方式。使用当前设置，我们可以强制 &lt;code&gt;htrun&lt;/code&gt; 以这种方式发送 &lt;code&gt;__sync&lt;/code&gt; 数据包：</target>
        </trans-unit>
        <trans-unit id="8770be929839dfce9cf2e64ddb9e81c172f276ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Preamble exchange&lt;/strong&gt; - DUT informs host about test parameters such as client version, test suite timeout, requested host test name etc. After this part is finished master will create requested host test and attach callbacks to user events.</source>
          <target state="translated">&lt;strong&gt;前同步码交换&lt;/strong&gt;-DUT向主机通知测试参数，例如客户端版本，测试套件超时，请求的主机测试名称等。完成此部分后，主服务器将创建请求的主机测试并将回调附加到用户事件。</target>
        </trans-unit>
        <trans-unit id="0e4a452d838b4f1866c3fe0046ee2cbef818254f" translate="yes" xml:space="preserve">
          <source>A tested comparison log can be checked into GitHub with the examples and can be used in the CI for example verification.</source>
          <target state="translated">经过测试的对比日志可以和实例一起检查到GitHub中,可以在CI中用于实例验证。</target>
        </trans-unit>
        <trans-unit id="48748b3b742385e6f8c0cd5908e2bbe354c77054" translate="yes" xml:space="preserve">
          <source>After DUT send &lt;code&gt;__exit&lt;/code&gt; or after timeout it is guaranteed that host test &lt;code&gt;teardown()&lt;/code&gt; function will be called. This call is blocking, please make sure your tear down function finishes.</source>
          <target state="translated">在DUT发送 &lt;code&gt;__exit&lt;/code&gt; 之后或超时之后，可以确保将调用主机测试 &lt;code&gt;teardown()&lt;/code&gt; 函数。该调用被阻止，请确保您的拆卸功能完成。</target>
        </trans-unit>
        <trans-unit id="09a3f6d7805c4c87b061eaf31eb5e2b3ebcd5a35" translate="yes" xml:space="preserve">
          <source>After correct sync packet is received by master, messages &lt;code&gt;{{__timeout;%d}}&lt;/code&gt; and &lt;code&gt;{{__host_test_name}}&lt;/code&gt; are expected.</source>
          <target state="translated">主服务器收到正确的同步数据包后，将出现消息 &lt;code&gt;{{__timeout;%d}}&lt;/code&gt; 和 &lt;code&gt;{{__host_test_name}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a7e401b4be215749d83fbcba3e4ec8209beb67b" translate="yes" xml:space="preserve">
          <source>After reset:</source>
          <target state="translated">重置后。</target>
        </trans-unit>
        <trans-unit id="779eaffcf0df94cb11b0b9a188528d63ebf25484" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;mbedhtrun&lt;/code&gt; needs is name of the binary you want to flash and method of flashing!</source>
          <target state="translated">&lt;code&gt;mbedhtrun&lt;/code&gt; 所有需要的是您要刷新的二进制文件的名称和刷新方法！</target>
        </trans-unit>
        <trans-unit id="868aecef2b53c70e54e997a0929720538a3233ce" translate="yes" xml:space="preserve">
          <source>Another example with regular examples is shown below:</source>
          <target state="translated">另一个有规律的例子如下图所示。</target>
        </trans-unit>
        <trans-unit id="c48ebfecb37de922cbe7a5c790047668217efb8a" translate="yes" xml:space="preserve">
          <source>As above but we will skip reset phase (non so common but in some cases can be used to suppress reset phase for some reasons):</source>
          <target state="translated">如上所述,但我们将跳过复位阶段(非如此常见,但在某些情况下可以用于抑制复位阶段的某些原因)。</target>
        </trans-unit>
        <trans-unit id="7a912fdada8ea0517f6988957ab102d6e5d42000" translate="yes" xml:space="preserve">
          <source>Before Greentea v0.2.0</source>
          <target state="translated">在Greentea v0.2.0之前。</target>
        </trans-unit>
        <trans-unit id="883579fd087386dfd3f74e50aa8cf2893424d97a" translate="yes" xml:space="preserve">
          <source>Below the same callback registered using decorator:</source>
          <target state="translated">下面是使用decorator注册的相同回调。</target>
        </trans-unit>
        <trans-unit id="54f3a582e0e46c1fdbde56c6d9b5c912b1062595" translate="yes" xml:space="preserve">
          <source>Callback decorator definition</source>
          <target state="translated">回调装饰器定义</target>
        </trans-unit>
        <trans-unit id="61aea957495b12cf35ed6fa4692f689a4b6830cf" translate="yes" xml:space="preserve">
          <source>Callback registration in setup() method</source>
          <target state="translated">在setup()方法中进行回调注册</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">回调</target>
        </trans-unit>
        <trans-unit id="0919f1c08841ab59f4010ca0c08be7d21b733553" translate="yes" xml:space="preserve">
          <source>Change the directory to the &lt;code&gt;mbed-os-tools/packages/mbed-host-tests&lt;/code&gt; directory:</source>
          <target state="translated">将目录更改为 &lt;code&gt;mbed-os-tools/packages/mbed-host-tests&lt;/code&gt; 目录：</target>
        </trans-unit>
        <trans-unit id="7741c1b49d16cff50f9f11d5390e73dce207ea10" translate="yes" xml:space="preserve">
          <source>Checking installation</source>
          <target state="translated">检查安装</target>
        </trans-unit>
        <trans-unit id="8f421d7903d21e7af2e8365c67e68dcf4c7e23b4" translate="yes" xml:space="preserve">
          <source>Command line overview</source>
          <target state="translated">命令行概述</target>
        </trans-unit>
        <trans-unit id="1e1918c7b0e450f50460cc106d52c81934e94310" translate="yes" xml:space="preserve">
          <source>Command line switch &lt;code&gt;--grm&lt;/code&gt; has format: &lt;code&gt;&amp;lt;module_name&amp;gt;:&amp;lt;IP_address&amp;gt;:&amp;lt;port_number&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">命令行开关 &lt;code&gt;--grm&lt;/code&gt; 的格式为： &lt;code&gt;&amp;lt;module_name&amp;gt;:&amp;lt;IP_address&amp;gt;:&amp;lt;port_number&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56daa4f6991ad23ee3ad9337bba1c4b9e7dae685" translate="yes" xml:space="preserve">
          <source>Command line switch format &lt;code&gt;--fm &amp;lt;config_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">命令行开关格式 &lt;code&gt;--fm &amp;lt;config_name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ff2cd088270334c8a2f99dfc624bcd332a50384" translate="yes" xml:space="preserve">
          <source>Corresponding log:</source>
          <target state="translated">相应的日志。</target>
        </trans-unit>
        <trans-unit id="d895d5e7e230d89bd4cfe4224c65b0d27e50070e" translate="yes" xml:space="preserve">
          <source>DUT - host test case workflow</source>
          <target state="translated">DUT-主机测试案例工作流程</target>
        </trans-unit>
        <trans-unit id="626c3ee860fb240f7628dd4674a59b588bf8f8b4" translate="yes" xml:space="preserve">
          <source>DUT always (except for handshake phase) initializes communication by sending key-value message to host.</source>
          <target state="translated">DUT总是(除了握手阶段)通过向主机发送键值消息来初始化通信。</target>
        </trans-unit>
        <trans-unit id="2c6516f3287de370bb466acaf1a844e15e278271" translate="yes" xml:space="preserve">
          <source>DUT always finishes execution</source>
          <target state="translated">DUT总是完成执行</target>
        </trans-unit>
        <trans-unit id="095e4a38df5cb9fd44a60b3fb755fc995fb05b85" translate="yes" xml:space="preserve">
          <source>DUT calls function &lt;code&gt;GREENTEA_SETUP(timeout, &quot;host test name&quot;);&lt;/code&gt; which</source>
          <target state="translated">DUT调用函数 &lt;code&gt;GREENTEA_SETUP(timeout, &quot;host test name&quot;);&lt;/code&gt; 哪一个</target>
        </trans-unit>
        <trans-unit id="165c9ff6d3335894ae3b4f0accf0b86e9682904e" translate="yes" xml:space="preserve">
          <source>DUT code:</source>
          <target state="translated">DUT代码:</target>
        </trans-unit>
        <trans-unit id="b921767324737366f2552e20da90f6fc8abb1ea2" translate="yes" xml:space="preserve">
          <source>DUT implementation</source>
          <target state="translated">DUT的实施</target>
        </trans-unit>
        <trans-unit id="9c597a19b077deb109c00589b1390f002b08e65d" translate="yes" xml:space="preserve">
          <source>DUT implementation using &lt;code&gt;my_host_test&lt;/code&gt; custom host test:</source>
          <target state="translated">使用 &lt;code&gt;my_host_test&lt;/code&gt; 定制主机测试的DUT实现：</target>
        </trans-unit>
        <trans-unit id="7b4a20d2bc2fb30dc4fc0306d08e9b81fe1471f2" translate="yes" xml:space="preserve">
          <source>DUT implementation:</source>
          <target state="translated">DUT的实施。</target>
        </trans-unit>
        <trans-unit id="6a2cce350afb4935c3fdced46913ecb2c36b6dff" translate="yes" xml:space="preserve">
          <source>DUT side uses second argument of &lt;code&gt;GREENTEA_SETUP(timeout, host_test_name)&lt;/code&gt; function:</source>
          <target state="translated">DUT端使用 &lt;code&gt;GREENTEA_SETUP(timeout, host_test_name)&lt;/code&gt; 函数的第二个参数：</target>
        </trans-unit>
        <trans-unit id="14c69c2b7257c38eb710e9d086b6f9d2b90ab384" translate="yes" xml:space="preserve">
          <source>DUT slave side uses simple parser to parse key-value pairs from stream. All non key-value data will be ignored. Blocking wait for an event API is provided: This implies usage of master-slave exchange between DUT and host where DUT uses non-blocking send event API to send to host (master) event and can wait for response. Master implements corresponding response after receiving event and processing data.</source>
          <target state="translated">DUT从属端使用简单的解析器来解析流中的键值对,所有非键值数据将被忽略。所有非键值数据将被忽略。提供了阻塞等待事件的API。这意味着在DUT和主机之间使用主从交换,DUT使用非阻塞发送事件API向主机(主)发送事件,并可以等待响应。主站在接收到事件并处理数据后,实现相应的响应。</target>
        </trans-unit>
        <trans-unit id="1997bc510fdd148c5460b1f9a4c03afbb22db4b3" translate="yes" xml:space="preserve">
          <source>DUT test API was first introduced in &lt;code&gt;mbedmicro/mbed&lt;/code&gt; project &lt;a href=&quot;https://github.com/mbedmicro/mbed/tree/master/libraries/tests/mbed/env&quot;&gt;here&lt;/a&gt;. After refactoring this functionality was copied and improved in &lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt; module.</source>
          <target state="translated">DUT测试API最初是在推出 &lt;code&gt;mbedmicro/mbed&lt;/code&gt; 项目&lt;a href=&quot;https://github.com/mbedmicro/mbed/tree/master/libraries/tests/mbed/env&quot;&gt;在这里&lt;/a&gt;。重构后，该功能已在&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt;模块中复制并改进。</target>
        </trans-unit>
        <trans-unit id="3cd14348a79f6dd2dc4ed92b00adfffbe3313dca" translate="yes" xml:space="preserve">
          <source>DUT test suite never finishes execution</source>
          <target state="translated">DUT测试套件从未完成执行</target>
        </trans-unit>
        <trans-unit id="aebd9413076d65c89e207689ac7673ccdbe3fce1" translate="yes" xml:space="preserve">
          <source>DUT test suite with &lt;code&gt;utest&lt;/code&gt; harness</source>
          <target state="translated">具有 &lt;code&gt;utest&lt;/code&gt; 工具的DUT测试套件</target>
        </trans-unit>
        <trans-unit id="b9a257b89d70fac4953d77b392223a7141b06c89" translate="yes" xml:space="preserve">
          <source>DUT test suite with single test case</source>
          <target state="translated">带有单一测试案例的DUT测试套件</target>
        </trans-unit>
        <trans-unit id="736a527bb1c06de722602489784f5dff79e01f9d" translate="yes" xml:space="preserve">
          <source>DUT waits for &lt;code&gt;{{__sync;...}}&lt;/code&gt; message in input stream and replies with the same packer &lt;code&gt;{{__sync;...}}&lt;/code&gt;.</source>
          <target state="translated">DUT在输入流中等待 &lt;code&gt;{{__sync;...}}&lt;/code&gt; 消息，并使用相同的 &lt;code&gt;{{__sync;...}}&lt;/code&gt; 回复。</target>
        </trans-unit>
        <trans-unit id="647d603597976a170b993ee2698c02e93538fd86" translate="yes" xml:space="preserve">
          <source>DUT will send to host preamble with test runner information such as:</source>
          <target state="translated">DUT将向主机发送带有测试运行器信息的前言,例如:</target>
        </trans-unit>
        <trans-unit id="07c83fa7e049f4fd805d5b8928beb027731de9b8" translate="yes" xml:space="preserve">
          <source>DUT-host communication and reset phase</source>
          <target state="translated">DUT-主机通信和复位阶段</target>
        </trans-unit>
        <trans-unit id="709809b3955dfa71a2918ff271debe54e9883a64" translate="yes" xml:space="preserve">
          <source>Default DUT reset method is one supported by &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;mbed-enabled&lt;/a&gt; devices: serial port (CDC) &quot;&lt;em&gt;sendBreak&lt;/em&gt;&quot; command resets target MCU on mbed-enabled platform.</source>
          <target state="translated">&lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;启用mbed的&lt;/a&gt;设备支持默认的DUT重置方法：串行端口（CDC）&amp;ldquo; &lt;em&gt;sendBreak&lt;/em&gt; &amp;rdquo;命令重置启用mbed的平台上的目标MCU。</target>
        </trans-unit>
        <trans-unit id="bc2cd630546bc1cb92afe393e71240db008e5337" translate="yes" xml:space="preserve">
          <source>Default binary flashing method is one supported by &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;mbed-enabled&lt;/a&gt; devices: binary file is copied on mbed-enabled DUT (Device Under Test) mounted drive (MSD). This procedure will automatically flash device with given binary file content.</source>
          <target state="translated">&lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;启用mbed的&lt;/a&gt;设备支持默认的二进制刷新方法：将二进制文件复制到启用mbed的DUT（被测设备）安装的驱动器（MSD）上。此过程将自动刷新具有给定二进制文件内容的设备。</target>
        </trans-unit>
        <trans-unit id="44d55f06d963a9ca25fae9517787bf49edec5269" translate="yes" xml:space="preserve">
          <source>Design draft</source>
          <target state="translated">设计稿</target>
        </trans-unit>
        <trans-unit id="a8c5a3b94826af621da5a375d345ece1f610fcc9" translate="yes" xml:space="preserve">
          <source>Development moved</source>
          <target state="translated">发展移动</target>
        </trans-unit>
        <trans-unit id="9df9a8179b1a565208b4dd6239287e040d9d8d11" translate="yes" xml:space="preserve">
          <source>Do not forget to name host test accordingly. See below example host test &lt;code&gt;name&lt;/code&gt; class member.</source>
          <target state="translated">不要忘记相应地命名主机测试。请参见下面的示例主机测试 &lt;code&gt;name&lt;/code&gt; 类成员。</target>
        </trans-unit>
        <trans-unit id="3f7497a8dfedacd212c2996862b7d6fcb884d29e" translate="yes" xml:space="preserve">
          <source>Each event is a tuple of &lt;code&gt;(key, value, timestamp)&lt;/code&gt;, where key and value are extracted from message and</source>
          <target state="translated">每个事件都是 &lt;code&gt;(key, value, timestamp)&lt;/code&gt; 的元组，其中key和value是从message和</target>
        </trans-unit>
        <trans-unit id="86254eea7d60c4ae1201fb3716651deb450e3119" translate="yes" xml:space="preserve">
          <source>Each host test (master side) has four functions used by async framework:</source>
          <target state="translated">每个主机测试(主控端)都有4个async框架使用的功能。</target>
        </trans-unit>
        <trans-unit id="3065e92116c10e024814d96a6883bff0ea8755a1" translate="yes" xml:space="preserve">
          <source>Each host test registers callbacks for available events.</source>
          <target state="translated">每个主机测试都会注册可用事件的回调。</target>
        </trans-unit>
        <trans-unit id="39ed4ebaf961ae0c8f1b791ecd147e37c0384649" translate="yes" xml:space="preserve">
          <source>Event exchange</source>
          <target state="translated">活动交流</target>
        </trans-unit>
        <trans-unit id="bb60c70e550b193a26e657cf530450eafa23a645" translate="yes" xml:space="preserve">
          <source>Event is formed in host test, a tuple of &lt;code&gt;key&lt;/code&gt; (string), &lt;code&gt;value&lt;/code&gt; (string), &lt;code&gt;timestamp&lt;/code&gt; where &lt;code&gt;timestamp&lt;/code&gt; is time of message reception in Python &lt;a href=&quot;https://docs.python.org/2/library/time.html#time.time&quot;&gt;time.time()&lt;/a&gt; format (float, time in seconds since the epoch as a floating point number.).</source>
          <target state="translated">事件是在主机测试中形成的， &lt;code&gt;key&lt;/code&gt; （字符串）， &lt;code&gt;value&lt;/code&gt; （字符串）， &lt;code&gt;timestamp&lt;/code&gt; 的元组，其中 &lt;code&gt;timestamp&lt;/code&gt; 是Python &lt;a href=&quot;https://docs.python.org/2/library/time.html#time.time&quot;&gt;time.time（）&lt;/a&gt;格式的消息接收时间（浮点数，自历元以来的秒数，作为浮点数） ）。</target>
        </trans-unit>
        <trans-unit id="18ccebe3f5dfea294643a10c4d680a7e353c7bef" translate="yes" xml:space="preserve">
          <source>Example host test template:</source>
          <target state="translated">主机测试模板示例。</target>
        </trans-unit>
        <trans-unit id="720866581bbfe73b668502026de8c5cdfa711f10" translate="yes" xml:space="preserve">
          <source>Example of corresponding host test</source>
          <target state="translated">相应的主机测试示例</target>
        </trans-unit>
        <trans-unit id="ea76c8a1d8a41f033db77eace0fd6e4212decee5" translate="yes" xml:space="preserve">
          <source>Example of handshake from &lt;code&gt;htrun&lt;/code&gt; log:</source>
          <target state="translated">从 &lt;code&gt;htrun&lt;/code&gt; 日志进行握手的示例：</target>
        </trans-unit>
        <trans-unit id="2fda2299de8a0cdd18062acac9fba1e569417400" translate="yes" xml:space="preserve">
          <source>Example of host test expecting &lt;code&gt;Runtime error ... CallbackNode ...&lt;/code&gt; string in DUT output.
We will use allowed to override &lt;code&gt;__rxd_line&lt;/code&gt; event to hook to DUT RXD channel lines of text.</source>
          <target state="translated">预期 &lt;code&gt;Runtime error ... CallbackNode ...&lt;/code&gt; 的主机测试示例... DUT输出中的CallbackNode ...字符串。我们将使用允许重写 &lt;code&gt;__rxd_line&lt;/code&gt; 事件来挂钩到DUT RXD通道的文本行。</target>
        </trans-unit>
        <trans-unit id="eaaf6b7d8c3502c17a6dc3cf142c18776b31898a" translate="yes" xml:space="preserve">
          <source>Exchange data (in most cases text) between host and DUT,</source>
          <target state="translated">在主机和DUT之间交换数据(大多数情况下是文本)。</target>
        </trans-unit>
        <trans-unit id="f33ba3019954aafa1feb8235b68f034789a412bb" translate="yes" xml:space="preserve">
          <source>Fast Model connection</source>
          <target state="translated">快速模型连接</target>
        </trans-unit>
        <trans-unit id="a0d877bb17464347f7e476238777723873ceebb8" translate="yes" xml:space="preserve">
          <source>Few keys' names in key-value messaging protocol are promoted to be considered &quot;system events&quot;. Their names are used by event loop mechanism to communicate between DUT, host and various internal components. Please do not use restricted even names for your own private events. What's more:</source>
          <target state="translated">在键值信息传递协议中,有少数键的名称被认为是 &quot;系统事件&quot;,它们的名称被事件循环机制用于DUT、主机和各内部组件之间的通信。它们的名字被事件循环机制用于DUT、主机和各种内部组件之间的通信。请不要将限制性的偶名用于自己的私有事件。更有甚者。</target>
        </trans-unit>
        <trans-unit id="158f43262acd06e7642b29309e126923316f2ecd" translate="yes" xml:space="preserve">
          <source>Flash (use shell command &lt;code&gt;copy&lt;/code&gt;) binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">使用安装点 &lt;code&gt;D:&lt;/code&gt; 闪存（使用shell命令 &lt;code&gt;copy&lt;/code&gt; ）二进制文件 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 。使用串行端口 &lt;code&gt;COM4&lt;/code&gt; 与DUT通信：</target>
        </trans-unit>
        <trans-unit id="b79e8d9072014d2c3b21cd78069437deec0df9b9" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">使用安装点 &lt;code&gt;D:&lt;/code&gt; 刷新二进制文件 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 。使用串行端口 &lt;code&gt;COM4&lt;/code&gt; 与DUT通信：</target>
        </trans-unit>
        <trans-unit id="0bb415010bae6adec9b342b99c1fe6276f7c8c46" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; with baudrate &lt;code&gt;115200&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">使用安装点 &lt;code&gt;D:&lt;/code&gt; 刷新二进制文件 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 。使用波特率 &lt;code&gt;115200&lt;/code&gt; 的串行端口 &lt;code&gt;COM4&lt;/code&gt; 与DUT通信：</target>
        </trans-unit>
        <trans-unit id="7aa54b0e3eb90e603779697ab7f217dff3331191" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; with default baudrate to communicate with DUT. Do not send &lt;code&gt;__sync&lt;/code&gt; key-value protocol synchronization packet to DUT before preamble read:</source>
          <target state="translated">使用安装点 &lt;code&gt;D:&lt;/code&gt; 刷新二进制文件 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 。使用默认波特率的串行端口 &lt;code&gt;COM4&lt;/code&gt; 与DUT通信。在读取前导码之前，请勿将 &lt;code&gt;__sync&lt;/code&gt; 键值协议同步数据包发送到DUT：</target>
        </trans-unit>
        <trans-unit id="334ce270911437bb87db7f7e500dc3562bbd2dcb" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using plugin &lt;code&gt;stlink&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; with baudrate &lt;code&gt;115200&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">使用插件 &lt;code&gt;stlink&lt;/code&gt; 刷新二进制文件 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 。使用波特率 &lt;code&gt;115200&lt;/code&gt; 的串行端口 &lt;code&gt;COM4&lt;/code&gt; 与DUT通信：</target>
        </trans-unit>
        <trans-unit id="aaa6043ae95f9a67b22b9f51a18f7faa10482294" translate="yes" xml:space="preserve">
          <source>Flash local file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; to remote device resource (platform &lt;code&gt;K64F&lt;/code&gt;) provided by &lt;code&gt;remote_client&lt;/code&gt; GRM service available on IP address &lt;code&gt;10.2.203.31&lt;/code&gt; and port: &lt;code&gt;8000&lt;/code&gt;. Force serial port connection to remote device &lt;code&gt;9600&lt;/code&gt; with baudrate:</source>
          <target state="translated">将本地文件 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 闪存到 &lt;code&gt;remote_client&lt;/code&gt; GRM服务提供的远程设备资源（平台 &lt;code&gt;K64F&lt;/code&gt; ）上，该IP地址为 &lt;code&gt;10.2.203.31&lt;/code&gt; ，端口为 &lt;code&gt;8000&lt;/code&gt; 。强制使用波特率将串行端口连接到远程设备 &lt;code&gt;9600&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2571f99f1680e5391cd93011b0082d4efb07cbd5" translate="yes" xml:space="preserve">
          <source>Flash mbed device with given binary.</source>
          <target state="translated">闪存给定二进制的mbed设备。</target>
        </trans-unit>
        <trans-unit id="6761cf8a57f5841e04096627ea88d5887f48e0fc" translate="yes" xml:space="preserve">
          <source>Flashing phase operations</source>
          <target state="translated">闪光阶段操作</target>
        </trans-unit>
        <trans-unit id="8a866d6c2d02f0bc023dc62569a6c17af0376992" translate="yes" xml:space="preserve">
          <source>For example if you hardcode in your host test UDP port 32123 and use it for UDP server implementation  of your host test bear in mind that this port may be already used. It is your responsibility to react for this event and implement means to overcome it (if possible).</source>
          <target state="translated">例如,如果你在你的主机测试中硬编码了UDP端口32123,并将其用于你的主机测试的UDP服务器实现,请记住这个端口可能已经被使用了。你有责任对这个事件做出反应,并实施克服它的方法(如果可能的话)。</target>
        </trans-unit>
        <trans-unit id="7c1aff202f7d8bcea4fa64405f0aca7af6efda87" translate="yes" xml:space="preserve">
          <source>Functions are used to send key-string or key-integer value messages to master. This functions should replace typical &lt;code&gt;printf()&lt;/code&gt; calls with payload/control data to host.</source>
          <target state="translated">函数用于将密钥字符串或密钥整数值消息发送给master。此函数应将有效载荷/控制数据替换为典型的 &lt;code&gt;printf()&lt;/code&gt; 调用以托管给主机。</target>
        </trans-unit>
        <trans-unit id="af3ec244dc723a701ac058afc63d124fbfd72829" translate="yes" xml:space="preserve">
          <source>Global Resource Manager connection</source>
          <target state="translated">全球资源管理器连接</target>
        </trans-unit>
        <trans-unit id="a0be22585fd735b25c7d089d58ba0169fc6da82f" translate="yes" xml:space="preserve">
          <source>Greentea client API</source>
          <target state="translated">Greentea客户端API</target>
        </trans-unit>
        <trans-unit id="76ccff916d0696e0db6e0e63211aa5d404b177bb" translate="yes" xml:space="preserve">
          <source>Handshake</source>
          <target state="translated">握手</target>
        </trans-unit>
        <trans-unit id="afe7a417d745ef7f8ce3a908ad2af663ae59dca3" translate="yes" xml:space="preserve">
          <source>Hanshake between DUT and host is a sequence of &lt;code&gt;__sync&lt;/code&gt; events send between host (master) and DUT (slave). This is currently only situation when master initiates communication first. Handshake should provide synchronization point where master and slave are starting the same session.</source>
          <target state="translated">DUT与主机之间的 &lt;code&gt;__sync&lt;/code&gt; 是在主机（主机）和DUT（从机）之间发送的__sync事件序列。当前只有主机首先启动通信时才会出现这种情况。握手应在主节点和从节点开始同一会话的地方提供同步点。</target>
        </trans-unit>
        <trans-unit id="c462c6142be867f0a9f93d039025a1e9848ee526" translate="yes" xml:space="preserve">
          <source>Hence the strategy for testing examples is based on observation instead of interaction. An example's serial logging is captured and converted into a templated log. All successive executions of this example should match this log.</source>
          <target state="translated">因此,测试实例的策略是基于观察而不是交互。一个例子的连续日志被捕获并转换成一个模板化的日志。这个例子的所有连续执行都应该与这个日志相匹配。</target>
        </trans-unit>
        <trans-unit id="81a50f092a9c1baca81536bee0ce39b6ef1ca7c0" translate="yes" xml:space="preserve">
          <source>Host parses DUTs tx stream and generates events sent to host test.</source>
          <target state="translated">主机解析DUTs tx流,并生成事件发送到主机测试。</target>
        </trans-unit>
        <trans-unit id="739d7ff56b572bddde7bca4b888be4430164af90" translate="yes" xml:space="preserve">
          <source>Host state machine loads callbacks registered by user in host test setup phase and hooks them to event machine.
Now host is ready to handle test suite test execution. From this moment each event sent from DUT will be handled by corresponding callback registered by user in host test setup. Unknown events will not be handled and warning will be printed in log.</source>
          <target state="translated">主机状态机加载用户在主机测试设置阶段注册的回调,并将它们挂到事件机上。现在主机已经准备好处理测试套件的测试执行。从这一刻起,每个从DUT发送的事件将由用户在主机测试设置中注册的相应回调来处理。未知事件将不会被处理,并在日志中打印警告。</target>
        </trans-unit>
        <trans-unit id="3bf2563e8f05e77491179793ef8db96c86834d6c" translate="yes" xml:space="preserve">
          <source>Host state machine loads host test object by name provided in payload of &lt;code&gt;__host_test_name&lt;/code&gt; event.E.g. event ```{{____host_test_name;default_auto}} will load host test named &quot;&lt;em&gt;default_auto&lt;/em&gt;&quot;.</source>
          <target state="translated">通过名称主机状态机负载主机测试对象中的有效载荷提供 &lt;code&gt;__host_test_name&lt;/code&gt; event.Eg事件```{{____ host_test_name; default_auto}}将加载命名为&amp;ldquo;主机测试&lt;em&gt;default_auto&lt;/em&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="256e466598015d9893e7d37134c90ab1322dee71" translate="yes" xml:space="preserve">
          <source>Host test examples</source>
          <target state="translated">主机测试实例</target>
        </trans-unit>
        <trans-unit id="7aa340f16d0f3e4b0a727d2aeb24e1d71f83a1d2" translate="yes" xml:space="preserve">
          <source>Host tests are now driven by simple async feature. Event state machine on master side is used to process events from DUT. Each host test is capable of registering callbacks, functions which will be executed when event occur. Event name is identical with KEY in key-value pair send as event from/to DUT.</source>
          <target state="translated">主机测试现在由简单的异步功能驱动。主控端的事件状态机用于处理来自DUT的事件。每个主机测试都可以注册回调,即事件发生时执行的函数。事件名称与作为DUT发送的事件的key-value对中的KEY相同。</target>
        </trans-unit>
        <trans-unit id="f34c65d375ef807a0d1053054afcca89454eb733" translate="yes" xml:space="preserve">
          <source>Host will spawn host test script and test execution will be instrumented</source>
          <target state="translated">主机将产生主机测试脚本,测试执行将被仪器化。</target>
        </trans-unit>
        <trans-unit id="9c5759b3a29a12c887dbdea960cf8e8e034f43a0" translate="yes" xml:space="preserve">
          <source>Htrun (mbed-host-tests)</source>
          <target state="translated">Htrun (mbed-host-tests)</target>
        </trans-unit>
        <trans-unit id="f9ca9c8e689a1271ff659bece18781ba5d93d16f" translate="yes" xml:space="preserve">
          <source>In case an application requires more time to process data and generate results, you can use the option &lt;code&gt;--polling-timeout&lt;/code&gt; to override the default timeout setting.</source>
          <target state="translated">如果应用程序需要更多时间来处理数据和生成结果，则可以使用选项 &lt;code&gt;--polling-timeout&lt;/code&gt; 覆盖默认超时设置。</target>
        </trans-unit>
        <trans-unit id="49317310382ddf66dd0c5d0f51b7b63b474cc3af" translate="yes" xml:space="preserve">
          <source>In order to work with platforms for which the hardware is still under development, and hence may not have an mbed interface chip, some &quot;hook&quot; files are required.  Operation with these platforms is a matter for the platform development teams involved and is not, in general, supported by ARM.</source>
          <target state="translated">为了与硬件仍在开发中的平台合作,因此可能没有mbed接口芯片,需要一些 &quot;钩子 &quot;文件。对这些平台的操作是相关平台开发团队的事情,一般来说,ARM不支持。</target>
        </trans-unit>
        <trans-unit id="96aea4a4578a7a24ceb5456357622da825fbc337" translate="yes" xml:space="preserve">
          <source>In this example DUT code uses &lt;code&gt;greentea-client&lt;/code&gt; to sync (&lt;code&gt;GREENTEA_SETUP&lt;/code&gt;) and pass result (&lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt;) to &lt;code&gt;Greentea&lt;/code&gt;. This is very simple example of how you can write tests. Note that in this example test suite only implements one test case. Actually test suite is test case at the same time. Result passed to &lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt; will be at the same time test case result.</source>
          <target state="translated">在此示例中，DUT代码使用 &lt;code&gt;greentea-client&lt;/code&gt; 进行同步（ &lt;code&gt;GREENTEA_SETUP&lt;/code&gt; ）并将结果（ &lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt; ）传递给 &lt;code&gt;Greentea&lt;/code&gt; 。这是如何编写测试的非常简单的示例。请注意，在此示例中，测试套件仅实现一个测试用例。其实测试套件是同时是测试用例。传递给 &lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt; 的结果将同时是测试用例的结果。</target>
        </trans-unit>
        <trans-unit id="63ce22e8cc62e651bfbc9d44b9fa0409b896de55" translate="yes" xml:space="preserve">
          <source>In this example DUT code uses &lt;code&gt;greentea-client&lt;/code&gt; to sync (&lt;code&gt;GREENTEA_SETUP&lt;/code&gt;) with &lt;code&gt;Greentea&lt;/code&gt;. We are not calling &lt;code&gt;GREENTEA_TESTSUITE_RESULT(result)&lt;/code&gt; at any time. In this example host test is responsible for providing test suite result using &lt;code&gt;self.notify_complete()&lt;/code&gt; API or &lt;code&gt;self.result()&lt;/code&gt; function.</source>
          <target state="translated">在此示例中，DUT代码使用 &lt;code&gt;greentea-client&lt;/code&gt; 与 &lt;code&gt;Greentea&lt;/code&gt; 进行同步（ &lt;code&gt;GREENTEA_SETUP&lt;/code&gt; ）。我们不会在任何时候致电 &lt;code&gt;GREENTEA_TESTSUITE_RESULT(result)&lt;/code&gt; 。在此示例中，主机测试负责使用 &lt;code&gt;self.notify_complete()&lt;/code&gt; API或 &lt;code&gt;self.result()&lt;/code&gt; 函数提供测试套件结果。</target>
        </trans-unit>
        <trans-unit id="b31848376e9effcbed71419f7b28c04b83607698" translate="yes" xml:space="preserve">
          <source>In this phase DUT and host exchange events and host side is calling callbacks registered to each of the events sent from DUT. DUT can use function &lt;code&gt;greentea_parse_kv&lt;/code&gt; to parse input stream for next incoming key-value event.
After &lt;code&gt;__host_test_name&lt;/code&gt; event is received and before any event is consumed during this stage:</source>
          <target state="translated">在此阶段，DUT和主机交换事件，并且主机端正在调用注册到DUT发送的每个事件的回调。DUT可以使用函数 &lt;code&gt;greentea_parse_kv&lt;/code&gt; 解析下一个传入键值事件的输入流。在收到 &lt;code&gt;__host_test_name&lt;/code&gt; 事件之后，在此阶段使用任何事件之前：</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">安装</target>
        </trans-unit>
        <trans-unit id="96d0cf4660194fdfbac644302310f6124c5e1dc2" translate="yes" xml:space="preserve">
          <source>Installation from PyPI (Python Package Index)</source>
          <target state="translated">从PyPI安装 (Python包索引)</target>
        </trans-unit>
        <trans-unit id="9747b78a5614166db6f72d19c44d36053023a65b" translate="yes" xml:space="preserve">
          <source>Installation from Python sources</source>
          <target state="translated">从Python源安装</target>
        </trans-unit>
        <trans-unit id="b2c3bab72631634bc46b6364dbc4f51c943c659f" translate="yes" xml:space="preserve">
          <source>Key-value protocol has few parts:</source>
          <target state="translated">键值协议的部分很少。</target>
        </trans-unit>
        <trans-unit id="27a29f226690321a7adcc35c9e87be4bf2958fa8" translate="yes" xml:space="preserve">
          <source>Key-value protocol overview</source>
          <target state="translated">键值协议概述</target>
        </trans-unit>
        <trans-unit id="9f4787c2bc46ac39b36bd0d999ea31fe758ef67e" translate="yes" xml:space="preserve">
          <source>Key-value protocol was developed and is used to provide communication layer between DUT (device under test) and host computer. Key-value protocol defined host computer as master and DUT as slave.</source>
          <target state="translated">键值协议是为了提供DUT(被测设备)和主机之间的通信层而开发的。键值协议将主机定义为主站,DUT定义为从站。</target>
        </trans-unit>
        <trans-unit id="aee26d71d33f8e98d4348ce4b5d1fd38f36b844f" translate="yes" xml:space="preserve">
          <source>Key-value transport protocol sequence</source>
          <target state="translated">钥匙值运输协议序列</target>
        </trans-unit>
        <trans-unit id="7b221d84e0b3a674576d782dcc4a3da4d47eb44b" translate="yes" xml:space="preserve">
          <source>List available host tests names, class names and origin. Load additional host tests from &lt;code&gt;/path/to/host_tests&lt;/code&gt; directory:</source>
          <target state="translated">列出可用的主机测试名称，类名称和来源。从 &lt;code&gt;/path/to/host_tests&lt;/code&gt; 目录加载其他主机测试：</target>
        </trans-unit>
        <trans-unit id="65fd4496f6282d1f960f65ea054818b571949787" translate="yes" xml:space="preserve">
          <source>List available host tests names, class names and origin:</source>
          <target state="translated">列出可用的主机测试名称、类名和产地。</target>
        </trans-unit>
        <trans-unit id="4270d9653f4f515b60eb7efd3a15a804baf85388" translate="yes" xml:space="preserve">
          <source>List available reset and flashing plugins:</source>
          <target state="translated">列表中列出了可用的重置和闪光插件。</target>
        </trans-unit>
        <trans-unit id="afc2315b560e12839c119c3f35d4f206ec9aad28" translate="yes" xml:space="preserve">
          <source>Load local file &lt;code&gt;/path/to/file/binary.elf&lt;/code&gt; to onto fastmodel FVP_MPS2_m3 simulators:</source>
          <target state="translated">将本地文件 &lt;code&gt;/path/to/file/binary.elf&lt;/code&gt; 加载到fastmodel FVP_MPS2_m3模拟器上：</target>
        </trans-unit>
        <trans-unit id="bd4905fd40b41fca6db2a780b2c9ed141892071d" translate="yes" xml:space="preserve">
          <source>Log example</source>
          <target state="translated">日志示例</target>
        </trans-unit>
        <trans-unit id="2392938c8b5602a02f802b8eac39fc88539d91dd" translate="yes" xml:space="preserve">
          <source>Log:</source>
          <target state="translated">日志。</target>
        </trans-unit>
        <trans-unit id="e4ba102e09e1016bb3bb75852b1bd476a9a61a81" translate="yes" xml:space="preserve">
          <source>Logged from &lt;code&gt;CONN&lt;/code&gt; (connection process).</source>
          <target state="translated">从 &lt;code&gt;CONN&lt;/code&gt; 记录（连接过程）。</target>
        </trans-unit>
        <trans-unit id="5dcabc028acea9af83a7332e2b06616cdc6121c3" translate="yes" xml:space="preserve">
          <source>Make decision if test test suite passed / failed / returned error.</source>
          <target state="translated">决定测试套件是否通过/失败/返回错误。</target>
        </trans-unit>
        <trans-unit id="ace24de34a0939e0c83d6d1e95c32d478581e3fd" translate="yes" xml:space="preserve">
          <source>Master (host) sends sync packet: &lt;code&gt;{{__sync;UUID-STRING}}}&lt;/code&gt; with message value containing random UUID string.</source>
          <target state="translated">主服务器（主机）发送同步包： &lt;code&gt;{{__sync;UUID-STRING}}}&lt;/code&gt; ，消息值包含随机UUID字符串。</target>
        </trans-unit>
        <trans-unit id="defc0329fd55d6e68456c7da61fb13587d2cee7e" translate="yes" xml:space="preserve">
          <source>Master side APIs and key-value protocol is encapsulated in  &lt;code&gt;mbed-host-tests&lt;/code&gt;.</source>
          <target state="translated">主机端API和键值协议封装在 &lt;code&gt;mbed-host-tests&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="277ce5185e727fdbad5c6acd52d3288181ed59f6" translate="yes" xml:space="preserve">
          <source>Master-slave mode where host is master and DUT is slave.</source>
          <target state="translated">主从模式,主机是主,DUT是从。</target>
        </trans-unit>
        <trans-unit id="1dff4f302c44478b0ce255ebb294db458ab7ceea" translate="yes" xml:space="preserve">
          <source>Message parsing transforms key-value string message to Python event in this order:</source>
          <target state="translated">消息解析按照这个顺序将键值字符串消息转化为Python事件。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">杂项</target>
        </trans-unit>
        <trans-unit id="935dbb023ddce3e788178d70861cfc011089bbc5" translate="yes" xml:space="preserve">
          <source>Monitor serial port traffic to parse valid key-value protocol events.</source>
          <target state="translated">监视串口流量以解析有效的键值协议事件。</target>
        </trans-unit>
        <trans-unit id="3a9a8ab48c1b83362245fe9ad40e41a584f8107c" translate="yes" xml:space="preserve">
          <source>Non-Reserved event/message keys have leading &lt;code&gt;__&lt;/code&gt; in name:</source>
          <target state="translated">非保留的事件/消息键的名称前带有 &lt;code&gt;__&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8095b4836091793076a966ca6d394f63a1d2af96" translate="yes" xml:space="preserve">
          <source>Note: If you work in isolation and your test environment if fully controlled by you (for example you queue all tasks calling host tests, or use global host unique socket port numbers) this rule doesn&amp;rsquo;t apply to you.</source>
          <target state="translated">注意：如果您隔离工作，并且测试环境完全由您控制（例如，将调用主机测试的所有任务排队，或者使用全局主机唯一的套接字端口号），则此规则不适用于您。</target>
        </trans-unit>
        <trans-unit id="47e596b9e7a9a83782a11f12a805ad84ba13967a" translate="yes" xml:space="preserve">
          <source>Now you are ready to install &lt;code&gt;htrun&lt;/code&gt;:</source>
          <target state="translated">现在您可以安装 &lt;code&gt;htrun&lt;/code&gt; 了：</target>
        </trans-unit>
        <trans-unit id="9eb0e6b2b4096bdf396e40cfffe4337cf1757660" translate="yes" xml:space="preserve">
          <source>Opening connection between host computer and DUT,</source>
          <target state="translated">打开主机与DUT之间的连接。</target>
        </trans-unit>
        <trans-unit id="6321b81d1f64a69cb83d72ad2a79a36226f06233" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;--serial-output-file&lt;/code&gt; takes file name as argument and writes the target serial output to the file. Edit the file to remove lines that will change in successive executions. Put regular expressions if needed at places like benchmark numbers in above log. With these edits you are left with a template good for comparison.</source>
          <target state="translated">选项 &lt;code&gt;--serial-output-file&lt;/code&gt; 将文件名作为参数，并将目标串行输出写入文件。编辑文件以删除将在连续执行中更改的行。如果需要，将正则表达式放在上面日志中的基准编号等位置。通过这些编辑，您将获得一个很好的比较模板。</target>
        </trans-unit>
        <trans-unit id="d0a3e88637b18b51bc10629280f2881e47522630" translate="yes" xml:space="preserve">
          <source>Parsing text received from DUT (line by line)</source>
          <target state="translated">解析从DUT收到的文本(逐行)。</target>
        </trans-unit>
        <trans-unit id="2b101baf417b3e1f3cb5f9dcc491b7fe9b3cb6a1" translate="yes" xml:space="preserve">
          <source>Please observe above that all the lines that have data that changes from execution to execution (on right) have been removed. It makes it possible htrun to compare these logs. htrun matches lines from the compare log (on left) one by one. It keeps on looking for a line until it matches. Once matched it moves on to match the next line. If it finds all lines from the compare log in the target serial output stream. Then it halts and passes the examples.</source>
          <target state="translated">请注意,上面所有的数据在执行过程中发生变化的行(右图)都被删除了,这使得htrun可以对这些日志进行比较,htrun对比较日志(左图)中的行进行逐一匹配。这使得htrun可以比较这些日志。htrun从比较日志(左边)中逐行匹配。它不断地寻找行,直到匹配为止。一旦匹配,它就继续匹配下一行。如果它在目标串行输出流中找到了比较日志中的所有行。那么它就会停止并传递例子。</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">插件</target>
        </trans-unit>
        <trans-unit id="5cd9fc3a7d8416186a05c1eef602afb95a9a2640" translate="yes" xml:space="preserve">
          <source>Preamble exchange</source>
          <target state="translated">序言部分的交流</target>
        </trans-unit>
        <trans-unit id="6de83481025f3d548752a5a0be1d41faa97785e6" translate="yes" xml:space="preserve">
          <source>Protocol introduced is master-slave protocol, where master is host and slave is device under test.</source>
          <target state="translated">引入的协议是主从协议,其中主是主机,从是被测设备。</target>
        </trans-unit>
        <trans-unit id="83b2cdb22a433b1804f63b72d0ae37234a7dd681" translate="yes" xml:space="preserve">
          <source>Provide command line tool interface, command: &lt;code&gt;mbedhtrun&lt;/code&gt; after module installation (on host).</source>
          <target state="translated">提供命令行工具界面，命令：模块安装后（在主机上）： &lt;code&gt;mbedhtrun&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26d998179c9bb71ad0db255dc0c7601c06595fd3" translate="yes" xml:space="preserve">
          <source>Provide few basic host test implementations which can be used out of the box for test development. For example the basic host test (called &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;default_auto&lt;/code&gt;) just parses events from DUT and finished host test execution when &lt;code&gt;end&lt;/code&gt; event is received. Other included in this module host tests can help you to test timers or RTC.</source>
          <target state="translated">提供一些基本的主机测试实现，可以直接用于测试开发。例如，基本的主机测试（称为 &lt;code&gt;default&lt;/code&gt; 或 &lt;code&gt;default_auto&lt;/code&gt; ）仅解析来自DUT的事件，并在接收到 &lt;code&gt;end&lt;/code&gt; 事件时完成主机测试的执行。该模块中的其他主机测试可以帮助您测试计时器或RTC。</target>
        </trans-unit>
        <trans-unit id="067fdaf097fe2f4fa9cab7c1cfd6cf55767ca001" translate="yes" xml:space="preserve">
          <source>Reserved event/message keys have leading &lt;code&gt;__&lt;/code&gt; in name:</source>
          <target state="translated">保留的事件/消息键的名称前带有 &lt;code&gt;__&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="825cd14df7acabb05a94e4445c62d49fcb9bfdc9" translate="yes" xml:space="preserve">
          <source>Reset mbed device after flashing to start test suite execution.</source>
          <target state="translated">闪存后重置mbed设备,开始执行测试套件。</target>
        </trans-unit>
        <trans-unit id="59c74e7780ed5c235fa3625ceb843ea2d8182d8e" translate="yes" xml:space="preserve">
          <source>Result returned from host test is a test suite result. Test cases results are reported by DUT, usually using modified &lt;code&gt;utest&lt;/code&gt; framework.</source>
          <target state="translated">主机测试返回的结果是测试套件结果。测试用例结果由DUT报告，通常使用改进的 &lt;code&gt;utest&lt;/code&gt; 框架。</target>
        </trans-unit>
        <trans-unit id="7eb43fac4bae0d97d9b8c2b4f1c7a4531e1501ff" translate="yes" xml:space="preserve">
          <source>Return result after __exit</source>
          <target state="translated">__exit后返回结果</target>
        </trans-unit>
        <trans-unit id="594827c48dee112f581a689b42115759d1c3c8dc" translate="yes" xml:space="preserve">
          <source>Run key-value protocol state machine and execute event callbacks.</source>
          <target state="translated">运行键值协议状态机,执行事件回调。</target>
        </trans-unit>
        <trans-unit id="28e87a733a5102266279adcaf92bb31b4e8dfa30" translate="yes" xml:space="preserve">
          <source>SARA NBIOT EVK</source>
          <target state="translated">SARA NBIOT EVK</target>
        </trans-unit>
        <trans-unit id="d73bb20965191cea0e2d0700f76a1ca705dd4799" translate="yes" xml:space="preserve">
          <source>Simple key-value protocol is introduced. It is used to communicate between DUT and host. Protocol main features:</source>
          <target state="translated">介绍了简单的键值协议。它用于DUT与主机之间的通信。协议主要特点:</target>
        </trans-unit>
        <trans-unit id="06cc574fa4d7414bcd447ee8fce507719ead92d8" translate="yes" xml:space="preserve">
          <source>Skip flashing phase (e.g. you've already flashed this device with &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; binary). Use serial port &lt;code&gt;COM4&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">跳过刷新阶段（例如，您已经使用 &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; 二进制文件刷新了该设备）。使用串行端口 &lt;code&gt;COM4&lt;/code&gt; 与DUT通信：</target>
        </trans-unit>
        <trans-unit id="4df361bbe32ced8a6f9e97b5ebddb8461b1bd534" translate="yes" xml:space="preserve">
          <source>Slave side APIs and key-value protocol implementation is encapsulated in &lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt; module.</source>
          <target state="translated">从站API和键值协议实现封装在&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt;模块中。</target>
        </trans-unit>
        <trans-unit id="e70c5705c8542d7e86f593c06d9341c8d2b28434" translate="yes" xml:space="preserve">
          <source>Slave side key-value protocol API, see &lt;a href=&quot;https://github.com/ARMmbed/mbed-os/blob/master/features/frameworks/greentea-client/greentea-client/test_env.h&quot;&gt;here&lt;/a&gt; for details.</source>
          <target state="translated">从侧键值协议API，请参见&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/blob/master/features/frameworks/greentea-client/greentea-client/test_env.h&quot;&gt;此处&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa6ff5371ac33c3951672e8ff547398ae9695810" translate="yes" xml:space="preserve">
          <source>Templated log simply means a log with text that does not change or regular expressions replacing original text. Below is an example of the templated log:</source>
          <target state="translated">Templated log简单来说就是用文字不改变或用正则表达式代替原文的日志。下面是一个模板化日志的例子。</target>
        </trans-unit>
        <trans-unit id="eb391cb90069057c99db0fe99cf4552916bab489" translate="yes" xml:space="preserve">
          <source>Test execution phase will consist of:</source>
          <target state="translated">测试执行阶段将包括:</target>
        </trans-unit>
        <trans-unit id="83e3b70840fadf5bea17a0e24aef786b3d0ffc67" translate="yes" xml:space="preserve">
          <source>Test suite is implemented so that it will never exit / finish its execution. For example &lt;code&gt;main()&lt;/code&gt; or &lt;code&gt;app_start()&lt;/code&gt; functions are implemented using infinite (endless) loop. This property have for example UDP/TCP servers (listening forever), all sorts of echo servers etc.</source>
          <target state="translated">测试套件已实现，因此它将永远不会退出/完成其执行。例如， &lt;code&gt;main()&lt;/code&gt; 或 &lt;code&gt;app_start()&lt;/code&gt; 函数是使用无限（无限）循环实现的。此属性具有例如UDP / TCP服务器（永远监听），各种回显服务器等。</target>
        </trans-unit>
        <trans-unit id="594012e05268bdd744c42186997dd5ea17a93ab5" translate="yes" xml:space="preserve">
          <source>Testing mbed-os examples</source>
          <target state="translated">测试mbed-os的例子</target>
        </trans-unit>
        <trans-unit id="e0519cea3ce164f13b54a2744defb9155e41b935" translate="yes" xml:space="preserve">
          <source>Text based protocol, format &lt;code&gt;{{KEY;VALUE}}}&lt;/code&gt;.</source>
          <target state="translated">基于文本的协议，格式为 &lt;code&gt;{{KEY;VALUE}}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="870b045bf88b413a3138f7d28f1fad5077b089f8" translate="yes" xml:space="preserve">
          <source>The &quot;--fm&quot; option only available when &lt;a href=&quot;https://github.com/ARMmbed/mbed-fastmodel-agent&quot;&gt;mbed-fastmodel-agent&lt;/a&gt; module is installed :</source>
          <target state="translated">&amp;ldquo; --fm&amp;rdquo;选项仅在安装&lt;a href=&quot;https://github.com/ARMmbed/mbed-fastmodel-agent&quot;&gt;mbed-fastmodel-agent&lt;/a&gt;模块时可用：</target>
        </trans-unit>
        <trans-unit id="85c890bac201b9058908fec1463a1d2a9cb01d34" translate="yes" xml:space="preserve">
          <source>The SARA NBIOT EVK board must be connected to a Windows PC using a Segger JLink box, which is used for downloading code and resetting the board. The USB port on the EVK must also be connected to the same PC.  To make use of these hooks you will also require access to some proprietary tools that can be requested from u-blox.</source>
          <target state="translated">SARA NBIOT EVK板必须使用Segger JLink盒连接到Windows PC上,用于下载代码和重置板子。EVK上的USB端口也必须连接到同一台PC上。要使用这些钩子,您还需要使用一些专用工具,这些工具可以向 u-blox 申请。</target>
        </trans-unit>
        <trans-unit id="a1d3614cfb60cf469b630755b7dafb4e3fd4e715" translate="yes" xml:space="preserve">
          <source>The development of Htrun has been moved into the &lt;a href=&quot;../../src/mbed_os_tools&quot;&gt;mbed-os-tools&lt;/a&gt; package. You can continue to use this module for legacy reasons, however all further development should be continued in the new package.</source>
          <target state="translated">Htrun的开发已移至&lt;a href=&quot;../../src/mbed_os_tools&quot;&gt;mbed-os-tools&lt;/a&gt;软件包中。由于遗留原因，您可以继续使用此模块，但是所有进一步的开发都应在新软件包中继续进行。</target>
        </trans-unit>
        <trans-unit id="6fce2d6a602e17341d42158c18479a0c7fde13f6" translate="yes" xml:space="preserve">
          <source>This chapter will present few examples of how you can use &lt;code&gt;mbedhtrun&lt;/code&gt; command line to execute tests. In most cases test automation tools such as &lt;a href=&quot;https://github.com/ARMmbed/greentea&quot;&gt;Greentea&lt;/a&gt; will execute &lt;code&gt;mbedhtrun&lt;/code&gt; implicitly. There are cases when we want to execute &lt;code&gt;mbedhtrun&lt;/code&gt; independently. Mostly in situation when we want to:</source>
          <target state="translated">本章将提供一些示例，说明如何使用 &lt;code&gt;mbedhtrun&lt;/code&gt; 命令行执行测试。在大多数情况下，诸如&lt;a href=&quot;https://github.com/ARMmbed/greentea&quot;&gt;Greentea之&lt;/a&gt;类的测试自动化工具将隐式执行 &lt;code&gt;mbedhtrun&lt;/code&gt; 。在某些情况下，我们想独立执行 &lt;code&gt;mbedhtrun&lt;/code&gt; 。在大多数情况下，当我们想要：</target>
        </trans-unit>
        <trans-unit id="25cfa2b01075915c44d77b45ca4c742f78dd7e79" translate="yes" xml:space="preserve">
          <source>This function should replace &lt;code&gt;scanf()&lt;/code&gt; used to check for incoming messages from master.
Function parses input and if key-value message is found load to &lt;code&gt;out_key&lt;/code&gt;, &lt;code&gt;out_value&lt;/code&gt; key-value pair. Use &lt;code&gt;out_key_size&lt;/code&gt; and &lt;code&gt;out_value_size&lt;/code&gt; to define out buffers max size (including trailing zero).</source>
          <target state="translated">此函数应替换用于检查来自主服务器的传入消息的 &lt;code&gt;scanf()&lt;/code&gt; 。函数解析输入，如果找到键值消息， &lt;code&gt;out_value&lt;/code&gt; 加载到 &lt;code&gt;out_key&lt;/code&gt; ，out_value键值对。使用 &lt;code&gt;out_key_size&lt;/code&gt; 和 &lt;code&gt;out_value_size&lt;/code&gt; 定义输出缓冲区的最大大小（包括尾随零）。</target>
        </trans-unit>
        <trans-unit id="65299901239874a6cb949a2e51f51f4fbb5a9775" translate="yes" xml:space="preserve">
          <source>This option is designed for htrun to use Arm Fast Models.</source>
          <target state="translated">此选项是为htrun使用快速臂模型而设计的。</target>
        </trans-unit>
        <trans-unit id="44e2532f0cb63fd8184a45f5dee53bd8b75b0c12" translate="yes" xml:space="preserve">
          <source>This phase comes just after handshake phase. DUT informs host about test parameters such as client version, timeout, requested host test name etc. After this part is finished master will create requested host test and attach callbacks to user events.
This phase is ended with &lt;code&gt;__host_test_name&lt;/code&gt; being received by host. After &lt;code&gt;__host_test_name&lt;/code&gt; event is received</source>
          <target state="translated">此阶段刚好在握手阶段之后。DUT通知主机有关测试参数的信息，例如客户端版本，超时，请求的主机测试名称等。完成这一部分后，master将创建请求的主机测试并将回调附加到用户事件。此阶段以主机接收 &lt;code&gt;__host_test_name&lt;/code&gt; 结束。收到 &lt;code&gt;__host_test_name&lt;/code&gt; 事件后</target>
        </trans-unit>
        <trans-unit id="87ffd053a24a9a4cd443eaef85db7c0d348b406b" translate="yes" xml:space="preserve">
          <source>Time stamp: &lt;code&gt;2016-02-11 19:53:27&lt;/code&gt;, see below:</source>
          <target state="translated">时间戳记： &lt;code&gt;2016-02-11 19:53:27&lt;/code&gt; ，参见下文：</target>
        </trans-unit>
        <trans-unit id="4af2c9ff1813d587766abee9f7ec0510e0469717" translate="yes" xml:space="preserve">
          <source>To avoid miscommunication between master and slave simple handshake protocol is introduces:</source>
          <target state="translated">为了避免主从之间的误解,引入了简单的握手协议。</target>
        </trans-unit>
        <trans-unit id="cf2dc67e3be0bab3e7a0cc8e1a40911892791049" translate="yes" xml:space="preserve">
          <source>To capture a log use following option:</source>
          <target state="translated">要捕捉日志,请使用以下选项。</target>
        </trans-unit>
        <trans-unit id="82291530bb70e06584cb774caa50c878ef17f36b" translate="yes" xml:space="preserve">
          <source>To check whether the installation was successful try running the &lt;code&gt;mbedgt --help&lt;/code&gt; command and check that it returns information (you may need to restart your terminal first):</source>
          <target state="translated">要检查安装是否成功，请尝试运行 &lt;code&gt;mbedgt --help&lt;/code&gt; 命令并检查它是否返回信息（您可能需要首先重新启动终端）：</target>
        </trans-unit>
        <trans-unit id="ab53aec5e2dcd07bcd2bff109dfd75ca828a92a6" translate="yes" xml:space="preserve">
          <source>To install mbed-ls from &lt;a href=&quot;https://pypi.python.org/pypi/mbed-host-tests&quot;&gt;PyPI&lt;/a&gt; use command:</source>
          <target state="translated">要从&lt;a href=&quot;https://pypi.python.org/pypi/mbed-host-tests&quot;&gt;PyPI&lt;/a&gt;安装mbed-ls，请使用命令：</target>
        </trans-unit>
        <trans-unit id="820de9ca27785efb587fcd2b2a418cd80b042a8e" translate="yes" xml:space="preserve">
          <source>To install the mbed test suite, first clone the &lt;code&gt;mbed-os-tools&lt;/code&gt; repository:</source>
          <target state="translated">要安装mbed测试套件，请首先克隆 &lt;code&gt;mbed-os-tools&lt;/code&gt; 存储库：</target>
        </trans-unit>
        <trans-unit id="b03cb0e400fb841ec31aad1884efb8674d590f0e" translate="yes" xml:space="preserve">
          <source>Transport layer consist of simple &lt;code&gt;{{ KEY ; VALUE }} \n&lt;/code&gt; text messages sent by slave (DUT). Both key and value are strings with allowed character set limitations (to simplify parsing and protocol parser itself). Message ends with required by DUT K-V parser &lt;code&gt;\n&lt;/code&gt; character.</source>
          <target state="translated">传输层由简单的 &lt;code&gt;{{ KEY ; VALUE }} \n&lt;/code&gt; 由从站（DUT）发送的文本消息。键和值都是具有允许的字符集限制的字符串（以简化解析和协议解析器本身）。消息以DUT KV解析器 &lt;code&gt;\n&lt;/code&gt; 字符要求的结尾。</target>
        </trans-unit>
        <trans-unit id="70fd40f266f853f835d86fc1d1b7cad7ea02d3f9" translate="yes" xml:space="preserve">
          <source>Use following command to test the example and the comparison log:</source>
          <target state="translated">使用下面的命令来测试示例和比较日志。</target>
        </trans-unit>
        <trans-unit id="334d09ec6a6d9108ec4a6116afbeec4c31b8b481" translate="yes" xml:space="preserve">
          <source>Use key-value protocol to handshake with device and make sure correct host test script is executed to supervise test suite execution.</source>
          <target state="translated">使用键值协议与设备握手,并确保执行正确的主机测试脚本以监督测试套件的执行。</target>
        </trans-unit>
        <trans-unit id="e1bd0c9c0eeddbe79b76d282f89baa5e70f98f49" translate="yes" xml:space="preserve">
          <source>Useful command line end-to-end examples</source>
          <target state="translated">有用的命令行端到端例子</target>
        </trans-unit>
        <trans-unit id="979177c3f7c9f6589829903f8006c1110617023c" translate="yes" xml:space="preserve">
          <source>User can't register callbacks to &quot;system events&quot; with few exceptions.</source>
          <target state="translated">用户不能注册 &quot;系统事件 &quot;的回调,只有少数例外。</target>
        </trans-unit>
        <trans-unit id="d7f65ec270b5858ddcb0ea43a171f75c69a50de3" translate="yes" xml:space="preserve">
          <source>Using __rdx_line event</source>
          <target state="translated">使用__rdx_line事件</target>
        </trans-unit>
        <trans-unit id="36b9d36e832107c9ae2570465ca25bcbd5a3dd97" translate="yes" xml:space="preserve">
          <source>We can use few methods to structure out test suite and test cases. Simpliest would be to use &lt;code&gt;greentea-client&lt;/code&gt; API and wrap one test case inside out test suite. This way of creating test suite is useful when you want to:</source>
          <target state="translated">我们可以使用几种方法来构造测试套件和测试用例。最简单的方法是使用 &lt;code&gt;greentea-client&lt;/code&gt; API并将一个测试用例包装到测试套件中。当您要执行以下操作时，这种创建测试套件的方法非常有用：</target>
        </trans-unit>
        <trans-unit id="9fc54ec0002c9b3a7dc3a343aa736d8a5a416316" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;__sync&lt;/code&gt; packet is parsed in the stream DUT sends back (echoes) &lt;code&gt;__sync&lt;/code&gt; event with the same &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_3_.28MD5_hash_.26_namespace.29&quot;&gt;UUID&lt;/a&gt; as payload. UUID is a random value e.g.  &lt;code&gt;5f8dbbd2-199a-449c-b286-343a57da7a37&lt;/code&gt;.</source>
          <target state="translated">当在流中解析 &lt;code&gt;__sync&lt;/code&gt; 数据包时，DUT发回（回显）具有与有效载荷相同的&lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_3_.28MD5_hash_.26_namespace.29&quot;&gt;UUID的&lt;/a&gt; &lt;code&gt;__sync&lt;/code&gt; 事件。UUID是随机值，例如 &lt;code&gt;5f8dbbd2-199a-449c-b286-343a57da7a37&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f341882dc398289385b72f5e1d586c00508a549" translate="yes" xml:space="preserve">
          <source>When writing a new host test for your module please bear in mind that:</source>
          <target state="translated">当为您的模块编写一个新的主机测试时,请记住。</target>
        </trans-unit>
        <trans-unit id="d09112b342b1d638b05c2a329147d91b17294862" translate="yes" xml:space="preserve">
          <source>When writing host test using OS resources such as sockets, files, serial ports, peripheral devices like for example multi-meters / scopes. remember that those resources are indivisible!</source>
          <target state="translated">当使用操作系统资源,如套接字、文件、串口、外围设备(如多表/示波器)编写主机测试时,请记住这些资源是不可分割的。</target>
        </trans-unit>
        <trans-unit id="890f3875b8b3d9fcc39b709891847f99bce284ee" translate="yes" xml:space="preserve">
          <source>Writing DUT test suite (slave side)</source>
          <target state="translated">编写DUT测试套件(从属侧)</target>
        </trans-unit>
        <trans-unit id="21e2e206cbdc9151364078fceb1dfe895ed9b4d2" translate="yes" xml:space="preserve">
          <source>Writing host tests (master side)</source>
          <target state="translated">编写主机测试(主控端</target>
        </trans-unit>
        <trans-unit id="b71b200d5a694f60a42059425701583d39b0e89e" translate="yes" xml:space="preserve">
          <source>You can register callbacks in &lt;code&gt;setup()&lt;/code&gt; phase or decorate callback functions using &lt;code&gt;@event_callback&lt;/code&gt; decorator.</source>
          <target state="translated">您可以在 &lt;code&gt;setup()&lt;/code&gt; 阶段注册回调，也可以使用 &lt;code&gt;@event_callback&lt;/code&gt; 装饰器装饰回调函数。</target>
        </trans-unit>
        <trans-unit id="0796fb65c6f1d0d01f20cd07e52afc4c962187db" translate="yes" xml:space="preserve">
          <source>You need to place your custom host test in &lt;code&gt;&amp;lt;module&amp;gt;/test/host_tests&lt;/code&gt; directory.</source>
          <target state="translated">您需要将自定义主机测试放在 &lt;code&gt;&amp;lt;module&amp;gt;/test/host_tests&lt;/code&gt; 目录中。</target>
        </trans-unit>
        <trans-unit id="329e432f66c96948efd63ceddf05f381ac23e2af" translate="yes" xml:space="preserve">
          <source>You need to write and specify by name your custom host test:</source>
          <target state="translated">你需要编写并通过名称指定你的自定义主机测试。</target>
        </trans-unit>
        <trans-unit id="d086cfdf9e616756e97771786e29c764137f85f5" translate="yes" xml:space="preserve">
          <source>You own the host test and you should write it the way so it can coexist with the same host tests ran by other processes such as Continuous Integration systems or other host users.</source>
          <target state="translated">你拥有主机测试,你应该以这样的方式编写它,以便它可以与其他进程(如持续集成系统或其他主机用户)运行的相同主机测试共存。</target>
        </trans-unit>
        <trans-unit id="2f248e4c7bc213c0e1d04f3156433841516876eb" translate="yes" xml:space="preserve">
          <source>calls immediately &lt;code&gt;greentea_parse_kv&lt;/code&gt; (blocking parse of input serial port for event &lt;code&gt;{{__sync;UUID}}&lt;/code&gt;).</source>
          <target state="translated">立即调用 &lt;code&gt;greentea_parse_kv&lt;/code&gt; （阻塞对事件 &lt;code&gt;{{__sync;UUID}}&lt;/code&gt; 的输入串行端口的解析）。</target>
        </trans-unit>
        <trans-unit id="58a78d6d31f54b4406d541d02584f0cf73d3de31" translate="yes" xml:space="preserve">
          <source>debug our code and have binary + host test instrumentation on,</source>
          <target state="translated">调试我们的代码,并有二进制+主机测试仪器开启。</target>
        </trans-unit>
        <trans-unit id="4a0d7154d60bc6a4a8440a6c5fd4b6c5c8cad825" translate="yes" xml:space="preserve">
          <source>device reset and</source>
          <target state="translated">设备复位和</target>
        </trans-unit>
        <trans-unit id="0ae41492d3c7b24fb4ca6e6e797730f9f461f714" translate="yes" xml:space="preserve">
          <source>driving test binary flashing,</source>
          <target state="translated">驾考二进制闪烁。</target>
        </trans-unit>
        <trans-unit id="924e021d80ca878162edcc13bd21682f4723012d" translate="yes" xml:space="preserve">
          <source>just want to replace test runner in another OS with one compatible with mbed-enabled devices.</source>
          <target state="translated">只是想在另一个操作系统中用一个兼容mbed-enabled设备的测试运行器来代替。</target>
        </trans-unit>
        <trans-unit id="051785d5a53040a76f3a795c9fdbe3a2b7c1ba4d" translate="yes" xml:space="preserve">
          <source>key-value data becomes a recognizable message with key (string) and value (string) payload.</source>
          <target state="translated">key-value数据成为一个可识别的消息,其key(字符串)和value(字符串)有效载荷。</target>
        </trans-unit>
        <trans-unit id="2d8a18bd8189a1ef27e733539fdea3a301fa251c" translate="yes" xml:space="preserve">
          <source>make example application (example as a test) or</source>
          <target state="translated">举一反三</target>
        </trans-unit>
        <trans-unit id="d521450035bfa4fa670a2d66f41a8c7ef4020fda" translate="yes" xml:space="preserve">
          <source>mbed tools used to flash, reset and supervise test execution for mbed-enabled devices</source>
          <target state="translated">mbed工具用于闪存、复位和监督mbed设备的测试执行。</target>
        </trans-unit>
        <trans-unit id="c7dca3c11ec8a5b089c578680afaf92dd9f71663" translate="yes" xml:space="preserve">
          <source>mbed's test suite (codenamed &lt;code&gt;Greentea&lt;/code&gt;) supports the &lt;em&gt;test supervisor&lt;/em&gt; concept. This concept is realized by this module. &lt;code&gt;mbed-host-tests&lt;/code&gt; is a collection of host tests. Host test is script written in Python, which is executed in parallel with the test suite runner (a binary running on the target hardware / device under test) to monitor the test execution's progress or to control the test flow (interaction with the mbed device under test - DUT). The host test is also responsible for grabbing the test result, or deducing it from the test runner's behavior.</source>
          <target state="translated">mbed的测试套件（代号 &lt;code&gt;Greentea&lt;/code&gt; ）支持&lt;em&gt;测试主管&lt;/em&gt;概念。这个概念是通过这个模块来实现的。 &lt;code&gt;mbed-host-tests&lt;/code&gt; 是主机测试的集合。主机测试是用Python编写的脚本，该脚本与测试套件运行程序（在测试的目标硬件/设备上运行的二进制文件）并行执行，以监视测试执行的进度或控制测试流程（与mbed设备交互）测试-DUT）。主机测试还负责获取测试结果，或从测试运行者的行为中推论得出。</target>
        </trans-unit>
        <trans-unit id="d24be69745afbb12c8b0d04eab75845575a8791d" translate="yes" xml:space="preserve">
          <source>mbed-host-tests</source>
          <target state="translated">mbed-host-tests</target>
        </trans-unit>
        <trans-unit id="9a2f25d66a9f94f62ac0a0c7361a1064add6b06f" translate="yes" xml:space="preserve">
          <source>mbed-os examples are essentially sample apps written as inspirational code for developers to understand the mbed-os APIs and coding paradigms. Before every mbed-os release all examples are tested across all supported configs and platforms. There is already a large set examples available and as they grow it is important to automate them. Hence automating examples make sense. Although it is important not to pollute them with test like instrumentation. As that will defeat the purpose of examples being simple and specific.</source>
          <target state="translated">mbed-os的例子基本上是作为启发开发者理解mbed-os APIs和编码模式的示例代码。在每次发布mbed-os之前,所有的例子都会在所有支持的配置和平台上进行测试。目前已经有了大量的例子,随着例子的增加,将它们自动化是很重要的。因此,自动化例子是有意义的。虽然重要的是不要用类似测试的工具来污染它们。因为这将违背例子简单和具体的目的。</target>
        </trans-unit>
        <trans-unit id="f6c5a3ffbcae54629b163af76fe38d26150e50f4" translate="yes" xml:space="preserve">
          <source>preferred host test script (Python script which is used to supervise/instrument test execution),</source>
          <target state="translated">首选的主机测试脚本(Python脚本,用于监督/检测测试执行)。</target>
        </trans-unit>
        <trans-unit id="0152edce00462ac4cc087f3acc4250a2fe8763ec" translate="yes" xml:space="preserve">
          <source>prototype or</source>
          <target state="translated">样板</target>
        </trans-unit>
        <trans-unit id="4c478d8822658f18e996b8d7fcfafadff0859ea5" translate="yes" xml:space="preserve">
          <source>test environment version,</source>
          <target state="translated">测试环境版本。</target>
        </trans-unit>
        <trans-unit id="dde8714ae7facacf6c0b129f3ca63306b4a73d03" translate="yes" xml:space="preserve">
          <source>test execution.</source>
          <target state="translated">测试执行。</target>
        </trans-unit>
        <trans-unit id="3ca732331b49aa9581fbadd09382dba22ed19286" translate="yes" xml:space="preserve">
          <source>test timeout,</source>
          <target state="translated">测试超时。</target>
        </trans-unit>
        <trans-unit id="f08278b6533f3536f5ef21e38149813caa1d07be" translate="yes" xml:space="preserve">
          <source>when your test suite is calling blocking forever function. For example all types of UDP/TCP servers which run in forever loop are in this category. In this case we do not expect from DUT &lt;code&gt;__exit&lt;/code&gt; event at all and host test should be designed in such a way that it always return result.</source>
          <target state="translated">当您的测试套件正在调用永久阻止功能时。例如，永远循环运行的所有类型的UDP / TCP服务器都在此类别中。在这种情况下，我们根本就不会期望DUT &lt;code&gt;__exit&lt;/code&gt; 事件发生，并且应该以始终返回结果的方式设计主机测试。</target>
        </trans-unit>
        <trans-unit id="cebce5c7c70edab2f7eb6dc6175ab54cb19eec96" translate="yes" xml:space="preserve">
          <source>write only one test case inside test suite,</source>
          <target state="translated">在测试套件中只写一个测试用例。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
