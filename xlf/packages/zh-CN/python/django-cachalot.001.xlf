<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/django-cachalot/">
    <body>
      <group id="django-cachalot">
        <trans-unit id="a45af808382114bc771ae870f1de9a7c2c79d018" translate="yes" xml:space="preserve">
          <source>'cachalot',</source>
          <target state="translated">'cachalot'，</target>
        </trans-unit>
        <trans-unit id="561a563eb921eb4947471dc6aab50249fb9e9336" translate="yes" xml:space="preserve">
          <source>'cachalot.panels.CachalotPanel',</source>
          <target state="translated">'cachalot.panels.CachalotPanel'，</target>
        </trans-unit>
        <trans-unit id="5ec85c6e3aa6dfdb8052db95993ca9c5b35c4b5c" translate="yes" xml:space="preserve">
          <source>, you can
get a nearly 100x speed up for your initial deployment.</source>
          <target state="translated">，您的初始部署速度将提高近100倍。</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">添加</target>
        </trans-unit>
        <trans-unit id="720489cae05fc6dd4c31fac7b5cf1ab9350ee6fc" translate="yes" xml:space="preserve">
          <source>Be aware of &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#limits&quot;&gt;the few other limits&lt;/a&gt;</source>
          <target state="translated">注意&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#limits&quot;&gt;其他一些限制&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ed99e75a9b04f273de29c9fef2bd3fb53d2e2de" translate="yes" xml:space="preserve">
          <source>Benchmark</source>
          <target state="translated">基准</target>
        </trans-unit>
        <trans-unit id="8150f1787227276cedb29d0eb9c50b98feec687c" translate="yes" xml:space="preserve">
          <source>CREATE ROLE cachalot LOGIN SUPERUSER;</source>
          <target state="translated">CREATE ROLE sperm whale LOGIN SUPERUSER;</target>
        </trans-unit>
        <trans-unit id="103ea722625bc60c145711a0004ccdbe054ea5b7" translate="yes" xml:space="preserve">
          <source>Cachalot is good when there are &amp;lt;50 modifications per second on a hot cached table. This is mostly due to cache invalidation. It&amp;rsquo;s the same with any cache,
which is why we suggest you use cache-machine for hot caches. Cache-machine caches individual objects, taking up more in the memory store but
invalidates those individual objects instead of the entire table like cachalot.</source>
          <target state="translated">当热高速缓存的表上每秒少于50次修改时，Cachalot很好。这主要是由于缓存无效。任何高速缓存都是相同的，这就是为什么我们建议您对高速缓存使用高速缓存机器。缓存机缓存单个对象，在内存存储中占据更多空间，但会使这些单个对象无效，而不是使整个表无效，例如cachalot。</target>
        </trans-unit>
        <trans-unit id="78ff8129974f02380c9c98210e5b0eb01899e1e7" translate="yes" xml:space="preserve">
          <source>Cachalot is more-or-less intended for cold caches or &amp;ldquo;just-right&amp;rdquo; conditions. If you find a partition library for
Django (also authored but work-in-progress by &lt;a href=&quot;https://github.com/Andrew-Chen-Wang&quot;&gt;Andrew Chen Wang&lt;/a&gt;), then the caching will work better since sharding
the cold/accessed-the-least records aren&amp;rsquo;t invalidated as much.</source>
          <target state="translated">Cachalot或多或少旨在用于高速缓存或&amp;ldquo;恰到好处&amp;rdquo;的情况。如果您找到了Django的分区库（也由&lt;a href=&quot;https://github.com/Andrew-Chen-Wang&quot;&gt;Andrew Chen Wang&lt;/a&gt;撰写但仍在进行中），则缓存将更好地工作，因为分片冷/最少访问记录不会被无效化。</target>
        </trans-unit>
        <trans-unit id="815776204d0a2fd0426869aff5b06ac685a24f70" translate="yes" xml:space="preserve">
          <source>Cachalot officially supports Python 3.5-3.8 and Django 2.0-2.2, 3.0-3.1 with the databases PostgreSQL, SQLite, and MySQL.</source>
          <target state="translated">Cachalot官方支持Python 3.5-3.8和Django 2.0-2.2、3.0-3.1,数据库为PostgreSQL、SQLite和MySQL。</target>
        </trans-unit>
        <trans-unit id="9e60a19819e4ebe4863ffec6d02b11a63097069d" translate="yes" xml:space="preserve">
          <source>Caches your Django ORM queries and automatically invalidates them.</source>
          <target state="translated">缓存你的Django ORM查询并自动失效。</target>
        </trans-unit>
        <trans-unit id="a28d51f3c067efa400f5c00b70afe56c7d88b982" translate="yes" xml:space="preserve">
          <source>Currently, benchmarks are supported on Linux and Mac/Darwin.
You will need a database called &amp;ldquo;cachalot&amp;rdquo; on MySQL and PostgreSQL.
Additionally, on PostgreSQL, you will need to create a role
called &amp;ldquo;cachalot.&amp;rdquo; You can also run the benchmark, and it&amp;rsquo;ll raise
errors with specific instructions for how to fix it.</source>
          <target state="translated">当前，Linux和Mac / Darwin支持基准测试。在MySQL和PostgreSQL上，您将需要一个名为&amp;ldquo; cachalot&amp;rdquo;的数据库。此外，在PostgreSQL上，您将需要创建一个名为&amp;ldquo; cachalot&amp;rdquo;的角色。您还可以运行基准测试，它会针对如何修复该基准的特定说明引发错误。</target>
        </trans-unit>
        <trans-unit id="e64b2c52a0441e687a470c59954406ff6e423d6e" translate="yes" xml:space="preserve">
          <source>DEBUG_TOOLBAR_PANELS</source>
          <target state="translated">DEBUG_TOOLBAR_PANELS(工具条面板)</target>
        </trans-unit>
        <trans-unit id="8fb937b602b4f2ef21c7fab00ac15de3b3ba49ea" translate="yes" xml:space="preserve">
          <source>Discussion</source>
          <target state="translated">讨论情况</target>
        </trans-unit>
        <trans-unit id="b31a604dabbf6aef53f79d00b3e90bf1cf00bd03" translate="yes" xml:space="preserve">
          <source>Documentation: &lt;a href=&quot;http://django-cachalot.readthedocs.io&quot;&gt;http://django-cachalot.readthedocs.io&lt;/a&gt;</source>
          <target state="translated">说明文件：&lt;a href=&quot;http://django-cachalot.readthedocs.io&quot;&gt;http&lt;/a&gt; : //django-cachalot.readthedocs.io</target>
        </trans-unit>
        <trans-unit id="f5169c84497de3aea74f7da9e7e177d1427e736b" translate="yes" xml:space="preserve">
          <source>Enjoy!</source>
          <target state="translated">好好享受吧</target>
        </trans-unit>
        <trans-unit id="34f77861031df7b766d090766f627ae22906979b" translate="yes" xml:space="preserve">
          <source>For PostgreSQL:</source>
          <target state="translated">对于PostgreSQL。</target>
        </trans-unit>
        <trans-unit id="c7bf2456e4f82f88459c5a475e105792cdc3ca91" translate="yes" xml:space="preserve">
          <source>For setup:</source>
          <target state="translated">用于设置。</target>
        </trans-unit>
        <trans-unit id="042aee861714d7b9bfacd93eab367be33e92d774" translate="yes" xml:space="preserve">
          <source>Hacking</source>
          <target state="translated">黑客攻击</target>
        </trans-unit>
        <trans-unit id="18daa04a0a2c17241247a347387639ee43095623" translate="yes" xml:space="preserve">
          <source>Help? Technical chat? &lt;a href=&quot;https://join.slack.com/t/cachalotdjango/shared_invite/zt-dd0tj27b-cIH6VlaSOjAWnTG~II5~qw&quot;&gt;It&amp;rsquo;s here on Slack&lt;/a&gt;.</source>
          <target state="translated">帮帮我？技术聊天？&lt;a href=&quot;https://join.slack.com/t/cachalotdjango/shared_invite/zt-dd0tj27b-cIH6VlaSOjAWnTG~II5~qw&quot;&gt;在Slack上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f20870c5fe9f8118e8fb4eca60c4dcb38053af40" translate="yes" xml:space="preserve">
          <source>INSTALLED_APPS</source>
          <target state="translated">已安装的应用程序</target>
        </trans-unit>
        <trans-unit id="eb786e27f94897d31933c0a4bd465674b5579596" translate="yes" xml:space="preserve">
          <source>If you modify data outside Django
&amp;ndash;&amp;nbsp;typically after restoring a SQL database&amp;nbsp;&amp;ndash;,
use the &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/quickstart.html#command&quot;&gt;manage.py command&lt;/a&gt;</source>
          <target state="translated">如果您在Django之外修改数据（通常是在还原SQL数据库之后），请使用&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/quickstart.html#command&quot;&gt;manage.py命令&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52d30f5e3abdc963f92d597dacc42f4d27a8b5f3" translate="yes" xml:space="preserve">
          <source>If you use
&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;django-debug-toolbar&lt;/a&gt;,
you can add</source>
          <target state="translated">如果使用 &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;django-debug-toolbar&lt;/a&gt;，则可以添加</target>
        </trans-unit>
        <trans-unit id="e6e24c9dd7e502f48e1f12be4d6fc1979059f699" translate="yes" xml:space="preserve">
          <source>If you use multiple servers with a common cache server,
&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#multiple-servers&quot;&gt;double check their clock synchronisation&lt;/a&gt;</source>
          <target state="translated">如果您将多个服务器与一个公共缓存服务器一起使用， &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#multiple-servers&quot;&gt;请仔细检查其时钟同步&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8358a66612875f90b48c5f31167ce547a99912dc" translate="yes" xml:space="preserve">
          <source>Install:</source>
          <target state="translated">安装。</target>
        </trans-unit>
        <trans-unit id="b47117524114cdb4a0eaaf7cd63b8549ebbbdc58" translate="yes" xml:space="preserve">
          <source>Legacy chat: &lt;a href=&quot;https://gitter.im/django-cachalot/Lobby&quot;&gt;https://gitter.im/django-cachalot/Lobby&lt;/a&gt;</source>
          <target state="translated">旧版聊天：&lt;a href=&quot;https://gitter.im/django-cachalot/Lobby&quot;&gt;https&lt;/a&gt;：//gitter.im/django-cachalot/Lobby</target>
        </trans-unit>
        <trans-unit id="7e5f36adf5e0f7fa4d473375d3d8148c6453b2de" translate="yes" xml:space="preserve">
          <source>Make sure you have the following services:</source>
          <target state="translated">确保你有以下服务:</target>
        </trans-unit>
        <trans-unit id="edc301f7283a9e45e85a8a8deab4551d236d86a4" translate="yes" xml:space="preserve">
          <source>Memcached</source>
          <target state="translated">Memcached</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="1d2ea5ad412bd94eb903811d7f1f8307cd3a293d" translate="yes" xml:space="preserve">
          <source>Note 1: My personal experience with caches stems from Reddit&amp;rsquo;s: &lt;a href=&quot;https://redditblog.com/2017/01/17/caching-at-reddit/&quot;&gt;https://redditblog.com/2017/01/17/caching-at-reddit/&lt;/a&gt;</source>
          <target state="translated">注意1：我对缓存的个人经验源于Reddit的：&lt;a href=&quot;https://redditblog.com/2017/01/17/caching-at-reddit/&quot;&gt;https&lt;/a&gt; : //redditblog.com/2017/01/17/caching-at-reddit/</target>
        </trans-unit>
        <trans-unit id="756cdea437f3649fc47ddfbdbbd263dcfbb5b77a" translate="yes" xml:space="preserve">
          <source>Note 2: Technical comparison: &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools&quot;&gt;https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools&lt;/a&gt;</source>
          <target state="translated">注意2：技术比较：&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools&quot;&gt;https&lt;/a&gt;：//django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">PostgreSQL</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">快速启动</target>
        </trans-unit>
        <trans-unit id="25650721dddee3b42dff37012768d07f50ba1ca5" translate="yes" xml:space="preserve">
          <source>Recall, cachalot caches THE ENTIRE TABLE. That&amp;rsquo;s where its inefficiency stems from: if you keep updating the records,
then the cachalot constantly invalidates the table and re-caches. Luckily caching is very efficient, it&amp;rsquo;s just the cache
invalidation part that kills all our systems. Look at Note 1 below to see how Reddit deals with it.</source>
          <target state="translated">回想一下，cachalot缓存整个表。这就是效率低下的原因：如果您不断更新记录，则cachalot会不断使表无效并重新缓存。幸运的是，缓存非常高效，只是缓存失效部分杀死了我们所有的系统。请参阅下面的注释1，了解Reddit的处理方式。</target>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">Redis</target>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="translated">运行。</target>
        </trans-unit>
        <trans-unit id="543a8d219ec8d67afbebf6283e2a4b5cbbae082d" translate="yes" xml:space="preserve">
          <source>TL;DR Use cachalot for cold or modified &amp;lt;50 times per seconds (Most people should stick with only cachalot since you
most likely won&amp;rsquo;t need to scale to the point of needing cache-machine added to the bowl). If you&amp;rsquo;re an enterprise that
already has huge statistics, then mixing cold caches for cachalot and your hot caches with cache-machine is the best
mix. However, when performing joins with</source>
          <target state="translated">TL; DR使用cachalot进行冷或修改后的速度&amp;lt;每秒50次（大多数人应该只使用cachalot，因为您很可能不需要扩展到需要在碗中添加高速缓存机器的程度）。如果您是一家已经拥有大量统计数据的企业，那么将cachalot的冷高速缓存与高速缓存与高速缓存机器混合是最好的组合。但是，当执行与</target>
        </trans-unit>
        <trans-unit id="17d0386c5cfffb3e17c9a9b343cc69ac93c02e82" translate="yes" xml:space="preserve">
          <source>TODO Create Docker-compose file to allow for easier running of data.</source>
          <target state="translated">TODO创建Docker-compose文件,以便于数据的运行。</target>
        </trans-unit>
        <trans-unit id="c64e9942fb642977fbd70ec197abeadd198f3103" translate="yes" xml:space="preserve">
          <source>Table of Contents:</source>
          <target state="translated">目录:</target>
        </trans-unit>
        <trans-unit id="ceea83f55d441a1960e5b2fc0c2f43bd88a39b53" translate="yes" xml:space="preserve">
          <source>The output will be in benchmark/TODAY&amp;rsquo;S_DATE/</source>
          <target state="translated">输出将为基准/ TODAY'S_DATE /</target>
        </trans-unit>
        <trans-unit id="1d801d0fbb80734ef34e9f9309fe250647f29990" translate="yes" xml:space="preserve">
          <source>There are three main third party caches: cachalot, cache-machine, and cache-ops. Which do you use? We suggest a mix:</source>
          <target state="translated">第三方缓存主要有三种:cachalot、cache-machine、cache-ops。你用哪个呢?我们建议混合使用。</target>
        </trans-unit>
        <trans-unit id="73fd3706d2dc4d7b5859c6b7441b891b4ef68976" translate="yes" xml:space="preserve">
          <source>Third-Party Cache Comparison</source>
          <target state="translated">第三方缓存对比</target>
        </trans-unit>
        <trans-unit id="ccb7a408f6ca20c07ff91ced04e69f3d8f38331a" translate="yes" xml:space="preserve">
          <source>To start developing, install the requirements
and run the tests via tox.</source>
          <target state="translated">要开始开发,安装需求并通过 tox 运行测试。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="20fb7f1d3f265ddfe7ad5df2c3453657b7c056b3" translate="yes" xml:space="preserve">
          <source>Yes, the bane of our entire existence lies in cache invalidation and naming variables. Why does cachalot suck when
stuck with a huge table that&amp;rsquo;s modified rapidly? Since you&amp;rsquo;ve mixed your cold (90% of) with your hot (10% of) records,
you&amp;rsquo;re caching and invalidating an entire table. It&amp;rsquo;s like trying to boil 1 ton of noodles inside ONE pot instead of
100 pots boiling 1 ton of noodles. Which is more efficient? The splitting up of them.</source>
          <target state="translated">是的，我们整个生存的祸根在于缓存失效和命名变量。为什么cachalot卡在快速修改的巨大表上时会吮吸？由于您已将冷记录（占90％）与热记录（占10％）混合在一起，因此要缓存整个表并使之无效。这就像在一个锅中煮1吨面条，而不是在100锅中煮1吨面条。哪个更有效？他们的分裂。</target>
        </trans-unit>
        <trans-unit id="6ea3270b8c30dcd50377ef385ff14fdb425533d8" translate="yes" xml:space="preserve">
          <source>You can also run specific databases and Django versions:</source>
          <target state="translated">你也可以运行特定的数据库和Django版本。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="fd5a6d76889bb686c8647c12ab94455cdb762044" translate="yes" xml:space="preserve">
          <source>pip install -r requirements/benchmark.txt</source>
          <target state="translated">pip install -r requirements/benchmark.txt。</target>
        </trans-unit>
        <trans-unit id="38b88e629356ebddaf3f36aef4cac9110e0fb712" translate="yes" xml:space="preserve">
          <source>pip install -r requirements/hacking.txt</source>
          <target state="translated">pip install -r requirements/hacking.txt。</target>
        </trans-unit>
        <trans-unit id="61702f8c68d6f213d7ef34a95f98a23b48d860e5" translate="yes" xml:space="preserve">
          <source>pip install django-cachalot</source>
          <target state="translated">pip install django-cachalot</target>
        </trans-unit>
        <trans-unit id="b20a920bcc03779d31544be0ca0fa274a2210075" translate="yes" xml:space="preserve">
          <source>prefetch_related</source>
          <target state="translated">prefetch_related</target>
        </trans-unit>
        <trans-unit id="98adb0c51678462edbfe9707211f9dc7715624a2" translate="yes" xml:space="preserve">
          <source>python benchmark.py</source>
          <target state="translated">python benchmark.py</target>
        </trans-unit>
        <trans-unit id="937405c77449088d9fe9fe51200d361f5b70fe2b" translate="yes" xml:space="preserve">
          <source>select_related</source>
          <target state="translated">选择相关的</target>
        </trans-unit>
        <trans-unit id="7ddfcefcd3558a42ea5c7e4bb8be15cd533ffea7" translate="yes" xml:space="preserve">
          <source>to run the test suite on your current Python version.</source>
          <target state="translated">在您当前的 Python 版本上运行测试套件。</target>
        </trans-unit>
        <trans-unit id="ab91077b25792e5df5bbb22f17e5b0bda9153722" translate="yes" xml:space="preserve">
          <source>to your</source>
          <target state="translated">对你的</target>
        </trans-unit>
        <trans-unit id="c3639cf612287e7ea28cc044ffd0af36964f7396" translate="yes" xml:space="preserve">
          <source>tox --current-env</source>
          <target state="translated">tox --current-env</target>
        </trans-unit>
        <trans-unit id="bec8b381a5f9f5d621b2f4c6e64ca9853711209e" translate="yes" xml:space="preserve">
          <source>tox -epy38-django3.1-postgresql-redis</source>
          <target state="translated">tox -epy38-django3.1-postgresql-redis。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
