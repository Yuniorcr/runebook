<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="https://pypi.org/project/lepl/">
    <body>
      <group id="lepl">
        <trans-unit id="8b59407e91b9c85eb8f4e2a0b521af6ddb48b525" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.acooke.org/lepl/lepl5.0.html&quot;&gt;Release 5&lt;/a&gt; has simpler stream
(input) handling.  Memoisation, line-aware lexing and memory use have also
been revised.  These changes make future extension easier, fix several bugs,
and improve performance.</source>
          <target state="translated">&lt;a href=&quot;http://www.acooke.org/lepl/lepl5.0.html&quot;&gt;版本5&lt;/a&gt;具有更简单的流（输入）处理。记忆，行感知词法和内存使用也已修订。这些更改使将来的扩展更加容易，修复了多个错误并提高了性能。</target>
        </trans-unit>
        <trans-unit id="dcf165b1bcb3bc7266d233ae8c0600620cd5ffcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Friendly syntax&lt;/strong&gt; using Python&amp;rsquo;s operators allows grammars
to be defined in a declarative style close to BNF.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;使用Python运算符的&lt;strong&gt;友好语法&lt;/strong&gt;允许以接近BNF的声明性样式定义语法。</target>
        </trans-unit>
        <trans-unit id="4f561d5b518b9ae830b160401fe1b343aa7f6858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parser rewriting&lt;/strong&gt;.  The parser can itself be manipulated by
Python code.  This gives unlimited opportunities for future
expansion and optimisation.</source>
          <target state="translated">&lt;strong&gt;解析器重写&lt;/strong&gt;。解析器本身可以由Python代码操纵。这为将来的扩展和优化提供了无限的机会。</target>
        </trans-unit>
        <trans-unit id="a2c4bd62c1da5a5c40ec6071f7b022fbb19c9a46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parsers are Python code&lt;/strong&gt;, defined in Python itself.  No separate
grammar is necessary.</source>
          <target state="translated">&lt;strong&gt;解析器是&lt;/strong&gt;在Python本身中定义的&lt;strong&gt;Python代码&lt;/strong&gt;。不需要单独的语法。</target>
        </trans-unit>
        <trans-unit id="70866221745a1418bcde933992974989853c3d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unlimited recursion depth&lt;/strong&gt;.  The underlying algorithm is
recursive descent, which can exhaust the stack for complex grammars
and large data sets.  LEPL avoids this problem by using Python
generators as coroutines (aka &amp;ldquo;trampolining&amp;rdquo;).</source>
          <target state="translated">&lt;strong&gt;无限递归深度&lt;/strong&gt;。底层算法是递归下降，对于复杂的语法和大数据集，它可能会耗尽堆栈。LEPL通过将Python生成器用作协程（又称&amp;ldquo;踩踏&amp;rdquo;）避免了这个问题。</target>
        </trans-unit>
        <trans-unit id="a80415d1bd11d5892d74470e04084671a57b27f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Well documented&lt;/strong&gt; and easy to extend.</source>
          <target state="translated">&lt;strong&gt;有据可查&lt;/strong&gt;，易于扩展。</target>
        </trans-unit>
        <trans-unit id="be91da727724f10f3030b406d10219e18f542889" translate="yes" xml:space="preserve">
          <source>A Parser Library for Python 2.6+/3+: Recursive Descent; Full Backtracking</source>
          <target state="translated">一个Python 2.6+/3+的解析器库。递归下降;完全回溯。</target>
        </trans-unit>
        <trans-unit id="998c9a2df4c33a3d27fc2c07fd63e7d7f0d6824e" translate="yes" xml:space="preserve">
          <source>Built-in &lt;strong&gt;AST support&lt;/strong&gt; with support for iteration, traversal and
re&amp;ndash;writing.</source>
          <target state="translated">内置&lt;strong&gt;AST支持&lt;/strong&gt;，支持迭代，遍历和重写。</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">特点</target>
        </trans-unit>
        <trans-unit id="237fff0d6c895b48b76fc1ec355575e22b0a8e79" translate="yes" xml:space="preserve">
          <source>For example, it is not limited by the Python stack, because it uses
trampolining and co-routines.  Multiple parses can be found for ambiguous
grammars and it can also handle left-recursive grammars.</source>
          <target state="translated">例如,它不受Python堆栈的限制,因为它使用了trampolining和协同程序。可以为模棱两可的语法找到多种解析,它还可以处理左递归语法。</target>
        </trans-unit>
        <trans-unit id="d13272dbf605470d5987c679f283ee03b00763be" translate="yes" xml:space="preserve">
          <source>Generic, pure-Python approach supports parsing a wide variety of data
including &lt;strong&gt;bytes&lt;/strong&gt; (Python 3+ only).</source>
          <target state="translated">通用的纯Python方法支持解析各种数据，包括&lt;strong&gt;字节&lt;/strong&gt;（仅适用于Python 3+）。</target>
        </trans-unit>
        <trans-unit id="459d802d603b95d370570c642b66ae187be7049a" translate="yes" xml:space="preserve">
          <source>Integrated, optional &lt;strong&gt;lexer&lt;/strong&gt; simplifies handling whitespace.</source>
          <target state="translated">集成的可选&lt;strong&gt;词法分析器&lt;/strong&gt;简化了空白处理。</target>
        </trans-unit>
        <trans-unit id="87c5743b91bd75d449b16a0775316c59cb902e5f" translate="yes" xml:space="preserve">
          <source>LEPL is a recursive descent parser, written in Python, which has a a friendly,
easy-to-use syntax.  The underlying implementation includes
several features that make it more powerful than might be expected.</source>
          <target state="translated">LEPL是一个用Python编写的递归世系解析器,它有一个友好的、易于使用的语法。底层的实现包括一些功能,使其比预期的更强大。</target>
        </trans-unit>
        <trans-unit id="b2dbf7f56a1596a6bcdb2143e0781af0c1e8d4ab" translate="yes" xml:space="preserve">
          <source>Memoisation can detect and control &lt;strong&gt;left-recursive grammars&lt;/strong&gt;.  Together
with LEPL&amp;rsquo;s support for ambiguity this means that &amp;ldquo;any&amp;rdquo; grammar can be
supported.</source>
          <target state="translated">记忆可以检测和控制&lt;strong&gt;左递归语法&lt;/strong&gt;。加上LEPL对歧义的支持，这意味着可以支持&amp;ldquo;任何&amp;rdquo;语法。</target>
        </trans-unit>
        <trans-unit id="281b5d7ac1d5c25a7d09c76eb3499a76a5c7ab37" translate="yes" xml:space="preserve">
          <source>Parsers can be made more &lt;strong&gt;efficient&lt;/strong&gt; with automatic memoisation (&amp;ldquo;packrat
parsing&amp;rdquo;).</source>
          <target state="translated">使用自动备忘（&amp;ldquo; packrat解析&amp;rdquo;）可以使解析器更加&lt;strong&gt;高效&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="53327c1a25884cb1a1ab37d7f8fb1c782c7e6790" translate="yes" xml:space="preserve">
          <source>Support for ambiguous grammars (&lt;strong&gt;complete backtracking&lt;/strong&gt;).  A
parser can return more than one result (aka &lt;strong&gt;&amp;ldquo;parse forests&amp;rdquo;&lt;/strong&gt;).</source>
          <target state="translated">支持歧义语法（&lt;strong&gt;完整回溯&lt;/strong&gt;）。解析器可以返回多个结果（又称&lt;strong&gt;&amp;ldquo;解析森林&amp;rdquo;&lt;/strong&gt;）。</target>
        </trans-unit>
        <trans-unit id="b2ec67336431bf0605e40b3af09d6159014d9539" translate="yes" xml:space="preserve">
          <source>THIS PROJECT IS NO LONGER DEVELOPED.  PLEASE SEE THE
&lt;a href=&quot;http://www.acooke.org/lepl&quot;&gt;SITE&lt;/a&gt; FOR MORE INFORMATION.</source>
          <target state="translated">此项目不再开发。请访问该 &lt;a href=&quot;http://www.acooke.org/lepl&quot;&gt;网站以&lt;/a&gt;获取更多信息。</target>
        </trans-unit>
        <trans-unit id="297d78ea5281169c97f03d729e46f1b5909094b5" translate="yes" xml:space="preserve">
          <source>The aim is a powerful, extensible parser that will also give solid, reliable
results to first-time users.</source>
          <target state="translated">目标是一个强大的、可扩展的解析器,同时也会给第一次使用的用户提供可靠的结果。</target>
        </trans-unit>
        <trans-unit id="053e63df8ec1d4bc209f44100344c3bced429ec2" translate="yes" xml:space="preserve">
          <source>Trace and resource management, including &lt;strong&gt;&amp;ldquo;deepest match&amp;rdquo; diagnostics&lt;/strong&gt;
and the ability to limit backtracking.</source>
          <target state="translated">跟踪和资源管理，包括&lt;strong&gt;&amp;ldquo;最深匹配&amp;rdquo;诊断&lt;/strong&gt; 和限制回溯的能力。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
