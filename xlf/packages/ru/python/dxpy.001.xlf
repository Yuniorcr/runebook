<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/dxpy/">
    <body>
      <group id="dxpy">
        <trans-unit id="b0596762c145e066c6b51d6b767aa76380933b34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dxpy.compat&lt;/code&gt; has some simple shims that mirror Python 3 builtins and redirect them to Python 2.7 equivalents when on 2.7. Most critically, &lt;code&gt;from dxpy.compat import str&lt;/code&gt; will import the &lt;code&gt;unicode&lt;/code&gt; builtin on 2.7 and the &lt;code&gt;str&lt;/code&gt; builtin on python 3. Use &lt;code&gt;str&lt;/code&gt; wherever you would have used &lt;code&gt;unicode&lt;/code&gt;. To convert unicode strings to bytes, use &lt;code&gt;.encode('utf-8')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dxpy.compat&lt;/code&gt; имеет несколько простых прокладок, которые отражают встроенные функции Python 3 и перенаправляют их на эквиваленты Python 2.7 при использовании 2.7. Наиболее важно то, что &lt;code&gt;from dxpy.compat import str&lt;/code&gt; будет импортировать встроенный &lt;code&gt;unicode&lt;/code&gt; в 2.7 и &lt;code&gt;str&lt;/code&gt; встроенный в python 3. Используйте &lt;code&gt;str&lt;/code&gt; везде, где вы бы использовали &lt;code&gt;unicode&lt;/code&gt; . Чтобы преобразовать строки Unicode в байты, используйте &lt;code&gt;.encode('utf-8')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="674463a63b833f2ee17f1bbb198b28a2cbb90be6" translate="yes" xml:space="preserve">
          <source>API Documentation</source>
          <target state="translated">Документация по API</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">Здание</target>
        </trans-unit>
        <trans-unit id="b6114911729017efbd5b9af9dce07a4c23db36c9" translate="yes" xml:space="preserve">
          <source>Code going into the Python codebase should be written in Python 3.5 style, and should be compatible with Python 2.7.  Python 2.7 support will end on March 1, 2021.</source>
          <target state="translated">Код,входящий в кодовую базу Python,должен быть написан в стиле Python 3.5 и должен быть совместим с Python 2.7.Поддержка Python 2.7 закончится 1 марта 2021 года.</target>
        </trans-unit>
        <trans-unit id="ca133fd5c5e719911f84f8857fafa733baf2d362" translate="yes" xml:space="preserve">
          <source>Conform to &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8&lt;/a&gt;.</source>
          <target state="translated">Соответствует &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b48db00dda4f9932d6db2c22f755daa52ca0f246" translate="yes" xml:space="preserve">
          <source>Convention for Python scripts that are also modules</source>
          <target state="translated">Конвенция для скриптов Python,которые также являются модулями</target>
        </trans-unit>
        <trans-unit id="ec1fb0e8927ceeec4b0942eccd8a0408b783ccb8" translate="yes" xml:space="preserve">
          <source>DNAnexus Platform API bindings for Python</source>
          <target state="translated">API-связи платформы DNAnexus для Python</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Отладка</target>
        </trans-unit>
        <trans-unit id="cd8da1618ca623fabd2ab45706d2e10471d5cf77" translate="yes" xml:space="preserve">
          <source>Do not add module-level attributes into the API unless you are absolutely certain they will remain constants. For
example, do not declare an attribute &lt;code&gt;dxpy.foo&lt;/code&gt; (&lt;code&gt;dxpy._foo&lt;/code&gt; is OK), or any other non-private variable in the
global scope of any module. This is because unless the value is a constant, it may need to be updated by an
initialization method, which may need to run lazily to avoid side effects at module load time. Instead, use
accessor methods that can perform the updates at call time:</source>
          <target state="translated">Не добавляйте атрибуты уровня модуля в API, если вы не уверены, что они останутся постоянными. Например, не объявляйте атрибут &lt;code&gt;dxpy.foo&lt;/code&gt; ( &lt;code&gt;dxpy._foo&lt;/code&gt; в порядке) или любую другую переменную , не являющуюся частной, в глобальной области любого модуля. Это связано с тем, что, если значение не является константой, его может потребоваться обновить с помощью метода инициализации, который может потребоваться лениво, чтобы избежать побочных эффектов во время загрузки модуля. Вместо этого используйте методы доступа, которые могут выполнять обновления во время вызова:</target>
        </trans-unit>
        <trans-unit id="48bad454c6ffe47f4ecda7d71d7322e78baada18" translate="yes" xml:space="preserve">
          <source>Do not introduce module import-time side effects.</source>
          <target state="translated">Не вводите побочные эффекты при импорте модулей.</target>
        </trans-unit>
        <trans-unit id="8a47ccc86c9ce396d0477a87c93be5004af8c01a" translate="yes" xml:space="preserve">
          <source>Document your code in a format usable by &lt;a href=&quot;http://sphinx-doc.org/ext/autodoc.html&quot;&gt;Sphinx Autodoc&lt;/a&gt;.</source>
          <target state="translated">Документируйте свой код в формате, пригодном для &lt;a href=&quot;http://sphinx-doc.org/ext/autodoc.html&quot;&gt;Sphinx Autodoc&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Пример:</target>
        </trans-unit>
        <trans-unit id="9574bdf222d001a672bb0cb713075c8aa7e9abe4" translate="yes" xml:space="preserve">
          <source>From the dx-toolkit root directory:</source>
          <target state="translated">Из корневого каталога dx-toolkit:</target>
        </trans-unit>
        <trans-unit id="df6dc1c127d48e12ba33f963b4a97a4123c19c67" translate="yes" xml:space="preserve">
          <source>Google Python style guide</source>
          <target state="translated">руководство по стилю Google Python</target>
        </trans-unit>
        <trans-unit id="676aae763b35679dafb83babeb3b0af1ee3d90cf" translate="yes" xml:space="preserve">
          <source>Include in the script a top-level function called &lt;code&gt;main()&lt;/code&gt;, which should be the entry point processor, and
conclude the script with the following stanza:</source>
          <target state="translated">Включите в сценарий функцию верхнего уровня с именем &lt;code&gt;main()&lt;/code&gt; , которая должна быть процессором точки входа, и завершите сценарий следующей строфой:</target>
        </trans-unit>
        <trans-unit id="9bbb422884602fb824c52d35b9991df366deb185" translate="yes" xml:space="preserve">
          <source>Install the script into &lt;code&gt;src/python/dxpy/scripts&lt;/code&gt; with a name like &lt;code&gt;dx_useful_script.py&lt;/code&gt;. This will allow
importing with &lt;code&gt;import dxpy.scripts.dx_useful_script&lt;/code&gt;.</source>
          <target state="translated">Установите скрипт в &lt;code&gt;src/python/dxpy/scripts&lt;/code&gt; с именем вроде &lt;code&gt;dx_useful_script.py&lt;/code&gt; . Это позволит импортировать с помощью &lt;code&gt;import dxpy.scripts.dx_useful_script&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6847eb5db3cd65637963e6462ef62d5860408a52" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;&amp;lt;iterator&amp;gt;.next()&lt;/code&gt;, use &lt;code&gt;next(&amp;lt;iterator&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">Вместо &lt;code&gt;&amp;lt;iterator&amp;gt;.next()&lt;/code&gt; используйте &lt;code&gt;next(&amp;lt;iterator&amp;gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d87395bd24dfae71341bb161aec261e609af2716" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;.iteritems()&lt;/code&gt;, use &lt;code&gt;.items()&lt;/code&gt;. If this is a performance concern on 2.7, introduce a shim in compat.py.</source>
          <target state="translated">Вместо &lt;code&gt;.iteritems()&lt;/code&gt; используйте &lt;code&gt;.items()&lt;/code&gt; . Если это проблема производительности 2.7, добавьте прокладку в compat.py.</target>
        </trans-unit>
        <trans-unit id="d950a426d096d142582ebde191536d4f546f0d1e" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;StringIO.StringIO&lt;/code&gt;, use &lt;code&gt;from dxpy.compat import BytesIO&lt;/code&gt; (which is StringIO on 2.7).</source>
          <target state="translated">Вместо &lt;code&gt;StringIO.StringIO&lt;/code&gt; используйте &lt;code&gt;from dxpy.compat import BytesIO&lt;/code&gt; (это StringIO в 2.7).</target>
        </trans-unit>
        <trans-unit id="63058301542c8898593ba52b2666bebe53887e8d" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;raw_input&lt;/code&gt;, use &lt;code&gt;from dxpy.compat import input&lt;/code&gt;.</source>
          <target state="translated">Вместо &lt;code&gt;raw_input&lt;/code&gt; используйте &lt;code&gt;from dxpy.compat import input&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9767db1af382aebf46c922fd27a62bd8e9cd4af8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;sort(x, cmp=lambda x, y: ...)&lt;/code&gt;, use &lt;code&gt;x=sorted(x, key=lambda x: ...)&lt;/code&gt;.</source>
          <target state="translated">Вместо &lt;code&gt;sort(x, cmp=lambda x, y: ...)&lt;/code&gt; используйте &lt;code&gt;x=sorted(x, key=lambda x: ...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6fd14051b354da983ecb8ff41200315d2637cb8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;x.has_key(y)&lt;/code&gt;, use &lt;code&gt;y in x&lt;/code&gt;.</source>
          <target state="translated">Вместо &lt;code&gt;x.has_key(y)&lt;/code&gt; используйте &lt;code&gt;y in x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4da9a8dd0a964c7b4b5b9579db1799552bca9008" translate="yes" xml:space="preserve">
          <source>Note: the install script will replace underscores in the name of your module with dashes in the name of the launcher
script.</source>
          <target state="translated">Замечание:скрипт установки заменит символы подчеркивания в названии вашего модуля тире в названии скрипта запуска.</target>
        </trans-unit>
        <trans-unit id="bfead3e178179210460f8bdeacc582f0d7e87b2c" translate="yes" xml:space="preserve">
          <source>Other useful resources:</source>
          <target state="translated">Другие полезные ресурсы:</target>
        </trans-unit>
        <trans-unit id="3f9c4cc3416e160b70e278e7d65e895425e00b6c" translate="yes" xml:space="preserve">
          <source>Python coding style</source>
          <target state="translated">стиль кодирования питона</target>
        </trans-unit>
        <trans-unit id="a4a85c998ce2cd9c480982b861989d3ec8a40877" translate="yes" xml:space="preserve">
          <source>Python version compatibility</source>
          <target state="translated">версия совместимости с Python</target>
        </trans-unit>
        <trans-unit id="cb308f901972e30a32b76dd5739b0133d3919e62" translate="yes" xml:space="preserve">
          <source>Relax other PEP-8 requirements at your discretion if it simplifies code or is needed to follow conventions
established elsewhere at DNAnexus.</source>
          <target state="translated">Расслабьтесь по своему усмотрению на другие требования PEP-8,если он упрощает код или необходим для выполнения конвенций,установленных в других местах DNAnexus.</target>
        </trans-unit>
        <trans-unit id="50f12db3431b57bc4f594a7b08e6b221d7b2c023" translate="yes" xml:space="preserve">
          <source>Relax the line length requirement to 120 characters per line, where you judge readability not to be compromised.</source>
          <target state="translated">Уменьшите требование к длине строки до 120 символов на строку,если вы считаете,что читаемость не будет нарушена.</target>
        </trans-unit>
        <trans-unit id="61d2d0023852329564fec4660e5224aaefa2cb92" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;pylint -E&lt;/code&gt; on your code before checking it in.</source>
          <target state="translated">Запустите &lt;code&gt;pylint -E&lt;/code&gt; в своем коде, прежде чем регистрировать его.</target>
        </trans-unit>
        <trans-unit id="b5fa648e852202d309e677a3f706c74539cac098" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;_DX_DEBUG&lt;/code&gt; environment variable to a positive integer before
running a dxpy-based program (such as &lt;code&gt;dx&lt;/code&gt;) to display the input and
output of each API call. Supported values are 1, 2, and 3 with
increasing numbers producing successively more verbose output.</source>
          <target state="translated">Задайте для переменной среды &lt;code&gt;_DX_DEBUG&lt;/code&gt; положительное целое число перед запуском программы на основе dxpy (например, &lt;code&gt;dx&lt;/code&gt; ) для отображения ввода и вывода каждого вызова API. Поддерживаемые значения - 1, 2 и 3, при этом увеличивающиеся числа производят более подробный вывод.</target>
        </trans-unit>
        <trans-unit id="cf1a3d86a66060256044dfc0553a7c95fe6f6ce1" translate="yes" xml:space="preserve">
          <source>Some scripts, such as format converters, are useful both as standalone executables and as importable modules.</source>
          <target state="translated">Некоторые скрипты,такие как преобразователи форматов,полезны как в качестве самостоятельных исполняемых файлов,так и в качестве импортируемых модулей.</target>
        </trans-unit>
        <trans-unit id="85268049c2c2bd779bf476064b4b122d429d0005" translate="yes" xml:space="preserve">
          <source>The Hitchhiker's Guide to Python</source>
          <target state="translated">Путеводитель автостопщика по Питону...</target>
        </trans-unit>
        <trans-unit id="c8dad01ae3da8eb6b8cba8a0c7cdaea7d5491bcc" translate="yes" xml:space="preserve">
          <source>The dxpy installation process (invoked through &lt;code&gt;setup.py&lt;/code&gt; or with &lt;code&gt;make -C src python&lt;/code&gt; at the top level)
will find the script and install a launcher for it into the executable path automatically. This is done using the
&lt;code&gt;entry_points&lt;/code&gt; facility of setuptools/distribute.</source>
          <target state="translated">Процесс установки dxpy (вызываемый через &lt;code&gt;setup.py&lt;/code&gt; или &lt;code&gt;make -C src python&lt;/code&gt; на верхнем уровне) найдет сценарий и автоматически установит для него программу запуска в путь к исполняемому файлу. Это делается с помощью средства &lt;code&gt;entry_points&lt;/code&gt; в setuptools / distribute.</target>
        </trans-unit>
        <trans-unit id="8c7b6149c9a44f75ed34f4d873e4b308b7564f19" translate="yes" xml:space="preserve">
          <source>The next most troublesome gotcha after the bytes/unicode conversions is that many iterables operators return generators in Python 3. For example, &lt;code&gt;map()&lt;/code&gt; returns a generator. This breaks places that expect a list, and requires either explicit casting with &lt;code&gt;list()&lt;/code&gt;, or the use of list comprehensions (usually preferred).</source>
          <target state="translated">Следующая наиболее неприятная проблема после преобразований байтов в юникод заключается в том, что многие операторы итераций возвращают генераторы в Python 3. Например, &lt;code&gt;map()&lt;/code&gt; возвращает генератор. Это нарушает места, которые ожидают список, и требует либо явного приведения с помощью &lt;code&gt;list()&lt;/code&gt; , либо использования понимания списка (обычно предпочтительно).</target>
        </trans-unit>
        <trans-unit id="c084f14040f09a58bb728f0ddff6fb5a4cb9a240" translate="yes" xml:space="preserve">
          <source>To facilitate Python 2 compatibility, we have the compat module in &lt;a href=&quot;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&quot;&gt;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&lt;/a&gt;. Also, the following boilerplate should be
inserted into all Python source files:</source>
          <target state="translated">Чтобы облегчить совместимость с Python 2, у нас есть модуль compat в &lt;a href=&quot;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&quot;&gt;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&lt;/a&gt; . Кроме того, во все исходные файлы Python следует вставить следующий шаблон:</target>
        </trans-unit>
        <trans-unit id="8e99b2bf51505aca7fa345b17356e08b0244cbf9" translate="yes" xml:space="preserve">
          <source>Typically, when called on the command line, &lt;em&gt;main()&lt;/em&gt; will first parse the command line arguments (sys.argv). However,
when imported as a module, the arguments need to instead be passed as inputs to a function. The following is a
suggestion for how to accommodate both styles simultaneously with just one entry point (&lt;code&gt;main&lt;/code&gt;):</source>
          <target state="translated">Обычно при вызове из командной строки &lt;em&gt;main ()&lt;/em&gt; сначала анализирует аргументы командной строки (sys.argv). Однако при импорте в виде модуля аргументы необходимо вместо этого передавать как входные данные функции. Ниже приводится предложение о том, как совместить оба стиля одновременно только с одной точкой входа ( &lt;code&gt;main&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="f8834549fa3b512635a4cdefe9a5f0cd97e47e4b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;from __future__ import print_function&lt;/code&gt; and use print as a function. Instead of &lt;code&gt;print &amp;gt;&amp;gt;sys.stderr&lt;/code&gt;, write &lt;code&gt;print(..., file=sys.stderr)&lt;/code&gt;.</source>
          <target state="translated">Используйте &lt;code&gt;from __future__ import print_function&lt;/code&gt; и используйте print как функцию. Вместо &lt;code&gt;print &amp;gt;&amp;gt;sys.stderr&lt;/code&gt; напишите &lt;code&gt;print(..., file=sys.stderr)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="adea88259ff3223db98b0ce99c873651a8268bc9" translate="yes" xml:space="preserve">
          <source>We have the following convention for these scripts:</source>
          <target state="translated">У нас есть следующая конвенция для этих сценариев:</target>
        </trans-unit>
        <trans-unit id="83da9c16c6603cb8d4311298056ffabe5920de38" translate="yes" xml:space="preserve">
          <source>dxpy is supported on Python 2 (2.7+) and Python 3 (3.5+)</source>
          <target state="translated">dxpy поддерживается на Python 2 (2.7+)и Python 3 (3.5+).</target>
        </trans-unit>
        <trans-unit id="086e971b7ec428ac6a5dad1a0b475da4d8fe6c69" translate="yes" xml:space="preserve">
          <source>dxpy: DNAnexus Python API</source>
          <target state="translated">..:DNAnexus Python API</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
