<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/cl4py/">
    <body>
      <group id="cl4py">
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="dfc68394d92d28ed14e74422c938a34492324fd4" translate="yes" xml:space="preserve">
          <source>.  This
means, that the Lisp process will ignore any user initialization files,
including the Quicklisp setup.  However, we provide an extra option for
installing and loading Quicklisp automatically:</source>
          <target state="translated">. Это означает, что процесс Lisp будет игнорировать любые файлы инициализации пользователя, включая установку Quicklisp. Однако мы предоставляем дополнительную возможность для автоматической установки и загрузки Quicklisp:</target>
        </trans-unit>
        <trans-unit id="4911a208b464e3c88a14296c202fff997a17499d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.hylang.org/en/stable/&quot;&gt;Hy&lt;/a&gt;
- Python, but with Lisp syntax. This project is certainly a great way to
get started with Lisp. It allows you to study the advantages of Lisp&amp;rsquo;s
seemingly weird syntax, without leaving the comfortable Python
ecosystem. Once you understand the advantages of Lisp, you will doubly
appreciate cl4py for your projects.</source>
          <target state="translated">&lt;a href=&quot;http://docs.hylang.org/en/stable/&quot;&gt;Hy&lt;/a&gt; - Python, но с синтаксисом Lisp. Этот проект, безусловно, отличный способ начать работу с Lisp. Это позволяет вам изучить преимущества, казалось бы, странного синтаксиса Lisp, не покидая удобной экосистемы Python. Как только вы поймете преимущества Lisp, вы вдвойне оцените cl4py для своих проектов.</target>
        </trans-unit>
        <trans-unit id="1d1057ed26fcf9d9d5910c3b2d1101ee4ec6fc0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/bendudson/py4cl&quot;&gt;py4cl&lt;/a&gt;
- A library that allows Common Lisp code to access Python libraries.  It
is basically the inverse of cl4py.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/bendudson/py4cl&quot;&gt;py4cl&lt;/a&gt; - библиотека, которая позволяет коду Common Lisp обращаться к библиотекам Python. По сути, это противоположность cl4py.</target>
        </trans-unit>
        <trans-unit id="8b891ac4c97379c150d0ecd3d198ae5a95776353" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/metawilm/cl-python&quot;&gt;cl-python&lt;/a&gt;
- A much heavier solution than cl4py &amp;mdash; let&amp;rsquo;s simply implement Python
in Lisp! An amazing project. However, cl-python cannot access foreign
libraries, e.g., NumPy. And people are probably hesitant to migrate away
from CPython.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/metawilm/cl-python&quot;&gt;cl-python&lt;/a&gt; - гораздо более тяжелое решение, чем cl4py - давайте просто реализуем Python на Lisp! Замечательный проект. Однако cl-python не может получить доступ к сторонним библиотекам, например, NumPy. И люди, вероятно, не решаются уйти с CPython.</target>
        </trans-unit>
        <trans-unit id="a6cac227b0e0cfeba9b90f7681aca51b3fa2ed22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pinterface/burgled-batteries&quot;&gt;burgled-batteries&lt;/a&gt;
- A bridge between Python and Lisp. The goal is that Lisp programs can
use Python libraries, which is in some sense the opposite of
cl4py. Furthermore it relies on the less portable mechanism of FFI
calls.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pinterface/burgled-batteries&quot;&gt;burgled-battery&lt;/a&gt; - мост между Python и Lisp. Цель состоит в том, чтобы программы на Лиспе могли использовать библиотеки Python, что в некотором смысле противоположно cl4py. Кроме того, он полагается на менее переносимый механизм вызовов FFI.</target>
        </trans-unit>
        <trans-unit id="50d835c00486b111eca88683714097e58a1abbfb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.nicklevine.org/claude/&quot;&gt;CLAUDE&lt;/a&gt;
- An earlier attempt to access Lisp libraries from Python. The key
difference is that cl4py does not run Lisp directly in the host
process. This makes cl4py more portable, but complicates the exchange of
data.</source>
          <target state="translated">&lt;a href=&quot;https://www.nicklevine.org/claude/&quot;&gt;CLAUDE&lt;/a&gt; - более ранняя попытка доступа к библиотекам Lisp из Python. Ключевое отличие состоит в том, что cl4py не запускает Lisp непосредственно в хост-процессе. Это делает cl4py более портативным, но усложняет обмен данными.</target>
        </trans-unit>
        <trans-unit id="4bbc2bad866e068f7a83235c65224f8f43ca8e4f" translate="yes" xml:space="preserve">
          <source>By default, cl4py starts a Lisp subprocess with</source>
          <target state="translated">По умолчанию,cl4py запускает подпроцесс Lisp с помощью</target>
        </trans-unit>
        <trans-unit id="b820f44f707e2d2bfda8a73e7deeb8deb276083f" translate="yes" xml:space="preserve">
          <source>Common Lisp for Python</source>
          <target state="translated">Обыкновенная липа для Питона</target>
        </trans-unit>
        <trans-unit id="148b514079c970f00202742b91f589dab000adac" translate="yes" xml:space="preserve">
          <source>Frequently Asked Problems</source>
          <target state="translated">Часто задаваемые вопросы</target>
        </trans-unit>
        <trans-unit id="fce92a58d4a009a80c62759514bdc0f104880ceb" translate="yes" xml:space="preserve">
          <source>It soon becomes clumsy to look up individual Lisp functions by name.
Instead, it is usually better to convert entire Lisp packages to Python
modules, like this:</source>
          <target state="translated">Вскоре становится неудобно искать отдельные функции Лисп по имени.Вместо этого,обычно лучше конвертировать целые пакеты Lisp в модули на Python,как это делается:</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">Мотивация</target>
        </trans-unit>
        <trans-unit id="7fac72fa371151361d1c539c6461c22eccaa90fe" translate="yes" xml:space="preserve">
          <source>Of course, this requires you have some Lisp installed. If not, use
something like</source>
          <target state="translated">Конечно,для этого нужно,чтобы у вас был установлен какой-нибудь Лисп.Если нет,используйте что-то вроде</target>
        </trans-unit>
        <trans-unit id="15fcd561f77dbd0c514f2391d3c7596df9294341" translate="yes" xml:space="preserve">
          <source>Package QL does not exist</source>
          <target state="translated">Пакет QL не существует</target>
        </trans-unit>
        <trans-unit id="5080ebd78aaa8f3e4acd6d4cd153e6b28156a27a" translate="yes" xml:space="preserve">
          <source>Related Projects</source>
          <target state="translated">Связанные проекты</target>
        </trans-unit>
        <trans-unit id="c2496758451190079c5ff46ed234f6bf876783e3" translate="yes" xml:space="preserve">
          <source>Some Lisp data structures have no direct equivalent in Python, most
notably, cons cells.  The cl4py module provides a suitable Cons class and
converts List conses to instances of cl4py.Cons.</source>
          <target state="translated">Некоторые структуры данных по Лиспу не имеют прямого эквивалента на питоне,в частности,клетки &quot;против&quot;.Модуль cl4py предоставляет подходящий класс Cons и конвертирует List conses в экземпляры cl4py.Cons.</target>
        </trans-unit>
        <trans-unit id="40102a7557c7125cb544b98b57257f65d209dd20" translate="yes" xml:space="preserve">
          <source>The library cl4py (pronounce as &lt;em&gt;clappy&lt;/em&gt;) allows Python programs to call
Common Lisp libraries.  Its official mascot is the cl4py-bird:</source>
          <target state="translated">Библиотека cl4py (произносится как &lt;em&gt;clappy&lt;/em&gt; ) позволяет программам Python вызывать библиотеки Common Lisp. Официальный талисман - птица cl4py:</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Учебное пособие</target>
        </trans-unit>
        <trans-unit id="d1fd463e2211f716e42a7d42d60ef7a504f5676a" translate="yes" xml:space="preserve">
          <source>Why does my Lisp subprocess complain about</source>
          <target state="translated">Почему мой подпроцесс Лисп жалуется на то.</target>
        </trans-unit>
        <trans-unit id="e2a9f255c2065c6cb3cc36379ae5c9bb470b0b5b" translate="yes" xml:space="preserve">
          <source>You are a Python programmer, but you want access to some of the powerful
features of Lisp, for example to compile code at run time?  Or you want to
use some &lt;a href=&quot;http://codys.club/awesome-cl/&quot;&gt;awesome Lisp libraries&lt;/a&gt;?  Or
you are a Lisp programmer and want to show your work to your Python
friends.  In all these cases, cl4py is here to help you.</source>
          <target state="translated">Вы программист на Python, но хотите получить доступ к некоторым мощным функциям Lisp, например, для компиляции кода во время выполнения? Или вы хотите использовать &lt;a href=&quot;http://codys.club/awesome-cl/&quot;&gt;классные библиотеки Lisp&lt;/a&gt; ? Или вы программист на Лиспе и хотите показать свою работу своим Python-друзьям. Во всех этих случаях вам поможет cl4py.</target>
        </trans-unit>
        <trans-unit id="a1829fa02283e0a82ccbadc9abe55eff92b9688f" translate="yes" xml:space="preserve">
          <source>You can start any number of Lisp subprocesses within Python, like this:</source>
          <target state="translated">Вы можете запустить любое количество подпроцессов Lisp внутри Python,например,вот так:</target>
        </trans-unit>
        <trans-unit id="2ca175d569e3bddb9bd42186937f3d9a19474282" translate="yes" xml:space="preserve">
          <source>apt install sbcl</source>
          <target state="translated">удачно установить кого-лcl</target>
        </trans-unit>
        <trans-unit id="a0d6591fa77e0813e270cc0b321c6f1da9640f76" translate="yes" xml:space="preserve">
          <source>brew install
sbcl</source>
          <target state="translated">заваривать кому-лcl</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">или</target>
        </trans-unit>
        <trans-unit id="84122cdb9e98b2fdddcd6d887b4d74a136bd5068" translate="yes" xml:space="preserve">
          <source>pacman -S sbcl</source>
          <target state="translated">пакман -S sbcl</target>
        </trans-unit>
        <trans-unit id="8f2ed9f246f7ff0643d359045e9252655a4fb598" translate="yes" xml:space="preserve">
          <source>quicklisp=True</source>
          <target state="translated">quicklisp=Истина</target>
        </trans-unit>
        <trans-unit id="e5afdbd708aea1d57f803c59648c0871a0966485" translate="yes" xml:space="preserve">
          <source>sbcl --script</source>
          <target state="translated">кого-лcl --script</target>
        </trans-unit>
        <trans-unit id="b519792eff2865136af2e654208db187c51b185b" translate="yes" xml:space="preserve">
          <source>to correct this deficiency.  Once you have a running Lisp process,
you can execute Lisp code on it:</source>
          <target state="translated">чтобы исправить этот недостаток.После того,как вы запустили процесс на Lisp,вы можете выполнить на нем код Lisp:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
