<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/multilevel-mesa/">
    <body>
      <group id="multilevel-mesa">
        <trans-unit id="c9a3ef5798f6fbb18f2688c2f8e055ace57d20e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Figure 1&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;фигура 1&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3266723dce3df48a82cff590c881e33eeced350f" translate="yes" xml:space="preserve">
          <source>As Multi-level Mesa replaces the normal schedule function of Mesa, it must also have the basic scheduling functions. These are the add and remove functions, which remain at the individual agent level but have a higher degree of complexity as agents must be kept in multiple managers to ensure agents are being properly 'stepped' in the schedule or removed if the agent 'dies'. Multi-level Mesa also replaces Mesa's step function. Its primary schedule is random activation, but this can be turned off for an ordered activation and a staged activation can be executed through the agent_type manager. A future extension of MultiLevel_Mesa would be to store different schedules based on different network configurations. This would save computation time so specific agent schedules would be created less often. For example, if one was recreating daily life of a population and the night and morning hours used one configuration, while the daytime hours would use a different configuration, each calling different behavior routines for the agents.</source>
          <target state="translated">Поскольку многоуровневая Меза заменяет обычную функцию составления расписания Меза,она также должна иметь базовые функции составления расписания.Это функции добавления и удаления,которые остаются на уровне отдельных агентов,но имеют более высокую степень сложности,поскольку агенты должны храниться в нескольких менеджерах,чтобы убедиться,что агенты правильно &quot;перешагнули&quot; в расписании или удалены,если агент &quot;умрет&quot;.Многоуровневая Меза также заменяет функцию шага Меза.Ее основным расписанием является случайная активация,но ее можно отключить для упорядоченной активации,а ступенчатую активацию можно выполнить через менеджер agent_type.Будущее расширение MultiLevel_Mesa будет заключаться в хранении различных расписаний,основанных на различных конфигурациях сети.Это позволит сэкономить время вычислений,поэтому специфические расписания агентов будут создаваться реже.Например,если бы воссоздавалась повседневная жизнь населения,а ночные и утренние часы использовали бы одну конфигурацию,в то время как дневные часы использовали бы разные конфигурации,каждая из которых вызывала бы разные подпрограммы поведения для агентов.</target>
        </trans-unit>
        <trans-unit id="435c5fe50be2432abc7056a8f0280112c7eab7a6" translate="yes" xml:space="preserve">
          <source>As shown in figure 1, Multi-level Mesa has two primary approaches for facilitating a multi-level ABM, an explicit approach and a network approach. Within these two approaches, Multi-level Mesa turns the desired agents into a bilateral link list which form the groups. Each input of agents is transformed into a network edge which forms the groups or adds agents to an existing group. The use of links is also used to disband groups or remove agents from the group. These functions then create a more dynamic schedule with modules of agent within hierarchies.</source>
          <target state="translated">Как показано на рисунке 1,многоуровневая система Mesa имеет два основных подхода к созданию многоуровневой ПРО,явный подход и сетевой подход.В рамках этих двух подходов,Многоуровневая Меса (Multi-level Mesa)превращает желаемых агентов в двусторонний список связей,которые формируют группы.Каждый вклад агентов трансформируется в сетевой край,который формирует группы или добавляет агентов в существующую группу.Использование связей также используется для расформирования групп или удаления агентов из группы.Эти функции затем создают более динамическое расписание с модулями агентов в иерархиях.</target>
        </trans-unit>
        <trans-unit id="c43b278aa5d16fe58da0b687c4717aa69e488770" translate="yes" xml:space="preserve">
          <source>Attribute:</source>
          <target state="translated">Атрибут:</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">Атрибуты:</target>
        </trans-unit>
        <trans-unit id="47794dc9c0ee0cf4bdc68fe1ca73422a643bf6dd" translate="yes" xml:space="preserve">
          <source>Creating an Multi-level Mesa Instance and the Multi-level Mesa Managers</source>
          <target state="translated">Создание многоуровневой меза-констанции и многоуровневых меза-менеджеров</target>
        </trans-unit>
        <trans-unit id="035b08f4549a3d2315c654e9b218fcedcabb2cd5" translate="yes" xml:space="preserve">
          <source>Creating an instance of Multi-level Mesa requires no parameters, and initiates one attribute and six managers.</source>
          <target state="translated">Создание экземпляра Multi-level Mesa не требует параметров,инициирует один атрибут и шесть менеджеров.</target>
        </trans-unit>
        <trans-unit id="21d5889502bfd325a4000763fbf071309d470790" translate="yes" xml:space="preserve">
          <source>Example Instance and Use</source>
          <target state="translated">Пример приведения в действие и использования</target>
        </trans-unit>
        <trans-unit id="7c8d8b87efb5b6548c0f1eecae857eb585305992" translate="yes" xml:space="preserve">
          <source>Examples of Multi-Level Mesa</source>
          <target state="translated">Примеры многоуровневых меза</target>
        </trans-unit>
        <trans-unit id="eb5f3aaed755a6adbc164e2ec1136429ba6818f5" translate="yes" xml:space="preserve">
          <source>Examples of multilevel_mesa are available at [Sugarscape Models]:&lt;a href=&quot;https://github.com/tpike3/SugarScape&quot;&gt;https://github.com/tpike3/SugarScape&lt;/a&gt;</source>
          <target state="translated">Примеры multilevel_mesa доступны на [Модели Sugarscape]: &lt;a href=&quot;https://github.com/tpike3/SugarScape&quot;&gt;https://github.com/tpike3/SugarScape&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="566fecd1ecc51ba47d2e6d3b8ea1b31b4356c09c" translate="yes" xml:space="preserve">
          <source>Forming and Dissolving Meta-Agents</source>
          <target state="translated">Формирование и растворение метаагентов</target>
        </trans-unit>
        <trans-unit id="dc243838c0b1944f7a3a1538281e4a0b41f5c92c" translate="yes" xml:space="preserve">
          <source>Group.active = status of Group</source>
          <target state="translated">Группа.активен=статус группы</target>
        </trans-unit>
        <trans-unit id="6a9c44634869fc5cf1a1860aa102d7a176dd6ebd" translate="yes" xml:space="preserve">
          <source>Group.agents_by_type = dictionary</source>
          <target state="translated">Group.agents_by_type=словарь.</target>
        </trans-unit>
        <trans-unit id="842bfc15872021302f23c6c934ed6ac6cb340750" translate="yes" xml:space="preserve">
          <source>Group.meta_step() = policies to dictate sub_agent behavior</source>
          <target state="translated">Group.meta_step()=политики,диктующие поведение суб_агента.</target>
        </trans-unit>
        <trans-unit id="a146c717a542871b8c5e5d388ca77dc90f6899e8" translate="yes" xml:space="preserve">
          <source>Group.net = NetworkX graph</source>
          <target state="translated">Group.net=График NetworkX</target>
        </trans-unit>
        <trans-unit id="c0ccf89b834f406ca2fec502077ac30f5565a4ba" translate="yes" xml:space="preserve">
          <source>Group.policy = object of group policies</source>
          <target state="translated">Политика группы=объект групповой политики</target>
        </trans-unit>
        <trans-unit id="efce0356075f72250f5b43c5db802bca2a7d8146" translate="yes" xml:space="preserve">
          <source>Group.step() = sub_agent behaviors</source>
          <target state="translated">Group.step()=поведение суб_агентов</target>
        </trans-unit>
        <trans-unit id="55fc06e84f4805b742bda2032265fe0a415c6969" translate="yes" xml:space="preserve">
          <source>Group.sub_agents = dictionary</source>
          <target state="translated">Group.sub_agents=словарь.</target>
        </trans-unit>
        <trans-unit id="9d1822c1ae5af2003b1434efdb49c9c6a13c1c1a" translate="yes" xml:space="preserve">
          <source>Happy Modeling!</source>
          <target state="translated">Счастливого Моделирования!</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="7ff11086b20a443877fdff663fd8b36dda49ec5b" translate="yes" xml:space="preserve">
          <source>Keyword parameters:</source>
          <target state="translated">Параметры ключевого слова:</target>
        </trans-unit>
        <trans-unit id="398b3a5600f4f0c2445df305f4e7c034bfc164f4" translate="yes" xml:space="preserve">
          <source>Main Functions:</source>
          <target state="translated">Основные функции:</target>
        </trans-unit>
        <trans-unit id="0915b5eda410b7fd81a958b942357c3e44c16831" translate="yes" xml:space="preserve">
          <source>Multi-Level Mesa</source>
          <target state="translated">Многоуровневая меза</target>
        </trans-unit>
        <trans-unit id="759380268ae70321d8b068a6285b8cb076a34faf" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa has three main components. First, a collection of managers which tracks the agents, the modules of agents (groups), the network of agents, and agents who belong to an existing group, and the schedule. Second, a series of functions which provides the user different options to form groups or dissolve them. Third, a group class which allows for the inclusion of different policies, manages the behavior and status of the group, and implicitly produces hierarchies within the complex system. (Figure 1)</source>
          <target state="translated">Многоуровневая Mesa состоит из трех основных компонентов.Во-первых,коллекция менеджеров,которая отслеживает агентов,модули агентов (групп),сеть агентов,а также агентов,которые принадлежат к существующей группе,и расписание.Во-вторых,ряд функций,которые предоставляют пользователю различные возможности для формирования групп или их распада.В-третьих,групповой класс,который позволяет включать различные политики,управляет поведением и статусом группы,а также неявно формирует иерархии внутри сложной системы.(рисунок 1)</target>
        </trans-unit>
        <trans-unit id="612cdf1dcaad735e8e0faf18fdc420f5c85a7b0c" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa is a library which supports Python's Agent Based Modeling Library Mesa. Multi-level Mesa's views complex systems as adaptive networks and uses a network graph structure to allow dynamic management of agent modules (groups) and model schedules.</source>
          <target state="translated">Многоуровневая Mesa-это библиотека,которая поддерживает Mesa,основанную на агентном моделировании.Многоуровневая Mesa рассматривает сложные системы как адаптивные сети и использует сетевую графическую структуру для динамического управления агентскими модулями (группами)и модельными графиками.</target>
        </trans-unit>
        <trans-unit id="a3b8a3df7a895fa349a319a01d693dbf13d21fa8" translate="yes" xml:space="preserve">
          <source>Multi-level Mesa requires</source>
          <target state="translated">Многоуровневые Mesa требует</target>
        </trans-unit>
        <trans-unit id="d852f990ae118bf9d73b83b33c6ebe19dce0deb2" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa._agents which is an ordered dictionary (a hash-table consisting of a key:value pair) that holds every agent added to the instance</source>
          <target state="translated">MultiLevel_Mesa._агенты,представляющие собой упорядоченный словарь (хэш-таблицу,состоящую из пары ключ:значение),в которой хранятся все агенты,добавленные в экземпляр</target>
        </trans-unit>
        <trans-unit id="1a3a782c952762649ccf732af8d2eb2cdec32141" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.agents_by_type uses a dictionary of dictionaries to track agents by type. This feature allows for faster reference of specific types of agents when manipulating groups or schedules.</source>
          <target state="translated">MultiLevel_Mesa.agents_by_type использует словарь словарей для отслеживания агентов по типам.Данная функция позволяет быстрее обращаться к определенным типам агентов при работе с группами или графиками.</target>
        </trans-unit>
        <trans-unit id="82a39e8becc21a50fdc3da1656d877c66c59e5b0" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.group_net takes a Boolean and is defaulted to False. This parameter tells the instance whether or not a group agent can form a larger group agent with other group agents.</source>
          <target state="translated">MultiLevel_Mesa.group_net принимает Boolean и по умолчанию становится False.Этот параметр сообщает экземпляру,может ли агент группы образовывать более крупный агент группы вместе с другими агентами группы.</target>
        </trans-unit>
        <trans-unit id="500a2958bb0dc817cb193a0c12914f3485536b30" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.groups is an ordered dictionary and tracks the groups within the model performing the same function of tracking groups as the agents ordered dictionary.</source>
          <target state="translated">MultiLevel_Mesa.groups представляет собой упорядоченный словарь и отслеживает группы внутри модели,выполняя ту же функцию отслеживания групп,что и агенты упорядоченного словаря.</target>
        </trans-unit>
        <trans-unit id="bbf83e090b2d38e45bf1f744b29e4e21b577fcde" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.id_counter, provides a unique_id for each group</source>
          <target state="translated">MultiLevel_Mesa.id_counter,предоставляет уникальный_ид для каждой группы.</target>
        </trans-unit>
        <trans-unit id="ab5904bab85a853408025c1ce315be6bd49d7429" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.min_for_group tells the instance the minimum number of agents which must be in a group. The min_for_group parameter has a default setting of 2.</source>
          <target state="translated">MultiLevel_Mesa.min_for_group сообщает экземпляру минимальное количество агентов,которое должно быть в группе.Параметр min_for_group имеет значение по умолчанию 2.</target>
        </trans-unit>
        <trans-unit id="4c026a85c445ae21b2abb4c28d4a04aad09ca117" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.net is an instance of a NewtorkX graph. This feature provides the critical structure for tracking and managing agents and groups.</source>
          <target state="translated">MultiLevel_Mesa.net является экземпляром графика NewtorkX.Эта функция обеспечивает критическую структуру для отслеживания и управления агентами и группами.</target>
        </trans-unit>
        <trans-unit id="b6981411887768aa23d0805f1ce7fff1301a8d69" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.reverse_groups is a dictionary of dictionaries of sets. The first dictionary key is the agent id, while the second is group types (link and link values) and the set is the group ids to which the agent belongs in those group types.</source>
          <target state="translated">MultiLevel_Mesa.reverse_groups-словарь словарей множеств.Первым ключом словаря является id агента,вторым-типы групп (значения ссылок и линков),а множеством-идентификаторы групп,к которым принадлежит агент в этих типах групп.</target>
        </trans-unit>
        <trans-unit id="cf3d87d029822593e1ab5bc21bf9729f7536fd4d" translate="yes" xml:space="preserve">
          <source>MultiLevel_Mesa.schedule replaces the Mesa schedule and is an ordered dictionary which manages the agents and when they execute a step function.</source>
          <target state="translated">MultiLevel_Mesa.schedule заменяет Mesa schedule и представляет собой упорядоченный словарь,который управляет агентами и когда они выполняют функцию шага.</target>
        </trans-unit>
        <trans-unit id="ca7f2075793db109cb2317a4a97ca56aebe3ffdd" translate="yes" xml:space="preserve">
          <source>Network Defined Dissolution: Multi-level_Mesa.reassess_net_group</source>
          <target state="translated">Разрешение по сети:Многоуровневая_Mesa.reassess_net_group</target>
        </trans-unit>
        <trans-unit id="d1363385e386dee5f55a93094c972a74d2d48c97" translate="yes" xml:space="preserve">
          <source>Network Defined Formation: Multi-level_Mesa.net_group</source>
          <target state="translated">Формирование,определяемое сетью:Многоуровневая_Mesa.net_group</target>
        </trans-unit>
        <trans-unit id="20a6d7f2088fc95d97daf986670199e6be687acb" translate="yes" xml:space="preserve">
          <source>Network Dissolution Function</source>
          <target state="translated">Функция сетевого отключения</target>
        </trans-unit>
        <trans-unit id="bdd82605e3dc3d698d45840be249fed36a34b7cc" translate="yes" xml:space="preserve">
          <source>Network Formation Function</source>
          <target state="translated">Функция формирования сети</target>
        </trans-unit>
        <trans-unit id="55fe774102e304e0470a2916dc3e124f51c6f147" translate="yes" xml:space="preserve">
          <source>Provides Extension module to Mesa to allow for Hierarchies and Modules of Agents</source>
          <target state="translated">Предоставляет модуль расширения в Mesa для включения иерархий и модулей агентов</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Требования</target>
        </trans-unit>
        <trans-unit id="edb3cec927126c2f59aeacf3d2229a5df427c1f2" translate="yes" xml:space="preserve">
          <source>Schedule Functions</source>
          <target state="translated">Функции расписания</target>
        </trans-unit>
        <trans-unit id="36b7c31c4e10000ebf134e745b744840499d5c25" translate="yes" xml:space="preserve">
          <source>Similar to Mesa, the MultiLevel_Mesa.add function requires an agent object. It also has two keyword parameters which take Boolean parameters each with a default value of True. Keyword parameter schedule adds the agent to the schedule. This is an option in case the user begins with a complex network and the agent is already part of a group. The net parameter similarly adds the agent to the NetworkX object. This is done in case the user has an agent he or she does not want to be part of the network. The Multi-level.Mesa.remove function requires an agent object. If invoked this will remove the agent from all managers as applicable. The Multi-level_Mesa.step function works in a similar way to the Mesa step function, where it iterates through each agent in schedule and executes their step function. Random activation is the default as identified by the keyword parameter shuffled. If shuffled is False it will follow the order in the ordered dictionary (the order the agents were added). The keyword parameter by_type is set to False but can take a list of agent types to simulate staged activation. Constant update provides the ability to have specific agent types activated after the more dynamic schedule. For example, an environmental variable which changes at a steady rate for each time step.</source>
          <target state="translated">Подобно Mesa,функция MultiLevel_Mesa.add требует наличия объекта-агента.Она также имеет два ключевых слова-параметра,которые принимают булевы параметры,каждый из которых по умолчанию имеет значение True.Ключевой параметр schedule добавляет агента в расписание.Это опция в том случае,если пользователь начинает со сложной сети,а агент уже входит в группу.Аналогично сетевой параметр добавляет агента в объект NetworkX.Это делается в том случае,если у пользователя есть агент,который он не хочет быть частью сети.Функция Multi-level.Mesa.remove требует наличия агента-объекта.При вызове этой функции агент удаляется из всех менеджеров,если это применимо.Функция Multi-level_Mesa.step работает аналогично функции Mesa step,где итерация проходит через каждого агента в расписании и выполняет их функцию шага.Случайная активация по умолчанию определяется параметром ключевого слова,перетасованного.Если параметр False перепутан,то он будет следовать порядку в упорядоченном словаре (порядок,в котором были добавлены агенты).Параметр ключевого слова by_type имеет значение False,но может взять список типов агентов для имитации инсценированной активации.Постоянное обновление обеспечивает возможность активации определенных типов агентов после более динамического расписания.Например,переменная окружения,которая изменяется с постоянной скоростью для каждого временного шага.</target>
        </trans-unit>
        <trans-unit id="428c367fb7ad0a7d3a822102fd7437d4785f9888" translate="yes" xml:space="preserve">
          <source>Six Managers:</source>
          <target state="translated">Шесть менеджеров:</target>
        </trans-unit>
        <trans-unit id="d875696ff97cd2193fbcb1e6a086b94c9c5ce3db" translate="yes" xml:space="preserve">
          <source>The Group class introduces hierarchy into the ABM. The Group class performs similar functions to Multi-level Mesa or Mesa's time module. The Group class has three managers, which includes a dictionary of the agents which belong to the Group, a dictionary of dictionaries with the agents in the Group by type and a NetworkX graph object of the sub_agents. The Group then has three attributes to make it easier for users to employ the Group. The first attribute is Group.active which is a Boolean value to help users activate and deactivate Groups as necessary. The next two attributes are Group.type and Group.&lt;strong&gt;str&lt;/strong&gt; which both equal &quot;group&quot; and allow the user greater ease in identifying and performing functions on the groups. The final attribute of the Group is its policy object, this object is passed in by the user and provides the Group behavior. The behavior of the Groups and its internal agents is done with two step functions the Group.group_step which calls the policy function and the individual agent step functions, again using a random order, but with the same options of the MultiLevel_Mesa.step function to dictate schedule ordering processes.</source>
          <target state="translated">Класс Group вводит иерархию в ABM. Класс Group выполняет те же функции, что и модуль времени Multi-level Mesa или Mesa. Класс Group имеет три менеджера, которые включают словарь агентов, которые принадлежат к группе, словарь словарей с агентами в группе по типу и объект графа NetworkX для sub_agents. Затем у группы есть три атрибута, чтобы пользователям было проще использовать ее. Первый атрибут - Group.active - логическое значение, помогающее пользователям активировать и деактивировать группы по мере необходимости. Следующие два атрибута - это Group.type и Group. &lt;strong&gt;ул.&lt;/strong&gt;которые равны &amp;laquo;группе&amp;raquo; и позволяют пользователю более легко идентифицировать и выполнять функции в группах. Последний атрибут группы - это ее объект политики, этот объект передается пользователем и обеспечивает поведение группы. Поведение групп и их внутренних агентов осуществляется с помощью двухэтапных функций Group.group_step, которые вызывают функцию политики и отдельные пошаговые функции агента, опять же с использованием случайного порядка, но с теми же параметрами функции MultiLevel_Mesa.step, чтобы диктовать планировать процессы заказа.</target>
        </trans-unit>
        <trans-unit id="aa491434aef2bbc20d2898cad8850c5dae27294f" translate="yes" xml:space="preserve">
          <source>The MetaAgent Class</source>
          <target state="translated">Класс MetaAgent</target>
        </trans-unit>
        <trans-unit id="9b88c454df4f4c918cebd63180fd3e7ae8c741a2" translate="yes" xml:space="preserve">
          <source>The Multi-level Mesa Functions</source>
          <target state="translated">Многоуровневые меза-функции</target>
        </trans-unit>
        <trans-unit id="14ff72121885339c6959e12490a5baff998d005b" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.form_group function requires one parameter which is the user specified process which determines whether or not an agent should be in a group with other agents. The *args and **kwargs allows the user to pass in the parameters for this process. The determine_id parameters ensures each group gets a unique id. If default it will simply append a number based on the id_counter attribute to the string 'group'. For the user to pass in an id he or she must yield the id as the first element of a tuple generated from the yield operator from the user defined process. Users must choose this id carefully as the id is used in the set operations to merge groups. The double parameter takes a Boolean value and is defaulted to False. If True the agent will remain in the schedule as an independent entity and be added as part of the group, while if False the agent is removed. This feature is to provide users maximum flexibility for agent scheduling and group processes. The policy parameter passes in the step processes for the group, which can consist of only internal processes or can consist of group processes and then execute the individual agent processes.  The group_type parameter takes a string and allows the user to specify different types of groups so an agent can belong to different types of group such as &amp;acirc;&amp;euro;&amp;tilde;family&amp;acirc;&amp;euro;&amp;trade; and &amp;acirc;&amp;euro;&amp;tilde;firm&amp;acirc;&amp;euro;&amp;trade;.</source>
          <target state="translated">Для функции MultiLevel_Mesa.form_group требуется один параметр, который представляет собой указанный пользователем процесс, который определяет, должен ли агент находиться в группе с другими агентами. * Args и ** kwargs позволяют пользователю передавать параметры для этого процесса. Параметры define_id гарантируют, что каждая группа получит уникальный идентификатор. По умолчанию он просто добавит число, основанное на атрибуте id_counter, к строке 'group'. Чтобы пользователь мог передать идентификатор, он или она должны передать идентификатор в качестве первого элемента кортежа, сгенерированного оператором yield из пользовательского процесса. Пользователи должны тщательно выбирать этот идентификатор, так как он используется в заданных операциях для объединения групп. Параметр double принимает логическое значение и по умолчанию имеет значение False. Если True, агент останется в расписании как независимый объект и будет добавлен как часть группы,а если False, агент удаляется. Эта функция призвана предоставить пользователям максимальную гибкость для планирования работы агентов и групповых процессов. Параметр политики передает пошаговые процессы для группы, которые могут состоять только из внутренних процессов или могут состоять из групповых процессов, а затем выполнять отдельные процессы агента. Параметр group_type принимает строку и позволяет пользователю указывать разные типы групп, чтобы агент мог принадлежать к разным типам групп, таким как &amp;laquo;семейство&amp;raquo; и &amp;laquo;твердая&amp;raquo;.Параметр group_type принимает строку и позволяет пользователю указывать разные типы групп, чтобы агент мог принадлежать к разным типам групп, таким как &amp;laquo;семейство&amp;raquo; и &amp;laquo;твердая&amp;raquo;.Параметр group_type принимает строку и позволяет пользователю указывать разные типы групп, чтобы агент мог принадлежать к разным типам групп, таким как &amp;laquo;семейство&amp;raquo; и &amp;laquo;твердая&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="836e6112c0bc763389cef144472c76ebb4c1bc50" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.net_group function requires no parameters and will default to whether or not a link exists or not between agents. As the net_group function has no process passed in there is no way to specify a group id, the function uses the default &quot;group&quot; if groups are forming based on the presence of a link, the link_type is not the default None or the link_type_link_value, plus a number from the Multi-level_Mesa.id_counter attribute. If users decided they would like to pass in processes to provide a unique id for groups this could be added in future versions, but was not included in this version as it did not add anything substantive to the Multi-level Mesa dynamics. The link_type function allows the user to pass in what link key value should link agents together. The link_type can then be further specified with the link_value criteria. These values are also used as the dictionary keys in the Multi-level_Mesa.reverse_groups manager. The link_value can either be a string to further classify the type of link, for example family: friendly or family: angry_teenager or it can be a value such as trades: 10 (number of trades between agents), which in this case tracks a type of interaction between agents. As net_group is an additive process the value is assumed to be a threshold of greater than or equal to a value. The network can then be updated and evaluated through the other processes in the ABM using NetworkX object manipulation functions. For convenience, Multi-level_Mesa also has Multi-level_Mesa.add_links and Multi-level_Mesa.remove_links functions. These functions take a list of agents, combines them in to a list of fully connected tuples and then adds or removes the links.</source>
          <target state="translated">Функция MultiLevel_Mesa.net_group не требует никаких параметров и по умолчанию будет устанавливать,существует или нет связь между агентами.Так как функция net_group не имеет переданного процесса,нет возможности указать id группы,функция использует &quot;группу&quot; по умолчанию,если группы формируются на основе наличия связи,тип link_type не является значением по умолчанию None или link_type_link_value,плюс число из Multi-level_Mesa.id_counter атрибута MultiLevel_Mesa.id_counter.Если пользователи решили,что хотят пройти в процессах для предоставления уникального идентификатора для групп,то это можно было бы добавить в будущих версиях,но в эту версию не было включено,т.к.это не добавило ничего существенного в многоуровневую динамику Mesa.Функция link_type позволяет пользователю передавать,в каком именно ключе связи должны быть связаны агенты.В дальнейшем тип link_type можно уточнить с помощью критерия link_value.Эти значения также используются в качестве ключей словаря в менеджере Multi-level_Mesa.reverse_groups.Значение link_value может быть как строкой для дальнейшей классификации типа ссылки,например семейства:friendly или family:angry_teenager,так и значением типа tradees:10 (количество сделок между агентами),которое в данном случае отслеживает тип взаимодействия между агентами.Поскольку net_group является аддитивным процессом,значение принимается как порог больше или равный значению.Затем сеть может обновляться и оцениваться через другие процессы в ABM с помощью функций манипулирования объектами NetworkX.Для удобства Multi-level_Mesa также имеет функции Multi-level_Mesa.add_links и Multi-level_Mesa.remove_links.Эти функции берут список агентов,объединяют их в список полностью подключенных кортежей,а затем добавляют или удаляют ссылки.</target>
        </trans-unit>
        <trans-unit id="fb920b58e145b1e086e21b323ffd229317ebd07d" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.reassess_meta function requires one parameter, which is the process defined by the user for assessing whether or not the agent should remain within the group. The function also has a reintroduce parameter which takes a Boolean value and is defaulted to True. This parameter tells the function whether or not to reintroduce the removed agents back into the schedule.</source>
          <target state="translated">Функция MultiLevel_Mesa.reassess_meta требует один параметр,то есть процесс,определенный пользователем для оценки того,должен ли агент оставаться в группе или нет.Функция также имеет параметр reintroduce,который принимает булевское значение и по умолчанию имеет значение True.Этот параметр сообщает функции,следует ли повторно вводить удаленные агенты обратно в расписание.</target>
        </trans-unit>
        <trans-unit id="3200bef127d2edad72f3d71838e216c1fbaab255" translate="yes" xml:space="preserve">
          <source>The MultiLevel_Mesa.reassess_net_group (Box 3-5) uses the same taxonomy of options as Multi-level_Mesa.net_group. First, an agent can be removed based on the presence of a link, the presence of a specific link type and finally the presence of a specific link value. The function will also check to ensure the meta-agent still has the minimum number of agents to remain a group which is defaulted to two with the Multi-level_Mesa.min_for_group attribute.</source>
          <target state="translated">MultiLevel_Mesa.reassess_net_group (вставка 3-5)использует ту же таксономию опций,что и Multi-level_Mesa.net_group.Сначала агент может быть удален на основании наличия ссылки,наличия определенного типа ссылки и,наконец,наличия определенного значения ссылки.Функция также проверит,что мета-агент все еще имеет минимальное количество агентов,чтобы остаться группой,которая по умолчанию имеет два атрибута Multi-level_Mesa.min_for_group.</target>
        </trans-unit>
        <trans-unit id="7aeffe395f9e52f877e34e274fedb6fa230532d4" translate="yes" xml:space="preserve">
          <source>The dissolution function for the explicit approach (although it can be used interchangeably with the network approach) is Multi-level_Mesa.reassess_group. This function iterates through each group and then uses the user defined process to assess whether or not an agent should still belong to the group. Similar to the Multi-level_Mesa.form_group this function requires a yield to provide the list of agents which should be removed and then proceeds to remove those agents while updating the appropriate managers. This function also ensures if the group fails to have a certain number of agents within the group that the group will be removed. This minimum number of agents is the min_for_group attribute of the Multi-level Mesa instance and has a default setting of two</source>
          <target state="translated">Функция растворения для явного подхода (хотя она может использоваться как взаимозаменяемая с сетевым подходом)-Multi-level_Mesa.reassess_group.Эта функция выполняет итерацию через каждую группу,а затем использует определяемый пользователем процесс для оценки того,должен ли еще агент принадлежать к группе.Подобно Multi-level_Mesa.form_group эта функция требует уступки для предоставления списка агентов,которые должны быть удалены,а затем переходит к удалению этих агентов при обновлении соответствующих менеджеров.Данная функция также гарантирует,что в случае отсутствия в группе определенного количества агентов,которые будут удалены,группа будет удалена.Минимальное количество агентов является атрибутом min_for_group экземпляра Multi-level Mesa и имеет по умолчанию два значения</target>
        </trans-unit>
        <trans-unit id="37c886402f15b31f8b53b45efd57e0dc1c8f3811" translate="yes" xml:space="preserve">
          <source>The dissolution function similar to the formation function requires no parameters and will default to determining if there is a link or not. The user can also specify link types which cause agents to be removed or link values, which can again be either strings or numbers. However, as this function is not additive, if the value is a number it must be less than or equal to the given value.</source>
          <target state="translated">Функция растворения,аналогичная функции формирования,не требует параметров и по умолчанию определяет наличие или отсутствие связи.Пользователь также может указать типы ссылок,которые приводят к удалению агентов,или значения ссылок,которые опять же могут быть как строками,так и числами.Однако,поскольку эта функция не является аддитивной,если значение является числом,то оно должно быть меньше или равно заданному значению.</target>
        </trans-unit>
        <trans-unit id="e846e9a75ba79c176424d40e346b809843120f9f" translate="yes" xml:space="preserve">
          <source>The formation function of the explicit approach is MultiLevel_Mesa.form_group and takes a user defined process which must generate a list of bilaterally connected agents (Box 3-2). This approach can be computationally expensive, but is necessary to allow for the accurate recreation of the network. As dictionaries (e.g. the schedule) cannot be manipulated during iteration users must use a yield versus the more common return operator to pass the list of agents to the MultiLevel_Mesa.form_group function.</source>
          <target state="translated">Функцией формирования эксплицитного подхода является MultiLevel_Mesa.form_group и берет на себя определенный пользователем процесс,который должен сгенерировать список двухсторонне связанных агентов (вставка 3-2).Такой подход может быть дорогостоящим с вычислительной точки зрения,но необходим для точного воссоздания сети.Поскольку словари (например,расписание)невозможно манипулировать во время итерации,пользователи должны использовать доходность по сравнению с более распространенным оператором возврата для передачи списка агентов в функцию MultiLevel_Mesa.form_group.</target>
        </trans-unit>
        <trans-unit id="51cf4d36ed362c2184a4b84f3e43995a5f93dfa7" translate="yes" xml:space="preserve">
          <source>The formation function of the network approach is Multi-level_Mesa.net_group and uses an undirected NetworkX graph object to assess what agents should form groups. With an undirected graph and as indicated in the above figure, there are three possibilities for assessing whether or not linked agents should be in the same group. First, by whether or not a link exists between the agents. Second, if a specific type of link exists (e.g. friend, enemy). Third, if a link exists which has reached a certain value.</source>
          <target state="translated">Функция формирования сетевого подхода-Multi-level_Mesa.net_group-использует неориентированный графический объект NetworkX для оценки того,какие агенты должны формировать группы.С неориентированным графиком и,как показано на рисунке выше,существует три возможности для оценки того,должны ли связанные агенты находиться в одной группе или нет.Во-первых,по наличию или отсутствию связи между агентами.Во-вторых,если существует определенный тип связи (например,друг,враг).В-третьих,если существует связь,которая достигла определенного значения.</target>
        </trans-unit>
        <trans-unit id="24aae1fc396217c59c234f4357d4f58fe00d390b" translate="yes" xml:space="preserve">
          <source>The interaction of the schedule, formation and dissolution of modules of agents, and the ability for hierarchies to exist allows for the easier introduction of these key features of complex systems. The functions can be employed as part of the normal step function, at specific events or at specific intervals. By using a network data structure as the main management structure, Multi-level Mesa is able to integrate the interdependencies and changing dynamics of those interdependencies into ABM management structure providing a new dynamic which goes beyond the current multi-level approaches.</source>
          <target state="translated">Взаимодействие расписания,формирования и растворения модулей агентов,а также возможность существования иерархий позволяет легче внедрять эти ключевые особенности сложных систем.Функции могут быть использованы как часть нормальной функции шага,при определенных событиях или через определенные промежутки времени.Используя структуру сетевых данных в качестве основной структуры управления,многоуровневая Mesa способна интегрировать взаимозависимости и изменяющуюся динамику этих взаимозависимостей в структуру управления АБМ,обеспечивая новую динамику,выходящую за рамки существующих многоуровневых подходов.</target>
        </trans-unit>
        <trans-unit id="5e081bb2d0131bb0e9db8758d2500154e9cced20" translate="yes" xml:space="preserve">
          <source>These examples are various instantiations of the Sugar and Spice trading model described in Chapter 4 of &lt;em&gt;Growing Artificial Societies&lt;/em&gt; by ROb Axtell and Joshua Epstein.</source>
          <target state="translated">Эти примеры представляют собой различные экземпляры модели торговли сахаром и специями, описанные в главе 4 книги &amp;laquo; &lt;em&gt;Growing Artificial&lt;/em&gt; Society&amp;raquo; Роба Акстелла и Джошуа Эпштейна.</target>
        </trans-unit>
        <trans-unit id="20cf766f97f692e7ce72ffbeaa78febb6e20c005" translate="yes" xml:space="preserve">
          <source>User Defined Dissolution Process: Multi-level_Mesa.reassess_group</source>
          <target state="translated">Определяемый пользователем процесс растворения:Многоуровневая_меза.переоценка_группа</target>
        </trans-unit>
        <trans-unit id="565a6b0e22fd4f040c42d8f315e07e8e275d81fa" translate="yes" xml:space="preserve">
          <source>User Defined Formation Process Multi-level_Mesa.form_meta</source>
          <target state="translated">Заданный пользователем процесс формирования Многоуровневый_Mesa.form_meta</target>
        </trans-unit>
        <trans-unit id="62dae151ed9c54ab314b0aff7b97a541dac292c0" translate="yes" xml:space="preserve">
          <source>User-Defined Dissolution Function</source>
          <target state="translated">Определяемая пользователем функция отключения</target>
        </trans-unit>
        <trans-unit id="f13ba7910ad4cf65afc10e456e2277cec9e73d6f" translate="yes" xml:space="preserve">
          <source>User-Defined Formation Function: Multi-level_Mesa.form_group</source>
          <target state="translated">Функция формирования,определяемая пользователем:Многоуровневая_меза.форма_группа</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
