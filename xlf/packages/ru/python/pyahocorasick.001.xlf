<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/pyahocorasick/">
    <body>
      <group id="pyahocorasick">
        <trans-unit id="ed97aac606c284f00a8e98f0ae07140929fbe028" translate="yes" xml:space="preserve">
          <source>(and its</source>
          <target state="translated">(и это</target>
        </trans-unit>
        <trans-unit id="e3067ae56410f9464bfc62ad525719ec2237bbc0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;noaho&lt;/a&gt; by Jeff Donner</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;Ноахо&lt;/a&gt; Джеффа Доннера</target>
        </trans-unit>
        <trans-unit id="2898914d91ade6aa4b5fab75831b531b3d2f6679" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick&lt;/a&gt; by Jan</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick,&lt;/a&gt; автор: Jan</target>
        </trans-unit>
        <trans-unit id="81c37789d6d7ff8f548453721778100bd5d331dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;ahocorapy&lt;/a&gt; by abusix</source>
          <target state="translated">&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;ахотерапия&lt;/a&gt; от abusix</target>
        </trans-unit>
        <trans-unit id="c7d44400b2f57def86baddf19afbfc3e699abdc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;acora&lt;/a&gt; by Stefan Behnel</source>
          <target state="translated">&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;acora&lt;/a&gt; Стефана Бенеля</target>
        </trans-unit>
        <trans-unit id="6d9a570276800e272f34696ea2ab7536f7a8bede" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;ahocorasick&lt;/a&gt; by Danny Yoo</source>
          <target state="translated">&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;ahocorasick&lt;/a&gt; Дэнни Ю</target>
        </trans-unit>
        <trans-unit id="9770c1cb2742574796021ba58990f9e621272f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aho-Corasick automatons&lt;/strong&gt; are commonly used for fast multi-pattern matching
in intrusion detection systems (such as snort), anti-viruses and many other
applications that need fast matching against a pre-defined set of string keys.</source>
          <target state="translated">&lt;strong&gt;Автоматы Aho-Corasick&lt;/strong&gt; обычно используются для быстрого сопоставления множественных шаблонов в системах обнаружения вторжений (таких как snort), антивирусах и многих других приложениях, которым требуется быстрое сопоставление с заранее определенным набором строковых ключей.</target>
        </trans-unit>
        <trans-unit id="7dd3bf2e6f48a980abeaa7119e3942eda3c11cae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Andrew Grigorev&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Андрей Григорьев&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2fb40f4f613f9ac3cfec16945940e4349611a293" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bogdan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Богдан&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6393c48fba67057a6497248e9d6b30140999726f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;David Woakes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Дэвид Вокс&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="162d0e50b0670b0376cbdbf7b1e65d64fc0a1f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edward Betts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Эдвард Беттс&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bfe3f4ab47a409cb2bd40897690783ae572c53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frankie Robertson&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Фрэнки Робертсон&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3af194910234db2a514c52b9a661270037c96342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frederik Petersen&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Фредерик Петерсен&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e49fa0cad50da1418d242834a238904c03fdd42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INADA Naoki&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ИНАДА Наоки&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="874d19396e59a53cbdcade123bc4349d5fd7cf57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jan Fan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ян Фан&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc7d3706eaf36f8967cc0d24859e944da30d97d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pastafarianist&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пастафарианец&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ea279129e79d202bf58037ef3a7cd73546b43af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Philippe Ombredanne&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Филипп Омбреданн&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b2d0fa470009d75d07f9589be39b9f90813cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Renat Nasyrov&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ренат Насыров&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b95a3ee36aea47516df64cdf62619b4ef0f8fe0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sylvain Zimmer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Сильвен Циммер&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="949463ea7fe3fff2c8592527d998390dde1c321c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xiaopeng Xu&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Сяопэн Сюй&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8185da43a01dd59da25c68eb057e9018a63e6d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gladtosee&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;рад видеть&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aec24ead2e378aa1de01e390b2d48c5093417c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pyahocorasick&lt;/strong&gt; is a fast and memory efficient library for exact or approximate
multi-pattern string search meaning that you can find multiple key strings
occurrences at once in some input text.  The library provides an</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt; - это быстрая и эффективная с точки зрения памяти библиотека для точного или приблизительного поиска строк по нескольким шаблонам, что означает, что вы можете одновременно найти несколько вхождений ключевых строк в некотором входном тексте. Библиотека предоставляет</target>
        </trans-unit>
        <trans-unit id="b094c013fc7959b0e49319f3c239cd5595cb2e1c" translate="yes" xml:space="preserve">
          <source>A drawback is that it needs to be constructed and &amp;ldquo;finalized&amp;rdquo; ahead of time
before you can search strings. In several applications where you search for several
pre-defined &amp;ldquo;needles&amp;rdquo; in a variable &amp;ldquo;haystacks&amp;rdquo; this is actually an advantage.</source>
          <target state="translated">Недостатком является то, что он должен быть построен и &amp;laquo;доработан&amp;raquo; заранее, прежде чем вы сможете искать строки. В некоторых приложениях, где вы ищете несколько заранее определенных &amp;laquo;иголок&amp;raquo; в переменной &amp;laquo;стога сена&amp;raquo;, это на самом деле является преимуществом.</target>
        </trans-unit>
        <trans-unit id="04782ec4eca1f6097648d60e92dc2368306610c7" translate="yes" xml:space="preserve">
          <source>AHOCORASICK_UNICODE</source>
          <target state="translated">AHOCORASICK_UNICODE</target>
        </trans-unit>
        <trans-unit id="d8c1fb100909b2de5e3e6846b03cdf758e3a1ef9" translate="yes" xml:space="preserve">
          <source>Alphabetic list of authors:</source>
          <target state="translated">Алфавитный список авторов:</target>
        </trans-unit>
        <trans-unit id="7b2c0e3b7a55c97534608d2d71b37edc8610942d" translate="yes" xml:space="preserve">
          <source>And play with the</source>
          <target state="translated">И поиграть с</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">Авторы</target>
        </trans-unit>
        <trans-unit id="44ba7c9100516298055fc980c38686ce14b07df5" translate="yes" xml:space="preserve">
          <source>Automaton</source>
          <target state="translated">Автомат</target>
        </trans-unit>
        <trans-unit id="f405bb9bd02d587cdb693f843b6d07868d7a8784" translate="yes" xml:space="preserve">
          <source>Automaton.iter()</source>
          <target state="translated">Automaton.iter()</target>
        </trans-unit>
        <trans-unit id="25719a5cf1783036cea960576445312036b584ec" translate="yes" xml:space="preserve">
          <source>Automaton.unicode</source>
          <target state="translated">Automaton.unicode</target>
        </trans-unit>
        <trans-unit id="3ea9b7958e6e0f63f2ef85fa952a4e7d3b2a34a4" translate="yes" xml:space="preserve">
          <source>Behind the scenes the &lt;strong&gt;pyahocorasick&lt;/strong&gt; Python library implements these two data
structures:  a &lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt; and an Aho-Corasick string
matching automaton. Both are exposed through the</source>
          <target state="translated">За кулисами библиотека Python &lt;strong&gt;pyahocorasick&lt;/strong&gt; реализует эти две структуры данных: &lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt; и автомат сопоставления строк Aho-Corasick. Оба подвергаются воздействию</target>
        </trans-unit>
        <trans-unit id="7abedb1575fd6bac486d83daa0fae3666fcd6d40" translate="yes" xml:space="preserve">
          <source>Better performance than py-aho-corasick.</source>
          <target state="translated">Лучшая производительность,чем пи-а-а-а-а-а-а-а-а-а-а-а-а-а-а-а-а.</target>
        </trans-unit>
        <trans-unit id="02afad2d07ff35fa2d38c3f1aa70f1ad2bf9a908" translate="yes" xml:space="preserve">
          <source>Build and install from PyPi</source>
          <target state="translated">Сборка и установка из PyPi</target>
        </trans-unit>
        <trans-unit id="e50315914efb0d909a65ca1269c98237e027ab40" translate="yes" xml:space="preserve">
          <source>Conda-Forge &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</source>
          <target state="translated">Конда-Кузница &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Вклад</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Документация</target>
        </trans-unit>
        <trans-unit id="55ab40731d2b483f40f5c367bf45cf082a424256" translate="yes" xml:space="preserve">
          <source>Does not compile on Windows (July 2016).</source>
          <target state="translated">Не компилируется под Windows (июль 2016).</target>
        </trans-unit>
        <trans-unit id="9cf270b0ed04e38ca1168cadd64d0b400c9268cd" translate="yes" xml:space="preserve">
          <source>Download and source code</source>
          <target state="translated">Скачать и исходный код</target>
        </trans-unit>
        <trans-unit id="658c081ddc6d9c0cb44f7db7896b386bf67ec1fc" translate="yes" xml:space="preserve">
          <source>FAQ and Who is using pyahocorasick? &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</source>
          <target state="translated">FAQ и кто использует pyahocorasick? &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1e450a10c75a74703dde77de000687ff20958d0" translate="yes" xml:space="preserve">
          <source>Full text of license is available in LICENSE file.</source>
          <target state="translated">Полный текст лицензии доступен в файле LICENSE.</target>
        </trans-unit>
        <trans-unit id="cab4b9f03f6a3ca40df9255c188756480ea392ef" translate="yes" xml:space="preserve">
          <source>GPL-licensed.</source>
          <target state="translated">Лицензия GPL.</target>
        </trans-unit>
        <trans-unit id="272e4f2c171f5d31922d67de7378f7e262a5bc76" translate="yes" xml:space="preserve">
          <source>GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad05633a3a72b5a69f26140c6b056ca6ac3cc746" translate="yes" xml:space="preserve">
          <source>Here we print the results and just check that they are correct. The</source>
          <target state="translated">Здесь мы распечатываем результаты и просто проверяем их правильность.</target>
        </trans-unit>
        <trans-unit id="17312d12e6bb98023633465fda0a407c342321e8" translate="yes" xml:space="preserve">
          <source>If compilation succeeds, the module is ready to use.</source>
          <target state="translated">В случае успешной компиляции модуль готов к использованию.</target>
        </trans-unit>
        <trans-unit id="bd491784e8bd16d60a13acab42b345ed6027c091" translate="yes" xml:space="preserve">
          <source>In addition to Trie-like and Aho-Corasick methods and data structures,
&lt;strong&gt;pyahocorasick&lt;/strong&gt; also implements dict-like methods: The pyahocorasick
&lt;strong&gt;Automaton&lt;/strong&gt; is a &lt;strong&gt;Trie&lt;/strong&gt; a dict-like structure indexed by string keys each
associated with a value object. You can use this to retrieve an associated value
in a time proportional to a string key length.</source>
          <target state="translated">В дополнение к методам и структурам данных типа Trie и Aho-Corasick, &lt;strong&gt;pyahocorasick&lt;/strong&gt; также реализует методы, подобные dict: &lt;strong&gt;автомат&lt;/strong&gt; pyahocorasick - это структура, &lt;strong&gt;подобная &lt;/strong&gt;&lt;strong&gt;Trie,&lt;/strong&gt; индексированная строковыми ключами, каждый из которых связан с объектом значения. Вы можете использовать это для получения связанного значения за время, пропорциональное длине строкового ключа.</target>
        </trans-unit>
        <trans-unit id="734f73caf4ba4b4af7ad7e2ac00e7ad457c2946d" translate="yes" xml:space="preserve">
          <source>Includes visualization tool for resulting automaton (using pygraphviz).</source>
          <target state="translated">Включает инструмент визуализации результирующего автомата (с помощью пиографа).</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Установить</target>
        </trans-unit>
        <trans-unit id="bb182491194b4d0793fa0b2ebfb14180cb314c9d" translate="yes" xml:space="preserve">
          <source>Internally an Aho-Corasick automaton is typically based on a Trie with extra
data for failure links and an implementation of the Aho-Corasick search
procedure.</source>
          <target state="translated">Внутренний автомат Aho-Corasick обычно базируется на Trie с дополнительными данными для ссылок на отказ и реализацией процедуры поиска Aho-Corasick.</target>
        </trans-unit>
        <trans-unit id="fe01490a6d0f624547f199e72bd239c228a8fa3e" translate="yes" xml:space="preserve">
          <source>It is implemented in C and tested on Python 2.7 and 3.4+. It works on Linux, Mac and
Windows.</source>
          <target state="translated">Он реализован на С и протестирован на питонах 2.7 и 3.4+.Он работает на Linux,Mac и Windows.</target>
        </trans-unit>
        <trans-unit id="0b87609b15fd736afe5e6b3e9f08be5444d9d946" translate="yes" xml:space="preserve">
          <source>Large automaton may take a long time to build (July 2016)</source>
          <target state="translated">Строительство большого автомата может занять много времени (июль 2016 года).</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">Лицензия</target>
        </trans-unit>
        <trans-unit id="122441255d963912bba0b6bd7da9b922f9c619b6" translate="yes" xml:space="preserve">
          <source>MIT-licensed, 100% test coverage, tested on all major python versions (+ pypy)</source>
          <target state="translated">MIT-лицензия,100% тестовое покрытие,протестировано на всех основных версиях питона (+pypy)</target>
        </trans-unit>
        <trans-unit id="ce7628c9a6e0f7b0383b4db2f57e0a8e41f2d4fd" translate="yes" xml:space="preserve">
          <source>No support for a dict-like protocol to associate a value to a string key.</source>
          <target state="translated">Отсутствует поддержка протокола,подобного пиктограмме,для связывания значения со строковым ключом.</target>
        </trans-unit>
        <trans-unit id="10e2c2319f5e18601635b0d8ffdf8a79b616342e" translate="yes" xml:space="preserve">
          <source>No support for the pickle protocol.</source>
          <target state="translated">Нет поддержки протокола огурцов.</target>
        </trans-unit>
        <trans-unit id="199d8cc3d06f55aa835b5938ee867f1fcd4256a9" translate="yes" xml:space="preserve">
          <source>Now convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search:</source>
          <target state="translated">Теперь конвертируйте три в автомат Aho-Corasick,чтобы включить поиск по Aho-Corasick:</target>
        </trans-unit>
        <trans-unit id="574fb291c52b991631be9dcc16b47856c8ba7921" translate="yes" xml:space="preserve">
          <source>On Windows and Python 2.7 you need the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;Microsoft Visual C++ Compiler for Python 2.7&lt;/a&gt; (aka. Visual
Studio 2008). There have been reports that</source>
          <target state="translated">В Windows и Python 2.7 вам понадобится &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;компилятор Microsoft Visual C ++ для Python 2.7&lt;/a&gt; (также известный как Visual Studio 2008). Были сообщения, что</target>
        </trans-unit>
        <trans-unit id="8a664c4f166a6502ac9a27fe58c9b46cbef6d96e" translate="yes" xml:space="preserve">
          <source>One of the advantages of an Aho-Corasick automaton is that the typical worst-case
and best-case &lt;strong&gt;runtimes&lt;/strong&gt; are about the same and depends primarily on the size
of the input string and secondarily on the number of matches returned.  While
this may not be the fastest string search algorithm in all cases, it can search
for multiple strings at once and its runtime guarantees make it rather unique.
Because pyahocorasick is based on a Trie, it stores redundant keys prefixes only
once using memory efficiently.</source>
          <target state="translated">Одним из преимуществ автомата Ахо-Corasick является то , что типичные наихудшим и лучшим вариантом &lt;strong&gt;автономной работы&lt;/strong&gt; примерно одинаковы и зависит в первую очередь от размера входной строки и во второй очереди от количества матчей , возвращенных. Хотя это может быть не самый быстрый алгоритм поиска строк во всех случаях, он может искать сразу несколько строк, и его гарантии времени выполнения делают его довольно уникальным. Поскольку pyahocorasick основан на Trie, он сохраняет префиксы избыточных ключей только один раз, эффективно используя память.</target>
        </trans-unit>
        <trans-unit id="e246417542e9b47eb9f386debf9a6c56e0bfe0d8" translate="yes" xml:space="preserve">
          <source>Other Aho-Corasick implementations for Python you can consider</source>
          <target state="translated">Другие внедрения Aho-Corasick для Python вы можете рассмотреть.</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Обзор</target>
        </trans-unit>
        <trans-unit id="db0f74a1197d6b2e8f18cf9a0e372b427a8942e7" translate="yes" xml:space="preserve">
          <source>Performs additional suffix shortcutting (more setup overhead, less search overhead for suffix lookups).</source>
          <target state="translated">Выполняет дополнительное сокращение суффиксных ярлыков (больше накладных расходов на настройку,меньше накладных расходов на поиск суффиксов).</target>
        </trans-unit>
        <trans-unit id="74e4fe431448e00688da3c8643c56bc538eb9444" translate="yes" xml:space="preserve">
          <source>Poor performance.</source>
          <target state="translated">Плохая работа.</target>
        </trans-unit>
        <trans-unit id="fe28615cf8cffc3bbeb6a7d015900e3338401a59" translate="yes" xml:space="preserve">
          <source>Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45c1df25b203a7ba230eed956c1777a7aa677903" translate="yes" xml:space="preserve">
          <source>Python
module that you can use as a plain dict-like Trie or convert a Trie to an automaton
for efficient Aho-Corasick search.</source>
          <target state="translated">Python модуль,который вы можете использовать в качестве простого диктофона Trie или преобразовать Trie в автомат для эффективного поиска Aho-Corasick.</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">Быстрый старт</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">См.также:</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">Поддержка</target>
        </trans-unit>
        <trans-unit id="3e13dec66bbc8d1730f2c6132002840bd1f7157a" translate="yes" xml:space="preserve">
          <source>Support is available through the &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; to report bugs or ask
questions.</source>
          <target state="translated">Поддержка доступна через &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;трекер проблем GitHub,&lt;/a&gt; чтобы сообщить об ошибках или задать вопросы.</target>
        </trans-unit>
        <trans-unit id="174534c6b3882921f07bb41f7a29c9824d9b171b" translate="yes" xml:space="preserve">
          <source>Thank you.</source>
          <target state="translated">Спасибо.</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="1d05cabd76099f37019d2974b963cca4a1200f90" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#license&quot;&gt;license&lt;/a&gt; is BSD-3-clause. Some utilities, such as tests and the pure Python
automaton are dedicated to the Public Domain.</source>
          <target state="translated">&lt;a href=&quot;#license&quot;&gt;Лицензия&lt;/a&gt; является BSD-3-пункт. Некоторые служебные программы, такие как тесты и автомат на чистом Python, являются общественным достоянием.</target>
        </trans-unit>
        <trans-unit id="7d65dbc73543968a8479240a96a7efc6150edcf9" translate="yes" xml:space="preserve">
          <source>The full documentation including the API overview and reference is published on
&lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt;.</source>
          <target state="translated">Полная документация, включая обзор API и справочник, опубликована в &lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="afed17b15d79d7910cc59b01b6cb7ac878d8f5fa" translate="yes" xml:space="preserve">
          <source>The initial author and maintainer is Wojciech Muła. &lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt;, the current co-owner, rewrote
documentation, setup CI servers and did a whole lot of work to make this module
better accessible to end users.</source>
          <target state="translated">Первоначальный автор и сопровождающий - Войцех Мула. &lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Филипп Омбреданн&lt;/a&gt; , нынешний совладелец, переписал документацию, настроил серверы CI и проделал огромную работу, чтобы сделать этот модуль более доступным для конечных пользователей.</target>
        </trans-unit>
        <trans-unit id="4b5ac9c74ef0cc47e587063fd4e4d4c3a5c9a569" translate="yes" xml:space="preserve">
          <source>The type of strings accepted and returned by</source>
          <target state="translated">Тип принятых и возвращенных строк</target>
        </trans-unit>
        <trans-unit id="9534657f069153e8db5ee1126e3cc2e1a451ece9" translate="yes" xml:space="preserve">
          <source>Then check if some string exists in the trie:</source>
          <target state="translated">Затем проверьте,существует ли какая-то строка в триединстве:</target>
        </trans-unit>
        <trans-unit id="959dc99901355a8612b602dbe13380c89fb12c42" translate="yes" xml:space="preserve">
          <source>Then create an Automaton:</source>
          <target state="translated">Тогда создайте Автомат:</target>
        </trans-unit>
        <trans-unit id="d2c6d3f04bf71d2bfa75772861724b90c6e11939" translate="yes" xml:space="preserve">
          <source>Then search all occurrences of the keys (the needles) in an input string (our haystack).</source>
          <target state="translated">Затем перейдите по всем вхождениям ключей (игл)во входную строку (наш стог сена).</target>
        </trans-unit>
        <trans-unit id="26eae255de3160d089849367227c318e420bae93" translate="yes" xml:space="preserve">
          <source>This library is licensed under very liberal
&lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; license. Some portions of
the code are dedicated to the public domain such as the pure Python automaton and test
code.</source>
          <target state="translated">Эта библиотека находится под очень либеральной &lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;лицензией BSD-3-Clause&lt;/a&gt; . Некоторые части кода предназначены для общего пользования, например, чистый автомат Python и тестовый код.</target>
        </trans-unit>
        <trans-unit id="a76d0f88d6303cbc70bca3eaafc6057174b0e969" translate="yes" xml:space="preserve">
          <source>This library would not be possible without help of many people, who contributed in
various ways.
They created &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;pull requests&lt;/a&gt;,
reported bugs as &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issues&lt;/a&gt;
or via direct messages, proposed fixes, or spent their valuable time on testing.</source>
          <target state="translated">Эта библиотека была бы невозможна без помощи многих людей, которые внесли свой вклад различными способами. Они создавали &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;запросы на вытягивание&lt;/a&gt; , сообщали об ошибках в виде &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;проблем на GitHub&lt;/a&gt; или в личных сообщениях, предлагали исправления или тратили свое драгоценное время на тестирование.</target>
        </trans-unit>
        <trans-unit id="65802d1bebf9a241c61798462c97bce6dfbfc8f7" translate="yes" xml:space="preserve">
          <source>This module is written in C. You need a C compiler installed to compile native
CPython extensions. To install:</source>
          <target state="translated">Этот модуль написан на C.Для компиляции родных расширений CPython нужен установленный компилятор C.Для установки:</target>
        </trans-unit>
        <trans-unit id="e800b963297cdb42008d55c6934e3c969110967f" translate="yes" xml:space="preserve">
          <source>To build from sources you need to have a C compiler installed and configured which
should be standard on Linux and easy to get on MacOSX.</source>
          <target state="translated">Для сборки из исходников необходим установленный и настроенный компилятор C,который должен быть стандартным на Linux и легко распространяться на MacOSX.</target>
        </trans-unit>
        <trans-unit id="2303b77104c204d0cf392f7c5542a4497f1ecdf6" translate="yes" xml:space="preserve">
          <source>To build from sources, clone the git repository or download and extract the source
archive.</source>
          <target state="translated">Для сборки из исходников клонируйте git-репозиторий или скачивайте и распаковывайте архив исходников.</target>
        </trans-unit>
        <trans-unit id="75a85f5e73844aa9ce0678ff10641a6c17579101" translate="yes" xml:space="preserve">
          <source>To install for common operating systems, use pip. Pre-built wheels should be
available on Pypi at some point in the future:</source>
          <target state="translated">Для установки в общих операционных системах используйте трубопроводы.Готовые колеса должны быть доступны на Pypi в какой-то момент в будущем:</target>
        </trans-unit>
        <trans-unit id="6e777a781dedce1b28e01826c3c139d313404f24" translate="yes" xml:space="preserve">
          <source>Unicode and bytes</source>
          <target state="translated">Юникод и байты</target>
        </trans-unit>
        <trans-unit id="7206176896659795f74afea7cc4e7d29256396ff" translate="yes" xml:space="preserve">
          <source>Unicode is &lt;strong&gt;NOT supported&lt;/strong&gt; on Python 2 for now.</source>
          <target state="translated">Unicode пока &lt;strong&gt;НЕ поддерживается&lt;/strong&gt; в Python 2.</target>
        </trans-unit>
        <trans-unit id="20a865e70cb26947232ecd90e8b1136329511b67" translate="yes" xml:space="preserve">
          <source>Using pypy, ahocorapy&amp;rsquo;s search performance is only slightly worse than pyahocorasick&amp;rsquo;s.</source>
          <target state="translated">При использовании pypy эффективность поиска ahocorapy лишь немного хуже, чем у pyahocorasick.</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Предупреждение</target>
        </trans-unit>
        <trans-unit id="20325b1033d8381cc0e0e9f5cdf4baa1aeecfa32" translate="yes" xml:space="preserve">
          <source>When the library is built with unicode support on Python 3, an Automaton will
store 2 or 4 bytes per letter, depending on your Python installation. When built
for bytes, only one byte per letter is needed.</source>
          <target state="translated">Когда библиотека собрана с поддержкой юникода на Python 3,Automaton будет хранить 2 или 4 байта на букву,в зависимости от вашей установки на Python.При сборке для байтов требуется только один байт на букву.</target>
        </trans-unit>
        <trans-unit id="cc578d41959c5c83a536719803a2120cb3a926c9" translate="yes" xml:space="preserve">
          <source>While &lt;strong&gt;pyahocorasick&lt;/strong&gt; tries to be the finest and fastest Aho Corasick library
for Python you may consider these other libraries:</source>
          <target state="translated">Хотя &lt;strong&gt;pyahocorasick&lt;/strong&gt; пытается быть лучшей и самой быстрой библиотекой Aho Corasick для Python, вы можете рассмотреть эти другие библиотеки:</target>
        </trans-unit>
        <trans-unit id="189369cb661a954a8ee2e23f3f4d59cb8ab47209" translate="yes" xml:space="preserve">
          <source>With an &lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;Aho-Corasick automaton&lt;/a&gt;
you can efficiently search all occurrences of multiple strings (the needles) in an
input string (the haystack) making a single pass over the input string. With
pyahocorasick you can eventually build large automatons and pickle them to reuse
them over and over as an indexed structure for fast multi pattern string matching.</source>
          <target state="translated">С помощью &lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;автомата Aho-Corasick&lt;/a&gt; вы можете эффективно искать все вхождения нескольких строк (игл) во входной строке (стоге сена), совершая один проход по входной строке. С помощью pyahocorasick вы можете в конечном итоге создавать большие автоматы и обрабатывать их, чтобы повторно использовать их снова и снова в качестве индексированной структуры для быстрого сопоставления строк с несколькими шаблонами.</target>
        </trans-unit>
        <trans-unit id="ddd8dcd46e0738b341d3e1e285d6a263179698ec" translate="yes" xml:space="preserve">
          <source>Written in C.</source>
          <target state="translated">Написано на C.</target>
        </trans-unit>
        <trans-unit id="d42f9e878192a8bb5e32f72fea1ce7300932b374" translate="yes" xml:space="preserve">
          <source>Written in C. Does not return overlapping matches.</source>
          <target state="translated">Написано на C.Не возвращает перекрывающиеся спички.</target>
        </trans-unit>
        <trans-unit id="4ad9e66c3d7119769fc23a32bf9ea46fc37a0022" translate="yes" xml:space="preserve">
          <source>Written in Cython.</source>
          <target state="translated">Написано на Сайтоне.</target>
        </trans-unit>
        <trans-unit id="f648ca758eb1cfa4b53138bdd824268576d35265" translate="yes" xml:space="preserve">
          <source>Written in pure Python.</source>
          <target state="translated">Написано на чистом Пайтоне.</target>
        </trans-unit>
        <trans-unit id="21610d0af0f56ee1ffce9457679ca588e96303ed" translate="yes" xml:space="preserve">
          <source>You can also create an eventually large automaton ahead of time and</source>
          <target state="translated">Вы также можете создать в конечном итоге большой автомат заранее и</target>
        </trans-unit>
        <trans-unit id="f90f51c59d0a07bb77939cc1d895db9ff88903bd" translate="yes" xml:space="preserve">
          <source>You can fetch &lt;strong&gt;pyahocorasick&lt;/strong&gt; from:</source>
          <target state="translated">Вы можете получить &lt;strong&gt;pyahocorasick&lt;/strong&gt; из:</target>
        </trans-unit>
        <trans-unit id="8a34cb424be5c612007112dca2745443175309ac" translate="yes" xml:space="preserve">
          <source>You can submit contributions through &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHub pull requests&lt;/a&gt;.</source>
          <target state="translated">Вы можете отправлять материалы через &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;запросы на вытягивание GitHub&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4059645e8bead06953ce87b04c2044bb82ea4469" translate="yes" xml:space="preserve">
          <source>You can use the Automaton class as a trie. Add some string keys and their associated
value to this trie. Here we associate a tuple of (insertion index, original string)
as a value to each key string we add to the trie:</source>
          <target state="translated">Вы можете использовать класс &quot;Автомат&quot; как три.Добавьте несколько строковых ключей и их соответствующее значение в это триединство.Здесь мы связываем кортеж (индекс вставки,исходную строку)в качестве значения с каждой строкой ключа,которую мы добавляем в трие:</target>
        </trans-unit>
        <trans-unit id="cad0f60d92a12c5e6f6120b7baa3005fd81bd2d4" translate="yes" xml:space="preserve">
          <source>a CPython &lt;strong&gt;C-based extension&lt;/strong&gt;, compatible with Python 2 and 3.</source>
          <target state="translated">&lt;strong&gt;расширение на основе&lt;/strong&gt; CPython &lt;strong&gt;C&lt;/strong&gt; , совместимое с Python 2 и 3.</target>
        </trans-unit>
        <trans-unit id="c8f2d0f5b3922e28e1d46e2a166716a566fb7927" translate="yes" xml:space="preserve">
          <source>a simpler pure Python module, compatible with Python 2 and 3. This is only
available in the source repository (not on Pypi) under the py/ directory and
has a slightly different API.</source>
          <target state="translated">более простой чистый модуль Python,совместимый с Python 2 и 3.Он доступен только в исходном репозитории (не на Pypi)под директорией py/и имеет немного другой API.</target>
        </trans-unit>
        <trans-unit id="85c447a62211d435f16120c5801a6a4d6e1f2695" translate="yes" xml:space="preserve">
          <source>ahocorasick</source>
          <target state="translated">ахокорасик</target>
        </trans-unit>
        <trans-unit id="07c33f4c5b41e7883028c6861ece1bf8a0b7044f" translate="yes" xml:space="preserve">
          <source>as set in</source>
          <target state="translated">в соответствии с условиями</target>
        </trans-unit>
        <trans-unit id="c3ce14415b37306cdba0e601673a7e7701e60f4f" translate="yes" xml:space="preserve">
          <source>attributes can tell you how the library was built.
On Python 3, unicode is the default. On Python 2, bytes is the default and only value.</source>
          <target state="translated">атрибуты могут рассказать о том,как была построена библиотека.На Python 3 по умолчанию используется юникод.На Python 2 байты-это значение по умолчанию и только оно.</target>
        </trans-unit>
        <trans-unit id="db5f6869b5f0574b5bb750d7a83d523f28ed9c61" translate="yes" xml:space="preserve">
          <source>class.</source>
          <target state="translated">Класс.</target>
        </trans-unit>
        <trans-unit id="6c8d48ef3f05b27405f0b115449226fa1295dca3" translate="yes" xml:space="preserve">
          <source>companion) and then run (in a</source>
          <target state="translated">...а затем бежать...</target>
        </trans-unit>
        <trans-unit id="eafac96f6304711036f6df796ae70e90f66d43fb" translate="yes" xml:space="preserve">
          <source>dict-like method:</source>
          <target state="translated">диктофонный метод:</target>
        </trans-unit>
        <trans-unit id="1e137456ce41b147b97c4a3b82b9d921053a7b85" translate="yes" xml:space="preserve">
          <source>does not build yet with
MinGW. It may build with cygwin but this has not been tested. If you get this working
with these platforms, please report in a ticket!</source>
          <target state="translated">еще не строится с MinGW.Он может строиться с помощью цигвина,но это не было протестировано.Если у вас получится работать с этими платформами,пожалуйста,сообщите об этом в тикете!</target>
        </trans-unit>
        <trans-unit id="c0105fb2a16ab02277e579cd37d38307d734cc35" translate="yes" xml:space="preserve">
          <source>end index</source>
          <target state="translated">конечный индекс</target>
        </trans-unit>
        <trans-unit id="24d7cde2f7b74a74ae24dd233457289a2e70ea1f" translate="yes" xml:space="preserve">
          <source>for this key. Here
we had stored as values a tuple with the original string and its trie insertion
order:</source>
          <target state="translated">за этот ключ.Здесь мы сохранили в виде значений кортеж с исходной строкой и ее порядком вставки в три:</target>
        </trans-unit>
        <trans-unit id="4a79533a2233d37071096ed5d29c1e9ac6cf66e6" translate="yes" xml:space="preserve">
          <source>get()</source>
          <target state="translated">get()</target>
        </trans-unit>
        <trans-unit id="57b3198ec561cc8ba7f8f3463ae5ce122251a891" translate="yes" xml:space="preserve">
          <source>it to
re-load later. Here we just pickle to a string. You would typically pickle to a
file instead:</source>
          <target state="translated">чтобы перезагрузить его позже.Здесь мы просто маринуем до нитки.Обычно вместо этого вы придираетесь к файлу:</target>
        </trans-unit>
        <trans-unit id="dd3297182bd934e5b975d272e648bb0bba704c84" translate="yes" xml:space="preserve">
          <source>method return the results as two-tuples of the</source>
          <target state="translated">метод возвращает результаты как две пары из</target>
        </trans-unit>
        <trans-unit id="10503efecca5b35f7093f4d661d94c7e8a3631cd" translate="yes" xml:space="preserve">
          <source>methods are either
&lt;strong&gt;unicode&lt;/strong&gt; or &lt;strong&gt;bytes&lt;/strong&gt;, depending on a compile time settings (preprocessor
definition of</source>
          <target state="translated">методы являются либо &lt;strong&gt;юникодом,&lt;/strong&gt; либо &lt;strong&gt;байтами&lt;/strong&gt; , в зависимости от настроек времени компиляции (определение препроцессора</target>
        </trans-unit>
        <trans-unit id="e7e07db96173fcd579f4a7910b826b93a8cd1d37" translate="yes" xml:space="preserve">
          <source>of
course!):</source>
          <target state="translated">Конечно!)</target>
        </trans-unit>
        <trans-unit id="a4561d3eb3b70a05c27c8ecfe455b03bd467781c" translate="yes" xml:space="preserve">
          <source>pickle</source>
          <target state="translated">солёность</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">пищать</target>
        </trans-unit>
        <trans-unit id="6be2e6bc394bd46ea0d122608c74793b53c4b08a" translate="yes" xml:space="preserve">
          <source>pyahocorasick</source>
          <target state="translated">психокорасик</target>
        </trans-unit>
        <trans-unit id="6cd73e638cb43aad4182b170751dce7d061b2c67" translate="yes" xml:space="preserve">
          <source>pyahocorasick is a fast and memory efficient library for exact or approximate multi-pattern string search.  With the ahocorasick.Automaton class, you can find multiple key strings occurrences at once in some input text.  You can use it as a plain dict-like Trie or convert a Trie to an automaton for efficient Aho-Corasick search.  Implemented in C and tested on Python 2.7 and 3.4+.  Works on Linux, Mac and Windows. BSD-3-clause license.</source>
          <target state="translated">pyahocorasick-это быстрая и эффективная с точки зрения памяти библиотека для точного или приблизительного поиска многозначных строк.С помощью класса ahocorasick.Automaton вы можете найти несколько ключевых вхождений строк сразу в каком-нибудь вводном тексте.Вы можете использовать его в качестве простого треугольника под пиктограмму или преобразовать треугольник в автомат для эффективного поиска по Aho-Corasick.Реализовано на C и протестировано на Python 2.7 и 3.4+.Работает под Linux,Mac и Windows.Лицензия BSD-3-клик.</target>
        </trans-unit>
        <trans-unit id="a5a2857f47a66a88e4fd3cde78c61c3de269fda8" translate="yes" xml:space="preserve">
          <source>pyahocorasick is available in two flavors:</source>
          <target state="translated">Пятикостная кислота выпускается с двумя вкусами:</target>
        </trans-unit>
        <trans-unit id="4bf1502884f37a3b69d66f4b8d71dc7fe92c730b" translate="yes" xml:space="preserve">
          <source>seems unmaintained (last update in 2005).</source>
          <target state="translated">Кажется,что он не поддерживается (последнее обновление в 2005 году).</target>
        </trans-unit>
        <trans-unit id="8e2edce0d507e1297474f25c00cae94258db38d8" translate="yes" xml:space="preserve">
          <source>setup.py</source>
          <target state="translated">setup.py</target>
        </trans-unit>
        <trans-unit id="bff5288d43b5b0b423a623fd27ab60ad387791d3" translate="yes" xml:space="preserve">
          <source>setuptools</source>
          <target state="translated">инструменты настройки</target>
        </trans-unit>
        <trans-unit id="f32b67c7e26342af42efabc674d441dca0a281c5" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="translated">значение</target>
        </trans-unit>
        <trans-unit id="fd3e2ebf7bd54402b7055af9ea9a035226639dee" translate="yes" xml:space="preserve">
          <source>virtualenv</source>
          <target state="translated">virtualenv</target>
        </trans-unit>
        <trans-unit id="c5d8a7bf63d5bed0ba64a18928de900d025670bd" translate="yes" xml:space="preserve">
          <source>where a
trie key was found in the input string and the associated</source>
          <target state="translated">где в входной строке был найден тройной ключ и связанная с ним</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
