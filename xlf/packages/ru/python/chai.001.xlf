<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/chai/">
    <body>
      <group id="chai">
        <trans-unit id="e6b66175260ff26512fb684537cbf9f2b364d277" translate="yes" xml:space="preserve">
          <source>). If the object can&amp;rsquo;t be stubbed with a reference,</source>
          <target state="translated">). Если объект не может быть заглушен ссылкой,</target>
        </trans-unit>
        <trans-unit id="fb665f290614383c36b3f1f861f00b7be3e6caec" translate="yes" xml:space="preserve">
          <source>**kwargs</source>
          <target state="translated">** kwargs</target>
        </trans-unit>
        <trans-unit id="571870a0e2ce85235666f3518f0cb7ef80d6e406" translate="yes" xml:space="preserve">
          <source>*args</source>
          <target state="translated">* аргументы</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="5d2060b68082fd8039b0f64840a87fa629b7fdc4" translate="yes" xml:space="preserve">
          <source>,
the container and context manager interfaces are defined. Nonzero will always return</source>
          <target state="translated">определены интерфейсы контейнера и диспетчера контекста. Ненулевое значение всегда возвращается</target>
        </trans-unit>
        <trans-unit id="36e33c2c8d280c833da17747a791a3c69c1a1b4c" translate="yes" xml:space="preserve">
          <source>, also the default for any expectation.</source>
          <target state="translated">, также по умолчанию для любых ожиданий.</target>
        </trans-unit>
        <trans-unit id="8ed8200a9b270fa9fdc9528526572d6f92ec2c3f" translate="yes" xml:space="preserve">
          <source>, and unbound methods do not support spies.</source>
          <target state="translated">, а несвязанные методы не поддерживают шпионов.</target>
        </trans-unit>
        <trans-unit id="3434a5fa9d5340c9dc87c95af8fa7fe46ee527e1" translate="yes" xml:space="preserve">
          <source>, but immediately return its original behavior after the mocked call has run.</source>
          <target state="translated">, но сразу же вернуть исходное поведение после запуска фиктивного вызова.</target>
        </trans-unit>
        <trans-unit id="861d8928eef7e2fddad40e2d3384c0b533ad9399" translate="yes" xml:space="preserve">
          <source>, but loaded into the</source>
          <target state="translated">, но загружается в</target>
        </trans-unit>
        <trans-unit id="3bad9e4d77cd0efd3c78cb4db2a8317bd5fddf94" translate="yes" xml:space="preserve">
          <source>, creating a Mock object and setting it as the attribute on another object.</source>
          <target state="translated">, создав объект Mock и установив его в качестве атрибута для другого объекта.</target>
        </trans-unit>
        <trans-unit id="0246ed7aae2051a8e9c6a562cf70219b8d2e1041" translate="yes" xml:space="preserve">
          <source>, so you&amp;rsquo;re sure any method you call will be a reference to the class and module in which a particular test method is currently being executed. Methods and comparators you define locally in a test case will be globally available when you&amp;rsquo;re running that particular case as well.</source>
          <target state="translated">, поэтому вы уверены, что любой вызываемый вами метод будет ссылкой на класс и модуль, в которых в настоящее время выполняется конкретный тестовый метод. Методы и компараторы, которые вы определяете локально в тестовом примере, будут глобально доступны, когда вы запускаете этот конкретный случай.</target>
        </trans-unit>
        <trans-unit id="dc259b741172f55d8979035191d5b5e9a9355175" translate="yes" xml:space="preserve">
          <source>, the main instrumentation class. All additional</source>
          <target state="translated">, основной класс КИПиА. Все дополнительные</target>
        </trans-unit>
        <trans-unit id="338bcb0d0b4f6443c09736e45408c62579701cfd" translate="yes" xml:space="preserve">
          <source>.  The</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="882bc8152e7bf3595a0f54f61c28de18807c01f3" translate="yes" xml:space="preserve">
          <source>. After your tests have run, you can check the value against expected arguments through</source>
          <target state="translated">. После запуска тестов вы можете сравнить значение с ожидаемыми аргументами с помощью</target>
        </trans-unit>
        <trans-unit id="123d87061cf49247a557b0f9f0593e35b298aff1" translate="yes" xml:space="preserve">
          <source>. Chai also aliases all of the</source>
          <target state="translated">. Чай также является псевдонимом всех</target>
        </trans-unit>
        <trans-unit id="f863c23a93501fd973cdcb1d746f38bd8aa20cad" translate="yes" xml:space="preserve">
          <source>. If</source>
          <target state="translated">, Если</target>
        </trans-unit>
        <trans-unit id="c087b164f3e107bcff94b80174fcfcc0b9a3c2f0" translate="yes" xml:space="preserve">
          <source>. Insists that the argument is the same type as</source>
          <target state="translated">. Настаивает на том, чтобы аргумент был того же типа, что и</target>
        </trans-unit>
        <trans-unit id="68883177497c032e286c33de93e91d8da54bf067" translate="yes" xml:space="preserve">
          <source>. See the</source>
          <target state="translated">. Увидеть</target>
        </trans-unit>
        <trans-unit id="9ad235be219456ab1fe2129e6365b870ce587e93" translate="yes" xml:space="preserve">
          <source>. The Chai api allows use of call chains to make the code
short, clean, and very readable. It also does away with the standard setup-and-replay
work flow, giving you more flexibility in how you write your cases.</source>
          <target state="translated">. API Chai позволяет использовать цепочки вызовов, чтобы сделать код коротким, понятным и легко читаемым. Это также избавляет от стандартного рабочего процесса настройки и воспроизведения, что дает вам больше гибкости в написании ваших кейсов.</target>
        </trans-unit>
        <trans-unit id="928f2e2b4b0bbed9bbd2df3710f32b4b8b359081" translate="yes" xml:space="preserve">
          <source>. This is really useful when you&amp;rsquo;re testing a deep stack and it&amp;rsquo;s simpler to assert that &amp;ldquo;value A was used in method call X&amp;rdquo;. Variables can also be used to capture an argument and return it.</source>
          <target state="translated">. Это действительно полезно, когда вы тестируете глубокий стек, и проще утверждать, что &amp;laquo;значение A использовалось в вызове метода X&amp;raquo;. Переменные также можно использовать для захвата аргумента и его возврата.</target>
        </trans-unit>
        <trans-unit id="65adeb30f017363f9b7d5cf8e56a078a085a0305" translate="yes" xml:space="preserve">
          <source>. Useful when you need to assert a few values in a list or dictionary, but the exact contents are not known or can vary.</source>
          <target state="translated">. Полезно, когда вам нужно подтвердить несколько значений в списке или словаре, но точное содержание неизвестно или может отличаться.</target>
        </trans-unit>
        <trans-unit id="d688a96191928796653c7e8c6a26b6ee4b8a7b13" translate="yes" xml:space="preserve">
          <source>; other methods will raise</source>
          <target state="translated">; другие методы поднимут</target>
        </trans-unit>
        <trans-unit id="b395577ed6d292d1728d09d92db54379cce75d36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A note of caution&lt;/strong&gt;
If you are using the</source>
          <target state="translated">&lt;strong&gt;Предупреждение.&lt;/strong&gt; Если вы используете</target>
        </trans-unit>
        <trans-unit id="81bb701418548d4bb45ed2b69bdc36a2bd9dcda2" translate="yes" xml:space="preserve">
          <source>A variable match against the first time that the argument is called. In the case of multiple calls, the second one must match the previous value of</source>
          <target state="translated">Соответствие переменной при первом вызове аргумента.В случае многократного вызова вторая должна совпадать с предыдущим значением параметра</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="1ea412919cecf1e673bbe80f94b4de04feb891af" translate="yes" xml:space="preserve">
          <source>Add a return value to the expectation when it is matched and executed.</source>
          <target state="translated">Добавьте возвращаемое значение к ожиданию,когда оно совпадает и выполняется.</target>
        </trans-unit>
        <trans-unit id="8881cd7ed0c80a3160bf68fb92492bedbe75ae37" translate="yes" xml:space="preserve">
          <source>Add a test to the expectation for matching arguments.</source>
          <target state="translated">Добавьте тест к ожиданию на соответствие аргументов.</target>
        </trans-unit>
        <trans-unit id="670b1ddc67f6054d3b05d014236af978c695794a" translate="yes" xml:space="preserve">
          <source>Additionally,</source>
          <target state="translated">Дополнительно,</target>
        </trans-unit>
        <trans-unit id="1c0f7e8d65d6dee32a4ddbf88aa36beb78ce26fd" translate="yes" xml:space="preserve">
          <source>All of the features are available by extending the</source>
          <target state="translated">Все функции доступны путем расширения</target>
        </trans-unit>
        <trans-unit id="6250d4591119ca852071735248d99d0d2558dd65" translate="yes" xml:space="preserve">
          <source>An expectation can act as a context manager, which is very useful in complex mocking situations. The context will always be the return value for the expectation. For example:</source>
          <target state="translated">Ожидание может выступать в качестве контекстного менеджера,что очень полезно в сложных издевательских ситуациях.Контекстом всегда будет возвращаемое значение для ожидания.Например:</target>
        </trans-unit>
        <trans-unit id="9b3ef8a4e8f6cbbdb4df27b3eed07109f0e1220c" translate="yes" xml:space="preserve">
          <source>An integer that defines a hard limit on the minimum and maximum number of times the expectation should be executed.</source>
          <target state="translated">Целое число,определяющее жесткий лимит на минимальное и максимальное количество раз ожидания.</target>
        </trans-unit>
        <trans-unit id="6dfb3cfdf9e6ad86483d6a89dcc0ee17e01b8350" translate="yes" xml:space="preserve">
          <source>Any arguments are accepted.</source>
          <target state="translated">Любые аргументы принимаются.</target>
        </trans-unit>
        <trans-unit id="a4aabc98aad3e6fd3482a9422dab44877d28c0c3" translate="yes" xml:space="preserve">
          <source>Any request for an attribute from a Mock will return a new Mock object, but</source>
          <target state="translated">Любой запрос атрибута из Mock'а вернет новый объект Mock'а,но</target>
        </trans-unit>
        <trans-unit id="996c30df344db8f82633617f6a9912f09e9c1a7a" translate="yes" xml:space="preserve">
          <source>Argument Comparators</source>
          <target state="translated">компараторы аргументов</target>
        </trans-unit>
        <trans-unit id="4c387a17298f7f3928201dd4c145debf316dbe1e" translate="yes" xml:space="preserve">
          <source>Argument comparators are defined as classes in</source>
          <target state="translated">Аргументные компараторы определяются как классы в</target>
        </trans-unit>
        <trans-unit id="339eeaaafecd6f09eab80b39a7bb240b1ab22067" translate="yes" xml:space="preserve">
          <source>As noted above, Chai will by default perform a greedy match, closing out an implied</source>
          <target state="translated">Как было отмечено выше,Чай по умолчанию проведет жадный матч,закрывая подразумеваемый</target>
        </trans-unit>
        <trans-unit id="883a481b6270c376b45bdc3daec3c9dad4d509a2" translate="yes" xml:space="preserve">
          <source>As of 0.3.0, the Chai API has significantly changed such that the default behavior of an expectation is least specific. This supports rapid iterative testing with minimal pain and verbosity. An example of the differences:</source>
          <target state="translated">Начиная с 0.3.0,китайский API значительно изменился таким образом,что поведение ожидания по умолчанию является наименее специфичным.Это поддерживает быстрое итерационное тестирование с минимальной болью и глаголомкостью.Пример различий:</target>
        </trans-unit>
        <trans-unit id="c3cabebcc3efcd364842af62b9a74918f2617031" translate="yes" xml:space="preserve">
          <source>Bug tracker</source>
          <target state="translated">охотник за ошибками</target>
        </trans-unit>
        <trans-unit id="4c86c5ce7b354999095e584ee76d047975c16521" translate="yes" xml:space="preserve">
          <source>Called with a function argument. When the expectation passes a test, the function will be executed. The side effect will be executed even if the expectation is configured to raise an exception. If the side effect is defined with arguments, then those arguments will be passed in when it&amp;rsquo;s called, otherwise the arguments passed in to the expectation will be passed in.</source>
          <target state="translated">Вызывается с аргументом функции. Когда ожидание пройдет проверку, функция будет выполнена. Побочный эффект будет выполняться, даже если ожидание настроено на создание исключения. Если побочный эффект определен с аргументами, то эти аргументы будут переданы при его вызове, в противном случае аргументы, переданные в ожидание, будут переданы.</target>
        </trans-unit>
        <trans-unit id="d10525a99b239e81e31412cc7b4c5dc1217f3627" translate="yes" xml:space="preserve">
          <source>Chai</source>
          <target state="translated">Чай</target>
        </trans-unit>
        <trans-unit id="3ee090e706774dda74b1f240a806d23f63bd0e3f" translate="yes" xml:space="preserve">
          <source>Chai provides a very easy to use api for mocking, stubbing and spying your python objects, patterned after the &lt;a href=&quot;http://mocha.rubyforge.org/&quot;&gt;Mocha&lt;/a&gt; library for Ruby.</source>
          <target state="translated">Chai предоставляет очень простой в использовании api для имитации, вставки заглушек и слежки за вашими объектами python, созданного по образцу библиотеки &lt;a href=&quot;http://mocha.rubyforge.org/&quot;&gt;Mocha&lt;/a&gt; для Ruby.</target>
        </trans-unit>
        <trans-unit id="1539c57a04ff590838b747031171b15f0eec3804" translate="yes" xml:space="preserve">
          <source>Chai.mock()</source>
          <target state="translated">Chai.mock()</target>
        </trans-unit>
        <trans-unit id="597f30ebaba1e70f4f092b4bad0f96f34241a9d3" translate="yes" xml:space="preserve">
          <source>Chai.tearDown</source>
          <target state="translated">Chai.tearDown</target>
        </trans-unit>
        <trans-unit id="bd5dc2ff43c21afc00e56a2f75cce397b8506026" translate="yes" xml:space="preserve">
          <source>Comparator</source>
          <target state="translated">Сравнитель</target>
        </trans-unit>
        <trans-unit id="3ce45a2697e790e29473f3d05c6d0ee3eabb53d0" translate="yes" xml:space="preserve">
          <source>Comparators can also be used inside data structures. For example:</source>
          <target state="translated">Компараторы могут также использоваться внутри структур данных.Например:</target>
        </trans-unit>
        <trans-unit id="7fbccfecf0dfc61e9b01394d836c599ac9e8baad" translate="yes" xml:space="preserve">
          <source>Context Manager</source>
          <target state="translated">Контекстный менеджер</target>
        </trans-unit>
        <trans-unit id="a60a223c98b2c36522f0b7f89f57ae14e144678a" translate="yes" xml:space="preserve">
          <source>Contributors</source>
          <target state="translated">Авторы</target>
        </trans-unit>
        <trans-unit id="4a771a02cfeb7539309f7f7737976ebeb5a34ce9" translate="yes" xml:space="preserve">
          <source>CustomObject</source>
          <target state="translated">CustomObject</target>
        </trans-unit>
        <trans-unit id="3539633c1214e7aec49f9475f9538370a5017b43" translate="yes" xml:space="preserve">
          <source>Download the latest version of Chai from &lt;a href=&quot;http://pypi.python.org/pypi/chai&quot;&gt;http://pypi.python.org/pypi/chai&lt;/a&gt;</source>
          <target state="translated">Загрузите последнюю версию Chai с &lt;a href=&quot;http://pypi.python.org/pypi/chai&quot;&gt;http://pypi.python.org/pypi/chai&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d41afcdf06f873159a02f2c71ff9d4ff63760f01" translate="yes" xml:space="preserve">
          <source>Download:</source>
          <target state="translated">Скачать:</target>
        </trans-unit>
        <trans-unit id="90f1ac6800ca959ac58d3e9fd96ed31c15b04d06" translate="yes" xml:space="preserve">
          <source>Downloading and installing from source</source>
          <target state="translated">Скачивание и установка из источника</target>
        </trans-unit>
        <trans-unit id="0284506ce102d25c05ed068cd5320b28169511f5" translate="yes" xml:space="preserve">
          <source>Easy to use mocking, stubbing and spying framework.</source>
          <target state="translated">Простой в использовании каркас для издевательств,шпионажа и наведения шпионов.</target>
        </trans-unit>
        <trans-unit id="fdd6abe4d3e43555fd6a8a4c1cf45b848e487e53" translate="yes" xml:space="preserve">
          <source>Equivalent to</source>
          <target state="translated">Эквивалентно</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Пример</target>
        </trans-unit>
        <trans-unit id="534bc3e17f8253884bf05a9d5410d13ba46e76a6" translate="yes" xml:space="preserve">
          <source>ExampleClass.__hash__</source>
          <target state="translated">ПримерClass.__hash__</target>
        </trans-unit>
        <trans-unit id="15ea9c44c66ad1a164bdf8ecab49cbea5244bbd2" translate="yes" xml:space="preserve">
          <source>Expectations and Spies</source>
          <target state="translated">Ожидания и шпионы</target>
        </trans-unit>
        <trans-unit id="7aad01a81d3c8d9c29acf0bb5d199de6e5d62329" translate="yes" xml:space="preserve">
          <source>Expectations are individual test cases that can be applied to a stub. They are expected to be run in order (unless otherwise noted). They are greedy, in that so long as an expectation has not been met and the arguments match, the arguments will be processed by that expectation. This mostly applies to the &amp;ldquo;at_least&amp;rdquo; and &amp;ldquo;any_order&amp;rdquo; expectations, which (may) stay open throughout the test and will handle any matching call.</source>
          <target state="translated">Ожидания - это отдельные тестовые примеры, которые можно применить к заглушке. Ожидается, что они будут выполняться по порядку (если не указано иное). Они жадны в том смысле, что до тех пор, пока ожидание не выполняется и аргументы совпадают, аргументы будут обрабатываться этим ожиданием. В основном это относится к ожиданиям &amp;laquo;at_least&amp;raquo; и &amp;laquo;any_order&amp;raquo;, которые (могут) оставаться открытыми на протяжении всего теста и будут обрабатывать любой соответствующий вызов.</target>
        </trans-unit>
        <trans-unit id="f68cbd711349e7ce456997131c670581feded172" translate="yes" xml:space="preserve">
          <source>Expectations expose the following public methods for changing their behavior.</source>
          <target state="translated">Ожидания демонстрируют следующие публичные методы изменения своего поведения.</target>
        </trans-unit>
        <trans-unit id="9dd4cd78c83af996e70c7add2e4de87eb4aea91e" translate="yes" xml:space="preserve">
          <source>Expectations will automatically create a stub if it&amp;rsquo;s not already applied, so no separate call to</source>
          <target state="translated">Ожидания автоматически создадут заглушку, если она еще не применена, поэтому отдельного вызова</target>
        </trans-unit>
        <trans-unit id="dcbeef985aed01007579dc07004ca5bb33bb52a4" translate="yes" xml:space="preserve">
          <source>Finally, Chai supports stubbing of properties on classes. In all cases, the stub will be applied to a class and individually to each of the 3 property methods. Because the stub is on the class, all instances need to be addressed when you write expectations. The first interface is via the named attribute method which can be used on both classes and instances.</source>
          <target state="translated">Наконец,Чай поддерживает наклейку свойств на классы.Во всех случаях корешок будет применяться к классу и индивидуально к каждому из 3 методов свойств.Так как корешок находится на классе,все случаи должны быть рассмотрены,когда вы пишете ожидания.Первый интерфейс осуществляется через именованный атрибутный метод,который может быть использован как на классах,так и на экземплярах.</target>
        </trans-unit>
        <trans-unit id="d7645a3a981b50e949915407edba7c2ab8140e3e" translate="yes" xml:space="preserve">
          <source>Graylin Kim (&lt;a href=&quot;https://github.com/GraylinKim&quot;&gt;https://github.com/GraylinKim&lt;/a&gt;)</source>
          <target state="translated">Грейлин Ким ( &lt;a href=&quot;https://github.com/GraylinKim&quot;&gt;https://github.com/GraylinKim&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5aefa9e4a096f5ee79287641afd6399d07cf0064" translate="yes" xml:space="preserve">
          <source>Here we can see how to mock an entire module, in this case replacing the</source>
          <target state="translated">Здесь мы видим,как издеваться над целым модулем,в данном случае заменяя собой</target>
        </trans-unit>
        <trans-unit id="578b86ed5f9ec28ef6e1f4dae1fa2741acada0af" translate="yes" xml:space="preserve">
          <source>Identical to assertAlmostEquals, will match an argument to the comparator value to a most</source>
          <target state="translated">Идентично assertAlmostEquals,будет сопоставлять аргумент со значением компаратора с большинством</target>
        </trans-unit>
        <trans-unit id="47cfaa1eebeab21bcec778d674f2f2fe1612ea22" translate="yes" xml:space="preserve">
          <source>If you have any suggestions, bug reports or annoyances please report them
to our issue tracker at &lt;a href=&quot;https://github.com/agoragames/chai/issues&quot;&gt;https://github.com/agoragames/chai/issues&lt;/a&gt;</source>
          <target state="translated">Если у вас есть предложения, отчеты об ошибках или неприятности, сообщите о них в нашу систему отслеживания проблем по адресу &lt;a href=&quot;https://github.com/agoragames/chai/issues&quot;&gt;https://github.com/agoragames/chai/issues.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e332ee12bb837d8df82eb22bbb498f344d1046c3" translate="yes" xml:space="preserve">
          <source>In addition to implementing</source>
          <target state="translated">Помимо реализации</target>
        </trans-unit>
        <trans-unit id="37d213f0410713c9a3a5bfc908891c14adfce250" translate="yes" xml:space="preserve">
          <source>In this example, we can reference</source>
          <target state="translated">В этом примере мы можем сослаться на</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="26de4bd441c871b067028d1d25a6d77bb366a12b" translate="yes" xml:space="preserve">
          <source>It is very common to need to run expectations on the constructor for an object, possibly including returning a mock object. Chai makes this very simple.</source>
          <target state="translated">Очень часто возникает необходимость запускать ожидания от конструктора для объекта,возможно,в том числе и при возвращении поддельного объекта.Чай делает это очень простым.</target>
        </trans-unit>
        <trans-unit id="3c4db4439387838c7ed03af1620fd3a43b52efcc" translate="yes" xml:space="preserve">
          <source>Jason Baker (&lt;a href=&quot;https://github.com/jasonbaker&quot;&gt;https://github.com/jasonbaker&lt;/a&gt;)</source>
          <target state="translated">Джейсон Бейкер ( &lt;a href=&quot;https://github.com/jasonbaker&quot;&gt;https://github.com/jasonbaker&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5b2a8de57085502bee48bbba4b377f74d645fa56" translate="yes" xml:space="preserve">
          <source>Keywords:</source>
          <target state="translated">Ключевые слова:</target>
        </trans-unit>
        <trans-unit id="79b82ce9b64a924266619555502f890dd80c83b9" translate="yes" xml:space="preserve">
          <source>LICENSE.txt</source>
          <target state="translated">LICENSE.txt</target>
        </trans-unit>
        <trans-unit id="0ba80658087c25238e2c567f1cfad45cc9216322" translate="yes" xml:space="preserve">
          <source>Lastly, Chai 1.0.0 supports spies. These are an extension of expectations and support most of the same features. The modifiers</source>
          <target state="translated">Наконец,Чай 1.0.0 поддерживает шпионов.Они являются продолжением ожиданий и поддерживают большинство из тех же функций.Модификаторы</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">Лицензия</target>
        </trans-unit>
        <trans-unit id="52436bb60c5567c4acebb0e6924534965da9e509" translate="yes" xml:space="preserve">
          <source>Match an argument of a given type. Supports same arguments as builtin function</source>
          <target state="translated">Сопоставьте аргумент заданного типа.Поддерживает те же аргументы,что и встроенная функция</target>
        </trans-unit>
        <trans-unit id="0281a72890edcfdf386a019d647a7a7aa64e0eef" translate="yes" xml:space="preserve">
          <source>Matches an argument if all of the comparators in the argument list are met. Uses automatic comparator generation for instances and types in the list.</source>
          <target state="translated">Совпадает с аргументом,если все компараторы в списке аргументов удовлетворены.Использует автоматическую генерацию компаратора для экземпляров и типов в списке.</target>
        </trans-unit>
        <trans-unit id="ec116a2ea8b3366c1ee8dc8a74b7e9112acca2f5" translate="yes" xml:space="preserve">
          <source>Matches an argument if any of the comparators in the argument list are met. Uses automatic comparator generation for instances and types in the list.</source>
          <target state="translated">Совпадает с аргументом,если любой из компараторов в списке аргументов удовлетворен.Использует автоматическую генерацию компаратора для экземпляров и типов в списке.</target>
        </trans-unit>
        <trans-unit id="c160e8f154251174b7d51eed4e58c779169ea6f5" translate="yes" xml:space="preserve">
          <source>Matches an argument if the callable returns True. The callable must take one argument, the parameter being checked.</source>
          <target state="translated">Совпадает с аргументом,если вызываемый параметр возвращает True.Обращающийся должен принять один аргумент,проверяемый параметр.</target>
        </trans-unit>
        <trans-unit id="5738633496d14d0b47b8bbabc9cd98327ca4516b" translate="yes" xml:space="preserve">
          <source>Matches an argument if the supplied comparator does not match.</source>
          <target state="translated">Совпадает с аргументом,если поставляемый компаратор не совпадает.</target>
        </trans-unit>
        <trans-unit id="833a9f1c455db76e44dcef55ab966c2ad68dae73" translate="yes" xml:space="preserve">
          <source>Matches an argument using a regular expression. Standard</source>
          <target state="translated">Совпадает с аргументом,использующим регулярное выражение.Стандартный</target>
        </trans-unit>
        <trans-unit id="64f853c1a3575e736b514d000c9fc82f4e65a929" translate="yes" xml:space="preserve">
          <source>Matches an argument using the Python</source>
          <target state="translated">Совпадает с аргументом,использующим питон.</target>
        </trans-unit>
        <trans-unit id="eec5f5fe4c719cf13cb4decc58c6eca8c4175c6d" translate="yes" xml:space="preserve">
          <source>Matches any argument.</source>
          <target state="translated">Подходит под любой аргумент.</target>
        </trans-unit>
        <trans-unit id="b7200896402bdcbf55c7ed22169f1bec614898dc" translate="yes" xml:space="preserve">
          <source>Matches if the argument contains all of the same items as in</source>
          <target state="translated">Совпадает,если аргумент содержит все те же элементы,что в</target>
        </trans-unit>
        <trans-unit id="79016d7ee9793533cc696e409203635bb18907aa" translate="yes" xml:space="preserve">
          <source>Matches if the argument contains the object using the Python</source>
          <target state="translated">Совпадает,если аргумент содержит объект,использующий Python</target>
        </trans-unit>
        <trans-unit id="16c60b75cfa05fcad93b0a4c2d7a42de16b96e4d" translate="yes" xml:space="preserve">
          <source>Matches if the argument is in the</source>
          <target state="translated">Совпадает,если аргумент находится в</target>
        </trans-unit>
        <trans-unit id="0b5fa58aad46cd81289ba53232a9f49430c093f9" translate="yes" xml:space="preserve">
          <source>Matches parameters with defined length. Must be either an integer or a set of integers that implements the</source>
          <target state="translated">Сопоставляет параметры с заданной длиной.Должно быть либо целым числом,либо набором целых чисел,реализующих параметр</target>
        </trans-unit>
        <trans-unit id="3bba2a47ccf460c78711135c78388afb263663e3" translate="yes" xml:space="preserve">
          <source>Mock</source>
          <target state="translated">Инсценировка</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Модификаторы</target>
        </trans-unit>
        <trans-unit id="b82f9dbded8be3c08f18bb50cd84de6d93501702" translate="yes" xml:space="preserve">
          <source>Modifiers can be applied to the expectation. Each modifier will return a reference to the expectation for easy chaining. In this example, we&amp;rsquo;re going to match a parameter and change the behavior depending on the argument. This also shows the ability to incrementally add expectations throughout the test.</source>
          <target state="translated">К ожиданию могут применяться модификаторы. Каждый модификатор вернет ссылку на ожидание для легкого связывания. В этом примере мы собираемся сопоставить параметр и изменить поведение в зависимости от аргумента. Это также показывает способность постепенно добавлять ожидания на протяжении всего теста.</target>
        </trans-unit>
        <trans-unit id="30caca616e914961a93ef38991a99a8fdcf65277" translate="yes" xml:space="preserve">
          <source>New BSD License</source>
          <target state="translated">Новая лицензия BSD</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Обзор</target>
        </trans-unit>
        <trans-unit id="249bcdd49abf6ce031f99eb9b9a3fd68584adea1" translate="yes" xml:space="preserve">
          <source>Pierre-Yves Chibon (&lt;a href=&quot;https://github.com/pypingou&quot;&gt;https://github.com/pypingou&lt;/a&gt;)</source>
          <target state="translated">Пьер-Ив Шибон ( &lt;a href=&quot;https://github.com/pypingou&quot;&gt;https://github.com/pypingou&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="2421f489b5b7558f687867e88178a61e4b70c292" translate="yes" xml:space="preserve">
          <source>PyPy</source>
          <target state="translated">PyPy</target>
        </trans-unit>
        <trans-unit id="0a0fb0a20c4b091ba5303a132f8d8efa896c840d" translate="yes" xml:space="preserve">
          <source>PyPy does not support stubs on the setter and deleter methods of properties. Additionally, it does not support spies on methods such as</source>
          <target state="translated">PyPy не поддерживает корешки на методах сеттера и удаления свойств.Кроме того,он не поддерживает шпионов на таких методах,как</target>
        </trans-unit>
        <trans-unit id="0101a74afd88d622354b05b2b6416e029264bbac" translate="yes" xml:space="preserve">
          <source>Python 3</source>
          <target state="translated">Питон 3</target>
        </trans-unit>
        <trans-unit id="931491d147f16484a7cb1f00770a1f7de6b881fd" translate="yes" xml:space="preserve">
          <source>Sets a maximum number of times the expectation should run. Does not affect the minimum.</source>
          <target state="translated">Устанавливает максимальное количество запусков ожидания.Не влияет на минимальное.</target>
        </trans-unit>
        <trans-unit id="97d6e8f8fead0ac644058c61a7041d07204d5751" translate="yes" xml:space="preserve">
          <source>Sets a minimum number of times the expectation should run and removes any maximum.</source>
          <target state="translated">Устанавливает минимальное количество запусков ожидания и удаляет любой максимум.</target>
        </trans-unit>
        <trans-unit id="6dd9bcb0055bcf1664633a10b837b22f137ec2ea" translate="yes" xml:space="preserve">
          <source>Some methods cannot be stubbed because it is impossible to call</source>
          <target state="translated">Некоторые методы не могут быть заглушены,потому что невозможно вызвать</target>
        </trans-unit>
        <trans-unit id="64372ff5848fdca40105ba3398265d435b361309" translate="yes" xml:space="preserve">
          <source>Sometimes you need a mock object which can be used to stub and expect anything. Chai exposes this through the</source>
          <target state="translated">Иногда вам нужен насмешливый объект,который можно использовать для того,чтобы заткнуть и ожидать чего угодно.Чай раскрывает это через</target>
        </trans-unit>
        <trans-unit id="922acd282cc0f3bb9e6dffb4c4b3c4fe33787051" translate="yes" xml:space="preserve">
          <source>Source:</source>
          <target state="translated">Источник:</target>
        </trans-unit>
        <trans-unit id="f800c47aedcfb6c78103ab37e05646e400a5fb94" translate="yes" xml:space="preserve">
          <source>Special thank you to the following people for contributions to Chai</source>
          <target state="translated">Отдельное спасибо следующим людям за вклад в Чай</target>
        </trans-unit>
        <trans-unit id="6337ef9a08d30c083265a28f2755fcfc6e5075db" translate="yes" xml:space="preserve">
          <source>Spies can be used just like any expectation.</source>
          <target state="translated">Шпионов можно использовать так же,как и любое ожидание.</target>
        </trans-unit>
        <trans-unit id="3f5b5b947f543bd614ac274f6ecbb98c191daa1a" translate="yes" xml:space="preserve">
          <source>Stub.__call__</source>
          <target state="translated">Звонок.</target>
        </trans-unit>
        <trans-unit id="532626609e018b03feb0f8b6873e8b52009d95ad" translate="yes" xml:space="preserve">
          <source>Stubbing</source>
          <target state="translated">Стуббинг</target>
        </trans-unit>
        <trans-unit id="017721b5c069939cc33729e5278a9b82d6573abd" translate="yes" xml:space="preserve">
          <source>Stubbing an unbound method will apply that stub to all future instances of that class.</source>
          <target state="translated">Не связанный метод будет применяться корешок ко всем будущим экземплярам этого класса.</target>
        </trans-unit>
        <trans-unit id="deefcc800cb4a114a041cc0ca7d258a65c235d23" translate="yes" xml:space="preserve">
          <source>Stubbing is used for situations when you want to assert that a method is never called, and is equivalent to</source>
          <target state="translated">Стуббирование используется для ситуаций,когда вы хотите утверждать,что метод никогда не вызывается,и эквивалентно</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Тестирование</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="d752a581ffbd4e3a4cd7cd68c4b24560192106c6" translate="yes" xml:space="preserve">
          <source>The arguments modifier supports several matching functions. For simplicity in covering the common cases, the</source>
          <target state="translated">Модификатор аргументов поддерживает несколько функций согласования.Для простоты в покрытии общих случаев,в</target>
        </trans-unit>
        <trans-unit id="fc2ec7ffc6999be8bd4fe8d6ce99a0d3f51a8aa9" translate="yes" xml:space="preserve">
          <source>The default comparator, uses standard Python equals operator</source>
          <target state="translated">Компаратор по умолчанию,использует стандартный Python равно оператор</target>
        </trans-unit>
        <trans-unit id="f0f4fef1697746ebf67e6f2b9a19de26c5ddaa5f" translate="yes" xml:space="preserve">
          <source>The expectation can be called at any time, independent of when it was defined. Can be combined with</source>
          <target state="translated">Ожидание может быть вызвано в любое время,независимо от того,когда оно было определено.Может быть объединено с</target>
        </trans-unit>
        <trans-unit id="3bc14d0816544e54a72050bf25d015613660a983" translate="yes" xml:space="preserve">
          <source>The following is an example of a simple test case which is mocking out a get method
on the</source>
          <target state="translated">Ниже приведен пример простого тестового случая,который высмеивает метод get на</target>
        </trans-unit>
        <trans-unit id="4466463c967aed861583991e16c79001997e6933" translate="yes" xml:space="preserve">
          <source>The simplest mock is to stub a method. This replaces the original method with a subclass of</source>
          <target state="translated">Самая простая инсценировка-это заткнуть метод.Это заменяет оригинальный метод на подкласс из</target>
        </trans-unit>
        <trans-unit id="8daa5c3e653a861992fc4f0920ce108a4f91824c" translate="yes" xml:space="preserve">
          <source>This software is licensed under the</source>
          <target state="translated">Это программное обеспечение лицензировано в соответствии с</target>
        </trans-unit>
        <trans-unit id="e2c2d137f86498c8f871823ce639de0305002f96" translate="yes" xml:space="preserve">
          <source>To install using</source>
          <target state="translated">Для установки с помощью</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">Правда</target>
        </trans-unit>
        <trans-unit id="5933f2f8b011d124ec92cea843f6535a1a397b33" translate="yes" xml:space="preserve">
          <source>Unbound methods can also be stubbed by attribute name instead of by reference.</source>
          <target state="translated">Несвязанные методы также могут быть заглушены именами атрибутов,а не ссылками.</target>
        </trans-unit>
        <trans-unit id="2500973932b12ab321a155961d9ea319310d453f" translate="yes" xml:space="preserve">
          <source>Unbound methods can only be stubbed by attribute in Python 3 as unbound methods do not have a reference to the class they&amp;rsquo;re defined in, and appear as module functions.</source>
          <target state="translated">Несвязанные методы могут быть заглушены только атрибутом в Python 3, поскольку несвязанные методы не имеют ссылки на класс, в котором они определены, и отображаются как функции модуля.</target>
        </trans-unit>
        <trans-unit id="96e366a69c3d2953901b5918a158d8e02fd82996" translate="yes" xml:space="preserve">
          <source>UnexpectedCall</source>
          <target state="translated">Неожиданный звонок</target>
        </trans-unit>
        <trans-unit id="75ce834291478f9efcbe3e6a82dfa4d68e9f5094" translate="yes" xml:space="preserve">
          <source>UnsupportedModifier</source>
          <target state="translated">UnsupportedModifier</target>
        </trans-unit>
        <trans-unit id="ce072f1895fd9e9032b296dc89a39594cc100cab" translate="yes" xml:space="preserve">
          <source>UnsupportedStub</source>
          <target state="translated">UnsupportedStub</target>
        </trans-unit>
        <trans-unit id="04097f1770abb96f299c52664b32c53eec0eae53" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/nose-devs/nose/&quot;&gt;nose&lt;/a&gt; to run the test suite.</source>
          <target state="translated">Используйте &lt;a href=&quot;https://github.com/nose-devs/nose/&quot;&gt;нос,&lt;/a&gt; чтобы запустить набор тестов.</target>
        </trans-unit>
        <trans-unit id="708f78f6fa52b6e00331c45019978384c374dc55" translate="yes" xml:space="preserve">
          <source>Using the class, you can directly refer to all 3 methods of the property. To refer to the getter you use the property directly, and for the methods you use its associated attribute name. You can stub in any order and it will still resolve correctly.</source>
          <target state="translated">Используя класс,можно напрямую обращаться ко всем 3 методам свойства.Для обращения к геттеру вы используете свойство напрямую,а для методов-ассоциированное с ним имя атрибута.Вы можете корешетить в любом порядке,и он все равно будет разрешаться корректно.</target>
        </trans-unit>
        <trans-unit id="55aad07b470f741632818901362d3192d8c4fc65" translate="yes" xml:space="preserve">
          <source>Using the development version</source>
          <target state="translated">Использование версии разработки</target>
        </trans-unit>
        <trans-unit id="9f49127025fb5873ad1bd738867c76e3725ffeaa" translate="yes" xml:space="preserve">
          <source>Version:</source>
          <target state="translated">Версия:</target>
        </trans-unit>
        <trans-unit id="93acff7457b73933810ead751674eb431fdefd27" translate="yes" xml:space="preserve">
          <source>When the expectation is run it will raise this exception. Accepts type or instance.</source>
          <target state="translated">Когда ожидание будет запущено,то это исключение увеличится.Принимает тип или экземпляр.</target>
        </trans-unit>
        <trans-unit id="da1328380877db4313f0218c09c2a70bce261124" translate="yes" xml:space="preserve">
          <source>Will remove the stub after the expectation has been met. This is useful in cases where you need to mock core methods such as</source>
          <target state="translated">Удалит корешок после того,как ожидание будет удовлетворено.Это полезно в тех случаях,когда необходимо издеваться над методами ядра,такими как</target>
        </trans-unit>
        <trans-unit id="fbfc23aabeac2b5f88c8032dbe3efeb9b665a38f" translate="yes" xml:space="preserve">
          <source>Without any arguments,</source>
          <target state="translated">Без всяких аргументов,</target>
        </trans-unit>
        <trans-unit id="ac582443a872d596ad58cba1f67e0829448c00a7" translate="yes" xml:space="preserve">
          <source>You can clone the repository by doing the following:</source>
          <target state="translated">Вы можете клонировать репозиторий,сделав следующее:</target>
        </trans-unit>
        <trans-unit id="a2446e8adb55aad3a8365475b78d120d7951192c" translate="yes" xml:space="preserve">
          <source>You can install Chai either via the Python Package Index (PyPI)
or from source.</source>
          <target state="translated">Вы можете установить Чай либо через Индекс пакетов Python (PyPI),либо из первоисточника.</target>
        </trans-unit>
        <trans-unit id="43c7743d208b62958f64ac929f35258d93f6fa52" translate="yes" xml:space="preserve">
          <source>You can install it by doing the following,:</source>
          <target state="translated">Вы можете установить его,сделав следующее:</target>
        </trans-unit>
        <trans-unit id="5ef22e52a7b4fa521b5bb4591d08e73e66b83559" translate="yes" xml:space="preserve">
          <source>[Spies Only] Called with a function argument. When the expectation passes a test, the function will be executed and passed the return value from the function as an argument.</source>
          <target state="translated">[Только шпионы] Вызывается с аргументом функции. Когда ожидание проходит проверку, функция будет выполнена и передаст значение, возвращаемое функцией, в качестве аргумента.</target>
        </trans-unit>
        <trans-unit id="28d4be6f7543b25d5cd9f4933db7bbbad2aac676" translate="yes" xml:space="preserve">
          <source>[instanceof, equals]</source>
          <target state="translated">[instanceof, равно]</target>
        </trans-unit>
        <trans-unit id="0eb099a357584b4f955cbda61225dc381eab39b3" translate="yes" xml:space="preserve">
          <source>__call__</source>
          <target state="translated">__вызов__</target>
        </trans-unit>
        <trans-unit id="257f005fbc81a82a298a580736f62ec957f8b6d7" translate="yes" xml:space="preserve">
          <source>__getattr__</source>
          <target state="translated">__getattr__</target>
        </trans-unit>
        <trans-unit id="1939f247b3ae06244a8d50fa7dabbcc975c6fc4c" translate="yes" xml:space="preserve">
          <source>__init__</source>
          <target state="translated">__в этом__</target>
        </trans-unit>
        <trans-unit id="069ef7757d5b44505f8451d3a43142b6899db0b0" translate="yes" xml:space="preserve">
          <source>__nonzero__</source>
          <target state="translated">__nonzero__</target>
        </trans-unit>
        <trans-unit id="bb358f5189ecdefa79473c7ae6f8e06eb5eebe91" translate="yes" xml:space="preserve">
          <source>all_of(comparator_list)</source>
          <target state="translated">all_of(список_компаратора)</target>
        </trans-unit>
        <trans-unit id="b0a40d103e8cf3fe9fd38d45fe0bfe0f7c3d1d81" translate="yes" xml:space="preserve">
          <source>almost_equals(float, places)</source>
          <target state="translated">almost_equals(float,places)</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="13ddb621ae7f35f27ca0db51a979ab23a209cb3c" translate="yes" xml:space="preserve">
          <source>and stub the method accordingly. There are cases where this is insufficient, such as module imports, special Python types, and when module attributes are imported from another (like</source>
          <target state="translated">и закрепить метод соответственно.Бывают случаи,когда этого недостаточно,например,импорт модулей,специальные типы Python,а также когда атрибуты модуля импортируются из другого (например</target>
        </trans-unit>
        <trans-unit id="2ccf03cf67db568f2489439444391c360995f7db" translate="yes" xml:space="preserve">
          <source>and use those for custom argument processing.</source>
          <target state="translated">и использовать их для индивидуальной обработки аргументов.</target>
        </trans-unit>
        <trans-unit id="6c7f43a3342fec78397ca155957aaa1f8221e31d" translate="yes" xml:space="preserve">
          <source>any_args</source>
          <target state="translated">any_args</target>
        </trans-unit>
        <trans-unit id="8e3c1ef1762e01ebdbc0f25aef28f78e39dcbad3" translate="yes" xml:space="preserve">
          <source>any_of(comparator_list)</source>
          <target state="translated">any_of(список_компаратора)</target>
        </trans-unit>
        <trans-unit id="1e5bbe0caabe9d2dffc209a94442d9535eb12e3a" translate="yes" xml:space="preserve">
          <source>any_order</source>
          <target state="translated">любой заказ</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">аргументы</target>
        </trans-unit>
        <trans-unit id="f57285b1fc2e263530528e4d2997a1412bdaf662" translate="yes" xml:space="preserve">
          <source>args(</source>
          <target state="translated">args(</target>
        </trans-unit>
        <trans-unit id="389e79fa4c304a578943e79050160f09ce8be28b" translate="yes" xml:space="preserve">
          <source>assert*</source>
          <target state="translated">заявлять*</target>
        </trans-unit>
        <trans-unit id="1eed2668ab41ab807ca181fb2255284af66a1706" translate="yes" xml:space="preserve">
          <source>assertNotEquals</source>
          <target state="translated">assertNotEquals</target>
        </trans-unit>
        <trans-unit id="82c28592831aad3fb9147b9c2d1a613a887289fc" translate="yes" xml:space="preserve">
          <source>assert_not_equals</source>
          <target state="translated">assert_not_equals</target>
        </trans-unit>
        <trans-unit id="8faa033768c76ab4bcdad872d6cbed6172111b2b" translate="yes" xml:space="preserve">
          <source>at_least(1)</source>
          <target state="translated">at_least(1)</target>
        </trans-unit>
        <trans-unit id="9e71761819b8e6a30f293eb3c753b56edb6dd1b2" translate="yes" xml:space="preserve">
          <source>at_least(int)</source>
          <target state="translated">at_least(int)</target>
        </trans-unit>
        <trans-unit id="1f8bd632c97bd396df5983a0fa9a946be323be1d" translate="yes" xml:space="preserve">
          <source>at_least_once</source>
          <target state="translated">at_least_once</target>
        </trans-unit>
        <trans-unit id="a57fcce708f90dfb5d33aae7f73c725928ca7195" translate="yes" xml:space="preserve">
          <source>at_least_once()</source>
          <target state="translated">at_least_once()</target>
        </trans-unit>
        <trans-unit id="1bad5158333d7ef8d9bb7ee752685c706033b12b" translate="yes" xml:space="preserve">
          <source>at_most(1)</source>
          <target state="translated">at_most(1)</target>
        </trans-unit>
        <trans-unit id="94e36f1d78da872c73875e89af477a8dc6e88c81" translate="yes" xml:space="preserve">
          <source>at_most(int)</source>
          <target state="translated">at_most(int)</target>
        </trans-unit>
        <trans-unit id="7ceb468a287c5fec15267df8df2381e0f2cf6ea1" translate="yes" xml:space="preserve">
          <source>at_most_once</source>
          <target state="translated">at_most_once</target>
        </trans-unit>
        <trans-unit id="b2cecfa48bb23de75266c7bede7eb813d6e26384" translate="yes" xml:space="preserve">
          <source>because it is represented as an unbound method, rather than CPython&amp;rsquo;s</source>
          <target state="translated">потому что он представлен как несвязанный метод, а не как CPython</target>
        </trans-unit>
        <trans-unit id="c7683a96530f64f60ed7321ab1a69891e523bca9" translate="yes" xml:space="preserve">
          <source>because the spy passes arguments and returns or raises the results of the stubbed function. You can make use of</source>
          <target state="translated">потому что шпион передает аргументы и возвращает или поднимает результат функции stubbed.Вы можете использовать</target>
        </trans-unit>
        <trans-unit id="e7b3a1d873dbf656cecbaa3c90ab46d757a5a1db" translate="yes" xml:space="preserve">
          <source>behaves as expected so it can store state as well. The dynamic function will act like a stub, raising</source>
          <target state="translated">ведет себя так,как и ожидалось,чтобы сохранить состояние.Динамическая функция будет действовать как корешок,поднимая</target>
        </trans-unit>
        <trans-unit id="9b86f0a8390355e056677824d81d78409ab61d02" translate="yes" xml:space="preserve">
          <source>call will return a new</source>
          <target state="translated">звонок вернёт новый</target>
        </trans-unit>
        <trans-unit id="305bf9b44b1d93d4baaefe8364ddc3366db97a2b" translate="yes" xml:space="preserve">
          <source>calls will re-use this stub, and the stub is responsible for re-installing the original reference when</source>
          <target state="translated">вызовы будут повторно использовать этот корешок,и корешок отвечает за переустановку исходной ссылки,когда</target>
        </trans-unit>
        <trans-unit id="3abe90db5cf547d284ecd7a7d4f9e8a2e2e4319b" translate="yes" xml:space="preserve">
          <source>can also be referenced as</source>
          <target state="translated">также может обозначаться как</target>
        </trans-unit>
        <trans-unit id="418c68797caeafc6524ac3cb6592a80ae22945b2" translate="yes" xml:space="preserve">
          <source>chai.Expectation</source>
          <target state="translated">ожидание</target>
        </trans-unit>
        <trans-unit id="b6b5afb5dd475a979860d7c7ef6a727d8f2af5d4" translate="yes" xml:space="preserve">
          <source>chai.Mock</source>
          <target state="translated">Чай.Инсценировка</target>
        </trans-unit>
        <trans-unit id="5c23c31cee6490df5665070eb795a68aff6be228" translate="yes" xml:space="preserve">
          <source>chai.Stub</source>
          <target state="translated">корешок</target>
        </trans-unit>
        <trans-unit id="723ac5837d74134a8bd6dc80b7746cef21c401b4" translate="yes" xml:space="preserve">
          <source>chai.comparators</source>
          <target state="translated">chai.comparators</target>
        </trans-unit>
        <trans-unit id="83344978f7d3e22dd235546a648037a1a70fa642" translate="yes" xml:space="preserve">
          <source>class for convenience (and by extension, a subclass&amp;rsquo; module).</source>
          <target state="translated">class для удобства (и, как следствие, модуль подкласса).</target>
        </trans-unit>
        <trans-unit id="768b72366b0182e510e9425d7d85337debefe20c" translate="yes" xml:space="preserve">
          <source>class, itself a subclass of</source>
          <target state="translated">класс,сам по себе подкласс</target>
        </trans-unit>
        <trans-unit id="0cc7102c94def662d043ec4241da06fc9926f886" translate="yes" xml:space="preserve">
          <source>class. In that situation, it is best to mock out the entire module (see below).</source>
          <target state="translated">Класс.В такой ситуации лучше всего высмеять весь модуль (см.ниже).</target>
        </trans-unit>
        <trans-unit id="2f8d7291bcc3fd988171adc610547a5a8ead0a86" translate="yes" xml:space="preserve">
          <source>comparator to produce side effects, be aware that it may be called more than once even if the expectation you&amp;rsquo;re defining only occurs once. This is due to the way</source>
          <target state="translated">компаратор для создания побочных эффектов, имейте в виду, что он может вызываться более одного раза, даже если ожидание, которое вы определяете, выполняется только один раз. Это связано с тем, как</target>
        </trans-unit>
        <trans-unit id="c9865213e116865ef91aa18a73152e6556cc4e3e" translate="yes" xml:space="preserve">
          <source>comparator, else defaults to the</source>
          <target state="translated">компаратор,еще значения по умолчанию для</target>
        </trans-unit>
        <trans-unit id="a8c00162855e634495a8423c4eeeeaf1a51fc82b" translate="yes" xml:space="preserve">
          <source>comparator.</source>
          <target state="translated">компаратор.</target>
        </trans-unit>
        <trans-unit id="5ac591f7a4da84e633b65211d6739ac2477ecc7d" translate="yes" xml:space="preserve">
          <source>comparator. Users can create subclasses of</source>
          <target state="translated">компаратор.Пользователи могут создавать подклассы</target>
        </trans-unit>
        <trans-unit id="255a762c36cdae2fe950e67e8b8a4efb260e7540" translate="yes" xml:space="preserve">
          <source>container</source>
          <target state="translated">контейнер</target>
        </trans-unit>
        <trans-unit id="041fdb20bc4e53f9b2967bbff319dfdc59c901d0" translate="yes" xml:space="preserve">
          <source>contains(object)</source>
          <target state="translated">содержит (объект)</target>
        </trans-unit>
        <trans-unit id="52b7e7909335de6b2becb84bec951aadb8ca97e2" translate="yes" xml:space="preserve">
          <source>custom.py</source>
          <target state="translated">таможенный пистолет</target>
        </trans-unit>
        <trans-unit id="53910fb46a116dbf1909866b879783e783b61217" translate="yes" xml:space="preserve">
          <source>datetime.datetime</source>
          <target state="translated">дата.время.дата</target>
        </trans-unit>
        <trans-unit id="0a825ee063f3c0c08ab0043b6466868311de5081" translate="yes" xml:space="preserve">
          <source>deque</source>
          <target state="translated">deque</target>
        </trans-unit>
        <trans-unit id="585970d412c17a89ef439a463d5ebef9eb1f9311" translate="yes" xml:space="preserve">
          <source>digits beyond the decimal point.</source>
          <target state="translated">цифры за десятичной точкой.</target>
        </trans-unit>
        <trans-unit id="f0eb7b84c05dad54bcc9b4292b9243991e7dbe71" translate="yes" xml:space="preserve">
          <source>directly because</source>
          <target state="translated">непосредственно потому что</target>
        </trans-unit>
        <trans-unit id="80b2f559a14748525776894e12e1216b49b5b558" translate="yes" xml:space="preserve">
          <source>equals</source>
          <target state="translated">равняется</target>
        </trans-unit>
        <trans-unit id="a3d29989b370808d87f23497857485d4d11da413" translate="yes" xml:space="preserve">
          <source>equals(object)</source>
          <target state="translated">равноценный</target>
        </trans-unit>
        <trans-unit id="53104b63d8180d11a51f46bb408c53709d65ea66" translate="yes" xml:space="preserve">
          <source>everywhere that you want to run a test.  The references are loaded into the subclass&amp;rsquo; module during</source>
          <target state="translated">везде, где вы хотите запустить тест. Ссылки загружаются в модуль подкласса во время</target>
        </trans-unit>
        <trans-unit id="ff93c451ac21b50761eb1ee0b9fa15fa2c159ada" translate="yes" xml:space="preserve">
          <source>expect</source>
          <target state="translated">ожидайте</target>
        </trans-unit>
        <trans-unit id="cfd04bf3c98d670cb2770d954b0486e6f6e8995b" translate="yes" xml:space="preserve">
          <source>expect(target).times(0)</source>
          <target state="translated">expected(target).times(0)</target>
        </trans-unit>
        <trans-unit id="1e853a30859991eab8f040c4fe4d0d46bf88b85b" translate="yes" xml:space="preserve">
          <source>file in the top distribution directory for the full license text.</source>
          <target state="translated">файл в верхнем каталоге дистрибутива для полного текста лицензии.</target>
        </trans-unit>
        <trans-unit id="99fdb3623cf5c6ad0283ca5c096018dd2f2ff5ad" translate="yes" xml:space="preserve">
          <source>func</source>
          <target state="translated">функционал</target>
        </trans-unit>
        <trans-unit id="20af3b045ab37e07afeef706fa5b58c4db95708a" translate="yes" xml:space="preserve">
          <source>func(callable)</source>
          <target state="translated">функциональный(вызываемый)</target>
        </trans-unit>
        <trans-unit id="cac02ec1a476ed80dfd51b02515cb2a3bd581ae2" translate="yes" xml:space="preserve">
          <source>function.</source>
          <target state="translated">Работать.</target>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="translated">получить</target>
        </trans-unit>
        <trans-unit id="c7812c56225257705652abb417797151861a2026" translate="yes" xml:space="preserve">
          <source>getattr</source>
          <target state="translated">getattr</target>
        </trans-unit>
        <trans-unit id="67c8869f3cb3efbf22383c69b61c91f0547265bb" translate="yes" xml:space="preserve">
          <source>handles the common case of a</source>
          <target state="translated">занимается обычным делом</target>
        </trans-unit>
        <trans-unit id="012594037dd4805bfc5d03a1ac4aa4d499ccd6d5" translate="yes" xml:space="preserve">
          <source>if no expectation is defined.</source>
          <target state="translated">если не определено никаких ожиданий.</target>
        </trans-unit>
        <trans-unit id="8ccbde832c3e0f90c55b72c598844679fff2167d" translate="yes" xml:space="preserve">
          <source>ignore</source>
          <target state="translated">игнорировать</target>
        </trans-unit>
        <trans-unit id="0aabfe2e1e584c7746cbed3c8e4626c68d1cb98e" translate="yes" xml:space="preserve">
          <source>implementation, can also support nested attributes.</source>
          <target state="translated">реализации,может также поддерживать вложенные атрибуты.</target>
        </trans-unit>
        <trans-unit id="3463d9151084872a4ee1a4c683ed6541fd3e09c3" translate="yes" xml:space="preserve">
          <source>import in</source>
          <target state="translated">импорт в страну</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">на сайте</target>
        </trans-unit>
        <trans-unit id="eb83a065711dee9cc6b61d6a2783305d1ba949ff" translate="yes" xml:space="preserve">
          <source>in_arg(in_list)</source>
          <target state="translated">in_arg(in_list)</target>
        </trans-unit>
        <trans-unit id="d41ead2b91d860ec9ae1f07e5a96091f04720c52" translate="yes" xml:space="preserve">
          <source>in_list</source>
          <target state="translated">in_list</target>
        </trans-unit>
        <trans-unit id="b47f363e2b430c0647f14deea3eced9b0ef300ce" translate="yes" xml:space="preserve">
          <source>is</source>
          <target state="translated">is</target>
        </trans-unit>
        <trans-unit id="e2c3d91ba4b38b4aac60b012869f3adbef7d1627" translate="yes" xml:space="preserve">
          <source>is a bound method and provides all of the context we need to refer back to</source>
          <target state="translated">является связанным методом и предоставляет весь контекст,на который мы должны ссылаться.</target>
        </trans-unit>
        <trans-unit id="34da87ed63b1213b7bdf7ce44013e73e6501a2ef" translate="yes" xml:space="preserve">
          <source>is available Chai will use that, else it will fall back to</source>
          <target state="translated">доступен Чай будет использовать это,в противном случае он вернется к</target>
        </trans-unit>
        <trans-unit id="d2a97d06ced2fffd0e8593c2c3299e9b327bd455" translate="yes" xml:space="preserve">
          <source>is necessary. The arguments and edge cases regarding what can and cannot have expectations applied are identical to stubs. The</source>
          <target state="translated">необходимо.Аргументы и крайние случаи,касающиеся того,что может и что не может иметь ожиданий,идентичны шлейфам.</target>
        </trans-unit>
        <trans-unit id="47d26f8f256a069c14e4ca93334cc476d0bea882" translate="yes" xml:space="preserve">
          <source>is run.</source>
          <target state="translated">управляется.</target>
        </trans-unit>
        <trans-unit id="c1e8593ba54ccaa36ea177aeba99accd1ca07866" translate="yes" xml:space="preserve">
          <source>is_a</source>
          <target state="translated">есть</target>
        </trans-unit>
        <trans-unit id="46f7ce43b4797ffe4dd5e65205921c4f7fda3fec" translate="yes" xml:space="preserve">
          <source>is_a(type)</source>
          <target state="translated">is_a(тип)</target>
        </trans-unit>
        <trans-unit id="906660fa3228b9009745b94e3d1c827ceac88fd6" translate="yes" xml:space="preserve">
          <source>is_arg(object)</source>
          <target state="translated">is_arg(объект)</target>
        </trans-unit>
        <trans-unit id="6cf96d2bf3095343036d0ffe445c969fbd0f4a03" translate="yes" xml:space="preserve">
          <source>isinstance</source>
          <target state="translated">isinstance</target>
        </trans-unit>
        <trans-unit id="a81d8a6f530dfe8beab11576a45b3deb4cc0b55b" translate="yes" xml:space="preserve">
          <source>length(len)</source>
          <target state="translated">длина(лен)</target>
        </trans-unit>
        <trans-unit id="1ff0113d9fb9258bf78791d1e32552460994d301" translate="yes" xml:space="preserve">
          <source>like(container)</source>
          <target state="translated">аналогично (контейнер)</target>
        </trans-unit>
        <trans-unit id="3f09da4d2380962353d739687aa1281238093256" translate="yes" xml:space="preserve">
          <source>loads in all assertions, comparators and mocking methods into the module in which a</source>
          <target state="translated">загружает во все утверждения,компараторы и методы издевательства в модуль,в котором a</target>
        </trans-unit>
        <trans-unit id="0e8a2937fa672d40a9db2757f60496dafc74e4f5" translate="yes" xml:space="preserve">
          <source>matches(pattern)</source>
          <target state="translated">совпадения</target>
        </trans-unit>
        <trans-unit id="9d326ec502407e4598d3dbb7f9cdbd973cedf627" translate="yes" xml:space="preserve">
          <source>method
cannot be itself stubbed.</source>
          <target state="translated">метод сам по себе не может быть заглушен.</target>
        </trans-unit>
        <trans-unit id="34526bf7930b131b3a92b851a6057b2be66c6c86" translate="yes" xml:space="preserve">
          <source>method which can be called in one of two ways.</source>
          <target state="translated">метод,который можно вызвать одним из двух способов.</target>
        </trans-unit>
        <trans-unit id="5415f0a81e4e89ad66c37c2a10091e3ce70ac699" translate="yes" xml:space="preserve">
          <source>method, which can also act in place of</source>
          <target state="translated">метод,который также может действовать вместо</target>
        </trans-unit>
        <trans-unit id="76c6e80c3e6dbed9a6651f1a30f28feb17b3b9b5" translate="yes" xml:space="preserve">
          <source>method-wrapper</source>
          <target state="translated">методика-обёртка</target>
        </trans-unit>
        <trans-unit id="9cbfc6ac1fe1587e64d521c0c739aa8d0b0ce3b5" translate="yes" xml:space="preserve">
          <source>methods handle</source>
          <target state="translated">управление методами</target>
        </trans-unit>
        <trans-unit id="193d687f7f306a8b7675b59e708c30decc68021d" translate="yes" xml:space="preserve">
          <source>methods to lower-case with undersores. For example,</source>
          <target state="translated">методы для нижних слоев с недропользованием.Например,</target>
        </trans-unit>
        <trans-unit id="475e81e79c7880f9b5caa35bec50279c459ad2f9" translate="yes" xml:space="preserve">
          <source>mock</source>
          <target state="translated">поддельный</target>
        </trans-unit>
        <trans-unit id="060df90d2c4b25e721b155c51bd1a87dbc20f556" translate="yes" xml:space="preserve">
          <source>modifier assumes an equals test for instances and a logical or of</source>
          <target state="translated">модификатор предполагает равный тест для экземпляров и логический или из</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">имя</target>
        </trans-unit>
        <trans-unit id="bc1e693db6446c2372a294574d7406564c14fdf0" translate="yes" xml:space="preserve">
          <source>not_of(comparator)</source>
          <target state="translated">not_of(компаратор)</target>
        </trans-unit>
        <trans-unit id="9b5c0b859faba061dd60fd8070fce74fcee29d0b" translate="yes" xml:space="preserve">
          <source>obj</source>
          <target state="translated">объект</target>
        </trans-unit>
        <trans-unit id="1e2cbd16dfebc2e7ea0f4e531203b0f23e72f9e8" translate="yes" xml:space="preserve">
          <source>obj.get</source>
          <target state="translated">получить</target>
        </trans-unit>
        <trans-unit id="5e8295157b594cd953929ad9f4810c6325ad21d6" translate="yes" xml:space="preserve">
          <source>object by using the</source>
          <target state="translated">с помощью</target>
        </trans-unit>
        <trans-unit id="5e7d5c466e7b7e9e07657bafe59eb32651f80c48" translate="yes" xml:space="preserve">
          <source>object that can be used for any purpose. If called with arguments, it behaves like</source>
          <target state="translated">объект,который может быть использован для любых целей.Если он вызывается с аргументами,то ведет себя как</target>
        </trans-unit>
        <trans-unit id="d681dee84e20b66ddde2b4b14ddc71cec95bb4a8" translate="yes" xml:space="preserve">
          <source>object which can then be used to modify the expectation. Without any modifiers, an expectation will expect at least one call with any arguments and return None.</source>
          <target state="translated">объект,который затем может быть использован для модификации ожидания.Без модификаторов ожидание будет ожидать по крайней мере один вызов с любыми аргументами и возвращать None.</target>
        </trans-unit>
        <trans-unit id="b3292df5d10c68ddcca645d57afd1ded1f0f717b" translate="yes" xml:space="preserve">
          <source>objects as arguments by mocking the</source>
          <target state="translated">объекты в качестве аргументов,высмеивая</target>
        </trans-unit>
        <trans-unit id="1fd04b3b6fcf73f165440ff2d417bfb2ea268413" translate="yes" xml:space="preserve">
          <source>objects implement</source>
          <target state="translated">объекты реализации</target>
        </trans-unit>
        <trans-unit id="b2c106126eb50a57809c21ea5585b3875eef5643" translate="yes" xml:space="preserve">
          <source>objects, because of the</source>
          <target state="translated">объекты,из-за</target>
        </trans-unit>
        <trans-unit id="f5476271bdfb30d07631a2c7fad3be3d40a415b3" translate="yes" xml:space="preserve">
          <source>on every expectation when a new expectation is defined. The expectation will be immediately closed if it has already been satisfied when a new expectation is created.</source>
          <target state="translated">на каждое ожидание,когда определено новое.Ожидание будет немедленно закрыто,если оно уже было удовлетворено при создании нового.</target>
        </trans-unit>
        <trans-unit id="b55b8143f8ba405386a314e762e1cf75efae3969" translate="yes" xml:space="preserve">
          <source>on the object, typically because it&amp;rsquo;s a C extension. A good example of this is the</source>
          <target state="translated">на объекте, обычно потому, что это расширение C. Хорошим примером этого является</target>
        </trans-unit>
        <trans-unit id="1863835675e3970e15e5c22411ef60824eb55591" translate="yes" xml:space="preserve">
          <source>once</source>
          <target state="translated">однажды</target>
        </trans-unit>
        <trans-unit id="5fc7e38bffe00ca46add89145464a2eaf759d5c2" translate="yes" xml:space="preserve">
          <source>open</source>
          <target state="translated">открытый</target>
        </trans-unit>
        <trans-unit id="999a3419d9959d3c39b11dcc67d79c7888b4b765" translate="yes" xml:space="preserve">
          <source>os</source>
          <target state="translated">os</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">пищать</target>
        </trans-unit>
        <trans-unit id="324d2c4f8c42abc418bde82c7fea830b4d70309c" translate="yes" xml:space="preserve">
          <source>places</source>
          <target state="translated">места</target>
        </trans-unit>
        <trans-unit id="bfdba57c2ea525d68cd766e6ddc87ae634e2c0ff" translate="yes" xml:space="preserve">
          <source>posix</source>
          <target state="translated">позиция</target>
        </trans-unit>
        <trans-unit id="7022f3a6cd81e46ec69b1675f3bc3e18a72264a1" translate="yes" xml:space="preserve">
          <source>processes the expectations and determines when to process arguments through an expectation.</source>
          <target state="translated">обрабатывает ожидания и определяет,когда обрабатывать аргументы через ожидания.</target>
        </trans-unit>
        <trans-unit id="d0449e86077449843777d1958aff83cf086dbcba" translate="yes" xml:space="preserve">
          <source>properties</source>
          <target state="translated">свойства</target>
        </trans-unit>
        <trans-unit id="29b86efb7571ffaf75d4f293ca0c9b37b0f02193" translate="yes" xml:space="preserve">
          <source>python, mocking, testing, unittest, unittest2</source>
          <target state="translated">питон,издевательство,тестирование,юниттест,юниттест2</target>
        </trans-unit>
        <trans-unit id="657db1e0dffa000c9cdad10f4bed2f8bfb0b5a09" translate="yes" xml:space="preserve">
          <source>raise</source>
          <target state="translated">собирать</target>
        </trans-unit>
        <trans-unit id="c490c8219d107f6d4f34c41c674ab57153662afb" translate="yes" xml:space="preserve">
          <source>raises</source>
          <target state="translated">повышения</target>
        </trans-unit>
        <trans-unit id="505550731b8f00205fd2e94c4c976bf319a3cc78" translate="yes" xml:space="preserve">
          <source>raises(exception)</source>
          <target state="translated">повышения (исключения)</target>
        </trans-unit>
        <trans-unit id="c387c982a132d05cbd5f88840aef2c8157740049" translate="yes" xml:space="preserve">
          <source>re</source>
          <target state="translated">re</target>
        </trans-unit>
        <trans-unit id="414e681ebabcd2f23de1f32468992b9c81c5f909" translate="yes" xml:space="preserve">
          <source>returns</source>
          <target state="translated">отчёты</target>
        </trans-unit>
        <trans-unit id="bbfcf487b7090c701dc2c5435ba1709547e2dc0d" translate="yes" xml:space="preserve">
          <source>returns(object)</source>
          <target state="translated">возвращает(-ет)</target>
        </trans-unit>
        <trans-unit id="bbe40600eb760da3425fdce3a0511f835e863a72" translate="yes" xml:space="preserve">
          <source>rules apply.</source>
          <target state="translated">применяются правила.</target>
        </trans-unit>
        <trans-unit id="023b2e565108c33ac6ca8f009d90477758e199ef" translate="yes" xml:space="preserve">
          <source>self.</source>
          <target state="translated">себя.</target>
        </trans-unit>
        <trans-unit id="ab7a284a17ead6b030395cb2f065e68057159418" translate="yes" xml:space="preserve">
          <source>setUp</source>
          <target state="translated">setUp</target>
        </trans-unit>
        <trans-unit id="a55d5971f3e28694c382626a5e5c289df3746dd0" translate="yes" xml:space="preserve">
          <source>setattr</source>
          <target state="translated">сетаттр</target>
        </trans-unit>
        <trans-unit id="554ada990abfa591d5d06184568a94f65420b2e6" translate="yes" xml:space="preserve">
          <source>side_effect</source>
          <target state="translated">побочный эффект</target>
        </trans-unit>
        <trans-unit id="4dcc2c52e14bc5b4cbab314c5a8328f212521510" translate="yes" xml:space="preserve">
          <source>side_effect(callable, *args, **kwargs)</source>
          <target state="translated">side_effect(callable,*args,**kwargs)</target>
        </trans-unit>
        <trans-unit id="18f00ef5402aff72dc4257e5f794fc932c527653" translate="yes" xml:space="preserve">
          <source>spy_return(callable)</source>
          <target state="translated">spy_return(callable)</target>
        </trans-unit>
        <trans-unit id="58801e3391955d7ee7d51ba293351c3176f5b682" translate="yes" xml:space="preserve">
          <source>stub</source>
          <target state="translated">корешок</target>
        </trans-unit>
        <trans-unit id="ac7413f67ec8bbb31961b3b3a12cecb806d43d67" translate="yes" xml:space="preserve">
          <source>subclass is declared. This is done to cut down on the verbosity of typing</source>
          <target state="translated">подкласс объявлен.Это сделано для того,чтобы уменьшить глаголистость набора.</target>
        </trans-unit>
        <trans-unit id="574bc4f3593073849fdd9ed8e05959e704a5d6e5" translate="yes" xml:space="preserve">
          <source>teardown</source>
          <target state="translated">тирдаун</target>
        </trans-unit>
        <trans-unit id="84fdaeff0f2751decdf11a984c8db63012b65fb3" translate="yes" xml:space="preserve">
          <source>test for types. All rules that apply to positional arguments also apply to keyword arguments.</source>
          <target state="translated">тест для типов.Все правила,которые применяются к позиционным аргументам,также применяются к аргументам по ключевым словам.</target>
        </trans-unit>
        <trans-unit id="a96f105190446dc95c077dd733e7e255286c75d5" translate="yes" xml:space="preserve">
          <source>times(1)</source>
          <target state="translated">сроки(1)</target>
        </trans-unit>
        <trans-unit id="ceaa3eab360fb303c6f1d714a7ca088e4dc430e1" translate="yes" xml:space="preserve">
          <source>times(int)</source>
          <target state="translated">сроки</target>
        </trans-unit>
        <trans-unit id="f66fe49bb9161ca2a1dd5bbb8ae7f1c36d0264e2" translate="yes" xml:space="preserve">
          <source>to force it to respond to all matching calls throughout the test.</source>
          <target state="translated">чтобы заставить его отвечать на все совпадающие вызовы в течение всего теста.</target>
        </trans-unit>
        <trans-unit id="28344d9ed34a303ae3e123eb09c4693c691008ca" translate="yes" xml:space="preserve">
          <source>to inject code just before the spied-on function is executed, however the return value will be ignored. This behavior is especially useful when testing race conditions. Additionally, there are a few types of stubs which are not (currently) supported by spies:</source>
          <target state="translated">вводить код непосредственно перед выполнением spied-on функции,однако возвращаемое значение будет проигнорировано.Такое поведение особенно полезно при тестировании условий гонки.Кроме того,существует несколько типов корешков,которые (в настоящее время)не поддерживаются шпионами:</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">вводить</target>
        </trans-unit>
        <trans-unit id="5dfc5178277dcc74bbd7420fce338518c26a8ed5" translate="yes" xml:space="preserve">
          <source>unbound methods</source>
          <target state="translated">несвязанные методы</target>
        </trans-unit>
        <trans-unit id="94e060874450b5ea724bb6ce5ca7be4f6a73416b" translate="yes" xml:space="preserve">
          <source>unittest</source>
          <target state="translated">юниттест</target>
        </trans-unit>
        <trans-unit id="930830fc5791b65eb398b914085669fdc221f994" translate="yes" xml:space="preserve">
          <source>unittest.TestCase</source>
          <target state="translated">юнит-тест.TestCase</target>
        </trans-unit>
        <trans-unit id="4e72a99120d1a65313ecc32601cac81304baee76" translate="yes" xml:space="preserve">
          <source>unittest2</source>
          <target state="translated">юниттест2</target>
        </trans-unit>
        <trans-unit id="c2d3f28ca9e8d6733360c4d9d00e81f3d6547632" translate="yes" xml:space="preserve">
          <source>var(name)</source>
          <target state="translated">вариатор (название)</target>
        </trans-unit>
        <trans-unit id="39468015be923cf1117a0b3bff4a5ca6ffe5885b" translate="yes" xml:space="preserve">
          <source>var(name).value</source>
          <target state="translated">var(name).value</target>
        </trans-unit>
        <trans-unit id="116de48f28b9405808ce7b6451393a9a666220ac" translate="yes" xml:space="preserve">
          <source>will be raised and you can use the verbose reference instead.</source>
          <target state="translated">будет поднята,и вы можете использовать многословную ссылку вместо нее.</target>
        </trans-unit>
        <trans-unit id="9def75749c22ed56efbf9c23eb83088d8fbd2b0d" translate="yes" xml:space="preserve">
          <source>will return a</source>
          <target state="translated">вернет</target>
        </trans-unit>
        <trans-unit id="bc2292dd697a7c405e4abbcb41740d9fc5dd01ce" translate="yes" xml:space="preserve">
          <source>with a</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
