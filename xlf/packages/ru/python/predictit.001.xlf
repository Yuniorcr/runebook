<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/predictit/">
    <body>
      <group id="predictit">
        <trans-unit id="22d812af71f1004dd37330a51d1fb0f3a795eb0a" translate="yes" xml:space="preserve">
          <source>Example of compare_models function</source>
          <target state="translated">Пример функции compare_models</target>
        </trans-unit>
        <trans-unit id="4bcebfbde92928ed6376b96cfea44e4e016e000d" translate="yes" xml:space="preserve">
          <source>Example of config variable optimization</source>
          <target state="translated">Пример оптимизации конфигурационных переменных</target>
        </trans-unit>
        <trans-unit id="a96b889de717ac98ceaffe8d995350cf5f106842" translate="yes" xml:space="preserve">
          <source>Example of predict_multiple function</source>
          <target state="translated">Пример функции preict_multiple</target>
        </trans-unit>
        <trans-unit id="ac239e4325f8fd99c6dbbea18171257ce66172d0" translate="yes" xml:space="preserve">
          <source>Example of using library as a pro with deeper editting config</source>
          <target state="translated">Пример использования библиотеки в качестве профи с более глубокой настройкой редактирования</target>
        </trans-unit>
        <trans-unit id="0d9db8b7e0f1ba7d7c98a9b4246f1822209020cc" translate="yes" xml:space="preserve">
          <source>Explore config</source>
          <target state="translated">Просмотреть конфигурацию</target>
        </trans-unit>
        <trans-unit id="75ebc687f6257857cd417c34b00fa35ec1f0c809" translate="yes" xml:space="preserve">
          <source>GUI</source>
          <target state="translated">ГРАФИЧЕСКИЙ ИНТЕРФЕЙС ПОЛЬЗОВАТЕЛЯ</target>
        </trans-unit>
        <trans-unit id="99f83e74a2846ec4235aef0b685f0c2454e1b073" translate="yes" xml:space="preserve">
          <source>How to</source>
          <target state="translated">Как</target>
        </trans-unit>
        <trans-unit id="f2f186c5d19d8bad15fcd14e0575d0a709f8e8f7" translate="yes" xml:space="preserve">
          <source>Hyperparameters tuning</source>
          <target state="translated">Настройка гиперпараметров</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="878016ccff33562a5771b5506e230d10c397f753" translate="yes" xml:space="preserve">
          <source>It is possible to use basic GUI. But only with CSV data source.
Just run &lt;code&gt;gui_start.py&lt;/code&gt; if you have downloaded software or call &lt;code&gt;predictit.gui_start.run_gui()&lt;/code&gt; if you are importing via PyPI.</source>
          <target state="translated">It is possible to use basic GUI. But only with CSV data source. Just run &lt;code&gt;gui_start.py&lt;/code&gt; if you have downloaded software or call &lt;code&gt;predictit.gui_start.run_gui()&lt;/code&gt; if you are importing via PyPI.</target>
        </trans-unit>
        <trans-unit id="6a581b3129318e3a4e8478bb3652fed7b63223e1" translate="yes" xml:space="preserve">
          <source>Library contain model hyperparameters optimization as well as option variable optimization. That means, that library can find optimal preprocessing (smoothing, dropping non correlated columns, standardization) and on top of that it can find optimal models inner parameters such as number of neuron layers.</source>
          <target state="translated">Библиотека содержит оптимизацию гиперпараметров модели,а также оптимизацию опциональных переменных.Это означает,что библиотека может найти оптимальную предварительную обработку (сглаживание,сброс некорреляционных столбцов,стандартизацию)и,кроме того,она может найти оптимальные внутренние параметры модели,такие как количество слоев нейронов.</target>
        </trans-unit>
        <trans-unit id="9ae6b448521e9b51b37b6bc1a3b07f42fdf04aff" translate="yes" xml:space="preserve">
          <source>Library/framework for making predictions.</source>
          <target state="translated">Библиотека/рамка для составления прогнозов.</target>
        </trans-unit>
        <trans-unit id="f0b53726edcb497079dbac98c7a70a247861c745" translate="yes" xml:space="preserve">
          <source>Library/framework for making predictions. Choose best of 20 models (ARIMA, regressions, LSTM...) from libraries like statsmodels, scikit-learn, tensorflow and some own models. There are hundreds of customizable options (it's not necessary of course) as well as some config presets.</source>
          <target state="translated">Библиотека/рамка для составления прогнозов.Выберите лучшие из 20 моделей (ARIMA,регрессии,LSTM...)из таких библиотек,как statsmodels,scikit-learn,tensorflow и некоторые собственные модели.Есть сотни настраиваемых опций (это,конечно,не обязательно),а также некоторые конфигурационные предустановки.</target>
        </trans-unit>
        <trans-unit id="9dc84baf1aea74e4534e2aec1b9067407a890a73" translate="yes" xml:space="preserve">
          <source>Most common output is plotly interactive graph, numpy array of results or deploying to database.</source>
          <target state="translated">Наиболее распространенный вывод-графический интерактивный график,нумерованный массив результатов или развертывание в базе данных.</target>
        </trans-unit>
        <trans-unit id="b2ab93b4f92d716dd3c1cdeccf59e6e02d9f9d13" translate="yes" xml:space="preserve">
          <source>Official readthedocs documentation</source>
          <target state="translated">Официальная документация readthedocs</target>
        </trans-unit>
        <trans-unit id="9b475da551c9ad8d92914e54cb2fe8e3d9edcd23" translate="yes" xml:space="preserve">
          <source>Oficial repo and documentation links</source>
          <target state="translated">Официальные ссылки на репо и документацию</target>
        </trans-unit>
        <trans-unit id="c6b39a6c7570f9e1adb2d5918742dda39da2454d" translate="yes" xml:space="preserve">
          <source>Open &lt;code&gt;configuration.py&lt;/code&gt; (only script you need to edit (very simple)), do the setup. Mainly used_function and data or data_source and path. Then just run &lt;code&gt;main.py&lt;/code&gt;.</source>
          <target state="translated">Open &lt;code&gt;configuration.py&lt;/code&gt; (only script you need to edit (very simple)), do the setup. Mainly used_function and data or data_source and path. Then just run &lt;code&gt;main.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Выход</target>
        </trans-unit>
        <trans-unit id="cee6dd94ae7ac1b1790410298e7ed17d1511cd64" translate="yes" xml:space="preserve">
          <source>Python &amp;gt;=3.6. Python 2 is not supported. Install just with</source>
          <target state="translated">Python &amp;gt;=3.6. Python 2 is not supported. Install just with</target>
        </trans-unit>
        <trans-unit id="6aead5aabc034a8b61c8a0d2c9949b4278d0e605" translate="yes" xml:space="preserve">
          <source>Repo on github</source>
          <target state="translated">Повторять на вершине</target>
        </trans-unit>
        <trans-unit id="2b50febd7d16d9269a9d028908742554ba1e8c7b" translate="yes" xml:space="preserve">
          <source>Return type of main predict function depends on &lt;code&gt;configation.py&lt;/code&gt;. It can return best prediction as array or all predictions as dataframe. Interactive html plot is also created.</source>
          <target state="translated">Return type of main predict function depends on &lt;code&gt;configation.py&lt;/code&gt; . It can return best prediction as array or all predictions as dataframe. Interactive html plot is also created.</target>
        </trans-unit>
        <trans-unit id="e184e93aaca1ee16c10b3f379151d3900729ca28" translate="yes" xml:space="preserve">
          <source>Run code below in terminal in predictit folder.
Use &lt;code&gt;python main.py --help&lt;/code&gt; for more parameters info.</source>
          <target state="translated">Run code below in terminal in predictit folder. Use &lt;code&gt;python main.py --help&lt;/code&gt; for more parameters info.</target>
        </trans-unit>
        <trans-unit id="1b23394e905a0f7167149e1a1a4c191f0f8a7267" translate="yes" xml:space="preserve">
          <source>Simple example of using &lt;code&gt;main.py&lt;/code&gt; as a script</source>
          <target state="translated">Simple example of using &lt;code&gt;main.py&lt;/code&gt; as a script</target>
        </trans-unit>
        <trans-unit id="32bcbd676fbe6ff4e7a86dc3e7294f88ba2356e6" translate="yes" xml:space="preserve">
          <source>Simple example of using as a python library and editing config</source>
          <target state="translated">Простой пример использования в качестве питоновой библиотеки и редактирования конфигурации</target>
        </trans-unit>
        <trans-unit id="96ef76a40d5ce99ea9be8d0d2b23a5f6c7a9897c" translate="yes" xml:space="preserve">
          <source>Simple example of using command line arguments</source>
          <target state="translated">Простой пример использования аргументов командной строки</target>
        </trans-unit>
        <trans-unit id="4fe832252751ef6f5afead3fb0aecf6ccde876f7" translate="yes" xml:space="preserve">
          <source>Simple example of using predictit as a python library and function arguments</source>
          <target state="translated">Простой пример использования предикта в качестве питоновой библиотеки и аргументов функции</target>
        </trans-unit>
        <trans-unit id="b2350c4cef0afe170243dc233ac45b168844a0e5" translate="yes" xml:space="preserve">
          <source>Software can be used in three ways. As a python library or with command line arguments or as normal python scripts.
Main function is predict in &lt;code&gt;main.py&lt;/code&gt; script.
There is also predict_multiple_columns if you want to predict more at once (columns or time frequentions) and also compare_models function that evaluate defined test data and can tell you which models are best. Then you can use only such a models.</source>
          <target state="translated">Software can be used in three ways. As a python library or with command line arguments or as normal python scripts. Main function is predict in &lt;code&gt;main.py&lt;/code&gt; script. There is also predict_multiple_columns if you want to predict more at once (columns or time frequentions) and also compare_models function that evaluate defined test data and can tell you which models are best. Then you can use only such a models.</target>
        </trans-unit>
        <trans-unit id="e129a9ca55c25596a40d8949f2e81da46a0fff00" translate="yes" xml:space="preserve">
          <source>Sometime you can have issues with installing some libraries from requirements (e.g. numpy because not BLAS / LAPACK). There are also two libraries - Tensorflow and pyodbc not in requirements, because not necessary, but troublesome. If library not installed with pip, check which library don't work, install manually with stackoverflow and repeat...</source>
          <target state="translated">Иногда у вас могут возникнуть проблемы с установкой некоторых библиотек из требований (например,numpy,потому что не BLAS/LAPACK).Также есть две библиотеки-Tensorflow и pyodbc не в требованиях,потому что не нужны,но проблематичны.Если библиотека не установлена с помощью pip,проверьте,какая из библиотек не работает,установите вручную с помощью stackoverflow и повторите....</target>
        </trans-unit>
        <trans-unit id="65242ae39630a2f8240105f2ee8593340638f7be" translate="yes" xml:space="preserve">
          <source>To optmize hyperparameters, just set &lt;code&gt;optimizeit: 1,&lt;/code&gt; and model parameters limits. It is commented in &lt;code&gt;config.py&lt;/code&gt; how to use it. It's not grid bruteforce. Heuristic method based on halving interval is used, but still it can be time consuming. It is recomend only to tune parameters worth of it. Or tune it by parts.</source>
          <target state="translated">To optmize hyperparameters, just set &lt;code&gt;optimizeit: 1,&lt;/code&gt; and model parameters limits. It is commented in &lt;code&gt;config.py&lt;/code&gt; how to use it. It's not grid bruteforce. Heuristic method based on halving interval is used, but still it can be time consuming. It is recomend only to tune parameters worth of it. Or tune it by parts.</target>
        </trans-unit>
        <trans-unit id="aa9cee9767a8c54bfc2390a88c287fe6ee92b337" translate="yes" xml:space="preserve">
          <source>To see all the possible values in &lt;code&gt;configuration.py&lt;/code&gt; from your IDE, use</source>
          <target state="translated">To see all the possible values in &lt;code&gt;configuration.py&lt;/code&gt; from your IDE, use</target>
        </trans-unit>
        <trans-unit id="5c6d21d39c34b58df3009b05d311b33e1af94007" translate="yes" xml:space="preserve">
          <source>predictit</source>
          <target state="translated">предсказать</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
