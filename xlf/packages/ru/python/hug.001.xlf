<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/hug/">
    <body>
      <group id="hug">
        <trans-unit id="1891cd1442749ae72069c9b8cd5cea2844856a51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hugapi.github.io/hug/&quot;&gt;Read Latest Documentation&lt;/a&gt; - &lt;a href=&quot;https://github.com/hugapi/hug&quot;&gt;Browse GitHub Code Repository&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hugapi.github.io/hug/&quot;&gt;Прочтите последнюю документацию&lt;/a&gt; - &lt;a href=&quot;https://github.com/hugapi/hug&quot;&gt;просмотрите репозиторий кода GitHub&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fd1eceee6a3dddacede2ff00f0045a329abb963" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Directives&lt;/strong&gt; functions that get executed with the request / response data based on being requested as an argument in your api_function.
These apply as input parameters only, and can not be applied currently as output formats or transformations.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Функции &lt;strong&gt;директив,&lt;/strong&gt; которые выполняются с данными запроса / ответа на основе запроса в качестве аргумента в вашем api_function. Они применяются только как входные параметры и не могут применяться в настоящее время как выходные форматы или преобразования.</target>
        </trans-unit>
        <trans-unit id="f0b92d435337779f16ada3f239b1093f1550126a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input Formatters&lt;/strong&gt; a function that takes the body of data given from a user of your API and formats it for handling.</source>
          <target state="translated">&lt;strong&gt;Форматирование ввода&lt;/strong&gt; - функция, которая принимает тело данных, предоставленных пользователем вашего API, и форматирует его для обработки.</target>
        </trans-unit>
        <trans-unit id="5d0f84ef4dfbdd8691433446b2f3d30323ecfde0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;METHOD Decorators&lt;/strong&gt;&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged</source>
          <target state="translated">&lt;strong&gt;МЕТОД Декораторы &lt;/strong&gt; &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;post&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; и т. Д. Декораторы методов HTTP, которые предоставляют вашу функцию Python как API, сохраняя при этом ваш метод Python неизменным.</target>
        </trans-unit>
        <trans-unit id="337920445117b90d3c38853e9b3f5a0a264ece63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Middleware&lt;/strong&gt; functions that get called for every request a hug API processes</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Функции &lt;strong&gt;промежуточного программного обеспечения,&lt;/strong&gt; которые вызываются для каждого запроса, обрабатываемого API-интерфейсом hug</target>
        </trans-unit>
        <trans-unit id="26cfd9566f33dc84fdf2e04ec121504c3a006a41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output Formatters&lt;/strong&gt; a function that takes the output of your API function and formats it for transport to the user of the API.</source>
          <target state="translated">&lt;strong&gt;Форматирование вывода&lt;/strong&gt; - функция, которая принимает вывод вашей функции API и форматирует его для передачи пользователю API.</target>
        </trans-unit>
        <trans-unit id="f0393068b82fd41f7d3c7b081d85a787d6aec1e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameter mapping&lt;/strong&gt; can be used to override inferred parameter names, eg. for reserved keywords:</source>
          <target state="translated">&lt;strong&gt;Сопоставление параметров&lt;/strong&gt; может использоваться для переопределения предполагаемых имен параметров, например. для зарезервированных ключевых слов:</target>
        </trans-unit>
        <trans-unit id="a046197910bd9944460f562ddf1c6de1a78eaa7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type Annotations&lt;/strong&gt; functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Функции &lt;strong&gt;аннотаций типов,&lt;/strong&gt; которые необязательно прикрепляются к аргументам ваших методов, чтобы указать, как аргумент проверяется и преобразуется в тип Python</target>
        </trans-unit>
        <trans-unit id="3a951d35e81f9a92861645f522c6a01ab47401b1" translate="yes" xml:space="preserve">
          <source>A Python framework that makes developing APIs as simple as possible, but no simpler.</source>
          <target state="translated">Фреймворк Python,который делает разработку API как можно проще,но не проще.</target>
        </trans-unit>
        <trans-unit id="3d0a354729291e8b8f1225393dd2a6b39a8c8fb8" translate="yes" xml:space="preserve">
          <source>Adding your own directives is straight forward:</source>
          <target state="translated">Добавление собственных директив-это просто:</target>
        </trans-unit>
        <trans-unit id="b32141e09c28252c817db030d2a7de86a3b2a036" translate="yes" xml:space="preserve">
          <source>Additionally, you can easily create a custom 404 handler using the &lt;code&gt;hug.not_found&lt;/code&gt; decorator:</source>
          <target state="translated">Кроме того, вы можете легко создать собственный обработчик 404 с &lt;code&gt;hug.not_found&lt;/code&gt; декоратора hug.not_found :</target>
        </trans-unit>
        <trans-unit id="7f33cf112928c8c4636bfabd6fd6f96bee8527d0" translate="yes" xml:space="preserve">
          <source>As a result of these goals, hug is Python 3+ only and built upon &lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;Falcon's&lt;/a&gt; high performance HTTP library</source>
          <target state="translated">В результате этих целей hug работает только на Python 3+ и построен на высокопроизводительной HTTP-библиотеке &lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;Falcon.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a8df05afb98eec12798dde02aa621accbaa4a973" translate="yes" xml:space="preserve">
          <source>Aside from the obvious input transformation use case, directives can be used to pipe data into your API functions, even if they are not present in the request query string, POST body, etc. For an example of how to use directives in this way, see the authentication example in the examples folder.</source>
          <target state="translated">Помимо очевидного сценария использования входного преобразования,директивы могут быть использованы для передачи данных в ваши API функции,даже если они отсутствуют в строке запроса,POST теле и т.д.Пример такого использования директив смотрите в папке Примеры аутентификации.</target>
        </trans-unit>
        <trans-unit id="87fae54a50b27140b756b9e37a86b1e78537c4a1" translate="yes" xml:space="preserve">
          <source>Asyncio support</source>
          <target state="translated">Асинсио поддержка</target>
        </trans-unit>
        <trans-unit id="754e1e5db57d014e36284f09734da7ee9ade8e7f" translate="yes" xml:space="preserve">
          <source>Be the basis for next generation Python APIs, embracing the latest technology.</source>
          <target state="translated">Будьте основой для следующего поколения Python API,охватывающих новейшие технологии.</target>
        </trans-unit>
        <trans-unit id="e104776120d29dd6459bcfa52cf9116c58729400" translate="yes" xml:space="preserve">
          <source>Build an example API with a simple endpoint in just a few lines.</source>
          <target state="translated">Постройте пример API с простой конечной точкой всего за несколько строк.</target>
        </trans-unit>
        <trans-unit id="22fce8cfcd346175db9ddbab078350c1a657d4f3" translate="yes" xml:space="preserve">
          <source>Building Blocks of a hug API</source>
          <target state="translated">Строительные блоки API обнимашек</target>
        </trans-unit>
        <trans-unit id="973e7afeaa4e40433590d46f7048f4263188c8b7" translate="yes" xml:space="preserve">
          <source>By default, hug returns an auto generated API spec when a user tries to access an endpoint that isn't defined. If you would not like to return this spec you can turn off 404 documentation:</source>
          <target state="translated">По умолчанию,hug возвращает спецификацию автогенерируемого API,когда пользователь пытается получить доступ к конечной точке,которая не определена.Если вы не хотите возвращать этот спецификатор,вы можете отключить документацию 404:</target>
        </trans-unit>
        <trans-unit id="ed3c98a24ca7c20314ccede0ba6b97c33e7cd11d" translate="yes" xml:space="preserve">
          <source>By default, the IP is 172.17.0.1. Assuming that's the IP you see, as well, you would then go to &lt;code&gt;http://172.17.0.1:8000/&lt;/code&gt; in your browser to view your API.</source>
          <target state="translated">По умолчанию IP-адрес 172.17.0.1. Предполагая, что это IP-адрес, который вы также видите, вы должны перейти на &lt;code&gt;http://172.17.0.1:8000/&lt;/code&gt; в своем браузере, чтобы просмотреть свой API.</target>
        </trans-unit>
        <trans-unit id="db63f0c176088a648bb7851cf6d0b3c69e011ded" translate="yes" xml:space="preserve">
          <source>Can be imported into the main API file:</source>
          <target state="translated">Может быть импортирован в основной API файл:</target>
        </trans-unit>
        <trans-unit id="0ce123ace99cd0029fc0622f5a38b96e8cbee984" translate="yes" xml:space="preserve">
          <source>Configuring hug 404</source>
          <target state="translated">Настраиваемое объятие 404</target>
        </trans-unit>
        <trans-unit id="29c1f935aff4d7ef2949abda669b629a517cdd9a" translate="yes" xml:space="preserve">
          <source>Directives may be accessed via an argument with a &lt;code&gt;hug_&lt;/code&gt; prefix, or by using Python 3 type annotations. The latter is the more modern approach, and is recommended. Directives declared in a module can be accessed by using their fully qualified name as the type annotation (ex: &lt;code&gt;module.directive_name&lt;/code&gt;).</source>
          <target state="translated">Доступ к директивам можно получить через аргумент с префиксом &lt;code&gt;hug_&lt;/code&gt; или с помощью аннотаций типа Python 3. Последний вариант является более современным и рекомендуется. К директивам, объявленным в модуле, можно получить доступ, используя их полное имя в качестве аннотации типа (например: &lt;code&gt;module.directive_name&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="358d84aa8148063b462186c221ef88a0bda8ec99" translate="yes" xml:space="preserve">
          <source>For Example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="7785dfa6b5b2ac73312e8d5251b8d042d702b7f1" translate="yes" xml:space="preserve">
          <source>For completeness, here is an example of accessing the directive via the magic name approach:</source>
          <target state="translated">Для полноты приведем пример обращения к директиве через подход с магическим именем:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="ec1e6db6e6c03fb8bad69c299593b12da3a0dc24" translate="yes" xml:space="preserve">
          <source>From the command line application:</source>
          <target state="translated">Из приложения командной строки:</target>
        </trans-unit>
        <trans-unit id="bdb4e742101adce19db03bb43f2a3ef4a3a7e139" translate="yes" xml:space="preserve">
          <source>Get professionally supported hug with the Tidelift Subscription</source>
          <target state="translated">Получите профессионально поддерживаемые объятия с Подпиской на Tidelift</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="b33664f205bae044a7540d189a9f463f85322603" translate="yes" xml:space="preserve">
          <source>HUG simply stands for Hopefully Useful Guide. This represents the project's goal to help guide developers into creating well written and intuitive APIs.</source>
          <target state="translated">HUG просто означает &quot;Надеюсь,полезное руководство&quot;.Целью проекта является помощь разработчикам в создании хорошо написанных и интуитивно понятных API.</target>
        </trans-unit>
        <trans-unit id="4241eda4d6144efaa18c072736bfe08f7593223d" translate="yes" xml:space="preserve">
          <source>Ideally, within a &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtual environment&lt;/a&gt;.</source>
          <target state="translated">В идеале в &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;виртуальной среде&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="32ee1aa77e7bb32063fdb2b2fc12e0c28a6d63ab" translate="yes" xml:space="preserve">
          <source>If you like to develop in Docker and keep your system clean, you can do that but you'll need to first install &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose&lt;/a&gt;.</source>
          <target state="translated">Если вам нравится разрабатывать в Docker и содержать свою систему в чистоте, вы можете это сделать, но сначала вам нужно установить &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f9b6c5909f91a333882fd964ac2dbbc32dbbfa3" translate="yes" xml:space="preserve">
          <source>Input formatters are mapped based on the &lt;code&gt;content_type&lt;/code&gt; of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your &lt;code&gt;api_function&lt;/code&gt;</source>
          <target state="translated">Средства форматирования ввода отображаются на основе &lt;code&gt;content_type&lt;/code&gt; данных запроса и выполняют только базовый синтаксический анализ. Более подробный анализ должен выполняться с помощью аннотаций типов, представленных в вашей &lt;code&gt;api_function&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c920197ca42bd6cbc5aaef91042da46af9d9ad6" translate="yes" xml:space="preserve">
          <source>Installing hug</source>
          <target state="translated">Установочное объятие</target>
        </trans-unit>
        <trans-unit id="9279433dcb5025919ded69799bd1fcfdd4bbeca1" translate="yes" xml:space="preserve">
          <source>Installing hug is as simple as:</source>
          <target state="translated">Установка обнимашек так же проста,как и..:</target>
        </trans-unit>
        <trans-unit id="831984903762fc97309a8e41bcf90f4c95b8dd38" translate="yes" xml:space="preserve">
          <source>It should be fast. A developer should never feel the need to look somewhere else for performance reasons.</source>
          <target state="translated">Это должно быть быстро.Разработчик никогда не должен чувствовать необходимость искать где-то еще по причинам производительности.</target>
        </trans-unit>
        <trans-unit id="bf52013fff0f47b4338b87ed66a34d37ea549a73" translate="yes" xml:space="preserve">
          <source>Magic done once, in an API framework, is better than pushing the problem set to the user of the API framework.</source>
          <target state="translated">Магия,сделанная один раз,в фреймворке API,лучше,чем подталкивание пользователя к проблеме,поставленной перед фреймворком API.</target>
        </trans-unit>
        <trans-unit id="d23eebc35f489d3b763d90e2c12b6a6a144a1e89" translate="yes" xml:space="preserve">
          <source>Make developing a Python driven API as succinct as a written definition.</source>
          <target state="translated">Сделайте разработку API на питоне столь же лаконичным,как и написанное определение.</target>
        </trans-unit>
        <trans-unit id="4850343cb2494afc0d45b0bdbcfb4698a176fb71" translate="yes" xml:space="preserve">
          <source>NOTE: Hug is running on top Falcon which is not an asynchronous server. Even if using
asyncio, requests will still be processed synchronously.</source>
          <target state="translated">ПРИМЕЧАНИЕ:Hug работает на верхнем Falcon,который не является асинхронным сервером.Даже при использовании asyncio запросы все равно будут обрабатываться синхронно.</target>
        </trans-unit>
        <trans-unit id="3cc3453903d306e07a247c36a1a7aade091f9601" translate="yes" xml:space="preserve">
          <source>Note: versioning in hug automatically supports both the version header as well as direct URL based specification.</source>
          <target state="translated">Замечание:версионирование в режиме &quot;обнимашки&quot; автоматически поддерживает как заголовок версии,так и прямую спецификацию,основанную на URL.</target>
        </trans-unit>
        <trans-unit id="9be8845d032ba090ccafb26f1758fd381984819c" translate="yes" xml:space="preserve">
          <source>On your Docker &lt;code&gt;workspace&lt;/code&gt; container, the &lt;code&gt;./docker/templates&lt;/code&gt; directory on your host computer is mounted to &lt;code&gt;/src&lt;/code&gt; in the Docker container. This is specified under &lt;code&gt;services&lt;/code&gt; &amp;gt; &lt;code&gt;app&lt;/code&gt; of &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt;.</source>
          <target state="translated">В вашем контейнере &lt;code&gt;workspace&lt;/code&gt; области &lt;code&gt;./docker/templates&lt;/code&gt; каталог ./docker/templates на вашем хост-компьютере подключен к &lt;code&gt;/src&lt;/code&gt; в контейнере Docker. Это указано в разделе &lt;code&gt;services&lt;/code&gt; &amp;gt; &lt;code&gt;app&lt;/code&gt; в &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa9860d695862a7eb3daf9e8e36c34497710171a" translate="yes" xml:space="preserve">
          <source>Once you've done that, you'll need to &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;docker&lt;/code&gt; directory and run the web server (Gunicorn) specified in &lt;code&gt;./docker/gunicorn/Dockerfile&lt;/code&gt;, after which you can preview the output of your API in the browser on your host machine.</source>
          <target state="translated">После того, как вы сделали это, вам нужно &lt;code&gt;cd&lt;/code&gt; в &lt;code&gt;docker&lt;/code&gt; каталог и запустить веб - сервер (Gunicorn) , указанный в &lt;code&gt;./docker/gunicorn/Dockerfile&lt;/code&gt; , после чего вы можете анонсировать выход вашего API в браузере на вашем хост-машина.</target>
        </trans-unit>
        <trans-unit id="10610ae894a2a7a10eede2205febf1d1758dac6f" translate="yes" xml:space="preserve">
          <source>Or alternatively - for cases like this - where only one module is being included per a URL route:</source>
          <target state="translated">Или,наоборот,в таких случаях,когда на URL-маршрут включается только один модуль:</target>
        </trans-unit>
        <trans-unit id="9599139a3da06884b1086130404707b1c040bb60" translate="yes" xml:space="preserve">
          <source>Parameters can also be encoded in the URL (check
out &lt;a href=&quot;examples/happy_birthday.py&quot;&gt;&lt;code&gt;happy_birthday.py&lt;/code&gt;&lt;/a&gt; for the whole
example).</source>
          <target state="translated">Параметры также можно закодировать в URL-адресе ( весь пример см. На &lt;a href=&quot;examples/happy_birthday.py&quot;&gt; &lt;code&gt;happy_birthday.py&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="70eea5c68d9f081a0dac9b82df9ef6906b884950" translate="yes" xml:space="preserve">
          <source>Professional support for hug is available as part of the &lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;Tidelift
Subscription&lt;/a&gt;.
Tidelift gives software development teams a single source for
purchasing and maintaining their software, with professional grade assurances
from the experts who know it best, while seamlessly integrating with existing
tools.</source>
          <target state="translated">Профессиональная поддержка для объятий доступна как часть &lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;подписки Tidelift&lt;/a&gt; . Tidelift предоставляет командам разработчиков программного обеспечения единый источник для приобретения и обслуживания своего программного обеспечения, с гарантиями профессионального уровня от экспертов, которые знают его лучше всего, при полной интеграции с существующими инструментами.</target>
        </trans-unit>
        <trans-unit id="4ad07fe8cab325006610e5c7f9d4c3cf9d378e9a" translate="yes" xml:space="preserve">
          <source>Running hug with other WSGI based servers</source>
          <target state="translated">Запуск обнимашек с другими серверами на базе WSGI</target>
        </trans-unit>
        <trans-unit id="7e197170524d0049b65494c29f9941c06215db04" translate="yes" xml:space="preserve">
          <source>Security contact information</source>
          <target state="translated">Контактные данные службы безопасности</target>
        </trans-unit>
        <trans-unit id="a5f0572bebdaf623329747d1a6d728c16dcb7212" translate="yes" xml:space="preserve">
          <source>Splitting APIs over multiple files</source>
          <target state="translated">Разбиение API на несколько файлов</target>
        </trans-unit>
        <trans-unit id="92428f0e12da119c2c985be2440ab07ccde29faa" translate="yes" xml:space="preserve">
          <source>Supporting hug development</source>
          <target state="translated">Поддержка развития объятия</target>
        </trans-unit>
        <trans-unit id="fda1a2f92c23d9bd588062628a1a6dec5fce5020" translate="yes" xml:space="preserve">
          <source>Testing hug APIs</source>
          <target state="translated">Тестирование API обнимашек</target>
        </trans-unit>
        <trans-unit id="0a0dc0ebd769cd2d6e2f3c5c04c9ba7bb9d6375f" translate="yes" xml:space="preserve">
          <source>Thanks and I hope you find &lt;em&gt;this&lt;/em&gt; hug helpful as you develop your next Python API!</source>
          <target state="translated">Спасибо, и я надеюсь, что &lt;em&gt;это&lt;/em&gt; объятие поможет вам при разработке следующего Python API!</target>
        </trans-unit>
        <trans-unit id="6b5748267b4a92ff501ece9f49a1eae7d4bdd557" translate="yes" xml:space="preserve">
          <source>The framework should encourage code that self-documents.</source>
          <target state="translated">Структура должна поощрять код,который является самодокументом.</target>
        </trans-unit>
        <trans-unit id="4c3a720e1f09b4bf3195ba27f2a83cc0403fae64" translate="yes" xml:space="preserve">
          <source>Then you can access the example from &lt;code&gt;localhost:8000/v1/echo?text=Hi&lt;/code&gt; / &lt;code&gt;localhost:8000/v2/echo?text=Hi&lt;/code&gt; Or access the documentation for your API from &lt;code&gt;localhost:8000&lt;/code&gt;</source>
          <target state="translated">Затем вы можете получить доступ к примеру с &lt;code&gt;localhost:8000/v1/echo?text=Hi&lt;/code&gt; / &lt;code&gt;localhost:8000/v2/echo?text=Hi&lt;/code&gt; Или получить доступ к документации для вашего API с &lt;code&gt;localhost:8000&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85423025067361be7aff0e935bf79ce621300d9a" translate="yes" xml:space="preserve">
          <source>This decorator works in the same manner as the hug HTTP method decorators, and is even version aware:</source>
          <target state="translated">Этот декоратор работает так же,как и декораторы метода HTTP-обнимашек,и даже знает версию:</target>
        </trans-unit>
        <trans-unit id="4b5392cfdf232f6cc068904b2d9b657e651e978e" translate="yes" xml:space="preserve">
          <source>To report a security vulnerability, please use the
&lt;a href=&quot;https://tidelift.com/security&quot;&gt;Tidelift security contact&lt;/a&gt;.
Tidelift will coordinate the fix and disclosure.</source>
          <target state="translated">Чтобы сообщить об уязвимости системы безопасности, используйте &lt;a href=&quot;https://tidelift.com/security&quot;&gt;контактную информацию службы безопасности Tidelift&lt;/a&gt; . Tidelift будет координировать исправление и раскрытие информации.</target>
        </trans-unit>
        <trans-unit id="bd75e7993dd4451f4e2e80c87bb17eaf0f068b43" translate="yes" xml:space="preserve">
          <source>To run the example:</source>
          <target state="translated">Чтобы запустить пример:</target>
        </trans-unit>
        <trans-unit id="c1e8307e6a9d01923949fbbd7e72d258fbe70276" translate="yes" xml:space="preserve">
          <source>To run the hello world hug example API.</source>
          <target state="translated">Чтобы запустить пример API приветственного мира обнимашек.</target>
        </trans-unit>
        <trans-unit id="cc3a5a60ceb8a3bda715ca81ef1dd0184522d378" translate="yes" xml:space="preserve">
          <source>To run, from the command line type:</source>
          <target state="translated">Для запуска,от типа командной строки:</target>
        </trans-unit>
        <trans-unit id="460f7658f324eaf15f96e695cc776bdfeb4def6a" translate="yes" xml:space="preserve">
          <source>Type annotations also feed into &lt;code&gt;hug&lt;/code&gt;'s automatic documentation
generation to let users of your API know what data to supply.</source>
          <target state="translated">Аннотации типов также используются для автоматической генерации документации &lt;code&gt;hug&lt;/code&gt; , чтобы пользователи вашего API знали, какие данные нужно предоставить.</target>
        </trans-unit>
        <trans-unit id="f1e887ad301db2838308801456e01403dfd27811" translate="yes" xml:space="preserve">
          <source>Using Docker</source>
          <target state="translated">Использование Докера</target>
        </trans-unit>
        <trans-unit id="b3a69340ce0be8b5b74b7e46cc90f9bdf3479d67" translate="yes" xml:space="preserve">
          <source>Using Python 3.5 async keyword.</source>
          <target state="translated">Использование асинхронного ключевого слова Python 3.5.</target>
        </trans-unit>
        <trans-unit id="e944aca10e018a969b5d6881683c7baf9dcf0f14" translate="yes" xml:space="preserve">
          <source>Using asyncio coroutine decorator</source>
          <target state="translated">Используя асинсио корутина декоратор</target>
        </trans-unit>
        <trans-unit id="5e51f6cfcd116a5a628b50e89b4f92dc36c5179c" translate="yes" xml:space="preserve">
          <source>Versioning with hug</source>
          <target state="translated">Версия с объятиями</target>
        </trans-unit>
        <trans-unit id="09156ba196e26e6c7e939d56e7a41867c91c8cdb" translate="yes" xml:space="preserve">
          <source>When building an API using the hug framework you'll use the following concepts:</source>
          <target state="translated">При построении API с использованием фреймворка объятия вы будете использовать следующие концепции:</target>
        </trans-unit>
        <trans-unit id="fc1dcc9006d3215e8d86472a32249b3b0d28c175" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;cli&lt;/code&gt; method decorator on coroutines, hug will schedule
the execution of the coroutine.</source>
          <target state="translated">При использовании декоратора методов &lt;code&gt;get&lt;/code&gt; и &lt;code&gt;cli&lt;/code&gt; в сопрограммах hug планирует выполнение сопрограммы.</target>
        </trans-unit>
        <trans-unit id="a8c632d98b9268376854cbc30eae096e0ad704ba" translate="yes" xml:space="preserve">
          <source>Which, once you are running the server as above, you can use this way:</source>
          <target state="translated">Который,как только вы запустили сервер,как описано выше,вы можете использовать этот способ:</target>
        </trans-unit>
        <trans-unit id="d0a3f7e6138efc1ed8290339051ecc68996dd29f" translate="yes" xml:space="preserve">
          <source>Why hug?</source>
          <target state="translated">Зачем обниматься?</target>
        </trans-unit>
        <trans-unit id="92066db15ca2736eb11343ec0aadc200ecf6f967" translate="yes" xml:space="preserve">
          <source>Writing tests for APIs written on-top of hug should be easy and intuitive.</source>
          <target state="translated">Написание тестов для API,написанных на обнимку,должно быть простым и интуитивно понятным.</target>
        </trans-unit>
        <trans-unit id="69d5b5a97e867377eb7c90bf67d6835ea56e79a9" translate="yes" xml:space="preserve">
          <source>You can access the example in your browser at:
&lt;code&gt;localhost:8000/happy_birthday?name=hug&amp;amp;age=1&lt;/code&gt;. Then check out the
documentation for your API at &lt;code&gt;localhost:8000/documentation&lt;/code&gt;</source>
          <target state="translated">Вы можете открыть этот пример в своем браузере по адресу: &lt;code&gt;localhost:8000/happy_birthday?name=hug&amp;amp;age=1&lt;/code&gt; . Затем ознакомьтесь с документацией для вашего API на &lt;code&gt;localhost:8000/documentation&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c975556850a95fbf44c5d623233058643734a205" translate="yes" xml:space="preserve">
          <source>You can also easily add any Falcon style middleware using:</source>
          <target state="translated">Вы также можете легко добавить любое промежуточное программное обеспечение в стиле Falcon,используя его:</target>
        </trans-unit>
        <trans-unit id="a98264703b814e298ce686a7fef9cd2bd9476746" translate="yes" xml:space="preserve">
          <source>You can also log into a Docker container that you can consider your work space. This workspace has Python and Pip installed so you can use those tools within Docker. If you need to test the CLI interface, for example, you would use this.</source>
          <target state="translated">Вы также можете войти в контейнер Docker,который вы можете рассмотреть ваше рабочее место.В этом рабочем пространстве установлены Python и Pip,поэтому вы можете использовать эти инструменты в Docker.Если вам,например,нужно протестировать интерфейс CLI,вы будете его использовать.</target>
        </trans-unit>
        <trans-unit id="acbfd6cceacd1855a44b41caf026e84b2d619740" translate="yes" xml:space="preserve">
          <source>You can use this &lt;code&gt;Response&lt;/code&gt; object for test assertions (check
out &lt;a href=&quot;examples/test_happy_birthday.py&quot;&gt;&lt;code&gt;test_happy_birthday.py&lt;/code&gt;&lt;/a&gt; ):</source>
          <target state="translated">Вы можете использовать этот объект &lt;code&gt;Response&lt;/code&gt; для тестовых утверждений (посмотрите &lt;a href=&quot;examples/test_happy_birthday.py&quot;&gt; &lt;code&gt;test_happy_birthday.py&lt;/code&gt; &lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="68863bd3822201be0e105f9d6f13a036936a9dbe" translate="yes" xml:space="preserve">
          <source>as shown, you can easily change the output format for both an entire API as well as an individual API call</source>
          <target state="translated">как показано на рисунке,вы можете легко изменить формат вывода как для всего API,так и для отдельного вызова API.</target>
        </trans-unit>
        <trans-unit id="5260dfd635468aad848584daf1e1051cea7a8706" translate="yes" xml:space="preserve">
          <source>hug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development.</source>
          <target state="translated">Объятие направлено на то,чтобы сделать разработку API,основанных на Python,как можно более простой,но не более простой.В результате,это значительно упрощает разработку API на Python.</target>
        </trans-unit>
        <trans-unit id="ccbdd588925c256b0089f80475f85b716a8765e4" translate="yes" xml:space="preserve">
          <source>hug enables you to organize large projects in any manner you see fit. You can import any module that contains hug decorated functions (request handling, directives, type handlers, etc) and extend your base API with that module.</source>
          <target state="translated">Объятия позволяют организовывать большие проекты любым удобным для вас способом.Вы можете импортировать любой модуль,содержащий функции оформления объятий (обработка запросов,директивы,обработчики типов и т.д.)и расширить свой базовый API с помощью этого модуля.</target>
        </trans-unit>
        <trans-unit id="d6cf0c89c4034b80e5b63e10795426ce000eb1b2" translate="yes" xml:space="preserve">
          <source>hug exposes a &lt;code&gt;__hug_wsgi__&lt;/code&gt; magic method on every API module automatically. Running your hug based API on any standard wsgi server should be as simple as pointing it to &lt;code&gt;module_name&lt;/code&gt;: &lt;code&gt;__hug_wsgi__&lt;/code&gt;.</source>
          <target state="translated">hug &lt;code&gt;__hug_wsgi__&lt;/code&gt; магический метод __hug_wsgi__ для каждого модуля API. Запустить API на основе объятий на любом стандартном сервере wsgi должно быть так же просто, как указать его на &lt;code&gt;module_name&lt;/code&gt; : &lt;code&gt;__hug_wsgi__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="63294d52f42102fddab47d3be28869d5d978e85a" translate="yes" xml:space="preserve">
          <source>hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base.
If you find or encounter any potential security issues, please let us know right away so we can resolve them.</source>
          <target state="translated">Объятия серьезно относятся к безопасности и качеству.Поэтому мы зависим только от тщательно протестированных компонентов и используем инструменты статического анализа (такие как бандит и безопасность)для проверки безопасности нашей кодовой базы.Если вы обнаружите или столкнетесь с какими-либо потенциальными проблемами безопасности,пожалуйста,сообщите нам об этом немедленно,чтобы мы могли их решить.</target>
        </trans-unit>
        <trans-unit id="840c736b58826c43bb285b4729a6389c2a271f7e" translate="yes" xml:space="preserve">
          <source>hug uses the structure of the function you decorate to automatically generate documentation for users of your API. hug always passes a request, response, and api_version variable to your function if they are defined params in your function definition.</source>
          <target state="translated">hug использует структуру функции,которую вы декорируете,для автоматической генерации документации для пользователей вашего API.hug всегда передаёт запрос,ответ и переменную api_version в вашу функцию,если они определены параметрами в определении вашей функции.</target>
        </trans-unit>
        <trans-unit id="4dba083e9006e12eb8972a15afb1acc690437b00" translate="yes" xml:space="preserve">
          <source>hug's &lt;code&gt;http&lt;/code&gt; method decorators don't modify your original functions. This makes testing hug APIs as simple as testing any other Python functions. Additionally, this means interacting with your API functions in other Python code is as straight forward as calling Python only API functions. hug makes it easy to test the full Python stack of your API by using the &lt;code&gt;hug.test&lt;/code&gt; module:</source>
          <target state="translated">Декораторы &lt;code&gt;http&lt;/code&gt; - методов hug не изменяют ваши исходные функции. Это делает тестирование API объятий таким же простым, как тестирование любых других функций Python. Кроме того, это означает, что взаимодействие с вашими функциями API в другом коде Python так же просто, как вызов функций API только для Python. hug упрощает тестирование полного стека Python вашего API с помощью модуля &lt;code&gt;hug.test&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a1ca4d71412d197d55f7225c9894b598beacb582" translate="yes" xml:space="preserve">
          <source>hug's Design Objectives:</source>
          <target state="translated">&quot;Задачи дизайна объятия&quot;:</target>
        </trans-unit>
        <trans-unit id="6415c2d844d4e6ce1c534ee71f1d8a7e411903ea" translate="yes" xml:space="preserve">
          <source>~Timothy Crosley</source>
          <target state="translated">~ Тимоти Кросли</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
