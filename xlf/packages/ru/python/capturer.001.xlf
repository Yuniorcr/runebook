<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/capturer/">
    <body>
      <group id="capturer">
        <trans-unit id="067d37005e41e9e28425c1041aba52aa775ce3db" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2020 Peter Odding.</source>
          <target state="translated">&amp;copy; 2020 Питер Оддинг.</target>
        </trans-unit>
        <trans-unit id="96a313b29626f9c796fd0c58c93ed79675febfc2" translate="yes" xml:space="preserve">
          <source>A big thanks goes out to the &lt;a href=&quot;https://pypi.org/project/pytest&quot;&gt;pytest&lt;/a&gt; developers because pytest&amp;rsquo;s mechanism for
capturing the output of subprocesses provided inspiration for the</source>
          <target state="translated">Большое спасибо разработчикам &lt;a href=&quot;https://pypi.org/project/pytest&quot;&gt;pytest,&lt;/a&gt; потому что механизм pytest для захвата вывода подпроцессов послужил источником вдохновения для</target>
        </trans-unit>
        <trans-unit id="5067ec6ec3c8bc695f33d7314315ee45d6022ae2" translate="yes" xml:space="preserve">
          <source>All output captured is relayed on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; stream by default, so capturing
changes the semantics of your programs. How much this matters obviously
depends on your use case. For the use cases that triggered me to create</source>
          <target state="translated">Весь захваченный вывод по умолчанию передается в поток &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; , поэтому захват изменяет семантику ваших программ. Насколько это важно, очевидно, зависит от вашего варианта использования. Для случаев использования, которые побудили меня создать</target>
        </trans-unit>
        <trans-unit id="8c94fc11e4f1956615d07ca478e8a24defe94515" translate="yes" xml:space="preserve">
          <source>CaptureOutput</source>
          <target state="translated">CaptureOutput</target>
        </trans-unit>
        <trans-unit id="0173862a56b8960fa3799085a3af62407f739de2" translate="yes" xml:space="preserve">
          <source>CaptureOutput(merged=False)</source>
          <target state="translated">CaptureOutput(merged=False)</target>
        </trans-unit>
        <trans-unit id="b37456c4530be810dc040f50da72eda09addfb0a" translate="yes" xml:space="preserve">
          <source>Contact</source>
          <target state="translated">Контактная информация</target>
        </trans-unit>
        <trans-unit id="f26d7814fc08c5accfe0925c334424a0f5185a51" translate="yes" xml:space="preserve">
          <source>Design choices</source>
          <target state="translated">Выбор конструкции</target>
        </trans-unit>
        <trans-unit id="ce1ec03c06db3b1cd681378b14d3d8988481cd83" translate="yes" xml:space="preserve">
          <source>Easily capture stdout/stderr of the current process and subprocesses</source>
          <target state="translated">Легко захватывает stdout/stderr текущего процесса и подпроцессов</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="6d477e9f192964a9fe4e48582901c3444ead950a" translate="yes" xml:space="preserve">
          <source>I say experimental because this method of capturing can unintentionally
change the order in which captured output is emitted, in order to avoid
interleaving output emitted on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; streams (which would
most likely result in incomprehensible output). Basically output is relayed
on each stream separately after each line break. This means interactive
prompts that block on reading from standard input without emitting a line
break won&amp;rsquo;t show up (until it&amp;rsquo;s too late ;-).</source>
          <target state="translated">Я говорю экспериментальный, потому что этот метод захвата может непреднамеренно изменить порядок, в котором передается захваченный вывод, чтобы избежать чередования выходных данных, передаваемых в потоках &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; и &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; (что, скорее всего, приведет к непонятному результату). Обычно вывод ретранслируется в каждом потоке отдельно после каждого разрыва строки. Это означает, что интерактивные подсказки, которые блокируют чтение из стандартного ввода без вывода разрыва строки, не будут отображаться (пока не станет слишком поздно ;-).</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="47f9a8b6f738de18de4d17340d61c56f28aa624e" translate="yes" xml:space="preserve">
          <source>Intercepts writes to low level file descriptors</source>
          <target state="translated">Перехват записывает в низкоуровневые файловые дескрипторы</target>
        </trans-unit>
        <trans-unit id="62de9052cf06aea7ff2b5663d068e174e3368ec8" translate="yes" xml:space="preserve">
          <source>Libraries like &lt;a href=&quot;https://pypi.org/project/capture&quot;&gt;capture&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/iocapture&quot;&gt;iocapture&lt;/a&gt; change Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stdout&quot;&gt;sys.stdout&lt;/a&gt; and
&lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stderr&quot;&gt;sys.stderr&lt;/a&gt; file objects to fake file objects (using &lt;a href=&quot;https://docs.python.org/2/library/stringio.html&quot;&gt;StringIO&lt;/a&gt;). This enables
capturing of (most) output written to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; streams from the
same Python process, however any output from subprocesses is unaffected by the
redirection and not captured.</source>
          <target state="translated">Такие библиотеки, как &lt;a href=&quot;https://pypi.org/project/capture&quot;&gt;Capture&lt;/a&gt; и &lt;a href=&quot;https://pypi.org/project/iocapture&quot;&gt;iocapture,&lt;/a&gt; изменяют файловые объекты Python &lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stdout&quot;&gt;sys.stdout&lt;/a&gt; и &lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stderr&quot;&gt;sys.stderr&lt;/a&gt; на поддельные файловые объекты (с использованием &lt;a href=&quot;https://docs.python.org/2/library/stringio.html&quot;&gt;StringIO&lt;/a&gt; ). Это позволяет захватывать (большую часть) выходных данных, записанных в потоки &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; и &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; из одного процесса Python, однако любой выход из подпроцессов не зависит от перенаправления и не фиксируется.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">Лицензия</target>
        </trans-unit>
        <trans-unit id="73457a5e828fb3b721e39222bf814b197e899a6a" translate="yes" xml:space="preserve">
          <source>Long running operations can provide the operator with real time feedback by
emitting output on the terminal. This sounds obvious (and it is!) but it is
non-trivial to implement (an understatement :-) when you &lt;em&gt;also&lt;/em&gt; want to
capture the output.</source>
          <target state="translated">Длительные операции могут предоставить оператору обратную связь в реальном времени, выводя выходные данные на терминал. Это кажется очевидным (и это так!), Но это нетривиально реализовать (преуменьшение :-), когда вы &lt;em&gt;также&lt;/em&gt; хотите захватить вывод.</target>
        </trans-unit>
        <trans-unit id="5c38227657096bc714717fbafdc49d643ed3e74c" translate="yes" xml:space="preserve">
          <source>Note that the first call to &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_bytes&quot;&gt;get_bytes()&lt;/a&gt;, &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_lines&quot;&gt;get_lines()&lt;/a&gt; or &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_text&quot;&gt;get_text()&lt;/a&gt;
will stop the capturing of output by default. This is intended as a sane
default to prevent partial reads (which can be confusing as hell when you don&amp;rsquo;t
have experience with them). So we could have simply used</source>
          <target state="translated">Обратите внимание, что первый вызов &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_bytes&quot;&gt;get_bytes ()&lt;/a&gt; , &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_lines&quot;&gt;get_lines ()&lt;/a&gt; или &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_text&quot;&gt;get_text ()&lt;/a&gt; по умолчанию остановит захват вывода. Это задумано как разумное значение по умолчанию для предотвращения частичного чтения (которое может сбивать с толку, если у вас нет опыта с ними). Так что мы могли бы просто использовать</target>
        </trans-unit>
        <trans-unit id="a42b6f37f68ce916c7654d2325495e2ffc917711" translate="yes" xml:space="preserve">
          <source>Programs like &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Privacy_Guard&quot;&gt;gpg&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;ssh&lt;/a&gt; that use interactive password prompts will render
their password prompt on the terminal in real time. This avoids the awkward
interaction where a password prompt is silenced but the program still hangs,
waiting for input on &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29&quot;&gt;stdin&lt;/a&gt;.</source>
          <target state="translated">Такие программы, как &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Privacy_Guard&quot;&gt;gpg&lt;/a&gt; и &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;ssh,&lt;/a&gt; которые используют интерактивные запросы пароля, будут отображать запрос пароля на терминале в реальном времени. Это позволяет избежать неудобного взаимодействия, когда запрос пароля отключен, но программа по-прежнему зависает, ожидая ввода на стандартный &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29&quot;&gt;ввод&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d606f457b941c69624384d635c6373c9af90939d" translate="yes" xml:space="preserve">
          <source>Relays output to the terminal in real time</source>
          <target state="translated">Релейный выход на терминал в режиме реального времени</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Статус</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="0091e40260b7b58d6e652641475f696d15bcd706" translate="yes" xml:space="preserve">
          <source>The capturer package makes it easy to capture the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; streams
of the current process &lt;em&gt;and subprocesses&lt;/em&gt;. Output can be relayed to the
terminal in real time but is also available to the Python program for
additional processing. It&amp;rsquo;s currently tested on cPython 2.7, 3.5+ and PyPy
(2.7). It&amp;rsquo;s tested on Linux and Mac OS X and may work on other unixes but
definitely won&amp;rsquo;t work on Windows (due to the use of the platform dependent &lt;a href=&quot;https://docs.python.org/2/library/pty.html&quot;&gt;pty&lt;/a&gt;
module). For usage instructions please refer to the &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">Пакет Capturer упрощает захват потоков &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; и &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; текущего процесса &lt;em&gt;и подпроцессов&lt;/em&gt; . Вывод может быть передан на терминал в режиме реального времени, но также доступен программе Python для дополнительной обработки. В настоящее время он протестирован на cPython 2.7, 3.5+ и PyPy (2.7). Он протестирован в Linux и Mac OS X и может работать в других unix-версиях, но определенно не будет работать в Windows (из-за использования модуля &lt;a href=&quot;https://docs.python.org/2/library/pty.html&quot;&gt;pty,&lt;/a&gt; зависящего от платформы ). Инструкции по использованию см. В &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;документации&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="467730d33ffe3b679f8d21fea344daddf7fca4fb" translate="yes" xml:space="preserve">
          <source>The easiest way to capture output is to use a context manager:</source>
          <target state="translated">Самый простой способ захвата вывода-использование контекстного менеджера:</target>
        </trans-unit>
        <trans-unit id="4e651dc5449474dd97ef6c540edb40ca90313c55" translate="yes" xml:space="preserve">
          <source>The latest version of</source>
          <target state="translated">Последняя версия</target>
        </trans-unit>
        <trans-unit id="b909d18007f17d144eb5a6414f16718e1b9f9936" translate="yes" xml:space="preserve">
          <source>The main use case of</source>
          <target state="translated">Основной вариант использования</target>
        </trans-unit>
        <trans-unit id="96f334c1550fc35ac7537f7405268afe69e0c993" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty()&lt;/a&gt; means you need to be running in a UNIX like
environment for</source>
          <target state="translated">Использование &lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty ()&lt;/a&gt; означает, что вам нужно работать в UNIX-подобной среде для</target>
        </trans-unit>
        <trans-unit id="29ae03f183f2d9ce11ef204b3e59748bb4ff43f7" translate="yes" xml:space="preserve">
          <source>The use of a context manager (&lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#the-with-statement&quot;&gt;the with statement&lt;/a&gt;) ensures that output
capturing is enabled and disabled at the appropriate time, regardless of
whether exceptions interrupt the normal flow of processing.</source>
          <target state="translated">Использование диспетчера контекста ( &lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#the-with-statement&quot;&gt;оператор with&lt;/a&gt; ) гарантирует, что захват вывода включается и выключается в соответствующее время, независимо от того, прерывают ли исключения нормальный поток обработки.</target>
        </trans-unit>
        <trans-unit id="b0b1b7db39c535f73ba96f47cf4c93cde41211e0" translate="yes" xml:space="preserve">
          <source>There are existing solutions out there to capture the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;
streams of (Python) processes. The</source>
          <target state="translated">Существуют существующие решения для захвата потоков &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; и &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; процессов (Python). В</target>
        </trans-unit>
        <trans-unit id="bf16a5a2c76cab9516867262b98d421ead9a3db9" translate="yes" xml:space="preserve">
          <source>There is experimental support for capturing &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; separately
and relaying captured output to the appropriate original stream. Basically
you call</source>
          <target state="translated">Существует экспериментальная поддержка захвата &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; и &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr по&lt;/a&gt; отдельности и ретрансляции захваченного вывода в соответствующий исходный поток. В основном вы звоните</target>
        </trans-unit>
        <trans-unit id="413e33ea01e94adb5a7994e3b126429dad6e0aa0" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s actually a multitude of ways to install Python packages (e.g. the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0370/&quot;&gt;per
user site-packages directory&lt;/a&gt;, &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtual environments&lt;/a&gt; or just installing
system wide) and I have no intention of getting into that discussion here, so
if this intimidates you then read up on your options before returning to these
instructions ;-).</source>
          <target state="translated">На самом деле существует множество способов установки пакетов Python (например, &lt;a href=&quot;https://www.python.org/dev/peps/pep-0370/&quot;&gt;каталог пакетов сайта для каждого пользователя&lt;/a&gt; , &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;виртуальные среды&lt;/a&gt; или просто установка в масштабе всей системы), и я не собираюсь вдаваться в это обсуждение, поэтому, если это вас пугает, прочитайте свой варианты, прежде чем вернуться к этим инструкциям ;-).</target>
        </trans-unit>
        <trans-unit id="f27a0dc4aa2c3bb4dbe16bb6623bff3027267eb7" translate="yes" xml:space="preserve">
          <source>This software is licensed under the &lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT license&lt;/a&gt;.</source>
          <target state="translated">Это программное обеспечение находится под &lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;лицензией MIT&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7aa3d371321a712db54ce3177e0c62c338d94f28" translate="yes" xml:space="preserve">
          <source>Uses a pseudo terminal to emulate a real terminal</source>
          <target state="translated">Использует псевдотерминал для эмуляции реального терминала.</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="ecf5c466c5c9de7de63a537c3e693212e007e15f" translate="yes" xml:space="preserve">
          <source>and then you use the</source>
          <target state="translated">а затем вы используете</target>
        </trans-unit>
        <trans-unit id="cf4966c8256316dfb7378caa6748113487e2e9e0" translate="yes" xml:space="preserve">
          <source>attributes of the</source>
          <target state="translated">атрибуты</target>
        </trans-unit>
        <trans-unit id="c1364357c4c9bf705a9cee2f161afe63cf37ebc5" translate="yes" xml:space="preserve">
          <source>capturer</source>
          <target state="translated">захватчик</target>
        </trans-unit>
        <trans-unit id="280f73b29ad44c388ef792f1064b14b963b572db" translate="yes" xml:space="preserve">
          <source>is available on &lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt; and &lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHub&lt;/a&gt;. The
documentation is hosted on &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;Read the Docs&lt;/a&gt; and includes a &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/changelog.html&quot;&gt;changelog&lt;/a&gt;. For bug
reports please create an issue on &lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHub&lt;/a&gt;. If you have questions, suggestions,
etc. feel free to send me an e-mail at &lt;a href=&quot;mailto:peter%40peterodding.com&quot;&gt;peter@peterodding.com&lt;/a&gt;.</source>
          <target state="translated">доступен на &lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt; и &lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHub&lt;/a&gt; . Документация размещена на сайте &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;Read the Docs&lt;/a&gt; и включает &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/changelog.html&quot;&gt;журнал изменений&lt;/a&gt; . Для сообщений об ошибках создайте проблему на &lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHub&lt;/a&gt; . Если у вас есть вопросы, предложения и т. Д., Не стесняйтесь присылать мне электронное письмо по адресу &lt;a href=&quot;mailto:peter%40peterodding.com&quot;&gt;peter@peterodding.com&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cc328241821ec81a0bd727eb8307ec218e3aca67" translate="yes" xml:space="preserve">
          <source>is to capture all output of a snippet of Python
code (including any output by subprocesses) but also relay the output to the
terminal in real time. This has a couple of useful properties:</source>
          <target state="translated">это перехват всего вывода фрагмента Python-кода (включая любой вывод подпроцессами),а также передача вывода на терминал в режиме реального времени.Это имеет несколько полезных свойств:</target>
        </trans-unit>
        <trans-unit id="8af0779f22f7e46b85797dd52e0b3e50d1509da3" translate="yes" xml:space="preserve">
          <source>it doesn&amp;rsquo;t matter, which explains why this is the default mode.</source>
          <target state="translated">это не имеет значения, что объясняет, почему это режим по умолчанию.</target>
        </trans-unit>
        <trans-unit id="34fb25f83b43204dad2ad028bbed94e517200a0a" translate="yes" xml:space="preserve">
          <source>keyword argument
that can be used to disable this behavior (please refer to the &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;documentation&lt;/a&gt;
for details).</source>
          <target state="translated">аргумент ключевого слова, который можно использовать для отключения этого поведения ( подробности см. в &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;документации&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="830979b8b59a226d370a424fcaf263da13f1ff3c" translate="yes" xml:space="preserve">
          <source>object to get at the output
captured on each stream.</source>
          <target state="translated">объект,чтобы получить на выходе захваченные на каждом потоке.</target>
        </trans-unit>
        <trans-unit id="1bf789c5f353e49a156b15a628b99a02803f754f" translate="yes" xml:space="preserve">
          <source>package instead intercepts writes to low level file descriptors
(similar to and inspired by &lt;a href=&quot;https://pytest.org/latest/capture.html&quot;&gt;how pytest does it&lt;/a&gt;). This enables capturing of
output written to the standard output and error streams from the same Python
process as well as any subprocesses.</source>
          <target state="translated">package вместо этого перехватывает записи в файловые дескрипторы низкого уровня (аналогично тому, &lt;a href=&quot;https://pytest.org/latest/capture.html&quot;&gt;как это делает pytest&lt;/a&gt; ). Это позволяет записывать выходные данные, записанные в стандартный поток вывода и потоки ошибок из того же процесса Python, а также любых подпроцессов.</target>
        </trans-unit>
        <trans-unit id="a17fb22aac4e90f542768571c3097ae532fc9bea" translate="yes" xml:space="preserve">
          <source>package is available on &lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt; which means installation should be
as simple as:</source>
          <target state="translated">пакет доступен в &lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI,&lt;/a&gt; что означает, что установка должна быть такой же простой, как:</target>
        </trans-unit>
        <trans-unit id="56dfcefbd3bce0e406f073d7929c42b9ae1edce1" translate="yes" xml:space="preserve">
          <source>package uses a pseudo terminal created using &lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty()&lt;/a&gt; to
capture output. This means subprocesses will use ANSI escape sequences because
they think they&amp;rsquo;re connected to a terminal. In the current implementation you
can&amp;rsquo;t opt out of this, but feel free to submit a feature request to change this
:-). This does have some drawbacks:</source>
          <target state="translated">пакет использует псевдотерминал, созданный с помощью &lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty ()&lt;/a&gt; для захвата вывода. Это означает, что подпроцессы будут использовать escape-последовательности ANSI, потому что они думают, что подключены к терминалу. В текущей реализации вы не можете отказаться от этого, но не стесняйтесь отправлять запрос функции, чтобы изменить это :-). У этого есть некоторые недостатки:</target>
        </trans-unit>
        <trans-unit id="6825c88f8c8676d5e6d8f79c1357352c45ed8741" translate="yes" xml:space="preserve">
          <source>package was created for a very
specific use case that wasn&amp;rsquo;t catered for by existing solutions (that I could
find). This section documents the design choices that guided the development of
the</source>
          <target state="translated">Пакет был создан для очень конкретного случая использования, который не обслуживается существующими решениями (которые я смог найти). В этом разделе документируются варианты дизайна, которыми руководствовались при разработке</target>
        </trans-unit>
        <trans-unit id="599fe20e7281222b71474c879769a9e94f602fea" translate="yes" xml:space="preserve">
          <source>package was developed as a proof of concept over the course of a
weekend, because I was curious to see if it could be done (reliably). After a
weekend of extensive testing it seems to work fairly well so I&amp;rsquo;m publishing the
initial release as version 1.0, however I still consider this a proof of
concept because I don&amp;rsquo;t have extensive &amp;ldquo;production&amp;rdquo; experience using it yet.
Here&amp;rsquo;s hoping it works as well in practice as it did during my testing :-).</source>
          <target state="translated">Пакет был разработан в качестве доказательства концепции в течение выходных, потому что мне было любопытно посмотреть, можно ли это сделать (надежно). После уик-энда всестороннего тестирования он, кажется, работает довольно хорошо, поэтому я публикую первоначальный выпуск как версию 1.0, однако я все еще считаю это доказательством концепции, потому что у меня еще нет обширного опыта его использования. Надеюсь, на практике он работает так же хорошо, как и во время моего тестирования :-).</target>
        </trans-unit>
        <trans-unit id="af066bfb6456ec7e023df9ba903d7d0a4c65d9d5" translate="yes" xml:space="preserve">
          <source>package. No code was copied, but both projects are MIT licensed anyway, so it&amp;rsquo;s
not like it&amp;rsquo;s very relevant :-).</source>
          <target state="translated">пакет. Код не копировался, но оба проекта все равно имеют лицензию MIT, так что это не очень актуально :-).</target>
        </trans-unit>
        <trans-unit id="feac2e72858e6aacadfda0ac55b74ac3719313cb" translate="yes" xml:space="preserve">
          <source>package:</source>
          <target state="translated">Пакет:</target>
        </trans-unit>
        <trans-unit id="cee9d62e6df8cf072e5ddffcd07319f953cac369" translate="yes" xml:space="preserve">
          <source>partial=True</source>
          <target state="translated">частичное=Истина</target>
        </trans-unit>
        <trans-unit id="6d0d5876e6710ebb4f309b5af01090cb97381d06" translate="yes" xml:space="preserve">
          <source>print</source>
          <target state="translated">распечатать</target>
        </trans-unit>
        <trans-unit id="351eb7019c1640acf10c265cc31c377fd68443b5" translate="yes" xml:space="preserve">
          <source>stderr</source>
          <target state="translated">stderr</target>
        </trans-unit>
        <trans-unit id="476d9ec701e2de6a6c37ab5211117a7cb8333a27" translate="yes" xml:space="preserve">
          <source>stdout</source>
          <target state="translated">stdout</target>
        </trans-unit>
        <trans-unit id="abf2af82450fe8a25b8fd52be056c75ed0e169dd" translate="yes" xml:space="preserve">
          <source>to show
the results without causing a recursive &amp;ldquo;captured output is printed and then
captured again&amp;rdquo; loop. There&amp;rsquo;s an optional</source>
          <target state="translated">чтобы показать результаты, не вызывая рекурсивного цикла &amp;laquo;захваченный вывод распечатывается, а затем снова захватывается&amp;raquo;. Есть необязательный</target>
        </trans-unit>
        <trans-unit id="7c23946dffb55ffa0ee800ecba4e2d38b3a1d5d6" translate="yes" xml:space="preserve">
          <source>to work (Windows definitely isn&amp;rsquo;t supported).</source>
          <target state="translated">работать (Windows точно не поддерживается).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
