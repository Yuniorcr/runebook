<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/chex/">
    <body>
      <group id="chex">
        <trans-unit id="94ebe4e059572fd03ab09692bf1063dd3d86d4fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with_device&lt;/code&gt; -- places all arguments (except specified in &lt;code&gt;ignore_argnums&lt;/code&gt;
argument) into device memory before applying the function.</source>
          <target state="translated">&lt;code&gt;with_device&lt;/code&gt; - помещает все аргументы (кроме указанных в аргументе &lt;code&gt;ignore_argnums&lt;/code&gt; ) в память устройства перед применением функции.</target>
        </trans-unit>
        <trans-unit id="8d7a2e239f42c5889aa22b47d19320c62702f9c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with_jit&lt;/code&gt; -- applies &lt;code&gt;jax.jit()&lt;/code&gt; transformation to the function.</source>
          <target state="translated">&lt;code&gt;with_jit&lt;/code&gt; - применяет преобразование &lt;code&gt;jax.jit()&lt;/code&gt; к функции.</target>
        </trans-unit>
        <trans-unit id="73fc0bf901b3a1dc523d8d47441bd7896e9c20ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with_pmap&lt;/code&gt; -- applies &lt;code&gt;jax.pmap()&lt;/code&gt; transformation to the function (see notes below).</source>
          <target state="translated">&lt;code&gt;with_pmap&lt;/code&gt; - применяет преобразование &lt;code&gt;jax.pmap()&lt;/code&gt; к функции (см. примечания ниже).</target>
        </trans-unit>
        <trans-unit id="d497dc4255a95a0f3f66e305d104e9c0bc55eb74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;without_device&lt;/code&gt; -- places all arguments in RAM before applying the function.</source>
          <target state="translated">&lt;code&gt;without_device&lt;/code&gt; - помещает все аргументы в ОЗУ перед применением функции.</target>
        </trans-unit>
        <trans-unit id="2de3bafc6bc4edde0e1137e203b918fa6b241b93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;without_jit&lt;/code&gt; -- uses the function as is, i.e. identity transformation.</source>
          <target state="translated">&lt;code&gt;without_jit&lt;/code&gt; - использует функцию как есть, т.е. преобразование идентичности.</target>
        </trans-unit>
        <trans-unit id="f0707e674ed5b9ef816bbb00c3cbf37715ab25a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[&lt;code&gt;@chex.all_variants&lt;/code&gt;]&lt;/strong&gt; You can get all supported variants
by using the decorator &lt;code&gt;@chex.all_variants&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;[ &lt;code&gt;@chex.all_variants&lt;/code&gt; ]&lt;/strong&gt; Вы можете получить все поддерживаемые варианты, используя декоратор &lt;code&gt;@chex.all_variants&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c38f042fc2db72773ed7be756867a2f72c46cd5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[&lt;code&gt;jax.vmap&lt;/code&gt;]&lt;/strong&gt; All variants can be applied to a vmapped function;
please see an example in &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants_test.py&quot;&gt;variants_test.py&lt;/a&gt; (&lt;code&gt;test_vmapped_fn_named_params&lt;/code&gt; and
&lt;code&gt;test_pmap_vmapped_fn&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;[ &lt;code&gt;jax.vmap&lt;/code&gt; ]&lt;/strong&gt; Все варианты могут быть применены к функции vmapped; см. пример в &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants_test.py&quot;&gt;вариантах_test.py&lt;/a&gt; ( &lt;code&gt;test_vmapped_fn_named_params&lt;/code&gt; и &lt;code&gt;test_pmap_vmapped_fn&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f0fee62873e6b291bc5bbc161839ad7e77907b54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[&lt;code&gt;with_pmap&lt;/code&gt; variant]&lt;/strong&gt;&lt;code&gt;jax.pmap(fn)&lt;/code&gt;
(&lt;a href=&quot;https://jax.readthedocs.io/en/latest/jax.html#jax.pmap&quot;&gt;doc&lt;/a&gt;) performs
parallel map of &lt;code&gt;fn&lt;/code&gt; onto multiple devices. Since most tests run in a
single-device environment (i.e. having access to a single CPU or GPU), in which
case &lt;code&gt;jax.pmap&lt;/code&gt; is a functional equivalent to &lt;code&gt;jax.jit&lt;/code&gt;, &lt;code&gt;with_pmap&lt;/code&gt; variant is
skipped by default (although it works fine with a single device). Below we
describe  a way to properly test &lt;code&gt;fn&lt;/code&gt; if it is supposed to be used in
multi-device environments (TPUs or multiple CPUs/GPUs). To disable skipping
&lt;code&gt;with_pmap&lt;/code&gt; variants in case of a single device, add
&lt;code&gt;--chex_skip_pmap_variant_if_single_device=false&lt;/code&gt; to your test command.</source>
          <target state="translated">&lt;strong&gt;[ вариант &lt;code&gt;with_pmap&lt;/code&gt; ] &lt;/strong&gt; &lt;code&gt;jax.pmap(fn)&lt;/code&gt; ( &lt;a href=&quot;https://jax.readthedocs.io/en/latest/jax.html#jax.pmap&quot;&gt;doc&lt;/a&gt; ) выполняет параллельное отображение &lt;code&gt;fn&lt;/code&gt; на нескольких устройствах. Поскольку большинство тестов выполняется в среде с одним устройством (то есть с доступом к одному процессору или графическому процессору), и в этом случае &lt;code&gt;jax.pmap&lt;/code&gt; является функциональным эквивалентом &lt;code&gt;jax.jit&lt;/code&gt; , вариант &lt;code&gt;with_pmap&lt;/code&gt; по умолчанию пропускается (хотя он отлично работает с одно устройство). Ниже мы описываем способ правильного тестирования &lt;code&gt;fn&lt;/code&gt; , если его предполагается использовать в средах с несколькими устройствами (TPU или несколько процессоров / графических процессоров). Чтобы отключить пропуск вариантов &lt;code&gt;with_pmap&lt;/code&gt; в случае одного устройства, добавьте &lt;code&gt;--chex_skip_pmap_variant_if_single_device=false&lt;/code&gt; вашей тестовой команде.</target>
        </trans-unit>
        <trans-unit id="7344b59df0142036cff36140e29bee990d210dcd" translate="yes" xml:space="preserve">
          <source>Assertions (&lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/asserts.py&quot;&gt;asserts.py&lt;/a&gt;)</source>
          <target state="translated">Утверждения ( &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/asserts.py&quot;&gt;asserts.py&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="77f04361417d35f25ee269aa12e70afb164deb38" translate="yes" xml:space="preserve">
          <source>Chex</source>
          <target state="translated">Chex</target>
        </trans-unit>
        <trans-unit id="0e096629f49d68312a4f90560da17c872bbc7099" translate="yes" xml:space="preserve">
          <source>Chex can be installed with pip directly from github, with the following command:</source>
          <target state="translated">Чекс может быть установлен с помощью трубопровода непосредственно с помощью github,с помощью следующей команды:</target>
        </trans-unit>
        <trans-unit id="a14362556cb357f09b74617d9b06ccaedc9deeb4" translate="yes" xml:space="preserve">
          <source>Chex currently supports the following variants:</source>
          <target state="translated">В настоящее время Chex поддерживает следующие варианты:</target>
        </trans-unit>
        <trans-unit id="2edb1b607f5aefafd3442c4d3008d0b380a3d508" translate="yes" xml:space="preserve">
          <source>Chex has a flag &lt;code&gt;chex_n_cpu_devices&lt;/code&gt; that specifies a number of CPU threads to
use as XLA devices.</source>
          <target state="translated">Chex имеет флаг &lt;code&gt;chex_n_cpu_devices&lt;/code&gt; , который указывает количество потоков ЦП для использования в качестве устройств XLA.</target>
        </trans-unit>
        <trans-unit id="cca243615eb459aab282f190ec64e7336ca2ec5a" translate="yes" xml:space="preserve">
          <source>Chex implementation of &lt;code&gt;dataclass&lt;/code&gt; registers dataclasses as internal &lt;a href=&quot;https://jax.readthedocs.io/en/latest/pytrees.html&quot;&gt;&lt;em&gt;PyTree&lt;/em&gt;
nodes&lt;/a&gt; to ensure
compatibility with JAX data structures.</source>
          <target state="translated">Реализация класса данных &lt;code&gt;dataclass&lt;/code&gt; регистрирует классы данных как внутренние &lt;a href=&quot;https://jax.readthedocs.io/en/latest/pytrees.html&quot;&gt; узлы &lt;/a&gt;&lt;em&gt;PyTree&lt;/em&gt; для обеспечения совместимости со структурами данных JAX.</target>
        </trans-unit>
        <trans-unit id="be62373b687a2b6dffa02f28eae16b548f5af222" translate="yes" xml:space="preserve">
          <source>Chex is a library of utilities for helping to write reliable JAX code.</source>
          <target state="translated">Chex-это библиотека утилит,помогающих писать надежный JAX-код.</target>
        </trans-unit>
        <trans-unit id="82bee0900bcc641448a9731adf5b5f9c66488097" translate="yes" xml:space="preserve">
          <source>Chex: Testing made fun, in JAX!</source>
          <target state="translated">Чекс:Тестирование было забавным,в JAX!</target>
        </trans-unit>
        <trans-unit id="f8d97282d9be5bcd887f88377f045f5d97359f7b" translate="yes" xml:space="preserve">
          <source>Citing Chex</source>
          <target state="translated">Ссылка на Чекс</target>
        </trans-unit>
        <trans-unit id="8efaa1ad264c622f0f5ef83166df75ec8abbc8d2" translate="yes" xml:space="preserve">
          <source>Dataclass (&lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/dataclass.p&quot;&gt;dataclass.py&lt;/a&gt;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/dataclass.p&quot;&gt;Класс данных&lt;/a&gt; ( dataclass.py )</target>
        </trans-unit>
        <trans-unit id="c96fcfadd237e5889741902127b2c6e6d8697ab4" translate="yes" xml:space="preserve">
          <source>Debug (e.g. transforming &lt;code&gt;pmaps&lt;/code&gt; in &lt;code&gt;vmaps&lt;/code&gt; within a context manager).</source>
          <target state="translated">Отладка (например, преобразование &lt;code&gt;pmaps&lt;/code&gt; в &lt;code&gt;vmaps&lt;/code&gt; в диспетчере контекста).</target>
        </trans-unit>
        <trans-unit id="af670505ca585be15f7492e64d2cb7ef2f8dcdaa" translate="yes" xml:space="preserve">
          <source>Debugging in JAX is made more difficult by code transformations such as &lt;code&gt;jit&lt;/code&gt;
and &lt;code&gt;pmap&lt;/code&gt;, which introduce optimizations that make code hard to inspect and
trace. It can also be difficult to disable those transformations during
debugging as they can be called at several places in the underlying
code. Chex provides tools to globally replace &lt;code&gt;jax.jit&lt;/code&gt; with a no-op
transformation and &lt;code&gt;jax.pmap&lt;/code&gt; with a (non-parallel) &lt;code&gt;jax.vmap&lt;/code&gt;, in order to more
easily debug code in a single-device context.</source>
          <target state="translated">Отладка в JAX усложняется преобразованиями кода, такими как &lt;code&gt;jit&lt;/code&gt; и &lt;code&gt;pmap&lt;/code&gt; , которые вводят оптимизацию, затрудняющую проверку и отслеживание кода. Также может быть сложно отключить эти преобразования во время отладки, поскольку они могут вызываться в нескольких местах базового кода. Chex предоставляет инструменты для глобальной замены &lt;code&gt;jax.jit&lt;/code&gt; безоперационным преобразованием и &lt;code&gt;jax.pmap&lt;/code&gt; (непараллельным) &lt;code&gt;jax.vmap&lt;/code&gt; , чтобы упростить отладку кода в контексте одного устройства.</target>
        </trans-unit>
        <trans-unit id="760804486c322c9a6435615b1eea56ea1813d4a3" translate="yes" xml:space="preserve">
          <source>E.g. suppose you want to ensure that all tensors &lt;code&gt;t1&lt;/code&gt;, &lt;code&gt;t2&lt;/code&gt;, &lt;code&gt;t3&lt;/code&gt; have the same
shape, and that tensors &lt;code&gt;t4&lt;/code&gt;, &lt;code&gt;t5&lt;/code&gt; have rank &lt;code&gt;2&lt;/code&gt; and (&lt;code&gt;3&lt;/code&gt; or &lt;code&gt;4&lt;/code&gt;), respectively.</source>
          <target state="translated">Например, предположим, что вы хотите убедиться, что все тензоры &lt;code&gt;t1&lt;/code&gt; , &lt;code&gt;t2&lt;/code&gt; , &lt;code&gt;t3&lt;/code&gt; имеют одинаковую форму и что тензоры &lt;code&gt;t4&lt;/code&gt; , &lt;code&gt;t5&lt;/code&gt; имеют ранг &lt;code&gt;2&lt;/code&gt; и ( &lt;code&gt;3&lt;/code&gt; или &lt;code&gt;4&lt;/code&gt; ) соответственно.</target>
        </trans-unit>
        <trans-unit id="2c236d214c67d12e9d980b4c08a69cfc88855493" translate="yes" xml:space="preserve">
          <source>E.g. suppose you want to test the output of a function &lt;code&gt;fn&lt;/code&gt; with or without jit.
You can use &lt;code&gt;chex.variants&lt;/code&gt; to run the test with both the jitted and non-jitted
version of the function by simply decorating a test method with
&lt;code&gt;@chex.variants&lt;/code&gt;, and then using &lt;code&gt;self.variant(fn)&lt;/code&gt; in place of &lt;code&gt;fn&lt;/code&gt; in the body
of the test.</source>
          <target state="translated">Например, предположим, что вы хотите протестировать вывод функции &lt;code&gt;fn&lt;/code&gt; с jit или без него. Вы можете использовать &lt;code&gt;chex.variants&lt;/code&gt; для запуска теста как с измененной, так и с нестандартной версией функции, просто украсив тестовый метод с помощью &lt;code&gt;@chex.variants&lt;/code&gt; , а затем используя &lt;code&gt;self.variant(fn)&lt;/code&gt; вместо &lt;code&gt;fn&lt;/code&gt; в теле теста.</target>
        </trans-unit>
        <trans-unit id="ca96675bbe3dc223fd955101d8a4622a9c8be468" translate="yes" xml:space="preserve">
          <source>Example of parameterized test:</source>
          <target state="translated">Пример параметризованного теста:</target>
        </trans-unit>
        <trans-unit id="23685afeaf21ac3b25ae4df66e1bb9507e6af7ef" translate="yes" xml:space="preserve">
          <source>Fakes (&lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake.py&quot;&gt;fake.py&lt;/a&gt;)</source>
          <target state="translated">Подделки ( &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake.py&quot;&gt;fake.py&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="d127af681671fb470ae3a1ab8e3ba11bc5ed8cbb" translate="yes" xml:space="preserve">
          <source>Faking multi-device test environments</source>
          <target state="translated">Фальсификация тестовых сред с несколькими устройствами</target>
        </trans-unit>
        <trans-unit id="4e5c9e32d792b12b4af457881c55dbeb73d00294" translate="yes" xml:space="preserve">
          <source>For example, you can use Chex to fake &lt;code&gt;pmap&lt;/code&gt; and have it replaced with a &lt;code&gt;vmap&lt;/code&gt;.
This can be achieved by wrapping your code with a context manager:</source>
          <target state="translated">Например, вы можете использовать Chex для подделки &lt;code&gt;pmap&lt;/code&gt; и замены его на &lt;code&gt;vmap&lt;/code&gt; . Этого можно достичь, обернув ваш код диспетчером контекста:</target>
        </trans-unit>
        <trans-unit id="364c22d211f08dfc5bde413824a95bf157fcab8e" translate="yes" xml:space="preserve">
          <source>If you define the function in the test method, you may also use &lt;code&gt;self.variant&lt;/code&gt;
as a decorator in the function definition. For example:</source>
          <target state="translated">Если вы определяете функцию в методе тестирования, вы также можете использовать &lt;code&gt;self.variant&lt;/code&gt; в качестве декоратора в определении функции. Например:</target>
        </trans-unit>
        <trans-unit id="b979d9a78d9058438385bde7512b4c981a6a0e6e" translate="yes" xml:space="preserve">
          <source>In addition, you can fake a real multi-device test environment with a
multi-threaded CPU. See section &lt;strong&gt;Faking multi-device test environments&lt;/strong&gt; for
more details.</source>
          <target state="translated">Кроме того, вы можете подделать настоящую тестовую среду с несколькими устройствами с многопоточным процессором. Дополнительные сведения см. В разделе &amp;laquo; &lt;strong&gt;Подделка тестовых сред&lt;/strong&gt; с несколькими устройствами&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="6b1ceb5a8cdb3a7d13573dc428a97fd35b492ef5" translate="yes" xml:space="preserve">
          <source>In particular, one can force XLA to use a single CPU's threads as separate
devices, i.e. to fake a real multi-device environment with a multi-threaded one.
These two options are theoretically equivalent from XLA perspective because they
expose the same interface and use identical abstractions.</source>
          <target state="translated">В частности,можно заставить XLA использовать потоки одного процессора в качестве отдельных устройств,т.е.подделать реальную многопотоковую среду с многопоточностью.Эти два варианта теоретически эквивалентны с точки зрения XLA,так как они демонстрируют один и тот же интерфейс и используют одинаковые абстракции.</target>
        </trans-unit>
        <trans-unit id="9763181224ed68ff0ae45c803c01d8917092621b" translate="yes" xml:space="preserve">
          <source>In situations where you do not have easy access to multiple devices, you can
still test parallel computation using single-device multi-threading.</source>
          <target state="translated">В ситуациях,когда у вас нет легкого доступа к нескольким устройствам,вы все равно можете протестировать параллельные вычисления,используя одно-устройство многопоточности.</target>
        </trans-unit>
        <trans-unit id="1034e0fde9193849b4b017e3ffac5c4c476dc7f7" translate="yes" xml:space="preserve">
          <source>In this bibtex entry, the version number is intended to be from
&lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/__init__.py&quot;&gt;chex/__init__.py&lt;/a&gt;,
and the year corresponds to the project's open-source release.</source>
          <target state="translated">В этой записи bibtex номер версии должен быть из &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/__init__.py&quot;&gt;chex / __ init__.py&lt;/a&gt; , а год соответствует выпуску проекта с открытым исходным кодом.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="64b5dbc70985ca8727aef7c08c8446030448f12e" translate="yes" xml:space="preserve">
          <source>Instrument your code (e.g. assertions)</source>
          <target state="translated">Придумайте свой код (например,утверждения).</target>
        </trans-unit>
        <trans-unit id="56e6481b71aabe40a5779488d0a26caf7348a36d" translate="yes" xml:space="preserve">
          <source>JAX relies extensively on code transformation and compilation, meaning that it
can be hard to ensure that code is properly tested. For instance, just testing a
python function using JAX code will not cover the actual code path that is
executed when jitted, and that path will also differ whether the code is jitted
for CPU, GPU, or TPU. This has been a source of obscure and hard to catch bugs
where XLA changes would lead to undesirable behaviours that however only
manifest in one specific code transformation.</source>
          <target state="translated">JAX в значительной степени полагается на трансформацию и компиляцию кода,а это означает,что может быть сложно обеспечить правильную проверку кода.Например,простое тестирование функции питона с помощью JAX-кода не покроет реальный путь к коду,который выполняется при переходе,и этот путь также будет отличаться,идет ли код на CPU,GPU или TPU.Это было источником непонятных и трудно пойманных ошибок,где изменение XLA привело бы к нежелательному поведению,которое,однако,проявляется только в одном специфическом преобразовании кода.</target>
        </trans-unit>
        <trans-unit id="44a381f082d0a94e8e24432fe1b8809a859624e6" translate="yes" xml:space="preserve">
          <source>JAX-friendly dataclass implementation reusing python &lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html#module-dataclasses&quot;&gt;dataclasses&lt;/a&gt;.</source>
          <target state="translated">Дружественная к JAX реализация классов данных с повторным использованием &lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html#module-dataclasses&quot;&gt;классов данных&lt;/a&gt; Python .</target>
        </trans-unit>
        <trans-unit id="7fd7ac52ae8201efd1ed242c1d0e91dd7caa9247" translate="yes" xml:space="preserve">
          <source>Modules Overview</source>
          <target state="translated">Обзор модулей</target>
        </trans-unit>
        <trans-unit id="f6d94e28d36f5c53e9bb080a0cbccb7bd8e9c7a3" translate="yes" xml:space="preserve">
          <source>More examples can be found in &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants_test.py&quot;&gt;variants_test.py&lt;/a&gt;, &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake_test.py&quot;&gt;fake_test.py&lt;/a&gt; and &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake_set_n_cpu_devices_test.py&quot;&gt;fake_set_n_cpu_devices_test.py&lt;/a&gt;.</source>
          <target state="translated">Больше примеров можно найти в &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants_test.py&quot;&gt;вариантах_test.py&lt;/a&gt; , &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake_test.py&quot;&gt;fake_test.py&lt;/a&gt; и &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake_set_n_cpu_devices_test.py&quot;&gt;fake_set_n_cpu_devices_test.py&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="08965269be31a1f77226663d4b16152886fa2985" translate="yes" xml:space="preserve">
          <source>More examples:</source>
          <target state="translated">Еще примеры:</target>
        </trans-unit>
        <trans-unit id="9a8c5d77a3061656258e25a1a873daeb3eac5fc5" translate="yes" xml:space="preserve">
          <source>Now you can launch your test with &lt;code&gt;python test.py --chex_n_cpu_devices=N&lt;/code&gt; to run
it in multi-device regime. Note that &lt;strong&gt;all&lt;/strong&gt; tests within a module will have an
access to &lt;code&gt;N&lt;/code&gt; devices.</source>
          <target state="translated">Теперь вы можете запустить свой тест с помощью &lt;code&gt;python test.py --chex_n_cpu_devices=N&lt;/code&gt; , чтобы запустить его в режиме нескольких устройств. Обратите внимание, что &lt;strong&gt;все&lt;/strong&gt; тесты в модуле будут иметь доступ к &lt;code&gt;N&lt;/code&gt; устройствам.</target>
        </trans-unit>
        <trans-unit id="39ded40573e8327bb4561daf363d568ef5185204" translate="yes" xml:space="preserve">
          <source>One limitation of PyType annotations for JAX is that they do not support the
specification of &lt;code&gt;DeviceArray&lt;/code&gt; ranks, shapes or dtypes. Chex includes a number
of functions that allow flexible and concise specification of these properties.</source>
          <target state="translated">Одно ограничение PyType аннотаций для JAX является то , что они не поддерживают спецификацию &lt;code&gt;DeviceArray&lt;/code&gt; рангов, форм или dtypes. Chex включает ряд функций, которые позволяют гибко и кратко определять эти свойства.</target>
        </trans-unit>
        <trans-unit id="466a6688e1929562c79cbb67ecc154ec9b0efd41" translate="yes" xml:space="preserve">
          <source>See documentation in &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake.py&quot;&gt;fake.py&lt;/a&gt; and examples in &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake_test.py&quot;&gt;fake_test.py&lt;/a&gt; for more details.</source>
          <target state="translated">См. Документацию в &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake.py&quot;&gt;fake.py&lt;/a&gt; и примеры в &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/fake_test.py&quot;&gt;fake_test.py&lt;/a&gt; для получения более подробной информации.</target>
        </trans-unit>
        <trans-unit id="c5c15775c922f964d3d7765ef4526da08ed971e9" translate="yes" xml:space="preserve">
          <source>See documentation in &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants.py&quot;&gt;variants.py&lt;/a&gt; for more details on the supported variants.
More examples can be found in &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants_test.py&quot;&gt;variants_test.py&lt;/a&gt;.</source>
          <target state="translated">Дополнительную информацию о поддерживаемых вариантах см. В документации в &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants.py&quot;&gt;вариантах&lt;/a&gt; .py. Больше примеров можно найти в &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants_test.py&quot;&gt;вариантах_test.py&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d508862cb4771fc01c43a05e9ed39242299c5c3a" translate="yes" xml:space="preserve">
          <source>See documentation of &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/asserts.py&quot;&gt;asserts.py&lt;/a&gt; for details on all supported assertions.</source>
          <target state="translated">См. Документацию &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/asserts.py&quot;&gt;asserts.py&lt;/a&gt; для получения подробной информации обо всех поддерживаемых утверждениях.</target>
        </trans-unit>
        <trans-unit id="bca13ab692ddcac83c3f581f48b2874e56a256f8" translate="yes" xml:space="preserve">
          <source>Test JAX code across many &lt;code&gt;variants&lt;/code&gt; (e.g. jitted vs non-jitted).</source>
          <target state="translated">Протестируйте JAX-код во многих &lt;code&gt;variants&lt;/code&gt; (например, jitted vs non-jitted).</target>
        </trans-unit>
        <trans-unit id="19bb5350389a346c5566820992648a379262d201" translate="yes" xml:space="preserve">
          <source>Test classes that use &lt;code&gt;@chex.variants&lt;/code&gt; must inherit from
&lt;code&gt;chex.TestCase&lt;/code&gt; (or any other base class that unrolls tests generators
within &lt;code&gt;TestCase&lt;/code&gt;, e.g. &lt;code&gt;absl.testing.parameterized.TestCase&lt;/code&gt;).</source>
          <target state="translated">Классы тестов, использующие &lt;code&gt;@chex.variants&lt;/code&gt; должны быть наследованы от &lt;code&gt;chex.TestCase&lt;/code&gt; (или любого другого базового класса, который разворачивает генераторы тестов в &lt;code&gt;TestCase&lt;/code&gt; , например, &lt;code&gt;absl.testing.parameterized.TestCase&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="90724c1ce61531cfcebdb49c2ec31ecceeba16e2" translate="yes" xml:space="preserve">
          <source>Test variants (&lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants.py&quot;&gt;variants.py&lt;/a&gt;)</source>
          <target state="translated">Варианты тестирования ( &lt;a href=&quot;https://github.com/deepmind/chex/blob/master/chex/_src/variants.py&quot;&gt;options.py&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="4b85178d8c8a663aebf3af9f9772995bca8fe96a" translate="yes" xml:space="preserve">
          <source>The same functionality can also be invoked with &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;:</source>
          <target state="translated">Та же функция может быть вызвана &lt;code&gt;start&lt;/code&gt; и &lt;code&gt;stop&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a13a8016452dc00349676f4fcee8e94af45f3ba7" translate="yes" xml:space="preserve">
          <source>This includes utils to help:</source>
          <target state="translated">Это включает в себя утилиты,чтобы помочь:</target>
        </trans-unit>
        <trans-unit id="452bb0f3c924efe70d033ab04de348cecec75af4" translate="yes" xml:space="preserve">
          <source>To cite this repository:</source>
          <target state="translated">Чтобы процитировать этот репозиторий:</target>
        </trans-unit>
        <trans-unit id="675ab48e655a33f35b0fa419e12fb8772dc2a516" translate="yes" xml:space="preserve">
          <source>To set up a multi-threaded XLA environment for &lt;code&gt;absl&lt;/code&gt; tests, define
&lt;code&gt;setUpModule&lt;/code&gt; function in your test module:</source>
          <target state="translated">Чтобы настроить многопоточную среду XLA для тестов &lt;code&gt;absl&lt;/code&gt; , определите функцию &lt;code&gt;setUpModule&lt;/code&gt; в своем тестовом модуле:</target>
        </trans-unit>
        <trans-unit id="da3b1cc6863425d59dec746ab9233d545fa2d48e" translate="yes" xml:space="preserve">
          <source>Variants make it easy to ensure that unit tests cover different &amp;lsquo;variations&amp;rsquo; of
a function, by providing a simple decorator that can be used to repeat any test
under all (or a subset) of the relevant code transformations.</source>
          <target state="translated">Варианты позволяют легко гарантировать, что модульные тесты охватывают различные &amp;laquo;вариации&amp;raquo; функции, предоставляя простой декоратор, который можно использовать для повторения любого теста при всех (или подмножестве) соответствующих преобразований кода.</target>
        </trans-unit>
        <trans-unit id="04809452e50b47ee7de134ac0b7b7b86d3f666fd" translate="yes" xml:space="preserve">
          <source>Variants notes</source>
          <target state="translated">Варианты ответов</target>
        </trans-unit>
        <trans-unit id="bc0ac604ab79b32cc792cd355919b25e15ea9bbc" translate="yes" xml:space="preserve">
          <source>or from PyPI:</source>
          <target state="translated">или от PyPI:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
