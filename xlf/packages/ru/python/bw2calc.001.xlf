<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/bw2calc/">
    <body>
      <group id="bw2calc">
        <trans-unit id="da39a3ee5e6b4b0d3255bfef95601890afd80709" translate="yes" xml:space="preserve">
          <source/>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17606854f8ce660a9f509844c5e509fece88dd97" translate="yes" xml:space="preserve">
          <source>The Monte Carlo LCA class can do about 30 iterations a second (on a 2011 MacBook Pro). Instead of doing LU factorization, it uses an initial guess and the conjugant gradient squared algorithm.</source>
          <target state="translated">Класс LCA Монте-Карло может делать около 30 итераций в секунду (на MacBook Pro 2011 г.).Вместо того,чтобы делать LU-факторизацию,он использует начальную догадку и алгоритм квадратного градиента.</target>
        </trans-unit>
        <trans-unit id="9410b1ac58a0f5e490df4f25684985c7393b5724" translate="yes" xml:space="preserve">
          <source>The emphasis here has been on speed of solving the linear systems, for normal LCA calculations, graph traversal, or Monte Carlo uncertainty analysis.</source>
          <target state="translated">Здесь акцент был сделан на скорость решения линейных систем,для расчетов нормального LCA,обхода графика,или анализа неопределенности Монте-Карло.</target>
        </trans-unit>
        <trans-unit id="332470e3d7c0885ab730cc99c4edcf51a6098458" translate="yes" xml:space="preserve">
          <source>The multiprocessing Monte Carlo class (ParallelMonteCarlo) can do about 100 iterations a second, using 7 virtual cores. The MultiMonteCarlo class, which does Monte Carlo for many processes (and hence can re-use the factorized technosphere matrix), can do about 500 iterations a second, using 7 virtual cores. Both these algorithms perform best when the initial setup for each worker job is minimized, e.g. by dispatching big chunks.</source>
          <target state="translated">Многопроцессорный класс Monte Carlo (ParallelMonteCarlo)может выполнять около 100 итераций в секунду,используя 7 виртуальных ядер.Класс MultiMonteCarlo,который делает Монте-Карло для многих процессов (и,следовательно,может повторно использовать факторизованную техносферную матрицу),может делать около 500 итераций в секунду,используя 7 виртуальных ядер.Оба этих алгоритма лучше всего работают,когда начальная настройка для каждого рабочего места сведена к минимуму,например,путем отправки больших кусков.</target>
        </trans-unit>
        <trans-unit id="e8fa0c2541b4ff41005026981fb88a842d263ff3" translate="yes" xml:space="preserve">
          <source>This package provides the calculation engine for the &lt;a href=&quot;https://brightwaylca.org&quot;&gt;Brightway2 life cycle assessment framework&lt;/a&gt;. &lt;a href=&quot;https://docs.brightwaylca.org/&quot;&gt;Online documentation&lt;/a&gt; is available, and the source code is hosted on &lt;a href=&quot;https://bitbucket.org/cmutel/brightway2-calc&quot;&gt;Bitucket&lt;/a&gt;.</source>
          <target state="translated">Этот пакет предоставляет вычислительный механизм для структуры &lt;a href=&quot;https://brightwaylca.org&quot;&gt;оценки жизненного цикла Brightway2&lt;/a&gt; . Доступна &lt;a href=&quot;https://docs.brightwaylca.org/&quot;&gt;онлайн-документация&lt;/a&gt; , а исходный код размещен на &lt;a href=&quot;https://bitbucket.org/cmutel/brightway2-calc&quot;&gt;Bitucket&lt;/a&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
