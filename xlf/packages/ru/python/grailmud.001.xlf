<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/grailmud/">
    <body>
      <group id="grailmud">
        <trans-unit id="35a20710a67ce1d93ad224463fb892934456cb89" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s code and add the goblin
logic in there.</source>
          <target state="translated">и добавьте туда логику гоблина.</target>
        </trans-unit>
        <trans-unit id="69f1a772a103f106040e1e5fc7bdb6ed21c404c8" translate="yes" xml:space="preserve">
          <source>A Python MUD server</source>
          <target state="translated">Сервер Python MUD</target>
        </trans-unit>
        <trans-unit id="f660583deb8d9a1fc5042fb8a1c14a8a4d2e2c65" translate="yes" xml:space="preserve">
          <source>Decoupling object logic and object state results in promoting &amp;lsquo;controllers&amp;rsquo;
(or as they ended up being called in the codebase, &lt;em&gt;delegates&lt;/em&gt;, in the Self
tradition) to first-class objects which can be added or removed from objects
at will. So if you want a staff to suddenly start acting like a goblin chief,
it becomes as simple as this:</source>
          <target state="translated">Разделение логики объекта и состояния объекта приводит к продвижению &amp;laquo;контроллеров&amp;raquo; (или, как они в конечном итоге вызывались в кодовой базе, &lt;em&gt;делегатами&lt;/em&gt; , в традиции Self) до первоклассных объектов, которые могут быть добавлены или удалены из объектов по желанию. Итак, если вы хотите, чтобы посох внезапно начал действовать как вождь гоблинов, это становится очень просто:</target>
        </trans-unit>
        <trans-unit id="2f580c18380983d909ab8ed0e762474eba7adc85" translate="yes" xml:space="preserve">
          <source>One result of the decoupling of display and game logic is that the difference
between player avatars and NPCs becomes the &amp;lsquo;controller&amp;rsquo; (the object that
receives the object&amp;rsquo;s events and acts upon them) for players is linked to a
socket (via the bowels of Twisted) and a few extra instance variables and
methods on the player (eg, the player&amp;rsquo;s password hash, and the method to take
a line of input and dispatch it to the appropriate command). In more tightly
coupled implementations, players and NPCs are different beasts entirely,
possibly resulting in ridiculous duplication like different &amp;lsquo;take away &lt;em&gt;X&lt;/em&gt;
hitpoints&amp;rsquo; routines for each type, which should reside in a common base class.</source>
          <target state="translated">Одним из результатов разделения отображения и игровой логики является то, что разница между аватарами игроков и NPC становится `` контроллером '' (объект, который получает события объекта и воздействует на них) для игроков, подключенных к сокету (через недра Twisted ) и несколько дополнительных переменных экземпляра и методов на проигрывателе (например, хеш пароля игрока и метод для получения строки ввода и отправки ее соответствующей команде). В более тесно связанных реализациях игроки и NPC - это совершенно разные звери, что может привести к нелепому дублированию, например, различным подпрограммам &amp;laquo;убрать &lt;em&gt;X&lt;/em&gt; хитпоинтов&amp;raquo; для каждого типа, которые должны находиться в общем базовом классе.</target>
        </trans-unit>
        <trans-unit id="5bdee608fa661c1b5b42d8036a9e58c876a2a097" translate="yes" xml:space="preserve">
          <source>StaffObject</source>
          <target state="translated">StaffObject</target>
        </trans-unit>
        <trans-unit id="796ef8afc2a04895ef9d3c38e51c25c6880b0cc3" translate="yes" xml:space="preserve">
          <source>These points make grailmud different from other (aspiring-to-be)
production-ready MUD servers in this area (ie, MUDs written in Python).
PythonMOO, POO, et al, have used a custom scripting language for programming
game logic in, wheras grailmud uses Python for this task. Buyasta, wordplay,
et al, have a tighter coupling between display and game logic. nakedmud
reimplements a -lot- of stuff in C (ick!) which is already done in some
library, or which can be done painlessly in Python. There are many, many
hackish little MUD servers written (I wrote 2 or 3 of them before I got the
design more-or-less Right), but none of these are really suitable to build a
whole game in.</source>
          <target state="translated">Эти точки делают греймвуд отличным от других (будущих)готовых к производству MUD-серверов в этой области (т.е.MUD,написанных на языке Python).PythonMOO,POO и др.использовали пользовательский скриптовый язык для программирования игровой логики,если в грейлмуде для этой задачи используется Python.Buyasta,wordplay и др.,имеют более тесную связь между дисплеем и игровой логикой.nakedmud переделывает -лот вещей на C (ick!),что уже сделано в какой-то библиотеке,или что может быть сделано безболезненно на Python.Есть много,много хакерских маленьких MUD-серверов,написанных (я написал 2 или 3 из них до того,как я получил дизайн более или менее Правильно),но ни один из них не подходит для построения целой игры в.</target>
        </trans-unit>
        <trans-unit id="7a8942901e61a4f168cd3a280ed469807aa28ce8" translate="yes" xml:space="preserve">
          <source>grailmud is a MUD server written entirely in Python (though optimising
bottlenecks in C, and a more restricted language for builders and untrusted
coders to work in are options which will be considered in the future) with a
loosely coupled design between the game logic and the display logic for
players, as well as a more loose than is traditional coupling between object
logic and object state. grailmud also leverages Twisted, pyparsing and durus,
so a bare minimum of low-level (networking|parsing|serialisation) code has to
be written.</source>
          <target state="translated">grailmud-это MUD-сервер,полностью написанный на Python (хотя оптимизация узких мест на C,а также более ограниченный язык для строителей и недоверенных кодеров для работы в нем-это варианты,которые будут рассматриваться в будущем).Грейльмуд также использует Twisted,pyparsing и durus,так что нужно написать минимум низкоуровневого кода (networking|parsing|serialisation).</target>
        </trans-unit>
        <trans-unit id="7996c3f3750c7adbd6240d4b253cc9cff31940d3" translate="yes" xml:space="preserve">
          <source>rather than having to delve into the</source>
          <target state="translated">вместо того,чтобы углубляться в</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
