<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/asynqueue/">
    <body>
      <group id="asynqueue">
        <trans-unit id="66179e04cd581cd55472563ee8587ce658020aeb" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing based on the &lt;em&gt;Twisted&lt;/em&gt; framework, with task
prioritization and a powerful worker interface. Worker implementations
are included for running tasks asynchronously in the main thread, in
separate threads, in separate Python interpreters (multiprocessing),
and even on separate devices using Twisted's Asynchronous Message
Protocol.</source>
          <target state="translated">Асинхронная организация очередей задач на основе &lt;em&gt;Twisted&lt;/em&gt; framework с приоритезацией задач и мощным рабочим интерфейсом. Включены реализации рабочих процессов для асинхронного выполнения задач в основном потоке, в отдельных потоках, в отдельных интерпретаторах Python (многопроцессорность) и даже на отдельных устройствах с использованием протокола асинхронных сообщений Twisted.</target>
        </trans-unit>
        <trans-unit id="6128a235c0fd39685f6b5b99b7fadbfec5342418" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing with Twisted: threaded, multicore, and remote.</source>
          <target state="translated">Асинхронная очередь задач с Twisted:потоковой,многоядерной и удаленной.</target>
        </trans-unit>
        <trans-unit id="959199c5e1b1d30e53adfe003d916868a2a40023" translate="yes" xml:space="preserve">
          <source>Includes an example package
&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; that generates
Mandelbrot set images, row by row, demonstrating the power of
asynchronous multi-core processing. An instance of
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;
dispatches the computations for each row of pixels to workers running
on separate Python processes. The color-mapped RGB results are
collected as they come back and intelligently buffered for iterating
in a proper sequence to a third-party PNG library that wouldn't
ordinarily play nice with Twisted.</source>
          <target state="translated">Включает пример пакета &lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot,&lt;/a&gt; который генерирует изображения наборов Мандельброта, строка за строкой, демонстрируя возможности асинхронной многоядерной обработки. Экземпляр &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt; отправляет вычисления для каждой строки пикселей рабочим, работающим в отдельных процессах Python. Результаты RGB с отображением цветов собираются по мере их возврата и интеллектуально буферизируются для итерации в надлежащей последовательности в стороннюю библиотеку PNG, которая обычно не работает с Twisted.</target>
        </trans-unit>
        <trans-unit id="85daa8d0fd14d30741e29b572dbfda1d090a6fc9" translate="yes" xml:space="preserve">
          <source>Includes deferred iteration capability: Calling a task that returns an
iterator can return a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;
instead, which does the iteration in a Twisted-friendly fashion, even
over a network connection. You can also supply an object conforming to
Twisted's &lt;em&gt;IConsumer&lt;/em&gt; interface and iterations will be fed to it as they
become available.</source>
          <target state="translated">Включает возможность отложенной итерации: вызов задачи, которая возвращает итератор, может вместо этого вернуть &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt; , который выполняет итерацию удобным для Twisted способом, даже через сетевое соединение. Вы также можете предоставить объект, соответствующий интерфейсу Twisted &lt;em&gt;IConsumer,&lt;/em&gt; и итерации будут передаваться ему по мере их доступности.</target>
        </trans-unit>
        <trans-unit id="169b63918b76adefc1f65fe3ec1bfb21b732f5ab" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;util&lt;/em&gt; module contains a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt;
object that makes the import worthwhile all on its own. You can use
its &lt;strong&gt;put&lt;/strong&gt; method to track Twisted &lt;em&gt;Deferred&lt;/em&gt; objects without inserting
anything into their callback chains. Then you can wait in non-blocking
Twisted fashion for all, any, or some of the tracked deferreds to fire
(again, without getting tangled up with any of their callbacks) using
the tracker's &lt;strong&gt;deferToAll&lt;/strong&gt;, &lt;strong&gt;deferToAny&lt;/strong&gt;, and &lt;strong&gt;deferUntilFewer&lt;/strong&gt;
methods.</source>
          <target state="translated">Модуль &lt;em&gt;util&lt;/em&gt; содержит объект &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker,&lt;/a&gt; который делает импорт полезным сам по себе. Вы можете использовать его метод &lt;strong&gt;put&lt;/strong&gt; для отслеживания объектов Twisted &lt;em&gt;Deferred,&lt;/em&gt; не вставляя ничего в их цепочки обратных вызовов. Затем вы можете подождать неблокирующим образом Twisted для срабатывания всех, любых или некоторых отслеживаемых отложенных вызовов (опять же, не запутавшись ни в одном из их обратных вызовов), используя методы трекера &lt;strong&gt;deferToAll&lt;/strong&gt; , &lt;strong&gt;deferToAny&lt;/strong&gt; и &lt;strong&gt;deferUntilFewer&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="eb7d5439f2d9250bf009f7a2be477526c15559f6" translate="yes" xml:space="preserve">
          <source>There was some effort toward Python 3 compatiblity a while ago, but
it's still not yet supported.</source>
          <target state="translated">Некоторое время назад были предприняты некоторые усилия по обеспечению совместимости на Python 3,но это до сих пор не поддерживается.</target>
        </trans-unit>
        <trans-unit id="9f5ed9620d68c79dd8003b36b7a5bc59d3c01f81" translate="yes" xml:space="preserve">
          <source>You can try things out after installation by running &lt;code&gt;mcmandelbrot&lt;/code&gt;
(with a few options and arguments) from the console. The output of the
script is a PNG file, which you can view by piping to the free Feh
image viewer: Just add &lt;code&gt;|feh -&lt;/code&gt; at the end of the command line.</source>
          <target state="translated">Вы можете попробовать что-то после установки, запустив &lt;code&gt;mcmandelbrot&lt;/code&gt; (с несколькими параметрами и аргументами) из консоли. Результатом сценария является файл PNG, который можно просмотреть, подключившись к бесплатному средству просмотра изображений &lt;code&gt;|feh -&lt;/code&gt; : просто добавьте | feh - в конец командной строки.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
