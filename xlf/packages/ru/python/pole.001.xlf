<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/pole/">
    <body>
      <group id="pole">
        <trans-unit id="88a1ce1c00462dbe1c5159da2af022aaa7251170" translate="yes" xml:space="preserve">
          <source>- Calendar: calend&amp;aacute;rio especial baseado em PopupWindow e usado por DateButton</source>
          <target state="translated">- Calendar: calend&amp;aacute;rio especial baseado em PopupWindow e usado por DateButton</target>
        </trans-unit>
        <trans-unit id="0e04e8f1a9078244d887500860672a64da751f6a" translate="yes" xml:space="preserve">
          <source>- DateButton: um bot&amp;atilde;o que exibe em seu label uma data, m&amp;ecirc;s e/ou hora e ao clicar abre um calend&amp;aacute;rio especial de acordo com o tipo.</source>
          <target state="translated">- DateButton: um bot&amp;atilde;o que exibe em seu label uma data, m&amp;ecirc;s e/ou hora e ao clicar abre um calend&amp;aacute;rio especial de acordo com o tipo.</target>
        </trans-unit>
        <trans-unit id="f29c1c3c455b9c6b47fddc688aba99ea9f588ccd" translate="yes" xml:space="preserve">
          <source>- Grid: classe que possibilita o tratamento de uma grade e um modelo complexo, que segura em si os valores originais e os valores formatados para apresentar na grade, uma forma muito mais amig&amp;aacute;vel para o desenvolvedor e o usu&amp;aacute;rio, utiliza o PoleUtil.convert_and_format. Se a coluna for do tipo float, ser&amp;aacute; apresentado '9.999.999,99' por exemplo, se for int ser&amp;aacute; '9.999.999', ser for bool ser&amp;aacute; uma caixa de verifica&amp;ccedil;&amp;atilde;o, se for date ser&amp;aacute; 'dd/mm/yyyy', , se for time ser&amp;aacute; 'hh:mm:ss' e assim por diante</source>
          <target state="translated">- Grid: classe que possibilita o tratamento de uma grade e um modelo complexo, que segura em si os valores originais e os valores formatados para apresentar na grade, uma forma muito mais amig&amp;aacute;vel para o desenvolvedor e o usu&amp;aacute;rio, utiliza o PoleUtil.convert_and_format. Se a coluna for do tipo float, ser&amp;aacute; apresentado '9.999.999,99' por exemplo, se for int ser&amp;aacute; '9.999.999', ser for bool ser&amp;aacute; uma caixa de verifica&amp;ccedil;&amp;atilde;o, se for date ser&amp;aacute; 'dd/mm/yyyy', , se for time ser&amp;aacute; 'hh:mm:ss' e assim por diante</target>
        </trans-unit>
        <trans-unit id="0f0cb1c20ee6e9d1aca3a0adffccc809c5dbe282" translate="yes" xml:space="preserve">
          <source>- GridRow: uma linha da grade retornada como iterador, por exemplo quando se faz &quot;for linha in grade&quot;, a&amp;iacute; pode-se acessar a coluna pelo nome com linha[&quot;coluna&quot;] ou pelo n&amp;uacute;mero linha[n], e retorna um tupla com o valor original e o formatado.</source>
          <target state="translated">- GridRow: uma linha da grade retornada como iterador, por exemplo quando se faz &quot;for linha in grade&quot;, a&amp;iacute; pode-se acessar a coluna pelo nome com linha[&quot;coluna&quot;] ou pelo n&amp;uacute;mero linha[n], e retorna um tupla com o valor original e o formatado.</target>
        </trans-unit>
        <trans-unit id="094febc6b06c19af825c4de88324695feb35468f" translate="yes" xml:space="preserve">
          <source>- PopupWindow: cria um popup e o posiciona a partir de um widget, ficando abaixo deste, como calend&amp;aacute;rio, ou centralizado e d&amp;aacute; um retorno que quiser ao ser chamado com run() e fica parado neste ponto.</source>
          <target state="translated">- PopupWindow: cria um popup e o posiciona a partir de um widget, ficando abaixo deste, como calend&amp;aacute;rio, ou centralizado e d&amp;aacute; um retorno que quiser ao ser chamado com run() e fica parado neste ponto.</target>
        </trans-unit>
        <trans-unit id="48ef08b7abfe4dcb83975c62a1643be19b84ea9d" translate="yes" xml:space="preserve">
          <source>- Project: classe base para projetos usando PoleGTK que possibilita &quot;self.nome_widget&quot; acessar o widget feito com o Glade</source>
          <target state="translated">- Project: classe base para projetos usando PoleGTK que possibilita &quot;self.nome_widget&quot; acessar o widget feito com o Glade</target>
        </trans-unit>
        <trans-unit id="a8b25cc566ee5b1dc56dd20c8930a4565897ac66" translate="yes" xml:space="preserve">
          <source>- VirtualWidget: classe que encapsula um widget do GTK para facilitar acesso &amp;agrave;s propriedade</source>
          <target state="translated">- VirtualWidget: classe que encapsula um widget do GTK para facilitar acesso &amp;agrave;s propriedade</target>
        </trans-unit>
        <trans-unit id="ba12ffdcd8fff45a54d07baf69c9b6a925103442" translate="yes" xml:space="preserve">
          <source>- build_interface: juntamento com NEW_CLASSES, traduz classes do Glade para classes do PoleGTK, assim um GtkTreeView no Glade com nome iniciando com 'gr_' &amp;eacute; transformado em Grid do PoleGTK, GtkEntry iniciando com 'ed_' vira Editor do PoleGTK, GtkWindow iniciado por 'popup_' vira PopupWindow do PoleGTK, GtkButton do Glade iniciado por 'dt_' vira DateButton do PoleGTK. As propriedade extras dessas classes devem ser colocadas em &quot;Dicas de Ferramentas&quot; no Glade, por exemplo, no GtkEntry, iniciado com nome &quot;ed_...&quot; e na &quot;Dicas de ferramentas&quot; tiver &quot;[dica]|upper&quot; (dica &amp;eacute; opcional e pipe &amp;eacute; separador entre dica e configura&amp;ccedil;&amp;otilde;es), todo texto digitado ser&amp;aacute; transformado em mai&amp;uacute;sculas. Veja o micro-tutorial no github.</source>
          <target state="translated">- build_interface: juntamento com NEW_CLASSES, traduz classes do Glade para classes do PoleGTK, assim um GtkTreeView no Glade com nome iniciando com 'gr_' &amp;eacute; transformado em Grid do PoleGTK, GtkEntry iniciando com 'ed_' vira Editor do PoleGTK, GtkWindow iniciado por 'popup_' vira PopupWindow do PoleGTK, GtkButton do Glade iniciado por 'dt_' vira DateButton do PoleGTK. As propriedade extras dessas classes devem ser colocadas em &quot;Dicas de Ferramentas&quot; no Glade, por exemplo, no GtkEntry, iniciado com nome &quot;ed_...&quot; e na &quot;Dicas de ferramentas&quot; tiver &quot;[dica]|upper&quot; (dica &amp;eacute; opcional e pipe &amp;eacute; separador entre dica e configura&amp;ccedil;&amp;otilde;es), todo texto digitado ser&amp;aacute; transformado em mai&amp;uacute;sculas. Veja o micro-tutorial no github.</target>
        </trans-unit>
        <trans-unit id="ec2b42c0c6b509ba641d48d83299ab8e328a09ab" translate="yes" xml:space="preserve">
          <source>- load_images_as_icon: transforma uma imagem em um &amp;iacute;cone de stock com o mesmo nome do arquivo, onde este pode ser usado no Glade tal como &quot;gtk-close&quot; e escolher o tamanho padronizado pelo GTK</source>
          <target state="translated">- load_images_as_icon: transforma uma imagem em um &amp;iacute;cone de stock com o mesmo nome do arquivo, onde este pode ser usado no Glade tal como &quot;gtk-close&quot; e escolher o tamanho padronizado pelo GTK</target>
        </trans-unit>
        <trans-unit id="b8c7361eb744f9dd598b25791a8e6ff5850d50ba" translate="yes" xml:space="preserve">
          <source>- load_module: carrega um outro projeto herdado de PoleGTK.Project e segura a execu&amp;ccedil;&amp;atilde;o neste ponto</source>
          <target state="translated">- load_module: carrega um outro projeto herdado de PoleGTK.Project e segura a execu&amp;ccedil;&amp;atilde;o neste ponto</target>
        </trans-unit>
        <trans-unit id="6c96f55f9dbdfc83fd0cec100710d6ec93b0d892" translate="yes" xml:space="preserve">
          <source>- message: mensagem na tela vinculada (ou n&amp;atilde;o) &amp;agrave; uma janela</source>
          <target state="translated">- message: mensagem na tela vinculada (ou n&amp;atilde;o) &amp;agrave; uma janela</target>
        </trans-unit>
        <trans-unit id="5d839516af5c37d7b20e3abb8e54189ad84b4734" translate="yes" xml:space="preserve">
          <source>- try_function: decorador para callbacks que mostra uma janela para o usu&amp;aacute;rio quando houver algum erro com informa&amp;ccedil;&amp;otilde;es sucintas e imprime no terminal mais detalhes usando PoleLog.</source>
          <target state="translated">- try_function: decorador para callbacks que mostra uma janela para o usu&amp;aacute;rio quando houver algum erro com informa&amp;ccedil;&amp;otilde;es sucintas e imprime no terminal mais detalhes usando PoleLog.</target>
        </trans-unit>
        <trans-unit id="6e3e474612f63e7cb1cb4f56f214958835c7d5a0" translate="yes" xml:space="preserve">
          <source>A micro framework for PyGtk, PDF, XML, Utilities and Brazilan NFe.</source>
          <target state="translated">Микро-фреймворк для PyGtk,PDF,XML,Utilities и Brazilan NFe.</target>
        </trans-unit>
        <trans-unit id="6b4fc262c6cb81941966ee81d8f6c9c9cca8987a" translate="yes" xml:space="preserve">
          <source>Al&amp;eacute;m disso, ainda vinculado tem o Projeto GladePy, que l&amp;ecirc; um arquivo .ui gerado pelo Glade e cria ou atualizar um .py pronto para desenvolver, com todas as fun&amp;ccedil;&amp;otilde;es de callback criadas no Glade e com os devidos imports, al&amp;eacute;m de possibilitar que se inclua no c&amp;oacute;digo a .ui de forma &quot;criptografada&quot; onde n&amp;atilde;o &amp;eacute; preciso ter a interface num arquivo separado, bom para distribuir vers&amp;otilde;es est&amp;aacute;veis. Para terminar, fiz uma altera&amp;ccedil;&amp;atilde;o no Glade que possibilita chamar um programa externo com informa&amp;ccedil;&amp;atilde;o do arquivo .ui e da fun&amp;ccedil;&amp;atilde;o callback que foi clicada, no caso chamando o GladePy, ele j&amp;aacute; atualiza o .py e te posiciona nessa fun&amp;ccedil;&amp;atilde;o usando o Geany, mas pode ser configurado outro editor, desde que ele tenha par&amp;acirc;metro para posicionamento em linha e coluna atrav&amp;eacute;s do arquivo $HOME/.gladepy.conf</source>
          <target state="translated">Al&amp;eacute;m disso, ainda vinculado tem o Projeto GladePy, que l&amp;ecirc; um arquivo .ui gerado pelo Glade e cria ou atualizar um .py pronto para desenvolver, com todas as fun&amp;ccedil;&amp;otilde;es de callback criadas no Glade e com os devidos imports, al&amp;eacute;m de possibilitar que se inclua no c&amp;oacute;digo a .ui de forma &quot;criptografada&quot; onde n&amp;atilde;o &amp;eacute; preciso ter a interface num arquivo separado, bom para distribuir vers&amp;otilde;es est&amp;aacute;veis. Para terminar, fiz uma altera&amp;ccedil;&amp;atilde;o no Glade que possibilita chamar um programa externo com informa&amp;ccedil;&amp;atilde;o do arquivo .ui e da fun&amp;ccedil;&amp;atilde;o callback que foi clicada, no caso chamando o GladePy, ele j&amp;aacute; atualiza o .py e te posiciona nessa fun&amp;ccedil;&amp;atilde;o usando o Geany, mas pode ser configurado outro editor, desde que ele tenha par&amp;acirc;metro para posicionamento em linha e coluna atrav&amp;eacute;s do arquivo $HOME/.gladepy.conf</target>
        </trans-unit>
        <trans-unit id="f7488b4c2beb852ec7c86d68d1ca7bfcebbe8282" translate="yes" xml:space="preserve">
          <source>M&amp;oacute;dulos:</source>
          <target state="translated">M&amp;oacute;dulos:</target>
        </trans-unit>
        <trans-unit id="931e95fc3243ae527bab54665ef172b8def7e199" translate="yes" xml:space="preserve">
          <source>PoleDANFe.py: gera DANFe em PDF a partir de uma tabela de banco de dados ou XML (ainda terminando)</source>
          <target state="translated">PoleDANFe.py:генерирует PDF DANFe из таблицы базы данных или XML (до сих пор заканчивающийся).</target>
        </trans-unit>
        <trans-unit id="95fa4e95a75b07be158e5ea8055875565ef2f65d" translate="yes" xml:space="preserve">
          <source>PoleGTK.py: algumas classes e fun&amp;ccedil;&amp;otilde;es que tornam o uso do GTK no Python bastante leg&amp;iacute;vel e f&amp;aacute;cil, atualmente tem-se as fun&amp;ccedil;&amp;otilde;es:</source>
          <target state="translated">PoleGTK.py: algumas classes e fun&amp;ccedil;&amp;otilde;es que tornam o uso do GTK no Python bastante leg&amp;iacute;vel e f&amp;aacute;cil, atualmente tem-se as fun&amp;ccedil;&amp;otilde;es:</target>
        </trans-unit>
        <trans-unit id="8393cc6a8a1f71b0590dbe30d1c21d03871ba51d" translate="yes" xml:space="preserve">
          <source>PoleLog.py: apenas fun&amp;ccedil;&amp;otilde;es para log e depura&amp;ccedil;&amp;atilde;o em terminal, projetos para fazer log em arquivo em andamento</source>
          <target state="translated">PoleLog.py: apenas fun&amp;ccedil;&amp;otilde;es para log e depura&amp;ccedil;&amp;atilde;o em terminal, projetos para fazer log em arquivo em andamento</target>
        </trans-unit>
        <trans-unit id="88ee00b412e52e4aa22b6ed8ab2f948e7cda61c5" translate="yes" xml:space="preserve">
          <source>PoleNFe.py: utiliza o suds para wsdl e uma estrutura de diret&amp;oacute;rios que deve ser especialmente prepara para utilizar os webservices da Nota Fiscal Eletr&amp;ocirc;nica</source>
          <target state="translated">PoleNFe.py: utiliza o suds para wsdl e uma estrutura de diret&amp;oacute;rios que deve ser especialmente prepara para utilizar os webservices da Nota Fiscal Eletr&amp;ocirc;nica</target>
        </trans-unit>
        <trans-unit id="96a88d957d6d34fa28e62d738edde9ab4b2629c7" translate="yes" xml:space="preserve">
          <source>PolePDF.py: usado para gerar pdf usando c&amp;eacute;lulas e tabelas de forma bem intuitiva, baseado em reportlabs, onde estes objetos j&amp;aacute; se encaixando da esquerda para a direita e de cima para baixo (teoria de cortes de planos), ou podem ser posicionados de forma flutuante e absoluta</source>
          <target state="translated">PolePDF.py: usado para gerar pdf usando c&amp;eacute;lulas e tabelas de forma bem intuitiva, baseado em reportlabs, onde estes objetos j&amp;aacute; se encaixando da esquerda para a direita e de cima para baixo (teoria de cortes de planos), ou podem ser posicionados de forma flutuante e absoluta</target>
        </trans-unit>
        <trans-unit id="21baccc81c6a0450a82bc33c46db83180ef9e897" translate="yes" xml:space="preserve">
          <source>PoleRelatorio.py: m&amp;oacute;dulo para criar relat&amp;oacute;rios em PDF a partir de alguns par&amp;acirc;metros e dados, usando c&amp;eacute;lulas e tabelas via PolePDF</source>
          <target state="translated">PoleRelatorio.py: m&amp;oacute;dulo para criar relat&amp;oacute;rios em PDF a partir de alguns par&amp;acirc;metros e dados, usando c&amp;eacute;lulas e tabelas via PolePDF</target>
        </trans-unit>
        <trans-unit id="414b36854bad82321e367faaff24e4b783b42bf5" translate="yes" xml:space="preserve">
          <source>PoleUtil.py: v&amp;aacute;rias fun&amp;ccedil;&amp;otilde;es &amp;uacute;teis para o dia a dia, onde a mais importante &amp;eacute; a convert_and_format, que usa a localiza&amp;ccedil;&amp;atilde;o para converter string, n&amp;uacute;meros, datas e booleano.</source>
          <target state="translated">PoleUtil.py: v&amp;aacute;rias fun&amp;ccedil;&amp;otilde;es &amp;uacute;teis para o dia a dia, onde a mais importante &amp;eacute; a convert_and_format, que usa a localiza&amp;ccedil;&amp;atilde;o para converter string, n&amp;uacute;meros, datas e booleano.</target>
        </trans-unit>
        <trans-unit id="99f863108ecdbd41de05601d4922ca49a786a9ec" translate="yes" xml:space="preserve">
          <source>PoleXML.py: uma pytoniza&amp;ccedil;&amp;atilde;o do libxml2, assim pode-se criar/alterar/obter um atribo xml com `xml.no['atrubuto'] = 'valor'&amp;acute; e o conte&amp;uacute;do de um n&amp;oacute; com `xml.no = 'conte&amp;uacute;do'&amp;acute; e a estrutura se auto gera ao fazer `xml.no1.no2.no3 = 'teste'&amp;acute;</source>
          <target state="translated">PoleXML.py: uma pytoniza&amp;ccedil;&amp;atilde;o do libxml2, assim pode-se criar/alterar/obter um atribo xml com `xml.no['atrubuto'] = 'valor'&amp;acute; e o conte&amp;uacute;do de um n&amp;oacute; com `xml.no = 'conte&amp;uacute;do'&amp;acute; e a estrutura se auto gera ao fazer `xml.no1.no2.no3 = 'teste'&amp;acute;</target>
        </trans-unit>
        <trans-unit id="b8b523b256a739bdf35420cda47bf2e92b08192b" translate="yes" xml:space="preserve">
          <source>PoleXmlSec.c: em CPython, assina XML e verifica (ainda com problemas a verifica&amp;ccedil;&amp;atilde;o)</source>
          <target state="translated">PoleXmlSec.c: em CPython, assina XML e verifica (ainda com problemas a verifica&amp;ccedil;&amp;atilde;o)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
