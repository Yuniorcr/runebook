<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/pyce/">
    <body>
      <group id="pyce">
        <trans-unit id="7220d61e61d9e2652e2e8c73eaa03a6d2791500d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pyce&lt;/code&gt; enables the creation of a Trusted Computing Python environment by
ensuring each deployed file is precisely what the developer intended by
enforcing end-to-end encryption.  Execution halts if even a single bit of an
imported Python file is modified.</source>
          <target state="translated">&lt;code&gt;pyce&lt;/code&gt; позволяет создать среду Python для доверенных вычислений, гарантируя, что каждый развернутый файл соответствует задумке разработчика, обеспечивая сквозное шифрование. Выполнение останавливается, если изменяется хотя бы один бит импортированного файла Python.</target>
        </trans-unit>
        <trans-unit id="5b570989f30f2c44d1bf228f9676441765e87bf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pyce&lt;/code&gt; expects files to be pre-compiled Python bytecode, using a command
similar to &lt;code&gt;python3 -mcompileall -b&lt;/code&gt; where &lt;code&gt;-b&lt;/code&gt; does an in place compilation.</source>
          <target state="translated">&lt;code&gt;pyce&lt;/code&gt; ожидает, что файлы будут предварительно скомпилированы байт-кодом Python, используя команду, аналогичную &lt;code&gt;python3 -mcompileall -b&lt;/code&gt; , где &lt;code&gt;-b&lt;/code&gt; выполняет компиляцию на месте.</target>
        </trans-unit>
        <trans-unit id="40d8a7e89611ab4ff3927c3a37dc0215fd1c68fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pyce&lt;/code&gt; is a library to work with encrypted Python bytecode.  It adds
functionality to a Python runtime by extending the way the builtin keyword
&lt;code&gt;import&lt;/code&gt; works.  Currently, it assumes that convergent encryption will be used,
but the library can be extended.  For example, functionality could be added to
decrypt files via &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Hashicorp's Vault&lt;/a&gt; (which also
supports convergent encryption as a mode of operation).</source>
          <target state="translated">&lt;code&gt;pyce&lt;/code&gt; - это библиотека для работы с зашифрованным байт-кодом Python. Он добавляет функциональность среде выполнения Python, расширяя способ работы встроенного &lt;code&gt;import&lt;/code&gt; ключевых слов . В настоящее время предполагается, что будет использоваться конвергентное шифрование, но библиотеку можно расширить. Например, можно добавить функциональность для дешифрования файлов через &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;хранилище Hashicorp&lt;/a&gt; (которое также поддерживает конвергентное шифрование в качестве режима работы).</target>
        </trans-unit>
        <trans-unit id="f2e1bbf38f99446fb650d8b305e2e4b0cefb6b79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;At-rest Code Protection:&lt;/strong&gt; You could just protect code at rest by integrating
on-the-fly decryption with an IDE or other software.  This would be more of a
DIY project at this point in time, but &lt;code&gt;pyce&lt;/code&gt; gives you all the building blocks
you need!</source>
          <target state="translated">&lt;strong&gt;Защита&lt;/strong&gt; кода в состоянии покоя &lt;strong&gt;:&lt;/strong&gt; вы можете просто защитить код в состоянии покоя, интегрируя дешифрование на лету с IDE или другим программным обеспечением. На данный момент это будет скорее проект DIY, но &lt;code&gt;pyce&lt;/code&gt; дает вам все необходимые строительные блоки!</target>
        </trans-unit>
        <trans-unit id="7e54ad43a87b672fcb045309a94aeff66fe24495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;File Integrity Monitoring:&lt;/strong&gt; You could protect your production code running
on application servers by adding in automatic cryptographic checks of imports.</source>
          <target state="translated">&lt;strong&gt;Мониторинг целостности файлов:&lt;/strong&gt; вы можете защитить свой производственный код, работающий на серверах приложений, добавив автоматические криптографические проверки импорта.</target>
        </trans-unit>
        <trans-unit id="a4ff274c4c6f778a2747ce2f475183f6000f5f8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Licensing:&lt;/strong&gt; You could publish encrypted modules to PyPI and only release
decryption keys to certain organizations, people, or others!  You could publish
such modules anywhere!</source>
          <target state="translated">&lt;strong&gt;Лицензирование:&lt;/strong&gt; вы можете публиковать зашифрованные модули в PyPI и предоставлять ключи дешифрования только определенным организациям, людям или другим лицам! Вы можете опубликовать такие модули где угодно!</target>
        </trans-unit>
        <trans-unit id="d73cba4cd29d390c2e73cb25a75dfa70c74e76c7" translate="yes" xml:space="preserve">
          <source>All of this code is released under the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache v2.0
License&lt;/a&gt;.</source>
          <target state="translated">Весь этот код выпущен под &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;лицензией Apache v2.0&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4dcc292d2fb7b4058ad3d38bd0f91c85daef1f51" translate="yes" xml:space="preserve">
          <source>Execute encrypted Python bytecode.</source>
          <target state="translated">Выполнить зашифрованный байткод Python.</target>
        </trans-unit>
        <trans-unit id="6b522d4892272ac439a1152cd99727373df352f6" translate="yes" xml:space="preserve">
          <source>First, you'll want to encrypt a module or package.  &lt;strong&gt;Note: this is a
destructive action.&lt;/strong&gt;  Do not run this on a codebase that is not saved
elsewhere.  This can recursively operate on folders, and supports exclusion
lists (to not encrypt certain files).</source>
          <target state="translated">Во-первых, вам нужно зашифровать модуль или пакет. &lt;strong&gt;Примечание: это деструктивное действие. &lt;/strong&gt;Не запускайте это на базе кода, которая нигде не сохранена. Это может рекурсивно работать с папками и поддерживает списки исключений (чтобы не шифровать определенные файлы).</target>
        </trans-unit>
        <trans-unit id="b05b322d83bfb47db730d9d1707bae561b692314" translate="yes" xml:space="preserve">
          <source>How do I use it?</source>
          <target state="translated">Как мне его использовать?</target>
        </trans-unit>
        <trans-unit id="7044cdd9d6418ed93041c3eebc069f6785386acc" translate="yes" xml:space="preserve">
          <source>Key distribution is outside the scope of this project.  You will need to
maintain keys typically by using a networked key server such as &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Hashicorp's
Vault&lt;/a&gt;.  You could pass keys by environment
variable, &lt;code&gt;stdin&lt;/code&gt;, or some other mechanism.</source>
          <target state="translated">Распространение ключей выходит за рамки этого проекта. Обычно вам необходимо поддерживать ключи с помощью сетевого сервера ключей, такого как &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Hashicorp's Vault&lt;/a&gt; . Вы можете передавать ключи с помощью переменной среды, стандартного &lt;code&gt;stdin&lt;/code&gt; или другого механизма.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">Лицензия</target>
        </trans-unit>
        <trans-unit id="6a65edd353c5c3cd5039e413ffc77c8ff386b9b8" translate="yes" xml:space="preserve">
          <source>PYCE</source>
          <target state="translated">PYCE</target>
        </trans-unit>
        <trans-unit id="1c0b9ef46dd4b9fbb52c53cd6c10bf1330b4a8e0" translate="yes" xml:space="preserve">
          <source>Second, register your keys and try importing from the encrypted module or
package:</source>
          <target state="translated">Во-вторых,зарегистрируйте ключи и попробуйте импортировать их из зашифрованного модуля или пакета:</target>
        </trans-unit>
        <trans-unit id="6200e73c15ad9ab26f9436c0155499b816dcd3b5" translate="yes" xml:space="preserve">
          <source>Typically, you will leave (exclude) a stub file that is designed to just hook
Python's import path parsers, setup the keys, and then execute your code.</source>
          <target state="translated">Обычно,вы оставляете (исключаете)корешковый файл,который предназначен для того,чтобы просто подключить парсеры пути импорта Python,настроить ключи,а затем выполнить ваш код.</target>
        </trans-unit>
        <trans-unit id="356b951caf7cbe2df0adf165183ef4a7d86e7c13" translate="yes" xml:space="preserve">
          <source>What can I do with it?</source>
          <target state="translated">Что я могу с ним сделать?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
