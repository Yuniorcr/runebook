<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/argonautica/">
    <body>
      <group id="argonautica">
        <trans-unit id="195662646c06edbd6b499b5b7b8dd96bb3dfe173" translate="yes" xml:space="preserve">
          <source>* Indeed, argonautica has a feature that even the cannonical C implementation
lacks, i.e. hashing passwords with secret keys (the C implementation implements this, but
does not expose it publicly)</source>
          <target state="translated">* Действительно, у argonautica есть функция, которой нет даже в канонической реализации C, то есть хеширование паролей с секретными ключами (реализация C реализует это, но не раскрывает ее публично)</target>
        </trans-unit>
        <trans-unit id="ede0f3c56202fdbf000f4bdbd27f888e075eb202" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;The Apache License, Version 2.0&lt;/a&gt;, or</source>
          <target state="translated">&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Лицензия Apache, версия 2.0&lt;/a&gt; или</target>
        </trans-unit>
        <trans-unit id="51febab75ee75e8c4c4b7d70353a430c81211aa2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; version 3.9 or higher</source>
          <target state="translated">&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; версии 3.9 или выше</target>
        </trans-unit>
        <trans-unit id="a3837bf6aae91373ad5275ed79cabc9b6852605c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; version 3.4 or higher (or &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; version 3.5 or higher)</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; версии 3.4 или выше (или &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; версии 3.5 или выше)</target>
        </trans-unit>
        <trans-unit id="9cc7a2c6d141926a46b35ada4d5874007d72f4ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; version 1.26 or higher</source>
          <target state="translated">&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; версии 1.26 или выше</target>
        </trans-unit>
        <trans-unit id="a4f4b2ffcba94341fefc5dee4994e344deb70827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Argon2&lt;/code&gt; is a convenience class that holds both a &lt;code&gt;Hasher&lt;/code&gt; and a &lt;code&gt;Verifier&lt;/code&gt;. If you'd like to use just one class that knows how both to hash and to verify, instantiate an &lt;code&gt;Argon2&lt;/code&gt;. It works essentially the same way as &lt;code&gt;Hasher&lt;/code&gt; and &lt;code&gt;Verifier&lt;/code&gt; do.</source>
          <target state="translated">&lt;code&gt;Argon2&lt;/code&gt; - это удобный класс, который содержит как &lt;code&gt;Hasher&lt;/code&gt; и &lt;code&gt;Verifier&lt;/code&gt; . Если вы хотите использовать только один класс, который знает, как хешировать и проверять, создайте экземпляр &lt;code&gt;Argon2&lt;/code&gt; . По сути, он работает так же, как &lt;code&gt;Hasher&lt;/code&gt; и &lt;code&gt;Verifier&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42e43c02d5cc6dcf4f01ccf572544c66fe605969" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RandomSalt&lt;/code&gt; is a special kind of salt that will create new random salt bytes before each hash. A RandomSalt knows its length (in number of bytes). The default &lt;code&gt;Hasher&lt;/code&gt; uses a &lt;code&gt;RandomSalt&lt;/code&gt; with length of 32 bytes, but you can use your own &lt;code&gt;RandomSalt&lt;/code&gt; of custom length. When you instantiate a &lt;code&gt;RandomSalt&lt;/code&gt;, the constructor takes a length, e.g. &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RandomSalt&lt;/code&gt; - это особый вид соли, который создает новые байты случайной соли перед каждым хешем. RandomSalt знает свою длину (в байтах). По умолчанию &lt;code&gt;Hasher&lt;/code&gt; использует &lt;code&gt;RandomSalt&lt;/code&gt; длиной 32 байта, но вы можете использовать свой собственный &lt;code&gt;RandomSalt&lt;/code&gt; произвольной длины. Когда вы создаете экземпляр &lt;code&gt;RandomSalt&lt;/code&gt; , конструктор принимает длину, например &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7e9ef3323d845d8b7fe28b3a6c8ed8bac3d3d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install --upgrade pip&lt;/code&gt; or &lt;code&gt;pip install setuptools-rust&lt;/code&gt;. Note: setuptool-rust is not required if you have pip version 10.0 or above</source>
          <target state="translated">&lt;code&gt;pip install --upgrade pip&lt;/code&gt; или &lt;code&gt;pip install setuptools-rust&lt;/code&gt; . Примечание: setuptool-rust не требуется, если у вас версия пакета 10.0 или выше.</target>
        </trans-unit>
        <trans-unit id="9f9e21cec5bff7c00c47588c720b10c717c6cfc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install argonautica&lt;/code&gt;. Unfortunately, this step may take several minutes, as argonautica needs to compile it's Rust code for your specific CPU (due to its use of SIMD instructions). The upside, however, is that once compiled, argonautica should run blazingly fast</source>
          <target state="translated">&lt;code&gt;pip install argonautica&lt;/code&gt; . К сожалению, этот шаг может занять несколько минут, поскольку argonautica необходимо скомпилировать код Rust для вашего конкретного процессора (из-за использования инструкций SIMD). Однако положительным моментом является то, что после компиляции argonautica должна работать невероятно быстро.</target>
        </trans-unit>
        <trans-unit id="e1c91e3f30599a290b2b01dca0cda3b6be9dbdf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argon2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Аргон2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ec16863d4de7e250b1bc9ea235ef9d47e56dc61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HashRaw&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HashRaw&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddc9a492e751ec0ba5fa5059b73ea7d1f52a1435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LLVM:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LLVM:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb72c98066c0b5500b75fff01572f0dabe63aab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RandomSalt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;RandomSalt&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db8ffdf33529bce1203d1e34714e61c69da4dc95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rust:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ржавчина:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76771f82d99201c55f403bd9428ec0aed8e29448" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;аргонавтика:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d367fa420fee75b359d8b4b19d890e4bd1373c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is a Python package for hashing passwords that uses the cryptographically-secure &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; hashing algorithm.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; - это пакет Python для хеширования паролей, использующий криптографически безопасный алгоритм хеширования &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ceaca1a9a949ee490386b46d45ac5b124ea2344e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is licensed under either of:</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; лицензирована на условиях:</target>
        </trans-unit>
        <trans-unit id="86332913a7df9ce53012c8a6c20d92e902eca568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 to use &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instructions to peform it's hashing algorithm, which means it can be quite fast. The downside is that you have to compile it for your specific machine (this is why the &lt;code&gt;pip install argonautica&lt;/code&gt; process takes time). That said, on the developer's early 2014 Macbook Air, which has &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instruction through &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt;, argonautica runs ~30% faster than passlib on default settings.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; - единственная реализация argon2 на Python, использующая инструкции &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; для реализации своего алгоритма хеширования, что означает, что он может быть довольно быстрым. Обратной стороной является то, что вам нужно скомпилировать его для вашей конкретной машины (поэтому процесс &lt;code&gt;pip install argonautica&lt;/code&gt; требует времени). Тем не менее, на Macbook Air от разработчика в начале 2014 года, который имеет инструкции &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; через &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt; , argonautica работает примерно на 30% быстрее, чем passlib при настройках по умолчанию.</target>
        </trans-unit>
        <trans-unit id="6226e5be9a3b94dfed0589fbae7543c84509985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; supports the latest argon2 variant: argon2id, which, unless you have a reason not to, you should be using. A number of Python implementations do not yet support this variant.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; поддерживает последний вариант argon2: argon2id, который вам следует использовать, если у вас нет причин не делать этого. Ряд реализаций Python пока не поддерживают этот вариант.</target>
        </trans-unit>
        <trans-unit id="dd95e0f87d8aebc153c0145c144355188efd7f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; uses &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; type annotations everywhere in the code, which, in the author's humble opinion, is a very useful form of documentation; so if you're ever confused about what types to use for arguments, just pop open the code and take a look at the function signatures.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; использует аннотации типа &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; повсюду в коде, что, по скромному мнению автора, является очень полезной формой документации; поэтому, если вы когда-нибудь не понимаете, какие типы использовать для аргументов, просто откройте код и посмотрите на сигнатуры функций.</target>
        </trans-unit>
        <trans-unit id="7f09aa620c3a56871f93c5817cb52cab65fbb571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; was built with a simple use-case in mind: hashing passwords for storage in a
website's database. That said, it's also &quot;feature-complete&quot;, meaning anything you can do with
the cannonical &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C implementation&lt;/a&gt; of argon2
you can do with argonautica*.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt; была создана с учетом простого случая использования: хеширования паролей для хранения в базе данных веб-сайта. Тем не менее, он также &amp;laquo;полнофункциональный&amp;raquo;, то есть все, что вы можете делать с канонической &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;реализацией C&lt;/a&gt; argon2, вы можете делать с argonautica *.</target>
        </trans-unit>
        <trans-unit id="ca7d4b6bcd0af299645a83a7d4aea595025a5c74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mypy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;mypy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5669ec44ecef2ed5804540a396dd292f49b16257" translate="yes" xml:space="preserve">
          <source>AFAIK, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 that supports hashing with secret keys. Not even the &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;cannonical C implementation&lt;/a&gt; of argon2 exposes this feature publicly (it's in the code, but unfortunately not accessable via the public API).</source>
          <target state="translated">AFAIK, &lt;strong&gt;argonautica&lt;/strong&gt; - единственная реализация argon2 на Python, которая поддерживает хеширование с секретными ключами. Даже &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;каноническая реализация argon2 на C&lt;/a&gt; не раскрывает эту функцию публично (она есть в коде, но, к сожалению, недоступна через общедоступный API).</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">Альтернативы</target>
        </trans-unit>
        <trans-unit id="9ae5e35b46adfc77d4a514a98bde3b1fa47cc9aa" translate="yes" xml:space="preserve">
          <source>Arch linux: &lt;code&gt;pacman -S clang&lt;/code&gt;</source>
          <target state="translated">Arch linux: &lt;code&gt;pacman -S clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8eabad1d4bfdf2c84b2250a383bd249e22dcad89" translate="yes" xml:space="preserve">
          <source>Argon2 won the &lt;a href=&quot;https://password-hashing.net/&quot;&gt;Password Hashing Competition&lt;/a&gt; in 2015, a several year project to identify a successor to &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt;, and other common hashing algorithms.</source>
          <target state="translated">В 2015 году Argon2 выиграл &lt;a href=&quot;https://password-hashing.net/&quot;&gt;конкурс&lt;/a&gt; по хешированию паролей, рассчитанный на несколько лет, чтобы определить преемника &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt; , &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt; и других распространенных алгоритмов хеширования.</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Конфигурация</target>
        </trans-unit>
        <trans-unit id="45529ed06c625b76e4c4357555c4b0244426e657" translate="yes" xml:space="preserve">
          <source>Debian-based linux: &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</source>
          <target state="translated">Linux на основе Debian: &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b2776064a97e290ac856229ddad7ef1f00f1357" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 written in &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; (as opposed to C or C++). &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; is a &quot;systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&quot;</source>
          <target state="translated">Наконец, &lt;strong&gt;argonautica&lt;/strong&gt; - единственная реализация argon2 на Python, написанная на &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; (в отличие от C или C ++). &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; - это &amp;laquo;язык системного программирования, который работает невероятно быстро, предотвращает сбои и гарантирует безопасность потоков&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="6360e261bdf44c4f899f7ef00378583f501b8d5e" translate="yes" xml:space="preserve">
          <source>Follow the instructions &lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;here&lt;/a&gt;, which will just tell you to run the following command in your terminal and follow the on-screen instructions: &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</source>
          <target state="translated">Следуйте приведенным &lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;здесь&lt;/a&gt; инструкциям , которые просто скажут вам запустить следующую команду в вашем терминале и следовать инструкциям на экране: &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53e49a69fb315c4f51afc9825055d4858a064cdc" translate="yes" xml:space="preserve">
          <source>Hashing</source>
          <target state="translated">Хэшинг</target>
        </trans-unit>
        <trans-unit id="e95fb4d89f702858269571680eb4384b6e1d7b29" translate="yes" xml:space="preserve">
          <source>Hashing with &lt;strong&gt;argonautica&lt;/strong&gt; produces a string-encoded hash, but sometimes you might want the &quot;raw material&quot; behind this hash, i.e. the raw hash bytes, the raw salt bytes, or raw parameters, which are the three component parts of a string-encoded hash. To obtain these raw parts...</source>
          <target state="translated">Хеширование с помощью &lt;strong&gt;argonautica&lt;/strong&gt; создает хеш-код, закодированный строкой, но иногда вам может понадобиться &quot;исходный материал&quot;, стоящий за этим хешем, то есть необработанные байты хеша, необработанные байты соли или необработанные параметры, которые являются тремя составными частями закодированной строкой хэш. Чтобы получить эти сырые детали ...</target>
        </trans-unit>
        <trans-unit id="b53a956811aafe360ad463c2664de99be4dd6654" translate="yes" xml:space="preserve">
          <source>Idiomatic Argon2 password hashing for Python</source>
          <target state="translated">Идиоматическое хэширование пароля Аргон2 на Питон</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">Лицензия</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Разное</target>
        </trans-unit>
        <trans-unit id="95d388e8fafd9bc83d5b80bb3527b53a99d59f87" translate="yes" xml:space="preserve">
          <source>Other linux: Use your distribution's package manager</source>
          <target state="translated">Другой линукс:Используйте менеджер пакетов вашего дистрибутива</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Обзор</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Требования</target>
        </trans-unit>
        <trans-unit id="17e159a0b832fb918538fa8e1dc1427f74ab81de" translate="yes" xml:space="preserve">
          <source>The MIT license</source>
          <target state="translated">Лицензия MIT</target>
        </trans-unit>
        <trans-unit id="ce584f3715e750d6e40ca52529e7e6017d7221ff" translate="yes" xml:space="preserve">
          <source>There are several Python packages that implement argon2, including the excellent &lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt;, which uses &lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi&lt;/a&gt;, but...</source>
          <target state="translated">Есть несколько пакетов Python, реализующих argon2, в том числе отличный &lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt; , который использует &lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi&lt;/a&gt; , но ...</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Использование</target>
        </trans-unit>
        <trans-unit id="536244f4cc64c32141c5753233b90a09618435ae" translate="yes" xml:space="preserve">
          <source>Verifying</source>
          <target state="translated">Проверка</target>
        </trans-unit>
        <trans-unit id="a61dc7cfe81decf95f172527fe51435f115b2cce" translate="yes" xml:space="preserve">
          <source>Windows: Download a pre-built binary &lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Windows: загрузите готовый двоичный файл &lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;здесь&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2c07cb057a688edc054b308f1255acb4ededede" translate="yes" xml:space="preserve">
          <source>argonautica-py</source>
          <target state="translated">аргонаутика-пи</target>
        </trans-unit>
        <trans-unit id="f9bc3be46ae328e0c638fc70e35e07ff6d55dfab" translate="yes" xml:space="preserve">
          <source>at your option.</source>
          <target state="translated">по вашему выбору.</target>
        </trans-unit>
        <trans-unit id="32e74c13596c69be07e436be4b969f69cc195576" translate="yes" xml:space="preserve">
          <source>macOS: &lt;code&gt;brew install llvm&lt;/code&gt;, which requires &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;</source>
          <target state="translated">macOS: &lt;code&gt;brew install llvm&lt;/code&gt; , для которого требуется &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
