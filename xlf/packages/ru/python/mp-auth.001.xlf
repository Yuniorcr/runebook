<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/mp-auth/">
    <body>
      <group id="mp-auth">
        <trans-unit id="0c77360d80e4bb131a23da58c58c5db89f1b3d32" translate="yes" xml:space="preserve">
          <source>Add Multi-provider auth for various providers</source>
          <target state="translated">Добавить мульти-провайдер авто для различных провайдеров</target>
        </trans-unit>
        <trans-unit id="db3bc6c39fe038a45fb86f895589f506bf0c2499" translate="yes" xml:space="preserve">
          <source>Install the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)</source>
          <target state="translated">Установите промежуточное ПО для аутентификации Multiprovider Authentication для Django REST Framework (требуется Python 3).</target>
        </trans-unit>
        <trans-unit id="f365c609b0e3df72d19f5307e8b50df05266a6e7" translate="yes" xml:space="preserve">
          <source>Many authentication middleware packages have been writted for Django REST Framework with
support for OAuth2 opaque or JWT token. Most popular ones are listed with a short description
on &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt;. But all of them that support opaque tokens
require access to the Identity Provider database to verify the access tokens. Or they cannot be
stack up with other authentication classes to authenticate a bearer token against multiple
Identity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all
Identity Providers that issue JWT tokens and &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; that issues opaque access tokens. Support
for other Identity Providers can easily be added by creating a new backend in &lt;code&gt;mp_auth/backends&lt;/code&gt;.
Each backend can be used separately as an Django REST Framework authentication class, or can be a part of
list of authentication class that Django REST Framework will go through to authenticate an HTTP request.
&lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; is a special authentication class that calls all
authentication classes configured in &lt;code&gt;settings.py&lt;/code&gt;.</source>
          <target state="translated">Для Django REST Framework было написано множество пакетов промежуточного ПО для аутентификации с поддержкой непрозрачного OAuth2 или токена JWT. Самые популярные перечислены с кратким описанием в &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt; . Но все они, поддерживающие непрозрачные токены, требуют доступа к базе данных поставщика удостоверений для проверки токенов доступа. Или они не могут быть объединены с другими классами аутентификации для аутентификации токена-носителя против нескольких поставщиков удостоверений. Промежуточное программное обеспечение Multiprovider Authentication заполняет этот пробел. Он поддерживает всех поставщиков удостоверений, которые выпускают токены JWT, и &lt;a href=&quot;https://globus.org/&quot;&gt;Globus,&lt;/a&gt; который выдает непрозрачные токены доступа. Поддержка других поставщиков удостоверений может быть легко добавлена ​​путем создания нового серверного интерфейса в &lt;code&gt;mp_auth/backends&lt;/code&gt; .. Каждый бэкэнд может использоваться отдельно как класс аутентификации Django REST Framework или может быть частью списка классов аутентификации, через который Django REST Framework будет проходить аутентификацию HTTP-запроса. &lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; - это специальный класс аутентификации, который вызывает все классы аутентификации, настроенные в &lt;code&gt;settings.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab86ee1d35d4278b22e567dc8690b42b93f4cfb5" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication</source>
          <target state="translated">Аутентификация мультипровайдера</target>
        </trans-unit>
        <trans-unit id="85545c3c5d03b98f9f0c66cdebd184642f0ee177" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication is an easy to setup authentication middleware with support for
&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; and multiple OAuth2/OIDC Identity Providers that issue opaque
or JWT access tokens, e.g. &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;, &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;, etc.</source>
          <target state="translated">Multiprovider Authentication - это простое в настройке промежуточное ПО для аутентификации с поддержкой &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; и нескольких поставщиков удостоверений OAuth2 / OIDC, которые выдают непрозрачные токены доступа или токены доступа JWT, например &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt; , &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; и т.</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">Обоснование</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Настройка</target>
        </trans-unit>
        <trans-unit id="f7347011dad922ecb28d1f9f97cae602c60f8dc5" translate="yes" xml:space="preserve">
          <source>Then any view can be protected by &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, or, if you want to
authenticate an HTTP request against both &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, by
&lt;code&gt;MultiproviderAuthentication&lt;/code&gt; class.</source>
          <target state="translated">Тогда любое представление может быть защищено &lt;code&gt;JWTAuthentication&lt;/code&gt; или &lt;code&gt;GlobusAuthentication&lt;/code&gt; , или, если вы хотите аутентифицировать HTTP-запрос как против &lt;code&gt;JWTAuthentication&lt;/code&gt; ,так и &lt;code&gt;GlobusAuthentication&lt;/code&gt; , классом &lt;code&gt;MultiproviderAuthentication&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1220b82c1195db067a1119e19e5d9fe237de6f8" translate="yes" xml:space="preserve">
          <source>and in &lt;code&gt;settings.py&lt;/code&gt; set the following:</source>
          <target state="translated">и в &lt;code&gt;settings.py&lt;/code&gt; установите следующее:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
