<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/mesa-geo/">
    <body>
      <group id="mesa-geo">
        <trans-unit id="95ea506b38ee872d08a6f93af7a8a63e2d23f851" translate="yes" xml:space="preserve">
          <source>Agent-based modeling (ABM) in Python 3+</source>
          <target state="translated">Агентское моделирование (ABM)на Python 3+</target>
        </trans-unit>
        <trans-unit id="27ef550fa9b5065df5c5c330c3012dd94e01e0ec" translate="yes" xml:space="preserve">
          <source>By default the AgentCreator also sets further agent attributes from the Feature properties.</source>
          <target state="translated">По умолчанию AgentCreator также устанавливает дополнительные атрибуты агента из свойств Feature properties.</target>
        </trans-unit>
        <trans-unit id="4dbcbf31807f0ba1714d98b2f359d5f72a4c8387" translate="yes" xml:space="preserve">
          <source>First we create a &lt;code&gt;State&lt;/code&gt; Agent and a &lt;code&gt;GeoModel&lt;/code&gt;. Both should look familiar if you have worked with mesa before.</source>
          <target state="translated">Сначала мы создаем &lt;code&gt;State&lt;/code&gt; Agent и &lt;code&gt;GeoModel&lt;/code&gt; . Оба должны выглядеть знакомо, если вы раньше работали с мезой.</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="48136dddf5fa2de69f33868667ee8e35c7a68815" translate="yes" xml:space="preserve">
          <source>Going further</source>
          <target state="translated">Идти дальше</target>
        </trans-unit>
        <trans-unit id="0c0a3cb4b1caa9609ee3219bd71d0ad954902aa5" translate="yes" xml:space="preserve">
          <source>If you work in the Jupyter Notebook your output should give you the name of the state and a visual representation of the shape.</source>
          <target state="translated">Если вы работаете в ноутбуке Jupyter,на выходе должно быть указано название состояния и визуальное представление формы.</target>
        </trans-unit>
        <trans-unit id="39ce44f05ac3bcf094db91edb4c611eefe5d172f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;GeoModel&lt;/code&gt; we first create an instance of AgentCreator, where we provide the Agent class (State) and its required arguments, except shape and unique_id. We then use the &lt;code&gt;.from_GeoJSON&lt;/code&gt; function to create our agents from the shapes in the GeoJSON file. We provide the feature &quot;name&quot; as the key from which the agents get their unique_ids.
Finally, we add the agents to the GeoSpace</source>
          <target state="translated">В &lt;code&gt;GeoModel&lt;/code&gt; мы сначала создаем экземпляр AgentCreator, где мы предоставляем класс агента (State) и его необходимые аргументы, кроме shape и unique_id. Затем мы используем функцию &lt;code&gt;.from_GeoJSON&lt;/code&gt; для создания наших агентов из фигур в файле GeoJSON. Мы предоставляем функцию &amp;laquo;name&amp;raquo; как ключ, из которого агенты получают свои unique_id. Наконец, мы добавляем агентов в GeoSpace.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="c326931d0629d1b21f18e19d7bef228eed4e1ed5" translate="yes" xml:space="preserve">
          <source>Let's instantiate our model and look at one of the agents:</source>
          <target state="translated">Давайте инстанцируем нашу модель и посмотрим на одного из агентов:</target>
        </trans-unit>
        <trans-unit id="aa016c7332ec11889efc160882b15bdc111aff4c" translate="yes" xml:space="preserve">
          <source>Let's start to do some spatial analysis. We can use usual Mesa function names to get neighboring states</source>
          <target state="translated">Давайте начнем делать пространственный анализ.Мы можем использовать обычные имена функций Mesa для получения соседних состояний</target>
        </trans-unit>
        <trans-unit id="b32547c7b34de4be961a53e906749e7a157e04ba" translate="yes" xml:space="preserve">
          <source>On windows you should first use Anaconda to install some of the requirements with</source>
          <target state="translated">На окнах вы должны сначала использовать Anaconda,чтобы установить некоторые из требований с помощью</target>
        </trans-unit>
        <trans-unit id="4f8f99ecb227045017ba85aaec8e2a8e28bb221a" translate="yes" xml:space="preserve">
          <source>Since mesa-geo is in early development you could also install the latest version directly from Github via</source>
          <target state="translated">Так как mesa-geo находится в ранней стадии разработки,вы также можете установить последнюю версию непосредственно с Github по адресу</target>
        </trans-unit>
        <trans-unit id="4d46afd664f6f81e6062be02b45b89ae156c88d4" translate="yes" xml:space="preserve">
          <source>So let's get started with some shapes! We will work with &lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;records of US states&lt;/a&gt;. We use the &lt;code&gt;requests&lt;/code&gt; library to retrieve the data, but of course you can work with local data.</source>
          <target state="translated">Итак, давайте начнем с фигур! Мы будем работать с &lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;записями штатов США&lt;/a&gt; . Мы используем библиотеку &lt;code&gt;requests&lt;/code&gt; для получения данных, но, конечно, вы можете работать с локальными данными.</target>
        </trans-unit>
        <trans-unit id="b4600cfe004ab3590da41e92d18f8d4b4c94f633" translate="yes" xml:space="preserve">
          <source>The unit for the distance depends on the coordinate reference system (CRS) of the GeoSpace. Since we did not specify the CRS, mesa-geo defaults to the 'Web Mercator' projection (in meters). If you want to do some serious measurements you should always set an appropriate CRS, since the accuracy of Web Mercator declines with distance from the equator.  We can achieve this by initializing the AgentCreator and the GeoSpace with the &lt;code&gt;crs&lt;/code&gt; keyword  &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt;. Mesa-geo then transforms all coordinates from the GeoJSON geographic coordinates into the set crs.</source>
          <target state="translated">Единица измерения расстояния зависит от системы координат (CRS) GeoSpace. Поскольку мы не указали CRS, для mesa-geo по умолчанию используется проекция Web Mercator (в метрах). Если вы хотите провести серьезные измерения, вам всегда следует устанавливать соответствующую CRS, поскольку точность Web Mercator снижается с увеличением расстояния от экватора. Мы можем добиться этого путем инициализации AgentCreator и геопространства с Китайской &lt;code&gt;crs&lt;/code&gt; ключевых слов : &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt; . Затем Mesa-geo преобразует все координаты из географических координат GeoJSON в заданные crs.</target>
        </trans-unit>
        <trans-unit id="54e5dad8c3855cf07e1b0e1e39b24b7a2c690358" translate="yes" xml:space="preserve">
          <source>This is the first release of mesa-geo. No functionality guaranteed, bugs included.</source>
          <target state="translated">Это первый выпуск mesa-geo.Функциональность не гарантируется,ошибки включены.</target>
        </trans-unit>
        <trans-unit id="9a78599f9a3e0eb90b0e60667f88406b1457d05e" translate="yes" xml:space="preserve">
          <source>To add further functionality, I need feedback on which functionality is desired by users. Please post a message &lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;here&lt;/a&gt; or open an issue if you have any ideas or recommendations.</source>
          <target state="translated">Чтобы добавить дополнительную функциональность, мне нужна обратная связь о том, какие функции нужны пользователям. Отправьте сообщение &lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;здесь&lt;/a&gt; или откройте вопрос, если у вас есть идеи или рекомендации.</target>
        </trans-unit>
        <trans-unit id="81c47b762f17ded645b7e732f66c1e741999626d" translate="yes" xml:space="preserve">
          <source>To get a deeper understanding of mesa-geo you should checkout the GeoSchelling example. It implements a Leaflet visualization which is similar to use as the CanvasGridVisualization of Mesa.</source>
          <target state="translated">Для более глубокого понимания меза-гео Вы должны обратиться к примеру GeoSchelling.Он реализует визуализацию листовок,аналогичную CanvasGridVisualization of Mesa.</target>
        </trans-unit>
        <trans-unit id="99ff25b7020d090cd9cdb188ea60cacfd11c21b4" translate="yes" xml:space="preserve">
          <source>To get a list of all states within a certain distance you can use the following</source>
          <target state="translated">Чтобы получить список всех состояний на определенном расстоянии,можно воспользоваться следующими способами</target>
        </trans-unit>
        <trans-unit id="f956276c6b976e9e091af7d42b963012d3a4d6d7" translate="yes" xml:space="preserve">
          <source>To install mesa-geo on linux or macOS run</source>
          <target state="translated">Для установки mesa-geo на linux или macOS запуск</target>
        </trans-unit>
        <trans-unit id="fefab4115e562a86c0c58de9ea47e9b7935010be" translate="yes" xml:space="preserve">
          <source>You should be familiar with how &lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;mesa&lt;/a&gt; works.</source>
          <target state="translated">Вы должны быть знакомы с &lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;принципом&lt;/a&gt; работы мезы .</target>
        </trans-unit>
        <trans-unit id="cb0ae5ae56a9d417cb1a9d18e8cfdbc4ea5481d3" translate="yes" xml:space="preserve">
          <source>mesa-geo - a GIS extension to Mesa Agent-Based Modeling</source>
          <target state="translated">mesa-geo-расширение ГИС к Mesa Agent-Based Modeling</target>
        </trans-unit>
        <trans-unit id="a87505c161b91f2824718829afc67cee52c36469" translate="yes" xml:space="preserve">
          <source>mesa-geo implements a &lt;code&gt;GeoSpace&lt;/code&gt; that can host GIS-based &lt;code&gt;GeoAgents&lt;/code&gt;, which are like normal Agents, except they have a &lt;code&gt;shape&lt;/code&gt; attribute that is a &lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;Shapely object&lt;/a&gt;. You can use &lt;code&gt;Shapely&lt;/code&gt; directly to create arbitrary shapes, but in most cases you will want to import your shapes from a file. Mesa-geo allows you to create GeoAgents from any vector data file (e.g. shapefiles), valid GeoJSON objects or a GeoPandas GeoDataFrame.</source>
          <target state="translated">mesa-geo реализует &lt;code&gt;GeoSpace&lt;/code&gt; ,в котором могут размещаться &lt;code&gt;GeoAgents&lt;/code&gt; основе ГИС , которые похожи на обычных агентов, за исключением того, что у них есть атрибут &lt;code&gt;shape&lt;/code&gt; который является &lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;объектом Shapely&lt;/a&gt; . Вы можете использовать &lt;code&gt;Shapely&lt;/code&gt; напрямую для создания произвольных форм, но в большинстве случаев вам нужно будет импортировать свои формы из файла. Mesa-geo позволяет создавать GeoAgents из любого файла векторных данных (например, шейп-файлов), допустимых объектов GeoJSON или GeoPandas GeoDataFrame.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
