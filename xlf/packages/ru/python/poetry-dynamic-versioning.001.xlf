<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/poetry-dynamic-versioning/">
    <body>
      <group id="poetry-dynamic-versioning">
        <trans-unit id="fad5b126adbc0da9215312021b691dbf70e77cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[tool.poetry-dynamic-versioning.substitution]&lt;/code&gt;: Insert the dynamic version
into additional files other than just pyproject.toml. These changes will be
reverted when the plugin deactivates.</source>
          <target state="translated">&lt;code&gt;[tool.poetry-dynamic-versioning.substitution]&lt;/code&gt; : Insert the dynamic version into additional files other than just pyproject.toml. These changes will be reverted when the plugin deactivates.</target>
        </trans-unit>
        <trans-unit id="418a9eee3c6a252f2078d909acbb5b571e95a8d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[tool.poetry-dynamic-versioning.subversion]&lt;/code&gt;: Options specific to Subversion.</source>
          <target state="translated">&lt;code&gt;[tool.poetry-dynamic-versioning.subversion]&lt;/code&gt; : Options specific to Subversion.</target>
        </trans-unit>
        <trans-unit id="9796cfbc5dbabf2c599d84ce11af8e365bf61e98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[tool.poetry-dynamic-versioning]&lt;/code&gt;: General options.</source>
          <target state="translated">&lt;code&gt;[tool.poetry-dynamic-versioning]&lt;/code&gt; : General options.</target>
        </trans-unit>
        <trans-unit id="1194334b895a4af61460ea1a0d03e2f2881b4382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;base&lt;/code&gt; (string)</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; (string)</target>
        </trans-unit>
        <trans-unit id="ccdeaaab4bb98ecd1a9640b9fbbc2d228a928f3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bump_version&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L786-L797&quot;&gt;from Dunamai&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;bump_version&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L786-L797&quot;&gt;from Dunamai&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="db850d9c806572b606000905882f0914d1c311cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commit&lt;/code&gt; (string)</source>
          <target state="translated">&lt;code&gt;commit&lt;/code&gt; (string)</target>
        </trans-unit>
        <trans-unit id="73d7a2b63be9423307efc110a07c649e3e6427db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirty&lt;/code&gt; (boolean)</source>
          <target state="translated">&lt;code&gt;dirty&lt;/code&gt; (boolean)</target>
        </trans-unit>
        <trans-unit id="56c91a74bf2435097d5736c822551d585bbf38b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirty&lt;/code&gt;: Boolean. Default: false. If true, include a dirty flag in the
metadata, indicating whether there are any uncommitted changes.</source>
          <target state="translated">&lt;code&gt;dirty&lt;/code&gt; : Boolean. Default: false. If true, include a dirty flag in the metadata, indicating whether there are any uncommitted changes.</target>
        </trans-unit>
        <trans-unit id="d6c02cf34be57454864e50c0ceb19d721f2dd9d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;distance&lt;/code&gt; (integer)</source>
          <target state="translated">&lt;code&gt;distance&lt;/code&gt; (integer)</target>
        </trans-unit>
        <trans-unit id="75b7cebc4d622e1f81e2b0efb5c61ccce3a4da67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enable&lt;/code&gt;: Boolean. Default: false. Since the plugin has to be installed
globally, this setting is an opt-in per project. This setting will likely
be removed once plugins are officially supported.</source>
          <target state="translated">&lt;code&gt;enable&lt;/code&gt; : Boolean. Default: false. Since the plugin has to be installed globally, this setting is an opt-in per project. This setting will likely be removed once plugins are officially supported.</target>
        </trans-unit>
        <trans-unit id="88883acfcdeae180deca51f1c0064952a25579c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt; (dictionary of environment variables)</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; (dictionary of environment variables)</target>
        </trans-unit>
        <trans-unit id="3599cbd0cecf92d6d6a9b610bf33f7539c94bb40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;files&lt;/code&gt;: List of globs for any files that need substitutions. Default:
&lt;code&gt;[&quot;*.py&quot;, &quot;*/__init__.py&quot;, &quot;*/__version__.py&quot;, &quot;*/_version.py&quot;]&lt;/code&gt;.
To disable substitution, set this to an empty list.</source>
          <target state="translated">&lt;code&gt;files&lt;/code&gt; : List of globs for any files that need substitutions. Default: &lt;code&gt;[&quot;*.py&quot;, &quot;*/__init__.py&quot;, &quot;*/__version__.py&quot;, &quot;*/_version.py&quot;]&lt;/code&gt; . To disable substitution, set this to an empty list.</target>
        </trans-unit>
        <trans-unit id="8ab2f6648aa9e5ae1a23be4479291cb9360bad91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; would then become available in the Jinja formatting.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; would then become available in the Jinja formatting.</target>
        </trans-unit>
        <trans-unit id="f86013ee6ee25bf927441d42df323e8d90165384" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format-jinja-imports&lt;/code&gt;: Array of tables. Default: empty. This defines
additional things to import and make available to the &lt;code&gt;format-jinja&lt;/code&gt;
template. Each table must contain a &lt;code&gt;module&lt;/code&gt; key and may also contain an
&lt;code&gt;item&lt;/code&gt; key. Consider this example:</source>
          <target state="translated">&lt;code&gt;format-jinja-imports&lt;/code&gt; : Array of tables. Default: empty. This defines additional things to import and make available to the &lt;code&gt;format-jinja&lt;/code&gt; template. Each table must contain a &lt;code&gt;module&lt;/code&gt; key and may also contain an &lt;code&gt;item&lt;/code&gt; key. Consider this example:</target>
        </trans-unit>
        <trans-unit id="71eb1cd9f76efd763e9476978b1f8729a9aa28d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format-jinja&lt;/code&gt;: String. Default: unset. This defines a custom output format
for the version, using a &lt;a href=&quot;https://pypi.org/project/Jinja2&quot;&gt;Jinja&lt;/a&gt; template.
When this is set, &lt;code&gt;format&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;code&gt;format-jinja&lt;/code&gt; : String. Default: unset. This defines a custom output format for the version, using a &lt;a href=&quot;https://pypi.org/project/Jinja2&quot;&gt;Jinja&lt;/a&gt; template. When this is set, &lt;code&gt;format&lt;/code&gt; is ignored.</target>
        </trans-unit>
        <trans-unit id="6c466c94023a500efc7b69c303cb7ab648fe7bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;: String. Default: unset. This defines a custom output format for
the version. Available substitutions:</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; : String. Default: unset. This defines a custom output format for the version. Available substitutions:</target>
        </trans-unit>
        <trans-unit id="cad01b6587de4bf840bd85ed32a4129e081ed635" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;latest-tag&lt;/code&gt;: Boolean. Default: false. If true, then only check the latest
tag for a version, rather than looking through all the tags until a suitable
one is found to match the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;latest-tag&lt;/code&gt; : Boolean. Default: false. If true, then only check the latest tag for a version, rather than looking through all the tags until a suitable one is found to match the &lt;code&gt;pattern&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="669f3be24a39225249b0947aaab204dd7adb8fdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;metadata&lt;/code&gt;: Boolean. Default: unset. If true, include the commit hash in
the version, and also include a dirty flag if &lt;code&gt;dirty&lt;/code&gt; is true. If unset,
metadata will only be included if you are on a commit without a version tag.</source>
          <target state="translated">&lt;code&gt;metadata&lt;/code&gt; : Boolean. Default: unset. If true, include the commit hash in the version, and also include a dirty flag if &lt;code&gt;dirty&lt;/code&gt; is true. If unset, metadata will only be included if you are on a commit without a version tag.</target>
        </trans-unit>
        <trans-unit id="c6a11f76ef8b229c340f77892cdcbbe21c12145d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pattern&lt;/code&gt;: String. This is a regular expression which will be used to find
a tag representing a version. There must be a named capture group &lt;code&gt;base&lt;/code&gt;
with the main part of the version, and optionally you can also have groups
named &lt;code&gt;stage&lt;/code&gt; and &lt;code&gt;revision&lt;/code&gt; for prereleases. The default is
&lt;code&gt;^v(?P&amp;lt;base&amp;gt;\d+\.\d+\.\d+)(-?((?P&amp;lt;stage&amp;gt;[a-zA-Z]+)\.?(?P&amp;lt;revision&amp;gt;\d+)?))?$&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; : String. This is a regular expression which will be used to find a tag representing a version. There must be a named capture group &lt;code&gt;base&lt;/code&gt; with the main part of the version, and optionally you can also have groups named &lt;code&gt;stage&lt;/code&gt; and &lt;code&gt;revision&lt;/code&gt; for prereleases. The default is &lt;code&gt;^v(?P&amp;lt;base&amp;gt;\d+\.\d+\.\d+)(-?((?P&amp;lt;stage&amp;gt;[a-zA-Z]+)\.?(?P&amp;lt;revision&amp;gt;\d+)?))?$&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="985694d38fb1a7bd813356fb9edcacf8d4fe3e3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patterns&lt;/code&gt;: List of regular expressions for the text to replace.
Each regular expression must have two capture groups, which are any
text to preserve before and after the replaced text. Default:
&lt;code&gt;[&quot;(^__version__\s*=\s*['\&quot;])[^'\&quot;]*(['\&quot;])&quot;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;patterns&lt;/code&gt; : List of regular expressions for the text to replace. Each regular expression must have two capture groups, which are any text to preserve before and after the replaced text. Default: &lt;code&gt;[&quot;(^__version__\s*=\s*['\&quot;])[^'\&quot;]*(['\&quot;])&quot;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4d82f84adb31cc2786d0329ede90b2ccb1394fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;revision&lt;/code&gt; (integer or None)</source>
          <target state="translated">&lt;code&gt;revision&lt;/code&gt; (integer or None)</target>
        </trans-unit>
        <trans-unit id="42224c90ea91013a277588f1bf9e7244b6077578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialize_pep440&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L687-L710&quot;&gt;from Dunamai&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;serialize_pep440&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L687-L710&quot;&gt;from Dunamai&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="3acddb26736d49a3a57042a8a9abe4ade903b972" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialize_pvp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L766-L775&quot;&gt;from Dunamai&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;serialize_pvp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L766-L775&quot;&gt;from Dunamai&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="b0c920dac4157cf7761062c2cbf61de91ca95fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialize_semver&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L740-L752&quot;&gt;from Dunamai&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;serialize_semver&lt;/code&gt; (&lt;a href=&quot;https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L740-L752&quot;&gt;from Dunamai&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="43291cd3a0432f70223fb7112670554a8c57e159" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stage&lt;/code&gt; (string or None)</source>
          <target state="translated">&lt;code&gt;stage&lt;/code&gt; (string or None)</target>
        </trans-unit>
        <trans-unit id="ffddab9cc7d712a2b7fd566cabd2c00e6e09ce18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;style&lt;/code&gt;: String. Default: unset. One of: &lt;code&gt;pep440&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;pvp&lt;/code&gt;.
These are preconfigured output formats. If you set both a &lt;code&gt;style&lt;/code&gt; and
a &lt;code&gt;format&lt;/code&gt;, then the format will be validated against the style's rules.
If &lt;code&gt;style&lt;/code&gt; is unset, the default output format will follow PEP 440,
but a custom &lt;code&gt;format&lt;/code&gt; will only be validated if &lt;code&gt;style&lt;/code&gt; is set explicitly.</source>
          <target state="translated">&lt;code&gt;style&lt;/code&gt; : String. Default: unset. One of: &lt;code&gt;pep440&lt;/code&gt; , &lt;code&gt;semver&lt;/code&gt; , &lt;code&gt;pvp&lt;/code&gt; . These are preconfigured output formats. If you set both a &lt;code&gt;style&lt;/code&gt; and a &lt;code&gt;format&lt;/code&gt; , then the format will be validated against the style's rules. If &lt;code&gt;style&lt;/code&gt; is unset, the default output format will follow PEP 440, but a custom &lt;code&gt;format&lt;/code&gt; will only be validated if &lt;code&gt;style&lt;/code&gt; is set explicitly.</target>
        </trans-unit>
        <trans-unit id="9fe76734891d8b5d4ab736a6aee45198dd19a1d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tag-dir&lt;/code&gt;: String. Default: &lt;code&gt;tags&lt;/code&gt;. This is the location of tags relative
to the root.</source>
          <target state="translated">&lt;code&gt;tag-dir&lt;/code&gt; : String. Default: &lt;code&gt;tags&lt;/code&gt; . This is the location of tags relative to the root.</target>
        </trans-unit>
        <trans-unit id="86499aeaae8edc15e468631103bd6f391c5132b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vcs&lt;/code&gt;: String. This is the version control system to check for a version.
One of: &lt;code&gt;any&lt;/code&gt; (default), &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;mercurial&lt;/code&gt;, &lt;code&gt;darcs&lt;/code&gt;, &lt;code&gt;bazaar&lt;/code&gt;,
&lt;code&gt;subversion&lt;/code&gt;, &lt;code&gt;fossil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vcs&lt;/code&gt; : String. This is the version control system to check for a version. One of: &lt;code&gt;any&lt;/code&gt; (default), &lt;code&gt;git&lt;/code&gt; , &lt;code&gt;mercurial&lt;/code&gt; , &lt;code&gt;darcs&lt;/code&gt; , &lt;code&gt;bazaar&lt;/code&gt; , &lt;code&gt;subversion&lt;/code&gt; , &lt;code&gt;fossil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed5842804dee778d77ae6a45567e76df01ccba41" translate="yes" xml:space="preserve">
          <source>Add this to your pyproject.toml:</source>
          <target state="translated">Добавь это в свой гипроект.Томл:</target>
        </trans-unit>
        <trans-unit id="4346dd447efc55614e1bcc5d9c038ea36194e31b" translate="yes" xml:space="preserve">
          <source>Available functions:</source>
          <target state="translated">Доступные функции:</target>
        </trans-unit>
        <trans-unit id="32e2e710e0acc8f6d2109a9c3af6884b041dd45e" translate="yes" xml:space="preserve">
          <source>Available variables:</source>
          <target state="translated">Доступные переменные:</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="62c99b18df86c32744f6bc333f4e2bb38657be27" translate="yes" xml:space="preserve">
          <source>Command line mode</source>
          <target state="translated">Режим командной строки</target>
        </trans-unit>
        <trans-unit id="06e455717379bbead672d37047746c232d605225" translate="yes" xml:space="preserve">
          <source>Complex example:</source>
          <target state="translated">Сложный пример:</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Конфигурация</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Разработка</target>
        </trans-unit>
        <trans-unit id="25979acdb2d8b6cb719ab9096385585f31e0c584" translate="yes" xml:space="preserve">
          <source>Dynamic versioning plugin for Poetry</source>
          <target state="translated">Плагин динамического версионирования для поэзии</target>
        </trans-unit>
        <trans-unit id="7a9648bbe1069ec2ff5575155e0b24888dee9e29" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;v{base}+{distance}.{commit}&lt;/code&gt;</source>
          <target state="translated">Example: &lt;code&gt;v{base}+{distance}.{commit}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="translated">Реализация</target>
        </trans-unit>
        <trans-unit id="c3eb23bca73271ad35d11acbf6526ff2ab938a40" translate="yes" xml:space="preserve">
          <source>In order to side-load plugin functionality into Poetry, this package
does the following:</source>
          <target state="translated">Для боковой загрузки функциональности плагина в Poetry,данный пакет делает следующее:</target>
        </trans-unit>
        <trans-unit id="2480c16e23b9efdc96f92a25007a1b429975f180" translate="yes" xml:space="preserve">
          <source>In your pyproject.toml file, you may configure the following options:</source>
          <target state="translated">В файле pyproject.toml можно настроить следующие параметры:</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="0481228b0fdeab3a5d09438aea14e4d3737b1daa" translate="yes" xml:space="preserve">
          <source>It first tries to patch &lt;code&gt;poetry.factory.Factory.create_poetry&lt;/code&gt; and
&lt;code&gt;poetry.console.commands.run.RunCommand&lt;/code&gt; directly. If they cannot be
imported, then it patches &lt;code&gt;builtins.__import__&lt;/code&gt; so that, whenever those
classes are first imported, then they will be patched. The reason we may have
to wait for these to be imported is in case you've used the get-poetry.py
script, in which case there is a gap between when Python is fully loaded and
when &lt;code&gt;~/.poetry/bin/poetry&lt;/code&gt; adds the Poetry lib folder to the PYTHONPATH.</source>
          <target state="translated">It first tries to patch &lt;code&gt;poetry.factory.Factory.create_poetry&lt;/code&gt; and &lt;code&gt;poetry.console.commands.run.RunCommand&lt;/code&gt; directly. If they cannot be imported, then it patches &lt;code&gt;builtins.__import__&lt;/code&gt; so that, whenever those classes are first imported, then they will be patched. The reason we may have to wait for these to be imported is in case you've used the get-poetry.py script, in which case there is a gap between when Python is fully loaded and when &lt;code&gt;~/.poetry/bin/poetry&lt;/code&gt; adds the Poetry lib folder to the PYTHONPATH.</target>
        </trans-unit>
        <trans-unit id="3c1bfcd7a25d23d48baa942f020078169a5fc029" translate="yes" xml:space="preserve">
          <source>Note that you must install the plugin in your global Python installation,
&lt;strong&gt;not&lt;/strong&gt; as a dependency in pyroject.toml, because the virtual environment
that Poetry creates cannot see Poetry itself and therefore cannot patch it.</source>
          <target state="translated">Note that you must install the plugin in your global Python installation, &lt;strong&gt;not&lt;/strong&gt; as a dependency in pyroject.toml, because the virtual environment that Poetry creates cannot see Poetry itself and therefore cannot patch it.</target>
        </trans-unit>
        <trans-unit id="a820234d12f6ce217d01d3ec0aaf53607c484268" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.</source>
          <target state="translated">Please refer to &lt;a href=&quot;CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ad24b12fe5d4beac877b130b3862857fc313b4fa" translate="yes" xml:space="preserve">
          <source>Plugin for Poetry to enable dynamic versioning based on VCS tags</source>
          <target state="translated">Плагин для Poetry для включения динамического версионирования на основе тегов VCS</target>
        </trans-unit>
        <trans-unit id="7ee1f62dc597320beec1665b0466f928e8230e83" translate="yes" xml:space="preserve">
          <source>Python 3.5 or newer and Poetry 1.0.1 or newer are required.</source>
          <target state="translated">Требуется питон 3.5 или более новый и Поэзия 1.0.1 или более новый.</target>
        </trans-unit>
        <trans-unit id="3827b73df0683d3be4204408fce5dde7a811d000" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;pip install poetry-dynamic-versioning&lt;/code&gt;</source>
          <target state="translated">Run &lt;code&gt;pip install poetry-dynamic-versioning&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="translated">Простой пример:</target>
        </trans-unit>
        <trans-unit id="08e5ebd7ba4dad7e279a13c0338000a763f1497f" translate="yes" xml:space="preserve">
          <source>Since Poetry does not yet officially support plugins
(refer to &lt;a href=&quot;https://github.com/sdispater/poetry/issues/693&quot;&gt;this issue&lt;/a&gt;)
as of the time of writing on 2019-10-19, this package takes some novel
liberties to make the functionality possible. As soon as official support
lands, this plugin will be updated to do things the official way.</source>
          <target state="translated">Since Poetry does not yet officially support plugins (refer to &lt;a href=&quot;https://github.com/sdispater/poetry/issues/693&quot;&gt;this issue&lt;/a&gt;) as of the time of writing on 2019-10-19, this package takes some novel liberties to make the functionality possible. As soon as official support lands, this plugin will be updated to do things the official way.</target>
        </trans-unit>
        <trans-unit id="1460f10f5ed66b7b993fe7334a1572e291ebc24c" translate="yes" xml:space="preserve">
          <source>The dynamic version is not available during &lt;code&gt;poetry run&lt;/code&gt; because Poetry
uses &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.execvp&quot;&gt;&lt;code&gt;os.execvp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The dynamic version is not available during &lt;code&gt;poetry run&lt;/code&gt; because Poetry uses &lt;a href=&quot;https://docs.python.org/2/library/os.html#os.execvp&quot;&gt; &lt;code&gt;os.execvp()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b3927d8932233ab218c88b684f01924358b9b979" translate="yes" xml:space="preserve">
          <source>The patched version of &lt;code&gt;Factory&lt;/code&gt; will compute and apply the dynamic version.</source>
          <target state="translated">The patched version of &lt;code&gt;Factory&lt;/code&gt; will compute and apply the dynamic version.</target>
        </trans-unit>
        <trans-unit id="f16633226546ec8e009cb8d239ced590b624adce" translate="yes" xml:space="preserve">
          <source>The patched version of &lt;code&gt;RunCommand&lt;/code&gt; will deactivate the plugin before
executing the passed command, because otherwise we will not be able to do
any cleanup afterwards.</source>
          <target state="translated">The patched version of &lt;code&gt;RunCommand&lt;/code&gt; will deactivate the plugin before executing the passed command, because otherwise we will not be able to do any cleanup afterwards.</target>
        </trans-unit>
        <trans-unit id="c2bcb75c108752f51d24c665f4030a70cb130ba3" translate="yes" xml:space="preserve">
          <source>The plugin also has a command line mode for execution on demand.
This mode applies the dynamic version to all relevant files and leaves
the changes in-place, allowing you to inspect the result.
Your configuration will be detected from pyproject.toml as normal,
but the &lt;code&gt;enable&lt;/code&gt; option is not necessary.</source>
          <target state="translated">The plugin also has a command line mode for execution on demand. This mode applies the dynamic version to all relevant files and leaves the changes in-place, allowing you to inspect the result. Your configuration will be detected from pyproject.toml as normal, but the &lt;code&gt;enable&lt;/code&gt; option is not necessary.</target>
        </trans-unit>
        <trans-unit id="76560b3ec1fed8fa0aa265c5086f1427140f1687" translate="yes" xml:space="preserve">
          <source>This is roughly equivalent to:</source>
          <target state="translated">Это примерно эквивалентно:</target>
        </trans-unit>
        <trans-unit id="35269ac2ee85ce7e46f617fb65f8479bbabdbd57" translate="yes" xml:space="preserve">
          <source>This package is a plugin for &lt;a href=&quot;https://github.com/sdispater/poetry&quot;&gt;Poetry&lt;/a&gt;
to enable dynamic versioning based on tags in your version control system,
powered by &lt;a href=&quot;https://github.com/mtkennerly/dunamai&quot;&gt;Dunamai&lt;/a&gt;.</source>
          <target state="translated">This package is a plugin for &lt;a href=&quot;https://github.com/sdispater/poetry&quot;&gt;Poetry&lt;/a&gt; to enable dynamic versioning based on tags in your version control system, powered by &lt;a href=&quot;https://github.com/mtkennerly/dunamai&quot;&gt;Dunamai&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="44dbea4012b1ded5d1220e1997c7b57c8a718299" translate="yes" xml:space="preserve">
          <source>To activate this mode, run the &lt;code&gt;poetry-dynamic-versioning&lt;/code&gt; command
in your console.</source>
          <target state="translated">To activate this mode, run the &lt;code&gt;poetry-dynamic-versioning&lt;/code&gt; command in your console.</target>
        </trans-unit>
        <trans-unit id="8da8dd016f906aafb585fd55b6819694fc8d4219" translate="yes" xml:space="preserve">
          <source>Upon installation, it delivers a &lt;code&gt;zzz_poetry_dynamic_versioning.pth&lt;/code&gt;
file to your Python site-packages directory. This forces Python to
automatically load the plugin after all other modules have been loaded
(or at least those alphabetically prior to &lt;code&gt;zzz&lt;/code&gt;).</source>
          <target state="translated">Upon installation, it delivers a &lt;code&gt;zzz_poetry_dynamic_versioning.pth&lt;/code&gt; file to your Python site-packages directory. This forces Python to automatically load the plugin after all other modules have been loaded (or at least those alphabetically prior to &lt;code&gt;zzz&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="35dde3925a62071cfb5eb03b0973a3412630cea9" translate="yes" xml:space="preserve">
          <source>With the minimal configuration above, the plugin will automatically take effect
when you run commands such as &lt;code&gt;poetry build&lt;/code&gt;. It will update the version in
pyproject.toml, then revert the change when the plugin deactivates. If you want
to include a &lt;code&gt;__version__&lt;/code&gt; variable in your code, just put a placeholder in the
appropriate file and configure the plugin to update it (see below) if it isn't
one of the defaults. You are encouraged to use &lt;code&gt;__version__ = &quot;0.0.0&quot;&lt;/code&gt; as a
standard placeholder.</source>
          <target state="translated">With the minimal configuration above, the plugin will automatically take effect when you run commands such as &lt;code&gt;poetry build&lt;/code&gt; . It will update the version in pyproject.toml, then revert the change when the plugin deactivates. If you want to include a &lt;code&gt;__version__&lt;/code&gt; variable in your code, just put a placeholder in the appropriate file and configure the plugin to update it (see below) if it isn't one of the defaults. You are encouraged to use &lt;code&gt;__version__ = &quot;0.0.0&quot;&lt;/code&gt; as a standard placeholder.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
