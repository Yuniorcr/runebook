<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/avro-to-python/">
    <body>
      <group id="avro-to-python">
        <trans-unit id="b8f8d97b003ec8fa6b504d5653ab2cf34981665d" translate="yes" xml:space="preserve">
          <source>0.3.0 (2020-06-10)</source>
          <target state="translated">0.3.0 (2020-06-10)</target>
        </trans-unit>
        <trans-unit id="d5fd22a1b871bec92e0606b0408c363640291691" translate="yes" xml:space="preserve">
          <source>An example of doing this is the following:</source>
          <target state="translated">В качестве примера можно привести следующее:</target>
        </trans-unit>
        <trans-unit id="4b7896b4492888507acb3cfda39e57724add92c8" translate="yes" xml:space="preserve">
          <source>By running this, you should be able to pip install the above package you created from the target directory you specified by running:</source>
          <target state="translated">Выполнив это,вы сможете установить вышеупомянутый пакет,который вы создали из целевой директории,которую вы указали при запуске:</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="83e290dd69e33a5c846e122ff991e1a3a114206a" translate="yes" xml:space="preserve">
          <source>CLI (with &amp;ndash;pip)</source>
          <target state="translated">CLI (с &amp;ndash;pip)</target>
        </trans-unit>
        <trans-unit id="08a2edb2ffb2d16e11b0e187e9c669d7e9919762" translate="yes" xml:space="preserve">
          <source>CLI (without &amp;ndash;pip)</source>
          <target state="translated">CLI (без &amp;ndash;pip)</target>
        </trans-unit>
        <trans-unit id="8405e3a887ebef87e619e333fef5104f5678af59" translate="yes" xml:space="preserve">
          <source>Clone the public repository:</source>
          <target state="translated">Клонируй публичное хранилище:</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Документация</target>
        </trans-unit>
        <trans-unit id="bb7b013b023af31cdc1a0723f596e172a29e332f" translate="yes" xml:space="preserve">
          <source>Documentation: &lt;a href=&quot;https://avro-to-python.readthedocs.io&quot;&gt;https://avro-to-python.readthedocs.io&lt;/a&gt;.</source>
          <target state="translated">Документация: &lt;a href=&quot;https://avro-to-python.readthedocs.io&quot;&gt;https://avro-to-python.readthedocs.io&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Примеры</target>
        </trans-unit>
        <trans-unit id="410b1bc76dba71bbf901eb998f9234cacca7f35e" translate="yes" xml:space="preserve">
          <source>First release on PyPI.</source>
          <target state="translated">Первый релиз на PyPI.</target>
        </trans-unit>
        <trans-unit id="df6b6a6d5f87ba9e109c6470aff355f1be2801f6" translate="yes" xml:space="preserve">
          <source>Free software: MIT license</source>
          <target state="translated">Свободное программное обеспечение:лицензия MIT</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">История</target>
        </trans-unit>
        <trans-unit id="4d35ecf497e70c04c72bd481cedbd3ce624fa6ff" translate="yes" xml:space="preserve">
          <source>If you run the above on a valid avro avsc file, you should then be able to import them as you would in the avro idl namespace Here is an example of a single avsc record from the namespace: &lt;em&gt;name.space&lt;/em&gt; and name: &lt;em&gt;RecordClass&lt;/em&gt;:</source>
          <target state="translated">Если вы запустите вышеуказанное для действительного файла avro avsc, вы должны иметь возможность импортировать их, как в пространстве имен avro idl. Вот пример одной записи avsc из пространства имен: &lt;em&gt;name.space&lt;/em&gt; и name: &lt;em&gt;RecordClass&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="5316901b5d4718c01e566c0b79df93450abd0392" translate="yes" xml:space="preserve">
          <source>Install From Source ()</source>
          <target state="translated">Установить из источника ()</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Установка</target>
        </trans-unit>
        <trans-unit id="6a0931475db272316e97214da352625769ee7a8b" translate="yes" xml:space="preserve">
          <source>Majority of the use of avro-to-python is assumed to be used as a cli, but you can still import and use the python classes under the hood as well.</source>
          <target state="translated">Предполагается,что большая часть использования авто-питона используется в качестве клипа,но вы все еще можете импортировать и использовать классы питонов под капотом.</target>
        </trans-unit>
        <trans-unit id="60f4bf9b7c3c73e75ec30a6175ceee397861ca0b" translate="yes" xml:space="preserve">
          <source>Now that you have the package installed, you can import it by it&amp;rsquo;s package name and namespace. Here is the same example of the same avsc from above, only with a pip package of &lt;em&gt;test_avro&lt;/em&gt;:</source>
          <target state="translated">Теперь, когда у вас установлен пакет, вы можете импортировать его по имени пакета и пространству имен. Вот тот же пример того же avsc сверху, только с пакетом &lt;em&gt;test_avro&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="5fb713beecc31c010882ea7f44d850f273f0e46c" translate="yes" xml:space="preserve">
          <source>Once you have a copy of the source, you can install it with:</source>
          <target state="translated">Как только у вас будет копия источника,вы можете установить его вместе с ним:</target>
        </trans-unit>
        <trans-unit id="2c8c11100391fda1da34f9330f60442bc0cd3710" translate="yes" xml:space="preserve">
          <source>Pip install (recommended)</source>
          <target state="translated">Установка трубопровода (рекомендуется)</target>
        </trans-unit>
        <trans-unit id="ac5bbe8292ed1b69e0f95e5bdaa035569a295fd7" translate="yes" xml:space="preserve">
          <source>Reader</source>
          <target state="translated">Читатель</target>
        </trans-unit>
        <trans-unit id="8119e7f319c9927b2cee6e398f0a78babf7eebdc" translate="yes" xml:space="preserve">
          <source>Roadmap</source>
          <target state="translated">Дорожная карта&quot;</target>
        </trans-unit>
        <trans-unit id="6abc8b6f4c30bce45b479fbb6d843c43a63b54bd" translate="yes" xml:space="preserve">
          <source>The above will compile the avsc files and convert the to python classes found in [path_to_target_directory]</source>
          <target state="translated">Вышеприведенные файлы будут скомпилированы в avsc-файлы и преобразованы в питоновые классы,расположенные в [каталог_путь_целевая_каталог].</target>
        </trans-unit>
        <trans-unit id="380a98795f81c8ab00dc5a197637937264fca797" translate="yes" xml:space="preserve">
          <source>The sources for avro-to-python can be downloaded source as well.</source>
          <target state="translated">Также можно загрузить исходные тексты для avro-питона.</target>
        </trans-unit>
        <trans-unit id="0e78a262bd84a798e79c9d1a241e994bdaeb09c4" translate="yes" xml:space="preserve">
          <source>To install avro-to-python, run this command in your terminal:</source>
          <target state="translated">Чтобы установить avro-to-python,запустите эту команду в своем терминале:</target>
        </trans-unit>
        <trans-unit id="b22fad5affae2c30e5c729869cc5cce5d7d994c1" translate="yes" xml:space="preserve">
          <source>To use the cli, here is the available cli commands:</source>
          <target state="translated">Для использования клипа,вот доступные команды клипа:</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Писатель</target>
        </trans-unit>
        <trans-unit id="19471d6bc0681cf3ea259daf4337e159cfeb8d40" translate="yes" xml:space="preserve">
          <source>You can also choose to make compiled avro packages &lt;strong&gt;*pip installable*&lt;/strong&gt; by adding the &amp;ldquo;&amp;ndash;pip&amp;rdquo; flags. An example of this is the following:
.. code-block:: bash</source>
          <target state="translated">Вы также можете сделать скомпилированные пакеты avro &lt;strong&gt;* pip installable *&lt;/strong&gt; , добавив флаги &amp;laquo;&amp;ndash;pip&amp;raquo;. Пример этого: .. code-block :: bash</target>
        </trans-unit>
        <trans-unit id="82518c045280ef8e30b8225488d37fce8febd6c8" translate="yes" xml:space="preserve">
          <source>You can also use the reader and writer packages in avro-to-python as you would any other python package. Avro to python is split between a &lt;em&gt;reader&lt;/em&gt; and &lt;em&gt;writer&lt;/em&gt; classes. avro-to-python treates namespaces as acyclic trees and uses depth first search to ensure no duplication or namespace collisions on read and write. An example useage is below:</source>
          <target state="translated">Вы также можете использовать пакеты чтения и записи в avro-to-python, как и любой другой пакет python. Avro к питону делится между &lt;em&gt;считывателями&lt;/em&gt; и &lt;em&gt;писателем&lt;/em&gt; классами. avro-to-python обрабатывает пространства имен как ациклические деревья и использует поиск в глубину, чтобы гарантировать отсутствие дублирования или конфликтов пространств имен при чтении и записи. Пример использования приведен ниже:</target>
        </trans-unit>
        <trans-unit id="41266e454f6a74daba20b9a09d88c4698355624f" translate="yes" xml:space="preserve">
          <source>[ ] Add better &amp;ndash;help documentation</source>
          <target state="translated">[] Добавьте лучшую &amp;ndash; справочную документацию</target>
        </trans-unit>
        <trans-unit id="0e2e2f2d889ea55a9c9bde12de8ffffc1c3d36ae" translate="yes" xml:space="preserve">
          <source>[ ] Document cli</source>
          <target state="translated">[] Документ cli</target>
        </trans-unit>
        <trans-unit id="cfd6fcf1549220b1ee3eb3bbaa31949299367595" translate="yes" xml:space="preserve">
          <source>[ ] Document reader class</source>
          <target state="translated">[] Класс чтения документов</target>
        </trans-unit>
        <trans-unit id="4b7277c51a71cc09859f0c950d4a5637c03fc737" translate="yes" xml:space="preserve">
          <source>[ ] Document writer class</source>
          <target state="translated">[] Класс Document Writer</target>
        </trans-unit>
        <trans-unit id="4cedba1cb7284a0eea8ab8f13b44274176030bc5" translate="yes" xml:space="preserve">
          <source>[ ] Logical Types (Currently just converts to primitive types)</source>
          <target state="translated">[] Логические типы (в настоящее время просто конвертируются в примитивные типы)</target>
        </trans-unit>
        <trans-unit id="9ea2fd1960e5fe38d84ea8475eb5086dc6efe8c8" translate="yes" xml:space="preserve">
          <source>[ ] Logical Types Schema (Currently just converts to primitive types)</source>
          <target state="translated">[] Схема логических типов (в настоящее время просто преобразуется в примитивные типы)</target>
        </trans-unit>
        <trans-unit id="6f75e258521758e1d4aaf565efbfac5055243494" translate="yes" xml:space="preserve">
          <source>[X] Add configs to pip install package</source>
          <target state="translated">[X] Добавить конфигурации в пакет установки pip</target>
        </trans-unit>
        <trans-unit id="95d3de5770dac6f32494d89edcc4b6932eeff8b2" translate="yes" xml:space="preserve">
          <source>[X] Add pip install option (would include all files to pip install compiled package)</source>
          <target state="translated">[X] Добавить вариант установки pip (будет включать все файлы для установки скомпилированного пакета pip)</target>
        </trans-unit>
        <trans-unit id="fa98af2b6d5134162c76fea37cb072009ec15644" translate="yes" xml:space="preserve">
          <source>[X] Array Types</source>
          <target state="translated">[X] Типы массивов</target>
        </trans-unit>
        <trans-unit id="6f0eeaa34f275d00d63f587809cc48d5a441abe7" translate="yes" xml:space="preserve">
          <source>[X] Array Types Schema</source>
          <target state="translated">[X] Схема типов массивов</target>
        </trans-unit>
        <trans-unit id="29b13273c1fea7ac89784ed08f6c551d1b64501f" translate="yes" xml:space="preserve">
          <source>[X] Base Enum Schema</source>
          <target state="translated">[X] Базовая схема перечисления</target>
        </trans-unit>
        <trans-unit id="86f71e981b93bca62a820927bc3ea934cf5415b6" translate="yes" xml:space="preserve">
          <source>[X] Base Record Schema</source>
          <target state="translated">[X] Базовая схема записи</target>
        </trans-unit>
        <trans-unit id="3c28b58e34ca3b274faba6e65b4bb0b8bf2b4af8" translate="yes" xml:space="preserve">
          <source>[X] Base Schema Writer</source>
          <target state="translated">[X] Модуль записи базовой схемы</target>
        </trans-unit>
        <trans-unit id="df720006d4c28c0e72029ef546e38e72eaf08bc9" translate="yes" xml:space="preserve">
          <source>[X] Create Namespace Trees on nested namespaces</source>
          <target state="translated">[X] Создание деревьев пространств имен во вложенных пространствах имен</target>
        </trans-unit>
        <trans-unit id="ac8b25bbc50dc602c83ef34d8b40e69cea6c9f85" translate="yes" xml:space="preserve">
          <source>[X] Map Types</source>
          <target state="translated">[X] Типы карт</target>
        </trans-unit>
        <trans-unit id="c744754935d6d51d81e5d9197ee000eee757dc93" translate="yes" xml:space="preserve">
          <source>[X] Primitive Types Schema</source>
          <target state="translated">[X] Схема примитивных типов</target>
        </trans-unit>
        <trans-unit id="7242b3837467888d0c27a29d5f70644bdbf0a29c" translate="yes" xml:space="preserve">
          <source>[X] Primitive types</source>
          <target state="translated">[X] Примитивные типы</target>
        </trans-unit>
        <trans-unit id="c0eb7aa32e27e73c836cdca1c2193baaf01fc274" translate="yes" xml:space="preserve">
          <source>[X] Read Record and Enum File</source>
          <target state="translated">[X] Чтение файла записи и перечисления</target>
        </trans-unit>
        <trans-unit id="f27f8441e2157ce57823e246028cc7d46bf7d310" translate="yes" xml:space="preserve">
          <source>[X] References to other files</source>
          <target state="translated">[X] Ссылки на другие файлы</target>
        </trans-unit>
        <trans-unit id="f931cc77a75223e5bcb08bd7d8b14bb22fed5a10" translate="yes" xml:space="preserve">
          <source>[X] Union Types Schema</source>
          <target state="translated">[X] Схема типов объединения</target>
        </trans-unit>
        <trans-unit id="a0d77716fc0dbbc5c835962dbe4a8c316223b59a" translate="yes" xml:space="preserve">
          <source>[X] Union types</source>
          <target state="translated">[X] Типы союза</target>
        </trans-unit>
        <trans-unit id="f897256f5ee88e9cc0d3b7ff2be4f92874076b34" translate="yes" xml:space="preserve">
          <source>[X] Wrap Writer and Reader into one cli commmit</source>
          <target state="translated">[X] Объедините Writer и Reader в один клик.</target>
        </trans-unit>
        <trans-unit id="6ca9e188b636a8c8a4d804ebe642abba30903c62" translate="yes" xml:space="preserve">
          <source>avro-to-python</source>
          <target state="translated">автопитон</target>
        </trans-unit>
        <trans-unit id="7523d8b744059d7b032728bcabf77f2e94cb6dc7" translate="yes" xml:space="preserve">
          <source>avro-to-python [path_to_source_avsc_files] [path_to_target_directory] &amp;ndash;pip test_avro</source>
          <target state="translated">avro-to-python [path_to_source_avsc_files] [path_to_target_directory] &amp;ndash;pip test_avro</target>
        </trans-unit>
        <trans-unit id="2670fc69386c7b76bdae58cf013682c6a532a445" translate="yes" xml:space="preserve">
          <source>avro-to-python in a Script</source>
          <target state="translated">автопитон в сценарии</target>
        </trans-unit>
        <trans-unit id="ec74bc61c069dca02a9918267dc76fee705e9fe2" translate="yes" xml:space="preserve">
          <source>avro-to-python is a light tool for compiling avro schema files (.avsc) to python classes making using avro schemata easy.</source>
          <target state="translated">avro-to-python-легкий инструмент для компиляции файлов avro-схем (.avsc)в питоновые классы,облегчающий использование avro-схем.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">или</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
