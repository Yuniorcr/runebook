<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="https://pypi.org/project/kwallet-dump/">
    <body>
      <group id="kwallet-dump">
        <trans-unit id="648c51356b2a346fdae1428c95b74533d767c086" translate="yes" xml:space="preserve">
          <source>A Python script to dump contents of a .kwl kwallet file for accessing
passwords away from KDE desktop. Should work on wallets created on KDE 4
(written on KDE 4.10).</source>
          <target state="translated">Скрипт на Python для выгрузки содержимого файла кошелька .kwl для доступа к паролям из рабочего стола KDE.Должен работать на кошельках,созданных в KDE 4 (написанных на KDE 4.10).</target>
        </trans-unit>
        <trans-unit id="6b21fb791ac05170893860c248401cd24a59b732" translate="yes" xml:space="preserve">
          <source>About</source>
          <target state="translated">О сайте</target>
        </trans-unit>
        <trans-unit id="c125e8bf450ea59fe0c902ead3f20e8ab5fb60fc" translate="yes" xml:space="preserve">
          <source>Access KWallet files without KDE desktop</source>
          <target state="translated">Доступ к файлам KWallet без рабочего стола KDE</target>
        </trans-unit>
        <trans-unit id="36a09a2fb8963f0648ee3ee1738cb4a49f43b216" translate="yes" xml:space="preserve">
          <source>Easiest way to install is to use pip which will fetch the dependencies
automatically</source>
          <target state="translated">Самый простой способ установки-использовать pip,который будет автоматически получать зависимости.</target>
        </trans-unit>
        <trans-unit id="37a293b575bf1d5a103c6e0e28889a74b7565cee" translate="yes" xml:space="preserve">
          <source>Fields:</source>
          <target state="translated">Поля:</target>
        </trans-unit>
        <trans-unit id="b2ce023b4255663bb8eabe303edccebb68e79c13" translate="yes" xml:space="preserve">
          <source>Folder name</source>
          <target state="translated">Имя папки</target>
        </trans-unit>
        <trans-unit id="0acb308bbb0737806c7ca3347d07361f55b7406e" translate="yes" xml:space="preserve">
          <source>If you are looking to get Chrome passwords out of this - it&amp;rsquo;ll be a bit
difficult because Chrome stores the passwords in a serialized blob and
you&amp;rsquo;ll have to decipher that format. For everything else - Firefox,
Telepathy, Amarok, Wifi passwords, other apps which store passwords - it
works perfectly fine.</source>
          <target state="translated">Если вы хотите получить пароли Chrome из этого - это будет немного сложно, потому что Chrome хранит пароли в сериализованном двоичном объекте, и вам придется расшифровывать этот формат. Для всего остального - Firefox, Telepathy, Amarok, паролей Wi-Fi, других приложений, которые хранят пароли - он отлично работает.</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Установить</target>
        </trans-unit>
        <trans-unit id="72eb2605ba74e0193afc321e0ffb8b38cbe4f646" translate="yes" xml:space="preserve">
          <source>Key name</source>
          <target state="translated">Ключевое имя</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Выход</target>
        </trans-unit>
        <trans-unit id="941b574d7679aff179758e2f1f5af647516b2713" translate="yes" xml:space="preserve">
          <source>Python 2 or 3</source>
          <target state="translated">питон 2 или 3</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Требования</target>
        </trans-unit>
        <trans-unit id="b570bc1342430b1e36419ee96aa70709a1110b76" translate="yes" xml:space="preserve">
          <source>Sample Output:</source>
          <target state="translated">Вывод образца:</target>
        </trans-unit>
        <trans-unit id="4422286d68925a622e3385b5ac64bdb179eebb3f" translate="yes" xml:space="preserve">
          <source>The output is not polished because it serves a simple utility - to get
passwords when not around a KDE desktop. Pipe the output to grep to make
it more usable.</source>
          <target state="translated">Вывод не отполирован,так как служит простой утилитой-для получения паролей,когда они не находятся на рабочем столе KDE.Сделайте вывод grep,чтобы сделать его более удобным для использования.</target>
        </trans-unit>
        <trans-unit id="71a3a25d580d1fc10361f7221c4cdcf9f5294686" translate="yes" xml:space="preserve">
          <source>Type of KWallet entry - there are 3 - Password, Binary Data and
Map. The sample output here shows the third format</source>
          <target state="translated">Тип записи KWallet-3-Пароль,двоичные данные и карта.Пример вывода здесь показывает третий формат</target>
        </trans-unit>
        <trans-unit id="59cb718690f038d45c901a7abbccab10bc0ae271" translate="yes" xml:space="preserve">
          <source>Value - Value is a tuple when entry type is a Map</source>
          <target state="translated">Значение-Значение-кортеж,когда тип записи-Карта.</target>
        </trans-unit>
        <trans-unit id="89a2c8540d2a85591955fe9c0ef3c9d9ec166581" translate="yes" xml:space="preserve">
          <source>pycrypto (for decoding Blowfish)</source>
          <target state="translated">пикрипто (для декодирования Blowfish)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
