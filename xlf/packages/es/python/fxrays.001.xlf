<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/fxrays/">
    <body>
      <group id="fxrays">
        <trans-unit id="f7218e2cb77fc23e935487057a9e980e62ebf1a9" translate="yes" xml:space="preserve">
          <source>Computes extremal rays with filtering</source>
          <target state="translated">Calcula los rayos extremos con un filtro</target>
        </trans-unit>
        <trans-unit id="b6955302bb0b12f8356599f6b88675ed062d73b4" translate="yes" xml:space="preserve">
          <source>The algorithm is due to Dave Letscher, and incorporates ideas of Komei
Fukuda&amp;rsquo;s.</source>
          <target state="translated">El algoritmo se debe a Dave Letscher e incorpora ideas de Komei Fukuda.</target>
        </trans-unit>
        <trans-unit id="5d44e4b17c5d82fa041f21841f64771d5138d50f" translate="yes" xml:space="preserve">
          <source>The setup is this.  Define the support of a vector v in R^n to be the
set of indices i such that v_i is non-zero.  We are given an integer
matrix M, typically with many more columns than rows, and a list of
&amp;ldquo;illegal supports&amp;rdquo;.  The support of a vector is illegal if its support
contains one of the illegal supports on the list.</source>
          <target state="translated">La configuraci&amp;oacute;n es esta. Defina el soporte de un vector v en R ^ n como el conjunto de &amp;iacute;ndices i tales que v_i no es cero. Se nos da una matriz M entera, t&amp;iacute;picamente con muchas m&amp;aacute;s columnas que filas, y una lista de &quot;apoyos ilegales&quot;. El soporte de un vector es ilegal si su soporte contiene uno de los soportes ilegales de la lista.</target>
        </trans-unit>
        <trans-unit id="ad296dffab31909f480bc6fd3d7a488cc377c7fc" translate="yes" xml:space="preserve">
          <source>This package is a small, fast implementation of an algorithm for
finding extremal rays of a polyhedral cone, with filtering.  It is
intended for finding normal surfaces in triangulated 3-manifolds, and
therefore does not implement various features that might be useful for
general extremal ray problems.</source>
          <target state="translated">Este paquete es una pequeña y rápida implementación de un algoritmo para encontrar rayos extremos de un cono poliédrico,con filtrado.Está destinado a encontrar superficies normales en triángulos de 3-múltiples,y por lo tanto no implementa varias características que podrían ser útiles para problemas generales de rayos extremos.</target>
        </trans-unit>
        <trans-unit id="6781db64db5c583fd06d1f1436d6f433611fb4ac" translate="yes" xml:space="preserve">
          <source>We want to find all the extremal rays of the cone
(Null space of M) intersect (positive orthant),
which are generated by vectors with legal support. (The restriction to
vector with legal support is what is meant by &amp;ldquo;filtering&amp;rdquo;.)</source>
          <target state="translated">Queremos encontrar todos los rayos extremos del cono (espacio nulo de M) que se intersecan (orto positivo), los cuales son generados por vectores con soporte legal. (La restricci&amp;oacute;n al vector con respaldo legal es lo que se entiende por &quot;filtrado&quot;).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
