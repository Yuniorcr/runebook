<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/k0dasm/">
    <body>
      <group id="k0dasm">
        <trans-unit id="a36abd240d4fced49d5e073136718ece787d8d3c" translate="yes" xml:space="preserve">
          <source>) will still need to be resolved manually.</source>
          <target state="translated">) a&amp;uacute;n deber&amp;aacute; resolverse manualmente.</target>
        </trans-unit>
        <trans-unit id="5fda23d62015b99fb2a9f86b38bcdf2bdf7609c8" translate="yes" xml:space="preserve">
          <source>Author</source>
          <target state="translated">Autor</target>
        </trans-unit>
        <trans-unit id="92e5f3778e6f41bd90cfde8d9ba37c348715ef61" translate="yes" xml:space="preserve">
          <source>Code / Data Separation.  Starting from the vectors at the bottom of memory, k0dasm uses recursive traversal disassembly to separate code from data.  This automates much of the disassembly process but indirect jumps (</source>
          <target state="translated">Código/Separación de datos.Comenzando por los vectores en el fondo de la memoria,k0dasm usa un desmontaje transversal recursivo para separar el código de los datos.Esto automatiza gran parte del proceso de desensamblaje,pero los saltos indirectos (</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Características</target>
        </trans-unit>
        <trans-unit id="e99f3ac80b2b2350f2e51853d26bb1447dd0afda" translate="yes" xml:space="preserve">
          <source>Identical Reassembly.  The assembly language output of k0dasm will assemble to a bit-for-bit exact copy of the original binary using as78k0.  This has been tested using several real firmware binaries.</source>
          <target state="translated">Reensamblaje idéntico.La salida del lenguaje ensamblador de k0dasm se ensamblará a una copia exacta bit a bit del binario original usando as78k0.Esto ha sido probado usando varios binarios de firmware real.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Instalación</target>
        </trans-unit>
        <trans-unit id="ef794089d65c29260193d1171143c513c37dd853" translate="yes" xml:space="preserve">
          <source>Mike Naberezny</source>
          <target state="translated">Mike Naberezny</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Visión general</target>
        </trans-unit>
        <trans-unit id="184aae6f77608718224c424e74717a6de967207d" translate="yes" xml:space="preserve">
          <source>Renesas (NEC) 78K0 disassembler</source>
          <target state="translated">Desmontador Renesas (NEC)78K0</target>
        </trans-unit>
        <trans-unit id="c611e7531edc5ad06854e7aa8c370fa7c7df38ae" translate="yes" xml:space="preserve">
          <source>Symbol Generation.  k0dasm tries not to write hardcoded addresses in the output when possible.  It will automatically add symbols for hardware registers and vectors, other memory locations used, and will add labels for branches and subroutines.</source>
          <target state="translated">Generación de símbolos.k0dasm trata de no escribir direcciones codificadas en la salida cuando es posible.Automáticamente añadirá símbolos para los registros y vectores del hardware,otras ubicaciones de memoria utilizadas y añadirá etiquetas para las ramas y subrutinas.</target>
        </trans-unit>
        <trans-unit id="887bd25b814c2ea33c2020e1ae14e08e3e41ab2c" translate="yes" xml:space="preserve">
          <source>The file is assumed to be a ROM image that should be aligned to the bottom of memory.  For example, if a 32K file is given, k0dasm will assume the image should be located at 0x0000-0x7FFF.  After loading the image, the disassembler reads the vectors and starts tracing instructions from their targets.</source>
          <target state="translated">Se supone que el archivo es una imagen ROM que debe ser alineada al fondo de la memoria.Por ejemplo,si se da un archivo de 32K,k0dasm asumirá que la imagen debe estar ubicada en 0x0000-0x7FFF.Después de cargar la imagen,el desensamblador lee los vectores y comienza a trazar instrucciones desde sus objetivos.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Uso</target>
        </trans-unit>
        <trans-unit id="83889f5663f7f860486c3e9bfe18177eff6db2cd" translate="yes" xml:space="preserve">
          <source>br ax</source>
          <target state="translated">br ax</target>
        </trans-unit>
        <trans-unit id="5839dc65065f115602262aa635fbf67791899625" translate="yes" xml:space="preserve">
          <source>k0dasm</source>
          <target state="translated">k0dasm</target>
        </trans-unit>
        <trans-unit id="9e53567246f36fc5e20142d5b92badeead00b4a5" translate="yes" xml:space="preserve">
          <source>k0dasm accepts a plain binary file as input:</source>
          <target state="translated">k0dasm acepta un archivo binario simple como entrada:</target>
        </trans-unit>
        <trans-unit id="adaa751be62a63905f2aad7b6a93a8813858eb2b" translate="yes" xml:space="preserve">
          <source>k0dasm is a disassembler for NEC 78K0 binaries that generates output compatible with the &lt;a href=&quot;http://shop-pdp.net/ashtml/as78k0.htm&quot;&gt;as78k0&lt;/a&gt; assembler.  It can be used to disassemble firmware for many 8-bit NEC 78K0 microcontrollers.  Note that NEC has several microcontroller families with similar names, such as 78K0S, that use different instruction sets.  These are not supported.</source>
          <target state="translated">k0dasm es un desensamblador para binarios NEC 78K0 que genera una salida compatible con el ensamblador &lt;a href=&quot;http://shop-pdp.net/ashtml/as78k0.htm&quot;&gt;as78k0&lt;/a&gt; . Se puede utilizar para desmontar el firmware de muchos microcontroladores NEC 78K0 de 8 bits. Tenga en cuenta que NEC tiene varias familias de microcontroladores con nombres similares, como 78K0S, que utilizan diferentes conjuntos de instrucciones. Estos no son compatibles.</target>
        </trans-unit>
        <trans-unit id="c5d0b1d900eca0713b3f5d6e97a3ee2a22b52e92" translate="yes" xml:space="preserve">
          <source>k0dasm is written in Python and requires Python 3.4 or later.  Packages are &lt;a href=&quot;https://pypi.org/project/k0dasm/&quot;&gt;available&lt;/a&gt; on the Python Package Index (PyPI).  You can download them from there or you can use</source>
          <target state="translated">k0dasm est&amp;aacute; escrito en Python y requiere Python 3.4 o posterior. Los paquetes est&amp;aacute;n &lt;a href=&quot;https://pypi.org/project/k0dasm/&quot;&gt;disponibles&lt;/a&gt; en el &amp;iacute;ndice de paquetes de Python (PyPI). Puede descargarlos desde all&amp;iacute; o puede usar</target>
        </trans-unit>
        <trans-unit id="2a2a6fadee5f4ff99025989aec099e65c85077c0" translate="yes" xml:space="preserve">
          <source>k0dasm was developed to disassemble the firmware of the &lt;a href=&quot;https://github.com/mnaberez/vwradio&quot;&gt;Volkswagen Premium V&lt;/a&gt; car radios made by Delco.  These radios use the undocumented NEC &amp;micro;PD78F0831Y microcontroller, which is similar to the &lt;a href=&quot;https://web.archive.org/web/20180328161019/https://www.renesas.com/en-us/doc/DocumentServer/021/U13892EJ2V0UM00.pdf&quot;&gt;&amp;micro;PD78F0833Y&lt;/a&gt;.  A companion program, &lt;a href=&quot;https://github.com/mnaberez/k0emu&quot;&gt;k0emu&lt;/a&gt;, is a 78K0 emulator developed for the same project.</source>
          <target state="translated">k0dasm fue desarrollado para desmontar el firmware de las radios de autom&amp;oacute;viles &lt;a href=&quot;https://github.com/mnaberez/vwradio&quot;&gt;Volkswagen Premium V&lt;/a&gt; fabricadas por Delco. Estas radios utilizan el microcontrolador &amp;micro;PD78F0831Y de NEC no documentado, que es similar al &lt;a href=&quot;https://web.archive.org/web/20180328161019/https://www.renesas.com/en-us/doc/DocumentServer/021/U13892EJ2V0UM00.pdf&quot;&gt;&amp;micro;PD78F0833Y&lt;/a&gt; . Un programa complementario, &lt;a href=&quot;https://github.com/mnaberez/k0emu&quot;&gt;k0emu&lt;/a&gt; , es un emulador 78K0 desarrollado para el mismo proyecto.</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">pip</target>
        </trans-unit>
        <trans-unit id="4fdadaadb6acd13e89b1e933e596f13897f901f6" translate="yes" xml:space="preserve">
          <source>to automatically install or upgrade</source>
          <target state="translated">para instalar o actualizar automáticamente</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
