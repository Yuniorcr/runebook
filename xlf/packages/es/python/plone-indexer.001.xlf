<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/plone-indexer/">
    <body>
      <group id="plone-indexer">
        <trans-unit id="36557305b10d51cf3f32a7f4e66afa4b97af2334" translate="yes" xml:space="preserve">
          <source>1.0 - 2010-07-18</source>
          <target state="translated">1.0-2010-07-18</target>
        </trans-unit>
        <trans-unit id="0090899d052631449cb5362af0d07944bc3e117f" translate="yes" xml:space="preserve">
          <source>1.0.1 (2012-12-14)</source>
          <target state="translated">1.0.1 (2012-12-14)</target>
        </trans-unit>
        <trans-unit id="a35dfce9d5355dfd0e62ec26183f9e308f0a793a" translate="yes" xml:space="preserve">
          <source>1.0.2 (2013-01-13)</source>
          <target state="translated">1.0.2 (2013-01-13)</target>
        </trans-unit>
        <trans-unit id="8e33add6d3bb40873ccf43ae2821a179f18571fc" translate="yes" xml:space="preserve">
          <source>1.0.3 (2015-05-05)</source>
          <target state="translated">1.0.3 (2015-05-05)</target>
        </trans-unit>
        <trans-unit id="890d0d9745bb289838c7ee7d62ff9aa0157e309a" translate="yes" xml:space="preserve">
          <source>1.0.4 (2016-02-25)</source>
          <target state="translated">1.0.4 (2016-02-25)</target>
        </trans-unit>
        <trans-unit id="266397d6f7dcd6aea584e216c1e00e272d4ccdc5" translate="yes" xml:space="preserve">
          <source>1.0.5 (2018-09-26)</source>
          <target state="translated">1.0.5 (2018-09-26)</target>
        </trans-unit>
        <trans-unit id="f022b80a6d01fff0f7e6b89c36105b9cecc9c993" translate="yes" xml:space="preserve">
          <source>1.0.6 (2019-04-29)</source>
          <target state="translated">1.0.6 (2019-04-29)</target>
        </trans-unit>
        <trans-unit id="a0adeb90d528c17bcf997aa9e8183289c61fc452" translate="yes" xml:space="preserve">
          <source>1.0.7 (2020-04-20)</source>
          <target state="translated">1.0.7 (2020-04-20)</target>
        </trans-unit>
        <trans-unit id="648a3bafee915341c1c3e6bd63f36bc254195666" translate="yes" xml:space="preserve">
          <source>1.0a1 - 2009-03-05</source>
          <target state="translated">1.0a1-2009-03-05</target>
        </trans-unit>
        <trans-unit id="2b949b165af1d66e30306ef88826b8fa2c37db61" translate="yes" xml:space="preserve">
          <source>1.0rc1 - 2009-03-26</source>
          <target state="translated">1.0rc1-2009-03-26</target>
        </trans-unit>
        <trans-unit id="1659576b6019d03c6adff3f3b50bba33021c003d" translate="yes" xml:space="preserve">
          <source>1.0rc2 - 2009-04-05</source>
          <target state="translated">1.0rc2-2009-04-05</target>
        </trans-unit>
        <trans-unit id="4f4f8208b429a4f6c6ad60fa7bb31ff6aef6504b" translate="yes" xml:space="preserve">
          <source>Add MANIFEST.in.
[WouterVH]</source>
          <target state="translated">Añade MANIFEST.in.[WouterVH]</target>
        </trans-unit>
        <trans-unit id="028873c5a0dcc2128a87643a9cbbc897c16d3cd7" translate="yes" xml:space="preserve">
          <source>Add missing dependency on Products.ZCatalog.
[gforcada]</source>
          <target state="translated">Añade la dependencia que falta en Productos.ZCatalog.[gforcada]</target>
        </trans-unit>
        <trans-unit id="d07e2d1085c1028c7bb8bbbf2a431258ce242673" translate="yes" xml:space="preserve">
          <source>Added _getWrappedObject() method to get hold of the underlying object.
Note that this means you can&amp;rsquo;t have an index/metadata column with this name.
[optilude]</source>
          <target state="translated">Added _getWrappedObject() method to get hold of the underlying object. Note that this means you can&amp;rsquo;t have an index/metadata column with this name. [optilude]</target>
        </trans-unit>
        <trans-unit id="57cd802024708309bad17d8345d42fc110a006c7" translate="yes" xml:space="preserve">
          <source>An indexer is a named adapter that adapts the type of an object and provides a value to be indexed when the catalog attempts to index the attribute with that name.</source>
          <target state="translated">Un indexador es un adaptador con nombre que adapta el tipo de un objeto y proporciona un valor para ser indexado cuando el catálogo intenta indexar el atributo con ese nombre.</target>
        </trans-unit>
        <trans-unit id="4d0391174856a9a2d6da60cab6a4984961abf614" translate="yes" xml:space="preserve">
          <source>At the end of the day, an indexer is just a named multi-adapter from the indexable object (e.g.
INewsItem or IPage above) and the catalog (usually portal_catalog in a CMF application) to IIndexer, where the name is the name of the indexed attribute in the catalog.
Thus, you could register your indexers as more conventional adapters:</source>
          <target state="translated">Al final del día,un indexador es sólo un multiadaptador con nombre del objeto indexable (p.ej.INewsItem o IPage arriba)y del catálogo (normalmente portal_catalog en una aplicación CMF)a IIndexer,donde el nombre es el nombre del atributo indexado en el catálogo.De esta manera,podría registrar sus indexadores como adaptadores más convencionales:</target>
        </trans-unit>
        <trans-unit id="54d964bde3b45008273493e091d5fc828d1a6056" translate="yes" xml:space="preserve">
          <source>Bug fixes:</source>
          <target state="translated">Arreglos de bichos:</target>
        </trans-unit>
        <trans-unit id="209833fc4383e53659b3f2c201a1c48f58b51fcb" translate="yes" xml:space="preserve">
          <source>Cataloging involves looking up attributes on the indexable object wrapper matching the names of indexes (in the real ZCatalog, this is actually decoupled, but let&amp;rsquo;s not get carried away).
If they are callable, they should be called.
This is just mimicking what ZCatalog&amp;rsquo;s implementation does.</source>
          <target state="translated">Cataloging involves looking up attributes on the indexable object wrapper matching the names of indexes (in the real ZCatalog, this is actually decoupled, but let&amp;rsquo;s not get carried away). If they are callable, they should be called. This is just mimicking what ZCatalog&amp;rsquo;s implementation does.</target>
        </trans-unit>
        <trans-unit id="b4432e9d8822524a829a8faa6146d5c9825cc359" translate="yes" xml:space="preserve">
          <source>Changed the @indexer decorator to maintain the information about the wrapped
function (__doc__, __module__, __name__, etc).
[dokai]</source>
          <target state="translated">Cambió el decorador @indexador para mantener la información sobre la función envuelta (__doc__,__módulo__,__nombre__,etc).[dokai]</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="66d77f7b26b2b6239701e87a23279dfa4d95ba97" translate="yes" xml:space="preserve">
          <source>Corrected IZCatalog import location to point to the interfaces module.
[hannosch]</source>
          <target state="translated">Corregida la ubicación de la importación de IZCatalog para apuntar al módulo de interfaces.[hannosch]</target>
        </trans-unit>
        <trans-unit id="0a75dae313c63751c529c4184ac90ee49cd02614" translate="yes" xml:space="preserve">
          <source>Customising indexers based on the catalog type</source>
          <target state="translated">Personalizando los indexadores basados en el tipo de catálogo</target>
        </trans-unit>
        <trans-unit id="916de2f4739c0f8ce92794df5dc728cfb2560c51" translate="yes" xml:space="preserve">
          <source>Finally, if not adapter can be found, we fall back on getattr() on the object:</source>
          <target state="translated">Por último,si no se puede encontrar el adaptador,recurrimos a getattr()en el objeto:</target>
        </trans-unit>
        <trans-unit id="88179fb28d6e022362cad3231ae861a46e88d79e" translate="yes" xml:space="preserve">
          <source>Finally, let&amp;rsquo;s create some objects to index:</source>
          <target state="translated">Finally, let&amp;rsquo;s create some objects to index:</target>
        </trans-unit>
        <trans-unit id="91d0f573a0680a243fec2e082db55b3a94880b7b" translate="yes" xml:space="preserve">
          <source>First of all, let&amp;rsquo;s demonstrate that our indexers work and apply only to the types for which they are registered:</source>
          <target state="translated">First of all, let&amp;rsquo;s demonstrate that our indexers work and apply only to the types for which they are registered:</target>
        </trans-unit>
        <trans-unit id="13d543589cf0d7483373c542ff5f2f80b6aea31e" translate="yes" xml:space="preserve">
          <source>Fix tests to work in Python 3
[pbauer]</source>
          <target state="translated">Arreglar las pruebas para que funcionen en Python 3 [pbauer]</target>
        </trans-unit>
        <trans-unit id="14f121702359a18fe7e9fff7df6c22adddb5936d" translate="yes" xml:space="preserve">
          <source>Fixed reSt markup in the changelog.
[hannosch]</source>
          <target state="translated">Arreglado el marcado de reSt en el registro de cambios.[hannosch]</target>
        </trans-unit>
        <trans-unit id="f3cb073a3770324c1d446bdc7175334dadfc72c9" translate="yes" xml:space="preserve">
          <source>Fixed: doctests on Python 2 were not correctly checked.  [maurits] (#7)</source>
          <target state="translated">Corregido:las pruebas documentales en Python 2 no se comprobaron correctamente.[maurits](#7)</target>
        </trans-unit>
        <trans-unit id="98bcf050cf3c78543d1d27cd06759e2d587c22e7" translate="yes" xml:space="preserve">
          <source>Fixes:</source>
          <target state="translated">Arreglos:</target>
        </trans-unit>
        <trans-unit id="10f459b59285b57818cb8688c1f06fd4cf131406" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have two types, page and news item:</source>
          <target state="translated">For example, let&amp;rsquo;s say we have two types, page and news item:</target>
        </trans-unit>
        <trans-unit id="9dc234a07600559b3770cf4eff2f30bdd1d22bb2" translate="yes" xml:space="preserve">
          <source>For the purposes of the ensuing tests, we&amp;rsquo;ll register these directly:</source>
          <target state="translated">For the purposes of the ensuing tests, we&amp;rsquo;ll register these directly:</target>
        </trans-unit>
        <trans-unit id="41fc7a3671a78dbd992071a5a328d1ed49a7ac02" translate="yes" xml:space="preserve">
          <source>Here is a mock implementation of a ZCatalog.catalog_object() override, based on the one in Plone.
We&amp;rsquo;ll use this for testing.
We won&amp;rsquo;t bother with the full ZCatalog interface, only catalog_object(), and we&amp;rsquo;ll stub out a few things.
This really is for illustration purposes only, to show the intended usage pattern.</source>
          <target state="translated">Here is a mock implementation of a ZCatalog.catalog_object() override, based on the one in Plone. We&amp;rsquo;ll use this for testing. We won&amp;rsquo;t bother with the full ZCatalog interface, only catalog_object(), and we&amp;rsquo;ll stub out a few things. This really is for illustration purposes only, to show the intended usage pattern.</target>
        </trans-unit>
        <trans-unit id="1b1ea00eb807fcb8838968353891c168e2bfc349" translate="yes" xml:space="preserve">
          <source>Hooking up indexers to the framework</source>
          <target state="translated">Conectando los indexadores al marco</target>
        </trans-unit>
        <trans-unit id="f8334991fc5824e5284a4010044cadb6bd12b16b" translate="yes" xml:space="preserve">
          <source>Hooks to facilitate managing custom index values in Zope 2/CMF applications</source>
          <target state="translated">Ganchos para facilitar la gestión de los valores de índice personalizados en las aplicaciones de Zope 2/CMF</target>
        </trans-unit>
        <trans-unit id="a244e901ac180c1aa6a14831965d5a35f6b3b711" translate="yes" xml:space="preserve">
          <source>However, the second catalog gets the audience in lowercase:</source>
          <target state="translated">Sin embargo,el segundo catálogo tiene la audiencia en minúsculas:</target>
        </trans-unit>
        <trans-unit id="64e449f3ceedc93167400899cf53540ff8ac4d14" translate="yes" xml:space="preserve">
          <source>If we now index &amp;lsquo;review_state&amp;rsquo;, it will be obtained from the workflow variables.
However, a custom indexer still overrides workflow variables:</source>
          <target state="translated">If we now index &amp;lsquo;review_state&amp;rsquo;, it will be obtained from the workflow variables. However, a custom indexer still overrides workflow variables:</target>
        </trans-unit>
        <trans-unit id="c0ca34ed24a61ebc1cd9457af0544482bf942167" translate="yes" xml:space="preserve">
          <source>If you are writing tests for your indexers (as you should!), then you should be aware of the following:</source>
          <target state="translated">Si estás escribiendo pruebas para tus indexadores (¡como deberías!),entonces deberías tener en cuenta lo siguiente:</target>
        </trans-unit>
        <trans-unit id="6307d5cec5101b7f150991bd18e1a6a0d33b4f83" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re only curious about how to write indexers, you can probably stop here.
If you want to know more about how they work and how they are wired into a framework, read on.</source>
          <target state="translated">If you&amp;rsquo;re only curious about how to write indexers, you can probably stop here. If you want to know more about how they work and how they are wired into a framework, read on.</target>
        </trans-unit>
        <trans-unit id="5d0d69847eecf19c3ef550cbe3afbcc940f27bba" translate="yes" xml:space="preserve">
          <source>In CMF 2.2, there is an IIndexableObject marker interface defined in Products.CMFCore.interfaces.
We have a compatibility alias in this package for use with CMF 2.1.</source>
          <target state="translated">En el CMF 2.2,hay una interfaz de marcadores de IIndexableObject definida en Products.CMFCore.interfaces.Tenemos un alias de compatibilidad en este paquete para su uso con CMF 2.1.</target>
        </trans-unit>
        <trans-unit id="31bf69f6d0b4084ed5a34d02b1615c2844aa3a3d" translate="yes" xml:space="preserve">
          <source>Initial release</source>
          <target state="translated">Lanzamiento inicial</target>
        </trans-unit>
        <trans-unit id="3928cec3f3a2a4944089a8fcabb177bd308cb617" translate="yes" xml:space="preserve">
          <source>Interfaces provided by the wrapper</source>
          <target state="translated">Las interfaces proporcionadas por el envoltorio</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introducción</target>
        </trans-unit>
        <trans-unit id="6110c1710f28ea98e78820483d2a5a7edba49243" translate="yes" xml:space="preserve">
          <source>It is possible to obtain the wrapped object from the wrapper:</source>
          <target state="translated">Es posible obtener el objeto envuelto de la envoltura:</target>
        </trans-unit>
        <trans-unit id="718dd703a2d039c49666c617e07a93bab6c3375e" translate="yes" xml:space="preserve">
          <source>It is possible to provide a custom indexer for a different type of catalog.
To test that, let&amp;rsquo;s create a secondary catalog and mark it with a marker interface:</source>
          <target state="translated">It is possible to provide a custom indexer for a different type of catalog. To test that, let&amp;rsquo;s create a secondary catalog and mark it with a marker interface:</target>
        </trans-unit>
        <trans-unit id="0415c21e662b5158ef6759064c744ba7a5eb1ccb" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say that we did not want the news item audience uppercased here.
We could provide a custom indexer for just this catalog:</source>
          <target state="translated">Let&amp;rsquo;s say that we did not want the news item audience uppercased here. We could provide a custom indexer for just this catalog:</target>
        </trans-unit>
        <trans-unit id="c409d8714ffae5d66cb34a2df540a1907b03b383" translate="yes" xml:space="preserve">
          <source>Minor packaging updates. (#1)</source>
          <target state="translated">Actualizaciones menores del embalaje.(#1)</target>
        </trans-unit>
        <trans-unit id="25f2830879fdabfa976d61a7494856e1d0897a99" translate="yes" xml:space="preserve">
          <source>Now for the testing. First, we need a faux catalog:</source>
          <target state="translated">Ahora para las pruebas.Primero,necesitamos un catálogo falso:</target>
        </trans-unit>
        <trans-unit id="6f65f852105ed68bd2bbed84b76cc9eae7a829b8" translate="yes" xml:space="preserve">
          <source>Now, pretend that our catalog had an index &amp;lsquo;description&amp;rsquo;, which for a page should contain the first 10 characters from the body text, and for a news item should contain the contents of the &amp;lsquo;summary&amp;rsquo; field.
Furthermore, there is an index &amp;lsquo;audience&amp;rsquo; that should contain the value of the corresponding field for news items, in all uppercase.
It should do nothing for pages.</source>
          <target state="translated">Now, pretend that our catalog had an index &amp;lsquo;description&amp;rsquo;, which for a page should contain the first 10 characters from the body text, and for a news item should contain the contents of the &amp;lsquo;summary&amp;rsquo; field. Furthermore, there is an index &amp;lsquo;audience&amp;rsquo; that should contain the value of the corresponding field for news items, in all uppercase. It should do nothing for pages.</target>
        </trans-unit>
        <trans-unit id="2a7a0dc0bf066e3aaf3a985a00aef9323d306e89" translate="yes" xml:space="preserve">
          <source>Or in a test:</source>
          <target state="translated">O en una prueba:</target>
        </trans-unit>
        <trans-unit id="5fa1dc6aec0f1b4563cf1e056d53e57f7d6db2e4" translate="yes" xml:space="preserve">
          <source>Other means of registering indexers</source>
          <target state="translated">Otros medios de registro de los indexadores</target>
        </trans-unit>
        <trans-unit id="21528286ca1261574c35fd310fb83bdba012da7f" translate="yes" xml:space="preserve">
          <source>Our custom indexable object wrapper is capable of looking up workflow variables if the portal_workflow tool is available.
For testing purposes, we&amp;rsquo;ll create a fake minimal workflow tool and stash it onto the fake catalog so that it can be found by getToolByName.
In real life, it would of course be acquirable as normal:</source>
          <target state="translated">Our custom indexable object wrapper is capable of looking up workflow variables if the portal_workflow tool is available. For testing purposes, we&amp;rsquo;ll create a fake minimal workflow tool and stash it onto the fake catalog so that it can be found by getToolByName. In real life, it would of course be acquirable as normal:</target>
        </trans-unit>
        <trans-unit id="54ed0e729af30d26dd791a6b898d71a5a2df0970" translate="yes" xml:space="preserve">
          <source>Reformat according to the Plone styleguide.
[thet]</source>
          <target state="translated">Formatea según la guía de estilo de Plone.[elt]</target>
        </trans-unit>
        <trans-unit id="ba106177021dd66dc6bd80e7802e036691284ae8" translate="yes" xml:space="preserve">
          <source>Relicense under modified BSD license; per Plone Foundation board
approval on 2012-05-31.
See: &lt;a href=&quot;http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy&quot;&gt;http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy&lt;/a&gt;
[supton]</source>
          <target state="translated">Relicense under modified BSD license; per Plone Foundation board approval on 2012-05-31. See: &lt;a href=&quot;http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy&quot;&gt;http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy&lt;/a&gt; [supton]</target>
        </trans-unit>
        <trans-unit id="78e5e72c0e18767f821ea13798cfa2e2e302e384" translate="yes" xml:space="preserve">
          <source>Replace deprecated</source>
          <target state="translated">Reemplazar la depreciación</target>
        </trans-unit>
        <trans-unit id="d2e08bd404b5a01c649d1f848e2e0c70f4c44ade" translate="yes" xml:space="preserve">
          <source>Seeing it in action</source>
          <target state="translated">Viéndolo en acción</target>
        </trans-unit>
        <trans-unit id="98400a67c2d4c611968f0a801cbc2ba8831297eb" translate="yes" xml:space="preserve">
          <source>Testing your indexers (or calling them directly)</source>
          <target state="translated">Probando sus indexadores (o llamándolos directamente)</target>
        </trans-unit>
        <trans-unit id="ea0baf898c4f9d6b24b124e7810475746b2d008d" translate="yes" xml:space="preserve">
          <source>The important things here are:</source>
          <target state="translated">Las cosas importantes aquí son:</target>
        </trans-unit>
        <trans-unit id="96fc35eea0c31d6811ee1ea77354125f49833a5e" translate="yes" xml:space="preserve">
          <source>The indexable object wrapper has one particular feature: instances of the wrapper will provide the same interfaces as instances of the wrapped object.
For example:</source>
          <target state="translated">La envoltura del objeto indexable tiene una característica particular:las instancias de la envoltura proporcionarán las mismas interfaces que las instancias del objeto envuelto.Por ejemplo:</target>
        </trans-unit>
        <trans-unit id="f349c91591d38f5c8901fa5838fa36323b2d3cad" translate="yes" xml:space="preserve">
          <source>These need to be registered as named adapters, where the name corresponds to the index name.
In ZCML, that may be:</source>
          <target state="translated">Estos deben registrarse como adaptadores de nombre,donde el nombre corresponde al nombre del índice.En ZCML,eso puede ser:</target>
        </trans-unit>
        <trans-unit id="c2a45f84d5c33b6c4feb5e9f5f60968a97548763" translate="yes" xml:space="preserve">
          <source>This does not affect the first catalog:</source>
          <target state="translated">Esto no afecta al primer catálogo:</target>
        </trans-unit>
        <trans-unit id="f36b6578fe0ceed0505ba93f0120c066838add66" translate="yes" xml:space="preserve">
          <source>This means that you can&amp;rsquo;t just call your function to test the indexer.
Instead, you need to instantiate the adapter and then call the delegating indexer with the portal root as the first argument.
For example:</source>
          <target state="translated">This means that you can&amp;rsquo;t just call your function to test the indexer. Instead, you need to instantiate the adapter and then call the delegating indexer with the portal root as the first argument. For example:</target>
        </trans-unit>
        <trans-unit id="33298d9150df657eb8e26ac262bf5f3532f60c08" translate="yes" xml:space="preserve">
          <source>This package comes with an implementation of an IIndexableObject adapter that knows how to delegate to an IIndexer.
Let&amp;rsquo;s now register that as the default IIndexableObject wrapper adapter so that the code above will find it:</source>
          <target state="translated">This package comes with an implementation of an IIndexableObject adapter that knows how to delegate to an IIndexer. Let&amp;rsquo;s now register that as the default IIndexableObject wrapper adapter so that the code above will find it:</target>
        </trans-unit>
        <trans-unit id="22204a73f5d9236af11f845c0fb8a87c204ecd90" translate="yes" xml:space="preserve">
          <source>This package provides primitives to help delegate ZCatalog indexing operations
to adapters. It doesn&amp;rsquo;t do very much on its own, but can be used by catalog
implementations that want to allow individual index values to be provided
not by the object itself, but by separate adapters.</source>
          <target state="translated">This package provides primitives to help delegate ZCatalog indexing operations to adapters. It doesn&amp;rsquo;t do very much on its own, but can be used by catalog implementations that want to allow individual index values to be provided not by the object itself, but by separate adapters.</target>
        </trans-unit>
        <trans-unit id="469b5a0305aef19a4c3e00021f7e5b61172812f3" translate="yes" xml:space="preserve">
          <source>This will suffice in most cases.
Note that there is actually a second parameter, catalog, which defaults to None.
If you need to write an indexer that acts on catalog, you&amp;rsquo;ll need to register a conventional adapter, as described in the next section.</source>
          <target state="translated">This will suffice in most cases. Note that there is actually a second parameter, catalog, which defaults to None. If you need to write an indexer that acts on catalog, you&amp;rsquo;ll need to register a conventional adapter, as described in the next section.</target>
        </trans-unit>
        <trans-unit id="731f19e14515778f6c6d3bb7a8b45349d81a2da7" translate="yes" xml:space="preserve">
          <source>Unboxing</source>
          <target state="translated">Desembalaje</target>
        </trans-unit>
        <trans-unit id="ca3372bbc00cbeab6495469ce98534f65a1660c5" translate="yes" xml:space="preserve">
          <source>Update license to GPL version 2 only.
[hannosch]</source>
          <target state="translated">Actualizar la licencia a la versión 2 de la GPL solamente.[hannosch]</target>
        </trans-unit>
        <trans-unit id="475043ec80349fae557fbfba2af7d518620887f7" translate="yes" xml:space="preserve">
          <source>Updated the interface to match the developments of similar functionality
on CMF trunk. This means that indexers are now multi-adapters on
(object, catalog), and the keyword arguments (including the implicit
&amp;lsquo;portal&amp;rsquo; parameter) are gone.
[optilude]</source>
          <target state="translated">Updated the interface to match the developments of similar functionality on CMF trunk. This means that indexers are now multi-adapters on (object, catalog), and the keyword arguments (including the implicit &amp;lsquo;portal&amp;rsquo; parameter) are gone. [optilude]</target>
        </trans-unit>
        <trans-unit id="c674dfd7314f767b0405885367f96f828cd8190f" translate="yes" xml:space="preserve">
          <source>We attempt to obtain an IIndexableObject for the object to be indexed.
This is just a way to get hold of an implementation of this interface (we&amp;rsquo;ll register one in a moment) and allow some coarse-grained overrides.</source>
          <target state="translated">We attempt to obtain an IIndexableObject for the object to be indexed. This is just a way to get hold of an implementation of this interface (we&amp;rsquo;ll register one in a moment) and allow some coarse-grained overrides.</target>
        </trans-unit>
        <trans-unit id="12ef5b28c78f9e30ef2619d83cdf4dc6798faae7" translate="yes" xml:space="preserve">
          <source>We can omit the &amp;lsquo;for&amp;rsquo; attribute because we passed this to the @indexer decorator, and we can omit the &amp;lsquo;provides&amp;rsquo; attribute because the thing returned by the decorator is actually a class providing the required IIndexer interface.</source>
          <target state="translated">We can omit the &amp;lsquo;for&amp;rsquo; attribute because we passed this to the @indexer decorator, and we can omit the &amp;lsquo;provides&amp;rsquo; attribute because the thing returned by the decorator is actually a class providing the required IIndexer interface.</target>
        </trans-unit>
        <trans-unit id="095679e3398a4cb96b40d74d1dd29cdc93ef45ff" translate="yes" xml:space="preserve">
          <source>We could write indexers for all of these like this:</source>
          <target state="translated">Podríamos escribir indexadores para todos estos como este:</target>
        </trans-unit>
        <trans-unit id="5f79fb19799ba48ff5027185f5747763734ea45a" translate="yes" xml:space="preserve">
          <source>We normally just use IZCatalog for the catalog adaptation, to apply to any catalog.
However, if you want different indexers for different types of catalogs, there is an example later in this test.</source>
          <target state="translated">Normalmente sólo usamos IZCatalog para la adaptación del catálogo,para aplicar a cualquier catálogo.Sin embargo,si quieres diferentes indexadores para diferentes tipos de catálogos,hay un ejemplo más adelante en esta prueba.</target>
        </trans-unit>
        <trans-unit id="b2ff76aaadf5a819e487f12a795ae1391a192f26" translate="yes" xml:space="preserve">
          <source>When the @indexer decorator returns, it turns your function into an instance of type DelegatingIndexerFactory.
This is an adapter factory that can create a DelegatingIndexer, which in turn will call your function when asked to perform indexing operations.</source>
          <target state="translated">Cuando el decorador @indexer vuelve,convierte su función en una instancia del tipo DelegatingIndexerFactory.Esta es una fábrica de adaptadores que puede crear un DelegatingIndexer,que a su vez llamará a su función cuando se le pida que realice operaciones de indexación.</target>
        </trans-unit>
        <trans-unit id="24fec355d234b8b8c5adf350ff17e82eb524df9c" translate="yes" xml:space="preserve">
          <source>Writing indexers</source>
          <target state="translated">Indizadores de escritura</target>
        </trans-unit>
        <trans-unit id="6afe7a9e1ba788129ef98cd64b87c41b3f86418c" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;d register this with ZCML like so:</source>
          <target state="translated">You&amp;rsquo;d register this with ZCML like so:</target>
        </trans-unit>
        <trans-unit id="80451934246b474fdcb18d7201d05f42a2545023" translate="yes" xml:space="preserve">
          <source>doctest</source>
          <target state="translated">doctest</target>
        </trans-unit>
        <trans-unit id="e5e545c6fdd493502516a5229acb106ce95b77ff" translate="yes" xml:space="preserve">
          <source>fix &lt;a href=&quot;https://github.com/plone/Products.CMFPlone/issues/2469&quot;&gt;https://github.com/plone/Products.CMFPlone/issues/2469&lt;/a&gt;:
&amp;ldquo;Subobjects are indexing attributes of parent&amp;rdquo;.
Allow only direct attributes and acquired PythonScripts,
but not acquired attributes.
Indexers and PythonScripts are able to handle this explicitly,
because they get the acquisition-wrapped object.
[jensens]</source>
          <target state="translated">fix &lt;a href=&quot;https://github.com/plone/Products.CMFPlone/issues/2469&quot;&gt;https://github.com/plone/Products.CMFPlone/issues/2469&lt;/a&gt;: &amp;ldquo;Subobjects are indexing attributes of parent&amp;rdquo;. Allow only direct attributes and acquired PythonScripts, but not acquired attributes. Indexers and PythonScripts are able to handle this explicitly, because they get the acquisition-wrapped object. [jensens]</target>
        </trans-unit>
        <trans-unit id="769fe11e0c56c394e28982d69980186acb97b385" translate="yes" xml:space="preserve">
          <source>import with</source>
          <target state="translated">importar con</target>
        </trans-unit>
        <trans-unit id="499c6c34d98702bf63eabdb2e0bcf49a1ec0f869" translate="yes" xml:space="preserve">
          <source>module from stdlib.
[thet]</source>
          <target state="translated">módulo de stdlib.[elt]</target>
        </trans-unit>
        <trans-unit id="fde36a54954cb00b580680dffb42ff541b5d08b2" translate="yes" xml:space="preserve">
          <source>zope.testing.doctestunit</source>
          <target state="translated">zope.testing.doctestunit</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
