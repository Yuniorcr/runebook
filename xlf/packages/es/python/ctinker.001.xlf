<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/ctinker/">
    <body>
      <group id="ctinker">
        <trans-unit id="cee4558221adcab19d9848dabd5a722aaaa2ed45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CTinker&lt;/code&gt; is capable of getting in the middle of virtually any build process by:</source>
          <target state="translated">&lt;code&gt;CTinker&lt;/code&gt; es capaz de intervenir en pr&amp;aacute;cticamente cualquier proceso de construcci&amp;oacute;n al:</target>
        </trans-unit>
        <trans-unit id="d4be7dd37d857b4f4a77721a1fb365ec77bd3f49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;C Tinker&lt;/strong&gt;, pronounced &lt;em&gt;see-tinker&lt;/em&gt; (or humorously &quot;stinker&quot;, as suggested by
&lt;a href=&quot;https://github.com/ocheret&quot;&gt;Chuck Ocheret&lt;/a&gt;) allows you to get in the middle of the build process of a
make/Ninja-style project and augment the compilation and linking as well as extract and redirect artifacts using
policies you can't implement otherwise even with LDFLAGS/CFLAGS magic.</source>
          <target state="translated">&lt;strong&gt;C Tinker&lt;/strong&gt; , pronunciado &lt;em&gt;see-tinker&lt;/em&gt; (o humor&amp;iacute;sticamente &quot;stinker&quot;, como sugiri&amp;oacute; &lt;a href=&quot;https://github.com/ocheret&quot;&gt;Chuck Ocheret&lt;/a&gt; ) le permite entrar en el medio del proceso de construcci&amp;oacute;n de un proyecto de estilo make / Ninja y aumentar la compilaci&amp;oacute;n y vinculaci&amp;oacute;n, as&amp;iacute; como extraer y Redirija los artefactos utilizando pol&amp;iacute;ticas que no puede implementar de otra manera incluso con LDFLAGS / CFLAGS magic.</target>
        </trans-unit>
        <trans-unit id="b1a8f2af082da0e64e0f6efd4f4818db6b61c01a" translate="yes" xml:space="preserve">
          <source>As a further illustration, if the original process invocation chain for a sample build is as follows:</source>
          <target state="translated">Como ilustración adicional,si la cadena de invocación del proceso original para la construcción de una muestra es la siguiente:</target>
        </trans-unit>
        <trans-unit id="8f7b8db04007ab4e6cb522976d9fad3475938b3f" translate="yes" xml:space="preserve">
          <source>Being invoked for each tool invocation in a &lt;code&gt;worker&lt;/code&gt; mode (based on environmental variables),
communicating with the &lt;code&gt;supervisor&lt;/code&gt;, sending command-line arguments to the &lt;code&gt;supervisor&lt;/code&gt; process and then
invoking the tool itself.</source>
          <target state="translated">Ser invocado para cada invocaci&amp;oacute;n de herramienta en modo &lt;code&gt;worker&lt;/code&gt; (basado en variables ambientales), comunicarse con el &lt;code&gt;supervisor&lt;/code&gt; , enviar argumentos de l&amp;iacute;nea de comando al proceso &lt;code&gt;supervisor&lt;/code&gt; y luego invocar la propia herramienta.</target>
        </trans-unit>
        <trans-unit id="45f892e57440dc6c011ce74aa8bafde4a8414521" translate="yes" xml:space="preserve">
          <source>CTinker - C/C++ Project Introspection and Augmentation Tool</source>
          <target state="translated">CTinker-C/C++Herramienta de introspección y aumento de proyectos</target>
        </trans-unit>
        <trans-unit id="7661ba55453b25e5a4a35c5bd413a649b654e8fa" translate="yes" xml:space="preserve">
          <source>CTinker is a C project introspection and augmentation tool</source>
          <target state="translated">CTinker es una herramienta de introspección y aumento del proyecto C</target>
        </trans-unit>
        <trans-unit id="611f6daef3d61f0ff9fdc4a77292e4a5970e7bb8" translate="yes" xml:space="preserve">
          <source>Creating a temporary directory full of toolkit-specific (e.g. for LLVM Clang it's &lt;code&gt;clang&lt;/code&gt;, &lt;code&gt;ar&lt;/code&gt; etc)
symlinks referring back to &lt;code&gt;CTinker&lt;/code&gt; executable.</source>
          <target state="translated">Crear un directorio temporal lleno de enlaces simb&amp;oacute;licos espec&amp;iacute;ficos del kit de herramientas (por ejemplo, para LLVM Clang es &lt;code&gt;clang&lt;/code&gt; , &lt;code&gt;ar&lt;/code&gt; , etc.) que se refieren al ejecutable de &lt;code&gt;CTinker&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Ejemplo</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Ayuda</target>
        </trans-unit>
        <trans-unit id="e230b4612943b3fee8bed470ec510d31f987ca01" translate="yes" xml:space="preserve">
          <source>I need to get in the middle of a build process of a project I can know intimately but do not control
and that I have no intention of maintaining a fork/patches for, or for which I need to obtain runtime
dynamic control of the build process.</source>
          <target state="translated">Necesito meterme en medio de un proceso de construcción de un proyecto que puedo conocer íntimamente pero que no controlo y que no tengo intención de mantener una bifurcación/parches para,o para la cual necesito obtener un control dinámico en tiempo de ejecución del proceso de construcción.</target>
        </trans-unit>
        <trans-unit id="a7c7003f41154bf59e66e5ddd53746641e5a73d4" translate="yes" xml:space="preserve">
          <source>If specified, invoking &lt;code&gt;scripting&lt;/code&gt; handlers before and after the build as a whole (in the &lt;code&gt;supervisor&lt;/code&gt;)
and before and after each intercepted tool invocation (in the &lt;code&gt;worker&lt;/code&gt;).</source>
          <target state="translated">Si se especifica, se invoca a los controladores de &lt;code&gt;scripting&lt;/code&gt; antes y despu&amp;eacute;s de la compilaci&amp;oacute;n como un todo (en el &lt;code&gt;supervisor&lt;/code&gt; ) y antes y despu&amp;eacute;s de cada invocaci&amp;oacute;n de herramienta interceptada (en el &lt;code&gt;worker&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e14c1358024a39bc8a17ea229eea7c677186beef" translate="yes" xml:space="preserve">
          <source>Invoking the build process as specified by the user.</source>
          <target state="translated">Invocando el proceso de construcción según lo especificado por el usuario.</target>
        </trans-unit>
        <trans-unit id="4c083951aea114db79b695e69826f30d7a158cf2" translate="yes" xml:space="preserve">
          <source>It is guaranteed that &lt;code&gt;ctinker_start&lt;/code&gt; - &lt;code&gt;ctinker_finish&lt;/code&gt; and &lt;code&gt;ctinker_before_tool&lt;/code&gt; - &lt;code&gt;ctinker_after_tool&lt;/code&gt; pairs will
be executed in the same &lt;code&gt;supervisor&lt;/code&gt; and &lt;code&gt;worker&lt;/code&gt; processes &lt;em&gt;respectively&lt;/em&gt; and therefore you can pass values between
the start/finish and before/after functions (for example by a global or within the same instance of an object).</source>
          <target state="translated">Se garantiza que los &lt;code&gt;ctinker_start&lt;/code&gt; - &lt;code&gt;ctinker_finish&lt;/code&gt; y &lt;code&gt;ctinker_before_tool&lt;/code&gt; - &lt;code&gt;ctinker_after_tool&lt;/code&gt; se ejecutar&amp;aacute;n en los mismos procesos de &lt;code&gt;supervisor&lt;/code&gt; y &lt;code&gt;worker&lt;/code&gt; &lt;em&gt;respectivamente&lt;/em&gt; y, por lo tanto, puede pasar valores entre las funciones de inicio / finalizaci&amp;oacute;n y antes / despu&amp;eacute;s (por ejemplo, mediante una global o dentro de la misma instancia de un objeto).</target>
        </trans-unit>
        <trans-unit id="b127eaa52b0044c93134cac365a89c16698e6291" translate="yes" xml:space="preserve">
          <source>More formally the problem &lt;strong&gt;CTinker&lt;/strong&gt; solves can be stated as follows:</source>
          <target state="translated">M&amp;aacute;s formalmente, el problema que resuelve &lt;strong&gt;CTinker&lt;/strong&gt; se puede enunciar de la siguiente manera:</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Visión general</target>
        </trans-unit>
        <trans-unit id="774fec522beda5af3a1a17d19833e6b56fcc7eba" translate="yes" xml:space="preserve">
          <source>Printing to &lt;code&gt;sys.stdout&lt;/code&gt; from the &lt;code&gt;worker&lt;/code&gt; is dangerous as the stdout is often interpreted by the invoking tool
which can lead to a crash in the tool expecting certain data format. &lt;code&gt;print(&quot;debug!&quot;, file=sys.stderr)&lt;/code&gt; is generally
safe.</source>
          <target state="translated">Imprimir en &lt;code&gt;sys.stdout&lt;/code&gt; desde el &lt;code&gt;worker&lt;/code&gt; es peligroso ya que la herramienta de invocaci&amp;oacute;n suele interpretar la salida est&amp;aacute;ndar , lo que puede provocar un bloqueo en la herramienta que espera cierto formato de datos. &lt;code&gt;print(&quot;debug!&quot;, file=sys.stderr)&lt;/code&gt; es generalmente seguro.</target>
        </trans-unit>
        <trans-unit id="1baa06b4c8bc2d63f9db4d4cc86a2e2b12a7e893" translate="yes" xml:space="preserve">
          <source>Problem</source>
          <target state="translated">Problema</target>
        </trans-unit>
        <trans-unit id="7522becbe814d8b8cbc378f8930c8ca68bb2b8b5" translate="yes" xml:space="preserve">
          <source>Scripting</source>
          <target state="translated">Guión</target>
        </trans-unit>
        <trans-unit id="91146ee3bd4bd067d3589f2d17261dcb5f0642ce" translate="yes" xml:space="preserve">
          <source>Scripting is the most powerful part of &lt;code&gt;CTinker&lt;/code&gt; that provides an ability to really change how build functions
at runtime. It is implemented via a visitor pattern, invoking functions specified in the user-supplied script:</source>
          <target state="translated">La secuencia de comandos es la parte m&amp;aacute;s poderosa de &lt;code&gt;CTinker&lt;/code&gt; que brinda la capacidad de cambiar realmente las funciones de compilaci&amp;oacute;n en tiempo de ejecuci&amp;oacute;n. Se implementa a trav&amp;eacute;s de un patr&amp;oacute;n de visitante, invocando funciones especificadas en el script proporcionado por el usuario:</target>
        </trans-unit>
        <trans-unit id="7d35abde352ff3e67f5295268c2e4e0d394c89ea" translate="yes" xml:space="preserve">
          <source>Setting up environ and a local socket to communicate with the &lt;code&gt;workers&lt;/code&gt;.</source>
          <target state="translated">Configuraci&amp;oacute;n de entorno y un enchufe local para comunicarse con los &lt;code&gt;workers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4f91bdb0e1b0e40fff4debcd0fea22f1999f491" translate="yes" xml:space="preserve">
          <source>Solution</source>
          <target state="translated">Solución</target>
        </trans-unit>
        <trans-unit id="85ff3c02942ec7b1321cb3c749a4a1a25edaec6a" translate="yes" xml:space="preserve">
          <source>Starting in the &lt;code&gt;supervisor&lt;/code&gt; mode.</source>
          <target state="translated">Comenzando en el modo &lt;code&gt;supervisor&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ac8af0e3202f4f96d6c5b701dbe9563d6abd4d9" translate="yes" xml:space="preserve">
          <source>TBW</source>
          <target state="translated">TBW</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Solución de problemas</target>
        </trans-unit>
        <trans-unit id="6b2df7574f43d9cd7f0639cc019bc85ef4fce271" translate="yes" xml:space="preserve">
          <source>ctinker =&amp;gt; make =&amp;gt; ctinker-clang =&amp;gt; clang =&amp;gt; ctinker-lld =&amp;gt; lld, =&amp;gt; make =&amp;gt; ctinker-clang =&amp;gt; clang,
=&amp;gt; ctinker-clang =&amp;gt; clang =&amp;gt; ctinker-lld =&amp;gt; lld</source>
          <target state="translated">ctinker =&amp;gt; make =&amp;gt; ctinker-clang =&amp;gt; clang =&amp;gt; ctinker-lld =&amp;gt; lld, =&amp;gt; make =&amp;gt; ctinker-clang =&amp;gt; clang, =&amp;gt; ctinker-clang =&amp;gt; clang =&amp;gt; ctinker-lld =&amp;gt; lld</target>
        </trans-unit>
        <trans-unit id="b84d7c90d27ded663b935bf795fa8a6b36c73ff0" translate="yes" xml:space="preserve">
          <source>make =&amp;gt; clang =&amp;gt; lld, =&amp;gt; make =&amp;gt; clang, =&amp;gt; clang =&amp;gt; lld</source>
          <target state="translated">hacer =&amp;gt; clang =&amp;gt; lld, =&amp;gt; hacer =&amp;gt; clang, =&amp;gt; clang =&amp;gt; lld</target>
        </trans-unit>
        <trans-unit id="57beee9c14bbf9cd52f31f78522c6d9f9f7dc20c" translate="yes" xml:space="preserve">
          <source>then the same build instrumented with CTinker will produce the following process invocation chain:</source>
          <target state="translated">entonces la misma construcción instrumentada con CTinker producirá la siguiente cadena de invocación de procesos:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
