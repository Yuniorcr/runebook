<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/ctypesgen/">
    <body>
      <group id="ctypesgen">
        <trans-unit id="502f708941eaafa7a9f3d5709939f68a6c323d23" translate="yes" xml:space="preserve">
          <source>Python wrapper generator for ctypes</source>
          <target state="translated">Generador de envoltura de pitón para tipos</target>
        </trans-unit>
        <trans-unit id="a97fc50961982b66f2ceba6ebf02055171e28534" translate="yes" xml:space="preserve">
          <source>ctypesgen can also output JSON, which can be used with Mork, which generates bindings for Lua, using the alien module (which binds libffi to Lua).</source>
          <target state="translated">ctypesgen también puede producir JSON,que puede ser usado con Mork,que genera enlaces para Lua,usando el módulo alienígena (que une libffi a Lua).</target>
        </trans-unit>
        <trans-unit id="ef210a44a4fd297c37d5928755338f6c0e35831d" translate="yes" xml:space="preserve">
          <source>ctypesgen reads parses c header files and creates a wrapper for libraries based on what it finds.  Preprocessor macros are handled in a manner consistent with typical c code.  Preprocessor macro functions are translated into Python functions that are then made available to the user of the newly-generated Python wrapper library.</source>
          <target state="translated">ctypesgen lee los archivos de cabecera de parses c y crea un envoltorio para las bibliotecas basado en lo que encuentra.Las macros del preprocesador se manejan de manera consistente con el código c típico.Las funciones de las macros de preprocesador se traducen en funciones de Python que luego se ponen a disposición del usuario de la recién generada biblioteca de envoltura de Python.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
