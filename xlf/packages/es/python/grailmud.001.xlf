<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/grailmud/">
    <body>
      <group id="grailmud">
        <trans-unit id="35a20710a67ce1d93ad224463fb892934456cb89" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;s code and add the goblin
logic in there.</source>
          <target state="translated">y agregue la l&amp;oacute;gica goblin all&amp;iacute;.</target>
        </trans-unit>
        <trans-unit id="69f1a772a103f106040e1e5fc7bdb6ed21c404c8" translate="yes" xml:space="preserve">
          <source>A Python MUD server</source>
          <target state="translated">Un servidor de MUD Python</target>
        </trans-unit>
        <trans-unit id="f660583deb8d9a1fc5042fb8a1c14a8a4d2e2c65" translate="yes" xml:space="preserve">
          <source>Decoupling object logic and object state results in promoting &amp;lsquo;controllers&amp;rsquo;
(or as they ended up being called in the codebase, &lt;em&gt;delegates&lt;/em&gt;, in the Self
tradition) to first-class objects which can be added or removed from objects
at will. So if you want a staff to suddenly start acting like a goblin chief,
it becomes as simple as this:</source>
          <target state="translated">Desacoplar la l&amp;oacute;gica del objeto y el estado del objeto da como resultado la promoci&amp;oacute;n de 'controladores' (o como terminaron llam&amp;aacute;ndose en la base del c&amp;oacute;digo, &lt;em&gt;delegados&lt;/em&gt; , en la tradici&amp;oacute;n Self) a objetos de primera clase que se pueden agregar o eliminar de los objetos a voluntad. Entonces, si desea que un personal comience a actuar repentinamente como un jefe goblin, se vuelve tan simple como esto:</target>
        </trans-unit>
        <trans-unit id="2f580c18380983d909ab8ed0e762474eba7adc85" translate="yes" xml:space="preserve">
          <source>One result of the decoupling of display and game logic is that the difference
between player avatars and NPCs becomes the &amp;lsquo;controller&amp;rsquo; (the object that
receives the object&amp;rsquo;s events and acts upon them) for players is linked to a
socket (via the bowels of Twisted) and a few extra instance variables and
methods on the player (eg, the player&amp;rsquo;s password hash, and the method to take
a line of input and dispatch it to the appropriate command). In more tightly
coupled implementations, players and NPCs are different beasts entirely,
possibly resulting in ridiculous duplication like different &amp;lsquo;take away &lt;em&gt;X&lt;/em&gt;
hitpoints&amp;rsquo; routines for each type, which should reside in a common base class.</source>
          <target state="translated">Un resultado del desacoplamiento de la pantalla y la l&amp;oacute;gica del juego es que la diferencia entre los avatares del jugador y los NPC se convierte en el 'controlador' (el objeto que recibe los eventos del objeto y act&amp;uacute;a sobre ellos) para los jugadores est&amp;aacute; vinculado a un enchufe (a trav&amp;eacute;s de las entra&amp;ntilde;as de Twisted ) y algunas variables y m&amp;eacute;todos de instancia adicionales en el reproductor (por ejemplo, el hash de la contrase&amp;ntilde;a del jugador y el m&amp;eacute;todo para tomar una l&amp;iacute;nea de entrada y enviarla al comando apropiado). En implementaciones m&amp;aacute;s estrechamente acopladas, los jugadores y los NPC son bestias completamente diferentes, lo que posiblemente resulte en una duplicaci&amp;oacute;n rid&amp;iacute;cula como diferentes rutinas de ' quitar &lt;em&gt;X&lt;/em&gt; puntos de vida' para cada tipo, que deber&amp;iacute;an residir en una clase base com&amp;uacute;n.</target>
        </trans-unit>
        <trans-unit id="5bdee608fa661c1b5b42d8036a9e58c876a2a097" translate="yes" xml:space="preserve">
          <source>StaffObject</source>
          <target state="translated">StaffObject</target>
        </trans-unit>
        <trans-unit id="796ef8afc2a04895ef9d3c38e51c25c6880b0cc3" translate="yes" xml:space="preserve">
          <source>These points make grailmud different from other (aspiring-to-be)
production-ready MUD servers in this area (ie, MUDs written in Python).
PythonMOO, POO, et al, have used a custom scripting language for programming
game logic in, wheras grailmud uses Python for this task. Buyasta, wordplay,
et al, have a tighter coupling between display and game logic. nakedmud
reimplements a -lot- of stuff in C (ick!) which is already done in some
library, or which can be done painlessly in Python. There are many, many
hackish little MUD servers written (I wrote 2 or 3 of them before I got the
design more-or-less Right), but none of these are really suitable to build a
whole game in.</source>
          <target state="translated">Estos puntos hacen que el Grailmud sea diferente de otros servidores de MUD (aspirantes a serlo)listos para la producción en esta área (es decir,MUDs escritos en Python).PythonMOO,POO,et al,han usado un lenguaje de scripts personalizado para programar la lógica del juego en,donde grailmud usa Python para esta tarea.Buyasta,wordplay,et al,tienen un acoplamiento más estrecho entre la pantalla y la lógica del juego.nakedmud reimplementa un -lot-de cosas en C (ick!)que ya está hecho en alguna librería,o que se puede hacer sin dolor en Python.Hay muchos,muchos pequeños servidores de MUD escritos (escribí 2 o 3 de ellos antes de tener el diseño más o menos correcto),pero ninguno de ellos es realmente adecuado para construir un juego completo.</target>
        </trans-unit>
        <trans-unit id="7a8942901e61a4f168cd3a280ed469807aa28ce8" translate="yes" xml:space="preserve">
          <source>grailmud is a MUD server written entirely in Python (though optimising
bottlenecks in C, and a more restricted language for builders and untrusted
coders to work in are options which will be considered in the future) with a
loosely coupled design between the game logic and the display logic for
players, as well as a more loose than is traditional coupling between object
logic and object state. grailmud also leverages Twisted, pyparsing and durus,
so a bare minimum of low-level (networking|parsing|serialisation) code has to
be written.</source>
          <target state="translated">grailmud es un servidor MUD escrito completamente en Python (aunque optimizar los cuellos de botella en C,y un lenguaje más restringido para que los constructores y codificadores de poca confianza trabajen en él son opciones que se considerarán en el futuro)con un diseño vagamente acoplado entre la lógica del juego y la lógica de la pantalla para los jugadores,así como un acoplamiento más suelto que el tradicional entre la lógica de los objetos y el estado de los mismos.grailmud también aprovecha Twisted,pyparsing y durus,por lo que hay que escribir un mínimo de código de bajo nivel (networking|parsing|serialización).</target>
        </trans-unit>
        <trans-unit id="7996c3f3750c7adbd6240d4b253cc9cff31940d3" translate="yes" xml:space="preserve">
          <source>rather than having to delve into the</source>
          <target state="translated">en lugar de tener que ahondar en la</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
