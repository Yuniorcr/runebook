<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/fudge/">
    <body>
      <group id="fudge">
        <trans-unit id="5eac10d955e77365c4b38c49f908818f3411a05e" translate="yes" xml:space="preserve">
          <source>Complete documentation is available at &lt;a href=&quot;https://fudge.readthedocs.org/en/latest/&quot;&gt;https://fudge.readthedocs.org/en/latest/&lt;/a&gt;</source>
          <target state="translated">La documentaci&amp;oacute;n completa est&amp;aacute; disponible en &lt;a href=&quot;https://fudge.readthedocs.org/en/latest/&quot;&gt;https://fudge.readthedocs.org/en/latest/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c13afbf40129ff3222adbcddcbf4bdae54002f2c" translate="yes" xml:space="preserve">
          <source>Fudge is a Python module for using fake objects (mocks and stubs) to test real ones.</source>
          <target state="translated">Fudge es un módulo Python para usar objetos falsos (burlas y talones)para probar los reales.</target>
        </trans-unit>
        <trans-unit id="979e43004c2ac2a8ab821edf85d630614f648981" translate="yes" xml:space="preserve">
          <source>Here is a quick preview of how you can test code that sends
email without actually sending email:</source>
          <target state="translated">Aquí hay una rápida vista previa de cómo puedes probar el código que envía el correo electrónico sin enviar realmente un correo electrónico:</target>
        </trans-unit>
        <trans-unit id="fb1bb391a7eba76e0330fd54ebd9318823b1d136" translate="yes" xml:space="preserve">
          <source>In readable Python code, you declare what methods are available on your fake and
how they should be called. Then you inject that into your application and start
testing. This declarative approach means you don&amp;rsquo;t have to record and playback
actions and you don&amp;rsquo;t have to inspect your fakes after running code. If the fake
object was used incorrectly then you&amp;rsquo;ll see an informative exception message
with a traceback that points to the culprit.</source>
          <target state="translated">En el c&amp;oacute;digo Python legible, declaras qu&amp;eacute; m&amp;eacute;todos est&amp;aacute;n disponibles en tu falso y c&amp;oacute;mo se deben llamar. Luego lo inyecta en su aplicaci&amp;oacute;n y comienza a probar. Este enfoque declarativo significa que no tiene que grabar y reproducir acciones y no tiene que inspeccionar sus falsificaciones despu&amp;eacute;s de ejecutar el c&amp;oacute;digo. Si el objeto falso se us&amp;oacute; incorrectamente, ver&amp;aacute; un mensaje de excepci&amp;oacute;n informativo con un rastreo que apunta al culpable.</target>
        </trans-unit>
        <trans-unit id="2f680878f880516cd458d6920ff922438d656c03" translate="yes" xml:space="preserve">
          <source>Replace real objects with fakes (mocks, stubs, etc) while testing.</source>
          <target state="translated">Reemplazar los objetos reales con falsificaciones (burlas,talones,etc.)mientras se hace la prueba.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
