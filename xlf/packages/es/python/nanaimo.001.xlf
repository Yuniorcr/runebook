<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/nanaimo/">
    <body>
      <group id="nanaimo">
        <trans-unit id="57b0192c90bade6200f8fe6add2bd92423f9a981" translate="yes" xml:space="preserve">
          <source>A delicious Python treat that makes on-target testing sweet and satisfying.</source>
          <target state="translated">Una deliciosa golosina de pitón que hace que las pruebas en el objetivo sean dulces y satisfactorias.</target>
        </trans-unit>
        <trans-unit id="7e72ab885b6eecaecfbe3c9d5d916b2e1e1ab636" translate="yes" xml:space="preserve">
          <source>Block diagram of Nanaimo&amp;rsquo;s relationship to other components of a typical software build and test pipeline.</source>
          <target state="translated">Diagrama de bloques de la relaci&amp;oacute;n de Nanaimo con otros componentes de una construcci&amp;oacute;n de software t&amp;iacute;pica y una tuber&amp;iacute;a de prueba.</target>
        </trans-unit>
        <trans-unit id="9a5cf9c40036ab923e4b08d4bf75097ac400ff09" translate="yes" xml:space="preserve">
          <source>Example of S32K dev boards attached to Raspberry PI CI workers running the &lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt; agent and using Nanaimo.</source>
          <target state="translated">Ejemplo de placas de desarrollo S32K conectadas a trabajadores de Raspberry PI CI que ejecutan el agente &lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt; y utilizan Nanaimo.</target>
        </trans-unit>
        <trans-unit id="e4b9878a6bb4d7ade487215e6a25d783fd1e3a1d" translate="yes" xml:space="preserve">
          <source>Example scenario using Nanaimo to test an I2C driver for a microcontroller.</source>
          <target state="translated">Ejemplo de escenario usando Nanaimo para probar un controlador I2C para un microcontrolador.</target>
        </trans-unit>
        <trans-unit id="74dd49bd8ec3e146e66e88c16fcdff760c7dfd12" translate="yes" xml:space="preserve">
          <source>Framework for automating tests involving hardware test fixtures.</source>
          <target state="translated">Marco para la automatización de las pruebas con aparatos de prueba de hardware.</target>
        </trans-unit>
        <trans-unit id="b3e1ac3d545f8a410b7bcb9a5fd366c4bf888b75" translate="yes" xml:space="preserve">
          <source>Hierarchy of system testing. Nanaimo focuses on part and subassembly testing.</source>
          <target state="translated">Jerarquía de las pruebas del sistema.Nanaimo se centra en las pruebas de partes y subconjuntos.</target>
        </trans-unit>
        <trans-unit id="e6fa936c1f8b0374bb1f00c2e7ebcab08335fa24" translate="yes" xml:space="preserve">
          <source>Nanaimo is &lt;em&gt;not&lt;/em&gt; a simulation framework and is not designed to support the complexity of a full hardware-in-the-loop platform.
Instead it&amp;rsquo;s focused on testing small integrations with a few hardware components and instruments using concepts, syntax,
and frameworks familiar to software engineers. Examples of these small integrations might include verifying a SPI driver for a
microcontroller or ensuring the upload time for a serial bootloader meets expected Key-Performance-Indicators (KPIs). To do this
Nanaimo abstractions provide async interfaces to hardware either directly using available communication protocols
(e.g. serial or IP networks) or by invoking a CLI provided by the instrument vendor. Because of this latter use case some
instruments will require additional programs be available in a test environment.</source>
          <target state="translated">Nanaimo &lt;em&gt;no&lt;/em&gt; es un marco de simulaci&amp;oacute;n y no est&amp;aacute; dise&amp;ntilde;ado para soportar la complejidad de una plataforma completa de hardware en el ciclo. En cambio, se centra en probar peque&amp;ntilde;as integraciones con algunos componentes e instrumentos de hardware utilizando conceptos, sintaxis y marcos familiares para los ingenieros de software. Ejemplos de estas peque&amp;ntilde;as integraciones pueden incluir la verificaci&amp;oacute;n de un controlador SPI para un microcontrolador o garantizar que el tiempo de carga de un cargador de arranque en serie cumpla con los indicadores clave de rendimiento (KPI) esperados. Para hacer esto, las abstracciones de Nanaimo proporcionan interfaces as&amp;iacute;ncronas al hardware, ya sea directamente utilizando los protocolos de comunicaci&amp;oacute;n disponibles (por ejemplo, redes serie o IP) o invocando una CLI proporcionada por el proveedor del instrumento. Debido a este &amp;uacute;ltimo caso de uso, algunos instrumentos requerir&amp;aacute;n que haya programas adicionales disponibles en un entorno de prueba.</target>
        </trans-unit>
        <trans-unit id="14c12ea446b8fb714a267f185c0390be1cf066b4" translate="yes" xml:space="preserve">
          <source>Nanaimo is a set of utilities and plugins designed to enable integration of hardware test apparatuses
with pytest. This can allow on-target tests to run as part of continuous integration pipelines like
&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;, &lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt;, or &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;.</source>
          <target state="translated">Nanaimo es un conjunto de utilidades y complementos dise&amp;ntilde;ados para permitir la integraci&amp;oacute;n de aparatos de prueba de hardware con pytest. Esto puede permitir que las pruebas en el objetivo se ejecuten como parte de tuber&amp;iacute;as de integraci&amp;oacute;n continua como &lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt; , &lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt; o &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a3008905c2e9a32e2b3a3144f0ea7a8f7d1ef964" translate="yes" xml:space="preserve">
          <source>Nanaimo is alpha software and will remain so until we bump its version to 1.0.0 or greater.
We will not knowingly break compatibility within a minor revision but we will break compatibility
a few more times between minor revisions until beta is declared. Because of this you should depend
on a minor version explicitly. For example</source>
          <target state="translated">Nanaimo es un software alfa y lo seguirá siendo hasta que subamos su versión a 1.0.0 o superior.No romperemos a sabiendas la compatibilidad dentro de una revisión menor,pero romperemos la compatibilidad unas cuantas veces más entre revisiones menores hasta que se declare la beta.Debido a esto usted debe depender de una versión menor explícitamente.Por ejemplo</target>
        </trans-unit>
        <trans-unit id="9d7cd62b4cca86287dfc6d8d17a3b3d532dc71f3" translate="yes" xml:space="preserve">
          <source>Nanaimo is designed to enable testing of software-defined, physical components in isolation to
provide pre-integration verification of software interfaces and behavioral contracts. It adapts
asynchronous control and monitoring of these components to fit familiar testing idioms
(e.g. x-unit testing) using the popular python test framework, &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;.</source>
          <target state="translated">Nanaimo est&amp;aacute; dise&amp;ntilde;ado para permitir la prueba de componentes f&amp;iacute;sicos definidos por software de forma aislada para proporcionar verificaci&amp;oacute;n previa a la integraci&amp;oacute;n de interfaces de software y contratos de comportamiento. Adapta el control asincr&amp;oacute;nico y la supervisi&amp;oacute;n de estos componentes para adaptarse a los lenguajes de prueba familiares (por ejemplo, pruebas de unidades x) utilizando el popular marco de prueba de Python, &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ab972799d0dfd1ccd4227b35e29e69093098ded9" translate="yes" xml:space="preserve">
          <source>Nanaimo is named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Nanaimo_bar&quot;&gt;Nanaimo bars&lt;/a&gt; which are about the best things humans have ever invented.</source>
          <target state="translated">Nanaimo lleva el nombre de las &lt;a href=&quot;https://en.wikipedia.org/wiki/Nanaimo_bar&quot;&gt;barras Nanaimo,&lt;/a&gt; que son las mejores cosas que los humanos han inventado.</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Nota</target>
        </trans-unit>
        <trans-unit id="d03acb6e4ba3216844800c042f62673952a7e510" translate="yes" xml:space="preserve">
          <source>This design is an amalgam of the &lt;a href=&quot;https://www.youtube.com/watch?v=0BSaI117ITI&quot;&gt;TLYF&lt;/a&gt; (Test Like You Fly) methodology and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Swiss_cheese_model&quot;&gt;Swiss cheese&lt;/a&gt; model of
failure analysis. Specifically; Nanaimo facilitates testing on actual or representative hardware
for the first integration of software into a part or subassembly. Traditionally software engineers were
responsible only for unit-testing and Software-In-the-Loop (SIL) simulation of their code. Nanaimo encourages
software engineers to also provide hardware integration tests by enabling Hardware-In-the-Loop
&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous-integration&lt;/a&gt; (HIL-CI, perhaps?).</source>
          <target state="translated">Este dise&amp;ntilde;o es una amalgama de la &lt;a href=&quot;https://www.youtube.com/watch?v=0BSaI117ITI&quot;&gt;metodolog&amp;iacute;a TLYF&lt;/a&gt; (Test Like You Fly) y el modelo de an&amp;aacute;lisis de fallas del &lt;a href=&quot;https://en.wikipedia.org/wiki/Swiss_cheese_model&quot;&gt;queso suizo&lt;/a&gt; . Espec&amp;iacute;ficamente; Nanaimo facilita las pruebas en hardware real o representativo para la primera integraci&amp;oacute;n de software en una pieza o subensamblaje. Tradicionalmente, los ingenieros de software eran responsables solo de las pruebas unitarias y la simulaci&amp;oacute;n de software en el bucle (SIL) de su c&amp;oacute;digo. Nanaimo anima a los ingenieros de software para proporcionar tambi&amp;eacute;n pruebas de integraci&amp;oacute;n de hardware, permitiendo de Hardware en el Ciclo &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuo de integraci&amp;oacute;n&lt;/a&gt; (HIL-CI, tal vez?).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
