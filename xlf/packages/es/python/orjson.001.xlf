<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/orjson/">
    <body>
      <group id="orjson">
        <trans-unit id="741f71cdb67e7306357357415a5f301fe2797907" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONDecodeError&lt;/code&gt; is a subclass of &lt;code&gt;json.JSONDecodeError&lt;/code&gt; and &lt;code&gt;ValueError&lt;/code&gt;.
This is for compatibility with the standard library.</source>
          <target state="translated">&lt;code&gt;JSONDecodeError&lt;/code&gt; is a subclass of &lt;code&gt;json.JSONDecodeError&lt;/code&gt; and &lt;code&gt;ValueError&lt;/code&gt; . This is for compatibility with the standard library.</target>
        </trans-unit>
        <trans-unit id="a8032daa9584ccc4e2e0e4c5e5c74d00863dce40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONEncodeError&lt;/code&gt; is a subclass of &lt;code&gt;TypeError&lt;/code&gt;. This is for compatibility
with the standard library.</source>
          <target state="translated">&lt;code&gt;JSONEncodeError&lt;/code&gt; es una subclase de &lt;code&gt;TypeError&lt;/code&gt; . Esto es por compatibilidad con la biblioteca est&amp;aacute;ndar.</target>
        </trans-unit>
        <trans-unit id="9883feead6657c044813b5b18ddc50fad2450b8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, and &lt;code&gt;str&lt;/code&gt; input are accepted. If the input exists as
&lt;code&gt;bytes&lt;/code&gt; (was read directly from a source), it is recommended to
pass &lt;code&gt;bytes&lt;/code&gt;. This has lower memory usage and lower latency.</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; , &lt;code&gt;bytearray&lt;/code&gt; , and &lt;code&gt;str&lt;/code&gt; input are accepted. If the input exists as &lt;code&gt;bytes&lt;/code&gt; (was read directly from a source), it is recommended to pass &lt;code&gt;bytes&lt;/code&gt; . This has lower memory usage and lower latency.</target>
        </trans-unit>
        <trans-unit id="b158bac8a7f237c9c3ce977854c4416f129b753f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dataclass&lt;/code&gt; also serialize as maps but this has no effect on them.</source>
          <target state="translated">&lt;code&gt;dataclass&lt;/code&gt; also serialize as maps but this has no effect on them.</target>
        </trans-unit>
        <trans-unit id="fb74cbe6df6b60dc8f2136ed0a0c8ce9cd6e1f12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;datetime.date&lt;/code&gt; objects will always serialize.</source>
          <target state="translated">&lt;code&gt;datetime.date&lt;/code&gt; objects will always serialize.</target>
        </trans-unit>
        <trans-unit id="139bc3000c4733650a0c3de53b78a1e5f4c0c924" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;datetime.datetime&lt;/code&gt; supports instances with a &lt;code&gt;tzinfo&lt;/code&gt; that is &lt;code&gt;None&lt;/code&gt;,
&lt;code&gt;datetime.timezone.utc&lt;/code&gt; or a timezone instance from
the &lt;code&gt;pendulum&lt;/code&gt;, &lt;code&gt;pytz&lt;/code&gt;, or &lt;code&gt;dateutil&lt;/code&gt;/&lt;code&gt;arrow&lt;/code&gt; libraries.</source>
          <target state="translated">&lt;code&gt;datetime.datetime&lt;/code&gt; supports instances with a &lt;code&gt;tzinfo&lt;/code&gt; that is &lt;code&gt;None&lt;/code&gt; , &lt;code&gt;datetime.timezone.utc&lt;/code&gt; or a timezone instance from the &lt;code&gt;pendulum&lt;/code&gt; , &lt;code&gt;pytz&lt;/code&gt; , or &lt;code&gt;dateutil&lt;/code&gt; / &lt;code&gt;arrow&lt;/code&gt; libraries.</target>
        </trans-unit>
        <trans-unit id="da70045adf9bd3a3fb32fc799b6769c96bb7e2fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;datetime.time&lt;/code&gt; objects must not have a &lt;code&gt;tzinfo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;datetime.time&lt;/code&gt; objects must not have a &lt;code&gt;tzinfo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0ca49e221d80256d469aa23fb081240bf15bb78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dumps()&lt;/code&gt; serializes Python objects to JSON.</source>
          <target state="translated">&lt;code&gt;dumps()&lt;/code&gt; serializa los objetos de Python en JSON.</target>
        </trans-unit>
        <trans-unit id="29d5dcaeab9c57ee4f7974c442f3a00f293ffef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loads()&lt;/code&gt; deserializes JSON to Python objects. It deserializes to &lt;code&gt;dict&lt;/code&gt;,
&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;loads()&lt;/code&gt; deserializes JSON to Python objects. It deserializes to &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;bool&lt;/code&gt; , and &lt;code&gt;None&lt;/code&gt; objects.</target>
        </trans-unit>
        <trans-unit id="7267df1176146e1dfb668d4320500bd8d2be028d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;orjson.dumps()&lt;/code&gt; serializes Nan, Infinity, and -Infinity, which are not
compliant JSON, as &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;orjson.dumps()&lt;/code&gt; serializes Nan, Infinity, and -Infinity, which are not compliant JSON, as &lt;code&gt;null&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6b1763e51191daee6fcb44a350e1e41af85e82ed" translate="yes" xml:space="preserve">
          <source>Append &lt;code&gt;\n&lt;/code&gt; to the output. This is a convenience and optimization for the
pattern of &lt;code&gt;dumps(...) + &quot;\n&quot;&lt;/code&gt;. &lt;code&gt;bytes&lt;/code&gt; objects are immutable and this
pattern copies the original contents.</source>
          <target state="translated">Agregue &lt;code&gt;\n&lt;/code&gt; a la salida. Esta es una conveniencia y optimizaci&amp;oacute;n para el patr&amp;oacute;n de &lt;code&gt;dumps(...) + &quot;\n&quot;&lt;/code&gt; . &lt;code&gt;bytes&lt;/code&gt; objetos de bytes son inmutables y este patr&amp;oacute;n copia el contenido original.</target>
        </trans-unit>
        <trans-unit id="4364f5e0c635f36dc5615e4fb948f056bf09e4ca" translate="yes" xml:space="preserve">
          <source>Dataclasses are serialized as maps, with every attribute serialized and in
the order given on class definition:</source>
          <target state="translated">Las clases de datos se serializan como mapas,con cada atributo serializado y en el orden dado en la definición de la clase:</target>
        </trans-unit>
        <trans-unit id="def24040ec0e183b62686543d68814b3f7661f2c" translate="yes" xml:space="preserve">
          <source>Deserialize</source>
          <target state="translated">Deserializar</target>
        </trans-unit>
        <trans-unit id="31a3177b8a88d21e903d4cfe1cda84a50bf5f3f1" translate="yes" xml:space="preserve">
          <source>Do not serialize the &lt;code&gt;microsecond&lt;/code&gt; field on &lt;code&gt;datetime.datetime&lt;/code&gt; and
&lt;code&gt;datetime.time&lt;/code&gt; instances.</source>
          <target state="translated">No serialice el campo de &lt;code&gt;microsecond&lt;/code&gt; en instancias &lt;code&gt;datetime.datetime&lt;/code&gt; y &lt;code&gt;datetime.time&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="922147f0d2cef57d47b067cfe479172994bbc0ae" translate="yes" xml:space="preserve">
          <source>Enforce 53-bit limit on integers. The limit is otherwise 64 bits, the same as
the Python standard library. For more, see &lt;a href=&quot;https://github.com/ijl/orjson#int&quot;&gt;int&lt;/a&gt;.</source>
          <target state="translated">Enforce 53-bit limit on integers. The limit is otherwise 64 bits, the same as the Python standard library. For more, see &lt;a href=&quot;https://github.com/ijl/orjson#int&quot;&gt;int&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="aaa1fac2e46fef7afaa6fa3eb32be4a5e04a4214" translate="yes" xml:space="preserve">
          <source>Enums with members that are not supported types can be serialized using
&lt;code&gt;default&lt;/code&gt;:</source>
          <target state="translated">Enums with members that are not supported types can be serialized using &lt;code&gt;default&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="43cb215e4ad9eb740d0a6f287e3fc056e3fffa56" translate="yes" xml:space="preserve">
          <source>Errors with &lt;code&gt;tzinfo&lt;/code&gt; result in &lt;code&gt;JSONEncodeError&lt;/code&gt; being raised.</source>
          <target state="translated">Errors with &lt;code&gt;tzinfo&lt;/code&gt; result in &lt;code&gt;JSONEncodeError&lt;/code&gt; being raised.</target>
        </trans-unit>
        <trans-unit id="808cbf3eddd93052f7e93a259e1ea8b3079e11a3" translate="yes" xml:space="preserve">
          <source>Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy</source>
          <target state="translated">Rápida y correcta biblioteca Python JSON que soporta clases de datos,fechas y números.</target>
        </trans-unit>
        <trans-unit id="6a05c3cbcfd522cc50e3b8e540bd634d22c8b56f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;orjson.dumps()&lt;/code&gt; is given a &lt;code&gt;str&lt;/code&gt; that does not contain valid UTF-8,
&lt;code&gt;orjson.JSONEncodeError&lt;/code&gt; is raised. If &lt;code&gt;loads()&lt;/code&gt; receives invalid UTF-8,
&lt;code&gt;orjson.JSONDecodeError&lt;/code&gt; is raised.</source>
          <target state="translated">If &lt;code&gt;orjson.dumps()&lt;/code&gt; is given a &lt;code&gt;str&lt;/code&gt; that does not contain valid UTF-8, &lt;code&gt;orjson.JSONEncodeError&lt;/code&gt; is raised. If &lt;code&gt;loads()&lt;/code&gt; receives invalid UTF-8, &lt;code&gt;orjson.JSONDecodeError&lt;/code&gt; is raised.</target>
        </trans-unit>
        <trans-unit id="72a105cf881ee6a04d963f00859c646f7b50bc52" translate="yes" xml:space="preserve">
          <source>If an array is not a contiguous C array or contains an supported datatype,
orjson falls through to &lt;code&gt;default&lt;/code&gt;. In &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;obj.tolist()&lt;/code&gt; can be
specified. If an array is malformed, which is not expected,
&lt;code&gt;orjson.JSONEncodeError&lt;/code&gt; is raised.</source>
          <target state="translated">If an array is not a contiguous C array or contains an supported datatype, orjson falls through to &lt;code&gt;default&lt;/code&gt; . In &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;obj.tolist()&lt;/code&gt; can be specified. If an array is malformed, which is not expected, &lt;code&gt;orjson.JSONEncodeError&lt;/code&gt; is raised.</target>
        </trans-unit>
        <trans-unit id="f0985523da301f37a1543dc815b9a5d1650fc6cc" translate="yes" xml:space="preserve">
          <source>If displayed, the indentation and linebreaks appear like this:</source>
          <target state="translated">Si se muestran,la indentación y los saltos de línea aparecen así:</target>
        </trans-unit>
        <trans-unit id="16839ed5f334374d705656f137f278140064bd16" translate="yes" xml:space="preserve">
          <source>If someone implements it well.</source>
          <target state="translated">Si alguien lo implementa bien.</target>
        </trans-unit>
        <trans-unit id="1bd88092c0c2c75b9559e5ee53db08783a018f79" translate="yes" xml:space="preserve">
          <source>In these benchmarks, orjson serializes natively, ujson is blank because it
does not support a &lt;code&gt;default&lt;/code&gt; parameter, and the other libraries serialize
&lt;code&gt;ndarray.tolist()&lt;/code&gt; via &lt;code&gt;default&lt;/code&gt;. The RSS column measures peak memory
usage during serialization. This can be reproduced using the &lt;code&gt;pynumpy&lt;/code&gt; script.</source>
          <target state="translated">In these benchmarks, orjson serializes natively, ujson is blank because it does not support a &lt;code&gt;default&lt;/code&gt; parameter, and the other libraries serialize &lt;code&gt;ndarray.tolist()&lt;/code&gt; via &lt;code&gt;default&lt;/code&gt; . The RSS column measures peak memory usage during serialization. This can be reproduced using the &lt;code&gt;pynumpy&lt;/code&gt; script.</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Instalar</target>
        </trans-unit>
        <trans-unit id="b4d128a6cc90a51756541dbdab64df9aac8c7b2a" translate="yes" xml:space="preserve">
          <source>Invalid JSON documents not rejected</source>
          <target state="translated">Documentos JSON inválidos no rechazados</target>
        </trans-unit>
        <trans-unit id="746e6efdc066981771b02e26294544d73cb26490" translate="yes" xml:space="preserve">
          <source>It is faster to have orjson serialize datetime objects than to do so
before calling &lt;code&gt;dumps()&lt;/code&gt;. If using an unsupported type such as
&lt;code&gt;pendulum.datetime&lt;/code&gt;, use &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">It is faster to have orjson serialize datetime objects than to do so before calling &lt;code&gt;dumps()&lt;/code&gt; . If using an unsupported type such as &lt;code&gt;pendulum.datetime&lt;/code&gt; , use &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9462a0592ba143ee2841d2530dc04da8a6f86a5f" translate="yes" xml:space="preserve">
          <source>It is important that &lt;code&gt;default&lt;/code&gt; raise an exception if a type cannot be handled.
Python otherwise implicitly returns &lt;code&gt;None&lt;/code&gt;, which appears to the caller
like a legitimate value and is serialized:</source>
          <target state="translated">Es importante que por &lt;code&gt;default&lt;/code&gt; genere una excepci&amp;oacute;n si no se puede manejar un tipo. De lo contrario, Python devuelve impl&amp;iacute;citamente &lt;code&gt;None&lt;/code&gt; , que le parece a la persona que llama un valor leg&amp;iacute;timo y se serializa:</target>
        </trans-unit>
        <trans-unit id="3c47f394f65ba808020bd923adc4eef32792b3bb" translate="yes" xml:space="preserve">
          <source>It is supported to pass all variants of dataclasses, including dataclasses
using &lt;code&gt;__slots__&lt;/code&gt;, frozen dataclasses, those with optional or default
attributes, and subclasses. There is a performance benefit to not
using &lt;code&gt;__slots__&lt;/code&gt;.</source>
          <target state="translated">It is supported to pass all variants of dataclasses, including dataclasses using &lt;code&gt;__slots__&lt;/code&gt; , frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using &lt;code&gt;__slots__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6dd8d68f12148749661403cded438de71af98ecc" translate="yes" xml:space="preserve">
          <source>It natively serializes
&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;,
&lt;code&gt;dataclasses.dataclass&lt;/code&gt;, &lt;code&gt;typing.TypedDict&lt;/code&gt;, &lt;code&gt;datetime.datetime&lt;/code&gt;,
&lt;code&gt;datetime.date&lt;/code&gt;, &lt;code&gt;datetime.time&lt;/code&gt;, &lt;code&gt;uuid.UUID&lt;/code&gt;, &lt;code&gt;numpy.ndarray&lt;/code&gt;, and
&lt;code&gt;None&lt;/code&gt; instances. It supports arbitrary types through &lt;code&gt;default&lt;/code&gt;. It
serializes subclasses of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;,
&lt;code&gt;dataclasses.dataclass&lt;/code&gt;, and &lt;code&gt;enum.Enum&lt;/code&gt;. It does not serialize subclasses
of &lt;code&gt;tuple&lt;/code&gt; to avoid serializing &lt;code&gt;namedtuple&lt;/code&gt; objects as arrays. To avoid
serializing subclasses, specify the option &lt;code&gt;orjson.OPT_PASSTHROUGH_SUBCLASS&lt;/code&gt;.</source>
          <target state="translated">Serializa de forma nativa las instancias &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;tuple&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;dataclasses.dataclass&lt;/code&gt; , &lt;code&gt;typing.TypedDict&lt;/code&gt; , &lt;code&gt;datetime.datetime&lt;/code&gt; , &lt;code&gt;datetime.date&lt;/code&gt; , &lt;code&gt;datetime.time&lt;/code&gt; , &lt;code&gt;uuid.UUID&lt;/code&gt; , &lt;code&gt;numpy.ndarray&lt;/code&gt; y &lt;code&gt;None&lt;/code&gt; . Admite tipos arbitrarios por &lt;code&gt;default&lt;/code&gt; . Serializa subclases de &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; , &lt;code&gt;dataclasses.dataclass&lt;/code&gt; y &lt;code&gt;enum.Enum&lt;/code&gt; . Lo hace no subclases serializar de &lt;code&gt;tuple&lt;/code&gt; para evitar la serializaci&amp;oacute;n &lt;code&gt;namedtuple&lt;/code&gt; objetos como matrices. Para evitar la serializaci&amp;oacute;n de subclases, especifique la opci&amp;oacute;n &lt;code&gt;orjson.OPT_PASSTHROUGH_SUBCLASS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b84acf8922493f8780ace084df4e5d808d6c8acd" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONDecodeError&lt;/code&gt; if given an invalid type or invalid
JSON. This includes if the input contains &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, or &lt;code&gt;-Infinity&lt;/code&gt;,
which the standard library allows, but is not valid JSON.</source>
          <target state="translated">It raises &lt;code&gt;JSONDecodeError&lt;/code&gt; if given an invalid type or invalid JSON. This includes if the input contains &lt;code&gt;NaN&lt;/code&gt; , &lt;code&gt;Infinity&lt;/code&gt; , or &lt;code&gt;-Infinity&lt;/code&gt; , which the standard library allows, but is not valid JSON.</target>
        </trans-unit>
        <trans-unit id="dace9c80f045aac8c50e3c767e40c11e2dda65cb" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt;  if a &lt;code&gt;tzinfo&lt;/code&gt; on a datetime object is
unsupported.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; si un &lt;code&gt;tzinfo&lt;/code&gt; en un objeto de fecha y hora no es compatible.</target>
        </trans-unit>
        <trans-unit id="126f961ed1e1788ec5715c5fd8f74a6f026a75d2" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; if a &lt;code&gt;dict&lt;/code&gt; has a key of a type other than &lt;code&gt;str&lt;/code&gt;,
unless &lt;code&gt;OPT_NON_STR_KEYS&lt;/code&gt; is specified.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; si un &lt;code&gt;dict&lt;/code&gt; tiene una clave de un tipo que no sea &lt;code&gt;str&lt;/code&gt; , a menos que &lt;code&gt;OPT_NON_STR_KEYS&lt;/code&gt; se especifica.</target>
        </trans-unit>
        <trans-unit id="e32c27d74af352da41e57becf662cc3f3c335b42" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; if the output of &lt;code&gt;default&lt;/code&gt; recurses to handling by
&lt;code&gt;default&lt;/code&gt; more than 254 levels deep.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; si la salida del &lt;code&gt;default&lt;/code&gt; recursivamente a la manipulaci&amp;oacute;n por &lt;code&gt;default&lt;/code&gt; m&amp;aacute;s de 254 niveles de profundidad.</target>
        </trans-unit>
        <trans-unit id="50e2036465f6f796e18dcd245d0e40259bfcbc22" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on a &lt;code&gt;str&lt;/code&gt; that contains invalid UTF-8.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; en un &lt;code&gt;str&lt;/code&gt; que contiene UTF-8 v&amp;aacute;lido.</target>
        </trans-unit>
        <trans-unit id="e09d62a2fa829a7f953a4d2fd899b2e2993fe293" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on an integer that exceeds 64 bits by default or,
with &lt;code&gt;OPT_STRICT_INTEGER&lt;/code&gt;, 53 bits.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; en un n&amp;uacute;mero entero que excede de 64 bits por defecto o, con &lt;code&gt;OPT_STRICT_INTEGER&lt;/code&gt; , 53 bits.</target>
        </trans-unit>
        <trans-unit id="31584065ac771d296d95538dd2811be344f13761" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on an unsupported type. This exception message
describes the invalid object with the error message
&lt;code&gt;Type is not JSON serializable: ...&lt;/code&gt;. To fix this, specify
&lt;a href=&quot;https://github.com/ijl/orjson#default&quot;&gt;default&lt;/a&gt;.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; de un tipo no soportado. Este mensaje de excepci&amp;oacute;n describe el objeto no v&amp;aacute;lido con el mensaje de error &lt;code&gt;Type is not JSON serializable: ...&lt;/code&gt; . Para solucionar este problema, especifique &lt;a href=&quot;https://github.com/ijl/orjson#default&quot;&gt;default&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7aeb335908f02cc7ff7674c64b967b3962a2d279" translate="yes" xml:space="preserve">
          <source>It raises &lt;code&gt;JSONEncodeError&lt;/code&gt; on circular references.</source>
          <target state="translated">Plantea &lt;code&gt;JSONEncodeError&lt;/code&gt; en las referencias circulares.</target>
        </trans-unit>
        <trans-unit id="221b019f28e4cb77a2804dc334d192ce495bc819" translate="yes" xml:space="preserve">
          <source>Its features and drawbacks compared to other Python JSON libraries:</source>
          <target state="translated">Sus características e inconvenientes comparados con otras bibliotecas de Python JSON:</target>
        </trans-unit>
        <trans-unit id="315676c22c6ae82ecd028a6d3b4d2d1814207f37" translate="yes" xml:space="preserve">
          <source>JSON only requires that implementations accept integers with 53-bit precision.
orjson will, by default, serialize 64-bit integers. This is compatible with
the Python standard library and other non-browser implementations. For
transmitting JSON to a web browser or other strict implementations, &lt;code&gt;dumps()&lt;/code&gt;
can be configured to raise a &lt;code&gt;JSONEncodeError&lt;/code&gt; on values exceeding the
53-bit range.</source>
          <target state="translated">JSON only requires that implementations accept integers with 53-bit precision. orjson will, by default, serialize 64-bit integers. This is compatible with the Python standard library and other non-browser implementations. For transmitting JSON to a web browser or other strict implementations, &lt;code&gt;dumps()&lt;/code&gt; can be configured to raise a &lt;code&gt;JSONEncodeError&lt;/code&gt; on values exceeding the 53-bit range.</target>
        </trans-unit>
        <trans-unit id="3e399725267dedf7acdea8ef6196e811add39557" translate="yes" xml:space="preserve">
          <source>Latency</source>
          <target state="translated">Latencia</target>
        </trans-unit>
        <trans-unit id="eeacd18fdc498f4b8aab9f516cce7bf26afccf96" translate="yes" xml:space="preserve">
          <source>Latency (ms)</source>
          <target state="translated">Latencia (ms)</target>
        </trans-unit>
        <trans-unit id="b8100f5ba8bd048a7cf11d116fbbd73130c3c6f5" translate="yes" xml:space="preserve">
          <source>Library</source>
          <target state="translated">Biblioteca</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">Licencia</target>
        </trans-unit>
        <trans-unit id="f344f03920fd38a993c008ffa1ec82736d4e254d" translate="yes" xml:space="preserve">
          <source>Median latency (milliseconds)</source>
          <target state="translated">Latencia media (milisegundos)</target>
        </trans-unit>
        <trans-unit id="89c8a2851d1755cf87365b4a7c55e5551cf878c6" translate="yes" xml:space="preserve">
          <source>Memory</source>
          <target state="translated">Memoria</target>
        </trans-unit>
        <trans-unit id="78327bd6b1c4878fa59ed96c8e3108c92ded9378" translate="yes" xml:space="preserve">
          <source>Migrating</source>
          <target state="translated">Migrando</target>
        </trans-unit>
        <trans-unit id="3a6210179222a7dbcc865c57b2a14579aa9b728f" translate="yes" xml:space="preserve">
          <source>No. &lt;code&gt;bytes&lt;/code&gt; is the correct type for a serialized blob.</source>
          <target state="translated">No. &lt;code&gt;bytes&lt;/code&gt; is the correct type for a serialized blob.</target>
        </trans-unit>
        <trans-unit id="1a61f5718f5b128f9c0be895a15389403a0ff331" translate="yes" xml:space="preserve">
          <source>No. This requires a schema specifying what types are expected and how to
handle errors etc. This is addressed by data validation libraries a
level above this.</source>
          <target state="translated">No.Esto requiere un esquema que especifique qué tipos se esperan y cómo manejar los errores,etc.Esto se aborda mediante bibliotecas de validación de datos de un nivel superior a éste.</target>
        </trans-unit>
        <trans-unit id="c172e8232ff97ac35e2b57b42d077cd4d75ca4cf" translate="yes" xml:space="preserve">
          <source>OPT_APPEND_NEWLINE</source>
          <target state="translated">OPT_APPEND_NEWLINE</target>
        </trans-unit>
        <trans-unit id="38be4d89e39951a3d88b54308261dd0a2c851b3d" translate="yes" xml:space="preserve">
          <source>OPT_INDENT_2</source>
          <target state="translated">OPT_INDENT_2</target>
        </trans-unit>
        <trans-unit id="0f32e2364079b9decc6db2a701d67153d56ce1f4" translate="yes" xml:space="preserve">
          <source>OPT_NAIVE_UTC</source>
          <target state="translated">OPT_NAIVE_UTC</target>
        </trans-unit>
        <trans-unit id="ec3be9c15e01054d9b5bffad6d645f02cf3d16ca" translate="yes" xml:space="preserve">
          <source>OPT_NON_STR_KEYS</source>
          <target state="translated">OPT_NON_STR_KEYS</target>
        </trans-unit>
        <trans-unit id="aa09354512b79ffe1867732dc821722871dd43de" translate="yes" xml:space="preserve">
          <source>OPT_OMIT_MICROSECONDS</source>
          <target state="translated">OPT_OMIT_MICROSEGUNDOS</target>
        </trans-unit>
        <trans-unit id="013503d9a2cd03ec3b91ef1b3e23b81ec63765f1" translate="yes" xml:space="preserve">
          <source>OPT_PASSTHROUGH_DATACLASS</source>
          <target state="translated">OPT_PASSTHROUGH_DATACLASS</target>
        </trans-unit>
        <trans-unit id="15ddf2f602c4b0e5d28034915295a51c0deb5767" translate="yes" xml:space="preserve">
          <source>OPT_PASSTHROUGH_DATETIME</source>
          <target state="translated">OPT_PASSTHROUGH_DATETIME</target>
        </trans-unit>
        <trans-unit id="c879e0c223b9dd8ee51d6fe56a200db8b0bfd41c" translate="yes" xml:space="preserve">
          <source>OPT_PASSTHROUGH_SUBCLASS</source>
          <target state="translated">OPT_PASSTHROUGH_SUBCLASE</target>
        </trans-unit>
        <trans-unit id="dab9648b30517e17b08bef68d8c26fecea248976" translate="yes" xml:space="preserve">
          <source>OPT_SERIALIZE_DATACLASS</source>
          <target state="translated">OPT_SERIALIZE_DATACLASS</target>
        </trans-unit>
        <trans-unit id="65ca1e24b44ee3ec9fc0448ac13b6a8d0814b0bd" translate="yes" xml:space="preserve">
          <source>OPT_SERIALIZE_NUMPY</source>
          <target state="translated">OPT_SERIALIZAR_NUMPY</target>
        </trans-unit>
        <trans-unit id="077754db04e49df3db1b952bf09814894d709ece" translate="yes" xml:space="preserve">
          <source>OPT_SERIALIZE_UUID</source>
          <target state="translated">OPT_SERIALIZE_UUID</target>
        </trans-unit>
        <trans-unit id="8e52d0218e5f4b4272eb76ea09b853fd09811833" translate="yes" xml:space="preserve">
          <source>OPT_SORT_KEYS</source>
          <target state="translated">OPT_SORT_KEYS</target>
        </trans-unit>
        <trans-unit id="fd6ba4b6e83f7b18ec03a30cd4ed9bad067f00e9" translate="yes" xml:space="preserve">
          <source>OPT_STRICT_INTEGER</source>
          <target state="translated">OPT_STRICT_INTEGER</target>
        </trans-unit>
        <trans-unit id="512fe8427b2f7fd429a85dd06d27d0e5c130fcf1" translate="yes" xml:space="preserve">
          <source>OPT_UTC_Z</source>
          <target state="translated">OPT_UTC_Z</target>
        </trans-unit>
        <trans-unit id="f1125664b9d03b380f8b705ccebb61ceb220c83c" translate="yes" xml:space="preserve">
          <source>Operations per second</source>
          <target state="translated">Operaciones por segundo</target>
        </trans-unit>
        <trans-unit id="3a39b68c35be609fae3db651a70893a29f102145" translate="yes" xml:space="preserve">
          <source>Packaging</source>
          <target state="translated">Embalaje</target>
        </trans-unit>
        <trans-unit id="6a56bb4f20a3f199b8e8355d88a611eaf6d873fb" translate="yes" xml:space="preserve">
          <source>Passthrough &lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances to &lt;code&gt;default&lt;/code&gt;. This allows
customizing their output but is much slower.</source>
          <target state="translated">De paso a trav&amp;eacute;s &lt;code&gt;dataclasses.dataclass&lt;/code&gt; casos de &lt;code&gt;default&lt;/code&gt; . Esto permite personalizar su salida pero es mucho m&amp;aacute;s lento.</target>
        </trans-unit>
        <trans-unit id="a9d3465f35607232fc77875ca24591264fb11c57" translate="yes" xml:space="preserve">
          <source>Passthrough &lt;code&gt;datetime.datetime&lt;/code&gt;, &lt;code&gt;datetime.date&lt;/code&gt;, and &lt;code&gt;datetime.time&lt;/code&gt; instances
to &lt;code&gt;default&lt;/code&gt;. This allows serializing datetimes to a custom format, e.g.,
HTTP dates:</source>
          <target state="translated">Pase las instancias &lt;code&gt;datetime.datetime&lt;/code&gt; , &lt;code&gt;datetime.date&lt;/code&gt; y &lt;code&gt;datetime.time&lt;/code&gt; a los valores &lt;code&gt;default&lt;/code&gt; . Esto permite serializar fechas y horas en un formato personalizado, por ejemplo, fechas HTTP:</target>
        </trans-unit>
        <trans-unit id="8337914aadb6df67848d397dec05ebc9be85702e" translate="yes" xml:space="preserve">
          <source>Passthrough subclasses of builtin types to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Passthrough subclasses of builtin types to &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Actuación</target>
        </trans-unit>
        <trans-unit id="21ac2d247a25027e906841dcb8869fb951196a62" translate="yes" xml:space="preserve">
          <source>Pretty-print output with an indent of two spaces. This is equivalent to
&lt;code&gt;indent=2&lt;/code&gt; in the standard library. Pretty printing is slower and the output
larger. orjson is the fastest compared library at pretty printing and has
much less of a slowdown to pretty print than the standard library does. This
option is compatible with all other options.</source>
          <target state="translated">Salida de impresi&amp;oacute;n bonita con una sangr&amp;iacute;a de dos espacios. Esto es equivalente a &lt;code&gt;indent=2&lt;/code&gt; en la biblioteca est&amp;aacute;ndar. La impresi&amp;oacute;n bonita es m&amp;aacute;s lenta y la salida m&amp;aacute;s grande. orjson es la biblioteca m&amp;aacute;s r&amp;aacute;pida en comparaci&amp;oacute;n con la impresi&amp;oacute;n bonita y tiene una ralentizaci&amp;oacute;n mucho menor para la impresi&amp;oacute;n bonita que la biblioteca est&amp;aacute;ndar. Esta opci&amp;oacute;n es compatible con todas las dem&amp;aacute;s opciones.</target>
        </trans-unit>
        <trans-unit id="a823fe11ce6aa3e626b6bc5330561e58b4fd4650" translate="yes" xml:space="preserve">
          <source>Problems with the Rust nightly channel may require pinning a version.
&lt;code&gt;nightly-2020-06-09&lt;/code&gt; is known to be ok.</source>
          <target state="translated">Problems with the Rust nightly channel may require pinning a version. &lt;code&gt;nightly-2020-06-09&lt;/code&gt; is known to be ok.</target>
        </trans-unit>
        <trans-unit id="9a1fc1731f624d1f9dbca42b781ff8a60a6594e1" translate="yes" xml:space="preserve">
          <source>Questions</source>
          <target state="translated">Preguntas</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Inicio rápido</target>
        </trans-unit>
        <trans-unit id="ce169e4d4e21038f7c5b8577bd0a0b889904fed5" translate="yes" xml:space="preserve">
          <source>RSS diff (MiB)</source>
          <target state="translated">RSS diff (MiB)</target>
        </trans-unit>
        <trans-unit id="7699d2fda11c5d00e3330205966d43ddb1f8de8d" translate="yes" xml:space="preserve">
          <source>Relative (latency)</source>
          <target state="translated">Relativo (latencia)</target>
        </trans-unit>
        <trans-unit id="50876171e8d91c2d1011bc0c7d73aa09875c6611" translate="yes" xml:space="preserve">
          <source>Reproducing</source>
          <target state="translated">Reproduciendo</target>
        </trans-unit>
        <trans-unit id="1bfad986d32c6245287313998a082ba88b588f95" translate="yes" xml:space="preserve">
          <source>Serialization and deserialization performance of orjson is better than
ultrajson, rapidjson, simplejson, or json. The benchmarks are done on
fixtures of real data:</source>
          <target state="translated">El rendimiento de la serialización y deserialización de orjson es mejor que el de ultrajson,rapidjson,simplejson o json.Los puntos de referencia se hacen en instalaciones de datos reales:</target>
        </trans-unit>
        <trans-unit id="6d6721069e94a67d89931555797dda0103cb23bb" translate="yes" xml:space="preserve">
          <source>Serialize</source>
          <target state="translated">Serializar</target>
        </trans-unit>
        <trans-unit id="8b89b2b61d7aaf68572e85e701cb0a2202fa782c" translate="yes" xml:space="preserve">
          <source>Serialize &lt;code&gt;datetime.datetime&lt;/code&gt; objects without a &lt;code&gt;tzinfo&lt;/code&gt; as UTC. This
has no effect on &lt;code&gt;datetime.datetime&lt;/code&gt; objects that have &lt;code&gt;tzinfo&lt;/code&gt; set.</source>
          <target state="translated">Serializar objetos &lt;code&gt;datetime.datetime&lt;/code&gt; sin &lt;code&gt;tzinfo&lt;/code&gt; como UTC. Esto no tiene ning&amp;uacute;n efecto en los objetos &lt;code&gt;datetime.datetime&lt;/code&gt; que tienen configurado &lt;code&gt;tzinfo&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="50f3ebcaaa9b40254fd61d51e0346a2592bb9bdd" translate="yes" xml:space="preserve">
          <source>Serialize &lt;code&gt;dict&lt;/code&gt; keys in sorted order. The default is to serialize in an
unspecified order. This is equivalent to &lt;code&gt;sort_keys=True&lt;/code&gt; in the standard
library.</source>
          <target state="translated">Serialize &lt;code&gt;dict&lt;/code&gt; keys in sorted order. The default is to serialize in an unspecified order. This is equivalent to &lt;code&gt;sort_keys=True&lt;/code&gt; in the standard library.</target>
        </trans-unit>
        <trans-unit id="8c5c39a8f3bef6107b05d6007e8e0b4452554791" translate="yes" xml:space="preserve">
          <source>Serialize &lt;code&gt;dict&lt;/code&gt; keys of type other than &lt;code&gt;str&lt;/code&gt;. This allows &lt;code&gt;dict&lt;/code&gt; keys
to be one of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;datetime.datetime&lt;/code&gt;,
&lt;code&gt;datetime.date&lt;/code&gt;, &lt;code&gt;datetime.time&lt;/code&gt;, &lt;code&gt;enum.Enum&lt;/code&gt;, and &lt;code&gt;uuid.UUID&lt;/code&gt;. For comparison,
the standard library serializes &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; by
default. orjson benchmarks as being faster at serializing non-&lt;code&gt;str&lt;/code&gt; keys
than other libraries. This option is slower for &lt;code&gt;str&lt;/code&gt; keys than the default.</source>
          <target state="translated">Serializar claves &lt;code&gt;dict&lt;/code&gt; adas de un tipo distinto de &lt;code&gt;str&lt;/code&gt; . Esto permite que las claves &lt;code&gt;dict&lt;/code&gt; sean &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;None&lt;/code&gt; , &lt;code&gt;datetime.datetime&lt;/code&gt; , &lt;code&gt;datetime.date&lt;/code&gt; , &lt;code&gt;datetime.time&lt;/code&gt; , &lt;code&gt;enum.Enum&lt;/code&gt; y &lt;code&gt;uuid.UUID&lt;/code&gt; . A modo de comparaci&amp;oacute;n, la biblioteca est&amp;aacute;ndar serializa &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;bool&lt;/code&gt; o &lt;code&gt;None&lt;/code&gt; de forma predeterminada. Orjson benchmarks como ser m&amp;aacute;s r&amp;aacute;pido en serializar no &lt;code&gt;str&lt;/code&gt; claves que otras bibliotecas. Esta opci&amp;oacute;n es m&amp;aacute;s lenta para las teclas &lt;code&gt;str&lt;/code&gt; que la predeterminada.</target>
        </trans-unit>
        <trans-unit id="5c4654e4afaae58b2d90bfbf67e59f8bbc095133" translate="yes" xml:space="preserve">
          <source>Serialize &lt;code&gt;numpy.ndarray&lt;/code&gt; instances. For more, see
&lt;a href=&quot;https://github.com/ijl/orjson#numpy&quot;&gt;numpy&lt;/a&gt;.</source>
          <target state="translated">Serialize &lt;code&gt;numpy.ndarray&lt;/code&gt; instances. For more, see &lt;a href=&quot;https://github.com/ijl/orjson#numpy&quot;&gt;numpy&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1af03654cacd8f45c845e699d351cf305273c209" translate="yes" xml:space="preserve">
          <source>Serialize a UTC timezone on &lt;code&gt;datetime.datetime&lt;/code&gt; instances as &lt;code&gt;Z&lt;/code&gt; instead
of &lt;code&gt;+00:00&lt;/code&gt;.</source>
          <target state="translated">Serialize a UTC timezone on &lt;code&gt;datetime.datetime&lt;/code&gt; instances as &lt;code&gt;Z&lt;/code&gt; instead of &lt;code&gt;+00:00&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Prueba</target>
        </trans-unit>
        <trans-unit id="cc6c1e3ea0534ec02b37f40e89f38f4c43dae1c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;default&lt;/code&gt; callable may return an object that itself
must be handled by &lt;code&gt;default&lt;/code&gt; up to 254 times before an exception
is raised.</source>
          <target state="translated">El invocable &lt;code&gt;default&lt;/code&gt; puede devolver un objeto que en s&amp;iacute; mismo debe manejarse de manera &lt;code&gt;default&lt;/code&gt; hasta 254 veces antes de que se genere una excepci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="caec3402aaefe06c553e9d9e3a610eed441e6e7c" translate="yes" xml:space="preserve">
          <source>The above was measured using Python 3.8.3 on Linux (x86_64) with
orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.</source>
          <target state="translated">Lo anterior fue medido usando Python 3.8.3 en Linux (x86_64)con orjson 3.3.0,ujson 3.0.0,python-rapidson 0.9.1,y simplejson 3.17.2.</target>
        </trans-unit>
        <trans-unit id="fda3cac9f6062eb64644c3cc4b86255298e7377b" translate="yes" xml:space="preserve">
          <source>The array must be a contiguous C array (&lt;code&gt;C_CONTIGUOUS&lt;/code&gt;) and one of the
supported datatypes. Individual items (e.g., &lt;code&gt;numpy.float64(1)&lt;/code&gt;) are
not supported.</source>
          <target state="translated">The array must be a contiguous C array ( &lt;code&gt;C_CONTIGUOUS&lt;/code&gt; ) and one of the supported datatypes. Individual items (e.g., &lt;code&gt;numpy.float64(1)&lt;/code&gt; ) are not supported.</target>
        </trans-unit>
        <trans-unit id="0afd53d1ca4a2bea6deacb581ff766e765994128" translate="yes" xml:space="preserve">
          <source>The benchmark can be reproduced using the &lt;code&gt;pysort&lt;/code&gt; script.</source>
          <target state="translated">The benchmark can be reproduced using the &lt;code&gt;pysort&lt;/code&gt; script.</target>
        </trans-unit>
        <trans-unit id="540b50473d1ac8f7ffd0f09050d0fd9ae8224a8d" translate="yes" xml:space="preserve">
          <source>The graph above can be reproduced using the &lt;code&gt;pycorrectness&lt;/code&gt; script.</source>
          <target state="translated">The graph above can be reproduced using the &lt;code&gt;pycorrectness&lt;/code&gt; script.</target>
        </trans-unit>
        <trans-unit id="f4c24eebe66d51f249972dfeae9331f3daa54d49" translate="yes" xml:space="preserve">
          <source>The input must be valid UTF-8.</source>
          <target state="translated">La entrada debe ser un UTF-8 válido.</target>
        </trans-unit>
        <trans-unit id="0aff6721aaa92f70ceebe5da6fcd49b43de7d9b6" translate="yes" xml:space="preserve">
          <source>The latency results can be reproduced using the &lt;code&gt;pybench&lt;/code&gt; and &lt;code&gt;graph&lt;/code&gt;
scripts. The memory results can be reproduced using the &lt;code&gt;pymem&lt;/code&gt; script.</source>
          <target state="translated">The latency results can be reproduced using the &lt;code&gt;pybench&lt;/code&gt; and &lt;code&gt;graph&lt;/code&gt; scripts. The memory results can be reproduced using the &lt;code&gt;pymem&lt;/code&gt; script.</target>
        </trans-unit>
        <trans-unit id="374129ea15b929d6118063be35b3f9b55cf5c465" translate="yes" xml:space="preserve">
          <source>The library has comprehensive tests. There are tests against fixtures in the
&lt;a href=&quot;https://github.com/nst/JSONTestSuite&quot;&gt;JSONTestSuite&lt;/a&gt; and
&lt;a href=&quot;https://github.com/miloyip/nativejson-benchmark&quot;&gt;nativejson-benchmark&lt;/a&gt;
repositories. It is tested to not crash against the
&lt;a href=&quot;https://github.com/minimaxir/big-list-of-naughty-strings&quot;&gt;Big List of Naughty Strings&lt;/a&gt;.
It is tested to not leak memory. It is tested to not crash
against and not accept invalid UTF-8. There are integration tests
exercising the library's use in web servers (gunicorn using multiprocess/forked
workers) and when
multithreaded. It also uses some tests from the ultrajson library.</source>
          <target state="translated">The library has comprehensive tests. There are tests against fixtures in the &lt;a href=&quot;https://github.com/nst/JSONTestSuite&quot;&gt;JSONTestSuite&lt;/a&gt; and &lt;a href=&quot;https://github.com/miloyip/nativejson-benchmark&quot;&gt;nativejson-benchmark&lt;/a&gt; repositories. It is tested to not crash against the &lt;a href=&quot;https://github.com/minimaxir/big-list-of-naughty-strings&quot;&gt;Big List of Naughty Strings&lt;/a&gt;. It is tested to not leak memory. It is tested to not crash against and not accept invalid UTF-8. There are integration tests exercising the library's use in web servers (gunicorn using multiprocess/forked workers) and when multithreaded. It also uses some tests from the ultrajson library.</target>
        </trans-unit>
        <trans-unit id="59b62c16abc9a52476dcf6067cc25b1d5b19744a" translate="yes" xml:space="preserve">
          <source>The output is a &lt;code&gt;bytes&lt;/code&gt; object containing UTF-8.</source>
          <target state="translated">La salida es un objeto de &lt;code&gt;bytes&lt;/code&gt; que contiene UTF-8.</target>
        </trans-unit>
        <trans-unit id="311a3c71cb0706e2fc9bd052667c11b3fdf96a39" translate="yes" xml:space="preserve">
          <source>The sorting is not collation/locale-aware:</source>
          <target state="translated">La clasificación no es una recopilación o conocimiento local:</target>
        </trans-unit>
        <trans-unit id="7b760937ac577b438201b66fcde5d3091415721b" translate="yes" xml:space="preserve">
          <source>The tests should be run as part of the build.</source>
          <target state="translated">Las pruebas deben realizarse como parte de la construcción.</target>
        </trans-unit>
        <trans-unit id="61d7fe28b25388c0b2d763b4506bb3f85fdc6b03" translate="yes" xml:space="preserve">
          <source>There are no runtime dependencies other than libc.</source>
          <target state="translated">No hay otras dependencias en tiempo de ejecución que no sean la libc.</target>
        </trans-unit>
        <trans-unit id="b0c5b52a60c8951cb6299b8e91ef7c232fd9b26f" translate="yes" xml:space="preserve">
          <source>These types are generally serialized how they would be as
values, e.g., &lt;code&gt;datetime.datetime&lt;/code&gt; is still an RFC 3339 string and respects
options affecting it. The exception is that &lt;code&gt;int&lt;/code&gt; serialization does not
respect &lt;code&gt;OPT_STRICT_INTEGER&lt;/code&gt;.</source>
          <target state="translated">Estos tipos generalmente se serializan como ser&amp;iacute;an como valores, por ejemplo, &lt;code&gt;datetime.datetime&lt;/code&gt; sigue siendo una cadena RFC 3339 y respeta las opciones que la afectan. La excepci&amp;oacute;n es que la serializaci&amp;oacute;n &lt;code&gt;int&lt;/code&gt; no respeta &lt;code&gt;OPT_STRICT_INTEGER&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c234c225c5a1863e02a696c153528d453de00575" translate="yes" xml:space="preserve">
          <source>This can be used to ensure the order is deterministic for hashing or tests.
It has a substantial performance penalty and is not recommended in general.</source>
          <target state="translated">Esto puede ser usado para asegurar que el orden es determinístico para el hashing o las pruebas.Tiene una penalización de rendimiento considerable y no se recomienda en general.</target>
        </trans-unit>
        <trans-unit id="f931517c63fdf4c59f1de7ca4a548a6ea5b918d6" translate="yes" xml:space="preserve">
          <source>This does not affect datetimes in &lt;code&gt;dict&lt;/code&gt; keys if using OPT_NON_STR_KEYS.</source>
          <target state="translated">Esto no afecta a datetimes en &lt;code&gt;dict&lt;/code&gt; claves si se utiliza OPT_NON_STR_KEYS.</target>
        </trans-unit>
        <trans-unit id="4ac4343377cd44d8404740424b430bfada58d67b" translate="yes" xml:space="preserve">
          <source>This does not affect serializing subclasses as &lt;code&gt;dict&lt;/code&gt; keys if using
OPT_NON_STR_KEYS.</source>
          <target state="translated">This does not affect serializing subclasses as &lt;code&gt;dict&lt;/code&gt; keys if using OPT_NON_STR_KEYS.</target>
        </trans-unit>
        <trans-unit id="857ca490a71d65db69e49fd805c914ea54a85894" translate="yes" xml:space="preserve">
          <source>This is an example of serializing, with options specified, and deserializing:</source>
          <target state="translated">Este es un ejemplo de serialización,con opciones especificadas,y deserialización:</target>
        </trans-unit>
        <trans-unit id="7dc5ba43285493d1609673de56913e91e82acc1f" translate="yes" xml:space="preserve">
          <source>This is deprecated and has no effect in version 3. In version 2 this was
required to serialize  &lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances. For more, see
&lt;a href=&quot;https://github.com/ijl/orjson#dataclass&quot;&gt;dataclass&lt;/a&gt;.</source>
          <target state="translated">This is deprecated and has no effect in version 3. In version 2 this was required to serialize &lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances. For more, see &lt;a href=&quot;https://github.com/ijl/orjson#dataclass&quot;&gt;dataclass&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="bd729e4bd233c066f39f5ab9e1ab74cbfacf8234" translate="yes" xml:space="preserve">
          <source>This is deprecated and has no effect in version 3. In version 2 this was
required to serialize &lt;code&gt;uuid.UUID&lt;/code&gt; instances. For more, see
&lt;a href=&quot;https://github.com/ijl/orjson#UUID&quot;&gt;UUID&lt;/a&gt;.</source>
          <target state="translated">This is deprecated and has no effect in version 3. In version 2 this was required to serialize &lt;code&gt;uuid.UUID&lt;/code&gt; instances. For more, see &lt;a href=&quot;https://github.com/ijl/orjson#UUID&quot;&gt;UUID&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="97948905063f3f6a078068a4b36fa37600a9af9b" translate="yes" xml:space="preserve">
          <source>This is the same sorting behavior as the standard library, rapidjson,
simplejson, and ujson.</source>
          <target state="translated">Este es el mismo comportamiento de clasificación que el de la biblioteca estándar,rapidjson,simplejson y ujson.</target>
        </trans-unit>
        <trans-unit id="f87ce62e6f88c4d933bc70cefa2c06d968c0b6f3" translate="yes" xml:space="preserve">
          <source>This measures serializing 100MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with
dimensions of &lt;code&gt;(100000, 100)&lt;/code&gt; and &lt;code&gt;numpy.int32&lt;/code&gt; values:</source>
          <target state="translated">This measures serializing 100MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with dimensions of &lt;code&gt;(100000, 100)&lt;/code&gt; and &lt;code&gt;numpy.int32&lt;/code&gt; values:</target>
        </trans-unit>
        <trans-unit id="b36055402982c5179c062245f322d165163c9340" translate="yes" xml:space="preserve">
          <source>This measures serializing 105MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with
dimensions of &lt;code&gt;(100000, 200)&lt;/code&gt; and &lt;code&gt;numpy.bool&lt;/code&gt; values:</source>
          <target state="translated">This measures serializing 105MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with dimensions of &lt;code&gt;(100000, 200)&lt;/code&gt; and &lt;code&gt;numpy.bool&lt;/code&gt; values:</target>
        </trans-unit>
        <trans-unit id="1e416188157566cb67cfc59ec6f4ef87f5266c47" translate="yes" xml:space="preserve">
          <source>This measures serializing 555KiB of JSON, orjson natively and other libraries
using &lt;code&gt;default&lt;/code&gt; to serialize the output of &lt;code&gt;dataclasses.asdict()&lt;/code&gt;. This can be
reproduced using the &lt;code&gt;pydataclass&lt;/code&gt; script.</source>
          <target state="translated">This measures serializing 555KiB of JSON, orjson natively and other libraries using &lt;code&gt;default&lt;/code&gt; to serialize the output of &lt;code&gt;dataclasses.asdict()&lt;/code&gt; . This can be reproduced using the &lt;code&gt;pydataclass&lt;/code&gt; script.</target>
        </trans-unit>
        <trans-unit id="60d8dc5eba895ab49129c4d077ae912e0dfe0ef4" translate="yes" xml:space="preserve">
          <source>This measures serializing 589KiB of JSON comprising a &lt;code&gt;list&lt;/code&gt; of 100 &lt;code&gt;dict&lt;/code&gt;
in which each &lt;code&gt;dict&lt;/code&gt; has both 365 randomly-sorted &lt;code&gt;int&lt;/code&gt; keys representing epoch
timestamps as well as one &lt;code&gt;str&lt;/code&gt; key and the value for each key is a
single integer. In &quot;str keys&quot;, the keys were converted to &lt;code&gt;str&lt;/code&gt; before
serialization, and orjson still specifes &lt;code&gt;option=orjson.OPT_NON_STR_KEYS&lt;/code&gt;
(which is always somewhat slower).</source>
          <target state="translated">Esto mide la serializaci&amp;oacute;n de 589 KB de JSON que comprende una &lt;code&gt;list&lt;/code&gt; a de 100 &lt;code&gt;dict&lt;/code&gt; en la que cada &lt;code&gt;dict&lt;/code&gt; tiene 365 claves &lt;code&gt;int&lt;/code&gt; ordenadas al azar que representan marcas de tiempo de &amp;eacute;poca, as&amp;iacute; como una clave &lt;code&gt;str&lt;/code&gt; y el valor de cada clave es un solo entero. En &quot;str keys&quot;, las claves se convirtieron en &lt;code&gt;str&lt;/code&gt; antes de la serializaci&amp;oacute;n, y orjson a&amp;uacute;n especifica &lt;code&gt;option=orjson.OPT_NON_STR_KEYS&lt;/code&gt; (que siempre es algo m&amp;aacute;s lento).</target>
        </trans-unit>
        <trans-unit id="7a126b3338f96cdb7c95620f4931c34f0d3d0210" translate="yes" xml:space="preserve">
          <source>This measures serializing 92MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with
dimensions of &lt;code&gt;(50000, 100)&lt;/code&gt; and &lt;code&gt;numpy.float64&lt;/code&gt; values:</source>
          <target state="translated">This measures serializing 92MiB of JSON from an &lt;code&gt;numpy.ndarray&lt;/code&gt; with dimensions of &lt;code&gt;(50000, 100)&lt;/code&gt; and &lt;code&gt;numpy.float64&lt;/code&gt; values:</target>
        </trans-unit>
        <trans-unit id="aad9ad0cfdd20299e7635f37e2a95b0168597901" translate="yes" xml:space="preserve">
          <source>This measures serializing the citm_catalog.json fixture, more of a worst
case due to the amount of nesting and newlines, as compact (489KiB) or
pretty (1.1MiB):</source>
          <target state="translated">Esto mide la serialización del aparato citm_catalog.json,más de un caso peor debido a la cantidad de nidos y nuevas líneas,como compacto (489KiB)o bonito (1.1MiB):</target>
        </trans-unit>
        <trans-unit id="97c6ca43638af73db1a7b2748646fe4d0e747828" translate="yes" xml:space="preserve">
          <source>This measures serializing the github.json fixture as compact (52KiB) or
pretty (64KiB):</source>
          <target state="translated">Esto mide la serialización del aparato github.json como compacto (52KiB)o bonito (64KiB):</target>
        </trans-unit>
        <trans-unit id="aa342c17f4f5ec81ac27ea5d2635a49ad6f858a3" translate="yes" xml:space="preserve">
          <source>This measures serializing the twitter.json fixture unsorted and sorted:</source>
          <target state="translated">Esto mide la serialización del aparato de twitter.json sin ordenar y clasificado:</target>
        </trans-unit>
        <trans-unit id="8b85e91ab176e46a22b30aa290b415b6444c30e5" translate="yes" xml:space="preserve">
          <source>This measures, in the first column, RSS after importing a library and reading
the fixture, and in the second column, increases in RSS after repeatedly
calling &lt;code&gt;loads()&lt;/code&gt; on the fixture.</source>
          <target state="translated">This measures, in the first column, RSS after importing a library and reading the fixture, and in the second column, increases in RSS after repeatedly calling &lt;code&gt;loads()&lt;/code&gt; on the fixture.</target>
        </trans-unit>
        <trans-unit id="7ebe657084b5b2874ae4badfe3f7214fe5276e1e" translate="yes" xml:space="preserve">
          <source>This option has the risk of creating duplicate keys. This is because non-&lt;code&gt;str&lt;/code&gt;
objects may serialize to the same &lt;code&gt;str&lt;/code&gt; as an existing key, e.g.,
&lt;code&gt;{&quot;1&quot;: true, 1: false}&lt;/code&gt;. The last key to be inserted to the &lt;code&gt;dict&lt;/code&gt; will be
serialized last and a JSON deserializer will presumably take the last
occurrence of a key (in the above, &lt;code&gt;false&lt;/code&gt;). The first value will be lost.</source>
          <target state="translated">Esta opci&amp;oacute;n tiene el riesgo de crear claves duplicadas. Esto se debe a que los objetos que no son &lt;code&gt;str&lt;/code&gt; pueden serializarse en la misma &lt;code&gt;str&lt;/code&gt; que una clave existente, por ejemplo, &lt;code&gt;{&quot;1&quot;: true, 1: false}&lt;/code&gt; . La &amp;uacute;ltima clave que se insertar&amp;aacute; en el &lt;code&gt;dict&lt;/code&gt; se serializar&amp;aacute; en &amp;uacute;ltimo lugar y un deserializador JSON presumiblemente tomar&amp;aacute; la &amp;uacute;ltima aparici&amp;oacute;n de una clave (en lo anterior, &lt;code&gt;false&lt;/code&gt; ). El primer valor se perder&amp;aacute;.</target>
        </trans-unit>
        <trans-unit id="a65761d0136bc52bb0185a218f7346fa3a41a40c" translate="yes" xml:space="preserve">
          <source>This option is compatible with &lt;code&gt;orjson.OPT_SORT_KEYS&lt;/code&gt;. If sorting is used,
note the sort is unstable and will be unpredictable for duplicate keys.</source>
          <target state="translated">Esta opci&amp;oacute;n es compatible con &lt;code&gt;orjson.OPT_SORT_KEYS&lt;/code&gt; . Si se utiliza la clasificaci&amp;oacute;n, tenga en cuenta que la clasificaci&amp;oacute;n es inestable y ser&amp;aacute; impredecible para las claves duplicadas.</target>
        </trans-unit>
        <trans-unit id="c8db2438da16568d6907f71c511c344ce42362c7" translate="yes" xml:space="preserve">
          <source>This shows that all libraries deserialize valid JSON but only orjson
correctly rejects the given invalid JSON fixtures. Errors are largely due to
accepting invalid strings and numbers.</source>
          <target state="translated">Esto muestra que todas las bibliotecas deserializan JSON válidos,pero sólo Orson rechaza correctamente los accesorios JSON inválidos dados.Los errores se deben en gran medida a la aceptación de cadenas y números inválidos.</target>
        </trans-unit>
        <trans-unit id="dd781fa4bd080cf836fad8c41ce3c610ff1f64b4" translate="yes" xml:space="preserve">
          <source>To build a wheel, see &lt;a href=&quot;https://github.com/ijl/orjson#packaging&quot;&gt;packaging&lt;/a&gt;.</source>
          <target state="translated">Para construir una rueda, vea el &lt;a href=&quot;https://github.com/ijl/orjson#packaging&quot;&gt;empaque&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="969a5ad6e4f56a59a0c83b5ce1e55d11304818a5" translate="yes" xml:space="preserve">
          <source>To depend on orjson in a project:</source>
          <target state="translated">Depender de Orson en un proyecto:</target>
        </trans-unit>
        <trans-unit id="0715a7cffc5f25087bb8189581bd9add6d91e9ff" translate="yes" xml:space="preserve">
          <source>To disable serialization of &lt;code&gt;datetime&lt;/code&gt; objects specify the option
&lt;code&gt;orjson.OPT_PASSTHROUGH_DATETIME&lt;/code&gt;.</source>
          <target state="translated">To disable serialization of &lt;code&gt;datetime&lt;/code&gt; objects specify the option &lt;code&gt;orjson.OPT_PASSTHROUGH_DATETIME&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ad697ec4ebfe03b7796a406041af3a8f535aec1" translate="yes" xml:space="preserve">
          <source>To install a wheel from PyPI:</source>
          <target state="translated">Para instalar una rueda de PyPI:</target>
        </trans-unit>
        <trans-unit id="a54a0e79614701c0af2c9a2ed743d3e287608ef6" translate="yes" xml:space="preserve">
          <source>To make a best effort at deserializing bad input, first decode &lt;code&gt;bytes&lt;/code&gt; using
the &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;lossy&lt;/code&gt; argument for &lt;code&gt;errors&lt;/code&gt;:</source>
          <target state="translated">To make a best effort at deserializing bad input, first decode &lt;code&gt;bytes&lt;/code&gt; using the &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;lossy&lt;/code&gt; argument for &lt;code&gt;errors&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cc1b5513919ba7679a6462dc7a4f9b5dc2428889" translate="yes" xml:space="preserve">
          <source>To migrate from the standard library, the largest difference is that
&lt;code&gt;orjson.dumps&lt;/code&gt; returns &lt;code&gt;bytes&lt;/code&gt; and &lt;code&gt;json.dumps&lt;/code&gt; returns a &lt;code&gt;str&lt;/code&gt;. Users with
&lt;code&gt;dict&lt;/code&gt; objects using non-&lt;code&gt;str&lt;/code&gt; keys should specify
&lt;code&gt;option=orjson.OPT_NON_STR_KEYS&lt;/code&gt;. &lt;code&gt;sort_keys&lt;/code&gt; is replaced by
&lt;code&gt;option=orjson.OPT_SORT_KEYS&lt;/code&gt;. &lt;code&gt;indent&lt;/code&gt; is replaced by
&lt;code&gt;option=orjson.OPT_INDENT_2&lt;/code&gt; and other levels of indentation are not
supported.</source>
          <target state="translated">Para migrar desde la biblioteca est&amp;aacute;ndar, la mayor diferencia es que &lt;code&gt;orjson.dumps&lt;/code&gt; devuelve &lt;code&gt;bytes&lt;/code&gt; y &lt;code&gt;json.dumps&lt;/code&gt; devuelve una &lt;code&gt;str&lt;/code&gt; . Los usuarios con objetos &lt;code&gt;dict&lt;/code&gt; que utilicen claves que no sean &lt;code&gt;str&lt;/code&gt; deben especificar &lt;code&gt;option=orjson.OPT_NON_STR_KEYS&lt;/code&gt; . &lt;code&gt;sort_keys&lt;/code&gt; se reemplaza por &lt;code&gt;option=orjson.OPT_SORT_KEYS&lt;/code&gt; . &lt;code&gt;indent&lt;/code&gt; se reemplaza por &lt;code&gt;option=orjson.OPT_INDENT_2&lt;/code&gt; y no se admiten otros niveles de sangr&amp;iacute;a.</target>
        </trans-unit>
        <trans-unit id="c747ec7deeb7ad975eb877156fa22ad57317415c" translate="yes" xml:space="preserve">
          <source>To modify how data is serialized, specify &lt;code&gt;option&lt;/code&gt;. Each &lt;code&gt;option&lt;/code&gt; is an integer
constant in &lt;code&gt;orjson&lt;/code&gt;. To specify multiple options, mask them together, e.g.,
&lt;code&gt;option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC&lt;/code&gt;.</source>
          <target state="translated">Para modificar c&amp;oacute;mo se serializan los datos, especifique la &lt;code&gt;option&lt;/code&gt; . Cada &lt;code&gt;option&lt;/code&gt; es una constante entera en &lt;code&gt;orjson&lt;/code&gt; . Para especificar varias opciones, enmascararlas juntas, por ejemplo, &lt;code&gt;option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="774c90c1d9231954d6100c111f62fac5df53c489" translate="yes" xml:space="preserve">
          <source>To package orjson requires &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; on the
nightly channel and the &lt;a href=&quot;https://github.com/PyO3/maturin&quot;&gt;maturin&lt;/a&gt;
build tool. maturin can be installed from PyPI or packaged as
well. maturin can be invoked like:</source>
          <target state="translated">To package orjson requires &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; on the nightly channel and the &lt;a href=&quot;https://github.com/PyO3/maturin&quot;&gt;maturin&lt;/a&gt; build tool. maturin can be installed from PyPI or packaged as well. maturin can be invoked like:</target>
        </trans-unit>
        <trans-unit id="ceea7fef116533bb735d37cc8730aa8badbaeb7f" translate="yes" xml:space="preserve">
          <source>To serialize a subclass or arbitrary types, specify &lt;code&gt;default&lt;/code&gt; as a
callable that returns a supported type. &lt;code&gt;default&lt;/code&gt; may be a function,
lambda, or callable class instance. To specify that a type was not
handled by &lt;code&gt;default&lt;/code&gt;, raise an exception such as &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">Para serializar una subclase o tipos arbitrarios, especifique &lt;code&gt;default&lt;/code&gt; como un invocable que devuelve un tipo admitido. &lt;code&gt;default&lt;/code&gt; puede ser una funci&amp;oacute;n, lambda o instancia de clase invocable. Para especificar que un tipo no se manej&amp;oacute; de &lt;code&gt;default&lt;/code&gt; , genere una excepci&amp;oacute;n como &lt;code&gt;TypeError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Tipos</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Uso</target>
        </trans-unit>
        <trans-unit id="7819f5d8c09bd9007556b6eeb04507f94364b83b" translate="yes" xml:space="preserve">
          <source>Users may wish to control how dataclass instances are serialized, e.g.,
to not serialize an attribute or to change the name of an
attribute when serialized. orjson may implement support using the
metadata mapping on &lt;code&gt;field&lt;/code&gt; attributes,
e.g., &lt;code&gt;field(metadata={&quot;json_serialize&quot;: False})&lt;/code&gt;, if use cases are clear.</source>
          <target state="translated">Users may wish to control how dataclass instances are serialized, e.g., to not serialize an attribute or to change the name of an attribute when serialized. orjson may implement support using the metadata mapping on &lt;code&gt;field&lt;/code&gt; attributes, e.g., &lt;code&gt;field(metadata={&quot;json_serialize&quot;: False})&lt;/code&gt; , if use cases are clear.</target>
        </trans-unit>
        <trans-unit id="3acecf4563d301b67338f1af78a1c1bb147610bf" translate="yes" xml:space="preserve">
          <source>Valid JSON documents not deserialized</source>
          <target state="translated">Documentos válidos de JSON no deserializados</target>
        </trans-unit>
        <trans-unit id="9c494219ef5f4b075e9f705ccac72df86648745e" translate="yes" xml:space="preserve">
          <source>Will it deserialize to dataclasses, UUIDs, decimals, etc or support object_hook?</source>
          <target state="translated">¿Se deserializará a clases de datos,UUIDs,decimales,etc.o soportará object_hook?</target>
        </trans-unit>
        <trans-unit id="6cabcfb74c48b2cb406b43ea53c58fd3be5103c7" translate="yes" xml:space="preserve">
          <source>Will it serialize to &lt;code&gt;str&lt;/code&gt;?</source>
          <target state="translated">Will it serialize to &lt;code&gt;str&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="149004bac59d769c65eefe9de9dcacb58ebcafbc" translate="yes" xml:space="preserve">
          <source>Will it support PyPy?</source>
          <target state="translated">¿Apoyará a PyPy?</target>
        </trans-unit>
        <trans-unit id="360b68846dba9e466583e12be2795800a05456d7" translate="yes" xml:space="preserve">
          <source>canada.json</source>
          <target state="translated">canada.json</target>
        </trans-unit>
        <trans-unit id="73dcfdd06ba0be5f631609a463cd7b7560f9f509" translate="yes" xml:space="preserve">
          <source>canada.json deserialization</source>
          <target state="translated">canada.json deserialization</target>
        </trans-unit>
        <trans-unit id="d27b8779fe1e25665981ec84adb6cfb8d41562c7" translate="yes" xml:space="preserve">
          <source>canada.json serialization</source>
          <target state="translated">serialización de canada.json</target>
        </trans-unit>
        <trans-unit id="2639bf1cc64c5049b3453b3e1648c7d39d1cf71a" translate="yes" xml:space="preserve">
          <source>canada.json, 2.2MiB, coordinates of the Canadian border in GeoJSON
format, containing floats and arrays, indented.</source>
          <target state="translated">canada.json,2.2MiB,coordenadas de la frontera canadiense en formato GeoJSON,que contiene flotadores y matrices,indentado.</target>
        </trans-unit>
        <trans-unit id="bca7617f4307e55bb3d923f57b25c7d45c418183" translate="yes" xml:space="preserve">
          <source>citm_catalog.json</source>
          <target state="translated">citm_catalog.json</target>
        </trans-unit>
        <trans-unit id="35654244c2c0e4d47f3612c7e0f39586a57f8adb" translate="yes" xml:space="preserve">
          <source>citm_catalog.json deserialization</source>
          <target state="translated">citm_catalog.json deserialization</target>
        </trans-unit>
        <trans-unit id="004785879f0c5d6456b10eb66cee2ef3f2ecde26" translate="yes" xml:space="preserve">
          <source>citm_catalog.json serialization</source>
          <target state="translated">citm_catalog.json serialización</target>
        </trans-unit>
        <trans-unit id="f765a42bd120101f48bd4e3e48c562c15ac9d987" translate="yes" xml:space="preserve">
          <source>citm_catalog.json, 1.7MiB, concert data, containing nested dictionaries of
strings and arrays of integers, indented.</source>
          <target state="translated">citm_catalog.json,1.7MiB,datos de concierto,que contiene diccionarios anidados de cuerdas y matrices de números enteros,sangrados.</target>
        </trans-unit>
        <trans-unit id="70fc811aa72d67544f3052e28c12a8c201673341" translate="yes" xml:space="preserve">
          <source>compact (ms)</source>
          <target state="translated">compacto (ms)</target>
        </trans-unit>
        <trans-unit id="143e9666f392e8ceb33a818bae18dcb8bc4a470b" translate="yes" xml:space="preserve">
          <source>dataclass</source>
          <target state="translated">dataclass</target>
        </trans-unit>
        <trans-unit id="8f86841739db9505da576686e7510fff18de1076" translate="yes" xml:space="preserve">
          <source>dataclass (ms)</source>
          <target state="translated">clase de datos (ms)</target>
        </trans-unit>
        <trans-unit id="89ffad089c042f31dcc81269da38bef3ca44ab1f" translate="yes" xml:space="preserve">
          <source>datetime</source>
          <target state="translated">datetime</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">por defecto</target>
        </trans-unit>
        <trans-unit id="72bfe86cf91464fe9efaadc9430f27a9b2a56c31" translate="yes" xml:space="preserve">
          <source>dict (ms)</source>
          <target state="translated">dict (ms)</target>
        </trans-unit>
        <trans-unit id="090ff138a85aca42b2a77394e54c3f17b277db13" translate="yes" xml:space="preserve">
          <source>does not provide &lt;code&gt;load()&lt;/code&gt; or &lt;code&gt;dump()&lt;/code&gt; functions for reading from/writing to
file-like objects</source>
          <target state="translated">no proporciona funciones de &lt;code&gt;load()&lt;/code&gt; o &lt;code&gt;dump()&lt;/code&gt; para leer / escribir en objetos similares a archivos</target>
        </trans-unit>
        <trans-unit id="e338e8e3d1ddeb83df4ace416a87e89ed797cd19" translate="yes" xml:space="preserve">
          <source>enum</source>
          <target state="translated">enum</target>
        </trans-unit>
        <trans-unit id="685e80366130387cb75c055248326976d16fdf8d" translate="yes" xml:space="preserve">
          <source>float</source>
          <target state="translated">flotación</target>
        </trans-unit>
        <trans-unit id="6a84f775b2d89e4dd352cf9d198379b8cb7a0914" translate="yes" xml:space="preserve">
          <source>github.json</source>
          <target state="translated">github.json</target>
        </trans-unit>
        <trans-unit id="10c7c813455e39848c388a6e8380d03448d224de" translate="yes" xml:space="preserve">
          <source>github.json deserialization</source>
          <target state="translated">deserialización github.json</target>
        </trans-unit>
        <trans-unit id="45f0981b7c593df7728fef80fc101baaa6fe4374" translate="yes" xml:space="preserve">
          <source>github.json serialization</source>
          <target state="translated">serialización de github.json</target>
        </trans-unit>
        <trans-unit id="072ec71fdfe5ef8e9e6c7c4baef4e95cad840d21" translate="yes" xml:space="preserve">
          <source>github.json, 55.8KiB, a GitHub activity feed, containing dictionaries of
strings and arrays of dictionaries, not indented.</source>
          <target state="translated">github.json,55.8KiB,un alimentador de actividad de GitHub,que contiene diccionarios de cuerdas y matrices de diccionarios,no indentados.</target>
        </trans-unit>
        <trans-unit id="a7eb5dc8afce2173104a3a19e4e31be6788a8cf9" translate="yes" xml:space="preserve">
          <source>has an option for strict JSON conformance on 53-bit integers with default
support for 64-bit</source>
          <target state="translated">tiene una opción para el cumplimiento estricto de JSON en números enteros de 53-bit con soporte por defecto para 64-bit</target>
        </trans-unit>
        <trans-unit id="9b64e70018b532b2ef59ee6231fcc404a095cf89" translate="yes" xml:space="preserve">
          <source>has strict JSON conformance in not supporting Nan/Infinity/-Infinity</source>
          <target state="translated">tiene una estricta conformidad con el JSON al no apoyar a Nan/Infinity/-Infinity</target>
        </trans-unit>
        <trans-unit id="7a773db78ac33c506b4b1172c0907a9cfb917d25" translate="yes" xml:space="preserve">
          <source>has strict UTF-8 conformance, more correct than the standard library</source>
          <target state="translated">tiene una estricta conformidad con el UTF-8,más correcta que la biblioteca estándar</target>
        </trans-unit>
        <trans-unit id="c7de0e43e2fe868f8122a84d0bb5e7a10d666be4" translate="yes" xml:space="preserve">
          <source>import, read() RSS (MiB)</source>
          <target state="translated">importar,leer()RSS (MiB)</target>
        </trans-unit>
        <trans-unit id="46f8ab7c0cff9df7cd124852e26022a6bf89e315" translate="yes" xml:space="preserve">
          <source>int</source>
          <target state="translated">int</target>
        </trans-unit>
        <trans-unit id="85ac9f21dad586b21e75fe8f7451cd74fcf039ef" translate="yes" xml:space="preserve">
          <source>int keys (ms)</source>
          <target state="translated">teclas int (ms)</target>
        </trans-unit>
        <trans-unit id="7ee35d67b495200f6fbb92ea527eb13fb425b8e2" translate="yes" xml:space="preserve">
          <source>int keys sorted (ms)</source>
          <target state="translated">Teclas int clasificadas (ms)</target>
        </trans-unit>
        <trans-unit id="05d97e6e9834ccf063c552e404b9ecafc5e4d662" translate="yes" xml:space="preserve">
          <source>json</source>
          <target state="translated">json</target>
        </trans-unit>
        <trans-unit id="276a357763dd83b4e1f10cf448ac04763e13a6d3" translate="yes" xml:space="preserve">
          <source>loads() increase in RSS (MiB)</source>
          <target state="translated">cargas()aumento de RSS (MiB)</target>
        </trans-unit>
        <trans-unit id="a65e1d3845cf3b10a01939410842cdd6a3d0a6de" translate="yes" xml:space="preserve">
          <source>numpy</source>
          <target state="translated">numpy</target>
        </trans-unit>
        <trans-unit id="14eb14ece52df99c284b819d9f8092e50aa1613e" translate="yes" xml:space="preserve">
          <source>option</source>
          <target state="translated">opción</target>
        </trans-unit>
        <trans-unit id="650d8505030ec551a353918cc0c60940f8ea153f" translate="yes" xml:space="preserve">
          <source>orjson</source>
          <target state="translated">orjson</target>
        </trans-unit>
        <trans-unit id="3a2111b28096add007fc08456c141d7b3b6da57e" translate="yes" xml:space="preserve">
          <source>orjson and rapidjson are the only compared JSON libraries to consistently
error on bad input.</source>
          <target state="translated">orjson y rapidjson son las únicas bibliotecas JSON comparadas con errores consistentes de entrada errónea.</target>
        </trans-unit>
        <trans-unit id="48a2c8ad43c095a4bd951936e5a26bc9bd7518c3" translate="yes" xml:space="preserve">
          <source>orjson does not have an installation or compilation dependency on numpy. The
implementation is independent, reading &lt;code&gt;numpy.ndarray&lt;/code&gt; using
&lt;code&gt;PyArrayInterface&lt;/code&gt;.</source>
          <target state="translated">orjson does not have an installation or compilation dependency on numpy. The implementation is independent, reading &lt;code&gt;numpy.ndarray&lt;/code&gt; using &lt;code&gt;PyArrayInterface&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9dadfb8ded2964df329f7cfde0a8bcbd757433c3" translate="yes" xml:space="preserve">
          <source>orjson is a fast, correct JSON library for Python. It
&lt;a href=&quot;https://github.com/ijl/orjson#performance&quot;&gt;benchmarks&lt;/a&gt; as the fastest Python
library for JSON and is more correct than the standard json library or other
third-party libraries. It serializes
&lt;a href=&quot;https://github.com/ijl/orjson#dataclass&quot;&gt;dataclass&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ijl/orjson#datetime&quot;&gt;datetime&lt;/a&gt;,
&lt;a href=&quot;https://github.com/ijl/orjson#numpy&quot;&gt;numpy&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ijl/orjson#uuid&quot;&gt;UUID&lt;/a&gt; instances natively.</source>
          <target state="translated">orjson es una biblioteca JSON r&amp;aacute;pida y correcta para Python. Se &lt;a href=&quot;https://github.com/ijl/orjson#performance&quot;&gt;compara&lt;/a&gt; como la biblioteca Python m&amp;aacute;s r&amp;aacute;pida para JSON y es m&amp;aacute;s correcta que la biblioteca json est&amp;aacute;ndar u otras bibliotecas de terceros. Serializa las &lt;a href=&quot;https://github.com/ijl/orjson#dataclass&quot;&gt;instancias de clase de datos&lt;/a&gt; , &lt;a href=&quot;https://github.com/ijl/orjson#datetime&quot;&gt;fecha&lt;/a&gt; y hora , &lt;a href=&quot;https://github.com/ijl/orjson#numpy&quot;&gt;numpy&lt;/a&gt; y &lt;a href=&quot;https://github.com/ijl/orjson#uuid&quot;&gt;UUID de&lt;/a&gt; forma nativa.</target>
        </trans-unit>
        <trans-unit id="774fa89fe61eca2d5882996b40178960892909d7" translate="yes" xml:space="preserve">
          <source>orjson is licensed under both the Apache 2.0 and MIT licenses. The
repository and issue tracker is
&lt;a href=&quot;https://github.com/ijl/orjson&quot;&gt;github.com/ijl/orjson&lt;/a&gt;, and patches may be
submitted there. There is a
&lt;a href=&quot;https://github.com/ijl/orjson/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;
available in the repository.</source>
          <target state="translated">orjson tiene licencia tanto de Apache 2.0 como de MIT. El repositorio y el rastreador de problemas es &lt;a href=&quot;https://github.com/ijl/orjson&quot;&gt;github.com/ijl/orjson&lt;/a&gt; , y los parches se pueden enviar all&amp;iacute;. Hay un &lt;a href=&quot;https://github.com/ijl/orjson/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; disponible en el repositorio.</target>
        </trans-unit>
        <trans-unit id="60c1af16f57661e15594223a424178c6d657ac3a" translate="yes" xml:space="preserve">
          <source>orjson is strict about UTF-8 conformance. This is stricter than the standard
library's json module, which will serialize and deserialize UTF-16 surrogates,
e.g., &quot;\ud800&quot;, that are invalid UTF-8.</source>
          <target state="translated">Orson es estricto en cuanto a la conformidad con el UTF-8.Es más estricta que el módulo json de la biblioteca estándar,que serializará y deserializará los sustitutos de UTF-16,por ejemplo,&quot;\ud800&quot;,que son UTF-8 inválidos.</target>
        </trans-unit>
        <trans-unit id="8f6681ca66ec467e3928bc4702fc5604c68a35a3" translate="yes" xml:space="preserve">
          <source>orjson is tested for amd64 and aarch64 on Linux, macOS, and Windows. It
may not work on 32-bit targets. It should be compiled with
&lt;code&gt;-C target-feature=+sse2&lt;/code&gt; on amd64 and &lt;code&gt;-C target-feature=+neon&lt;/code&gt; on arm7. musl
libc is not supported, but building with &lt;code&gt;-C target-feature=-crt-static&lt;/code&gt;
will probably work. The recommended flags are specified in &lt;code&gt;.cargo/config&lt;/code&gt;
and will apply unless &lt;code&gt;RUSTFLAGS&lt;/code&gt; is set.</source>
          <target state="translated">orjson is tested for amd64 and aarch64 on Linux, macOS, and Windows. It may not work on 32-bit targets. It should be compiled with &lt;code&gt;-C target-feature=+sse2&lt;/code&gt; on amd64 and &lt;code&gt;-C target-feature=+neon&lt;/code&gt; on arm7. musl libc is not supported, but building with &lt;code&gt;-C target-feature=-crt-static&lt;/code&gt; will probably work. The recommended flags are specified in &lt;code&gt;.cargo/config&lt;/code&gt; and will apply unless &lt;code&gt;RUSTFLAGS&lt;/code&gt; is set.</target>
        </trans-unit>
        <trans-unit id="706fa51714c639562127cf471952f66c40094d66" translate="yes" xml:space="preserve">
          <source>orjson is the most correct of the compared libraries. This graph shows how each
library fares handles a combined 342 JSON fixtures from the
&lt;a href=&quot;https://github.com/nst/JSONTestSuite&quot;&gt;JSONTestSuite&lt;/a&gt; and
&lt;a href=&quot;https://github.com/miloyip/nativejson-benchmark&quot;&gt;nativejson-benchmark&lt;/a&gt; tests:</source>
          <target state="translated">orjson is the most correct of the compared libraries. This graph shows how each library fares handles a combined 342 JSON fixtures from the &lt;a href=&quot;https://github.com/nst/JSONTestSuite&quot;&gt;JSONTestSuite&lt;/a&gt; and &lt;a href=&quot;https://github.com/miloyip/nativejson-benchmark&quot;&gt;nativejson-benchmark&lt;/a&gt; tests:</target>
        </trans-unit>
        <trans-unit id="34a7d33150d4a0a14800d3cc129145c46c117592" translate="yes" xml:space="preserve">
          <source>orjson maintains a cache of map keys for the duration of the process. This
causes a net reduction in memory usage by avoiding duplicate strings. The
keys must be at most 64 chars to be cached and 512 entries are stored.</source>
          <target state="translated">orjson mantiene un caché de claves de mapas durante todo el proceso.Esto causa una reducción neta en el uso de la memoria al evitar la duplicación de cadenas.Las claves deben tener como máximo 64 caracteres para ser almacenadas en la caché y se almacenan 512 entradas.</target>
        </trans-unit>
        <trans-unit id="6abca31eb876b15d7504997fee715a0c733d342a" translate="yes" xml:space="preserve">
          <source>orjson natively serializes &lt;code&gt;numpy.ndarray&lt;/code&gt; and individual &lt;code&gt;numpy.float64&lt;/code&gt;,
&lt;code&gt;numpy.float32&lt;/code&gt;, &lt;code&gt;numpy.int64&lt;/code&gt;, &lt;code&gt;numpy.int32&lt;/code&gt;, &lt;code&gt;numpy.uint64&lt;/code&gt;, and
&lt;code&gt;numpy.uint32&lt;/code&gt; instances. Arrays may have a
&lt;code&gt;dtype&lt;/code&gt; of &lt;code&gt;numpy.bool&lt;/code&gt;, &lt;code&gt;numpy.float32&lt;/code&gt;, &lt;code&gt;numpy.float64&lt;/code&gt;, &lt;code&gt;numpy.int32&lt;/code&gt;,
&lt;code&gt;numpy.int64&lt;/code&gt;, &lt;code&gt;numpy.uint32&lt;/code&gt;, &lt;code&gt;numpy.uint64&lt;/code&gt;, &lt;code&gt;numpy.uintp&lt;/code&gt;, or &lt;code&gt;numpy.intp&lt;/code&gt;.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
&lt;code&gt;option=orjson.OPT_SERIALIZE_NUMPY&lt;/code&gt;.</source>
          <target state="translated">orjson natively serializes &lt;code&gt;numpy.ndarray&lt;/code&gt; and individual &lt;code&gt;numpy.float64&lt;/code&gt; , &lt;code&gt;numpy.float32&lt;/code&gt; , &lt;code&gt;numpy.int64&lt;/code&gt; , &lt;code&gt;numpy.int32&lt;/code&gt; , &lt;code&gt;numpy.uint64&lt;/code&gt; , and &lt;code&gt;numpy.uint32&lt;/code&gt; instances. Arrays may have a &lt;code&gt;dtype&lt;/code&gt; of &lt;code&gt;numpy.bool&lt;/code&gt; , &lt;code&gt;numpy.float32&lt;/code&gt; , &lt;code&gt;numpy.float64&lt;/code&gt; , &lt;code&gt;numpy.int32&lt;/code&gt; , &lt;code&gt;numpy.int64&lt;/code&gt; , &lt;code&gt;numpy.uint32&lt;/code&gt; , &lt;code&gt;numpy.uint64&lt;/code&gt; , &lt;code&gt;numpy.uintp&lt;/code&gt; , or &lt;code&gt;numpy.intp&lt;/code&gt; . orjson is faster than all compared libraries at serializing numpy instances. Serializing numpy data requires specifying &lt;code&gt;option=orjson.OPT_SERIALIZE_NUMPY&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4dd5c2d58f029172e794741b36887286959d2365" translate="yes" xml:space="preserve">
          <source>orjson serializes &lt;code&gt;datetime.datetime&lt;/code&gt; objects to
&lt;a href=&quot;https://tools.ietf.org/html/rfc3339&quot;&gt;RFC 3339&lt;/a&gt; format,
e.g., &quot;1970-01-01T00:00:00+00:00&quot;. This is a subset of ISO 8601 and
compatible with &lt;code&gt;isoformat()&lt;/code&gt; in the standard library.</source>
          <target state="translated">orjson serializes &lt;code&gt;datetime.datetime&lt;/code&gt; objects to &lt;a href=&quot;https://tools.ietf.org/html/rfc3339&quot;&gt;RFC 3339&lt;/a&gt; format, e.g., &quot;1970-01-01T00:00:00+00:00&quot;. This is a subset of ISO 8601 and compatible with &lt;code&gt;isoformat()&lt;/code&gt; in the standard library.</target>
        </trans-unit>
        <trans-unit id="67c757dd40cd94d43cdbccea9d1e64c044eec7a3" translate="yes" xml:space="preserve">
          <source>orjson serializes &lt;code&gt;uuid.UUID&lt;/code&gt; instances to
&lt;a href=&quot;https://tools.ietf.org/html/rfc4122&quot;&gt;RFC 4122&lt;/a&gt; format, e.g.,
&quot;f81d4fae-7dec-11d0-a765-00a0c91e6bf6&quot;.</source>
          <target state="translated">orjson serializes &lt;code&gt;uuid.UUID&lt;/code&gt; instances to &lt;a href=&quot;https://tools.ietf.org/html/rfc4122&quot;&gt;RFC 4122&lt;/a&gt; format, e.g., &quot;f81d4fae-7dec-11d0-a765-00a0c91e6bf6&quot;.</target>
        </trans-unit>
        <trans-unit id="ebb01819ec997f7d40ef4ca52d93fe0200ad0891" translate="yes" xml:space="preserve">
          <source>orjson serializes and deserializes double precision floats with no loss of
precision and consistent rounding. The same behavior is observed in rapidjson,
simplejson, and json. ujson 1.35 was inaccurate in both serialization and
deserialization, i.e., it modifies the data, and the recent 2.0 release is
accurate.</source>
          <target state="translated">orjson serializa y deserializa flotadores de doble precisión sin pérdida de precisión y redondeo consistente.El mismo comportamiento se observa en rapidjson,simplejson y json.ujson 1.35 fue inexacto tanto en la serialización como en la deserialización,es decir,modifica los datos,y la reciente versión 2.0 es exacta.</target>
        </trans-unit>
        <trans-unit id="96aab9023cbab1bdeefae3c1b7e79d8060a34e21" translate="yes" xml:space="preserve">
          <source>orjson serializes enums natively. Options apply to their values.</source>
          <target state="translated">Orson serializa los enums de forma nativa.Las opciones se aplican a sus valores.</target>
        </trans-unit>
        <trans-unit id="764b8453a189d7519924ac812315c985a63d95fd" translate="yes" xml:space="preserve">
          <source>orjson serializes instances of &lt;code&gt;dataclasses.dataclass&lt;/code&gt; natively. It serializes
instances 40-50x as fast as other libraries and avoids a severe slowdown seen
in other libraries compared to serializing &lt;code&gt;dict&lt;/code&gt;.</source>
          <target state="translated">orjson serializes instances of &lt;code&gt;dataclasses.dataclass&lt;/code&gt; natively. It serializes instances 40-50x as fast as other libraries and avoids a severe slowdown seen in other libraries compared to serializing &lt;code&gt;dict&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8eee7a0daca5f3e9114e4676e1f5364122088bd" translate="yes" xml:space="preserve">
          <source>orjson supports CPython 3.6, 3.7, 3.8, and 3.9. It distributes x86_64/amd64
and aarch64/armv8 wheels for Linux. It distributes x86_64/amd64 wheels for
macOS and Windows. orjson does not support PyPy. Releases follow semantic
versioning and serializing a new object type without an opt-in flag is
considered a breaking change.</source>
          <target state="translated">Orson apoya a CPython 3.6,3.7,3.8 y 3.9.Distribuye ruedas x86_64/amd64 y aarch64/armv8 para Linux.Distribuye las ruedas x86_64/amd64 para MacOS y Windows.orjson no soporta PyPy.Los lanzamientos siguen el versionado semántico y la serialización de un nuevo tipo de objeto sin un indicador de opción se considera un cambio radical.</target>
        </trans-unit>
        <trans-unit id="7e43402c82096d0a57cc160f86196afe5ee4b2ce" translate="yes" xml:space="preserve">
          <source>orjson version 3 serializes more types than version 2. Subclasses of &lt;code&gt;str&lt;/code&gt;,
&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, and &lt;code&gt;list&lt;/code&gt; are now serialized. This is faster and more similar
to the standard library. It can be disabled with
&lt;code&gt;orjson.OPT_PASSTHROUGH_SUBCLASS&lt;/code&gt;.&lt;code&gt;dataclasses.dataclass&lt;/code&gt; instances
are now serialized by default and cannot be customized in a
&lt;code&gt;default&lt;/code&gt; function unless &lt;code&gt;option=orjson.OPT_PASSTHROUGH_DATACLASS&lt;/code&gt; is
specified. &lt;code&gt;uuid.UUID&lt;/code&gt; instances are serialized by default.
For any type that is now serialized,
implementations in a &lt;code&gt;default&lt;/code&gt; function and options enabling them can be
removed but do not need to be. There was no change in deserialization.</source>
          <target state="translated">La versi&amp;oacute;n 3 de orjson serializa m&amp;aacute;s tipos que la versi&amp;oacute;n 2. Las subclases de &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;dict&lt;/code&gt; y &lt;code&gt;list&lt;/code&gt; ahora est&amp;aacute;n serializadas. Esto es m&amp;aacute;s r&amp;aacute;pido y m&amp;aacute;s similar a la biblioteca est&amp;aacute;ndar. Se puede desactivar con &lt;code&gt;orjson.OPT_PASSTHROUGH_SUBCLASS&lt;/code&gt; . &lt;code&gt;dataclasses.dataclass&lt;/code&gt; instancias de dataclasses.dataclass ahora se serializan de forma predeterminada y no se pueden personalizar en una funci&amp;oacute;n &lt;code&gt;default&lt;/code&gt; menos que se especifique la &lt;code&gt;option=orjson.OPT_PASSTHROUGH_DATACLASS&lt;/code&gt; . &lt;code&gt;uuid.UUID&lt;/code&gt; instancias uuid.UUID se serializan de forma predeterminada. Para cualquier tipo que ahora est&amp;eacute; serializado, las implementaciones de forma &lt;code&gt;default&lt;/code&gt; La funci&amp;oacute;n y las opciones que las habilitan se pueden eliminar, pero no es necesario. No hubo cambios en la deserializaci&amp;oacute;n.</target>
        </trans-unit>
        <trans-unit id="e69a861180a93f440a0c1795a8aa4cdb8f517448" translate="yes" xml:space="preserve">
          <source>orjson was written by ijl &amp;lt;&lt;a href=&quot;mailto:ijl@mailbox.org&quot;&gt;ijl@mailbox.org&lt;/a&gt;&amp;gt;, copyright 2018 - 2020, licensed
under either the Apache 2 or MIT licenses.</source>
          <target state="translated">orjson was written by ijl &amp;lt;&lt;a href=&quot;mailto:ijl@mailbox.org&quot;&gt;ijl@mailbox.org&lt;/a&gt;&amp;gt;, copyright 2018 - 2020, licensed under either the Apache 2 or MIT licenses.</target>
        </trans-unit>
        <trans-unit id="92ff84274ffb676153118133dda907516bf9da86" translate="yes" xml:space="preserve">
          <source>orjson's memory usage when deserializing is similar to or lower than
the standard library and other third-party libraries.</source>
          <target state="translated">El uso de la memoria de Orson cuando se deserializa es similar o inferior a la biblioteca estándar y a otras bibliotecas de terceros.</target>
        </trans-unit>
        <trans-unit id="b7a01e6f07804fa18bda9872cf1be63863437eae" translate="yes" xml:space="preserve">
          <source>orjson's tests are included in the source distribution on PyPI. It is
necessarily to install dependencies from PyPI specified in
&lt;code&gt;test/requirements.txt&lt;/code&gt;. These require a C compiler. The tests do not
make network requests.</source>
          <target state="translated">orjson's tests are included in the source distribution on PyPI. It is necessarily to install dependencies from PyPI specified in &lt;code&gt;test/requirements.txt&lt;/code&gt; . These require a C compiler. The tests do not make network requests.</target>
        </trans-unit>
        <trans-unit id="c5e43b4149ba57586fc93b84493826b3857e9395" translate="yes" xml:space="preserve">
          <source>pretty (ms)</source>
          <target state="translated">bonito (ms)</target>
        </trans-unit>
        <trans-unit id="1fb76bf494223c4ad846e8ab8926aab93d8e4894" translate="yes" xml:space="preserve">
          <source>pretty prints 10x to 20x as fast as the standard library</source>
          <target state="translated">impresiones bonitas 10x a 20x tan rápido como la biblioteca estándar</target>
        </trans-unit>
        <trans-unit id="6b4d25024d3b76631d0762ff50e9f34a8620d1b8" translate="yes" xml:space="preserve">
          <source>rapidjson</source>
          <target state="translated">rapidjson</target>
        </trans-unit>
        <trans-unit id="832e63ff6f72da29ebc87c69a1c65cba2dc488d8" translate="yes" xml:space="preserve">
          <source>rapidjson is blank because it does not support pretty printing. This can be
reproduced using the &lt;code&gt;pyindent&lt;/code&gt; script.</source>
          <target state="translated">rapidjson est&amp;aacute; en blanco porque no admite impresiones bonitas. Esto se puede reproducir usando el script &lt;code&gt;pyindent&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42bdc9d35e8c77f27008b4667b2b9c8c61b1928f" translate="yes" xml:space="preserve">
          <source>serializes &lt;code&gt;dataclass&lt;/code&gt; instances 40-50x as fast as other libraries</source>
          <target state="translated">serializa instancias de clases de &lt;code&gt;dataclass&lt;/code&gt; 40-50 veces m&amp;aacute;s r&amp;aacute;pido que otras bibliotecas</target>
        </trans-unit>
        <trans-unit id="1dbc01eb923bbeb4eeb50241bb60a3c2873bcb47" translate="yes" xml:space="preserve">
          <source>serializes &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt; instances to RFC 3339 format,
e.g., &quot;1970-01-01T00:00:00+00:00&quot;</source>
          <target state="translated">serializa instancias de &lt;code&gt;date&lt;/code&gt; y &lt;code&gt;datetime&lt;/code&gt; , fecha y &lt;code&gt;time&lt;/code&gt; en formato RFC 3339, por ejemplo, &quot;1970-01-01T00: 00: 00 + 00: 00&quot;</target>
        </trans-unit>
        <trans-unit id="f9d1d352653a12a9ce3d03b70bff1b6d5f660525" translate="yes" xml:space="preserve">
          <source>serializes &lt;code&gt;float&lt;/code&gt; 10x as fast and deserializes twice as fast as other
libraries</source>
          <target state="translated">serializa &lt;code&gt;float&lt;/code&gt; 10 veces m&amp;aacute;s r&amp;aacute;pido y deserializa dos veces m&amp;aacute;s r&amp;aacute;pido que otras bibliotecas</target>
        </trans-unit>
        <trans-unit id="e536b9c9058cf74eb42df0316b91db552ce071f5" translate="yes" xml:space="preserve">
          <source>serializes &lt;code&gt;numpy.ndarray&lt;/code&gt; instances 4-12x as fast with 0.3x the memory
usage of other libraries</source>
          <target state="translated">serializa instancias de numpy.ndarray &lt;code&gt;numpy.ndarray&lt;/code&gt; veces m&amp;aacute;s r&amp;aacute;pido con 0.3 veces el uso de memoria de otras bibliotecas</target>
        </trans-unit>
        <trans-unit id="7ad2a40c470118dc3fe81f73596f016f7ae76f5d" translate="yes" xml:space="preserve">
          <source>serializes &lt;code&gt;str&lt;/code&gt; without escaping unicode to ASCII, e.g., &quot;好&quot; rather than
&quot;\\u597d&quot;</source>
          <target state="translated">serializa &lt;code&gt;str&lt;/code&gt; sin escapar de Unicode a ASCII, por ejemplo, &quot;好&quot; en lugar de &quot;\\ u597d&quot;</target>
        </trans-unit>
        <trans-unit id="1f7301fb1832bd1f34a956c97e0399b637fd8c6c" translate="yes" xml:space="preserve">
          <source>serializes arbitrary types using a &lt;code&gt;default&lt;/code&gt; hook</source>
          <target state="translated">serializa tipos arbitrarios usando un gancho &lt;code&gt;default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6bd6a27da1cf6e54f00515aa5d7c8a49c015b209" translate="yes" xml:space="preserve">
          <source>serializes subclasses of &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;dict&lt;/code&gt; natively,
requiring &lt;code&gt;default&lt;/code&gt; to specify how to serialize others</source>
          <target state="translated">serializa subclases de &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;list&lt;/code&gt; y &lt;code&gt;dict&lt;/code&gt; de forma nativa, lo que requiere que el &lt;code&gt;default&lt;/code&gt; especifique c&amp;oacute;mo serializar otros</target>
        </trans-unit>
        <trans-unit id="ea7cbfe71f627be03826f0bbeddc3ee3ae947230" translate="yes" xml:space="preserve">
          <source>serializes to &lt;code&gt;bytes&lt;/code&gt; rather than &lt;code&gt;str&lt;/code&gt;, i.e., is not a drop-in replacement</source>
          <target state="translated">se serializa en &lt;code&gt;bytes&lt;/code&gt; en lugar de &lt;code&gt;str&lt;/code&gt; , es decir, no es un reemplazo directo</target>
        </trans-unit>
        <trans-unit id="2669e77e9a2b103b12e3e208e47e7c4fd7ee9fa5" translate="yes" xml:space="preserve">
          <source>simplejson</source>
          <target state="translated">simplejson</target>
        </trans-unit>
        <trans-unit id="6b6a51f83424402ce1b39250bd79872c21f4174d" translate="yes" xml:space="preserve">
          <source>sorted (ms)</source>
          <target state="translated">ordenados (ms)</target>
        </trans-unit>
        <trans-unit id="3442496b96dd01591a8cd44b1eec1368ab728aba" translate="yes" xml:space="preserve">
          <source>str</source>
          <target state="translated">str</target>
        </trans-unit>
        <trans-unit id="9d9790db751e895e7d505fe6753f5d501a317f8f" translate="yes" xml:space="preserve">
          <source>str keys (ms)</source>
          <target state="translated">teclas str (ms)</target>
        </trans-unit>
        <trans-unit id="12301661d5fc5ebe2f3e2211bede15e259995f95" translate="yes" xml:space="preserve">
          <source>twitter.json</source>
          <target state="translated">twitter.json</target>
        </trans-unit>
        <trans-unit id="3ba426287ea40f442e34d501dcb94921faa7caba" translate="yes" xml:space="preserve">
          <source>twitter.json deserialization</source>
          <target state="translated">twitter.json deserialización</target>
        </trans-unit>
        <trans-unit id="aadafe1fb409b1cbe0130602f5c3e8a13f548272" translate="yes" xml:space="preserve">
          <source>twitter.json serialization</source>
          <target state="translated">twitter.json serialización</target>
        </trans-unit>
        <trans-unit id="8ec3bd011850ee64c882f719932bbd88fe3b5bfd" translate="yes" xml:space="preserve">
          <source>twitter.json, 631.5KiB, results of a search on Twitter for &quot;一&quot;, containing
CJK strings, dictionaries of strings and arrays of dictionaries, indented.</source>
          <target state="translated">twitter.json,631.5KiB,resultados de una búsqueda en Twitter de &quot;一&quot;,que contiene cuerdas CJK,diccionarios de cuerdas y matrices de diccionarios,sangrados.</target>
        </trans-unit>
        <trans-unit id="781aa2f64eded8e8d63c3e5888212dedc4da3607" translate="yes" xml:space="preserve">
          <source>ujson</source>
          <target state="translated">ujson</target>
        </trans-unit>
        <trans-unit id="3e9b7bef7c1b5f56e09790bd4a0dcf961941fc85" translate="yes" xml:space="preserve">
          <source>ujson is blank for sorting because it segfaults. json is blank because it
raises &lt;code&gt;TypeError&lt;/code&gt; on attempting to sort before converting all keys to &lt;code&gt;str&lt;/code&gt;.
rapidjson is blank because it does not support non-&lt;code&gt;str&lt;/code&gt; keys. This can
be reproduced using the &lt;code&gt;pynonstr&lt;/code&gt; script.</source>
          <target state="translated">ujson est&amp;aacute; en blanco para la clasificaci&amp;oacute;n porque segfaults. json est&amp;aacute; en blanco porque genera &lt;code&gt;TypeError&lt;/code&gt; al intentar ordenar antes de convertir todas las claves a &lt;code&gt;str&lt;/code&gt; . rapidjson est&amp;aacute; en blanco porque no admite claves que no sean &lt;code&gt;str&lt;/code&gt; . Esto se puede reproducir usando el script &lt;code&gt;pynonstr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="474fc3fab5c35a1f838407477475b3303eceff6c" translate="yes" xml:space="preserve">
          <source>unsorted (ms)</source>
          <target state="translated">sin clasificar (ms)</target>
        </trans-unit>
        <trans-unit id="48e3462cbeedd9b70ced95702e2e262ceba217da" translate="yes" xml:space="preserve">
          <source>uuid</source>
          <target state="translated">uuid</target>
        </trans-unit>
        <trans-unit id="98e91efdaaa702ae3064cfa396442bcfbb212dfa" translate="yes" xml:space="preserve">
          <source>vs. orjson</source>
          <target state="translated">contra Orson</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
