<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/pgsanity/">
    <body>
      <group id="pgsanity">
        <trans-unit id="cb4d70f76164fcf7862a8039bc3850e48f2c46ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PgSanity checks the syntax of Postgresql SQL files.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;PgSanity checks the syntax of Postgresql SQL files.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6488154c558577169250da36002b9fc03104bad6" translate="yes" xml:space="preserve">
          <source>Check syntax of sql for PostgreSQL</source>
          <target state="translated">Comprobar la sintaxis de sql para PostgreSQL</target>
        </trans-unit>
        <trans-unit id="556a92176fe3f80dafe0893590b476763245d908" translate="yes" xml:space="preserve">
          <source>It does this by leveraging the ecpg command which is traditionally
used for preparing C files with embedded sql for compilation.
However, as part of that preparation, ecpg checks the embedded SQL
statements for syntax errors using the exact same parser that is
in PostgreSQL.</source>
          <target state="translated">Lo hace aprovechando el comando ecpg que se usa tradicionalmente para preparar archivos C con sql incrustado para la compilación.Sin embargo,como parte de esa preparación,ecpg comprueba las sentencias SQL incrustadas en busca de errores de sintaxis usando exactamente el mismo analizador que está en PostgreSQL.</target>
        </trans-unit>
        <trans-unit id="65109d5f746243b966d392f31dee885625106dfb" translate="yes" xml:space="preserve">
          <source>So the approach that PgSanity takes is to take a file that has a
list of bare SQL in it, make that file look like a C file with
embedded SQL, run it through ecpg and let ecpg report on the syntax
errors of the SQL.</source>
          <target state="translated">Así que el enfoque que toma PgSanity es tomar un archivo que tiene una lista de SQL desnudo en él,hacer que ese archivo parezca un archivo C con SQL incrustado,ejecutarlo a través de ecpg y dejar que ecpg informe sobre los errores de sintaxis del SQL.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
