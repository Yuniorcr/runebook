<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/asynqueue/">
    <body>
      <group id="asynqueue">
        <trans-unit id="66179e04cd581cd55472563ee8587ce658020aeb" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing based on the &lt;em&gt;Twisted&lt;/em&gt; framework, with task
prioritization and a powerful worker interface. Worker implementations
are included for running tasks asynchronously in the main thread, in
separate threads, in separate Python interpreters (multiprocessing),
and even on separate devices using Twisted's Asynchronous Message
Protocol.</source>
          <target state="translated">Cola de tareas asincr&amp;oacute;nica basada en el marco &lt;em&gt;Twisted&lt;/em&gt; , con priorizaci&amp;oacute;n de tareas y una potente interfaz de trabajo. Las implementaciones de los trabajadores se incluyen para ejecutar tareas de forma as&amp;iacute;ncrona en el hilo principal, en hilos separados, en int&amp;eacute;rpretes de Python separados (multiprocesamiento) e incluso en dispositivos separados que utilizan el Protocolo de mensajes asincr&amp;oacute;nicos de Twisted.</target>
        </trans-unit>
        <trans-unit id="6128a235c0fd39685f6b5b99b7fadbfec5342418" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing with Twisted: threaded, multicore, and remote.</source>
          <target state="translated">Cola de tareas asíncrona con Twisted:enhebrada,multinúcleo y remota.</target>
        </trans-unit>
        <trans-unit id="959199c5e1b1d30e53adfe003d916868a2a40023" translate="yes" xml:space="preserve">
          <source>Includes an example package
&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; that generates
Mandelbrot set images, row by row, demonstrating the power of
asynchronous multi-core processing. An instance of
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;
dispatches the computations for each row of pixels to workers running
on separate Python processes. The color-mapped RGB results are
collected as they come back and intelligently buffered for iterating
in a proper sequence to a third-party PNG library that wouldn't
ordinarily play nice with Twisted.</source>
          <target state="translated">Incluye un paquete de ejemplo &lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; que genera im&amp;aacute;genes de conjuntos de Mandelbrot, fila por fila, demostrando el poder del procesamiento asincr&amp;oacute;nico de m&amp;uacute;ltiples n&amp;uacute;cleos. Una instancia de &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt; env&amp;iacute;a los c&amp;aacute;lculos para cada fila de p&amp;iacute;xeles a los trabajadores que se ejecutan en procesos de Python separados. Los resultados RGB con mapas de colores se recopilan a medida que regresan y se almacenan en b&amp;uacute;fer de manera inteligente para iterar en una secuencia adecuada en una biblioteca PNG de terceros que normalmente no funcionar&amp;iacute;a bien con Twisted.</target>
        </trans-unit>
        <trans-unit id="85daa8d0fd14d30741e29b572dbfda1d090a6fc9" translate="yes" xml:space="preserve">
          <source>Includes deferred iteration capability: Calling a task that returns an
iterator can return a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;
instead, which does the iteration in a Twisted-friendly fashion, even
over a network connection. You can also supply an object conforming to
Twisted's &lt;em&gt;IConsumer&lt;/em&gt; interface and iterations will be fed to it as they
become available.</source>
          <target state="translated">Incluye capacidad de iteraci&amp;oacute;n diferida: llamar a una tarea que devuelve un iterador puede devolver un &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt; en su lugar, que realiza la iteraci&amp;oacute;n de una manera compatible con Twisted, incluso a trav&amp;eacute;s de una conexi&amp;oacute;n de red. Tambi&amp;eacute;n puede suministrar un objeto que se ajuste a la interfaz &lt;em&gt;IConsumer&lt;/em&gt; de Twisted y las iteraciones se le enviar&amp;aacute;n a medida que est&amp;eacute;n disponibles.</target>
        </trans-unit>
        <trans-unit id="169b63918b76adefc1f65fe3ec1bfb21b732f5ab" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;util&lt;/em&gt; module contains a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt;
object that makes the import worthwhile all on its own. You can use
its &lt;strong&gt;put&lt;/strong&gt; method to track Twisted &lt;em&gt;Deferred&lt;/em&gt; objects without inserting
anything into their callback chains. Then you can wait in non-blocking
Twisted fashion for all, any, or some of the tracked deferreds to fire
(again, without getting tangled up with any of their callbacks) using
the tracker's &lt;strong&gt;deferToAll&lt;/strong&gt;, &lt;strong&gt;deferToAny&lt;/strong&gt;, and &lt;strong&gt;deferUntilFewer&lt;/strong&gt;
methods.</source>
          <target state="translated">El m&amp;oacute;dulo &lt;em&gt;util&lt;/em&gt; contiene un objeto &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt; que hace que la importaci&amp;oacute;n valga la pena por s&amp;iacute; sola. Puede usar su m&amp;eacute;todo &lt;strong&gt;put&lt;/strong&gt; para rastrear objetos Twisted &lt;em&gt;Deferred&lt;/em&gt; sin insertar nada en sus cadenas de devoluci&amp;oacute;n de llamada. Luego, puede esperar de manera retorcida sin bloqueo a que se activen todos, cualquiera o algunos de los aplazados rastreados (nuevamente, sin enredarse con ninguna de sus devoluciones de llamada) utilizando los &lt;strong&gt;m&amp;eacute;todos deferToAll&lt;/strong&gt; , &lt;strong&gt;deferToAny&lt;/strong&gt; y &lt;strong&gt;deferUntilFewer del rastreador&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="eb7d5439f2d9250bf009f7a2be477526c15559f6" translate="yes" xml:space="preserve">
          <source>There was some effort toward Python 3 compatiblity a while ago, but
it's still not yet supported.</source>
          <target state="translated">Hubo algún esfuerzo hacia la compatibilidad con Python 3 hace un tiempo,pero aún no se ha apoyado.</target>
        </trans-unit>
        <trans-unit id="9f5ed9620d68c79dd8003b36b7a5bc59d3c01f81" translate="yes" xml:space="preserve">
          <source>You can try things out after installation by running &lt;code&gt;mcmandelbrot&lt;/code&gt;
(with a few options and arguments) from the console. The output of the
script is a PNG file, which you can view by piping to the free Feh
image viewer: Just add &lt;code&gt;|feh -&lt;/code&gt; at the end of the command line.</source>
          <target state="translated">Puede probar cosas despu&amp;eacute;s de la instalaci&amp;oacute;n ejecutando &lt;code&gt;mcmandelbrot&lt;/code&gt; (con algunas opciones y argumentos) desde la consola. La salida del script es un archivo PNG, que puede ver conectando al visor de im&amp;aacute;genes gratuito de Feh: Simplemente agregue &lt;code&gt;|feh -&lt;/code&gt; al final de la l&amp;iacute;nea de comando.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
