<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="https://pypi.org/project/mp-auth/">
    <body>
      <group id="mp-auth">
        <trans-unit id="0c77360d80e4bb131a23da58c58c5db89f1b3d32" translate="yes" xml:space="preserve">
          <source>Add Multi-provider auth for various providers</source>
          <target state="translated">Añadir la autorización de varios proveedores para varios proveedores</target>
        </trans-unit>
        <trans-unit id="db3bc6c39fe038a45fb86f895589f506bf0c2499" translate="yes" xml:space="preserve">
          <source>Install the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)</source>
          <target state="translated">Instalar el middleware de autenticación multiproveedor para Django REST Framework (se requiere Python 3)</target>
        </trans-unit>
        <trans-unit id="f365c609b0e3df72d19f5307e8b50df05266a6e7" translate="yes" xml:space="preserve">
          <source>Many authentication middleware packages have been writted for Django REST Framework with
support for OAuth2 opaque or JWT token. Most popular ones are listed with a short description
on &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt;. But all of them that support opaque tokens
require access to the Identity Provider database to verify the access tokens. Or they cannot be
stack up with other authentication classes to authenticate a bearer token against multiple
Identity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all
Identity Providers that issue JWT tokens and &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; that issues opaque access tokens. Support
for other Identity Providers can easily be added by creating a new backend in &lt;code&gt;mp_auth/backends&lt;/code&gt;.
Each backend can be used separately as an Django REST Framework authentication class, or can be a part of
list of authentication class that Django REST Framework will go through to authenticate an HTTP request.
&lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; is a special authentication class that calls all
authentication classes configured in &lt;code&gt;settings.py&lt;/code&gt;.</source>
          <target state="translated">Muchos paquetes de middleware de autenticaci&amp;oacute;n se han escrito para Django REST Framework con soporte para token OAuth2 opaco o JWT. Los m&amp;aacute;s populares se enumeran con una breve descripci&amp;oacute;n en &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt; . Pero todos los que admiten tokens opacos requieren acceso a la base de datos del proveedor de identidad para verificar los tokens de acceso. O no se pueden combinar con otras clases de autenticaci&amp;oacute;n para autenticar un token de portador frente a m&amp;uacute;ltiples proveedores de identidad. El middleware de autenticaci&amp;oacute;n multiproveedor llena el vac&amp;iacute;o. Es compatible con todos los proveedores de identidad que emiten tokens JWT y &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; que emite tokens de acceso opacos. Se puede agregar f&amp;aacute;cilmente soporte para otros proveedores de identidad creando un nuevo backend en &lt;code&gt;mp_auth/backends&lt;/code&gt; . Cada backend se puede usar por separado como una clase de autenticaci&amp;oacute;n de Django REST Framework, o puede ser parte de la lista de clases de autenticaci&amp;oacute;n por las que Django REST Framework pasar&amp;aacute; para autenticar una solicitud HTTP. &lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; es una clase de autenticaci&amp;oacute;n especial que llama a todas las clases de autenticaci&amp;oacute;n configuradas en &lt;code&gt;settings.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab86ee1d35d4278b22e567dc8690b42b93f4cfb5" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication</source>
          <target state="translated">Autenticación de multiproveedores</target>
        </trans-unit>
        <trans-unit id="85545c3c5d03b98f9f0c66cdebd184642f0ee177" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication is an easy to setup authentication middleware with support for
&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; and multiple OAuth2/OIDC Identity Providers that issue opaque
or JWT access tokens, e.g. &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;, &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;, etc.</source>
          <target state="translated">La autenticaci&amp;oacute;n multiproveedor es un middleware de autenticaci&amp;oacute;n f&amp;aacute;cil de configurar con soporte para &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; y m&amp;uacute;ltiples proveedores de identidad OAuth2 / OIDC que emiten tokens de acceso opacos o JWT, por ejemplo , &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt; , &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; , etc.</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">Razón de ser</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Configuración</target>
        </trans-unit>
        <trans-unit id="f7347011dad922ecb28d1f9f97cae602c60f8dc5" translate="yes" xml:space="preserve">
          <source>Then any view can be protected by &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, or, if you want to
authenticate an HTTP request against both &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, by
&lt;code&gt;MultiproviderAuthentication&lt;/code&gt; class.</source>
          <target state="translated">Entonces, cualquier vista puede ser protegida por &lt;code&gt;JWTAuthentication&lt;/code&gt; o &lt;code&gt;GlobusAuthentication&lt;/code&gt; , o, si desea autenticar una solicitud HTTP contra &lt;code&gt;JWTAuthentication&lt;/code&gt; o &lt;code&gt;GlobusAuthentication&lt;/code&gt; , por la clase &lt;code&gt;MultiproviderAuthentication&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1220b82c1195db067a1119e19e5d9fe237de6f8" translate="yes" xml:space="preserve">
          <source>and in &lt;code&gt;settings.py&lt;/code&gt; set the following:</source>
          <target state="translated">y en &lt;code&gt;settings.py&lt;/code&gt; establece lo siguiente:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
