<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/klang/">
    <body>
      <group id="klang">
        <trans-unit id="816806c208b593a0d734ecaeccac60407494d013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arpeggiator_demo.py&lt;/code&gt;: Two synthesizer patch with an arpeggiator and some sound effects</source>
          <target state="translated">&lt;code&gt;arpeggiator_demo.py&lt;/code&gt; ：アルペジエーターといくつかの効果音を備えた2つのシンセサイザーパッチ</target>
        </trans-unit>
        <trans-unit id="3701138196ccc780a6be54908ac9897313498358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;audio_file_demo.py&lt;/code&gt;: Looped audio file playback (&lt;code&gt;gong.wav&lt;/code&gt; sample) with audio effects</source>
          <target state="translated">&lt;code&gt;audio_file_demo.py&lt;/code&gt; ：オーディオエフェクトを使用したループオーディオファイル再生（ &lt;code&gt;gong.wav&lt;/code&gt; サンプル）</target>
        </trans-unit>
        <trans-unit id="e90384b946042ef6c00878b81f9f27ac421f731b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hello_world.py&lt;/code&gt;: 440 Hz sine wave generator</source>
          <target state="translated">&lt;code&gt;hello_world.py&lt;/code&gt; :440Hz正弦波ジェネレーター</target>
        </trans-unit>
        <trans-unit id="0283dfe30f97ecac46429bccb5fdc5882a4c5dd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;micro_rhythm_demo.py&lt;/code&gt;: Kick and Hi-Hat pattern where the latter is phrased with a micro rhythm</source>
          <target state="translated">&lt;code&gt;micro_rhythm_demo.py&lt;/code&gt; ：キックとハイハットのパターン。後者はマイクロリズムで表現されています。</target>
        </trans-unit>
        <trans-unit id="c7931d00d9e91fa30842fe330e67666fe9555334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sequencer_demo.py&lt;/code&gt;: Techno patch with sequencer</source>
          <target state="translated">&lt;code&gt;sequencer_demo.py&lt;/code&gt; ：シーケンサー付きのテクノパッチ</target>
        </trans-unit>
        <trans-unit id="6edfecd7cdb7325911fb76dbe60311c57a5655c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synthesizer_demo.py&lt;/code&gt;: This has to be started as root. Computer keyboard playable monophonic synthesizer</source>
          <target state="translated">&lt;code&gt;synthesizer_demo.py&lt;/code&gt; ：これはrootとして開始する必要があります。コンピューターのキーボードで再生可能なモノフォニックシンセサイザー</target>
        </trans-unit>
        <trans-unit id="5a7ae80fd2b3e033d84af64e9e56e08a32819160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tempo_aware_effects.py&lt;/code&gt;: Modulated noise with time synced effects</source>
          <target state="translated">&lt;code&gt;tempo_aware_effects.py&lt;/code&gt; ：時間同期効果のある変調ノイズ</target>
        </trans-unit>
        <trans-unit id="6a9bc4c6882b5e849fa83144c9f59e6e47d1b566" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Message&lt;/em&gt; (&lt;code&gt;MessageInput&lt;/code&gt; and &lt;code&gt;MessageOutput&lt;/code&gt; classes)</source>
          <target state="translated">&lt;em&gt;メッセージ&lt;/em&gt;（ &lt;code&gt;MessageInput&lt;/code&gt; クラスと &lt;code&gt;MessageOutput&lt;/code&gt; クラス）</target>
        </trans-unit>
        <trans-unit id="3a7f1be1a8849b278219604a04d39cb7ce75691c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Value&lt;/em&gt; (&lt;code&gt;Input&lt;/code&gt; and &lt;code&gt;Output&lt;/code&gt; classes)</source>
          <target state="translated">&lt;em&gt;値&lt;/em&gt;（ &lt;code&gt;Input&lt;/code&gt; クラスと &lt;code&gt;Output&lt;/code&gt; クラス）</target>
        </trans-unit>
        <trans-unit id="2f69170b107beda81e7db13c762077152dded274" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alexander Theler&lt;/strong&gt; - &lt;a href=&quot;https://github.com/atheler&quot;&gt;GitHub&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;アレクサンダーTheler&lt;/strong&gt; - &lt;a href=&quot;https://github.com/atheler&quot;&gt;GitHubの&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d9540ff93a75d47409d6a0aa37491da117ecdf8" translate="yes" xml:space="preserve">
          <source>Acknowledgments</source>
          <target state="translated">謝辞</target>
        </trans-unit>
        <trans-unit id="17ebfd61dbc846af4e8ab83c293ea391ffcbe866" translate="yes" xml:space="preserve">
          <source>Andreas Steiner &lt;a href=&quot;http://smokeandmirrors.ch&quot;&gt;Smoke And Mirrors&lt;/a&gt;</source>
          <target state="translated">アンドレアスシュタイナー&lt;a href=&quot;http://smokeandmirrors.ch&quot;&gt;スモークアンドミラーズ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2430c899faf14e96459e3b7eeb50032f26f81f74" translate="yes" xml:space="preserve">
          <source>As always when programming with sound: Unplug your headphones or be very sure of what you are doing! Also with low headphone volume bugs in the code can result in very unpleasant loud noises which could probably impair your hearing. Be careful!</source>
          <target state="translated">サウンドを使ってプログラミングをするときはいつものように ヘッドフォンのプラグを抜くか、何をしているのかをしっかりと確認してください。また、ヘッドフォンの音量が小さい場合、コードにバグがあると非常に不愉快な大きなノイズが発生し、聴力を損なう可能性があります。注意してください。</target>
        </trans-unit>
        <trans-unit id="74b459ca20995f1d4b9e9c9bef74f853f91fc71a" translate="yes" xml:space="preserve">
          <source>Audio can be written to disk as a WAV file with the &lt;code&gt;filepath&lt;/code&gt; argument.</source>
          <target state="translated">オーディオは、 &lt;code&gt;filepath&lt;/code&gt; 引数を使用してWAVファイルとしてディスクに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="5fda23d62015b99fb2a9f86b38bcdf2bdf7609c8" translate="yes" xml:space="preserve">
          <source>Author</source>
          <target state="translated">著者</target>
        </trans-unit>
        <trans-unit id="54f4d37df10cb844507ee3226891ad42c5fcf2ea" translate="yes" xml:space="preserve">
          <source>Block based synthesis and music library</source>
          <target state="translated">ブロックベースの合成と音楽ライブラリ</target>
        </trans-unit>
        <trans-unit id="c1390b1492af1787012815a0da16bd2f045db787" translate="yes" xml:space="preserve">
          <source>Block based synthesis and music library for Python. &lt;em&gt;Klang&lt;/em&gt; is German for sound.</source>
          <target state="translated">Python用のブロックベースの合成および音楽ライブラリ。&lt;em&gt;クラン&lt;/em&gt;はドイツ語で音を出します。</target>
        </trans-unit>
        <trans-unit id="d47cf0f37c9b3b717ad801771de4c81a8f106260" translate="yes" xml:space="preserve">
          <source>Coding Style</source>
          <target state="translated">コーディングスタイル</target>
        </trans-unit>
        <trans-unit id="8f3509b64e0ea82c53329cb49a7756bd1ced3566" translate="yes" xml:space="preserve">
          <source>Connections</source>
          <target state="translated">接続</target>
        </trans-unit>
        <trans-unit id="b59f395125d5c98d1c8ec9dd2acb1b95bb38c7fe" translate="yes" xml:space="preserve">
          <source>Defining The Network</source>
          <target state="translated">ネットワークの定義</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="53da8f452091b7957a85d7c9e3f95c5fbd375889" translate="yes" xml:space="preserve">
          <source>For developing you can link your working copy with</source>
          <target state="translated">開発のために、あなたの作業コピーを</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="9d6cd3eb8258869b1e470d6d71d4709f02b7760e" translate="yes" xml:space="preserve">
          <source>In the following script we create a 440 Hz sine oscillator which output gets send to the sound card.</source>
          <target state="translated">次のスクリプトでは、440Hzの正弦波発振器を作成し、その出力をサウンドカードに送信します。</target>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="2c9982247f7b982c8622076d2c62a9502df46d5f" translate="yes" xml:space="preserve">
          <source>Klang</source>
          <target state="translated">クラング</target>
        </trans-unit>
        <trans-unit id="64853241b14df743e0222ef2f4d10f4da30e5c76" translate="yes" xml:space="preserve">
          <source>Klang Primer</source>
          <target state="translated">クラングプライマー</target>
        </trans-unit>
        <trans-unit id="f0b0424ef4a91ee4328d7b71aca91846cca268ac" translate="yes" xml:space="preserve">
          <source>Klang can be installed via PyPi / pip or directly via setup.py. Note that there is a C extension which needs to be compiled (&lt;code&gt;klang/audio/_envelope.c&lt;/code&gt;). C extensions can be compiled in place with:</source>
          <target state="translated">Klangは、PyPi / pipを介して、またはsetup.pyを介して直接インストールできます。コンパイルする必要のあるC拡張機能があることに注意してください（ &lt;code&gt;klang/audio/_envelope.c&lt;/code&gt; ）。C拡張機能は、次の方法でその場でコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="eb5f730495b25f833174ca19e1dafecaae254f52" translate="yes" xml:space="preserve">
          <source>Klang provides various audio related blocks. Every block can have multiple in- and outputs and by connecting them with each other we can define our network. Once we are finished with patching we can run our network with by calling &lt;code&gt;run_klang(*blocks)&lt;/code&gt;. This function only needs some blocks which belong to the network. It will then automatically discovers the other blocks of the network and deduce an appropriate block execution order.</source>
          <target state="translated">Klangは、さまざまなオーディオ関連のブロックを提供します。すべてのブロックは複数の入力と出力を持つことができ、それらを相互に接続することでネットワークを定義できます。パッチ適用が終了したら、 &lt;code&gt;run_klang(*blocks)&lt;/code&gt; を呼び出してネットワークを実行できます。この関数は、ネットワークに属するいくつかのブロックのみを必要とします。次に、ネットワークの他のブロックを自動的に検出し、適切なブロック実行順序を推測します。</target>
        </trans-unit>
        <trans-unit id="255d905a98267124b10c472a46ae093d858374cf" translate="yes" xml:space="preserve">
          <source>Lawrence Markwalder &lt;a href=&quot;https://github.com/lmarkwalder&quot;&gt;GitHub&lt;/a&gt;</source>
          <target state="translated">ローレンスマークヴァルダー&lt;a href=&quot;https://github.com/lmarkwalder&quot;&gt;GitHub&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d8cdc699ea5f458fc90701476c983e18e7647fe" translate="yes" xml:space="preserve">
          <source>Mix operator &lt;code&gt;+&lt;/code&gt;: Mix multiple value outputs together.</source>
          <target state="translated">混合演算子 &lt;code&gt;+&lt;/code&gt; ：複数の値の出力を一緒に混合します。</target>
        </trans-unit>
        <trans-unit id="8ffbc72881c754687b47f1fe2e0742d66d2ebeee" translate="yes" xml:space="preserve">
          <source>Nico Neureiter &lt;a href=&quot;https://github.com/NicoNeureiter&quot;&gt;GitHub&lt;/a&gt;</source>
          <target state="translated">Nico Neureiter &lt;a href=&quot;https://github.com/NicoNeureiter&quot;&gt;GitHub&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="426d89482d8be386273f5602c3f7ac8f8088099f" translate="yes" xml:space="preserve">
          <source>PEP8 / Google flavored. With the one exception for variable and argument names (&lt;code&gt;camelCase&lt;/code&gt;). Function and in methods are &lt;code&gt;snake_case()&lt;/code&gt;.</source>
          <target state="translated">PEP8 / Googleフレーバー。変数名と引数名（ &lt;code&gt;camelCase&lt;/code&gt; ）の1つの例外を除きます。関数とinメソッドは &lt;code&gt;snake_case()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="50a9800ec419565cdbdae700963cde92d76fdd1e" translate="yes" xml:space="preserve">
          <source>Pipe operator &lt;code&gt;|&lt;/code&gt;: Connect multiple blocks in series.</source>
          <target state="translated">パイプオペレーター &lt;code&gt;|&lt;/code&gt; ：複数のブロックを直列に接続します。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">前提条件</target>
        </trans-unit>
        <trans-unit id="1e0883db26345cee9aa196cedada38c2dbef49be" translate="yes" xml:space="preserve">
          <source>Running the tests</source>
          <target state="translated">テストの実行</target>
        </trans-unit>
        <trans-unit id="e69f7c4a1397fa5d70f6b764dd3a77e42f035f19" translate="yes" xml:space="preserve">
          <source>Safety First</source>
          <target state="translated">安全第一</target>
        </trans-unit>
        <trans-unit id="51bf7bee4001cb1b1c4aec55cdb2836604ed74c7" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;examples/&lt;/code&gt; directory with a couple example script which illustrate the core functionality of Klang. Currently there are:</source>
          <target state="translated">Klangのコア機能を説明するいくつかのサンプルスクリプトを含む &lt;code&gt;examples/&lt;/code&gt; ディレクトリを参照してください。現在あります：</target>
        </trans-unit>
        <trans-unit id="d65d5786172f5ed0f4039fc10298275d8ef1e945" translate="yes" xml:space="preserve">
          <source>Tests can be run via with</source>
          <target state="translated">テストは</target>
        </trans-unit>
        <trans-unit id="aae2489ac9bea83bfd4744e4b4f32ca4f4a1c386" translate="yes" xml:space="preserve">
          <source>Thanks for the support and inputs!</source>
          <target state="translated">サポートとインプットに感謝します!</target>
        </trans-unit>
        <trans-unit id="5c88585d7969d9b2603f9c9589d3e134b28aacdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect&lt;/code&gt; method can be used to connect inputs and outputs with each other. Note that it is always possible to connect one output to multiple inputs but not the other way round. As a shorthand there are two overloaded operators:</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 方法は、互いに入力と出力を接続するために使用することができます。1つの出力を複数の入力に接続することは常に可能ですが、その逆はできないことに注意してください。省略形として、2つのオーバーロードされた演算子があります。</target>
        </trans-unit>
        <trans-unit id="2d6fae80cd30f36714aeb0273f4198e8d29e2238" translate="yes" xml:space="preserve">
          <source>There are two different connection types in Klang:</source>
          <target state="translated">クランでは2種類の接続方法があります。</target>
        </trans-unit>
        <trans-unit id="4dbe12c60f29bc9fb71f5a1bd759abdf1e300210" translate="yes" xml:space="preserve">
          <source>Value based connections can hold any kind of Python object as value. Message connections have an internal queue.
The former is mostly used to propagate audio samples and modulation signals through the network (Numpy arrays as values). The latter is used for discrete messages like note messages.
There are also corresponding &lt;em&gt;Relay&lt;/em&gt; connections (&lt;code&gt;Relay&lt;/code&gt; and &lt;code&gt;MessageRelay&lt;/code&gt; classes). These are used to build composite blocks (blocks which contain there own network of child blocks). Relays can be used to interface between the inside and outside of an composite block.</source>
          <target state="translated">値ベースの接続は、あらゆる種類のPythonオブジェクトを値として保持できます。メッセージ接続には内部キューがあります。前者は主に、オーディオサンプルと変調信号をネットワーク経由で伝播するために使用されます（値としてのNumpy配列）。後者は、メモメッセージなどの個別のメッセージに使用されます。対応する&lt;em&gt;リレー&lt;/em&gt;接続（ &lt;code&gt;Relay&lt;/code&gt; および &lt;code&gt;MessageRelay&lt;/code&gt; クラス）もあります。これらは、複合ブロック（子ブロックの独自のネットワークを含むブロック）を構築するために使用されます。リレーは、複合ブロックの内側と外側の間のインターフェースに使用できます。</target>
        </trans-unit>
        <trans-unit id="d6b44e6079b52b65c0ba10d6ea4cb40b4652a5ab" translate="yes" xml:space="preserve">
          <source>We use Python bindings for &lt;a href=&quot;http://www.portaudio.com&quot;&gt;PortAudio&lt;/a&gt; and &lt;a href=&quot;https://www.music.mcgill.ca/%7Egary/rtmidi/&quot;&gt;RtMidi&lt;/a&gt;. On Mac they can be installed via &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.portaudio.com&quot;&gt;PortAudio&lt;/a&gt;と&lt;a href=&quot;https://www.music.mcgill.ca/%7Egary/rtmidi/&quot;&gt;RtMidiに&lt;/a&gt;はPythonバインディングを使用しています。Macでは、&lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;を介してインストールできます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
