<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/kymatio/">
    <body>
      <group id="kymatio">
        <trans-unit id="7fb4391a6444cdfc98721cf84a888e92ce5e7ccf" translate="yes" xml:space="preserve">
          <source>After installing the latest version of PyTorch, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;torch.nn.Module&lt;/code&gt; using:</source>
          <target state="translated">PyTorchの最新バージョンをインストールした後、 &lt;code&gt;torch.nn.Module&lt;/code&gt; を使用して &lt;code&gt;Scattering2D&lt;/code&gt; をtorch.nn.Moduleとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2d53b89f41ba50001f12184fc1f54cef6ed50714" translate="yes" xml:space="preserve">
          <source>After installing the latest version of TensorFlow, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;tf.Module&lt;/code&gt; using:</source>
          <target state="translated">TensorFlowの最新バージョンをインストールした後、 &lt;code&gt;tf.Module&lt;/code&gt; を使用して &lt;code&gt;Scattering2D&lt;/code&gt; をtf.Moduleとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5656ae60d6b13d4ea92fa6c75bf0a61833a82268" translate="yes" xml:space="preserve">
          <source>After installing the latest version of scikit-learn, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;Transformer&lt;/code&gt; using:</source>
          <target state="translated">最新バージョンのscikit-learnをインストールした後、以下を使用して &lt;code&gt;Scattering2D&lt;/code&gt; を &lt;code&gt;Transformer&lt;/code&gt; として呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="15d92fd88eb1e4901f01cd8aa7ef2f2a163abc6b" translate="yes" xml:space="preserve">
          <source>Alternatively, with TensorFlow installed, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a Keras &lt;code&gt;Layer&lt;/code&gt; using:</source>
          <target state="translated">または、TensorFlowがインストールされている場合は、次を使用して &lt;code&gt;Scattering2D&lt;/code&gt; をKeras &lt;code&gt;Layer&lt;/code&gt; として呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ce98733b52e5764a6674e832754e16e00beef0a2" translate="yes" xml:space="preserve">
          <source>Andreux M., Angles T., Exarchakis G., Leonarduzzi R., Rochette G., Thiry L., Zarka J., Mallat S., And&amp;eacute;n J., Belilovsky E., Bruna J., Lostanlen V., Hirn M. J., Oyallon E., Zhang S., Cella C., Eickenberg M. (2019). Kymatio: Scattering Transforms in Python. arXiv preprint arXiv:1812.11214. &lt;a href=&quot;https://arxiv.org/abs/1812.11214&quot;&gt;(paper)&lt;/a&gt;</source>
          <target state="translated">Andreux M.、Angles T.、Exarchakis G.、Leonarduzzi R.、Rochette G.、Thiry L.、Zarka J.、Mallat S.、And&amp;eacute;nJ。、Belilovsky E.、Bruna J.、Lostanlen V.、Hirn MJ 、Oyallon E.、Zhang S.、Cella C.、Eickenberg M.（2019）。Kymatio：Pythonでの散乱変換。arXivプレプリントarXiv：1812.11214。&lt;a href=&quot;https://arxiv.org/abs/1812.11214&quot;&gt;（論文）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f12b81f2cc6b4de10d38bf56fc6d4331958fed02" translate="yes" xml:space="preserve">
          <source>Assuming the Kymatio source has been downloaded, you may install it by running</source>
          <target state="translated">Kymatioのソースがダウンロードされていると仮定して、以下のように実行してインストールしてください。</target>
        </trans-unit>
        <trans-unit id="36039c3f46e580163854da82be8479a2cafb33f2" translate="yes" xml:space="preserve">
          <source>BSD-3-Clause license</source>
          <target state="translated">BSD-3条ライセンス</target>
        </trans-unit>
        <trans-unit id="c1f8fdcb20a1e7bdce7abff74794ceaeee5c0c92" translate="yes" xml:space="preserve">
          <source>Building the documentation from source</source>
          <target state="translated">ソースからドキュメントを構築する</target>
        </trans-unit>
        <trans-unit id="c23cdae7f0075e92523e078952ccaad69da3cef0" translate="yes" xml:space="preserve">
          <source>Certain frontends, &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;sklearn&lt;/code&gt;, only allow processing on the CPU and are therefore slower. The &lt;code&gt;torch&lt;/code&gt;, &lt;code&gt;tensorflow&lt;/code&gt;, and &lt;code&gt;keras&lt;/code&gt; frontends, however, also support GPU processing, which can significantly accelerate computations. Additionally, the &lt;code&gt;torch&lt;/code&gt; backend supports an optimized &lt;code&gt;skcuda&lt;/code&gt; backend which currently provides the fastest performance in computing scattering transforms. In 2D, it may be instantiated using:</source>
          <target state="translated">特定のフロントエンド、 &lt;code&gt;numpy&lt;/code&gt; および &lt;code&gt;sklearn&lt;/code&gt; は、CPUでの処理のみを許可するため、速度が低下します。 &lt;code&gt;torch&lt;/code&gt; 、 &lt;code&gt;tensorflow&lt;/code&gt; 、及び &lt;code&gt;keras&lt;/code&gt; のフロントエンドは、しかしながら、かなりの計算を加速することができるGPU処理をサポートします。さらに、 &lt;code&gt;torch&lt;/code&gt; バックエンドは最適化された &lt;code&gt;skcuda&lt;/code&gt; バックエンドをサポートし、現在、散乱変換の計算で最速のパフォーマンスを提供します。2Dでは、次を使用してインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="95bbf2dcf8e638da8f3ec0da173f22c4ce47b0cd" translate="yes" xml:space="preserve">
          <source>Code of conduct</source>
          <target state="translated">行動規範</target>
        </trans-unit>
        <trans-unit id="e8280da218d7d376eca1b64f4dbd2e78d1e95323" translate="yes" xml:space="preserve">
          <source>Currently, there are six available frontend&amp;ndash;backend pairs, NumPy (CPU), scikit-learn (CPU), pure PyTorch (CPU and GPU), PyTorch+scikit-cuda (GPU), TensorFlow (CPU and GPU), and Keras (CPU and GPU).</source>
          <target state="translated">現在、利用可能なフロントエンドとバックエンドのペアは、NumPy（CPU）、scikit-learn（CPU）、純粋なPyTorch（CPUとGPU）、PyTorch + scikit-cuda（GPU）、TensorFlow（CPUとGPU）、Keras（ CPUとGPU）。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">依存関係</target>
        </trans-unit>
        <trans-unit id="8704fea0ca5af722fe8cb83918ba5d375516bd96" translate="yes" xml:space="preserve">
          <source>Developers can also install Kymatio via:</source>
          <target state="translated">開発者は、経由してKymatioをインストールすることもできます。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">ドキュメント</target>
        </trans-unit>
        <trans-unit id="36ae6b07ddb620b3c4b46d8635a1c22b8bedcc53" translate="yes" xml:space="preserve">
          <source>Each algorithm comes packaged with a frontend and backend. The frontend takes care of
interfacing with the user. The backend defines functions necessary for
computation of the scattering transform.</source>
          <target state="translated">各アルゴリズムはフロントエンドとバックエンドでパッケージ化されています。フロントエンドはユーザーとのインターフェースを担当します。バックエンドは,散乱変換の計算に必要な関数を定義します.</target>
        </trans-unit>
        <trans-unit id="e98420ff70d2b8112ee3173ae9b1c8f18bb7558f" translate="yes" xml:space="preserve">
          <source>Each of these algorithms is written in a high-level imperative paradigm, making it portable to any Python library for array operations as long as it enables complex-valued linear algebra and a fast Fourier transform (FFT).</source>
          <target state="translated">これらのアルゴリズムはそれぞれ高レベルの命令型パラダイムで書かれており、複素数値線形代数と高速フーリエ変換(FFT)が可能であれば、配列操作のための任意のPythonライブラリに移植することができます。</target>
        </trans-unit>
        <trans-unit id="1ef8e6da45d2dd081d16f57b855fc793cd8acd72" translate="yes" xml:space="preserve">
          <source>Flexibility</source>
          <target state="translated">柔軟性</target>
        </trans-unit>
        <trans-unit id="152d1cf2d912c0b47ab85242e86450251a763f9b" translate="yes" xml:space="preserve">
          <source>Frontend</source>
          <target state="translated">フロントエンド</target>
        </trans-unit>
        <trans-unit id="9433c5fb4a89d84b7499d9e379b243c69ce6205c" translate="yes" xml:space="preserve">
          <source>GPU acceleration</source>
          <target state="translated">GPUアクセラレーション</target>
        </trans-unit>
        <trans-unit id="2ad1db6e3f2ba5bce854f2655954836f3db54c2f" translate="yes" xml:space="preserve">
          <source>GitHub issue tracker</source>
          <target state="translated">GitHub のイシュートラッカー</target>
        </trans-unit>
        <trans-unit id="c6651994b242228b647fbbd2a83eccefd957abca" translate="yes" xml:space="preserve">
          <source>GitHub repository</source>
          <target state="translated">GitHub リポジトリ</target>
        </trans-unit>
        <trans-unit id="76be732f9cb754d7da8b57d54ea72b2e3b8ba2c3" translate="yes" xml:space="preserve">
          <source>How to cite</source>
          <target state="translated">引用の仕方</target>
        </trans-unit>
        <trans-unit id="efd6b6ccb79578b072463a1d8293ef806ea055fb" translate="yes" xml:space="preserve">
          <source>If you use this package, please cite the following paper:</source>
          <target state="translated">このパッケージを使用する場合は、以下の論文を引用してください。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="3f3de271c6c7dc20a297d761972fe34ae72df935" translate="yes" xml:space="preserve">
          <source>Installation from source</source>
          <target state="translated">ソースからのインストール</target>
        </trans-unit>
        <trans-unit id="86c7b897c9b72bd137dc4b767e6866f5c39a73d8" translate="yes" xml:space="preserve">
          <source>Keras</source>
          <target state="translated">ケラス</target>
        </trans-unit>
        <trans-unit id="df3d1a146f6692a3651aaa3fbcacc93f681aafb3" translate="yes" xml:space="preserve">
          <source>Kyma (&lt;em&gt;&amp;kappa;ύ&amp;mu;&amp;alpha;&lt;/em&gt;) means &lt;em&gt;wave&lt;/em&gt; in Greek. By the same token, Kymatio (&lt;em&gt;&amp;kappa;&amp;upsilon;&amp;mu;ά&amp;tau;&amp;iota;&amp;omicron;&lt;/em&gt;) means &lt;em&gt;wavelet&lt;/em&gt;.</source>
          <target state="translated">Kyma（&lt;em&gt;&amp;kappa;ύ&amp;mu;&amp;alpha;&lt;/em&gt;）はギリシャ語で&lt;em&gt;波&lt;/em&gt;を意味します。同様に、Kymatio（&lt;em&gt;&amp;kappa;&amp;upsilon;&amp;mu;ά&amp;tau;&amp;iota;&amp;omicron;&lt;/em&gt;）は&lt;em&gt;ウェーブレットを&lt;/em&gt;意味します。</target>
        </trans-unit>
        <trans-unit id="8548ef3944e0cef547f58cf5a2b4a3c646d896d9" translate="yes" xml:space="preserve">
          <source>Kymatio</source>
          <target state="translated">キマティオ</target>
        </trans-unit>
        <trans-unit id="2a3060a5bd60e793748b70988510c5cec47cd775" translate="yes" xml:space="preserve">
          <source>Kymatio integrates the construction of wavelet filter banks in 1D, 2D, and 3D, as well as memory-efficient algorithms for extracting wavelet scattering coefficients, under a common application programming interface.</source>
          <target state="translated">Kymatioは、1次元、2次元、3次元のウェーブレットフィルタバンクの構築と、ウェーブレット散乱係数を抽出するためのメモリ効率の良いアルゴリズムを、共通のアプリケーション・プログラミング・インターフェースの下で統合しています。</target>
        </trans-unit>
        <trans-unit id="54cac6c05abe915a8d206d03162f6ab2fc659a33" translate="yes" xml:space="preserve">
          <source>Kymatio is an implementation of the wavelet scattering transform in the Python programming language, suitable for large-scale numerical experiments in signal processing and machine learning.
Scattering transforms are translation-invariant signal representations implemented as convolutional networks whose filters are not learned, but fixed (as wavelet filters).</source>
          <target state="translated">Kymatioは、Pythonプログラミング言語によるウェーブレット散乱変換の実装であり、信号処理や機械学習などの大規模な数値実験に適しています。散乱変換は並進不変の信号表現であり、フィルタは学習ではなく固定(ウェーブレットフィルタとして)された畳み込みネットワークとして実装されています。</target>
        </trans-unit>
        <trans-unit id="6d5120c08afc7db51817d584e6d6b97810edfc46" translate="yes" xml:space="preserve">
          <source>Kymatio requires:</source>
          <target state="translated">キマティオは必要です。</target>
        </trans-unit>
        <trans-unit id="3ae7b28236ecfd76acbd2047faa28b2e0324cff4" translate="yes" xml:space="preserve">
          <source>Kymatio: Wavelet scattering in Python</source>
          <target state="translated">Kymatio.Pythonでのウェーブレット散乱</target>
        </trans-unit>
        <trans-unit id="ab2b0d24f77e5a3a38bab001e141787df2995183" translate="yes" xml:space="preserve">
          <source>Linux and macOS are the two officially supported operating systems.</source>
          <target state="translated">LinuxとmacOSは、公式にサポートされている2つのOSです。</target>
        </trans-unit>
        <trans-unit id="c2290380067bfed6df2ec6fcc5387ef97d892b91" translate="yes" xml:space="preserve">
          <source>List of authors</source>
          <target state="translated">著者一覧</target>
        </trans-unit>
        <trans-unit id="4dc55fcd63f479bf8ebfdeaffa6bcc70d86f81ad" translate="yes" xml:space="preserve">
          <source>Note that the organization and the library are capitalized (&lt;em&gt;Kymatio&lt;/em&gt;) whereas the corresponding Python module is written in lowercase (&lt;code&gt;import kymatio&lt;/code&gt;).</source>
          <target state="translated">組織とライブラリは大文字で表記され（&lt;em&gt;Kymatio&lt;/em&gt;）、対応するPythonモジュールは小文字で記述されている（ &lt;code&gt;import kymatio&lt;/code&gt; ）ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="148fb3e1f0f3a0a5a25d7af63d9dc5d6da0841ea" translate="yes" xml:space="preserve">
          <source>NumPy</source>
          <target state="translated">ナムパイ</target>
        </trans-unit>
        <trans-unit id="181b2d0668b8d7262738c301c5724be5ca7e3241" translate="yes" xml:space="preserve">
          <source>Online resources</source>
          <target state="translated">オンラインリソース</target>
        </trans-unit>
        <trans-unit id="b307b88c84327b1804aee227595be53342245965" translate="yes" xml:space="preserve">
          <source>Portability</source>
          <target state="translated">移植性</target>
        </trans-unit>
        <trans-unit id="98a2e30eeb85238d061519d74935e170e44c72cb" translate="yes" xml:space="preserve">
          <source>PyTorch</source>
          <target state="translated">ピートーチ</target>
        </trans-unit>
        <trans-unit id="be4fdf26c96852e056bf5d6ac5c3b6c919765a54" translate="yes" xml:space="preserve">
          <source>PyTorch and scikit-cuda</source>
          <target state="translated">PyTorch と scikit-cuda</target>
        </trans-unit>
        <trans-unit id="36ccbb6e002491c3a25d7ac443e22891fb590e4b" translate="yes" xml:space="preserve">
          <source>Python (&amp;gt;= 3.5)</source>
          <target state="translated">Python（&amp;gt; = 3.5）</target>
        </trans-unit>
        <trans-unit id="cde26ebfd6a3380e06f47e7a97faf1d5c4989cc4" translate="yes" xml:space="preserve">
          <source>Running Kymatio on a graphics processing unit (GPU) rather than a multi-core conventional central processing unit (CPU) allows for significant speedups in computing the scattering transform.
The current speedup with respect to CPU-based MATLAB code is of the order of 10 in 1D and 3D and of the order of 100 in 2D.</source>
          <target state="translated">KymatioをマルチコアのCPUではなくGPUで実行することで,散乱変換の計算を大幅に高速化することができます.CPUベースのMATLABコードとの比較では,1次元と3次元では10のオーダー,2次元では100のオーダーのスピードアップが見られます.</target>
        </trans-unit>
        <trans-unit id="94b03c70b196c58604c0a7faf7218bf6901b8e0c" translate="yes" xml:space="preserve">
          <source>Scalability</source>
          <target state="translated">スケーラビリティ</target>
        </trans-unit>
        <trans-unit id="719627dc8b024372a3f64a840cea6b6b82e3930e" translate="yes" xml:space="preserve">
          <source>SciPy (&amp;gt;= 0.13)</source>
          <target state="translated">SciPy（&amp;gt; = 0.13）</target>
        </trans-unit>
        <trans-unit id="aa03f53e41cb1c33016b8b02ed6b8f6801d7a75d" translate="yes" xml:space="preserve">
          <source>Scikit-learn</source>
          <target state="translated">サイキット学習</target>
        </trans-unit>
        <trans-unit id="04c6f7f38268f65dec83686a308d089d271f8881" translate="yes" xml:space="preserve">
          <source>Standard installation (on CPU hardware)</source>
          <target state="translated">標準インストール(CPUハードウェア上)</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">サポート</target>
        </trans-unit>
        <trans-unit id="91920dffa2de075aa71252ce246c4919ca2918b7" translate="yes" xml:space="preserve">
          <source>TensorFlow</source>
          <target state="translated">テンソルフロー</target>
        </trans-unit>
        <trans-unit id="c25dc5610a01b0c692eaeed08e28068b4bcc5187" translate="yes" xml:space="preserve">
          <source>The Kymatio environment</source>
          <target state="translated">キマティオの環境</target>
        </trans-unit>
        <trans-unit id="1abd05325464742c038fa63ed6a75dfab2865ff5" translate="yes" xml:space="preserve">
          <source>The Kymatio organization associates the developers of several pre-existing packages for wavelet scattering, including &lt;code&gt;ScatNet&lt;/code&gt;, &lt;code&gt;scattering.m&lt;/code&gt;, &lt;code&gt;PyScatWave&lt;/code&gt;, &lt;code&gt;WaveletScattering.jl&lt;/code&gt;, and &lt;code&gt;PyScatHarm&lt;/code&gt;.</source>
          <target state="translated">Kymatio組織は、以下を含むウェーブレット散乱のためのいくつかの既存のパッケージの開発者が関連付け &lt;code&gt;ScatNet&lt;/code&gt; 、 &lt;code&gt;scattering.m&lt;/code&gt; 、 &lt;code&gt;PyScatWave&lt;/code&gt; 、 &lt;code&gt;WaveletScattering.jl&lt;/code&gt; 、および &lt;code&gt;PyScatHarm&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="889510d61cc4478b1f890a999b109806db04b367" translate="yes" xml:space="preserve">
          <source>The documentation can also be found in the &lt;code&gt;doc/&lt;/code&gt; subfolder of the GitHub repository.
To build the documentation locally, please clone this repository and run</source>
          <target state="translated">ドキュメントは、GitHubリポジトリの &lt;code&gt;doc/&lt;/code&gt; サブフォルダーにもあります。ドキュメントをローカルで作成するには、このリポジトリのクローンを作成して実行してください</target>
        </trans-unit>
        <trans-unit id="fa9f92c1199d3cb46e41c8111a313f3059de7824" translate="yes" xml:space="preserve">
          <source>The documentation of Kymatio is officially hosted on the &lt;a href=&quot;https://www.kymat.io/&quot;&gt;kymat.io&lt;/a&gt; website.</source>
          <target state="translated">Kymatioのドキュメントは、&lt;a href=&quot;https://www.kymat.io/&quot;&gt;kymat.ioWeb&lt;/a&gt;サイトで正式にホストされています。</target>
        </trans-unit>
        <trans-unit id="38bd42950d585edf9cac7c0b160e300e46553aa8" translate="yes" xml:space="preserve">
          <source>The recommended pronunciation for Kymatio is &lt;em&gt;kim-ah-tio&lt;/em&gt;. In other words, it rhymes with patio, not with ratio.</source>
          <target state="translated">Kymatioの推奨発音は&lt;em&gt;kim-ah-tio&lt;/em&gt;です。言い換えれば、それは比率ではなく、パティオで韻を踏む。</target>
        </trans-unit>
        <trans-unit id="b2372497347160ef4fd2d2708611e96f9f743d06" translate="yes" xml:space="preserve">
          <source>The resort to PyTorch tensors as inputs to Kymatio allows the programmer to backpropagate the gradient of wavelet scattering coefficients, thus integrating them within an end-to-end trainable pipeline, such as a deep neural network.</source>
          <target state="translated">Kymatioの入力としてPyTorchテンソルを使用することで、プログラマはウェーブレット散乱係数の勾配をバックプロパゲーションすることができ、ディープニューラルネットワークのようなエンドツーエンドの学習可能なパイプラインに統合することができます。</target>
        </trans-unit>
        <trans-unit id="d5a1bf380ef4e64c7198f09c52af5705b6a80a91" translate="yes" xml:space="preserve">
          <source>The user may control the choice of backend at runtime via for instance:</source>
          <target state="translated">ユーザーは、例えば、実行時にバックエンドの選択を制御することができます。</target>
        </trans-unit>
        <trans-unit id="fa133e091d611c406041455e9dc419d31a31e906" translate="yes" xml:space="preserve">
          <source>This is particularly useful when working with large images, such as those in ImageNet, which are of size 224&amp;times;224.</source>
          <target state="translated">これは、サイズが224&amp;times;224のImageNetなどの大きな画像を操作する場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="fb3e475a7ee89678052880f00eb0fa9feda6105c" translate="yes" xml:space="preserve">
          <source>To explicitly call the &lt;code&gt;numpy&lt;/code&gt; frontend, run:</source>
          <target state="translated">&lt;code&gt;numpy&lt;/code&gt; フロントエンドを明示的に呼び出すには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="bea76a8e8b506c0a9628a71da028ba7568b9ab4b" translate="yes" xml:space="preserve">
          <source>To run Kymatio on a graphics processing unit (GPU), you can either use the PyTorch-style &lt;code&gt;cuda()&lt;/code&gt; method to move your
object to GPU. Kymatio is designed to operate on a variety of backends for tensor operations. For extra speed, install
the CUDA library and the &lt;code&gt;skcuda&lt;/code&gt; dependency by running the following pip command:</source>
          <target state="translated">グラフィックスプロセッシングユニット（GPU）でKymatioを実行するには、PyTorchスタイルの &lt;code&gt;cuda()&lt;/code&gt; メソッドを使用してオブジェクトをGPUに移動します。Kymatioは、テンソル演算用のさまざまなバックエンドで動作するように設計されています。速度を上げるには、次のpipコマンドを実行して、CUDAライブラリと &lt;code&gt;skcuda&lt;/code&gt; 依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="36e4e599c682ada4993528950521fa589d9ec336" translate="yes" xml:space="preserve">
          <source>Use Kymatio if you need a library that:</source>
          <target state="translated">あなたがそのライブラリが必要な場合は、Kymatioを使用してください。</target>
        </trans-unit>
        <trans-unit id="05a5ae551bf368c5e5041bf2d553b6aabbde4596" translate="yes" xml:space="preserve">
          <source>Wavelet scattering transforms in Python with GPU acceleration</source>
          <target state="translated">GPUアクセラレーションを用いたPythonでのウェーブレット散乱変換</target>
        </trans-unit>
        <trans-unit id="2754d3d6d5e3850f1489be50c4b4328fc62e9d21" translate="yes" xml:space="preserve">
          <source>We refer to our &lt;a href=&quot;https://www.kymat.io/userguide.html#benchmarks&quot;&gt;official benchmarks&lt;/a&gt; for further details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.kymat.io/userguide.html#benchmarks&quot;&gt;公式ベンチマーク&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5a1163607c1137f1cda0f47a72aa839208d98ac" translate="yes" xml:space="preserve">
          <source>We strongly recommend running Kymatio in an Anaconda environment, because this simplifies the installation of other
dependencies. You may install the latest version of Kymatio using the package manager &lt;code&gt;pip&lt;/code&gt;, which will automatically download
Kymatio from the Python Package Index (PyPI):</source>
          <target state="translated">KymatioをAnaconda環境で実行することを強くお勧めします。これにより、他の依存関係のインストールが簡単になります。パッケージマネージャー &lt;code&gt;pip&lt;/code&gt; を使用して、最新バージョンのKymatioをインストールできます。これにより、Python Package Index（PyPI）からKymatioが自動的にダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="0a90cf7749775f795a2e742c439f803343fdd208" translate="yes" xml:space="preserve">
          <source>We wish to thank the Scientific Computing Core at the Flatiron Institute for the use of their computing resources for testing.</source>
          <target state="translated">Flatiron InstituteのScientific Computing Coreをテストに利用していただいたことに感謝します。</target>
        </trans-unit>
        <trans-unit id="06c8d549921b00b4e95f34fc557fff72651fde53" translate="yes" xml:space="preserve">
          <source>We would also like to thank &amp;Eacute;cole Normale Sup&amp;eacute;rieure for their support.</source>
          <target state="translated">また、&amp;Eacute;coleNormaleSup&amp;eacute;rieureのサポートにも感謝します。</target>
        </trans-unit>
        <trans-unit id="54774106dc227a99af20e5f33853600fbcf96e22" translate="yes" xml:space="preserve">
          <source>integrates wavelet scattering in a deep learning architecture, and</source>
          <target state="translated">ウェーブレット散乱をディープラーニングアーキテクチャに統合し</target>
        </trans-unit>
        <trans-unit id="dd482e601611de45efcfd5d84acfca518a9fb1ea" translate="yes" xml:space="preserve">
          <source>runs seamlessly on CPU and GPU hardware, with major deep learning APIs, such
as PyTorch and TensorFlow.</source>
          <target state="translated">は、PyTorch や TensorFlow などの主要なディープラーニング API を使用して、CPU や GPU ハードウェア上でシームレスに動作します。</target>
        </trans-unit>
        <trans-unit id="8cdc0b5a5f22cf13a5eaa3baf42d2bd5ebe625cf" translate="yes" xml:space="preserve">
          <source>supports 1-D, 2-D, and 3-D wavelets,</source>
          <target state="translated">は、1-D、2-D、3-Dウェーブレットをサポートしています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
