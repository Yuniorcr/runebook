<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/pyahocorasick/">
    <body>
      <group id="pyahocorasick">
        <trans-unit id="ed97aac606c284f00a8e98f0ae07140929fbe028" translate="yes" xml:space="preserve">
          <source>(and its</source>
          <target state="translated">（そしてその</target>
        </trans-unit>
        <trans-unit id="e3067ae56410f9464bfc62ad525719ec2237bbc0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;noaho&lt;/a&gt; by Jeff Donner</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JDonner/NoAho&quot;&gt;&lt;/a&gt;ジェフドナーによるノアホ</target>
        </trans-unit>
        <trans-unit id="2898914d91ade6aa4b5fab75831b531b3d2f6679" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;py_aho_corasick&lt;/a&gt; by Jan</source>
          <target state="translated">&lt;a href=&quot;https://github.com/JanFan/py-aho-corasick&quot;&gt;&lt;/a&gt;Janによるpy_aho_corasick</target>
        </trans-unit>
        <trans-unit id="81c37789d6d7ff8f548453721778100bd5d331dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;ahocorapy&lt;/a&gt; by abusix</source>
          <target state="translated">&lt;a href=&quot;https://github.com/abusix/ahocorapy&quot;&gt;abusixに&lt;/a&gt;よるahocorapy</target>
        </trans-unit>
        <trans-unit id="c7d44400b2f57def86baddf19afbfc3e699abdc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;acora&lt;/a&gt; by Stefan Behnel</source>
          <target state="translated">&lt;a href=&quot;https://github.com/scoder/acora&quot;&gt;StefanBehnelに&lt;/a&gt;よるacora</target>
        </trans-unit>
        <trans-unit id="6d9a570276800e272f34696ea2ab7536f7a8bede" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;ahocorasick&lt;/a&gt; by Danny Yoo</source>
          <target state="translated">&lt;a href=&quot;https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/&quot;&gt;&lt;/a&gt;ダニー・ユによるエイホコラシック</target>
        </trans-unit>
        <trans-unit id="9770c1cb2742574796021ba58990f9e621272f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Aho-Corasick automatons&lt;/strong&gt; are commonly used for fast multi-pattern matching
in intrusion detection systems (such as snort), anti-viruses and many other
applications that need fast matching against a pre-defined set of string keys.</source>
          <target state="translated">&lt;strong&gt;Aho-Corasickオートマトン&lt;/strong&gt;は、侵入検知システム（snortなど）、アンチウイルス、および事前定義された文字列キーのセットとの高速マッチングを必要とするその他の多くのアプリケーションで、高速マルチパターンマッチングに一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="7dd3bf2e6f48a980abeaa7119e3942eda3c11cae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Andrew Grigorev&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アンドリュー・グリゴレフ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2fb40f4f613f9ac3cfec16945940e4349611a293" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bogdan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ボグダン&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6393c48fba67057a6497248e9d6b30140999726f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;David Woakes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;David Woakes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="162d0e50b0670b0376cbdbf7b1e65d64fc0a1f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edward Betts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;エドワードベッツ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bfe3f4ab47a409cb2bd40897690783ae572c53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frankie Robertson&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フランキー・ロバートソン&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3af194910234db2a514c52b9a661270037c96342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Frederik Petersen&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フレデリク・ピーターセン&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e49fa0cad50da1418d242834a238904c03fdd42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INADA Naoki&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;稲田直樹&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="874d19396e59a53cbdcade123bc4349d5fd7cf57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Jan Fan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ヤンファン&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc7d3706eaf36f8967cc0d24859e944da30d97d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pastafarianist&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;パスタファリアニスト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ea279129e79d202bf58037ef3a7cd73546b43af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Philippe Ombredanne&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フィリップ・オンブレダンヌ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b2d0fa470009d75d07f9589be39b9f90813cd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Renat Nasyrov&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Renat Nasyrov&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b95a3ee36aea47516df64cdf62619b4ef0f8fe0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sylvain Zimmer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;シルヴァン・ジマー&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="949463ea7fe3fff2c8592527d998390dde1c321c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xiaopeng Xu&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Xiaopeng Xu&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8185da43a01dd59da25c68eb057e9018a63e6d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gladtosee&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;gladtosee&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9aec24ead2e378aa1de01e390b2d48c5093417c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pyahocorasick&lt;/strong&gt; is a fast and memory efficient library for exact or approximate
multi-pattern string search meaning that you can find multiple key strings
occurrences at once in some input text.  The library provides an</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt;は、正確または近似のマルチパターン文字列検索のための高速でメモリ効率の高いライブラリです。つまり、一部の入力テキストで複数のキー文字列の出現を一度に見つけることができます。ライブラリは、</target>
        </trans-unit>
        <trans-unit id="b094c013fc7959b0e49319f3c239cd5595cb2e1c" translate="yes" xml:space="preserve">
          <source>A drawback is that it needs to be constructed and &amp;ldquo;finalized&amp;rdquo; ahead of time
before you can search strings. In several applications where you search for several
pre-defined &amp;ldquo;needles&amp;rdquo; in a variable &amp;ldquo;haystacks&amp;rdquo; this is actually an advantage.</source>
          <target state="translated">欠点は、文字列を検索する前に、事前に構築して「ファイナライズ」する必要があることです。変数「haystacks」でいくつかの事前定義された「針」を検索するいくつかのアプリケーションでは、これは実際には利点です。</target>
        </trans-unit>
        <trans-unit id="04782ec4eca1f6097648d60e92dc2368306610c7" translate="yes" xml:space="preserve">
          <source>AHOCORASICK_UNICODE</source>
          <target state="translated">アホコラシック_ユニコード</target>
        </trans-unit>
        <trans-unit id="d8c1fb100909b2de5e3e6846b03cdf758e3a1ef9" translate="yes" xml:space="preserve">
          <source>Alphabetic list of authors:</source>
          <target state="translated">アルファベット表記の著者リスト。</target>
        </trans-unit>
        <trans-unit id="7b2c0e3b7a55c97534608d2d71b37edc8610942d" translate="yes" xml:space="preserve">
          <source>And play with the</source>
          <target state="translated">で遊ぶことができます。</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">著者</target>
        </trans-unit>
        <trans-unit id="44ba7c9100516298055fc980c38686ce14b07df5" translate="yes" xml:space="preserve">
          <source>Automaton</source>
          <target state="translated">オートマトン</target>
        </trans-unit>
        <trans-unit id="f405bb9bd02d587cdb693f843b6d07868d7a8784" translate="yes" xml:space="preserve">
          <source>Automaton.iter()</source>
          <target state="translated">オートマトン.iter()</target>
        </trans-unit>
        <trans-unit id="25719a5cf1783036cea960576445312036b584ec" translate="yes" xml:space="preserve">
          <source>Automaton.unicode</source>
          <target state="translated">オートマトンユニコード</target>
        </trans-unit>
        <trans-unit id="3ea9b7958e6e0f63f2ef85fa952a4e7d3b2a34a4" translate="yes" xml:space="preserve">
          <source>Behind the scenes the &lt;strong&gt;pyahocorasick&lt;/strong&gt; Python library implements these two data
structures:  a &lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt; and an Aho-Corasick string
matching automaton. Both are exposed through the</source>
          <target state="translated">舞台裏では、&lt;strong&gt;pyahocorasick&lt;/strong&gt; Pythonライブラリは、&lt;a href=&quot;http://en.wikipedia.org/wiki/trie&quot;&gt;Trie&lt;/a&gt;とAho-Corasick文字列照合オートマトンの2つのデータ構造を実装しています。両方とも</target>
        </trans-unit>
        <trans-unit id="7abedb1575fd6bac486d83daa0fae3666fcd6d40" translate="yes" xml:space="preserve">
          <source>Better performance than py-aho-corasick.</source>
          <target state="translated">パイアホコラシックよりも性能が良い。</target>
        </trans-unit>
        <trans-unit id="02afad2d07ff35fa2d38c3f1aa70f1ad2bf9a908" translate="yes" xml:space="preserve">
          <source>Build and install from PyPi</source>
          <target state="translated">PyPiからのビルドとインストール</target>
        </trans-unit>
        <trans-unit id="e50315914efb0d909a65ca1269c98237e027ab40" translate="yes" xml:space="preserve">
          <source>Conda-Forge &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</source>
          <target state="translated">Conda-Forge &lt;a href=&quot;https://github.com/conda-forge/pyahocorasick-feedstock/&quot;&gt;https://github.com/conda-forge/pyahocorasick-feedstock/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">貢献</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">ドキュメント</target>
        </trans-unit>
        <trans-unit id="55ab40731d2b483f40f5c367bf45cf082a424256" translate="yes" xml:space="preserve">
          <source>Does not compile on Windows (July 2016).</source>
          <target state="translated">Windowsでコンパイルしない(2016年7月)。</target>
        </trans-unit>
        <trans-unit id="9cf270b0ed04e38ca1168cadd64d0b400c9268cd" translate="yes" xml:space="preserve">
          <source>Download and source code</source>
          <target state="translated">ダウンロードとソースコード</target>
        </trans-unit>
        <trans-unit id="658c081ddc6d9c0cb44f7db7896b386bf67ec1fc" translate="yes" xml:space="preserve">
          <source>FAQ and Who is using pyahocorasick? &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</source>
          <target state="translated">FAQと誰がpyahocorasickを使用していますか？&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&quot;&gt;https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f1e450a10c75a74703dde77de000687ff20958d0" translate="yes" xml:space="preserve">
          <source>Full text of license is available in LICENSE file.</source>
          <target state="translated">ライセンスの全文はLICENSEファイルでご覧いただけます。</target>
        </trans-unit>
        <trans-unit id="cab4b9f03f6a3ca40df9255c188756480ea392ef" translate="yes" xml:space="preserve">
          <source>GPL-licensed.</source>
          <target state="translated">GPLでライセンスされています。</target>
        </trans-unit>
        <trans-unit id="272e4f2c171f5d31922d67de7378f7e262a5bc76" translate="yes" xml:space="preserve">
          <source>GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">GitHub &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/&quot;&gt;https://github.com/WojciechMula/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad05633a3a72b5a69f26140c6b056ca6ac3cc746" translate="yes" xml:space="preserve">
          <source>Here we print the results and just check that they are correct. The</source>
          <target state="translated">ここでは結果を印刷して、正しいかどうかを確認するだけです。このようにして印刷された結果には、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="17312d12e6bb98023633465fda0a407c342321e8" translate="yes" xml:space="preserve">
          <source>If compilation succeeds, the module is ready to use.</source>
          <target state="translated">コンパイルに成功すると、モジュールを使用する準備が整います。</target>
        </trans-unit>
        <trans-unit id="bd491784e8bd16d60a13acab42b345ed6027c091" translate="yes" xml:space="preserve">
          <source>In addition to Trie-like and Aho-Corasick methods and data structures,
&lt;strong&gt;pyahocorasick&lt;/strong&gt; also implements dict-like methods: The pyahocorasick
&lt;strong&gt;Automaton&lt;/strong&gt; is a &lt;strong&gt;Trie&lt;/strong&gt; a dict-like structure indexed by string keys each
associated with a value object. You can use this to retrieve an associated value
in a time proportional to a string key length.</source>
          <target state="translated">以下のようなトライアンドアホ-Corasick方法およびデータ構造に加えて、&lt;strong&gt;pyahocorasickは&lt;/strong&gt;また、辞書のようなメソッドを実装し：pyahocorasick&lt;strong&gt;オートマトンが&lt;/strong&gt;ある&lt;strong&gt;トライは&lt;/strong&gt;辞書状構造値オブジェクトに関連付けられた文字列キー各によってインデックス付け。これを使用して、文字列キーの長さに比例した時間で関連する値を取得できます。</target>
        </trans-unit>
        <trans-unit id="734f73caf4ba4b4af7ad7e2ac00e7ad457c2946d" translate="yes" xml:space="preserve">
          <source>Includes visualization tool for resulting automaton (using pygraphviz).</source>
          <target state="translated">結果のオートマトンを可視化するツール(pygraphvizを使用)が含まれています。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="bb182491194b4d0793fa0b2ebfb14180cb314c9d" translate="yes" xml:space="preserve">
          <source>Internally an Aho-Corasick automaton is typically based on a Trie with extra
data for failure links and an implementation of the Aho-Corasick search
procedure.</source>
          <target state="translated">内部的には、Aho-Corasickオートマトンは、典型的には、失敗リンクのための余分なデータとAho-Corasick検索手順の実装を持つTrieに基づいています。</target>
        </trans-unit>
        <trans-unit id="fe01490a6d0f624547f199e72bd239c228a8fa3e" translate="yes" xml:space="preserve">
          <source>It is implemented in C and tested on Python 2.7 and 3.4+. It works on Linux, Mac and
Windows.</source>
          <target state="translated">C言語で実装され、Python 2.7と3.4+でテストされています。Linux、Mac、Windowsで動作します。</target>
        </trans-unit>
        <trans-unit id="0b87609b15fd736afe5e6b3e9f08be5444d9d946" translate="yes" xml:space="preserve">
          <source>Large automaton may take a long time to build (July 2016)</source>
          <target state="translated">大型オートマトンは作るのに時間がかかるかもしれない(2016年7月</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">ライセンス</target>
        </trans-unit>
        <trans-unit id="122441255d963912bba0b6bd7da9b922f9c619b6" translate="yes" xml:space="preserve">
          <source>MIT-licensed, 100% test coverage, tested on all major python versions (+ pypy)</source>
          <target state="translated">MIT ライセンス、100% テストカバレッジ、すべての主要な python バージョンでテスト済み (+pypy)</target>
        </trans-unit>
        <trans-unit id="ce7628c9a6e0f7b0383b4db2f57e0a8e41f2d4fd" translate="yes" xml:space="preserve">
          <source>No support for a dict-like protocol to associate a value to a string key.</source>
          <target state="translated">文字列キーに値を関連付けるディクトのようなプロトコルはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="10e2c2319f5e18601635b0d8ffdf8a79b616342e" translate="yes" xml:space="preserve">
          <source>No support for the pickle protocol.</source>
          <target state="translated">ピクルスプロトコルには対応していません。</target>
        </trans-unit>
        <trans-unit id="199d8cc3d06f55aa835b5938ee867f1fcd4256a9" translate="yes" xml:space="preserve">
          <source>Now convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search:</source>
          <target state="translated">これで、トリをアホコラシックオートマトンに変換して、アホコラシック検索を有効にします。</target>
        </trans-unit>
        <trans-unit id="574fb291c52b991631be9dcc16b47856c8ba7921" translate="yes" xml:space="preserve">
          <source>On Windows and Python 2.7 you need the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;Microsoft Visual C++ Compiler for Python 2.7&lt;/a&gt; (aka. Visual
Studio 2008). There have been reports that</source>
          <target state="translated">WindowsおよびPython2.7&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot;&gt;では、Python2.7用のMicrosoftVisual C ++コンパイラ&lt;/a&gt;（別名Visual Studio 2008）が必要です。報告があります</target>
        </trans-unit>
        <trans-unit id="8a664c4f166a6502ac9a27fe58c9b46cbef6d96e" translate="yes" xml:space="preserve">
          <source>One of the advantages of an Aho-Corasick automaton is that the typical worst-case
and best-case &lt;strong&gt;runtimes&lt;/strong&gt; are about the same and depends primarily on the size
of the input string and secondarily on the number of matches returned.  While
this may not be the fastest string search algorithm in all cases, it can search
for multiple strings at once and its runtime guarantees make it rather unique.
Because pyahocorasick is based on a Trie, it stores redundant keys prefixes only
once using memory efficiently.</source>
          <target state="translated">Aho-Corasickオートマトンの利点の1つは、典型的なワーストケースとベストケースの&lt;strong&gt;ランタイム&lt;/strong&gt;がほぼ同じであり、主に入力文字列のサイズに依存し、次に返される一致の数に依存することです。これはすべての場合に最速の文字列検索アルゴリズムではないかもしれませんが、一度に複数の文字列を検索でき、実行時の保証によりかなりユニークになります。pyahocorasickはTrieに基づいているため、メモリを効率的に使用して、冗長キープレフィックスを1回だけ保存します。</target>
        </trans-unit>
        <trans-unit id="e246417542e9b47eb9f386debf9a6c56e0bfe0d8" translate="yes" xml:space="preserve">
          <source>Other Aho-Corasick implementations for Python you can consider</source>
          <target state="translated">Python のための他の Aho-Corasick の実装を検討することができます。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="db0f74a1197d6b2e8f18cf9a0e372b427a8942e7" translate="yes" xml:space="preserve">
          <source>Performs additional suffix shortcutting (more setup overhead, less search overhead for suffix lookups).</source>
          <target state="translated">追加のサフィックスショートカットを実行します(セットアップのオーバーヘッドが増え、サフィックス検索の検索オーバーヘッドが減ります)。</target>
        </trans-unit>
        <trans-unit id="74e4fe431448e00688da3c8643c56bc538eb9444" translate="yes" xml:space="preserve">
          <source>Poor performance.</source>
          <target state="translated">パフォーマンスが悪い。</target>
        </trans-unit>
        <trans-unit id="fe28615cf8cffc3bbeb6a7d015900e3338401a59" translate="yes" xml:space="preserve">
          <source>Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</source>
          <target state="translated">Pypi &lt;a href=&quot;https://pypi.python.org/pypi/pyahocorasick/&quot;&gt;https://pypi.python.org/pypi/pyahocorasick/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45c1df25b203a7ba230eed956c1777a7aa677903" translate="yes" xml:space="preserve">
          <source>Python
module that you can use as a plain dict-like Trie or convert a Trie to an automaton
for efficient Aho-Corasick search.</source>
          <target state="translated">Aho-Corasick検索を効率的に行うために、プレーンなディクトライクなTrieとして利用したり、Trieをオートマトンに変換したりできるPythonモジュールです。</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">クイックスタート</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">サポート</target>
        </trans-unit>
        <trans-unit id="3e13dec66bbc8d1730f2c6132002840bd1f7157a" translate="yes" xml:space="preserve">
          <source>Support is available through the &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issue tracker&lt;/a&gt; to report bugs or ask
questions.</source>
          <target state="translated">バグを報告したり質問したりするためのサポートは、&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub課題追跡システム&lt;/a&gt;を通じて利用できます。</target>
        </trans-unit>
        <trans-unit id="174534c6b3882921f07bb41f7a29c9824d9b171b" translate="yes" xml:space="preserve">
          <source>Thank you.</source>
          <target state="translated">ありがとうございます。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="1d05cabd76099f37019d2974b963cca4a1200f90" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#license&quot;&gt;license&lt;/a&gt; is BSD-3-clause. Some utilities, such as tests and the pure Python
automaton are dedicated to the Public Domain.</source>
          <target state="translated">&lt;a href=&quot;#license&quot;&gt;ライセンスは&lt;/a&gt;BSD-3-句です。テストや純粋なPythonオートマトンなどの一部のユーティリティは、パブリックドメイン専用です。</target>
        </trans-unit>
        <trans-unit id="7d65dbc73543968a8479240a96a7efc6150edcf9" translate="yes" xml:space="preserve">
          <source>The full documentation including the API overview and reference is published on
&lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt;.</source>
          <target state="translated">APIの概要とリファレンスを含む完全なドキュメントは、&lt;a href=&quot;http://pyahocorasick.readthedocs.io/&quot;&gt;readthedocs&lt;/a&gt;で公開されています。</target>
        </trans-unit>
        <trans-unit id="afed17b15d79d7910cc59b01b6cb7ac878d8f5fa" translate="yes" xml:space="preserve">
          <source>The initial author and maintainer is Wojciech Muła. &lt;a href=&quot;https://github.com/pombredanne&quot;&gt;Philippe Ombredanne&lt;/a&gt;, the current co-owner, rewrote
documentation, setup CI servers and did a whole lot of work to make this module
better accessible to end users.</source>
          <target state="translated">最初の作者およびメンテナはWojciechMułaです。現在の共同所有者である&lt;a href=&quot;https://github.com/pombredanne&quot;&gt;PhilippeOmbredanne&lt;/a&gt;は、ドキュメントを書き直し、CIサーバーをセットアップし、エンドユーザーがこのモジュールにアクセスしやすくするために多くの作業を行いました。</target>
        </trans-unit>
        <trans-unit id="4b5ac9c74ef0cc47e587063fd4e4d4c3a5c9a569" translate="yes" xml:space="preserve">
          <source>The type of strings accepted and returned by</source>
          <target state="translated">によって受け入れられ、返される文字列の型</target>
        </trans-unit>
        <trans-unit id="9534657f069153e8db5ee1126e3cc2e1a451ece9" translate="yes" xml:space="preserve">
          <source>Then check if some string exists in the trie:</source>
          <target state="translated">そして、trieに何らかの文字列が存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="959dc99901355a8612b602dbe13380c89fb12c42" translate="yes" xml:space="preserve">
          <source>Then create an Automaton:</source>
          <target state="translated">そしてAutomatonを作成します。</target>
        </trans-unit>
        <trans-unit id="d2c6d3f04bf71d2bfa75772861724b90c6e11939" translate="yes" xml:space="preserve">
          <source>Then search all occurrences of the keys (the needles) in an input string (our haystack).</source>
          <target state="translated">次に、入力文字列(私たちの干し草の山)の中のキー(針)のすべての出現を検索します。</target>
        </trans-unit>
        <trans-unit id="26eae255de3160d089849367227c318e420bae93" translate="yes" xml:space="preserve">
          <source>This library is licensed under very liberal
&lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt; license. Some portions of
the code are dedicated to the public domain such as the pure Python automaton and test
code.</source>
          <target state="translated">このライブラリは、非常に寛大な&lt;a href=&quot;http://spdx.org/licenses/BSD-3-Clause.html&quot;&gt;BSD-3-Clause&lt;/a&gt;ライセンスの下でライセンスされています。コードの一部は、純粋なPythonオートマトンやテストコードなど、パブリックドメイン専用です。</target>
        </trans-unit>
        <trans-unit id="a76d0f88d6303cbc70bca3eaafc6057174b0e969" translate="yes" xml:space="preserve">
          <source>This library would not be possible without help of many people, who contributed in
various ways.
They created &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;pull requests&lt;/a&gt;,
reported bugs as &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHub issues&lt;/a&gt;
or via direct messages, proposed fixes, or spent their valuable time on testing.</source>
          <target state="translated">この図書館は、さまざまな形で貢献してくれた多くの人々の助けなしには実現できませんでした。彼らは&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;プルリクエスト&lt;/a&gt;を作成し、&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/issues&quot;&gt;GitHubの問題&lt;/a&gt;として、またはダイレクトメッセージを介してバグを報告し、修正を提案し、貴重な時間をテストに費やしました。</target>
        </trans-unit>
        <trans-unit id="65802d1bebf9a241c61798462c97bce6dfbfc8f7" translate="yes" xml:space="preserve">
          <source>This module is written in C. You need a C compiler installed to compile native
CPython extensions. To install:</source>
          <target state="translated">このモジュールはC言語で書かれています。ネイティブのCPython拡張をコンパイルするにはCコンパイラがインストールされている必要があります。インストールするには</target>
        </trans-unit>
        <trans-unit id="e800b963297cdb42008d55c6934e3c969110967f" translate="yes" xml:space="preserve">
          <source>To build from sources you need to have a C compiler installed and configured which
should be standard on Linux and easy to get on MacOSX.</source>
          <target state="translated">ソースからビルドするには、Linuxでは標準で、MacOSXでは簡単に入手できるCコンパイラをインストールして設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2303b77104c204d0cf392f7c5542a4497f1ecdf6" translate="yes" xml:space="preserve">
          <source>To build from sources, clone the git repository or download and extract the source
archive.</source>
          <target state="translated">ソースからビルドするには、git リポジトリをクローンするか、ソースアーカイブをダウンロードして展開します。</target>
        </trans-unit>
        <trans-unit id="75a85f5e73844aa9ce0678ff10641a6c17579101" translate="yes" xml:space="preserve">
          <source>To install for common operating systems, use pip. Pre-built wheels should be
available on Pypi at some point in the future:</source>
          <target state="translated">一般的なオペレーティングシステムにインストールするには pip を使ってください。構築済みのホイールは、将来的には Pypi で利用できるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="6e777a781dedce1b28e01826c3c139d313404f24" translate="yes" xml:space="preserve">
          <source>Unicode and bytes</source>
          <target state="translated">ユニコードとバイト</target>
        </trans-unit>
        <trans-unit id="7206176896659795f74afea7cc4e7d29256396ff" translate="yes" xml:space="preserve">
          <source>Unicode is &lt;strong&gt;NOT supported&lt;/strong&gt; on Python 2 for now.</source>
          <target state="translated">現在、Unicodeは&lt;strong&gt;Python2&lt;/strong&gt;では&lt;strong&gt;サポートさ&lt;/strong&gt;れてい&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="20a865e70cb26947232ecd90e8b1136329511b67" translate="yes" xml:space="preserve">
          <source>Using pypy, ahocorapy&amp;rsquo;s search performance is only slightly worse than pyahocorasick&amp;rsquo;s.</source>
          <target state="translated">pypyを使用すると、ahocorapyの検索パフォーマンスはpyahocorasickの検索パフォーマンスよりもわずかに劣ります。</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">警告</target>
        </trans-unit>
        <trans-unit id="20325b1033d8381cc0e0e9f5cdf4baa1aeecfa32" translate="yes" xml:space="preserve">
          <source>When the library is built with unicode support on Python 3, an Automaton will
store 2 or 4 bytes per letter, depending on your Python installation. When built
for bytes, only one byte per letter is needed.</source>
          <target state="translated">Python 3 で unicode をサポートしてライブラリがビルドされている場合、Python のインストールに応じて、Automaton は 1 文字あたり 2 バイトか 4 バイトを格納します。バイト用にビルドされている場合は、1文字あたり1バイトのみ必要です。</target>
        </trans-unit>
        <trans-unit id="cc578d41959c5c83a536719803a2120cb3a926c9" translate="yes" xml:space="preserve">
          <source>While &lt;strong&gt;pyahocorasick&lt;/strong&gt; tries to be the finest and fastest Aho Corasick library
for Python you may consider these other libraries:</source>
          <target state="translated">一方で&lt;strong&gt;pyahocorasickの&lt;/strong&gt;試行は、Pythonのための最高の最速アホCorasickライブラリーであることを、あなたは、これらの他のライブラリを考慮することができます。</target>
        </trans-unit>
        <trans-unit id="189369cb661a954a8ee2e23f3f4d59cb8ab47209" translate="yes" xml:space="preserve">
          <source>With an &lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;Aho-Corasick automaton&lt;/a&gt;
you can efficiently search all occurrences of multiple strings (the needles) in an
input string (the haystack) making a single pass over the input string. With
pyahocorasick you can eventually build large automatons and pickle them to reuse
them over and over as an indexed structure for fast multi pattern string matching.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm&quot;&gt;アホ- Corasickオートマトン&lt;/a&gt;あなたは、効率的に入力された文字列の上に単一のパスを作成する入力文字列（干し草の山）に複数の文字列（針）のすべての出現を検索することができます。pyahocorasickを使用すると、最終的に大きなオートマトンを構築し、それらをピクルス化して、高速なマルチパターン文字列照合のためのインデックス付き構造として何度も再利用できます。</target>
        </trans-unit>
        <trans-unit id="ddd8dcd46e0738b341d3e1e285d6a263179698ec" translate="yes" xml:space="preserve">
          <source>Written in C.</source>
          <target state="translated">Cで書かれています。</target>
        </trans-unit>
        <trans-unit id="d42f9e878192a8bb5e32f72fea1ce7300932b374" translate="yes" xml:space="preserve">
          <source>Written in C. Does not return overlapping matches.</source>
          <target state="translated">C言語で書かれています。重複するマッチは返されません。</target>
        </trans-unit>
        <trans-unit id="4ad9e66c3d7119769fc23a32bf9ea46fc37a0022" translate="yes" xml:space="preserve">
          <source>Written in Cython.</source>
          <target state="translated">Cythonで書かれています。</target>
        </trans-unit>
        <trans-unit id="f648ca758eb1cfa4b53138bdd824268576d35265" translate="yes" xml:space="preserve">
          <source>Written in pure Python.</source>
          <target state="translated">純粋なPythonで書かれています。</target>
        </trans-unit>
        <trans-unit id="21610d0af0f56ee1ffce9457679ca588e96303ed" translate="yes" xml:space="preserve">
          <source>You can also create an eventually large automaton ahead of time and</source>
          <target state="translated">また、先回りして最終的に大きなオートマトンを作成したり</target>
        </trans-unit>
        <trans-unit id="f90f51c59d0a07bb77939cc1d895db9ff88903bd" translate="yes" xml:space="preserve">
          <source>You can fetch &lt;strong&gt;pyahocorasick&lt;/strong&gt; from:</source>
          <target state="translated">&lt;strong&gt;pyahocorasick&lt;/strong&gt;は次の&lt;strong&gt;場所&lt;/strong&gt;から取得できます。</target>
        </trans-unit>
        <trans-unit id="8a34cb424be5c612007112dca2745443175309ac" translate="yes" xml:space="preserve">
          <source>You can submit contributions through &lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHub pull requests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/WojciechMula/pyahocorasick/pull&quot;&gt;GitHubプルリクエストを&lt;/a&gt;介して投稿を送信できます。</target>
        </trans-unit>
        <trans-unit id="4059645e8bead06953ce87b04c2044bb82ea4469" translate="yes" xml:space="preserve">
          <source>You can use the Automaton class as a trie. Add some string keys and their associated
value to this trie. Here we associate a tuple of (insertion index, original string)
as a value to each key string we add to the trie:</source>
          <target state="translated">Automaton クラスをトリとして使うことができます。いくつかの文字列キーとそれに関連付けられた値をこのトリに追加します。ここでは、(挿入インデックス、元の文字列)のタプルを値として、トリに追加する各キー文字列に関連付けています。</target>
        </trans-unit>
        <trans-unit id="cad0f60d92a12c5e6f6120b7baa3005fd81bd2d4" translate="yes" xml:space="preserve">
          <source>a CPython &lt;strong&gt;C-based extension&lt;/strong&gt;, compatible with Python 2 and 3.</source>
          <target state="translated">Python2および3と互換性のあるCPythonC&lt;strong&gt;ベースの拡張機能&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c8f2d0f5b3922e28e1d46e2a166716a566fb7927" translate="yes" xml:space="preserve">
          <source>a simpler pure Python module, compatible with Python 2 and 3. This is only
available in the source repository (not on Pypi) under the py/ directory and
has a slightly different API.</source>
          <target state="translated">シンプルで純粋なPythonモジュールで、Python 2と3との互換性があります。これは py/ディレクトリ下のソースリポジトリ(Pypi 上ではありません)でのみ利用可能で、少し異なる API を持っています。</target>
        </trans-unit>
        <trans-unit id="85c447a62211d435f16120c5801a6a4d6e1f2695" translate="yes" xml:space="preserve">
          <source>ahocorasick</source>
          <target state="translated">アホコラシック</target>
        </trans-unit>
        <trans-unit id="07c33f4c5b41e7883028c6861ece1bf8a0b7044f" translate="yes" xml:space="preserve">
          <source>as set in</source>
          <target state="translated">定められたように</target>
        </trans-unit>
        <trans-unit id="c3ce14415b37306cdba0e601673a7e7701e60f4f" translate="yes" xml:space="preserve">
          <source>attributes can tell you how the library was built.
On Python 3, unicode is the default. On Python 2, bytes is the default and only value.</source>
          <target state="translated">属性を使用すると、ライブラリがどのように構築されたかを知ることができます。Python 3では、unicodeがデフォルトです。Python 2 では bytes がデフォルトで、唯一の値です。</target>
        </trans-unit>
        <trans-unit id="db5f6869b5f0574b5bb750d7a83d523f28ed9c61" translate="yes" xml:space="preserve">
          <source>class.</source>
          <target state="translated">クラスを使用しています。</target>
        </trans-unit>
        <trans-unit id="6c8d48ef3f05b27405f0b115449226fa1295dca3" translate="yes" xml:space="preserve">
          <source>companion) and then run (in a</source>
          <target state="translated">コンパニオン)をして、走ります(</target>
        </trans-unit>
        <trans-unit id="eafac96f6304711036f6df796ae70e90f66d43fb" translate="yes" xml:space="preserve">
          <source>dict-like method:</source>
          <target state="translated">ディクトのような方法。</target>
        </trans-unit>
        <trans-unit id="1e137456ce41b147b97c4a3b82b9d921053a7b85" translate="yes" xml:space="preserve">
          <source>does not build yet with
MinGW. It may build with cygwin but this has not been tested. If you get this working
with these platforms, please report in a ticket!</source>
          <target state="translated">はまだMinGWではビルドしていません。cygwinではビルドできるかもしれませんが、テストはしていません。もし、これらのプラットフォームで動作するようになったら、チケットで報告してください。</target>
        </trans-unit>
        <trans-unit id="c0105fb2a16ab02277e579cd37d38307d734cc35" translate="yes" xml:space="preserve">
          <source>end index</source>
          <target state="translated">エンドインデックス</target>
        </trans-unit>
        <trans-unit id="24d7cde2f7b74a74ae24dd233457289a2e70ea1f" translate="yes" xml:space="preserve">
          <source>for this key. Here
we had stored as values a tuple with the original string and its trie insertion
order:</source>
          <target state="translated">このキーに対応しています。ここでは、元の文字列とその挿入順序を持つタプルを値として格納していました。</target>
        </trans-unit>
        <trans-unit id="4a79533a2233d37071096ed5d29c1e9ac6cf66e6" translate="yes" xml:space="preserve">
          <source>get()</source>
          <target state="translated">ゲット()</target>
        </trans-unit>
        <trans-unit id="57b3198ec561cc8ba7f8f3463ae5ce122251a891" translate="yes" xml:space="preserve">
          <source>it to
re-load later. Here we just pickle to a string. You would typically pickle to a
file instead:</source>
          <target state="translated">を使って、後で再ロードするようにしてください。ここでは文字列をピックルしています。通常はファイルをピックルするのが一般的です。</target>
        </trans-unit>
        <trans-unit id="dd3297182bd934e5b975d272e648bb0bba704c84" translate="yes" xml:space="preserve">
          <source>method return the results as two-tuples of the</source>
          <target state="translated">メソッドは、結果を</target>
        </trans-unit>
        <trans-unit id="10503efecca5b35f7093f4d661d94c7e8a3631cd" translate="yes" xml:space="preserve">
          <source>methods are either
&lt;strong&gt;unicode&lt;/strong&gt; or &lt;strong&gt;bytes&lt;/strong&gt;, depending on a compile time settings (preprocessor
definition of</source>
          <target state="translated">メソッドは、コンパイル時の設定に応じて、&lt;strong&gt;Unicode&lt;/strong&gt;または&lt;strong&gt;バイトの&lt;/strong&gt;いずれかになります（プリプロセッサの定義</target>
        </trans-unit>
        <trans-unit id="e7e07db96173fcd579f4a7910b826b93a8cd1d37" translate="yes" xml:space="preserve">
          <source>of
course!):</source>
          <target state="translated">もちろんです!)。)</target>
        </trans-unit>
        <trans-unit id="a4561d3eb3b70a05c27c8ecfe455b03bd467781c" translate="yes" xml:space="preserve">
          <source>pickle</source>
          <target state="translated">漬物</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">ピップ</target>
        </trans-unit>
        <trans-unit id="6be2e6bc394bd46ea0d122608c74793b53c4b08a" translate="yes" xml:space="preserve">
          <source>pyahocorasick</source>
          <target state="translated">ぴょこぴょこ</target>
        </trans-unit>
        <trans-unit id="6cd73e638cb43aad4182b170751dce7d061b2c67" translate="yes" xml:space="preserve">
          <source>pyahocorasick is a fast and memory efficient library for exact or approximate multi-pattern string search.  With the ahocorasick.Automaton class, you can find multiple key strings occurrences at once in some input text.  You can use it as a plain dict-like Trie or convert a Trie to an automaton for efficient Aho-Corasick search.  Implemented in C and tested on Python 2.7 and 3.4+.  Works on Linux, Mac and Windows. BSD-3-clause license.</source>
          <target state="translated">pyahocorasickは、高速でメモリ効率の良いマルチパターン文字列検索ライブラリです。ahocorasick.Automatonクラスを使うと、入力テキスト中の複数の文字列を一度に検索することができます。このクラスは、プレーンなディクトのような Trie として使うこともできますし、Aho-Corasick の効率的な検索のために Trie をオートマトンに変換することもできます。C言語で実装されており、Python 2.7と3.4+でテスト済み。Linux,Mac,Windowsで動作。BSD-3-clauseライセンス。</target>
        </trans-unit>
        <trans-unit id="a5a2857f47a66a88e4fd3cde78c61c3de269fda8" translate="yes" xml:space="preserve">
          <source>pyahocorasick is available in two flavors:</source>
          <target state="translated">pyahococorasickは2種類のフレーバーがあります。</target>
        </trans-unit>
        <trans-unit id="4bf1502884f37a3b69d66f4b8d71dc7fe92c730b" translate="yes" xml:space="preserve">
          <source>seems unmaintained (last update in 2005).</source>
          <target state="translated">がメンテナンスされていないようです(2005年の最終更新)。</target>
        </trans-unit>
        <trans-unit id="8e2edce0d507e1297474f25c00cae94258db38d8" translate="yes" xml:space="preserve">
          <source>setup.py</source>
          <target state="translated">セットアップパイ</target>
        </trans-unit>
        <trans-unit id="bff5288d43b5b0b423a623fd27ab60ad387791d3" translate="yes" xml:space="preserve">
          <source>setuptools</source>
          <target state="translated">セットアップツール</target>
        </trans-unit>
        <trans-unit id="f32b67c7e26342af42efabc674d441dca0a281c5" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="translated">値打ち</target>
        </trans-unit>
        <trans-unit id="fd3e2ebf7bd54402b7055af9ea9a035226639dee" translate="yes" xml:space="preserve">
          <source>virtualenv</source>
          <target state="translated">仮想環境</target>
        </trans-unit>
        <trans-unit id="c5d8a7bf63d5bed0ba64a18928de900d025670bd" translate="yes" xml:space="preserve">
          <source>where a
trie key was found in the input string and the associated</source>
          <target state="translated">ここでは、入力文字列の中にトライキーが見つかり、それに関連する</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
