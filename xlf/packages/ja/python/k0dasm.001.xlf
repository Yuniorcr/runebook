<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/k0dasm/">
    <body>
      <group id="k0dasm">
        <trans-unit id="a36abd240d4fced49d5e073136718ece787d8d3c" translate="yes" xml:space="preserve">
          <source>) will still need to be resolved manually.</source>
          <target state="translated">）引き続き手動で解決する必要があります。</target>
        </trans-unit>
        <trans-unit id="5fda23d62015b99fb2a9f86b38bcdf2bdf7609c8" translate="yes" xml:space="preserve">
          <source>Author</source>
          <target state="translated">著者</target>
        </trans-unit>
        <trans-unit id="92e5f3778e6f41bd90cfde8d9ba37c348715ef61" translate="yes" xml:space="preserve">
          <source>Code / Data Separation.  Starting from the vectors at the bottom of memory, k0dasm uses recursive traversal disassembly to separate code from data.  This automates much of the disassembly process but indirect jumps (</source>
          <target state="translated">コード/データ分離。k0dasm は、メモリの底部にあるベクトルから開始して、再帰的なトラバーサル分解を使用してコードとデータを分離します。これは分解プロセスの多くを自動化しますが、間接的なジャンプ (</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">特徴</target>
        </trans-unit>
        <trans-unit id="e99f3ac80b2b2350f2e51853d26bb1447dd0afda" translate="yes" xml:space="preserve">
          <source>Identical Reassembly.  The assembly language output of k0dasm will assemble to a bit-for-bit exact copy of the original binary using as78k0.  This has been tested using several real firmware binaries.</source>
          <target state="translated">同一の再アセンブル。k0dasm のアセンブリ言語出力は、as78k0 を使用して元のバイナリのビットごとの正確なコピーにアセンブルします。これは、いくつかの実際のファームウェアバイナリを使用してテストされています。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="ef794089d65c29260193d1171143c513c37dd853" translate="yes" xml:space="preserve">
          <source>Mike Naberezny</source>
          <target state="translated">マイク・ナベレスヌイ</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="184aae6f77608718224c424e74717a6de967207d" translate="yes" xml:space="preserve">
          <source>Renesas (NEC) 78K0 disassembler</source>
          <target state="translated">ルネサス(NEC)78K0分解器</target>
        </trans-unit>
        <trans-unit id="c611e7531edc5ad06854e7aa8c370fa7c7df38ae" translate="yes" xml:space="preserve">
          <source>Symbol Generation.  k0dasm tries not to write hardcoded addresses in the output when possible.  It will automatically add symbols for hardware registers and vectors, other memory locations used, and will add labels for branches and subroutines.</source>
          <target state="translated">シンボル生成 k0dasmは可能な限りハードコードされたアドレスを出力に書かないようにします。ハードウェアレジスタやベクトル、使用される他のメモリ位置のシンボルを自動的に追加し、分岐やサブルーチンのラベルを追加します。</target>
        </trans-unit>
        <trans-unit id="887bd25b814c2ea33c2020e1ae14e08e3e41ab2c" translate="yes" xml:space="preserve">
          <source>The file is assumed to be a ROM image that should be aligned to the bottom of memory.  For example, if a 32K file is given, k0dasm will assume the image should be located at 0x0000-0x7FFF.  After loading the image, the disassembler reads the vectors and starts tracing instructions from their targets.</source>
          <target state="translated">ファイルは、メモリの一番下に配置されるべき ROM イメージであると仮定されます。例えば、32K のファイルが与えられた場合、k0dasm はイメージが 0x0000-0x7FFF にあると仮定します。イメージをロードした後、ディスアセンブラはベクトルを読み取り、ターゲットからのトレース命令を開始します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="83889f5663f7f860486c3e9bfe18177eff6db2cd" translate="yes" xml:space="preserve">
          <source>br ax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5839dc65065f115602262aa635fbf67791899625" translate="yes" xml:space="preserve">
          <source>k0dasm</source>
          <target state="translated">クダズム</target>
        </trans-unit>
        <trans-unit id="9e53567246f36fc5e20142d5b92badeead00b4a5" translate="yes" xml:space="preserve">
          <source>k0dasm accepts a plain binary file as input:</source>
          <target state="translated">k0dasmはプレーンなバイナリファイルを入力として受け付けます。</target>
        </trans-unit>
        <trans-unit id="adaa751be62a63905f2aad7b6a93a8813858eb2b" translate="yes" xml:space="preserve">
          <source>k0dasm is a disassembler for NEC 78K0 binaries that generates output compatible with the &lt;a href=&quot;http://shop-pdp.net/ashtml/as78k0.htm&quot;&gt;as78k0&lt;/a&gt; assembler.  It can be used to disassemble firmware for many 8-bit NEC 78K0 microcontrollers.  Note that NEC has several microcontroller families with similar names, such as 78K0S, that use different instruction sets.  These are not supported.</source>
          <target state="translated">k0dasmは、&lt;a href=&quot;http://shop-pdp.net/ashtml/as78k0.htm&quot;&gt;as78k0&lt;/a&gt;アセンブラと互換性のある出力を生成するNEC78K0バイナリの逆アセンブラです。多くの8ビットNEC78K0マイクロコントローラーのファームウェアを逆アセンブルするために使用できます。NECには、78K0Sなど、異なる命令セットを使用する同様の名前のマイクロコントローラファミリがいくつかあることに注意してください。これらはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c5d0b1d900eca0713b3f5d6e97a3ee2a22b52e92" translate="yes" xml:space="preserve">
          <source>k0dasm is written in Python and requires Python 3.4 or later.  Packages are &lt;a href=&quot;https://pypi.org/project/k0dasm/&quot;&gt;available&lt;/a&gt; on the Python Package Index (PyPI).  You can download them from there or you can use</source>
          <target state="translated">k0dasmはPythonで記述されており、Python3.4以降が必要です。パッケージはPythonPackage Index（PyPI）で&lt;a href=&quot;https://pypi.org/project/k0dasm/&quot;&gt;入手できます&lt;/a&gt;。そこからダウンロードするか、使用することができます</target>
        </trans-unit>
        <trans-unit id="2a2a6fadee5f4ff99025989aec099e65c85077c0" translate="yes" xml:space="preserve">
          <source>k0dasm was developed to disassemble the firmware of the &lt;a href=&quot;https://github.com/mnaberez/vwradio&quot;&gt;Volkswagen Premium V&lt;/a&gt; car radios made by Delco.  These radios use the undocumented NEC &amp;micro;PD78F0831Y microcontroller, which is similar to the &lt;a href=&quot;https://web.archive.org/web/20180328161019/https://www.renesas.com/en-us/doc/DocumentServer/021/U13892EJ2V0UM00.pdf&quot;&gt;&amp;micro;PD78F0833Y&lt;/a&gt;.  A companion program, &lt;a href=&quot;https://github.com/mnaberez/k0emu&quot;&gt;k0emu&lt;/a&gt;, is a 78K0 emulator developed for the same project.</source>
          <target state="translated">k0dasmは、デルコ製の&lt;a href=&quot;https://github.com/mnaberez/vwradio&quot;&gt;フォルクスワーゲンプレミアムV&lt;/a&gt;カーラジオのファームウェアを分解するために開発されました。これらの無線機は、文書化されていないNEC &amp;micro;PD78F0831Yマイクロコントローラーを使用します。これは&lt;a href=&quot;https://web.archive.org/web/20180328161019/https://www.renesas.com/en-us/doc/DocumentServer/021/U13892EJ2V0UM00.pdf&quot;&gt;&amp;micro;PD78F0833Yに&lt;/a&gt;類似しています。コンパニオンプログラム&lt;a href=&quot;https://github.com/mnaberez/k0emu&quot;&gt;k0emu&lt;/a&gt;は、同じプロジェクト用に開発された78K0エミュレーターです。</target>
        </trans-unit>
        <trans-unit id="e1f1eb75c7bbf4dc71204486628790128a241e4f" translate="yes" xml:space="preserve">
          <source>pip</source>
          <target state="translated">ピップ</target>
        </trans-unit>
        <trans-unit id="4fdadaadb6acd13e89b1e933e596f13897f901f6" translate="yes" xml:space="preserve">
          <source>to automatically install or upgrade</source>
          <target state="translated">自動的にインストールまたはアップグレードするには</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
