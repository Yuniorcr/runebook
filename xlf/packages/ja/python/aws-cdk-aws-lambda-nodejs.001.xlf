<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/aws-cdk-aws-lambda-nodejs/">
    <body>
      <group id="aws-cdk-aws-lambda-nodejs">
        <trans-unit id="58b63e273b964039d6ef432a415df3f177c818e5" translate="yes" xml:space="preserve">
          <source>---</source>
          <target state="translated">---</target>
        </trans-unit>
        <trans-unit id="5795655f7099122749abab518defa40e8f577550" translate="yes" xml:space="preserve">
          <source>All other properties of &lt;code&gt;lambda.Function&lt;/code&gt; are supported, see also the &lt;a href=&quot;https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda&quot;&gt;AWS Lambda construct library&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;lambda.Function&lt;/code&gt; の他のすべてのプロパティがサポートされています。AWSLambda &lt;a href=&quot;https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda&quot;&gt;構成ライブラリ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9276dcebe68a8a88eb119fcf4b29ee42dbb75afc" translate="yes" xml:space="preserve">
          <source>Alternatively, an entry file and handler can be specified:</source>
          <target state="translated">あるいは、エントリファイルとハンドラを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="fe411f3505b8a51d0edd0cfeae8bbddc8954aeef" translate="yes" xml:space="preserve">
          <source>Amazon Lambda Node.js Library</source>
          <target state="translated">Amazon Lambda Node.js ライブラリ</target>
        </trans-unit>
        <trans-unit id="24dcdfe14d89a9025c5f1251a50a23a33d095702" translate="yes" xml:space="preserve">
          <source>By default, all node modules are bundled except for &lt;code&gt;aws-sdk&lt;/code&gt;. This can be configured by specifying
the &lt;code&gt;externalModules&lt;/code&gt; prop.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;aws-sdk&lt;/code&gt; を除くすべてのノードモジュールがバンドルされています。これは、 &lt;code&gt;externalModules&lt;/code&gt; プロパティを指定することで構成できます。</target>
        </trans-unit>
        <trans-unit id="2c64c152d95e133825bc36ebdd93dcd5bd9d7260" translate="yes" xml:space="preserve">
          <source>By default, all node modules referenced in your Lambda code will be bundled by Parcel.
Use the &lt;code&gt;nodeModules&lt;/code&gt; prop to specify a list of modules that should not be bundled
but instead included in the &lt;code&gt;node_modules&lt;/code&gt; folder of the Lambda package. This is useful
when working with native dependencies or when Parcel fails to bundle a module.</source>
          <target state="translated">デフォルトでは、Lambdaコードで参照されるすべてのノードモジュールがParcelにバンドルされます。 &lt;code&gt;nodeModules&lt;/code&gt; プロパティを使用して、バンドルするのではなく、Lambdaパッケージの &lt;code&gt;node_modules&lt;/code&gt; フォルダーに含める必要があるモジュールのリストを指定します。これは、ネイティブの依存関係を操作する場合、またはParcelがモジュールのバンドルに失敗した場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="16be50ff4682c025e368afca8af7638ef4a4387d" translate="yes" xml:space="preserve">
          <source>By default, the construct will use the name of the defining file and the construct's id to look
up the entry file:</source>
          <target state="translated">デフォルトでは、コンストラクトは定義ファイルの名前とコンストラクトのidを使用してエントリファイルを検索します。</target>
        </trans-unit>
        <trans-unit id="bf1ce9d0ae9f2be9d1ced2d965ea8c704ae8c699" translate="yes" xml:space="preserve">
          <source>CDK Constructs for AWS Lambda in Node.js</source>
          <target state="translated">Node.jsのAWS LambdaのためのCDKコンストラクト</target>
        </trans-unit>
        <trans-unit id="3675011cec878c3740e77f768578f298e39a2567" translate="yes" xml:space="preserve">
          <source>Configuring Babel with Parcel is possible via a &lt;code&gt;.babelrc&lt;/code&gt; or a &lt;code&gt;babel&lt;/code&gt; config in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">ParcelでBabelを構成するには、 &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;.babelrc&lt;/code&gt; または &lt;code&gt;babel&lt;/code&gt; 構成を使用します。</target>
        </trans-unit>
        <trans-unit id="8cb175f39c41dfa100b9298d0997644a86e80d58" translate="yes" xml:space="preserve">
          <source>Configuring Parcel</source>
          <target state="translated">パーセルの設定</target>
        </trans-unit>
        <trans-unit id="a53a6d0015c9fb70a39b58589ef90c8790ad40cc" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;NodejsFunction&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;NodejsFunction&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="548bcef531f24042c1657c9c7bd347a1802c9d7a" translate="yes" xml:space="preserve">
          <source>Externals</source>
          <target state="translated">外部</target>
        </trans-unit>
        <trans-unit id="7529436495f41b82b037ccc5c12868c690fa34aa" translate="yes" xml:space="preserve">
          <source>For macOS the recommendend approach is to install Parcel as Docker volume performance is really poor.</source>
          <target state="translated">macOSの場合、Dockerボリュームのパフォーマンスが本当に悪いので、Parcelをインストールすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="76c66b321778edb94d8b3338a340a8561aeac7c2" translate="yes" xml:space="preserve">
          <source>If Parcel v2 is available it will be used to bundle your code in your environment. Otherwise,
bundling will happen in a &lt;a href=&quot;https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x&quot;&gt;Lambda compatible Docker container&lt;/a&gt;.</source>
          <target state="translated">Parcel v2が利用可能な場合、それを使用して環境にコードをバンドルします。そうしないと、バンドルは&lt;a href=&quot;https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x&quot;&gt;Lambda互換のDockerコンテナで行われ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b5bd306138d7db02dd179a58e4120116e262529c" translate="yes" xml:space="preserve">
          <source>Install modules</source>
          <target state="translated">モジュールのインストール</target>
        </trans-unit>
        <trans-unit id="a93a8fad5e2475a93a5b27709ab8b83ee5850cf5" translate="yes" xml:space="preserve">
          <source>Local bundling</source>
          <target state="translated">ローカルバンドル</target>
        </trans-unit>
        <trans-unit id="2b8afe313b4f360463019224d5515d7614fc64ce" translate="yes" xml:space="preserve">
          <source>Node.js Function</source>
          <target state="translated">Node.js関数</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">orr</target>
        </trans-unit>
        <trans-unit id="9a0012f840b496b36e9af0df9accd8112622aa8e" translate="yes" xml:space="preserve">
          <source>Parcel transpiles your code (every internal module) with &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;@babel/preset-env&lt;/a&gt; and uses the
runtime version of your Lambda function as target.</source>
          <target state="translated">Parcelは&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;@ babel /&lt;/a&gt; preset -envを使用してコード（すべての内部モジュール）をトランスパイルし、ターゲットとしてLambda関数のランタイムバージョンを使用します。</target>
        </trans-unit>
        <trans-unit id="6075431affacbe07ce9149b8f60d62d9fc494fb0" translate="yes" xml:space="preserve">
          <source>Parcel v2 can be installed with:</source>
          <target state="translated">Parcel v2は一緒にインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="32929d4172783d036384d81f3979c9b3eb8af2b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodejsFunction&lt;/code&gt; construct automatically &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html&quot;&gt;reuses existing connections&lt;/a&gt;
when working with the AWS SDK for JavaScript. Set the &lt;code&gt;awsSdkConnectionReuse&lt;/code&gt; prop to &lt;code&gt;false&lt;/code&gt; to disable it.</source>
          <target state="translated">&lt;code&gt;NodejsFunction&lt;/code&gt; の構築物は、自動的に&lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html&quot;&gt;既存の接続を再利用し&lt;/a&gt; たJavaScript用AWS SDKで作業するとき。 &lt;code&gt;awsSdkConnectionReuse&lt;/code&gt; プロパティを &lt;code&gt;false&lt;/code&gt; に設定して無効にします。</target>
        </trans-unit>
        <trans-unit id="2384a3d1b2191d72845aeaec8eda0416912060d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodejsFunction&lt;/code&gt; construct exposes some &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt; options via properties: &lt;code&gt;minify&lt;/code&gt;, &lt;code&gt;sourceMaps&lt;/code&gt; and &lt;code&gt;cacheDir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NodejsFunction&lt;/code&gt; の構築物は、いくつか公開され&lt;a href=&quot;https://parceljs.org/&quot;&gt;小包&lt;/a&gt;：プロパティを経由してオプションを &lt;code&gt;minify&lt;/code&gt; 、 &lt;code&gt;sourceMaps&lt;/code&gt; と &lt;code&gt;cacheDir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dbcc18ab4e657e549e75fa1c70952b084642819" translate="yes" xml:space="preserve">
          <source>The APIs of higher level constructs in this module are experimental and under active development. They are subject to non-backward compatible changes or removal in any future version. These are not subject to the &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; model and breaking changes will be announced in the release notes. This means that while you may use them, you may need to update your source code when upgrading to a newer version of this package.</source>
          <target state="translated">このモジュールのより高いレベルの構成のAPIは実験的であり、活発に開発中です。将来のバージョンでは、下位互換性のない変更または削除の対象となります。これらは&lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニング&lt;/a&gt;モデルの対象ではなく、重大な変更はリリースノートで発表されます。つまり、それらを使用することはできますが、このパッケージの新しいバージョンにアップグレードするときに、ソースコードを更新する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="2c7b606236a07ec9fdfb8c85e13cade1fe722e93" translate="yes" xml:space="preserve">
          <source>The modules listed in &lt;code&gt;nodeModules&lt;/code&gt; must be present in the &lt;code&gt;package.json&lt;/code&gt;'s dependencies. The
same version will be used for installation. If a lock file is detected (&lt;code&gt;package-lock.json&lt;/code&gt; or
&lt;code&gt;yarn.lock&lt;/code&gt;) it will be used along with the right installer (&lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;nodeModules&lt;/code&gt; にリストされているモジュールは、 &lt;code&gt;package.json&lt;/code&gt; の依存関係に存在している必要があります。インストールには同じバージョンが使用されます。ロックファイルが検出された場合（ &lt;code&gt;package-lock.json&lt;/code&gt; または &lt;code&gt;yarn.lock&lt;/code&gt; ）、それは適切なインストーラー（ &lt;code&gt;npm&lt;/code&gt; または &lt;code&gt;yarn&lt;/code&gt; ）と共に使用されます。</target>
        </trans-unit>
        <trans-unit id="d1cfee13775a080a95a55f2e8d7f2f0ec9f8991c" translate="yes" xml:space="preserve">
          <source>This file is used as &quot;entry&quot; for &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;. This means that your code is
automatically transpiled and bundled whether it's written in JavaScript or TypeScript.</source>
          <target state="translated">このファイルは、&lt;a href=&quot;https://parceljs.org/&quot;&gt;パーセルの&lt;/a&gt;「エントリ」として使用されます。これは、コードがJavaScriptで記述されていてもTypeScriptで記述されていても、コードは自動的に変換され、バンドルされることを意味します。</target>
        </trans-unit>
        <trans-unit id="3478f408f645be3df5912e1f38688ce394448d20" translate="yes" xml:space="preserve">
          <source>This library provides constructs for Node.js Lambda functions.</source>
          <target state="translated">このライブラリはNode.jsのLambda関数のためのコンストラクトを提供します。</target>
        </trans-unit>
        <trans-unit id="f96123128e1a1023019977f9f0fb79219187a257" translate="yes" xml:space="preserve">
          <source>To force bundling in a Docker container, set the &lt;code&gt;forceDockerBundling&lt;/code&gt; prop to &lt;code&gt;true&lt;/code&gt;. This
is useful if your function relies on node modules that should be installed (&lt;code&gt;nodeModules&lt;/code&gt; prop, see &lt;a href=&quot;#install-modules&quot;&gt;above&lt;/a&gt;) in a Lambda compatible environment. This is usually the
case with modules using native dependencies.</source>
          <target state="translated">Dockerコンテナでバンドルを強制するには、 &lt;code&gt;forceDockerBundling&lt;/code&gt; プロップを &lt;code&gt;true&lt;/code&gt; に設定します。これは、関数がLambda互換環境にインストールする必要があるノードモジュール（ &lt;code&gt;nodeModules&lt;/code&gt; prop、&lt;a href=&quot;#install-modules&quot;&gt;上記を&lt;/a&gt;参照）に依存している場合に役立ちます。これは通常、ネイティブの依存関係を使用するモジュールの場合です。</target>
        </trans-unit>
        <trans-unit id="cba9ffdd1f430eaff38909df65fd3f73edb05620" translate="yes" xml:space="preserve">
          <source>To use this module, you will need to have Docker installed.</source>
          <target state="translated">このモジュールを使用するには、Dockerがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="fcee0bf341086e2cd8b948161e27973343c45662" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;buildArgs&lt;/code&gt; prop to pass build arguments when building the bundling image:</source>
          <target state="translated">バンドルイメージのビルド時に &lt;code&gt;buildArgs&lt;/code&gt; プロップを使用してビルド引数を渡します。</target>
        </trans-unit>
        <trans-unit id="d0d1b18f10106351ffc86685b850ccc783891846" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;containerEnvironment&lt;/code&gt; prop to pass environments variables to the Docker container
running Parcel:</source>
          <target state="translated">&lt;code&gt;containerEnvironment&lt;/code&gt; プロップを使用して、Parcelを実行しているDockerコンテナーに環境変数を渡します。</target>
        </trans-unit>
        <trans-unit id="521bac9f90defc7164b2074837c8624e98766b62" translate="yes" xml:space="preserve">
          <source>Working with modules</source>
          <target state="translated">モジュールを使った作業</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
