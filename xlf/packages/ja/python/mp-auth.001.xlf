<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/mp-auth/">
    <body>
      <group id="mp-auth">
        <trans-unit id="0c77360d80e4bb131a23da58c58c5db89f1b3d32" translate="yes" xml:space="preserve">
          <source>Add Multi-provider auth for various providers</source>
          <target state="translated">様々なプロバイダのためのマルチプロバイダ認証の追加</target>
        </trans-unit>
        <trans-unit id="db3bc6c39fe038a45fb86f895589f506bf0c2499" translate="yes" xml:space="preserve">
          <source>Install the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)</source>
          <target state="translated">Django RESTフレームワーク用のMultiprovider認証ミドルウェアのインストール(Python 3が必要です</target>
        </trans-unit>
        <trans-unit id="f365c609b0e3df72d19f5307e8b50df05266a6e7" translate="yes" xml:space="preserve">
          <source>Many authentication middleware packages have been writted for Django REST Framework with
support for OAuth2 opaque or JWT token. Most popular ones are listed with a short description
on &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt;. But all of them that support opaque tokens
require access to the Identity Provider database to verify the access tokens. Or they cannot be
stack up with other authentication classes to authenticate a bearer token against multiple
Identity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all
Identity Providers that issue JWT tokens and &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; that issues opaque access tokens. Support
for other Identity Providers can easily be added by creating a new backend in &lt;code&gt;mp_auth/backends&lt;/code&gt;.
Each backend can be used separately as an Django REST Framework authentication class, or can be a part of
list of authentication class that Django REST Framework will go through to authenticate an HTTP request.
&lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; is a special authentication class that calls all
authentication classes configured in &lt;code&gt;settings.py&lt;/code&gt;.</source>
          <target state="translated">多くの認証ミドルウェアパッケージは、OAuth2不透明またはJWTトークンをサポートするDjango RESTFramework用に作成されています。最も人気のあるものは、&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework-Authentication&lt;/a&gt;に関する簡単な説明とともにリストされています。ただし、不透明なトークンをサポートするものはすべて、アクセストークンを検証するためにIDプロバイダーデータベースにアクセスする必要があります。または、他の認証クラスとスタックして、複数のIDプロバイダーに対してベアラートークンを認証することはできません。マルチプロバイダー認証ミドルウェアがギャップを埋めます。 JWTトークンを発行するすべてのIDプロバイダーと不透明なアクセストークンを発行する&lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;をサポートします。 &lt;code&gt;mp_auth/backends&lt;/code&gt; に新しいバックエンドを作成することで、他のIDプロバイダーのサポートを簡単に追加できます。。各バックエンドは、Django REST Framework認証クラスとして個別に使用することも、Django RESTFrameworkがHTTPリクエストを認証するために通過する認証クラスのリストの一部にすることもできます。 &lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; は、 &lt;code&gt;settings.py&lt;/code&gt; で構成されたすべての認証クラスを呼び出す特別な認証クラスです。</target>
        </trans-unit>
        <trans-unit id="ab86ee1d35d4278b22e567dc8690b42b93f4cfb5" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication</source>
          <target state="translated">マルチプロバイダ認証</target>
        </trans-unit>
        <trans-unit id="85545c3c5d03b98f9f0c66cdebd184642f0ee177" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication is an easy to setup authentication middleware with support for
&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; and multiple OAuth2/OIDC Identity Providers that issue opaque
or JWT access tokens, e.g. &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;, &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;, etc.</source>
          <target state="translated">マルチプロバイダー認証は、&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django RESTフレームワーク&lt;/a&gt;と、&lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;、&lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;などの不透明またはJWTアクセストークンを発行する複数のOAuth2 / OIDC IDプロバイダーをサポートする、セットアップが簡単な認証ミドルウェアです 。</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">根拠</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">セットアップ</target>
        </trans-unit>
        <trans-unit id="f7347011dad922ecb28d1f9f97cae602c60f8dc5" translate="yes" xml:space="preserve">
          <source>Then any view can be protected by &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, or, if you want to
authenticate an HTTP request against both &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, by
&lt;code&gt;MultiproviderAuthentication&lt;/code&gt; class.</source>
          <target state="translated">次に、 &lt;code&gt;JWTAuthentication&lt;/code&gt; または &lt;code&gt;GlobusAuthentication&lt;/code&gt; によって、または &lt;code&gt;JWTAuthentication&lt;/code&gt; または &lt;code&gt;GlobusAuthentication&lt;/code&gt; の両方に対してHTTP要求を認証する場合は、 &lt;code&gt;MultiproviderAuthentication&lt;/code&gt; クラスによって 任意のビューを保護できます。</target>
        </trans-unit>
        <trans-unit id="a1220b82c1195db067a1119e19e5d9fe237de6f8" translate="yes" xml:space="preserve">
          <source>and in &lt;code&gt;settings.py&lt;/code&gt; set the following:</source>
          <target state="translated">そして &lt;code&gt;settings.py&lt;/code&gt; で以下を設定します：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
