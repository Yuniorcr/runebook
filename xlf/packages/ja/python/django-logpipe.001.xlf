<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/django-logpipe/">
    <body>
      <group id="django-logpipe">
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">、および</target>
        </trans-unit>
        <trans-unit id="903765c186e31c456af2dd0a8b1af35e27926e69" translate="yes" xml:space="preserve">
          <source>, which allows the consumer to explicitly ignore specific message types silently. This helps to filter log noise (messages that a consumer really doesn&amp;rsquo;t care about) from actual errors (messages a consumer is skipping, but should be processing).</source>
          <target state="translated">、これにより、コンシューマーは特定のメッセージタイプをサイレントに明示的に無視できます。これは、ログノイズ（コンシューマーが実際に気にしないメッセージ）を実際のエラー（コンシューマーがスキップしているが処理する必要があるメッセージ）からフィルタリングするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7e0b7dff883d6861e892a62c5d13fdeee2afeb2b" translate="yes" xml:space="preserve">
          <source>.
1. Must have a</source>
          <target state="translated">。1.持っている必要があります</target>
        </trans-unit>
        <trans-unit id="e2d7ba2bf4939b39661ef6382455724c12db2b73" translate="yes" xml:space="preserve">
          <source>. This class method will be called with message data as keyword arguments directly before instantiating the serializer. It should lookup and return the related object (if one exists) so that it can be passed to the serializer&amp;rsquo;s</source>
          <target state="translated">。このクラスメソッドは、シリアライザーをインスタンス化する直前に、メッセージデータをキーワード引数として呼び出されます。シリアライザーに渡すことができるように、関連するオブジェクト（存在する場合）を検索して返す必要があります</target>
        </trans-unit>
        <trans-unit id="88ab9fedb07f1ab06d98fe20e0aa97c4fe67882d" translate="yes" xml:space="preserve">
          <source>1. Must be either a subclass of</source>
          <target state="translated">1.のサブクラスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">追加</target>
        </trans-unit>
        <trans-unit id="f21c4dfb46a3cd544ca1b7134542dcdc6e71187b" translate="yes" xml:space="preserve">
          <source>Add Django 2.1 to tox test suite.</source>
          <target state="translated">tox テストスイートに Django 2.1 を追加。</target>
        </trans-unit>
        <trans-unit id="2e7d120ba3320d9e3ba55ac298fb7121216ba4be" translate="yes" xml:space="preserve">
          <source>Add connection settings to your</source>
          <target state="translated">接続設定を追加する</target>
        </trans-unit>
        <trans-unit id="dbd3d7c17cc0b57d2980784d2b44e7de422bd091" translate="yes" xml:space="preserve">
          <source>Add new method:</source>
          <target state="translated">新しいメソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="5c9939d96ec5030765ea376c476f6394ff1b1c68" translate="yes" xml:space="preserve">
          <source>Add support for Python 3.7.</source>
          <target state="translated">Python 3.7のサポートを追加。</target>
        </trans-unit>
        <trans-unit id="144c7a6c50347e783af6e04fe897ccdc25cdeff1" translate="yes" xml:space="preserve">
          <source>Add support for python-kafka 1.4.4.</source>
          <target state="translated">python-kafka 1.4.4 のサポートを追加。</target>
        </trans-unit>
        <trans-unit id="74e23423b466ccf9447a0d5a069e2d3feb919c8f" translate="yes" xml:space="preserve">
          <source>Added concept of message types.</source>
          <target state="translated">メッセージタイプの概念を追加しました。</target>
        </trans-unit>
        <trans-unit id="e7db4f6c303e2a63a9d4926308603e481bf8fb87" translate="yes" xml:space="preserve">
          <source>Added support for AWS Kinesis.</source>
          <target state="translated">AWS Kinesisのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="43ddd06cc437eac739c0896b99458abfb6684f35" translate="yes" xml:space="preserve">
          <source>After some amount of time (when you are sure no old-version messages still exist in Kafka), remove the code related to the old schema version.</source>
          <target state="translated">ある程度の時間が経過した後(Kafka に古いバージョンのメッセージがまだ存在しないことを確認したら)、古いスキーマのバージョンに関連するコードを削除してください。</target>
        </trans-unit>
        <trans-unit id="e26792af16c97fd3c5d213187b0b33cbfe98b605" translate="yes" xml:space="preserve">
          <source>Below is a sample Django model and it&amp;rsquo;s accompanying serializer.</source>
          <target state="translated">以下は、サンプルのDjangoモデルとそれに付随するシリアライザーです。</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">変更履歴</target>
        </trans-unit>
        <trans-unit id="e38de8a0028066c885206cb0346572995a1642d3" translate="yes" xml:space="preserve">
          <source>Dealing with Schema Changes</source>
          <target state="translated">スキーマの変更への対応</target>
        </trans-unit>
        <trans-unit id="9cd780126a6cbee99f4a1663a13604d9125012dd" translate="yes" xml:space="preserve">
          <source>Finally, after all the old version 1 messages have been dropped (by log compaction), the</source>
          <target state="translated">最後に、すべての古いバージョン1のメッセージが(ログ圧縮によって)落とされた後に</target>
        </trans-unit>
        <trans-unit id="627b6464f73da86d7de18686941d7b09fc58adb6" translate="yes" xml:space="preserve">
          <source>Finally, consumers can be registered and run automatically by the build in</source>
          <target state="translated">最後に、消費者を登録して自動的に実行することができます。</target>
        </trans-unit>
        <trans-unit id="21aa4df0e5ee730531b02a18b193bd8447274a3d" translate="yes" xml:space="preserve">
          <source>Fix compatibility issue with Django 3.0</source>
          <target state="translated">Django 3.0 との互換性の問題を修正</target>
        </trans-unit>
        <trans-unit id="5f4d11805dd6ed2de8e4b66c76b7fb48b5493c4d" translate="yes" xml:space="preserve">
          <source>For example, if we wanted to require an email field on the</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="68edffd510af78279e051f946b30e579dd35c521" translate="yes" xml:space="preserve">
          <source>If you have multiple data-types in a single topic or stream, you can consume them all by registering multiple serializers with the consumer.</source>
          <target state="translated">1つのトピックやストリームに複数のデータ型がある場合は、複数のシリアライザをコンシューマに登録することで、それらをすべて消費することができます。</target>
        </trans-unit>
        <trans-unit id="271836dc950be42ea67e7e4d2f48692567828398" translate="yes" xml:space="preserve">
          <source>If you have multiple streams or topics to watch, make a consumers for each, and watch them all simultaneously in the same process by using a MultiConsumer.</source>
          <target state="translated">視聴するストリームやトピックが複数ある場合は、それぞれにコンシューマを作成し、MultiConsumerを使用して同じプロセスですべてを同時に視聴します。</target>
        </trans-unit>
        <trans-unit id="124d52fb04f2c7f1db15f3ed0feaccbb45b60443" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using AWS Kinesis instead of Kafka, it will look like this:</source>
          <target state="translated">Kafkaの代わりにAWSKinesisを使用している場合は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="1a83b2ad6d7db2286ab50ca7a435e58c25172b5b" translate="yes" xml:space="preserve">
          <source>Improve log messages and levels for invalid or unknown messages.</source>
          <target state="translated">無効なメッセージや不明なメッセージのログメッセージとレベルを改善しました。</target>
        </trans-unit>
        <trans-unit id="8d977302311c1f20782e75d4f1942383b9f18b74" translate="yes" xml:space="preserve">
          <source>Improved logic for detecting the current AWS region.</source>
          <target state="translated">現在のAWSリージョンを検出するロジックを改善しました。</target>
        </trans-unit>
        <trans-unit id="9a3a1734e49dbe1a6c8b63692409a3b98786a172" translate="yes" xml:space="preserve">
          <source>In KinesisOffset model, track the AWS region for a stream. This allows a single database to subscribe to multiple streams in different regions, even it they have the same name.</source>
          <target state="translated">KinesisOffsetモデルでは、ストリームのAWSリージョンを追跡します。これにより、同じ名前のストリームであっても、1つのデータベースで複数のストリームを異なるリージョンにサブスクライブすることができます。</target>
        </trans-unit>
        <trans-unit id="970d9459b2c3bd1aab215bea63f715a31dc6bf75" translate="yes" xml:space="preserve">
          <source>Initial release.</source>
          <target state="translated">初回リリース。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">国際化</target>
        </trans-unit>
        <trans-unit id="0e921845ded85f4ca71612e4983252e0fd2d93a9" translate="yes" xml:space="preserve">
          <source>KEY_FIELD</source>
          <target state="translated">キーフィールド</target>
        </trans-unit>
        <trans-unit id="9adf8aa78ce63d42002629004f9d8c5d6e3a24c6" translate="yes" xml:space="preserve">
          <source>MESSAGE_TYPE</source>
          <target state="translated">メッセージタイプ</target>
        </trans-unit>
        <trans-unit id="4276e29a02fd8f6945c318a424eea128da500f12" translate="yes" xml:space="preserve">
          <source>More robustly handle exceptions thrown by a consumer serializer&amp;rsquo;s</source>
          <target state="translated">コンシューマーシリアライザーによってスローされた例外をより堅牢に処理します</target>
        </trans-unit>
        <trans-unit id="1b6da58d60c7bcb0b62a3c84017df86a6a8a4e4e" translate="yes" xml:space="preserve">
          <source>Move data around between Python services using Kafka and/or AWS Kinesis and Django Rest Framework serializers.</source>
          <target state="translated">KafkaやAWS Kinesis、Django Rest Frameworkのシリアライザを使用して、Pythonサービス間でデータを移動します。</target>
        </trans-unit>
        <trans-unit id="9b1fcbda693f085c4d6d33acbf333e420ba23fca" translate="yes" xml:space="preserve">
          <source>No changes.</source>
          <target state="translated">変化はありません。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">なし</target>
        </trans-unit>
        <trans-unit id="b05bfe270cc8d7c863fcaef41cec57b4a874688f" translate="yes" xml:space="preserve">
          <source>Once a serializer exists, you can send a message to Kafka by creating Producer object and calling the</source>
          <target state="translated">シリアライザが存在したら、Producer オブジェクトを作成して</target>
        </trans-unit>
        <trans-unit id="8c41ae88467fe5bbad09fcd488662b25c3ec5333" translate="yes" xml:space="preserve">
          <source>Person</source>
          <target state="translated">Person</target>
        </trans-unit>
        <trans-unit id="2d4de422295bafb2c7667583c219074d358b9914" translate="yes" xml:space="preserve">
          <source>PersonSerializerV1</source>
          <target state="translated">PersonSerializerV1</target>
        </trans-unit>
        <trans-unit id="4afc4c099bd08e0d44d6982b97152facf84d0c8d" translate="yes" xml:space="preserve">
          <source>Receiving Messages</source>
          <target state="translated">メッセージの受信</target>
        </trans-unit>
        <trans-unit id="8611e40d1056868462071ad966dca76f00201f08" translate="yes" xml:space="preserve">
          <source>Run migrations. This will create the model used to store Kafka log position offsets.:</source>
          <target state="translated">移行を実行します。これは、Kafka ログの位置オフセットを保存するためのモデルを作成します。</target>
        </trans-unit>
        <trans-unit id="6fa3703a1bdf2d255844c1967f71f224913cffac" translate="yes" xml:space="preserve">
          <source>Schema changes are handled using the</source>
          <target state="translated">スキーマの変更は</target>
        </trans-unit>
        <trans-unit id="f0662ea4ce2ba05b7f07ad1199c4b10caa58025d" translate="yes" xml:space="preserve">
          <source>Sending Messages</source>
          <target state="translated">メッセージの送信</target>
        </trans-unit>
        <trans-unit id="71796031218483adb9338df6ac1fe8ad1217e178" translate="yes" xml:space="preserve">
          <source>Serializers</source>
          <target state="translated">シリアライザ</target>
        </trans-unit>
        <trans-unit id="845c23acd2d57e4a45e5f9d2ddd30f9cfc985ce9" translate="yes" xml:space="preserve">
          <source>The above sample code would result in the following message being sent to the Kafka topic named</source>
          <target state="translated">上記のサンプルコードでは、次のようなメッセージが Kafka トピックに送信されます。</target>
        </trans-unit>
        <trans-unit id="ffa25f9133ff3c7db5f21fa0df07b10a5586ea06" translate="yes" xml:space="preserve">
          <source>The consumer object uses Django REST Framework&amp;rsquo;s built-in</source>
          <target state="translated">コンシューマーオブジェクトは、Django RESTFrameworkの組み込みを使用します</target>
        </trans-unit>
        <trans-unit id="1d106a3b7b84e0ca3d5e70cafd0526170152e47c" translate="yes" xml:space="preserve">
          <source>The consumers will now use the appropriate serializer for the message version. Second, we need to update producer code to being using schema version 2.:</source>
          <target state="translated">コンシューマは、メッセージのバージョンに応じた適切なシリアライザを使用するようになりました。第二に、スキーマバージョン2を使用しているプロデューサーコードを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="b47903da5844aaf66338046865341227ddf794af" translate="yes" xml:space="preserve">
          <source>The first step in either sending or receiving messages with</source>
          <target state="translated">でメッセージを送受信する場合の最初のステップは</target>
        </trans-unit>
        <trans-unit id="c22aa8ea3bbd87b3fdb24798299beac0d377babf" translate="yes" xml:space="preserve">
          <source>This library serves as a universal pipe for moving data around between Django applications and services. It is build on
top of &lt;a href=&quot;https://boto3.readthedocs.io/en/latest/&quot;&gt;Boto3&lt;/a&gt;, &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;, &lt;a href=&quot;https://github.com/dpkp/kafka-python&quot;&gt;kafka-python&lt;/a&gt;, and &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt;.</source>
          <target state="translated">このライブラリは、Djangoアプリケーションとサービス間でデータを移動するためのユニバーサルパイプとして機能します。これは、&lt;a href=&quot;https://boto3.readthedocs.io/en/latest/&quot;&gt;Boto3&lt;/a&gt;、&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;、kafka &lt;a href=&quot;https://github.com/dpkp/kafka-python&quot;&gt;-python&lt;/a&gt;、および&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django &lt;/a&gt;RESTFrameworkの上に構築されています。</target>
        </trans-unit>
        <trans-unit id="bee3d83cc56cf9bb415862ee5d7d2fa680b12552" translate="yes" xml:space="preserve">
          <source>To perform a backwards-incompatible schema change, the following steps should be performed.</source>
          <target state="translated">下位互換性のないスキーマ変更を実行するには、以下の手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="44a75fd9ae981e96331b4fd634c35934f291b0eb" translate="yes" xml:space="preserve">
          <source>To processing incoming messages, we can reuse the same model and serializer. We just need to instantiate a Consumer object.</source>
          <target state="translated">受信メッセージの処理には、同じモデルとシリアライザを再利用することができます。コンシューマーオブジェクトのインスタンスを作成するだけです。</target>
        </trans-unit>
        <trans-unit id="760d77319d33dd98f7de4a21a9beebd585f4f1bb" translate="yes" xml:space="preserve">
          <source>Update consumer code to have knowledge of the new schema version.</source>
          <target state="translated">新しいスキーマのバージョンの知識を持つために、コンシューマコードを更新します。</target>
        </trans-unit>
        <trans-unit id="e9d9bf0c4f187aed5459d99826260d2d90fbd55e" translate="yes" xml:space="preserve">
          <source>Update producer code to being sending the new schema version.</source>
          <target state="translated">プロデューサコードを更新し、新しいスキーマのバージョンを送信するようにしました。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="340d33e2025ffe706ac456af47f78712a84bc2c1" translate="yes" xml:space="preserve">
          <source>Use the</source>
          <target state="translated">を使用しています。</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="05d85e7d0002fe23af087c94dcb76e1cd32d04dc" translate="yes" xml:space="preserve">
          <source>You can also support multiple incompatible version of message types by defining a serializer for each message type version and registering them all with the consumer.</source>
          <target state="translated">また、メッセージタイプのバージョンごとにシリアライザを定義し、それらをすべてコンシューマに登録することで、互換性のない複数のバージョンのメッセージタイプにも対応することができます。</target>
        </trans-unit>
        <trans-unit id="ff69380b6a64172adf8d15c916fbc2984553e8b2" translate="yes" xml:space="preserve">
          <source>argument during initialization. If no object exists yet (the message is representing a new object), it should return</source>
          <target state="translated">引数を使用してください。オブジェクトがまだ存在しない場合(メッセージが新しいオブジェクトを表している場合)、それは</target>
        </trans-unit>
        <trans-unit id="93d4e6db7d8ed0b59ae019e317a84d1c04c7b2e9" translate="yes" xml:space="preserve">
          <source>attribute defined on the class, representing the name of the field to use as the message key. The message key is used by Kafka when performing log compaction and by Kinesis as the shard partition key. The property can be omitted for topics which do not require a key.
4. If the serializer will be used for incoming-messages, it should implement class method</source>
          <target state="translated">属性は、メッセージキーとして使用するフィールドの名前を表します。メッセージキーは、Kafka がログ圧縮を実行する際に、また Kinesis がシャードパーティションキーとして使用します。キーを必要としないトピックについては、このプロパティを省略することができます。4.4.着信メッセージにシリアライザを使用する場合は、クラスメソッド</target>
        </trans-unit>
        <trans-unit id="bd9eb1ec81cf0e354af01d5b454d18b18ba35af5" translate="yes" xml:space="preserve">
          <source>attribute defined on the class. The value should be a monotonic integer representing the schema version number.
3. Must have a</source>
          <target state="translated">属性を指定します。値はスキーマのバージョン番号を表す単調な整数でなければなりません。3.3.</target>
        </trans-unit>
        <trans-unit id="9af0277498ccdb7d81bd3aca08dc767cb572f99e" translate="yes" xml:space="preserve">
          <source>attribute defined on the class. The value should be a string that defines uniquely defines the data-type within it&amp;rsquo;s Topic / Stream.
2. Must have a</source>
          <target state="translated">クラスで定義された属性。値は、トピック/ストリーム内のデータ型を一意に定義する文字列である必要があります。2.持っている必要があります</target>
        </trans-unit>
        <trans-unit id="c76b77da8f80ae0f36ca4375d587a4d6e9b07cc4" translate="yes" xml:space="preserve">
          <source>attribute required on every serializer class. When sending, a producer includes the schema version number in the message data. Then, when a consumer receives a message, it looks for a register serializer with a matching version number. If no serializer is found with a matching version number, a</source>
          <target state="translated">属性が必要です。プロデューサは送信時に、メッセージデータにスキーマのバージョン番号を含めます。そして、コンシューマがメッセージを受信すると、一致するバージョン番号を持つ登録シリアライザを探します。一致するバージョン番号を持つシリアライザが見つからない場合は</target>
        </trans-unit>
        <trans-unit id="a383ee670aa695f58764b603c943107f5067c7b4" translate="yes" xml:space="preserve">
          <source>class can be removed form the code base.</source>
          <target state="translated">クラスはコードベースから削除することができます。</target>
        </trans-unit>
        <trans-unit id="a2671e5741b7108b36c72c01251577ade8fb8620" translate="yes" xml:space="preserve">
          <source>class method and override the</source>
          <target state="translated">クラスメソッドをオーバーライドして</target>
        </trans-unit>
        <trans-unit id="607607967c83fde63c7ac6218e62c8d8d8d9f82a" translate="yes" xml:space="preserve">
          <source>command to process messages for all consumers automatically in a round-robin fashion.</source>
          <target state="translated">コマンドを使用して、ラウンドロビン方式ですべてのコンシューマのメッセージを自動的に処理します。</target>
        </trans-unit>
        <trans-unit id="9b7c68a918b17eb053809b198d7c9abfc142f30a" translate="yes" xml:space="preserve">
          <source>create</source>
          <target state="translated">創る</target>
        </trans-unit>
        <trans-unit id="0429b9e83b66b59909c053bc5a0efcfb4118df17" translate="yes" xml:space="preserve">
          <source>decorator to register as many consumers and topics as you need to work with. Then, run the</source>
          <target state="translated">デコレータを使用して、作業に必要な数だけの消費者とトピックを登録します。次に</target>
        </trans-unit>
        <trans-unit id="6db6d22f2341a724787c19661f9a03b8af917dee" translate="yes" xml:space="preserve">
          <source>django-logpipe</source>
          <target state="translated">ジャンゴログパイプ</target>
        </trans-unit>
        <trans-unit id="eb5ea3e550c8a238d1064ce1bd153ab0bb463cef" translate="yes" xml:space="preserve">
          <source>exception is raised.</source>
          <target state="translated">例外が発生します。</target>
        </trans-unit>
        <trans-unit id="8180f2a38646a5bd778ded7f5d80b0b2cc557fdc" translate="yes" xml:space="preserve">
          <source>file. If you&amp;rsquo;re using Kafka, this will look like this:</source>
          <target state="translated">ファイル。Kafkaを使用している場合、これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e0146d3c2aaac8ec8c30d770f1f5ae31a3830b61" translate="yes" xml:space="preserve">
          <source>from pip.</source>
          <target state="translated">ピップから</target>
        </trans-unit>
        <trans-unit id="2eb0d5936952bd20410363efc11f7ffc58192e78" translate="yes" xml:space="preserve">
          <source>have a few rules:</source>
          <target state="translated">いくつかのルールがあります。</target>
        </trans-unit>
        <trans-unit id="c3bec6bcbc9b9f04e60fcb1d9c9c1a37f3e12e93" translate="yes" xml:space="preserve">
          <source>instance</source>
          <target state="translated">インスタンス</target>
        </trans-unit>
        <trans-unit id="971ec26da6739c0841ca2036050b557b38608197" translate="yes" xml:space="preserve">
          <source>is to define a serializer. Serializers for</source>
          <target state="translated">はシリアライザを定義することです。のシリアライザを定義します。</target>
        </trans-unit>
        <trans-unit id="ec62eb1162567055d7591d12606567ebabf9d45a" translate="yes" xml:space="preserve">
          <source>logpipe</source>
          <target state="translated">丸太管</target>
        </trans-unit>
        <trans-unit id="68ab13c1ee3eb80843c62c83ad85e5427f1354b1" translate="yes" xml:space="preserve">
          <source>logpipe.Consumer.add_ignored_message_type</source>
          <target state="translated">logpipe.Consumer.add_ignored_message_type</target>
        </trans-unit>
        <trans-unit id="866bf7a68fd126768389e054ca0333d99f633dd6" translate="yes" xml:space="preserve">
          <source>logpipe.exceptions.UnknownMessageVersionError</source>
          <target state="translated">logpipe.exceptions.UnknownMessageVersionError</target>
        </trans-unit>
        <trans-unit id="487a129194d8bab3388b17cedad6ac2309617628" translate="yes" xml:space="preserve">
          <source>lookup_instance</source>
          <target state="translated">ルックアップインスタンス</target>
        </trans-unit>
        <trans-unit id="8f30ae503298b1630ae61f30da1f4f96ec59e5b9" translate="yes" xml:space="preserve">
          <source>lookup_instance(cls, **kwargs)</source>
          <target state="translated">lookup_instance(cls,**kwargs)</target>
        </trans-unit>
        <trans-unit id="b162fbb03dc1aa300376a56456a17652d116706b" translate="yes" xml:space="preserve">
          <source>management command.</source>
          <target state="translated">管理コマンドを使用しています。</target>
        </trans-unit>
        <trans-unit id="25b2a8e1649db9eb78d5a6f63c054db6cf1d25f6" translate="yes" xml:space="preserve">
          <source>method to house your custom import logic.</source>
          <target state="translated">メソッドを使用して、カスタムインポートロジックを格納します。</target>
        </trans-unit>
        <trans-unit id="946465000bd9e24c032001a54783f3574c94142e" translate="yes" xml:space="preserve">
          <source>method.</source>
          <target state="translated">メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="f01c78cad73d84091232241f809db9ba41c59d1a" translate="yes" xml:space="preserve">
          <source>methods to apply the message. If your messages aren&amp;rsquo;t tied directly to a Django model, skip defining the</source>
          <target state="translated">メッセージを適用するメソッド。メッセージがDjangoモデルに直接関連付けられていない場合は、</target>
        </trans-unit>
        <trans-unit id="82d0b640d3bbd4f8ec32ced98b5ac12fe7458b06" translate="yes" xml:space="preserve">
          <source>model we defined above, the first step would be to update consumers to know about the new field.:</source>
          <target state="translated">上で定義したモデルでは、最初のステップは、消費者が新しい分野を知るために更新することになるだろう。</target>
        </trans-unit>
        <trans-unit id="cb018a0b6b8b13ea37b90c6cce35b1f9415e9d9a" translate="yes" xml:space="preserve">
          <source>or a class implementing an interface that mimics</source>
          <target state="translated">を模倣したインターフェイスを実装したクラスを実装しています。</target>
        </trans-unit>
        <trans-unit id="ab3ccc8dba2a0cf7a1ce4d830bb8a6238ff03833" translate="yes" xml:space="preserve">
          <source>people</source>
          <target state="translated">じんるい</target>
        </trans-unit>
        <trans-unit id="7d77ba9fe9d607843ffbaf91b5d5b4a99d0addc6" translate="yes" xml:space="preserve">
          <source>register_consumer</source>
          <target state="translated">消費者登録</target>
        </trans-unit>
        <trans-unit id="ee3ff40d65945658f82886ab211a89acda8f669d" translate="yes" xml:space="preserve">
          <source>rest_framework.serializers.Serializer</source>
          <target state="translated">rest_framework.serializers.Serializer</target>
        </trans-unit>
        <trans-unit id="424e9779dcf2f71f85ca2c05122581ed8e4069bb" translate="yes" xml:space="preserve">
          <source>run_kafka_consumer</source>
          <target state="translated">ランカフカコンシューマー</target>
        </trans-unit>
        <trans-unit id="13a4a11319d31c1b323d5774f44240a9ffc984d0" translate="yes" xml:space="preserve">
          <source>save</source>
          <target state="translated">貯める</target>
        </trans-unit>
        <trans-unit id="0a29d9a6c7b1489e391f3b143cd4fbfabd7fadde" translate="yes" xml:space="preserve">
          <source>save()</source>
          <target state="translated">save()</target>
        </trans-unit>
        <trans-unit id="37ed539c0cef13959abd980bebf30f4922f606e3" translate="yes" xml:space="preserve">
          <source>send</source>
          <target state="translated">送る</target>
        </trans-unit>
        <trans-unit id="888c15d72e41c9f0f1882f4aea4c2d19f1a044eb" translate="yes" xml:space="preserve">
          <source>settings.py</source>
          <target state="translated">設定.py</target>
        </trans-unit>
        <trans-unit id="4efef4bb8b9ed78a7dd6d74fa9828da5c0783a1e" translate="yes" xml:space="preserve">
          <source>to your installed apps.</source>
          <target state="translated">をインストールしたアプリに追加します。</target>
        </trans-unit>
        <trans-unit id="0a25ba5991316bdda4a9b3abcee2106016df28a0" translate="yes" xml:space="preserve">
          <source>update</source>
          <target state="translated">更新</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
