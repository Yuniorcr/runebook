<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/django-rest-knox/">
    <body>
      <group id="django-rest-knox">
        <trans-unit id="49a15d89d9ca10910a90e39df6bbe61f9473856c" translate="yes" xml:space="preserve">
          <source>Another option is to use &lt;code&gt;mkdocs.sh&lt;/code&gt; in this repository.
It will run mkdocs in a &lt;a href=&quot;https://www.docker.com/&quot;&gt;docker&lt;/a&gt; container.</source>
          <target state="translated">別のオプションは、このリポジトリで &lt;code&gt;mkdocs.sh&lt;/code&gt; を使用することです。それはでmkdocsを実行する&lt;a href=&quot;https://www.docker.com/&quot;&gt;ドッキングウィンドウの&lt;/a&gt;コンテナ。</target>
        </trans-unit>
        <trans-unit id="7e27996df069dbe217d7dc085431f0c3487ce441" translate="yes" xml:space="preserve">
          <source>Authentication Module for django rest auth</source>
          <target state="translated">django rest auth 用の認証モジュール</target>
        </trans-unit>
        <trans-unit id="69f017e7d4b9db19f546ed64f6eed485b7184074" translate="yes" xml:space="preserve">
          <source>Authentication for django rest framework</source>
          <target state="translated">django rest フレームワークの認証</target>
        </trans-unit>
        <trans-unit id="924d60a22c1416a685b86711eb36542a3e75d65a" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;https://www.mkdocs.org/&quot;&gt;Mkdocs documentation&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.mkdocs.org/&quot;&gt;Mkdocsのドキュメント&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="e0a69fbf611d6d75f78754d8cdbb3f7e7f720f63" translate="yes" xml:space="preserve">
          <source>DRF tokens are limited to one per user. This does not facilitate
securely signing in from multiple devices, as the token is shared.
It also requires &lt;em&gt;all&lt;/em&gt; devices to be logged out if a server-side
logout is required (i.e. the token is deleted).</source>
          <target state="translated">DRFトークンは、ユーザーごとに1つに制限されています。これは、トークンが共有されるため、複数のデバイスからの安全なサインインを容易にしません。また、サーバー側のログアウトが必要な場合（つまり、トークンが削除された場合）は、&lt;em&gt;すべての&lt;/em&gt;デバイスをログアウトする必要があります。</target>
        </trans-unit>
        <trans-unit id="13a56fca9d4de55caf7d8674667006a4a083f670" translate="yes" xml:space="preserve">
          <source>DRF tokens are stored unencrypted in the database. This would allow
an attacker unrestricted access to an account with a token if the
database were compromised.</source>
          <target state="translated">DRFトークンは暗号化されていない状態でデータベースに保存されます。これにより、データベースが漏洩した場合、攻撃者はトークンを持つアカウントに無制限にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="59870648eea5e3a78bc8ee090921df5d9721b182" translate="yes" xml:space="preserve">
          <source>DRF tokens track their creation time, but have no inbuilt mechanism
for tokens expiring. Knox tokens can have an expiry configured in
the app settings (default is 10 hours.)</source>
          <target state="translated">DRFトークンは作成時間を追跡しますが、トークンの有効期限が切れるメカニズムは内蔵されていません。Knoxトークンは、アプリの設定で有効期限を設定することができます(デフォルトは10時間です)。</target>
        </trans-unit>
        <trans-unit id="c1a5c1a2e9b20d35fce8bad714c6ebf88e39c76e" translate="yes" xml:space="preserve">
          <source>If you need to debug a test locally and if you have &lt;a href=&quot;https://www.docker.com/&quot;&gt;docker&lt;/a&gt; installed:</source>
          <target state="translated">テストをローカルでデバッグする必要があり、&lt;a href=&quot;https://www.docker.com/&quot;&gt;Dockerが&lt;/a&gt;インストールされている場合：</target>
        </trans-unit>
        <trans-unit id="0b4b2c7f565a2d0fa7848610f6b38bf5e3d35655" translate="yes" xml:space="preserve">
          <source>Knox also provides an option for a logged in client to remove &lt;em&gt;all&lt;/em&gt;
tokens that the server has - forcing all clients to re-authenticate.</source>
          <target state="translated">Knoxは、ログインしたクライアントが サーバーにある&lt;em&gt;すべての&lt;/em&gt;トークンを削除するオプションも提供します。つまり、すべてのクライアントに再認証を強制します。</target>
        </trans-unit>
        <trans-unit id="5de729b5d1fa65eca4d3898144c2185ea62e1426" translate="yes" xml:space="preserve">
          <source>Knox authentication is token based, similar to the &lt;code&gt;TokenAuthentication&lt;/code&gt;
built in to DRF. However, it overcomes some problems present in the
default implementation:</source>
          <target state="translated">Knox認証は、 DRFに組み込まれている &lt;code&gt;TokenAuthentication&lt;/code&gt; と同様に、トークンベースです。ただし、デフォルトの実装に存在するいくつかの問題を克服します。</target>
        </trans-unit>
        <trans-unit id="33c22b07aa2a8a867ea9bc48b2484ce4a368dbaa" translate="yes" xml:space="preserve">
          <source>Knox provides easy to use authentication for &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST
Framework&lt;/a&gt; The aim is to allow
for common patterns in applications that are REST based, with little
extra effort; and to ensure that connections remain secure.</source>
          <target state="translated">Knoxは、&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django RESTフレームワークに&lt;/a&gt;使いやすい認証を提供します。目的は、RESTベースのアプリケーションで一般的なパターンを、少しの追加作業で可能にすることです。接続が安全に保たれるようにします。</target>
        </trans-unit>
        <trans-unit id="7e1489b8a6ab7ab33000631e17c4b07195d2735e" translate="yes" xml:space="preserve">
          <source>Knox provides one token per call to the login view - allowing each
client to have its own token which is deleted on the server side
when the client logs out.</source>
          <target state="translated">Knoxは、ログインビューへの呼び出しごとに1つのトークンを提供しています。</target>
        </trans-unit>
        <trans-unit id="697727de6cd806715f01a6f77556f3f6a20a6731" translate="yes" xml:space="preserve">
          <source>Knox tokens are only stored in an encrypted form. Even if the
database were somehow stolen, an attacker would not be able to log
in with the stolen credentials.</source>
          <target state="translated">ノックストークンは暗号化された形でのみ保存されます。データベースが何らかの形で盗まれたとしても、攻撃者は盗まれた資格情報を使ってログインすることはできません。</target>
        </trans-unit>
        <trans-unit id="e9e5081b187cbafc8863c46274d33ef58ef484fe" translate="yes" xml:space="preserve">
          <source>More information can be found in the
&lt;a href=&quot;http://james1345.github.io/django-rest-knox/&quot;&gt;Documentation&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://james1345.github.io/django-rest-knox/&quot;&gt;ドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="2f4b843bbf34fe87d77d72378ed22335fda4ad6e" translate="yes" xml:space="preserve">
          <source>Our documentation is generated by &lt;a href=&quot;https://www.mkdocs.org&quot;&gt;Mkdocs&lt;/a&gt;.</source>
          <target state="translated">私たちのドキュメントは&lt;a href=&quot;https://www.mkdocs.org&quot;&gt;Mkdocs&lt;/a&gt;によって生成されます。</target>
        </trans-unit>
        <trans-unit id="ad54f2283117a1002e7fee0d6cfee5db768c2c7c" translate="yes" xml:space="preserve">
          <source>Run the tests locally</source>
          <target state="translated">ローカルでテストを実行する</target>
        </trans-unit>
        <trans-unit id="30a4b3c4b3b0e0f335203e46bf8e7df83c54e171" translate="yes" xml:space="preserve">
          <source>Running the script without any params triggers the &lt;code&gt;serve&lt;/code&gt; command.
The server is exposed on localhost on port 8000.</source>
          <target state="translated">paramsを指定せずにスクリプトを実行すると、 &lt;code&gt;serve&lt;/code&gt; コマンドがトリガーされます。サーバーは、ローカルホストのポート8000​​で公開されています。</target>
        </trans-unit>
        <trans-unit id="09d89c4c6aa6686e2168636b23f13655bb831f80" translate="yes" xml:space="preserve">
          <source>To configure the port the &lt;code&gt;serve&lt;/code&gt; command will be exposing the server to, you
can use the following env var:</source>
          <target state="translated">&lt;code&gt;serve&lt;/code&gt; コマンドがサーバーを公開するポートを構成するには、次のenvvarを使用できます。</target>
        </trans-unit>
        <trans-unit id="3ab85cc1f4f4c4fb501426bb84baf6f9ed93a9f2" translate="yes" xml:space="preserve">
          <source>Work on the documentation</source>
          <target state="translated">ドキュメントの作成作業</target>
        </trans-unit>
        <trans-unit id="44c5449d81a09387baf67bb0e548724aaf504477" translate="yes" xml:space="preserve">
          <source>You can also pass any &lt;code&gt;mkdocs&lt;/code&gt; command like this:</source>
          <target state="translated">次のような &lt;code&gt;mkdocs&lt;/code&gt; コマンドを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="379ed7d700c073f6bd55ccf2428c494f9ce438dd" translate="yes" xml:space="preserve">
          <source>You can refer to their documentation on how to install it locally.</source>
          <target state="translated">ローカルにインストールする方法については、彼らのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4ba3a3c155b0ccc0450351644936ec3195009d86" translate="yes" xml:space="preserve">
          <source>You could also simply run regular &lt;code&gt;tox&lt;/code&gt; in the root folder as well, but that would make testing the matrix of
Python / Django versions a bit more tricky.</source>
          <target state="translated">ルートフォルダで通常の &lt;code&gt;tox&lt;/code&gt; を実行することもできますが、それではPython / Djangoバージョンのマトリックスのテストが少し難しくなります。</target>
        </trans-unit>
        <trans-unit id="ff03bc57880f9e0cf91b66cb8a4a153f526dfdd4" translate="yes" xml:space="preserve">
          <source>django-rest-knox</source>
          <target state="translated">ジャンゴ-レスト-ノックス</target>
        </trans-unit>
        <trans-unit id="3464cc19012675391ffaec43bbd4293bf27aaf14" translate="yes" xml:space="preserve">
          <source>simply run the &lt;code&gt;./docker-run-test.sh&lt;/code&gt; script and it will run the test suite in every Python /
Django versions.</source>
          <target state="translated">&lt;code&gt;./docker-run-test.sh&lt;/code&gt; スクリプトを実行するだけで、すべてのPython / Djangoバージョンでテストスイートが実行されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
