<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/c2cwsgiutils/">
    <body>
      <group id="c2cwsgiutils">
        <trans-unit id="2bfd6a34d6c4ab81741d1fb5ffb5dd9a75a36b95" translate="yes" xml:space="preserve">
          <source>&amp;gt;=2: Use those at your convenience. Pingdom and CO are usually setup at max_level=100. So stay below.</source>
          <target state="translated">&amp;gt; = 2：都合のよいときに使用してください。PingdomとCOは通常、max_level = 100に設定されます。だから下にいて。</target>
        </trans-unit>
        <trans-unit id="22a9564671d232956d2228c4db0aab2bc79146e1" translate="yes" xml:space="preserve">
          <source>0: Don't add checks at this level. This max_level is used for doing a simple ping.</source>
          <target state="translated">0:このレベルではチェックを追加しません。この max_level は単純な ping を行うために使用されます。</target>
        </trans-unit>
        <trans-unit id="ab89f87c53a61b03676e3e7cc524e63c92ea1f7e" translate="yes" xml:space="preserve">
          <source>1: Checks for anything vital for the usefulness of the service (DB, redis, ...). This is the max_level set
by default and used by load balancers to determine if the service is alive.</source>
          <target state="translated">1:サービスの有用性に不可欠なものをチェックします (DB,redis,....)。これはデフォルトで設定されているmax_levelで、ロードバランサーがサービスが生きているかどうかを判断するために使用します。</target>
        </trans-unit>
        <trans-unit id="70695327732a7078a725de3b5912fe35e6d4f111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C2C_BROADCAST_PREFIX&lt;/code&gt; (&lt;code&gt;c2c.broadcast_prefix&lt;/code&gt;): The prefix to add to the channels being used (must be
different for 2 different services)</source>
          <target state="translated">&lt;code&gt;C2C_BROADCAST_PREFIX&lt;/code&gt; （ &lt;code&gt;c2c.broadcast_prefix&lt;/code&gt; ）：使用されているチャネルに追加するプレフィックス（2つの異なるサービスでは異なる必要があります）</target>
        </trans-unit>
        <trans-unit id="4603ac292f4f08b823894c2b5d9ac9dfd55bbd3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C2C_REDIS_URL&lt;/code&gt; (&lt;code&gt;c2c.redis_url&lt;/code&gt;): The URL to the Redis instance to use</source>
          <target state="translated">&lt;code&gt;C2C_REDIS_URL&lt;/code&gt; （ &lt;code&gt;c2c.redis_url&lt;/code&gt; ）：使用するRedisインスタンスへのURL</target>
        </trans-unit>
        <trans-unit id="3ab8e052462b33793cad9f2a0383594f6bbfaabb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GIT_HASH&lt;/code&gt; (&lt;code&gt;c2c.git_hash&lt;/code&gt;): will be used for the release</source>
          <target state="translated">&lt;code&gt;GIT_HASH&lt;/code&gt; （ &lt;code&gt;c2c.git_hash&lt;/code&gt; ）：リリースに使用されます</target>
        </trans-unit>
        <trans-unit id="3b8bfecd024f465143fee92af08b886fb6643547" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_CLIENT_ENVIRONMENT&lt;/code&gt;: the environment (dev, int, prod, ...)</source>
          <target state="translated">&lt;code&gt;SENTRY_CLIENT_ENVIRONMENT&lt;/code&gt; ：環境（dev、int、prodなど）</target>
        </trans-unit>
        <trans-unit id="615b3e3a04ddcbb5e80805b572d2049352afc24d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_CLIENT_IGNORE_EXCEPTIONS&lt;/code&gt;: list (coma separated) of exceptions to ignore (defaults to SystemExit)</source>
          <target state="translated">&lt;code&gt;SENTRY_CLIENT_IGNORE_EXCEPTIONS&lt;/code&gt; ：無視する例外のリスト（カンマ区切り）（デフォルトはSystemExit）</target>
        </trans-unit>
        <trans-unit id="4fa1fbb6e8e1090129ced48030a3d6dee921fafe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_CLIENT_RELEASE&lt;/code&gt;: If not equal to &quot;latest&quot;, will be taken for the release instead of the GIT_HASH</source>
          <target state="translated">&lt;code&gt;SENTRY_CLIENT_RELEASE&lt;/code&gt; ：「最新」と等しくない場合、GIT_HASHではなくリリースに使用されます</target>
        </trans-unit>
        <trans-unit id="6938b224a04129de478961d224ce193b75760347" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_EXCLUDES&lt;/code&gt; (&lt;code&gt;c2c.sentry.excludes&lt;/code&gt;): list of loggers (colon separated, without spaces) to exclude for sentry</source>
          <target state="translated">&lt;code&gt;SENTRY_EXCLUDES&lt;/code&gt; （ &lt;code&gt;c2c.sentry.excludes&lt;/code&gt; ）：監視ユニットから除外するロガー（コロンで区切られ、スペースなし）のリスト</target>
        </trans-unit>
        <trans-unit id="84d5757c5c20b4ebb5834d9a140b28cf68e26375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_LEVEL&lt;/code&gt;: starting from what logging level to send events to Sentry (defaults to ERROR)</source>
          <target state="translated">&lt;code&gt;SENTRY_LEVEL&lt;/code&gt; ：イベントをSentryに送信するログレベルから開始（デフォルトはERROR）</target>
        </trans-unit>
        <trans-unit id="f8f09001df29074a1c50b390fdd9e4101046aeae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SENTRY_TAG_...&lt;/code&gt;: to add other custom tags</source>
          <target state="translated">&lt;code&gt;SENTRY_TAG_...&lt;/code&gt; ：他のカスタムタグを追加します</target>
        </trans-unit>
        <trans-unit id="90a781d8c222a21aae6776cd6235886db85a6cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c2cwsgiutils.pyramid_logging.JsonLogHandler&lt;/code&gt;: to output (on stdout or stderr) JSON formatted logs.</source>
          <target state="translated">&lt;code&gt;c2cwsgiutils.pyramid_logging.JsonLogHandler&lt;/code&gt; ：（stdoutまたはstderrで）JSON形式のログを出力します。</target>
        </trans-unit>
        <trans-unit id="f41c0c258ca96ac2b0a377389553a607c047b6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c2cwsgiutils.pyramid_logging.PyramidCeeSysLogHandler&lt;/code&gt;: to send @cee formatted logs to syslog through UDP.</source>
          <target state="translated">&lt;code&gt;c2cwsgiutils.pyramid_logging.PyramidCeeSysLogHandler&lt;/code&gt; ：@cee形式のログをUDP経由でsyslogに送信します。</target>
        </trans-unit>
        <trans-unit id="598d42ec29dd2d95d93a4d79e75e6c6d345d4e20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fast_json&lt;/code&gt;: a faster JSON renderer
is tuned differently.</source>
          <target state="translated">&lt;code&gt;fast_json&lt;/code&gt; ：より高速なJSONレンダラーは異なる方法で調整されます。</target>
        </trans-unit>
        <trans-unit id="00fe2a962203c78948c0b191c6541aefac28190b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;json&lt;/code&gt;: the normal JSON renderer (default)</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt; ：通常のJSONレンダラー（デフォルト）</target>
        </trans-unit>
        <trans-unit id="52ff803386697a8fe6f20e10d7750b11beedec02" translate="yes" xml:space="preserve">
          <source>A class that can be used from a py.test fixture to control a composition</source>
          <target state="translated">py.test フィクスチャからコンポジションを制御するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="40b2e3061dffd63c16b43f38987da6cab7e7125c" translate="yes" xml:space="preserve">
          <source>A class that can be used from a py.text fixture to test a REST API</source>
          <target state="translated">py.text フィクスチャから REST API をテストするためのクラス</target>
        </trans-unit>
        <trans-unit id="197461a66399edc773ba123e91f293c8d2e1b1fe" translate="yes" xml:space="preserve">
          <source>A command is provided that can generate Doxygen graphs of an SQLAlchemy ORM model.
See &lt;a href=&quot;acceptance_tests/app/models_graph.py&quot;&gt;acceptance_tests/app/models_graph.py&lt;/a&gt; how it's used.</source>
          <target state="translated">SQLAlchemy ORMモデルのDoxygenグラフを生成できるコマンドが提供されています。使用方法は&lt;a href=&quot;acceptance_tests/app/models_graph.py&quot;&gt;acceptance_tests / app / models_graph.pyを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb9c786e0af9d6f8307ce53330e6db5280d8c3ad" translate="yes" xml:space="preserve">
          <source>A command line (&lt;code&gt;c2cwsgiutils-run&lt;/code&gt;) is provided to start an HTTP server (gunicorn) with a WSGI application.
By default, it will load the application configured in &lt;code&gt;/app/production.ini&lt;/code&gt;, but you can change that with
the &lt;code&gt;C2CWSGIUTILS_CONFIG&lt;/code&gt; environment variable. All the environment variables are usable in the configuration
file using stuff like &lt;code&gt;%(ENV_NAME)s&lt;/code&gt;.</source>
          <target state="translated">WSGIアプリケーションでHTTPサーバー（gunicorn）を起動するためのコマンドライン（ &lt;code&gt;c2cwsgiutils-run&lt;/code&gt; ）が提供されています。デフォルトでは、 &lt;code&gt;/app/production.ini&lt;/code&gt; で構成されたアプリケーションをロードしますが、 &lt;code&gt;C2CWSGIUTILS_CONFIG&lt;/code&gt; 環境変数を使用して変更できます。すべての環境変数は、 &lt;code&gt;%(ENV_NAME)s&lt;/code&gt; のようなものを使用して構成ファイルで使用できます。</target>
        </trans-unit>
        <trans-unit id="1a56c4b5ebb03d20f437918f26cc37c49b01270b" translate="yes" xml:space="preserve">
          <source>A cornice service drop in replacement for setting up CORS</source>
          <target state="translated">CORSを設定するための交換用のコーニスサービスのドロップ</target>
        </trans-unit>
        <trans-unit id="620b607b0927e86dc82cd6c23e3de2b1245b1a2c" translate="yes" xml:space="preserve">
          <source>A custom loader is provided to run pyramid scripts against configuration files containing environment variables:</source>
          <target state="translated">環境変数を含む設定ファイルに対してピラミッドスクリプトを実行するためのカスタムローダーが提供されています。</target>
        </trans-unit>
        <trans-unit id="c97337a18b165d30ea289d76e5aca51dad107a25" translate="yes" xml:space="preserve">
          <source>A few REST APIs are added and can be seen with this URL:
&lt;code&gt;{C2C_BASE_PATH}&lt;/code&gt;.</source>
          <target state="translated">いくつかのREST APIが追加され、次のURLで確認できます： &lt;code&gt;{C2C_BASE_PATH}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="846ea003a96f78f751cc565f5d58fad8d9a50e9f" translate="yes" xml:space="preserve">
          <source>A few other environment variables can be used to tune the info sent with each report:</source>
          <target state="translated">他にもいくつかの環境変数を使用して、各レポートで送信される情報を調整することができます。</target>
        </trans-unit>
        <trans-unit id="f0ab89bc52ce841594c8177ee5c7ead458ec074c" translate="yes" xml:space="preserve">
          <source>A filter is automatically installed to handle the HTTP headers set by common proxies and have correct values
in the request object (&lt;code&gt;request.client_addr&lt;/code&gt;, for example). This filter is equivalent to what the
&lt;code&gt;PasteDeploy#prefix&lt;/code&gt; (minus the prefix part) does, but supports newer headers as well (&lt;code&gt;Forwarded&lt;/code&gt;).
If you need to prefix your routes, you can use the &lt;code&gt;route_prefix&lt;/code&gt; parameter of the &lt;code&gt;Configurator&lt;/code&gt; constructor.</source>
          <target state="translated">フィルターは自動的にインストールされ、一般的なプロキシによって設定されたHTTPヘッダーを処理し、リクエストオブジェクト（ &lt;code&gt;request.client_addr&lt;/code&gt; など）に正しい値を設定します。このフィルターは &lt;code&gt;PasteDeploy#prefix&lt;/code&gt; （接頭辞部分を除く）と同じですが、より新しいヘッダーもサポートします（ &lt;code&gt;Forwarded&lt;/code&gt; ）。ルートにプレフィックスを付ける必要がある場合は、 &lt;code&gt;Configurator&lt;/code&gt; コンストラクターの &lt;code&gt;route_prefix&lt;/code&gt; パラメーターを使用できます。</target>
        </trans-unit>
        <trans-unit id="7770f590d0aa544dd8644c54d752b7c3750b120c" translate="yes" xml:space="preserve">
          <source>A framework for implementing a health_check service</source>
          <target state="translated">health_checkサービスを実装するためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="c08259a8395554d5eb8d6bc5c48cd7e7aa91dcb9" translate="yes" xml:space="preserve">
          <source>A view to get the version information about the application and the installed packages</source>
          <target state="translated">アプリケーションとインストールされているパッケージのバージョン情報を取得するビュー</target>
        </trans-unit>
        <trans-unit id="b152faa17a593ac4e700c8adb9985ae7ccfcfaa5" translate="yes" xml:space="preserve">
          <source>Allow to use a master/slave PostgresQL configuration</source>
          <target state="translated">マスター/スレーブのPostgresQL設定の使用を許可する</target>
        </trans-unit>
        <trans-unit id="eebf7a46853a4dda287d12a347297e08596c8eff" translate="yes" xml:space="preserve">
          <source>Also provide tools for writing acceptance tests:</source>
          <target state="translated">また、受け入れテストを書くためのツールも提供します。</target>
        </trans-unit>
        <trans-unit id="fa5436372695949c495e22f062c7464aa12591f8" translate="yes" xml:space="preserve">
          <source>An optional view to change runtime the log levels</source>
          <target state="translated">オプションのビューは、実行時にログレベルを変更するには</target>
        </trans-unit>
        <trans-unit id="9f68b18ed5d3984501874bfee865da603b6cd71f" translate="yes" xml:space="preserve">
          <source>And your code that initializes the DB connection must look like that:</source>
          <target state="translated">そして、DB接続を初期化するコードは、このようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="3f746eff4bf45fb46ca8106fa74f17cab4a83472" translate="yes" xml:space="preserve">
          <source>As an example on how to use it in an application provided by a Docker image, you can look at the
test application in &lt;a href=&quot;acceptance_tests/app&quot;&gt;acceptance_tests/app&lt;/a&gt;.
To see how to test such an application, look at &lt;a href=&quot;acceptance_tests/tests&quot;&gt;acceptance_tests/tests&lt;/a&gt;.</source>
          <target state="translated">Dockerイメージによって提供されるアプリケーションでの使用方法の例として、&lt;a href=&quot;acceptance_tests/app&quot;&gt;acceptance_tests / app&lt;/a&gt;でテストアプリケーションを確認できます。このようなアプリケーションをテストする方法を確認するには、&lt;a href=&quot;acceptance_tests/tests&quot;&gt;acceptance_tests / tests&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cd75ac9a8c8b8a4f270d2f2951f62d12404d620d" translate="yes" xml:space="preserve">
          <source>Both pretty prints the rendered JSON. While this adds significant amount of whitespace, the difference in
bytes transmitted on the network is negligible thanks to gzip compression.</source>
          <target state="translated">どちらもレンダリングされたJSONをきれいに印刷します。これはかなりの量のホワイトスペースを追加しますが、gzip圧縮のおかげでネットワーク上で送信されるバイト数の差は無視できるほどです。</target>
        </trans-unit>
        <trans-unit id="77ca3fc6500edac54d325df1bbb7ac8e363c54b5" translate="yes" xml:space="preserve">
          <source>Broadcast</source>
          <target state="translated">放送</target>
        </trans-unit>
        <trans-unit id="42fca7b430348fd046110efbac447cefb6a2227d" translate="yes" xml:space="preserve">
          <source>By default, c2cwsgiutils will install exception handling views that will catch any exception raised by the
application views and will transform it into a JSON response with a HTTP status corresponding to the error.</source>
          <target state="translated">デフォルトでは、c2cwsgiutils は例外処理ビューをインストールし、アプリケーションビューで発生した例外をキャッチし、エラーに対応する HTTP ステータスを持つ JSON レスポンスに変換します。</target>
        </trans-unit>
        <trans-unit id="13844228ea43240b1c7b889f66ff60a2fb8a60a6" translate="yes" xml:space="preserve">
          <source>CI</source>
          <target state="translated">シーアイ</target>
        </trans-unit>
        <trans-unit id="2139aadec237bbecb581e62932f94bc3bce7a704" translate="yes" xml:space="preserve">
          <source>CORS</source>
          <target state="translated">コ-ス</target>
        </trans-unit>
        <trans-unit id="6729a2af207e43ec56be1fca70893807a90ee4d4" translate="yes" xml:space="preserve">
          <source>Camptocamp WSGI utilities</source>
          <target state="translated">Camptocamp WSGIユーティリティー</target>
        </trans-unit>
        <trans-unit id="d789aaabcec2545ddf292bb0ece53e72f8216ae3" translate="yes" xml:space="preserve">
          <source>Change the the version in &lt;a href=&quot;setup.py&quot;&gt;setup.py&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;setup.py&quot;&gt;setup.pyで&lt;/a&gt;バージョンを変更します。</target>
        </trans-unit>
        <trans-unit id="433800a74d5dc73933baa5f13bde9cf33c496bbf" translate="yes" xml:space="preserve">
          <source>Commit and push to master.</source>
          <target state="translated">コミットしてマスターに押し付ける。</target>
        </trans-unit>
        <trans-unit id="2a22b6cd9e671e381ace59d487045e9f3dd47d80" translate="yes" xml:space="preserve">
          <source>Common utilities for Camptocamp WSGI applications</source>
          <target state="translated">Camptocamp WSGIアプリケーションのための共通ユーティリティ</target>
        </trans-unit>
        <trans-unit id="7b0efd0bac556e0dd198633ea4e41ec600ebfe0a" translate="yes" xml:space="preserve">
          <source>DB sessions</source>
          <target state="translated">DBセッション</target>
        </trans-unit>
        <trans-unit id="d34b7229a44fbca0da7bd1880fbd09932d5852e9" translate="yes" xml:space="preserve">
          <source>Database maintenance</source>
          <target state="translated">データベースのメンテナンス</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">デバッグ</target>
        </trans-unit>
        <trans-unit id="d649ef3c18fa22fc0db437db95416a9b8867e88d" translate="yes" xml:space="preserve">
          <source>Developer info</source>
          <target state="translated">開発者情報</target>
        </trans-unit>
        <trans-unit id="83e67c1928bed48517a685043c5d1984b7f3de20" translate="yes" xml:space="preserve">
          <source>Don't enable that on a busy production system. It will kill your performances.</source>
          <target state="translated">忙しいプロダクションシステムでは、これを有効にしないでください。パフォーマンスが低下します。</target>
        </trans-unit>
        <trans-unit id="e05ef188ab4f04c18dcc38bf6b36ed3a3ffdf8a0" translate="yes" xml:space="preserve">
          <source>Error catching views will be put in place to return errors as JSON.</source>
          <target state="translated">エラーキャッチビューが設置され、エラーをJSONとして返すようになります。</target>
        </trans-unit>
        <trans-unit id="f0dcdbcc9fc280f0d6cf93e04a4eae2ab7c09b59" translate="yes" xml:space="preserve">
          <source>Error handlers to send JSON messages to the client in case of error</source>
          <target state="translated">エラーが発生した場合にクライアントにJSONメッセージを送信するためのエラーハンドラ</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">例。</target>
        </trans-unit>
        <trans-unit id="b4b0dfe7027c1d349ba13a7e79558e44ec341bd8" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
          <target state="translated">例外処理</target>
        </trans-unit>
        <trans-unit id="c4f95e97feb4a2f525792302a602d03578975556" translate="yes" xml:space="preserve">
          <source>General config</source>
          <target state="translated">一般的な設定</target>
        </trans-unit>
        <trans-unit id="87398e24ea58e8cafa77352da02409bcf395978d" translate="yes" xml:space="preserve">
          <source>Health checks</source>
          <target state="translated">健康診断</target>
        </trans-unit>
        <trans-unit id="126b8cc22aca54456669d889a838cf54c9674afb" translate="yes" xml:space="preserve">
          <source>If enabled, for each &lt;code&gt;SELECT&lt;/code&gt; query sent by SQLAlchemy, another query it done with &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;
prepended to it. The results are sent to the &lt;code&gt;c2cwsgiutils.sql_profiler&lt;/code&gt; logger.</source>
          <target state="translated">有効な場合、SQLAlchemyによって送信された各 &lt;code&gt;SELECT&lt;/code&gt; クエリに対して、 &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; を 前に付加して実行した別のクエリ。結果は &lt;code&gt;c2cwsgiutils.sql_profiler&lt;/code&gt; ロガーに送信されます。</target>
        </trans-unit>
        <trans-unit id="479b6d4353a51a5518041307b8fb7bef197e8d3f" translate="yes" xml:space="preserve">
          <source>If enabled, some metrics are automatically generated:</source>
          <target state="translated">有効にすると、いくつかのメトリクスが自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="4987a434fb17ece7de226809fb6acb4aab39df2b" translate="yes" xml:space="preserve">
          <source>If not configured, only the process receiving the request is impacted.</source>
          <target state="translated">設定されていない場合、リクエストを受信したプロセスのみが影響を受けます。</target>
        </trans-unit>
        <trans-unit id="a8d85c4b59a46f35ef7f9dd40c4ddcc8aecfb341" translate="yes" xml:space="preserve">
          <source>If redis is configured and the version information is available, check that the version matches
accross all instances.</source>
          <target state="translated">redisが設定されており、バージョン情報が利用可能な場合は、すべてのインスタンスでバージョンが一致していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="f429fdaddd35b76e9593e63ec9827b451d05e959" translate="yes" xml:space="preserve">
          <source>If redis is configured, check that redis is reachable.</source>
          <target state="translated">redisが設定されている場合は、redisが到達可能であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="b0a271b5f5192ec2a4fcdaebab181c38b2581c5e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/app/versions.json&lt;/code&gt; exists, a view is added (&lt;code&gt;{C2C_BASE_PATH}/versions.json&lt;/code&gt;) to query the current
version of a app. This file is generated by calling the &lt;code&gt;c2cwsgiutils-genversion [$GIT_TAG] $GIT_HASH&lt;/code&gt;
command line. Usually done in the &lt;a href=&quot;acceptance_tests/app/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt; of the WSGI application.</source>
          <target state="translated">場合 &lt;code&gt;/app/versions.json&lt;/code&gt; が存在し、ビューが（添加される &lt;code&gt;{C2C_BASE_PATH}/versions.json&lt;/code&gt; のアプリケーションの現在のバージョンを照会します）。このファイルは、 &lt;code&gt;c2cwsgiutils-genversion [$GIT_TAG] $GIT_HASH&lt;/code&gt; コマンドラインを呼び出すことによって生成されます。通常、WSGIアプリケーションの&lt;a href=&quot;acceptance_tests/app/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;で行われます。</target>
        </trans-unit>
        <trans-unit id="38567db599e961b8b12abef3906b3a3ec0f78a17" translate="yes" xml:space="preserve">
          <source>If you need an image with a smaller foot print, use the tags prefixed with &lt;code&gt;-light&lt;/code&gt;. Those are without
gdal and without the build tools.</source>
          <target state="translated">フットプリントの小さい画像が必要な場合は、 &lt;code&gt;-light&lt;/code&gt; で始まるタグを使用します。これらにはgdalもビルドツールもありません。</target>
        </trans-unit>
        <trans-unit id="335059e338a0543b0cb73b46d5fc442a92e309a7" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;C2C_PROFILER_PATH&lt;/code&gt; environment variable, you'll enable a profiler that will be available at
the given path. Due to limitations in the library used, the path must be at the root of the application (it
cannot contain slashes). You can also define the &lt;code&gt;C2C_PROFILER_MODULES&lt;/code&gt;, a space separated list of Python
packages to have a pie chart of how much time is spent in the given packages.</source>
          <target state="translated">&lt;code&gt;C2C_PROFILER_PATH&lt;/code&gt; 環境変数を設定すると、指定されたパスで使用できるプロファイラーが有効になります。使用するライブラリの制限により、パスはアプリケーションのルートでなければなりません（スラッシュを含めることはできません）。 &lt;code&gt;C2C_PROFILER_MODULES&lt;/code&gt; を定義することもできます。C2C_PROFILER_MODULESは、Pythonパッケージのスペースで区切られたリストであり、指定されたパッケージで費やされた時間の円グラフを持ちます。</target>
        </trans-unit>
        <trans-unit id="7aae6512bb658a18649e2a92a834d3a4781d624a" translate="yes" xml:space="preserve">
          <source>If you want to use pyramid_debugtoolbar, you need to disable exception handling and configure it like that:</source>
          <target state="translated">pyramid_debugtoolbarを使いたい場合は、例外処理を無効にして、そのように設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d6089230edd4805d7667d73252e39029d8e0864a" translate="yes" xml:space="preserve">
          <source>If you want to use this feature, you must have the &lt;code&gt;linesman&lt;/code&gt; package installed.</source>
          <target state="translated">この機能を使用する場合は、 &lt;code&gt;linesman&lt;/code&gt; パッケージがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="1b446a3ff5dd4ef04ce63cb4eab5de7233cf2870" translate="yes" xml:space="preserve">
          <source>In JSON logging formats, a &lt;code&gt;request_id&lt;/code&gt; field is automatically added.</source>
          <target state="translated">JSONロギング形式では、 &lt;code&gt;request_id&lt;/code&gt; フィールドが自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="62dadeb38d32abb213b6a24899ee01dbb6eb858a" translate="yes" xml:space="preserve">
          <source>In development mode (&lt;code&gt;DEVELOPMENT=1&lt;/code&gt;), all the details (SQL statement, stacktrace, ...) are sent to the
client. In production mode, you can still get them by sending the secret defined in &lt;code&gt;C2C_SECRET&lt;/code&gt; in the query.</source>
          <target state="translated">開発モード（ &lt;code&gt;DEVELOPMENT=1&lt;/code&gt; ）では、すべての詳細（SQLステートメント、スタックトレースなど）がクライアントに送信されます。プロダクションモードでも、クエリの &lt;code&gt;C2C_SECRET&lt;/code&gt; で定義されたシークレットを送信することで取得できます。</target>
        </trans-unit>
        <trans-unit id="8e70c8e38b119b00f0a802459292f9132df19443" translate="yes" xml:space="preserve">
          <source>In general, configuration can be done both with environment variables (taken first) or with entries in the
&lt;code&gt;production.ini&lt;/code&gt; file.</source>
          <target state="translated">一般に、構成は、環境変数（最初に行われる）または &lt;code&gt;production.ini&lt;/code&gt; ファイルのエントリの両方で行うことができ ます。</target>
        </trans-unit>
        <trans-unit id="54b61179e1209b3665d92aa93f77d558e58d544e" translate="yes" xml:space="preserve">
          <source>In order to follow the logs generated by a request across all the services (think separate processes),
c2cwsgiutils tries to flag averything with a request ID. This field can come from the input as request headers
(&lt;code&gt;X-Request-ID&lt;/code&gt;, &lt;code&gt;X-Correlation-ID&lt;/code&gt;, &lt;code&gt;Request-ID&lt;/code&gt; or &lt;code&gt;X-Varnish&lt;/code&gt;) or will default to a UUID. You can add an
additional request header as source for that by defining the &lt;code&gt;C2C_REQUEST_ID_HEADER&lt;/code&gt; environment variable
(&lt;code&gt;c2c.request_id_header&lt;/code&gt;).</source>
          <target state="translated">すべてのサービスにわたって要求によって生成されたログを追跡するために（個別のプロセスを考える）、c2cwsgiutilsは要求IDですべてにフラグを立てようとします。このフィールドは、要求ヘッダー（ &lt;code&gt;X-Request-ID&lt;/code&gt; 、 &lt;code&gt;X-Correlation-ID&lt;/code&gt; 、 &lt;code&gt;Request-ID&lt;/code&gt; または &lt;code&gt;X-Varnish&lt;/code&gt; ）として入力から取得するか、デフォルトでUUIDになります。 &lt;code&gt;C2C_REQUEST_ID_HEADER&lt;/code&gt; 環境変数（ &lt;code&gt;c2c.request_id_header&lt;/code&gt; ）を定義することで、ソースとしてリクエストヘッダーを追加できます。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="a3b355284f30f05d37e5865916f80d8f31361148" translate="yes" xml:space="preserve">
          <source>It is possible to automatically reload gunicorn as soon as you change your local python code. For this you need
to have a specially tweaked &lt;code&gt;docker-compose.yml&lt;/code&gt;:</source>
          <target state="translated">ローカルのPythonコードを変更するとすぐに、gunicornを自動的にリロードすることができます。これには、特別に調整された &lt;code&gt;docker-compose.yml&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="cb152d65202ce93c22270d18254d8f8b20e43228" translate="yes" xml:space="preserve">
          <source>It will only add a timer event in case of success. If you want to measure both success and failures, do that:</source>
          <target state="translated">成功した場合のみタイマーイベントを追加します。成功と失敗の両方を測定したい場合は、そうしましょう。</target>
        </trans-unit>
        <trans-unit id="c2d45b6d22c769d2d0d201002cdeb96e9e90c4c6" translate="yes" xml:space="preserve">
          <source>JSON pretty print</source>
          <target state="translated">JSONプリティプリント</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">ロギング</target>
        </trans-unit>
        <trans-unit id="8837132b70012545bc333fce0fc89b1128773667" translate="yes" xml:space="preserve">
          <source>Logging handler for CEE/UDP logs</source>
          <target state="translated">CEE/UDPログのロギングハンドラ</target>
        </trans-unit>
        <trans-unit id="53665c23afb88afba6fff264d74bfdf211812578" translate="yes" xml:space="preserve">
          <source>Look at the &lt;code&gt;c2cwsgiutils-stats-db&lt;/code&gt; utility if you want to generate statistics (gauges) about the
row counts.</source>
          <target state="translated">行数に関する統計（ゲージ）を生成する場合は、 &lt;code&gt;c2cwsgiutils-stats-db&lt;/code&gt; ユーティリティを確認します。</target>
        </trans-unit>
        <trans-unit id="0606daeb324a2528fa87bdde24102b383e2cdd2d" translate="yes" xml:space="preserve">
          <source>Look at the documentation of the &lt;code&gt;c2cwsgiutils.health_check.HealthCheck&lt;/code&gt; class for more information.</source>
          <target state="translated">詳細については、 &lt;code&gt;c2cwsgiutils.health_check.HealthCheck&lt;/code&gt; クラスのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="72cb6dc45fb7b74ae0117845ee1faf84a1b9a851" translate="yes" xml:space="preserve">
          <source>Look at the logging configuration part of
&lt;a href=&quot;acceptance_tests/app/production.ini&quot;&gt;acceptance_tests/app/production.ini&lt;/a&gt; for a usage example.</source>
          <target state="translated">使用例については、&lt;a href=&quot;acceptance_tests/app/production.ini&quot;&gt;acceptance_tests / app / production.ini&lt;/a&gt;のロギング構成部分をご覧ください 。</target>
        </trans-unit>
        <trans-unit id="6bc8cda985b21ddefd413e5875925ec9adb272f1" translate="yes" xml:space="preserve">
          <source>Make sure you are strict with the version numbers:</source>
          <target state="translated">バージョン番号に厳しいことを確認してください。</target>
        </trans-unit>
        <trans-unit id="ddf6a1f0ce8cfffc5cd8f14230ab1fecd0f34953" translate="yes" xml:space="preserve">
          <source>Metrics</source>
          <target state="translated">メトリクス</target>
        </trans-unit>
        <trans-unit id="9e9388a7cdc5485881892a00b41fabbf152e9856" translate="yes" xml:space="preserve">
          <source>Or (preferred) as a base Docker image:
&lt;a href=&quot;https://hub.docker.com/r/camptocamp/c2cwsgiutils/&quot;&gt;camptocamp/c2cwsgiutils:3&lt;/a&gt;</source>
          <target state="translated">または（推奨）ベースのDockerイメージ： &lt;a href=&quot;https://hub.docker.com/r/camptocamp/c2cwsgiutils/&quot;&gt;camptocamp / c2cwsgiutils：3&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="30113c735f4885a8953390cde7b7bebdc6ddfca4" translate="yes" xml:space="preserve">
          <source>Other functions exists to generate metrics. Look at the &lt;code&gt;c2cwsgiutils.stats&lt;/code&gt; module.</source>
          <target state="translated">メトリックを生成する他の関数が存在します。 &lt;code&gt;c2cwsgiutils.stats&lt;/code&gt; モジュールを見てください。</target>
        </trans-unit>
        <trans-unit id="31da1961bbfc7c4ddeb384d30515cc288fec6568" translate="yes" xml:space="preserve">
          <source>Profiler</source>
          <target state="translated">プロファイラー</target>
        </trans-unit>
        <trans-unit id="f02e559d3a1a7a22c409770a05c6c9d8c45be003" translate="yes" xml:space="preserve">
          <source>Provide a small framework for gathering performance statistics about
a web application (statsd protocol)</source>
          <target state="translated">ウェブアプリケーションのパフォーマンス統計を収集するための小さなフレームワークを提供します (statsd プロトコル)</target>
        </trans-unit>
        <trans-unit id="38d1f195f5e8773874200e74a28ab6c7fd257580" translate="yes" xml:space="preserve">
          <source>Pyramid</source>
          <target state="translated">ピラミッド</target>
        </trans-unit>
        <trans-unit id="b9e45c1e8693e236d04c53afd127fae97dbdbfff" translate="yes" xml:space="preserve">
          <source>Rebase the &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; branch to this commit and push the &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; and
the tag to github. Make sure to do that at the same time so that Jenkins can see the tag when it builds
the branch.</source>
          <target state="translated">リベース &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; このコミットにブランチをプッシュ &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; とgithubのにタグを。Jenkinsがブランチを構築するときにタグを見ることができるように、それも同時に行うようにしてください。</target>
        </trans-unit>
        <trans-unit id="2141618e5f3d96bdd146ac9a61743035fc4c6e44" translate="yes" xml:space="preserve">
          <source>Request tracking</source>
          <target state="translated">トラッキングのリクエスト</target>
        </trans-unit>
        <trans-unit id="d0de7b0ef479625f70c5a5afc65a5d6e1fd8eaf9" translate="yes" xml:space="preserve">
          <source>SQL profiler</source>
          <target state="translated">エスエルプロファイラ</target>
        </trans-unit>
        <trans-unit id="e2f81fce9de7b0f1523799d79f3671ee6bc8db05" translate="yes" xml:space="preserve">
          <source>SQL profiler to debug DB performance problems, disabled by default. Warning, it will slow down everything.</source>
          <target state="translated">DBのパフォーマンス問題をデバッグするためのSQLプロファイラ、デフォルトでは無効になっています。警告、すべての動作が遅くなります。</target>
        </trans-unit>
        <trans-unit id="ba50ebd9f7dd0c73f24f5c75dd2f7fb86f0a724e" translate="yes" xml:space="preserve">
          <source>SQLAlchemy models graph</source>
          <target state="translated">SQLAlchemyはグラフをモデル化する</target>
        </trans-unit>
        <trans-unit id="f3994f84eae2b797308c63d8a508944f6b95b8bc" translate="yes" xml:space="preserve">
          <source>STATSD_ADDRESS (c2c.statsd_address): if defined, send stats to the given statsd server</source>
          <target state="translated">STATSD_ADDRESS (c2c.statsd_address):定義されている場合、与えられた statsd サーバに統計情報を送信します。</target>
        </trans-unit>
        <trans-unit id="baed1c0295f09a37d29df42570f8954930570b2f" translate="yes" xml:space="preserve">
          <source>STATSD_PREFIX (c2c.statsd_prefix): prefix to add to every metric names</source>
          <target state="translated">STATSD_PREFIX (c2c.statsd_prefix):すべてのメトリック名に追加するプレフィックス</target>
        </trans-unit>
        <trans-unit id="1f58161857618a7b760b35a6179c7a12f2c56dcd" translate="yes" xml:space="preserve">
          <source>STATSD_TAG_{tag_name}: To set a global tag for the service</source>
          <target state="translated">STATSD_TAG_{タグ名}。サービスにグローバルタグを設定するには</target>
        </trans-unit>
        <trans-unit id="f6d133dff2b3a54097578455df21d497cd7c91a0" translate="yes" xml:space="preserve">
          <source>STATSD_USE_TAGS: If true, automatic metrics will use tags</source>
          <target state="translated">STATSD_USE_TAGS。true の場合、自動メトリクスはタグを使用します。</target>
        </trans-unit>
        <trans-unit id="c2ac9656148c30b660487d8f6dbce7c388b05a92" translate="yes" xml:space="preserve">
          <source>STATS_VIEW (c2c.stats_view): if defined, will enable the stats view &lt;code&gt;{C2C_BASE_PATH}/stats.json&lt;/code&gt;</source>
          <target state="translated">STATS_VIEW（c2c.stats_view）：定義されている場合、統計ビュー &lt;code&gt;{C2C_BASE_PATH}/stats.json&lt;/code&gt; を有効にします</target>
        </trans-unit>
        <trans-unit id="84daf5be04f0f5aae7fe85868958d1c6bf7471c0" translate="yes" xml:space="preserve">
          <source>Sentry integration</source>
          <target state="translated">セントリーの統合</target>
        </trans-unit>
        <trans-unit id="5dadd887dcb50021624e67465012803ceecfa338" translate="yes" xml:space="preserve">
          <source>Some APIs are protected by a secret. This secret is specified in the &lt;code&gt;C2C_SECRET&lt;/code&gt; variable or &lt;code&gt;c2c.secret&lt;/code&gt;
property. It is either passed as the &lt;code&gt;secret&lt;/code&gt; query parameter or the &lt;code&gt;X-API-Key&lt;/code&gt; header. Once
accessed with a good secret, a cookie is stored and the secret can be omitted.</source>
          <target state="translated">一部のAPIはシークレットで保護されています。このシークレットは、 &lt;code&gt;C2C_SECRET&lt;/code&gt; 変数または &lt;code&gt;c2c.secret&lt;/code&gt; プロパティで指定されます。 &lt;code&gt;secret&lt;/code&gt; クエリパラメータまたは &lt;code&gt;X-API-Key&lt;/code&gt; ヘッダーとして渡されます。適切なシークレットでアクセスすると、Cookieが保存され、シークレットは省略できます。</target>
        </trans-unit>
        <trans-unit id="a9c766c0e71b5f8d43a594b57efeb10742727dd9" translate="yes" xml:space="preserve">
          <source>Some c2cwsgiutils APIs effect or query the state of the WSGI server. Since only one process out of the 5
(by default) time the number of servers gets a query, only this one will be affected. To avoid that, you
can configure c2cwsgiutils to use Redis pub/sub to broadcast those requests and collect the answers.</source>
          <target state="translated">いくつかの c2cwsgiutils API は、WSGI サーバの状態に影響を与えたり、クエリを取得したりします。サーバーの数が5つ(デフォルトでは)ある時間のうち1つのプロセスだけがクエリを取得するので、この1つだけが影響を受けることになります。これを避けるために、c2cwsgiutils が Redis pub/sub を使用してリクエストをブロードキャストし、回答を収集するように設定することができます。</target>
        </trans-unit>
        <trans-unit id="88122aa8f93aa8160e94d38904c5a9ccbf54a9fb" translate="yes" xml:space="preserve">
          <source>Tag the GIT commit.</source>
          <target state="translated">GIT コミットにタグを付けます。</target>
        </trans-unit>
        <trans-unit id="748933df4ef4e024c438d4496748e9b73ad6f898" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;c2cwsgiutils.db.setup_session&lt;/code&gt; allows you to setup a DB session that has two engines for accessing a
master/slave PostgresQL setup. The slave engine (read only) will be used automatically for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;
requests and the master engine (read write) will be used for the other queries.</source>
          <target state="translated">&lt;code&gt;c2cwsgiutils.db.setup_session&lt;/code&gt; はセットアップに、マスター/スレーブのPostgreSQLのセットアップにアクセスするための2つのエンジンを持っているDBセッションをことができます。スレーブエンジン（読み取り専用）は &lt;code&gt;GET&lt;/code&gt; および &lt;code&gt;OPTIONS&lt;/code&gt; リクエストに自動的に使用され、マスターエンジン（読み取り/書き込み）は他のクエリに使用されます。</target>
        </trans-unit>
        <trans-unit id="7ea882394efe9889032811641e47cbe6cbfdfdcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fast_json&lt;/code&gt; renderer is using ujson which is faster, but doesn't offer the ability to change the rendering
of some types (the &lt;code&gt;default&lt;/code&gt; parameter of json.dumps). This will interact badly with &lt;code&gt;papyrus&lt;/code&gt; and such.</source>
          <target state="translated">&lt;code&gt;fast_json&lt;/code&gt; のレンダラは高速ですujsonを使用しているが、いくつかの種類のレンダリング（変更する機能は提供しません &lt;code&gt;default&lt;/code&gt; json.dumpsのパラメータ）。これは &lt;code&gt;papyrus&lt;/code&gt; などとひどく相互作用します。</target>
        </trans-unit>
        <trans-unit id="5ca4ed5dfe6fe41e992bf78fce0fbd324028969f" translate="yes" xml:space="preserve">
          <source>The GUNICORN_PARAMS has the &lt;code&gt;--reload&lt;/code&gt; parameter and your local python code is
mounted (read only) into the container.</source>
          <target state="translated">GUNICORN_PARAMSには &lt;code&gt;--reload&lt;/code&gt; パラメーターがあり、ローカルのPythonコードがコンテナーにマウントされます（読み取り専用）。</target>
        </trans-unit>
        <trans-unit id="7652d707f204edab6ed61614e83c42b5bdb39cf2" translate="yes" xml:space="preserve">
          <source>The SQL profiler must be configured with the &lt;code&gt;C2C_SQL_PROFILER_ENABLED&lt;/code&gt; environment variable. That enables a view
to query the status of the profiler (&lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&lt;/code&gt;) or to
enable/disable it (&lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&amp;amp;enable={1|0}&lt;/code&gt;).</source>
          <target state="translated">SQLプロファイラーは、 &lt;code&gt;C2C_SQL_PROFILER_ENABLED&lt;/code&gt; 環境変数を使用して構成する必要があります。これにより、ビューがプロファイラーのステータスをクエリできるようにする（ &lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&lt;/code&gt; ）、または有効化/無効化する（ &lt;code&gt;{C2C_BASE_PATH}/sql_profiler?secret={C2C_SECRET}&amp;amp;enable={1|0}&lt;/code&gt; ） 。</target>
        </trans-unit>
        <trans-unit id="b324b58ebe72ff42727dee98895a7f1201c90ae2" translate="yes" xml:space="preserve">
          <source>The URL &lt;code&gt;{C2C_BASE_PATH}/health_check?checks=&amp;lt;check_name&amp;gt;&lt;/code&gt; can be used to run the health checks on some
checks, coma separated list.</source>
          <target state="translated">URL &lt;code&gt;{C2C_BASE_PATH}/health_check?checks=&amp;lt;check_name&amp;gt;&lt;/code&gt; を使用して、いくつかのチェック（カンマ区切りリスト）でヘルスチェックを実行できます。</target>
        </trans-unit>
        <trans-unit id="b92e078e85de51fee599b5bc4f52c3a2af526158" translate="yes" xml:space="preserve">
          <source>The configuration parameters are:</source>
          <target state="translated">設定パラメータは</target>
        </trans-unit>
        <trans-unit id="1a29ce4e251db053cd33b3e4a07b1c1d684b24ac" translate="yes" xml:space="preserve">
          <source>The impacted APIs are:</source>
          <target state="translated">影響を受けるAPIは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f49a45ed80f1bde4a3ab062cd9cd67bfbbc57523" translate="yes" xml:space="preserve">
          <source>The levels are:</source>
          <target state="translated">レベルです。</target>
        </trans-unit>
        <trans-unit id="2d1a38e889537ad2241e80e30f229a4361e97b61" translate="yes" xml:space="preserve">
          <source>The library is available in PYPI:
&lt;a href=&quot;https://pypi.python.org/pypi/c2cwsgiutils&quot;&gt;https://pypi.python.org/pypi/c2cwsgiutils&lt;/a&gt;</source>
          <target state="translated">ライブラリはPYPIで入手できます：&lt;a href=&quot;https://pypi.python.org/pypi/c2cwsgiutils&quot;&gt;https&lt;/a&gt; ://pypi.python.org/pypi/c2cwsgiutils</target>
        </trans-unit>
        <trans-unit id="9f6309f9594085646006791c5005121c58bfc411" translate="yes" xml:space="preserve">
          <source>The path &lt;code&gt;/metrics&lt;/code&gt; provide some metrics for Prometheus.
By default we have the &lt;code&gt;smap&lt;/code&gt;&lt;code&gt;pss&lt;/code&gt;, but we can easly add the &lt;code&gt;rss&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; or your custom settings:</source>
          <target state="translated">パス &lt;code&gt;/metrics&lt;/code&gt; は、Prometheusのいくつかのメトリックを提供します。デフォルトでは &lt;code&gt;smap&lt;/code&gt; &lt;code&gt;pss&lt;/code&gt; がありますが、 &lt;code&gt;rss&lt;/code&gt; 、 &lt;code&gt;size&lt;/code&gt; またはカスタム設定を簡単に追加できます。</target>
        </trans-unit>
        <trans-unit id="58d7a5046171de6759599d1de3ddf106166632ec" translate="yes" xml:space="preserve">
          <source>The profiler, even if configured, is actually disabled when the application starts. To enable it you must
visit its page.</source>
          <target state="translated">プロファイラは設定されていても、アプリケーションの起動時には無効になっています。有効にするには、プロファイラのページにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="e2d67889f7bdffebcb806ded4f8f2f7ac955dbad" translate="yes" xml:space="preserve">
          <source>The requests module is also patched to monitor requests done without timeout. In that case, you can
configure a default timeout with the &lt;code&gt;C2C_REQUESTS_DEFAULT_TIMEOUT&lt;/code&gt; environment variable
(&lt;code&gt;c2c.requests_default_timeout&lt;/code&gt;). If no timeout and no default is specified, a warning is issued.</source>
          <target state="translated">また、要求モジュールは、タイムアウトなしで行われた要求を監視するようにパッチが適用されています。その場合、 &lt;code&gt;C2C_REQUESTS_DEFAULT_TIMEOUT&lt;/code&gt; 環境変数（ &lt;code&gt;c2c.requests_default_timeout&lt;/code&gt; ）を使用してデフォルトのタイムアウトを構成できます。タイムアウトもデフォルトも指定されていない場合、警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="fd4f376275e7ced52435d7b2c2f86e939ac2df19" translate="yes" xml:space="preserve">
          <source>The stacktraces can be sent to a sentry.io service for collection. To enable it, you must set the &lt;code&gt;SENTRY_URL&lt;/code&gt;
(&lt;code&gt;c2c.sentry_url&lt;/code&gt;) to point the the project's public DSN.</source>
          <target state="translated">スタックトレースは、sentry.ioサービスに送信して収集できます。これを有効にするには、プロジェクトのパブリックDSNを指すように &lt;code&gt;SENTRY_URL&lt;/code&gt; （ &lt;code&gt;c2c.sentry_url&lt;/code&gt; ）を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="822a87d4c0f932993a42a66721c7c600ae60a908" translate="yes" xml:space="preserve">
          <source>Then, in your application, it is recommended to transmit the request ID to the external REST APIs. Use
the &lt;code&gt;X-Request-ID&lt;/code&gt; HTTP header, for example. The value of the request ID is accessible through an added
&lt;code&gt;c2c_request_id&lt;/code&gt; attribute on the Pyramid Request objects. The &lt;code&gt;requests&lt;/code&gt; module is patched to automatically
add this header.</source>
          <target state="translated">次に、アプリケーションで、リクエストIDを外部REST APIに送信することをお勧めします。たとえば、 &lt;code&gt;X-Request-ID&lt;/code&gt; HTTPヘッダーを使用します。リクエストIDの値は、Pyramid Requestオブジェクトに追加された &lt;code&gt;c2c_request_id&lt;/code&gt; 属性を介してアクセスでき ます。 &lt;code&gt;requests&lt;/code&gt; モジュールは自動的にこのヘッダを追加するパッチが適用されます。</target>
        </trans-unit>
        <trans-unit id="2990fb4dd03f60487e35c35a0dd762ec0c1e678b" translate="yes" xml:space="preserve">
          <source>Then, the URL &lt;code&gt;{C2C_BASE_PATH}/health_check?max_level=3&lt;/code&gt; can be used to run the health checks and get a report
looking like that (in case of error):</source>
          <target state="translated">次に、URL &lt;code&gt;{C2C_BASE_PATH}/health_check?max_level=3&lt;/code&gt; を使用してヘルスチェックを実行し、次のようなレポートを取得できます（エラーの場合）：</target>
        </trans-unit>
        <trans-unit id="b0bdfc6bd56e4e4fb17b304024809eac3282715f" translate="yes" xml:space="preserve">
          <source>This is a Python 3 library (&amp;gt;=3.5) providing common tools for Camptocamp WSGI
applications:</source>
          <target state="translated">これは、Camptocamp WSGIアプリケーションに共通のツールを提供するPython 3ライブラリー（&amp;gt; = 3.5）です。</target>
        </trans-unit>
        <trans-unit id="8ef7e73fa15b2812167b37420cf2880ea6ca8795" translate="yes" xml:space="preserve">
          <source>To enable and configure the metrics framework, you can use:</source>
          <target state="translated">メトリクスフレームワークを有効にして設定するには</target>
        </trans-unit>
        <trans-unit id="b868433795e5cc675f5ec8e62cd68efea1183f1b" translate="yes" xml:space="preserve">
          <source>To enable health checks, you must add some setup in your WSGI main (usually after the DB connections are
setup). For example:</source>
          <target state="translated">ヘルスチェックを有効にするには、WSGIメインで設定を追加する必要があります(通常はDB接続の設定後)。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7cc76441a23295db2476e924dab9dcb8f820e8d4" translate="yes" xml:space="preserve">
          <source>To enable most of the features of c2cwsgiutils, you need to add this line to your WSGI main:</source>
          <target state="translated">c2cwsgiutilsのほとんどの機能を有効にするには、この行をWSGIメインに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="98ece86fe234f0b9e143569e66c58c2210b6d5e1" translate="yes" xml:space="preserve">
          <source>To enable the debugging interface, you must set the &lt;code&gt;C2C_DEBUG_VIEW_ENABLED&lt;/code&gt; environment variable. Then you can
have dumps of a few things:</source>
          <target state="translated">デバッグインターフェースを有効にするには、 &lt;code&gt;C2C_DEBUG_VIEW_ENABLED&lt;/code&gt; 環境変数を設定する必要があります。次に、いくつかのものをダンプできます。</target>
        </trans-unit>
        <trans-unit id="f9840aa471523c0a1f63895425e782de46f244bd" translate="yes" xml:space="preserve">
          <source>To have CORS compliant views, define your views like that:</source>
          <target state="translated">CORSに準拠したビューを持つために、そのようにビューを定義します。</target>
        </trans-unit>
        <trans-unit id="24fcdcaf28c5364ba5464193672d744f7443be41" translate="yes" xml:space="preserve">
          <source>To lint and test everything, run the following command:</source>
          <target state="translated">lintしてすべてをテストするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="3928f386be9c9a5ac26638c5d1618bb7b2d3c0e1" translate="yes" xml:space="preserve">
          <source>To make a release:</source>
          <target state="translated">リリースするために。</target>
        </trans-unit>
        <trans-unit id="2ceb08f0cb1216668d60e2fb31994c5ff05d821e" translate="yes" xml:space="preserve">
          <source>To use that, your production.ini must look like that:</source>
          <target state="translated">これを使用するには、production.ini をこのようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="f1324ff49b4ebaa7ed3a7a1c3c49a65c85efdb7b" translate="yes" xml:space="preserve">
          <source>Two JSON renderers are available:</source>
          <target state="translated">2つのJSONレンダラが利用できます。</target>
        </trans-unit>
        <trans-unit id="d0dbd6958b52adbebe7bce447637e9da93129804" translate="yes" xml:space="preserve">
          <source>Two new logging backends are provided:</source>
          <target state="translated">2つの新しいロギングバックエンドが提供されています。</target>
        </trans-unit>
        <trans-unit id="fd9a98ae4d82da022b7fe61c7d85a671a5fc75ed" translate="yes" xml:space="preserve">
          <source>Version information</source>
          <target state="translated">バージョン情報</target>
        </trans-unit>
        <trans-unit id="525e1736cf03dcb4f095790ba67091e9c2230fc9" translate="yes" xml:space="preserve">
          <source>We need the &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; branch, so that Jenkins can build a new docker image for the major
versions every nights.</source>
          <target state="translated">Jenkinsが毎晩メジャーバージョン用の新しいDockerイメージを構築できるように、 &lt;code&gt;release_${MAJOR_VERSION}&lt;/code&gt; ブランチが必要です。</target>
        </trans-unit>
        <trans-unit id="3b85b73212608ea335d3cb8ba4b6c8563e6cdccc" translate="yes" xml:space="preserve">
          <source>When you instanciate the &lt;code&gt;HealthCheck&lt;/code&gt; class, two checks may be automatically enabled:</source>
          <target state="translated">あなたがインスタンス化するとき &lt;code&gt;HealthCheck&lt;/code&gt; クラスを、2つのチェックが自動的に有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7ec683ab42fd9c493f9bf935cd077f7b62319da1" translate="yes" xml:space="preserve">
          <source>With pip:</source>
          <target state="translated">ピップで</target>
        </trans-unit>
        <trans-unit id="85f7f3e7d905903c0e9b34eab2e6260e72b9d1d2" translate="yes" xml:space="preserve">
          <source>You can configure the base URL for accessing the views provided by c2cwsgiutils with an environment variable
named &lt;code&gt;C2C_BASE_PATH&lt;/code&gt; or in the &lt;code&gt;production.ini&lt;/code&gt; file with a property named &lt;code&gt;c2c.base_path&lt;/code&gt;.</source>
          <target state="translated">あなたは、環境変数の名前をc2cwsgiutilsが提供するビューにアクセスするためのベースURLを設定することができ &lt;code&gt;C2C_BASE_PATH&lt;/code&gt; かに &lt;code&gt;production.ini&lt;/code&gt; という名前のプロパティを持つファイル &lt;code&gt;c2c.base_path&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="e8f4cf4cd69248f76cd0e50a700abd41a092f1c2" translate="yes" xml:space="preserve">
          <source>You can enable (disabled by default since it can have a cost) the flagging of the SQL requests as well by
setting the C2C_SQL_REQUEST_ID environment variable (or c2c.sql_request_id in the .ini file). This will use
the application name to pass along the request id. If you do that, you must include the application name in
the PostgreSQL logs by setting &lt;code&gt;log_line_prefix&lt;/code&gt; to something like &lt;code&gt;&quot;%a &quot;&lt;/code&gt; (don't forget the space).</source>
          <target state="translated">C2C_SQL_REQUEST_ID環境変数（または.iniファイルのc2c.sql_request_id）を設定することにより、SQL要求のフラグ設定を有効（デフォルトでは無効）にすることができます。これは、アプリケーション名を使用してリクエストIDを渡します。その場合、 &lt;code&gt;log_line_prefix&lt;/code&gt; を &lt;code&gt;&quot;%a &quot;&lt;/code&gt; （スペースを忘れないでください）などに設定して、PostgreSQLログにアプリケーション名を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="a40311cf7f52456676d795326ada7390df495c2d" translate="yes" xml:space="preserve">
          <source>You can enable a view to configure the logging level on a live system using the &lt;code&gt;C2C_LOG_VIEW_ENABLED&lt;/code&gt; environment
variable. Then, the current status of a logger can be queried with a GET on
&lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&lt;/code&gt; and can be changed with
&lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&amp;amp;level={level}&lt;/code&gt;. Overrides are stored in
Redis, if &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; (&lt;code&gt;c2c.redis_url&lt;/code&gt;) is configured.</source>
          <target state="translated">&lt;code&gt;C2C_LOG_VIEW_ENABLED&lt;/code&gt; 環境変数を使用して、ライブシステムでログレベルを構成するビューを有効にできます。次に、ロガーの現在のステータスがオンGETで照会することができる &lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&lt;/code&gt; とで変更することができる &lt;code&gt;{C2C_BASE_PATH}/logging/level?secret={C2C_SECRET}&amp;amp;name={logger_name}&amp;amp;level={level}&lt;/code&gt; 。 &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; （ &lt;code&gt;c2c.redis_url&lt;/code&gt; ）が設定されている場合、オーバーライドはRedisに保存されます。</target>
        </trans-unit>
        <trans-unit id="cd058e6e6d9fee3a04adf41089bc5ddcf2f09a89" translate="yes" xml:space="preserve">
          <source>You can enable a view to force usage of the slave engine using the &lt;code&gt;C2C_DB_MAINTENANCE_VIEW_ENABLED&lt;/code&gt; environment
variable. Then, the database can be made &quot;readonly&quot; with
&lt;code&gt;{C2C_BASE_PATH}/db/maintenance?secret={C2C_SECRET}&amp;amp;readonly=true&lt;/code&gt;.
The current state is stored in Redis, if &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; (&lt;code&gt;c2c.redis_url&lt;/code&gt;) is configured.</source>
          <target state="translated">&lt;code&gt;C2C_DB_MAINTENANCE_VIEW_ENABLED&lt;/code&gt; 環境変数を使用して、ビューがスレーブエンジンを強制的に使用できるようにすることができます。次に、データベースを &lt;code&gt;{C2C_BASE_PATH}/db/maintenance?secret={C2C_SECRET}&amp;amp;readonly=true&lt;/code&gt; で「読み取り専用」にすることができ ます。 &lt;code&gt;C2C_REDIS_URL&lt;/code&gt; （ &lt;code&gt;c2c.redis_url&lt;/code&gt; ）が設定されている場合、現在の状態はRedisに保存されます。</target>
        </trans-unit>
        <trans-unit id="6c73372b3129674f73b59f0f0d7824665fbf050b" translate="yes" xml:space="preserve">
          <source>You can enable this by setting &lt;code&gt;C2C_ENABLE_EXCEPTION_HANDLING&lt;/code&gt; (&lt;code&gt;c2c.enable_exception_handling&lt;/code&gt;) to &quot;1&quot;.</source>
          <target state="translated">これを有効にするには、 &lt;code&gt;C2C_ENABLE_EXCEPTION_HANDLING&lt;/code&gt; （ &lt;code&gt;c2c.enable_exception_handling&lt;/code&gt; ）を &quot;1&quot;に設定します。</target>
        </trans-unit>
        <trans-unit id="b936e0244cb24b96ed54ee3b941cc04f826adb66" translate="yes" xml:space="preserve">
          <source>You can manually measure the time spent on something like that:</source>
          <target state="translated">何かに費やした時間を手動で測ることができます。</target>
        </trans-unit>
        <trans-unit id="1768ab0fe267940f5a53690d6a5d9158dd4180fb" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;force_slave&lt;/code&gt; and &lt;code&gt;force_master&lt;/code&gt; parameters to override the defaults and force a route to use
the master or the slave engine.</source>
          <target state="translated">&lt;code&gt;force_slave&lt;/code&gt; および &lt;code&gt;force_master&lt;/code&gt; パラメータを使用してデフォルトを上書きし、ルートに強制的にマスターまたはスレーブエンジンを使用させることができます。</target>
        </trans-unit>
        <trans-unit id="48d3a5cbe6cb50b3a394f3ecb8005ceb7a707099" translate="yes" xml:space="preserve">
          <source>You will need &lt;code&gt;docker&lt;/code&gt; (&amp;gt;=1.12.0), &lt;code&gt;docker-compose&lt;/code&gt; (&amp;gt;=1.10.0) and
&lt;code&gt;make&lt;/code&gt; installed on the machine to play with this project.
Check available versions of &lt;code&gt;docker-engine&lt;/code&gt; with
&lt;code&gt;apt-get policy docker-engine&lt;/code&gt; and eventually force install the
up-to-date version using a command similar to
&lt;code&gt;apt-get install docker-engine=1.12.3-0~xenial&lt;/code&gt;.</source>
          <target state="translated">あなたは必要になります &lt;code&gt;docker&lt;/code&gt; 、（&amp;gt; = 1.12.0）を &lt;code&gt;docker-compose&lt;/code&gt; （&amp;gt; = 1.10.0）と &lt;code&gt;make&lt;/code&gt; 。このプロジェクトを再生するには、マシンにインストールされています。利用可能な &lt;code&gt;docker-engine&lt;/code&gt; のバージョンを &lt;code&gt;apt-get policy docker-engine&lt;/code&gt; 、最終的に &lt;code&gt;apt-get install docker-engine=1.12.3-0~xenial&lt;/code&gt; と同様のコマンドを使用して、最新バージョンを強制インストールし ます。</target>
        </trans-unit>
        <trans-unit id="10d735e581f1e2505cd69675691925490e447c44" translate="yes" xml:space="preserve">
          <source>branch</source>
          <target state="translated">枝分かれ</target>
        </trans-unit>
        <trans-unit id="5ede1f1016b0b7528e6e9a1c96027d45ff8ca975" translate="yes" xml:space="preserve">
          <source>bug fix version change: Nothing added, removed or changed in the API and only bug fix
version number changes in the dependencies</source>
          <target state="translated">バグフィックスのバージョン変更 APIでは何も追加、削除、変更されておらず、依存関係ではバグフィックスのバージョン番号の変更のみが行われています。</target>
        </trans-unit>
        <trans-unit id="00f6bc2c92ed1d1fad733e1ffa42e17e28fafd41" translate="yes" xml:space="preserve">
          <source>every threads' stacktrace: &lt;code&gt;{C2C_BASE_PATH}/debug/stacks?secret={C2C_SECRET}&lt;/code&gt;</source>
          <target state="translated">すべてのスレッドのスタックトレース： &lt;code&gt;{C2C_BASE_PATH}/debug/stacks?secret={C2C_SECRET}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b847d2aae885eefef6a9e415e09d11f84c5343d3" translate="yes" xml:space="preserve">
          <source>major version change: The API and the dependencies are not backward compatible</source>
          <target state="translated">メジャーバージョンアップ。API と依存関係は下位互換性がありません。</target>
        </trans-unit>
        <trans-unit id="4f26aeafdb2367620a393c973eddbe8f8b846ebd" translate="yes" xml:space="preserve">
          <source>master</source>
          <target state="translated">師匠</target>
        </trans-unit>
        <trans-unit id="c5344846e725e6b1a4a0a529fb43305b3d745531" translate="yes" xml:space="preserve">
          <source>memory increase when calling another API: &lt;code&gt;{C2C_BASE_PATH}/debug/memory_diff?path={path_info}&amp;amp;secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;no_warmup&lt;/code&gt;</source>
          <target state="translated">別のAPIを呼び出すとメモリが増加する： &lt;code&gt;{C2C_BASE_PATH}/debug/memory_diff?path={path_info}&amp;amp;secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;no_warmup&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8d1403db875405fa7443dcbea77f317e72f160b" translate="yes" xml:space="preserve">
          <source>memory usage: &lt;code&gt;{C2C_BASE_PATH}/debug/memory?secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;analyze_type=builtins.dict&amp;amp;python_internals_map=false&lt;/code&gt;</source>
          <target state="translated">メモリ使用量： &lt;code&gt;{C2C_BASE_PATH}/debug/memory?secret={C2C_SECRET}&amp;amp;limit=30&amp;amp;analyze_type=builtins.dict&amp;amp;python_internals_map=false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4f431310d82091fcca80094e43726d79ae4d21c" translate="yes" xml:space="preserve">
          <source>minor version change: The API must remain backward compatible and only minor version
number changes in the dependencies</source>
          <target state="translated">マイナーバージョンの変更 APIは下位互換性を維持しなければならず、依存関係の中でマイナーなバージョン番号の変更のみが必要です。</target>
        </trans-unit>
        <trans-unit id="3561f8708ad2aebd0c76610bfb9efd2f835d9223" translate="yes" xml:space="preserve">
          <source>object ref: &lt;code&gt;{C2C_BASE_PATH}/debug/show_refs.dot?secret={C2C_SECRET}&amp;amp;analyze_type=gunicorn.app.wsgiapp.WSGIApplication&amp;amp;analyze_id=12345&amp;amp;max_depth=3&amp;amp;too_many=10&amp;amp;filter=1024&amp;amp;no_extra_info&amp;amp;backrefs&lt;/code&gt;&lt;code&gt;analyze_type&lt;/code&gt; and &lt;code&gt;analyze_id&lt;/code&gt; should not ve used toogether, you can use it like:</source>
          <target state="translated">オブジェクトREF： &lt;code&gt;{C2C_BASE_PATH}/debug/show_refs.dot?secret={C2C_SECRET}&amp;amp;analyze_type=gunicorn.app.wsgiapp.WSGIApplication&amp;amp;analyze_id=12345&amp;amp;max_depth=3&amp;amp;too_many=10&amp;amp;filter=1024&amp;amp;no_extra_info&amp;amp;backrefs&lt;/code&gt; &lt;code&gt;analyze_type&lt;/code&gt; と &lt;code&gt;analyze_id&lt;/code&gt; が使用toogetherしましてはならない、あなたのようにそれを使用することができます。</target>
        </trans-unit>
        <trans-unit id="db6a59f848642e3bb40dd3107dcf535c39884bf6" translate="yes" xml:space="preserve">
          <source>release_3 (deprecated)</source>
          <target state="translated">release_3 (非推奨)</target>
        </trans-unit>
        <trans-unit id="3211256418820fccbb071691c0f8ebe701527527" translate="yes" xml:space="preserve">
          <source>release_4</source>
          <target state="translated">リリース_4</target>
        </trans-unit>
        <trans-unit id="3935e8cda096e150d403211c66b64a19e972bcde" translate="yes" xml:space="preserve">
          <source>return an HTTP error: &lt;code&gt;{C2C_BASE_PATH}/debug/error?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</source>
          <target state="translated">HTTPエラーを返します： &lt;code&gt;{C2C_BASE_PATH}/debug/error?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3396b557b51a19e01b6ea846d810419a5c712b2d" translate="yes" xml:space="preserve">
          <source>see the HTTP headers received by WSGI: &lt;code&gt;{C2C_BASE_PATH}/debug/headers?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</source>
          <target state="translated">WSGIが受信したHTTPヘッダーを確認： &lt;code&gt;{C2C_BASE_PATH}/debug/headers?secret={C2C_SECRET}&amp;amp;status=500&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a443de8d592c65ef9553695bec13db42e14b812" translate="yes" xml:space="preserve">
          <source>sleep the given number of seconds (to test load balancer timeouts): &lt;code&gt;{C2C_BASE_PATH}/debug/sleep?secret={C2C_SECRET}&amp;amp;time=60.2&lt;/code&gt;</source>
          <target state="translated">指定された秒数の間スリープします（ロードバランサーのタイムアウトをテストするため）： &lt;code&gt;{C2C_BASE_PATH}/debug/sleep?secret={C2C_SECRET}&amp;amp;time=60.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46c4866df30fbd15b96ad6fb92eabb31ca3d039b" translate="yes" xml:space="preserve">
          <source>static analysis</source>
          <target state="translated">静的分析</target>
        </trans-unit>
        <trans-unit id="efaef6abe5446976712dae8f67d9ea9d99bde822" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.redis.{command}: The time to execute the given Redis command</source>
          <target state="translated">{STATSD_PREFIX} .redis。{command}：指定されたRedisコマンドを実行する時間</target>
        </trans-unit>
        <trans-unit id="14ce88b238148c04ee28a053055a969632099ffb" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.render.{verb}.{route_name}.{status}: The time to render a query</source>
          <target state="translated">{STATSD_PREFIX} .render。{verb}。{route_name}。{status}：クエリをレンダリングする時間</target>
        </trans-unit>
        <trans-unit id="cde374f654ddaeb9396a70468cc9e42a4f834444" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.requests.{scheme}.{hostname}.{port}.{verb}.{status}: The time to execute HTTP requests to
outside services (only the time between the start of sending of the request and when the header is
back with a chunk of the body)</source>
          <target state="translated">{STATSD_PREFIX} .requests。{scheme}。{hostname}。{port}。{verb}。{status}：外部サービスへのHTTPリクエストを実行する時間（リクエストの送信を開始してからヘッダーはボディのチャンクで戻ってきました）</target>
        </trans-unit>
        <trans-unit id="727739638af226b3c990a25964f50f0bcc642f66" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.route.{verb}.{route_name}.{status}: The time to process a query (includes rendering)</source>
          <target state="translated">{STATSD_PREFIX} .route。{verb}。{route_name}。{status}：クエリを処理する時間（レンダリングを含む）</target>
        </trans-unit>
        <trans-unit id="15d07a228cd6d69d3e8ef25b7d3db2dc4e365998" translate="yes" xml:space="preserve">
          <source>{STATSD_PREFIX}.sql.{query}: The time to execute the given SQL query (simplified and normalized)</source>
          <target state="translated">{STATSD_PREFIX} .sql。{query}：指定されたSQLクエリを実行する時間（簡略化および正規化）</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
