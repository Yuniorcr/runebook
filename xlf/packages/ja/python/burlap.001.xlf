<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/burlap/">
    <body>
      <group id="burlap">
        <trans-unit id="071df622a0393b479e4649f2fb3b5d1e8947fcf0" translate="yes" xml:space="preserve">
          <source>A role is a special type of task that defines the servers that the following tasks should apply to.</source>
          <target state="translated">ロールは、次のタスクが適用されるべきサーバーを定義する特別なタイプのタスクです。</target>
        </trans-unit>
        <trans-unit id="4aa210a22ab10034165d3b8f94cdc675a1aec013" translate="yes" xml:space="preserve">
          <source>A role is defined in a top-level directory called 'roles', where every sub-directory represents the name of a role.</source>
          <target state="translated">ロールは'rolls'と呼ばれるトップレベルのディレクトリで定義され、各サブディレクトリはロールの名前を表します。</target>
        </trans-unit>
        <trans-unit id="c039fa1f69342f73b48935b06b02d1b070e30544" translate="yes" xml:space="preserve">
          <source>A task is a Fabric command which can perform an arbitrary operation.</source>
          <target state="translated">タスクは、任意の操作を実行できる Fabric コマンドです。</target>
        </trans-unit>
        <trans-unit id="571d0b0ca0d7cd1329b14ab2678dcb8e0bf8e280" translate="yes" xml:space="preserve">
          <source>Basic call format:</source>
          <target state="translated">基本的な呼出形式。</target>
        </trans-unit>
        <trans-unit id="f08087513cd1ad2007a32f6fd55550f1645fbf7d" translate="yes" xml:space="preserve">
          <source>Burlap - configuration management designed for simplicity and speed</source>
          <target state="translated">Burlap-シンプルさとスピードのために設計された構成管理</target>
        </trans-unit>
        <trans-unit id="e29946f8d3f9d6632469882a5796f555a032fe10" translate="yes" xml:space="preserve">
          <source>Burlap is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software&quot;&gt;configuration management&lt;/a&gt;
tool and framework for deploying software to servers.</source>
          <target state="translated">Burlapは、 サーバーにソフトウェアを展開するための&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software&quot;&gt;構成管理&lt;/a&gt;ツールおよびフレームワークです。</target>
        </trans-unit>
        <trans-unit id="0f13fa4eb511f56b13bb8d0ae5deb5dd6ddb3dd3" translate="yes" xml:space="preserve">
          <source>Burlap retrieves this manifest for each satchel before and after the deployment, and calculates the difference to determine which satchels have outstanding changes with need to be deployed.</source>
          <target state="translated">Burlap は、展開前と展開後の各サッチェルのマニフェストを取得し、どのサッチェルに展開する必要がある未解決の変更があるかを判断するために差分を計算します。</target>
        </trans-unit>
        <trans-unit id="806d60f179cf196709d4181e58bf0be75c7f9371" translate="yes" xml:space="preserve">
          <source>Each satchel defines how its changes are tracked, which are reported in the form of a manifest.</source>
          <target state="translated">各サッチェルは、その変更がどのように追跡されるかを定義し、マニフェストの形で報告されます。</target>
        </trans-unit>
        <trans-unit id="97558c3f3248bde9c63b2de8baa17d5aa7513939" translate="yes" xml:space="preserve">
          <source>Fabric commands for simplifying server deployments</source>
          <target state="translated">サーバーのデプロイを簡素化するためのファブリックコマンド</target>
        </trans-unit>
        <trans-unit id="66fd20477dc2967704d6439dbad68b3c046ea839" translate="yes" xml:space="preserve">
          <source>For example, a Django project hosted on Apache would require the Apache configuration to be deployed before any Django project code.</source>
          <target state="translated">例えば、Apache でホストされている Django プロジェクトでは、Django プロジェクトのコードの前に Apache の設定をデプロイする必要があります。</target>
        </trans-unit>
        <trans-unit id="d93aeb167f73ebf19ed49a7fdd24cc089f01bcbd" translate="yes" xml:space="preserve">
          <source>For example, all the tasks relating to Apache are in the Apache satchel, so to stop, deploy your Apache configuration, and then restart the staging server, you would do:</source>
          <target state="translated">例えば、Apache に関連するタスクはすべて Apache satchel にありますので、Apache の設定を停止してデプロイし、ステージングサーバを再起動するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e1861d973612355a905c7684c2ecdec64ba6884f" translate="yes" xml:space="preserve">
          <source>However, it gets even simpler than this. If you add &lt;code&gt;apache&lt;/code&gt; to the &lt;code&gt;services&lt;/code&gt; list inside &lt;code&gt;roles/staging/settings.yaml&lt;/code&gt;, then Burlap will track changes and automatically deploy them when you run:</source>
          <target state="translated">ただし、これよりもさらに簡単になります。 &lt;code&gt;roles/staging/settings.yaml&lt;/code&gt; 内の &lt;code&gt;services&lt;/code&gt; リストに &lt;code&gt;apache&lt;/code&gt; を追加すると、Burlapは変更を追跡し、実行時にそれらを自動的にデプロイします。</target>
        </trans-unit>
        <trans-unit id="f8b101e7e742c02259b38744f2d9ce33ea4162e2" translate="yes" xml:space="preserve">
          <source>However, this auto-deployer can't foresee all use cases, and should exceptions arise, you can reset Burlap's last manifest, implicitly telling it that, &quot;Everything that needs to be deployed has been deployed&quot;, but running:</source>
          <target state="translated">しかし、この自動デプロイはすべてのユースケースを予測することはできず、例外が発生した場合、Burlap の最後のマニフェストをリセットし、暗黙のうちに「デプロイする必要があるすべてのものがデプロイされています」と伝えることができますが、実行しています。</target>
        </trans-unit>
        <trans-unit id="ffbf5dfe694703a825bf061d37452c242da06484" translate="yes" xml:space="preserve">
          <source>Install the package via pip with:</source>
          <target state="translated">でpip経由でパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="06a245119083633b111504481495ae78d34016b5" translate="yes" xml:space="preserve">
          <source>It's written in Python and is built ontop of &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt; to run commands remotely over SSH.</source>
          <target state="translated">Pythonで書かれており、SSH経由でリモートでコマンドを実行するために、&lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabricの上&lt;/a&gt;に構築されています。</target>
        </trans-unit>
        <trans-unit id="921c77dab2feda762eb51675087c94c04f8a3aa0" translate="yes" xml:space="preserve">
          <source>Most Burlap tasks also support a &lt;code&gt;verbose&lt;/code&gt; parameter, which will activate additional debugging info as defined by each satchel. It's activated like:</source>
          <target state="translated">ほとんどのBurlapタスクは、各サッチェルによって定義された追加のデバッグ情報をアクティブにする &lt;code&gt;verbose&lt;/code&gt; パラメーターもサポートします。次のようにアクティブ化されます：</target>
        </trans-unit>
        <trans-unit id="02f242b41b6b6bdb5ac091ad5be43c499c8fd034" translate="yes" xml:space="preserve">
          <source>Much of the code is also heavily influenced by &lt;a href=&quot;https://github.com/fabtools/fabtools&quot;&gt;Fabtools&lt;/a&gt;, another Fabric-based toolkit.</source>
          <target state="translated">コードの多くは、&lt;a href=&quot;https://github.com/fabtools/fabtools&quot;&gt;Fabtools&lt;/a&gt;という別のファブリックベースのツールキットにも大きく影響されています。</target>
        </trans-unit>
        <trans-unit id="1afa8ef3b3920208787c163481a39f125ffcff26" translate="yes" xml:space="preserve">
          <source>Nearly all of Burlap's built-in tasks run Bash commands behind the scenes. Therefore, by activating dryrun mode and hiding all superfluous output except the generated Bash commands,
it's possible to convert a Burlap call to a Bash script. To do this, set the environment variable &lt;code&gt;BURLAP_COMMAND_PREFIX=0&lt;/code&gt;, activate dryrun, and capture the output to a file. e.g.</source>
          <target state="translated">バーラップの組み込みタスクのほとんどすべてが、バックグラウンドでBashコマンドを実行します。したがって、ドライランモードをアクティブにし、生成されたBashコマンド以外のすべての不要な出力を非表示にすることで、Burlap呼び出しをBashスクリプトに変換することができます。これを行うには、環境変数 &lt;code&gt;BURLAP_COMMAND_PREFIX=0&lt;/code&gt; を設定し、dryrunをアクティブにして、出力をファイルにキャプチャします。例えば</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="144bd1d7c92fa3b9b71e5552a4182432fe066281" translate="yes" xml:space="preserve">
          <source>Python 2.7 is supported through version 0.9.54.</source>
          <target state="translated">Python 2.7はバージョン0.9.54までサポートされています。</target>
        </trans-unit>
        <trans-unit id="5768eb7852de3a712830ec6f18b8a013f921df9c" translate="yes" xml:space="preserve">
          <source>Quickstart &amp;amp; Usage</source>
          <target state="translated">クイックスタートと使用法</target>
        </trans-unit>
        <trans-unit id="888862c499bb90c328ba2c5102e90182d554c0bc" translate="yes" xml:space="preserve">
          <source>Satchels can define dependencies, telling Burlap to run certain tasks in a specific order.</source>
          <target state="translated">サッチェルは依存関係を定義し、特定のタスクを特定の順序で実行するようにBurlapに指示することができます。</target>
        </trans-unit>
        <trans-unit id="bc282dfb13bcb4eed49a5edac8f0d95fbf33c600" translate="yes" xml:space="preserve">
          <source>Tasks are organized in classes called Satchels. This allows them to share state and have a more organized naming scheme.</source>
          <target state="translated">タスクはサッチェルと呼ばれるクラスで構成されています。これにより、状態を共有することができ、より整理されたネーミングスキームを持つことができます。</target>
        </trans-unit>
        <trans-unit id="7b6e783b37f58c0a39616a1f31d33e15b40f3bff" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;settings.yaml&lt;/code&gt; inside this directory defines all the settings for this role.</source>
          <target state="translated">このディレクトリ内のファイル &lt;code&gt;settings.yaml&lt;/code&gt; は、このロールのすべての設定を定義します。</target>
        </trans-unit>
        <trans-unit id="d2e2aa40819cef96aa239a7f87257dc5eae3b3e1" translate="yes" xml:space="preserve">
          <source>There can be an arbitrary number of tasks called:</source>
          <target state="translated">と呼ばれる任意の数のタスクが存在することができます。</target>
        </trans-unit>
        <trans-unit id="4ee3cb819ec00c5ecbd621b6e2a7f68854485fda" translate="yes" xml:space="preserve">
          <source>This allows a role to contain an arbitrary number of satchels, whose deployment can be calculated automatically.</source>
          <target state="translated">これにより、ロールに任意の数のサッチェルを含めることができ、その展開を自動的に計算することができます。</target>
        </trans-unit>
        <trans-unit id="9e36bf58f80ef0a65ccf6ce325c372c3590ff725" translate="yes" xml:space="preserve">
          <source>To create a base Burlap skeleton project with sample roles, run &lt;code&gt;burlap-admin.py skel myproject&lt;/code&gt;.</source>
          <target state="translated">サンプルの役割を持つ基本のBurlapスケルトンプロジェクトを作成するには、 &lt;code&gt;burlap-admin.py skel myproject&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="7984718e550ed5ab4ef4c2b917c53d2ff15d2f5e" translate="yes" xml:space="preserve">
          <source>To run a specific test in a specific environment:</source>
          <target state="translated">特定の環境で特定のテストを実行すること。</target>
        </trans-unit>
        <trans-unit id="95b531edf9cc7709cdf7d6bd106c182ff4f16c4a" translate="yes" xml:space="preserve">
          <source>To run all tests on a specific environment:</source>
          <target state="translated">特定の環境ですべてのテストを実行するには</target>
        </trans-unit>
        <trans-unit id="635c713dc6b2693215e58c68dd512e5b68221612" translate="yes" xml:space="preserve">
          <source>To run all tests:</source>
          <target state="translated">すべてのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="276ca3b25a410058e97fe177bbba7e6c3d27610d" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;boto&lt;/code&gt; package for AWS support, install with &lt;code&gt;pip install burlap[aws]&lt;/code&gt;.</source>
          <target state="translated">AWSサポートに &lt;code&gt;boto&lt;/code&gt; パッケージを使用するには、 &lt;code&gt;pip install burlap[aws]&lt;/code&gt; を使用してインストールします。</target>
        </trans-unit>
        <trans-unit id="6390870b029b919640387a72d83cdc2f3d32703a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;https://www.chef.io/&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; that target large &quot;web-scale&quot; platforms at the expense of great complexity, Burlap targets small- to medium-scale platforms and keeps its configuration simple.</source>
          <target state="translated">大きな複雑さを犠牲にして大規模な「Webスケール」プラットフォームをターゲットにする&lt;a href=&quot;https://www.chef.io/&quot;&gt;Chef&lt;/a&gt;や&lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;とは異なり、Burlapは小規模から中規模のプラットフォームをターゲットにし、構成をシンプルに保ちます。</target>
        </trans-unit>
        <trans-unit id="c3eb31346b9b5770228bda28fa1c1291a12b5f2d" translate="yes" xml:space="preserve">
          <source>Virtually all Burlap tasks support a &lt;code&gt;dryrun&lt;/code&gt; parameter, which, when set, will only output the command without applying any substantial changes to the server. It's activated like:</source>
          <target state="translated">実質的にすべてのBurlapタスクは、 &lt;code&gt;dryrun&lt;/code&gt; パラメーターをサポートします。これは、設定された場合、サーバーに実質的な変更を適用せずにコマンドのみを出力します。次のようにアクティブ化されます：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
