<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/absynthe/">
    <body>
      <group id="absynthe">
        <trans-unit id="02b011c64160798e799481cc084857488382bb41" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Anomalous&lt;/em&gt; behaviors</source>
          <target state="translated">&lt;em&gt;異常な&lt;/em&gt;行動</target>
        </trans-unit>
        <trans-unit id="60027b310b5d95466e164e9b1bfc5f536be91cc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This tool is still in alpha stage, so backward compatibility is not
guaranteed between releases. However, inasmuch as users stick to graph builders'
&lt;code&gt;generateNewGraph()&lt;/code&gt; methods, they will stay away from compatibility problems.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このツールはまだアルファ段階であるため、リリース間の下位互換性は保証されていません。ただし、ユーザーがグラフビルダーの &lt;code&gt;generateNewGraph()&lt;/code&gt; メソッドに固執する限り、互換性の問題は回避されます 。</target>
        </trans-unit>
        <trans-unit id="7d13b0e105082d251433284ac94b52e7b08baf9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When generating a behavior, i.e. when traversing a graph, successors
of nodes are chosen based on the probability distributions associated with those
nodes. Different nodes rely on different distributions and these nodes are
randomly assigned in the graphs that are constructed by &lt;code&gt;generateNewGraph()&lt;/code&gt;
methods, resulting in graphs with a mix of nodes.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;動作を生成するとき、つまりグラフをトラバースするとき、ノードの後続ノードは、それらのノードに関連付けられている確率分布に基づいて選択されます。異なるノードは異なる分布に依存しており、これらのノードは、 &lt;code&gt;generateNewGraph()&lt;/code&gt; メソッドによって作成されたグラフでランダムに割り当てられ、ノードが混在するグラフになります。</target>
        </trans-unit>
        <trans-unit id="1ed58f177ea95bd7dab803c7ed4b233a181ba7bd" translate="yes" xml:space="preserve">
          <source>A (branching) Behaviour Synthesizer</source>
          <target state="translated">A(分岐)行動シンセサイザ</target>
        </trans-unit>
        <trans-unit id="550e6f318db294135e3d56d0fa6d7665e997ba1a" translate="yes" xml:space="preserve">
          <source>A more interesting situation arises while trying to test log analytic (and
anomaly detection) solutions for distributed applications where multiple
sources or modules emit their respective log messages in a single log queue or
stream. This means that consecutive log lines could have originated from
different, unrelated application components. Absynthe provides &lt;em&gt;ground truth&lt;/em&gt;
models to simulate such situations.</source>
          <target state="translated">複数のソースまたはモジュールが単一のログキューまたはストリームでそれぞれのログメッセージを送信する分散アプリケーションのログ分析（および異常検出）ソリューションをテストしようとすると、さらに興味深い状況が発生します。これは、連続するログ行が異なる、無関係のアプリケーションコンポーネントから発生した可能性があることを意味します。Absyntheは、 そのような状況をシミュレートする&lt;em&gt;グラウンドトゥルース&lt;/em&gt;モデルを提供します。</target>
        </trans-unit>
        <trans-unit id="dde040f47497790c05666d2ef94baefd390e27bf" translate="yes" xml:space="preserve">
          <source>Absynthe came about in response to the need for test data for analysizing the
performance and accuracy of log analysis algorithms. Even though plenty of real
life logs are available, e.g. &lt;code&gt;/var/log/&lt;/code&gt; in unix-based laptops, they do not
serve the purpose of test data. For that, we need to understand the core
application logic that is generating these logs.</source>
          <target state="translated">Absyntheは、ログ分析アルゴリズムのパフォーマンスと精度を分析するためのテストデータの必要性に応えて誕生しました。UNIXベースのラップトップの &lt;code&gt;/var/log/&lt;/code&gt; など、実際のログは多数利用できますが、テストデータの目的には役立ちません。そのためには、これらのログを生成しているコアアプリケーションロジックを理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="68e14b2ad8538d489e4858484be43ce15b328a6b" translate="yes" xml:space="preserve">
          <source>Absynthe: A (branching) Behavior Synthesizer</source>
          <target state="translated">アブシンテ A(分岐)行動シンセサイザー</target>
        </trans-unit>
        <trans-unit id="280cb3fd0e3d99cf59bd50b4980fc6af1bbad0d5" translate="yes" xml:space="preserve">
          <source>Added a separate utility class called &lt;code&gt;Utils&lt;/code&gt; in &lt;code&gt;absynthe.cfg.utils.py&lt;/code&gt; to
create a new &lt;code&gt;Node&lt;/code&gt; object from any of the concrete implementations of &lt;code&gt;Node&lt;/code&gt; at
random. All concrete implementations of &lt;code&gt;Node&lt;/code&gt; therefore transparently available
to graph builders (and everyone else) through this utility.</source>
          <target state="translated">呼ばれる別のユーティリティクラスを追加しました &lt;code&gt;Utils&lt;/code&gt; 中で &lt;code&gt;absynthe.cfg.utils.py&lt;/code&gt; 新しい作成するために、 &lt;code&gt;Node&lt;/code&gt; の具体的な実装のいずれかからオブジェクト &lt;code&gt;Node&lt;/code&gt; ランダムに。したがって、 &lt;code&gt;Node&lt;/code&gt; のすべての具体的な実装は、このユーティリティを介してグラフ作成者（および他のすべての人）に対して透過的に利用できます。</target>
        </trans-unit>
        <trans-unit id="eb58484c96da64282a061ef0f8a9d40510285043" translate="yes" xml:space="preserve">
          <source>Added new graph builders, viz. &lt;code&gt;DAGBuilder&lt;/code&gt; and  &lt;code&gt;DCGBuilder&lt;/code&gt;, which build
CFGs with skip-level edges and loops respectively.</source>
          <target state="translated">新しいグラフビルダー、すなわち追加。 &lt;code&gt;DAGBuilder&lt;/code&gt; と &lt;code&gt;DCGBuilder&lt;/code&gt; は、スキップレベルのエッジとループでそれぞれCFGを構築します。</target>
        </trans-unit>
        <trans-unit id="4cbbc2fc77fc6a8ffe051dea3ddc539034d4544b" translate="yes" xml:space="preserve">
          <source>Added new node, viz. &lt;code&gt;BinomialNode&lt;/code&gt;, which exploits the binomial distribution
in order to select its successors at the time of graph traversal.</source>
          <target state="translated">新しいノードを追加しました。 &lt;code&gt;BinomialNode&lt;/code&gt; は、グラフのトラバーサル時に後続ノードを選択するために二項分布を利用します。</target>
        </trans-unit>
        <trans-unit id="8be003c27a6c97e5b0677757afd23716aaca94ef" translate="yes" xml:space="preserve">
          <source>An example of a more complex CFG, a directed cyclic graph, is shown in the
figure below. It expands the tree-like graph illustrated above by:</source>
          <target state="translated">より複雑な CFG、有向環状グラフの例を下の図に示します。これは上で説明した木のようなグラフを次のように拡張したものである.</target>
        </trans-unit>
        <trans-unit id="6452f7e7dc3c35274e1d081266ab3bcc9990cab8" translate="yes" xml:space="preserve">
          <source>An example of a simple, tree-like CFG generated using Absynthe is shown below.
This is like a tree since nodes are laid out in levels, and nodes at level &lt;code&gt;i&lt;/code&gt;
have outgoing edges only to nodes at level &lt;code&gt;i + 1&lt;/code&gt;.</source>
          <target state="translated">Absyntheを使用して生成された単純なツリー状のCFGの例を以下に示します。これは、ノードがレベルに配置されているので、木のようであり、そしてレベルのノード &lt;code&gt;i&lt;/code&gt; が 唯一のレベルのノードへの発信エッジを有する &lt;code&gt;i + 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e925f5a187584bb93a957696eb50e796b4b787e" translate="yes" xml:space="preserve">
          <source>Coming up in future releases</source>
          <target state="translated">今後のリリース予定</target>
        </trans-unit>
        <trans-unit id="7e9b9183f4a396da21c94f732891218fafbdc7ae" translate="yes" xml:space="preserve">
          <source>Directed Cyclic CFG</source>
          <target state="translated">有向環状CFG</target>
        </trans-unit>
        <trans-unit id="7a253c500c342cfa2eda2d5a52e23d3e00a38f0f" translate="yes" xml:space="preserve">
          <source>Each &lt;em&gt;behavior&lt;/em&gt; is the sequence of nodes encountered while traversing this CFG
from a root to a leaf. Of course, a CFG might contain loops which could be
traversed multiple times before arriving at the leaf. Moreover, if there are
multiple CFGs, then Absynthe can synthesize &lt;em&gt;interleaved&lt;/em&gt; behaviors. This means
that a single sequence of nodes might contain nodes from multiple CFGs. We are
ultimately interested in this interleaving behavior, which is produced by
multiple CFGs.</source>
          <target state="translated">各&lt;em&gt;動作&lt;/em&gt;は、このCFGをルートからリーフにトラバースするときに発生するノードのシーケンスです。もちろん、CFGには、リーフに到達する前に複数回トラバースできるループが含まれている場合があります。さらに、複数のCFGがある場合、Absyntheは&lt;em&gt;インターリーブされた&lt;/em&gt;動作を合成できます。つまり、単一のノードシーケンスに複数のCFGのノードが含まれる可能性があります。最終的には、複数のCFGによって生成されるこのインターリーブ動作に関心があります。</target>
        </trans-unit>
        <trans-unit id="ffc30fab83bb0c85eb6e12280e0a3b95999fd852" translate="yes" xml:space="preserve">
          <source>Each business process or compuater application is modelled as a &lt;em&gt;control flow
graph&lt;/em&gt; (or &lt;em&gt;CFG&lt;/em&gt;), which typically has one or more roots (i.e. entry) nodes and
multiple leaf (i.e. end) nodes.</source>
          <target state="translated">各ビジネスプロセスまたはコンピューターアプリケーションは、&lt;em&gt;制御フローグラフ&lt;/em&gt;（または&lt;em&gt;CFG&lt;/em&gt;）としてモデル化されます。これには、通常、1つ以上のルート（つまりエントリ）ノードと複数のリーフ（つまりエンド）ノードがあります。</target>
        </trans-unit>
        <trans-unit id="ebf05de134c94509696d1b9731d1059221894528" translate="yes" xml:space="preserve">
          <source>For instance, consider the &lt;code&gt;basicLogGeneration&lt;/code&gt; method in
&lt;code&gt;./examples/01_generateSimpleBehavior.py&lt;/code&gt;:</source>
          <target state="translated">例えば、考慮 &lt;code&gt;basicLogGeneration&lt;/code&gt; の中にメソッド &lt;code&gt;./examples/01_generateSimpleBehavior.py&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="ece8a1e099471b12bc1db0091b0ab79cf8c8e183" translate="yes" xml:space="preserve">
          <source>For the latest features not yet released, clone or download the &lt;code&gt;develop&lt;/code&gt; branch
and then:</source>
          <target state="translated">まだリリースされていない最新の機能については、 &lt;code&gt;develop&lt;/code&gt; ブランチを複製またはダウンロードしてから、</target>
        </trans-unit>
        <trans-unit id="361323255a6e418a94fe1dd6ad98403ad687499f" translate="yes" xml:space="preserve">
          <source>In order to generate behaviors from a directed cyclic CFG, create a DCG as shown
in &lt;code&gt;./examples/03_generateControlFlowDCG.py&lt;/code&gt; and then generate behaviors after
adding the DCG to a behavior object as shown in the code snippet above.</source>
          <target state="translated">有向巡回CFGから動作を生成するには、。 &lt;code&gt;./examples/03_generateControlFlowDCG.py&lt;/code&gt; / 03_generateControlFlowDCG.pyに示すようにDCGを作成し、上記のコードスニペットに示すようにDCGを動作オブジェクトに追加した後に動作を生成します。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="41d0bded83d8a4df22a78f1f0693f59a79719b3e" translate="yes" xml:space="preserve">
          <source>It is possible to start using Absynthe with two classes:</source>
          <target state="translated">2つのクラスでAbsyntheを使い始めることができます。</target>
        </trans-unit>
        <trans-unit id="019ec01ba6d724fe41e420938f721b48570940fe" translate="yes" xml:space="preserve">
          <source>Logger nodes that emit more &lt;em&gt;life like&lt;/em&gt; log messages</source>
          <target state="translated">ログメッセージの&lt;em&gt;ような&lt;/em&gt;より多くの&lt;em&gt;生命&lt;/em&gt;を発するロガーノード</target>
        </trans-unit>
        <trans-unit id="80552c39193e5d627bacdc60f82ee17b182d6315" translate="yes" xml:space="preserve">
          <source>Major changes in v0.0.2</source>
          <target state="translated">v0.0.0.2の主な変更点</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">モチベーション</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="0ea4af908fe06688dd3fc02035189b08293c5074" translate="yes" xml:space="preserve">
          <source>Release Notes</source>
          <target state="translated">リリースノート</target>
        </trans-unit>
        <trans-unit id="7137676daae9098656140de61386c7374db05941" translate="yes" xml:space="preserve">
          <source>Sophisticated interleaving behaviors</source>
          <target state="translated">洗練されたインターリーブ動作</target>
        </trans-unit>
        <trans-unit id="f2903a3add32a92d3c75624c962356b7a49a5fa8" translate="yes" xml:space="preserve">
          <source>The above screenshot shows logs generated by Absynthe. Each log line starts
with a time stamp, followed by a session ID, CFG ID, and a log message. At
present, the log message is simply a random concatenation of the node ID to
which the log message corresponds. A single CFG might participate in multiple
sessions, where each session is a different traversal of the CFG. Therefore, we
maintain both session ID and CFG ID in the log line.</source>
          <target state="translated">上のスクリーンショットは、Absynthe によって生成されたログを示しています。各ログ行は、タイムスタンプから始まり、セッションID、CFGID、ログメッセージが続く。現在のところ、ログメッセージは、ログメッセージが対応するノード ID をランダムに連結したものです。1 つの CFG が複数のセッションに参加することもありますが、各セッションは CFG の異なるトラバーサルです。そのため、セッション ID と CFG ID の両方をログに保持しています。</target>
        </trans-unit>
        <trans-unit id="f96cc45f6b319ee18988211c883578e9a4a281c7" translate="yes" xml:space="preserve">
          <source>The identifiers of nodes appearing loops are helpfully prefixed with the
identifiers of nodes where these loops start and finish. Moreover, loops could
be traversed multiple times in a single behavior, as illustrated in the figure
below.</source>
          <target state="translated">ループが出現するノードの識別子には、これらのループが始点と終点となるノードの識別子が親切にも接頭辞として付けられている。さらに、以下の図に示すように、1つの動作で複数回のループを巡回することができます。</target>
        </trans-unit>
        <trans-unit id="9a674369e325bdf29f6edf8edb945b651c6ac731" translate="yes" xml:space="preserve">
          <source>The latest release is available on PyPi, simply &lt;code&gt;pip install absynthe&lt;/code&gt;. The
&lt;code&gt;master&lt;/code&gt; branch of this repository will always provide the latest release.</source>
          <target state="translated">最新リリースはPyPiで入手できます。単に &lt;code&gt;pip install absynthe&lt;/code&gt; です。このリポジトリの &lt;code&gt;master&lt;/code&gt; ブランチは常に最新のリリースを提供します。</target>
        </trans-unit>
        <trans-unit id="3cbe8139be6dadccd55954ec95da87dbf1e698b5" translate="yes" xml:space="preserve">
          <source>This package has been developed with &lt;code&gt;Python 3.6.*&lt;/code&gt; and depends on &lt;code&gt;scipy 1.2.1&lt;/code&gt;.
Things might not work with &lt;code&gt;Python 3.7.*&lt;/code&gt; or &lt;code&gt;scipy 1.3.*&lt;/code&gt;. Therefore, consider
creating a virtual environment if your default configuration differs.</source>
          <target state="translated">このパッケージは &lt;code&gt;Python 3.6.*&lt;/code&gt; 開発され、 &lt;code&gt;scipy 1.2.1&lt;/code&gt; に依存しています。 &lt;code&gt;Python 3.7.*&lt;/code&gt; または &lt;code&gt;scipy 1.3.*&lt;/code&gt; では動作しない場合があります。したがって、デフォルトの構成が異なる場合は、仮想環境の作成を検討してください。</target>
        </trans-unit>
        <trans-unit id="0980855b93454e712e2b015cc0f5655541facb06" translate="yes" xml:space="preserve">
          <source>Tree-like CFG</source>
          <target state="translated">ツリーライクCFG</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="2d75d8dd04fd465844923c80ddf7cebda12ec86a" translate="yes" xml:space="preserve">
          <source>You need Absynthe if you wish to simulate the behavior of any well defined
process -- whether it's a computer application or a business process flow.</source>
          <target state="translated">コンピュータアプリケーションでもビジネスプロセスフローでも、明確に定義されたプロセスの動作をシミュレートしたい場合には、Absyntheが必要です。</target>
        </trans-unit>
        <trans-unit id="cfdf820be882593b466c12770bb42a1d31992322" translate="yes" xml:space="preserve">
          <source>any concrete implementation of the abstract &lt;code&gt;Behavior&lt;/code&gt; class, which
traverses the CFGs generated above and emits log messages.</source>
          <target state="translated">上記で生成されたCFGをトラバースし、ログメッセージを出力する抽象 &lt;code&gt;Behavior&lt;/code&gt; クラスの具体的な実装。</target>
        </trans-unit>
        <trans-unit id="f56a005cb54785defd2347c651da587bf8d12c8c" translate="yes" xml:space="preserve">
          <source>any concrete implementation of the abstract &lt;code&gt;GraphBuilder&lt;/code&gt; class, which
generates CFGs, and</source>
          <target state="translated">&lt;code&gt;GraphBuilder&lt;/code&gt; を生成する抽象GraphBuilderクラスの具体的な実装、および</target>
        </trans-unit>
        <trans-unit id="1746725b3599b57f2c3c7c184a1e129a4b71bc36" translate="yes" xml:space="preserve">
          <source>attaching loops on some of the nodes,</source>
          <target state="translated">ノードの一部にループをアタッチしています。</target>
        </trans-unit>
        <trans-unit id="8de1898ddf3eff19dd8e421cfc5bd3eabb848a8c" translate="yes" xml:space="preserve">
          <source>constructing skip-level edges, i.e. edges from a node at level &lt;code&gt;i&lt;/code&gt; to a
node at level &amp;ge;&lt;code&gt;(i + 2)&lt;/code&gt;, and</source>
          <target state="translated">スキップレベルのエッジ、つまりレベル &lt;code&gt;i&lt;/code&gt; のノードからレベル&amp;ge; &lt;code&gt;(i + 2)&lt;/code&gt; ノードへのエッジの作成、および</target>
        </trans-unit>
        <trans-unit id="e1d5d9897e5bb0bd39df7fb5b19b181ff8ea808c" translate="yes" xml:space="preserve">
          <source>optionally, upward edges (not shown here), i.e. edges from a node at
level &lt;code&gt;i&lt;/code&gt; to a node at level &amp;le;&lt;code&gt;(i - 1)&lt;/code&gt;.</source>
          <target state="translated">オプションで、上向きのエッジ（ここには表示されていません）、つまりレベル &lt;code&gt;i&lt;/code&gt; のノードからレベル&amp;le; &lt;code&gt;(i - 1)&lt;/code&gt; ノードへのエッジ。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
