<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/grako/">
    <body>
      <group id="grako">
        <trans-unit id="4784be16436864f71cc9672f745adebbe734a561" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;Dennis Ritchie&lt;/a&gt; (1941-2011)</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;デニス・リッチー&lt;/a&gt;（1941-2011）</target>
        </trans-unit>
        <trans-unit id="d33ab16238e758409a4929d3e0d4d79170dccce6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; is a great language for working with language parsing and translation.</source>
          <target state="translated">&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;は、言語の解析と翻訳を行うのに最適な言語です。</target>
        </trans-unit>
        <trans-unit id="9173c79f634b5c1ee5c5a3f6a450c82857535ff3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;At least for the people who send me mail about a new language that they&amp;rsquo;re designing, the general advice is: do it to learn about how to write a compiler. Don&amp;rsquo;t have any expectations that anyone will use it, unless you hook up with some sort of organization in a position to push it hard. It&amp;rsquo;s a lottery, and some can buy a lot of the tickets. There are plenty of beautiful languages (more beautiful than C) that didn&amp;rsquo;t catch on. But someone does win the lottery, and doing a language at least teaches you something.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;少なくとも、彼らが設計している新しい言語について私にメールを送ってくる人々にとって、一般的なアドバイスは、コンパイラーの書き方を学ぶためにそれを行うことです。あなたがそれを一生懸命に推し進める立場にあるある種の組織と繋がらない限り、誰もがそれを使うことを期待しないでください。宝くじで、たくさんのチケットを買える人もいます。追いつかなかった美​​しい言語（Cよりも美しい）がたくさんあります。しかし、誰かが宝くじに当選し、言語を行うことは少なくともあなたに何かを教えます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9cd32f9a64f66e3f1e92f2d3295a021d9250efa8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Positive and negative lookaheads&lt;/em&gt;, and the &lt;em&gt;cut&lt;/em&gt; element (with its cleaning of the memoization cache) allow for additional, hand-crafted optimizations at the grammar level.</source>
          <target state="translated">&lt;em&gt;正と負の先読み&lt;/em&gt;、および&lt;em&gt;カット&lt;/em&gt;要素（メモ化キャッシュのクリーニングを含む）により、文法レベルでの追加の手作りの最適化が可能になります。</target>
        </trans-unit>
        <trans-unit id="3451857826106f627f426aedc8a1625020f56def" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; (for &lt;em&gt;grammar compiler&lt;/em&gt;) is a tool that takes grammars in a variation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt; as input, and outputs &lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoizing&lt;/a&gt; (&lt;a href=&quot;http://bford.info/packrat/&quot;&gt;Packrat&lt;/a&gt;) &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parsers in &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;（&lt;em&gt;文法コンパイラ用&lt;/em&gt;）は、&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNFの&lt;/a&gt;バリエーションの文法を入力として受け取り、&lt;a href=&quot;http://python.org&quot;&gt;Pythonで&lt;/a&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;メモ化&lt;/a&gt;（&lt;a href=&quot;http://bford.info/packrat/&quot;&gt;Packrat&lt;/a&gt;）&lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt;パーサーを出力するツールです。</target>
        </trans-unit>
        <trans-unit id="96d115f7edccd957024570c7f59eb004a1abbc54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; can also compile a grammar stored in a string into a</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;は、文字列に格納されている文法をコンパイルして、</target>
        </trans-unit>
        <trans-unit id="5e252d8adf9f8d7f679f07a346459bc97962fdb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; is &lt;em&gt;different&lt;/em&gt; from other &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parser generators:</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;は、他の&lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt;パーサジェネレーターとは&lt;em&gt;異なり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cae77d5bd2e58e1ae20d3dd7dee10a10a9c037c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; is feature-complete and currently being used with complex grammars to parse, analyze, and translate hundreds of thousands of lines of input text, including source code in several programming languages.</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;は機能が&lt;strong&gt;充実&lt;/strong&gt;しており、現在、複雑な文法で使用されており、いくつかのプログラミング言語のソースコードを含む、数十万行の入力テキストを解析、分析、翻訳しています。</target>
        </trans-unit>
        <trans-unit id="18f89b63e0d8d958e85ae07f9fe7bdd6c944757a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; was created to address some recurring problems encountered over decades of working with parser generation tools:</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt;は、パーサー生成ツールを使用して数十年にわたって発生したいくつかの繰り返し発生する問題に対処するために作成されました。</target>
        </trans-unit>
        <trans-unit id="b5ce5decf77605100580ce22e928c0123812aa93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;em&gt;DEVELOPMENT OF GRAKO HAS STOPPED&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;GRAKOの開発は停止しました&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e298f9b741ca46826580289e198d319f2582e58" translate="yes" xml:space="preserve">
          <source>Automatic generation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;Abstract Syntax Trees&lt;/a&gt; and Object Models, along with &lt;em&gt;Model Walkers&lt;/em&gt; and &lt;em&gt;Code Generators&lt;/em&gt; make analysis and translation approachable</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;抽象構文木&lt;/a&gt;とオブジェクトモデルの自動生成、および&lt;em&gt;モデルウォーカー&lt;/em&gt;と&lt;em&gt;コードジェネレーター&lt;/em&gt;により、分析と翻訳が&lt;em&gt;親しみ&lt;/em&gt;やすくなります。</target>
        </trans-unit>
        <trans-unit id="8aa57de6dce6ee1c35c6aba7426503281876b258" translate="yes" xml:space="preserve">
          <source>Changes</source>
          <target state="translated">変更点</target>
        </trans-unit>
        <trans-unit id="3d7268de642e81fe33fc02c6192b5394b70af1fb" translate="yes" xml:space="preserve">
          <source>Creator of the &lt;a href=&quot;http://en.wikipedia.org/wiki/C_language&quot;&gt;C&lt;/a&gt; programming language and of &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unix&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/C_language&quot;&gt;C&lt;/a&gt;プログラミング言語と&lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unixの&lt;/a&gt;作成者</target>
        </trans-unit>
        <trans-unit id="0cc53949dbf52cda6c9c708fa39f2c4e03372552" translate="yes" xml:space="preserve">
          <source>Delegation to &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; module for &lt;em&gt;lexemes&lt;/em&gt; allows for (&lt;a href=&quot;http://www.perl.org/&quot;&gt;Perl&lt;/a&gt;-like) powerful and efficient lexical analysis.</source>
          <target state="translated">&lt;em&gt;語彙素用&lt;/em&gt;の&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;の&lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt;モジュールへの委任により、（&lt;a href=&quot;http://www.perl.org/&quot;&gt;Perlの&lt;/a&gt;ような）強力で効率的な字句解析が可能になります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">ドキュメント</target>
        </trans-unit>
        <trans-unit id="681b8515024fa7916ec123b3549da902d51a6208" translate="yes" xml:space="preserve">
          <source>Generated parsers should be easy to read and debug by humans. Looking at the generated source code is sometimes the only way to find problems in a grammar, the semantic actions, or in the parser generator itself. It&amp;rsquo;s inconvenient to trust generated code that one cannot understand.</source>
          <target state="translated">生成されたパーサーは、人間が読みやすく、デバッグしやすいものでなければなりません。生成されたソースコードを確認することが、文法、セマンティックアクション、またはパーサジェネレータ自体の問題を見つける唯一の方法である場合があります。生成されたコードを信頼して理解できないのは不便です。</target>
        </trans-unit>
        <trans-unit id="76f845b11158ab0286548c14cec0c121d6bbd47d" translate="yes" xml:space="preserve">
          <source>Generated parsers use &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s very efficient exception-handling system to backtrack. &lt;strong&gt;Grako&lt;/strong&gt; generated parsers simply assert what must be parsed. There are no complicated &lt;em&gt;if-then-else&lt;/em&gt; sequences for decision making or backtracking. Memoization allows going over the same input sequence several times in linear time.</source>
          <target state="translated">生成されたパーサーは、&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;の非常に効率的な例外処理システムを使用してバックトラックします。&lt;strong&gt;Grakoで&lt;/strong&gt;生成されたパーサーは、何を解析する必要があるかを単に表明します。意思決定やバックトラックのための複雑な&lt;em&gt;if-then-else&lt;/em&gt;シーケンスはあり&lt;em&gt;ません&lt;/em&gt;。メモ化により、同じ入力シーケンスを線形時間で数回実行できます。</target>
        </trans-unit>
        <trans-unit id="18206f68d40065c1f40256be2b8dc8a21f41a464" translate="yes" xml:space="preserve">
          <source>Grako</source>
          <target state="translated">グラコ</target>
        </trans-unit>
        <trans-unit id="6253aa0b0e4ccb4b5ac966af71e55203f6647a95" translate="yes" xml:space="preserve">
          <source>Grako takes a grammar in a variation of EBNF as input, and outputs a memoizing PEG/Packrat parser in Python.</source>
          <target state="translated">GrakoはEBNFのバリエーションの文法を入力として受け取り、PythonでメモをとるPEG/Packratパーサを出力します。</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">文法</target>
        </trans-unit>
        <trans-unit id="4a8046fe523970120912fccf857dbd6aca85ed64" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in the technology, or in future developments such as proper support for left recursion, then please follow the &lt;a href=&quot;https://pypi.python.org/pypi/tatsu&quot;&gt;Tatsu&lt;/a&gt; project.</source>
          <target state="translated">このテクノロジー、または左再帰の適切なサポートなどの将来の開発に興味がある場合は、&lt;a href=&quot;https://pypi.python.org/pypi/tatsu&quot;&gt;Tatsu&lt;/a&gt;プロジェクトに従ってください。</target>
        </trans-unit>
        <trans-unit id="78c589e22d8a0b1fc429384f8cbc3ac1db8365ab" translate="yes" xml:space="preserve">
          <source>Include files, rule inheritance, and rule inclusion give &lt;strong&gt;Grako&lt;/strong&gt; grammars considerable expressive power.</source>
          <target state="translated">インクルードファイル、ルールの継承、およびルールのインクルードは、&lt;strong&gt;Grako&lt;/strong&gt;文法にかなりの表現力を与えます。</target>
        </trans-unit>
        <trans-unit id="92bbdfa77d1a626bc85b41f02d51c64bfd2c18e7" translate="yes" xml:space="preserve">
          <source>It is easy to recruit help with knowledge about a mainstream programming language like &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;, but help is hard to find for working with complex grammar-description languages. &lt;strong&gt;Grako&lt;/strong&gt; grammars are in the spirit of a &lt;em&gt;Translators and Interpreters 101&lt;/em&gt; course (if something is hard to explain to a college student, it&amp;rsquo;s probably too complicated, or not well understood).</source>
          <target state="translated">&lt;a href=&quot;http://python.org&quot;&gt;Pythonの&lt;/a&gt;ような主流のプログラミング言語に関する知識を持ったヘルプを募集するのは簡単ですが、複雑な文法記述言語を扱うためのヘルプを見つけるのは困難です。&lt;strong&gt;グラコの&lt;/strong&gt;文法は、&lt;em&gt;翻訳者と通訳者101&lt;/em&gt;コースの精神に基づいています（大学生に説明するのが難しい場合は、おそらく複雑すぎるか、よく理解されていません）。</target>
        </trans-unit>
        <trans-unit id="02bb67e6cc89e14999f6a90a934010b7f7c13bdc" translate="yes" xml:space="preserve">
          <source>LL and LR grammars become contaminated with myriads of lookahead statements to deal with ambiguous constructs in the source language. &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parsers address ambiguity from the onset.</source>
          <target state="translated">LLおよびLR文法は、ソース言語のあいまいな構成を処理するための無数の先読みステートメントで汚染されます。&lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt;パーサーは、最初からあいまいさに対処します。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">ライセンス</target>
        </trans-unit>
        <trans-unit id="e796128e20dca9168d541e6b047b6047325e3780" translate="yes" xml:space="preserve">
          <source>Preprocessing (like dealing with includes, fixed column formats, or structure-through-indentation) belongs in well-designed program code; not in the grammar.</source>
          <target state="translated">前処理(インクルード、固定列形式、インデントを通した構造など)は、文法の中ではなく、よく設計されたプログラムコードの中で行われます。</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">根拠</target>
        </trans-unit>
        <trans-unit id="858be1680530539f957c139bee2bebf6eee8af08" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="25d2be045a32363cbde1def910edb8f3e046e4dd" translate="yes" xml:space="preserve">
          <source>Semantic actions &lt;em&gt;do not&lt;/em&gt;  belong in a grammar. They create yet another programming language to deal with when doing parsing and translation: the source language, the grammar language, the semantics language, the generated parser&amp;rsquo;s language, and the translation&amp;rsquo;s target language. Most grammar parsers do not check the syntax of embedded semantic actions, so errors get reported at awkward moments, and against the generated code, not against the grammar.</source>
          <target state="translated">セマンティックアクション&lt;em&gt;は&lt;/em&gt; 文法に属して&lt;em&gt;いません&lt;/em&gt;。それらは、構文解析と翻訳を行うときに処理するさらに別のプログラミング言語を作成します。ソース言語、文法言語、セマンティクス言語、生成されたパーサーの言語、および翻訳のターゲット言語です。ほとんどの文法パーサーは、埋め込まれたセマンティックアクションの構文をチェックしないため、エラーは、文法に対してではなく、生成されたコードに対して、厄介な瞬間に報告されます。</target>
        </trans-unit>
        <trans-unit id="d6afa14e36dcba3c2e920822346be6dde11e35ba" translate="yes" xml:space="preserve">
          <source>Separating the grammar from the code that implements the semantics, and using a variation of a well-known grammar syntax (&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt;) allows for full declarative power in language descriptions. General-purpose programming languages are not up to the task.</source>
          <target state="translated">セマンティクスを実装するコードから文法を分離し、よく知られている文法構文（&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt;）のバリエーションを使用すると、言語記述で完全な宣言力が得られます。汎用プログラミング言語はその任務を果たせません。</target>
        </trans-unit>
        <trans-unit id="be662f8f9b0c089fe4bb6c790411386a0f4151c6" translate="yes" xml:space="preserve">
          <source>Some programming languages allow the use of &lt;em&gt;keywords&lt;/em&gt; as identifiers, or have different meanings for symbols depending on context (&lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;). A parser needs control of lexical analysis to be able to handle those languages.</source>
          <target state="translated">一部のプログラミング言語では、&lt;em&gt;キーワード&lt;/em&gt;を識別子として使用できるか、コンテキストに応じて記号の意味が異なります（&lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;）。パーサーは、これらの言語を処理できるようにするために字句解析を制御する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d09aa2b6d57d449611e9a1932f33d9572fa6d78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/README.md&quot;&gt;complete documentation&lt;/a&gt; is available at &lt;strong&gt;Grako&lt;/strong&gt;&amp;rsquo;s &lt;a href=&quot;https://bitbucket.org/neogeny/grako/&quot;&gt;home page&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/README.md&quot;&gt;完全な文書は&lt;/a&gt;で入手できます&lt;strong&gt;Grako&lt;/strong&gt;さん&lt;a href=&quot;https://bitbucket.org/neogeny/grako/&quot;&gt;のホームページ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bf08bc76382ad0b914e5b8affbbf72d16c3e77dd" translate="yes" xml:space="preserve">
          <source>The only dependencies are on the &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; standard library, yet the &lt;a href=&quot;https://pypi.python.org/pypi/regex&quot;&gt;regex&lt;/a&gt; library will be used if installed, and &lt;a href=&quot;https://pypi.python.org/pypi/colorama/&quot;&gt;colorama&lt;/a&gt; will be used on trace output if available.  &lt;a href=&quot;https://pypi.python.org/pypi/pygraphviz&quot;&gt;pygraphviz&lt;/a&gt; is required for generating diagrams.</source>
          <target state="translated">唯一の依存関係は&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;標準ライブラリにありますが、インストールされている場合は&lt;a href=&quot;https://pypi.python.org/pypi/regex&quot;&gt;正規表現&lt;/a&gt;ライブラリが使用され、使用可能な場合はトレース出力で&lt;a href=&quot;https://pypi.python.org/pypi/colorama/&quot;&gt;colorama&lt;/a&gt;が使用されます。 ダイアグラムの生成には&lt;a href=&quot;https://pypi.python.org/pypi/pygraphviz&quot;&gt;pygraphviz&lt;/a&gt;が必要です。</target>
        </trans-unit>
        <trans-unit id="083a2119512e7c2fd127dfa7cdd816418ca95241" translate="yes" xml:space="preserve">
          <source>The parser generator, the run-time support, and the generated parsers have measurably low &lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;Cyclomatic complexity&lt;/a&gt;.  At around 5 &lt;a href=&quot;http://en.wikipedia.org/wiki/KLOC&quot;&gt;KLOC&lt;/a&gt; of &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;, it is possible to study all its source code in a single session.</source>
          <target state="translated">パーサジェネレータ、ランタイムサポート、および生成されたパーサは、&lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;循環的複雑度がかなり&lt;/a&gt;低くなっています。約5時&lt;a href=&quot;http://en.wikipedia.org/wiki/KLOC&quot;&gt;KLOC&lt;/a&gt;の&lt;a href=&quot;http://python.org&quot;&gt;パイソン&lt;/a&gt;、単一のセッションでそのすべてのソースコードを勉強することが可能です。</target>
        </trans-unit>
        <trans-unit id="b2fc2a23b30cf230f79e5698d481f48b0648e949" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;http://docs.python.org/2/library/contextlib.html&quot;&gt;context managers&lt;/a&gt; considerably reduces the size of the generated parsers for code clarity, and enhanced CPU-cache hits.</source>
          <target state="translated">&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;の&lt;a href=&quot;http://docs.python.org/2/library/contextlib.html&quot;&gt;コンテキストマネージャーを&lt;/a&gt;使用すると、生成されるパーサーのサイズが大幅に削減され、コードが明確になり、CPUキャッシュヒットが強化されます。</target>
        </trans-unit>
        <trans-unit id="814155b159afb05e0e13696a70e7146843e9fa92" translate="yes" xml:space="preserve">
          <source>You may use &lt;strong&gt;Grako&lt;/strong&gt; under the terms of the &lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29&quot;&gt;BSD&lt;/a&gt;-style license described in the enclosed &lt;strong&gt;LICENSE.txt&lt;/strong&gt; file. &lt;em&gt;If your project requires different licensing&lt;/em&gt; please &lt;a href=&quot;mailto:apalala%40gmail.com&quot;&gt;email&lt;/a&gt;.</source>
          <target state="translated">同封の&lt;strong&gt;LICENSE.txt&lt;/strong&gt;ファイルに記載されている&lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29&quot;&gt;BSD&lt;/a&gt;スタイルのライセンスの条件の下で&lt;strong&gt;Grako&lt;/strong&gt;を使用できます。&lt;em&gt;プロジェクトに別のライセンスが必要な場合は、&lt;/em&gt;&lt;a href=&quot;mailto:apalala%40gmail.com&quot;&gt;メールで&lt;/a&gt;&lt;em&gt;お問い合わせ&lt;/em&gt;ください。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="509f2c59a959ba7aab427f88785cad273b2dedab" translate="yes" xml:space="preserve">
          <source>object that can be used to parse any given input, much like the &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; module does with regular expressions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt;モジュールが正規表現で行うのと同じように、任意の入力を解析するために使用できるオブジェクト。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
