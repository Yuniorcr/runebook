<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/aiodnsresolver/">
    <body>
      <group id="aiodnsresolver">
        <trans-unit id="5271bccbbe941ae52abb53cc0fecaec4be011917" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2017-2909&quot;&gt;Pointer loops&lt;/a&gt; are detected.</source>
          <target state="translated">&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2017-2909&quot;&gt;ポインターループ&lt;/a&gt;が検出されました。</target>
        </trans-unit>
        <trans-unit id="929dca150227ac071b7a3bc11408a076f3f42dcd" translate="yes" xml:space="preserve">
          <source>A cache is part of each &lt;code&gt;Resolver()&lt;/code&gt;, expiring records automatically according to their TTL.</source>
          <target state="translated">キャッシュは各 &lt;code&gt;Resolver()&lt;/code&gt; の一部であり、TTLに従って自動的にレコードを期限切れにします。</target>
        </trans-unit>
        <trans-unit id="211b06c40eb506400c76ecdf544257469ed37a5b" translate="yes" xml:space="preserve">
          <source>A higher risk assumption is that many tests use the, otherwise private, &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;parse&lt;/code&gt; functions as part of the built-in DNS server that is used by the tests. These are the core functions used by the production code used to pack and parse DNS messages. While asserting that the resolver can communicate to the built-in nameserver, all the tests do is assert that &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;parse&lt;/code&gt; are consistent with each other: it is an assumption that other nameservers have equivalent behaviour.</source>
          <target state="translated">より高いリスクの想定では、多くのテストでは、テストで使用される組み込みDNSサーバーの一部として、それ以外の場合は非公開の &lt;code&gt;pack&lt;/code&gt; および &lt;code&gt;parse&lt;/code&gt; 機能を使用します。これらは、DNSメッセージのパックと解析に使用される製品コードで使用されるコア関数です。リゾルバーが組み込みネームサーバーと通信できることをアサートしながら、すべてのテストは、 &lt;code&gt;pack&lt;/code&gt; と &lt;code&gt;parse&lt;/code&gt; が相互に一貫していることをアサートします。これは、他のネームサーバーが同等の動作をすることを前提としています。</target>
        </trans-unit>
        <trans-unit id="5e187dda81d772797388202838eb2eeeac356582" translate="yes" xml:space="preserve">
          <source>A maximum of two messages per DNS query are logged at &lt;code&gt;INFO&lt;/code&gt;. If a nameserver fails, a &lt;code&gt;WARNING&lt;/code&gt; is issued [although an exception will be raised if no nameservers succeed], and the remainder of messages are logged at &lt;code&gt;DEBUG&lt;/code&gt;. No &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;CRITICAL&lt;/code&gt; messages are issued when exceptions are raised: it is the responsiblity of client code to log these if desired.</source>
          <target state="translated">DNSクエリごとに最大2つのメッセージが &lt;code&gt;INFO&lt;/code&gt; に記録されます。ネームサーバーが失敗すると、 &lt;code&gt;WARNING&lt;/code&gt; が発行されます（ただし、ネームサーバーが成功しない場合は例外が発生します）。残りのメッセージは &lt;code&gt;DEBUG&lt;/code&gt; に記録されます。例外が発生しても &lt;code&gt;ERROR&lt;/code&gt; または &lt;code&gt;CRITICAL&lt;/code&gt; メッセージは発行されません。必要に応じてこれらをログに記録するのはクライアントコードの責任です。</target>
        </trans-unit>
        <trans-unit id="51f7f0ed3e00a224445ea9af92863e69074b3f06" translate="yes" xml:space="preserve">
          <source>A new socket, and so a new random local port, is used for each query.</source>
          <target state="translated">新しいソケット、つまり新しいランダムなローカルポートがクエリごとに使用されます。</target>
        </trans-unit>
        <trans-unit id="9100aca195719601490d3778547d5c3de3ae9465" translate="yes" xml:space="preserve">
          <source>Also, to migitate the risk of evil responses/configuration</source>
          <target state="translated">また、悪質な対応/設定のリスクをマイグレーションするために</target>
        </trans-unit>
        <trans-unit id="52e9f6aaf6e7b4bf71883e35141db1b9fcfd8250" translate="yes" xml:space="preserve">
          <source>Asyncio Python DNS resolver. Pure Python, with no dependencies other than the standard library, threads are not used, no additional tasks are created, and all code is in a single module. The nameservers to query are taken from &lt;code&gt;/etc/resolv.conf&lt;/code&gt;, and treats hosts in &lt;code&gt;/etc/hosts&lt;/code&gt; as A or AAAA records with a TTL of 0.</source>
          <target state="translated">Asyncio Python DNSリゾルバー。純粋なPython、標準ライブラリ以外の依存関係はなく、スレッドは使用されず、追加のタスクは作成されず、すべてのコードが単一のモジュールに含まれます。照会するネームサーバーは &lt;code&gt;/etc/resolv.conf&lt;/code&gt; から取得され、 &lt;code&gt;/etc/hosts&lt;/code&gt; 内のホストをTTLが0のAまたはAAAAレコードとして扱います。</target>
        </trans-unit>
        <trans-unit id="61a84ef6505fac2720810c22f65c1971715da98b" translate="yes" xml:space="preserve">
          <source>By default each domain name is encoded with &lt;a href=&quot;https://astrolavos.gatech.edu/articles/increased_dns_resistance.pdf&quot;&gt;0x20-bit encoding&lt;/a&gt; before being sent to the nameservers. However, some nameservers, such as Docker's built-in, do not support this. So, to control or disable the encoding, you can pass a custom &lt;code&gt;transform_fqdn&lt;/code&gt; coroutine to Resolver that does not perform any additional encoding.</source>
          <target state="translated">デフォルトでは、各ドメイン名はネームサーバーに送信される前に&lt;a href=&quot;https://astrolavos.gatech.edu/articles/increased_dns_resistance.pdf&quot;&gt;0x20ビットのエンコーディングでエンコード&lt;/a&gt;されます。ただし、Dockerの組み込みなど、一部のネームサーバーはこれをサポートしていません。したがって、エンコーディングを制御または無効にするために、追加のエンコーディングを実行しないカスタムの &lt;code&gt;transform_fqdn&lt;/code&gt; コルーチンをResolverに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e4c00516cc8b5ef50215908476d463b79c1132af" translate="yes" xml:space="preserve">
          <source>By default each domain name is encoded with &lt;a href=&quot;https://astrolavos.gatech.edu/articles/increased_dns_resistance.pdf&quot;&gt;0x20-bit encoding&lt;/a&gt;, which is checked against any response.</source>
          <target state="translated">デフォルトでは、各ドメイン名は&lt;a href=&quot;https://astrolavos.gatech.edu/articles/increased_dns_resistance.pdf&quot;&gt;0x20ビットエンコーディングでエンコードされ&lt;/a&gt;、応答に対してチェックされます。</target>
        </trans-unit>
        <trans-unit id="503d0636b431f0d0a6b8edd31c135f4675377d16" translate="yes" xml:space="preserve">
          <source>By default logging is through the &lt;code&gt;Logger&lt;/code&gt; named &lt;code&gt;aiodnsresolver&lt;/code&gt;, and all messages are prefixed with &lt;code&gt;[dns]&lt;/code&gt; or &lt;code&gt;[dns:&amp;lt;fqdn&amp;gt;,&amp;lt;query-type&amp;gt;]&lt;/code&gt; through a &lt;code&gt;LoggerAdapter&lt;/code&gt;. Each function accepts &lt;code&gt;get_logger_adapter&lt;/code&gt;: the default of which results in this behaviour, and can be overridden to set either the &lt;code&gt;Logger&lt;/code&gt; or the &lt;code&gt;LoggerAdapter&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、ロギングは経由で &lt;code&gt;Logger&lt;/code&gt; という名前 &lt;code&gt;aiodnsresolver&lt;/code&gt; 、およびすべてのメッセージは、接頭辞が付きます &lt;code&gt;[dns]&lt;/code&gt; または &lt;code&gt;[dns:&amp;lt;fqdn&amp;gt;,&amp;lt;query-type&amp;gt;]&lt;/code&gt; を通じて &lt;code&gt;LoggerAdapter&lt;/code&gt; 。各関数は &lt;code&gt;get_logger_adapter&lt;/code&gt; を受け入れます。デフォルトはこの動作になり、オーバーライドして &lt;code&gt;Logger&lt;/code&gt; または &lt;code&gt;LoggerAdapter&lt;/code&gt; を設定できます。</target>
        </trans-unit>
        <trans-unit id="83abfbe2bfed3c1a456c2d7e47463ba5e76f0bf5" translate="yes" xml:space="preserve">
          <source>CNAME chains have a maximum length.</source>
          <target state="translated">CNAMEチェーンには最大長があります。</target>
        </trans-unit>
        <trans-unit id="73ab091294665e57efeb4610bc88824653477946" translate="yes" xml:space="preserve">
          <source>CNAME records are followed transparently. The &lt;code&gt;expires_at&lt;/code&gt; of IP addresses found via intermediate CNAME(s) is determined by using the minimum &lt;code&gt;expires_at&lt;/code&gt; of all the records involved in determining those IP addresses.</source>
          <target state="translated">CNAMEレコードは透過的に追跡されます。 &lt;code&gt;expires_at&lt;/code&gt; 中間CNAME（s）が最小使用して決定される介してIPアドレスのが見つかり &lt;code&gt;expires_at&lt;/code&gt; それらのIPアドレスを決定する際に関与するすべてのレコードを。</target>
        </trans-unit>
        <trans-unit id="86ce9e2117503436712e78317ab8f9b96432ceac" translate="yes" xml:space="preserve">
          <source>CNAMEs</source>
          <target state="translated">CNAMEMS</target>
        </trans-unit>
        <trans-unit id="50338b3b242845e21a0ace9ae9684283d945fb52" translate="yes" xml:space="preserve">
          <source>Cache</source>
          <target state="translated">キャッシュ</target>
        </trans-unit>
        <trans-unit id="2061cc2c0ce561bb4de9ddce9e6148ae313ff804" translate="yes" xml:space="preserve">
          <source>Chaining logging adapters</source>
          <target state="translated">ロギングアダプタのチェーン化</target>
        </trans-unit>
        <trans-unit id="8c053f773becf89e1d9c570970fcb6dea5254931" translate="yes" xml:space="preserve">
          <source>Custom hosts</source>
          <target state="translated">カスタムホスト</target>
        </trans-unit>
        <trans-unit id="95f255134c54184a554be6e3edb813828ba95cc9" translate="yes" xml:space="preserve">
          <source>Custom nameservers and timeouts</source>
          <target state="translated">カスタムネームサーバーとタイムアウト</target>
        </trans-unit>
        <trans-unit id="4331f6e2659b79348247b80b3a69e3c78192b683" translate="yes" xml:space="preserve">
          <source>Designed for highly concurrent/HA situations. Based on &lt;a href=&quot;https://github.com/gera2ld/async_dns&quot;&gt;https://github.com/gera2ld/async_dns&lt;/a&gt;.</source>
          <target state="translated">高度な並行性/ HA状況向けに設計されています。&lt;a href=&quot;https://github.com/gera2ld/async_dns&quot;&gt;https://github.com/gera2ld/async_dnsに&lt;/a&gt;基づいています。</target>
        </trans-unit>
        <trans-unit id="7d4318283b3f106b523e323d9909c77fc9121b46" translate="yes" xml:space="preserve">
          <source>Disable 0x20-bit encoding</source>
          <target state="translated">0x20ビットエンコーディングを無効にする</target>
        </trans-unit>
        <trans-unit id="325543124cab344013bc013d35cbe2a615311047" translate="yes" xml:space="preserve">
          <source>Each query is given a random ID, which is checked against any response.</source>
          <target state="translated">各クエリにはランダムなIDが与えられ、これは任意のレスポンスと照合されます。</target>
        </trans-unit>
        <trans-unit id="8d63cc4af916c7b99a241bad8b0d502181c245e4" translate="yes" xml:space="preserve">
          <source>Event loop, tasks, and yielding</source>
          <target state="translated">イベントループ、タスク、降伏</target>
        </trans-unit>
        <trans-unit id="8f118b077e6a503af07b266e698154147805e76c" translate="yes" xml:space="preserve">
          <source>Example: aiohttp</source>
          <target state="translated">例:aiohttp</target>
        </trans-unit>
        <trans-unit id="db74fe5b20374d125b242d991f69908b127e41ce" translate="yes" xml:space="preserve">
          <source>Example: lowhaio</source>
          <target state="translated">例:ローハイオ</target>
        </trans-unit>
        <trans-unit id="daa475826a7caf2c8d6e1edf8f9fcbc611880db5" translate="yes" xml:space="preserve">
          <source>Example: tornado</source>
          <target state="translated">例:竜巻</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">例外</target>
        </trans-unit>
        <trans-unit id="5e214e6879427a717b554f7c20bad14ac9ba6048" translate="yes" xml:space="preserve">
          <source>Exceptions are subclasses of &lt;code&gt;DnsError&lt;/code&gt;, and are raised if a record does not exist, on socket errors, timeouts, message parsing errors, or other errors returned from the nameserver.</source>
          <target state="translated">例外は &lt;code&gt;DnsError&lt;/code&gt; のサブクラスであり、ソケットエラー、タイムアウト、メッセージ解析エラー、またはネームサーバーから返されたその他のエラーで、レコードが存在しない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="5481c7b8170c168b824c771b6718a3b6d2901efe" translate="yes" xml:space="preserve">
          <source>For CNAME chains, the event loop is yielded during each communication for non-cached parts of the chain.</source>
          <target state="translated">CNAMEチェーンの場合、チェーンのキャッシュされていない部分については、各通信中にイベントループが発生します。</target>
        </trans-unit>
        <trans-unit id="d1ce204dbf3ac8a86a74a6e0f2ade815849b3dd0" translate="yes" xml:space="preserve">
          <source>For complex or highly concurrent applications, it may be desirable that logging adapters be chained to output log messages that incorporate a parent context. So the default ouput of</source>
          <target state="translated">複雑なアプリケーションや高度に同時進行するアプリケーションでは、親コンテキストを組み込んだログメッセージを出力するようにロギングアダプタを連結しておくことが望ましいかもしれません。そのため、デフォルトの</target>
        </trans-unit>
        <trans-unit id="37b6d39ee4f6fbd194c7fcc66f1205f74e971cac" translate="yes" xml:space="preserve">
          <source>If a lower-level exception caused the &lt;code&gt;DnsError&lt;/code&gt;, it will be in the &lt;code&gt;__cause__&lt;/code&gt; attribute of the exception.</source>
          <target state="translated">下位レベルの例外によって &lt;code&gt;DnsError&lt;/code&gt; が発生した場合、それは例外の &lt;code&gt;__cause__&lt;/code&gt; 属性に含まれます。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="98c528a0f6bb272f1be116323214c541e9884abd" translate="yes" xml:space="preserve">
          <source>It is possible to query nameservers other than those in &lt;code&gt;/etc/resolv.conf&lt;/code&gt;, and for each to specify a timeout in seconds to wait for a reply before querying the next.</source>
          <target state="translated">&lt;code&gt;/etc/resolv.conf&lt;/code&gt; にあるネームサーバー以外のネームサーバーにクエリを実行し、次のクエリを実行する前に応答を待つタイムアウトを秒単位で指定できます。</target>
        </trans-unit>
        <trans-unit id="15c9db7d7fff447ccf33673477c532475866aef0" translate="yes" xml:space="preserve">
          <source>It is technically possible that in the case of extremely high numbers of A or AAAA records for a domain, they would not fit in a single UDP message. However, this is extremely unlikely, and in this unlikely case, extremely unlikely to affect target applications in any meaningful way. If a truncated message is received, a warning is logged.</source>
          <target state="translated">あるドメインのAまたはAAAAAレコードの数が非常に多い場合、それらが単一のUDPメッセージに収まらないことは技術的に可能である。しかし、これは非常に可能性が低く、また、この可能性が低い場合、ターゲットアプリケーションに意味のある方法で影響を与える可能性は非常に低い。切り詰められたメッセージを受信した場合、警告がログに記録される。</target>
        </trans-unit>
        <trans-unit id="24c4c96f064c57e2f915eb36267d9c1af72b39d9" translate="yes" xml:space="preserve">
          <source>It's possible to specify hosts without editing the &lt;code&gt;/etc/hosts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;/etc/hosts&lt;/code&gt; ファイルを編集せずにホストを指定することが可能です。</target>
        </trans-unit>
        <trans-unit id="81abd20921dba1c2e53084d841b924ad28377ed3" translate="yes" xml:space="preserve">
          <source>Log levels</source>
          <target state="translated">ログレベル</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">ロギング</target>
        </trans-unit>
        <trans-unit id="bf89335514117c4e318f57395975d95081d6e290" translate="yes" xml:space="preserve">
          <source>Many tests assume that timeouts are controlled by &lt;code&gt;asyncio.sleep&lt;/code&gt;, &lt;code&gt;loop.call_later&lt;/code&gt; or &lt;code&gt;loop.call_at&lt;/code&gt;. This is to allow time to be fast-forwarded through cache invalidation using &lt;a href=&quot;https://github.com/michalc/aiofastforward&quot;&gt;aiofastforward&lt;/a&gt; without actually having to wait the corresponding time in the tests. Also, many tests assume &lt;code&gt;open&lt;/code&gt; is used to access files, and patch it to allow assertions on what the code would do with different contents of &lt;code&gt;/etc/resolv.conf&lt;/code&gt; or &lt;code&gt;/etc/hosts&lt;/code&gt;.</source>
          <target state="translated">多くのテストでは、タイムアウトが &lt;code&gt;asyncio.sleep&lt;/code&gt; 、 &lt;code&gt;loop.call_later&lt;/code&gt; 、または &lt;code&gt;loop.call_at&lt;/code&gt; によって制御されていると想定しています。これは、テストで対応する時間を実際に待つ&lt;a href=&quot;https://github.com/michalc/aiofastforward&quot;&gt;必要&lt;/a&gt;なく、aiofastforwardを使用してキャッシュ無効化によって時間を早送りできるようにするためです。また、多くのテストでは、ファイルへのアクセスに &lt;code&gt;open&lt;/code&gt; が使用されていることを想定しており、パッチを適用して、 &lt;code&gt;/etc/hosts&lt;/code&gt; &lt;code&gt;/etc/resolv.conf&lt;/code&gt; または/ etc / hostsの異なる内容でコードが何を実行するかをアサーションできるようにしています。</target>
        </trans-unit>
        <trans-unit id="47e6cc73f64a548366be4705e275679eeccea863" translate="yes" xml:space="preserve">
          <source>No extra code is needed to use aiodnsresolver with &lt;a href=&quot;https://github.com/michalc/lowhaio&quot;&gt;lowhaio&lt;/a&gt;: it is used by default.</source>
          <target state="translated">lowhaioで&lt;a href=&quot;https://github.com/michalc/lowhaio&quot;&gt;aiodnsresolver&lt;/a&gt;を使用するために追加のコードは必要ありません。これはデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="0dd8a289d527539de842bf7f512ddc6f16bab278" translate="yes" xml:space="preserve">
          <source>No tasks are created, and the event loop is only yielded to during socket communication. Because fetching results from the cache involves no socket communication, this means that cached results are fetched without yielding. This introduces a small inconsistency between fetching cached and non-cached results, and so clients should be written to not depend on the presence or lack of a yield during resolution. This is a typically recommended process however: it should be expected that coroutines might yield.</source>
          <target state="translated">タスクは作成されず、イベントループはソケット通信中にのみイールドされます。キャッシュからの結果のフェッチにはソケット通信が含まれていないため、キャッシュされた結果は降伏せずにフェッチされることになります。このため、キャッシュ結果のフェッチとキャッシュされていない結果の間には小さな矛盾が生じるため、クライアントは解決時にイールドの有無に依存しないように書くべきです。しかし、これは一般的に推奨される処理です。</target>
        </trans-unit>
        <trans-unit id="13af06a45ae2e367e0503ca4e7145d79f1f7d234" translate="yes" xml:space="preserve">
          <source>Parallel requests to multiple nameservers are also possible, where the first response from each set of requests is used.</source>
          <target state="translated">複数のネームサーバへの並列リクエストも可能で、各リクエストのセットからの最初のレスポンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="7fd5bb751b3ce87db39b88c5e968bcfa48b440a4" translate="yes" xml:space="preserve">
          <source>Pure asyncio Python DNS resolver</source>
          <target state="translated">Pure asyncio Python DNSリゾルバ</target>
        </trans-unit>
        <trans-unit id="bef2a4699d00603b20da781b86d5845c0046fb44" translate="yes" xml:space="preserve">
          <source>Requests made for a domain while there is an in-flight query for that domain, wait for the the in-flight query to finish, and use its result.</source>
          <target state="translated">そのドメインに対するインフライトクエリが存在する間にドメインに対して行われたリクエストは、インフライトクエリが終了するのを待ち、その結果を使用します。</target>
        </trans-unit>
        <trans-unit id="c1ada94ed2819eb16c6fe64f64fb6e10147a7afd" translate="yes" xml:space="preserve">
          <source>Returned are tuples of subclasses of &lt;a href=&quot;https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address&quot;&gt;IPv4Address&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address&quot;&gt;IPv6Address&lt;/a&gt;. Both support conversion to their usual string form by passing them to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address&quot;&gt;IPv4Address&lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address&quot;&gt;IPv6Addressの&lt;/a&gt;サブクラスのタプルが返されます。どちらも &lt;code&gt;str&lt;/code&gt; に渡すことで、通常の文字列形式への変換をサポートしています。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">範囲</target>
        </trans-unit>
        <trans-unit id="2931d5d3232f2248933a3926c6bcfde0392f4223" translate="yes" xml:space="preserve">
          <source>Security considerations</source>
          <target state="translated">セキュリティへの配慮</target>
        </trans-unit>
        <trans-unit id="d4bcd58ee108472a46cd86b218d9752854fdfe5c" translate="yes" xml:space="preserve">
          <source>Specifically, if a record is determined to not exist, &lt;code&gt;DnsRecordDoesNotExist&lt;/code&gt; is raised.</source>
          <target state="translated">具体的には、レコードが存在しないと判断された場合、 &lt;code&gt;DnsRecordDoesNotExist&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="fd95ae54dec0b2580591259365e6f9ec1bc37a56" translate="yes" xml:space="preserve">
          <source>TTL / Record expiry</source>
          <target state="translated">TTL/レコードの有効期限</target>
        </trans-unit>
        <trans-unit id="d84c76a661a2d9eed7c499c29179e4493a22dfb7" translate="yes" xml:space="preserve">
          <source>Testing strategy</source>
          <target state="translated">テスト戦略</target>
        </trans-unit>
        <trans-unit id="724d10488fa0d7f2fcdb5593b3ca64e996ef7b86" translate="yes" xml:space="preserve">
          <source>Tests attempt to closly match real-world use, and assert on how input translate to output, i.e. the &lt;em&gt;public&lt;/em&gt; behaviour of the resolver. Therefore the tests avoid assumptions on implementation details.</source>
          <target state="translated">テストは、実際の使用とほぼ一致するように試み、入力が出力にどのように変換されるか、つまりリゾルバーの&lt;em&gt;パブリック&lt;/em&gt;動作をアサートします。したがって、テストでは実装の詳細に関する仮定を回避します。</target>
        </trans-unit>
        <trans-unit id="8c7516866aa18f7d36f81b46de3023d136af8722" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoggerAdapter&lt;/code&gt; used by &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;clear_cache&lt;/code&gt; defaults to the one passed to &lt;code&gt;Resolver&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LoggerAdapter&lt;/code&gt; はで使用 &lt;code&gt;resolve&lt;/code&gt; と &lt;code&gt;clear_cache&lt;/code&gt; に渡されたものにデフォルト &lt;code&gt;Resolver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="466b71a3cf44833cb3278ebc0b07a27c257d9e55" translate="yes" xml:space="preserve">
          <source>The address objects each have an extra property, &lt;code&gt;expires_at&lt;/code&gt;, that returns the expiry time of the address, according to the &lt;code&gt;loop.time()&lt;/code&gt; clock, and the TTL of the records involved to find that address.</source>
          <target state="translated">それぞれのアドレスオブジェクトには追加のプロパティ &lt;code&gt;expires_at&lt;/code&gt; があり、 &lt;code&gt;loop.time()&lt;/code&gt; クロックとそのアドレスを見つけるために必要なレコードのTTL に従って、アドレスの有効期限を返します。</target>
        </trans-unit>
        <trans-unit id="9e9f8b0ae56b3bb4ce43ae4f8e3ab8863677bbde" translate="yes" xml:space="preserve">
          <source>The cache for each record starts on the &lt;em&gt;start&lt;/em&gt; of each request, so duplicate concurrent requests for the same record are not made.</source>
          <target state="translated">各レコードのキャッシュは、各要求の&lt;em&gt;開始時&lt;/em&gt;に開始されるため、同じレコードに対する重複した同時要求は行われません。</target>
        </trans-unit>
        <trans-unit id="a30c90204c5ee38410b23c24343172c003f232be" translate="yes" xml:space="preserve">
          <source>The resolver is a &lt;em&gt;stub&lt;/em&gt; resolver: it delegates the responsibility of recursion to the nameserver(s) it queries. In the vast majority of envisioned use cases this is acceptable, since the nameservers in &lt;code&gt;/etc/resolv.conf&lt;/code&gt; will be recursive.</source>
          <target state="translated">リゾルバーは&lt;em&gt;スタブ&lt;/em&gt;リゾルバーであり、再帰の責任を照会するネームサーバーに委任します。 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 内のネームサーバーは再帰的であるため、想定されるユースケースの大部分ではこれは許容されます。</target>
        </trans-unit>
        <trans-unit id="ad52e794eb4fcc06ecc4985810a0f8022f6a02b9" translate="yes" xml:space="preserve">
          <source>The scope of this project is deliberately restricted to operations that are used to resolve A or AAAA records: to resolve a domain name to its IP addresses so that IP connections can be made, and have similar responsibilities to &lt;code&gt;gethostbyname&lt;/code&gt;. Some limited extra behaviour is present/may be added, but great care is taken to prevent scope creep, especially to not add complexity that isn't required to resolve A or AAAA records.</source>
          <target state="translated">このプロジェクトの範囲は、AまたはAAAAレコードを解決するために使用される操作に意図的に制限されています。ドメイン名をIPアドレスに解決してIP接続を確立できるようにし、 &lt;code&gt;gethostbyname&lt;/code&gt; と同様の責任を負います。制限付きの追加の動作が存在する/追加される場合がありますが、スコープのクリープを防止するために、特にAまたはAAAAレコードの解決に必要のない複雑さを追加しないように、細心の注意が払われています。</target>
        </trans-unit>
        <trans-unit id="57e4103bc66f1c02c2c9e171ff330eee6102ce2e" translate="yes" xml:space="preserve">
          <source>The trade-off for this inconsistency is that cached results are fetched slightly faster than if resolving were to yield in all cases.</source>
          <target state="translated">この矛盾のトレードオフは、すべてのケースで解決した場合よりも、キャッシュされた結果がわずかに速くフェッチされることです。</target>
        </trans-unit>
        <trans-unit id="568b9215249186337b28f4ddd655addeb1beaa3b" translate="yes" xml:space="preserve">
          <source>There are however exceptions.</source>
          <target state="translated">ただし、例外もあります。</target>
        </trans-unit>
        <trans-unit id="b70f278fda8094a172d4312fe7f6e058f3578c19" translate="yes" xml:space="preserve">
          <source>This can be used as part of a HA system: if a nameserver isn't contactable, this pattern avoids waiting for its timeout before querying another nameserver.</source>
          <target state="translated">これは HA システムの一部として使用することができます:ネームサーバがコンタクト可能でない場合、このパターンは他のネームサーバに問い合わせる前にタイムアウトを待たずに済みます。</target>
        </trans-unit>
        <trans-unit id="cbcd6514ef7beea9d2b0457fb1fbbe2b4b520b8e" translate="yes" xml:space="preserve">
          <source>This can be used in HA situations to assist failovers. The timer for &lt;code&gt;expires_at&lt;/code&gt; starts just &lt;em&gt;before&lt;/em&gt; the request to the nameserver is made.</source>
          <target state="translated">これは、HA状況でフェイルオーバーを支援するために使用できます。 &lt;code&gt;expires_at&lt;/code&gt; のタイマーは、ネームサーバーへのリクエストが行われる直前&lt;em&gt;に&lt;/em&gt;開始されます。</target>
        </trans-unit>
        <trans-unit id="69758f85250db2d85cf4c9bb890236bb8f46f07d" translate="yes" xml:space="preserve">
          <source>To do this, set &lt;code&gt;get_logger_adapter&lt;/code&gt; as a function that chains multiple &lt;code&gt;LoggerAdapter&lt;/code&gt;.</source>
          <target state="translated">これを行うには、複数の &lt;code&gt;LoggerAdapter&lt;/code&gt; をチェーンする関数として &lt;code&gt;get_logger_adapter&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="e5453419f7808d077e72a0951df66da4d335a1ef" translate="yes" xml:space="preserve">
          <source>To migitate spoofing, several techniques are used.</source>
          <target state="translated">なりすましを移行するには、いくつかのテクニックが使われます。</target>
        </trans-unit>
        <trans-unit id="fdac2c4c6b417e4e42de66d3df4d768bdf14bb25" translate="yes" xml:space="preserve">
          <source>To mitigate the risks that these assumptions bring, some &quot;end to end&quot;-style tests are included, which use whatever nameservers are in &lt;code&gt;/etc/resolv.conf&lt;/code&gt;, and asserting on globally available DNS results. While not going through every possible case of input, they do validate that core behaviour is consistent with one other implementation of the protocol.</source>
          <target state="translated">これらの想定がもたらすリスクを軽減するために、「エンドツーエンド」スタイルのテストがいくつか含まれています。このテストでは、/ &lt;code&gt;/etc/resolv.conf&lt;/code&gt; にあるネームサーバーを使用し、グローバルに利用可能なDNS結果をアサートします。入力のすべての可能なケースを通過するわけではありませんが、コアの動作がプロトコルの他の1つの実装と一致していることを検証します。</target>
        </trans-unit>
        <trans-unit id="ee99461aee3846058cc1f0f7023e131f12d74143" translate="yes" xml:space="preserve">
          <source>UDP queries are made, but not TCP. DNS servers must support UDP, and it's impossible for a single A and AAAA record to not fit into the maximum size of a UDP DNS response, 512 bytes. There may be other data that the DNS server would return in TCP connections, but this isn't required to resolve a domain name to a single IP address.</source>
          <target state="translated">UDPクエリは行われますが、TCPは行われません。DNSサーバーはUDPをサポートしなければならず、単一のAとAAAAAレコードがUDP DNS応答の最大サイズである512バイトに収まらないことはあり得ない。DNSサーバーがTCP接続で返すデータは他にもあるかもしれませんが、ドメイン名を1つのIPアドレスに解決するためには必要ありません。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="e3eb7e120df55fe0ce4ae5e02b1795d6bc597530" translate="yes" xml:space="preserve">
          <source>While both being assumptions, they are both unlikely to change, and in the case that they are changed, this would much more likely result in tests failing incorrectly rather than passing incorrectly. Therefore these are low-risk assumptions.</source>
          <target state="translated">どちらも仮定ではありますが、どちらも変更される可能性は低く、変更された場合には、テストが間違って通過するよりも、間違って不合格になる可能性の方が高いでしょう。したがって、これらはリスクの低い仮定です。</target>
        </trans-unit>
        <trans-unit id="f7cccc0372b47247d5fc2e3825d4126fb7823822" translate="yes" xml:space="preserve">
          <source>aiodnsresolver</source>
          <target state="translated">アイオドンスレゾルバ</target>
        </trans-unit>
        <trans-unit id="08aea82c41d0ad520a61ea165d592487b6c577fe" translate="yes" xml:space="preserve">
          <source>or performs it conditionally</source>
          <target state="translated">または条件付きで実行します。</target>
        </trans-unit>
        <trans-unit id="e329b5389944db05ea8909e826a45be38a49022b" translate="yes" xml:space="preserve">
          <source>would be prefixed with a &lt;em&gt;parent&lt;/em&gt; context to output something like</source>
          <target state="translated">のようなものを出力するために&lt;em&gt;親&lt;/em&gt;コンテキストがプレフィックスされます</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
