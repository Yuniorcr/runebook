<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/mbed-host-tests/">
    <body>
      <group id="mbed-host-tests">
        <trans-unit id="73f206237358af4e214f2ad31e03066659a22927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;IP_address&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;port_number&amp;gt;&lt;/code&gt; - IP address and port of remote resource manager.</source>
          <target state="translated">&lt;code&gt;&amp;lt;IP_address&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;port_number&amp;gt;&lt;/code&gt; -リモートリソースマネージャーのIPアドレスとポート。</target>
        </trans-unit>
        <trans-unit id="2315dd8635db49d10d5ff717a07556886c485353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;config_name&amp;gt;&lt;/code&gt; - ether pre-defined CONFIG_NAME from mbedfm or a local config file for the Fast Models.</source>
          <target state="translated">&lt;code&gt;&amp;lt;config_name&amp;gt;&lt;/code&gt; -mbedfmからの事前定義されたCONFIG_NAMEまたは高速モデルのローカル構成ファイル。</target>
        </trans-unit>
        <trans-unit id="17c0b030ceb8c6259d29f69c159b24b1152ff97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;module_name&amp;gt;&lt;/code&gt; - name of Python module to load as remote resource manager.</source>
          <target state="translated">&lt;code&gt;&amp;lt;module_name&amp;gt;&lt;/code&gt; -リモートリソースマネージャーとしてロードするPythonモジュールの名前。</target>
        </trans-unit>
        <trans-unit id="62e60b103cf49cca316e125268312fad8ae04e38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--sync=-1&lt;/code&gt;- &lt;code&gt;__sync&lt;/code&gt; packets will be sent unless we will reach timeout or proper response is sent from DUT.</source>
          <target state="translated">&lt;code&gt;--sync=-1&lt;/code&gt; - &lt;code&gt;__sync&lt;/code&gt; 我々はタイムアウトに達するだろうか、適切な応答がDUTから送信されない限り、パケットが送信されます。</target>
        </trans-unit>
        <trans-unit id="1bde794eaa5ce5cdd871c8a8ed159f2745b594f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--sync=0&lt;/code&gt; - No sync packets will be sent to DUT.</source>
          <target state="translated">&lt;code&gt;--sync=0&lt;/code&gt; -同期パケットはDUTに送信されません。</target>
        </trans-unit>
        <trans-unit id="9202d111f81be25b256c55649110d666c93d381e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--sync=N&lt;/code&gt; - Where N is integer &amp;gt; 0. Send up to N &lt;code&gt;__sync&lt;/code&gt; packets to target platform. Response is sent unless we get response from target platform or timeout occurs.</source>
          <target state="translated">&lt;code&gt;--sync=N&lt;/code&gt; --Nは整数&amp;gt; 0です。最大N個の &lt;code&gt;__sync&lt;/code&gt; パケットをターゲットプラットフォームに送信します。ターゲットプラットフォームから応答を取得するか、タイムアウトが発生しない限り、応答が送信されます。</target>
        </trans-unit>
        <trans-unit id="4b945ede260654e0f827dbfaa6e83ea7b0de2d24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONN&lt;/code&gt; - connection process (pooling for connection source e.g. serial port),</source>
          <target state="translated">&lt;code&gt;CONN&lt;/code&gt; -接続プロセス（シリアルポートなどの接続ソースのプーリング）、</target>
        </trans-unit>
        <trans-unit id="aa36907e745e96b081ba0cf5430162f2088874fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COPY&lt;/code&gt; - host test plugins, type &lt;code&gt;CopyMethod&lt;/code&gt; of the plugin,</source>
          <target state="translated">&lt;code&gt;COPY&lt;/code&gt; -ホスト・テスト・プラグイン、型 &lt;code&gt;CopyMethod&lt;/code&gt; プラグインの、</target>
        </trans-unit>
        <trans-unit id="252ece708e3ba5fff9ea90f1c513c684f79d7ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ERR&lt;/code&gt; (error).</source>
          <target state="translated">&lt;code&gt;ERR&lt;/code&gt; （エラー）。</target>
        </trans-unit>
        <trans-unit id="0324877f43e21edc185859f23fc35c8063d0a492" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HTST&lt;/code&gt; - host test object, HostTestBase derived object,</source>
          <target state="translated">&lt;code&gt;HTST&lt;/code&gt; -ホストテスト・オブジェクト、HostTestBaseは、オブジェクトを導出しました</target>
        </trans-unit>
        <trans-unit id="ae0c1f99a757da1a18a9f18f9a7c5c896def47d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INF&lt;/code&gt; (info),</source>
          <target state="translated">&lt;code&gt;INF&lt;/code&gt; （情報）、</target>
        </trans-unit>
        <trans-unit id="b5068e5fbd010807231f1efd39c83bf9820c804d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PLGN&lt;/code&gt; - host test plugins, type &lt;code&gt;BasePlugin&lt;/code&gt; of the plugin,</source>
          <target state="translated">&lt;code&gt;PLGN&lt;/code&gt; -ホストテストプラグイン、プラグインの &lt;code&gt;BasePlugin&lt;/code&gt; と入力し、</target>
        </trans-unit>
        <trans-unit id="68dcc3ab0c52c817a21c29b3f4309a9a3e6599ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REST&lt;/code&gt; - host test plugins, type &lt;code&gt;ResetMethod&lt;/code&gt; of the plugin,</source>
          <target state="translated">&lt;code&gt;REST&lt;/code&gt; -ホスト・テスト・プラグイン、型 &lt;code&gt;ResetMethod&lt;/code&gt; プラグインの、</target>
        </trans-unit>
        <trans-unit id="d6504288f35fb136d6facff97c815828c12809b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RXD&lt;/code&gt; (host's RX channel, from DUT).</source>
          <target state="translated">&lt;code&gt;RXD&lt;/code&gt; （DUTからのホストのRXチャネル）。</target>
        </trans-unit>
        <trans-unit id="be48e576ff325b898d77d4109b00a276a9b5f49e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RXD&lt;/code&gt; channel emitted &lt;code&gt;{{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RXD&lt;/code&gt; チャネルが放出されました &lt;code&gt;{{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4eebcb9ceef0a9470046493bd884b5166dee8de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SERI&lt;/code&gt; - serial port wrapper with standard read, write, flush interface,</source>
          <target state="translated">&lt;code&gt;SERI&lt;/code&gt; -標準の読み取り、書き込み、フラッシュインターフェイスを備えたシリアルポートラッパー、</target>
        </trans-unit>
        <trans-unit id="525831b4e82343e67b3190b1ce9c195f0b1d1201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TXD&lt;/code&gt; (host's TX channel, to DUT).</source>
          <target state="translated">&lt;code&gt;TXD&lt;/code&gt; （ホストのTXチャネル、DUTへ）。</target>
        </trans-unit>
        <trans-unit id="8d94a283f05853dc0c1c67fa44a75a42ed73e149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRN&lt;/code&gt; (warning),</source>
          <target state="translated">&lt;code&gt;WRN&lt;/code&gt; （警告）、</target>
        </trans-unit>
        <trans-unit id="a424516ef2e22ca2f296966a65c99bdb62aff720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[1455218713.87][CONN][RXD] {{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;[1455218713.87][CONN][RXD] {{__sync;a7ace3a2-4025-4950-b9fc-a3671103387a}}&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3ebf8ec5cbec6661a8f3fef93bbd7aae0404f050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[timestamp][source][level]&lt;/code&gt; - new log format, where:</source>
          <target state="translated">&lt;code&gt;[timestamp][source][level]&lt;/code&gt; -新しいログ形式。ここで、</target>
        </trans-unit>
        <trans-unit id="aebb6375919652bf3cd4cec03e3f2f2c7f08969b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__coverage_start&lt;/code&gt; - sent by DUT, coverage data.</source>
          <target state="translated">&lt;code&gt;__coverage_start&lt;/code&gt; -DUT、カバレッジデータによって送信されます。</target>
        </trans-unit>
        <trans-unit id="aef3110f389e82af1973c9bcd0c75c246fa8a691" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__exit&lt;/code&gt; - sent by DUT, test suite execution finished.</source>
          <target state="translated">&lt;code&gt;__exit&lt;/code&gt; -DUTによって送信され、テストスイートの実行が終了しました。</target>
        </trans-unit>
        <trans-unit id="e73f1f004a2d367ad3306a388160e6bd776dcd7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__exit_event_queue&lt;/code&gt; - sent by host test, indicating no more events expected.</source>
          <target state="translated">&lt;code&gt;__exit_event_queue&lt;/code&gt; -ホストテストによって送信され、これ以上イベントが予想されないことを示します。</target>
        </trans-unit>
        <trans-unit id="66ab6ccf2d92f9d1d9a8d6179803a40238c95c5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__host_test_name&lt;/code&gt; - host test name, sent by DUT after &lt;code&gt;{{sync;UUID}}&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;__host_test_name&lt;/code&gt; - &lt;code&gt;{{sync;UUID}}&lt;/code&gt; が受信された後にDUTによって送信されるホストテスト名。</target>
        </trans-unit>
        <trans-unit id="b4c381c842b653117058d4eb629f3b159890c58e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_complete&lt;/code&gt; - sent by DUT, async notificaion about test case result (true, false, none).</source>
          <target state="translated">&lt;code&gt;__notify_complete&lt;/code&gt; -DUTによって送信され、テストケースの結果に関する非同期通知（true、false、none）。</target>
        </trans-unit>
        <trans-unit id="70915690f15f4057e050e62023b57db39122af21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_conn_lost&lt;/code&gt; - sent by host test's connection process to notify serial port connection lost.</source>
          <target state="translated">&lt;code&gt;__notify_conn_lost&lt;/code&gt; -シリアルポート接続が失われたことを通知するために、ホストテストの接続プロセスによって送信されます。</target>
        </trans-unit>
        <trans-unit id="38605565e3847c0ad513f2ba8dea7090207e8d27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_prn&lt;/code&gt; - sent by host test to print log message.</source>
          <target state="translated">&lt;code&gt;__notify_prn&lt;/code&gt; -ログメッセージを出力するためにホストテストによって送信されます。</target>
        </trans-unit>
        <trans-unit id="2536463805107e8572fd2f50d4dafe64b11ed998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__notify_sync_failed&lt;/code&gt; - sent by host when sync response not received from DUT.</source>
          <target state="translated">&lt;code&gt;__notify_sync_failed&lt;/code&gt; -同期応答がDUTから受信されなかったときにホストによって送信されます。</target>
        </trans-unit>
        <trans-unit id="73a87a44a506b29d322e968afa4e11f08928f7f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__rxd_line&lt;/code&gt; - Event triggered when &lt;code&gt;\n&lt;/code&gt; was found on DUT RXD channel. It can be overridden (&lt;code&gt;self.register_callback('__rxd_line', &amp;lt;callback_function&amp;gt;)&lt;/code&gt;) and used by user. Event is sent by host test to notify a new line of text was received on RXD channel. &lt;code&gt;__rxd_line&lt;/code&gt; event payload (value) in a line of text received from DUT over RXD.</source>
          <target state="translated">&lt;code&gt;__rxd_line&lt;/code&gt; - DUTRXDチャネルで &lt;code&gt;\n&lt;/code&gt; が見つかったときにトリガーされるイベント。オーバーライドして（ &lt;code&gt;self.register_callback('__rxd_line', &amp;lt;callback_function&amp;gt;)&lt;/code&gt; ）、ユーザーが使用できます。イベントはホストテストによって送信され、RXDチャネルで新しいテキスト行が受信されたことを通知します。RXDを介してDUTから受信したテキスト行の &lt;code&gt;__rxd_line&lt;/code&gt; イベントペイロード（値）。</target>
        </trans-unit>
        <trans-unit id="0522521478639533401e1883eff02556a26666be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__sync&lt;/code&gt; - sync message, used by master and DUT to handshake.</source>
          <target state="translated">&lt;code&gt;__sync&lt;/code&gt; -同期メッセージ。マスターとDUTがハンドシェイクに使用します。</target>
        </trans-unit>
        <trans-unit id="e44e21591905935c4722b68cea21bca505ee8d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__testcase_finish&lt;/code&gt; - sent by DUT, test case result.</source>
          <target state="translated">&lt;code&gt;__testcase_finish&lt;/code&gt; -DUTによって送信され、テストケースの結果。</target>
        </trans-unit>
        <trans-unit id="b1b2477cddf45a8f624498658f7c0e05338b1976" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__testcase_start&lt;/code&gt; - sent by DUT, test case start data.</source>
          <target state="translated">&lt;code&gt;__testcase_start&lt;/code&gt; -DUTによって送信され、テストケースの開始データ。</target>
        </trans-unit>
        <trans-unit id="a72bf43954020d842d07f1c5611e30859cebb23a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__timeout&lt;/code&gt; - timeout in sec, sent by DUT after &lt;code&gt;{{sync;UUID}}&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;__timeout&lt;/code&gt; - &lt;code&gt;{{sync;UUID}}&lt;/code&gt; が受信された後、DUTによって送信される秒単位のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="f256f495b16d358fb749994641994004470ab033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__version&lt;/code&gt; - &lt;code&gt;greentea-client&lt;/code&gt; version send from DUT to host.</source>
          <target state="translated">&lt;code&gt;__version&lt;/code&gt; - &lt;code&gt;greentea-client&lt;/code&gt; バージョンがDUTからホストに送信されます。</target>
        </trans-unit>
        <trans-unit id="6aab874b35584a0d5e82976158f12f70a498f241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htrun&lt;/code&gt; has extensive command line. In most cases &lt;code&gt;htrun&lt;/code&gt; (or its command line avatar &lt;code&gt;mbedhtrun&lt;/code&gt;) will be run in background:</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; には広範なコマンドラインがあります。ほとんどの場合、 &lt;code&gt;htrun&lt;/code&gt; （またはそのコマンドラインアバター &lt;code&gt;mbedhtrun&lt;/code&gt; ）はバックグラウンドで実行されます。</target>
        </trans-unit>
        <trans-unit id="1bfd8fc28acb332ed6a8cb6f250ba9930873af0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htrun&lt;/code&gt; is redistributed with sources, as Python 2.7 compatible module called &lt;code&gt;mbed-host-tests&lt;/code&gt; and command line tool called &lt;code&gt;mbedhtrun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; は、 &lt;code&gt;mbed-host-tests&lt;/code&gt; と呼ばれるPython 2.7互換モジュールおよび &lt;code&gt;mbedhtrun&lt;/code&gt; と呼ばれるコマンドラインツールとして、ソースとともに再配布されます。</target>
        </trans-unit>
        <trans-unit id="a09ab1183cd1a4455515d2dfa623110358964aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;htrun&lt;/code&gt; new log format:</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; の新しいログ形式：</target>
        </trans-unit>
        <trans-unit id="146047f10bfe28e6ca1342363d40e58580f19413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;level&lt;/code&gt; - logging level:</source>
          <target state="translated">&lt;code&gt;level&lt;/code&gt; -ログレベル：</target>
        </trans-unit>
        <trans-unit id="d230633f3997fb0cd8a87b415d32dfb4f5ec4ee9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbed-host-tests&lt;/code&gt; module is redistributed via PyPI. We recommend you use the &lt;a href=&quot;https://pip.pypa.io/en/latest/installing.html#install-pip&quot;&gt;application pip&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;mbed-host-tests&lt;/code&gt; モジュールはPyPIを介して再配布されます。&lt;a href=&quot;https://pip.pypa.io/en/latest/installing.html#install-pip&quot;&gt;アプリケーションpipの&lt;/a&gt;使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="9ab7b650f12a748dc308096fa0d77c6e039d3f5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbed-host-tests&lt;/code&gt; responsibilities are:</source>
          <target state="translated">&lt;code&gt;mbed-host-tests&lt;/code&gt; の責任は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="41c86f566beb36c6b6b2c4d73651b3ec643725db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_complete(result : bool)&lt;/code&gt; used by host test to notify test case result. This result will be read after test suite &lt;code&gt;TIMEOUT&lt;/code&gt;s or after DUT send &lt;code&gt;__exit&lt;/code&gt; message (test suite execution finished event).</source>
          <target state="translated">&lt;code&gt;notify_complete(result : bool)&lt;/code&gt; は、テストケースの結果を通知するためにホストテストによって使用されます。この結果は、テストスイートの後に読み込まれます &lt;code&gt;TIMEOUT&lt;/code&gt; 秒またはDUTの後に送信 &lt;code&gt;__exit&lt;/code&gt; のメッセージ（テストスイートの実行完成イベント）。</target>
        </trans-unit>
        <trans-unit id="172d5caa7d56ca7f7d3a296400bb8c3531f32901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result()&lt;/code&gt; used to return test case result when &lt;code&gt;notify_complete()&lt;/code&gt; is not called.</source>
          <target state="translated">&lt;code&gt;result()&lt;/code&gt; は、 &lt;code&gt;notify_complete()&lt;/code&gt; が呼び出されていないときにテストケースの結果を返すために使用されます。</target>
        </trans-unit>
        <trans-unit id="633f8b8babe06c499ac945176a533e88fe992987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self.log(text : string)&lt;/code&gt; - send event &lt;code&gt;__notify_prn&lt;/code&gt; with text as payload (value). Your message will be printed in log.</source>
          <target state="translated">&lt;code&gt;self.log(text : string)&lt;/code&gt; -ペイロード（値）としてテキストを &lt;code&gt;__notify_prn&lt;/code&gt; してイベント__notify_prnを送信します。メッセージはログに出力されます。</target>
        </trans-unit>
        <trans-unit id="528d177a7da06eb7a40d93df454c3d1b17ba45ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self.send_kv(key : string, value : string)&lt;/code&gt; - send key-value message to DUT.</source>
          <target state="translated">&lt;code&gt;self.send_kv(key : string, value : string)&lt;/code&gt; -ValueメッセージをDUTに送信します。</target>
        </trans-unit>
        <trans-unit id="3fa3134d5f4f9085110c25014db8a0a89b5f2f5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup()&lt;/code&gt; used to initialize host test and register callbacks.</source>
          <target state="translated">&lt;code&gt;setup()&lt;/code&gt; は、ホストテストの初期化とコールバックの登録に使用されます。</target>
        </trans-unit>
        <trans-unit id="3d3df85d101648df2a2e38a07d2767c6bede72a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; - log source.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; -ログソース。</target>
        </trans-unit>
        <trans-unit id="d8d216f69ea1a3eaa95ba6458b40f43c08f477d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;teardown()&lt;/code&gt; used to finalize and resource freeing. It is guaranteed that &lt;code&gt;teardown()&lt;/code&gt; will be always called after timeout or async test completion().</source>
          <target state="translated">&lt;code&gt;teardown()&lt;/code&gt; ファイナライズとリソース解放に使用されるteardown（）。 &lt;code&gt;teardown()&lt;/code&gt; は、タイムアウトまたは非同期テストのcompletion（）の後に常に呼び出されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="2d70bf3e0f99480aa5b2daca6cbfcc9765092684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; - returned by Python's &lt;code&gt;time.time()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;timestamp&lt;/code&gt; &lt;code&gt;time.time()&lt;/code&gt; のtime.time（）によって返されます。</target>
        </trans-unit>
        <trans-unit id="c10001035cfba5804245ebe313f1c7cddd149675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utest&lt;/code&gt; harness allows you to define multiple test cases inside your test suite. This feature is supported by &lt;code&gt;Greentea&lt;/code&gt; test tools.</source>
          <target state="translated">&lt;code&gt;utest&lt;/code&gt; ハーネスを使用すると、テストスイート内で複数のテストケースを定義できます。この機能は、 &lt;code&gt;Greentea&lt;/code&gt; テストツールでサポートされています。</target>
        </trans-unit>
        <trans-unit id="ccf7d45fdb7a3ec8da001ef50e0b0789523e0ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{key;value}}&lt;/code&gt; string captured on DUT output.</source>
          <target state="translated">&lt;code&gt;{{key;value}}&lt;/code&gt; DUT出力でキャプチャされた文字列。</target>
        </trans-unit>
        <trans-unit id="978812719c428d1362d193a491e176614ac1cf5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Blocking&lt;/strong&gt; wait for key-value pair message in input stream:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;入力ストリームでのKey-Valueペアメッセージの待機の&lt;strong&gt;ブロック&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="bf04b208a59aca6656cbaf500f2714b821fc5dea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Event exchange&lt;/strong&gt; - key-value event exchange between slave and master. In this exchange in general slave (DUT) will initialize communication. This part may end with ending pair of events &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;__exit&lt;/code&gt; where &lt;code&gt;end&lt;/code&gt; event carries test suite result returned by DUT and &lt;code&gt;__exit&lt;/code&gt; event marks test suite ended and exited. After &lt;code&gt;__exit&lt;/code&gt; event is received there will be no more communication between DUT and host test.</source>
          <target state="translated">&lt;strong&gt;イベント交換&lt;/strong&gt;-スレーブとマスター間のKey-Valueイベント交換。この交換では、一般的にスレーブ（DUT）が通信を初期化します。この部分は、イベント &lt;code&gt;end&lt;/code&gt; と &lt;code&gt;__exit&lt;/code&gt; のペアを終了して終了する場合があります。ここで、 &lt;code&gt;end&lt;/code&gt; イベントはDUTによって返されるテストスイートの結果を運び、 &lt;code&gt;__exit&lt;/code&gt; イベントはテストスイートが終了して終了したことを示します。後 &lt;code&gt;__exit&lt;/code&gt; イベントが受信されるDUTとホスト試験の間に複数の通信が存在しないであろう。</target>
        </trans-unit>
        <trans-unit id="b82b304ec2e4d8ca5c5d2b85582fa51e84fcd23a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Handshake&lt;/strong&gt; - synchronize master and slave.</source>
          <target state="translated">&lt;strong&gt;ハンドシェイク&lt;/strong&gt;-マスターとスレーブを同期します。</target>
        </trans-unit>
        <trans-unit id="22001cf273403186960b9b8e3ec3f02a2b7da50d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Python 2.7.9 onwards include &lt;code&gt;pip&lt;/code&gt; by default, so you may have &lt;code&gt;pip&lt;/code&gt; already.
&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;mbed-host-tests&lt;/code&gt; module is redistributed with &lt;code&gt;mbed-greentea&lt;/code&gt; module as a dependency. So if you've already installed Greentea &lt;code&gt;mbed-host-tests&lt;/code&gt; should be there!</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Python 2.7.9以降にはデフォルトで &lt;code&gt;pip&lt;/code&gt; が含まれているため、すでに &lt;code&gt;pip&lt;/code&gt; を使用している可能性があります。 &lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;mbed-host-tests&lt;/code&gt; モジュールは、依存関係として &lt;code&gt;mbed-greentea&lt;/code&gt; モジュールとともに再配布されます。したがって、すでにGreentea &lt;code&gt;mbed-host-tests&lt;/code&gt; をインストールしている場合は、そこにあるはずです。</target>
        </trans-unit>
        <trans-unit id="7ba071ca9346f715811b90bbcf80176dafdd545a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Switch -m &amp;lt;platform_name&amp;gt; is required to tell Global Resource Management which platform to request.
&lt;strong&gt;Note&lt;/strong&gt;: Command line switch &lt;code&gt;--grm&lt;/code&gt; implicitly forces &lt;code&gt;--skip-flashing&lt;/code&gt; and &lt;code&gt;--skip-reset&lt;/code&gt; because both flags are used for locally available DUTs.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：どのプラットフォームを要求するかをグローバルリソース管理に指示するには、Switch -m &amp;lt;platform_name&amp;gt;が必要です。 &lt;strong&gt;注&lt;/strong&gt;：コマンドラインスイッチ &lt;code&gt;--grm&lt;/code&gt; は、ローカルで使用可能なDUTに両方のフラグが使用さ &lt;code&gt;--skip-reset&lt;/code&gt; ため、暗黙的に &lt;code&gt;--skip-flashing&lt;/code&gt; と--skip-resetを強制します。</target>
        </trans-unit>
        <trans-unit id="2cdb8891adb6df7e3efff295d8bfc5578b693584" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Switch -m &amp;lt;platform_name&amp;gt; is required to tell this fastmodel connection which Fastmodel to request.
&lt;strong&gt;Note&lt;/strong&gt;: Command line switch &lt;code&gt;--fm&lt;/code&gt; implicitly forces &lt;code&gt;--skip-flashing&lt;/code&gt; and &lt;code&gt;--skip-reset&lt;/code&gt; because both flags are used for locally available DUTs.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このfastmodel接続にどのFastmodelを要求するかを指示するには、Switch -m &amp;lt;platform_name&amp;gt;が必要です。 &lt;strong&gt;注&lt;/strong&gt;：コマンドラインスイッチ &lt;code&gt;--fm&lt;/code&gt; は、ローカルで使用可能なDUTに両方のフラグが使用さ &lt;code&gt;--skip-reset&lt;/code&gt; ため、暗黙的に &lt;code&gt;--skip-flashing&lt;/code&gt; と--skip-resetを強制します。</target>
        </trans-unit>
        <trans-unit id="4a7ab915a793ffe6e1b42c4b1d8fcdeea993e9cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Sync packet management allows you to manipulate the way &lt;code&gt;htrun&lt;/code&gt; sends &lt;code&gt;__sync&lt;/code&gt; packet(s) to DUT. With current settings we can force on &lt;code&gt;htrun&lt;/code&gt; to send &lt;code&gt;__sync&lt;/code&gt; packets in this manner:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同期パケット管理を使用すると、 &lt;code&gt;htrun&lt;/code&gt; が &lt;code&gt;__sync&lt;/code&gt; パケットをDUTに送信する方法を操作できます。現在の設定では、 &lt;code&gt;htrun&lt;/code&gt; に次の方法で &lt;code&gt;__sync&lt;/code&gt; パケットを送信するように強制できます。</target>
        </trans-unit>
        <trans-unit id="8770be929839dfce9cf2e64ddb9e81c172f276ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Preamble exchange&lt;/strong&gt; - DUT informs host about test parameters such as client version, test suite timeout, requested host test name etc. After this part is finished master will create requested host test and attach callbacks to user events.</source>
          <target state="translated">&lt;strong&gt;プリアンブル交換&lt;/strong&gt;-DUTは、クライアントバージョン、テストスイートのタイムアウト、要求されたホストテスト名などのテストパラメータについてホストに通知します。この部分が終了すると、マスターは要求されたホストテストを作成し、ユーザーイベントにコールバックを添付します。</target>
        </trans-unit>
        <trans-unit id="0e4a452d838b4f1866c3fe0046ee2cbef818254f" translate="yes" xml:space="preserve">
          <source>A tested comparison log can be checked into GitHub with the examples and can be used in the CI for example verification.</source>
          <target state="translated">テスト済みの比較ログをGitHubに例を挙げてチェックし、CIで例の検証に利用することができます。</target>
        </trans-unit>
        <trans-unit id="48748b3b742385e6f8c0cd5908e2bbe354c77054" translate="yes" xml:space="preserve">
          <source>After DUT send &lt;code&gt;__exit&lt;/code&gt; or after timeout it is guaranteed that host test &lt;code&gt;teardown()&lt;/code&gt; function will be called. This call is blocking, please make sure your tear down function finishes.</source>
          <target state="translated">DUTが &lt;code&gt;__exit&lt;/code&gt; を送信した後、またはタイムアウトした後、ホストテストの &lt;code&gt;teardown()&lt;/code&gt; 関数が呼び出されることが保証されます。この呼び出しはブロックされています。破棄機能が終了していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="09a3f6d7805c4c87b061eaf31eb5e2b3ebcd5a35" translate="yes" xml:space="preserve">
          <source>After correct sync packet is received by master, messages &lt;code&gt;{{__timeout;%d}}&lt;/code&gt; and &lt;code&gt;{{__host_test_name}}&lt;/code&gt; are expected.</source>
          <target state="translated">マスターが正しい同期パケットを受信した後、メッセージ &lt;code&gt;{{__timeout;%d}}&lt;/code&gt; と &lt;code&gt;{{__host_test_name}}&lt;/code&gt; が予期されます。</target>
        </trans-unit>
        <trans-unit id="3a7e401b4be215749d83fbcba3e4ec8209beb67b" translate="yes" xml:space="preserve">
          <source>After reset:</source>
          <target state="translated">リセット後。</target>
        </trans-unit>
        <trans-unit id="779eaffcf0df94cb11b0b9a188528d63ebf25484" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;mbedhtrun&lt;/code&gt; needs is name of the binary you want to flash and method of flashing!</source>
          <target state="translated">すべての &lt;code&gt;mbedhtrun&lt;/code&gt; ニーズは、あなたが点滅し、点滅の方法にしたいバイナリの名前です！</target>
        </trans-unit>
        <trans-unit id="868aecef2b53c70e54e997a0929720538a3233ce" translate="yes" xml:space="preserve">
          <source>Another example with regular examples is shown below:</source>
          <target state="translated">定例を用いた別の例を以下に示す。</target>
        </trans-unit>
        <trans-unit id="c48ebfecb37de922cbe7a5c790047668217efb8a" translate="yes" xml:space="preserve">
          <source>As above but we will skip reset phase (non so common but in some cases can be used to suppress reset phase for some reasons):</source>
          <target state="translated">上記と同様ですが、リセット位相をスキップします(非一般的ですが、何らかの理由でリセット位相を抑制するために使用できる場合もあります)。</target>
        </trans-unit>
        <trans-unit id="7a912fdada8ea0517f6988957ab102d6e5d42000" translate="yes" xml:space="preserve">
          <source>Before Greentea v0.2.0</source>
          <target state="translated">グリーンティア v0.2.0以前</target>
        </trans-unit>
        <trans-unit id="883579fd087386dfd3f74e50aa8cf2893424d97a" translate="yes" xml:space="preserve">
          <source>Below the same callback registered using decorator:</source>
          <target state="translated">以下、デコレータを使って登録した同じコールバック。</target>
        </trans-unit>
        <trans-unit id="54f3a582e0e46c1fdbde56c6d9b5c912b1062595" translate="yes" xml:space="preserve">
          <source>Callback decorator definition</source>
          <target state="translated">コールバックデコレータの定義</target>
        </trans-unit>
        <trans-unit id="61aea957495b12cf35ed6fa4692f689a4b6830cf" translate="yes" xml:space="preserve">
          <source>Callback registration in setup() method</source>
          <target state="translated">setup()メソッドでのコールバック登録</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">コールバック</target>
        </trans-unit>
        <trans-unit id="0919f1c08841ab59f4010ca0c08be7d21b733553" translate="yes" xml:space="preserve">
          <source>Change the directory to the &lt;code&gt;mbed-os-tools/packages/mbed-host-tests&lt;/code&gt; directory:</source>
          <target state="translated">ディレクトリを &lt;code&gt;mbed-os-tools/packages/mbed-host-tests&lt;/code&gt; ディレクトリに変更します。</target>
        </trans-unit>
        <trans-unit id="7741c1b49d16cff50f9f11d5390e73dce207ea10" translate="yes" xml:space="preserve">
          <source>Checking installation</source>
          <target state="translated">インストールの確認</target>
        </trans-unit>
        <trans-unit id="8f421d7903d21e7af2e8365c67e68dcf4c7e23b4" translate="yes" xml:space="preserve">
          <source>Command line overview</source>
          <target state="translated">コマンドラインの概要</target>
        </trans-unit>
        <trans-unit id="1e1918c7b0e450f50460cc106d52c81934e94310" translate="yes" xml:space="preserve">
          <source>Command line switch &lt;code&gt;--grm&lt;/code&gt; has format: &lt;code&gt;&amp;lt;module_name&amp;gt;:&amp;lt;IP_address&amp;gt;:&amp;lt;port_number&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">コマンドラインスイッチ &lt;code&gt;--grm&lt;/code&gt; の形式は次のとおりです： &lt;code&gt;&amp;lt;module_name&amp;gt;:&amp;lt;IP_address&amp;gt;:&amp;lt;port_number&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56daa4f6991ad23ee3ad9337bba1c4b9e7dae685" translate="yes" xml:space="preserve">
          <source>Command line switch format &lt;code&gt;--fm &amp;lt;config_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">コマンドラインスイッチ形式 &lt;code&gt;--fm &amp;lt;config_name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ff2cd088270334c8a2f99dfc624bcd332a50384" translate="yes" xml:space="preserve">
          <source>Corresponding log:</source>
          <target state="translated">対応するログ。</target>
        </trans-unit>
        <trans-unit id="d895d5e7e230d89bd4cfe4224c65b0d27e50070e" translate="yes" xml:space="preserve">
          <source>DUT - host test case workflow</source>
          <target state="translated">DUT-ホストテストケースのワークフロー</target>
        </trans-unit>
        <trans-unit id="626c3ee860fb240f7628dd4674a59b588bf8f8b4" translate="yes" xml:space="preserve">
          <source>DUT always (except for handshake phase) initializes communication by sending key-value message to host.</source>
          <target state="translated">DUT は常に(ハンドシェイクフェーズを除く)ホストにキー値メッセージを送信して通信を初期化する。</target>
        </trans-unit>
        <trans-unit id="2c6516f3287de370bb466acaf1a844e15e278271" translate="yes" xml:space="preserve">
          <source>DUT always finishes execution</source>
          <target state="translated">DUTは常に実行を終了します。</target>
        </trans-unit>
        <trans-unit id="095e4a38df5cb9fd44a60b3fb755fc995fb05b85" translate="yes" xml:space="preserve">
          <source>DUT calls function &lt;code&gt;GREENTEA_SETUP(timeout, &quot;host test name&quot;);&lt;/code&gt; which</source>
          <target state="translated">DUTは関数 &lt;code&gt;GREENTEA_SETUP(timeout, &quot;host test name&quot;);&lt;/code&gt; 呼び出します。これ</target>
        </trans-unit>
        <trans-unit id="165c9ff6d3335894ae3b4f0accf0b86e9682904e" translate="yes" xml:space="preserve">
          <source>DUT code:</source>
          <target state="translated">DUTコード。</target>
        </trans-unit>
        <trans-unit id="b921767324737366f2552e20da90f6fc8abb1ea2" translate="yes" xml:space="preserve">
          <source>DUT implementation</source>
          <target state="translated">ディーユーティー実装</target>
        </trans-unit>
        <trans-unit id="9c597a19b077deb109c00589b1390f002b08e65d" translate="yes" xml:space="preserve">
          <source>DUT implementation using &lt;code&gt;my_host_test&lt;/code&gt; custom host test:</source>
          <target state="translated">&lt;code&gt;my_host_test&lt;/code&gt; カスタムホストテストを使用したDUTの実装：</target>
        </trans-unit>
        <trans-unit id="7b4a20d2bc2fb30dc4fc0306d08e9b81fe1471f2" translate="yes" xml:space="preserve">
          <source>DUT implementation:</source>
          <target state="translated">DUTの実装。</target>
        </trans-unit>
        <trans-unit id="6a2cce350afb4935c3fdced46913ecb2c36b6dff" translate="yes" xml:space="preserve">
          <source>DUT side uses second argument of &lt;code&gt;GREENTEA_SETUP(timeout, host_test_name)&lt;/code&gt; function:</source>
          <target state="translated">DUT側は、 &lt;code&gt;GREENTEA_SETUP(timeout, host_test_name)&lt;/code&gt; 関数の2番目の引数を使用します。</target>
        </trans-unit>
        <trans-unit id="14c69c2b7257c38eb710e9d086b6f9d2b90ab384" translate="yes" xml:space="preserve">
          <source>DUT slave side uses simple parser to parse key-value pairs from stream. All non key-value data will be ignored. Blocking wait for an event API is provided: This implies usage of master-slave exchange between DUT and host where DUT uses non-blocking send event API to send to host (master) event and can wait for response. Master implements corresponding response after receiving event and processing data.</source>
          <target state="translated">DUT スレーブ側は単純なパーサーを使用して、ストリームからキー値ペアを解析します。キー値以外のデータは無視される。イベントAPIのブロッキング待ちが提供される。これは、DUT がノンブロッキング送信イベント API を使用してホスト(マスタ)にイベントを送信し、応答を待つことができる DUT とホスト間のマスタ-スレーブ交換の使用を意味する。マスタは、イベントを受信してデータを処理した後、対応する応答を実装する。</target>
        </trans-unit>
        <trans-unit id="1997bc510fdd148c5460b1f9a4c03afbb22db4b3" translate="yes" xml:space="preserve">
          <source>DUT test API was first introduced in &lt;code&gt;mbedmicro/mbed&lt;/code&gt; project &lt;a href=&quot;https://github.com/mbedmicro/mbed/tree/master/libraries/tests/mbed/env&quot;&gt;here&lt;/a&gt;. After refactoring this functionality was copied and improved in &lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt; module.</source>
          <target state="translated">DUTテストAPIは、&lt;a href=&quot;https://github.com/mbedmicro/mbed/tree/master/libraries/tests/mbed/env&quot;&gt;ここの&lt;/a&gt; &lt;code&gt;mbedmicro/mbed&lt;/code&gt; プロジェクトで最初に導入されました。リファクタリング後、この機能は&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt;モジュールでコピーおよび改善されました。</target>
        </trans-unit>
        <trans-unit id="3cd14348a79f6dd2dc4ed92b00adfffbe3313dca" translate="yes" xml:space="preserve">
          <source>DUT test suite never finishes execution</source>
          <target state="translated">DUT テストスイートが実行を終了しない</target>
        </trans-unit>
        <trans-unit id="aebd9413076d65c89e207689ac7673ccdbe3fce1" translate="yes" xml:space="preserve">
          <source>DUT test suite with &lt;code&gt;utest&lt;/code&gt; harness</source>
          <target state="translated">&lt;code&gt;utest&lt;/code&gt; ハーネスを備えたDUTテストスイート</target>
        </trans-unit>
        <trans-unit id="b9a257b89d70fac4953d77b392223a7141b06c89" translate="yes" xml:space="preserve">
          <source>DUT test suite with single test case</source>
          <target state="translated">単一のテストケースを持つDUTテストスイート</target>
        </trans-unit>
        <trans-unit id="736a527bb1c06de722602489784f5dff79e01f9d" translate="yes" xml:space="preserve">
          <source>DUT waits for &lt;code&gt;{{__sync;...}}&lt;/code&gt; message in input stream and replies with the same packer &lt;code&gt;{{__sync;...}}&lt;/code&gt;.</source>
          <target state="translated">DUTは、入力ストリームで &lt;code&gt;{{__sync;...}}&lt;/code&gt; メッセージを待機し、同じパッカー &lt;code&gt;{{__sync;...}}&lt;/code&gt; で応答します。</target>
        </trans-unit>
        <trans-unit id="647d603597976a170b993ee2698c02e93538fd86" translate="yes" xml:space="preserve">
          <source>DUT will send to host preamble with test runner information such as:</source>
          <target state="translated">DUTは、テストランナーの情報を含むプリアンブルをホストに送信します。</target>
        </trans-unit>
        <trans-unit id="07c83fa7e049f4fd805d5b8928beb027731de9b8" translate="yes" xml:space="preserve">
          <source>DUT-host communication and reset phase</source>
          <target state="translated">DUT-ホスト通信およびリセットフェーズ</target>
        </trans-unit>
        <trans-unit id="709809b3955dfa71a2918ff271debe54e9883a64" translate="yes" xml:space="preserve">
          <source>Default DUT reset method is one supported by &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;mbed-enabled&lt;/a&gt; devices: serial port (CDC) &quot;&lt;em&gt;sendBreak&lt;/em&gt;&quot; command resets target MCU on mbed-enabled platform.</source>
          <target state="translated">デフォルトのDUTリセット方法は、&lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;mbed対応&lt;/a&gt;デバイスでサポートされている方法です。シリアルポート（CDC）「&lt;em&gt;sendBreak&lt;/em&gt;」コマンドは、mbed対応プラットフォーム上のターゲットMCUをリセットします。</target>
        </trans-unit>
        <trans-unit id="bc2cd630546bc1cb92afe393e71240db008e5337" translate="yes" xml:space="preserve">
          <source>Default binary flashing method is one supported by &lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;mbed-enabled&lt;/a&gt; devices: binary file is copied on mbed-enabled DUT (Device Under Test) mounted drive (MSD). This procedure will automatically flash device with given binary file content.</source>
          <target state="translated">デフォルトのバイナリフラッシュ方法は、&lt;a href=&quot;https://www.mbed.com/en/about-mbed/mbed-enabled/&quot;&gt;mbed対応&lt;/a&gt;デバイスでサポートされている方法です。バイナリファイルは、mbed対応DUT（テスト対象デバイス）にマウントされたドライブ（MSD）にコピーされます。この手順により、指定されたバイナリファイルの内容でデバイスが自動的にフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="44d55f06d963a9ca25fae9517787bf49edec5269" translate="yes" xml:space="preserve">
          <source>Design draft</source>
          <target state="translated">設計図</target>
        </trans-unit>
        <trans-unit id="a8c5a3b94826af621da5a375d345ece1f610fcc9" translate="yes" xml:space="preserve">
          <source>Development moved</source>
          <target state="translated">開発移転</target>
        </trans-unit>
        <trans-unit id="9df9a8179b1a565208b4dd6239287e040d9d8d11" translate="yes" xml:space="preserve">
          <source>Do not forget to name host test accordingly. See below example host test &lt;code&gt;name&lt;/code&gt; class member.</source>
          <target state="translated">それに応じてホストテストに名前を付けることを忘れないでください。以下のホストテスト &lt;code&gt;name&lt;/code&gt; クラスメンバーの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="3f7497a8dfedacd212c2996862b7d6fcb884d29e" translate="yes" xml:space="preserve">
          <source>Each event is a tuple of &lt;code&gt;(key, value, timestamp)&lt;/code&gt;, where key and value are extracted from message and</source>
          <target state="translated">各イベントは &lt;code&gt;(key, value, timestamp)&lt;/code&gt; タプルであり、キーと値はメッセージと</target>
        </trans-unit>
        <trans-unit id="86254eea7d60c4ae1201fb3716651deb450e3119" translate="yes" xml:space="preserve">
          <source>Each host test (master side) has four functions used by async framework:</source>
          <target state="translated">各ホストテスト(マスター側)には、asyncフレームワークが使用する4つの関数があります。</target>
        </trans-unit>
        <trans-unit id="3065e92116c10e024814d96a6883bff0ea8755a1" translate="yes" xml:space="preserve">
          <source>Each host test registers callbacks for available events.</source>
          <target state="translated">各ホストテストは、利用可能なイベントのコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="39ed4ebaf961ae0c8f1b791ecd147e37c0384649" translate="yes" xml:space="preserve">
          <source>Event exchange</source>
          <target state="translated">イベント交換</target>
        </trans-unit>
        <trans-unit id="bb60c70e550b193a26e657cf530450eafa23a645" translate="yes" xml:space="preserve">
          <source>Event is formed in host test, a tuple of &lt;code&gt;key&lt;/code&gt; (string), &lt;code&gt;value&lt;/code&gt; (string), &lt;code&gt;timestamp&lt;/code&gt; where &lt;code&gt;timestamp&lt;/code&gt; is time of message reception in Python &lt;a href=&quot;https://docs.python.org/2/library/time.html#time.time&quot;&gt;time.time()&lt;/a&gt; format (float, time in seconds since the epoch as a floating point number.).</source>
          <target state="translated">イベントは、ホストテスト、 &lt;code&gt;key&lt;/code&gt; （文字列）、 &lt;code&gt;value&lt;/code&gt; （文字列）、 &lt;code&gt;timestamp&lt;/code&gt; タプルで形成されます。 &lt;code&gt;timestamp&lt;/code&gt; は、Pythonの&lt;a href=&quot;https://docs.python.org/2/library/time.html#time.time&quot;&gt;time.time（）&lt;/a&gt;形式でのメッセージ受信の時刻です（浮動小数点数、浮動小数点数としてのエポックからの秒単位の時間）。。）。</target>
        </trans-unit>
        <trans-unit id="18ccebe3f5dfea294643a10c4d680a7e353c7bef" translate="yes" xml:space="preserve">
          <source>Example host test template:</source>
          <target state="translated">ホストテストのテンプレート例。</target>
        </trans-unit>
        <trans-unit id="720866581bbfe73b668502026de8c5cdfa711f10" translate="yes" xml:space="preserve">
          <source>Example of corresponding host test</source>
          <target state="translated">対応するホストテストの例</target>
        </trans-unit>
        <trans-unit id="ea76c8a1d8a41f033db77eace0fd6e4212decee5" translate="yes" xml:space="preserve">
          <source>Example of handshake from &lt;code&gt;htrun&lt;/code&gt; log:</source>
          <target state="translated">&lt;code&gt;htrun&lt;/code&gt; ログからのハンドシェイクの例：</target>
        </trans-unit>
        <trans-unit id="2fda2299de8a0cdd18062acac9fba1e569417400" translate="yes" xml:space="preserve">
          <source>Example of host test expecting &lt;code&gt;Runtime error ... CallbackNode ...&lt;/code&gt; string in DUT output.
We will use allowed to override &lt;code&gt;__rxd_line&lt;/code&gt; event to hook to DUT RXD channel lines of text.</source>
          <target state="translated">&lt;code&gt;Runtime error ... CallbackNode ...&lt;/code&gt; 予期しているホストテストの例... CallbackNode ... DUT出力の文字列。 &lt;code&gt;__rxd_line&lt;/code&gt; イベントをオーバーライドして、DUTRXDチャネルのテキスト行にフックすることを許可します。</target>
        </trans-unit>
        <trans-unit id="eaaf6b7d8c3502c17a6dc3cf142c18776b31898a" translate="yes" xml:space="preserve">
          <source>Exchange data (in most cases text) between host and DUT,</source>
          <target state="translated">ホストと DUT の間でデータ(ほとんどの場合はテキスト)を交換する。</target>
        </trans-unit>
        <trans-unit id="f33ba3019954aafa1feb8235b68f034789a412bb" translate="yes" xml:space="preserve">
          <source>Fast Model connection</source>
          <target state="translated">高速モデル接続</target>
        </trans-unit>
        <trans-unit id="a0d877bb17464347f7e476238777723873ceebb8" translate="yes" xml:space="preserve">
          <source>Few keys' names in key-value messaging protocol are promoted to be considered &quot;system events&quot;. Their names are used by event loop mechanism to communicate between DUT, host and various internal components. Please do not use restricted even names for your own private events. What's more:</source>
          <target state="translated">鍵値メッセージングプロトコルでは、いくつかの鍵の名前が「システムイベント」とみなされるように推進されている。それらの名前は、DUT、ホスト、および様々な内部コンポーネント間で通信するために、イベン トループ機構によって使用される。自分自身のプライベートイベントには、制限付きの偶数名を使用しないでください。そのほかにも、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="158f43262acd06e7642b29309e126923316f2ecd" translate="yes" xml:space="preserve">
          <source>Flash (use shell command &lt;code&gt;copy&lt;/code&gt;) binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">フラッシュ（シェルコマンドの使用 &lt;code&gt;copy&lt;/code&gt; バイナリファイル）を &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; ポイントのマウント使用して &lt;code&gt;D:&lt;/code&gt; 。シリアルポート &lt;code&gt;COM4&lt;/code&gt; を使用してDUTと通信します。</target>
        </trans-unit>
        <trans-unit id="b79e8d9072014d2c3b21cd78069437deec0df9b9" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">マウントポイント &lt;code&gt;D:&lt;/code&gt; を使用してバイナリファイル &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; をフラッシュします。シリアルポート &lt;code&gt;COM4&lt;/code&gt; を使用してDUTと通信します。</target>
        </trans-unit>
        <trans-unit id="0bb415010bae6adec9b342b99c1fe6276f7c8c46" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; with baudrate &lt;code&gt;115200&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">マウントポイント &lt;code&gt;D:&lt;/code&gt; を使用してバイナリファイル &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; をフラッシュします。DUTと通信するには、ボーレート &lt;code&gt;115200&lt;/code&gt; のシリアルポート &lt;code&gt;COM4&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7aa54b0e3eb90e603779697ab7f217dff3331191" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using mount point &lt;code&gt;D:&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; with default baudrate to communicate with DUT. Do not send &lt;code&gt;__sync&lt;/code&gt; key-value protocol synchronization packet to DUT before preamble read:</source>
          <target state="translated">マウントポイント &lt;code&gt;D:&lt;/code&gt; を使用してバイナリファイル &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; をフラッシュします。DUTと通信するには、デフォルトのボーレートでシリアルポート &lt;code&gt;COM4&lt;/code&gt; を使用します。プリアンブルを読み取る前に、 &lt;code&gt;__sync&lt;/code&gt; キー値プロトコル同期パケットをDUTに送信しないでください。</target>
        </trans-unit>
        <trans-unit id="334ce270911437bb87db7f7e500dc3562bbd2dcb" translate="yes" xml:space="preserve">
          <source>Flash binary file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; using plugin &lt;code&gt;stlink&lt;/code&gt;. Use serial port &lt;code&gt;COM4&lt;/code&gt; with baudrate &lt;code&gt;115200&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">プラグイン &lt;code&gt;stlink&lt;/code&gt; を使用してバイナリファイル &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; をフラッシュします。DUTと通信するには、ボーレート &lt;code&gt;115200&lt;/code&gt; のシリアルポート &lt;code&gt;COM4&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="aaa6043ae95f9a67b22b9f51a18f7faa10482294" translate="yes" xml:space="preserve">
          <source>Flash local file &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; to remote device resource (platform &lt;code&gt;K64F&lt;/code&gt;) provided by &lt;code&gt;remote_client&lt;/code&gt; GRM service available on IP address &lt;code&gt;10.2.203.31&lt;/code&gt; and port: &lt;code&gt;8000&lt;/code&gt;. Force serial port connection to remote device &lt;code&gt;9600&lt;/code&gt; with baudrate:</source>
          <target state="translated">ローカルファイル &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; を、IPアドレス &lt;code&gt;10.2.203.31&lt;/code&gt; およびポート： &lt;code&gt;8000&lt;/code&gt; で利用可能な &lt;code&gt;remote_client&lt;/code&gt; GRMサービスによって提供されるリモートデバイスリソース（プラットフォーム &lt;code&gt;K64F&lt;/code&gt; ）にフラッシュします。ボーレートを使用して、リモートデバイス &lt;code&gt;9600&lt;/code&gt; へのシリアルポート接続を強制します。</target>
        </trans-unit>
        <trans-unit id="2571f99f1680e5391cd93011b0082d4efb07cbd5" translate="yes" xml:space="preserve">
          <source>Flash mbed device with given binary.</source>
          <target state="translated">与えられたバイナリでmbedデバイスをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="6761cf8a57f5841e04096627ea88d5887f48e0fc" translate="yes" xml:space="preserve">
          <source>Flashing phase operations</source>
          <target state="translated">点滅段階の操作</target>
        </trans-unit>
        <trans-unit id="8a866d6c2d02f0bc023dc62569a6c17af0376992" translate="yes" xml:space="preserve">
          <source>For example if you hardcode in your host test UDP port 32123 and use it for UDP server implementation  of your host test bear in mind that this port may be already used. It is your responsibility to react for this event and implement means to overcome it (if possible).</source>
          <target state="translated">例えば、あなたがホストテストのUDPポート32123をハードコードして、あなたのホストテストのUDPサーバの実装に使用する場合、このポートはすでに使用されている可能性があることを念頭に置いてください。このイベントに対応し、(可能であれば)それを克服する手段を実装するのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="7c1aff202f7d8bcea4fa64405f0aca7af6efda87" translate="yes" xml:space="preserve">
          <source>Functions are used to send key-string or key-integer value messages to master. This functions should replace typical &lt;code&gt;printf()&lt;/code&gt; calls with payload/control data to host.</source>
          <target state="translated">関数は、キー文字列またはキー整数値メッセージをマスターに送信するために使用されます。この関数は、一般的な &lt;code&gt;printf()&lt;/code&gt; 呼び出しをホストへのペイロード/制御データに置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="af3ec244dc723a701ac058afc63d124fbfd72829" translate="yes" xml:space="preserve">
          <source>Global Resource Manager connection</source>
          <target state="translated">グローバルリソースマネージャ接続</target>
        </trans-unit>
        <trans-unit id="a0be22585fd735b25c7d089d58ba0169fc6da82f" translate="yes" xml:space="preserve">
          <source>Greentea client API</source>
          <target state="translated">グリーンティアクライアントAPI</target>
        </trans-unit>
        <trans-unit id="76ccff916d0696e0db6e0e63211aa5d404b177bb" translate="yes" xml:space="preserve">
          <source>Handshake</source>
          <target state="translated">握手</target>
        </trans-unit>
        <trans-unit id="afe7a417d745ef7f8ce3a908ad2af663ae59dca3" translate="yes" xml:space="preserve">
          <source>Hanshake between DUT and host is a sequence of &lt;code&gt;__sync&lt;/code&gt; events send between host (master) and DUT (slave). This is currently only situation when master initiates communication first. Handshake should provide synchronization point where master and slave are starting the same session.</source>
          <target state="translated">DUTとホスト間のハンシェイクは、ホスト（マスター）とDUT（スレーブ）の間で送信される一連の &lt;code&gt;__sync&lt;/code&gt; イベントです。これは現在、マスターが最初に通信を開始する場合のみの状況です。ハンドシェイクは、マスターとスレーブが同じセッションを開始する同期ポイントを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="c462c6142be867f0a9f93d039025a1e9848ee526" translate="yes" xml:space="preserve">
          <source>Hence the strategy for testing examples is based on observation instead of interaction. An example's serial logging is captured and converted into a templated log. All successive executions of this example should match this log.</source>
          <target state="translated">したがって、サンプルをテストするための戦略は、相互作用ではなく観察に基づいています。例のシリアル ロギングはキャプチャされ、テンプレート化されたログに変換されます。この例のすべての連続した実行は、このログと一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="81a50f092a9c1baca81536bee0ce39b6ef1ca7c0" translate="yes" xml:space="preserve">
          <source>Host parses DUTs tx stream and generates events sent to host test.</source>
          <target state="translated">ホストは DUT の tx ストリームを解析し、ホストテストに送信されるイベントを生成します。</target>
        </trans-unit>
        <trans-unit id="739d7ff56b572bddde7bca4b888be4430164af90" translate="yes" xml:space="preserve">
          <source>Host state machine loads callbacks registered by user in host test setup phase and hooks them to event machine.
Now host is ready to handle test suite test execution. From this moment each event sent from DUT will be handled by corresponding callback registered by user in host test setup. Unknown events will not be handled and warning will be printed in log.</source>
          <target state="translated">ホストのステートマシンは、ホストテストのセットアップフェーズでユーザが登録したコールバックをロードし、イベントマシンにフックします。これでホストはテストスイートのテスト実行を扱う準備が整いました。この時点から、DUTから送信された各イベントは、ホストテストセットアップでユーザによって登録された対応するコールバックによって処理されます。未知のイベントは処理されず、ログに警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="3bf2563e8f05e77491179793ef8db96c86834d6c" translate="yes" xml:space="preserve">
          <source>Host state machine loads host test object by name provided in payload of &lt;code&gt;__host_test_name&lt;/code&gt; event.E.g. event ```{{____host_test_name;default_auto}} will load host test named &quot;&lt;em&gt;default_auto&lt;/em&gt;&quot;.</source>
          <target state="translated">ホストステートマシンは、 &lt;code&gt;__host_test_name&lt;/code&gt; host_test_nameイベントのペイロードで指定された名前でホストテストオブジェクトをロードします。たとえば、イベント `` `{{____ host_test_name; default_auto}}は、&quot; &lt;em&gt;default_auto&lt;/em&gt; &quot;という名前のホストテストをロードします。</target>
        </trans-unit>
        <trans-unit id="256e466598015d9893e7d37134c90ab1322dee71" translate="yes" xml:space="preserve">
          <source>Host test examples</source>
          <target state="translated">ホストテストの例</target>
        </trans-unit>
        <trans-unit id="7aa340f16d0f3e4b0a727d2aeb24e1d71f83a1d2" translate="yes" xml:space="preserve">
          <source>Host tests are now driven by simple async feature. Event state machine on master side is used to process events from DUT. Each host test is capable of registering callbacks, functions which will be executed when event occur. Event name is identical with KEY in key-value pair send as event from/to DUT.</source>
          <target state="translated">ホストテストはシンプルな非同期機能によって駆動されるようになりました。マスター側のイベントステートマシンは、DUTからのイベントを処理するために使用されます。各ホストテストは、イベントが発生したときに実行される関数であるコールバックを登録することができます。イベント名は、DUTから/DUTへのイベントとして送信されるkey-valueペアのkeyと同一です。</target>
        </trans-unit>
        <trans-unit id="f34c65d375ef807a0d1053054afcca89454eb733" translate="yes" xml:space="preserve">
          <source>Host will spawn host test script and test execution will be instrumented</source>
          <target state="translated">ホストはホストテストスクリプトを生成し、テストの実行を計測します。</target>
        </trans-unit>
        <trans-unit id="9c5759b3a29a12c887dbdea960cf8e8e034f43a0" translate="yes" xml:space="preserve">
          <source>Htrun (mbed-host-tests)</source>
          <target state="translated">Htrun (mbed-host-test)</target>
        </trans-unit>
        <trans-unit id="f9ca9c8e689a1271ff659bece18781ba5d93d16f" translate="yes" xml:space="preserve">
          <source>In case an application requires more time to process data and generate results, you can use the option &lt;code&gt;--polling-timeout&lt;/code&gt; to override the default timeout setting.</source>
          <target state="translated">アプリケーションがデータの処理と結果の生成により多くの時間を必要とする場合は、オプション &lt;code&gt;--polling-timeout&lt;/code&gt; を使用して、デフォルトのタイムアウト設定をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="49317310382ddf66dd0c5d0f51b7b63b474cc3af" translate="yes" xml:space="preserve">
          <source>In order to work with platforms for which the hardware is still under development, and hence may not have an mbed interface chip, some &quot;hook&quot; files are required.  Operation with these platforms is a matter for the platform development teams involved and is not, in general, supported by ARM.</source>
          <target state="translated">ハードウェアがまだ開発中であり、mbedインターフェースチップを搭載していないプラットフォームで動作させるためには、いくつかの &quot;フック &quot;ファイルが必要になります。これらのプラットフォームでの動作は、関係するプラットフォーム開発チームの問題であり、一般的にARMはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="96aea4a4578a7a24ceb5456357622da825fbc337" translate="yes" xml:space="preserve">
          <source>In this example DUT code uses &lt;code&gt;greentea-client&lt;/code&gt; to sync (&lt;code&gt;GREENTEA_SETUP&lt;/code&gt;) and pass result (&lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt;) to &lt;code&gt;Greentea&lt;/code&gt;. This is very simple example of how you can write tests. Note that in this example test suite only implements one test case. Actually test suite is test case at the same time. Result passed to &lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt; will be at the same time test case result.</source>
          <target state="translated">この例では、DUTコードは &lt;code&gt;greentea-client&lt;/code&gt; を使用して同期（ &lt;code&gt;GREENTEA_SETUP&lt;/code&gt; ）し、結果（ &lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt; ）を &lt;code&gt;Greentea&lt;/code&gt; に渡します。これは、テストを作成する方法の非常に簡単な例です。この例では、テストスイートは1つのテストケースのみを実装していることに注意してください。実際、テストスイートは同時にテストケースでもあります。 &lt;code&gt;GREENTEA_TESTSUITE_RESULT&lt;/code&gt; に渡された結果は、同時にテストケースの結果になります。</target>
        </trans-unit>
        <trans-unit id="63ce22e8cc62e651bfbc9d44b9fa0409b896de55" translate="yes" xml:space="preserve">
          <source>In this example DUT code uses &lt;code&gt;greentea-client&lt;/code&gt; to sync (&lt;code&gt;GREENTEA_SETUP&lt;/code&gt;) with &lt;code&gt;Greentea&lt;/code&gt;. We are not calling &lt;code&gt;GREENTEA_TESTSUITE_RESULT(result)&lt;/code&gt; at any time. In this example host test is responsible for providing test suite result using &lt;code&gt;self.notify_complete()&lt;/code&gt; API or &lt;code&gt;self.result()&lt;/code&gt; function.</source>
          <target state="translated">この例では、DUTコードは &lt;code&gt;greentea-client&lt;/code&gt; を使用して（ &lt;code&gt;GREENTEA_SETUP&lt;/code&gt; ）を &lt;code&gt;Greentea&lt;/code&gt; と同期します。 &lt;code&gt;GREENTEA_TESTSUITE_RESULT(result)&lt;/code&gt; を呼び出すことはありません。この例では、ホストテストは、 &lt;code&gt;self.notify_complete()&lt;/code&gt; APIまたは &lt;code&gt;self.result()&lt;/code&gt; 関数を使用してテストスイートの結果を提供する役割を果たします。</target>
        </trans-unit>
        <trans-unit id="b31848376e9effcbed71419f7b28c04b83607698" translate="yes" xml:space="preserve">
          <source>In this phase DUT and host exchange events and host side is calling callbacks registered to each of the events sent from DUT. DUT can use function &lt;code&gt;greentea_parse_kv&lt;/code&gt; to parse input stream for next incoming key-value event.
After &lt;code&gt;__host_test_name&lt;/code&gt; event is received and before any event is consumed during this stage:</source>
          <target state="translated">このフェーズでは、DUTとホスト交換イベント、およびホスト側が、DUTから送信された各イベントに登録されたコールバックを呼び出しています。DUTは、関数 &lt;code&gt;greentea_parse_kv&lt;/code&gt; を使用して、次の着信Key-Valueイベントの入力ストリームを解析できます。後 &lt;code&gt;__host_test_name&lt;/code&gt; のイベントが受信され、任意のイベントは、この段階中に消費される前に：</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="96d0cf4660194fdfbac644302310f6124c5e1dc2" translate="yes" xml:space="preserve">
          <source>Installation from PyPI (Python Package Index)</source>
          <target state="translated">PyPI (Python パッケージインデックス)からのインストール</target>
        </trans-unit>
        <trans-unit id="9747b78a5614166db6f72d19c44d36053023a65b" translate="yes" xml:space="preserve">
          <source>Installation from Python sources</source>
          <target state="translated">Pythonソースからのインストール</target>
        </trans-unit>
        <trans-unit id="b2c3bab72631634bc46b6364dbc4f51c943c659f" translate="yes" xml:space="preserve">
          <source>Key-value protocol has few parts:</source>
          <target state="translated">キー値プロトコルにはいくつかの部分があります。</target>
        </trans-unit>
        <trans-unit id="27a29f226690321a7adcc35c9e87be4bf2958fa8" translate="yes" xml:space="preserve">
          <source>Key-value protocol overview</source>
          <target state="translated">キーバリュープロトコルの概要</target>
        </trans-unit>
        <trans-unit id="9f4787c2bc46ac39b36bd0d999ea31fe758ef67e" translate="yes" xml:space="preserve">
          <source>Key-value protocol was developed and is used to provide communication layer between DUT (device under test) and host computer. Key-value protocol defined host computer as master and DUT as slave.</source>
          <target state="translated">キーバリュープロトコルは、DUT(被試験装置)とホストコンピュータ間の通信層を提供するために開発されました。鍵値プロトコルは、ホストコンピュータをマスタ、被試験装置をスレーブと定義しています。</target>
        </trans-unit>
        <trans-unit id="aee26d71d33f8e98d4348ce4b5d1fd38f36b844f" translate="yes" xml:space="preserve">
          <source>Key-value transport protocol sequence</source>
          <target state="translated">キーバリュートランスポートプロトコルシーケンス</target>
        </trans-unit>
        <trans-unit id="7b221d84e0b3a674576d782dcc4a3da4d47eb44b" translate="yes" xml:space="preserve">
          <source>List available host tests names, class names and origin. Load additional host tests from &lt;code&gt;/path/to/host_tests&lt;/code&gt; directory:</source>
          <target state="translated">使用可能なホストテスト名、クラス名、およびオリジンを一覧表示します。 &lt;code&gt;/path/to/host_tests&lt;/code&gt; ディレクトリから追加のホストテストをロードします。</target>
        </trans-unit>
        <trans-unit id="65fd4496f6282d1f960f65ea054818b571949787" translate="yes" xml:space="preserve">
          <source>List available host tests names, class names and origin:</source>
          <target state="translated">利用可能なホストテストの名前、クラス名、および起源を一覧表示します。</target>
        </trans-unit>
        <trans-unit id="4270d9653f4f515b60eb7efd3a15a804baf85388" translate="yes" xml:space="preserve">
          <source>List available reset and flashing plugins:</source>
          <target state="translated">利用可能なリセットおよび点滅プラグインを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="afc2315b560e12839c119c3f35d4f206ec9aad28" translate="yes" xml:space="preserve">
          <source>Load local file &lt;code&gt;/path/to/file/binary.elf&lt;/code&gt; to onto fastmodel FVP_MPS2_m3 simulators:</source>
          <target state="translated">ローカルファイル &lt;code&gt;/path/to/file/binary.elf&lt;/code&gt; をfastmodelFVP_MPS2_m3シミュレーターにロードします。</target>
        </trans-unit>
        <trans-unit id="bd4905fd40b41fca6db2a780b2c9ed141892071d" translate="yes" xml:space="preserve">
          <source>Log example</source>
          <target state="translated">ログの例</target>
        </trans-unit>
        <trans-unit id="2392938c8b5602a02f802b8eac39fc88539d91dd" translate="yes" xml:space="preserve">
          <source>Log:</source>
          <target state="translated">ログ。</target>
        </trans-unit>
        <trans-unit id="e4ba102e09e1016bb3bb75852b1bd476a9a61a81" translate="yes" xml:space="preserve">
          <source>Logged from &lt;code&gt;CONN&lt;/code&gt; (connection process).</source>
          <target state="translated">&lt;code&gt;CONN&lt;/code&gt; （接続プロセス）からログに記録されます。</target>
        </trans-unit>
        <trans-unit id="5dcabc028acea9af83a7332e2b06616cdc6121c3" translate="yes" xml:space="preserve">
          <source>Make decision if test test suite passed / failed / returned error.</source>
          <target state="translated">テストテストスイートが合格/失敗/エラーを返したかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="ace24de34a0939e0c83d6d1e95c32d478581e3fd" translate="yes" xml:space="preserve">
          <source>Master (host) sends sync packet: &lt;code&gt;{{__sync;UUID-STRING}}}&lt;/code&gt; with message value containing random UUID string.</source>
          <target state="translated">マスター（ホスト）は、ランダムなUUID文字列を含むメッセージ値を含む同期パケット &lt;code&gt;{{__sync;UUID-STRING}}}&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="defc0329fd55d6e68456c7da61fb13587d2cee7e" translate="yes" xml:space="preserve">
          <source>Master side APIs and key-value protocol is encapsulated in  &lt;code&gt;mbed-host-tests&lt;/code&gt;.</source>
          <target state="translated">マスター側のAPIとKey-Valueプロトコルは、 &lt;code&gt;mbed-host-tests&lt;/code&gt; にカプセル化されてい ます。</target>
        </trans-unit>
        <trans-unit id="277ce5185e727fdbad5c6acd52d3288181ed59f6" translate="yes" xml:space="preserve">
          <source>Master-slave mode where host is master and DUT is slave.</source>
          <target state="translated">ホストがマスタであり、DUTがスレーブであるマスタ-スレーブモード。</target>
        </trans-unit>
        <trans-unit id="1dff4f302c44478b0ce255ebb294db458ab7ceea" translate="yes" xml:space="preserve">
          <source>Message parsing transforms key-value string message to Python event in this order:</source>
          <target state="translated">メッセージ解析では、キー値文字列メッセージをPythonイベントに変換します。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">その他</target>
        </trans-unit>
        <trans-unit id="935dbb023ddce3e788178d70861cfc011089bbc5" translate="yes" xml:space="preserve">
          <source>Monitor serial port traffic to parse valid key-value protocol events.</source>
          <target state="translated">シリアルポートのトラフィックを監視して、有効なキー値プロトコルイベントを解析します。</target>
        </trans-unit>
        <trans-unit id="3a9a8ab48c1b83362245fe9ad40e41a584f8107c" translate="yes" xml:space="preserve">
          <source>Non-Reserved event/message keys have leading &lt;code&gt;__&lt;/code&gt; in name:</source>
          <target state="translated">予約されていないイベント/メッセージキーの名前には、先頭に &lt;code&gt;__&lt;/code&gt; が付いています。</target>
        </trans-unit>
        <trans-unit id="8095b4836091793076a966ca6d394f63a1d2af96" translate="yes" xml:space="preserve">
          <source>Note: If you work in isolation and your test environment if fully controlled by you (for example you queue all tasks calling host tests, or use global host unique socket port numbers) this rule doesn&amp;rsquo;t apply to you.</source>
          <target state="translated">注：単独で作業し、テスト環境が完全に制御されている場合（たとえば、ホストテストを呼び出すすべてのタスクをキューに入れる場合、またはグローバルホストの一意のソケットポート番号を使用する場合）、このルールは適用されません。</target>
        </trans-unit>
        <trans-unit id="47e596b9e7a9a83782a11f12a805ad84ba13967a" translate="yes" xml:space="preserve">
          <source>Now you are ready to install &lt;code&gt;htrun&lt;/code&gt;:</source>
          <target state="translated">これで、 &lt;code&gt;htrun&lt;/code&gt; をインストールする準備が整いました。</target>
        </trans-unit>
        <trans-unit id="9eb0e6b2b4096bdf396e40cfffe4337cf1757660" translate="yes" xml:space="preserve">
          <source>Opening connection between host computer and DUT,</source>
          <target state="translated">ホストコンピュータと DUT 間の接続を開く。</target>
        </trans-unit>
        <trans-unit id="6321b81d1f64a69cb83d72ad2a79a36226f06233" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;--serial-output-file&lt;/code&gt; takes file name as argument and writes the target serial output to the file. Edit the file to remove lines that will change in successive executions. Put regular expressions if needed at places like benchmark numbers in above log. With these edits you are left with a template good for comparison.</source>
          <target state="translated">オプション &lt;code&gt;--serial-output-file&lt;/code&gt; は、ファイル名を引数として取り、ターゲットのシリアル出力をファイルに書き込みます。ファイルを編集して、連続した実行で変更される行を削除します。必要に応じて、上記のログのベンチマーク番号などの場所に正規表現を配置します。これらの編集により、比較に適したテンプレートが残ります。</target>
        </trans-unit>
        <trans-unit id="d0a3e88637b18b51bc10629280f2881e47522630" translate="yes" xml:space="preserve">
          <source>Parsing text received from DUT (line by line)</source>
          <target state="translated">DUTから受信したテキストを解析する(一行ずつ</target>
        </trans-unit>
        <trans-unit id="2b101baf417b3e1f3cb5f9dcc491b7fe9b3cb6a1" translate="yes" xml:space="preserve">
          <source>Please observe above that all the lines that have data that changes from execution to execution (on right) have been removed. It makes it possible htrun to compare these logs. htrun matches lines from the compare log (on left) one by one. It keeps on looking for a line until it matches. Once matched it moves on to match the next line. If it finds all lines from the compare log in the target serial output stream. Then it halts and passes the examples.</source>
          <target state="translated">上記のように、実行から実行へと変化するデータを持つ行(右)がすべて削除されていることに注目してください。これにより、htrunがこれらのログを比較できるようになりました。一致するまで行を探し続けます。一致すると、次の行にマッチするように移動します。比較ログからターゲットのシリアル出力ストリームにあるすべての行を見つけた場合、それは停止し、サンプルを渡します。その後、停止してサンプルを渡します。</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">プラグイン</target>
        </trans-unit>
        <trans-unit id="5cd9fc3a7d8416186a05c1eef602afb95a9a2640" translate="yes" xml:space="preserve">
          <source>Preamble exchange</source>
          <target state="translated">前文交換</target>
        </trans-unit>
        <trans-unit id="6de83481025f3d548752a5a0be1d41faa97785e6" translate="yes" xml:space="preserve">
          <source>Protocol introduced is master-slave protocol, where master is host and slave is device under test.</source>
          <target state="translated">導入されたプロトコルは、マスターがホスト、スレーブが被試験デバイスであるマスター-スレーブプロトコルです。</target>
        </trans-unit>
        <trans-unit id="83b2cdb22a433b1804f63b72d0ae37234a7dd681" translate="yes" xml:space="preserve">
          <source>Provide command line tool interface, command: &lt;code&gt;mbedhtrun&lt;/code&gt; after module installation (on host).</source>
          <target state="translated">モジュールのインストール後（ホスト上）にコマンドラインツールインターフェイス、コマンド： &lt;code&gt;mbedhtrun&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="26d998179c9bb71ad0db255dc0c7601c06595fd3" translate="yes" xml:space="preserve">
          <source>Provide few basic host test implementations which can be used out of the box for test development. For example the basic host test (called &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;default_auto&lt;/code&gt;) just parses events from DUT and finished host test execution when &lt;code&gt;end&lt;/code&gt; event is received. Other included in this module host tests can help you to test timers or RTC.</source>
          <target state="translated">テスト開発のために箱から出して使用できるいくつかの基本的なホストテストの実装を提供します。たとえば、基本的なホストテスト（ &lt;code&gt;default&lt;/code&gt; または &lt;code&gt;default_auto&lt;/code&gt; と呼ばれる）は、DUTからのイベントを解析し、 &lt;code&gt;end&lt;/code&gt; イベントを受信するとホストテストの実行を終了します。このモジュールに含まれるその他のホストテストは、タイマーまたはRTCのテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="067fdaf097fe2f4fa9cab7c1cfd6cf55767ca001" translate="yes" xml:space="preserve">
          <source>Reserved event/message keys have leading &lt;code&gt;__&lt;/code&gt; in name:</source>
          <target state="translated">予約済みのイベント/メッセージキーの名前には、先頭に &lt;code&gt;__&lt;/code&gt; が付いています。</target>
        </trans-unit>
        <trans-unit id="825cd14df7acabb05a94e4445c62d49fcb9bfdc9" translate="yes" xml:space="preserve">
          <source>Reset mbed device after flashing to start test suite execution.</source>
          <target state="translated">テストスイートの実行を開始するために、フラッシュ後にmbedデバイスをリセットします。</target>
        </trans-unit>
        <trans-unit id="59c74e7780ed5c235fa3625ceb843ea2d8182d8e" translate="yes" xml:space="preserve">
          <source>Result returned from host test is a test suite result. Test cases results are reported by DUT, usually using modified &lt;code&gt;utest&lt;/code&gt; framework.</source>
          <target state="translated">ホストテストから返される結果は、テストスイートの結果です。テストケースの結果は、通常、変更された &lt;code&gt;utest&lt;/code&gt; フレームワークを使用してDUTによって報告されます。</target>
        </trans-unit>
        <trans-unit id="7eb43fac4bae0d97d9b8c2b4f1c7a4531e1501ff" translate="yes" xml:space="preserve">
          <source>Return result after __exit</source>
          <target state="translated">終了後に結果を返す</target>
        </trans-unit>
        <trans-unit id="594827c48dee112f581a689b42115759d1c3c8dc" translate="yes" xml:space="preserve">
          <source>Run key-value protocol state machine and execute event callbacks.</source>
          <target state="translated">キー値プロトコルのステートマシンを実行し、イベントコールバックを実行します。</target>
        </trans-unit>
        <trans-unit id="28e87a733a5102266279adcaf92bb31b4e8dfa30" translate="yes" xml:space="preserve">
          <source>SARA NBIOT EVK</source>
          <target state="translated">サラ・ンビオEVK</target>
        </trans-unit>
        <trans-unit id="d73bb20965191cea0e2d0700f76a1ca705dd4799" translate="yes" xml:space="preserve">
          <source>Simple key-value protocol is introduced. It is used to communicate between DUT and host. Protocol main features:</source>
          <target state="translated">単純な鍵値プロトコルを導入する。これは、DUTとホスト間の通信に使用されます。プロトコルの主な特徴</target>
        </trans-unit>
        <trans-unit id="06cc574fa4d7414bcd447ee8fce507719ead92d8" translate="yes" xml:space="preserve">
          <source>Skip flashing phase (e.g. you've already flashed this device with &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; binary). Use serial port &lt;code&gt;COM4&lt;/code&gt; to communicate with DUT:</source>
          <target state="translated">フラッシュフェーズをスキップします（たとえば、このデバイスを &lt;code&gt;/path/to/file/binary.bin&lt;/code&gt; バイナリで既にフラッシュしている場合）。シリアルポート &lt;code&gt;COM4&lt;/code&gt; を使用してDUTと通信します。</target>
        </trans-unit>
        <trans-unit id="4df361bbe32ced8a6f9e97b5ebddb8461b1bd534" translate="yes" xml:space="preserve">
          <source>Slave side APIs and key-value protocol implementation is encapsulated in &lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt; module.</source>
          <target state="translated">スレーブ側のAPIとKey-Valueプロトコルの実装は、&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/tree/master/features/frameworks/greentea-client&quot;&gt;greentea-client&lt;/a&gt;モジュールにカプセル化されています。</target>
        </trans-unit>
        <trans-unit id="e70c5705c8542d7e86f593c06d9341c8d2b28434" translate="yes" xml:space="preserve">
          <source>Slave side key-value protocol API, see &lt;a href=&quot;https://github.com/ARMmbed/mbed-os/blob/master/features/frameworks/greentea-client/greentea-client/test_env.h&quot;&gt;here&lt;/a&gt; for details.</source>
          <target state="translated">スレーブ側のKey-ValueプロトコルAPI 。詳細は&lt;a href=&quot;https://github.com/ARMmbed/mbed-os/blob/master/features/frameworks/greentea-client/greentea-client/test_env.h&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="aa6ff5371ac33c3951672e8ff547398ae9695810" translate="yes" xml:space="preserve">
          <source>Templated log simply means a log with text that does not change or regular expressions replacing original text. Below is an example of the templated log:</source>
          <target state="translated">テンプレートされたログとは、簡単に言えば、変更されないテキストを持つログや、元のテキストを正規表現で置き換えたログを意味します。以下は、テンプレート化されたログの例です。</target>
        </trans-unit>
        <trans-unit id="eb391cb90069057c99db0fe99cf4552916bab489" translate="yes" xml:space="preserve">
          <source>Test execution phase will consist of:</source>
          <target state="translated">テスト実行フェーズは次のように構成されます。</target>
        </trans-unit>
        <trans-unit id="83e3b70840fadf5bea17a0e24aef786b3d0ffc67" translate="yes" xml:space="preserve">
          <source>Test suite is implemented so that it will never exit / finish its execution. For example &lt;code&gt;main()&lt;/code&gt; or &lt;code&gt;app_start()&lt;/code&gt; functions are implemented using infinite (endless) loop. This property have for example UDP/TCP servers (listening forever), all sorts of echo servers etc.</source>
          <target state="translated">テストスイートは、実行を終了/終了しないように実装されています。たとえば、 &lt;code&gt;main()&lt;/code&gt; または &lt;code&gt;app_start()&lt;/code&gt; 関数は、無限（エンドレス）ループを使用して実装されます。このプロパティには、たとえば、UDP / TCPサーバー（永久にリッスン）、あらゆる種類のエコーサーバーなどがあります。</target>
        </trans-unit>
        <trans-unit id="594012e05268bdd744c42186997dd5ea17a93ab5" translate="yes" xml:space="preserve">
          <source>Testing mbed-os examples</source>
          <target state="translated">mbed-osのテスト例</target>
        </trans-unit>
        <trans-unit id="e0519cea3ce164f13b54a2744defb9155e41b935" translate="yes" xml:space="preserve">
          <source>Text based protocol, format &lt;code&gt;{{KEY;VALUE}}}&lt;/code&gt;.</source>
          <target state="translated">テキストベースのプロトコル、形式 &lt;code&gt;{{KEY;VALUE}}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="870b045bf88b413a3138f7d28f1fad5077b089f8" translate="yes" xml:space="preserve">
          <source>The &quot;--fm&quot; option only available when &lt;a href=&quot;https://github.com/ARMmbed/mbed-fastmodel-agent&quot;&gt;mbed-fastmodel-agent&lt;/a&gt; module is installed :</source>
          <target state="translated">「--fm」オプションは、&lt;a href=&quot;https://github.com/ARMmbed/mbed-fastmodel-agent&quot;&gt;mbed-fastmodel-agent&lt;/a&gt;モジュールがインストールされている場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="85c890bac201b9058908fec1463a1d2a9cb01d34" translate="yes" xml:space="preserve">
          <source>The SARA NBIOT EVK board must be connected to a Windows PC using a Segger JLink box, which is used for downloading code and resetting the board. The USB port on the EVK must also be connected to the same PC.  To make use of these hooks you will also require access to some proprietary tools that can be requested from u-blox.</source>
          <target state="translated">SARA NBIOT EVK ボードは、Segger JLink ボックスを使用して Windows PC に接続する必要があります。EVKのUSBポートも同じPCに接続する必要があります。これらのフックを使用するには、u-bloxにリクエストできるいくつかの独自ツールへのアクセスも必要です。</target>
        </trans-unit>
        <trans-unit id="a1d3614cfb60cf469b630755b7dafb4e3fd4e715" translate="yes" xml:space="preserve">
          <source>The development of Htrun has been moved into the &lt;a href=&quot;../../src/mbed_os_tools&quot;&gt;mbed-os-tools&lt;/a&gt; package. You can continue to use this module for legacy reasons, however all further development should be continued in the new package.</source>
          <target state="translated">Htrunの開発は、&lt;a href=&quot;../../src/mbed_os_tools&quot;&gt;mbed-os-tools&lt;/a&gt;パッケージに移されました。従来の理由でこのモジュールを引き続き使用できますが、それ以降の開発はすべて新しいパッケージで継続する必要があります。</target>
        </trans-unit>
        <trans-unit id="6fce2d6a602e17341d42158c18479a0c7fde13f6" translate="yes" xml:space="preserve">
          <source>This chapter will present few examples of how you can use &lt;code&gt;mbedhtrun&lt;/code&gt; command line to execute tests. In most cases test automation tools such as &lt;a href=&quot;https://github.com/ARMmbed/greentea&quot;&gt;Greentea&lt;/a&gt; will execute &lt;code&gt;mbedhtrun&lt;/code&gt; implicitly. There are cases when we want to execute &lt;code&gt;mbedhtrun&lt;/code&gt; independently. Mostly in situation when we want to:</source>
          <target state="translated">この章では、 &lt;code&gt;mbedhtrun&lt;/code&gt; コマンドラインを使用してテストを実行する方法の例をいくつか紹介します。ほとんどの場合、&lt;a href=&quot;https://github.com/ARMmbed/greentea&quot;&gt;Greentea&lt;/a&gt;などのテスト自動化ツールは &lt;code&gt;mbedhtrun&lt;/code&gt; を暗黙的に実行します。 &lt;code&gt;mbedhtrun&lt;/code&gt; を独立して実行したい場合があります。主に次のような状況にあります。</target>
        </trans-unit>
        <trans-unit id="25cfa2b01075915c44d77b45ca4c742f78dd7e79" translate="yes" xml:space="preserve">
          <source>This function should replace &lt;code&gt;scanf()&lt;/code&gt; used to check for incoming messages from master.
Function parses input and if key-value message is found load to &lt;code&gt;out_key&lt;/code&gt;, &lt;code&gt;out_value&lt;/code&gt; key-value pair. Use &lt;code&gt;out_key_size&lt;/code&gt; and &lt;code&gt;out_value_size&lt;/code&gt; to define out buffers max size (including trailing zero).</source>
          <target state="translated">この関数は、マスターからの着信メッセージをチェックするために使用される &lt;code&gt;scanf()&lt;/code&gt; を置き換える必要があります。関数は入力を解析し、キーと値のメッセージが見つかった場合は、 &lt;code&gt;out_key&lt;/code&gt; 、 &lt;code&gt;out_value&lt;/code&gt; のキーと値のペアにロードします。使用 &lt;code&gt;out_key_size&lt;/code&gt; と &lt;code&gt;out_value_size&lt;/code&gt; バッファ（ゼロを末尾に含む）の最大サイズを定義します。</target>
        </trans-unit>
        <trans-unit id="65299901239874a6cb949a2e51f51f4fbb5a9775" translate="yes" xml:space="preserve">
          <source>This option is designed for htrun to use Arm Fast Models.</source>
          <target state="translated">このオプションは、Arm Fast Models を使用するための htrun 用に設計されています。</target>
        </trans-unit>
        <trans-unit id="44e2532f0cb63fd8184a45f5dee53bd8b75b0c12" translate="yes" xml:space="preserve">
          <source>This phase comes just after handshake phase. DUT informs host about test parameters such as client version, timeout, requested host test name etc. After this part is finished master will create requested host test and attach callbacks to user events.
This phase is ended with &lt;code&gt;__host_test_name&lt;/code&gt; being received by host. After &lt;code&gt;__host_test_name&lt;/code&gt; event is received</source>
          <target state="translated">このフェーズは、ハンドシェイクフェーズの直後に発生します。DUTは、クライアントバージョン、タイムアウト、要求されたホストテスト名などのテストパラメータについてホストに通知します。この部分が終了すると、マスターは要求されたホストテストを作成し、ユーザーイベントにコールバックを添付します。このフェーズは、ホストが &lt;code&gt;__host_test_name&lt;/code&gt; を受信して終了します。 &lt;code&gt;__host_test_name&lt;/code&gt; イベントが受信された後</target>
        </trans-unit>
        <trans-unit id="87ffd053a24a9a4cd443eaef85db7c0d348b406b" translate="yes" xml:space="preserve">
          <source>Time stamp: &lt;code&gt;2016-02-11 19:53:27&lt;/code&gt;, see below:</source>
          <target state="translated">タイムスタンプ： &lt;code&gt;2016-02-11 19:53:27&lt;/code&gt; 、以下を参照してください：</target>
        </trans-unit>
        <trans-unit id="4af2c9ff1813d587766abee9f7ec0510e0469717" translate="yes" xml:space="preserve">
          <source>To avoid miscommunication between master and slave simple handshake protocol is introduces:</source>
          <target state="translated">マスターとスレーブ間の通信ミスを防ぐために、簡単なハンドシェイクプロトコルを導入しています。</target>
        </trans-unit>
        <trans-unit id="cf2dc67e3be0bab3e7a0cc8e1a40911892791049" translate="yes" xml:space="preserve">
          <source>To capture a log use following option:</source>
          <target state="translated">ログをキャプチャするには、以下のオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="82291530bb70e06584cb774caa50c878ef17f36b" translate="yes" xml:space="preserve">
          <source>To check whether the installation was successful try running the &lt;code&gt;mbedgt --help&lt;/code&gt; command and check that it returns information (you may need to restart your terminal first):</source>
          <target state="translated">インストールが成功したかどうかを確認するには、 &lt;code&gt;mbedgt --help&lt;/code&gt; コマンドを実行して、情報が返されることを確認します（最初に端末を再起動する必要がある場合があります）。</target>
        </trans-unit>
        <trans-unit id="ab53aec5e2dcd07bcd2bff109dfd75ca828a92a6" translate="yes" xml:space="preserve">
          <source>To install mbed-ls from &lt;a href=&quot;https://pypi.python.org/pypi/mbed-host-tests&quot;&gt;PyPI&lt;/a&gt; use command:</source>
          <target state="translated">&lt;a href=&quot;https://pypi.python.org/pypi/mbed-host-tests&quot;&gt;PyPI&lt;/a&gt;からmbed-lsをインストールするには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="820de9ca27785efb587fcd2b2a418cd80b042a8e" translate="yes" xml:space="preserve">
          <source>To install the mbed test suite, first clone the &lt;code&gt;mbed-os-tools&lt;/code&gt; repository:</source>
          <target state="translated">mbedテストスイートをインストールするには、最初に &lt;code&gt;mbed-os-tools&lt;/code&gt; リポジトリのクローンを作成します。</target>
        </trans-unit>
        <trans-unit id="b03cb0e400fb841ec31aad1884efb8674d590f0e" translate="yes" xml:space="preserve">
          <source>Transport layer consist of simple &lt;code&gt;{{ KEY ; VALUE }} \n&lt;/code&gt; text messages sent by slave (DUT). Both key and value are strings with allowed character set limitations (to simplify parsing and protocol parser itself). Message ends with required by DUT K-V parser &lt;code&gt;\n&lt;/code&gt; character.</source>
          <target state="translated">トランスポート層は単純な &lt;code&gt;{{ KEY ; VALUE }} \n&lt;/code&gt; スレーブ（DUT）によって送信されたテキストメッセージ。キーと値はどちらも、許可されている文字セットの制限がある文字列です（解析とプロトコルパーサー自体を簡素化するため）。メッセージは、DUTKVパーサーの &lt;code&gt;\n&lt;/code&gt; 文字で終了します。</target>
        </trans-unit>
        <trans-unit id="70fd40f266f853f835d86fc1d1b7cad7ea02d3f9" translate="yes" xml:space="preserve">
          <source>Use following command to test the example and the comparison log:</source>
          <target state="translated">例題と比較ログをテストするには、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="334d09ec6a6d9108ec4a6116afbeec4c31b8b481" translate="yes" xml:space="preserve">
          <source>Use key-value protocol to handshake with device and make sure correct host test script is executed to supervise test suite execution.</source>
          <target state="translated">キー値プロトコルを使用してデバイスとのハンドシェイクを行い、正しいホストテストスクリプトが実行されていることを確認して、テストスイートの実行を監督します。</target>
        </trans-unit>
        <trans-unit id="e1bd0c9c0eeddbe79b76d282f89baa5e70f98f49" translate="yes" xml:space="preserve">
          <source>Useful command line end-to-end examples</source>
          <target state="translated">便利なコマンドラインのエンドツーエンドの例</target>
        </trans-unit>
        <trans-unit id="979177c3f7c9f6589829903f8006c1110617023c" translate="yes" xml:space="preserve">
          <source>User can't register callbacks to &quot;system events&quot; with few exceptions.</source>
          <target state="translated">ユーザーが「システムイベント」のコールバックを登録することは、ほとんどの例外を除いてできません。</target>
        </trans-unit>
        <trans-unit id="d7f65ec270b5858ddcb0ea43a171f75c69a50de3" translate="yes" xml:space="preserve">
          <source>Using __rdx_line event</source>
          <target state="translated">rdx_lineイベントの使用</target>
        </trans-unit>
        <trans-unit id="36b9d36e832107c9ae2570465ca25bcbd5a3dd97" translate="yes" xml:space="preserve">
          <source>We can use few methods to structure out test suite and test cases. Simpliest would be to use &lt;code&gt;greentea-client&lt;/code&gt; API and wrap one test case inside out test suite. This way of creating test suite is useful when you want to:</source>
          <target state="translated">テストスイートとテストケースを構成するために、いくつかの方法を使用できます。最も簡単なのは、 &lt;code&gt;greentea-client&lt;/code&gt; APIを使用し、1つのテストケースをテストスイートの裏返しにラップすることです。テストスイートを作成するこの方法は、次の場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9fc54ec0002c9b3a7dc3a343aa736d8a5a416316" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;__sync&lt;/code&gt; packet is parsed in the stream DUT sends back (echoes) &lt;code&gt;__sync&lt;/code&gt; event with the same &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_3_.28MD5_hash_.26_namespace.29&quot;&gt;UUID&lt;/a&gt; as payload. UUID is a random value e.g.  &lt;code&gt;5f8dbbd2-199a-449c-b286-343a57da7a37&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;__sync&lt;/code&gt; パケットは、ストリームDUTに解析されるバック（エコー）を送信 &lt;code&gt;__sync&lt;/code&gt; の同一のイベント&lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_3_.28MD5_hash_.26_namespace.29&quot;&gt;UUID&lt;/a&gt;ペイロードとしてです。UUIDはランダムな値です（例： &lt;code&gt;5f8dbbd2-199a-449c-b286-343a57da7a37&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="2f341882dc398289385b72f5e1d586c00508a549" translate="yes" xml:space="preserve">
          <source>When writing a new host test for your module please bear in mind that:</source>
          <target state="translated">モジュールのために新しいホストテストを書くときは、以下のことを念頭に置いてください。</target>
        </trans-unit>
        <trans-unit id="d09112b342b1d638b05c2a329147d91b17294862" translate="yes" xml:space="preserve">
          <source>When writing host test using OS resources such as sockets, files, serial ports, peripheral devices like for example multi-meters / scopes. remember that those resources are indivisible!</source>
          <target state="translated">ソケット、ファイル、シリアルポート、マルチメータ/スコープなどの周辺機器などのOSリソースを使用してホストテストを記述する場合、これらのリソースは不可分であることを覚えておいてください!</target>
        </trans-unit>
        <trans-unit id="890f3875b8b3d9fcc39b709891847f99bce284ee" translate="yes" xml:space="preserve">
          <source>Writing DUT test suite (slave side)</source>
          <target state="translated">DUTテストスイートの書き込み(スレーブ側</target>
        </trans-unit>
        <trans-unit id="21e2e206cbdc9151364078fceb1dfe895ed9b4d2" translate="yes" xml:space="preserve">
          <source>Writing host tests (master side)</source>
          <target state="translated">ホストテストの書き込み(マスター側</target>
        </trans-unit>
        <trans-unit id="b71b200d5a694f60a42059425701583d39b0e89e" translate="yes" xml:space="preserve">
          <source>You can register callbacks in &lt;code&gt;setup()&lt;/code&gt; phase or decorate callback functions using &lt;code&gt;@event_callback&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;setup()&lt;/code&gt; フェーズでコールバックを登録するか、 &lt;code&gt;@event_callback&lt;/code&gt; デコレータを使用してコールバック関数をデコレートできます。</target>
        </trans-unit>
        <trans-unit id="0796fb65c6f1d0d01f20cd07e52afc4c962187db" translate="yes" xml:space="preserve">
          <source>You need to place your custom host test in &lt;code&gt;&amp;lt;module&amp;gt;/test/host_tests&lt;/code&gt; directory.</source>
          <target state="translated">カスタムホストテストを &lt;code&gt;&amp;lt;module&amp;gt;/test/host_tests&lt;/code&gt; ディレクトリに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="329e432f66c96948efd63ceddf05f381ac23e2af" translate="yes" xml:space="preserve">
          <source>You need to write and specify by name your custom host test:</source>
          <target state="translated">カスタムホストテストを記述し、名前で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d086cfdf9e616756e97771786e29c764137f85f5" translate="yes" xml:space="preserve">
          <source>You own the host test and you should write it the way so it can coexist with the same host tests ran by other processes such as Continuous Integration systems or other host users.</source>
          <target state="translated">ホストテストを所有しているのはあなたであり、継続的インテグレーションシステムや他のホストユーザーのような他のプロセスによって実行される同じホストテストと共存できるように、その方法を書くべきです。</target>
        </trans-unit>
        <trans-unit id="2f248e4c7bc213c0e1d04f3156433841516876eb" translate="yes" xml:space="preserve">
          <source>calls immediately &lt;code&gt;greentea_parse_kv&lt;/code&gt; (blocking parse of input serial port for event &lt;code&gt;{{__sync;UUID}}&lt;/code&gt;).</source>
          <target state="translated">すぐに &lt;code&gt;greentea_parse_kv&lt;/code&gt; を呼び出します（イベント &lt;code&gt;{{__sync;UUID}}&lt;/code&gt; の入力シリアルポートの解析をブロックします）。</target>
        </trans-unit>
        <trans-unit id="58a78d6d31f54b4406d541d02584f0cf73d3de31" translate="yes" xml:space="preserve">
          <source>debug our code and have binary + host test instrumentation on,</source>
          <target state="translated">私たちのコードをデバッグして、バイナリ+ホストテストの計測器をオンにしています。</target>
        </trans-unit>
        <trans-unit id="4a0d7154d60bc6a4a8440a6c5fd4b6c5c8cad825" translate="yes" xml:space="preserve">
          <source>device reset and</source>
          <target state="translated">デバイスリセットと</target>
        </trans-unit>
        <trans-unit id="0ae41492d3c7b24fb4ca6e6e797730f9f461f714" translate="yes" xml:space="preserve">
          <source>driving test binary flashing,</source>
          <target state="translated">運転試験バイナリ点滅。</target>
        </trans-unit>
        <trans-unit id="924e021d80ca878162edcc13bd21682f4723012d" translate="yes" xml:space="preserve">
          <source>just want to replace test runner in another OS with one compatible with mbed-enabled devices.</source>
          <target state="translated">他のOSのtest runnerをmbed対応のデバイスと互換性のあるものに置き換えたいだけです。</target>
        </trans-unit>
        <trans-unit id="051785d5a53040a76f3a795c9fdbe3a2b7c1ba4d" translate="yes" xml:space="preserve">
          <source>key-value data becomes a recognizable message with key (string) and value (string) payload.</source>
          <target state="translated">key-valueデータは、key(文字列)とvalue(文字列)のペイロードを持つ認識可能なメッセージになります。</target>
        </trans-unit>
        <trans-unit id="2d8a18bd8189a1ef27e733539fdea3a301fa251c" translate="yes" xml:space="preserve">
          <source>make example application (example as a test) or</source>
          <target state="translated">お手本にする</target>
        </trans-unit>
        <trans-unit id="d521450035bfa4fa670a2d66f41a8c7ef4020fda" translate="yes" xml:space="preserve">
          <source>mbed tools used to flash, reset and supervise test execution for mbed-enabled devices</source>
          <target state="translated">mbed 対応デバイスのフラッシュ、リセット、テスト実行の監視に使用される mbed ツール</target>
        </trans-unit>
        <trans-unit id="c7dca3c11ec8a5b089c578680afaf92dd9f71663" translate="yes" xml:space="preserve">
          <source>mbed's test suite (codenamed &lt;code&gt;Greentea&lt;/code&gt;) supports the &lt;em&gt;test supervisor&lt;/em&gt; concept. This concept is realized by this module. &lt;code&gt;mbed-host-tests&lt;/code&gt; is a collection of host tests. Host test is script written in Python, which is executed in parallel with the test suite runner (a binary running on the target hardware / device under test) to monitor the test execution's progress or to control the test flow (interaction with the mbed device under test - DUT). The host test is also responsible for grabbing the test result, or deducing it from the test runner's behavior.</source>
          <target state="translated">mbedのテストスイート（コードネーム &lt;code&gt;Greentea&lt;/code&gt; ）は、&lt;em&gt;テストスーパーバイザーの&lt;/em&gt;概念をサポートしています。この概念は、このモジュールによって実現されます。 &lt;code&gt;mbed-host-tests&lt;/code&gt; は、ホストテストのコレクションです。ホストテストはPythonで記述されたスクリプトであり、テストスイートランナー（テスト対象のターゲットハードウェア/デバイスで実行されるバイナリ）と並行して実行され、テスト実行の進行状況を監視したり、テストフローを制御したりします（mbedデバイスとの相互作用テスト-DUT）。ホストテストは、テスト結果を取得したり、テストランナーの動作からそれを推測したりする役割も果たします。</target>
        </trans-unit>
        <trans-unit id="d24be69745afbb12c8b0d04eab75845575a8791d" translate="yes" xml:space="preserve">
          <source>mbed-host-tests</source>
          <target state="translated">エムビーディーホストテスト</target>
        </trans-unit>
        <trans-unit id="9a2f25d66a9f94f62ac0a0c7361a1064add6b06f" translate="yes" xml:space="preserve">
          <source>mbed-os examples are essentially sample apps written as inspirational code for developers to understand the mbed-os APIs and coding paradigms. Before every mbed-os release all examples are tested across all supported configs and platforms. There is already a large set examples available and as they grow it is important to automate them. Hence automating examples make sense. Although it is important not to pollute them with test like instrumentation. As that will defeat the purpose of examples being simple and specific.</source>
          <target state="translated">mbed-os のサンプルアプリは、基本的に開発者が mbed-os の API とコーディングパラダイムを理解するためのインスピレーションを与えるコードとして書かれています。mbed-os のリリース前に、すべてのサンプルはサポートされているすべての設定とプラットフォームでテストされています。すでに多くのサンプルが用意されているので、それらを自動化することが重要だ。したがって、サンプルを自動化することは理にかなっています。しかし、インストルメンテーションのようなテストでサンプルを汚染しないことが重要です。それはシンプルで具体的な例の目的を達成できないからです。</target>
        </trans-unit>
        <trans-unit id="f6c5a3ffbcae54629b163af76fe38d26150e50f4" translate="yes" xml:space="preserve">
          <source>preferred host test script (Python script which is used to supervise/instrument test execution),</source>
          <target state="translated">好ましいホストテストスクリプト(テストの実行を監督/監視するために使用されるPythonスクリプト)。</target>
        </trans-unit>
        <trans-unit id="0152edce00462ac4cc087f3acc4250a2fe8763ec" translate="yes" xml:space="preserve">
          <source>prototype or</source>
          <target state="translated">試作品</target>
        </trans-unit>
        <trans-unit id="4c478d8822658f18e996b8d7fcfafadff0859ea5" translate="yes" xml:space="preserve">
          <source>test environment version,</source>
          <target state="translated">テスト環境のバージョンを指定します。</target>
        </trans-unit>
        <trans-unit id="dde8714ae7facacf6c0b129f3ca63306b4a73d03" translate="yes" xml:space="preserve">
          <source>test execution.</source>
          <target state="translated">テストを実行します。</target>
        </trans-unit>
        <trans-unit id="3ca732331b49aa9581fbadd09382dba22ed19286" translate="yes" xml:space="preserve">
          <source>test timeout,</source>
          <target state="translated">テストのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="f08278b6533f3536f5ef21e38149813caa1d07be" translate="yes" xml:space="preserve">
          <source>when your test suite is calling blocking forever function. For example all types of UDP/TCP servers which run in forever loop are in this category. In this case we do not expect from DUT &lt;code&gt;__exit&lt;/code&gt; event at all and host test should be designed in such a way that it always return result.</source>
          <target state="translated">テストスイートがblockingforever関数を呼び出しているとき。たとえば、無限ループで実行されるすべてのタイプのUDP / TCPサーバーがこのカテゴリに含まれます。この場合、DUT &lt;code&gt;__exit&lt;/code&gt; イベントにはまったく期待していません。ホストテストは、常に結果が返されるように設計する必要があります。</target>
        </trans-unit>
        <trans-unit id="cebce5c7c70edab2f7eb6dc6175ab54cb19eec96" translate="yes" xml:space="preserve">
          <source>write only one test case inside test suite,</source>
          <target state="translated">テストスイート内にテストケースを一つだけ書きます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
