<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/jsonlogic-rs/">
    <body>
      <group id="jsonlogic-rs">
        <trans-unit id="d73737adc4cecff4211f205b3ff43c0275a9690b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Available Via&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;経由で利用可能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="100f54ab7016d08c776bf5eb400bb8bf401b3295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Language&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;言語&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d978cf366a977f9b43bc86d84f453fcb5ba09e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; from our CI experiences, this may not work for Python 3.8 on Windows.
If you are running this on a Windows machine and can confirm whether or not
this works, let us know!</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; CIの経験から、これはWindows上のPython3.8では機能しない可能性があります。これをWindowsマシンで実行していて、これが機能するかどうかを確認できる場合は、お知らせください。</target>
        </trans-unit>
        <trans-unit id="e0e4b44ab668c7293399a8ca9a5e825b567c473b" translate="yes" xml:space="preserve">
          <source>All operations are tested using our own test suite in Rust as well as the
shared tests for all JsonLogic implementations defined &lt;a href=&quot;http://jsonlogic.com/tests.json&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">すべての操作は、Rustの独自のテストスイートと、&lt;a href=&quot;http://jsonlogic.com/tests.json&quot;&gt;ここで&lt;/a&gt;定義されているすべてのJsonLogic実装の共有テストを使用してテストされます。</target>
        </trans-unit>
        <trans-unit id="5831acda4a827b8389227bfef92bb8d176d8e4ca" translate="yes" xml:space="preserve">
          <source>An example of chaining multiple results:</source>
          <target state="translated">複数の結果を連鎖させた例。</target>
        </trans-unit>
        <trans-unit id="d37ac01df24b6b4910d8b5723cc37382d0f3e194" translate="yes" xml:space="preserve">
          <source>Being built in Rust, we are able to provide the package in a variety of
languages. The table below describes current language support:</source>
          <target state="translated">Rust で構築されているため、様々な言語でパッケージを提供することができます。下の表は、現在の言語サポートについて説明しています。</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">建物</target>
        </trans-unit>
        <trans-unit id="6c98e86fc49b32d64a3b4b449a8cdd37ce4e8e8d" translate="yes" xml:space="preserve">
          <source>Cargo</source>
          <target state="translated">貨物</target>
        </trans-unit>
        <trans-unit id="97645330a1a0a67a4d21bf91c8598ee8ee4c9a16" translate="yes" xml:space="preserve">
          <source>Commandline</source>
          <target state="translated">コマンドライン</target>
        </trans-unit>
        <trans-unit id="7ba231db8b69c78c3126e7c1ac979c8612fb475a" translate="yes" xml:space="preserve">
          <source>If a wheel does &lt;em&gt;not&lt;/em&gt; exist for your system, this will attempt to build the
package. In order for the package to build successfully, you MUST have Rust
installed on your local system, and &lt;code&gt;cargo&lt;/code&gt; MUST be present in your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">システムにホイールが存在し&lt;em&gt;ない&lt;/em&gt;場合、これはパッケージのビルドを試みます。パッケージが正常にビルドされるためには、ローカルシステムにRustがインストールされている必要があり、 &lt;code&gt;cargo&lt;/code&gt; が &lt;code&gt;PATH&lt;/code&gt; に存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="8740af5f27e71662805094227a27bf222311fa76" translate="yes" xml:space="preserve">
          <source>If you just want to use the commandline &lt;code&gt;jsonlogic&lt;/code&gt; binary:</source>
          <target state="translated">コマンドラインの &lt;code&gt;jsonlogic&lt;/code&gt; バイナリを使用するだけの場合：</target>
        </trans-unit>
        <trans-unit id="12bb7b639e3ab6dc3d745e4ba09f609bdf740848" translate="yes" xml:space="preserve">
          <source>If you would like to build or test the Python distribution, Python 3.6 or
newer must be available in your &lt;code&gt;PATH&lt;/code&gt;. The &lt;code&gt;venv&lt;/code&gt; module must be part of the
Python distribution (looking at you, Ubuntu).</source>
          <target state="translated">Pythonディストリビューションをビルドまたはテストする場合は、 &lt;code&gt;PATH&lt;/code&gt; でPython3.6以降が使用可能である必要があります。 &lt;code&gt;venv&lt;/code&gt; のモジュールは、（あなたを見て、Ubuntuの）Pythonディストリビューションの一部でなければなりません。</target>
        </trans-unit>
        <trans-unit id="21d30629145c689ea13de28256c6ba29f628644e" translate="yes" xml:space="preserve">
          <source>If you would like to run tests for the WASM package, &lt;code&gt;node&lt;/code&gt; 10 or newer must be
available in your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">WASMパッケージのテストを実行する場合は、 &lt;code&gt;node&lt;/code&gt; 10以降が &lt;code&gt;PATH&lt;/code&gt; で使用可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="820d0909e9b671cc84d8d89d8c976f60005be210" translate="yes" xml:space="preserve">
          <source>JavaScript (as WASM)</source>
          <target state="translated">ジャバスクリプト</target>
        </trans-unit>
        <trans-unit id="1ca76be7b84d714e17e61b65c84bec4810f63dd5" translate="yes" xml:space="preserve">
          <source>Javascript</source>
          <target state="translated">Javascript</target>
        </trans-unit>
        <trans-unit id="42711534b8f39ba938bd6719c707f2031c439f7d" translate="yes" xml:space="preserve">
          <source>JsonLogic implemented with a Rust backend</source>
          <target state="translated">Rust バックエンドで実装された JsonLogic</target>
        </trans-unit>
        <trans-unit id="d81381ad21a195e6a8edb90dde47a36fc7e985dc" translate="yes" xml:space="preserve">
          <source>Node Package via &lt;a href=&quot;https://www.npmjs.com/package/@bestow/jsonlogic-rs&quot;&gt;NPM&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/@bestow/jsonlogic-rs&quot;&gt;NPM&lt;/a&gt;経由のノードパッケージ</target>
        </trans-unit>
        <trans-unit id="e1b33239879f037fa7056be2c1c53971cb54787e" translate="yes" xml:space="preserve">
          <source>Node/Browser</source>
          <target state="translated">ノード/ブラウザ</target>
        </trans-unit>
        <trans-unit id="7924070d81775e573c33d271a1576618206c58f7" translate="yes" xml:space="preserve">
          <source>Note that the package is distributed as a node package, so you'll need to use
&lt;code&gt;browserify&lt;/code&gt;, &lt;code&gt;webpack&lt;/code&gt;, or similar to install for the browser.</source>
          <target state="translated">パッケージはノードパッケージとして配布されるため、ブラウザにインストールするには、 &lt;code&gt;webpack&lt;/code&gt; 、 &lt;code&gt;browserify&lt;/code&gt; などを使用する必要があることに注意してください 。</target>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">前提条件</target>
        </trans-unit>
        <trans-unit id="1cb0bee5478facc7715136ce6ca34b0fe11136cb" translate="yes" xml:space="preserve">
          <source>Project Status</source>
          <target state="translated">プロジェクトの状況</target>
        </trans-unit>
        <trans-unit id="33e72da85f21769ca9a8ee3181ea9def0321f98f" translate="yes" xml:space="preserve">
          <source>PyPI</source>
          <target state="translated">パイピーアイ</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">パイソン</target>
        </trans-unit>
        <trans-unit id="3db74efa0be8ce0796c674c7c44fd1c34852ed79" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;jsonlogic --help&lt;/code&gt; the most up-to-date usage.</source>
          <target state="translated">&lt;code&gt;jsonlogic --help&lt;/code&gt; 実行します-最新の使用法を支援します。</target>
        </trans-unit>
        <trans-unit id="e2ae20d9ae7fcacb605c03c198e0a1c51d446f50" translate="yes" xml:space="preserve">
          <source>Rust</source>
          <target state="translated">さび</target>
        </trans-unit>
        <trans-unit id="94c93370113da1530dd030935b611c10a40030d4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#Building&quot;&gt;Building&lt;/a&gt; below for more details.</source>
          <target state="translated">詳細については、以下の&lt;a href=&quot;#Building&quot;&gt;構築を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="58fd115d1b08adcd81e3cd4063b89d341a1059f9" translate="yes" xml:space="preserve">
          <source>Supports Python 3.6+.</source>
          <target state="translated">Python 3.6+に対応しました。</target>
        </trans-unit>
        <trans-unit id="6d970f6d6d932d6adca15b0d8a70c491ee266519" translate="yes" xml:space="preserve">
          <source>The built WASM package will be in &lt;code&gt;js/&lt;/code&gt;. This package is directly importable
from &lt;code&gt;node&lt;/code&gt;, but needs to be browserified in order to be used in the browser.</source>
          <target state="translated">ビルドされたWASMパッケージは &lt;code&gt;js/&lt;/code&gt; ます。このパッケージは &lt;code&gt;node&lt;/code&gt; から直接インポートできますが、ブラウザで使用するにはブラウザ化する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c178a7557e7b2677d86c1f802afe02c592d7dcf" translate="yes" xml:space="preserve">
          <source>The python distribution consists both of the C extension generated from the
Rust and a thin wrapper found in &lt;code&gt;py/jsonlogic_rs/&lt;/code&gt;. &lt;code&gt;make develop-py&lt;/code&gt; will
compile the C extension and place it in that directory, where it will be
importable by your local venv. When building wheels, the wrapper and the C
extension are all packaged together into the resultant wheel, which will
be found in &lt;code&gt;dist/&lt;/code&gt;. When building an sdist, the Rust extension is not compiled.
The Rust and Python source are distributed together in a &lt;code&gt;.tar.gz&lt;/code&gt; file, again
found in &lt;code&gt;dist/&lt;/code&gt;.</source>
          <target state="translated">Pythonディストリビューションは、Rustから生成されたC拡張機能と、 &lt;code&gt;py/jsonlogic_rs/&lt;/code&gt; ある薄いラッパーの両方で構成されています。 &lt;code&gt;make develop-py&lt;/code&gt; development -pyはC拡張機能をコンパイルし、そのディレクトリに配置します。このディレクトリで、ローカルのvenvからインポートできます。ホイールを作成するとき、ラッパーとCエクステンションはすべて一緒にパッケージ化されて結果のホイールになります。これは &lt;code&gt;dist/&lt;/code&gt; ます。 sdistをビルドする場合、Rust拡張機能はコンパイルされません。 RustとPythonのソースは &lt;code&gt;.tar.gz&lt;/code&gt; ファイルで一緒に配布されます。これも &lt;code&gt;dist/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1149e91090a0196701c09d8b14709d84f71f07a4" translate="yes" xml:space="preserve">
          <source>This is an implementation of  the &lt;a href=&quot;http://jsonlogic.com/&quot;&gt;JsonLogic&lt;/a&gt; specification in Rust.</source>
          <target state="translated">これは、Rustの&lt;a href=&quot;http://jsonlogic.com/&quot;&gt;JsonLogic&lt;/a&gt;仕様の実装です。</target>
        </trans-unit>
        <trans-unit id="f8cd888e4ce7b8d496c4cae463fdbe3fee51e6d2" translate="yes" xml:space="preserve">
          <source>This will automatically create a virtual environment in &lt;code&gt;venv/&lt;/code&gt;, install
the necessary packages, and then install &lt;code&gt;jsonlogic_rs&lt;/code&gt; into that environment.</source>
          <target state="translated">これにより、 &lt;code&gt;venv/&lt;/code&gt; 仮想環境が自動的に作成され、必要なパッケージがインストールされてから、その環境に &lt;code&gt;jsonlogic_rs&lt;/code&gt; がインストールされます。</target>
        </trans-unit>
        <trans-unit id="28a12e26040ce743a2ef0e4f26c056717346a6ef" translate="yes" xml:space="preserve">
          <source>To build a production source distribution:</source>
          <target state="translated">プロダクションソースのディストリビューションを構築すること。</target>
        </trans-unit>
        <trans-unit id="da7cfdbe3c23dddf3ce9ce6243b18ddbb084a6db" translate="yes" xml:space="preserve">
          <source>To build a wheel (specific to your current system architecture and python
version):</source>
          <target state="translated">ホイールを構築するには(現在のシステムアーキテクチャとpythonのバージョンに合わせて)。</target>
        </trans-unit>
        <trans-unit id="023a3af5b4d5274607ce8f5dbb00a0b75bbec1b7" translate="yes" xml:space="preserve">
          <source>To build the Rust library, just run &lt;code&gt;cargo build&lt;/code&gt;.</source>
          <target state="translated">Rustライブラリをビルドするには、cargobuildを実行 &lt;code&gt;cargo build&lt;/code&gt; だけです。</target>
        </trans-unit>
        <trans-unit id="e041e86f81a8736f07aea797e990e57477e7f11b" translate="yes" xml:space="preserve">
          <source>To perform a dev install of the Python package, run:</source>
          <target state="translated">Pythonパッケージのdevインストールを実行するには、実行してください。</target>
        </trans-unit>
        <trans-unit id="67c3e40438629ab02e0df13e2c978ce9b971d9c4" translate="yes" xml:space="preserve">
          <source>To use as a Rust library, add to your &lt;code&gt;Cargo.toml&lt;/code&gt;:</source>
          <target state="translated">Rustライブラリとして使用するには、 &lt;code&gt;Cargo.toml&lt;/code&gt; に次のように追加します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="05246491325c5d174b82e5fe85d5788c1a164aba" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;jsonlogic&lt;/code&gt; on the cmdline to explore an API:</source>
          <target state="translated">&lt;code&gt;jsonlogic&lt;/code&gt; を使用してAPIを探索します。</target>
        </trans-unit>
        <trans-unit id="9b3f1e07a2364545d66c31d18234666c8c789ce0" translate="yes" xml:space="preserve">
          <source>We also implement the &lt;code&gt;?:&lt;/code&gt;, which is not described in that specification
but is a direct alias for &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;?:&lt;/code&gt; を実装します。これは、その仕様には記載されていませんが、 &lt;code&gt;if&lt;/code&gt; の直接のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="0643c216d42fa73b0cea0ebc5ebe54b22658d5da" translate="yes" xml:space="preserve">
          <source>We are working on adding new operations with improved type safety, as well
as the ability to define functions as JsonLogic. We will communicate with
the broader JsonLogic community to see if we can make them part of the
standard as we do so.</source>
          <target state="translated">私たちは、JsonLogic として関数を定義する機能だけでなく、型の安全性を向上させた新しい操作の追加に取り組んでいます。私たちは、より広範な JsonLogic コミュニティとコミュニケーションを取りながら、それらを標準の一部にすることができるかどうかを確認していきます。</target>
        </trans-unit>
        <trans-unit id="05920badbde1bebce61d394ec357c54fbfb91537" translate="yes" xml:space="preserve">
          <source>We implement 100% of the standard supported operations defined &lt;a href=&quot;http://jsonlogic.com/operations.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://jsonlogic.com/operations.html&quot;&gt;ここで&lt;/a&gt;定義されている標準でサポートされている操作を100％実装します。</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">ウェブアセンブリ</target>
        </trans-unit>
        <trans-unit id="7e409f559bf3a92a805cf96e2714d0e6c93a3e0c" translate="yes" xml:space="preserve">
          <source>Wheels are distributed for many platforms, so you can often just run:</source>
          <target state="translated">ホイールは多くの台に分散しているので、走るだけで済むことが多いです。</target>
        </trans-unit>
        <trans-unit id="c2b74be4837907b6b90281b88fc05f487a5c71ca" translate="yes" xml:space="preserve">
          <source>You can build a debug WASM release with</source>
          <target state="translated">デバッグ用の WASM リリースは</target>
        </trans-unit>
        <trans-unit id="899ee7d3fca1f14acdc3476dabc461f19e33d27e" translate="yes" xml:space="preserve">
          <source>You can build a production WASM release with</source>
          <target state="translated">を使用して、プロダクション WASM リリースをビルドすることができます。</target>
        </trans-unit>
        <trans-unit id="9414810992a02fa99fa86e102a0dc5c9dfead22b" translate="yes" xml:space="preserve">
          <source>You can create a release build with &lt;code&gt;make build&lt;/code&gt;.</source>
          <target state="translated">あなたはでリリースビルドを作成することができます &lt;code&gt;make build&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb2708a21d417e46c818816fd592fe180c4303d0" translate="yes" xml:space="preserve">
          <source>You can install JsonLogic using npm or yarn. In NPM:</source>
          <target state="translated">JsonLogicのインストールはnpmかyarnを使って行います。npmでは</target>
        </trans-unit>
        <trans-unit id="1d42a5e0e52895f4ededd30fcb8e5c9091c0eb72" translate="yes" xml:space="preserve">
          <source>You must have Rust installed and &lt;code&gt;cargo&lt;/code&gt; available in your &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">Rustをインストールし、 &lt;code&gt;PATH&lt;/code&gt; で &lt;code&gt;cargo&lt;/code&gt; 利用できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="797c21e1f5e332d42b2af953b9e841d6a3ffa0a9" translate="yes" xml:space="preserve">
          <source>json-logic-rs</source>
          <target state="translated">ジェーソンロジックRS</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
