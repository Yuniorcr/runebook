<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/finac/">
    <body>
      <group id="finac">
        <trans-unit id="e0bc517f0382d1efa183357805c58a52da93c168" translate="yes" xml:space="preserve">
          <source>1 000,00 = 1000.0</source>
          <target state="translated">1 000,00=1000.0</target>
        </trans-unit>
        <trans-unit id="1f9249ef94b109311950d364cb0a2e72fb5721b3" translate="yes" xml:space="preserve">
          <source>1,000.00 = 1000.0</source>
          <target state="translated">1,000.00=1000.0</target>
        </trans-unit>
        <trans-unit id="5169a545a687004c5e394a108684ed16f6be68e1" translate="yes" xml:space="preserve">
          <source>1.000,00 = 1000.0</source>
          <target state="translated">1.000,00=1000.0</target>
        </trans-unit>
        <trans-unit id="e89b9db8f721acfe4688b4092470e3133c82d784" translate="yes" xml:space="preserve">
          <source>10,0 = 10.0</source>
          <target state="translated">10,0=10.0</target>
        </trans-unit>
        <trans-unit id="7c24cfa5d29ac382a304fdcc5bd5e624a2610327" translate="yes" xml:space="preserve">
          <source>10.0 = 10.0</source>
          <target state="translated">10.0=10.0</target>
        </trans-unit>
        <trans-unit id="961a249e293835cec043533b0a2e79600ff29397" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;account&lt;/strong&gt; bank account, counterparty account, tax account, special account
etc. Everything is accounts :)</source>
          <target state="translated">&lt;strong&gt;口座&lt;/strong&gt;銀行口座、カウンターパーティ口座、税口座、特別口座など。すべてが口座です:)</target>
        </trans-unit>
        <trans-unit id="bfdabb02b078586fc26e7e10af181d8303920292" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;asset&lt;/strong&gt; currency, ISIN, stock code etc., currencies &quot;USD&quot; and &quot;EUR&quot; are
created automatically. Finac doesn't divide assets into currencies, property
and other. This allows creating applications for the various areas using the
single library.</source>
          <target state="translated">&lt;strong&gt;資産&lt;/strong&gt;通貨、ISIN、証券コードなど、通貨「USD」と「EUR」は自動的に作成されます。Finacは、資産を通貨、資産、その他に分割しません。これにより、単一のライブラリを使用してさまざまな領域のアプリケーションを作成できます。</target>
        </trans-unit>
        <trans-unit id="2b4ca40aa4370cbfb8dd10113ddc306c82428eb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;transaction&lt;/strong&gt; movements from (credit) / to (debit) and between accounts</source>
          <target state="translated">&lt;strong&gt;トランザクション&lt;/strong&gt;（クレジット）/から（デビット）への、およびアカウント間の移動</target>
        </trans-unit>
        <trans-unit id="231f1b12f7eab989171425d19c7d79cf952bac15" translate="yes" xml:space="preserve">
          <source>Accounts of types &quot;tax&quot;, &quot;supplier&quot; and &quot;finagent&quot; are passive by default.</source>
          <target state="translated">tax&quot;、&quot;supplier&quot;、&quot;finagent &quot;のタイプのアカウントは、デフォルトでは受動的です。</target>
        </trans-unit>
        <trans-unit id="7d9c653f4e5248ba952e2f8ba1f0ba49196f0e1e" translate="yes" xml:space="preserve">
          <source>Actually, transaction templates are useful for any repeating operations. You
may specify all same arguments, as for the core functions.</source>
          <target state="translated">実は、トランザクションテンプレートは、どんな操作を繰り返す場合にも便利です。コア関数と同じように、すべての引数を指定することができます。</target>
        </trans-unit>
        <trans-unit id="3e47a34b2ca5976eb9101b04ab875b9df6180439" translate="yes" xml:space="preserve">
          <source>After the previous operation, we have &lt;em&gt;4,890.00&lt;/em&gt; USD on &quot;acc1&quot; and want to move
all except $1000 to &quot;acc2&quot;. Let's do it:</source>
          <target state="translated">前の操作の後、「acc1」に&lt;em&gt;4,890.00&lt;/em&gt; USDがあり、$ 1000を除くすべてを「acc2」に移動したいと考えています。やってみましょう：</target>
        </trans-unit>
        <trans-unit id="ab81efb949e5a152ae566045ff2ea716fe3433af" translate="yes" xml:space="preserve">
          <source>As you see, there's no counterparty account in lazy exchange. This feature is
useful for personal accounting and special applications, but for the
professional accounting, you should create counterparty exchange account and
perform buy-sell transactions with it.</source>
          <target state="translated">ご覧の通り、ダラダラ為替には取引相手口座がありません。この機能は個人会計や特殊な用途には便利ですが、専門的な会計を行う場合は、カウンターパーティー交換口座を作成して、それを使って売買取引を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="843f302dcb0938f7b0a5147d458e936f2b7d8874" translate="yes" xml:space="preserve">
          <source>Assets have &lt;strong&gt;rates&lt;/strong&gt; - value of one asset, relative to other.</source>
          <target state="translated">資産には&lt;strong&gt;レート&lt;/strong&gt;があり&lt;strong&gt;ます&lt;/strong&gt;-他の資産と比較した1つの資産の価値。</target>
        </trans-unit>
        <trans-unit id="ccf83992f2fcc156d5bdcfb04a7f02d0a4676284" translate="yes" xml:space="preserve">
          <source>But the problem is there's a lot of transactions you should sum up. Or
calculate the difference between bank balance and accounting. Pretty common,
eh? Don't do this, we have targets.</source>
          <target state="translated">でも問題は合計すべき取引が多いことです。銀行の残高と会計の差額を計算したりとか。よくあることだよね?やめとけよ、目標があるんだから。</target>
        </trans-unit>
        <trans-unit id="b5115124cf1d108916d1916201db31d5e536206c" translate="yes" xml:space="preserve">
          <source>Client-server mode and HTTP API</source>
          <target state="translated">クライアントサーバモードとHTTP API</target>
        </trans-unit>
        <trans-unit id="10788e048525f3fc5205d6c0e7e36e5eb1a0a8e7" translate="yes" xml:space="preserve">
          <source>Data multiplier</source>
          <target state="translated">データ乗算器</target>
        </trans-unit>
        <trans-unit id="f38c7f187adb1398d48e3bc72bd0062ecc005154" translate="yes" xml:space="preserve">
          <source>Depending on data, it may be useful to store numeric values in database as
integers instead of floats. Finac library has built-in data multiplier feature,
to enable it, set &lt;em&gt;multiplier=N&lt;/em&gt; in &lt;em&gt;finac.init()&lt;/em&gt; method, e.g.
&lt;em&gt;multiplier=1000&lt;/em&gt; if you want to store integers in tables and have data with
max precision 3 digits after comma.</source>
          <target state="translated">データによっては、数値を浮動小数点数ではなく整数としてデータベースに格納すると便利な場合があります。Finacライブラリにはデータ乗算器機能が組み込まれています。これを有効にするには、&lt;em&gt;finac.init（）&lt;/em&gt;メソッドで&lt;em&gt;multiplier = N&lt;/em&gt;を設定します。たとえば、 整数をテーブルに格納し、コンマの3桁後に最大精度のデータを格納する場合は&lt;em&gt;multiplier = 1000&lt;/em&gt;を設定します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8a127e64a9ead93f82c7317d4e36a9d1ed934818" translate="yes" xml:space="preserve">
          <source>Depending to your database type, it's REQUIRED to convert these columns to
either DATETIME (SQLite, for MySQL DATETIME(6) recommended) or TIMESTAMPTZ
(PostgreSQL, with timezone).</source>
          <target state="translated">データベースの種類によっては、これらの列をDATETIME (SQLite、MySQLの場合はDATETIME(6)を推奨)またはTIMESTAMPTZ (PostgreSQL、タイムゾーン付き)に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="0355bead37046ef9ccf42665436f3429df923847" translate="yes" xml:space="preserve">
          <source>Documentation: &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;https://finac.readthedocs.io/&lt;/a&gt;</source>
          <target state="translated">ドキュメント：&lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;https&lt;/a&gt;：//finac.readthedocs.io/</target>
        </trans-unit>
        <trans-unit id="21f6c7d432e5c7bcf8faad8a58ecba05dd344f3e" translate="yes" xml:space="preserve">
          <source>Enterprise server and support</source>
          <target state="translated">エンタープライズサーバーとサポート</target>
        </trans-unit>
        <trans-unit id="87ecef59c5c568d2a2d70b0af30a1d0fe1a4d195" translate="yes" xml:space="preserve">
          <source>Example: you have a repeating payment orders in your bank, which pay office
utility bills every 5th day of month, plus automatically moves $100 to saving
account. To fill this into accounting, just create YAML transaction template:</source>
          <target state="translated">例:あなたの銀行では、毎月5日ごとにオフィスの公共料金を支払い、さらに100ドルを自動的に貯金口座に移動させるような繰り返しの支払い注文をしています。これを会計に記入するには、YAMLのトランザクションテンプレートを作成するだけです。</target>
        </trans-unit>
        <trans-unit id="5e22b52adcdd3450d4860a16253732a7a0352c95" translate="yes" xml:space="preserve">
          <source>Finac - financial accounting for humans</source>
          <target state="translated">Finac-人間のための財務会計</target>
        </trans-unit>
        <trans-unit id="065cd4576e7fc6135d6a8cc143984e4edd47f3f0" translate="yes" xml:space="preserve">
          <source>Finac can automatically move assets between accounts with different currencies,
if exchange rate is set or specified in transaction details:</source>
          <target state="translated">取引詳細で為替レートが設定されている場合や指定されている場合は、異なる通貨の口座間で自動的に資産を移動させることができます。</target>
        </trans-unit>
        <trans-unit id="787e87b8248c9634a4639ada317dd0de56596846" translate="yes" xml:space="preserve">
          <source>Finac database contain 3 entity types:</source>
          <target state="translated">Finacデータベースには3つのエンティティタイプがあります。</target>
        </trans-unit>
        <trans-unit id="5da82b531dff48cd3d8eea4baae1e7e94fa20385" translate="yes" xml:space="preserve">
          <source>Finac doesn't use system locale. If you input amounts and targets as strings,
you may input them in any format and Finac will try converting it to the float
numeric automatically. The following values for amounts and targets are valid
and will be automatically parsed:</source>
          <target state="translated">Finacはシステムロケールを使用しません。金額や目標値を文字列で入力した場合、任意の形式で入力することができ、Finacは自動的に浮動小数点数に変換しようとします。金額や目標値は以下の値が有効で、自動的に解析されます。</target>
        </trans-unit>
        <trans-unit id="eb7dce8af31488284cd96b43c0097782eeb46899" translate="yes" xml:space="preserve">
          <source>Finac is a library and function set for Jupyter/ipython, which provides a
double-entry bookkeeping database.</source>
          <target state="translated">Finacは複式簿記データベースを提供するJupyter/ipython用のライブラリと関数セットです。</target>
        </trans-unit>
        <trans-unit id="f6db852251168f06c237606c8464d69a7b2bb1f8" translate="yes" xml:space="preserve">
          <source>Finac is simple, open and free. It can work with SQLite or any database
supported by SQLAlchemy (tested: SQLite, MySQL, PostgreSQL).</source>
          <target state="translated">Finacはシンプルでオープンで無料です。SQLiteやSQLAlchemyでサポートされているデータベース(テスト済み:SQLite、MySQL、PostgreSQL)で動作します。</target>
        </trans-unit>
        <trans-unit id="cb66a6b7997424bbc275985008d4d8ebfc48e01a" translate="yes" xml:space="preserve">
          <source>Finac supports multiple currencies, simple transactions, double-entry
bookkeeping transactions, watches overdrafts, balance limits and has many
useful features, which make accounting simple and fun.</source>
          <target state="translated">Finacは複数の通貨、簡単な取引、複式簿記取引、ウォッチオーバードラフト、残高制限などをサポートしており、多くの便利な機能を備えているため、会計を簡単に楽しくすることができます。</target>
        </trans-unit>
        <trans-unit id="6797637815a072ceed2c538f5dc5827eb884c7c0" translate="yes" xml:space="preserve">
          <source>Financial accounting library</source>
          <target state="translated">財務会計ライブラリー</target>
        </trans-unit>
        <trans-unit id="6207cf5beafb0add58ff6b030351511f75ce03a7" translate="yes" xml:space="preserve">
          <source>For the simple transactions (&lt;em&gt;f.tr(...))&lt;/em&gt;), use &lt;em&gt;target=&lt;/em&gt;.</source>
          <target state="translated">単純なトランザクション（&lt;em&gt;f.tr（...））&lt;/em&gt;）の場合は、&lt;em&gt;target =を&lt;/em&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="8e0a112192126b3a522a88b2c524fb4479a126c8" translate="yes" xml:space="preserve">
          <source>Full list of tables and fields is available in dict
&lt;em&gt;finac.core.multiply_fields&lt;/em&gt;.</source>
          <target state="translated">テーブルとフィールドの完全なリストは、&lt;em&gt;dictfinac.core.multiply_fieldsで&lt;/em&gt;入手できます 。</target>
        </trans-unit>
        <trans-unit id="c9564149c757f2b2cd165ab9969aed8288a9d43d" translate="yes" xml:space="preserve">
          <source>How to embed Finac library into own project</source>
          <target state="translated">Finacライブラリを独自のプロジェクトに組み込む方法</target>
        </trans-unit>
        <trans-unit id="4003f48231860e273ee7655256b4352a94f5daed" translate="yes" xml:space="preserve">
          <source>How to use in interactive mode</source>
          <target state="translated">インタラクティブモードでの使用方法</target>
        </trans-unit>
        <trans-unit id="0b44d2ce5a2d2c398754110453bf2a61dd5b404b" translate="yes" xml:space="preserve">
          <source>If account is passive, its assets are decremented from totals. To create
passive account, use &lt;em&gt;passive&lt;/em&gt; argument:</source>
          <target state="translated">アカウントがパッシブの場合、その資産は合計から減らされます。パッシブアカウントを作成するには、&lt;em&gt;パッシブ&lt;/em&gt;引数を使用します。</target>
        </trans-unit>
        <trans-unit id="22de1db043b79d5789ef7e3924b1debf6bfa7840" translate="yes" xml:space="preserve">
          <source>If you want to specify a debit account balance target instead, use &lt;em&gt;target_dt&lt;/em&gt;
function argument. Note: calculated transaction amount should be always greater
than zero (if you try specifying credit account target higher than its current
balance, you get &lt;em&gt;ValueError&lt;/em&gt; exception)</source>
          <target state="translated">代わりに借方勘定残高ターゲットを指定する場合は、&lt;em&gt;target_dt&lt;/em&gt; 関数引数を使用します。注：計算された取引金額は常にゼロより大きくする必要があります（現在の残高よりも高いクレジットアカウントターゲットを指定しようとすると、&lt;em&gt;ValueError&lt;/em&gt;例外が発生します）</target>
        </trans-unit>
        <trans-unit id="715135eccd2a1be75031415df8bfccfe7c6296ef" translate="yes" xml:space="preserve">
          <source>Inside database, Finac uses numeric IDs to connect objects, so all their codes
can be changed without any problems.</source>
          <target state="translated">データベース内部では、Finacは数字のIDを使ってオブジェクトを接続しているので、そのコードはすべて問題なく変更することができます。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="7bc74cfef23e3fe136eaa61920dbbd9e6566a5dc" translate="yes" xml:space="preserve">
          <source>Lazy exchange</source>
          <target state="translated">怠惰な交換</target>
        </trans-unit>
        <trans-unit id="53e528ec0890a39483f9d31bb36e56cc71409b6e" translate="yes" xml:space="preserve">
          <source>Note: multiplier can be used only with integer and numeric(X) field types, as
core conversion functions always return rounded value.</source>
          <target state="translated">注意:乗算器は、コア変換関数は常に丸められた値を返すので、整数および数値(X)フィールド型でのみ使用することができます。</target>
        </trans-unit>
        <trans-unit id="8766d2e63c6824e94635bf01f22382c0a755a14d" translate="yes" xml:space="preserve">
          <source>Note: when addressing currencies and accounts both in interactive and API mode,
you should use account and asset codes as object identifiers. &lt;strong&gt;All codes
are case-insensitive&lt;/strong&gt;.</source>
          <target state="translated">注：インタラクティブモードとAPIモードの両方で通貨とアカウントをアドレス指定する場合は、オブジェクト識別子としてアカウントコードとアセットコードを使用する必要があります。&lt;strong&gt;すべてのコードは大文字と小文字を区別しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a7417f328934dab7503609c163ec3236cfcb65c1" translate="yes" xml:space="preserve">
          <source>Note: you must manually convert table fields to numeric/integer types, and
multiply them if performing data multiplier implementation on living database.</source>
          <target state="translated">注意:生きているデータベースでデータ乗算器の実装を行う場合は、テーブルフィールドを数値/整数型に手動で変換し、乗算する必要があります。</target>
        </trans-unit>
        <trans-unit id="2918c4d5af1ec648f31fc83cb72666722f8d463c" translate="yes" xml:space="preserve">
          <source>Number formatting</source>
          <target state="translated">数字の書式設定</target>
        </trans-unit>
        <trans-unit id="28ac803e1696169a0797715a8cce52d973db3786" translate="yes" xml:space="preserve">
          <source>Passive accounts</source>
          <target state="translated">パッシブアカウント</target>
        </trans-unit>
        <trans-unit id="eff03ccbb28c77c758eeffd73614fb81f4e092ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finac documentation&lt;/a&gt; for core function API
details.</source>
          <target state="translated">参照してください&lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finacドキュメント&lt;/a&gt;コア機能のAPIの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="be1cf028afae737ac346bf53d0eee6fc5cc5e045" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;Finac documentation&lt;/a&gt; for server mode and
HTTP API details.</source>
          <target state="translated">サーバーモードと&lt;a href=&quot;https://finac.readthedocs.io/&quot;&gt;HTTPAPIの&lt;/a&gt;詳細については、Finacのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="45f2ea3bbe779b3b012fdd33c247f82a910fc12d" translate="yes" xml:space="preserve">
          <source>Sources: &lt;a href=&quot;https://github.com/alttch/finac&quot;&gt;https://github.com/alttch/finac&lt;/a&gt;</source>
          <target state="translated">出典：&lt;a href=&quot;https://github.com/alttch/finac&quot;&gt;https&lt;/a&gt;：//github.com/alttch/finac</target>
        </trans-unit>
        <trans-unit id="2e51c9be1bab0010b7ca23dacefc249b0aae2c03" translate="yes" xml:space="preserve">
          <source>Special features</source>
          <target state="translated">特別な機能</target>
        </trans-unit>
        <trans-unit id="04cd7e5008cd273d52b314962fc93af90962443e" translate="yes" xml:space="preserve">
          <source>Specifying targets instead of amount tells Finac to calculate transaction
amount by itself.</source>
          <target state="translated">金額ではなくターゲットを指定することで、Finacが独自に取引金額を計算するようになります。</target>
        </trans-unit>
        <trans-unit id="12d6431bb48e25868633cc1c0a8ca7d97585fb58" translate="yes" xml:space="preserve">
          <source>Starting from 0.4, Finac uses DateTime columns for:</source>
          <target state="translated">0.4 以降、Finac は DateTime カラムを使用しています。</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">ターゲット</target>
        </trans-unit>
        <trans-unit id="09f8f33671784d283159bc6680ac0c0a20be1475" translate="yes" xml:space="preserve">
          <source>Targets is a feature I wrote Finac for. You have account balances in bank and
in accounting. They differ by some amount and you are going to record this with
a single transaction.</source>
          <target state="translated">Targetsは私がFinacのために書いた機能です。銀行と会計で口座残高があるとします。これらの残高はある程度の差があり、それを一つのトランザクションで記録することになります。</target>
        </trans-unit>
        <trans-unit id="6cea15b0a09fb20c7ed3e8a007b34dabb9042d7f" translate="yes" xml:space="preserve">
          <source>The transaction amount is automatically calculated. Lazy people are happy :)</source>
          <target state="translated">取引金額が自動計算されます。怠け者は幸せです :)</target>
        </trans-unit>
        <trans-unit id="06b3f2ab488c785b43619aa68ab4f08a26739472" translate="yes" xml:space="preserve">
          <source>Transaction templates</source>
          <target state="translated">トランザクションテンプレート</target>
        </trans-unit>
        <trans-unit id="09a741a781a67c9bc811c4a9c246128e2cc471d8" translate="yes" xml:space="preserve">
          <source>Transactions can be simple (no counterparty) or classic double-entry
bookkeeping (between debit and credit account)</source>
          <target state="translated">取引は簡単(相手がいない)、または古典的な複式簿記(引き落とし口座と信用口座の間)にすることができます。</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">更新</target>
        </trans-unit>
        <trans-unit id="39a2132a809569ad32e1370c0c12059d1c3be9d7" translate="yes" xml:space="preserve">
          <source>Want to integrate Finac into your enterprise app or service? Need a support?
Check &lt;a href=&quot;https://www.altertech.com/products/fes/&quot;&gt;Finac Enterprise Server&lt;/a&gt;.</source>
          <target state="translated">Finacをエンタープライズアプリまたはサービスに統合したいですか？サポートが必要ですか？&lt;a href=&quot;https://www.altertech.com/products/fes/&quot;&gt;Finac EnterpriseServerを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="bc5235deeb21f5bfd3df4fbffab30cec89215127" translate="yes" xml:space="preserve">
          <source>You can use Finac either in interactive mode with
&lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;, &lt;a href=&quot;https://www.spyder-ide.org/&quot;&gt;Spyder-IDE&lt;/a&gt;,
ipython or other similar environment or embed Finac library into own projects.
The library may be used in accounting applications as well it's useful for the
fin-tech services.</source>
          <target state="translated">&lt;a href=&quot;https://jupyter.org/&quot;&gt;Finacは&lt;/a&gt;、Jupyter、&lt;a href=&quot;https://www.spyder-ide.org/&quot;&gt;Spyder-IDE&lt;/a&gt;、ipython、またはその他の同様の環境とのインタラクティブモードで使用するか、 Finacライブラリを独自のプロジェクトに埋め込むことができます。このライブラリは、会計アプリケーションでも使用でき、フィンテックサービスにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="183e231219675ca0833418d845d44aaf7d82a5ff" translate="yes" xml:space="preserve">
          <source>asset_rate.d</source>
          <target state="translated">アセットレート.d</target>
        </trans-unit>
        <trans-unit id="ab47d67959a33e65c2c9721ae431e02d706920a2" translate="yes" xml:space="preserve">
          <source>from 0.3.x</source>
          <target state="translated">0.3.xより</target>
        </trans-unit>
        <trans-unit id="ca91f16ab04848742fde8a9e99e88af81c07411d" translate="yes" xml:space="preserve">
          <source>from 0.4.10</source>
          <target state="translated">0.4.10より</target>
        </trans-unit>
        <trans-unit id="5d0b916b9c153bf0cad0e3641584fadef39fed58" translate="yes" xml:space="preserve">
          <source>hoorah, account acc5 got 100 EUR! And exchange rate was 1.1. Let's check:</source>
          <target state="translated">そして為替レートは1.1だった。確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="ff00a244382306ab8f9421298471f21b135269ef" translate="yes" xml:space="preserve">
          <source>then create a cron job which calls &lt;em&gt;f.transaction_apply(&quot;/path/to/file.yml&quot;)&lt;/em&gt;
and that's it.</source>
          <target state="translated">次に、&lt;em&gt;f.transaction_apply（ &quot;/ path / to / file.yml&quot;）&lt;/em&gt;を呼び出すcronジョブを作成します。これで&lt;em&gt;完了&lt;/em&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e1875984cbf3816ef60f114e69b41b65d6e0b15" translate="yes" xml:space="preserve">
          <source>transact.d</source>
          <target state="translated">トランザクトディー</target>
        </trans-unit>
        <trans-unit id="417fc82b269ac2c57985772cd332e9cac7030fd8" translate="yes" xml:space="preserve">
          <source>transact.d_created</source>
          <target state="translated">トランザクトディークリエイト</target>
        </trans-unit>
        <trans-unit id="e75f77cc451ea89cd6128ef6d42c84fe3d169423" translate="yes" xml:space="preserve">
          <source>transact.deleted</source>
          <target state="translated">削除された取引</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
