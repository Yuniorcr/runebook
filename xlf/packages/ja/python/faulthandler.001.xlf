<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/faulthandler/">
    <body>
      <group id="faulthandler">
        <trans-unit id="8b32f169fb309037a80f683a4b6d37e7cba4bdc1" translate="yes" xml:space="preserve">
          <source>Alternatively you can set the PYTHONFAULTHANDLER environment variable to a
non-empty value.</source>
          <target state="translated">あるいは、 PYTHONFAULTHANDLER 環境変数を空ではない値に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="b05598106e76da0d607a6a81c201935a1dbfee9a" translate="yes" xml:space="preserve">
          <source>By default, the Python traceback is written to the standard error stream. Start
your graphical applications in a terminal and run your server in foreground to
see the traceback, or pass a file to faulthandler.enable().</source>
          <target state="translated">デフォルトでは、Python のトレースバックは標準のエラーストリームに書き込まれます。ターミナルでグラフィカルなアプリケーションを起動し、フォアグラウンドでサーバを実行してトレースバックを見るか、faulthandler.enable()にファイルを渡してください。</target>
        </trans-unit>
        <trans-unit id="fa7641d6cb8d0ba8e60b2b86f9a48291331443a8" translate="yes" xml:space="preserve">
          <source>Display the Python traceback on a crash</source>
          <target state="translated">クラッシュ時にPythonのトレースバックを表示する</target>
        </trans-unit>
        <trans-unit id="148333c18dd79509f9564b86c3add191d327ffcc" translate="yes" xml:space="preserve">
          <source>Fault handler for SIGSEGV, SIGFPE, SIGABRT, SIGBUS and SIGILL signals: display
the Python traceback and restore the previous handler. Allocate an alternate
stack for this handler, if sigaltstack() is available, to be able to allocate
memory on the stack, even on stack overflow (not available on Windows).</source>
          <target state="translated">SIGSEGV,SIGFPE,SIGABRT,SIGBUS,SIGILL シグナルのための故障ハンドラ:Python のトレースバックを表示し、前のハンドラを復元します。sigaltstack()が利用可能であれば、スタックオーバーフロー時にもスタック上のメモリを確保できるように、このハンドラのために代替スタックを割り当てます (Windows では利用できません)。</target>
        </trans-unit>
        <trans-unit id="81e0ceb7fc7b0120d9efeaffe709c095b3d029da" translate="yes" xml:space="preserve">
          <source>Import the module and call faulthandler.enable() to enable the fault handler.</source>
          <target state="translated">モジュールをインポートし、faulthandler.enable()を呼び出してフォールトハンドラを有効にします。</target>
        </trans-unit>
        <trans-unit id="45e8e62be32ad547820a512d950cbe7aeb111584" translate="yes" xml:space="preserve">
          <source>The fault handler is called on catastrophic cases and so it can only use
signal-safe functions (eg. it doesn&amp;rsquo;t allocate memory on the heap). That&amp;rsquo;s why
the traceback is limited: it only supports ASCII encoding (use the
backslashreplace error handler for non-ASCII characters) and limits each string
to 100 characters, doesn&amp;rsquo;t print the source code in the traceback (only the
filename, the function name and the line number), is limited to 100 frames and
100 threads.</source>
          <target state="translated">フォールトハンドラーは壊滅的なケースで呼び出されるため、シグナルセーフ関数のみを使用できます（たとえば、ヒープにメモリを割り当てません）。トレースバックが制限されているのはそのためです。ASCIIエンコーディングのみをサポートし（非ASCII文字にはbackslashreplaceエラーハンドラーを使用）、各文字列を100文字に制限し、トレースバックにソースコードを出力しません（ファイル名、関数名のみ）および行番号）は、100フレームおよび100スレッドに制限されています。</target>
        </trans-unit>
        <trans-unit id="3b7e79012975d3e861952d69da3944f99e276605" translate="yes" xml:space="preserve">
          <source>This module is the backport for CPython 2.7. faulthandler is part of CPython
standard library since CPython 3.3: &lt;a href=&quot;http://docs.python.org/dev/library/faulthandler.html&quot;&gt;faulthandler&lt;/a&gt;. For PyPy,
faulthandler is builtin since PyPy 5.5: use</source>
          <target state="translated">このモジュールは、CPython2.7のバックポートです。faulthandlerは、CPython 3.3以降のCPython標準ライブラリの一部です：&lt;a href=&quot;http://docs.python.org/dev/library/faulthandler.html&quot;&gt;faulthandler&lt;/a&gt;。PyPyの場合、FaulthandlerはPyPy5.5以降に組み込まれています。</target>
        </trans-unit>
        <trans-unit id="5774e0c7dcae0498837702f72af167be1db50158" translate="yes" xml:space="preserve">
          <source>Website:
&lt;a href=&quot;https://faulthandler.readthedocs.io/&quot;&gt;https://faulthandler.readthedocs.io/&lt;/a&gt;</source>
          <target state="translated">ウェブサイト：&lt;a href=&quot;https://faulthandler.readthedocs.io/&quot;&gt;https&lt;/a&gt;： //faulthandler.readthedocs.io/</target>
        </trans-unit>
        <trans-unit id="1cb1003c13997882c35b2965310815154c6cbb5e" translate="yes" xml:space="preserve">
          <source>faulthandler 3.2 is the last version released by Victor Stinner. I maintained
it for 10 years in my free time for the great pleasure of Python 2 users, but
Python 2 is no longer supported upstream since 2020-01-01. Each faulthandler
release requires me to start my Windows VM, install Python 2.7 in 32-bit and
64-bit, install an old C compiler just for Python 2.7, and type manually some
commands to upload Windows binaries. Moreover, I have to fix some issues on
Travis CI and many small boring tasks. The maintenance is far from being free.
In 10 years, I got zero &amp;ldquo;thank you&amp;rdquo; (and 0&amp;euro;), only bug reports :-)</source>
          <target state="translated">faulthandler 3.2は、VictorStinnerによってリリースされた最後のバージョンです。 Python 2ユーザーの大きな喜びのために、空き時間に10年間維持しましたが、2020-01-01以降、Python2はアップストリームでサポートされなくなりました。各faulthandlerリリースでは、Windows VMを起動し、Python 2.7を32ビットおよび64ビットでインストールし、Python 2.7専用の古いCコンパイラをインストールし、いくつかのコマンドを手動で入力してWindowsバイナリをアップロードする必要があります。さらに、TravisCIと多くの小さな退屈なタスクに関するいくつかの問題を修正する必要があります。メンテナンスは無料にはほど遠いです。 10年間で、「ありがとう」（および0&amp;euro;）はゼロになりました。バグレポートのみです:-)</target>
        </trans-unit>
        <trans-unit id="e8c4d13fd2fd99b029d92a36fad256f8f653a5a1" translate="yes" xml:space="preserve">
          <source>faulthandler is implemented in C using signal handlers to be able to dump a
traceback on a crash or when Python is blocked (eg. deadlock).</source>
          <target state="translated">faulthandlerはシグナルハンドラを使ってC言語で実装されており、クラッシュ時やPythonがブロックされた時(デッドロックなど)にトレースバックをダンプできるようになっています。</target>
        </trans-unit>
        <trans-unit id="2caee2bbfef6db853f54ebef721cc989c0da49f3" translate="yes" xml:space="preserve">
          <source>pypy -X faulthandler</source>
          <target state="translated">pypy -X faulthandler</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
