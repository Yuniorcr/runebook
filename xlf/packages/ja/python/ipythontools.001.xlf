<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/ipythontools/">
    <body>
      <group id="ipythontools">
        <trans-unit id="7867d3fd53be0dc7eca20917d239cbfb7c62a7b9" translate="yes" xml:space="preserve">
          <source>&amp;gt; fig.savefig(&amp;lsquo;/path/to/my/article/XXX.eps&amp;rsquo;)</source>
          <target state="translated">&amp;gt; fig.savefig（ '/ path / to / my / article / XXX.eps'）</target>
        </trans-unit>
        <trans-unit id="dadf221e2b29630f8f97a7151151f1cad05f402f" translate="yes" xml:space="preserve">
          <source>) as opposed to real markdown that resembles
English much better I define a custom filter function that
makes sure that strings which look like LaTeX commands will not be spell checked
(since very few LaTeX command are valid English words so that would give a lot of
apparent typos).
More complicated filters that avoid spell checking within equations or
commands like</source>
          <target state="translated">）英語によく似た実際のマークダウンとは対照的に、LaTeXコマンドのように見える文字列がスペルチェックされないようにするカスタムフィルター関数を定義します（有効な英語の単語であるLaTeXコマンドはほとんどないため、多くのことが明らかになります）タイプミス）。方程式やコマンド内のスペルチェックを回避する、より複雑なフィルター</target>
        </trans-unit>
        <trans-unit id="96be7d667b95a8cabd202ecf5703e0ece29f80f1" translate="yes" xml:space="preserve">
          <source>). Check the &lt;a href=&quot;https://github.com/hamogu/ipythontools&quot;&gt;github repository&lt;/a&gt;
for this code if you want to see if I have an improved version.</source>
          <target state="translated">）。 改善されたバージョンがあるかどうかを確認したい場合は、このコードの&lt;a href=&quot;https://github.com/hamogu/ipythontools&quot;&gt;githubリポジトリ&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="cc9c165d061c0cd51e388cd5a0445e26184e0ca7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a Python module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Pythonモジュールとして&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06f316d860d3d49ac19a87af2e5590c668831891" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;As a script&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;スクリプトとして&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3115d1ebf2eefd3ec16172afc65b35b8221a39cc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;How to use this script&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;このスクリプトの使用方法&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="8ac7fc4a738213b4ceb8225268ac922724b3a577" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Design&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;設計&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f3278aa7e29a17ce9f2584f24d0b1a47ce961a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to use it&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それを使用する方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="785fe4fefdab8199a472f341a617e7362ff57a5b" translate="yes" xml:space="preserve">
          <source>As much as I love the IPython notebook, there is one big drawback (at least in
my installation). When I type into a cell in the browser (I use firefox) there
is no automatic spell checking of the input. Sure, the notebook has syntax
highlighting for code cells in python, but I want to do my entire paper
writing in the notebook and for me that means that a spell checker for cells
with markdown, headings or raw text is absolutely essential.
On the other hand, I cannot just run e.g.</source>
          <target state="translated">IPythonノートブックはとても気に入っていますが、(少なくとも私のインストールでは)大きな欠点があります。ブラウザ(私はfirefoxを使っています)でセルに入力するとき、入力のスペルチェックが自動的に行われないのです。確かに,ノートブックはPythonのコードセルのための構文ハイライトを持っています,しかし、私はノートで私の全体の論文執筆を行いたいと私にとっては、マークダウン、見出しや生のテキストを持つセルのためのスペルチェッカーが絶対に不可欠であることを意味します。その一方で、例えば</target>
        </trans-unit>
        <trans-unit id="e0d2763db5293e3bbef1e8ffe6e5892df0cb91a2" translate="yes" xml:space="preserve">
          <source>Be able to ignore certain parts of the notebook (e.g. introductory comments
in the first few cells).</source>
          <target state="translated">ノートの特定の部分を無視できるようにする(例:最初の数セルの紹介コメント)。</target>
        </trans-unit>
        <trans-unit id="f1c19d2a2ee9313b484d11307196670bfd490fcb" translate="yes" xml:space="preserve">
          <source>Close down the notebook you want to spell check in IPython, then simply type on
the command line:</source>
          <target state="translated">IPythonでスペルチェックしたいノートブックを閉じて、コマンドラインで入力するだけです。</target>
        </trans-unit>
        <trans-unit id="996122812a4499d2e98c63c2097cf853c4aa0b71" translate="yes" xml:space="preserve">
          <source>Convert headings to section / subsection etc.
I generally level 2 such as &amp;ldquo;## Heading&amp;rdquo; for section, &amp;ldquo;### Heading&amp;rdquo; for subsections etc.</source>
          <target state="translated">見出しをセクション/サブセクションなどに変換します。私は通常、セクションの「##見出し」、サブセクションの「###見出し」などのレベル2です。</target>
        </trans-unit>
        <trans-unit id="a0a16ec70ec256609b5cabdb79290f5c6addc3f7" translate="yes" xml:space="preserve">
          <source>Copy text in &amp;ldquo;markdown&amp;rdquo; and &amp;ldquo;raw text&amp;rdquo; cells. To simplify, I just write
real LaTeX code in those cells. All equations will be rendered correctly
in the notebook file for me and my co-authors to see.
When I want to highlight something I type LaTeX &amp;ldquo;emph{}&amp;rdquo; or &amp;ldquo;textbf{}&amp;rdquo;,
not the markdown equivalents. That looks not as nice in the notebook, but
makes live so much easier.
Also, markdown does not recognize &amp;ldquo;cite&amp;rdquo;, &amp;ldquo;ref&amp;rdquo; and &amp;ldquo;label&amp;rdquo;. Again, it
looks not as nice in markdown, but
(1) I only need to know LaTeX and (2) it works flawlessly when converted.</source>
          <target state="translated">「マークダウン」セルと「生テキスト」セルのテキストをコピーします。簡単にするために、私はそれらのセルに実際のLaTeXコードを書くだけです。すべての方程式は、私と私の共著者が見ることができるように、ノートブックファイルに正しくレンダリングされます。何かを強調したいときは、マークダウンに相当するものではなく、LaTeX「emph {}」または「textbf {}」と入力します。これはノートブックでは見栄えがよくありませんが、ライブが非常に簡単になります。また、マークダウンは「cite」、「ref」、「label」を認識しません。繰り返しになりますが、マークダウンでは見栄えがよくありませんが、（1）LaTeXを知っているだけでよく、（2）変換すると問題なく動作します。</target>
        </trans-unit>
        <trans-unit id="d7de9f59c8e0e1ec511693cd90ca8354c3c2ebb8" translate="yes" xml:space="preserve">
          <source>Finally, call:</source>
          <target state="translated">最後に電話。</target>
        </trans-unit>
        <trans-unit id="9d9befd865685e9e95d33be98682e396dce57dc6" translate="yes" xml:space="preserve">
          <source>Import into python and make a</source>
          <target state="translated">pythonにインポートして</target>
        </trans-unit>
        <trans-unit id="1160f28fb9bc2da5ebf8283b07c493f0463f2c5e" translate="yes" xml:space="preserve">
          <source>In this case it&amp;rsquo;s run with my set of design choices (see below).</source>
          <target state="translated">この場合、それは私の一連の設計選択で実行されます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="0d334f4021259c6fdf3d2da6814a39acf2c925e0" translate="yes" xml:space="preserve">
          <source>Installing this module places a script in your path, so you can do:</source>
          <target state="translated">このモジュールをインストールすると、パスにスクリプトが配置されます。</target>
        </trans-unit>
        <trans-unit id="7546602cf40b4d2b031f722cdb27793c0481ca90" translate="yes" xml:space="preserve">
          <source>Jupyter/IPython notebook to latex converter and spell checker</source>
          <target state="translated">Jupyter/IPythonノートからラテックスへのコンバータとスペルチェッカー</target>
        </trans-unit>
        <trans-unit id="d6875ea847a285b0f3fea4c40460d035f67fdc12" translate="yes" xml:space="preserve">
          <source>Just type figure captions into markdown cells.</source>
          <target state="translated">マークダウンセルに図のキャプションを入力するだけです。</target>
        </trans-unit>
        <trans-unit id="4963541f8b271af92276d1437767aff6268feb12" translate="yes" xml:space="preserve">
          <source>LatexHeadingConverter</source>
          <target state="translated">ラテックスヘッドコンバータ</target>
        </trans-unit>
        <trans-unit id="e86cb4e0b6564c9e713d39dc9797777891ba34e8" translate="yes" xml:space="preserve">
          <source>LiteralSourceConverter</source>
          <target state="translated">リテラルソースコンバータ</target>
        </trans-unit>
        <trans-unit id="5ce8c534c7950cd7b5e42fe74be74b167a43fc06" translate="yes" xml:space="preserve">
          <source>MarkedCodeOutputConverter</source>
          <target state="translated">マークドコード出力変換器</target>
        </trans-unit>
        <trans-unit id="d3d82c5630254d2e7ee3f20683d7662d78166a38" translate="yes" xml:space="preserve">
          <source>No conversion of code cells. Who wants code in an ApJ paper?</source>
          <target state="translated">コードセルの変換ができない ApJの論文にコードが欲しい人は?</target>
        </trans-unit>
        <trans-unit id="a0ea28392b12edb9b0bb76d671d7c54b0847cf8a" translate="yes" xml:space="preserve">
          <source>No figure conversion. Instead, in the notebook itself I issue:</source>
          <target state="translated">図形変換はありません。代わりに、ノート自体に私は発行します。</target>
        </trans-unit>
        <trans-unit id="d9c93a447b06ee883a9a40e9cf21bb79a519a0f4" translate="yes" xml:space="preserve">
          <source>Note that scipts and procedures have been renamed to &amp;ldquo;jupyter&amp;rdquo;, but the name of the package
and its directory structure still reflect that fact that Jupyter notebooks started out as part of the &lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; project.</source>
          <target state="translated">sciptsとprocedureの名前は「jupyter」に変更されましたが、パッケージの名前とそのディレクトリ構造は、Jupyterノートブックが&lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt;プロジェクトの一部として始まったという事実を反映していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ba5aad5cc9fdd94c71a3990de2df0f303556d62d" translate="yes" xml:space="preserve">
          <source>NotebookConverter</source>
          <target state="translated">ノートブックコンバータ</target>
        </trans-unit>
        <trans-unit id="ef481c6be928206bddfac40ea95dba82bc2ebd4a" translate="yes" xml:space="preserve">
          <source>Now all papers I work on a are written in an IPython notebook. So, the final
step to do is to convert the notebook to the LaTeX file I can submit to a
journal. That&amp;rsquo;s what this simple converter code does.</source>
          <target state="translated">現在、私が取り組んでいるすべての論文はIPythonノートブックで書かれています。したがって、最後のステップは、ノートブックをジャーナルに送信できるLaTeXファイルに変換することです。これが、この単純なコンバーターコードが行うことです。</target>
        </trans-unit>
        <trans-unit id="b31553839c43a486203d587b96dc51bd94505c76" translate="yes" xml:space="preserve">
          <source>Occasionally, I want to have the output of a computation (e.g. a table
written with astropy in LaTeX format) in the article. Keep it simple.
Output of all code cells that have a certain comment string (I use
&amp;ldquo;# output-&amp;gt;LaTeX&amp;rdquo;) is copied verbatim to the LaTeX file.</source>
          <target state="translated">ときどき、計算の出力（LaTeX形式でastropyで記述されたテーブルなど）が必要になることがあります。複雑にしないでおく。特定のコメント文字列（「＃output-&amp;gt; LaTeX」を使用）を持つすべてのコードセルの出力は、そのままLaTeXファイルにコピーされます。</target>
        </trans-unit>
        <trans-unit id="f53a479e72af885654b465b2289725076471c943" translate="yes" xml:space="preserve">
          <source>Oh, one more thing: Because I type a lot of raw LaTeX in my notebooks (see my
other post on</source>
          <target state="translated">あ、もう一つ:私はノートにたくさんの生のLaTeXをタイプしているので(</target>
        </trans-unit>
        <trans-unit id="db5e602ea3758bc969be7f6f82109e2dca89d280" translate="yes" xml:space="preserve">
          <source>Open the new file in IPython, run all cells again and keep working.</source>
          <target state="translated">IPythonで新しいファイルを開き、再度すべてのセルを実行して作業を続けます。</target>
        </trans-unit>
        <trans-unit id="69dec19e2ce348a6b020bdd1bb2291da5bc2c527" translate="yes" xml:space="preserve">
          <source>Spell check the markdown text in IPython notebooks</source>
          <target state="translated">IPythonノートのマークダウンテキストのスペルチェック</target>
        </trans-unit>
        <trans-unit id="55b16bba4db3dc88083cb0d4bcd080deb43bf600" translate="yes" xml:space="preserve">
          <source>The code is written around these design ideas:</source>
          <target state="translated">コードはこれらの設計思想を中心に書かれています。</target>
        </trans-unit>
        <trans-unit id="9c063267cede9ac731c05e8aee66329f1183f81e" translate="yes" xml:space="preserve">
          <source>The converter</source>
          <target state="translated">コンバーター</target>
        </trans-unit>
        <trans-unit id="c3d1d1122a9b0cdc614468b496550c5eec457705" translate="yes" xml:space="preserve">
          <source>The spellchecker</source>
          <target state="translated">スペルチェッカー</target>
        </trans-unit>
        <trans-unit id="8bced610e3d0cfb3867bace09c956272e0734c9b" translate="yes" xml:space="preserve">
          <source>Then, customize how each type of cell is converted by changing the converter:</source>
          <target state="translated">そして、変換器を変更することで、セルの種類ごとの変換方法をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="4e913128f80861691ab5f4fbdf2cfc2e0f8f9961" translate="yes" xml:space="preserve">
          <source>This converter is not intended to replace the nbconvert from the IPython
project. Instead, it serves one very specific purpose:
Turn a notebook into a LaTeX file that I can submit to the journal.</source>
          <target state="translated">このコンバータはIPythonプロジェクトのnbconvertを置き換えるものではありません。ノートブックをジャーナルに投稿できるLaTeXファイルに変換することです。</target>
        </trans-unit>
        <trans-unit id="848bc60a2dac408fdb7f552d03b5259b7156d402" translate="yes" xml:space="preserve">
          <source>This method allows you to use only part of a notebook file (ignore to first n
cells or ignore everything until a cell has a specific string value, e.g.
&amp;ldquo;The paper starts here&amp;rdquo;). Also, it allows you to provide a text file that will be
pasted before or after the converted notebook (you can put the &amp;lsquo;usepackage&amp;rsquo; and
similar stuff in those files so they don&amp;rsquo;t clutter your notebook).
However, I do not use this option any longer, because that means I would have
multiple input files. If I put all those LaTeX headers into the notebook as
well, I only have a single file.</source>
          <target state="translated">この方法では、ノートブックファイルの一部のみを使用できます（最初のn個のセルを無視するか、セルに特定の文字列値が含まれるまですべてを無視します（例：「紙はここから始まります」）。また、変換されたノートブックの前後に貼り付けられるテキストファイルを提供することもできます（ノートブックが乱雑にならないように、これらのファイルに「usepackage」などを入れることができます）。ただし、複数の入力ファイルがあることを意味するため、このオプションは使用しなくなりました。これらすべてのLaTeXヘッダーもノートブックに入れると、ファイルは1つだけになります。</target>
        </trans-unit>
        <trans-unit id="1fec3f5db3c9fd65b860d4e6a9b0a693810d50cd" translate="yes" xml:space="preserve">
          <source>This module installs two command line scripts:</source>
          <target state="translated">このモジュールは、2つのコマンドラインスクリプトをインストールします。</target>
        </trans-unit>
        <trans-unit id="7f2f0a960e33f9e2cf4f775bb9ca0ab72b891f68" translate="yes" xml:space="preserve">
          <source>To implement this I wrote a converter for each cell type.</source>
          <target state="translated">これを実装するために、セルの種類ごとに変換器を書きました。</target>
        </trans-unit>
        <trans-unit id="d6f1eb8eb72b1108f6f2bfa3ff38785751430f78" translate="yes" xml:space="preserve">
          <source>When I first encountered the IPython notebook, I thought this was a solution
looking for a problem. However, I have since been converted!
The tipping point for me was this: I want to version control my papers and
I always had multiple directories for analysis code, plotting code, LaTeX files,
plot scripts and figures and tables. That&amp;rsquo;s just so unwieldy.
Also, I found it cumbersome to email figures to individual collaborators all
the time.
The Notebook can hold all this information in one place and I can just provide
my co-authors with a link to the github repository once and they have access
to the latest version all the time. Even if they do not use python, they can
still see the all the current figures using nbviewer.ipython.org</source>
          <target state="translated">IPythonノートブックに最初に遭遇したとき、これは問題を探す解決策だと思いました。しかし、私はそれ以来回心しました！私にとっての転換点はこれでした：私は自分の論文をバージョン管理したいと思っていて、分析コード、プロットコード、LaTeXファイル、プロットスクリプト、図と表のために常に複数のディレクトリを持っていました。それはとても扱いにくいです。また、個々の共同編集者に常に数字をメールで送信するのは面倒だと感じました。ノートブックはこれらすべての情報を1つの場所に保持でき、共著者にgithubリポジトリへのリンクを1回提供するだけで、常に最新バージョンにアクセスできます。 Pythonを使用していない場合でも、nbviewer.ipython.orgを使用して現在のすべての数値を表示できます。</target>
        </trans-unit>
        <trans-unit id="875cbcc95d99e4a4dd0d3e17db205085301357cd" translate="yes" xml:space="preserve">
          <source>Work with the python standard library only. No external dependencies.</source>
          <target state="translated">python標準ライブラリのみで動作します。外部依存はありません。</target>
        </trans-unit>
        <trans-unit id="49b84fdb779c24c1b3f5568727374457092f0309" translate="yes" xml:space="preserve">
          <source>\cite{}</source>
          <target state="translated">\ cite {}</target>
        </trans-unit>
        <trans-unit id="6e5dfe09ab74d80bcb54e57395fd2bb52c2055c3" translate="yes" xml:space="preserve">
          <source>\label{XXX}</source>
          <target state="translated">\ label {XXX}</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="406752e03d293ca5a420e14227bdf63680343906" translate="yes" xml:space="preserve">
          <source>are possible (they would be called
a</source>
          <target state="translated">が可能です(それらは</target>
        </trans-unit>
        <trans-unit id="01113a113efa76bd4bb0e3fd9f0ee8ce322c2fc4" translate="yes" xml:space="preserve">
          <source>because ApJ requires me to submit figures as separate files anyway.</source>
          <target state="translated">というのも、ApJではフィギュアを別ファイルで提出しなければならないからです。</target>
        </trans-unit>
        <trans-unit id="d6595f0cf3fe24d2b70103bcf8a5458ff4741217" translate="yes" xml:space="preserve">
          <source>can be the same filename (in this case the old file will get
overwritten with the spelling corrected version), but I recommend to keep a copy
just in case something gets screwed up.</source>
          <target state="translated">は同じファイル名にすることができますが (この場合、古いファイルはスペルを修正したバージョンで上書きされます)、何かが台無しになったときのためにコピーを取っておくことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="35c5900c12f56b6e838bd659034d6f287f48e122" translate="yes" xml:space="preserve">
          <source>checks if a code cell has a specific string in
it and if so, it copies the output of this cell, and</source>
          <target state="translated">コードセルに特定の文字列が含まれているかどうかをチェックし、含まれている場合はそのセルの出力をコピーします。</target>
        </trans-unit>
        <trans-unit id="a7507f1795b973d9534c465c5afe646d7b983a13" translate="yes" xml:space="preserve">
          <source>chunker</source>
          <target state="translated">煎じ詰める</target>
        </trans-unit>
        <trans-unit id="1c4b9e2170dd1cdc45dd53edc855cd112d29246e" translate="yes" xml:space="preserve">
          <source>converter.cellconverters[&amp;lsquo;code&amp;rsquo;] = NotebookConverter.IgnoreConverter()</source>
          <target state="translated">convert.cellconverters ['code'] = NotebookConverter.IgnoreConverter（）</target>
        </trans-unit>
        <trans-unit id="7cff5b5b7799f826e4ccf4118ff39f0bd5a71995" translate="yes" xml:space="preserve">
          <source>converter.convert(infile, outfile, &amp;hellip;)</source>
          <target state="translated">convert.convert（infile、outfile、&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="117bad3bab9782ca784fc6c013803e2db4200328" translate="yes" xml:space="preserve">
          <source>extracts some content (raw cells, markdown cells, code output) from a
Jupyter/IPython notebook and pastes it into a new file. It also converst markdown headings
to proper LaTeX chapter, section, subsetion etc. and inserts appropriate labels.
This converter is not intended to replace the nbconvert from the IPython
project. Instead, it serves one very specific purpose:
Turn a notebook into a LaTeX file that I can submit to the journal.</source>
          <target state="translated">は、Jupyter/IPythonノートブックからいくつかのコンテンツ(生のセル、マークダウンセル、コード出力)を抽出し、新しいファイルに貼り付けます。また、マークダウンの見出しを適切なLaTeXのチャプター、セクション、サブセクションなどに変換し、適切なラベルを挿入します。このコンバータはIPythonプロジェクトのnbconvertを置き換えることを意図したものではありません。ノートブックをジャーナルに投稿できるLaTeXファイルに変換することです。</target>
        </trans-unit>
        <trans-unit id="853f6d7c1d08cc6b26e5574a008dd81318c45acb" translate="yes" xml:space="preserve">
          <source>filein</source>
          <target state="translated">ファイルイン</target>
        </trans-unit>
        <trans-unit id="294f0add48f73ecc0d984886c8b10c0a9ed0f315" translate="yes" xml:space="preserve">
          <source>fileout</source>
          <target state="translated">ファイル出力</target>
        </trans-unit>
        <trans-unit id="68145c9316e801087b7108a5cc3d3b3f855b2647" translate="yes" xml:space="preserve">
          <source>from ipynb2article import NotebookConverter
converter = NotebookConverter</source>
          <target state="translated">from ipynb2article import NotebookConverter converter=NotebookConverter</target>
        </trans-unit>
        <trans-unit id="af10ef20dd9060bbeead0afbc55381a66af442ef" translate="yes" xml:space="preserve">
          <source>in</source>
          <target state="translated">に於いて</target>
        </trans-unit>
        <trans-unit id="45f3e2e7a61691e19164608a0c9c4959ada7625a" translate="yes" xml:space="preserve">
          <source>ipynb2article.py</source>
          <target state="translated">ipynb2article.py</target>
        </trans-unit>
        <trans-unit id="039969f05dc4707c725c2de5b903086fbfe71107" translate="yes" xml:space="preserve">
          <source>ispell</source>
          <target state="translated">イスペル</target>
        </trans-unit>
        <trans-unit id="f1dd56b156609a34f786d18c1bd98609b6d88f91" translate="yes" xml:space="preserve">
          <source>jupyter2article</source>
          <target state="translated">jupyter2article</target>
        </trans-unit>
        <trans-unit id="2d6cc5f6a92a6677e7136cfa35be836bb093bc5e" translate="yes" xml:space="preserve">
          <source>jupyter2article myanalysis.ipynb myanalysis.tex</source>
          <target state="translated">jupyter2article myanalysis.ipynb myanalysis.tex</target>
        </trans-unit>
        <trans-unit id="3f9ee6a0f3c4984f03f16adab8dd3174c8066ac4" translate="yes" xml:space="preserve">
          <source>jupyterspellcheck</source>
          <target state="translated">ジュピタースペルチェック</target>
        </trans-unit>
        <trans-unit id="10dc687a8a6d398a0253047d33cbf04dc71c93e7" translate="yes" xml:space="preserve">
          <source>jupyterspellcheck filein.ipynb fileout.ipynb</source>
          <target state="translated">jupyterspellcheck filein.ipynb fileout.ipynb</target>
        </trans-unit>
        <trans-unit id="13e53880be1515e812985845eb3181eeaf84666b" translate="yes" xml:space="preserve">
          <source>just takes the literal string value (it also adds
a line break at the end of the  cell) and puts it into the LaTeX file
(use for markdown and raw text cells),</source>
          <target state="translated">はリテラル文字列の値を取り(セルの最後に改行を加えます)、LaTeXファイルに入れます(マークダウンや生のテキストセルに使用します)。</target>
        </trans-unit>
        <trans-unit id="87dc27214c1944c8d235d751c0ac66a8811edb7b" translate="yes" xml:space="preserve">
          <source>looks for the level of the heading and turns that into LaTeX (it also adds
as label like &amp;ldquo;label{sect:title}&amp;rdquo;).</source>
          <target state="translated">見出しのレベルを探し、それをLaTeXに変換します（「label {sect：title}」のようなラベルとしても追加されます）。</target>
        </trans-unit>
        <trans-unit id="0426c65f9613a523407c71497c3795ae931bf5cc" translate="yes" xml:space="preserve">
          <source>object:</source>
          <target state="translated">オブジェクトを使用しています。</target>
        </trans-unit>
        <trans-unit id="f57a44af2cd8513541016b8bd43532f5deb4b97c" translate="yes" xml:space="preserve">
          <source>on the ipynb file, since
most of its contents is actually code and not plain English.
So, I wanted to write a spell checker, that parses the ipynb file and spell checks
only the markdown, heading and raw text input cells.</source>
          <target state="translated">を使用している場合、その内容のほとんどは実際にはコードであり、プレーン・イングリッシュではないためです。そこで、ipynbファイルを解析し、マークダウン、見出し、生のテキスト入力セルのみをチェックするスペルチェッカーを書きたいと思いました。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">或いは</target>
        </trans-unit>
        <trans-unit id="09c20497814ab5a11888e90c4aa824df1fa2c5d2" translate="yes" xml:space="preserve">
          <source>pyenchant</source>
          <target state="translated">焦げ付き</target>
        </trans-unit>
        <trans-unit id="00dbf49b7c82ff3159975aacc11cb205814756ef" translate="yes" xml:space="preserve">
          <source>spell checks markdown and raw cells in a notebook.</source>
          <target state="translated">スペルはノートのマークダウンと生のセルをチェックします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
