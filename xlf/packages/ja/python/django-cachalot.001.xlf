<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/django-cachalot/">
    <body>
      <group id="django-cachalot">
        <trans-unit id="a45af808382114bc771ae870f1de9a7c2c79d018" translate="yes" xml:space="preserve">
          <source>'cachalot',</source>
          <target state="translated">「マッコウクジラ」、</target>
        </trans-unit>
        <trans-unit id="561a563eb921eb4947471dc6aab50249fb9e9336" translate="yes" xml:space="preserve">
          <source>'cachalot.panels.CachalotPanel',</source>
          <target state="translated">'cachalot.panels.CachalotPanel'、</target>
        </trans-unit>
        <trans-unit id="5ec85c6e3aa6dfdb8052db95993ca9c5b35c4b5c" translate="yes" xml:space="preserve">
          <source>, you can
get a nearly 100x speed up for your initial deployment.</source>
          <target state="translated">、最初の展開でほぼ100倍の速度を得ることができます。</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">追加</target>
        </trans-unit>
        <trans-unit id="720489cae05fc6dd4c31fac7b5cf1ab9350ee6fc" translate="yes" xml:space="preserve">
          <source>Be aware of &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#limits&quot;&gt;the few other limits&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#limits&quot;&gt;他のいくつかの制限に&lt;/a&gt;注意してください</target>
        </trans-unit>
        <trans-unit id="9ed99e75a9b04f273de29c9fef2bd3fb53d2e2de" translate="yes" xml:space="preserve">
          <source>Benchmark</source>
          <target state="translated">ベンチマーク</target>
        </trans-unit>
        <trans-unit id="8150f1787227276cedb29d0eb9c50b98feec687c" translate="yes" xml:space="preserve">
          <source>CREATE ROLE cachalot LOGIN SUPERUSER;</source>
          <target state="translated">CREATE ROLE マッコウクジラ LOGIN SUPERUSER.</target>
        </trans-unit>
        <trans-unit id="103ea722625bc60c145711a0004ccdbe054ea5b7" translate="yes" xml:space="preserve">
          <source>Cachalot is good when there are &amp;lt;50 modifications per second on a hot cached table. This is mostly due to cache invalidation. It&amp;rsquo;s the same with any cache,
which is why we suggest you use cache-machine for hot caches. Cache-machine caches individual objects, taking up more in the memory store but
invalidates those individual objects instead of the entire table like cachalot.</source>
          <target state="translated">キャシャロットは、ホットキャッシュされたテーブルで1秒あたり50未満の変更がある場合に適しています。これは主にキャッシュの無効化が原因です。これはどのキャッシュでも同じです。そのため、ホットキャッシュにはキャッシュマシンを使用することをお勧めします。キャッシュマシンは個々のオブジェクトをキャッシュし、メモリストアでより多くを占有しますが、cachalotのようにテーブル全体ではなく、それらの個々のオブジェクトを無効にします。</target>
        </trans-unit>
        <trans-unit id="78ff8129974f02380c9c98210e5b0eb01899e1e7" translate="yes" xml:space="preserve">
          <source>Cachalot is more-or-less intended for cold caches or &amp;ldquo;just-right&amp;rdquo; conditions. If you find a partition library for
Django (also authored but work-in-progress by &lt;a href=&quot;https://github.com/Andrew-Chen-Wang&quot;&gt;Andrew Chen Wang&lt;/a&gt;), then the caching will work better since sharding
the cold/accessed-the-least records aren&amp;rsquo;t invalidated as much.</source>
          <target state="translated">Cachalotは、多かれ少なかれ、コールドキャッシュまたは「適切な」条件を対象としています。Djangoのパーティションライブラリ（&lt;a href=&quot;https://github.com/Andrew-Chen-Wang&quot;&gt;Andrew Chen Wang&lt;/a&gt;によって作成されていますが、進行中です）を見つけた場合、コールド/アクセスされた最小のレコードのシャーディングはそれほど無効化されないため、キャッシュはより適切に機能します。</target>
        </trans-unit>
        <trans-unit id="815776204d0a2fd0426869aff5b06ac685a24f70" translate="yes" xml:space="preserve">
          <source>Cachalot officially supports Python 3.5-3.8 and Django 2.0-2.2, 3.0-3.1 with the databases PostgreSQL, SQLite, and MySQL.</source>
          <target state="translated">Cachalotは公式にPython 3.5-3.8とDjango 2.0-2.2,3.0-3.1をPostgreSQL,SQLite,MySQLというデータベースでサポートしています。</target>
        </trans-unit>
        <trans-unit id="9e60a19819e4ebe4863ffec6d02b11a63097069d" translate="yes" xml:space="preserve">
          <source>Caches your Django ORM queries and automatically invalidates them.</source>
          <target state="translated">Django ORM クエリをキャッシュし、自動的に無効にします。</target>
        </trans-unit>
        <trans-unit id="a28d51f3c067efa400f5c00b70afe56c7d88b982" translate="yes" xml:space="preserve">
          <source>Currently, benchmarks are supported on Linux and Mac/Darwin.
You will need a database called &amp;ldquo;cachalot&amp;rdquo; on MySQL and PostgreSQL.
Additionally, on PostgreSQL, you will need to create a role
called &amp;ldquo;cachalot.&amp;rdquo; You can also run the benchmark, and it&amp;rsquo;ll raise
errors with specific instructions for how to fix it.</source>
          <target state="translated">現在、ベンチマークはLinuxとMac / Darwinでサポートされています。MySQLとPostgreSQLには「cachalot」というデータベースが必要です。さらに、PostgreSQLでは、「cachalot」と呼ばれるロールを作成する必要があります。ベンチマークを実行することもできます。ベンチマークを修正するための具体的な手順でエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e64b2c52a0441e687a470c59954406ff6e423d6e" translate="yes" xml:space="preserve">
          <source>DEBUG_TOOLBAR_PANELS</source>
          <target state="translated">DEBUG_TOOLBAR_PANELS</target>
        </trans-unit>
        <trans-unit id="8fb937b602b4f2ef21c7fab00ac15de3b3ba49ea" translate="yes" xml:space="preserve">
          <source>Discussion</source>
          <target state="translated">議論</target>
        </trans-unit>
        <trans-unit id="b31a604dabbf6aef53f79d00b3e90bf1cf00bd03" translate="yes" xml:space="preserve">
          <source>Documentation: &lt;a href=&quot;http://django-cachalot.readthedocs.io&quot;&gt;http://django-cachalot.readthedocs.io&lt;/a&gt;</source>
          <target state="translated">ドキュメント：&lt;a href=&quot;http://django-cachalot.readthedocs.io&quot;&gt;http&lt;/a&gt;：//django-cachalot.readthedocs.io</target>
        </trans-unit>
        <trans-unit id="f5169c84497de3aea74f7da9e7e177d1427e736b" translate="yes" xml:space="preserve">
          <source>Enjoy!</source>
          <target state="translated">楽しもう</target>
        </trans-unit>
        <trans-unit id="34f77861031df7b766d090766f627ae22906979b" translate="yes" xml:space="preserve">
          <source>For PostgreSQL:</source>
          <target state="translated">PostgreSQLの場合。</target>
        </trans-unit>
        <trans-unit id="c7bf2456e4f82f88459c5a475e105792cdc3ca91" translate="yes" xml:space="preserve">
          <source>For setup:</source>
          <target state="translated">セットアップのために。</target>
        </trans-unit>
        <trans-unit id="042aee861714d7b9bfacd93eab367be33e92d774" translate="yes" xml:space="preserve">
          <source>Hacking</source>
          <target state="translated">ハッキング</target>
        </trans-unit>
        <trans-unit id="18daa04a0a2c17241247a347387639ee43095623" translate="yes" xml:space="preserve">
          <source>Help? Technical chat? &lt;a href=&quot;https://join.slack.com/t/cachalotdjango/shared_invite/zt-dd0tj27b-cIH6VlaSOjAWnTG~II5~qw&quot;&gt;It&amp;rsquo;s here on Slack&lt;/a&gt;.</source>
          <target state="translated">助けて？テクニカルチャット？&lt;a href=&quot;https://join.slack.com/t/cachalotdjango/shared_invite/zt-dd0tj27b-cIH6VlaSOjAWnTG~II5~qw&quot;&gt;ここSlackにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f20870c5fe9f8118e8fb4eca60c4dcb38053af40" translate="yes" xml:space="preserve">
          <source>INSTALLED_APPS</source>
          <target state="translated">インストールされているアプリケーション</target>
        </trans-unit>
        <trans-unit id="eb786e27f94897d31933c0a4bd465674b5579596" translate="yes" xml:space="preserve">
          <source>If you modify data outside Django
&amp;ndash;&amp;nbsp;typically after restoring a SQL database&amp;nbsp;&amp;ndash;,
use the &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/quickstart.html#command&quot;&gt;manage.py command&lt;/a&gt;</source>
          <target state="translated">Djangoの外部でデータを変更する場合（通常はSQLデータベースを復元した後）、&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/quickstart.html#command&quot;&gt;manage.pyコマンドを&lt;/a&gt;使用します</target>
        </trans-unit>
        <trans-unit id="52d30f5e3abdc963f92d597dacc42f4d27a8b5f3" translate="yes" xml:space="preserve">
          <source>If you use
&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;django-debug-toolbar&lt;/a&gt;,
you can add</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;django-debug-toolbar&lt;/a&gt;を使用する 場合は、追加できます</target>
        </trans-unit>
        <trans-unit id="e6e24c9dd7e502f48e1f12be4d6fc1979059f699" translate="yes" xml:space="preserve">
          <source>If you use multiple servers with a common cache server,
&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#multiple-servers&quot;&gt;double check their clock synchronisation&lt;/a&gt;</source>
          <target state="translated">共通のキャッシュサーバーで複数のサーバーを使用する場合は、 &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/limits.html#multiple-servers&quot;&gt;それらのクロック同期を再確認してください&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8358a66612875f90b48c5f31167ce547a99912dc" translate="yes" xml:space="preserve">
          <source>Install:</source>
          <target state="translated">インストールします。</target>
        </trans-unit>
        <trans-unit id="b47117524114cdb4a0eaaf7cd63b8549ebbbdc58" translate="yes" xml:space="preserve">
          <source>Legacy chat: &lt;a href=&quot;https://gitter.im/django-cachalot/Lobby&quot;&gt;https://gitter.im/django-cachalot/Lobby&lt;/a&gt;</source>
          <target state="translated">レガシーチャット：&lt;a href=&quot;https://gitter.im/django-cachalot/Lobby&quot;&gt;https&lt;/a&gt;：//gitter.im/django-cachalot/Lobby</target>
        </trans-unit>
        <trans-unit id="7e5f36adf5e0f7fa4d473375d3d8148c6453b2de" translate="yes" xml:space="preserve">
          <source>Make sure you have the following services:</source>
          <target state="translated">以下のサービスがあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="edc301f7283a9e45e85a8a8deab4551d236d86a4" translate="yes" xml:space="preserve">
          <source>Memcached</source>
          <target state="translated">メンキャッシュ</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="1d2ea5ad412bd94eb903811d7f1f8307cd3a293d" translate="yes" xml:space="preserve">
          <source>Note 1: My personal experience with caches stems from Reddit&amp;rsquo;s: &lt;a href=&quot;https://redditblog.com/2017/01/17/caching-at-reddit/&quot;&gt;https://redditblog.com/2017/01/17/caching-at-reddit/&lt;/a&gt;</source>
          <target state="translated">注1：キャッシュに関する私の個人的な経験は、Redditの&lt;a href=&quot;https://redditblog.com/2017/01/17/caching-at-reddit/&quot;&gt;https://redditblog.com/2017/01/17/caching-at-reddit/に&lt;/a&gt;由来します。</target>
        </trans-unit>
        <trans-unit id="756cdea437f3649fc47ddfbdbbd263dcfbb5b77a" translate="yes" xml:space="preserve">
          <source>Note 2: Technical comparison: &lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools&quot;&gt;https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools&lt;/a&gt;</source>
          <target state="translated">注2：技術的な比較：&lt;a href=&quot;https://django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools&quot;&gt;https&lt;/a&gt;：//django-cachalot.readthedocs.io/en/latest/introduction.html#comparison-with-similar-tools</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">ポストジェスチル</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">クイックスタート</target>
        </trans-unit>
        <trans-unit id="25650721dddee3b42dff37012768d07f50ba1ca5" translate="yes" xml:space="preserve">
          <source>Recall, cachalot caches THE ENTIRE TABLE. That&amp;rsquo;s where its inefficiency stems from: if you keep updating the records,
then the cachalot constantly invalidates the table and re-caches. Luckily caching is very efficient, it&amp;rsquo;s just the cache
invalidation part that kills all our systems. Look at Note 1 below to see how Reddit deals with it.</source>
          <target state="translated">思い出してください、cachalotはテーブル全体をキャッシュします。それが非効率性の原因です。レコードを更新し続けると、キャシャロットは常にテーブルを無効にして再キャッシュします。幸いなことに、キャッシュは非常に効率的です。すべてのシステムを強制終了するのは、キャッシュ無効化の部分だけです。以下の注1を見て、Redditがそれをどのように処理するかを確認してください。</target>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">レディス</target>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="translated">走れ</target>
        </trans-unit>
        <trans-unit id="543a8d219ec8d67afbebf6283e2a4b5cbbae082d" translate="yes" xml:space="preserve">
          <source>TL;DR Use cachalot for cold or modified &amp;lt;50 times per seconds (Most people should stick with only cachalot since you
most likely won&amp;rsquo;t need to scale to the point of needing cache-machine added to the bowl). If you&amp;rsquo;re an enterprise that
already has huge statistics, then mixing cold caches for cachalot and your hot caches with cache-machine is the best
mix. However, when performing joins with</source>
          <target state="translated">TL; DR 1秒あたり50回未満のコールドまたは変更には、キャシャロットを使用します（ボウルにキャッシュマシンを追加する必要があるポイントまでスケーリングする必要がない可能性が高いため、ほとんどの人はキャシャロットのみを使用する必要があります）。すでに膨大な統計情報を持っている企業の場合は、キャシャロットのコールドキャッシュと、キャッシュマシンを使用したホットキャッシュを組み合わせるのが最適です。ただし、結合を実行する場合</target>
        </trans-unit>
        <trans-unit id="17d0386c5cfffb3e17c9a9b343cc69ac93c02e82" translate="yes" xml:space="preserve">
          <source>TODO Create Docker-compose file to allow for easier running of data.</source>
          <target state="translated">TODO Docker-composeファイルを作成して、データを簡単に実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="c64e9942fb642977fbd70ec197abeadd198f3103" translate="yes" xml:space="preserve">
          <source>Table of Contents:</source>
          <target state="translated">目次をご紹介します。</target>
        </trans-unit>
        <trans-unit id="ceea83f55d441a1960e5b2fc0c2f43bd88a39b53" translate="yes" xml:space="preserve">
          <source>The output will be in benchmark/TODAY&amp;rsquo;S_DATE/</source>
          <target state="translated">出力はベンチマーク/ TODAY'S_DATE /になります</target>
        </trans-unit>
        <trans-unit id="1d801d0fbb80734ef34e9f9309fe250647f29990" translate="yes" xml:space="preserve">
          <source>There are three main third party caches: cachalot, cache-machine, and cache-ops. Which do you use? We suggest a mix:</source>
          <target state="translated">サードパーティのキャッシュには、主に「キャシャロット」「キャッシュマシン」「キャッシュオプス」の3つがあります。あなたはどれを使いますか?ミックスをお勧めします。</target>
        </trans-unit>
        <trans-unit id="73fd3706d2dc4d7b5859c6b7441b891b4ef68976" translate="yes" xml:space="preserve">
          <source>Third-Party Cache Comparison</source>
          <target state="translated">サードパーティキャッシュの比較</target>
        </trans-unit>
        <trans-unit id="ccb7a408f6ca20c07ff91ced04e69f3d8f38331a" translate="yes" xml:space="preserve">
          <source>To start developing, install the requirements
and run the tests via tox.</source>
          <target state="translated">開発を開始するには、要件をインストールし、tox経由でテストを実行します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="20fb7f1d3f265ddfe7ad5df2c3453657b7c056b3" translate="yes" xml:space="preserve">
          <source>Yes, the bane of our entire existence lies in cache invalidation and naming variables. Why does cachalot suck when
stuck with a huge table that&amp;rsquo;s modified rapidly? Since you&amp;rsquo;ve mixed your cold (90% of) with your hot (10% of) records,
you&amp;rsquo;re caching and invalidating an entire table. It&amp;rsquo;s like trying to boil 1 ton of noodles inside ONE pot instead of
100 pots boiling 1 ton of noodles. Which is more efficient? The splitting up of them.</source>
          <target state="translated">はい、私たちの存在全体の悩みの種は、キャッシュの無効化と変数の命名にあります。急速に変更される巨大なテーブルで立ち往生しているときに、なぜカシャロットは吸うのですか？コールド（90％）とホット（10％）レコードを混在させたため、テーブル全体をキャッシュして無効にしています。100鍋で1トンの麺を茹でるのではなく、1トンの麺を1鍋で茹でようとするようなものです。どちらがより効率的ですか？それらの分割。</target>
        </trans-unit>
        <trans-unit id="6ea3270b8c30dcd50377ef385ff14fdb425533d8" translate="yes" xml:space="preserve">
          <source>You can also run specific databases and Django versions:</source>
          <target state="translated">また、特定のデータベースやDjangoのバージョンを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="fd5a6d76889bb686c8647c12ab94455cdb762044" translate="yes" xml:space="preserve">
          <source>pip install -r requirements/benchmark.txt</source>
          <target state="translated">pip install -r requirements/benchmark.txt</target>
        </trans-unit>
        <trans-unit id="38b88e629356ebddaf3f36aef4cac9110e0fb712" translate="yes" xml:space="preserve">
          <source>pip install -r requirements/hacking.txt</source>
          <target state="translated">pip install -r requirements/hacking.txt</target>
        </trans-unit>
        <trans-unit id="61702f8c68d6f213d7ef34a95f98a23b48d860e5" translate="yes" xml:space="preserve">
          <source>pip install django-cachalot</source>
          <target state="translated">pip install django-cachalot</target>
        </trans-unit>
        <trans-unit id="b20a920bcc03779d31544be0ca0fa274a2210075" translate="yes" xml:space="preserve">
          <source>prefetch_related</source>
          <target state="translated">プリフェッチ関連</target>
        </trans-unit>
        <trans-unit id="98adb0c51678462edbfe9707211f9dc7715624a2" translate="yes" xml:space="preserve">
          <source>python benchmark.py</source>
          <target state="translated">python benchmark.py</target>
        </trans-unit>
        <trans-unit id="937405c77449088d9fe9fe51200d361f5b70fe2b" translate="yes" xml:space="preserve">
          <source>select_related</source>
          <target state="translated">セレクト関連</target>
        </trans-unit>
        <trans-unit id="7ddfcefcd3558a42ea5c7e4bb8be15cd533ffea7" translate="yes" xml:space="preserve">
          <source>to run the test suite on your current Python version.</source>
          <target state="translated">を実行して、現在のPythonのバージョンでテストスイートを実行します。</target>
        </trans-unit>
        <trans-unit id="ab91077b25792e5df5bbb22f17e5b0bda9153722" translate="yes" xml:space="preserve">
          <source>to your</source>
          <target state="translated">にとって</target>
        </trans-unit>
        <trans-unit id="c3639cf612287e7ea28cc044ffd0af36964f7396" translate="yes" xml:space="preserve">
          <source>tox --current-env</source>
          <target state="translated">tox --current-env</target>
        </trans-unit>
        <trans-unit id="bec8b381a5f9f5d621b2f4c6e64ca9853711209e" translate="yes" xml:space="preserve">
          <source>tox -epy38-django3.1-postgresql-redis</source>
          <target state="translated">tox -epy38-django3.1-postgresql-redis</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
