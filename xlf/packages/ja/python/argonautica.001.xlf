<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/argonautica/">
    <body>
      <group id="argonautica">
        <trans-unit id="195662646c06edbd6b499b5b7b8dd96bb3dfe173" translate="yes" xml:space="preserve">
          <source>* Indeed, argonautica has a feature that even the cannonical C implementation
lacks, i.e. hashing passwords with secret keys (the C implementation implements this, but
does not expose it publicly)</source>
          <target state="translated">*実際、argaunauticaには、正規のC実装でさえ欠けている機能があります。つまり、秘密鍵でパスワードをハッシュする（C実装はこれを実装しますが、公開しません）</target>
        </trans-unit>
        <trans-unit id="ede0f3c56202fdbf000f4bdbd27f888e075eb202" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;The Apache License, Version 2.0&lt;/a&gt;, or</source>
          <target state="translated">&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apacheライセンス、バージョン2.0&lt;/a&gt;、または</target>
        </trans-unit>
        <trans-unit id="51febab75ee75e8c4c4b7d70353a430c81211aa2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; version 3.9 or higher</source>
          <target state="translated">&lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt;バージョン3.9以降</target>
        </trans-unit>
        <trans-unit id="a3837bf6aae91373ad5275ed79cabc9b6852605c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; version 3.4 or higher (or &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; version 3.5 or higher)</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;バージョン3.4以降（または&lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt;バージョン3.5以降）</target>
        </trans-unit>
        <trans-unit id="9cc7a2c6d141926a46b35ada4d5874007d72f4ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; version 1.26 or higher</source>
          <target state="translated">&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;バージョン1.26以降</target>
        </trans-unit>
        <trans-unit id="a4f4b2ffcba94341fefc5dee4994e344deb70827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Argon2&lt;/code&gt; is a convenience class that holds both a &lt;code&gt;Hasher&lt;/code&gt; and a &lt;code&gt;Verifier&lt;/code&gt;. If you'd like to use just one class that knows how both to hash and to verify, instantiate an &lt;code&gt;Argon2&lt;/code&gt;. It works essentially the same way as &lt;code&gt;Hasher&lt;/code&gt; and &lt;code&gt;Verifier&lt;/code&gt; do.</source>
          <target state="translated">&lt;code&gt;Argon2&lt;/code&gt; は、 &lt;code&gt;Hasher&lt;/code&gt; と &lt;code&gt;Verifier&lt;/code&gt; の両方を保持する便利なクラスです。ハッシュと検証の両方の方法を知っているクラスを1つだけ使用する場合は、 &lt;code&gt;Argon2&lt;/code&gt; をインスタンス化します。基本的には &lt;code&gt;Hasher&lt;/code&gt; や &lt;code&gt;Verifier&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="42e43c02d5cc6dcf4f01ccf572544c66fe605969" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RandomSalt&lt;/code&gt; is a special kind of salt that will create new random salt bytes before each hash. A RandomSalt knows its length (in number of bytes). The default &lt;code&gt;Hasher&lt;/code&gt; uses a &lt;code&gt;RandomSalt&lt;/code&gt; with length of 32 bytes, but you can use your own &lt;code&gt;RandomSalt&lt;/code&gt; of custom length. When you instantiate a &lt;code&gt;RandomSalt&lt;/code&gt;, the constructor takes a length, e.g. &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RandomSalt&lt;/code&gt; は、各ハッシュの前に新しいランダムなソルトバイトを作成する特殊なソルトです。RandomSaltはその長さ（バイト数）を知っています。デフォルトの &lt;code&gt;Hasher&lt;/code&gt; 使用しています &lt;code&gt;RandomSalt&lt;/code&gt; 32バイトの長さを、しかし、あなたはあなた自身の使用することができます &lt;code&gt;RandomSalt&lt;/code&gt; カスタム長のを。 &lt;code&gt;RandomSalt&lt;/code&gt; をインスタンス化すると、コンストラクターは長さをとります。例： &lt;code&gt;my_random_salt = RandomSalt(16)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7e9ef3323d845d8b7fe28b3a6c8ed8bac3d3d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install --upgrade pip&lt;/code&gt; or &lt;code&gt;pip install setuptools-rust&lt;/code&gt;. Note: setuptool-rust is not required if you have pip version 10.0 or above</source>
          <target state="translated">&lt;code&gt;pip install --upgrade pip&lt;/code&gt; または &lt;code&gt;pip install setuptools-rust&lt;/code&gt; 。注：pipバージョン10.0以降を使用している場合、setuptool-rustは必要ありません。</target>
        </trans-unit>
        <trans-unit id="9f9e21cec5bff7c00c47588c720b10c717c6cfc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip install argonautica&lt;/code&gt;. Unfortunately, this step may take several minutes, as argonautica needs to compile it's Rust code for your specific CPU (due to its use of SIMD instructions). The upside, however, is that once compiled, argonautica should run blazingly fast</source>
          <target state="translated">&lt;code&gt;pip install argonautica&lt;/code&gt; 。残念ながら、このステップには数分かかることがあります。これは、Argonauticaが特定のCPUのRustコードをコンパイルする必要があるためです（SIMD命令を使用しているため）。しかし、良い点は、一度コンパイルされると、Argonauticaが非常に速く実行されることです。</target>
        </trans-unit>
        <trans-unit id="e1c91e3f30599a290b2b01dca0cda3b6be9dbdf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argon2&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アルゴン2&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ec16863d4de7e250b1bc9ea235ef9d47e56dc61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HashRaw&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HashRaw&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddc9a492e751ec0ba5fa5059b73ea7d1f52a1435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LLVM:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LLVM：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb72c98066c0b5500b75fff01572f0dabe63aab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RandomSalt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ランダム塩&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db8ffdf33529bce1203d1e34714e61c69da4dc95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rust:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;さび：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76771f82d99201c55f403bd9428ec0aed8e29448" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;アルゴノーチカ：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d367fa420fee75b359d8b4b19d890e4bd1373c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is a Python package for hashing passwords that uses the cryptographically-secure &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt; hashing algorithm.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;は、パスワードをハッシュするためのPythonパッケージであり、暗号的に安全な&lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;アルゴン2&lt;/a&gt;ハッシュアルゴリズムを使用しています。</target>
        </trans-unit>
        <trans-unit id="ceaca1a9a949ee490386b46d45ac5b124ea2344e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is licensed under either of:</source>
          <target state="translated">&lt;strong&gt;アルゴノーティカ&lt;/strong&gt;は、以下のいずれかでライセンスされています。</target>
        </trans-unit>
        <trans-unit id="86332913a7df9ce53012c8a6c20d92e902eca568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 to use &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instructions to peform it's hashing algorithm, which means it can be quite fast. The downside is that you have to compile it for your specific machine (this is why the &lt;code&gt;pip install argonautica&lt;/code&gt; process takes time). That said, on the developer's early 2014 Macbook Air, which has &lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt; instruction through &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt;, argonautica runs ~30% faster than passlib on default settings.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;は、&lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt;命令を使用してハッシュアルゴリズムを実行する、argon2の唯一のPython実装です。つまり、非常に高速になる可能性があります。欠点は、特定のマシン用にコンパイルする必要があることです（これが、 &lt;code&gt;pip install argonautica&lt;/code&gt; プロセスに時間がかかる理由です）。とはいえ、&lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Vector_Extensions&quot;&gt;AVX2&lt;/a&gt;による&lt;a href=&quot;https://en.wikipedia.org/wiki/SIMD&quot;&gt;SIMD&lt;/a&gt;命令を備えた 2014年初頭のMacbook Airでは、arganonauticaはデフォルト設定でpasslibよりも最大30％高速に実行されます。</target>
        </trans-unit>
        <trans-unit id="6226e5be9a3b94dfed0589fbae7543c84509985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; supports the latest argon2 variant: argon2id, which, unless you have a reason not to, you should be using. A number of Python implementations do not yet support this variant.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;は、最新のargon2バリアント、&lt;strong&gt;argon2idを&lt;/strong&gt;サポートしています。これは、特に理由がない限り、使用する必要があります。多くのPython実装は、このバリアントをまだサポートしていません。</target>
        </trans-unit>
        <trans-unit id="dd95e0f87d8aebc153c0145c144355188efd7f28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; uses &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; type annotations everywhere in the code, which, in the author's humble opinion, is a very useful form of documentation; so if you're ever confused about what types to use for arguments, just pop open the code and take a look at the function signatures.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;は、コードのあらゆる場所で&lt;a href=&quot;http://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt;型注釈を使用しています。これは、著者の控えめな意見では、ドキュメントの非常に有用な形式です。そのため、引数に使用する型について混乱している場合は、コードを開いて関数のシグネチャを確認してください。</target>
        </trans-unit>
        <trans-unit id="7f09aa620c3a56871f93c5817cb52cab65fbb571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argonautica&lt;/strong&gt; was built with a simple use-case in mind: hashing passwords for storage in a
website's database. That said, it's also &quot;feature-complete&quot;, meaning anything you can do with
the cannonical &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C implementation&lt;/a&gt; of argon2
you can do with argonautica*.</source>
          <target state="translated">&lt;strong&gt;argonautica&lt;/strong&gt;は、ウェブサイトのデータベースに保存するためにパスワードをハッシュするという単純なユースケースを念頭に置いて構築されました。とはいえ、これは「機能完全」でもあります。つまり、argonautica *で実行できるアルゴン2の標準的な&lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;C実装&lt;/a&gt;で実行できるすべてのことを意味します。</target>
        </trans-unit>
        <trans-unit id="ca7d4b6bcd0af299645a83a7d4aea595025a5c74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mypy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ミピー&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5669ec44ecef2ed5804540a396dd292f49b16257" translate="yes" xml:space="preserve">
          <source>AFAIK, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 that supports hashing with secret keys. Not even the &lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;cannonical C implementation&lt;/a&gt; of argon2 exposes this feature publicly (it's in the code, but unfortunately not accessable via the public API).</source>
          <target state="translated">私の知る限り、&lt;strong&gt;argaunautica&lt;/strong&gt;は、秘密鍵によるハッシュをサポートするアルゴン2の唯一のPython実装です。&lt;a href=&quot;https://github.com/P-H-C/phc-winner-argon2&quot;&gt;Argon2の標準的なCの実装&lt;/a&gt;でさえ、この機能を公開していません（コードにはありますが、残念ながら、公開APIからはアクセスできません）。</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">代替品</target>
        </trans-unit>
        <trans-unit id="9ae5e35b46adfc77d4a514a98bde3b1fa47cc9aa" translate="yes" xml:space="preserve">
          <source>Arch linux: &lt;code&gt;pacman -S clang&lt;/code&gt;</source>
          <target state="translated">Arch linux： &lt;code&gt;pacman -S clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8eabad1d4bfdf2c84b2250a383bd249e22dcad89" translate="yes" xml:space="preserve">
          <source>Argon2 won the &lt;a href=&quot;https://password-hashing.net/&quot;&gt;Password Hashing Competition&lt;/a&gt; in 2015, a several year project to identify a successor to &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt;, and other common hashing algorithms.</source>
          <target state="translated">Argon2は、2015年に&lt;a href=&quot;https://password-hashing.net/&quot;&gt;パスワードハッシュコンペティション&lt;/a&gt;で優勝しました。これは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Scrypt&quot;&gt;scrypt&lt;/a&gt;、およびその他の一般的なハッシュアルゴリズムの後継者を特定するための数年のプロジェクトです。</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">構成</target>
        </trans-unit>
        <trans-unit id="45529ed06c625b76e4c4357555c4b0244426e657" translate="yes" xml:space="preserve">
          <source>Debian-based linux: &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</source>
          <target state="translated">DebianベースのLinux： &lt;code&gt;apt-get install llvm-dev libclang-dev clang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b2776064a97e290ac856229ddad7ef1f00f1357" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;argonautica&lt;/strong&gt; is the only Python implementation of argon2 written in &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; (as opposed to C or C++). &lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt; is a &quot;systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&quot;</source>
          <target state="translated">最後に、&lt;strong&gt;Argonautica&lt;/strong&gt;は、（CまたはC ++とは対照的に）&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;で記述されたアルゴン2の唯一のPython実装です。&lt;a href=&quot;https://www.rust-lang.org/en-US/&quot;&gt;Rust&lt;/a&gt;は「非常に高速に実行され、segfaultを防止し、スレッドの安全性を保証するシステムプログラミング言語」です。</target>
        </trans-unit>
        <trans-unit id="6360e261bdf44c4f899f7ef00378583f501b8d5e" translate="yes" xml:space="preserve">
          <source>Follow the instructions &lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;here&lt;/a&gt;, which will just tell you to run the following command in your terminal and follow the on-screen instructions: &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</source>
          <target state="translated">ターミナルで次のコマンドを実行し、画面の指示に従うように指示する&lt;a href=&quot;https://www.rust-lang.org/en-US/install.html&quot;&gt;ここ&lt;/a&gt;の指示に従い &lt;code&gt;curl https://sh.rustup.rs -sSf \| sh&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53e49a69fb315c4f51afc9825055d4858a064cdc" translate="yes" xml:space="preserve">
          <source>Hashing</source>
          <target state="translated">ハッシュ化</target>
        </trans-unit>
        <trans-unit id="e95fb4d89f702858269571680eb4384b6e1d7b29" translate="yes" xml:space="preserve">
          <source>Hashing with &lt;strong&gt;argonautica&lt;/strong&gt; produces a string-encoded hash, but sometimes you might want the &quot;raw material&quot; behind this hash, i.e. the raw hash bytes, the raw salt bytes, or raw parameters, which are the three component parts of a string-encoded hash. To obtain these raw parts...</source>
          <target state="translated">&lt;strong&gt;アルゴノーティカで&lt;/strong&gt;ハッシュすると、文字列エンコードされたハッシュが生成されますが、このハッシュの背後にある「原材料」、つまり、文字列エンコードの3つのコンポーネント部分である生ハッシュバイト、生ソルトバイト、または生パラメーターが必要になる場合があります。ハッシュ。これらの未加工部品を入手するには...</target>
        </trans-unit>
        <trans-unit id="b53a956811aafe360ad463c2664de99be4dd6654" translate="yes" xml:space="preserve">
          <source>Idiomatic Argon2 password hashing for Python</source>
          <target state="translated">Python のためのイディオマティックな Argon2 パスワードハッシュ</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">ライセンス</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">その他</target>
        </trans-unit>
        <trans-unit id="95d388e8fafd9bc83d5b80bb3527b53a99d59f87" translate="yes" xml:space="preserve">
          <source>Other linux: Use your distribution's package manager</source>
          <target state="translated">他のlinux。ディストリビューションのパッケージマネージャを使う</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">必要条件</target>
        </trans-unit>
        <trans-unit id="17e159a0b832fb918538fa8e1dc1427f74ab81de" translate="yes" xml:space="preserve">
          <source>The MIT license</source>
          <target state="translated">MITのライセンス</target>
        </trans-unit>
        <trans-unit id="ce584f3715e750d6e40ca52529e7e6017d7221ff" translate="yes" xml:space="preserve">
          <source>There are several Python packages that implement argon2, including the excellent &lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;passlib&lt;/a&gt;, which uses &lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffi&lt;/a&gt;, but...</source>
          <target state="translated">そこに優れ含むargon2を実装するいくつかのPythonパッケージ、ある&lt;a href=&quot;http://passlib.readthedocs.io/en/stable/&quot;&gt;PASSLIB&lt;/a&gt;使用して、&lt;a href=&quot;https://github.com/hynek/argon2_cffi&quot;&gt;argon2_cffiは&lt;/a&gt;、しかし...</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="536244f4cc64c32141c5753233b90a09618435ae" translate="yes" xml:space="preserve">
          <source>Verifying</source>
          <target state="translated">検証</target>
        </trans-unit>
        <trans-unit id="a61dc7cfe81decf95f172527fe51435f115b2cce" translate="yes" xml:space="preserve">
          <source>Windows: Download a pre-built binary &lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">Windows：ビルド済みのバイナリを&lt;a href=&quot;http://releases.llvm.org/download.html&quot;&gt;ここから&lt;/a&gt;ダウンロードしてください</target>
        </trans-unit>
        <trans-unit id="f2c07cb057a688edc054b308f1255acb4ededede" translate="yes" xml:space="preserve">
          <source>argonautica-py</source>
          <target state="translated">アルコナウティカパイ</target>
        </trans-unit>
        <trans-unit id="f9bc3be46ae328e0c638fc70e35e07ff6d55dfab" translate="yes" xml:space="preserve">
          <source>at your option.</source>
          <target state="translated">を選択してください。</target>
        </trans-unit>
        <trans-unit id="32e74c13596c69be07e436be4b969f69cc195576" translate="yes" xml:space="preserve">
          <source>macOS: &lt;code&gt;brew install llvm&lt;/code&gt;, which requires &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;</source>
          <target state="translated">macOS：&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;を必要と &lt;code&gt;brew install llvm&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
