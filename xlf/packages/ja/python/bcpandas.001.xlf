<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/bcpandas/">
    <body>
      <group id="bcpandas">
        <trans-unit id="2b84ff96244431fc59487bc112f83689f35d35f4" translate="yes" xml:space="preserve">
          <source>(continuing example above)</source>
          <target state="translated">（上記の継続例）</target>
        </trans-unit>
        <trans-unit id="b89a64dfe77728c2429687df2f1e767d89d04235" translate="yes" xml:space="preserve">
          <source>:white_check_mark:</source>
          <target state="translated">：white_check_mark：</target>
        </trans-unit>
        <trans-unit id="76e3d5524e143855957921563877ecc340a8f38d" translate="yes" xml:space="preserve">
          <source>:x:</source>
          <target state="translated">：バツ：</target>
        </trans-unit>
        <trans-unit id="4836865bbd25774ba0868873e41dc65975fb0b06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/bcp-utility&quot;&gt;BCP&lt;/a&gt; Utility</source>
          <target state="translated">&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/tools/bcp-utility&quot;&gt;BCP&lt;/a&gt;ユーティリティ</target>
        </trans-unit>
        <trans-unit id="581cf8b96b273994f1a0d32ae2f89feaeb9924f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/titan550/bcpy&quot;&gt;bcpy&lt;/a&gt; has several flaws:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/titan550/bcpy&quot;&gt;bcpyに&lt;/a&gt;はいくつかの欠陥があります：</target>
        </trans-unit>
        <trans-unit id="eb1a5258765bef87dcfb5a45d1928686e8a6cf66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numpy.NaN&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.NaN&lt;/code&gt; 、 &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ffae9028254c446fd16cb7e3ef77614349ed5c61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numpy.inf&lt;/code&gt; (fails, as expected)</source>
          <target state="translated">&lt;code&gt;numpy.inf&lt;/code&gt; （予想どおり失敗）</target>
        </trans-unit>
        <trans-unit id="12224a99522728ff06bc19e04f22478701fd4838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pandas&lt;/code&gt; &amp;gt;= 0.19</source>
          <target state="translated">&lt;code&gt;pandas&lt;/code&gt; &amp;gt; = 0.19</target>
        </trans-unit>
        <trans-unit id="4d8d5146c6e6d799c74cb3a5840b3bdfa3b1762d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pyodbc&lt;/code&gt; as the &lt;a href=&quot;https://docs.sqlalchemy.org/en/13/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc&quot;&gt;supported DBAPI&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;pyodbc&lt;/code&gt; れて&lt;a href=&quot;https://docs.sqlalchemy.org/en/13/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc&quot;&gt;いる&lt;/a&gt;DBAPIとしてのpyodbc</target>
        </trans-unit>
        <trans-unit id="cd74a966d207661429813a8a660a3e30d9f23cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pytest-cov&lt;/code&gt; (which uses &lt;code&gt;coverage.py&lt;/code&gt; under the hood) is used to measure code coverage. This is then uploaded to &lt;a href=&quot;https://codecov.io/gh/yehoshuadimarsky/bcpandas&quot;&gt;codecov.io&lt;/a&gt; as part of the CI/CD process (see below).</source>
          <target state="translated">&lt;code&gt;pytest-cov&lt;/code&gt; （これは、 &lt;code&gt;coverage.py&lt;/code&gt; を内部で使用します）を使用して、コードカバレッジを測定します。これは、CI / CDプロセスの一部として&lt;a href=&quot;https://codecov.io/gh/yehoshuadimarsky/bcpandas&quot;&gt;codecov.ioに&lt;/a&gt;アップロードされます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8bb5f287cc1e42d12a5d8ba03efe21e809edff80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sqlalchemy&lt;/code&gt; &amp;gt;= 1.1.4</source>
          <target state="translated">&lt;code&gt;sqlalchemy&lt;/code&gt; &amp;gt; = 1.1.4</target>
        </trans-unit>
        <trans-unit id="78255068df60a5f13b5c2f02554a2d1bfd983874" translate="yes" xml:space="preserve">
          <source>&lt;del&gt;If there is a NaN/Null in the last column of the dataframe it will throw an error. This is due to a BCP issue. See my issue with Microsoft about this &lt;a href=&quot;https://github.com/MicrosoftDocs/sql-docs/issues/2689&quot;&gt;here&lt;/a&gt;.&lt;/del&gt; This doesn't seem to be a problem based on the tests.</source>
          <target state="translated">&lt;del&gt;データフレームの最後の列にNaN / Nullがある場合、エラーがスローされます。これはBCPの問題が原因です。これについては、マイクロソフトと私の問題を参照してください&lt;a href=&quot;https://github.com/MicrosoftDocs/sql-docs/issues/2689&quot;&gt;ここに&lt;/a&gt;。&lt;/del&gt; これは、テストに基づいた問題ではないようです。</target>
        </trans-unit>
        <trans-unit id="5443a8fe489f4b2a5e21a2be54853312785f5021" translate="yes" xml:space="preserve">
          <source>A convoluted, overly class-based internal design</source>
          <target state="translated">複雑に入り組んだ、過度にクラスを意識した内部設計</target>
        </trans-unit>
        <trans-unit id="8136ea47893bb6bb3bdd2662707167d1e50ba885" translate="yes" xml:space="preserve">
          <source>An empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) in the dataframe becomes &lt;code&gt;NULL&lt;/code&gt; in the SQL database instead of remaining an empty string.</source>
          <target state="translated">データフレーム内の空の文字列（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）は、SQLデータベースでは空の文字列のままではなく &lt;code&gt;NULL&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="812ab620f478475a5ebda099456721c6c7e0043d" translate="yes" xml:space="preserve">
          <source>Any version of Microsoft SQL Server. Can be installed on-prem, in the cloud, on a VM, or one of the Azure versions.</source>
          <target state="translated">Microsoft SQL Server の任意のバージョン。オンプレミス、クラウド、VM、またはAzureのいずれかのバージョンにインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="14148fbce0183b3e58b829b94ac9721f58af64ec" translate="yes" xml:space="preserve">
          <source>As you can see, pandas native clearly wins here</source>
          <target state="translated">見ての通り、ここでは明らかにパンダネイティブの勝ちです。</target>
        </trans-unit>
        <trans-unit id="b3ec344f6d5bb6015e30100abb1ebc72a7d36b1b" translate="yes" xml:space="preserve">
          <source>BCPandas</source>
          <target state="translated">BCPandas</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">背景</target>
        </trans-unit>
        <trans-unit id="7850ad1fb073003cae12f25032a05442a117f1f5" translate="yes" xml:space="preserve">
          <source>Bcpandas has been tested with all ASCII characters 32-127. Unicode characters beyond that range have not been tested.</source>
          <target state="translated">BcpandasはすべてのASCII文字32-127でテストされています。その範囲を超えるUnicode文字はテストしていません。</target>
        </trans-unit>
        <trans-unit id="145a0a84fd6f860c424ac5c3d09d21d33d00f5fa" translate="yes" xml:space="preserve">
          <source>Bcpandas requires a &lt;code&gt;bcpandas.SqlCreds&lt;/code&gt; object in order to use it, and also a &lt;code&gt;sqlalchemy.Engine&lt;/code&gt;. The user has 2 options when constructing it.</source>
          <target state="translated">Bcpandas を使用するには、 &lt;code&gt;bcpandas.SqlCreds&lt;/code&gt; オブジェクトと &lt;code&gt;sqlalchemy.Engine&lt;/code&gt; が必要です。ユーザーはそれを構築するときに2つのオプションを持っています。</target>
        </trans-unit>
        <trans-unit id="3508d1816f504c4af81ecdd0323b15ea7c25b474" translate="yes" xml:space="preserve">
          <source>Because bcpandas first outputs to CSV, it needs to use several specific characters to create the CSV, including a &lt;em&gt;delimiter&lt;/em&gt; and a &lt;em&gt;quote character&lt;/em&gt;. Bcpandas attempts to use  characters that are not present in the dataframe for this, going through the possilbe delimiters and quote characters specified in &lt;code&gt;constants.py&lt;/code&gt;. If all possible characters are present in the dataframe and bcpandas cannot find both a delimiter and quote character to use, it will throw an error.</source>
          <target state="translated">bcpandasは最初にCSVに出力するため、&lt;em&gt;区切り文字&lt;/em&gt;や&lt;em&gt;引用文字&lt;/em&gt;など、CSVを作成するためにいくつかの特定の文字を使用する必要があります。Bcpandasは、このためにデータフレームに存在しない文字を使用しようとし、possilbe区切り文字と &lt;code&gt;constants.py&lt;/code&gt; で指定された引用文字を通過します。すべての可能な文字がデータフレームに存在し、bcpandasが使用する区切り文字と引用文字の両方を見つけることができない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="db706274a149e8745c23ef55afb14dbd27aa7f2e" translate="yes" xml:space="preserve">
          <source>Because it is still much slower</source>
          <target state="translated">まだもっと遅いから</target>
        </trans-unit>
        <trans-unit id="8eb442ba9fc29343f2fcc7b8c56d33281f7d96dc" translate="yes" xml:space="preserve">
          <source>Because you are forced to set the &lt;code&gt;chunksize&lt;/code&gt; parameter to a very small number for it to work - generally a bit less then &lt;code&gt;2100/&amp;lt;number of columns&amp;gt;&lt;/code&gt;. This is because SQL Server can only accept up to 2100 parameters in a query. See &lt;a href=&quot;https://stackoverflow.com/questions/50689082/to-sql-pyodbc-count-field-incorrect-or-syntax-error&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/mkleehammer/pyodbc/issues/217&quot;&gt;here&lt;/a&gt; for more discussion on this, and the recommendation to use a bulk insert tool such as BCP. It seems that SQL Server simply didn't design the regular &lt;code&gt;INSERT&lt;/code&gt; statement to support huge amounts of data.</source>
          <target state="translated">&lt;code&gt;chunksize&lt;/code&gt; パラメータを機能させるために非常に小さい数に設定する必要があるため、通常は &lt;code&gt;2100/&amp;lt;number of columns&amp;gt;&lt;/code&gt; より少し少ないです。これは、SQL Serverではクエリで最大2100個のパラメーターしか受け入れられないためです。この詳細と、BCPなどの一括挿入ツールの使用に関する推奨事項については、&lt;a href=&quot;https://stackoverflow.com/questions/50689082/to-sql-pyodbc-count-field-incorrect-or-syntax-error&quot;&gt;ここ&lt;/a&gt;と&lt;a href=&quot;https://github.com/mkleehammer/pyodbc/issues/217&quot;&gt;ここ&lt;/a&gt;を参照してください。SQL Serverは、通常の &lt;code&gt;INSERT&lt;/code&gt; ステートメントを大量のデータをサポートするように設計していないようです。</target>
        </trans-unit>
        <trans-unit id="4f46ac72b3634f96c6860b1ed26d9d4cd71d21aa" translate="yes" xml:space="preserve">
          <source>Benchmarks</source>
          <target state="translated">ベンチマーク</target>
        </trans-unit>
        <trans-unit id="25ef1b4378fab2acfcb4bfaec56de16f3a8c47fd" translate="yes" xml:space="preserve">
          <source>CI/CD</source>
          <target state="translated">CI/CD</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">コマンド</target>
        </trans-unit>
        <trans-unit id="ecf2e3b26ea2414a35178b19b8880b296c3d6d18" translate="yes" xml:space="preserve">
          <source>Conda</source>
          <target state="translated">コンダ</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">貢献</target>
        </trans-unit>
        <trans-unit id="041c9624ae9bde19cfe1b3aef4bcbfd516a3e4f2" translate="yes" xml:space="preserve">
          <source>Create creds (see next section)</source>
          <target state="translated">クレドの作成(次のセクションを参照)</target>
        </trans-unit>
        <trans-unit id="d2277c2470dce46d0446e41643b36dc157685d59" translate="yes" xml:space="preserve">
          <source>Create the bcpandas &lt;code&gt;SqlCreds&lt;/code&gt; object with just the minimum attributes needed (server, database, username, password), and bcpandas will create a full &lt;code&gt;Engine&lt;/code&gt; object from this. It will use &lt;code&gt;pyodbc&lt;/code&gt;, &lt;code&gt;sqlalchemy&lt;/code&gt;, and the Microsoft ODBC Driver for SQL Server, and will store it in the &lt;code&gt;.engine&lt;/code&gt; attribute.</source>
          <target state="translated">必要最小限の属性（サーバー、データベース、ユーザー名、パスワード）だけでbcpandas &lt;code&gt;SqlCreds&lt;/code&gt; オブジェクトを作成し、bcpandasはこれから完全な &lt;code&gt;Engine&lt;/code&gt; オブジェクトを作成します。これは、使用する &lt;code&gt;pyodbc&lt;/code&gt; 、 &lt;code&gt;sqlalchemy&lt;/code&gt; 、およびSQL Server用のMicrosoft ODBCドライバを、そして、それを格納します &lt;code&gt;.engine&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="0f9a3d3c77a3e5189127aec138f272b3273064f5" translate="yes" xml:space="preserve">
          <source>Credential/Connection object</source>
          <target state="translated">クレデンシャル/接続オブジェクト</target>
        </trans-unit>
        <trans-unit id="d023b329fe7007e5bb9557b9d934149be38715d5" translate="yes" xml:space="preserve">
          <source>Data types: All ASCII characters 32-127 (using the Hypothesis library, see below). Unicode characters beyond that range have not been tested.</source>
          <target state="translated">データ型。すべてのASCII文字32-127(Hypothesisライブラリを使用しています。その範囲を超える Unicode 文字はテストされていません。</target>
        </trans-unit>
        <trans-unit id="61074f1c958d6cdd32dad889b3d58a2d0704cbe3" translate="yes" xml:space="preserve">
          <source>Database</source>
          <target state="translated">データベース</target>
        </trans-unit>
        <trans-unit id="691ce6b53b50d3f885d4222772e2a70799907e08" translate="yes" xml:space="preserve">
          <source>Database columns that are missing from the dataframe, are out of order, or both (passes)</source>
          <target state="translated">データフレームから欠落している、順序がずれている、またはその両方であるデータベースの列 (パス)</target>
        </trans-unit>
        <trans-unit id="76f28351a7d0c8876ec4cf3dc017b25e19d1c043" translate="yes" xml:space="preserve">
          <source>Design and Scope</source>
          <target state="translated">デザインと範囲</target>
        </trans-unit>
        <trans-unit id="7307d0d41237bcfa9b4164065b4ae1c16c5070f9" translate="yes" xml:space="preserve">
          <source>Docker Desktop installed, either of the Linux or Windows runtimes, doesn't matter</source>
          <target state="translated">Docker Desktopがインストールされているかどうかは、LinuxランタイムでもWindowsランタイムでも問題ありません。</target>
        </trans-unit>
        <trans-unit id="80a466f377e6463c788fa476b5d058155e687809" translate="yes" xml:space="preserve">
          <source>Duplicate column names (raises error)</source>
          <target state="translated">列名の重複(エラーを発生させる</target>
        </trans-unit>
        <trans-unit id="64ccda66e16a44cbba57a4db2b57a9a05bc450f4" translate="yes" xml:space="preserve">
          <source>Empty dataframe (nothing happens, database not modified)</source>
          <target state="translated">空のデータフレーム(何も起こらない、データベースが変更されていない</target>
        </trans-unit>
        <trans-unit id="a9ae32d0b39095733ff905d0f13fb3f93e4a75f1" translate="yes" xml:space="preserve">
          <source>Existing Solutions</source>
          <target state="translated">既存のソリューション</target>
        </trans-unit>
        <trans-unit id="76284d7bc7ed062672bc5972bdb127a08e71fcd9" translate="yes" xml:space="preserve">
          <source>Extra dataframe columns that aren't in database, when &lt;code&gt;if_exists=&quot;append&quot;&lt;/code&gt; specified (fails)</source>
          <target state="translated">&lt;code&gt;if_exists=&quot;append&quot;&lt;/code&gt; が指定されている場合（失敗）、データベースにない追加のデータフレーム列</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">特徴</target>
        </trans-unit>
        <trans-unit id="3acb1702b49c155fe6302829070e992486dcd322" translate="yes" xml:space="preserve">
          <source>For now, we are using the non-XML BCP format file type. In the future, XML format files may be added.</source>
          <target state="translated">今のところ、XMLではないBCP形式のファイルタイプを使用しています。将来的には、XML形式のファイルが追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="81b1231bbf8b818b98726cdc0006bb44b7de1bd4" translate="yes" xml:space="preserve">
          <source>Github Actions is used for CI/CD, although it is still somewhat a work in progress.</source>
          <target state="translated">Github ActionsはCI/CDに使われていますが、まだまだ未完成です。</target>
        </trans-unit>
        <trans-unit id="52a99797ae5b7e3cfb129ed2df62557a2d94f55c" translate="yes" xml:space="preserve">
          <source>Good for simple data types like numbers and dates</source>
          <target state="translated">数字や日付などのシンプルなデータ型に最適</target>
        </trans-unit>
        <trans-unit id="dabf30b579c8c0bd6e23af5eb7b139345fa4df0e" translate="yes" xml:space="preserve">
          <source>Handle messy string data</source>
          <target state="translated">乱雑な文字列データを扱う</target>
        </trans-unit>
        <trans-unit id="547b7980a4a464c718de4e7055baf94c4675407f" translate="yes" xml:space="preserve">
          <source>Here are some caveats and limitations of bcpandas.</source>
          <target state="translated">ここでは、bcpandasの注意点と制限事項を紹介します。</target>
        </trans-unit>
        <trans-unit id="d5aae98f14872303c91c9d73ac64438923bdc2f6" translate="yes" xml:space="preserve">
          <source>High-level wrapper around BCP for high performance data transfers between pandas and SQL Server. No knowledge of BCP required!!</source>
          <target state="translated">パンダとSQL Server間での高性能なデータ転送を実現するためのBCP周りの高レベルなラッパーです。BCPの知識は必要ありません!</target>
        </trans-unit>
        <trans-unit id="9db61721b3c0b0accb2d62591aa7f2898fa5e0e0" translate="yes" xml:space="preserve">
          <source>High-level wrapper around BCP for high performance data transfers between pandas and SQL Server. No knowledge of BCP required!! (pronounced &lt;em&gt;BEE-CEE-Pandas&lt;/em&gt;)</source>
          <target state="translated">パンダとSQL Server間の高性能データ転送のためのBCPの高レベルラッパー。BCPの知識は必要ありません!! （&lt;em&gt;BEE-CEE-Pandas&lt;/em&gt;と発音）</target>
        </trans-unit>
        <trans-unit id="fa8278b8ef8905e7f0a40631d946ff53074c850c" translate="yes" xml:space="preserve">
          <source>I didn't bother including the pandas non-&lt;code&gt;multiinsert&lt;/code&gt; version here because it just takes way too long</source>
          <target state="translated">パンダの非 &lt;code&gt;multiinsert&lt;/code&gt; バージョンをここに含めたのは、あまりにも時間がかかるためです。</target>
        </trans-unit>
        <trans-unit id="3d407a0ff2b36881d9fc324af8fcaebf8e0992a5" translate="yes" xml:space="preserve">
          <source>I will attempt to use the &lt;code&gt;pandas&lt;/code&gt; docstring style as detailed &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/development/contributing_docstring.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/development/contributing_docstring.html&quot;&gt;ここで&lt;/a&gt;詳しく説明するように、 &lt;code&gt;pandas&lt;/code&gt; docstringスタイルを使用しようとします。</target>
        </trans-unit>
        <trans-unit id="c3fab8786779f3e61b8f68a7ac126fed43557a2d" translate="yes" xml:space="preserve">
          <source>IMPORTANT - Read vs. Write</source>
          <target state="translated">重要-読み取りと書き込み</target>
        </trans-unit>
        <trans-unit id="21a587ecb595cbd02b92ebe158e13eff7c106f26" translate="yes" xml:space="preserve">
          <source>In order to spin up a local SQL Server during testing, we use Docker. Specifically, we run one of the images that Microsoft provides that already have SQL Server fully installed, all we have to do is use the image to run a container. Here are the links to the &lt;a href=&quot;https://hub.docker.com/_/microsoft-mssql-server&quot;&gt;Linux versions&lt;/a&gt; and the Windows versions - &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-express/&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-developer&quot;&gt;Developer&lt;/a&gt;.</source>
          <target state="translated">テスト中にローカルSQL Serverを起動するために、Dockerを使用します。具体的には、SQL Serverが完全にインストールされたMicrosoftが提供するイメージの1つを実行します。必要なのは、イメージを使用してコンテナーを実行することだけです。&lt;a href=&quot;https://hub.docker.com/_/microsoft-mssql-server&quot;&gt;Linuxバージョン&lt;/a&gt;とWindowsバージョン&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-express/&quot;&gt;-Express&lt;/a&gt;と&lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-windows-developer&quot;&gt;Developer&lt;/a&gt;へのリンクは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="3e1d61d3b4e30cc9a0f56244235c036c9bf428e1" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;subprocess&lt;/code&gt; library to control Docker manually, we use the elegant &lt;code&gt;docker-py&lt;/code&gt; library which works very nicely. A &lt;code&gt;DockerDB&lt;/code&gt; Python class is defined in &lt;code&gt;bcpandas/tests/utils.py&lt;/code&gt; and it wraps up all the Docker commands and functionality needed to use SQL Server into one class. This class is used in &lt;code&gt;conftest.py&lt;/code&gt; in the core bcpandas tests, and in the &lt;code&gt;benchmarks/&lt;/code&gt; directory for both the benchmarks code as well as the legacy tests for &lt;code&gt;read_sql&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subprocess&lt;/code&gt; ライブラリを使用してDockerを手動で制御する代わりに、非常にうまく機能するエレガントな &lt;code&gt;docker-py&lt;/code&gt; ライブラリを使用します。 A &lt;code&gt;DockerDB&lt;/code&gt; Pythonのクラスがで定義されている &lt;code&gt;bcpandas/tests/utils.py&lt;/code&gt; 、それが一つのクラスにSQL Serverを使用するために必要なすべてのドッカーコマンドや機能を包み込みます。このクラスで使用される &lt;code&gt;conftest.py&lt;/code&gt; 試験bcpandasコア中、およびで &lt;code&gt;benchmarks/&lt;/code&gt; ベンチマークコードならびにための従来のテストの両方のディレクトリ &lt;code&gt;read_sql&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a66dd1dbbcdaed8372df35dfee9c244c4fe29ad0" translate="yes" xml:space="preserve">
          <source>JSON file of the benchmark data</source>
          <target state="translated">ベンチマークデータのJSONファイル</target>
        </trans-unit>
        <trans-unit id="c356804ddce0f7e1a9765716af7555229e0ea654" translate="yes" xml:space="preserve">
          <source>JSON file with the environment details of the machine that was used to generate it</source>
          <target state="translated">生成に使用したマシンの環境詳細が記載されたJSONファイル</target>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="bc167ac3f0e18206129211c7f3fa357e48c5c4b5" translate="yes" xml:space="preserve">
          <source>Microsoft ODBC Driver &lt;strong&gt;11, 13, 13.1, or 17&lt;/strong&gt; for SQL Server. See the &lt;a href=&quot;https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-Windows&quot;&gt;pyodbc docs&lt;/a&gt; for details.</source>
          <target state="translated">SQL Server用のMicrosoft ODBCドライバー&lt;strong&gt;11、13、13.1、または17&lt;/strong&gt;。詳細については、&lt;a href=&quot;https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-Windows&quot;&gt;pyodbcのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6df0fe186d7f4fe3db9e445dc14466665fdbbe28" translate="yes" xml:space="preserve">
          <source>Much credit is due to &lt;code&gt;bcpy&lt;/code&gt; for the original idea and for some of the code that was adopted and changed.</source>
          <target state="translated">多くの功績は、元のアイデアと、採用および変更されたコードの一部に対する &lt;code&gt;bcpy&lt;/code&gt; によるものです。</target>
        </trans-unit>
        <trans-unit id="d4b2a1e43166e35dafcdfee719b641412d2a1787" translate="yes" xml:space="preserve">
          <source>No support for reading from SQL, only writing to SQL</source>
          <target state="translated">SQLからの読み込みはサポートされておらず、SQLへの書き込みのみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="3d45dc15d4aa32921a6bd5174281815bac463550" translate="yes" xml:space="preserve">
          <source>PNG image of the graph</source>
          <target state="translated">グラフのPNG画像</target>
        </trans-unit>
        <trans-unit id="26f36cc3e752dabfb46d93d28cf67ca7e0964af6" translate="yes" xml:space="preserve">
          <source>Pandas native</source>
          <target state="translated">パンダ土着</target>
        </trans-unit>
        <trans-unit id="c0896b5a24266a7f891c8679df9cf1580202d0f3" translate="yes" xml:space="preserve">
          <source>Pass a full &lt;code&gt;Engine&lt;/code&gt; object to the bcpandas &lt;code&gt;SqlCreds&lt;/code&gt; object, and bcpandas will attempt to parse out the server, database, username, and password to pass to the command line utilities. If a DSN is used, this will fail.</source>
          <target state="translated">完全な &lt;code&gt;Engine&lt;/code&gt; オブジェクトをbcpandas &lt;code&gt;SqlCreds&lt;/code&gt; オブジェクトに渡すと、bcpandasはサーバー、データベース、ユーザー名、およびパスワードを解析してコマンドラインユーティリティに渡します。DSNが使用されている場合、これは失敗します。</target>
        </trans-unit>
        <trans-unit id="c45012d793434c12de12f6b04ab7092f9aae5e61" translate="yes" xml:space="preserve">
          <source>Please, all contributions are very welcome!</source>
          <target state="translated">投稿はすべて大歓迎ですので、よろしくお願いします</target>
        </trans-unit>
        <trans-unit id="33e72da85f21769ca9a8ee3181ea9def0321f98f" translate="yes" xml:space="preserve">
          <source>PyPI</source>
          <target state="translated">パイピーアイ</target>
        </trans-unit>
        <trans-unit id="c32b6c1ab053aa1b803595ba447bebbb8760c137" translate="yes" xml:space="preserve">
          <source>Python &amp;gt;= 3.6</source>
          <target state="translated">Python&amp;gt; = 3.6</target>
        </trans-unit>
        <trans-unit id="164100a124690d40ea0f689d3e939d9e9bbbf9c5" translate="yes" xml:space="preserve">
          <source>Python User</source>
          <target state="translated">Pythonユーザー</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">クイックスタート</target>
        </trans-unit>
        <trans-unit id="c33ebb18aa7c683e58237addbd590da420348847" translate="yes" xml:space="preserve">
          <source>Recommended Usage</source>
          <target state="translated">おすすめの使い方</target>
        </trans-unit>
        <trans-unit id="08d9bc6898acc588635443ca8df6948b4af9793e" translate="yes" xml:space="preserve">
          <source>Replace any &lt;code&gt;df.to_sql(...)&lt;/code&gt; in your code with &lt;code&gt;bcpandas.to_sql(df, ...)&lt;/code&gt;</source>
          <target state="translated">コード内の &lt;code&gt;df.to_sql(...)&lt;/code&gt; を &lt;code&gt;bcpandas.to_sql(df, ...)&lt;/code&gt; 置き換えます</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">必要条件</target>
        </trans-unit>
        <trans-unit id="71d4a739c996a8252e5b9838680b099447f11563" translate="yes" xml:space="preserve">
          <source>Running this will output</source>
          <target state="translated">これを実行すると</target>
        </trans-unit>
        <trans-unit id="4c3581a4d5355beb88ad0bea14ac93c6dc4c9163" translate="yes" xml:space="preserve">
          <source>Scope a bit too broad - deals with pandas as well as flat files
This repository aims to fix and improve on &lt;code&gt;bcpy&lt;/code&gt; and the above issues by making the design choices described earlier.</source>
          <target state="translated">スコープが広すぎます-パンダとフラットファイルを扱いますこのリポジトリは、前述の設計上の選択を行うことにより、 &lt;code&gt;bcpy&lt;/code&gt; および上記の問題を修正および改善することを目的としています。</target>
        </trans-unit>
        <trans-unit id="a3a612f92d3ceff5a3d5ae1a7a9f30fdf9233090" translate="yes" xml:space="preserve">
          <source>See figures below. All code is in the &lt;code&gt;/benchmarks&lt;/code&gt; directory. To run the benchmarks, from the root directory of this repository, run &lt;code&gt;python benchmarks/benchmark.py main --help&lt;/code&gt; and fill in the command line options that are presented.</source>
          <target state="translated">下の図を参照してください。すべてのコードは &lt;code&gt;/benchmarks&lt;/code&gt; ディレクトリにあります。ベンチマークを実行するには、このリポジトリのルートディレクトリから &lt;code&gt;python benchmarks/benchmark.py main --help&lt;/code&gt; を実行し、表示されるコマンドラインオプションに入力します。</target>
        </trans-unit>
        <trans-unit id="6da13addb000b67d42a6d66391713819e634149f" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="translated">ソース</target>
        </trans-unit>
        <trans-unit id="4a5d769ec38e509a2cc0d034cbf395fa726c2163" translate="yes" xml:space="preserve">
          <source>Super speed</source>
          <target state="translated">超高速</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">テスト</target>
        </trans-unit>
        <trans-unit id="72f6ac91015e7ff555be46a691c5d5439b6a006f" translate="yes" xml:space="preserve">
          <source>Testing Implementation</source>
          <target state="translated">テストの実施</target>
        </trans-unit>
        <trans-unit id="fdabde9e2546d302d5577b7817f77c38b8ea8095" translate="yes" xml:space="preserve">
          <source>Testing Requirements</source>
          <target state="translated">テスト要件</target>
        </trans-unit>
        <trans-unit id="7e187957ecf95e1b7c04491211d99d11fb5d46b7" translate="yes" xml:space="preserve">
          <source>Testing uses &lt;code&gt;pytest&lt;/code&gt;.</source>
          <target state="translated">テストでは &lt;code&gt;pytest&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e93f4cf2c16977aa0828b84202ee64df60519c65" translate="yes" xml:space="preserve">
          <source>That's it!</source>
          <target state="translated">それだ!</target>
        </trans-unit>
        <trans-unit id="cf8b8e72a0f0d39a93c59901416904bc1ebcbf95" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&lt;strong&gt;only&lt;/strong&gt;&lt;/em&gt; scope of &lt;code&gt;bcpandas&lt;/code&gt; is to read and write between a pandas DataFrame and a Microsoft SQL Server database. That's it. We do &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; concern ourselves with reading existing flat files to/from SQL - that introduces &lt;em&gt;way&lt;/em&gt; to much complexity in trying to parse and decode the various parts of the file, like delimiters, quote characters, and line endings. Instead, to read/write an exiting flat file, just import it via pandas into a DataFrame, and then use &lt;code&gt;bcpandas&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bcpandas&lt;/code&gt; の&lt;em&gt;&lt;strong&gt;唯一の&lt;/strong&gt;&lt;/em&gt;スコープは、pandas DataFrameとMicrosoft SQL Serverデータベースの間で読み書きすることです。それでおしまい。私たちは、ない&lt;em&gt;&lt;strong&gt;ではない&lt;/strong&gt;&lt;/em&gt;ことが導入の- SQLから/への既存のフラットファイルを読み込むと自分自身を懸念&lt;em&gt;道&lt;/em&gt;区切り文字、引用符、および行末のように、ファイルのさまざまな部分を解析し、解読しようとする際に多くの複雑さを。代わりに、既存のフラットファイルを読み書きするには、パンダを介してDataFrameにインポートし、次に &lt;code&gt;bcpandas&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="935ef7ea006a968f0e6aa05f8b21d0ef6b501136" translate="yes" xml:space="preserve">
          <source>The BCP utility does &lt;strong&gt;not&lt;/strong&gt; ignore delimiter characters when surrounded by quotes, unlike CSVs - see &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/import-export/specify-field-and-row-terminators-sql-server#characters-supported-as-terminators&quot;&gt;here&lt;/a&gt; in the Microsoft docs.</source>
          <target state="translated">BCPユーティリティがない&lt;strong&gt;ではない&lt;/strong&gt;引用符で囲まれたときとは異なり、CSVを区切り文字を無視する-を参照して&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/relational-databases/import-export/specify-field-and-row-terminators-sql-server#characters-supported-as-terminators&quot;&gt;、ここで&lt;/a&gt;マイクロソフトのドキュメントに。</target>
        </trans-unit>
        <trans-unit id="dd16e25205e87e71f6f85d75be7cb12d82640bdc" translate="yes" xml:space="preserve">
          <source>The big benefit of this is that we get to precicely control all the finicky parts of the text file when we write/read it to a local file and then in the BCP utility. This lets us set library-wide defaults (maybe configurable in the future) and work with those.</source>
          <target state="translated">これの大きな利点は、テキストファイルをローカルファイルに書き込んだり、読み込んだりするときに、BCPユーティリティでテキストファイルの細かい部分をすべて正確に制御できることです。これにより、ライブラリ全体のデフォルトを設定して(将来的には設定可能になるかもしれません)、それを使って作業することができます。</target>
        </trans-unit>
        <trans-unit id="c2fed85ad249e75421b950e6e4ef07685f5a9825" translate="yes" xml:space="preserve">
          <source>The big speedup benefit of bcpandas is in the &lt;code&gt;to_sql&lt;/code&gt; function, as the benchmarks below show. However, the bcpandas &lt;code&gt;read_sql&lt;/code&gt; function actually performs &lt;strong&gt;slower&lt;/strong&gt; than the pandas equivalent. Therefore, the bcpandas &lt;code&gt;read_sql&lt;/code&gt; function was deprecated in v5.0 and has now been removed in v6.0+. To read data &lt;strong&gt;from&lt;/strong&gt; SQL to pandas, use the native pandas method &lt;code&gt;pd.read_sql_table&lt;/code&gt; or &lt;code&gt;pd.read_sql_query&lt;/code&gt;.</source>
          <target state="translated">以下のベンチマークが示すように、 &lt;code&gt;to_sql&lt;/code&gt; の大きなスピードアップの利点はto_sql 関数にあります。ただし、bcpandasの &lt;code&gt;read_sql&lt;/code&gt; 関数は、実際にはpandasの同等の機能&lt;strong&gt;より&lt;/strong&gt;もパフォーマンスが低下します。そのため、bcpandas &lt;code&gt;read_sql&lt;/code&gt; 関数はv5.0で廃止され、v6.0以降では削除されました。データ読み取るには&lt;strong&gt;から&lt;/strong&gt;パンダにSQLを、ネイティブパンダメソッドを使用 &lt;code&gt;pd.read_sql_table&lt;/code&gt; または &lt;code&gt;pd.read_sql_query&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f26a925ed89f7dc927bccea30da0e63653a37df0" translate="yes" xml:space="preserve">
          <source>This package is a wrapper for seamlessly using the bcp utility from Python using a pandas DataFrame. Despite the IO hits, the fastest option by far is saving the data to a CSV file in the file system and using the bcp utility to transfer the CSV file to SQL Server. &lt;strong&gt;Best of all, you don't need to know anything about using BCP at all!&lt;/strong&gt;</source>
          <target state="translated">このパッケージは、pandas DataFrameを使用してPythonからbcpユーティリティをシームレスに使用するためのラッパーです。IOヒットにもかかわらず、最も高速なオプションは、データをファイルシステムのCSVファイルに保存し、bcpユーティリティを使用してCSVファイルをSQL Serverに転送することです。&lt;strong&gt;何よりも、BCPの使用について何も知る必要はありません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9c47aa7f6032f05875deb0226f3f944ec08fc09" translate="yes" xml:space="preserve">
          <source>To test for all possible data types, we use the &lt;code&gt;hypothesis&lt;/code&gt; library, instead of trying to come up with every single case on our own.</source>
          <target state="translated">考えられるすべてのデータ型をテストするために、すべてのケースを自分で考え出そうとするのではなく、 &lt;code&gt;hypothesis&lt;/code&gt; ライブラリーを使用します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="d792e208dd4288df221b3b3ede563a86487fd15f" translate="yes" xml:space="preserve">
          <source>We take testing very seriously here. In order to rely on a library like this in production, it &lt;strong&gt;MUST&lt;/strong&gt; be ruthlessly tested, which thankfully it is.
Here is a partial list of what has been tested so far. Pull Requests welcome!</source>
          <target state="translated">ここではテストを真剣に受け止めています。本番&lt;strong&gt;環境で&lt;/strong&gt;このようなライブラリに依存するには、無慈悲にテストする&lt;strong&gt;必要&lt;/strong&gt;があります。以下は、これまでにテストされたものの一部のリストです。プルリクエストは大歓迎です！</target>
        </trans-unit>
        <trans-unit id="d619ad7cc694d2eb378d8abe6f951f3c088fe61c" translate="yes" xml:space="preserve">
          <source>What Is Tested?</source>
          <target state="translated">何がテストされているのか?</target>
        </trans-unit>
        <trans-unit id="4a6a9ea1c387d614a4dfcfd6ea6fd479e5eda7c0" translate="yes" xml:space="preserve">
          <source>When running the tests, we can specify a specific Docker image to use, by invoking the custom command line option called &lt;code&gt;--mssql-docker-image&lt;/code&gt;. For example:</source>
          <target state="translated">テストを実行するときに、 &lt;code&gt;--mssql-docker-image&lt;/code&gt; と呼ばれるカスタムコマンドラインオプションを呼び出すことにより、使用する特定のDockerイメージを指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="ce4b3ce57d73ee84b7d96666566ccb18a60d24d9" translate="yes" xml:space="preserve">
          <source>Why not just use the new pandas &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt;&lt;code&gt;method='multi'&lt;/code&gt;&lt;/a&gt;?</source>
          <target state="translated">新しいパンダ&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt; &lt;code&gt;method='multi'&lt;/code&gt; を&lt;/a&gt;使用しないのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="6b792efb0e17c873405d7c3bd52c451ffd50a79f" translate="yes" xml:space="preserve">
          <source>Writing data from pandas DataFrames to a SQL database is very slow using the built-in &lt;code&gt;to_sql&lt;/code&gt; method, even with the newly introduced &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt;&lt;code&gt;execute_many&lt;/code&gt;&lt;/a&gt; option. For Microsoft SQL Server, a far far faster method is to use the BCP utility provided by Microsoft. This utility is a command line tool that transfers data to/from the database and flat text files.</source>
          <target state="translated">新しく導入された&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method&quot;&gt; &lt;code&gt;execute_many&lt;/code&gt; &lt;/a&gt;オプションを使用しても、組み込みの &lt;code&gt;to_sql&lt;/code&gt; メソッドを使用すると、pandas DataFramesからSQLデータベースへのデータの書き込みが非常に遅くなります。Microsoft SQL Serverの場合、はるかに高速な方法は、Microsoftが提供するBCPユーティリティを使用することです。このユーティリティは、データベースおよびフラットテキストファイルとの間でデータを転送するコマンドラインツールです。</target>
        </trans-unit>
        <trans-unit id="89c5a8e81022b57de232291b5f23612984386cbc" translate="yes" xml:space="preserve">
          <source>bcpandas</source>
          <target state="translated">雀頭</target>
        </trans-unit>
        <trans-unit id="48363b6d6c5d2b3eb4bf1623a23a5ada58598b5a" translate="yes" xml:space="preserve">
          <source>bcpy</source>
          <target state="translated">ブイシーピー</target>
        </trans-unit>
        <trans-unit id="e19cc09f0d7a61b0d1fb50cd0869a44f3809c507" translate="yes" xml:space="preserve">
          <source>built with the help of &lt;a href=&quot;https://www.tablesgenerator.com/markdown_tables#&quot;&gt;https://www.tablesgenerator.com/markdown_tables#&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;https://gist.github.com/rxaviers/7360908&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.tablesgenerator.com/markdown_tables#&quot;&gt;https://www.tablesgenerator.com/markdown_tables#&lt;/a&gt;および&lt;a href=&quot;https://gist.github.com/rxaviers/7360908&quot;&gt;https://gist.github.com/rxaviers/7360908の&lt;/a&gt;助けを借りて構築</target>
        </trans-unit>
        <trans-unit id="fc32cc01476fe016f2f60d0a6131db73c31b390a" translate="yes" xml:space="preserve">
          <source>docker-py (for controlling Docker)</source>
          <target state="translated">docker-py</target>
        </trans-unit>
        <trans-unit id="ed4b436c75459c858b3198e9e021f32cfa7ec531" translate="yes" xml:space="preserve">
          <source>hypothesis</source>
          <target state="translated">かせつ</target>
        </trans-unit>
        <trans-unit id="0eaa389e1fdb3a1917c0f987514bd561be5718ee" translate="yes" xml:space="preserve">
          <source>pytest</source>
          <target state="translated">パイテスト</target>
        </trans-unit>
        <trans-unit id="f15272625459b266aacc0426b2b7f797e3be63a1" translate="yes" xml:space="preserve">
          <source>pytest-cov (coverage.py)</source>
          <target state="translated">pytest-cov (coverage.py)</target>
        </trans-unit>
        <trans-unit id="929dea4a610a279ad1a08fffdfd589f668b86b08" translate="yes" xml:space="preserve">
          <source>read_sql</source>
          <target state="translated">よみとりすうじゅくろ</target>
        </trans-unit>
        <trans-unit id="49379e60d7f0b5a617ba8fe350d92995b4818b1f" translate="yes" xml:space="preserve">
          <source>to_sql</source>
          <target state="translated">to_sql</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
