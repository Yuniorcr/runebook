<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/avro-to-python/">
    <body>
      <group id="avro-to-python">
        <trans-unit id="b8f8d97b003ec8fa6b504d5653ab2cf34981665d" translate="yes" xml:space="preserve">
          <source>0.3.0 (2020-06-10)</source>
          <target state="translated">0.3.0 (2020-06-10)</target>
        </trans-unit>
        <trans-unit id="d5fd22a1b871bec92e0606b0408c363640291691" translate="yes" xml:space="preserve">
          <source>An example of doing this is the following:</source>
          <target state="translated">これを行う例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="4b7896b4492888507acb3cfda39e57724add92c8" translate="yes" xml:space="preserve">
          <source>By running this, you should be able to pip install the above package you created from the target directory you specified by running:</source>
          <target state="translated">これを実行することで、実行で指定したターゲットディレクトリから上記で作成したパッケージをpipでインストールできるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="83e290dd69e33a5c846e122ff991e1a3a114206a" translate="yes" xml:space="preserve">
          <source>CLI (with &amp;ndash;pip)</source>
          <target state="translated">CLI（&amp;ndash;pipを使用）</target>
        </trans-unit>
        <trans-unit id="08a2edb2ffb2d16e11b0e187e9c669d7e9919762" translate="yes" xml:space="preserve">
          <source>CLI (without &amp;ndash;pip)</source>
          <target state="translated">CLI（&amp;ndash;pipなし）</target>
        </trans-unit>
        <trans-unit id="8405e3a887ebef87e619e333fef5104f5678af59" translate="yes" xml:space="preserve">
          <source>Clone the public repository:</source>
          <target state="translated">公開リポジトリをクローンします。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">ドキュメント</target>
        </trans-unit>
        <trans-unit id="bb7b013b023af31cdc1a0723f596e172a29e332f" translate="yes" xml:space="preserve">
          <source>Documentation: &lt;a href=&quot;https://avro-to-python.readthedocs.io&quot;&gt;https://avro-to-python.readthedocs.io&lt;/a&gt;.</source>
          <target state="translated">ドキュメント：&lt;a href=&quot;https://avro-to-python.readthedocs.io&quot;&gt;https&lt;/a&gt; : //avro-to-python.readthedocs.io。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="410b1bc76dba71bbf901eb998f9234cacca7f35e" translate="yes" xml:space="preserve">
          <source>First release on PyPI.</source>
          <target state="translated">PyPIで初公開。</target>
        </trans-unit>
        <trans-unit id="df6b6a6d5f87ba9e109c6470aff355f1be2801f6" translate="yes" xml:space="preserve">
          <source>Free software: MIT license</source>
          <target state="translated">フリーソフトウェア:MITライセンス</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">歴史</target>
        </trans-unit>
        <trans-unit id="4d35ecf497e70c04c72bd481cedbd3ce624fa6ff" translate="yes" xml:space="preserve">
          <source>If you run the above on a valid avro avsc file, you should then be able to import them as you would in the avro idl namespace Here is an example of a single avsc record from the namespace: &lt;em&gt;name.space&lt;/em&gt; and name: &lt;em&gt;RecordClass&lt;/em&gt;:</source>
          <target state="translated">有効なavro avscファイルで上記を実行すると、avro idl名前空間と同じようにそれらをインポートできるはずです。次に、名前空間からの単一のavscレコードの例を示します&lt;em&gt;。name.space&lt;/em&gt;およびname：&lt;em&gt;RecordClass&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="5316901b5d4718c01e566c0b79df93450abd0392" translate="yes" xml:space="preserve">
          <source>Install From Source ()</source>
          <target state="translated">ソースからインストール</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="6a0931475db272316e97214da352625769ee7a8b" translate="yes" xml:space="preserve">
          <source>Majority of the use of avro-to-python is assumed to be used as a cli, but you can still import and use the python classes under the hood as well.</source>
          <target state="translated">avro-to-pythonの主な利用方法はクリとしての利用を前提としていますが、フードの下にあるpythonのクラスをインポートして利用することも可能です。</target>
        </trans-unit>
        <trans-unit id="60f4bf9b7c3c73e75ec30a6175ceee397861ca0b" translate="yes" xml:space="preserve">
          <source>Now that you have the package installed, you can import it by it&amp;rsquo;s package name and namespace. Here is the same example of the same avsc from above, only with a pip package of &lt;em&gt;test_avro&lt;/em&gt;:</source>
          <target state="translated">パッケージがインストールされたので、パッケージ名と名前空間を指定してインポートできます。test_avroのpipパッケージを&lt;em&gt;使用&lt;/em&gt;した場合のみ、上記の同じavscの同じ例を次に示します。</target>
        </trans-unit>
        <trans-unit id="5fb713beecc31c010882ea7f44d850f273f0e46c" translate="yes" xml:space="preserve">
          <source>Once you have a copy of the source, you can install it with:</source>
          <target state="translated">ソースのコピーを入手したら、それを使ってインストールします。</target>
        </trans-unit>
        <trans-unit id="2c8c11100391fda1da34f9330f60442bc0cd3710" translate="yes" xml:space="preserve">
          <source>Pip install (recommended)</source>
          <target state="translated">ピップ設置(推奨</target>
        </trans-unit>
        <trans-unit id="ac5bbe8292ed1b69e0f95e5bdaa035569a295fd7" translate="yes" xml:space="preserve">
          <source>Reader</source>
          <target state="translated">読者</target>
        </trans-unit>
        <trans-unit id="8119e7f319c9927b2cee6e398f0a78babf7eebdc" translate="yes" xml:space="preserve">
          <source>Roadmap</source>
          <target state="translated">ロードマップ</target>
        </trans-unit>
        <trans-unit id="6abc8b6f4c30bce45b479fbb6d843c43a63b54bd" translate="yes" xml:space="preserve">
          <source>The above will compile the avsc files and convert the to python classes found in [path_to_target_directory]</source>
          <target state="translated">上記は avsc ファイルをコンパイルして [path_to_target_directory]にある python クラスに変換します。</target>
        </trans-unit>
        <trans-unit id="380a98795f81c8ab00dc5a197637937264fca797" translate="yes" xml:space="preserve">
          <source>The sources for avro-to-python can be downloaded source as well.</source>
          <target state="translated">avro-to-python のソースもダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="0e78a262bd84a798e79c9d1a241e994bdaeb09c4" translate="yes" xml:space="preserve">
          <source>To install avro-to-python, run this command in your terminal:</source>
          <target state="translated">avro-to-python をインストールするには、ターミナルでこのコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="b22fad5affae2c30e5c729869cc5cce5d7d994c1" translate="yes" xml:space="preserve">
          <source>To use the cli, here is the available cli commands:</source>
          <target state="translated">クリを使用するには、以下のクリコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">ライター</target>
        </trans-unit>
        <trans-unit id="19471d6bc0681cf3ea259daf4337e159cfeb8d40" translate="yes" xml:space="preserve">
          <source>You can also choose to make compiled avro packages &lt;strong&gt;*pip installable*&lt;/strong&gt; by adding the &amp;ldquo;&amp;ndash;pip&amp;rdquo; flags. An example of this is the following:
.. code-block:: bash</source>
          <target state="translated">「&amp;ndash;pip」フラグを追加して、コンパイルされたavroパッケージを&lt;strong&gt;* pipインストール可能*に&lt;/strong&gt;することもできます。この例は次のとおりです。.. code-block :: bash</target>
        </trans-unit>
        <trans-unit id="82518c045280ef8e30b8225488d37fce8febd6c8" translate="yes" xml:space="preserve">
          <source>You can also use the reader and writer packages in avro-to-python as you would any other python package. Avro to python is split between a &lt;em&gt;reader&lt;/em&gt; and &lt;em&gt;writer&lt;/em&gt; classes. avro-to-python treates namespaces as acyclic trees and uses depth first search to ensure no duplication or namespace collisions on read and write. An example useage is below:</source>
          <target state="translated">他のpythonパッケージと同じように、avro-to-pythonでreaderおよびwriterパッケージを使用することもできます。Avroからpythonは、&lt;em&gt;リーダー&lt;/em&gt;クラスと&lt;em&gt;ライター&lt;/em&gt;クラスに分かれています。avro-to-pythonは名前空間を非循環ツリーとして扱い、深さ優先検索を使用して、読み取りと書き込みで重複や名前空間の衝突がないことを確認します。使用例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="41266e454f6a74daba20b9a09d88c4698355624f" translate="yes" xml:space="preserve">
          <source>[ ] Add better &amp;ndash;help documentation</source>
          <target state="translated">[]より良い&amp;ndash;helpドキュメントを追加する</target>
        </trans-unit>
        <trans-unit id="0e2e2f2d889ea55a9c9bde12de8ffffc1c3d36ae" translate="yes" xml:space="preserve">
          <source>[ ] Document cli</source>
          <target state="translated">[]ドキュメントcli</target>
        </trans-unit>
        <trans-unit id="cfd6fcf1549220b1ee3eb3bbaa31949299367595" translate="yes" xml:space="preserve">
          <source>[ ] Document reader class</source>
          <target state="translated">[]ドキュメントリーダークラス</target>
        </trans-unit>
        <trans-unit id="4b7277c51a71cc09859f0c950d4a5637c03fc737" translate="yes" xml:space="preserve">
          <source>[ ] Document writer class</source>
          <target state="translated">[]ドキュメントライタークラス</target>
        </trans-unit>
        <trans-unit id="4cedba1cb7284a0eea8ab8f13b44274176030bc5" translate="yes" xml:space="preserve">
          <source>[ ] Logical Types (Currently just converts to primitive types)</source>
          <target state="translated">[]論理型（現在はプリミティブ型に変換されるだけ）</target>
        </trans-unit>
        <trans-unit id="9ea2fd1960e5fe38d84ea8475eb5086dc6efe8c8" translate="yes" xml:space="preserve">
          <source>[ ] Logical Types Schema (Currently just converts to primitive types)</source>
          <target state="translated">[]論理型スキーマ（現在、プリミティブ型に変換されるだけです）</target>
        </trans-unit>
        <trans-unit id="6f75e258521758e1d4aaf565efbfac5055243494" translate="yes" xml:space="preserve">
          <source>[X] Add configs to pip install package</source>
          <target state="translated">[X] pipインストールパッケージに構成を追加する</target>
        </trans-unit>
        <trans-unit id="95d3de5770dac6f32494d89edcc4b6932eeff8b2" translate="yes" xml:space="preserve">
          <source>[X] Add pip install option (would include all files to pip install compiled package)</source>
          <target state="translated">[X] pipインストールオプションを追加します（pipインストールコンパイル済みパッケージにすべてのファイルが含まれます）</target>
        </trans-unit>
        <trans-unit id="fa98af2b6d5134162c76fea37cb072009ec15644" translate="yes" xml:space="preserve">
          <source>[X] Array Types</source>
          <target state="translated">[X]配列タイプ</target>
        </trans-unit>
        <trans-unit id="6f0eeaa34f275d00d63f587809cc48d5a441abe7" translate="yes" xml:space="preserve">
          <source>[X] Array Types Schema</source>
          <target state="translated">[X]配列型スキーマ</target>
        </trans-unit>
        <trans-unit id="29b13273c1fea7ac89784ed08f6c551d1b64501f" translate="yes" xml:space="preserve">
          <source>[X] Base Enum Schema</source>
          <target state="translated">[X]基本列挙型スキーマ</target>
        </trans-unit>
        <trans-unit id="86f71e981b93bca62a820927bc3ea934cf5415b6" translate="yes" xml:space="preserve">
          <source>[X] Base Record Schema</source>
          <target state="translated">[X]ベースレコードスキーマ</target>
        </trans-unit>
        <trans-unit id="3c28b58e34ca3b274faba6e65b4bb0b8bf2b4af8" translate="yes" xml:space="preserve">
          <source>[X] Base Schema Writer</source>
          <target state="translated">[X]基本スキーマライター</target>
        </trans-unit>
        <trans-unit id="df720006d4c28c0e72029ef546e38e72eaf08bc9" translate="yes" xml:space="preserve">
          <source>[X] Create Namespace Trees on nested namespaces</source>
          <target state="translated">[X]ネストされた名前空間に名前空間ツリーを作成する</target>
        </trans-unit>
        <trans-unit id="ac8b25bbc50dc602c83ef34d8b40e69cea6c9f85" translate="yes" xml:space="preserve">
          <source>[X] Map Types</source>
          <target state="translated">[X]マップタイプ</target>
        </trans-unit>
        <trans-unit id="c744754935d6d51d81e5d9197ee000eee757dc93" translate="yes" xml:space="preserve">
          <source>[X] Primitive Types Schema</source>
          <target state="translated">[X]プリミティブ型スキーマ</target>
        </trans-unit>
        <trans-unit id="7242b3837467888d0c27a29d5f70644bdbf0a29c" translate="yes" xml:space="preserve">
          <source>[X] Primitive types</source>
          <target state="translated">[X]プリミティブタイプ</target>
        </trans-unit>
        <trans-unit id="c0eb7aa32e27e73c836cdca1c2193baaf01fc274" translate="yes" xml:space="preserve">
          <source>[X] Read Record and Enum File</source>
          <target state="translated">[X]レコードと列挙ファイルの読み取り</target>
        </trans-unit>
        <trans-unit id="f27f8441e2157ce57823e246028cc7d46bf7d310" translate="yes" xml:space="preserve">
          <source>[X] References to other files</source>
          <target state="translated">[X]他のファイルへの参照</target>
        </trans-unit>
        <trans-unit id="f931cc77a75223e5bcb08bd7d8b14bb22fed5a10" translate="yes" xml:space="preserve">
          <source>[X] Union Types Schema</source>
          <target state="translated">[X]ユニオンタイプスキーマ</target>
        </trans-unit>
        <trans-unit id="a0d77716fc0dbbc5c835962dbe4a8c316223b59a" translate="yes" xml:space="preserve">
          <source>[X] Union types</source>
          <target state="translated">[X]ユニオンタイプ</target>
        </trans-unit>
        <trans-unit id="f897256f5ee88e9cc0d3b7ff2be4f92874076b34" translate="yes" xml:space="preserve">
          <source>[X] Wrap Writer and Reader into one cli commmit</source>
          <target state="translated">[X]ライターとリーダーを1つのcliコミットにまとめる</target>
        </trans-unit>
        <trans-unit id="6ca9e188b636a8c8a4d804ebe642abba30903c62" translate="yes" xml:space="preserve">
          <source>avro-to-python</source>
          <target state="translated">アブロツーパイソン</target>
        </trans-unit>
        <trans-unit id="7523d8b744059d7b032728bcabf77f2e94cb6dc7" translate="yes" xml:space="preserve">
          <source>avro-to-python [path_to_source_avsc_files] [path_to_target_directory] &amp;ndash;pip test_avro</source>
          <target state="translated">avro-to-python [path_to_source_avsc_files] [path_to_target_directory] ​​&amp;ndash;pip test_avro</target>
        </trans-unit>
        <trans-unit id="2670fc69386c7b76bdae58cf013682c6a532a445" translate="yes" xml:space="preserve">
          <source>avro-to-python in a Script</source>
          <target state="translated">スクリプト内のavro-to-python</target>
        </trans-unit>
        <trans-unit id="ec74bc61c069dca02a9918267dc76fee705e9fe2" translate="yes" xml:space="preserve">
          <source>avro-to-python is a light tool for compiling avro schema files (.avsc) to python classes making using avro schemata easy.</source>
          <target state="translated">avro-to-python は avro スキーマファイル (.avsc)を python クラスにコンパイルして avro スキーマを簡単に使用できるようにするための軽快なツールです。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">或いは</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
