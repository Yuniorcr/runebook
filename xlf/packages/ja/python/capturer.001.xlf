<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/capturer/">
    <body>
      <group id="capturer">
        <trans-unit id="067d37005e41e9e28425c1041aba52aa775ce3db" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2020 Peter Odding.</source>
          <target state="translated">&amp;copy;2020 Peter Odding。</target>
        </trans-unit>
        <trans-unit id="96a313b29626f9c796fd0c58c93ed79675febfc2" translate="yes" xml:space="preserve">
          <source>A big thanks goes out to the &lt;a href=&quot;https://pypi.org/project/pytest&quot;&gt;pytest&lt;/a&gt; developers because pytest&amp;rsquo;s mechanism for
capturing the output of subprocesses provided inspiration for the</source>
          <target state="translated">サブプロセスの出力をキャプチャするためのpytestのメカニズムがインスピレーションを与えたので、&lt;a href=&quot;https://pypi.org/project/pytest&quot;&gt;pytest&lt;/a&gt;開発者に大きな感謝を捧げます。</target>
        </trans-unit>
        <trans-unit id="5067ec6ec3c8bc695f33d7314315ee45d6022ae2" translate="yes" xml:space="preserve">
          <source>All output captured is relayed on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; stream by default, so capturing
changes the semantics of your programs. How much this matters obviously
depends on your use case. For the use cases that triggered me to create</source>
          <target state="translated">キャプチャされたすべての出力はデフォルトで&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;ストリームでリレーされるため、キャプチャするとプログラムのセマンティクスが変更されます。これがどれほど重要かは、明らかにユースケースに依存します。作成のきっかけとなったユースケースについて</target>
        </trans-unit>
        <trans-unit id="8c94fc11e4f1956615d07ca478e8a24defe94515" translate="yes" xml:space="preserve">
          <source>CaptureOutput</source>
          <target state="translated">キャプチャ出力</target>
        </trans-unit>
        <trans-unit id="0173862a56b8960fa3799085a3af62407f739de2" translate="yes" xml:space="preserve">
          <source>CaptureOutput(merged=False)</source>
          <target state="translated">CaptureOutput(merged=False)</target>
        </trans-unit>
        <trans-unit id="b37456c4530be810dc040f50da72eda09addfb0a" translate="yes" xml:space="preserve">
          <source>Contact</source>
          <target state="translated">連絡先</target>
        </trans-unit>
        <trans-unit id="f26d7814fc08c5accfe0925c334424a0f5185a51" translate="yes" xml:space="preserve">
          <source>Design choices</source>
          <target state="translated">デザインの選択</target>
        </trans-unit>
        <trans-unit id="ce1ec03c06db3b1cd681378b14d3d8988481cd83" translate="yes" xml:space="preserve">
          <source>Easily capture stdout/stderr of the current process and subprocesses</source>
          <target state="translated">現在のプロセスとサブプロセスの標準出力/標準出力を簡単にキャプチャします。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="6d477e9f192964a9fe4e48582901c3444ead950a" translate="yes" xml:space="preserve">
          <source>I say experimental because this method of capturing can unintentionally
change the order in which captured output is emitted, in order to avoid
interleaving output emitted on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; streams (which would
most likely result in incomprehensible output). Basically output is relayed
on each stream separately after each line break. This means interactive
prompts that block on reading from standard input without emitting a line
break won&amp;rsquo;t show up (until it&amp;rsquo;s too late ;-).</source>
          <target state="translated">このキャプチャ方法では、&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt;ストリームと&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;ストリームで出力がインターリーブされることを回避するために、キャプチャされた出力が生成される順序が意図せずに変更される可能性があるため、実験的と言います（これは、理解できない出力になる可能性が最も高い）。基本的に、出力は改行ごとに各ストリームで個別に中継されます。これは、改行を出さずに標準入力からの読み取りをブロックするインタラクティブなプロンプトが表示されないことを意味します（手遅れになるまで;-)。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="47f9a8b6f738de18de4d17340d61c56f28aa624e" translate="yes" xml:space="preserve">
          <source>Intercepts writes to low level file descriptors</source>
          <target state="translated">低レベルのファイル記述子への書き込みを阻止します。</target>
        </trans-unit>
        <trans-unit id="62de9052cf06aea7ff2b5663d068e174e3368ec8" translate="yes" xml:space="preserve">
          <source>Libraries like &lt;a href=&quot;https://pypi.org/project/capture&quot;&gt;capture&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/iocapture&quot;&gt;iocapture&lt;/a&gt; change Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stdout&quot;&gt;sys.stdout&lt;/a&gt; and
&lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stderr&quot;&gt;sys.stderr&lt;/a&gt; file objects to fake file objects (using &lt;a href=&quot;https://docs.python.org/2/library/stringio.html&quot;&gt;StringIO&lt;/a&gt;). This enables
capturing of (most) output written to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; streams from the
same Python process, however any output from subprocesses is unaffected by the
redirection and not captured.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/capture&quot;&gt;capture&lt;/a&gt;や&lt;a href=&quot;https://pypi.org/project/iocapture&quot;&gt;iocapture&lt;/a&gt;などのライブラリは、Pythonの&lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stdout&quot;&gt;sys.stdout&lt;/a&gt;および &lt;a href=&quot;https://docs.python.org/2/library/sys.html#sys.stderr&quot;&gt;sys.stderr&lt;/a&gt;ファイルオブジェクトを偽のファイルオブジェクトに変更します（&lt;a href=&quot;https://docs.python.org/2/library/stringio.html&quot;&gt;StringIO&lt;/a&gt;を使用）。これにより、同じPythonプロセスから&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt;および&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;ストリームに書き込まれた（ほとんどの）出力のキャプチャが可能になりますが、サブプロセスからの出力はリダイレクトの影響を受けず、キャプチャされません。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">ライセンス</target>
        </trans-unit>
        <trans-unit id="73457a5e828fb3b721e39222bf814b197e899a6a" translate="yes" xml:space="preserve">
          <source>Long running operations can provide the operator with real time feedback by
emitting output on the terminal. This sounds obvious (and it is!) but it is
non-trivial to implement (an understatement :-) when you &lt;em&gt;also&lt;/em&gt; want to
capture the output.</source>
          <target state="translated">長時間のオペレーションでは、ターミナルに出力を出力することにより、オペレーターにリアルタイムのフィードバックを提供できます。これは明白に聞こえます（実際のところそうです）が、出力&lt;em&gt;も&lt;/em&gt;キャプチャしたい場合は（控えめに言って:-)実装するのは簡単ではありません。</target>
        </trans-unit>
        <trans-unit id="5c38227657096bc714717fbafdc49d643ed3e74c" translate="yes" xml:space="preserve">
          <source>Note that the first call to &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_bytes&quot;&gt;get_bytes()&lt;/a&gt;, &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_lines&quot;&gt;get_lines()&lt;/a&gt; or &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_text&quot;&gt;get_text()&lt;/a&gt;
will stop the capturing of output by default. This is intended as a sane
default to prevent partial reads (which can be confusing as hell when you don&amp;rsquo;t
have experience with them). So we could have simply used</source>
          <target state="translated">&lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_bytes&quot;&gt;get_bytes（）&lt;/a&gt;、&lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_lines&quot;&gt;get_lines（）&lt;/a&gt;または&lt;a href=&quot;https://capturer.readthedocs.io/en/latest/api.html#capturer.CaptureOutput.get_text&quot;&gt;get_text（）&lt;/a&gt;への最初の呼び出し は、デフォルトで出力のキャプチャを停止することに注意してください。これは、部分的な読み取りを回避するための健全なデフォルトとして意図されています（これは、それらの経験がないと、地獄のように混乱する可能性があります）。だから私たちは単純に使うことができたでしょう</target>
        </trans-unit>
        <trans-unit id="a42b6f37f68ce916c7654d2325495e2ffc917711" translate="yes" xml:space="preserve">
          <source>Programs like &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Privacy_Guard&quot;&gt;gpg&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;ssh&lt;/a&gt; that use interactive password prompts will render
their password prompt on the terminal in real time. This avoids the awkward
interaction where a password prompt is silenced but the program still hangs,
waiting for input on &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29&quot;&gt;stdin&lt;/a&gt;.</source>
          <target state="translated">インタラクティブなパスワードプロンプトを使用する&lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Privacy_Guard&quot;&gt;gpg&lt;/a&gt;や&lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;ssh&lt;/a&gt;などのプログラムは、リアルタイムで端末にパスワードプロンプトを表示します。これにより、パスワードプロンプトが消音されてもプログラムが停止し、&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29&quot;&gt;stdin&lt;/a&gt;での入力を待つという厄介なやり取りが回避されます。</target>
        </trans-unit>
        <trans-unit id="d606f457b941c69624384d635c6373c9af90939d" translate="yes" xml:space="preserve">
          <source>Relays output to the terminal in real time</source>
          <target state="translated">リアルタイムで端子にリレー出力</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">ステータス</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="0091e40260b7b58d6e652641475f696d15bcd706" translate="yes" xml:space="preserve">
          <source>The capturer package makes it easy to capture the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; streams
of the current process &lt;em&gt;and subprocesses&lt;/em&gt;. Output can be relayed to the
terminal in real time but is also available to the Python program for
additional processing. It&amp;rsquo;s currently tested on cPython 2.7, 3.5+ and PyPy
(2.7). It&amp;rsquo;s tested on Linux and Mac OS X and may work on other unixes but
definitely won&amp;rsquo;t work on Windows (due to the use of the platform dependent &lt;a href=&quot;https://docs.python.org/2/library/pty.html&quot;&gt;pty&lt;/a&gt;
module). For usage instructions please refer to the &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">キャプチャパッケージを使用すると、現在のプロセス&lt;em&gt;とサブプロセス&lt;/em&gt;の&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt;および&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;ストリームを簡単にキャプチャできます。出力はリアルタイムで端末に中継できますが、追加の処理のためにPythonプログラムでも使用できます。現在、cPython 2.7、3.5以降、PyPy（2.7）でテストされています。 LinuxとMac OS Xでテストされており、他のUNIXでは動作する可能性がありますが、Windowsでは動作しません（プラットフォーム依存の&lt;a href=&quot;https://docs.python.org/2/library/pty.html&quot;&gt;pty&lt;/a&gt; モジュールを使用しているため）。使用方法については、&lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="467730d33ffe3b679f8d21fea344daddf7fca4fb" translate="yes" xml:space="preserve">
          <source>The easiest way to capture output is to use a context manager:</source>
          <target state="translated">出力をキャプチャする最も簡単な方法は、コンテキストマネージャを使用することです。</target>
        </trans-unit>
        <trans-unit id="4e651dc5449474dd97ef6c540edb40ca90313c55" translate="yes" xml:space="preserve">
          <source>The latest version of</source>
          <target state="translated">の最新版です。</target>
        </trans-unit>
        <trans-unit id="b909d18007f17d144eb5a6414f16718e1b9f9936" translate="yes" xml:space="preserve">
          <source>The main use case of</source>
          <target state="translated">の主な使用例</target>
        </trans-unit>
        <trans-unit id="96f334c1550fc35ac7537f7405268afe69e0c993" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty()&lt;/a&gt; means you need to be running in a UNIX like
environment for</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty（）&lt;/a&gt;の使用は、UNIXのような環境で実行する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="29ae03f183f2d9ce11ef204b3e59748bb4ff43f7" translate="yes" xml:space="preserve">
          <source>The use of a context manager (&lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#the-with-statement&quot;&gt;the with statement&lt;/a&gt;) ensures that output
capturing is enabled and disabled at the appropriate time, regardless of
whether exceptions interrupt the normal flow of processing.</source>
          <target state="translated">コンテキストマネージャー（&lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#the-with-statement&quot;&gt;withステートメント&lt;/a&gt;）を使用すると、例外が通常の処理フローを中断するかどうかに関係なく、適切なタイミングで出力キャプチャが有効または無効になります。</target>
        </trans-unit>
        <trans-unit id="b0b1b7db39c535f73ba96f47cf4c93cde41211e0" translate="yes" xml:space="preserve">
          <source>There are existing solutions out there to capture the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;
streams of (Python) processes. The</source>
          <target state="translated">（Python）プロセスの&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt;および&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt;ストリームをキャプチャするための既存のソリューションがあります。の</target>
        </trans-unit>
        <trans-unit id="bf16a5a2c76cab9516867262b98d421ead9a3db9" translate="yes" xml:space="preserve">
          <source>There is experimental support for capturing &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderr&lt;/a&gt; separately
and relaying captured output to the appropriate original stream. Basically
you call</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29&quot;&gt;stdout&lt;/a&gt;と&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29&quot;&gt;stderrを&lt;/a&gt;別々にキャプチャし、キャプチャされた出力を適切な元のストリームに中継する実験的なサポートがあります。基本的にあなたは電話します</target>
        </trans-unit>
        <trans-unit id="413e33ea01e94adb5a7994e3b126429dad6e0aa0" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s actually a multitude of ways to install Python packages (e.g. the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0370/&quot;&gt;per
user site-packages directory&lt;/a&gt;, &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtual environments&lt;/a&gt; or just installing
system wide) and I have no intention of getting into that discussion here, so
if this intimidates you then read up on your options before returning to these
instructions ;-).</source>
          <target state="translated">実際にはPythonパッケージをインストールする方法は多数あり（たとえば、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0370/&quot;&gt;ユーザーごとのサイトパッケージディレクトリ&lt;/a&gt;、&lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;仮想環境、&lt;/a&gt;またはシステム全体にインストールするなど）、ここではその説明に入るつもりはありません。これらの指示に戻る前のオプション;-)。</target>
        </trans-unit>
        <trans-unit id="f27a0dc4aa2c3bb4dbe16bb6623bff3027267eb7" translate="yes" xml:space="preserve">
          <source>This software is licensed under the &lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT license&lt;/a&gt;.</source>
          <target state="translated">このソフトウェアは&lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT&lt;/a&gt;ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="7aa3d371321a712db54ce3177e0c62c338d94f28" translate="yes" xml:space="preserve">
          <source>Uses a pseudo terminal to emulate a real terminal</source>
          <target state="translated">擬似端末を使用して実際の端末をエミュレートします。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="ecf5c466c5c9de7de63a537c3e693212e007e15f" translate="yes" xml:space="preserve">
          <source>and then you use the</source>
          <target state="translated">を使用しています。</target>
        </trans-unit>
        <trans-unit id="cf4966c8256316dfb7378caa6748113487e2e9e0" translate="yes" xml:space="preserve">
          <source>attributes of the</source>
          <target state="translated">の属性</target>
        </trans-unit>
        <trans-unit id="c1364357c4c9bf705a9cee2f161afe63cf37ebc5" translate="yes" xml:space="preserve">
          <source>capturer</source>
          <target state="translated">捕縛者</target>
        </trans-unit>
        <trans-unit id="280f73b29ad44c388ef792f1064b14b963b572db" translate="yes" xml:space="preserve">
          <source>is available on &lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt; and &lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHub&lt;/a&gt;. The
documentation is hosted on &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;Read the Docs&lt;/a&gt; and includes a &lt;a href=&quot;https://capturer.readthedocs.io/en/latest/changelog.html&quot;&gt;changelog&lt;/a&gt;. For bug
reports please create an issue on &lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHub&lt;/a&gt;. If you have questions, suggestions,
etc. feel free to send me an e-mail at &lt;a href=&quot;mailto:peter%40peterodding.com&quot;&gt;peter@peterodding.com&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt;と&lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHubで&lt;/a&gt;利用できます。ドキュメントは&lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;Read the Docsで&lt;/a&gt;ホストされ、変更&lt;a href=&quot;https://capturer.readthedocs.io/en/latest/changelog.html&quot;&gt;ログが&lt;/a&gt;含まれています。バグレポートについては、&lt;a href=&quot;https://github.com/xolox/python-capturer&quot;&gt;GitHubで&lt;/a&gt;問題を作成してください。ご質問、ご提案など&lt;a href=&quot;mailto:peter%40peterodding.com&quot;&gt;ござい&lt;/a&gt;ましたら、peter @ peterodding.comまでメールをお送りください。</target>
        </trans-unit>
        <trans-unit id="cc328241821ec81a0bd727eb8307ec218e3aca67" translate="yes" xml:space="preserve">
          <source>is to capture all output of a snippet of Python
code (including any output by subprocesses) but also relay the output to the
terminal in real time. This has a couple of useful properties:</source>
          <target state="translated">は、Python コードのスニペットのすべての出力(サブプロセスによる出力を含む)をキャプチャするだけでなく、その出力をリアルタイムでターミナルに中継します。これにはいくつかの便利な特性があります。</target>
        </trans-unit>
        <trans-unit id="8af0779f22f7e46b85797dd52e0b3e50d1509da3" translate="yes" xml:space="preserve">
          <source>it doesn&amp;rsquo;t matter, which explains why this is the default mode.</source>
          <target state="translated">これはデフォルトのモードである理由を説明する重要ではありません。</target>
        </trans-unit>
        <trans-unit id="34fb25f83b43204dad2ad028bbed94e517200a0a" translate="yes" xml:space="preserve">
          <source>keyword argument
that can be used to disable this behavior (please refer to the &lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;documentation&lt;/a&gt;
for details).</source>
          <target state="translated">この動作を無効にするために使用できるキーワード引数（詳細については、&lt;a href=&quot;https://capturer.readthedocs.io&quot;&gt;ドキュメント&lt;/a&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="830979b8b59a226d370a424fcaf263da13f1ff3c" translate="yes" xml:space="preserve">
          <source>object to get at the output
captured on each stream.</source>
          <target state="translated">オブジェクトを使用して、各ストリームでキャプチャされた出力を取得します。</target>
        </trans-unit>
        <trans-unit id="1bf789c5f353e49a156b15a628b99a02803f754f" translate="yes" xml:space="preserve">
          <source>package instead intercepts writes to low level file descriptors
(similar to and inspired by &lt;a href=&quot;https://pytest.org/latest/capture.html&quot;&gt;how pytest does it&lt;/a&gt;). This enables capturing of
output written to the standard output and error streams from the same Python
process as well as any subprocesses.</source>
          <target state="translated">代わりに、パッケージは低レベルのファイル記述子への書き込みをインターセプトします（&lt;a href=&quot;https://pytest.org/latest/capture.html&quot;&gt;pytestが行う方法に&lt;/a&gt;似ており、それに触発されています）。これにより、同じPythonプロセスとサブプロセスからの標準出力とエラーストリームに書き込まれた出力をキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="a17fb22aac4e90f542768571c3097ae532fc9bea" translate="yes" xml:space="preserve">
          <source>package is available on &lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt; which means installation should be
as simple as:</source>
          <target state="translated">パッケージは&lt;a href=&quot;https://pypi.org/project/capturer&quot;&gt;PyPI&lt;/a&gt;で入手できます。つまり、インストールは次のように簡単である必要があります。</target>
        </trans-unit>
        <trans-unit id="56dfcefbd3bce0e406f073d7929c42b9ae1edce1" translate="yes" xml:space="preserve">
          <source>package uses a pseudo terminal created using &lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty()&lt;/a&gt; to
capture output. This means subprocesses will use ANSI escape sequences because
they think they&amp;rsquo;re connected to a terminal. In the current implementation you
can&amp;rsquo;t opt out of this, but feel free to submit a feature request to change this
:-). This does have some drawbacks:</source>
          <target state="translated">パッケージは、&lt;a href=&quot;https://docs.python.org/2/library/pty.html#pty.openpty&quot;&gt;pty.openpty（）&lt;/a&gt;を使用して作成された疑似ターミナルを使用して出力をキャプチャします。つまり、サブプロセスは端末に接続されていると考えているため、ANSIエスケープシーケンスを使用します。現在の実装ではこれをオプトアウトすることはできませんが、これを変更する機能リクエストを送信してください:-)。これにはいくつかの欠点があります：</target>
        </trans-unit>
        <trans-unit id="6825c88f8c8676d5e6d8f79c1357352c45ed8741" translate="yes" xml:space="preserve">
          <source>package was created for a very
specific use case that wasn&amp;rsquo;t catered for by existing solutions (that I could
find). This section documents the design choices that guided the development of
the</source>
          <target state="translated">パッケージは、既存のソリューション（私が見つけることができた）では対応できなかった非常に特定のユースケース用に作成されました。このセクションでは、開発の指針となった設計の選択について説明します</target>
        </trans-unit>
        <trans-unit id="599fe20e7281222b71474c879769a9e94f602fea" translate="yes" xml:space="preserve">
          <source>package was developed as a proof of concept over the course of a
weekend, because I was curious to see if it could be done (reliably). After a
weekend of extensive testing it seems to work fairly well so I&amp;rsquo;m publishing the
initial release as version 1.0, however I still consider this a proof of
concept because I don&amp;rsquo;t have extensive &amp;ldquo;production&amp;rdquo; experience using it yet.
Here&amp;rsquo;s hoping it works as well in practice as it did during my testing :-).</source>
          <target state="translated">パッケージは、（確実に）実行できるかどうかを知りたくて、週末の間に概念実証として開発されました。週末の広範なテストの後、それはかなりうまくいくようですので、最初のリリースをバージョン1.0として公開しますが、まだこれを使用する広範な「本番」経験がないので、これはまだ概念実証と見なしています。これは私のテスト中にそれが実際にうまくいったことを願っています:-)。</target>
        </trans-unit>
        <trans-unit id="af066bfb6456ec7e023df9ba903d7d0a4c65d9d5" translate="yes" xml:space="preserve">
          <source>package. No code was copied, but both projects are MIT licensed anyway, so it&amp;rsquo;s
not like it&amp;rsquo;s very relevant :-).</source>
          <target state="translated">パッケージ。コードはコピーされませんでしたが、どちらのプロジェクトもMITライセンスが付与されているため、あまり関連性がないようです:-)。</target>
        </trans-unit>
        <trans-unit id="feac2e72858e6aacadfda0ac55b74ac3719313cb" translate="yes" xml:space="preserve">
          <source>package:</source>
          <target state="translated">パッケージを使用しています。</target>
        </trans-unit>
        <trans-unit id="cee9d62e6df8cf072e5ddffcd07319f953cac369" translate="yes" xml:space="preserve">
          <source>partial=True</source>
          <target state="translated">パーシャル=真</target>
        </trans-unit>
        <trans-unit id="6d0d5876e6710ebb4f309b5af01090cb97381d06" translate="yes" xml:space="preserve">
          <source>print</source>
          <target state="translated">刷り込む</target>
        </trans-unit>
        <trans-unit id="351eb7019c1640acf10c265cc31c377fd68443b5" translate="yes" xml:space="preserve">
          <source>stderr</source>
          <target state="translated">標準エラー</target>
        </trans-unit>
        <trans-unit id="476d9ec701e2de6a6c37ab5211117a7cb8333a27" translate="yes" xml:space="preserve">
          <source>stdout</source>
          <target state="translated">標準出力</target>
        </trans-unit>
        <trans-unit id="abf2af82450fe8a25b8fd52be056c75ed0e169dd" translate="yes" xml:space="preserve">
          <source>to show
the results without causing a recursive &amp;ldquo;captured output is printed and then
captured again&amp;rdquo; loop. There&amp;rsquo;s an optional</source>
          <target state="translated">再帰的な「キャプチャされた出力が印刷されてから再度キャプチャされる」ループを引き起こさずに結果を表示する。オプションがあります</target>
        </trans-unit>
        <trans-unit id="7c23946dffb55ffa0ee800ecba4e2d38b3a1d5d6" translate="yes" xml:space="preserve">
          <source>to work (Windows definitely isn&amp;rsquo;t supported).</source>
          <target state="translated">動作します（Windowsは確実にサポートされていません）。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
