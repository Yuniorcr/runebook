<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/lupa/">
    <body>
      <group id="lupa">
        <trans-unit id="3816df72a966910ae40d4ad21b7b7996f5ef6c59" translate="yes" xml:space="preserve">
          <source>(See &lt;a href=&quot;https://www.lua.org/license.html&quot;&gt;https://www.lua.org/license.html&lt;/a&gt;)</source>
          <target state="translated">（&lt;a href=&quot;https://www.lua.org/license.html&quot;&gt;https://www.lua.org/license.htmlを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="1a096a81952a585274115aad57d687236cc427df" translate="yes" xml:space="preserve">
          <source>(length) operator in
Lua and because of the way Lua defines the length of a table.
Remember that unset table indices always return</source>
          <target state="translated">Luaの（長さ）演算子。Luaがテーブルの長さを定義する方法のため。未設定のテーブルインデックスは常に返されることに注意してください</target>
        </trans-unit>
        <trans-unit id="210022c80a64b6e2034834cd87b82664f807dc13" translate="yes" xml:space="preserve">
          <source>(which is the same as</source>
          <target state="translated">（これはと同じです</target>
        </trans-unit>
        <trans-unit id="0391ea51db75d0bd6ee964f4bfd47f28790d7f02" translate="yes" xml:space="preserve">
          <source>) module is available, the
following should work on a Linux system:</source>
          <target state="translated">）モジュールが利用可能である場合、Linuxシステムでは以下が機能するはずです。</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="a2e1b849ab04ec1988656c109c7c0c1ce9b8b4c2" translate="yes" xml:space="preserve">
          <source>, including
indices outside of the table size.  Thus, Lua basically looks for an
index that returns</source>
          <target state="translated">、テーブルサイズ外のインデックスを含みます。したがって、Luaは基本的に次の値を返すインデックスを探します</target>
        </trans-unit>
        <trans-unit id="cdf2c6f9d690cece3c4a853b22243d45400d660a" translate="yes" xml:space="preserve">
          <source>, including
support for library loading</source>
          <target state="translated">、ライブラリの読み込みのサポートを含む</target>
        </trans-unit>
        <trans-unit id="b38bdd8a1d22330f8093477472549e232e41befe" translate="yes" xml:space="preserve">
          <source>, is new in Lupa 1.1 and accepts
any number of mappings and sequences/iterables as arguments.  It collects
all values and key-value pairs and builds a single Lua table from them.
Any keys that appear in multiple mappings get overwritten with their last
value (going from left to right).</source>
          <target state="translated">は、Lupa 1.1の新機能であり、引数として任意の数のマッピングとシーケンス/反復可能オブジェクトを受け入れます。すべての値とキーと値のペアを収集し、それらから単一のLuaテーブルを構築します。複数のマッピングに表示されるキーは、最後の値（左から右へ）で上書きされます。</target>
        </trans-unit>
        <trans-unit id="d1b9016a0f6889f4af8a521386be953948d64826" translate="yes" xml:space="preserve">
          <source>, is still mapped to</source>
          <target state="translated">、はまだマップされています</target>
        </trans-unit>
        <trans-unit id="ffb33a9696c21a19d3110ef2c268262611d3c652" translate="yes" xml:space="preserve">
          <source>, it is
convenient to use the special</source>
          <target state="translated">、スペシャルを使用すると便利です</target>
        </trans-unit>
        <trans-unit id="7950e9dcc49f9e577ea0de597f23cdd9d47ee5e6" translate="yes" xml:space="preserve">
          <source>, iteration now also unpacks tuple
values, including</source>
          <target state="translated">、反復は、以下を含むタプル値もアンパックするようになりました。</target>
        </trans-unit>
        <trans-unit id="f89f12ee3837c8396652834ab0548bf6b7fa633d" translate="yes" xml:space="preserve">
          <source>, making them more straight forward
to handle in Lua code.  This makes the behaviour more consistent, as it
was previously somewhat arbitrary where</source>
          <target state="translated">、Luaコードで処理するのがより簡単になります。これにより、以前はやや恣意的だったため、動作の一貫性が高まります。</target>
        </trans-unit>
        <trans-unit id="38ce5b6044c588055245818cd2bef34339452efb" translate="yes" xml:space="preserve">
          <source>, not to</source>
          <target state="translated">、ではなく</target>
        </trans-unit>
        <trans-unit id="5586bef7e1124f0b327897015fec89dd3e8658ed" translate="yes" xml:space="preserve">
          <source>, which would terminate the iteration</source>
          <target state="translated">、反復を終了します</target>
        </trans-unit>
        <trans-unit id="8787f2a16cfd70b639027545d8c85f06466ff798" translate="yes" xml:space="preserve">
          <source>--no-luajit</source>
          <target state="translated">--no-luajit</target>
        </trans-unit>
        <trans-unit id="2409dbb844cb1f81941d2ceb0136d6ea85918bbe" translate="yes" xml:space="preserve">
          <source>--with-cython</source>
          <target state="translated">--with-cython</target>
        </trans-unit>
        <trans-unit id="d934222f835d43f6059a3543eae9ecf629ac1aef" translate="yes" xml:space="preserve">
          <source>.  Example:</source>
          <target state="translated">。例：</target>
        </trans-unit>
        <trans-unit id="f863c23a93501fd973cdcb1d746f38bd8aa20cad" translate="yes" xml:space="preserve">
          <source>.  If</source>
          <target state="translated">。もし</target>
        </trans-unit>
        <trans-unit id="7bb62248b63bd77678af425cfd430dbcf6cc631e" translate="yes" xml:space="preserve">
          <source>.  Importing the</source>
          <target state="translated">。のインポート</target>
        </trans-unit>
        <trans-unit id="ddc4a7ff10bb420e224b50c4e1e01de6e388bd0f" translate="yes" xml:space="preserve">
          <source>.  Otherwise, attribute access in Lua would
use the</source>
          <target state="translated">。それ以外の場合、Luaでの属性アクセスは</target>
        </trans-unit>
        <trans-unit id="da2077ff3f867296cfff235205689363b4a3fec0" translate="yes" xml:space="preserve">
          <source>.  This means that only the first argument
needs to be manually checked for this special case.  For the</source>
          <target state="translated">。これは、この特殊なケースでは、最初の引数のみを手動でチェックする必要があることを意味します。のために</target>
        </trans-unit>
        <trans-unit id="431d33306c3c7bf180052f179d52f19920a9b7b5" translate="yes" xml:space="preserve">
          <source>. Any further values
returned in the same iteration will be mapped to</source>
          <target state="translated">。同じ反復で返されたそれ以上の値は、にマップされます</target>
        </trans-unit>
        <trans-unit id="c44105506220e1302d9d9683acf9f23d3ce0cdc1" translate="yes" xml:space="preserve">
          <source>.coroutine()</source>
          <target state="translated">.coroutine（）</target>
        </trans-unit>
        <trans-unit id="f8035b07e5bf0d30eb4314a6e83a9c9012930836" translate="yes" xml:space="preserve">
          <source>.get()</source>
          <target state="translated">。取得する（）</target>
        </trans-unit>
        <trans-unit id="3f1df0644f32586fe1e99b5aa5992b2169c9c2f8" translate="yes" xml:space="preserve">
          <source>.send()</source>
          <target state="translated">.send（）</target>
        </trans-unit>
        <trans-unit id="c0688fb4206e648cdf3c87fd1354d5f58fb85aea" translate="yes" xml:space="preserve">
          <source>.table_from()</source>
          <target state="translated">.table_from（）</target>
        </trans-unit>
        <trans-unit id="8ea3271e5f8836c89c2ca410ef318f54ced0bc3e" translate="yes" xml:space="preserve">
          <source>.throw()</source>
          <target state="translated">。スロー（）</target>
        </trans-unit>
        <trans-unit id="57577bda3ec32883cd3daa274404aa25e543671d" translate="yes" xml:space="preserve">
          <source>0.1 (2010-07-12)</source>
          <target state="translated">0.1 (2010-07-12)</target>
        </trans-unit>
        <trans-unit id="fc6b47c7f3227d9242eaac9996abf04449d639af" translate="yes" xml:space="preserve">
          <source>0.10 (2010-07-27)</source>
          <target state="translated">0.10 (2010-07-27)</target>
        </trans-unit>
        <trans-unit id="f88ad64d4479105dc713f5bae80c565cbefb6d87" translate="yes" xml:space="preserve">
          <source>0.11 (2010-08-07)</source>
          <target state="translated">0.11 (2010-08-07)</target>
        </trans-unit>
        <trans-unit id="6bce715edc91c3e605eeef5b769f1629e4fba848" translate="yes" xml:space="preserve">
          <source>0.12 (2010-08-16)</source>
          <target state="translated">0.12 (2010-08-16)</target>
        </trans-unit>
        <trans-unit id="f2932d6b11c118ae18b6c7af0b299f5b561c66ed" translate="yes" xml:space="preserve">
          <source>0.13 (2010-08-29)</source>
          <target state="translated">0.13 (2010-08-29)</target>
        </trans-unit>
        <trans-unit id="01f0ddbb68a2441802f2ab77fac42dae4b4e879c" translate="yes" xml:space="preserve">
          <source>0.13.1 (2010-08-30)</source>
          <target state="translated">0.13.1 (2010-08-30)</target>
        </trans-unit>
        <trans-unit id="1b79ff397ffafdc5b355ee8a49e245154719f1ac" translate="yes" xml:space="preserve">
          <source>0.14 (2010-08-31)</source>
          <target state="translated">0.14 (2010-08-31)</target>
        </trans-unit>
        <trans-unit id="afb04e0f4cfc78bc7433d08ed6d63ee2f1aa0a9e" translate="yes" xml:space="preserve">
          <source>0.15 (2010-09-02)</source>
          <target state="translated">0.15 (2010-09-02)</target>
        </trans-unit>
        <trans-unit id="2bcb735eb9f7c4f2c1830b01eea25805cc05b71c" translate="yes" xml:space="preserve">
          <source>0.16 (2010-09-03)</source>
          <target state="translated">0.16 (2010-09-03)</target>
        </trans-unit>
        <trans-unit id="2f6f84e2fadc69f96c81cdc854e3224c99bba1dd" translate="yes" xml:space="preserve">
          <source>0.17 (2010-11-05)</source>
          <target state="translated">0.17 (2010-11-05)</target>
        </trans-unit>
        <trans-unit id="857d385915b7e5bb24826432b2319b55f8ca51b8" translate="yes" xml:space="preserve">
          <source>0.18 (2010-11-06)</source>
          <target state="translated">0.18 (2010-11-06)</target>
        </trans-unit>
        <trans-unit id="39d9d14e30997bfab489ebe2b7dba2cff03548dd" translate="yes" xml:space="preserve">
          <source>0.19 (2011-03-06)</source>
          <target state="translated">0.19 (2011-03-06)</target>
        </trans-unit>
        <trans-unit id="c5bba0b6a6e893e21fc0db55afedd01625d5f37a" translate="yes" xml:space="preserve">
          <source>0.2 (2010-07-13)</source>
          <target state="translated">0.2 (2010-07-13)</target>
        </trans-unit>
        <trans-unit id="e3487916be4111f254f9cceb0b0da22f35da109b" translate="yes" xml:space="preserve">
          <source>0.20 (2011-05-22)</source>
          <target state="translated">0.20 (2011-05-22)</target>
        </trans-unit>
        <trans-unit id="aa32d409597b2b6a1b0e0587a74e97bb2270a8bf" translate="yes" xml:space="preserve">
          <source>0.21 (2014-02-12)</source>
          <target state="translated">0.21 (2014-02-12)</target>
        </trans-unit>
        <trans-unit id="6be9554aed79138c11f1ba3a02b374dabd43bc44" translate="yes" xml:space="preserve">
          <source>0.3 (2010-07-13)</source>
          <target state="translated">0.3 (2010-07-13)</target>
        </trans-unit>
        <trans-unit id="f2960197861e65ed80824b13574ce8c0e822d7a9" translate="yes" xml:space="preserve">
          <source>0.4 (2010-07-14)</source>
          <target state="translated">0.4 (2010-07-14)</target>
        </trans-unit>
        <trans-unit id="002251cfed841496f4dbf3ffd75a02d52092d4cf" translate="yes" xml:space="preserve">
          <source>0.5 (2010-07-14)</source>
          <target state="translated">0.5 (2010-07-14)</target>
        </trans-unit>
        <trans-unit id="752444fb0eaa27e1dd155cf86a07180ad2b5a508" translate="yes" xml:space="preserve">
          <source>0.6 (2010-07-18)</source>
          <target state="translated">0.6 (2010-07-18)</target>
        </trans-unit>
        <trans-unit id="41724e0d16a29dcd00243fd5ed36a62e4feafa90" translate="yes" xml:space="preserve">
          <source>0.7 (2010-07-18)</source>
          <target state="translated">0.7 (2010-07-18)</target>
        </trans-unit>
        <trans-unit id="e61f624aaa4797210a70fb28ed764b39679dd615" translate="yes" xml:space="preserve">
          <source>0.8 (2010-07-21)</source>
          <target state="translated">0.8 (2010-07-21)</target>
        </trans-unit>
        <trans-unit id="f2e6ad45e53595332d078bd4bbc9c880a99fb85d" translate="yes" xml:space="preserve">
          <source>0.9 (2010-07-23)</source>
          <target state="translated">0.9 (2010-07-23)</target>
        </trans-unit>
        <trans-unit id="e844ca1be950bb9293211f593761d7a2396f23af" translate="yes" xml:space="preserve">
          <source>1.0 (2014-09-28)</source>
          <target state="translated">1.0 (2014-09-28)</target>
        </trans-unit>
        <trans-unit id="1bf1a6de3677fbe1643901a149db6805c6a899ae" translate="yes" xml:space="preserve">
          <source>1.0.1 (2014-10-11)</source>
          <target state="translated">1.0.1 (2014-10-11)</target>
        </trans-unit>
        <trans-unit id="b23d0913c02baf89ec7c6a1b64cb33cb02c5942a" translate="yes" xml:space="preserve">
          <source>1.1 (2014-11-21)</source>
          <target state="translated">1.1 (2014-11-21)</target>
        </trans-unit>
        <trans-unit id="07ecc4dce56ca0d93557677f52d6341bcad0c060" translate="yes" xml:space="preserve">
          <source>1.2 (2015-10-10)</source>
          <target state="translated">1.2 (2015-10-10)</target>
        </trans-unit>
        <trans-unit id="1a78fd9b3ec29da04b538598186e455da4cd9c7a" translate="yes" xml:space="preserve">
          <source>1.3 (2016-04-12)</source>
          <target state="translated">1.3 (2016-04-12)</target>
        </trans-unit>
        <trans-unit id="590d1dd3cd6978140018fce2d6d392bdaa00ad32" translate="yes" xml:space="preserve">
          <source>1.4 (2016-12-10)</source>
          <target state="translated">1.4 (2016-12-10)</target>
        </trans-unit>
        <trans-unit id="e4dbd8b1ae259ebc5b4cbfd61cf9291c8c477dbd" translate="yes" xml:space="preserve">
          <source>1.5 (2017-09-16)</source>
          <target state="translated">1.5 (2017-09-16)</target>
        </trans-unit>
        <trans-unit id="5fe0f493bdf967541e739a96a6867b6d91807cb8" translate="yes" xml:space="preserve">
          <source>1.6 (2017-12-15)</source>
          <target state="translated">1.6 (2017-12-15)</target>
        </trans-unit>
        <trans-unit id="1007dc6e00629296b4bbd96ed4c65dc6259c1491" translate="yes" xml:space="preserve">
          <source>1.7 (2018-08-06)</source>
          <target state="translated">1.7 (2018-08-06)</target>
        </trans-unit>
        <trans-unit id="967bb8a46a48d0eb550b1e19e5d57955b54c4dca" translate="yes" xml:space="preserve">
          <source>1.8 (2019-02-01)</source>
          <target state="translated">1.8 (2019-02-01)</target>
        </trans-unit>
        <trans-unit id="0cb210626b4c318b4006b40e35a7a79fa27f1bb4" translate="yes" xml:space="preserve">
          <source>1.9 (2019-12-21)</source>
          <target state="translated">1.9 (2019-12-21)</target>
        </trans-unit>
        <trans-unit id="846d1f7033c9b0c17019bf4fd74a52934bfab031" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This will usually work as is&lt;/strong&gt;, but here are the details, in case
anything goes wrong for you.</source>
          <target state="translated">&lt;strong&gt;これは通常そのままで機能し&lt;/strong&gt;ますが、何か問題が発生した場合に備えて、詳細を以下に示します。</target>
        </trans-unit>
        <trans-unit id="6f665060da680eaa95d0367ab7990e176724d8e7" translate="yes" xml:space="preserve">
          <source>A common pattern for implementing named arguments in Lua is passing them
in a table as the first and only function argument.  See
&lt;a href=&quot;http://lua-users.org/wiki/NamedParameters&quot;&gt;http://lua-users.org/wiki/NamedParameters&lt;/a&gt; for more details.  Lupa supports
this pattern by providing two decorators:</source>
          <target state="translated">Luaで名前付き引数を実装するための一般的なパターンは、最初で唯一の関数引数としてそれらをテーブルに渡すことです。詳細については、&lt;a href=&quot;http://lua-users.org/wiki/NamedParameters&quot;&gt;http：//lua-users.org/wiki/NamedParameters&lt;/a&gt;を参照 してください。Lupaは、次の2つのデコレータを提供することでこのパターンをサポートしています。</target>
        </trans-unit>
        <trans-unit id="be76862f590f769f39776fc54a867c9551c6e7ae" translate="yes" xml:space="preserve">
          <source>A lookup of non-existing keys or indices returns None (actually</source>
          <target state="translated">存在しないキーやインデックスを検索すると、 None を返します (実際には None)。</target>
        </trans-unit>
        <trans-unit id="a3fef4086a6041609822239e988c5022cccaddae" translate="yes" xml:space="preserve">
          <source>A second helper method,</source>
          <target state="translated">第二のヘルパー法。</target>
        </trans-unit>
        <trans-unit id="fab990b07eeb2cf0a7282f22d8d9feef7da9ca5a" translate="yes" xml:space="preserve">
          <source>ARCHFLAGS</source>
          <target state="translated">ARCHFLAGS</target>
        </trans-unit>
        <trans-unit id="f25802efa336ee5a245498a602ba4a7462361092" translate="yes" xml:space="preserve">
          <source>Also, on 64bit MacOS-X, you will typically have to set the
environment variable</source>
          <target state="translated">また、64bitのMacOS-Xでは、通常、環境変数</target>
        </trans-unit>
        <trans-unit id="011c5c181510af38dc4ef23ee9e1555e12135ac4" translate="yes" xml:space="preserve">
          <source>An example where values are passed into the coroutine using its</source>
          <target state="translated">値がコアーチンに渡される例。</target>
        </trans-unit>
        <trans-unit id="e12315e531fbe8a03652e20bf340d8b9fd14c5c8" translate="yes" xml:space="preserve">
          <source>As discussed earlier, Lupa allows Lua scripts to call Python functions
and methods:</source>
          <target state="translated">前述したように、LupaではLuaスクリプトからPythonの関数やメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8eeebdf000a700d83b4fe65424e6baa92743a12c" translate="yes" xml:space="preserve">
          <source>Assuming that the Lua &lt;a href=&quot;http://git.alpinelinux.org/cgit/luaposix&quot;&gt;luaposix&lt;/a&gt; (</source>
          <target state="translated">Lua &lt;a href=&quot;http://git.alpinelinux.org/cgit/luaposix&quot;&gt;luaposix&lt;/a&gt;（</target>
        </trans-unit>
        <trans-unit id="41a806871c657d6066182883ebfc0bf54b676f60" translate="yes" xml:space="preserve">
          <source>Attribute lookup can use a more fine-grained control mechanism by
implementing explicit getter and setter functions for a LuaRuntime
(</source>
          <target state="translated">属性ルックアップでは、LuaRuntime (</target>
        </trans-unit>
        <trans-unit id="10d296b42df375be3c37de171670530659648f76" translate="yes" xml:space="preserve">
          <source>Avoid using</source>
          <target state="translated">使用を避ける</target>
        </trans-unit>
        <trans-unit id="de1e2a8973ec91d808f54a6bdfd460059ce7cf38" translate="yes" xml:space="preserve">
          <source>Because of these limitations lupa doesn&amp;rsquo;t enable named arguments for all
Python callables automatically.  Decorators allow to enable named arguments
on a per-callable basis.</source>
          <target state="translated">これらの制限のため、lupaはすべてのPython呼び出し可能オブジェクトの名前付き引数を自動的に有効にしません。デコレータを使用すると、呼び出し可能ベースで名前付き引数を有効にできます。</target>
        </trans-unit>
        <trans-unit id="2318ea04d5ca61145dbf133e6dec5fd9417e8b5f" translate="yes" xml:space="preserve">
          <source>Build LuaJIT:</source>
          <target state="translated">LuaJITを構築します。</target>
        </trans-unit>
        <trans-unit id="8c4d3d322cf40d2ae7f4029afbd1c89daaf15fb0" translate="yes" xml:space="preserve">
          <source>Build against Lua 5.3 if available.</source>
          <target state="translated">Lua 5.3 に対応したビルドが可能な場合。</target>
        </trans-unit>
        <trans-unit id="3903773335862f8d6a5a3436183901051cc04c43" translate="yes" xml:space="preserve">
          <source>Build lupa:</source>
          <target state="translated">ルパを構築します。</target>
        </trans-unit>
        <trans-unit id="fb3e9a2c5ff73767f84481e966b4e40b4adfd53b" translate="yes" xml:space="preserve">
          <source>Building with Lua 5.1</source>
          <target state="translated">Lua 5.1を使ったビルド</target>
        </trans-unit>
        <trans-unit id="af5de7006337c12be21e6adf4f3845eee10ffcc0" translate="yes" xml:space="preserve">
          <source>Building with LuaJIT2</source>
          <target state="translated">LuaJIT2を使ったビルド</target>
        </trans-unit>
        <trans-unit id="7d7f1f30a4c6ad6df283ac5509853cd26f019514" translate="yes" xml:space="preserve">
          <source>Built with Cython 0.26.1.</source>
          <target state="translated">Cython 0.26.1で構築。</target>
        </trans-unit>
        <trans-unit id="64860da1ecbe3002181aaf06377b5e4986d1e45c" translate="yes" xml:space="preserve">
          <source>Built with Cython 0.29.14 for better Py3.8 compatibility.</source>
          <target state="translated">Py3.8との互換性を高めるためにCython 0.29.14で構築されています。</target>
        </trans-unit>
        <trans-unit id="620f09b9e079b2d5acfc29aaf2935e1b068be7da" translate="yes" xml:space="preserve">
          <source>Built with Cython 0.29.3 for better Py3.7 compatibility.</source>
          <target state="translated">Py3.7との互換性を高めるためにCython 0.29.3で構築されています。</target>
        </trans-unit>
        <trans-unit id="fdd981108741f180e5dadec66f96f77c14858911" translate="yes" xml:space="preserve">
          <source>Copyright &amp;copy; 1994&amp;ndash;2017 Lua.org, PUC-Rio.</source>
          <target state="translated">Copyright&amp;copy;1994&amp;ndash;2017 Lua.org、PUC-Rio。</target>
        </trans-unit>
        <trans-unit id="fd12af63884ce063c38bfb42d92bba76e53a918b" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2010-2017 Stefan Behnel.  All rights reserved.</source>
          <target state="translated">Copyright (c)2010-2017 Stefan Behnel.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="0760d7dc65a0ebb2ea829b42b12323f289e92e88" translate="yes" xml:space="preserve">
          <source>DLFCN</source>
          <target state="translated">ディーエルエフシーエヌ</target>
        </trans-unit>
        <trans-unit id="d25641859ce0fdb4fb5572b5b4da9f528da02b04" translate="yes" xml:space="preserve">
          <source>Debian/Ubuntu + Lua 5.2</source>
          <target state="translated">Debian/Ubuntu+Lua 5.2</target>
        </trans-unit>
        <trans-unit id="8eb5b2ac2e61a85b56d8fac0c97232fc9e56e494" translate="yes" xml:space="preserve">
          <source>Debian/Ubuntu + LuaJIT2</source>
          <target state="translated">Debian/Ubuntu+LuaJIT2</target>
        </trans-unit>
        <trans-unit id="2c951c65d1c6db7c762105c1f5143a248eaec373" translate="yes" xml:space="preserve">
          <source>Depending on OS version, you might get an older LuaJIT2 version.</source>
          <target state="translated">OSのバージョンによっては、LuaJIT2のバージョンが古い場合があります。</target>
        </trans-unit>
        <trans-unit id="1a0fa3098cb8e2a7f87155ea6dccb04f24fe1769" translate="yes" xml:space="preserve">
          <source>Download LuaJIT2</source>
          <target state="translated">LuaJIT2のダウンロード</target>
        </trans-unit>
        <trans-unit id="60038657198ea44074a73ab760314860bb1606aa" translate="yes" xml:space="preserve">
          <source>Download and unpack lupa</source>
          <target state="translated">lupaのダウンロードと解凍</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="4da9cc7f9373c4c41f2ef4ca9d2c0a7f2fa6f621" translate="yes" xml:space="preserve">
          <source>For further information, read this mailing list post:</source>
          <target state="translated">詳細については、このメーリングリストの投稿をご覧ください。</target>
        </trans-unit>
        <trans-unit id="adab334dc252969e39efa2d9854b8840f22f6f5d" translate="yes" xml:space="preserve">
          <source>For iterators that return tuples, such as</source>
          <target state="translated">タプルを返すイテレータの場合は</target>
        </trans-unit>
        <trans-unit id="77c159e537a6942af629ccdca6594003208e8ff6" translate="yes" xml:space="preserve">
          <source>For questions not answered here, please contact the &lt;a href=&quot;http://www.freelists.org/list/lupa-dev&quot;&gt;Lupa mailing list&lt;/a&gt;.</source>
          <target state="translated">ここで回答されていない質問については、&lt;a href=&quot;http://www.freelists.org/list/lupa-dev&quot;&gt;Lupaメーリングリストにお&lt;/a&gt;問い合わせください。</target>
        </trans-unit>
        <trans-unit id="3af7b0aa61c76cce480c7f72f54a17cdde1c60c6" translate="yes" xml:space="preserve">
          <source>For trickier target platforms like Windows and MacOS-X, please see
the official &lt;a href=&quot;http://luajit.org/install.html&quot;&gt;installation instructions for LuaJIT&lt;/a&gt;.</source>
          <target state="translated">WindowsやMacOS-Xのようなトリッキーなターゲットプラットフォームについては、&lt;a href=&quot;http://luajit.org/install.html&quot;&gt;LuaJITの&lt;/a&gt;公式インストール手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="66d5e16536a57b2187703462bbbbce2bb2bf53d7" translate="yes" xml:space="preserve">
          <source>Furthermore, CPython needs to enable global symbol visibility for
shared libraries before loading the Lupa module.  This can be done by
calling</source>
          <target state="translated">さらに、CPythonはLupaモジュールをロードする前に共有ライブラリのグローバルシンボルの可視化を有効にする必要があります。これは</target>
        </trans-unit>
        <trans-unit id="613902f3d2160de6ac84564b8d894bacadddac14" translate="yes" xml:space="preserve">
          <source>GH#103: Provide wheels for MS Windows and fix MSVC build on Py2.7.</source>
          <target state="translated">GH#103:MS Windows 用のホイールを提供し、Py2.7 での MSVC ビルドを修正。</target>
        </trans-unit>
        <trans-unit id="de18f6214f3a99e9a52c8a267296005ea36c4761" translate="yes" xml:space="preserve">
          <source>GH#107: Fix a deprecated import in Py3.</source>
          <target state="translated">GH#107。Py3で非推奨のインポートを修正しました。</target>
        </trans-unit>
        <trans-unit id="c6fbb39799f643152e6c5f6ff956ae9614768915" translate="yes" xml:space="preserve">
          <source>GH#126: Fix build on Linux systems that install Lua as &amp;ldquo;lua52&amp;rdquo; package.</source>
          <target state="translated">GH＃126：Luaを「lua52」パッケージとしてインストールするLinuxシステムでのビルドを修正しました。</target>
        </trans-unit>
        <trans-unit id="df494f3f5808adaf2a0219900851e0f3af0e5aab" translate="yes" xml:space="preserve">
          <source>GH#129: Fix Lua module loading in Python 3.x.</source>
          <target state="translated">GH#129。Python 3.xでのLuaモジュールの読み込みを修正。</target>
        </trans-unit>
        <trans-unit id="fc0db9ec248e971547c235a4b1d452c5deced44c" translate="yes" xml:space="preserve">
          <source>GH#63: attribute/keyword names were not properly encoded if the</source>
          <target state="translated">GH#63:属性名やキーワード名が</target>
        </trans-unit>
        <trans-unit id="8496459566c8e5e649b9dfc4c88aea684333798b" translate="yes" xml:space="preserve">
          <source>GH#65: calling</source>
          <target state="translated">GH#65:呼び出し</target>
        </trans-unit>
        <trans-unit id="187d83733f199a6b6c0958050b55df68fa652bdc" translate="yes" xml:space="preserve">
          <source>GH#70:</source>
          <target state="translated">GH#70です。</target>
        </trans-unit>
        <trans-unit id="fc32137050e964fe649acd95731833b5c6ecbdff" translate="yes" xml:space="preserve">
          <source>GH#78: Allow Lua code to intercept Python exceptions.
(patch by Sergey Dobrov)</source>
          <target state="translated">GH#78:Lua コードが Python の例外を傍受できるようにする。(Sergey Dobrovによるパッチ)</target>
        </trans-unit>
        <trans-unit id="333f79c4bd0e6250522a2e79b4651f18a683d922" translate="yes" xml:space="preserve">
          <source>GH#81: copy locally provided Lua DLL into installed package on Windows
(patch by Gareth Coles)</source>
          <target state="translated">GH#81:ローカルで提供されたLua DLLをWindows上のインストール済みパッケージにコピー (Gareth Coles氏によるパッチ)</target>
        </trans-unit>
        <trans-unit id="4add5096b1256d9c25bb8d1398e8e47991f7e11e" translate="yes" xml:space="preserve">
          <source>GH#82: Lua coroutines were using the wrong runtime state
(patch by Sergey Dobrov)</source>
          <target state="translated">GH#82.Luaコアーチンが誤った実行時状態を使用していた(Sergey Dobrov氏によるパッチ</target>
        </trans-unit>
        <trans-unit id="28b3f53eff312bcf695406d5b8c859b1e1e6f01e" translate="yes" xml:space="preserve">
          <source>GH#87: Lua stack trace is included in output in debug mode.
(patch by aaiyer)</source>
          <target state="translated">GH#87.デバッグモードでLuaスタックトレースを出力に含める (patch by aaiyer)</target>
        </trans-unit>
        <trans-unit id="472a5da758b7ba0c3b4585b9e0e01e52395bac8a" translate="yes" xml:space="preserve">
          <source>GH#91: Lua 5.3 is bundled in the source distribution to simplify
one-shot installs.
(patch by TitanSnow)</source>
          <target state="translated">GH#91.Lua 5.3 はソースディストリビューションにバンドルされており、ワンショットインストールを簡素化しています。(TitanSnowによるパッチ)</target>
        </trans-unit>
        <trans-unit id="de385b26a18689f4b13efd155bbf6d594cb76177" translate="yes" xml:space="preserve">
          <source>GH#93: New method</source>
          <target state="translated">GH#93.新しいメソッド</target>
        </trans-unit>
        <trans-unit id="ae09b76c30511a558201c4f79a24d8e169e3cf00" translate="yes" xml:space="preserve">
          <source>GH#95: Improved compatibility with Lua 5.3.
(patch by TitanSnow)</source>
          <target state="translated">GH#95:Lua 5.3 との互換性を改善しました。(TitanSnowによるパッチ)</target>
        </trans-unit>
        <trans-unit id="e07af39c79909da38d7eb2c9d32bbd4673526ab8" translate="yes" xml:space="preserve">
          <source>However, the Lua ecosystem lacks many of the batteries that Python
readily includes, either directly in its standard library or as third
party packages. This makes real-world Lua applications harder to write
than equivalent Python applications. Lua is therefore not commonly
used as primary language for large applications, but it makes for a
fast, high-level and resource-friendly backup language inside of
Python when raw speed is required and the edit-compile-run cycle of
binary extension modules is too heavy and too static for agile
development or hot-deployment.</source>
          <target state="translated">しかし、Luaエコシステムには、Pythonが標準ライブラリに直接搭載しているものや、サードパーティ製のパッケージとして搭載しているものなど、Pythonが容易に搭載しているバッテリーの多くが不足しています。そのため、実際のLuaアプリケーションは、同等のPythonアプリケーションよりも書きにくくなっています。そのため、Luaは大規模なアプリケーションの主要言語としては一般的ではありませんが、生のスピードが必要な場合や、バイナリ拡張モジュールの編集・コンパイル・実行サイクルが重く、アジャイル開発やホットデプロイには静的すぎる場合には、高速かつ高レベルでリソースに優しいPython内部のバックアップ言語として利用することができます。</target>
        </trans-unit>
        <trans-unit id="9571590928811cf81ebae7e60d45dc32fa89b05a" translate="yes" xml:space="preserve">
          <source>If this setup fails, however, you have to set the flags manually.
When using the above configuration call, the argument</source>
          <target state="translated">ただし、この設定に失敗した場合は、手動でフラグを設定する必要があります。上記の設定呼び出しを使用する場合、引数</target>
        </trans-unit>
        <trans-unit id="b963dd2e2ba4a6fa4e3569f9940f3d7571c8cb20" translate="yes" xml:space="preserve">
          <source>If you do not control the function implementation, you can also just
manually wrap a callable object when passing it into Lupa:</source>
          <target state="translated">関数の実装を制御しない場合は、呼び出し可能なオブジェクトをLupaに渡す際に手動でラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="84b4d1745aaab1d8bb260adc890b3c3dd536d4db" translate="yes" xml:space="preserve">
          <source>If you need specific C compiler flags, pass them to</source>
          <target state="translated">特定の C コンパイラのフラグが必要な場合は</target>
        </trans-unit>
        <trans-unit id="2f7794164c0bea82dfb6e568311c21471e55f150" translate="yes" xml:space="preserve">
          <source>Importing Lua binary modules</source>
          <target state="translated">Luaバイナリモジュールのインポート</target>
        </trans-unit>
        <trans-unit id="d82d918809a8a16f9e20ae8122a3bc646a8deb8b" translate="yes" xml:space="preserve">
          <source>In Latin, &amp;ldquo;lupa&amp;rdquo; is a female wolf, as elegant and wild as it sounds.
If you don&amp;rsquo;t like this kind of straight forward allegory to an
endangered species, you may also happily assume it&amp;rsquo;s just an
amalgamation of the phonetic sounds that start the words &amp;ldquo;Lua&amp;rdquo; and
&amp;ldquo;Python&amp;rdquo;, two from each to keep the balance.</source>
          <target state="translated">ラテン語では、「ルパ」は女性のオオカミであり、見た目と同じくらいエレガントでワイルドです。絶滅危惧種に対するこのような率直な寓話が気に入らない場合は、バランスを保つために、「Lua」と「Python」という単語をそれぞれ2つずつ開始する音声の単なる融合であると考えることもできます。</target>
        </trans-unit>
        <trans-unit id="89d4f07870887020932ec3e7db42801c0b0f2686" translate="yes" xml:space="preserve">
          <source>Install Lua 5.2 development package:</source>
          <target state="translated">Lua 5.2開発パッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="9bb0b2f16c0f46c1055a3475f17b064ab3eaed30" translate="yes" xml:space="preserve">
          <source>Install Lua:</source>
          <target state="translated">Luaをインストールします。</target>
        </trans-unit>
        <trans-unit id="4d0e03d6bf5e1dcdb6c7459a0bb21e5be7a443a9" translate="yes" xml:space="preserve">
          <source>Install LuaJIT2 development package:</source>
          <target state="translated">LuaJIT2開発パッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="d5e97653289639304d75b97a6c990116b6400ccc" translate="yes" xml:space="preserve">
          <source>Install lupa:</source>
          <target state="translated">lupaをインストールします。</target>
        </trans-unit>
        <trans-unit id="d66f07b8bcab0c22bc0088549aa6c51cead607d7" translate="yes" xml:space="preserve">
          <source>Install pkg-config:</source>
          <target state="translated">pkg-configをインストールします。</target>
        </trans-unit>
        <trans-unit id="40ffef4331c9a3e695590f96efd2626a8b1bb66b" translate="yes" xml:space="preserve">
          <source>Installing lupa</source>
          <target state="translated">lupaのインストール</target>
        </trans-unit>
        <trans-unit id="cadeabf72207a82698f93b95d8ef282abb9bb5d0" translate="yes" xml:space="preserve">
          <source>Installing lupa from packages</source>
          <target state="translated">パッケージからのlupaのインストール</target>
        </trans-unit>
        <trans-unit id="9000515f90c77b293d1513ba19b0bacd31a3166e" translate="yes" xml:space="preserve">
          <source>Instead of passing a wrapped</source>
          <target state="translated">ラップされた</target>
        </trans-unit>
        <trans-unit id="2a9cdcd5fc521690e5f90db10ab5c07555d14d93" translate="yes" xml:space="preserve">
          <source>It also works to create coroutines in Lua and to pass them back into
Python space:</source>
          <target state="translated">また、Luaでコルーチンを作成したり、Python空間に戻したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="7574f0ea023956d0c0d936ce71eb401ce531681e" translate="yes" xml:space="preserve">
          <source>It complements Python very well.  Lua is a language as dynamic as
Python, but LuaJIT compiles it to very fast machine code, sometimes
faster than many statically compiled languages for computational code.
The language runtime is very small and carefully designed for
embedding.  The complete binary module of Lupa, including a statically
linked LuaJIT2 runtime, only weighs some 700KB on a 64 bit machine.
With standard Lua 5.1, it&amp;rsquo;s less than 400KB.</source>
          <target state="translated">Pythonを非常によく補完します。LuaはPythonと同じくらい動的な言語ですが、LuaJITはそれを非常に高速なマシンコードにコンパイルします。計算コード用に静的にコンパイルされた多くの言語よりも高速な場合もあります。言語ランタイムは非常に小さく、埋め込み用に慎重に設計されています。静的にリンクされたLuaJIT2ランタイムを含むLupaの完全なバイナリモジュールは、64ビットマシンで約700KBの重さしかありません。標準のLua5.1では、400KB未満です。</target>
        </trans-unit>
        <trans-unit id="f10062fc330c52dd5cc1a44dfe962ba916c0f7b3" translate="yes" xml:space="preserve">
          <source>It is possible to use</source>
          <target state="translated">を使用することが可能です。</target>
        </trans-unit>
        <trans-unit id="ee9505d08b7333e9830ed5bd0c035cda7e16de1e" translate="yes" xml:space="preserve">
          <source>Iteration in Lua</source>
          <target state="translated">Luaでのイテレーション</target>
        </trans-unit>
        <trans-unit id="985bb13f3d08c7156570cc697135996411eb693f" translate="yes" xml:space="preserve">
          <source>Iteration over Python objects from Lua&amp;rsquo;s for-loop is fully supported.
However, Python iterables need to be converted using one of the
utility functions which are described here.  This is similar to the
functions like</source>
          <target state="translated">LuaのforループからのPythonオブジェクトの反復が完全にサポートされています。ただし、Pythonイテラブルは、ここで説明するユーティリティ関数の1つを使用して変換する必要があります。これは次のような機能に似ています</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">ライセンス</target>
        </trans-unit>
        <trans-unit id="b0832074630eb731d7fbe8074de48a90cd9bb220" translate="yes" xml:space="preserve">
          <source>Lua</source>
          <target state="translated">ルア</target>
        </trans-unit>
        <trans-unit id="30bbe2f33c054501bdc68adb8c4195a2af58c309" translate="yes" xml:space="preserve">
          <source>Lua Coroutines</source>
          <target state="translated">Luaのコルチン</target>
        </trans-unit>
        <trans-unit id="a93bd38917b0c371f6cfedd4f24182c2979042f2" translate="yes" xml:space="preserve">
          <source>Lua Tables</source>
          <target state="translated">Lua テーブル</target>
        </trans-unit>
        <trans-unit id="67c500f56910dd413ffe80c07d0a6440835cb09d" translate="yes" xml:space="preserve">
          <source>Lua coroutine support through dedicated wrapper classes, including
Python iteration support.  In Python space, Lua coroutines behave
exactly like Python generators.</source>
          <target state="translated">Pythonのイテレーションサポートを含む、専用のラッパークラスによるLuaコアーチンのサポート。Python空間では、LuaのコルーチンはPythonのジェネレータと全く同じように動作します。</target>
        </trans-unit>
        <trans-unit id="8e2ead8de17c8055d0663e9053c698206e995625" translate="yes" xml:space="preserve">
          <source>Lua doesn&amp;rsquo;t have a dedicated syntax for named arguments, so by default
Python callables can only be called using positional arguments.</source>
          <target state="translated">Luaには名前付き引数専用の構文がないため、デフォルトでは、Python呼び出し可能オブジェクトは位置引数を使用してのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c75fc4505fabfee11670cf2a00499293eec2cded" translate="yes" xml:space="preserve">
          <source>Lua error messages were not properly decoded</source>
          <target state="translated">Lua のエラーメッセージが正しくデコードされていない</target>
        </trans-unit>
        <trans-unit id="be14136c2c9375fcdeffa3c854dc5c3680dd8bf7" translate="yes" xml:space="preserve">
          <source>Lua supports two main protocols on objects: calling and indexing.  It
does not distinguish between attribute access and item access like
Python does, so the Lua operations</source>
          <target state="translated">Luaは、オブジェクトの呼び出しとインデックス作成の2つの主要なプロトコルをサポートしています。Python のように属性アクセスとアイテムアクセスを区別しません。</target>
        </trans-unit>
        <trans-unit id="525e61a72a14003167bd9ad3fdb980e023cc17e7" translate="yes" xml:space="preserve">
          <source>Lua tables mimic Python&amp;rsquo;s mapping protocol.  For the special case of
array tables, Lua automatically inserts integer indices as keys into
the table.  Therefore, indexing starts from 1 as in Lua instead of 0
as in Python.  For the same reason, negative indexing does not work.
It is best to think of Lua tables as mappings rather than arrays, even
for plain array tables.</source>
          <target state="translated">LuaテーブルはPythonのマッピングプロトコルを模倣しています。配列テーブルの特殊なケースでは、Luaは整数インデックスをキーとしてテーブルに自動的に挿入します。したがって、インデックス作成は、Pythonのように0ではなく、Luaのように1から始まります。同じ理由で、負のインデックスは機能しません。プレーンな配列テーブルの場合でも、Luaテーブルを配列ではなくマッピングと考えるのが最善です。</target>
        </trans-unit>
        <trans-unit id="25bcc54d57c62ec485525eb90620b417d356c30c" translate="yes" xml:space="preserve">
          <source>Lua tables support Python&amp;rsquo;s &amp;ldquo;del&amp;rdquo; statement for item deletion
(patch by Jason Fried)</source>
          <target state="translated">Luaテーブルは、アイテム削除のためのPythonの「del」ステートメントをサポートしています（Jason Friedによるパッチ）</target>
        </trans-unit>
        <trans-unit id="8f66422194135cdf96f1116c04b4ca257d2dba3e" translate="yes" xml:space="preserve">
          <source>LuaError</source>
          <target state="translated">LuaError</target>
        </trans-unit>
        <trans-unit id="00461e86a66fbadb93280d1fc700c080992552cf" translate="yes" xml:space="preserve">
          <source>LuaRuntime</source>
          <target state="translated">Luaランタイム</target>
        </trans-unit>
        <trans-unit id="3a692fcc1acb9a815490d2a648209b6fd827bf94" translate="yes" xml:space="preserve">
          <source>LuaRuntime.compile()</source>
          <target state="translated">LuaRuntime.compile()</target>
        </trans-unit>
        <trans-unit id="cf9fd6a06590e4d34fcf07e4db4f923917cb037a" translate="yes" xml:space="preserve">
          <source>LuaRuntime.execute()</source>
          <target state="translated">LuaRuntime.execute()</target>
        </trans-unit>
        <trans-unit id="ad9b63e8684f613aa7cdc279ff6ca8b7511e9fa8" translate="yes" xml:space="preserve">
          <source>LuaRuntime.globals()</source>
          <target state="translated">LuaRuntime.globals()</target>
        </trans-unit>
        <trans-unit id="0fbc695391010bfc8a76f6d7aac75181cf0fd148" translate="yes" xml:space="preserve">
          <source>LuaRuntime.require()</source>
          <target state="translated">LuaRuntime.require()</target>
        </trans-unit>
        <trans-unit id="1c71dc30230b3f3aec0fe2bf671acfa9255e0a11" translate="yes" xml:space="preserve">
          <source>LuaRuntime.run()</source>
          <target state="translated">LuaRuntime.run()</target>
        </trans-unit>
        <trans-unit id="d6ff10e0f0beefec8e2f347b90b26a8add07d98e" translate="yes" xml:space="preserve">
          <source>LuaRuntime.table()</source>
          <target state="translated">LuaRuntime.table()</target>
        </trans-unit>
        <trans-unit id="b5d6a355797b8cc87089ad14ab09b1146ffdd2ff" translate="yes" xml:space="preserve">
          <source>LuaRuntime.table_from(...)</source>
          <target state="translated">LuaRuntime.table_from(...)</target>
        </trans-unit>
        <trans-unit id="714d5646201d552efd6714d6e922df1716c55825" translate="yes" xml:space="preserve">
          <source>Lupa</source>
          <target state="translated">ルパ</target>
        </trans-unit>
        <trans-unit id="8bc80c03959c4c35d594e474ed28caa7bb7645b5" translate="yes" xml:space="preserve">
          <source>Lupa avoids this value escaping whenever it&amp;rsquo;s obviously not necessary.
Thus, when unpacking tuples during iteration, only the first value will
be subject to</source>
          <target state="translated">Lupaは、明らかに必要がない場合は常に、この値がエスケープするのを回避します。したがって、反復中にタプルを解凍すると、最初の値のみが対象になります</target>
        </trans-unit>
        <trans-unit id="553d1f233893a1c1e51ff07ae8a22d40f5886b94" translate="yes" xml:space="preserve">
          <source>Lupa change log</source>
          <target state="translated">ルパ変更ログ</target>
        </trans-unit>
        <trans-unit id="82e5d0d6620cf95713418d6030fbb461bc306d68" translate="yes" xml:space="preserve">
          <source>Lupa integrates the runtimes of &lt;a href=&quot;http://lua.org/&quot;&gt;Lua&lt;/a&gt; or &lt;a href=&quot;http://luajit.org/&quot;&gt;LuaJIT2&lt;/a&gt; into CPython.
It is a partial rewrite of &lt;a href=&quot;http://labix.org/lunatic-python&quot;&gt;LunaticPython&lt;/a&gt; in &lt;a href=&quot;http://cython.org&quot;&gt;Cython&lt;/a&gt; with some
additional features such as proper coroutine support.</source>
          <target state="translated">Lupaは、&lt;a href=&quot;http://lua.org/&quot;&gt;Lua&lt;/a&gt;または&lt;a href=&quot;http://luajit.org/&quot;&gt;LuaJIT2の&lt;/a&gt;ランタイムをCPythonに統合します。これは、適切なコルーチンサポートなどのいくつかの追加機能を備えた&lt;a href=&quot;http://cython.org&quot;&gt;Cython&lt;/a&gt;の&lt;a href=&quot;http://labix.org/lunatic-python&quot;&gt;LunaticPythonの&lt;/a&gt;部分的な書き直しです。</target>
        </trans-unit>
        <trans-unit id="637697b9d7e022bb6d88b729c9351a7886d48568" translate="yes" xml:space="preserve">
          <source>Lupa is a very fast and thin wrapper around Lua or LuaJIT.  It makes it
easy to write dynamic Lua code that accompanies dynamic Python code by
switching between the two languages at runtime, based on the tradeoff
between simplicity and speed.</source>
          <target state="translated">Lupaは、LuaやLuaJITを高速かつ薄くラッパー化したものです。シンプルさとスピードのトレードオフに基づいて、実行時に2つの言語を切り替えることで、動的なPythonコードに付随する動的なLuaコードを簡単に書くことができます。</target>
        </trans-unit>
        <trans-unit id="58835c6b227ed47adf29a4f660b81e101458660f" translate="yes" xml:space="preserve">
          <source>Lupa now plays more nicely with other Lua extensions that create
userdata objects</source>
          <target state="translated">Lupaは、userdataオブジェクトを作成する他のLua拡張機能との連携がよりスムーズになりました。</target>
        </trans-unit>
        <trans-unit id="32316fbffc1bd595e1c368015f2e5096ab7e58b5" translate="yes" xml:space="preserve">
          <source>Lupa provides a simple mechanism to control access to Python objects.
Each attribute access can be passed through a filter function as
follows:</source>
          <target state="translated">LupaはPythonオブジェクトへのアクセスを制御するためのシンプルな仕組みを提供しています。各属性のアクセスは、以下のようにフィルタ関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="440e97577ae602bc5dda3f7665b14fce9ef6d8b0" translate="yes" xml:space="preserve">
          <source>Major features</source>
          <target state="translated">主な特徴</target>
        </trans-unit>
        <trans-unit id="f23f2e2185075a6c25798a73a7ce12a7853e6457" translate="yes" xml:space="preserve">
          <source>NOTE: When building on Windows, make sure that lua51.lib is made in addition
to lua51.dll. The MSVC build produces this file, MinGW does NOT.</source>
          <target state="translated">注意:Windowsでビルドする場合は、lua51.dllに加えてlua51.libが作成されていることを確認してください。MSVCビルドはこのファイルを生成しますが、MinGWは生成しません。</target>
        </trans-unit>
        <trans-unit id="d43a3b49bc134890f454d76eba4f56158d1142a1" translate="yes" xml:space="preserve">
          <source>NOTE: this release includes the major backwards incompatible changes listed
below.  It is believed that they simplify the interaction between Python code
and Lua code by more strongly following idiomatic Lua on the Lua side.</source>
          <target state="translated">注意:このリリースには、以下に列挙されている下位互換性のない主要な変更が含まれています。これらの変更は、Lua側のイディオムLuaをより強く追従させることで、PythonコードとLuaコードの相互作用を単純化するものと考えられています。</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">なし</target>
        </trans-unit>
        <trans-unit id="66a73451a41081db626faeee12e46e13a78fa8fa" translate="yes" xml:space="preserve">
          <source>None vs. nil</source>
          <target state="translated">なし vs.ゼロ</target>
        </trans-unit>
        <trans-unit id="6947ed8d08a658dcf615f13d74bcdade981ddeea" translate="yes" xml:space="preserve">
          <source>Note how the example creates a separate</source>
          <target state="translated">この例では独立した</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">以下のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="41073890e9cf7fd9e3f9c591e8d94cd4988391f1" translate="yes" xml:space="preserve">
          <source>Note that accessing the</source>
          <target state="translated">にアクセスすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="95ea67cadb7d8a6a757f759c8c2a960f70da720b" translate="yes" xml:space="preserve">
          <source>Note that it is best not to rely on the behaviour of len() for
mappings.  It might change in a later version of Lupa.</source>
          <target state="translated">マッピングのために len()の振る舞いに頼らない方が良いことに注意してください。これは後のバージョンのLupaで変更されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c469e4d9628c9aea8710272dbac55cee9a9e3b01" translate="yes" xml:space="preserve">
          <source>Note that on 64bit MacOS-X installations, the following additional
compiler flags are reportedly required due to the embedded LuaJIT:</source>
          <target state="translated">64bitのMacOS-Xでは、LuaJITが組み込まれているため、以下の追加コンパイラフラグが必要になることが報告されています。</target>
        </trans-unit>
        <trans-unit id="137073dab120a851a9879c45d99f7d15c532ae92" translate="yes" xml:space="preserve">
          <source>Note that the attributes of Python functions provide access to the
current</source>
          <target state="translated">Pythonの関数の属性は、現在の</target>
        </trans-unit>
        <trans-unit id="20cf24a6ef025b3223a035a127cc4279206499b6" translate="yes" xml:space="preserve">
          <source>Note that this applies to both LuaJIT and Lupa, so make sure
you try a clean build of everything if you forgot to set it
initially.</source>
          <target state="translated">これはLuaJITとLupaの両方に適用されますので、初期設定を忘れていた場合は、必ずすべてのビルドをクリーンにしてみてください。</target>
        </trans-unit>
        <trans-unit id="97503ede6b79e8a07a59068e9e92dd0e4841a7a5" translate="yes" xml:space="preserve">
          <source>Note that this behaviour changed in Lupa 1.0.  Previously, the</source>
          <target state="translated">この動作はLupa 1.0で変更されたことに注意してください。以前は</target>
        </trans-unit>
        <trans-unit id="ce429b16a67bf6c2130b1f775161d327f5ecf988" translate="yes" xml:space="preserve">
          <source>Note that unlike Lua function objects, callable Python objects support
indexing in Lua:</source>
          <target state="translated">Lua の関数オブジェクトとは異なり、呼び出し可能な Python オブジェクトは Lua でのインデックス作成に対応していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7112c7f1bf50c01de7bb0ddc62d8c8db9307f852" translate="yes" xml:space="preserve">
          <source>Note the flag</source>
          <target state="translated">旗に注意</target>
        </trans-unit>
        <trans-unit id="c2e338821467694dae7f0b824258d4525218064c" translate="yes" xml:space="preserve">
          <source>OS X + Lua 5.2 + Homebrew</source>
          <target state="translated">OS X+Lua 5.2+Homebrew</target>
        </trans-unit>
        <trans-unit id="150ab466d9233f62a31dfa351764d8aac46c438d" translate="yes" xml:space="preserve">
          <source>Obviously, this heuristic will fail to provide the required behaviour
in many cases, e.g. when attribute access is required to an object
that happens to support item access.  To be explicit about the
protocol that should be used, Lupa provides the helper functions</source>
          <target state="translated">明らかに、このヒューリスティックは多くの場合、必要な動作を提供できません。例えば、アイテムアクセスをサポートしているオブジェクトに属性アクセスが必要な場合などです。使用すべきプロトコルを明確にするために、Lupaは以下のヘルパー関数を提供します。</target>
        </trans-unit>
        <trans-unit id="058278fc2552e041a0b7f8e48949177230ee872b" translate="yes" xml:space="preserve">
          <source>On other systems, you may have to supply the build parameters
externally, e.g. using environment variables or by changing the
setup.py script manually.  Pass the</source>
          <target state="translated">他のシステムでは、環境変数を使用したり、setup.py スクリプトを手動で変更したりして、ビルドパラメータを外部から指定する必要があるかもしれません。このようなシステムでは、ビルドパラメータを外部から指定することができます。</target>
        </trans-unit>
        <trans-unit id="79b652cb8d3085ce293419206bcdeba800aeb507" translate="yes" xml:space="preserve">
          <source>On systems that use the &amp;ldquo;pkg-config&amp;rdquo; configuration mechanism, Lupa&amp;rsquo;s
setup.py will pick up either LuaJIT2 or Lua automatically, with a
preference for LuaJIT2 if it is found.  Pass the</source>
          <target state="translated">「pkg-config」構成メカニズムを使用するシステムでは、Lupaのsetup.pyはLuaJIT2またはLuaのいずれかを自動的に取得し、見つかった場合はLuaJIT2を優先します。合格</target>
        </trans-unit>
        <trans-unit id="b388171ccf30a388f41350fa4b5d019519f391e4" translate="yes" xml:space="preserve">
          <source>One should be careful with passing</source>
          <target state="translated">過ぎたるは及ばざるが如し</target>
        </trans-unit>
        <trans-unit id="1026da83d4d5ec8259c6372aa49458a2f8e45ed8" translate="yes" xml:space="preserve">
          <source>Or any other distutils target of your choice, such as</source>
          <target state="translated">または、以下のような他の任意の蒸留器のターゲット。</target>
        </trans-unit>
        <trans-unit id="4428df60996dd395af6c51238f43c71d4400a7fa" translate="yes" xml:space="preserve">
          <source>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</source>
          <target state="translated">これにより、このソフトウェアおよび関連するドキュメントファイル（以下「ソフトウェア」）のコピーを取得するすべての人に、使用、コピー、変更、マージの権利を含むがこれに限定されない制限なしでソフトウェアを扱うことが許可されます。以下の条件に従って、本ソフトウェアのコピーを発行、頒布、サブライセンス、および/または販売し、本ソフトウェアの提供を受けた者がそうすることを許可する。</target>
        </trans-unit>
        <trans-unit id="8ee1d31f49bc59e7e2674c408fc50ce8f8ec05d3" translate="yes" xml:space="preserve">
          <source>Pratically all Python objects allow attribute access, so if the object
also has a</source>
          <target state="translated">全てのPythonオブジェクトは属性アクセスを許可しています。</target>
        </trans-unit>
        <trans-unit id="007a19a85a3d88ade8e9505f5ede06111f5d707c" translate="yes" xml:space="preserve">
          <source>Py3.x build fixes</source>
          <target state="translated">Py3.x ビルドの修正</target>
        </trans-unit>
        <trans-unit id="5eacb07fef5e3c93c8817dbf683217f161d437a8" translate="yes" xml:space="preserve">
          <source>Py_None</source>
          <target state="translated">Py_None</target>
        </trans-unit>
        <trans-unit id="27bedfb708344c23c3b430402dd8bd354196abfd" translate="yes" xml:space="preserve">
          <source>Python Callables</source>
          <target state="translated">Python のコールアブル</target>
        </trans-unit>
        <trans-unit id="5f364f5a2096bfc2c363883d4ba554ee4b39f9a4" translate="yes" xml:space="preserve">
          <source>Python coroutine wrapper for Lua coroutines</source>
          <target state="translated">Lua coroutine 用 Python coroutine ラッパー</target>
        </trans-unit>
        <trans-unit id="30057309b73b826cc08452e776a9d31adbf53109" translate="yes" xml:space="preserve">
          <source>Python functions/methods wrapped in these decorators can be called from
Lua code as</source>
          <target state="translated">これらのデコレータにラップされた Python の関数/メソッドは、Lua コードから以下のように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0245f7b05864e0e976826fc3a46153442925f3ea" translate="yes" xml:space="preserve">
          <source>Python iteration support for Lua objects (e.g. tables)</source>
          <target state="translated">PythonによるLuaオブジェクトの反復処理のサポート (テーブルなど)</target>
        </trans-unit>
        <trans-unit id="289f08e95d085ed41eb84f33f694273d3ef8959b" translate="yes" xml:space="preserve">
          <source>Python module that
defines the necessary flag constants.  In that case, using binary
modules in Lua should work out of the box.</source>
          <target state="translated">必要なフラグ定数を定義するPythonモジュール。この場合、Luaでバイナリモジュールを使用すればすぐに動作するはずです。</target>
        </trans-unit>
        <trans-unit id="d39ae1f711c465008e5cf09e54568d5d99da80bf" translate="yes" xml:space="preserve">
          <source>Python objects are either converted when passed into Lua (e.g.
numbers and strings) or passed as wrapped object references.</source>
          <target state="translated">Pythonのオブジェクトは、Luaに渡されたときに変換されるか(数字や文字列など)、ラップされたオブジェクト参照として渡されます。</target>
        </trans-unit>
        <trans-unit id="563e0e1dfb871811d7060c28dc713b24f9ac867e" translate="yes" xml:space="preserve">
          <source>Python objects in Lua</source>
          <target state="translated">LuaでのPythonオブジェクト</target>
        </trans-unit>
        <trans-unit id="52fffeb7fcb877f417704aaa900d7fb36b4a9032" translate="yes" xml:space="preserve">
          <source>Python wrapper around Lua and LuaJIT</source>
          <target state="translated">Lua と LuaJIT の Python ラッパー</target>
        </trans-unit>
        <trans-unit id="ca7a54ca18ec7d86738b5a8ee61852abefbd6eff" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s</source>
          <target state="translated">Pythonの</target>
        </trans-unit>
        <trans-unit id="222fd2e5cef2e782850e7e961d3e145177fe55f7" translate="yes" xml:space="preserve">
          <source>RTLD_GLOBAL</source>
          <target state="translated">RTLD_GLOBAL</target>
        </trans-unit>
        <trans-unit id="9cbf1a94b8150546e1e7a9aba2d61fff3817888a" translate="yes" xml:space="preserve">
          <source>RTLD_NEW</source>
          <target state="translated">RTLD_NEW</target>
        </trans-unit>
        <trans-unit id="faec5b411587c2653176d0edaefa55f544d10f28" translate="yes" xml:space="preserve">
          <source>Reportedly, it also works to use Lupa with the standard (non-JIT) Lua
runtime.  To that end, install Lua 5.1 instead of LuaJIT2, including
any development packages (header files etc.).</source>
          <target state="translated">報告によると、標準(非JIT)のLuaランタイムでLupaを使用する場合も動作するとのことです。そのため、LuaJIT2の代わりに、開発パッケージ(ヘッダファイルなど)を含めてLua 5.1をインストールしてください。</target>
        </trans-unit>
        <trans-unit id="8e3a9e517fc115db425d530c9f7882fce4411131" translate="yes" xml:space="preserve">
          <source>Restricting Lua access to Python objects</source>
          <target state="translated">PythonオブジェクトへのLuaアクセスを制限する</target>
        </trans-unit>
        <trans-unit id="7410bccc628c4a1d094dc7366e032b37e3d25461" translate="yes" xml:space="preserve">
          <source>Similar to the table interface provided by Lua, Lupa also supports
attribute access to table members:</source>
          <target state="translated">Luaで提供されているテーブルインターフェースと同様に、Lupaでもテーブルメンバーへの属性アクセスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="1d338ccf06b94256da0cd89a39dae0b36ea1aee1" translate="yes" xml:space="preserve">
          <source>Since Lupa 1.0, you can alternatively provide dedicated getter and
setter function implementations for a</source>
          <target state="translated">Lupa 1.0からは、代わりに、以下のような専用のゲッターとセッター関数の実装を提供することができます。</target>
        </trans-unit>
        <trans-unit id="468f68408e678c9a3d1bcf5c2ecb96c73ed1fbc3" translate="yes" xml:space="preserve">
          <source>Since the default behaviour (to not explode tuples) might change in a
later version of Lupa, it is best to always pass this flag explicitly.</source>
          <target state="translated">デフォルトの動作(タプルを爆発させない)は後のバージョンのLupaで変更される可能性があるので、常にこのフラグを明示的に渡すのがベストです。</target>
        </trans-unit>
        <trans-unit id="97c99e783b5c6995773458002b7ef53284d704b4" translate="yes" xml:space="preserve">
          <source>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.</source>
          <target state="translated">本ソフトウェアは「現状有姿」で提供され、商品性、特定の目的への適合性、非侵害性の保証に限定されるものではなく、明示または黙示を問わず、いかなる種類の保証もありません。いかなる場合においても、著作者または著作権者は、ソフトウェアまたはその使用またはその他の取引に起因するか、それらに関連するかを問わず、契約、不法行為、またはその他の形で発生したいかなる請求、損害、その他の責任についても責任を負わないものとします。ソフトウェア。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="abf94dbab29db68325894cd60a65f3c2a1fc56fa" translate="yes" xml:space="preserve">
          <source>The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.</source>
          <target state="translated">上記の著作権表示および本許諾表示は、本ソフトウェアのすべての複製物または実質的な部分に含まれるものとします。</target>
        </trans-unit>
        <trans-unit id="c2d7a3789666f42eb71a9498df4feb022b102db0" translate="yes" xml:space="preserve">
          <source>The following example calculates a mandelbrot image in parallel
threads and displays the result in PIL. It is based on a &lt;a href=&quot;http://shootout.alioth.debian.org/u64/program.php?test=mandelbrot&amp;amp;lang=luajit&amp;amp;id=1&quot;&gt;benchmark
implementation&lt;/a&gt; for the &lt;a href=&quot;http://shootout.alioth.debian.org/u64/benchmark.php?test=all&amp;amp;lang=luajit&amp;amp;lang2=python3&quot;&gt;Computer Language Benchmarks Game&lt;/a&gt;.</source>
          <target state="translated">次の例では、並列スレッドでマンデルブロ画像を計算し、その結果をPILで表示します。これは、&lt;a href=&quot;http://shootout.alioth.debian.org/u64/benchmark.php?test=all&amp;amp;lang=luajit&amp;amp;lang2=python3&quot;&gt;Computer Language BenchmarksGameの&lt;/a&gt;&lt;a href=&quot;http://shootout.alioth.debian.org/u64/program.php?test=mandelbrot&amp;amp;lang=luajit&amp;amp;id=1&quot;&gt;ベンチマーク実装に&lt;/a&gt;基づいています。</target>
        </trans-unit>
        <trans-unit id="c7c7ff8a6b152356b1c3b87a4fa36cf4002b4367" translate="yes" xml:space="preserve">
          <source>The function</source>
          <target state="translated">関数</target>
        </trans-unit>
        <trans-unit id="2b6ea5139d2ef1b7ecc042d5db14deed8e309ae8" translate="yes" xml:space="preserve">
          <source>The next is an example of Lua coroutines.  A wrapped Lua coroutine
behaves exactly like a Python coroutine.  It needs to get created at
the beginning, either by using the</source>
          <target state="translated">次はLuaのコルーチンの例です。ラップされたLuaのコルーチンは、Pythonのコルーチンと全く同じように動作します。最初に作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="c9f80909fa6f8630b038f495a08cffc3e393a5fb" translate="yes" xml:space="preserve">
          <source>The only place where this cannot work is during iteration, because Lua
considers a</source>
          <target state="translated">これが動作しないのは、イテレーション中だけです。</target>
        </trans-unit>
        <trans-unit id="3ea08a710ccd5abee84ca77d28377d406d442756" translate="yes" xml:space="preserve">
          <source>There are some limitations:</source>
          <target state="translated">いくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="93667178ba5fd64dd5dc722560a8ab633086cf09" translate="yes" xml:space="preserve">
          <source>This enables access to Lua &amp;lsquo;methods&amp;rsquo; that are associated with a table,
as used by the standard library modules:</source>
          <target state="translated">これにより、標準ライブラリモジュールで使用されているように、テーブルに関連付けられているLuaの「メソッド」にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c6c56c99218608ecb8b7fc6da07ec256c352fbea" translate="yes" xml:space="preserve">
          <source>This is because</source>
          <target state="translated">これは</target>
        </trans-unit>
        <trans-unit id="5541d0b76d127f6a3c54bbc247ffcc1b6c2bbc25" translate="yes" xml:space="preserve">
          <source>Threading</source>
          <target state="translated">スレッディング</target>
        </trans-unit>
        <trans-unit id="d773911ed88672a1ffc4f4dfe86616e592b9e58f" translate="yes" xml:space="preserve">
          <source>To help in distinguishing between wrapped Lua objects and normal
Python objects, it returns</source>
          <target state="translated">ラップされた Lua オブジェクトと通常の Python オブジェクトを区別するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f016bdcf21e7be946954afd5a8b55cb79c732b20" translate="yes" xml:space="preserve">
          <source>To iterate over a plain Python iterable, use the</source>
          <target state="translated">Pythonのプレーン・イテレート可能な反復処理を行うには</target>
        </trans-unit>
        <trans-unit id="8e0f091f653b842293b69fd2363a88de752ce06d" translate="yes" xml:space="preserve">
          <source>To simplify the table creation from Python, the</source>
          <target state="translated">Pythonからのテーブル作成を簡単にするために</target>
        </trans-unit>
        <trans-unit id="b0f206dd39de7180d98eaa233b78208f67d54d84" translate="yes" xml:space="preserve">
          <source>To use binary modules in Lua, you need to compile them against the
header files of the LuaJIT sources that you used to build Lupa, but do
not link them against the LuaJIT library.</source>
          <target state="translated">Luaでバイナリモジュールを使用するには、Lupaのビルドに使用したLuaJITソースのヘッダファイルに対してコンパイルする必要がありますが、LuaJITライブラリに対してはリンクしないでください。</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">タイプエラー</target>
        </trans-unit>
        <trans-unit id="694f50881d7d3a5f4d7feed54d793899fed71b86" translate="yes" xml:space="preserve">
          <source>Unpack the archive into the lupa base directory, e.g.:</source>
          <target state="translated">アーカイブをlupaのベースディレクトリに展開します。</target>
        </trans-unit>
        <trans-unit id="10d4fac767cb9519f0cf8c2d75992c7495fd7e89" translate="yes" xml:space="preserve">
          <source>Use Lua 5.3.5 in binary wheels and as bundled Lua.</source>
          <target state="translated">Lua 5.3.5をバイナリホイールやバンドルされているLuaとして使用します。</target>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">いつの日になるか</target>
        </trans-unit>
        <trans-unit id="d3faa6093cb2b173ab36dd2c19f533262680b7ef" translate="yes" xml:space="preserve">
          <source>When calling bound Python methods from Lua as &amp;ldquo;obj:meth()&amp;rdquo;, Lupa now
prevents Python from prepending the self argument a second time, so that
the Python method is now called as &amp;ldquo;obj.meth()&amp;rdquo;.  Previously, it was called
as &amp;ldquo;obj.meth(obj)&amp;rdquo;.  Note that this can be undesired when the object itself
is explicitly passed as first argument from Lua, e.g. when calling
&amp;ldquo;func(obj)&amp;rdquo; where &amp;ldquo;func&amp;rdquo; is &amp;ldquo;obj.meth&amp;rdquo;, but these constellations should be
rare.  As a work-around for this case, user code can wrap the bound method
in another function so that the final call comes from Python.</source>
          <target state="translated">LuaからバインドされたPythonメソッドを「obj：meth（）」として呼び出す場合、LupaはPythonがself引数を再度付加しないようにするため、Pythonメソッドは「obj.meth（）」として呼び出されるようになりました。以前は、「obj.meth（obj）」と呼ばれていました。オブジェクト自体がLuaから最初の引数として明示的に渡される場合、たとえば「func」が「obj.meth」である「func（obj）」を呼び出す場合、これは望ましくない可能性があることに注意してください。ただし、これらのコンスタレーションはまれです。この場合の回避策として、ユーザーコードは、バインドされたメソッドを別の関数でラップして、最終的な呼び出しがPythonから行われるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="2a424160d3f332f44b32feec1f040118ec0cef13" translate="yes" xml:space="preserve">
          <source>When set to False, functions that return a tuple pass it through to the
Lua code:</source>
          <target state="translated">Falseに設定すると、タプルを返す関数がLuaコードに渡されます。</target>
        </trans-unit>
        <trans-unit id="d86a5675cc6478e7030415aaa83cd72801292548" translate="yes" xml:space="preserve">
          <source>While</source>
          <target state="translated">けれども、その間に</target>
        </trans-unit>
        <trans-unit id="bd45183335ffb14fc502cb3c14dab86e65f058b3" translate="yes" xml:space="preserve">
          <source>Why the name?</source>
          <target state="translated">なぜ名前を?</target>
        </trans-unit>
        <trans-unit id="c154a04c769441a48420e4a59edc95a7d78b7241" translate="yes" xml:space="preserve">
          <source>Why use it?</source>
          <target state="translated">なぜ使うのか?</target>
        </trans-unit>
        <trans-unit id="43ce99872a273c78cad7d71c415d0eb0e7a43324" translate="yes" xml:space="preserve">
          <source>Windows build fixes</source>
          <target state="translated">Windows ビルドの修正</target>
        </trans-unit>
        <trans-unit id="9b9d72b4c824f776fddb4d291d3479c138c827ea" translate="yes" xml:space="preserve">
          <source>Wrapped Lua objects get unwrapped when they are passed back into Lua,
and arbitrary Python objects get wrapped in different ways:</source>
          <target state="translated">WrappedされたLuaオブジェクトは、Luaに戻されるとアンラップされ、任意のPythonオブジェクトは異なる方法でラップされます。</target>
        </trans-unit>
        <trans-unit id="ee1f9951d1e1458b042ed8554442b3401ac88b18" translate="yes" xml:space="preserve">
          <source>You can find additional installation hints for MacOS-X in this
&lt;a href=&quot;http://t-p-j.blogspot.com/2010/11/lupa-on-os-x-with-macports-python-26.html&quot;&gt;somewhat unclear blog post&lt;/a&gt;, which may or may not tell you at
which point in the installation process to provide these flags.</source>
          <target state="translated">MacOS-Xの追加のインストールのヒントは、この &lt;a href=&quot;http://t-p-j.blogspot.com/2010/11/lupa-on-os-x-with-macports-python-26.html&quot;&gt;やや不明確なブログ投稿&lt;/a&gt;にあります。これは、インストールプロセスのどの時点でこれらのフラグを提供するかを示している場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="27f4d2f24fb01668d7628034c810f68c5a73ab28" translate="yes" xml:space="preserve">
          <source>__getitem__</source>
          <target state="translated">__getitem__</target>
        </trans-unit>
        <trans-unit id="f46d45e8d75816fc6af722964bbf2e0116c0506a" translate="yes" xml:space="preserve">
          <source>__tostring()</source>
          <target state="translated">__tostring（）</target>
        </trans-unit>
        <trans-unit id="40c562a3d6c7d70c7985444364e1851f4128eeef" translate="yes" xml:space="preserve">
          <source>accept optional positional arguments
(patch by John Vandenberg)</source>
          <target state="translated">オプションの位置引数を受け入れる (John Vandenberg によるパッチ)</target>
        </trans-unit>
        <trans-unit id="2ed76dc44638a91203cc151e537732232c3ff1f2" translate="yes" xml:space="preserve">
          <source>access to Python&amp;rsquo;s</source>
          <target state="translated">Pythonへのアクセス</target>
        </trans-unit>
        <trans-unit id="abbb1ad836bbc98032705582e8f66dcb3c2e53b4" translate="yes" xml:space="preserve">
          <source>added missing files to source distribution</source>
          <target state="translated">欠落しているファイルをソース配布に追加</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="559658ad12480c2413631a10e707592af46a2343" translate="yes" xml:space="preserve">
          <source>and returns the index before that.  This
works well for array tables that do not contain</source>
          <target state="translated">で、その前のインデックスを返します。これは</target>
        </trans-unit>
        <trans-unit id="48b31b068c14afdf94c3274907fdfd80aedbb77b" translate="yes" xml:space="preserve">
          <source>and subscripting of Lua objects</source>
          <target state="translated">とLuaオブジェクトの添え字</target>
        </trans-unit>
        <trans-unit id="d56ce2625c37622c57b2256eabbb2105b8840e5c" translate="yes" xml:space="preserve">
          <source>and therefore to the builtins etc.  If you want
to safely restrict access to a known set of Python objects, it is best
to work with a whitelist of safe attribute names.  One way to do that
could be to use a well selected list of dedicated API objects that you
provide to Lua code, and to only allow Python attribute access to the
set of public attribute/method names of these objects.</source>
          <target state="translated">そしてその結果、ビルドインなどへのアクセスを制限することができます。既知のPythonオブジェクトへのアクセスを安全に制限したい場合は、安全な属性名のホワイトリストを使用するのがベストです。その方法の一つとして、Luaコードに提供する専用APIオブジェクトを厳選したリストを使用し、これらのオブジェクトの公開属性/メソッド名のセットに対してのみPython属性のアクセスを許可するという方法があります。</target>
        </trans-unit>
        <trans-unit id="47f7f3104c9e12b378c8e7f7f8b898db0db46e92" translate="yes" xml:space="preserve">
          <source>and thus the
following unpacked items will never be mapped to</source>
          <target state="translated">にマッピングされることはありません。</target>
        </trans-unit>
        <trans-unit id="36c2f82b7b860765184be56e83f657110fdbecc3" translate="yes" xml:space="preserve">
          <source>argument&amp;rdquo; or &amp;ldquo;call</source>
          <target state="translated">引数」または「呼び出し</target>
        </trans-unit>
        <trans-unit id="21aa632bea277c3d730e42dee00088f9c0cc5032" translate="yes" xml:space="preserve">
          <source>argument&amp;rdquo;.</source>
          <target state="translated">引数&quot;。</target>
        </trans-unit>
        <trans-unit id="19aca5516b17e452e7b7b291f5ece1179d2a9386" translate="yes" xml:space="preserve">
          <source>argument).  Patch by Brian Moe.</source>
          <target state="translated">引数)を使用しています。Brian Moeによるパッチ。</target>
        </trans-unit>
        <trans-unit id="db8309b469b2f8e82f1db94383f5c7423cfddd19" translate="yes" xml:space="preserve">
          <source>as a</source>
          <target state="translated">として</target>
        </trans-unit>
        <trans-unit id="e9d4ba97940c3413e34cd514b7ef7f04852c22c9" translate="yes" xml:space="preserve">
          <source>as a parameter can mean either
&amp;ldquo;omit a parameter&amp;rdquo; or &amp;ldquo;pass None&amp;rdquo;.  This even depends on the Lua version.</source>
          <target state="translated">パラメータとしては、「パラメータを省略」または「パスなし」のいずれかを意味します。これはLuaのバージョンにも依存します。</target>
        </trans-unit>
        <trans-unit id="44b2b85ecf80cc5b480b0158de904c01eefa0d24" translate="yes" xml:space="preserve">
          <source>as follows:</source>
          <target state="translated">のように、次のように述べています。</target>
        </trans-unit>
        <trans-unit id="bebc3c2971a1e93dfded881d9dd68ccc1d8552f6" translate="yes" xml:space="preserve">
          <source>as_attrgetter()</source>
          <target state="translated">as_attrgetter()</target>
        </trans-unit>
        <trans-unit id="cb3b489c7d3f1c36582e21fedc7f1e25038e6422" translate="yes" xml:space="preserve">
          <source>as_itemgetter()</source>
          <target state="translated">as_itemgetter()</target>
        </trans-unit>
        <trans-unit id="613b5a9986468bc8bb7ab25161fda833fb1070a4" translate="yes" xml:space="preserve">
          <source>at call time if they are not callable)</source>
          <target state="translated">呼び出し可能でない場合は呼び出し時に)</target>
        </trans-unit>
        <trans-unit id="d7c0a9b0afc7b322bdbc1075a1f07419f89fe4d5" translate="yes" xml:space="preserve">
          <source>attrgetter</source>
          <target state="translated">アトリゲッター</target>
        </trans-unit>
        <trans-unit id="491928c51fb189313c321703b821aadde2aea79b" translate="yes" xml:space="preserve">
          <source>attribute read access on Lua objects, e.g. to read Lua table values
from Python</source>
          <target state="translated">Luaオブジェクトに対する属性読み取りアクセス、例えばPythonからLuaテーブルの値を読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="27bf7dbec2a090fbf6798ced4ccf67b841fabc45" translate="yes" xml:space="preserve">
          <source>attribute_handlers</source>
          <target state="translated">属性ハンドラ</target>
        </trans-unit>
        <trans-unit id="2c60b63a5614a533debe0f33edbb8fb544d6c8fd" translate="yes" xml:space="preserve">
          <source>availability of</source>
          <target state="translated">入手性</target>
        </trans-unit>
        <trans-unit id="e6e7b2e7cfe124ae7fa87ed5f68eec4cfff49665" translate="yes" xml:space="preserve">
          <source>bdist</source>
          <target state="translated">喧嘩っ早い</target>
        </trans-unit>
        <trans-unit id="99007dfaab843abf6b82cab6ba8e6c863bcb0418" translate="yes" xml:space="preserve">
          <source>both map
to indexing.  To decide which Python protocol to use for Lua wrapped
objects, Lupa employs a simple heuristic.</source>
          <target state="translated">はどちらもインデキシングに対応しています。Luaのラップオブジェクトに使用するPythonプロトコルを決定するために、Lupaはシンプルなヒューリスティックを採用しています。</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">つくりあげる</target>
        </trans-unit>
        <trans-unit id="9177923b86d48bb61db3d463d86af5de9d256157" translate="yes" xml:space="preserve">
          <source>built with Cython 0.20.1</source>
          <target state="translated">Cython 0.20.1 でビルドされています。</target>
        </trans-unit>
        <trans-unit id="d80150c16d664a77464db7162249ad628a3f856b" translate="yes" xml:space="preserve">
          <source>built with Cython 0.23.4</source>
          <target state="translated">Cython 0.23.4 でビルドされています。</target>
        </trans-unit>
        <trans-unit id="1903578e7ade96e5e357cfaa970f17f66ebd7db7" translate="yes" xml:space="preserve">
          <source>built with Cython 0.24</source>
          <target state="translated">Cython 0.24でビルドされています。</target>
        </trans-unit>
        <trans-unit id="c6d1ccf39079fb14194051e980fd5c055e878681" translate="yes" xml:space="preserve">
          <source>built with Cython 0.25.2</source>
          <target state="translated">Cython 0.25.2 でビルドされています。</target>
        </trans-unit>
        <trans-unit id="aeaba84990f715e46470157dc691d14182fcc956" translate="yes" xml:space="preserve">
          <source>callbacks returned from Lua coroutines were incorrectly mixing
coroutine state with global Lua state (patch by Mikhail Korobov)</source>
          <target state="translated">Luaコアーチンから返されるコールバックで、コアーチンの状態とグローバルLuaの状態が誤って混ざっていた(Mikhail Korobov氏によるパッチ)</target>
        </trans-unit>
        <trans-unit id="d8382dc7a4e6b5befef78ad93d091aa030899dd6" translate="yes" xml:space="preserve">
          <source>calling from Python into Lua and back into Python did not clean up the
Lua call arguments before the innermost call, so that they could leak
into the nested Python call or its return arguments</source>
          <target state="translated">PythonからLuaへの呼び出しとPythonへの呼び出しが、最内層の呼び出しの前にLua呼び出しの引数をクリーンアップしていなかったため、ネストされたPython呼び出しやその戻り値の引数に漏れてしまう可能性がありました。</target>
        </trans-unit>
        <trans-unit id="1d77a3a101c9107681d6c81bb4bd472e44991e59" translate="yes" xml:space="preserve">
          <source>can be used to find out the type of a
wrapped Lua object in Python code, as provided by Lua&amp;rsquo;s</source>
          <target state="translated">Luaの提供に従って、PythonコードでラップされたLuaオブジェクトのタイプを見つけるために使用できます</target>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">class</target>
        </trans-unit>
        <trans-unit id="02c0fad5479b89b9533ead95ef036525b58a6cfc" translate="yes" xml:space="preserve">
          <source>comes with
a helper method that creates a Lua table from Python arguments:</source>
          <target state="translated">には、Pythonの引数からLuaテーブルを作成するヘルパーメソッドが付属しています。</target>
        </trans-unit>
        <trans-unit id="7aa502d9d841ef8b8e9a74aa2355a3d5f9881e46" translate="yes" xml:space="preserve">
          <source>could appear and where a</source>
          <target state="translated">が現れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e32b11e586f0e5baaba039695f4ad1f878bf22d4" translate="yes" xml:space="preserve">
          <source>d.items</source>
          <target state="translated">d.項目</target>
        </trans-unit>
        <trans-unit id="4156089b8e686f82ffe83f5dfc09d8af90d716f9" translate="yes" xml:space="preserve">
          <source>d['items']</source>
          <target state="translated">d['アイテム']</target>
        </trans-unit>
        <trans-unit id="d9815119f3383407571f98c52af4231f319d403c" translate="yes" xml:space="preserve">
          <source>decorators to allow calling Python functions from Lua using named
arguments</source>
          <target state="translated">名前付き引数を使ってLuaからPython関数を呼び出せるようにするデコレータ</target>
        </trans-unit>
        <trans-unit id="499a12d64ce4abcc47122175eefbc7e045a4a4aa" translate="yes" xml:space="preserve">
          <source>decorators.
Depending on the context, passing</source>
          <target state="translated">デコレータを使用しています。コンテキストに応じて</target>
        </trans-unit>
        <trans-unit id="f46d8c331fd9bc90ba620364d15075ca0c0d174f" translate="yes" xml:space="preserve">
          <source>dict.iteritems()</source>
          <target state="translated">dict.iteritems()</target>
        </trans-unit>
        <trans-unit id="fa9f085d8fba241a2f9e443fe25d0f72a992ae06" translate="yes" xml:space="preserve">
          <source>dlopen</source>
          <target state="translated">dlopen</target>
        </trans-unit>
        <trans-unit id="64f65c8c6b9cc225862d92fca39b7ea285307314" translate="yes" xml:space="preserve">
          <source>does the right thing for array tables but does not
work on mappings:</source>
          <target state="translated">は配列テーブルに対しては正しく動作しますが、マッピングに対しては動作しません。</target>
        </trans-unit>
        <trans-unit id="ad3f9aa5e8b31b279c0727fde7e0afde67a3b436" translate="yes" xml:space="preserve">
          <source>dropped</source>
          <target state="translated">落とし</target>
        </trans-unit>
        <trans-unit id="1e77a4b700661479c096aaa0391f205d71502322" translate="yes" xml:space="preserve">
          <source>easy to hack on and extend as it is written in Cython, not C</source>
          <target state="translated">CではなくCythonで書かれているので、ハックも拡張も簡単です。</target>
        </trans-unit>
        <trans-unit id="8daba9d0aa7157bb48094b4228084753a6f1ff82" translate="yes" xml:space="preserve">
          <source>encoding fix for</source>
          <target state="translated">エンコーディング修正</target>
        </trans-unit>
        <trans-unit id="4e8c0ce4e4c03bcaf58c462a81276072c5374e96" translate="yes" xml:space="preserve">
          <source>enumerate()</source>
          <target state="translated">列挙する</target>
        </trans-unit>
        <trans-unit id="eeaafc577c4b787480d9b784e77c49e6c6cd3b4d" translate="yes" xml:space="preserve">
          <source>error reporting on Lua syntax errors failed to clean up the stack so
that errors could leak into the next Lua run</source>
          <target state="translated">Lua 構文エラーのエラー報告でスタックのクリーンアップに失敗し、次の Lua 実行時にエラーが漏れる可能性がありました。</target>
        </trans-unit>
        <trans-unit id="d9da5d7f12f67c4da28020e53a9d2c0bdb34ea76" translate="yes" xml:space="preserve">
          <source>eval()</source>
          <target state="translated">eval()</target>
        </trans-unit>
        <trans-unit id="52f3006f6aa57aee6d7509f8f483f39405447af6" translate="yes" xml:space="preserve">
          <source>execute()</source>
          <target state="translated">エグゼキューション()</target>
        </trans-unit>
        <trans-unit id="4921798009205f4d7b7f86af56914a123bbb015c" translate="yes" xml:space="preserve">
          <source>explicit encoding options per LuaRuntime instance to decode/encode
strings and Lua code</source>
          <target state="translated">文字列とLuaコードをデコード/エンコードするためのLuaRuntimeインスタンスごとの明示的なエンコーディングオプション</target>
        </trans-unit>
        <trans-unit id="2c824a99fd20c6ec51dbbd483ede0fdac0e1a521" translate="yes" xml:space="preserve">
          <source>first public release</source>
          <target state="translated">初公開</target>
        </trans-unit>
        <trans-unit id="469cb0c8a78d271064a07995ba4e0bf5a1bd310c" translate="yes" xml:space="preserve">
          <source>fix &amp;ldquo;deallocating None&amp;rdquo; crash while iterating over Lua tables in
Python code</source>
          <target state="translated">PythonコードでLuaテーブルを反復処理する際の「割り当て解除なし」のクラッシュを修正</target>
        </trans-unit>
        <trans-unit id="d41d5d66458a31ea8441777a92dcabb052aafe61" translate="yes" xml:space="preserve">
          <source>fix Cython generated C file using Cython 0.13</source>
          <target state="translated">Cython 0.13でCythonが生成したCファイルを修正しました。</target>
        </trans-unit>
        <trans-unit id="131f5b801428d45f87f1a916ace7eddf806c1b29" translate="yes" xml:space="preserve">
          <source>fix Lua stack leak during table iteration</source>
          <target state="translated">テーブルの反復処理時のLuaスタックリークを修正</target>
        </trans-unit>
        <trans-unit id="6f2efab1e06daa94109b9284493050e73d64e851" translate="yes" xml:space="preserve">
          <source>fix a crash when requesting attributes of wrapped Lua coroutine objects</source>
          <target state="translated">ラップされた Lua coroutine オブジェクトの属性を要求するとクラッシュする問題を修正</target>
        </trans-unit>
        <trans-unit id="17564768f77fd5bc0c1ebb62da8be0d7b352c301" translate="yes" xml:space="preserve">
          <source>fix a hang on shutdown where the LuaRuntime failed to deallocate due
to reference cycles</source>
          <target state="translated">シャットダウン時に、参照サイクルが原因でLuaRuntimeが解放に失敗するハングを修正</target>
        </trans-unit>
        <trans-unit id="fa37f80543e52d3521d6afc526f0edcb9295c570" translate="yes" xml:space="preserve">
          <source>fix compile warnings</source>
          <target state="translated">コンパイル時の警告を修正</target>
        </trans-unit>
        <trans-unit id="824bb9a13af77624bfebe4af75e1c872b0741b85" translate="yes" xml:space="preserve">
          <source>fix crash when calling</source>
          <target state="translated">呼び出し時のクラッシュを修正</target>
        </trans-unit>
        <trans-unit id="ef6697833df435377347a7a227e0a28f3c991512" translate="yes" xml:space="preserve">
          <source>fix iteration by returning</source>
          <target state="translated">返して反復を修正する</target>
        </trans-unit>
        <trans-unit id="1ccaec91beaa200fc3f796e131d10deaabf85c28" translate="yes" xml:space="preserve">
          <source>fix lost Lua object reference after iteration</source>
          <target state="translated">反復後に失われたLuaオブジェクトの参照を修正</target>
        </trans-unit>
        <trans-unit id="f8cd91a873d0e71a4a160ebfcc90360c2dc7a559" translate="yes" xml:space="preserve">
          <source>fix passing Lua objects back into the runtime from Python space</source>
          <target state="translated">Python空間からLuaオブジェクトをランタイムに戻すことを修正</target>
        </trans-unit>
        <trans-unit id="a0f409104bb7e7adf207e1d0e8a3c6ec80003834" translate="yes" xml:space="preserve">
          <source>fix regression in 0.13 and later where ordinary Lua functions failed
to print due to an accidentally used meta table</source>
          <target state="translated">0.13以降のリグレッションで、通常のLua関数が誤ってメタテーブルを使用したために印刷に失敗する問題を修正</target>
        </trans-unit>
        <trans-unit id="561efb18669ce20f033be1a9e8560c75dadeaff3" translate="yes" xml:space="preserve">
          <source>fix serious resource leak when creating multiple LuaRuntime instances</source>
          <target state="translated">複数の LuaRuntime インスタンスを作成する際の深刻なリソースリークを修正</target>
        </trans-unit>
        <trans-unit id="02516f8f18c88ac3b0727dad4e58ed7ed9dc4d08" translate="yes" xml:space="preserve">
          <source>fix several threading issues</source>
          <target state="translated">いくつかのスレッドの問題を修正</target>
        </trans-unit>
        <trans-unit id="f828494329e7c366ea0203537a8eb8c6fed335fb" translate="yes" xml:space="preserve">
          <source>fix: setting source encoding for Lua code was broken</source>
          <target state="translated">Lua コードのソースエンコーディング設定が壊れていたのを修正</target>
        </trans-unit>
        <trans-unit id="76358df5f8f06e55b9b3711055e4718b81277304" translate="yes" xml:space="preserve">
          <source>fixed Python special double-underscore method access on LuaObject
instances</source>
          <target state="translated">LuaObjectインスタンスでのPythonの特殊なダブルアンダースコアメソッドアクセスを修正</target>
        </trans-unit>
        <trans-unit id="5583521ce0d2fbf16090b1262c127bae65586b3c" translate="yes" xml:space="preserve">
          <source>fixed a thread locking issue</source>
          <target state="translated">スレッドロックの問題を修正</target>
        </trans-unit>
        <trans-unit id="d36caa5529fca679d63484ceb555cd4220d803b4" translate="yes" xml:space="preserve">
          <source>fixed several error handling problems when executing Python code
inside of Lua</source>
          <target state="translated">Lua内部でPythonコードを実行する際のエラー処理の問題を修正</target>
        </trans-unit>
        <trans-unit id="f64681cd30a7d63c01ef66f8d30128d79936e424" translate="yes" xml:space="preserve">
          <source>fixed undefined behaviour on</source>
          <target state="translated">での未定義の動作を修正しました。</target>
        </trans-unit>
        <trans-unit id="a98c950aad87d1c165834cfe873f52ccc9d224d5" translate="yes" xml:space="preserve">
          <source>flag indicates whether the attribute is being read
or set.</source>
          <target state="translated">フラグは、属性が読み込まれているか設定されているかを示します。</target>
        </trans-unit>
        <trans-unit id="d7cce284037d5ad644ab034f7524f7ca8fa153da" translate="yes" xml:space="preserve">
          <source>flag_values</source>
          <target state="translated">フラグ値</target>
        </trans-unit>
        <trans-unit id="73d3e230748f013e98ee30d9746ef2f50b52953d" translate="yes" xml:space="preserve">
          <source>flags
if it can find the platform specific</source>
          <target state="translated">フラグを見つけることができれば、プラットフォーム固有の</target>
        </trans-unit>
        <trans-unit id="0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33" translate="yes" xml:space="preserve">
          <source>foo</source>
          <target state="translated">フー</target>
        </trans-unit>
        <trans-unit id="1d5d1a02610cab6dfff78989c1dd16312d3ff7c7" translate="yes" xml:space="preserve">
          <source>for Python functions and</source>
          <target state="translated">Pythonの関数と</target>
        </trans-unit>
        <trans-unit id="434f60e44ad72af320acc9310cf24d894d6dda86" translate="yes" xml:space="preserve">
          <source>for each thread
to enable parallel execution.  Each</source>
          <target state="translated">を各スレッドに設定し、並列実行を可能にします。各</target>
        </trans-unit>
        <trans-unit id="40f06f98024a26ceca0900584e1cffa9826c4c9d" translate="yes" xml:space="preserve">
          <source>for functions where the first argument can be a Lua table.  In this case</source>
          <target state="translated">は、第一引数に Lua テーブルを指定できる関数の場合に使用します。この場合</target>
        </trans-unit>
        <trans-unit id="ad1413823e7c07c1001a3249a58d4fe985a4f0c7" translate="yes" xml:space="preserve">
          <source>for methods
of Python objects.</source>
          <target state="translated">Pythonオブジェクトのメソッドに対応しています。</target>
        </trans-unit>
        <trans-unit id="3deac2ace582235bea5c056e87437b54fe07ca5d" translate="yes" xml:space="preserve">
          <source>for normal Python objects</source>
          <target state="translated">通常のPythonオブジェクトの場合</target>
        </trans-unit>
        <trans-unit id="39bbd4b9e53784bc778b1171768f4c048307c584" translate="yes" xml:space="preserve">
          <source>for the latter:</source>
          <target state="translated">後者のために。</target>
        </trans-unit>
        <trans-unit id="1f47c727d8573a662c1b54c5e3bc9c2128fe1b16" translate="yes" xml:space="preserve">
          <source>frees the GIL and supports threading in separate runtimes when
calling into Lua</source>
          <target state="translated">GILを解放し、Luaへの呼び出し時に別のランタイムでのスレッド処理をサポートします。</target>
        </trans-unit>
        <trans-unit id="6fb80a8b181c13a181b911272498078179fff364" translate="yes" xml:space="preserve">
          <source>from Lua code</source>
          <target state="translated">Luaコードから</target>
        </trans-unit>
        <trans-unit id="2af7d23197950eb2ddb34965ea9bc212ea834eab" translate="yes" xml:space="preserve">
          <source>func(a, b, c)</source>
          <target state="translated">ファンク(a,b,c)</target>
        </trans-unit>
        <trans-unit id="95cb75072145432e8b6d902a7658bff1d42ded2b" translate="yes" xml:space="preserve">
          <source>func(foo, bar)</source>
          <target state="translated">func(foo,bar)</target>
        </trans-unit>
        <trans-unit id="c0af239f7ece17ad0732b9d7f22ea4c70c392999" translate="yes" xml:space="preserve">
          <source>function is also supported, so the above
could be simplified to:</source>
          <target state="translated">関数にも対応しているので、上記のように簡略化してもいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="a613722cc994e3aba324448e7c1757d61273f51f" translate="yes" xml:space="preserve">
          <source>function that
automatically explodes the tuple items into separate Lua arguments:</source>
          <target state="translated">タプル項目を自動的に別のLua引数に展開する関数。</target>
        </trans-unit>
        <trans-unit id="1198023229e62df1ffd6ef3a57077af5e7bfdad7" translate="yes" xml:space="preserve">
          <source>function.  For example, you can manually copy a Python list into a Lua
table like this:</source>
          <target state="translated">関数を使用しています。例えば、PythonのリストをLuaのテーブルに手動でコピーするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="1dfae75987ab2c547d85f2eedd53692b234672e0" translate="yes" xml:space="preserve">
          <source>function:</source>
          <target state="translated">関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="bf480041be16b735a1361915cf16e550aabe6ab8" translate="yes" xml:space="preserve">
          <source>func{foo, bar=bar}</source>
          <target state="translated">func{foo,bar=bar}の場合</target>
        </trans-unit>
        <trans-unit id="6ef2d59092e81f0b6001a8c2e135a4adccfe9bc4" translate="yes" xml:space="preserve">
          <source>func{foo=foo, bar=bar}</source>
          <target state="translated">func{foo=foo,bar=bar}を使用します。</target>
        </trans-unit>
        <trans-unit id="f6195054287167dc2dde0c89b036183ae9c8a42a" translate="yes" xml:space="preserve">
          <source>garbage collection works for reference cycles that span both runtimes,
Python and Lua</source>
          <target state="translated">ガベージコレクションは、PythonとLuaの両方のランタイムにまたがる参照サイクルで動作します。</target>
        </trans-unit>
        <trans-unit id="4660e0b64a6fde22a2585bae18ec4157116c5e0e" translate="yes" xml:space="preserve">
          <source>getitem</source>
          <target state="translated">取得項目</target>
        </trans-unit>
        <trans-unit id="fdc3a6d52ee378f40efae5eda271c94fc5d3075c" translate="yes" xml:space="preserve">
          <source>globals()</source>
          <target state="translated">globals()</target>
        </trans-unit>
        <trans-unit id="21ad8c69332fb04b4a95cecc4573684fff438e83" translate="yes" xml:space="preserve">
          <source>has a special meaning,
but leave it as</source>
          <target state="translated">には特別な意味がありますが、そのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="2f6090181c9c7ae90cc7512fcab7f4cbdd283aa4" translate="yes" xml:space="preserve">
          <source>helper function for Lua
code as it can be needed in cases where Lua cannot determine how to
run a Python function.</source>
          <target state="translated">LuaがPython関数の実行方法を判断できない場合に必要となることがあるため、Luaコード用のヘルパー関数です。</target>
        </trans-unit>
        <trans-unit id="c81a9e22670f561e49bbfe9c906c1b1897dbbf92" translate="yes" xml:space="preserve">
          <source>helper function for Lua as all
Python objects are callable from Lua now (potentially raising a</source>
          <target state="translated">Lua のヘルパー関数は、すべての Python オブジェクトが Lua から呼び出せるようになりました (潜在的には</target>
        </trans-unit>
        <trans-unit id="38771ef9fe2ec9797ec1eb9a6a76a14bc4c084f9" translate="yes" xml:space="preserve">
          <source>if they are</source>
          <target state="translated">であれば</target>
        </trans-unit>
        <trans-unit id="33acb9b2f4270c891c059b62ede0528f61e529be" translate="yes" xml:space="preserve">
          <source>in Lua can be disabled via</source>
          <target state="translated">で無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="52ea4eadc6756d2782436bf4ef914f0cd568b33f" translate="yes" xml:space="preserve">
          <source>in Lua differ in their semantics, they
usually just mean the same thing: no value.  Lupa therefore tries to map one
directly to the other whenever possible:</source>
          <target state="translated">とLuaではセマンティクスが異なりますが、通常は同じ意味の「値がない」という意味になります。そのためLupaでは可能な限り、両者を直接対応付けるようにしています。</target>
        </trans-unit>
        <trans-unit id="4f64025ea0692dff12969f9088c0493e68f12c77" translate="yes" xml:space="preserve">
          <source>in Lua that returns a Lua
iterator for a Python object and adds the 0-based index to each
item.</source>
          <target state="translated">PythonオブジェクトのLuaイテレータを返し、各項目に0ベースのインデックスを追加します。</target>
        </trans-unit>
        <trans-unit id="ddcafccc9bbded1d6f2fe7692f94272714f20fae" translate="yes" xml:space="preserve">
          <source>in Lua that returns a Lua
iterator for a Python object and unpacks any tuples that the
iterator yields.</source>
          <target state="translated">Python オブジェクトの Lua イテレータを返し、そのイテレータが生成するタプルをアンパックします。</target>
        </trans-unit>
        <trans-unit id="a8738e9d2805c2bab86024a3322e6a11d3ecac8d" translate="yes" xml:space="preserve">
          <source>in Lua that returns a Lua
iterator for a Python object.</source>
          <target state="translated">Python オブジェクトの Lua イテレータを返します。</target>
        </trans-unit>
        <trans-unit id="c71cd7c75898b815641d1a630448fe56be71db4f" translate="yes" xml:space="preserve">
          <source>in Lua)
becomes ambiguous: it could mean either &amp;ldquo;call</source>
          <target state="translated">Luaで）あいまいになります：それは「</target>
        </trans-unit>
        <trans-unit id="e79c4f06d940249792008fe9eb868261851868d1" translate="yes" xml:space="preserve">
          <source>in Lua, or otherwise
the loop terminates prematurely.  To prevent this, any</source>
          <target state="translated">を使用していない場合は、ループが早期に終了してしまうことがあります。これを防ぐために</target>
        </trans-unit>
        <trans-unit id="82a56b522de80f1209c876ffb7258e88349a5cb6" translate="yes" xml:space="preserve">
          <source>in Lua.</source>
          <target state="translated">をLuaで使用しています。</target>
        </trans-unit>
        <trans-unit id="4e695d2673364710d8be606b65ebc49993471a8c" translate="yes" xml:space="preserve">
          <source>in Python and</source>
          <target state="translated">Pythonと</target>
        </trans-unit>
        <trans-unit id="3312ba96da7f666584c3379429ffab4fd3371467" translate="yes" xml:space="preserve">
          <source>include .hg repository in source downloads</source>
          <target state="translated">ソースのダウンロードに .hg リポジトリを含める</target>
        </trans-unit>
        <trans-unit id="4bd27de62126037608cb85e028b81aaada0bd26f" translate="yes" xml:space="preserve">
          <source>inside of Lua).  A lookup is therefore more similar to the</source>
          <target state="translated">Luaの内部にある)。したがって、ルックアップは</target>
        </trans-unit>
        <trans-unit id="cb82821f5443620916128c66c024a61d87b0565d" translate="yes" xml:space="preserve">
          <source>instead of</source>
          <target state="translated">に代えて</target>
        </trans-unit>
        <trans-unit id="e1ddc932f03f8e3a7ce4f840ac3b77422c8b0f0a" translate="yes" xml:space="preserve">
          <source>instead of returning</source>
          <target state="translated">を返す代わりに</target>
        </trans-unit>
        <trans-unit id="6568964b0e39083c6acb94093d9e6cd117dbe508" translate="yes" xml:space="preserve">
          <source>instead.</source>
          <target state="translated">の代わりに</target>
        </trans-unit>
        <trans-unit id="ff4ab9b204b285da3579ffd625c1a5a28466b83b" translate="yes" xml:space="preserve">
          <source>is 2 and</source>
          <target state="translated">は2であり</target>
        </trans-unit>
        <trans-unit id="abb2934cf64d2cd4ff26cf907f7f6e6fcaf3d6d0" translate="yes" xml:space="preserve">
          <source>is 256, you
need to call</source>
          <target state="translated">が256の場合は</target>
        </trans-unit>
        <trans-unit id="cbfb75c96276207bef14780b5b014c0f82d8a853" translate="yes" xml:space="preserve">
          <source>is based on the</source>
          <target state="translated">をベースにしています。</target>
        </trans-unit>
        <trans-unit id="b4a03d4da15fb85822cb5d6ed9118226ffe1cccf" translate="yes" xml:space="preserve">
          <source>is protected by a
global lock that prevents concurrent access to it.  The low memory
footprint of Lua makes it reasonable to use multiple runtimes, but
this setup also means that values cannot easily be exchanged between
threads inside of Lua.  They must either get copied through Python
space (passing table references will not work, either) or use some Lua
mechanism for explicit communication, such as a pipe or some kind of
shared memory setup.</source>
          <target state="translated">はグローバルロックで保護されており、同時アクセスを防ぐことができます。Luaはメモリ使用量が少ないため、複数のランタイムを使用することは合理的ですが、この設定では、Lua内部のスレッド間で値を簡単に交換することができません。Python スペースを介してコピーするか(テーブル参照を渡すこともできません)、パイプや共有メモリの設定など、Lua のメカニズムを利用して明示的な通信を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="2c52731201b28b381bd563b4363f323774ddb207" translate="yes" xml:space="preserve">
          <source>is set up without auto-encoding (patch by Mikhail Korobov)</source>
          <target state="translated">は自動エンコードなしで設定されています(Mikhail Korobov氏によるパッチ</target>
        </trans-unit>
        <trans-unit id="ad88b5604d05c9037070f0f4432b8b54d67e6743" translate="yes" xml:space="preserve">
          <source>is_setting</source>
          <target state="translated">イズ設定</target>
        </trans-unit>
        <trans-unit id="06d72eda7f450b13112e8ed6fffbfc26320e2bb8" translate="yes" xml:space="preserve">
          <source>item and attribute access for Python objects from Lua code</source>
          <target state="translated">LuaコードからPythonオブジェクトへのアイテムと属性アクセス</target>
        </trans-unit>
        <trans-unit id="a09e6fabe65779cb74f707fe53fc04192acfc7ae" translate="yes" xml:space="preserve">
          <source>item assignments/lookups on Lua objects from Python no longer
special case double underscore names (as opposed to attribute lookups)</source>
          <target state="translated">Python からの Lua オブジェクトへのアイテム代入/ルックアップで、ダブルアンダースコア名の特殊なケースを使用しないようになりました(属性ルックアップではなく)。</target>
        </trans-unit>
        <trans-unit id="f233161e416ae0195702ed27ff9c88f723ede2d7" translate="yes" xml:space="preserve">
          <source>iteration support for Python objects in Lua and Lua objects in
Python</source>
          <target state="translated">LuaのPythonオブジェクトとPythonのLuaオブジェクトのイテレーションサポート</target>
        </trans-unit>
        <trans-unit id="adcd31419317a8d083ad74502081d18b6a2d3e34" translate="yes" xml:space="preserve">
          <source>iteration, the first value is known to be always a number and never None,
so no replacement is needed.</source>
          <target state="translated">の反復処理では、最初の値は常に数値であり、決して None ではないことが知られているので、置換は必要ありません。</target>
        </trans-unit>
        <trans-unit id="fc2636e1a83c384112dbfba2ad4fb89a72e20337" translate="yes" xml:space="preserve">
          <source>iteration, which yields a flat sequence
of counter and unpacked values.</source>
          <target state="translated">これは,カウンタとアンパックされた値のフラットなシーケンスを生成します.</target>
        </trans-unit>
        <trans-unit id="4b5179922db27d7c5ca384ef1582e47acbdd8ed1" translate="yes" xml:space="preserve">
          <source>iterator, the counter is never</source>
          <target state="translated">イテレータの場合、カウンタは決して</target>
        </trans-unit>
        <trans-unit id="a1ac1048afd36f6c030c3f2a6344482fb00904c0" translate="yes" xml:space="preserve">
          <source>len()</source>
          <target state="translated">len()</target>
        </trans-unit>
        <trans-unit id="c858c25d60aab7bd73c9752a393e5a10bc4ef0a0" translate="yes" xml:space="preserve">
          <source>looking up attributes on Lua objects that do not support it now always
raises an AttributeError instead of sometimes raising a TypeError depending
on the attribute name</source>
          <target state="translated">サポートされていない Lua オブジェクトの属性を検索すると、属性名に応じて TypeError が発生することがありましたが、常に AttributeError が発生するようになりました。</target>
        </trans-unit>
        <trans-unit id="58a46534f6f3ad8978fea0aa279909ee1c4359d7" translate="yes" xml:space="preserve">
          <source>lua_type(obj)</source>
          <target state="translated">lua_type(obj)</target>
        </trans-unit>
        <trans-unit id="900bac9f13ceef619b0b3779b0ac185caaf9bdb3" translate="yes" xml:space="preserve">
          <source>lupa</source>
          <target state="translated">ルパ</target>
        </trans-unit>
        <trans-unit id="3895a5e01517bc65d89870afb16fc4758a75da2e" translate="yes" xml:space="preserve">
          <source>lupa.lua_type()</source>
          <target state="translated">lupa.lua_type()</target>
        </trans-unit>
        <trans-unit id="0382731a337ada65432b5246babb90deac04be95" translate="yes" xml:space="preserve">
          <source>lupa.unpacks_lua_table</source>
          <target state="translated">lupa.unpacks_lua_table</target>
        </trans-unit>
        <trans-unit id="7bcbfc66ee83dabe86c79612cab7336ed361a2dc" translate="yes" xml:space="preserve">
          <source>lupa.unpacks_lua_table_method</source>
          <target state="translated">lupa.unpacks_lua_table_method</target>
        </trans-unit>
        <trans-unit id="5821eb27d7b71c9078000da31a5a654c97e401b9" translate="yes" xml:space="preserve">
          <source>make</source>
          <target state="translated">作る</target>
        </trans-unit>
        <trans-unit id="17f3467db103e03ea7354dd6da9a32c1ed2a07e8" translate="yes" xml:space="preserve">
          <source>messages</source>
          <target state="translated">伝言</target>
        </trans-unit>
        <trans-unit id="45329ea8d4970b82a7c6c1ba6380982306771eb6" translate="yes" xml:space="preserve">
          <source>meta method fails</source>
          <target state="translated">メタメソッド失敗</target>
        </trans-unit>
        <trans-unit id="bbd5fdcca228ab6cc01360efc76953eec1df5b2b" translate="yes" xml:space="preserve">
          <source>method for creating Lua tables from Python
space</source>
          <target state="translated">Python空間からLuaテーブルを作成するためのメソッド</target>
        </trans-unit>
        <trans-unit id="4abcc6b567bce25d066c9a6341dea2a5106645f2" translate="yes" xml:space="preserve">
          <source>method from Lua requires passing
the dict as</source>
          <target state="translated">メソッドに dict を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="5a47da9e768e5035aee2b4e4cfeb1e44e9c9dd58" translate="yes" xml:space="preserve">
          <source>method is not supported, though.</source>
          <target state="translated">メソッドはサポートされていませんが。</target>
        </trans-unit>
        <trans-unit id="16037d614d5fe0b1161535e483dbdbef72b40e9f" translate="yes" xml:space="preserve">
          <source>method of Python dicts than to a mapping lookup in Python.</source>
          <target state="translated">メソッドを使用して、PythonでのマッピングルックアップよりもPython辞書のメソッドを使用した方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="97b5611ae1828b561444ae204205fdd14719d91c" translate="yes" xml:space="preserve">
          <source>method of a
function or by creating it in Lua code.  Then, values can be sent into
it using the</source>
          <target state="translated">メソッドを使用するか、Lua コードで作成します。メソッドを使用して値を送ることができます。</target>
        </trans-unit>
        <trans-unit id="c893febfc9188f3603234649fa346f7faac53f41" translate="yes" xml:space="preserve">
          <source>method or it can be iterated over.  Note that
the</source>
          <target state="translated">メソッドを使用するか、イテレーションすることができます。メソッドがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fdf1715fe9cfc27c0cd19101d0ce0a9817c63698" translate="yes" xml:space="preserve">
          <source>method, it is preferred when turning it
into an indexable Lua object.  Otherwise, it becomes a simple object
that uses attribute access for indexing from inside Lua.</source>
          <target state="translated">メソッドを使用して、インデックス可能なLuaオブジェクトにする場合に優先されます。そうでない場合は、Lua内部からのインデックス作成に属性アクセスを使用する単純なオブジェクトになってしまいます。</target>
        </trans-unit>
        <trans-unit id="01a46fb52f0c14f92da476120be7afe1ef1ec52d" translate="yes" xml:space="preserve">
          <source>method:</source>
          <target state="translated">メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="b85dac7f646475d4018a5c35390352f94773c821" translate="yes" xml:space="preserve">
          <source>methods</source>
          <target state="translated">ほうほう</target>
        </trans-unit>
        <trans-unit id="e92be3b6cf3a747c22b8d3cb6709d8b0cf64fe80" translate="yes" xml:space="preserve">
          <source>module will automatically try to set up the correct</source>
          <target state="translated">モジュールは自動的に正しい</target>
        </trans-unit>
        <trans-unit id="f52c3507b87089397aa4eb0bda6de6825e48b3fd" translate="yes" xml:space="preserve">
          <source>more generic wrapping rules for Python objects based on supported
protocols (callable, getitem, getattr)</source>
          <target state="translated">サポートされているプロトコル (callable,getitem,getattr)に基づいた Python オブジェクトのより一般的なラッピングルール</target>
        </trans-unit>
        <trans-unit id="f9c1f39836a35d9b0aa550fcffee00ce2df4f0a7" translate="yes" xml:space="preserve">
          <source>much faster Lua iteration over Python objects</source>
          <target state="translated">Pythonオブジェクトに対するLuaの反復処理を大幅に高速化</target>
        </trans-unit>
        <trans-unit id="4d22f9af174ecbd7265dce5dd8547b674e5e6c48" translate="yes" xml:space="preserve">
          <source>much faster locking of the LuaRuntime, especially in the single
threaded case (see
&lt;a href=&quot;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&quot;&gt;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&lt;/a&gt;)</source>
          <target state="translated">特にシングルスレッドの場合、LuaRuntimeのはるかに高速なロック（&lt;a href=&quot;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&quot;&gt;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/を&lt;/a&gt;参照 ）</target>
        </trans-unit>
        <trans-unit id="67a26842a562476abf1266cf29f98eb4fd7dd52b" translate="yes" xml:space="preserve">
          <source>must represent the sum of your system&amp;rsquo;s values for</source>
          <target state="translated">システムの値の合計を表す必要があります</target>
        </trans-unit>
        <trans-unit id="253377428539d88eb03d3d0bb14ac3eb4a077e48" translate="yes" xml:space="preserve">
          <source>native implementation for</source>
          <target state="translated">ネイティブ実装</target>
        </trans-unit>
        <trans-unit id="c2a6b03f190dfb2b4aa91f8af8d477a9bc3401dc" translate="yes" xml:space="preserve">
          <source>new</source>
          <target state="translated">新しい</target>
        </trans-unit>
        <trans-unit id="54cb6460bf07c01ed1c6fead8a7a0b78ec83deb4" translate="yes" xml:space="preserve">
          <source>new helper function</source>
          <target state="translated">新ヘルパー機能</target>
        </trans-unit>
        <trans-unit id="c379c357000f6e1291b9e99adef4770de74eb230" translate="yes" xml:space="preserve">
          <source>new helper functions</source>
          <target state="translated">新ヘルパー機能</target>
        </trans-unit>
        <trans-unit id="2002321a63c759efd91afb7308edc2c3eeb7918a" translate="yes" xml:space="preserve">
          <source>new helper method</source>
          <target state="translated">ニューヘルパーメソッド</target>
        </trans-unit>
        <trans-unit id="b85eb1a078bd511baabe9b6f65fc1d0b202933a9" translate="yes" xml:space="preserve">
          <source>new module function</source>
          <target state="translated">しんモジュールきのう</target>
        </trans-unit>
        <trans-unit id="b5366a2d2ac98dae978423083f8b09e5cddc705d" translate="yes" xml:space="preserve">
          <source>nil</source>
          <target state="translated">nil</target>
        </trans-unit>
        <trans-unit id="f87130a4a321e176133575f91e58a12422c0dae6" translate="yes" xml:space="preserve">
          <source>no longer uses Cython by default when building from released sources (pass</source>
          <target state="translated">リリースされたソースからビルドする際にデフォルトでCythonを使用しないようになりました (パスを渡す)</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">一人もいない</target>
        </trans-unit>
        <trans-unit id="db45298a9195e9086b318d99f81639df8796adbc" translate="yes" xml:space="preserve">
          <source>obj.x</source>
          <target state="translated">ボリューム</target>
        </trans-unit>
        <trans-unit id="76df7bd6db360bf1830ef8a44f4b8bef492cde55" translate="yes" xml:space="preserve">
          <source>obj[x]</source>
          <target state="translated">obj[x]</target>
        </trans-unit>
        <trans-unit id="eed491613c4819446e5d2ab5b4bca3c06193ae84" translate="yes" xml:space="preserve">
          <source>object for</source>
          <target state="translated">対象</target>
        </trans-unit>
        <trans-unit id="e15833fe5bef847a2c11cfe020ed42d4ab8ff2dd" translate="yes" xml:space="preserve">
          <source>object in places where</source>
          <target state="translated">オブジェクトがある場所では</target>
        </trans-unit>
        <trans-unit id="b7d31746e2f960a48e312f66521ff3eb5c5d7385" translate="yes" xml:space="preserve">
          <source>object into Lua,</source>
          <target state="translated">オブジェクトをLuaに取り込むことができます。</target>
        </trans-unit>
        <trans-unit id="cd1d2a721e79c53a2b4dd7605b7b8b1b52bdf47d" translate="yes" xml:space="preserve">
          <source>on a Python object from Lua could fail if the</source>
          <target state="translated">をLuaからPythonオブジェクトに適用した場合に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b3d2563eaecaade4a5a217cb60f022dd0f175fc4" translate="yes" xml:space="preserve">
          <source>on wrapped Lua objects without
metatable</source>
          <target state="translated">ラップされたLuaオブジェクトでのメタテータブルなしでの</target>
        </trans-unit>
        <trans-unit id="14eb14ece52df99c284b819d9f8092e50aa1613e" translate="yes" xml:space="preserve">
          <source>option</source>
          <target state="translated">選択肢</target>
        </trans-unit>
        <trans-unit id="6cefac1bca917de259026a38e9ad3f0e1b17b0ba" translate="yes" xml:space="preserve">
          <source>option
to the setup.py script if you have both installed but do not want to
use LuaJIT2.</source>
          <target state="translated">オプションをsetup.pyスクリプトに追加してください。</target>
        </trans-unit>
        <trans-unit id="852219e3d43003e29d94a09fbce36e420497ac9c" translate="yes" xml:space="preserve">
          <source>option to the
setup.py script in order to ignore the failure you get when neither
LuaJIT2 nor Lua are found automatically.</source>
          <target state="translated">オプションをsetup.pyスクリプトに追加することで、LuaJIT2もLuaも自動的に見つからない場合に発生する失敗を無視できるようになります。</target>
        </trans-unit>
        <trans-unit id="12cb917fa6b139c69bd08293a23c4256c452e570" translate="yes" xml:space="preserve">
          <source>option.</source>
          <target state="translated">オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">或いは</target>
        </trans-unit>
        <trans-unit id="3d60d5ea27e93b01a5c4036a0a36152063da68f1" translate="yes" xml:space="preserve">
          <source>or one of the</source>
          <target state="translated">のいずれかを選択するか</target>
        </trans-unit>
        <trans-unit id="b9b4cc59dc3aeca62636a97763e2b62a1e1f5ac3" translate="yes" xml:space="preserve">
          <source>pairs()</source>
          <target state="translated">ペア()</target>
        </trans-unit>
        <trans-unit id="a16bcc57f3323cbfea902d6d4036348c807e8b24" translate="yes" xml:space="preserve">
          <source>portability fix for binary module importing</source>
          <target state="translated">バイナリモジュールのインポートの移植性の修正</target>
        </trans-unit>
        <trans-unit id="bfdba57c2ea525d68cd766e6ddc87ae634e2c0ff" translate="yes" xml:space="preserve">
          <source>posix</source>
          <target state="translated">ポジックス</target>
        </trans-unit>
        <trans-unit id="8ded8331bd0b99d9b65400d6fbce9e61c1091b80" translate="yes" xml:space="preserve">
          <source>propagate Python exceptions through Lua calls</source>
          <target state="translated">Python の例外を Lua の呼び出しで伝搬します。</target>
        </trans-unit>
        <trans-unit id="077bd55bde935f013c453e95ec1c8f52ed1d954a" translate="yes" xml:space="preserve">
          <source>proper encoding and decoding of strings (configurable per runtime,
UTF-8 by default)</source>
          <target state="translated">文字列の適切なエンコーディングとデコーディング (実行時に設定可能、デフォルトは UTF-8)</target>
        </trans-unit>
        <trans-unit id="126c1ee7fad9e93d978d3a33a80d76d14b830075" translate="yes" xml:space="preserve">
          <source>protocol of Python dicts and look up</source>
          <target state="translated">Pythonの辞書のプロトコルとルックアップ</target>
        </trans-unit>
        <trans-unit id="8d2b75a7d3917748a9c02ddfbf621b6920226a84" translate="yes" xml:space="preserve">
          <source>provide all built-in Lua libraries in</source>
          <target state="translated">ですべての組み込み Lua ライブラリを提供します。</target>
        </trans-unit>
        <trans-unit id="6dc818c4f7ab5a86737d55437fa2ac425070dbd2" translate="yes" xml:space="preserve">
          <source>py_func</source>
          <target state="translated">py_func</target>
        </trans-unit>
        <trans-unit id="060188feebebda53e12a9edf7223d44faf3ecec9" translate="yes" xml:space="preserve">
          <source>py_func({foo=bar})</source>
          <target state="translated">py_func({foo=bar})</target>
        </trans-unit>
        <trans-unit id="202987190b7ad7ec6eb32b047a574c29fc73932f" translate="yes" xml:space="preserve">
          <source>py_func{foo=bar}</source>
          <target state="translated">py_func{foo=bar}。</target>
        </trans-unit>
        <trans-unit id="6dd3c963ea9900e12319e369a03f0a3aeb764b3b" translate="yes" xml:space="preserve">
          <source>python.as_attrgetter()</source>
          <target state="translated">python.as_attrgetter()</target>
        </trans-unit>
        <trans-unit id="9b7def23d37188050101c5145cb4144f36526837" translate="yes" xml:space="preserve">
          <source>python.as_function()</source>
          <target state="translated">python.as_function()</target>
        </trans-unit>
        <trans-unit id="1dea09d94ab8b000327f91a071507d0b650bfcd5" translate="yes" xml:space="preserve">
          <source>python.as_itemgetter()</source>
          <target state="translated">python.as_itemgetter()</target>
        </trans-unit>
        <trans-unit id="fb6739ce028c2464bcac94422a0450f8ad43e872" translate="yes" xml:space="preserve">
          <source>python.builtins</source>
          <target state="translated">python.builtins</target>
        </trans-unit>
        <trans-unit id="51151b37d64a1c3f0240b2927248cf6d474fda5e" translate="yes" xml:space="preserve">
          <source>python.enumerate()</source>
          <target state="translated">python.enumerate()</target>
        </trans-unit>
        <trans-unit id="422aa673de03177a4a1829ce82a45cc4dc648fab" translate="yes" xml:space="preserve">
          <source>python.iter()</source>
          <target state="translated">python.iter()</target>
        </trans-unit>
        <trans-unit id="c98a8e5ebdad4efaa9a4830c34216a70ec19a000" translate="yes" xml:space="preserve">
          <source>python.iterex()</source>
          <target state="translated">python.iterex()</target>
        </trans-unit>
        <trans-unit id="6c20f9dc1bdbc1c1f382f62198814eec929dc3cf" translate="yes" xml:space="preserve">
          <source>python.none</source>
          <target state="translated">パイソンなし</target>
        </trans-unit>
        <trans-unit id="b87b7699b66742624edd07d56041ea21697ee3d5" translate="yes" xml:space="preserve">
          <source>reestablished the</source>
          <target state="translated">を再興しました。</target>
        </trans-unit>
        <trans-unit id="c5f6083d1d9b6c39985bd4a5f9aed667fc0fb537" translate="yes" xml:space="preserve">
          <source>relicensed to the MIT license used by LuaJIT2 to simplify licensing
considerations</source>
          <target state="translated">LuaJIT2で使用されているMITライセンスにリライセンスされており、ライセンスの検討を簡素化しています。</target>
        </trans-unit>
        <trans-unit id="61f68f80d5deb59af8ad42d02939a24f0ee05d42" translate="yes" xml:space="preserve">
          <source>removed redundant &amp;ldquo;error:&amp;rdquo; prefix from</source>
          <target state="translated">冗長な「error：」プレフィックスをから削除</target>
        </trans-unit>
        <trans-unit id="876207095ef6ea1315316230f0e9afb23f003c11" translate="yes" xml:space="preserve">
          <source>renamed</source>
          <target state="translated">改名</target>
        </trans-unit>
        <trans-unit id="c09d7f7a957041623c3e1ea1d198bd6aa3d1ca1a" translate="yes" xml:space="preserve">
          <source>replacement was done in more places, which made it not always very predictable.</source>
          <target state="translated">交換はより多くの場所で行われていたので、予想がつかないこともありました。</target>
        </trans-unit>
        <trans-unit id="82b30e0c46a81846dc358fbb7a0d6142d5893989" translate="yes" xml:space="preserve">
          <source>replacement, as Lua does not look at the
other items for loop termination anymore.  And on</source>
          <target state="translated">置換は、Luaがループ終了のために他の項目を見なくなったためです。また</target>
        </trans-unit>
        <trans-unit id="f644b7f7c3513bd8118b5fdb1b3b09e20b03d49e" translate="yes" xml:space="preserve">
          <source>repr()</source>
          <target state="translated">repr()</target>
        </trans-unit>
        <trans-unit id="eea1793e8c4f79e0033f2b564992592bd5fb55e0" translate="yes" xml:space="preserve">
          <source>requires Cython 0.20+ when building from unreleased sources</source>
          <target state="translated">未リリースのソースからビルドする場合はCython 0.20+が必要です。</target>
        </trans-unit>
        <trans-unit id="2704088ccad0a6987de61a24b6b74a18c67d9067" translate="yes" xml:space="preserve">
          <source>return values are now mapped to</source>
          <target state="translated">戻り値が</target>
        </trans-unit>
        <trans-unit id="a8b9b8957453675944c1878df38f3225c4313762" translate="yes" xml:space="preserve">
          <source>safely free the GIL when calling into Lua</source>
          <target state="translated">Luaへの呼び出し時にGILを安全に解放します。</target>
        </trans-unit>
        <trans-unit id="cdfba0f89cc10dd75ef24c3962eb9c456a52cbb4" translate="yes" xml:space="preserve">
          <source>separate Lua runtime states through a</source>
          <target state="translated">を介して、Lua の実行時の状態を分離します。</target>
        </trans-unit>
        <trans-unit id="ba360e3f8d69776bec51ab347b1e4a3939c5042b" translate="yes" xml:space="preserve">
          <source>setattr()</source>
          <target state="translated">setattr()</target>
        </trans-unit>
        <trans-unit id="9c62533f9ac69e6b0ea01e875a89acbc600eb765" translate="yes" xml:space="preserve">
          <source>some garbage collection issues were cleaned up using new Cython features</source>
          <target state="translated">いくつかのガベージコレクションの問題は、新しい Cython の機能を使ってクリーンアップされました。</target>
        </trans-unit>
        <trans-unit id="bc57d3a09ec228bf44a591efbcce5a122a6e6ea3" translate="yes" xml:space="preserve">
          <source>some internal wrapper classes were removed from the module API</source>
          <target state="translated">いくつかの内部ラッパークラスがモジュールAPIから削除されました。</target>
        </trans-unit>
        <trans-unit id="3346abc026c7e2630a0511db843d74222dbf1533" translate="yes" xml:space="preserve">
          <source>str()</source>
          <target state="translated">str()</target>
        </trans-unit>
        <trans-unit id="18d2279ea687baefc491055d0fc847feb4279db6" translate="yes" xml:space="preserve">
          <source>str() on Lua objects</source>
          <target state="translated">Lua オブジェクトの str()</target>
        </trans-unit>
        <trans-unit id="33adf6087b673894ccec7f140619fca041c7f438" translate="yes" xml:space="preserve">
          <source>str(LuaObject)</source>
          <target state="translated">str(LuaObject)</target>
        </trans-unit>
        <trans-unit id="b4fb261c0c5019b8099b8f248954a82136c4133c" translate="yes" xml:space="preserve">
          <source>str(lua_object)</source>
          <target state="translated">str(lua_object)</target>
        </trans-unit>
        <trans-unit id="330f8f10b9eac0e33060bc805fc8688a3b09a82a" translate="yes" xml:space="preserve">
          <source>support for</source>
          <target state="translated">支持</target>
        </trans-unit>
        <trans-unit id="948fabe3526ed03155c3a4071ea19bafef7b7a20" translate="yes" xml:space="preserve">
          <source>support for Lua 5.2 (in addition to Lua 5.1 and LuaJIT 2.0)</source>
          <target state="translated">Lua 5.2に対応(Lua 5.1、LuaJIT 2.0に加えて</target>
        </trans-unit>
        <trans-unit id="37ecbe2bcaf6d72040599aad47cba1d0908fb57a" translate="yes" xml:space="preserve">
          <source>support for Lua objects</source>
          <target state="translated">Lua オブジェクトのサポート</target>
        </trans-unit>
        <trans-unit id="36c2cbb0ac8f8c08a6a8dbaa976b2bba9bf49492" translate="yes" xml:space="preserve">
          <source>support for building with Lua 5.1 instead of LuaJIT (setup.py &amp;ndash;no-luajit)</source>
          <target state="translated">LuaJITの代わりにLua5.1を使用したビルドのサポート（setup.py &amp;ndash;no-luajit）</target>
        </trans-unit>
        <trans-unit id="262dcaa53f1c58dd1ea55e36b38cb22a782969b5" translate="yes" xml:space="preserve">
          <source>support for counter start value in</source>
          <target state="translated">カウンタ開始値のサポート</target>
        </trans-unit>
        <trans-unit id="170ceb7361e8d4fbe2d9f5e3d57f0e8e61d57474" translate="yes" xml:space="preserve">
          <source>support for filtering attribute access to Python objects for Lua
code</source>
          <target state="translated">LuaコードのPythonオブジェクトへのフィルタリング属性アクセスをサポート</target>
        </trans-unit>
        <trans-unit id="760f4cbfaa3a5bbb1138d8e799fafb519f4605de" translate="yes" xml:space="preserve">
          <source>support for loading binary Lua modules on systems that support it</source>
          <target state="translated">サポートされているシステムでのバイナリ Lua モジュールのロードに対応しています。</target>
        </trans-unit>
        <trans-unit id="42c56abff9cf554503d2118bf9508b2b537773fb" translate="yes" xml:space="preserve">
          <source>support for returning multiple values from Lua evaluation</source>
          <target state="translated">Lua 評価から複数の値を返すことができるようになりました。</target>
        </trans-unit>
        <trans-unit id="f34912cfb4b9e2e3de6ccc83c89812580d34427d" translate="yes" xml:space="preserve">
          <source>syntax is used.</source>
          <target state="translated">構文が使用されます。</target>
        </trans-unit>
        <trans-unit id="9262a595e51690c526b21db0537ce6d1b3fd09c2" translate="yes" xml:space="preserve">
          <source>sys.setdlopenflags(258)</source>
          <target state="translated">sys.setdlopenflags(258)</target>
        </trans-unit>
        <trans-unit id="2567bca63af4ecfed1c60b4131ac8e355a7f59df" translate="yes" xml:space="preserve">
          <source>sys.setdlopenflags(flag_values)</source>
          <target state="translated">sys.setdlopenflags(flag_values)</target>
        </trans-unit>
        <trans-unit id="52f530bc43095de4b2692fc2adba54ca1e6451de" translate="yes" xml:space="preserve">
          <source>targets.  See the &lt;a href=&quot;http://docs.python.org/install/index.html#install-index&quot;&gt;distutils
documentation&lt;/a&gt; for help, also the &lt;a href=&quot;http://docs.python.org/install/index.html#building-extensions-tips-and-tricks&quot;&gt;hints on building extension
modules&lt;/a&gt;.</source>
          <target state="translated">ターゲット。ヘルプについては、&lt;a href=&quot;http://docs.python.org/install/index.html#install-index&quot;&gt;distutilsのドキュメント&lt;/a&gt;と、&lt;a href=&quot;http://docs.python.org/install/index.html#building-extensions-tips-and-tricks&quot;&gt;拡張モジュールの構築に関するヒントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ece2fbe11cd1022c911508ff1fa02121846474c6" translate="yes" xml:space="preserve">
          <source>tested with Python 2.6/3.2 and later</source>
          <target state="translated">Python 2.6/3.2 以降でテスト済み</target>
        </trans-unit>
        <trans-unit id="f7bda9423290f2e43199bb6a8a776565fe92d814" translate="yes" xml:space="preserve">
          <source>that creates a Lua
table from one or more Python mappings and/or sequences</source>
          <target state="translated">1つ以上のPythonのマッピングおよび/またはシーケンスからLuaテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="f8bc3b2f58b7d77f5c85b4e9d3010619aff856f9" translate="yes" xml:space="preserve">
          <source>that is passed to create
the Lua runtime.  It is new in Lupa 0.21 and changes the behaviour of
tuples that get returned by Python functions.  With this flag, they
explode into separate Lua values:</source>
          <target state="translated">を渡すことでLuaランタイムを作成します。このフラグはLupa 0.21で新しく追加されたもので、Pythonの関数から返されるタプルの挙動を変更します。このフラグを指定すると、タプルは別のLua値に分解されます。</target>
        </trans-unit>
        <trans-unit id="6c0b47491adf7e3c709d22a9a040d075a3d8e410" translate="yes" xml:space="preserve">
          <source>that is several
times faster</source>
          <target state="translated">数倍速い</target>
        </trans-unit>
        <trans-unit id="9076c435cb96c3a9e3637c6ad6cc3210007d94ca" translate="yes" xml:space="preserve">
          <source>that restrict the view on
an object to a certain protocol, both from Python and from inside
Lua:</source>
          <target state="translated">PythonとLuaの両方から、オブジェクトの表示を特定のプロトコルに制限する機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="1937e40170d18c8eaad882a9e759a32b84783ce0" translate="yes" xml:space="preserve">
          <source>that returns the Lua type of
a wrapped object as string, or</source>
          <target state="translated">ラップされたオブジェクトの Lua 型を文字列で返します。</target>
        </trans-unit>
        <trans-unit id="74a00bd949000a4fbee529a416ff65c7d158ef5c" translate="yes" xml:space="preserve">
          <source>threading fixes</source>
          <target state="translated">スレッド修正</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">にとって</target>
        </trans-unit>
        <trans-unit id="b79342c070052f48161baae97d4e032008b282f3" translate="yes" xml:space="preserve">
          <source>to
specify the Python object protocol used by Lua indexing when
wrapping Python objects in Python code</source>
          <target state="translated">Python オブジェクトを Python コードでラップする際に Lua インデックスで使用する Python オブジェクトプロトコルを指定します。</target>
        </trans-unit>
        <trans-unit id="9dfaea0877ab5cd6fcf17490b5540ee612d98ba2" translate="yes" xml:space="preserve">
          <source>to compile Lua code
without executing it.
(patch by TitanSnow)</source>
          <target state="translated">を使ってLuaコードを実行せずにコンパイルすることができます。(TitanSnowによるパッチ)</target>
        </trans-unit>
        <trans-unit id="3145f8d3c6e50c2e5cdb404cd3c22180494122cd" translate="yes" xml:space="preserve">
          <source>to explicitly request a rebuild)</source>
          <target state="translated">を使用して明示的に再構築を要求します)</target>
        </trans-unit>
        <trans-unit id="ee0a4dbf00524fd8f31d27d8f8a6730a60dbecd0" translate="yes" xml:space="preserve">
          <source>to make sure it only builds
for your system instead of trying to generate a fat binary with
both 32bit and 64bit support:</source>
          <target state="translated">を使用して、32ビットと64ビットの両方をサポートしているファットバイナリを生成しようとするのではなく、お使いのシステム用にのみビルドするようにしてください。</target>
        </trans-unit>
        <trans-unit id="5b0812f6a3455482e6ebd8869e89de410969c5aa" translate="yes" xml:space="preserve">
          <source>to pass None values
robustly.  Arguments with</source>
          <target state="translated">を使用して None の値をロバストに渡すことができます。引数に</target>
        </trans-unit>
        <trans-unit id="ff08ac956c8bedc1996555de4d2e3201d9c72816" translate="yes" xml:space="preserve">
          <source>to specify
the Python object protocol used by Lua indexing of Python objects in
Lua code</source>
          <target state="translated">Lua コード内の Python オブジェクトのインデックス作成に使用する Python オブジェクトプロトコルを指定します。</target>
        </trans-unit>
        <trans-unit id="2f746d02fe588180e5eec4bbf6e7e14f76d8a306" translate="yes" xml:space="preserve">
          <source>type()</source>
          <target state="translated">タイプ()</target>
        </trans-unit>
        <trans-unit id="202167667485d34238ea26416f8bd31583ecdeac" translate="yes" xml:space="preserve">
          <source>unpack_returned_tuples</source>
          <target state="translated">アンパックリターンされたタプル</target>
        </trans-unit>
        <trans-unit id="a8b4fd3402f761ca2f89eb666f6435081a312fca" translate="yes" xml:space="preserve">
          <source>unpack_returned_tuples=True</source>
          <target state="translated">unpack_returned_tuples=True</target>
        </trans-unit>
        <trans-unit id="b97b84e78295387162eee58061b30b5673be8881" translate="yes" xml:space="preserve">
          <source>value
that the iterator returns, or any first item in exploded tuples that is</source>
          <target state="translated">の値、または爆発したタプルの中の最初の項目で</target>
        </trans-unit>
        <trans-unit id="7e9c1167a7988d84d7054b83677ef2c777e0a23e" translate="yes" xml:space="preserve">
          <source>value the termination marker of iterators.  Therefore,
Lupa special cases</source>
          <target state="translated">の値がイテレータの終了マーカーになります。したがって、Lupaの特殊なケース</target>
        </trans-unit>
        <trans-unit id="395e02423462b36f2983a614a245f762e0334bb9" translate="yes" xml:space="preserve">
          <source>value was used.  The only remaining exception is during iteration,
where the first returned value must not be</source>
          <target state="translated">の値が使用されました。唯一残っている例外は繰り返しの間だけで、最初に返される値は</target>
        </trans-unit>
        <trans-unit id="764d3c6bd54b900e518622aef44dadce683868a0" translate="yes" xml:space="preserve">
          <source>values are also fine when standard braces</source>
          <target state="translated">の値は標準中括弧でも問題ありません。</target>
        </trans-unit>
        <trans-unit id="79f5d6abd88e8a43ed52cdbdb0005f600a33eb22" translate="yes" xml:space="preserve">
          <source>values here and replaces them by a constant</source>
          <target state="translated">の値を定数</target>
        </trans-unit>
        <trans-unit id="107fda61ca79a6745e33fe82b6e6c70b7410bac2" translate="yes" xml:space="preserve">
          <source>values to callables wrapped in</source>
          <target state="translated">でラップされたコールアブルへの値</target>
        </trans-unit>
        <trans-unit id="8aa50c0b4fc7430006990c51bb8aaa04d7df32be" translate="yes" xml:space="preserve">
          <source>values, gives
barely predictable results for tables with &amp;lsquo;holes&amp;rsquo; and does not work
at all for mapping tables.  For tables with both sequential and
mapping content, this ignores the mapping part completely.</source>
          <target state="translated">値は、「穴」のあるテーブルに対してほとんど予測できない結果をもたらし、テーブルのマッピングに対してはまったく機能しません。シーケンシャルコンテンツとマッピングコンテンツの両方を含むテーブルの場合、これはマッピング部分を完全に無視します。</target>
        </trans-unit>
        <trans-unit id="8eea0510277c3ace162b3dca3dd62bbdb9b10c4f" translate="yes" xml:space="preserve">
          <source>when converting Python values to Lua, represent</source>
          <target state="translated">Python の値を Lua に変換する場合は</target>
        </trans-unit>
        <trans-unit id="fa23e947ae90af68227d129672949fe30c5cf364" translate="yes" xml:space="preserve">
          <source>when the object&amp;rsquo;s</source>
          <target state="translated">オブジェクトのとき</target>
        </trans-unit>
        <trans-unit id="3ec2759340f6a9c931c7a7f336b91fda5b9f4f30" translate="yes" xml:space="preserve">
          <source>where it doesn&amp;rsquo;t hurt</source>
          <target state="translated">痛くないところ</target>
        </trans-unit>
        <trans-unit id="8fc9f37b048ce421936b97a26b5769bf726ebe1b" translate="yes" xml:space="preserve">
          <source>which automatically
unpacks tuples returned from Python functions into separate Lua objects
(instead of returning a single Python tuple object)</source>
          <target state="translated">Python 関数から返されたタプルを自動的に個別の Lua オブジェクトにアンパックします (単一の Python タプルオブジェクトを返すのではなく)。</target>
        </trans-unit>
        <trans-unit id="b1d663c4ddb5fca0dfcf7f866f74408de7be1261" translate="yes" xml:space="preserve">
          <source>with a named</source>
          <target state="translated">名前付き</target>
        </trans-unit>
        <trans-unit id="a634859784837ac1cf61a7dce921f6c6a0a7a11d" translate="yes" xml:space="preserve">
          <source>with a positional</source>
          <target state="translated">位置的に</target>
        </trans-unit>
        <trans-unit id="6411996d9d043cf1410c90e9b8a52ca58a60c244" translate="yes" xml:space="preserve">
          <source>written for LuaJIT2 (tested with LuaJIT 2.0.2), but also works
with the normal Lua interpreter (5.1 and 5.2)</source>
          <target state="translated">LuaJIT2用に書かれていますが(LuaJIT 2.0.2でテスト済み)、通常のLuaインタプリタ(5.1と5.2)でも動作します。</target>
        </trans-unit>
        <trans-unit id="dc2935b70ad43836e2e74df2d9758b1e51397997" translate="yes" xml:space="preserve">
          <source>{foo=bar}</source>
          <target state="translated">{foo = bar}</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
