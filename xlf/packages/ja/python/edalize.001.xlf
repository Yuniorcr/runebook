<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/edalize/">
    <body>
      <group id="edalize">
        <trans-unit id="460a25395cb88a0253f6d94a6f6583cae534a278" translate="yes" xml:space="preserve">
          <source>, and then run it with a parameter to control simulated clock frequency.</source>
          <target state="translated">、次にパラメータを指定して実行し、シミュレートされたクロック周波数を制御します。</target>
        </trans-unit>
        <trans-unit id="7ebba9ffffc46e236ade83e935eeeffecf379455" translate="yes" xml:space="preserve">
          <source>.
Then there&amp;rsquo;s also a testbench called</source>
          <target state="translated">。次に、というテストベンチもあります</target>
        </trans-unit>
        <trans-unit id="711ee7f5712d24652b92979ccd38f348dc292e8f" translate="yes" xml:space="preserve">
          <source>.
You can get those files from &lt;a href=&quot;https://github.com/fusesoc/blinky&quot;&gt;blinky&lt;/a&gt; and for</source>
          <target state="translated">。あなたは&lt;a href=&quot;https://github.com/fusesoc/blinky&quot;&gt;まばたき&lt;/a&gt;からそしてのためにそれらのファイルを得ることができます</target>
        </trans-unit>
        <trans-unit id="fce0ab600d2933e71f37fbd7146f9f6276bf9fb7" translate="yes" xml:space="preserve">
          <source>. Or we could skip it altogether, and the default value from the configure stage would be used. Let&amp;rsquo;s run with VCD logging enabled:</source>
          <target state="translated">。または、それを完全にスキップして、configureステージのデフォルト値を使用することもできます。VCDロギングを有効にして実行しましょう：</target>
        </trans-unit>
        <trans-unit id="b46348b8f3042b1dc57a3747afed967a17d80670" translate="yes" xml:space="preserve">
          <source>. The testbench also
has an option to enable waveform dumping by setting a plusarg called</source>
          <target state="translated">。テストベンチには、というplusargを設定して波形ダンプを有効にするオプションもあります。</target>
        </trans-unit>
        <trans-unit id="3a924ab25b49cb0b1c9aef2dcf934d461f944d61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Edalize it, don&amp;rsquo;t criticize it!&lt;/strong&gt;&lt;strong&gt;Edalize it, and I will advertise it!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;それをエダライズしてください、それを批判しないでください！&lt;/strong&gt;&lt;strong&gt;それをエダライズしてください、そして私はそれを宣伝します！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17ebf5e9417d20ad0829bbb4e65b8995ebad1a0c" translate="yes" xml:space="preserve">
          <source>All EDA tools such as Icarus, Yosys, ModelSim, Vivado, Verilator, GHDL, Quartus etc get input HDL files (Verilog and VHDL) and some tool-specific files (constraint files, memory initialization files, IP description files etc). Together with the files, perhaps a couple of Verilog `defines, some top-level parameters/generics or some tool-specific options are set. Once the configuration is done, a simulation model, netlist or FPGA image is built, and in the case of simulations, the model is also executed, maybe with some extra run-time parameters.</source>
          <target state="translated">Icarus,Yosys,ModelSim,Vivado,Verilator,GHDL,QuartusなどのすべてのEDAツールは、入力HDLファイル(VerilogとVHDL)とツール固有のファイル(制約ファイル、メモリ初期化ファイル、IP記述ファイルなど)を取得します。これらのファイルと一緒に、いくつかのVerilogの定義、トップレベルのパラメータやジェネリック、ツール固有のオプションが設定されます。コンフィギュレーションが完了すると、シミュレーション・モデル、ネットリスト、FPGAイメージが作成され、シミュレーションの場合は、ランタイム・パラメータを追加してモデルが実行されます。</target>
        </trans-unit>
        <trans-unit id="f04346c9b14aa1e2dc53081a2b3b56dbf8aeac27" translate="yes" xml:space="preserve">
          <source>And finally run it, with our arguments. Some types of parameters (e.g. plusargs) are defined aat runtime, and at this point we can change their value by passing the name and new value to</source>
          <target state="translated">そして最後に引数を指定して実行します。いくつかのタイプのパラメータ(例:plusargs)は実行時に定義されており、この時点ではパラメータの名前と新しい値を</target>
        </trans-unit>
        <trans-unit id="67492b9b30fbd61b1d14fc098d280246e3a07208" translate="yes" xml:space="preserve">
          <source>And put it all into a single data structure together with some info about the toplevel and name for the project:</source>
          <target state="translated">そして、それをすべて一つのデータ構造体にまとめ、トップレベルの情報とプロジェクトの名前を入力します。</target>
        </trans-unit>
        <trans-unit id="f1e0d4f63ebd29901652b379795e0eb1dfcbd982" translate="yes" xml:space="preserve">
          <source>As you have seen, Edalize is an award-winning tool for interfacing EDA tools, so</source>
          <target state="translated">見ての通り、EdalizeはEDAツールとのインターフェイスのための賞を受賞しているツールです。</target>
        </trans-unit>
        <trans-unit id="2d46c258895968d92747aca439c679856375f5a7" translate="yes" xml:space="preserve">
          <source>Assume we have a project that consists of a Verilog source file called</source>
          <target state="translated">というVerilogソースファイルからなるプロジェクトがあるとします。</target>
        </trans-unit>
        <trans-unit id="94d873bc74c843f84372114e02f7e3007c8e0f93" translate="yes" xml:space="preserve">
          <source>At this point, we still haven&amp;rsquo;t run the actual EDA tool and the files in the</source>
          <target state="translated">この時点では、実際のEDAツールとファイルはまだ実行されていません。</target>
        </trans-unit>
        <trans-unit id="15355334677940ca226d6420d966d84c54348f3c" translate="yes" xml:space="preserve">
          <source>Build the simulation model:</source>
          <target state="translated">シミュレーションモデルを構築します。</target>
        </trans-unit>
        <trans-unit id="b644287a00ccafd0b3c0c207a253072a29c74554" translate="yes" xml:space="preserve">
          <source>Create the directory and the project files:</source>
          <target state="translated">ディレクトリとプロジェクトファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="9dfe4884d89d809060eca3e9407cb552c62ceac9" translate="yes" xml:space="preserve">
          <source>Dread not! Edalize takes care of this for you. By telling Edalize what files you have, together with some info, what parametrization to use at compile- and run-time (e.g. plusargs, defines, generics, parameters), VPI library sources (when applicable) and any other tool-specific options not already mentioned, it will create the necessary project files and offer to build and run it for you.</source>
          <target state="translated">Dread not! Edalizeがこれを代行してくれます。Edalizeに、あなたが持っているファイルと情報、コンパイル時と実行時に使用するパラメトリゼーション(例:plusargs,define,generics,parameters)、VPIライブラリのソース(該当する場合)、その他のツール固有のオプションを伝えることで、必要なプロジェクトファイルを作成し、あなたのためにビルドと実行を提供してくれます。</target>
        </trans-unit>
        <trans-unit id="3b38658d027fbfc3d86f3535f8eb739a9e46cb21" translate="yes" xml:space="preserve">
          <source>Edalize is a Python Library for interacting with EDA tools. It can create project files for supported tools and run them in batch or GUI mode (where supported).</source>
          <target state="translated">EdalizeはEDAツールと対話するためのPythonライブラリです。サポートされているツール用のプロジェクトファイルを作成し、バッチまたはGUIモード(サポートされている場合)で実行することができます。</target>
        </trans-unit>
        <trans-unit id="6ac5488e478b00139f53c29df69a5d1edac38a30" translate="yes" xml:space="preserve">
          <source>Edalize is a Python module. Then once downloaded we can install it with
following Python command:</source>
          <target state="translated">EdalizeはPythonモジュールです。ダウンロードしたら、以下のPythonコマンドでインストールします。</target>
        </trans-unit>
        <trans-unit id="9717ffd1fd53971ac86bfb2c9c8e6183ee0164d4" translate="yes" xml:space="preserve">
          <source>Edalize is a Python tool, then we can run it inside a Python script file or
directly in the Python console.</source>
          <target state="translated">EdalizeはPythonツールなので、Pythonスクリプトファイルの中で実行したり、Pythonコンソールで直接実行したりすることができます。</target>
        </trans-unit>
        <trans-unit id="b33fc087e3c60205a7d6b6e4d717734ee3ef727f" translate="yes" xml:space="preserve">
          <source>Edalize is a library for interfacing EDA tools, primarily for FPGA development</source>
          <target state="translated">Edalizeは、主にFPGA開発のためのEDAツールをインターフェイスするためのライブラリです。</target>
        </trans-unit>
        <trans-unit id="f5c724862c13cb0f32787f22eb025739a67f24e9" translate="yes" xml:space="preserve">
          <source>First we have to import Edalize objects:</source>
          <target state="translated">まず、Edalizeオブジェクトをインポートします。</target>
        </trans-unit>
        <trans-unit id="0312f8c6ecf65ccaefe478d32a396d7fe11129b2" translate="yes" xml:space="preserve">
          <source>For a simulation, we want to use the two Verilog files, build it in a subdirectory called</source>
          <target state="translated">シミュレーションのために、2つのVerilogファイルを使用したい場合は、以下のサブディレクトリにビルドします。</target>
        </trans-unit>
        <trans-unit id="5a3af79b01e7f107ad0671c6788a469b93f8e1ad" translate="yes" xml:space="preserve">
          <source>How to use it?</source>
          <target state="translated">どうやって使うの?</target>
        </trans-unit>
        <trans-unit id="5d28aa5c3f5f864624758280797d60a6e8cc60fb" translate="yes" xml:space="preserve">
          <source>Install it</source>
          <target state="translated">インストールしてください</target>
        </trans-unit>
        <trans-unit id="2043ab103db471787545635670b5d2fe2a717c7d" translate="yes" xml:space="preserve">
          <source>It allows you to quickly switch tools, at least when it comes to simulators. This is highly useful to shake out tool-specific bugs, or just to let you work with your weapon of choice.</source>
          <target state="translated">これを使えば、少なくともシミュレータの場合は、ツールを素早く切り替えることができます。ツール特有のバグを振り払うのにも、自分の好きな武器で作業させるのにも非常に便利です。</target>
        </trans-unit>
        <trans-unit id="93fdcf91f5d1658bdfb8b7d5cec5025b2e8f589c" translate="yes" xml:space="preserve">
          <source>It can also be used to just get a quick template that you can open up in the tool&amp;rsquo;s GUI if there is such, and continue working from there.</source>
          <target state="translated">また、ツールのGUIで開くことができるクイックテンプレートを取得し、そこから作業を続行するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="c21332b6aa36f052e268b5595517058d4803f61f" translate="yes" xml:space="preserve">
          <source>It can be directly integrated as a library for your existing Python-powered HDL project, or can be used stand-alone (soon anyway) to feed Edalize from projects written in other languages.</source>
          <target state="translated">既存のPythonで動くHDLプロジェクトのためのライブラリとして直接統合することもできますし、スタンドアロンで(いずれにせよ近いうちに)他の言語で書かれたプロジェクトからEdalizeに供給することもできます。</target>
        </trans-unit>
        <trans-unit id="7eddbb861b4b6fcf0c38b112825f6b8e70df5ed7" translate="yes" xml:space="preserve">
          <source>Let Edalize know we intend to use Icarus Verilog for our simulation:</source>
          <target state="translated">シミュレーションにIcarus Verilogを使用することをEdalizeに伝えてください。</target>
        </trans-unit>
        <trans-unit id="2763a18ffbef7cdf00c67e62201bcd1b0a20ec23" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to create an FPGA image instead</source>
          <target state="translated">代わりにFPGAイメージを作成する時が来ました</target>
        </trans-unit>
        <trans-unit id="11deed86fd2ca82b1cc491dd4dd6d9896257c822" translate="yes" xml:space="preserve">
          <source>Now we need to get ourselves a backend object from Edalize:</source>
          <target state="translated">ここで、Edalizeからバックエンドオブジェクトを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5569ecaac0adae33393fb4c716fbb49cd78e3cf" translate="yes" xml:space="preserve">
          <source>Ok, this sounds great. Now, how do I get started?</source>
          <target state="translated">OK、これは素晴らしいことだ。さて、どうやって始めようかな?</target>
        </trans-unit>
        <trans-unit id="81f306fa9f2104ad0970b13508e0d8ec5d3ba86b" translate="yes" xml:space="preserve">
          <source>See source code for further details.</source>
          <target state="translated">詳細はソースコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="ed8364e54c55a479b8e6f39bbb85b0323457d9d2" translate="yes" xml:space="preserve">
          <source>Tada! We have simulated. As an exercise, try to just change the tool variable to e.g. modelsim, xsim or any of the other simulators supported by Edalize and see if it works without any changes.</source>
          <target state="translated">タダ!シミュレーションができました。練習として、ツール変数をmodelsim,xsim,Edalizeがサポートしている他のシミュレータなどに変更してみて、何も変更せずに動作するかどうかを見てみてください。</target>
        </trans-unit>
        <trans-unit id="2c673fad51e8998785267683a52f59a2fdc567f3" translate="yes" xml:space="preserve">
          <source>The design has a toplevel Verilog parameter with the name</source>
          <target state="translated">このデザインは、トップレベルのVerilogパラメータに</target>
        </trans-unit>
        <trans-unit id="4a5f04cfa2646a6411b9bbce19d94ce63814c3f5" translate="yes" xml:space="preserve">
          <source>The os module is also required for this tutorial:</source>
          <target state="translated">このチュートリアルでは、OSモジュールも必要になります。</target>
        </trans-unit>
        <trans-unit id="67a71057959242412a00f73a70c76871cc8fed7d" translate="yes" xml:space="preserve">
          <source>The thing is, all these tools are doing this in completely different ways and there&amp;rsquo;s generally no way to import configurations from one simulator to another.</source>
          <target state="translated">重要なのは、これらのツールはすべてこれをまったく異なる方法で実行しており、通常、あるシミュレーターから別のシミュレーターに構成をインポートする方法はありません。</target>
        </trans-unit>
        <trans-unit id="078e4dfbd491fda0f4db5a99e75dc67320474513" translate="yes" xml:space="preserve">
          <source>Then register the files to use:</source>
          <target state="translated">そして、使用するファイルを登録します。</target>
        </trans-unit>
        <trans-unit id="e4698f00fd38de3c922bfd483e8a1384f3d6f913" translate="yes" xml:space="preserve">
          <source>This will save you from having to deal with the boring stuff of interfacing the EDA tools yourself, while still have pretty much full power to set up the project the way you want.</source>
          <target state="translated">これにより、EDAツールを自分でインターフェイスするという退屈な作業から解放されます。</target>
        </trans-unit>
        <trans-unit id="dd6cb77a0659a3d52a82d922b5fe57156ac08fa7" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s this?</source>
          <target state="translated">これは何ですか？</target>
        </trans-unit>
        <trans-unit id="f464238dd5a91479083d9fcb05cf40b38119c8db" translate="yes" xml:space="preserve">
          <source>and a constraints file for synthesis called</source>
          <target state="translated">と呼ばれる合成用の制約ファイルと</target>
        </trans-unit>
        <trans-unit id="608cd7846c435ee24ae5d4b2f88f10126174e7ba" translate="yes" xml:space="preserve">
          <source>blinky.v</source>
          <target state="translated">ブリンキー</target>
        </trans-unit>
        <trans-unit id="005630791c057cd51eb0c23ba1006266a3ae03a5" translate="yes" xml:space="preserve">
          <source>blinky_tb.v</source>
          <target state="translated">blinky_tb.v</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">つくりあげる</target>
        </trans-unit>
        <trans-unit id="c7824641df903748e69482c26b0c53d7a0a633c7" translate="yes" xml:space="preserve">
          <source>clk_freq_hz</source>
          <target state="translated">clk_freq_hz</target>
        </trans-unit>
        <trans-unit id="e2e36f5eeec1dbfe424f52bd33380ad0559a3fa3" translate="yes" xml:space="preserve">
          <source>constraints.sdc</source>
          <target state="translated">制約条件.sdc</target>
        </trans-unit>
        <trans-unit id="74bb2d76efbddcf927bd6676400e84db657b4f94" translate="yes" xml:space="preserve">
          <source>directory can be used without Edalize if that is preferred. But let&amp;rsquo;s continue the example with Edalize.</source>
          <target state="translated">必要に応じて、Edalizeなしでディレクトリを使用できます。しかし、Edalizeで例を続けましょう。</target>
        </trans-unit>
        <trans-unit id="00f90da41c1d2f1c4be8e728b74a058d3376c7de" translate="yes" xml:space="preserve">
          <source>in &lt;a href=&quot;https://github.com/fusesoc/vlog_tb_utils/blob/master/vlog_tb_utils.v&quot;&gt;orpsoc-cores&lt;/a&gt;.</source>
          <target state="translated">中&lt;a href=&quot;https://github.com/fusesoc/vlog_tb_utils/blob/master/vlog_tb_utils.v&quot;&gt;orpsoc-コア&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f805aaf52532959faf0be97c80abde3c8ae5e849" translate="yes" xml:space="preserve">
          <source>run()</source>
          <target state="translated">ラン()</target>
        </trans-unit>
        <trans-unit id="73b04c4cec8b01e3b9b12628278aefec0240da8c" translate="yes" xml:space="preserve">
          <source>that accepts integers. We set its default value to</source>
          <target state="translated">は整数を受け付けることができます。デフォルト値を</target>
        </trans-unit>
        <trans-unit id="d7176438bb72b4ae6b7444ccfa29af622f3c03c7" translate="yes" xml:space="preserve">
          <source>vcd</source>
          <target state="translated">VCD</target>
        </trans-unit>
        <trans-unit id="64ba003b5e80d6f16edae9f35c0c00aa7bc8c2c4" translate="yes" xml:space="preserve">
          <source>vlog_tb_utils.v</source>
          <target state="translated">vlog_tb_utils.v</target>
        </trans-unit>
        <trans-unit id="e4a8408776e5338937b198443915b8b72ba74261" translate="yes" xml:space="preserve">
          <source>work_root</source>
          <target state="translated">ワークルート</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
