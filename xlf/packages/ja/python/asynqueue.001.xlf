<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/asynqueue/">
    <body>
      <group id="asynqueue">
        <trans-unit id="66179e04cd581cd55472563ee8587ce658020aeb" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing based on the &lt;em&gt;Twisted&lt;/em&gt; framework, with task
prioritization and a powerful worker interface. Worker implementations
are included for running tasks asynchronously in the main thread, in
separate threads, in separate Python interpreters (multiprocessing),
and even on separate devices using Twisted's Asynchronous Message
Protocol.</source>
          <target state="translated">&lt;em&gt;Twisted&lt;/em&gt;フレームワークに基づく非同期タスクキューイング。タスクの優先順位付けと強力なワーカーインターフェイスを備えています。メインスレッド、個別のスレッド、個別のPythonインタープリター（マルチプロセッシング）、およびTwistedの非同期メッセージプロトコルを使用する個別のデバイスで非同期にタスクを実行するためのワーカー実装が含まれています。</target>
        </trans-unit>
        <trans-unit id="6128a235c0fd39685f6b5b99b7fadbfec5342418" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing with Twisted: threaded, multicore, and remote.</source>
          <target state="translated">Twistedを使った非同期タスクキューイング:スレッド、マルチコア、リモート。</target>
        </trans-unit>
        <trans-unit id="959199c5e1b1d30e53adfe003d916868a2a40023" translate="yes" xml:space="preserve">
          <source>Includes an example package
&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; that generates
Mandelbrot set images, row by row, demonstrating the power of
asynchronous multi-core processing. An instance of
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;
dispatches the computations for each row of pixels to workers running
on separate Python processes. The color-mapped RGB results are
collected as they come back and intelligently buffered for iterating
in a proper sequence to a third-party PNG library that wouldn't
ordinarily play nice with Twisted.</source>
          <target state="translated">非同期マルチコア処理の威力を示す、マンデルブロー集合イメージを行&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;ごと&lt;/a&gt;に生成するサンプルパッケージmcMandelbrotが含まれています 。&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;のインスタンスは 、ピクセルの各行の計算を、別々のPythonプロセスで実行されているワーカーにディスパッチします。カラーマップされたRGBの結果は、戻ってきたときに収集され、通常はTwistedでうまく機能しないサードパーティのPNGライブラリに適切な順序で反復するためにインテリジェントにバッファーされます。</target>
        </trans-unit>
        <trans-unit id="85daa8d0fd14d30741e29b572dbfda1d090a6fc9" translate="yes" xml:space="preserve">
          <source>Includes deferred iteration capability: Calling a task that returns an
iterator can return a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;
instead, which does the iteration in a Twisted-friendly fashion, even
over a network connection. You can also supply an object conforming to
Twisted's &lt;em&gt;IConsumer&lt;/em&gt; interface and iterations will be fed to it as they
become available.</source>
          <target state="translated">遅延反復機能が含まれます。イテレーターを返すタスクを呼び出すと、 代わりに&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;を返すことができ ます。これにより、ネットワーク接続を介しても、Twistedフレンドリーな方法で反復が実行されます。Twistedの&lt;em&gt;IConsumer&lt;/em&gt;インターフェースに準拠したオブジェクトを提供することもできます。イテレーションは、利用可能になったときに供給されます。</target>
        </trans-unit>
        <trans-unit id="169b63918b76adefc1f65fe3ec1bfb21b732f5ab" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;util&lt;/em&gt; module contains a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt;
object that makes the import worthwhile all on its own. You can use
its &lt;strong&gt;put&lt;/strong&gt; method to track Twisted &lt;em&gt;Deferred&lt;/em&gt; objects without inserting
anything into their callback chains. Then you can wait in non-blocking
Twisted fashion for all, any, or some of the tracked deferreds to fire
(again, without getting tangled up with any of their callbacks) using
the tracker's &lt;strong&gt;deferToAll&lt;/strong&gt;, &lt;strong&gt;deferToAny&lt;/strong&gt;, and &lt;strong&gt;deferUntilFewer&lt;/strong&gt;
methods.</source>
          <target state="translated">&lt;em&gt;UTILの&lt;/em&gt;モジュールが含まれてい &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTrackerの&lt;/a&gt; 独自に輸入価値があるすべてを作るのオブジェクトを。その&lt;strong&gt;put&lt;/strong&gt;メソッドを使用して、コールバックチェーンに何も挿入せずにTwisted &lt;em&gt;Deferred&lt;/em&gt;オブジェクトを追跡できます。その後、トラッカーの&lt;strong&gt;deferToAll&lt;/strong&gt;、&lt;strong&gt;deferToAny&lt;/strong&gt;、および&lt;strong&gt;deferUntilFewer&lt;/strong&gt; メソッドを使用して、追跡された&lt;strong&gt;遅延オブジェクトの&lt;/strong&gt;すべて、一部、または一部が発火するまでノンブロッキングのTwisted方式で待機できます（これも、コールバックに絡まることはありません）。</target>
        </trans-unit>
        <trans-unit id="eb7d5439f2d9250bf009f7a2be477526c15559f6" translate="yes" xml:space="preserve">
          <source>There was some effort toward Python 3 compatiblity a while ago, but
it's still not yet supported.</source>
          <target state="translated">少し前にPython 3との互換性に向けた取り組みがありましたが、まだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="9f5ed9620d68c79dd8003b36b7a5bc59d3c01f81" translate="yes" xml:space="preserve">
          <source>You can try things out after installation by running &lt;code&gt;mcmandelbrot&lt;/code&gt;
(with a few options and arguments) from the console. The output of the
script is a PNG file, which you can view by piping to the free Feh
image viewer: Just add &lt;code&gt;|feh -&lt;/code&gt; at the end of the command line.</source>
          <target state="translated">インストール後 、コンソールから &lt;code&gt;mcmandelbrot&lt;/code&gt; を（いくつかのオプションと引数を指定して）実行することで、さまざまなことを試すことができます。スクリプトの出力はPNGファイルであり、パイプを使用して無料の &lt;code&gt;|feh -&lt;/code&gt; 画像ビューアーに表示できます。コマンドラインの最後に| feh-を追加するだけです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
