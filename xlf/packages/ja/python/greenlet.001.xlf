<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/greenlet/">
    <body>
      <group id="greenlet">
        <trans-unit id="adaf11e77976b1db3da41bdce39ee80caf89a041" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;greenlet&amp;rdquo;, on the other hand, is a still more primitive notion of
micro-thread with no implicit scheduling; coroutines, in other
words. This is useful when you want to control exactly when your code
runs. You can build custom scheduled micro-threads on top of greenlet;
however, it seems that greenlets are useful on their own as a way to
make advanced control flow structures. For example, we can recreate
generators; the difference with Python&amp;rsquo;s own generators is that our
generators can call nested functions and the nested functions can
yield values too. Additionally, you don&amp;rsquo;t need a &amp;ldquo;yield&amp;rdquo; keyword. See
the example in tests/test_generator.py.</source>
          <target state="translated">一方、「グリーンレット」は、暗黙的なスケジューリングのない、さらに原始的なマイクロスレッドの概念です。言い換えれば、コルーチン。これは、コードの実行時間を正確に制御する場合に役立ちます。グリーンレットの上にカスタムのスケジュールされたマイクロスレッドを構築できます。ただし、グリーンレットは、高度な制御フロー構造を作成する方法として、それ自体で役立つようです。たとえば、ジェネレータを再作成できます。Python独自のジェネレーターとの違いは、ジェネレーターがネストされた関数を呼び出すことができ、ネストされた関数も値を生成できることです。さらに、「yield」キーワードは必要ありません。tests /test_generator.pyの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="60014bf21723832fcd770695f34a2ac6aec40c31" translate="yes" xml:space="preserve">
          <source>Concurrence</source>
          <target state="translated">コンサーレンス</target>
        </trans-unit>
        <trans-unit id="7520bc16833b40c80f4836415af1e67e592d9eb1" translate="yes" xml:space="preserve">
          <source>Documentation is available on readthedocs.org:
&lt;a href=&quot;https://greenlet.readthedocs.io&quot;&gt;https://greenlet.readthedocs.io&lt;/a&gt;</source>
          <target state="translated">ドキュメントはreadthedocs.orgで入手できます：&lt;a href=&quot;https://greenlet.readthedocs.io&quot;&gt;https&lt;/a&gt;：//greenlet.readthedocs.io</target>
        </trans-unit>
        <trans-unit id="b9da9768d496d27402246e22f29b0761f331bfbc" translate="yes" xml:space="preserve">
          <source>Eventlet</source>
          <target state="translated">イベントレット</target>
        </trans-unit>
        <trans-unit id="7efd500ce749859ca01e5cc53af1010721d004f0" translate="yes" xml:space="preserve">
          <source>Getting Greenlet</source>
          <target state="translated">グリーンレットの取得</target>
        </trans-unit>
        <trans-unit id="17c6bf64bf960c6bdea9f0d103dff20d00bac154" translate="yes" xml:space="preserve">
          <source>Gevent</source>
          <target state="translated">ジベント</target>
        </trans-unit>
        <trans-unit id="8acb83f8c59e6a6e068dd420a5d0211d89e1d7f1" translate="yes" xml:space="preserve">
          <source>Greenlets are lightweight coroutines for in-process concurrent
programming.</source>
          <target state="translated">グリーンレットは、インプロセス並行プログラミングのための軽量なコルーチンです。</target>
        </trans-unit>
        <trans-unit id="f27faa7a89962aeacdd62df8f836120e07b78ab3" translate="yes" xml:space="preserve">
          <source>Greenlets are provided as a C extension module for the regular
unmodified interpreter.</source>
          <target state="translated">Greenletsは、通常の未修正インタープリタ用のC拡張モジュールとして提供されています。</target>
        </trans-unit>
        <trans-unit id="e40cbbce7df1c68eee0b19a19ffb661a38fea3fa" translate="yes" xml:space="preserve">
          <source>Lightweight in-process concurrent programming</source>
          <target state="translated">軽量なインプロセス並列プログラミング</target>
        </trans-unit>
        <trans-unit id="e7ec99eb4b2a357ad2c0bdfbf1b28a834e064c15" translate="yes" xml:space="preserve">
          <source>Source code archives and windows installers are available on the
python package index at &lt;a href=&quot;https://pypi.python.org/pypi/greenlet&quot;&gt;https://pypi.python.org/pypi/greenlet&lt;/a&gt;</source>
          <target state="translated">ソースコードアーカイブとWindowsインストーラーは、&lt;a href=&quot;https://pypi.python.org/pypi/greenlet&quot;&gt;https：&lt;/a&gt; //pypi.python.org/pypi/greenletのpythonパッケージインデックスで入手できます。</target>
        </trans-unit>
        <trans-unit id="b2dc5153f8439f3cb766c2df9f108c08510ba3b0" translate="yes" xml:space="preserve">
          <source>The easiest way to get Greenlet is to install it with pip or
easy_install:</source>
          <target state="translated">Greenletを入手する最も簡単な方法は、pipかeasy_installでインストールすることです。</target>
        </trans-unit>
        <trans-unit id="2deb206c5b8f85bdbe71c431cb50181956dfffdf" translate="yes" xml:space="preserve">
          <source>The greenlet package is a spin-off of Stackless, a version of CPython
that supports micro-threads called &amp;ldquo;tasklets&amp;rdquo;. Tasklets run
pseudo-concurrently (typically in a single or a few OS-level threads)
and are synchronized with data exchanges on &amp;ldquo;channels&amp;rdquo;.</source>
          <target state="translated">グリーンレットパッケージは、「タスクレット」と呼ばれるマイクロスレッドをサポートするCPythonのバージョンであるStacklessのスピンオフです。タスクレットは疑似並行して（通常は単一またはいくつかのOSレベルのスレッドで）実行され、「チャネル」でのデータ交換と同期されます。</target>
        </trans-unit>
        <trans-unit id="9420aa3967b9c02613ac42e1885a5577856eaefe" translate="yes" xml:space="preserve">
          <source>The source code repository is hosted on github:
&lt;a href=&quot;https://github.com/python-greenlet/greenlet&quot;&gt;https://github.com/python-greenlet/greenlet&lt;/a&gt;</source>
          <target state="translated">ソースコードリポジトリはgithubでホストされています：&lt;a href=&quot;https://github.com/python-greenlet/greenlet&quot;&gt;https&lt;/a&gt;： //github.com/python-greenlet/greenlet</target>
        </trans-unit>
        <trans-unit id="fb772fb5d10a97b18252ef57c9235142ecf5d922" translate="yes" xml:space="preserve">
          <source>There are several libraries that use Greenlet as a more flexible
alternative to Python&amp;rsquo;s built in coroutine support:</source>
          <target state="translated">Pythonの組み込みコルーチンサポートのより柔軟な代替手段としてGreenletを使用するライブラリがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="aa78f0f42358f5844d68bc1f02e3f2d268741a61" translate="yes" xml:space="preserve">
          <source>Who is using Greenlet?</source>
          <target state="translated">グリーンレットを使っている人は?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
