<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/before-after/">
    <body>
      <group id="before-after">
        <trans-unit id="80f3160f7e67652f7d467528409312b621b9acc3" translate="yes" xml:space="preserve">
          <source>, that allow you to insert pre or post functions to be called before/after a function you want to test.</source>
          <target state="translated">、テストする関数の前後に呼び出される事前関数または事後関数を挿入できます。</target>
        </trans-unit>
        <trans-unit id="3a2105bc6c4eecf2bf5fe5a6ceb5d643b1715b78" translate="yes" xml:space="preserve">
          <source>By default, before_after only calls the before_fn/after_fn function once. This is useful if you&amp;rsquo;re calling the original function within the before_fn/after_fn, since otherwise you&amp;rsquo;ll blow the stack. This behaviour can be disabled by passing</source>
          <target state="translated">デフォルトでは、before_afterはbefore_fn / after_fn関数を1回だけ呼び出します。これは、before_fn / after_fn内で元の関数を呼び出す場合に役立ちます。そうしないと、スタックが空になります。この動作は、</target>
        </trans-unit>
        <trans-unit id="861245b8779c3c0a240081e66f72046983ca7d16" translate="yes" xml:space="preserve">
          <source>Example usage</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="d744c34a6b8bbf13676c941edd6a0ac5bbf49ddd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s recommended that if you&amp;rsquo;re passing</source>
          <target state="translated">合格する場合は、</target>
        </trans-unit>
        <trans-unit id="27352b2b463b7c072417a02bbdfc4fc80c3a786d" translate="yes" xml:space="preserve">
          <source>Patching</source>
          <target state="translated">パッチング</target>
        </trans-unit>
        <trans-unit id="b3c73885d1911d34e3ab2bde0408745d4b350f5e" translate="yes" xml:space="preserve">
          <source>Practical example of testing race conditions</source>
          <target state="translated">レース条件をテストする実践例</target>
        </trans-unit>
        <trans-unit id="e9b424adc9f5871a08b4178c2263b8464d0d5fdd" translate="yes" xml:space="preserve">
          <source>See this &lt;a href=&quot;http://www.c-oreills.com/2015/03/01/testing-race-conditions-in-python.html&quot;&gt;blog post&lt;/a&gt; for a practical example of using before_after in tests.</source>
          <target state="translated">テストでbefore_afterを使用する実際的な例については、この&lt;a href=&quot;http://www.c-oreills.com/2015/03/01/testing-race-conditions-in-python.html&quot;&gt;ブログ投稿&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="86abe52643628a11d44e11da40e737e8cdb4cfca" translate="yes" xml:space="preserve">
          <source>Since v1.0.0 before_after can be used on function methods. Make sure your before_fn/after_fn accepts a</source>
          <target state="translated">v1.0.0.0 以降、関数メソッドで before_after を使用できるようになりました。before_fn/after_fn が</target>
        </trans-unit>
        <trans-unit id="00c7e19a98363531074180b3a1c0a09774864eeb" translate="yes" xml:space="preserve">
          <source>Use with methods</source>
          <target state="translated">メソッドとの併用</target>
        </trans-unit>
        <trans-unit id="e934410a08200a6b83be63d15851de93699dcccf" translate="yes" xml:space="preserve">
          <source>Use with recursive functions</source>
          <target state="translated">再帰関数との併用</target>
        </trans-unit>
        <trans-unit id="908b1a88188119587586caf6d7001aaa83661271" translate="yes" xml:space="preserve">
          <source>When testing Python programs that run in multiple threads or processes it&amp;rsquo;s useful to simulate race conditions to ensure you handle them properly. before_after provides two functions,</source>
          <target state="translated">複数のスレッドまたはプロセスで実行されるPythonプログラムをテストする場合、競合状態をシミュレートして適切に処理することを確認すると便利です。before_afterは2つの関数を提供します。</target>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="translated">after</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="ad65c165992c6bef5dbbbb0e8745936d25651574" translate="yes" xml:space="preserve">
          <source>argument.</source>
          <target state="translated">の引数を指定しています。</target>
        </trans-unit>
        <trans-unit id="51de2b835bd35a67eb32dbcd3d77d4b96e5aa39d" translate="yes" xml:space="preserve">
          <source>before</source>
          <target state="translated">曩に</target>
        </trans-unit>
        <trans-unit id="40517290e9e50888ef29fd43b8e470d1e1260b1b" translate="yes" xml:space="preserve">
          <source>before_after is sugar over the &lt;a href=&quot;http://www.voidspace.org.uk/python/mock/&quot;&gt;Mock library&lt;/a&gt;. It&amp;rsquo;s recommended that you read the docs before using before_after, especially &lt;a href=&quot;http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch&quot;&gt;Where to patch&lt;/a&gt;.</source>
          <target state="translated">before_afterは&lt;a href=&quot;http://www.voidspace.org.uk/python/mock/&quot;&gt;Mockライブラリの&lt;/a&gt;砂糖です。before_after、特に&lt;a href=&quot;http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch&quot;&gt;Where to patch&lt;/a&gt;を使用する前にドキュメントを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ca8e8ad3c392396c8e8eb471f8db2759a0ee19aa" translate="yes" xml:space="preserve">
          <source>before_after provides utilities for testing race conditions</source>
          <target state="translated">before_after はレース条件をテストするためのユーティリティを提供します。</target>
        </trans-unit>
        <trans-unit id="fccf0f13d5812e24818238024cba2b8180a6d34e" translate="yes" xml:space="preserve">
          <source>before_after provides utilities to help test race conditions.</source>
          <target state="translated">before_after は、レースの状態をテストするためのユーティリティを提供します。</target>
        </trans-unit>
        <trans-unit id="67b6f28e3fdba8604d1cb53049b73031f9ff52c9" translate="yes" xml:space="preserve">
          <source>once=False</source>
          <target state="translated">一度=偽</target>
        </trans-unit>
        <trans-unit id="40380bc1d358a6f8665b37bbdc8c7ccc6c38a861" translate="yes" xml:space="preserve">
          <source>self</source>
          <target state="translated">じこ</target>
        </trans-unit>
        <trans-unit id="5a84b3004427ae6982b5cd31ac2794161c71009d" translate="yes" xml:space="preserve">
          <source>that you make sure your program will exit cleanly!</source>
          <target state="translated">あなたのプログラムがきれいに終了することを確認してください!</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
