<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/drf-api-tracking/">
    <body>
      <group id="drf-api-tracking">
        <trans-unit id="b12587961088b1bd986e5a9eb4959389c7568f59" translate="yes" xml:space="preserve">
          <source>2.7, 3.5, 3.6</source>
          <target state="translated">2.7,3.5,3.6</target>
        </trans-unit>
        <trans-unit id="3f3caae34f917f7613d0580a54a52c9801ecde63" translate="yes" xml:space="preserve">
          <source>3.5, 3.6, 3.7</source>
          <target state="translated">3.5,3.6,3.7</target>
        </trans-unit>
        <trans-unit id="692f570631f457240034856389fdcf54ad2aebb6" translate="yes" xml:space="preserve">
          <source>3.5, 3.6, 3.7, 3.8</source>
          <target state="translated">3.5,3.6,3.7,3.8</target>
        </trans-unit>
        <trans-unit id="044c6f5e6f6cd47273bc086f7647e2b7994004f6" translate="yes" xml:space="preserve">
          <source>3.5, 3.6, 3.7, 3.8, 3.9</source>
          <target state="translated">3.5,3.6,3.7,3.8,3.9</target>
        </trans-unit>
        <trans-unit id="d8732aeef6fb760c8269510a3f5ff60ca6828e3f" translate="yes" xml:space="preserve">
          <source>3.7, 3.8, 3.9</source>
          <target state="translated">3.7,3.8,3.9</target>
        </trans-unit>
        <trans-unit id="57a7aa0e2901af436a13a8fc189f164f2f53ca1a" translate="yes" xml:space="preserve">
          <source>A bit simpler.</source>
          <target state="translated">もう少しシンプルに。</target>
        </trans-unit>
        <trans-unit id="67e1e3ae09daf962abe1a00f9b04d20fd75b32a9" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;rest_framework_tracking.mixins.LoggingMixin&lt;/code&gt; to any DRF view
to create an instance of &lt;code&gt;APIRequestLog&lt;/code&gt; every time the view is called.</source>
          <target state="translated">&lt;code&gt;rest_framework_tracking.mixins.LoggingMixin&lt;/code&gt; を任意のDRFビューに追加して、ビューが呼び出されるたびに &lt;code&gt;APIRequestLog&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="69b60460fa03598aa517376aaa594c4460ec45f6" translate="yes" xml:space="preserve">
          <source>At the example above, &lt;code&gt;logging_methods&lt;/code&gt; attribute will be ignored. If you want to provide some extra rules
on top of the http method filtering you should rewrite the &lt;code&gt;should_log&lt;/code&gt; method.</source>
          <target state="translated">上記の例では、 &lt;code&gt;logging_methods&lt;/code&gt; 属性は無視されます。httpメソッドのフィルタリングに加えていくつかの追加のルールを提供する場合は、 &lt;code&gt;should_log&lt;/code&gt; メソッドを書き直す必要があります。</target>
        </trans-unit>
        <trans-unit id="24ea15a5c2dacc89f539b8bc5c169a564442e071" translate="yes" xml:space="preserve">
          <source>By default drf-api-tracking is hiding the values of those fields &lt;code&gt;{'api', 'token', 'key', 'secret', 'password', 'signature'}&lt;/code&gt;.
The default list hast been taken from Django itself (&lt;a href=&quot;https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/__init__.py#L50&quot;&gt;https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/&lt;strong&gt;init&lt;/strong&gt;.py#L50&lt;/a&gt;).</source>
          <target state="translated">デフォルトでは、drf-api-trackingはこれらのフィールドの値を非表示にしています &lt;code&gt;{'api', 'token', 'key', 'secret', 'password', 'signature'}&lt;/code&gt; 。デフォルトのリストはDjango自体から取得されてい&lt;a href=&quot;https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/__init__.py#L50&quot;&gt;ません&lt;/a&gt;（https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/ &lt;strong&gt;init&lt;/strong&gt; .py＃L50）。</target>
        </trans-unit>
        <trans-unit id="d9232a173a5fd47dc0ca3df1c15189988f1c435f" translate="yes" xml:space="preserve">
          <source>By default drf-tracking allows API request log entries to be modified from Django admin. This can present a data integrity issue in production environments. In order to change this behavior, you can set &lt;code&gt;DRF_TRACKING_ADMIN_LOG_READONLY&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; in your &lt;code&gt;settings.py&lt;/code&gt; file.</source>
          <target state="translated">デフォルトでは、drf-trackingにより、APIリクエストログエントリをDjango管理者から変更できます。これにより、本番環境でデータの整合性の問題が発生する可能性があります。この動作を変更するには、 &lt;code&gt;settings.py&lt;/code&gt; ファイルで &lt;code&gt;DRF_TRACKING_ADMIN_LOG_READONLY&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3867f011be69d215d29bce2965e2daa03f4ebf8f" translate="yes" xml:space="preserve">
          <source>CharField</source>
          <target state="translated">チャールフィールド</target>
        </trans-unit>
        <trans-unit id="8418bf7c5c1d90930c4c619e6ab5b1ca92611858" translate="yes" xml:space="preserve">
          <source>DRF</source>
          <target state="translated">DRF</target>
        </trans-unit>
        <trans-unit id="9b8aff9927003a0b268083967274d86a1ad8e224" translate="yes" xml:space="preserve">
          <source>Date-time that the request was made</source>
          <target state="translated">リクエストが行われた日時</target>
        </trans-unit>
        <trans-unit id="c1f53a7866e0d1cd0fcd822e7416f62051b2b596" translate="yes" xml:space="preserve">
          <source>DateTimeField</source>
          <target state="translated">デートタイムフィールド</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">開発の様子</target>
        </trans-unit>
        <trans-unit id="6dff60dca76745f510a0bd92381eb451bb8ab319" translate="yes" xml:space="preserve">
          <source>Dictionary of POST data (JSON or form), as text</source>
          <target state="translated">テキストとしてのPOSTデータ(JSONまたはフォーム)の辞書</target>
        </trans-unit>
        <trans-unit id="abc77726106d99f9293b32e0070f1441110d7a11" translate="yes" xml:space="preserve">
          <source>Dictionary of request query parameters, as text</source>
          <target state="translated">リクエストクエリパラメータの辞書 (テキスト)</target>
        </trans-unit>
        <trans-unit id="b6c95e2580609775eb2b7302ad50c369810daef6" translate="yes" xml:space="preserve">
          <source>Django</source>
          <target state="translated">ジャンゴ</target>
        </trans-unit>
        <trans-unit id="10a39b8b5ae782212eea401964ea72a478e45605" translate="yes" xml:space="preserve">
          <source>Django 1.11, 2.0, 2.1, 2.2, 3.0</source>
          <target state="translated">Django 1.11,2.0,2.1,2.2,3.0</target>
        </trans-unit>
        <trans-unit id="86c3f8b765d4ae311ae013352e183dcb78695487" translate="yes" xml:space="preserve">
          <source>Django REST Framework and Python release supporting the version of Django you are using</source>
          <target state="translated">使用しているDjangoのバージョンをサポートするDjango RESTフレームワークとPythonのリリース</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">ドキュメント</target>
        </trans-unit>
        <trans-unit id="d9e4415cb3006a6419c035246c5f8cb5e2d92dba" translate="yes" xml:space="preserve">
          <source>Finally, you can also apply your customizations by overriding &lt;code&gt;handle_log&lt;/code&gt; method.
By default, all requests that satisfy &lt;code&gt;should_log&lt;/code&gt; method are saved on the database.</source>
          <target state="translated">最後に、 &lt;code&gt;handle_log&lt;/code&gt; メソッドをオーバーライドしてカスタマイズを適用することもできます。デフォルトでは、 &lt;code&gt;should_log&lt;/code&gt; メソッドを満たすすべてのリクエストがデータベースに保存されます。</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="6d6803e6454dddf7d034a0c9ac5fcdae055776da" translate="yes" xml:space="preserve">
          <source>For performance enhancement, explicitly choose methods to be logged using &lt;code&gt;logging_methods&lt;/code&gt; attribute:</source>
          <target state="translated">パフォーマンスを向上させるには、 &lt;code&gt;logging_methods&lt;/code&gt; 属性を使用してログに記録するメソッドを明示的に選択します。</target>
        </trans-unit>
        <trans-unit id="529eee92fed5ed996f9dea4b7c1c951261cb8d07" translate="yes" xml:space="preserve">
          <source>Foreign Key</source>
          <target state="translated">海外キー</target>
        </trans-unit>
        <trans-unit id="fbb6098be69b777ef6a6f64a655316173a17120a" translate="yes" xml:space="preserve">
          <source>GenericIPAddressField</source>
          <target state="translated">GenericIPAddressField</target>
        </trans-unit>
        <trans-unit id="6f494cebe4ed5c843db59dd4eb85009030e8a2e7" translate="yes" xml:space="preserve">
          <source>HTTP method, e.g., &lt;code&gt;&quot;GET&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;GET&quot;&lt;/code&gt; などのHTTPメソッド</target>
        </trans-unit>
        <trans-unit id="1ef2cf7a58cf90e3e9114c45453c80ca281455f1" translate="yes" xml:space="preserve">
          <source>HTTP status code, e.g., &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;404&lt;/code&gt;</source>
          <target state="translated">HTTPステータスコード（例： &lt;code&gt;200&lt;/code&gt; または &lt;code&gt;404&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="179fc589bd92c7fab6e2b252eec6ef03f2a34010" translate="yes" xml:space="preserve">
          <source>IP address where the request originated (X_FORWARDED_FOR if available, REMOTE_ADDR if not), e.g., &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt;</source>
          <target state="translated">リクエストが発信されたIPアドレス（利用可能な場合はX_FORWARDED_FOR、利用できない場合はREMOTE_ADDR）、例： &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c23108f1b316e2a18fe7c9cd850c5df0783ddce" translate="yes" xml:space="preserve">
          <source>In the folder there is a sample drf project: &lt;code&gt;drf_api_sample&lt;/code&gt; if changes are made to this packages models, use this project
to help generate new migrations, which should be checked in.</source>
          <target state="translated">フォルダ内のサンプルDRFプロジェクトがあります： &lt;code&gt;drf_api_sample&lt;/code&gt; 変更は、このパッケージのモデルに作られている場合は、チェックインされるべき新しいマイグレーションを生成するために、このプロジェクトを、使用しています。</target>
        </trans-unit>
        <trans-unit id="34c9911e519347e80206071795731a26068a201f" translate="yes" xml:space="preserve">
          <source>Install RVM to have a local user version of ruby/gem:
&lt;code&gt;https://rvm.io/rvm/install&lt;/code&gt;
Then install travis like this:
&lt;code&gt;gem install travis&lt;/code&gt;
add your secret key as per the link below:
&lt;code&gt;https://docs.travis-ci.com/user/encryption-keys/&lt;/code&gt;</source>
          <target state="translated">ルビー/宝石のローカルユーザーバージョンを持つようにRVMをインストールします。 &lt;code&gt;https://rvm.io/rvm/install&lt;/code&gt; 次に、このようなトラヴィスをインストール： &lt;code&gt;gem install travis&lt;/code&gt; ：下記のリンクごとに、あなたの秘密鍵を追加し &lt;code&gt;https://docs.travis-ci.com/user/encryption-keys/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b43bbc932098bdcc65a4f2f8f5d11079240ce76f" translate="yes" xml:space="preserve">
          <source>Install testing requirements.</source>
          <target state="translated">テスト要件をインストールします。</target>
        </trans-unit>
        <trans-unit id="aefcc29090e988506918d69fc0473bf99aca1c02" translate="yes" xml:space="preserve">
          <source>Install using &lt;code&gt;pip&lt;/code&gt;...</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; を使用してインストール...</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="571b999ecb7c7657044ce1aab993c997fe02420b" translate="yes" xml:space="preserve">
          <source>JSON response data</source>
          <target state="translated">JSON応答データ</target>
        </trans-unit>
        <trans-unit id="7865ad1ab5a93f11087f9d08b6bdac88ce2b6225" translate="yes" xml:space="preserve">
          <source>Model field name</source>
          <target state="translated">モデルフィールド名</target>
        </trans-unit>
        <trans-unit id="029fe8a3186867f29d2729c1a22610408cb035fb" translate="yes" xml:space="preserve">
          <source>Model field type</source>
          <target state="translated">モデルフィールドタイプ</target>
        </trans-unit>
        <trans-unit id="6680f3750b19e368f963f781ef84b036c1d10ccd" translate="yes" xml:space="preserve">
          <source>Moreover, you could define your own rules by overriding &lt;code&gt;should_log&lt;/code&gt; method.
If &lt;code&gt;should_log&lt;/code&gt; evaluates to True a log is created.</source>
          <target state="translated">さらに、 &lt;code&gt;should_log&lt;/code&gt; メソッドをオーバーライドすることで、独自のルールを定義できます。 &lt;code&gt;should_log&lt;/code&gt; がTrueと評価された場合、ログが作成されます。</target>
        </trans-unit>
        <trans-unit id="123666c285d1ea8293b37e145a51122859c624c6" translate="yes" xml:space="preserve">
          <source>Number of milliseconds spent in view code</source>
          <target state="translated">ビューコードの滞在ミリ秒数</target>
        </trans-unit>
        <trans-unit id="b4cb547cff8115927102d2b6606224edee0f5305" translate="yes" xml:space="preserve">
          <source>Or you could omit save a request to the database. For example,</source>
          <target state="translated">あるいは、データベースへのリクエストの保存を省略することもできます。例えば</target>
        </trans-unit>
        <trans-unit id="af01bdeca9c6f08ec81b5a15e3300c40fb09aedd" translate="yes" xml:space="preserve">
          <source>Originating host of the request, e.g., &lt;code&gt;&quot;example.com&quot;&lt;/code&gt;</source>
          <target state="translated">リクエストの発信元ホスト（例： &lt;code&gt;&quot;example.com&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">概要</target>
        </trans-unit>
        <trans-unit id="d896ba2af2c63793a89df8b61541de418eb6e2db" translate="yes" xml:space="preserve">
          <source>PositiveIntegerField</source>
          <target state="translated">正整数フィールド</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">パイソン</target>
        </trans-unit>
        <trans-unit id="48904d746f464c2b0469eee75e9cc32957c05f1a" translate="yes" xml:space="preserve">
          <source>Register with your Django project by adding &lt;code&gt;rest_framework_tracking&lt;/code&gt;
to the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; list in your project's &lt;code&gt;settings.py&lt;/code&gt; file.
Then run the migrations for the &lt;code&gt;APIRequestLog&lt;/code&gt; model:</source>
          <target state="translated">プロジェクトの &lt;code&gt;settings.py&lt;/code&gt; ファイルの &lt;code&gt;INSTALLED_APPS&lt;/code&gt; リストに &lt;code&gt;rest_framework_tracking&lt;/code&gt; を追加して、Djangoプロジェクトに登録します。次に、 &lt;code&gt;APIRequestLog&lt;/code&gt; モデルの移行を実行します。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">必要条件</target>
        </trans-unit>
        <trans-unit id="f9df257ed8beef68667badd2d576fece4a1afdc7" translate="yes" xml:space="preserve">
          <source>Run with runtests.</source>
          <target state="translated">ランチェスターと一緒に走る。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">セキュリティ</target>
        </trans-unit>
        <trans-unit id="a5bdf8388293d1780053fd527e3132d150cd3662" translate="yes" xml:space="preserve">
          <source>Static field that persists the username even if the User model object is deleted</source>
          <target state="translated">ユーザーモデルオブジェクトが削除されてもユーザー名を保持する静的フィールド</target>
        </trans-unit>
        <trans-unit id="985333cef8b0133296604eeeb0bdcd6b9a171307" translate="yes" xml:space="preserve">
          <source>Target METHOD of the VIEW of the request, e.g., &lt;code&gt;&quot;get&quot;&lt;/code&gt;</source>
          <target state="translated">リクエストのビューのターゲットメソッド（例： &lt;code&gt;&quot;get&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bceadf380f138dd7c271097052ab0e9cbc142394" translate="yes" xml:space="preserve">
          <source>Target URI of the request, e.g., &lt;code&gt;&quot;/api/&quot;&lt;/code&gt;</source>
          <target state="translated">リクエストのターゲットURI、例： &lt;code&gt;&quot;/api/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2fc3c1ae88d12273fe056cd476121a700d1f909" translate="yes" xml:space="preserve">
          <source>Target VIEW of the request, e.g., &lt;code&gt;&quot;views.api.ApiView&quot;&lt;/code&gt;</source>
          <target state="translated">リクエストのターゲットVIEW、例： &lt;code&gt;&quot;views.api.ApiView&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">テスト</target>
        </trans-unit>
        <trans-unit id="ed595662ad10d27de0f2faece995e2ca2b8e7012" translate="yes" xml:space="preserve">
          <source>TextField</source>
          <target state="translated">テキストフィールド</target>
        </trans-unit>
        <trans-unit id="f758652728f9cb8b0fa2d8c6914ad5f3367cb707" translate="yes" xml:space="preserve">
          <source>Though, you could define your own handling. For example save on an in-memory data structure store, remote logging system etc.</source>
          <target state="translated">しかし、独自の処理を定義することができます。例えば、インメモリデータ構造体の保存、リモートロギングシステムなど。</target>
        </trans-unit>
        <trans-unit id="234c697cf5f561fe48a2135c29b8580e491cee78" translate="yes" xml:space="preserve">
          <source>To build the documentation, you'll need to install &lt;code&gt;mkdocs&lt;/code&gt;.</source>
          <target state="translated">ドキュメントを作成するには、 &lt;code&gt;mkdocs&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="09d17f64b68c1e570417119e01bb84766ef5b1ec" translate="yes" xml:space="preserve">
          <source>To build the documentation:</source>
          <target state="translated">ドキュメントを構築するために</target>
        </trans-unit>
        <trans-unit id="857f2ce4a948c43ad88bab8a572fe2554f5ef774" translate="yes" xml:space="preserve">
          <source>To preview the documentation:</source>
          <target state="translated">ドキュメントをプレビューするには</target>
        </trans-unit>
        <trans-unit id="d758af075c125b47dbdce868227d00fea1e78842" translate="yes" xml:space="preserve">
          <source>URLField</source>
          <target state="translated">URLフィールド</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="adad33b2c9b863de960c429609fb4f74cf09eb27" translate="yes" xml:space="preserve">
          <source>User if authenticated, None if not</source>
          <target state="translated">認証されていればユーザ、認証されていなければなし</target>
        </trans-unit>
        <trans-unit id="3a22b2d845a21062592ac25ad979244d72b6af77" translate="yes" xml:space="preserve">
          <source>Utils to log Django Rest Framework requests to the database</source>
          <target state="translated">Django Rest Framework のリクエストをデータベースに記録するためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="7ebb67dca2119afe64ee4dc348107e04fa99741a" translate="yes" xml:space="preserve">
          <source>You can also use the excellent &lt;a href=&quot;http://tox.readthedocs.org/en/latest/&quot;&gt;tox&lt;/a&gt; testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run:</source>
          <target state="translated">優れた&lt;a href=&quot;http://tox.readthedocs.org/en/latest/&quot;&gt;tox&lt;/a&gt;テストツールを使用して、サポートされているすべてのバージョンのPythonとDjangoに対してテストを実行することもできます。toxをグローバルにインストールしてから、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8946865d5ec629271a56a31fbf5c4f48e2e2272c" translate="yes" xml:space="preserve">
          <source>You can complete this list with your own list by putting the fields you want to be hidden in the &lt;code&gt;sensitive_fields&lt;/code&gt; parameter of your view.</source>
          <target state="translated">非表示にするフィールドをビューの &lt;code&gt;sensitive_fields&lt;/code&gt; パラメーターに配置することで、このリストを独自のリストで完成させることができます。</target>
        </trans-unit>
        <trans-unit id="f5b73bf20b7d60731b7ec22d846cf39bba31fac2" translate="yes" xml:space="preserve">
          <source>drf-api-tracking</source>
          <target state="translated">ドラフトアピートラッキング</target>
        </trans-unit>
        <trans-unit id="ecf9de5b814c21f82d5593321e6d5846f9644dc3" translate="yes" xml:space="preserve">
          <source>drf-api-tracking provides a Django model and DRF view mixin that work together to log Django Rest Framework requests to the database. You'll get these attributes for every request/response cycle to a view that uses the mixin:</source>
          <target state="translated">drf-api-tracking は Django モデルと DRF ビュー ミキシンを提供し、Django Rest Framework のリクエストをデータベースに記録します。ミキシンを使用するビューへのリクエスト/レスポンスサイクルごとに、これらの属性を取得します。</target>
        </trans-unit>
        <trans-unit id="c9ea9430e5bfede10c37fdd657b5bf3408e96610" translate="yes" xml:space="preserve">
          <source>ensure that before running tox you don't have a virtualenv created and tox has been installed globally or via pipx</source>
          <target state="translated">tox を実行する前に virtualenv が作成されておらず、tox がグローバルまたは pipx 経由でインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="77439450e3126eca7553842e877e9be7280fc269" translate="yes" xml:space="preserve">
          <source>pyenv</source>
          <target state="translated">パイエンヴ</target>
        </trans-unit>
        <trans-unit id="e6cc0fb2b8dad4110ef62e9a33e5a8aa4e0f86d7" translate="yes" xml:space="preserve">
          <source>travis</source>
          <target state="translated">トラヴィス</target>
        </trans-unit>
        <trans-unit id="5b01d51bdb89ef9f2671ee07c747c6bb7f9079f4" translate="yes" xml:space="preserve">
          <source>using pyenv you can install multiple versions of python so that tox can run tests against all installed versions of python</source>
          <target state="translated">pyenv を使うと、複数のバージョンの python をインストールすることができ、tox はインストールされたすべてのバージョンの python に対してテストを実行することができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
