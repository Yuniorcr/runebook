<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/hypothesmith/">
    <body>
      <group id="hypothesmith">
        <trans-unit id="927273558156f85acbe1ffe5668260c75dca2f23" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://bugs.python.org/issue38953&quot;&gt;BPO-38953&lt;/a&gt;&lt;code&gt;tokenize&lt;/code&gt; -&amp;gt; &lt;code&gt;untokenize&lt;/code&gt; roundtrip bugs.</source>
          <target state="translated">&lt;a href=&quot;https://bugs.python.org/issue38953&quot;&gt;BPO-38953&lt;/a&gt; &lt;code&gt;tokenize&lt;/code&gt; -&amp;gt; &lt;code&gt;untokenize&lt;/code&gt; トリップバグのトークン化を解除します。</target>
        </trans-unit>
        <trans-unit id="1a576cbcbce9c243a6927d6d8263dbf180f781e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://bugs.python.org/issue40661&quot;&gt;BPO-40661, a segfault in the new parser&lt;/a&gt;,
was given maximum priority and blocked the planned release of CPython 3.9 beta1.</source>
          <target state="translated">&lt;a href=&quot;https://bugs.python.org/issue40661&quot;&gt;新しいパーサーのセグメンテーション違反であるBPO-40661に&lt;/a&gt;最大の優先順位が与えられ、CPython 3.9beta1の計画されたリリースがブロックされました。</target>
        </trans-unit>
        <trans-unit id="fc009e3a7380e39bce6c81037d2446c6038dfb22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/Instagram/LibCST#acknowledgements&quot;&gt;At least three round-trip bugs in LibCST&lt;/a&gt;
(search commits for &quot;hypothesis&quot;)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Instagram/LibCST#acknowledgements&quot;&gt;LibCSTの少なくとも3つのラウンドトリップバグ&lt;/a&gt; （「仮説」の検索コミット）</target>
        </trans-unit>
        <trans-unit id="fda59d462dd19922285148c2c06a752b261640fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib2to3&lt;/code&gt; errors on \r in comment</source>
          <target state="translated">&lt;code&gt;lib2to3&lt;/code&gt; コメントの\ rでのlib2to3エラー</target>
        </trans-unit>
        <trans-unit id="c4e7036cd5c27e90252cafc58447d9d0b1c3c7eb" translate="yes" xml:space="preserve">
          <source>Black fails on files ending in a backslash</source>
          <target state="translated">バックスラッシュで終わるファイルでは黒に失敗する</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">変更履歴</target>
        </trans-unit>
        <trans-unit id="6d43a7f8f403b449af1d3036104c1802f5ab93d7" translate="yes" xml:space="preserve">
          <source>DO NOT EXECUTE CODE GENERATED BY THESE STRATEGIES.</source>
          <target state="translated">これらの戦略によって生成されたコードを実行しないでください。</target>
        </trans-unit>
        <trans-unit id="5c99d85166a887efaaf7945a1f54ebee99e8cfd8" translate="yes" xml:space="preserve">
          <source>Generates syntactically-valid Python source code based on the grammar.</source>
          <target state="translated">文法に基づいて構文的に妥当なPythonソースコードを生成します。</target>
        </trans-unit>
        <trans-unit id="094c511cb0b0bd224adf4a8f63f51125ceb84511" translate="yes" xml:space="preserve">
          <source>Generates syntactically-valid Python source code based on the node types
defined by the &lt;a href=&quot;https://libcst.readthedocs.io/en/latest/&quot;&gt;&lt;code&gt;LibCST&lt;/code&gt;&lt;/a&gt; project.</source>
          <target state="translated">&lt;a href=&quot;https://libcst.readthedocs.io/en/latest/&quot;&gt; &lt;code&gt;LibCST&lt;/code&gt; &lt;/a&gt;プロジェクトで定義されたノードタイプに基づいて、構文的に有効なPythonソースコードを生成します。</target>
        </trans-unit>
        <trans-unit id="10af5fb547fb532fd0234ef379c381c82cb2b3a4" translate="yes" xml:space="preserve">
          <source>Get it today with &lt;a href=&quot;https://pypi.org/project/hypothesmith/&quot;&gt;&lt;code&gt;pip install hypothesmith&lt;/code&gt;&lt;/a&gt;,
or by cloning &lt;a href=&quot;https://github.com/Zac-HD/hypothesmith&quot;&gt;the GitHub repo&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/project/hypothesmith/&quot;&gt; &lt;code&gt;pip install hypothesmith&lt;/code&gt; &lt;/a&gt;を使用するか&lt;a href=&quot;https://github.com/Zac-HD/hypothesmith&quot;&gt;、GitHubリポジトリの&lt;/a&gt;クローンを作成して、今すぐ入手してください。</target>
        </trans-unit>
        <trans-unit id="5a7042e637728dc9ee9ec3d5e692337ee83071b8" translate="yes" xml:space="preserve">
          <source>Hypothesis strategies for generating Python programs, something like CSmith</source>
          <target state="translated">CSmith のような Python プログラムを生成するための仮説戦略</target>
        </trans-unit>
        <trans-unit id="04ee5852f45f4e6d2eb07e036770872c09597475" translate="yes" xml:space="preserve">
          <source>Hypothesis strategies for generating Python programs, something like CSmith.</source>
          <target state="translated">Pythonのプログラムを生成するための仮説戦略、CSmithのようなもの。</target>
        </trans-unit>
        <trans-unit id="88dda500472bd784f8514a004f781ae9ea74a4a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_target&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, this strategy uses &lt;code&gt;hypothesis.target()&lt;/code&gt;
internally to drive towards larger and more complex examples.  We recommend
leaving this enabled, as the grammar is quite complex and only simple examples
tend to be generated otherwise.</source>
          <target state="translated">&lt;code&gt;auto_target&lt;/code&gt; が &lt;code&gt;True&lt;/code&gt; の場合、この戦略は 内部で &lt;code&gt;hypothesis.target()&lt;/code&gt; を使用して、より大きくより複雑な例に向かって進みます。文法は非常に複雑で、単純な例のみが生成される傾向があるため、これを有効のままにしておくことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2cb93c8a4298f8c411d4a889b55d7f84dbd198de" translate="yes" xml:space="preserve">
          <source>Invalid code generated by LibCST</source>
          <target state="translated">LibCST で生成された無効なコード</target>
        </trans-unit>
        <trans-unit id="d2637742eb27c63dbc9b26ffd6ba6ab8b9a3cf17" translate="yes" xml:space="preserve">
          <source>It could do literally anything that running Python code is able to do,
including changing, deleting, or uploading important data.  Arbitrary
code can be useful, but &quot;arbitrary code execution&quot; can be very, very bad.</source>
          <target state="translated">Pythonのコードを実行することで、重要なデータの変更、削除、アップロードなど、文字通り何でもできるようになります。任意のコードは便利ですが、「任意のコードの実行」は非常に、非常に悪いものになります。</target>
        </trans-unit>
        <trans-unit id="fcf20a9f2e82aca9608a9e741216b1fe6d73bf64" translate="yes" xml:space="preserve">
          <source>Notable bugs found with Hypothesmith</source>
          <target state="translated">Hypothesmithで見つかった注目すべきバグ</target>
        </trans-unit>
        <trans-unit id="06024caeb87e4e463985ede2fb5afaf917b46e84" translate="yes" xml:space="preserve">
          <source>Patch notes &lt;a href=&quot;https://github.com/Zac-HD/hypothesmith/blob/master/CHANGELOG.md&quot;&gt;can be found in &lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パッチノート&lt;a href=&quot;https://github.com/Zac-HD/hypothesmith/blob/master/CHANGELOG.md&quot;&gt;は &lt;code&gt;CHANGELOG.md&lt;/code&gt; にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b395c7305ac134f04b992faf02cbaf6cd3aff4b1" translate="yes" xml:space="preserve">
          <source>The generated code will always be syntatically valid, and is useful for testing
parsers, linters, auto-formatters, and other tools that operate on source code.</source>
          <target state="translated">生成されたコードは常に構文的に有効であり、パーサ、リンタ、オートフォーマッタ、およびソースコード上で動作する他のツールをテストするのに便利です。</target>
        </trans-unit>
        <trans-unit id="40b2b8e9afc7410e9c31d67c9aeaa3467791d617" translate="yes" xml:space="preserve">
          <source>This is definitely pre-alpha, but if you want to play with it feel free!
You can even keep the shiny pieces when - not if - it breaks.</source>
          <target state="translated">これは間違いなくプレアルファですが、あなたがそれで遊びたい場合は、自由に感じています。あなたも、それが壊れたときに-ではなく-キラキラした作品を維持することができます。</target>
        </trans-unit>
        <trans-unit id="8be67aaeb24b005e833b66dfed2921db5f146730" translate="yes" xml:space="preserve">
          <source>This package provides two Hypothesis strategies for generating Python source code.</source>
          <target state="translated">本パッケージは、Pythonのソースコードを生成するための2つのHypothesis戦略を提供します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="ea1e6a392b004d05c4e49f2169f52a82b8656785" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;code&gt;start&lt;/code&gt; are &lt;code&gt;&quot;single_input&quot;&lt;/code&gt;, &lt;code&gt;&quot;file_input&quot;&lt;/code&gt;, or
&lt;code&gt;&quot;eval_input&quot;&lt;/code&gt;; respectively a single interactive statement, a module or
sequence of commands read from a file, and input for the eval() function.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; の有効な値は、 &lt;code&gt;&quot;single_input&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;file_input&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;eval_input&quot;&lt;/code&gt; です。それぞれ、単一の対話型ステートメント、ファイルから読み取られたモジュールまたはコマンドのシーケンス、およびeval（）関数への入力。</target>
        </trans-unit>
        <trans-unit id="ec91c103499ca11901a8c45610643c97bf3cd671" translate="yes" xml:space="preserve">
          <source>You can pass any subtype of &lt;code&gt;libcst.CSTNode&lt;/code&gt;.  Alternatively, you can use
Hypothesis' built-in &lt;code&gt;from_type(node_type).map(lambda n: libcst.Module([n]).code&lt;/code&gt;,
after Hypothesmith has registered the required strategies.  However, this does
not include automatic targeting and limitations of LibCST may lead to invalid
code being generated.</source>
          <target state="translated">&lt;code&gt;libcst.CSTNode&lt;/code&gt; 任意のサブタイプを渡すことができます。または、Hypothesmithが必要な戦略を登録した後、Hypothesisの組み込み &lt;code&gt;from_type(node_type).map(lambda n: libcst.Module([n]).code&lt;/code&gt; を使用できます。ただし、これには自動ターゲティングとの制限は含まれません。 LibCSTにより、無効なコードが生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="23ed7279d1e4cd1c1ed3ab2cb38aef204109cb8a" translate="yes" xml:space="preserve">
          <source>You can run the tests, such as they are, with &lt;code&gt;tox&lt;/code&gt; on Python 3.6 or later.
Use &lt;code&gt;tox -va&lt;/code&gt; to see what environments are available.</source>
          <target state="translated">Python 3.6以降では、 &lt;code&gt;tox&lt;/code&gt; を使用してテストを実行できます。 &lt;code&gt;tox -va&lt;/code&gt; を使用して、使用可能な環境を確認します。</target>
        </trans-unit>
        <trans-unit id="d94b26236f4fc6d56869562ae5e61b0393c88b76" translate="yes" xml:space="preserve">
          <source>hypothesmith</source>
          <target state="translated">仮説屋</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
