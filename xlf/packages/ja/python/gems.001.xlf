<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/gems/">
    <body>
      <group id="gems">
        <trans-unit id="1997d8ab6807c39815dd08464c8cec0d4efb0d81" translate="yes" xml:space="preserve">
          <source>Currently, the following objects are available (this list will grow with time and feedback):</source>
          <target state="translated">現在、以下のオブジェクトが利用可能です(このリストは時間とフィードバックによって成長していきます)。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">説明</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">ドキュメント</target>
        </trans-unit>
        <trans-unit id="6bfe87295d30f233fcb80f1e8abc3c6d836a50dd" translate="yes" xml:space="preserve">
          <source>Documentation for the package can be found &lt;a href=&quot;http://gems.readthedocs.io/en/latest/index.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">パッケージのドキュメントは&lt;a href=&quot;http://gems.readthedocs.io/en/latest/index.html&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6437fd9f67563e1ea311bd8f5e3902dc66baf4c" translate="yes" xml:space="preserve">
          <source>File an issue in the &lt;a href=&quot;https://github.com/bprinty/gems/issues&quot;&gt;GitHub issue tracker&lt;/a&gt;.</source>
          <target state="translated">で、問題をファイル&lt;a href=&quot;https://github.com/bprinty/gems/issues&quot;&gt;GitHubの問題追跡&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="823121aeb38d9dc03a711ded2e6e4bf8a6089082" translate="yes" xml:space="preserve">
          <source>In the example above, an arbitrary data structure is provided as an argument to the</source>
          <target state="translated">上の例では、任意のデータ構造が</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="a85eb1b151c356331cbda434eeb2032aea1b3eee" translate="yes" xml:space="preserve">
          <source>JSON-like data structure for easy data traversal.</source>
          <target state="translated">JSONライクなデータ構造で、データを簡単にトラバーサルすることができます。</target>
        </trans-unit>
        <trans-unit id="0e76c168b108d0679efb83c8b8297c8248a2498e" translate="yes" xml:space="preserve">
          <source>JSON-like data structure for easy filesystem traversal.</source>
          <target state="translated">JSONライクなデータ構造で、ファイルシステムを簡単にトラバーサルすることができます。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">名前</target>
        </trans-unit>
        <trans-unit id="15b3b3f8c8e7be573187a1019c0e218d359b1f10" translate="yes" xml:space="preserve">
          <source>Other operations like this also can be used with the</source>
          <target state="translated">このような他の操作も</target>
        </trans-unit>
        <trans-unit id="e67d768a99378f8ecf3247b67ace259a8ea070ed" translate="yes" xml:space="preserve">
          <source>Python utilities for data manipulation and management.</source>
          <target state="translated">データ操作や管理のためのPythonユーティリティ。</target>
        </trans-unit>
        <trans-unit id="09d5a64e9c36b9d112a6c8a69c07fafec57c5070" translate="yes" xml:space="preserve">
          <source>Questions/Feedback</source>
          <target state="translated">質問・フィードバック</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="96b94449c5d7ce6131a8938b76b58e18253ed1e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://github.com/bprinty/gems&quot;&gt;gems&lt;/a&gt; module provides specialized data structures to augment development. It&amp;rsquo;s similar to the &lt;a href=&quot;https://docs.python.org/2/library/collections.html&quot;&gt;collections&lt;/a&gt; module, but contains different types of objects.</source>
          <target state="translated">&lt;a href=&quot;http://github.com/bprinty/gems&quot;&gt;宝石の&lt;/a&gt;モジュールは、オーグメント開発に特化したデータ構造を提供します。&lt;a href=&quot;https://docs.python.org/2/library/collections.html&quot;&gt;コレクション&lt;/a&gt;モジュールに似ていますが、さまざまなタイプのオブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="fd3e32dc3801c914e67aabe3919f7dfda7d9f0e6" translate="yes" xml:space="preserve">
          <source>There are also operations tied to</source>
          <target state="translated">に縛られた運用もあります。</target>
        </trans-unit>
        <trans-unit id="6dafd5845def04f19596241318ef83997b47ebf4" translate="yes" xml:space="preserve">
          <source>Traversal of a filetree is typically a pain in python. You could use</source>
          <target state="translated">ファイルツリーのトラバーサルは python では一般的に面倒です。このような場合には</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="219ea4450f39d9bebc5c85607cd64bfa7e1bf546" translate="yes" xml:space="preserve">
          <source>Using JSON-based access is much easier and cleaner than doing many</source>
          <target state="translated">JSONベースのアクセスを使用することは、多くの</target>
        </trans-unit>
        <trans-unit id="c8c12438f8738eefff21d484cda3d3d907486669" translate="yes" xml:space="preserve">
          <source>Via github:</source>
          <target state="translated">github経由で。</target>
        </trans-unit>
        <trans-unit id="968c00074f8b60668476e710706515403faee8cd" translate="yes" xml:space="preserve">
          <source>Via pip:</source>
          <target state="translated">ピップ経由で</target>
        </trans-unit>
        <trans-unit id="cf1cd3e93c33d36025cf08259e4a6a097d547675" translate="yes" xml:space="preserve">
          <source>comes in handy. Here is an example of how to use the</source>
          <target state="translated">が便利です。ここでは</target>
        </trans-unit>
        <trans-unit id="6288c74c2945ac771cee3a87e5544b41d367921b" translate="yes" xml:space="preserve">
          <source>composite</source>
          <target state="translated">コンポジット</target>
        </trans-unit>
        <trans-unit id="3f22939af1209665727c71e695acc4563574ce9a" translate="yes" xml:space="preserve">
          <source>filetree</source>
          <target state="translated">ファイルツリー</target>
        </trans-unit>
        <trans-unit id="23aca54a270800dfb3133a90b2114462bd4c9d0e" translate="yes" xml:space="preserve">
          <source>gems</source>
          <target state="translated">珠玉</target>
        </trans-unit>
        <trans-unit id="acffb0674bcb91fe92e927dc09ce22ee29e0f2bc" translate="yes" xml:space="preserve">
          <source>gems.filetree</source>
          <target state="translated">gems.filetree</target>
        </trans-unit>
        <trans-unit id="3f0c18076d70425943e43cac3e4ed301a4f30437" translate="yes" xml:space="preserve">
          <source>object abstracts away the complexity associated with managing heavily nested JSON-based structures, allowing easier access to internal properties, and providing operators that work with the data in an intuitive way. Here is a simple example of how to use the</source>
          <target state="translated">オブジェクトは、重く入れ子になった JSON ベースの構造体の管理に伴う複雑さを抽象化し、内部プロパティへのアクセスを容易にし、直感的な方法でデータを扱う演算子を提供します。オブジェクトの使用方法の簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="ac0fd33f5d0e43b611beff5f0e2871f10d9fda5c" translate="yes" xml:space="preserve">
          <source>object as a result that combines the objects in an intuitive way:</source>
          <target state="translated">オブジェクトを直感的に組み合わせた結果として</target>
        </trans-unit>
        <trans-unit id="912faf68b637433babda0368240f0e78ac7451c6" translate="yes" xml:space="preserve">
          <source>object, and is transformed into an object where properties can be traversed more gracefully (syntactically). You can also load a composite object from a json or yaml file like so:</source>
          <target state="translated">オブジェクトに変換され、プロパティがより優雅に(構文的に)トラバースできるオブジェクトに変換されます。また、以下のように json や yaml ファイルから複合オブジェクトを読み込むこともできます。</target>
        </trans-unit>
        <trans-unit id="a32c82787be6c77195d658bf8b91438e1f5d5982" translate="yes" xml:space="preserve">
          <source>object. For example:</source>
          <target state="translated">オブジェクトを使用することができます。例えば</target>
        </trans-unit>
        <trans-unit id="e4100dc242f4e94678b089b84f1befafe08a62d2" translate="yes" xml:space="preserve">
          <source>objects. If two composite objects or a composite object and another similar type are added, you get a</source>
          <target state="translated">オブジェクトを追加することができます。2つの複合オブジェクト、または複合オブジェクトと別の類似した型が追加された場合は</target>
        </trans-unit>
        <trans-unit id="1b31e7e6547b1025cd7387caea08a4a77e83a5b1" translate="yes" xml:space="preserve">
          <source>operations to create the full paths to objects on your filesystem.</source>
          <target state="translated">演算子を使ってファイルシステム上のオブジェクトへのフルパスを作成します。</target>
        </trans-unit>
        <trans-unit id="625864cb1b36afd30da06b77f8e0a80fe79f7c4d" translate="yes" xml:space="preserve">
          <source>os.path.join</source>
          <target state="translated">os.path.join</target>
        </trans-unit>
        <trans-unit id="5bb6417d65ae3f277f3a6b6552851d56a5756752" translate="yes" xml:space="preserve">
          <source>os.path.walk</source>
          <target state="translated">os.path.walk</target>
        </trans-unit>
        <trans-unit id="d4cb884b7fc7279ec04557b99326052b6de26755" translate="yes" xml:space="preserve">
          <source>structure also allows for traversal of the file data like so:</source>
          <target state="translated">構造体は、このようにファイルデータをトラバーサルすることもできます。</target>
        </trans-unit>
        <trans-unit id="a44cac4b820eaf8cdb5becd1524e72afc7e6ac40" translate="yes" xml:space="preserve">
          <source>to within a recursive function to accomplish it, but there should be an easier way. That&amp;rsquo;s where the</source>
          <target state="translated">それを達成するために再帰関数内に移動しますが、もっと簡単な方法があるはずです。それは</target>
        </trans-unit>
        <trans-unit id="06b55cf49afc6f86f62f9f15ff98cbeda4685883" translate="yes" xml:space="preserve">
          <source>type in a project:</source>
          <target state="translated">をプロジェクトで使用します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
