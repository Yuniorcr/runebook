<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/cl4py/">
    <body>
      <group id="cl4py">
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="dfc68394d92d28ed14e74422c938a34492324fd4" translate="yes" xml:space="preserve">
          <source>.  This
means, that the Lisp process will ignore any user initialization files,
including the Quicklisp setup.  However, we provide an extra option for
installing and loading Quicklisp automatically:</source>
          <target state="translated">。これは、LispプロセスがQuicklispセットアップを含むすべてのユーザー初期化ファイルを無視することを意味します。ただし、Quicklispを自動的にインストールおよびロードするための追加オプションが用意されています。</target>
        </trans-unit>
        <trans-unit id="4911a208b464e3c88a14296c202fff997a17499d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://docs.hylang.org/en/stable/&quot;&gt;Hy&lt;/a&gt;
- Python, but with Lisp syntax. This project is certainly a great way to
get started with Lisp. It allows you to study the advantages of Lisp&amp;rsquo;s
seemingly weird syntax, without leaving the comfortable Python
ecosystem. Once you understand the advantages of Lisp, you will doubly
appreciate cl4py for your projects.</source>
          <target state="translated">&lt;a href=&quot;http://docs.hylang.org/en/stable/&quot;&gt;Hy&lt;/a&gt; -Python、ただしLisp構文。このプロジェクトは確かにLispを始めるための素晴らしい方法です。快適なPythonエコシステムを離れることなく、Lispの一見奇妙な構文の利点を研究することができます。Lispの利点を理解したら、プロジェクトのcl4pyに二重に感謝します。</target>
        </trans-unit>
        <trans-unit id="1d1057ed26fcf9d9d5910c3b2d1101ee4ec6fc0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/bendudson/py4cl&quot;&gt;py4cl&lt;/a&gt;
- A library that allows Common Lisp code to access Python libraries.  It
is basically the inverse of cl4py.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/bendudson/py4cl&quot;&gt;py4cl&lt;/a&gt; - CommonLispコードがPythonライブラリにアクセスできるようにするライブラリ。基本的にはcl4pyの逆です。</target>
        </trans-unit>
        <trans-unit id="8b891ac4c97379c150d0ecd3d198ae5a95776353" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/metawilm/cl-python&quot;&gt;cl-python&lt;/a&gt;
- A much heavier solution than cl4py &amp;mdash; let&amp;rsquo;s simply implement Python
in Lisp! An amazing project. However, cl-python cannot access foreign
libraries, e.g., NumPy. And people are probably hesitant to migrate away
from CPython.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/metawilm/cl-python&quot;&gt;cl-python&lt;/a&gt; -cl4pyよりもはるかに重いソリューション&amp;mdash; LispでPythonを簡単に実装しましょう！素晴らしいプロジェクト。ただし、cl-pythonはNumPyなどの外部ライブラリにアクセスできません。そして人々はおそらくCPythonからの移行をためらっています。</target>
        </trans-unit>
        <trans-unit id="a6cac227b0e0cfeba9b90f7681aca51b3fa2ed22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pinterface/burgled-batteries&quot;&gt;burgled-batteries&lt;/a&gt;
- A bridge between Python and Lisp. The goal is that Lisp programs can
use Python libraries, which is in some sense the opposite of
cl4py. Furthermore it relies on the less portable mechanism of FFI
calls.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pinterface/burgled-batteries&quot;&gt;burgled-batteries&lt;/a&gt; -PythonとLispの間の架け橋。目標は、LispプログラムがPythonライブラリを使用できるようにすることです。これは、ある意味でcl4pyの反対です。さらに、FFI呼び出しの移植性の低いメカニズムに依存しています。</target>
        </trans-unit>
        <trans-unit id="50d835c00486b111eca88683714097e58a1abbfb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.nicklevine.org/claude/&quot;&gt;CLAUDE&lt;/a&gt;
- An earlier attempt to access Lisp libraries from Python. The key
difference is that cl4py does not run Lisp directly in the host
process. This makes cl4py more portable, but complicates the exchange of
data.</source>
          <target state="translated">&lt;a href=&quot;https://www.nicklevine.org/claude/&quot;&gt;CLAUDE&lt;/a&gt; -PythonからLispライブラリにアクセスする以前の試み。主な違いは、cl4pyがホストプロセスでLispを直接実行しないことです。これはcl4pyをよりポータブルにしますが、データの交換を複雑にします。</target>
        </trans-unit>
        <trans-unit id="4bbc2bad866e068f7a83235c65224f8f43ca8e4f" translate="yes" xml:space="preserve">
          <source>By default, cl4py starts a Lisp subprocess with</source>
          <target state="translated">デフォルトでは、cl4pyはLispのサブプロセスを</target>
        </trans-unit>
        <trans-unit id="b820f44f707e2d2bfda8a73e7deeb8deb276083f" translate="yes" xml:space="preserve">
          <source>Common Lisp for Python</source>
          <target state="translated">Python用コモンLisp</target>
        </trans-unit>
        <trans-unit id="148b514079c970f00202742b91f589dab000adac" translate="yes" xml:space="preserve">
          <source>Frequently Asked Problems</source>
          <target state="translated">よくある問題</target>
        </trans-unit>
        <trans-unit id="fce92a58d4a009a80c62759514bdc0f104880ceb" translate="yes" xml:space="preserve">
          <source>It soon becomes clumsy to look up individual Lisp functions by name.
Instead, it is usually better to convert entire Lisp packages to Python
modules, like this:</source>
          <target state="translated">個々のLisp関数を名前で調べるのはすぐに不器用になります。その代わりに、通常はLispパッケージ全体をPythonモジュールに変換する方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">モチベーション</target>
        </trans-unit>
        <trans-unit id="7fac72fa371151361d1c539c6461c22eccaa90fe" translate="yes" xml:space="preserve">
          <source>Of course, this requires you have some Lisp installed. If not, use
something like</source>
          <target state="translated">もちろん、これには Lisp がインストールされている必要があります。インストールされていない場合は、次のようなものを使ってください。</target>
        </trans-unit>
        <trans-unit id="15fcd561f77dbd0c514f2391d3c7596df9294341" translate="yes" xml:space="preserve">
          <source>Package QL does not exist</source>
          <target state="translated">パッケージ QL が存在しない</target>
        </trans-unit>
        <trans-unit id="5080ebd78aaa8f3e4acd6d4cd153e6b28156a27a" translate="yes" xml:space="preserve">
          <source>Related Projects</source>
          <target state="translated">関連プロジェクト</target>
        </trans-unit>
        <trans-unit id="c2496758451190079c5ff46ed234f6bf876783e3" translate="yes" xml:space="preserve">
          <source>Some Lisp data structures have no direct equivalent in Python, most
notably, cons cells.  The cl4py module provides a suitable Cons class and
converts List conses to instances of cl4py.Cons.</source>
          <target state="translated">Lispのデータ構造の中には、Pythonでは直接の等価物を持たないものがあります。cl4pyモジュールは、適切なConsクラスを提供し、リストのconsをcl4py.Consのインスタンスに変換します。</target>
        </trans-unit>
        <trans-unit id="40102a7557c7125cb544b98b57257f65d209dd20" translate="yes" xml:space="preserve">
          <source>The library cl4py (pronounce as &lt;em&gt;clappy&lt;/em&gt;) allows Python programs to call
Common Lisp libraries.  Its official mascot is the cl4py-bird:</source>
          <target state="translated">ライブラリcl4py（として発音&lt;em&gt;clappyは&lt;/em&gt;）Pythonプログラムは、Common Lispのライブラリを呼び出すことができます。その公式マスコットはcl4py-birdです。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">チュートリアル</target>
        </trans-unit>
        <trans-unit id="d1fd463e2211f716e42a7d42d60ef7a504f5676a" translate="yes" xml:space="preserve">
          <source>Why does my Lisp subprocess complain about</source>
          <target state="translated">なぜ私の Lisp サブプロセスは</target>
        </trans-unit>
        <trans-unit id="e2a9f255c2065c6cb3cc36379ae5c9bb470b0b5b" translate="yes" xml:space="preserve">
          <source>You are a Python programmer, but you want access to some of the powerful
features of Lisp, for example to compile code at run time?  Or you want to
use some &lt;a href=&quot;http://codys.club/awesome-cl/&quot;&gt;awesome Lisp libraries&lt;/a&gt;?  Or
you are a Lisp programmer and want to show your work to your Python
friends.  In all these cases, cl4py is here to help you.</source>
          <target state="translated">あなたはPythonプログラマですが、実行時にコードをコンパイルするなど、Lispの強力な機能のいくつかにアクセスしたいですか？または、いくつかの&lt;a href=&quot;http://codys.club/awesome-cl/&quot;&gt;素晴らしいLispライブラリ&lt;/a&gt;を使用したいですか？または、あなたはLispプログラマーであり、Pythonの友達に自分の仕事を見せたいと思っています。これらすべてのケースで、cl4pyが役立ちます。</target>
        </trans-unit>
        <trans-unit id="a1829fa02283e0a82ccbadc9abe55eff92b9688f" translate="yes" xml:space="preserve">
          <source>You can start any number of Lisp subprocesses within Python, like this:</source>
          <target state="translated">Python内では、このようにLispのサブプロセスをいくつでも起動することができます。</target>
        </trans-unit>
        <trans-unit id="2ca175d569e3bddb9bd42186937f3d9a19474282" translate="yes" xml:space="preserve">
          <source>apt install sbcl</source>
          <target state="translated">apt install sbcl</target>
        </trans-unit>
        <trans-unit id="a0d6591fa77e0813e270cc0b321c6f1da9640f76" translate="yes" xml:space="preserve">
          <source>brew install
sbcl</source>
          <target state="translated">ブリューインストールSBCL</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">或いは</target>
        </trans-unit>
        <trans-unit id="84122cdb9e98b2fdddcd6d887b4d74a136bd5068" translate="yes" xml:space="preserve">
          <source>pacman -S sbcl</source>
          <target state="translated">パックマン -S sbcl</target>
        </trans-unit>
        <trans-unit id="8f2ed9f246f7ff0643d359045e9252655a4fb598" translate="yes" xml:space="preserve">
          <source>quicklisp=True</source>
          <target state="translated">quicklisp=True</target>
        </trans-unit>
        <trans-unit id="e5afdbd708aea1d57f803c59648c0871a0966485" translate="yes" xml:space="preserve">
          <source>sbcl --script</source>
          <target state="translated">sbcl -スクリプト</target>
        </trans-unit>
        <trans-unit id="b519792eff2865136af2e654208db187c51b185b" translate="yes" xml:space="preserve">
          <source>to correct this deficiency.  Once you have a running Lisp process,
you can execute Lisp code on it:</source>
          <target state="translated">を使ってこの欠陥を修正しています。実行中のLispプロセスがあれば、その上でLispコードを実行することができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
