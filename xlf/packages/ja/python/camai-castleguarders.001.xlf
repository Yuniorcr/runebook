<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/camai-castleguarders/">
    <body>
      <group id="camai-castleguarders">
        <trans-unit id="181e92678a1a0c5bc05bfd2d8012000a13aca2bb" translate="yes" xml:space="preserve">
          <source>.. image:: docs/Alerts_Storage.png
:width: 50
:height: 150
:alt: Storage Alert Image</source>
          <target state="translated">.. image :: docs / Alerts_Storage.png：width：50：height：150：alt：ストレージ警告画像</target>
        </trans-unit>
        <trans-unit id="4cba7969c2799287f18026a367919069feb447c9" translate="yes" xml:space="preserve">
          <source>.. image:: docs/Alerts_Storage.png
:width: 50
:height: 150
:alt: Verbal Warning</source>
          <target state="translated">.. image :: docs / Alerts_Storage.png：width：50：height：150：alt：口頭での警告</target>
        </trans-unit>
        <trans-unit id="e39e4bd00cd2f24fd77cfb0a4c7ad5013e61d920" translate="yes" xml:space="preserve">
          <source>.. image:: docs/Email_Alert_with_Image.png
:width: 50
:height: 150
:alt: Email Alert with Image</source>
          <target state="translated">.. image :: docs / Email_Alert_with_Image.png：width：50：height：150：alt：画像付きのメールアラート</target>
        </trans-unit>
        <trans-unit id="21c9b5617a7c79dc4b9264d640ff5d0c49cae40f" translate="yes" xml:space="preserve">
          <source>.. image:: docs/Email_Alert_with_Video.png
:width: 50
:height: 150
:alt: Email Alert with Video</source>
          <target state="translated">.. image :: docs / Email_Alert_with_Video.png：width：50：height：150：alt：ビデオによる電子メールアラート</target>
        </trans-unit>
        <trans-unit id="9e32b31d2ca63a25a8c23c7e03225f4f6ed82e61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Alerts&lt;/strong&gt;
The following types of alerts are supported.</source>
          <target state="translated">&lt;strong&gt;アラート&lt;/strong&gt; 次のタイプのアラートがサポートされています。</target>
        </trans-unit>
        <trans-unit id="448687b4c05f31ae6733ace77b95d049d165884f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cameras&lt;/strong&gt;
There has to be one or more camera sections. This section contains camera specific configuration and policy information. The camera section consists of a main section and a sub section. The sub section is used to specify one or more objects of interest for this camera and the object specific settings.</source>
          <target state="translated">&lt;strong&gt;カメラ&lt;/strong&gt; 1つ以上のカメラセクションが必要です。このセクションには、カメラ固有の構成とポリシー情報が含まれています。カメラセクションは、メインセクションとサブセクションで構成されています。サブセクションは、このカメラの対象となる1つ以上のオブジェクトとオブジェクト固有の設定を指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f3b66e4719b5e51b849606011f6f323a95d1c6a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Choosing the Camera Operating Mode&lt;/strong&gt;
CamAi supports four operating modes. The mode is configurable on a per camera basis. The default mode generated by the</source>
          <target state="translated">&lt;strong&gt;カメラの動作モードの選択&lt;/strong&gt; CamAiは4つの動作モードをサポートしています。このモードは、カメラごとに構成できます。によって生成されるデフォルトのモード</target>
        </trans-unit>
        <trans-unit id="32d74b1970382aa2b620afe7705d9839678490dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Email Section&lt;/strong&gt;
This contains one Email Sender and zero or more Email Recepient sections</source>
          <target state="translated">&lt;strong&gt;メールセクション&lt;/strong&gt; これには、1つのメール送信者セクションと0個以上のメール受信者セクションが含まれます</target>
        </trans-unit>
        <trans-unit id="482846d9be502df0df5c01156a8456ba8a55e27b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Manager Section&lt;/strong&gt;
This section has CamAi runtime defaults. If the user doesn't specify a per camera directory, the manager sections basedir variable is used as the parent for each camera.::</source>
          <target state="translated">&lt;strong&gt;Managerセクション&lt;/strong&gt; このセクションには、CamAiランタイムのデフォルトがあります。ユーザーがカメラごとのディレクトリを指定しない場合、マネージャーのセクションbasedir変数が各カメラの親として使用されます。</target>
        </trans-unit>
        <trans-unit id="d7a75f8fccd473422aa0805c263cbfc50e2c4e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setting up Face Recognition&lt;/strong&gt;
Create a known faces directory. Follow the sample directory heirarchy.
Put this under camai directory for now. Pictures in standard
formats like jpg/gif/png/bmp should work. Each picture should only have
the face of the person whose name is the parent directory.::</source>
          <target state="translated">&lt;strong&gt;顔認識の設定&lt;/strong&gt; 既知の顔ディレクトリを作成します。サンプルのディレクトリ階層に従ってください。とりあえず、これをcamaiディレクトリの下に置きます。jpg / gif / png / bmpのような標準形式の画像が機能するはずです。各写真には、名前が親ディレクトリである人物の顔のみを含める必要があります。::</target>
        </trans-unit>
        <trans-unit id="0e3e0f77d5848d0c894de6cac0337669a35233dd" translate="yes" xml:space="preserve">
          <source>=====
CamAI</source>
          <target state="translated">===== CamAI</target>
        </trans-unit>
        <trans-unit id="0d83fed963e78ba3a6d313951030d59987e66912" translate="yes" xml:space="preserve">
          <source>============
Installation</source>
          <target state="translated">============インストール</target>
        </trans-unit>
        <trans-unit id="b97e5b53a98883ed99461f2a493fcd53fa8073a3" translate="yes" xml:space="preserve">
          <source>==============
Configuration</source>
          <target state="translated">==============構成</target>
        </trans-unit>
        <trans-unit id="3dbc915ccfb311c841b83da473a97f6cb5f6b874" translate="yes" xml:space="preserve">
          <source>AI based Camera monitor and alerting system</source>
          <target state="translated">AIを活用したカメラ監視・警報システム</target>
        </trans-unit>
        <trans-unit id="cbde445f0ca43b81c4a725fbf0be410fe1c70305" translate="yes" xml:space="preserve">
          <source>Below is an example configuration file that the camcli.py --discover option generates. The configuration file can be hand crafted. There are three main sections.</source>
          <target state="translated">以下は camcli.py --discover オプションが生成する設定ファイルの例です。この設定ファイルは手作業で作成することができます。主に3つのセクションがあります。</target>
        </trans-unit>
        <trans-unit id="5402fdbf5d70229a41a99e676d92993027eb719b" translate="yes" xml:space="preserve">
          <source>CamAi takes an AI first approach to monitoring and description of a video stream. Traditional open source packages like ZoneMinder and others largely rely on motion detection and handcrafted &quot;zones&quot; to try to reduce false detections. Modern Cameras support much higher resolutions (FHD, 4MP, 5MP, 4K etc) and this requires consistently low latency handling of the video streams, which the older systems seem to be having issues coping with.</source>
          <target state="translated">CamAiは、ビデオストリームの監視と記述にAIファーストのアプローチを採用しています。ZoneMinderなどの従来のオープンソースパッケージは、誤検出を減らすために動き検出と手作りの「ゾーン」に大きく依存しています。現代のカメラは、はるかに高い解像度(FHD,4MP,5MP,4Kなど)をサポートしており、ビデオストリームを一貫して低レイテンシで処理する必要がありますが、これは古いシステムでは対処に問題があるようです。</target>
        </trans-unit>
        <trans-unit id="86cae3924e595a0e2af52b65e0ec41cc90314a85" translate="yes" xml:space="preserve">
          <source>CamAi tries to take advantange of the 'many cpu cores' and is heavily threaded to ensure reliable high resolution video stream processing of 'many' sources. It also uses more modern approaches like Instance Segmentation, Face Detection and Face Recognition to reduce the false alarm rates. While this requires a GPU/s to get reasonable performance, inference engines bundled with traditional cpu cores are the future. It takes a data science approach to enable learning over time what might be normal or otherwise and get closer to a human in taking actions. Some of these features are available in the &quot;cloud&quot; cameras like Ring :sup:&lt;code&gt;tm&lt;/code&gt;;, Nest :sup:&lt;code&gt;tm&lt;/code&gt;;, which requires the video streams to be sent to 'their' cloud, and come with many involuntary 'sharing' features. CamAi can do this all within the network, with or without any external connectivity for the camera streams.</source>
          <target state="translated">CamAiは、「多くのCPUコア」を活用しようとし、「多くの」ソースの信頼性の高い高解像度ビデオストリーム処理を確実にするために、スレッド化されています。また、インスタンスのセグメンテーション、顔の検出、顔の認識などの最新のアプローチを使用して、誤報率を減らします。妥当なパフォーマンスを得るにはGPUが必要ですが、従来のCPUコアにバンドルされている推論エンジンが将来的に使用されます。それは、データサイエンスアプローチを採用して、時間の経過とともに正常またはそうでない可能性があることを学習できるようにし、アクションを実行するときに人間に近づきます。これらの機能の一部は、Ring：sup： &lt;code&gt;tm&lt;/code&gt; ;、Nest：sup： &lt;code&gt;tm&lt;/code&gt; などの「クラウド」カメラで使用できます。;これは、ビデオストリームを「クラウド」に送信する必要があり、多くの非自発的な「共有」機能が付属しています。CamAiは、カメラストリームの外部接続の有無にかかわらず、すべてネットワーク内でこれを実行できます。</target>
        </trans-unit>
        <trans-unit id="a916d053c58179702d52c67cac86a593b3e0927f" translate="yes" xml:space="preserve">
          <source>Install Nvidia CUDA for tensorflow acceleration
Cuda 10.0(not 10.1), CuDNN 7.5 and Tensorflow 1.13/1.14 was used for testing
Any compatible combination after these versions should work.</source>
          <target state="translated">Nvidia CUDA for tensorflow acceleration Cuda 10.0(10.1ではなく)、CuDNN 7.5、Tensorflow 1.13/1.14をインストールしてテストしました。</target>
        </trans-unit>
        <trans-unit id="228ae36d683139e9ce3da91d2d68a8b312407042" translate="yes" xml:space="preserve">
          <source>Install Pip3 packages in requirements.txt
Optional but Recommended: Create a virtual env for camai
mkdir camai
# If you do not have virtualenv already, or want to use a more current version
pip3 install virtualenv --user
virtualenv -p python3.7 venv37</source>
          <target state="translated">requirements.txt に Pip3 パッケージをインストールします。camai 用の仮想環境を作成 mkdir camai#virtualenv を既に持っていない場合や、最新のバージョンを使いたい場合は pip3 をインストール virtualenv --user virtualenv -p python3.7 venv37</target>
        </trans-unit>
        <trans-unit id="d82895eea9421706862b494836d0a974f7b3dff1" translate="yes" xml:space="preserve">
          <source>Install Ubuntu Packages in ubuntu_deps.txt.
bash ./ubuntu-deps.txt</source>
          <target state="translated">ubuntu_deps.txtにUbuntuパッケージをインストールします。 bash ./ubuntu-deps.txt</target>
        </trans-unit>
        <trans-unit id="8780d6f35466ed5ad2837c69b8f8f6754579c976" translate="yes" xml:space="preserve">
          <source>It is certainly possible to try to 'graft' these features to existing systems. However it would have resulted in a mish mash of languages and technologies (perl/c++/windows only) or only partially open source. CamAI aims to have a more modern, maintainable and extensible code base that is fully be open source, and cross platform (over time) and modern, without having to jettison control and visibility to 'cloud' cameras.</source>
          <target state="translated">これらの機能を既存のシステムに「移植」しようとすることは確かに可能です。しかし、それは言語や技術の寄せ集め(perl/c++/Windowsのみ)や部分的なオープンソースになってしまいます。CamAIは、より近代的で保守性と拡張性に優れたコードベースを持ち、完全にオープンソースであり、クロスプラットフォームで(時間をかけて)近代的なものを目指しています。</target>
        </trans-unit>
        <trans-unit id="0aac8d3e306bb99a9576d02631562cac7afdb8ee" translate="yes" xml:space="preserve">
          <source>Quick Run
Discover onvif compatible cameras on your network and generate a configuration file</source>
          <target state="translated">クイック実行 ネットワーク上のonvif互換カメラを検出し、設定ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">必要条件</target>
        </trans-unit>
        <trans-unit id="62a213509d3ffd4a20a29da48ee31cf971db43b1" translate="yes" xml:space="preserve">
          <source>The development has been primarily on a ubuntu 18.04 base.</source>
          <target state="translated">開発は主にubuntu 18.04ベースで行われています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
