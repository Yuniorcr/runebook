<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/cocof/">
    <body>
      <group id="cocof">
        <trans-unit id="4a27e4c94b82d64030b2d8ec9a2187c91b94da6e" translate="yes" xml:space="preserve">
          <source>Cocof</source>
          <target state="translated">ココフ</target>
        </trans-unit>
        <trans-unit id="a6aa1fe8caf29aaa4cefe729b7c72821caeba703" translate="yes" xml:space="preserve">
          <source>Cocof takes a file path and a &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON patch&lt;/a&gt; string as arguments.
It then modifies the datastructure given by the file's content accordingly and
writies it back to the same file (in-place editing).
You can also tell &lt;code&gt;cocof&lt;/code&gt; to read from &lt;code&gt;stdin&lt;/code&gt;, in which case it will output
it's result to &lt;code&gt;stdout&lt;/code&gt;. TOML, YAML and JSON expect their content to be &lt;code&gt;utf-8&lt;/code&gt;
encoded. PLIST expects either an &lt;code&gt;utf-8&lt;/code&gt; encoded xml content or binary content.</source>
          <target state="translated">Cocofは、引数としてファイルパスと&lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSONパッチ&lt;/a&gt;文字列を受け取ります。次に、ファイルのコンテンツによって指定されたデータ構造を適宜変更し、同じファイルに書き込みます（インプレース編集）。また、 &lt;code&gt;cocof&lt;/code&gt; に &lt;code&gt;stdin&lt;/code&gt; から読み取るように指示することもできます。その場合、結果は &lt;code&gt;stdout&lt;/code&gt; に出力されます。TOML、YAML、JSONは、コンテンツが &lt;code&gt;utf-8&lt;/code&gt; で エンコードされていることを想定しています。PLISTは、 &lt;code&gt;utf-8&lt;/code&gt; でエンコードされたxmlコンテンツまたはバイナリコンテンツのいずれかを想定しています。</target>
        </trans-unit>
        <trans-unit id="58dbe199d1ee6ef35c67d7a91d444d44548cf5f0" translate="yes" xml:space="preserve">
          <source>Cocof, short for consistent config file, is a python module that allows the
modification of different key-value config files on the comand line.</source>
          <target state="translated">Cocofは一貫性のあるコンフィグファイルの略で、コマンドライン上で異なるキー値のコンフィグファイルを変更できるようにするPythonモジュールです。</target>
        </trans-unit>
        <trans-unit id="8d7b415a1f845fedaaf7defc4460713e13b5daa8" translate="yes" xml:space="preserve">
          <source>Consistent CLI config file modifier</source>
          <target state="translated">一貫性のある CLI 設定ファイルの修飾子</target>
        </trans-unit>
        <trans-unit id="3e56ee1a6a4ddf28f08d8b5de8f8afeef647c8b6" translate="yes" xml:space="preserve">
          <source>Currently supported formats are TOML, YAML, JSON and PLIST.</source>
          <target state="translated">現在サポートされているフォーマットはTOML、YAML、JSON、PLISTです。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="ccd96bd3a6233dfd63f0af7485dc82c7fc3f216b" translate="yes" xml:space="preserve">
          <source>Most importantly: For YAML and TOML it &lt;em&gt;It will keep line breaks and comments
the same.&lt;/em&gt; So the file will look more or less like the original (depending on
the operations on it of course).</source>
          <target state="translated">最も重要なこと：YAMLとTOMLの場合&lt;em&gt;、改行とコメントを同じに保ちます。&lt;/em&gt;したがって、ファイルは元のファイルとほぼ同じように見えます（もちろん、ファイルの操作によって異なります）。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="d0f188e0e9a6e67c81ec2e8655fb68ba5f82ab75" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/subtitle&quot;, &quot;value&quot;: &quot;Sub&quot;}&lt;/code&gt; as modification
yields:</source>
          <target state="translated">用い &lt;code&gt;{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/subtitle&quot;, &quot;value&quot;: &quot;Sub&quot;}&lt;/code&gt; 変形収率として：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
