<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/nanaimo/">
    <body>
      <group id="nanaimo">
        <trans-unit id="57b0192c90bade6200f8fe6add2bd92423f9a981" translate="yes" xml:space="preserve">
          <source>A delicious Python treat that makes on-target testing sweet and satisfying.</source>
          <target state="translated">オンターゲットテストを甘くして満足感を与える美味しいパイソンのおやつ。</target>
        </trans-unit>
        <trans-unit id="7e72ab885b6eecaecfbe3c9d5d916b2e1e1ab636" translate="yes" xml:space="preserve">
          <source>Block diagram of Nanaimo&amp;rsquo;s relationship to other components of a typical software build and test pipeline.</source>
          <target state="translated">典型的なソフトウェアビルドおよびテストパイプラインの他のコンポーネントとのナナイモの関係のブロック図。</target>
        </trans-unit>
        <trans-unit id="9a5cf9c40036ab923e4b08d4bf75097ac400ff09" translate="yes" xml:space="preserve">
          <source>Example of S32K dev boards attached to Raspberry PI CI workers running the &lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt; agent and using Nanaimo.</source>
          <target state="translated">&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;エージェントを実行してNanaimoを使用しているRaspberryPICIワーカーに接続されたS32K開発ボードの例。</target>
        </trans-unit>
        <trans-unit id="e4b9878a6bb4d7ade487215e6a25d783fd1e3a1d" translate="yes" xml:space="preserve">
          <source>Example scenario using Nanaimo to test an I2C driver for a microcontroller.</source>
          <target state="translated">マイコンのI2Cドライバをテストするためのナナイモを使用したシナリオ例。</target>
        </trans-unit>
        <trans-unit id="74dd49bd8ec3e146e66e88c16fcdff760c7dfd12" translate="yes" xml:space="preserve">
          <source>Framework for automating tests involving hardware test fixtures.</source>
          <target state="translated">ハードウェアテストフィクスチャを含むテストを自動化するためのフレームワーク。</target>
        </trans-unit>
        <trans-unit id="b3e1ac3d545f8a410b7bcb9a5fd366c4bf888b75" translate="yes" xml:space="preserve">
          <source>Hierarchy of system testing. Nanaimo focuses on part and subassembly testing.</source>
          <target state="translated">システムテストの階層構造。ナナイモでは、部品やサブアセンブリーのテストに力を入れています。</target>
        </trans-unit>
        <trans-unit id="e6fa936c1f8b0374bb1f00c2e7ebcab08335fa24" translate="yes" xml:space="preserve">
          <source>Nanaimo is &lt;em&gt;not&lt;/em&gt; a simulation framework and is not designed to support the complexity of a full hardware-in-the-loop platform.
Instead it&amp;rsquo;s focused on testing small integrations with a few hardware components and instruments using concepts, syntax,
and frameworks familiar to software engineers. Examples of these small integrations might include verifying a SPI driver for a
microcontroller or ensuring the upload time for a serial bootloader meets expected Key-Performance-Indicators (KPIs). To do this
Nanaimo abstractions provide async interfaces to hardware either directly using available communication protocols
(e.g. serial or IP networks) or by invoking a CLI provided by the instrument vendor. Because of this latter use case some
instruments will require additional programs be available in a test environment.</source>
          <target state="translated">ナナイモはあり&lt;em&gt;ません&lt;/em&gt;シミュレーションフレームワークと完全なハードウェア・イン・ザ・ループプラットフォームの複雑さをサポートするように設計されていません。代わりに、ソフトウェアエンジニアに馴染みのある概念、構文、およびフレームワークを使用して、いくつかのハードウェアコンポーネントおよび機器との小規模な統合をテストすることに重点を置いています。これらの小さな統合の例としては、マイクロコントローラーのSPIドライバーの検証や、シリアルブートローダーのアップロード時間が予想される主要業績評価指標（KPI）を満たしていることの確認などがあります。これを行うために、Nanaimo抽象化は、利用可能な通信プロトコル（シリアルまたはIPネットワークなど）を直接使用するか、機器ベンダーが提供するCLIを呼び出すことにより、ハードウェアへの非同期インターフェイスを提供します。この後者の使用例のため、一部の機器では、テスト環境で利用可能な追加のプログラムが必要になります。</target>
        </trans-unit>
        <trans-unit id="14c12ea446b8fb714a267f185c0390be1cf066b4" translate="yes" xml:space="preserve">
          <source>Nanaimo is a set of utilities and plugins designed to enable integration of hardware test apparatuses
with pytest. This can allow on-target tests to run as part of continuous integration pipelines like
&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;, &lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt;, or &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;.</source>
          <target state="translated">Nanaimoは、ハードウェアテスト装置とpytestの統合を可能にするように設計されたユーティリティとプラグインのセットです。これにより、&lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt;、&lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt;、&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;などの継続的インテグレーションパイプラインの一部としてオンターゲットテストを実行できます 。</target>
        </trans-unit>
        <trans-unit id="a3008905c2e9a32e2b3a3144f0ea7a8f7d1ef964" translate="yes" xml:space="preserve">
          <source>Nanaimo is alpha software and will remain so until we bump its version to 1.0.0 or greater.
We will not knowingly break compatibility within a minor revision but we will break compatibility
a few more times between minor revisions until beta is declared. Because of this you should depend
on a minor version explicitly. For example</source>
          <target state="translated">ナナイモはアルファ版のソフトウェアであり、バージョンが1.0.0以上になるまではアルファ版のままです。マイナーリビジョンの中で故意に互換性を壊すことはありませんが、ベータ版が宣言されるまでの間、マイナーリビジョンの間に何度か互換性を壊すことがあります。このため、マイナーバージョンには明示的に依存しなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9d7cd62b4cca86287dfc6d8d17a3b3d532dc71f3" translate="yes" xml:space="preserve">
          <source>Nanaimo is designed to enable testing of software-defined, physical components in isolation to
provide pre-integration verification of software interfaces and behavioral contracts. It adapts
asynchronous control and monitoring of these components to fit familiar testing idioms
(e.g. x-unit testing) using the popular python test framework, &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;.</source>
          <target state="translated">Nanaimoは、ソフトウェア定義の物理コンポーネントを分離してテストできるように設計されており、ソフトウェアインターフェイスと動作コントラクトの統合前の検証を提供します。一般的なPythonテストフレームワークである&lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;pytest&lt;/a&gt;を使用して、これらのコンポーネントの非同期制御と監視を、使い慣れたテストイディオム（xユニットテストなど）に適合させます。</target>
        </trans-unit>
        <trans-unit id="ab972799d0dfd1ccd4227b35e29e69093098ded9" translate="yes" xml:space="preserve">
          <source>Nanaimo is named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Nanaimo_bar&quot;&gt;Nanaimo bars&lt;/a&gt; which are about the best things humans have ever invented.</source>
          <target state="translated">ナナイモは、人間がこれまでに発明した中で最高のものである&lt;a href=&quot;https://en.wikipedia.org/wiki/Nanaimo_bar&quot;&gt;ナナイモバーに&lt;/a&gt;ちなんで名付けられました。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">留意事項</target>
        </trans-unit>
        <trans-unit id="d03acb6e4ba3216844800c042f62673952a7e510" translate="yes" xml:space="preserve">
          <source>This design is an amalgam of the &lt;a href=&quot;https://www.youtube.com/watch?v=0BSaI117ITI&quot;&gt;TLYF&lt;/a&gt; (Test Like You Fly) methodology and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Swiss_cheese_model&quot;&gt;Swiss cheese&lt;/a&gt; model of
failure analysis. Specifically; Nanaimo facilitates testing on actual or representative hardware
for the first integration of software into a part or subassembly. Traditionally software engineers were
responsible only for unit-testing and Software-In-the-Loop (SIL) simulation of their code. Nanaimo encourages
software engineers to also provide hardware integration tests by enabling Hardware-In-the-Loop
&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;continuous-integration&lt;/a&gt; (HIL-CI, perhaps?).</source>
          <target state="translated">この設計は、&lt;a href=&quot;https://www.youtube.com/watch?v=0BSaI117ITI&quot;&gt;TLYF&lt;/a&gt;（Test Like You Fly）方法論と、故障解析の&lt;a href=&quot;https://en.wikipedia.org/wiki/Swiss_cheese_model&quot;&gt;スイスチーズ&lt;/a&gt;モデルを組み合わせたものです。具体的には、Nanaimoは、ソフトウェアをパーツまたはサブアセンブリに最初に統合するために、実際のハードウェアまたは代表的なハードウェアでのテストを容易にします。従来、ソフトウェアエンジニアは、コードの単体テストとSoftware-In-the-Loop（SIL）シミュレーションのみを担当していました。Nanaimoは、Hardware-In-the-Loop&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;継続的インテグレーション&lt;/a&gt;（おそらくHIL-CI？）を有効にすることにより、ソフトウェアエンジニアがハードウェア統合テストも提供することを推奨しています 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
