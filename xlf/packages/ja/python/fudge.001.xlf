<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/fudge/">
    <body>
      <group id="fudge">
        <trans-unit id="5eac10d955e77365c4b38c49f908818f3411a05e" translate="yes" xml:space="preserve">
          <source>Complete documentation is available at &lt;a href=&quot;https://fudge.readthedocs.org/en/latest/&quot;&gt;https://fudge.readthedocs.org/en/latest/&lt;/a&gt;</source>
          <target state="translated">完全なドキュメントは&lt;a href=&quot;https://fudge.readthedocs.org/en/latest/&quot;&gt;https://fudge.readthedocs.org/en/latest/&lt;/a&gt;で入手できます。</target>
        </trans-unit>
        <trans-unit id="c13afbf40129ff3222adbcddcbf4bdae54002f2c" translate="yes" xml:space="preserve">
          <source>Fudge is a Python module for using fake objects (mocks and stubs) to test real ones.</source>
          <target state="translated">Fudgeは偽物(モックやスタブ)を使って本物をテストするためのPythonモジュールです。</target>
        </trans-unit>
        <trans-unit id="979e43004c2ac2a8ab821edf85d630614f648981" translate="yes" xml:space="preserve">
          <source>Here is a quick preview of how you can test code that sends
email without actually sending email:</source>
          <target state="translated">ここでは、実際にメールを送信せずにメールを送信するコードをテストする方法を簡単にプレビューします。</target>
        </trans-unit>
        <trans-unit id="fb1bb391a7eba76e0330fd54ebd9318823b1d136" translate="yes" xml:space="preserve">
          <source>In readable Python code, you declare what methods are available on your fake and
how they should be called. Then you inject that into your application and start
testing. This declarative approach means you don&amp;rsquo;t have to record and playback
actions and you don&amp;rsquo;t have to inspect your fakes after running code. If the fake
object was used incorrectly then you&amp;rsquo;ll see an informative exception message
with a traceback that points to the culprit.</source>
          <target state="translated">読み取り可能なPythonコードで、偽物で使用できるメソッドとその呼び出し方法を宣言します。次に、それをアプリケーションに挿入してテストを開始します。この宣言型アプローチは、アクションを記録および再生する必要がなく、コードの実行後に偽物を検査する必要がないことを意味します。偽のオブジェクトが誤って使用された場合は、原因を示すトレースバックを含む有益な例外メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="2f680878f880516cd458d6920ff922438d656c03" translate="yes" xml:space="preserve">
          <source>Replace real objects with fakes (mocks, stubs, etc) while testing.</source>
          <target state="translated">テスト中に本物のオブジェクトを偽物(モック、スタブなど)に置き換えます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
