<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/fakemod/">
    <body>
      <group id="fakemod">
        <trans-unit id="13f2ccc03b4d881aff0ce254e322f2089cd2afd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fakemod&lt;/code&gt; - auto-reloading module development library</source>
          <target state="translated">&lt;code&gt;fakemod&lt;/code&gt; -モジュール開発ライブラリの自動再読み込み</target>
        </trans-unit>
        <trans-unit id="9ab51a755d5f9f39c9170f8f74e938138af9de2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fakemod&lt;/code&gt; is a useful alternative to &lt;code&gt;importlib.reload&lt;/code&gt;
and &lt;code&gt;sys.path&lt;/code&gt; hacking.</source>
          <target state="translated">&lt;code&gt;fakemod&lt;/code&gt; は、 &lt;code&gt;importlib.reload&lt;/code&gt; および &lt;code&gt;sys.path&lt;/code&gt; ハッキングの便利な代替手段です。</target>
        </trans-unit>
        <trans-unit id="2e5649076f2d095b6c574e8607777d32176b5a9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fakemod&lt;/code&gt; is the way ;-)</source>
          <target state="translated">&lt;code&gt;fakemod&lt;/code&gt; が方法です;-)</target>
        </trans-unit>
        <trans-unit id="892061cbd0dcdbd21c6a16c66c42d3c66ddb90b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fakemod&lt;/code&gt; turns the filesystem into a namespace</source>
          <target state="translated">&lt;code&gt;fakemod&lt;/code&gt; はファイルシステムを名前空間に変えます</target>
        </trans-unit>
        <trans-unit id="909c9a83e464fc04ceb76f04944a54e4ffefc582" translate="yes" xml:space="preserve">
          <source>Auto-Reloadable Modules and Namespaces</source>
          <target state="translated">自動リロード可能なモジュールと名前空間</target>
        </trans-unit>
        <trans-unit id="d47ef1fffca5f7909c62ee9975da3ca4efa39736" translate="yes" xml:space="preserve">
          <source>Beautiful is better than ugly.</source>
          <target state="translated">ブスよりも美人の方がいい。</target>
        </trans-unit>
        <trans-unit id="528d6da568eb5f2a2ab0edfe1c25d868bf74978d" translate="yes" xml:space="preserve">
          <source>Cell Mode</source>
          <target state="translated">セルモード</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="038c911378521cf0d4aeffc9bf8807fdaf133311" translate="yes" xml:space="preserve">
          <source>Explicit is better than implicit.</source>
          <target state="translated">暗示的なものよりも明示的なものの方が良い。</target>
        </trans-unit>
        <trans-unit id="0676de6998f9db9c5a8cbc65acf90cf34a613116" translate="yes" xml:space="preserve">
          <source>Fake &lt;code&gt;fimport&lt;/code&gt;, Fake &lt;code&gt;ffrom&lt;/code&gt;</source>
          <target state="translated">偽の &lt;code&gt;fimport&lt;/code&gt; 、偽の &lt;code&gt;ffrom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="849271f19114ecf74831eaef26def87eb3722b00" translate="yes" xml:space="preserve">
          <source>Find and run all &lt;code&gt;unittest.TestCase&lt;/code&gt; classes in a module:</source>
          <target state="translated">モジュール内のすべての &lt;code&gt;unittest.TestCase&lt;/code&gt; クラスを見つけて実行します。</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="3bb0b2c72a5548c255465f4942b1e8f4c751e9d4" translate="yes" xml:space="preserve">
          <source>If you want a file, request it.</source>
          <target state="translated">ファイルが欲しい場合はリクエストしてください。</target>
        </trans-unit>
        <trans-unit id="b61de70f99f8403b50c3ed28b8a4a2a7c49d694a" translate="yes" xml:space="preserve">
          <source>Import a nested name directly:</source>
          <target state="translated">入れ子になった名前を直接インポートします。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="d6a06199cc127e571d3588aef63c79108675eabc" translate="yes" xml:space="preserve">
          <source>Motivation</source>
          <target state="translated">モチベーション</target>
        </trans-unit>
        <trans-unit id="6545da36c34edd841c0b331db3f45a90ad52576b" translate="yes" xml:space="preserve">
          <source>Namespaces are one honking great idea -- let's do more of those!</source>
          <target state="translated">名前空間は非常に素晴らしいアイデアです。</target>
        </trans-unit>
        <trans-unit id="079812c5d15d60f9dc2d5c2a02597d20947b036e" translate="yes" xml:space="preserve">
          <source>Only run a single class in a test file and exit:</source>
          <target state="translated">テストファイル内の単一のクラスのみを実行して終了します。</target>
        </trans-unit>
        <trans-unit id="fc0af7cef540f623d14a1e2defef5d1533834c31" translate="yes" xml:space="preserve">
          <source>Place your Python cell code in a directory and start using it immediately.</source>
          <target state="translated">Pythonのセルコードをディレクトリに置いて、すぐに使い始めましょう。</target>
        </trans-unit>
        <trans-unit id="47d210879080a196cf7ab30709019d8b44448db9" translate="yes" xml:space="preserve">
          <source>Relative directories can be given:</source>
          <target state="translated">相対ディレクトリを与えることができます。</target>
        </trans-unit>
        <trans-unit id="7a4162a31c64e4ff336bf415011332cb915f093b" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;unittest&lt;/code&gt; cases easily.</source>
          <target state="translated">&lt;code&gt;unittest&lt;/code&gt; ケースを簡単に実行します。</target>
        </trans-unit>
        <trans-unit id="117f03ce1783d27fbb90a7f2c381b0ce9fded69a" translate="yes" xml:space="preserve">
          <source>Run a single test case method:</source>
          <target state="translated">単一のテストケースメソッドを実行します。</target>
        </trans-unit>
        <trans-unit id="3865e6709d7d0b222ff0e8aa5933341fb1763610" translate="yes" xml:space="preserve">
          <source>Running the following:</source>
          <target state="translated">以下を実行します。</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">テスト</target>
        </trans-unit>
        <trans-unit id="9f8c58230d4329c649ad43d61a4d1f4cdc873107" translate="yes" xml:space="preserve">
          <source>Tests for these library functions can be developed easily along the way.</source>
          <target state="translated">これらのライブラリ機能のテストは、途中で簡単に開発することができます。</target>
        </trans-unit>
        <trans-unit id="c812afa1561d738a3fce4bf96022cb5ccb780401" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.at&lt;/code&gt;, &lt;code&gt;.up&lt;/code&gt;, &lt;code&gt;.install&lt;/code&gt; functions return &lt;code&gt;FakeModuleType&lt;/code&gt; objects
wrapped in a &lt;code&gt;ModuleProxy&lt;/code&gt; object that triggers reloading when
accessing its attributes, if needed. Namespace and &lt;code&gt;__init__.py&lt;/code&gt; fake
modules perform auto-reloading on attribute access as well.</source>
          <target state="translated">&lt;code&gt;.at&lt;/code&gt; 、 &lt;code&gt;.up&lt;/code&gt; 、 &lt;code&gt;.install&lt;/code&gt; 機能が返す &lt;code&gt;FakeModuleType&lt;/code&gt; がに包まれたオブジェクト &lt;code&gt;ModuleProxy&lt;/code&gt; の必要に応じて、その属性にアクセスするときトリガーは再ロードするオブジェクト。名前空間と &lt;code&gt;__init__.py&lt;/code&gt; 偽のモジュールは、属性アクセスでも自動再読み込みを実行します。</target>
        </trans-unit>
        <trans-unit id="d18a25e76938a433a41d4e46f796f6a53a5af288" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.install&lt;/code&gt; function will use the current working directory
if &lt;code&gt;__file__&lt;/code&gt; is not defined. This is useful in a cell-mode
environment.</source>
          <target state="translated">&lt;code&gt;.install&lt;/code&gt; 場合、この関数は、現在の作業ディレクトリを使用します &lt;code&gt;__file__&lt;/code&gt; 定義されていません。これは、セルモード環境で役立ちます。</target>
        </trans-unit>
        <trans-unit id="b1decec5aa5463a0da32fbc5e3f53fe4541855ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fakemod&lt;/code&gt; library allows for placing helper modules and functions
in a directory and making them quickly available, with reloading if needed.
This helps with converting existing notebook cells into re-usable
library code.</source>
          <target state="translated">&lt;code&gt;fakemod&lt;/code&gt; ライブラリは、必要に応じて再ロードして、ディレクトリ内のヘルパーモジュールや機能を配置し、それらをすぐに利用できるようにすることが可能になります。これは、既存のノートブックセルを再利用可能なライブラリコードに変換するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="090d67bd9484f10ef13cb64cc630d138b3d858b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fimport&lt;/code&gt; and &lt;code&gt;ffrom&lt;/code&gt; objects can accept filesystem paths or
a Python-like relative import with leading dots.</source>
          <target state="translated">&lt;code&gt;fimport&lt;/code&gt; と &lt;code&gt;ffrom&lt;/code&gt; オブジェクトは、ファイルシステムのパスまたは先頭のドットでPythonのような相対的インポートを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="9234a58e6162e33c16958f0fdf6a20d266425b6e" translate="yes" xml:space="preserve">
          <source>The files and directories accessed via &lt;code&gt;fakemod&lt;/code&gt; are not found in
&lt;code&gt;sys.modules&lt;/code&gt;. These &quot;fake modules&quot; are handled separately and
behave as regular Python modules, with enhancements. Relative
imports within a fake module perform dependency tracking,
allowing for lazy deep-reloading of modules.</source>
          <target state="translated">&lt;code&gt;fakemod&lt;/code&gt; を介してアクセスされるファイルとディレクトリが &lt;code&gt;sys.modules&lt;/code&gt; に見つかりません 。これらの「偽のモジュール」は個別に処理され、拡張された通常のPythonモジュールとして動作します。偽のモジュール内の相対インポートは依存関係の追跡を実行し、モジュールの遅延ディープリロードを可能にします。</target>
        </trans-unit>
        <trans-unit id="7ca4ffb421e365665f2f9c8fa2293bbd2cc868ce" translate="yes" xml:space="preserve">
          <source>There should be one-- and preferably only one --obvious way to do it.</source>
          <target state="translated">一つだけ、できれば一つだけ、明白な方法があるはずだ。</target>
        </trans-unit>
        <trans-unit id="91295ba8bebee8ebe64e0707b6b7a2683eeb6242" translate="yes" xml:space="preserve">
          <source>To use fake import, fake from:</source>
          <target state="translated">フェイクインポートを使用するには、フェイクフロムを使用します。</target>
        </trans-unit>
        <trans-unit id="f2e3dba531f0f7618c848da8562cd022ba830248" translate="yes" xml:space="preserve">
          <source>Top-level Modules</source>
          <target state="translated">トップレベルモジュール</target>
        </trans-unit>
        <trans-unit id="60a36710ab5e378e81d5d0c03ad84c4b33613839" translate="yes" xml:space="preserve">
          <source>Use a file directly:</source>
          <target state="translated">ファイルを直接使用します。</target>
        </trans-unit>
        <trans-unit id="0fa54e4a65ba6e8d8f57a8af2426a23d09195305" translate="yes" xml:space="preserve">
          <source>Use directories as auto-loading namespaces.</source>
          <target state="translated">自動ロードされる名前空間としてディレクトリを使用します。</target>
        </trans-unit>
        <trans-unit id="129c29fd07f83a025087289414e19a66c747715d" translate="yes" xml:space="preserve">
          <source>Use file names as auto-deep-reloading modules.</source>
          <target state="translated">ファイル名を自動ディープリロードモジュールとして使用します。</target>
        </trans-unit>
        <trans-unit id="37ed0a2a4b984966a2a66dc043214184d7b44ac5" translate="yes" xml:space="preserve">
          <source>Use parent directory of &lt;code&gt;__file__&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;__file__&lt;/code&gt; の親ディレクトリを使用します：</target>
        </trans-unit>
        <trans-unit id="8815b58bf85598fdcf47e09cd2f9d51cb4e50308" translate="yes" xml:space="preserve">
          <source>When you're finished, you no longer need &lt;code&gt;fakemod&lt;/code&gt;. You have a readily usable
Python library. Packaging is up to you.</source>
          <target state="translated">終了すると、 &lt;code&gt;fakemod&lt;/code&gt; は不要になります。すぐに使えるPythonライブラリがあります。パッケージングは​​あなた次第です。</target>
        </trans-unit>
        <trans-unit id="8e606058289766d1bd7f4315dc43eacee970a106" translate="yes" xml:space="preserve">
          <source>You can register a directory or file as a top-level module and then import it.</source>
          <target state="translated">ディレクトリやファイルをトップレベルのモジュールとして登録し、それをインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="38d5b0d7c0743b2fc81b9725e7cce6d125c5a3c8" translate="yes" xml:space="preserve">
          <source>Zen</source>
          <target state="translated">Zen</target>
        </trans-unit>
        <trans-unit id="e24ae834b8fdc0300d07f73f952ddbc3aedb8af4" translate="yes" xml:space="preserve">
          <source>produces this output:</source>
          <target state="translated">はこの出力を生成します。</target>
        </trans-unit>
        <trans-unit id="5e3ce9816dc041da92f2aeb808d58b6c237cd132" translate="yes" xml:space="preserve">
          <source>which is the same as</source>
          <target state="translated">と同じ</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
