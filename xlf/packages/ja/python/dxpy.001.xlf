<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/dxpy/">
    <body>
      <group id="dxpy">
        <trans-unit id="b0596762c145e066c6b51d6b767aa76380933b34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dxpy.compat&lt;/code&gt; has some simple shims that mirror Python 3 builtins and redirect them to Python 2.7 equivalents when on 2.7. Most critically, &lt;code&gt;from dxpy.compat import str&lt;/code&gt; will import the &lt;code&gt;unicode&lt;/code&gt; builtin on 2.7 and the &lt;code&gt;str&lt;/code&gt; builtin on python 3. Use &lt;code&gt;str&lt;/code&gt; wherever you would have used &lt;code&gt;unicode&lt;/code&gt;. To convert unicode strings to bytes, use &lt;code&gt;.encode('utf-8')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dxpy.compat&lt;/code&gt; には、Python 3ビルトインをミラーリングし、2.7の場合にPython2.7の同等のものにリダイレクトするいくつかの単純なシムがあります。最も批判的に、 &lt;code&gt;from dxpy.compat import str&lt;/code&gt; インポートされます &lt;code&gt;unicode&lt;/code&gt; 2.7の組み込みと &lt;code&gt;str&lt;/code&gt; のpython 3.使用上の組み込みの &lt;code&gt;str&lt;/code&gt; のあなたが使用していただろうどこに &lt;code&gt;unicode&lt;/code&gt; 。Unicode文字列をバイトに変換するには、 &lt;code&gt;.encode('utf-8')&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="674463a63b833f2ee17f1bbb198b28a2cbb90be6" translate="yes" xml:space="preserve">
          <source>API Documentation</source>
          <target state="translated">API ドキュメント</target>
        </trans-unit>
        <trans-unit id="9d914bfcf1c5bc9e6b83d3232349cae23d392f30" translate="yes" xml:space="preserve">
          <source>Building</source>
          <target state="translated">建物</target>
        </trans-unit>
        <trans-unit id="b6114911729017efbd5b9af9dce07a4c23db36c9" translate="yes" xml:space="preserve">
          <source>Code going into the Python codebase should be written in Python 3.5 style, and should be compatible with Python 2.7.  Python 2.7 support will end on March 1, 2021.</source>
          <target state="translated">Python コードベースに入るコードは Python 3.5 スタイルで書かれ、Python 2.7 と互換性がある必要があります。Python 2.7のサポートは2021年3月1日で終了します。</target>
        </trans-unit>
        <trans-unit id="ca133fd5c5e719911f84f8857fafa733baf2d362" translate="yes" xml:space="preserve">
          <source>Conform to &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8に&lt;/a&gt;準拠します。</target>
        </trans-unit>
        <trans-unit id="b48db00dda4f9932d6db2c22f755daa52ca0f246" translate="yes" xml:space="preserve">
          <source>Convention for Python scripts that are also modules</source>
          <target state="translated">モジュールでもある Python スクリプトの規約</target>
        </trans-unit>
        <trans-unit id="ec1fb0e8927ceeec4b0942eccd8a0408b783ccb8" translate="yes" xml:space="preserve">
          <source>DNAnexus Platform API bindings for Python</source>
          <target state="translated">Python用のDNAnexusプラットフォームAPIバインディング</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">デバッグ</target>
        </trans-unit>
        <trans-unit id="cd8da1618ca623fabd2ab45706d2e10471d5cf77" translate="yes" xml:space="preserve">
          <source>Do not add module-level attributes into the API unless you are absolutely certain they will remain constants. For
example, do not declare an attribute &lt;code&gt;dxpy.foo&lt;/code&gt; (&lt;code&gt;dxpy._foo&lt;/code&gt; is OK), or any other non-private variable in the
global scope of any module. This is because unless the value is a constant, it may need to be updated by an
initialization method, which may need to run lazily to avoid side effects at module load time. Instead, use
accessor methods that can perform the updates at call time:</source>
          <target state="translated">モジュールレベルの属性が定数のままであることが絶対に確実でない限り、APIに追加しないでください。たとえば、属性 &lt;code&gt;dxpy.foo&lt;/code&gt; （ &lt;code&gt;dxpy._foo&lt;/code&gt; はOK）、またはモジュールのグローバルスコープ内の他の非プライベート変数を宣言しないでください。これは、値が定数でない限り、初期化メソッドによって更新する必要がある場合があり、モジュールのロード時の副作用を回避するために遅延実行する必要がある場合があるためです。代わりに、呼び出し時に更新を実行できるアクセサメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="48bad454c6ffe47f4ecda7d71d7322e78baada18" translate="yes" xml:space="preserve">
          <source>Do not introduce module import-time side effects.</source>
          <target state="translated">モジュールインポート時の副作用を導入しないでください。</target>
        </trans-unit>
        <trans-unit id="8a47ccc86c9ce396d0477a87c93be5004af8c01a" translate="yes" xml:space="preserve">
          <source>Document your code in a format usable by &lt;a href=&quot;http://sphinx-doc.org/ext/autodoc.html&quot;&gt;Sphinx Autodoc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://sphinx-doc.org/ext/autodoc.html&quot;&gt;SphinxAutodocで&lt;/a&gt;使用できる形式でコードを文書化します。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">例。</target>
        </trans-unit>
        <trans-unit id="9574bdf222d001a672bb0cb713075c8aa7e9abe4" translate="yes" xml:space="preserve">
          <source>From the dx-toolkit root directory:</source>
          <target state="translated">dx-toolkitのルートディレクトリから。</target>
        </trans-unit>
        <trans-unit id="df6dc1c127d48e12ba33f963b4a97a4123c19c67" translate="yes" xml:space="preserve">
          <source>Google Python style guide</source>
          <target state="translated">Google Pythonスタイルガイド</target>
        </trans-unit>
        <trans-unit id="676aae763b35679dafb83babeb3b0af1ee3d90cf" translate="yes" xml:space="preserve">
          <source>Include in the script a top-level function called &lt;code&gt;main()&lt;/code&gt;, which should be the entry point processor, and
conclude the script with the following stanza:</source>
          <target state="translated">スクリプトに &lt;code&gt;main()&lt;/code&gt; というトップレベルの関数を含めます。これはエントリポイントプロセッサである必要があり、次のスタンザでスクリプトを終了します。</target>
        </trans-unit>
        <trans-unit id="9bbb422884602fb824c52d35b9991df366deb185" translate="yes" xml:space="preserve">
          <source>Install the script into &lt;code&gt;src/python/dxpy/scripts&lt;/code&gt; with a name like &lt;code&gt;dx_useful_script.py&lt;/code&gt;. This will allow
importing with &lt;code&gt;import dxpy.scripts.dx_useful_script&lt;/code&gt;.</source>
          <target state="translated">スクリプトを &lt;code&gt;src/python/dxpy/scripts&lt;/code&gt; に &lt;code&gt;dx_useful_script.py&lt;/code&gt; のような名前でインストールします。これにより、 &lt;code&gt;import dxpy.scripts.dx_useful_script&lt;/code&gt; を使用してインポートできるようになります。</target>
        </trans-unit>
        <trans-unit id="6847eb5db3cd65637963e6462ef62d5860408a52" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;&amp;lt;iterator&amp;gt;.next()&lt;/code&gt;, use &lt;code&gt;next(&amp;lt;iterator&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;iterator&amp;gt;.next()&lt;/code&gt; の代わりに、 &lt;code&gt;next(&amp;lt;iterator&amp;gt;)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d87395bd24dfae71341bb161aec261e609af2716" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;.iteritems()&lt;/code&gt;, use &lt;code&gt;.items()&lt;/code&gt;. If this is a performance concern on 2.7, introduce a shim in compat.py.</source>
          <target state="translated">&lt;code&gt;.iteritems()&lt;/code&gt; の代わりに、 &lt;code&gt;.items()&lt;/code&gt; を使用します。これが2.7でのパフォーマンスの問題である場合は、compat.pyにシムを導入してください。</target>
        </trans-unit>
        <trans-unit id="d950a426d096d142582ebde191536d4f546f0d1e" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;StringIO.StringIO&lt;/code&gt;, use &lt;code&gt;from dxpy.compat import BytesIO&lt;/code&gt; (which is StringIO on 2.7).</source>
          <target state="translated">代わりに &lt;code&gt;StringIO.StringIO&lt;/code&gt; 、使用 &lt;code&gt;from dxpy.compat import BytesIO&lt;/code&gt; （2.7上たStringIOです）。</target>
        </trans-unit>
        <trans-unit id="63058301542c8898593ba52b2666bebe53887e8d" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;raw_input&lt;/code&gt;, use &lt;code&gt;from dxpy.compat import input&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raw_input&lt;/code&gt; の代わりに、from dxpy.compat importinputを使用 &lt;code&gt;from dxpy.compat import input&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9767db1af382aebf46c922fd27a62bd8e9cd4af8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;sort(x, cmp=lambda x, y: ...)&lt;/code&gt;, use &lt;code&gt;x=sorted(x, key=lambda x: ...)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sort(x, cmp=lambda x, y: ...)&lt;/code&gt; 代わりに、 &lt;code&gt;x=sorted(x, key=lambda x: ...)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f6fd14051b354da983ecb8ff41200315d2637cb8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;x.has_key(y)&lt;/code&gt;, use &lt;code&gt;y in x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x.has_key(y)&lt;/code&gt; の代わりに &lt;code&gt;y in x&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="4da9a8dd0a964c7b4b5b9579db1799552bca9008" translate="yes" xml:space="preserve">
          <source>Note: the install script will replace underscores in the name of your module with dashes in the name of the launcher
script.</source>
          <target state="translated">注意:インストールスクリプトはモジュール名のアンダースコアをランチャースクリプト名のダッシュに置き換えます。</target>
        </trans-unit>
        <trans-unit id="bfead3e178179210460f8bdeacc582f0d7e87b2c" translate="yes" xml:space="preserve">
          <source>Other useful resources:</source>
          <target state="translated">その他の有用なリソース。</target>
        </trans-unit>
        <trans-unit id="3f9c4cc3416e160b70e278e7d65e895425e00b6c" translate="yes" xml:space="preserve">
          <source>Python coding style</source>
          <target state="translated">パイソンコーディングスタイル</target>
        </trans-unit>
        <trans-unit id="a4a85c998ce2cd9c480982b861989d3ec8a40877" translate="yes" xml:space="preserve">
          <source>Python version compatibility</source>
          <target state="translated">Python互換性バージョン</target>
        </trans-unit>
        <trans-unit id="cb308f901972e30a32b76dd5739b0133d3919e62" translate="yes" xml:space="preserve">
          <source>Relax other PEP-8 requirements at your discretion if it simplifies code or is needed to follow conventions
established elsewhere at DNAnexus.</source>
          <target state="translated">コードを簡略化したり、DNAnexus の他の場所で確立された規約に従う必要がある場合は、他の PEP-8 要件を任意に緩和してください。</target>
        </trans-unit>
        <trans-unit id="50f12db3431b57bc4f594a7b08e6b221d7b2c023" translate="yes" xml:space="preserve">
          <source>Relax the line length requirement to 120 characters per line, where you judge readability not to be compromised.</source>
          <target state="translated">可読性が損なわれていないと判断したところで、1行120文字までの行数要件を緩和します。</target>
        </trans-unit>
        <trans-unit id="61d2d0023852329564fec4660e5224aaefa2cb92" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;pylint -E&lt;/code&gt; on your code before checking it in.</source>
          <target state="translated">チェックインする前に、コードで &lt;code&gt;pylint -E&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="b5fa648e852202d309e677a3f706c74539cac098" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;_DX_DEBUG&lt;/code&gt; environment variable to a positive integer before
running a dxpy-based program (such as &lt;code&gt;dx&lt;/code&gt;) to display the input and
output of each API call. Supported values are 1, 2, and 3 with
increasing numbers producing successively more verbose output.</source>
          <target state="translated">dxpyベースのプログラム（ &lt;code&gt;dx&lt;/code&gt; など）を実行して各API呼び出しの入力と出力を表示する前に、 &lt;code&gt;_DX_DEBUG&lt;/code&gt; 環境変数を正の整数に設定します。サポートされている値は1、2、および3で、数値が増えると、より詳細な出力が連続して生成されます。</target>
        </trans-unit>
        <trans-unit id="cf1a3d86a66060256044dfc0553a7c95fe6f6ce1" translate="yes" xml:space="preserve">
          <source>Some scripts, such as format converters, are useful both as standalone executables and as importable modules.</source>
          <target state="translated">フォーマットコンバータのようなスクリプトの中には、スタンドアロンの実行ファイルとしても、インポート可能なモジュールとしても有用なものがあります。</target>
        </trans-unit>
        <trans-unit id="85268049c2c2bd779bf476064b4b122d429d0005" translate="yes" xml:space="preserve">
          <source>The Hitchhiker's Guide to Python</source>
          <target state="translated">ヒッチハイカーズ・ガイド・トゥ・パイソン</target>
        </trans-unit>
        <trans-unit id="c8dad01ae3da8eb6b8cba8a0c7cdaea7d5491bcc" translate="yes" xml:space="preserve">
          <source>The dxpy installation process (invoked through &lt;code&gt;setup.py&lt;/code&gt; or with &lt;code&gt;make -C src python&lt;/code&gt; at the top level)
will find the script and install a launcher for it into the executable path automatically. This is done using the
&lt;code&gt;entry_points&lt;/code&gt; facility of setuptools/distribute.</source>
          <target state="translated">dxpyインストールプロセス（ &lt;code&gt;setup.py&lt;/code&gt; またはトップレベルの &lt;code&gt;make -C src python&lt;/code&gt; を使用して呼び出されます）は、スクリプトを検索し、そのランチャーを実行可能パスに自動的にインストールします。これは、setuptools / distributeの &lt;code&gt;entry_points&lt;/code&gt; 機能を使用して行われ ます。</target>
        </trans-unit>
        <trans-unit id="8c7b6149c9a44f75ed34f4d873e4b308b7564f19" translate="yes" xml:space="preserve">
          <source>The next most troublesome gotcha after the bytes/unicode conversions is that many iterables operators return generators in Python 3. For example, &lt;code&gt;map()&lt;/code&gt; returns a generator. This breaks places that expect a list, and requires either explicit casting with &lt;code&gt;list()&lt;/code&gt;, or the use of list comprehensions (usually preferred).</source>
          <target state="translated">バイト/ Unicode変換の次に厄介な問題は、多くのiterables演算子がPython 3でジェネレーターを返すことです。たとえば、 &lt;code&gt;map()&lt;/code&gt; はジェネレーターを返します。これは、リストを期待する場所を壊し、 &lt;code&gt;list()&lt;/code&gt; を使用した明示的なキャスト、またはリスト内包表記の使用（通常は推奨）のいずれかを必要とします。</target>
        </trans-unit>
        <trans-unit id="c084f14040f09a58bb728f0ddff6fb5a4cb9a240" translate="yes" xml:space="preserve">
          <source>To facilitate Python 2 compatibility, we have the compat module in &lt;a href=&quot;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&quot;&gt;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&lt;/a&gt;. Also, the following boilerplate should be
inserted into all Python source files:</source>
          <target state="translated">Python 2の互換性を促進するために、&lt;a href=&quot;https://github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.py&quot;&gt;https：//github.com/dnanexus/dx-toolkit/blob/master/src/python/dxpy/compat.pyに&lt;/a&gt;compatモジュールがあります。また、次の定型文をすべてのPythonソースファイルに挿入する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e99b2bf51505aca7fa345b17356e08b0244cbf9" translate="yes" xml:space="preserve">
          <source>Typically, when called on the command line, &lt;em&gt;main()&lt;/em&gt; will first parse the command line arguments (sys.argv). However,
when imported as a module, the arguments need to instead be passed as inputs to a function. The following is a
suggestion for how to accommodate both styles simultaneously with just one entry point (&lt;code&gt;main&lt;/code&gt;):</source>
          <target state="translated">通常、コマンドラインで呼び出されると、&lt;em&gt;main（）&lt;/em&gt;は最初にコマンドライン引数（sys.argv）を解析します。ただし、モジュールとしてインポートする場合は、代わりに引数を関数への入力として渡す必要があります。以下は、1つのエントリポイント（ &lt;code&gt;main&lt;/code&gt; ）で両方のスタイルに同時に対応する方法の提案です。</target>
        </trans-unit>
        <trans-unit id="f8834549fa3b512635a4cdefe9a5f0cd97e47e4b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;from __future__ import print_function&lt;/code&gt; and use print as a function. Instead of &lt;code&gt;print &amp;gt;&amp;gt;sys.stderr&lt;/code&gt;, write &lt;code&gt;print(..., file=sys.stderr)&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;from __future__ import print_function&lt;/code&gt; 機能として、使用する印刷。 &lt;code&gt;print &amp;gt;&amp;gt;sys.stderr&lt;/code&gt; の代わりに、 &lt;code&gt;print(..., file=sys.stderr)&lt;/code&gt; と記述します。</target>
        </trans-unit>
        <trans-unit id="adea88259ff3223db98b0ce99c873651a8268bc9" translate="yes" xml:space="preserve">
          <source>We have the following convention for these scripts:</source>
          <target state="translated">これらのスクリプトには以下のような規約があります。</target>
        </trans-unit>
        <trans-unit id="83da9c16c6603cb8d4311298056ffabe5920de38" translate="yes" xml:space="preserve">
          <source>dxpy is supported on Python 2 (2.7+) and Python 3 (3.5+)</source>
          <target state="translated">dxpy は Python 2 (2.7+)と Python 3 (3.5+)でサポートされています。</target>
        </trans-unit>
        <trans-unit id="086e971b7ec428ac6a5dad1a0b475da4d8fe6c69" translate="yes" xml:space="preserve">
          <source>dxpy: DNAnexus Python API</source>
          <target state="translated">dxpyを使用しています。DNAnexus Python API</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
