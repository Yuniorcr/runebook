<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/phpserialize/">
    <body>
      <group id="phpserialize">
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="f93c53533e3ddf1ec555238f5ebd8d1161a8c884" translate="yes" xml:space="preserve">
          <source>.  The reason for
this is that phpserialize can&amp;rsquo;t guess if you have binary or text data
in the strings:</source>
          <target state="translated">. The reason for this is that phpserialize can&amp;rsquo;t guess if you have binary or text data in the strings:</target>
        </trans-unit>
        <trans-unit id="b5971fd2f329d7f9bb097724d6168d7f0be646b3" translate="yes" xml:space="preserve">
          <source>.  This does not only serve the purpose
to encapsulate internals but also to avoid name clashes.</source>
          <target state="translated">. This does not only serve the purpose to encapsulate internals but also to avoid name clashes.</target>
        </trans-unit>
        <trans-unit id="e1fbf6a9f38d7c368a594534b337075ec813df53" translate="yes" xml:space="preserve">
          <source>An object hook is a function that takes the name of the class and a dict
with the instance data as arguments.  The instance data keys are in PHP
format which usually is not what you want.  To convert it into Python
identifiers you can use the</source>
          <target state="translated">オブジェクトフックとは、クラス名とインスタンスデータを引数にとる関数です。インスタンスデータのキーは PHP 形式ですが、通常はこれはあなたが望むものではありません。これをPythonの識別子に変換するには</target>
        </trans-unit>
        <trans-unit id="6901f4fd65c564d47171150538b983b26065aac9" translate="yes" xml:space="preserve">
          <source>And to write to those:</source>
          <target state="translated">そして、それらの人たちに手紙を書くこと。</target>
        </trans-unit>
        <trans-unit id="a00a617c8f3f563dd5b42ad1bad4885c63849bb1" translate="yes" xml:space="preserve">
          <source>Another problem are unicode strings.  By default unicode strings are
encoded to &amp;lsquo;utf-8&amp;rsquo; but not decoded on</source>
          <target state="translated">Another problem are unicode strings. By default unicode strings are encoded to &amp;lsquo;utf-8&amp;rsquo; but not decoded on</target>
        </trans-unit>
        <trans-unit id="591702331aabaa21f5981af05739692be9dc5e96" translate="yes" xml:space="preserve">
          <source>Array Serialization</source>
          <target state="translated">配列のシリアライズ</target>
        </trans-unit>
        <trans-unit id="fbe105f223e75fd798cc47438586f80b0f270b6e" translate="yes" xml:space="preserve">
          <source>As you can see, reassigning attributes on a php object will try
to change a private or protected attribute with the same name.
Setting an unknown one will create a new public attribute:</source>
          <target state="translated">ご覧のように、phpオブジェクトの属性を再割り当てすると、同じ名前のprivate属性やprotected属性を変更しようとします。不明なものを設定すると、新しい public 属性が作成されます。</target>
        </trans-unit>
        <trans-unit id="85acb7c9c90fda44738252ec64fae799ebd75477" translate="yes" xml:space="preserve">
          <source>Because the unicode support in Python 3 no longer transparently
handles bytes and unicode objects we had to change the way the
decoding works.  On Python 3 you most likely want to always
decode strings.  Because this would totally fail on binary data
phpserialize uses the &amp;ldquo;surrogateescape&amp;rdquo; method to not fail on
invalid data.  See the documentation in Python 3 for more
information.</source>
          <target state="translated">Because the unicode support in Python 3 no longer transparently handles bytes and unicode objects we had to change the way the decoding works. On Python 3 you most likely want to always decode strings. Because this would totally fail on binary data phpserialize uses the &amp;ldquo;surrogateescape&amp;rdquo; method to not fail on invalid data. See the documentation in Python 3 for more information.</target>
        </trans-unit>
        <trans-unit id="e5cbb9fc2a6a3a4a0c10b8edaff73da421751987" translate="yes" xml:space="preserve">
          <source>Because this access system does not exist in Python, the</source>
          <target state="translated">このアクセスシステムはPythonには存在しないので</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">変更履歴</target>
        </trans-unit>
        <trans-unit id="d5ac4248abf3adf3361bc201d535753a6f38f659" translate="yes" xml:space="preserve">
          <source>Dictionary keys are limited to strings and integers.</source>
          <target state="translated">辞書キーは文字列と整数に限定されます。</target>
        </trans-unit>
        <trans-unit id="136286eed01a4053cbd97cde8e18e2ed79da91d5" translate="yes" xml:space="preserve">
          <source>Due to the fact that PHP doesn&amp;rsquo;t know the concept of lists, lists
are serialized like hash-maps in PHP.  As a matter of fact the
reverse value of a serialized list is a dict:</source>
          <target state="translated">Due to the fact that PHP doesn&amp;rsquo;t know the concept of lists, lists are serialized like hash-maps in PHP. As a matter of fact the reverse value of a serialized list is a dict:</target>
        </trans-unit>
        <trans-unit id="f12bf048c8cc2fa4e4bb93c505e0b88732b93385" translate="yes" xml:space="preserve">
          <source>For a simple test example the</source>
          <target state="translated">簡単なテスト例としては</target>
        </trans-unit>
        <trans-unit id="57f6284399431dcdcf8e5779c1b70059b98ce7d3" translate="yes" xml:space="preserve">
          <source>For example you can pass the ordered dictionary to the unserilization
functions:</source>
          <target state="translated">例えば、順序付き辞書を unserilization 関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6de9470413304e546f550e190aa3b8d2056e8847" translate="yes" xml:space="preserve">
          <source>If you know that you have only text data of a known charset in the result
you can decode strings by setting</source>
          <target state="translated">結果の中に既知の文字セットのテキストデータしかないことがわかっている場合は、文字列をデコードするには</target>
        </trans-unit>
        <trans-unit id="eecaec636a07e95827a6f1cb72cb3be6b3795828" translate="yes" xml:space="preserve">
          <source>If you want to have a list again, you can use the</source>
          <target state="translated">またリストを持ちたい場合は</target>
        </trans-unit>
        <trans-unit id="3bf468dcd3e60344129eea588c69da6ff3ffc11c" translate="yes" xml:space="preserve">
          <source>In PHP each class in the inheritance chain can have a private variable
with the same name, without causing clashes.  (This is similar to the
Python</source>
          <target state="translated">PHPでは、継承チェーン内の各クラスが同じ名前のプライベート変数を持つことができ、衝突を引き起こすことはありません。(これは Python の</target>
        </trans-unit>
        <trans-unit id="020130bd8187fdf97fbb49e20ae529bb1c9a15d2" translate="yes" xml:space="preserve">
          <source>Is serialized with a member data dict that looks like this:</source>
          <target state="translated">このようなメンバー・データ・ディクトでシリアライズされています。</target>
        </trans-unit>
        <trans-unit id="48c803715f4ae5a407d015cc573b75b02a040d72" translate="yes" xml:space="preserve">
          <source>It also provides functions to read from file-like objects:</source>
          <target state="translated">また、ファイルのようなオブジェクトから読み込む機能も提供しています。</target>
        </trans-unit>
        <trans-unit id="1c9bd4fa733aaea91eb77c1b1414ee98d4828483" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible to convert into a tuple by using the</source>
          <target state="translated">It&amp;rsquo;s also possible to convert into a tuple by using the</target>
        </trans-unit>
        <trans-unit id="c7e02c95fe85052fcadf9745a5f1d0358088d936" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="translated">のように</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">なし</target>
        </trans-unit>
        <trans-unit id="3e6416c549089d793b355231b4a195dcb855eb09" translate="yes" xml:space="preserve">
          <source>Object Serialization</source>
          <target state="translated">オブジェクトのシリアライズ</target>
        </trans-unit>
        <trans-unit id="8bc9d662c8fd2341d30af1a7fed6524e92da4abb" translate="yes" xml:space="preserve">
          <source>PHP supports serialization of objects.  Starting with 1.2 of phpserialize
it is possible to both serialize and unserialize objects.  Because class
names in PHP and Python usually do not map, there is a separate</source>
          <target state="translated">PHP はオブジェクトのシリアライズをサポートしています。phpserialize 1.2 以降、オブジェクトのシリアライズとアンシリアライズの両方が可能になりました。PHP と Python のクラス名は通常マップされないので、別の</target>
        </trans-unit>
        <trans-unit id="e1f0c3fc8fccb171f42f6f96c4c40727fde372d3" translate="yes" xml:space="preserve">
          <source>PHP&amp;rsquo;s Object System</source>
          <target state="translated">PHP&amp;rsquo;s Object System</target>
        </trans-unit>
        <trans-unit id="9816ff162a2a6795617d9576c8996b34adc07b03" translate="yes" xml:space="preserve">
          <source>Python 3 Notes</source>
          <target state="translated">Python 3のノート</target>
        </trans-unit>
        <trans-unit id="efdda83cbdfc3a38fb3e2a3de8d5d60b24c4d29e" translate="yes" xml:space="preserve">
          <source>Starting with 1.2 you can provide an array hook to the unserialization
functions that are invoked with a list of pairs to return a real array
object.  By default</source>
          <target state="translated">1.2 以降では、実際の配列オブジェクトを返すためにペアのリストで呼び出される unserialization 関数に配列フックを提供することができます。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="e143bc1334bad5babcdaecf46d0fc51499c5603e" translate="yes" xml:space="preserve">
          <source>The PHP object system is derived from compiled languages such as Java
and C#.  Attributes can be protected from external access by setting
them to</source>
          <target state="translated">PHPのオブジェクトシステムは、JavaやC#などのコンパイル済み言語から派生しています。属性は、外部からのアクセスから保護されます。</target>
        </trans-unit>
        <trans-unit id="1640971be9c235da3cf189f2db95c9ca6f125e61" translate="yes" xml:space="preserve">
          <source>This PHP class:</source>
          <target state="translated">このPHPクラス。</target>
        </trans-unit>
        <trans-unit id="fd83ce7f741ab110cec3a96a2613fa8ea767d5d0" translate="yes" xml:space="preserve">
          <source>This feature however is not supported in PHP.  PHP will only unserialize
the first object.</source>
          <target state="translated">しかし、この機能は PHP ではサポートされていません。PHP は、最初のオブジェクトだけを非シリアライズします。</target>
        </trans-unit>
        <trans-unit id="920d1d9706b047d0bae630d2d66bbd30226c8f90" translate="yes" xml:space="preserve">
          <source>To convert the phpobject into a dict, you can use the</source>
          <target state="translated">phpオブジェクトをdictに変換するには</target>
        </trans-unit>
        <trans-unit id="96263bcac4d866cfbc96a1e0f462374ba4653aaa" translate="yes" xml:space="preserve">
          <source>To serialize objects you can use the</source>
          <target state="translated">オブジェクトをシリアライズするには</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="76dcbbae129a56d8831fd331b46e64df2216eb8d" translate="yes" xml:space="preserve">
          <source>__php_vars__</source>
          <target state="translated">__php_vars__</target>
        </trans-unit>
        <trans-unit id="296f09757e00befc223a94f89765787ea982cc0e" translate="yes" xml:space="preserve">
          <source>__var</source>
          <target state="translated">__var</target>
        </trans-unit>
        <trans-unit id="38206f9ba5ab70d354005e8d2b1a079283174fc4" translate="yes" xml:space="preserve">
          <source>_asdict</source>
          <target state="translated">_asdict</target>
        </trans-unit>
        <trans-unit id="4f0a6d1e7018732a4deb0898f7a75fd831eba882" translate="yes" xml:space="preserve">
          <source>a port of the</source>
          <target state="translated">のポート</target>
        </trans-unit>
        <trans-unit id="a5b6dec6c7fd778b1a9f334329ac5637360d7b17" translate="yes" xml:space="preserve">
          <source>a port of the serialize and unserialize functions of php to python.</source>
          <target state="translated">php の serialize および unserialize 関数を python に移植したものです。</target>
        </trans-unit>
        <trans-unit id="172415f02e562cd029620c3db12fb3cbb83c4208" translate="yes" xml:space="preserve">
          <source>added</source>
          <target state="translated">加算</target>
        </trans-unit>
        <trans-unit id="de5a3f1d3a5ea2f93705b221fdb0a172e695a0e7" translate="yes" xml:space="preserve">
          <source>added support for Python 3</source>
          <target state="translated">Python 3のサポートを追加</target>
        </trans-unit>
        <trans-unit id="8d096921dd009078add4c238835b4ff79a6d4b9c" translate="yes" xml:space="preserve">
          <source>added support for array hooks</source>
          <target state="translated">配列フックのサポートを追加</target>
        </trans-unit>
        <trans-unit id="86acc8eaf40e2f78195908fa228271724d016a08" translate="yes" xml:space="preserve">
          <source>added support for object serialization</source>
          <target state="translated">オブジェクトのシリアル化のサポートを追加</target>
        </trans-unit>
        <trans-unit id="7010cd2b597078edc64477b7e5f1d258c8ffae1c" translate="yes" xml:space="preserve">
          <source>added support for unicode</source>
          <target state="translated">ユニコードのサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="bf4ce836215035f45d651d41b3d8e81235589f86" translate="yes" xml:space="preserve">
          <source>allowed chaining of objects like pickle does</source>
          <target state="translated">ピクルスのようなオブジェクトの連結を許可</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">そして</target>
        </trans-unit>
        <trans-unit id="8d30065d4e346cfa411892bdef929a40e0352a08" translate="yes" xml:space="preserve">
          <source>and similar functions).</source>
          <target state="translated">と同様の機能)。)</target>
        </trans-unit>
        <trans-unit id="b8ef7c9cf20217760b80cee531460d3f9b80d5a8" translate="yes" xml:space="preserve">
          <source>can convert this dict:</source>
          <target state="translated">はこのdictを変換することができます。</target>
        </trans-unit>
        <trans-unit id="6b3a80419d3e4a2c0137757e50216a9591dee173" translate="yes" xml:space="preserve">
          <source>chaining of objects is supported:</source>
          <target state="translated">オブジェクトのチェーン化がサポートされています。</target>
        </trans-unit>
        <trans-unit id="05e9539033b2b479a98a4947fff2ba3d9d06d45f" translate="yes" xml:space="preserve">
          <source>class can be used:</source>
          <target state="translated">クラスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="db819ce1d17f4104160208507bd67403bb0132e6" translate="yes" xml:space="preserve">
          <source>class does this conversion on the fly.  What is
serialized is the special</source>
          <target state="translated">クラスはこの変換をオンザフライで行います。シリアライズされるのは、特別な</target>
        </trans-unit>
        <trans-unit id="10bf5e20134faad438b755c25a83938eb3401eda" translate="yes" xml:space="preserve">
          <source>convert_member_dict</source>
          <target state="translated">コンバートメンバーディクト</target>
        </trans-unit>
        <trans-unit id="ddba591fac1d6a1d614caa5c74370c25c679a0a3" translate="yes" xml:space="preserve">
          <source>decode_strings</source>
          <target state="translated">デコード文字列</target>
        </trans-unit>
        <trans-unit id="76e94348139b788d21edc7b9cd011af238d0de03" translate="yes" xml:space="preserve">
          <source>dict</source>
          <target state="translated">ディクティクト</target>
        </trans-unit>
        <trans-unit id="4b56b77c6930e196948753f9c14939da2834d2a0" translate="yes" xml:space="preserve">
          <source>dict of the class:</source>
          <target state="translated">クラスのディクト。</target>
        </trans-unit>
        <trans-unit id="ac6a5007072474c90e320a1b66bd631f3720f863" translate="yes" xml:space="preserve">
          <source>dict_to_list</source>
          <target state="translated">ディクショントゥリスト</target>
        </trans-unit>
        <trans-unit id="9e9e10844c15238b665b06d6d71f74e5bc5f05b5" translate="yes" xml:space="preserve">
          <source>dict_to_tuple</source>
          <target state="translated">ディクショントゥタプル</target>
        </trans-unit>
        <trans-unit id="1241db317fe547bb5e6854aef853603199aaa0db" translate="yes" xml:space="preserve">
          <source>dumps</source>
          <target state="translated">ダンプ</target>
        </trans-unit>
        <trans-unit id="3107e18552ef8a988986c6727a06c54ba8264cea" translate="yes" xml:space="preserve">
          <source>function.  For more
information about that, have a look at the next section.  Here an
example for a simple object hook:</source>
          <target state="translated">関数を使用しています。それについての詳細は、次のセクションを参照してください。ここでは、簡単なオブジェクトフックの例を示します。</target>
        </trans-unit>
        <trans-unit id="1dfae75987ab2c547d85f2eedd53692b234672e0" translate="yes" xml:space="preserve">
          <source>function:</source>
          <target state="translated">関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="5e3ff7ad0003f68b2cfe7594366ed6a120b3ec51" translate="yes" xml:space="preserve">
          <source>functions of
php to python.  This module implements the python serialization
interface (eg: provides</source>
          <target state="translated">phpの関数をpythonに変換するモジュールです。このモジュールは python のシリアライズインターフェイスを実装しています (例:以下を提供します)。</target>
        </trans-unit>
        <trans-unit id="cb1382a723f04c8a79621164f9e612538f9586d0" translate="yes" xml:space="preserve">
          <source>helper function:</source>
          <target state="translated">ヘルパー関数を使用しています。</target>
        </trans-unit>
        <trans-unit id="58b798cb4790793438149954d74bb0d4082b9e07" translate="yes" xml:space="preserve">
          <source>is converted
into an empty string and floats and booleans into integers for PHP
compatibility:</source>
          <target state="translated">は空の文字列に変換され、フロートやブーリアンはPHPとの互換性のために整数に変換されます。</target>
        </trans-unit>
        <trans-unit id="ba7f9c72de90a5ca5f07240986ff2e74946f015d" translate="yes" xml:space="preserve">
          <source>is used as array object which however means
that the information about the order is lost for associative arrays.</source>
          <target state="translated">は配列オブジェクトとして使用されますが、連想配列の場合は順序に関する情報が失われます。</target>
        </trans-unit>
        <trans-unit id="fe8627bbe00e15849106dc06c9e196ef18107c8d" translate="yes" xml:space="preserve">
          <source>loads</source>
          <target state="translated">積み込み</target>
        </trans-unit>
        <trans-unit id="01a46fb52f0c14f92da476120be7afe1ef1ec52d" translate="yes" xml:space="preserve">
          <source>method:</source>
          <target state="translated">メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="048e72a43858f2c09f6d51bcd449f414eefd6844" translate="yes" xml:space="preserve">
          <source>name mangling system).</source>
          <target state="translated">ネームマングリングシステム)。</target>
        </trans-unit>
        <trans-unit id="41bb14cffc7292bfd382def9e037f15e1d729757" translate="yes" xml:space="preserve">
          <source>object_hook</source>
          <target state="translated">オブジェクトフック</target>
        </trans-unit>
        <trans-unit id="bae617788629461cc3d41500d501ac799a56e349" translate="yes" xml:space="preserve">
          <source>of the dump functions
and return instances of</source>
          <target state="translated">のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">或いは</target>
        </trans-unit>
        <trans-unit id="2842e3c2015327ce2ecd97b71ffd677e79c69a60" translate="yes" xml:space="preserve">
          <source>parameter that is responsible for creating these classes.</source>
          <target state="translated">パラメータを使用して、これらのクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="aa9df709d1e620eb1c8affc0eba65f409d7c7a1b" translate="yes" xml:space="preserve">
          <source>phpobject</source>
          <target state="translated">phpオブジェクト</target>
        </trans-unit>
        <trans-unit id="a2b678f0ed784d095b115a44d1870e529db2b4c2" translate="yes" xml:space="preserve">
          <source>phpserialize.phpobject</source>
          <target state="translated">phpserialize.phpオブジェクト</target>
        </trans-unit>
        <trans-unit id="a4561d3eb3b70a05c27c8ecfe455b03bd467781c" translate="yes" xml:space="preserve">
          <source>pickle</source>
          <target state="translated">漬物</target>
        </trans-unit>
        <trans-unit id="e80721793c24ae14edfca9b26ad406a9815cd3ff" translate="yes" xml:space="preserve">
          <source>private</source>
          <target state="translated">内々</target>
        </trans-unit>
        <trans-unit id="964cab4bb4a5111731b0c00dbb43f794698d8731" translate="yes" xml:space="preserve">
          <source>protected</source>
          <target state="translated">保護された</target>
        </trans-unit>
        <trans-unit id="8b98a923648538ef4b42e662d8e9408deb0bd085" translate="yes" xml:space="preserve">
          <source>serialize</source>
          <target state="translated">シリアライズ</target>
        </trans-unit>
        <trans-unit id="536c7cd3dcfe72c421e29f5e58603f42598168b6" translate="yes" xml:space="preserve">
          <source>to True when calling
loads:</source>
          <target state="translated">を True に設定します。</target>
        </trans-unit>
        <trans-unit id="0ce63265fdaf1ba7d971c0981488b996096b721f" translate="yes" xml:space="preserve">
          <source>unserialize</source>
          <target state="translated">アンセリアル化</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
