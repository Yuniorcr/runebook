<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/hug/">
    <body>
      <group id="hug">
        <trans-unit id="1891cd1442749ae72069c9b8cd5cea2844856a51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hugapi.github.io/hug/&quot;&gt;Read Latest Documentation&lt;/a&gt; - &lt;a href=&quot;https://github.com/hugapi/hug&quot;&gt;Browse GitHub Code Repository&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hugapi.github.io/hug/&quot;&gt;最新のドキュメントを読む&lt;/a&gt;-&lt;a href=&quot;https://github.com/hugapi/hug&quot;&gt;ブラウズGitHubのコードリポジトリを&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fd1eceee6a3dddacede2ff00f0045a329abb963" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Directives&lt;/strong&gt; functions that get executed with the request / response data based on being requested as an argument in your api_function.
These apply as input parameters only, and can not be applied currently as output formats or transformations.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;api_functionの引数として要求されたことに基づいて、要求/応答データで実行される&lt;strong&gt;ディレクティブ&lt;/strong&gt;関数。これらは入力パラメーターとしてのみ適用され、現在、出力形式または変換として適用することはできません。</target>
        </trans-unit>
        <trans-unit id="f0b92d435337779f16ada3f239b1093f1550126a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input Formatters&lt;/strong&gt; a function that takes the body of data given from a user of your API and formats it for handling.</source>
          <target state="translated">&lt;strong&gt;入力フォーマッタ&lt;/strong&gt;は、APIのユーザーから提供されたデータの本体を取得し、処理できるように&lt;strong&gt;フォーマット&lt;/strong&gt;する関数です。</target>
        </trans-unit>
        <trans-unit id="5d0f84ef4dfbdd8691433446b2f3d30323ecfde0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;METHOD Decorators&lt;/strong&gt;&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged</source>
          <target state="translated">&lt;strong&gt;メソッドデコレータ&lt;/strong&gt; &lt;code&gt;get&lt;/code&gt; 、Pythonメソッドを変更せずに、Python関数をAPIとして公開するHTTPメソッドデコレータを取得、 &lt;code&gt;post&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; などします。</target>
        </trans-unit>
        <trans-unit id="337920445117b90d3c38853e9b3f5a0a264ece63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Middleware&lt;/strong&gt; functions that get called for every request a hug API processes</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;リクエストごとに呼び出される&lt;strong&gt;ミドルウェア&lt;/strong&gt;関数は、APIプロセスをハグします</target>
        </trans-unit>
        <trans-unit id="26cfd9566f33dc84fdf2e04ec121504c3a006a41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output Formatters&lt;/strong&gt; a function that takes the output of your API function and formats it for transport to the user of the API.</source>
          <target state="translated">&lt;strong&gt;出力フォーマッター&lt;/strong&gt;は、API関数の出力を受け取り、APIのユーザーに転送するためにフォーマットする関数です。</target>
        </trans-unit>
        <trans-unit id="f0393068b82fd41f7d3c7b081d85a787d6aec1e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameter mapping&lt;/strong&gt; can be used to override inferred parameter names, eg. for reserved keywords:</source>
          <target state="translated">&lt;strong&gt;パラメータマッピング&lt;/strong&gt;を使用して、推測されたパラメータ名を上書きできます。予約キーワードの場合：</target>
        </trans-unit>
        <trans-unit id="a046197910bd9944460f562ddf1c6de1a78eaa7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type Annotations&lt;/strong&gt; functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;引数を検証してPython型に変換する方法を指定するために、オプションでメソッド引数に付加される&lt;strong&gt;型注釈&lt;/strong&gt;関数</target>
        </trans-unit>
        <trans-unit id="3a951d35e81f9a92861645f522c6a01ab47401b1" translate="yes" xml:space="preserve">
          <source>A Python framework that makes developing APIs as simple as possible, but no simpler.</source>
          <target state="translated">APIの開発を可能な限りシンプルにするPythonフレームワークですが、これ以上のシンプルさはありません。</target>
        </trans-unit>
        <trans-unit id="3d0a354729291e8b8f1225393dd2a6b39a8c8fb8" translate="yes" xml:space="preserve">
          <source>Adding your own directives is straight forward:</source>
          <target state="translated">独自のディレクティブを追加するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="b32141e09c28252c817db030d2a7de86a3b2a036" translate="yes" xml:space="preserve">
          <source>Additionally, you can easily create a custom 404 handler using the &lt;code&gt;hug.not_found&lt;/code&gt; decorator:</source>
          <target state="translated">さらに、 &lt;code&gt;hug.not_found&lt;/code&gt; デコレータを使用してカスタム404ハンドラを簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="7f33cf112928c8c4636bfabd6fd6f96bee8527d0" translate="yes" xml:space="preserve">
          <source>As a result of these goals, hug is Python 3+ only and built upon &lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;Falcon's&lt;/a&gt; high performance HTTP library</source>
          <target state="translated">これらの目標の結果として、ハグはPython 3以降のみであり、&lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;Falconの&lt;/a&gt;高性能HTTPライブラリに基づいて構築されています</target>
        </trans-unit>
        <trans-unit id="a8df05afb98eec12798dde02aa621accbaa4a973" translate="yes" xml:space="preserve">
          <source>Aside from the obvious input transformation use case, directives can be used to pipe data into your API functions, even if they are not present in the request query string, POST body, etc. For an example of how to use directives in this way, see the authentication example in the examples folder.</source>
          <target state="translated">明らかな入力変換の使用例は別として、リクエストのクエリ文字列や POST ボディなどにデータが存在しない場合でも、API 関数にデータをパイプするためにディレクティブを使用することができます。このようにディレクティブを使用する方法の例については、examples フォルダの認証の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="87fae54a50b27140b756b9e37a86b1e78537c4a1" translate="yes" xml:space="preserve">
          <source>Asyncio support</source>
          <target state="translated">アシンシオサポート</target>
        </trans-unit>
        <trans-unit id="754e1e5db57d014e36284f09734da7ee9ade8e7f" translate="yes" xml:space="preserve">
          <source>Be the basis for next generation Python APIs, embracing the latest technology.</source>
          <target state="translated">最新技術を取り入れた次世代Python APIの基盤となる。</target>
        </trans-unit>
        <trans-unit id="e104776120d29dd6459bcfa52cf9116c58729400" translate="yes" xml:space="preserve">
          <source>Build an example API with a simple endpoint in just a few lines.</source>
          <target state="translated">シンプルなエンドポイントでサンプルAPIを数行で構築します。</target>
        </trans-unit>
        <trans-unit id="22fce8cfcd346175db9ddbab078350c1a657d4f3" translate="yes" xml:space="preserve">
          <source>Building Blocks of a hug API</source>
          <target state="translated">ハグAPIのビルディングブロック</target>
        </trans-unit>
        <trans-unit id="973e7afeaa4e40433590d46f7048f4263188c8b7" translate="yes" xml:space="preserve">
          <source>By default, hug returns an auto generated API spec when a user tries to access an endpoint that isn't defined. If you would not like to return this spec you can turn off 404 documentation:</source>
          <target state="translated">デフォルトでは、ユーザーが定義されていないエンドポイントにアクセスしようとすると、hugは自動生成されたAPI仕様を返します。この仕様を返したくない場合は、404ドキュメントをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="ed3c98a24ca7c20314ccede0ba6b97c33e7cd11d" translate="yes" xml:space="preserve">
          <source>By default, the IP is 172.17.0.1. Assuming that's the IP you see, as well, you would then go to &lt;code&gt;http://172.17.0.1:8000/&lt;/code&gt; in your browser to view your API.</source>
          <target state="translated">デフォルトでは、IPは172.17.0.1です。それが表示されているIPであるとすると、ブラウザで &lt;code&gt;http://172.17.0.1:8000/&lt;/code&gt; にアクセスしてAPIを表示します。</target>
        </trans-unit>
        <trans-unit id="db63f0c176088a648bb7851cf6d0b3c69e011ded" translate="yes" xml:space="preserve">
          <source>Can be imported into the main API file:</source>
          <target state="translated">メインのAPIファイルにインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="0ce123ace99cd0029fc0622f5a38b96e8cbee984" translate="yes" xml:space="preserve">
          <source>Configuring hug 404</source>
          <target state="translated">hug 404の設定</target>
        </trans-unit>
        <trans-unit id="29c1f935aff4d7ef2949abda669b629a517cdd9a" translate="yes" xml:space="preserve">
          <source>Directives may be accessed via an argument with a &lt;code&gt;hug_&lt;/code&gt; prefix, or by using Python 3 type annotations. The latter is the more modern approach, and is recommended. Directives declared in a module can be accessed by using their fully qualified name as the type annotation (ex: &lt;code&gt;module.directive_name&lt;/code&gt;).</source>
          <target state="translated">ディレクティブには、 &lt;code&gt;hug_&lt;/code&gt; プレフィックス付きの引数を介して、またはPython3タイプのアノテーションを使用してアクセスできます。後者はより現代的なアプローチであり、推奨されます。モジュールで宣言されたディレクティブには、完全修飾名を型アノテーションとして使用してアクセスできます（例： &lt;code&gt;module.directive_name&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="358d84aa8148063b462186c221ef88a0bda8ec99" translate="yes" xml:space="preserve">
          <source>For Example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="7785dfa6b5b2ac73312e8d5251b8d042d702b7f1" translate="yes" xml:space="preserve">
          <source>For completeness, here is an example of accessing the directive via the magic name approach:</source>
          <target state="translated">完全にするために、マジックネームのアプローチでディレクティブにアクセスする例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="ec1e6db6e6c03fb8bad69c299593b12da3a0dc24" translate="yes" xml:space="preserve">
          <source>From the command line application:</source>
          <target state="translated">コマンドラインアプリケーションから</target>
        </trans-unit>
        <trans-unit id="bdb4e742101adce19db03bb43f2a3ef4a3a7e139" translate="yes" xml:space="preserve">
          <source>Get professionally supported hug with the Tidelift Subscription</source>
          <target state="translated">タイデルリフトの定期購読で専門的にサポートされているハグを取得します。</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="b33664f205bae044a7540d189a9f463f85322603" translate="yes" xml:space="preserve">
          <source>HUG simply stands for Hopefully Useful Guide. This represents the project's goal to help guide developers into creating well written and intuitive APIs.</source>
          <target state="translated">HUGはHopefully Useful Guideの略です。これは、よく書かれた直感的なAPIを作成するための開発者の手引きをすることを目的としたプロジェクトの目標を表しています。</target>
        </trans-unit>
        <trans-unit id="4241eda4d6144efaa18c072736bfe08f7593223d" translate="yes" xml:space="preserve">
          <source>Ideally, within a &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtual environment&lt;/a&gt;.</source>
          <target state="translated">理想的には、&lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;仮想環境&lt;/a&gt;内で。</target>
        </trans-unit>
        <trans-unit id="32ee1aa77e7bb32063fdb2b2fc12e0c28a6d63ab" translate="yes" xml:space="preserve">
          <source>If you like to develop in Docker and keep your system clean, you can do that but you'll need to first install &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose&lt;/a&gt;.</source>
          <target state="translated">Dockerで開発してシステムをクリーンに保ちたい場合は、それを行うことができますが、最初に&lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;DockerComposeを&lt;/a&gt;インストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="7f9b6c5909f91a333882fd964ac2dbbc32dbbfa3" translate="yes" xml:space="preserve">
          <source>Input formatters are mapped based on the &lt;code&gt;content_type&lt;/code&gt; of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your &lt;code&gt;api_function&lt;/code&gt;</source>
          <target state="translated">入力フォーマッタは、リクエストデータの &lt;code&gt;content_type&lt;/code&gt; に基づいてマッピングされ、基本的な解析のみを実行します。より詳細な解析は、 &lt;code&gt;api_function&lt;/code&gt; にあるタイプアノテーションによって実行する必要があります</target>
        </trans-unit>
        <trans-unit id="7c920197ca42bd6cbc5aaef91042da46af9d9ad6" translate="yes" xml:space="preserve">
          <source>Installing hug</source>
          <target state="translated">ハグの設置</target>
        </trans-unit>
        <trans-unit id="9279433dcb5025919ded69799bd1fcfdd4bbeca1" translate="yes" xml:space="preserve">
          <source>Installing hug is as simple as:</source>
          <target state="translated">ハグのインストールは簡単です。</target>
        </trans-unit>
        <trans-unit id="831984903762fc97309a8e41bcf90f4c95b8dd38" translate="yes" xml:space="preserve">
          <source>It should be fast. A developer should never feel the need to look somewhere else for performance reasons.</source>
          <target state="translated">高速であるべきです。開発者は、パフォーマンスの理由から他の場所を探す必要性を感じるべきではありません。</target>
        </trans-unit>
        <trans-unit id="bf52013fff0f47b4338b87ed66a34d37ea549a73" translate="yes" xml:space="preserve">
          <source>Magic done once, in an API framework, is better than pushing the problem set to the user of the API framework.</source>
          <target state="translated">APIフレームワークで一度行ったマジックは、APIフレームワークのユーザーに問題セットを押し付けるよりも良いです。</target>
        </trans-unit>
        <trans-unit id="d23eebc35f489d3b763d90e2c12b6a6a144a1e89" translate="yes" xml:space="preserve">
          <source>Make developing a Python driven API as succinct as a written definition.</source>
          <target state="translated">Python駆動APIの開発を定義書のように簡潔にする。</target>
        </trans-unit>
        <trans-unit id="4850343cb2494afc0d45b0bdbcfb4698a176fb71" translate="yes" xml:space="preserve">
          <source>NOTE: Hug is running on top Falcon which is not an asynchronous server. Even if using
asyncio, requests will still be processed synchronously.</source>
          <target state="translated">注意:Hugは非同期サーバではないFalconの上で動作しています。asyncio を使用している場合でも、リクエストは同期的に処理されます。</target>
        </trans-unit>
        <trans-unit id="3cc3453903d306e07a247c36a1a7aade091f9601" translate="yes" xml:space="preserve">
          <source>Note: versioning in hug automatically supports both the version header as well as direct URL based specification.</source>
          <target state="translated">注意:hug のバージョン管理は、バージョンヘッダと直接 URL ベースの仕様の両方を自動的にサポートしています。</target>
        </trans-unit>
        <trans-unit id="9be8845d032ba090ccafb26f1758fd381984819c" translate="yes" xml:space="preserve">
          <source>On your Docker &lt;code&gt;workspace&lt;/code&gt; container, the &lt;code&gt;./docker/templates&lt;/code&gt; directory on your host computer is mounted to &lt;code&gt;/src&lt;/code&gt; in the Docker container. This is specified under &lt;code&gt;services&lt;/code&gt; &amp;gt; &lt;code&gt;app&lt;/code&gt; of &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt;.</source>
          <target state="translated">Docker &lt;code&gt;workspace&lt;/code&gt; コンテナーでは、ホストコンピューターの &lt;code&gt;./docker/templates&lt;/code&gt; ディレクトリがDockerコンテナーの &lt;code&gt;/src&lt;/code&gt; にマウントされます。これは、。/ &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt; &lt;code&gt;services&lt;/code&gt; &amp;gt; &lt;code&gt;app&lt;/code&gt; で指定されます。</target>
        </trans-unit>
        <trans-unit id="aa9860d695862a7eb3daf9e8e36c34497710171a" translate="yes" xml:space="preserve">
          <source>Once you've done that, you'll need to &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;docker&lt;/code&gt; directory and run the web server (Gunicorn) specified in &lt;code&gt;./docker/gunicorn/Dockerfile&lt;/code&gt;, after which you can preview the output of your API in the browser on your host machine.</source>
          <target state="translated">あなたは、あなたがする必要がありますことをやったら &lt;code&gt;cd&lt;/code&gt; に &lt;code&gt;docker&lt;/code&gt; 中で指定されたディレクトリと、Webサーバー（Gunicorn）を実行 &lt;code&gt;./docker/gunicorn/Dockerfile&lt;/code&gt; あなたのブラウザであなたのAPIの出力をプレビューすることができた後、ホストマシン。</target>
        </trans-unit>
        <trans-unit id="10610ae894a2a7a10eede2205febf1d1758dac6f" translate="yes" xml:space="preserve">
          <source>Or alternatively - for cases like this - where only one module is being included per a URL route:</source>
          <target state="translated">あるいは、このような場合には、URLルートごとに1つのモジュールしか含まれていない場合もあります。</target>
        </trans-unit>
        <trans-unit id="9599139a3da06884b1086130404707b1c040bb60" translate="yes" xml:space="preserve">
          <source>Parameters can also be encoded in the URL (check
out &lt;a href=&quot;examples/happy_birthday.py&quot;&gt;&lt;code&gt;happy_birthday.py&lt;/code&gt;&lt;/a&gt; for the whole
example).</source>
          <target state="translated">パラメータはURLにエンコードすることもできます（例全体については&lt;a href=&quot;examples/happy_birthday.py&quot;&gt; &lt;code&gt;happy_birthday.py&lt;/code&gt; &lt;/a&gt;を確認してください）。</target>
        </trans-unit>
        <trans-unit id="70eea5c68d9f081a0dac9b82df9ef6906b884950" translate="yes" xml:space="preserve">
          <source>Professional support for hug is available as part of the &lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;Tidelift
Subscription&lt;/a&gt;.
Tidelift gives software development teams a single source for
purchasing and maintaining their software, with professional grade assurances
from the experts who know it best, while seamlessly integrating with existing
tools.</source>
          <target state="translated">ハグの専門的なサポートは、&lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;Tideliftサブスクリプションの&lt;/a&gt;一部として利用できます。Tideliftは、ソフトウェア開発チームにソフトウェアを購入および保守するための単一のソースを提供し、既存のツールとシームレスに統合しながら、ソフトウェアを最もよく知っている専門家からの専門的なグレードの保証を提供します。</target>
        </trans-unit>
        <trans-unit id="4ad07fe8cab325006610e5c7f9d4c3cf9d378e9a" translate="yes" xml:space="preserve">
          <source>Running hug with other WSGI based servers</source>
          <target state="translated">WSGIベースの他のサーバーとのハグを実行中</target>
        </trans-unit>
        <trans-unit id="7e197170524d0049b65494c29f9941c06215db04" translate="yes" xml:space="preserve">
          <source>Security contact information</source>
          <target state="translated">セキュリティ連絡先情報</target>
        </trans-unit>
        <trans-unit id="a5f0572bebdaf623329747d1a6d728c16dcb7212" translate="yes" xml:space="preserve">
          <source>Splitting APIs over multiple files</source>
          <target state="translated">複数のファイルにまたがるAPIの分割</target>
        </trans-unit>
        <trans-unit id="92428f0e12da119c2c985be2440ab07ccde29faa" translate="yes" xml:space="preserve">
          <source>Supporting hug development</source>
          <target state="translated">ハグの開発をサポート</target>
        </trans-unit>
        <trans-unit id="fda1a2f92c23d9bd588062628a1a6dec5fce5020" translate="yes" xml:space="preserve">
          <source>Testing hug APIs</source>
          <target state="translated">ハグAPIのテスト</target>
        </trans-unit>
        <trans-unit id="0a0dc0ebd769cd2d6e2f3c5c04c9ba7bb9d6375f" translate="yes" xml:space="preserve">
          <source>Thanks and I hope you find &lt;em&gt;this&lt;/em&gt; hug helpful as you develop your next Python API!</source>
          <target state="translated">おかげで、次のPython APIを開発するときに、&lt;em&gt;この&lt;/em&gt;抱擁がお役に立てば幸いです。</target>
        </trans-unit>
        <trans-unit id="6b5748267b4a92ff501ece9f49a1eae7d4bdd557" translate="yes" xml:space="preserve">
          <source>The framework should encourage code that self-documents.</source>
          <target state="translated">フレームワークは自己文書化するコードを奨励すべきです。</target>
        </trans-unit>
        <trans-unit id="4c3a720e1f09b4bf3195ba27f2a83cc0403fae64" translate="yes" xml:space="preserve">
          <source>Then you can access the example from &lt;code&gt;localhost:8000/v1/echo?text=Hi&lt;/code&gt; / &lt;code&gt;localhost:8000/v2/echo?text=Hi&lt;/code&gt; Or access the documentation for your API from &lt;code&gt;localhost:8000&lt;/code&gt;</source>
          <target state="translated">次に、 &lt;code&gt;localhost:8000/v1/echo?text=Hi&lt;/code&gt; / &lt;code&gt;localhost:8000/v2/echo?text=Hi&lt;/code&gt; から例にアクセスするか、 &lt;code&gt;localhost:8000&lt;/code&gt; からAPIのドキュメントにアクセスします。</target>
        </trans-unit>
        <trans-unit id="85423025067361be7aff0e935bf79ce621300d9a" translate="yes" xml:space="preserve">
          <source>This decorator works in the same manner as the hug HTTP method decorators, and is even version aware:</source>
          <target state="translated">このデコレータは hug HTTP メソッドのデコレータと同じように動作し、バージョンを認識しています。</target>
        </trans-unit>
        <trans-unit id="4b5392cfdf232f6cc068904b2d9b657e651e978e" translate="yes" xml:space="preserve">
          <source>To report a security vulnerability, please use the
&lt;a href=&quot;https://tidelift.com/security&quot;&gt;Tidelift security contact&lt;/a&gt;.
Tidelift will coordinate the fix and disclosure.</source>
          <target state="translated">セキュリティの脆弱性を報告するには、&lt;a href=&quot;https://tidelift.com/security&quot;&gt;Tideliftのセキュリティ連絡先&lt;/a&gt;を使用してください。Tideliftが修正と公開を調整します。</target>
        </trans-unit>
        <trans-unit id="bd75e7993dd4451f4e2e80c87bb17eaf0f068b43" translate="yes" xml:space="preserve">
          <source>To run the example:</source>
          <target state="translated">例題を実行するには</target>
        </trans-unit>
        <trans-unit id="c1e8307e6a9d01923949fbbd7e72d258fbe70276" translate="yes" xml:space="preserve">
          <source>To run the hello world hug example API.</source>
          <target state="translated">hello world hugのサンプルAPIを実行する。</target>
        </trans-unit>
        <trans-unit id="cc3a5a60ceb8a3bda715ca81ef1dd0184522d378" translate="yes" xml:space="preserve">
          <source>To run, from the command line type:</source>
          <target state="translated">実行するには、コマンドラインから次のように入力します。</target>
        </trans-unit>
        <trans-unit id="460f7658f324eaf15f96e695cc776bdfeb4def6a" translate="yes" xml:space="preserve">
          <source>Type annotations also feed into &lt;code&gt;hug&lt;/code&gt;'s automatic documentation
generation to let users of your API know what data to supply.</source>
          <target state="translated">タイプアノテーションは、APIのユーザーに提供するデータを知らせるために、 &lt;code&gt;hug&lt;/code&gt; の自動ドキュメント生成にもフィードされます。</target>
        </trans-unit>
        <trans-unit id="f1e887ad301db2838308801456e01403dfd27811" translate="yes" xml:space="preserve">
          <source>Using Docker</source>
          <target state="translated">Dockerを使用して</target>
        </trans-unit>
        <trans-unit id="b3a69340ce0be8b5b74b7e46cc90f9bdf3479d67" translate="yes" xml:space="preserve">
          <source>Using Python 3.5 async keyword.</source>
          <target state="translated">Python 3.5のasyncキーワードを使用しています。</target>
        </trans-unit>
        <trans-unit id="e944aca10e018a969b5d6881683c7baf9dcf0f14" translate="yes" xml:space="preserve">
          <source>Using asyncio coroutine decorator</source>
          <target state="translated">アシンシオのコルーチンデコレータを使用する</target>
        </trans-unit>
        <trans-unit id="5e51f6cfcd116a5a628b50e89b4f92dc36c5179c" translate="yes" xml:space="preserve">
          <source>Versioning with hug</source>
          <target state="translated">ハグを使ったバージョニング</target>
        </trans-unit>
        <trans-unit id="09156ba196e26e6c7e939d56e7a41867c91c8cdb" translate="yes" xml:space="preserve">
          <source>When building an API using the hug framework you'll use the following concepts:</source>
          <target state="translated">hugフレームワークを使用してAPIを構築する際には、以下のような概念を使用します。</target>
        </trans-unit>
        <trans-unit id="fc1dcc9006d3215e8d86472a32249b3b0d28c175" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;cli&lt;/code&gt; method decorator on coroutines, hug will schedule
the execution of the coroutine.</source>
          <target state="translated">コルーチンで &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;cli&lt;/code&gt; メソッドデコレータを使用する場合、hugはコルーチンの実行をスケジュールします。</target>
        </trans-unit>
        <trans-unit id="a8c632d98b9268376854cbc30eae096e0ad704ba" translate="yes" xml:space="preserve">
          <source>Which, once you are running the server as above, you can use this way:</source>
          <target state="translated">どれどれ、一度上記のようにサーバーを動かしていると、このような使い方ができます。</target>
        </trans-unit>
        <trans-unit id="d0a3f7e6138efc1ed8290339051ecc68996dd29f" translate="yes" xml:space="preserve">
          <source>Why hug?</source>
          <target state="translated">なぜハグするの?</target>
        </trans-unit>
        <trans-unit id="92066db15ca2736eb11343ec0aadc200ecf6f967" translate="yes" xml:space="preserve">
          <source>Writing tests for APIs written on-top of hug should be easy and intuitive.</source>
          <target state="translated">hugの上に書かれたAPIのテストを書くのは簡単で直感的であるべきです。</target>
        </trans-unit>
        <trans-unit id="69d5b5a97e867377eb7c90bf67d6835ea56e79a9" translate="yes" xml:space="preserve">
          <source>You can access the example in your browser at:
&lt;code&gt;localhost:8000/happy_birthday?name=hug&amp;amp;age=1&lt;/code&gt;. Then check out the
documentation for your API at &lt;code&gt;localhost:8000/documentation&lt;/code&gt;</source>
          <target state="translated">ブラウザの &lt;code&gt;localhost:8000/happy_birthday?name=hug&amp;amp;age=1&lt;/code&gt; で例にアクセスできます 。次に、 &lt;code&gt;localhost:8000/documentation&lt;/code&gt; でAPIのドキュメントを確認してください</target>
        </trans-unit>
        <trans-unit id="c975556850a95fbf44c5d623233058643734a205" translate="yes" xml:space="preserve">
          <source>You can also easily add any Falcon style middleware using:</source>
          <target state="translated">また、Falcon スタイルのミドルウェアを簡単に追加することもできます。</target>
        </trans-unit>
        <trans-unit id="a98264703b814e298ce686a7fef9cd2bd9476746" translate="yes" xml:space="preserve">
          <source>You can also log into a Docker container that you can consider your work space. This workspace has Python and Pip installed so you can use those tools within Docker. If you need to test the CLI interface, for example, you would use this.</source>
          <target state="translated">ワークスペースと考えられるDockerコンテナにログインすることもできます。このワークスペースにはPythonとPipがインストールされているので、Docker内でそれらのツールを利用することができます。例えば、CLIインターフェースをテストする必要がある場合は、これを利用します。</target>
        </trans-unit>
        <trans-unit id="acbfd6cceacd1855a44b41caf026e84b2d619740" translate="yes" xml:space="preserve">
          <source>You can use this &lt;code&gt;Response&lt;/code&gt; object for test assertions (check
out &lt;a href=&quot;examples/test_happy_birthday.py&quot;&gt;&lt;code&gt;test_happy_birthday.py&lt;/code&gt;&lt;/a&gt; ):</source>
          <target state="translated">この &lt;code&gt;Response&lt;/code&gt; オブジェクトをテストアサーションに使用できます（&lt;a href=&quot;examples/test_happy_birthday.py&quot;&gt; &lt;code&gt;test_happy_birthday.py&lt;/code&gt; を&lt;/a&gt;確認してください）。</target>
        </trans-unit>
        <trans-unit id="68863bd3822201be0e105f9d6f13a036936a9dbe" translate="yes" xml:space="preserve">
          <source>as shown, you can easily change the output format for both an entire API as well as an individual API call</source>
          <target state="translated">のように、API 全体の出力形式と個別の API 呼び出しの両方を簡単に変更することができます。</target>
        </trans-unit>
        <trans-unit id="5260dfd635468aad848584daf1e1051cea7a8706" translate="yes" xml:space="preserve">
          <source>hug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development.</source>
          <target state="translated">hugは、Python駆動のAPIの開発を可能な限りシンプルにすることを目指していますが、それ以上にシンプルなものはありません。その結果、Python APIの開発を劇的にシンプルにします。</target>
        </trans-unit>
        <trans-unit id="ccbdd588925c256b0089f80475f85b716a8765e4" translate="yes" xml:space="preserve">
          <source>hug enables you to organize large projects in any manner you see fit. You can import any module that contains hug decorated functions (request handling, directives, type handlers, etc) and extend your base API with that module.</source>
          <target state="translated">hug は、大規模なプロジェクトを任意の方法で整理することを可能にします。hug で装飾された関数 (リクエスト処理、ディレクティブ、型ハンドラなど)を含むモジュールをインポートして、そのモジュールを使ってベース API を拡張することができます。</target>
        </trans-unit>
        <trans-unit id="d6cf0c89c4034b80e5b63e10795426ce000eb1b2" translate="yes" xml:space="preserve">
          <source>hug exposes a &lt;code&gt;__hug_wsgi__&lt;/code&gt; magic method on every API module automatically. Running your hug based API on any standard wsgi server should be as simple as pointing it to &lt;code&gt;module_name&lt;/code&gt;: &lt;code&gt;__hug_wsgi__&lt;/code&gt;.</source>
          <target state="translated">hugは、すべてのAPIモジュールで &lt;code&gt;__hug_wsgi__&lt;/code&gt; マジックメソッドを自動的に公開します。標準のwsgiサーバーでハグベースのAPIを実行するのは、 &lt;code&gt;module_name&lt;/code&gt; ： &lt;code&gt;__hug_wsgi__&lt;/code&gt; を指すのと同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="63294d52f42102fddab47d3be28869d5d978e85a" translate="yes" xml:space="preserve">
          <source>hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base.
If you find or encounter any potential security issues, please let us know right away so we can resolve them.</source>
          <target state="translated">hugはセキュリティと品質を真剣に考えています。この焦点は、私たちが唯一の徹底的にテストされたコンポーネントに依存し、私たちのコードベースのセキュリティを確認するために静的解析ツール(バンディットやセーフティなど)を利用する理由です。潜在的なセキュリティ問題を発見したり、遭遇した場合は、すぐにお知らせください。</target>
        </trans-unit>
        <trans-unit id="840c736b58826c43bb285b4729a6389c2a271f7e" translate="yes" xml:space="preserve">
          <source>hug uses the structure of the function you decorate to automatically generate documentation for users of your API. hug always passes a request, response, and api_version variable to your function if they are defined params in your function definition.</source>
          <target state="translated">hugは、APIのユーザーのためのドキュメントを自動的に生成するためにデコレーションした関数の構造を使用します。 hugは、関数定義でparamsとして定義されている場合、常にrequest、response、api_version変数を関数に渡します。</target>
        </trans-unit>
        <trans-unit id="4dba083e9006e12eb8972a15afb1acc690437b00" translate="yes" xml:space="preserve">
          <source>hug's &lt;code&gt;http&lt;/code&gt; method decorators don't modify your original functions. This makes testing hug APIs as simple as testing any other Python functions. Additionally, this means interacting with your API functions in other Python code is as straight forward as calling Python only API functions. hug makes it easy to test the full Python stack of your API by using the &lt;code&gt;hug.test&lt;/code&gt; module:</source>
          <target state="translated">hugの &lt;code&gt;http&lt;/code&gt; メソッドデコレータは元の関数を変更しません。これにより、ハグAPIのテストは他のPython関数のテストと同じくらい簡単になります。さらに、これは、他のPythonコードでAPI関数を操作するのが、PythonのみのAPI関数を呼び出すのと同じくらい簡単であることを意味します。hugを使用すると、 &lt;code&gt;hug.test&lt;/code&gt; モジュールを使用してAPIの完全なPythonスタックを簡単にテストできます。</target>
        </trans-unit>
        <trans-unit id="a1ca4d71412d197d55f7225c9894b598beacb582" translate="yes" xml:space="preserve">
          <source>hug's Design Objectives:</source>
          <target state="translated">ハグのデザイン目標。</target>
        </trans-unit>
        <trans-unit id="6415c2d844d4e6ce1c534ee71f1d8a7e411903ea" translate="yes" xml:space="preserve">
          <source>~Timothy Crosley</source>
          <target state="translated">〜ティモシー・クロスリー</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
