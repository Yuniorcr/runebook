<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/mesa-geo/">
    <body>
      <group id="mesa-geo">
        <trans-unit id="95ea506b38ee872d08a6f93af7a8a63e2d23f851" translate="yes" xml:space="preserve">
          <source>Agent-based modeling (ABM) in Python 3+</source>
          <target state="translated">Python 3+でのエージェントベースモデリング (ABM)</target>
        </trans-unit>
        <trans-unit id="27ef550fa9b5065df5c5c330c3012dd94e01e0ec" translate="yes" xml:space="preserve">
          <source>By default the AgentCreator also sets further agent attributes from the Feature properties.</source>
          <target state="translated">デフォルトでは、AgentCreator は、Feature プロパティからさらにエージェント属性を設定します。</target>
        </trans-unit>
        <trans-unit id="4dbcbf31807f0ba1714d98b2f359d5f72a4c8387" translate="yes" xml:space="preserve">
          <source>First we create a &lt;code&gt;State&lt;/code&gt; Agent and a &lt;code&gt;GeoModel&lt;/code&gt;. Both should look familiar if you have worked with mesa before.</source>
          <target state="translated">まず、作成 &lt;code&gt;State&lt;/code&gt; エージェントと &lt;code&gt;GeoModel&lt;/code&gt; を。以前にメサを使用したことがある場合は、どちらも見覚えがあるはずです。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="48136dddf5fa2de69f33868667ee8e35c7a68815" translate="yes" xml:space="preserve">
          <source>Going further</source>
          <target state="translated">さらに進む</target>
        </trans-unit>
        <trans-unit id="0c0a3cb4b1caa9609ee3219bd71d0ad954902aa5" translate="yes" xml:space="preserve">
          <source>If you work in the Jupyter Notebook your output should give you the name of the state and a visual representation of the shape.</source>
          <target state="translated">Jupyter ノートブックで作業する場合、あなたの出力は状態の名前と図形の視覚的な表現を与えてくれるはずです。</target>
        </trans-unit>
        <trans-unit id="39ce44f05ac3bcf094db91edb4c611eefe5d172f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;GeoModel&lt;/code&gt; we first create an instance of AgentCreator, where we provide the Agent class (State) and its required arguments, except shape and unique_id. We then use the &lt;code&gt;.from_GeoJSON&lt;/code&gt; function to create our agents from the shapes in the GeoJSON file. We provide the feature &quot;name&quot; as the key from which the agents get their unique_ids.
Finally, we add the agents to the GeoSpace</source>
          <target state="translated">&lt;code&gt;GeoModel&lt;/code&gt; では、最初にAgentCreatorのインスタンスを作成します。ここで、Agentクラス（State）と、shapeとunique_idを除く必要な引数を提供します。次に、 &lt;code&gt;.from_GeoJSON&lt;/code&gt; 関数を使用して、GeoJSONファイルのシェイプからエージェントを作成します。エージェントがunique_idsを取得するためのキーとして機能「name」を提供します。最後に、GeoSpaceにエージェントを追加します</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="c326931d0629d1b21f18e19d7bef228eed4e1ed5" translate="yes" xml:space="preserve">
          <source>Let's instantiate our model and look at one of the agents:</source>
          <target state="translated">モデルをインスタンス化して、エージェントの1つを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="aa016c7332ec11889efc160882b15bdc111aff4c" translate="yes" xml:space="preserve">
          <source>Let's start to do some spatial analysis. We can use usual Mesa function names to get neighboring states</source>
          <target state="translated">それでは、空間解析を始めましょう。隣接する状態を取得するために、通常の Mesa 関数名を使うことができます。</target>
        </trans-unit>
        <trans-unit id="b32547c7b34de4be961a53e906749e7a157e04ba" translate="yes" xml:space="preserve">
          <source>On windows you should first use Anaconda to install some of the requirements with</source>
          <target state="translated">Windows 上では、まず Anaconda を使用していくつかの要件をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="4f8f99ecb227045017ba85aaec8e2a8e28bb221a" translate="yes" xml:space="preserve">
          <source>Since mesa-geo is in early development you could also install the latest version directly from Github via</source>
          <target state="translated">mesa-geo は初期の開発段階にあるので、Github を通して最新版を直接インストールすることもできます。</target>
        </trans-unit>
        <trans-unit id="4d46afd664f6f81e6062be02b45b89ae156c88d4" translate="yes" xml:space="preserve">
          <source>So let's get started with some shapes! We will work with &lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;records of US states&lt;/a&gt;. We use the &lt;code&gt;requests&lt;/code&gt; library to retrieve the data, but of course you can work with local data.</source>
          <target state="translated">それでは、いくつかの形から始めましょう！私たちは、で動作する&lt;a href=&quot;http://eric.clst.org/Stuff/USGeoJSON&quot;&gt;、アメリカの記録&lt;/a&gt;。私たちは、使用 &lt;code&gt;requests&lt;/code&gt; データを取得するためのライブラリを、もちろん、あなたは、ローカルデータを扱うことができます。</target>
        </trans-unit>
        <trans-unit id="b4600cfe004ab3590da41e92d18f8d4b4c94f633" translate="yes" xml:space="preserve">
          <source>The unit for the distance depends on the coordinate reference system (CRS) of the GeoSpace. Since we did not specify the CRS, mesa-geo defaults to the 'Web Mercator' projection (in meters). If you want to do some serious measurements you should always set an appropriate CRS, since the accuracy of Web Mercator declines with distance from the equator.  We can achieve this by initializing the AgentCreator and the GeoSpace with the &lt;code&gt;crs&lt;/code&gt; keyword  &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt;. Mesa-geo then transforms all coordinates from the GeoJSON geographic coordinates into the set crs.</source>
          <target state="translated">距離の単位は、GeoSpaceの座標参照系（CRS）によって異なります。CRSを指定しなかったため、mesa-geoはデフォルトで「Webメルカトル図法」（メートル単位）になります。Webメルカトル図法の精度は赤道からの距離とともに低下するため、深刻な測定を行う場合は、常に適切なCRSを設定する必要があります。これは、 &lt;code&gt;crs&lt;/code&gt; キーワード &lt;code&gt;crs=&quot;epsg:2163&quot;&lt;/code&gt; を使用してAgentCreatorとGeoSpaceを初期化することで実現できます。次に、Mesa-geoは、GeoJSON地理座標から設定されたcrsにすべての座標を変換します。</target>
        </trans-unit>
        <trans-unit id="54e5dad8c3855cf07e1b0e1e39b24b7a2c690358" translate="yes" xml:space="preserve">
          <source>This is the first release of mesa-geo. No functionality guaranteed, bugs included.</source>
          <target state="translated">これは mesa-geo の最初のリリースです。機能は保証されていませんが、バグは含まれています。</target>
        </trans-unit>
        <trans-unit id="9a78599f9a3e0eb90b0e60667f88406b1457d05e" translate="yes" xml:space="preserve">
          <source>To add further functionality, I need feedback on which functionality is desired by users. Please post a message &lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;here&lt;/a&gt; or open an issue if you have any ideas or recommendations.</source>
          <target state="translated">さらに機能を追加するには、ユーザーがどの機能を望んでいるかについてのフィードバックが必要です。&lt;a href=&quot;https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI&quot;&gt;ここに&lt;/a&gt;メッセージを投稿するか、アイデアや推奨事項がある場合は問題を開いてください。</target>
        </trans-unit>
        <trans-unit id="81c47b762f17ded645b7e732f66c1e741999626d" translate="yes" xml:space="preserve">
          <source>To get a deeper understanding of mesa-geo you should checkout the GeoSchelling example. It implements a Leaflet visualization which is similar to use as the CanvasGridVisualization of Mesa.</source>
          <target state="translated">Mesa-geo をより深く理解するには、GeoSchelling の例をチェックアウトする必要があります。これは、MesaのCanvasGridVisualizationと同様のLeafletの可視化を実装しています。</target>
        </trans-unit>
        <trans-unit id="99ff25b7020d090cd9cdb188ea60cacfd11c21b4" translate="yes" xml:space="preserve">
          <source>To get a list of all states within a certain distance you can use the following</source>
          <target state="translated">一定の距離内のすべての州のリストを取得するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f956276c6b976e9e091af7d42b963012d3a4d6d7" translate="yes" xml:space="preserve">
          <source>To install mesa-geo on linux or macOS run</source>
          <target state="translated">linux または macOS に mesa-geo をインストールするには、以下を実行してください。</target>
        </trans-unit>
        <trans-unit id="fefab4115e562a86c0c58de9ea47e9b7935010be" translate="yes" xml:space="preserve">
          <source>You should be familiar with how &lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;mesa&lt;/a&gt; works.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/projectmesa/mesa&quot;&gt;mesaの&lt;/a&gt;仕組みに精通している必要があります。</target>
        </trans-unit>
        <trans-unit id="cb0ae5ae56a9d417cb1a9d18e8cfdbc4ea5481d3" translate="yes" xml:space="preserve">
          <source>mesa-geo - a GIS extension to Mesa Agent-Based Modeling</source>
          <target state="translated">mesa-geo-Mesa Agent-Based ModelingのGIS拡張機能</target>
        </trans-unit>
        <trans-unit id="a87505c161b91f2824718829afc67cee52c36469" translate="yes" xml:space="preserve">
          <source>mesa-geo implements a &lt;code&gt;GeoSpace&lt;/code&gt; that can host GIS-based &lt;code&gt;GeoAgents&lt;/code&gt;, which are like normal Agents, except they have a &lt;code&gt;shape&lt;/code&gt; attribute that is a &lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;Shapely object&lt;/a&gt;. You can use &lt;code&gt;Shapely&lt;/code&gt; directly to create arbitrary shapes, but in most cases you will want to import your shapes from a file. Mesa-geo allows you to create GeoAgents from any vector data file (e.g. shapefiles), valid GeoJSON objects or a GeoPandas GeoDataFrame.</source>
          <target state="translated">メサ・地理実装 &lt;code&gt;GeoSpace&lt;/code&gt; その缶ホストGISベース &lt;code&gt;GeoAgents&lt;/code&gt; 彼らが持っている以外、通常の代理店のようなもので、 &lt;code&gt;shape&lt;/code&gt; である属性&lt;a href=&quot;https://shapely.readthedocs.io/en/latest/manual.html&quot;&gt;格好の良い物を&lt;/a&gt;。 &lt;code&gt;Shapely&lt;/code&gt; を直接使用して任意の形状を作成できますが、ほとんどの場合、ファイルから形状をインポートする必要があります。Mesa-geoを使用すると、任意のベクターデータファイル（シェープファイルなど）、有効なGeoJSONオブジェクト、またはGeoPandasGeoDataFrameからGeoAgentを作成できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
