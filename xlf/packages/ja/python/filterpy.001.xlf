<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="https://pypi.org/project/filterpy/">
    <body>
      <group id="filterpy">
        <trans-unit id="8a8e298f9a396f054dba117cef6a17d8c2fbb635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Imminent drop of support of Python 2.7, 3.4. See section below for details.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Python 2.7、3.4のサポートが間もなく終了します。詳細については、以下のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4d58a7251bc15282c41f3b3a4aa3f72641348a7f" translate="yes" xml:space="preserve">
          <source>All tests are written to work with py.test. Just type</source>
          <target state="translated">すべてのテストは py.test で動作するように書かれています。以下のようにタイプしてください。</target>
        </trans-unit>
        <trans-unit id="c1939d3939c93a9c3ab83c20a36c6f9ccb15e5ef" translate="yes" xml:space="preserve">
          <source>And, if you want to install from the bleeding edge git version</source>
          <target state="translated">また、ブリーディングエッジのgit版からインストールする場合は</target>
        </trans-unit>
        <trans-unit id="e5a8c89ee16ef426c7761586d7e5aa3f19a032ae" translate="yes" xml:space="preserve">
          <source>As explained above, the tests are not robust. I&amp;rsquo;m still at the stage
where visual plots are the best way to see how things are working.
Apologies, but I think it is a sound choice for development. It is easy
for a filter to perform within theoretical limits (which we can write a
non-visual test for) yet be &amp;lsquo;off&amp;rsquo; in some way. The code itself contains
tests in the form of asserts and properties that ensure that arrays are
of the proper dimension, etc.</source>
          <target state="translated">上で説明したように、テストは堅牢ではありません。私はまだ、視覚的なプロットが物事がどのように機能しているかを確認するための最良の方法である段階にあります。申し訳ありませんが、開発には適切な選択だと思います。フィルタが理論上の制限内で実行するのは簡単ですが（非視覚的なテストを書くことができます）、何らかの方法で「オフ」になっています。コード自体には、配列が適切な次元であることを確認するアサートとプロパティなどの形式のテストが含まれています。</target>
        </trans-unit>
        <trans-unit id="4b613f6d7285ef9f4bef8a4f0bd6a6c9681d7640" translate="yes" xml:space="preserve">
          <source>At the moment FilterPy is on version 1.x. I plan to fork the project
to version 2.0, and support only Python 3.5+. The 1.x version
will still be available, but I will not support it. If I add something
amazing to 2.0 and someone really begs, I might backport it; more
likely I would accept a pull request with the feature backported
to 1.x. But to be honest I don&amp;rsquo;t forsee this happening.</source>
          <target state="translated">現在、FilterPyはバージョン1.xです。プロジェクトをバージョン2.0にフォークし、Python3.5以降のみをサポートする予定です。1.xバージョンは引き続き利用できますが、サポートしません。2.0に素晴らしいものを追加して、誰かが本当に頼んだら、それをバックポートするかもしれません。機能が1.xにバックポートされたプルリクエストを受け入れる可能性が高くなります。しかし、正直なところ、私はこれが起こるとは予想していません。</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="968bd2b33b4162a81ec2cd8ed2df38da9b302693" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2015 Roger R. Labbe Jr</source>
          <target state="translated">Copyright (c)2015 Roger R.Labbe Jr.</target>
        </trans-unit>
        <trans-unit id="3d89f90b67b082a45bef90c0d79a6ebd3711a370" translate="yes" xml:space="preserve">
          <source>FilterPy - Kalman filters and other optimal and non-optimal estimation filters in Python.</source>
          <target state="translated">FilterPy-Python でのカルマンフィルタやその他の最適・非最適推定フィルタ。</target>
        </trans-unit>
        <trans-unit id="1c3fbbca97bb5d8f412fea56090f90411596cfe8" translate="yes" xml:space="preserve">
          <source>Finally, run the filter.</source>
          <target state="translated">最後にフィルターを実行します。</target>
        </trans-unit>
        <trans-unit id="ee3680252bd004d7ef4df31fbaff398d7d1a87fd" translate="yes" xml:space="preserve">
          <source>First, import the filters and helper functions.</source>
          <target state="translated">まず、フィルターとヘルパー関数をインポートします。</target>
        </trans-unit>
        <trans-unit id="35555ce65ba60c36f60b29bd85e767779829a60a" translate="yes" xml:space="preserve">
          <source>Full documentation is at
&lt;a href=&quot;https://filterpy.readthedocs.io/en/latest/&quot;&gt;https://filterpy.readthedocs.io/en/latest/&lt;/a&gt;</source>
          <target state="translated">完全なドキュメントは &lt;a href=&quot;https://filterpy.readthedocs.io/en/latest/&quot;&gt;https://filterpy.readthedocs.io/en/latest/にあります&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="816b4bbd3e420c572b205dac19fade101d072597" translate="yes" xml:space="preserve">
          <source>I am making edits to the package now in support of my book;
once those are done I&amp;rsquo;ll probably create the 2.0 branch.
I&amp;rsquo;m contemplating a SLAM addition to the book, and am not
sure if I will do this in 3.5+ only or not.</source>
          <target state="translated">私は現在、私の本をサポートするためにパッケージを編集しています。それらが完了したら、おそらく2.0ブランチを作成します。この本にSLAMを追加することを検討していますが、3.5以降でのみこれを行うかどうかはわかりません。</target>
        </trans-unit>
        <trans-unit id="a748886f04c2328f504cab48b8f72e609596428e" translate="yes" xml:space="preserve">
          <source>I haven&amp;rsquo;t extensively tested backwards compatibility - I use the
Anaconda distribution, and so I am on Python 3.6 and 2.7.14, along with
whatever version of NumPy, SciPy, and matplotlib they provide. But I am
using pretty basic Python - numpy.array, maybe a list comprehension in
my tests.</source>
          <target state="translated">私は下位互換性を広範囲にテストしていません-私はAnacondaディストリビューションを使用しているので、Python 3.6と2.7.14、およびそれらが提供するNumPy、SciPy、matplotlibのバージョンを使用しています。しかし、私はかなり基本的なPythonを使用しています-numpy.array、おそらく私のテストではリスト内包表記です。</target>
        </trans-unit>
        <trans-unit id="8e09978b025a4723b3622ef57e7d817d2a858e11" translate="yes" xml:space="preserve">
          <source>I haven&amp;rsquo;t finalized my decision on this, but NumPy is dropping
Python 2.7 support in December 2018. I will certainly drop Python
2.7 support by then; I will probably do it much sooner.</source>
          <target state="translated">私はこれについての決定を確定していませんが、NumPyは2018年12月にPython2.7のサポートを終了します。それまでにPython2.7のサポートを確実に削除します。私はおそらくもっと早くそれをするでしょう。</target>
        </trans-unit>
        <trans-unit id="61c05ef3006579fbdd490e4b533ee3726eb4d772" translate="yes" xml:space="preserve">
          <source>I import from &lt;strong&gt;__future__&lt;/strong&gt; to ensure the code works in Python 2 and 3.</source>
          <target state="translated">&lt;strong&gt;__future__&lt;/strong&gt;からインポートして、コードが&lt;strong&gt;Python2&lt;/strong&gt;および3で機能することを確認します。</target>
        </trans-unit>
        <trans-unit id="7488ac725f5d27750031e40080ed22d2b9cd5291" translate="yes" xml:space="preserve">
          <source>I said three books. I also like and use Bar-Shalom&amp;rsquo;s Estimation with
Applications to Tracking and Navigation. Much more mathematical than the
previous two books, I would not recommend it as a first text unless you
already have a background in control theory or optimal estimation. Once
you have that experience, this book is a gem. Every sentence is crystal
clear, his language is precise, but each abstract mathematical statement
is followed with something like &amp;ldquo;and this means&amp;hellip;&amp;rdquo;.</source>
          <target state="translated">私は3冊の本を言いました。私はまた、追跡とナビゲーションへの応用でバーシャロームの推定を気に入って使用しています。前の2冊の本よりもはるかに数学的なものですが、制御理論または最適な推定のバックグラウンドがすでにない限り、最初のテキストとしてはお勧めしません。その経験を積んだら、この本は逸品です。すべての文は非常に明確で、彼の言語は正確ですが、それぞれの抽象的な数学的ステートメントの後には「そしてこれは&amp;hellip;」のようなものが続きます。</target>
        </trans-unit>
        <trans-unit id="2aa942fd3c88f16190a93b80a61fa11f8ebdb5a4" translate="yes" xml:space="preserve">
          <source>I use NumPy and SciPy for all of the computations. I have experimented
with Numba and it yields impressive speed ups with minimal costs, but I
am not convinced that I want to add that requirement to my project. It
is still on my list of things to figure out, however.</source>
          <target state="translated">私はすべての計算にNumPyとSciPyを使用しています。Numbaを使って実験したことがありますが、最小限のコストで印象的な高速化を実現してくれますが、私のプロジェクトにこの要件を追加したいとは思いません。しかし、私のプロジェクトにこの要件を追加したいと思っているのは納得できません。</target>
        </trans-unit>
        <trans-unit id="ba522cc2398fca76e29351085a92280f3c143c00" translate="yes" xml:space="preserve">
          <source>I use three main texts as my refererence, though I do own the majority
of the Kalman filtering literature. First is Paul Zarchan&amp;rsquo;s
&amp;lsquo;Fundamentals of Kalman Filtering: A Practical Approach&amp;rsquo;. I think it by
far the best Kalman filtering book out there if you are interested in
practical applications more than writing a thesis. The second book I use
is Eli Brookner&amp;rsquo;s &amp;lsquo;Tracking and Kalman Filtering Made Easy&amp;rsquo;. This is an
astonishingly good book; its first chapter is actually readable by the
layperson! Brookner starts from the g-h filter, and shows how all other
filters - the Kalman filter, least squares, fading memory, etc., all
derive from the g-h filter. It greatly simplifies many aspects of
analysis and/or intuitive understanding of your problem. In contrast,
Zarchan starts from least squares, and then moves on to Kalman
filtering. I find that he downplays the predict-update aspect of the
algorithms, but he has a wealth of worked examples and comparisons
between different methods. I think both viewpoints are needed, and so I
can&amp;rsquo;t imagine discarding one book. Brookner also focuses on issues that
are ignored in other books - track initialization, detecting and
discarding noise, tracking multiple objects, an so on.</source>
          <target state="translated">私はカルマンフィルターの文献の大部分を所有していますが、参照として3つの主要なテキストを使用しています。 1つ目は、Paul Zarchanの「FundamentalsofKalman Filtering：APracticalApproach」です。論文を書くよりも実用的なアプリケーションに興味があるなら、これはカルマンフィルターの本としては群を抜いて最高だと思います。私が使用する2番目の本は、EliBrooknerの「TrackingandKalman FilteringMadeEasy」です。これは驚くほど良い本です。その最初の章は実際には素人が読むことができます！ Brooknerは、ghフィルターから開始し、他のすべてのフィルター（カルマンフィルター、最小二乗、フェージングメモリなど）がすべてghフィルターからどのように派生するかを示します。これにより、分析の多くの側面や問題の直感的な理解が大幅に簡素化されます。対照的に、Zarchanは最小二乗法から開始し、次にカルマンフィルター処理に進みます。彼はアルゴリズムの予測更新の側面を軽視していることがわかりましたが、彼には豊富な実例とさまざまな方法間の比較があります。両方の視点が必要だと思うので、一冊の本を捨てるなんて想像もできません。 Brooknerは、他の本では無視されている問題にも焦点を当てています。トラックの初期化、ノイズの検出と破棄、複数のオブジェクトの追跡などです。</target>
        </trans-unit>
        <trans-unit id="b9067a5289890407887c107d828776b6282737e0" translate="yes" xml:space="preserve">
          <source>If you prefer to download the source yourself</source>
          <target state="translated">自分でソースをダウンロードしたい場合は</target>
        </trans-unit>
        <trans-unit id="950ad6a6b9a6d7503133a16c0753c700fd4b6713" translate="yes" xml:space="preserve">
          <source>If you use Anaconda, you can install from the conda-forge channel. You
will need to add the conda-forge channel if you haven&amp;rsquo;t already done so:</source>
          <target state="translated">Anacondaを使用している場合は、conda-forgeチャネルからインストールできます。conda-forgeチャネルをまだ追加していない場合は、追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d021e768fe46c9e993b9bc26daebe1e0a7ccf5ea" translate="yes" xml:space="preserve">
          <source>Initialize the filter&amp;rsquo;s matrices.</source>
          <target state="translated">フィルタの行列を初期化します。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">インストール</target>
        </trans-unit>
        <trans-unit id="069f6f37ff0b3b14a1e2b9c9a3ca8b9b8085a537" translate="yes" xml:space="preserve">
          <source>Kalman filtering and optimal estimation library</source>
          <target state="translated">カルマンフィルタリングと最適推定ライブラリ</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">ライセンス</target>
        </trans-unit>
        <trans-unit id="ff42cf30abec69d9cd5e9a6d51db617908be4d0b" translate="yes" xml:space="preserve">
          <source>My aim is largely pedalogical - I opt for clear code that matches the
equations in the relevant texts on a 1-to-1 basis, even when that has a
performance cost. There are places where this tradeoff is unclear - for
example, I find it somewhat clearer to write a small set of equations
using linear algebra, but numpy&amp;rsquo;s overhead on small matrices makes it
run slower than writing each equation out by hand. Furthermore, books
such Zarchan present the written out form, not the linear algebra form.
It is hard for me to choose which presentation is &amp;lsquo;clearer&amp;rsquo; - it depends
on the audience. In that case I usually opt for the faster implementation.</source>
          <target state="translated">私の目的は主に教育的です-パフォーマンスコストがかかる場合でも、関連するテキストの方程式に1対1で一致する明確なコードを選択します。このトレードオフが不明確な場所があります。たとえば、線形代数を使用して方程式の小さなセットを書く方がいくらか明確ですが、小さな行列でのnumpyのオーバーヘッドにより、各方程式を手動で書き出すよりも実行が遅くなります。さらに、Zarchanのような本は、線形代数形式ではなく、書き出された形式を提示します。どのプレゼンテーションが「より明確」であるかを選択するのは難しいです-それは聴衆に依存します。その場合、私は通常、より高速な実装を選択します。</target>
        </trans-unit>
        <trans-unit id="fa8af4cb23ae77c128a4a33e6c038f3d5d3fe115" translate="yes" xml:space="preserve">
          <source>My book &lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&lt;/a&gt;
uses this library, and is the place to go if you are trying to learn
about Kalman filtering and/or this library. These two are not exactly in
sync - my normal development cycle is to add files here, test them, figure
out how to present them pedalogically, then write the appropriate section
or chapter in the book. So there is code here that is not discussed
yet in the book.</source>
          <target state="translated">私の本&lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&lt;/a&gt; はこのライブラリを使用しており、カルマンフィルタリングやこのライブラリについて学習しようとしている場合に行く場所です。これら2つは完全に同期しているわけではありません。私の通常の開発サイクルは、ここにファイルを追加してテストし、ペダルを踏んで提示する方法を理解してから、本に適切なセクションまたは章を書くことです。したがって、この本ではまだ説明されていないコードがここにあります。</target>
        </trans-unit>
        <trans-unit id="24162d16555bd8804ec6c655dbbca2fb05c22443" translate="yes" xml:space="preserve">
          <source>Note: I make no guarantees that everything works if you install from here.
I&amp;rsquo;m the only developer, and so I don&amp;rsquo;t worry about dev/release branches and
the like. Unless I fix a bug for you and tell you to get this version because
I haven&amp;rsquo;t made a new release yet, I strongly advise not installing from git.</source>
          <target state="translated">注：ここからインストールした場合、すべてが機能することを保証するものではありません。私は唯一の開発者なので、開発/リリースブランチなどについて心配する必要はありません。まだ新しいリリースを作成していないため、バグを修正してこのバージョンを入手するように指示しない限り、gitからインストールしないことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="a94bc79395b7f9e096a0e3083d5e99d870902600" translate="yes" xml:space="preserve">
          <source>Now, create the filter</source>
          <target state="translated">では、フィルタを作成します。</target>
        </trans-unit>
        <trans-unit id="4428df60996dd395af6c51238f43c71d4400a7fa" translate="yes" xml:space="preserve">
          <source>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</source>
          <target state="translated">これにより、このソフトウェアおよび関連するドキュメントファイル（以下「ソフトウェア」）のコピーを取得するすべての人に、使用、コピー、変更、マージの権利を含むがこれに限定されない制限なしでソフトウェアを扱うことが許可されます。以下の条件に従って、本ソフトウェアのコピーを発行、頒布、サブライセンス、および/または販売し、本ソフトウェアの提供を受けた者がそうすることを許可する。</target>
        </trans-unit>
        <trans-unit id="c89209cb3cdced2b4e97399f88e4af894bfd8485" translate="yes" xml:space="preserve">
          <source>Plan for dropping Python 2.7 support</source>
          <target state="translated">Python 2.7のサポートを落とす計画</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">参考文献</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">必要条件</target>
        </trans-unit>
        <trans-unit id="f5470597044f9881eb58bf21ebb16608cd981bed" translate="yes" xml:space="preserve">
          <source>Sorry, that is the extent of the documentation here. However, the library
is broken up into subdirectories: gh, kalman, memory, leastsq, and so on.
Each subdirectory contains python files relating to that form of filter.
The functions and methods contain pretty good docstrings on use.</source>
          <target state="translated">申し訳ありませんが、ここでのドキュメントはその程度です。しかし、このライブラリは gh,kalman,memory,leastsq などのサブディレクトリに分割されています。それぞれのサブディレクトリには、それぞれのフィルタに関連する python ファイルが含まれています。関数やメソッドには、使用方法についての説明が書かれています。</target>
        </trans-unit>
        <trans-unit id="e07e66ec2ec5d10f836f2ac4a05173041f8d092a" translate="yes" xml:space="preserve">
          <source>Sphinx generated documentation lives at &lt;a href=&quot;http://filterpy.readthedocs.org/&quot;&gt;http://filterpy.readthedocs.org/&lt;/a&gt;.
Generation is triggered by git when I do a check in, so this will always
be bleeding edge development version - it will often be ahead of the
released version.</source>
          <target state="translated">Sphinxで生成されたドキュメントは&lt;a href=&quot;http://filterpy.readthedocs.org/&quot;&gt;http://filterpy.readthedocs.org/にあり&lt;/a&gt;ます。チェックイン時にgitによって生成がトリガーされるため、これは常に最先端の開発バージョンになります。多くの場合、リリースされたバージョンよりも進んでいます。</target>
        </trans-unit>
        <trans-unit id="ba51f3c923b832e2cb3feca36180c8813bdbec40" translate="yes" xml:space="preserve">
          <source>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.TION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</source>
          <target state="translated">本ソフトウェアは「現状有姿」で提供され、商品性、特定目的への適合性、および非侵害の保証を含むがこれらに限定されない、明示または黙示を問わず、いかなる種類の保証もありません。いかなる場合も、作者または著作権所有者は、契約、不法行為、またはその他の行為にかかわらず、ソフトウェアまたはソフトウェアの使用またはその他の取引に起因する、または関連する、いかなる請求、損害、またはその他の責任についても責任を負わないものとします。本ソフトウェア、または本ソフトウェアの使用またはその他の取引に起因、外、または関連して発生する契約、不法行為、またはその他の行為。</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">テスト</target>
        </trans-unit>
        <trans-unit id="2770edfa17d1ba1518644752acbba767797d8840" translate="yes" xml:space="preserve">
          <source>The MIT License (MIT)</source>
          <target state="translated">MITライセンス(マサチューセッツ工科大学</target>
        </trans-unit>
        <trans-unit id="abf94dbab29db68325894cd60a65f3c2a1fc56fa" translate="yes" xml:space="preserve">
          <source>The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.</source>
          <target state="translated">上記の著作権表示および本許諾表示は、本ソフトウェアのすべての複製物または実質的な部分に含まれるものとします。</target>
        </trans-unit>
        <trans-unit id="ab40192173a47c8e5ce7406412a220e2a474ada7" translate="yes" xml:space="preserve">
          <source>The most general installation is just to use pip, which should come with
any modern Python distribution.</source>
          <target state="translated">最も一般的なインストールはpipを使うだけで、最新のPythonディストリビューションに付属しているはずです。</target>
        </trans-unit>
        <trans-unit id="24d855a043cf9286f92b9e45c2eac0cf512060ff" translate="yes" xml:space="preserve">
          <source>This is code I am developing in conjunction with my book Kalman and
Bayesian Filter in Python, which you can read/download at
&lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&lt;/a&gt;</source>
          <target state="translated">これは、Pythonでの私の本Kalman and BayesianFilterと組み合わせて開発しているコードです&lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/&quot;&gt;。https：//github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/で&lt;/a&gt;読み取り/ダウンロードでき ます。</target>
        </trans-unit>
        <trans-unit id="5b2920fd5055a135502dd8014d61c32dbbe26640" translate="yes" xml:space="preserve">
          <source>This library provides Kalman filtering and various related optimal and
non-optimal filtering software written in Python. It contains Kalman
filters, Extended Kalman filters, Unscented Kalman filters, Kalman
smoothers, Least Squares filters, fading memory filters, g-h filters,
discrete Bayes, and more.</source>
          <target state="translated">このライブラリは、Pythonで書かれたカルマンフィルタリングとそれに関連する様々な最適・非最適フィルタリングソフトウェアを提供します。カルマンフィルタ、拡張カルマンフィルタ、無香カルマンフィルタ、カルマンスムッサ、最小二乗フィルタ、フェージングメモリフィルタ、g-hフィルタ、離散ベイズなどが含まれています。</target>
        </trans-unit>
        <trans-unit id="e13f7bb9ae937b5d5cd0d8b07fd0aa0ec1e81f48" translate="yes" xml:space="preserve">
          <source>This library uses NumPy, SciPy, Matplotlib, and Python.</source>
          <target state="translated">NumPy,SciPy,Matplotlib,Pythonを使用しています。</target>
        </trans-unit>
        <trans-unit id="6bf801da2d6dc208fc60fa6f2e476b5d0f913f6e" translate="yes" xml:space="preserve">
          <source>Why 3.5+, and not 3.4+? 3.5 introduced the matrix multiply symbol,
and I want my code to take advantage of it. Plus, to be honest,
I&amp;rsquo;m being selfish. I don&amp;rsquo;t want to spend my life supporting this
package, and moving as far into the present as possible means
a few extra years before the Python version I choose becomes
hopelessly dated and a liability. I recognize this makes people
running the default Python in their linux distribution more
painful. All I can say is I did not decide to do the Python
3 fork, and I don&amp;rsquo;t have the time to support the bifurcation
any longer.</source>
          <target state="translated">3.4以上ではなく3.5以上なのはなぜですか？3.5では行列乗算シンボルが導入されました。コードでそれを利用したいと思います。さらに、正直なところ、私は利己的です。私はこのパッケージをサポートするために一生を費やしたくありません。可能な限り現在に移行するということは、選択したPythonバージョンが絶望的に​​古くなり責任を負うまでに数年余分にかかることを意味します。これにより、LinuxディストリビューションでデフォルトのPythonを実行している人がより苦痛になることを認識しています。私が言えるのは、Python 3フォークを実行することに決めなかったということだけであり、分岐をサポートする時間がもうありません。</target>
        </trans-unit>
        <trans-unit id="7bda3972fd645f4aa5fd7bc9c0f516b27fc7fa48" translate="yes" xml:space="preserve">
          <source>and then install with:</source>
          <target state="translated">でインストールします。</target>
        </trans-unit>
        <trans-unit id="f6762bfd6156e1d6ad2d093399eec4c20a937173" translate="yes" xml:space="preserve">
          <source>at the
command line.</source>
          <target state="translated">をコマンドラインで実行します。</target>
        </trans-unit>
        <trans-unit id="30b49ad158449a6fb7703af823510598668f8ad0" translate="yes" xml:space="preserve">
          <source>conda config &amp;ndash;add channels conda-forge</source>
          <target state="translated">conda config &amp;ndash;チャネルの追加conda-forge</target>
        </trans-unit>
        <trans-unit id="99422a0a2caacfadcbdf22e2c4ec04c454b2eea3" translate="yes" xml:space="preserve">
          <source>conda install filterpy</source>
          <target state="translated">コンダインストールフィルタパイ</target>
        </trans-unit>
        <trans-unit id="0e043421bf3470cb731f4c32448c91e870f04998" translate="yes" xml:space="preserve">
          <source>py.test</source>
          <target state="translated">py.test</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
