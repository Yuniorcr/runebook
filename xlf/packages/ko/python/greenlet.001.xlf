<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/greenlet/">
    <body>
      <group id="greenlet">
        <trans-unit id="adaf11e77976b1db3da41bdce39ee80caf89a041" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;greenlet&amp;rdquo;, on the other hand, is a still more primitive notion of
micro-thread with no implicit scheduling; coroutines, in other
words. This is useful when you want to control exactly when your code
runs. You can build custom scheduled micro-threads on top of greenlet;
however, it seems that greenlets are useful on their own as a way to
make advanced control flow structures. For example, we can recreate
generators; the difference with Python&amp;rsquo;s own generators is that our
generators can call nested functions and the nested functions can
yield values too. Additionally, you don&amp;rsquo;t need a &amp;ldquo;yield&amp;rdquo; keyword. See
the example in tests/test_generator.py.</source>
          <target state="translated">반면에 &quot;그린 렛&quot;은 암시 적 스케줄링이없는 마이크로 스레드의 더 원시적 인 개념입니다. 즉, 코 루틴입니다. 이는 코드가 실행되는시기를 정확하게 제어하려는 경우에 유용합니다. greenlet 위에 사용자 지정 예약 마이크로 스레드를 구축 할 수 있습니다. 그러나 greenlet은 고급 제어 흐름 구조를 만드는 방법으로 그 자체로 유용합니다. 예를 들어 발전기를 다시 만들 수 있습니다. Python 자체 생성기와의 차이점은 생성기가 중첩 함수를 호출 할 수 있고 중첩 함수도 값을 생성 할 수 있다는 것입니다. 또한 &quot;수익&quot;키워드가 필요하지 않습니다. tests / test_generator.py의 예를 참조하세요.</target>
        </trans-unit>
        <trans-unit id="60014bf21723832fcd770695f34a2ac6aec40c31" translate="yes" xml:space="preserve">
          <source>Concurrence</source>
          <target state="translated">동시 발생</target>
        </trans-unit>
        <trans-unit id="7520bc16833b40c80f4836415af1e67e592d9eb1" translate="yes" xml:space="preserve">
          <source>Documentation is available on readthedocs.org:
&lt;a href=&quot;https://greenlet.readthedocs.io&quot;&gt;https://greenlet.readthedocs.io&lt;/a&gt;</source>
          <target state="translated">readthedocs.org에서 문서를 볼 수 있습니다 : &lt;a href=&quot;https://greenlet.readthedocs.io&quot;&gt;https://greenlet.readthedocs.io&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9da9768d496d27402246e22f29b0761f331bfbc" translate="yes" xml:space="preserve">
          <source>Eventlet</source>
          <target state="translated">Eventlet</target>
        </trans-unit>
        <trans-unit id="7efd500ce749859ca01e5cc53af1010721d004f0" translate="yes" xml:space="preserve">
          <source>Getting Greenlet</source>
          <target state="translated">Greenlet 받기</target>
        </trans-unit>
        <trans-unit id="17c6bf64bf960c6bdea9f0d103dff20d00bac154" translate="yes" xml:space="preserve">
          <source>Gevent</source>
          <target state="translated">Gevent</target>
        </trans-unit>
        <trans-unit id="8acb83f8c59e6a6e068dd420a5d0211d89e1d7f1" translate="yes" xml:space="preserve">
          <source>Greenlets are lightweight coroutines for in-process concurrent
programming.</source>
          <target state="translated">Greenlet은 프로세스 내 동시 프로그래밍을위한 경량 코 루틴입니다.</target>
        </trans-unit>
        <trans-unit id="f27faa7a89962aeacdd62df8f836120e07b78ab3" translate="yes" xml:space="preserve">
          <source>Greenlets are provided as a C extension module for the regular
unmodified interpreter.</source>
          <target state="translated">Greenlet은 수정되지 않은 일반 인터프리터를위한 C 확장 모듈로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="e40cbbce7df1c68eee0b19a19ffb661a38fea3fa" translate="yes" xml:space="preserve">
          <source>Lightweight in-process concurrent programming</source>
          <target state="translated">가벼운 프로세스 내 동시 프로그래밍</target>
        </trans-unit>
        <trans-unit id="e7ec99eb4b2a357ad2c0bdfbf1b28a834e064c15" translate="yes" xml:space="preserve">
          <source>Source code archives and windows installers are available on the
python package index at &lt;a href=&quot;https://pypi.python.org/pypi/greenlet&quot;&gt;https://pypi.python.org/pypi/greenlet&lt;/a&gt;</source>
          <target state="translated">소스 코드 아카이브 및 Windows 설치 프로그램은 &lt;a href=&quot;https://pypi.python.org/pypi/greenlet&quot;&gt;https://pypi.python.org/pypi/greenlet&lt;/a&gt; 의 python 패키지 색인에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2dc5153f8439f3cb766c2df9f108c08510ba3b0" translate="yes" xml:space="preserve">
          <source>The easiest way to get Greenlet is to install it with pip or
easy_install:</source>
          <target state="translated">Greenlet을 얻는 가장 쉬운 방법은 pip 또는 easy_install로 설치하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="2deb206c5b8f85bdbe71c431cb50181956dfffdf" translate="yes" xml:space="preserve">
          <source>The greenlet package is a spin-off of Stackless, a version of CPython
that supports micro-threads called &amp;ldquo;tasklets&amp;rdquo;. Tasklets run
pseudo-concurrently (typically in a single or a few OS-level threads)
and are synchronized with data exchanges on &amp;ldquo;channels&amp;rdquo;.</source>
          <target state="translated">greenlet 패키지는 &quot;tasklet&quot;이라고하는 마이크로 스레드를 지원하는 CPython 버전 인 Stackless의 스핀 오프입니다. Tasklet은 의사 동시 실행 (일반적으로 단일 또는 몇 개의 OS 수준 스레드에서)되며 &quot;채널&quot;에서 데이터 교환과 동기화됩니다.</target>
        </trans-unit>
        <trans-unit id="9420aa3967b9c02613ac42e1885a5577856eaefe" translate="yes" xml:space="preserve">
          <source>The source code repository is hosted on github:
&lt;a href=&quot;https://github.com/python-greenlet/greenlet&quot;&gt;https://github.com/python-greenlet/greenlet&lt;/a&gt;</source>
          <target state="translated">소스 코드 저장소는 github에서 호스팅됩니다 : &lt;a href=&quot;https://github.com/python-greenlet/greenlet&quot;&gt;https://github.com/python-greenlet/greenlet&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb772fb5d10a97b18252ef57c9235142ecf5d922" translate="yes" xml:space="preserve">
          <source>There are several libraries that use Greenlet as a more flexible
alternative to Python&amp;rsquo;s built in coroutine support:</source>
          <target state="translated">Python의 내장 코 루틴 지원에 대한보다 유연한 대안으로 Greenlet을 사용하는 여러 라이브러리가 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa78f0f42358f5844d68bc1f02e3f2d268741a61" translate="yes" xml:space="preserve">
          <source>Who is using Greenlet?</source>
          <target state="translated">누가 Greenlet을 사용하고 있습니까?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
