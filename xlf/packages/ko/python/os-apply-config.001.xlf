<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/os-apply-config/">
    <body>
      <group id="os-apply-config">
        <trans-unit id="6e58e2f7f109ad108081b5d7603a345adbd01f84" translate="yes" xml:space="preserve">
          <source>&amp;ndash;fallback-metadata</source>
          <target state="translated">&amp;ndash;fallback-metadata</target>
        </trans-unit>
        <trans-unit id="a05df94c01529b7919e3e4ec1ee8c2081eea1a8e" translate="yes" xml:space="preserve">
          <source>&amp;ndash;metadata</source>
          <target state="translated">&amp;ndash;metadata</target>
        </trans-unit>
        <trans-unit id="fe59c9d2ddf936d6c1553f911ddd486f0cc2d997" translate="yes" xml:space="preserve">
          <source>&amp;ndash;os-config-files</source>
          <target state="translated">&amp;ndash;os-config-files</target>
        </trans-unit>
        <trans-unit id="967e5df5528684a07d7c71cfa3317efebdffee42" translate="yes" xml:space="preserve">
          <source>,
or the environment variable</source>
          <target state="translated">, 또는 환경 변수</target>
        </trans-unit>
        <trans-unit id="e5682139a5e7537e8c4f8b1aa11cd1e798e93d79" translate="yes" xml:space="preserve">
          <source>, and if they have any
overlapping keys, the value from</source>
          <target state="translated">, and if they have any overlapping keys, the value from</target>
        </trans-unit>
        <trans-unit id="5a085a0508281730013b8f69b0a243a0d4381ea2" translate="yes" xml:space="preserve">
          <source>, the paths are expected to be colon,
&amp;ldquo;:&amp;rdquo;, separated. Each json file referred to must have a mapping as their
root structure. Keys in files mentioned later in the list will override
keys in earlier files from this list. For example:</source>
          <target state="translated">, the paths are expected to be colon, &amp;ldquo;:&amp;rdquo;, separated. Each json file referred to must have a mapping as their root structure. Keys in files mentioned later in the list will override keys in earlier files from this list. For example:</target>
        </trans-unit>
        <trans-unit id="97ba15c9b42aa588048e393b96d4f93a810376d1" translate="yes" xml:space="preserve">
          <source>.
If overriding with</source>
          <target state="translated">. If overriding with</target>
        </trans-unit>
        <trans-unit id="63849c910ca9b59a49a5495c3c47f2a9057f7b8f" translate="yes" xml:space="preserve">
          <source>. In
order to remain backward compatible it will also fall back to
/var/run/os-collect-config/os_config_files.json, but the fallback
path is deprecated and will be removed in a later release. The main
path can be changed with the command line switch</source>
          <target state="translated">. In order to remain backward compatible it will also fall back to /var/run/os-collect-config/os_config_files.json, but the fallback path is deprecated and will be removed in a later release. The main path can be changed with the command line switch</target>
        </trans-unit>
        <trans-unit id="2fa8de95169b58172d1716c4127950f7f88455a4" translate="yes" xml:space="preserve">
          <source>. The list can
also be overridden with the environment variable</source>
          <target state="translated">. The list can also be overridden with the environment variable</target>
        </trans-unit>
        <trans-unit id="b7a2f385d142a072fe5f13ef084ba8bc834a5542" translate="yes" xml:space="preserve">
          <source>/var/lib/os-collect-config/os_config_files.json</source>
          <target state="translated">/var/lib/os-collect-config/os_config_files.json</target>
        </trans-unit>
        <trans-unit id="c5c4a7bc0f4d44a944c1bf4da6642be9405bb164" translate="yes" xml:space="preserve">
          <source>An example tree can be found &lt;a href=&quot;https://opendev.org/openstack/tripleo-image-elements/src/branch/master/elements/os-apply-config&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">An example tree can be found &lt;a href=&quot;https://opendev.org/openstack/tripleo-image-elements/src/branch/master/elements/os-apply-config&quot;&gt;here&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6251769a4e03397ea1d14632d52f68ad5514a4f6" translate="yes" xml:space="preserve">
          <source>An executable template is a script which accepts configuration as a
JSON string on standard in, and writes a config file to standard out.</source>
          <target state="translated">An executable template is a script which accepts configuration as a JSON string on standard in, and writes a config file to standard out.</target>
        </trans-unit>
        <trans-unit id="182f6b830269cea0d409201f184eecc3fa02c79e" translate="yes" xml:space="preserve">
          <source>Apply configuration from cloud metadata (JSON)</source>
          <target state="translated">Apply configuration from cloud metadata (JSON)</target>
        </trans-unit>
        <trans-unit id="9da13604dac35de807a4f2c91edade139b1fe663" translate="yes" xml:space="preserve">
          <source>By default it will read config files according to the contents of
the file</source>
          <target state="translated">By default it will read config files according to the contents of the file</target>
        </trans-unit>
        <trans-unit id="7dd135ad7968525b4c750d0841c8227a8c74fa1a" translate="yes" xml:space="preserve">
          <source>Config files from cloud metadata</source>
          <target state="translated">Config files from cloud metadata</target>
        </trans-unit>
        <trans-unit id="4811f97621d0e9dd12dcc3187b4e6c9e5da8827d" translate="yes" xml:space="preserve">
          <source>Configuration requiring logic is expressed in executable templates.</source>
          <target state="translated">Configuration requiring logic is expressed in executable templates.</target>
        </trans-unit>
        <trans-unit id="fd4e09afbe0604551761e007a23282310c28bb09" translate="yes" xml:space="preserve">
          <source>Executable Templates</source>
          <target state="translated">Executable Templates</target>
        </trans-unit>
        <trans-unit id="ff6626932b84cd8b1a3adda18420892ea5cad939" translate="yes" xml:space="preserve">
          <source>If a template is executable it will be treated as an &lt;em&gt;executable
template&lt;/em&gt;.  Otherwise, it will be treated as a &lt;em&gt;mustache template&lt;/em&gt;.</source>
          <target state="translated">If a template is executable it will be treated as an &lt;em&gt;executable template&lt;/em&gt;. Otherwise, it will be treated as a &lt;em&gt;mustache template&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="51f419191979b3698b57c01ab9c63698e8032a61" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t need any logic, just some string substitution, use a
mustache template.</source>
          <target state="translated">If you don&amp;rsquo;t need any logic, just some string substitution, use a mustache template.</target>
        </trans-unit>
        <trans-unit id="f6a641d67dff36437c1921a726f1e08a2dae88b7" translate="yes" xml:space="preserve">
          <source>It turns metadata from one or more JSON files like this:</source>
          <target state="translated">It turns metadata from one or more JSON files like this:</target>
        </trans-unit>
        <trans-unit id="52a0e61a6615ce5f56fa632cdb017fdd50a78aa1" translate="yes" xml:space="preserve">
          <source>Just pass it the path to a directory tree of templates:</source>
          <target state="translated">Just pass it the path to a directory tree of templates:</target>
        </trans-unit>
        <trans-unit id="2b49c0a9acb3ed39a10a6ecf65926f9fb3213b1e" translate="yes" xml:space="preserve">
          <source>Metadata settings are accessed with dot (&amp;lsquo;.&amp;rsquo;) notation:</source>
          <target state="translated">Metadata settings are accessed with dot (&amp;lsquo;.&amp;rsquo;) notation:</target>
        </trans-unit>
        <trans-unit id="356cafd1e9e9e5489464a34728722110baa79c08" translate="yes" xml:space="preserve">
          <source>Mustache Templates</source>
          <target state="translated">Mustache Templates</target>
        </trans-unit>
        <trans-unit id="ea8557976f99bee5e805e469746d0bf9c417d886" translate="yes" xml:space="preserve">
          <source>OS_CONFIG_FILES</source>
          <target state="translated">OS_CONFIG_FILES</target>
        </trans-unit>
        <trans-unit id="8e961caea339cae195723b95a4ad2d8d05b31d2e" translate="yes" xml:space="preserve">
          <source>OS_CONFIG_FILES_PATH</source>
          <target state="translated">OS_CONFIG_FILES_PATH</target>
        </trans-unit>
        <trans-unit id="455083cac2ae96eabe3895762b6080aa09e6afa4" translate="yes" xml:space="preserve">
          <source>Quick Start</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="dbfd02eb9321978881c1fa4334ac31109ab60a9d" translate="yes" xml:space="preserve">
          <source>Team and repository tags</source>
          <target state="translated">팀 및 저장소 태그</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">템플릿</target>
        </trans-unit>
        <trans-unit id="2f416cc6d91b8e0acd29bd7844886e23847ecddc" translate="yes" xml:space="preserve">
          <source>The output of the script will be written to the path corresponding to
the executable template&amp;rsquo;s path in the template tree:</source>
          <target state="translated">The output of the script will be written to the path corresponding to the executable template&amp;rsquo;s path in the template tree:</target>
        </trans-unit>
        <trans-unit id="c761e453d5c75bb5b6e62c429a88549890b347d8" translate="yes" xml:space="preserve">
          <source>The script should exit non-zero if it encounters a problem, so that
os-apply-config knows what&amp;rsquo;s up.</source>
          <target state="translated">The script should exit non-zero if it encounters a problem, so that os-apply-config knows what&amp;rsquo;s up.</target>
        </trans-unit>
        <trans-unit id="4583e85db04815072d359918e22702c77577fd0b" translate="yes" xml:space="preserve">
          <source>The template directory structure should mimic a root filesystem, and
contain templates for only those files you want configured. For
example:</source>
          <target state="translated">The template directory structure should mimic a root filesystem, and contain templates for only those files you want configured. For example:</target>
        </trans-unit>
        <trans-unit id="edb44fc129a9a3beb69641e7619fdda555efe8b9" translate="yes" xml:space="preserve">
          <source>This will read</source>
          <target state="translated">This will read</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="06b2c135c0cd5ad382fc2e7bf514ca2bf8828d46" translate="yes" xml:space="preserve">
          <source>What does it do?</source>
          <target state="translated">무엇을합니까?</target>
        </trans-unit>
        <trans-unit id="05cc58d9fe889096d4de63ff3a5a1b31530dd82f" translate="yes" xml:space="preserve">
          <source>You can also override</source>
          <target state="translated">You can also override</target>
        </trans-unit>
        <trans-unit id="530492537441dc1ae47af180a3970d5f3b924a7e" translate="yes" xml:space="preserve">
          <source>You could even embed mustache in a heredoc, and use that:</source>
          <target state="translated">You could even embed mustache in a heredoc, and use that:</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="e578296b887a5bdc2d6bc192cd9b7405bc76d21c" translate="yes" xml:space="preserve">
          <source>cfn.json</source>
          <target state="translated">cfn.json</target>
        </trans-unit>
        <trans-unit id="5b8e7027e72990e0dd90e29580078ba3848a46c9" translate="yes" xml:space="preserve">
          <source>command
line option, specifying it multiple times instead of colon separating
the list.</source>
          <target state="translated">command line option, specifying it multiple times instead of colon separating the list.</target>
        </trans-unit>
        <trans-unit id="bdf06e68ec72b15ecd6af5a846b102c04a3839f5" translate="yes" xml:space="preserve">
          <source>ec2.json</source>
          <target state="translated">ec2.json</target>
        </trans-unit>
        <trans-unit id="7c00b67a2b8dc2a1ae56e0e445dec57c58fed59d" translate="yes" xml:space="preserve">
          <source>into service config files like this:</source>
          <target state="translated">into service config files like this:</target>
        </trans-unit>
        <trans-unit id="4c7e63741cd8f07c16f1f1e0dd04c5858dcb5206" translate="yes" xml:space="preserve">
          <source>os-apply-config</source>
          <target state="translated">os-apply-config</target>
        </trans-unit>
        <trans-unit id="a3767df435555e90b3bb6c97264c439e3007b5bf" translate="yes" xml:space="preserve">
          <source>will also always try to read metadata in the old
legacy paths first to populate the tree. These paths can be changed
with</source>
          <target state="translated">will also always try to read metadata in the old legacy paths first to populate the tree. These paths can be changed with</target>
        </trans-unit>
        <trans-unit id="19b2a0829d9874a2c354c86cf43b276d8b99712d" translate="yes" xml:space="preserve">
          <source>will be used. That will
populate the tree for any templates found in the template path. See
&lt;a href=&quot;https://opendev.org/openstack/os-collect-config&quot;&gt;https://opendev.org/openstack/os-collect-config&lt;/a&gt; for a
program that will automatically collect data and populate this list.</source>
          <target state="translated">will be used. That will populate the tree for any templates found in the template path. See &lt;a href=&quot;https://opendev.org/openstack/os-collect-config&quot;&gt;https://opendev.org/openstack/os-collect-config&lt;/a&gt; for a program that will automatically collect data and populate this list.</target>
        </trans-unit>
        <trans-unit id="0c303466efe4cbf12a616af1540bc1eb7aaeaf47" translate="yes" xml:space="preserve">
          <source>with the</source>
          <target state="translated">이랑</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
