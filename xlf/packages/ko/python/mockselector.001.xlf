<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/mockselector/">
    <body>
      <group id="mockselector">
        <trans-unit id="5c965f39de05fddf61e772dedb0d43e46a8cd234" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListenSocket&lt;/code&gt; is used to mimic a listening socket. Its initializer takes
an iterable of &lt;code&gt;socket.socket&lt;/code&gt; objects (including plain &lt;code&gt;Mock&lt;/code&gt; or
&lt;code&gt;MockSocket&lt;/code&gt; objects) or callables returning an object like that.
The socket objects are returned one at a time by the &lt;code&gt;accept&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;ListenSocket&lt;/code&gt; 은 청취 소켓을 모방하는 데 사용됩니다. 그 이니셜의 반복 가능합니다 &lt;code&gt;socket.socket&lt;/code&gt; 의 (일반 포함 객체 &lt;code&gt;Mock&lt;/code&gt; 또는 &lt;code&gt;MockSocket&lt;/code&gt; 또는 그와 같은 객체를 반환 callables 개체). 소켓 객체는 &lt;code&gt;accept&lt;/code&gt; 메서드에 의해 한 번에 하나씩 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="c4c3d95df3f41b38d2755c5a26eaaad051affddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MockSelector&lt;/code&gt; is a &lt;code&gt;selectors.BaseSelector&lt;/code&gt; subclass. At creation time it
takes an iterable of objects. Those objects can be:</source>
          <target state="translated">&lt;code&gt;MockSelector&lt;/code&gt; 는 &lt;code&gt;selectors.BaseSelector&lt;/code&gt; 하위 클래스입니다. 생성시에는 반복 가능한 객체가 필요합니다. 이러한 개체는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8a9d75c0ca6b526ecf4ba88c7fa5b11e9b89b3f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MockSocket&lt;/code&gt; is a specialization of a &lt;code&gt;Mock(socket.socket)&lt;/code&gt;. Its initializer
takes an iterable of byte strings or functions returning byte strings.
The functions can be used as a run time side effect to set a flag in a
server and allow a clean exit from the main loop.
The byte strings are returned one at a time by the &lt;code&gt;recv&lt;/code&gt; method. When
the iterable is exhausted, &lt;code&gt;recv&lt;/code&gt; returns an empty byte string (&lt;code&gt;b''&lt;/code&gt;)
to mimic a client close or shutdown on the socket.</source>
          <target state="translated">&lt;code&gt;MockSocket&lt;/code&gt; 은 &lt;code&gt;Mock(socket.socket)&lt;/code&gt; socket.socket )의 전문화입니다 . 이니셜 라이저는 바이트 문자열 또는 바이트 문자열을 반환하는 함수의 iterable을받습니다. 이 함수는 서버에서 플래그를 설정하고 메인 루프에서 완전히 빠져 나갈 수 있도록하는 런타임 부작용으로 사용할 수 있습니다. &lt;code&gt;recv&lt;/code&gt; 메서드 는 바이트 문자열을 한 번에 하나씩 반환 합니다. iterable이 고갈되면 &lt;code&gt;recv&lt;/code&gt; 는 소켓에서 클라이언트 닫기 또는 종료를 모방하기 위해 빈 바이트 문자열 ( &lt;code&gt;b''&lt;/code&gt; )을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="196ead3d4d613eaa7efe5ed4e3d4a7fa785cc9ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mockselector&lt;/code&gt; relies on &lt;code&gt;setuptools-scm&lt;/code&gt; to automatically extract a
version number from git metadata and store it in a &lt;code&gt;version.py&lt;/code&gt; file
for later use. The requires the availability of both &lt;code&gt;git&lt;/code&gt; (which should
not be a problem when the project is downloaded from Github), and
&lt;code&gt;setuptools-scm&lt;/code&gt;. If it fails because one is not available or because
git metadata is not there (if you only downloaded a zip archive from
Github), the version is set to 0.0.0</source>
          <target state="translated">&lt;code&gt;mockselector&lt;/code&gt; 는 &lt;code&gt;setuptools-scm&lt;/code&gt; 을 사용하여 git 메타 데이터에서 버전 번호를 자동으로 추출하고 나중에 사용할 수 있도록 &lt;code&gt;version.py&lt;/code&gt; 파일에 저장합니다 . 에는 &lt;code&gt;git&lt;/code&gt; (Github에서 프로젝트를 다운로드 할 때 문제가되지 않음) 및 &lt;code&gt;setuptools-scm&lt;/code&gt; 을 모두 사용할 수 있어야합니다 . 하나를 사용할 수 없거나 git 메타 데이터가 없어서 실패하는 경우 (Github에서 zip 아카이브 만 다운로드 한 경우) 버전은 0.0.0으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="4b6592e407f065a26e072951418c2497e5ed88ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip&lt;/code&gt; should be used to install it for the first time in order to have
&lt;code&gt;setuptools-scm&lt;/code&gt; to generate the &lt;code&gt;version.py&lt;/code&gt; file from git metadata.
Once this is done, &lt;code&gt;setup.py&lt;/code&gt; can be used with no special issue.</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; &lt;code&gt;setuptools-scm&lt;/code&gt; 이 git 메타 데이터에서 &lt;code&gt;version.py&lt;/code&gt; 파일 을 생성 하도록하려면 pip 를 사용하여 처음 설치해야합니다 . 이 작업이 완료되면 특별한 문제없이 &lt;code&gt;setup.py&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="101fb22f34cc02d4f73529a03d2c53188f7a16a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pip&lt;/code&gt; uses the &lt;code&gt;pyproject.toml&lt;/code&gt; file with respect to PEP-518 and
PEP-517 to know that &lt;code&gt;setuptools-scm&lt;/code&gt; is required before the build.</source>
          <target state="translated">&lt;code&gt;pip&lt;/code&gt; 는 PEP-518 및 PEP-517과 관련 하여 &lt;code&gt;pyproject.toml&lt;/code&gt; 파일을 사용 하여 빌드 전에 &lt;code&gt;setuptools-scm&lt;/code&gt; 이 필요 하다는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1ab285d567a2f02ce550dc09de2a5df8c708358" translate="yes" xml:space="preserve">
          <source>Advanced use and contribution</source>
          <target state="translated">고급 사용 및 기여</target>
        </trans-unit>
        <trans-unit id="b5311e1c64b6abbdd9b39654888e91122b36d66b" translate="yes" xml:space="preserve">
          <source>Alternatively you can manually install &lt;code&gt;setuptools-scm&lt;/code&gt;:</source>
          <target state="translated">또는 &lt;code&gt;setuptools-scm&lt;/code&gt; 을 수동으로 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">기본 사용</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">기술</target>
        </trans-unit>
        <trans-unit id="5deddc83e30130f483cdfd9d3f63b05d6aff5cb8" translate="yes" xml:space="preserve">
          <source>Disclaimer: beta quality</source>
          <target state="translated">면책 조항 : 베타 품질</target>
        </trans-unit>
        <trans-unit id="d11a97d90a845be5521ce7e78d03c57c33f7776a" translate="yes" xml:space="preserve">
          <source>Even if the package has a nice test coverage (&amp;gt; 95%), it currently only
contains what I need to test another project of mine. It might not meet
your own requirements, or main contain Still Unidentified Bugs...</source>
          <target state="translated">패키지에 좋은 테스트 범위 (&amp;gt; 95 %)가 있더라도 현재 다른 프로젝트를 테스트하는 데 필요한 것만 포함되어 있습니다. 자신의 요구 사항을 충족하지 않거나 메인에 여전히 미확인 버그가 포함되어있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed4acbbfb6dce0686b9903c1f84471846953ee1d" translate="yes" xml:space="preserve">
          <source>Facing a main server loop close to:</source>
          <target state="translated">다음과 같은 주 서버 루프에 직면 :</target>
        </trans-unit>
        <trans-unit id="af05ea80ae71129e0e6f32126b09a86a4f5d08f6" translate="yes" xml:space="preserve">
          <source>For that reason, if you do not use git to download the sources, you
should download a source distribution from PyPI, because the latter
contains a valid &lt;code&gt;version.py&lt;/code&gt;</source>
          <target state="translated">따라서 git을 사용하여 소스를 다운로드하지 않으면 PyPI에서 유효한 &lt;code&gt;version.py&lt;/code&gt; 포함되어 있으므로 PyPI에서 소스 배포를 다운로드해야합니다.</target>
        </trans-unit>
        <trans-unit id="b6099df6a655a96ea2246feae778e64089bd6cfc" translate="yes" xml:space="preserve">
          <source>From Github</source>
          <target state="translated">Github에서</target>
        </trans-unit>
        <trans-unit id="0497f9c6f240debffc9e9a2160d24cab3f0d8f5e" translate="yes" xml:space="preserve">
          <source>From PyPI</source>
          <target state="translated">PyPI에서</target>
        </trans-unit>
        <trans-unit id="a72acdedb02c9456c4f5532eb2d3e5d794db7fe5" translate="yes" xml:space="preserve">
          <source>I will be glad to receive issues that would help to improve this project...</source>
          <target state="translated">이 프로젝트를 개선하는 데 도움이 될 문제를 받게되어 기쁩니다 ...</target>
        </trans-unit>
        <trans-unit id="da830bd98271f4bdee879704bbba3e964907e33c" translate="yes" xml:space="preserve">
          <source>If you want to tailor the package, it already contains a number of tests.
You can run all of them from the top folder:</source>
          <target state="translated">패키지를 조정하려는 경우 이미 여러 테스트가 포함되어 있습니다. 최상위 폴더에서 모두 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="577f7ee5c88ba7d2a5031bc7e2ffb21c1726a58c" translate="yes" xml:space="preserve">
          <source>It is still a 0.x version, so the API is not guaranteed to be stable.</source>
          <target state="translated">여전히 0.x 버전이므로 API가 안정적이라고 보장 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="2822ed554c7be24e89138ad6c33c90d1a860c3cc" translate="yes" xml:space="preserve">
          <source>Mock subclass of BaseSelector</source>
          <target state="translated">BaseSelector의 모의 서브 클래스</target>
        </trans-unit>
        <trans-unit id="ddadf321ace3a61dcf80e64655b29a265a14a516" translate="yes" xml:space="preserve">
          <source>MockSelector</source>
          <target state="translated">MockSelector</target>
        </trans-unit>
        <trans-unit id="43d089df1f9715e26c2001956a2b35a41746ec95" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;test&lt;/code&gt; folder is only available in the source distribution.</source>
          <target state="translated">참고 : &lt;code&gt;test&lt;/code&gt; 폴더는 소스 배포에서만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b8721ee58ba353c54d34430f12eff5ad5230371" translate="yes" xml:space="preserve">
          <source>Of course, this can be done in a relevant venv if you do not want to have it
in your main installation.</source>
          <target state="translated">물론 기본 설치에 포함하지 않으려면 관련 Venv에서 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7e0a7eae14b049ebb14444ce538953f5f662ee8" translate="yes" xml:space="preserve">
          <source>Once installed, you can easily import it in your tests.</source>
          <target state="translated">일단 설치되면 테스트에서 쉽게 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b7728b9ec6cee44a957511a2f48bf8e2c25a783" translate="yes" xml:space="preserve">
          <source>Special handling of &lt;code&gt;version.py&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;version.py&lt;/code&gt; 의 특수 처리 :</target>
        </trans-unit>
        <trans-unit id="9b79b971c6f36b36653862b1e6817495b8652c45" translate="yes" xml:space="preserve">
          <source>Starting from 0.1.1, &lt;code&gt;mockselector&lt;/code&gt; is available on PyPI. If you just want to
use it in your projects, it is the recommended way:</source>
          <target state="translated">0.1.1부터 &lt;code&gt;mockselector&lt;/code&gt; 는 PyPI에서 사용할 수 있습니다. 프로젝트에서 사용하려는 경우 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="329862ba1bf52f198f010d40f26763efbfd252b2" translate="yes" xml:space="preserve">
          <source>That work is licenced under a MIT Licence. See &lt;a href=&quot;https://raw.githubusercontent.com/s-ball/MockSelector/master/LICENCE.txt&quot;&gt;LICENSE.txt&lt;/a&gt;</source>
          <target state="translated">이 작업은 MIT 라이센스에 따라 라이센스가 부여됩니다. &lt;a href=&quot;https://raw.githubusercontent.com/s-ball/MockSelector/master/LICENCE.txt&quot;&gt;LICENSE.txt&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="f4f24180723e72148f05f247d61d7fadcd5213a4" translate="yes" xml:space="preserve">
          <source>This is a collection of Python classes designed to help to test TCP servers
based on selectors. The &lt;code&gt;mockselector&lt;/code&gt; package provides everything needed to easily write
unittest TestCases simulating incoming connections and the associated
input data</source>
          <target state="translated">이것은 선택기를 기반으로 TCP 서버를 테스트하는 데 도움이되도록 설계된 Python 클래스 모음입니다. &lt;code&gt;mockselector&lt;/code&gt; 의 패키지는 쉽게 쓰기 들어오는 연결을 시뮬레이션 유닛 테스트에 테스트 케이스 및 관련 입력 데이터에 필요한 모든 것을 제공합니다</target>
        </trans-unit>
        <trans-unit id="864c64f3daffbccc5d3469b3e428ead1f9ff353f" translate="yes" xml:space="preserve">
          <source>This is the recommended way if you want to contribute or simply tweak
&lt;code&gt;mockselector&lt;/code&gt; to your own requirements. You can get a local copy by
downloading a zipfile but if you want to make changes, you should
rather clone the repository to have access to all &lt;code&gt;git&lt;/code&gt; goodies:</source>
          <target state="translated">이것은 자신의 요구 사항 에 기여하거나 단순히 &lt;code&gt;mockselector&lt;/code&gt; 를 조정하려는 경우 권장되는 방법 입니다. zip 파일을 다운로드하여 로컬 사본을 얻을 수 있지만 변경하려면 저장소를 복제하여 모든 &lt;code&gt;git&lt;/code&gt; goodies에 액세스해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b2b4a58364a66ddc31be2ebe3b25104e625fbee3" translate="yes" xml:space="preserve">
          <source>Typical use</source>
          <target state="translated">일반적인 사용</target>
        </trans-unit>
        <trans-unit id="907ec8dd47bc3fc0d7e789b5f4942f384b9adefd" translate="yes" xml:space="preserve">
          <source>You can do:</source>
          <target state="translated">넌 할 수있어:</target>
        </trans-unit>
        <trans-unit id="2930805d8e9c7be12b45006dbad4cebd64b69b13" translate="yes" xml:space="preserve">
          <source>You can find a full code example in the &lt;code&gt;miniserv.py&lt;/code&gt; and &lt;code&gt;test_miniserv.py&lt;/code&gt;
files in the tests folder</source>
          <target state="translated">테스트 폴더 의 &lt;code&gt;miniserv.py&lt;/code&gt; 및 &lt;code&gt;test_miniserv.py&lt;/code&gt; 파일에서 전체 코드 예제를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62371cdaedf2325d05d161e5cbd16a8c64121246" translate="yes" xml:space="preserve">
          <source>You can then install it in your main Python installation or in a venv with:</source>
          <target state="translated">그런 다음 기본 Python 설치 또는 다음을 사용하여 venv에 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81672b3eefa3fd74b60b8a9c157758291fad07c1" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;socket.socket&lt;/code&gt; (or a &lt;code&gt;Mock&lt;/code&gt;) that will be returned by a &lt;code&gt;select&lt;/code&gt; call
along with an &lt;code&gt;EVENT_READ&lt;/code&gt; event</source>
          <target state="translated">&lt;code&gt;socket.socket&lt;/code&gt; (또는 &lt;code&gt;Mock&lt;/code&gt; a로 반환됩니다) &lt;code&gt;select&lt;/code&gt; 와 함께 전화 &lt;code&gt;EVENT_READ&lt;/code&gt; 의 이벤트</target>
        </trans-unit>
        <trans-unit id="32feb6bb42a2f4c588f6ddca474388fa882bff62" translate="yes" xml:space="preserve">
          <source>a pair &lt;code&gt;(socket, event)&lt;/code&gt; that will be returned - this allows to pass
&lt;code&gt;EVENT_WRITE&lt;/code&gt; events</source>
          <target state="translated">반환 될 쌍 &lt;code&gt;(socket, event)&lt;/code&gt; &lt;code&gt;EVENT_WRITE&lt;/code&gt; 이벤트 를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37c75840d617bcee050d37558935873a501f9fe6" translate="yes" xml:space="preserve">
          <source>an iterable of above elements. They will be returned in a list by a
single &lt;code&gt;select&lt;/code&gt; call as &lt;em&gt;simultaneous&lt;/em&gt; events</source>
          <target state="translated">위 요소의 반복 가능. 단일 &lt;code&gt;select&lt;/code&gt; 호출에 의해 &lt;em&gt;동시&lt;/em&gt; 이벤트 로 목록에 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="18ab2bf3c96d7c91902aa402ae115a01b32d5cc0" translate="yes" xml:space="preserve">
          <source>or on Windows with the launcher:</source>
          <target state="translated">또는 런처가있는 Windows :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
