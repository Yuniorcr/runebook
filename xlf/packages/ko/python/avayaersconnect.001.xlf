<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/avayaersconnect/">
    <body>
      <group id="avayaersconnect">
        <trans-unit id="1862ee85ec1306ab7875b0b9ee7862e8fa4a13f1" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect.ReadConfig(&quot;172.16.1.1&quot;, &quot;RW&quot;, &quot;securepasswd&quot;, &quot;show vlan&quot;, to_file = True, to_screen = False)</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect.ReadConfig ( &quot;172.16.1.1&quot;, &quot;RW&quot;, &quot;securepasswd&quot;, &quot;show vlan&quot;, to_file = True, to_screen = False)</target>
        </trans-unit>
        <trans-unit id="2987cf0cad57b3e3c6ffd04e4b288977b14841ca" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect.SendConfig(&quot;172.16.1.1&quot;, &quot;avayatestcmd.txt&quot;, &quot;RW&quot;, &quot;securepasswd&quot;, save_config = True)</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect.SendConfig ( &quot;172.16.1.1&quot;, &quot;avayatestcmd.txt&quot;, &quot;RW&quot;, &quot;securepasswd&quot;, save_config = True)</target>
        </trans-unit>
        <trans-unit id="2012f1fe25a8a88a35dd11fd183ce4a7a66ec8d0" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect.SendConfigToMultiDev(&quot;RW&quot;, &quot;securepasswd&quot;, save_config = True)</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect.SendConfigToMultiDev ( &quot;RW&quot;, &quot;securepasswd&quot;, save_config = True)</target>
        </trans-unit>
        <trans-unit id="1c184454c70124c74af5d2fdb155242783e804ed" translate="yes" xml:space="preserve">
          <source>&amp;gt;&amp;gt;&amp;gt; import AvayaERSConnect</source>
          <target state="translated">&amp;gt;&amp;gt;&amp;gt; AvayaERSConnect 가져 오기</target>
        </trans-unit>
        <trans-unit id="757a248f50e839fdca7aa1b0b64f6f4182c60fcd" translate="yes" xml:space="preserve">
          <source>---- -------------------- -------- ---------------- ------- ------ ------- ----</source>
          <target state="translated">---- -------------------- -------- ----------------- ----- ------ ------- ----</target>
        </trans-unit>
        <trans-unit id="542fc1db6b8e7ee12600dcd33fcc4da9783df390" translate="yes" xml:space="preserve">
          <source>1    VLAN #1              Port     None             0x0000  Yes    IVL     Yes</source>
          <target state="translated">1 VLAN # 1 포트 없음 0x0000 예 IVL 예</target>
        </trans-unit>
        <trans-unit id="9a831efb99bb5bea0ececda0d78e1b7e3e69bed9" translate="yes" xml:space="preserve">
          <source>100  VLAN #100            Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">100 VLAN # 100 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="a0493be78ee27f48cd8af53b48b3e62eeb3c8457" translate="yes" xml:space="preserve">
          <source>101  VLAN #101            Protocol Ipv6 Ether2      0x86dd  Yes    IVL     No</source>
          <target state="translated">101 VLAN # 101 프로토콜 Ipv6 Ether2 0x86dd 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="1459fb558b6d3d9e47d73e873f171586374878ce" translate="yes" xml:space="preserve">
          <source>102  VLAN #102            Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">102 VLAN # 102 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="a9bd706d371a518ab4b5c94a5ebaf778dbf4e3f1" translate="yes" xml:space="preserve">
          <source>2    VLAN #2              Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">2 VLAN # 2 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="dd29d02a99e45026221de7aea037b93dd9d975af" translate="yes" xml:space="preserve">
          <source>2.3#show vlan</source>
          <target state="translated">2.3 # show vlan</target>
        </trans-unit>
        <trans-unit id="f66b0857c4429056757b897b62d7629e152f3eec" translate="yes" xml:space="preserve">
          <source>2.4#show vlan</source>
          <target state="translated">2.4 # show vlan</target>
        </trans-unit>
        <trans-unit id="1299b79a75f217e3747f5b0667c6c91233468be0" translate="yes" xml:space="preserve">
          <source>2.5#show vlan</source>
          <target state="translated">2.5 # show vlan</target>
        </trans-unit>
        <trans-unit id="c4d128bae016f76d13a31bde009879a34fdd6cb7" translate="yes" xml:space="preserve">
          <source>3    VLAN #3              Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">3 VLAN # 3 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="0a3445b6a07664a328e175b65ab9185d533d7443" translate="yes" xml:space="preserve">
          <source>4    VLAN #4              Protocol Ipv6 Ether2      0x86dd  Yes    IVL     No</source>
          <target state="translated">4 VLAN # 4 프로토콜 Ipv6 Ether2 0x86dd 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="8d60b7601d1e6aaba67230b945e200348d0ae359" translate="yes" xml:space="preserve">
          <source>55   VLAN #55             Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">55 VLAN # 55 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="5082f7c17b9b183469487310544dd48b338ac7d8" translate="yes" xml:space="preserve">
          <source>77   VLAN #77             Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">77 VLAN # 77 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="1275ec1eb969595bd869738489dbff13ac7dd931" translate="yes" xml:space="preserve">
          <source>88   VLAN #88             Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">88 VLAN # 88 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="804abde517f9458d6d05aadb95165dca49ae5262" translate="yes" xml:space="preserve">
          <source>99   VLAN #99             Port     None             0x0000  Yes    IVL     No</source>
          <target state="translated">99 VLAN # 99 포트 없음 0x0000 예 IVL 아니요</target>
        </trans-unit>
        <trans-unit id="ce2bcd1cca7379fe762058488288e520841d0cda" translate="yes" xml:space="preserve">
          <source>All devices are reachable. Waiting for command file...</source>
          <target state="translated">모든 장치에 연결할 수 있습니다. 명령 파일을 기다리는 중 ...</target>
        </trans-unit>
        <trans-unit id="8862a15d93f49536a918bbd368509e548adfaa7a" translate="yes" xml:space="preserve">
          <source>Avaya ERS 25xx (all models)</source>
          <target state="translated">Avaya ERS 25xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="d72032f36689e6d8dbeef782621e6004904e2679" translate="yes" xml:space="preserve">
          <source>Avaya ERS 35xx (all models)</source>
          <target state="translated">Avaya ERS 35xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="a7d268ac3612c49362b7cfe4c80e2da7a3103d17" translate="yes" xml:space="preserve">
          <source>Avaya ERS 45xx (all models)</source>
          <target state="translated">Avaya ERS 45xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="1dc576778e6f596a15c83fe8f7dfffe5253c438e" translate="yes" xml:space="preserve">
          <source>Avaya ERS 48xx (all models)</source>
          <target state="translated">Avaya ERS 48xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="67bf34aa0d61d4f81edcf0fcc034ea00967c547f" translate="yes" xml:space="preserve">
          <source>Avaya ERS 55xx (all models)</source>
          <target state="translated">Avaya ERS 55xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="3eba2a739605ccae7e79b434a56445f931093297" translate="yes" xml:space="preserve">
          <source>Avaya ERS 56xx (all models)</source>
          <target state="translated">Avaya ERS 56xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="01d440ce7300b261f9ec145590384b2ffe36e7aa" translate="yes" xml:space="preserve">
          <source>Avaya ERS 59xx (all models)</source>
          <target state="translated">Avaya ERS 59xx (모든 모델)</target>
        </trans-unit>
        <trans-unit id="f1068b546bb51cc5d0b91623515cdf0549ad0096" translate="yes" xml:space="preserve">
          <source>AvayaERSConnect is published under the MIT License.</source>
          <target state="translated">AvayaERSConnect는 MIT 라이선스에 따라 게시됩니다.</target>
        </trans-unit>
        <trans-unit id="f508cae7fdd3ce075cf1c9fab0fbc2f5be6d680e" translate="yes" xml:space="preserve">
          <source>AvayaERSConnect usable functions:</source>
          <target state="translated">AvayaERSConnect 사용 가능한 기능 :</target>
        </trans-unit>
        <trans-unit id="1f6eab2e1f345e76b9b5902b9f797847780d431e" translate="yes" xml:space="preserve">
          <source>AvayaERSConnect&amp;rsquo;s main purpose is to connect to any Avaya ERS Device via Telnet and perform various administration operations easily, without the need to write any Python code at all.</source>
          <target state="translated">AvayaERSConnect의 주요 목적은 Telnet을 통해 모든 Avaya ERS 장치에 연결하고 Python 코드를 전혀 작성할 필요없이 다양한 관리 작업을 쉽게 수행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b883520fd9132fd70e4e12f92ceaa85fdbc644cc" translate="yes" xml:space="preserve">
          <source>AvayaERSConnect.py Documentation</source>
          <target state="translated">AvayaERSConnect.py 문서</target>
        </trans-unit>
        <trans-unit id="f07a9a0e32b62616875429c87f24e31347c0b0e8" translate="yes" xml:space="preserve">
          <source>AvayaERSConnect’s main purpose is to connect to any Avaya ERS Device via Telnet and perform various administration operations easily, without the need to write any Python code at all.</source>
          <target state="translated">AvayaERSConnect의 주요 목적은 Telnet을 통해 모든 Avaya ERS 장치에 연결하고 Python 코드를 전혀 작성할 필요없이 다양한 관리 작업을 쉽게 수행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="401151b1ff9b51b0fcbfa7ce9f130cd7d70be7c4" translate="yes" xml:space="preserve">
          <source>Checking IP reachability...</source>
          <target state="translated">IP 연결성 확인 중 ...</target>
        </trans-unit>
        <trans-unit id="364ff112a22abd174dd37ba40cb4e33f5aec1a14" translate="yes" xml:space="preserve">
          <source>Commands file was found.</source>
          <target state="translated">명령 파일을 찾았습니다.</target>
        </trans-unit>
        <trans-unit id="a8be9a76c3b912405da699631163f5c07542dd11" translate="yes" xml:space="preserve">
          <source>Configuration was saved to NVRAM.</source>
          <target state="translated">구성이 NVRAM에 저장되었습니다.</target>
        </trans-unit>
        <trans-unit id="204ee536034b62f666f8bd837c33738dd3822ef1" translate="yes" xml:space="preserve">
          <source>Enter IP file name and extension: avayamultiip.txt</source>
          <target state="translated">IP 파일 이름 및 확장자 입력 : avayamultiip.txt</target>
        </trans-unit>
        <trans-unit id="18526474b40003b94f76501cdd14125fa47ffc1d" translate="yes" xml:space="preserve">
          <source>Enter command file name and extension: avayamulticmd.txt</source>
          <target state="translated">명령 파일 이름 및 확장자 입력 : avayamulticmd.txt</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>
        </trans-unit>
        <trans-unit id="86bc7bcc60ef5faf38e1edcad174303b0330426f" translate="yes" xml:space="preserve">
          <source>IP connectivity from the host / virtual machine to the Avaya ERS device(s)</source>
          <target state="translated">호스트 / 가상 머신에서 Avaya ERS 장치로의 IP 연결</target>
        </trans-unit>
        <trans-unit id="b8bcfe53a3166e040c84127c63a55a3036d29a48" translate="yes" xml:space="preserve">
          <source>Id   Name                 Type     Protocol         PID     Active IVL/SVL Mgmt</source>
          <target state="translated">ID 이름 유형 프로토콜 PID Active IVL / SVL Mgmt</target>
        </trans-unit>
        <trans-unit id="d0391983f7c76b3b571ac13dfddf248de6d6f788" translate="yes" xml:space="preserve">
          <source>If both &amp;ldquo;to_file&amp;rdquo; and &amp;ldquo;to_screen&amp;rdquo; are set to True, the output will be both stored in an external file and printed to the screen. If both are set to False, nothing happens.</source>
          <target state="translated">&quot;to_file&quot;과 &quot;to_screen&quot;이 모두 True로 설정되면 출력이 모두 외부 파일에 저장되고 화면에 인쇄됩니다. 둘 다 False로 설정하면 아무 일도 일어나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="43b5c8366fb965b72513e68e8c03454d7c054fec" translate="yes" xml:space="preserve">
          <source>If you set save_config = False, the configuration is not saved to NVRAM (the configuration may be lost across reboot, if autosave is disabled on the device).</source>
          <target state="translated">save_config = False로 설정하면 구성이 NVRAM에 저장되지 않습니다 (장치에서 자동 저장이 비활성화 된 경우 재부팅시 구성이 손실 될 수 있음).</target>
        </trans-unit>
        <trans-unit id="275129f3edaf3111f65fe03c36e74b7d750a57c7" translate="yes" xml:space="preserve">
          <source>If you set save_config = True, the configuration is saved to NVRAM.</source>
          <target state="translated">save_config = True로 설정하면 구성이 NVRAM에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="1bae26d671c5d2247975578d7b2d972595a94e76" translate="yes" xml:space="preserve">
          <source>If you set to_file = False, the output is not saved to a file.</source>
          <target state="translated">to_file = False로 설정하면 출력이 파일에 저장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="16924873f560c1b6205cd517a04b63a41464acaa" translate="yes" xml:space="preserve">
          <source>If you set to_file = True, then the output of the &amp;ldquo;show&amp;rdquo; command is stored inside a file in the current directory, which is going to be automatically named following this format: Hostname_Command.txt. This is useful when querying multiple devices, one by one.</source>
          <target state="translated">to_file = True로 설정하면 &quot;show&quot;명령의 출력이 현재 디렉토리의 파일에 저장되며 Hostname_Command.txt 형식에 따라 자동으로 이름이 지정됩니다. 이것은 여러 장치를 하나씩 쿼리 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="342430b11a9e4ef1296982287f6c23c3dc407109" translate="yes" xml:space="preserve">
          <source>Incorrect device IP address, username or password are used</source>
          <target state="translated">잘못된 장치 IP 주소, 사용자 이름 또는 암호가 사용되었습니다.</target>
        </trans-unit>
        <trans-unit id="ea14f6db66957ba280fdc5bca619dbac7bcf6b68" translate="yes" xml:space="preserve">
          <source>Incorrect device IP addresses, username or password are used</source>
          <target state="translated">잘못된 장치 IP 주소, 사용자 이름 또는 암호가 사용되었습니다.</target>
        </trans-unit>
        <trans-unit id="bfb241b0f4ba2f1300f31bc4c30c4d3976bb2881" translate="yes" xml:space="preserve">
          <source>Invalid commands are sent to the device</source>
          <target state="translated">잘못된 명령이 장치로 전송되었습니다.</target>
        </trans-unit>
        <trans-unit id="30fcd5e459ef689dec9ce93dda6b27a9be83c97b" translate="yes" xml:space="preserve">
          <source>Invalid filename or inexistent file containing the commands</source>
          <target state="translated">잘못된 파일 이름 또는 명령을 포함하는 존재하지 않는 파일</target>
        </trans-unit>
        <trans-unit id="c106e87fc20c51795bdb9f7846b3fbb54e484c97" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s consider three Avaya ERS 35xx switches [IPs: 10.105.62.23, 10.105.62.24, 10.105.62.25]:</source>
          <target state="translated">Avaya ERS 35xx 스위치 3 개 [IP : 10.105.62.23, 10.105.62.24, 10.105.62.25]를 고려해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c9eb2ab7cfefe888a7307617ad928c9152a4aa48" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create the files we need: one holding the IP addresses and one holding the commands.</source>
          <target state="translated">필요한 파일을 만들어 보겠습니다. 하나는 IP 주소를 보유하고 다른 하나는 명령을 보유하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5402d74c71100a4d7aec44eaf9d66628f5103bd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s run the function in the Python interpreter.</source>
          <target state="translated">Python 인터프리터에서 함수를 실행 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="f5bf8cbac46345e95149af579d67f00e23437a26" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s verify the configuration on the three switches - vlans 77, 88, 99 should have been configured.</source>
          <target state="translated">3 개의 스위치 (vlan 77, 88, 99가 구성되어 있어야 함)의 구성을 확인하겠습니다.</target>
        </trans-unit>
        <trans-unit id="71628ecd55e7687913332464512489e9dea19e91" translate="yes" xml:space="preserve">
          <source>Main features and requirements for ReadConfig():</source>
          <target state="translated">ReadConfig ()의 주요 기능 및 요구 사항 :</target>
        </trans-unit>
        <trans-unit id="d8e2f052f2ed7baf2e78b966d0e191135994c62f" translate="yes" xml:space="preserve">
          <source>Main features and requirements for SendConfig():</source>
          <target state="translated">SendConfig ()의 주요 기능 및 요구 사항 :</target>
        </trans-unit>
        <trans-unit id="7b9285df3a471262ce5e4ef52d93422a4725b0e0" translate="yes" xml:space="preserve">
          <source>Main features and requirements for SendConfigToMultiDev():</source>
          <target state="translated">SendConfigToMultiDev ()의 주요 기능 및 요구 사항 :</target>
        </trans-unit>
        <trans-unit id="34709b4f169203b2a8c1f1c5134db5957f9664b0" translate="yes" xml:space="preserve">
          <source>Mandatory: Telnet connectivity should be enabled on each device, using the &amp;ldquo;cli password telnet local&amp;rdquo; command, in the Global Configuration mode. Default Avaya credentials for read and write via Telnet are: username: RW , password: securepasswd</source>
          <target state="translated">필수 : 전역 구성 모드에서 &quot;cli password telnet local&quot;명령을 사용하여 각 장치에서 텔넷 연결을 활성화해야합니다. Telnet을 통한 읽기 및 쓰기를위한 기본 Avaya 자격 증명은 다음과 같습니다. 사용자 이름 : RW, 암호 : securepasswd</target>
        </trans-unit>
        <trans-unit id="ac9b4c38cf6597875f52db8d0496f91d2553560f" translate="yes" xml:space="preserve">
          <source>Note: Other functions in the AvayaERSConnect.py file take care of checking IP format validity, IP reachability and commands file path corectness. These functions are not to be used directly in the Python interpreter.</source>
          <target state="translated">참고 : AvayaERSConnect.py 파일의 다른 기능은 IP 형식 유효성, IP 도달 가능성 및 명령 파일 경로 상호 연관성을 확인합니다. 이러한 함수는 Python 인터프리터에서 직접 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c963524ac9bc1bc2d00dd07ff23b58a0f154eb9f" translate="yes" xml:space="preserve">
          <source>Note: Please follow the exact order of arguments (as shown above) when calling the function!</source>
          <target state="translated">참고 : 함수를 호출 할 때 정확한 인수 순서 (위에 표시된대로)를 따르십시오!</target>
        </trans-unit>
        <trans-unit id="0fdd2d1207227d96504ab9a5c737cb8827a65e02" translate="yes" xml:space="preserve">
          <source>Other necessary arguments are automatically picked up by calling the SendConfig() function from within the SaveConfigToMultiDev() function.</source>
          <target state="translated">다른 필요한 인수는 SaveConfigToMultiDev () 함수 내에서 SendConfig () 함수를 호출하여 자동으로 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="6cba28f48032a4c49019e6f8538a92417086255f" translate="yes" xml:space="preserve">
          <source>Output was written to SwitchOne_show_vlan.txt.</source>
          <target state="translated">출력은 SwitchOne_show_vlan.txt에 기록되었습니다.</target>
        </trans-unit>
        <trans-unit id="2ba070b23126e56d4ce1ef881dedf93e7366ad70" translate="yes" xml:space="preserve">
          <source>Port Members: 1/ALL,2/ALL</source>
          <target state="translated">포트 멤버 : 1 / ALL, 2 / ALL</target>
        </trans-unit>
        <trans-unit id="7d603fc6a4764c96058e9c3f57918238907d8389" translate="yes" xml:space="preserve">
          <source>Port Members: ALL</source>
          <target state="translated">포트 멤버 : ALL</target>
        </trans-unit>
        <trans-unit id="fe94763d2ad9074709fabef7a8bae5e483e76fb4" translate="yes" xml:space="preserve">
          <source>Port Members: NONE</source>
          <target state="translated">포트 회원 : 없음</target>
        </trans-unit>
        <trans-unit id="64650cadcce25e3a004a824fa1d76f32b31ae351" translate="yes" xml:space="preserve">
          <source>Prepend the function name with &amp;ldquo;AvayaERSConnect.&amp;rdquo; when calling it.</source>
          <target state="translated">함수 이름 앞에 &quot;AvayaERSConnect&quot;를 추가합니다. 그것을 부를 때.</target>
        </trans-unit>
        <trans-unit id="3f644c39bd64bb3ccdaec4191f762fb13f64b266" translate="yes" xml:space="preserve">
          <source>ReadConfig()</source>
          <target state="translated">ReadConfig ()</target>
        </trans-unit>
        <trans-unit id="8d3f785f0d54eba3b11a7817bfeb143866de7aed" translate="yes" xml:space="preserve">
          <source>ReadConfig(ip, username, password, show_command, to_file = True, to_screen = False)</source>
          <target state="translated">ReadConfig (ip, 사용자 이름, 암호, show_command, to_file = True, to_screen = False)</target>
        </trans-unit>
        <trans-unit id="6b02be04d707eb7a92e21103ee5a526966cf0a0f" translate="yes" xml:space="preserve">
          <source>Running it inside a Linux host / virtual machine is highly recommended.</source>
          <target state="translated">Linux 호스트 / 가상 머신 내에서 실행하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fe6bbc780b89eb46dee33174ccd1637395ac2254" translate="yes" xml:space="preserve">
          <source>Running it inside the Python interpreter, after importing it: import AvayaERSConnect</source>
          <target state="translated">가져온 후 Python 인터프리터 내에서 실행 : import AvayaERSConnect</target>
        </trans-unit>
        <trans-unit id="802599f15d6d24ddd79b45dcd9c48e9ce7fcb02c" translate="yes" xml:space="preserve">
          <source>Saving the configuration to NVRAM (configuration is kept across reboot, when autosave is disabled on the device) using the save_config argument:</source>
          <target state="translated">save_config 인수를 사용하여 NVRAM에 구성 저장 (장치에서 자동 저장이 비활성화 된 경우 재부팅시 구성이 유지됨) :</target>
        </trans-unit>
        <trans-unit id="fd0678a724fba4da82fad172d4fe74dd97f1e8f9" translate="yes" xml:space="preserve">
          <source>SendConfig()</source>
          <target state="translated">SendConfig ()</target>
        </trans-unit>
        <trans-unit id="ae16f8ca8acb1677c50cdb03885dfa3aa214392a" translate="yes" xml:space="preserve">
          <source>SendConfig(ip, cmd_file, username, password, save_config = True)</source>
          <target state="translated">SendConfig (ip, cmd_file, 사용자 이름, 암호, save_config = True)</target>
        </trans-unit>
        <trans-unit id="0721c65eee39abe76631f9b7b1c64f5f056c6668" translate="yes" xml:space="preserve">
          <source>SendConfigToMultiDev()</source>
          <target state="translated">SendConfigToMultiDev ()</target>
        </trans-unit>
        <trans-unit id="1a0d53b58f42577bb9fff27ba5a20f4d0ee961a8" translate="yes" xml:space="preserve">
          <source>SendConfigToMultiDev(username, password, save_config = True)</source>
          <target state="translated">SendConfigToMultiDev (사용자 이름, 암호, save_config = True)</target>
        </trans-unit>
        <trans-unit id="b874b4cf7481d19e1e855095eca0b8f36a0d333d" translate="yes" xml:space="preserve">
          <source>Supported Avaya ERS platforms:</source>
          <target state="translated">지원되는 Avaya ERS 플랫폼 :</target>
        </trans-unit>
        <trans-unit id="5bc8c528047b5111eeefee177e648d79b55ef2a3" translate="yes" xml:space="preserve">
          <source>SwitchOne(config)#cli password telnet local</source>
          <target state="translated">SwitchOne (config) #cli 암호 텔넷 로컬</target>
        </trans-unit>
        <trans-unit id="6c5f4b56dfc80373b7fdb918aa750d68c597e318" translate="yes" xml:space="preserve">
          <source>SwitchOne(config)#show vlan</source>
          <target state="translated">SwitchOne (config) #show vlan</target>
        </trans-unit>
        <trans-unit id="e614622dfa3eab8401c816a219b2df366f474d80" translate="yes" xml:space="preserve">
          <source>Telnet login timeout expires (connectivity / network lag / delay issues)</source>
          <target state="translated">Telnet 로그인 시간 초과가 만료 됨 (연결 / 네트워크 지연 / 지연 문제)</target>
        </trans-unit>
        <trans-unit id="05510ac4b238ed1d34a44c0765dfa544451d982c" translate="yes" xml:space="preserve">
          <source>Telnet login timeout expires (connectivity issue)</source>
          <target state="translated">Telnet 로그인 시간 초과가 만료 됨 (연결 문제)</target>
        </trans-unit>
        <trans-unit id="5f530572205954fc1abfc259d9cd733c8b43f6b1" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;save_config&amp;rdquo; argument can be set to either True or False.</source>
          <target state="translated">&quot;save_config&quot;인수는 True 또는 False로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa92d6afbe20b78a4b2eb67707e21ae8ceef49e8" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;to_file&amp;rdquo; argument can be set to either True or False.</source>
          <target state="translated">&quot;to_file&quot;인수는 True 또는 False로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eab223ca642de1afd2a97b9299fbaa7412bab05c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;to_screen&amp;rdquo; argument can be set to either True or False. When set to True, the command output is printed on the screen, in the Python interpreter.</source>
          <target state="translated">&quot;to_screen&quot;인수는 True 또는 False로 설정할 수 있습니다. True로 설정하면 명령 출력이 Python 인터프리터의 화면에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="e14b5178a00c303f53ef54bb69d16fa452f02274" translate="yes" xml:space="preserve">
          <source>The AvayaERSConnect Python module is build using Python 2.7.3, on top of the telnetlib library and it works with any version of Python &amp;gt;= 2.7.x. Other versions below 2.7.x were not tested.</source>
          <target state="translated">AvayaERSConnect Python 모듈은 telnetlib 라이브러리 위에 Python 2.7.3을 사용하여 빌드되며 모든 버전의 Python&amp;gt; = 2.7.x에서 작동합니다. 2.7.x 이하의 다른 버전은 테스트되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="d7b0e158d6ef45b8959eb5d643eb5c3ce2a2b3c4" translate="yes" xml:space="preserve">
          <source>The ReadConfig() function in AvayaERSConnect is responsible for connecting to an Avaya device via Telnet, sending a &amp;ldquo;show&amp;rdquo; command that the user specifies as an argument and capturing and storing the output of that command. This command should be invoked in the Python interpreter, after importing the AvayaERSConfig module.</source>
          <target state="translated">AvayaERSConnect의 ReadConfig () 함수는 Telnet을 통해 Avaya 장치에 연결하여 사용자가 인수로 지정한 &quot;show&quot;명령을 전송하고 해당 명령의 출력을 캡처 및 저장합니다. 이 명령은 AvayaERSConfig 모듈을 가져온 후 Python 인터프리터에서 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6e97cef9f1cad5a1c4a5b65964aafa4530385e8" translate="yes" xml:space="preserve">
          <source>The ReadConfig() function returns a customized error message and quits execution if:</source>
          <target state="translated">ReadConfig () 함수는 사용자 정의 된 오류 메시지를 반환하고 다음과 같은 경우 실행을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="3a30ab0cc79f4e88a16f859d1c17d24677209777" translate="yes" xml:space="preserve">
          <source>The SendConfig() function in AvayaERSConnect is responsible for connecting to an Avaya device via Telnet, sending configuration commands stored in an external text file, each specified one per line. In the function call, you can also specify whether you want the configuration you just made to be saved to the device&amp;rsquo;s NVRAM. This command should be invoked in the Python interpreter, after importing the AvayaERSConfig module.</source>
          <target state="translated">AvayaERSConnect의 SendConfig () 함수는 텔넷을 통해 Avaya 장치에 연결하여 각 줄에 하나씩 지정된 외부 텍스트 파일에 저장된 구성 명령을 전송합니다. 함수 호출에서 방금 만든 구성을 장치의 NVRAM에 저장할지 여부를 지정할 수도 있습니다. 이 명령은 AvayaERSConfig 모듈을 가져온 후 Python 인터프리터에서 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="79425b355734826c325c834dbcdad92ecc0f396f" translate="yes" xml:space="preserve">
          <source>The SendConfig() function returns a customized error message and quits execution if:</source>
          <target state="translated">SendConfig () 함수는 사용자 정의 된 오류 메시지를 반환하고 다음과 같은 경우 실행을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="40b8da05409fdac593465974f95e3684ab9d0355" translate="yes" xml:space="preserve">
          <source>The SendConfigToMultiDev() function in AvayaERSConnect is responsible for connecting to multiple Avaya devices simultaneously via Telnet, sending configuration commands stored in an external text file, specified one per line. In the function call, you can also specify whether you want the configuration you just made to be saved to the device&amp;rsquo;s NVRAM or not. This command should be invoked in the Python interpreter, after importing the AvayaERSConfig module.</source>
          <target state="translated">AvayaERSConnect의 SendConfigToMultiDev () 함수는 Telnet을 통해 여러 Avaya 장치에 동시에 연결하여 한 줄에 하나씩 지정된 외부 텍스트 파일에 저장된 구성 명령을 전송합니다. 함수 호출에서 방금 만든 구성을 장치의 NVRAM에 저장할지 여부를 지정할 수도 있습니다. 이 명령은 AvayaERSConfig 모듈을 가져온 후 Python 인터프리터에서 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="f6279a71caa9e435f7baf757c952764bb957d4c1" translate="yes" xml:space="preserve">
          <source>The SendConfigToMultiDev() function returns a customized error message and quits execution if:</source>
          <target state="translated">SendConfigToMultiDev () 함수는 사용자 정의 된 오류 메시지를 반환하고 다음과 같은 경우 실행을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="251a0ca586013f7ddc817b980c544c9b58f00807" translate="yes" xml:space="preserve">
          <source>The device IP address is unreachable</source>
          <target state="translated">장치 IP 주소에 연결할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bcdef7077f02f280eadd43830dd33d7a20c5fb9e" translate="yes" xml:space="preserve">
          <source>The first argument is the IP address of the device you want to read from, in between double quotes.</source>
          <target state="translated">첫 번째 인수는 큰 따옴표로 묶인 읽을 장치의 IP 주소입니다.</target>
        </trans-unit>
        <trans-unit id="8a31e910c69fa1ed49e42188c3548eed0ac35f56" translate="yes" xml:space="preserve">
          <source>The first argument is the IP address of the device you want to write commands to, in between double quotes.</source>
          <target state="translated">첫 번째 인수는 큰 따옴표로 묶인 명령을 쓰려는 장치의 IP 주소입니다.</target>
        </trans-unit>
        <trans-unit id="a33119d530b66f6c4aa545b5ed9456fe50fcfc18" translate="yes" xml:space="preserve">
          <source>The first argument is the Telnet username for logging into the device. This will be &amp;ldquo;RW&amp;rdquo; if you leave it at default. &amp;ldquo;cli password telnet local&amp;rdquo; should be configured on the device, prior to running the SendConfigToMultiDev() function.</source>
          <target state="translated">첫 번째 인수는 장치에 로그인하기위한 Telnet 사용자 이름입니다. 기본값으로두면 &quot;RW&quot;가됩니다. SendConfigToMultiDev () 함수를 실행하기 전에 장치에서 &quot;cli password telnet local&quot;을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="c64c1773b75a5a9790b2524dcb3134fd249a1ea6" translate="yes" xml:space="preserve">
          <source>The format:</source>
          <target state="translated">형식 :</target>
        </trans-unit>
        <trans-unit id="18cc19d06136bd23ca564a5ccf77b23b3984d1dc" translate="yes" xml:space="preserve">
          <source>The fourth argument is the &amp;ldquo;show&amp;rdquo; command you want to send to the device.</source>
          <target state="translated">네 번째 인수는 장치로 보내려는 &quot;show&quot;명령입니다.</target>
        </trans-unit>
        <trans-unit id="c3bcbd16c28ebe8b5b6eeb7ba2a0845732e95705" translate="yes" xml:space="preserve">
          <source>The fourth argument is the Telnet password for logging into the device. This will be &amp;ldquo;securepasswd&amp;rdquo; if you leave it at default. &amp;ldquo;cli password telnet local&amp;rdquo; should be configured on the device, prior to running the SendConfig() function.</source>
          <target state="translated">네 번째 인수는 장치에 로그인하기위한 Telnet 암호입니다. 기본값으로두면 &quot;securepasswd&quot;가됩니다. SendConfig () 함수를 실행하기 전에 장치에서 &quot;cli password telnet local&quot;을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="5213671e8472d6edeca91ce148a4c4ec9de1f052" translate="yes" xml:space="preserve">
          <source>The main prerequisites when using this module are:</source>
          <target state="translated">이 모듈을 사용할 때의 주요 전제 조건은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed5d3ca881734ea8b487d9341be00ed14ed82704" translate="yes" xml:space="preserve">
          <source>The official documentation of telnetlib is accessible here:</source>
          <target state="translated">telnetlib의 공식 문서는 여기에서 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03df92bb59477240230dcb660575753194016fa8" translate="yes" xml:space="preserve">
          <source>The second argument is the Telnet password for logging into the device. This will be &amp;ldquo;securepasswd&amp;rdquo; if you leave it at default. &amp;ldquo;cli password telnet local&amp;rdquo; should be configured on the device, prior to running the SendConfigToMultiDev() function.</source>
          <target state="translated">두 번째 인수는 장치에 로그인하기위한 Telnet 암호입니다. 기본값으로두면 &quot;securepasswd&quot;가됩니다. SendConfigToMultiDev () 함수를 실행하기 전에 장치에서 &quot;cli password telnet local&quot;을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="8fc9c6c1ba872874cbc02de7b6780140b792d269" translate="yes" xml:space="preserve">
          <source>The second argument is the Telnet username for logging into the device. This will be &amp;ldquo;RW&amp;rdquo; if you leave it at default. &amp;ldquo;cli password telnet local&amp;rdquo; should be configured on the device, prior to running the ReadConfig() function.</source>
          <target state="translated">두 번째 인수는 장치에 로그인하기위한 Telnet 사용자 이름입니다. 기본값으로두면 &quot;RW&quot;가됩니다. ReadConfig () 함수를 실행하기 전에 장치에 &quot;cli password telnet local&quot;을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="954809cb938a59d8a41bfc922f155d3516020b55" translate="yes" xml:space="preserve">
          <source>The second argument is the filename (+ extension) in which the configuration commands are stored, in between double quotes.</source>
          <target state="translated">두 번째 인수는 큰 따옴표 사이에 구성 명령이 저장되는 파일 이름 (+ 확장자)입니다.</target>
        </trans-unit>
        <trans-unit id="dead06fef68c0be791810c3174353b255406fd15" translate="yes" xml:space="preserve">
          <source>The third argument is the Telnet password for logging into the device. This will be &amp;ldquo;securepasswd&amp;rdquo; if you leave it at default. &amp;ldquo;cli password telnet local&amp;rdquo; should be configured on the device, prior to running the ReadConfig() function.</source>
          <target state="translated">세 번째 인수는 장치에 로그인하기위한 Telnet 암호입니다. 기본값으로두면 &quot;securepasswd&quot;가됩니다. ReadConfig () 함수를 실행하기 전에 장치에 &quot;cli password telnet local&quot;을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="0bc3b48a908bed03c8eed370d2b4fa91649e042f" translate="yes" xml:space="preserve">
          <source>The third argument is the Telnet username for logging into the device. This will be &amp;ldquo;RW&amp;rdquo; if you leave it at default. &amp;ldquo;cli password telnet local&amp;rdquo; should be configured on the device, prior to running the SendConfig() function.</source>
          <target state="translated">세 번째 인수는 장치에 로그인하기위한 Telnet 사용자 이름입니다. 기본값으로두면 &quot;RW&quot;가됩니다. SendConfig () 함수를 실행하기 전에 장치에서 &quot;cli password telnet local&quot;을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="b429355371b61119e7c05207ed6824776405bcad" translate="yes" xml:space="preserve">
          <source>The user types the Ctrl+C sequence</source>
          <target state="translated">사용자가 Ctrl + C 시퀀스를 입력합니다.</target>
        </trans-unit>
        <trans-unit id="41fc4a80c06c254fd0a14e96a20177fdd0a5132b" translate="yes" xml:space="preserve">
          <source>This function uses threading for initiating multiple concurrent sessions to multiple Avaya ERS IP addresses, specified inside an external, dedicated file.</source>
          <target state="translated">이 기능은 외부 전용 파일 내에 지정된 여러 Avaya ERS IP 주소에 대한 여러 동시 세션을 시작하기 위해 스레딩을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0626a524b1dcb2ccddb9b5aa00eabe9429aa92f7" translate="yes" xml:space="preserve">
          <source>Total VLANs: 1</source>
          <target state="translated">총 VLAN : 1</target>
        </trans-unit>
        <trans-unit id="3ccb465121ffaf01c2db86130459e52fcf97e52c" translate="yes" xml:space="preserve">
          <source>Total VLANs: 4</source>
          <target state="translated">총 VLAN : 4</target>
        </trans-unit>
        <trans-unit id="41a002668dca1f02e2e5fbd798adf13cdbeac846" translate="yes" xml:space="preserve">
          <source>Writing the output to a file using the to_file argument:</source>
          <target state="translated">to_file 인수를 사용하여 파일에 출력 쓰기 :</target>
        </trans-unit>
        <trans-unit id="71074ae02e6132804e4b11f0404da2aca3f2c411" translate="yes" xml:space="preserve">
          <source>root@kali-teo:/home# cat avayamulticmd.txt</source>
          <target state="translated">root @ kali-teo : / home # 고양이 avayamulticmd.txt</target>
        </trans-unit>
        <trans-unit id="ea70390943653d19c25b3d68242cca7e97358c49" translate="yes" xml:space="preserve">
          <source>root@kali:/home# cat SwitchOne_show_vlan.txt</source>
          <target state="translated">root @ kali : / home # cat SwitchOne_show_vlan.txt</target>
        </trans-unit>
        <trans-unit id="d8f95fc35374ebfca12931cdf55da159a8c57e36" translate="yes" xml:space="preserve">
          <source>root@kali:/home# cat avayamultiip.txt</source>
          <target state="translated">root @ kali : / home # 고양이 avayamultiip.txt</target>
        </trans-unit>
        <trans-unit id="1b323f1b851057fdca26bdc525defe7a03b5aa5d" translate="yes" xml:space="preserve">
          <source>root@kali:/home# cat avayatestcmd.txt</source>
          <target state="translated">root @ kali : / home # 고양이 avayatestcmd.txt</target>
        </trans-unit>
        <trans-unit id="6c52a2cb976706fd40e0144eaa07bda926ea0455" translate="yes" xml:space="preserve">
          <source>vlan create 100 type port</source>
          <target state="translated">vlan 100 유형 포트 생성</target>
        </trans-unit>
        <trans-unit id="9e8e8e5e7fea6fc53545887e29fe99334ecf52be" translate="yes" xml:space="preserve">
          <source>vlan create 101 type proto</source>
          <target state="translated">vlan은 101 유형 proto를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f12bb98fced812253ff2c88503490c93506b9f9e" translate="yes" xml:space="preserve">
          <source>vlan create 102 type port</source>
          <target state="translated">vlan은 102 유형 포트를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ff5abb4d38e0b0578855085aff2eec3a7c1467c2" translate="yes" xml:space="preserve">
          <source>vlan create 77 type port</source>
          <target state="translated">vlan 77 유형 포트 생성</target>
        </trans-unit>
        <trans-unit id="002d88cb5fb7fef5b0bf15a462b7b5763dbcd73d" translate="yes" xml:space="preserve">
          <source>vlan create 88 type port</source>
          <target state="translated">vlan 88 유형 포트 생성</target>
        </trans-unit>
        <trans-unit id="a9d064e349fdaf5d2b130d17ff8d2777a666ee8f" translate="yes" xml:space="preserve">
          <source>vlan create 99 type port</source>
          <target state="translated">vlan은 99 유형 포트를 만듭니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
