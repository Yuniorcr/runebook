<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/django-rest/">
    <body>
      <group id="django-rest">
        <trans-unit id="0a67d439e28b78ef6e9b6633dfb3e1f8923bb5c1" translate="yes" xml:space="preserve">
          <source>&amp;mdash; Made with :hearts: &amp;mdash;</source>
          <target state="translated">&amp;mdash; 제작 : 하트 : &amp;mdash;</target>
        </trans-unit>
        <trans-unit id="d6fe99aba923e8e1c35e0a2c0fc8cb274d07e1d5" translate="yes" xml:space="preserve">
          <source>1. Primitive types</source>
          <target state="translated">1. 기본 유형</target>
        </trans-unit>
        <trans-unit id="e34fa6dbda16cf676fb939d743c74cd5bc0e2de3" translate="yes" xml:space="preserve">
          <source>1. The &lt;code&gt;@api_view&lt;/code&gt; decorator</source>
          <target state="translated">1. &lt;code&gt;@api_view&lt;/code&gt; 데코레이터</target>
        </trans-unit>
        <trans-unit id="101311509cf1bdae0d1b6486462196c84f2f1cf0" translate="yes" xml:space="preserve">
          <source>1.1 Decorator arguments</source>
          <target state="translated">1.1 데코레이터 인수</target>
        </trans-unit>
        <trans-unit id="ca59443e3fe27cd3c524846b60104d68e08af973" translate="yes" xml:space="preserve">
          <source>1.2 Decorated view's arguments</source>
          <target state="translated">1.2 장식 된 뷰의 주장</target>
        </trans-unit>
        <trans-unit id="3bdf3862c75d80de9bcb899dade0f0631a6a57bd" translate="yes" xml:space="preserve">
          <source>1.3 How to decorate a view</source>
          <target state="translated">1.3 뷰를 장식하는 방법</target>
        </trans-unit>
        <trans-unit id="334b2ec94f60a93282f304656f0da6996dc2d89f" translate="yes" xml:space="preserve">
          <source>2. MethodField</source>
          <target state="translated">2. MethodField</target>
        </trans-unit>
        <trans-unit id="8add350f60b67abe5e6ab50966ead8b75c33adc7" translate="yes" xml:space="preserve">
          <source>2. View Permissions</source>
          <target state="translated">2. 권한보기</target>
        </trans-unit>
        <trans-unit id="6b4b48d4f9cef55dfe3f1822eac7ad1ede0bb54c" translate="yes" xml:space="preserve">
          <source>2.1 Introduction</source>
          <target state="translated">2.1 소개</target>
        </trans-unit>
        <trans-unit id="b6e9208739cc417c07cbadba87b541072d31a3f5" translate="yes" xml:space="preserve">
          <source>2.2 Available Permissions</source>
          <target state="translated">2.2 사용 가능한 권한</target>
        </trans-unit>
        <trans-unit id="eff17523552562051b93205dfb896011bf4549e2" translate="yes" xml:space="preserve">
          <source>2.3 Permissions Operators</source>
          <target state="translated">2.3 권한 운영자</target>
        </trans-unit>
        <trans-unit id="8328d598a01fdde90804eaf686f886b8d707eaf9" translate="yes" xml:space="preserve">
          <source>2.4 Implement your own permission</source>
          <target state="translated">2.4 자신의 권한 구현</target>
        </trans-unit>
        <trans-unit id="771007f0a84b5546c405f2c2f68613e7b990e697" translate="yes" xml:space="preserve">
          <source>3. ConstantField</source>
          <target state="translated">3. 상수 필드</target>
        </trans-unit>
        <trans-unit id="fda2147241f2d687df5f4abbf9bca201fbc52309" translate="yes" xml:space="preserve">
          <source>3. Deserializers</source>
          <target state="translated">3. 디시리얼라이저</target>
        </trans-unit>
        <trans-unit id="b0852d56d74de85c8d0711f0ffe05584a74da9ef" translate="yes" xml:space="preserve">
          <source>3.1. Introduction</source>
          <target state="translated">3.1. 소개</target>
        </trans-unit>
        <trans-unit id="a048df5ce6e85899168ca7c3bb301036cf43c81f" translate="yes" xml:space="preserve">
          <source>3.2. Implement a new Deserializer</source>
          <target state="translated">3.2. 새로운 Deserializer 구현</target>
        </trans-unit>
        <trans-unit id="87e25c6d2a270460bc6e6e0746fb95081db92a8b" translate="yes" xml:space="preserve">
          <source>3.3. Available Deserializer Fields</source>
          <target state="translated">3.3. 사용 가능한 Deserializer 필드</target>
        </trans-unit>
        <trans-unit id="ee70f77d9cac1ac2206e8b7d4f242c131d70af35" translate="yes" xml:space="preserve">
          <source>3.4 Nested Deserializers</source>
          <target state="translated">3.4 중첩 디시리얼라이저</target>
        </trans-unit>
        <trans-unit id="3104eabd166f3e101cdc6525cdedd65a795ec027" translate="yes" xml:space="preserve">
          <source>3.5. Post-clean methods</source>
          <target state="translated">3.5. 세척 후 방법</target>
        </trans-unit>
        <trans-unit id="8bffabd3017fab92f0d9e626009be88bc578f73e" translate="yes" xml:space="preserve">
          <source>3.6 All-pass Deserializer</source>
          <target state="translated">3.6 올 패스 디시리얼라이저</target>
        </trans-unit>
        <trans-unit id="16d66f8d91b7996ae35b8a8716b58e59d4d7a358" translate="yes" xml:space="preserve">
          <source>4. ListField</source>
          <target state="translated">4. ListField</target>
        </trans-unit>
        <trans-unit id="cdefe2771d42b667cd9decfd59a4b01095616bf1" translate="yes" xml:space="preserve">
          <source>4. Serializers</source>
          <target state="translated">4. 시리얼 라이저</target>
        </trans-unit>
        <trans-unit id="970e40baf04de6c238243f22eaaa1652e1a34bd6" translate="yes" xml:space="preserve">
          <source>4.1. Introduction</source>
          <target state="translated">4.1. 소개</target>
        </trans-unit>
        <trans-unit id="c7c2d2263a57b5220a3c0f7ccbb644e1193bb23e" translate="yes" xml:space="preserve">
          <source>4.2. Implement a new Serializer</source>
          <target state="translated">4.2. 새 직렬 변환기 구현</target>
        </trans-unit>
        <trans-unit id="70063e3d3c96b580445e856226d6121439a98638" translate="yes" xml:space="preserve">
          <source>4.3. Available Serializer Fields</source>
          <target state="translated">4.3. 사용 가능한 직렬 변환기 필드</target>
        </trans-unit>
        <trans-unit id="98ebbaa8099e857dc04b261ff7845b1500619bcb" translate="yes" xml:space="preserve">
          <source>4.4. Nested Serializers</source>
          <target state="translated">4.4. 중첩 직렬 변환기</target>
        </trans-unit>
        <trans-unit id="a55df348e4213788ce89543b8afd914503b3f783" translate="yes" xml:space="preserve">
          <source>4.5. DictSerializer</source>
          <target state="translated">4.5. DictSerializer</target>
        </trans-unit>
        <trans-unit id="c51c71e9a34df0ef008eadb0a22b9d72bb9ff936" translate="yes" xml:space="preserve">
          <source>5. Exceptions</source>
          <target state="translated">5. 예외</target>
        </trans-unit>
        <trans-unit id="65ead6c25889988c5de7a42a692c25bec2213c3e" translate="yes" xml:space="preserve">
          <source>5.1. &lt;code&gt;@api_view&lt;/code&gt; exceptions catching</source>
          <target state="translated">5.1. &lt;code&gt;@api_view&lt;/code&gt; 예외 잡기</target>
        </trans-unit>
        <trans-unit id="c18a7532fd6b3ba17fcc7df04ed0e5c155d5d79f" translate="yes" xml:space="preserve">
          <source>5.2. Existing API Exceptions</source>
          <target state="translated">5.2. 기존 API 예외</target>
        </trans-unit>
        <trans-unit id="570dd98701c039ef416c53bf223fa03158b00252" translate="yes" xml:space="preserve">
          <source>5.3. Define your own API Exception</source>
          <target state="translated">5.3. 고유 한 API 예외 정의</target>
        </trans-unit>
        <trans-unit id="0cb37d5bfa34fcbe3b6c21945d8e6ee67719cdc3" translate="yes" xml:space="preserve">
          <source>6. HTTP</source>
          <target state="translated">6. HTTP</target>
        </trans-unit>
        <trans-unit id="edc3975480d9fade43b2b61fafc5c0a389b8323f" translate="yes" xml:space="preserve">
          <source>6.1. HTTP Status codes</source>
          <target state="translated">6.1. HTTP 상태 코드</target>
        </trans-unit>
        <trans-unit id="240d3c55a9bcd80a2dd68281ee7f1ad10483d062" translate="yes" xml:space="preserve">
          <source>6.2. HTTP Methods</source>
          <target state="translated">6.2. HTTP 방법</target>
        </trans-unit>
        <trans-unit id="1990b618adfed03435ea1b5034ff9c0665959b82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ALL_METHODS&lt;/code&gt; = (&lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;, &lt;code&gt;TRACE&lt;/code&gt;, &lt;code&gt;CONNECT&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;ALL_METHODS&lt;/code&gt; = ( &lt;code&gt;HEAD&lt;/code&gt; , &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; , &lt;code&gt;PATCH&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; , &lt;code&gt;OPTIONS&lt;/code&gt; , &lt;code&gt;TRACE&lt;/code&gt; , &lt;code&gt;CONNECT&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="bab8b4ac253565a502cd3d05586fb8200907cd40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConstantField&lt;/code&gt; accepts 3 arguments:</source>
          <target state="translated">&lt;code&gt;ConstantField&lt;/code&gt; 는 3 개의 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="c1804c8850ff7788c36e30cb4ab8bc804975dbfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConstantField&lt;/code&gt; allows you to include constant data in your response, without
having to include that constant in your model. In the previous example,
&lt;code&gt;TAX_RATE&lt;/code&gt; was a constant. In case we wanted to include it in the serialized
data, we should had defined it as &lt;code&gt;PricingExample&lt;/code&gt; class/instance attribute, or
created a &lt;code&gt;MethodField&lt;/code&gt; that returns a constant. Both solutions are quite
&quot;painful&quot;. Using &lt;code&gt;ConstantField&lt;/code&gt;, the code will look like:</source>
          <target state="translated">&lt;code&gt;ConstantField&lt;/code&gt; 를 사용하면 모델에 상수를 포함하지 않고도 응답에 상수 데이터를 포함 할 수 있습니다. 이전 예에서 &lt;code&gt;TAX_RATE&lt;/code&gt; 는 상수였습니다. 직렬화 된 데이터에 포함 시키려면이를 &lt;code&gt;PricingExample&lt;/code&gt; 클래스 / 인스턴스 속성 으로 정의 했거나 상수를 반환하는 &lt;code&gt;MethodField&lt;/code&gt; 를 만들어야했습니다 . 두 솔루션 모두 상당히 &quot;고통 스럽습니다&quot;. &lt;code&gt;ConstantField&lt;/code&gt; 를 사용 하면 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4aaeee879688a391c978646c7a5ea7149e9928e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListField&lt;/code&gt; allows you to serialize iterables of primitives. Let's say your
object's attribute is a list of integers. With a simple &lt;code&gt;IntegerField&lt;/code&gt;, you
won't be able to serialize that field. It could be achieved with &lt;code&gt;MethodField&lt;/code&gt;,
but it will be too much written code for a trivial thing. &lt;code&gt;ListField&lt;/code&gt; does the
same thing as the &lt;code&gt;many=True&lt;/code&gt; for &lt;code&gt;Serializer&lt;/code&gt; class, but the &lt;code&gt;many&lt;/code&gt; argument
isn't implemented for &lt;code&gt;IntegerField&lt;/code&gt;, &lt;code&gt;BooleanField&lt;/code&gt;, &lt;code&gt;FloatField&lt;/code&gt; and
&lt;code&gt;CharField&lt;/code&gt; for performance purpose.
The &lt;code&gt;ListField&lt;/code&gt; accepts a single argument which is the field to be rendered as list.</source>
          <target state="translated">&lt;code&gt;ListField&lt;/code&gt; 를 사용하면 기본 요소의 이터 러블 을 직렬화 할 수 있습니다. 객체의 속성이 정수 목록이라고 가정 해 보겠습니다. 간단한 &lt;code&gt;IntegerField&lt;/code&gt; 를 사용하면 해당 필드를 직렬화 할 수 없습니다. &lt;code&gt;MethodField&lt;/code&gt; 를 사용 하여 달성 할 수 있지만 사소한 일에는 너무 많은 코드가 작성됩니다. &lt;code&gt;ListField&lt;/code&gt; 과 같은 일을 수행 &lt;code&gt;many=True&lt;/code&gt; 위한 &lt;code&gt;Serializer&lt;/code&gt; 클래스를하지만, &lt;code&gt;many&lt;/code&gt; 인수가 구현되지 &lt;code&gt;IntegerField&lt;/code&gt; , &lt;code&gt;BooleanField&lt;/code&gt; , &lt;code&gt;FloatField&lt;/code&gt; 및 &lt;code&gt;CharField&lt;/code&gt; 성능 목적. &lt;code&gt;ListField&lt;/code&gt; 목록으로 렌더링 될 필드 인 단일 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="3d0bb80630e321aed8cfeb6ff24f165a292ee4b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MethodField&lt;/code&gt; accepts 3 arguments:</source>
          <target state="translated">&lt;code&gt;MethodField&lt;/code&gt; 는 3 개의 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="52baecba618f0c428ed3a81ffcc88a11b916486f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SAFE_METHODS&lt;/code&gt; = (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;SAFE_METHODS&lt;/code&gt; = ( &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt; , &lt;code&gt;OPTIONS&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="eac1051375a994cbf01539100937c2ba1b5140a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SUPPORTING_PAYLOAD_METHODS&lt;/code&gt; = (&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;SUPPORTING_PAYLOAD_METHODS&lt;/code&gt; = ( &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; , &lt;code&gt;PATCH&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2e90a048e3b3327ec4a35559f760fd1315ff0313" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Serializer&lt;/code&gt; class accepts 2 arguments:</source>
          <target state="translated">&lt;code&gt;Serializer&lt;/code&gt; 클래스는 2 개의 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="97f1f21efe340f246a46aa8386680534e7640c3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AND operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;AND 연산자&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="616bfae44b0f50fcdf732bf1a3a9375907f38ed2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;AllowAny&lt;/strong&gt;:
By choosing this permission, your view will be public (all requests will have granted access). It's the default permission for &lt;code&gt;@api_view&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;strong&gt;AllowAny&lt;/strong&gt; :이 권한을 선택하면보기가 공개됩니다 (모든 요청에 ​​액세스 권한이 부여됨). &lt;code&gt;@api_view&lt;/code&gt; 데코레이터 의 기본 권한입니다 .</target>
        </trans-unit>
        <trans-unit id="3ddcb564e68d66285d11d091364433ccf641cd56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BadRequest&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;BadRequest&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="933123b68da2980000fb54fbeabf0cf5bce007c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Combining Operators&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;연산자 결합&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="19bb2121ca0fc42d7e400e2b1dd19cdc2ac5a940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important Note:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;중요 사항:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52e1aeb4cecbd7c0cb99fd6c70aff72f29940875" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important Note:&lt;/strong&gt; The post-clean methods are called &lt;strong&gt;only&lt;/strong&gt; if the field's standard
validation succeeds. If a &lt;code&gt;ValidationError&lt;/code&gt; occurs, the post-clean won't be
done.</source>
          <target state="translated">&lt;strong&gt;중요 참고 :&lt;/strong&gt; 정리 후 메서드는 필드의 표준 유효성 검사가 성공한 경우 &lt;strong&gt;에만&lt;/strong&gt; 호출 &lt;strong&gt;됩니다&lt;/strong&gt; . 경우 &lt;code&gt;ValidationError&lt;/code&gt; 가 발생, 후 청소가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5412059496d4f4509844dea6db60987425ccca12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important Note:&lt;/strong&gt; You can enjoy &lt;strong&gt;every&lt;/strong&gt; feature available in django forms fields, such as
&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/validators/&quot;&gt;custom validators&lt;/a&gt; and
&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/#error-messages&quot;&gt;custom error messages&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;중요 참고 : &lt;/strong&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/validators/&quot;&gt;사용자 지정 유효성 검사기&lt;/a&gt; 및 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/#error-messages&quot;&gt;사용자 지정 오류 메시지&lt;/a&gt; 와 같은 django 양식 필드에서 사용할 수있는 &lt;strong&gt;모든&lt;/strong&gt; 기능을 즐길 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05df9c89026f5ac53cd2ac527d6a6bb988ecaba7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; The &lt;code&gt;MethodField&lt;/code&gt;'s method should return native Python
data-types (&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;) or (nested) &lt;code&gt;list&lt;/code&gt;/&lt;code&gt;dict&lt;/code&gt; of native types.</source>
          <target state="translated">&lt;strong&gt;중요 사항 : &lt;/strong&gt; &lt;code&gt;MethodField&lt;/code&gt; 의 방법은 기본 파이썬 데이터 유형 (반환해야 &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;None&lt;/code&gt; ) 또는 (중첩) &lt;code&gt;list&lt;/code&gt; / &lt;code&gt;dict&lt;/code&gt; 기본 유형을.</target>
        </trans-unit>
        <trans-unit id="37e492b675bf7e7698b038a79941226b9e1dad91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; The parameters are already casted into their target types (&lt;em&gt;in
the example above, &lt;code&gt;url_params['age']&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;, while &lt;code&gt;url_params['first_name']&lt;/code&gt; is &lt;code&gt;str&lt;/code&gt;&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt;중요 참고 :&lt;/strong&gt; 매개 변수는 이미 대상 유형으로 캐스트됩니다 ( &lt;em&gt;위의 예에서 &lt;code&gt;url_params['age']&lt;/code&gt; 는 &lt;code&gt;int&lt;/code&gt; 이고 &lt;code&gt;url_params['first_name']&lt;/code&gt; 은 &lt;code&gt;str&lt;/code&gt; &lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="eabbc920fba92543f22f57548c5af44d42a42f4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; Unlike &lt;code&gt;url_params&lt;/code&gt;, for query parameters, the values are &lt;strong&gt;ALWAYS&lt;/strong&gt; strings (&lt;code&gt;str&lt;/code&gt;), and
they should be casted manually.</source>
          <target state="translated">&lt;strong&gt;중요 참고 : &lt;/strong&gt; &lt;code&gt;url_params&lt;/code&gt; 와 달리 쿼리 매개 변수의 경우 값은 &lt;strong&gt;항상&lt;/strong&gt; 문자열 ( &lt;code&gt;str&lt;/code&gt; )이며 수동으로 캐스팅해야합니다.</target>
        </trans-unit>
        <trans-unit id="916d2e194528d88776b0e4e108b17f679cead6d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;InternalServerError&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;InternalServerError&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="59ef662e427df548d312b46a5966af7662598fda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAdminUser&lt;/strong&gt;:
Admins are the only users who can access the decorated view. An admin is a &lt;code&gt;User&lt;/code&gt; object having &lt;code&gt;is_superuser&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;IsAdminUser&lt;/strong&gt; : 관리자는 데코 레이팅 된보기에 액세스 할 수있는 유일한 사용자입니다. 관리자는 &lt;code&gt;is_superuser&lt;/code&gt; 속성이 &lt;code&gt;True&lt;/code&gt; 로 설정된 &lt;code&gt;User&lt;/code&gt; 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="5e29c62cfda2ea9ceaa7832720e283bb85f356ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAuthenticated&lt;/strong&gt;:
Allows only authenticated users to access your view. Anonymous users (&lt;em&gt;i.e.&lt;/em&gt; not authenticated) receive a &lt;code&gt;403 Forbidden access&lt;/code&gt; response.</source>
          <target state="translated">&lt;strong&gt;IsAuthenticated&lt;/strong&gt; : 인증 된 사용자 &lt;strong&gt;만보기&lt;/strong&gt; 에 액세스 할 수 있습니다. 익명 사용자 ( &lt;em&gt;즉,&lt;/em&gt; 인증되지 않음)는 &lt;code&gt;403 Forbidden access&lt;/code&gt; 응답을받습니다.</target>
        </trans-unit>
        <trans-unit id="b00fa8246428361aeff9ad0e29520921c7e1fc03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsAuthenticatedOrReadOnly&lt;/strong&gt;:
This permission allows Authenticated users to use all HTTP methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;), and anonymous users to use safe methods only (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;IsAuthenticatedOrReadOnly&lt;/strong&gt; :이 권한은 인증 된 사용자가 모든 HTTP 방법 (사용할 수 있습니다 &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; , &lt;em&gt;등&lt;/em&gt; 안전한 방법 전용 (사용) 및 익명 사용자를 &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt; 및 &lt;code&gt;OPTIONS&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="1c25f6f2418b8e6ad939630db6301152d0c00b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsReadOnly&lt;/strong&gt;:
Only HTTP safe methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;) are allowed. For a &lt;code&gt;POST&lt;/code&gt; request for example, the user receives a &lt;code&gt;403 Forbidden access&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;IsReadOnly&lt;/strong&gt; : HTTP 안전 메서드 ( &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt; 및 &lt;code&gt;OPTIONS&lt;/code&gt; ) 만 허용됩니다. 예 를 들어 &lt;code&gt;POST&lt;/code&gt; 요청의 경우 사용자는 &lt;code&gt;403 Forbidden access&lt;/code&gt; 를 받습니다 .</target>
        </trans-unit>
        <trans-unit id="c8995ab11b644366b8209113c500367bfa40c1fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IsStaffUser&lt;/strong&gt;:
The view can be accessed by staff users only. A staff user is a &lt;code&gt;User&lt;/code&gt; object having &lt;code&gt;is_staff&lt;/code&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;IsStaffUser&lt;/strong&gt; : 직원 사용자 &lt;strong&gt;만보기에&lt;/strong&gt; 액세스 할 수 있습니다. 직원 사용자는 &lt;code&gt;is_staff&lt;/code&gt; 속성이 &lt;code&gt;True&lt;/code&gt; 로 설정된 &lt;code&gt;User&lt;/code&gt; 개체 입니다.</target>
        </trans-unit>
        <trans-unit id="d46b74ded969e9d17e713b2eaaac076a7ed0e11c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;MethodNotAllowed&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;MethodNotAllowed&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="bd3c219888d158e3c359cdc411660356935659c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOT operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;NOT 연산자&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="7aed4059a5de59398f73f32c9045e9bbfd26fd4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NotAuthenticated&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;인증되지 않음&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="4bacdeb514307234a3c9f3f47db1dd5943a34231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NotFound&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;찾을 수 없음&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="51c26cb7728cdcc9c0643d8e0fe42c739564cc7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;code&gt;@api_view()&lt;/code&gt; and &lt;code&gt;@api_view&lt;/code&gt; syntaxes are correct in case the decorator is used without arguments.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 두 &lt;code&gt;@api_view()&lt;/code&gt; 와 &lt;code&gt;@api_view&lt;/code&gt; 구문은 장식이 인수없이 사용되는 경우에 정확합니다.</target>
        </trans-unit>
        <trans-unit id="0c65c0b9223cf3341528db0109e9ef2380a6d5ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In case you want to ignore a argument (let's say &lt;code&gt;deserialized_data&lt;/code&gt;
for a &lt;code&gt;GET&lt;/code&gt; view), add &lt;code&gt;**kwargs&lt;/code&gt; argument to your view. Otherwise, you'll have
a arguments error.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 인수를 무시하려는 경우 ( &lt;code&gt;GET&lt;/code&gt; 뷰에 대해 &lt;code&gt;deserialized_data&lt;/code&gt; 라고 가정 해 보겠습니다 ) &lt;code&gt;**kwargs&lt;/code&gt; 인수를 뷰에 추가 합니다. 그렇지 않으면 인수 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bef281cd70e186db79f18d68f9cac0744743b0b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; In order to simplify the wording in this section, &quot;field&quot; word refers
to the serializer's field, and &quot;attribute&quot; word to an attribute of the object
to serialize.</source>
          <target state="translated">&lt;strong&gt;참고이&lt;/strong&gt; 섹션의 표현을 단순화하기 위해 &quot;field&quot;단어는 serializer의 필드를 나타내고 &quot;attribute&quot;단어는 직렬화 할 개체의 속성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="447cbadc7e31ff6fe78d763b89833fd28c97e25b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;&lt;code&gt;MethodField&lt;/code&gt; is very similar to a deserializer's post-clean method,
the only difference is that the post-clean receives the attribute's value,
while the &lt;code&gt;MethodField&lt;/code&gt; receives the whole object.</source>
          <target state="translated">&lt;strong&gt;참고 &lt;/strong&gt; &lt;code&gt;MethodField&lt;/code&gt; 는 deserializer의 post-clean 메서드와 매우 유사합니다. 유일한 차이점은 post-clean은 속성의 값을 받는 반면 &lt;code&gt;MethodField&lt;/code&gt; 는 전체 개체를 수신한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5fdd63238a5855b36a94bac7dae7ac618d517d16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;OR operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;OR 연산자&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="0e05c1df137dfbaa9b84d1acd55740d700694f2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PermissionDenied&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;PermissionDenied&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="ce62fe8d821606526611b30938820227c591b552" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ServiceUnavailable&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;서비스 불가&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="5ed4814738407d87db51e8bd3e2c378b3cdf947d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String constants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문자열 상수 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d042fccfe024ecdcf755cc2d8c25c6b8bbad5f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tuple constants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;튜플 상수 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="815b085202401ef5361992607ab9dc811255bbc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UnsupportedMediaType&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;UnsupportedMediaType&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="ba2a77b554d63e41573467f762955424c26c074b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XOR (&lt;em&gt;eXclusive OR&lt;/em&gt;) operator&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;XOR ( &lt;em&gt;eXclusive OR&lt;/em&gt; ) 연산자&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="2ca43aa6dbe3f0b7d00ea6e36a9da58eb7238f53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allow_forms&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;allow_forms&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="4d4f1ffecc49307c9e49c4c0b9ec8d4f79959770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allowed_methods&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;allowed_methods&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="f2d0229d98477c41b1a7186f8168b70ad5c86b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;attr_name&lt;/strong&gt;: It refers to the object's attribute that should be binded to the
current field. The default value is the field name. For example:</source>
          <target state="translated">&lt;strong&gt;attr_name&lt;/strong&gt; : 현재 필드에 바인딩되어야하는 개체의 속성을 나타냅니다. 기본값은 필드 이름입니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="efe314a1d11427e5af5c5f749a114b6c6977e0e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;call&lt;/strong&gt;: If set to &lt;code&gt;True&lt;/code&gt;, the serializer will try to execute (call)
your attribute. This is useful when the attribute referred-to is a method. Here is a quick example:</source>
          <target state="translated">&lt;strong&gt;call&lt;/strong&gt; : &lt;code&gt;True&lt;/code&gt; 로 설정 하면 serializer가 속성을 실행 (호출)하려고합니다. 참조 된 속성이 메소드 인 경우 유용합니다. 다음은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="2fd5d0c672abcd68aaf15e49124a915c176ca729" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;constant&lt;/strong&gt;: The constant to be included in the serialized object. The
constant &lt;strong&gt;should be&lt;/strong&gt; primitive (i.e. &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;
or combinations -&lt;code&gt;list&lt;/code&gt;/&lt;code&gt;dict&lt;/code&gt;- of them), otherwise &lt;code&gt;SerializationError&lt;/code&gt; will
be raised (unless &lt;code&gt;required&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, in that case, the field won't figure
in the rendered object).</source>
          <target state="translated">&lt;strong&gt;constant&lt;/strong&gt; : 직렬화 된 객체에 포함될 상수입니다. 상수가 &lt;strong&gt;되어야한다&lt;/strong&gt; (즉, 원시 &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; , &lt;code&gt;None&lt;/code&gt; - 또는 조합 &lt;code&gt;list&lt;/code&gt; / &lt;code&gt;dict&lt;/code&gt; - 중), 그렇지 않으면 &lt;code&gt;SerializationError&lt;/code&gt; 이 없는 한 (제기 될 &lt;code&gt;required&lt;/code&gt; 설정되어 &lt;code&gt;False&lt;/code&gt; 이 경우, 필드하지 않습니다 그림 렌더링 된 개체에서).</target>
        </trans-unit>
        <trans-unit id="985275611357e1fa156c6ee1122c828cfe1f3684" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deserialized_data&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;deserialized_data&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="8cb97e6149ad83c3929af54b65cfe277c8f2c772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deserializer_class&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;deserializer_class&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="41e9fec00ef1237bc92dfd93a5df88512d414e71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;instance&lt;/strong&gt;: The object (or iterable of objects) to be serialized.</source>
          <target state="translated">&lt;strong&gt;instance&lt;/strong&gt; : 직렬화 할 객체 (또는 객체의 이터 러블)입니다.</target>
        </trans-unit>
        <trans-unit id="910173855098f788334ba62192edf9a31e2adcb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;label&lt;/strong&gt;: It's the name you want to give to your field in the serialized object.
If omitted, it preserves the field's name. For the same &lt;code&gt;Example&lt;/code&gt; class defined above, let's use &lt;code&gt;label&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;strong&gt;label&lt;/strong&gt; : 직렬화 된 객체의 필드에 부여하려는 이름입니다. 생략하면 필드 이름이 유지됩니다. 위에서 정의한 동일한 &lt;code&gt;Example&lt;/code&gt; 클래스에 대해 &lt;code&gt;label&lt;/code&gt; 속성을 사용하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="5d5076fc23e234282698f1b233028b0149d089ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;label&lt;/strong&gt;: The same as &lt;a href=&quot;#1-primitive-types&quot;&gt;primitive fields&lt;/a&gt;&lt;code&gt;label&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;label&lt;/strong&gt; : &lt;a href=&quot;#1-primitive-types&quot;&gt;기본 필드 &lt;/a&gt; &lt;code&gt;label&lt;/code&gt; 과 동일 합니다 .</target>
        </trans-unit>
        <trans-unit id="47ac1ffd2c228450ea8c8666358ef8e3c181fd5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;many&lt;/strong&gt;: Boolean that tells the &lt;code&gt;Serializer&lt;/code&gt; if the object is iterable or not. If
&lt;code&gt;many=True&lt;/code&gt;, the serialized data will be a &lt;code&gt;list&lt;/code&gt; of serialized elements of
the &lt;code&gt;instance&lt;/code&gt; iterable. Its set by default to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;many&lt;/strong&gt; : 객체가 반복 가능한지 여부를 &lt;code&gt;Serializer&lt;/code&gt; 에 알려주는 부울입니다 . 경우 &lt;code&gt;many=True&lt;/code&gt; , 직렬화 된 데이터가 될 것입니다 &lt;code&gt;list&lt;/code&gt; 의 연재 요소의 &lt;code&gt;instance&lt;/code&gt; 반복 가능한. 기본적으로 &lt;code&gt;False&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="d63cde96d1ce1228d13d98ae2fc63c7c67ced295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method_name&lt;/strong&gt;: The name of the serializer's method that should be
called. The default value is &lt;code&gt;get_&amp;lt;Serializer's field name&amp;gt;&lt;/code&gt; (in the previous
example, if &lt;code&gt;method_name&lt;/code&gt; was not given, the method should have been renamed
&lt;code&gt;get_final_price(self, obj)&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;method_name&lt;/strong&gt; : 호출해야하는 serializer의 메서드 이름입니다. 기본값은 &lt;code&gt;get_&amp;lt;Serializer's field name&amp;gt;&lt;/code&gt; (이전 예에서 &lt;code&gt;method_name&lt;/code&gt; 이 지정되지 않은 경우 메서드의 이름이 &lt;code&gt;get_final_price(self, obj)&lt;/code&gt; 로 변경되어야 함 ).</target>
        </trans-unit>
        <trans-unit id="72d25fc4ee0733951b919a10d25594e5c6991a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;permission_class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;권한 _ 클래스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="651a9071e1cae20135e51f222015c128e24ad2e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;query_params&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;query_params&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="b9843d810eef90c106df43e0391cac851fe8794b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;request&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;요청&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="ef2375d2dfd2083de7370596fabb6a7874b8150a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;required&lt;/strong&gt;: The same as &lt;a href=&quot;#1-primitive-types&quot;&gt;primitive fields&lt;/a&gt;&lt;code&gt;label&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;필수&lt;/strong&gt; : &lt;a href=&quot;#1-primitive-types&quot;&gt;기본 필드 &lt;/a&gt; &lt;code&gt;label&lt;/code&gt; 과 동일 합니다 .</target>
        </trans-unit>
        <trans-unit id="61b203648375b00b79de2b62d24ae61ed3945bda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;required&lt;/strong&gt;: When set to &lt;code&gt;True&lt;/code&gt;, if the serializer fails to
retrieve the attribute's value, or to convert it into the target type, a &lt;code&gt;SerializationError&lt;/code&gt; will be raised.
If the fields isn't required (&lt;code&gt;required=False&lt;/code&gt;), in case the serializer fails to render the attribute's value,
the field won't be added to the final result. If we take the same &lt;code&gt;Example&lt;/code&gt; class from the previous examples:</source>
          <target state="translated">&lt;strong&gt;required&lt;/strong&gt; : &lt;code&gt;True&lt;/code&gt; 로 설정 하면 serializer가 속성 값을 검색하지 못하거나 대상 유형으로 변환하지 못하면 &lt;code&gt;SerializationError&lt;/code&gt; 가 발생합니다. 필드가 필요하지 않은 경우 ( &lt;code&gt;required=False&lt;/code&gt; ) 직렬 변환기가 속성 값을 렌더링하지 못하는 경우 필드가 최종 결과에 추가되지 않습니다. 이전 예제에서 동일한 &lt;code&gt;Example&lt;/code&gt; 클래스를 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="e96fd83f78baf59ac3a01e7ceaf4366dace69a7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url_params&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;url_params&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="57b749a1026b1d32a697878b9d1bbc54356cd111" translate="yes" xml:space="preserve">
          <source>@api_view exceptions catching</source>
          <target state="translated">@api_view 예외 잡기</target>
        </trans-unit>
        <trans-unit id="ceb605cd12b78e228235a6bebea665c93e4c754f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; response will be returned in case the user sends form
data to a view decorated with &lt;code&gt;allow_forms=False&lt;/code&gt;. The argument's default value is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;415 Unsupported Media Type&lt;/code&gt; 응답은 사용자가 장식보기로 폼 데이터를 전송하는 경우에 반환됩니다 &lt;code&gt;allow_forms=False&lt;/code&gt; . 인수의 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a8a995ab7bf45966b60d94bedc645031fc2b1b42" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DictSerializer&lt;/code&gt; is a sub-class of &lt;code&gt;Serializer&lt;/code&gt; (it means that it's
a particular serializer), that, instead of taking an object (class
instance) as input, it takes a &lt;code&gt;dict&lt;/code&gt;. The &lt;code&gt;DictSerializer&lt;/code&gt; transforms a &lt;code&gt;dict&lt;/code&gt;
into another &lt;code&gt;dict&lt;/code&gt;. It accepts the same fields as the classic serializer.
Here is the previous example, rewritten using &lt;code&gt;DictSerializer&lt;/code&gt; (to show the
difference):</source>
          <target state="translated">&lt;code&gt;DictSerializer&lt;/code&gt; 는 의 서브 클래스 &lt;code&gt;Serializer&lt;/code&gt; 그 대신 입력으로서 객체 (클래스의 인스턴스)를 가지고, 그것은이 소요 (그것이 특정 직렬화는 것을 의미) &lt;code&gt;dict&lt;/code&gt; . &lt;code&gt;DictSerializer&lt;/code&gt; 는 변환 &lt;code&gt;dict&lt;/code&gt; 다른 것으로 &lt;code&gt;dict&lt;/code&gt; . 클래식 직렬 변환기와 동일한 필드를 허용합니다. 다음은 &lt;code&gt;DictSerializer&lt;/code&gt; 를 사용하여 다시 작성한 이전 예제입니다 (차이점을 보여주기 위해).</target>
        </trans-unit>
        <trans-unit id="3b11a63fdb558dd1397e742588e92e0a9ccefb77" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;bool&lt;/code&gt; that allows/forbids payloads coming from forms (
&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; and &lt;code&gt;multipart/form-data&lt;/code&gt; content-types).</source>
          <target state="translated">양식 ( &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 및 &lt;code&gt;multipart/form-data&lt;/code&gt; 콘텐츠 유형) 에서 오는 페이로드를 허용 / 금지 하는 &lt;code&gt;bool&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="f45adeea272eeaaf1b7f89c9b0488af96f8fc73b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict&lt;/code&gt; containing all the query parameters encoded in the request's URL.
Let's request the previous example's view with the following URL:&lt;code&gt;/api/hello/foo/bar/25/?lang=fr&amp;amp;display=true&lt;/code&gt;:</source>
          <target state="translated">요청의 URL에 인코딩 된 모든 쿼리 매개 변수를 포함 하는 &lt;code&gt;dict&lt;/code&gt; 입니다. URL &lt;code&gt;/api/hello/foo/bar/25/?lang=fr&amp;amp;display=true&lt;/code&gt; 하여 이전 예제의보기를 요청하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="e2b8bfcfd732742b05da023f348253bc63f40248" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict&lt;/code&gt; containing the parameter defined in your view's
route (django router). For example, let's take a look to &lt;code&gt;url_params&lt;/code&gt; when requesting the URL &lt;code&gt;/api/hello/foo/bar/25/&lt;/code&gt; in the following example:</source>
          <target state="translated">뷰의 경로 (django 라우터)에 정의 된 매개 변수를 포함 하는 &lt;code&gt;dict&lt;/code&gt; . 예를 들어 다음 예제 에서 URL &lt;code&gt;/api/hello/foo/bar/25/&lt;/code&gt; 를 요청할 때 &lt;code&gt;url_params&lt;/code&gt; 를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="d520ea9cf5fbe68b71b9b7ef032921d334328d31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;dict&lt;/code&gt; with the data validated by the deserializer. For HTTP
methods without payload (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;), this argument's value is
&lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dict&lt;/code&gt; 디시리얼라이저 의해 검증 데이터와. (페이로드가없는 HTTP 메소드의 경우 &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;DELETE&lt;/code&gt; , &lt;em&gt;등&lt;/em&gt; )이 인수의 값은 없습니다 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d7662bd6e0b6912e27d863159c62ee2646358c5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;list&lt;/code&gt;/&lt;code&gt;tuple&lt;/code&gt; of HTTP allowed methods. Allowed methods should
be in uppercase strings (&lt;em&gt;ex.&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc.&lt;/em&gt;). You can also use some
predefined sets in &lt;code&gt;django_rest.http.methods&lt;/code&gt;. If no &lt;code&gt;allowed_methods&lt;/code&gt;
given, all HTTP methods will be allowed.</source>
          <target state="translated">HTTP 허용 메소드 의 &lt;code&gt;list&lt;/code&gt; / &lt;code&gt;tuple&lt;/code&gt; 입니다. 허용되는 메서드는 대문자 문자열 ( &lt;em&gt;예 : &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; 등&lt;/em&gt; ) 이어야합니다 . &lt;code&gt;django_rest.http.methods&lt;/code&gt; 에서 미리 정의 된 집합을 사용할 수도 있습니다 . &lt;code&gt;allowed_methods&lt;/code&gt; 가 제공 되지 않으면 모든 HTTP 메서드가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="f9620f39f3d0c8ec44c54e0d717ece6e117519d1" translate="yes" xml:space="preserve">
          <source>A class that defines who is allowed to access the
decorated view. If no &lt;code&gt;permission_class&lt;/code&gt; given, the decorator's default permission is
&lt;code&gt;AllowAny&lt;/code&gt; (your view is public).</source>
          <target state="translated">데코 레이팅 된 뷰에 액세스 할 수있는 사용자를 정의하는 클래스입니다. &lt;code&gt;permission_class&lt;/code&gt; 가 지정 되지 않은 경우 데코레이터의 기본 권한은 &lt;code&gt;AllowAny&lt;/code&gt; 입니다 (보기는 공개입니다).</target>
        </trans-unit>
        <trans-unit id="342586a827d2002bb7cee27c3c8be40ade16fdd9" translate="yes" xml:space="preserve">
          <source>A post-clean method is a deserializer's method, specific to a single &lt;code&gt;Field&lt;/code&gt; and
that will be called once the &quot;standard&quot; validation is done by the deserializer,
allowing you to handle this validated value more easily, then return the value
that will appear in the output data (that will be given to your view).
By convention, their name follows the pattern: &lt;code&gt;post_clean_&amp;lt;FIELD NAME&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">정리 후 메서드는 단일 &lt;code&gt;Field&lt;/code&gt; 특정한 deserializer의 메서드이며 deserializer가 &quot;표준&quot;유효성 검사를 수행하면 호출되어이 유효성 검사 된 값을보다 쉽게 ​​처리 한 다음 표시 될 값을 반환 할 수 있습니다. 출력 데이터 (보기에 제공됨). 규칙에 따라 이름은 &lt;code&gt;post_clean_&amp;lt;FIELD NAME&amp;gt;&lt;/code&gt; 패턴을 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="575797131c5480bfbe93d2552c32f5f53f79b09e" translate="yes" xml:space="preserve">
          <source>Admin users with all HTTP methods</source>
          <target state="translated">모든 HTTP 메서드를 사용하는 관리자</target>
        </trans-unit>
        <trans-unit id="349d9457bef62a1e0df0ea2f2c6dd8c4faea06f5" translate="yes" xml:space="preserve">
          <source>All the following HTTP method's related constants can be found in
&lt;code&gt;django_rest.http.methods&lt;/code&gt;:</source>
          <target state="translated">다음의 모든 HTTP 메서드 관련 상수는 &lt;code&gt;django_rest.http.methods&lt;/code&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="622ee6f2ee3ea0731f6ffbd54e8a594dadbb702f" translate="yes" xml:space="preserve">
          <source>All the permissions listed below could be imported from &lt;code&gt;django_rest.permissions&lt;/code&gt;</source>
          <target state="translated">아래 나열된 모든 권한은 &lt;code&gt;django_rest.permissions&lt;/code&gt; 에서 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a2bcb288e00105ab9a864a478e774fdfeb2b5b9" translate="yes" xml:space="preserve">
          <source>All-pass Deserializer</source>
          <target state="translated">올 패스 디시리얼라이저</target>
        </trans-unit>
        <trans-unit id="4b0d017a9abb122925b9918ef8d906ce8ed8e64a" translate="yes" xml:space="preserve">
          <source>As explained in the section before, for HTTP methods requiring
data, if no &lt;code&gt;deserializer_class&lt;/code&gt;'s been given to the decorator, &lt;code&gt;deserialized_data&lt;/code&gt;
will contain the raw payload's data (without any validation).</source>
          <target state="translated">마찬가지로 어떤 경우 데이터를 요구하는 방법, HTTP를 들어, 이전 섹션에서 설명 &lt;code&gt;deserializer_class&lt;/code&gt; 가 '데코레이터에 제공되지 S, &lt;code&gt;deserialized_data&lt;/code&gt; 은 (유효성 검사없이) 원시 페이로드의 데이터가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="397071cff6cdc083a04f91aa180f675c9c9725aa" translate="yes" xml:space="preserve">
          <source>As illustrated in the examples above, the &lt;code&gt;@api_view&lt;/code&gt; decorator alters the
decorated view's arguments. The decorator gathers, extracts and standardizes
different arguments, then passes them to your view, in order to facilitate their
use. Let's explain each argument:</source>
          <target state="translated">위의 예에서 설명한 것처럼 &lt;code&gt;@api_view&lt;/code&gt; 데코레이터는 데코 레이팅 된 뷰의 인수를 변경합니다. 데코레이터는 다양한 인수를 수집, 추출 및 표준화 한 다음 사용을 용이하게하기 위해 뷰에 전달합니다. 각 인수를 설명해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="7a7714aeb6ce5236b2d22c6a175ba08dbe357975" translate="yes" xml:space="preserve">
          <source>As seen in the previous chapter, django-REST provides you some custom exceptions that you can use (&lt;em&gt;i.e.&lt;/em&gt; raise) so that your view returns an error response,
without having to do it manually everytime. Here is the list of the available API exceptions , each with its returned object and status code:</source>
          <target state="translated">이전 장에서 볼 수 있듯이 django-REST는 매번 수동으로 수행 할 필요없이 뷰가 오류 응답을 반환하도록 사용할 수있는 몇 가지 사용자 지정 예외를 제공합니다 ( &lt;em&gt;예 :&lt;/em&gt; 발생). 다음은 각각 반환 된 객체 및 상태 코드와 함께 사용 가능한 API 예외 목록입니다.</target>
        </trans-unit>
        <trans-unit id="79ec626a9eccb00699f290e7afc45e2e02276e57" translate="yes" xml:space="preserve">
          <source>As shown in the example section, the &lt;code&gt;@api_view&lt;/code&gt; could be used with multiple
(optional) arguments:</source>
          <target state="translated">예제 섹션에 표시된 &lt;code&gt;@api_view&lt;/code&gt; 는 여러 (선택 사항) 인수와 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83dac886e1708e3687e878071f91f763ff6fa478" translate="yes" xml:space="preserve">
          <source>Available Deserializer Fields</source>
          <target state="translated">사용 가능한 Deserializer 필드</target>
        </trans-unit>
        <trans-unit id="2f20fb50969d8dfbbb8d62634e92a9e1ad49d012" translate="yes" xml:space="preserve">
          <source>Available Permissions</source>
          <target state="translated">사용 가능한 권한</target>
        </trans-unit>
        <trans-unit id="a6ce7c6ea3cab8ba64b3ae75232ffd163383c49b" translate="yes" xml:space="preserve">
          <source>Available Serializer Fields</source>
          <target state="translated">사용 가능한 직렬 변환기 필드</target>
        </trans-unit>
        <trans-unit id="714924d9a57669e99bfa17338027bad901a91dd7" translate="yes" xml:space="preserve">
          <source>Besides, you also have (in the same module &lt;code&gt;django_rest.http.status&lt;/code&gt;) 5 functions that you can use to verify
a status code category easily:</source>
          <target state="translated">게다가 (동일한 모듈 &lt;code&gt;django_rest.http.status&lt;/code&gt; ) 상태 코드 카테고리를 쉽게 확인하는 데 사용할 수있는 5 개의 함수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fcb269bfee78d44a06b26cd4ef94e12a2796bf7b" translate="yes" xml:space="preserve">
          <source>But, a deserializer class has no purpose without its fields. Let's define
a simple &lt;code&gt;Deserializer&lt;/code&gt; with 2 fields: a positive integer primary key (&lt;code&gt;pk&lt;/code&gt;),
and a &lt;code&gt;username&lt;/code&gt; (string).</source>
          <target state="translated">그러나 deserializer 클래스는 필드 없이는 목적이 없습니다. 양의 정수 기본 키 ( &lt;code&gt;pk&lt;/code&gt; ) 및 &lt;code&gt;username&lt;/code&gt; (문자열)의 2 개 필드 로 간단한 &lt;code&gt;Deserializer&lt;/code&gt; 를 정의 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="0ba5205c6d9a7394e3140c7ddfcc010e051c5a13" translate="yes" xml:space="preserve">
          <source>By nesting deserializers, errors are nested, and output data is a nested &lt;code&gt;dict&lt;/code&gt;
too. The following example illustrates how to nest deserializers:</source>
          <target state="translated">디시리얼라이저를 중첩하면 오류가 중첩되고 출력 데이터도 중첩 된 &lt;code&gt;dict&lt;/code&gt; 됩니다. 다음 예제는 deserializer를 중첩하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f2d5f4f8f1d30564bcf016c766d958cafd884491" translate="yes" xml:space="preserve">
          <source>By raising one of the &lt;a href=&quot;#52-existing-api-exceptions&quot;&gt;existing API exceptions&lt;/a&gt; (or
&lt;a href=&quot;#53-define-your-own-api-exception&quot;&gt;defining your own&lt;/a&gt;), the decorator will
return the response with the correct message (and status code). This approach
ensures that:</source>
          <target state="translated">&lt;a href=&quot;#52-existing-api-exceptions&quot;&gt;기존 API 예외&lt;/a&gt; 중 하나를 발생 (또는 &lt;a href=&quot;#53-define-your-own-api-exception&quot;&gt;자체 정의&lt;/a&gt; )하면 데코레이터는 올바른 메시지 (및 상태 코드)와 함께 응답을 반환합니다. 이 접근 방식은 다음을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="2ae0cd5ad92d3f07a1abb9f0916488af811a4f6d" translate="yes" xml:space="preserve">
          <source>Call the &lt;code&gt;.clean()&lt;/code&gt; method with the data to validate, it should return the
valid data, or raise a &lt;code&gt;ValidationError&lt;/code&gt; in case the input data is invalid.</source>
          <target state="translated">유효성을 검사 할 데이터와 함께 &lt;code&gt;.clean()&lt;/code&gt; 메서드를 호출하고 유효한 데이터를 반환하거나 입력 데이터가 유효하지 않은 경우 &lt;code&gt;ValidationError&lt;/code&gt; 를 발생 시켜야합니다 .</target>
        </trans-unit>
        <trans-unit id="d96d176c54c5ff026fea4c994777596845af7fa4" translate="yes" xml:space="preserve">
          <source>Check your data validity, by calling &lt;code&gt;.is_valid()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.is_valid()&lt;/code&gt; 메서드를 호출하여 데이터 유효성을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="3b27e5c08e2d8abc2c1dc955a94fd654acb21121" translate="yes" xml:space="preserve">
          <source>ConstantField</source>
          <target state="translated">ConstantField</target>
        </trans-unit>
        <trans-unit id="db2cb87d17cd5591e428c4ba011ca7892f686191" translate="yes" xml:space="preserve">
          <source>Could be either a sub-class of &lt;code&gt;Deserializer&lt;/code&gt; (as shown in the
previous example), or a &lt;code&gt;dict&lt;/code&gt; that maps HTTP methods that use payload (&lt;em&gt;i.e.&lt;/em&gt;&lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;
and &lt;code&gt;PATCH&lt;/code&gt;) to &lt;code&gt;Deserializer&lt;/code&gt; sub-classes, as the following:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;Deserializer&lt;/code&gt; 의 하위 클래스 (이전 예제에 표시된대로)이거나 페이로드 ( &lt;em&gt;예 : &lt;/em&gt; &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; 및 &lt;code&gt;PATCH&lt;/code&gt; )를 사용하는 HTTP 메서드 를 &lt;code&gt;Deserializer&lt;/code&gt; 하위 클래스에 매핑 하는 &lt;code&gt;dict&lt;/code&gt; 일 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="26afb35da6f62177e4b0e9abccc2859fafbe6eec" translate="yes" xml:space="preserve">
          <source>Decorate a function-based view. For example:</source>
          <target state="translated">기능 기반보기를 장식합니다. 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="866f66f21e7dd6770886d3e5ce07306cfdf27a52" translate="yes" xml:space="preserve">
          <source>Decorate a whole class-based view (should be a sub-class of &lt;code&gt;django.view.View&lt;/code&gt;). For example:</source>
          <target state="translated">전체 클래스 기반 뷰를 장식합니다 ( &lt;code&gt;django.view.View&lt;/code&gt; 의 하위 클래스 여야 함 ). 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="26ab6f35deb751ef4cfac302bc6d6aa3ff064bc1" translate="yes" xml:space="preserve">
          <source>Decorated view's arguments</source>
          <target state="translated">장식 된 뷰의 주장</target>
        </trans-unit>
        <trans-unit id="5e6cda99d8bf4e1d5fee07a46ad2277d9eee0736" translate="yes" xml:space="preserve">
          <source>Decorator argments</source>
          <target state="translated">데코레이터 인수</target>
        </trans-unit>
        <trans-unit id="6b821e6462e3bb88da2f1f2719569c1ec0e78158" translate="yes" xml:space="preserve">
          <source>Define your own API Exception</source>
          <target state="translated">고유 한 API 예외 정의</target>
        </trans-unit>
        <trans-unit id="9ff905d2bda3f17d7ab7ddaf4ecfb8660cb76ea8" translate="yes" xml:space="preserve">
          <source>Defining a new &lt;code&gt;Deserializer&lt;/code&gt; is quite simple. All you need to do is to inherit
from &lt;code&gt;Deserializer&lt;/code&gt; class:</source>
          <target state="translated">새로운 &lt;code&gt;Deserializer&lt;/code&gt; 를 정의하는 것은 매우 간단합니다. &lt;code&gt;Deserializer&lt;/code&gt; 클래스 에서 상속하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="e0af9d4c1bca1e2323fb1d2f7c454642a84b4de4" translate="yes" xml:space="preserve">
          <source>Deserializers</source>
          <target state="translated">디시리얼라이저</target>
        </trans-unit>
        <trans-unit id="0f3c41d986f00716a2834ddea66b4d669dd93f9e" translate="yes" xml:space="preserve">
          <source>DictSerializer</source>
          <target state="translated">DictSerializer</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="8bb583aa2f8601442adb30a18928537700d8a029" translate="yes" xml:space="preserve">
          <source>Even if combining standard permissions covers the most usual use-cases, you may have some unusual constrains that cannot be tackled using existing operators only.</source>
          <target state="translated">표준 권한 결합이 가장 일반적인 사용 사례를 다루더라도 기존 연산자만으로는 해결할 수없는 비정상적인 제약이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">예외</target>
        </trans-unit>
        <trans-unit id="96d610d7f05892922c182fe3041674f4600cb96b" translate="yes" xml:space="preserve">
          <source>Existing API Exceptions</source>
          <target state="translated">기존 API 예외</target>
        </trans-unit>
        <trans-unit id="b03e918b2eeed24e00a50e907923a8459a2f7d06" translate="yes" xml:space="preserve">
          <source>First, start a new django project:</source>
          <target state="translated">먼저 새 django 프로젝트를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="aa6f6b592d2f95de9e1f366f0fc21bacca8b927d" translate="yes" xml:space="preserve">
          <source>For class-based views, the decorator decorates all view's http methods
(&lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;post()&lt;/code&gt;, &lt;code&gt;put()&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;) and &lt;strong&gt;ONLY&lt;/strong&gt; them. In the example above, all http methods are restricted for staff-users only, but &lt;code&gt;other_method&lt;/code&gt; method hasn't been altered.</source>
          <target state="translated">클래스 기반 뷰를 들어, 장식 모든 뷰의 HTTP 메소드를 장식 ( &lt;code&gt;get()&lt;/code&gt; , &lt;code&gt;post()&lt;/code&gt; , &lt;code&gt;put()&lt;/code&gt; , &lt;em&gt;등&lt;/em&gt; ) 및 &lt;strong&gt;만&lt;/strong&gt; 그들. 위의 예에서 모든 http 메소드는 직원 사용자에 대해서만 제한되지만 &lt;code&gt;other_method&lt;/code&gt; 메소드는 변경되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8a6a7b0f84c315f6ce5a4527d2ced588bbc766bc" translate="yes" xml:space="preserve">
          <source>For example, if your deserializer defines a &lt;code&gt;foo&lt;/code&gt; field as a &lt;code&gt;CharField()&lt;/code&gt;, and
you want that your view receives a custom transformation of that &lt;code&gt;foo&lt;/code&gt; field (for example, let's
say: striping border spaces), the post-clean method for that field should be
named &lt;code&gt;post_clean_foo()&lt;/code&gt;:</source>
          <target state="translated">예를 들어 deserializer가 &lt;code&gt;foo&lt;/code&gt; 필드를 &lt;code&gt;CharField()&lt;/code&gt; 로 정의하고 뷰가 해당 &lt;code&gt;foo&lt;/code&gt; 필드 의 사용자 지정 변환 (예 : 스트라이핑 테두리 공백) 을 받으려면 해당 필드에 대한 사후 정리 메서드 &lt;code&gt;post_clean_foo()&lt;/code&gt; 이름을 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="edc8d57530e0ff92b767e02dc8430499924a24b3" translate="yes" xml:space="preserve">
          <source>For this example, let's implement a permission that grants access to:</source>
          <target state="translated">이 예에서는 다음에 대한 액세스 권한을 부여하는 권한을 구현해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="0d0e89ab8fb5de0b2f0ce37c01d8fe6ac1289b49" translate="yes" xml:space="preserve">
          <source>HTTP Methods</source>
          <target state="translated">HTTP 메소드</target>
        </trans-unit>
        <trans-unit id="843afb6a7d5b1f50643f4ddcbfd23e079f33c14a" translate="yes" xml:space="preserve">
          <source>HTTP Status codes</source>
          <target state="translated">HTTP 상태 코드</target>
        </trans-unit>
        <trans-unit id="9cf6473b13025d50d7f9153df312a23940124ab5" translate="yes" xml:space="preserve">
          <source>Here is a simple example of a view that receives &lt;code&gt;url_params&lt;/code&gt;, calls a &lt;code&gt;find_results()&lt;/code&gt; function, and returns a &lt;code&gt;404&lt;/code&gt; in case there is no result:</source>
          <target state="translated">다음은 &lt;code&gt;url_params&lt;/code&gt; 를 수신 하고 &lt;code&gt;find_results()&lt;/code&gt; 함수를 호출하며 결과가없는 경우 &lt;code&gt;404&lt;/code&gt; 를 반환하는 보기의 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="b28da82e7b12eb5210cc8b82b626763bf3272761" translate="yes" xml:space="preserve">
          <source>Here is a simple example that illustrates how &lt;code&gt;MethodField&lt;/code&gt; works:</source>
          <target state="translated">다음은 &lt;code&gt;MethodField&lt;/code&gt; 의 작동 방식을 보여주는 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="237c7dd58721730dec15f62269ac3f43e5558f3b" translate="yes" xml:space="preserve">
          <source>Here is a simple example that shows how to define a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409&quot;&gt;conflict&lt;/a&gt; exception:</source>
          <target state="translated">다음은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409&quot;&gt;충돌&lt;/a&gt; 예외 를 정의하는 방법을 보여주는 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="ea724b816190320574ae29c6484ba706b02e562b" translate="yes" xml:space="preserve">
          <source>Here is a simple example:</source>
          <target state="translated">다음은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="a7d0f0ace14c76bb531eb8490f33d16b3c35a71f" translate="yes" xml:space="preserve">
          <source>Here is the exhaustive list of http status constants provided by django-REST
(more details about status codes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&quot;&gt;here&lt;/a&gt;):</source>
          <target state="translated">다음은 django-REST에서 제공하는 http 상태 상수의 전체 목록입니다 (상태 코드에 대한 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&quot;&gt;여기&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8037948dd8dc82a49ccb2aaaa5c2c74e23f16c84" translate="yes" xml:space="preserve">
          <source>How to decorate a view</source>
          <target state="translated">보기를 장식하는 방법</target>
        </trans-unit>
        <trans-unit id="1757a133f40405e1a22e42dd181b33b78a6cb118" translate="yes" xml:space="preserve">
          <source>If the payload data doesn't respect the format defined in the deserializer,
a &lt;code&gt;400 Bad Request&lt;/code&gt; response will be returned.</source>
          <target state="translated">페이로드 데이터가 deserializer에 정의 된 형식을 따르지 않으면 &lt;code&gt;400 Bad Request&lt;/code&gt; 응답이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8f3d66938ce8863493b8e31706d8d55ce307d304" translate="yes" xml:space="preserve">
          <source>If the user requests the decorated view
with a non-allowed method, a &lt;code&gt;405 Method not allowed&lt;/code&gt; response will be
returned before executing your view's code.</source>
          <target state="translated">사용자가 허용되지 않는 메서드로 데코 레이팅 된 뷰를 요청하면 뷰의 코드를 실행하기 전에 &lt;code&gt;405 Method not allowed&lt;/code&gt; 응답이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="654fa5d928083958ae3394c2b58df13fa6ff5fb3" translate="yes" xml:space="preserve">
          <source>If we switched permissions order as the following:</source>
          <target state="translated">권한 순서를 다음과 같이 전환 한 경우 :</target>
        </trans-unit>
        <trans-unit id="b2de3ec475855d4200c2caaa94c0d82d0c4d4ac4" translate="yes" xml:space="preserve">
          <source>Implement your own permission</source>
          <target state="translated">자신의 권한 구현</target>
        </trans-unit>
        <trans-unit id="b99d8c6a31f8fc91fc90d0b80869ea59402f2a0a" translate="yes" xml:space="preserve">
          <source>Impmement a new Deserializer</source>
          <target state="translated">새로운 Deserializer 구현</target>
        </trans-unit>
        <trans-unit id="edd6835e4606af0821a9b78744ce4a4b1bb1f430" translate="yes" xml:space="preserve">
          <source>Impmement a new Serializer</source>
          <target state="translated">새로운 Serializer 구현</target>
        </trans-unit>
        <trans-unit id="34977fd0f8575a6dcb558cab5e1d9b40ab1600bd" translate="yes" xml:space="preserve">
          <source>In case the user isn't allowed to access the view,
a &lt;code&gt;403 Forbidden access&lt;/code&gt; response will be returned before even executing the
view's code. More details in &lt;a href=&quot;#2-view-permissions&quot;&gt;permissions section&lt;/a&gt;.</source>
          <target state="translated">사용자가 뷰에 액세스 할 수없는 경우 뷰의 코드를 실행하기 전에 &lt;code&gt;403 Forbidden access&lt;/code&gt; 응답이 반환됩니다. &lt;a href=&quot;#2-view-permissions&quot;&gt;권한 섹션에&lt;/a&gt; 자세한 내용이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9418098911e577457a16ac1964eb4dfc61cb1bb9" translate="yes" xml:space="preserve">
          <source>In django-REST, a deserializer validates input data (request payload and/or form data)
based on custom fields ans constrains defined in the deserializer class,
then &quot;translates&quot; data into the target format (Python primitive types), and finally
executes some post-validation methods (if defined).
In this chapter, we'll cover how to implement a simple deserializer, what are the
fields available for use, how to nest deserializers for more complex validation and to post-clean your data,
and finally, what the &lt;code&gt;AllPassDeserializer&lt;/code&gt; is.</source>
          <target state="translated">django-REST에서 deserializer는 deserializer 클래스에 정의 된 사용자 정의 필드 및 제약 조건을 기반으로 입력 데이터 (요청 페이로드 및 / 또는 양식 데이터)의 유효성을 검사 한 다음 데이터를 대상 형식 (Python 기본 유형)으로 &quot;변환&quot;하고 마지막으로 일부를 실행합니다. 사후 검증 방법 (정의 된 경우). 이 장에서는 간단한 deserializer를 구현하는 방법, 사용할 수있는 필드, 더 복잡한 유효성 검사를 위해 deserializer를 중첩하고 데이터를 사후 정리하는 방법, 마지막으로 &lt;code&gt;AllPassDeserializer&lt;/code&gt; 가 무엇인지 다룰 것 입니다.</target>
        </trans-unit>
        <trans-unit id="e127e2d09f91de53de52de36f73011a28d66e25f" translate="yes" xml:space="preserve">
          <source>In django-REST, all permissions inherit from &lt;code&gt;Permission&lt;/code&gt;, and passed as argument to the &lt;code&gt;@api_view&lt;/code&gt; decorator, as seen in
the previous examples.</source>
          <target state="translated">django-REST에서 모든 권한은 &lt;code&gt;Permission&lt;/code&gt; 에서 상속되며 이전 예제에서 볼 수 있듯이 &lt;code&gt;@api_view&lt;/code&gt; 데코레이터에 인수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="6fd6f85dfd4b01cd7ecc85f67ee9e792ad1b5b45" translate="yes" xml:space="preserve">
          <source>In order to define your own API Exception, all you have to do is inheriting from
&lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt; (or one of its sub-classes), then override its &lt;code&gt;STATUS_CODE&lt;/code&gt; and &lt;code&gt;RESPONSE_MESSAGE&lt;/code&gt; attributes.</source>
          <target state="translated">고유 한 API 예외를 정의하려면 &lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt; (또는 하위 클래스 중 하나) 에서 상속 한 다음 &lt;code&gt;STATUS_CODE&lt;/code&gt; 및 &lt;code&gt;RESPONSE_MESSAGE&lt;/code&gt; 속성 을 재정의하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="b908525f5d32667d8846ea4ac7661a407747c471" translate="yes" xml:space="preserve">
          <source>In order to test your endpoints, you can use &lt;a href=&quot;https://www.postman.com/&quot;&gt;PostMan&lt;/a&gt;, &lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt; or &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl&lt;/a&gt;.
I'll be using &lt;code&gt;httpie&lt;/code&gt; in the example:</source>
          <target state="translated">엔드 포인트를 테스트하기 위해 &lt;a href=&quot;https://www.postman.com/&quot;&gt;PostMan&lt;/a&gt; , &lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt; 또는 &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl을&lt;/a&gt; 사용할 수 있습니다 . 예제에서는 &lt;code&gt;httpie&lt;/code&gt; 를 사용 하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="3ed53e5707d26985b3cf3d15ece09faac2654e93" translate="yes" xml:space="preserve">
          <source>In the example above, in &lt;code&gt;HasGmailAddress&lt;/code&gt; code, we assumed that the user is
already authenticated, instead of manually checking it. That's because if the permission &lt;code&gt;IsAuthenticated&lt;/code&gt; isn't satisfied,
django-REST returns a &lt;code&gt;403 Forbidden access&lt;/code&gt; before even evaluating &lt;code&gt;HasGmailAddress&lt;/code&gt; permission.
That's why in &lt;code&gt;HasGmailAddress&lt;/code&gt; code, we assumed the user is authenticated.</source>
          <target state="translated">위의 예에서 &lt;code&gt;HasGmailAddress&lt;/code&gt; 코드에서 사용자가 수동으로 확인하는 대신 이미 인증 된 것으로 가정했습니다. &lt;code&gt;IsAuthenticated&lt;/code&gt; 권한 이 충족되지 않으면 django-REST가 &lt;code&gt;HasGmailAddress&lt;/code&gt; 권한을 평가하기 전에 &lt;code&gt;403 Forbidden access&lt;/code&gt; 를 반환 하기 때문 입니다. 이것이 &lt;code&gt;HasGmailAddress&lt;/code&gt; 코드에서 사용자가 인증되었다고 가정 한 이유입니다 .</target>
        </trans-unit>
        <trans-unit id="4bd34b714c47ba07442e6bc4ab76a071bacc2154" translate="yes" xml:space="preserve">
          <source>In the first case above, &lt;code&gt;MyDeserializerClass&lt;/code&gt; will be applied to: &lt;code&gt;POST&lt;/code&gt;,
&lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;PATCH&lt;/code&gt; methods. Also, note that in second case, the &lt;code&gt;deserializer_class&lt;/code&gt; mapping doesn't
define a deserializer for the &lt;code&gt;PATCH&lt;/code&gt; HTTP method. In this case,
the &quot;all-pass&quot; deserializer (&lt;em&gt;i.e.&lt;/em&gt; passes payload data to the view without any
validation) will be used. The same deserializer will be applied if no
&lt;code&gt;deserializer_class&lt;/code&gt; is given.</source>
          <target state="translated">위의 첫 번째 경우 &lt;code&gt;MyDeserializerClass&lt;/code&gt; 는 &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; 및 &lt;code&gt;PATCH&lt;/code&gt; 메서드에 적용됩니다 . 또한 두 번째 경우에는 &lt;code&gt;deserializer_class&lt;/code&gt; 매핑이 &lt;code&gt;PATCH&lt;/code&gt; HTTP 메서드에 대한 deserializer를 정의하지 않습니다 . 이 경우 &quot;all-pass&quot;deserializer ( &lt;em&gt;즉&lt;/em&gt; , 유효성 검사없이 페이로드 데이터를 뷰에 전달)가 사용됩니다. &lt;code&gt;deserializer_class&lt;/code&gt; 가 제공 되지 않으면 동일한 deserializer가 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c5c51e11e6aed83bb0ec70c1dcba624849b92eca" translate="yes" xml:space="preserve">
          <source>In this section, we will start by introducing the django-REST's provided
permissions, then how to build more complex permissions by combining the
existing ones, and finally, how to implement your own custom permission.</source>
          <target state="translated">이 섹션에서는 django-REST에서 제공하는 권한을 소개 한 다음 기존 권한을 결합하여 더 복잡한 권한을 구축하는 방법, 마지막으로 사용자 지정 권한을 구현하는 방법을 소개합니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="e0da246674293ee7df9ce1390adb2bcff6820e1c" translate="yes" xml:space="preserve">
          <source>Instantiate the deserializer class without arguments.</source>
          <target state="translated">인수없이 deserializer 클래스를 인스턴스화합니다.</target>
        </trans-unit>
        <trans-unit id="379ed8145e9dfabdba5fe78bf2e11f54fd99a289" translate="yes" xml:space="preserve">
          <source>Instantiate your deserializer class, passing &lt;code&gt;data&lt;/code&gt; argument to the
constructor.</source>
          <target state="translated">생성자에 &lt;code&gt;data&lt;/code&gt; 인수를 전달하여 deserializer 클래스를 인스턴스화합니다 .</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">소개</target>
        </trans-unit>
        <trans-unit id="c651c0527459e73980d3ad52c3edfa4807d663f6" translate="yes" xml:space="preserve">
          <source>It will be implemented as the following:</source>
          <target state="translated">다음과 같이 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="8e0f863b3feef582d8ab9849b4d8a9a0edb3a6a3" translate="yes" xml:space="preserve">
          <source>Let's consider a view that should be exposed to anonymous (&lt;em&gt;i.e.&lt;/em&gt; not
authenticated) users only. This view's permission will be defined as the following:</source>
          <target state="translated">익명 ( &lt;em&gt;즉,&lt;/em&gt; 인증되지 않은) 사용자에게만 노출되어야하는 뷰를 고려해 보겠습니다 . 이보기의 권한은 다음과 같이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="96887327f8f666ec50df04f02130437be5641d64" translate="yes" xml:space="preserve">
          <source>Let's create a new &lt;code&gt;IsAdminOrReadOnly&lt;/code&gt; permission granting access to:</source>
          <target state="translated">다음에 대한 액세스 권한을 부여 하는 새 &lt;code&gt;IsAdminOrReadOnly&lt;/code&gt; 권한을 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="b0da78b52a2a0ef641d76e4d571ce2304fc9c953" translate="yes" xml:space="preserve">
          <source>Let's create a new &lt;code&gt;IsStaffAndReadOnly&lt;/code&gt; permission that grants access to:</source>
          <target state="translated">다음에 대한 액세스 권한을 부여 하는 새 &lt;code&gt;IsStaffAndReadOnly&lt;/code&gt; 권한을 만들어 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="fd2141e8e3eb048b0968e320972b618e6bcc640d" translate="yes" xml:space="preserve">
          <source>Let's demonstrate those operators then their combinations in concrete examples:</source>
          <target state="translated">구체적인 예에서 해당 연산자와 그 조합을 보여 드리겠습니다.</target>
        </trans-unit>
        <trans-unit id="f1ff9eef0ce45d06246ca9b45f906fdac0836866" translate="yes" xml:space="preserve">
          <source>Let's get started by implementing the views in &lt;code&gt;./first_project/urls.py&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;./first_project/urls.py&lt;/code&gt; 에서 뷰를 구현하여 시작 하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="80ae4b28dfb9f0fab8302c59da63d4fc2b399fb5" translate="yes" xml:space="preserve">
          <source>Let's implement a custom permission that grants access to authenticated users
having &lt;code&gt;gmail&lt;/code&gt; address only. The &quot;authenticated users&quot; part will be taken care
of using the existing &lt;code&gt;IsAuthenticated&lt;/code&gt; permission.</source>
          <target state="translated">&lt;code&gt;gmail&lt;/code&gt; 주소 만있는 인증 된 사용자에게 액세스 권한을 부여하는 사용자 지정 권한을 구현해 보겠습니다 . &quot;인증 된 사용자&quot;부분은 기존 &lt;code&gt;IsAuthenticated&lt;/code&gt; 권한 을 사용하여 처리 됩니다.</target>
        </trans-unit>
        <trans-unit id="594d3d23342bafc556bbe721512d2259e8494b9a" translate="yes" xml:space="preserve">
          <source>Let's implement a quick public API endpoint that lists existing regular (&lt;em&gt;i.e.&lt;/em&gt; not staff) users:</source>
          <target state="translated">기존 일반 ( &lt;em&gt;즉,&lt;/em&gt; 직원이 아님) 사용자 를 나열하는 빠른 공개 API 엔드 포인트를 구현해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="c1596d84bca554057a4c353dd7c84e7b9d17ef6b" translate="yes" xml:space="preserve">
          <source>Let's re-implement the &lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt; used in the XOR example above, by using
multiple operators. Then, we'll re-use it (&lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt;) to implement a new
&lt;code&gt;IsStaffAndNotAdminUserOrReadOnly&lt;/code&gt;:</source>
          <target state="translated">여러 연산자를 사용하여 위의 XOR 예제에서 사용 된 &lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt; 를 다시 구현해 보겠습니다 . 그런 다음 새 &lt;code&gt;IsStaffAndNotAdminUserOrReadOnly&lt;/code&gt; 를 구현하기 위해 다시 사용 ( &lt;code&gt;IsStaffAndNotAdminUser&lt;/code&gt; )합니다 .</target>
        </trans-unit>
        <trans-unit id="dc0f9116c0ed8840cb05f3d2fc25a3fea1ab9b9e" translate="yes" xml:space="preserve">
          <source>ListField</source>
          <target state="translated">ListField</target>
        </trans-unit>
        <trans-unit id="b274ef72a565799d803633a15bead807ed56b2d5" translate="yes" xml:space="preserve">
          <source>MethodField</source>
          <target state="translated">MethodField</target>
        </trans-unit>
        <trans-unit id="3417f0f9cde6632ffb5b430911f95956fc9bdd31" translate="yes" xml:space="preserve">
          <source>Nested Deserializers</source>
          <target state="translated">중첩 된 Deserializer</target>
        </trans-unit>
        <trans-unit id="983db32ec03d260db1c1777fde1c8ae38726b2a7" translate="yes" xml:space="preserve">
          <source>Nested Serializers</source>
          <target state="translated">중첩 직렬 변환기</target>
        </trans-unit>
        <trans-unit id="8eea461a6b2888fb9ac308e66f8f03e1c241c1f8" translate="yes" xml:space="preserve">
          <source>Non-admin users with reading http methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;) only.</source>
          <target state="translated">http 메소드 ( &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt; 및 &lt;code&gt;OPTIONS&lt;/code&gt; ) 를 읽는 관리자가 아닌 사용자 만 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="60453f0bcd44a9cdf1ad57f483221ae6b70faab5" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;Deserializer&lt;/code&gt; is a field too, it can be used the exact same way you use a field (with the &lt;a href=&quot;https://docs.djangoproject.com/fr/3.0/ref/forms/fields/#core-field-arguments&quot;&gt;same arguments&lt;/a&gt;).</source>
          <target state="translated">&amp;bull; 그래도 참고 &lt;code&gt;Deserializer&lt;/code&gt; 너무 필드는, 그것은 당신이합니다 (있는 필드 사용하는 동일한 방식으로 사용할 수있는 &lt;a href=&quot;https://docs.djangoproject.com/fr/3.0/ref/forms/fields/#core-field-arguments&quot;&gt;동일한 인수를&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9fd2c752085b3421f096d4144be397f7de2b5b33" translate="yes" xml:space="preserve">
          <source>Note that this permission could be implemented differently (and in a more
correct and readable way). The use of XOR operator here is for demonstration purpose only.
The correct implementation is shown below in &quot;&lt;em&gt;5. Combining Operators&lt;/em&gt;&quot; example.</source>
          <target state="translated">이 권한은 다르게 구현 될 수 있으며 더 정확하고 읽기 쉬운 방식으로 구현 될 수 있습니다. 여기서 XOR 연산자는 데모 용으로 만 사용됩니다. 올바른 구현은 아래 &quot; &lt;em&gt;5. 연산자 결합&lt;/em&gt; &quot;예제에 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">개요</target>
        </trans-unit>
        <trans-unit id="62adffa246883fc5fd9249d92a33650601dff73d" translate="yes" xml:space="preserve">
          <source>Permissions Operators</source>
          <target state="translated">권한 운영자</target>
        </trans-unit>
        <trans-unit id="55047f2e224f7531bc7deef60c354019d2436bc1" translate="yes" xml:space="preserve">
          <source>Permissions is what determines whether a request should be granted or denied
access, for a particular view. The inspection process is done before executing
the decorated view's code, then, if the request satisfies the
permission's constraints, the access is granted. If not, a &lt;code&gt;403 Forbidden access&lt;/code&gt;
response is returned.</source>
          <target state="translated">권한은 특정보기에 대해 요청에 대한 액세스를 허용할지 거부할지 여부를 결정합니다. 검사 프로세스는 데코 레이팅 된 뷰의 코드를 실행하기 전에 수행되며 요청이 권한의 제약 조건을 충족하면 액세스가 허용됩니다. 그렇지 않은 경우 &lt;code&gt;403 Forbidden access&lt;/code&gt; 응답이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c9706a7f668f507761bc65c6b7c174ff136a6eae" translate="yes" xml:space="preserve">
          <source>Post-clean methods</source>
          <target state="translated">세척 후 방법</target>
        </trans-unit>
        <trans-unit id="c7969f1f2306323d21ee870b267eca96e3a3e899" translate="yes" xml:space="preserve">
          <source>Primitive types</source>
          <target state="translated">기본 유형</target>
        </trans-unit>
        <trans-unit id="9ef7997531b0ae969d7696de912d2dc860be2298" translate="yes" xml:space="preserve">
          <source>Put the clean call inside a &lt;code&gt;try/except&lt;/code&gt; clause to catch the validation errors.</source>
          <target state="translated">유효성 검사 오류를 잡기 위해 &lt;code&gt;try/except&lt;/code&gt; 절에 깨끗한 호출을 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="0050cd45550aca440b92b8da99fe4c2a2d3e1db1" translate="yes" xml:space="preserve">
          <source>Python version 2.7+ or 3.3+</source>
          <target state="translated">Python 버전 2.7+ 또는 3.3+</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">요구 사항</target>
        </trans-unit>
        <trans-unit id="be5a7a5ec7c4c9525ce526cb8161aadd505d4b5a" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;An unknown server error occured.&quot;&lt;/em&gt; - status code: &lt;code&gt;500&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;알 수없는 서버 오류가 발생했습니다.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;500&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fdd8bacfe8a93ad52a407fb6c6a6e5e8f206f130" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Bad request.&quot;&lt;/em&gt; - status code: &lt;code&gt;400&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;잘못된 요청입니다.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;400&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7528491e6a1e5a550952d68ea7507e9d839feb7e" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Forbidden operation. Make sure you have the right permissions.&quot;&lt;/em&gt; - status code: &lt;code&gt;403&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;금지 된 작업입니다. 올바른 권한이 있는지 확인하십시오.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;403&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3039f25c9479be3287b482e4bdd924b66f93430e" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;HTTP Method not allowed.&quot;&lt;/em&gt; - status code: &lt;code&gt;405&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;HTTP Method not allowed.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;405&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c5fa2521ddbd16793f66cd9d6da8a54edf7b90d" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;The requested resource is not found.&quot;&lt;/em&gt; - status code: &lt;code&gt;404&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;요청 된 리소스를 찾을 수 없습니다.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;404&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="161feccc589be89a47c2015f5840ac643b364791" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;The requested service is unavailable.&quot;&lt;/em&gt; - status code: &lt;code&gt;502&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;요청한 서비스를 사용할 수 없습니다.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;502&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec9c81695b0d09c5ec14fca35b0dfc3a2df5dafe" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Unauthorized operation. Maybe forgot the authentication step ?&quot;&lt;/em&gt; - status code: &lt;code&gt;401&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;인증되지 않은 작업입니다. 인증 단계를 잊었습니까?&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;401&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7891d62bbaf2d69b5e5049b24a2296136651855e" translate="yes" xml:space="preserve">
          <source>Response message: &lt;em&gt;&quot;Unsupported Media Type. Check your request's Content-Type.&quot;&lt;/em&gt; - status code: &lt;code&gt;415&lt;/code&gt;</source>
          <target state="translated">응답 메시지 : &lt;em&gt;&quot;Unsupported Media Type. Check your request 's Content-Type.&quot; &lt;/em&gt;-상태 코드 : &lt;code&gt;415&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ae8e55daa2bd29605a4ee191154750f051e02efe" translate="yes" xml:space="preserve">
          <source>Retrieve the validated data with &lt;code&gt;.data&lt;/code&gt; (or errors with &lt;code&gt;.errors&lt;/code&gt;)
attribute.</source>
          <target state="translated">&lt;code&gt;.data&lt;/code&gt; (또는 &lt;code&gt;.errors&lt;/code&gt; 오류 ) 속성으로 검증 된 데이터를 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="71796031218483adb9338df6ac1fe8ad1217e178" translate="yes" xml:space="preserve">
          <source>Serializers</source>
          <target state="translated">직렬 변환기</target>
        </trans-unit>
        <trans-unit id="b3bb5217c28b1d26e506757e01d5147849575a98" translate="yes" xml:space="preserve">
          <source>Serializers allow complex data such as querysets and model instances to be
converted into native Python data-types, so that they could be easily rendered
into JSON. Serializers do the opposite of Deserializers, and intervene at the
&quot;return&quot; statement of your view.</source>
          <target state="translated">직렬 변환기를 사용하면 쿼리 세트 및 모델 인스턴스와 같은 복잡한 데이터를 네이티브 Python 데이터 유형으로 변환 할 수 있으므로 JSON으로 쉽게 렌더링 할 수 있습니다. Serializer는 Deserializer와 반대로 수행하며 뷰의 &quot;return&quot;문에 개입합니다.</target>
        </trans-unit>
        <trans-unit id="6b81f2ec5c4de2ef9597e1d943195339f992a1c9" translate="yes" xml:space="preserve">
          <source>Serializers fields are very limited, because, remember that the data will be converted
into native Python data-types (that are limited too). Besides primitive fields (&lt;code&gt;CharField&lt;/code&gt;,
&lt;code&gt;IntegerField&lt;/code&gt;, &lt;code&gt;FloatField&lt;/code&gt;, &lt;code&gt;BooleanField&lt;/code&gt;), django-REST provides 3 additional
fields to use within &lt;code&gt;Serializers&lt;/code&gt;: &lt;code&gt;ListField&lt;/code&gt;, &lt;code&gt;ConstantField&lt;/code&gt; and &lt;code&gt;MethodField&lt;/code&gt; (and the nested
serializers). Let's dive into existing fields details.</source>
          <target state="translated">Serializers 필드는 매우 제한적입니다. 데이터가 네이티브 Python 데이터 유형으로 변환된다는 점을 기억하세요 (이 역시 제한됨). 원시 필드 (게다가 &lt;code&gt;CharField&lt;/code&gt; , &lt;code&gt;IntegerField&lt;/code&gt; , &lt;code&gt;FloatField&lt;/code&gt; , &lt;code&gt;BooleanField&lt;/code&gt; ), 장고 - REST는 내에서 사용하기에 3 개 추가 필드를 제공 &lt;code&gt;Serializers&lt;/code&gt; : &lt;code&gt;ListField&lt;/code&gt; , &lt;code&gt;ConstantField&lt;/code&gt; 및 &lt;code&gt;MethodField&lt;/code&gt; (및 중첩 된 시리얼을). 기존 필드 세부 정보를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="8d4fd798f87fdae64082e55d87a13fd730ead25f" translate="yes" xml:space="preserve">
          <source>Similar to how we've implemented a &lt;code&gt;Deserializer&lt;/code&gt;, in order to implement your
own serializer, you have to inherit from &lt;code&gt;Serializer&lt;/code&gt; class, then define the
fields that you want to include into your serialized data (probably your view's response). Here is a simple
example:</source>
          <target state="translated">&lt;code&gt;Deserializer&lt;/code&gt; 를 구현 한 방법과 유사하게 , 자체 serializer를 구현하려면 &lt;code&gt;Serializer&lt;/code&gt; 클래스 에서 상속 한 다음 직렬화 된 데이터에 포함 할 필드 (아마도 뷰의 응답)를 정의해야합니다. 다음은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="87b067f5d4700efc96d3ee98d020e4b72d4b27ff" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;Deserializer&lt;/code&gt;, &lt;code&gt;Serializer&lt;/code&gt; sub-classes could be nested (i.e.
using &lt;code&gt;Serializer&lt;/code&gt; sub-class as a serializer's field). Here is a simple example
that shows how to nest serializers:</source>
          <target state="translated">&lt;code&gt;Deserializer&lt;/code&gt; 와 유사하게 &lt;code&gt;Serializer&lt;/code&gt; 하위 클래스는 중첩 될 수 있습니다 (예 : &lt;code&gt;Serializer&lt;/code&gt; 하위 클래스를 serializer의 필드로 사용). 다음은 serializer를 중첩하는 방법을 보여주는 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="7fbf2a39f74420632020f98ebc38d5d85f3588b2" translate="yes" xml:space="preserve">
          <source>Staff users, &lt;strong&gt;and&lt;/strong&gt; only with reading http methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;OPTIONS&lt;/code&gt;).</source>
          <target state="translated">직원 사용자 &lt;strong&gt;및&lt;/strong&gt; http 메소드 ( &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt; 및 &lt;code&gt;OPTIONS&lt;/code&gt; ) 를 읽는 것만 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="1a428989bd13dceabd89b698d9fa38eb8a0d175c" translate="yes" xml:space="preserve">
          <source>Table of contents</source>
          <target state="translated">목차</target>
        </trans-unit>
        <trans-unit id="7455a01bab300b63b3e5c018aa62a5207b1d29fd" translate="yes" xml:space="preserve">
          <source>That's all! Now run the server:</source>
          <target state="translated">그게 다야! 이제 서버를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="18094be7752942196d540572254de7dee1a3a8ee" translate="yes" xml:space="preserve">
          <source>That's how a &lt;code&gt;Deserializer&lt;/code&gt; is defined. Now, if you want to use the deserializer
outside the &lt;code&gt;@api_view&lt;/code&gt;'s &lt;code&gt;deserializer_class&lt;/code&gt; argument, you have two approaches to proceed:</source>
          <target state="translated">이것이 &lt;code&gt;Deserializer&lt;/code&gt; 가 정의 되는 방법 입니다. 이제 &lt;code&gt;@api_view&lt;/code&gt; 의 &lt;code&gt;deserializer_class&lt;/code&gt; 인수 외부에서 deserializer를 사용하려면 두 가지 방법으로 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77732eb5e23217875cc3cc68834d65d9e557e0db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@api_view&lt;/code&gt; decorator catches exceptions for you in case you did not, and returns a JSON response with the correct status code.
If the raised exception is a sub-class of &lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt;, a custom message and status code will be returned.
If it's not the case, the returned JSON response will have &lt;code&gt;&quot;An unknown server error occured.&quot;&lt;/code&gt; as message, and &lt;code&gt;500&lt;/code&gt; as status code.</source>
          <target state="translated">&lt;code&gt;@api_view&lt;/code&gt; 의 경우에 당신을위한 장식 어획량 예외는하지 않았다, 올바른 상태 코드와 JSON 응답을 반환합니다. 발생한 예외가 &lt;code&gt;django_rest.http.exceptions.BaseAPIException&lt;/code&gt; 의 하위 클래스 인 경우 사용자 지정 메시지 및 상태 코드가 반환됩니다. 그렇지 않은 경우 반환 된 JSON 응답에 &lt;code&gt;&quot;An unknown server error occured.&quot;&lt;/code&gt; 메시지로, 상태 코드로 &lt;code&gt;500&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7b3761b83c46037ffa0b0ddfe4e64833c10ff89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@api_view&lt;/code&gt; decorator could be applied differently on the views, depending on your use-case. You can:</source>
          <target state="translated">&lt;code&gt;@api_view&lt;/code&gt; 의 장식은 사용 사례에 따라 뷰 다르게 적용될 수있다. 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52b0aaef3de79ffde180c7d85027983ab0980490" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllPassDeserializer&lt;/code&gt; is the default deserializer used by &lt;code&gt;@api_view&lt;/code&gt;
decorator. (You probably won't need it unless you're dealing with a very unusual
use-case)</source>
          <target state="translated">&lt;code&gt;AllPassDeserializer&lt;/code&gt; 가 사용하는 기본 디시리얼라이저이다 &lt;code&gt;@api_view&lt;/code&gt; 장식. (매우 특이한 사용 사례를 다루지 않는 한 아마도 필요하지 않을 것입니다)</target>
        </trans-unit>
        <trans-unit id="d30d433337a13704f2348b9ae3366cafce83ef86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllPassDeserializer&lt;/code&gt;, is a particular deserializer that allows all payloads to pass to the view, without
any validation: No type-casts, no post-clean methods, and more importantly,
never raises a &lt;code&gt;ValidationError&lt;/code&gt; or returns a &lt;code&gt;400 BadRequest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AllPassDeserializer&lt;/code&gt; 는 없음 타입 캐스트, 사후 청소 방법, 그리고 더 중요한 것은, 결코 제기되지 : 모든 페이로드 유효성 검사없이보기에 전달할 수있는 특정 디시리얼라이저이다 &lt;code&gt;ValidationError&lt;/code&gt; 또는 리턴한다 &lt;code&gt;400 BadRequest&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f1296a0c1eabde27e5f36212978bffa51963747" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has_permission()&lt;/code&gt; takes the &lt;code&gt;request&lt;/code&gt; object, and the target view object as
arguments, and should return a &lt;code&gt;bool&lt;/code&gt; that represents if the access should be
granted (&lt;code&gt;True&lt;/code&gt;) or not (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;has_permission()&lt;/code&gt; 소요 &lt;code&gt;request&lt;/code&gt; 객체, 및 인수로 대상 뷰 객체를, 그리고 반환해야 &lt;code&gt;bool&lt;/code&gt; 액세스가 (부여해야하는지 여부를 나타내는 &lt;code&gt;True&lt;/code&gt; ) 또는 (안 &lt;code&gt;False&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="39d7ad6a89c73d70a6be58ddbb416ecdfc7e544a" translate="yes" xml:space="preserve">
          <source>The @api_view decorator</source>
          <target state="translated">@api_view 데코레이터</target>
        </trans-unit>
        <trans-unit id="3cf2178cf416886a2e50ceb7f91c8180d831daba" translate="yes" xml:space="preserve">
          <source>The HTTP status codes can be imported from &lt;code&gt;django_rest.http.status&lt;/code&gt;:</source>
          <target state="translated">HTTP 상태 코드는 &lt;code&gt;django_rest.http.status&lt;/code&gt; 에서 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0bfd8dcd1c21584dcb049f881a0d509c7ecfec89" translate="yes" xml:space="preserve">
          <source>The first approach</source>
          <target state="translated">첫 번째 접근법</target>
        </trans-unit>
        <trans-unit id="b4564b07cdaa85badd51131499d4faaa7004f968" translate="yes" xml:space="preserve">
          <source>The library itself was highly inspired from the great &lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;django-rest-framework&lt;/a&gt; and &lt;a href=&quot;https://serpy.readthedocs.io/en/latest/&quot;&gt;SerPy&lt;/a&gt;</source>
          <target state="translated">라이브러리 자체는 훌륭한 &lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;django-rest-framework&lt;/a&gt; 및 &lt;a href=&quot;https://serpy.readthedocs.io/en/latest/&quot;&gt;SerPy&lt;/a&gt; 에서 크게 영감을 받았습니다.</target>
        </trans-unit>
        <trans-unit id="64a3dff1d2647312432b4ad1a794dc17b5f0412a" translate="yes" xml:space="preserve">
          <source>The primitive types are serializer's fields that cast your data into Python's
native data-types: &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt;. The &lt;code&gt;CharField&lt;/code&gt;,
&lt;code&gt;IntegerField&lt;/code&gt;, &lt;code&gt;FloatField&lt;/code&gt; and &lt;code&gt;BooleanField&lt;/code&gt; accept the &lt;strong&gt;same&lt;/strong&gt; arguments:</source>
          <target state="translated">기본 유형은 데이터를 Python의 기본 데이터 유형 인 &lt;code&gt;str&lt;/code&gt; , &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;float&lt;/code&gt; 및 &lt;code&gt;bool&lt;/code&gt; 로 캐스팅하는 직렬 변환기의 필드입니다 . &lt;code&gt;CharField&lt;/code&gt; , &lt;code&gt;IntegerField&lt;/code&gt; , &lt;code&gt;FloatField&lt;/code&gt; 및 &lt;code&gt;BooleanField&lt;/code&gt; 는 수락 &lt;strong&gt;같은&lt;/strong&gt; 인수를 :</target>
        </trans-unit>
        <trans-unit id="6270988b8056d18a0b530a02af8302ef0da99133" translate="yes" xml:space="preserve">
          <source>The second approach</source>
          <target state="translated">두 번째 접근법</target>
        </trans-unit>
        <trans-unit id="06605b56b8987e967160f4c74f99c030e7d51f02" translate="yes" xml:space="preserve">
          <source>There are some situations in which you'd need a calculated value (from one or multiple attributes),
without polluting your view, nor your model with a new method.
In that case, &lt;code&gt;MethodField&lt;/code&gt; could be very useful. By defining a &lt;code&gt;MethodField&lt;/code&gt;,
you have to define a method in your &lt;code&gt;Serializer&lt;/code&gt;, that receives your object as
input, and has to return the value to be rendered</source>
          <target state="translated">뷰를 오염시키지 않고 (하나 또는 여러 속성에서) 계산 된 값이 필요하거나 새로운 방법으로 모델이 필요한 경우가 있습니다. 이 경우 &lt;code&gt;MethodField&lt;/code&gt; 가 매우 유용 할 수 있습니다. 결정적으로 &lt;code&gt;MethodField&lt;/code&gt; 을 , 당신은 당신의 방법을 정의 할 필요가 &lt;code&gt;Serializer&lt;/code&gt; , 그 입력으로 개체를 수신하고 렌더링 할 값을 반환한다</target>
        </trans-unit>
        <trans-unit id="4156bc7015ebd79f2f504c665715bf26a4fbcdb1" translate="yes" xml:space="preserve">
          <source>This permission is not meant to be used in standalone, because, remember, the &lt;code&gt;@api_view&lt;/code&gt; decorator has already the &lt;code&gt;allowed_methods&lt;/code&gt; argument for this purpose, that returns a &lt;code&gt;405 Method not allowed&lt;/code&gt;.
It has been implemented only to be combined with other permissions in order to build a more complex ones (the next permission on the list is a good example).</source>
          <target state="translated">&lt;code&gt;@api_view&lt;/code&gt; 데코레이터는 이미이 목적을 위해 &lt;code&gt;allowed_methods&lt;/code&gt; 인수를 가지고 있으며 &lt;code&gt;405 Method not allowed&lt;/code&gt; 를 반환 하기 때문에이 권한은 독립 실행 형으로 사용하기 위한 것이 아닙니다 . 더 복잡한 권한을 구축하기 위해 다른 권한과 결합되도록 구현되었습니다 (목록의 다음 권한이 좋은 예입니다).</target>
        </trans-unit>
        <trans-unit id="7dd59e1070b8babe913baac66be842da9ecd4447" translate="yes" xml:space="preserve">
          <source>Tiny, lightweight, blazing fast REST library for django</source>
          <target state="translated">Django 용 작고 가볍고 빠른 REST 라이브러리</target>
        </trans-unit>
        <trans-unit id="710726c975cb6318d357467b1e699b924c516b09" translate="yes" xml:space="preserve">
          <source>Users that are &lt;strong&gt;not&lt;/strong&gt; admins</source>
          <target state="translated">관리자 가 &lt;strong&gt;아닌&lt;/strong&gt; 사용자</target>
        </trans-unit>
        <trans-unit id="a319e2d7cf90eaf77006baba77787129726d620b" translate="yes" xml:space="preserve">
          <source>Users that are staff</source>
          <target state="translated">직원 인 사용자</target>
        </trans-unit>
        <trans-unit id="1de928532e166bdebe87d23cd0f37f50ad65f87d" translate="yes" xml:space="preserve">
          <source>Using logical operators allows you to combine different &lt;code&gt;Permission&lt;/code&gt; sub-classes, in a simple and powerful way, to obtain more complex and complete permissions.</source>
          <target state="translated">논리 연산자를 사용하면 보다 복잡하고 완전한 권한을 얻기 위해 간단하고 강력한 방법으로 서로 다른 &lt;code&gt;Permission&lt;/code&gt; 하위 클래스 를 결합 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a14e0d5015f0d6b0edd2814a019ec22929b602d" translate="yes" xml:space="preserve">
          <source>View Permissions</source>
          <target state="translated">권한보기</target>
        </trans-unit>
        <trans-unit id="8e0220c1514ab33686fa56ac5ea8608be03c017c" translate="yes" xml:space="preserve">
          <source>We should have added a condition in &lt;code&gt;HasGmailAddress&lt;/code&gt; to verify if the user is
authenticated (and therefore, &lt;code&gt;IsAuthenticated&lt;/code&gt; permission will be useless).
Otherwise, if an anonymous user requests the view, a &lt;code&gt;AttributeError: 'NoneType' object has no attribute 'email'&lt;/code&gt; exception will be raised.</source>
          <target state="translated">사용자가 인증되었는지 확인하기 위해 &lt;code&gt;HasGmailAddress&lt;/code&gt; 에 조건을 추가해야 합니다 (따라서 &lt;code&gt;IsAuthenticated&lt;/code&gt; 권한은 쓸모가 없습니다). 그렇지 않으면 익명 사용자가 뷰를 요청하면 &lt;code&gt;AttributeError: 'NoneType' object has no attribute 'email'&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8f9519798f83f5d2cc07f5f7eaea83bd3c6381ed" translate="yes" xml:space="preserve">
          <source>While using operators, operands order &lt;strong&gt;matters&lt;/strong&gt;.</source>
          <target state="translated">연산자를 사용하는 동안 피연산자의 순서가 &lt;strong&gt;중요&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4efefe2ad6aee9a014cc9a362f02e48d9a065bda" translate="yes" xml:space="preserve">
          <source>You can get the package using &lt;code&gt;pip&lt;/code&gt;, as the following:</source>
          <target state="translated">다음과 같이 &lt;code&gt;pip&lt;/code&gt; 를 사용하여 패키지를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6e6f02d7ef24fa9b39e389957988f6217c78619" translate="yes" xml:space="preserve">
          <source>Your responses are standardized in all your decorated views: always the same message and status code for the same situations.</source>
          <target state="translated">귀하의 응답은 장식 된 모든 뷰에서 표준화됩니다. 동일한 상황에 대해 항상 동일한 메시지와 상태 코드를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ba4af23e0b41ce26f2df66b8bf83e2cb294465fe" translate="yes" xml:space="preserve">
          <source>Your view's code is lighter (dropping all the useless &lt;code&gt;try/except&lt;/code&gt; clauses).</source>
          <target state="translated">뷰의 코드가 더 가볍습니다 (쓸모없는 &lt;code&gt;try/except&lt;/code&gt; 절을 모두 삭제 ).</target>
        </trans-unit>
        <trans-unit id="fb349f69741a62b7b30f86ca1bafbd0200f4534a" translate="yes" xml:space="preserve">
          <source>django version 1.10+</source>
          <target state="translated">장고 버전 1.10 이상</target>
        </trans-unit>
        <trans-unit id="0be40418142ce90be3e4ae2d805c99301871d70b" translate="yes" xml:space="preserve">
          <source>django's native request object (&lt;code&gt;django.http.request.HttpRequest&lt;/code&gt;). Similar
to every django view's first argument.
More details on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/request-response/&quot;&gt;django's documentation&lt;/a&gt;</source>
          <target state="translated">django의 기본 요청 객체 ( &lt;code&gt;django.http.request.HttpRequest&lt;/code&gt; ). 모든 장고 뷰의 첫 번째 인수와 유사합니다. &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/request-response/&quot;&gt;장고 문서&lt;/a&gt; 에 대한 자세한 내용</target>
        </trans-unit>
        <trans-unit id="cfc8836b0353670dfe3403f7f63dcb975eba6769" translate="yes" xml:space="preserve">
          <source>django-REST</source>
          <target state="translated">장고-휴식</target>
        </trans-unit>
        <trans-unit id="6f571455de40c336216696bf7648cb7a562bd48f" translate="yes" xml:space="preserve">
          <source>django-REST deserializers use native django forms fields. &lt;strong&gt;Depending on the
django version you are using&lt;/strong&gt;, you may have access (or not) to some fields, and some of
their attributes. More details on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/&quot;&gt;django's official doc&lt;/a&gt;.</source>
          <target state="translated">django-REST deserializer는 기본 django 양식 필드를 사용합니다. &lt;strong&gt;사용중인 django 버전에 따라&lt;/strong&gt; 일부 필드 및 일부 속성에 대한 액세스 권한이 있거나 없을 수 있습니다. &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/forms/fields/&quot;&gt;django의 공식 문서&lt;/a&gt; 에 대한 자세한 내용 .</target>
        </trans-unit>
        <trans-unit id="711eb7f94a755096e6df160e4a787c4e1b355268" translate="yes" xml:space="preserve">
          <source>django-REST is a &lt;strong&gt;tiny&lt;/strong&gt;, &lt;strong&gt;lightweight&lt;/strong&gt;, &lt;strong&gt;easy-to-use&lt;/strong&gt; and &lt;strong&gt;incredibly fast&lt;/strong&gt; library to implement
REST views with django. The whole library's focused in &lt;strong&gt;one&lt;/strong&gt; decorator that transforms the
simple views into REST ones, allowing easy customizations (such as permissions, serializers, etc.)</source>
          <target state="translated">장고 - REST는이다 &lt;strong&gt;작은&lt;/strong&gt; , &lt;strong&gt;가볍고&lt;/strong&gt; , &lt;strong&gt;사용하기 쉬운&lt;/strong&gt; 과 &lt;strong&gt;믿을 수 없을만큼 빠른&lt;/strong&gt; 장고와 REST 뷰를 구현하는 라이브러리입니다. 전체 라이브러리 는 간단한 뷰를 REST 뷰로 변환하는 &lt;strong&gt;하나의&lt;/strong&gt; 데코레이터에 집중되어 있어 권한, 시리얼 라이저 등의 간편한 사용자 지정이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="fadaccede7972d444c67468c3c77db357b2829aa" translate="yes" xml:space="preserve">
          <source>django-REST library requires:</source>
          <target state="translated">django-REST 라이브러리에는 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="bcf353904ba38bb23de16f25f3b440bc81a34ab2" translate="yes" xml:space="preserve">
          <source>django-REST offers support for nesting deserializers, in order to build more complex ones, in a flexible way and without losing readability.</source>
          <target state="translated">django-REST는 가독성을 잃지 않고 유연한 방식으로 더 복잡한 디시리얼라이저를 빌드하기 위해 중첩 디시리얼라이저를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="2daa5a91473171ed15d647ac88c06bb6e7daa64a" translate="yes" xml:space="preserve">
          <source>django-REST provides some constants/enumerations that allow you to avoid using
hard-coded values (&lt;code&gt;str&lt;/code&gt; for HTTP methods, and &lt;code&gt;int&lt;/code&gt; for status codes), and
improve your code readability.</source>
          <target state="translated">django-REST는 하드 코딩 된 값 ( HTTP 메서드의 경우 &lt;code&gt;str&lt;/code&gt; , 상태 코드의 경우 &lt;code&gt;int&lt;/code&gt; ) 사용을 피하고 코드 가독성을 향상시킬 수있는 몇 가지 상수 / 열거 형을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="9d2aa03e78896e151c404722b9b1788baafa5a13" translate="yes" xml:space="preserve">
          <source>django-REST provides you 4 logical operators: &lt;strong&gt;AND&lt;/strong&gt; (&lt;code&gt;&amp;amp;&lt;/code&gt;), &lt;strong&gt;OR&lt;/strong&gt; (&lt;code&gt;|&lt;/code&gt;), &lt;strong&gt;XOR&lt;/strong&gt; (&lt;code&gt;^&lt;/code&gt;) and &lt;strong&gt;NOT&lt;/strong&gt; (&lt;code&gt;~&lt;/code&gt;).</source>
          <target state="translated">django-REST는 &lt;strong&gt;AND&lt;/strong&gt; ( &lt;code&gt;&amp;amp;&lt;/code&gt; ), &lt;strong&gt;OR&lt;/strong&gt; ( &lt;code&gt;|&lt;/code&gt; ), &lt;strong&gt;XOR&lt;/strong&gt; ( &lt;code&gt;^&lt;/code&gt; ) 및 &lt;strong&gt;NOT&lt;/strong&gt; ( &lt;code&gt;~&lt;/code&gt; )의 4 가지 논리 연산자를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="98fca8b005281373912dbba2eb3739b198c820b0" translate="yes" xml:space="preserve">
          <source>django-REST provides you a way to implement a custom permission that fits your needs.
All you have to do is inherit from &lt;code&gt;django_rest.permissions.BasePermission&lt;/code&gt;, then implement the &lt;code&gt;has_permission()&lt;/code&gt; method.</source>
          <target state="translated">django-REST는 필요에 맞는 사용자 지정 권한을 구현하는 방법을 제공합니다. 당신이해야 할 일은 &lt;code&gt;django_rest.permissions.BasePermission&lt;/code&gt; 에서 상속받은 다음 &lt;code&gt;has_permission()&lt;/code&gt; 메소드 를 구현하는 것 입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
