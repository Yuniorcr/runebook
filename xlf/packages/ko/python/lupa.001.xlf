<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/lupa/">
    <body>
      <group id="lupa">
        <trans-unit id="3816df72a966910ae40d4ad21b7b7996f5ef6c59" translate="yes" xml:space="preserve">
          <source>(See &lt;a href=&quot;https://www.lua.org/license.html&quot;&gt;https://www.lua.org/license.html&lt;/a&gt;)</source>
          <target state="translated">( &lt;a href=&quot;https://www.lua.org/license.html&quot;&gt;https://www.lua.org/license.html 참조&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="1a096a81952a585274115aad57d687236cc427df" translate="yes" xml:space="preserve">
          <source>(length) operator in
Lua and because of the way Lua defines the length of a table.
Remember that unset table indices always return</source>
          <target state="translated">(길이) 연산자와 Lua가 테이블의 길이를 정의하는 방식 때문입니다. 설정되지 않은 테이블 인덱스는 항상</target>
        </trans-unit>
        <trans-unit id="210022c80a64b6e2034834cd87b82664f807dc13" translate="yes" xml:space="preserve">
          <source>(which is the same as</source>
          <target state="translated">(와 동일</target>
        </trans-unit>
        <trans-unit id="0391ea51db75d0bd6ee964f4bfd47f28790d7f02" translate="yes" xml:space="preserve">
          <source>) module is available, the
following should work on a Linux system:</source>
          <target state="translated">) 모듈을 사용할 수있는 경우 다음이 Linux 시스템에서 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="a2e1b849ab04ec1988656c109c7c0c1ce9b8b4c2" translate="yes" xml:space="preserve">
          <source>, including
indices outside of the table size.  Thus, Lua basically looks for an
index that returns</source>
          <target state="translated">, 테이블 크기 외부의 인덱스 포함. 따라서 Lua는 기본적으로 다음을 반환하는 인덱스를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="cdf2c6f9d690cece3c4a853b22243d45400d660a" translate="yes" xml:space="preserve">
          <source>, including
support for library loading</source>
          <target state="translated">, 라이브러리로드 지원 포함</target>
        </trans-unit>
        <trans-unit id="b38bdd8a1d22330f8093477472549e232e41befe" translate="yes" xml:space="preserve">
          <source>, is new in Lupa 1.1 and accepts
any number of mappings and sequences/iterables as arguments.  It collects
all values and key-value pairs and builds a single Lua table from them.
Any keys that appear in multiple mappings get overwritten with their last
value (going from left to right).</source>
          <target state="translated">, Lupa 1.1의 새로운 기능이며 모든 매핑 및 시퀀스 / 반복 가능 항목을 인수로 허용합니다. 모든 값과 키-값 쌍을 수집하고 여기에서 단일 Lua 테이블을 만듭니다. 여러 매핑에 나타나는 모든 키는 마지막 값 (왼쪽에서 오른쪽으로 이동)으로 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="d1b9016a0f6889f4af8a521386be953948d64826" translate="yes" xml:space="preserve">
          <source>, is still mapped to</source>
          <target state="translated">, 계속 매핑 됨</target>
        </trans-unit>
        <trans-unit id="ffb33a9696c21a19d3110ef2c268262611d3c652" translate="yes" xml:space="preserve">
          <source>, it is
convenient to use the special</source>
          <target state="translated">, 스페셜을 사용하는 것이 편리합니다</target>
        </trans-unit>
        <trans-unit id="7950e9dcc49f9e577ea0de597f23cdd9d47ee5e6" translate="yes" xml:space="preserve">
          <source>, iteration now also unpacks tuple
values, including</source>
          <target state="translated">, 반복은 이제 다음을 포함한 튜플 값의 압축을 풉니 다.</target>
        </trans-unit>
        <trans-unit id="f89f12ee3837c8396652834ab0548bf6b7fa633d" translate="yes" xml:space="preserve">
          <source>, making them more straight forward
to handle in Lua code.  This makes the behaviour more consistent, as it
was previously somewhat arbitrary where</source>
          <target state="translated">, Lua 코드에서보다 쉽게 ​​처리 할 수 ​​있습니다. 이것은 이전에는 어느 정도 임의적 이었기 때문에 동작을보다 일관되게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="38ce5b6044c588055245818cd2bef34339452efb" translate="yes" xml:space="preserve">
          <source>, not to</source>
          <target state="translated">,하지</target>
        </trans-unit>
        <trans-unit id="5586bef7e1124f0b327897015fec89dd3e8658ed" translate="yes" xml:space="preserve">
          <source>, which would terminate the iteration</source>
          <target state="translated">, 반복을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="8787f2a16cfd70b639027545d8c85f06466ff798" translate="yes" xml:space="preserve">
          <source>--no-luajit</source>
          <target state="translated">--no-luajit</target>
        </trans-unit>
        <trans-unit id="2409dbb844cb1f81941d2ceb0136d6ea85918bbe" translate="yes" xml:space="preserve">
          <source>--with-cython</source>
          <target state="translated">--cython 포함</target>
        </trans-unit>
        <trans-unit id="d934222f835d43f6059a3543eae9ecf629ac1aef" translate="yes" xml:space="preserve">
          <source>.  Example:</source>
          <target state="translated">. 예:</target>
        </trans-unit>
        <trans-unit id="f863c23a93501fd973cdcb1d746f38bd8aa20cad" translate="yes" xml:space="preserve">
          <source>.  If</source>
          <target state="translated">. 만약</target>
        </trans-unit>
        <trans-unit id="7bb62248b63bd77678af425cfd430dbcf6cc631e" translate="yes" xml:space="preserve">
          <source>.  Importing the</source>
          <target state="translated">. 가져 오기</target>
        </trans-unit>
        <trans-unit id="ddc4a7ff10bb420e224b50c4e1e01de6e388bd0f" translate="yes" xml:space="preserve">
          <source>.  Otherwise, attribute access in Lua would
use the</source>
          <target state="translated">. 그렇지 않으면 Lua의 속성 액세스는</target>
        </trans-unit>
        <trans-unit id="da2077ff3f867296cfff235205689363b4a3fec0" translate="yes" xml:space="preserve">
          <source>.  This means that only the first argument
needs to be manually checked for this special case.  For the</source>
          <target state="translated">. 이는이 특별한 경우에 대해 첫 번째 인수 만 수동으로 확인해야 함을 의미합니다. 에 대한</target>
        </trans-unit>
        <trans-unit id="431d33306c3c7bf180052f179d52f19920a9b7b5" translate="yes" xml:space="preserve">
          <source>. Any further values
returned in the same iteration will be mapped to</source>
          <target state="translated">. 동일한 반복에서 반환 된 추가 값은 다음에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="c44105506220e1302d9d9683acf9f23d3ce0cdc1" translate="yes" xml:space="preserve">
          <source>.coroutine()</source>
          <target state="translated">.coroutine ()</target>
        </trans-unit>
        <trans-unit id="f8035b07e5bf0d30eb4314a6e83a9c9012930836" translate="yes" xml:space="preserve">
          <source>.get()</source>
          <target state="translated">.가져 오기()</target>
        </trans-unit>
        <trans-unit id="3f1df0644f32586fe1e99b5aa5992b2169c9c2f8" translate="yes" xml:space="preserve">
          <source>.send()</source>
          <target state="translated">.보내다()</target>
        </trans-unit>
        <trans-unit id="c0688fb4206e648cdf3c87fd1354d5f58fb85aea" translate="yes" xml:space="preserve">
          <source>.table_from()</source>
          <target state="translated">.table_from ()</target>
        </trans-unit>
        <trans-unit id="8ea3271e5f8836c89c2ca410ef318f54ced0bc3e" translate="yes" xml:space="preserve">
          <source>.throw()</source>
          <target state="translated">.던지다()</target>
        </trans-unit>
        <trans-unit id="57577bda3ec32883cd3daa274404aa25e543671d" translate="yes" xml:space="preserve">
          <source>0.1 (2010-07-12)</source>
          <target state="translated">0.1 (2010-07-12)</target>
        </trans-unit>
        <trans-unit id="fc6b47c7f3227d9242eaac9996abf04449d639af" translate="yes" xml:space="preserve">
          <source>0.10 (2010-07-27)</source>
          <target state="translated">0.10 (2010-07-27)</target>
        </trans-unit>
        <trans-unit id="f88ad64d4479105dc713f5bae80c565cbefb6d87" translate="yes" xml:space="preserve">
          <source>0.11 (2010-08-07)</source>
          <target state="translated">0.11 (2010-08-07)</target>
        </trans-unit>
        <trans-unit id="6bce715edc91c3e605eeef5b769f1629e4fba848" translate="yes" xml:space="preserve">
          <source>0.12 (2010-08-16)</source>
          <target state="translated">0.12 (2010-08-16)</target>
        </trans-unit>
        <trans-unit id="f2932d6b11c118ae18b6c7af0b299f5b561c66ed" translate="yes" xml:space="preserve">
          <source>0.13 (2010-08-29)</source>
          <target state="translated">0.13 (2010-08-29)</target>
        </trans-unit>
        <trans-unit id="01f0ddbb68a2441802f2ab77fac42dae4b4e879c" translate="yes" xml:space="preserve">
          <source>0.13.1 (2010-08-30)</source>
          <target state="translated">0.13.1 (2010-08-30)</target>
        </trans-unit>
        <trans-unit id="1b79ff397ffafdc5b355ee8a49e245154719f1ac" translate="yes" xml:space="preserve">
          <source>0.14 (2010-08-31)</source>
          <target state="translated">0.14 (2010-08-31)</target>
        </trans-unit>
        <trans-unit id="afb04e0f4cfc78bc7433d08ed6d63ee2f1aa0a9e" translate="yes" xml:space="preserve">
          <source>0.15 (2010-09-02)</source>
          <target state="translated">0.15 (2010-09-02)</target>
        </trans-unit>
        <trans-unit id="2bcb735eb9f7c4f2c1830b01eea25805cc05b71c" translate="yes" xml:space="preserve">
          <source>0.16 (2010-09-03)</source>
          <target state="translated">0.16 (2010-09-03)</target>
        </trans-unit>
        <trans-unit id="2f6f84e2fadc69f96c81cdc854e3224c99bba1dd" translate="yes" xml:space="preserve">
          <source>0.17 (2010-11-05)</source>
          <target state="translated">0.17 (2010-11-05)</target>
        </trans-unit>
        <trans-unit id="857d385915b7e5bb24826432b2319b55f8ca51b8" translate="yes" xml:space="preserve">
          <source>0.18 (2010-11-06)</source>
          <target state="translated">0.18 (2010-11-06)</target>
        </trans-unit>
        <trans-unit id="39d9d14e30997bfab489ebe2b7dba2cff03548dd" translate="yes" xml:space="preserve">
          <source>0.19 (2011-03-06)</source>
          <target state="translated">0.19 (2011-03-06)</target>
        </trans-unit>
        <trans-unit id="c5bba0b6a6e893e21fc0db55afedd01625d5f37a" translate="yes" xml:space="preserve">
          <source>0.2 (2010-07-13)</source>
          <target state="translated">0.2 (2010-07-13)</target>
        </trans-unit>
        <trans-unit id="e3487916be4111f254f9cceb0b0da22f35da109b" translate="yes" xml:space="preserve">
          <source>0.20 (2011-05-22)</source>
          <target state="translated">0.20 (2011-05-22)</target>
        </trans-unit>
        <trans-unit id="aa32d409597b2b6a1b0e0587a74e97bb2270a8bf" translate="yes" xml:space="preserve">
          <source>0.21 (2014-02-12)</source>
          <target state="translated">0.21 (2014-02-12)</target>
        </trans-unit>
        <trans-unit id="6be9554aed79138c11f1ba3a02b374dabd43bc44" translate="yes" xml:space="preserve">
          <source>0.3 (2010-07-13)</source>
          <target state="translated">0.3 (2010-07-13)</target>
        </trans-unit>
        <trans-unit id="f2960197861e65ed80824b13574ce8c0e822d7a9" translate="yes" xml:space="preserve">
          <source>0.4 (2010-07-14)</source>
          <target state="translated">0.4 (2010-07-14)</target>
        </trans-unit>
        <trans-unit id="002251cfed841496f4dbf3ffd75a02d52092d4cf" translate="yes" xml:space="preserve">
          <source>0.5 (2010-07-14)</source>
          <target state="translated">0.5 (2010-07-14)</target>
        </trans-unit>
        <trans-unit id="752444fb0eaa27e1dd155cf86a07180ad2b5a508" translate="yes" xml:space="preserve">
          <source>0.6 (2010-07-18)</source>
          <target state="translated">0.6 (2010-07-18)</target>
        </trans-unit>
        <trans-unit id="41724e0d16a29dcd00243fd5ed36a62e4feafa90" translate="yes" xml:space="preserve">
          <source>0.7 (2010-07-18)</source>
          <target state="translated">0.7 (2010-07-18)</target>
        </trans-unit>
        <trans-unit id="e61f624aaa4797210a70fb28ed764b39679dd615" translate="yes" xml:space="preserve">
          <source>0.8 (2010-07-21)</source>
          <target state="translated">0.8 (2010-07-21)</target>
        </trans-unit>
        <trans-unit id="f2e6ad45e53595332d078bd4bbc9c880a99fb85d" translate="yes" xml:space="preserve">
          <source>0.9 (2010-07-23)</source>
          <target state="translated">0.9 (2010-07-23)</target>
        </trans-unit>
        <trans-unit id="e844ca1be950bb9293211f593761d7a2396f23af" translate="yes" xml:space="preserve">
          <source>1.0 (2014-09-28)</source>
          <target state="translated">1.0 (2014-09-28)</target>
        </trans-unit>
        <trans-unit id="1bf1a6de3677fbe1643901a149db6805c6a899ae" translate="yes" xml:space="preserve">
          <source>1.0.1 (2014-10-11)</source>
          <target state="translated">1.0.1 (2014-10-11)</target>
        </trans-unit>
        <trans-unit id="b23d0913c02baf89ec7c6a1b64cb33cb02c5942a" translate="yes" xml:space="preserve">
          <source>1.1 (2014-11-21)</source>
          <target state="translated">1.1 (2014-11-21)</target>
        </trans-unit>
        <trans-unit id="07ecc4dce56ca0d93557677f52d6341bcad0c060" translate="yes" xml:space="preserve">
          <source>1.2 (2015-10-10)</source>
          <target state="translated">1.2 (2015-10-10)</target>
        </trans-unit>
        <trans-unit id="1a78fd9b3ec29da04b538598186e455da4cd9c7a" translate="yes" xml:space="preserve">
          <source>1.3 (2016-04-12)</source>
          <target state="translated">1.3 (2016-04-12)</target>
        </trans-unit>
        <trans-unit id="590d1dd3cd6978140018fce2d6d392bdaa00ad32" translate="yes" xml:space="preserve">
          <source>1.4 (2016-12-10)</source>
          <target state="translated">1.4 (2016-12-10)</target>
        </trans-unit>
        <trans-unit id="e4dbd8b1ae259ebc5b4cbfd61cf9291c8c477dbd" translate="yes" xml:space="preserve">
          <source>1.5 (2017-09-16)</source>
          <target state="translated">1.5 (2017-09-16)</target>
        </trans-unit>
        <trans-unit id="5fe0f493bdf967541e739a96a6867b6d91807cb8" translate="yes" xml:space="preserve">
          <source>1.6 (2017-12-15)</source>
          <target state="translated">1.6 (2017-12-15)</target>
        </trans-unit>
        <trans-unit id="1007dc6e00629296b4bbd96ed4c65dc6259c1491" translate="yes" xml:space="preserve">
          <source>1.7 (2018-08-06)</source>
          <target state="translated">1.7 (2018-08-06)</target>
        </trans-unit>
        <trans-unit id="967bb8a46a48d0eb550b1e19e5d57955b54c4dca" translate="yes" xml:space="preserve">
          <source>1.8 (2019-02-01)</source>
          <target state="translated">1.8 (2019-02-01)</target>
        </trans-unit>
        <trans-unit id="0cb210626b4c318b4006b40e35a7a79fa27f1bb4" translate="yes" xml:space="preserve">
          <source>1.9 (2019-12-21)</source>
          <target state="translated">1.9 (2019-12-21)</target>
        </trans-unit>
        <trans-unit id="846d1f7033c9b0c17019bf4fd74a52934bfab031" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This will usually work as is&lt;/strong&gt;, but here are the details, in case
anything goes wrong for you.</source>
          <target state="translated">&lt;strong&gt;이는 일반적으로있는 그대로 작동&lt;/strong&gt; 하지만 문제가 발생할 경우를 대비하여 여기에 자세한 내용이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f665060da680eaa95d0367ab7990e176724d8e7" translate="yes" xml:space="preserve">
          <source>A common pattern for implementing named arguments in Lua is passing them
in a table as the first and only function argument.  See
&lt;a href=&quot;http://lua-users.org/wiki/NamedParameters&quot;&gt;http://lua-users.org/wiki/NamedParameters&lt;/a&gt; for more details.  Lupa supports
this pattern by providing two decorators:</source>
          <target state="translated">Lua에서 명명 된 인수를 구현하는 일반적인 패턴은 첫 번째이자 유일한 함수 인수로 테이블에 전달하는 것입니다. 자세한 내용은 &lt;a href=&quot;http://lua-users.org/wiki/NamedParameters&quot;&gt;http://lua-users.org/wiki/NamedParameters&lt;/a&gt; 를 참조하십시오. Lupa는 두 가지 데코레이터를 제공하여이 패턴을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="be76862f590f769f39776fc54a867c9551c6e7ae" translate="yes" xml:space="preserve">
          <source>A lookup of non-existing keys or indices returns None (actually</source>
          <target state="translated">존재하지 않는 키 또는 인덱스를 조회하면 None (실제로</target>
        </trans-unit>
        <trans-unit id="a3fef4086a6041609822239e988c5022cccaddae" translate="yes" xml:space="preserve">
          <source>A second helper method,</source>
          <target state="translated">두 번째 도우미 메서드,</target>
        </trans-unit>
        <trans-unit id="fab990b07eeb2cf0a7282f22d8d9feef7da9ca5a" translate="yes" xml:space="preserve">
          <source>ARCHFLAGS</source>
          <target state="translated">ARCHFLAGS</target>
        </trans-unit>
        <trans-unit id="f25802efa336ee5a245498a602ba4a7462361092" translate="yes" xml:space="preserve">
          <source>Also, on 64bit MacOS-X, you will typically have to set the
environment variable</source>
          <target state="translated">또한 64 비트 MacOS-X에서는 일반적으로 환경 변수를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="011c5c181510af38dc4ef23ee9e1555e12135ac4" translate="yes" xml:space="preserve">
          <source>An example where values are passed into the coroutine using its</source>
          <target state="translated">값을 사용하여 코 루틴으로 전달되는 예</target>
        </trans-unit>
        <trans-unit id="e12315e531fbe8a03652e20bf340d8b9fd14c5c8" translate="yes" xml:space="preserve">
          <source>As discussed earlier, Lupa allows Lua scripts to call Python functions
and methods:</source>
          <target state="translated">앞에서 설명한 것처럼 Lupa는 Lua 스크립트가 Python 함수 및 메서드를 호출하도록 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8eeebdf000a700d83b4fe65424e6baa92743a12c" translate="yes" xml:space="preserve">
          <source>Assuming that the Lua &lt;a href=&quot;http://git.alpinelinux.org/cgit/luaposix&quot;&gt;luaposix&lt;/a&gt; (</source>
          <target state="translated">Lua &lt;a href=&quot;http://git.alpinelinux.org/cgit/luaposix&quot;&gt;luaposix&lt;/a&gt; (</target>
        </trans-unit>
        <trans-unit id="41a806871c657d6066182883ebfc0bf54b676f60" translate="yes" xml:space="preserve">
          <source>Attribute lookup can use a more fine-grained control mechanism by
implementing explicit getter and setter functions for a LuaRuntime
(</source>
          <target state="translated">속성 조회는 LuaRuntime에 대한 명시 적 getter 및 setter 함수를 구현하여보다 세분화 된 제어 메커니즘을 사용할 수 있습니다 (</target>
        </trans-unit>
        <trans-unit id="10d296b42df375be3c37de171670530659648f76" translate="yes" xml:space="preserve">
          <source>Avoid using</source>
          <target state="translated">사용하지 마십시오</target>
        </trans-unit>
        <trans-unit id="de1e2a8973ec91d808f54a6bdfd460059ce7cf38" translate="yes" xml:space="preserve">
          <source>Because of these limitations lupa doesn&amp;rsquo;t enable named arguments for all
Python callables automatically.  Decorators allow to enable named arguments
on a per-callable basis.</source>
          <target state="translated">이러한 제한으로 인해 lupa는 모든 Python 콜 러블에 대해 명명 된 인수를 자동으로 활성화하지 않습니다. 데코레이터를 사용하면 호출 가능한 기준으로 명명 된 인수를 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2318ea04d5ca61145dbf133e6dec5fd9417e8b5f" translate="yes" xml:space="preserve">
          <source>Build LuaJIT:</source>
          <target state="translated">LuaJIT 빌드 :</target>
        </trans-unit>
        <trans-unit id="8c4d3d322cf40d2ae7f4029afbd1c89daaf15fb0" translate="yes" xml:space="preserve">
          <source>Build against Lua 5.3 if available.</source>
          <target state="translated">가능한 경우 Lua 5.3에 대해 빌드하십시오.</target>
        </trans-unit>
        <trans-unit id="3903773335862f8d6a5a3436183901051cc04c43" translate="yes" xml:space="preserve">
          <source>Build lupa:</source>
          <target state="translated">루파 빌드 :</target>
        </trans-unit>
        <trans-unit id="fb3e9a2c5ff73767f84481e966b4e40b4adfd53b" translate="yes" xml:space="preserve">
          <source>Building with Lua 5.1</source>
          <target state="translated">Lua 5.1로 빌드</target>
        </trans-unit>
        <trans-unit id="af5de7006337c12be21e6adf4f3845eee10ffcc0" translate="yes" xml:space="preserve">
          <source>Building with LuaJIT2</source>
          <target state="translated">LuaJIT2로 구축</target>
        </trans-unit>
        <trans-unit id="7d7f1f30a4c6ad6df283ac5509853cd26f019514" translate="yes" xml:space="preserve">
          <source>Built with Cython 0.26.1.</source>
          <target state="translated">Cython 0.26.1로 빌드되었습니다.</target>
        </trans-unit>
        <trans-unit id="64860da1ecbe3002181aaf06377b5e4986d1e45c" translate="yes" xml:space="preserve">
          <source>Built with Cython 0.29.14 for better Py3.8 compatibility.</source>
          <target state="translated">더 나은 Py3.8 호환성을 위해 Cython 0.29.14로 제작되었습니다.</target>
        </trans-unit>
        <trans-unit id="620f09b9e079b2d5acfc29aaf2935e1b068be7da" translate="yes" xml:space="preserve">
          <source>Built with Cython 0.29.3 for better Py3.7 compatibility.</source>
          <target state="translated">더 나은 Py3.7 호환성을 위해 Cython 0.29.3으로 빌드되었습니다.</target>
        </trans-unit>
        <trans-unit id="fdd981108741f180e5dadec66f96f77c14858911" translate="yes" xml:space="preserve">
          <source>Copyright &amp;copy; 1994&amp;ndash;2017 Lua.org, PUC-Rio.</source>
          <target state="translated">저작권 &amp;copy; 1994&amp;ndash;2017 Lua.org, PUC-Rio.</target>
        </trans-unit>
        <trans-unit id="fd12af63884ce063c38bfb42d92bba76e53a918b" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2010-2017 Stefan Behnel.  All rights reserved.</source>
          <target state="translated">Copyright (c) 2010-2017 Stefan Behnel. 판권 소유.</target>
        </trans-unit>
        <trans-unit id="0760d7dc65a0ebb2ea829b42b12323f289e92e88" translate="yes" xml:space="preserve">
          <source>DLFCN</source>
          <target state="translated">DLFCN</target>
        </trans-unit>
        <trans-unit id="d25641859ce0fdb4fb5572b5b4da9f528da02b04" translate="yes" xml:space="preserve">
          <source>Debian/Ubuntu + Lua 5.2</source>
          <target state="translated">Debian / Ubuntu + Lua 5.2</target>
        </trans-unit>
        <trans-unit id="8eb5b2ac2e61a85b56d8fac0c97232fc9e56e494" translate="yes" xml:space="preserve">
          <source>Debian/Ubuntu + LuaJIT2</source>
          <target state="translated">Debian / Ubuntu + LuaJIT2</target>
        </trans-unit>
        <trans-unit id="2c951c65d1c6db7c762105c1f5143a248eaec373" translate="yes" xml:space="preserve">
          <source>Depending on OS version, you might get an older LuaJIT2 version.</source>
          <target state="translated">OS 버전에 따라 이전 LuaJIT2 버전을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a0fa3098cb8e2a7f87155ea6dccb04f24fe1769" translate="yes" xml:space="preserve">
          <source>Download LuaJIT2</source>
          <target state="translated">LuaJIT2 다운로드</target>
        </trans-unit>
        <trans-unit id="60038657198ea44074a73ab760314860bb1606aa" translate="yes" xml:space="preserve">
          <source>Download and unpack lupa</source>
          <target state="translated">Lupa 다운로드 및 압축 풀기</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="4da9cc7f9373c4c41f2ef4ca9d2c0a7f2fa6f621" translate="yes" xml:space="preserve">
          <source>For further information, read this mailing list post:</source>
          <target state="translated">자세한 내용은 다음 메일 링리스트 게시물을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="adab334dc252969e39efa2d9854b8840f22f6f5d" translate="yes" xml:space="preserve">
          <source>For iterators that return tuples, such as</source>
          <target state="translated">다음과 같이 튜플을 반환하는 반복기의 경우</target>
        </trans-unit>
        <trans-unit id="77c159e537a6942af629ccdca6594003208e8ff6" translate="yes" xml:space="preserve">
          <source>For questions not answered here, please contact the &lt;a href=&quot;http://www.freelists.org/list/lupa-dev&quot;&gt;Lupa mailing list&lt;/a&gt;.</source>
          <target state="translated">여기에서 답변되지 않은 질문은 &lt;a href=&quot;http://www.freelists.org/list/lupa-dev&quot;&gt;Lupa 메일 링리스트에&lt;/a&gt; 문의하십시오 .</target>
        </trans-unit>
        <trans-unit id="3af7b0aa61c76cce480c7f72f54a17cdde1c60c6" translate="yes" xml:space="preserve">
          <source>For trickier target platforms like Windows and MacOS-X, please see
the official &lt;a href=&quot;http://luajit.org/install.html&quot;&gt;installation instructions for LuaJIT&lt;/a&gt;.</source>
          <target state="translated">Windows 및 MacOS-X와 같은 까다로운 대상 플랫폼에 &lt;a href=&quot;http://luajit.org/install.html&quot;&gt;대해서는 LuaJIT&lt;/a&gt; 공식 설치 지침을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="66d5e16536a57b2187703462bbbbce2bb2bf53d7" translate="yes" xml:space="preserve">
          <source>Furthermore, CPython needs to enable global symbol visibility for
shared libraries before loading the Lupa module.  This can be done by
calling</source>
          <target state="translated">또한 CPython은 Lupa 모듈을로드하기 전에 공유 라이브러리에 대한 전역 기호 가시성을 활성화해야합니다. 이것은 호출하여 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="613902f3d2160de6ac84564b8d894bacadddac14" translate="yes" xml:space="preserve">
          <source>GH#103: Provide wheels for MS Windows and fix MSVC build on Py2.7.</source>
          <target state="translated">GH # 103 : MS Windows 용 휠을 제공하고 Py2.7에서 MSVC 빌드를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="de18f6214f3a99e9a52c8a267296005ea36c4761" translate="yes" xml:space="preserve">
          <source>GH#107: Fix a deprecated import in Py3.</source>
          <target state="translated">GH # 107 : Py3에서 더 이상 사용되지 않는 가져 오기를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="c6fbb39799f643152e6c5f6ff956ae9614768915" translate="yes" xml:space="preserve">
          <source>GH#126: Fix build on Linux systems that install Lua as &amp;ldquo;lua52&amp;rdquo; package.</source>
          <target state="translated">GH # 126 : Lua를 &quot;lua52&quot;패키지로 설치하는 Linux 시스템의 빌드 수정.</target>
        </trans-unit>
        <trans-unit id="df494f3f5808adaf2a0219900851e0f3af0e5aab" translate="yes" xml:space="preserve">
          <source>GH#129: Fix Lua module loading in Python 3.x.</source>
          <target state="translated">GH # 129 : Python 3.x에서 Lua 모듈로드 수정.</target>
        </trans-unit>
        <trans-unit id="fc0db9ec248e971547c235a4b1d452c5deced44c" translate="yes" xml:space="preserve">
          <source>GH#63: attribute/keyword names were not properly encoded if the</source>
          <target state="translated">GH # 63 : 속성 / 키워드 이름이 제대로 인코딩되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="8496459566c8e5e649b9dfc4c88aea684333798b" translate="yes" xml:space="preserve">
          <source>GH#65: calling</source>
          <target state="translated">GH # 65 : 호출</target>
        </trans-unit>
        <trans-unit id="187d83733f199a6b6c0958050b55df68fa652bdc" translate="yes" xml:space="preserve">
          <source>GH#70:</source>
          <target state="translated">GH # 70 :</target>
        </trans-unit>
        <trans-unit id="fc32137050e964fe649acd95731833b5c6ecbdff" translate="yes" xml:space="preserve">
          <source>GH#78: Allow Lua code to intercept Python exceptions.
(patch by Sergey Dobrov)</source>
          <target state="translated">GH # 78 : Lua 코드가 Python 예외를 가로 챌 수 있도록 허용합니다. (Sergey Dobrov의 패치)</target>
        </trans-unit>
        <trans-unit id="333f79c4bd0e6250522a2e79b4651f18a683d922" translate="yes" xml:space="preserve">
          <source>GH#81: copy locally provided Lua DLL into installed package on Windows
(patch by Gareth Coles)</source>
          <target state="translated">GH # 81 : 로컬로 제공된 Lua DLL을 Windows에 설치된 패키지에 복사 (Gareth Coles의 패치)</target>
        </trans-unit>
        <trans-unit id="4add5096b1256d9c25bb8d1398e8e47991f7e11e" translate="yes" xml:space="preserve">
          <source>GH#82: Lua coroutines were using the wrong runtime state
(patch by Sergey Dobrov)</source>
          <target state="translated">GH # 82 : Lua 코 루틴이 잘못된 런타임 상태를 사용했습니다 (Sergey Dobrov의 패치).</target>
        </trans-unit>
        <trans-unit id="28b3f53eff312bcf695406d5b8c859b1e1e6f01e" translate="yes" xml:space="preserve">
          <source>GH#87: Lua stack trace is included in output in debug mode.
(patch by aaiyer)</source>
          <target state="translated">GH # 87 : Lua 스택 추적이 디버그 모드의 출력에 포함됩니다. (Aaiyer의 패치)</target>
        </trans-unit>
        <trans-unit id="472a5da758b7ba0c3b4585b9e0e01e52395bac8a" translate="yes" xml:space="preserve">
          <source>GH#91: Lua 5.3 is bundled in the source distribution to simplify
one-shot installs.
(patch by TitanSnow)</source>
          <target state="translated">GH # 91 : Lua 5.3은 원샷 설치를 단순화하기 위해 소스 배포에 번들로 제공됩니다. (TitanSnow의 패치)</target>
        </trans-unit>
        <trans-unit id="de385b26a18689f4b13efd155bbf6d594cb76177" translate="yes" xml:space="preserve">
          <source>GH#93: New method</source>
          <target state="translated">GH # 93 : 새로운 방법</target>
        </trans-unit>
        <trans-unit id="ae09b76c30511a558201c4f79a24d8e169e3cf00" translate="yes" xml:space="preserve">
          <source>GH#95: Improved compatibility with Lua 5.3.
(patch by TitanSnow)</source>
          <target state="translated">GH # 95 : Lua 5.3과의 호환성 개선. (TitanSnow의 패치)</target>
        </trans-unit>
        <trans-unit id="e07af39c79909da38d7eb2c9d32bbd4673526ab8" translate="yes" xml:space="preserve">
          <source>However, the Lua ecosystem lacks many of the batteries that Python
readily includes, either directly in its standard library or as third
party packages. This makes real-world Lua applications harder to write
than equivalent Python applications. Lua is therefore not commonly
used as primary language for large applications, but it makes for a
fast, high-level and resource-friendly backup language inside of
Python when raw speed is required and the edit-compile-run cycle of
binary extension modules is too heavy and too static for agile
development or hot-deployment.</source>
          <target state="translated">그러나 Lua 생태계에는 Python이 표준 라이브러리에 직접 포함하거나 타사 패키지로 쉽게 포함 할 수있는 배터리가 부족합니다. 따라서 실제 Lua 애플리케이션은 동등한 Python 애플리케이션보다 작성하기가 더 어렵습니다. 따라서 Lua는 일반적으로 대규모 응용 프로그램의 기본 언어로 사용되지 않지만 원시 속도가 필요하고 바이너리 확장 모듈의 편집-컴파일-실행주기가 다음과 같을 때 Python 내부에서 빠르고 높은 수준의 리소스 친화적 인 백업 언어를 만듭니다. 민첩한 개발이나 핫 배포에 너무 무겁고 정적입니다.</target>
        </trans-unit>
        <trans-unit id="9571590928811cf81ebae7e60d45dc32fa89b05a" translate="yes" xml:space="preserve">
          <source>If this setup fails, however, you have to set the flags manually.
When using the above configuration call, the argument</source>
          <target state="translated">그러나이 설정이 실패하면 플래그를 수동으로 설정해야합니다. 위의 구성 호출을 사용할 때 인수</target>
        </trans-unit>
        <trans-unit id="b963dd2e2ba4a6fa4e3569f9940f3d7571c8cb20" translate="yes" xml:space="preserve">
          <source>If you do not control the function implementation, you can also just
manually wrap a callable object when passing it into Lupa:</source>
          <target state="translated">함수 구현을 제어하지 않는 경우 Lupa에 전달할 때 호출 가능한 객체를 수동으로 래핑 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="84b4d1745aaab1d8bb260adc890b3c3dd536d4db" translate="yes" xml:space="preserve">
          <source>If you need specific C compiler flags, pass them to</source>
          <target state="translated">특정 C 컴파일러 플래그가 필요한 경우 다음으로 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="2f7794164c0bea82dfb6e568311c21471e55f150" translate="yes" xml:space="preserve">
          <source>Importing Lua binary modules</source>
          <target state="translated">Lua 바이너리 모듈 가져 오기</target>
        </trans-unit>
        <trans-unit id="d82d918809a8a16f9e20ae8122a3bc646a8deb8b" translate="yes" xml:space="preserve">
          <source>In Latin, &amp;ldquo;lupa&amp;rdquo; is a female wolf, as elegant and wild as it sounds.
If you don&amp;rsquo;t like this kind of straight forward allegory to an
endangered species, you may also happily assume it&amp;rsquo;s just an
amalgamation of the phonetic sounds that start the words &amp;ldquo;Lua&amp;rdquo; and
&amp;ldquo;Python&amp;rdquo;, two from each to keep the balance.</source>
          <target state="translated">라틴어로 &quot;lupa&quot;는 소리만큼 우아하고 거친 암컷 늑대입니다. 멸종 위기에 처한 종에 대한 이런 종류의 직접적인 우화가 마음에 들지 않는다면, 균형을 유지하기 위해 &quot;Lua&quot;와 &quot;Python&quot;이라는 단어를 시작하는 소리 나는 소리의 혼합이라고 생각할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="89d4f07870887020932ec3e7db42801c0b0f2686" translate="yes" xml:space="preserve">
          <source>Install Lua 5.2 development package:</source>
          <target state="translated">Lua 5.2 개발 패키지를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="9bb0b2f16c0f46c1055a3475f17b064ab3eaed30" translate="yes" xml:space="preserve">
          <source>Install Lua:</source>
          <target state="translated">Lua 설치 :</target>
        </trans-unit>
        <trans-unit id="4d0e03d6bf5e1dcdb6c7459a0bb21e5be7a443a9" translate="yes" xml:space="preserve">
          <source>Install LuaJIT2 development package:</source>
          <target state="translated">LuaJIT2 개발 패키지를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="d5e97653289639304d75b97a6c990116b6400ccc" translate="yes" xml:space="preserve">
          <source>Install lupa:</source>
          <target state="translated">lupa 설치 :</target>
        </trans-unit>
        <trans-unit id="d66f07b8bcab0c22bc0088549aa6c51cead607d7" translate="yes" xml:space="preserve">
          <source>Install pkg-config:</source>
          <target state="translated">pkg-config를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="40ffef4331c9a3e695590f96efd2626a8b1bb66b" translate="yes" xml:space="preserve">
          <source>Installing lupa</source>
          <target state="translated">Lupa 설치</target>
        </trans-unit>
        <trans-unit id="cadeabf72207a82698f93b95d8ef282abb9bb5d0" translate="yes" xml:space="preserve">
          <source>Installing lupa from packages</source>
          <target state="translated">패키지에서 lupa 설치</target>
        </trans-unit>
        <trans-unit id="9000515f90c77b293d1513ba19b0bacd31a3166e" translate="yes" xml:space="preserve">
          <source>Instead of passing a wrapped</source>
          <target state="translated">포장을 전달하는 대신</target>
        </trans-unit>
        <trans-unit id="2a9cdcd5fc521690e5f90db10ab5c07555d14d93" translate="yes" xml:space="preserve">
          <source>It also works to create coroutines in Lua and to pass them back into
Python space:</source>
          <target state="translated">또한 Lua에서 코 루틴을 생성하고이를 Python 공간으로 다시 전달합니다.</target>
        </trans-unit>
        <trans-unit id="7574f0ea023956d0c0d936ce71eb401ce531681e" translate="yes" xml:space="preserve">
          <source>It complements Python very well.  Lua is a language as dynamic as
Python, but LuaJIT compiles it to very fast machine code, sometimes
faster than many statically compiled languages for computational code.
The language runtime is very small and carefully designed for
embedding.  The complete binary module of Lupa, including a statically
linked LuaJIT2 runtime, only weighs some 700KB on a 64 bit machine.
With standard Lua 5.1, it&amp;rsquo;s less than 400KB.</source>
          <target state="translated">파이썬을 아주 잘 보완합니다. Lua는 Python만큼 동적 인 언어이지만 LuaJIT는이를 매우 빠른 기계 코드로 컴파일합니다. 때로는 계산 코드를 위해 많은 정적으로 컴파일 된 언어보다 빠릅니다. 언어 런타임은 매우 작고 임베딩을 위해 신중하게 설계되었습니다. 정적으로 연결된 LuaJIT2 런타임을 포함하여 Lupa의 완전한 바이너리 모듈은 64 비트 머신에서 무게가 약 700KB에 불과합니다. 표준 Lua 5.1에서는 400KB 미만입니다.</target>
        </trans-unit>
        <trans-unit id="f10062fc330c52dd5cc1a44dfe962ba916c0f7b3" translate="yes" xml:space="preserve">
          <source>It is possible to use</source>
          <target state="translated">사용 가능</target>
        </trans-unit>
        <trans-unit id="ee9505d08b7333e9830ed5bd0c035cda7e16de1e" translate="yes" xml:space="preserve">
          <source>Iteration in Lua</source>
          <target state="translated">Lua의 반복</target>
        </trans-unit>
        <trans-unit id="985bb13f3d08c7156570cc697135996411eb693f" translate="yes" xml:space="preserve">
          <source>Iteration over Python objects from Lua&amp;rsquo;s for-loop is fully supported.
However, Python iterables need to be converted using one of the
utility functions which are described here.  This is similar to the
functions like</source>
          <target state="translated">Lua의 for-loop에서 Python 객체에 대한 반복이 완벽하게 지원됩니다. 그러나 Python iterables는 여기에 설명 된 유틸리티 함수 중 하나를 사용하여 변환해야합니다. 이것은 다음과 같은 기능과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="b0832074630eb731d7fbe8074de48a90cd9bb220" translate="yes" xml:space="preserve">
          <source>Lua</source>
          <target state="translated">루아</target>
        </trans-unit>
        <trans-unit id="30bbe2f33c054501bdc68adb8c4195a2af58c309" translate="yes" xml:space="preserve">
          <source>Lua Coroutines</source>
          <target state="translated">루아 코 루틴</target>
        </trans-unit>
        <trans-unit id="a93bd38917b0c371f6cfedd4f24182c2979042f2" translate="yes" xml:space="preserve">
          <source>Lua Tables</source>
          <target state="translated">루아 테이블</target>
        </trans-unit>
        <trans-unit id="67c500f56910dd413ffe80c07d0a6440835cb09d" translate="yes" xml:space="preserve">
          <source>Lua coroutine support through dedicated wrapper classes, including
Python iteration support.  In Python space, Lua coroutines behave
exactly like Python generators.</source>
          <target state="translated">Python 반복 지원을 포함한 전용 래퍼 클래스를 통한 Lua 코 루틴 지원. Python 공간에서 Lua 코 루틴은 Python 생성기와 똑같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="8e2ead8de17c8055d0663e9053c698206e995625" translate="yes" xml:space="preserve">
          <source>Lua doesn&amp;rsquo;t have a dedicated syntax for named arguments, so by default
Python callables can only be called using positional arguments.</source>
          <target state="translated">Lua에는 명명 된 인수에 대한 전용 구문이 없으므로 기본적으로 Python 콜 러블은 위치 인수를 사용해서 만 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c75fc4505fabfee11670cf2a00499293eec2cded" translate="yes" xml:space="preserve">
          <source>Lua error messages were not properly decoded</source>
          <target state="translated">Lua 오류 메시지가 제대로 디코딩되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="be14136c2c9375fcdeffa3c854dc5c3680dd8bf7" translate="yes" xml:space="preserve">
          <source>Lua supports two main protocols on objects: calling and indexing.  It
does not distinguish between attribute access and item access like
Python does, so the Lua operations</source>
          <target state="translated">Lua는 객체에 대해 호출과 인덱싱이라는 두 가지 주요 프로토콜을 지원합니다. Python처럼 속성 액세스와 항목 액세스를 구분하지 않으므로 Lua 작업은</target>
        </trans-unit>
        <trans-unit id="525e61a72a14003167bd9ad3fdb980e023cc17e7" translate="yes" xml:space="preserve">
          <source>Lua tables mimic Python&amp;rsquo;s mapping protocol.  For the special case of
array tables, Lua automatically inserts integer indices as keys into
the table.  Therefore, indexing starts from 1 as in Lua instead of 0
as in Python.  For the same reason, negative indexing does not work.
It is best to think of Lua tables as mappings rather than arrays, even
for plain array tables.</source>
          <target state="translated">Lua 테이블은 Python의 매핑 프로토콜을 모방합니다. 배열 테이블의 특수한 경우, Lua는 자동으로 정수 인덱스를 테이블에 키로 삽입합니다. 따라서 인덱싱은 Python에서와 같이 0이 아닌 Lua에서와 같이 1부터 시작됩니다. 같은 이유로 네거티브 인덱싱이 작동하지 않습니다. Lua 테이블을 일반 배열 테이블의 경우에도 배열이 아닌 매핑으로 생각하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="25bcc54d57c62ec485525eb90620b417d356c30c" translate="yes" xml:space="preserve">
          <source>Lua tables support Python&amp;rsquo;s &amp;ldquo;del&amp;rdquo; statement for item deletion
(patch by Jason Fried)</source>
          <target state="translated">Lua 테이블은 항목 삭제를위한 Python의 &quot;del&quot;문을 지원합니다 (Jason Fried의 패치).</target>
        </trans-unit>
        <trans-unit id="8f66422194135cdf96f1116c04b4ca257d2dba3e" translate="yes" xml:space="preserve">
          <source>LuaError</source>
          <target state="translated">LuaError</target>
        </trans-unit>
        <trans-unit id="00461e86a66fbadb93280d1fc700c080992552cf" translate="yes" xml:space="preserve">
          <source>LuaRuntime</source>
          <target state="translated">LuaRuntime</target>
        </trans-unit>
        <trans-unit id="3a692fcc1acb9a815490d2a648209b6fd827bf94" translate="yes" xml:space="preserve">
          <source>LuaRuntime.compile()</source>
          <target state="translated">LuaRuntime.compile ()</target>
        </trans-unit>
        <trans-unit id="cf9fd6a06590e4d34fcf07e4db4f923917cb037a" translate="yes" xml:space="preserve">
          <source>LuaRuntime.execute()</source>
          <target state="translated">LuaRuntime.execute ()</target>
        </trans-unit>
        <trans-unit id="ad9b63e8684f613aa7cdc279ff6ca8b7511e9fa8" translate="yes" xml:space="preserve">
          <source>LuaRuntime.globals()</source>
          <target state="translated">LuaRuntime.globals ()</target>
        </trans-unit>
        <trans-unit id="0fbc695391010bfc8a76f6d7aac75181cf0fd148" translate="yes" xml:space="preserve">
          <source>LuaRuntime.require()</source>
          <target state="translated">LuaRuntime.require ()</target>
        </trans-unit>
        <trans-unit id="1c71dc30230b3f3aec0fe2bf671acfa9255e0a11" translate="yes" xml:space="preserve">
          <source>LuaRuntime.run()</source>
          <target state="translated">LuaRuntime.run ()</target>
        </trans-unit>
        <trans-unit id="d6ff10e0f0beefec8e2f347b90b26a8add07d98e" translate="yes" xml:space="preserve">
          <source>LuaRuntime.table()</source>
          <target state="translated">LuaRuntime.table ()</target>
        </trans-unit>
        <trans-unit id="b5d6a355797b8cc87089ad14ab09b1146ffdd2ff" translate="yes" xml:space="preserve">
          <source>LuaRuntime.table_from(...)</source>
          <target state="translated">LuaRuntime.table_from (...)</target>
        </trans-unit>
        <trans-unit id="714d5646201d552efd6714d6e922df1716c55825" translate="yes" xml:space="preserve">
          <source>Lupa</source>
          <target state="translated">루파</target>
        </trans-unit>
        <trans-unit id="8bc80c03959c4c35d594e474ed28caa7bb7645b5" translate="yes" xml:space="preserve">
          <source>Lupa avoids this value escaping whenever it&amp;rsquo;s obviously not necessary.
Thus, when unpacking tuples during iteration, only the first value will
be subject to</source>
          <target state="translated">Lupa는 분명히 필요하지 않을 때마다이 값이 빠져 나가는 것을 피합니다. 따라서 반복 중에 튜플을 풀 때 첫 번째 값만</target>
        </trans-unit>
        <trans-unit id="553d1f233893a1c1e51ff07ae8a22d40f5886b94" translate="yes" xml:space="preserve">
          <source>Lupa change log</source>
          <target state="translated">Lupa 변경 로그</target>
        </trans-unit>
        <trans-unit id="82e5d0d6620cf95713418d6030fbb461bc306d68" translate="yes" xml:space="preserve">
          <source>Lupa integrates the runtimes of &lt;a href=&quot;http://lua.org/&quot;&gt;Lua&lt;/a&gt; or &lt;a href=&quot;http://luajit.org/&quot;&gt;LuaJIT2&lt;/a&gt; into CPython.
It is a partial rewrite of &lt;a href=&quot;http://labix.org/lunatic-python&quot;&gt;LunaticPython&lt;/a&gt; in &lt;a href=&quot;http://cython.org&quot;&gt;Cython&lt;/a&gt; with some
additional features such as proper coroutine support.</source>
          <target state="translated">Lupa는 &lt;a href=&quot;http://lua.org/&quot;&gt;Lua&lt;/a&gt; 또는 &lt;a href=&quot;http://luajit.org/&quot;&gt;LuaJIT2&lt;/a&gt; 의 런타임 을 CPython에 통합합니다 . 적절한 코 루틴 지원과 같은 몇 가지 추가 기능을 사용 하여 &lt;a href=&quot;http://cython.org&quot;&gt;Cython&lt;/a&gt; 의 &lt;a href=&quot;http://labix.org/lunatic-python&quot;&gt;LunaticPython&lt;/a&gt; 을 부분적으로 재 작성한 것입니다 .</target>
        </trans-unit>
        <trans-unit id="637697b9d7e022bb6d88b729c9351a7886d48568" translate="yes" xml:space="preserve">
          <source>Lupa is a very fast and thin wrapper around Lua or LuaJIT.  It makes it
easy to write dynamic Lua code that accompanies dynamic Python code by
switching between the two languages at runtime, based on the tradeoff
between simplicity and speed.</source>
          <target state="translated">Lupa는 Lua 또는 LuaJIT를 둘러싼 매우 빠르고 얇은 래퍼입니다. 단순성과 속도 간의 균형을 기반으로 런타임에 두 언어를 전환하여 동적 Python 코드를 수반하는 동적 Lua 코드를 쉽게 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58835c6b227ed47adf29a4f660b81e101458660f" translate="yes" xml:space="preserve">
          <source>Lupa now plays more nicely with other Lua extensions that create
userdata objects</source>
          <target state="translated">Lupa는 이제 userdata 개체를 생성하는 다른 Lua 확장과 더 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="32316fbffc1bd595e1c368015f2e5096ab7e58b5" translate="yes" xml:space="preserve">
          <source>Lupa provides a simple mechanism to control access to Python objects.
Each attribute access can be passed through a filter function as
follows:</source>
          <target state="translated">Lupa는 Python 객체에 대한 액세스를 제어하는 ​​간단한 메커니즘을 제공합니다. 각 속성 액세스는 다음과 같이 필터 함수를 통해 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="440e97577ae602bc5dda3f7665b14fce9ef6d8b0" translate="yes" xml:space="preserve">
          <source>Major features</source>
          <target state="translated">주요 기능</target>
        </trans-unit>
        <trans-unit id="f23f2e2185075a6c25798a73a7ce12a7853e6457" translate="yes" xml:space="preserve">
          <source>NOTE: When building on Windows, make sure that lua51.lib is made in addition
to lua51.dll. The MSVC build produces this file, MinGW does NOT.</source>
          <target state="translated">참고 : Windows에서 빌드 할 때 lua51.dll 외에도 lua51.lib가 만들어 졌는지 확인하십시오. MSVC 빌드는이 파일을 생성하지만 MinGW는 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d43a3b49bc134890f454d76eba4f56158d1142a1" translate="yes" xml:space="preserve">
          <source>NOTE: this release includes the major backwards incompatible changes listed
below.  It is believed that they simplify the interaction between Python code
and Lua code by more strongly following idiomatic Lua on the Lua side.</source>
          <target state="translated">참고 :이 릴리스에는 아래 나열된 이전 버전과 호환되지 않는 주요 변경 사항이 포함되어 있습니다. Lua 쪽에서 관용적 인 Lua를 더 강하게 따라 가면서 Python 코드와 Lua 코드 간의 상호 작용을 단순화한다고 믿어집니다.</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">없음</target>
        </trans-unit>
        <trans-unit id="66a73451a41081db626faeee12e46e13a78fa8fa" translate="yes" xml:space="preserve">
          <source>None vs. nil</source>
          <target state="translated">없음 대 없음</target>
        </trans-unit>
        <trans-unit id="6947ed8d08a658dcf615f13d74bcdade981ddeea" translate="yes" xml:space="preserve">
          <source>Note how the example creates a separate</source>
          <target state="translated">예제가 어떻게 별도의</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">참고</target>
        </trans-unit>
        <trans-unit id="41073890e9cf7fd9e3f9c591e8d94cd4988391f1" translate="yes" xml:space="preserve">
          <source>Note that accessing the</source>
          <target state="translated">액세스</target>
        </trans-unit>
        <trans-unit id="95ea67cadb7d8a6a757f759c8c2a960f70da720b" translate="yes" xml:space="preserve">
          <source>Note that it is best not to rely on the behaviour of len() for
mappings.  It might change in a later version of Lupa.</source>
          <target state="translated">매핑을 위해 len ()의 동작에 의존하지 않는 것이 가장 좋습니다. 이후 버전의 Lupa에서 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c469e4d9628c9aea8710272dbac55cee9a9e3b01" translate="yes" xml:space="preserve">
          <source>Note that on 64bit MacOS-X installations, the following additional
compiler flags are reportedly required due to the embedded LuaJIT:</source>
          <target state="translated">64 비트 MacOS-X 설치에서는 임베디드 LuaJIT로 인해 다음과 같은 추가 컴파일러 플래그가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="137073dab120a851a9879c45d99f7d15c532ae92" translate="yes" xml:space="preserve">
          <source>Note that the attributes of Python functions provide access to the
current</source>
          <target state="translated">Python 함수의 속성은 현재</target>
        </trans-unit>
        <trans-unit id="20cf24a6ef025b3223a035a127cc4279206499b6" translate="yes" xml:space="preserve">
          <source>Note that this applies to both LuaJIT and Lupa, so make sure
you try a clean build of everything if you forgot to set it
initially.</source>
          <target state="translated">이것은 LuaJIT와 Lupa 모두에 적용되므로 처음에 설정하는 것을 잊었다면 모든 것을 깨끗하게 빌드하십시오.</target>
        </trans-unit>
        <trans-unit id="97503ede6b79e8a07a59068e9e92dd0e4841a7a5" translate="yes" xml:space="preserve">
          <source>Note that this behaviour changed in Lupa 1.0.  Previously, the</source>
          <target state="translated">이 동작은 Lupa 1.0에서 변경되었습니다. 이전에는</target>
        </trans-unit>
        <trans-unit id="ce429b16a67bf6c2130b1f775161d327f5ecf988" translate="yes" xml:space="preserve">
          <source>Note that unlike Lua function objects, callable Python objects support
indexing in Lua:</source>
          <target state="translated">Lua 함수 객체와 달리 호출 가능한 Python 객체는 Lua에서 인덱싱을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7112c7f1bf50c01de7bb0ddc62d8c8db9307f852" translate="yes" xml:space="preserve">
          <source>Note the flag</source>
          <target state="translated">깃발에 주목</target>
        </trans-unit>
        <trans-unit id="c2e338821467694dae7f0b824258d4525218064c" translate="yes" xml:space="preserve">
          <source>OS X + Lua 5.2 + Homebrew</source>
          <target state="translated">OS X + Lua 5.2 + Homebrew</target>
        </trans-unit>
        <trans-unit id="150ab466d9233f62a31dfa351764d8aac46c438d" translate="yes" xml:space="preserve">
          <source>Obviously, this heuristic will fail to provide the required behaviour
in many cases, e.g. when attribute access is required to an object
that happens to support item access.  To be explicit about the
protocol that should be used, Lupa provides the helper functions</source>
          <target state="translated">분명히이 휴리스틱은 항목 액세스를 지원하는 객체에 속성 액세스가 필요한 경우와 같이 많은 경우에 필요한 동작을 제공하지 못합니다. 사용해야하는 프로토콜을 명확히하기 위해 Lupa는 도우미 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="058278fc2552e041a0b7f8e48949177230ee872b" translate="yes" xml:space="preserve">
          <source>On other systems, you may have to supply the build parameters
externally, e.g. using environment variables or by changing the
setup.py script manually.  Pass the</source>
          <target state="translated">다른 시스템에서는 환경 변수를 사용하거나 수동으로 setup.py 스크립트를 변경하여 빌드 매개 변수를 외부 적으로 제공해야 할 수 있습니다. 통과</target>
        </trans-unit>
        <trans-unit id="79b652cb8d3085ce293419206bcdeba800aeb507" translate="yes" xml:space="preserve">
          <source>On systems that use the &amp;ldquo;pkg-config&amp;rdquo; configuration mechanism, Lupa&amp;rsquo;s
setup.py will pick up either LuaJIT2 or Lua automatically, with a
preference for LuaJIT2 if it is found.  Pass the</source>
          <target state="translated">&quot;pkg-config&quot;구성 메커니즘을 사용하는 시스템에서 Lupa의 setup.py는 LuaJIT2 또는 Lua를 자동으로 선택하고 발견 된 경우 LuaJIT2를 선호합니다. 통과</target>
        </trans-unit>
        <trans-unit id="b388171ccf30a388f41350fa4b5d019519f391e4" translate="yes" xml:space="preserve">
          <source>One should be careful with passing</source>
          <target state="translated">추월에 조심해야한다</target>
        </trans-unit>
        <trans-unit id="1026da83d4d5ec8259c6372aa49458a2f8e45ed8" translate="yes" xml:space="preserve">
          <source>Or any other distutils target of your choice, such as</source>
          <target state="translated">또는 다음과 같이 선택한 다른 distutils 대상</target>
        </trans-unit>
        <trans-unit id="4428df60996dd395af6c51238f43c71d4400a7fa" translate="yes" xml:space="preserve">
          <source>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</source>
          <target state="translated">사용, 복사, 수정, 병합 권한을 포함하되 이에 국한되지 않는 제한없이 소프트웨어를 처리 할 수있는 권한이이 소프트웨어 및 관련 문서 파일 (이하 &quot;소프트웨어&quot;)의 사본을 획득 한 모든 사람에게 무료로 부여됩니다. 다음 조건에 따라 소프트웨어 사본을, 게시, 배포, 재 라이센스 및 / 또는 판매하고 소프트웨어를 제공받은 사람이 그렇게하도록 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8ee1d31f49bc59e7e2674c408fc50ce8f8ec05d3" translate="yes" xml:space="preserve">
          <source>Pratically all Python objects allow attribute access, so if the object
also has a</source>
          <target state="translated">실제로 모든 Python 객체는 속성 액세스를 허용하므로 객체에</target>
        </trans-unit>
        <trans-unit id="007a19a85a3d88ade8e9505f5ede06111f5d707c" translate="yes" xml:space="preserve">
          <source>Py3.x build fixes</source>
          <target state="translated">Py3.x 빌드 수정</target>
        </trans-unit>
        <trans-unit id="5eacb07fef5e3c93c8817dbf683217f161d437a8" translate="yes" xml:space="preserve">
          <source>Py_None</source>
          <target state="translated">Py_None</target>
        </trans-unit>
        <trans-unit id="27bedfb708344c23c3b430402dd8bd354196abfd" translate="yes" xml:space="preserve">
          <source>Python Callables</source>
          <target state="translated">파이썬 콜 러블</target>
        </trans-unit>
        <trans-unit id="5f364f5a2096bfc2c363883d4ba554ee4b39f9a4" translate="yes" xml:space="preserve">
          <source>Python coroutine wrapper for Lua coroutines</source>
          <target state="translated">Lua 코 루틴 용 Python 코 루틴 래퍼</target>
        </trans-unit>
        <trans-unit id="30057309b73b826cc08452e776a9d31adbf53109" translate="yes" xml:space="preserve">
          <source>Python functions/methods wrapped in these decorators can be called from
Lua code as</source>
          <target state="translated">이러한 데코레이터로 래핑 된 Python 함수 / 메소드는 Lua 코드에서 다음과 같이 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0245f7b05864e0e976826fc3a46153442925f3ea" translate="yes" xml:space="preserve">
          <source>Python iteration support for Lua objects (e.g. tables)</source>
          <target state="translated">Lua 객체 (예 : 테이블)에 대한 Python 반복 지원</target>
        </trans-unit>
        <trans-unit id="289f08e95d085ed41eb84f33f694273d3ef8959b" translate="yes" xml:space="preserve">
          <source>Python module that
defines the necessary flag constants.  In that case, using binary
modules in Lua should work out of the box.</source>
          <target state="translated">필요한 플래그 상수를 정의하는 Python 모듈. 이 경우 Lua에서 바이너리 모듈을 사용하면 즉시 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d39ae1f711c465008e5cf09e54568d5d99da80bf" translate="yes" xml:space="preserve">
          <source>Python objects are either converted when passed into Lua (e.g.
numbers and strings) or passed as wrapped object references.</source>
          <target state="translated">Python 객체는 Lua (예 : 숫자 및 문자열)로 전달 될 때 변환되거나 래핑 된 객체 참조로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="563e0e1dfb871811d7060c28dc713b24f9ac867e" translate="yes" xml:space="preserve">
          <source>Python objects in Lua</source>
          <target state="translated">Lua의 Python 객체</target>
        </trans-unit>
        <trans-unit id="52fffeb7fcb877f417704aaa900d7fb36b4a9032" translate="yes" xml:space="preserve">
          <source>Python wrapper around Lua and LuaJIT</source>
          <target state="translated">Lua 및 LuaJIT 주변의 Python 래퍼</target>
        </trans-unit>
        <trans-unit id="ca7a54ca18ec7d86738b5a8ee61852abefbd6eff" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s</source>
          <target state="translated">파이썬</target>
        </trans-unit>
        <trans-unit id="222fd2e5cef2e782850e7e961d3e145177fe55f7" translate="yes" xml:space="preserve">
          <source>RTLD_GLOBAL</source>
          <target state="translated">RTLD_GLOBAL</target>
        </trans-unit>
        <trans-unit id="9cbf1a94b8150546e1e7a9aba2d61fff3817888a" translate="yes" xml:space="preserve">
          <source>RTLD_NEW</source>
          <target state="translated">RTLD_NEW</target>
        </trans-unit>
        <trans-unit id="faec5b411587c2653176d0edaefa55f544d10f28" translate="yes" xml:space="preserve">
          <source>Reportedly, it also works to use Lupa with the standard (non-JIT) Lua
runtime.  To that end, install Lua 5.1 instead of LuaJIT2, including
any development packages (header files etc.).</source>
          <target state="translated">보고 된 바에 따르면 표준 (비 JIT) Lua 런타임과 함께 Lupa를 사용하도록 작동합니다. 이를 위해 모든 개발 패키지 (헤더 파일 등)를 포함하여 LuaJIT2 대신 Lua 5.1을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="8e3a9e517fc115db425d530c9f7882fce4411131" translate="yes" xml:space="preserve">
          <source>Restricting Lua access to Python objects</source>
          <target state="translated">Python 객체에 대한 Lua 액세스 제한</target>
        </trans-unit>
        <trans-unit id="7410bccc628c4a1d094dc7366e032b37e3d25461" translate="yes" xml:space="preserve">
          <source>Similar to the table interface provided by Lua, Lupa also supports
attribute access to table members:</source>
          <target state="translated">Lua에서 제공하는 테이블 인터페이스와 유사하게 Lupa는 테이블 멤버에 대한 속성 액세스도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="1d338ccf06b94256da0cd89a39dae0b36ea1aee1" translate="yes" xml:space="preserve">
          <source>Since Lupa 1.0, you can alternatively provide dedicated getter and
setter function implementations for a</source>
          <target state="translated">Lupa 1.0부터는 전용 getter 및 setter 함수 구현을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="468f68408e678c9a3d1bcf5c2ecb96c73ed1fbc3" translate="yes" xml:space="preserve">
          <source>Since the default behaviour (to not explode tuples) might change in a
later version of Lupa, it is best to always pass this flag explicitly.</source>
          <target state="translated">튜플을 분해하지 않는 기본 동작은 이후 버전의 Lupa에서 변경 될 수 있으므로 항상이 플래그를 명시 적으로 전달하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="97c99e783b5c6995773458002b7ef53284d704b4" translate="yes" xml:space="preserve">
          <source>THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.</source>
          <target state="translated">소프트웨어는 상품성, 특정 목적에의 적합성 및 비 침해에 대한 보증을 포함하되 이에 국한되지 않는 어떠한 종류의 명시 적 또는 묵시적 보증없이 &quot;있는 그대로&quot;제공됩니다. 어떠한 경우에도 작성자 또는 저작권 보유자는 계약, 불법 행위 또는 기타 방식으로 소프트웨어 또는 소프트웨어의 사용 또는 기타 거래와 관련하여 발생하는 모든 청구, 손해 또는 기타 책임에 대해 책임을지지 않습니다. 소프트웨어.</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">그만큼</target>
        </trans-unit>
        <trans-unit id="abf94dbab29db68325894cd60a65f3c2a1fc56fa" translate="yes" xml:space="preserve">
          <source>The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.</source>
          <target state="translated">상기 저작권 고지 및이 허가 고지는 소프트웨어의 모든 사본 또는 상당 부분에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c2d7a3789666f42eb71a9498df4feb022b102db0" translate="yes" xml:space="preserve">
          <source>The following example calculates a mandelbrot image in parallel
threads and displays the result in PIL. It is based on a &lt;a href=&quot;http://shootout.alioth.debian.org/u64/program.php?test=mandelbrot&amp;amp;lang=luajit&amp;amp;id=1&quot;&gt;benchmark
implementation&lt;/a&gt; for the &lt;a href=&quot;http://shootout.alioth.debian.org/u64/benchmark.php?test=all&amp;amp;lang=luajit&amp;amp;lang2=python3&quot;&gt;Computer Language Benchmarks Game&lt;/a&gt;.</source>
          <target state="translated">다음 예제는 병렬 스레드에서 mandelbrot 이미지를 계산하고 결과를 PIL로 표시합니다. 이는 &lt;a href=&quot;http://shootout.alioth.debian.org/u64/benchmark.php?test=all&amp;amp;lang=luajit&amp;amp;lang2=python3&quot;&gt;컴퓨터 언어 벤치 마크 게임&lt;/a&gt; 에 대한 &lt;a href=&quot;http://shootout.alioth.debian.org/u64/program.php?test=mandelbrot&amp;amp;lang=luajit&amp;amp;id=1&quot;&gt;벤치 마크 구현&lt;/a&gt; 을 기반으로합니다 .</target>
        </trans-unit>
        <trans-unit id="c7c7ff8a6b152356b1c3b87a4fa36cf4002b4367" translate="yes" xml:space="preserve">
          <source>The function</source>
          <target state="translated">함수</target>
        </trans-unit>
        <trans-unit id="2b6ea5139d2ef1b7ecc042d5db14deed8e309ae8" translate="yes" xml:space="preserve">
          <source>The next is an example of Lua coroutines.  A wrapped Lua coroutine
behaves exactly like a Python coroutine.  It needs to get created at
the beginning, either by using the</source>
          <target state="translated">다음은 루아 코 루틴의 예입니다. 래핑 된 Lua 코 루틴은 Python 코 루틴과 똑같이 작동합니다. 처음에는 다음을 사용하여 만들어야합니다.</target>
        </trans-unit>
        <trans-unit id="c9f80909fa6f8630b038f495a08cffc3e393a5fb" translate="yes" xml:space="preserve">
          <source>The only place where this cannot work is during iteration, because Lua
considers a</source>
          <target state="translated">이것이 작동하지 않는 유일한 장소는 반복하는 동안입니다. Lua는</target>
        </trans-unit>
        <trans-unit id="3ea08a710ccd5abee84ca77d28377d406d442756" translate="yes" xml:space="preserve">
          <source>There are some limitations:</source>
          <target state="translated">몇 가지 제한 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="93667178ba5fd64dd5dc722560a8ab633086cf09" translate="yes" xml:space="preserve">
          <source>This enables access to Lua &amp;lsquo;methods&amp;rsquo; that are associated with a table,
as used by the standard library modules:</source>
          <target state="translated">이를 통해 표준 라이브러리 모듈에서 사용하는 테이블과 관련된 Lua '메서드'에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6c56c99218608ecb8b7fc6da07ec256c352fbea" translate="yes" xml:space="preserve">
          <source>This is because</source>
          <target state="translated">이 때문입니다</target>
        </trans-unit>
        <trans-unit id="5541d0b76d127f6a3c54bbc247ffcc1b6c2bbc25" translate="yes" xml:space="preserve">
          <source>Threading</source>
          <target state="translated">스레딩</target>
        </trans-unit>
        <trans-unit id="d773911ed88672a1ffc4f4dfe86616e592b9e58f" translate="yes" xml:space="preserve">
          <source>To help in distinguishing between wrapped Lua objects and normal
Python objects, it returns</source>
          <target state="translated">래핑 된 Lua 객체와 일반 Python 객체를 구별하는 데 도움이되도록 다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f016bdcf21e7be946954afd5a8b55cb79c732b20" translate="yes" xml:space="preserve">
          <source>To iterate over a plain Python iterable, use the</source>
          <target state="translated">일반 Python 반복 가능을 반복하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8e0f091f653b842293b69fd2363a88de752ce06d" translate="yes" xml:space="preserve">
          <source>To simplify the table creation from Python, the</source>
          <target state="translated">Python에서 테이블 생성을 단순화하기 위해</target>
        </trans-unit>
        <trans-unit id="b0f206dd39de7180d98eaa233b78208f67d54d84" translate="yes" xml:space="preserve">
          <source>To use binary modules in Lua, you need to compile them against the
header files of the LuaJIT sources that you used to build Lupa, but do
not link them against the LuaJIT library.</source>
          <target state="translated">Lua에서 바이너리 모듈을 사용하려면 Lupa를 빌드하는 데 사용한 LuaJIT 소스의 헤더 파일에 대해 컴파일해야하지만 LuaJIT 라이브러리에 링크하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="694f50881d7d3a5f4d7feed54d793899fed71b86" translate="yes" xml:space="preserve">
          <source>Unpack the archive into the lupa base directory, e.g.:</source>
          <target state="translated">lupa 기본 디렉토리에 아카이브의 압축을 풉니 다. 예 :</target>
        </trans-unit>
        <trans-unit id="10d4fac767cb9519f0cf8c2d75992c7495fd7e89" translate="yes" xml:space="preserve">
          <source>Use Lua 5.3.5 in binary wheels and as bundled Lua.</source>
          <target state="translated">바이너리 휠과 번들로 제공되는 Lua에서 Lua 5.3.5를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">언제</target>
        </trans-unit>
        <trans-unit id="d3faa6093cb2b173ab36dd2c19f533262680b7ef" translate="yes" xml:space="preserve">
          <source>When calling bound Python methods from Lua as &amp;ldquo;obj:meth()&amp;rdquo;, Lupa now
prevents Python from prepending the self argument a second time, so that
the Python method is now called as &amp;ldquo;obj.meth()&amp;rdquo;.  Previously, it was called
as &amp;ldquo;obj.meth(obj)&amp;rdquo;.  Note that this can be undesired when the object itself
is explicitly passed as first argument from Lua, e.g. when calling
&amp;ldquo;func(obj)&amp;rdquo; where &amp;ldquo;func&amp;rdquo; is &amp;ldquo;obj.meth&amp;rdquo;, but these constellations should be
rare.  As a work-around for this case, user code can wrap the bound method
in another function so that the final call comes from Python.</source>
          <target state="translated">Lua에서 바인딩 된 Python 메서드를 &quot;obj : meth ()&quot;로 호출 할 때 Lupa는 이제 Python이 self 인수를 두 번째로 추가하는 것을 방지하므로 Python 메서드가 이제 &quot;obj.meth ()&quot;로 호출됩니다. 이전에는&amp;ldquo;obj.meth (obj)&amp;rdquo;라고 불렀습니다. 객체 자체가 Lua의 첫 번째 인수로 명시 적으로 전달되는 경우 (예 : &quot;func&quot;가 &quot;obj.meth&quot;인 &quot;func (obj)&quot;를 호출 할 때) 바람직하지 않을 수 있지만 이러한 성상은 드 물어야합니다. 이 경우에 대한 해결 방법으로 사용자 코드는 바인딩 된 메서드를 다른 함수로 래핑하여 최종 호출이 Python에서 나오도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a424160d3f332f44b32feec1f040118ec0cef13" translate="yes" xml:space="preserve">
          <source>When set to False, functions that return a tuple pass it through to the
Lua code:</source>
          <target state="translated">False로 설정하면 튜플을 반환하는 함수가이를 Lua 코드로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="d86a5675cc6478e7030415aaa83cd72801292548" translate="yes" xml:space="preserve">
          <source>While</source>
          <target state="translated">동안</target>
        </trans-unit>
        <trans-unit id="bd45183335ffb14fc502cb3c14dab86e65f058b3" translate="yes" xml:space="preserve">
          <source>Why the name?</source>
          <target state="translated">이름이 왜?</target>
        </trans-unit>
        <trans-unit id="c154a04c769441a48420e4a59edc95a7d78b7241" translate="yes" xml:space="preserve">
          <source>Why use it?</source>
          <target state="translated">왜 사용합니까?</target>
        </trans-unit>
        <trans-unit id="43ce99872a273c78cad7d71c415d0eb0e7a43324" translate="yes" xml:space="preserve">
          <source>Windows build fixes</source>
          <target state="translated">Windows 빌드 수정</target>
        </trans-unit>
        <trans-unit id="9b9d72b4c824f776fddb4d291d3479c138c827ea" translate="yes" xml:space="preserve">
          <source>Wrapped Lua objects get unwrapped when they are passed back into Lua,
and arbitrary Python objects get wrapped in different ways:</source>
          <target state="translated">래핑 된 Lua 객체는 Lua로 다시 전달 될 때 래핑 해제되고 임의의 Python 객체는 다른 방식으로 래핑됩니다.</target>
        </trans-unit>
        <trans-unit id="ee1f9951d1e1458b042ed8554442b3401ac88b18" translate="yes" xml:space="preserve">
          <source>You can find additional installation hints for MacOS-X in this
&lt;a href=&quot;http://t-p-j.blogspot.com/2010/11/lupa-on-os-x-with-macports-python-26.html&quot;&gt;somewhat unclear blog post&lt;/a&gt;, which may or may not tell you at
which point in the installation process to provide these flags.</source>
          <target state="translated">이 &lt;a href=&quot;http://t-p-j.blogspot.com/2010/11/lupa-on-os-x-with-macports-python-26.html&quot;&gt;다소 불명확 한 블로그 게시물&lt;/a&gt; 에서 MacOS-X에 대한 추가 설치 힌트를 찾을 수 있습니다.이 블로그 게시물 은 이러한 플래그를 제공 할 설치 프로세스의 어느 지점을 알려줄 수도 있고 그렇지 않을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="27f4d2f24fb01668d7628034c810f68c5a73ab28" translate="yes" xml:space="preserve">
          <source>__getitem__</source>
          <target state="translated">__getitem__</target>
        </trans-unit>
        <trans-unit id="f46d45e8d75816fc6af722964bbf2e0116c0506a" translate="yes" xml:space="preserve">
          <source>__tostring()</source>
          <target state="translated">__tostring ()</target>
        </trans-unit>
        <trans-unit id="40c562a3d6c7d70c7985444364e1851f4128eeef" translate="yes" xml:space="preserve">
          <source>accept optional positional arguments
(patch by John Vandenberg)</source>
          <target state="translated">선택적 위치 인수 허용 (John Vandenberg의 패치)</target>
        </trans-unit>
        <trans-unit id="2ed76dc44638a91203cc151e537732232c3ff1f2" translate="yes" xml:space="preserve">
          <source>access to Python&amp;rsquo;s</source>
          <target state="translated">Python에 대한 액세스</target>
        </trans-unit>
        <trans-unit id="abbb1ad836bbc98032705582e8f66dcb3c2e53b4" translate="yes" xml:space="preserve">
          <source>added missing files to source distribution</source>
          <target state="translated">소스 배포에 누락 된 파일 추가</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="559658ad12480c2413631a10e707592af46a2343" translate="yes" xml:space="preserve">
          <source>and returns the index before that.  This
works well for array tables that do not contain</source>
          <target state="translated">그 이전의 인덱스를 반환합니다. 이것은 포함하지 않는 배열 테이블에서 잘 작동합니다.</target>
        </trans-unit>
        <trans-unit id="48b31b068c14afdf94c3274907fdfd80aedbb77b" translate="yes" xml:space="preserve">
          <source>and subscripting of Lua objects</source>
          <target state="translated">Lua 객체의 첨자</target>
        </trans-unit>
        <trans-unit id="d56ce2625c37622c57b2256eabbb2105b8840e5c" translate="yes" xml:space="preserve">
          <source>and therefore to the builtins etc.  If you want
to safely restrict access to a known set of Python objects, it is best
to work with a whitelist of safe attribute names.  One way to do that
could be to use a well selected list of dedicated API objects that you
provide to Lua code, and to only allow Python attribute access to the
set of public attribute/method names of these objects.</source>
          <target state="translated">따라서 빌트인 등으로 지정합니다. 알려진 Python 객체 세트에 대한 액세스를 안전하게 제한하려면 안전한 속성 이름의 화이트리스트를 사용하는 것이 가장 좋습니다. 이를 수행하는 한 가지 방법은 Lua 코드에 제공하는 잘 선택된 전용 API 개체 목록을 사용하고 이러한 개체의 공용 속성 / 메서드 이름 집합에 대한 Python 속성 액세스 만 허용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="47f7f3104c9e12b378c8e7f7f8b898db0db46e92" translate="yes" xml:space="preserve">
          <source>and thus the
following unpacked items will never be mapped to</source>
          <target state="translated">따라서 다음의 압축 해제 된 항목은 절대로 매핑되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="36c2f82b7b860765184be56e83f657110fdbecc3" translate="yes" xml:space="preserve">
          <source>argument&amp;rdquo; or &amp;ldquo;call</source>
          <target state="translated">논쟁 &quot;또는&quot;전화</target>
        </trans-unit>
        <trans-unit id="21aa632bea277c3d730e42dee00088f9c0cc5032" translate="yes" xml:space="preserve">
          <source>argument&amp;rdquo;.</source>
          <target state="translated">논의&quot;.</target>
        </trans-unit>
        <trans-unit id="19aca5516b17e452e7b7b291f5ece1179d2a9386" translate="yes" xml:space="preserve">
          <source>argument).  Patch by Brian Moe.</source>
          <target state="translated">논의). Brian Moe의 패치.</target>
        </trans-unit>
        <trans-unit id="db8309b469b2f8e82f1db94383f5c7423cfddd19" translate="yes" xml:space="preserve">
          <source>as a</source>
          <target state="translated">로</target>
        </trans-unit>
        <trans-unit id="e9d4ba97940c3413e34cd514b7ef7f04852c22c9" translate="yes" xml:space="preserve">
          <source>as a parameter can mean either
&amp;ldquo;omit a parameter&amp;rdquo; or &amp;ldquo;pass None&amp;rdquo;.  This even depends on the Lua version.</source>
          <target state="translated">as a parameter는 &quot;omit a parameter&quot;또는 &quot;pass None&quot;을 의미 할 수 있습니다. 이것은 Lua 버전에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="44b2b85ecf80cc5b480b0158de904c01eefa0d24" translate="yes" xml:space="preserve">
          <source>as follows:</source>
          <target state="translated">다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="bebc3c2971a1e93dfded881d9dd68ccc1d8552f6" translate="yes" xml:space="preserve">
          <source>as_attrgetter()</source>
          <target state="translated">as_attrgetter ()</target>
        </trans-unit>
        <trans-unit id="cb3b489c7d3f1c36582e21fedc7f1e25038e6422" translate="yes" xml:space="preserve">
          <source>as_itemgetter()</source>
          <target state="translated">as_itemgetter ()</target>
        </trans-unit>
        <trans-unit id="613b5a9986468bc8bb7ab25161fda833fb1070a4" translate="yes" xml:space="preserve">
          <source>at call time if they are not callable)</source>
          <target state="translated">호출 할 수없는 경우 호출 시간에)</target>
        </trans-unit>
        <trans-unit id="d7c0a9b0afc7b322bdbc1075a1f07419f89fe4d5" translate="yes" xml:space="preserve">
          <source>attrgetter</source>
          <target state="translated">attrgetter</target>
        </trans-unit>
        <trans-unit id="491928c51fb189313c321703b821aadde2aea79b" translate="yes" xml:space="preserve">
          <source>attribute read access on Lua objects, e.g. to read Lua table values
from Python</source>
          <target state="translated">Lua 객체에 대한 속성 읽기 액세스 (예 : Python에서 Lua 테이블 값 읽기)</target>
        </trans-unit>
        <trans-unit id="27bf7dbec2a090fbf6798ced4ccf67b841fabc45" translate="yes" xml:space="preserve">
          <source>attribute_handlers</source>
          <target state="translated">attribute_handlers</target>
        </trans-unit>
        <trans-unit id="2c60b63a5614a533debe0f33edbb8fb544d6c8fd" translate="yes" xml:space="preserve">
          <source>availability of</source>
          <target state="translated">가용성</target>
        </trans-unit>
        <trans-unit id="e6e7b2e7cfe124ae7fa87ed5f68eec4cfff49665" translate="yes" xml:space="preserve">
          <source>bdist</source>
          <target state="translated">bdist</target>
        </trans-unit>
        <trans-unit id="99007dfaab843abf6b82cab6ba8e6c863bcb0418" translate="yes" xml:space="preserve">
          <source>both map
to indexing.  To decide which Python protocol to use for Lua wrapped
objects, Lupa employs a simple heuristic.</source>
          <target state="translated">둘 다 인덱싱에 매핑됩니다. Lua 래핑 된 객체에 사용할 Python 프로토콜을 결정하기 위해 Lupa는 간단한 휴리스틱을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">짓다</target>
        </trans-unit>
        <trans-unit id="9177923b86d48bb61db3d463d86af5de9d256157" translate="yes" xml:space="preserve">
          <source>built with Cython 0.20.1</source>
          <target state="translated">Cython 0.20.1로 구축</target>
        </trans-unit>
        <trans-unit id="d80150c16d664a77464db7162249ad628a3f856b" translate="yes" xml:space="preserve">
          <source>built with Cython 0.23.4</source>
          <target state="translated">Cython 0.23.4로 구축</target>
        </trans-unit>
        <trans-unit id="1903578e7ade96e5e357cfaa970f17f66ebd7db7" translate="yes" xml:space="preserve">
          <source>built with Cython 0.24</source>
          <target state="translated">Cython 0.24로 제작</target>
        </trans-unit>
        <trans-unit id="c6d1ccf39079fb14194051e980fd5c055e878681" translate="yes" xml:space="preserve">
          <source>built with Cython 0.25.2</source>
          <target state="translated">Cython 0.25.2로 제작</target>
        </trans-unit>
        <trans-unit id="aeaba84990f715e46470157dc691d14182fcc956" translate="yes" xml:space="preserve">
          <source>callbacks returned from Lua coroutines were incorrectly mixing
coroutine state with global Lua state (patch by Mikhail Korobov)</source>
          <target state="translated">Lua 코 루틴에서 반환 된 콜백이 코 루틴 상태와 전역 Lua 상태를 잘못 혼합했습니다 (Mikhail Korobov의 패치).</target>
        </trans-unit>
        <trans-unit id="d8382dc7a4e6b5befef78ad93d091aa030899dd6" translate="yes" xml:space="preserve">
          <source>calling from Python into Lua and back into Python did not clean up the
Lua call arguments before the innermost call, so that they could leak
into the nested Python call or its return arguments</source>
          <target state="translated">Python에서 Lua로 다시 Python으로 호출하면 가장 안쪽 호출 전에 Lua 호출 인수가 정리되지 않았으므로 중첩 된 Python 호출 또는 반환 인수로 누출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d77a3a101c9107681d6c81bb4bd472e44991e59" translate="yes" xml:space="preserve">
          <source>can be used to find out the type of a
wrapped Lua object in Python code, as provided by Lua&amp;rsquo;s</source>
          <target state="translated">Lua가 제공하는 Python 코드에서 래핑 된 Lua 객체의 유형을 찾는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">수업</target>
        </trans-unit>
        <trans-unit id="02c0fad5479b89b9533ead95ef036525b58a6cfc" translate="yes" xml:space="preserve">
          <source>comes with
a helper method that creates a Lua table from Python arguments:</source>
          <target state="translated">Python 인수에서 Lua 테이블을 만드는 도우미 메서드가 함께 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="7aa502d9d841ef8b8e9a74aa2355a3d5f9881e46" translate="yes" xml:space="preserve">
          <source>could appear and where a</source>
          <target state="translated">나타날 수 있고 어디에</target>
        </trans-unit>
        <trans-unit id="e32b11e586f0e5baaba039695f4ad1f878bf22d4" translate="yes" xml:space="preserve">
          <source>d.items</source>
          <target state="translated">d. 항목</target>
        </trans-unit>
        <trans-unit id="4156089b8e686f82ffe83f5dfc09d8af90d716f9" translate="yes" xml:space="preserve">
          <source>d['items']</source>
          <target state="translated">d [ '항목']</target>
        </trans-unit>
        <trans-unit id="d9815119f3383407571f98c52af4231f319d403c" translate="yes" xml:space="preserve">
          <source>decorators to allow calling Python functions from Lua using named
arguments</source>
          <target state="translated">명명 된 인수를 사용하여 Lua에서 Python 함수 호출을 허용하는 데코레이터</target>
        </trans-unit>
        <trans-unit id="499a12d64ce4abcc47122175eefbc7e045a4a4aa" translate="yes" xml:space="preserve">
          <source>decorators.
Depending on the context, passing</source>
          <target state="translated">데코레이터. 상황에 따라</target>
        </trans-unit>
        <trans-unit id="f46d8c331fd9bc90ba620364d15075ca0c0d174f" translate="yes" xml:space="preserve">
          <source>dict.iteritems()</source>
          <target state="translated">dict.iteritems ()</target>
        </trans-unit>
        <trans-unit id="fa9f085d8fba241a2f9e443fe25d0f72a992ae06" translate="yes" xml:space="preserve">
          <source>dlopen</source>
          <target state="translated">dlopen</target>
        </trans-unit>
        <trans-unit id="64f65c8c6b9cc225862d92fca39b7ea285307314" translate="yes" xml:space="preserve">
          <source>does the right thing for array tables but does not
work on mappings:</source>
          <target state="translated">배열 테이블에 대해 올바른 작업을 수행하지만 매핑에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ad3f9aa5e8b31b279c0727fde7e0afde67a3b436" translate="yes" xml:space="preserve">
          <source>dropped</source>
          <target state="translated">떨어졌다</target>
        </trans-unit>
        <trans-unit id="1e77a4b700661479c096aaa0391f205d71502322" translate="yes" xml:space="preserve">
          <source>easy to hack on and extend as it is written in Cython, not C</source>
          <target state="translated">C가 아닌 Cython으로 작성되었으므로 해킹 및 확장이 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="8daba9d0aa7157bb48094b4228084753a6f1ff82" translate="yes" xml:space="preserve">
          <source>encoding fix for</source>
          <target state="translated">인코딩 수정</target>
        </trans-unit>
        <trans-unit id="4e8c0ce4e4c03bcaf58c462a81276072c5374e96" translate="yes" xml:space="preserve">
          <source>enumerate()</source>
          <target state="translated">세다()</target>
        </trans-unit>
        <trans-unit id="eeaafc577c4b787480d9b784e77c49e6c6cd3b4d" translate="yes" xml:space="preserve">
          <source>error reporting on Lua syntax errors failed to clean up the stack so
that errors could leak into the next Lua run</source>
          <target state="translated">Lua 구문 오류에 대한 오류보고는 스택을 정리하지 못하여 오류가 다음 Lua 실행으로 누출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9da5d7f12f67c4da28020e53a9d2c0bdb34ea76" translate="yes" xml:space="preserve">
          <source>eval()</source>
          <target state="translated">eval ()</target>
        </trans-unit>
        <trans-unit id="52f3006f6aa57aee6d7509f8f483f39405447af6" translate="yes" xml:space="preserve">
          <source>execute()</source>
          <target state="translated">실행 ()</target>
        </trans-unit>
        <trans-unit id="4921798009205f4d7b7f86af56914a123bbb015c" translate="yes" xml:space="preserve">
          <source>explicit encoding options per LuaRuntime instance to decode/encode
strings and Lua code</source>
          <target state="translated">LuaRuntime 인스턴스 당 명시 적 인코딩 옵션을 사용하여 문자열 및 Lua 코드를 디코딩 / 인코딩</target>
        </trans-unit>
        <trans-unit id="2c824a99fd20c6ec51dbbd483ede0fdac0e1a521" translate="yes" xml:space="preserve">
          <source>first public release</source>
          <target state="translated">첫 공개</target>
        </trans-unit>
        <trans-unit id="469cb0c8a78d271064a07995ba4e0bf5a1bd310c" translate="yes" xml:space="preserve">
          <source>fix &amp;ldquo;deallocating None&amp;rdquo; crash while iterating over Lua tables in
Python code</source>
          <target state="translated">Python 코드에서 Lua 테이블을 반복하는 동안 &quot;해제 없음&quot;충돌 수정</target>
        </trans-unit>
        <trans-unit id="d41d5d66458a31ea8441777a92dcabb052aafe61" translate="yes" xml:space="preserve">
          <source>fix Cython generated C file using Cython 0.13</source>
          <target state="translated">Cython 0.13을 사용하여 Cython 생성 C 파일 수정</target>
        </trans-unit>
        <trans-unit id="131f5b801428d45f87f1a916ace7eddf806c1b29" translate="yes" xml:space="preserve">
          <source>fix Lua stack leak during table iteration</source>
          <target state="translated">테이블 반복 중 Lua 스택 누수 수정</target>
        </trans-unit>
        <trans-unit id="6f2efab1e06daa94109b9284493050e73d64e851" translate="yes" xml:space="preserve">
          <source>fix a crash when requesting attributes of wrapped Lua coroutine objects</source>
          <target state="translated">래핑 된 Lua 코 루틴 객체의 속성을 요청할 때 크래시 수정</target>
        </trans-unit>
        <trans-unit id="17564768f77fd5bc0c1ebb62da8be0d7b352c301" translate="yes" xml:space="preserve">
          <source>fix a hang on shutdown where the LuaRuntime failed to deallocate due
to reference cycles</source>
          <target state="translated">LuaRuntime이 참조 주기로 인해 할당 해제에 실패한 종료시 중단 수정</target>
        </trans-unit>
        <trans-unit id="fa37f80543e52d3521d6afc526f0edcb9295c570" translate="yes" xml:space="preserve">
          <source>fix compile warnings</source>
          <target state="translated">컴파일 경고 수정</target>
        </trans-unit>
        <trans-unit id="824bb9a13af77624bfebe4af75e1c872b0741b85" translate="yes" xml:space="preserve">
          <source>fix crash when calling</source>
          <target state="translated">전화 할 때 충돌 수정</target>
        </trans-unit>
        <trans-unit id="ef6697833df435377347a7a227e0a28f3c991512" translate="yes" xml:space="preserve">
          <source>fix iteration by returning</source>
          <target state="translated">반환하여 반복 수정</target>
        </trans-unit>
        <trans-unit id="1ccaec91beaa200fc3f796e131d10deaabf85c28" translate="yes" xml:space="preserve">
          <source>fix lost Lua object reference after iteration</source>
          <target state="translated">반복 후 손실 된 Lua 객체 참조 수정</target>
        </trans-unit>
        <trans-unit id="f8cd91a873d0e71a4a160ebfcc90360c2dc7a559" translate="yes" xml:space="preserve">
          <source>fix passing Lua objects back into the runtime from Python space</source>
          <target state="translated">Python 공간에서 Lua 객체를 런타임으로 다시 전달하는 문제 수정</target>
        </trans-unit>
        <trans-unit id="a0f409104bb7e7adf207e1d0e8a3c6ec80003834" translate="yes" xml:space="preserve">
          <source>fix regression in 0.13 and later where ordinary Lua functions failed
to print due to an accidentally used meta table</source>
          <target state="translated">실수로 사용 된 메타 테이블로 인해 일반 Lua 함수가 인쇄되지 않는 0.13 이상에서 회귀 수정</target>
        </trans-unit>
        <trans-unit id="561efb18669ce20f033be1a9e8560c75dadeaff3" translate="yes" xml:space="preserve">
          <source>fix serious resource leak when creating multiple LuaRuntime instances</source>
          <target state="translated">여러 LuaRuntime 인스턴스를 만들 때 심각한 리소스 누수 수정</target>
        </trans-unit>
        <trans-unit id="02516f8f18c88ac3b0727dad4e58ed7ed9dc4d08" translate="yes" xml:space="preserve">
          <source>fix several threading issues</source>
          <target state="translated">여러 스레딩 문제 수정</target>
        </trans-unit>
        <trans-unit id="f828494329e7c366ea0203537a8eb8c6fed335fb" translate="yes" xml:space="preserve">
          <source>fix: setting source encoding for Lua code was broken</source>
          <target state="translated">수정 : Lua 코드의 소스 인코딩 설정이 깨졌습니다.</target>
        </trans-unit>
        <trans-unit id="76358df5f8f06e55b9b3711055e4718b81277304" translate="yes" xml:space="preserve">
          <source>fixed Python special double-underscore method access on LuaObject
instances</source>
          <target state="translated">LuaObject 인스턴스에 대한 고정 Python 특수 이중 밑줄 메서드 액세스</target>
        </trans-unit>
        <trans-unit id="5583521ce0d2fbf16090b1262c127bae65586b3c" translate="yes" xml:space="preserve">
          <source>fixed a thread locking issue</source>
          <target state="translated">스레드 잠금 문제 수정</target>
        </trans-unit>
        <trans-unit id="d36caa5529fca679d63484ceb555cd4220d803b4" translate="yes" xml:space="preserve">
          <source>fixed several error handling problems when executing Python code
inside of Lua</source>
          <target state="translated">Lua 내부에서 Python 코드를 실행할 때 발생하는 몇 가지 오류 처리 문제 수정</target>
        </trans-unit>
        <trans-unit id="f64681cd30a7d63c01ef66f8d30128d79936e424" translate="yes" xml:space="preserve">
          <source>fixed undefined behaviour on</source>
          <target state="translated">정의되지 않은 동작 수정</target>
        </trans-unit>
        <trans-unit id="a98c950aad87d1c165834cfe873f52ccc9d224d5" translate="yes" xml:space="preserve">
          <source>flag indicates whether the attribute is being read
or set.</source>
          <target state="translated">플래그는 속성을 읽거나 설정하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d7cce284037d5ad644ab034f7524f7ca8fa153da" translate="yes" xml:space="preserve">
          <source>flag_values</source>
          <target state="translated">플래그 _ 값</target>
        </trans-unit>
        <trans-unit id="73d3e230748f013e98ee30d9746ef2f50b52953d" translate="yes" xml:space="preserve">
          <source>flags
if it can find the platform specific</source>
          <target state="translated">특정 플랫폼을 찾을 수있는 경우 플래그</target>
        </trans-unit>
        <trans-unit id="0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33" translate="yes" xml:space="preserve">
          <source>foo</source>
          <target state="translated">foo</target>
        </trans-unit>
        <trans-unit id="1d5d1a02610cab6dfff78989c1dd16312d3ff7c7" translate="yes" xml:space="preserve">
          <source>for Python functions and</source>
          <target state="translated">Python 함수 및</target>
        </trans-unit>
        <trans-unit id="434f60e44ad72af320acc9310cf24d894d6dda86" translate="yes" xml:space="preserve">
          <source>for each thread
to enable parallel execution.  Each</source>
          <target state="translated">각 스레드에 대해 병렬 실행을 활성화합니다. 마다</target>
        </trans-unit>
        <trans-unit id="40f06f98024a26ceca0900584e1cffa9826c4c9d" translate="yes" xml:space="preserve">
          <source>for functions where the first argument can be a Lua table.  In this case</source>
          <target state="translated">첫 번째 인수가 Lua 테이블이 될 수있는 함수의 경우. 이 경우</target>
        </trans-unit>
        <trans-unit id="ad1413823e7c07c1001a3249a58d4fe985a4f0c7" translate="yes" xml:space="preserve">
          <source>for methods
of Python objects.</source>
          <target state="translated">파이썬 객체의 메소드.</target>
        </trans-unit>
        <trans-unit id="3deac2ace582235bea5c056e87437b54fe07ca5d" translate="yes" xml:space="preserve">
          <source>for normal Python objects</source>
          <target state="translated">일반 Python 객체의 경우</target>
        </trans-unit>
        <trans-unit id="39bbd4b9e53784bc778b1171768f4c048307c584" translate="yes" xml:space="preserve">
          <source>for the latter:</source>
          <target state="translated">후자의 경우 :</target>
        </trans-unit>
        <trans-unit id="1f47c727d8573a662c1b54c5e3bc9c2128fe1b16" translate="yes" xml:space="preserve">
          <source>frees the GIL and supports threading in separate runtimes when
calling into Lua</source>
          <target state="translated">GIL을 해제하고 Lua를 호출 할 때 별도의 런타임에서 스레딩을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="6fb80a8b181c13a181b911272498078179fff364" translate="yes" xml:space="preserve">
          <source>from Lua code</source>
          <target state="translated">Lua 코드에서</target>
        </trans-unit>
        <trans-unit id="2af7d23197950eb2ddb34965ea9bc212ea834eab" translate="yes" xml:space="preserve">
          <source>func(a, b, c)</source>
          <target state="translated">func (a, b, c)</target>
        </trans-unit>
        <trans-unit id="95cb75072145432e8b6d902a7658bff1d42ded2b" translate="yes" xml:space="preserve">
          <source>func(foo, bar)</source>
          <target state="translated">func (foo, bar)</target>
        </trans-unit>
        <trans-unit id="c0af239f7ece17ad0732b9d7f22ea4c70c392999" translate="yes" xml:space="preserve">
          <source>function is also supported, so the above
could be simplified to:</source>
          <target state="translated">기능도 지원되므로 위의 내용을 다음과 같이 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a613722cc994e3aba324448e7c1757d61273f51f" translate="yes" xml:space="preserve">
          <source>function that
automatically explodes the tuple items into separate Lua arguments:</source>
          <target state="translated">튜플 항목을 별도의 Lua 인수로 자동으로 분해하는 함수 :</target>
        </trans-unit>
        <trans-unit id="1198023229e62df1ffd6ef3a57077af5e7bfdad7" translate="yes" xml:space="preserve">
          <source>function.  For example, you can manually copy a Python list into a Lua
table like this:</source>
          <target state="translated">함수. 예를 들어 다음과 같이 Python 목록을 Lua 테이블에 수동으로 복사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1dfae75987ab2c547d85f2eedd53692b234672e0" translate="yes" xml:space="preserve">
          <source>function:</source>
          <target state="translated">함수:</target>
        </trans-unit>
        <trans-unit id="bf480041be16b735a1361915cf16e550aabe6ab8" translate="yes" xml:space="preserve">
          <source>func{foo, bar=bar}</source>
          <target state="translated">func {foo, bar = bar}</target>
        </trans-unit>
        <trans-unit id="6ef2d59092e81f0b6001a8c2e135a4adccfe9bc4" translate="yes" xml:space="preserve">
          <source>func{foo=foo, bar=bar}</source>
          <target state="translated">func {foo = foo, bar = bar}</target>
        </trans-unit>
        <trans-unit id="f6195054287167dc2dde0c89b036183ae9c8a42a" translate="yes" xml:space="preserve">
          <source>garbage collection works for reference cycles that span both runtimes,
Python and Lua</source>
          <target state="translated">가비지 컬렉션은 런타임, Python 및 Lua 모두에 걸친 참조주기에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="4660e0b64a6fde22a2585bae18ec4157116c5e0e" translate="yes" xml:space="preserve">
          <source>getitem</source>
          <target state="translated">getitem</target>
        </trans-unit>
        <trans-unit id="fdc3a6d52ee378f40efae5eda271c94fc5d3075c" translate="yes" xml:space="preserve">
          <source>globals()</source>
          <target state="translated">전역 ()</target>
        </trans-unit>
        <trans-unit id="21ad8c69332fb04b4a95cecc4573684fff438e83" translate="yes" xml:space="preserve">
          <source>has a special meaning,
but leave it as</source>
          <target state="translated">특별한 의미가 있지만 그대로 두십시오.</target>
        </trans-unit>
        <trans-unit id="2f6090181c9c7ae90cc7512fcab7f4cbdd283aa4" translate="yes" xml:space="preserve">
          <source>helper function for Lua
code as it can be needed in cases where Lua cannot determine how to
run a Python function.</source>
          <target state="translated">Lua가 Python 함수를 실행하는 방법을 결정할 수없는 경우에 필요할 수 있으므로 Lua 코드에 대한 도우미 함수입니다.</target>
        </trans-unit>
        <trans-unit id="c81a9e22670f561e49bbfe9c906c1b1897dbbf92" translate="yes" xml:space="preserve">
          <source>helper function for Lua as all
Python objects are callable from Lua now (potentially raising a</source>
          <target state="translated">모든 Python 객체가 이제 Lua에서 호출 가능하므로 Lua에 대한 도우미 함수 (잠재적으로</target>
        </trans-unit>
        <trans-unit id="38771ef9fe2ec9797ec1eb9a6a76a14bc4c084f9" translate="yes" xml:space="preserve">
          <source>if they are</source>
          <target state="translated">만약 그들이</target>
        </trans-unit>
        <trans-unit id="33acb9b2f4270c891c059b62ede0528f61e529be" translate="yes" xml:space="preserve">
          <source>in Lua can be disabled via</source>
          <target state="translated">Lua에서는 다음을 통해 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52ea4eadc6756d2782436bf4ef914f0cd568b33f" translate="yes" xml:space="preserve">
          <source>in Lua differ in their semantics, they
usually just mean the same thing: no value.  Lupa therefore tries to map one
directly to the other whenever possible:</source>
          <target state="translated">Lua에서는 의미론이 다르지만 일반적으로 같은 의미로 가치가 없습니다. 따라서 Lupa는 가능할 때마다 하나를 다른 하나에 직접 매핑하려고합니다.</target>
        </trans-unit>
        <trans-unit id="4f64025ea0692dff12969f9088c0493e68f12c77" translate="yes" xml:space="preserve">
          <source>in Lua that returns a Lua
iterator for a Python object and adds the 0-based index to each
item.</source>
          <target state="translated">Python 객체에 대한 Lua 반복자를 반환하고 각 항목에 0 기반 인덱스를 추가하는 Lua에서.</target>
        </trans-unit>
        <trans-unit id="ddcafccc9bbded1d6f2fe7692f94272714f20fae" translate="yes" xml:space="preserve">
          <source>in Lua that returns a Lua
iterator for a Python object and unpacks any tuples that the
iterator yields.</source>
          <target state="translated">Python 객체에 대한 Lua 반복자를 반환하고 반복기가 생성하는 모든 튜플을 압축 해제하는 Lua에서.</target>
        </trans-unit>
        <trans-unit id="a8738e9d2805c2bab86024a3322e6a11d3ecac8d" translate="yes" xml:space="preserve">
          <source>in Lua that returns a Lua
iterator for a Python object.</source>
          <target state="translated">Python 객체에 대한 Lua 반복자를 반환하는 Lua에서.</target>
        </trans-unit>
        <trans-unit id="c71cd7c75898b815641d1a630448fe56be71db4f" translate="yes" xml:space="preserve">
          <source>in Lua)
becomes ambiguous: it could mean either &amp;ldquo;call</source>
          <target state="translated">루아에서)는 모호해집니다.</target>
        </trans-unit>
        <trans-unit id="e79c4f06d940249792008fe9eb868261851868d1" translate="yes" xml:space="preserve">
          <source>in Lua, or otherwise
the loop terminates prematurely.  To prevent this, any</source>
          <target state="translated">루아에서 또는 그렇지 않으면 루프가 조기에 종료됩니다. 이를 방지하기 위해</target>
        </trans-unit>
        <trans-unit id="82a56b522de80f1209c876ffb7258e88349a5cb6" translate="yes" xml:space="preserve">
          <source>in Lua.</source>
          <target state="translated">루아에서.</target>
        </trans-unit>
        <trans-unit id="4e695d2673364710d8be606b65ebc49993471a8c" translate="yes" xml:space="preserve">
          <source>in Python and</source>
          <target state="translated">파이썬에서</target>
        </trans-unit>
        <trans-unit id="3312ba96da7f666584c3379429ffab4fd3371467" translate="yes" xml:space="preserve">
          <source>include .hg repository in source downloads</source>
          <target state="translated">소스 다운로드에 .hg 저장소 포함</target>
        </trans-unit>
        <trans-unit id="4bd27de62126037608cb85e028b81aaada0bd26f" translate="yes" xml:space="preserve">
          <source>inside of Lua).  A lookup is therefore more similar to the</source>
          <target state="translated">Lua 내부). 따라서 조회는</target>
        </trans-unit>
        <trans-unit id="cb82821f5443620916128c66c024a61d87b0565d" translate="yes" xml:space="preserve">
          <source>instead of</source>
          <target state="translated">대신에</target>
        </trans-unit>
        <trans-unit id="e1ddc932f03f8e3a7ce4f840ac3b77422c8b0f0a" translate="yes" xml:space="preserve">
          <source>instead of returning</source>
          <target state="translated">돌아 오는 대신</target>
        </trans-unit>
        <trans-unit id="6568964b0e39083c6acb94093d9e6cd117dbe508" translate="yes" xml:space="preserve">
          <source>instead.</source>
          <target state="translated">대신.</target>
        </trans-unit>
        <trans-unit id="ff4ab9b204b285da3579ffd625c1a5a28466b83b" translate="yes" xml:space="preserve">
          <source>is 2 and</source>
          <target state="translated">2이고</target>
        </trans-unit>
        <trans-unit id="abb2934cf64d2cd4ff26cf907f7f6e6fcaf3d6d0" translate="yes" xml:space="preserve">
          <source>is 256, you
need to call</source>
          <target state="translated">256, 당신은 전화해야합니다</target>
        </trans-unit>
        <trans-unit id="cbfb75c96276207bef14780b5b014c0f82d8a853" translate="yes" xml:space="preserve">
          <source>is based on the</source>
          <target state="translated">기반으로</target>
        </trans-unit>
        <trans-unit id="b4a03d4da15fb85822cb5d6ed9118226ffe1cccf" translate="yes" xml:space="preserve">
          <source>is protected by a
global lock that prevents concurrent access to it.  The low memory
footprint of Lua makes it reasonable to use multiple runtimes, but
this setup also means that values cannot easily be exchanged between
threads inside of Lua.  They must either get copied through Python
space (passing table references will not work, either) or use some Lua
mechanism for explicit communication, such as a pipe or some kind of
shared memory setup.</source>
          <target state="translated">동시 액세스를 방지하는 전역 잠금으로 보호됩니다. Lua의 메모리 공간이 적기 때문에 여러 런타임을 사용하는 것이 합리적이지만이 설정은 Lua 내부의 스레드간에 값을 쉽게 교환 할 수 없음을 의미합니다. 파이썬 공간을 통해 복사하거나 (테이블 참조 전달도 작동하지 않음) 파이프 또는 일종의 공유 메모리 설정과 같은 명시 적 통신을 위해 Lua 메커니즘을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c52731201b28b381bd563b4363f323774ddb207" translate="yes" xml:space="preserve">
          <source>is set up without auto-encoding (patch by Mikhail Korobov)</source>
          <target state="translated">자동 인코딩없이 설정 됨 (Mikhail Korobov의 패치)</target>
        </trans-unit>
        <trans-unit id="ad88b5604d05c9037070f0f4432b8b54d67e6743" translate="yes" xml:space="preserve">
          <source>is_setting</source>
          <target state="translated">is_setting</target>
        </trans-unit>
        <trans-unit id="06d72eda7f450b13112e8ed6fffbfc26320e2bb8" translate="yes" xml:space="preserve">
          <source>item and attribute access for Python objects from Lua code</source>
          <target state="translated">Lua 코드에서 Python 객체에 대한 항목 및 속성 액세스</target>
        </trans-unit>
        <trans-unit id="a09e6fabe65779cb74f707fe53fc04192acfc7ae" translate="yes" xml:space="preserve">
          <source>item assignments/lookups on Lua objects from Python no longer
special case double underscore names (as opposed to attribute lookups)</source>
          <target state="translated">Python의 Lua 객체에 대한 항목 할당 / 조회가 더 이상 특수한 경우 이중 밑줄 이름이 아닙니다 (속성 조회와 반대).</target>
        </trans-unit>
        <trans-unit id="f233161e416ae0195702ed27ff9c88f723ede2d7" translate="yes" xml:space="preserve">
          <source>iteration support for Python objects in Lua and Lua objects in
Python</source>
          <target state="translated">Lua의 Python 객체 및 Python의 Lua 객체에 대한 반복 지원</target>
        </trans-unit>
        <trans-unit id="adcd31419317a8d083ad74502081d18b6a2d3e34" translate="yes" xml:space="preserve">
          <source>iteration, the first value is known to be always a number and never None,
so no replacement is needed.</source>
          <target state="translated">반복, 첫 번째 값은 항상 숫자이고 None이 아니므로 대체가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fc2636e1a83c384112dbfba2ad4fb89a72e20337" translate="yes" xml:space="preserve">
          <source>iteration, which yields a flat sequence
of counter and unpacked values.</source>
          <target state="translated">반복-카운터 및 압축 해제 된 값의 평평한 시퀀스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="4b5179922db27d7c5ca384ef1582e47acbdd8ed1" translate="yes" xml:space="preserve">
          <source>iterator, the counter is never</source>
          <target state="translated">반복자, 카운터는 절대</target>
        </trans-unit>
        <trans-unit id="a1ac1048afd36f6c030c3f2a6344482fb00904c0" translate="yes" xml:space="preserve">
          <source>len()</source>
          <target state="translated">len ()</target>
        </trans-unit>
        <trans-unit id="c858c25d60aab7bd73c9752a393e5a10bc4ef0a0" translate="yes" xml:space="preserve">
          <source>looking up attributes on Lua objects that do not support it now always
raises an AttributeError instead of sometimes raising a TypeError depending
on the attribute name</source>
          <target state="translated">지원하지 않는 Lua 객체의 속성을 조회하면 속성 이름에 따라 TypeError가 발생하는 대신 항상 AttributeError가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="58a46534f6f3ad8978fea0aa279909ee1c4359d7" translate="yes" xml:space="preserve">
          <source>lua_type(obj)</source>
          <target state="translated">lua_type (obj)</target>
        </trans-unit>
        <trans-unit id="900bac9f13ceef619b0b3779b0ac185caaf9bdb3" translate="yes" xml:space="preserve">
          <source>lupa</source>
          <target state="translated">루파</target>
        </trans-unit>
        <trans-unit id="3895a5e01517bc65d89870afb16fc4758a75da2e" translate="yes" xml:space="preserve">
          <source>lupa.lua_type()</source>
          <target state="translated">lupa.lua_type ()</target>
        </trans-unit>
        <trans-unit id="0382731a337ada65432b5246babb90deac04be95" translate="yes" xml:space="preserve">
          <source>lupa.unpacks_lua_table</source>
          <target state="translated">lupa.unpacks_lua_table</target>
        </trans-unit>
        <trans-unit id="7bcbfc66ee83dabe86c79612cab7336ed361a2dc" translate="yes" xml:space="preserve">
          <source>lupa.unpacks_lua_table_method</source>
          <target state="translated">lupa.unpacks_lua_table_method</target>
        </trans-unit>
        <trans-unit id="5821eb27d7b71c9078000da31a5a654c97e401b9" translate="yes" xml:space="preserve">
          <source>make</source>
          <target state="translated">하다</target>
        </trans-unit>
        <trans-unit id="17f3467db103e03ea7354dd6da9a32c1ed2a07e8" translate="yes" xml:space="preserve">
          <source>messages</source>
          <target state="translated">메시지</target>
        </trans-unit>
        <trans-unit id="45329ea8d4970b82a7c6c1ba6380982306771eb6" translate="yes" xml:space="preserve">
          <source>meta method fails</source>
          <target state="translated">메타 메소드 실패</target>
        </trans-unit>
        <trans-unit id="bbd5fdcca228ab6cc01360efc76953eec1df5b2b" translate="yes" xml:space="preserve">
          <source>method for creating Lua tables from Python
space</source>
          <target state="translated">Python 공간에서 Lua 테이블을 만드는 방법</target>
        </trans-unit>
        <trans-unit id="4abcc6b567bce25d066c9a6341dea2a5106645f2" translate="yes" xml:space="preserve">
          <source>method from Lua requires passing
the dict as</source>
          <target state="translated">Lua의 메소드는 dict를 다음과 같이 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="5a47da9e768e5035aee2b4e4cfeb1e44e9c9dd58" translate="yes" xml:space="preserve">
          <source>method is not supported, though.</source>
          <target state="translated">그러나 방법은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="16037d614d5fe0b1161535e483dbdbef72b40e9f" translate="yes" xml:space="preserve">
          <source>method of Python dicts than to a mapping lookup in Python.</source>
          <target state="translated">Python의 매핑 조회보다 Python dicts의 메소드.</target>
        </trans-unit>
        <trans-unit id="97b5611ae1828b561444ae204205fdd14719d91c" translate="yes" xml:space="preserve">
          <source>method of a
function or by creating it in Lua code.  Then, values can be sent into
it using the</source>
          <target state="translated">함수의 메서드를 사용하거나 Lua 코드에서 생성합니다. 그런 다음 값을</target>
        </trans-unit>
        <trans-unit id="c893febfc9188f3603234649fa346f7faac53f41" translate="yes" xml:space="preserve">
          <source>method or it can be iterated over.  Note that
the</source>
          <target state="translated">방법 또는 반복 할 수 있습니다. 참고</target>
        </trans-unit>
        <trans-unit id="fdf1715fe9cfc27c0cd19101d0ce0a9817c63698" translate="yes" xml:space="preserve">
          <source>method, it is preferred when turning it
into an indexable Lua object.  Otherwise, it becomes a simple object
that uses attribute access for indexing from inside Lua.</source>
          <target state="translated">메소드를 사용하는 경우 색인 가능한 Lua 객체로 변환 할 때 선호됩니다. 그렇지 않으면 Lua 내부에서 인덱싱하기 위해 속성 액세스를 사용하는 단순한 객체가됩니다.</target>
        </trans-unit>
        <trans-unit id="01a46fb52f0c14f92da476120be7afe1ef1ec52d" translate="yes" xml:space="preserve">
          <source>method:</source>
          <target state="translated">방법:</target>
        </trans-unit>
        <trans-unit id="b85dac7f646475d4018a5c35390352f94773c821" translate="yes" xml:space="preserve">
          <source>methods</source>
          <target state="translated">행동 양식</target>
        </trans-unit>
        <trans-unit id="e92be3b6cf3a747c22b8d3cb6709d8b0cf64fe80" translate="yes" xml:space="preserve">
          <source>module will automatically try to set up the correct</source>
          <target state="translated">모듈은 자동으로 올바른 설정을 시도합니다.</target>
        </trans-unit>
        <trans-unit id="f52c3507b87089397aa4eb0bda6de6825e48b3fd" translate="yes" xml:space="preserve">
          <source>more generic wrapping rules for Python objects based on supported
protocols (callable, getitem, getattr)</source>
          <target state="translated">지원되는 프로토콜 (callable, getitem, getattr)을 기반으로 한 Python 객체에 대한보다 일반적인 래핑 규칙</target>
        </trans-unit>
        <trans-unit id="f9c1f39836a35d9b0aa550fcffee00ce2df4f0a7" translate="yes" xml:space="preserve">
          <source>much faster Lua iteration over Python objects</source>
          <target state="translated">Python 객체에 대한 훨씬 더 빠른 Lua 반복</target>
        </trans-unit>
        <trans-unit id="4d22f9af174ecbd7265dce5dd8547b674e5e6c48" translate="yes" xml:space="preserve">
          <source>much faster locking of the LuaRuntime, especially in the single
threaded case (see
&lt;a href=&quot;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&quot;&gt;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&lt;/a&gt;)</source>
          <target state="translated">특히 단일 스레드의 경우 LuaRuntime의 훨씬 더 빠른 잠금 ( &lt;a href=&quot;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&quot;&gt;http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="67a26842a562476abf1266cf29f98eb4fd7dd52b" translate="yes" xml:space="preserve">
          <source>must represent the sum of your system&amp;rsquo;s values for</source>
          <target state="translated">시스템 값의 합계를 나타내야합니다.</target>
        </trans-unit>
        <trans-unit id="253377428539d88eb03d3d0bb14ac3eb4a077e48" translate="yes" xml:space="preserve">
          <source>native implementation for</source>
          <target state="translated">네이티브 구현</target>
        </trans-unit>
        <trans-unit id="c2a6b03f190dfb2b4aa91f8af8d477a9bc3401dc" translate="yes" xml:space="preserve">
          <source>new</source>
          <target state="translated">새로운</target>
        </trans-unit>
        <trans-unit id="54cb6460bf07c01ed1c6fead8a7a0b78ec83deb4" translate="yes" xml:space="preserve">
          <source>new helper function</source>
          <target state="translated">새로운 도우미 기능</target>
        </trans-unit>
        <trans-unit id="c379c357000f6e1291b9e99adef4770de74eb230" translate="yes" xml:space="preserve">
          <source>new helper functions</source>
          <target state="translated">새로운 도우미 기능</target>
        </trans-unit>
        <trans-unit id="2002321a63c759efd91afb7308edc2c3eeb7918a" translate="yes" xml:space="preserve">
          <source>new helper method</source>
          <target state="translated">새로운 도우미 방법</target>
        </trans-unit>
        <trans-unit id="b85eb1a078bd511baabe9b6f65fc1d0b202933a9" translate="yes" xml:space="preserve">
          <source>new module function</source>
          <target state="translated">새로운 모듈 기능</target>
        </trans-unit>
        <trans-unit id="b5366a2d2ac98dae978423083f8b09e5cddc705d" translate="yes" xml:space="preserve">
          <source>nil</source>
          <target state="translated">무</target>
        </trans-unit>
        <trans-unit id="f87130a4a321e176133575f91e58a12422c0dae6" translate="yes" xml:space="preserve">
          <source>no longer uses Cython by default when building from released sources (pass</source>
          <target state="translated">릴리스 된 소스에서 빌드 할 때 더 이상 기본적으로 Cython을 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">없음</target>
        </trans-unit>
        <trans-unit id="db45298a9195e9086b318d99f81639df8796adbc" translate="yes" xml:space="preserve">
          <source>obj.x</source>
          <target state="translated">obj.x</target>
        </trans-unit>
        <trans-unit id="76df7bd6db360bf1830ef8a44f4b8bef492cde55" translate="yes" xml:space="preserve">
          <source>obj[x]</source>
          <target state="translated">obj [x]</target>
        </trans-unit>
        <trans-unit id="eed491613c4819446e5d2ab5b4bca3c06193ae84" translate="yes" xml:space="preserve">
          <source>object for</source>
          <target state="translated">대상</target>
        </trans-unit>
        <trans-unit id="e15833fe5bef847a2c11cfe020ed42d4ab8ff2dd" translate="yes" xml:space="preserve">
          <source>object in places where</source>
          <target state="translated">장소에 개체</target>
        </trans-unit>
        <trans-unit id="b7d31746e2f960a48e312f66521ff3eb5c5d7385" translate="yes" xml:space="preserve">
          <source>object into Lua,</source>
          <target state="translated">루아에 반대,</target>
        </trans-unit>
        <trans-unit id="cd1d2a721e79c53a2b4dd7605b7b8b1b52bdf47d" translate="yes" xml:space="preserve">
          <source>on a Python object from Lua could fail if the</source>
          <target state="translated">Lua의 Python 객체에서</target>
        </trans-unit>
        <trans-unit id="b3d2563eaecaade4a5a217cb60f022dd0f175fc4" translate="yes" xml:space="preserve">
          <source>on wrapped Lua objects without
metatable</source>
          <target state="translated">메타 테이블이없는 래핑 된 Lua 객체</target>
        </trans-unit>
        <trans-unit id="14eb14ece52df99c284b819d9f8092e50aa1613e" translate="yes" xml:space="preserve">
          <source>option</source>
          <target state="translated">선택권</target>
        </trans-unit>
        <trans-unit id="6cefac1bca917de259026a38e9ad3f0e1b17b0ba" translate="yes" xml:space="preserve">
          <source>option
to the setup.py script if you have both installed but do not want to
use LuaJIT2.</source>
          <target state="translated">둘 다 설치했지만 LuaJIT2를 사용하지 않으려는 경우 setup.py 스크립트에 대한 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="852219e3d43003e29d94a09fbce36e420497ac9c" translate="yes" xml:space="preserve">
          <source>option to the
setup.py script in order to ignore the failure you get when neither
LuaJIT2 nor Lua are found automatically.</source>
          <target state="translated">LuaJIT2 또는 Lua가 자동으로 발견되지 않을 때 발생하는 실패를 무시하기 위해 setup.py 스크립트에 옵션을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="12cb917fa6b139c69bd08293a23c4256c452e570" translate="yes" xml:space="preserve">
          <source>option.</source>
          <target state="translated">선택권.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="3d60d5ea27e93b01a5c4036a0a36152063da68f1" translate="yes" xml:space="preserve">
          <source>or one of the</source>
          <target state="translated">또는</target>
        </trans-unit>
        <trans-unit id="b9b4cc59dc3aeca62636a97763e2b62a1e1f5ac3" translate="yes" xml:space="preserve">
          <source>pairs()</source>
          <target state="translated">한 쌍()</target>
        </trans-unit>
        <trans-unit id="a16bcc57f3323cbfea902d6d4036348c807e8b24" translate="yes" xml:space="preserve">
          <source>portability fix for binary module importing</source>
          <target state="translated">바이너리 모듈 가져 오기를위한 이식성 수정</target>
        </trans-unit>
        <trans-unit id="bfdba57c2ea525d68cd766e6ddc87ae634e2c0ff" translate="yes" xml:space="preserve">
          <source>posix</source>
          <target state="translated">posix</target>
        </trans-unit>
        <trans-unit id="8ded8331bd0b99d9b65400d6fbce9e61c1091b80" translate="yes" xml:space="preserve">
          <source>propagate Python exceptions through Lua calls</source>
          <target state="translated">Lua 호출을 통해 Python 예외 전파</target>
        </trans-unit>
        <trans-unit id="077bd55bde935f013c453e95ec1c8f52ed1d954a" translate="yes" xml:space="preserve">
          <source>proper encoding and decoding of strings (configurable per runtime,
UTF-8 by default)</source>
          <target state="translated">문자열의 적절한 인코딩 및 디코딩 (런타임별로 구성 가능, 기본적으로 UTF-8)</target>
        </trans-unit>
        <trans-unit id="126c1ee7fad9e93d978d3a33a80d76d14b830075" translate="yes" xml:space="preserve">
          <source>protocol of Python dicts and look up</source>
          <target state="translated">Python dicts의 프로토콜 및 조회</target>
        </trans-unit>
        <trans-unit id="8d2b75a7d3917748a9c02ddfbf621b6920226a84" translate="yes" xml:space="preserve">
          <source>provide all built-in Lua libraries in</source>
          <target state="translated">모든 내장 Lua 라이브러리를</target>
        </trans-unit>
        <trans-unit id="6dc818c4f7ab5a86737d55437fa2ac425070dbd2" translate="yes" xml:space="preserve">
          <source>py_func</source>
          <target state="translated">py_func</target>
        </trans-unit>
        <trans-unit id="060188feebebda53e12a9edf7223d44faf3ecec9" translate="yes" xml:space="preserve">
          <source>py_func({foo=bar})</source>
          <target state="translated">py_func ({foo = bar})</target>
        </trans-unit>
        <trans-unit id="202987190b7ad7ec6eb32b047a574c29fc73932f" translate="yes" xml:space="preserve">
          <source>py_func{foo=bar}</source>
          <target state="translated">py_func {foo = bar}</target>
        </trans-unit>
        <trans-unit id="6dd3c963ea9900e12319e369a03f0a3aeb764b3b" translate="yes" xml:space="preserve">
          <source>python.as_attrgetter()</source>
          <target state="translated">python.as_attrgetter ()</target>
        </trans-unit>
        <trans-unit id="9b7def23d37188050101c5145cb4144f36526837" translate="yes" xml:space="preserve">
          <source>python.as_function()</source>
          <target state="translated">python.as_function ()</target>
        </trans-unit>
        <trans-unit id="1dea09d94ab8b000327f91a071507d0b650bfcd5" translate="yes" xml:space="preserve">
          <source>python.as_itemgetter()</source>
          <target state="translated">python.as_itemgetter ()</target>
        </trans-unit>
        <trans-unit id="fb6739ce028c2464bcac94422a0450f8ad43e872" translate="yes" xml:space="preserve">
          <source>python.builtins</source>
          <target state="translated">python.builtins</target>
        </trans-unit>
        <trans-unit id="51151b37d64a1c3f0240b2927248cf6d474fda5e" translate="yes" xml:space="preserve">
          <source>python.enumerate()</source>
          <target state="translated">python.enumerate ()</target>
        </trans-unit>
        <trans-unit id="422aa673de03177a4a1829ce82a45cc4dc648fab" translate="yes" xml:space="preserve">
          <source>python.iter()</source>
          <target state="translated">python.iter ()</target>
        </trans-unit>
        <trans-unit id="c98a8e5ebdad4efaa9a4830c34216a70ec19a000" translate="yes" xml:space="preserve">
          <source>python.iterex()</source>
          <target state="translated">python.iterex ()</target>
        </trans-unit>
        <trans-unit id="6c20f9dc1bdbc1c1f382f62198814eec929dc3cf" translate="yes" xml:space="preserve">
          <source>python.none</source>
          <target state="translated">python.none</target>
        </trans-unit>
        <trans-unit id="b87b7699b66742624edd07d56041ea21697ee3d5" translate="yes" xml:space="preserve">
          <source>reestablished the</source>
          <target state="translated">다시 설립</target>
        </trans-unit>
        <trans-unit id="c5f6083d1d9b6c39985bd4a5f9aed667fc0fb537" translate="yes" xml:space="preserve">
          <source>relicensed to the MIT license used by LuaJIT2 to simplify licensing
considerations</source>
          <target state="translated">라이선스 고려 사항을 단순화하기 위해 LuaJIT2에서 사용하는 MIT 라이선스로 다시 라이선스</target>
        </trans-unit>
        <trans-unit id="61f68f80d5deb59af8ad42d02939a24f0ee05d42" translate="yes" xml:space="preserve">
          <source>removed redundant &amp;ldquo;error:&amp;rdquo; prefix from</source>
          <target state="translated">중복 &quot;오류 :&quot;접두사를</target>
        </trans-unit>
        <trans-unit id="876207095ef6ea1315316230f0e9afb23f003c11" translate="yes" xml:space="preserve">
          <source>renamed</source>
          <target state="translated">이름이 변경됨</target>
        </trans-unit>
        <trans-unit id="c09d7f7a957041623c3e1ea1d198bd6aa3d1ca1a" translate="yes" xml:space="preserve">
          <source>replacement was done in more places, which made it not always very predictable.</source>
          <target state="translated">교체가 더 많은 곳에서 이루어 졌기 때문에 항상 예측 가능하지는 않았습니다.</target>
        </trans-unit>
        <trans-unit id="82b30e0c46a81846dc358fbb7a0d6142d5893989" translate="yes" xml:space="preserve">
          <source>replacement, as Lua does not look at the
other items for loop termination anymore.  And on</source>
          <target state="translated">Lua는 더 이상 루프 종료를 위해 다른 항목을 보지 않기 때문에 교체. 그리고</target>
        </trans-unit>
        <trans-unit id="f644b7f7c3513bd8118b5fdb1b3b09e20b03d49e" translate="yes" xml:space="preserve">
          <source>repr()</source>
          <target state="translated">repr ()</target>
        </trans-unit>
        <trans-unit id="eea1793e8c4f79e0033f2b564992592bd5fb55e0" translate="yes" xml:space="preserve">
          <source>requires Cython 0.20+ when building from unreleased sources</source>
          <target state="translated">출시되지 않은 소스에서 빌드 할 때 Cython 0.20+가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="2704088ccad0a6987de61a24b6b74a18c67d9067" translate="yes" xml:space="preserve">
          <source>return values are now mapped to</source>
          <target state="translated">반환 값은 이제 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="a8b9b8957453675944c1878df38f3225c4313762" translate="yes" xml:space="preserve">
          <source>safely free the GIL when calling into Lua</source>
          <target state="translated">Lua를 호출 할 때 안전하게 GIL을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="cdfba0f89cc10dd75ef24c3962eb9c456a52cbb4" translate="yes" xml:space="preserve">
          <source>separate Lua runtime states through a</source>
          <target state="translated">Lua 런타임 상태를</target>
        </trans-unit>
        <trans-unit id="ba360e3f8d69776bec51ab347b1e4a3939c5042b" translate="yes" xml:space="preserve">
          <source>setattr()</source>
          <target state="translated">setattr ()</target>
        </trans-unit>
        <trans-unit id="9c62533f9ac69e6b0ea01e875a89acbc600eb765" translate="yes" xml:space="preserve">
          <source>some garbage collection issues were cleaned up using new Cython features</source>
          <target state="translated">새로운 Cython 기능을 사용하여 일부 가비지 수집 문제를 정리했습니다.</target>
        </trans-unit>
        <trans-unit id="bc57d3a09ec228bf44a591efbcce5a122a6e6ea3" translate="yes" xml:space="preserve">
          <source>some internal wrapper classes were removed from the module API</source>
          <target state="translated">일부 내부 래퍼 클래스가 모듈 API에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="3346abc026c7e2630a0511db843d74222dbf1533" translate="yes" xml:space="preserve">
          <source>str()</source>
          <target state="translated">str ()</target>
        </trans-unit>
        <trans-unit id="18d2279ea687baefc491055d0fc847feb4279db6" translate="yes" xml:space="preserve">
          <source>str() on Lua objects</source>
          <target state="translated">Lua 객체에 대한 str ()</target>
        </trans-unit>
        <trans-unit id="33adf6087b673894ccec7f140619fca041c7f438" translate="yes" xml:space="preserve">
          <source>str(LuaObject)</source>
          <target state="translated">str (LuaObject)</target>
        </trans-unit>
        <trans-unit id="b4fb261c0c5019b8099b8f248954a82136c4133c" translate="yes" xml:space="preserve">
          <source>str(lua_object)</source>
          <target state="translated">str (lua_object)</target>
        </trans-unit>
        <trans-unit id="330f8f10b9eac0e33060bc805fc8688a3b09a82a" translate="yes" xml:space="preserve">
          <source>support for</source>
          <target state="translated">을지 지하다</target>
        </trans-unit>
        <trans-unit id="948fabe3526ed03155c3a4071ea19bafef7b7a20" translate="yes" xml:space="preserve">
          <source>support for Lua 5.2 (in addition to Lua 5.1 and LuaJIT 2.0)</source>
          <target state="translated">Lua 5.2 지원 (Lua 5.1 및 LuaJIT 2.0 추가)</target>
        </trans-unit>
        <trans-unit id="37ecbe2bcaf6d72040599aad47cba1d0908fb57a" translate="yes" xml:space="preserve">
          <source>support for Lua objects</source>
          <target state="translated">Lua 개체 지원</target>
        </trans-unit>
        <trans-unit id="36c2cbb0ac8f8c08a6a8dbaa976b2bba9bf49492" translate="yes" xml:space="preserve">
          <source>support for building with Lua 5.1 instead of LuaJIT (setup.py &amp;ndash;no-luajit)</source>
          <target state="translated">LuaJIT (setup.py &amp;ndash;no-luajit) 대신 Lua 5.1로 빌드 지원</target>
        </trans-unit>
        <trans-unit id="262dcaa53f1c58dd1ea55e36b38cb22a782969b5" translate="yes" xml:space="preserve">
          <source>support for counter start value in</source>
          <target state="translated">카운터 시작 값 지원</target>
        </trans-unit>
        <trans-unit id="170ceb7361e8d4fbe2d9f5e3d57f0e8e61d57474" translate="yes" xml:space="preserve">
          <source>support for filtering attribute access to Python objects for Lua
code</source>
          <target state="translated">Lua 코드 용 Python 객체에 대한 속성 액세스 필터링 지원</target>
        </trans-unit>
        <trans-unit id="760f4cbfaa3a5bbb1138d8e799fafb519f4605de" translate="yes" xml:space="preserve">
          <source>support for loading binary Lua modules on systems that support it</source>
          <target state="translated">지원하는 시스템에서 바이너리 Lua 모듈로드 지원</target>
        </trans-unit>
        <trans-unit id="42c56abff9cf554503d2118bf9508b2b537773fb" translate="yes" xml:space="preserve">
          <source>support for returning multiple values from Lua evaluation</source>
          <target state="translated">Lua 평가에서 여러 값 반환 지원</target>
        </trans-unit>
        <trans-unit id="f34912cfb4b9e2e3de6ccc83c89812580d34427d" translate="yes" xml:space="preserve">
          <source>syntax is used.</source>
          <target state="translated">구문이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9262a595e51690c526b21db0537ce6d1b3fd09c2" translate="yes" xml:space="preserve">
          <source>sys.setdlopenflags(258)</source>
          <target state="translated">sys.setdlopenflags (258)</target>
        </trans-unit>
        <trans-unit id="2567bca63af4ecfed1c60b4131ac8e355a7f59df" translate="yes" xml:space="preserve">
          <source>sys.setdlopenflags(flag_values)</source>
          <target state="translated">sys.setdlopenflags (flag_values)</target>
        </trans-unit>
        <trans-unit id="52f530bc43095de4b2692fc2adba54ca1e6451de" translate="yes" xml:space="preserve">
          <source>targets.  See the &lt;a href=&quot;http://docs.python.org/install/index.html#install-index&quot;&gt;distutils
documentation&lt;/a&gt; for help, also the &lt;a href=&quot;http://docs.python.org/install/index.html#building-extensions-tips-and-tricks&quot;&gt;hints on building extension
modules&lt;/a&gt;.</source>
          <target state="translated">목표. 도움말은 &lt;a href=&quot;http://docs.python.org/install/index.html#install-index&quot;&gt;distutils 문서&lt;/a&gt; 와 &lt;a href=&quot;http://docs.python.org/install/index.html#building-extensions-tips-and-tricks&quot;&gt;확장 모듈 빌드에&lt;/a&gt; 대한 힌트를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ece2fbe11cd1022c911508ff1fa02121846474c6" translate="yes" xml:space="preserve">
          <source>tested with Python 2.6/3.2 and later</source>
          <target state="translated">Python 2.6 / 3.2 이상에서 테스트 됨</target>
        </trans-unit>
        <trans-unit id="f7bda9423290f2e43199bb6a8a776565fe92d814" translate="yes" xml:space="preserve">
          <source>that creates a Lua
table from one or more Python mappings and/or sequences</source>
          <target state="translated">하나 이상의 Python 매핑 및 / 또는 시퀀스에서 Lua 테이블을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f8bc3b2f58b7d77f5c85b4e9d3010619aff856f9" translate="yes" xml:space="preserve">
          <source>that is passed to create
the Lua runtime.  It is new in Lupa 0.21 and changes the behaviour of
tuples that get returned by Python functions.  With this flag, they
explode into separate Lua values:</source>
          <target state="translated">Lua 런타임을 만들기 위해 전달됩니다. Lupa 0.21의 새로운 기능이며 Python 함수에서 반환되는 튜플의 동작을 변경합니다. 이 플래그를 사용하면 별도의 Lua 값으로 분해됩니다.</target>
        </trans-unit>
        <trans-unit id="6c0b47491adf7e3c709d22a9a040d075a3d8e410" translate="yes" xml:space="preserve">
          <source>that is several
times faster</source>
          <target state="translated">그것은 몇 배 더 빠릅니다</target>
        </trans-unit>
        <trans-unit id="9076c435cb96c3a9e3637c6ad6cc3210007d94ca" translate="yes" xml:space="preserve">
          <source>that restrict the view on
an object to a certain protocol, both from Python and from inside
Lua:</source>
          <target state="translated">객체에 대한 뷰를 Python 및 Lua 내부에서 특정 프로토콜로 제한합니다.</target>
        </trans-unit>
        <trans-unit id="1937e40170d18c8eaad882a9e759a32b84783ce0" translate="yes" xml:space="preserve">
          <source>that returns the Lua type of
a wrapped object as string, or</source>
          <target state="translated">래핑 된 객체의 Lua 유형을 문자열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="74a00bd949000a4fbee529a416ff65c7d158ef5c" translate="yes" xml:space="preserve">
          <source>threading fixes</source>
          <target state="translated">스레딩 수정</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">에</target>
        </trans-unit>
        <trans-unit id="b79342c070052f48161baae97d4e032008b282f3" translate="yes" xml:space="preserve">
          <source>to
specify the Python object protocol used by Lua indexing when
wrapping Python objects in Python code</source>
          <target state="translated">Python 코드에서 Python 개체를 래핑 할 때 Lua 인덱싱에 사용되는 Python 개체 프로토콜을 지정하는 방법</target>
        </trans-unit>
        <trans-unit id="9dfaea0877ab5cd6fcf17490b5540ee612d98ba2" translate="yes" xml:space="preserve">
          <source>to compile Lua code
without executing it.
(patch by TitanSnow)</source>
          <target state="translated">Lua 코드를 실행하지 않고 컴파일합니다. (TitanSnow의 패치)</target>
        </trans-unit>
        <trans-unit id="3145f8d3c6e50c2e5cdb404cd3c22180494122cd" translate="yes" xml:space="preserve">
          <source>to explicitly request a rebuild)</source>
          <target state="translated">재 구축을 명시 적으로 요청하려면)</target>
        </trans-unit>
        <trans-unit id="ee0a4dbf00524fd8f31d27d8f8a6730a60dbecd0" translate="yes" xml:space="preserve">
          <source>to make sure it only builds
for your system instead of trying to generate a fat binary with
both 32bit and 64bit support:</source>
          <target state="translated">32 비트와 64 비트를 모두 지원하는 팻 바이너리를 생성하는 대신 시스템 용으로 만 빌드되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5b0812f6a3455482e6ebd8869e89de410969c5aa" translate="yes" xml:space="preserve">
          <source>to pass None values
robustly.  Arguments with</source>
          <target state="translated">None 값을 강력하게 전달합니다. 인수</target>
        </trans-unit>
        <trans-unit id="ff08ac956c8bedc1996555de4d2e3201d9c72816" translate="yes" xml:space="preserve">
          <source>to specify
the Python object protocol used by Lua indexing of Python objects in
Lua code</source>
          <target state="translated">Lua 코드에서 Python 개체의 Lua 인덱싱에 사용되는 Python 개체 프로토콜을 지정하려면</target>
        </trans-unit>
        <trans-unit id="2f746d02fe588180e5eec4bbf6e7e14f76d8a306" translate="yes" xml:space="preserve">
          <source>type()</source>
          <target state="translated">유형()</target>
        </trans-unit>
        <trans-unit id="202167667485d34238ea26416f8bd31583ecdeac" translate="yes" xml:space="preserve">
          <source>unpack_returned_tuples</source>
          <target state="translated">unpack_returned_tuples</target>
        </trans-unit>
        <trans-unit id="a8b4fd3402f761ca2f89eb666f6435081a312fca" translate="yes" xml:space="preserve">
          <source>unpack_returned_tuples=True</source>
          <target state="translated">unpack_returned_tuples = 참</target>
        </trans-unit>
        <trans-unit id="b97b84e78295387162eee58061b30b5673be8881" translate="yes" xml:space="preserve">
          <source>value
that the iterator returns, or any first item in exploded tuples that is</source>
          <target state="translated">반복기가 반환하는 값 또는 확장 된 튜플의 첫 번째 항목은</target>
        </trans-unit>
        <trans-unit id="7e9c1167a7988d84d7054b83677ef2c777e0a23e" translate="yes" xml:space="preserve">
          <source>value the termination marker of iterators.  Therefore,
Lupa special cases</source>
          <target state="translated">반복자의 종료 마커 값을 지정합니다. 따라서 Lupa 특별한 경우</target>
        </trans-unit>
        <trans-unit id="395e02423462b36f2983a614a245f762e0334bb9" translate="yes" xml:space="preserve">
          <source>value was used.  The only remaining exception is during iteration,
where the first returned value must not be</source>
          <target state="translated">값이 사용되었습니다. 유일한 나머지 예외는 반복 중이며, 첫 번째 반환 값은</target>
        </trans-unit>
        <trans-unit id="764d3c6bd54b900e518622aef44dadce683868a0" translate="yes" xml:space="preserve">
          <source>values are also fine when standard braces</source>
          <target state="translated">값은 표준 중괄호 일 때도 괜찮습니다.</target>
        </trans-unit>
        <trans-unit id="79f5d6abd88e8a43ed52cdbdb0005f600a33eb22" translate="yes" xml:space="preserve">
          <source>values here and replaces them by a constant</source>
          <target state="translated">여기에 값을 입력하고 상수로 대체합니다.</target>
        </trans-unit>
        <trans-unit id="107fda61ca79a6745e33fe82b6e6c70b7410bac2" translate="yes" xml:space="preserve">
          <source>values to callables wrapped in</source>
          <target state="translated">래핑 된 콜 러블 값</target>
        </trans-unit>
        <trans-unit id="8aa50c0b4fc7430006990c51bb8aaa04d7df32be" translate="yes" xml:space="preserve">
          <source>values, gives
barely predictable results for tables with &amp;lsquo;holes&amp;rsquo; and does not work
at all for mapping tables.  For tables with both sequential and
mapping content, this ignores the mapping part completely.</source>
          <target state="translated">값은 '구멍'이있는 테이블에 대해 거의 예측할 수없는 결과를 제공하며 테이블 매핑에는 전혀 작동하지 않습니다. 순차 콘텐츠와 매핑 콘텐츠가 모두있는 테이블의 경우 매핑 부분을 완전히 무시합니다.</target>
        </trans-unit>
        <trans-unit id="8eea0510277c3ace162b3dca3dd62bbdb9b10c4f" translate="yes" xml:space="preserve">
          <source>when converting Python values to Lua, represent</source>
          <target state="translated">Python 값을 Lua로 변환 할 때</target>
        </trans-unit>
        <trans-unit id="fa23e947ae90af68227d129672949fe30c5cf364" translate="yes" xml:space="preserve">
          <source>when the object&amp;rsquo;s</source>
          <target state="translated">개체의</target>
        </trans-unit>
        <trans-unit id="3ec2759340f6a9c931c7a7f336b91fda5b9f4f30" translate="yes" xml:space="preserve">
          <source>where it doesn&amp;rsquo;t hurt</source>
          <target state="translated">아프지 않은 곳</target>
        </trans-unit>
        <trans-unit id="8fc9f37b048ce421936b97a26b5769bf726ebe1b" translate="yes" xml:space="preserve">
          <source>which automatically
unpacks tuples returned from Python functions into separate Lua objects
(instead of returning a single Python tuple object)</source>
          <target state="translated">Python 함수에서 반환 된 튜플을 별도의 Lua 개체로 자동으로 압축 해제합니다 (단일 Python 튜플 개체를 반환하는 대신).</target>
        </trans-unit>
        <trans-unit id="b1d663c4ddb5fca0dfcf7f866f74408de7be1261" translate="yes" xml:space="preserve">
          <source>with a named</source>
          <target state="translated">명명 된</target>
        </trans-unit>
        <trans-unit id="a634859784837ac1cf61a7dce921f6c6a0a7a11d" translate="yes" xml:space="preserve">
          <source>with a positional</source>
          <target state="translated">위치와 함께</target>
        </trans-unit>
        <trans-unit id="6411996d9d043cf1410c90e9b8a52ca58a60c244" translate="yes" xml:space="preserve">
          <source>written for LuaJIT2 (tested with LuaJIT 2.0.2), but also works
with the normal Lua interpreter (5.1 and 5.2)</source>
          <target state="translated">LuaJIT2 용으로 작성되었지만 (LuaJIT 2.0.2로 테스트 됨) 일반 Lua 인터프리터 (5.1 및 5.2)에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="dc2935b70ad43836e2e74df2d9758b1e51397997" translate="yes" xml:space="preserve">
          <source>{foo=bar}</source>
          <target state="translated">{foo = bar}</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
