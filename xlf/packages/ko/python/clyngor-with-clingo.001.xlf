<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/clyngor-with-clingo/">
    <body>
      <group id="clyngor-with-clingo">
        <trans-unit id="0ab7c128bef15a2db033fa8d6f290a2939b2ade7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/questions/24686838/distributing-a-binary-utility-in-setuptools&quot;&gt;Link to the way of doing that&lt;/a&gt;. Thanks !</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/questions/24686838/distributing-a-binary-utility-in-setuptools&quot;&gt;그렇게하는 방법에 연결하십시오&lt;/a&gt; . 감사 !</target>
        </trans-unit>
        <trans-unit id="83145f848046b0a8e80fdde1637ce6874b50cc33" translate="yes" xml:space="preserve">
          <source>A clingo executable will appear in their &lt;code&gt;bin&lt;/code&gt;. May need root access if the said someone is working at system level.</source>
          <target state="translated">clingo 실행 파일이 &lt;code&gt;bin&lt;/code&gt; 나타납니다 . 해당 사용자가 시스템 수준에서 작업하는 경우 루트 액세스가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a85ac81e9117b55b7a244fb631d1ada1e69211c0" translate="yes" xml:space="preserve">
          <source>But it does not works. &lt;a href=&quot;https://github.com/pypa/setuptools/issues/1728&quot;&gt;A question has been asked about it&lt;/a&gt;, also &lt;a href=&quot;https://stackoverflow.com/q/56004271/3077939&quot;&gt;on SO&lt;/a&gt;.</source>
          <target state="translated">그러나 작동하지 않습니다. &lt;a href=&quot;https://github.com/pypa/setuptools/issues/1728&quot;&gt;질문은 그것에 대해 질문하고있다&lt;/a&gt; 또한, &lt;a href=&quot;https://stackoverflow.com/q/56004271/3077939&quot;&gt;SO에&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8faa8f67c3c803168464fa4a750011b903e51d22" translate="yes" xml:space="preserve">
          <source>Clyngor with clingo</source>
          <target state="translated">클링 고와 클링 고</target>
        </trans-unit>
        <trans-unit id="3f758b6a35495970b5de5f0c1e0237145b5dc517" translate="yes" xml:space="preserve">
          <source>Has a lot of drawbacks, such as binary downloading from the client side, and necessity to use &lt;code&gt;--no-cache-dir&lt;/code&gt; pip flag to force pip to execute the hack.</source>
          <target state="translated">클라이언트 측에서 바이너리 다운로드와 같은 많은 단점이 있으며 &lt;code&gt;--no-cache-dir&lt;/code&gt; pip 플래그를 사용하여 pip가 해킹을 실행하도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="2c5846722d743edbf1eb70d4e8c8fb348df66115" translate="yes" xml:space="preserve">
          <source>How to perform this magic</source>
          <target state="translated">이 마법을 수행하는 방법</target>
        </trans-unit>
        <trans-unit id="41eac3753c89b150e2c1d15e34e75489f032c2ed" translate="yes" xml:space="preserve">
          <source>I end up &lt;a href=&quot;clyngor_with_clingo/__init__.py&quot;&gt;reproducing the same entry point implementation, using pkg_resource&lt;/a&gt;, and it works:
binaries are embedded in the package using the &lt;a href=&quot;MANIFEST.in&quot;&gt;MANIFEST.in&lt;/a&gt;, and the package only real operation
is to delegate command line arguments to the proper clingo binary.</source>
          <target state="translated">나는 &lt;a href=&quot;clyngor_with_clingo/__init__.py&quot;&gt;pkg_resource를 사용하여 동일한 진입 점 구현을 재현하고&lt;/a&gt; 작동합니다. 바이너리는 &lt;a href=&quot;MANIFEST.in&quot;&gt;MANIFEST.in을&lt;/a&gt; 사용하여 패키지에 포함되며 패키지 유일한 실제 작업은 명령 줄 인수를 적절한 clingo 바이너리에 위임하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="821787afdcdd8f1061814a3005c01c6982978eba" translate="yes" xml:space="preserve">
          <source>Installation of clingo binary along clyngor</source>
          <target state="translated">clyngor를 따라 clingo 바이너리 설치</target>
        </trans-unit>
        <trans-unit id="94de303bbef8935622224c5db48199c807ab7d71" translate="yes" xml:space="preserve">
          <source>Maintenance</source>
          <target state="translated">유지</target>
        </trans-unit>
        <trans-unit id="721dbf31c81751de5da8a81033113b74cd4886c7" translate="yes" xml:space="preserve">
          <source>Method used by &lt;a href=&quot;https://github.com/sthiele/pyasp/blob/master/setup.py#L136&quot;&gt;pyasp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/sthiele/pyasp/blob/master/setup.py#L136&quot;&gt;pyasp에서&lt;/a&gt; 사용하는 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="ee73661048efa11da69c0b46d0d3d10aad491463" translate="yes" xml:space="preserve">
          <source>Probably it's because data_files does not support environment markers. Hence this solution has been abandonned.</source>
          <target state="translated">아마도 data_files가 환경 마커를 지원하지 않기 때문일 것입니다. 따라서이 솔루션은 폐기되었습니다.</target>
        </trans-unit>
        <trans-unit id="8405922bb827773984f8a38b4a2a0510d574d1f4" translate="yes" xml:space="preserve">
          <source>Script &lt;code&gt;put-clingo-version.sh &amp;lt;clingo version&amp;gt;&lt;/code&gt; will automatically push the given clingo version into the package.</source>
          <target state="translated">스크립트 &lt;code&gt;put-clingo-version.sh &amp;lt;clingo version&amp;gt;&lt;/code&gt; 은 주어진 clingo 버전을 패키지에 자동으로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="b7597e45db5b759eed5972e1d6833f467976775d" translate="yes" xml:space="preserve">
          <source>Script &lt;code&gt;retrieve-clingo.sh &amp;lt;clingo version&amp;gt;&lt;/code&gt; will automatically retrieve the given clingo version.</source>
          <target state="translated">스크립트 &lt;code&gt;retrieve-clingo.sh &amp;lt;clingo version&amp;gt;&lt;/code&gt; 은 주어진 clingo 버전을 자동으로 검색합니다.</target>
        </trans-unit>
        <trans-unit id="1732fc383641e0c022648c6e646d45f3521f637a" translate="yes" xml:space="preserve">
          <source>Setuptools provides since &lt;a href=&quot;https://www.python.org/dev/peps/pep-0508&quot;&gt;PEP 508&lt;/a&gt; the environment markers,
theoretically &lt;a href=&quot;https://stackoverflow.com/questions/44878440/correct-use-of-pep-508-environment-markers-in-setup-cfg&quot;&gt;usable in setup.cfg&lt;/a&gt;
with &lt;a href=&quot;https://github.com/pypa/setuptools/pull/1520&quot;&gt;setuptools&lt;/a&gt;:</source>
          <target state="translated">Setuptools는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0508&quot;&gt;PEP 508&lt;/a&gt; 이후 환경 마커를 제공하며 이론적 으로 &lt;a href=&quot;https://github.com/pypa/setuptools/pull/1520&quot;&gt;setuptools&lt;/a&gt; 와 함께 &lt;a href=&quot;https://stackoverflow.com/questions/44878440/correct-use-of-pep-508-environment-markers-in-setup-cfg&quot;&gt;setup.cfg에서 사용할 수 있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="395cacebbefed6bf4192cb112c85890408b4f90c" translate="yes" xml:space="preserve">
          <source>The clingo binary is taken for Linux, OSX and Windows on &lt;a href=&quot;https://github.com/potassco/clingo/releases/&quot;&gt;the official release page&lt;/a&gt;</source>
          <target state="translated">clingo 바이너리는 &lt;a href=&quot;https://github.com/potassco/clingo/releases/&quot;&gt;공식 릴리스 페이지&lt;/a&gt; 에서 Linux, OSX 및 Windows 용으로 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="5e863b15a8d8f354e876253382dc028f4a4f8a28" translate="yes" xml:space="preserve">
          <source>The current solution: faking clingo as a python script</source>
          <target state="translated">현재 해결책 : clingo를 파이썬 스크립트로 가짜</target>
        </trans-unit>
        <trans-unit id="ce579fc027555b4308fc686c1ec6fc0e1a99674a" translate="yes" xml:space="preserve">
          <source>The on-the-fly solution: hack upon setuptools to download binary at installation</source>
          <target state="translated">즉석 솔루션 : 설치 도구를 해킹하여 설치시 바이너리 다운로드</target>
        </trans-unit>
        <trans-unit id="67cc55b525989502caa0629cd954a2ff5802d351" translate="yes" xml:space="preserve">
          <source>The package must be updated to use new clingo binaries.</source>
          <target state="translated">새 clingo 바이너리를 사용하려면 패키지를 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="ff8b309a06a81a2d975095500c6fe98fb37f9c96" translate="yes" xml:space="preserve">
          <source>The proper but non-working solution: embed a platform-specific binary into a python package</source>
          <target state="translated">적절하지만 작동하지 않는 솔루션 : 플랫폼 별 바이너리를 Python 패키지에 포함</target>
        </trans-unit>
        <trans-unit id="9978e5618d7d96fa86a02087ff2aa7851ee07a5f" translate="yes" xml:space="preserve">
          <source>The python part of the package is simplistic (well, there could be &lt;strong&gt;no&lt;/strong&gt; python in this package),
be &lt;a href=&quot;https://stackoverflow.com/questions/12461603/setting-up-setup-py-for-packaging-of-a-single-py-file-and-a-single-data-file-wi&quot;&gt;we still need a basic architecture&lt;/a&gt;.</source>
          <target state="translated">패키지의 파이썬 부분은 단순하지만 ( 이 패키지 &lt;strong&gt;에는&lt;/strong&gt; 파이썬이 없을 수도 있습니다 ), &lt;a href=&quot;https://stackoverflow.com/questions/12461603/setting-up-setup-py-for-packaging-of-a-single-py-file-and-a-single-data-file-wi&quot;&gt;우리는 여전히 기본 아키텍처가 필요합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1246bd808bb8bcab80d8b07e9860d7334027bb0f" translate="yes" xml:space="preserve">
          <source>This is a python package installing a clingo binary along the &lt;a href=&quot;https://github.com/aluriak/clyngor&quot;&gt;clyngor package&lt;/a&gt;,
so the end-user will not have to care about the clingo installation.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://github.com/aluriak/clyngor&quot;&gt;clyngor 패키지&lt;/a&gt; 와 함께 clingo 바이너리를 설치하는 파이썬 패키지 이므로 최종 사용자는 clingo 설치에 대해 신경 쓸 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2d993fd4c4ea53d9e8e8d55025e530aa6fc531dc" translate="yes" xml:space="preserve">
          <source>This seems to work, but:</source>
          <target state="translated">이것은 작동하는 것 같지만 :</target>
        </trans-unit>
        <trans-unit id="92e8441feb62bd762a9c43a20015522f997c733f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://zestreleaser.readthedocs.io&quot;&gt;zest.releaser&lt;/a&gt; to upload new versions ; be careful to &lt;strong&gt;match clingo version with package version&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://zestreleaser.readthedocs.io&quot;&gt;zest.releaser&lt;/a&gt; 를 사용 하여 새 버전을 업로드 하십시오 . &lt;strong&gt;clingo 버전을 패키지 버전과 일치 시키&lt;/strong&gt; 도록주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="51a2c8d29d33a547c7c2c66acb566eec9323af97" translate="yes" xml:space="preserve">
          <source>When someone (who doesn't understand &quot;install clingo binary in your path&quot;) have to install clyngor, give them that line instead:</source>
          <target state="translated">누군가 ( &quot;경로에 clingo 바이너리 설치&quot;를 이해하지 못하는 사람)가 clyngor를 설치해야 할 때 대신 해당 행을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="f8417eeb8ffcdb0797d93c43d3fff2f31c93c671" translate="yes" xml:space="preserve">
          <source>platform-specific magic</source>
          <target state="translated">플랫폼 별 마법</target>
        </trans-unit>
        <trans-unit id="719b0a92b84cb517a29ecd64e2bba2b180939684" translate="yes" xml:space="preserve">
          <source>the 3 binaries are sent to the user, and the choice is made at execution time.</source>
          <target state="translated">3 개의 바이너리가 사용자에게 전송되고 실행 시간에 선택이 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="739f5a6282183f055caa79e9492b6113aad4656e" translate="yes" xml:space="preserve">
          <source>user has not control over the installed binary (however that package is all about having the user to not have to cope with that, but still&amp;hellip; Experienced users should never use it)</source>
          <target state="translated">사용자는 설치된 바이너리를 제어 할 수 없습니다 (하지만이 패키지는 사용자가 이에 대처할 필요가 없도록하는 것입니다. 그러나 여전히&amp;hellip; 숙련 된 사용자는 절대 사용해서는 안됩니다)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
