<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/fuzzy/">
    <body>
      <group id="fuzzy">
        <trans-unit id="2ac3ab330988eeda30ebaad295aeff9b0524a505" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance&quot;&gt;Jaro-Winkler&lt;/a&gt; distance</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance&quot;&gt;Jaro-Winkler&lt;/a&gt; 거리</target>
        </trans-unit>
        <trans-unit id="39292dcb0679d7ba796f5b6de6c57002efb7256f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro_distance&quot;&gt;Jaro&lt;/a&gt; distance</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Jaro_distance&quot;&gt;자로&lt;/a&gt; 거리</target>
        </trans-unit>
        <trans-unit id="86346e756da7a68299d3a21af9a2618073aeea24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein&lt;/a&gt; edit distance</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein&lt;/a&gt; 편집 거리</target>
        </trans-unit>
        <trans-unit id="ada8c6313c42a3760ac948f31f18bf270dd3cbd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Metaphone&quot;&gt;Double Metaphone&lt;/a&gt; Based on Maurice
Aubrey&amp;rsquo;s C code from his perl implementation.</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Metaphone&quot;&gt;Double Metaphone&lt;/a&gt; 은 Maurice Aubrey의 Perl 구현에서 C 코드를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="21cbc0b46d2d1053f6c633b39655ff70dad97aa3" translate="yes" xml:space="preserve">
          <source>Distance Metrics</source>
          <target state="translated">거리 메트릭</target>
        </trans-unit>
        <trans-unit id="0b95da5363bf715342dd2773e4787f0043c8b319" translate="yes" xml:space="preserve">
          <source>Fast Python phonetic algorithms</source>
          <target state="translated">빠른 Python 음성 알고리즘</target>
        </trans-unit>
        <trans-unit id="5907c6450353cf7906660822b423e6fd50098dcd" translate="yes" xml:space="preserve">
          <source>Fuzzy is a python library implementing common phonetic algorithms quickly.
Typically this is in string similarity exercises, but they&amp;rsquo;re pretty versatile.</source>
          <target state="translated">Fuzzy는 일반적인 음성 알고리즘을 빠르게 구현하는 파이썬 라이브러리입니다. 일반적으로 이것은 문자열 유사성 연습에 있지만 매우 다양합니다.</target>
        </trans-unit>
        <trans-unit id="36bb4b30e3584f0b501d5bf9eabae2acbc5e2dc2" translate="yes" xml:space="preserve">
          <source>Fuzzy&amp;rsquo;s Double Metaphone was ~10 times faster than the pure python
implementation by  &lt;a href=&quot;http://www.atomodo.com/code/double-metaphone&quot;&gt;Andrew Collins&lt;/a&gt;
in some recent &lt;a href=&quot;http://chmullig.com/2011/03/pypy-testing/&quot;&gt;testing&lt;/a&gt;.
Soundex and NYSIIS should be similarly faster. Using iPython&amp;rsquo;s timeit:</source>
          <target state="translated">Fuzzy의 Double Metaphone은 최근 몇 가지 &lt;a href=&quot;http://chmullig.com/2011/03/pypy-testing/&quot;&gt;테스트&lt;/a&gt; 에서 &lt;a href=&quot;http://www.atomodo.com/code/double-metaphone&quot;&gt;Andrew Collins&lt;/a&gt; 의 순수 파이썬 구현보다 약 10 배 더 빠릅니다 . Soundex와 NYSIIS는 비슷하게 빨라야합니다. iPython의 timeit 사용 :</target>
        </trans-unit>
        <trans-unit id="fdf64174f6a3174decf155ec5cb6931b7226f610" translate="yes" xml:space="preserve">
          <source>Hamming distance</source>
          <target state="translated">해밍 거리</target>
        </trans-unit>
        <trans-unit id="18f4ad11465c01a84fcbfd76a5eec9298f033f0a" translate="yes" xml:space="preserve">
          <source>In testing it&amp;rsquo;s been several times faster than comparable pure python
implementations of those algorithms.</source>
          <target state="translated">테스트에서 해당 알고리즘의 비교 가능한 순수 파이썬 구현보다 몇 배 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="f69ed5f6153731eb61eea3b6afd50cde3480f09e" translate="yes" xml:space="preserve">
          <source>It uses C Extensions (via Cython) for speed.</source>
          <target state="translated">속도를 위해 C 확장 (Cython을 통해)을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="92fe52ee6627e4c2a666cbf487ba6aa5604bac02" translate="yes" xml:space="preserve">
          <source>NYSIIS</source>
          <target state="translated">NYSIIS</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">공연</target>
        </trans-unit>
        <trans-unit id="5930aa2cb67f8872a19036ca9715aa2cfbd09188" translate="yes" xml:space="preserve">
          <source>Soundex</source>
          <target state="translated">Soundex</target>
        </trans-unit>
        <trans-unit id="30e9dc68e43536a073a9f130a15ce6b0bc51ad23" translate="yes" xml:space="preserve">
          <source>The algorithms are:</source>
          <target state="translated">알고리즘은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="faadcfcd7a0b6ae78711959eb1c32069d976d460" translate="yes" xml:space="preserve">
          <source>The functions are quite easy to use!</source>
          <target state="translated">기능은 사용하기 매우 쉽습니다!</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="15477a9fbe30c75783ab6c4a8f59caadd1295100" translate="yes" xml:space="preserve">
          <source>We recommend the &lt;a href=&quot;http://code.google.com/p/pylevenshtein/&quot;&gt;Python-Levenshtein&lt;/a&gt;
module for fast, C based string distance/similarity metrics. Among others
functions it includes:</source>
          <target state="translated">빠른 C 기반 문자열 거리 / 유사성 메트릭을 위해 &lt;a href=&quot;http://code.google.com/p/pylevenshtein/&quot;&gt;Python-Levenshtein&lt;/a&gt; 모듈을 권장합니다 . 다른 기능 중에는 다음이 포함됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
