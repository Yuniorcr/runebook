<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/flip/">
    <body>
      <group id="flip">
        <trans-unit id="ac838a2537511b4fc5bc1bc99f97d9784cb290bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Flip&lt;/strong&gt; is a logical framework written in Python.  A logical framework is
a library for defining logics and writing applications such as theorem
provers.  One Flip application is a proof checker for entering and
editing proofs in natural deduction style.  Here is some output from
the checker, generated from a Python proof script:</source>
          <target state="translated">&lt;strong&gt;Flip&lt;/strong&gt; 은 Python으로 작성된 논리적 프레임 워크입니다. 논리 프레임 워크는 논리를 정의하고 정리 증명과 같은 응용 프로그램을 작성하기위한 라이브러리입니다. One Flip 애플리케이션은 자연스러운 추론 스타일로 증명을 입력하고 편집하기위한 증명 검사기입니다. 다음은 Python 증명 스크립트에서 생성 된 검사기의 출력입니다.</target>
        </trans-unit>
        <trans-unit id="98f9260f05eb51cb0e0bb2dbb26c467ba6b79b51" translate="yes" xml:space="preserve">
          <source>F L i P : Logical Framework in Python</source>
          <target state="translated">FL i P : Python의 논리적 프레임 워크</target>
        </trans-unit>
        <trans-unit id="6a63c0fec8b5d1246c5634345cb0ddbd176afd83" translate="yes" xml:space="preserve">
          <source>Flip was undertaken as a Python programming exercise.  It is not
intended to compete with industrial-strength theorem provers such as HOL,
nor with nicely-designed educational provers such as Jape.
That said, the checker is quite capable of working the examples and
exercises in university-level textbooks on logic for computer science or
mathematics, such as Kaye, Huth and Ryan, and Bornat.</source>
          <target state="translated">Flip은 Python 프로그래밍 연습으로 착수되었습니다. HOL과 같은 산업 강도 정리 증명 자 또는 Jape와 같이 멋지게 설계된 교육 증명 자와 경쟁하기위한 것이 아닙니다. 즉, 검사기는 Kaye, Huth 및 Ryan, Bornat와 같은 컴퓨터 과학 또는 수학 논리에 대한 대학 수준의 교과서에서 예제와 연습을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1cc62108e4ba2253d28ad6af13e8bcd651280ca2" translate="yes" xml:space="preserve">
          <source>The checker can use different logics; Flip comes with several.  You
can add another logic, or add axioms and derived rules, by writing a
module in Python.  Python is both the object language and the
metalanguage.  Formulas, inference rules, and entire proofs are Python
expressions.  Prover commands are Python functions.  The Python
interpreter itself is the only user interface to the proof checker
application.  (It is not necessary to know much Python to use the
checker.)</source>
          <target state="translated">검사기는 다른 논리를 사용할 수 있습니다. Flip은 여러 가지가 함께 제공됩니다. Python으로 모듈을 작성하여 다른 논리를 추가하거나 공리 및 파생 규칙을 추가 할 수 있습니다. Python은 객체 언어이자 메타 언어입니다. 공식, 추론 규칙 및 전체 증명은 Python 표현식입니다. Prover 명령은 Python 함수입니다. Python 인터프리터 자체는 증명 검사기 응용 프로그램에 대한 유일한 사용자 인터페이스입니다. (체커를 사용하기 위해 파이썬을 많이 알 필요는 없습니다.)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
