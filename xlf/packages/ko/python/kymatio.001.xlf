<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/kymatio/">
    <body>
      <group id="kymatio">
        <trans-unit id="7fb4391a6444cdfc98721cf84a888e92ce5e7ccf" translate="yes" xml:space="preserve">
          <source>After installing the latest version of PyTorch, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;torch.nn.Module&lt;/code&gt; using:</source>
          <target state="translated">최신 버전의 PyTorch를 설치 한 후 &lt;code&gt;torch.nn.Module&lt;/code&gt; 사용하여 &lt;code&gt;Scattering2D&lt;/code&gt; 를 torch.nn.Module 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2d53b89f41ba50001f12184fc1f54cef6ed50714" translate="yes" xml:space="preserve">
          <source>After installing the latest version of TensorFlow, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;tf.Module&lt;/code&gt; using:</source>
          <target state="translated">최신 버전의 TensorFlow를 설치 한 후 &lt;code&gt;tf.Module&lt;/code&gt; 사용하여 &lt;code&gt;Scattering2D&lt;/code&gt; 를 tf.Module 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5656ae60d6b13d4ea92fa6c75bf0a61833a82268" translate="yes" xml:space="preserve">
          <source>After installing the latest version of scikit-learn, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a &lt;code&gt;Transformer&lt;/code&gt; using:</source>
          <target state="translated">최신 버전의 scikit-learn을 설치 한 후 다음을 사용하여 &lt;code&gt;Scattering2D&lt;/code&gt; 를 &lt;code&gt;Transformer&lt;/code&gt; 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="15d92fd88eb1e4901f01cd8aa7ef2f2a163abc6b" translate="yes" xml:space="preserve">
          <source>Alternatively, with TensorFlow installed, you can call &lt;code&gt;Scattering2D&lt;/code&gt; as a Keras &lt;code&gt;Layer&lt;/code&gt; using:</source>
          <target state="translated">또는 TensorFlow가 설치된 상태에서 다음을 사용하여 &lt;code&gt;Scattering2D&lt;/code&gt; 를 Keras &lt;code&gt;Layer&lt;/code&gt; 로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce98733b52e5764a6674e832754e16e00beef0a2" translate="yes" xml:space="preserve">
          <source>Andreux M., Angles T., Exarchakis G., Leonarduzzi R., Rochette G., Thiry L., Zarka J., Mallat S., And&amp;eacute;n J., Belilovsky E., Bruna J., Lostanlen V., Hirn M. J., Oyallon E., Zhang S., Cella C., Eickenberg M. (2019). Kymatio: Scattering Transforms in Python. arXiv preprint arXiv:1812.11214. &lt;a href=&quot;https://arxiv.org/abs/1812.11214&quot;&gt;(paper)&lt;/a&gt;</source>
          <target state="translated">Andreux M., Angles T., Exarchakis G., Leonarduzzi R., Rochette G., Thiry L., Zarka J., Mallat S., And&amp;eacute;n J., Belilovsky E., Bruna J., Lostanlen V., Hirn MJ , Oyallon E., Zhang S., Cella C., Eickenberg M. (2019). Kymatio : Python의 산란 변환. arXiv 사전 인쇄 arXiv : 1812.11214. &lt;a href=&quot;https://arxiv.org/abs/1812.11214&quot;&gt;(종이)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f12b81f2cc6b4de10d38bf56fc6d4331958fed02" translate="yes" xml:space="preserve">
          <source>Assuming the Kymatio source has been downloaded, you may install it by running</source>
          <target state="translated">Kymatio 소스가 다운로드되었다고 가정하면 다음을 실행하여 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36039c3f46e580163854da82be8479a2cafb33f2" translate="yes" xml:space="preserve">
          <source>BSD-3-Clause license</source>
          <target state="translated">BSD-3-Clause 라이선스</target>
        </trans-unit>
        <trans-unit id="c1f8fdcb20a1e7bdce7abff74794ceaeee5c0c92" translate="yes" xml:space="preserve">
          <source>Building the documentation from source</source>
          <target state="translated">소스에서 문서 작성</target>
        </trans-unit>
        <trans-unit id="c23cdae7f0075e92523e078952ccaad69da3cef0" translate="yes" xml:space="preserve">
          <source>Certain frontends, &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;sklearn&lt;/code&gt;, only allow processing on the CPU and are therefore slower. The &lt;code&gt;torch&lt;/code&gt;, &lt;code&gt;tensorflow&lt;/code&gt;, and &lt;code&gt;keras&lt;/code&gt; frontends, however, also support GPU processing, which can significantly accelerate computations. Additionally, the &lt;code&gt;torch&lt;/code&gt; backend supports an optimized &lt;code&gt;skcuda&lt;/code&gt; backend which currently provides the fastest performance in computing scattering transforms. In 2D, it may be instantiated using:</source>
          <target state="translated">특정 프런트 엔드 인 &lt;code&gt;numpy&lt;/code&gt; 및 &lt;code&gt;sklearn&lt;/code&gt; 은 CPU에서 처리 만 허용하므로 속도가 느립니다. 그러나 &lt;code&gt;torch&lt;/code&gt; , &lt;code&gt;tensorflow&lt;/code&gt; 및 &lt;code&gt;keras&lt;/code&gt; 프런트 엔드는 계산 속도를 크게 높일 수있는 GPU 처리도 지원합니다. 또한 &lt;code&gt;torch&lt;/code&gt; 백엔드는 현재 산란 변환 계산에서 가장 빠른 성능을 제공 하는 최적화 된 &lt;code&gt;skcuda&lt;/code&gt; 백엔드를 지원합니다 . 2D에서는 다음을 사용하여 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95bbf2dcf8e638da8f3ec0da173f22c4ce47b0cd" translate="yes" xml:space="preserve">
          <source>Code of conduct</source>
          <target state="translated">행동 강령</target>
        </trans-unit>
        <trans-unit id="e8280da218d7d376eca1b64f4dbd2e78d1e95323" translate="yes" xml:space="preserve">
          <source>Currently, there are six available frontend&amp;ndash;backend pairs, NumPy (CPU), scikit-learn (CPU), pure PyTorch (CPU and GPU), PyTorch+scikit-cuda (GPU), TensorFlow (CPU and GPU), and Keras (CPU and GPU).</source>
          <target state="translated">현재 사용 가능한 프런트 엔드 백엔드 쌍은 NumPy (CPU), scikit-learn (CPU), 순수 PyTorch (CPU 및 GPU), PyTorch + scikit-cuda (GPU), TensorFlow (CPU 및 GPU) 및 Keras ( CPU 및 GPU).</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">의존성</target>
        </trans-unit>
        <trans-unit id="8704fea0ca5af722fe8cb83918ba5d375516bd96" translate="yes" xml:space="preserve">
          <source>Developers can also install Kymatio via:</source>
          <target state="translated">개발자는 다음을 통해 Kymatio를 설치할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="36ae6b07ddb620b3c4b46d8635a1c22b8bedcc53" translate="yes" xml:space="preserve">
          <source>Each algorithm comes packaged with a frontend and backend. The frontend takes care of
interfacing with the user. The backend defines functions necessary for
computation of the scattering transform.</source>
          <target state="translated">각 알고리즘은 프런트 엔드 및 백엔드와 함께 패키지로 제공됩니다. 프런트 엔드는 사용자와의 인터페이스를 처리합니다. 백엔드는 산란 변환 계산에 필요한 함수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="e98420ff70d2b8112ee3173ae9b1c8f18bb7558f" translate="yes" xml:space="preserve">
          <source>Each of these algorithms is written in a high-level imperative paradigm, making it portable to any Python library for array operations as long as it enables complex-valued linear algebra and a fast Fourier transform (FFT).</source>
          <target state="translated">이러한 각 알고리즘은 높은 수준의 명령형 패러다임으로 작성되어 복잡한 값의 선형 대수와 FFT (고속 푸리에 변환)를 가능하게하는 한 배열 작업을 위해 Python 라이브러리로 이식 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ef8e6da45d2dd081d16f57b855fc793cd8acd72" translate="yes" xml:space="preserve">
          <source>Flexibility</source>
          <target state="translated">적응성</target>
        </trans-unit>
        <trans-unit id="152d1cf2d912c0b47ab85242e86450251a763f9b" translate="yes" xml:space="preserve">
          <source>Frontend</source>
          <target state="translated">프런트 엔드</target>
        </trans-unit>
        <trans-unit id="9433c5fb4a89d84b7499d9e379b243c69ce6205c" translate="yes" xml:space="preserve">
          <source>GPU acceleration</source>
          <target state="translated">GPU 가속</target>
        </trans-unit>
        <trans-unit id="2ad1db6e3f2ba5bce854f2655954836f3db54c2f" translate="yes" xml:space="preserve">
          <source>GitHub issue tracker</source>
          <target state="translated">GitHub 문제 추적기</target>
        </trans-unit>
        <trans-unit id="c6651994b242228b647fbbd2a83eccefd957abca" translate="yes" xml:space="preserve">
          <source>GitHub repository</source>
          <target state="translated">GitHub 리포지토리</target>
        </trans-unit>
        <trans-unit id="76be732f9cb754d7da8b57d54ea72b2e3b8ba2c3" translate="yes" xml:space="preserve">
          <source>How to cite</source>
          <target state="translated">인용하는 방법</target>
        </trans-unit>
        <trans-unit id="efd6b6ccb79578b072463a1d8293ef806ea055fb" translate="yes" xml:space="preserve">
          <source>If you use this package, please cite the following paper:</source>
          <target state="translated">이 패키지를 사용하는 경우 다음 문서를 인용하십시오.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="3f3de271c6c7dc20a297d761972fe34ae72df935" translate="yes" xml:space="preserve">
          <source>Installation from source</source>
          <target state="translated">소스에서 설치</target>
        </trans-unit>
        <trans-unit id="86c7b897c9b72bd137dc4b767e6866f5c39a73d8" translate="yes" xml:space="preserve">
          <source>Keras</source>
          <target state="translated">케 라스</target>
        </trans-unit>
        <trans-unit id="df3d1a146f6692a3651aaa3fbcacc93f681aafb3" translate="yes" xml:space="preserve">
          <source>Kyma (&lt;em&gt;&amp;kappa;ύ&amp;mu;&amp;alpha;&lt;/em&gt;) means &lt;em&gt;wave&lt;/em&gt; in Greek. By the same token, Kymatio (&lt;em&gt;&amp;kappa;&amp;upsilon;&amp;mu;ά&amp;tau;&amp;iota;&amp;omicron;&lt;/em&gt;) means &lt;em&gt;wavelet&lt;/em&gt;.</source>
          <target state="translated">Kyma ( &lt;em&gt;&amp;kappa;ύ&amp;mu;&amp;alpha;&lt;/em&gt; )는 그리스어로 &lt;em&gt;물결&lt;/em&gt; 을 의미 합니다. 마찬가지로 Kymatio ( &lt;em&gt;&amp;kappa;&amp;upsilon;&amp;mu;ά&amp;tau;&amp;iota;&amp;omicron;&lt;/em&gt; )는 &lt;em&gt;잔물결을&lt;/em&gt; 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="8548ef3944e0cef547f58cf5a2b4a3c646d896d9" translate="yes" xml:space="preserve">
          <source>Kymatio</source>
          <target state="translated">Kymatio</target>
        </trans-unit>
        <trans-unit id="2a3060a5bd60e793748b70988510c5cec47cd775" translate="yes" xml:space="preserve">
          <source>Kymatio integrates the construction of wavelet filter banks in 1D, 2D, and 3D, as well as memory-efficient algorithms for extracting wavelet scattering coefficients, under a common application programming interface.</source>
          <target state="translated">Kymatio는 1D, 2D 및 3D의 웨이블릿 필터 뱅크 구성과 공통 애플리케이션 프로그래밍 인터페이스에서 웨이블릿 산란 계수를 추출하기위한 메모리 효율적인 알고리즘을 통합합니다.</target>
        </trans-unit>
        <trans-unit id="54cac6c05abe915a8d206d03162f6ab2fc659a33" translate="yes" xml:space="preserve">
          <source>Kymatio is an implementation of the wavelet scattering transform in the Python programming language, suitable for large-scale numerical experiments in signal processing and machine learning.
Scattering transforms are translation-invariant signal representations implemented as convolutional networks whose filters are not learned, but fixed (as wavelet filters).</source>
          <target state="translated">Kymatio는 신호 처리 및 기계 학습의 대규모 수치 실험에 적합한 Python 프로그래밍 언어로 웨이블릿 산란 변환을 구현 한 것입니다. 산란 변환은 필터가 학습되지 않고 고정 된 (웨이블릿 필터로) 컨벌루션 네트워크로 구현 된 변환 불변 신호 표현입니다.</target>
        </trans-unit>
        <trans-unit id="6d5120c08afc7db51817d584e6d6b97810edfc46" translate="yes" xml:space="preserve">
          <source>Kymatio requires:</source>
          <target state="translated">Kymatio에는 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3ae7b28236ecfd76acbd2047faa28b2e0324cff4" translate="yes" xml:space="preserve">
          <source>Kymatio: Wavelet scattering in Python</source>
          <target state="translated">Kymatio : Python의 웨이블릿 산란</target>
        </trans-unit>
        <trans-unit id="ab2b0d24f77e5a3a38bab001e141787df2995183" translate="yes" xml:space="preserve">
          <source>Linux and macOS are the two officially supported operating systems.</source>
          <target state="translated">Linux와 macOS는 공식적으로 지원되는 두 가지 운영 체제입니다.</target>
        </trans-unit>
        <trans-unit id="c2290380067bfed6df2ec6fcc5387ef97d892b91" translate="yes" xml:space="preserve">
          <source>List of authors</source>
          <target state="translated">저자 목록</target>
        </trans-unit>
        <trans-unit id="4dc55fcd63f479bf8ebfdeaffa6bcc70d86f81ad" translate="yes" xml:space="preserve">
          <source>Note that the organization and the library are capitalized (&lt;em&gt;Kymatio&lt;/em&gt;) whereas the corresponding Python module is written in lowercase (&lt;code&gt;import kymatio&lt;/code&gt;).</source>
          <target state="translated">조직과 라이브러리는 대문자 ( &lt;em&gt;Kymatio&lt;/em&gt; )이고 해당 Python 모듈은 소문자 ( &lt;code&gt;import kymatio&lt;/code&gt; )로 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="148fb3e1f0f3a0a5a25d7af63d9dc5d6da0841ea" translate="yes" xml:space="preserve">
          <source>NumPy</source>
          <target state="translated">NumPy</target>
        </trans-unit>
        <trans-unit id="181b2d0668b8d7262738c301c5724be5ca7e3241" translate="yes" xml:space="preserve">
          <source>Online resources</source>
          <target state="translated">온라인 리소스</target>
        </trans-unit>
        <trans-unit id="b307b88c84327b1804aee227595be53342245965" translate="yes" xml:space="preserve">
          <source>Portability</source>
          <target state="translated">휴대 성</target>
        </trans-unit>
        <trans-unit id="98a2e30eeb85238d061519d74935e170e44c72cb" translate="yes" xml:space="preserve">
          <source>PyTorch</source>
          <target state="translated">파이 토치</target>
        </trans-unit>
        <trans-unit id="be4fdf26c96852e056bf5d6ac5c3b6c919765a54" translate="yes" xml:space="preserve">
          <source>PyTorch and scikit-cuda</source>
          <target state="translated">PyTorch 및 scikit-cuda</target>
        </trans-unit>
        <trans-unit id="36ccbb6e002491c3a25d7ac443e22891fb590e4b" translate="yes" xml:space="preserve">
          <source>Python (&amp;gt;= 3.5)</source>
          <target state="translated">Python (&amp;gt; = 3.5)</target>
        </trans-unit>
        <trans-unit id="cde26ebfd6a3380e06f47e7a97faf1d5c4989cc4" translate="yes" xml:space="preserve">
          <source>Running Kymatio on a graphics processing unit (GPU) rather than a multi-core conventional central processing unit (CPU) allows for significant speedups in computing the scattering transform.
The current speedup with respect to CPU-based MATLAB code is of the order of 10 in 1D and 3D and of the order of 100 in 2D.</source>
          <target state="translated">멀티 코어 기존 중앙 처리 장치 (CPU)가 아닌 그래픽 처리 장치 (GPU)에서 Kymatio를 실행하면 산란 변환을 계산할 때 상당한 속도를 높일 수 있습니다. CPU 기반 MATLAB 코드와 관련하여 현재 속도 향상은 1D 및 3D에서 약 10, 2D에서 약 100입니다.</target>
        </trans-unit>
        <trans-unit id="94b03c70b196c58604c0a7faf7218bf6901b8e0c" translate="yes" xml:space="preserve">
          <source>Scalability</source>
          <target state="translated">확장 성</target>
        </trans-unit>
        <trans-unit id="719627dc8b024372a3f64a840cea6b6b82e3930e" translate="yes" xml:space="preserve">
          <source>SciPy (&amp;gt;= 0.13)</source>
          <target state="translated">SciPy (&amp;gt; = 0.13)</target>
        </trans-unit>
        <trans-unit id="aa03f53e41cb1c33016b8b02ed6b8f6801d7a75d" translate="yes" xml:space="preserve">
          <source>Scikit-learn</source>
          <target state="translated">Scikit-learn</target>
        </trans-unit>
        <trans-unit id="04c6f7f38268f65dec83686a308d089d271f8881" translate="yes" xml:space="preserve">
          <source>Standard installation (on CPU hardware)</source>
          <target state="translated">표준 설치 (CPU 하드웨어)</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">지원하다</target>
        </trans-unit>
        <trans-unit id="91920dffa2de075aa71252ce246c4919ca2918b7" translate="yes" xml:space="preserve">
          <source>TensorFlow</source>
          <target state="translated">TensorFlow</target>
        </trans-unit>
        <trans-unit id="c25dc5610a01b0c692eaeed08e28068b4bcc5187" translate="yes" xml:space="preserve">
          <source>The Kymatio environment</source>
          <target state="translated">Kymatio 환경</target>
        </trans-unit>
        <trans-unit id="1abd05325464742c038fa63ed6a75dfab2865ff5" translate="yes" xml:space="preserve">
          <source>The Kymatio organization associates the developers of several pre-existing packages for wavelet scattering, including &lt;code&gt;ScatNet&lt;/code&gt;, &lt;code&gt;scattering.m&lt;/code&gt;, &lt;code&gt;PyScatWave&lt;/code&gt;, &lt;code&gt;WaveletScattering.jl&lt;/code&gt;, and &lt;code&gt;PyScatHarm&lt;/code&gt;.</source>
          <target state="translated">Kymatio 조직은 &lt;code&gt;ScatNet&lt;/code&gt; , &lt;code&gt;scattering.m&lt;/code&gt; , &lt;code&gt;PyScatWave&lt;/code&gt; , &lt;code&gt;WaveletScattering.jl&lt;/code&gt; 및 &lt;code&gt;PyScatHarm&lt;/code&gt; 을 포함하여 웨이블릿 산란을위한 여러 기존 패키지의 개발자를 연결합니다 .</target>
        </trans-unit>
        <trans-unit id="889510d61cc4478b1f890a999b109806db04b367" translate="yes" xml:space="preserve">
          <source>The documentation can also be found in the &lt;code&gt;doc/&lt;/code&gt; subfolder of the GitHub repository.
To build the documentation locally, please clone this repository and run</source>
          <target state="translated">설명서는 GitHub 저장소 의 &lt;code&gt;doc/&lt;/code&gt; 하위 폴더 에서도 찾을 수 있습니다 . 문서를 로컬로 빌드하려면이 저장소를 복제하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="fa9f92c1199d3cb46e41c8111a313f3059de7824" translate="yes" xml:space="preserve">
          <source>The documentation of Kymatio is officially hosted on the &lt;a href=&quot;https://www.kymat.io/&quot;&gt;kymat.io&lt;/a&gt; website.</source>
          <target state="translated">Kymatio의 문서는 공식적으로 &lt;a href=&quot;https://www.kymat.io/&quot;&gt;kymat.io&lt;/a&gt; 웹 사이트 에서 호스팅됩니다 .</target>
        </trans-unit>
        <trans-unit id="38bd42950d585edf9cac7c0b160e300e46553aa8" translate="yes" xml:space="preserve">
          <source>The recommended pronunciation for Kymatio is &lt;em&gt;kim-ah-tio&lt;/em&gt;. In other words, it rhymes with patio, not with ratio.</source>
          <target state="translated">Kymatio의 추천 발음은 &lt;em&gt;kim-ah-tio&lt;/em&gt; 입니다. 즉, 비율이 아닌 파티오와 운율이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b2372497347160ef4fd2d2708611e96f9f743d06" translate="yes" xml:space="preserve">
          <source>The resort to PyTorch tensors as inputs to Kymatio allows the programmer to backpropagate the gradient of wavelet scattering coefficients, thus integrating them within an end-to-end trainable pipeline, such as a deep neural network.</source>
          <target state="translated">Kymatio에 대한 입력으로 PyTorch 텐서를 사용하면 프로그래머가 웨이블릿 산란 계수의 기울기를 역 전파하여 심층 신경망과 같은 종단 간 훈련 가능한 파이프 라인 내에서 통합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5a1bf380ef4e64c7198f09c52af5705b6a80a91" translate="yes" xml:space="preserve">
          <source>The user may control the choice of backend at runtime via for instance:</source>
          <target state="translated">사용자는 다음을 통해 런타임시 백엔드 선택을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa133e091d611c406041455e9dc419d31a31e906" translate="yes" xml:space="preserve">
          <source>This is particularly useful when working with large images, such as those in ImageNet, which are of size 224&amp;times;224.</source>
          <target state="translated">이것은 224 &amp;times; 224 크기의 ImageNet과 같은 큰 이미지로 작업 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fb3e475a7ee89678052880f00eb0fa9feda6105c" translate="yes" xml:space="preserve">
          <source>To explicitly call the &lt;code&gt;numpy&lt;/code&gt; frontend, run:</source>
          <target state="translated">&lt;code&gt;numpy&lt;/code&gt; 프런트 엔드 를 명시 적으로 호출하려면 다음을 실행하세요.</target>
        </trans-unit>
        <trans-unit id="bea76a8e8b506c0a9628a71da028ba7568b9ab4b" translate="yes" xml:space="preserve">
          <source>To run Kymatio on a graphics processing unit (GPU), you can either use the PyTorch-style &lt;code&gt;cuda()&lt;/code&gt; method to move your
object to GPU. Kymatio is designed to operate on a variety of backends for tensor operations. For extra speed, install
the CUDA library and the &lt;code&gt;skcuda&lt;/code&gt; dependency by running the following pip command:</source>
          <target state="translated">그래픽 처리 장치 (GPU)에서 Kymatio를 실행하려면 PyTorch 스타일 &lt;code&gt;cuda()&lt;/code&gt; 메서드를 사용하여 개체를 GPU로 이동할 수 있습니다. Kymatio는 텐서 작업을 위해 다양한 백엔드에서 작동하도록 설계되었습니다. 속도를 &lt;code&gt;skcuda&lt;/code&gt; 려면 다음 pip 명령을 실행하여 CUDA 라이브러리 및 skcuda 종속성을 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="36e4e599c682ada4993528950521fa589d9ec336" translate="yes" xml:space="preserve">
          <source>Use Kymatio if you need a library that:</source>
          <target state="translated">다음과 같은 라이브러리가 필요한 경우 Kymatio를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="05a5ae551bf368c5e5041bf2d553b6aabbde4596" translate="yes" xml:space="preserve">
          <source>Wavelet scattering transforms in Python with GPU acceleration</source>
          <target state="translated">GPU 가속을 사용하는 Python의 웨이블릿 산란 변환</target>
        </trans-unit>
        <trans-unit id="2754d3d6d5e3850f1489be50c4b4328fc62e9d21" translate="yes" xml:space="preserve">
          <source>We refer to our &lt;a href=&quot;https://www.kymat.io/userguide.html#benchmarks&quot;&gt;official benchmarks&lt;/a&gt; for further details.</source>
          <target state="translated">우리는 우리를 참조 &lt;a href=&quot;https://www.kymat.io/userguide.html#benchmarks&quot;&gt;공식 벤치 마크&lt;/a&gt; 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="b5a1163607c1137f1cda0f47a72aa839208d98ac" translate="yes" xml:space="preserve">
          <source>We strongly recommend running Kymatio in an Anaconda environment, because this simplifies the installation of other
dependencies. You may install the latest version of Kymatio using the package manager &lt;code&gt;pip&lt;/code&gt;, which will automatically download
Kymatio from the Python Package Index (PyPI):</source>
          <target state="translated">Anaconda 환경에서 Kymatio를 실행하는 것이 좋습니다. 이렇게하면 다른 종속성의 설치가 단순화되기 때문입니다. 패키지 관리자 &lt;code&gt;pip&lt;/code&gt; 를 사용하여 최신 버전의 Kymatio를 설치할 수 있습니다. 그러면 Python Package Index (PyPI)에서 Kymatio가 자동으로 다운로드됩니다.</target>
        </trans-unit>
        <trans-unit id="0a90cf7749775f795a2e742c439f803343fdd208" translate="yes" xml:space="preserve">
          <source>We wish to thank the Scientific Computing Core at the Flatiron Institute for the use of their computing resources for testing.</source>
          <target state="translated">테스트를 위해 컴퓨팅 리소스를 사용해 주신 Flatiron Institute의 Scientific Computing Core에 감사드립니다.</target>
        </trans-unit>
        <trans-unit id="06c8d549921b00b4e95f34fc557fff72651fde53" translate="yes" xml:space="preserve">
          <source>We would also like to thank &amp;Eacute;cole Normale Sup&amp;eacute;rieure for their support.</source>
          <target state="translated">또한 &amp;Eacute;cole Normale Sup&amp;eacute;rieure의 지원에 감사드립니다.</target>
        </trans-unit>
        <trans-unit id="54774106dc227a99af20e5f33853600fbcf96e22" translate="yes" xml:space="preserve">
          <source>integrates wavelet scattering in a deep learning architecture, and</source>
          <target state="translated">딥 러닝 아키텍처에 웨이블릿 산란을 통합하고</target>
        </trans-unit>
        <trans-unit id="dd482e601611de45efcfd5d84acfca518a9fb1ea" translate="yes" xml:space="preserve">
          <source>runs seamlessly on CPU and GPU hardware, with major deep learning APIs, such
as PyTorch and TensorFlow.</source>
          <target state="translated">PyTorch 및 TensorFlow와 같은 주요 딥 러닝 API를 사용하여 CPU 및 GPU 하드웨어에서 원활하게 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="8cdc0b5a5f22cf13a5eaa3baf42d2bd5ebe625cf" translate="yes" xml:space="preserve">
          <source>supports 1-D, 2-D, and 3-D wavelets,</source>
          <target state="translated">1-D, 2-D 및 3-D 웨이블릿을 지원합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
