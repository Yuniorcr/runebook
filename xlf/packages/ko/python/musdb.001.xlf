<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/musdb/">
    <body>
      <group id="musdb">
        <trans-unit id="eff1ab2217457363930cfd857d03cbe7acecf8d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.audio&lt;/code&gt;, stereo mixture as an numpy array of shape &lt;code&gt;(nb_samples, 2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Track.audio&lt;/code&gt; , 스테레오 믹스 &lt;code&gt;(nb_samples, 2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5d441d75d5493d97701a4791554c53b1ea63127" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.name&lt;/code&gt;, the track name, consisting of &lt;code&gt;Track.artist&lt;/code&gt; and &lt;code&gt;Track.title&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Track.name&lt;/code&gt; , &lt;code&gt;Track.artist&lt;/code&gt; 및 &lt;code&gt;Track.title&lt;/code&gt; 로 구성된 트랙 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="0c6e8e4571ff73ce2c0cbe03b66cbafbaf85a2bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.path&lt;/code&gt;, the absolute path of the mixture which might be handy to process with external applications.</source>
          <target state="translated">&lt;code&gt;Track.path&lt;/code&gt; , 외부 응용 프로그램으로 처리하는 데 편리 할 수있는 혼합물의 절대 경로입니다.</target>
        </trans-unit>
        <trans-unit id="df352bf2c4ef3c71ca9e9bcd5402bdd8c9d7fb0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.rate&lt;/code&gt;, the sample rate of the mixture.</source>
          <target state="translated">&lt;code&gt;Track.rate&lt;/code&gt; , 혼합물의 샘플 속도.</target>
        </trans-unit>
        <trans-unit id="47fa7f3db16beaa5f69ea7bc866af4f3fc23f69e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.sources&lt;/code&gt;, a dictionary of sources used for this track.</source>
          <target state="translated">&lt;code&gt;Track.sources&lt;/code&gt; ,이 트랙에 사용 된 소스 사전입니다.</target>
        </trans-unit>
        <trans-unit id="121d66e2807831beba8db486f18ef6989ba57638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.stems&lt;/code&gt;, an numpy tensor of all five stereo sources of shape &lt;code&gt;(5, nb_samples, 2)&lt;/code&gt;. The stems are always in the following order: &lt;code&gt;['mixture', 'drums', 'bass', 'other', 'vocals']&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;Track.stems&lt;/code&gt; , 5 개 스테레오 소스 &lt;code&gt;(5, nb_samples, 2)&lt;/code&gt; 모두의 numpy 텐서 . 스템의 순서는 항상 다음과 같습니다. &lt;code&gt;['mixture', 'drums', 'bass', 'other', 'vocals']&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="e36c9a7e880ef463ca80b642aab1c316c0874d54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Track.targets&lt;/code&gt;, a dictionary of targets provided for this track.
Note that for MUSDB, the sources and targets differ only in the existence of the &lt;code&gt;accompaniment&lt;/code&gt;, which is the sum of all sources, except for the vocals. MUSDB supports the following targets: &lt;code&gt;['mixture', 'drums', 'bass', 'other', 'vocals', 'accompaniment', 'linear_mixture']&lt;/code&gt;. Note that some of the targets (such as &lt;strong&gt;accompaniment&lt;/strong&gt;) are dynamically mixed on the fly.</source>
          <target state="translated">&lt;code&gt;Track.targets&lt;/code&gt; ,이 트랙에 제공된 대상 사전입니다. MUSDB의 경우 소스와 대상 은 보컬을 제외한 모든 소스의 합인 &lt;code&gt;accompaniment&lt;/code&gt; 가 존재하는 경우에만 다릅니다 . MUSDB는 다음 타겟을 지원합니다 : &lt;code&gt;['mixture', 'drums', 'bass', 'other', 'vocals', 'accompaniment', 'linear_mixture']&lt;/code&gt; . 일부 타겟 (예 : &lt;strong&gt;반주&lt;/strong&gt; )은 즉석에서 동적으로 믹싱됩니다.</target>
        </trans-unit>
        <trans-unit id="33e24b937c4ac43e5fcf63232384893b9f40c24f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;musdb&lt;/code&gt; comes with 7 seconds excerpts (automatically downloaded) of the full dataset for quick evaluation or prototyping. The full dataset, however, needs to be downloaded &lt;a href=&quot;https://zenodo.org/record/1117372&quot;&gt;via Zenodo&lt;/a&gt; and stored (unzipped) separately.</source>
          <target state="translated">&lt;code&gt;musdb&lt;/code&gt; 는 빠른 평가 또는 프로토 타이핑을 위해 전체 데이터 세트의 7 초 발췌 (자동 다운로드)와 함께 제공됩니다. 그러나 전체 데이터 세트 &lt;a href=&quot;https://zenodo.org/record/1117372&quot;&gt;는 Zenodo를 통해&lt;/a&gt; 다운로드 하고 별도로 저장 (압축 해제)해야합니다.</target>
        </trans-unit>
        <trans-unit id="420a4eb2d0665ef680393c5af54d6fcaa6a78172" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;MUSDB18&lt;/em&gt; comes encoded in &lt;a href=&quot;http://www.stems-music.com/&quot;&gt;STEMS&lt;/a&gt; which is a multitrack audio format that uses &lt;em&gt;lossy compression&lt;/em&gt;. The &lt;code&gt;musdb&lt;/code&gt; package, internally, relies on FFMPEG to decode the multi-stream files. For convenience, we developed a python package called &lt;a href=&quot;https://github.com/faroit/stempeg&quot;&gt;stempeg&lt;/a&gt; that allows to easily parse the stem files and decode them on-the-fly.
When you install &lt;em&gt;musdb&lt;/em&gt; (which depends on &lt;em&gt;stempeg&lt;/em&gt;), it is therefore necessary to also install the FFMPEG library. The installation may differ among operating systems and python distributions:</source>
          <target state="translated">&lt;em&gt;MUSDB18은&lt;/em&gt; 으로 인코딩되어 제공 &lt;a href=&quot;http://www.stems-music.com/&quot;&gt;줄기&lt;/a&gt; 용도가 멀티 트랙 오디오 포맷 인 &lt;em&gt;압축 손실이&lt;/em&gt; . &lt;code&gt;musdb&lt;/code&gt; 의 패키지는 내부적으로 멀티 스트림 파일을 디코딩하는 FFMPEG에 의존한다. 편의를 위해 우리 는 줄기 파일을 쉽게 구문 분석하고 즉시 디코딩 할 수있는 &lt;a href=&quot;https://github.com/faroit/stempeg&quot;&gt;stempeg&lt;/a&gt; 라는 파이썬 패키지를 개발했습니다 . &lt;em&gt;musdb&lt;/em&gt; ( &lt;em&gt;stempeg&lt;/em&gt; 에 따라 &lt;em&gt;다름&lt;/em&gt; ) 를 설치할 때 &lt;em&gt;FFMPEG&lt;/em&gt; 라이브러리도 설치해야합니다. 설치는 운영 체제와 Python 배포판에 따라 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea0ff0a3bd2dd89256f78e68349fac519239ccf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When you use the decoded MUSDB, use the &lt;code&gt;is_wav&lt;/code&gt; parameter when initializing the dataset.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;디코딩 된 MUSDB를 사용하는 경우 데이터 세트를 초기화 할 때 &lt;code&gt;is_wav&lt;/code&gt; 매개 변수를 사용합니다 .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f265a828664515c2a0a69dd5db40e87c516c584" translate="yes" xml:space="preserve">
          <source>A python package to parse and process the &lt;a href=&quot;https://sigsep.github.io/musdb&quot;&gt;MUSDB18 dataset&lt;/a&gt;, the largest open access dataset for music source separation. The tool was originally developed for the &lt;a href=&quot;sisec18.unmix.app&quot;&gt;Music Separation task&lt;/a&gt; as part of the &lt;a href=&quot;https://sisec.inria.fr/&quot;&gt;Signal Separation Evaluation Campaign (SISEC)&lt;/a&gt;.</source>
          <target state="translated">음악 소스 분리를위한 최대 오픈 액세스 데이터 &lt;a href=&quot;https://sigsep.github.io/musdb&quot;&gt;세트&lt;/a&gt; 인 MUSDB18 데이터 세트 를 구문 분석하고 처리하는 Python 패키지 입니다. 이 도구는 원래 &lt;a href=&quot;https://sisec.inria.fr/&quot;&gt;SISEC (Signal Separation Evaluation Campaign)&lt;/a&gt; 의 일부로 &lt;a href=&quot;sisec18.unmix.app&quot;&gt;Music Separation 작업&lt;/a&gt; 을 위해 개발되었습니다 .</target>
        </trans-unit>
        <trans-unit id="9f672ccf915a39598644ad9a295ffb1dbd62e8d7" translate="yes" xml:space="preserve">
          <source>Alternatively you can install FFMPEG manually as follows:</source>
          <target state="translated">또는 다음과 같이 FFMPEG를 수동으로 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="323cf9586a360c76d757f761fea4549f8b45d87e" translate="yes" xml:space="preserve">
          <source>Baselines</source>
          <target state="translated">기준</target>
        </trans-unit>
        <trans-unit id="fd328df32af47ff4f34212c8adf3d3fbaf1aea24" translate="yes" xml:space="preserve">
          <source>Citations</source>
          <target state="translated">인용</target>
        </trans-unit>
        <trans-unit id="ff7513853508e7c6e3aa07908df2a450a026eb88" translate="yes" xml:space="preserve">
          <source>Evaluation</source>
          <target state="translated">평가</target>
        </trans-unit>
        <trans-unit id="5f6443a284213415a14df3c85e12378cf8071af9" translate="yes" xml:space="preserve">
          <source>For oracle methods, please check out our &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-oracle&quot;&gt;open unmix oracle separation methods&lt;/a&gt;.
This will show you how oracle performance is computed and gives indications for an upper bound for the quality of the separation.</source>
          <target state="translated">오라클 방식의 경우 &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-oracle&quot;&gt;오픈 언 믹스 오라클 분리 방식을&lt;/a&gt; 확인하십시오 . 이것은 오라클 성능이 계산되는 방법을 보여주고 분리 품질에 대한 상한을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="765ce65dc57c23ea4b17c61f7adde7d0f903c740" translate="yes" xml:space="preserve">
          <source>Getting the data</source>
          <target state="translated">데이터 얻기</target>
        </trans-unit>
        <trans-unit id="8e9e47310de9555280cd460663c1dbd0a1adba5b" translate="yes" xml:space="preserve">
          <source>If compare your results with SiSEC 2018 Participants - Cite the SiSEC 2018 LVA/ICA Paper</source>
          <target state="translated">결과를 SiSEC 2018 참가자와 비교하는 경우-SiSEC 2018 LVA / ICA 논문 인용</target>
        </trans-unit>
        <trans-unit id="138db4b5382fa4b7773cb8a28fe6e1cf154b3abe" translate="yes" xml:space="preserve">
          <source>If you don't want to use python for this, we also provide &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-io&quot;&gt;docker based scripts&lt;/a&gt; to decode the dataset to WAV files.</source>
          <target state="translated">이를 위해 python을 사용하지 않으려면 데이터 세트를 WAV 파일로 디코딩하는 &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-io&quot;&gt;도커 기반 스크립트&lt;/a&gt; 도 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="03fccfef108b986a75907475407a3721d977c3dd" translate="yes" xml:space="preserve">
          <source>If you use the MUSDB dataset for your research - Cite the MUSDB18 Dataset</source>
          <target state="translated">연구를 위해 MUSDB 데이터 세트를 사용하는 경우-MUSDB18 데이터 세트를 인용하십시오.</target>
        </trans-unit>
        <trans-unit id="6c98bd4105d83c734465099d92637f2b39cc418a" translate="yes" xml:space="preserve">
          <source>If you want to access individual tracks, you can access the &lt;code&gt;mus&lt;/code&gt; tracks list by its indices, e.g. &lt;code&gt;mus[2:]&lt;/code&gt;. To foster reproducible research, we provide a fixed validation dataset.</source>
          <target state="translated">개별 트랙에 액세스하려면 해당 인덱스 (예 : &lt;code&gt;mus[2:]&lt;/code&gt; 별로 &lt;code&gt;mus&lt;/code&gt; 트랙 목록에 액세스 할 수 있습니다 . 재현 가능한 연구를 촉진하기 위해 고정 된 검증 데이터 세트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c0aea3c013c4ea85aaf8da01bb7c5c92bd04c515" translate="yes" xml:space="preserve">
          <source>If you want to use WAV files (e.g. for faster audio decoding), &lt;code&gt;musdb&lt;/code&gt; also supports parsing and processing pre-decoded PCM/wav files. &lt;code&gt;musdb&lt;/code&gt; comes with the ability to convert a STEMS dataset into WAV version. This script can be used from the command line by</source>
          <target state="translated">WAV 파일을 사용하려는 경우 (예 : 더 빠른 오디오 디코딩을 위해) &lt;code&gt;musdb&lt;/code&gt; 는 사전 디코딩 된 PCM / wav 파일의 구문 분석 및 처리도 지원합니다. &lt;code&gt;musdb&lt;/code&gt; 에는 STEMS 데이터 세트를 WAV 버전으로 변환하는 기능이 있습니다. 이 스크립트는 다음과 같이 명령 줄에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5770b728fa2eb0839ba0edf415f1f1192785c2f4" translate="yes" xml:space="preserve">
          <source>Import the &lt;code&gt;musdb&lt;/code&gt; package in your main python function and iterate over the 7 seconds &lt;code&gt;musdb&lt;/code&gt; tracks:</source>
          <target state="translated">기본 Python 함수에서 &lt;code&gt;musdb&lt;/code&gt; 패키지를 가져 오고 7 초 동안 &lt;code&gt;musdb&lt;/code&gt; 트랙을 반복 합니다.</target>
        </trans-unit>
        <trans-unit id="a8f39a0eaff1e31685a2b14797108f08b8c37cd0" translate="yes" xml:space="preserve">
          <source>Installation and Setup</source>
          <target state="translated">설치 및 설정</target>
        </trans-unit>
        <trans-unit id="370cfaa9b9ac29647dea8e39f6de9fea6cc3a9a7" translate="yes" xml:space="preserve">
          <source>Iterate over MUSDB18 tracks</source>
          <target state="translated">MUSDB18 트랙 반복</target>
        </trans-unit>
        <trans-unit id="7f47c6de2ebcabbcc56f62559cf85e9a5796a39a" translate="yes" xml:space="preserve">
          <source>Iterating over &lt;code&gt;musdb&lt;/code&gt; and thus accessing the audio data is as simple as. Lets assume, we have a supervised training method &lt;code&gt;train(x, y)&lt;/code&gt; that takes the &lt;strong&gt;mixture&lt;/strong&gt; as input and the &lt;strong&gt;vocals&lt;/strong&gt; as output, we can simple use:</source>
          <target state="translated">&lt;code&gt;musdb&lt;/code&gt; 를 반복 하여 오디오 데이터에 액세스하는 것은 간단합니다. &lt;strong&gt;혼합&lt;/strong&gt; 을 입력으로, &lt;strong&gt;보컬&lt;/strong&gt; 을 출력으로 사용 하는지도 학습 방법 &lt;code&gt;train(x, y)&lt;/code&gt; 가 있다고 가정 해 보겠습니다 . 간단한 사용이 가능합니다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="132dd629d2322820736b20863649b1dc62f54f40" translate="yes" xml:space="preserve">
          <source>On &lt;a href=&quot;https://anaconda.org&quot;&gt;Anaconda&lt;/a&gt;, you can install FFMPEG using &lt;code&gt;conda install -c conda-forge ffmpeg&lt;/code&gt;.</source>
          <target state="translated">에 &lt;a href=&quot;https://anaconda.org&quot;&gt;아나콘다&lt;/a&gt; , 당신은 FFMPEG를 사용하여 설치할 수 있습니다 &lt;code&gt;conda install -c conda-forge ffmpeg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="207215fe0cc1433e1aede28acc2a8073c8c33db1" translate="yes" xml:space="preserve">
          <source>Open-Unmix</source>
          <target state="translated">오픈-언 믹스</target>
        </trans-unit>
        <trans-unit id="2b4abd4e67fec0f3d7112a8e2a392fb3249b9341" translate="yes" xml:space="preserve">
          <source>Oracles</source>
          <target state="translated">오라클</target>
        </trans-unit>
        <trans-unit id="77ca84718e0ad8247dcc8f32f65ce5736bf1270f" translate="yes" xml:space="preserve">
          <source>Package installation</source>
          <target state="translated">패키지 설치</target>
        </trans-unit>
        <trans-unit id="2a1b54776f0e80073e212cb5b9ce3350e5c11555" translate="yes" xml:space="preserve">
          <source>Processing training and testing subsets separately</source>
          <target state="translated">훈련 및 테스트 하위 집합을 개별적으로 처리</target>
        </trans-unit>
        <trans-unit id="df4021359edbeba8382d06ca8f62d6123c1282b1" translate="yes" xml:space="preserve">
          <source>Python parser for the SIGSEP MUSDB18 dataset</source>
          <target state="translated">SIGSEP MUSDB18 데이터 세트 용 Python 파서</target>
        </trans-unit>
        <trans-unit id="9062ad8afd8d0d1be03a86b7244eeb4d7794c02d" translate="yes" xml:space="preserve">
          <source>Setting up musdb</source>
          <target state="translated">musdb 설정</target>
        </trans-unit>
        <trans-unit id="ff667ad4912ee7200ee958e9c14cfab32b735028" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Track&lt;/code&gt; objects which makes it easy to process the audio and metadata in a pythonic way:</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; 이 쉽게 파이썬 방법으로 오디오 및 메타 데이터를 처리 할 수 있습니다 제품 :</target>
        </trans-unit>
        <trans-unit id="4e264d7ce32d057a9dd6209d34288c3668929c0f" translate="yes" xml:space="preserve">
          <source>The dataset is hosted on Zenodo and requires that users request access, since the tracks can only be used for academic purposes. We manually check this requests. Please do not fill the form multiple times, it usually takes as less than a day to give you access.</source>
          <target state="translated">데이터 세트는 Zenodo에서 호스팅되며 트랙은 학술 목적으로 만 사용할 수 있으므로 사용자가 액세스를 요청해야합니다. 이 요청을 수동으로 확인합니다. 양식을 여러 번 작성하지 마십시오. 일반적으로 액세스 권한을 부여하는 데 하루도 걸리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2da76dfbeac983fa1c791c4b2a7bf221d157c103" translate="yes" xml:space="preserve">
          <source>The list of validation tracks can be edited using the &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-tools/blob/b283da5b8f24e84172a60a06bb8f3dacd57aa6cd/musdb/configs/mus.yaml&quot;&gt;&lt;code&gt;mus.setup['validation_tracks']&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">유효성 검사 트랙 목록은 &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-tools/blob/b283da5b8f24e84172a60a06bb8f3dacd57aa6cd/musdb/configs/mus.yaml&quot;&gt; &lt;code&gt;mus.setup['validation_tracks']&lt;/code&gt; &lt;/a&gt; 개체를 사용하여 편집 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c34bfbcd3c28a179b9c52e7a72bd51dc8961b60b" translate="yes" xml:space="preserve">
          <source>The mixture is not exactly the sum of its sources, is that intended?</source>
          <target state="translated">혼합물이 정확히 소스의 합이 아닙니다. 의도 한 것입니까?</target>
        </trans-unit>
        <trans-unit id="78a04588fdb45db6b16aa25b1f9fcab863f71b75" translate="yes" xml:space="preserve">
          <source>This is not a bug. Since we adopted the STEMS format, we used AAC compression. Here the residual noise of the mixture is different from the sum of the residual noises of the sources. This difference does not significantly affect separation performance.</source>
          <target state="translated">이것은 버그가 아닙니다. STEMS 형식을 채택했기 때문에 AAC 압축을 사용했습니다. 여기서 혼합물의 잔류 소음은 소스의 잔류 소음의 합과 다릅니다. 이 차이는 분리 성능에 큰 영향을주지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e55f986e229905af6c29b05543f574bab642f10" translate="yes" xml:space="preserve">
          <source>This package should nicely integrate with your existing python numpy, tensorflow or pytorch code. Most of the steps to use musdb in your project will probably use the same first steps:</source>
          <target state="translated">이 패키지는 기존 python numpy, tensorflow 또는 pytorch 코드와 잘 통합되어야합니다. 프로젝트에서 musdb를 사용하는 대부분의 단계는 동일한 첫 번째 단계를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ac5c5d45a33ef62d494dbc071fa4f1cc427b5e30" translate="yes" xml:space="preserve">
          <source>To Evaluate a &lt;code&gt;musdb&lt;/code&gt; track using the popular BSSEval metrics, you can use our &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-eval&quot;&gt;museval&lt;/a&gt; package. After &lt;code&gt;pip install musdb&lt;/code&gt; evaluation of a single &lt;code&gt;track&lt;/code&gt;, can be done by</source>
          <target state="translated">인기있는 BSSEval 메트릭을 사용하여 &lt;code&gt;musdb&lt;/code&gt; 트랙 을 평가하려면 &lt;a href=&quot;https://github.com/sigsep/sigsep-mus-eval&quot;&gt;museval&lt;/a&gt; 패키지를 사용할 수 있습니다 . &lt;code&gt;pip install musdb&lt;/code&gt; 단일 &lt;code&gt;track&lt;/code&gt; 평가 후 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea9731eda0e95dda5e1d21e3e28bb04a4dfc415c" translate="yes" xml:space="preserve">
          <source>To use the full dataset, set a dataset &lt;code&gt;root&lt;/code&gt; directory</source>
          <target state="translated">전체 데이터 세트를 사용하려면 데이터 세트 &lt;code&gt;root&lt;/code&gt; 디렉터리를 설정하세요.</target>
        </trans-unit>
        <trans-unit id="79adadec10484e80d3f5b6c83e9b25779b6d8976" translate="yes" xml:space="preserve">
          <source>Tracks properties</source>
          <target state="translated">트랙 속성</target>
        </trans-unit>
        <trans-unit id="32815e2e57b9b4822b6c51f7ef4021db020cc173" translate="yes" xml:space="preserve">
          <source>Training Deep Neural Networks with &lt;code&gt;musdb&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;musdb&lt;/code&gt; 로 심층 신경망 훈련</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">용법</target>
        </trans-unit>
        <trans-unit id="eed450cf1db8d13dbd7fc62ae850160bb45c4bdf" translate="yes" xml:space="preserve">
          <source>Use train / validation split</source>
          <target state="translated">기차 / 검증 분할 사용</target>
        </trans-unit>
        <trans-unit id="ac68f0a7761ade25c5abaadd56f1ede023f14135" translate="yes" xml:space="preserve">
          <source>Using STEMs (Default)</source>
          <target state="translated">STEM 사용 (기본값)</target>
        </trans-unit>
        <trans-unit id="f9cc14cd4eeb07f9364dc314ab41688001f7bb4f" translate="yes" xml:space="preserve">
          <source>Using WAV files (Optional)</source>
          <target state="translated">WAV 파일 사용 (선택 사항)</target>
        </trans-unit>
        <trans-unit id="2a8773c12df6590465cdd18bf29b6de11cc247cf" translate="yes" xml:space="preserve">
          <source>We provide a state-of-the-art deep learning based separation method for PyTorch, Tensorflow and NNable at &lt;a href=&quot;https://open.unmix.app&quot;&gt;open.unmix.app&lt;/a&gt;.</source>
          <target state="translated">open.unmix.app에서 &lt;a href=&quot;https://open.unmix.app&quot;&gt;PyTorch&lt;/a&gt; , Tensorflow 및 NNable에 대한 최신 딥 러닝 기반 분리 방법을 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="6d5193e3e0fea752a8d31ef41a4bb6187afbf501" translate="yes" xml:space="preserve">
          <source>We provide subsets for &lt;em&gt;train&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; for machine learning methods:</source>
          <target state="translated">우리는 대한 부분 집합 제공 &lt;em&gt;기차&lt;/em&gt; 및 &lt;em&gt;테스트&lt;/em&gt; 기계 학습 방법에 대한을 :</target>
        </trans-unit>
        <trans-unit id="0dcca236bff78f18ea9af962b822381d3b2ac79c" translate="yes" xml:space="preserve">
          <source>Writing an efficient dataset generator varies across different deep learning frameworks. A very simple n&amp;auml;ive generator that</source>
          <target state="translated">효율적인 데이터 세트 생성기를 작성하는 것은 다양한 딥 러닝 프레임 워크에 따라 다릅니다. 매우 간단한 n&amp;auml;ive 생성기</target>
        </trans-unit>
        <trans-unit id="dc1d3adf282845429dfa1766e857fcd094739ae2" translate="yes" xml:space="preserve">
          <source>You can install &lt;code&gt;musdb&lt;/code&gt; using pip:</source>
          <target state="translated">pip를 사용하여 &lt;code&gt;musdb&lt;/code&gt; 를 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3614cadabe7bed2983c8e8197272251e585a99f5" translate="yes" xml:space="preserve">
          <source>can be easily implemented using musdb's &lt;code&gt;track.chunk_start&lt;/code&gt; and &lt;code&gt;track.chunk_duration&lt;/code&gt; properties which efficiently seeks to the start sample (provided in seconds) and does not load the full audio into memory first.</source>
          <target state="translated">시작 샘플 (초 단위로 제공)을 효율적으로 찾고 전체 오디오를 메모리에 먼저로드하지 않는 musdb의 &lt;code&gt;track.chunk_start&lt;/code&gt; 및 &lt;code&gt;track.chunk_duration&lt;/code&gt; 속성을 사용하여 쉽게 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6deb4a1ffc62a2033bb57af15982810cab577408" translate="yes" xml:space="preserve">
          <source>draws random chunks of fixed length with replacement</source>
          <target state="translated">고정 길이의 임의의 청크를 대체로 그립니다.</target>
        </trans-unit>
        <trans-unit id="9183d0bd96f204b0c69dc98e8bf6007f280b56b3" translate="yes" xml:space="preserve">
          <source>draws random tracks with replacement</source>
          <target state="translated">대체로 무작위 트랙을 그립니다.</target>
        </trans-unit>
        <trans-unit id="c1207f9aa701dc5352980de4ce83b67a41b3ec7a" translate="yes" xml:space="preserve">
          <source>musdb</source>
          <target state="translated">musdb</target>
        </trans-unit>
        <trans-unit id="29c454a4fe227f88ac6da74e1e1eed3a2ddea509" translate="yes" xml:space="preserve">
          <source>on Ubuntu/Debian: &lt;code&gt;sudo apt-get install ffmpeg&lt;/code&gt;</source>
          <target state="translated">Ubuntu / Debian : &lt;code&gt;sudo apt-get install ffmpeg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eaf87315e2ddc76ec1da180c3941e6ecadeb8340" translate="yes" xml:space="preserve">
          <source>on macOS, using homebrew: &lt;code&gt;brew install ffmpeg&lt;/code&gt;</source>
          <target state="translated">macOS에서 homebrew 사용 : &lt;code&gt;brew install ffmpeg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45e057342e222276bab1adc7d9088a6b7b29b3bc" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;root&lt;/code&gt; is the path to the MUSDB18 dataset root folder. The root parameter can also be overridden using a system environment variable. Just &lt;code&gt;export MUSDB_PATH=/path/to/musdb&lt;/code&gt; inside your bash environment. In that case no arguments would need to passed to &lt;code&gt;DB()&lt;/code&gt;.</source>
          <target state="translated">여기서 &lt;code&gt;root&lt;/code&gt; 는 MUSDB18 데이터 세트 루트 폴더의 경로입니다. 루트 매개 변수는 시스템 환경 변수를 사용하여 재정의 할 수도 있습니다. 다만 &lt;code&gt;export MUSDB_PATH=/path/to/musdb&lt;/code&gt; 배시 환경 내부. 이 경우 인수를 &lt;code&gt;DB()&lt;/code&gt; 로 전달할 필요가 없습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
