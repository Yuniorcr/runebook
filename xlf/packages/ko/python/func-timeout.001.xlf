<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/func-timeout/">
    <body>
      <group id="func-timeout">
        <trans-unit id="feee6a54136f547b5b223ea01ea22ddd16752062" translate="yes" xml:space="preserve">
          <source># Code here</source>
          <target state="translated"># 여기에 코드</target>
        </trans-unit>
        <trans-unit id="e68023cd09f756d57b4d6e241204e2ab723be088" translate="yes" xml:space="preserve">
          <source># Handle any exceptions that doit might raise here</source>
          <target state="translated"># 여기에서 발생할 수있는 모든 예외 처리</target>
        </trans-unit>
        <trans-unit id="a36178640e22cbfc2d65c319364d9167eaafd809" translate="yes" xml:space="preserve">
          <source># Uncomment next line to start thread in &amp;ldquo;daemon mode&amp;rdquo; &amp;ndash; i.e. will terminate/join automatically upon main thread exit</source>
          <target state="translated"># &quot;데몬 모드&quot;에서 스레드를 시작하려면 다음 줄의 주석 처리를 제거합니다. 즉, 주 스레드가 종료되면 자동으로 종료 / 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="275eeebecf558e4aea38b60e24254c43efbe1b41" translate="yes" xml:space="preserve">
          <source>#myThread.daemon = True</source>
          <target state="translated"># myThread.daemon = True</target>
        </trans-unit>
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="d2187e63645ef4bb3f26e2fb34dce39becd241df" translate="yes" xml:space="preserve">
          <source>&amp;lsquo;&amp;rsquo;&amp;rsquo;</source>
          <target state="translated">'' '</target>
        </trans-unit>
        <trans-unit id="b8b3c85833b691944d6333b2a187ace95545f9a1" translate="yes" xml:space="preserve">
          <source>* No argument - Retry same args, same function, same timeout</source>
          <target state="translated">* 인수 없음-동일한 인수, 동일한 함수, 동일한 시간 초과 재시도</target>
        </trans-unit>
        <trans-unit id="23aa718e7e7ad48c68768019e7e4ec2ee93b2a54" translate="yes" xml:space="preserve">
          <source>* None - Retry same args, same function, no timeout</source>
          <target state="translated">* 없음-동일한 인수, 동일한 함수, 시간 초과없이 재시도</target>
        </trans-unit>
        <trans-unit id="c10c25328ef4d57b12a00c84012aab2456cc9f3b" translate="yes" xml:space="preserve">
          <source>* Number argument - Retry same args, same function, provided timeout</source>
          <target state="translated">* 숫자 인수-동일한 인수, 동일한 함수 재시도, 제공된 시간 초과</target>
        </trans-unit>
        <trans-unit id="309927097440c7f76f70fcb6b11e98329ae23db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;As a Parent Class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;부모 클래스로서&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f8aa0ed92b246136317387a1baf277f343cdbf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Direct Thread To Execute A Function&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;함수를 실행하는 직접 스레드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb48907b580ebd035cde20253b39011836f211b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes on Exception Type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예외 유형에 대한 참고 사항&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c99b14cc2a1e2f3a8efed4682ec12293b3494c36" translate="yes" xml:space="preserve">
          <source>@func_set_timeout(2.5)</source>
          <target state="translated">@func_set_timeout (2.5)</target>
        </trans-unit>
        <trans-unit id="c7a0970f989fa5ef2b54661eda5c630da4545bc6" translate="yes" xml:space="preserve">
          <source>@param args    &amp;lt;tuple&amp;gt; - Any ordered arguments to pass to the function</source>
          <target state="translated">@param args &amp;lt;tuple&amp;gt;-함수에 전달할 순서가 지정된 인수</target>
        </trans-unit>
        <trans-unit id="4ea60d53ee1449ad95b704a34f51fb8a3d90d9ef" translate="yes" xml:space="preserve">
          <source>@param exception &amp;lt;Exception type&amp;gt; - Exception to throw. Likely, you want to use something</source>
          <target state="translated">@param exception &amp;lt;Exception type&amp;gt;-throw 할 예외입니다. 아마도 무언가를 사용하고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="6cb16a85fff57f4e4d38262597e41a2f59d90fb5" translate="yes" xml:space="preserve">
          <source>@param func &amp;lt;function&amp;gt; - The function to call</source>
          <target state="translated">@param func &amp;lt;function&amp;gt;-호출 할 함수</target>
        </trans-unit>
        <trans-unit id="35390e8a89b0942498fae834d5992b00f625480f" translate="yes" xml:space="preserve">
          <source>@param kwargs  &amp;lt;dict/None&amp;gt; - Keyword arguments to pass to the function.</source>
          <target state="translated">@param kwargs &amp;lt;dict / None&amp;gt;-함수에 전달할 키워드 인수입니다.</target>
        </trans-unit>
        <trans-unit id="ef18d87a32f160cb292de0290a036a455e7cc431" translate="yes" xml:space="preserve">
          <source>@param raiseEvery &amp;lt;float&amp;gt; Default 2.0 - We will keep raising this exception every #raiseEvery seconds,</source>
          <target state="translated">@param raiseEvery &amp;lt;float&amp;gt; 기본값 2.0-#raiseEvery 초마다이 예외를 계속 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="50b7eb667bb071740b4afff9f4b8729d4327662a" translate="yes" xml:space="preserve">
          <source>@param timeout &amp;lt;float&amp;gt; - Maximum number of seconds to run #func# before terminating</source>
          <target state="translated">@param timeout &amp;lt;float&amp;gt;-종료하기 전에 # func #을 실행할 최대 시간 (초)</target>
        </trans-unit>
        <trans-unit id="b0c07ea97f78c45cc7ea0926ab2640e6c40d98af" translate="yes" xml:space="preserve">
          <source>@raises - FunctionTimedOut if #timeout# is exceeded, otherwise anything #func# could raise will be raised</source>
          <target state="translated">@raises-# timeout #이 초과되면 FunctionTimedOut, 그렇지 않으면 # func #가 발생할 수있는 모든 항목이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0659ba6686518e2a7ce04bb5f4309a7d923045b6" translate="yes" xml:space="preserve">
          <source>@return &amp;lt;None&amp;gt;</source>
          <target state="translated">@return &amp;lt;없음&amp;gt;</target>
        </trans-unit>
        <trans-unit id="467ba344eec003a5ff0fc569fc2a10f5a561174b" translate="yes" xml:space="preserve">
          <source>@return - The return value that #func# gives</source>
          <target state="translated">@return-# func #이 제공하는 반환 값</target>
        </trans-unit>
        <trans-unit id="100d77de8173ea5e368d9c0cb6d295e8c4cee7b5" translate="yes" xml:space="preserve">
          <source>Alternatively, you can instantiate StoppableThread directly and pass the &amp;ldquo;target&amp;rdquo;, &amp;ldquo;args&amp;rdquo;, and &amp;ldquo;kwargs&amp;rdquo; arguments to the constructor</source>
          <target state="translated">또는 StoppableThread를 직접 인스턴스화하고 &quot;target&quot;, &quot;args&quot;및 &quot;kwargs&quot;인수를 생성자에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8bff82bd190b9c2d124fa8b1c94f00ff3a5c15b1" translate="yes" xml:space="preserve">
          <source>BaseException.__init__(self, &amp;lsquo;Server is shutting down&amp;rsquo;)</source>
          <target state="translated">BaseException .__ init __ (self, '서버가 종료 중입니다')</target>
        </trans-unit>
        <trans-unit id="54a09183a92bb78d8025aac71327b4f225b065a5" translate="yes" xml:space="preserve">
          <source>ChangeLog can be found at &lt;a href=&quot;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&quot;&gt;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&lt;/a&gt;</source>
          <target state="translated">ChangeLog는 &lt;a href=&quot;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&quot;&gt;https://raw.githubusercontent.com/kata198/func_timeout/master/ChangeLog&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f10e3d40f7b6fe8af9732eb3b3b2f1718b656d2" translate="yes" xml:space="preserve">
          <source>Consider using a custom exception type which extends BaseException, which you can then use to do basic cleanup ( flush any open files, etc. ).</source>
          <target state="translated">BaseException을 확장하는 사용자 정의 예외 유형을 사용하는 것을 고려하십시오. 그러면 기본 정리를 수행하는 데 사용할 수 있습니다 (열려있는 모든 파일 플러시 등).</target>
        </trans-unit>
        <trans-unit id="cb5e98805e8916222733f2479eaf75dfa868942d" translate="yes" xml:space="preserve">
          <source>Exception raised if the function times out.</source>
          <target state="translated">함수가 시간 초과되면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d6cd60a74a862ce4794d712691e5036e182599bf" translate="yes" xml:space="preserve">
          <source>Find the latest pydoc at &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&lt;/a&gt;?vers=4.3.5 .</source>
          <target state="translated">&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&lt;/a&gt; ? vers = 4.3.5 에서 최신 pydoc을 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9bd21f858ad515e347536489b8e6aa92b8321745" translate="yes" xml:space="preserve">
          <source>Function Timeout</source>
          <target state="translated">기능 시간 초과</target>
        </trans-unit>
        <trans-unit id="38135db3327312ca8905b3043a3204cddd31c084" translate="yes" xml:space="preserve">
          <source>FunctionTimedOut</source>
          <target state="translated">FunctionTimedOut</target>
        </trans-unit>
        <trans-unit id="8888b0b6ee750b5c3fd635edd38d064a0d74cf44" translate="yes" xml:space="preserve">
          <source>Has a &amp;ldquo;retry&amp;rdquo; method which takes the following arguments:</source>
          <target state="translated">다음 인수를 사용하는 &quot;재시도&quot;메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="02ac01fb0cfd279b39ed474d0bdcc7cd3414f7f3" translate="yes" xml:space="preserve">
          <source>I&amp;rsquo;ve tested func_timeout with python 2.7, 3.4, 3.5, 3.6, 3.7. It should work on other versions as well.</source>
          <target state="translated">python 2.7, 3.4, 3.5, 3.6, 3.7로 func_timeout을 테스트했습니다. 다른 버전에서도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="09fffbdcf1dd4f28d31baa327756e64b7acdd3f7" translate="yes" xml:space="preserve">
          <source>If &amp;ldquo;allowOverride&amp;rdquo; is present, an optional keyword argument is added to the wrapped function, &amp;lsquo;forceTimeout&amp;rsquo;. When provided, this will override the timeout used on this function.</source>
          <target state="translated">&quot;allowOverride&quot;가있는 경우 래핑 된 함수 'forceTimeout'에 선택적 키워드 인수가 추가됩니다. 제공되면이 함수에 사용 된 시간 제한을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="bbdf149491f140acb5ae1179d2fdb2cb2326a377" translate="yes" xml:space="preserve">
          <source>If the timeout has exceeded, the &amp;ldquo;FunctionTimedOut&amp;rdquo; exception will be raised in the context of the function being called, as well as from the context of &amp;ldquo;func_timeout&amp;rdquo;. You should have your function catch the &amp;ldquo;FunctionTimedOut&amp;rdquo; exception and exit cleanly if possible. Every 2 seconds until your function is terminated, it will continue to raise FunctionTimedOut. The terminating of the timed-out function happens in the context of the thread and will not block main execution.</source>
          <target state="translated">시간 초과가 초과되면 &quot;func_timeout&quot;컨텍스트뿐만 아니라 호출되는 함수 컨텍스트에서 &quot;FunctionTimedOut&quot;예외가 발생합니다. 함수가 &quot;FunctionTimedOut&quot;예외를 포착하고 가능하면 깔끔하게 종료해야합니다. 함수가 종료 될 때까지 2 초마다 FunctionTimedOut을 계속 발생시킵니다. 타임 아웃 된 함수의 종료는 스레드의 컨텍스트에서 발생하며 주 실행을 차단하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aa7a109d8a92b592ba887b0b4d9d5999c9e5998a" translate="yes" xml:space="preserve">
          <source>If there is a return or an exception raised, it will be returned/raised as normal.</source>
          <target state="translated">반환 또는 예외가 발생하면 정상적으로 반환 / 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bd633cce19e2b0f7922432032989a632f946529c" translate="yes" xml:space="preserve">
          <source>If you can&amp;rsquo;t avoid such code (third-party lib?) you can set the &amp;ldquo;repeatEvery&amp;rdquo; to a very very low number (like .00001 ), so hopefully it will raise, go to the except clause, and then raise again before &amp;ldquo;continue&amp;rdquo; is hit.</source>
          <target state="translated">이러한 코드 (타사 lib?)를 피할 수없는 경우 &quot;repeatEvery&quot;를 매우 낮은 숫자 (예 : .00001)로 설정할 수 있습니다. 그러면이 코드가 올릴 수 있고 except 절로 이동 한 다음 다시 올릴 것입니다. &quot;계속&quot;을 누르기 전에.</target>
        </trans-unit>
        <trans-unit id="c34ff3efd6f9ed87c63cf8fb1e301439741632ae" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re calling third-party code you can&amp;rsquo;t control, which catches BaseException, set this to a low number</source>
          <target state="translated">제어 할 수없는 타사 코드를 호출하는 경우 BaseException을 잡는 경우 낮은 숫자로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d42190007de4c011a55f67b562fb0bc423a30a1c" translate="yes" xml:space="preserve">
          <source>If your code traps a specific exception type, this will allow you #raiseEvery seconds to cleanup before exit.</source>
          <target state="translated">코드가 특정 예외 유형을 트랩하는 경우 종료하기 전에 #raiseEvery 초를 정리할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="716c60e7b79f82324044ecdf8ef28ea264d629f1" translate="yes" xml:space="preserve">
          <source>It is recommended that you create an exception that extends BaseException instead of Exception, otherwise code like this will never stop:</source>
          <target state="translated">Exception 대신 BaseException을 확장하는 예외를 생성하는 것이 좋습니다. 그렇지 않으면 다음과 같은 코드가 중단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ecbef2995cf67f967161f9f335efae907164c78a" translate="yes" xml:space="preserve">
          <source>Pydoc</source>
          <target state="translated">파이 독</target>
        </trans-unit>
        <trans-unit id="1fe4b21eeb0e315b583d66c662dd6045b31fba73" translate="yes" xml:space="preserve">
          <source>Pydoc can be found at: &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&lt;/a&gt;?vers=1</source>
          <target state="translated">Pydoc은 &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&quot;&gt;http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html&lt;/a&gt; ? vers = 1 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e353dccbb3770ad2a0cb80535fbb189f2749efd8" translate="yes" xml:space="preserve">
          <source>Python module to support running any existing function with a given timeout.</source>
          <target state="translated">주어진 시간 제한으로 기존 함수 실행을 지원하는 Python 모듈.</target>
        </trans-unit>
        <trans-unit id="50e737758e7a78a17cd92eceeb66a215d0703657" translate="yes" xml:space="preserve">
          <source>Python module which allows you to specify timeouts when calling any existing function. Also provides support for stoppable-threads</source>
          <target state="translated">기존 함수를 호출 할 때 시간 제한을 지정할 수있는 Python 모듈입니다. 중지 가능한 스레드에 대한 지원도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f068c399200bcf8c682f992645b319ce961b0414" translate="yes" xml:space="preserve">
          <source>Raises any exceptions #func# would raise, returns what #func# would return (unless timeout is exceeded), in which case it raises FunctionTimedOut</source>
          <target state="translated"># func #에서 발생하는 모든 예외를 발생시키고, # func #에서 반환하는 것을 반환합니다 (시간 초과가 초과되지 않는 한).이 경우 FunctionTimedOut이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="95d653c8c0f9762787df73e800dde458c122fc19" translate="yes" xml:space="preserve">
          <source>So, for esxample, if you have a function &amp;ldquo;doit(&amp;lsquo;arg1&amp;rsquo;, &amp;lsquo;arg2&amp;rsquo;)&amp;rdquo; that you want to limit to running for 5 seconds, with func_timeout you can call it like this:</source>
          <target state="translated">따라서 esxample의 경우 5 초 동안 실행하도록 제한하려는 함수 &quot;doit ( 'arg1', 'arg2')&quot;가있는 경우 func_timeout을 사용하여 다음과 같이 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e0c8be2dae1c18af6438e224c6d5079d7506bee" translate="yes" xml:space="preserve">
          <source>StoppableThread</source>
          <target state="translated">StoppableThread</target>
        </trans-unit>
        <trans-unit id="9051d0e12075d0499bbce88409b66cd0b3bb5d06" translate="yes" xml:space="preserve">
          <source>StoppableThread is a subclass of threading.Thread, which supports stopping the thread (supports both python2 and python3). It will work to stop even in C code.</source>
          <target state="translated">StoppableThread는 threading.Thread의 하위 클래스로, 스레드 중지를 지원합니다 (python2 및 python3 모두 지원). C 코드에서도 멈출 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ac7dac1eafab769493419e79a8514435fb333a7" translate="yes" xml:space="preserve">
          <source>Stopping a Thread</source>
          <target state="translated">스레드 중지</target>
        </trans-unit>
        <trans-unit id="1e68785772a867c1dc7bfd922efe601ac2fe777b" translate="yes" xml:space="preserve">
          <source>Stops the thread by raising a given exception.</source>
          <target state="translated">주어진 예외를 발생시켜 스레드를 중지합니다.</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">지원하다</target>
        </trans-unit>
        <trans-unit id="d329942c0a4bcf7c2177264fee462a98f280336c" translate="yes" xml:space="preserve">
          <source>Takes two arguments, &amp;ldquo;timeout&amp;rdquo; and &amp;ldquo;allowOverride&amp;rdquo;</source>
          <target state="translated">&quot;timeout&quot;및 &quot;allowOverride&quot;의 두 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e0159984409ba3dd74cf3aa597338586632461d9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;exception&amp;rdquo; param must be a type, and it must be instantiable with no arguments (i.e. MyExceptionType() must create the object).</source>
          <target state="translated">&quot;예외&quot;매개 변수는 유형이어야하며 인수없이 인스턴스화 할 수 있어야합니다 (예 : MyExceptionType ()은 객체를 만들어야 함).</target>
        </trans-unit>
        <trans-unit id="962f5de7ab88f0bb85d3ad5bfdf32a584ed6496c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;timeout&amp;rdquo; parameter can be either a number (for a fixed timeout), or a function/lambda. If a function/lambda is used, it will be passed the same arguments as the called function was passed. It should return a number which will be used as the timeout for that paticular run. For example, if you have a method that calculates data, you&amp;rsquo;ll want a higher timeout for 1 million records than 50 records.</source>
          <target state="translated">&quot;timeout&quot;매개 변수는 숫자 (고정 된 시간 제한의 경우) 또는 함수 / 람다 일 수 있습니다. 함수 / 람다가 사용되면 호출 된 함수가 전달 된 것과 동일한 인수가 전달됩니다. 특정 실행에 대한 시간 제한으로 사용될 숫자를 반환해야합니다. 예를 들어 데이터를 계산하는 방법이있는 경우 1 백만 개의 레코드에 대해 50 개의 레코드보다 더 높은 시간 제한을 원할 것입니다.</target>
        </trans-unit>
        <trans-unit id="638c6dda5ff5545302fdfc1d9a135d5a723d022d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;StoppableThread&lt;/em&gt; class (you must extend this for your thread) adds a function, &lt;em&gt;stop&lt;/em&gt;, which can be called to stop the thread.</source>
          <target state="translated">&lt;em&gt;StoppableThread의&lt;/em&gt; 클래스는 (당신이 당신의 스레드에 대한이를 확장해야합니다) 함수 추가 &lt;em&gt;정지&lt;/em&gt; 스레드를 중지 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="941a778074283ddae1ae7efe4b8e3cd69210788b" translate="yes" xml:space="preserve">
          <source>The exception type you pass will be raised every #raiseEvery seconds in the context of that stoppable thread. You can tweak this value to give yourself more time for cleanups, or you can shrink it down to break out of empty exception handlers  ( try/except with bare except ).</source>
          <target state="translated">전달하는 예외 유형은 중지 가능한 스레드의 컨텍스트에서 #raiseEvery 초마다 발생합니다. 정리에 더 많은 시간을 제공하기 위해이 값을 조정하거나 빈 예외 처리기에서 벗어나도록 축소 할 수 있습니다 (bare except 사용시 try / except).</target>
        </trans-unit>
        <trans-unit id="306582be0dbc88fde6f9211698e7d894ea794cd4" translate="yes" xml:space="preserve">
          <source>The way it works is that you pass it an exception, and it raises it via the cpython api (So the next time a &amp;ldquo;python&amp;rdquo; function is called from C api, or the next line is processed in python code, the exception is raised).</source>
          <target state="translated">작동 방식은 예외를 전달하고 cpython api를 통해 발생시키는 것입니다 (따라서 다음에 &quot;python&quot;함수가 C api에서 호출되거나 다음 줄이 python 코드에서 처리 될 때 예외가 발생합니다. ).</target>
        </trans-unit>
        <trans-unit id="3f6e6626b94cfc10d932ccfc6cc02a4e53fbcd25" translate="yes" xml:space="preserve">
          <source>Then, at any time during the thread&amp;rsquo;s execution, you can call .stop( StopExceptionType ) to stop it ( more in &amp;ldquo;Stopping a Thread&amp;rdquo; below</source>
          <target state="translated">그런 다음 스레드 실행 중 언제든지 .stop (StopExceptionType)을 호출하여 중지 할 수 있습니다 (아래의 &quot;스레드 중지&quot;에서 자세히 알아보기).</target>
        </trans-unit>
        <trans-unit id="232f4a9ed1931c78516d5ebe645e54ec887af5dd" translate="yes" xml:space="preserve">
          <source>Then, you can create and start this thread like:</source>
          <target state="translated">그런 다음 다음과 같이이 스레드를 만들고 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59edc89391a5ff18bdc39fa62ae634509905ac75" translate="yes" xml:space="preserve">
          <source>This is a decorator you can use on functions to apply func_timeout.</source>
          <target state="translated">이것은 func_timeout을 적용하기 위해 함수에 사용할 수있는 데코레이터입니다.</target>
        </trans-unit>
        <trans-unit id="4746c633466638eb200a1ed4d9648f4828a5bf80" translate="yes" xml:space="preserve">
          <source>This is the function wherein you pass the timeout, the function you want to call, and any arguments, and it runs it for up to #timeout# seconds, and will return/raise anything the passed function would otherwise return or raise.</source>
          <target state="translated">이것은 시간 제한, 호출하려는 함수 및 인수를 전달하는 함수이며 최대 # timeout # 초 동안 실행하고 전달 된 함수가 반환하거나 발생하는 모든 것을 반환 / 상승합니다.</target>
        </trans-unit>
        <trans-unit id="7464d026804d91f73a7d71c9343a14eb1532a5b5" translate="yes" xml:space="preserve">
          <source>This should be a class/type, NOT an instance, i.e.  MyExceptionType   not  MyExceptionType()</source>
          <target state="translated">이것은 인스턴스가 아닌 클래스 / 유형이어야합니다. 즉, MyExceptionType ()이 아닌 MyExceptionType입니다.</target>
        </trans-unit>
        <trans-unit id="b2964ece4565541a784c561ecb7a9f59721bbb95" translate="yes" xml:space="preserve">
          <source>This will allow you to call functions in stoppable threads, for example handlers in an event loop, which can be stopped later via the .stop() method.</source>
          <target state="translated">이렇게하면 .stop () 메서드를 통해 나중에 중지 할 수있는 이벤트 루프의 핸들러와 같이 중지 가능한 스레드에서 함수를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76f27034687f9e082fa0729766c71b35a8cb477c" translate="yes" xml:space="preserve">
          <source>This will force &amp;lsquo;Server is shutting down&amp;rsquo; as the message held by this exception.</source>
          <target state="translated">이 예외가 보유한 메시지로 '서버가 종료되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="f74d606309338e7e102a2a7e1f653d9bffd8a50e" translate="yes" xml:space="preserve">
          <source>Using StoppableThread</source>
          <target state="translated">StoppableThread 사용</target>
        </trans-unit>
        <trans-unit id="8322fbe11cd44910c2b7c54f8d6f80e8e098392e" translate="yes" xml:space="preserve">
          <source>Works on windows, linux/unix, cygwin, mac</source>
          <target state="translated">Windows, linux / unix, cygwin, mac에서 작동</target>
        </trans-unit>
        <trans-unit id="dc256a906c56d5aa58d033feeb07568d6473cd98" translate="yes" xml:space="preserve">
          <source>You can use StoppableThread one of two ways:</source>
          <target state="translated">다음 두 가지 방법 중 하나로 StoppableThread를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f04c2db341aa133d55d9ac57971090de97ed837" translate="yes" xml:space="preserve">
          <source>You may want to consider using singleton types with fixed error messages, so that tracebacks, etc. log that the call timed out.</source>
          <target state="translated">고정 오류 메시지와 함께 싱글 톤 유형을 사용하여 추적 등에서 호출 시간이 초과되었음을 기록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b447f29b37d37004c887f2625617e804cc43b47b" translate="yes" xml:space="preserve">
          <source>Your thread can extend func_timeout.StoppableThread.StoppableThread and implement the &amp;ldquo;run&amp;rdquo; method, same as a normal thread.</source>
          <target state="translated">스레드는 func_timeout.StoppableThread.StoppableThread를 확장하고 일반 스레드와 마찬가지로 &quot;run&quot;메소드를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd7d54d7f0255f95c66baa0a6f4bac5df63e8150" translate="yes" xml:space="preserve">
          <source>class MyThread(StoppableThread):</source>
          <target state="translated">클래스 MyThread (StoppableThread) :</target>
        </trans-unit>
        <trans-unit id="4242da60e142b57966582fd1eabfb210aa0675a1" translate="yes" xml:space="preserve">
          <source>class ServerShutdownExceptionType(BaseException):</source>
          <target state="translated">ServerShutdownExceptionType (BaseException) 클래스 :</target>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">계속하다</target>
        </trans-unit>
        <trans-unit id="12159d1a0ad11fb0b167e1c9b28827fa8a24449c" translate="yes" xml:space="preserve">
          <source>def __init__(self, *args, **kwargs):</source>
          <target state="translated">def __init __ (self, * args, ** kwargs) :</target>
        </trans-unit>
        <trans-unit id="6bf03baf72f015d08c16ab6dda4aaa344cf19a71" translate="yes" xml:space="preserve">
          <source>def func_timeout(timeout, func, args=(), kwargs=None):</source>
          <target state="translated">def func_timeout (timeout, func, args = (), kwargs = None) :</target>
        </trans-unit>
        <trans-unit id="72af865f9d9ec68b133b3beba17ac1778f075fb9" translate="yes" xml:space="preserve">
          <source>def myFunction(self, arg1, arg2):</source>
          <target state="translated">def myFunction (self, arg1, arg2) :</target>
        </trans-unit>
        <trans-unit id="d9096d97c422134c85a3a5a4754c45aa13c827f9" translate="yes" xml:space="preserve">
          <source>def run(self):</source>
          <target state="translated">def 실행 (자체) :</target>
        </trans-unit>
        <trans-unit id="dad19f8f1e75ac0fc8a519081539c38d6d0dc583" translate="yes" xml:space="preserve">
          <source>def stop(self, exception, raiseEvery=2.0):</source>
          <target state="translated">def stop (self, exception, raiseEvery = 2.0) :</target>
        </trans-unit>
        <trans-unit id="84bffc3939a91128da32c64886f3e05319f53853" translate="yes" xml:space="preserve">
          <source>doSomething()</source>
          <target state="translated">doSomething ()</target>
        </trans-unit>
        <trans-unit id="5e77970730597cf1b78a5a1dfb5db0c74da883e8" translate="yes" xml:space="preserve">
          <source>doitReturnValue = func_timeout(5, doit, args=(&amp;lsquo;arg1&amp;rsquo;, &amp;lsquo;arg2&amp;rsquo;))</source>
          <target state="translated">doitReturnValue = func_timeout (5, doit, args = ( 'arg1', 'arg2'))</target>
        </trans-unit>
        <trans-unit id="8adb1a8fcec638260bae17578f39fc5d88f3f6f0" translate="yes" xml:space="preserve">
          <source>except Exception as e:</source>
          <target state="translated">예외를 제외하고 e :</target>
        </trans-unit>
        <trans-unit id="c57cf408589b3a07482119901763caba5284ee4e" translate="yes" xml:space="preserve">
          <source>except FunctionTimedOut:</source>
          <target state="translated">FunctionTimedOut 제외 :</target>
        </trans-unit>
        <trans-unit id="a3d10fd05f1987b39fa22b8e279f20c451159de2" translate="yes" xml:space="preserve">
          <source>from func_timeout import func_timeout, FunctionTimedOut</source>
          <target state="translated">func_timeout에서 import func_timeout, FunctionTimedOut</target>
        </trans-unit>
        <trans-unit id="db2590fa65bf729699de2c12a7ed18ca792b7a80" translate="yes" xml:space="preserve">
          <source>from func_timeout.StoppableThread import StoppableThread</source>
          <target state="translated">func_timeout.StoppableThread에서 가져 오기 StoppableThread</target>
        </trans-unit>
        <trans-unit id="f6130d61094a69ddf03067c3d8ba313f22f9ff1e" translate="yes" xml:space="preserve">
          <source>func_set_timeout</source>
          <target state="translated">func_set_timeout</target>
        </trans-unit>
        <trans-unit id="7e5b4e7b8a249bfaf725a967ea5b1f5d6999e2d2" translate="yes" xml:space="preserve">
          <source>func_timeout</source>
          <target state="translated">func_timeout</target>
        </trans-unit>
        <trans-unit id="412e059da1b9e9f5c40c9e02312c9c8012e034d5" translate="yes" xml:space="preserve">
          <source>func_timeout - Runs the given function for up to #timeout# seconds.</source>
          <target state="translated">func_timeout-최대 # timeout # 초 동안 주어진 함수를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="b9e1073b8ef8631b95584b26745f2a78d9d0caef" translate="yes" xml:space="preserve">
          <source>func_timeout will run the specified function in a thread with the specified arguments until it returns, raises an exception, or the timeout is exceeded.</source>
          <target state="translated">func_timeout은 반환되거나 예외가 발생하거나 시간 초과가 초과 될 때까지 지정된 인수를 사용하여 스레드에서 지정된 함수를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="dffd52bc06625dde19d0b56d547325a15bd705d2" translate="yes" xml:space="preserve">
          <source>myThread = MyThread()</source>
          <target state="translated">myThread = MyThread ()</target>
        </trans-unit>
        <trans-unit id="f31fd0390f6ec70393d585c64d822c8e8e0a339b" translate="yes" xml:space="preserve">
          <source>myThread = StoppableThread( target=myFunction, args=(&amp;lsquo;ordered&amp;rsquo;, &amp;lsquo;args&amp;rsquo;, &amp;lsquo;here&amp;rsquo;), kwargs={ &amp;lsquo;keyword args&amp;rsquo; : &amp;lsquo;here&amp;rsquo; } )</source>
          <target state="translated">myThread = StoppableThread (target = myFunction, args = ( 'ordered', 'args', 'here'), kwargs = { 'keyword args': 'here'})</target>
        </trans-unit>
        <trans-unit id="1703660c77617b7381eb65f83d232ec083ffe925" translate="yes" xml:space="preserve">
          <source>myThread.start()</source>
          <target state="translated">myThread.start ()</target>
        </trans-unit>
        <trans-unit id="63e724a84d6a501b4b835c7854cfc47a6b9d95be" translate="yes" xml:space="preserve">
          <source>print ( &amp;ldquo;doit(&amp;lsquo;arg1&amp;rsquo;, &amp;lsquo;arg2&amp;rsquo;) could not complete within 5 seconds and was terminated.\n&amp;rdquo;)</source>
          <target state="translated">print (&amp;ldquo;doit ( 'arg1', 'arg2')는 5 초 이내에 완료 할 수 없어 종료되었습니다. \ n&amp;rdquo;)</target>
        </trans-unit>
        <trans-unit id="63143b6f8007b98c53ca2149822777b3566f9241" translate="yes" xml:space="preserve">
          <source>return</source>
          <target state="translated">반환</target>
        </trans-unit>
        <trans-unit id="6e6037620e97f018e0458067ae68d161d69b7968" translate="yes" xml:space="preserve">
          <source>that inherits from BaseException (so except Exception as e: continue; isn&amp;rsquo;t a problem)</source>
          <target state="translated">BaseException에서 상 속됨 (예외 e : continue; 문제가 아님)</target>
        </trans-unit>
        <trans-unit id="c0f8e6a47ebeea6e24f6f6579081cf64be8d33e7" translate="yes" xml:space="preserve">
          <source>to break out of their exception handler.</source>
          <target state="translated">예외 처리기에서 벗어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee5bcc552a9530d8c817eb7c1414555172f903ff" translate="yes" xml:space="preserve">
          <source>try:</source>
          <target state="translated">시험:</target>
        </trans-unit>
        <trans-unit id="05c9d64a43b4817c5646da02b15d6da3296c151e" translate="yes" xml:space="preserve">
          <source>until the thread terminates.</source>
          <target state="translated">스레드가 종료 될 때까지.</target>
        </trans-unit>
        <trans-unit id="33911b06c894b3c1865492f50a52116659f18019" translate="yes" xml:space="preserve">
          <source>while True:</source>
          <target state="translated">True 동안 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
