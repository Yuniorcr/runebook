<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/grako/">
    <body>
      <group id="grako">
        <trans-unit id="4784be16436864f71cc9672f745adebbe734a561" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;Dennis Ritchie&lt;/a&gt; (1941-2011)</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;데니스 리치&lt;/a&gt; (1941-2011)</target>
        </trans-unit>
        <trans-unit id="d33ab16238e758409a4929d3e0d4d79170dccce6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; is a great language for working with language parsing and translation.</source>
          <target state="translated">&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; 은 언어 구문 분석 및 번역 작업에 적합한 언어입니다.</target>
        </trans-unit>
        <trans-unit id="9173c79f634b5c1ee5c5a3f6a450c82857535ff3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;At least for the people who send me mail about a new language that they&amp;rsquo;re designing, the general advice is: do it to learn about how to write a compiler. Don&amp;rsquo;t have any expectations that anyone will use it, unless you hook up with some sort of organization in a position to push it hard. It&amp;rsquo;s a lottery, and some can buy a lot of the tickets. There are plenty of beautiful languages (more beautiful than C) that didn&amp;rsquo;t catch on. But someone does win the lottery, and doing a language at least teaches you something.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;적어도 자신이 디자인하고있는 새로운 언어에 대한 메일을 보내는 사람들에게는 일반적인 조언은 다음과 같습니다. 컴파일러를 작성하는 방법을 배우기 위해 수행하십시오. 열심히 밀어 붙일 수있는 위치에있는 어떤 종류의 조직과 연결하지 않는 한, 누군가가 그것을 사용할 것이라고 기대하지 마십시오. 복권이고 일부는 많은 표를 살 수 있습니다. 따라 잡지 못한 아름다운 언어 (C보다 더 아름다운)가 많이 있습니다. 그러나 누군가는 복권에 당첨되고 언어를하는 것은 적어도 당신에게 무언가를 가르쳐줍니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9cd32f9a64f66e3f1e92f2d3295a021d9250efa8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Positive and negative lookaheads&lt;/em&gt;, and the &lt;em&gt;cut&lt;/em&gt; element (with its cleaning of the memoization cache) allow for additional, hand-crafted optimizations at the grammar level.</source>
          <target state="translated">&lt;em&gt;긍정적 및 부정적 미리보기&lt;/em&gt; 및 &lt;em&gt;컷&lt;/em&gt; 요소 (메모 화 캐시 정리 포함)를 사용하면 문법 수준에서 추가로 수작업으로 최적화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3451857826106f627f426aedc8a1625020f56def" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; (for &lt;em&gt;grammar compiler&lt;/em&gt;) is a tool that takes grammars in a variation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt; as input, and outputs &lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoizing&lt;/a&gt; (&lt;a href=&quot;http://bford.info/packrat/&quot;&gt;Packrat&lt;/a&gt;) &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parsers in &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt; ( &lt;em&gt;문법 컴파일러 용&lt;/em&gt; )는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt; 변형의 문법 을 입력으로 사용하고 &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; 에서 &lt;a href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoizing&lt;/a&gt; ( &lt;a href=&quot;http://bford.info/packrat/&quot;&gt;Packrat&lt;/a&gt; ) &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; 파서를 출력 하는 도구입니다 .</target>
        </trans-unit>
        <trans-unit id="96d115f7edccd957024570c7f59eb004a1abbc54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; can also compile a grammar stored in a string into a</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt; 는 또한 문자열에 저장된 문법을</target>
        </trans-unit>
        <trans-unit id="5e252d8adf9f8d7f679f07a346459bc97962fdb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; is &lt;em&gt;different&lt;/em&gt; from other &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parser generators:</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt; 는 다른 &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; 파서 생성기 &lt;em&gt;와 다릅니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="cae77d5bd2e58e1ae20d3dd7dee10a10a9c037c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; is feature-complete and currently being used with complex grammars to parse, analyze, and translate hundreds of thousands of lines of input text, including source code in several programming languages.</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt; 는 기능이 완벽하며 현재 여러 프로그래밍 언어의 소스 코드를 포함하여 수십만 줄의 입력 텍스트를 구문 분석, 분석 및 번역하기 위해 복잡한 문법과 함께 사용되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="18f89b63e0d8d958e85ae07f9fe7bdd6c944757a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grako&lt;/strong&gt; was created to address some recurring problems encountered over decades of working with parser generation tools:</source>
          <target state="translated">&lt;strong&gt;Grako&lt;/strong&gt; 는 파서 생성 도구를 사용하여 수십 년 동안 발생하는 몇 가지 반복되는 문제를 해결하기 위해 만들어졌습니다.</target>
        </trans-unit>
        <trans-unit id="b5ce5decf77605100580ce22e928c0123812aa93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;em&gt;DEVELOPMENT OF GRAKO HAS STOPPED&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt;&lt;em&gt;GRAKO 개발이 중단되었습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e298f9b741ca46826580289e198d319f2582e58" translate="yes" xml:space="preserve">
          <source>Automatic generation of &lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;Abstract Syntax Trees&lt;/a&gt; and Object Models, along with &lt;em&gt;Model Walkers&lt;/em&gt; and &lt;em&gt;Code Generators&lt;/em&gt; make analysis and translation approachable</source>
          <target state="translated">&lt;em&gt;모델 워커&lt;/em&gt; 및 &lt;em&gt;코드 생성기&lt;/em&gt; 와 함께 &lt;a href=&quot;http://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;추상 구문 트리&lt;/a&gt; 및 객체 모델을 자동으로 생성 하여 분석 및 번역에 접근 가능&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8aa57de6dce6ee1c35c6aba7426503281876b258" translate="yes" xml:space="preserve">
          <source>Changes</source>
          <target state="translated">변화</target>
        </trans-unit>
        <trans-unit id="3d7268de642e81fe33fc02c6192b5394b70af1fb" translate="yes" xml:space="preserve">
          <source>Creator of the &lt;a href=&quot;http://en.wikipedia.org/wiki/C_language&quot;&gt;C&lt;/a&gt; programming language and of &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unix&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://en.wikipedia.org/wiki/C_language&quot;&gt;C&lt;/a&gt; 프로그래밍 언어 및 &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix&quot;&gt;Unix의&lt;/a&gt; 제작자</target>
        </trans-unit>
        <trans-unit id="0cc53949dbf52cda6c9c708fa39f2c4e03372552" translate="yes" xml:space="preserve">
          <source>Delegation to &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; module for &lt;em&gt;lexemes&lt;/em&gt; allows for (&lt;a href=&quot;http://www.perl.org/&quot;&gt;Perl&lt;/a&gt;-like) powerful and efficient lexical analysis.</source>
          <target state="translated">에 위임 &lt;a href=&quot;http://python.org&quot;&gt;파이썬&lt;/a&gt; 의 &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;재&lt;/a&gt; 에 대한 모듈 &lt;em&gt;어휘는&lt;/em&gt; (허용 &lt;a href=&quot;http://www.perl.org/&quot;&gt;펄&lt;/a&gt; -like) 강력하고 효율적인 어휘 분석.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="681b8515024fa7916ec123b3549da902d51a6208" translate="yes" xml:space="preserve">
          <source>Generated parsers should be easy to read and debug by humans. Looking at the generated source code is sometimes the only way to find problems in a grammar, the semantic actions, or in the parser generator itself. It&amp;rsquo;s inconvenient to trust generated code that one cannot understand.</source>
          <target state="translated">생성 된 파서는 사람이 읽고 디버그하기 쉬워야합니다. 생성 된 소스 코드를 보는 것이 문법, 시맨틱 동작 또는 파서 생성기 자체에서 문제를 찾는 유일한 방법입니다. 이해할 수없는 생성 된 코드를 신뢰하는 것은 불편합니다.</target>
        </trans-unit>
        <trans-unit id="76f845b11158ab0286548c14cec0c121d6bbd47d" translate="yes" xml:space="preserve">
          <source>Generated parsers use &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s very efficient exception-handling system to backtrack. &lt;strong&gt;Grako&lt;/strong&gt; generated parsers simply assert what must be parsed. There are no complicated &lt;em&gt;if-then-else&lt;/em&gt; sequences for decision making or backtracking. Memoization allows going over the same input sequence several times in linear time.</source>
          <target state="translated">생성 된 파서는 &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; 의 매우 효율적인 예외 처리 시스템을 사용하여 역 추적합니다. &lt;strong&gt;Grako가&lt;/strong&gt; 생성 한 파서는 단순히 파싱해야하는 것을 주장합니다. 의사 결정 또는 역 추적을위한 복잡한 &lt;em&gt;if-then-else&lt;/em&gt; 시퀀스 가 없습니다 . 메모 화를 사용하면 동일한 입력 시퀀스를 선형 시간으로 여러 번 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18206f68d40065c1f40256be2b8dc8a21f41a464" translate="yes" xml:space="preserve">
          <source>Grako</source>
          <target state="translated">Grako</target>
        </trans-unit>
        <trans-unit id="6253aa0b0e4ccb4b5ac966af71e55203f6647a95" translate="yes" xml:space="preserve">
          <source>Grako takes a grammar in a variation of EBNF as input, and outputs a memoizing PEG/Packrat parser in Python.</source>
          <target state="translated">Grako는 EBNF 변형의 문법을 입력으로 취하고 Python으로 메모하는 PEG / Packrat 파서를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">문법</target>
        </trans-unit>
        <trans-unit id="4a8046fe523970120912fccf857dbd6aca85ed64" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re interested in the technology, or in future developments such as proper support for left recursion, then please follow the &lt;a href=&quot;https://pypi.python.org/pypi/tatsu&quot;&gt;Tatsu&lt;/a&gt; project.</source>
          <target state="translated">기술에 관심이 있거나 왼쪽 재귀에 대한 적절한 지원과 같은 향후 개발에 관심이 있다면 &lt;a href=&quot;https://pypi.python.org/pypi/tatsu&quot;&gt;Tatsu&lt;/a&gt; 프로젝트 를 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="78c589e22d8a0b1fc429384f8cbc3ac1db8365ab" translate="yes" xml:space="preserve">
          <source>Include files, rule inheritance, and rule inclusion give &lt;strong&gt;Grako&lt;/strong&gt; grammars considerable expressive power.</source>
          <target state="translated">포함 파일, 규칙 상속 및 규칙 포함은 &lt;strong&gt;Grako&lt;/strong&gt; 문법에 상당한 표현력을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="92bbdfa77d1a626bc85b41f02d51c64bfd2c18e7" translate="yes" xml:space="preserve">
          <source>It is easy to recruit help with knowledge about a mainstream programming language like &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;, but help is hard to find for working with complex grammar-description languages. &lt;strong&gt;Grako&lt;/strong&gt; grammars are in the spirit of a &lt;em&gt;Translators and Interpreters 101&lt;/em&gt; course (if something is hard to explain to a college student, it&amp;rsquo;s probably too complicated, or not well understood).</source>
          <target state="translated">&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; 과 같은 주류 프로그래밍 언어에 대한 지식으로 도움을 찾는 것은 쉽지만 복잡한 문법 설명 언어로 작업하는 경우 도움을 찾기가 어렵습니다. &lt;strong&gt;Grako&lt;/strong&gt; 문법은 &lt;em&gt;Translators and Interpreters 101&lt;/em&gt; 과정 의 정신을 &lt;strong&gt;따릅니다&lt;/strong&gt; (대학생에게 설명하기 어려운 것이 있으면 너무 복잡하거나 잘 이해되지 않은 것입니다).</target>
        </trans-unit>
        <trans-unit id="02bb67e6cc89e14999f6a90a934010b7f7c13bdc" translate="yes" xml:space="preserve">
          <source>LL and LR grammars become contaminated with myriads of lookahead statements to deal with ambiguous constructs in the source language. &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parsers address ambiguity from the onset.</source>
          <target state="translated">LL 및 LR 문법은 원어의 모호한 구조를 처리하기 위해 무수히 많은 예견 문으로 오염됩니다. &lt;a href=&quot;http://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; 파서는 처음부터 모호성을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">특허</target>
        </trans-unit>
        <trans-unit id="e796128e20dca9168d541e6b047b6047325e3780" translate="yes" xml:space="preserve">
          <source>Preprocessing (like dealing with includes, fixed column formats, or structure-through-indentation) belongs in well-designed program code; not in the grammar.</source>
          <target state="translated">전처리 (포함, 고정 열 형식 또는 들여 쓰기를 통한 구조 처리와 같은)는 잘 설계된 프로그램 코드에 속합니다. 문법이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">이론적 해석</target>
        </trans-unit>
        <trans-unit id="858be1680530539f957c139bee2bebf6eee8af08" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="25d2be045a32363cbde1def910edb8f3e046e4dd" translate="yes" xml:space="preserve">
          <source>Semantic actions &lt;em&gt;do not&lt;/em&gt;  belong in a grammar. They create yet another programming language to deal with when doing parsing and translation: the source language, the grammar language, the semantics language, the generated parser&amp;rsquo;s language, and the translation&amp;rsquo;s target language. Most grammar parsers do not check the syntax of embedded semantic actions, so errors get reported at awkward moments, and against the generated code, not against the grammar.</source>
          <target state="translated">시맨틱 동작 &lt;em&gt;은&lt;/em&gt; 문법에 속하지 &lt;em&gt;않습니다&lt;/em&gt; . 그들은 파싱과 번역을 할 때 처리 할 또 다른 프로그래밍 언어를 만듭니다 : 소스 언어, 문법 언어, 시맨틱 언어, 생성 된 파서의 언어, 번역 대상 언어. 대부분의 문법 파서는 포함 된 의미 동작의 구문을 확인하지 않으므로 문법이 아닌 생성 된 코드에 대해 어색한 순간에 오류가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="d6afa14e36dcba3c2e920822346be6dde11e35ba" translate="yes" xml:space="preserve">
          <source>Separating the grammar from the code that implements the semantics, and using a variation of a well-known grammar syntax (&lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt;) allows for full declarative power in language descriptions. General-purpose programming languages are not up to the task.</source>
          <target state="translated">의미 체계를 구현하는 코드에서 문법을 분리하고 잘 알려진 문법 구문 ( &lt;a href=&quot;http://en.wikipedia.org/wiki/Ebnf&quot;&gt;EBNF&lt;/a&gt; ) 의 변형을 사용하면 언어 설명에서 완전한 선언적 기능을 사용할 수 있습니다. 범용 프로그래밍 언어는 작업에 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be662f8f9b0c089fe4bb6c790411386a0f4151c6" translate="yes" xml:space="preserve">
          <source>Some programming languages allow the use of &lt;em&gt;keywords&lt;/em&gt; as identifiers, or have different meanings for symbols depending on context (&lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;). A parser needs control of lexical analysis to be able to handle those languages.</source>
          <target state="translated">일부 프로그래밍 언어는 &lt;em&gt;키워드&lt;/em&gt; 를 식별자로 사용하거나 컨텍스트 ( &lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; ) 에 따라 기호에 대해 다른 의미를 갖습니다 . 구문 분석기가 이러한 언어를 처리하려면 어휘 분석을 제어해야합니다.</target>
        </trans-unit>
        <trans-unit id="6d09aa2b6d57d449611e9a1932f33d9572fa6d78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/README.md&quot;&gt;complete documentation&lt;/a&gt; is available at &lt;strong&gt;Grako&lt;/strong&gt;&amp;rsquo;s &lt;a href=&quot;https://bitbucket.org/neogeny/grako/&quot;&gt;home page&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://bitbucket.org/neogeny/grako/src/default/README.md&quot;&gt;전체 문서&lt;/a&gt; 에서 확인할 수있다 &lt;strong&gt;Grako&lt;/strong&gt; 의 &lt;a href=&quot;https://bitbucket.org/neogeny/grako/&quot;&gt;홈페이지&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bf08bc76382ad0b914e5b8affbbf72d16c3e77dd" translate="yes" xml:space="preserve">
          <source>The only dependencies are on the &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; standard library, yet the &lt;a href=&quot;https://pypi.python.org/pypi/regex&quot;&gt;regex&lt;/a&gt; library will be used if installed, and &lt;a href=&quot;https://pypi.python.org/pypi/colorama/&quot;&gt;colorama&lt;/a&gt; will be used on trace output if available.  &lt;a href=&quot;https://pypi.python.org/pypi/pygraphviz&quot;&gt;pygraphviz&lt;/a&gt; is required for generating diagrams.</source>
          <target state="translated">유일한 종속성은 &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; 표준 라이브러리에 있지만 &lt;a href=&quot;https://pypi.python.org/pypi/regex&quot;&gt;정규식&lt;/a&gt; 라이브러리가 설치된 경우 사용되며 가능한 경우 추적 출력에 &lt;a href=&quot;https://pypi.python.org/pypi/colorama/&quot;&gt;colorama&lt;/a&gt; 가 사용됩니다. 다이어그램을 생성하려면 &lt;a href=&quot;https://pypi.python.org/pypi/pygraphviz&quot;&gt;pygraphviz&lt;/a&gt; 가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="083a2119512e7c2fd127dfa7cdd816418ca95241" translate="yes" xml:space="preserve">
          <source>The parser generator, the run-time support, and the generated parsers have measurably low &lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;Cyclomatic complexity&lt;/a&gt;.  At around 5 &lt;a href=&quot;http://en.wikipedia.org/wiki/KLOC&quot;&gt;KLOC&lt;/a&gt; of &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;, it is possible to study all its source code in a single session.</source>
          <target state="translated">파서 생성기, 런타임 지원 및 생성 된 파서는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;Cyclomatic 복잡성이 상당히&lt;/a&gt; 낮습니다 . 약 5 &lt;a href=&quot;http://en.wikipedia.org/wiki/KLOC&quot;&gt;KLOC&lt;/a&gt; 의 &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; 에서 단일 세션에서 모든 소스 코드를 연구 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2fc2a23b30cf230f79e5698d481f48b0648e949" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;http://docs.python.org/2/library/contextlib.html&quot;&gt;context managers&lt;/a&gt; considerably reduces the size of the generated parsers for code clarity, and enhanced CPU-cache hits.</source>
          <target state="translated">사용 &lt;a href=&quot;http://python.org&quot;&gt;파이썬&lt;/a&gt; 의 &lt;a href=&quot;http://docs.python.org/2/library/contextlib.html&quot;&gt;콘텍스트 매니저는&lt;/a&gt; 상당히 코드 명확성을 위해 생성 된 파서 크기, 향상된 CPU 캐시 히트를 감소시킨다.</target>
        </trans-unit>
        <trans-unit id="814155b159afb05e0e13696a70e7146843e9fa92" translate="yes" xml:space="preserve">
          <source>You may use &lt;strong&gt;Grako&lt;/strong&gt; under the terms of the &lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29&quot;&gt;BSD&lt;/a&gt;-style license described in the enclosed &lt;strong&gt;LICENSE.txt&lt;/strong&gt; file. &lt;em&gt;If your project requires different licensing&lt;/em&gt; please &lt;a href=&quot;mailto:apalala%40gmail.com&quot;&gt;email&lt;/a&gt;.</source>
          <target state="translated">동봉 된 &lt;strong&gt;LICENSE.txt&lt;/strong&gt; 파일에 설명 된 &lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29&quot;&gt;BSD&lt;/a&gt; 스타일 라이선스 조건에 따라 &lt;strong&gt;Grako&lt;/strong&gt; 를 사용할 수 있습니다 . &lt;em&gt;프로젝트에 다른 라이선스가 필요한 경우 &lt;/em&gt;&lt;a href=&quot;mailto:apalala%40gmail.com&quot;&gt;이메일을 보내&lt;/a&gt; 주십시오 .&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="509f2c59a959ba7aab427f88785cad273b2dedab" translate="yes" xml:space="preserve">
          <source>object that can be used to parse any given input, much like the &lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; module does with regular expressions.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.4/library/re.html&quot;&gt;re&lt;/a&gt; 모듈이 정규 표현식에서 하는 것처럼 주어진 입력을 구문 분석하는 데 사용할 수있는 객체입니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
