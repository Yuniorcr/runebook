<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/asynqueue/">
    <body>
      <group id="asynqueue">
        <trans-unit id="66179e04cd581cd55472563ee8587ce658020aeb" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing based on the &lt;em&gt;Twisted&lt;/em&gt; framework, with task
prioritization and a powerful worker interface. Worker implementations
are included for running tasks asynchronously in the main thread, in
separate threads, in separate Python interpreters (multiprocessing),
and even on separate devices using Twisted's Asynchronous Message
Protocol.</source>
          <target state="translated">작업 우선 순위 지정 및 강력한 작업자 인터페이스 를 사용하여 &lt;em&gt;Twisted&lt;/em&gt; 프레임 워크를 기반으로하는 비동기 작업 대기열 . 작업자 구현은 메인 스레드, 별도의 스레드, 별도의 Python 인터프리터 (다중 처리), 심지어 Twisted의 비동기 메시지 프로토콜을 사용하는 별도의 장치에서 비동기 적으로 작업을 실행하기 위해 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6128a235c0fd39685f6b5b99b7fadbfec5342418" translate="yes" xml:space="preserve">
          <source>Asynchronous task queueing with Twisted: threaded, multicore, and remote.</source>
          <target state="translated">Twisted를 사용한 비동기 작업 대기열 : 스레드, 멀티 코어 및 원격.</target>
        </trans-unit>
        <trans-unit id="959199c5e1b1d30e53adfe003d916868a2a40023" translate="yes" xml:space="preserve">
          <source>Includes an example package
&lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; that generates
Mandelbrot set images, row by row, demonstrating the power of
asynchronous multi-core processing. An instance of
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt;
dispatches the computations for each row of pixels to workers running
on separate Python processes. The color-mapped RGB results are
collected as they come back and intelligently buffered for iterating
in a proper sequence to a third-party PNG library that wouldn't
ordinarily play nice with Twisted.</source>
          <target state="translated">Mandelbrot 세트 이미지를 행별로 생성 하는 예제 패키지 &lt;a href=&quot;http://edsuom.com/mcMandelbrot.html&quot;&gt;mcMandelbrot&lt;/a&gt; 가 포함되어 비동기식 멀티 코어 처리의 성능을 보여줍니다. &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.process.ProcessQueue.html&quot;&gt;ProcessQueue&lt;/a&gt; 의 인스턴스는 각 픽셀 행에 대한 계산을 별도의 Python 프로세스에서 실행중인 작업자에게 전달합니다. 색상 매핑 된 RGB 결과는 돌아올 때 수집되고 일반적으로 Twisted에서 잘 재생되지 않는 타사 PNG 라이브러리에 적절한 순서로 반복하기 위해 지능적으로 버퍼링됩니다.</target>
        </trans-unit>
        <trans-unit id="85daa8d0fd14d30741e29b572dbfda1d090a6fc9" translate="yes" xml:space="preserve">
          <source>Includes deferred iteration capability: Calling a task that returns an
iterator can return a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt;
instead, which does the iteration in a Twisted-friendly fashion, even
over a network connection. You can also supply an object conforming to
Twisted's &lt;em&gt;IConsumer&lt;/em&gt; interface and iterations will be fed to it as they
become available.</source>
          <target state="translated">지연된 반복 기능 포함 : 반복기를 반환하는 작업을 호출하면 대신 &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.iteration.Deferator.html&quot;&gt;Deferator&lt;/a&gt; 를 반환 할 수 있으며 , 이는 네트워크 연결을 통해서도 Twisted 친화적 인 방식으로 반복을 수행합니다. 또한 Twisted의 &lt;em&gt;IConsumer&lt;/em&gt; 인터페이스를 준수하는 객체를 제공 할 수 있으며 사용 가능 &lt;em&gt;해지면&lt;/em&gt; 반복이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="169b63918b76adefc1f65fe3ec1bfb21b732f5ab" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;util&lt;/em&gt; module contains a
&lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker&lt;/a&gt;
object that makes the import worthwhile all on its own. You can use
its &lt;strong&gt;put&lt;/strong&gt; method to track Twisted &lt;em&gt;Deferred&lt;/em&gt; objects without inserting
anything into their callback chains. Then you can wait in non-blocking
Twisted fashion for all, any, or some of the tracked deferreds to fire
(again, without getting tangled up with any of their callbacks) using
the tracker's &lt;strong&gt;deferToAll&lt;/strong&gt;, &lt;strong&gt;deferToAny&lt;/strong&gt;, and &lt;strong&gt;deferUntilFewer&lt;/strong&gt;
methods.</source>
          <target state="translated">&lt;em&gt;UTIL의&lt;/em&gt; 모듈은 포함 &lt;a href=&quot;http://edsuom.com/AsynQueue/asynqueue.util.DeferredTracker.html&quot;&gt;DeferredTracker의&lt;/a&gt; 자체 수입 가치 모두를 만드는 개체를. &lt;strong&gt;put&lt;/strong&gt; 메서드를 사용하여 콜백 체인에 아무것도 삽입하지 않고도 Twisted &lt;em&gt;Deferred&lt;/em&gt; 객체 를 추적 할 수 있습니다 . 그런 다음 추적기의 &lt;strong&gt;deferToAll&lt;/strong&gt; , &lt;strong&gt;deferToAny&lt;/strong&gt; 및 &lt;strong&gt;deferUntilFewer&lt;/strong&gt; 메서드를 사용하여 추적 된 모든 지연 또는 일부 지연이 실행될 때까지 비 차단 Twisted 방식으로 기다릴 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eb7d5439f2d9250bf009f7a2be477526c15559f6" translate="yes" xml:space="preserve">
          <source>There was some effort toward Python 3 compatiblity a while ago, but
it's still not yet supported.</source>
          <target state="translated">얼마 전에 Python 3 호환성에 대한 노력이 있었지만 아직 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f5ed9620d68c79dd8003b36b7a5bc59d3c01f81" translate="yes" xml:space="preserve">
          <source>You can try things out after installation by running &lt;code&gt;mcmandelbrot&lt;/code&gt;
(with a few options and arguments) from the console. The output of the
script is a PNG file, which you can view by piping to the free Feh
image viewer: Just add &lt;code&gt;|feh -&lt;/code&gt; at the end of the command line.</source>
          <target state="translated">콘솔에서 &lt;code&gt;mcmandelbrot&lt;/code&gt; (몇 가지 옵션과 인수 포함)를 실행하여 설치 후 시도해 볼 수 있습니다 . 스크립트의 출력은 PNG 파일이며 무료 Feh 이미지 뷰어에 파이핑하여 볼 수 있습니다 . 명령 줄 끝에 &lt;code&gt;|feh -&lt;/code&gt; 추가 하면됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
