<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/clyngor/">
    <body>
      <group id="clyngor">
        <trans-unit id="1592e063d7a969a69bf13c246c5059857832850d" translate="yes" xml:space="preserve">
          <source>&amp;hellip; the defined function &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; is now embedded in clyngor API</source>
          <target state="translated">&amp;hellip; 정의 된 함수 &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; 가 이제 clyngor API에 포함되었습니다.</target>
        </trans-unit>
        <trans-unit id="289088a8310c7a311823999259054510a07dd5d3" translate="yes" xml:space="preserve">
          <source>0.4.0 (todo)</source>
          <target state="translated">0.4.0 (할 일)</target>
        </trans-unit>
        <trans-unit id="748fae240ad995290d568f3bf4041a8f160dc31d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;examples/enum-optN.py&quot;&gt;new example&lt;/a&gt; showing how to retrieve all optimal models using clyngor, and&amp;hellip;</source>
          <target state="translated">&lt;a href=&quot;examples/enum-optN.py&quot;&gt;&lt;/a&gt;clyngor를 사용하여 모든 최적의 모델을 검색하는 방법을 보여주는 새로운 예</target>
        </trans-unit>
        <trans-unit id="c5e09701c4d09ee936abe9dbdc533a1b5798cd37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;examples/pyconstraint-is-not-working.lp&quot;&gt;demonstration&lt;/a&gt; of the non-working Constraint type implementation</source>
          <target state="translated">&lt;a href=&quot;examples/pyconstraint-is-not-working.lp&quot;&gt;&lt;/a&gt;작동하지 않는 Constraint 유형 구현 데모</target>
        </trans-unit>
        <trans-unit id="fe241816de9724cd4877ee36cb2f370be394a869" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/1840c36e3f57c926a565fef7352cd1b083194e58&quot;&gt;1840c36e3&lt;/a&gt;: fix the &lt;code&gt;models.command&lt;/code&gt; output when clingo module is used</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/1840c36e3f57c926a565fef7352cd1b083194e58&quot;&gt;1840c36e3&lt;/a&gt; : clingo 모듈 &lt;code&gt;models.command&lt;/code&gt; 출력 수정</target>
        </trans-unit>
        <trans-unit id="fbdb8b2277eb0c5b48ea302639bcf2674f75704a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/2679d26a91720ab507fb7c2ffc41c064e8ca9cb9&quot;&gt;2679d26a9&lt;/a&gt;: optimize memory usage of &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; by using yield and answer number, but is now a generator and loses (the useless) &lt;code&gt;repeated_optimal&lt;/code&gt; option</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/2679d26a91720ab507fb7c2ffc41c064e8ca9cb9&quot;&gt;2679d26a9&lt;/a&gt; :의 최적화 메모리 사용량 &lt;code&gt;opt_models_from_clyngor_answers&lt;/code&gt; 수율과 대답 번호를 사용하여,하지만 지금 발생하고 (쓸모없는) 손실 &lt;code&gt;repeated_optimal&lt;/code&gt; 의 옵션을</target>
        </trans-unit>
        <trans-unit id="a2ff869151cf3d38e7dc67b9dc83071246b34534" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/31375774c437403e8a05f5fe8d0346caba0f43e4&quot;&gt;31375774c&lt;/a&gt;: when using clingo module, the models contains only the output atoms, not everything (thank you Arnaud)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/31375774c437403e8a05f5fe8d0346caba0f43e4&quot;&gt;31375774c&lt;/a&gt; : clingo 모듈을 사용할 때 모델에는 모든 것이 아닌 출력 원자 만 포함됩니다 (Arnaud에게 감사드립니다)</target>
        </trans-unit>
        <trans-unit id="3d085383a6db5d4e86d8833638737bb398cc5f16" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/6efdb6ab0f0304b28b35d6ceb16545226b2f9e3e&quot;&gt;6efdb6ab0&lt;/a&gt;: fix combination of .as_pyasp and .parse_args, where atoms in args were not transformed as pyasp Atom objects.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/6efdb6ab0f0304b28b35d6ceb16545226b2f9e3e&quot;&gt;6efdb6ab0&lt;/a&gt; : .as_pyasp 및 .parse_args의 조합을 수정합니다. 여기서 args의 원자가 pyasp Atom 개체로 변환되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="216431aa8133aa273e2f437f35ecca8f2915e9ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/706747045cb96abcb9de1e2d729cd43c084cb36f&quot;&gt;706747045&lt;/a&gt;: handle default negation on atoms, by keeping the prefixed dash</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/706747045cb96abcb9de1e2d729cd43c084cb36f&quot;&gt;706747045&lt;/a&gt; : 접두사가 붙은 대시를 유지하여 원자에 대한 기본 부정 처리</target>
        </trans-unit>
        <trans-unit id="8735300782ab59c724dbce187778e0bbf4e68927" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/80245b2a72b8d76639b44a2315622f6743a7bc17&quot;&gt;80245b2a7&lt;/a&gt;: remove f-strings for 3.4 and 3.5 compat.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/80245b2a72b8d76639b44a2315622f6743a7bc17&quot;&gt;80245b2a7&lt;/a&gt; : 3.4 및 3.5 호환에 대한 f- 문자열을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="e2cfb60636eb95a119324af27f91a566473e7f57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/c0c090c34a7028ba34c49815f0197c67c76e7bfb&quot;&gt;c0c090c34&lt;/a&gt;: parsing and string reproduction of nested atoms such as &lt;code&gt;a((a(&quot;g(2,3)&quot;,(2)),))&lt;/code&gt; is now correctly handled and tested</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/c0c090c34a7028ba34c49815f0197c67c76e7bfb&quot;&gt;c0c090c34&lt;/a&gt; : &lt;code&gt;a((a(&quot;g(2,3)&quot;,(2)),))&lt;/code&gt; 와 같은 중첩 된 원자의 구문 분석 및 문자열 재생 이 이제 올바르게 처리되고 테스트됩니다.</target>
        </trans-unit>
        <trans-unit id="4a47e8c29df9ee44e14879e06a5b81060ee532e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/cc60217975de123a5ef0d083fb10971e0d89c03e&quot;&gt;cc6021797&lt;/a&gt;: support for &lt;code&gt;.with_answer_number&lt;/code&gt;, giving model, optimization, optimality and answer number</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/cc60217975de123a5ef0d083fb10971e0d89c03e&quot;&gt;cc6021797&lt;/a&gt; : 지원 &lt;code&gt;.with_answer_number&lt;/code&gt; , 모델, 최적화, 최적 및 응답 수를 나타내는</target>
        </trans-unit>
        <trans-unit id="fbea8a4c8230a211ca0f77b1f33696e0cdd36e71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d4830ad521a6dcf9024f2c70f2f50e6b19f8c7a2&quot;&gt;d4830ad52&lt;/a&gt;: fix an import error</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d4830ad521a6dcf9024f2c70f2f50e6b19f8c7a2&quot;&gt;d4830ad52&lt;/a&gt; : 가져 오기 오류 수정</target>
        </trans-unit>
        <trans-unit id="67b5f3577dd616d233291f1f48946b7d0fab18d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d6507f17dbf27c6c309e3e4009a234b9d63134ba&quot;&gt;d6507f17d&lt;/a&gt;: careful parsing is automatically set when answer set &lt;a href=&quot;clyngor/parsing.py#L266&quot;&gt;obviously needs it&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/d6507f17dbf27c6c309e3e4009a234b9d63134ba&quot;&gt;d6507f17d&lt;/a&gt; : 응답 세트가 &lt;a href=&quot;clyngor/parsing.py#L266&quot;&gt;분명히 필요할&lt;/a&gt; 때 신중한 구문 분석이 자동으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="418811871ec4bfb4153b8807089398877089a784" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f2c65e8ae018b9d3589a058a09f9de87e1f3fdf3&quot;&gt;f2c65e8ae&lt;/a&gt;: fixed bug when using clingo module and &lt;code&gt;.int_not_parsed&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f2c65e8ae018b9d3589a058a09f9de87e1f3fdf3&quot;&gt;f2c65e8ae&lt;/a&gt; : clingo 모듈 및 &lt;code&gt;.int_not_parsed&lt;/code&gt; 사용시 버그 수정 .</target>
        </trans-unit>
        <trans-unit id="7584be4708f1cf0cd2b6c3be54caa057542275f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f92248e91def2c979fd2f8f8af3755b86485becf&quot;&gt;f92248e91&lt;/a&gt;: &lt;code&gt;#show 3.&lt;/code&gt; and &lt;code&gt;#show &quot;hello !&quot;.&lt;/code&gt; are now handled</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/f92248e91def2c979fd2f8f8af3755b86485becf&quot;&gt;f92248e91&lt;/a&gt; : &lt;code&gt;#show 3.&lt;/code&gt; 및 &lt;code&gt;#show &quot;hello !&quot;.&lt;/code&gt; 이제 처리됩니다</target>
        </trans-unit>
        <trans-unit id="d1f8c8694b382068b19e49f8976ade310b5a9d00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/fe410757386e2c3e0881ecc90d7f18ee97672194&quot;&gt;fe4107573&lt;/a&gt;: correctly parse atoms starting with underscores.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/aluriak/clyngor/commit/fe410757386e2c3e0881ecc90d7f18ee97672194&quot;&gt;fe4107573&lt;/a&gt; : 밑줄로 시작하는 원자를 올바르게 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="28c9a1c6507374fd246d796daaae2179d1567f83" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://stackoverflow.com/a/12698328/3077939&quot;&gt;timeout&lt;/a&gt; in addition to time-limit</source>
          <target state="translated">&lt;a href=&quot;https://stackoverflow.com/a/12698328/3077939&quot;&gt;시간 제한&lt;/a&gt; 외에 시간 초과</target>
        </trans-unit>
        <trans-unit id="b4feaf9d53dcb74337c186e0f288807287b5e41c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TermSet.add&lt;/code&gt; to add atoms to the TermSet</source>
          <target state="translated">&lt;code&gt;TermSet.add&lt;/code&gt; 를 사용하여 TermSet에 원자 추가</target>
        </trans-unit>
        <trans-unit id="62bfa8f662403c006406747a2b3b8fc173fc6776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TermSet.union&lt;/code&gt; to generate the union of multiple TermSet instances</source>
          <target state="translated">&lt;code&gt;TermSet.union&lt;/code&gt; 을 사용하여 여러 TermSet 인스턴스의 공용체 생성</target>
        </trans-unit>
        <trans-unit id="9c720f1b6e9baf95add567fc0d1ccc03457a38e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clyngor.solve&lt;/code&gt; parameters</source>
          <target state="translated">&lt;code&gt;clyngor.solve&lt;/code&gt; 매개 변수</target>
        </trans-unit>
        <trans-unit id="9f574e25e0d82507b7348d378c0dcfa84398a95d" translate="yes" xml:space="preserve">
          <source>ASP source code debugging generator (started in &lt;a href=&quot;clyngor-parser&quot;&gt;clyngor-parser&lt;/a&gt;)</source>
          <target state="translated">ASP 소스 코드 디버깅 생성기 ( &lt;a href=&quot;clyngor-parser&quot;&gt;clyngor-parser&lt;/a&gt; 에서 시작됨 )</target>
        </trans-unit>
        <trans-unit id="3a4be7155bcffba0850c80a370bc5c6b34c37e74" translate="yes" xml:space="preserve">
          <source>Alternatives</source>
          <target state="translated">대안</target>
        </trans-unit>
        <trans-unit id="4fcbdcf9a8478b08289d57eb5d6b942842b7b22b" translate="yes" xml:space="preserve">
          <source>An idea coming from the &lt;a href=&quot;https://docs.python.org/3/library/json.html#encoders-and-decoders&quot;&gt;JSON decoders&lt;/a&gt;, allowing user to specify how to decode/encode custom objects in JSON.
With clyngor, you can do something alike for ASP (though very basic and only from ASP to Python):</source>
          <target state="translated">사용자가 JSON에서 사용자 지정 개체를 디코딩 / 인코딩하는 방법을 지정할 수 있도록 하는 &lt;a href=&quot;https://docs.python.org/3/library/json.html#encoders-and-decoders&quot;&gt;JSON 디코더&lt;/a&gt; 에서 나온 아이디어 입니다. clyngor를 사용하면 ASP에 대해 비슷한 작업을 수행 할 수 있습니다 (매우 기본적이고 ASP에서 Python으로 만).</target>
        </trans-unit>
        <trans-unit id="39318c9c45e4312f4bc273fd17a3b8133344d509" translate="yes" xml:space="preserve">
          <source>And here is the version using clyngor, that pass the exact same unit tests:</source>
          <target state="translated">다음은 정확히 동일한 단위 테스트를 통과하는 clyngor를 사용하는 버전입니다.</target>
        </trans-unit>
        <trans-unit id="9b42ee824e78746675f554a97728266dd30209ca" translate="yes" xml:space="preserve">
          <source>And if you need a &lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;&lt;em&gt;pyasp-like&lt;/em&gt;&lt;/a&gt; interface:</source>
          <target state="translated">그리고 &lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;&lt;em&gt;pyasp와 같은&lt;/em&gt;&lt;/a&gt; 인터페이스 가 필요한 경우 :</target>
        </trans-unit>
        <trans-unit id="425d5f0303995ef8ca802609882eeda6a699ad57" translate="yes" xml:space="preserve">
          <source>As shown in &lt;a href=&quot;clyngor/test/test_propagator_class.py&quot;&gt;clyngor/test/test_propagator_class.py&lt;/a&gt;,
a high-level propagator class built on top of the official API is available, useful in many typical use-cases.</source>
          <target state="translated">&lt;a href=&quot;clyngor/test/test_propagator_class.py&quot;&gt;clyngor / test / test_propagator_class.py&lt;/a&gt; 에서 볼 수 있듯이 공식 API 위에 구축 된 고수준 전파자 클래스를 사용할 수 있으며 많은 일반적인 사용 사례에서 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4833540de79fafa02d7530187e20aeb32307b9ca" translate="yes" xml:space="preserve">
          <source>As shown in &lt;a href=&quot;examples/pyconstraint.lp&quot;&gt;examples/pyconstraint.lp&lt;/a&gt;,
clyngor also exposes some helpers for users wanting to create propagators
that implement an ASP constraint, but written in Python:</source>
          <target state="translated">에 나타낸 바와 같이 &lt;a href=&quot;examples/pyconstraint.lp&quot;&gt;예 / pyconstraint.lp&lt;/a&gt; , clyngor 또한 ASP 제약 조건을 구현 propagators를 생성하고자하는 사용자를위한 몇 가지 헬퍼를 노출하지만, 파이썬으로 작성된 :</target>
        </trans-unit>
        <trans-unit id="88eb26c9d492472c4d7371c1ce83de486035d05b" translate="yes" xml:space="preserve">
          <source>By default, clyngor uses a very simple parser (yeah, &lt;code&gt;str.split&lt;/code&gt;) in order to achieve time efficiency in most time.
However, when asked to compute a particular output format (like &lt;code&gt;parse_args&lt;/code&gt;) or an explicitely &lt;em&gt;careful parsing&lt;/em&gt;,
clyngor will use a much more robust parser (made with an &lt;a href=&quot;http://www.igordejanovic.net/Arpeggio/&quot;&gt;arpeggio&lt;/a&gt; grammar).</source>
          <target state="translated">기본적으로 clyngor는 대부분의 시간에서 시간 효율성을 달성하기 위해 매우 간단한 파서 (예, &lt;code&gt;str.split&lt;/code&gt; )를 사용합니다. 그러나 특정 출력 형식 (예 : &lt;code&gt;parse_args&lt;/code&gt; ) 또는 명시 적으로 &lt;em&gt;신중한 구문 분석&lt;/em&gt; 을 요청하면 clyngor는 훨씬 더 강력한 구문 분석기 ( &lt;a href=&quot;http://www.igordejanovic.net/Arpeggio/&quot;&gt;아르페지오&lt;/a&gt; 문법으로 만든 )를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="cadc6cbf45c88b7cffb05b9803dec13ffa85d606" translate="yes" xml:space="preserve">
          <source>Careful parsing</source>
          <target state="translated">신중한 파싱</target>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes" xml:space="preserve">
          <source>Chaining</source>
          <target state="translated">체인</target>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">변경 로그</target>
        </trans-unit>
        <trans-unit id="3e4273d28c600900b37562519469391dba4bc368" translate="yes" xml:space="preserve">
          <source>Clyngor is basically the total rewriting of &lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;pyasp&lt;/a&gt;, which is now abandoned.</source>
          <target state="translated">Clyngor는 기본적으로 총 재 작성입니다 &lt;a href=&quot;https://github.com/sthiele/pyasp&quot;&gt;pyasp&lt;/a&gt; 지금 포기.</target>
        </trans-unit>
        <trans-unit id="b1372ffdee32e8b4c3ea51f44289f05a3ed35ad9" translate="yes" xml:space="preserve">
          <source>Clyngor offers multiple interfaces. The followings are all equivalent.
(they search for &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_concept_analysis&quot;&gt;formal concepts&lt;/a&gt;)</source>
          <target state="translated">Clyngor는 여러 인터페이스를 제공합니다. 다음은 모두 동일합니다. (그들은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Formal_concept_analysis&quot;&gt;형식적인 개념&lt;/a&gt; 을 검색합니다 )</target>
        </trans-unit>
        <trans-unit id="0e5ffbd42728ebc42657b008a7a9ee969574de65" translate="yes" xml:space="preserve">
          <source>Clyngor provides &lt;code&gt;converted_types&lt;/code&gt; function,
allowing one to avoid boilerplate code based on type annotation when
calling python from inside ASP code.</source>
          <target state="translated">Clyngor가 제공 &lt;code&gt;converted_types&lt;/code&gt; 은 ASP 코드 내부에서 파이썬을 호출 할 때 유형 약어에 따라 상용구 코드를 방지하기 위해 일을 가능하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="11c20fc2d9fe5dc279351084100911de9ff3e48d" translate="yes" xml:space="preserve">
          <source>Clyngor was designed to not require the official module, because it required a manual compilation and installation of clingo.
However, because of the obvious interest in features and performances,
the official module can be used by clyngor if it is available.</source>
          <target state="translated">Clyngor는 clingo의 수동 컴파일 및 설치가 필요했기 때문에 공식 모듈이 필요하지 않도록 설계되었습니다. 그러나 기능과 성능에 대한 명백한 관심으로 인해 공식 모듈이 가능한 경우 clyngor에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e30721c5da491b591816c7c1a33db266ac84cf31" translate="yes" xml:space="preserve">
          <source>Contributions ?</source>
          <target state="translated">기여?</target>
        </trans-unit>
        <trans-unit id="7394abcfe600aa1b5dde2f955faf174b007eaeeb" translate="yes" xml:space="preserve">
          <source>Currently, there is only one way to see all chaining operator available:
&lt;a href=&quot;clyngor/answers.py&quot;&gt;the source code of the Answers object&lt;/a&gt;.
(or &lt;code&gt;help(clyngor.Answers)&lt;/code&gt;)</source>
          <target state="translated">현재 사용 가능한 모든 연결 연산자를 볼 수있는 유일한 방법 &lt;a href=&quot;clyngor/answers.py&quot;&gt;은 Answers 객체의 소스 코드입니다&lt;/a&gt; . (또는 &lt;code&gt;help(clyngor.Answers)&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="fb1bc08c65b4ee4f49711d2388ffb579ffc57f23" translate="yes" xml:space="preserve">
          <source>Decoders</source>
          <target state="translated">디코더</target>
        </trans-unit>
        <trans-unit id="3599698f598bd7dfd42cac8553684cba07ec80c3" translate="yes" xml:space="preserve">
          <source>Define the path to clingo binary</source>
          <target state="translated">clingo 바이너리에 대한 경로 정의</target>
        </trans-unit>
        <trans-unit id="fb2194038e671fd85a964cbd0545f8e6e6c2501a" translate="yes" xml:space="preserve">
          <source>Dinopython support ?</source>
          <target state="translated">Dinopython 지원?</target>
        </trans-unit>
        <trans-unit id="eadc2a9f8f64e3ccf735df2b23eb50d6728aa148" translate="yes" xml:space="preserve">
          <source>Easy ASP functors</source>
          <target state="translated">쉬운 ASP 펑터</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">예</target>
        </trans-unit>
        <trans-unit id="384e8626622a3ab84503c5921aadb430784953e2" translate="yes" xml:space="preserve">
          <source>Example (see &lt;a href=&quot;clyngor/test/test_upapi.py&quot;&gt;tests&lt;/a&gt; for more):</source>
          <target state="translated">예 (자세한 내용은 &lt;a href=&quot;clyngor/test/test_upapi.py&quot;&gt;테스트&lt;/a&gt; 참조) :</target>
        </trans-unit>
        <trans-unit id="6b78565c61110062f9f5cca6b1a3123a27c6b732" translate="yes" xml:space="preserve">
          <source>Explain me again the thing with the official module</source>
          <target state="translated">공식 모듈에 대해 다시 설명해주세요.</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">자주하는 질문</target>
        </trans-unit>
        <trans-unit id="37f54a04d50c399d93f8533021feb3b7d1edb01b" translate="yes" xml:space="preserve">
          <source>For an ORM approach, give a try to &lt;a href=&quot;https://github.com/daveraja/clorm&quot;&gt;clorm&lt;/a&gt;.</source>
          <target state="translated">ORM 접근법의 경우 &lt;a href=&quot;https://github.com/daveraja/clorm&quot;&gt;clorm을&lt;/a&gt; 시도 하십시오 .</target>
        </trans-unit>
        <trans-unit id="04e047f9c06520d43841b8b7f97a2e025c955000" translate="yes" xml:space="preserve">
          <source>For users putting some python in their ASP, clyngor may help.
The only condition is to have clingo compiled with python support,
and having clyngor installed for the python used by clingo.</source>
          <target state="translated">ASP에 파이썬을 넣는 사용자의 경우 clyngor가 도움이 될 수 있습니다. 유일한 조건은 clingo를 파이썬 지원으로 컴파일하고 clingo가 사용하는 파이썬에 대해 clyngor를 설치하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f44e67b0bbe4e60b04fb799536784193d84a3364" translate="yes" xml:space="preserve">
          <source>Further ideas</source>
          <target state="translated">추가 아이디어</target>
        </trans-unit>
        <trans-unit id="a3b916a7e6888d6abb65ac4b82ddc47a2596b54d" translate="yes" xml:space="preserve">
          <source>Generalist propagators</source>
          <target state="translated">제너럴리스트 전파자</target>
        </trans-unit>
        <trans-unit id="a6a175864c431b0bd85d7be273e53369ab81c235" translate="yes" xml:space="preserve">
          <source>Handy python wrapper around &lt;a href=&quot;https://potassco.org/&quot;&gt;Potassco's Clingo&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Answer%20set%20programming&quot;&gt;ASP solver&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://potassco.org/&quot;&gt;Potassco의 Clingo &lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Answer%20set%20programming&quot;&gt;ASP 솔버를&lt;/a&gt; 둘러싼 편리한 파이썬 래퍼 .</target>
        </trans-unit>
        <trans-unit id="1a37a994eea7921d38ca2dcf7de94090bb16c18c" translate="yes" xml:space="preserve">
          <source>Here was my old code:</source>
          <target state="translated">내 이전 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0d929b7953e8bd4aea268a29e9d9f03d0e356ca1" translate="yes" xml:space="preserve">
          <source>If the used version of clingo is compiled with python, you can put python code into your ASP code as usual.
But if you also have the &lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;clingo package&lt;/a&gt;
installed and importable, clyngor can use it for various tasks.</source>
          <target state="translated">사용 된 clingo 버전이 Python으로 컴파일 된 경우 평소와 같이 Python 코드를 ASP 코드에 넣을 수 있습니다. 그러나 &lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;clingo 패키지가&lt;/a&gt; 설치되어 있고 가져올 수있는 경우 clyngor는 다양한 작업에이를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2746b678411f54f0fe919b1702df84e43c3daaf7" translate="yes" xml:space="preserve">
          <source>If you have a project that makes use of pyasp, but need clingo instead of gringo+clasp, one way to go is to use clyngor instead.</source>
          <target state="translated">pyasp를 사용하는 프로젝트가 있지만 gringo + clasp 대신 clingo가 필요한 경우 한 가지 방법은 대신 clyngor를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fd26af85fd58ff3935044e4f589476f32dcc3c34" translate="yes" xml:space="preserve">
          <source>Import/export</source>
          <target state="translated">수입 수출</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="4390541efd33287202bbbb990e914d484036c9ca" translate="yes" xml:space="preserve">
          <source>More examples are available in &lt;a href=&quot;clyngor/test/&quot;&gt;the unit tests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;clyngor/test/&quot;&gt;단위 테스트&lt;/a&gt; 에서 더 많은 예제를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2180e05b1bd9de4dbd27384d20dddec937ab55a2" translate="yes" xml:space="preserve">
          <source>More traditional interface, using file containing the ASP source code:</source>
          <target state="translated">ASP 소스 코드가 포함 된 파일을 사용하는보다 전통적인 인터페이스 :</target>
        </trans-unit>
        <trans-unit id="e184c7cd489465182b2046eec31efebb8fec3e03" translate="yes" xml:space="preserve">
          <source>No, it's pronounced &lt;a href=&quot;https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s&quot;&gt;&lt;em&gt;clyngor&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">아니요, &lt;a href=&quot;https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s&quot;&gt;&lt;em&gt;clyngor&lt;/em&gt;&lt;/a&gt; 로 발음 &lt;em&gt;됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b8b9f1367ad6269845f5ec54d66262066092883f" translate="yes" xml:space="preserve">
          <source>No.</source>
          <target state="translated">아니.</target>
        </trans-unit>
        <trans-unit id="463e089b0dc00d6a1104b0dcaaf482a84ee07e05" translate="yes" xml:space="preserve">
          <source>Note that it will be the very first parameter to &lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt;&lt;/a&gt;.
The &lt;code&gt;solve&lt;/code&gt; function also support the &lt;code&gt;clingo_bin_path&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/subprocess.html#popen-constructor&quot;&gt; &lt;code&gt;subprocess.Popen&lt;/code&gt; 의&lt;/a&gt; 첫 번째 매개 변수가됩니다 . 는 &lt;code&gt;solve&lt;/code&gt; 기능도 지원 &lt;code&gt;clingo_bin_path&lt;/code&gt; 의 파라미터.</target>
        </trans-unit>
        <trans-unit id="cca4e4edc4e230602d82bbcc56bd550993cf86f8" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;https://github.com/potassco/clingo/issues/147&quot;&gt;incoming clingo version&lt;/a&gt;
is leading to that flexibility regarding returned values.</source>
          <target state="translated">점을 유의 &lt;a href=&quot;https://github.com/potassco/clingo/issues/147&quot;&gt;들어오는 clingo 버전이&lt;/a&gt; 반환 된 값에 대한 그 유연성을 선도하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9a98bf23ef06499413d0b04079436ea24bcf9b8" translate="yes" xml:space="preserve">
          <source>Note the use of annotations to declare that each &lt;code&gt;concept&lt;/code&gt; must be associated to one instance,
and that all &lt;code&gt;extent&lt;/code&gt; and &lt;code&gt;intent&lt;/code&gt; must be sent to constructor for each object.</source>
          <target state="translated">주석을 사용하여 각 &lt;code&gt;concept&lt;/code&gt; 이 하나의 인스턴스에 연결되어야하며 모든 &lt;code&gt;extent&lt;/code&gt; 와 &lt;code&gt;intent&lt;/code&gt; 가 각 개체의 생성자에 전송되어야 함 을 선언 합니다.</target>
        </trans-unit>
        <trans-unit id="eb85013aa265395b046991fc7ca120dcb8e2f12f" translate="yes" xml:space="preserve">
          <source>Official Python API</source>
          <target state="translated">공식 Python API</target>
        </trans-unit>
        <trans-unit id="a5de6231aa35bf318b624de9266e03bad7635ed9" translate="yes" xml:space="preserve">
          <source>Once you get your answers, clyngor allows you to specify
the answer sets format using builtin methods:</source>
          <target state="translated">답변을 받으면 clyngor는 내장 방법을 사용하여 답변 세트 형식을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73e90f1b2f4fa18e7665465d396e1166726f10c5" translate="yes" xml:space="preserve">
          <source>Propagators are presented in &lt;a href=&quot;http://drops.dagstuhl.de/opus/volltexte/2016/6733/&quot;&gt;this paper&lt;/a&gt;. They are basically active
observers of the solving process, able for instance to modify truth assignment
and invalidate models.</source>
          <target state="translated">&lt;a href=&quot;http://drops.dagstuhl.de/opus/volltexte/2016/6733/&quot;&gt;이 백서&lt;/a&gt; 에서는 전파자에 대해 설명합니다 . 그들은 기본적으로 해결 과정의 적극적인 관찰자이며, 예를 들어 진리 할당을 수정하고 모델을 무효화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9333da961302a0a9c813edfac641a495bef0c905" translate="yes" xml:space="preserve">
          <source>Python constraint propagators</source>
          <target state="translated">파이썬 제약 전파자</target>
        </trans-unit>
        <trans-unit id="26d1c78e45436cb82650f09d425d708d8c33b307" translate="yes" xml:space="preserve">
          <source>Python embedding</source>
          <target state="translated">Python 임베딩</target>
        </trans-unit>
        <trans-unit id="e0ee96d2d4d44ec44d0febf699f59d9975cb18b7" translate="yes" xml:space="preserve">
          <source>Python wrapper around Clingo/Answer Set Programming</source>
          <target state="translated">Clingo / Answer Set 프로그래밍을 둘러싼 Python 래퍼</target>
        </trans-unit>
        <trans-unit id="245fe981538e3689226b72d304416a397deac758" translate="yes" xml:space="preserve">
          <source>Remaining features for a good decoder support:</source>
          <target state="translated">좋은 디코더 지원을위한 나머지 기능 :</target>
        </trans-unit>
        <trans-unit id="7bcdee2adeac9770dc4a0eae94768a8628f42f90" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;clyngor/test/test_decoder.py&quot;&gt;tests&lt;/a&gt; for complete API example.</source>
          <target state="translated">완전한 API 예제는 &lt;a href=&quot;clyngor/test/test_decoder.py&quot;&gt;테스트&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="484955075e924a719a4cc5c53d00c4a145811494" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;clyngor/utils.py&quot;&gt;&lt;code&gt;utils&lt;/code&gt; module&lt;/a&gt; and its &lt;a href=&quot;clyngor/test/test_utils.py&quot;&gt;tests&lt;/a&gt;,
which provides high level routines to save and load answer sets.</source>
          <target state="translated">응답 세트를 저장하고로드하는 높은 수준의 루틴을 제공 하는 &lt;a href=&quot;clyngor/utils.py&quot;&gt; &lt;code&gt;utils&lt;/code&gt; 모듈&lt;/a&gt; 및 &lt;a href=&quot;clyngor/test/test_utils.py&quot;&gt;테스트를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3bce3ed8bdd36d76601cf959a5cc94b200bf5d45" translate="yes" xml:space="preserve">
          <source>TermSet bugfix</source>
          <target state="translated">TermSet 버그 수정</target>
        </trans-unit>
        <trans-unit id="97cba4858411c435e526dd651157aac20178222c" translate="yes" xml:space="preserve">
          <source>Thanks</source>
          <target state="translated">감사</target>
        </trans-unit>
        <trans-unit id="304fd404f301c9ccf649621b6f76c52a39c00344" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;solve&lt;/code&gt; functions allow to pass explicitely some parameters to clingo
(including number of models to yield, time-limit, and constants).
Using the &lt;code&gt;options&lt;/code&gt; parameter is just fine, but with the explicit parameters some verifications
are made against data (mostly about type).</source>
          <target state="translated">는 &lt;code&gt;solve&lt;/code&gt; 기능 (수득 모델 번호, 시간 제한 및 상수 포함) clingo하는 어떤 명시 적 매개 변수를 전달하도록 허용한다. &lt;code&gt;options&lt;/code&gt; 매개 변수를 사용하는 것은 괜찮지 만 명시 적 매개 변수를 사용하면 데이터 (대부분 유형에 대한)에 대해 일부 검증이 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="705e3984b662041956b6da23e869f275ebee6d6d" translate="yes" xml:space="preserve">
          <source>The same, but with the lower level function expecting files:</source>
          <target state="translated">동일하지만 파일을 기대하는 하위 레벨 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fec812de66c1c5e75fb70bb3caeeaeb539ae1baf" translate="yes" xml:space="preserve">
          <source>The third solution is to use the decorator &lt;code&gt;with_clingo_bin&lt;/code&gt;, which modify the global variable
during the execution of a specific function:</source>
          <target state="translated">세 번째 해결책은 특정 함수를 실행하는 동안 전역 변수를 수정하는 데코레이터 &lt;code&gt;with_clingo_bin&lt;/code&gt; 을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1419a8eb36687ad0752d86cf04b0ef1070e6b504" translate="yes" xml:space="preserve">
          <source>Therefore, the two followings are equivalent ; but the first is more readable and will crash earlier with a better error message if &lt;code&gt;n&lt;/code&gt; is not valid:</source>
          <target state="translated">따라서 다음 두 가지는 동일합니다. 그러나 첫 번째는 더 읽기 쉽고 &lt;code&gt;n&lt;/code&gt; 이 유효하지 않으면 더 나은 오류 메시지와 함께 더 일찍 충돌 합니다.</target>
        </trans-unit>
        <trans-unit id="9c3073b3c4e9e8b375dcab87133132ec275fb17c" translate="yes" xml:space="preserve">
          <source>This code will print something like:</source>
          <target state="translated">이 코드는 다음과 같이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="4cf1b54b003a59c279d1ba0b615a8a5f3459ca8c" translate="yes" xml:space="preserve">
          <source>Tips</source>
          <target state="translated">팁</target>
        </trans-unit>
        <trans-unit id="1ceaf78d462be91214480c73367875ef197097e9" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;https://github.com/ArnaudBelcour&quot;&gt;Arnaud Belcour&lt;/a&gt; for his works and frequent feedbacks.</source>
          <target state="translated">으로 &lt;a href=&quot;https://github.com/ArnaudBelcour&quot;&gt;아르노 Belcour&lt;/a&gt; 자신의 작품과 자주 의견합니다.</target>
        </trans-unit>
        <trans-unit id="c674a828ebc455b3a8b48d6c99c3b82f80e795b4" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;https://github.com/domoritz&quot;&gt;Domoritz&lt;/a&gt; for his questions and feedbacks.</source>
          <target state="translated">에 &lt;a href=&quot;https://github.com/domoritz&quot;&gt;Domoritz&lt;/a&gt; 자신의 질문과 피드백을위한.</target>
        </trans-unit>
        <trans-unit id="d7649b3c98b8ecf194e261d05438370f5beedd8a" translate="yes" xml:space="preserve">
          <source>Using the official API leads to the following changes :</source>
          <target state="translated">공식 API를 사용하면 다음과 같이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="b43dd45d8ee7f5ad3504aef61a730a13e90b6c41" translate="yes" xml:space="preserve">
          <source>What is clyngor used for ?</source>
          <target state="translated">clyngor는 무엇을 위해 사용됩니까?</target>
        </trans-unit>
        <trans-unit id="f4f3d7881e9be1d333c9aed0f668fbf2b72ae0eb" translate="yes" xml:space="preserve">
          <source>Why clyngor ?</source>
          <target state="translated">왜 클링 거?</target>
        </trans-unit>
        <trans-unit id="13525d313aa0f7ec3c7862f65a1ba61efee9eafd" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;converted_types&lt;/code&gt;, user have to ensure that &lt;code&gt;f&lt;/code&gt; is a function returning a list,
and that arguments are of the expected type.</source>
          <target state="translated">없이 &lt;code&gt;converted_types&lt;/code&gt; , 사용자는 해당 확인해야 &lt;code&gt;f&lt;/code&gt; 는 목록을 반환하는 기능이며, 그 인수는 예상 유형입니다.</target>
        </trans-unit>
        <trans-unit id="c53c562dab4b33b3e42f3bc4d8e5719439a9c155" translate="yes" xml:space="preserve">
          <source>Yes.</source>
          <target state="translated">예.</target>
        </trans-unit>
        <trans-unit id="f9b3a47d05b251231cb4c9640b95102336c35e4c" translate="yes" xml:space="preserve">
          <source>You can activate the use of the clingo module by calling once &lt;code&gt;clyngor.activate_clingo_module()&lt;/code&gt;
or calling &lt;code&gt;clyngor.solve&lt;/code&gt; with argument &lt;code&gt;use_clingo_module&lt;/code&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">당신은 한 번 호출하여 clingo 모듈의 사용을 활성화 할 수 있습니다 &lt;code&gt;clyngor.activate_clingo_module()&lt;/code&gt; 또는 전화 &lt;code&gt;clyngor.solve&lt;/code&gt; 인수와 &lt;code&gt;use_clingo_module&lt;/code&gt; 의 로 설정 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a303dcafb3e6cc8ab666cffa898594e8d2a33d4a" translate="yes" xml:space="preserve">
          <source>You may also want to install the &lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;python clingo module&lt;/a&gt;,
which is &lt;a href=&quot;#official-api-embedding&quot;&gt;an optional dependancy&lt;/a&gt;.</source>
          <target state="translated">또한 설치 할 수 있습니다 &lt;a href=&quot;https://potassco.org/clingo/python-api/current/clingo.html&quot;&gt;파이썬 clingo 모듈&lt;/a&gt; 인 &lt;a href=&quot;#official-api-embedding&quot;&gt;옵션 의존성&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="61b9ca8ea533910460f8d6636a923902e5142a8f" translate="yes" xml:space="preserve">
          <source>You must have &lt;a href=&quot;https://potassco.org/doc/start/&quot;&gt;&lt;code&gt;clingo&lt;/code&gt;&lt;/a&gt; in your path. Depending on your OS, it might be done with a system installation,
or through &lt;a href=&quot;https://github.com/potassco/clingo/releases&quot;&gt;downloading&lt;/a&gt; and (compilation and) manual installation.</source>
          <target state="translated">당신은 당신의 길에 &lt;a href=&quot;https://potassco.org/doc/start/&quot;&gt; &lt;code&gt;clingo&lt;/code&gt; &lt;/a&gt; 이 있어야합니다 . OS에 따라 시스템 설치 또는 &lt;a href=&quot;https://github.com/potassco/clingo/releases&quot;&gt;다운로드&lt;/a&gt; 및 (컴파일 및) 수동 설치를 통해 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4cad31ae8e8efc1f4ddf34354de173ef6731770a" translate="yes" xml:space="preserve">
          <source>add support for clingo official python module</source>
          <target state="translated">clingo 공식 파이썬 모듈에 대한 지원 추가</target>
        </trans-unit>
        <trans-unit id="8da81f55a2c9fba388ff4bb025f39999b06975bd" translate="yes" xml:space="preserve">
          <source>add support for propagators</source>
          <target state="translated">전파자 지원 추가</target>
        </trans-unit>
        <trans-unit id="e9dadb607e6d489853495354d9a14b63f6ea629b" translate="yes" xml:space="preserve">
          <source>allow to raise an InvalidDecoder exception during decoder instanciation to get the instance discarded</source>
          <target state="translated">디코더 인스턴스화 중에 InvalidDecoder 예외를 발생시켜 인스턴스를 삭제하도록 허용</target>
        </trans-unit>
        <trans-unit id="51de2b835bd35a67eb32dbcd3d77d4b96e5aa39d" translate="yes" xml:space="preserve">
          <source>before</source>
          <target state="translated">전에</target>
        </trans-unit>
        <trans-unit id="50da729e7d5e37656158efa76fa38475c29a75f4" translate="yes" xml:space="preserve">
          <source>bioinformatics, to encode biological pathway logic in &lt;a href=&quot;https://github.com/pathmodel/pathmodel&quot;&gt;pathmodel&lt;/a&gt; and &lt;a href=&quot;https://github.com/cfrioux/MeneTools&quot;&gt;Menetools&lt;/a&gt;, and for &lt;a href=&quot;https://github.com/cfrioux/miscoto&quot;&gt;community detection&lt;/a&gt;.</source>
          <target state="translated">bioinformatics, 경로 &lt;a href=&quot;https://github.com/pathmodel/pathmodel&quot;&gt;모델&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/cfrioux/MeneTools&quot;&gt;Menetools&lt;/a&gt; 에서 생물학적 경로 논리를 인코딩 하고 &lt;a href=&quot;https://github.com/cfrioux/miscoto&quot;&gt;커뮤니티 감지를&lt;/a&gt; 위해 .</target>
        </trans-unit>
        <trans-unit id="074438a63ef19ed48a00cea72614c91d38173715" translate="yes" xml:space="preserve">
          <source>both robust and quick parsing, instead of the simple vs slow method</source>
          <target state="translated">단순 vs 느린 방법 대신 강력하고 빠른 구문 분석</target>
        </trans-unit>
        <trans-unit id="e0912bf181e07f0c5072c5e872c83c95431ed5e3" translate="yes" xml:space="preserve">
          <source>bugfix: &lt;code&gt;.atom_as_string&lt;/code&gt; and &lt;code&gt;.first_arg_only&lt;/code&gt; collision</source>
          <target state="translated">버그 &lt;code&gt;.atom_as_string&lt;/code&gt; : .atom_as_string 및 &lt;code&gt;.first_arg_only&lt;/code&gt; 충돌</target>
        </trans-unit>
        <trans-unit id="5007fa8d83436ab973c991a27b18d472aecd5aa5" translate="yes" xml:space="preserve">
          <source>bugfix: more robust tempfile deletion and closing management</source>
          <target state="translated">버그 픽스 : 더 강력한 임시 파일 삭제 및 닫기 관리</target>
        </trans-unit>
        <trans-unit id="e18a7ce81ad96200ba729c0bbc124c3f9d51b019" translate="yes" xml:space="preserve">
          <source>decoders support, see &lt;a href=&quot;clyngor/decoder.py&quot;&gt;&lt;code&gt;clyngor.decoder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decoders&quot;&gt;doc&lt;/a&gt;</source>
          <target state="translated">디코더 지원, &lt;a href=&quot;clyngor/decoder.py&quot;&gt; &lt;code&gt;clyngor.decoder&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#decoders&quot;&gt;doc&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="9fb3cccc99a0b896ac303711eb87065e488d6ac6" translate="yes" xml:space="preserve">
          <source>decorator &lt;code&gt;with_clingo_bin&lt;/code&gt;, changing clingo binary path for encapsulated function</source>
          <target state="translated">데코레이터 &lt;code&gt;with_clingo_bin&lt;/code&gt; , 캡슐화 된 함수에 대한 clingo 바이너리 경로 변경</target>
        </trans-unit>
        <trans-unit id="96808953997a2ce41c2f2e33d58a68a23fc78e11" translate="yes" xml:space="preserve">
          <source>easy interface for most use cases using type hint for embedded python</source>
          <target state="translated">임베디드 파이썬에 유형 힌트를 사용하는 대부분의 사용 사례에 대한 쉬운 인터페이스</target>
        </trans-unit>
        <trans-unit id="cefbc993455527eed9fde6b4e6be4855272911b7" translate="yes" xml:space="preserve">
          <source>easy python constraints in ASP with Constraint type</source>
          <target state="translated">Constraint 유형을 사용하는 ASP의 쉬운 파이썬 제약</target>
        </trans-unit>
        <trans-unit id="b091a5d5b3131b981749ac7c080a7d5521eca1e7" translate="yes" xml:space="preserve">
          <source>encoding: try to more-or-less automatically build the python to ASP compiler</source>
          <target state="translated">인코딩 : Python을 ASP 컴파일러에 자동으로 빌드하려고합니다.</target>
        </trans-unit>
        <trans-unit id="e765327e3f299dc210e0f0f69ddb310fc9c2c821" translate="yes" xml:space="preserve">
          <source>fix &lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/16&quot;&gt;#16&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/16&quot;&gt;# 16&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2d71e072ae705eec88f34616a293e820b041052a" translate="yes" xml:space="preserve">
          <source>fix &lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/7&quot;&gt;#7&lt;/a&gt;</source>
          <target state="translated">수정 &lt;a href=&quot;https://github.com/Aluriak/clyngor/issues/7&quot;&gt;# 7&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b768efe9f2d78e51b32d26194cb3b7a9d189d31" translate="yes" xml:space="preserve">
          <source>from pyasp to clyngor</source>
          <target state="translated">pyasp에서 clyngor까지</target>
        </trans-unit>
        <trans-unit id="496e197dd9949af9792127c66bfb7a81e0a8ba05" translate="yes" xml:space="preserve">
          <source>improve testing cover, fix warning in recent versions of pytest</source>
          <target state="translated">테스트 커버 개선, 최신 버전의 pytest에서 경고 수정</target>
        </trans-unit>
        <trans-unit id="43eb7abf564b266b33012692f9ae2e2773b789f7" translate="yes" xml:space="preserve">
          <source>mathematics, to encode some &lt;a&gt;FCA&lt;/a&gt;-related task such as &lt;a href=&quot;https://github.com/Aluriak/AOC-poset-generation&quot;&gt;AOC-poset generation&lt;/a&gt; or &lt;a href=&quot;https://github.com/Aluriak/concept-generation&quot;&gt;concept search&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Aluriak/PowerGrASP&quot;&gt;graph compression&lt;/a&gt; or &lt;a href=&quot;https://github.com/Aluriak/phasme&quot;&gt;graph manipulation&lt;/a&gt; in the context of graph theory.</source>
          <target state="translated">수학 일부 인코딩하는 &lt;a&gt;FCA가&lt;/a&gt; 같은 작업 - 관련 &lt;a href=&quot;https://github.com/Aluriak/AOC-poset-generation&quot;&gt;AOC-poset 생성&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/Aluriak/concept-generation&quot;&gt;개념을 탐색&lt;/a&gt; 하고, &lt;a href=&quot;https://github.com/Aluriak/PowerGrASP&quot;&gt;그래프 압축&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/Aluriak/phasme&quot;&gt;그래프 조작&lt;/a&gt; 그래프 이론의 맥락이다.</target>
        </trans-unit>
        <trans-unit id="f17da3e1bf8613b59f1ebd9d651eb2f221c8a470" translate="yes" xml:space="preserve">
          <source>more available annotations, for instance &lt;code&gt;(3, 5)&lt;/code&gt; (to ask for between 3 and 5 atoms to be associated with the instance), or &lt;code&gt;any&lt;/code&gt; (exact meaning has to be found)</source>
          <target state="translated">더 많은 주석, 예를 들어 &lt;code&gt;(3, 5)&lt;/code&gt; (인스턴스와 연관 될 원자 3 ~ 5 개 요청) 또는 &lt;code&gt;any&lt;/code&gt; (정확한 의미를 찾아야 함)</target>
        </trans-unit>
        <trans-unit id="a1e82e07ce83d0509d046b2892e35aba991e2e9d" translate="yes" xml:space="preserve">
          <source>more robust options parsing when solving with clingo module</source>
          <target state="translated">clingo 모듈로 해석 할 때 더 강력한 옵션 구문 분석</target>
        </trans-unit>
        <trans-unit id="9992fe949dc68ec8aebc3fec46629b55ec90aa02" translate="yes" xml:space="preserve">
          <source>new parameter &lt;code&gt;return_raw_output&lt;/code&gt; for clyngor.solve, allowing to get stdout/stderr without treatments</source>
          <target state="translated">&lt;code&gt;return_raw_output&lt;/code&gt; 대한 새 매개 변수 return_raw_output , 처리없이 stdout / stderr을 가져올 수 있음</target>
        </trans-unit>
        <trans-unit id="8d0fb2d6cc5ffba846b9139966e69e5bf633b600" translate="yes" xml:space="preserve">
          <source>predicat to know if python/lua are available with used clingo binary</source>
          <target state="translated">사용 된 clingo 바이너리에서 python / lua를 사용할 수 있는지 알기위한 predicat</target>
        </trans-unit>
        <trans-unit id="c9bfaa14976106285b7dce65a9cea2e80d2b677a" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;#Further-ideas&quot;&gt;further ideas&lt;/a&gt;</source>
          <target state="translated">참조 &lt;a href=&quot;#Further-ideas&quot;&gt;추가 아이디어를&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7afa991458ca7d414f51b74832e1074e6d8490d1" translate="yes" xml:space="preserve">
          <source>some options are not supported : constants, &lt;a href=&quot;clyngor/test/test_time_limit.py&quot;&gt;time-limit&lt;/a&gt;, parsing error handling, &lt;a href=&quot;clyngor/test/test_grounding.py&quot;&gt;decoupled grounding/solving&lt;/a&gt;</source>
          <target state="translated">일부 옵션은 지원되지 않습니다 : 상수, &lt;a href=&quot;clyngor/test/test_time_limit.py&quot;&gt;시간 제한&lt;/a&gt; , 구문 분석 오류 처리, &lt;a href=&quot;clyngor/test/test_grounding.py&quot;&gt;분리 된 접지 / 해결&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c293064e1f16f4237014d85419900b69236542be" translate="yes" xml:space="preserve">
          <source>support for &lt;code&gt;.by_arity&lt;/code&gt;, equivalent to &lt;code&gt;.by_predicate&lt;/code&gt; but with predicate and arity</source>
          <target state="translated">지원 &lt;code&gt;.by_arity&lt;/code&gt; , 상응하는 &lt;code&gt;.by_predicate&lt;/code&gt; 하지만 조건 및 인수에 대응에</target>
        </trans-unit>
        <trans-unit id="dd6edfee6c61e2cd9b6af185d8bb6109e1b6b47d" translate="yes" xml:space="preserve">
          <source>support for &lt;code&gt;.discard_quotes&lt;/code&gt; option (thanks to ArnaudBelcour)</source>
          <target state="translated">&lt;code&gt;.discard_quotes&lt;/code&gt; 옵션 지원 ( ArnaudBelcour 덕분에)</target>
        </trans-unit>
        <trans-unit id="d8522e605d5e8d4ef665672ccb60c426edb93378" translate="yes" xml:space="preserve">
          <source>support for &lt;code&gt;.with_optimality&lt;/code&gt;, giving optimization and optimality along with the model</source>
          <target state="translated">&lt;code&gt;.with_optimality&lt;/code&gt; 지원 , 모델과 함께 최적화 및 최적화 제공</target>
        </trans-unit>
        <trans-unit id="c54e76c5715613a8df5b162b9c62a504a30f9c6a" translate="yes" xml:space="preserve">
          <source>support for decoupled grounding and solving, as shown in &lt;a href=&quot;examples/decoupled-grounding.py&quot;&gt;dedicated example&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;examples/decoupled-grounding.py&quot;&gt;전용 예제에&lt;/a&gt; 표시된대로 분리 된 접지 및 해석 지원</target>
        </trans-unit>
        <trans-unit id="2249ef853cab0c296867009154d1f4dca4be7a9f" translate="yes" xml:space="preserve">
          <source>visualization, with &lt;a href=&quot;https://github.com/uwdata/draco&quot;&gt;Draco&lt;/a&gt;, a formalization of visualization design knowledge as constraints, and &lt;a href=&quot;https://gitlab.inria.fr/lbourneu/biseau&quot;&gt;biseau&lt;/a&gt;, an ASP-to-graph compiler.</source>
          <target state="translated">시각화 설계 지식을 제약으로 공식화 한 &lt;a href=&quot;https://github.com/uwdata/draco&quot;&gt;Draco&lt;/a&gt; 와 ASP-to-graph 컴파일러 인 &lt;a href=&quot;https://gitlab.inria.fr/lbourneu/biseau&quot;&gt;biseau를 사용한&lt;/a&gt; 시각화 .</target>
        </trans-unit>
        <trans-unit id="c9f881e734899d11d5249a5fb2f4de1b7be54ff1" translate="yes" xml:space="preserve">
          <source>web applications, for &lt;a href=&quot;https://github.com/llaisdy/phoenix_live_view_sudoku/&quot;&gt;a sudoku solver made with ASP&lt;/a&gt;.</source>
          <target state="translated">웹 응용 프로그램, &lt;a href=&quot;https://github.com/llaisdy/phoenix_live_view_sudoku/&quot;&gt;ASP로 만든 스도쿠 솔버&lt;/a&gt; 용 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
