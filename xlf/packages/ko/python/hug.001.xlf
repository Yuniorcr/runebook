<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/hug/">
    <body>
      <group id="hug">
        <trans-unit id="1891cd1442749ae72069c9b8cd5cea2844856a51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://hugapi.github.io/hug/&quot;&gt;Read Latest Documentation&lt;/a&gt; - &lt;a href=&quot;https://github.com/hugapi/hug&quot;&gt;Browse GitHub Code Repository&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hugapi.github.io/hug/&quot;&gt;최신 문서를 읽기&lt;/a&gt; - &lt;a href=&quot;https://github.com/hugapi/hug&quot;&gt;검색 GitHub의 코드 저장소&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5fd1eceee6a3dddacede2ff00f0045a329abb963" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Directives&lt;/strong&gt; functions that get executed with the request / response data based on being requested as an argument in your api_function.
These apply as input parameters only, and can not be applied currently as output formats or transformations.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;api_function의 인수로 요청 된 것을 기반으로 요청 / 응답 데이터로 실행되는 함수를 &lt;strong&gt;지시&lt;/strong&gt; 합니다. 이는 입력 매개 변수로만 적용되며 현재 출력 형식 또는 변환으로 적용 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f0b92d435337779f16ada3f239b1093f1550126a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input Formatters&lt;/strong&gt; a function that takes the body of data given from a user of your API and formats it for handling.</source>
          <target state="translated">&lt;strong&gt;입력 포맷터&lt;/strong&gt; 는 API 사용자가 제공 한 데이터 본문을 가져와 처리를 위해 &lt;strong&gt;포맷&lt;/strong&gt; 하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="5d0f84ef4dfbdd8691433446b2f3d30323ecfde0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;METHOD Decorators&lt;/strong&gt;&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged</source>
          <target state="translated">&lt;strong&gt;METHOD 데코레이터 &lt;/strong&gt; &lt;code&gt;get&lt;/code&gt; Python 메소드를 변경하지 않고 유지하면서 Python 함수를 API로 노출하는 HTTP 메소드 데코레이터를 가져 &lt;strong&gt;오고&lt;/strong&gt; , &lt;code&gt;post&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="337920445117b90d3c38853e9b3f5a0a264ece63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Middleware&lt;/strong&gt; functions that get called for every request a hug API processes</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;hug API가 처리하는 모든 요청에 ​​대해 호출되는 &lt;strong&gt;미들웨어&lt;/strong&gt; 함수</target>
        </trans-unit>
        <trans-unit id="26cfd9566f33dc84fdf2e04ec121504c3a006a41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Output Formatters&lt;/strong&gt; a function that takes the output of your API function and formats it for transport to the user of the API.</source>
          <target state="translated">&lt;strong&gt;출력 포맷터&lt;/strong&gt; 는 API 함수의 출력을 가져와 API 사용자에게 전송하기 위해 형식을 지정하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="f0393068b82fd41f7d3c7b081d85a787d6aec1e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameter mapping&lt;/strong&gt; can be used to override inferred parameter names, eg. for reserved keywords:</source>
          <target state="translated">&lt;strong&gt;매개 변수 매핑&lt;/strong&gt; 은 추론 된 매개 변수 이름을 재정의하는 데 사용할 수 있습니다. 예약 된 키워드 :</target>
        </trans-unit>
        <trans-unit id="a046197910bd9944460f562ddf1c6de1a78eaa7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type Annotations&lt;/strong&gt; functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;인수의 유효성을 검사하고 Python 유형으로 변환하는 방법을 지정하기 위해 메서드 인수에 선택적으로 첨부되는 &lt;strong&gt;유형 주석&lt;/strong&gt; 함수</target>
        </trans-unit>
        <trans-unit id="3a951d35e81f9a92861645f522c6a01ab47401b1" translate="yes" xml:space="preserve">
          <source>A Python framework that makes developing APIs as simple as possible, but no simpler.</source>
          <target state="translated">API 개발을 가능한 한 간단하게 만드는 Python 프레임 워크입니다.</target>
        </trans-unit>
        <trans-unit id="3d0a354729291e8b8f1225393dd2a6b39a8c8fb8" translate="yes" xml:space="preserve">
          <source>Adding your own directives is straight forward:</source>
          <target state="translated">자신의 지시문을 추가하는 것은 간단합니다.</target>
        </trans-unit>
        <trans-unit id="b32141e09c28252c817db030d2a7de86a3b2a036" translate="yes" xml:space="preserve">
          <source>Additionally, you can easily create a custom 404 handler using the &lt;code&gt;hug.not_found&lt;/code&gt; decorator:</source>
          <target state="translated">또한 &lt;code&gt;hug.not_found&lt;/code&gt; 데코레이터를 사용하여 사용자 지정 404 핸들러를 쉽게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f33cf112928c8c4636bfabd6fd6f96bee8527d0" translate="yes" xml:space="preserve">
          <source>As a result of these goals, hug is Python 3+ only and built upon &lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;Falcon's&lt;/a&gt; high performance HTTP library</source>
          <target state="translated">이러한 목표의 결과로 hug는 Python 3+ 전용이며 &lt;a href=&quot;https://github.com/falconry/falcon&quot;&gt;Falcon의&lt;/a&gt; 고성능 HTTP 라이브러리를 기반으로 구축되었습니다.</target>
        </trans-unit>
        <trans-unit id="a8df05afb98eec12798dde02aa621accbaa4a973" translate="yes" xml:space="preserve">
          <source>Aside from the obvious input transformation use case, directives can be used to pipe data into your API functions, even if they are not present in the request query string, POST body, etc. For an example of how to use directives in this way, see the authentication example in the examples folder.</source>
          <target state="translated">명백한 입력 변환 사용 사례 외에도 지시문은 요청 쿼리 문자열, POST 본문 등에 데이터가없는 경우에도 API 함수로 데이터를 파이프하는 데 사용할 수 있습니다. 이러한 방식으로 지시문을 사용하는 방법의 예는 다음과 같습니다. 예제 폴더의 인증 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="87fae54a50b27140b756b9e37a86b1e78537c4a1" translate="yes" xml:space="preserve">
          <source>Asyncio support</source>
          <target state="translated">Asyncio 지원</target>
        </trans-unit>
        <trans-unit id="754e1e5db57d014e36284f09734da7ee9ade8e7f" translate="yes" xml:space="preserve">
          <source>Be the basis for next generation Python APIs, embracing the latest technology.</source>
          <target state="translated">최신 기술을 수용하는 차세대 Python API의 기반이됩니다.</target>
        </trans-unit>
        <trans-unit id="e104776120d29dd6459bcfa52cf9116c58729400" translate="yes" xml:space="preserve">
          <source>Build an example API with a simple endpoint in just a few lines.</source>
          <target state="translated">몇 줄만에 간단한 엔드 포인트로 예제 API를 빌드하십시오.</target>
        </trans-unit>
        <trans-unit id="22fce8cfcd346175db9ddbab078350c1a657d4f3" translate="yes" xml:space="preserve">
          <source>Building Blocks of a hug API</source>
          <target state="translated">포옹 API의 빌딩 블록</target>
        </trans-unit>
        <trans-unit id="973e7afeaa4e40433590d46f7048f4263188c8b7" translate="yes" xml:space="preserve">
          <source>By default, hug returns an auto generated API spec when a user tries to access an endpoint that isn't defined. If you would not like to return this spec you can turn off 404 documentation:</source>
          <target state="translated">기본적으로 hug는 사용자가 정의되지 않은 엔드 포인트에 액세스하려고 할 때 자동 생성 된 API 사양을 반환합니다. 이 사양을 반환하지 않으려면 404 문서를 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed3c98a24ca7c20314ccede0ba6b97c33e7cd11d" translate="yes" xml:space="preserve">
          <source>By default, the IP is 172.17.0.1. Assuming that's the IP you see, as well, you would then go to &lt;code&gt;http://172.17.0.1:8000/&lt;/code&gt; in your browser to view your API.</source>
          <target state="translated">기본적으로 IP는 172.17.0.1입니다. 이것이 표시되는 IP라고 가정하면 브라우저에서 &lt;code&gt;http://172.17.0.1:8000/&lt;/code&gt; 으로 이동 하여 API를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db63f0c176088a648bb7851cf6d0b3c69e011ded" translate="yes" xml:space="preserve">
          <source>Can be imported into the main API file:</source>
          <target state="translated">기본 API 파일로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ce123ace99cd0029fc0622f5a38b96e8cbee984" translate="yes" xml:space="preserve">
          <source>Configuring hug 404</source>
          <target state="translated">포옹 구성 404</target>
        </trans-unit>
        <trans-unit id="29c1f935aff4d7ef2949abda669b629a517cdd9a" translate="yes" xml:space="preserve">
          <source>Directives may be accessed via an argument with a &lt;code&gt;hug_&lt;/code&gt; prefix, or by using Python 3 type annotations. The latter is the more modern approach, and is recommended. Directives declared in a module can be accessed by using their fully qualified name as the type annotation (ex: &lt;code&gt;module.directive_name&lt;/code&gt;).</source>
          <target state="translated">지시문은 &lt;code&gt;hug_&lt;/code&gt; 접두사가 있는 인수를 통해 또는 Python 3 유형 주석을 사용하여 액세스 할 수 있습니다 . 후자는보다 현대적인 접근 방식이며 권장됩니다. 모듈에서 선언 된 지시문은 정규화 된 이름을 유형 주석으로 사용하여 액세스 할 수 있습니다 (예 : &lt;code&gt;module.directive_name&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="358d84aa8148063b462186c221ef88a0bda8ec99" translate="yes" xml:space="preserve">
          <source>For Example:</source>
          <target state="translated">예를 들어 :</target>
        </trans-unit>
        <trans-unit id="7785dfa6b5b2ac73312e8d5251b8d042d702b7f1" translate="yes" xml:space="preserve">
          <source>For completeness, here is an example of accessing the directive via the magic name approach:</source>
          <target state="translated">완전성을 위해 다음은 매직 이름 접근 방식을 통해 지시문에 액세스하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ec1e6db6e6c03fb8bad69c299593b12da3a0dc24" translate="yes" xml:space="preserve">
          <source>From the command line application:</source>
          <target state="translated">명령 줄 애플리케이션에서 :</target>
        </trans-unit>
        <trans-unit id="bdb4e742101adce19db03bb43f2a3ef4a3a7e139" translate="yes" xml:space="preserve">
          <source>Get professionally supported hug with the Tidelift Subscription</source>
          <target state="translated">Tidelift 구독으로 전문적으로 지원되는 포옹 받기</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="b33664f205bae044a7540d189a9f463f85322603" translate="yes" xml:space="preserve">
          <source>HUG simply stands for Hopefully Useful Guide. This represents the project's goal to help guide developers into creating well written and intuitive APIs.</source>
          <target state="translated">HUG는 단순히 유용한 가이드를 의미합니다. 이는 개발자가 잘 작성되고 직관적 인 API를 만들도록 안내하는 프로젝트의 목표를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4241eda4d6144efaa18c072736bfe08f7593223d" translate="yes" xml:space="preserve">
          <source>Ideally, within a &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;virtual environment&lt;/a&gt;.</source>
          <target state="translated">이상적으로는 &lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs/&quot;&gt;가상 환경&lt;/a&gt; 내에서 .</target>
        </trans-unit>
        <trans-unit id="32ee1aa77e7bb32063fdb2b2fc12e0c28a6d63ab" translate="yes" xml:space="preserve">
          <source>If you like to develop in Docker and keep your system clean, you can do that but you'll need to first install &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose&lt;/a&gt;.</source>
          <target state="translated">Docker에서 개발하고 시스템을 깨끗하게 유지하려면 그렇게 할 수 있지만 먼저 &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Docker Compose를&lt;/a&gt; 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f9b6c5909f91a333882fd964ac2dbbc32dbbfa3" translate="yes" xml:space="preserve">
          <source>Input formatters are mapped based on the &lt;code&gt;content_type&lt;/code&gt; of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your &lt;code&gt;api_function&lt;/code&gt;</source>
          <target state="translated">입력 포맷터는 요청 데이터 의 &lt;code&gt;content_type&lt;/code&gt; 을 기반으로 매핑 되며 기본 구문 분석 만 수행합니다. 더 자세한 구문 분석은 &lt;code&gt;api_function&lt;/code&gt; 에있는 유형 주석에 의해 수행되어야합니다.</target>
        </trans-unit>
        <trans-unit id="7c920197ca42bd6cbc5aaef91042da46af9d9ad6" translate="yes" xml:space="preserve">
          <source>Installing hug</source>
          <target state="translated">포옹 설치</target>
        </trans-unit>
        <trans-unit id="9279433dcb5025919ded69799bd1fcfdd4bbeca1" translate="yes" xml:space="preserve">
          <source>Installing hug is as simple as:</source>
          <target state="translated">포옹 설치는 다음과 같이 간단합니다.</target>
        </trans-unit>
        <trans-unit id="831984903762fc97309a8e41bcf90f4c95b8dd38" translate="yes" xml:space="preserve">
          <source>It should be fast. A developer should never feel the need to look somewhere else for performance reasons.</source>
          <target state="translated">빨라야합니다. 개발자는 성능상의 이유로 다른 곳을 찾아 볼 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="bf52013fff0f47b4338b87ed66a34d37ea549a73" translate="yes" xml:space="preserve">
          <source>Magic done once, in an API framework, is better than pushing the problem set to the user of the API framework.</source>
          <target state="translated">API 프레임 워크에서 한 번만 수행되는 마법은 API 프레임 워크 사용자에게 문제 세트를 푸시하는 것보다 낫습니다.</target>
        </trans-unit>
        <trans-unit id="d23eebc35f489d3b763d90e2c12b6a6a144a1e89" translate="yes" xml:space="preserve">
          <source>Make developing a Python driven API as succinct as a written definition.</source>
          <target state="translated">Python 기반 API를 작성된 정의처럼 간결하게 개발하십시오.</target>
        </trans-unit>
        <trans-unit id="4850343cb2494afc0d45b0bdbcfb4698a176fb71" translate="yes" xml:space="preserve">
          <source>NOTE: Hug is running on top Falcon which is not an asynchronous server. Even if using
asyncio, requests will still be processed synchronously.</source>
          <target state="translated">참고 : Hug는 비동기 서버가 아닌 상위 Falcon에서 실행됩니다. asyncio를 사용하더라도 요청은 여전히 ​​동 기적으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="3cc3453903d306e07a247c36a1a7aade091f9601" translate="yes" xml:space="preserve">
          <source>Note: versioning in hug automatically supports both the version header as well as direct URL based specification.</source>
          <target state="translated">참고 : hug의 버전 관리는 버전 헤더와 직접 URL 기반 사양을 모두 자동으로 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9be8845d032ba090ccafb26f1758fd381984819c" translate="yes" xml:space="preserve">
          <source>On your Docker &lt;code&gt;workspace&lt;/code&gt; container, the &lt;code&gt;./docker/templates&lt;/code&gt; directory on your host computer is mounted to &lt;code&gt;/src&lt;/code&gt; in the Docker container. This is specified under &lt;code&gt;services&lt;/code&gt; &amp;gt; &lt;code&gt;app&lt;/code&gt; of &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt;.</source>
          <target state="translated">Docker &lt;code&gt;workspace&lt;/code&gt; 컨테이너에서 호스트 컴퓨터 의 &lt;code&gt;./docker/templates&lt;/code&gt; 디렉터리 는 Docker 컨테이너의 &lt;code&gt;/src&lt;/code&gt; 에 마운트됩니다 . 이는 &lt;code&gt;services&lt;/code&gt; &amp;gt; &lt;code&gt;app&lt;/code&gt; of &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt; 에 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="aa9860d695862a7eb3daf9e8e36c34497710171a" translate="yes" xml:space="preserve">
          <source>Once you've done that, you'll need to &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;docker&lt;/code&gt; directory and run the web server (Gunicorn) specified in &lt;code&gt;./docker/gunicorn/Dockerfile&lt;/code&gt;, after which you can preview the output of your API in the browser on your host machine.</source>
          <target state="translated">당신이 그 일을 한 후에는해야합니다 &lt;code&gt;cd&lt;/code&gt; 에 &lt;code&gt;docker&lt;/code&gt; 디렉토리에 지정된 웹 서버 (Gunicorn)를 실행 &lt;code&gt;./docker/gunicorn/Dockerfile&lt;/code&gt; 당신의 브라우저에서 API의 출력을 미리 볼 수있는 후를, 당신의 호스트 머신.</target>
        </trans-unit>
        <trans-unit id="10610ae894a2a7a10eede2205febf1d1758dac6f" translate="yes" xml:space="preserve">
          <source>Or alternatively - for cases like this - where only one module is being included per a URL route:</source>
          <target state="translated">또는 URL 경로당 하나의 모듈 만 포함되는 이와 같은 경우 :</target>
        </trans-unit>
        <trans-unit id="9599139a3da06884b1086130404707b1c040bb60" translate="yes" xml:space="preserve">
          <source>Parameters can also be encoded in the URL (check
out &lt;a href=&quot;examples/happy_birthday.py&quot;&gt;&lt;code&gt;happy_birthday.py&lt;/code&gt;&lt;/a&gt; for the whole
example).</source>
          <target state="translated">매개 변수는 URL로 인코딩 할 수도 있습니다 ( 전체 예제는 &lt;a href=&quot;examples/happy_birthday.py&quot;&gt; &lt;code&gt;happy_birthday.py&lt;/code&gt; &lt;/a&gt; 확인 ).</target>
        </trans-unit>
        <trans-unit id="70eea5c68d9f081a0dac9b82df9ef6906b884950" translate="yes" xml:space="preserve">
          <source>Professional support for hug is available as part of the &lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;Tidelift
Subscription&lt;/a&gt;.
Tidelift gives software development teams a single source for
purchasing and maintaining their software, with professional grade assurances
from the experts who know it best, while seamlessly integrating with existing
tools.</source>
          <target state="translated">포옹에 대한 전문적인 지원은 &lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-hug?utm_source=pypi-hug&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;Tidelift 구독의&lt;/a&gt; 일부로 제공됩니다 . Tidelift는 소프트웨어 개발 팀에게 소프트웨어를 가장 잘 아는 전문가의 전문가 수준 보증을 통해 소프트웨어 구매 및 유지 관리를위한 단일 소스를 제공하는 동시에 기존 도구와 원활하게 통합됩니다.</target>
        </trans-unit>
        <trans-unit id="4ad07fe8cab325006610e5c7f9d4c3cf9d378e9a" translate="yes" xml:space="preserve">
          <source>Running hug with other WSGI based servers</source>
          <target state="translated">다른 WSGI 기반 서버와 포옹 실행</target>
        </trans-unit>
        <trans-unit id="7e197170524d0049b65494c29f9941c06215db04" translate="yes" xml:space="preserve">
          <source>Security contact information</source>
          <target state="translated">보안 연락처 정보</target>
        </trans-unit>
        <trans-unit id="a5f0572bebdaf623329747d1a6d728c16dcb7212" translate="yes" xml:space="preserve">
          <source>Splitting APIs over multiple files</source>
          <target state="translated">여러 파일로 API 분할</target>
        </trans-unit>
        <trans-unit id="92428f0e12da119c2c985be2440ab07ccde29faa" translate="yes" xml:space="preserve">
          <source>Supporting hug development</source>
          <target state="translated">포옹 개발 지원</target>
        </trans-unit>
        <trans-unit id="fda1a2f92c23d9bd588062628a1a6dec5fce5020" translate="yes" xml:space="preserve">
          <source>Testing hug APIs</source>
          <target state="translated">Hug API 테스트</target>
        </trans-unit>
        <trans-unit id="0a0dc0ebd769cd2d6e2f3c5c04c9ba7bb9d6375f" translate="yes" xml:space="preserve">
          <source>Thanks and I hope you find &lt;em&gt;this&lt;/em&gt; hug helpful as you develop your next Python API!</source>
          <target state="translated">감사 합니다. 다음 Python API를 개발할 &lt;em&gt;때이&lt;/em&gt; 포옹이 도움 &lt;em&gt;이&lt;/em&gt; 되기를 바랍니다 .</target>
        </trans-unit>
        <trans-unit id="6b5748267b4a92ff501ece9f49a1eae7d4bdd557" translate="yes" xml:space="preserve">
          <source>The framework should encourage code that self-documents.</source>
          <target state="translated">프레임 워크는 자체 문서화하는 코드를 권장해야합니다.</target>
        </trans-unit>
        <trans-unit id="4c3a720e1f09b4bf3195ba27f2a83cc0403fae64" translate="yes" xml:space="preserve">
          <source>Then you can access the example from &lt;code&gt;localhost:8000/v1/echo?text=Hi&lt;/code&gt; / &lt;code&gt;localhost:8000/v2/echo?text=Hi&lt;/code&gt; Or access the documentation for your API from &lt;code&gt;localhost:8000&lt;/code&gt;</source>
          <target state="translated">그런 다음 &lt;code&gt;localhost:8000/v1/echo?text=Hi&lt;/code&gt; / &lt;code&gt;localhost:8000/v2/echo?text=Hi&lt;/code&gt; 에서 예제에 액세스하거나 localhost : 8000 에서 API 설명서에 액세스 할 수 있습니다 &lt;code&gt;localhost:8000&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85423025067361be7aff0e935bf79ce621300d9a" translate="yes" xml:space="preserve">
          <source>This decorator works in the same manner as the hug HTTP method decorators, and is even version aware:</source>
          <target state="translated">이 데코레이터는 hug HTTP 메소드 데코레이터와 동일한 방식으로 작동하며 버전도 인식합니다.</target>
        </trans-unit>
        <trans-unit id="4b5392cfdf232f6cc068904b2d9b657e651e978e" translate="yes" xml:space="preserve">
          <source>To report a security vulnerability, please use the
&lt;a href=&quot;https://tidelift.com/security&quot;&gt;Tidelift security contact&lt;/a&gt;.
Tidelift will coordinate the fix and disclosure.</source>
          <target state="translated">보안 취약점을보고하려면 &lt;a href=&quot;https://tidelift.com/security&quot;&gt;Tidelift 보안 연락처&lt;/a&gt; 를 사용하십시오 . Tidelift는 수정 및 공개를 조정합니다.</target>
        </trans-unit>
        <trans-unit id="bd75e7993dd4451f4e2e80c87bb17eaf0f068b43" translate="yes" xml:space="preserve">
          <source>To run the example:</source>
          <target state="translated">예제를 실행하려면 :</target>
        </trans-unit>
        <trans-unit id="c1e8307e6a9d01923949fbbd7e72d258fbe70276" translate="yes" xml:space="preserve">
          <source>To run the hello world hug example API.</source>
          <target state="translated">hello world hug 예제 API를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="cc3a5a60ceb8a3bda715ca81ef1dd0184522d378" translate="yes" xml:space="preserve">
          <source>To run, from the command line type:</source>
          <target state="translated">실행하려면 명령 줄에서 다음을 입력합니다.</target>
        </trans-unit>
        <trans-unit id="460f7658f324eaf15f96e695cc776bdfeb4def6a" translate="yes" xml:space="preserve">
          <source>Type annotations also feed into &lt;code&gt;hug&lt;/code&gt;'s automatic documentation
generation to let users of your API know what data to supply.</source>
          <target state="translated">유형 주석은 API 사용자가 제공 할 데이터를 알 수 있도록 &lt;code&gt;hug&lt;/code&gt; 의 자동 문서 생성에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f1e887ad301db2838308801456e01403dfd27811" translate="yes" xml:space="preserve">
          <source>Using Docker</source>
          <target state="translated">도커 사용</target>
        </trans-unit>
        <trans-unit id="b3a69340ce0be8b5b74b7e46cc90f9bdf3479d67" translate="yes" xml:space="preserve">
          <source>Using Python 3.5 async keyword.</source>
          <target state="translated">Python 3.5 비동기 키워드 사용.</target>
        </trans-unit>
        <trans-unit id="e944aca10e018a969b5d6881683c7baf9dcf0f14" translate="yes" xml:space="preserve">
          <source>Using asyncio coroutine decorator</source>
          <target state="translated">asyncio 코 루틴 데코레이터 사용</target>
        </trans-unit>
        <trans-unit id="5e51f6cfcd116a5a628b50e89b4f92dc36c5179c" translate="yes" xml:space="preserve">
          <source>Versioning with hug</source>
          <target state="translated">포옹으로 버전 관리</target>
        </trans-unit>
        <trans-unit id="09156ba196e26e6c7e939d56e7a41867c91c8cdb" translate="yes" xml:space="preserve">
          <source>When building an API using the hug framework you'll use the following concepts:</source>
          <target state="translated">hug 프레임 워크를 사용하여 API를 빌드 할 때 다음 개념을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="fc1dcc9006d3215e8d86472a32249b3b0d28c175" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;cli&lt;/code&gt; method decorator on coroutines, hug will schedule
the execution of the coroutine.</source>
          <target state="translated">코 루틴 에서 &lt;code&gt;get&lt;/code&gt; 및 &lt;code&gt;cli&lt;/code&gt; 메서드 데코레이터를 사용할 때 hug는 코 루틴 실행을 예약합니다.</target>
        </trans-unit>
        <trans-unit id="a8c632d98b9268376854cbc30eae096e0ad704ba" translate="yes" xml:space="preserve">
          <source>Which, once you are running the server as above, you can use this way:</source>
          <target state="translated">위와 같이 서버를 실행하면 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0a3f7e6138efc1ed8290339051ecc68996dd29f" translate="yes" xml:space="preserve">
          <source>Why hug?</source>
          <target state="translated">왜 안아?</target>
        </trans-unit>
        <trans-unit id="92066db15ca2736eb11343ec0aadc200ecf6f967" translate="yes" xml:space="preserve">
          <source>Writing tests for APIs written on-top of hug should be easy and intuitive.</source>
          <target state="translated">허그 위에 작성된 API에 대한 테스트 작성은 쉽고 직관적이어야합니다.</target>
        </trans-unit>
        <trans-unit id="69d5b5a97e867377eb7c90bf67d6835ea56e79a9" translate="yes" xml:space="preserve">
          <source>You can access the example in your browser at:
&lt;code&gt;localhost:8000/happy_birthday?name=hug&amp;amp;age=1&lt;/code&gt;. Then check out the
documentation for your API at &lt;code&gt;localhost:8000/documentation&lt;/code&gt;</source>
          <target state="translated">브라우저의 &lt;code&gt;localhost:8000/happy_birthday?name=hug&amp;amp;age=1&lt;/code&gt; 에서 예제에 액세스 할 수 있습니다 . 그런 다음 &lt;code&gt;localhost:8000/documentation&lt;/code&gt; 에서 API에 대한 문서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="c975556850a95fbf44c5d623233058643734a205" translate="yes" xml:space="preserve">
          <source>You can also easily add any Falcon style middleware using:</source>
          <target state="translated">다음을 사용하여 Falcon 스타일 미들웨어를 쉽게 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a98264703b814e298ce686a7fef9cd2bd9476746" translate="yes" xml:space="preserve">
          <source>You can also log into a Docker container that you can consider your work space. This workspace has Python and Pip installed so you can use those tools within Docker. If you need to test the CLI interface, for example, you would use this.</source>
          <target state="translated">작업 공간을 고려할 수있는 Docker 컨테이너에 로그인 할 수도 있습니다. 이 작업 공간에는 Python 및 Pip이 설치되어 있으므로 Docker 내에서 이러한 도구를 사용할 수 있습니다. 예를 들어 CLI 인터페이스를 테스트해야하는 경우이를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="acbfd6cceacd1855a44b41caf026e84b2d619740" translate="yes" xml:space="preserve">
          <source>You can use this &lt;code&gt;Response&lt;/code&gt; object for test assertions (check
out &lt;a href=&quot;examples/test_happy_birthday.py&quot;&gt;&lt;code&gt;test_happy_birthday.py&lt;/code&gt;&lt;/a&gt; ):</source>
          <target state="translated">이 &lt;code&gt;Response&lt;/code&gt; 객체를 테스트 어설 션에 사용할 수 있습니다 ( &lt;a href=&quot;examples/test_happy_birthday.py&quot;&gt; &lt;code&gt;test_happy_birthday.py&lt;/code&gt; &lt;/a&gt; 확인 ).</target>
        </trans-unit>
        <trans-unit id="68863bd3822201be0e105f9d6f13a036936a9dbe" translate="yes" xml:space="preserve">
          <source>as shown, you can easily change the output format for both an entire API as well as an individual API call</source>
          <target state="translated">표시된대로 전체 API와 개별 API 호출 모두에 대한 출력 형식을 쉽게 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5260dfd635468aad848584daf1e1051cea7a8706" translate="yes" xml:space="preserve">
          <source>hug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development.</source>
          <target state="translated">hug는 Python 기반 API를 가능한 한 간단하게 개발하는 것을 목표로합니다. 결과적으로 Python API 개발을 대폭 단순화합니다.</target>
        </trans-unit>
        <trans-unit id="ccbdd588925c256b0089f80475f85b716a8765e4" translate="yes" xml:space="preserve">
          <source>hug enables you to organize large projects in any manner you see fit. You can import any module that contains hug decorated functions (request handling, directives, type handlers, etc) and extend your base API with that module.</source>
          <target state="translated">hug를 사용하면 적합한 방식으로 대규모 프로젝트를 구성 할 수 있습니다. 포옹 장식 함수 (요청 처리, 지시문, 유형 처리기 등)를 포함하는 모든 모듈을 가져오고 해당 모듈로 기본 API를 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6cf0c89c4034b80e5b63e10795426ce000eb1b2" translate="yes" xml:space="preserve">
          <source>hug exposes a &lt;code&gt;__hug_wsgi__&lt;/code&gt; magic method on every API module automatically. Running your hug based API on any standard wsgi server should be as simple as pointing it to &lt;code&gt;module_name&lt;/code&gt;: &lt;code&gt;__hug_wsgi__&lt;/code&gt;.</source>
          <target state="translated">hug는 모든 API 모듈에서 자동으로 &lt;code&gt;__hug_wsgi__&lt;/code&gt; 매직 메소드를 노출합니다 . 표준 wsgi 서버에서 hug 기반 API를 실행하는 것은 &lt;code&gt;module_name&lt;/code&gt; : &lt;code&gt;__hug_wsgi__&lt;/code&gt; 를 가리키는 것만 큼 간단해야합니다 .</target>
        </trans-unit>
        <trans-unit id="63294d52f42102fddab47d3be28869d5d978e85a" translate="yes" xml:space="preserve">
          <source>hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base.
If you find or encounter any potential security issues, please let us know right away so we can resolve them.</source>
          <target state="translated">포옹은 보안과 품질을 중요하게 생각합니다. 이것이 우리가 철저하게 테스트 된 구성 요소에만 의존하고 정적 분석 도구 (예 : 적기 및 안전)를 사용하여 코드 기반의 보안을 확인하는 이유입니다. 잠재적 인 보안 문제를 발견하거나 발생하는 경우 즉시 알려 주시면 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="840c736b58826c43bb285b4729a6389c2a271f7e" translate="yes" xml:space="preserve">
          <source>hug uses the structure of the function you decorate to automatically generate documentation for users of your API. hug always passes a request, response, and api_version variable to your function if they are defined params in your function definition.</source>
          <target state="translated">hug는 꾸미는 함수의 구조를 사용하여 API 사용자를위한 문서를 자동으로 생성합니다. hug는 함수 정의에 매개 변수가 정의 된 경우 항상 요청, 응답 및 api_version 변수를 함수에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="4dba083e9006e12eb8972a15afb1acc690437b00" translate="yes" xml:space="preserve">
          <source>hug's &lt;code&gt;http&lt;/code&gt; method decorators don't modify your original functions. This makes testing hug APIs as simple as testing any other Python functions. Additionally, this means interacting with your API functions in other Python code is as straight forward as calling Python only API functions. hug makes it easy to test the full Python stack of your API by using the &lt;code&gt;hug.test&lt;/code&gt; module:</source>
          <target state="translated">hug의 &lt;code&gt;http&lt;/code&gt; 메소드 데코레이터는 원래 기능을 수정하지 않습니다. 이렇게하면 다른 Python 함수를 테스트하는 것만 큼 간단하게 hug API를 테스트 할 수 있습니다. 또한 이는 다른 Python 코드에서 API 함수와 상호 작용하는 것이 Python 전용 API 함수를 호출하는 것만 큼 간단 함을 의미합니다. hug를 사용하면 &lt;code&gt;hug.test&lt;/code&gt; 모듈 을 사용하여 API의 전체 Python 스택을 쉽게 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1ca4d71412d197d55f7225c9894b598beacb582" translate="yes" xml:space="preserve">
          <source>hug's Design Objectives:</source>
          <target state="translated">포옹의 디자인 목표 :</target>
        </trans-unit>
        <trans-unit id="6415c2d844d4e6ce1c534ee71f1d8a7e411903ea" translate="yes" xml:space="preserve">
          <source>~Timothy Crosley</source>
          <target state="translated">~ 티모시 크로 슬리</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
