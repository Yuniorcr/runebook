<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/farasapy/">
    <body>
      <group id="farasapy">
        <trans-unit id="9104cc4f21244f000af98fefc328fee6416aa4d6" translate="yes" xml:space="preserve">
          <source>A Python Wrapper for the well Farasa toolkit</source>
          <target state="translated">Well Farasa 툴킷을위한 Python Wrapper</target>
        </trans-unit>
        <trans-unit id="90536d46ca0c162aa49dd2c3fd4bdefa6521e32a" translate="yes" xml:space="preserve">
          <source>A repository by one of the toolkit authors containing WikiNews corpus: &lt;a href=&quot;https://github.com/kdarwish/Farasa&quot;&gt;https://github.com/kdarwish/Farasa&lt;/a&gt;</source>
          <target state="translated">WikiNews 코퍼스를 포함하는 툴킷 작성자 중 한 사람의 저장소 : &lt;a href=&quot;https://github.com/kdarwish/Farasa&quot;&gt;https://github.com/kdarwish/Farasa&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2126ea2fc8997cc6868581374f02e7ae216e6a6a" translate="yes" xml:space="preserve">
          <source>AN IMPORTANT REMARK</source>
          <target state="translated">중요한 말</target>
        </trans-unit>
        <trans-unit id="64afdda10ab6d82d241e9bd300d7e245407161be" translate="yes" xml:space="preserve">
          <source>An Overview</source>
          <target state="translated">개요</target>
        </trans-unit>
        <trans-unit id="e65a47032099c72cdf6b0ac9d65205be2ec45f62" translate="yes" xml:space="preserve">
          <source>An interactive Google colab code of the library can be reached from here [https://colab.research.google.com/drive/1xjzYwmfAszNzfR6Z2lSQi3nKYcjarXAW?usp=sharing].</source>
          <target state="translated">라이브러리의 대화 형 Google colab 코드는 여기 [https://colab.research.google.com/drive/1xjzYwmfAszNzfR6Z2lSQi3nKYcjarXAW?usp=sharing]에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8e5bf9af81b0fb8ac8ea274d8cd550554fc0443" translate="yes" xml:space="preserve">
          <source>As Pyhton is a general purpose language and so popular for many NLP tasks, an automation to these calls to the toolkit from the code would be convenient. This is where this wrapper fits.</source>
          <target state="translated">Pyhton은 범용 언어이고 많은 NLP 작업에 널리 사용되므로 코드에서 툴킷에 대한 이러한 호출을 자동화하는 것이 편리합니다. 이 래퍼가 맞는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="982d5a73469ace67d9bb8ac42b0697256070bb9a" translate="yes" xml:space="preserve">
          <source>Contribution</source>
          <target state="translated">기부</target>
        </trans-unit>
        <trans-unit id="2fd1d255b6d4ce57f37e4b2a9a887e5fd84516f3" translate="yes" xml:space="preserve">
          <source>Diacritization.</source>
          <target state="translated">Diacritization.</target>
        </trans-unit>
        <trans-unit id="4c4a2e80cc873135b3d277a22b6e85110c509731" translate="yes" xml:space="preserve">
          <source>Disclaimer</source>
          <target state="translated">부인 성명</target>
        </trans-unit>
        <trans-unit id="4cc5663ad94aa1878ea4d312f3fb8f17fb6821be" translate="yes" xml:space="preserve">
          <source>Farasa is  an Arabic NLP toolkit serving the following tasks:</source>
          <target state="translated">Farasa는 다음 작업을 수행하는 아랍어 NLP 툴킷입니다.</target>
        </trans-unit>
        <trans-unit id="bf9d00e46ceb405460cea79cac587155650f134f" translate="yes" xml:space="preserve">
          <source>Farasapy wraps and maintains all the toolkit's APIs in different classes where each class is in separate file. You need to import your class of interest from its file as follows:</source>
          <target state="translated">Farasapy는 각 클래스가 별도의 파일에있는 여러 클래스에서 모든 툴킷의 API를 래핑하고 유지합니다. 다음과 같이 파일에서 관심있는 클래스를 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="a56a6cc1539e76454e3315b13990d6e6ba243e06" translate="yes" xml:space="preserve">
          <source>For best pracrices, use the &lt;strong&gt;INTERACTIVE&lt;/strong&gt; mode where the input text is small and you need to do the task multiple times. However, The &lt;strong&gt;STANDALONE&lt;/strong&gt; mode is the best for large input texts where the task is expected to be done only once.</source>
          <target state="translated">최고의 pracrices를 들어, 사용 &lt;strong&gt;INTERACTIVE&lt;/strong&gt; 입력 텍스트가 작은 모드 당신은 작업을 여러 번 할 필요가있다. 그러나 &lt;strong&gt;STANDALONE&lt;/strong&gt; 모드는 작업이 한 번만 수행 될 것으로 예상되는 큰 입력 텍스트에 가장 적합합니다.</target>
        </trans-unit>
        <trans-unit id="dd45fd3f2e347de26d6cbb92c276978c2dd03be8" translate="yes" xml:space="preserve">
          <source>How to use</source>
          <target state="translated">사용하는 방법</target>
        </trans-unit>
        <trans-unit id="d90534bc839a0c61e91fa9a8ee08acd78067c062" translate="yes" xml:space="preserve">
          <source>In interactive mode, the object will run the binary once instanciated. It, then, will feed the text to the binary interactively and capture the output on each input. However, the user should be careful not to put large lines as the output, just like in shells, might not be as expected. It is a good practice to &lt;em&gt;terminate&lt;/em&gt; by &lt;code&gt;my_obj.terminate()&lt;/code&gt; these kinds of objects once they are not needed to avoid any unexpected behaviour in your code.</source>
          <target state="translated">대화 형 모드에서 개체는 일단 인스턴스화되면 바이너리를 실행합니다. 그런 다음 텍스트를 대화식으로 바이너리에 공급하고 각 입력에 대한 출력을 캡처합니다. 그러나 사용자는 쉘에서와 같이 출력이 예상과 다를 수 있으므로 큰 줄을 넣지 않도록주의해야합니다. 그것은 좋은 연습입니다 &lt;em&gt;종료&lt;/em&gt; 에 의해 &lt;code&gt;my_obj.terminate()&lt;/code&gt; 그들이 코드에서 예기치 않은 동작을 방지하기 위해 필요하지되면 객체의 이러한 종류.</target>
        </trans-unit>
        <trans-unit id="823a7e3fd6373bfddd2ffbfcd8f134d12c675aa6" translate="yes" xml:space="preserve">
          <source>In standalone mode, the instantiated object will call the binary each time it performs its task. It will put the input text in a temporary file, execute the binary with this temporary file, and finally extract the output from another temporary file. These temprary files are garbache collected once the task ends. Be careful that some binaries, &lt;em&gt;like the diacritizer&lt;/em&gt;, might take very long time to start. Hence, this option is prefered when you have long text and you want to do it only once.</source>
          <target state="translated">독립 실행 형 모드에서 인스턴스화 된 개체는 작업을 수행 할 때마다 바이너리를 호출합니다. 입력 텍스트를 임시 파일에 넣고이 임시 파일로 바이너리를 실행 한 다음 마지막으로 다른 임시 파일에서 출력을 추출합니다. 이러한 임시 파일은 작업이 끝나면 가비 치 수집됩니다. &lt;em&gt;diacritizer와 같은&lt;/em&gt; 일부 바이너리 &lt;em&gt;는&lt;/em&gt; 는 시작하는 데 시간이 오래 걸릴 수 있습니다. 따라서이 옵션은 긴 텍스트가 있고 한 번만 수행하려는 경우 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="af3758608388b05871589b2b19e12008ace4a0d4" translate="yes" xml:space="preserve">
          <source>Interactive Mode</source>
          <target state="translated">대화식 모드</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">소개</target>
        </trans-unit>
        <trans-unit id="5e91e640a6e9cebeca24030dfad07ee542ecc0a8" translate="yes" xml:space="preserve">
          <source>Named Entity Recgonition (NER).</source>
          <target state="translated">NER (Named Entity Recgonition).</target>
        </trans-unit>
        <trans-unit id="6873b922a4e536494fc7645050aabf96e5589149" translate="yes" xml:space="preserve">
          <source>Now, If you are using the library for the first time, the library needs to download farasa toolkit binareis first. You do not need to worry about anythink. The library, whenever you instantiate an object of any of its classes, will first check for the binaries, download them if they are not existed. This is an example of instantiating an object from &lt;code&gt;FarasaStemmer&lt;/code&gt; for the first use of the library.</source>
          <target state="translated">이제 라이브러리를 처음 사용하는 경우 라이브러리는 먼저 farasa 툴킷 binareis를 다운로드해야합니다. 당신은 어떤 생각에 대해 걱정할 필요가 없습니다. 라이브러리는 클래스의 객체를 인스턴스화 할 때마다 먼저 바이너리를 확인하고 존재하지 않는 경우 다운로드합니다. 이것은 &lt;code&gt;FarasaStemmer&lt;/code&gt; 에서 개체를 인스턴스화하는 예입니다. 라이브러리를 처음 사용하기 위해 .</target>
        </trans-unit>
        <trans-unit id="9f517cfd8596608bf3ebf3978c42d074209d8f3a" translate="yes" xml:space="preserve">
          <source>Part Of Speech tagging (POS tagging).</source>
          <target state="translated">품사 태깅 (POS 태깅).</target>
        </trans-unit>
        <trans-unit id="290a9f3174e421ccafe45fa741a0d7dc300669d9" translate="yes" xml:space="preserve">
          <source>Segmentation.</source>
          <target state="translated">분할.</target>
        </trans-unit>
        <trans-unit id="4e9f5e53236f87b984b6c5f5c4ebf34cf12a0525" translate="yes" xml:space="preserve">
          <source>Some binaries are computionally HEAVY!</source>
          <target state="translated">일부 바이너리는 계산적으로 무겁습니다!</target>
        </trans-unit>
        <trans-unit id="c35f663a4d412bd12477d561815bbbbfe3df6276" translate="yes" xml:space="preserve">
          <source>Standalone Mode</source>
          <target state="translated">독립형 모드</target>
        </trans-unit>
        <trans-unit id="ed490a6db03f406c3c2253d2e71a53e082131d70" translate="yes" xml:space="preserve">
          <source>Stemming.</source>
          <target state="translated">어간.</target>
        </trans-unit>
        <trans-unit id="9d22b24463f2b7e050a7de4a58d0cc4b507e094e" translate="yes" xml:space="preserve">
          <source>Table of Content</source>
          <target state="translated">내용의 테이블</target>
        </trans-unit>
        <trans-unit id="3d7743dc3dfada46528c11706aee733b8ef6ceb3" translate="yes" xml:space="preserve">
          <source>The credit of desegmentation code goes for @Wissam Antoun [https://github.com/WissamAntoun/Farasa_Desegmenter] in his repository [https://github.com/WissamAntoun/Farasa_Desegmenter].</source>
          <target state="translated">desegmentation 코드의 크레딧은 그의 저장소 [https://github.com/WissamAntoun/Farasa_Desegmenter]의 @Wissam Antoun [https://github.com/WissamAntoun/Farasa_Desegmenter]에게 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="7fa09cf74496d31eac1bac08b43b137a3ef29359" translate="yes" xml:space="preserve">
          <source>The following is an example on the segmentation API that is running &lt;em&gt;interactively&lt;/em&gt;.</source>
          <target state="translated">다음은 &lt;em&gt;대화 형&lt;/em&gt; 으로 실행되는 세그멘테이션 API의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="422741ec238dc50c1e695f476e349885d0c11ea2" translate="yes" xml:space="preserve">
          <source>The library, as it is a warpper for Java jars, requires that &lt;strong&gt;Java is installed in your system&lt;/strong&gt; and is &lt;strong&gt;in your PATH&lt;/strong&gt;. It is, also, not recommended to have a version below Java 1.7.</source>
          <target state="translated">이 자바 단지에 대한 warpper이기 때문에 라이브러리는 것을 요구 &lt;strong&gt;자바가 시스템에 설치되어&lt;/strong&gt; 이며 &lt;strong&gt;PATH에&lt;/strong&gt; . 또한 Java 1.7 미만의 버전을 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="152bf6ded342c5febd2f5a57571ef9bd465e278d" translate="yes" xml:space="preserve">
          <source>The official site: &lt;a href=&quot;http://alt.qcri.org/farasa/&quot;&gt;http://alt.qcri.org/farasa/&lt;/a&gt;</source>
          <target state="translated">공식 사이트 : &lt;a href=&quot;http://alt.qcri.org/farasa/&quot;&gt;http://alt.qcri.org/farasa/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15b6c72510ea53db06ff6eb956fda3c8e6211808" translate="yes" xml:space="preserve">
          <source>The toolkit is built and compiled in Java. Developers who want to use it without using this library may call the binaries directly from their code.</source>
          <target state="translated">툴킷은 Java로 빌드되고 컴파일됩니다. 이 라이브러리를 사용하지 않고 사용하려는 개발자는 코드에서 직접 바이너리를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="490c5510b85af64eef9ba982b3dba45fd0e9c6b5" translate="yes" xml:space="preserve">
          <source>This is a Pyhton API wrapper for &lt;a href=&quot;http://qatsdemo.cloudapp.net/farasa/&quot;&gt;farasa&lt;/a&gt; [&lt;a href=&quot;http://qatsdemo.cloudapp.net/farasa/&quot;&gt;http://qatsdemo.cloudapp.net/farasa/&lt;/a&gt;] toolkit. Although this work is licsenced under MIT, the original work(the toolkit) is &lt;strong&gt;strictly premitted for research purposes only&lt;/strong&gt;. For any commercial uses, please contact the toolkit creators[http://qatsdemo.cloudapp.net/farasa/].</source>
          <target state="translated">이것은 &lt;a href=&quot;http://qatsdemo.cloudapp.net/farasa/&quot;&gt;farasa&lt;/a&gt; [ &lt;a href=&quot;http://qatsdemo.cloudapp.net/farasa/&quot;&gt;http://qatsdemo.cloudapp.net/farasa/&lt;/a&gt; ] 툴킷 용 Pyhton API 래퍼입니다 . 이 작업은 MIT에서 라이센스를 받았지만 원래 작업 (툴킷)은 &lt;strong&gt;연구 목적으로 만 엄격하게 허용됩니다&lt;/strong&gt; . 상업적 용도로 사용하려면 툴킷 작성자 [http://qatsdemo.cloudapp.net/farasa/]에게 문의하십시오.</target>
        </trans-unit>
        <trans-unit id="8c6bf513fd858fe0689c7b7ab972222fb9e5065e" translate="yes" xml:space="preserve">
          <source>To work on &lt;strong&gt;interactive mode&lt;/strong&gt;, you just need to pass &lt;code&gt;interactive=True&lt;/code&gt; option to your object constructor.</source>
          <target state="translated">&lt;strong&gt;대화 형 모드&lt;/strong&gt; 에서 작업하려면 &lt;code&gt;interactive=True&lt;/code&gt; 옵션을 개체 생성자 에 전달하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="f0600155dfbc83f97a9acc6e4e9398c6bf1e73d2" translate="yes" xml:space="preserve">
          <source>Useful URLs</source>
          <target state="translated">유용한 URL</target>
        </trans-unit>
        <trans-unit id="088320c7af2ae269ed13604edbe5734bf86ff743" translate="yes" xml:space="preserve">
          <source>Want to cite?</source>
          <target state="translated">인용 하시겠습니까?</target>
        </trans-unit>
        <trans-unit id="26ef503cf6fc3859265bdc4041396f1ff72616a6" translate="yes" xml:space="preserve">
          <source>You can find the list of publications to site from here: &lt;a href=&quot;http://qatsdemo.cloudapp.net/farasa/&quot;&gt;http://qatsdemo.cloudapp.net/farasa/&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://qatsdemo.cloudapp.net/farasa/&quot;&gt;http://qatsdemo.cloudapp.net/farasa/&lt;/a&gt; 에서 사이트에 대한 간행물 목록을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="522379b176a11dd46dae74b885df1db2136a260c" translate="yes" xml:space="preserve">
          <source>You may notice that the last line of object instantiation states that the object is instantiated in &lt;strong&gt;STANDALONE&lt;/strong&gt; mode. Farasapy, like the toolkit binaries themself, can run in two different modes: &lt;strong&gt;Interactive&lt;/strong&gt; and &lt;strong&gt;Standalone&lt;/strong&gt;.</source>
          <target state="translated">개체 인스턴스화의 마지막 줄에 개체가 &lt;strong&gt;STANDALONE&lt;/strong&gt; 모드 에서 인스턴스화되었음을 알 수 있습니다 . 툴킷 바이너리와 마찬가지로 Farasapy는 &lt;strong&gt;Interactive&lt;/strong&gt; 및 &lt;strong&gt;Standalone의&lt;/strong&gt; 두 가지 모드로 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6cb86b213852c717347545645b706d288571ca2a" translate="yes" xml:space="preserve">
          <source>farasa from GitHub topics: &lt;a href=&quot;https://github.com/topics/farasa&quot;&gt;https://github.com/topics/farasa&lt;/a&gt;</source>
          <target state="translated">GitHub 주제의 farasa : &lt;a href=&quot;https://github.com/topics/farasa&quot;&gt;https://github.com/topics/farasa&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="45fc74ac338a66e466499ded3353bf68193237ce" translate="yes" xml:space="preserve">
          <source>let us &lt;em&gt;stem&lt;/em&gt; the following example:</source>
          <target state="translated">우리가하자 &lt;em&gt;줄기&lt;/em&gt; 다음 예제를 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
