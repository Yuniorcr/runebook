<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/django-rest-knox/">
    <body>
      <group id="django-rest-knox">
        <trans-unit id="49a15d89d9ca10910a90e39df6bbe61f9473856c" translate="yes" xml:space="preserve">
          <source>Another option is to use &lt;code&gt;mkdocs.sh&lt;/code&gt; in this repository.
It will run mkdocs in a &lt;a href=&quot;https://www.docker.com/&quot;&gt;docker&lt;/a&gt; container.</source>
          <target state="translated">또 다른 옵션은 이 저장소에서 &lt;code&gt;mkdocs.sh&lt;/code&gt; 를 사용하는 것 입니다. &lt;a href=&quot;https://www.docker.com/&quot;&gt;도커&lt;/a&gt; 컨테이너 에서 mkdocs를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="7e27996df069dbe217d7dc085431f0c3487ce441" translate="yes" xml:space="preserve">
          <source>Authentication Module for django rest auth</source>
          <target state="translated">장고 나머지 인증을위한 인증 모듈</target>
        </trans-unit>
        <trans-unit id="69f017e7d4b9db19f546ed64f6eed485b7184074" translate="yes" xml:space="preserve">
          <source>Authentication for django rest framework</source>
          <target state="translated">장고 레스트 프레임 워크 인증</target>
        </trans-unit>
        <trans-unit id="924d60a22c1416a685b86711eb36542a3e75d65a" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;https://www.mkdocs.org/&quot;&gt;Mkdocs documentation&lt;/a&gt; for more.</source>
          <target state="translated">자세한 내용 은 &lt;a href=&quot;https://www.mkdocs.org/&quot;&gt;Mkdocs 문서&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0a69fbf611d6d75f78754d8cdbb3f7e7f720f63" translate="yes" xml:space="preserve">
          <source>DRF tokens are limited to one per user. This does not facilitate
securely signing in from multiple devices, as the token is shared.
It also requires &lt;em&gt;all&lt;/em&gt; devices to be logged out if a server-side
logout is required (i.e. the token is deleted).</source>
          <target state="translated">DRF 토큰은 사용자 당 하나로 제한됩니다. 토큰이 공유되므로 여러 장치에서 안전하게 로그인 할 수 없습니다. 또한 서버 측 로그 아웃이 필요한 경우 (즉, 토큰이 삭제 된 경우) &lt;em&gt;모든&lt;/em&gt; 장치를 로그 아웃해야합니다.</target>
        </trans-unit>
        <trans-unit id="13a56fca9d4de55caf7d8674667006a4a083f670" translate="yes" xml:space="preserve">
          <source>DRF tokens are stored unencrypted in the database. This would allow
an attacker unrestricted access to an account with a token if the
database were compromised.</source>
          <target state="translated">DRF 토큰은 암호화되지 않은 상태로 데이터베이스에 저장됩니다. 이렇게하면 데이터베이스가 손상된 경우 공격자가 토큰이있는 계정에 제한없이 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59870648eea5e3a78bc8ee090921df5d9721b182" translate="yes" xml:space="preserve">
          <source>DRF tokens track their creation time, but have no inbuilt mechanism
for tokens expiring. Knox tokens can have an expiry configured in
the app settings (default is 10 hours.)</source>
          <target state="translated">DRF 토큰은 생성 시간을 추적하지만 토큰 만료에 대한 내장 메커니즘이 없습니다. Knox 토큰은 앱 설정에서 구성된 만료일 수 있습니다 (기본값은 10 시간).</target>
        </trans-unit>
        <trans-unit id="c1a5c1a2e9b20d35fce8bad714c6ebf88e39c76e" translate="yes" xml:space="preserve">
          <source>If you need to debug a test locally and if you have &lt;a href=&quot;https://www.docker.com/&quot;&gt;docker&lt;/a&gt; installed:</source>
          <target state="translated">로컬에서 테스트를 디버그해야하고 &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker가&lt;/a&gt; 설치된 경우 :</target>
        </trans-unit>
        <trans-unit id="0b4b2c7f565a2d0fa7848610f6b38bf5e3d35655" translate="yes" xml:space="preserve">
          <source>Knox also provides an option for a logged in client to remove &lt;em&gt;all&lt;/em&gt;
tokens that the server has - forcing all clients to re-authenticate.</source>
          <target state="translated">Knox는 또한 로그인 된 클라이언트가 서버에있는 &lt;em&gt;모든&lt;/em&gt; 토큰 을 제거하는 옵션을 제공하여 모든 클라이언트가 다시 인증하도록합니다.</target>
        </trans-unit>
        <trans-unit id="5de729b5d1fa65eca4d3898144c2185ea62e1426" translate="yes" xml:space="preserve">
          <source>Knox authentication is token based, similar to the &lt;code&gt;TokenAuthentication&lt;/code&gt;
built in to DRF. However, it overcomes some problems present in the
default implementation:</source>
          <target state="translated">Knox 인증은 DRF에 내장 된 &lt;code&gt;TokenAuthentication&lt;/code&gt; 과 유사한 토큰 기반 입니다. 그러나 기본 구현에 존재하는 몇 가지 문제를 극복합니다.</target>
        </trans-unit>
        <trans-unit id="33c22b07aa2a8a867ea9bc48b2484ce4a368dbaa" translate="yes" xml:space="preserve">
          <source>Knox provides easy to use authentication for &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST
Framework&lt;/a&gt; The aim is to allow
for common patterns in applications that are REST based, with little
extra effort; and to ensure that connections remain secure.</source>
          <target state="translated">Knox는 &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST 프레임 워크&lt;/a&gt; 에 사용하기 쉬운 인증을 제공합니다 . 목표는 약간의 추가 노력으로 REST 기반 애플리케이션에서 공통 패턴을 허용하는 것입니다. 연결이 안전하게 유지되도록합니다.</target>
        </trans-unit>
        <trans-unit id="7e1489b8a6ab7ab33000631e17c4b07195d2735e" translate="yes" xml:space="preserve">
          <source>Knox provides one token per call to the login view - allowing each
client to have its own token which is deleted on the server side
when the client logs out.</source>
          <target state="translated">Knox는 로그인 뷰에 대한 호출 당 하나의 토큰을 제공하므로 각 클라이언트는 클라이언트가 로그 아웃 할 때 서버 측에서 삭제되는 자체 토큰을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="697727de6cd806715f01a6f77556f3f6a20a6731" translate="yes" xml:space="preserve">
          <source>Knox tokens are only stored in an encrypted form. Even if the
database were somehow stolen, an attacker would not be able to log
in with the stolen credentials.</source>
          <target state="translated">Knox 토큰은 암호화 된 형식으로 만 저장됩니다. 데이터베이스가 도난 당하더라도 공격자는 도난당한 자격 증명으로 로그인 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e9e5081b187cbafc8863c46274d33ef58ef484fe" translate="yes" xml:space="preserve">
          <source>More information can be found in the
&lt;a href=&quot;http://james1345.github.io/django-rest-knox/&quot;&gt;Documentation&lt;/a&gt;</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;http://james1345.github.io/django-rest-knox/&quot;&gt;문서&lt;/a&gt; 에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f4b843bbf34fe87d77d72378ed22335fda4ad6e" translate="yes" xml:space="preserve">
          <source>Our documentation is generated by &lt;a href=&quot;https://www.mkdocs.org&quot;&gt;Mkdocs&lt;/a&gt;.</source>
          <target state="translated">우리의 문서는 &lt;a href=&quot;https://www.mkdocs.org&quot;&gt;Mkdocs에&lt;/a&gt; 의해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="ad54f2283117a1002e7fee0d6cfee5db768c2c7c" translate="yes" xml:space="preserve">
          <source>Run the tests locally</source>
          <target state="translated">로컬에서 테스트 실행</target>
        </trans-unit>
        <trans-unit id="30a4b3c4b3b0e0f335203e46bf8e7df83c54e171" translate="yes" xml:space="preserve">
          <source>Running the script without any params triggers the &lt;code&gt;serve&lt;/code&gt; command.
The server is exposed on localhost on port 8000.</source>
          <target state="translated">매개 변수없이 스크립트를 실행하면 &lt;code&gt;serve&lt;/code&gt; 명령이 트리거됩니다 . 서버는 포트 8000의 localhost에 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="09d89c4c6aa6686e2168636b23f13655bb831f80" translate="yes" xml:space="preserve">
          <source>To configure the port the &lt;code&gt;serve&lt;/code&gt; command will be exposing the server to, you
can use the following env var:</source>
          <target state="translated">&lt;code&gt;serve&lt;/code&gt; 명령이 서버를 노출 할 포트를 구성하려면 다음 env var를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ab85cc1f4f4c4fb501426bb84baf6f9ed93a9f2" translate="yes" xml:space="preserve">
          <source>Work on the documentation</source>
          <target state="translated">문서 작업</target>
        </trans-unit>
        <trans-unit id="44c5449d81a09387baf67bb0e548724aaf504477" translate="yes" xml:space="preserve">
          <source>You can also pass any &lt;code&gt;mkdocs&lt;/code&gt; command like this:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;mkdocs&lt;/code&gt; 명령을 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="379ed7d700c073f6bd55ccf2428c494f9ce438dd" translate="yes" xml:space="preserve">
          <source>You can refer to their documentation on how to install it locally.</source>
          <target state="translated">로컬로 설치하는 방법에 대한 설명서를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ba3a3c155b0ccc0450351644936ec3195009d86" translate="yes" xml:space="preserve">
          <source>You could also simply run regular &lt;code&gt;tox&lt;/code&gt; in the root folder as well, but that would make testing the matrix of
Python / Django versions a bit more tricky.</source>
          <target state="translated">또한 루트 폴더에서 일반 &lt;code&gt;tox&lt;/code&gt; 를 실행할 수도 있지만 Python / Django 버전의 매트릭스 테스트가 조금 더 까다로워집니다.</target>
        </trans-unit>
        <trans-unit id="ff03bc57880f9e0cf91b66cb8a4a153f526dfdd4" translate="yes" xml:space="preserve">
          <source>django-rest-knox</source>
          <target state="translated">장고-레스트-녹스</target>
        </trans-unit>
        <trans-unit id="3464cc19012675391ffaec43bbd4293bf27aaf14" translate="yes" xml:space="preserve">
          <source>simply run the &lt;code&gt;./docker-run-test.sh&lt;/code&gt; script and it will run the test suite in every Python /
Django versions.</source>
          <target state="translated">&lt;code&gt;./docker-run-test.sh&lt;/code&gt; 스크립트 를 실행하기 만하면 모든 Python / Django 버전에서 테스트 스위트가 실행됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
