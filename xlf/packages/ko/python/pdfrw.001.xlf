<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pdfrw/">
    <body>
      <group id="pdfrw">
        <trans-unit id="43d9996f2fe932f6bea4e9df9a457a73e374e1dc" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;PDFMiner is a suite of programs that help extracting and analyzing
text data of PDF documents. Unlike other PDF-related tools, it
allows to obtain the exact location of texts in a page, as well as
other extra information such as font information or ruled lines. It
includes a PDF converter that can transform PDF files into other
text formats (such as HTML). It has an extensible PDF parser that
can be used for other purposes instead of text analysis.&amp;rdquo;</source>
          <target state="translated">&amp;ldquo;PDFMiner is a suite of programs that help extracting and analyzing text data of PDF documents. Unlike other PDF-related tools, it allows to obtain the exact location of texts in a page, as well as other extra information such as font information or ruled lines. It includes a PDF converter that can transform PDF files into other text formats (such as HTML). It has an extensible PDF parser that can be used for other purposes instead of text analysis.&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="901d343aee21bbf1fdbed244a820c19d88bbdd56" translate="yes" xml:space="preserve">
          <source>, has big overlaps with pdftk&amp;rsquo;s -
except it is up to 10 times faster.</source>
          <target state="translated">, has big overlaps with pdftk&amp;rsquo;s - except it is up to 10 times faster.</target>
        </trans-unit>
        <trans-unit id="dc9fb865c33fd684d6f4eebcbc86fd41c4316f29" translate="yes" xml:space="preserve">
          <source>0.1 &amp;ndash; Released to PyPI in 2012.  Supports Python 2.5 - 2.7</source>
          <target state="translated">0.1 &amp;ndash; Released to PyPI in 2012. Supports Python 2.5 - 2.7</target>
        </trans-unit>
        <trans-unit id="b16bc735bd4cb59b3ca7cdb5a3ee76abaf14ae39" translate="yes" xml:space="preserve">
          <source>0.2 &amp;ndash; Released 21 June, 2015.  Supports Python 2.6, 2.7, 3.3, and 3.4.</source>
          <target state="translated">0.2 &amp;ndash; Released 21 June, 2015. Supports Python 2.6, 2.7, 3.3, and 3.4.</target>
        </trans-unit>
        <trans-unit id="dd24c0fcaf990e01d0049c9c8a0c80eea44d67a6" translate="yes" xml:space="preserve">
          <source>0.3 &amp;ndash; Released 19 October, 2016.</source>
          <target state="translated">0.3 &amp;ndash; Released 19 October, 2016.</target>
        </trans-unit>
        <trans-unit id="5266a45c1a981a46cf14a97b3fb730b016a0e8ab" translate="yes" xml:space="preserve">
          <source>0.4 &amp;ndash; Released 18 September, 2017</source>
          <target state="translated">0.4 &amp;ndash; Released 18 September, 2017</target>
        </trans-unit>
        <trans-unit id="b56c1e704ff8236567ee30e65463d2e174614b34" translate="yes" xml:space="preserve">
          <source>1&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction</source>
          <target state="translated">1&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction</target>
        </trans-unit>
        <trans-unit id="9b4d2855cea0ca146947bb42ca63df7b249296a4" translate="yes" xml:space="preserve">
          <source>2&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples</source>
          <target state="translated">2&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples</target>
        </trans-unit>
        <trans-unit id="27d4ea9ded52555c4b236aa8470597ca95029be1" translate="yes" xml:space="preserve">
          <source>2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;All examples</source>
          <target state="translated">2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;All examples</target>
        </trans-unit>
        <trans-unit id="1e2cc529a318e41b33ea96e83d36933473ccc8be" translate="yes" xml:space="preserve">
          <source>2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Notes on selected examples</source>
          <target state="translated">2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Notes on selected examples</target>
        </trans-unit>
        <trans-unit id="d7f3b761375d32eff95d55a7040cc1febf358e1c" translate="yes" xml:space="preserve">
          <source>2.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Reorganizing pages and placing them two-up</source>
          <target state="translated">2.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Reorganizing pages and placing them two-up</target>
        </trans-unit>
        <trans-unit id="914d6e2da29de99fd46b554e5c490bffe56dc0a6" translate="yes" xml:space="preserve">
          <source>2.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Adding or modifying metadata</source>
          <target state="translated">2.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Adding or modifying metadata</target>
        </trans-unit>
        <trans-unit id="9de6bc5e1fb158ea9a18bff428b5107588c23e17" translate="yes" xml:space="preserve">
          <source>2.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Rotating and doubling</source>
          <target state="translated">2.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Rotating and doubling</target>
        </trans-unit>
        <trans-unit id="934c6d995e13d251c00d1df61cd177eb8280526b" translate="yes" xml:space="preserve">
          <source>2.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Graphics stream parsing proof of concept</source>
          <target state="translated">2.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Graphics stream parsing proof of concept</target>
        </trans-unit>
        <trans-unit id="c6f135a7c6e0be860c84a6d3610b01184bee76c8" translate="yes" xml:space="preserve">
          <source>3&amp;nbsp;&amp;nbsp;&amp;nbsp;pdfrw philosophy</source>
          <target state="translated">3&amp;nbsp;&amp;nbsp;&amp;nbsp;pdfrw philosophy</target>
        </trans-unit>
        <trans-unit id="2628a0e3abfbaf2a4259ecd55fef6c15eb90c1ab" translate="yes" xml:space="preserve">
          <source>3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Core library</source>
          <target state="translated">3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Core library</target>
        </trans-unit>
        <trans-unit id="bc3383f9cc22b7853321267255df151721dee28c" translate="yes" xml:space="preserve">
          <source>3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples</source>
          <target state="translated">3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples</target>
        </trans-unit>
        <trans-unit id="92b7e9b1992ec2c404c0ad91a314931870acbb08" translate="yes" xml:space="preserve">
          <source>4&amp;nbsp;&amp;nbsp;&amp;nbsp;PDF files and Python</source>
          <target state="translated">4&amp;nbsp;&amp;nbsp;&amp;nbsp;PDF files and Python</target>
        </trans-unit>
        <trans-unit id="fc2bfb29399fb50593a9ee67aeecbc2185dabe0f" translate="yes" xml:space="preserve">
          <source>4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction</source>
          <target state="translated">4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction</target>
        </trans-unit>
        <trans-unit id="eeebd44ba9a307fc15d9b9dc7d21288e663ae3f7" translate="yes" xml:space="preserve">
          <source>4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Difficulties</source>
          <target state="translated">4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Difficulties</target>
        </trans-unit>
        <trans-unit id="f7a0079787b569dc498780142f12bbefc256e3f3" translate="yes" xml:space="preserve">
          <source>4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Usage Model</source>
          <target state="translated">4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Usage Model</target>
        </trans-unit>
        <trans-unit id="2259947c7a35667ba69c2fb37333cba969c8643c" translate="yes" xml:space="preserve">
          <source>4.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Reading PDFs</source>
          <target state="translated">4.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Reading PDFs</target>
        </trans-unit>
        <trans-unit id="75cd71af275439ec0ea611e2b04edc3ba457150c" translate="yes" xml:space="preserve">
          <source>4.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Writing PDFs</source>
          <target state="translated">4.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Writing PDFs</target>
        </trans-unit>
        <trans-unit id="ac2e12ad7b935c938a29d9e607d6d6eb11c25705" translate="yes" xml:space="preserve">
          <source>4.3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Manipulating PDFs in memory</source>
          <target state="translated">4.3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Manipulating PDFs in memory</target>
        </trans-unit>
        <trans-unit id="82b4bff715d882f0a01d0c887cdd164c0c13450c" translate="yes" xml:space="preserve">
          <source>4.3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Missing features</source>
          <target state="translated">4.3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Missing features</target>
        </trans-unit>
        <trans-unit id="01c31e7dc0b0efe0d1c058504ead37bff5b8d9ae" translate="yes" xml:space="preserve">
          <source>5&amp;nbsp;&amp;nbsp;&amp;nbsp;Library internals</source>
          <target state="translated">5&amp;nbsp;&amp;nbsp;&amp;nbsp;Library internals</target>
        </trans-unit>
        <trans-unit id="774c5c51483673889661d520650077a851721f38" translate="yes" xml:space="preserve">
          <source>5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction</source>
          <target state="translated">5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Introduction</target>
        </trans-unit>
        <trans-unit id="45e0be0a9f67cdef3ed8bba427c51cad31359ba6" translate="yes" xml:space="preserve">
          <source>5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;PDF object model support</source>
          <target state="translated">5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;PDF object model support</target>
        </trans-unit>
        <trans-unit id="9a1e2712ef7aa7c91ea1b9f8303546b7986d1b34" translate="yes" xml:space="preserve">
          <source>5.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Ordinary objects</source>
          <target state="translated">5.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Ordinary objects</target>
        </trans-unit>
        <trans-unit id="88d82845cd5126da111171f3a8d6c3463f365266" translate="yes" xml:space="preserve">
          <source>5.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Name objects</source>
          <target state="translated">5.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Name objects</target>
        </trans-unit>
        <trans-unit id="3df4173731fce4d990753bd733f04f0c0e1c6714" translate="yes" xml:space="preserve">
          <source>5.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;String objects</source>
          <target state="translated">5.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;String objects</target>
        </trans-unit>
        <trans-unit id="aabb92acf99092b4b55fe12db9219fa09fb1bd62" translate="yes" xml:space="preserve">
          <source>5.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Array objects</source>
          <target state="translated">5.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Array objects</target>
        </trans-unit>
        <trans-unit id="5242ac5cdab4f75b0fdf0831e64d9bbca8908bcd" translate="yes" xml:space="preserve">
          <source>5.2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Dict objects</source>
          <target state="translated">5.2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Dict objects</target>
        </trans-unit>
        <trans-unit id="498c8a47b0314a836a8308a3798fffd5978e70d9" translate="yes" xml:space="preserve">
          <source>5.2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Proxy objects</source>
          <target state="translated">5.2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Proxy objects</target>
        </trans-unit>
        <trans-unit id="90e8032c3fc8837edc69796494161b1c256939be" translate="yes" xml:space="preserve">
          <source>5.3&amp;nbsp;&amp;nbsp;&amp;nbsp;File reading, tokenization and parsing</source>
          <target state="translated">5.3&amp;nbsp;&amp;nbsp;&amp;nbsp;File reading, tokenization and parsing</target>
        </trans-unit>
        <trans-unit id="1bfc3a26891ec193ccf73144c0ce08860acbb1ce" translate="yes" xml:space="preserve">
          <source>5.4&amp;nbsp;&amp;nbsp;&amp;nbsp;File output</source>
          <target state="translated">5.4&amp;nbsp;&amp;nbsp;&amp;nbsp;File output</target>
        </trans-unit>
        <trans-unit id="1217e7a2341d26ec121105ec10bd219a90df4533" translate="yes" xml:space="preserve">
          <source>5.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Advanced features</source>
          <target state="translated">5.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Advanced features</target>
        </trans-unit>
        <trans-unit id="e2afccffd43cc0d3737a839715c7b069c1ee2a3f" translate="yes" xml:space="preserve">
          <source>5.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Miscellaneous</source>
          <target state="translated">5.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Miscellaneous</target>
        </trans-unit>
        <trans-unit id="175a4ad98b5173334968a4340886a020f6ad7f2e" translate="yes" xml:space="preserve">
          <source>6&amp;nbsp;&amp;nbsp;&amp;nbsp;Testing</source>
          <target state="translated">6&amp;nbsp;&amp;nbsp;&amp;nbsp;Testing</target>
        </trans-unit>
        <trans-unit id="043f238fb3c56e88476a4cfccd263c5be3361ca9" translate="yes" xml:space="preserve">
          <source>7&amp;nbsp;&amp;nbsp;&amp;nbsp;Other libraries</source>
          <target state="translated">7&amp;nbsp;&amp;nbsp;&amp;nbsp;Other libraries</target>
        </trans-unit>
        <trans-unit id="397cc549963f5571fee10d065e8ab1ea035ad4fa" translate="yes" xml:space="preserve">
          <source>7.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Pure Python</source>
          <target state="translated">7.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Pure Python</target>
        </trans-unit>
        <trans-unit id="093afea2e0fbe234e068b82beedef7f06364af21" translate="yes" xml:space="preserve">
          <source>7.2&amp;nbsp;&amp;nbsp;&amp;nbsp;non-pure-Python libraries</source>
          <target state="translated">7.2&amp;nbsp;&amp;nbsp;&amp;nbsp;non-pure-Python libraries</target>
        </trans-unit>
        <trans-unit id="a9184d79c22f68007eca6c976931add322e2d197" translate="yes" xml:space="preserve">
          <source>7.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Other tools</source>
          <target state="translated">7.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Other tools</target>
        </trans-unit>
        <trans-unit id="8f93fe96ab431b2304afbe57a048b7a3923990b5" translate="yes" xml:space="preserve">
          <source>8&amp;nbsp;&amp;nbsp;&amp;nbsp;Release information</source>
          <target state="translated">8&amp;nbsp;&amp;nbsp;&amp;nbsp;Release information</target>
        </trans-unit>
        <trans-unit id="de9ae389017440e208ea935b38f55f84b89680d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.cairographics.org/pycairo/&quot;&gt;pycairo&lt;/a&gt; can write PDF
files.</source>
          <target state="translated">&lt;a href=&quot;http://www.cairographics.org/pycairo/&quot;&gt;pycairo&lt;/a&gt; can write PDF files.</target>
        </trans-unit>
        <trans-unit id="1b18cb7474d2238fd53cbbbacd3b0109c8f2feb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.mupdf.com/&quot;&gt;MuPDF&lt;/a&gt; is a free top performance PDF, (Open)XPS, CBZ and EPUB rendering library
that also comes with some command line tools. One of those,</source>
          <target state="translated">&lt;a href=&quot;http://www.mupdf.com/&quot;&gt;MuPDF&lt;/a&gt; is a free top performance PDF, (Open)XPS, CBZ and EPUB rendering library that also comes with some command line tools. One of those,</target>
        </trans-unit>
        <trans-unit id="5fe8dc792e31ef8cc082c29cf8640fdec390d6e0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/4up.py&quot;&gt;4up.py&lt;/a&gt; will shrink pages down and place 4 of them on
each output page.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/4up.py&quot;&gt;4up.py&lt;/a&gt; will shrink pages down and place 4 of them on each output page.</target>
        </trans-unit>
        <trans-unit id="31324ed117f6693a59ebc24467716d3c0e662118" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/alter.py&quot;&gt;alter.py&lt;/a&gt; shows an example of modifying metadata, without
altering the structure of the PDF.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/alter.py&quot;&gt;alter.py&lt;/a&gt; shows an example of modifying metadata, without altering the structure of the PDF.</target>
        </trans-unit>
        <trans-unit id="564512241e173b567cee18e66430671ad84fd3f3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/booklet.py&quot;&gt;booklet.py&lt;/a&gt; shows an example of creating a 2-up output
suitable for printing and folding (e.g on tabloid size paper).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/booklet.py&quot;&gt;booklet.py&lt;/a&gt; shows an example of creating a 2-up output suitable for printing and folding (e.g on tabloid size paper).</target>
        </trans-unit>
        <trans-unit id="08a3686c089c30b34fab08794b7f8ca811e2cade" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/cat.py&quot;&gt;cat.py&lt;/a&gt; shows an example of concatenating multiple PDFs together.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/cat.py&quot;&gt;cat.py&lt;/a&gt; shows an example of concatenating multiple PDFs together.</target>
        </trans-unit>
        <trans-unit id="1d26f6adb9cb15c8bf78a56b2dddc5a50ef13159" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/extract.py&quot;&gt;extract.py&lt;/a&gt; will extract images and Form XObjects (embedded pages)
from existing PDFs to make them easier to use and refer to from
new PDFs (e.g. with reportlab or rst2pdf).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/extract.py&quot;&gt;extract.py&lt;/a&gt; will extract images and Form XObjects (embedded pages) from existing PDFs to make them easier to use and refer to from new PDFs (e.g. with reportlab or rst2pdf).</target>
        </trans-unit>
        <trans-unit id="229d2104026e524aa17b8539e8023408c60e22a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/poster.py&quot;&gt;poster.py&lt;/a&gt; increases the size of a PDF so it can be printed
as a poster.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/poster.py&quot;&gt;poster.py&lt;/a&gt; increases the size of a PDF so it can be printed as a poster.</target>
        </trans-unit>
        <trans-unit id="0a07312c1e12583060cd8ae410eb4df62969217b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/print_two.py&quot;&gt;print_two.py&lt;/a&gt; Allows creation of 8.5 X 5.5&amp;rdquo; booklets by slicing
8.5 X 11&amp;rdquo; paper apart after printing.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/print_two.py&quot;&gt;print_two.py&lt;/a&gt; Allows creation of 8.5 X 5.5&amp;rdquo; booklets by slicing 8.5 X 11&amp;rdquo; paper apart after printing.</target>
        </trans-unit>
        <trans-unit id="7eb2f065ff23ee135de7a20806f24d071919604f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/4up.py&quot;&gt;rl1/4up.py&lt;/a&gt; Another 4up example, using reportlab canvas for output.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/4up.py&quot;&gt;rl1/4up.py&lt;/a&gt; Another 4up example, using reportlab canvas for output.</target>
        </trans-unit>
        <trans-unit id="b1c9dc0d43a99ededb62f07138204b5800527c60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/booklet.py&quot;&gt;rl1/booklet.py&lt;/a&gt; Another booklet example, using reportlab canvas for
output.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/booklet.py&quot;&gt;rl1/booklet.py&lt;/a&gt; Another booklet example, using reportlab canvas for output.</target>
        </trans-unit>
        <trans-unit id="ec5739dd2f20a3ebf310eeada56a7f16308e0853" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/platypus_pdf_template.py&quot;&gt;rl1/platypus_pdf_template.py&lt;/a&gt; Another watermarking example, using
reportlab canvas and generated output for the document.  Contributed
by user asannes.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/platypus_pdf_template.py&quot;&gt;rl1/platypus_pdf_template.py&lt;/a&gt; Another watermarking example, using reportlab canvas and generated output for the document. Contributed by user asannes.</target>
        </trans-unit>
        <trans-unit id="58525431d8b2440b808b2009d019ceacaf289313" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/subset.py&quot;&gt;rl1/subset.py&lt;/a&gt; Another subsetting example, using reportlab canvas for
output.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/subset.py&quot;&gt;rl1/subset.py&lt;/a&gt; Another subsetting example, using reportlab canvas for output.</target>
        </trans-unit>
        <trans-unit id="fef8dd8ff1634b1813da65c9fdcc5ca1d06545b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl2/&quot;&gt;rl2&lt;/a&gt; Experimental code for parsing graphics.  Needs work.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl2/&quot;&gt;rl2&lt;/a&gt; Experimental code for parsing graphics. Needs work.</target>
        </trans-unit>
        <trans-unit id="f3942db1e5dcd00450036dd6217ae536fa9b8c11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rotate.py&quot;&gt;rotate.py&lt;/a&gt; Rotates all or selected pages in a PDF.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rotate.py&quot;&gt;rotate.py&lt;/a&gt; Rotates all or selected pages in a PDF.</target>
        </trans-unit>
        <trans-unit id="afacf94fc365f4429e86e1358f6eeab80f5a828b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/subset.py&quot;&gt;subset.py&lt;/a&gt; Creates a new PDF with only a subset of pages from the
original.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/subset.py&quot;&gt;subset.py&lt;/a&gt; Creates a new PDF with only a subset of pages from the original.</target>
        </trans-unit>
        <trans-unit id="84dd5a121d73473d1a6a12179a9358e229d087ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/subset_booklets.py&quot;&gt;subset_booklets.py&lt;/a&gt; shows an example of creating a full printable pdf
version in a more professional and pratical way ( take a look at
&lt;a href=&quot;http://www.wikihow.com/Bind-a-Book&quot;&gt;http://www.wikihow.com/Bind-a-Book&lt;/a&gt; )</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/subset_booklets.py&quot;&gt;subset_booklets.py&lt;/a&gt; shows an example of creating a full printable pdf version in a more professional and pratical way ( take a look at &lt;a href=&quot;http://www.wikihow.com/Bind-a-Book&quot;&gt;http://www.wikihow.com/Bind-a-Book&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="8ea8c6c1eee94c8288b5a5f46a66107b2d58c341" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/unspread.py&quot;&gt;unspread.py&lt;/a&gt; Takes a 2-up PDF, and splits out pages.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/unspread.py&quot;&gt;unspread.py&lt;/a&gt; Takes a 2-up PDF, and splits out pages.</target>
        </trans-unit>
        <trans-unit id="62106a9eb7c8c18ef193513524a81da1e8b61f08" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/watermark.py&quot;&gt;watermark.py&lt;/a&gt; Adds a watermark PDF image over or under all the pages
of a PDF.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/watermark.py&quot;&gt;watermark.py&lt;/a&gt; Adds a watermark PDF image over or under all the pages of a PDF.</target>
        </trans-unit>
        <trans-unit id="076434ae22851d0aba4d1c18dfa18ecf995328c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/buildxobj.py&quot;&gt;buildxobj.py&lt;/a&gt;
contains functions to build Form XObjects out of pages or rectangles on
pages.  These may be reused in new PDFs essentially as if they were images.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/buildxobj.py&quot;&gt;buildxobj.py&lt;/a&gt; contains functions to build Form XObjects out of pages or rectangles on pages. These may be reused in new PDFs essentially as if they were images.</target>
        </trans-unit>
        <trans-unit id="349e019098aadd71a7c41d66b5bdfffb2599dd8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/compress.py&quot;&gt;compress.py&lt;/a&gt; and &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/uncompress.py&quot;&gt;uncompress.py&lt;/a&gt;
contains compression and decompression functions. Very few filters are
currently supported, so an external tool like pdftk might be good if you
require the ability to decompress (or, for that matter, decrypt) PDF
files.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/compress.py&quot;&gt;compress.py&lt;/a&gt; and &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/uncompress.py&quot;&gt;uncompress.py&lt;/a&gt; contains compression and decompression functions. Very few filters are currently supported, so an external tool like pdftk might be good if you require the ability to decompress (or, for that matter, decrypt) PDF files.</target>
        </trans-unit>
        <trans-unit id="4f12294d49ca6b5c319b1640477469ff9b5761bf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/findobjs.py&quot;&gt;findobjs.py&lt;/a&gt; contains code that can find specific kinds of objects
inside a PDF file.  The extract.py example uses this module to create
a new PDF that places each image and Form XObject from a source PDF onto
its own page, e.g. for easy reuse with some of the other examples or
with reportlab.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/findobjs.py&quot;&gt;findobjs.py&lt;/a&gt; contains code that can find specific kinds of objects inside a PDF file. The extract.py example uses this module to create a new PDF that places each image and Form XObject from a source PDF onto its own page, e.g. for easy reuse with some of the other examples or with reportlab.</target>
        </trans-unit>
        <trans-unit id="5161ed3a8332da429141cbbfc7043a789fb493c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pagemerge.py&quot;&gt;pagemerge.py&lt;/a&gt; builds on the foundation laid by buildxobj.  It
contains classes to create a new page (or overlay an existing page)
using one or more rectangles from other pages.  There are examples
showing its use for watermarking, scaling, 4-up output, splitting
each page in 2, etc.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pagemerge.py&quot;&gt;pagemerge.py&lt;/a&gt; builds on the foundation laid by buildxobj. It contains classes to create a new page (or overlay an existing page) using one or more rectangles from other pages. There are examples showing its use for watermarking, scaling, 4-up output, splitting each page in 2, etc.</target>
        </trans-unit>
        <trans-unit id="9af96e4b036b396bd27c92c06a546ece132ffd11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pdfreader.py&quot;&gt;pdfreader.py&lt;/a&gt;
contains the PdfReader class, which can read a PDF file (or be passed a
file object or already read string) and parse it. It uses the PdfTokens
class in &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/tokens.py&quot;&gt;tokens.py&lt;/a&gt;  for low-level tokenization.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pdfreader.py&quot;&gt;pdfreader.py&lt;/a&gt; contains the PdfReader class, which can read a PDF file (or be passed a file object or already read string) and parse it. It uses the PdfTokens class in &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/tokens.py&quot;&gt;tokens.py&lt;/a&gt; for low-level tokenization.</target>
        </trans-unit>
        <trans-unit id="0a19363a16a022efa6a791d48615ac7031325a6e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pdfwriter.py&quot;&gt;pdfwriter.py&lt;/a&gt;
contains the PdfWriter class, which can create and output a PDF file.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pdfwriter.py&quot;&gt;pdfwriter.py&lt;/a&gt; contains the PdfWriter class, which can create and output a PDF file.</target>
        </trans-unit>
        <trans-unit id="10c033c6874b5f140de0cb3bd8a92a2a68206fb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/py23_diffs.py&quot;&gt;py23_diffs.py&lt;/a&gt; contains code to help manage the differences between
Python 2 and Python 3.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/py23_diffs.py&quot;&gt;py23_diffs.py&lt;/a&gt; contains code to help manage the differences between Python 2 and Python 3.</target>
        </trans-unit>
        <trans-unit id="8e23762051e2e4ed6fa7644157c30f3fcc6a1bf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/toreportlab.py&quot;&gt;toreportlab.py&lt;/a&gt;
provides the makerl function, which will translate pdfrw objects into a
format which can be used with &lt;a href=&quot;http://www.reportlab.org/&quot;&gt;reportlab&lt;/a&gt;.
It is normally used in conjunction with buildxobj, to be able to reuse
parts of existing PDFs when using reportlab.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/toreportlab.py&quot;&gt;toreportlab.py&lt;/a&gt; provides the makerl function, which will translate pdfrw objects into a format which can be used with &lt;a href=&quot;http://www.reportlab.org/&quot;&gt;reportlab&lt;/a&gt;. It is normally used in conjunction with buildxobj, to be able to reuse parts of existing PDFs when using reportlab.</target>
        </trans-unit>
        <trans-unit id="c4b50a8319e7dd593839fe05a973a84b37d64dc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/rk700/PyMuPDF&quot;&gt;PyMuPDF&lt;/a&gt; high performance rendering
of PDF, (Open)XPS, CBZ and EPUB</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rk700/PyMuPDF&quot;&gt;PyMuPDF&lt;/a&gt; high performance rendering of PDF, (Open)XPS, CBZ and EPUB</target>
        </trans-unit>
        <trans-unit id="4b672c0eb8f28b620e45477021838c1eb70dc4ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://launchpad.net/poppler-python/&quot;&gt;pyPoppler&lt;/a&gt; can read PDF
files.</source>
          <target state="translated">&lt;a href=&quot;https://launchpad.net/poppler-python/&quot;&gt;pyPoppler&lt;/a&gt; can read PDF files.</target>
        </trans-unit>
        <trans-unit id="75499c2209d2e68bf264f5af0174ee89ba6e84b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/&quot;&gt;pdftk&lt;/a&gt; is a wonderful command
line tool for basic PDF manipulation. It complements pdfrw extremely
well, supporting many operations such as decryption and decompression
that pdfrw cannot do.</source>
          <target state="translated">&lt;a href=&quot;https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/&quot;&gt;pdftk&lt;/a&gt; is a wonderful command line tool for basic PDF manipulation. It complements pdfrw extremely well, supporting many operations such as decryption and decompression that pdfrw cannot do.</target>
        </trans-unit>
        <trans-unit id="53bec87cf456bb677ed8b8dda5f6f809d122c5de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/&quot;&gt;pdftk&lt;/a&gt; is a wonderful command-line
tool that can convert your PDFs to remove encryption and compression.
However, in most cases, you can do a lot of useful work with PDFs
without actually removing compression, because only certain elements
inside PDFs are actually compressed.</source>
          <target state="translated">&lt;a href=&quot;https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/&quot;&gt;pdftk&lt;/a&gt; is a wonderful command-line tool that can convert your PDFs to remove encryption and compression. However, in most cases, you can do a lot of useful work with PDFs without actually removing compression, because only certain elements inside PDFs are actually compressed.</target>
        </trans-unit>
        <trans-unit id="92da7339efaf0dd3cd197e34ae21b796cb24066e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Contents streams&lt;/strong&gt; (which can be more streams of tokens)</source>
          <target state="translated">&lt;strong&gt;Contents streams&lt;/strong&gt; (which can be more streams of tokens)</target>
        </trans-unit>
        <trans-unit id="e774499045d8e4c6c743416c3189aeff99dd694a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;arrays&lt;/strong&gt; and</source>
          <target state="translated">&lt;strong&gt;arrays&lt;/strong&gt; and</target>
        </trans-unit>
        <trans-unit id="eb3fb3214ea884db2911d8dc9d494636f45236d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dictionaries&lt;/strong&gt; and</source>
          <target state="translated">&lt;strong&gt;dictionaries&lt;/strong&gt; and</target>
        </trans-unit>
        <trans-unit id="9208c991ba32786f23d74c34a556b9bb6df8efef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;lists of tokens&lt;/strong&gt;. Tokens can be combined to create higher-level
objects like</source>
          <target state="translated">&lt;strong&gt;lists of tokens&lt;/strong&gt;. Tokens can be combined to create higher-level objects like</target>
        </trans-unit>
        <trans-unit id="ea96a9b8227e8d57baf5c6b49c5ded6b6be33923" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pdfrw&lt;/strong&gt; currently consists of 19 modules organized into a main
package and one sub-package.</source>
          <target state="translated">&lt;strong&gt;pdfrw&lt;/strong&gt; currently consists of 19 modules organized into a main package and one sub-package.</target>
        </trans-unit>
        <trans-unit id="d090483871c1b45bd27f1d4f6c23ed9ece1bb7b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pdfrw&lt;/strong&gt; is a Python library and utility that reads and writes PDF files:</source>
          <target state="translated">&lt;strong&gt;pdfrw&lt;/strong&gt; is a Python library and utility that reads and writes PDF files:</target>
        </trans-unit>
        <trans-unit id="95ef1d45415c22d5fc7b028d27ba7fa5d8922e15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strings&lt;/strong&gt;. Most things are strings. These also often decompose
naturally into</source>
          <target state="translated">&lt;strong&gt;strings&lt;/strong&gt;. Most things are strings. These also often decompose naturally into</target>
        </trans-unit>
        <trans-unit id="369534f9f134440b58a1e3df9631ad0ac00338f8" translate="yes" xml:space="preserve">
          <source>A key concept supported by the library is the use of Form XObjects,
which allow easy embedding of pieces of one PDF into another.</source>
          <target state="translated">A key concept supported by the library is the use of Form XObjects, which allow easy embedding of pieces of one PDF into another.</target>
        </trans-unit>
        <trans-unit id="d88e636ce0270fad72e87e71c448e860f7ca048b" translate="yes" xml:space="preserve">
          <source>A printer with a fancy printer and/or a full-up copy of Acrobat can
easily turn your small PDF into a little booklet (for example, print 4
letter-sized pages on a single 11&amp;rdquo; x 17&amp;rdquo;).</source>
          <target state="translated">A printer with a fancy printer and/or a full-up copy of Acrobat can easily turn your small PDF into a little booklet (for example, print 4 letter-sized pages on a single 11&amp;rdquo; x 17&amp;rdquo;).</target>
        </trans-unit>
        <trans-unit id="6d8047486c0e1ce39bad4b863884a8a606c8f346" translate="yes" xml:space="preserve">
          <source>Addition of core support to the library is typically done carefully
and thoughtfully, so as not to clutter it up with too many special
cases.</source>
          <target state="translated">Addition of core support to the library is typically done carefully and thoughtfully, so as not to clutter it up with too many special cases.</target>
        </trans-unit>
        <trans-unit id="a14b16ce40e8dc236513464d9ea4a0f1be1e1e89" translate="yes" xml:space="preserve">
          <source>Also, there are no options for decryption yet.  If you have PDF files
that are encrypted or heavily compressed, you may find that using another
program like pdftk on them can make them readable by pdfrw.</source>
          <target state="translated">Also, there are no options for decryption yet. If you have PDF files that are encrypted or heavily compressed, you may find that using another program like pdftk on them can make them readable by pdfrw.</target>
        </trans-unit>
        <trans-unit id="bd0b3a1e07a0aedbcb9ba80d376d1866548f540b" translate="yes" xml:space="preserve">
          <source>An instance of the PdfReader class is an instance of a PdfDict &amp;ndash; the
trailer dictionary of the PDF file, to be exact.  It will have a private
attribute set on it that is named &amp;lsquo;pages&amp;rsquo; that is a list containing all
the pages in the file.</source>
          <target state="translated">An instance of the PdfReader class is an instance of a PdfDict &amp;ndash; the trailer dictionary of the PDF file, to be exact. It will have a private attribute set on it that is named &amp;lsquo;pages&amp;rsquo; that is a list containing all the pages in the file.</target>
        </trans-unit>
        <trans-unit id="260de79dc9f0ce3676c8e9425d9ce5ffde716a8e" translate="yes" xml:space="preserve">
          <source>Another PDF file concept that doesn&amp;rsquo;t quite map to regular Python is a
&amp;ldquo;stream&amp;rdquo;. Streams are dictionaries which each have an associated
unformatted data block. pdfrw handles streams by placing a special
attribute on a subclassed dictionary.</source>
          <target state="translated">Another PDF file concept that doesn&amp;rsquo;t quite map to regular Python is a &amp;ldquo;stream&amp;rdquo;. Streams are dictionaries which each have an associated unformatted data block. pdfrw handles streams by placing a special attribute on a subclassed dictionary.</target>
        </trans-unit>
        <trans-unit id="7bf377acaa1f78fb39dd92300e350322959223ea" translate="yes" xml:space="preserve">
          <source>As you can see, it is quite easy to dig down into a PDF document. But
what about when it&amp;rsquo;s time to write it out?</source>
          <target state="translated">As you can see, it is quite easy to dig down into a PDF document. But what about when it&amp;rsquo;s time to write it out?</target>
        </trans-unit>
        <trans-unit id="844550ab738ea00a30b8da99f16182fb8c79d223" translate="yes" xml:space="preserve">
          <source>Author:</source>
          <target state="translated">저자:</target>
        </trans-unit>
        <trans-unit id="cf6b1f6fe5f91ee7d60f40f50da55738ae0b4f16" translate="yes" xml:space="preserve">
          <source>Automatic management of following stream and /Length attributes
for content dictionaries</source>
          <target state="translated">Automatic management of following stream and /Length attributes for content dictionaries</target>
        </trans-unit>
        <trans-unit id="7a5662081927b796808fce4ddccbceaafc83bf67" translate="yes" xml:space="preserve">
          <source>Better error reporting added for some invalid PDFs (e.g. when reading
past the end of file)</source>
          <target state="translated">Better error reporting added for some invalid PDFs (e.g. when reading past the end of file)</target>
        </trans-unit>
        <trans-unit id="7d01815788ab4e021f6aa000a14e3d574010d19d" translate="yes" xml:space="preserve">
          <source>Better scrubbing of old bookmark information when writing PDFs, to
remove dangling references</source>
          <target state="translated">Better scrubbing of old bookmark information when writing PDFs, to remove dangling references</target>
        </trans-unit>
        <trans-unit id="5ce0be4623181ad482a1f2fb2050ca76e0db52ca" translate="yes" xml:space="preserve">
          <source>Better support under Python 3.x for in-memory PDF file-like objects</source>
          <target state="translated">Better support under Python 3.x for in-memory PDF file-like objects</target>
        </trans-unit>
        <trans-unit id="2da90e1bf3328b69b1a85be8faad59ff60b008c6" translate="yes" xml:space="preserve">
          <source>Bug with distinguishing compressed object stream first objects fixed</source>
          <target state="translated">Bug with distinguishing compressed object stream first objects fixed</target>
        </trans-unit>
        <trans-unit id="7ed9c0ddc95b6a3490b16c1081f2d92a59bb0538" translate="yes" xml:space="preserve">
          <source>Bug with non-compressed indices into compressed object streams fixed</source>
          <target state="translated">Bug with non-compressed indices into compressed object streams fixed</target>
        </trans-unit>
        <trans-unit id="c879abce6025163889bcbd0788707aa8aef15b3d" translate="yes" xml:space="preserve">
          <source>But PdfDict also has an optional associated stream. The stream object
defaults to None, but if you assign a stream to the dict, it will
automatically set the PDF /Length attribute for the dictionary.</source>
          <target state="translated">But PdfDict also has an optional associated stream. The stream object defaults to None, but if you assign a stream to the dict, it will automatically set the PDF /Length attribute for the dictionary.</target>
        </trans-unit>
        <trans-unit id="f467c66177284a5eb4ef204ef54d72081540f0ac" translate="yes" xml:space="preserve">
          <source>But that assumes several things, including that the personnel know how
to operate the hardware and software. &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/booklet.py&quot;&gt;booklet.py&lt;/a&gt; lets you turn your PDF
into a preformatted booklet, to give them fewer chances to mess it up.</source>
          <target state="translated">But that assumes several things, including that the personnel know how to operate the hardware and software. &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/booklet.py&quot;&gt;booklet.py&lt;/a&gt; lets you turn your PDF into a preformatted booklet, to give them fewer chances to mess it up.</target>
        </trans-unit>
        <trans-unit id="3d470108eb0184b55a8ab80c30e8a6404459bfb4" translate="yes" xml:space="preserve">
          <source>But, every other page is flipped, so that you can print double-sided and
the pages will line up properly and be pre-collated.</source>
          <target state="translated">But, every other page is flipped, so that you can print double-sided and the pages will line up properly and be pre-collated.</target>
        </trans-unit>
        <trans-unit id="2222b581b797bad394e1ac06cb21bb19cd3807ae" translate="yes" xml:space="preserve">
          <source>Can be used either standalone, or in conjunction with &lt;a href=&quot;http://www.reportlab.org/&quot;&gt;reportlab&lt;/a&gt;
to reuse existing PDFs in new ones</source>
          <target state="translated">Can be used either standalone, or in conjunction with &lt;a href=&quot;http://www.reportlab.org/&quot;&gt;reportlab&lt;/a&gt; to reuse existing PDFs in new ones</target>
        </trans-unit>
        <trans-unit id="168a98e05bb95bd662ce9885f18492c05355aabc" translate="yes" xml:space="preserve">
          <source>Can be used with rst2pdf to faithfully reproduce vector images</source>
          <target state="translated">Can be used with rst2pdf to faithfully reproduce vector images</target>
        </trans-unit>
        <trans-unit id="0540bbab88e2fe37c54964769b6d0e32217e85d9" translate="yes" xml:space="preserve">
          <source>Changes to logging allow better coexistence with other packages</source>
          <target state="translated">Changes to logging allow better coexistence with other packages</target>
        </trans-unit>
        <trans-unit id="b203db539ac4efe749143a133a6f1f3aeda7ee8c" translate="yes" xml:space="preserve">
          <source>Compression and decompression tests added</source>
          <target state="translated">Compression and decompression tests added</target>
        </trans-unit>
        <trans-unit id="b30df0712ec87124931eed4eabc3aa2193d3992d" translate="yes" xml:space="preserve">
          <source>Compression fixes for Python 3+</source>
          <target state="translated">Compression fixes for Python 3+</target>
        </trans-unit>
        <trans-unit id="f5cbdf6bfb51439be085b5c6b7460a7c91eabc3c" translate="yes" xml:space="preserve">
          <source>Contents</source>
          <target state="translated">내용</target>
        </trans-unit>
        <trans-unit id="dbb4dda1ba30fba5fc91109b6608b3670db47f63" translate="yes" xml:space="preserve">
          <source>Contributions are welcome; one user has contributed some decompression
filters and the ability to process PDF 1.5 stream objects.  Additional
functionality that would obviously be useful includes additional
decompression filters, the ability to process password-protected PDFs,
and the ability to output linearized PDFs.</source>
          <target state="translated">Contributions are welcome; one user has contributed some decompression filters and the ability to process PDF 1.5 stream objects. Additional functionality that would obviously be useful includes additional decompression filters, the ability to process password-protected PDFs, and the ability to output linearized PDFs.</target>
        </trans-unit>
        <trans-unit id="ef30c0f643b27d4c5f3e242b24fc6559deaa1d02" translate="yes" xml:space="preserve">
          <source>Core has been ported and tested on Python3 by round-tripping
several difficult files and observing binary matching results
across the different Python versions.</source>
          <target state="translated">Core has been ported and tested on Python3 by round-tripping several difficult files and observing binary matching results across the different Python versions.</target>
        </trans-unit>
        <trans-unit id="013a7aa96257b0910c87d27ed55016d2454dd04d" translate="yes" xml:space="preserve">
          <source>Download or clone the full package from github.com/pmaupin/pdfrw</source>
          <target state="translated">Download or clone the full package from github.com/pmaupin/pdfrw</target>
        </trans-unit>
        <trans-unit id="bd88d366facbf90be99e36f5b8c9fcb1728071ef" translate="yes" xml:space="preserve">
          <source>Even as a pure PDF container library, pdfrw comes up a bit short. It
does not currently support:</source>
          <target state="translated">Even as a pure PDF container library, pdfrw comes up a bit short. It does not currently support:</target>
        </trans-unit>
        <trans-unit id="b48d2648dfdf2fd382040474b185e044ccc70d9f" translate="yes" xml:space="preserve">
          <source>Finally, since PdfDict instances are indexed by PdfName objects (which
always start with a /) and since most (all?) standard Adobe PdfName
objects use names formatted like &amp;ldquo;/CamelCase&amp;rdquo;, it makes sense to allow
access to dictionary elements via object attribute accesses as well as
object index accesses. So usage of PdfDict objects is normally via
attribute access, although non-standard names (though still with a
leading slash) can be accessed via dictionary index lookup.</source>
          <target state="translated">Finally, since PdfDict instances are indexed by PdfName objects (which always start with a /) and since most (all?) standard Adobe PdfName objects use names formatted like &amp;ldquo;/CamelCase&amp;rdquo;, it makes sense to allow access to dictionary elements via object attribute accesses as well as object index accesses. So usage of PdfDict objects is normally via attribute access, although non-standard names (though still with a leading slash) can be accessed via dictionary index lookup.</target>
        </trans-unit>
        <trans-unit id="0f8ce731bc61255feee5e55e12a0dcb5d9a3d1c8" translate="yes" xml:space="preserve">
          <source>Fix for &amp;ldquo;from pdfrw import *&amp;rdquo;</source>
          <target state="translated">Fix for &amp;ldquo;from pdfrw import *&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="295420486694b967f32061e61343fe6aea1a9a73" translate="yes" xml:space="preserve">
          <source>For example, the alter.py navigation should be left intact, whereas with
cat.py it will be stripped.</source>
          <target state="translated">For example, the alter.py navigation should be left intact, whereas with cat.py it will be stripped.</target>
        </trans-unit>
        <trans-unit id="db52d15755d041a038c3591546ba793b3113a995" translate="yes" xml:space="preserve">
          <source>For the most part, pdfrw tries to be agnostic about the contents of
PDF files, and support them as containers, but to do useful work,
something a little higher-level is required, so pdfrw works to
understand a bit about the contents of the containers.  For example:</source>
          <target state="translated">For the most part, pdfrw tries to be agnostic about the contents of PDF files, and support them as containers, but to do useful work, something a little higher-level is required, so pdfrw works to understand a bit about the contents of the containers. For example:</target>
        </trans-unit>
        <trans-unit id="49d8fcdd71a20d07c395374eaf476b700e22756a" translate="yes" xml:space="preserve">
          <source>Form XObjects. pdfrw can take any page or rectangle on a page, and
convert it to a Form XObject, suitable for use inside another PDF
file.  It knows enough about these to perform scaling, rotation,
and positioning.</source>
          <target state="translated">Form XObjects. pdfrw can take any page or rectangle on a page, and convert it to a Form XObject, suitable for use inside another PDF file. It knows enough about these to perform scaling, rotation, and positioning.</target>
        </trans-unit>
        <trans-unit id="6542b9205ed0d648a23161f8573d3cc19a586e74" translate="yes" xml:space="preserve">
          <source>Has been used for years by a printer in pre-press production</source>
          <target state="translated">Has been used for years by a printer in pre-press production</target>
        </trans-unit>
        <trans-unit id="abb4826941418d4ae7711c7ade3ecbba6cf971d2" translate="yes" xml:space="preserve">
          <source>If a PdfDict has an associated data stream in the PDF file, the stream
is accessed via the &amp;lsquo;stream&amp;rsquo; (all lower-case) attribute.  Setting the
stream attribute on the PdfDict will automatically set the /Length attribute
as well.  If that is not what is desired (for example if the the stream
is compressed), then _stream (same name with an underscore) may be used
to associate the stream with the PdfDict without setting the length.</source>
          <target state="translated">If a PdfDict has an associated data stream in the PDF file, the stream is accessed via the &amp;lsquo;stream&amp;rsquo; (all lower-case) attribute. Setting the stream attribute on the PdfDict will automatically set the /Length attribute as well. If that is not what is desired (for example if the the stream is compressed), then _stream (same name with an underscore) may be used to associate the stream with the PdfDict without setting the length.</target>
        </trans-unit>
        <trans-unit id="4e076085495df6c857179302c78b78b5148c1c2d" translate="yes" xml:space="preserve">
          <source>If you ever want to print something that is like a small booklet, but
needs to be spiral bound, you either have to do some fancy rearranging,
or just waste half your paper.</source>
          <target state="translated">If you ever want to print something that is like a small booklet, but needs to be spiral bound, you either have to do some fancy rearranging, or just waste half your paper.</target>
        </trans-unit>
        <trans-unit id="e2b4582070674afccdf18e8a22603022c13b401f" translate="yes" xml:space="preserve">
          <source>If you have a source PDF and do not want to disturb the structure
of it too badly, then you may pass its trailer directly to PdfWriter
rather than letting PdfWriter construct one for you.  There is an
example of this (alter.py) in the examples directory.</source>
          <target state="translated">If you have a source PDF and do not want to disturb the structure of it too badly, then you may pass its trailer directly to PdfWriter rather than letting PdfWriter construct one for you. There is an example of this (alter.py) in the examples directory.</target>
        </trans-unit>
        <trans-unit id="f48de9e27d99070bd796b36736fc6b1ede911121" translate="yes" xml:space="preserve">
          <source>In addition to the tree structure, pdfrw creates a special attribute
named &lt;em&gt;pages&lt;/em&gt;, that is a list of all the pages in the document. pdfrw
creates the &lt;em&gt;pages&lt;/em&gt; attribute as a simplification for the user, because
the PDF format allows arbitrarily complicated nested dictionaries to
describe the page order. Each entry in the &lt;em&gt;pages&lt;/em&gt; list is the PdfDict
object for one of the pages in the file, in order.</source>
          <target state="translated">In addition to the tree structure, pdfrw creates a special attribute named &lt;em&gt;pages&lt;/em&gt;, that is a list of all the pages in the document. pdfrw creates the &lt;em&gt;pages&lt;/em&gt; attribute as a simplification for the user, because the PDF format allows arbitrarily complicated nested dictionaries to describe the page order. Each entry in the &lt;em&gt;pages&lt;/em&gt; list is the PdfDict object for one of the pages in the file, in order.</target>
        </trans-unit>
        <trans-unit id="5448dced1a7c1b6218e7e9d542cc3aa70dbf5ecd" translate="yes" xml:space="preserve">
          <source>In general, PDF files conceptually map quite well to Python. The major
objects to think about are:</source>
          <target state="translated">In general, PDF files conceptually map quite well to Python. The major objects to think about are:</target>
        </trans-unit>
        <trans-unit id="bd8e2b07ebbddedf75448a52f02360b01620a879" translate="yes" xml:space="preserve">
          <source>In general, the objects are read from the file lazily, but this is not
currently true with compressed object streams &amp;ndash; all of these are decompressed
and read in when the PdfReader is instantiated.</source>
          <target state="translated">In general, the objects are read from the file lazily, but this is not currently true with compressed object streams &amp;ndash; all of these are decompressed and read in when the PdfReader is instantiated.</target>
        </trans-unit>
        <trans-unit id="54f4efb8bef4faf005523d9469b22f19fa143ebc" translate="yes" xml:space="preserve">
          <source>In the example above, there is a slight difference between the objects
returned from PdfName, and the object returned from PdfObject.  The
PdfName objects are actually objects of class &amp;ldquo;BasePdfName&amp;rdquo;.  This
is important, because only these may be used as keys in PdfDict objects.</source>
          <target state="translated">In the example above, there is a slight difference between the objects returned from PdfName, and the object returned from PdfObject. The PdfName objects are actually objects of class &amp;ldquo;BasePdfName&amp;rdquo;. This is important, because only these may be used as keys in PdfDict objects.</target>
        </trans-unit>
        <trans-unit id="2da68ebee27a9536a556a8ce00145082bdfa7d43" translate="yes" xml:space="preserve">
          <source>In the simplest case, an instance of PdfWriter is instantiated, and
then pages are added to it from one or more source files (or created
programmatically), and then the write method is called to dump the
results out to a file.</source>
          <target state="translated">In the simplest case, an instance of PdfWriter is instantiated, and then pages are added to it from one or more source files (or created programmatically), and then the write method is called to dump the results out to a file.</target>
        </trans-unit>
        <trans-unit id="e38cfb3221f4b5330b21acb83c257b4272f7dc46" translate="yes" xml:space="preserve">
          <source>Indirect attribute</source>
          <target state="translated">Indirect attribute</target>
        </trans-unit>
        <trans-unit id="00a04c7b96e690922f867eee60a153fc7c984fc9" translate="yes" xml:space="preserve">
          <source>Info, Size, and Root are retrieved from the trailer of the PDF file.</source>
          <target state="translated">Info, Size, and Root are retrieved from the trailer of the PDF file.</target>
        </trans-unit>
        <trans-unit id="bcfee1e74c79e1538a385072b38b1d5a353cd34b" translate="yes" xml:space="preserve">
          <source>Initial crypt filter support added</source>
          <target state="translated">Initial crypt filter support added</target>
        </trans-unit>
        <trans-unit id="cff55bdc215c1d524c0aefd5ce4a7382c96b19cb" translate="yes" xml:space="preserve">
          <source>Mapping of attribute accesses to the dict itself
(pdfdict.Foo == pdfdict[NameObject(&amp;lsquo;Foo&amp;rsquo;)])</source>
          <target state="translated">Mapping of attribute accesses to the dict itself (pdfdict.Foo == pdfdict[NameObject(&amp;lsquo;Foo&amp;rsquo;)])</target>
        </trans-unit>
        <trans-unit id="0a76cefd4791dcfedad16ec98acfeaf1acca7ae3" translate="yes" xml:space="preserve">
          <source>Minor tokenizer speedup</source>
          <target state="translated">Minor tokenizer speedup</target>
        </trans-unit>
        <trans-unit id="743d972b03385d68842ce4304f5bb3ecab922ed4" translate="yes" xml:space="preserve">
          <source>Most compression/decompression filters</source>
          <target state="translated">Most compression/decompression filters</target>
        </trans-unit>
        <trans-unit id="ff721e8509eb436612650710feec3d8543f06d33" translate="yes" xml:space="preserve">
          <source>My understanding is that pagecatcher would have done exactly what I
wanted when I built pdfrw. But I was on a zero budget, so I&amp;rsquo;ve never
had the pleasure of experiencing pagecatcher. I do, however, use and
like &lt;a href=&quot;http://www.reportlab.org/&quot;&gt;reportlab&lt;/a&gt; (open source, from
the people who make pagecatcher) so I&amp;rsquo;m sure pagecatcher is great,
better documented and much more full-featured than pdfrw.</source>
          <target state="translated">My understanding is that pagecatcher would have done exactly what I wanted when I built pdfrw. But I was on a zero budget, so I&amp;rsquo;ve never had the pleasure of experiencing pagecatcher. I do, however, use and like &lt;a href=&quot;http://www.reportlab.org/&quot;&gt;reportlab&lt;/a&gt; (open source, from the people who make pagecatcher) so I&amp;rsquo;m sure pagecatcher is great, better documented and much more full-featured than pdfrw.</target>
        </trans-unit>
        <trans-unit id="4c7bbc164ee1f786c5ad2d6e1cbad523558a7333" translate="yes" xml:space="preserve">
          <source>New fancy_watermark.py example shows off capabilities of pagemerge.py</source>
          <target state="translated">New fancy_watermark.py example shows off capabilities of pagemerge.py</target>
        </trans-unit>
        <trans-unit id="6ee0fa92e251f2c5fba140dab1b0cbf7c8abcaed" translate="yes" xml:space="preserve">
          <source>New regression test functionally tests core with dozens of
PDFs, and also tests examples.</source>
          <target state="translated">New regression test functionally tests core with dozens of PDFs, and also tests examples.</target>
        </trans-unit>
        <trans-unit id="7debe04cf1b27fb053e5e0586f4e8d824555522d" translate="yes" xml:space="preserve">
          <source>New subset_booklets.py example</source>
          <target state="translated">New subset_booklets.py example</target>
        </trans-unit>
        <trans-unit id="61405a48d06b9bc1f26e147fb10fb471f846346b" translate="yes" xml:space="preserve">
          <source>Now the tests may be run from that directory using unittest, or
py.test, or nose.</source>
          <target state="translated">Now the tests may be run from that directory using unittest, or py.test, or nose.</target>
        </trans-unit>
        <trans-unit id="64d22d768ba990190de082c23ab9b09ff74aae21" translate="yes" xml:space="preserve">
          <source>Once the attribute is set, it may be accessed directly as an attribute
of the dictionary:</source>
          <target state="translated">Once the attribute is set, it may be accessed directly as an attribute of the dictionary:</target>
        </trans-unit>
        <trans-unit id="04ee67f2e74602b4942c545e4a2f28898634be54" translate="yes" xml:space="preserve">
          <source>One difference is that, since &lt;strong&gt;cat&lt;/strong&gt; is creating a new PDF structure,
and &lt;strong&gt;alter&lt;/strong&gt; is attempting to modify an existing PDF structure, the
PDF produced by alter (and also by watermark.py) &lt;em&gt;should&lt;/em&gt; be
more faithful to the original (except for the desired changes).</source>
          <target state="translated">One difference is that, since &lt;strong&gt;cat&lt;/strong&gt; is creating a new PDF structure, and &lt;strong&gt;alter&lt;/strong&gt; is attempting to modify an existing PDF structure, the PDF produced by alter (and also by watermark.py) &lt;em&gt;should&lt;/em&gt; be more faithful to the original (except for the desired changes).</target>
        </trans-unit>
        <trans-unit id="a1e5e3d36e3a9abe017ad4cd1b533b33e176ba4e" translate="yes" xml:space="preserve">
          <source>One feature that all the PDF object classes have in common is the
inclusion of an &amp;lsquo;indirect&amp;rsquo; attribute. If &amp;lsquo;indirect&amp;rsquo; exists and evaluates
to True, then when the object is written out, it is written out as an
indirect object. That is to say, it is addressable in the PDF file, and
could be referenced by any number (including zero) of container objects.
This indirect object capability saves space in PDF files by allowing
objects such as fonts to be referenced from multiple pages, and also
allows PDF files to contain internal circular references.  This latter
capability is used, for example, when each page object has a &amp;ldquo;parent&amp;rdquo;
object in its dictionary.</source>
          <target state="translated">One feature that all the PDF object classes have in common is the inclusion of an &amp;lsquo;indirect&amp;rsquo; attribute. If &amp;lsquo;indirect&amp;rsquo; exists and evaluates to True, then when the object is written out, it is written out as an indirect object. That is to say, it is addressable in the PDF file, and could be referenced by any number (including zero) of container objects. This indirect object capability saves space in PDF files by allowing objects such as fonts to be referenced from multiple pages, and also allows PDF files to contain internal circular references. This latter capability is used, for example, when each page object has a &amp;ldquo;parent&amp;rdquo; object in its dictionary.</target>
        </trans-unit>
        <trans-unit id="3552bff06e1cd420225fc0fee42c6cb8ee6963a6" translate="yes" xml:space="preserve">
          <source>Operations include subsetting, merging, rotating, modifying metadata, etc.</source>
          <target state="translated">Operations include subsetting, merging, rotating, modifying metadata, etc.</target>
        </trans-unit>
        <trans-unit id="8a86f735b5f893805471beeff38066980caafec0" translate="yes" xml:space="preserve">
          <source>Other attributes may be set for private internal use of the
library and/or its clients.</source>
          <target state="translated">Other attributes may be set for private internal use of the library and/or its clients.</target>
        </trans-unit>
        <trans-unit id="0970604c8bbfb1db8ac66b38cb02a62b1852987c" translate="yes" xml:space="preserve">
          <source>PDF file reader/writer library</source>
          <target state="translated">PDF file reader/writer library</target>
        </trans-unit>
        <trans-unit id="82f0f94c5c51e676c1a1e31718829df78e083e2c" translate="yes" xml:space="preserve">
          <source>PDF pages. pdfrw knows enough to find the pages in PDF files you read
in, and to write a set of pages back out to a new PDF file.</source>
          <target state="translated">PDF pages. pdfrw knows enough to find the pages in PDF files you read in, and to write a set of pages back out to a new PDF file.</target>
        </trans-unit>
        <trans-unit id="17cf6cb803d6597ff5fa3f176272d23bf519b0b3" translate="yes" xml:space="preserve">
          <source>Patrick Maupin</source>
          <target state="translated">Patrick Maupin</target>
        </trans-unit>
        <trans-unit id="eb773b59dd92e44cc1f6b28392e00dd68f3a47e2" translate="yes" xml:space="preserve">
          <source>PdfArray is a subclass of list with two special features.  First,
an &amp;lsquo;indirect&amp;rsquo; attribute allows a PdfArray to be written out as
an indirect PDF object.  Second, pdfrw reads files lazily, so
PdfArray knows about, and resolves references to other indirect
objects on an as-needed basis.</source>
          <target state="translated">PdfArray is a subclass of list with two special features. First, an &amp;lsquo;indirect&amp;rsquo; attribute allows a PdfArray to be written out as an indirect PDF object. Second, pdfrw reads files lazily, so PdfArray knows about, and resolves references to other indirect objects on an as-needed basis.</target>
        </trans-unit>
        <trans-unit id="994e2ce02a81e1029159204ac61992019dd778d0" translate="yes" xml:space="preserve">
          <source>PdfDict is a subclass of dict that also has an indirect attribute
and lazy reference resolution as well.  (And the subclassed
IndirectPdfDict has indirect automatically set True).</source>
          <target state="translated">PdfDict is a subclass of dict that also has an indirect attribute and lazy reference resolution as well. (And the subclassed IndirectPdfDict has indirect automatically set True).</target>
        </trans-unit>
        <trans-unit id="8fd8488f844c2a817bca28c5596d88e42fc78855" translate="yes" xml:space="preserve">
          <source>PdfReader.readpages() recursion error (issue #92) fixed.</source>
          <target state="translated">PdfReader.readpages() recursion error (issue #92) fixed.</target>
        </trans-unit>
        <trans-unit id="3ba0ced99da179c2a203641c10d6e8d827bf9e23" translate="yes" xml:space="preserve">
          <source>Permissively licensed</source>
          <target state="translated">Permissively licensed</target>
        </trans-unit>
        <trans-unit id="8dd1c9c4cbd8178032a05b0594efcb0583c050b8" translate="yes" xml:space="preserve">
          <source>Proper unicode support for text strings in PDFs added</source>
          <target state="translated">Proper unicode support for text strings in PDFs added</target>
        </trans-unit>
        <trans-unit id="ae8fbd1c9cbee2432a67b33d89cb63fcf98e7698" translate="yes" xml:space="preserve">
          <source>Python 3.5 added to test matrix</source>
          <target state="translated">Python 3.5 added to test matrix</target>
        </trans-unit>
        <trans-unit id="25f732d0918c8d30c2eccf2e9aee740af1792e4e" translate="yes" xml:space="preserve">
          <source>Python 3.6 added to test matrix</source>
          <target state="translated">Python 3.6 added to test matrix</target>
        </trans-unit>
        <trans-unit id="c436290f422dc148fdeccdc55933991ee17dda66" translate="yes" xml:space="preserve">
          <source>Refactoring of pdfwriter, including updating API, to allow future
enhancements for things like incremental writing</source>
          <target state="translated">Refactoring of pdfwriter, including updating API, to allow future enhancements for things like incremental writing</target>
        </trans-unit>
        <trans-unit id="4f51f9bf3a4509cbdb73d5c2302f448e40d4baac" translate="yes" xml:space="preserve">
          <source>Return of None for non-existent keys (like dict.get)</source>
          <target state="translated">Return of None for non-existent keys (like dict.get)</target>
        </trans-unit>
        <trans-unit id="c1c1d2f9aa487e46ac9378a1df794b99486d4f6d" translate="yes" xml:space="preserve">
          <source>Revisions:</source>
          <target state="translated">Revisions:</target>
        </trans-unit>
        <trans-unit id="12503dca5dffa0812bb8149c54ca9e32b2ccdda7" translate="yes" xml:space="preserve">
          <source>Several bugs have been fixed</source>
          <target state="translated">Several bugs have been fixed</target>
        </trans-unit>
        <trans-unit id="29bee0abf421c02895710a23939493b076cd346c" translate="yes" xml:space="preserve">
          <source>Some attributes of PDF pages are &amp;ldquo;inheritable.&amp;rdquo;  That is, they may
belong to a parent dictionary (or a parent of a parent dictionary, etc.)
The &amp;ldquo;inheritable&amp;rdquo; attribute allows for easy discovery of these:</source>
          <target state="translated">Some attributes of PDF pages are &amp;ldquo;inheritable.&amp;rdquo; That is, they may belong to a parent dictionary (or a parent of a parent dictionary, etc.) The &amp;ldquo;inheritable&amp;rdquo; attribute allows for easy discovery of these:</target>
        </trans-unit>
        <trans-unit id="c77a1aa840eba2088f65ebfc55ab5a72147af99d" translate="yes" xml:space="preserve">
          <source>Some flate decompressor bugs fixed</source>
          <target state="translated">Some flate decompressor bugs fixed</target>
        </trans-unit>
        <trans-unit id="fc28681de91def70a252fad5fe650abf1762a73d" translate="yes" xml:space="preserve">
          <source>Some pagemerge and Unicode patches added</source>
          <target state="translated">Some pagemerge and Unicode patches added</target>
        </trans-unit>
        <trans-unit id="455aba222384855d40e1d585688ee3b9a6e8343e" translate="yes" xml:space="preserve">
          <source>Still only minimal support for compression and no support
for encryption or newer PDF features.  (pdftk is useful
to put PDFs in a form that pdfrw can use.)</source>
          <target state="translated">Still only minimal support for compression and no support for encryption or newer PDF features. (pdftk is useful to put PDFs in a form that pdfrw can use.)</target>
        </trans-unit>
        <trans-unit id="f7f2b81060e827f0f571afb18816d6245dc9eaca" translate="yes" xml:space="preserve">
          <source>Support for searching parent dictionaries for PDF &amp;ldquo;inheritable&amp;rdquo;
attributes.</source>
          <target state="translated">Support for searching parent dictionaries for PDF &amp;ldquo;inheritable&amp;rdquo; attributes.</target>
        </trans-unit>
        <trans-unit id="3c340aceaa4d929bf726e77fd64b41f9a775469e" translate="yes" xml:space="preserve">
          <source>Tests for new unicode handling added</source>
          <target state="translated">Tests for new unicode handling added</target>
        </trans-unit>
        <trans-unit id="0ccc233c2e7315ac10132d6082924669adba85a6" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all it takes to create a new PDF. You may still need to read the
&lt;a href=&quot;http://www.adobe.com/devnet/acrobat/pdfs/pdf_reference_1-7.pdf&quot;&gt;Adobe PDF reference manual&lt;/a&gt; to figure out what needs to go &lt;em&gt;into&lt;/em&gt;
the PDF, but at least you don&amp;rsquo;t have to sweat actually building it
and getting the file offsets right.</source>
          <target state="translated">That&amp;rsquo;s all it takes to create a new PDF. You may still need to read the &lt;a href=&quot;http://www.adobe.com/devnet/acrobat/pdfs/pdf_reference_1-7.pdf&quot;&gt;Adobe PDF reference manual&lt;/a&gt; to figure out what needs to go &lt;em&gt;into&lt;/em&gt; the PDF, but at least you don&amp;rsquo;t have to sweat actually building it and getting the file offsets right.</target>
        </trans-unit>
        <trans-unit id="f9ec8d9ad09a7610ccd3c2f7689a6b9e77f70c1c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/alter.py&quot;&gt;alter.py&lt;/a&gt; example alters a single metadata item in a PDF,
and writes the result to a new PDF.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/alter.py&quot;&gt;alter.py&lt;/a&gt; example alters a single metadata item in a PDF, and writes the result to a new PDF.</target>
        </trans-unit>
        <trans-unit id="a3924ab8db6d9d305dcffa79f392aae6d777a2aa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/cat.py&quot;&gt;cat.py&lt;/a&gt; example will accept multiple input files on the command
line, concatenate them and output them to output.pdf, after adding some
nonsensical metadata to the output PDF file.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/cat.py&quot;&gt;cat.py&lt;/a&gt; example will accept multiple input files on the command line, concatenate them and output them to output.pdf, after adding some nonsensical metadata to the output PDF file.</target>
        </trans-unit>
        <trans-unit id="60270ce0c8702c3c5bf5b784d0801d3b60552cd3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/print_two.py&quot;&gt;print_two.py&lt;/a&gt; example program will, for example, make two side-by-side
copies each page of of your PDF on a each output sheet.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/print_two.py&quot;&gt;print_two.py&lt;/a&gt; example program will, for example, make two side-by-side copies each page of of your PDF on a each output sheet.</target>
        </trans-unit>
        <trans-unit id="80519ed867c7997f8921bcfcc753db5efc6e6f47" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl2/copy.py&quot;&gt;copy.py&lt;/a&gt; script shows a simple example of reading in a PDF, and
using the decodegraphics.py module to try to write the same information
out to a new PDF through a reportlab canvas. (If you know about reportlab,
you know that if you can faithfully render a PDF to a reportlab canvas, you
can do pretty much anything else with that PDF you want.) This kind of
low level manipulation should be done only if you really need to.
decodegraphics is really more than a proof of concept than anything
else. For most cases, just use the Form XObject capability, as shown in
the examples/rl1/booklet.py demo.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/examples/rl2/copy.py&quot;&gt;copy.py&lt;/a&gt; script shows a simple example of reading in a PDF, and using the decodegraphics.py module to try to write the same information out to a new PDF through a reportlab canvas. (If you know about reportlab, you know that if you can faithfully render a PDF to a reportlab canvas, you can do pretty much anything else with that PDF you want.) This kind of low level manipulation should be done only if you really need to. decodegraphics is really more than a proof of concept than anything else. For most cases, just use the Form XObject capability, as shown in the examples/rl1/booklet.py demo.</target>
        </trans-unit>
        <trans-unit id="155ee5f64f36d6851bfe598c4f9b6560f831b8af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/__init__.py&quot;&gt;__init.py__&lt;/a&gt; module does the usual thing of importing a few
major attributes from some of the submodules, and the &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/errors.py&quot;&gt;errors.py&lt;/a&gt;
module supports logging and exception generation.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/__init__.py&quot;&gt;__init.py__&lt;/a&gt; module does the usual thing of importing a few major attributes from some of the submodules, and the &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/errors.py&quot;&gt;errors.py&lt;/a&gt; module supports logging and exception generation.</target>
        </trans-unit>
        <trans-unit id="4d956ac31bce275cd9e02e7b83cbcb502ed411a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/&quot;&gt;objects&lt;/a&gt; sub-package contains one module for each of the
internal representations of the kinds of basic objects that exist
in a PDF file, with the &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/__init__.py&quot;&gt;objects/__init__.py&lt;/a&gt; module in that
package simply gathering them up and making them available to the
main pdfrw package.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/&quot;&gt;objects&lt;/a&gt; sub-package contains one module for each of the internal representations of the kinds of basic objects that exist in a PDF file, with the &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/__init__.py&quot;&gt;objects/__init__.py&lt;/a&gt; module in that package simply gathering them up and making them available to the main pdfrw package.</target>
        </trans-unit>
        <trans-unit id="aa58f3d72c4ea6fcb3d110c9d6c792ee63387287" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfarray.py&quot;&gt;objects/pdfarray.py&lt;/a&gt;
module contains the PdfArray class, which is a subclass of list that is
used to represent arrays in a PDF file. A regular list could be used
instead, but use of the PdfArray class allows for an indirect attribute
to be set, and also allows for proxying of unresolved indirect objects
(that haven&amp;rsquo;t been read in yet) in a manner that is transparent to pdfrw
clients.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfarray.py&quot;&gt;objects/pdfarray.py&lt;/a&gt; module contains the PdfArray class, which is a subclass of list that is used to represent arrays in a PDF file. A regular list could be used instead, but use of the PdfArray class allows for an indirect attribute to be set, and also allows for proxying of unresolved indirect objects (that haven&amp;rsquo;t been read in yet) in a manner that is transparent to pdfrw clients.</target>
        </trans-unit>
        <trans-unit id="ce50ead0ad112160188acdc8056309b40ca7c855" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfdict.py&quot;&gt;objects/pdfdict.py&lt;/a&gt;
module contains the PdfDict class, which is a subclass of dict that is
used to represent dictionaries in a PDF file. A regular dict could be
used instead, but the PdfDict class matches the requirements of PDF
files more closely:</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfdict.py&quot;&gt;objects/pdfdict.py&lt;/a&gt; module contains the PdfDict class, which is a subclass of dict that is used to represent dictionaries in a PDF file. A regular dict could be used instead, but the PdfDict class matches the requirements of PDF files more closely:</target>
        </trans-unit>
        <trans-unit id="7831a731ce5aec0a10e24ff2c20d8066487b680e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfindirect.py&quot;&gt;objects/pdfindirect.py&lt;/a&gt;
module contains the PdfIndirect class, which is a non-transparent proxy
object for PDF objects that have not yet been read in and resolved from
a file. Although these are non-transparent inside the library, client code
should never see one of these &amp;ndash; they exist inside the PdfArray and PdfDict
container types, but are resolved before being returned to a client of
those types.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfindirect.py&quot;&gt;objects/pdfindirect.py&lt;/a&gt; module contains the PdfIndirect class, which is a non-transparent proxy object for PDF objects that have not yet been read in and resolved from a file. Although these are non-transparent inside the library, client code should never see one of these &amp;ndash; they exist inside the PdfArray and PdfDict container types, but are resolved before being returned to a client of those types.</target>
        </trans-unit>
        <trans-unit id="d28ca8befb84cf755e05451511a7cc6f03e0a57e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfname.py&quot;&gt;objects/pdfname.py&lt;/a&gt; module contains the PdfName singleton object,
which will convert a string into a PDF name by prepending a slash. It can
be used either by calling it or getting an attribute, e.g.:</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfname.py&quot;&gt;objects/pdfname.py&lt;/a&gt; module contains the PdfName singleton object, which will convert a string into a PDF name by prepending a slash. It can be used either by calling it or getting an attribute, e.g.:</target>
        </trans-unit>
        <trans-unit id="a1a46ec148e362a60dc7dc60ff5986966bbf6057" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfobject.py&quot;&gt;objects/pdfobject.py&lt;/a&gt; module contains the PdfObject class, which is
a subclass of str, and is the catch-all object for any PDF file elements
that are not explicitly represented by other objects, as described below.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfobject.py&quot;&gt;objects/pdfobject.py&lt;/a&gt; module contains the PdfObject class, which is a subclass of str, and is the catch-all object for any PDF file elements that are not explicitly represented by other objects, as described below.</target>
        </trans-unit>
        <trans-unit id="8c680db8a34e844beedd4f45e06667ebfb7d9e30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfstring.py&quot;&gt;objects/pdfstring.py&lt;/a&gt;
module contains the PdfString class, which is a subclass of str that is
used to represent encoded strings in a PDF file. The class has encode
and decode methods for the strings.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfstring.py&quot;&gt;objects/pdfstring.py&lt;/a&gt; module contains the PdfString class, which is a subclass of str that is used to represent encoded strings in a PDF file. The class has encode and decode methods for the strings.</target>
        </trans-unit>
        <trans-unit id="306b2e778e0cb7e8c4b6e569684ee854c93af4f7" translate="yes" xml:space="preserve">
          <source>The PdfReader class does not, in general, parse into containers (e.g.
inside the content streams). There is a proof of concept for doing that
inside the examples/rl2 subdirectory, but that is slow and not well-developed,
and not useful for most applications.</source>
          <target state="translated">The PdfReader class does not, in general, parse into containers (e.g. inside the content streams). There is a proof of concept for doing that inside the examples/rl2 subdirectory, but that is slow and not well-developed, and not useful for most applications.</target>
        </trans-unit>
        <trans-unit id="7ce348490d16eb695f12b5e0f23c9fba0d4e3ca9" translate="yes" xml:space="preserve">
          <source>The PdfReader object is a subclass of PdfDict, which allows easy access
to an entire document:</source>
          <target state="translated">The PdfReader object is a subclass of PdfDict, which allows easy access to an entire document:</target>
        </trans-unit>
        <trans-unit id="481d3f1de28c66ca89679f2f1ead4409ff92dcbf" translate="yes" xml:space="preserve">
          <source>The apparent primary difficulty in mapping PDF files to Python is the
PDF file concept of &amp;ldquo;indirect objects.&amp;rdquo;  Indirect objects provide
the efficiency of allowing a single piece of data to be referred to
from more than one containing object, but probably more importantly,
indirect objects provide a way to get around the chicken and egg
problem of circular object references when mapping arbitrary data
structures to files. To flatten out a circular reference, an indirect
object is &lt;em&gt;referred to&lt;/em&gt; instead of being &lt;em&gt;directly included&lt;/em&gt; in another
object. PDF files have a global mechanism for locating indirect objects,
and they all have two reference numbers (a reference number and a
&amp;ldquo;generation&amp;rdquo; number, in case you wanted to append to the PDF file
rather than just rewriting the whole thing).</source>
          <target state="translated">The apparent primary difficulty in mapping PDF files to Python is the PDF file concept of &amp;ldquo;indirect objects.&amp;rdquo; Indirect objects provide the efficiency of allowing a single piece of data to be referred to from more than one containing object, but probably more importantly, indirect objects provide a way to get around the chicken and egg problem of circular object references when mapping arbitrary data structures to files. To flatten out a circular reference, an indirect object is &lt;em&gt;referred to&lt;/em&gt; instead of being &lt;em&gt;directly included&lt;/em&gt; in another object. PDF files have a global mechanism for locating indirect objects, and they all have two reference numbers (a reference number and a &amp;ldquo;generation&amp;rdquo; number, in case you wanted to append to the PDF file rather than just rewriting the whole thing).</target>
        </trans-unit>
        <trans-unit id="daf6281f376717309caee4edc5be01330626ade4" translate="yes" xml:space="preserve">
          <source>The examples directory has a few scripts which use the library.
Note that if these examples do not work with your PDF, you should
try to use pdftk to uncompress and/or unencrypt them first.</source>
          <target state="translated">The examples directory has a few scripts which use the library. Note that if these examples do not work with your PDF, you should try to use pdftk to uncompress and/or unencrypt them first.</target>
        </trans-unit>
        <trans-unit id="b1cedbf4ae2a0233e499600e7f62492b2650fc67" translate="yes" xml:space="preserve">
          <source>The fastest pure Python PDF parser available</source>
          <target state="translated">The fastest pure Python PDF parser available</target>
        </trans-unit>
        <trans-unit id="145fb0d4cc02172775f4a2f71ddf21313ef2dee7" translate="yes" xml:space="preserve">
          <source>The library comes with several examples that show operation both with
and without reportlab.</source>
          <target state="translated">The library comes with several examples that show operation both with and without reportlab.</target>
        </trans-unit>
        <trans-unit id="11f7885d1d3b9f4040a2e7eebf59117c6841bb98" translate="yes" xml:space="preserve">
          <source>The philosophy of the examples is to provide small, easily-understood
examples that showcase pdfrw functionality.</source>
          <target state="translated">The philosophy of the examples is to provide small, easily-understood examples that showcase pdfrw functionality.</target>
        </trans-unit>
        <trans-unit id="63826ea5012a5bde44bffff7a6da8865a50a9d8d" translate="yes" xml:space="preserve">
          <source>The philosophy of the library portion of pdfrw is to provide intuitive
functions to read, manipulate, and write PDF files.  There should be
minimal leakage between abstraction layers, although getting useful
work done makes &amp;ldquo;pure&amp;rdquo; functionality separation difficult.</source>
          <target state="translated">The philosophy of the library portion of pdfrw is to provide intuitive functions to read, manipulate, and write PDF files. There should be minimal leakage between abstraction layers, although getting useful work done makes &amp;ldquo;pure&amp;rdquo; functionality separation difficult.</target>
        </trans-unit>
        <trans-unit id="5320850952563b22ba6c8b88a5d3e8dfccdb8d81" translate="yes" xml:space="preserve">
          <source>The tests associated with pdfrw require a large number of PDFs,
which are not distributed with the library.</source>
          <target state="translated">The tests associated with pdfrw require a large number of PDFs, which are not distributed with the library.</target>
        </trans-unit>
        <trans-unit id="41f4e325b6cefe4bec0e0e5b23570f2bc0a57bf1" translate="yes" xml:space="preserve">
          <source>The usage model for pdfrw treats most objects as strings (it takes their
string representation when writing them to a file). The two main
exceptions are the PdfArray object and the PdfDict object.</source>
          <target state="translated">The usage model for pdfrw treats most objects as strings (it takes their string representation when writing them to a file). The two main exceptions are the PdfArray object and the PdfDict object.</target>
        </trans-unit>
        <trans-unit id="fa84c14c5eec2c52049ea6c872899d378ad775a3" translate="yes" xml:space="preserve">
          <source>There are a few options available when creating and using this class.</source>
          <target state="translated">There are a few options available when creating and using this class.</target>
        </trans-unit>
        <trans-unit id="c3fc539f2b2d9711bb4c7aa27a81b138812b3224" translate="yes" xml:space="preserve">
          <source>There are a lot of incorrectly formatted PDFs floating around; support
for these is added in some cases.  The decision is often based on what
acroread and okular do with the PDFs; if they can display them properly,
then eventually pdfrw should, too, if it is not too difficult or costly.</source>
          <target state="translated">There are a lot of incorrectly formatted PDFs floating around; support for these is added in some cases. The decision is often based on what acroread and okular do with the PDFs; if they can display them properly, then eventually pdfrw should, too, if it is not too difficult or costly.</target>
        </trans-unit>
        <trans-unit id="992effe26abf2cd5777e96ce133383eaf6b2697d" translate="yes" xml:space="preserve">
          <source>There are several examples that demonstrate these features in
the example code directory.</source>
          <target state="translated">There are several examples that demonstrate these features in the example code directory.</target>
        </trans-unit>
        <trans-unit id="38f6a3953d2b53a6bce75ee18da33edd2602eb19" translate="yes" xml:space="preserve">
          <source>This looks like a useful, actively-developed program. It is quite
large, but then, it is trying to actively comprehend a full PDF
document. From the website:</source>
          <target state="translated">This looks like a useful, actively-developed program. It is quite large, but then, it is trying to actively comprehend a full PDF document. From the website:</target>
        </trans-unit>
        <trans-unit id="778e57d810d92c46989923cc299525ff6567e4bd" translate="yes" xml:space="preserve">
          <source>To run the tests:</source>
          <target state="translated">To run the tests:</target>
        </trans-unit>
        <trans-unit id="d2b28e866bfeed21be62339170e29d2d00559851" translate="yes" xml:space="preserve">
          <source>To set private attributes (that will not be written out to a new PDF
file) on a dictionary, use the &amp;lsquo;private&amp;rsquo; attribute:</source>
          <target state="translated">To set private attributes (that will not be written out to a new PDF file) on a dictionary, use the &amp;lsquo;private&amp;rsquo; attribute:</target>
        </trans-unit>
        <trans-unit id="c8178804f134d334766850e9dc2efe413b4f920c" translate="yes" xml:space="preserve">
          <source>Transparent (from the library client&amp;rsquo;s viewpoint) proxying
of unresolved indirect objects</source>
          <target state="translated">Transparent (from the library client&amp;rsquo;s viewpoint) proxying of unresolved indirect objects</target>
        </trans-unit>
        <trans-unit id="ed0e7dae1283d19480a03bb95cc7a4447b8a5e15" translate="yes" xml:space="preserve">
          <source>Version 0.4 is tested and works on Python 2.6, 2.7, 3.3, 3.4, 3.5, and 3.6</source>
          <target state="translated">Version 0.4 is tested and works on Python 2.6, 2.7, 3.3, 3.4, 3.5, and 3.6</target>
        </trans-unit>
        <trans-unit id="8c93d5dca7f510f6b3bed81ca293c33725ada7b2" translate="yes" xml:space="preserve">
          <source>When instantiating a PdfReader object, there are options available
for decompressing all the objects in the file.  pdfrw does not currently
have very many options for decompression, so this is not all that useful,
except in the specific case of compressed object streams.</source>
          <target state="translated">When instantiating a PdfReader object, there are options available for decompressing all the objects in the file. pdfrw does not currently have very many options for decompression, so this is not all that useful, except in the specific case of compressed object streams.</target>
        </trans-unit>
        <trans-unit id="bd8a058a98f63832251a4565227148f626df91de" translate="yes" xml:space="preserve">
          <source>buildxobj fixes allow better support creating form XObjects
out of compressed pages in some cases</source>
          <target state="translated">buildxobj fixes allow better support creating form XObjects out of compressed pages in some cases</target>
        </trans-unit>
        <trans-unit id="e5bf67444bf916baf0a5ca7f7e7e4e4470051390" translate="yes" xml:space="preserve">
          <source>buildxobj is careful to cache any page used so that it only appears in
the output once.</source>
          <target state="translated">buildxobj is careful to cache any page used so that it only appears in the output once.</target>
        </trans-unit>
        <trans-unit id="df0185afd277857ff2edfadeb640841a5f0af966" translate="yes" xml:space="preserve">
          <source>cd into the tests directory, and then clone the package
github.com/pmaupin/static_pdfs into a subdirectory (also named
static_pdfs).</source>
          <target state="translated">cd into the tests directory, and then clone the package github.com/pmaupin/static_pdfs into a subdirectory (also named static_pdfs).</target>
        </trans-unit>
        <trans-unit id="d780042543b5df978df33c6ab77e9d6f18d299c3" translate="yes" xml:space="preserve">
          <source>encryption</source>
          <target state="translated">암호화</target>
        </trans-unit>
        <trans-unit id="a7b9fcdb233c1508b9a4bc3d9f408b8ea79f4403" translate="yes" xml:space="preserve">
          <source>metadata.py example renamed to cat.py</source>
          <target state="translated">metadata.py example renamed to cat.py</target>
        </trans-unit>
        <trans-unit id="7a6a969f8705a7bc6fc0e608620141cee076c132" translate="yes" xml:space="preserve">
          <source>mutool</source>
          <target state="translated">mutool</target>
        </trans-unit>
        <trans-unit id="6ff6e49e6b9f8b3b7a45b7f27bfe55e51e5a35cb" translate="yes" xml:space="preserve">
          <source>pagecatcher</source>
          <target state="translated">pagecatcher</target>
        </trans-unit>
        <trans-unit id="fef8fcbdf3bc3bb68bad70e70af26eb7dfcf28e0" translate="yes" xml:space="preserve">
          <source>pdfminer</source>
          <target state="translated">pdfminer</target>
        </trans-unit>
        <trans-unit id="26c38457174bbbe7c012ac4a5ffacc55f9311eec" translate="yes" xml:space="preserve">
          <source>pdfrw automatically handles indirect references on reading in a PDF
file. When pdfrw encounters an indirect PDF file object, the
corresponding Python object it creates will have an &amp;lsquo;indirect&amp;rsquo; attribute
with a value of True. When writing a PDF file, if you have created
arbitrary data, you just need to make sure that circular references are
broken up by putting an attribute named &amp;lsquo;indirect&amp;rsquo; which evaluates to
True on at least one object in every cycle.</source>
          <target state="translated">pdfrw automatically handles indirect references on reading in a PDF file. When pdfrw encounters an indirect PDF file object, the corresponding Python object it creates will have an &amp;lsquo;indirect&amp;rsquo; attribute with a value of True. When writing a PDF file, if you have created arbitrary data, you just need to make sure that circular references are broken up by putting an attribute named &amp;lsquo;indirect&amp;rsquo; which evaluates to True on at least one object in every cycle.</target>
        </trans-unit>
        <trans-unit id="aef053e16e5ea3d598a60b22d7ba03fa6c88fb5e" translate="yes" xml:space="preserve">
          <source>pdfrw can also be used in conjunction with reportlab, in order
to re-use portions of existing PDFs in new PDFs created with
reportlab.</source>
          <target state="translated">pdfrw can also be used in conjunction with reportlab, in order to re-use portions of existing PDFs in new PDFs created with reportlab.</target>
        </trans-unit>
        <trans-unit id="608e188b963df65b47837690fe5c3ee89ced052a" translate="yes" xml:space="preserve">
          <source>pdfrw will faithfully reproduce vector formats without
rasterization, so the rst2pdf package has used pdfrw
for PDF and SVG images by default since March 2010.</source>
          <target state="translated">pdfrw will faithfully reproduce vector formats without rasterization, so the rst2pdf package has used pdfrw for PDF and SVG images by default since March 2010.</target>
        </trans-unit>
        <trans-unit id="11dd45cae82d2b7aba41238b94e9f630d43689cd" translate="yes" xml:space="preserve">
          <source>pdftools</source>
          <target state="translated">pdftools</target>
        </trans-unit>
        <trans-unit id="bee01c90023be8da5c1f728116a74f5da753e6a9" translate="yes" xml:space="preserve">
          <source>pdftools feels large and I fell asleep trying to figure out how it
all fit together, but many others have done useful things with it.</source>
          <target state="translated">pdftools feels large and I fell asleep trying to figure out how it all fit together, but many others have done useful things with it.</target>
        </trans-unit>
        <trans-unit id="70394c1ddaacd26b3e8690211391eddc7e1075f8" translate="yes" xml:space="preserve">
          <source>pyPdf</source>
          <target state="translated">pyPdf</target>
        </trans-unit>
        <trans-unit id="f8de4974b9e11d069538d5d00ef678efd0869d18" translate="yes" xml:space="preserve">
          <source>pyPdf is, in some ways, very full-featured. It can do decompression
and decryption and seems to know a lot about items inside at least
some kinds of PDF files. In comparison, pdfrw knows less about
specific PDF file features (such as metadata), but focuses on trying
to have a more Pythonic API for mapping the PDF file container
syntax to Python, and (IMO) has a simpler and better PDF file
parser.  The Form XObject capability of pdfrw means that, in many
cases, it does not actually need to decompress objects &amp;ndash; they
can be left compressed.</source>
          <target state="translated">pyPdf is, in some ways, very full-featured. It can do decompression and decryption and seems to know a lot about items inside at least some kinds of PDF files. In comparison, pdfrw knows less about specific PDF file features (such as metadata), but focuses on trying to have a more Pythonic API for mapping the PDF file container syntax to Python, and (IMO) has a simpler and better PDF file parser. The Form XObject capability of pdfrw means that, in many cases, it does not actually need to decompress objects &amp;ndash; they can be left compressed.</target>
        </trans-unit>
        <trans-unit id="5221e03b81f6b3984bbf9c799fb7592564fa381e" translate="yes" xml:space="preserve">
          <source>reportlab</source>
          <target state="translated">reportlab</target>
        </trans-unit>
        <trans-unit id="d3de74fc7613f755ce1e9ccb7fe969a6815a449c" translate="yes" xml:space="preserve">
          <source>reportlab is must-have software if you want to programmatically
generate arbitrary PDFs.</source>
          <target state="translated">reportlab is must-have software if you want to programmatically generate arbitrary PDFs.</target>
        </trans-unit>
        <trans-unit id="960ecbd6646f8badf4139e7d4dfaea066cac38f0" translate="yes" xml:space="preserve">
          <source>reportlab objects. pdfrw can recursively create a set of reportlab
objects from its internal object format. This allows, for example,
Form XObjects to be used inside reportlab, so that you can reuse
content from an existing PDF file when building a new PDF with
reportlab.</source>
          <target state="translated">reportlab objects. pdfrw can recursively create a set of reportlab objects from its internal object format. This allows, for example, Form XObjects to be used inside reportlab, so that you can reuse content from an existing PDF file when building a new PDF with reportlab.</target>
        </trans-unit>
        <trans-unit id="26f5f4f9f82a930aea350bce3180a0a1af1dedfd" translate="yes" xml:space="preserve">
          <source>travisci is used at github, and runs the tests with py.test</source>
          <target state="translated">travisci is used at github, and runs the tests with py.test</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
