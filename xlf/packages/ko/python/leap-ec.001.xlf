<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/leap-ec/">
    <body>
      <group id="leap-ec">
        <trans-unit id="706d7f0c88f049886aaea08eea120791107b9b85" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Demo of LEAP running a 3-population island model on a real-valued optimization problem.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;실수 값 최적화 문제에서 3 인구 섬 모델을 실행하는 LEAP 데모.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="340ce4eaf50bf4bac490c53f90eb1e83703380ea" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Written by Dr. Jeffrey K. Bassett, Dr. Mark Coletti, and Eric Scott&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Jeffrey K. Bassett 박사, Mark Coletti 박사, Eric Scott 작성&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d08b6dd5695b0b13841bbc17dbd481889a849ec3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;LEAP: Evolutionary Algorithms in Python&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;LEAP : Python의 진화 알고리즘&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17170da13cbc0e38e44bcd4c9dd247541a1acc89" translate="yes" xml:space="preserve">
          <source>A general purpose Library for Evolutionary Algorithms in Python.</source>
          <target state="translated">Python의 진화 알고리즘을위한 범용 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="d7dcd5f7368a4bf45203caf6a939166023bcd44c" translate="yes" xml:space="preserve">
          <source>A number of LEAP demo applications are found in the the &lt;code&gt;example/&lt;/code&gt; directory of the github repository:</source>
          <target state="translated">github 저장소 의 &lt;code&gt;example/&lt;/code&gt; 디렉토리 에서 여러 LEAP 데모 애플리케이션을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ada83324d7b5c812c05c726cc9fa2d6959af882" translate="yes" xml:space="preserve">
          <source>And use the Makefile to install the package:</source>
          <target state="translated">그리고 Makefile을 사용하여 패키지를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">선적 서류 비치</target>
        </trans-unit>
        <trans-unit id="216faf26a2dea7c48ab99073bb84bb955f107198" translate="yes" xml:space="preserve">
          <source>Genetic Algorithm Example</source>
          <target state="translated">유전 알고리즘 예</target>
        </trans-unit>
        <trans-unit id="953a2ea8bb7865d1a53009ca9ab170e83a693f67" translate="yes" xml:space="preserve">
          <source>Get the stable version of LEAP from the Python package index with</source>
          <target state="translated">다음을 사용하여 Python 패키지 색인에서 안정적인 버전의 LEAP를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="98b1e4884835470f97e3c5181d8ec9c12a874ed2" translate="yes" xml:space="preserve">
          <source>Here's an example that applies a genetic algorithm variant to solve the
&lt;code&gt;MaxOnes&lt;/code&gt; optimization problem.  It uses bitflip mutation, uniform crossover,
and binary tournament selection:</source>
          <target state="translated">다음은 &lt;code&gt;MaxOnes&lt;/code&gt; 최적화 문제 를 해결하기 위해 유전 알고리즘 변형을 적용하는 예입니다 . 비트 플립 변형, 균일 한 크로스 오버, 바이너리 토너먼트 선택을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2a2b6e5167889265a825bda1e18ece25ec840633" translate="yes" xml:space="preserve">
          <source>If you want to build a fresh set of docs for yourself, you can do so after running &lt;code&gt;make setup&lt;/code&gt;:</source>
          <target state="translated">새로운 문서 세트를 직접 빌드하려면 &lt;code&gt;make setup&lt;/code&gt; 을 실행 한 후 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cb0beea38cec465a867d15d24bcb2e4ceeb338ae" translate="yes" xml:space="preserve">
          <source>Installing from Source</source>
          <target state="translated">소스에서 설치</target>
        </trans-unit>
        <trans-unit id="9661db24591b38fb5d0c28cf5972b1dfbfb766d3" translate="yes" xml:space="preserve">
          <source>LEAP is a general purpose Evolutionary Computation package that combines
readable and easy-to-use syntax for search and optimization algorithms with
powerful distribution and visualization features.</source>
          <target state="translated">LEAP는 강력한 배포 및 시각화 기능과 검색 및 최적화 알고리즘을위한 읽기 쉽고 사용하기 쉬운 구문을 결합한 범용 Evolutionary Computation 패키지입니다.</target>
        </trans-unit>
        <trans-unit id="c15276842739609722acd88f76549fbfb8a03276" translate="yes" xml:space="preserve">
          <source>LEAP ships with a two-part &lt;code&gt;pytest&lt;/code&gt; harness, divided into fast and slow tests.  You can run them with</source>
          <target state="translated">LEAP 는 빠른 테스트와 느린 테스트로 나누어 진 두 부분으로 구성된 &lt;code&gt;pytest&lt;/code&gt; 하네스 와 함께 제공됩니다 . 당신은 그들을 실행할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="82883064b15aeabe76eddd6b678cf00bf687b3a7" translate="yes" xml:space="preserve">
          <source>LEAP's signature is its operator pipeline, which uses a simple list of
functional operators to concisely express a metaheuristic algorithm's
configuration as high-level code.  Adding metrics, visualization, or
special features (like distribution, coevolution, or island migrations)
is often as simple as adding operators into the pipeline.</source>
          <target state="translated">LEAP의 서명은 간단한 기능 연산자 목록을 사용하여 메타 휴리스틱 알고리즘의 구성을 상위 수준 코드로 간결하게 표현하는 연산자 파이프 라인입니다. 메트릭, 시각화 또는 특수 기능 (예 : 배포, 공동 진화 또는 아일랜드 마이그레이션)을 추가하는 것은 종종 파이프 라인에 연산자를 추가하는 것만 큼 간단합니다.</target>
        </trans-unit>
        <trans-unit id="65607507695dbb68853f7200e33956e39fd6a15d" translate="yes" xml:space="preserve">
          <source>More Examples</source>
          <target state="translated">더 많은 예</target>
        </trans-unit>
        <trans-unit id="3f938428fb46002c0de7747d302e8c275a2281b7" translate="yes" xml:space="preserve">
          <source>Run the Test Suite</source>
          <target state="translated">테스트 스위트 실행</target>
        </trans-unit>
        <trans-unit id="c15fa4b758d35cc97d9959bcc45edd294156d605" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
          <target state="translated">간단한 예</target>
        </trans-unit>
        <trans-unit id="40a09be7ecd2e6602e93c9a8bf0953e3f5e81d04" translate="yes" xml:space="preserve">
          <source>The easiest way to use an evolutionary algorithm in LEAP is to use the
&lt;code&gt;leap_ec.simple&lt;/code&gt; package, which contains simple interfaces for pre-built
algorithms:</source>
          <target state="translated">LEAP에서 진화 알고리즘을 사용하는 가장 쉬운 방법 은 미리 빌드 된 알고리즘을위한 간단한 인터페이스를 포함 하는 &lt;code&gt;leap_ec.simple&lt;/code&gt; 패키지 를 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="287dc68b36959dcb3f4618f0302630b1dfde6cf9" translate="yes" xml:space="preserve">
          <source>The next-easiest way to use LEAP is to configure a custom algorithm via one
of the metaheuristic functions in the &lt;code&gt;leap_ec.algorithms&lt;/code&gt; package.  These
interfaces off you a flexible way to customize the various operators,
representations, and other components that go into a modern evolutionary
algorithm.</source>
          <target state="translated">LEAP를 사용하는 가장 쉬운 방법은 &lt;code&gt;leap_ec.algorithms&lt;/code&gt; 패키지 의 메타 휴리스틱 함수 중 하나를 통해 사용자 지정 알고리즘을 구성하는 것입니다 . 이러한 인터페이스는 최신 진화 알고리즘에 들어가는 다양한 연산자, 표현 및 기타 구성 요소를 사용자 정의하는 유연한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="70ce07171f370929bccd088d85eb3490fdca9852" translate="yes" xml:space="preserve">
          <source>The stable version of LEAP's full documentation is over at &lt;a href=&quot;https://leap_gmu.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt;.</source>
          <target state="translated">LEAP의 전체 문서의 안정적인 버전은 &lt;a href=&quot;https://leap_gmu.readthedocs.io/&quot;&gt;ReadTheDocs&lt;/a&gt; 에서 끝났습니다 .</target>
        </trans-unit>
        <trans-unit id="24ac1b730208261b4c6dce716659e3e5177e717a" translate="yes" xml:space="preserve">
          <source>This will create HTML documentation in the &lt;code&gt;docs/build/html/&lt;/code&gt; directory.  It might take a while the first time,
since building the docs involves generating some plots and executing some example algorithms.</source>
          <target state="translated">그러면 &lt;code&gt;docs/build/html/&lt;/code&gt; 디렉토리에 HTML 문서가 생성됩니다 . 문서를 작성하는 데 일부 플롯 생성과 일부 예제 알고리즘 실행이 포함되므로 처음에는 시간이 걸릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33be4b2f70a399edccc01dbcc1160e6b8bb286d4" translate="yes" xml:space="preserve">
          <source>To install a source distribution of LEAP, clone the repo:</source>
          <target state="translated">LEAP의 소스 배포를 설치하려면 리포지토리를 복제합니다.</target>
        </trans-unit>
        <trans-unit id="67d4265ac65da2927de38887eec57f3fc38f7165" translate="yes" xml:space="preserve">
          <source>Using LEAP</source>
          <target state="translated">LEAP 사용</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">과</target>
        </trans-unit>
        <trans-unit id="7e13a6af9adbba378f33d62a1b34d72ee88fd0a7" translate="yes" xml:space="preserve">
          <source>respectively.</source>
          <target state="translated">각기.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
