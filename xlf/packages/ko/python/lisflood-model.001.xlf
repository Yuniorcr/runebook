<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/lisflood-model/">
    <body>
      <group id="lisflood-model">
        <trans-unit id="f5a70ebf38e5204631f154037e88711a35c8e56d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/ec-jrc/lisflood-code&quot;&gt;https://github.com/ec-jrc/lisflood-code&lt;/a&gt; (this repository)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/ec-jrc/lisflood-code&quot;&gt;https://github.com/ec-jrc/lisflood-code&lt;/a&gt; (이 저장소)</target>
        </trans-unit>
        <trans-unit id="f9a56caeef5914fb0e23b98d65cf00abd25d9b22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Documentation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;선적 서류 비치&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f92e515a09c6556d3e4d74bf9bcdb65752d32b2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Project&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;계획&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9884d83477481e3e4a02a37194f54a67783273c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source code&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;소스 코드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cc1d86ad3dec745808f7f2e62ec9e1fc92052b3" translate="yes" xml:space="preserve">
          <source>After this command, you can find all files to run a test against a catchment under the directory you mapped: &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment1&lt;/code&gt;</source>
          <target state="translated">이 명령 후에 매핑 한 디렉토리 아래에서 유역에 대해 테스트를 실행할 모든 파일을 찾을 수 있습니다. &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2550d9ef4edfb8b4e32da8b929e99d174b6bdbd3" translate="yes" xml:space="preserve">
          <source>Calibration tool</source>
          <target state="translated">보정 도구</target>
        </trans-unit>
        <trans-unit id="6d7e0ad55992656c65f95da8077f6ff9d5d18727" translate="yes" xml:space="preserve">
          <source>Clone the master branch of this repository (you need to have git installed on your machine).</source>
          <target state="translated">이 저장소의 마스터 브랜치를 복제합니다 (머신에 git이 설치되어 있어야 함).</target>
        </trans-unit>
        <trans-unit id="09e5be92217f34fd97102791fb83c603429aa9ed" translate="yes" xml:space="preserve">
          <source>Collaborate</source>
          <target state="translated">협업</target>
        </trans-unit>
        <trans-unit id="6dbf52f8a91c0112ba71cf1a8ac73765ffb1d516" translate="yes" xml:space="preserve">
          <source>Command above will also install the executable &lt;code&gt;lisflood&lt;/code&gt; in the virtualenv, so that you can run LISFLOOD with the following:</source>
          <target state="translated">위의 명령은 또한 virtualenv에 실행 가능한 &lt;code&gt;lisflood&lt;/code&gt; 를 설치 하므로 다음과 같이 LISFLOOD를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99ccd8cefc5a97400a8da81fc14e1e8d76212ff0" translate="yes" xml:space="preserve">
          <source>Compile the cython module kinematic_wave_parallel_tool</source>
          <target state="translated">cython 모듈 kinematic_wave_parallel_tool 컴파일</target>
        </trans-unit>
        <trans-unit id="75e9eb550ef8830df4087ed3e618e418590b5323" translate="yes" xml:space="preserve">
          <source>Copy catchment files from container to your host, using mapped directories:</source>
          <target state="translated">매핑 된 디렉토리를 사용하여 컨테이너에서 호스트로 유역 파일을 복사합니다.</target>
        </trans-unit>
        <trans-unit id="96c9832311d686e35ab40bdc7cfd6f32ecd3c52b" translate="yes" xml:space="preserve">
          <source>Delete the files *.so (if any) in directory hydrological-modules</source>
          <target state="translated">hydrological-modules 디렉토리에서 * .so 파일 (있는 경우)을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="2fccb4697e15d7027e2840920bb6fda8e3795dcc" translate="yes" xml:space="preserve">
          <source>Docker image</source>
          <target state="translated">Docker 이미지</target>
        </trans-unit>
        <trans-unit id="68a4194227be4ab74bc3d32363417c0fc1f30055" translate="yes" xml:space="preserve">
          <source>Docs</source>
          <target state="translated">문서</target>
        </trans-unit>
        <trans-unit id="caa68eafd379e07405ef3d18542c81bb1cea0898" translate="yes" xml:space="preserve">
          <source>Execute lisflood with a Docker image:</source>
          <target state="translated">Docker 이미지로 lisflood를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="82f564fcee3ff8dc3056b530d43342e2d261cf59" translate="yes" xml:space="preserve">
          <source>GDAL should be installed as well. To install GDAL C library and gdal python library on debian/ubuntu systems, we found good instructions &lt;a href=&quot;https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">GDAL도 설치해야합니다. debian / ubuntu 시스템에 GDAL C 라이브러리와 gdal python 라이브러리를 설치하려면 &lt;a href=&quot;https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html&quot;&gt;여기&lt;/a&gt; 에서 좋은 지침을 찾았 습니다 .</target>
        </trans-unit>
        <trans-unit id="0ca9d0c71408c6a6852839b2197eab62ac1f4278" translate="yes" xml:space="preserve">
          <source>If the command above successed without errors, producing dis.nc into tests/data/TestCatchment1/outputs folder, your lisflood installation was correct.</source>
          <target state="translated">위의 명령이 오류없이 성공하고 dis.nc를 tests / data / TestCatchment1 / outputs 폴더에 생성하면 lisflood 설치가 올바른 것입니다.</target>
        </trans-unit>
        <trans-unit id="2b9bbe592c37baa4c78ab2875e9a710517c6383d" translate="yes" xml:space="preserve">
          <source>If you already have GDAL installed in your computer, make sure that the GDAL and the python gdal library have the same version.</source>
          <target state="translated">컴퓨터에 이미 GDAL이 설치되어있는 경우 GDAL과 python gdal 라이브러리의 버전이 동일한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="5bf4502cfc076a9c2ad05a0d1e24c9a05b55b9d9" translate="yes" xml:space="preserve">
          <source>If you find an issue in our code, please follow the &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub flow&lt;/a&gt; to propose your changes (Fork, commit your changes and ask for a Pull Request).
When you develop, you need to run our unit tests before to propose a pull request.
Simply execute &lt;code&gt;tox&lt;/code&gt; or &lt;code&gt;pytest&lt;/code&gt; on command line from project folder.</source>
          <target state="translated">코드에서 문제를 발견 한 경우 &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub 흐름&lt;/a&gt; 에 따라 변경 사항을 제안하십시오 (포크, 변경 사항 커밋 및 풀 요청 요청). 개발할 때 풀 요청을 제안하기 전에 단위 테스트를 실행해야합니다. 프로젝트 폴더의 명령 줄에서 &lt;code&gt;tox&lt;/code&gt; 또는 &lt;code&gt;pytest&lt;/code&gt; 를 실행하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="9611e74d64102180a0eb54d2a1866236589092a1" translate="yes" xml:space="preserve">
          <source>Important: the module has to be compiled on the machine where the model is run - the resulting binary is not portable.</source>
          <target state="translated">중요 : 모듈은 모델이 실행되는 머신에서 컴파일되어야합니다. 결과 바이너리는 이식 가능하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="984cd4284bc5646539efa1c933ab3ee699f4ebd4" translate="yes" xml:space="preserve">
          <source>Inside the hydrological_modules folder, execute &quot;python compile_kinematic_wave_parallel_tools.py build_ext --inplace&quot;</source>
          <target state="translated">hydrological_modules 폴더에서 &quot;python compile_kinematic_wave_parallel_tools.py build_ext --inplace&quot;를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="72569447fc3cefa3c6e3fa3fdb0f03a77a50b741" translate="yes" xml:space="preserve">
          <source>Install requirements into a Python 3 virtualenv.
We recommend to follow the instructions on &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;virtualenv docs&lt;/a&gt;.
Assuming you've activated your virtual environment, you can now install requirements with pip:</source>
          <target state="translated">Python 3 virtualenv에 요구 사항을 설치합니다. &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;virtualenv 문서&lt;/a&gt; 의 지침을 따르는 것이 좋습니다 . 가상 환경을 활성화했다고 가정하면 이제 pip를 사용하여 요구 사항을 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9639a1640ed3297e6e9e54047bf09e6afd36f13c" translate="yes" xml:space="preserve">
          <source>LISFLOOD is also distributed as a standard python package. You can install the pip package in your Python 3 virtualenv:</source>
          <target state="translated">LISFLOOD는 표준 파이썬 패키지로도 배포됩니다. Python 3 virtualenv에 pip 패키지를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d33062e21cd4cf97f04c936d18f71f12067b1d8b" translate="yes" xml:space="preserve">
          <source>LISFLOOD model python module</source>
          <target state="translated">LISFLOOD 모델 파이썬 모듈</target>
        </trans-unit>
        <trans-unit id="5dd5fa74710baff78d8910353e7f6cb137d665fc" translate="yes" xml:space="preserve">
          <source>Lisflood</source>
          <target state="translated">Lisflood</target>
        </trans-unit>
        <trans-unit id="6904f96606b8308e1edd02cbaf1569120d340827" translate="yes" xml:space="preserve">
          <source>Lisflood OS</source>
          <target state="translated">Lisflood OS</target>
        </trans-unit>
        <trans-unit id="e72f3af253c5368a1c5ab922f5774f151e55e089" translate="yes" xml:space="preserve">
          <source>Lisflood Usecases</source>
          <target state="translated">Lisflood 사용 사례</target>
        </trans-unit>
        <trans-unit id="d497aeb6b8181fa03b11ab0530d6a1cd234b45c0" translate="yes" xml:space="preserve">
          <source>Lisflood Utilities</source>
          <target state="translated">Lisflood 유틸리티</target>
        </trans-unit>
        <trans-unit id="af7ac08fe444302fcf967e887c640a037860e09f" translate="yes" xml:space="preserve">
          <source>Lisvap</source>
          <target state="translated">Lisvap</target>
        </trans-unit>
        <trans-unit id="6029b82adea2d88a40994be36142e94d93797f6d" translate="yes" xml:space="preserve">
          <source>Model docs</source>
          <target state="translated">모델 문서</target>
        </trans-unit>
        <trans-unit id="d98b3357ed1732017e20a7b4283fb1f7ec7891ff" translate="yes" xml:space="preserve">
          <source>Now your environment should be set up to run lisflood. Try with a prepared settings file for one of the two test catchments:</source>
          <target state="translated">이제 lisflood를 실행하도록 환경을 설정해야합니다. 두 가지 테스트 유역 중 하나에 대해 준비된 설정 파일을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="286081987f85b323e4f97f4897df7d6b3f1518cf" translate="yes" xml:space="preserve">
          <source>Now, you can run LISFLOOD as a docker container to test included catchments. Only thing you need to do is to map the TestCatchment1 folder to the container folder &lt;code&gt;input&lt;/code&gt;, by using -v option.
In the XML settings file, all paths are adjusted to be relative to the very same settings file, so you don't need to edit paths, as long as you keep same folders structure.</source>
          <target state="translated">이제 LISFLOOD를 Docker 컨테이너로 실행하여 포함 된 유역을 테스트 할 수 있습니다. -v 옵션을 사용하여 TestCatchment1 폴더를 컨테이너 폴더 &lt;code&gt;input&lt;/code&gt; 에 매핑하기 만하면 됩니다. XML 설정 파일에서 모든 경로는 매우 동일한 설정 파일을 기준으로 조정되므로 동일한 폴더 구조를 유지하는 한 경로를 편집 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="bcee8eb5d4eb54a05e43e4969ca7785a3a847f48" translate="yes" xml:space="preserve">
          <source>Once LISFLOOD finished, you find reported maps in &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment/outputs/&lt;/code&gt; folder.</source>
          <target state="translated">LISFLOOD가 완료되면 &lt;code&gt;/absolute_path/to/my/local/folder/TestCatchment/outputs/&lt;/code&gt; 폴더 에서보고 된 맵을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="071846331a4fbf6d22d1f577ca4b03db90e84064" translate="yes" xml:space="preserve">
          <source>Other useful resources</source>
          <target state="translated">기타 유용한 리소스</target>
        </trans-unit>
        <trans-unit id="d5cab98a44e31c7078e90f4eab8005d71ee982ae" translate="yes" xml:space="preserve">
          <source>Pull image from repository:</source>
          <target state="translated">저장소에서 이미지 가져 오기 :</target>
        </trans-unit>
        <trans-unit id="d14740d63c1b28ba6dadec5cd587e9634468a4f2" translate="yes" xml:space="preserve">
          <source>Pypi packaged LISFLOOD</source>
          <target state="translated">Pypi 패키지 LISFLOOD</target>
        </trans-unit>
        <trans-unit id="b342f020314b26a7fba16949f44e287503b5ee8f" translate="yes" xml:space="preserve">
          <source>Quick start</source>
          <target state="translated">빠른 시작</target>
        </trans-unit>
        <trans-unit id="c5f55d2f7a5b3d22b88b0048a560841f934b9835" translate="yes" xml:space="preserve">
          <source>Run a cold run for the test catchment</source>
          <target state="translated">테스트 집수를위한 콜드 런 실행</target>
        </trans-unit>
        <trans-unit id="7c997b69c234fba79de979660eea389fbabe7fbd" translate="yes" xml:space="preserve">
          <source>Run tests in image:</source>
          <target state="translated">이미지에서 테스트 실행 :</target>
        </trans-unit>
        <trans-unit id="bdb60ecf7f3f9dfc72f52a132d9fafc262ef2554" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;official website&lt;/a&gt; for more info about pytest.</source>
          <target state="translated">pytest에 대한 자세한 정보는 &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;공식 웹 사이트&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="da2e976462110467f5f0d87ac80728472e8b5a3e" translate="yes" xml:space="preserve">
          <source>Then in the settings file the option &quot;numberParallelThreadsKinematicWave&quot; may take the following values:
- &quot;0&quot;           : auto-detection of the machine/node's number of CPUs (all CPUs are used minus 1) (do not set it if other simulations are running on the same machine/node)
- &quot;1&quot;           : serial execution (not parallel)
- &quot;2&quot;, &quot;3&quot;, ... : manual setting of the number of parallel threads.
(if exceeding the number of CPUs, the option is set to &quot;0&quot;) --&amp;gt;</source>
          <target state="translated">그런 다음 설정 파일에서 &quot;numberParallelThreadsKinematicWave&quot;옵션은 다음 값을 가질 수 있습니다.- &quot;0&quot;: 머신 / 노드의 CPU 수 자동 감지 (모든 CPU가 1을 뺀 값으로 사용됨) (다른 시뮬레이션이 실행중인 경우 설정하지 않음) - &quot;1&quot;: 직렬 실행 (병렬이 아님)- &quot;2&quot;, &quot;3&quot;, ... : 병렬 스레드 수 수동 설정. (CPU 수를 초과하는 경우 옵션은 &quot;0&quot;으로 설정 됨)-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="773e27a9ff328adf3821461b29377e617bd1a08d" translate="yes" xml:space="preserve">
          <source>This repository hosts source code of LISFLOOD model.
Go to &lt;a href=&quot;https://ec-jrc.github.io/lisflood/&quot;&gt;Lisflood OS page&lt;/a&gt; for more information.</source>
          <target state="translated">이 저장소는 LISFLOOD 모델의 소스 코드를 호스팅합니다. 자세한 내용 은 &lt;a href=&quot;https://ec-jrc.github.io/lisflood/&quot;&gt;Lisflood OS 페이지&lt;/a&gt; 로 이동 하십시오.</target>
        </trans-unit>
        <trans-unit id="863218ecd4bd19a52d11d513030b7ec979fe4634" translate="yes" xml:space="preserve">
          <source>To compile this Cython module to enable OpenMP multithreading (parallel kinematic wave):</source>
          <target state="translated">이 Cython 모듈을 컴파일하여 OpenMP 멀티 스레딩 (평행 운동학 파)을 활성화하려면 :</target>
        </trans-unit>
        <trans-unit id="100bdf67dec2dca99cc9f783954ef6fe26135005" translate="yes" xml:space="preserve">
          <source>Tox tests can last minutes. You can also just use pytest and run tests in a single environment (e.g. Python 3.7).
This is often enough and will save you some time if you need to run tests frequently.</source>
          <target state="translated">독성 테스트는 몇 분 동안 지속될 수 있습니다. 또한 pytest를 사용하고 단일 환경 (예 : Python 3.7)에서 테스트를 실행할 수도 있습니다. 이 정도면 충분하며 테스트를 자주 실행해야하는 경우 시간을 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a907a2a9e2d8f2282b25aa37fedd952420dd3fa" translate="yes" xml:space="preserve">
          <source>User guide</source>
          <target state="translated">사용자 설명서</target>
        </trans-unit>
        <trans-unit id="8805808855a21562903815a7c7fe4554162584ef" translate="yes" xml:space="preserve">
          <source>You can download code and datasets for testing the model.
Follow this instruction for a basic test (included in this repository under &lt;a href=&quot;https://github.com/ec-jrc/lisflood-code/tree/master/tests/data/TestCatchment1&quot;&gt;tests/data/TestCatchment1&lt;/a&gt;)</source>
          <target state="translated">모델 테스트를위한 코드와 데이터 세트를 다운로드 할 수 있습니다. 기본 테스트를 위해이 지침을 따르십시오 (이 저장소의 &lt;a href=&quot;https://github.com/ec-jrc/lisflood-code/tree/master/tests/data/TestCatchment1&quot;&gt;tests / data / TestCatchment1에 포함됨&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e1bd048441a7158d9b72de646e746f13bce9481c" translate="yes" xml:space="preserve">
          <source>You can use the updated docker image to run lisflood, so without taking care to install dependencies on your system.</source>
          <target state="translated">업데이트 된 도커 이미지를 사용하여 lisflood를 실행할 수 있으므로 시스템에 종속성을 설치하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="8b0e71e596d783b7ae40a69281fb10bf2862d109" translate="yes" xml:space="preserve">
          <source>You need to install PCRaster (4.2.x is first version which works with Python3) and include its python interface in PYTHONPATH environment variable.
For details, please follow instruction on &lt;a href=&quot;http://pcraster.geo.uu.nl/getting-started/pcraster-on-linux/&quot;&gt;official docs&lt;/a&gt;.</source>
          <target state="translated">PCRaster (4.2.x는 Python3에서 작동하는 첫 번째 버전)를 설치하고 PYTHONPATH 환경 변수에 Python 인터페이스를 포함해야합니다. 자세한 내용은 &lt;a href=&quot;http://pcraster.geo.uu.nl/getting-started/pcraster-on-linux/&quot;&gt;공식 문서의&lt;/a&gt; 지침을 따르십시오 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
