<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/dutest/">
    <body>
      <group id="dutest">
        <trans-unit id="a8502b8c78697a48f1111c1ab0a528c9079e852e" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Doctest and unittest&amp;hellip; now they&amp;rsquo;ll live happily together&amp;rdquo;, O. Lang
(2008) The Python Papers, Volume 3, Issue 1, pp. 31:51</source>
          <target state="translated">&quot;Doctest와 unittest&amp;hellip; 이제 그들은 함께 행복하게 살 것입니다.&quot;, O. Lang (2008) The Python Papers, Volume 3, Issue 1, pp. 31:51</target>
        </trans-unit>
        <trans-unit id="404c8e9a8b5591e2e2768b18bc2137864b4554fc" translate="yes" xml:space="preserve">
          <source>) are used.</source>
          <target state="translated">)이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ff52f7388d4d2806ceb3885c94a6293a9474f761" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DocTestLoader&lt;/strong&gt; class in &lt;em&gt;oop.utils.dutest&lt;/em&gt; does not raise
&lt;strong&gt;ValueError&lt;/strong&gt; exception if no doctests are found in a module. This
is doctest behavior. It was assumed up to this point, but now it has
proven to be a headache when these loaders are used together with
instances of &lt;strong&gt;PackageTestLoader&lt;/strong&gt; in order to retrieve all the
tests defined across a package hierarchy.</source>
          <target state="translated">&lt;strong&gt;DocTestLoader&lt;/strong&gt; 의 클래스 &lt;em&gt;oop.utils.dutest는&lt;/em&gt; 발생시키지 않습니다 &lt;strong&gt;는 ValueError&lt;/strong&gt; 더 doctest를이 모듈에서 발견되지 않은 경우는 예외. 이것은 doctest 동작입니다. 이 시점까지 가정했지만 이제는 패키지 계층 구조에 정의 된 모든 테스트를 검색하기 위해 이러한 로더를 &lt;strong&gt;PackageTestLoader의&lt;/strong&gt; 인스턴스와 함께 사용할 때 골칫거리 인 것으로 입증되었습니다 .</target>
        </trans-unit>
        <trans-unit id="fd7049d9e7f9f14f8c495f875ab4f3d99018d9d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PackageTestLoader&lt;/strong&gt; class added to dutest module. It loads
all the tests found throughout a package hierarchy using another
loader. The later is used for retrieving the tests contained inside
every module matching a specified pattern.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;dutest 모듈에 &lt;strong&gt;PackageTestLoader&lt;/strong&gt; 클래스가 추가되었습니다. 다른 로더를 사용하여 패키지 계층 전체에서 발견 된 모든 테스트를로드합니다. 나중은 지정된 패턴과 일치하는 모든 모듈 내에 포함 된 테스트를 검색하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9f652aac6a9688e1329df4a883e04bb8bfe63118" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dutest.main&lt;/strong&gt; is an alias for &lt;strong&gt;dutest.VerboseTestProgram&lt;/strong&gt;. This
class fixes a minor bug (&amp;hellip; IMO) I found while specifying different
verbosity levels from the command line to unittest.TestProgram. It
also employs by default &lt;strong&gt;dutest.defaultTestLoader&lt;/strong&gt; instead of
&lt;strong&gt;unittest.defaultTestLoader&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;dutest.main는&lt;/strong&gt; 별칭입니다 &lt;strong&gt;dutest.VerboseTestProgram&lt;/strong&gt; . 이 클래스는 명령 줄에서 unittest.TestProgram까지 다양한 상세 수준을 지정하는 동안 발견 한 사소한 버그 (&amp;hellip; IMO)를 수정합니다. 또한 &lt;strong&gt;unittest.defaultTestLoader&lt;/strong&gt; 대신 기본적으로 &lt;strong&gt;dutest.defaultTestLoader를&lt;/strong&gt; 사용 합니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85bd8ef04f5c9eb5a1f44fe9aa7a600f30d72f09" translate="yes" xml:space="preserve">
          <source>A fuller explanation can be found in the following article:</source>
          <target state="translated">자세한 설명은 다음 기사에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc6618a66324d83e3c93607b5d411606df646ab4" translate="yes" xml:space="preserve">
          <source>A new &lt;strong&gt;TestLoader&lt;/strong&gt; descendant now allows to load (using
unittest-style) &lt;strong&gt;TestCase&lt;/strong&gt; s which check the match made for
doctests. It provides integration with &lt;em&gt;TestProgram&lt;/em&gt;, supports
building complex &lt;strong&gt;TestSuite&lt;/strong&gt; s in a more natural way, and eases the
use of specialized instances of &lt;strong&gt;TestCase&lt;/strong&gt; s built out of doctest
examples.</source>
          <target state="translated">새로운 &lt;strong&gt;TestLoader&lt;/strong&gt; 자손은 이제 doctest에 대한 일치를 확인하는 (unittest 스타일을 사용하여) &lt;strong&gt;TestCase&lt;/strong&gt; 를로드 할 수 있습니다 . &lt;em&gt;TestProgram&lt;/em&gt; 과의 통합을 제공 하고보다 자연스러운 방식으로 복잡한 &lt;strong&gt;TestSuite&lt;/strong&gt; 빌드를 지원하며 doctest 예제로 빌드 된 &lt;strong&gt;TestCase&lt;/strong&gt; 의 특수 인스턴스 사용을 용이하게합니다 .</target>
        </trans-unit>
        <trans-unit id="065161673b740534c0ff944a4dddb22a87473ca2" translate="yes" xml:space="preserve">
          <source>A new hierarchy of &lt;strong&gt;TestCase&lt;/strong&gt; descendants (extensions of
&lt;strong&gt;DocTestCase&lt;/strong&gt; class) is now possible so for example, &lt;em&gt;setUp&lt;/em&gt; and
&lt;em&gt;tearDown&lt;/em&gt; may be redefined across a hierarchy of &lt;strong&gt;TestCase&lt;/strong&gt; s
instead of providing this methods as parameters to
a function (breaking OOP philosophy and logic); or
maybe even to represent failures and errors in a
custom way.</source>
          <target state="translated">이제 &lt;strong&gt;TestCase&lt;/strong&gt; 하위 항목 의 새로운 계층 ( &lt;strong&gt;DocTestCase&lt;/strong&gt; 클래스 확장 )이 가능하므로 예를 들어 &lt;em&gt;setUp&lt;/em&gt; 및 &lt;em&gt;tearDown&lt;/em&gt; 은이 메서드를 함수에 매개 변수로 제공하는 대신 &lt;strong&gt;TestCase&lt;/strong&gt; 계층 전체에서 재정의 할 수 있습니다 ( &lt;strong&gt;OPP&lt;/strong&gt; 철학과 논리를 깨는 것). 또는 사용자 지정 방식으로 실패 및 오류를 나타낼 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2c9835109237c1a261069a47e855516ceb664eb" translate="yes" xml:space="preserve">
          <source>A new hierarchy of doctest TestCases is now
possible so for example, setUp and tearDown may
be redefined across a hierarchy of TestCases
instead of providing this methods as parameters to
a function (breaking OOP philosophy and logic); or
maybe even failures and errors can be represented in a
custom way.</source>
          <target state="translated">doctest TestCases의 새로운 계층이 이제 가능하므로 예를 들어 setUp 및 tearDown은이 메서드를 함수에 매개 변수로 제공하는 대신 TestCases 계층 전체에서 재정의 할 수 있습니다 (OPP 철학 및 논리 위반). 또는 실패와 오류도 사용자 지정 방식으로 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb05d75ce77887f4f02765998de76cd045bf6b5c" translate="yes" xml:space="preserve">
          <source>A new unitest.TestLoader descendant now allows to load instances
of TestCases for doctests using unittest-style, supports building
complex test suites in a more natural way, and eases the use of
specialized instances of TestCase built out of doctest examples.</source>
          <target state="translated">이제 새로운 unitest.TestLoader 하위 항목을 사용하면 unittest 스타일을 사용하여 doctest 용 TestCase 인스턴스를로드 할 수 있고,보다 자연스러운 방식으로 복잡한 테스트 스위트 빌드를 지원하고, doctest 예제로 빌드 된 TestCase의 특수 인스턴스를 쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3037e54f61d85354df827de01f5c42f65c4bfcb" translate="yes" xml:space="preserve">
          <source>A whole new &lt;strong&gt;unittest&lt;/strong&gt; API to integrate &lt;strong&gt;doctest&lt;/strong&gt; with unittest
runners.</source>
          <target state="translated">&lt;strong&gt;doctest&lt;/strong&gt; 를 unittest 러너와 통합 하는 완전히 새로운 &lt;strong&gt;unittest&lt;/strong&gt; API 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b27bcbfcbd07602177e08d155a41bb1bb31b5e5" translate="yes" xml:space="preserve">
          <source>A whole new unittest API for doctest adds object orientation and
eliminates functions with big signatures.</source>
          <target state="translated">doctest를위한 완전히 새로운 unittest API는 객체 방향을 추가하고 큰 서명이있는 기능을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="c0432053430a9a4c0e13c0d7875a05ef308fd40d" translate="yes" xml:space="preserve">
          <source>Allows to parameterize doctest behavior via doctest options</source>
          <target state="translated">doctest 옵션을 통해 doctest 동작을 매개 변수화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a7795c80e87d881fcc9afee9bd89249e97496eb" translate="yes" xml:space="preserve">
          <source>Allows to perform regression testing over tests written
using &lt;strong&gt;doctest&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;doctest를&lt;/strong&gt; 사용하여 작성된 테스트에 대해 회귀 테스트를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="942aa50ebab3cc96b4a54f316874bea65c747be4" translate="yes" xml:space="preserve">
          <source>Allows to perform regression testing over tests written
using doctest.</source>
          <target state="translated">doctest를 사용하여 작성된 테스트에 대해 회귀 테스트를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff39c80d144b8d55f0042ea19a7e5861d7046051" translate="yes" xml:space="preserve">
          <source>An object-oriented API to test doctests using unittest runners.</source>
          <target state="translated">unittest 실행기를 사용하여 doctest를 테스트하는 객체 지향 API입니다.</target>
        </trans-unit>
        <trans-unit id="963804ea0f0ee7afad3cf15d4b96aac64f0f8b99" translate="yes" xml:space="preserve">
          <source>Bug fixed&amp;hellip; &lt;strong&gt;DocTestCase&lt;/strong&gt; instances could not be instantiated because</source>
          <target state="translated">버그 수정&amp;hellip; &lt;strong&gt;DocTestCase&lt;/strong&gt; 인스턴스를 인스턴스화 할 수없는 이유</target>
        </trans-unit>
        <trans-unit id="e03fc75ac4080fc17f64b95e299b8258f1f5b33f" translate="yes" xml:space="preserve">
          <source>Bug fixed&amp;hellip; The class &lt;strong&gt;PackageTestLoader&lt;/strong&gt; loaded the tests
defined in a packages&amp;rsquo; children but not those specified in the
top-level module. Now the tests specified in the module supplied in
to loadTestsFromModule method are also included in the resulting
test suite.</source>
          <target state="translated">버그 수정&amp;hellip; &lt;strong&gt;PackageTestLoader&lt;/strong&gt; 클래스 가 패키지의 자식에 정의 된 테스트를로드했지만 최상위 모듈에 지정된 테스트는로드하지 않았습니다. 이제 loadTestsFromModule 메서드에 제공된 모듈에 지정된 테스트도 결과 테스트 스위트에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="821fea3608fb8de5d164acb3d5b309715f0cee7e" translate="yes" xml:space="preserve">
          <source>Default test loader and runner have been added to this module as
well. The default loader is an instance of &lt;strong&gt;MultiTestLoader&lt;/strong&gt; that
combines the suites loaded by &lt;strong&gt;unittest.TestLoader&lt;/strong&gt; and
&lt;strong&gt;dutest.DocTestLoader&lt;/strong&gt;.</source>
          <target state="translated">기본 테스트 로더와 러너도이 모듈에 추가되었습니다. 기본 로더는 &lt;strong&gt;unittest.TestLoader&lt;/strong&gt; 및 &lt;strong&gt;dutest.DocTestLoader에&lt;/strong&gt; 의해로드 된 제품군을 결합하는 &lt;strong&gt;MultiTestLoader&lt;/strong&gt; 의 인스턴스입니다 .&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0535d782a5c760e6795e64d1e3291fbaea2f33b3" translate="yes" xml:space="preserve">
          <source>Fixes a minor bug related with specifying different verbosity
levels from the command line to unittest.TestProgram (alias main).</source>
          <target state="translated">명령 줄에서 unittest.TestProgram (별칭 main)까지 다양한 상세 수준을 지정하는 것과 관련된 사소한 버그를 수정합니다.</target>
        </trans-unit>
        <trans-unit id="d37e4ddbd52aa21f081a2ee1c4e1202445378f70" translate="yes" xml:space="preserve">
          <source>Implemented</source>
          <target state="translated">구현</target>
        </trans-unit>
        <trans-unit id="74e3f2de6178122721be3bb4e05b5d0f28c61167" translate="yes" xml:space="preserve">
          <source>In this case unittest.TestResult instances report whether
individual examples have been successfully executed, or otherwise
have failed or raised an unexpected exception. Formerly TestResult
objects contained the whole report outputted by doctest module.</source>
          <target state="translated">이 경우 unittest.TestResult 인스턴스는 개별 예제가 성공적으로 실행되었는지, 아니면 실패했거나 예기치 않은 예외가 발생했는지보고합니다. 이전의 TestResult 개체에는 doctest 모듈에서 출력 한 전체 보고서가 포함되었습니다.</target>
        </trans-unit>
        <trans-unit id="acd470cd43b1442eed0c637a8825aa1b27834bb1" translate="yes" xml:space="preserve">
          <source>It allows to report the individual results of each and every
interactive example executed during the test run. A separate entry
is created in the corresponding &lt;strong&gt;TestResult&lt;/strong&gt; instance containing
the expected value and the actual result.</source>
          <target state="translated">테스트 실행 중에 실행 된 모든 대화 형 예제의 개별 결과를보고 할 수 있습니다. 예상 값과 실제 결과를 포함 하는 해당 &lt;strong&gt;TestResult&lt;/strong&gt; 인스턴스 에 별도의 항목이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="daf4a113b2db8f7bee41d2ffdc3f90b92bc1fb7a" translate="yes" xml:space="preserve">
          <source>It is different from the Pyhton 2.4 doctest unittest API because:</source>
          <target state="translated">다음과 같은 이유로 Pyhton 2.4 doctest unittest API와 다릅니다.</target>
        </trans-unit>
        <trans-unit id="a18ae9ab8f7cd59e8db7c09a1ecf28189a30cafe" translate="yes" xml:space="preserve">
          <source>It is not necessary to use DocTestRunner output streams in order
to collect test results.</source>
          <target state="translated">테스트 결과를 수집하기 위해 DocTestRunner 출력 스트림을 사용할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="5bc1ae3fef02eea24ebb56205b9bdf8e1ba4367c" translate="yes" xml:space="preserve">
          <source>It is similar to the Pyhton 2.4 doctest unittest API because:</source>
          <target state="translated">다음과 같은 이유로 Pyhton 2.4 doctest unittest API와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="d424a042e41bb5cbb0a1f5b8e60fc36508aa8ae2" translate="yes" xml:space="preserve">
          <source>Loads by default test cases for doctests plus those
formerly loaded by unittest.TestLoader</source>
          <target state="translated">doctest와 이전에 unittest에서로드 한 테스트 케이스에 대한 기본 테스트 케이스를로드합니다.</target>
        </trans-unit>
        <trans-unit id="b0251e776980bcf9d4e4e66ff356671dc98d78c8" translate="yes" xml:space="preserve">
          <source>Module is hidden in tracebacks written to instances of</source>
          <target state="translated">모듈은 인스턴스에 기록 된 트레이스 백에 숨겨져 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0804f69e61ecf01a1f06085cfcdd81da61adc2f" translate="yes" xml:space="preserve">
          <source>Module providing classes which extend doctest module so
as to achieve better integration with unittest.</source>
          <target state="translated">unittest와 더 나은 통합을 달성하기 위해 doctest 모듈을 확장하는 클래스를 제공하는 모듈.</target>
        </trans-unit>
        <trans-unit id="ac4d519fbe284bad17b48bc2dd6a9cf0016e5590" translate="yes" xml:space="preserve">
          <source>Multiple functions in previous versions contained arguments having
mutable objects as default values. A
&lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2009-April/001617.html&quot;&gt;message sent to TiP list about default args&lt;/a&gt; explains why this is
really harmful. This has been fixed. Thanks to
Scott David Daniels &lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2009-April/001606.html&quot;&gt;for reporting the issue with default args&lt;/a&gt;
and Jesse Noller for &lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2009-April/001620.html&quot;&gt;the pointers about default args&lt;/a&gt; .</source>
          <target state="translated">이전 버전의 여러 함수에는 기본값으로 변경 가능한 객체가있는 인수가 포함되었습니다. &lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2009-April/001617.html&quot;&gt;기본 인수에 대한 TiP 목록에 전송&lt;/a&gt; 된 메시지 는 이것이 실제로 해로운 이유를 설명합니다. 이것은 수정되었습니다. &lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2009-April/001606.html&quot;&gt;기본 인수에 대한 문제를보고 해&lt;/a&gt; 주신 Scott David Daniels 와 기본 인수 에 &lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2009-April/001620.html&quot;&gt;대한 포인터에 대해&lt;/a&gt; Jesse Noller에게 감사드립니다 .</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">없음</target>
        </trans-unit>
        <trans-unit id="1f4bd02c4fc90b706b3c2c12249f9911bfe5ac4d" translate="yes" xml:space="preserve">
          <source>Note: The contents of this module were first implemented by the module
oop.utils.testing contained in &lt;a href=&quot;http://pypi.python.org/pypi/PyOOP&quot;&gt;PyOOP package&lt;/a&gt;.</source>
          <target state="translated">참고 :이 모듈의 내용은 &lt;a href=&quot;http://pypi.python.org/pypi/PyOOP&quot;&gt;PyOOP 패키지에&lt;/a&gt; 포함 된 oop.utils.testing 모듈에 의해 처음 구현되었습니다 .</target>
        </trans-unit>
        <trans-unit id="0297034b9c92aa97ffbf2e364577570f81bf5738" translate="yes" xml:space="preserve">
          <source>Other loaders allow users to extract TestCase instances out of
TestCase descendants and doctests (and any other format) in a
single step.</source>
          <target state="translated">다른 로더를 사용하면 사용자가 TestCase 하위 항목 및 doctest (및 기타 형식)에서 TestCase 인스턴스를 한 번에 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6197cb6263f6f59052ed88a461d7cf16fc130e09" translate="yes" xml:space="preserve">
          <source>Provides integration with TestProgram and unittest test runners.</source>
          <target state="translated">TestProgram 및 unittest 테스트 실행기와의 통합을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="93852cfe122feda6919b1b39e9a3c745ca8dd0f8" translate="yes" xml:space="preserve">
          <source>Since the match made for individual examples is reported one by one
by instances of &lt;strong&gt;TestResult&lt;/strong&gt;, it is quite easier to automate
post-testing activities (e.g. automated test analysis). Formerly
access to this information required extra work (i.e. the full report
provided by doctest had to be parsed).</source>
          <target state="translated">개별 예제에 대한 일치는 &lt;strong&gt;TestResult&lt;/strong&gt; 인스턴스별로 하나씩보고 되므로 사후 테스트 활동 (예 : 자동화 된 테스트 분석)을 자동화하는 것이 훨씬 쉽습니다. 이전에이 정보에 액세스하려면 추가 작업이 필요했습니다 (예 : doctest에서 제공하는 전체 보고서를 구문 분석해야 함).</target>
        </trans-unit>
        <trans-unit id="82ec750e2e52c721bed9bb7e1d7c9d5e3ecef8c0" translate="yes" xml:space="preserve">
          <source>Suite Fixture Setup</source>
          <target state="translated">Suite Fixture 설정</target>
        </trans-unit>
        <trans-unit id="a0f3413027206e77b88d2fc7b1f159a41515328e" translate="yes" xml:space="preserve">
          <source>Support for multiple pattern matching styles has been added in
&lt;strong&gt;PackageTestLoader&lt;/strong&gt; trough</source>
          <target state="translated">여러 패턴 일치 스타일에 대한 지원이 &lt;strong&gt;PackageTestLoader&lt;/strong&gt; 트로프 에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="11b61c6dfc8dbdd0e7b79e2e2989a3de0a9eb2a2" translate="yes" xml:space="preserve">
          <source>Test analysis require no further parsing to retrieve detailed
information about failures.</source>
          <target state="translated">테스트 분석은 실패에 대한 자세한 정보를 검색하기 위해 추가 구문 분석이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="10e93232f5ee13cde5c73ae6c73ca6a57a250ad6" translate="yes" xml:space="preserve">
          <source>TestResult</source>
          <target state="translated">검사 결과</target>
        </trans-unit>
        <trans-unit id="1cb0b498de50f23df7ed34669c97fb998f8de5e8" translate="yes" xml:space="preserve">
          <source>The class &lt;strong&gt;oop.utils.testing.VerboseTestProgram&lt;/strong&gt; has been moved
onto dutest module. Release 0.1.0 did not include it. Thanks to
Michal Kwiatkowski for notifying me so &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;oop.utils.testing.VerboseTestProgram&lt;/strong&gt; 클래스 가 dutest 모듈로 이동되었습니다. 릴리스 0.1.0에는 포함되지 않았습니다. 저에게 그렇게 알려준 Michal Kwiatkowski에게 감사드립니다 &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2ae3d7e6272e762c3eb1335646549bff2945df99" translate="yes" xml:space="preserve">
          <source>Unix filename pattern matching (</source>
          <target state="translated">Unix 파일 이름 패턴 일치 (</target>
        </trans-unit>
        <trans-unit id="9124614dbd64a460b491fc4e837197e6399201de" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s new in version 0.1.0:</source>
          <target state="translated">버전 0.1.0의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="02c987d81bb3c770002c459f990482396806b07b" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s new in version 0.1.1:</source>
          <target state="translated">버전 0.1.1의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="340bfdb3a8fb39daaf1eb41b679786834751a99c" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s new in version 0.1.2:</source>
          <target state="translated">버전 0.1.2의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="67c2b61549c27b1c8be4c56b9f6288f118e236cb" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s new in version 0.2.1:</source>
          <target state="translated">버전 0.2.1의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="c02f6290bb7b92768ec9c2ef51ea43a186f13c34" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s new in version 0.2.2:</source>
          <target state="translated">버전 0.2.2의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="7358a6144e37820a446ba757faa48c8d7da0d8c4" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s new in version 0.2.3:</source>
          <target state="translated">버전 0.2.3의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="f3d524df68157aa059b5e032649c63983f321851" translate="yes" xml:space="preserve">
          <source>You do not need to use &lt;strong&gt;DocTestRunner&lt;/strong&gt; output streams
to collect test results.</source>
          <target state="translated">테스트 결과를 수집 하기 위해 &lt;strong&gt;DocTestRunner&lt;/strong&gt; 출력 스트림을 사용할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="5860e9334b189f73e230c9167ca4f4d525463c66" translate="yes" xml:space="preserve">
          <source>[TIP] Fwd: An OO API for doctest / unittest integration&amp;hellip;
(&lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2008-August/000918.html&quot;&gt;http://lists.idyll.org/pipermail/testing-in-python/2008-August/000918.html&lt;/a&gt;)</source>
          <target state="translated">[TIP] Fwd : doctest / unittest 통합을위한 OO API&amp;hellip; ( &lt;a href=&quot;http://lists.idyll.org/pipermail/testing-in-python/2008-August/000918.html&quot;&gt;http://lists.idyll.org/pipermail/testing-in-python/2008-August/000918.html&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="fb371bd3f45a697c7f64f3de3934a6252f9d9e2e" translate="yes" xml:space="preserve">
          <source>doctest / unittest extensions:</source>
          <target state="translated">doctest / unittest 확장 :</target>
        </trans-unit>
        <trans-unit id="f16e84e251fc1377bb259c07ba5eed58c33722d6" translate="yes" xml:space="preserve">
          <source>fnmatch</source>
          <target state="translated">fnmatch</target>
        </trans-unit>
        <trans-unit id="8ea1a77c93d43d6b47e020992d269e2445832422" translate="yes" xml:space="preserve">
          <source>module) is available from
now on while using &lt;strong&gt;PackageTestLoader&lt;/strong&gt;. The only thing needed is
to specify</source>
          <target state="translated">module)은 지금부터 &lt;strong&gt;PackageTestLoader&lt;/strong&gt; 를 사용하는 동안 사용할 수 있습니다 . 필요한 유일한 것은</target>
        </trans-unit>
        <trans-unit id="6da393efccb3b4b0a7a23197d0a64bada97d02ef" translate="yes" xml:space="preserve">
          <source>parameter. By default standard
regular expressions (i.e.</source>
          <target state="translated">매개 변수. 기본적으로 표준 정규식 (예 :</target>
        </trans-unit>
        <trans-unit id="26ec8d00fb6b55466b3a115f1d559422a7fa7aac" translate="yes" xml:space="preserve">
          <source>style</source>
          <target state="translated">스타일</target>
        </trans-unit>
        <trans-unit id="b709b26939c128d46229e83202975d09fead46ff" translate="yes" xml:space="preserve">
          <source>style=REGEX</source>
          <target state="translated">style = REGEX</target>
        </trans-unit>
        <trans-unit id="2113ce86e4b0991d84886b5611b0314a715d0a17" translate="yes" xml:space="preserve">
          <source>style=UNIX</source>
          <target state="translated">style = UNIX</target>
        </trans-unit>
        <trans-unit id="d5e50457562f8602368239089d366f9a3518f2c7" translate="yes" xml:space="preserve">
          <source>test pattern (i.e. set up a fixture
once before all its interactive examples are run and clean up after
they all have been run.</source>
          <target state="translated">테스트 패턴 (즉, 모든 대화식 예제가 실행되기 전에 조명기를 한 번 설정하고 모두 실행 된 후에 정리합니다.</target>
        </trans-unit>
        <trans-unit id="0d79d6d64b9f620ab5cc5cb03e2d462f832b34fa" translate="yes" xml:space="preserve">
          <source>was supplied in to the initializer as the test method
name. This bug remained hidden somehow while executing the test
using &lt;em&gt;oop.test.check_oopdbc()&lt;/em&gt;, and even when importing
oop.utils.dutest (which is actually the same implementation).</source>
          <target state="translated">이니셜 라이저에 테스트 메서드 이름으로 제공되었습니다. 이 버그는 &lt;em&gt;oop.test.check_oopdbc ()를&lt;/em&gt; 사용하여 테스트를 실행하는 동안 및 oop.utils.dutest를 가져올 때 (실제로는 동일한 구현 임)에도 어떻게 든 숨겨져있었습니다 .</target>
        </trans-unit>
        <trans-unit id="aa23bd7072068faeb1f4a6ac7baec292184be3e6" translate="yes" xml:space="preserve">
          <source>when a failure or an error is detected.</source>
          <target state="translated">실패 또는 오류가 감지 될 때.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
