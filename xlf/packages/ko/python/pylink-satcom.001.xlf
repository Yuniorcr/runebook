<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/pylink-satcom/">
    <body>
      <group id="pylink-satcom">
        <trans-unit id="87cea589f2649567ff208cfda574b81c8caec522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;element.py&lt;/code&gt;: RF Element container.</source>
          <target state="translated">&lt;code&gt;element.py&lt;/code&gt; : RF Element container.</target>
        </trans-unit>
        <trans-unit id="5f1f4e3751e641256a853515e383253ea9b49878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;model.py&lt;/code&gt;: Contains the actual DAG Model class that houses the core
logic of the calculations.</source>
          <target state="translated">&lt;code&gt;model.py&lt;/code&gt; : Contains the actual DAG Model class that houses the core logic of the calculations.</target>
        </trans-unit>
        <trans-unit id="2af599b7548e176e2755c1dfdbe9c95ec89db0fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report.py&lt;/code&gt;: Satellite link budget latex report generator.</source>
          <target state="translated">&lt;code&gt;report.py&lt;/code&gt; : Satellite link budget latex report generator.</target>
        </trans-unit>
        <trans-unit id="f8c84e75ebcd5886885c2d8045db3bc5f34b2332" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tagged_attribute.py&lt;/code&gt;: The TaggedAttribute class for adding
metadata tags to individual components.</source>
          <target state="translated">&lt;code&gt;tagged_attribute.py&lt;/code&gt; : The TaggedAttribute class for adding metadata tags to individual components.</target>
        </trans-unit>
        <trans-unit id="bd71126d0f89cd3dbe84083f80e59aa3a96c16d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tributaries/*.py&lt;/code&gt;: These each provide boilerplate inputs and
calculators that are common to link budgets.
For example, you're likely to need a
transmitter and a receiver.  There will be a
channel to carry the signal, etc.</source>
          <target state="translated">&lt;code&gt;tributaries/*.py&lt;/code&gt; : These each provide boilerplate inputs and calculators that are common to link budgets. For example, you're likely to need a transmitter and a receiver. There will be a channel to carry the signal, etc.</target>
        </trans-unit>
        <trans-unit id="ce13ab7714129c8c94c76775f0b041d621fc766c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utils.py&lt;/code&gt;: Standalone utility functions (such as &lt;code&gt;to_db&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;utils.py&lt;/code&gt; : Standalone utility functions (such as &lt;code&gt;to_db&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="254a4186f4c36a9d92a8304792d09c44eeb5b085" translate="yes" xml:space="preserve">
          <source>A caching DAG (Directed Acyclic Graph) Solver.</source>
          <target state="translated">A caching DAG (Directed Acyclic Graph) Solver.</target>
        </trans-unit>
        <trans-unit id="8f34aec376a12a2c7175bbd2fe2be2eda2693cdb" translate="yes" xml:space="preserve">
          <source>A set of pre-defined computational nodes common to link budgets.</source>
          <target state="translated">A set of pre-defined computational nodes common to link budgets.</target>
        </trans-unit>
        <trans-unit id="d82b4e017225aa1e2023c5f48b72d49a7b939c78" translate="yes" xml:space="preserve">
          <source>A set of utilities common to link-budgets.</source>
          <target state="translated">A set of utilities common to link-budgets.</target>
        </trans-unit>
        <trans-unit id="5c39094400962e8727e8a44083dd7850d869f3fd" translate="yes" xml:space="preserve">
          <source>Ability to easily produce graphs, such as pfd/4kHz for regulatory
compliance.</source>
          <target state="translated">Ability to easily produce graphs, such as pfd/4kHz for regulatory compliance.</target>
        </trans-unit>
        <trans-unit id="dc5b6ee5d3666e38d06f51e41b81dc51f2dd4e3b" translate="yes" xml:space="preserve">
          <source>Ability to easily solve for required values within a link budget.</source>
          <target state="translated">Ability to easily solve for required values within a link budget.</target>
        </trans-unit>
        <trans-unit id="4175ebbf9dbb7714e76d969a4c20c53e8bed2d28" translate="yes" xml:space="preserve">
          <source>Ability to export consistently-formatted PDF link budgets for
communcation with external agencies.</source>
          <target state="translated">Ability to export consistently-formatted PDF link budgets for communcation with external agencies.</target>
        </trans-unit>
        <trans-unit id="fed1edbeb69a414cb3fe9734364acf247b11327e" translate="yes" xml:space="preserve">
          <source>Ability to tag components with arbitrary values, such as datasheet
links, descriptions, and part numbers.</source>
          <target state="translated">Ability to tag components with arbitrary values, such as datasheet links, descriptions, and part numbers.</target>
        </trans-unit>
        <trans-unit id="a7e6d6f5c1156628186dcd5403345d3b452266ad" translate="yes" xml:space="preserve">
          <source>As shown above, new nodes can be registered with the DAG Model directly:</source>
          <target state="translated">As shown above, new nodes can be registered with the DAG Model directly:</target>
        </trans-unit>
        <trans-unit id="85e222d324d39494c69dad79be2d338804008c2d" translate="yes" xml:space="preserve">
          <source>Aside from logical grouping, it also makes sense to reuse code.
&lt;a href=&quot;pylink/tributaries/antenna.py&quot;&gt;Antennas&lt;/a&gt;, for example, have patterns
that can be plotted to PNG files irrespective of whether they're a
transmit or receive antenna.  Instead of duplicating that code, we
simply have a single Antenna class that remembers whether it is meant
for tx or rx.  When it contributes nodes to the DAG, those nodes
(instance methods) will be able to refer to their object and know
whether to use the tx or rx path.</source>
          <target state="translated">Aside from logical grouping, it also makes sense to reuse code. &lt;a href=&quot;pylink/tributaries/antenna.py&quot;&gt;Antennas&lt;/a&gt;, for example, have patterns that can be plotted to PNG files irrespective of whether they're a transmit or receive antenna. Instead of duplicating that code, we simply have a single Antenna class that remembers whether it is meant for tx or rx. When it contributes nodes to the DAG, those nodes (instance methods) will be able to refer to their object and know whether to use the tx or rx path.</target>
        </trans-unit>
        <trans-unit id="926576b3c150c7a529bd3a4b527586e237665018" translate="yes" xml:space="preserve">
          <source>BStar pivoted to HyperSpectral in an attempt to address the disparity
between customer/partner/regulator interest in our success and
investor interest.  HyperSpectral Imaging was the selected target (due
to the close association with comms and the simplicity of the business
model).  For expediency, the HSI SNR budget was computed using pylink,
and I'm adding it to the repo to avoid having yet-another-repo.  If it
gathers enough steam, I'll break it out into a separate repo.</source>
          <target state="translated">BStar pivoted to HyperSpectral in an attempt to address the disparity between customer/partner/regulator interest in our success and investor interest. HyperSpectral Imaging was the selected target (due to the close association with comms and the simplicity of the business model). For expediency, the HSI SNR budget was computed using pylink, and I'm adding it to the repo to avoid having yet-another-repo. If it gathers enough steam, I'll break it out into a separate repo.</target>
        </trans-unit>
        <trans-unit id="a5a9631fd2e5ace8a5154a381da70fd15058e38b" translate="yes" xml:space="preserve">
          <source>Calculated Nodes</source>
          <target state="translated">Calculated Nodes</target>
        </trans-unit>
        <trans-unit id="87ac3e1c566be529315e5cb7f548ce2f83e9f74c" translate="yes" xml:space="preserve">
          <source>Compute the value that induces a cycle with &lt;code&gt;clear_stack=True&lt;/code&gt;</source>
          <target state="translated">Compute the value that induces a cycle with &lt;code&gt;clear_stack=True&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1cd2a5cc36776ca6b09609d81980cf7c819e9eb4" translate="yes" xml:space="preserve">
          <source>Creating Tributaries</source>
          <target state="translated">Creating Tributaries</target>
        </trans-unit>
        <trans-unit id="880467291f058cb266befd218bb7cb1841b626bc" translate="yes" xml:space="preserve">
          <source>Creation of more generalized models for calculating whatever you
want (see the &lt;a href=&quot;examples/midlife_crisis.py&quot;&gt;Midlife Crisis Example&lt;/a&gt;
or the &lt;a href=&quot;examples/hyperspectral.py&quot;&gt;HyperSpectral Imaging SNR
Budget&lt;/a&gt;)</source>
          <target state="translated">Creation of more generalized models for calculating whatever you want (see the &lt;a href=&quot;examples/midlife_crisis.py&quot;&gt;Midlife Crisis Example&lt;/a&gt; or the &lt;a href=&quot;examples/hyperspectral.py&quot;&gt;HyperSpectral Imaging SNR Budget&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="97f064aff5a5a2219a6dc94f9eacd00f29d6f9fe" translate="yes" xml:space="preserve">
          <source>Cycles</source>
          <target state="translated">Cycles</target>
        </trans-unit>
        <trans-unit id="4e4cf5679079475ab60122c3b7f988d05dbddc94" translate="yes" xml:space="preserve">
          <source>DAG Solver</source>
          <target state="translated">DAG Solver</target>
        </trans-unit>
        <trans-unit id="a4a53d598d5a4554a6e4e8349473c18fbfea8e64" translate="yes" xml:space="preserve">
          <source>Ease the building of monte-carlo simulations (FIXME: need example).</source>
          <target state="translated">Ease the building of monte-carlo simulations (FIXME: need example).</target>
        </trans-unit>
        <trans-unit id="9cab782c6c77fa83ea108735b729c81e72c40bf0" translate="yes" xml:space="preserve">
          <source>Extending and Understanding</source>
          <target state="translated">Extending and Understanding</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="81cc9d9db2b58d93f3ac75974267e2eb33fe2864" translate="yes" xml:space="preserve">
          <source>Here we've added 3 nodes:</source>
          <target state="translated">Here we've added 3 nodes:</target>
        </trans-unit>
        <trans-unit id="3baa2fc205a557e056a3a844fc61e21b46858d98" translate="yes" xml:space="preserve">
          <source>HyperSpectral Imaging</source>
          <target state="translated">HyperSpectral Imaging</target>
        </trans-unit>
        <trans-unit id="be198d95adc222c1897efa77b8f000022591fd5d" translate="yes" xml:space="preserve">
          <source>I just closed down business operations at BStar and switched over to
consulting.  I have some time on my hands right now, so feel free to file an
issue if you have a feature request.</source>
          <target state="translated">I just closed down business operations at BStar and switched over to consulting. I have some time on my hands right now, so feel free to file an issue if you have a feature request.</target>
        </trans-unit>
        <trans-unit id="bcc7f3b63f3e7fd8ca81d3cf1d40b7fec8dbd89f" translate="yes" xml:space="preserve">
          <source>If you just want to add one more computation, or modify one, you can
do so by including it in the model itself -- you don't need to create
your own tributary.  If, however, you do want to create a new one, use
the pre-existing source as a guide (it should be pretty clear).  Note
that you'll need to define the &lt;code&gt;tribute&lt;/code&gt; instance variable.  This
should be a dict of node-names to values.  That works both for
constants (like &lt;code&gt;apoapsis_altitude_km&lt;/code&gt; or &lt;code&gt;speed_of_light_m_per_s&lt;/code&gt;),
and for functions that calculate values (like &lt;code&gt;slant_range_km&lt;/code&gt; or
&lt;code&gt;link_margin_db&lt;/code&gt;).  The DAG Model will expect this value to exist and
raise an exception otherwise.</source>
          <target state="translated">If you just want to add one more computation, or modify one, you can do so by including it in the model itself -- you don't need to create your own tributary. If, however, you do want to create a new one, use the pre-existing source as a guide (it should be pretty clear). Note that you'll need to define the &lt;code&gt;tribute&lt;/code&gt; instance variable. This should be a dict of node-names to values. That works both for constants (like &lt;code&gt;apoapsis_altitude_km&lt;/code&gt; or &lt;code&gt;speed_of_light_m_per_s&lt;/code&gt; ), and for functions that calculate values (like &lt;code&gt;slant_range_km&lt;/code&gt; or &lt;code&gt;link_margin_db&lt;/code&gt; ). The DAG Model will expect this value to exist and raise an exception otherwise.</target>
        </trans-unit>
        <trans-unit id="73ed271457e01f64c88129a4510ec7f2241da480" translate="yes" xml:space="preserve">
          <source>If you want to install it from source: &lt;code&gt;pip install .&lt;/code&gt; works as well.</source>
          <target state="translated">If you want to install it from source: &lt;code&gt;pip install .&lt;/code&gt; works as well.</target>
        </trans-unit>
        <trans-unit id="62c0bad587e9620d2465c9f3edac682ccd141e6d" translate="yes" xml:space="preserve">
          <source>If you're curious what this all looks like in a context other than
link budgets, take a look at the &lt;a href=&quot;examples/midlife_crisis.py&quot;&gt;Midlife Crisis
Example&lt;/a&gt;.  There we create a DAGModel that
has nothing at all to do with RF, satellites, etc.  There's really
nothing that restricts us to link budgets, or even RF.  Feel free to
write the nodes and use the framework for whatever you want.</source>
          <target state="translated">If you're curious what this all looks like in a context other than link budgets, take a look at the &lt;a href=&quot;examples/midlife_crisis.py&quot;&gt;Midlife Crisis Example&lt;/a&gt;. There we create a DAGModel that has nothing at all to do with RF, satellites, etc. There's really nothing that restricts us to link budgets, or even RF. Feel free to write the nodes and use the framework for whatever you want.</target>
        </trans-unit>
        <trans-unit id="d96370cef452a2c03cfb1393e21a41fbbfb5a725" translate="yes" xml:space="preserve">
          <source>If you're looking for a quick-start and/or just want to go with some
boilerplate examples, take a look at the &lt;a href=&quot;examples/&quot;&gt;Examples&lt;/a&gt;
directory.</source>
          <target state="translated">If you're looking for a quick-start and/or just want to go with some boilerplate examples, take a look at the &lt;a href=&quot;examples/&quot;&gt;Examples&lt;/a&gt; directory.</target>
        </trans-unit>
        <trans-unit id="0d8054fe02d49448a5629477b4e283bfa9a62124" translate="yes" xml:space="preserve">
          <source>In some circumstances, cycles do exist, breaking the DAG nature of
this system.  Under very special circumstances, we can deal with
those.  If one of the items in the loop exists within a finite set,
then you can do an O(N) search across all of those options, to
determine the most appropriate value.  A real-life example can be
found in &lt;code&gt;modulation.py&lt;/code&gt;:</source>
          <target state="translated">In some circumstances, cycles do exist, breaking the DAG nature of this system. Under very special circumstances, we can deal with those. If one of the items in the loop exists within a finite set, then you can do an O(N) search across all of those options, to determine the most appropriate value. A real-life example can be found in &lt;code&gt;modulation.py&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="186bab2b9b6f9d29b5c035374bbfb9f69b2dbec2" translate="yes" xml:space="preserve">
          <source>In your loop, start by overriding the value you are attempting to
compute to the current option</source>
          <target state="translated">In your loop, start by overriding the value you are attempting to compute to the current option</target>
        </trans-unit>
        <trans-unit id="cce3fdf2299f22a89e9190bf6da3e94d62ebf531" translate="yes" xml:space="preserve">
          <source>Individual components include a facility for tagging with metadata
such as test report links, datasheets, part numbers, etc.  The tagging
is key/value based, and not restricted or controlled.  There are two
primary mechanisms by which tagging occurs:</source>
          <target state="translated">Individual components include a facility for tagging with metadata such as test report links, datasheets, part numbers, etc. The tagging is key/value based, and not restricted or controlled. There are two primary mechanisms by which tagging occurs:</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">설치</target>
        </trans-unit>
        <trans-unit id="a57be29be54d2bc5751b84746f232478e4ae019a" translate="yes" xml:space="preserve">
          <source>It also includes a multi-round linear solver for convenience.  See the
&lt;a href=&quot;examples/solver.py&quot;&gt;Solver Example&lt;/a&gt;.</source>
          <target state="translated">It also includes a multi-round linear solver for convenience. See the &lt;a href=&quot;examples/solver.py&quot;&gt;Solver Example&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b28febdab466a8417f3e578387b8d28921dc8495" translate="yes" xml:space="preserve">
          <source>It frequently makes sense to group nodes before registration.  That's
where Tributaries come into play.  If you look in the &lt;a href=&quot;examples/basic.py&quot;&gt;Basic
Example&lt;/a&gt;, you see that it uses a whole list of
tributaries.  &lt;a href=&quot;pylink/tributaries/geometry.py&quot;&gt;Geometry&lt;/a&gt; is probably
the simplest and most straight-forward tributary if you're looking for
a production example, otherwise please see the &lt;a href=&quot;examples/&quot;&gt;Examples&lt;/a&gt;.</source>
          <target state="translated">It frequently makes sense to group nodes before registration. That's where Tributaries come into play. If you look in the &lt;a href=&quot;examples/basic.py&quot;&gt;Basic Example&lt;/a&gt;, you see that it uses a whole list of tributaries. &lt;a href=&quot;pylink/tributaries/geometry.py&quot;&gt;Geometry&lt;/a&gt; is probably the simplest and most straight-forward tributary if you're looking for a production example, otherwise please see the &lt;a href=&quot;examples/&quot;&gt;Examples&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9122e8f764c11ef4cbd77eb75bbd654d2ac96ec0" translate="yes" xml:space="preserve">
          <source>Legacy Support</source>
          <target state="translated">Legacy Support</target>
        </trans-unit>
        <trans-unit id="0ea645e76a465b0c0046896667331290475f891a" translate="yes" xml:space="preserve">
          <source>Loop through all possible options</source>
          <target state="translated">Loop through all possible options</target>
        </trans-unit>
        <trans-unit id="bffd9460115f9256c42235c68d886977ead7a476" translate="yes" xml:space="preserve">
          <source>Migration instructions from previous versions can be found in the
&lt;a href=&quot;CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;.</source>
          <target state="translated">Migration instructions from previous versions can be found in the &lt;a href=&quot;CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e51a8d9a22654639c36e7420a180e471e6fb32d1" translate="yes" xml:space="preserve">
          <source>Note to Anyone Reading This</source>
          <target state="translated">Note to Anyone Reading This</target>
        </trans-unit>
        <trans-unit id="da0623162321a3c68d03582a4453526ae80bc74b" translate="yes" xml:space="preserve">
          <source>Please note that there are two types of nodes:</source>
          <target state="translated">Please note that there are two types of nodes:</target>
        </trans-unit>
        <trans-unit id="522035cd0a1cb002c420226b08b9916aa109e95b" translate="yes" xml:space="preserve">
          <source>Please note that there is a name collision with another &lt;code&gt;pylink&lt;/code&gt;
package in PyPi.  As such, we have registered this package there under
a different name: &lt;code&gt;pylink-satcom&lt;/code&gt;.</source>
          <target state="translated">Please note that there is a name collision with another &lt;code&gt;pylink&lt;/code&gt; package in PyPi. As such, we have registered this package there under a different name: &lt;code&gt;pylink-satcom&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af53244a7f8d6222a5de938f9f77740dc19241b8" translate="yes" xml:space="preserve">
          <source>Please note that there is already a &lt;code&gt;pylink&lt;/code&gt; package on PyPi, so it is
currently registered as &lt;code&gt;pylink-satcom&lt;/code&gt;.  I'll repeat this warning in
the &lt;code&gt;Installation&lt;/code&gt; section below.</source>
          <target state="translated">Please note that there is already a &lt;code&gt;pylink&lt;/code&gt; package on PyPi, so it is currently registered as &lt;code&gt;pylink-satcom&lt;/code&gt; . I'll repeat this warning in the &lt;code&gt;Installation&lt;/code&gt; section below.</target>
        </trans-unit>
        <trans-unit id="80f8953e44d5285fd9c62c8999762b8e1ff17959" translate="yes" xml:space="preserve">
          <source>Pre-Defined Nodes</source>
          <target state="translated">Pre-Defined Nodes</target>
        </trans-unit>
        <trans-unit id="6bec30e17d35ab84b8061d717dfd87be49caaa3f" translate="yes" xml:space="preserve">
          <source>PyPi Naming</source>
          <target state="translated">PyPi Naming</target>
        </trans-unit>
        <trans-unit id="94fdc15ab3db96992ef5e656df30017f423bdf60" translate="yes" xml:space="preserve">
          <source>Python Link Budget Calculation/Management and General Modelling</source>
          <target state="translated">Python Link Budget Calculation/Management and General Modelling</target>
        </trans-unit>
        <trans-unit id="d9b79ddf5afbd3054718da418b57a693e03412c5" translate="yes" xml:space="preserve">
          <source>Python Link Budget System</source>
          <target state="translated">Python Link Budget System</target>
        </trans-unit>
        <trans-unit id="fc50cdef49e99d0e0325bd01c59f1e2912c2edb8" translate="yes" xml:space="preserve">
          <source>Return the result from your calculator.</source>
          <target state="translated">Return the result from your calculator.</target>
        </trans-unit>
        <trans-unit id="d10177e4cab5bddfe90bc05d83c4cfe5c97d9657" translate="yes" xml:space="preserve">
          <source>Revert the value you are attempting to calculate</source>
          <target state="translated">Revert the value you are attempting to calculate</target>
        </trans-unit>
        <trans-unit id="0ac2780b122f089c0b05f59cc8c3b23e7cac808a" translate="yes" xml:space="preserve">
          <source>Select the appropriate option by comparing the figure of merit.</source>
          <target state="translated">Select the appropriate option by comparing the figure of merit.</target>
        </trans-unit>
        <trans-unit id="c6fe19ab8666b13c4f392ea8778bcc1956f66139" translate="yes" xml:space="preserve">
          <source>Simply put, static nodes are just plain old values that you pass in,
whereas calculated nodes are functions/methods/...  You'll see an enum
referenced all over the place.  That's because it uses node numbers
internally, and an enum is convenient way to reference node numbers
without having to use a bunch of single-ticks and brackets.  For example:</source>
          <target state="translated">Simply put, static nodes are just plain old values that you pass in, whereas calculated nodes are functions/methods/... You'll see an enum referenced all over the place. That's because it uses node numbers internally, and an enum is convenient way to reference node numbers without having to use a bunch of single-ticks and brackets. For example:</target>
        </trans-unit>
        <trans-unit id="c1e755842f626317776b3a31e399e165857da6bc" translate="yes" xml:space="preserve">
          <source>Spreadsheets are, for the most part, DAGs.  If you define &lt;code&gt;C46 = C87 - $B$34&lt;/code&gt; then you are, essentially, saying that 3 nodes exist: &lt;code&gt;C46&lt;/code&gt;,
&lt;code&gt;C87&lt;/code&gt;, and &lt;code&gt;$B$34&lt;/code&gt;.  You are also stating that to solve for node &lt;code&gt;C46&lt;/code&gt;
you take the value of node &lt;code&gt;C87&lt;/code&gt; and subtract the value of node
&lt;code&gt;$B$34&lt;/code&gt;.</source>
          <target state="translated">Spreadsheets are, for the most part, DAGs. If you define &lt;code&gt;C46 = C87 - $B$34&lt;/code&gt; then you are, essentially, saying that 3 nodes exist: &lt;code&gt;C46&lt;/code&gt; , &lt;code&gt;C87&lt;/code&gt; , and &lt;code&gt;$B$34&lt;/code&gt; . You are also stating that to solve for node &lt;code&gt;C46&lt;/code&gt; you take the value of node &lt;code&gt;C87&lt;/code&gt; and subtract the value of node &lt;code&gt;$B$34&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ea172d0a02a079cffd66eeedf671a9ae0bc06e3" translate="yes" xml:space="preserve">
          <source>Static Nodes</source>
          <target state="translated">Static Nodes</target>
        </trans-unit>
        <trans-unit id="12d390f8025584ad2ceb29d8156199827eb766f2" translate="yes" xml:space="preserve">
          <source>Submodules</source>
          <target state="translated">서브 모듈</target>
        </trans-unit>
        <trans-unit id="af0d59b9450db69aa7f29d3597dcc89c32b6f6ed" translate="yes" xml:space="preserve">
          <source>Tagging Architecture</source>
          <target state="translated">Tagging Architecture</target>
        </trans-unit>
        <trans-unit id="e983a351cf89584905d0eb40d82156c1592e3006" translate="yes" xml:space="preserve">
          <source>The DAGModel class overrides python's &lt;code&gt;__getattr__&lt;/code&gt; method so that you
can reference nodes directly, without the added syntactic sugar of
extra parens, brakcets, and tick-marks.</source>
          <target state="translated">The DAGModel class overrides python's &lt;code&gt;__getattr__&lt;/code&gt; method so that you can reference nodes directly, without the added syntactic sugar of extra parens, brakcets, and tick-marks.</target>
        </trans-unit>
        <trans-unit id="219dc455d4700f3cd164ef07b0e0ceee8cdc7995" translate="yes" xml:space="preserve">
          <source>The nature of this package is best described as three things:</source>
          <target state="translated">The nature of this package is best described as three things:</target>
        </trans-unit>
        <trans-unit id="cd56067687b572e4aff39f6a1eff1a485fbb02f6" translate="yes" xml:space="preserve">
          <source>The way we get around this issue, is to recognize that
&lt;code&gt;best_modulation_code&lt;/code&gt; exists within a finite set (specifically all
available modulation options).  That allows us to, essentially, fake
the return value of our own function, observe a figure of merit, and
return the appropriate value at the end.  To introduce a cycle, you'll
need to do the following:</source>
          <target state="translated">The way we get around this issue, is to recognize that &lt;code&gt;best_modulation_code&lt;/code&gt; exists within a finite set (specifically all available modulation options). That allows us to, essentially, fake the return value of our own function, observe a figure of merit, and return the appropriate value at the end. To introduce a cycle, you'll need to do the following:</target>
        </trans-unit>
        <trans-unit id="5bd013b5c5f7a8e5eb3322eb6af9808b150b208c" translate="yes" xml:space="preserve">
          <source>There are some utilities that are handy for working with RF.  For
example, there's a function that fakes an antenna gain pattern for
you: &lt;code&gt;pylink.pattern_generator&lt;/code&gt;, and another one that calculates the
attenuation of PFD from spreading over a distance:
&lt;code&gt;pylink.spreading_loss_db&lt;/code&gt;.</source>
          <target state="translated">There are some utilities that are handy for working with RF. For example, there's a function that fakes an antenna gain pattern for you: &lt;code&gt;pylink.pattern_generator&lt;/code&gt; , and another one that calculates the attenuation of PFD from spreading over a distance: &lt;code&gt;pylink.spreading_loss_db&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d9a5c7a110e49a30e1c46fd7865cad3d862987b" translate="yes" xml:space="preserve">
          <source>This software package is meant to replace the manual-intensive
spreadsheet method.  This package is intended to permit the following
major changes in common methodology:</source>
          <target state="translated">This software package is meant to replace the manual-intensive spreadsheet method. This package is intended to permit the following major changes in common methodology:</target>
        </trans-unit>
        <trans-unit id="58194c372b74a41497dc99af75b601dca8d6db58" translate="yes" xml:space="preserve">
          <source>This system works the same way, except that instead of saying &lt;code&gt;C46&lt;/code&gt;,
we might instead say &lt;code&gt;link_margin_db&lt;/code&gt;.  And instead of coupling our
presentation and data layers, as in a spreadsheet, we might define it
as follows:</source>
          <target state="translated">This system works the same way, except that instead of saying &lt;code&gt;C46&lt;/code&gt; , we might instead say &lt;code&gt;link_margin_db&lt;/code&gt; . And instead of coupling our presentation and data layers, as in a spreadsheet, we might define it as follows:</target>
        </trans-unit>
        <trans-unit id="8ca2c45f3bd0f2377656fcac65de3566ff765a9f" translate="yes" xml:space="preserve">
          <source>Throug the use of &lt;code&gt;TaggedAttribute&lt;/code&gt; objects, which permit adding
arbitrary tags to individual values (such as the
&lt;code&gt;rx_antenna_noise_temperature&lt;/code&gt;).</source>
          <target state="translated">Throug the use of &lt;code&gt;TaggedAttribute&lt;/code&gt; objects, which permit adding arbitrary tags to individual values (such as the &lt;code&gt;rx_antenna_noise_temperature&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="530770257478ba9ce87174ece310356c71ca1b0a" translate="yes" xml:space="preserve">
          <source>Through pre-defined objects, such as &lt;code&gt;Antenna&lt;/code&gt; or &lt;code&gt;Element&lt;/code&gt;, whcih
permit arbitrary keyword arguments that will be automatically added
to their metadata.</source>
          <target state="translated">Through pre-defined objects, such as &lt;code&gt;Antenna&lt;/code&gt; or &lt;code&gt;Element&lt;/code&gt; , whcih permit arbitrary keyword arguments that will be automatically added to their metadata.</target>
        </trans-unit>
        <trans-unit id="9885f0b23b8f488618146b940df92e44ced6eac2" translate="yes" xml:space="preserve">
          <source>Use of configuration files on a per (satellite, ground-station,
radio) basis.</source>
          <target state="translated">Use of configuration files on a per (satellite, ground-station, radio) basis.</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">유용</target>
        </trans-unit>
        <trans-unit id="717f1463c628fecb9e57b751cb1ea27a74a3a6a9" translate="yes" xml:space="preserve">
          <source>We recommend using Anaconda with Python 3.7.  This package can be
installed by executing: &lt;code&gt;pip install pylink-satcom&lt;/code&gt;</source>
          <target state="translated">We recommend using Anaconda with Python 3.7. This package can be installed by executing: &lt;code&gt;pip install pylink-satcom&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5349d7ee08156fb20a38cfe2d7ced6cd61e9d7db" translate="yes" xml:space="preserve">
          <source>You can also find a unit-test of this behavior in &lt;code&gt;model_test.py&lt;/code&gt;.</source>
          <target state="translated">You can also find a unit-test of this behavior in &lt;code&gt;model_test.py&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ed5ac6d18e0b816caf2d258706c3548a063ca76" translate="yes" xml:space="preserve">
          <source>You'll find examples of both of these usages in the &lt;code&gt;examples&lt;/code&gt;
directory.</source>
          <target state="translated">You'll find examples of both of these usages in the &lt;code&gt;examples&lt;/code&gt; directory.</target>
        </trans-unit>
        <trans-unit id="b4ea9833a9a0718ab8ab26b999c79c653d5a10c4" translate="yes" xml:space="preserve">
          <source>link_margin_db</source>
          <target state="translated">link_margin_db</target>
        </trans-unit>
        <trans-unit id="ac0ce46ae44bdd14aaccc8a3f7ef441c0d344b97" translate="yes" xml:space="preserve">
          <source>received_ebn0_db</source>
          <target state="translated">received_ebn0_db</target>
        </trans-unit>
        <trans-unit id="df665a774d374d27cadd8089a8d05db9c1574f4c" translate="yes" xml:space="preserve">
          <source>required_ebn0_db</source>
          <target state="translated">required_ebn0_db</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
