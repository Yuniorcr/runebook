<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/astor/">
    <body>
      <group id="astor">
        <trans-unit id="53be3e9b4b8da7509fe5e1a76aeaf24c219bbd68" translate="yes" xml:space="preserve">
          <source>3-clause BSD</source>
          <target state="translated">3 절 BSD</target>
        </trans-unit>
        <trans-unit id="00b5635b8954b6dae7436cabfda878687e7a5813" translate="yes" xml:space="preserve">
          <source>Build status:</source>
          <target state="translated">빌드 상태 :</target>
        </trans-unit>
        <trans-unit id="0ba11f86b8c377aae433814ab9f7d825e11d981b" translate="yes" xml:space="preserve">
          <source>Can round-trip two different source trees to compare for functional
differences, using the astor.rtrip tool (for example, after PEP8 edits).</source>
          <target state="translated">astor.rtrip 도구를 사용하여 (예 : PEP8 편집 후) 두 개의 다른 소스 트리를 왕복하여 기능적 차이를 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed0350dc3257153d84758ae6cd511caacb10aa9d" translate="yes" xml:space="preserve">
          <source>Documentation:</source>
          <target state="translated">선적 서류 비치:</target>
        </trans-unit>
        <trans-unit id="cdd71d7867ffee792ba1cdd6bf67000e27906706" translate="yes" xml:space="preserve">
          <source>Dump pretty-printing of AST</source>
          <target state="translated">AST의 예쁜 인쇄 덤프</target>
        </trans-unit>
        <trans-unit id="7033d02f1e72274ee75ff03e454b66ae46bf300e" translate="yes" xml:space="preserve">
          <source>Easier to read than dump from built-in AST module</source>
          <target state="translated">내장 AST 모듈에서 덤프하는 것보다 읽기 쉬움</target>
        </trans-unit>
        <trans-unit id="5442279cc0bf933aa64970b9ae35132eccddba7b" translate="yes" xml:space="preserve">
          <source>Easy to read generated code as, well, code</source>
          <target state="translated">생성 된 코드를 쉽게 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17ac0e084f63802e44a5b82e52032f7394f9c31e" translate="yes" xml:space="preserve">
          <source>Enjoy easy access to parent node(s) for tree rewriting</source>
          <target state="translated">트리 재 작성을 위해 상위 노드에 쉽게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="50df4994a34ea45c58c071503e79edfbf7bbbb9b" translate="yes" xml:space="preserve">
          <source>Harder to read than round-tripped code, but more accurate to figure out what
is going on.</source>
          <target state="translated">왕복 코드보다 읽기 어렵지만 무슨 일이 일어나고 있는지 파악하는 것이 더 정확합니다.</target>
        </trans-unit>
        <trans-unit id="de13bf1ab0b419f34cb1b3b43e094c84009a42db" translate="yes" xml:space="preserve">
          <source>License:</source>
          <target state="translated">특허:</target>
        </trans-unit>
        <trans-unit id="aec37af295938682a676824da787c0a4755fd0e5" translate="yes" xml:space="preserve">
          <source>Modified AST doesn&amp;rsquo;t need linenumbers, ctx, etc. or otherwise
be directly compileable for the round-trip to work.</source>
          <target state="translated">수정 된 AST는 행 번호, ctx 등이 필요하지 않으며 왕복 작업을 위해 직접 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ec7576ed275f489deb967b40c1ff9a2b3b4c981" translate="yes" xml:space="preserve">
          <source>Non-recursive treewalk</source>
          <target state="translated">비재 귀적 트리 워크</target>
        </trans-unit>
        <trans-unit id="46c1aeda14c2d947a9c9a02ddfb0528e25559b2d" translate="yes" xml:space="preserve">
          <source>Other derivatives of Armin&amp;rsquo;s code are floating around, and typically
have fixes for a few corner cases that happened to be noticed by the
maintainers, but most of them have not been tested as thoroughly as
astor.  One exception may be the version of codegen
&lt;a href=&quot;https://github.com/CensoredUsername/codegen&quot;&gt;maintained at github by CensoredUsername&lt;/a&gt;.  This has been tested
to work properly on Python 2.7 using astor&amp;rsquo;s test suite, and, as it
is a single source file, it may be easier to drop into some applications
that do not require astor&amp;rsquo;s other features or Python 3.x compatibility.</source>
          <target state="translated">Armin 코드의 다른 파생물이 떠 다니고 있으며 일반적으로 유지 관리자가 발견 한 몇 가지 코너 케이스에 대한 수정 사항이 있지만 대부분은 astor만큼 철저하게 테스트되지 않았습니다. 한 가지 예외는 &lt;a href=&quot;https://github.com/CensoredUsername/codegen&quot;&gt;CensoredUsername에 의해 github에서 유지 관리되는&lt;/a&gt; codegen 버전 일 수 있습니다 . 이것은 astor의 테스트 스위트를 사용하여 Python 2.7에서 제대로 작동하도록 테스트되었으며 단일 소스 파일이므로 astor의 다른 기능이나 Python 3.x 호환성이 필요하지 않은 일부 응용 프로그램에 추가하는 것이 더 쉬울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="987643832c62d765a5a002bbfb3d522cdefd5190" translate="yes" xml:space="preserve">
          <source>PyPI:</source>
          <target state="translated">PyPI :</target>
        </trans-unit>
        <trans-unit id="2228de3ecafe59358ed749175a7a3119f2cf860a" translate="yes" xml:space="preserve">
          <source>Read/rewrite/write Python ASTs</source>
          <target state="translated">Python AST 읽기 / 다시 쓰기 / 쓰기</target>
        </trans-unit>
        <trans-unit id="6e0d4f3e50e1876b4fd4ee07f09047a074974503" translate="yes" xml:space="preserve">
          <source>Round-trip an AST back to Python &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;:</source>
          <target state="translated">AST를 Python으로 다시 왕복 &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="63331f9cbea9fa2605e9dcae08a8bbce148c8905" translate="yes" xml:space="preserve">
          <source>Sometimes you want a recursive treewalk (and astor supports that, starting
at any node on the tree), but sometimes you don&amp;rsquo;t need to do that.  astor
doesn&amp;rsquo;t require you to explicitly visit sub-nodes unless you want to:</source>
          <target state="translated">때로는 재귀 적 트리 워크를 원하지만 (그리고 astor는 트리의 모든 노드에서 시작하여이를 지원합니다), 때로는 그렇게 할 필요가 없습니다. astor는 다음을 원하지 않는 한 명시 적으로 하위 노드를 방문 할 것을 요구하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="922acd282cc0f3bb9e6dffb4c4b3c4fe33787051" translate="yes" xml:space="preserve">
          <source>Source:</source>
          <target state="translated">출처:</target>
        </trans-unit>
        <trans-unit id="fa96c4a289e2ce09c351f9ef385d64354303a049" translate="yes" xml:space="preserve">
          <source>The decompilation back to Python is based on code originally written
by Armin Ronacher.  Armin&amp;rsquo;s code was well-structured, but failed on
some obscure corner cases of the Python language (and even more corner
cases when the AST changed on different versions of Python), and its
output arguably had cosmetic issues &amp;ndash; for example, it produced
parentheses even in some cases where they were not needed, to
avoid having to reason about precedence.</source>
          <target state="translated">Python으로의 역 컴파일은 원래 Armin Ronacher가 작성한 코드를 기반으로합니다. Armin의 코드는 잘 구조화되었지만 Python 언어의 일부 모호한 코너 케이스 (그리고 AST가 Python의 다른 버전에서 변경된 경우 더 많은 코너 케이스)에서 실패했으며 출력에 외관상의 문제가있을 수 있습니다. 예를 들어 괄호도 생성했습니다. 우선 순위에 대해 추론 할 필요가 없도록하기 위해 필요하지 않은 경우도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a3191718f8827b4d4eda5f0e20c5611ecfff025" translate="yes" xml:space="preserve">
          <source>There are some other similar libraries, but astor focuses on the following areas:</source>
          <target state="translated">다른 유사한 라이브러리가 있지만 astor는 다음 영역에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="f831ffa820e2894229f0ea9a781b96e384326429" translate="yes" xml:space="preserve">
          <source>Write functions to access the tree based on object names and/or attribute names</source>
          <target state="translated">개체 이름 및 / 또는 속성 이름을 기반으로 트리에 액세스하는 함수 작성</target>
        </trans-unit>
        <trans-unit id="b82f1bc66eed63c2e85aeb658ce0b34382f889d0" translate="yes" xml:space="preserve">
          <source>You can add code that executes after a node&amp;rsquo;s children are visited, and/or</source>
          <target state="translated">노드의 자식을 방문한 후 실행되는 코드를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98b431a61ca3c1dc62b70f80cb6688bc31c516d6" translate="yes" xml:space="preserve">
          <source>You can add code that executes and keeps the node&amp;rsquo;s children from being
visited (and optionally visit them yourself via a recursive call)</source>
          <target state="translated">노드의 자식이 방문되지 않도록 실행하고 유지하는 코드를 추가 할 수 있습니다 (선택적으로 재귀 호출을 통해 직접 방문).</target>
        </trans-unit>
        <trans-unit id="4f8050928f91117105da983328482b2429f5cac8" translate="yes" xml:space="preserve">
          <source>You can add code that executes before a node&amp;rsquo;s children are visited, and/or</source>
          <target state="translated">노드의 자식이 방문되기 전에 실행되는 코드를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ada9ccf3f8d6e919422d077f8ec677e05976ccf5" translate="yes" xml:space="preserve">
          <source>astor is designed to allow easy manipulation of Python source via the AST.</source>
          <target state="translated">astor는 AST를 통해 Python 소스를 쉽게 조작 할 수 있도록 설계되었습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
