<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="https://pypi.org/project/mp-auth/">
    <body>
      <group id="mp-auth">
        <trans-unit id="0c77360d80e4bb131a23da58c58c5db89f1b3d32" translate="yes" xml:space="preserve">
          <source>Add Multi-provider auth for various providers</source>
          <target state="translated">다양한 제공 업체에 대한 다중 제공 업체 인증 추가</target>
        </trans-unit>
        <trans-unit id="db3bc6c39fe038a45fb86f895589f506bf0c2499" translate="yes" xml:space="preserve">
          <source>Install the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)</source>
          <target state="translated">Django REST Framework 용 다중 공급자 인증 미들웨어를 설치합니다 (Python 3 필요).</target>
        </trans-unit>
        <trans-unit id="f365c609b0e3df72d19f5307e8b50df05266a6e7" translate="yes" xml:space="preserve">
          <source>Many authentication middleware packages have been writted for Django REST Framework with
support for OAuth2 opaque or JWT token. Most popular ones are listed with a short description
on &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework - Authentication&lt;/a&gt;. But all of them that support opaque tokens
require access to the Identity Provider database to verify the access tokens. Or they cannot be
stack up with other authentication classes to authenticate a bearer token against multiple
Identity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all
Identity Providers that issue JWT tokens and &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; that issues opaque access tokens. Support
for other Identity Providers can easily be added by creating a new backend in &lt;code&gt;mp_auth/backends&lt;/code&gt;.
Each backend can be used separately as an Django REST Framework authentication class, or can be a part of
list of authentication class that Django REST Framework will go through to authenticate an HTTP request.
&lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; is a special authentication class that calls all
authentication classes configured in &lt;code&gt;settings.py&lt;/code&gt;.</source>
          <target state="translated">많은 인증 미들웨어 패키지가 OAuth2 opaque 또는 JWT 토큰을 지원하는 Django REST Framework 용으로 작성되었습니다. 가장 인기있는 항목은 &lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages&quot;&gt;Django REST Framework-Authentication&lt;/a&gt; 에 대한 간단한 설명과 함께 나열됩니다 . 그러나 불투명 토큰을 지원하는 모든 토큰은 액세스 토큰을 확인하기 위해 아이덴티티 공급자 데이터베이스에 액세스해야합니다. 또는 여러 ID 공급자에 대해 전달자 토큰을 인증하기 위해 다른 인증 클래스와 함께 쌓일 수 없습니다. Multiprovider 인증 미들웨어가 그 차이를 메워줍니다. JWT 토큰을 발행하는 모든 ID 공급자와 불투명 액세스 토큰을 발행하는 &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; 를 지원합니다 . &lt;code&gt;mp_auth/backends&lt;/code&gt; 에서 새 백엔드를 만들어 다른 ID 공급자에 대한 지원을 쉽게 추가 할 수 있습니다.. 각 백엔드는 Django REST Framework 인증 클래스로 개별적으로 사용되거나 Django REST Framework가 HTTP 요청을 인증하기 위해 통과 할 인증 클래스 목록의 일부가 될 수 있습니다. &lt;code&gt;mp_auth.backend.mp.MultiproviderAuthentication&lt;/code&gt; 은 &lt;code&gt;settings.py&lt;/code&gt; 에 구성된 모든 인증 클래스를 호출하는 특수 인증 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="ab86ee1d35d4278b22e567dc8690b42b93f4cfb5" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication</source>
          <target state="translated">다중 공급자 인증</target>
        </trans-unit>
        <trans-unit id="85545c3c5d03b98f9f0c66cdebd184642f0ee177" translate="yes" xml:space="preserve">
          <source>Multiprovider Authentication is an easy to setup authentication middleware with support for
&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt; and multiple OAuth2/OIDC Identity Providers that issue opaque
or JWT access tokens, e.g. &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt;, &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt;, etc.</source>
          <target state="translated">Multiprovider Authentication은 &lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;Django REST 프레임 워크&lt;/a&gt; 및 불투명 또는 JWT 액세스 토큰 (예 : &lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt; , &lt;a href=&quot;https://globus.org/&quot;&gt;Globus&lt;/a&gt; 등) 을 발행하는 여러 OAuth2 / OIDC ID 공급자를 지원하는 설정이 쉬운 인증 미들웨어입니다 .</target>
        </trans-unit>
        <trans-unit id="98365abf7a35b55e3b549f20aa17daee9fe3c995" translate="yes" xml:space="preserve">
          <source>Rationale</source>
          <target state="translated">이론적 해석</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">설정</target>
        </trans-unit>
        <trans-unit id="f7347011dad922ecb28d1f9f97cae602c60f8dc5" translate="yes" xml:space="preserve">
          <source>Then any view can be protected by &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, or, if you want to
authenticate an HTTP request against both &lt;code&gt;JWTAuthentication&lt;/code&gt; or &lt;code&gt;GlobusAuthentication&lt;/code&gt;, by
&lt;code&gt;MultiproviderAuthentication&lt;/code&gt; class.</source>
          <target state="translated">그런 다음 모든보기를 보호 할 수 있습니다 &lt;code&gt;JWTAuthentication&lt;/code&gt; 또는 &lt;code&gt;GlobusAuthentication&lt;/code&gt; 둘 다에 대한 HTTP 요청을 인증하려는 경우, 또는 &lt;code&gt;JWTAuthentication&lt;/code&gt; 또는 &lt;code&gt;GlobusAuthentication&lt;/code&gt; 에 의해, &lt;code&gt;MultiproviderAuthentication&lt;/code&gt; 의 클래스를.</target>
        </trans-unit>
        <trans-unit id="a1220b82c1195db067a1119e19e5d9fe237de6f8" translate="yes" xml:space="preserve">
          <source>and in &lt;code&gt;settings.py&lt;/code&gt; set the following:</source>
          <target state="translated">과에 &lt;code&gt;settings.py&lt;/code&gt; 다음을 설정합니다 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
